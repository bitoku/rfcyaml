- title: __initial_text__
  contents:
  - '                    ODETTE File Transfer Protocol 2

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo updates the ODETTE File Transfer Protocol, an established\n\
    \   file transfer protocol facilitating electronic data interchange of\n   business\
    \ data between trading partners, to version 2.\n   The protocol now supports secure\
    \ and authenticated communication over\n   the Internet using Transport Layer\
    \ Security, provides file\n   encryption, signing, and compression using Cryptographic\
    \ Message\n   Syntax, and provides signed receipts for the acknowledgement of\n\
    \   received files.\n   The protocol supports both direct peer-to-peer communication\
    \ and\n   indirect communication via a Value Added Network and may be used with\n\
    \   TCP/IP, X.25, and ISDN-based networks.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Background .................................................4\n  \
    \    1.2. Summary of Features ........................................5\n    \
    \  1.3. General Principles .........................................5\n      1.4.\
    \ Structure ..................................................6\n      1.5. Virtual\
    \ Files ..............................................6\n      1.6. Service Description\
    \ ........................................9\n      1.7. Security ...................................................9\n\
    \   2. Network Service ................................................11\n  \
    \    2.1. Introduction ..............................................11\n    \
    \  2.2. Service Primitives ........................................11\n      2.3.\
    \ Secure ODETTE-FTP Session .................................12\n      2.4. Port\
    \ Assignment ...........................................12\n   3. File Transfer\
    \ Service ..........................................13\n      3.1. Model .....................................................13\n\
    \      3.2. Session Setup .............................................14\n  \
    \    3.3. File Transfer .............................................16\n    \
    \  3.4. Session Take Down .........................................20\n      3.5.\
    \ Service State Automata ....................................23\n   4. Protocol\
    \ Specification .........................................28\n      4.1. Overview\
    \ ..................................................28\n      4.2. Start Session\
    \ Phase .......................................28\n      4.3. Start File Phase\
    \ ..........................................30\n      4.4. Data Transfer Phase\
    \ .......................................34\n      4.5. End File Phase ............................................35\n\
    \      4.6. End Session Phase .........................................36\n  \
    \    4.7. Problem Handling ..........................................36\n   5.\
    \ Commands and Formats ...........................................37\n      5.1.\
    \ Conventions ...............................................37\n      5.2. Commands\
    \ ..................................................37\n      5.3. Command Formats\
    \ ...........................................37\n      5.4. Identification Code\
    \ .......................................68\n   6. File Services ..................................................69\n\
    \      6.1. Overview ..................................................69\n  \
    \    6.2. File Signing ..............................................69\n    \
    \  6.3. File Encryption ...........................................70\n      6.4.\
    \ File Compression ..........................................70\n      6.5. V\
    \ Format Files - Record Lengths ...........................70\n   7. ODETTE-FTP\
    \ Data Exchange Buffer ................................71\n      7.1. Overview\
    \ ..................................................71\n      7.2. Data Exchange\
    \ Buffer Format ...............................71\n      7.3. Buffer Filling Rules\
    \ ......................................72\n   8. Stream Transmission Buffer .....................................73\n\
    \      8.1. Introduction ..............................................73\n  \
    \    8.2. Stream Transmission Header Format .........................73\n   9.\
    \ Protocol State Machine .........................................74\n      9.1.\
    \ ODETTE-FTP State Machine ..................................74\n      9.2. Error\
    \ Handling ............................................75\n      9.3. States ....................................................76\n\
    \      9.4. Input Events ..............................................79\n  \
    \    9.5. Output Events .............................................79\n    \
    \  9.6. Local Variables ...........................................80\n      9.7.\
    \ Local Constants ...........................................81\n      9.8. Session\
    \ Connection State Table ............................82\n      9.9. Error and\
    \ Abort State Table ...............................85\n      9.10. Speaker State\
    \ Table 1 ....................................86\n      9.11. Speaker State Table\
    \ 2 ....................................91\n      9.12. Listener State Table .....................................93\n\
    \      9.13. Example ..................................................96\n  \
    \ 10. Miscellaneous .................................................97\n    \
    \  10.1. Algorithm Choice .........................................97\n      10.2.\
    \ Cryptographic Algorithms .................................97\n      10.3. Protocol\
    \ Extensions ......................................97\n      10.4. Certificate\
    \ Services .....................................98\n   11. Security Considerations\
    \ .......................................98\n   Appendix A. Virtual File Mapping\
    \ Example .........................100\n   Appendix B. ISO 646 Character Subset\
    \ .............................103\n   Appendix C. X.25 Specific Information ............................104\n\
    \      C.1. X.25 Addressing Restrictions .............................104\n  \
    \    C.2. Special Logic ............................................105\n    \
    \  C.3. PAD Parameter Profile ....................................116\n   Appendix\
    \ D. OFTP X.25 Over ISDN Recommendation ...................118\n      D.1. ODETTE\
    \ ISDN Recommendation ...............................119\n      D.2. Introduction\
    \ to ISDN .....................................120\n      D.3. Equipment Types\
    \ ..........................................123\n      D.4. Implementation ...........................................124\n\
    \   Acknowledgements .................................................132\n  \
    \ Normative References .............................................132\n   Informative\
    \ References ...........................................133\n   ODETTE Address\
    \ ...................................................134\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   The ODETTE File Transfer Protocol (ODETTE-FTP) was defined\
    \ in 1986 by\n   working group four of the Organisation for Data Exchange by Tele\n\
    \   Transmission in Europe (ODETTE) to address the electronic data\n   interchange\
    \ (EDI) requirements of the European automotive industry.\n   ODETTE-FTP allows\
    \ business applications to exchange files on a peer-\n   to-peer basis in a standardised,\
    \ purely automatic manner and provides\n   a defined acknowledgement process on\
    \ successful receipt of a file.\n   ODETTE-FTP is not to be confused as a variant\
    \ of, or similar to, the\n   Internet FTP [FTP], which provides an interactive\
    \ means for\n   individuals to share files and which does not have any sort of\n\
    \   acknowledgement process.  By virtue of its interactive nature, lack\n   of\
    \ file acknowledgements, and client/server design, FTP does not\n   easily lend\
    \ itself to mission-critical environments for the exchange\n   of business data.\n\
    \   Over the last ten years, ODETTE-FTP has been widely deployed on\n   systems\
    \ of all sizes from personal computers to large mainframes\n   while the Internet\
    \ has emerged as the dominant international network,\n   providing high-speed\
    \ communication at low cost.  To match the demand\n   for EDI over the Internet,\
    \ ODETTE has decided to extend the scope of\n   its file transfer protocol to\
    \ incorporate security functions and\n   advanced compression techniques to ensure\
    \ that it remains at the\n   forefront of information exchange technology.\n \
    \  The protocol now supports secure and authenticated communication over\n   the\
    \ Internet using Transport Layer Security, provides file\n   encryption, signing,\
    \ and compression using Cryptographic Message\n   Syntax, and provides signed\
    \ receipts for the acknowledgement of\n   received files.\n   The protocol supports\
    \ both direct peer-to-peer communication and\n   indirect communication via a\
    \ Value Added Network and may be used with\n   TCP/IP, X.25 and ISDN based networks.\n\
    \   ODETTE-FTP has been defined by the ODETTE Security Working Group\n   which\
    \ consists of a number of ODETTE member organisations.  All\n   members have significant\
    \ operational experience working with and\n   developing OFTP and EDI solutions.\n"
- title: 1.2.  Summary of Features
  contents:
  - "1.2.  Summary of Features\n   This memo is a development of version 1.4 of ODETTE-FTP\
    \ [OFTP] with\n   these changes/additions:\n      Session level encryption\n \
    \     File level encryption\n      Secure authentication\n      File compression\n\
    \      Signed End to End Response (EERP)\n      Signed Negative End Response (NERP)\n\
    \      Maximum permitted file size increased to 9 PB (petabytes)\n      Virtual\
    \ file description added\n      Extended error codes\n   Version 1.4 of ODETTE-FTP\
    \ included these changes and additions to\n   version 1.3:\n      Negative End\
    \ Response (NERP)\n      Extended Date and Time stamp\n      New reason code 14\
    \ (File direction refused)\n"
- title: 1.3.  General Principles
  contents:
  - "1.3.  General Principles\n   The aim of ODETTE-FTP is to facilitate the transmission\
    \ of a file\n   between one or more locations in a way that is independent of\
    \ the\n   data communication network, system hardware, and software\n   environment.\n\
    \   In designing and specifying the protocol, the following factors were\n   considered.\n\
    \   1. The possible differences of size and sophistication of file\n      storage\
    \ and small and large systems.\n   2. The necessity to work with existing systems\
    \ (reduce changes to\n      existing products and allow easy implementation).\n\
    \   3. Systems of different ages.\n   4. Systems of different manufactures.\n\
    \   5. The potential for growth in sophistication (limit impact and avoid\n  \
    \    changes at other locations).\n"
- title: 1.4.  Structure
  contents:
  - "1.4.  Structure\n   ODETTE-FTP is modelled on the OSI reference model.  It is\
    \ designed to\n   use the Network Service provided by level 3 of the model and\
    \ provide\n   a File Service to the users.  Thus, the protocol spans levels 4\
    \ to 7\n   of the model.\n   The description of ODETTE-FTP contained in this memo\
    \ is closely\n   related to the original 'X.25' specification of the protocol\
    \ and in\n   the spirit of the OSI model describes:\n      1. A File Service provided\
    \ to a User Monitor.\n      2. A protocol for the exchange of information between\
    \ peer\n         ODETTE-FTP entities.\n"
- title: 1.5.  Virtual Files
  contents:
  - "1.5.  Virtual Files\n   Information is always exchanged between ODETTE-FTP entities\
    \ in a\n   standard representation called a Virtual File.  This allows data\n\
    \   transfer without regard for the nature of the communicating systems.\n   The\
    \ mapping of a file between a local and virtual representation will\n   vary from\
    \ system to system and is not defined here.\n                              o---------o\n\
    \                         Site | Local   |\n                          A   | File\
    \ A  |\n                              o---------o\n                          \
    \         |\n      o----------------------- Mapping A ------------------------o\n\
    \      |                            |                             |\n      | \
    \                      o---------o                        |\n      |         \
    \              | Virtual |                        |\n      |                 \
    \      |  File   |                        |\n      |                       o---------o\
    \                        |\n      |    o------------------------------------------------o\
    \    |\n      |    |                                                |    |\n \
    \     |    |                  ODETTE-FTP                    |    |\n      |  \
    \  |                                                |    |\n      |    o------------------------------------------------o\
    \    |\n      |      o---------o                        o---------o      |\n \
    \     |      | Virtual |                        | Virtual |      |\n      |  \
    \    |  File   |                        |  File   |      |\n      |      o---------o\
    \                        o----+----o      |\n      |           |             \
    \                     |           |\n      o------ Mapping B ------------------------\
    \ Mapping C ------o\n                  |                                  |\n\
    \             o---------o                        o----+----o\n             | Local\
    \   | Site              Site | Local   |\n             | File B  |  B        \
    \         C   | File C  |\n             o---------o                        o---------o\n\
    \   A Virtual File is described by a set of attributes identifying and\n   defining\
    \ the data to be transferred.  The main attributes are\n   detailed in Sections\
    \ 1.5.1 to 1.5.4.\n"
- title: 1.5.1.  Organisation
  contents:
  - "1.5.1.  Organisation\n   Sequential\n      Logical records are presented one\
    \ after another.  ODETTE-FTP must\n      be aware of the record boundaries.\n"
- title: 1.5.2.  Identification
  contents:
  - "1.5.2.  Identification\n   Dataset Name\n      Dataset name of the Virtual File\
    \ being transferred, assigned by\n      bilateral agreement.\n   Time stamp (HHMMSScccc)\n\
    \      A file qualifier indicating the time the Virtual File was made\n      available\
    \ for transmission.  The counter (cccc=0001-9999) gives\n      higher resolution.\n\
    \   Date stamp (CCYYMMDD)\n      A file qualifier indicating the date the Virtual\
    \ File was made\n      available for transmission.\n   The Dataset Name, Date,\
    \ and Time attributes are assigned by the\n   Virtual File's originator and are\
    \ used to uniquely identify a file.\n   They are all mandatory and must not be\
    \ changed by intermediate\n   locations.\n   The User Monitor may use the Virtual\
    \ File Date and Time attributes in\n   local processes involving date comparisons\
    \ and calculations.  Any\n   such use falls outside the scope of this protocol.\n"
- title: 1.5.3.  Record Format
  contents:
  - "1.5.3.  Record Format\n   Four record formats are defined:\n      Fixed (F)\n\
    \         Each record in the file has the same length.\n      Variable (V)\n \
    \        The records in the file can have different lengths.\n      Unstructured\
    \ (U)\n         The file contains a stream of data.  No structure is defined.\n\
    \      Text File (T)\n         A Text File is defined as a sequence of ASCII characters,\n\
    \         containing no control characters except CR-LF that delimit\n       \
    \  lines.  A line will not have more than 2048 characters.\n"
- title: 1.5.4.  Restart
  contents:
  - "1.5.4.  Restart\n   ODETTE-FTP can negotiate the restart of an interrupted Virtual\
    \ File\n   transmission.  Fixed and Variable format files are restarted on\n \
    \  record boundaries.  For Unstructured and Text files, the restart\n   position\
    \ is expressed as a file offset in 1K (1024 octet) blocks.\n   The restart position\
    \ is always calculated relative to the start of\n   the Virtual File.\n"
- title: 1.6.  Service Description
  contents:
  - "1.6.  Service Description\n   ODETTE-FTP provides a file transfer service to\
    \ a User Monitor and in\n   turn uses the Internet transport layer stream service\
    \ to communicate\n   between peers.\n   These services are specified in this memo\
    \ using service primitives\n   grouped into four classes as follows:\n      Request\
    \ (RQ)       An entity asks the service to do some work.\n      Indication (IND)\
    \   A service informs an entity of an event.\n      Response (RS)      An entity\
    \ responds to an event.\n      Confirm (CF)       A service informs an entity\
    \ of the response.\n   Services may be confirmed, using the request, indication,\
    \ response,\n   and confirm primitives, or unconfirmed using just the request\
    \ and\n   indication primitives.\n"
- title: 1.7.  Security
  contents:
  - "1.7.  Security\n   ODETTE-FTP provides a number of security services to protect\
    \ a\n   Virtual File transmission across a hostile network.\n   These security\
    \ services are as follows:\n      Confidentiality\n      Integrity\n      Non-repudiation\
    \ of receipt\n      Non-repudiation of origin\n      Secure authentication\n \
    \  Security services in this specification are implemented as follows:\n     \
    \ Session level encryption\n      File level encryption\n      Signed files\n\
    \      Signed receipts\n      Session level authentication\n      ODETTE-FTP Authentication\n\
    \   Session level encryption provides data confidentiality by encryption\n   of\
    \ all the protocol commands and data exchanged between two parties,\n   preventing\
    \ a third party from extracting any useful information from\n   the transmission.\n\
    \   This session level encryption is achieved by layering ODETTE-FTP over\n  \
    \ Transport Layer Security [TLS], distinguishing between secure and\n   unsecure\
    \ TCP/IP traffic using different port numbers.\n   File encryption provides complementary\
    \ data confidentiality by\n   encryption of the files in their entirety.  Generally,\
    \ this\n   encryption occurs prior to transmission, but it is also possible to\n\
    \   encrypt and send files while in session.  File encryption has the\n   additional\
    \ benefit of allowing a file to remain encrypted outside of\n   the communications\
    \ session in which it was sent.  The file can be\n   received and forwarded by\
    \ multiple intermediaries, yet only the final\n   destination will be able to\
    \ decrypt the file.  File encryption does\n   not encrypt the actual protocol\
    \ commands, so trading partner EDI\n   codes and Virtual File names are still\
    \ viewable.\n   Secure authentication is implemented through the session level\n\
    \   authentication features available in [TLS] and proves the identity of\n  \
    \ the parties wishing to communicate.\n   ODETTE-FTP Authentication also provides\
    \ an authentication mechanism,\n   but one that is integral to ODETTE-FTP and\
    \ is available on all\n   network infrastructures over which ODETTE-FTP is operated\
    \ (this is in\n   contrast to [TLS] which is generally only available over TCP/IP-based\n\
    \   networks).  Both parties are required to possess certificates when\n   ODETTE-FTP\
    \ Authentication is used.\n   The security features in ODETTE-FTP 2 are centred\
    \ around the use of\n   [X.509] certificates.  To take advantage of the complete\
    \ range of\n   security services offered in both directions, each party is required\n\
    \   to possess an [X.509] certificate.  If the confidentiality of data\n   between\
    \ two parties is the only concern, then [TLS] alone can be\n   used, which allows\
    \ the party accepting an incoming connection (the\n   Responder) to be the only\
    \ partner required to possess a certificate.\n   For businesses, this means that\
    \ session level encryption between a\n   hub and its trading partners can be achieved\
    \ without requiring all\n   the trading partners to obtain a certificate, assuming\
    \ that trading\n   partners always connect to the hub.\n   With the exception\
    \ of [TLS], all the security services work with X.25\n   and ISDN as transport\
    \ media.  Although nothing technically precludes\n   [TLS] from working with X.25\
    \ or ISDN, implementations are rare.\n"
- title: 2.  Network Service
  contents:
  - '2.  Network Service

    '
- title: 2.1.  Introduction
  contents:
  - "2.1.  Introduction\n   ODETTE-FTP peer entities communicate with each other via\
    \ the OSI\n   Network Service or the Transmission Control Protocol Transport\n\
    \   Service [RFC793].  This is described by service primitives\n   representing\
    \ request, indication, response, and confirmation actions.\n   For the Internet\
    \ environment, the service primitives mentioned below\n   for the Network Service\
    \ have to be mapped to the respective Transport\n   Service primitives.  This\
    \ section describes the Network Service\n   primitives used by ODETTE-FTP and\
    \ their relationship to the TCP\n   interface.  In practice, the local transport\
    \ service application\n   programming interface will be used to access the TCP\
    \ service.\n"
- title: 2.2.  Service Primitives
  contents:
  - "2.2.  Service Primitives\n   All network primitives can be directly mapped to\
    \ the respective\n   Transport primitives when using TCP.\n"
- title: 2.2.1.  Network Connection
  contents:
  - "2.2.1.  Network Connection\n      N_CON_RQ   ------>   N_CON_IND\n      N_CON_CF\
    \   <------   N_CON_RS\n   This describes the setup of a connection.  The requesting\
    \ ODETTE-FTP\n   peer uses the N_CON_RQ primitive to request an active OPEN of\
    \ a\n   connection to a peer ODETTE-FTP, the Responder, which has previously\n\
    \   requested a passive OPEN.  The Responder is notified of the incoming\n   connection\
    \ via N_CON_IND and accepts it with N_CON_RS.  The requester\n   is notified of\
    \ the completion of its OPEN request upon receipt of\n   N_CON_CF.\n   Parameters\n\
    \   Request           Indication        Response          Confirmation\n   ---------------------------------------------------------------------\n\
    \   Dest addr ------> same              same              same\n"
- title: 2.2.2.  Network Data
  contents:
  - "2.2.2.  Network Data\n      N_DATA_RQ  ------>   N_DATA_IND\n   Data exchange\
    \ is an unconfirmed service.  The requester passes data\n   for transmission to\
    \ the Network Service via the N_DATA_RQ primitive.\n   The Responder is notified\
    \ of the availability of data via N_DATA_IND.\n   In practice, the notification\
    \ and receipt of data may be combined,\n   such as by the return from a blocking\
    \ read from the network socket.\n   Parameters\n   Request                  Indication\n\
    \   ---------------------------------------------------------------------\n  \
    \ Data ------------------> same\n"
- title: 2.2.3.  Network Disconnection
  contents:
  - "2.2.3.  Network Disconnection\n      N_DISC_RQ  ------>   N_DISC_IND\n   An ODETTE-FTP\
    \ requests the termination of a connection with the\n   N_DISC_RQ service primitive.\
    \  Its peer is notified of the CLOSE by a\n   N_DISC_IND event.  It is recognised\
    \ that each peer must issue a\n   N_DISC_RQ primitive to complete the TCP symmetric\
    \ close procedure.\n"
- title: 2.2.4.  Network Reset
  contents:
  - "2.2.4.  Network Reset\n    ------>   N_RST_IND\n   An ODETTE-FTP entity is notified\
    \ of a network error by a N_RST_IND\n   event.  It should be noted that N_RST_IND\
    \ would also be generated by\n   a peer RESETTING the connection, but this is\
    \ ignored here as N_RST_RQ\n   is never sent to the Network Service by ODETTE-FTP.\n"
- title: 2.3.  Secure ODETTE-FTP Session
  contents:
  - "2.3.  Secure ODETTE-FTP Session\n   [TLS] provides a mechanism for securing an\
    \ ODETTE-FTP session over\n   the Internet or a TCP network.  ODETTE-FTP is layered\
    \ over [TLS],\n   distinguishing between secure and unsecure traffic by using\
    \ different\n   server ports.\n   The implementation is very simple.  Layer ODETTE-FTP\
    \ over [TLS] in\n   the same way as layering ODETTE-FTP over TCP/IP.  [TLS] provides\
    \ both\n   session encryption and authentication, both of which may be used by\n\
    \   the connecting parties.  A party acts as a [TLS] server when\n   receiving\
    \ calls and acts as a [TLS] client when making calls.  When\n   the [TLS] handshake\
    \ has completed, the responding ODETTE-FTP may\n   start the ODETTE-FTP session\
    \ by sending the Ready Message.\n"
- title: 2.4.  Port Assignment
  contents:
  - "2.4.  Port Assignment\n   An ODETTE-FTP requester will select a suitable local\
    \ port.\n   The responding ODETTE-FTP will listen for connections on Registered\n\
    \   Port 3305; the service name is 'odette-ftp'.\n   The responding ODETTE-FTP\
    \ will listen for secure TLS connections on\n   Registered Port 6619; the service\
    \ name is 'odette-ftps'.\n"
- title: 3.  File Transfer Service
  contents:
  - "3.  File Transfer Service\n   The File Transfer Service describes the services\
    \ offered by an\n   ODETTE-FTP entity to its User Monitor (generally an application).\n\
    \   NOTE: The implementation of the service primitives is an application\n   \
    \      issue.\n"
- title: 3.1.  Model
  contents:
  - "3.1.  Model\n          o-------------------o             o-------------------o\n\
    \          |                   |             |                   |\n         \
    \ |   USER  MONITOR   |             |   USER  MONITOR   |\n          |       \
    \            |             |                   |\n          o-------------------o\
    \             o-------------------o\n                  |   A                 \
    \            |   A\n                  |   |                             |   |\n\
    \      F_XXX_RQ/RS |   | F_XXX_IND/CF    F_XXX_RQ/RS |   | F_XXX_IND/CF\n    \
    \              V   |                             V   |\n          o-------------------o\
    \             o-------------------o\n          |                   |- - - - -\
    \ - >|                   |\n          | ODETTE-FTP Entity |   E-Buffer  | ODETTE-FTP\
    \ Entity |\n          |                   |< - - - - - -|                   |\n\
    \          o-------------------o             o-------------------o\n         \
    \         |   A                             |   A\n      N_XXX_RQ/RS |   | N_XXX_IND/CF\
    \    N_XXX_RQ/RS |   | N_XXX_IND/CF\n                  |   |                 \
    \            |   |\n                  V   |                             V   |\n\
    \        o---------------------------------------------------------o\n       \
    \ |                                                         |\n        |     \
    \                 N E T W O R K                      |\n        |            \
    \                                             |\n        o---------------------------------------------------------o\n\
    \         Key:  E-Buffer - Exchange Buffer\n               F_       - File Transfer\
    \ Service Primitive\n               N_       - Network Service Primitive\n"
- title: 3.2.  Session Setup
  contents:
  - '3.2.  Session Setup

    '
- title: 3.2.1.  Session Connection Service
  contents:
  - "3.2.1.  Session Connection Service\n   These diagrams represent the interactions\
    \ between two communicating\n   ODETTE-FTP entities and their respective User\
    \ Agents.\n   The vertical lines represent the ODETTE-FTP entities.  The User\n\
    \   Agents are not shown.\n                             |            |\n     \
    \      F_CONNECT_RQ ---->|------------|----> F_CONNECT_IND\n                 \
    \            |            |\n           F_CONNECT_CF <----|------------|<----\
    \ F_CONNECT_RS\n                             |            |\n   Parameters\n \
    \  Request           Indication        Response          Confirm\n   ---------------------------------------------------------------------\n\
    \   called-address -> same              ---               ----\n   calling-address->\
    \ same              ---               ----\n   ID1 ------------> same        \
    \      ID2 ------------> same\n   PSW1------------> same              PSW2 ----------->\
    \ same\n   mode1 ----------> mode2 ----------> mode3 ----------> same\n   restart1\
    \ -------> same -----------> restart2 -------> same\n   authentication1-> same\
    \ -----------> authentication2-> same\n   ---------------------------------------------------------------------\n\
    \   Mode\n      Specifies the file transfer capabilities of the entity sending\
    \ or\n      receiving a F_CONNECT primitive for the duration of the session.\n\
    \      Value:\n         Sender-only    The entity can only send files.\n     \
    \    Receiver-only  The entity can only receive files.\n         Both        \
    \   The entity can both send and receive files.\n      Negotiation:\n        Sender-only\
    \    Not negotiable.\n        Receiver-only  Not negotiable.\n        Both   \
    \        Can be negotiated down to Sender-only or\n                       Receiver-only\
    \ by the User Monitor or the\n                       ODETTE-FTP entity.\n   Request\
    \           Indication        Response          Confirm\n   ---------------------------------------------------------------------\n\
    \   Sender-only ----> Receiver-only --> Receiver-only --> Sender-only\n   Receiver-only\
    \ --> Sender-only ----> Sender-only ----> Receiver-only\n   Both -----+----->\
    \ Both ----+------> Both -----------> Both\n             |             or +------>\
    \ Receiver-only --> Sender-only\n             |             or +------> Sender-only\
    \ ----> Receiver-only\n             |\n          or +-----> Receiver-only -->\
    \ Receiver-only --> Sender-only\n          or +-----> Sender-only ----> Sender-only\
    \ ----> Receiver-only\n   ---------------------------------------------------------------------\n\
    \   Restart\n      Specifies the file transfer restart capabilities of the User\n\
    \      Monitor.\n      Value:\n         Y         The entity can restart file\
    \ transfers.\n         N         The entity cannot restart file transfers.\n \
    \     Negotiation:\n   Request           Indication        Response          Confirm\n\
    \   ---------------------------------------------------------------------\n  \
    \ restart = Y ----> restart = Y --+-> restart = Y ----> restart = Y\n        \
    \                        or +-> restart = N ----> restart = N\n   restart = N\
    \ ----> restart = N ----> restart = N ----> restart = N\n   ---------------------------------------------------------------------\n\
    \   Authentication\n      Specifies the authentication requirement of the User\
    \ Monitor.\n      Value:\n         Y             Authentication required.\n  \
    \       N             Authentication not required.\n      Negotiation:     Not\
    \ negotiable.\n   Request           Indication        Response          Confirm\n\
    \   ---------------------------------------------------------------------\n  \
    \ auth = Y    ----> auth = Y    ----> auth = Y    ----> auth = Y\n   auth = N\
    \    ----> auth = N    ----> auth = N    ----> auth = N\n   ---------------------------------------------------------------------\n"
- title: 3.3.  File Transfer
  contents:
  - '3.3.  File Transfer

    '
- title: 3.3.1.  File Opening
  contents:
  - "3.3.1.  File Opening\n                             |            |\n        F_START_FILE_RQ\
    \ ---->|------------|----> F_START_FILE_IND\n                             |  \
    \          |\n   F_START_FILE_CF(+|-) <----|------------|<---- F_START_FILE_RS(+|-)\n\
    \                             |            |\n   Parameters\n   Request      \
    \    Ind.   RS(+)          CF(+)   RS(-)         CF(-)\n   ------------------------------------------------------------------\n\
    \   filename-------> same   ----           ----    ----          ----\n   date-time------>\
    \ same   ----           ----    ----          ----\n   destination----> same \
    \  ----           ----    ----          ----\n   originator-----> same   ----\
    \           ----    ----          ----\n   rec-format-----> same   ----      \
    \     ----    ----          ----\n   rec-size ------> same   ----           ----\
    \    ----          ----\n   file-size------> same   ----           ----    ----\
    \          ----\n   org-file-size--> same   ----           ----    ----      \
    \    ----\n   signed-eerp----> same   ----           ----    ----          ----\n\
    \   cipher---------> same   ----           ----    ----          ----\n   sec-services--->\
    \ same   ----           ----    ----          ----\n   compression----> same \
    \  ----           ----    ----          ----\n   envelope-format> same   ----\
    \           ----    ----          ----\n   description----> same   ----      \
    \     ----    ----          ----\n   restart-pos1---> same-> restart-pos2-> same\
    \    ----          ----\n   ----             ----   ----           ----    cause\
    \ ------> same\n   ----             ----   ----           ----    retry-later->\
    \ same\n   ------------------------------------------------------------------\n\
    \   Notes:\n   1. Retry-later has values \"Y\" or \"N\".\n   2. Cause is the reason\
    \ for refusing the transfer (1,..,13,99).\n   3. Restart-pos1 not equal 0 is only\
    \ valid if restart has been\n      agreed during initial negotiation.\n   4. Restart-pos2\
    \ is less than or equal to restart-pos1.\n"
- title: 3.3.2.  Data Regime
  contents:
  - "3.3.2.  Data Regime\n                             |            |\n          \
    \    F_DATA_RQ ---->|------------|----> F_DATA_IND\n                         \
    \    |            |\n              F_DATA_CF <----|(---CDT----)|\n           \
    \                  |            |\n   Note: Unlike other commands, where the F_XXX_CF\
    \ signal is a result of\n      a corresponding F_XXX_RS command, in this case,\
    \ the local entity\n      layer issues this signal when it is ready for the next\
    \ data\n      request.  This decision is based on the current credit count and\n\
    \      the reception of CDT (Set Credit) from the receiver.\n"
- title: 3.3.3.  File Closing
  contents:
  - "3.3.3.  File Closing\n                             |            |\n         F_CLOSE_FILE_RQ\
    \ --->|------------|----> F_CLOSE_FILE_IND\n                             |   \
    \         |\n    F_CLOSE_FILE_CF(+|-) <---|------------|<---- F_CLOSE_FILE_RS(+|-)\n\
    \                             |            |\n   Parameters\n   Request      \
    \   Ind    RS(+)          CF(+)     RS(-)         CF(-)\n   ---------------------------------------------------------------------\n\
    \   rec-count --->  same   ----           ----      ----          ----\n   unit-count\
    \ -->  same   ----           ----      ----          ----\n   ----           \
    \ ----   Speaker=Y ---> Speaker=N ----          ----\n   ----            ----\
    \   Speaker=N ---> Speaker=Y ----          ----\n   ----            ----   ----\
    \           ----      cause --->    same\n   ---------------------------------------------------------------------\n\
    \   In a positive Close File response (F_CLOSE_FILE_RS(+)) the current\n   Listener\
    \ may either:\n      1.  Set Speaker to \"Yes\" and become the Speaker or\n  \
    \    2.  Set Speaker to \"No\"  and remain the Listener.\n   The File Transfer\
    \ service will ensure that the setting of the speaker\n   parameter is consistent\
    \ with the capabilities of the peer user.\n   The turn is never exchanged in the\
    \ case of a negative response or\n   confirmation.\n   Only the Speaker is allowed\
    \ to issue F_XXX_FILE_RQ primitives.\n"
- title: 3.3.4.  Exchanging the Turn
  contents:
  - '3.3.4.  Exchanging the Turn

    '
- title: 3.3.4.1.  Initial Turn (First Speaker)
  contents:
  - "3.3.4.1.  Initial Turn (First Speaker)\n   The Initiator becomes the first Speaker\
    \ at the end of the Session\n   Setup (F_CONNECT_CF received by Initiator and\
    \ F_CONNECT_RS sent by\n   Responder).\n"
- title: 3.3.4.2.  Following Turns
  contents:
  - "3.3.4.2.  Following Turns\n   Rules:\n   1. At each unsuccessful End of File,\
    \ the turn is not exchanged.\n   2. At each successful End of File, the turn is\
    \ exchanged if requested\n      by the Listener:\n      - The current Listener\
    \ receives F_CLOSE_FILE_IND (Speaker =\n        choice).\n      - If the Listener\
    \ answers F_CLOSE_FILE_RS(Speaker = YES), it\n        becomes the Speaker, the\
    \ Speaker receives F_CLOSE_FILE_CF\n        (Speaker = NO) and becomes the Listener.\n\
    \      - If the Listener answers F_CLOSE_FILE_RS(Speaker = NO), it\n        remains\
    \ as the Listener, and the Speaker receives\n        F_CLOSE_FILE_CF (Speaker\
    \ = YES) and remains as the Speaker.\n   3. The Speaker can issue a Change Direction\
    \ request (F_CD_RQ) to\n      become the Listener.  The Listener receives a Change\
    \ Direction\n      indication (F_CD_IND) and becomes the Speaker.\n   4. In order\
    \ to prevent loops of F_CD_RQ/IND, the Speaker may not send\n      an F_CD_RQ\
    \ after receiving an unsolicited F_CD_IND.  If the\n      Listener receives a\
    \ solicited F_CD_IND as a result of sending\n      EFPA(Speaker=Yes), it is acceptable\
    \ to immediately relinquish the\n      right to speak by sending an F_CD_RQ.\n"
- title: 3.3.5.  End to End Response
  contents:
  - "3.3.5.  End to End Response\n   This service is initiated by the current Speaker\
    \ (if there is no file\n   transfer in progress) to send an End to End Response\
    \ from the final\n   destination to the originator of a file.\n              \
    \               |            |\n              F_EERP_RQ ---->|------------|---->\
    \ F_EERP_IND\n                             |            |\n              F_RTR_CF\
    \  <----|------------|<---- F_RTR_RS\n                             |         \
    \   |\n   Parameters\n   Request               Indication\n   ------------------------------------\n\
    \   filename -----------> same\n   date ---------------> same\n   time --------------->\
    \ same\n   destination --------> same\n   originator ---------> same\n   hash\
    \ ---------------> same\n   signature ----------> same\n   ------------------------------------\n\
    \   Relationship with Turn:\n   -  Only the Speaker may send an End to End Response\
    \ request.\n   -  Invoking the EERP service does not change the turn.\n   -  If\
    \ an F_CD_IND has been received just before F_EERP_RQ is issued,\n      this results\
    \ in leaving the special condition created by the\n      reception of F_CD_IND;\
    \ i.e., while it was possible to issue\n      F_RELEASE_RQ and not possible to\
    \ issue F_CD_RQ just after the\n      reception of F_CD_IND, after having issued\
    \ F_EERP_RQ the normal\n      Speaker status is entered again (F_CD_RQ valid,\
    \ but F_RELEASE_RQ\n      not valid).\n   Notes:\n   1. The F_EERP_RQ (and also\
    \ F_NERP_RQ) is confirmed with an F_RTR_CF\n      signal.  The F_RTR_CF signal\
    \ is common to both F_EERP_RQ and\n      F_NERP_RQ.  There should be no ambiguity,\
    \ since there can only be\n      one such request pending at any one time.\n \
    \  2. The signature is optional and is requested when sending the\n      F_START_FILE_RQ.\n\
    \   3. If it is not possible to sign the EERP, then an unsigned EERP\n      should\
    \ still be sent.\n   4. It is an application implementation issue to validate\
    \ the contents\n      of the EERP and its signature and to decide what action\
    \ to take on\n      receipt of an EERP that fails validation or is not signed\
    \ when a\n      signed EERP was requested.\n"
- title: 3.3.6.  Negative End Response
  contents:
  - "3.3.6.  Negative End Response\n   This service is initiated by the current speaker\
    \ (if there is no file\n   transfer in progress) to send a Negative End Response\
    \ when a file\n   could not be transmitted to the next destination.  It is sent\
    \ only if\n   the problem is of a non-temporary kind.\n   This service may also\
    \ be initiated by the final destination instead\n   of sending an End to End Response\
    \ when a file could not be processed,\n   after having successfully received the\
    \ file.\n                             |            |\n              F_NERP_RQ\
    \ ---->|------------|----> F_NERP_IND\n                             |        \
    \    |\n              F_RTR_CF  <----|------------|----- F_RTR_RS\n          \
    \                   |            |\n   Parameters\n   Request                \
    \          Indication\n   ---------------------------------------------------\n\
    \   filename ----------------------> same\n   date -------------------------->\
    \ same\n   time --------------------------> same\n   destination ------------------->\
    \ same\n   originator --------------------> same\n   creator of negative response\
    \ --> same\n   reason ------------------------> same\n   reason text ------------------->\
    \ same\n   hash --------------------------> same\n   signature --------------------->\
    \ same\n   ---------------------------------------------------\n   Relationship\
    \ with Turn:\n   The same as for the End-To-End response (see Section 3.3.5).\n"
- title: 3.4.  Session Take Down
  contents:
  - '3.4.  Session Take Down

    '
- title: 3.4.1.  Normal Close
  contents:
  - "3.4.1.  Normal Close\n                             |            |\n         \
    \  F_RELEASE_RQ ---->|------------|----> F_RELEASE_IND\n                     \
    \        |            |\n   Parameters\n   Request                  Indication\n\
    \   ---------------------------------------------------------------------\n  \
    \ reason = normal -------> ----\n   ---------------------------------------------------------------------\n\
    \   The Release service can only be initiated by the Speaker.\n   The Speaker\
    \ can only issue a Release request (F_RELEASE_RQ) just\n   after receiving an\
    \ unsolicited Change Direction indication\n   (F_CD_IND).  This ensures that the\
    \ other partner doesn't want to send\n   any more files in this session.\n   Peer\
    \ ODETTE-FTP entities action a normal session release by\n   specifying Reason\
    \ = Normal in an End Session (ESID) command.\n"
- title: 3.4.2.  Abnormal Close
  contents:
  - "3.4.2.  Abnormal Close\n                             |            |\n       \
    \    F_RELEASE_RQ ---->|------------|----> F_ABORT_IND\n                     \
    \        |            |\n   Parameters\n   Request                  Indication\n\
    \   ---------------------------------------------------------------------\n  \
    \ reason = error value --> same (or equivalent)\n                            \
    \  AO (Abort Origin) = (L)ocal or (D)istant\n   ---------------------------------------------------------------------\n\
    \   Abnormal session release can be initiated by either the Speaker or\n   the\
    \ Listener and also by the user or provider.\n   Abnormal session release can\
    \ occur at any time within the session.\n   Peer ODETTE-FTP entities action an\
    \ abnormal session release by\n   specifying Reason = Error-value in an End Session\
    \ (ESID) command.\n   The abnormal session release deals with the following types\
    \ of error:\n   1. The service provider will initiate an abnormal release in the\n\
    \      following cases:\n      1. Protocol error.\n      2. Failure of the Start\
    \ Session (SSID) negotiation.\n      3. Command not recognised.\n      4. Data\
    \ Exchange Buffer size error.\n      5. Resources not available.\n      6. Other\
    \ unspecified abort code (with Reason = unspecified).\n   2. The User Monitor\
    \ will initiate an abnormal release in the\n      following cases:\n      1. Local\
    \ site emergency close down.\n      2. Resources not available.\n      3. Other\
    \ unspecified abort code (with Reason = unspecified).\n   Other error types may\
    \ be handled by an abort of the connection.\n"
- title: 3.4.3.  Abort
  contents:
  - "3.4.3.  Abort\n                             |            |\n             F_ABORT_RQ\
    \ ---->|------------|----> F_ABORT_IND\n                             |       \
    \     |\n             User-Initiated Abort\n                             |   \
    \         |\n            F_ABORT_IND <----|------------|----> F_ABORT_IND\n  \
    \                           |            |\n            Provider-Initiated Abort\n\
    \   Parameters\n   Request                  Indication\n   ---------------------------------------------------------------------\n\
    \   --                       R  (Reason): specified or unspecified\n   --    \
    \                   AO (Abort Origin): (L)ocal or (D)istant\n   ---------------------------------------------------------------------\n\
    \   The Abort service may be invoked by either entity at any time.\n   The service\
    \ provider may initiate an abort in case of error\n   detection.\n"
- title: 3.4.4.  Explanation of Session Take Down Services
  contents:
  - "3.4.4.  Explanation of Session Take Down Services\n            User  | OFTP |\
    \        Network       | OFTP |  User\n   ---------------|------|----------------------|------|---------------\n\
    \                  |      |                      |      |\n   1. Normal Release\n\
    \     F_RELEASE_RQ |      | ESID(R=normal)       |      | F_RELEASE_IND\n   *--------------|->\
    \  ==|======================|=>  --|-------------->\n     (R=normal)   |     \
    \ |                      |      |\n   2. User-Initiated Abnormal Release\n   \
    \  F_RELEASE_RQ |      | ESID(R=error)        |      | F_ABORT_IND\n   *--------------|->\
    \  ==|======================|=>   -|-------------->\n   (R=error value)|     \
    \ |                      |      | (R=error,AO=D)\n   3. Provider-Initiated Abnormal\
    \ Release\n     F_ABORT_IND  |      | ESID(R=error)        |      | F_ABORT_IND\n\
    \   <--------------|-*  *=|======================|=>  --|-------------->\n   \
    \               |      |                      |      |\n   4. User-Initiated Connection\
    \ Abort\n    F_ABORT_RQ    |      | N_DISC_RQ            |      | F_ABORT_IND\n\
    \   *--------------|->  --|--------->..----------|->  --|-------------->\n   \
    \               |      |           N_DISC_IND |      | (R=unsp.,AO=D)\n   5. Provider-Initiated\
    \ Connection Abort\n     F_ABORT_IND  |      | N_DISC_RQ            |      | F_ABORT_IND\n\
    \   <--------------|-*  *-|--------->..----------|->  --|-------------->\n   (R=error,AO=L)\
    \ |      |           N_DISC_IND |      | (R=unsp.,AO=D)\n           Key:  *  \
    \      Origin of command flow\n                 F_ --->  File Transfer Service\
    \ primitive\n                 N_ --->  Network Service primitive\n           \
    \         ===>  ODETTE-FTP (OFTP) protocol message\n"
- title: 3.5.  Service State Automata
  contents:
  - "3.5.  Service State Automata\n   These state automata define the service as viewed\
    \ by the User\n   Monitor.  Events causing a state transition are shown in lower\
    \ case\n   and the resulting action in upper case where appropriate.\n"
- title: 3.5.1.  Idle State Diagram
  contents:
  - "3.5.1.  Idle State Diagram\n                              o------------o\n  \
    \                decision    |            |  f_connect_ind\n            +-----------------|\
    \    IDLE    |-----------------+\n            |   F_CONNECT_RQ  |    (0)     |\
    \  F_CONNECT_RS   |\n            |                 o------------o            \
    \     |\n            V                                                |\n   o-----------------o\
    \                                       |\n   |                 |            \
    \                           |\n   | I_WF_FCONNECTCF |                        \
    \               |\n   |                 |                                    \
    \   |\n   o--------+--------o                                       |\n      \
    \      |                                                |\n            | F_CONNECT_CF\
    \                                   |\n            V                         \
    \                       V\n   o-----------------o                            o-----------------o\n\
    \   |                 |                            |                 |\n   | \
    \ IDLE  SPEAKER  |                            | IDLE  LISTENER  |\n   |      \
    \ (1)       |                            |       (2)       |\n   |   See Speaker\
    \   |                            |  See Listener   |\n   |  State Diagram  | \
    \                           |  State Diagram  |\n   |                 |      \
    \                      |                 |\n   o-----------------o           \
    \                 o-----------------o\n"
- title: 3.5.2.  Speaker State Diagram
  contents:
  - "3.5.2.  Speaker State Diagram\n   o-----------------o                       \
    \       o-----------------o\n   |  IDLE LISTENER  |                          \
    \    |      IDLE       |\n   | CD_RQ just sent |                             \
    \ |     see (0)     |\n   | see (3), Listen |                              | \
    \     Idle       |\n   |  State Diagram  |                              |  State\
    \ Diagram  |\n   o-----------------o                              o-----------------o\n\
    \            A                                                A\n            |\
    \                                                |\n        decision         \
    \                                 decision\n        F_CD_RQ                  \
    \                       F_RELEASE_RQ\n            |                          \
    \                      |\n   o================o decision  o----------o decision\
    \  o---------------o\n   |                |---------->| WAIT FOR |<----------|\
    \               |\n   |                | F_EERP_RQ |          | F_EERP_RQ |  \
    \             |\n   |     IDLE       |           | EERP/    |           |    IDLE\
    \       |\n   |   SPEAKER      | decision  | NERP     | decision  |   SPEAKER\
    \     |\n   |     (1)        |---------->| CONFIRM. |<----------|     (4)    \
    \   |\n   |                | F_NERP_RQ |          | F_NERP_RQ |              \
    \ |\n   |                |           |          |           |               |\n\
    \   |                |           |          |           |    CD_IND     |\n  \
    \ |                | f_rtr_cf  |          |           | just received |\n   |\
    \                |<----------|          |           |               |\n   |  \
    \              |           o----------o           |               |\n   |    \
    \            |                                  |               |\n   |      \
    \          |                                  |               |\n   o================o\
    \                                  o---------------o\n     A  A        |     \
    \                                          |\n     |  |        | decision and\
    \ P2              decision and P2  |\n     |  |        +-----------------+   \
    \    +---------------------+\n     |  |         F_START_FILE_RQ  |       |   \
    \ F_START_FILE_RQ\n     |  |                          V       V\n     |  |   \
    \                   o---------------o\n     |  |  f_file_start_cf(-)  |      \
    \         |\n     |  +----------------------|    OPENING    |\n     |        \
    \                 |               |\n     |                         o---------------o\n\
    \     |                                 |\n   f_file_close_cf(-) or          f_start_file_cf(+)\n\
    \   f_file_close_cf(+) and not P1       |\n     |                            \
    \     V\n   o---------------o     o---------------o  record to send   o---------o\n\
    \   |               |     |               |------------------>|         |\n  \
    \ |    CLOSING    |     | DATA TRANSFER |     F_DATA_RQ     | NEXT    |\n   |\
    \               |     |               |                   | RECORD  |\n   |  \
    \             |     |               |     f_data_cf     |         |\n   |    \
    \           |     |               |<------------------|         |\n   o---------------o\
    \     o---------------o                   o---------o\n     |         A      \
    \             |\n     |         |    end of file    |\n     |         +-------------------+\n\
    \     |            F_CLOSE_FILE_RQ\n     |                                   \
    \           o-----------------o\n     |                f_file_close_cf(+) and\
    \ P1     |  IDLE LISTENER  |\n     +--------------------------------------------->|\
    \ see (2), Listen |\n                                                    |  State\
    \ Diagram  |\n   Predicates:                                      o-----------------o\n\
    \   P1: Positive confirmation and Speaker = YES\n   P2: Mode = Both or (Mode =\
    \ Sender-only)\n"
- title: 3.5.3  Listener State Diagram
  contents:
  - "3.5.3  Listener State Diagram\n   o-----------------o                       \
    \       o-----------------o\n   |  IDLE SPEAKER   |                          \
    \    |      IDLE       |\n   |   CD_IND just   |                             \
    \ |                 |\n   | received see(4) |                              | \
    \    see (0)     |\n   |  Speaker State  |                              |    \
    \  Idle       |\n   |     Diagram     |                              |  State\
    \ Diagram  |\n   o-----------------o                              o-----------------o\n\
    \            A                                                A\n            |\
    \                                                |\n         decision      f_eerp_ind\
    \                         decision\n         F_CD_IND  +--------------+      \
    \              F_RELEASE_IND\n            |      |   F_RTR_RS   |            \
    \              |\n   o=================o            |                 o-----------------o\n\
    \   |                 |<-----------+                 |                 |\n   |\
    \                 |                              |                 |\n   |   \
    \              | f_nerp_ind                   |                 |\n   |      \
    \           |------------+                 |                 |\n   |         \
    \        | F_RTR_RS   |                 |                 |\n   |            \
    \     |            |                 |                 |\n   |               \
    \  |<-----------+                 |                 |\n   |  IDLE LISTENER  |\
    \                 f_eerp_ind   |  IDLE LISTENER  |\n   |       (2)       |<-----------------------------|\
    \       (3)       |\n   |                 |                 F_RTR_RS     |   \
    \   CD_RQ      |\n   |                 |                              |    just\
    \ sent    |\n   |                 |                 f_nerp_ind   |           \
    \      |\n   |                 |<-----------------------------|              \
    \   |\n   |                 |                 F_RTR_RS     |                 |\n\
    \   |                 |                              |                 |\n   |\
    \                 | f_start_file_ind             |                 |\n   |   \
    \              |    and not P1                |                 |\n   |      \
    \           |---------------------+        |                 |\n   o=================o\
    \ F_START_FILE_RS(-)  |        o-----------------o\n     A A    |   A  A     \
    \                  |           |          |\n     | |    |   |  +-----------------------+\
    \           |          |\n     | |    |   |                                  \
    \    |          |\n     | |    |   | f_start_file_ind and not P1          |  \
    \        |\n     | |    |   +--------------------------------------+         \
    \ |\n     | |    |            F_START_FILE_RS(-)                       |\n   \
    \  | |    |                                                     |\n     | |  \
    \  |        f_start_file_ind           f_start_file_ind  |\n     | |    |    \
    \       and P1                        and P1      |\n     | |    +----------------------------+\
    \     +------------------+\n     | |             F_START_FILE_RS(+)  |     | F_START_FILE_RS(+)\n\
    \     | |                                 V     V\n     | |                  \
    \          o---------------o\n     | |f_close_file_ind and not P3 |          \
    \     |\n     | +----------------------------|               |\n     |    F_CLOSE_FILE_RS(+,N)\
    \      |               |\n     |                              |     DATA     \
    \ |\n     |                              |   TRANSFER    |\n     |  f_close_file_ind\
    \ and not P2 |               |-------------+\n     +------------------------------|\
    \               |             |\n          F_CLOSE_FILE_RS(-)        |       \
    \        |<------------+\n                                    o---------------o\
    \  F_DATA_IND\n   o---------------o                           |\n   | IDLESPEAKER\
    \  |  f_close_file_ind and P3  |\n   | see (1), Spkr |<--------------------------+\n\
    \   | State Diagram |    F_CLOSE_FILE_RS(+,Y)\n   o---------------o\n   Predicates:\n\
    \   P1: Decision to send F_START_FILE_RS(+)\n   P2: Decision to send F_CLOSE_FILE_RS(+)\n\
    \   P3: Decision to become Speaker\n"
- title: 4.  Protocol Specification
  contents:
  - '4.  Protocol Specification

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   ODETTE-FTP is divided into five operating phases.\n      Start\
    \ Session\n      Start File\n      Data Transfer\n      End File\n      End Session\n\
    \   After the End File phase, an ODETTE-FTP entity may enter a new Start\n   File\
    \ phase or terminate the session via the End Session phase.\n   ODETTE-FTP peers\
    \ communicate by sending and receiving messages in\n   Exchange Buffers via the\
    \ Network Service.  Each Exchange Buffer\n   contains one of the following commands.\n\
    \      SSRM    Start Session Ready Message\n      SSID    Start Session\n    \
    \  SECD    Security Change Direction\n      AUCH    Authentication Challenge\n\
    \      AURP    Authentication Response\n      SFID    Start File\n      SFPA \
    \   Start File Positive Answer\n      SFNA    Start File Negative Answer\n   \
    \   DATA    Data\n      CDT     Set Credit\n      EFID    End File\n      EFPA\
    \    End File Positive Answer\n      EFNA    End File Negative Answer\n      ESID\
    \    End Session\n      CD      Change Direction\n      EERP    End to End Response\n\
    \      NERP    Negative End Response\n      RTR     Ready To Receive\n   The remainder\
    \ of this section describes the protocol flows.  Section\n   five details the\
    \ command formats.\n"
- title: 4.2.  Start Session Phase
  contents:
  - "4.2.  Start Session Phase\n   The Start Session phase is entered immediately\
    \ after the network\n   connection has been established.\n"
- title: 4.2.1.  Entity Definition
  contents:
  - "4.2.1.  Entity Definition\n   The ODETTE-FTP entity that took the initiative\
    \ to establish the\n   network connection becomes the Initiator.  Its peer becomes\
    \ the\n   Responder.\n"
- title: 4.2.2.  Protocol Sequence
  contents:
  - "4.2.2.  Protocol Sequence\n   The first message must be sent by the Responder.\n\
    \   1. Initiator <-------------SSRM -- Responder   Ready Message\n           \
    \     -- SSID ------------>             Identification\n                <------------\
    \ SSID --             Identification\n"
- title: 4.2.3.  Secure Authentication
  contents:
  - "4.2.3.  Secure Authentication\n   Having exchanged SSIDs, the Initiator may optionally\
    \ begin an\n   authentication phase, in which each party proves its identity to\
    \ the\n   other.\n"
- title: 4.2.4.  Protocol Sequence
  contents:
  - "4.2.4.  Protocol Sequence\n   The first authentication message must be sent by\
    \ the Initiator.\n   1. Initiator -- SECD ------------> Responder   Change Direction\n\
    \                <------------ AUCH --             Challenge\n               \
    \ -- AURP ------------>             Response\n                <------------ SECD\
    \ --             Change Direction\n                -- AUCH ------------>     \
    \        Challenge\n                <------------ AURP --             Response\n\
    \   The Initiator sends a Security Change Direction (SECD) to which the\n   Responder\
    \ replies with an Authentication Challenge (AUCH).\n   The Responder looks up\
    \ the public certificate that is linked to the\n   purported identity of the Initiator\
    \ (located in the SSID).  If the\n   Responder is unable to locate a suitable\
    \ certificate then\n   authentication fails.  The Responder uses the public key\
    \ contained in\n   the certificate to encrypt a random challenge, unique for each\n\
    \   session, for the Initiator.  This encrypted challenge is sent as a\n   [CMS]\
    \ envelope to the Initiator as part of the AUCH.\n   The Initiator decrypts the\
    \ challenge using their private key and\n   sends the decrypted challenge back\
    \ to the Responder in the\n   Authentication Response (AURP).\n   The Responder\
    \ checks that the data received in the AURP matches the\n   random challenge that\
    \ was sent to the Initiator.\n   If the data matches, then the Initiator has authenticated\n\
    \   successfully and the Responder replies with a Security Change\n   Direction\
    \ (SECD) beginning the complementary process of verifying the\n   Responder to\
    \ the Initiator.  If the data does not match, then the\n   Initiator fails authentication.\n"
- title: 4.3.  Start File Phase
  contents:
  - '4.3.  Start File Phase

    '
- title: 4.3.1.  Entity Definition
  contents:
  - "4.3.1.  Entity Definition\n   The Initiator from the Start Session phase is designated\
    \ the Speaker\n   while the Responder becomes the Listener.  The roles are reversed\
    \ by\n   the Speaker sending a Change Direction command to the Listener.\n"
- title: 4.3.2.  Protocol Sequence
  contents:
  - "4.3.2.  Protocol Sequence\n   1. Speaker  -- SFID ------------> Listener   Start\
    \ File\n               <------------ SFPA --            Answer YES\n   2. Speaker\
    \  -- SFID ------------> Listener   Start File\n               <------------ SFNA\
    \ --            Answer NO\n                     Go To 1\n      Note: The User\
    \ Monitor should take steps to prevent a loop\n            situation occurring.\n\
    \   2. Speaker  -- CD --------------> Listener   Change Direction\n      Listener\
    \ <------------ EERP -- Speaker    End to End Response\n               -- RTR\
    \ ------------->            Ready to Receive\n               <------------ NERP\
    \ --            Negative End Response\n               -- RTR ------------->  \
    \          Ready to Receive\n               <------------ SFID --            Start\
    \ File\n"
- title: 4.3.3.  Restart Facilities
  contents:
  - "4.3.3.  Restart Facilities\n   The Start File command includes a count allowing\
    \ the restart of an\n   interrupted transmission to be negotiated.  If restart\
    \ facilities are\n   not available, the restart count must be set to zero.  The\
    \ sender\n   will start with the lowest record count + 1.\n"
- title: 4.3.4.  Broadcast Facilities
  contents:
  - "4.3.4.  Broadcast Facilities\n   The destination in a Start File command can\
    \ be specified as follows.\n   1.  An explicitly defined destination.\n   2. \
    \ A group destination that allows an intermediate location to\n       broadcast\
    \ the Virtual File to multiple destinations.\n   The Listener will send a negative\
    \ answer to the Speaker when the\n   destination is not known.\n"
- title: 4.3.5.  Priority
  contents:
  - "4.3.5.  Priority\n   The prioritisation of files for transmission is left to\
    \ the local\n   implementation.  To allow some flexibility, a change direction\n\
    \   mechanism is available in the End File phase.\n"
- title: 4.3.6.  End to End Response (EERP)
  contents:
  - "4.3.6.  End to End Response (EERP)\n   The End to End Response (EERP) command\
    \ notifies the originator of a\n   Virtual File that the Virtual File has been\
    \ successfully delivered to\n   its final destination.  This allows the originator\
    \ to perform house\n   keeping tasks such as deleting copies of the delivered\
    \ data.\n   If the originator of the Virtual File requested a signed EERP in the\n\
    \   SFID, the EERP must be signed.  Signing allows the originator of the\n   file\
    \ to prove that the EERP was generated by the final destination.\n   If the final\
    \ destination is unable to sign the EERP, it may send back\n   an unsigned EERP.\
    \  It is an implementation issue to allow the\n   acceptance of an unsigned EERP\
    \ if a signed EERP is requested.\n   A Response Command must be sent from the\
    \ location performing the\n   final processing or distribution of the data to\
    \ the originator.  The\n   Response is mandatory and may be sent in the same or\
    \ in any\n   subsequent session.\n   When an intermediate location broadcasts\
    \ or distributes a Virtual\n   File, it must receive a Response command from all\
    \ the locations to\n   which it forwarded the data before sending its own Response.\
    \  This\n   ensures that the Response received by the Virtual File's originator\n\
    \   accounts for all the destination locations.  An intermediate location\n  \
    \ therefore needs to track the status of files it processes over time.\n   The\
    \ requesting of a signed EERP is incompatible with the use of\n   broadcast facilities\
    \ because an EERP can be signed by only one\n   destination.  If this scenario\
    \ occurs, the intermediate broadcast\n   location may continue and ignore the\
    \ request for a signed EERP or\n   send back a NERP.\n   Example: Point to Point\n\
    \      Location A sends file Ba to location B, which will send an EERP to\n  \
    \    location A after it successfully receives the file.\n         o----------o\
    \                          o-----------o\n         | Loc. A   |----------- S1\
    \ ---------->| Loc. B    |\n         |          |                          | \
    \          |\n         | [Ba]     |<---------- R2 -----------| [Ba]      |\n \
    \        +----------o                          o-----------o\n               \
    \      Key:   S - File Transfer\n                            R - Response EERP\n\
    \                         [Ba] - File for B from A\n   Example: Data distribution\n\
    \      Location A sends a Virtual File containing data for distribution\n    \
    \  to locations B and C via clearing centres E1 and E2.  Clearing\n      centre\
    \ E1 must wait for a response from E2 (for file Ba) and\n      location C before\
    \ it sends its response, R8, to location A.\n      Clearing centre E2 can only\
    \ send response R7 to E1 when location B\n      acknowledges file Ba with response\
    \ R6.\n   o---------o        o---------o        o---------o        o---------o\n\
    \   | Loc. A  |-- S1 ->| Loc. E1 |-- S2 ->| Loc. E2 |-- S5 ->| Loc. B  |\n   |\
    \         |        |         |        |         |        |         |\n   | [Ba,Ca]\
    \ |<- R8 --| [Ba,Ca] |<- R7 --| [Ba]    |<- R6 --| [Ba]    |\n   o---------o \
    \       o---------o        o---------o        o---------o\n                  \
    \       A   |\n                         |   |           o---------o\n        \
    \                 |   +----- S3 ->| Loc. C  |\n                         |    \
    \           |         |\n                         +--------- R4 --| [Ca]    |\n\
    \                                         o---------o\n   Example: Data collection\n\
    \      Locations A and B send files Ca and Cb to clearing centre E1,\n      which\
    \ forwards both files to location C in a single Virtual File.\n      When it receives\
    \ response R4 from C, clearing centre E1 sends\n      response R5 to location\
    \ A and R6 to location B.\n         o---------o        o---------o        o---------o\n\
    \         | Loc. A  |-- S1 ->| Loc. E1 |-- S3 ->| Loc. C  |\n         |      \
    \   |        |         |        |         |\n         | [Ca]    |<- R5 --| [Ca,Cb]\
    \ |<- R4 --| [Ca,Cb] |\n         o---------o        o---------o        o---------o\n\
    \                               A   |\n         o---------o           |   |\n\
    \         | Loc. B  |-- S2 -----+   |\n         |         |               |\n\
    \         | [Cb]    |<- R6 ---------+\n         o---------o\n"
- title: 4.3.7.  Negative End Response (NERP)
  contents:
  - "4.3.7.  Negative End Response (NERP)\n   In addition to the EERP, which allows\
    \ control over successful\n   transmission of a file, a Negative End Response\
    \ signals that a file\n   could not be delivered to the final destination or that\
    \ the final\n   destination could not process the received file.\n   It may be\
    \ created by an intermediate node that could not transmit the\n   file any further\
    \ because the next node refuses to accept the file.\n   The cause of the refusal\
    \ has to be non-temporary, otherwise the\n   intermediate node has to try the\
    \ transmission again.\n   It may also be created by the final node that is unable\
    \ to process\n   the file because of non-recoverable syntax or semantic errors\
    \ in the\n   file, or because of the failure of any other processing performed\
    \ on\n   the file.\n   The NERP will be sent back to the originator of the file.\n\
    \   The parameters are equal to the ones of the EERP, but with additional\n  \
    \ information about the creator of the NERP and the abort reason.\n   Where the\
    \ NERP is created due to a failure to transmit, the abort\n   reason is taken\
    \ from the refusal reason that was sent by the node\n   refusing the file.  Because\
    \ of the NERP, it is possible for the\n   intermediate node to stop trying to\
    \ send the non-deliverable file and\n   to delete the file.\n   The NERP allows\
    \ the originator of the file to react to the\n   unsuccessful transmission or\
    \ processing, depending on the reason code\n   and the creator of the NERP.\n\
    \   If the originator of the Virtual File requested a signed EERP in the\n   SFID,\
    \ the NERP must be signed.  Signing allows the originator of the\n   file to prove\
    \ by whom the NERP was generated.  If the location\n   generating the NERP is\
    \ unable to sign the NERP, it may send back an\n   unsigned NERP.  It is an implementation\
    \ issue to allow the acceptance\n   of an unsigned EERP if a signed NERP is requested.\n"
- title: 4.3.8.  Ready To Receive Command (RTR)
  contents:
  - "4.3.8.  Ready To Receive Command (RTR)\n   In order to avoid congestion between\
    \ two adjacent nodes caused by a\n   continuous flow of EERPs and NERPs, a Ready\
    \ To Receive (RTR) command\n   is provided.  The RTR acts as an EERP/NERP acknowledgement\
    \ for flow\n   control but has no end-to-end significance.\n      Speaker  --\
    \ EERP ------------> Listener   End to End Response\n               <-------------\
    \ RTR --            Ready to Receive\n               -- EERP ------------>   \
    \         End to End Response\n               <------------- RTR --          \
    \  Ready to Receive\n               -- NERP ------------>            Negative\
    \ End Response\n               <------------- RTR --            Ready to Receive\n\
    \               -- SFID ------------>            Start File\n                \
    \         or\n               -- CD -------------->            Exchange the turn\n\
    \   After sending an EERP or NERP, the Speaker must wait for an RTR\n   before\
    \ sending any other commands.  The only acceptable commands to\n   follow are:\n\
    \        EERP\n        NERP\n        SFID or CD (if there are no more EERPs or\
    \ NERPs to be sent)\n"
- title: 4.4.  Data Transfer Phase
  contents:
  - "4.4.  Data Transfer Phase\n   Virtual File data flows from the Speaker to the\
    \ Listener during the\n   Data Transfer phase, which is entered after the Start\
    \ File phase.\n"
- title: 4.4.1.  Protocol Sequence
  contents:
  - "4.4.1.  Protocol Sequence\n   To avoid congestion at the protocol level, a flow\
    \ control mechanism\n   is provided via the Set Credit (CDT) command.\n   A Credit\
    \ limit is negotiated in the Start Session phase; this\n   represents the number\
    \ of Data Exchange Buffers that the Speaker may\n   send before it is obliged\
    \ to wait for a Credit command from the\n   Listener.\n   The available credit\
    \ is initially set to the negotiated value by the\n   Start File positive answer,\
    \ which acts as an implicit Credit command.\n   The Speaker decreases the available\
    \ credit count by one for each data\n   buffer sent to the Listener.\n   When\
    \ the available credit is exhausted, the Speaker must wait for a\n   Credit command\
    \ from the Listener; otherwise, a protocol error will\n   occur and the session\
    \ will be aborted.\n   The Listener should endeavour to send the Credit command\
    \ without\n   delay to prevent the Speaker blocking.\n   1. Speaker  -- SFID ------------>\
    \ Listener   Start File\n               <------------ SFPA --            Answer\
    \ YES\n   2. If the credit value is set to 2\n      Speaker  -- Data ------------>\
    \ Listener   Start File\n               -- Data ------------>\n              \
    \ <------------- CDT --            Set Credit\n               -- Data ------------>\n\
    \               -- EFID ------------>            End File\n"
- title: 4.5.  End File Phase
  contents:
  - '4.5.  End File Phase

    '
- title: 4.5.1.  Protocol Sequence
  contents:
  - "4.5.1.  Protocol Sequence\n   The Speaker notifies the Listener that it has finished\
    \ sending a\n   Virtual File by sending an End File (EFID) command.  The Listener\n\
    \   replies with a positive or negative End File command and has the\n   option\
    \ to request a Change Direction command from the Speaker.\n   1. Speaker  -- EFID\
    \ ------------> Listener   End File\n               <------------ EFPA --    \
    \        Answer YES\n   2. Speaker  -- EFID ------------> Listener   End File\n\
    \               <------------ EFPA --            Answer YES + CD\n           \
    \    -- CD -------------->            Change Direction\n      Listener <------------\
    \ EERP -- Speaker    End to End Response\n               -------------- RTR ->\
    \            Ready to Receive\n      Listener <------------ NERP -- Speaker  \
    \  Negative End Response\n               -------------- RTR ->            Ready\
    \ to Receive\n               Go to Start File Phase\n   3. Speaker  -- EFID ------------>\
    \ Listener   End File\n               <------------ EFNA --            Answer\
    \ NO\n"
- title: 4.6.  End Session Phase
  contents:
  - '4.6.  End Session Phase

    '
- title: 4.6.1.  Protocol Sequence
  contents:
  - "4.6.1.  Protocol Sequence\n   The Speaker terminates the session by sending an\
    \ End Session (ESID)\n   command.  The Speaker may only do this if the Listener\
    \ has just\n   relinquished its role as speaker.\n   1. Speaker  -- EFID ------------>\
    \ Listener   End File\n               <------------ EFPA --            Answer\
    \ YES\n               -- CD -------------->            Change Direction\n    \
    \  Listener <------------ ESID -- Speaker    End Session\n"
- title: 4.7.  Problem Handling
  contents:
  - "4.7.  Problem Handling\n   Error detection and handling should be done as close\
    \ as possible to\n   the problem.  This aids problem determination and correction.\
    \  Each\n   layer of the reference model is responsible for its own error\n  \
    \ handling.\n   ODETTE-FTP can detect protocol errors by virtue of its state machine\n\
    \   and uses activity timers to detect session hang conditions.  These\n   mechanisms\
    \ are separate from the End to End controls.\n"
- title: 4.7.1.  Protocol Errors
  contents:
  - "4.7.1.  Protocol Errors\n   If a protocol error occurs, the session will be terminated\
    \ and\n   application activity aborted.  Both locations enter the IDLE state.\n"
- title: 4.7.2.  Timers
  contents:
  - "4.7.2.  Timers\n   To protect against application and network hang conditions,\
    \ ODETTE-\n   FTP uses activity timers for all situations where a response is\n\
    \   required.  The timers and actions to be taken if they expire are\n   described\
    \ in Section 9, \"Protocol State Machine\".\n"
- title: 4.7.3.  Clearing Centres
  contents:
  - "4.7.3.  Clearing Centres\n   The use of clearing centres introduces the possibility\
    \ of errors\n   occurring as a result of data processing activities within the\n\
    \   centre.  Such errors are not directly related to ODETTE-FTP or the\n   communication\
    \ network and are therefore outside the scope of this\n   specification.\n"
- title: 5.  Commands and Formats
  contents:
  - "5.  Commands and Formats\n   ODETTE-FTP entities communicate via Exchange Buffers.\
    \  The Command\n   Exchange Buffers are described below.  Virtual File data is\
    \ carried\n   in Data Exchange Buffers, which are described in Section 7.\n"
- title: 5.1.  Conventions
  contents:
  - '5.1.  Conventions

    '
- title: 5.1.1.  Representation Unit
  contents:
  - "5.1.1.  Representation Unit\n   The basic unit of information is an octet, containing\
    \ 8 bits.\n"
- title: 5.1.2.  Values and Characters
  contents:
  - "5.1.2.  Values and Characters\n   The ISO 646 IRV 7-bit coded character set [ISO-646],\
    \ according to\n   Appendix B, is used to encode constants and strings within\
    \ Command\n   Exchange Buffers except where [UTF-8] is explicitly indicated against\n\
    \   a field.\n"
- title: 5.2.  Commands
  contents:
  - "5.2.  Commands\n   A Command Exchange Buffer contains a single command starting\
    \ at the\n   beginning of the buffer.  Commands and data are never mixed within\
    \ an\n   Exchange Buffer.  Commands cannot be compressed.  Variable-length\n \
    \  parameters may be omitted entirely if not required and the associated\n   length\
    \ indicator field set to zero.\n   Components:\n   1. Command identifier:\n  \
    \    The first octet of an Exchange Buffer is the Command Identifier\n      and\
    \ defines the format of the buffer.\n   2. Parameter(s):\n      Command parameters\
    \ are stored in fields within a Command Exchange\n      Buffer.  Where variable-length\
    \ fields are used, they are preceded\n      with a header field indicating the\
    \ length.  All values are\n      required except where explicitly indicated.\n"
- title: 5.3.  Command Formats
  contents:
  - "5.3.  Command Formats\n   The ODETTE-FTP commands are described below using the\
    \ following\n   definitions.\n   Position (Pos)\n      Field offset within the\
    \ Command Exchange Buffer, relative to a\n      zero origin.\n   Field\n     \
    \ The name of the field.\n   Description\n      A description of the field.\n\
    \   Format\n      F    - A field containing fixed values.  All allowable values\
    \ for\n             the field are enumerated in the command definition.\n    \
    \  V    - A field with variable values within a defined range.  For\n        \
    \     example, the SFIDLRECL field may contain any integer value\n           \
    \  between 00000 and 99999.\n      X(n) - An alphanumeric field of length n octets.\n\
    \        A String contains alphanumeric characters from the following\n      \
    \  set:\n         The numerals:               0 to 9\n         The upper case\
    \ letters:     A to Z\n         The following special set:  / - . & ( ) space.\n\
    \        Space is not allowed as an embedded character.\n      9(n) - A numeric\
    \ field of length n octets.\n      U(n) - A binary field of length n octets.\n\
    \             Numbers encoded as binary are always unsigned and in\n         \
    \    network byte order.\n      T(n) - An field of length n octets, encoded using\
    \ [UTF-8].\n      String and alphanumeric fields are always left justified and\
    \ right\n      padded with spaces where needed.\n      Numeric fields are always\
    \ right justified and left padded with\n      zeros where needed.\n      Reserved\
    \ fields should be padded with spaces.\n"
- title: 5.3.1.  SSRM - Start Session Ready Message
  contents:
  - "5.3.1.  SSRM - Start Session Ready Message\n   o-------------------------------------------------------------------o\n\
    \   |       SSRM        Start Session Ready Message                     |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---- Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SSRMCMD   | SSRM Command, 'I'                     | F X(1)  |\n   |  \
    \ 1 | SSRMMSG   | Ready Message, 'ODETTE FTP READY '    | F X(17) |\n   |  18\
    \ | SSRMCR    | Carriage Return                       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   SSRMCMD   Command Code                                      Character\n  \
    \    Value: 'I'  SSRM Command identifier.\n   SSRMMSG   Ready Message        \
    \                            String(17)\n      Value: 'ODETTE FTP READY '\n  \
    \ SSRMCR    Carriage Return                                   Character\n    \
    \  Value: Character with hex value '0D' or '8D'.\n"
- title: 5.3.2.  SSID - Start Session
  contents:
  - "5.3.2.  SSID - Start Session\n   o-------------------------------------------------------------------o\n\
    \   |       SSID        Start Session                                   |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---> Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SSIDCMD   | SSID Command 'X'                      | F X(1)  |\n   |  \
    \ 1 | SSIDLEV   | Protocol Release Level                | F 9(1)  |\n   |   2\
    \ | SSIDCODE  | Initiator's Identification Code       | V X(25) |\n   |  27 |\
    \ SSIDPSWD  | Initiator's Password                  | V X(8)  |\n   |  35 | SSIDSDEB\
    \  | Data Exchange Buffer Size             | V 9(5)  |\n   |  40 | SSIDSR    |\
    \ Send / Receive Capabilities (S/R/B)   | F X(1)  |\n   |  41 | SSIDCMPR  | Buffer\
    \ Compression Indicator (Y/N)    | F X(1)  |\n   |  42 | SSIDREST  | Restart Indicator\
    \ (Y/N)               | F X(1)  |\n   |  43 | SSIDSPEC  | Special Logic Indicator\
    \ (Y/N)         | F X(1)  |\n   |  44 | SSIDCRED  | Credit                   \
    \             | V 9(3)  |\n   |  47 | SSIDAUTH  | Secure Authentication (Y/N)\
    \           | F X(1)  |\n   |  48 | SSIDRSV1  | Reserved                     \
    \         | F X(4)  |\n   |  52 | SSIDUSER  | User Data                      \
    \       | V X(8)  |\n   |  60 | SSIDCR    | Carriage Return                  \
    \     | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \      SSIDCMD   Command Code\n      Character\n      Value: 'X'  SSID Command\
    \ identifier.\n   SSIDLEV   Protocol Release Level                           Numeric(1)\n\
    \             Used to specify the level of the ODETTE-FTP protocol\n      Value:\
    \ '1' for Revision 1.2\n             '2' for Revision 1.3\n             '4' for\
    \ Revision 1.4\n             '5' for Revision 2.0\n             Future release\
    \ levels will have higher numbers.  The\n             protocol release level is\
    \ negotiable, with the lowest level\n             being selected.\n          \
    \   Note: ODETTE File Transfer Protocol 1.3 (RFC 2204)\n                   specifies\
    \ '1' for the release level, despite adhering\n                   to revision\
    \ 1.3.\n   SSIDCODE  Initiator's Identification Code                  String(25)\n\
    \    Format:  See Identification Code (Section 5.4)\n             Uniquely identifies\
    \ the Initiator (sender) participating in\n             the ODETTE-FTP session.\n\
    \             It is an application implementation issue to link the\n        \
    \     expected [X.509] certificate to the SSIDCODE provided.\n   SSIDPSWD  Initiator's\
    \ Password                              String(8)\n             Key to authenticate\
    \ the sender.  Assigned by bilateral\n             agreement.\n   SSIDSDEB  Data\
    \ Exchange Buffer Size                        Numeric(5)\n    Minimum: 128\n \
    \   Maximum: 99999\n             The length, in octets, of the largest Data Exchange\
    \ Buffer\n             that can be accepted by the location.  The length includes\n\
    \             the command octet but does not include the Stream\n            \
    \ Transmission Header.\n             After negotiation, the smallest size will\
    \ be selected.\n   SSIDSR    Send / Receive Capabilities                     \
    \  Character\n      Value: 'S'  Location can only send files.\n             'R'\
    \  Location can only receive files.\n             'B'  Location can both send\
    \ and receive files.\n             Sending and receiving will be serialised during\
    \ the\n             session, so parallel transmissions will not take place in\n\
    \             the same session.\n             An error occurs if adjacent locations\
    \ both specify the send\n             or receive capability.\n   SSIDCMPR  Buffer\
    \ Compression Indicator                      Character\n      Value: 'Y'  The\
    \ location can handle OFTP data buffer compression\n             'N'  The location\
    \ cannot handle OFTP buffer compression\n             Compression is only used\
    \ if supported by both locations.\n             The compression mechanism referred\
    \ to here applies to each\n             individual OFTP data buffer.  This is\
    \ different from the\n             file compression mechanism in OFTP, which involves\
    \ the\n             compression of whole files.\n   SSIDREST  Restart Indicator\
    \                                 Character\n      Value: 'Y'  The location can\
    \ handle the restart of a partially\n                  transmitted file.\n   \
    \          'N'  The location cannot restart a file.\n   SSIDSPEC  Special Logic\
    \ Indicator                           Character\n      Value: 'Y'  Location can\
    \ handle Special Logic\n             'N'  Location cannot handle Special Logic\n\
    \             Special Logic is only used if supported by both locations.\n   \
    \          The Special Logic extensions are only useful to access an\n       \
    \      X.25 network via an asynchronous entry and are not\n             supported\
    \ for TCP/IP connections.\n   SSIDCRED  Credit                               \
    \            Numeric(3)\n    Maximum: 999\n             The number of consecutive\
    \ Data Exchange Buffers sent by the\n             Speaker before it must wait\
    \ for a Credit (CDT) command from\n             the Listener.\n             The\
    \ credit value is only applied to Data flow in the Data\n             Transfer\
    \ phase.\n             The Speaker's available credit is initialised to SSIDCRED\n\
    \             when it receives a Start File Positive Answer (SFPA)\n         \
    \    command from the Listener.  It is zeroed by the End File\n             (EFID)\
    \ command.\n             After negotiation, the smallest size must be selected\
    \ in\n             the answer of the Responder, otherwise a protocol error\n \
    \            will abort the session.\n             Negotiation of the \"credit-window-size\"\
    \ parameter.\n             Window Size m  -- SSID ------------>\n            \
    \                <------------ SSID --  Window Size n\n                      \
    \                            (n less than or\n                               \
    \                    equal to m)\n             Note: negotiated value will be\
    \ \"n\".\n   SSIDAUTH  Secure Authentication                             Character\n\
    \      Value: 'Y'  The location requires secure authentication.  'N'  The\n  \
    \           location does not require secure authentication.\n             Secure\
    \ authentication is only used if agreed by both\n             locations.\n   \
    \          If the answer of the Responder does not match with the\n          \
    \   authentication requirements of the Initiator, then the\n             Initiator\
    \ must abort the session.\n             No negotiation of authentication is allowed.\n\
    \             authentication p  -- SSID ------------>\n                      \
    \         <------------ SSID --  authentication q\n             p == q -> continue.\n\
    \             p != q -> abort.\n   SSIDRSV1  Reserved                        \
    \                  String(4)\n             This field is reserved for future use.\n\
    \   SSIDUSER  User Data                                         String(8)\n  \
    \           May be used by ODETTE-FTP in any way.  If unused, it should\n    \
    \         be initialised to spaces.  It is expected that a bilateral\n       \
    \      agreement exists as to the meaning of the data.\n   SSIDCR    Carriage\
    \ Return                                   Character\n      Value: Character with\
    \ hex value '0D' or '8D'.\n"
- title: 5.3.3.  SFID - Start File
  contents:
  - "5.3.3.  SFID - Start File\n   o-------------------------------------------------------------------o\n\
    \   |       SFID        Start File                                      |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SFIDCMD   | SFID Command, 'H'                     | F X(1)  |\n   |  \
    \ 1 | SFIDDSN   | Virtual File Dataset Name             | V X(26) |\n   |  27\
    \ | SFIDRSV1  | Reserved                              | F X(3)  |\n   |  30 |\
    \ SFIDDATE  | Virtual File Date stamp, (CCYYMMDD)   | V 9(8)  |\n   |  38 | SFIDTIME\
    \  | Virtual File Time stamp, (HHMMSScccc) | V 9(10) |\n   |  48 | SFIDUSER  |\
    \ User Data                             | V X(8)  |\n   |  56 | SFIDDEST  | Destination\
    \                           | V X(25) |\n   |  81 | SFIDORIG  | Originator   \
    \                         | V X(25) |\n   | 106 | SFIDFMT   | File Format (F/V/U/T)\
    \                 | F X(1)  |\n   | 107 | SFIDLRECL | Maximum Record Size    \
    \               | V 9(5)  |\n   | 112 | SFIDFSIZ  | File Size, 1K blocks     \
    \             | V 9(13) |\n   | 125 | SFIDOSIZ  | Original File Size, 1K blocks\
    \         | V 9(13) |\n   | 138 | SFIDREST  | Restart Position               \
    \       | V 9(17) |\n   | 155 | SFIDSEC   | Security Level                   \
    \     | F 9(2)  |\n   | 157 | SFIDCIPH  | Cipher suite selection             \
    \   | F 9(2)  |\n   | 159 | SFIDCOMP  | File compression algorithm           \
    \ | F 9(1)  |\n   | 160 | SFIDENV   | File enveloping format                |\
    \ F 9(1)  |\n   | 161 | SFIDSIGN  | Signed EERP request                   | F\
    \ X(1)  |\n   | 162 | SFIDDESCL | Virtual File Description length       | V 9(3)\
    \  |\n   | 165 | SFIDDESC  | Virtual File Description              | V T(n)  |\n\
    \   o-------------------------------------------------------------------o\n  \
    \ SFIDCMD   Command Code                                      Character\n    \
    \  Value: 'H'  SFID Command identifier.\n   SFIDDSN   Virtual File Dataset Name\
    \                        String(26)\n             Dataset name of the Virtual\
    \ File being transferred,\n             assigned by bilateral agreement.\n   \
    \          No general structure is defined for this attribute.\n             See\
    \ Virtual Files - Identification (Section 1.5.2)\n   SFIDRSV1  Reserved      \
    \                                    String(3)\n             This field is reserved\
    \ for future use.\n   SFIDDATE  Virtual File Date stamp                      \
    \    Numeric(8)\n     Format: 'CCYYMMDD'  8 decimal digits representing the century,\n\
    \             year, month, and day.\n             Date stamp assigned by the Virtual\
    \ File's Originator\n             indicating when the file was made available\
    \ for\n             transmission.\n             See Virtual Files - Identification\
    \ (Section 1.5.2)\n   SFIDTIME  Virtual File Time stamp                      \
    \   Numeric(10)\n     Format: 'HHMMSScccc'  10 decimal digits representing hours,\n\
    \             minutes, seconds, and a counter (0001-9999), which gives\n     \
    \        higher resolution.\n             Time stamp assigned by the Virtual File's\
    \ Originator\n             indicating when the file was made available for\n \
    \            transmission.\n             See Virtual Files - Identification (Section\
    \ 1.5.2)\n   SFIDUSER  User Data                                         String(8)\n\
    \             May be used by ODETTE-FTP in any way.  If unused, it should\n  \
    \           be initialised to spaces.  It is expected that a bilateral\n     \
    \        agreement exists as to the meaning of the data.\n   SFIDDEST  Destination\
    \                                      String(25)\n     Format: See Identification\
    \ Code (Section 5.4)\n             The Final Recipient of the Virtual File.\n\
    \             This is the location that will look into the Virtual File\n    \
    \         content and perform mapping functions.  It is also the\n           \
    \  location that creates the End to End Response (EERP)\n             command\
    \ for the received file.\n   SFIDORIG  Originator                            \
    \           String(25)\n     Format: See Identification Code (Section 5.4)\n \
    \            Originator of the Virtual File.\n             It is the location\
    \ that created (mapped) the data for\n             transmission.\n   SFIDFMT \
    \  File Format                                       Character\n      Value: 'F'\
    \  Fixed format binary file\n             'V'  Variable format binary file\n \
    \            'U'  Unstructured binary file\n             'T'  Text\n         \
    \    Virtual File format.  Used to calculate the restart\n             position\
    \ (Section 1.5.4).\n             Once a file has been signed, compressed, and/or\
    \ encrypted,\n             in file format terms it becomes unstructured, format\
    \ U.\n             The record boundaries are no longer discernable until the\n\
    \             file is decrypted, decompressed, and/or verified.  SFID\n      \
    \       File Format Field in this scenario indicates the format of\n         \
    \    the original file, and the transmitted file must be treated\n           \
    \  as U format.\n   SFIDLRECL Maximum Record Size                            \
    \  Numeric(5)\n    Maximum: 99999\n             Length in octets of the longest\
    \ logical record that may be\n             transferred to a location.  Only user\
    \ data is included.\n             If SFIDFMT is 'T' or 'U', then this attribute\
    \ must be set\n             to '00000'.\n             If SFIDFMT is 'V' and the\
    \ file is compressed, encrypted, or\n             signed, then the maximum value\
    \ of SFIDRECL is '65536'.\n   SFIDFSIZ  Transmitted File Size                \
    \           Numeric(13)\n    Maximum: 9999999999999\n             Space in 1K\
    \ (1024 octet) blocks required at the Originator\n             location to store\
    \ the actual Virtual File that is to be\n             transmitted.\n         \
    \    For example, if a file is compressed before sending, then\n             this\
    \ is the space required to store the compressed file.\n             This parameter\
    \ is intended to provide only a good estimate\n             of the Virtual File\
    \ size.\n             Using 13 digits allows for a maximum file size of\n    \
    \         approximately 9.3 PB (petabytes) to be transmitted.\n   SFIDOSIZ  Original\
    \ File Size                              Numeric(13)\n    Maximum: 9999999999999\n\
    \             Space in 1K (1024 octet) blocks required at the Originator\n   \
    \          location to store the original before it was signed,\n            \
    \ compressed, and/or encrypted.\n             If no security or compression services\
    \ have been used,\n             SFIDOSIZ should contain the same value as SFIDFSIZ.\n\
    \             If the original file size is not known, the value zero\n       \
    \      should be used.\n             This parameter is intended to provide only\
    \ a good estimate\n             of the original file size.\n             The sequence\
    \ of events in file exchange are:\n              (a) raw data file ready to be\
    \ sent\n                   SFIDOSIZ = Original File Size\n              (b) signing/compression/encryption\n\
    \              (c) transmission\n                   SFIDFSIZ = Transmitted File\
    \ Size\n              (d) decryption/decompression/verification\n            \
    \  (e) received raw data file for in-house applications\n                   SFIDOSIZ\
    \ = Original File Size\n             The Transmitted File Size at (c) indicates\
    \ to the receiver\n             how much storage space is needed to receive the\
    \ file.\n             The Original File Size at (e) indicates to the in-house\n\
    \             application how much storage space is needed to process the\n  \
    \           file.\n   SFIDREST  Restart Position                             \
    \   Numeric(17)\n    Maximum: 99999999999999999\n             Virtual File restart\
    \ position.\n             The count represents the:\n                - Record\
    \ Number if SSIDFMT is 'F' or 'V'.\n                - File offset in 1K (1024\
    \ octet) blocks if SFIDFMT is\n                  'U' or 'T'.\n             The\
    \ count will express the transmitted user data (i.e.,\n             before ODETTE-FTP\
    \ buffer compression, header not included).\n             After negotiation between\
    \ adjacent locations,\n             retransmission will start at the lowest value.\n\
    \             Once a file has been signed, compressed, and/or encrypted,\n   \
    \          in file format terms, it has become unstructured, like\n          \
    \   format U.  The file should be treated as format U for the\n             purposes\
    \ of restart, regardless of the actual value in\n             SFIDFMT.\n   SFIDSEC\
    \   Security Level                                   Numeric(2)\n      Value:\
    \ '00'  No security services\n             '01'  Encrypted\n             '02'\
    \  Signed\n             '03'  Encrypted and signed\n             Indicates whether\
    \ the file has been signed and/or encrypted\n             before transmission.\
    \ (See Section 6.2.)\n   SFIDCIPH  Cipher suite selection                    \
    \       Numeric(2)\n      Value: '00'  No security services\n             '01'\
    \  See Section 10.2\n             Indicates the cipher suite used to sign and/or\
    \ encrypt the\n             file and also to indicate the cipher suite that should\
    \ be\n             used when a signed EERP or NERP is requested.\n   SFIDCOMP\
    \  File compression algorithm                       Numeric(1)\n      Value: '0'\
    \  No compression\n             '1'  Compressed with [ZLIB] algorithm\n      \
    \       Indicates the algorithm used to compress the file.\n             (See\
    \ Section 6.4.)\n   SFIDENV   File enveloping format                         \
    \  Numeric(1)\n      Value: '0'  No envelope\n             '1'  File is enveloped\
    \ using [CMS]\n             Indicates the enveloping format used in the file.\n\
    \             If the file is encrypted/signed/compressed or is an\n          \
    \   enveloped file for the exchange and revocation of\n             certificates,\
    \ this field must be set accordingly.\n   SFIDSIGN  Signed EERP request      \
    \                         Character\n      Value: 'Y'  The EERP returned in acknowledgement\
    \ of the file\n                  must be signed\n             'N'  The EERP must\
    \ not be signed\n             Requests whether the EERP returned for the file\
    \ must be\n             signed.\n   SFIDDESCL Virtual File Description length\
    \                  Numeric(3)\n             Length in octets of the field SFIDDESC.\n\
    \             A value of 0 indicates that no description is present.\n   SFIDDESC\
    \  Virtual File Description                         [UTF-8](n)\n             May\
    \ be used by ODETTE-FTP in any way.  If not used,\n             SFIDDESCL should\
    \ be set to zero.\n             No general structure is defined for this attribute,\
    \ but it\n             is expected that a bilateral agreement exists as to the\n\
    \             meaning of the data.\n             It is encoded using [UTF-8] to\
    \ support a range of national\n             languages.\n             Maximum length\
    \ of the encoded value is 999 octets.\n"
- title: 5.3.4.  SFPA - Start File Positive Answer
  contents:
  - "5.3.4.  SFPA - Start File Positive Answer\n   o-------------------------------------------------------------------o\n\
    \   |       SFPA        Start File Positive Answer                      |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SFPACMD   | SFPA Command, '2'                     | F X(1)  |\n   |  \
    \ 1 | SFPAACNT  | Answer Count                          | V 9(17) |\n   o-------------------------------------------------------------------o\n\
    \   SFPACMD   Command Code                                      Character\n  \
    \    Value: '2'  SFPA Command identifier.\n   SFPAACNT  Answer Count         \
    \                           Numeric(17)\n             The Listener must enter\
    \ a count lower than or equal to the\n             restart count specified by\
    \ the Speaker in the Start File\n             (SFID) command.  The count expresses\
    \ the received user\n             data.  If restart facilities are not available,\
    \ a count of\n             zero must be specified.\n"
- title: 5.3.5.  SFNA - Start File Negative Answer
  contents:
  - "5.3.5.  SFNA - Start File Negative Answer\n   o-------------------------------------------------------------------o\n\
    \   |       SFNA        Start File Negative Answer                      |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SFNACMD   | SFNA Command, '3'                     | F X(1)  |\n   |  \
    \ 1 | SFNAREAS  | Answer Reason                         | F 9(2)  |\n   |   3\
    \ | SFNARRTR  | Retry Indicator, (Y/N)                | F X(1)  |\n   |   4 |\
    \ SFNAREASL | Answer Reason Text Length             | V 9(3)  |\n   |   7 | SFNAREAST\
    \ | Answer Reason Text                    | V T(n)  |\n   o-------------------------------------------------------------------o\n\
    \   SFNACMD   Command Code                                      Character\n  \
    \    Value: '3'  SFNA Command identifier.\n   SFNAREAS  Answer Reason        \
    \                            Numeric(2)\n      Value: '01'  Invalid filename.\n\
    \             '02'  Invalid destination.\n             '03'  Invalid origin.\n\
    \             '04'  Storage record format not supported.\n             '05'  Maximum\
    \ record length not supported.\n             '06'  File size is too big.\n   \
    \          '10'  Invalid record count.\n             '11'  Invalid byte count.\n\
    \             '12'  Access method failure.\n             '13'  Duplicate file.\n\
    \             '14'  File direction refused.\n             '15'  Cipher suite not\
    \ supported.\n             '16'  Encrypted file not allowed.\n             '17'\
    \  Unencrypted file not allowed.\n             '18'  Compression not allowed.\n\
    \             '19'  Signed file not allowed.\n             '20'  Unsigned file\
    \ not allowed.\n             '99'  Unspecified reason.\n             Reason why\
    \ transmission cannot proceed.\n   SFNARRTR  Retry Indicator                 \
    \                  Character\n      Value: 'N'  Transmission should not be retried.\n\
    \             'Y'  The transmission may be retried later.\n             This parameter\
    \ is used to advise the Speaker if it should\n             retry at a later time\
    \ due to a temporary condition at the\n             Listener site, such as a lack\
    \ of storage space.  It should\n             be used in conjunction with the Answer\
    \ Reason code\n             (SFNAREAS).\n             An invalid file name error\
    \ code may be the consequence of a\n             problem in the mapping of the\
    \ Virtual File on to a real\n             file.  Such problems cannot always be\
    \ resolved immediately.\n             It is therefore recommended that when an\
    \ SFNA with Retry =\n             Y is received the User Monitor attempts to retransmit\
    \ the\n             relevant file in a subsequent session.\n   SFNAREASL Answer\
    \ Reason Text Length                        Numeric(3)\n             Length in\
    \ octets of the field SFNAREAST.\n             0 indicates that no SFNAREAST field\
    \ follows.\n   SFNAREAST Answer Reason Text                               [UTF-8](n)\n\
    \             Reason why transmission cannot proceed in plain text.\n        \
    \     It is encoded using [UTF-8].\n             Maximum length of the encoded\
    \ reason is 999 octets.\n             No general structure is defined for this\
    \ attribute.\n"
- title: 5.3.6.  DATA - Data Exchange Buffer
  contents:
  - "5.3.6.  DATA - Data Exchange Buffer\n   o-------------------------------------------------------------------o\n\
    \   |       DATA        Data Exchange Buffer                            |\n  \
    \ |                                                                   |\n   |\
    \       Data Transfer Phase        Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | DATACMD   | DATA Command, 'D'                     | F X(1)  |\n   |  \
    \ 1 | DATABUF   | Data Exchange Buffer payload          | V U(n)  |\n   o-------------------------------------------------------------------o\n\
    \   DATACMD   Command Code                                      Character\n  \
    \    Value: 'D'  DATA Command identifier.\n   DATABUF   Data Exchange Buffer payload\
    \                      Binary(n)\n             Variable-length buffer containing\
    \ the data payload.  The\n             Data Exchange Buffer is described in Section\
    \ 7.\n"
- title: 5.3.7.  CDT - Set Credit
  contents:
  - "5.3.7.  CDT - Set Credit\n   o-------------------------------------------------------------------o\n\
    \   |       CDT         Set Credit                                      |\n  \
    \ |                                                                   |\n   |\
    \       Data Transfer Phase        Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | CDTCMD    | CDT Command, 'C'                      | F X(1)  |\n   |  \
    \ 1 | CDTRSV1   | Reserved                              | F X(2)  |\n   o-------------------------------------------------------------------o\n\
    \   CDTCMD    Command Code                                      Character\n  \
    \    Value: 'C'  CDT Command identifier.\n   CDTRSV1   Reserved              \
    \                            String(2)\n             This field is reserved for\
    \ future use.\n"
- title: 5.3.8.  EFID - End File
  contents:
  - "5.3.8.  EFID - End File\n   o-------------------------------------------------------------------o\n\
    \   |       EFID        End File                                        |\n  \
    \ |                                                                   |\n   |\
    \       End File Phase             Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EFIDCMD   | EFID Command, 'T'                     | F X(1)  |\n   |  \
    \ 1 | EFIDRCNT  | Record Count                          | V 9(17) |\n   |  18\
    \ | EFIDUCNT  | Unit Count                            | V 9(17) |\n   o-------------------------------------------------------------------o\n\
    \   EFIDCMD   Command Code                                      Character\n  \
    \    Value: 'T'  EFID Command identifier.\n   EFIDRCNT  Record Count         \
    \                           Numeric(17)\n    Maximum: 99999999999999999\n    \
    \         For SSIDFMT 'F' or 'V', the exact record count.\n             For SSIDFMT\
    \ 'U' or 'T', zeros.\n             The count will express the real size of the\
    \ file (before\n             buffer compression, header not included).  The total\
    \ count\n             is always used, even during restart processing.\n   EFIDUCNT\
    \  Unit Count                                      Numeric(17)\n    Maximum: 99999999999999999\n\
    \             Exact number of units (octets) transmitted.\n             The count\
    \ will express the real size of the file.  The\n             total count is always\
    \ used, even during restart processing.\n"
- title: 5.3.9.  EFPA - End File Positive Answer
  contents:
  - "5.3.9.  EFPA - End File Positive Answer\n   o-------------------------------------------------------------------o\n\
    \   |       EFPA        End File Positive Answer                        |\n  \
    \ |                                                                   |\n   |\
    \       End File Phase             Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EFPACMD   | EFPA Command, '4'                     | F X(1)  |\n   |  \
    \ 1 | EFPACD    | Change Direction Indicator, (Y/N)     | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   EFPACMD   Command Code                                      Character\n  \
    \    Value: '4'  EFPA Command identifier.\n   EFPACD    Change Direction Indicator\
    \                        Character\n      Value: 'N'  Change direction not requested.\n\
    \             'Y'  Change direction requested.\n             This parameter allows\
    \ the Listener to request a Change\n             Direction (CD) command from the\
    \ Speaker.\n"
- title: 5.3.10.  EFNA - End File Negative Answer
  contents:
  - "5.3.10.  EFNA - End File Negative Answer\n   o-------------------------------------------------------------------o\n\
    \   |       EFNA        End File Negative Answer                        |\n  \
    \ |                                                                   |\n   |\
    \       End File Phase             Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EFNACMD   | EFNA Command, '5'                     | F X(1)  |\n   |  \
    \ 1 | EFNAREAS  | Answer Reason                         | F 9(2)  |\n   |   3\
    \ | EFNAREASL | Answer Reason Text Length             | V 9(3)  |\n   |   6 |\
    \ EFNAREAST | Answer Reason Text                    | V T(n)  |\n   o-------------------------------------------------------------------o\n\
    \   EFNACMD   Command Code                                      Character\n  \
    \    Value: '5'  EFNA Command identifier.\n   EFNAREAS  Answer Reason        \
    \                            Numeric(2)\n      Value: '01'  Invalid filename.\n\
    \             '02'  Invalid destination.\n             '03'  Invalid origin.\n\
    \             '04'  Storage record format not supported.\n             '05'  Maximum\
    \ record length not supported.\n             '06'  File size is too big.\n   \
    \          '10'  Invalid record count.\n             '11'  Invalid byte count.\n\
    \             '12'  Access method failure.\n             '13'  Duplicate file.\n\
    \             '14'  File direction refused.\n             '15'  Cipher suite not\
    \ supported.\n             '16'  Encrypted file not allowed.\n             '17'\
    \  Unencrypted file not allowed.\n             '18'  Compression not allowed.\n\
    \             '19'  Signed file not allowed.\n             '20'  Unsigned file\
    \ not allowed.\n             '21'  Invalid file signature.\n             '22'\
    \  File decryption failure.\n             '23'  File decompression failure.\n\
    \             '99'  Unspecified reason.\n             Reason why transmission\
    \ failed.\n   EFNAREASL Answer Reason Text Length                        Numeric(3)\n\
    \             Length in octets of the field EFNAREAST.\n             0 indicates\
    \ that no EFNAREAST field follows.\n   EFNAREAST Answer Reason Text          \
    \                     [UTF-8](n)\n             Reason why transmission failed\
    \ in plain text.\n             It is encoded using [UTF-8].\n             Maximum\
    \ length of the encoded reason is 999 octets.\n             No general structure\
    \ is defined for this attribute.\n"
- title: 5.3.11.  ESID - End Session
  contents:
  - "5.3.11.  ESID - End Session\n   o-------------------------------------------------------------------o\n\
    \   |       ESID        End Session                                     |\n  \
    \ |                                                                   |\n   |\
    \       End Session Phase          Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | ESIDCMD   | ESID Command, 'F'                     | F X(1)  |\n   |  \
    \ 1 | ESIDREAS  | Reason Code                           | F 9(2)  |\n   |   3\
    \ | ESIDREASL | Reason Text Length                    | V 9(3)  |\n   |   6 |\
    \ ESIDREAST | Reason Text                           | V T(n)  |\n   |     | ESIDCR\
    \    | Carriage Return                       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   ESIDCMD   Command Code                                      Character\n  \
    \    Value: 'F'  ESID Command identifier.\n   ESIDREAS  Reason Code          \
    \                            Numeric(2)\n      Value: '00'  Normal session termination\n\
    \             '01'  Command not recognised\n                   An Exchange Buffer\
    \ contains an invalid command code\n                   (1st octet of the buffer).\n\
    \             '02'  Protocol violation\n                   An Exchange Buffer\
    \ contains an invalid command for\n                   the current state of the\
    \ receiver.\n             '03'  User code not known\n                   A Start\
    \ Session (SSID) command contains an unknown or\n                   invalid Identification\
    \ Code.\n             '04'  Invalid password\n                   A Start Session\
    \ (SSID) command contained an invalid\n                   password.\n        \
    \     '05'  Local site emergency close down\n                   The local site\
    \ has entered an emergency close down\n                   mode.  Communications\
    \ are being forcibly terminated.\n             '06'  Command contained invalid\
    \ data\n                   A field within a Command Exchange Buffer contains\n\
    \                   invalid data.\n             '07'  Exchange Buffer size error\n\
    \                   The length of the Exchange Buffer as determined by\n     \
    \              the Stream Transmission Header differs from the\n             \
    \      length implied by the Command Code.\n             '08'  Resources not available\n\
    \                   The request for connection has been denied due to a\n    \
    \               resource shortage.  The connection attempt should be\n       \
    \            retried later.\n             '09'  Time out\n             '10'  Mode\
    \ or capabilities incompatible\n             '11'  Invalid challenge response\n\
    \             '12'  Secure authentication requirements incompatible\n        \
    \     '99'  Unspecified Abort code\n                   An error was detected for\
    \ which no specific code is\n                   defined.\n   ESIDREASL Reason\
    \ Text Length                               Numeric(3)\n             Length in\
    \ octets of the field ESIDREAST.\n             0 indicates that no ESIDREAST field\
    \ is present.\n   ESIDREAST Reason Text                                      [UTF-8](n)\n\
    \             Reason why session ended in plain text.\n             It is encoded\
    \ using [UTF-8].\n             Maximum length of the encoded reason is 999 octets.\n\
    \             No general structure is defined for this attribute.\n   ESIDCR \
    \   Carriage Return                                   Character\n      Value:\
    \ Character with hex value '0D' or '8D'.\n"
- title: 5.3.12.  CD - Change Direction
  contents:
  - "5.3.12.  CD - Change Direction\n   o-------------------------------------------------------------------o\n\
    \   |       CD          Change Direction                                |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |  \
    \     End File Phase             Speaker ----> Listener           |\n   |    \
    \   End Session Phase        Initiator <---> Responder          |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | CDCMD     | CD Command, 'R'                       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   CDCMD     Command Code                                      Character\n  \
    \    Value: 'R'  CD Command identifier.\n"
- title: 5.3.13.  EERP - End to End Response
  contents:
  - "5.3.13.  EERP - End to End Response\n   o-------------------------------------------------------------------o\n\
    \   |       EERP        End to End Response                             |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |  \
    \     End File Phase             Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EERPCMD   | EERP Command, 'E'                     | F X(1)  |\n   |  \
    \ 1 | EERPDSN   | Virtual File Dataset Name             | V X(26) |\n   |  27\
    \ | EERPRSV1  | Reserved                              | F X(3)  |\n   |  30 |\
    \ EERPDATE  | Virtual File Date stamp, (CCYYMMDD)   | V 9(8)  |\n   |  38 | EERPTIME\
    \  | Virtual File Time stamp, (HHMMSScccc) | V 9(10) |\n   |  48 | EERPUSER  |\
    \ User Data                             | V X(8)  |\n   |  56 | EERPDEST  | Destination\
    \                           | V X(25) |\n   |  81 | EERPORIG  | Originator   \
    \                         | V X(25) |\n   | 106 | EERPHSHL  | Virtual File hash\
    \ length              | V U(2)  |\n   | 108 | EERPHSH   | Virtual File hash  \
    \                   | V U(n)  |\n   |     | EERPSIGL  | EERP signature length\
    \                 | V U(2)  |\n   |     | EERPSIG   | EERP signature         \
    \               | V U(n)  |\n   o-------------------------------------------------------------------o\n\
    \   EERPCMD   Command Code                                      Character\n  \
    \    Value: 'E'  EERP Command identifier.\n   EERPDSN   Virtual File Dataset Name\
    \                        String(26)\n             Dataset name of the Virtual\
    \ File being transferred,\n             assigned by bilateral agreement.\n   \
    \          No general structure is defined for this attribute.\n             See\
    \ Virtual Files - Identification (Section 1.5.2)\n   EERPRSV1  Reserved      \
    \                                    String(3)\n             This field is reserved\
    \ for future use.\n   EERPDATE  Virtual File Date stamp                      \
    \    Numeric(8)\n     Format: 'CCYYMMDD'  8 decimal digits representing the century,\n\
    \             year, month, and day, respectively.\n             Date stamp assigned\
    \ by the Virtual File's Originator\n             indicating when the file was\
    \ made available for\n             transmission.\n             See Virtual Files\
    \ - Identification (Section 1.5.2)\n   EERPTIME  Virtual File Time stamp     \
    \                    Numeric(10)\n     Format: 'HHMMSScccc'  10 decimal digits\
    \ representing hours,\n             minutes, seconds, and a counter (0001-9999),\
    \ which gives\n             higher resolution.\n             Time stamp assigned\
    \ by the Virtual File's Originator\n             indicating when the file was\
    \ made available for\n             transmission.\n             See Virtual Files\
    \ - Identification (Section 1.5.2)\n   EERPUSER  User Data                   \
    \                      String(8)\n             May be used by ODETTE-FTP in any\
    \ way.  If unused, it should\n             be initialised to spaces.  It is expected\
    \ that a bilateral\n             agreement exists as to the meaning of the data.\n\
    \   EERPDEST  Destination                                      String(25)\n  \
    \   Format: See Identification Code (Section 5.4)\n             Originator of\
    \ the Virtual File.\n             This is the location that created the data for\n\
    \             transmission.\n   EERPORIG  Originator                         \
    \              String(25)\n     Format: See Identification Code (Section 5.4)\n\
    \             Final Recipient of the Virtual File.\n             This is the location\
    \ that will look into the Virtual File\n             content and process it accordingly.\
    \  It is also the\n             location that creates the EERP for the received\
    \ file.\n   EERPHSHL  Virtual File hash length                          Binary(2)\n\
    \             Length in octets of the field EERPHSH.\n             A binary value\
    \ of 0 indicates that no hash is present.\n             This is always the case\
    \ if the EERP is not signed.\n   EERPHSH   Virtual File hash                 \
    \                Binary(n)\n             Hash of the transmitted Virtual File,\
    \ i.e., not the hash of\n             the original file.\n             The algorithm\
    \ used is determined by the bilaterally agreed\n             cipher suite specified\
    \ in the SFIDCIPH.\n             It is an application implementation issue to\
    \ validate the\n             EERPHSH to ensure that the EERP is acknowledging\
    \ the exact\n             same file as was originally transmitted.\n   EERPSIGL\
    \  EERP signature length                             Binary(2)\n             0\
    \ indicates that this EERP has not been signed.\n             Any other value\
    \ indicates the length of EERPSIG in octets\n             and indicates that this\
    \ EERP has been signed.\n   EERPSIG   EERP signature                         \
    \           Binary(n)\n             Contains the [CMS] enveloped signature of\
    \ the EERP.\n             Signature = Sign{EERPDSN\n                         \
    \     EERPDATE\n                              EERPTIME\n                     \
    \         EERPDEST\n                              EERPORIG\n                 \
    \             EERPHSH}\n             Each field is taken in its entirety, including\
    \ any padding.\n             The envelope must contain the original data, not\
    \ just the\n             signature.\n             The [CMS] content type used\
    \ is SignedData.\n             The encapsulated content type used is id-data.\n\
    \             It is an application issue to validate the signature with\n    \
    \         the contents of the EERP.\n"
- title: 5.3.14.  NERP - Negative End Response
  contents:
  - "5.3.14.  NERP - Negative End Response\n   o-------------------------------------------------------------------o\n\
    \   |       NERP        Negative End Response                           |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |  \
    \     End File Phase             Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | NERPCMD   | NERP Command, 'N'                     | F X(1)  |\n   |  \
    \ 1 | NERPDSN   | Virtual File Dataset Name             | V X(26) |\n   |  27\
    \ | NERPRSV1  | Reserved                              | F X(6)  |\n   |  33 |\
    \ NERPDATE  | Virtual File Date stamp, (CCYYMMDD)   | V 9(8)  |\n   |  41 | NERPTIME\
    \  | Virtual File Time stamp, (HHMMSScccc) | V 9(10) |\n   |  51 | NERPDEST  |\
    \ Destination                           | V X(25) |\n   |  76 | NERPORIG  | Originator\
    \                            | V X(25) |\n   | 101 | NERPCREA  | Creator of NERP\
    \                       | V X(25) |\n   | 126 | NERPREAS  | Reason code      \
    \                     | F 9(2)  |\n   | 128 | NERPREASL | Reason text length \
    \                   | V 9(3)  |\n   | 131 | NERPREAST | Reason text          \
    \                 | V T(n)  |\n   |     | NERPHSHL  | Virtual File hash length\
    \              | V U(2)  |\n   |     | NERPHSH   | Virtual File hash         \
    \            | V U(n)  |\n   |     | NERPSIGL  | NERP signature length       \
    \          | V U(2)  |\n   |     | NERPSIG   | NERP signature                \
    \        | V U(n)  |\n   o-------------------------------------------------------------------o\n\
    \   NERPCMD   Command Code                                      Character\n  \
    \    Value: 'N'  NERP Command identifier.\n   NERPDSN   Virtual File Dataset Name\
    \                        String(26)\n             Dataset name of the Virtual\
    \ File being transferred,\n             assigned by bilateral agreement.\n   \
    \          No general structure is defined for this attribute.\n             See\
    \ Virtual Files - Identification (Section 1.5.2)\n   NERPRSV1  Reserved      \
    \                                    String(6)\n             This field is reserved\
    \ for future use.\n   NERPDATE  Virtual File Date stamp                      \
    \    Numeric(8)\n     Format: 'CCYYMMDD'  8 decimal digits representing the century,\n\
    \             year, month, and day, respectively.\n             Date stamp assigned\
    \ by the Virtual File's Originator\n             indicating when the file was\
    \ made available for\n             transmission.\n             See Virtual Files\
    \ - Identification (Section 1.5.2)\n   NERPTIME  Virtual File Time stamp     \
    \                    Numeric(10)\n     Format: 'HHMMSScccc'  10 decimal digits\
    \ representing hours,\n             minutes, seconds, and a counter (0001-9999),\
    \ which gives\n             higher resolution.\n             Time stamp assigned\
    \ by the Virtual File's Originator\n             indicating when the file was\
    \ made available for\n             transmission.\n             See Virtual Files\
    \ - Identification (Section 1.5.2)\n   NERPDEST  Destination                 \
    \                     String(25)\n     Format: See Identification Code (Section\
    \ 5.4)\n             Originator of the Virtual File.\n             This is the\
    \ location that created the data for\n             transmission.\n   NERPORIG\
    \  Originator                                       String(25)\n     Format: See\
    \ Identification Code (Section 5.4)\n             The Final Recipient of the Virtual\
    \ File.\n             This is the location that will look into the Virtual File\n\
    \             content and perform mapping functions.\n   NERPCREA  Creator of\
    \ the NERP                              String(25)\n     Format: See Identification\
    \ Code (Section 5.4)\n             It is the location that created the NERP.\n\
    \   NERPREAS  Reason code                                      Numeric(2)\n  \
    \           This attribute will specify why transmission cannot proceed\n    \
    \         or why processing of the file failed.\n             \"SFNA(RETRY=N)\"\
    \ below should be interpreted as \"EFNA or\n             SFNA(RETRY=N)\" where\
    \ appropriate.\n      Value  '03'  ESID received with reason code '03'\n     \
    \               (user code not known)\n             '04'  ESID received with reason\
    \ code '04'\n                    (invalid password)\n             '09'  ESID received\
    \ with reason code '99'\n                    (unspecified reason)\n          \
    \   '11'  SFNA(RETRY=N) received with reason code '01'\n                    (invalid\
    \ file name)\n             '12'  SFNA(RETRY=N) received with reason code '02'\n\
    \                    (invalid destination)\n             '13'  SFNA(RETRY=N) received\
    \ with reason code '03'\n                    (invalid origin)\n             '14'\
    \  SFNA(RETRY=N) received with reason code '04'\n                    (invalid\
    \ storage record format)\n             '15'  SFNA(RETRY=N) received with reason\
    \ code '05'\n                    (maximum record length not supported)\n     \
    \        '16'  SFNA(RETRY=N) received with reason code '06'\n                \
    \    (file size too big)\n             '20'  SFNA(RETRY=N) received with reason\
    \ code '10'\n                    (invalid record count)\n             '21'  SFNA(RETRY=N)\
    \ received with reason code '11'\n                    (invalid byte count)\n \
    \            '22'  SFNA(RETRY=N) received with reason code '12'\n            \
    \        (access method failure)\n             '23'  SFNA(RETRY=N) received with\
    \ reason code '13'\n                    (duplicate file)\n             '24'  SFNA(RETRY=N)\
    \ received with reason code '14'\n                    (file direction refused)\n\
    \             '25'  SFNA(RETRY=N) received with reason code '15'\n           \
    \         (cipher suite not supported)\n             '26'  SFNA(RETRY=N) received\
    \ with reason code '16'\n                    (encrypted file not allowed)\n  \
    \           '27'  SFNA(RETRY=N) received with reason code '17'\n             \
    \       (unencrypted file not allowed)\n             '28'  SFNA(RETRY=N) received\
    \ with reason code '18'\n                    (compression not allowed)\n     \
    \        '29'  SFNA(RETRY=N) received with reason code '19'\n                \
    \    (signed file not allowed)\n             '30'  SFNA(RETRY=N) received with\
    \ reason code '20'\n                    (unsigned file not allowed)\n        \
    \     '31'  File signature not valid.\n             '32'  File decompression failed.\n\
    \             '33'  File decryption failed.\n             '34'  File processing\
    \ failed.\n             '35'  Not delivered to recipient.\n             '36' \
    \ Not acknowledged by recipient.\n             '50'  Transmission stopped by the\
    \ operator.\n             '90'  File size incompatible with recipient's\n    \
    \                protocol version.\n             '99'  Unspecified reason.\n \
    \  NERPREASL Reason Text Length                              Numeric(3)\n    \
    \         Length in octets of the field NERPREAST.\n             0 indicates that\
    \ no NERPREAST field follows.\n   NERPREAST Reason Text                      \
    \               [UTF-8](n)\n             Reason why transmission cannot proceed\
    \ in plain text.\n             It is encoded using [UTF-8].\n             Maximum\
    \ length of the encoded reason is 999 octets.\n             No general structure\
    \ is defined for this attribute.\n   NERPHSHL  Virtual File hash length      \
    \                    Binary(2)\n             Length in octets of the field NERPHSH.\n\
    \             A binary value of 0 indicates that no hash is present.\n       \
    \      This is always the case if the NERP is not signed.\n   NERPHSH   Virtual\
    \ File hash                                 Binary(n)\n             Hash of the\
    \ Virtual File being transmitted.\n             The algorithm used is determined\
    \ by the bilaterally agreed\n             cipher suite specified in the SFIDCIPH.\n\
    \   NERPSIGL  NERP Signature length                             Binary(2)\n  \
    \           0 indicates that this NERP has not been signed.\n             Any\
    \ other value indicates the length of NERPSIG in octets\n             and indicates\
    \ that this NERP has been signed.\n   NERPSIG   NERP Signature               \
    \                     Binary(n)\n             Contains the [CMS] enveloped signature\
    \ of the NERP.\n             Signature = Sign{NERPDSN\n                      \
    \        NERPDATE\n                              NERPTIME\n                  \
    \            NERPDEST\n                              NERPORIG\n              \
    \                NERPCREA\n                              NERPHSH}\n          \
    \   Each field is taken in its entirety, including any padding.\n            \
    \ The envelope must contain the original data, not just the\n             signature.\n\
    \             The [CMS] content type used is SignedData.\n             The encapsulated\
    \ content type used is id-data.\n             It is an application issue to validate\
    \ the signature with\n             the contents of the NERP.\n"
- title: 5.3.15.  RTR - Ready To Receive
  contents:
  - "5.3.15.  RTR - Ready To Receive\n   o-------------------------------------------------------------------o\n\
    \   |       RTR         Ready To Receive                                |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase         Initiator <---- Responder          |\n   |  \
    \     End File Phase           Initiator <---- Responder          |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | RTRCMD    | RTR Command, 'P'                      | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   RTRCMD    Command Code                                      Character\n  \
    \    Value: 'P'  RTR Command identifier.\n"
- title: 5.3.16.  SECD - Security Change Direction
  contents:
  - "5.3.16.  SECD - Security Change Direction\n   o-------------------------------------------------------------------o\n\
    \   |       SECD        Security Change Direction                       |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---> Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SECDCMD   | SECD Command, 'J'                     | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   SECDCMD   Command Code                                      Character\n  \
    \    Value: 'J'  SECD Command identifier.\n"
- title: 5.3.17.  AUCH - Authentication Challenge
  contents:
  - "5.3.17.  AUCH - Authentication Challenge\n   o-------------------------------------------------------------------o\n\
    \   |       AUCH        Authentication Challenge                        |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---> Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | AUCHCMD   | AUCH Command, 'A'                     | F X(1)  |\n   |  \
    \ 1 | AUCHCHLL  | Challenge Length                      | V U(2)  |\n   |   3\
    \ | AUCHCHAL  | Challenge                             | V U(n)  |\n   o-------------------------------------------------------------------o\n\
    \   AUCHCMD   Command Code                                      Character\n  \
    \    Value: 'A'  AUCH Command identifier.\n   AUCHCHLL  Challenge length     \
    \                             Binary(2)\n             Indicates the length of\
    \ AUCHCHAL in octets.\n             The length is expressed as an unsigned binary\
    \ number using\n             network byte order.\n   AUCHCHAL  Challenge     \
    \                                    Binary(n)\n             A [CMS] encrypted\
    \ 20-byte random number uniquely generated\n             each time an AUCH is\
    \ sent.\n   NOTE:\n   Any encryption algorithm that is available through a defined\
    \ cipher\n   suite (Section 10.2) may be used.  See Section 10.1 regarding the\n\
    \   choice of a cipher suite.\n"
- title: 5.3.18.  AURP - Authentication Response
  contents:
  - "5.3.18.  AURP - Authentication Response\n   o-------------------------------------------------------------------o\n\
    \   |       AURP        Authentication Response                         |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---> Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | AURPCMD   | AURP Command, 'S'                     | F X(1)  |\n   |  \
    \ 1 | AURPRSP   | Response                              | V U(20) |\n   o-------------------------------------------------------------------o\n\
    \   AURPCMD   Command Code                                      Character\n  \
    \    Value: 'S'  AURP Command identifier.\n   AURPRSP   Response             \
    \                            Binary(20)\n             Contains the decrypted challenge\
    \ (AUCHCHAL).\n   IMPORTANT:\n   It is an application implementation issue to\
    \ validate a received AURP\n   to ensure that the response matches the challenge.\
    \  This validation\n   is extremely important to ensure that a party is correctly\n\
    \   authenticated.\n"
- title: 5.4.  Identification Code
  contents:
  - "5.4.  Identification Code\n   The Initiator (sender) and Responder (receiver)\
    \ participating in an\n   ODETTE-FTP session are uniquely identified by an Identification\
    \ Code\n   based on [ISO-6523], Structure for the Identification of\n   Organisations\
    \ (SIO).  The locations are considered to be adjacent for\n   the duration of\
    \ the transmission.\n   The SIO has the following format.\n   o-------------------------------------------------------------------o\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SIOOID    | ODETTE Identifier                     | F X(1)  |\n   |  \
    \ 1 | SIOICD    | International Code Designator         | V 9(4)  |\n   |   5\
    \ | SIOORG    | Organisation Code                     | V X(14) |\n   |  19 |\
    \ SIOCSA    | Computer Subaddress                   | V X(6)  |\n   o-------------------------------------------------------------------o\n\
    \   SIOOID    ODETTE Identifier                                 Character\n  \
    \    Value: 'O' Indicates ODETTE assigned Organisation Identifier.\n         \
    \        Other values may be used for non-ODETTE codes.\n   SIOICD    International\
    \ Code Designator                     String(4)\n             A code forming part\
    \ of the Organisation Identifier.\n   SIOORG    Organisation Code            \
    \                    String(14)\n             A code forming part of the Organisation\
    \ Identifier.  This\n             field may contain the letters A to Z, the digits\
    \ 0 to 9,\n             and space and hyphen characters.\n   SIOCSA    Computer\
    \ Subaddress                               String(6)\n             A locally assigned\
    \ address that uniquely identifies a\n             system within an organisation\
    \ (defined by an Organisation\n             Identifier).\n"
- title: 6.  File Services
  contents:
  - '6.  File Services

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   ODETTE-FTP provides services for compressing, encrypting,\
    \ and signing\n   files.  These services should generally be performed off line,\n\
    \   outside of the ODETTE-FTP communications session for performance\n   reasons,\
    \ although this is not a strict requirement.\n   ODETTE-FTP requires that the\
    \ following steps must be performed in\n   this exact sequence, although any of\
    \ steps 2, 3, or 4 may be omitted.\n   Step 1 is required only if any of steps\
    \ 2, 3, or 4 are performed:\n   1. Insert record length indicators (V format files\
    \ only; see Section\n      6.5)\n   2. Sign\n   3. Compress\n   4. Encrypt\n \
    \  The cipher suite for the encryption and signing algorithms is\n   assigned\
    \ by bilateral agreement.\n   Secured and/or compressed files must be enveloped.\
    \  The envelope\n   contains additional information about the service used that\
    \ is\n   necessary for a receiving party to fully process the file.\n   The [CMS]\
    \ content types used are:\n   EnvelopedData  - Indicates encrypted data\n   CompressedData\
    \ - Indicates compressed data\n   SignedData     - Indicates signed content\n\
    \   Data           - Indicates unstructured data\n   For signed or encrypted data,\
    \ the encapsulated content type\n   (eContentType field) is id-data.\n"
- title: 6.2.  File Signing
  contents:
  - "6.2.  File Signing\n   Files that are to be signed are enveloped according to\
    \ the file\n   enveloping format (SFIDENV).  Generally, this will be as a [CMS]\n\
    \   package.\n   A file may be signed more than once to ease the changeover between\n\
    \   old and new certificates.\n   It is recommended that the envelope does not\
    \ contain the public\n   certificate of the signer.  Where files are sent to the\
    \ same\n   recipient continuously, it would serve no benefit to repeatedly send\n\
    \   the same certificate.  Both the original file data and signature are\n   stored\
    \ within the [CMS] package.\n"
- title: 6.3.  File Encryption
  contents:
  - "6.3.  File Encryption\n   Files that are to be encrypted are enveloped according\
    \ to the file\n   enveloping format (SFIDENV).  Generally, this will be as a [CMS]\n\
    \   package.\n   It is recommended that encryption should be performed before\
    \ the\n   ODETTE-FTP session starts because a large file takes a long time to\n\
    \   encrypt and could cause session time outs, even on high-performance\n   machines.\n\
    \   Likewise, decryption of the file should occur outside of the session.\n  \
    \ However, an application may choose to allow in-session encryption and\n   decryption\
    \ for very small files.\n"
- title: 6.4.  File Compression
  contents:
  - "6.4.  File Compression\n   Files that are to be compressed are enveloped according\
    \ to the file\n   enveloping format (SFIDENV).  Generally, this will be as a [CMS]\n\
    \   package using the [CMS-Compression] data type, which uses the [ZLIB]\n   compression\
    \ algorithm by default.\n   Unlike the buffer compression method, this method\
    \ operates on a whole\n   file.  Because of the increased levels of compression,\
    \ file level\n   compression essentially deprecates the older buffer compression\n\
    \   inside ODETTE-FTP.  The buffer compression is kept for backwards\n   compatibility.\n"
- title: 6.5.  V Format Files - Record Lengths
  contents:
  - "6.5.  V Format Files - Record Lengths\n   A file that has been signed, compressed,\
    \ and/or encrypted will have\n   lost its record structure, so ODETTE-FTP will\
    \ not be able to insert\n   the End of Record Flag in subrecord headers in Data\
    \ Exchange Buffers.\n   To preserve the record structure, V format files must\
    \ have record\n   headers inserted into them prior to signing, compression, or\n\
    \   encryption.  These 2-byte binary numbers, in network byte order,\n   indicate\
    \ the length of each record, allowing the receiving system,\n   where appropriate,\
    \ to recreate the files complete with the original\n   variable-length records.\
    \  Note that the header bytes hold the number\n   of data bytes in the record\
    \ and don't include themselves.\n   This is only applicable to V format files,\
    \ which themselves are\n   typically only of concern for mainframes.\n"
- title: 7.  ODETTE-FTP Data Exchange Buffer
  contents:
  - '7.  ODETTE-FTP Data Exchange Buffer

    '
- title: 7.1.  Overview
  contents:
  - "7.1.  Overview\n   Virtual Files are transmitted by mapping the Virtual File\
    \ records\n   into Data Exchange Buffers, the maximum length of which was\n  \
    \ negotiated between the ODETTE-FTP entities via the Start Session\n   (SSID)\
    \ commands exchanged during the Start Session phase of the\n   protocol.\n   Virtual\
    \ File records may be of arbitrary length.  A simple\n   compression scheme is\
    \ defined for strings of repeated characters.\n   An example of the use of the\
    \ Data Exchange Buffer can be found in\n   Appendix A.\n"
- title: 7.2.  Data Exchange Buffer Format
  contents:
  - "7.2.  Data Exchange Buffer Format\n   For transmission of Virtual File records,\
    \ data is divided into\n   subrecords, each of which is preceded by a 1-octet\
    \ Subrecord Header.\n   The Data Exchange Buffer is made up of the initial Command\
    \ Character\n   followed by pairs of Subrecord Headers and subrecords, as follows.\n\
    \      o--------------------------------------------------------\n      | C |\
    \ H |           | H |           | H |           |   /\n      | M | D | SUBRECORD\
    \ | D | SUBRECORD | D | SUBRECORD |  /_\n      | D | R |           | R |     \
    \      | R |           |   /\n      o-------------------------------------------------------\n\
    \   CMD\n      The Data Exchange Buffer Command Character, 'D'.\n   HDR\n    \
    \  A 1-octet Subrecord Header defined as follows:\n          0   1   2   3   4\
    \   5   6   7\n        o-------------------------------o\n        | E | C |  \
    \                     |\n        | o | F | C O U N T             |\n        |\
    \ R |   |                       |\n        o-------------------------------o\n\
    \      Bits\n       0     End of Record Flag\n             Set to indicate that\
    \ the next subrecord is the last\n             subrecord of the current record.\n\
    \             Unstructured files are transmitted as a single record; in\n    \
    \         this case, the flag acts as an end-of-file marker.\n       1     Compression\
    \ Flag\n             Set to indicate that the next subrecord is compressed.\n\
    \      2-7    Subrecord Count\n             The number of octets in the Virtual\
    \ File represented by the\n             next subrecord expressed as a binary value.\n\
    \             For uncompressed data, this is simply the length of the\n      \
    \       subrecord.\n             For compressed data, this is the number of times\
    \ that the\n             single octet in the following subrecord must be inserted\
    \ in\n             the Virtual File.\n             As 6 bits are available, the\
    \ next subrecord may represent\n             between 0 and 63 octets of the Virtual\
    \ File.\n"
- title: 7.3.  Buffer Filling Rules
  contents:
  - "7.3.  Buffer Filling Rules\n   A Data Exchange Buffer may be any length up to\
    \ the value negotiated\n   in the Start Session exchange.\n   Virtual File records\
    \ may be concatenated within one Data Exchange\n   Buffer or split across a number\
    \ of buffers.\n   A subrecord is never split between two Exchange Buffers.  If\
    \ the\n   remaining space in the current Exchange Buffer is insufficient to\n\
    \   contain the next 'complete' subrecord, one of the following\n   strategies\
    \ should be used:\n   1. Truncate the Exchange Buffer, and put the complete subrecord\n\
    \      (preceded by its header octet) in a new Exchange Buffer.\n   2. Split the\
    \ subrecord into two, filling the remainder of the\n      Exchange Buffer with\
    \ the first new subrecord and starting a new\n      Exchange Buffer with the second.\n\
    \   A record of length zero may appear anywhere in the Exchange Buffer.\n   A\
    \ subrecord of length zero may appear anywhere in the record and/or\n   the Exchange\
    \ Buffer.\n"
- title: 8.  Stream Transmission Buffer
  contents:
  - '8.  Stream Transmission Buffer

    '
- title: 8.1.  Introduction
  contents:
  - "8.1.  Introduction\n   To utilise the TCP stream, a Stream Transmission Buffer\
    \ (STB) is\n   created by adding a Stream Transmission Header (STH) to the start\
    \ of\n   all Command and Data Exchange Buffers before they are passed to the\n\
    \   TCP transport service.  This allows the receiving ODETTE-FTP to\n   recover\
    \ the original Exchange Buffers.\n   Note: The Stream Transmission Buffer is not\
    \ used when using ODETTE-\n         FTP over an X.25 network.\n   This is because\
    \ ODETTE-FTP can rely on the fact that the Network\n   Service will preserve the\
    \ sequence and boundaries of data units\n   transmitted through the network and\
    \ that the Network Service will\n   pass the length of the data unit to the receiving\
    \ ODETTE-FTP.  TCP\n   offers a stream-based connection that does not provide\
    \ these\n   functions.\n   The Stream Transmission Buffer is composed of an STH\
    \ and an OEB.\n   o-----+-----------------+-----+--------------------+-----+------\n\
    \   | STH | OEB             | STH |  OEB               | STH | OEB/\n   o-----+-----------------+-----+--------------------+-----+----\n\
    \      STH - Stream Transmission Header\n      OEB - ODETTE-FTP Exchange Buffer\n"
- title: 8.2.  Stream Transmission Header Format
  contents:
  - "8.2.  Stream Transmission Header Format\n   The Stream Transmission Header is\
    \ shown below.  The fields are\n   transmitted from left to right.\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version| Flags | Length                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n      Value: 0001 (binary)\n             Stream Transmission Header\
    \ version number.\n   Flags\n      Value: 0000 (binary)\n             Reserved\
    \ for future use.\n   Length\n      Range: 5 - 100003 (decimal)\n      The length\
    \ of the Stream Transmission Buffer (STH+OEB).\n      The smallest STB is 5 octets\
    \ consisting of a 4-octet header\n      followed by a 1-octet Exchange Buffer\
    \ such as a Change Direction\n      (CD) command.\n      The maximum Exchange\
    \ Buffer length that can be negotiated is 99999\n      octets (Section 5.3.2)\
    \ giving an STB length of 100003.\n      The length is expressed as a binary number\
    \ in network byte order.\n   It is expected that implementations of this protocol\
    \ will follow the\n   Internet robustness principle of being conservative in what\
    \ is sent\n   and liberal in what is accepted.\n"
- title: 9.  Protocol State Machine
  contents:
  - '9.  Protocol State Machine

    '
- title: 9.1.  ODETTE-FTP State Machine
  contents:
  - "9.1.  ODETTE-FTP State Machine\n   The operation of an ODETTE-FTP entity is formally\
    \ defined by the\n   State Machine presented below.  There are five State and\
    \ Transition\n   tables, and for each table additional information is given in\
    \ the\n   associated Predicate and Action lists.\n   The response of an ODETTE-FTP\
    \ entity to the receipt of an event is\n   defined by a Transition table entry\
    \ indexed by the Event/State\n   intersection within the appropriate state table.\n\
    \   Each Transition table entry defines the actions taken, events\n   generated,\
    \ and new state entered.  Predicates may be used within a\n   table entry to select\
    \ the correct response on the basis of local\n   information held by the entity.\n\
    \   A Transition table contains the following fields:\n     Index (I)   State\
    \ transition index.\n     Predicate   A list of predicates used to select between\
    \ different\n                 possible transitions.  The predicates are defined\
    \ in\n                 the Predicate and Action lists.\n     Actions     A list\
    \ of actions taken by the entity.  The actions are\n                 defined in\
    \ the Predicate and Action lists.\n     Events      Output events generated by\
    \ the entity.\n     Next State  The new state of the entity.\n"
- title: 9.2.  Error Handling
  contents:
  - "9.2.  Error Handling\n   The receipt of an event in a given state may be invalid\
    \ for three\n   reasons.\n   1.  The case is impossible by design of the state\
    \ automata, denoted\n       'X' in the state tables.  For example, a timer that\
    \ has not been\n       set cannot run out.\n   2.  The event is the result of\
    \ an error in the Network Service\n       implementation, also denoted 'X' in\
    \ the state tables.  The\n       Network Service implementation is considered\
    \ to be correct.\n   3.  For all other cases, the event is considered to be a\
    \ User Error,\n       denoted \"U\" in the state tables.\n   The state tables\
    \ define the conditions under which a User event is\n   valid, thus preventing\
    \ the generation of a protocol error by the\n   ODETTE-FTP entity as a result\
    \ of a User Monitor error.  The reaction\n   of the entity to such errors is undefined\
    \ and regarded as a local\n   implementation issue.\n   The state tables also\
    \ allow protocol errors due to the receipt of\n   invalid Exchange Buffers, to\
    \ be detected.  In such cases, the\n   reaction of the entity to the error is\
    \ defined.\n"
- title: 9.3.  States
  contents:
  - "9.3.  States\n   The Command Mode is strictly a half-duplex flip-flop mode.\n\
    \   A_NC_ONLY   Responder, Network Connection opened\n               The Responder\
    \ has sent its Ready Message (SSRM) and is\n               waiting for Start Session\
    \ (SSID) from the Initiator.\n   A_WF_CONRS  Responder Waiting for F_CONNECT_RS\n\
    \               The Responder has received the Initiator's Start Session\n   \
    \            (SSID) and is waiting for a response (F_CONNECT_RS) from\n      \
    \         its User Monitor.\n   CDSTWFCD    CD_RQ stored in WF_CD state\n    \
    \           Since the User Monitor doesn't see the WF_CD state, it\n         \
    \      may send a Change Direction request (F_CD_RQ) before the\n            \
    \   ODETTE-FTP receives a Change Direction (CD) command.\n   CLIP        Close\
    \ Input Pending\n               The Listener has received an End File (EFID) command\
    \ and\n               is waiting for the Close File response (F_CLOSE_FILE_RS)\n\
    \               from its User Monitor.\n   CLOP        Close Out Pending\n   \
    \            The Speaker has sent an End File (EFID) command and is\n        \
    \       waiting for an End File Answer (EFPA or EFNA).\n   ERSTWFCD    End to\
    \ End Response stored in WF_CD state\n               Since the User Monitor doesn't\
    \ see the WF_CD state, it\n               may send F_EERP_RQ, before ODETTE-FTP\
    \ receives a Change\n               Direction (CD) command.\n   IDLE        Connection\
    \ IDLE\n   IDLELI      Idle Listener\n   IDLELICD    Idle Listener, F_CD_RQ Received\n\
    \               The ODETTE-FTP entity has become the Listener after\n        \
    \       receiving a Change Direction request (F_CD_RQ) from the\n            \
    \   User Monitor.  The receipt of an End Session (ESID) is\n               valid\
    \ in this state.\n   IDLESP      Idle Speaker\n   IDLESPCD    Idle Speaker, F_CD_IND\
    \ Sent\n               The ODETTE-FTP entity has sent a Change Direction\n   \
    \            indication (F_CD_IND) to the User Monitor.  A Change\n          \
    \     Direction request (F_CD_RQ) is invalid in this state.\n   I_WF_NC     Initiator\
    \ Waiting for Network Connection\n               The Initiator has requested a\
    \ new network connection and\n               is waiting for a Connection confirmation\
    \ (N_CON_CF) from\n               the Network Service.\n   I_WF_RM     Initiator\
    \ Waiting for Ready Message\n               Before sending Start Session (SSID),\
    \ the Initiator must\n               wait for a Ready Message (SSRM) from the\
    \ Responder.\n   I_WF_SSID   Initiator Waiting for SSID\n               The Initiator\
    \ has sent a Start Session (SSID) command and\n               is waiting for Start\
    \ Session from the Responder.\n   NRSTWFCD    Negative End Response stored in\
    \ WF_CD state\n               Since the User Monitor doesn't see the WF_CD state,\
    \ it\n               may send F_NERP_RQ, before ODETTE-FTP receives a Change\n\
    \               Direction (CD) command.\n   OPI         Open Input (Data Transfer\
    \ Phase)\n               The Listener is waiting for the Speaker to send a Data\n\
    \               Exchange Buffer.\n   OPIP        Open Input Pending\n        \
    \       The Listener has received a Start File (SFID) command and\n          \
    \     is waiting for the Start File response (F_START_FILE_RS)\n             \
    \  from its User Monitor.\n   OPO         Open Out (Data Transfer Phase)\n   \
    \            The Speaker has received a Start File Positive Answer\n         \
    \      (SFPA) and is waiting for a Data (F_DATA_RQ) or Close\n               File\
    \ (F_CLOSE_FILE) request from its User Monitor.\n   OPOP        Open Out Pending\n\
    \               The Speaker has sent a Start File (SFID) command and is\n    \
    \           waiting for a Start File Answer (SFPA or SFNA).\n   OPOWFC      Open\
    \ Out Wait for Credit\n               The Speaker is waiting for a Set Credit\
    \ (CDT) command\n               before sending further Data Exchange buffers.\n\
    \   RTRP        Ready to Receive (RTR) Pending\n               The Listener has\
    \ received an EERP or a NERP and is\n               waiting for the Ready to Receive\
    \ response (F_RTR_RS) from\n               its User Monitor.\n   SFSTWFCD    Start\
    \ File Request stored in WF_CD state.\n               Since the User Monitor doesn't\
    \ see the WF_CD state, it\n               may send a Start File request (F_START_FILE_RQ)\
    \ before\n               the ODETTE-FTP receives a Change Direction (CD) command.\n\
    \   WF_CD       Wait for Change Direction\n               The Listener wishes\
    \ to become the Speaker and is waiting\n               for a Change Direction\
    \ (CD) command after sending an End\n               File Positive Answer (EFPA)\
    \ requesting change direction.\n   WF_RTR      Wait for Ready To Receive\n   \
    \            The Speaker has sent an End to End Response (EERP) or a\n       \
    \        Negative End Response (NERP) command and must wait for\n            \
    \   Ready To Receive (RTR) from the Listener.\n   WF_NDISC    Wait for N_DISC_IND\n\
    \               ODETTE-FTP has sent an End Session (ESID) command and is\n   \
    \            waiting for a Disconnection indication (N_DISC_IND) from\n      \
    \         the Network Service.\n   WF_SECD     Wait for Security Change Direction\n\
    \               The Speaker is expecting a Security Change Direction\n       \
    \        (SECD) from the Listener.\n   WF_AUCH     Wait for Authentication Challenge\n\
    \               The Speaker has sent a Security Change Direction (SECD)\n    \
    \           command and must wait for Authentication Challenge (AUCH)\n      \
    \         from the Listener.\n   WF_AURP     Wait for Authentication Response\n\
    \               The Speaker has sent an Authentication Challenge (AUCH)\n    \
    \           command and must wait for Authentication Response (AURP)\n       \
    \        from the Listener.\n"
- title: 9.4.  Input Events
  contents:
  - "9.4.  Input Events\n   User Monitor Input Events (Section 3)\n     F_DATA_RQ\
    \   F_CONNECT_RQ   F_START_FILE_RQ      F_CLOSE_FILE_RQ\n     F_EERP_RQ   F_CONNECT_RS\
    \   F_START_FILE_RS(+)   F_CLOSE_FILE_RS(+)\n     F_NERP_RQ   F_ABORT_RQ     F_START_FILE_RS(-)\
    \   F_CLOSE_FILE_RS(-)\n     F_CD_RQ     F_RELEASE_RQ   F_RTR_RS\n   Network Input\
    \ Events (Section 2.2)\n      N_CON_IND   N_CON_CF   N_DATA_IND   N_DISC_IND \
    \  N_RST_IND\n   Peer ODETTE-FTP Input Events (Section 4)\n      SSID   SFID \
    \  SFPA   SFNA   EFID   EFPA   EFNA\n      DATA   ESID   EERP   RTR    CD    \
    \ CDT    SSRM\n      NERP   SECD   AUCH   AURP\n   Internal Input Events\n   \
    \   TIME-OUT - Internal ODETTE-FTP timer expires.\n   Input event parameters are\
    \ denoted I.Event-name.Parameter-name within\n   the state table action and predicate\
    \ lists.  Their value can be\n   examined but not changed by the ODETTE-FTP entity.\n"
- title: 9.5.  Output Events
  contents:
  - "9.5.  Output Events\n   User Monitor Output Events (Section 3)\n     F_DATA_IND\
    \  F_CONNECT_IND  F_START_FILE_IND     F_CLOSE_FILE_IND\n     F_EERP_IND  F_CONNECT_CF\
    \   F_START_FILE_CF(+)   F_CLOSE_FILE_CF(+)\n     F_CD_IND    F_ABORT_IND    F_START_FILE_CF(-)\
    \   F_CLOSE_FILE_CF(-)\n     F_NERP_IND  F_RELEASE_IND  F_DATA_CF            F_RTR_CF\n\
    \   Network Output Events (Section 2.2)\n      N_CON_RQ   N_CON_RS   N_DATA_RQ\
    \   N_DISC_RQ\n   Peer ODETTE-FTP Output Events (Section 4)\n      SSID   SFID\
    \   SFPA   SFNA   EFID   EFPA   EFNA\n      DATA   ESID   EERP   RTR    CD   \
    \  CDT    SSRM\n      NERP   SECD   AUCH   AURP\n   Output event parameters are\
    \ denoted O.Event-name.Parameter-name\n   within the state table action and predicate\
    \ lists.  Their values can\n   be examined and changed by the ODETTE-FTP entity.\n"
- title: 9.6.  Local Variables
  contents:
  - "9.6.  Local Variables\n   The following variables are maintained by the ODETTE-FTP\
    \ entity to\n   assist the operation of the protocol.  They are denoted V.Variable-\n\
    \   name within the state table action and predicate lists.  Their value\n   can\
    \ be examined and changed by the ODETTE-FTP entity.  The initial\n   value of\
    \ each variable is undefined.\n   Variable       Type       Comments\n   ---------------------------------------------------------------------\n\
    \   Buf-size       Integer    Negotiated Data Exchange Buffer size.\n   Called-addr\
    \    Address    Used to build O.F_CONNECT_IND.Called-addr\n   Calling-addr   Address\
    \    To build O.F_CONNECT_IND.Calling-addr\n   Compression    Yes/No     Compression\
    \ in use as agreed.\n   Credit_L       Integer    Listener's credit counter.\n\
    \   Credit_S       Integer    Speaker's credit counter.\n   Id             String\
    \     Used to build O.SSID.Id\n   Mode                      Sender-only, Receiver-only,\
    \ Both.\n   Pswd           String     Password, used to build O.SSID.Pswd\n  \
    \ Req-buf        Primitive  Input event (F_XXX_RQ) stored in WF_CD\n         \
    \                     state.\n   Restart        Yes/No     Restart in used as\
    \ agreed.\n   Restart-pos    Integer    Used only during file opening.\n   Window\
    \         Integer    The credit value negotiated for the\n                   \
    \           session.\n   Caller         Yes/No     This entity initiated the ODETTE-FTP\n\
    \                              session.\n   Authentication Yes/No     Secure authentication\
    \ in use as agreed\n   Challenge      Binary     Random challenge\n   ---------------------------------------------------------------------\n"
- title: 9.7.  Local Constants
  contents:
  - "9.7.  Local Constants\n   The following constants define the capabilities of\
    \ a given ODETTE-FTP\n   entity.  They are denoted C.Constant-name within the\
    \ state table\n   action and predicate lists.  Their value can be examined but\
    \ not\n   changed by the ODETTE-FTP entity.\n   Constant         Value       \
    \        Comments\n   ---------------------------------------------------------------------\n\
    \   Cap-compression  Yes/No              Compression supported?\n   Cap-init \
    \        Initiator           Must be Initiator.\n                    Responder\
    \           Must be Responder.\n                    Both                Can be\
    \ Initiator or Responder.\n   Cap-mode         Sender-only         Must be sender.\n\
    \                    Receiver-only       Must be receiver.\n                 \
    \   Both                Can be sender or receiver.\n   Max-buf-size     127 <\
    \ Int < 100000  Maximum Data Exchange Buffer\n                               \
    \          size supported.\n   Max-window       0 < Int < 1000      Local maximum\
    \ credit value.\n   Cap-restart      Yes/No              Restart supported?\n\
    \   Cap-logic        0, 1, 2             0 = does not support special\n      \
    \                                      logic\n                               \
    \         1 = supports special logic\n                                       \
    \ 2 = needs special logic\n   ---------------------------------------------------------------------\n"
- title: 9.8.  Session Connection State Table
  contents:
  - '9.8.  Session Connection State Table

    '
- title: 9.8.1.  State Table
  contents:
  - "9.8.1.  State Table\n   o----------------------------------------------------------o\n\
    \   |   | Other States                                         |\n   |   |--------------------------------------------------o\
    \   |\n   |   | WF_SECD                                          |   |\n   | \
    \  |----------------------------------------------o   |   |\n   |   | WF_AURP\
    \                                      |   |   |\n   |   |------------------------------------------o\
    \   |   |   |\n   |   | WF_AUCH                                  |   |   |   |\n\
    \   |   |--------------------------------------o   |   |   |   |\n   | S | A_WF_CONRS\
    \                           |   |   |   |   |\n   |   |----------------------------------o\
    \   |   |   |   |   |\n   | T | A_NC_ONLY                        |   |   |   |\
    \   |   |\n   |   |------------------------------o   |   |   |   |   |   |\n \
    \  | A | I_WF_SSID                    |   |   |   |   |   |   |\n   |   |--------------------------o\
    \   |   |   |   |   |   |   |\n   | T | I_WF_RM                  |   |   |   |\
    \   |   |   |   |\n   |   |----------------------o   |   |   |   |   |   |   |\
    \   |\n   | E | I_WF_NC              |   |   |   |   |   |   |   |   |\n   | \
    \  |------------------o   |   |   |   |   |   |   |   |   |\n   |   | IDLE   \
    \          |   |   |   |   |   |   |   |   |   |\n   |==================o---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | F_CONNECT_RQ | A | X | X | X | X | X | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   | E | N_CON_CF     | X | C | X | X | X | X | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   | V | SSRM         | X | X | H | X | X | X | L | L | L | X |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   | E | SSID         | X | X | X | D | E | F | L | L | L | F |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   | N | N_CON_IND    | B | X | X | X | X | X | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   | T | F_CONNECT_RS | X | U | U | U | U | G | X | X | X | U |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | ESID         | X | X | X | F | X | X | F | F | F | X |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | AUCH         | X | X | U | U | X | X | I | L | L | U |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | AURP         | X | X | U | U | X | X | L | K | L | U |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | SECD         | X | X | U | U | X | X | L | L | J | U |\n   o----------------------------------------------------------o\n"
- title: 9.8.2.  Transition Table
  contents:
  - "9.8.2.  Transition Table\n    I | Predicate    Actions     Output Events    \
    \        Next State\n   ===o=============================================================\n\
    \    A | P1:                      F_ABORT_IND              IDLE\n      | !P1:\
    \            1,2      N_CON_RQ                 I_WF_NC\n   ---+-------------------------------------------------------------\n\
    \    B | P3:                      N_DISC_RQ                IDLE\n      | !P3:\
    \            2        N_CON_RS\n      |                          SSRM        \
    \             A_NC_ONLY\n   ---+-------------------------------------------------------------\n\
    \    C |                 4,2                               I_WF_RM\n   ---+-------------------------------------------------------------\n\
    \    D | P2 & P8 & P11:  4,2,5    SECD                     WF_AUCH\n      | P2\
    \ & P8 & !P11: 4,2,5    F_CONNECT_CF             IDLESP\n      | P2 & !P8:   \
    \    4,2      ESID(R=12)\n      |                          F_ABORT_IND(R,AO=L)\
    \      WF_NDISC\n      | else:           4,2      ESID(R=10)\n      |        \
    \                  F_ABORT_IND(R,AO=L)      WF_NDISC\n   ---+-------------------------------------------------------------\n\
    \    E | P4:             4        N_DISC_RQ                IDLE\n      | !P4:\
    \            4,2      F_CONNECT_IND            A_WF_CONRS\n   ---+-------------------------------------------------------------\n\
    \    F |                 4        F_ABORT_IND\n      |                       \
    \   N_DISC_RQ                IDLE\n   ---+-------------------------------------------------------------\n\
    \    G | P2 &  P9 & P10: 4,2,5    SSID                     WF_SECD\n      | P2\
    \ & !P9 & P10: 4,2,5    SSID                     IDLELI\n      | !P10:       \
    \    4,2      ESID(R=12)\n      |                          F_ABORT_IND(R,AO=L)\
    \      WF_NDISC\n      | else:           4,2      ESID(R=10)\n      |        \
    \                  F_ABORT_IND(R,AO=L)      WF_NDISC\n   ---+-------------------------------------------------------------\n\
    \    H |                 4,2,3    SSID                     I_WF_SSID\n   ---+-------------------------------------------------------------\n\
    \    I | P5:             4,2      AURP                     WF_SECD\n      | !P5:\
    \            4,2      AURP                     IDLELI\n   ---+-------------------------------------------------------------\n\
    \    J |                 4,2      AUCH                     WF_AURP\n   ---+-------------------------------------------------------------\n\
    \    K | P6:             4,2      F_CONNECT_CF             IDLESP\n      | P7:\
    \             4,2      SECD                     WF_AUCH\n      | else:       \
    \    4,2      ESID(R=11)\n      |                          F_ABORT_IND(R,AO=L)\
    \      WF_NDISC\n   ---+-------------------------------------------------------------\n\
    \    L |                 4,2      ESID(R=02)\n      |                        \
    \  F_ABORT_IND(R,AO=L)      WF_NDISC\n   ---+-------------------------------------------------------------\n"
- title: 9.8.3.  Predicates and Actions
  contents:
  - "9.8.3.  Predicates and Actions\n   Predicate P1:  (No resources available) OR\n\
    \                  (C.Cap-init = Responder) OR\n                  (C.Cap-mode\
    \ = Sender-only AND\n                     I.F_CONNECT_RQ.Mode = Receiver-only)\
    \ OR\n                  (C.Cap-mode = Receiver-only AND\n                    \
    \ I.F_CONNECT_RQ.Mode = Sender-only)\n   Predicate P2:  SSID negotiation is successful\n\
    \                  (for these, Buf-size, Restart, Compression, Mode,\n       \
    \            Special logic, and Window, compare the inbound SSID\n           \
    \        with the local constants to set the local variables.\n              \
    \     Any incompatibilities result in failure of the\n                   negotiation.)\n\
    \   Predicate P3:  C.Cap-init = Initiator\n   Predicate P4:  Mode in SSID incompatible\
    \ with C.Cap-mode\n   Predicate P5:  V.Caller = Yes\n   Predicate P6:  (V.Caller\
    \ = Yes) AND (AURP.Signature verifies with\n                   V.Challenge)\n\
    \   Predicate P7:  (V.Caller = No)  AND (AURP.Signature verifies with\n      \
    \             V.Challenge)\n   Predicate P8:  V.Authentication = I.SSID.Authentication\n\
    \   Predicate P9:  I.F_CONNECT_RS.Authentication = Yes\n  Predicate P10:  O.F_CONNECT_IND.Authentication\
    \ =\n                   I.F_CONNECT_RS.Authentication\n  Predicate P11:  V.Authentication\
    \ = Yes\n       Action 1:  Set V.Mode from (C.Cap-mode, I.F_CONNECT_RQ.Mode)\n\
    \                  Set V.Pswd, V.Id, V.Restart, and\n                   V.Authentication\
    \ from I.F_CONNECT_RQ\n                  Set V.Buf-size = C.Max-buf-size\n   \
    \               Set V.Compression = C.Cap-compression\n                  Set V.Caller\
    \ = Yes\n                  Build O.N_CON_RQ\n       Action 2:  Start inactivity\
    \ timer\n       Action 3:  Set parameters in O.SSID = from local variables\n \
    \      Action 4:  Stop timer\n       Action 5:  Set V.Mode, V.Restart, V.Compression,\
    \ V.Buf-size,\n                      V.Window, V.Authentication = from SSID\n\
    \       Action 6:  Set V.Challenge = A random number unique to the\n         \
    \          session\n"
- title: 9.9.  Error and Abort State Table
  contents:
  - '9.9.  Error and Abort State Table

    '
- title: 9.9.1.  State Table
  contents:
  - "9.9.1.  State Table\n   o--------------------------------------o\n   |   | Other\
    \ States                     |\n   | S |------------------------------o   |\n\
    \   | T | WF_NDISC                     |   |\n   | A |--------------------------o\
    \   |   |\n   | T | I_WF_NC                  |   |   |\n   | E |----------------------o\
    \   |   |   |\n   |   | IDLE                 |   |   |   |\n   |======================o---+---+---+---|\n\
    \   |   | TIME-OUT         | X | X | A | B |\n   |   |------------------+---+---+---+---|\n\
    \   | E | F_ABORT_RQ       | X | A | X | C |\n   | V |------------------+---+---+---+---|\n\
    \   | E | N_RST_IND        | X | X | A | D |\n   | N |------------------+---+---+---+---|\n\
    \   | T | N_DISC_IND       | X | E | F | G |\n   |   |------------------+---+---+---+---|\n\
    \   |   | Invalid Buffer   | X | X | H | I |\n   o--------------------------------------o\n"
- title: 9.9.2.  Transition Table
  contents:
  - "9.9.2.  Transition Table\n    I | Predicate    Actions     Output Events    \
    \         Next State\n   ===o=================================================================\n\
    \    A |                          N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    B |                          F_ABORT_IND\n      |                       \
    \   N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    C |              1           N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    D |              1           N_DISC_RQ\n      |                         \
    \ F_ABORT_IND               IDLE\n   ---+-----------------------------------------------------------------\n\
    \    E |                          F_ABORT_IND               IDLE\n   ---+-----------------------------------------------------------------\n\
    \    F |              1                                     IDLE\n   ---+-----------------------------------------------------------------\n\
    \    G |              1           F_ABORT_IND               IDLE\n   ---+-----------------------------------------------------------------\n\
    \    H |                                                    WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    I |              1,2         ESID(R=01)\n      |                        \
    \  F_ABORT_IND(R,AO=L)       WF_NDISC\n   ---------------------------------------------------------------------\n"
- title: 9.9.3.  Predicates and Actions
  contents:
  - "9.9.3.  Predicates and Actions\n       Action 1:  Stop inactivity timer\n   \
    \    Action 2:  Start inactivity timer\n"
- title: 9.10.  Speaker State Table 1
  contents:
  - '9.10.  Speaker State Table 1

    '
- title: 9.10.1.  State Table
  contents:
  - "9.10.1.  State Table\n   The following abbreviations are used in the Speaker\
    \ state table.\n      F_REL_RQ(Ok)   -  F_RELEASE_RQ Reason = Normal\n      F_REL_RQ(Err)\
    \  -  F_RELEASE_RQ Reason = Error\n  o--------------------------------------------------------------------o\n\
    \  | | Other States                                                     |\n  |\
    \ |--------------------------------------------------------------o   |\n  | |\
    \ WF_NDISC                                                     |   |\n  | |----------------------------------------------------------o\
    \   |   |\n  | | OPOWFC                                                   |  \
    \ |   |\n  | |------------------------------------------------------o   |   |\
    \   |\n  | | OPO                                                  |   |   |  \
    \ |\n  |S|--------------------------------------------------o   |   |   |   |\n\
    \  | | OPOP                                             |   |   |   |   |\n  |T|----------------------------------------------o\
    \   |   |   |   |   |\n  | | CDSTWFCD                                     |  \
    \ |   |   |   |   |\n  |A|------------------------------------------o   |   |\
    \   |   |   |   |\n  | | SFSTWFCD                                 |   |   |  \
    \ |   |   |   |\n  |T|--------------------------------------o   |   |   |   |\
    \   |   |   |\n  | | NRSTWFCD                             |   |   |   |   |  \
    \ |   |   |\n  |E|----------------------------------o   |   |   |   |   |   |\
    \   |   |\n  | | ERSTWFCD                         |   |   |   |   |   |   |  \
    \ |   |\n  | |------------------------------o   |   |   |   |   |   |   |   |\
    \   |\n  | | WF_CD                        |   |   |   |   |   |   |   |   |  \
    \ |\n  | |--------------------------o   |   |   |   |   |   |   |   |   |   |\n\
    \  | | WF_RTR                   |   |   |   |   |   |   |   |   |   |   |\n  |\
    \ |----------------------o   |   |   |   |   |   |   |   |   |   |   |\n  | |\
    \ IDLESPCD             |   |   |   |   |   |   |   |   |   |   |   |\n  | |------------------o\
    \   |   |   |   |   |   |   |   |   |   |   |   |\n  | | IDLESP           |  \
    \ |   |   |   |   |   |   |   |   |   |   |   |\n  |=+==============o---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  | | F_EERP_RQ    | A | A | W | F | W | W | U | U | U | U | U | U | U |\n  |\
    \ |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n  | |\
    \ F_NERP_RQ    | Y | Y | W | Z | W | W | U | U | U | U | U | U | U |\n  | |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  | | F_START_     | B | B | W | G | W | W | U | U | U | U | U | X | U |\n  |\
    \ |   FILE_RQ    |   |   |   |   |   |   |   |   |   |   |   |   |   |\n  | |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  | | SFPA         | C | C | C | C | C | C | C | C | K | C | C | S | C |\n  |\
    \ |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n  |E|\
    \ SFNA         | C | C | C | C | C | C | C | C | L | C | C | S | C |\n  | |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  |V| CD           | C | C | C | H | R | Z1| I | J | C | C | C | S | C |\n  |\
    \ |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n  |E|\
    \ F_DATA_RQ    | U | U | U | U | U | U | U | U | U | M | U | S | U |\n  | |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  |N| CDT          | C | C | C | C | C | C | C | C | C | P | O | S | C |\n  |\
    \ |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n  |T|\
    \ F_CD_RQ      | D | U | W | T | W | W | U | U | U | U | U | X | U |\n  | |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  | | F_REL_RQ(Ok) | U | E | U | U | U | U | U | U | U | U | U | X | U |\n  |\
    \ |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n  | |\
    \ F_REL_RQ(Err)| Q | Q | Q | Q | Q | Q | Q | Q | Q | Q | Q | S | Q |\n  | |--------------+---+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \  | | RTR          | C | C | N | C | C | C | C | C | C | C | C | S | C |\n  o--------------------------------------------------------------------o\n"
- title: 9.10.2.  Transition Table
  contents:
  - "9.10.2.  Transition Table\n    I | Predicate    Actions      Output Events  \
    \            Next State\n   ===o=================================================================\n\
    \    A | P5:          1,2,3,18     EERP                       WF_RTR\n      |\
    \ !P5:         1,2,3        EERP                       WF_RTR\n   ---+-----------------------------------------------------------------\n\
    \    B | P1:                                                  UE\n      | !P1:\
    \         1,2,5        SFID                       OPOP\n   ---+-----------------------------------------------------------------\n\
    \    C |              1,2          ESID(R=02)\n      |                       \
    \    F_ABORT_IND(R,AO=L)        WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    D |              1,2          CD                         IDLELICD\n   ---+-----------------------------------------------------------------\n\
    \    E |              1,2          ESID(R=00)                 WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    F |              4                                       ERSTWFCD\n   ---+-----------------------------------------------------------------\n\
    \    G | P1:                                                  UE\n      | !P1:\
    \         6                                       SFSTWFCD\n   ---+-----------------------------------------------------------------\n\
    \    H |              1,2                                     IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    I |              1,2,10       SFID                       OPOP\n   ---+-----------------------------------------------------------------\n\
    \    J |              1,2          CD                         IDLELICD\n   ---+-----------------------------------------------------------------\n\
    \    K | P2:          1,2          ESID(R=02)\n      |                       \
    \    F_ABORT_IND(R,AO=L)        WF_NDISC\n      | !P2:         1,2,7,12     F_START_FILE_CF(+)\
    \         OPO\n   ---+-----------------------------------------------------------------\n\
    \    L |              1,2,8        F_START_FILE_CF(-)         IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    M | P3:          1,2,11,13    DATA                       OPOWFC\n      |\
    \ !P3:         1,2,11,13    DATA\n      |                           F_DATA_CF\
    \                  OPO\n   ---+-----------------------------------------------------------------\n\
    \    N |                           F_RTR_CF                   IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    O |              12           F_DATA_CF                  OPO\n   ---+-----------------------------------------------------------------\n\
    \    P | Protocol     1,2          ESID(R=02)\n      | Error                 \
    \    F_ABORT_IND(R,AO=L)        WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    Q |              1,2          ESID(R)                    WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \                                                           Continued -->\n  \
    \  I | Predicate    Actions      Output Events              Next State\n   ===o=================================================================\n\
    \    R |              1,2,9        EERP                       WF_RTR\n   ---+-----------------------------------------------------------------\n\
    \    S |                                                      WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    T |                                                      CDSTWFCD\n   ---+-----------------------------------------------------------------\n\
    \    U |                           User Error                 UE\n   ---+-----------------------------------------------------------------\n\
    \    W |                           User Error - Note 1        UE\n   ---+-----------------------------------------------------------------\n\
    \    X |                           Error\n   ---+-----------------------------------------------------------------\n\
    \    Y |  P4 &  P5:   1,2,15,18    NERP                       WF_RTR\n      |\
    \ !P4 & !P5:   1,2,15,14    NERP                       WF_RTR\n      |  P4 & !P5:\
    \   1,2,15       NERP                       WF_RTR\n      | !P4 &  P5:   1,2,15,14,18\
    \ NERP                       WF_RTR\n   ---+-----------------------------------------------------------------\n\
    \    Z |              16                                      NRSTWFCD\n   ---------------------------------------------------------------------\n\
    \    Z1| P4:          1,2,17       NERP                       WF_RTR\n      |\
    \ !P4:         1,2,17,14    NERP                       WF_RTR\n   ---------------------------------------------------------------------\n"
- title: 9.10.3.  Predicates and Actions
  contents:
  - "9.10.3.  Predicates and Actions\n   Predicate P1:  (I.F_START_FILE_RQ.Restart-pos\
    \ > 0 AND V.Restart = No)\n                  OR (V.Mode = Receiver-only)\n   \
    \        Note:  Restart requested and not supported for this session.\n   Predicate\
    \ P2:  I.SFPA.Restart-pos > V.Restart-pos\n           Note:  Protocol error due\
    \ to the restart position in the SFPA\n                  acknowledgement being\
    \ greater than the position\n                  requested in the SFID request.\n\
    \   Predicate P3:  V.Credit_S - 1 = 0\n           Note:  Speaker's Credit is exhausted.\n\
    \   Predicate P4:  No special logic is in use\n   Predicate P5:  Signed EERP/NERP\
    \ requested\n       Action 1:  Stop inactivity timer\n       Action 2:  Start\
    \ inactivity timer\n       Action 3:  Build an EERP from F_EERP_RQ\n       Action\
    \ 4:  Store F_EERP_RQ in V.Req-buf\n       Action 5:  Build SFID from F_START_FILE_RQ\n\
    \                  V.Restart-pos = I.F_START_FILE_RQ.Restart-pos\n       Action\
    \ 6:  Store F_START_FILE_RQ in V.Req-buf\n       Action 7:  Build F_START_FILE_CF(+)\
    \ from I.SFPA\n       Action 8:  Build F_START_FILE_CF(-) from I.SFNA\n      \
    \ Action 9:  Build EERP from F_EERP_RQ stored in V.Req-buf\n       Action 10:\
    \ Build SFID from F_START_FILE_RQ stored in V.Req-buf\n                  Set V.Restart-pos\n\
    \       Action 11: Build Exchange Buffer\n       Action 12: V.Credit_S = V.Window\n\
    \       Action 13: V.Credit_S = V.Credit_S - 1\n       Action 14: Activate CRC-calculus\
    \ function.  Wrap Exchange buffer\n                  in special logic\n      \
    \ Action 15: Build a NERP from F_NERP_RQ\n       Action 16: Store F_NERP_RQ in\
    \ V.Req-buf\n       Action 17: Build NERP from F_NERP_RQ stored in V.Req-buf\n\
    \       Action 18: Sign the contents of NERP/EERP\n          Note 1: Whether to\
    \ accept this \"Request/Event\" while in this\n                  state is a matter\
    \ of local implementation.  The ODETTE\n                  state tables are based\
    \ on the assumption that this\n                  event cannot occur in this state\
    \ and is considered to\n                  be a user error (UE).\n"
- title: 9.11.  Speaker State Table 2
  contents:
  - '9.11.  Speaker State Table 2

    '
- title: 9.11.1.  State Table
  contents:
  - "9.11.1.  State Table\n   o---------------------------------o\n   | S | CLOP \
    \                       |\n   | T |-------------------------o   |\n   | A | OPOWFC\
    \                  |   |\n   | T |---------------------o   |   |\n   | E | OPO\
    \                 |   |   |\n   |=====================o---+---+---|\n   | E |\
    \ F_CLOSE_FILE_RQ | A | E | U |\n   | V |-----------------+---+---+---|\n   |\
    \ E | EFPA            | B | B | C |\n   | N |-----------------+---+---+---|\n\
    \   | T | EFNA            | B | B | D |\n   o---------------------------------o\n"
- title: 9.11.2.  Transition Table
  contents:
  - "9.11.2.  Transition Table\n    I | Predicate    Actions     Output Events   \
    \           Next State\n   ===o=================================================================\n\
    \    A |              1,2,5,7     EFID                       CLOP\n   ---+-----------------------------------------------------------------\n\
    \    B |              1,2         ESID(R=02)\n      |                        \
    \  F_ABORT_IND(R,AO=L)        WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    C | P1:          1,2,3       F_CLOSE_FILE_CF(+,SP=No)\n      |          \
    \                CD                         IDLELI\n      | !P1:         1,2,4\
    \       F_CLOSE_FILE_CF(+,SP=Yes)  IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    D |              1,2,6       F_CLOSE_FILE_CF(-)         IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    E |                          See Note 1\n   ---+-----------------------------------------------------------------\n\
    \    U |                          User Error                 UE\n   ---------------------------------------------------------------------\n"
- title: 9.11.3.  Predicates and Actions
  contents:
  - "9.11.3.  Predicates and Actions\n   Predicate P1: (I.EFPA.CD-Request = Yes)\n\
    \   Predicate P2:  No special logic is in use\n       Action 1:  Stop inactivity\
    \ timer\n       Action 2:  Start inactivity timer\n       Action 3:  O.F_CLOSE_FILE_CF(+).Speaker\
    \ = No\n       Action 4:  O.F_CLOSE_FILE_CF(+).Speaker = Yes\n       Action 5:\
    \  Build EFID from F_CLOSE_FILE_RQ\n       Action 6:  Build F_CLOSE_FILE_CF(-)\
    \ from EFNA\n       Action 7:  Set V.Credit_S = 0\n       Action 8:  Wrap Exchange\
    \ buffer in special logic\n         Note 1:  In order to respect the \"half duplex\"\
    \ property of\n                  ODETTE-FTP, it is forbidden to send EFID while\
    \ in the\n                  OPOWFC state.  EFID can be sent only in the OPO state.\n\
    \                  The ODETTE-FTP implementation must avoid sending EFID\n   \
    \               (or receiving F_CLOSE_FILE_RQ) while in the OPOWFC\n         \
    \         state.\n"
- title: 9.12.  Listener State Table
  contents:
  - '9.12.  Listener State Table

    '
- title: 9.12.1.  State Table
  contents:
  - "9.12.1.  State Table\n   o---------------------------------------------o\n  \
    \ |   | RTRP                                    |\n   |   |-------------------------------------o\
    \   |\n   |   | CLIP                                |   |\n   |   |---------------------------------o\
    \   |   |\n   |   | OPI                             |   |   |\n   | S |-----------------------------o\
    \   |   |   |\n   | T | OPIP                        |   |   |   |\n   | A |-------------------------o\
    \   |   |   |   |\n   | T | IDLELICD                |   |   |   |   |\n   | E\
    \ |---------------------o   |   |   |   |   |\n   |   | IDLELI              |\
    \   |   |   |   |   |\n   |=====================o---+---+---+---+---+---+\n  \
    \ |   | SFID            | A | A | B | B | B | B |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   | E | DATA            | B | B | B | I | B | B |\n   | V |-----------------+---+---+---+---+---+---+\n\
    \   | E | EFID            | B | B | B | J | B | B |\n   | N |-----------------+---+---+---+---+---+---+\n\
    \   | T | F_START_FILE_RS | U | U | H | U | U | U |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | F_CLOSE_FILE_RS | U | U | U | U | K | U |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | CD              | C | B | B | B | B | B |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | ESID R=Normal   | D | F | D | D | D | D |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | ESID R=Error    | D | D | D | D | D | D |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | EERP            | E | E | B | B | B | B |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | NERP            | L | L | B | B | B | B |\n   |   |-----------------+---+---+---+---+---+---+\n\
    \   |   | F_RTR_RS        | U | U | U | U | U | M |\n   o---------------------------------------------o\n"
- title: 9.12.2.  Transition Table
  contents:
  - "9.12.2.  Transition Table\n    I | Predicate          Actions    Output Events\
    \           Next State\n   ===o=================================================================\n\
    \    A | P1:                1,2        ESID(R=02)\n      |                   \
    \            F_ABORT_IND(R,AO=L)       WF_NDISC\n      | !P1:               1,2,3\
    \      F_START_FILE_IND          OPIP\n   ---+-----------------------------------------------------------------\n\
    \    B |                    1,2        ESID(R=02)\n      |                   \
    \            F_ABORT_IND(R,AO=L)       WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    C |                    1,2        F_CD_IND                  IDLESPCD\n  \
    \ ---+-----------------------------------------------------------------\n    D\
    \ |                    1          F_ABORT_IND(Received\n      |              \
    \                 ESID Reason,AO=D)\n      |                               N_DISC_RQ\
    \                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    E |                    1,2,4      F_EERP_IND                RTRP\n   ---+-----------------------------------------------------------------\n\
    \    F |                    1          F_RELEASE_IND\n      |                \
    \               N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    H |  P4:                          User Error                UE\n      | \
    \ P2 & !P4 & !P5:   1,2,8      SFPA                      OPI\n      | !P2 & !P4\
    \ & !P5:   1,2        SFNA                      IDLELI\n      |  P2 & !P4 &  P5:\
    \   1,2,5,8    SFPA                      OPI\n      | !P2 & !P4 &  P5:   1,2,5\
    \      SFNA                      IDLELI\n   ---+-----------------------------------------------------------------\n\
    \    I | P6:                1,2        ESID(R=02)\n      |                   \
    \            F_ABORT_IND(R,A0=L)       WF_NDISC\n      | !P5 & !P6 & !P7:   1,2,7\
    \      F_DATA_IND (See Note 1)   OPI\n      | !P5 & !P6 &  P7:   1,2,8      F_DATA_IND\n\
    \      |                               CDT (See Note 1)          OPI\n      |\
    \  P5 & !P6 &  P8:   1,2        ESID(R=07)\n      |                          \
    \     F_ABORT_IND(R,A0=L)       WF_NDISC\n      |  P5 & !P6 & !P7 :  1,2,6,7 \
    \   F_DATA_IND (See Note 1)   OPI\n      |   & !P8\n      |  P5 & !P6 &  P7 :\
    \  1,2,5,6,8  F_DATA_IND                OPI\n      |   & !P8                 \
    \      CDT (See Note 1)\n   ---+-----------------------------------------------------------------\n\
    \    J |                    1,2        F_CLOSE_FILE_IND          CLIP\n   ---+-----------------------------------------------------------------\n\
    \    K |  P2 &  P3 & !P5:   1,2        EFPA(CD-Req)              WF_CD\n     \
    \ |  P2 & !P3 & !P5:   1,2        EFPA(no CD)               IDLELI\n      | !P2\
    \ & !P5:         1,2        EFNA                      IDLELI\n      |  P2 & !P3\
    \ & P5:    1,2,5      EFPA(no CD)               IDLELI\n      | !P2 &  P5:   \
    \      1,2,5      EFNA                      IDLELI\n      |  P2 &  P3 & P5:  \
    \  1,2,5      EFPA(CD-Req)              WF_CD\n   ---+-----------------------------------------------------------------\n\
    \    L |                    1,2,10     F_NERP_IND                RTRP\n   ---+-----------------------------------------------------------------\n\
    \    M |                    1,2        RTR                       IDLELI\n   ---+-----------------------------------------------------------------\n\
    \    U |                               User Error                UE\n   ---------------------------------------------------------------------\n"
- title: 9.12.3.  Predicates and Actions
  contents:
  - "9.12.3.  Predicates and Actions\n   Predicate P1:  (I.SFID.Restart-pos > 0 AND\
    \ V.Restart = No) OR (V.Mode\n                  = Sender-only)\n           Note:\
    \  Invalid Start File command.\n   Predicate P2:  Positive Response\n   Predicate\
    \ P3:  I.F_CLOSE_FILE_RS(+).Speaker = Yes\n   Predicate P4:  I.F_START_FILE_RS(+).Restart-pos\
    \ > V.Restart\n   Predicate P5:  Special logic is used\n   Predicate P6:  V.Credit_L\
    \ - 1 < 0\n           Note:  Protocol Error because the Speaker has exceeded its\n\
    \                  available transmission credit.\n   Predicate P7:  V.Credit_L\
    \ - 1 = 0\n           Note:  The Speaker's credit must be reset before it can\
    \ send\n                  further Data Exchange Buffers.\n   Predicate P8:  The\
    \ calculus of the received CRC indicates an error\n       Action 1:  Stop inactivity\
    \ timer\n       Action 2:  Start inactivity timer\n       Action 3:  Build F_START_FILE_IND\
    \ from I.SFID\n                  V.Restart-pos = I.SFID.Restart-pos\n       Action\
    \ 4:  Build F_EERP_IND from I.EERP\n       Action 5:  Add special logic header\
    \ to the command to be sent to\n                  the Speaker\n       Action 6:\
    \  Suppress the special logic header from the data buffer\n                  before\
    \ giving it to the user\n       Action 7:  V.Credit_L = V.Credit_L - 1\n     \
    \  Action 8:  V.Credit_L = V.Window\n       Action 10: Build F_NERP_IND from I.NERP\n\
    \         Note 1:  Flow control in case of reception.\n                  The ODETTE-FTP\
    \ Listener must periodically send new\n                  credit to the Speaker.\
    \  The timing of this operation\n                  will depend on:\n         \
    \         1. The User Monitor's capacity to receive data.\n                  2.\
    \ The number of buffers available to ODETTE-FTP.\n                  3. The Speaker's\
    \ available credit, which must be\n                     equal to zero.\n"
- title: 9.13.  Example
  contents:
  - "9.13.  Example\n   Consider an ODETTE-FTP entity that has sent a Start File (SFID)\n\
    \   command and entered the Open Out Pending (OPOP) state.  Its response\n   on\
    \ receiving a Positive Answer (SFPA) is documented in Speaker State\n   Table\
    \ 1, which shows that transition 'K' should be applied and is\n   interpreted\
    \ as follows:\n      if (I.SFPA.Restart-pos > V.Restart-pos) then\n      begin\
    \                                       // invalid restart\n         Actions:\
    \   Stop inactivity timer,        // reset timer\n                    Start inactivity\
    \ timer;\n         Output:    ESID(R=02),                   // to peer ODETTE-FTP\n\
    \                    F_ABORT_IND(R,AO=L);          // to User Monitor\n      \
    \   New State: WF_NDISC;\n      end\n      else begin\n         Actions:   Stop\
    \ inactivity timer,        // reset timer\n                    Start inactivity\
    \ timer;\n                    Build F_START_FILE_CF(+) from I.SFPA\n         \
    \           V.Credit_S = V.Window         // initialise credit\n         Output:\
    \    F_START_FILE_CF(+);           // to User Monitor\n         New State: OPO;\n\
    \      end\n   ODETTE-FTP checks the restart position in the received Start File\n\
    \   Positive Answer (SFPA) command.  If it is invalid, it aborts the\n   session\
    \ by sending an End Session (ESID) command to its peer and an\n   Abort indication\
    \ (F_ABORT_IND) to its User Monitor.  If the restart\n   position is valid, a\
    \ Start File confirmation (F_START_FILE_CF) is\n   built and sent to the User\
    \ Monitor, the credit window is initialised,\n   and the Open Out (OPO) state\
    \ is entered.\n"
- title: 10.  Miscellaneous
  contents:
  - '10.  Miscellaneous

    '
- title: 10.1.  Algorithm Choice
  contents:
  - "10.1.  Algorithm Choice\n   The choice of algorithms to use for security or compression\
    \ between\n   partners is for bilateral agreement outside of ODETTE-FTP.\n"
- title: 10.2.  Cryptographic Algorithms
  contents:
  - "10.2.  Cryptographic Algorithms\n   The algorithms for symmetric and asymmetric\
    \ cryptography and hashing\n   are represented by a coded value, the cipher suite:\n\
    \       Cipher Suite  Symmetric          Asymmetric    Hashing\n       ------------\
    \  -----------------  ------------  -------\n       01            3DES_EDE_CBC_3KEY\
    \  RSA_PKCS1_15  SHA-1\n       02            AES_256_CBC        RSA_PKCS1_15 \
    \ SHA-1\n   Support of all cipher suites listed here is mandatory.\n   The certificates\
    \ used must be [X.509] certificates.\n   TripleDES is using Cipher Block Chaining\
    \ (CBC) mode for added\n   security and uses the Encryption Decryption Encryption\
    \ (EDE) process\n   with 3 different 64-bit keys.\n   RSA padding is as defined\
    \ in [PKCS#1].\n   AES is using a 256-bit key in CBC mode.\n   An extended list\
    \ of optional cipher suites may be used (Section\n   10.3), but there is no guarantee\
    \ that two communicating ODETTE-FTP\n   entities would both support these optional\
    \ cipher suites.\n"
- title: 10.3.  Protocol Extensions
  contents:
  - "10.3.  Protocol Extensions\n   The algorithms and file enveloping formats available\
    \ in ODETTE-FTP\n   may be extended outside of this document.\n   An up-to-date\
    \ list of cipher suite values for use in ODETTE-FTP is\n   maintained by ODETTE\
    \ International, and published on their website at\n   www.odette.org.\n"
- title: 10.4.  Certificate Services
  contents:
  - "10.4.  Certificate Services\n   Certificates and certificate revocation lists\
    \ may be exchanged as\n   [CMS] enveloped files.  It is therefore valid to exchange\
    \ a [CMS]\n   file that is neither encrypted, compressed, nor signed.  It is an\n\
    \   application implementation issue to determine the correct course of\n   action\
    \ on receipt of such a file.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   ODETTE-FTP security requires the use of [X.509]\
    \ certificates.  If no\n   security options are agreed for use, the send and receive\
    \ passwords\n   are sent in plain text.  Whilst this is acceptable over X.25 and\
    \ ISDN\n   networks, this is a risky practice over insecure public networks such\n\
    \   as the Internet.\n   All, some, or none of the security options available\
    \ in ODETTE-FTP\n   may be used.  No recommendations for the use of these options\
    \ are\n   provided in this specification.  Whilst use of the highest-strength\n\
    \   encryption algorithms may seem admirable, there is often a\n   performance\
    \ tradeoff to be made, and signing all files and\n   acknowledgements has potential\
    \ legal implications that should be\n   considered.\n   It should be noted that\
    \ whilst the security measures ensure that an\n   ODETTE-FTP partner is authenticated,\
    \ it does not necessarily mean\n   that the partner is authorised.  Having proven\
    \ the identity of a\n   partner, it is an application issue to decide whether\
    \ that partner is\n   allowed to connect or exchange files.\n   Extracted from\
    \ [RFC3850]:\n   \"When processing certificates, there are many situations where\
    \ the\n   processing might fail.  Because the processing may be done by a user\n\
    \   agent, a security gateway, or other program, there is no single way\n   to\
    \ handle such failures.  Just because the methods to handle the\n   failures have\
    \ not been listed, however, the reader should not assume\n   that they are not\
    \ important.  The opposite is true: if a certificate\n   is not provably valid\
    \ and associated with the message, the processing\n   software should take immediate\
    \ and noticeable steps to inform the end\n   user about it.\n   Some of the many\
    \ situations in which signature and certificate\n   checking might fail include\
    \ the following:\n     No certificate chain leads to a trusted CA\n     No ability\
    \ to check the Certificate Revocation List (CRL) for a\n      certificate\n  \
    \   An invalid CRL was received\n     The CRL being checked is expired\n     The\
    \ certificate is expired\n     The certificate has been revoked\n   There are\
    \ certainly other instances where a certificate may be\n   invalid, and it is\
    \ the responsibility of the processing software to\n   check them all thoroughly,\
    \ and to decide what to do if the check\n   fails.  See RFC 3280 for additional\
    \ information on certificate path\n   validation.\"\n   The push / pull nature\
    \ of ODETTE-FTP means that a party can make an\n   outbound connection from behind\
    \ a firewall to another party and\n   exchange files in both directions.  There\
    \ is no need for both\n   partners to open ports on their firewalls to allow incoming\n\
    \   connections; only one party needs to allow incoming connections.\n   See Section\
    \ 1.7 for a discussion of the benefits of session security\n   [TLS] versus file\
    \ security.\n"
- title: Appendix A.  Virtual File Mapping Example
  contents:
  - "Appendix A.  Virtual File Mapping Example\n   This example demonstrates the mapping\
    \ of a Virtual File into a\n   sequence of ODETTE-FTP Data Exchange Buffers.\n\
    \   Each line in this extract from 'The Rime of the Ancient Mariner' by\n   Coleridge\
    \ [RIME] is separated by CR-LFs in a file that is being\n   transmitted as a T\
    \ format file.\n             It is an ancient Mariner,\n             And he stoppeth\
    \ one of three.\n             \"By thy long grey beard and glittering eye,\n \
    \            Now wherefore stopp'st thou me?\n             \"The Bridegroom's\
    \ doors are opened wide,\n             And I am next of kin;\n             The\
    \ guests are met, the feast is set:\n             May'st hear the merry din.\"\
    \n             He holds him with his skinny hand,\n             \"There was a\
    \ ship,\" quoth he.\n             \"Hold off! unhand me, grey-beard loon!\"\n\
    \             Eftsoons his hand dropt he.\n             He holds him with his\
    \ glittering eye--\n             The Wedding-Guest stood still,\n            \
    \ And listens like a three years; child:\n             The Mariner hath his will.\n\
    \             The Wedding-Guest sat on a stone:\n             He cannot chuse\
    \ but hear;\n             And thus spake on that ancient man,\n             The\
    \ bright-eyed Mariner.\n             The ship was cheered, the harbour cleared,\n\
    \             Merrily did we drop\n             Below the kirk, below the hill,\n\
    \             Below the light-house top.\n   The Exchange Buffers below were built\
    \ from the above.  The top line\n   of each represents the ASCII code, while the\
    \ two lines below give the\n   hexadecimal value.\n   Note that:\n     . The \"\
    D\" at the beginning of each Exchange Buffer is the command\n       code.\n  \
    \   . The \"?\" preceding each subrecord is the header octet (see the\n      \
    \ hexadecimal value).\n     Exchange Buffer 1\n     D?It is an ancient Mariner,..And\
    \ he stoppeth one of three...\"By\n     4347267266266666672467666720046626627767767626662662767662002472\n\
    \     4F9409301E01E395E40D129E52CDA1E4085034F005480FE50F6048255EDA2290\n     t?hy\
    \ long grey beard and glittering eye,..Now wherefore stopp'st\n     7367266662676726667626662666776766626762004672766766676277677277\n\
    \     4F890CFE70725902512401E407C944529E70595CDAEF70785256F25034F00734\n     \
    \ ?thou me?....\"The Bridegroom's doors are opened wide,..And I am\n     2376672663000025662476666766627266677267626766662766620046624266\n\
    \     0F48F50D5FDADA248502294572FFD7304FF2301250F05E5407945CDA1E40901D\n     \
    \ ?next of kin;..The guests are met, the feast is set:..May'st he\n     2366772662666300566267677726762667227662666772672767300467277266\n\
    \     0FE5840F60B9EBDA485075534301250D54C04850651340930354ADAD19734085\n     a?r\
    \ the merry din.\"....He holds him with his skinny hand,..\"Ther\n     6372766266777266622000046266667266627676266727666672666620025667\n\
    \     1F204850D5229049EE2DADA8508FC43089D07948089303B9EE9081E4CDA24852\n     e?\
    \ was a ship,\" quoth he...\"Hold off! unhand me, grey-beard loon\n     6327672627667222776762662002466626662276666626622676726667626666\n\
    \     5F07130103890C2015F48085EDA28FC40F66105E81E40D5C07259D251240CFFE\n     !?\"\
    ..Eftsoons his hand dropt he.....He holds him with his glitte\n     2320046776667266726666267677266200004626666726662767626672666776\n\
    \     1F2DA5643FFE30893081E4042F04085EDADA8508FC43089D07948089307C9445\n     r?ing\
    \ eye--..The Wedding-Guest stood still,..And listens like a\n     7366626762200566256666662476772776662776662004662667766726666262\n\
    \     2F9E70595DDDA485075449E7D75534034FF40349CCCDA1E40C9345E30C9B5010\n     t?hree\
    \ years; child:..The Mariner hath his will.....The Wedding-\n     7367662766773266666300566246766672667626672766620000566256666662\n\
    \     4F8255095123B0389C4ADA4850D129E52081480893079CCEDADA485075449E7D\n     G?uest\
    \ sat on a stone:..He cannot chuse but hear;..And thus spak\n     4376772767266262776663004626666672667762677266673004662767727766\n\
    \     7F553403140FE01034FE5ADA85031EEF4038535025408512BDA1E4048530301B\n     e?\
    \ on that ancient man,..The bright-eyed Mariner.....The ship wa\n     6326627667266666672666200566267666726766246766672000056627667276\n\
    \     5F0FE0481401E395E40D1ECDA4850229784D59540D129E52EDADA48503890071\n     s?\
    \ cheered, the harbour cleared,..Merrily did we drop..Below the\n     7326666766227662667667726666766200467766726662762676700466672766\n\
    \     3F03855254C048508122F5203C51254CDAD5229C90494075042F0DA25CF70485\n     \
    \ .kirk, below the hill,..Below the light-house top...\n     2B667622666672766266662004666727662666672667762767200\n\
    \     03B92BC025CF70485089CCCDA25CF704850C9784D8F53504F0EDA\n"
- title: Appendix B.  ISO 646 Character Subset
  contents:
  - "Appendix B.  ISO 646 Character Subset\n   o-----------------------------------------------------------------o\n\
    \   |            |   7| 0   | 0   | 0   | 0   | 1   | 1   | 1   | 1   |\n   |\
    \            | B -+-----+-----+-----+-----+-----+-----+-----+-----|\n   |    \
    \        | I 6|  0  |  0  |  1  |  1  |  0  |  0  |  1  |  1  |\n   |        \
    \    | T -+-----+-----+-----+-----+-----+-----+-----+-----|\n   |            |\
    \   5|   0 |   1 |   0 |   1 |   0 |   1 |   0 |   1 |\n   |            |----+-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   |            |    |     |     |     |     |     |     |     |     |\n   |\
    \            |    |     |     |     |     |     |     |     |     |\n   |------------|\
    \    |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |\n   |    BIT     |    |\
    \     |     |     |     |     |     |     |     |\n   | 4  3  2  1 |    |    \
    \ |     |     |     |     |     |     |     |\n   |============o====o=====+=====+=====+=====+=====+=====+=====+=====|\n\
    \   | 0  0  0  0 |  0 |     |     | SP  |  0  |     |  P  |     |     |\n   |------------|----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  0  0  1 |  1 |     |     |     |  1  |  A  |  Q  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  0  1  0 |  2 |     |     |     |  2  |  B  |  R  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  0  1  1 |  3 |     |     |     |  3  |  C  |  S  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  0  0 |  4 |     |     |     |  4  |  D  |  T  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  0  1 |  5 |     |     |     |  5  |  E  |  U  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  1  0 |  6 |     |     |  &  |  6  |  F  |  V  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  1  1 |  7 |     |     |     |  7  |  G  |  W  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  0  0 |  8 |     |     |  (  |  8  |  H  |  X  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  0  1 |  9 |     |     |  )  |  9  |  I  |  Y  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  1  0 | 10 |     |     |     |     |  J  |  Z  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  1  1 | 11 |     |     |     |     |  K  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  0  0 | 12 |     |     |     |     |  L  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  0  1 | 13 |     |     |  -  |     |  M  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  1  0 | 14 |     |     |  .  |     |  N  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  1  1 | 15 |     |     |  /  |     |  O  |     |     |     |\n   o-----------------------------------------------------------------o\n"
- title: Appendix C.  X.25 Specific Information
  contents:
  - "Appendix C.  X.25 Specific Information\n   The International Organization for\
    \ Standardization (ISO) Open Systems\n   Interconnection (OSI) model is the basis\
    \ for ODETTE-FTP.\n   ODETTE-FTP covers levels 4 to 7, and originally CCITT X.25\
    \ was the\n   only recommended telecommunication protocol for OSI's layers 1,\
    \ 2, 3.\n    ISO Reference Model:\n          +------------------------------+\
    \  <====  File Service\n          | Level-7  FTP    application  |\n         \
    \ |------------------------------|\n          | Level-6  FTP    presentation |\n\
    \          |------------------------------|\n          | Level-5  FTP    session\
    \      |\n          |------------------------------|\n          | Level-4  FTP\
    \    transport    |\n          |------------------------------|  <====  Network\
    \ Service\n          | Level-3         X.25         |\n          |------------------------------|\n\
    \          | Level-2         X.25         |\n          |------------------------------|\n\
    \          | Level-1         X.25         |\n          +------------------------------+\n"
- title: C.1.  X.25 Addressing Restrictions
  contents:
  - "C.1.  X.25 Addressing Restrictions\n   When an X.25 call is made over a PSDN,\
    \ the Network User Address (NUA)\n   of the destination must be specified in order\
    \ that the PTT may route\n   the call.  The call placed is directed to the termination\
    \ equipment\n   upon the user's premises.\n   It is possible to provide extra\
    \ information in the Call Request\n   Packet in addition to the mandatory NUA\
    \ required by the PTT.\n   This extra information may be of 2 kinds:\n    (a)\
    \ A subaddress:\n       It is simply an extension to the address and it is put\
    \ into the\n       called address field of the Call Request Packet.  This\n  \
    \     information (Address + Subaddress) is taken from the destination\n     \
    \  address field of the F_CONNECT_RQ; therefore, from the user's\n       point\
    \ of view, there is no distinction between the main address\n       and subaddress\
    \ parts.\n    (b) User data:\n       There is no standard for user data.  Moreover,\
    \ there is no\n       information in the F_CONNECT_RQ from which the ODETTE-entity\
    \ may\n       derive user data to be put in the N_CONNECT_RQ; therefore, user\n\
    \       data shall not be used.\n"
- title: C.2.  Special Logic
  contents:
  - "C.2.  Special Logic\n   The SSID field SSIDSPEC specifies whether special logic\
    \ must be\n   applied (Y (yes) or N (no)) to the Data Exchange Buffer before the\n\
    \   ODETTE-FTP moves the data into the NSDU (Network Service Data Unit)\n   and\
    \ passes control to the Network Service.\n"
- title: C.2.1.  When Special Logic Is Not To Be Used
  contents:
  - "C.2.1.  When Special Logic Is Not To Be Used\n   This logic is not applied to\
    \ SSRM and SSID commands.\n"
- title: C.2.2.  The Need for "Enveloping" Exchange Buffers
  contents:
  - "C.2.2.  The Need for \"Enveloping\" Exchange Buffers\n   The \"special-logic\"\
    \ parameter was created in order to allow the use\n   of ODETTE-FTP over asynchronous\
    \ links.  The \"special-logic\" could be\n   needed to enable terminals to access\
    \ an X.25 network via an\n   asynchronous entry (through a PAD: Packet Assembly\
    \ / Disassembly).\n   The \"special-logic\" is not needed in case of a whole X.25\
    \ connection.\n   This \"special-logic\" realises a CRC function in order to detect\n\
    \   errors due to the asynchronous medium.\n   Negotiation of the \"special-logic\"\
    \ parameter in the SSID command is\n   as follows:\n           SSID          \
    \                             SSID\n           -----------------------------------------------\n\
    \           special-logic=yes --------------------->\n              <------------------------------------\
    \   special-logic=yes\n                                                  or\n\
    \              <------------------------------------   special-logic=no\n    \
    \       special-logic=no ---------------------->\n              <------------------------------------\
    \   special-logic=no\n   This logic is activated when the \"special-logic\" parameter\
    \ in the\n   SSID specifies Y (yes).\n   Special logic processing, when activated,\
    \ will function within level\n   4 of the OSI model.\n          +------------------------------+\
    \  <====  File Service\n          | Level-7  FTP    application  |\n         \
    \ |------------------------------|\n          | Level-6  FTP    presentation |\n\
    \          |------------------------------|\n          | Level-5  FTP    session\
    \      |\n          |------------------------------|\n          | Level-4  FTP\
    \    transport    |\n          |  SPECIAL LOGIC PROCESSING    |\n          |------------------------------|\
    \  <====  Network Service\n          | Level-3         X.25         |\n      \
    \    |------------------------------|\n          | Level-2         X.25      \
    \   |\n          |------------------------------|\n          | Level-1       \
    \  X.25         |\n          +------------------------------+\n"
- title: C.2.3.  Responsibilities of Special Logic
  contents:
  - "C.2.3.  Responsibilities of Special Logic\n   When transmitting an Exchange Buffer\
    \ and special logic is active,\n   layer 4 will wrap the Exchange Buffer in synchronization\
    \ and\n   delineation characters, then protect the data integrity by means of\
    \ a\n   block checksum (BCS).  When receiving an Exchange Buffer and special\n\
    \   logic is active, layer 4 will remove such things as synchronization\n   and\
    \ delineation characters, etc., before passing the Exchange Buffer\n   to the\
    \ higher layers.\n"
- title: C.2.4.  Extended Exchange Buffer Format
  contents:
  - "C.2.4.  Extended Exchange Buffer Format\n   Each envelope has a 1-byte header\
    \ prefixed to it, and a 2-byte\n   checksum appended to the end.  The checksum\
    \ is derived in a manner\n   specified in the ISO DIS 8073 TRANSPORT LAYER documentation.\n\
    \   The layout of the data buffer will be structured as follows:\n   +------------------------------------------------------------------+\n\
    \   | S | B |                                                  | B | C |\n   |\
    \ T | S |         COMPLETE EXCHANGE BUFFER (CEB)           | C | / |\n   | X |\
    \ N |                                                  | S | R |\n   +------------------------------------------------------------------+\n\
    \     A   A                                                      A   A\n     |\
    \   |                                                      |   |\n     |   +-------------\
    \  Block sequence number                  |   |\n     |                      \
    \                                    |   |\n     +-----------------  Synchronization\
    \ character              |   |\n                                             \
    \                   |   |\n                         Block checksum  -----------------------+\
    \   |\n                                                                    |\n\
    \                         Delineation character  --------------------+\n   The\
    \ envelope is initialised with an STX and the checksum variables\n   are set to\
    \ 0.  The leading STX is not protected by the checksum\n   calculation but is\
    \ explicitly protected by a character compare at the\n   receiver's end.  The\
    \ Exchange Buffer is processed character by\n   character.  As each character\
    \ is removed from the Exchange Buffer, it\n   is put through the checksum calculation\
    \ and then, prior to its\n   insertion in the envelope, it is put through the\
    \ Shift-out\n   transparency logic, which will result in either one or two characters\n\
    \   being inserted.  When the contents of the Exchange Buffer have been\n   entirely\
    \ processed, then the checksum variables are brought up to\n   date by inserting\
    \ two X'00's through the checksum calculator and the\n   two resultant checksum\
    \ characters forwarded to the Shift-out\n   transparency logic for insertion into\
    \ the envelope.  Finally, a\n   carriage return (CR) is appended to the envelope.\
    \  The segment is now\n   ready for transmission to line.\n   Upon receipt of\
    \ a valid envelope that has the correct sequence\n   number, the host should increment\
    \ his sequence number register ready\n   for the next transmission.\n   The receiver\
    \ will initialise his receiving buffer area upon receipt\n   of an STX character,\
    \ place the STX at the beginning of the buffer,\n   and reset checksum variables.\
    \  All subsequent characters are\n   processed using Shift-out logic before they\
    \ are inserted into the\n   buffer, at which point they will NOT be processed\
    \ by the checksum\n   calculator, although the character following the Shift-out\
    \ (after\n   subtracting X'20') will be.  The checksum characters themselves will\n\
    \   be processed by the checksum calculator by virtue of the design of\n   the\
    \ checksum algorithm.\n"
- title: C.2.5.  Error recovery
  contents:
  - 'C.2.5.  Error recovery

    '
- title: C.2.5.1.  Mechanism
  contents:
  - "C.2.5.1.  Mechanism\n   The error correction scheme is implemented by the definition\
    \ of three\n   timers and the use of an ASCII NAK (Negative Acknowledgement)\n\
    \   character followed by a C/R.  The <NAK><C/R> will flow between the\n   two\
    \ session partners, but only as a consequence of previous bad data.\n   A user\
    \ of the error recovery correcting extension must always work\n   with a credit\
    \ value of 1.  This can be forced upon any session\n   partner at SSID negotiation.\
    \  The effect will be to force a simple\n   half-duplex flip-flop protocol.\n\
    \   Upon receipt of a bad block, send <NAK><C/R> to the session partner.\n   Upon\
    \ receipt of a <NAK><C/R>, a session partner should retransmit the\n   last block\
    \ in its entirety.\n"
- title: C.2.5.2.  Timers
  contents:
  - "C.2.5.2.  Timers\n   The majority of error conditions will be detected by a bad\
    \ BCS\n   sequence.  However, certain conditions cannot be so detected.  For\n\
    \   example, a corrupt C/R will mean that the receiver will not know that\n  \
    \ the end of a block has been reached.  No matter how long he waits, no\n   more\
    \ data will come from the sender.  Thus, a timer is the only way\n   to detect\
    \ this type of corruption.  There are three timers needed to\n   detect all possible\
    \ malignant conditions of this type.\n     T1 - Exchange Buffer Time Out (Inactivity\
    \ or Response)\n     T2 - Inter Character Time Out\n     T3 - Data Carrier Detect\
    \ Loss Time Out\n   The three timers are in addition to the timer defined in the\
    \ original\n   protocol.\n    TIMER T1 - RESPONSE TIME OUT (DEFAULT = 45 SECONDS):\n\
    \     Used to detect a high-level block Time Out, e.g., the Time Out\n     between\
    \ an SFID and its associated SFPA or SFNA response.\n      Started - It is started\
    \ after the last character of an exchange\n                buffer has been sent\
    \ to the line.\n      Stopped - It is stopped when an STX has been received.\n\
    \      Expiry  - Retransmit the whole block again, until such time as the\n  \
    \              retry limit has been reached.\n    TIMER T2 - INTER CHARACTER TIME\
    \ OUT (DEFAULT = 7 SECONDS):\n     Used to detect errors in the reception of individual\
    \ characters.\n      Started - For an asynchronous entity, it is started upon\
    \ receipt\n                of each character while in synchronisation mode.  For\
    \ an\n                X.25 entity, it is started after a received block that\n\
    \                did not terminate an Exchange Buffer.\n      Stopped - Upon receipt\
    \ of the next character.\n      Expiry  - Send a <NAK><C/R>, drop out of synchronised\
    \ mode, and go\n                back and listen to line.\n    TIMER T3 - DATA\
    \ CARRIER TEMPORARY LOSS (DEFAULT = 1 SECOND):\n     Used by an asynchronous entity\
    \ only and is used to detect a\n     temporary carrier failure.\n      Started\
    \ - When DCD (Data Carrier Detect) is lost.\n      Stopped - When DCD is regained.\n\
    \      Expiry  - Disconnect the session.\n"
- title: C.2.5.3.  Types of Error
  contents:
  - "C.2.5.3.  Types of Error\n   Data corruption when it occurs can be categorised\
    \ in one of five\n   ways:\n   (1) CORRUPT STX (START OF TEXT)\n    In this situation\
    \ the STX is not seen and synchronisation is not\n    achieved.  The terminating\
    \ C/R is received out of synchronisation\n    and hence the block is not seen\
    \ by the receiver.  A <NAK><C/R> is\n    transmitted to the sender to indicate\
    \ this.  The sender should then\n    retransmit the last block (each implementation\
    \ will need to set a\n    retry limit to be used for the number of consecutive\
    \ times it\n    attempts to retransmit a block -- a default limit of 5 is\n  \
    \  recommended).  All data received outside synchronisation (except\n    <NAK><C/R>)\
    \ are ignored.\n        (A)                                    (B)\n    Dropped\
    \ Start of Text (STX)\n          +-------------------------+\n          |   |\
    \ B |         | B | C |\n     -----|   | S |  CEB    | C | / |----->  Not sync\n\
    \          |   | N |         | S | R |\n          +-------------------------+\n\
    \                   +-------+\n                   | N | C |\n             <-----|\
    \ A | / |-----            Not sync\n                   | K | R |\n           \
    \        +-------+\n    Exchange Buffer Resent\n          +-------------------------+\n\
    \          | S | B |         | B | C |\n     -----| T | S |  CEB    | C | / |----->\
    \  Sync\n          | X | N |         | S | R |\n          +-------------------------+\n\
    \   (2) CORRUPT TERMINATION (C/R)\n    This situation manifests itself as an extended\
    \ period of\n    synchronisation with no activity.  The T2 timer will detect this\n\
    \    condition.\n        (A)                                    (B)\n    Corrupt\
    \ Carriage Return\n          +-------------------------+\n          | S | B |\
    \         | B |   |\n     -----| T | S |  CEB    | C |   |----->  No activity\n\
    \          | X | N |         | S |   |\n          +-------------------------+\n\
    \                   +-------+\n                   | N | C |                 T2\n\
    \             <-----| A | / |-----            Timed out\n                   |\
    \ K | R |\n                   +-------+\n    Exchange Buffer Resent\n        \
    \  +-------------------------+\n          | S | B |         | B | C |\n     -----|\
    \ T | S |  CEB    | C | / |----->  Sync\n          | X | N |         | S | R |\n\
    \          +-------------------------+\n   (3) BAD DATA\n   (4) BAD BCS (BLOCK\
    \ CHECK SUM)\n    In this situation, the receiver is unable to tell whether the\
    \ error\n    is bad data or bad BCS.  In either case, the response is to discard\n\
    \    the Exchange Buffer and send a <NAK><C/R>.\n        (A)                 \
    \                   (B)\n    Bad Data/BCS\n          +-------------------------+\n\
    \          | S | B |         | B | C |        Bad data\n     -----| T | S |  \"\
    %!    | C | / |----->  detected\n          | X | N |         | S | R |\n     \
    \     +-------------------------+\n                   +-------+\n            \
    \       | N | C |\n             <-----| A | / |-----            Discard Block\n\
    \                   | K | R |\n                   +-------+\n    Exchange Buffer\
    \ Resent\n          +-------------------------+\n          | S | B |         |\
    \ B | C |\n     -----| T | S |  CEB    | C | / |----->  Data OK\n          | X\
    \ | N |         | S | R |\n          +-------------------------+\n   (5) BAD BLOCK\
    \ SEQUENCE NUMBER (BSN)\n    A circular sequential number (0 up to and including\
    \ 9) is assigned\n    to transmitted Exchange Buffers.  This is to aid detection\
    \ of\n    duplicate or out-of-sequence Exchange Buffers.  Once a duplicate\n \
    \   block is detected, the Exchange Buffer in question is discarded.\n    Once\
    \ an out of sequence block is detected, this should result in a\n    protocol\
    \ violation.\n    Example protocol sequence:\n        (A)                    \
    \                (B)\n    Exchange Buffer Being Sent\n          +-------------------------+\n\
    \          | S |   |         | B | C |        Expecting\n     -----| T | 0 | \
    \ EERP   | C | / |----->  BSN=0\n          | X |   |         | S | R |       \
    \ Transmission\n          +-------------------------+\n    Exchange Buffer Being\
    \ Sent\n          +-------------------------+\n          | S |   |         | B\
    \ | C |        Response to\n     <----| T | 0 |  RTR    | C | / |-----   Previous\n\
    \          | X |   |         | S | R |        Block\n          +-------------------------+\n\
    \    Exchange Buffer Being Sent\n          +-------------------------+       \
    \ Expecting\n          | S |   |         | B | C |        BSN=1 (Block\n     -----|\
    \ T | 1 |  SFID   | C | / |- // -> lost in\n          | X |   |         | S |\
    \ R |        Transmission)\n          +-------------------------+        T1 Timed\
    \ Out\n    Exchange Buffer Being Sent\n          +-------------------------+\n\
    \          | S |   |         | B | C |        Send last\n     <----| T | 0 | \
    \ RTR    | C | / |-----   Block\n          | X |   |         | S | R |       \
    \ again\n          +-------------------------+\n    Discard Block\n    and start\n\
    \    Timer T1\n    T1 Timed Out\n    Exchange Buffer Resent\n          +-------------------------+\n\
    \          | S |   |         | B | C |        Expecting\n     -----| T | 1 | \
    \ SFID   | C | / |----->  BSN=1\n          | X |   |         | S | R |       \
    \ Block OK\n          +-------------------------+\n    Exchange Buffer Being Sent\n\
    \          +-------------------------+\n          | S |   |         | B | C |\
    \        Response\n     <----| T | 1 |  SFPA   | C | / |-----   BSN=1\n      \
    \    | X |   |         | S | R |        Block OK\n          +-------------------------+\n\
    \    Exchange Buffer Being Sent\n          +-------------------------+\n     \
    \     | S |   |         | B | C |\n     -----| T | 2 |  DATA   | C | / |----->\
    \  Data OK\n          | X |   |         | S | R |\n          +-------------------------+\n\
    \   Note: A credit value of 1 must be used to guarantee half-duplex\n   flip-flop.\n"
- title: C.2.6.  Sequence of Events for Special Logic Processing
  contents:
  - "C.2.6.  Sequence of Events for Special Logic Processing\n   The following functions\
    \ will be executed in sequence:\n   1. Calculation of the Block Sequence Number\
    \ (BSN):\n      BSN is set to zero by SSID.  First block will be sent with value\n\
    \      zero.  Value of BSN is increased by one for each data buffer to be\n  \
    \    transmitted.  When BSN value exceeds 9, counter will be reset to\n      zero.\n\
    \      Format: numeric/1 pos.\n   2. Calculation of the Block Checksum (BCS):\n\
    \      Calculation is done as specified in the ISO DIS 8073 TRANSPORT\n      LAYER\
    \ document.\n      Format: binary/2 pos.\n   3. Shift-out transparency  (See TRANSMIT/RECEIVE\
    \ logic.)\n      To avoid appearance of any control characters in the data stream,\n\
    \      all the characters of the extended Exchange Buffer (with exception\n  \
    \    of the STX and carriage return characters enveloping the buffer)\n      are\
    \ put through a Shift-out logic, which result in a character\n      being inserted\
    \ (SO) and adding hex value '20' to the control\n      character.\n   4. The carriage\
    \ return is inserted at the end of the data buffer.\n   Note: After adding STX,\
    \ BSN, BCS, CR, and SO-logic, the data buffer\n         may exceed the Data Exchange\
    \ Buffer size.\n"
- title: C.2.7.  Checksum Creation Algorithm
  contents:
  - "C.2.7.  Checksum Creation Algorithm\n   These follow the ISO DIS 8073 TRANSPORT\
    \ LAYER standard.\n    SYMBOLS:\n     The following symbols are used:\n     C0,C1\
    \   Variables used in the algorithm\n     L       Length of the complete NSDU\n\
    \     X       Value of the first octet of the checksum parameter\n     Y     \
    \  Value of the second octet of the checksum parameter\n    ARITHMETIC CONVENTIONS:\n\
    \     Addition is performed in one of the two following modes:\n       a) modulo\
    \ 255 arithmetic\n       b) one's complement arithmetic in which if any of the\
    \ variables\n          has the value minus zero (i.e., 255) it shall be regarded\
    \ as\n          though if was plus zero (i.e., 0).\n    ALGORITHM FOR GENERATING\
    \ CHECKSUM PARAMETERS:\n     . Set up the complete NSDU with the value of the\
    \ checksum parameter\n       field set to zero.\n     . Initialise C0 and C1 to\
    \ zero.\n     . Process each octet sequentially from i=1 to L by\n         a)\
    \ adding the value of the octet to C0, then\n         b) adding the value of C0\
    \ to C1.\n     . Calculate X and Y such that\n            X = C0 - C1\n      \
    \      Y = C1 - 2*C0\n     . Place the values X and Y in the checksum bytes 1\
    \ and 2,\n       respectively.\n"
- title: C.2.8.  Algorithm for checking checksum parameters
  contents:
  - "C.2.8.  Algorithm for checking checksum parameters\n     . Initialise parameters\
    \ C0 and C1 to zero.\n     . Process each octet of NSDU sequentially from i=1\
    \ to L by\n         a) adding the value of the octet to C0, then\n         b)\
    \ adding the value of C0 to C1.\n     . If, when all the octets have been processed,\
    \ either or both C0\n       and C1 does not have the value zero, then the checksum\
    \ formulas\n       have not been satisfied.\n     Note that the nature of the\
    \ algorithm is such that it is not\n     necessary to compare explicitly the stored\
    \ checksum bytes.\n"
- title: C.2.9.  Shift-out Processing
  contents:
  - "C.2.9.  Shift-out Processing\n       (Transparency for all control characters)\n\
    \    TRANSMIT LOGIC  (values SO: X'0E' or X'8E')\n     Buffer(1), ... , (n) is\
    \ a character in the buffer to be sent.\n     FOR i=1 to n                   \
    \ /* for all octets of the buffer */\n         IF    ((buffer(i)  &  X'7F')  <\
    \  X'20')\n         THEN  output (SO)\n               output (buffer(i)  +  X'20')\n\
    \         ELSE  output (buffer(i))\n     NEXT:\n    RECEIVE  LOGIC  (values SO:\
    \ X'0E' or X'8E')\n     Buffer(1), ... , (n) is a character in the received buffer.\n\
    \     drop = false\n     FOR i=1 to n                    /* for all octets of\
    \ the buffer */\n         IF    drop = true\n         THEN  output (buffer(i)\
    \  -  X'20')\n               drop = false\n         ELSE  IF    buffer(i) = (X'0D'\
    \  or  X'8D')\n               THEN  Stop\n               ELSE  IF    buffer(i)\
    \ = SO\n                     THEN  drop = true\n                     ELSE  output\
    \ (buffer(i))\n     NEXT:\n"
- title: C.3.  PAD Parameter Profile
  contents:
  - "C.3.  PAD Parameter Profile\n   Before an (ODETTE-FTP) asynchronous entity -->\
    \ Modem --> PAD -->\n   (ODETTE-FTP) native X.25 link can be established, the\
    \ target PAD\n   parameters must be set such that correct communication is\n \
    \  established.  It is strongly recommended that the PAD parameters are\n   set\
    \ by the X.25 entity.  CCITT recommendations X.3, X.28, and X.29\n   define the\
    \ PAD parameters and procedures for exchange of control\n   information and user\
    \ data between a PAD and a packet mode Data\n   Terminal Equipment (DTE).\n  \
    \ Following is the Parameter list and values used to set the PAD for\n   ODETTE-FTP\
    \ communication.  For further detailed information see the\n   specification for\
    \ CCITT X.25, X.28, X.29 and X.3.\n   No. Description                    Value\
    \  Meaning\n   ---------------------------------------------------------------\n\
    \   1   Escape from Data Transfer       0     Controlled by host\n   2   Echo\
    \                            0     No Echo\n   3   Data Forwarding Signal    \
    \      2     Carriage Return\n   4   Selection of Idle Timer Delay   20    1 second\n\
    \   5   Ancillary Device Control        0     X-ON, X-OFF not used\n   6   PAD\
    \ Service Signals             1     All except prompt\n   7   Procedure on Break\
    \              2     Reset\n   8   Discard Output                  0     Do not\
    \ discard\n   9   Padding after Carriage Return   0     No padding\n   10  Line\
    \ Folding                    0     No line folding\n   11  Terminal Data Rate\
    \              -     Read only\n   12  Flow Control of the PAD         0     No\
    \ flow control used\n   13  Linefeed Insertion after C/R    0     No linefeed\n\
    \   14  Linefeed Padding                0     No linefeed padding\n   15  Editing\
    \                         0     No editing\n   16  Character Delete          \
    \      127   Delete\n   17  Line Delete                     24    <CTRL>X\n  \
    \ 18  Line Display                    18    <CTRL>R\n   19  Editing PAD Service\
    \ Signals     0     No service signal\n   20  Echo Mask                      \
    \ 0     No echo mask\n   21  Parity Treatment                0     No parity check\n\
    \   22  Page Wait                       0     No page wait\n   Note 1:\n   Refer\
    \ to CCITT (1984)\n   - Parameters 1 - 12 are mandatory and available internationally.\n\
    \   - Parameters 13 - 22 may be available on certain networks and may\n     also\
    \ be available internationally.\n   - A parameter value may be mandatory or optional.\n\
    \   The ODETTE profile refers only to parameter values which must be\n   internationally\
    \ implemented if the parameter is made available\n   internationally.\n   The\
    \ ODETTE-FTP \"special-logic\" parameter may be impossible on some\n   PADs because\
    \ they do not support of some of the parameters (13 - 22).\n   (If the PAD is\
    \ supporting parity check (21) by default, ODETTE-FTP\n   special logic would\
    \ be impossible.)\n   It is a user responsibility to ensure special logic consistency\
    \ when\n   making the PAD subscription.\n   Note 2:\n   Some parameters may have\
    \ to be set differently depending on:\n   - Make and function of the start-stop\
    \ mode DTE entity.\n   - Start-stop mode DTE entity ODETTE-FTP monitor function.\n\
    \   - PAD services implemented.\n   - Packet mode DTE entity ODETTE-FTP monitor\
    \ function.\n"
- title: Appendix D.  OFTP X.25 over ISDN Recommendation
  contents:
  - "Appendix D.  OFTP X.25 over ISDN Recommendation\n   This appendix describes the\
    \ recommendation of ODETTE Group 4 (1) for\n   the use of OFTP (2) over X.25 over\
    \ ISDN.\n      (1) ODETTE Group 4 is responsible for the specification of\n  \
    \        Telecommunications standards and recommendations for use\n          within\
    \ the Automotive Industry.\n      (2) OFTP (ODETTE File Transfer Protocol) is\
    \ the communications\n          standard specified by ODETTE Group 4 designed\
    \ for the transfer\n          of both EDI and non-EDI data.\n   This document\
    \ offers an introductory overview of a technical subject.\n   It is structured\
    \ to contain the ODETTE recommendation, together with\n   introductory information\
    \ for the person not familiar with ISDN, and\n   notes on the issues associated\
    \ with the implementation of the\n   recommendation.\n   The first section provides\
    \ the detailed ODETTE recommendation, which\n   is followed by a general discussion.\
    \  If you are not familiar with\n   the terminology, please read the subsequent\
    \ sections first.\n   How far an existing X.25 Line adapter may be replaced by\
    \ an ISDN line\n   adapter in an installation depends on the opportunities in\
    \ view of\n   connections (X.25 or ISDN) of the involved partners for file\n \
    \  transfer.\n   Companies that keep many connections to external partners (for\n\
    \   example, car manufacturing companies) may use the OFTP file transfer\n   in\
    \ view of compatibility, which must always be considered anyway only\n   in parallel\
    \ to the X.25 network.\n   It is not the aim of this recommendation to remove\
    \ the OFTP file\n   transfer generally from the X.25 network to the ISDN network.\
    \  This\n   will not always be possible for international connections because\
    \ of\n   technical reasons, and this does not always make sense for\n   connections\
    \ with a low size of data to be transmitted.\n   Certainly, the use of ISDN, when\
    \ exchanging a high volume of data\n   (for example, CAD/CAM files), is very much\
    \ cheaper than the use of an\n   X.25 network.  For such cases, this recommendation\
    \ shall provide a\n   cost-effective possibility for file transfer.\n   This appendix\
    \ is organized as follows.  D.1 defines the ODETTE\n   recommendation in these\
    \ terms, D.2 introduces the ISDN environment to\n   the unfamiliar reader, D.3\
    \ describes the various methods of\n   connecting to ISDN, and D.4 covers implementation\
    \ issues.\n"
- title: D.1.  ODETTE ISDN Recommendation
  contents:
  - "D.1.  ODETTE ISDN Recommendation\n   X.25:               Level 2          ISO\
    \ 7776\n                       Protocol\n                       Level 3      \
    \    ISO 8208\n                       Protocol\n                       Packet\
    \ Size      128\n                       Level 2          7\n                 \
    \      Window Size\n                       Level 3          7\n              \
    \         Window Size\n                       First LCN        1\n           \
    \            Number of LCNs   1\n                       Facilities       Window\
    \ Size and Packet Size\n                                        negotiation shall\
    \ be supported\n                                        by everybody.  Call User\
    \ Data\n                                        should not be required.\n    \
    \                   Calling NUA      Optionally provided by the call\n       \
    \                                 initiator.\n                       Called NUA\
    \       Should be set to a value where\n                                     \
    \   the last 'n' digits can be\n                                        specified\
    \ by the called party.\n   ISDN:               Apart from requesting a 64K unrestricted\
    \ digital\n                       call, no ISDN features shall be required.\n\
    \   Timeout control:    To avoid connections (B channels) within the\n       \
    \                circuit-switched ISDN network remaining active\n            \
    \           but unused for a long time, the adapter should\n                 \
    \      include a timeout control.\n                       An ISDN connection (B\
    \ channel) should be released\n                       if no X.25 packets have\
    \ been transmitted on this\n                       connection for a longer time.\
    \  For flexibility a\n                       variable user definable timer should\
    \ be\n                       incorporated into the adapter.\n                \
    \       In the event of a timeout situation the adapter\n                    \
    \   has to release the ISDN connection and notify the\n                      \
    \ local OFTP by the transmission of a clear packet.\n   The pages that follow\
    \ are informational and do not form part of this\n   recommendation.\n"
- title: D.2.  Introduction to ISDN
  contents:
  - "D.2.  Introduction to ISDN\n   The use of digital encoding techniques over such\
    \ high-quality,\n   error-free backbone networks has allowed the PTTs to offer\
    \ high\n   bandwidths to the end user.  The service is named ISDN (Integrated\n\
    \   Services Digital Network).\n   The increasing need to transfer larger volumes\
    \ of EDI data, in\n   particular CAD/CAM drawings, has focused attention upon\
    \ high-speed,\n   low-cost communication.  The traditional X.25 over a Packet\
    \ Switched\n   Data Network (PSDN) has been a good general purpose communications\n\
    \   subsystem.  Unfortunately, its cost and transfer speed make PSDN\n   expensive\
    \ for the new requirement.\n   X.25 over the new ISDN provides both the transfer\
    \ speed and cost\n   benefits to satisfy the new requirements.\n   We include\
    \ the following terminology because for us to make sense of\n   ISDN and X.25,\
    \ it is important that we use definitions precisely and\n   avoid the abuses of\
    \ the past.\n   ISDN:        Integrated Services Digital Network\n   X.25:   \
    \     X.25 is a communications protocol.  It defines the\n                structure\
    \ of data packets that comprise the protocol and\n                the manner in\
    \ which they are used.\n   PSDN:        A PSDN (Packet Switched Data Network)\
    \ is a network over\n                which the X.25 protocol is operated.\n  \
    \ PSPDN:       A PSPDN (Packet Switched Public Data Network) is a PSDN\n     \
    \           operated by the PTTs.  PSPDNs are given trade names,\n           \
    \     such as PSS in the UK, Datex-P in Germany, and Transpac\n              \
    \  in France.\n   BRI:         Basic Rate Interface, also known as Basic Rate\
    \ Access,\n                defines an ISDN facility with 2 x 64 K B channels.\n\
    \   PRI:         Primary Rate Interface, also known as Primary Rate\n        \
    \        Access, defines an ISDN facility with 30 x 64 K B\n                channels.\n\
    \   Channels:    ISDN is typically brought into a consumer's premises\n      \
    \          using a twisted pair of wire.  Over this wire, data can\n         \
    \       be transmitted in frequency bands.  These frequency\n                bands\
    \ are allocated as channels.\n   B channels:  The B channels are the data channels\
    \ and operate at 64\n                Kb.  The two end users of a connection will\
    \ communicate\n                over a B channel.\n   D channel:   Signalling on\
    \ ISDN is performed over the D channel.\n                Signalling is used to\
    \ set up and release connections on\n                the B channels.  In some\
    \ countries, the D channel can\n                also be used for limited X.25\
    \ access to the PTTs' PSDN.\n                The D channel operates at the lower\
    \ speed of 16 Kb as it\n                is normally used only at the beginning\
    \ and end of a\n                connection.\n                                \
    \         Bandwidth Allocation:\n                     2 Wire                 B2\
    \ - 64 Kb\n                     Twisted Pair           B1 - 64 Kb\n          \
    \                               D Channel - 16 Kb\n                The standard\
    \ for the operation of the D channel is\n                called ETSI and is used\
    \ in most European countries.\n                However, some countries that started\
    \ the introduction\n                very early used proprietary standards, for\
    \ example:\n                     1TR6 - Used in Germany\n                    \
    \ BTNR - Used in the UK\n                Although there are D channel variations,\
    \ this will not\n                affect communications over the B channels as\
    \ the\n                communication over the D channel is between the\n     \
    \           subscriber and the ISDN service provider.\n                However,\
    \ the consumer's equipment must be able to handle\n                the channel\
    \ D signalling operated by the ISDN service\n                provider and so there\
    \ may be a problem of equipment\n                availability and certification.\n\
    \                All the PTTs have committed to migrate to ETSI (also\n      \
    \          known as EURO-ISDN and Q.931) and many are currently\n            \
    \    supporting both their national variant and ETSI.  It is\n               \
    \ advisable that in this situation the subscriber select\n                the\
    \ ETSI variant to avoid unnecessary equipment\n                obsolescence.\n\
    \   Services:    The high-speed service is provided in two forms, Basic\n    \
    \            and Primary.\n                Basic: 2+D, the D 2B channel operates\
    \ at 16 Kb.  The\n                Basic Rate access is normally provided to the\
    \ subscriber\n                over simple twisted pair cable.\n              \
    \  Primary: 30B+D, the D channel operates at 64 Kb.\n                Primary Rate\
    \ access is normally provided to the\n                subscriber over shielded\
    \ coaxial cable.  Note that the\n                bandwidth for Primary is 2.048\
    \ Mbit/s.\n   Protocols:   The B channel is a binary channel and is transparent\
    \ to\n                the flow of data.  Therefore, all of the currently\n   \
    \             available protocols can operate over a B channel.  The\n       \
    \         most common protocol is X.25.\n   X.25:        The X.25 protocol is\
    \ a primary protocol for open\n                computer-to-computer communication.\n\
    \   Passive Bus: It is possible to have an ISDN service enter a building\n   \
    \             and then have an 8-core cable laid within the building\n       \
    \         with multiple ISDN junction points, in the same way as\n           \
    \     one would have multiple telephone points (extensions)\n                for\
    \ a particular external telephone line.\n   Connection Setup\n      The adapter\
    \ is responsible for analysing the outgoing X.25 call\n      request and making\
    \ an ISDN call to a derived ISDN address,\n      establishing a new X.25 level-2\
    \ and level-3, and then propagating\n      the X.25 Call Request Packet.\n   Connection\
    \ Termination\n      The termination phase of the X.25 call is made with a Clear\n\
    \      Request and finalised with a Clear Confirmation.  The recipient of\n  \
    \    the Clear Confirm should then close down the ISDN connection.\n      The\
    \ clear down of the ISDN connection should only be made if there\n      are no\
    \ other Switched Virtual Circuits (SVCs) active on the ISDN\n      connection;\
    \ note that the usage of multiple simultaneous SVCs is\n      only by virtue of\
    \ bilateral agreement.\n"
- title: D.3.  Equipment Types
  contents:
  - "D.3.  Equipment Types\n   There are a number of ways in which ISDN/X.25 access\
    \ can be made.\n      Integrated Adapter\n       This is normally a PC-based ISDN\
    \ adapter inside a PC.  It is\n       normal in such an environment that the OFTP\
    \ application has the\n       ability to manipulate the ISDN and X.25 aspects\
    \ of the session\n       independently and therefore have complete control.\n\
    \       Equally important is that the speed of communication between the\n   \
    \    adapter and the application are at PC BUS speeds.  It is\n       therefore\
    \ more likely that the effective transmission speed will\n       be nearer the\
    \ 64K limit.\n       The other benefit of such a direct linkage is that both 64K\
    \ B\n       channels may be used in parallel and both able to operate at\n   \
    \    64Kb.\n      Elementary Terminal Adapter\n       In this scenario, the computer\
    \ has an integral X.25 adapter\n       communicating X.21 with a Terminal Adapter\
    \ that fronts the ISDN\n       network.  This allows a host with a X.25 capability\
    \ to interface\n       to ISDN, normally on a one-to-one basis.\n       The interface\
    \ between the Terminal Adapter and the PC will\n       typically only support\
    \ one 64K B channel.  This is obviously an\n       inefficient usage of the ISDN\
    \ service.\n       Because the linkage between the computer and the Terminal Adapter\n\
    \       is only X.25, then some modification/configuration may be needed\n   \
    \    inside the Terminal Adapter when new users are added.\n      X.25 Switch\n\
    \       This solution is normally found inside the larger corporates\n       where\
    \ an internal X.25 network is operated or where dual X.25 and\n       ISDN is\
    \ required.\n       The main benefit of a switch is to support both PSDN and ISDN\n\
    \       simultaneously.  Also, multiple X.21 lines may be implemented\n      \
    \ between the X.25 switch and the computer.\n       This solution normally requires\
    \ more effort to configure and may\n       require obligations to be placed upon\
    \ how incoming callers\n       specify routing.\n"
- title: D.4.  Implementation
  contents:
  - "D.4.  Implementation\n   The adoption of ISDN as an additional subsystem to support\
    \ OFTP\n   communications has associated implementation problems, which can be\n\
    \   categorised as below:\n      X.25/ISDN Addressing\n      Making a Call\n \
    \     Receiving a Call\n      Logical Channel Assignment\n      Facilities Negotiation\n\
    \      ISDN Call Attributes\n      Homologation Issues\n      Growth\n      Performance\n"
- title: D.4.1.  X.25/ISDN Addressing
  contents:
  - "D.4.1.  X.25/ISDN Addressing\n   The original OFTP was designed to work over\
    \ the X.25 networks\n   provided by the PTTs (PSPDNs).  The national X.25 networks\
    \ were\n   interconnected to provide a global X.25 network, and a common\n   addressing\
    \ scheme was adopted by all.  Although there were a few\n   differences in addressing\
    \ within a national network, the interface to\n   other countries was quite rigid\
    \ and normalised.\n   PSPDN Numbering\n      The addressing scheme adopted in\
    \ X.25 is a 15-digit number\n      (Network User Address, NUA) where the first\
    \ three identify the\n      country, the fourth digit identifies the network within\
    \ the\n      country, and the remainder specify the individual subscriber plus\n\
    \      an optional subaddress.  In the UK where a full X.25 numbering\n      scheme\
    \ is adopted, a NUA is, e.g., 234221200170, where 2342 is the\n      DNIC (Data\
    \ Network Identification Code) and 21200170 is the\n      subscriber number.\n\
    \   ISDN Numbering\n      ISDN is an extension of the normal telephone system;\
    \ consequently,\n      it adopts (or rather is) the same numbering scheme as the\n\
    \      telephone system (PSTN).\n   The Numbering Conflict\n      The PSDN and\
    \ PSTN numbering schemes are two totally different\n      numbering schemes. \
    \ There is no relationship between them.  It is\n      this conflict that is at\
    \ the heart of the matter.\n"
- title: D.4.2.  Making a Call
  contents:
  - "D.4.2.  Making a Call\n   It is a consequence of PSDN and PSTN being based upon\
    \ different and\n   unconnected numbering schemes that the key problem arises.\n\
    \   For X.25 to work over ISDN, three main methods of addressing are\n   available:\n\
    \     Un-mapped:   The X.25 called NUA is used as the PSTN number.  Thus,\n  \
    \                an X.25 call to 0733394023 will result in a PSTN call\n     \
    \             to 0733394023 and the call request that consequently\n         \
    \         flows will also be to 0733394023.\n     Manipulated: The X.25 called\
    \ NUA is manipulated by the subtraction\n                  and/or addition of\
    \ digits to derive a resultant PSTN\n                  number.  Thus, 2394023\
    \ could be manipulated to derive\n                  a PSTN number of 00944733394023,\
    \ where the prefix 2 is\n                  deleted and replaced by 00944733.\n\
    \     Mapped:      The X.25 called NUA is used as a look-up into a table\n   \
    \               of PSTN numbers.  Thus, an X.25 call to 234221200170\n       \
    \           could be mapped to and result in a PSTN call to\n                \
    \  0733394023 and the call request that consequently\n                  flows\
    \ will remain as 234221200170.\n   Un-mapped Calls\n      Un-mapped calls are\
    \ where the host-specified X.25 NUA is converted\n      directly to the corresponding\
    \ ISDN number.\n      Thus, an X.25 call issued by the host to X.25 NUA 0733394023\
    \ will\n      result in an ISDN call to the PSTN number 0733394023.  After the\n\
    \      call has been established, then HDLC/X.25 protocol setup will be\n    \
    \  established after which an X.25 call request will be transferred\n      with\
    \ the NUA 0733394023.\n      When a PSTN call is made, the number of digits in\
    \ the called\n      number vary depending upon the location of the called party.\n\
    \      When a number is called, it may be local, national, or\n      international.\n\
    \         local: 394023\n         national: 0733 394023\n         international:\
    \ 009 44 733 394023\n      Depending upon where a call originates, the corresponding\
    \ X.25 NUA\n      in the call request packet will vary dramatically.\n      Such\
    \ variation of X.25 NUA, in particular the changing prefix, can\n      be difficult\
    \ to be accommodated by X.25 routing logic in many\n      products.\n      When\
    \ an international PSTN call is being made, then it is likely\n      that the\
    \ PSTN number exceeds 15 digits, which is the maximum\n      length of an X.25\
    \ NUA.  Therefore, using un-mapped addressing may\n      make some international\
    \ calls impossible to make.\n   Manipulated Calls\n      The X.25 called NUA is\
    \ manipulated by the subtraction and/or\n      addition of digits to derive a\
    \ resultant PSTN number.\n      Let us assume that by internal convention we have\
    \ identified the\n      prefix '2' to indicate an international ISDN call.  Thus,\
    \ an X.25\n      call request of 244733394023 could be manipulated to derive a\
    \ PSTN\n      number of 00944733394023, where the prefix '2' is deleted and\n\
    \      replaced by '009' (the international prefix).\n      The X.25 called NUA\
    \ would typically be left in its un-manipulated\n      state.  As individual internal\
    \ conventions vary, the X.25 called\n      NUA will vary.  In the case above,\
    \ it would be 244733394023, but\n      another installation might have the convention\
    \ where a prefix of\n      '56' specifies the UK and so the NUA will be 56733394023,\
    \ where\n      the '56' is deleted and replaced with '00944' to derive the PSTN\n\
    \      number.\n   Mapped Calls\n      The mapped method offers maximum flexibility\
    \ in that:\n         The PSTN number can exceed 15 digits.\n         The X.25\
    \ NUA and PSTN number can be totally different.\n      The problem with mapped\
    \ calls is administrative.  IBM mainframes\n      can't handle X.25 over ISDN\
    \ at all, let alone support mapping.\n      For the mainframe solution to work,\
    \ an external X.25/ISDN router\n      box is required and it is the responsibility\
    \ of the external box\n      to provide any mapping necessary.\n      This means\
    \ that any changes or addition of OFTP partners over ISDN\n      will require\
    \ access to the computer room or special configuration\n      equipment to change\
    \ the tables inside the external X.25/ISDN\n      router box.\n"
- title: D.4.3.  Receiving a Call
  contents:
  - "D.4.3.  Receiving a Call\n      We have seen from the previous section that the\
    \ called X.25 NUA\n      from an ISDN incoming call may vary considerably.  If\
    \ ISDN/X.25 is\n      confined to a national boundary, then such variation will\
    \ not be\n      so great as most calls will have matching called X.25 NUA and\
    \ PSTN\n      numbers.\n      X.25 switches and X.25 adapters normally route/accept/reject\
    \ calls\n      based upon their X.25 called NUA.  In particular, routing is made\n\
    \      upon the X.25 called NUA subaddress.\n      To derive this subaddress,\
    \ there are 2 methods:\n      1) the last 'n' digits are analysed.\n      2) the\
    \ base X.25 NUA of the line is removed from the called NUA.\n         For example,\
    \ if the called X.25 NUA is 23422120017010 and the\n         PSDN subscriber NUA\
    \ is 234221200170, then the subaddress\n         derived from subtraction is 10.\n\
    \   Obviously, the second method will not work if the incoming NUA\n   varies.\n\
    \   ISDN Features\n      ISDN, like X.25, has a core set of features that are\
    \ then enriched\n      with options.  In the original OFTP X.25 specification,\
    \ it was\n      decided that the Q-bit and D-bit options were not common to all\n\
    \      networks or applications; they were therefore positively excluded\n   \
    \   from the specification.\n      It is proposed that apart from the core ISDN\
    \ features necessary to\n      establish a call, no other features be used.\n\
    \   Subaddressing\n    There are two forms of ISDN subaddressing, overdialled\
    \ and specific.\n    The overdial method allows an ISDN number to be artificially\n\
    \    extended.  A typical case would be where a private exchange has been\n  \
    \  installed in a larger company.  Assume that the base number is\n    394023\
    \ and the computer is on internal extension 1234, then by\n    specifying an ISDN\
    \ number of 3940231234, direct access may be made\n    to the internal extension.\n\
    \    The problem with this method is that it extends to called number and\n  \
    \  may, especially for international access, exceed the ISDN numbering\n    limits\
    \ between countries.\n    The other method of subaddressing is where a discrete\
    \ subaddress is\n    placed in a specific field in the ISDN call setup.\n    The\
    \ problem with this method, is that it requires the caller to\n    place the subaddress\
    \ in the ISDN call setup.  Not all ISDN\n    implementations will allow this insertion.\n\
    \    In conclusion, subaddressing of any kind should be avoided.\n"
- title: D.4.4.  Logical Channel Assignment
  contents:
  - "D.4.4.  Logical Channel Assignment\n    An X.25 dataline will have associated\
    \ with it a number of logical\n    channels.\n    The number of channels is a\
    \ part of the agreement between the PTT\n    and the subscriber.  The number of\
    \ channels subscribed to is\n    important; call failure and similar problems\
    \ will result if the\n    number of logical channels defined at the two remote\
    \ ends are\n    different.\n    If a DTE makes a call out, then the highest defined\
    \ logical channel\n    number will be selected.  If the remote Data Communications\n\
    \    Equipment (DCE) does not have the same number of logical channels\n    defined,\
    \ then an invalid logical channel is being used from the\n    perspective of the\
    \ recipient DCE and the call will be rejected.\n"
- title: D.4.5.  Facilities Negotiation
  contents:
  - "D.4.5.  Facilities Negotiation\n    In the PSPDN environment, it is possible\
    \ to subscribe to negotiation\n    of window size and packet size.  Although this\
    \ negotiation requested\n    by the originator's DTE may be propagated to the\
    \ remote DTE at the\n    discretion of the originator's DCE, it is a local responsibility\n\
    \    between the DTE and DCE pair.\n    In the ISDN scenario where it is a DTE-DTE\
    \ type connection, the\n    window size and packet size may be left at the default\
    \ value and\n    consequently the values may be omitted from the call request.\
    \  If no\n    values are specified, then it is vital that both DTEs have\n   \
    \ configured themselves to the recommended defaults.\n    The symptom of a window\
    \ size mismatch is a hang situation without\n    any informational error codes.\n\
    \    The symptoms of a packet size mismatch could work in some scenarios,\n  \
    \  but would otherwise issue error codes indicating invalid packet\n    sizes.\n\
    \   Window Size\n      The CCITT X.25 window size has a default value of '2',\
    \ although\n      subscribers may have other default window sizes, e.g., '7',\
    \ by\n      virtue of agreement with the PTT.\n      Window size negotiation can\
    \ be explicitly requested by specifying\n      the requested window size in the\
    \ Facilities fields in the Call\n      Request packet.\n   Packet Size\n     \
    \ The CCITT X.25 packet size has a default value of '128' octets,\n      although\
    \ subscribers may have other default values, e.g., '1024',\n      agreed with\
    \ the PTT.\n"
- title: D.4.6.  ISDN Call Setup
  contents:
  - "D.4.6.  ISDN Call Setup\n      The initial setup of an ISDN call is initiated\
    \ with the\n      transmission of a Q.931 SETUP command.  Apart from requesting\
    \ that\n      a call be established, the SETUP command can optionally carry\n\
    \      information about the calling party, the called party, routing\n      information,\
    \ the type of circuit required (e.g., voice or data),\n      and information about\
    \ the protocols that are requested to be\n      established.\n      Setup Parameters:\n\
    \      Bearer capability            Information transfer and\n               \
    \                    access attributes\n      Called Party number          Destination's\
    \ network address\n      Called Party subaddress      Destination's complete\n\
    \                                   address\n      Calling Party number      \
    \   Source's network address\n      Low-layer compatibility      Layer 1-3 indication\n\
    \      High-layer compatibility     Layer 4-7 indication\n"
- title: D.4.7.  Homologation Issues
  contents:
  - "D.4.7.  Homologation Issues\n   Homologation procedures were adopted and vigorously\
    \ enforced by the\n   PTTs with respect to the quality and conformance of communications\n\
    \   equipment connected to the services provided by the PTTs.\n   In particular,\
    \ commercial X.25 products had to be tested and approved\n   before they could\
    \ be connected to the PTTs' PSPDN.  The advantage of\n   this to the subscriber\
    \ was that there was very little chance of the\n   approved equipment not working.\n\
    \   With ISDN, similar approval standards are still enforced.  So the\n   subscriber\
    \ has the same confidence in their ISDN equipment.  Wrong,\n   the ISDN equipment\
    \ itself is approved, but the X.15 protocol that\n   operates on top of ISDN is\
    \ now outside of the scope of approval\n   services.\n   This means that quality\
    \ of conformance to standards of X.25 over ISDN\n   is subject to the variable\
    \ quality procedures within the various ISDN\n   equipment manufacturers.\n  \
    \ Although it is likely that commercial reputation will place pressure\n   upon\
    \ the manufacturers with a programming bug to correct such errors,\n   it still\
    \ requires the subscribers that do not communicate well to put\n   time and effort\
    \ into finding the party with the error.\n   So far, tests have shown a number\
    \ of subtle errors, such as timing\n   problems, that have taken many days to\
    \ find, prove, and fix.\n"
- title: D.4.8.  Growth
  contents:
  - "D.4.8.  Growth\n   Primary Rate Access\n      If a user decides to plan for growth\
    \ from the beginning, then the\n      Primary Rate Access has apparent financial\
    \ benefits.  Such\n      apparent savings are usually lost due to the increased\
    \ cost of\n      user hardware to support such an interface.  The BRI for data\n\
    \      usage is very common and cards/adapters are low in cost, whereas\n    \
    \  the PRI cards/adapters are few and far between and consequently\n      highly\
    \ priced.\n   Basic Rate Access\n      One way to grow with ISDN is to buy multiple\
    \ BRI lines, increasing\n      slowly in units of 2 x B channels.  The PTTs will\
    \ be able to\n      provide the same subscriber number for all the lines provided\
    \ in a\n      similar way to the traditional hunting group associated with PSTN\n\
    \      type working.\n"
- title: D.4.9.  Performance
  contents:
  - "D.4.9.  Performance\n      The obvious benefit of ISDN is speed; unfortunately,\
    \ the majority\n      of computer systems in use today have a finite amount of\
    \ computing\n      power available.  The attachment of multiple active high-speed\n\
    \      communication lines used in file transfer mode could take a\n      significant\
    \ amount of CPU resource to the detriment of other users\n      on the system.\n\
    \      Connecting an ISDN line with the default 2 B channels to your\n      computer\
    \ using an X.21 interface is going to give a consistent 64\n      Kb throughput\
    \ only if one of the B channels is active at any one\n      time.\n      If there\
    \ are two 64 Kb channels active and contending for a single\n      64 Kb X.21\
    \ interface, then effective throughput will be reduced\n      significantly to\
    \ just over 50%.\n   Mainframe issues:\n      Users with a mainframe front-end\
    \ are also going to find cost an\n      issue.  The scanners that scan the communications\
    \ interfaces are\n      based upon aggregate throughput.  A 64 Kb interface takes\
    \ up a lot\n      of cycles.\n   Determining 'DTE' or 'DCE' Characteristics\n\
    \      The following section is an extract from the ISO/IEC 8208\n      (International\
    \ Standards Organization, International\n      Electrotechnical Commission) (1990-03-15)\
    \ standard, which is an\n      ISO extension of the CCITT X.25 standard.\n   \
    \   The restart procedure can be used to determine whether the DTE\n      acts\
    \ as a DCE or maintains its role as a DTE with respect to the\n      logical channel\
    \ selection during Virtual Call establishment and\n      resolution of Virtual\
    \ Call collision.\n      When prepared to initialise the Packet Layer, the DTE\
    \ shall\n      initiate the restart procedure (i.e., transmit a RESTART REQUEST\n\
    \      packet).  The determination is based on the response received from\n  \
    \    the data exchange equipment (DXE) as outlined below.\n     a) If the DTE\
    \ receives a RESTART INDICATION packet with a\n        restarting cause code that\
    \ is not 'DTE Originated' (i.e., it\n        came from a DCE), then the DTE shall\
    \ maintain its role as a DTE.\n     b) If the DTE receives a RESTART INDICATION\
    \ packet with a\n        restarting cause code of 'DTE Originated' (i.e., it came\
    \ from\n        another DTE), then the DTE shall confirm the restart and act as\n\
    \        a DCE.\n     c) If the DTE receives a RESTART INDICATION packet with\
    \ a\n        restarting cause code of 'DTE Originated' (i.e., it came from\n \
    \       another DTE) and it does not have an unconfirmed RESTART REQUEST\n   \
    \     packet outstanding (i.e., a restart collision), then the DTE\n        shall\
    \ consider this restart procedure completed but shall take\n        no further\
    \ action except to transmit another RESTART REQUEST\n        packet after some\
    \ randomly chosen time delay.\n     d) If the DTE issues a RESTART REQUEST packet\
    \ that is subsequently\n        confirmed with a RESTART CONFIRMATION packet,\
    \ then the DTE shall\n        maintain its role as a DTE.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document draws extensively on revision 1.4 of the ODETTE\
    \ File\n   Transfer Specification [OFTP].\n   Many people have contributed to\
    \ the development of this protocol and\n   their work is hereby acknowledged.\n"
- title: Normative References
  contents:
  - "Normative References\n   [CMS-Compression]\n              Gutmann, P., \"Compressed\
    \ Data Content Type for\n              Cryptographic Message Syntax (CMS)\", RFC\
    \ 3274, June 2002.\n   [CMS]      Housley, R., \"Cryptographic Message Syntax\
    \ (CMS)\", RFC\n              3852, July 2004.\n   [ISO-646]  International Organisation\
    \ for Standardisation, ISO\n              Standard 646:1991, \"Information technology\
    \ -- ISO 7-bit\n              coded character set for information interchange\"\
    , 1991.\n   [PKCS#1]   Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n\
    \              Standards (PKCS) #1: RSA Cryptography Specifications\n        \
    \      Version 2.1\", RFC 3447, February 2003.\n   [TLS]      Dierks, T. and E.\
    \ Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version\
    \ 1.1\", RFC 4346, April 2006.\n   [UTF-8]    Yergeau, F., \"UTF-8, A Transformation\
    \ Format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [ZLIB]\
    \     Deutsch, P. and J-L. Gailly, \"ZLIB Compressed Data Format\n           \
    \   Specification version 3.3\", RFC 1950, May 1996.\n"
- title: Informative References
  contents:
  - "Informative References\n   [ISO-6523] International Organisation for Standardisation,\
    \ ISO\n              Standard 6523:1984, \"Data interchange -- Structures for\n\
    \              the identification of organisations\", 1984.\n   [OFTP]     Organisation\
    \ for Data Exchange by Tele Transmission in\n              Europe, Odette File\
    \ Transfer Protocol, Revision 1.4, April\n              2000.\n   [FTP]      Postel,\
    \ J. and J. Reynolds, \"File Transfer Protocol\", STD\n              9, RFC 959,\
    \ October 1985.\n   [RFC793]   Postel, J., \"Transmission Control Protocol\",\
    \ STD 7, RFC\n              793, September 1981.\n   [RIME]     Coleridge, Samuel\
    \ Taylor, \"The Rime of the Ancient\n              Mariner\", 1817.\n   [X.509]\
    \    Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet\n              X.509\
    \ Public Key Infrastructure Certificate and\n              Certificate Revocation\
    \ List (CRL) Profile\", RFC 3280,\n              April 2002.\n   [RFC3850]  Ramsdell,\
    \ B., \"Secure/Multipurpose Internet Mail\n              Extensions (S/MIME) Version\
    \ 3.1 Certificate Handling\", RFC\n              3850, July 2004.\n"
- title: ODETTE Address
  contents:
  - "ODETTE Address\n   The ODETTE File Transfer Protocol is a product of the Technology\n\
    \   Committee of Odette International.  The Technology Committee can be\n   contacted\
    \ via the ODETTE Central Office:\n   ODETTE INTERNATIONAL Limited\n   Forbes House\n\
    \   Halkin Street\n   London\n   SW1X 7DS\n   United Kingdom\n   Phone: +44 (0)171\
    \ 344 9227\n   Fax:   +44 (0)171 235 7112\n   EMail: info@odette.org\n   URL:\
    \   http://www.odette.org\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ieuan Friend\n   Data Interchange Plc\n   Rhys House\n \
    \  The Minerva Business Park\n   Lynchwood\n   Peterborough\n   PE2 6FT\n   United\
    \ Kingdom\n   Phone: +44 (0)1733 371 311\n   EMail: ieuan.friend@dip.co.uk\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at www.rfc-editor.org/copyright.html, and\n   except as set forth therein,\
    \ the authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE\
    \ IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
