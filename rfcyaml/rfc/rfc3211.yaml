- title: __initial_text__
  contents:
  - '                   Password-based Encryption for CMS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a method of encrypting data using user-\n\
    \   supplied passwords and, by extension, any form of variable-length\n   keying\
    \ material which is not necessarily an algorithm-specific\n   fixed-format key.\
    \  The Cryptographic Message Syntax data format does\n   not currently contain\
    \ any provisions for password-based data\n   encryption.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes a password-based content encryption\
    \ mechanism\n   for CMS.  This is implemented as a new RecipientInfo type and\
    \ is an\n   extension to the RecipientInfo types currently defined in RFC 2630.\n\
    \   The format of the messages are described in ASN.1 [ASN1].\n   The key words\
    \ \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this document are to be\n   interpreted as described\
    \ in RFC 2119.\n"
- title: 1.1 Password-based Content Encryption
  contents:
  - "1.1 Password-based Content Encryption\n   CMS currently defined three recipient\
    \ information types for public-\n   key key wrapping (KeyTransRecipientInfo),\
    \ conventional key wrapping\n   (KEKRecipientInfo), and key agreement (KeyAgreeRecipientInfo).\
    \  The\n   recipient information described here adds a fourth type,\n   PasswordRecipientInfo,\
    \ which provides for password-based key\n   wrapping.\n"
- title: 1.2 RecipientInfo Types
  contents:
  - "1.2 RecipientInfo Types\n   The new recipient information type is an extension\
    \ to the\n   RecipientInfo type defined in section 6.2 of CMS, extending the types\n\
    \   to:\n      RecipientInfo ::= CHOICE {\n        ktri KeyTransRecipientInfo,\n\
    \        kari [1] KeyAgreeRecipientInfo,\n        kekri [2] KEKRecipientInfo,\n\
    \        pwri [3] PasswordRecipientinfo   -- New RecipientInfo type\n        }\n\
    \   Although the recipient information generation process is described in\n  \
    \ terms of a password-based operation (since this will be its most\n   common\
    \ use), the transformation employed is a general-purpose key\n   derivation one\
    \ which allows any type of keying material to be\n   converted into a key specific\
    \ to a particular content-encryption\n   algorithm.  Since the most common use\
    \ for password-based encryption\n   is to encrypt files which are stored locally\
    \ (rather than being\n   transmitted across a network), the term \"recipient\"\
    \ is somewhat\n   misleading, but is used here because the other key transport\n\
    \   mechanisms have always been described in similar terms.\n"
- title: 1.2.1  PasswordRecipientInfo Type
  contents:
  - "1.2.1  PasswordRecipientInfo Type\n   Recipient information using a user-supplied\
    \ password or previously\n   agreed-upon key is represented in the type PasswordRecipientInfo.\n\
    \   Each instance of PasswordRecipientInfo will transfer the content-\n   encryption\
    \ key (CEK) to one or more recipients who have the\n   previously agreed-upon\
    \ password or key-encryption key (KEK).\n      PasswordRecipientInfo ::= SEQUENCE\
    \ {\n        version CMSVersion,   -- Always set to 0\n        keyDerivationAlgorithm\n\
    \                         [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\n   \
    \     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n        encryptedKey\
    \ EncryptedKey }\n   The fields of type PasswordRecipientInfo have the following\
    \ meanings:\n      version is the syntax version number.  It MUST be 0.  Details\
    \ of\n      the CMSVersion type are discussed in CMS [RFC2630], section\n    \
    \  10.2.5.\n      keyDerivationAlgorithm identifies the key-derivation algorithm,\n\
    \      and any associated parameters, used to derive the KEK from the\n      user-supplied\
    \ password.  If this field is absent, the KEK is\n      supplied from an external\
    \ source, for example a crypto token such\n      as a smart card.\n      keyEncryptionAlgorithm\
    \ identifies the key-encryption algorithm,\n      and any associated parameters,\
    \ used to encrypt the CEK with the\n      KEK.\n      encryptedKey is the result\
    \ of encrypting the content-encryption\n      key with the KEK.\n"
- title: 1.2.2 Rationale
  contents:
  - "1.2.2 Rationale\n   Password-based key wrapping is a two-stage process, a first\
    \ stage in\n   which a user-supplied password is converted into a KEK if required,\n\
    \   and a second stage in which the KEK is used to encrypt a CEK.  These\n   two\
    \ stages are identified by the two algorithm identifiers.  Although\n   the PKCS\
    \ #5v2 standard [RFC2898] goes one step further to wrap these\n   up into a single\
    \ algorithm identifier, this design is particular to\n   that standard and may\
    \ not be applicable for other key wrapping\n   mechanisms.  For this reason the\
    \ two steps are specified separately.\n   The current format doesn't provide any\
    \ means of differentiating\n   between multiple password recipient infos, which\
    \ would occur for\n   example if two passwords are used to encrypt the same data.\n\
    \   Unfortunately there is a lack of existing practice in this area,\n   since\
    \ typical applications follow the model of encrypting data such\n   as a file\
    \ with a single password obtained from the user.  Without any\n   clear requirements,\
    \ an appropriate multiple password mechanism would\n   be difficult (perhaps impossible)\
    \ to define at this time.  If\n   sufficient demand emerges then this may be addressed\
    \ in a future\n   version of this document, for example by adding an optional\n\
    \   identification field of an appropriate form.\n"
- title: 2 Supported Algorithms
  contents:
  - "2 Supported Algorithms\n   This section lists the algorithms that must be implemented.\n\
    \   Additional algorithms that should be implemented are also included.\n"
- title: 2.1 Key Derivation Algorithms
  contents:
  - "2.1 Key Derivation Algorithms\n   These algorithms are used to convert the password\
    \ into a KEK.  The\n   key derivation algorithms are:\n      KeyDerivationAlgorithmIdentifer\
    \ ::= AlgorithmIdentifier\n   Conforming implementations MUST include PBKDF2 [RFC2898].\
    \  Appendix B\n   contains a more precise definition of the allowed algorithm\
    \ type than\n   is possible using 1988 ASN.1.\n"
- title: 2.2 Key Encryption Algorithms
  contents:
  - "2.2 Key Encryption Algorithms\n   These algorithms are used to encrypt the CEK\
    \ using the derived KEK.\n   The key encryption algorithms are:\n      KeyEncryptionAlgorithmIdentifier\
    \ ::= AlgorithmIdentifier\n   The PasswordRecipientInfo key encryption algorithm\
    \ identifier is:\n      id-alg-PWRI-KEK OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \        us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 9 }\n   The\
    \ AlgorithmIdentifier parameters field for this algorithm contains\n   the KEK\
    \ encryption algorithm used with the the key wrap algorithm\n   specified in section\
    \ 2.3.\n   There is no requirement that the CEK algorithm match the KEK\n   encryption\
    \ algorithm, although care should be taken to ensure that,\n   if different algorithms\
    \ are used, they offer an equivalent level of\n   security (for example wrapping\
    \ a Triple-DES key with an RC2/40 key\n   leads to a severe impedance mismatch\
    \ in encryption strength).\n   Conforming implementations MUST implement the id-alg-PWRI-KEK\
    \ key\n   wrap algorithm.  For the KEK encryption algorithms used by id-alg-\n\
    \   PWRI-KEK, conforming implementations MUST include Triple-DES in CBC\n   mode\
    \ and MAY include other algorithms such as AES, CAST-128, RC5,\n   IDEA, Skipjack,\
    \ Blowfish, and encryption modes as required.\n   Implementations SHOULD NOT include\
    \ any KSG (keystream generator)\n   ciphers such as RC4 or a block cipher in OFB\
    \ mode, and SHOULD NOT\n   include a block cipher in ECB mode.\n"
- title: 2.2.1 Rationale
  contents:
  - "2.2.1 Rationale\n   The use of a level of indirection in specifying the\n   KeyEncryptionAlgorithmIdentifier\
    \ allows alternative wrapping\n   algorithms to be used in the future.  If the\
    \ KEK algorithm were\n   specified directly in this field then any use of an alternative\n\
    \   wrapping algorithm would require a change to the\n   PasswordRecipientInfo\
    \ structure rather than simply a change to the\n   key encryption algorithm identifier.\n\
    \   The parameter field for this algorithm identifier could be specified\n   to\
    \ default to triple-DES, however due to the confusion over NULL vs\n   absent\
    \ parameters in algorithm identifiers it's left explicit with no\n   default value.\n"
- title: 2.3.1 Key Wrap
  contents:
  - "2.3.1 Key Wrap\n   The key wrap algorithm encrypts a CEK with a KEK in a manner\
    \ which\n   ensures that every bit of plaintext effects every bit of ciphertext.\n\
    \   This makes it equivalent in function to the package transform\n   [PACKAGE]\
    \ without requiring additional mechanisms or resources such\n   as hash functions\
    \ or cryptographically strong random numbers.  The\n   key wrap algorithm is performed\
    \ in two phases, a first phase which\n   formats the CEK into a form suitable\
    \ for encryption by the KEK, and a\n   second phase which wraps the formatted\
    \ CEK using the KEK.\n   Key formatting: Create a formatted CEK block consisting\
    \ of the\n   following:\n      1. A one-byte count of the number of bytes in the\
    \ CEK.\n      2. A check value containing the bitwise complement of the first\n\
    \         three bytes of the CEK.\n      3. The CEK.\n      4. Enough random padding\
    \ data to make the CEK data block a\n         multiple of the KEK block length\
    \ and at least two KEK cipher\n         blocks long (the fact that 32 bits of\
    \ count+check value are\n         used means that even with a 40-bit CEK, the\
    \ resulting data size\n         will always be at least two (64-bit) cipher blocks\
    \ long).  The\n         padding data does not have to be cryptographically strong,\n\
    \         although unpredictability helps.  Note that PKCS #5 padding is\n   \
    \      not used, since the length of the data is already known.\n   The formatted\
    \ CEK block then looks as follows:\n      CEK byte count || check value || CEK\
    \ || padding (if required)\n   Key wrapping:\n      1. Encrypt the padded key\
    \ using the KEK.\n      2. Without resetting the IV (that is, using the last ciphertext\n\
    \         block as the IV), encrypt the encrypted padded key a second\n      \
    \   time.\n   The resulting double-encrypted data is the EncryptedKey.\n"
- title: 2.3.2 Key Unwrap
  contents:
  - "2.3.2 Key Unwrap\n   Key unwrapping:\n      1. Using the n-1'th ciphertext block\
    \ as the IV, decrypt the n'th\n         ciphertext block.\n      2. Using the\
    \ decrypted n'th ciphertext block as the IV, decrypt\n         the 1st ... n-1'th\
    \ ciphertext blocks.  This strips the outer\n         layer of encryption.\n \
    \     3. Decrypt the inner layer of encryption using the KEK.\n   Key format verification:\n\
    \      1a. If the CEK byte count is less than the minimum allowed key\n      \
    \    size (usually 5 bytes for 40-bit keys) or greater than the\n          wrapped\
    \ CEK length or not valid for the CEK algorithm (eg not\n          16 or 24 bytes\
    \ for triple DES), the KEK was invalid.\n      1b. If the bitwise complement of\
    \ the key check value doesn't match\n          the first three bytes of the key,\
    \ the KEK was invalid.\n"
- title: 2.3.3 Example
  contents:
  - "2.3.3 Example\n   Given a content-encryption algorithm of Skipjack and a KEK\
    \ algorithm\n   of Triple-DES, the wrap steps are as follows:\n      1. Set the\
    \ first 4 bytes of the CEK block to the Skipjack key size\n         (10 bytes)\
    \ and the bitwise complement of the first three bytes\n         of the CEK.\n\
    \      2. Append the 80-bit (10-byte) Skipjack CEK and pad the total to\n    \
    \     16 bytes (two triple-DES blocks) using 2 bytes of random data.\n      2.\
    \ Using the IV given in the KeyEncryptionAlgorithmIdentifer,\n         encrypted\
    \ the padded Skipjack key.\n      3. Without resetting the IV, encrypt the encrypted\
    \ padded key a\n         second time.\n   The unwrap steps are as follows:\n \
    \     1. Using the first 8 bytes of the double-encrypted key as the IV,\n    \
    \     decrypt the second 8 bytes.\n      2. Without resetting the IV, decrypt\
    \ the first 8 bytes.\n      3. Decrypt the inner layer of encryption using the\
    \ the IV given in\n         the KeyEncryptionAlgorithmIdentifer to recover the\
    \ padded\n         Skipjack key.\n      4. If the length byte isn't equal to the\
    \ Skipjack key size (80\n         bits or 10 bytes) or the bitwise complement\
    \ of the check bytes\n         doesn't match the first three bytes of the CEK,\
    \ the KEK was\n         invalid.\n"
- title: 2.3.4 Rationale for the Double Wrapping
  contents:
  - "2.3.4 Rationale for the Double Wrapping\n   If many CEKs are encrypted in a standard\
    \ way with the same KEK and\n   the KEK has a 64-bit block size then after about\
    \ 2^32 encryptions\n   there is a high probability of a collision between different\
    \ blocks\n   of encrypted CEKs.  If an opponent manages to obtain a CEK, they\
    \ may\n   be able to solve for other CEKs.  The double-encryption wrapping\n \
    \  process, which makes every bit of ciphertext dependent on every bit\n   of\
    \ the CEK, eliminates this collision problem (as well as preventing\n   other\
    \ potential problems such as bit-flipping attacks).  Since the IV\n   is applied\
    \ to the inner layer of encryption, even wrapping the same\n   CEK with the same\
    \ KEK will result in a completely different wrapped\n   key each time.\n   An\
    \ additional feature of the double wrapping is that it doesn't\n   require the\
    \ use of any extra algorithms such as hash algorithms in\n   addition to the wrapping\
    \ algorithm itself, allowing it to be\n   implemented in devices which only support\
    \ one type of encryption\n   algorithm.  A typical example of such a device is\
    \ a crypto token such\n   as a smart card which often only supports a single block\
    \ cipher and a\n   single public-key algorithm, making it impossible to wrap keys\
    \ if the\n   use of an additional algorithm were required.\n"
- title: 3. Test Vectors
  contents:
  - "3. Test Vectors\n   This section contains two sets of test vectors, a very basic\
    \ set for\n   DES which can be used to verify correctness and which uses an\n\
    \   algorithm which is freely exportable from the US, and a stress-test\n   version\
    \ which uses very long passphrase and key sizes and a mixture\n   of algorithms\
    \ which can be used to verify the behaviour in extreme\n   cases.\n   The basic\
    \ test contains two subtests, a known-answer test for the key\n   derivation stage\
    \ and a full test of the key wrapping.  Both tests use\n   a DES-CBC key derived\
    \ from the password \"password\" with salt { 12 34\n   56 78 78 56 34 12 } using\
    \ 5 iterations of PBKDF2.  In the known\n   answer test the IV is set to all zeroes\
    \ (equivalent to using ECB) and\n   used to encrypt an all-zero data block.\n\
    \   The following values are obtained for the known-answer test:\n   PKCS #5v2\
    \ values:\n      input         70 61 73 73 77 6f 72 64\n      passphrase:   \"\
    password\"\n      input salt:   12 34 56 78 78 56 34 12\n      iterations:   5\n\
    \      output key:   D1 DA A7 86 15 F2 87 E6\n      known answer: 9B BD 78 FC\
    \ 11 A3 A9 08\n   The following values are obtained when wrapping a 64-bit (parity-\n\
    \   adjusted) DES-EBC key:\n   PKCS #5v2 values:\n      input         70 61 73\
    \ 73 77 6f 72 64\n      passphrase:   \"password\"\n      input salt:   12 34\
    \ 56 78 78 56 34 12\n      iterations:   5\n      output key:   D1 DA A7 86 15\
    \ F2 87 E6\n   CEK formatting phase:\n      length byte:  08\n      key check:\
    \    73 9D 83\n      CEK:          8C 62 7C 89 73 23 A2 F8\n      padding:   \
    \   C4 36 F5 41\n      complete      08 73 9D 83 8C 62 7C 89 73 23 A2 F8 C4 36\
    \ F5 41\n      CEK block:\n   Key wrap phase (wrap CEK block using DES key):\n\
    \      IV:           EF E5 98 EF 21 B3 3D 6D\n      first encr.   06 A0 43 86\
    \ 1E 82 88 E4 8B 59 9E B9 76 10 00 D4\n      pass output:\n      second encr.\
    \  B8 1B 25 65 EE 37 3C A6 DE DC A2 6A 17 8B 0C 10\n      pass output:\n   ASN.1\
    \ encoded PasswordRecipientInfo:\n    0 A3   68: [3] {\n    2 02    1:   INTEGER\
    \ 0\n    5 A0   26:   [0] {\n    7 06    9:     OBJECT IDENTIFIER id-PBKDF2 (1\
    \ 2 840 113549 1 5 12)\n   18 30   13:     SEQUENCE {\n   20 04    8:       OCTET\
    \ STRING\n             :         12 34 56 78 78 56 34 12\n   30 02    1:     \
    \  INTEGER 5\n             :       }\n             :     }\n   34 30   32:   SEQUENCE\
    \ {\n   36 06   11:     OBJECT IDENTIFIER id-alg-PWRI-KEK\n             :    \
    \     (1 2 840 113549 1 9 16 3 9)\n   33 30   17:     SEQUENCE {\n   35 06   \
    \ 5:       OBJECT IDENTIFIER des-CBC (1 3 14 3 2 7)\n   42 04    8:       OCTET\
    \ STRING\n             :         EF E5 98 EF 21 B3 3D 6D\n             :     \
    \  }\n             :     }\n   68 04   16:   OCTET STRING\n             :    \
    \ B8 1B 25 65 EE 37 3C A6 DE DC A2 6A 17 8B 0C 10\n             :   }\n   The\
    \ following values are obtained when wrapping a 256-bit key (for\n   example one\
    \ for AES or Blowfish) using a triple DES-CBC key derived\n   from the passphrase\
    \ \"All n-entities must communicate with other\n   n-entities via n-1 entiteeheehees\"\
    \ with salt\n   { 12 34 56 78 78 56 34 12 } using 500 iterations of PBKDF2.\n\
    \   PKCS #5v2 values:\n      input         41 6C 6C 20 6E 2D 65 6E 74 69 74 69\
    \ 65 73 20 6D\n      passphrase:   75 73 74 20 63 6F 6D 6D 75 6E 69 63 61 74 65\
    \ 20\n                    77 69 74 68 20 6F 74 68 65 72 20 6E 2d 65 6E 74\n  \
    \                  69 74 69 65 73 20 76 69 61 20 6E 2D 31 20 65 6E\n         \
    \           74 69 74 65 65 68 65 65 68 65 65 73\n                    \"All n-entities\
    \ must communicate with other \"\n                    \"n-entities via n-1 entiteeheehees\"\
    \n      input\n      salt:         12 34 56 78 78 56 34 12\n      iterations:\
    \   500\n      output        6A 89 70 BF 68 C9 2C AE A8 4A 8D F2 85 10 85 86\n\
    \      3DES key:     07 12 63 80 CC 47 AB 2D\n   CEK formatting phase:\n     \
    \ length byte:  20\n      key check:    73 9C 82\n      CEK:          8C 63 7D\
    \ 88 72 23 A2 F9 65 B5 66 EB 01 4B 0F A5\n                    D5 23 00 A3 F7 EA\
    \ 40 FF FC 57 72 03 C7 1B AF 3B\n      padding:      FA 06 0A 45\n      complete\
    \      20 73 9C 82 8C 63 7D 88 72 23 A2 F9 65 B5 66 EB\n      CEK block:    01\
    \ 4B 0F A5 D5 23 00 A3 F7 EA 40 FF FC 57 72 03\n                    C7 1B AF 3B\
    \ FA 06 0A 45\n   Key wrap phase (wrap CEK block using 3DES key):\n      IV: \
    \          BA F1 CA 79 31 21 3C 4E\n      first encr.   F8 3F 9E 16 78 51 41 10\
    \ 64 27 65 A9 F5 D8 71 CD\n      pass output:  27 DB AA 41 E7 BD 80 48 A9 08 20\
    \ FF 40 82 A2 80\n                    96 9E 65 27 9E 12 6A EB\n      second encr.\
    \  C0 3C 51 4A BD B9 E2 C5 AA C0 38 57 2B 5E 24 55\n      pass output:  38 76\
    \ B3 77 AA FB 82 EC A5 A9 D7 3F 8A B1 43 D9\n                    EC 74 E6 CA D7\
    \ DB 26 0C\n   ASN.1 encoded PasswordRecipientInfo:\n    0 A3   96: [3] {\n  \
    \  2 02    1:   INTEGER 0\n    5 A0   27:   [0] {\n    7 06    9:     OBJECT IDENTIFIER\
    \ id-PBKDF2 (1 2 840 113549 1 5 12)\n   18 30   14:     SEQUENCE {\n   20 04 \
    \   8:       OCTET STRING\n             :         12 34 56 78 78 56 34 12\n  \
    \ 30 02    2:       INTEGER 500\n             :       }\n             :     }\n\
    \   34 30   35:   SEQUENCE {\n   36 06   11:     OBJECT IDENTIFIER id-alg-PWRI-KEK\n\
    \             :         (1 2 840 113549 1 9 16 3 9)\n   34 30   20:     SEQUENCE\
    \ {\n   36 06    8:       OBJECT IDENTIFIER des-EDE3-CBC (1 2 840 113549 3 7)\n\
    \   46 04    8:       OCTET STRING\n             :         BA F1 CA 79 31 21 3C\
    \ 4E\n             :       }\n             :     }\n   71 04   40:   OCTET STRING\n\
    \             :     C0 3C 51 4A BD B9 E2 C5 AA C0 38 57 2B 5E 24 55\n        \
    \     :     38 76 B3 77 AA FB 82 EC A5 A9 D7 3F 8A B1 43 D9\n             :  \
    \   EC 74 E6 CA D7 DB 26 0C\n             :   }\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   The security of this recipient information type\
    \ rests on the security\n   of the underlying mechanisms employed, for which further\
    \ information\n   can be found in RFC 2630 and PKCS5v2.  More importantly, however,\n\
    \   when used with a password the security of this information type rests\n  \
    \ on the entropy of the user-selected password, which is typically\n   quite low.\
    \  Pass phrases (as opposed to simple passwords) are\n   STRONGLY RECOMMENDED,\
    \ although it should be recognized that even with\n   pass phrases it will be\
    \ difficult to use this recipient information\n   type to derive a KEK with sufficient\
    \ entropy to properly protect a\n   128-bit (or higher) CEK.\n"
- title: 5. IANA Considerations
  contents:
  - "5. IANA Considerations\n   The PasswordRecipientInfo key encryption algorithms\
    \ are identified by\n   object identifiers (OIDs).  OIDs were assigned from an\
    \ arc\n   contributed to the S/MIME Working Group by the RSA Security.  Should\n\
    \   additional encryption algorithms be introduced, the advocates for\n   such\
    \ algorithms are expected to assign the necessary OIDs from their\n   own arcs.\
    \  No action by the IANA is necessary for this document or\n   any anticipated\
    \ updates.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author would like to thank Jim Schaad, Phil Griffin,\
    \ and the\n   members of the S/MIME Working Group for their comments and feedback\n\
    \   on this document.\n"
- title: Author Address
  contents:
  - "Author Address\n   Peter Gutmann\n   University of Auckland\n   Private Bag 92019\n\
    \   Auckland, New Zealand\n   EMail: pgut001@cs.auckland.ac.nz\n"
- title: References
  contents:
  - "References\n   [ASN1]    CCITT Recommendation X.208: Specification of Abstract\n\
    \             Syntax Notation One (ASN.1), 1988.\n   [RFC2119] Bradner, S., \"\
    Key Words for Use in RFCs to Indicate\n             Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2630] Housley, R., \"Cryptographic Message\
    \ Syntax\", RFC 2630, June\n             1999.\n   [RFC2898] Kaliski, B., \"PKCS\
    \ #5: Password-Based Cryptography\n             Specification, Version 2.0\",\
    \ RFC 2898, September 2000.\n   [PACKAGE] All-or-Nothing Encryption and the Package\
    \ Transform, R.\n             Rivest, Proceedings of Fast Software Encryption\
    \ '97, Haifa,\n             Israel, January 1997.\n"
- title: 'Appendix A: ASN.1:1988 Module'
  contents:
  - 'Appendix A: ASN.1:1988 Module

    '
- title: PasswordRecipientInfo-88
  contents:
  - "PasswordRecipientInfo-88\n    { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9)\n      smime(16) modules(0) pwri(17) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n  AlgorithmIdentifier\n  FROM AuthenticationFramework { joint-iso-itu-t\
    \ ds(5) module(1)\n                                 authenticationFramework(7)\
    \ 3 }\n  CMSVersion, EncryptedKey\n  FROM CryptographicMessageSyntax { iso(1)\
    \ member-body(2) us(840)\n                                    rsadsi(113549) pkcs(1)\
    \ pkcs-9(9)\n                                    smime(16) modules(0) cms(1) };\n"
- title: -- The following PDU is defined in PKCS5 { iso(1) member-body(2)
  contents:
  - '-- The following PDU is defined in PKCS5 { iso(1) member-body(2)

    '
- title: -- us(840) rsadsi(113549) pkcs(1) pkcs-5(5) modules(16)
  contents:
  - '-- us(840) rsadsi(113549) pkcs(1) pkcs-5(5) modules(16)

    '
- title: -- pkcs5v2-0(1) }, however it can't be imported because because
  contents:
  - '-- pkcs5v2-0(1) }, however it can''t be imported because because

    '
- title: -- it's specified in 1994/1997 ASN.1.  Because of this it's copied
  contents:
  - '-- it''s specified in 1994/1997 ASN.1.  Because of this it''s copied

    '
- title: -- here from the source but rephrased as 1988 ASN.1.  Further
  contents:
  - '-- here from the source but rephrased as 1988 ASN.1.  Further

    '
- title: -- details are given in [RFC 2898].
  contents:
  - '-- details are given in [RFC 2898].

    '
- title: PBKDF2-params ::= SEQUENCE {
  contents:
  - "PBKDF2-params ::= SEQUENCE {\n  salt OCTET STRING,\n  iterationCount INTEGER\
    \ (1..MAX),\n  keyLength INTEGER (1..MAX) OPTIONAL,\n  prf AlgorithmIdentifier\n\
    \            DEFAULT { algorithm id-hmacWithSHA1, parameters NULL } }\n"
- title: -- The PRF algorithm is also defined in PKCS5 and can neither be
  contents:
  - '-- The PRF algorithm is also defined in PKCS5 and can neither be

    '
- title: -- imported nor expressed in 1988 ASN.1, however it is encoded as
  contents:
  - '-- imported nor expressed in 1988 ASN.1, however it is encoded as

    '
- title: '-- an AlgorithmIdentifier with the OID:'
  contents:
  - '-- an AlgorithmIdentifier with the OID:

    '
- title: id-hmacWithSHA1 OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-hmacWithSHA1 OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ digestAlgorithm(2) 7 }\n"
- title: -- and NULL parameters.  Further details are given in [RFC 2898].
  contents:
  - '-- and NULL parameters.  Further details are given in [RFC 2898].

    '
- title: '-- Implementation note: Because of the inability to precisely'
  contents:
  - '-- Implementation note: Because of the inability to precisely

    '
- title: -- specify the PBKDF2 PDU or its parameters in 1988 ASN.1, it is
  contents:
  - '-- specify the PBKDF2 PDU or its parameters in 1988 ASN.1, it is

    '
- title: -- likely that implementors will also encounter alternative
  contents:
  - '-- likely that implementors will also encounter alternative

    '
- title: -- interpretations of these parameters, usually using an alternate
  contents:
  - '-- interpretations of these parameters, usually using an alternate

    '
- title: '-- OID from the IPsec arc which is generally used for HMAC-SHA1:'
  contents:
  - '-- OID from the IPsec arc which is generally used for HMAC-SHA1:

    '
- title: --
  contents:
  - '--

    '
- title: -- hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1)
  contents:
  - '-- hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1)

    '
- title: --     identified-organization(3) dod(6) internet(1) security(5)
  contents:
  - '--     identified-organization(3) dod(6) internet(1) security(5)

    '
- title: --     mechanisms(5) 8 1 2 }
  contents:
  - '--     mechanisms(5) 8 1 2 }

    '
- title: --
  contents:
  - '--

    '
- title: -- with absent (rather than NULL) parameters.
  contents:
  - '-- with absent (rather than NULL) parameters.

    '
- title: -- The PasswordRecipientInfo
  contents:
  - '-- The PasswordRecipientInfo

    '
- title: id-alg-PWRI-KEK OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-alg-PWRI-KEK OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16) alg(3) 9 }\n"
- title: PasswordRecipientInfo ::= SEQUENCE {
  contents:
  - "PasswordRecipientInfo ::= SEQUENCE {\n  version CMSVersion,       -- Always set\
    \ to 0\n  keyDerivationAlgorithm\n                    [0] KeyDerivationAlgorithmIdentifier\
    \ OPTIONAL,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  encryptedKey\
    \ EncryptedKey }\n"
- title: KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier
  contents:
  - 'KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier

    '
- title: KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
  contents:
  - 'KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier

    '
- title: END  -- PasswordRecipientInfo-88 --
  contents:
  - 'END  -- PasswordRecipientInfo-88 --

    '
- title: 'Appendix B: ASN.1:1997 Module'
  contents:
  - 'Appendix B: ASN.1:1997 Module

    '
- title: This appendix contains the same information as Appendix A in a more
  contents:
  - 'This appendix contains the same information as Appendix A in a more

    '
- title: recent (and precise) ASN.1 notation, however Appendix A takes
  contents:
  - 'recent (and precise) ASN.1 notation, however Appendix A takes

    '
- title: precedence in case of conflict.
  contents:
  - 'precedence in case of conflict.

    '
- title: PasswordRecipientInfo-97
  contents:
  - "PasswordRecipientInfo-97\n    { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9)\n      smime(16) modules(0) pwri(18) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n  id-PBKDF2, PBKDF2-params,\n  FROM PKCS5 { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1)\n               pkcs-5(5) }\n  CMSVersion, EncryptedKey,\
    \ des-ede3-cbc, CBCParameter\n  FROM CryptographicMessageSyntax { iso(1) member-body(2)\
    \ us(840)\n                                    rsadsi(113549) pkcs(1) pkcs-9(9)\n\
    \                                    smime(16) modules(0) cms(1) };\n"
- title: id-alg-PWRI-KEK OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-alg-PWRI-KEK OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16) alg(3) 9 }\n"
- title: PasswordRecipientInfo ::= SEQUENCE {
  contents:
  - "PasswordRecipientInfo ::= SEQUENCE {\n  version CMSVersion,       -- Always set\
    \ to 0\n  keyDerivationAlgorithm\n                     [0] KeyDerivationAlgorithmIdentifier\
    \ OPTIONAL,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  encryptedKey\
    \           EncryptedKey }\n"
- title: KeyDerivationAlgorithmIdentifier ::=
  contents:
  - "KeyDerivationAlgorithmIdentifier ::=\n  AlgorithmIdentifier {{ KeyDerivationAlgorithms\
    \ }}\n"
- title: KeyDerivationAlgorithms ALGORITHM ::= {
  contents:
  - "KeyDerivationAlgorithms ALGORITHM ::= {\n  { OID id-PBKDF2 PARMS PBKDF2-params\
    \ },\n   ...\n  }\n"
- title: KeyEncryptionAlgorithmIdentifier ::=
  contents:
  - "KeyEncryptionAlgorithmIdentifier ::=\n  AlgorithmIdentifier {{ KeyEncryptionAlgorithms\
    \ }}\n"
- title: KeyEncryptionAlgorithms ALGORITHM ::= {
  contents:
  - "KeyEncryptionAlgorithms ALGORITHM ::= {\n  { OID id-alg-PWRI-KEK PARMS\n    AlgorithmIdentifier\
    \ {{ PWRIAlgorithms }} },\n  ...\n  }\n"
- title: -- Algorithm identifiers for algorithms used with the
  contents:
  - '-- Algorithm identifiers for algorithms used with the

    '
- title: -- id-alg-PWRI-KEK key wrap algorithm.  Currently only 3DES is a
  contents:
  - '-- id-alg-PWRI-KEK key wrap algorithm.  Currently only 3DES is a

    '
- title: -- MUST, all others are optional
  contents:
  - '-- MUST, all others are optional

    '
- title: PWRIAlgorithms ALGORITHM ::= {
  contents:
  - "PWRIAlgorithms ALGORITHM ::= {\n  { OID des-ede3-cbc PARMS CBCParameter },\n\
    \  ...\n  }\n"
- title: -- Supporting definitions.  We could also pull in the
  contents:
  - '-- Supporting definitions.  We could also pull in the

    '
- title: -- AlgorithmIdentifier from an appropriately recent X.500 module (or
  contents:
  - '-- AlgorithmIdentifier from an appropriately recent X.500 module (or

    '
- title: -- wherever) but it's just as easy (and more convenient for readers)
  contents:
  - '-- wherever) but it''s just as easy (and more convenient for readers)

    '
- title: -- to provide a definition here
  contents:
  - '-- to provide a definition here

    '
- title: AlgorithmIdentifier { ALGORITHM:IOSet } ::= SEQUENCE {
  contents:
  - "AlgorithmIdentifier { ALGORITHM:IOSet } ::= SEQUENCE {\n  algorithm        ALGORITHM.&id({IOSet}),\n\
    \  parameters       ALGORITHM.&Type({IOSet}{@algorithm})  OPTIONAL\n  }\n"
- title: ALGORITHM ::= CLASS {
  contents:
  - "ALGORITHM ::= CLASS {\n  &id              OBJECT IDENTIFIER  UNIQUE,\n  &Type\
    \            OPTIONAL\n  }\n  WITH SYNTAX { OID &id [PARMS &Type] }\n"
- title: END  -- PasswordRecipientInfo-97 --
  contents:
  - 'END  -- PasswordRecipientInfo-97 --

    '
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
