- title: __initial_text__
  contents:
  - '        DEFLATE Compressed Data Format Specification version 1.3

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   The IESG takes no position on the validity\
    \ of any Intellectual\n   Property Rights statements contained in this document.\n"
- title: Notices
  contents:
  - "Notices\n   Copyright (c) 1996 L. Peter Deutsch\n   Permission is granted to\
    \ copy and distribute this document for any\n   purpose and without charge, including\
    \ translations into other\n   languages and incorporation into compilations, provided\
    \ that the\n   copyright notice and this notice are preserved, and that any\n\
    \   substantive changes or deletions from the original are clearly\n   marked.\n\
    \   A pointer to the latest version of this and related documentation in\n   HTML\
    \ format can be found at the URL\n   <ftp://ftp.uu.net/graphics/png/documents/zlib/zdoc-index.html>.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a lossless compressed data format that\n\
    \   compresses data using a combination of the LZ77 algorithm and Huffman\n  \
    \ coding, with efficiency comparable to the best currently available\n   general-purpose\
    \ compression methods.  The data can be produced or\n   consumed, even for an\
    \ arbitrarily long sequentially presented input\n   data stream, using only an\
    \ a priori bounded amount of intermediate\n   storage.  The format can be implemented\
    \ readily in a manner not\n   covered by patents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ...................................................\
    \ 2\n      1.1. Purpose ................................................... 2\n\
    \      1.2. Intended audience ......................................... 3\n  \
    \    1.3. Scope ..................................................... 3\n    \
    \  1.4. Compliance ................................................ 3\n      1.5.\
    \  Definitions of terms and conventions used ................ 3\n      1.6. Changes\
    \ from previous versions ............................ 4\n   2. Compressed representation\
    \ overview ............................. 4\n   3. Detailed specification .........................................\
    \ 5\n      3.1. Overall conventions ....................................... 5\n\
    \          3.1.1. Packing into bytes .................................. 5\n  \
    \    3.2. Compressed block format ................................... 6\n    \
    \      3.2.1. Synopsis of prefix and Huffman coding ............... 6\n      \
    \    3.2.2. Use of Huffman coding in the \"deflate\" format ....... 7\n      \
    \    3.2.3. Details of block format ............................. 9\n        \
    \  3.2.4. Non-compressed blocks (BTYPE=00) ................... 11\n          3.2.5.\
    \ Compressed blocks (length and distance codes) ...... 11\n          3.2.6. Compression\
    \ with fixed Huffman codes (BTYPE=01) .... 12\n          3.2.7. Compression with\
    \ dynamic Huffman codes (BTYPE=10) .. 13\n      3.3. Compliance ...............................................\
    \ 14\n   4. Compression algorithm details ................................. 14\n\
    \   5. References .................................................... 16\n  \
    \ 6. Security Considerations ....................................... 16\n   7.\
    \ Source code ................................................... 16\n   8. Acknowledgements\
    \ .............................................. 16\n   9. Author's Address ..............................................\
    \ 17\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   1.1. Purpose\n      The purpose of this specification is\
    \ to define a lossless\n      compressed data format that:\n          * Is independent\
    \ of CPU type, operating system, file system,\n            and character set,\
    \ and hence can be used for interchange;\n          * Can be produced or consumed,\
    \ even for an arbitrarily long\n            sequentially presented input data\
    \ stream, using only an a\n            priori bounded amount of intermediate storage,\
    \ and hence\n            can be used in data communications or similar structures\n\
    \            such as Unix filters;\n          * Compresses data with efficiency\
    \ comparable to the best\n            currently available general-purpose compression\
    \ methods,\n            and in particular considerably better than the \"compress\"\
    \n            program;\n          * Can be implemented readily in a manner not\
    \ covered by\n            patents, and hence can be practiced freely;\n      \
    \    * Is compatible with the file format produced by the current\n          \
    \  widely used gzip utility, in that conforming decompressors\n            will\
    \ be able to read data produced by the existing gzip\n            compressor.\n\
    \      The data format defined by this specification does not attempt to:\n  \
    \        * Allow random access to compressed data;\n          * Compress specialized\
    \ data (e.g., raster graphics) as well\n            as the best currently available\
    \ specialized algorithms.\n      A simple counting argument shows that no lossless\
    \ compression\n      algorithm can compress every possible input data set.  For\
    \ the\n      format defined here, the worst case expansion is 5 bytes per 32K-\n\
    \      byte block, i.e., a size increase of 0.015% for large data sets.\n    \
    \  English text usually compresses by a factor of 2.5 to 3;\n      executable\
    \ files usually compress somewhat less; graphical data\n      such as raster images\
    \ may compress much more.\n   1.2. Intended audience\n      This specification\
    \ is intended for use by implementors of software\n      to compress data into\
    \ \"deflate\" format and/or decompress data from\n      \"deflate\" format.\n\
    \      The text of the specification assumes a basic background in\n      programming\
    \ at the level of bits and other primitive data\n      representations.  Familiarity\
    \ with the technique of Huffman coding\n      is helpful but not required.\n \
    \  1.3. Scope\n      The specification specifies a method for representing a sequence\n\
    \      of bytes as a (usually shorter) sequence of bits, and a method for\n  \
    \    packing the latter bit sequence into bytes.\n   1.4. Compliance\n      Unless\
    \ otherwise indicated below, a compliant decompressor must be\n      able to accept\
    \ and decompress any data set that conforms to all\n      the specifications presented\
    \ here; a compliant compressor must\n      produce data sets that conform to all\
    \ the specifications presented\n      here.\n   1.5.  Definitions of terms and\
    \ conventions used\n      Byte: 8 bits stored or transmitted as a unit (same as\
    \ an octet).\n      For this specification, a byte is exactly 8 bits, even on\
    \ machines\n      which store a character on a number of bits different from eight.\n\
    \      See below, for the numbering of bits within a byte.\n      String: a sequence\
    \ of arbitrary bytes.\n   1.6. Changes from previous versions\n      There have\
    \ been no technical changes to the deflate format since\n      version 1.1 of\
    \ this specification.  In version 1.2, some\n      terminology was changed.  Version\
    \ 1.3 is a conversion of the\n      specification to RFC style.\n"
- title: 2. Compressed representation overview
  contents:
  - "2. Compressed representation overview\n   A compressed data set consists of a\
    \ series of blocks, corresponding\n   to successive blocks of input data.  The\
    \ block sizes are arbitrary,\n   except that non-compressible blocks are limited\
    \ to 65,535 bytes.\n   Each block is compressed using a combination of the LZ77\
    \ algorithm\n   and Huffman coding. The Huffman trees for each block are independent\n\
    \   of those for previous or subsequent blocks; the LZ77 algorithm may\n   use\
    \ a reference to a duplicated string occurring in a previous block,\n   up to\
    \ 32K input bytes before.\n   Each block consists of two parts: a pair of Huffman\
    \ code trees that\n   describe the representation of the compressed data part,\
    \ and a\n   compressed data part.  (The Huffman trees themselves are compressed\n\
    \   using Huffman encoding.)  The compressed data consists of a series of\n  \
    \ elements of two types: literal bytes (of strings that have not been\n   detected\
    \ as duplicated within the previous 32K input bytes), and\n   pointers to duplicated\
    \ strings, where a pointer is represented as a\n   pair <length, backward distance>.\
    \  The representation used in the\n   \"deflate\" format limits distances to 32K\
    \ bytes and lengths to 258\n   bytes, but does not limit the size of a block,\
    \ except for\n   uncompressible blocks, which are limited as noted above.\n  \
    \ Each type of value (literals, distances, and lengths) in the\n   compressed\
    \ data is represented using a Huffman code, using one code\n   tree for literals\
    \ and lengths and a separate code tree for distances.\n   The code trees for each\
    \ block appear in a compact form just before\n   the compressed data for that\
    \ block.\n"
- title: 3. Detailed specification
  contents:
  - "3. Detailed specification\n   3.1. Overall conventions In the diagrams below,\
    \ a box like this:\n         +---+\n         |   | <-- the vertical bars might\
    \ be missing\n         +---+\n      represents one byte; a box like this:\n  \
    \       +==============+\n         |              |\n         +==============+\n\
    \      represents a variable number of bytes.\n      Bytes stored within a computer\
    \ do not have a \"bit order\", since\n      they are always treated as a unit.\
    \  However, a byte considered as\n      an integer between 0 and 255 does have\
    \ a most- and least-\n      significant bit, and since we write numbers with the\
    \ most-\n      significant digit on the left, we also write bytes with the most-\n\
    \      significant bit on the left.  In the diagrams below, we number the\n  \
    \    bits of a byte so that bit 0 is the least-significant bit, i.e.,\n      the\
    \ bits are numbered:\n         +--------+\n         |76543210|\n         +--------+\n\
    \      Within a computer, a number may occupy multiple bytes.  All\n      multi-byte\
    \ numbers in the format described here are stored with\n      the least-significant\
    \ byte first (at the lower memory address).\n      For example, the decimal number\
    \ 520 is stored as:\n             0        1\n         +--------+--------+\n \
    \        |00001000|00000010|\n         +--------+--------+\n          ^      \
    \  ^\n          |        |\n          |        + more significant byte = 2 x 256\n\
    \          + less significant byte = 8\n      3.1.1. Packing into bytes\n    \
    \     This document does not address the issue of the order in which\n       \
    \  bits of a byte are transmitted on a bit-sequential medium,\n         since\
    \ the final data format described here is byte- rather than\n         bit-oriented.\
    \  However, we describe the compressed block format\n         in below, as a sequence\
    \ of data elements of various bit\n         lengths, not a sequence of bytes.\
    \  We must therefore specify\n         how to pack these data elements into bytes\
    \ to form the final\n         compressed byte sequence:\n             * Data elements\
    \ are packed into bytes in order of\n               increasing bit number within\
    \ the byte, i.e., starting\n               with the least-significant bit of the\
    \ byte.\n             * Data elements other than Huffman codes are packed\n  \
    \             starting with the least-significant bit of the data\n          \
    \     element.\n             * Huffman codes are packed starting with the most-\n\
    \               significant bit of the code.\n         In other words, if one\
    \ were to print out the compressed data as\n         a sequence of bytes, starting\
    \ with the first byte at the\n         *right* margin and proceeding to the *left*,\
    \ with the most-\n         significant bit of each byte on the left as usual,\
    \ one would be\n         able to parse the result from right to left, with fixed-width\n\
    \         elements in the correct MSB-to-LSB order and Huffman codes in\n    \
    \     bit-reversed order (i.e., with the first bit of the code in the\n      \
    \   relative LSB position).\n   3.2. Compressed block format\n      3.2.1. Synopsis\
    \ of prefix and Huffman coding\n         Prefix coding represents symbols from\
    \ an a priori known\n         alphabet by bit sequences (codes), one code for\
    \ each symbol, in\n         a manner such that different symbols may be represented\
    \ by bit\n         sequences of different lengths, but a parser can always parse\n\
    \         an encoded string unambiguously symbol-by-symbol.\n         We define\
    \ a prefix code in terms of a binary tree in which the\n         two edges descending\
    \ from each non-leaf node are labeled 0 and\n         1 and in which the leaf\
    \ nodes correspond one-for-one with (are\n         labeled with) the symbols of\
    \ the alphabet; then the code for a\n         symbol is the sequence of 0's and\
    \ 1's on the edges leading from\n         the root to the leaf labeled with that\
    \ symbol.  For example:\n                          /\\              Symbol   \
    \ Code\n                         0  1             ------    ----\n           \
    \             /    \\                A      00\n                       /\\   \
    \  B               B       1\n                      0  1                    C\
    \     011\n                     /    \\                   D     010\n        \
    \            A     /\\\n                         0  1\n                      \
    \  /    \\\n                       D      C\n         A parser can decode the\
    \ next symbol from an encoded input\n         stream by walking down the tree\
    \ from the root, at each step\n         choosing the edge corresponding to the\
    \ next input bit.\n         Given an alphabet with known symbol frequencies, the\
    \ Huffman\n         algorithm allows the construction of an optimal prefix code\n\
    \         (one which represents strings with those symbol frequencies\n      \
    \   using the fewest bits of any possible prefix codes for that\n         alphabet).\
    \  Such a code is called a Huffman code.  (See\n         reference [1] in Chapter\
    \ 5, references for additional\n         information on Huffman codes.)\n    \
    \     Note that in the \"deflate\" format, the Huffman codes for the\n       \
    \  various alphabets must not exceed certain maximum code lengths.\n         This\
    \ constraint complicates the algorithm for computing code\n         lengths from\
    \ symbol frequencies.  Again, see Chapter 5,\n         references for details.\n\
    \      3.2.2. Use of Huffman coding in the \"deflate\" format\n         The Huffman\
    \ codes used for each alphabet in the \"deflate\"\n         format have two additional\
    \ rules:\n             * All codes of a given bit length have lexicographically\n\
    \               consecutive values, in the same order as the symbols\n       \
    \        they represent;\n             * Shorter codes lexicographically precede\
    \ longer codes.\n         We could recode the example above to follow this rule\
    \ as\n         follows, assuming that the order of the alphabet is ABCD:\n   \
    \         Symbol  Code\n            ------  ----\n            A       10\n   \
    \         B       0\n            C       110\n            D       111\n      \
    \   I.e., 0 precedes 10 which precedes 11x, and 110 and 111 are\n         lexicographically\
    \ consecutive.\n         Given this rule, we can define the Huffman code for an\
    \ alphabet\n         just by giving the bit lengths of the codes for each symbol\
    \ of\n         the alphabet in order; this is sufficient to determine the\n  \
    \       actual codes.  In our example, the code is completely defined\n      \
    \   by the sequence of bit lengths (2, 1, 3, 3).  The following\n         algorithm\
    \ generates the codes as integers, intended to be read\n         from most- to\
    \ least-significant bit.  The code lengths are\n         initially in tree[I].Len;\
    \ the codes are produced in\n         tree[I].Code.\n         1)  Count the number\
    \ of codes for each code length.  Let\n             bl_count[N] be the number\
    \ of codes of length N, N >= 1.\n         2)  Find the numerical value of the\
    \ smallest code for each\n             code length:\n                code = 0;\n\
    \                bl_count[0] = 0;\n                for (bits = 1; bits <= MAX_BITS;\
    \ bits++) {\n                    code = (code + bl_count[bits-1]) << 1;\n    \
    \                next_code[bits] = code;\n                }\n         3)  Assign\
    \ numerical values to all codes, using consecutive\n             values for all\
    \ codes of the same length with the base\n             values determined at step\
    \ 2. Codes that are never used\n             (which have a bit length of zero)\
    \ must not be assigned a\n             value.\n                for (n = 0;  n\
    \ <= max_code; n++) {\n                    len = tree[n].Len;\n              \
    \      if (len != 0) {\n                        tree[n].Code = next_code[len];\n\
    \                        next_code[len]++;\n                    }\n          \
    \      }\n         Example:\n         Consider the alphabet ABCDEFGH, with bit\
    \ lengths (3, 3, 3, 3,\n         3, 2, 4, 4).  After step 1, we have:\n      \
    \      N      bl_count[N]\n            -      -----------\n            2     \
    \ 1\n            3      5\n            4      2\n         Step 2 computes the\
    \ following next_code values:\n            N      next_code[N]\n            -\
    \      ------------\n            1      0\n            2      0\n            3\
    \      2\n            4      14\n         Step 3 produces the following code values:\n\
    \            Symbol Length   Code\n            ------ ------   ----\n        \
    \    A       3        010\n            B       3        011\n            C   \
    \    3        100\n            D       3        101\n            E       3   \
    \     110\n            F       2         00\n            G       4       1110\n\
    \            H       4       1111\n      3.2.3. Details of block format\n    \
    \     Each block of compressed data begins with 3 header bits\n         containing\
    \ the following data:\n            first bit       BFINAL\n            next 2\
    \ bits     BTYPE\n         Note that the header bits do not necessarily begin\
    \ on a byte\n         boundary, since a block does not necessarily occupy an integral\n\
    \         number of bytes.\n         BFINAL is set if and only if this is the\
    \ last block of the data\n         set.\n         BTYPE specifies how the data\
    \ are compressed, as follows:\n            00 - no compression\n            01\
    \ - compressed with fixed Huffman codes\n            10 - compressed with dynamic\
    \ Huffman codes\n            11 - reserved (error)\n         The only difference\
    \ between the two compressed cases is how the\n         Huffman codes for the\
    \ literal/length and distance alphabets are\n         defined.\n         In all\
    \ cases, the decoding algorithm for the actual data is as\n         follows:\n\
    \            do\n               read block header from input stream.\n       \
    \        if stored with no compression\n                  skip any remaining bits\
    \ in current partially\n                     processed byte\n                \
    \  read LEN and NLEN (see next section)\n                  copy LEN bytes of data\
    \ to output\n               otherwise\n                  if compressed with dynamic\
    \ Huffman codes\n                     read representation of code trees (see\n\
    \                        subsection below)\n                  loop (until end\
    \ of block code recognized)\n                     decode literal/length value\
    \ from input stream\n                     if value < 256\n                   \
    \     copy value (literal byte) to output stream\n                     otherwise\n\
    \                        if value = end of block (256)\n                     \
    \      break from loop\n                        otherwise (value = 257..285)\n\
    \                           decode distance from input stream\n              \
    \             move backwards distance bytes in the output\n                  \
    \         stream, and copy length bytes from this\n                          \
    \ position to the output stream.\n                  end loop\n            while\
    \ not last block\n         Note that a duplicated string reference may refer to\
    \ a string\n         in a previous block; i.e., the backward distance may cross\
    \ one\n         or more block boundaries.  However a distance cannot refer past\n\
    \         the beginning of the output stream.  (An application using a\n     \
    \    preset dictionary might discard part of the output stream; a\n         distance\
    \ can refer to that part of the output stream anyway)\n         Note also that\
    \ the referenced string may overlap the current\n         position; for example,\
    \ if the last 2 bytes decoded have values\n         X and Y, a string reference\
    \ with <length = 5, distance = 2>\n         adds X,Y,X,Y,X to the output stream.\n\
    \         We now specify each compression method in turn.\n      3.2.4. Non-compressed\
    \ blocks (BTYPE=00)\n         Any bits of input up to the next byte boundary are\
    \ ignored.\n         The rest of the block consists of the following information:\n\
    \              0   1   2   3   4...\n            +---+---+---+---+================================+\n\
    \            |  LEN  | NLEN  |... LEN bytes of literal data...|\n            +---+---+---+---+================================+\n\
    \         LEN is the number of data bytes in the block.  NLEN is the\n       \
    \  one's complement of LEN.\n      3.2.5. Compressed blocks (length and distance\
    \ codes)\n         As noted above, encoded data blocks in the \"deflate\" format\n\
    \         consist of sequences of symbols drawn from three conceptually\n    \
    \     distinct alphabets: either literal bytes, from the alphabet of\n       \
    \  byte values (0..255), or <length, backward distance> pairs,\n         where\
    \ the length is drawn from (3..258) and the distance is\n         drawn from (1..32,768).\
    \  In fact, the literal and length\n         alphabets are merged into a single\
    \ alphabet (0..285), where\n         values 0..255 represent literal bytes, the\
    \ value 256 indicates\n         end-of-block, and values 257..285 represent length\
    \ codes\n         (possibly in conjunction with extra bits following the symbol\n\
    \         code) as follows:\n                 Extra               Extra      \
    \         Extra\n            Code Bits Length(s) Code Bits Lengths   Code Bits\
    \ Length(s)\n            ---- ---- ------     ---- ---- -------   ---- ---- -------\n\
    \             257   0     3       267   1   15,16     277   4   67-82\n      \
    \       258   0     4       268   1   17,18     278   4   83-98\n            \
    \ 259   0     5       269   2   19-22     279   4   99-114\n             260 \
    \  0     6       270   2   23-26     280   4  115-130\n             261   0  \
    \   7       271   2   27-30     281   5  131-162\n             262   0     8 \
    \      272   2   31-34     282   5  163-194\n             263   0     9      \
    \ 273   3   35-42     283   5  195-226\n             264   0    10       274 \
    \  3   43-50     284   5  227-257\n             265   1  11,12      275   3  \
    \ 51-58     285   0    258\n             266   1  13,14      276   3   59-66\n\
    \         The extra bits should be interpreted as a machine integer\n        \
    \ stored with the most-significant bit first, e.g., bits 1110\n         represent\
    \ the value 14.\n                  Extra           Extra               Extra\n\
    \             Code Bits Dist  Code Bits   Dist     Code Bits Distance\n      \
    \       ---- ---- ----  ---- ----  ------    ---- ---- --------\n            \
    \   0   0    1     10   4     33-48    20    9   1025-1536\n               1 \
    \  0    2     11   4     49-64    21    9   1537-2048\n               2   0  \
    \  3     12   5     65-96    22   10   2049-3072\n               3   0    4  \
    \   13   5     97-128   23   10   3073-4096\n               4   1   5,6    14\
    \   6    129-192   24   11   4097-6144\n               5   1   7,8    15   6 \
    \   193-256   25   11   6145-8192\n               6   2   9-12   16   7    257-384\
    \   26   12  8193-12288\n               7   2  13-16   17   7    385-512   27\
    \   12 12289-16384\n               8   3  17-24   18   8    513-768   28   13\
    \ 16385-24576\n               9   3  25-32   19   8   769-1024   29   13 24577-32768\n\
    \      3.2.6. Compression with fixed Huffman codes (BTYPE=01)\n         The Huffman\
    \ codes for the two alphabets are fixed, and are not\n         represented explicitly\
    \ in the data.  The Huffman code lengths\n         for the literal/length alphabet\
    \ are:\n                   Lit Value    Bits        Codes\n                  \
    \ ---------    ----        -----\n                     0 - 143     8         \
    \ 00110000 through\n                                            10111111\n   \
    \                144 - 255     9          110010000 through\n                \
    \                            111111111\n                   256 - 279     7   \
    \       0000000 through\n                                            0010111\n\
    \                   280 - 287     8          11000000 through\n              \
    \                              11000111\n         The code lengths are sufficient\
    \ to generate the actual codes,\n         as described above; we show the codes\
    \ in the table for added\n         clarity.  Literal/length values 286-287 will\
    \ never actually\n         occur in the compressed data, but participate in the\
    \ code\n         construction.\n         Distance codes 0-31 are represented by\
    \ (fixed-length) 5-bit\n         codes, with possible additional bits as shown\
    \ in the table\n         shown in Paragraph 3.2.5, above.  Note that distance\
    \ codes 30-\n         31 will never actually occur in the compressed data.\n \
    \     3.2.7. Compression with dynamic Huffman codes (BTYPE=10)\n         The Huffman\
    \ codes for the two alphabets appear in the block\n         immediately after\
    \ the header bits and before the actual\n         compressed data, first the literal/length\
    \ code and then the\n         distance code.  Each code is defined by a sequence\
    \ of code\n         lengths, as discussed in Paragraph 3.2.2, above.  For even\n\
    \         greater compactness, the code length sequences themselves are\n    \
    \     compressed using a Huffman code.  The alphabet for code lengths\n      \
    \   is as follows:\n               0 - 15: Represent code lengths of 0 - 15\n\
    \                   16: Copy the previous code length 3 - 6 times.\n         \
    \              The next 2 bits indicate repeat length\n                      \
    \       (0 = 3, ... , 3 = 6)\n                          Example:  Codes 8, 16\
    \ (+2 bits 11),\n                                    16 (+2 bits 10) will expand\
    \ to\n                                    12 code lengths of 8 (1 + 6 + 5)\n \
    \                  17: Repeat a code length of 0 for 3 - 10 times.\n         \
    \              (3 bits of length)\n                   18: Repeat a code length\
    \ of 0 for 11 - 138 times\n                       (7 bits of length)\n       \
    \  A code length of 0 indicates that the corresponding symbol in\n         the\
    \ literal/length or distance alphabet will not occur in the\n         block, and\
    \ should not participate in the Huffman code\n         construction algorithm\
    \ given earlier.  If only one distance\n         code is used, it is encoded using\
    \ one bit, not zero bits; in\n         this case there is a single code length\
    \ of one, with one unused\n         code.  One distance code of zero bits means\
    \ that there are no\n         distance codes used at all (the data is all literals).\n\
    \         We can now define the format of the block:\n               5 Bits: HLIT,\
    \ # of Literal/Length codes - 257 (257 - 286)\n               5 Bits: HDIST, #\
    \ of Distance codes - 1        (1 - 32)\n               4 Bits: HCLEN, # of Code\
    \ Length codes - 4     (4 - 19)\n               (HCLEN + 4) x 3 bits: code lengths\
    \ for the code length\n                  alphabet given just above, in the order:\
    \ 16, 17, 18,\n                  0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14,\
    \ 1, 15\n                  These code lengths are interpreted as 3-bit integers\n\
    \                  (0-7); as above, a code length of 0 means the\n           \
    \       corresponding symbol (literal/length or distance code\n              \
    \    length) is not used.\n               HLIT + 257 code lengths for the literal/length\
    \ alphabet,\n                  encoded using the code length Huffman code\n  \
    \             HDIST + 1 code lengths for the distance alphabet,\n            \
    \      encoded using the code length Huffman code\n               The actual compressed\
    \ data of the block,\n                  encoded using the literal/length and distance\
    \ Huffman\n                  codes\n               The literal/length symbol 256\
    \ (end of data),\n                  encoded using the literal/length Huffman code\n\
    \         The code length repeat codes can cross from HLIT + 257 to the\n    \
    \     HDIST + 1 code lengths.  In other words, all code lengths form\n       \
    \  a single sequence of HLIT + HDIST + 258 values.\n   3.3. Compliance\n     \
    \ A compressor may limit further the ranges of values specified in\n      the\
    \ previous section and still be compliant; for example, it may\n      limit the\
    \ range of backward pointers to some value smaller than\n      32K.  Similarly,\
    \ a compressor may limit the size of blocks so that\n      a compressible block\
    \ fits in memory.\n      A compliant decompressor must accept the full range of\
    \ possible\n      values defined in the previous section, and must accept blocks\
    \ of\n      arbitrary size.\n"
- title: 4. Compression algorithm details
  contents:
  - "4. Compression algorithm details\n   While it is the intent of this document\
    \ to define the \"deflate\"\n   compressed data format without reference to any\
    \ particular\n   compression algorithm, the format is related to the compressed\n\
    \   formats produced by LZ77 (Lempel-Ziv 1977, see reference [2] below);\n   since\
    \ many variations of LZ77 are patented, it is strongly\n   recommended that the\
    \ implementor of a compressor follow the general\n   algorithm presented here,\
    \ which is known not to be patented per se.\n   The material in this section is\
    \ not part of the definition of the\n   specification per se, and a compressor\
    \ need not follow it in order to\n   be compliant.\n   The compressor terminates\
    \ a block when it determines that starting a\n   new block with fresh trees would\
    \ be useful, or when the block size\n   fills up the compressor's block buffer.\n\
    \   The compressor uses a chained hash table to find duplicated strings,\n   using\
    \ a hash function that operates on 3-byte sequences.  At any\n   given point during\
    \ compression, let XYZ be the next 3 input bytes to\n   be examined (not necessarily\
    \ all different, of course).  First, the\n   compressor examines the hash chain\
    \ for XYZ.  If the chain is empty,\n   the compressor simply writes out X as a\
    \ literal byte and advances one\n   byte in the input.  If the hash chain is not\
    \ empty, indicating that\n   the sequence XYZ (or, if we are unlucky, some other\
    \ 3 bytes with the\n   same hash function value) has occurred recently, the compressor\n\
    \   compares all strings on the XYZ hash chain with the actual input data\n  \
    \ sequence starting at the current point, and selects the longest\n   match.\n\
    \   The compressor searches the hash chains starting with the most recent\n  \
    \ strings, to favor small distances and thus take advantage of the\n   Huffman\
    \ encoding.  The hash chains are singly linked. There are no\n   deletions from\
    \ the hash chains; the algorithm simply discards matches\n   that are too old.\
    \  To avoid a worst-case situation, very long hash\n   chains are arbitrarily\
    \ truncated at a certain length, determined by a\n   run-time parameter.\n   To\
    \ improve overall compression, the compressor optionally defers the\n   selection\
    \ of matches (\"lazy matching\"): after a match of length N has\n   been found,\
    \ the compressor searches for a longer match starting at\n   the next input byte.\
    \  If it finds a longer match, it truncates the\n   previous match to a length\
    \ of one (thus producing a single literal\n   byte) and then emits the longer\
    \ match.  Otherwise, it emits the\n   original match, and, as described above,\
    \ advances N bytes before\n   continuing.\n   Run-time parameters also control\
    \ this \"lazy match\" procedure.  If\n   compression ratio is most important,\
    \ the compressor attempts a\n   complete second search regardless of the length\
    \ of the first match.\n   In the normal case, if the current match is \"long enough\"\
    , the\n   compressor reduces the search for a longer match, thus speeding up\n\
    \   the process.  If speed is most important, the compressor inserts new\n   strings\
    \ in the hash table only when no match was found, or when the\n   match is not\
    \ \"too long\".  This degrades the compression ratio but\n   saves time since\
    \ there are both fewer insertions and fewer searches.\n"
- title: 5. References
  contents:
  - "5. References\n   [1] Huffman, D. A., \"A Method for the Construction of Minimum\n\
    \       Redundancy Codes\", Proceedings of the Institute of Radio\n       Engineers,\
    \ September 1952, Volume 40, Number 9, pp. 1098-1101.\n   [2] Ziv J., Lempel A.,\
    \ \"A Universal Algorithm for Sequential Data\n       Compression\", IEEE Transactions\
    \ on Information Theory, Vol. 23,\n       No. 3, pp. 337-343.\n   [3] Gailly,\
    \ J.-L., and Adler, M., ZLIB documentation and sources,\n       available in ftp://ftp.uu.net/pub/archiving/zip/doc/\n\
    \   [4] Gailly, J.-L., and Adler, M., GZIP documentation and sources,\n      \
    \ available as gzip-*.tar in ftp://prep.ai.mit.edu/pub/gnu/\n   [5] Schwartz,\
    \ E. S., and Kallick, B. \"Generating a canonical prefix\n       encoding.\" Comm.\
    \ ACM, 7,3 (Mar. 1964), pp. 166-169.\n   [6] Hirschberg and Lelewer, \"Efficient\
    \ decoding of prefix codes,\"\n       Comm. ACM, 33,4, April 1990, pp. 449-459.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Any data compression method involves the reduction\
    \ of redundancy in\n   the data.  Consequently, any corruption of the data is\
    \ likely to have\n   severe effects and be difficult to correct.  Uncompressed\
    \ text, on\n   the other hand, will probably still be readable despite the presence\n\
    \   of some corrupted bytes.\n   It is recommended that systems using this data\
    \ format provide some\n   means of validating the integrity of the compressed\
    \ data.  See\n   reference [3], for example.\n"
- title: 7. Source code
  contents:
  - "7. Source code\n   Source code for a C language implementation of a \"deflate\"\
    \ compliant\n   compressor and decompressor is available within the zlib package\
    \ at\n   ftp://ftp.uu.net/pub/archiving/zip/zlib/.\n"
- title: 8. Acknowledgements
  contents:
  - "8. Acknowledgements\n   Trademarks cited in this document are the property of\
    \ their\n   respective owners.\n   Phil Katz designed the deflate format.  Jean-Loup\
    \ Gailly and Mark\n   Adler wrote the related software described in this specification.\n\
    \   Glenn Randers-Pehrson converted this document to RFC and HTML format.\n"
- title: 9. Author's Address
  contents:
  - "9. Author's Address\n   L. Peter Deutsch\n   Aladdin Enterprises\n   203 Santa\
    \ Margarita Ave.\n   Menlo Park, CA 94025\n   Phone: (415) 322-0103 (AM only)\n\
    \   FAX:   (415) 322-1734\n   EMail: <ghost@aladdin.com>\n   Questions about the\
    \ technical content of this specification can be\n   sent by email to:\n   Jean-Loup\
    \ Gailly <gzip@prep.ai.mit.edu> and\n   Mark Adler <madler@alumni.caltech.edu>\n\
    \   Editorial comments on this specification can be sent by email to:\n   L. Peter\
    \ Deutsch <ghost@aladdin.com> and\n   Glenn Randers-Pehrson <randeg@alumni.rpi.edu>\n"
