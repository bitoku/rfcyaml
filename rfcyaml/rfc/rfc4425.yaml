- contents:
  - '              RTP Payload Format for Video Codec 1 (VC-1)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo specifies an RTP payload format for encapsulating Video\n
    \  Codec 1 (VC-1) compressed bit streams, as defined by the Society of\n   Motion
    Picture and Television Engineers (SMPTE) standard, SMPTE 421M.\n   SMPTE is the
    main standardizing body in the motion imaging industry,\n   and the SMPTE 421M
    standard defines a compressed video bit stream\n   format and decoding process
    for television.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Conventions Used in This Document ..........................3\n   2.
    Definitions and Abbreviations ...................................3\n   3. Overview
    of VC-1 ................................................5\n      3.1. VC-1 Bit
    Stream Layering Model .............................6\n      3.2. Bit-stream Data
    Units in Advanced Profile ..................7\n      3.3. Decoder Initialization
    Parameters ..........................7\n      3.4. Ordering of Frames .........................................8\n
    \  4. Encapsulation of VC-1 Format Bit Streams in RTP .................9\n      4.1.
    Access Units ...............................................9\n      4.2. Fragmentation
    of VC-1 frames ..............................10\n      4.3. Time Stamp Considerations
    .................................11\n      4.4. Random Access Points ......................................13\n
    \     4.5. Removal of HRD Parameters .................................14\n      4.6.
    Repeating the Sequence Layer Header .......................14\n      4.7. Signaling
    of Media Type Parameters ........................15\n      4.8. The \"mode=1\"
    Media Type Parameter .........................16\n      4.9. The \"mode=3\" Media
    Type Parameter .........................16\n   5. RTP Payload Format Syntax ......................................17\n
    \     5.1. RTP Header Usage ..........................................17\n      5.2.
    AU Header Syntax ..........................................18\n      5.3. AU Control
    Field Syntax ...................................19\n   6. RTP Payload Format Parameters
    ..................................20\n      6.1. Media type Registration ...................................20\n
    \     6.2. Mapping of media type parameters to SDP ...................28\n      6.3.
    Usage with the SDP Offer/Answer Model .....................29\n      6.4. Usage
    in Declarative Session Descriptions .................31\n   7. Security Considerations
    ........................................32\n   8. Congestion Control .............................................33\n
    \  9. IANA Considerations ............................................34\n   10.
    References ....................................................34\n      10.1.
    Normative References .....................................34\n      10.2. Informative
    References ...................................35\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo specifies an RTP payload format for the video
    coding\n   standard Video Codec 1, also known as VC-1.  The specification for\n
    \  the VC-1 bit stream format and decoding process is published by the\n   Society
    of Motion Picture and Television Engineers (SMPTE) as SMPTE\n   421M [1].\n   VC-1
    has a broad applicability, as it is suitable for low bit rate\n   Internet streaming
    applications to High Definition Television (HDTV)\n   broadcast and Digital Cinema
    applications with nearly lossless\n   coding.  The overall performance of VC-1
    is such that bit rate\n   savings of more than 50% are reported [9] when compared
    with MPEG-2.\n   See [9] for further details about how VC-1 compares with other\n
    \  codecs, such as MPEG-4 and H.264/AVC.  (In [9], VC-1 is referred to\n   by
    its earlier name, VC-9.)\n   VC-1 is widely used for downloading and streaming
    movies on the\n   Internet, in the form of Windows Media Video 9 (WMV-9) [9],
    because\n   the WMV-9 codec is compliant with the VC-1 standard.  VC-1 has also\n
    \  recently been adopted as a mandatory compression format for the\n   high-definition
    DVD formats HD DVD and Blu-ray.\n   SMPTE 421M defines the VC-1 bit stream syntax
    and specifies\n   constraints that must be met by VC-1 conformant bit streams.
    \ SMPTE\n   421M also specifies the complete process required to decode the bit\n
    \  stream.  However, it does not specify the VC-1 compression algorithm,\n   thus
    allowing for different ways of implementing a VC-1 encoder.\n   The VC-1 bit stream
    syntax has three profiles.  Each profile has\n   specific bit stream syntax elements
    and algorithms associated with\n   it.  Depending on the application in which
    VC-1 is used, some\n   profiles may be more suitable than others.  For example,
    Simple\n   profile is designed for low bit rate Internet streaming and for\n   playback
    on devices that can only handle low-complexity decoding.\n   Advanced profile
    is designed for broadcast applications, such as\n   digital TV, HD DVD, or HDTV.
    \ Advanced profile is the only VC-1\n   profile that supports interlaced video
    frames and non-square pixels.\n   Section 2 defines the abbreviations used in
    this document.  Section 3\n   provides a more detailed overview of VC-1.  Sections
    4 and 5 define\n   the RTP payload format for VC-1, and section 6 defines the
    media type\n   and SDP parameters for VC-1.  See section 7 for security\n   considerations,
    and section 8 for congestion control requirements.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in BCP 14, RFC 2119 [2].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Definitions and Abbreviations\n   This document uses the definitions in SMPTE
    421M [1].  For\n   convenience, the following terms from SMPTE 421M are restated
    here:\n   B-picture:\n         A picture that is coded using motion compensated
    prediction\n         from past and/or future reference fields or frames.  A\n
    \        B-picture cannot be used for predicting any other picture.\n   BI-picture:\n
    \        A B-picture that is coded using information only from itself.\n         A
    BI-picture cannot be used for predicting any other picture.\n   Bit-stream data
    unit (BDU):\n         A unit of the compressed data which may be parsed (i.e.,
    syntax\n         decoded) independently of other information at the same\n         hierarchical
    level.  A BDU can be, for example, a sequence\n         layer header, an entry-point
    header, a frame, or a slice.\n   Encapsulated BDU (EBDU):\n         A BDU that
    has been encapsulated using the encapsulation\n         mechanism described in
    Annex E of SMPTE 421M [1], to prevent\n         emulation of the start code prefix
    in the bit stream.\n   Entry-point:\n         A point in the bit stream that offers
    random access.\n   frame:\n         A frame contains lines of spatial information
    of a video\n         signal.  For progressive video, these lines contain samples\n
    \        starting from one time instant and continuing through\n         successive
    lines to the bottom of the frame.  For interlaced\n         video, a frame consists
    of two fields, a top field and a bottom\n         field.  One of these fields
    will commence one field period\n         later than the other.\n   interlace:\n
    \        The property of frames where alternating lines of the frame\n         represent
    different instances in time.  In an interlaced frame,\n         one of the fields
    is meant to be displayed first.\n   I-picture:\n         A picture coded using
    information only from itself.\n   level:\n         A defined set of constraints
    on the values that may be taken by\n         the parameters (such as bit rate
    and buffer size) within a\n         particular profile.  A profile may contain
    one or more levels.\n   P-picture:\n         A picture that is coded using motion
    compensated prediction\n         from past reference fields or frames.\n   picture:\n
    \        For progressive video, a picture is identical to a frame, while\n         for
    interlaced video, a picture may refer to a frame, or the\n         top field or
    the bottom field of the frame depending on the\n         context.\n   profile:\n
    \        A defined subset of the syntax of VC-1 with a specific set of\n         coding
    tools, algorithms, and syntax associated with it.  There\n         are three VC-1
    profiles: Simple, Main, and Advanced.\n   progressive:\n         The property
    of frames where all the samples of the frame\n         represent the same instance
    in time.\n   random access:\n         A random access point in the bit stream
    is defined by the\n         following guarantee: If decoding begins at this point,
    all\n         frames needed for display after this point will have no\n         decoding
    dependency on any data preceding this point, and they\n         are also present
    in the decoding sequence after this point.  A\n         random access point is
    also called an entry-point.\n   sequence:\n         A coded representation of
    a series of one or more pictures.  In\n         VC-1 Advanced profile, a sequence
    consists of a series of one\n         or more entry-point segments, where each
    entry-point segment\n         consists of a series of one or more pictures, and
    where the\n         first picture in each entry-point segment provides random\n
    \        access.  In VC-1 Simple and Main profiles, the first picture in\n         each
    sequence is an I-picture.\n   slice:\n         A consecutive series of macroblock
    rows in a picture, which are\n         encoded as a single unit.\n   start codes
    (SC):\n         Unique 32-bit codes that are embedded in the coded bit stream\n
    \        and identify the beginning of a BDU.  Start codes consist of a\n         unique
    three-byte Start Code Prefix (SCP), and a one-byte Start\n         Code Suffix
    (SCS).\n"
  title: 2.  Definitions and Abbreviations
- contents:
  - "3.  Overview of VC-1\n   The VC-1 bit stream syntax consists of three profiles:
    Simple, Main,\n   and Advanced.  Simple profile is designed for low bit rates
    and for\n   low complexity applications, such as playback of media on personal\n
    \  digital assistants.  The maximum bit rate supported by Simple profile\n   is
    384 kbps.  Main profile targets high bit rate applications, such\n   as streaming
    and TV over IP.  Main profile supports B-pictures, which\n   provide improved
    compression efficiency at the cost of higher\n   complexity.\n   Certain features
    that can be used to achieve high compression\n   efficiency, such as non-square
    pixels and support for interlaced\n   pictures, are only included in Advanced
    profile.  The maximum bit\n   rate supported by the Advanced profile is 135 Mbps,
    making it\n   suitable for nearly lossless encoding of HDTV signals.\n   Only
    Advanced profile supports carrying user-data (meta-data) in-band\n   with the
    compressed bit stream.  The user-data can be used for closed\n   captioning support,
    for example.\n   Of the three profiles, only Advanced profile allows codec\n   configuration
    parameters, such as the picture aspect ratio, to be\n   changed through in-band
    signaling in the compressed bit stream.\n   For each of the profiles, a certain
    number of \"levels\" have been\n   defined.  Unlike a \"profile\", which implies
    a certain set of features\n   or syntax elements, a \"level\" is a set of constraints
    on the values\n   of parameters in a profile, such as the bit rate or buffer size.\n
    \  VC-1 Simple profile has two levels, Main profile has three, and\n   Advanced
    profile has five.  See Annex D of SMPTE 421M [1] for a\n   detailed list of the
    profiles and levels.\n"
  - contents:
    - "3.1.  VC-1 Bit Stream Layering Model\n   The VC-1 bit stream is defined as
      a hierarchy of layers.  This is\n   conceptually similar to the notion of a
      protocol stack of networking\n   protocols.  The outermost layer is called the
      sequence layer.  The\n   other layers are entry-point, picture, slice, macroblock,
      and block.\n   In Simple and Main profiles, a sequence in the sequence layer\n
      \  consists of a series of one or more coded pictures.  In Advanced\n   profile,
      a sequence consists of one or more entry-point segments,\n   where each entry-point
      segment consists of a series of one or more\n   pictures, and where the first
      picture in each entry-point segment\n   provides random access.  A picture is
      decomposed into macroblocks.  A\n   slice comprises one or more contiguous rows
      of macroblocks.\n   The entry-point and slice layers are only present in Advanced\n
      \  profile.  In Advanced profile, the start of each entry-point layer\n   segment
      indicates a random access point.  In Simple and Main\n   profiles, each I-picture
      is a random access point.\n   Each picture can be coded as an I-picture, P-picture,
      skipped\n   picture, BI-picture, or as a B-picture.  These terms are defined
      in\n   section 2 of this document and in section 4.12 of SMPTE 421M [1].\n"
    title: 3.1.  VC-1 Bit Stream Layering Model
  - contents:
    - "3.2.  Bit-stream Data Units in Advanced Profile\n   In Advanced profile, each
      picture and slice is considered a Bit-\n   stream Data Unit (BDU).  A BDU is
      always byte-aligned and is defined\n   as a unit that can be parsed (i.e., syntax
      decoded) independently of\n   other information in the same layer.\n   The beginning
      of a BDU is signaled by an identifier called Start Code\n   (SC).  Sequence
      layer headers and entry-point headers are also BDUs\n   and thus can be easily
      identified by their Start Codes.  See Annex E\n   of SMPTE 421M [1] for a complete
      list of Start Codes.  Blocks and\n   macroblocks are not BDUs and thus do not
      have a Start Code and are\n   not necessarily byte-aligned.\n   The Start Code
      consists of four bytes.  The first three bytes are\n   0x00, 0x00 and 0x01.
      \ The fourth byte is called the Start Code Suffix\n   (SCS) and it is used to
      indicate the type of BDU that follows the\n   Start Code.  For example, the
      SCS of a sequence layer header (0x0F)\n   is different from the SCS of an entry-point
      header (0x0E).  The Start\n   Code is always byte-aligned and is transmitted
      in network byte order.\n   To prevent accidental emulation of the Start Code
      in the coded bit\n   stream, SMPTE 421M defines an encapsulation mechanism that
      uses byte\n   stuffing.  A BDU that has been encapsulated by this mechanism
      is\n   referred to as an Encapsulated BDU, or EBDU.\n"
    title: 3.2.  Bit-stream Data Units in Advanced Profile
  - contents:
    - "3.3.  Decoder Initialization Parameters\n   In VC-1 Advanced profile, the sequence
      layer header contains\n   parameters that are necessary to initialize the VC-1
      decoder.\n   The parameters apply to all entry-point segments until the next\n
      \  occurrence of a sequence layer header in the coded bit stream.\n   The parameters
      in the sequence layer header include the Advanced\n   profile level, the maximum
      dimensions of the coded frames, the aspect\n   ratio, interlace information,
      the frame rate and up to 31 leaky\n   bucket parameter sets for the Hypothetical
      Reference Decoder (HRD).\n   Section 6.1 of SMPTE 421M [1] provides the formal
      specification of\n   the sequence layer header.\n   A sequence layer header
      is not defined for VC-1 Simple and Main\n   profiles.  For these profiles, decoder
      initialization parameters MUST\n   be conveyed out-of-band.  The decoder initialization
      parameters for\n   Simple and Main profiles include the maximum dimensions of
      the coded\n   frames and a leaky bucket parameter set for the HRD.  Section
      4.7\n   specifies how the parameters are conveyed by this RTP payload format.\n
      \  Each leaky bucket parameter set for the HRD specifies a peak\n   transmission
      bit rate and a decoder buffer capacity.  The coded bit\n   stream is restricted
      by these parameters.  The HRD model does not\n   mandate buffering by the decoder.
      \ Its purpose is to limit the\n   encoder's bit rate fluctuations according
      to a basic buffering model\n   so that the resources necessary to decode the
      bit stream are\n   predictable.  The HRD has a constant-delay mode and a variable-delay\n
      \  mode.  The constant-delay mode is appropriate for broadcast and\n   streaming
      applications, while the variable-delay mode is designed for\n   video-conferencing
      applications.\n   Annex C of SMPTE 421M [1] specifies the usage of the hypothetical\n
      \  reference decoder for VC-1 bit streams.  A general description of the\n   theory
      of the HRD can be found in [10].\n   For Simple and Main profiles, the current
      buffer fullness value for\n   the HRD leaky bucket is signaled using the BF
      syntax element in the\n   picture header of I-pictures and BI-pictures.\n   For
      Advanced profile, the entry-point header specifies current buffer\n   fullness
      values for the leaky buckets in the HRD.  The entry-point\n   header also specifies
      coding control parameters that are in effect\n   until the occurrence of the
      next entry-point header in the bit\n   stream.  The concept of an entry-point
      layer applies only to VC-1\n   Advanced profile.  See Section 6.2 of SMPTE 421M
      [1] for the formal\n   specification of the entry-point header.\n"
    title: 3.3.  Decoder Initialization Parameters
  - contents:
    - "3.4.  Ordering of Frames\n   Frames are transmitted in the same order in which
      they are captured,\n   except if B-pictures or BI-pictures are present in the
      coded bit\n   stream.  A BI-picture is a special kind of B-picture, and in the\n
      \  remainder of this section the terms B-picture and B-frame also apply\n   to
      BI-pictures and BI-frames, respectively.\n   When B-pictures are present in
      the coded bit stream, the frames are\n   transmitted such that the frames that
      the B-pictures depend on are\n   transmitted first.  This is referred to as
      the coded order of the\n   frames.\n   The rules for how a decoder converts
      frames from the coded order to\n   the display order are stated in section 5.4
      of SMPTE 421M [1].  In\n   short, if B-pictures may be present in the coded
      bit stream, a\n   hypothetical decoder implementation needs to buffer one additional\n
      \  decoded frame.  When an I-frame or a P-frame is received, the frame\n   can
      be decoded immediately but it is not displayed until the next I-\n   or P-frame
      is received.  However, B-frames are displayed immediately.\n   Figure 1 illustrates
      the timing relationship between the capture of\n   frames, their coded order,
      and the display order of the decoded\n   frames, when B-pictures are present
      in the coded bit stream.  The\n   figure shows that the display of frame P4
      is delayed until frame P7\n   is received, while frames B2 and B3 are displayed
      immediately.\n   Capture:        |I0  P1  B2  B3  P4  B5  B6  P7  B8  B9  ...\n
      \                  |\n   Coded order:    |        I0  P1  P4  B2  B3  P7  B5
      \ B6  ...\n                   |\n   Display order:  |            I0  P1  B2
      \ B3  P4  B5  B6  ...\n                   |\n                   |+---+---+---+---+---+---+---+---+---+-->
      time\n                    0   1   2   3   4   5   6   7   8   9\n      Figure
      1.  Frame reordering when B-pictures are present\n   If B-pictures are not present,
      the coded order and the display order\n   are identical, and frames can then
      be displayed without the\n   additional delay shown in Figure 1.\n"
    title: 3.4.  Ordering of Frames
  title: 3.  Overview of VC-1
- contents:
  - '4.  Encapsulation of VC-1 Format Bit Streams in RTP

    '
  - contents:
    - "4.1.  Access Units\n   Each RTP packet contains an integral number of application
      data units\n   (ADUs).  For VC-1 format bit streams, an ADU is equivalent to
      one\n   Access Unit (AU).  An Access Unit is defined as the AU header\n   (defined
      in section 5.2) followed by a variable length payload, with\n   the rules and
      constraints described in sections 4.1 and 4.2.  Figure\n   2 shows the layout
      of an RTP packet with multiple AUs.\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-
      .. +-+-+-+-+\n               | RTP     | AU(1) | AU(2) |     | AU(n) |\n               |
      Header  |       |       |     |       |\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-
      .. +-+-+-+-+\n                    Figure 2.  RTP packet structure\n   Each Access
      Unit MUST start with the AU header defined in section\n   5.2.  The AU payload
      MUST contain data belonging to exactly one VC-1\n   frame.  This means that
      data from different VC-1 frames will always\n   be in different AUs.  However,
      it possible for a single VC-1 frame to\n   be fragmented across multiple AUs
      (see section 4.2).\n   In the case of interlaced video, a VC-1 frame consists
      of two fields\n   that may be coded as separate pictures.  The two pictures
      still\n   belong to the same VC-1 frame.\n   The following rules apply to the
      contents of each AU payload when\n   VC-1 Advanced profile is used:\n   -  The
      AU payload MUST contain VC-1 bit stream data in EBDU format\n      (i.e., the
      bit stream must use the byte-stuffing encapsulation\n      mode defined in Annex
      E of SMPTE 421M [1].)\n   -  The AU payload MAY contain multiple EBDUs, e.g.,
      a sequence layer\n      header, an entry-point header, a frame (picture) header,
      a field\n      header, and multiple slices and the associated user-data.\n      However,
      all slices and their corresponding macroblocks MUST\n      belong to the same
      video frame.\n   -  The AU payload MUST start at an EBDU boundary, except when
      the AU\n      payload contains a fragmented frame, in which case the rules in\n
      \     section 4.2 apply.\n   When VC-1 Simple or Main profiles are used, the
      AU payload MUST start\n   at the beginning of a frame, except when the AU payload
      contains a\n   fragmented frame.  Section 4.2 describes how to handle fragmented\n
      \  frames.\n   Access Units MUST be byte-aligned.  If the data in an AU (EBDUs
      in\n   the case of Advanced profile and frame in the case of Simple and\n   Main)
      does not end at an octet boundary, up to 7 zero-valued padding\n   bits MUST
      be added to achieve octet-alignment.\n"
    title: 4.1.  Access Units
  - contents:
    - "4.2.  Fragmentation of VC-1 frames\n   Each AU payload SHOULD contain a complete
      VC-1 frame.  However, if\n   this would cause the RTP packet to exceed the MTU
      size, the frame\n   SHOULD be fragmented into multiple AUs to avoid IP-level\n
      \  fragmentation.  When an AU contains a fragmented frame, this MUST be\n   indicated
      by setting the FRAG field in the AU header as defined in\n   section 5.3.\n
      \  AU payloads that do not contain a fragmented frame or that contain\n   the
      first fragment of a frame MUST start at an EBDU boundary if\n   Advanced profile
      is used.  In this case, for Simple and Main\n   profiles, the AU payload MUST
      start at the beginning of a frame.\n   If Advanced profile is used, AU payloads
      that contain a fragment of a\n   frame other than the first fragment SHOULD
      start at an EBDU boundary,\n   such as at the start of a slice.\n   However,
      slices are only defined for Advanced profile, and are not\n   always used.  Blocks
      and macroblocks are not BDUs (have no Start\n   Code) and are not byte-aligned.
      \ Therefore, it may not always be\n   possible to continue a fragmented frame
      at an EBDU boundary.  One can\n   determine if an AU payload starts at an EBDU
      boundary by inspecting\n   the first three bytes of the AU payload.  The AU
      payload starts at an\n   EBDU boundary if the first three bytes are identical
      to the Start\n   Code Prefix (i.e., 0x00, 0x00, 0x01).\n   In the case of Simple
      and Main profiles, since the blocks and\n   macroblocks are not byte-aligned,
      the fragmentation boundary may be\n   chosen arbitrarily.\n   If an RTP packet
      contains an AU with the last fragment of a frame,\n   additional AUs SHOULD
      NOT be included in the RTP packet.\n   If the PTS Delta field in the AU header
      is present, each fragment of\n   a frame MUST have the same presentation time.
      \ If the DTS Delta field\n   in the AU header is present, each fragment of a
      frame MUST have the\n   same decode time.\n"
    title: 4.2.  Fragmentation of VC-1 frames
  - contents:
    - "4.3.  Time Stamp Considerations\n   VC-1 video frames MUST be transmitted in
      the coded order.  A coded\n   order implies that no frames are dependent on
      subsequent frames, as\n   discussed in section 3.4.  When a video frame consists
      of a single\n   picture, the presentation time of the frame is identical to
      the\n   presentation time of the picture.  When the VC-1 interlace coding\n
      \  mode is used, frames may contain two pictures, one for each field.\n   In
      that case, the presentation time of a frame is the presentation\n   time of
      the field that is displayed first.\n   The RTP timestamp field MUST be set to
      the presentation time of the\n   video frame contained in the first AU in the
      RTP packet.  The\n   presentation time can be used as the timestamp field in
      the RTP\n   header because it differs from the sampling instant of the frame
      only\n   by an arbitrary constant offset.\n   If the video frame in an AU has
      a presentation time that differs from\n   the RTP timestamp field, then the
      presentation time MUST be specified\n   using the PTS Delta field in the AU
      header.  Since the RTP timestamp\n   field must be identical to the presentation
      time of the first video\n   frame, this can only happen if an RTP packet contains
      multiple AUs.\n   The syntax of the PTS Delta field is defined in section 5.2.\n
      \  The decode time of a VC-1 frame is always monotonically increasing\n   when
      the video frames are transmitted in the coded order.  If neither\n   B- nor
      BI-pictures are present in the coded bit stream, then the\n   decode time of
      a frame SHALL be equal to the presentation time of the\n   frame.  A BI-picture
      is a special kind of B-picture, and in the\n   remainder of this section the
      terms B-picture and B-frame also apply\n   to BI-pictures and BI-frames, respectively.\n
      \  If B-pictures may be present in the coded bit stream, then the decode\n   times
      of frames are determined as follows:\n   -  B-frames:\n      The decode time
      SHALL be equal to the presentation time of the\n      B-frame.\n   -  First
      non-B frame in the coded order:\n      The decode time SHALL be at least one
      frame period less than the\n      decode time of the next frame in the coded
      order.  A frame period\n      is defined as the inverse of the frame rate used
      in the coded bit\n      stream (e.g., 100 milliseconds if the frame rate is
      10 frames per\n      seconds.)  For bit streams with a variable frame rate,
      the maximum\n      frame rate SHALL determine the frame period.  If the maximum
      frame\n      is not specified, the maximum frame rate allowed by the profile\n
      \     and level SHALL be used.\n   -  Non-B frames (other than the first frame
      in the coded order):\n      The decode time SHALL be equal to the presentation
      time of the\n      previous non-B frame in the coded order.\n   As an example,
      consider Figure 1 in section 3.4.  To determine the\n   decode time of the first
      frame, I0, one must first determine the\n   decode time of the next frame, P1.
      \ Because P1 is a non-B frame, its\n   decode time is equal to the presentation
      time of I0, which is 3 time\n   units.  Thus, the decode time of I0 must be
      at least one frame period\n   less than 3.  In this example, the frame period
      is 1, because one\n   frame is displayed every time unit.  Consequently, the
      decode time of\n   I0 is chosen as 2 time units.  The decode time of the third
      frame in\n   the coded order, P4, is 4, because it must be equal to the\n   presentation
      time of the previous non-B frame in the coded order, P1.\n   On the other hand,
      the decode time of B-frame B2 is 5 time units,\n   which is identical to its
      presentation time.\n   If the decode time of a video frame differs from its
      presentation\n   time, then the decode time MUST be specified using the DTS
      Delta\n   field in the AU header.  The syntax of the DTS Delta field is defined\n
      \  in section 5.2.\n   Receivers are not required to use the DTS Delta field.
      \ However,\n   possible uses include buffer management and pacing of frames
      prior to\n   decoding.  If RTP packets are lost, it is possible to use the DTS\n
      \  Delta field to determine if the sequence of lost RTP packets\n   contained
      reference frames or only B-frames.  This can be done by\n   comparing the decode
      and presentation times of the first frame\n   received after the lost sequence
      against the presentation time of the\n   last reference frame received prior
      to the lost sequence.\n   Knowing if the stream will contain B-pictures may
      help the receiver\n   allocate resources more efficiently and can reduce delay,
      as an\n   absence of B-pictures in the stream implies that no reordering of\n
      \  frames will be needed between the decoding process and the display of\n   the
      decoded frames.  This may be important for interactive\n   applications.\n   The
      receiver SHALL assume that the coded bit stream may contain\n   B-pictures in
      the following cases:\n   -  Advanced profile:\n      If the value of the \"bpic\"
      media type parameter defined in section\n      6.1 is 1, or if the \"bpic\"
      parameter is not specified.\n   -  Main profile:\n      If the MAXBFRAMES field
      in STRUCT_C decoder initialization\n      parameter has a non-zero value.  STRUCT_C
      is conveyed in the\n      \"config\" media type parameter, which is defined
      in section 6.1.\n   Simple profile does not use B-pictures.\n"
    title: 4.3.  Time Stamp Considerations
  - contents:
    - "4.4.  Random Access Points\n   The entry-point header contains information
      that is needed by the\n   decoder to decode the frames in that entry-point segment.
      \ This means\n   that in the event of lost RTP packets, the decoder may be unable
      to\n   decode frames until the next entry-point header is received.\n   The
      first frame after an entry-point header is a random access point\n   into the
      coded bit stream.  Simple and Main profiles do not have\n   entry-point headers,
      so for those profiles, each I-picture is a\n   random access point.\n   To allow
      the RTP receiver to detect that an RTP packet that was lost\n   contained a
      random access point, this RTP payload format defines a\n   field called \"RA
      Count\".  This field is present in every AU, and its\n   value is incremented
      (modulo 256) for every random access point.  For\n   additional details, see
      the definition of \"RA Count\" in section 5.2.\n   To make it easy to determine
      if an AU contains a random access point,\n   this RTP payload format also defines
      a bit called the \"RA\" flag in\n   the AU Control field.  This bit is set to
      1 only on those AU's that\n   contain a random access point.  The RA bit is
      defined in section 5.3.\n"
    title: 4.4.  Random Access Points
  - contents:
    - "4.5.  Removal of HRD Parameters\n   The sequence layer header of Advanced profile
      may include up to 31\n   leaky bucket parameter sets for the Hypothetical Reference
      Decoder\n   (HRD).  Each leaky bucket parameter set specifies a possible peak\n
      \  transmission bit rate (HRD_RATE) and a decoder buffer capacity\n   (HRD_BUFFER).
      \ See section 3.3 for additional discussion about the\n   HRD.\n   If the actual
      peak transmission rate is known by the RTP sender, the\n   RTP sender MAY remove
      all leaky bucket parameter sets except for the\n   one corresponding to the
      actual peak transmission rate.\n   For each leaky bucket parameter set in the
      sequence layer header,\n   there is also a parameter in the entry-point header
      that specifies\n   the initial fullness (HRD_FULL) of the leaky bucket.\n   If
      the RTP sender has removed any leaky bucket parameter sets from\n   the sequence
      layer header, then for any removed leaky bucket\n   parameter set, it MUST also
      remove the corresponding HRD_FULL\n   parameter in the entry-point header.\n
      \  Removing leaky bucket parameter sets, as described above, may\n   significantly
      reduce the size of the sequence layer headers and the\n   entry-point headers.\n"
    title: 4.5.  Removal of HRD Parameters
  - contents:
    - "4.6.  Repeating the Sequence Layer Header\n   To improve robustness against
      loss of RTP packets, it is RECOMMENDED\n   that if the sequence layer header
      changes, it should be repeated\n   frequently in the bit stream.  In this case,
      it is RECOMMENDED that\n   the number of leaky bucket parameters in the sequence
      layer header\n   and the entry-point headers be reduced to one, as described
      in\n   section 4.5.  This will help reduce the overhead caused by repeating\n
      \  the sequence layer header.\n   Any data in the VC-1 bit stream, including
      repeated copies of the\n   sequence header itself, must be accounted for when
      computing the\n   leaky bucket parameter for the HRD.  See section 3.3 for a
      discussion\n   about the HRD.\n   If the value of TFCNTRFLAG in the sequence
      layer header is 1, each\n   picture header contains a frame counter field (TFCNTR).
      \ Each time\n   the sequence layer header is inserted in the bit stream, the
      value of\n   this counter MUST be reset.\n   To allow the RTP receiver to detect
      that an RTP packet that was lost\n   contained a new sequence layer header,
      the AU Control field defines a\n   bit called the \"SL\" flag.  This bit is
      toggled when a sequence layer\n   header is transmitted, but only if that header
      is different from the\n   most recently transmitted sequence layer header.  The
      SL bit is\n   defined in section 5.3.\n"
    title: 4.6.  Repeating the Sequence Layer Header
  - contents:
    - "4.7.  Signaling of Media Type Parameters\n   When this RTP payload format is
      used with SDP, the decoder\n   initialization parameters described in section
      3.3 MUST be signaled\n   in SDP using the media type parameters specified in
      section 6.1.\n   Section 6.2 specifies how to map the media type parameters
      to SDP\n   [5], section 6.3 defines rules specific to the SDP Offer/Answer\n
      \  model, and section 6.4 defines rules for when SDP is used in a\n   declarative
      style.\n   When Simple or Main profiles are used, it is not possible to change\n
      \  the decoder initialization parameters through the coded bit stream.\n   Any
      changes to the decoder initialization parameters would have to be\n   done through
      out-of-band means, e.g., by a SIP [14] re-invite or\n   similar means that convey
      an updated session description.\n   When Advanced profile is used, the decoder
      initialization parameters\n   MAY be changed by inserting a new sequence layer
      header or an entry-\n   point header in the coded bit stream.\n   The sequence
      layer header specifies the VC-1 level, the maximum size\n   of the coded frames
      and optionally also the maximum frame rate.  The\n   media type parameters \"level\",
      \"width\", \"height\", and \"framerate\"\n   specify upper limits for these
      parameters.  Thus, the sequence layer\n   header MAY specify values that are
      lower than the values of the media\n   type parameters \"level\", \"width\",
      \"height\", or \"framerate\", but the\n   sequence layer header MUST NOT exceed
      the values of any of these\n   media type parameters.\n"
    title: 4.7.  Signaling of Media Type Parameters
  - contents:
    - "4.8.  The \"mode=1\" Media Type Parameter\n   In certain applications using
      Advanced profile, the sequence layer\n   header never changes.  This MAY be
      signaled with the media type\n   parameter \"mode=1\".  (The \"mode\" parameter
      is defined in section\n   6.1.)  The \"mode=1\" parameter serves as a \"hint\"
      to the RTP receiver\n   that all sequence layer headers in the bit stream will
      be identical.\n   If \"mode=1\" is signaled and a sequence layer header is present
      in the\n   coded bit stream, then it MUST be identical to the sequence layer\n
      \  header specified by the \"config\" media type parameter.\n   Since the sequence
      layer header never changes in \"mode=1\", the RTP\n   sender MAY remove it from
      the bit stream.  Note, however, that if the\n   value of TFCNTRFLAG in the sequence
      layer header is 1, each picture\n   header contains a frame counter field (TFCNTR).
      \ This field is reset\n   each time the sequence layer header occurs in the
      bit stream.  If the\n   RTP sender chooses to remove the sequence layer header,
      then it MUST\n   ensure that the resulting bit stream is still compliant with
      the VC-1\n   specification (e.g., by adjusting the TFCNTR field, if necessary.)\n"
    title: 4.8.  The "mode=1" Media Type Parameter
  - contents:
    - "4.9.  The \"mode=3\" Media Type Parameter\n   In certain applications using
      Advanced profile, both the sequence\n   layer header and the entry-point header
      never change.  This MAY be\n   signaled with the media type parameter \"mode=3\".
      \ The same rules\n   apply to \"mode=3\" as for \"mode=1\", described in section
      4.8.\n   Additionally, if \"mode=3\" is signaled, then the RTP sender MAY\n
      \  \"compress\" the coded bit stream by not including sequence layer\n   headers
      and entry-point headers in the RTP packets.\n   The RTP receiver MUST \"decompress\"
      the coded bit stream by\n   re-inserting the entry-point headers prior to delivering
      the coded\n   bit stream to the VC-1 decoder.  The sequence layer header does
      not\n   need to be decompressed by the receiver, as it never changes.\n   If
      \"mode=3\" is signaled and the RTP receiver receives a complete AU\n   or the
      first fragment of an AU, and the RA bit is set to 1 but the AU\n   does not
      begin with an entry-point header, then this indicates that\n   the entry-point
      header has been \"compressed\".  In that case, the RTP\n   receiver MUST insert
      an entry-point header at the beginning of the\n   AU.  When inserting the entry-point
      header, the RTP receiver MUST use\n   the one that was specified by the \"config\"
      media type parameter.\n"
    title: 4.9.  The "mode=3" Media Type Parameter
  title: 4.  Encapsulation of VC-1 Format Bit Streams in RTP
- contents:
  - '5.  RTP Payload Format Syntax

    '
  - contents:
    - "5.1.  RTP Header Usage\n   The format of the RTP header is specified in RFC
      3550 [3] and is\n   reprinted in Figure 3 for convenience.\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                           timestamp                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |           synchronization source (SSRC) identifier            |\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \     |            contributing source (CSRC) identifiers             |\n      |
      \                            ....                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \               Figure 3.  RTP header according to RFC 3550\n   The fields of
      the fixed RTP header have their usual meaning, which is\n   defined in RFC 3550
      and by the RTP profile in use, with the following\n   additional notes:\n   Marker
      bit (M): 1 bit\n         This bit is set to 1 if the RTP packet contains an
      Access Unit\n         containing a complete VC-1 frame or the last fragment
      of a VC-1\n         frame.\n   Payload type (PT): 7 bits\n         This document
      does not assign an RTP payload type for this RTP\n         payload format.  The
      assignment of a payload type has to be\n         performed either through the
      RTP profile used or in a dynamic\n         way.\n   Sequence Number: 16 bits\n
      \        The RTP receiver can use the sequence number field to recover\n         the
      coded order of the VC-1 frames.  A typical VC-1 decoder\n         will require
      the VC-1 frames to be delivered in coded order.\n         When VC-1 frames have
      been fragmented across RTP packets, the\n         RTP receiver can use the sequence
      number field to ensure that\n         no fragment is missing.\n   Timestamp:
      32 bits\n         The RTP timestamp is set to the presentation time of the VC-1\n
      \        frame in the first Access Unit.  A clock rate of 90 kHz MUST be\n         used.\n"
    title: 5.1.  RTP Header Usage
  - contents:
    - "5.2.  AU Header Syntax\n   The Access Unit header consists of a one-byte AU
      Control field, the\n   RA Count field, and 3 optional fields.  All fields MUST
      be written in\n   network byte order.  The structure of the AU header is illustrated
      in\n   Figure 4.\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              |AU     | RA    |  AUP  | PTS   | DTS   |\n               |Control|
      Count |  Len  | Delta | Delta |\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                 Figure 4.  Structure of AU header\n   AU Control: 8 bits\n
      \        The usage of the AU Control field is defined in section 5.3.\n   RA
      Count: 8 bits\n         Random Access Point Counter.  This field is a binary
      modulo 256\n         counter.  The value of this field MUST be incremented by
      1 each\n         time an AU is transmitted where the RA bit in the AU Control\n
      \        field is set to 1.  The initial value of this field is\n         undefined
      and MAY be chosen randomly.\n   AUP Len: 16 bits\n         Access Unit Payload
      Length.  Specifies the size, in bytes, of\n         the payload of the Access
      Unit.  The field does not include the\n         size of the AU header itself.
      \ The field MUST be included in\n         each AU header in an RTP packet, except
      for the last AU header\n         in the packet.  If this field is not included,
      the payload of\n         the Access Unit SHALL be assumed to extend to the end
      of the\n         RTP payload.\n   PTS Delta: 32 bits\n         Presentation
      time delta.  Specifies the presentation time of\n         the frame as a 2's
      complement offset (delta) from the timestamp\n         field in the RTP header
      of this RTP packet.  The PTS Delta\n         field MUST use the same clock rate
      as the timestamp field in\n         the RTP header.\n         This field SHOULD
      NOT be included in the first AU header in the\n         RTP packet, because
      the RTP timestamp field specifies the\n         presentation time of the frame
      in the first AU.  If this field\n         is not included, the presentation
      time of the frame SHALL be\n         assumed to be specified by the timestamp
      field in the RTP\n         header.\n   DTS Delta: 32 bits\n         Decode time
      delta.  Specifies the decode time of the frame as a\n         2's complement
      offset (delta) between the presentation time and\n         the decode time.
      \ Note that if the presentation time is larger\n         than the decode time,
      this results in a value for the DTS Delta\n         field that is greater than
      zero.  The DTS Delta field MUST use\n         the same clock rate as the timestamp
      field in the RTP header.\n         If this field is not included, the decode
      time of the frame\n         SHALL be assumed to be identical to the presentation
      time of\n         the frame.\n"
    title: 5.2.  AU Header Syntax
  - contents:
    - "5.3.  AU Control Field Syntax\n   The structure of the 8-bit AU Control field
      is shown in Figure 5.\n     0    1    2    3    4    5    6    7\n   +----+----+----+----+----+----+----+----+\n
      \  |  FRAG   | RA | SL | LP | PT | DT | R  |\n   +----+----+----+----+----+----+----+----+\n
      \  Figure 5.  Syntax of AU Control field.\n      FRAG: 2 bits\n         Fragmentation
      Information.  This field indicates if the AU\n         payload contains a complete
      frame or a fragment of a frame.  It\n         MUST be set as follows:\n         0:
      The AU payload contains a fragment of a frame other than the\n            first
      or last fragment.\n         1: The AU payload contains the first fragment of
      a frame.\n         2: The AU payload contains the last fragment of a frame.\n
      \        3: The AU payload contains a complete frame (not fragmented.)\n   RA:
      1 bit\n         Random Access Point indicator.  This bit MUST be set to 1 if\n
      \        the AU contains a frame that is a random access point.  In the\n         case
      of Simple and Main profiles, any I-picture is a random\n         access point.\n
      \        In the case of Advanced profile, the first frame after an\n         entry-point
      header is a random access point.\n         If entry-point headers are not transmitted
      at every random\n         access point, this MUST be indicated using the media
      type\n         parameter \"mode=3\".\n   SL: 1 bit\n         Sequence Layer
      Counter.  This bit MUST be toggled, i.e.,\n         changed from 0 to 1 or from
      1 to 0, if the AU contains a\n         sequence layer header and if it is different
      from the most\n         recently transmitted sequence layer header.  Otherwise,
      the\n         value of this bit must be identical to the value of the SL bit\n
      \        in the previous AU.\n         The initial value of this bit is undefined
      and MAY be chosen\n         randomly.\n         The bit MUST be 0 for Simple
      and Main profile bit streams or if\n         the sequence layer header never
      changes.\n   LP: 1 bit\n         Length Present.  This bit MUST be set to 1
      if the AU header\n         includes the AUP Len field.\n   PT: 1 bit\n         PTS
      Delta Present.  This bit MUST be set to 1 if the AU header\n         includes
      the PTS Delta field.\n   DT: 1 bit\n         DTS Delta Present.  This bit MUST
      be set to 1 if the AU header\n         includes the DTS Delta field.\n   R:
      1 bit\n         Reserved.  This bit MUST be set to 0 and MUST be ignored by\n
      \        receivers.\n"
    title: 5.3.  AU Control Field Syntax
  title: 5.  RTP Payload Format Syntax
- contents:
  - '6.  RTP Payload Format Parameters

    '
  - contents:
    - "6.1.  Media type Registration\n   This registration uses the template defined
      in RFC 4288 [7] and\n   follows RFC 3555 [8].\n   Type name:  video\n   Subtype
      name:  vc1\n   Required parameters:\n         profile:\n            The value
      is an integer identifying the VC-1 profile.  The\n            following values
      are defined:\n            0: Simple profile\n            1: Main profile\n            3:
      Advanced profile\n            If the profile parameter is used to indicate properties
      of a\n            coded bit stream, it indicates the VC-1 profile that a\n            decoder
      has to support when it decodes the bit stream.\n            If the profile parameter
      is used for capability exchange or\n            in a session setup procedure,
      it indicates the VC-1 profile\n            that the codec supports.\n            level:\n
      \           The value is an integer that specifies the level of the VC-1\n            profile.\n
      \           For Advanced profile, valid values are 0 through 4, which\n            correspond
      to levels L0 through L4, respectively.  For\n            Simple and Main profiles,
      the following values are defined:\n            1: Low Level\n            2:
      Medium Level\n            3: High Level (only valid for Main profile)\n            If
      the level parameter is used to indicate properties of a\n            coded bit
      stream, it indicates the highest level of the VC-1\n            profile that
      a decoder has to support when it decodes the\n            bit stream.  Note
      that support for a level implies support\n            for all numerically lower
      levels of the given profile.\n            If the level parameter is used for
      capability exchange or in\n            a session setup procedure, it indicates
      the highest level of\n            the VC-1 profile that the codec supports.
      \ See section 6.3\n            of RFC 4425 for specific rules for how this parameter
      is\n            used with the SDP Offer/Answer model.\n   Optional parameters:\n
      \        config:\n            The value is a base16 [6] (hexadecimal) representation
      of an\n            octet string that expresses the decoder initialization\n
      \           parameters.  Decoder initialization parameters are mapped\n            onto
      the base16 octet string in an MSB-first basis.  The\n            first bit of
      the decoder initialization parameters MUST be\n            located at the MSB
      of the first octet.  If the decoder\n            initialization parameters are
      not multiples of 8 bits, up to\n            7 zero-valued padding bits MUST
      be added in the last octet\n            to achieve octet alignment.\n            For
      Simple and Main profiles, the decoder initialization\n            parameters
      are STRUCT_C, as defined in Annex J of SMPTE 421M\n            [1].\n            For
      Advanced profile, the decoder initialization parameters\n            are a sequence
      layer header directly followed by an entry-\n            point header.  The
      two headers MUST be in EBDU format,\n            meaning that they must include
      their Start Codes and must\n            use the encapsulation method defined
      in Annex E of SMPTE\n            421M [1].\n         width:\n            The
      value is an integer greater than zero, specifying the\n            maximum horizontal
      size of the coded frames, in luma samples\n            (pixels in the luma picture).\n
      \           For Simple and Main profiles, the value SHALL be identical\n            to
      the actual horizontal size of the coded frames.\n            For Advanced profile,
      the value SHALL be greater than, or\n            equal to, the largest horizontal
      size of the coded frames.\n            If this parameter is not specified, it
      defaults to the\n            maximum horizontal size allowed by the specified
      profile and\n            level.\n         height:\n            The value is
      an integer greater than zero, specifying the\n            maximum vertical size
      of the coded frames, in luma samples\n            (pixels in a progressively
      coded luma picture).\n            For Simple and Main profiles, the value SHALL
      be identical\n            to the actual vertical size of the coded frames.\n
      \           For Advanced profile, the value SHALL be greater than, or\n            equal
      to, the largest vertical size of the coded frames.\n            If this parameter
      is not specified, it defaults to the\n            maximum vertical size allowed
      by the specified profile and\n            level.\n         bitrate:\n            The
      value is an integer greater than zero, specifying the\n            peak transmission
      rate of the coded bit stream in bits per\n            second.  The number does
      not include the overhead caused by\n            RTP encapsulation, i.e., it
      does not include the AU headers,\n            or any of the RTP, UDP, or IP
      headers.\n            If this parameter is not specified, it defaults to the\n
      \           maximum bit rate allowed by the specified profile and level.\n            See
      the values for \"RMax\" in Annex D of SMPTE 421M [1].\n         buffer:\n            The
      value is an integer specifying the leaky bucket size, B,\n            in milliseconds,
      required to contain a stream transmitted at\n            the transmission rate
      specified by the bitrate parameter.\n            This parameter is defined in
      the hypothetical reference\n            decoder model for VC-1, in Annex C of
      SMPTE 421M [1].\n            Note that this parameter relates to the codec bit
      stream\n            only, and does not account for any buffering time that may\n
      \           be required to compensate for jitter in the network.\n            If
      this parameter is not specified, it defaults to the\n            maximum buffer
      size allowed by the specified profile and\n            level.  See the values
      for \"BMax\" and \"RMax\" in Annex D of\n            SMPTE 421M [1].\n         framerate:\n
      \           The value is an integer greater than zero, specifying the\n            maximum
      number of frames per second in the coded bit stream,\n            multiplied
      by 1000 and rounded to the nearest integer value.\n            For example,
      30000/1001 (approximately 29.97) frames per\n            second is represented
      as 29970.\n            This parameter can be used to control resource allocation
      at\n            the receiver.  For example, a receiver may choose to perform\n
      \           additional post-processing on decoded frames only if the\n            frame
      rate is expected to be low.  The parameter MUST NOT be\n            used for
      pacing of the rendering process, since the actual\n            frame rate may
      differ from the specified value.\n            If the parameter is not specified,
      it defaults to the\n            maximum frame rate allowed by the specified
      profile and\n            level.\n         bpic:\n            This parameter
      signals that B- and BI-pictures may be\n            present when Advanced profile
      is used.  If this parameter is\n            present, and B- or BI-pictures may
      be present in the coded\n            bit stream, this parameter MUST be equal
      to 1.\n            A value of 0 indicates that B- and BI-pictures SHALL NOT
      be\n            present in the coded bit stream, even if the sequence layer\n
      \           header changes.  Inclusion of this parameter with a value of\n            0
      is RECOMMENDED, if neither B- nor BI-pictures are included\n            in the
      coded bit stream.\n            This parameter MUST NOT be used with Simple and
      Main\n            profiles. For Main profile, the presence of B- and\n            BI-pictures
      is indicated by the MAXBFRAMES field in STRUCT_C\n            decoder initialization
      parameter.\n            For Advanced profile, if this parameter is not specified,
      a\n            value of 1 SHALL be assumed.\n         mode:\n            The
      value is an integer specifying the use of the sequence\n            layer header
      and the entry-point header.  This parameter is\n            only defined for
      Advanced profile.  The following values are\n            defined:\n            0:
      Both the sequence layer header and the entry-point header\n               may
      change, and changed headers will be included in the\n               RTP packets.\n
      \           1: The sequence layer header specified in the config\n               parameter
      never changes.  The rules in section 4.8 of RFC\n               4425 MUST be
      followed.\n            3: The sequence layer header and the entry-point header\n
      \              specified in the config parameter never change.  The\n               rules
      in section 4.9 of RFC 4425 MUST be followed.\n            If the mode parameter
      is not specified, a value of 0 SHALL\n            be assumed.  The mode parameter
      SHOULD be specified if modes\n            1 or 3 apply to the VC-1 bit stream.\n
      \        max-width, max-height, max-bitrate, max-buffer, max-framerate:\n            These
      parameters are defined for use in a capability\n            exchange procedure.
      \ The parameters do not signal properties\n            of the coded bit stream,
      but rather upper limits or\n            preferred values for the \"width\",
      \"height\", \"bitrate\",\n            \"buffer\", and \"framerate\" parameters.
      \ Section 6.3 of RFC\n            4425 provides specific rules for how these
      parameters are\n            used with the SDP Offer/Answer model.\n            Receivers
      that signal support for a given profile and level\n            MUST support
      the maximum values for these parameters for\n            that profile and level.
      \ For example, a receiver that\n            indicates support for Main profile,
      Low level, must support\n            a width of 352 luma samples and a height
      of 288 luma\n            samples, even if this requires scaling the image to
      fit the\n            resolution of a smaller display device.\n            A
      receiver MAY use any of the max-width, max-height, max-\n            bitrate,
      max-buffer, and max-framerate parameters to\n            indicate preferred
      capabilities.  For example, a receiver\n            may choose to specify values
      for max-width and max-height\n            that match the resolution of its display
      device, since a bit\n            stream encoded using those parameters would
      not need to be\n            rescaled.\n            If any of the max-width,
      max-height, max-bitrate, max-\n            buffer, and max-framerate parameters
      signal a capability\n            that is less than the required capabilities
      of the signaled\n            profile and level, then the parameter SHALL be
      interpreted\n            as a preferred value for that capability.\n            Any
      of the parameters MAY also be used to signal\n            capabilities that
      exceed the required capabilities of the\n            signaled profile and level.
      \ In that case, the parameter\n            SHALL be interpreted as the maximum
      value that can be\n            supported for that capability.\n            When
      more than one parameter from the set (max-width,\n            max-height, max-bitrate,
      max-buffer, and max-framerate) is\n            present, all signaled capabilities
      MUST be supported\n            simultaneously.\n            A sender or receiver
      MUST NOT use these parameters to signal\n            capabilities that meet
      the requirements of a higher level of\n            the VC-1 profile than that
      specified in the \"level\"\n            parameter, even if the sender or receiver
      can support all\n            the properties of the higher level, except if specifying
      a\n            higher level is not allowed due to other restrictions.  As\n
      \           an example of such a restriction, in the SDP Offer/Answer\n            model,
      the value of the level parameter that can be used in\n            an Answer
      is limited by what was specified in the Offer.\n         max-width:\n            The
      value is an integer greater than zero, specifying a\n            horizontal
      size for the coded frames, in luma samples\n            (pixels in the luma
      picture).  If the value is less than the\n            maximum horizontal size
      allowed by the profile and level,\n            then the value specifies the
      preferred horizontal size.\n            Otherwise, it specifies the maximum
      horizontal size that is\n            supported.\n            If this parameter
      is not specified, it defaults to the\n            maximum horizontal size allowed
      by the specified profile and\n            level.\n         max-height:\n            The
      value is an integer greater than zero, specifying a\n            vertical size
      for the coded frames, in luma samples (pixels\n            in a progressively
      coded luma picture).  If the value is\n            less than the maximum vertical
      size allowed by the profile\n            and level, then the value specifies
      the preferred vertical\n            size.  Otherwise, it specifies the maximum
      vertical size\n            that is supported.\n            If this parameter
      is not specified, it defaults to the\n            maximum vertical size allowed
      by the specified profile and\n            level.\n         max-bitrate:\n            The
      value is an integer greater than zero, specifying a peak\n            transmission
      rate for the coded bit stream in bits per\n            second.  The number does
      not include the overhead caused by\n            RTP encapsulation, i.e., it
      does not include the AU headers,\n            or any of the RTP, UDP, or IP
      headers.\n            If the value is less than the maximum bit rate allowed
      by\n            the profile and level, then the value specifies the\n            preferred
      bit rate.  Otherwise, it specifies the maximum bit\n            rate that is
      supported.\n            If this parameter is not specified, it defaults to the\n
      \           maximum bit rate allowed by the specified profile and level.\n            See
      the values for \"RMax\" in Annex D of SMPTE 421M [1].\n         max-buffer:\n
      \           The value is an integer specifying a leaky bucket size, B,\n            in
      milliseconds, required to contain a stream transmitted at\n            the transmission
      rate specified by the max-bitrate\n            parameter.  This parameter is
      defined in the hypothetical\n            reference decoder model for VC-1, in
      Annex C of SMPTE 421M\n            [1].\n            Note that this parameter
      relates to the codec bit stream\n            only and does not account for any
      buffering time that may be\n            required to compensate for jitter in
      the network.\n            If the value is less than the maximum leaky bucket
      size\n            allowed by the max-bitrate parameter and the profile and\n
      \           level, then the value specifies the preferred leaky bucket\n            size.
      \ Otherwise, it specifies the maximum leaky bucket size\n            that is
      supported for the bit rate specified by the max-\n            bitrate parameter.\n
      \           If this parameter is not specified, it defaults to the\n            maximum
      buffer size allowed by the specified profile and\n            level.  See the
      values for \"BMax\" and \"RMax\" in Annex D of\n            SMPTE 421M [1].\n
      \        max-framerate:\n            The value is an integer greater than zero,
      specifying a\n            number of frames per second for the coded bit stream.
      \ The\n            value is the frame rate multiplied by 1000 and rounded to\n
      \           the nearest integer value.  For example, 30000/1001\n            (approximately
      29.97) frames per second is represented as\n            29970.\n            If
      the value is less than the maximum frame rate allowed by\n            the profile
      and level, then the value specifies the\n            preferred frame rate.  Otherwise,
      it specifies the maximum\n            frame rate that is supported.\n            If
      the parameter is not specified, it defaults to the\n            maximum frame
      rate allowed by the specified profile and\n            level.\n   Encoding considerations:\n
      \           This media type is framed and contains binary data.\n   Security
      considerations:\n            See Section 7 of RFC 4425.\n   Interoperability
      considerations:\n           None.\n   Published specification:\n           RFC
      4425.\n   Applications that use this media type:\n           Multimedia streaming
      and conferencing tools.\n   Additional Information:\n           None.\n   Person
      & email address to contact for further information:\n           Anders Klemets
      <anderskl@microsoft.com>\n           IETF AVT working group.\n   Intended Usage:\n
      \          COMMON\n   Restrictions on usage:\n           This media type depends
      on RTP framing; therefore, it is\n           only defined for transfer via RTP
      [3].\n   Authors:\n           Anders Klemets\n   Change controller:\n           IETF
      Audio/Video Transport Working Group delegated from the\n           IESG.\n"
    title: 6.1.  Media type Registration
  - contents:
    - "6.2.  Mapping of media type parameters to SDP\n   The information carried in
      the media type specification has a\n   specific mapping to fields in the Session
      Description Protocol (SDP)\n   [4].  If SDP is used to specify sessions using
      this payload format,\n   the mapping is done as follows:\n   o  The media name
      in the \"m=\" line of SDP MUST be video (the type\n      name).\n   o  The encoding
      name in the \"a=rtpmap\" line of SDP MUST be vc1 (the\n      subtype name).\n
      \  o  The clock rate in the \"a=rtpmap\" line MUST be 90000.\n   o  The REQUIRED
      parameters \"profile\" and \"level\" MUST be included in\n      the \"a=fmtp\"
      line of SDP.\n      These parameters are expressed in the form of a semicolon\n
      \     separated list of parameter=value pairs.\n   o  The OPTIONAL parameters
      \"config\", \"width\", \"height\", \"bitrate\",\n      \"buffer\", \"framerate\",
      \"bpic\", \"mode\", \"max-width\", \"max-height\",\n      \"max-bitrate\", \"max-buffer\",
      and \"max-framerate\", when present,\n      MUST be included in the \"a=fmtp\"
      line of SDP.\n      These parameters are expressed in the form of a semicolon\n
      \     separated list of parameter=value pairs:\n         a=fmtp:<dynamic payload
      type> <parameter\n         name>=<value>[,<value>][; <parameter name>=<value>]\n
      \  o  Any unknown parameters to the device that uses the SDP MUST be\n      ignored.
      \ For example, parameters defined in later specifications\n      MAY be copied
      into the SDP and MUST be ignored by receivers that\n      do not understand
      them.\n"
    title: 6.2.  Mapping of media type parameters to SDP
  - contents:
    - "6.3.  Usage with the SDP Offer/Answer Model\n   When VC-1 is offered over RTP
      using SDP in an Offer/Answer model [5]\n   for negotiation for unicast usage,
      the following rules and\n   limitations apply:\n   o  The \"profile\" parameter
      MUST be used symmetrically, i.e., the\n      answerer MUST either maintain the
      parameter or remove the media\n      format (payload type) completely if the
      offered VC-1 profile is\n      not supported.\n   o  The \"level\" parameter
      specifies the highest level of the VC-1\n      profile supported by the codec.\n
      \     The answerer MUST NOT specify a numerically higher level in the\n      answer
      than that specified in the offer.  The answerer MAY specify\n      a level that
      is lower than that specified in the offer, i.e., the\n      level parameter
      can be \"downgraded\".\n      If the offer specifies the sendrecv or sendonly
      direction\n      attribute and the answer downgrades the level parameter, this
      may\n      require a new offer to specify an updated \"config\" parameter.  If\n
      \     the \"config\" parameter cannot be used with the level specified in\n
      \     the answer, then the offerer MUST initiate another Offer/Answer\n      round
      or not use media format (payload type).\n   o  The parameters \"config\", \"bpic\",
      \"width\", \"height\", \"framerate\",\n      \"bitrate\", \"buffer\", and \"mode\",
      describe the properties of the\n      VC-1 bit stream that the offerer or answerer
      is sending for this\n      media format configuration.\n      In the case of
      unicast usage and when the direction attribute in\n      the offer or answer
      is recvonly, the interpretation of these\n      parameters is undefined and
      they MUST NOT be used.\n   o  The parameters \"config\", \"width\", \"height\",
      \"bitrate\", and\n      \"buffer\" MUST be specified when the direction attribute
      is\n      sendrecv or sendonly.\n   o  The parameters \"max-width\", \"max-height\",
      \"max-framerate\", \"max-\n      bitrate\", and \"max-buffer\" MAY be specified
      in an offer or an\n      answer, and their interpretation is as follows:\n      When
      the direction attribute is sendonly, the parameters describe\n      the limits
      of the VC-1 bit stream that the sender is capable of\n      producing for the
      given profile and level, and for any lower level\n      of the same profile.\n
      \     When the direction attribute is recvonly or sendrecv, the\n      parameters
      describe properties of the receiver implementation.  If\n      the value of
      a property is less than that allowed by the level of\n      the VC-1 profile,
      then it SHALL be interpreted as a preferred\n      value and the sender's VC-1
      bit stream SHOULD NOT exceed it.  If\n      the value of a property is greater
      than what is allowed by the\n      level of the VC-1 profile, then it SHALL
      be interpreted as the\n      upper limit of the value that the receiver accepts
      for the given\n      profile and level, and for any lower level of the same
      profile.\n      For example, if a recvonly or sendrecv offer specifies\n      \"profile=0;level=1;max-bitrate=48000\",
      then 48 kbps is merely a\n      suggested bit rate, because all receiver implementations
      of Simple\n      profile, Low level, are required to support bit rates of up
      to 96\n      kbps.  Assuming that the offer is accepted, the answerer should\n
      \     specify \"bitrate=48000\" in the answer, but any value up to 96000\n      is
      allowed.  But if the offer specifies \"max-bitrate=200000\", this\n      means
      that the receiver implementation supports a maximum of 200\n      kbps for the
      given profile and level (or lower level).  In this\n      case, the answerer
      is allowed to answer with a bitrate parameter\n      of up to 200000.\n   o
      \ If an offerer wishes to have non-symmetrical capabilities between\n      sending
      and receiving, e.g., use different levels in each\n      direction, then the
      offerer has to offer different RTP sessions.\n      This can be done by specifying
      different media lines declared as\n      \"recvonly\" and \"sendonly\", respectively.\n
      \  For streams being delivered over multicast, the following rules apply\n   in
      addition:\n   o  The \"level\" parameter specifies the highest level of the
      VC-1\n      profile used by the participants in the multicast session.  The\n
      \     value of this parameter MUST NOT be changed by the answerer.\n      Thus,
      a payload type can be either accepted unaltered or removed.\n   o  The parameters
      \"config\", \"bpic\", \"width\", \"height\", \"framerate\",\n      \"bitrate\",
      \"buffer\", and \"mode\", specify properties of the VC-1\n      bit stream that
      will be sent and/or received on the multicast\n      session.  The parameters
      MAY be specified, even if the direction\n      attribute is recvonly.\n      The
      values of these parameters MUST NOT be changed by the\n      answerer.  Thus,
      a payload type can be either accepted unaltered\n      or removed.\n   o  The
      values of the parameters \"max-width\", \"max-height\", \"max-\n      framerate\",
      \"max-bitrate\", and \"max-buffer\" MUST be supported by\n      the answerer
      for all streams declared as sendrecv or recvonly.\n      Otherwise, one of the
      following actions MUST be performed: the\n      media format is removed or the
      session is rejected.\n"
    title: 6.3.  Usage with the SDP Offer/Answer Model
  - contents:
    - "6.4.  Usage in Declarative Session Descriptions\n   When VC-1 is offered over
      RTP using SDP in a declarative style, as in\n   RTSP [12] or SAP [13], the following
      rules and limitations apply:\n   o  The parameters \"profile\" and \"level\"
      indicate only the properties\n      of the coded bit stream.  They do not imply
      a limit on\n      capabilities supported by the sender.\n   o  The parameters
      \"config\", \"width\", \"height\", \"bitrate\", and\n      \"buffer\" MUST be
      specified.\n   o  The parameters \"max-width\", \"max-height\", \"max-framerate\",
      \"max-\n      bitrate\", and \"max-buffer\" MUST NOT be used.\n   An example
      of media representation in SDP is as follows (Simple\n   profile, Medium level):\n
      \  m=video 49170 RTP/AVP 98\n   a=rtpmap:98 vc1/90000\n   a=fmtp:98 profile=0;level=2;width=352;height=288;framerate=15000;\n
      \  bitrate=384000;buffer=2000;config=4e291800\n"
    title: 6.4.  Usage in Declarative Session Descriptions
  title: 6.  RTP Payload Format Parameters
- contents:
  - "7.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [4], and in any appropriate RTP profile.  This implies\n
    \  that confidentiality of the media streams is achieved by encryption;\n   for
    example, through the application of SRTP [11].\n   A potential denial-of-service
    threat exists for data encodings using\n   compression techniques that have non-uniform
    receiver-end\n   computational load.  The attacker can inject pathological RTP
    packets\n   into the stream that are complex to decode and that cause the\n   receiver
    to be overloaded.  VC-1 is particularly vulnerable to such\n   attacks, because
    it is possible for an attacker to generate RTP\n   packets containing frames that
    affect the decoding process of many\n   future frames.  Therefore, the usage of
    data origin authentication\n   and data integrity protection of at least the RTP
    packet is\n   RECOMMENDED; for example, with SRTP [11].\n   Note that the appropriate
    mechanism to ensure confidentiality and\n   integrity of RTP packets and their
    payloads is dependent on the\n   application and on the transport and signaling
    protocols employed.\n   Thus, although SRTP is given as an example above, other
    possible\n   choices exist.\n   VC-1 bit streams can carry user-data, such as
    closed captioning\n   information and content meta-data.  The VC-1 specification
    does not\n   define how to interpret user-data.  Identifiers for user-data are\n
    \  required to be registered with SMPTE.  It is conceivable for types of\n   user-data
    to be defined to include programmatic content, such as\n   scripts or commands
    that would be executed by the receiver.\n   Depending on the type of user-data,
    it might be possible for a sender\n   to generate user-data in a non-compliant
    manner to crash the receiver\n   or make it temporarily unavailable.  Senders
    that transport VC-1 bit\n   streams SHOULD ensure that the user-data is compliant
    with the\n   specification registered with SMPTE (see Annex F of [1].)  Receivers\n
    \  SHOULD prevent malfunction in case of non-compliant user-data.\n   It is important
    to note that VC-1 streams can have very high\n   bandwidth requirements (up to
    135 Mbps for high-definition video).\n   This causes a potential for denial-of-service
    if transmitted onto\n   many Internet paths.  Therefore, users of this payload
    format MUST\n   comply with the congestion control requirements described in section\n
    \  8.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Congestion Control\n   Congestion control for RTP SHALL be used in accordance
    with RFC 3550\n   [3], and with any applicable RTP profile; e.g., RFC 3551 [15].\n
    \  If best-effort service is being used, users of this payload format\n   MUST
    monitor packet loss to ensure that the packet loss rate is\n   within acceptable
    parameters.  Packet loss is considered acceptable\n   if a TCP flow across the
    same network path and experiencing the same\n   network conditions would achieve
    an average throughput, measured on a\n   reasonable timescale, that is not less
    than the RTP flow is\n   achieving.  This condition can be satisfied by implementing\n
    \  congestion control mechanisms to adapt the transmission rate or by\n   arranging
    for a receiver to leave the session if the loss rate is\n   unacceptably high.\n
    \  The bit rate adaptation necessary for obeying the congestion control\n   principle
    is easily achievable when real-time encoding is used.  When\n   pre-encoded content
    is being transmitted, bandwidth adaptation\n   requires one or more of the following:\n
    \  -  The availability of more than one coded representation of the same\n      content
    at different bit rates.  The switching between the\n      different representations
    can normally be performed in the same\n      RTP session by switching streams
    at random access point\n      boundaries.\n   -  The existence of non-reference
    frames (e.g., B-frames) in the bit\n      stream.  Non-reference frames can be
    discarded by the transmitter\n      prior to encapsulation in RTP.\n   Only when
    non-downgradable parameters (such as the VC-1 \"profile\"\n   parameter) are required
    to be changed does it become necessary to\n   terminate and re-start the media
    stream.  This may be accomplished by\n   using a different RTP payload type.\n
    \  Regardless of the method used for bandwidth adaptation, the resulting\n   bit
    stream MUST be compliant with the VC-1 specification [1].  For\n   example, if
    non-reference frames are discarded, then the FRMCNT\n   syntax element (Simple
    and Main profile frames only) and the optional\n   TFCNTR syntax element (Advanced
    profile frames only) must increment\n   as if no frames had been discarded.  Because
    the TFCNTR syntax\n   element counts the frames in the display order, which is
    different\n   from the order in which they are transmitted (the coded order),
    it\n   will require the transmitter to \"look ahead\" or buffer some number of\n
    \  frames.\n   As another example, when switching between different representations\n
    \  of the same content, it may be necessary to signal a discontinuity by\n   modifying
    the FRMCNT field, or if Advanced profile is used, by\n   setting the BROKEN_LINK
    flag in the entry-point header to 1.\n   This payload format may also be used
    in networks that provide\n   quality-of-service guarantees.  If enhanced service
    is being used,\n   receivers SHOULD monitor packet loss to ensure that the service
    that\n   was requested is actually being delivered.  If it is not, then they\n
    \  SHOULD assume that they are receiving best-effort service and behave\n   accordingly.\n"
  title: 8.  Congestion Control
- contents:
  - "9.  IANA Considerations\n   IANA has registered the media type \"video/vc1\"
    and the associated RTP\n   payload format in the Media Types registry and in the
    RTP Payload\n   Format MIME types registry, as specified in section 6.1.\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [1]  Society of Motion Picture and Television
      Engineers, \"VC-1\n        Compressed Video Bitstream Format and Decoding Process\",
      SMPTE\n        421M.\n   [2]  Bradner, S., \"Key words for use in RFCs to Indicate
      Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [3]  Schulzrinne,
      H., Casner, S., Frederick, R., and V. Jacobson,\n        \"RTP: A Transport
      Protocol for Real-Time Applications\", STD 64,\n        RFC 3550, July 2003.\n
      \  [4]  Handley, M. and V. Jacobson, \"SDP: Session Description\n        Protocol\",
      RFC 2327, April 1998.\n   [5]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
      Model with\n        Session Description Protocol (SDP)\", RFC 3264, June 2002.\n
      \  [6]  Josefsson, S., Ed., \"The Base16, Base32, and Base64 Data\n        Encodings\",
      RFC 3548, July 2003.\n   [7]  Freed, N. and J. Klensin, \"Media Type Specifications
      and\n        Registration Procedures\", BCP 13, RFC 4288, December 2005.\n   [8]
      \ Casner, S. and P. Hoschka, \"MIME Type Registration of RTP\n        Payload
      Formats\", RFC 3555, July 2003.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [9]  Srinivasan, S., Hsu, P., Holcomb, T.,
      Mukerjee, K., Regunathan,\n        S.L., Lin, B., Liang, J., Lee, M., and J.
      Ribas-Corbera,\n        \"Windows Media Video 9: overview and applications\",
      Signal\n        Processing: Image Communication, Volume 19, Issue 9, October\n
      \       2004.\n   [10] Ribas-Corbera, J., Chou, P.A., and S.L. Regunathan, \"A\n
      \       generalized hypothetical reference decoder for H.264/AVC\", IEEE\n        Transactions
      on Circuits and Systems for Video Technology,\n        August 2003.\n   [11]
      Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n        Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\", RFC\n        3711, March
      2004.\n   [12] Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time Streaming\n
      \       Protocol (RTSP)\", RFC 2326, April 1998.\n   [13] Handley, M., Perkins,
      C., and E. Whelan, \"Session Announcement\n        Protocol\", RFC 2974, October
      2000.\n   [14] Handley, M., Schulzrinne, H., Schooler, E., and J. Rosenberg,\n
      \       \"SIP: Session Initiation Protocol\", RFC 2543, March 1999.\n   [15]
      Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and Video\n        Conferences
      with Minimal Control\", STD 65, RFC 3551, July 2003.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Acknowledgements\n   Thanks to Regis Crinon, Miska Hannuksela, Colin Perkins,
    Shankar\n   Regunathan, Gary Sullivan, Stephan Wenger, and Magnus Westerlund for\n
    \  providing detailed feedback on this document.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Anders Klemets\n   Microsoft Corp.\n   1 Microsoft Way\n
    \  Redmond, WA 98052\n   USA\n   EMail: Anders.Klemets@microsoft.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
