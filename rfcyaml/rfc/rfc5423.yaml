- contents:
  - '                     Internet Message Store Events

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   One of the missing features in the existing Internet mail and\n
    \  messaging standards is a facility for server-to-server and server-to-\n   client
    event notifications related to message store events.  As the\n   scope of Internet
    mail expands to support more diverse media (such as\n   voice mail) and devices
    (such as cell phones) and to provide rich\n   interactions with other services
    (such as web portals and legal\n   compliance systems), the need for an interoperable
    notification\n   system increases.  This document attempts to enumerate the types
    of\n   events that interest real-world consumers of such a system.\n   This document
    describes events and event parameters that are useful\n   for several cases, including
    notification to administrative systems\n   and end users.  This is not intended
    as a replacement for a message\n   access facility such as IMAP.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n     1.1.  Conventions Used in This Document  . . . . . . . .
    . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .
    . .  3\n   3.  Event Model  . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 4\n   4.  Event Types  . . . . . . . . . . . . . . . . . . . . . . . . .  5\n
    \    4.1.  Message Addition and Deletion  . . . . . . . . . . . . . .  5\n     4.2.
    \ Message Flags  . . . . . . . . . . . . . . . . . . . . . .  7\n     4.3.  Access
    Accounting  . . . . . . . . . . . . . . . . . . . .  8\n     4.4.  Mailbox Management
    . . . . . . . . . . . . . . . . . . . .  8\n   5.  Event Parameters . . . . .
    . . . . . . . . . . . . . . . . . . 10\n   6.  IANA Considerations  . . . . .
    . . . . . . . . . . . . . . . . 14\n   7.  Security Considerations  . . . . .
    . . . . . . . . . . . . . . 14\n   8.  Acknowledgments  . . . . . . . . . . .
    . . . . . . . . . . . . 15\n   9.  References . . . . . . . . . . . . . . . .
    . . . . . . . . . . 15\n     9.1.  Normative References . . . . . . . . . . .
    . . . . . . . . 15\n     9.2.  Informative References . . . . . . . . . . . .
    . . . . . . 15\n   Appendix A.  Future Extensions . . . . . . . . . . . . . .
    . . . . 17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   A message store is used to organize Internet Messages [RFC5322]
    into\n   one or more mailboxes (possibly hierarchical), annotate them in\n   various
    ways, and provide access to these messages and associated\n   metadata.  Three
    different standards-based protocols have been widely\n   deployed to remotely
    access a message store.  The Post Office\n   Protocol (POP) [RFC1939] provides
    simple download-and-delete access\n   to a single mail drop (which is a subset
    of the functionality\n   typically associated with a message store).  The Internet
    Message\n   Access Protocol (IMAP) [RFC3501] provides an extensible feature-rich\n
    \  model for online, offline, and disconnected access to a message store\n   with
    minimal constraints on any associated \"fat-client\" user\n   interface.  Finally,
    mail access applications built on top of the\n   Hypertext Transfer Protocol (HTTP)
    [RFC2616] that run in standards-\n   based web browsers provide a third standards-based
    access mechanism\n   for online-only access.\n   While simple and/or ad-hoc mechanisms
    for notifications have sufficed\n   to some degree in the past (e.g., \"Simple
    New Mail Notification\"\n   [RFC4146], \"IMAP4 IDLE Command\" [RFC2177]), as the
    scope and\n   importance of message stores expand, the demand for a more complete\n
    \  store notification system increases.  Some of the driving forces\n   behind
    this demand include:\n   o  Mobile devices with intermittent network connectivity
    that have\n      \"new mail\" or \"message count\" indicators.\n   o  Unified
    messaging systems that include both Internet and voice\n      mail require support
    for a message-waiting indicator on phones.\n   o  Interaction with systems for
    event-based or utility-computing\n      billing.\n   o  Simplification of the
    process of passing message store events to\n      non-Internet notification systems.\n
    \  o  A calendar system may wish to subscribe to MessageNew\n      notifications
    in order to support iMIP [RFC2447].\n   o  Some jurisdictions have laws or regulations
    for information\n      protection and auditing that require interoperable protocols\n
    \     between message stores built by messaging experts and compliance\n      auditing
    systems built by compliance experts.\n   Vendors who have deployed proprietary
    notification systems for their\n   Internet message stores have seen significant
    demand to provide\n   notifications for more and more events.  As a first step
    towards\n   building a notification system, this document attempts to enumerate\n
    \  the core events that real-world customers demand.\n   This document includes
    those events that can be generated by the use\n   of IMAP4rev1 [RFC3501] and some
    existing extensions.  As new IMAP\n   extensions are defined, or additional event
    types or parameters need\n   to be added, the set specified here can be extended
    by means of an\n   IANA registry with update requirements, as specified in Section
    6.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in RFC 2119 [RFC2119].\n   When these words appear in lower-case
      or with initial capital\n   letters, they are not RFC 2119 key words.\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The following terminology is used in this document:\n   mailbox\n
    \     A container for Internet messages and/or child mailboxes.  A\n      mailbox
    may or may not permit delivery of new messages via a mail\n      delivery agent.\n
    \  mailbox identifier\n      A mailbox identifier provides sufficient information
    to identify a\n      specific mailbox on a specific server instance.  An IMAP
    URL can\n      be a mailbox identifier.\n   message access protocols\n      Protocols
    that provide clients (e.g., a mail user agent or web\n      browser) with access
    to the message store, including but not\n      limited to IMAP, POP, and HTTP.\n
    \  message context\n      As defined in [RFC3458].\n   UIDVALIDITY\n      As defined
    in IMAP4rev1 [RFC3501].  UIDVALIDITY is critical to the\n      correct operation
    of a caching mail client.  When it changes, the\n      client MUST flush its cache.
    \ It's particularly important to\n      include UIDVALIDITY with event notifications
    related to message\n      addition or removal in order to keep the message data
    correctly\n      synchronized.\n"
  title: 2.  Terminology
- contents:
  - "3.  Event Model\n   The events that are generated by a message store depend to
    some\n   degree on the model used to represent a message store.  The model the\n
    \  IETF has for a message store is implicit from IMAP4rev1 and\n   extensions,
    so that model is assumed by this document.\n   A message store event typically
    has an associated mailbox name and\n   usually has an associated user name (or
    authorization identity if\n   using the terminology from \"Simple Authentication
    and Security Layer\"\n   (SASL) [RFC4422]).  Events referring to a specific message
    can use an\n   IMAP URL [RFC5092] to do so.  Events referring to a set of messages\n
    \  can use an IMAP URL to the mailbox plus an IMAP UID (Unique\n   Identifier)
    set.\n   Each notification has a type and parameters.  The type determines the\n
    \  type of event, while the parameters supply information about the\n   context
    of the event that may be used to adjust subscription\n   preferences or may simply
    supply data associated with the event.  The\n   types and parameter names in this
    document are restricted to US-ASCII\n   printable characters, so these events
    can be easily mapped to an\n   arbitrary notification system.  However, this document
    assumes that\n   arbitrary parameter values (including large and multi-line values)\n
    \  can be encoded with the notification system.  Systems which lack that\n   feature
    could only implement a subset of these events.\n   This document does not indicate
    which event parameters are mandatory\n   or optional.  That is done in documents
    that specify specific message\n   formats or bindings to a notification system.\n
    \  For scalability reasons, some degree of filtering at event generation\n   is
    necessary.  At the very least, the ability to turn on and off\n   groups of related
    events and to suppress inclusion of large\n   parameters (such as messageContent)
    is needed.  A sophisticated\n   publish/subscribe notification system may be able
    to propagate\n   cumulative subscription information to the publisher.\n   Some
    of these events might be logically collapsed into a single event\n   type with
    a required parameter to distinguish between the cases\n   (e.g., QuotaExceed and
    QuotaWithin).  However, until such time that\n   an event subscription model is
    formulated, it's not practical to make\n   such decisions.  We thus note only
    the fact that some of these events\n   may be viewed as a single event type.\n"
  title: 3.  Event Model
- contents:
  - "4.  Event Types\n   This section discusses the different types of events useful
    in a\n   message store event notification system.  The intention is to\n   document
    the events sufficient to cover an overwhelming majority of\n   known use cases
    while leaving less common event types for the future.\n   This section mentions
    parameters that are important or specific to\n   the events described here.  Event
    parameters likely to be included in\n   most or all notifications are discussed
    in the next section.\n"
  - contents:
    - "4.1.  Message Addition and Deletion\n   This section includes events related
      to message addition and\n   deletion.\n   MessageAppend\n      A message was
      appended or concatenated to a mailbox by a message\n      access client.  For
      the most part, this is identical to the\n      MessageNew event type except
      that the SMTP envelope information is\n      not included as a parameter, but
      information about which protocol\n      triggered the event MAY be included.
      \ See the MessageNew event for\n      more information.\n   MessageExpire\n
      \     One or more messages were expired from a mailbox due to server\n      expiration
      policy and are no longer accessible by the end user.\n      The parameters include
      a mailbox identifier that MUST include\n      UIDVALIDITY and a UID set that
      describes the messages.\n      Information about which server expiration policy
      was applied may\n      be included in the future.\n   MessageExpunge\n      One
      or more messages were expunged from a mailbox by an IMAP\n      CLOSE/EXPUNGE,
      POP3 DELE+QUIT, HTTP, or equivalent client action\n      and are no longer accessible
      by the end user.\n      The parameters include a mailbox identifier that MUST
      include\n      UIDVALIDITY, a UID set, and MAY also indicate which access\n
      \     protocol triggered the event.\n   MessageNew\n      A new message was
      received into a mailbox via a message delivery\n      agent.\n      The parameters
      include a message identifier that, for IMAP-\n      accessible message stores,
      MUST include UIDVALIDITY and a UID.\n      The parameters MAY also include an
      SMTP envelope and other\n      arbitrary message and mailbox metadata.  In some
      cases, the entire\n      new message itself may be included.  The set of parameters
      SHOULD\n      be adjustable to the client's preference, with limits set by\n
      \     server policy.  An interesting policy, for example, would be to\n      include
      messages up to 2K in size with the notification, but to\n      include a URLAUTH
      [RFC4467] reference for larger messages.\n   QuotaExceed\n      An operation
      failed (typically MessageNew) because the user's\n      mailbox exceeded one
      of the quotas (e.g., disk quota, message\n      quota, quota by message context,
      etc.).  The parameters SHOULD\n      include at least the relevant user and
      quota and, optionally, the\n      mailbox.  Quota usage SHOULD be included if
      possible.  Parameters\n      needed to extend this to support quota by context
      are not\n      presently described in this document but could be added in the\n
      \     future.\n   QuotaWithin\n      An operation occurred (typically MessageExpunge
      or MessageExpire)\n      that reduced the user's quota usage under the limit.\n
      \  QuotaChange\n      The user's quota was changed.\n"
    title: 4.1.  Message Addition and Deletion
  - contents:
    - "4.2.  Message Flags\n   This section includes events related to changes in
      message flags.\n   MessageRead\n      One or more messages in the mailbox were
      marked as read or seen by\n      a user.  Note that POP has no concept of read
      or seen messages, so\n      these events are only generated by IMAP or HTTP
      clients (or\n      equivalent).\n      The parameters include a mailbox identifier
      and a set of message\n      UIDs.\n   MessageTrash\n      One or more messages
      were marked for future deletion by the user\n      but are still accessible
      over the protocol (the user's client may\n      or may not make these messages
      accessible through its user\n      interface).\n      The parameters include
      a mailbox identifier and a set of message\n      UIDs.\n   FlagsSet\n      One
      or more messages in the mailbox had one or more IMAP flags or\n      keywords
      set.\n      The parameters include a list of IMAP flag or keyword names that\n
      \     were set, a mailbox identifier, and the set of UIDs of affected\n      messages.
      \ The flagNames MUST NOT include \\Recent.  For\n      compatibility with simpler
      clients, it SHOULD be configurable\n      whether setting the \\Seen or \\Deleted
      flags results in this event\n      or the simpler MessageRead/MessageTrash events.
      \ By default, the\n      simpler message forms SHOULD be used for MessageRead
      and\n      MessageTrash.\n   FlagsClear\n      One or more messages in the mailbox
      had one or more IMAP flags or\n      keywords cleared.\n      The parameters
      include a list of IMAP flag or keyword names that\n      were cleared, a mailbox
      identifier, and the set of UIDs of\n      affected messages.  The flagNames
      parameter MUST NOT include\n      \\Recent.\n"
    title: 4.2.  Message Flags
  - contents:
    - "4.3.  Access Accounting\n   This section lists events related to message store
      access accounting.\n   Login\n      A user has logged into the system via IMAP,
      HTTP, POP, or some\n      other mechanism.\n      The parameters include the
      domain name and port used to access the\n      server and the user's authorization
      identity.  Additional possible\n      parameters include the client's IP address
      and port, the\n      authentication identity (if different from the authorization\n
      \     identity), the service name, the authentication mechanism,\n      information
      about any negotiated security layers, a timestamp, and\n      other information.\n
      \  Logout\n      A user has logged out or otherwise been disconnected from the\n
      \     message store via IMAP, HTTP, POP, or some other mechanism.\n      The
      parameters include the server domain name and the user's\n      authorization
      identity.  Additional parameters MAY include any of\n      the information from
      the \"Login\" event as well as information\n      about the type of disconnect
      (suggested values include graceful,\n      abort, timeout, and security layer
      error), the duration of the\n      connection or session, and other information.\n"
    title: 4.3.  Access Accounting
  - contents:
    - "4.4.  Mailbox Management\n   This section lists events related to the management
      of mailboxes.\n   MailboxCreate\n      A mailbox has been created, or an access
      control changed on an\n      existing mailbox so that it is now accessible by
      the user.  If the\n      mailbox creation caused the creation of new mailboxes
      earlier in\n      the hierarchy, separate MailboxCreate events are not generated,
      as\n      their creation is implied.\n      The parameters include the created
      mailbox identifier, its\n      UIDVALIDITY for IMAP-accessible message stores,
      and MAY also\n      indicate which access protocol triggered the event.  Access
      and\n      permissions information (such as Access Control List (ACL)\n      [RFC4314]
      settings) require a standardized format to be included,\n      and so are left
      for future extension.\n   MailboxDelete\n      A mailbox has been deleted, or
      an access control changed on an\n      existing mailbox so that it is no longer
      accessible by the user.\n      Note that if the mailbox has child mailboxes,
      only the specified\n      mailbox has been deleted, not the children.  The mailbox
      becomes\n      \\NOSELECT, and the hierarchy remains unchanged, as per the\n
      \     description of the DELETE command in IMAP4rev1 [RFC3501].\n      The parameters
      include the deleted mailbox identifier and MAY also\n      indicate which access
      protocol triggered the event.\n   MailboxRename\n      A mailbox has been renamed.
      \ Note that, per the description of the\n      RENAME command in IMAP4rev1 [RFC3501],
      special semantics regarding\n      the mailbox hierarchy apply when INBOX is
      renamed (child mailboxes\n      are usually included in the rename, but are
      excluded when INBOX is\n      renamed).  When a mailbox other than INBOX is
      renamed and its\n      child mailboxes are also renamed as a result, separate\n
      \     MailboxRename events are not generated for the child mailboxes, as\n      their
      renaming is implied.  If the rename caused the creation of\n      new mailboxes
      earlier in the hierarchy, separate MailboxCreate\n      events are not generated
      for those, as their creation is implied.\n      When INBOX is renamed, a new
      INBOX is created.  A MailboxCreate\n      event is not generated for the new
      INBOX, since it is implied.\n      The parameters include the old mailbox identifier,
      the new mailbox\n      identifier, and MAY also indicate which access protocol
      triggered\n      the event.\n   MailboxSubscribe\n      A mailbox has been added
      to the server-stored subscription list,\n      such as the one managed by the
      IMAP SUBSCRIBE and UNSUBSCRIBE\n      commands.\n      The parameters include
      the user whose subscription list has been\n      affected, the mailbox identifier,
      and MAY also indicate which\n      access protocol triggered the event.\n   MailboxUnSubscribe\n
      \     A mailbox has been removed from the subscription list.\n      The parameters
      include the user whose subscription list has been\n      affected, the mailbox
      identifier, and MAY also indicate which\n      access protocol triggered the
      event.\n"
    title: 4.4.  Mailbox Management
  title: 4.  Event Types
- contents:
  - "5.  Event Parameters\n   This section lists parameters included with these events.\n
    \  admin\n      Included with all events generated by message access protocols.\n
    \     The authentication identity associated with this event, as\n      distinct
    from the authorization identity (see \"user\").  This is\n      not included when
    it is the same as the value of the user\n      parameter.\n   bodyStructure\n
    \     May be included with MessageAppend and MessageNew.\n      The IMAP BODYSTRUCTURE
    of the message.\n   clientIP\n      Included with all events generated by message
    access protocols.\n      The IPv4 or IPv6 address of the message store access
    client that\n      performed the action that triggered the notification.\n   clientPort\n
    \     Included with all events generated by message access protocols.\n      The
    port number of the message store access client that performed\n      an action
    that triggered the notification (the port from which the\n      connection occurred).\n
    \  diskQuota\n      Included with QuotaExceed, QuotaWithin, and QuotaChange\n
    \     notifications relating to a user or mailbox disk quota.  May be\n      included
    with other notifications.\n      Disk quota limit in kilobytes (1024 octets).\n
    \  diskUsed\n      Included with QuotaExceed and QuotaWithin notifications relating\n
    \     to a user or mailbox disk quota.  May be included with other\n      notifications.\n
    \     Disk space used in kilobytes (1024 octets).  Only disk space that\n      counts
    against the quota is included.\n   envelope\n      May be included with the MessageNew
    notification.\n      The message transfer envelope associated with final delivery
    of\n      the message for the MessageNew notification.  This includes the\n      MAIL
    FROM and relevant RCPT TO line(s) used for final delivery\n      with CRLF delimiters
    and any ESMTP parameters.\n   flagNames\n      Included with FlagsSet and FlagsClear
    events.  May be included\n      with MessageAppend and MessageNew to indicate
    flags that were set\n      initially by the APPEND command or delivery agent,
    respectively.\n      A list (likely to be space-separated) of IMAP flag or keyword\n
    \     names that were set or cleared.  Flag names begin with a backslash\n      while
    keyword names do not.  The \\Recent flag is explicitly not\n      permitted in
    the list.\n   mailboxID\n      Included in events that affect mailboxes.  A URI
    describing the\n      mailbox.  In the case of MailboxRename, this refers to the
    new\n      name.\n   maxMessages\n      Included with QuotaExceed and QuotaWithin
    notifications relating\n      to a user or mailbox message count quota.  May be
    included with\n      other notifications.\n      Quota limit on the number of
    messages in the mailbox, for events\n      referring to a mailbox.\n   messageContent\n
    \     May be included with MessageAppend and MessageNew.\n      The entire message
    itself.  Size-based suppression of this SHOULD\n      be available.\n   messageSize\n
    \     May be included with MessageAppend and MessageNew.\n      Size of the RFC
    5322 message itself in octets.  This value matches\n      the length of the IMAP
    literal returned in response to an IMAP\n      FETCH of BODY[] for the referenced
    message.\n   messages\n      Included with QuotaExceed and QuotaWithin notifications
    relating\n      to a user or mailbox message count quota.  May be included with\n
    \     other notifications.\n      Number of messages in the mailbox.  This is
    typically included\n      with message addition and deletion events.\n   modseq\n
    \     May be included with any notification referring to one message.\n      This
    is the 64-bit integer MODSEQ as defined in [RFC4551].  No\n      assumptions about
    MODSEQ can be made if this is omitted.\n   oldMailboxID\n      A URI describing
    the old name of a renamed or moved mailbox.\n   pid\n      May be included with
    any notification.\n      The process ID of the process that generated the notification.\n
    \  process\n      May be included with any notification.\n      The name of the
    process that generated the notification.\n   serverDomain\n      Included in Login
    and optionally in Logout or other events.  The\n      domain name or IP address
    (v4 or v6) used to access the server or\n      mailbox.\n   serverPort\n      Included
    in Login and optionally in Logout or other events.  The\n      port number used
    to access the server.  This is often a well-known\n      port.\n   serverFQDN\n
    \     May be included with any notification.\n      The fully qualified domain
    name of the server that generated the\n      event.  Note that this may be different
    from the server name used\n      to access the mailbox included in the mailbox
    identifier.\n   service\n      May be included with any notification.\n      The
    name of the service that triggered the event.  Suggested\n      values include
    \"imap\", \"pop\", \"http\", and \"admincli\" (for an\n      administrative client).\n
    \  tags\n      May be included with any notification.\n      A list of UTF-8 tags
    (likely to be comma-separated).  One or more\n      tags can be set at the time
    a notification criteria or\n      notification subscription is created.  Subscribers
    can use tags\n      for additional client-side filtering or dispatch of events.\n
    \  timestamp\n      May be included with any notification.\n      The time at
    which the event occurred that triggered the\n      notification (the underlying
    protocol carrying the notification\n      may contain a timestamp for when the
    notification was generated).\n      This MAY be an approximate time.\n      Timestamps
    are expressed in local time and contain the offset from\n      UTC (this information
    is used in several places in Internet mail)\n      and are normally in [RFC3339]
    format.\n   uidnext\n      May be included with any notification referring to
    a mailbox.\n      The UID that is projected to be assigned next in the mailbox.\n
    \     This is typically included with message addition and deletion\n      events.
    \ This is equivalent to the UIDNEXT status item in the IMAP\n      STATUS command.\n
    \  uidset\n      Included with MessageExpires, MessageExpunges, MessageRead,\n
    \     MessageTrash, FlagsSet, and FlagsClear.\n      This includes the set of
    IMAP UIDs referenced.\n   uri\n      Included with all notifications.  A reference
    to the IMAP server,\n      a mailbox, or a message.\n      Typically an IMAP URL.
    \ This can include the name of the server\n      used to access the mailbox/message,
    the mailbox name, the\n      UIDVALIDITY of the mailbox, and the UID of a specific
    message.\n   user\n      Included with all events generated by message access
    protocols.\n      This is the authorization identifier used when the client\n
    \     connected to the access protocol that triggered the event.  Some\n      protocols
    (for example, many SASL mechanisms) distinguish between\n      authorization and
    authentication identifiers.  For events\n      associated with a mailbox, this
    may be different from the owner of\n      the mailbox specified in the IMAP URL.\n"
  title: 5.  Event Parameters
- contents:
  - "6.  IANA Considerations\n   The IANA has created a new registry for \"Internet
    Message Store\n   Events\" that contains two sub-registries: event names and event\n
    \  parameters.  For both event names and event parameters, entries that\n   do
    not start with \"vnd.\" are added by the IETF and are intended for\n   interoperable
    use.  Entries that start with \"vnd.\" are intended for\n   private use by one
    or more parties and are allocated to avoid\n   collisions.\n   The initial values
    are contained in this document.\n   Using IANA Considerations [RFC5226] terminology,
    entries that do not\n   start with \"vnd.\" are allocated by IETF Consensus, while
    those\n   starting with \"vnd.\" are allocated First Come First Served.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   Notifications can produce a large amount of traffic
    and expose\n   sensitive information.  When notification mechanisms are used to\n
    \  maintain state between different entities, the ability to corrupt or\n   manipulate
    notification messages could enable an attacker to modulate\n   the state of these
    entities.  For example, if an attacker were able\n   to modify notifications sent
    from a message store to an auditing\n   server, he could modify the \"user\" and
    \"messageContent\" parameters in\n   MessageNew notifications to create false
    audit log entries.\n   A competent transfer protocol for notifications must consider\n
    \  authentication, authorization, privacy, and message integrity, as\n   well
    as denial-of-service issues.  While the IETF has adequate tools\n   and experience
    to address these issues for mechanisms that involve\n   only one TCP connection,
    notification or publish/subscribe protocols\n   that are more sophisticated than
    a single end-to-end TCP connection\n   will need to pay extra attention to these
    issues and carefully\n   balance requirements to successfully deploy a system
    with security\n   and privacy considerations.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgments\n   Alexey Melnikov, Arnt Gulbrandsen, and Zoltan Ordogh
    have reviewed\n   and offered improvements to this document.  Richard Barnes did
    a nice\n   review during Last Call.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3501]  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n
      \             4rev1\", RFC 3501, March 2003.\n   [RFC5092]  Melnikov, A. and
      C. Newman, \"IMAP URL Scheme\", RFC 5092,\n              November 2007.\n   [RFC5226]
      \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC1939]  Myers, J. and M. Rose, \"Post Office
      Protocol - Version 3\",\n              STD 53, RFC 1939, May 1996.\n   [RFC2177]
      \ Leiba, B., \"IMAP4 IDLE command\", RFC 2177, June 1997.\n   [RFC2447]  Dawson,
      F., Mansour, S., and S. Silverberg, \"iCalendar\n              Message-Based
      Interoperability Protocol (iMIP)\", RFC 2447,\n              November 1998.\n
      \  [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3339]  Klyne, G., Ed. and C. Newman,
      \"Date and Time on the\n              Internet: Timestamps\", RFC 3339, July
      2002.\n   [RFC3458]  Burger, E., Candell, E., Eliot, C., and G. Klyne, \"Message\n
      \             Context for Internet Mail\", RFC 3458, January 2003.\n   [RFC4146]
      \ Gellens, R., \"Simple New Mail Notification\", RFC 4146,\n              August
      2005.\n   [RFC4314]  Melnikov, A., \"IMAP4 Access Control List (ACL) Extension\",\n
      \             RFC 4314, December 2005.\n   [RFC4422]  Melnikov, A. and K. Zeilenga,
      \"Simple Authentication and\n              Security Layer (SASL)\", RFC 4422,
      June 2006.\n   [RFC4467]  Crispin, M., \"Internet Message Access Protocol (IMAP)
      -\n              URLAUTH Extension\", RFC 4467, May 2006.\n   [RFC4551]  Melnikov,
      A. and S. Hole, \"IMAP Extension for Conditional\n              STORE Operation
      or Quick Flag Changes Resynchronization\",\n              RFC 4551, June 2006.\n
      \  [RFC5322]  Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n              October
      2008.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Future Extensions\n   This document specifies core functionality
    based on events that are\n   believed to be well understood, have known use cases,
    and are\n   implemented by at least one deployed real-world Internet message\n
    \  store.  (A few events are exceptions to the last test only: FlagsSet,\n   FlagsClear,
    MailboxCreate, MailboxDelete, MailboxRename,\n   MailboxSubscribe, and MailboxUnSubscribe.)\n
    \  Some events have been suggested but are postponed to future\n   extensions
    because they do not meet this criteria.  These events\n   include messages that
    have been moved to archive storage and may\n   require extra time to access, quota
    by message context,\n   authentication failure, user mail account disabled, annotations,
    and\n   mailbox ACL or metadata change.  The descriptions of several events\n
    \  note additional parameters that are likely candidates for future\n   inclusion.
    \ See Section 6 for how the list of events and parameters\n   can be extended.\n
    \  In order to narrow the scope of this document to something that can\n   be
    completed, only events generated from the message store (by a\n   message access
    module, administrative module, or message delivery\n   agent) are considered.
    \ A complete mail system is normally linked\n   with an identity system that would
    also publish events of interest to\n   a message store event subscriber.  Events
    of interest include account\n   created/deleted/disabled and password changed/expired.\n"
  title: Appendix A.  Future Extensions
- contents:
  - "Authors' Addresses\n   Randall Gellens\n   QUALCOMM Incorporated\n   5775 Morehouse
    Drive\n   San Diego, CA  92651\n   USA\n   Phone:\n   EMail: rg+ietf@qualcomm.com\n
    \  Chris Newman\n   Sun Microsystems\n   800 Royal Oaks\n   Monrovia, CA  91016-6347\n
    \  USA\n   Phone:\n   EMail: chris.newman@sun.com\n"
  title: Authors' Addresses
