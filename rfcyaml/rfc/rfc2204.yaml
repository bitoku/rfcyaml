- title: __initial_text__
  contents:
  - '                     ODETTE File Transfer Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a file transfer protocol to facilitate electronic\n\
    \   data interchange between trading partners.\n   The protocol, denoted the ODETTE\
    \ File Transfer Protocol, supports\n   both direct communication between installations\
    \ and indirect\n   communication via a third party clearing centre.  It was developed\
    \ by\n   the Organisation for Data Exchange by Tele Transmission in Europe to\n\
    \   facilitate communication within the European motor industry and is\n   presented\
    \ here to allow for wider use within the Internet community.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction                                       \
    \        3\n         1.1  -  Background                                      3\n\
    \         1.2  -  Relationship to the original ODETTE Standard    3\n        \
    \ 1.3  -  General Principles                              3\n         1.4  - \
    \ Structure                                       4\n         1.5  -  Virtual\
    \ Files                                   4\n         1.6  -  Service Description\
    \                             7\n   2. Network Service (TCP Transport Service)\
    \                    7\n         2.1  -  Introduction                        \
    \            7\n         2.2  -  Service Primitives                          \
    \    7\n         2.3  -  Port Assignment                                 9\n \
    \  3. File Transfer Service                                      9\n         3.1\
    \  -  Model                                          10\n         3.2  -  Session\
    \ Setup                                  11\n         3.3  -  File Transfer  \
    \                                13\n         3.4  -  Session Take Down      \
    \                        16\n         3.5  -  Service State Automata         \
    \                19\n   4. Protocol Specification                            \
    \        22\n         4.1  -  Overview                                       22\n\
    \         4.2  -  Start Session Phase                            22\n        \
    \ 4.3  -  Start File Phase                               23\n         4.4  - \
    \ Data Transfer Phase                            26\n         4.5  -  End File\
    \ Phase                                 27\n         4.6  -  End Session Phase\
    \                              27\n         4.7  -  Problem Handling         \
    \                      28\n   5. Commands and Formats                        \
    \              28\n         5.1  -  Conventions                              \
    \      28\n         5.2  -  Commands                                       29\n\
    \         5.3  -  Command Formats                                29\n        \
    \ 5.4  -  Identification Code                            45\n   6. ODETTE-FTP\
    \ Data Exchange Buffer                           46\n         6.1  -  Overview\
    \                                       46\n         6.2  -  Data Exchange Buffer\
    \ Format                    46\n         6.3  -  Buffer Filling Rules        \
    \                   47\n   7. Stream Transmission Buffer (TCP only)          \
    \           47\n         7.1  -  Introduction                                \
    \   47\n         7.2  -  Stream Transmission Header Format              49\n \
    \  8. Protocol State Machine                                    50\n         8.1\
    \  -  ODETTE-FTP State Machine                       50\n         8.2  -  Error\
    \ Handling                                 50\n         8.3  -  States       \
    \                                  51\n         8.4  -  Input Events         \
    \                          53\n         8.5  -  Output Events                \
    \                  54\n         8.6  -  Local Variables                      \
    \          55\n         8.7  -  Local Constants                              \
    \  55\n         8.8  -  Session Connection State Table                 56\n  \
    \       8.9  -  Error and Abort State Table                    58\n         8.10\
    \ -  Speaker State Table 1                          59\n         8.11 -  Speaker\
    \ State Table 2                          63\n         8.12 -  Listener State Table\
    \                           65\n         8.13 -  Example                     \
    \                   68\n   9.  Security Considerations                       \
    \           68\n   Appendix A    Virtual File Mapping Example                \
    \   69\n   Appendix B    ISO 646 Character Subset                       72\n \
    \  Acknowledgements                                             73\n   References\
    \                                                   73\n   ODETTE Address    \
    \                                           74\n   Author's Address          \
    \                                   74\n"
- title: 1. Introduction
  contents:
  - '1. Introduction

    '
- title: 1.1  Background
  contents:
  - "1.1  Background\n   The ODETTE File Transfer Protocol (ODETTE-FTP) was defined\
    \ in 1986 by\n   working group four of the Organisation for Data Exchange by Tele\n\
    \   Transmission in Europe (ODETTE) to address the electronic data\n   interchange\
    \ (EDI) requirements of the European automotive industry.\n   It was designed\
    \ in the spirit of the Open System Interconnection\n   (OSI) model utilising the\
    \ Network Service provided by the CCITT X25\n   recommendation.\n   Over the last\
    \ ten years ODETTE-FTP has been widely deployed on\n   systems of all sizes from\
    \ personal computers to large mainframes.  As\n   a result of the wide scale deployment\
    \ of internet technology and the\n   trend towards global business practices,\
    \ ODETTE has decided to extend\n   the scope of it's file transfer protocol to\
    \ allow the use of TCP/IP\n   and to make the protocol available to the Internet\
    \ community.\n   This memo describes the ODETTE-FTP protocol using the Transmission\n\
    \   Control Protocol for it's network service.\n"
- title: 1.2  Relationship to the original ODETTE Standard
  contents:
  - "1.2  Relationship to the original ODETTE Standard\n   This memo is an interpretation\
    \ of version 1.3 of the ODETTE File\n   Transfer Protocol [OFTP].  In the event\
    \ of any ambiguity between this\n   document and the original ODETTE-FTP, the\
    \ original shall take\n   precedence.\n   For ODETTE-FTP on TCP/IP the following\
    \ sections have been added with\n   respect to the original document.\n      Section\
    \ 2  - Network Service\n      Section 7  - Stream Transmission Buffer\n      Appendix\
    \ A - Virtual File mapping example\n"
- title: 1.3  General Principles
  contents:
  - "1.3  General Principles\n   The aim of the ODETTE-FTP is to facilitate the transmission\
    \ of a file\n   between one or more locations in a way that is independent of\
    \ the\n   data communication network, system hardware and software environment.\n\
    \   In designing and specifying the protocol, the following factors were\n   considered.\n\
    \   1. The possible differences of size and sophistication (file storage,\n  \
    \    small and large systems).\n   2. The necessity to work with existing systems\
    \ (reduce changes to\n      existing products and allow easy implementation).\n\
    \   3. Systems of different ages.\n   4. Systems of different manufactures.\n\
    \   5. The potential for growth in sophistication (limit impact and avoid\n  \
    \    changes at other locations).\n"
- title: 1.4  Structure
  contents:
  - "1.4  Structure\n   ODETTE-FTP is modelled on the OSI reference model.  It is\
    \ designed to\n   use the Network Service provided by level 3 of the model and\
    \ provide\n   a File Service to the users.  Thus the protocol spans levels 4 to\
    \ 7\n   of model.\n   The description of the ODETTE-FTP contained in this memo\
    \ is closely\n   related to the original 'X.25' specification of the protocol\
    \ and in\n   the spirit of the OSI model describes:\n      1. A File Service provided\
    \ to a user monitor.\n      2. A protocol for the exchange of information between\
    \ peer\n         ODETTE-FTP entities.\n   A major consideration in adapting the\
    \ protocol to use the\n   Transmission Control Protocol (TCP) was the desire to\
    \ make no changes\n   to the existing protocol by adding the functionality required\
    \ to\n   allow implementors to support internet communication with only minor\n\
    \   changes to existing ODETTE-FTP engines.  To this end an additional\n   header\
    \ has been added to the start of each exchange buffer to allow\n   the TCP byte\
    \ stream to be broken up into the discrete exchange\n   buffers expected by the\
    \ ODETTE-FTP protocol.\n"
- title: 1.5  Virtual Files
  contents:
  - "1.5  Virtual Files\n   Information is always exchanged between ODETTE-FTP entities\
    \ in a\n   standard representation called a Virtual File.  This allows data\n\
    \   transfer without regard for the nature of the communicating systems.\n   The\
    \ mapping of a file between a local and virtual representation will\n   vary from\
    \ system to system and is not defined here.\n                              o---------o\n\
    \                         Site | Local   |\n                          A   | File\
    \ A  |\n                              o---------o\n                          \
    \         |\n      o----------------------- Mapping A ------------------------o\n\
    \      |                            |                             |\n      | \
    \                      o---------o                        |\n      |         \
    \              | Virtual |                        |\n      |                 \
    \      |  File   |                        |\n      |                       o---------o\
    \                        |\n      |    o------------------------------------------------o\
    \    |\n      |    |                                                |    |\n \
    \     |    |                  ODETTE-FTP                    |    |\n      |  \
    \  |                                                |    |\n      |    o------------------------------------------------o\
    \    |\n      |      o---------o                        o---------o      |\n \
    \     |      | Virtual |                        | Virtual |      |\n      |  \
    \    |  File   |                        |  File   |      |\n      |      o---------o\
    \                        o----+----o      |\n      |           |             \
    \                     |           |\n      o------ Mapping B ------------------------\
    \ Mapping C ------o\n                  |                                  |\n\
    \             o---------o                        o----+----o\n             | Local\
    \   | Site              Site | Local   |\n             | File B  |  B        \
    \         C   | File C  |\n             o---------o                        o---------o\n\
    \   A Virtual File is described by a set of attributes identifying and\n   defining\
    \ the data to be transferred.  The main attributes are:\n"
- title: '1.5.1  Organisation:'
  contents:
  - "1.5.1  Organisation:\n   Sequential\n      Logical records are presented one\
    \ after another.  The ODETTE-FTP\n      must be aware of the record boundaries.\n"
- title: 1.5.2  Identification
  contents:
  - "1.5.2  Identification\n   Dataset Name\n      Dataset name of the Virtual File\
    \ being transfered, assigned by\n      bilateral agreement.\n   Time stamp (HHMMSS)\n\
    \      A file qualifier indicating the time the Virtual File was made\n      available\
    \ for transmission.\n   Date stamp (YYMMDD)\n      A file qualifier indicating\
    \ the date the Virtual File was made\n      available for transmission.\n   The\
    \ Dataset Name, Date and Time attributes are assigned by a Virtual\n   File's\
    \ Originator and are used to uniquely identify the file.  They\n   must not be\
    \ changed by intermediate locations.\n   The Date attribute represents the decade\
    \ and year in a two digit\n   field.  Since the ODETTE-FTP only uses this information\
    \ to identify a\n   particular Virtual File it will continue to operate correctly\
    \ in the\n   year 2000 and beyond.\n   The User Monitor may use the Virtual File\
    \ Date attribute in local\n   processes involving date comparisons and calculations.\
    \  Any such use\n   falls outside the scope of this protocol and year 2000 handling\
    \ is a\n   local implementation issue.\n"
- title: 1.5.3  Record Format
  contents:
  - "1.5.3  Record Format\n   Four record formats are defined.\n      Fixed (F)\n\
    \         Each record in the file has the same length.\n      Variable (V)\n \
    \        The records in the file can have different lengths.\n      Unstructured\
    \ (U)\n         The file contains a stream of data.  No structure is defined.\n\
    \      Text File (T)\n         A Text File is defined as a sequence of ASCII characters,\n\
    \         containing no control characters except CR/LF which delimits\n     \
    \    lines.  A line will not have more than 2048 characters.\n"
- title: 1.5.4  Restart
  contents:
  - "1.5.4  Restart\n   ODETTE-FTP can negotiate the restart of an interrupted Virtual\
    \ File\n   transmission.  Fixed and Variable format files are restarted on\n \
    \  record boundaries.  For Unstructured and Text files the restart\n   position\
    \ is expressed as a file offset in 1K (1024 octet) blocks.\n   The restart position\
    \ is always calculated relative to the Virtual\n   File.\n"
- title: 1.6  Service Description
  contents:
  - "1.6  Service Description\n   ODETTE-FTP provides a file transfer service to a\
    \ user monitor and in\n   turn uses the Internet transport layer stream service\
    \ to communicate\n   between peers.\n   These services are specified in this memo\
    \ using service primitives\n   grouped into four classes as follows:\n      Request\
    \ (RQ)       An entity asks the service to do some work.\n      Indication (IND)\
    \   A service informs an entity of an event.\n      Response (RS)      An entity\
    \ responds to an event.\n      Confirm (CF)       A service informs an entity\
    \ of the response.\n   Services may be confirmed, using the request, indication,\
    \ response\n   and confirm primitives, or unconfirmed using just the request and\n\
    \   indication primitives.\n"
- title: 2. Network Service (TCP Transport Service)
  contents:
  - '2. Network Service (TCP Transport Service)

    '
- title: 2.1  Introduction
  contents:
  - "2.1  Introduction\n   ODETTE-FTP peer entities communicate with each other via\
    \ the OSI\n   Network Service or the Transmission Control Protocol Transport\n\
    \   Service [TCP].  This is described by service primitives representing\n   request,\
    \ indication, response and confirmation actions.\n   For the internet environment,\
    \ the service primitives mentioned below\n   for the Network Service have to be\
    \ mapped to the respective Transport\n   Service primitives.  This section describes\
    \ the network service\n   primitives used by ODETTE-FTP and their relationship\
    \ to the TCP\n   interface.  In practice the local transport service application\n\
    \   programming interface will be used to access the TCP service.\n"
- title: 2.2  Service Primitives
  contents:
  - "2.2  Service Primitives\n   All Network primitives can be directly mapped to\
    \ the respective\n   Transport primitives when using TCP.\n"
- title: 2.2.1  Network Connection
  contents:
  - "2.2.1  Network Connection\n      N_CON_RQ   ------>   N_CON_IND\n      N_CON_CF\
    \   <------   N_CON_RS\n   This describes the setup of a connection.  The requesting\
    \ ODETTE-FTP\n   peer uses the N_CON_RQ primitive to request an active OPEN of\
    \ a\n   connection to a peer ODETTE-FTP, the Responder, which has previously\n\
    \   requested a passive OPEN.  The Responder is notified of the incoming\n   connection\
    \ via N_CON_IND and accepts it with N_CON_RS.  The requester\n   is notified of\
    \ the completion of it's OPEN request upon receipt of\n   _CON_CF.\n   Parameters\n\
    \   Request           Indication        Response          Confirmation\n   ---------------------------------------------------------------------\n\
    \   Dest addr ------> same              same              same\n"
- title: 2.2.2  Network Data
  contents:
  - "2.2.2  Network Data\n      N_DATA_RQ  ------>   N_DATA_IND\n   Data exchange\
    \ is an unconfirmed service.  The Requester passes data\n   for transmission to\
    \ the network service via the N_DATA_RQ primitive.\n   The Responder is notified\
    \ of the availability of data via N_DATA_IND.\n   In practice the notification\
    \ and receipt of data may be combined,\n   such as by the return from a blocking\
    \ read from the network socket.\n   Parameters\n   Request                  Indication\n\
    \   ---------------------------------------------------------------------\n  \
    \ Data ------------------> same\n"
- title: 2.2.3  Network Disconnection
  contents:
  - "2.2.3  Network Disconnection\n      N_DISC_RQ  ------>   N_DISC_IND\n   An ODETTE-FTP\
    \ requests the termination of a connection with the\n   N_DISC_RQ service primitive.\
    \  It's peer is notified of the CLOSE by a\n   N_DISC_IND event.  It is recognised\
    \ that each peer must issue a\n   N_DISC_RQ primitive to complete the TCP symmetric\
    \ close procedure.\n"
- title: 2.2.4  Network Reset
  contents:
  - "2.2.4  Network Reset\n    ------>   N_RST_IND\n   An ODETTE-FTP entity is notified\
    \ of a network error by a N_RST_IND\n   event.  It should be noted that N_RST_IND\
    \ would also be generated by\n   a peer RESETTING the connection, but this is\
    \ ignored here as N_RST_RQ\n   is never sent to the Network Service by ODETTE-FTP.\n"
- title: 2.3  Port Assignment
  contents:
  - "2.3  Port Assignment\n   A ODETTE-FTP requester will select a suitable local\
    \ port.\n   The responding ODETTE-FTP will listen for connections on Registered\n\
    \   Port 3305, the service name is 'odette-ftp'.\n"
- title: 3. File Transfer Service
  contents:
  - "3. File Transfer Service\n   The File Transfer Service describes the services\
    \ offered by an\n   ODETTE-FTP Entity to it's User Monitor.  The implementation\
    \ of the\n   service primitives is a local matter.\n"
- title: 3.1  Model
  contents:
  - "3.1  Model\n          o-------------------o             o-------------------o\n\
    \          |                   |             |                   |\n         \
    \ |   USER  MONITOR   |             |   USER  MONITOR   |\n          |       \
    \            |             |                   |\n          o-------------------o\
    \             o-------------------o\n                  |   A                 \
    \            |   A\n   ...............|...|... FILE TRANSFER SERVICE ...|...|...............\n\
    \                  |   |                             |   |\n      F_XXX_RQ/RS\
    \ |   | F_XXX_IND/CF    F_XXX_RQ/RS |   | F_XXX_IND/CF\n                  V  \
    \ |                             V   |\n          o-------------------o       \
    \      o-------------------o\n          |                   |- - - - - - >|  \
    \                 |\n          | ODETTE-FTP Entity |   E-Buffer  | ODETTE-FTP\
    \ Entity |\n          |                   |< - - - - - -|                   |\n\
    \          o-------------------o             o-------------------o\n         \
    \         |   A                             |   A\n      N_XXX_RQ/RS |   | N_XXX_IND/CF\
    \    N_XXX_RQ/RS |   | N_XXX_IND/CF\n                  |   |                 \
    \            |   |\n   ...............|...|...... NETWORK SERVICE ......|...|...............\n\
    \                  V   |                             V   |\n        o---------------------------------------------------------o\n\
    \        |                                                         |\n       \
    \ |                      N E T W O R K                      |\n        |     \
    \                                                    |\n        o---------------------------------------------------------o\n\
    \         Key:  E-Buffer - Exchange Buffer\n               F_       - File Transfer\
    \ Service Primitive\n               N_       - Network Service Primitive\n"
- title: 3.2  Session Setup
  contents:
  - '3.2  Session Setup

    '
- title: 3.2.1  Session Connection Service
  contents:
  - "3.2.1  Session Connection Service\n                             |           \
    \ |\n           F_CONNECT_RQ ---->|------------|----> F_CONNECT_IND\n        \
    \                     |            |\n           F_CONNECT_CF <----|------------|<----\
    \ F_CONNECT_RS\n                             |            |\n   Parameters\n \
    \  Request           Indication        Response          Confirm\n   ---------------------------------------------------------------------\n\
    \   called-address -> same              ---               ----\n   calling-address->\
    \ same              ---               ----\n   ID1 ------------> same        \
    \      ID2 ------------> same\n   PSW1------------> same              PSW2 ----------->\
    \ same\n   mode1 ----------> mode2 ----------> mode3 ----------> same\n   restart1\
    \ -------> same -----------> restart2 -------> same\n   ---------------------------------------------------------------------\n\
    \   Mode\n      Specifies the file transfer capabilities of the entity sending\
    \ or\n      receiving a F_CONNECT primitive for the duration of the session.\n\
    \      Value:\n         Sender-Only    The entity can only send files.\n     \
    \    Receiver-Only  The entity can only receive files.\n         Both        \
    \   The entity can both send and receive files.\n      Negotiation:\n        Sender-Only\
    \    Not negotiable.\n        Receiver-Only  Not negotiable.\n        Both   \
    \        Can be negotiated down to Sender-Only or\n                       Receiver-Only\
    \ by the User Monitor or the\n                       ODETTE-FTP entity.\n   Request\
    \           Indication        Response          Confirm\n   ---------------------------------------------------------------------\n\
    \   Sender-only ----> Receiver-only --> Receiver-only --> Sender-only\n   Receiver-only\
    \ --> Sender-only ----> Sender-only ----> Receiver-only\n   Both -----+----->\
    \ Both ----+------> Both -----------> Both\n             |             or +------>\
    \ Receiver-only --> Sender-only\n             |             or +------> Sender-only\
    \ ----> Receiver-only\n             |\n          or +-----> Receiver-only -->\
    \ Receiver-only --> Sender-only\n          or +-----> Sender-only ----> Sender-only\
    \ ----> Receiver-only\n   ---------------------------------------------------------------------\n\
    \   Restart\n      Specifies the file transfer restart capabilities of the User\n\
    \      Monitor.\n      Value:\n      Negotiation:\n   Request           Indication\
    \        Response          Confirm\n   ---------------------------------------------------------------------\n\
    \   restart = Y ----> restart = Y --+-> restart = Y ----> restart = Y\n      \
    \                          or +-> restart = N ----> restart = N\n   restart =\
    \ N ----> restart = N ----> restart = N ----> restart = N\n   ---------------------------------------------------------------------\n"
- title: 3.3  File Transfer
  contents:
  - '3.3  File Transfer

    '
- title: 3.3.1  File Opening
  contents:
  - "3.3.1  File Opening\n                             |            |\n        F_START_FILE_RQ\
    \ ---->|------------|----> F_START_FILE_IND\n                             |  \
    \          |\n   F_START_FILE_CF(+|-) <----|------------|<---- F_START_FILE_RS(+|-)\n\
    \                             |            |\n   Parameters:\n   Request     \
    \    Ind.   RS(+)          CF(+)     RS(-)         CF(-)\n   --------------------------------------------------------------------\n\
    \   file-name ----> same   ----           ----      ----          ----\n   date-time\
    \ ----> same   ----           ----      ----          ----\n   destination--->\
    \ same   ----           ----      ----          ----\n   originator----> same\
    \   ----           ----      ----          ----\n   rec-format----> same   ----\
    \           ----      ----          ----\n   rec-size -----> same   ----     \
    \      ----      ----          ----\n   file-size-----> same   ----          \
    \ ----      ----          ----\n   restart-pos1--> same-> restart-pos2-> same\
    \      ----          ----\n   ----            ----   ----           ----     \
    \ cause ------> same\n   ----            ----   ----           ----      retry-later->\
    \ same\n   --------------------------------------------------------------------\n\
    \   Notes:\n   1. Retry-later has values \"Y\" or \"N\".  2. Cause is the reason\
    \ for\n   refusing the transfer (1,..,13,99).  3. Restart-pos1 not equal 0 is\n\
    \   only valid if restart has been agreed\n      during initial negotiation.\n\
    \   4. Restart-pos2 is less than or equal to restart-pos1.\n"
- title: 3.3.2  Data Regime
  contents:
  - "3.3.2  Data Regime\n                             |            |\n           \
    \   F_DATA_RQ ---->|------------|----> F_DATA_IND\n                          \
    \   |            |\n   Notes:\n   1. The data format within a F_DATA primitive\
    \ is locally defined.\n   2. The File Transfer service may have to provide a flow\
    \ control\n      mechanism to regulate the flow of F_DATA primitives.\n"
- title: 3.3.3  File Closing
  contents:
  - "3.3.3  File Closing\n                             |            |\n         F_CLOSE_FILE_RQ\
    \ --->|------------|----> F_CLOSE_FILE_IND\n                             |   \
    \         |\n    F_CLOSE_FILE_CF(+|-) <---|------------|<---- F_CLOSE_FILE_RS(+|-)\n\
    \                             |            |\n   Parameters\n   Request      \
    \   Ind    RS(+)          CF(+)     RS(-)         CF(-)\n   ---------------------------------------------------------------------\n\
    \   rec-count --->  same   ----           ----      ----          ----\n   unit-count\
    \ -->  same   ----           ----      ----          ----\n   ----           \
    \ ----   Speaker=Y ---> Speaker=N ----          ----\n   ----            ----\
    \   Speaker=N ---> Speaker=Y ----          ----\n   ----            ----   ----\
    \           ----      cause --->    same\n   ---------------------------------------------------------------------\n\
    \   In a positive Close File response (F_CLOSE_FILE_RS(+)) the current\n   Speaker\
    \ may either:\n      1.  Set Speaker to \"Yes\" and become the Speaker.  2.  Set\
    \ Speaker\n      to \"No\"  and remain the Listener.\n   The File Transfer service\
    \ will ensure that the setting of the speaker\n   parameter is consistent with\
    \ the capabilities of the peer user.\n   The turn is never exchanged in the case\
    \ of a negative response or\n   confirmation.\n   Only the Speaker is allowed\
    \ to issue F_XXX_FILE_RQ primitives.\n"
- title: 3.3.4  Exchanging the Turn
  contents:
  - '3.3.4  Exchanging the Turn

    '
- title: 3.3.4.1  Initial Turn (First Speaker)
  contents:
  - "3.3.4.1  Initial Turn (First Speaker)\n   The Initiator becomes the first Speaker\
    \ at the end of the Session\n   Setup (F_CONNECT_CF received by Initiator and\
    \ F_CONNECT_RS sent by\n   Responder).\n"
- title: 3.3.4.2  Following Turns
  contents:
  - "3.3.4.2  Following Turns\n   Rules:\n   1. At each unsuccessful End of File the\
    \ turn is not exchanged.\n   2. At each successful End of File the turn is exchanged\
    \ if requested\n      by the Listener:\n      - The current Listener receives\
    \ F_CLOSE_FILE_IND\n        (Speaker = choice).\n      - If the Listener answers\
    \ F_CLOSE_FILE_RS(Speaker = YES), it\n        becomes Speaker, the Speaker receives\
    \ F_CLOSE_FILE_CF (Speaker =\n        NO) and becomes Listener.\n      - If the\
    \ Listener answers F_CLOSE_FILE_RS(Speaker = NO), it\n        remains Listener,\
    \ and the Speaker receives F_CLOSE_FILE_CF\n        (Speaker = YES) and remains\
    \ Speaker.\n   3. The Speaker can issue a Change Direction request (F_CD_RQ) to\n\
    \      become the Listener.  The Listener receives a Change Direction\n      indication\
    \ (F_CD_IND) and becomes the Speaker.\n   4. In order to prevent loops of F_CD_RQ/IND,\
    \ it is an error to send\n      F_CD_RQ immediately after having received a F_CD_IND.\n"
- title: 3.3.5  End to End Response
  contents:
  - "3.3.5  End to End Response\n   This service is initiated by the current Speaker\
    \ (if there is no file\n   transfer in progress) to send an End-to-End response\
    \ from the final\n   destination to the originator of a file.\n              \
    \               |            |\n              F_EERP_RQ ---->|------------|---->\
    \ F_EERP_IND\n                             |            |\n   Parameters\n   Request\
    \           Indication\n   ------------------------------------\n   filename ------->\
    \ same\n   date -----------> same\n   time -----------> same\n   destination ---->\
    \ same\n   originator -----> same\n   ------------------------------------\n \
    \  Relationship with Turn:\n   -  Only the Speaker may send an End to End Response\
    \ request.\n   -  Invoking the EERP service does not change the turn.\n   -  If\
    \ a F_CD_IND has been received just before F_EERP_RQ is issued,\n      this results\
    \ in leaving the special condition created by the\n      reception of F_CD_IND;\
    \ i.e. while it was possible to issue\n      F_RELEASE_RQ and not possible to\
    \ issue F_CD_RQ just after the\n      reception of F_CD_IND, after having issued\
    \ F_EERP_RQ the normal\n      Speaker status is entered again (F_CD_RQ valid,\
    \ but F_RELEASE_RQ\n      not valid).\n"
- title: 3.4  Session Take Down
  contents:
  - '3.4  Session Take Down

    '
- title: 3.4.1  Normal Close
  contents:
  - "3.4.1  Normal Close\n                             |            |\n          \
    \ F_RELEASE_RQ ---->|------------|----> F_RELEASE_IND\n                      \
    \       |            |\n   Parameters\n   Request                  Indication\n\
    \   ---------------------------------------------------------------------\n  \
    \ reason = normal -------> ----\n   ---------------------------------------------------------------------\n\
    \   The Release service can only be initiated by the Speaker.\n   The Speaker\
    \ can only issue a Release request (F_RELEASE_RQ) just\n   after receiving an\
    \ unsolicited Change Direction indication\n   (F_CD_IND).  This ensures that the\
    \ other partner doesn't want to send\n   any more files in this session.\n   Peer\
    \ ODETTE-FTP entities action a normal session release by\n   specifying Reason\
    \ = Normal in an End Session (ESID) command.\n"
- title: 3.4.2  Abnormal close
  contents:
  - "3.4.2  Abnormal close\n                             |            |\n        \
    \   F_RELEASE_RQ ---->|------------|----> F_ABORT_IND\n                      \
    \       |            |\n   Parameters\n   Request                  Indication\n\
    \   ---------------------------------------------------------------------\n  \
    \ reason = error value --> same (or equivalent)\n                            \
    \  AO (Abort Origin) = (L)ocal or (D)istant\n   ---------------------------------------------------------------------\n\
    \   Abnormal session release can be initiated by either the Speaker or\n   the\
    \ Listener and also by the user or provider.\n   Abnormal session release can\
    \ occur at any time within the session.\n   Peer ODETTE-FTP entities action an\
    \ abnormal session release by\n   specifying Reason = Error-value in an End Session\
    \ (ESID) command.\n   The abnormal session release deals with the following types\
    \ of error:\n   1. The service provider will initiate an abnormal release in the\n\
    \      following cases:\n      1. Protocol error, 2. Failure of the Start Session\
    \ (SSID)\n      negotiation, 3. Command not recognised, 4. Exchange buffer size\n\
    \      error, 5. Resources not available, 6. Other unspecified abort code\n  \
    \    (with \"REASON\" = unspecified).\n   2. The User Monitor will initiate an\
    \ abnormal release in the\n      following cases:\n      1. Local site emergency\
    \ close down, 2. Resources not available, 3.\n      Other unspecified abort code\
    \ (with \"REASON\" = unspecified).\n   Other error types may be handled by an\
    \ abort of the connection.\n"
- title: 3.4.3  Abort
  contents:
  - "3.4.3  Abort\n                             |            |\n             F_ABORT_RQ\
    \ ---->|------------|----> F_ABORT_IND\n                             |       \
    \     |\n             User Initiated Abort\n                             |   \
    \         |\n            F_ABORT_IND <----|------------|----> F_ABORT_IND\n  \
    \                           |            |\n            Provider Initiated Abort\n\
    \   Parameters\n   Request                  Indication\n   ---------------------------------------------------------------------\n\
    \   --                       R  (Reason): specified or unspecified\n   --    \
    \                   AO (Abort Origin): (L)ocal or (D)istant\n   ---------------------------------------------------------------------\n\
    \   The Abort service may be invoked by either entity at any time.\n   The service\
    \ provider may initiate an abort in case of error\n   detection.\n"
- title: 3.4.4  Explanation of Session Take Down Services
  contents:
  - "3.4.4  Explanation of Session Take Down Services\n            User  | OFTP |\
    \        Network       | OFTP |  User\n   ---------------|------|----------------------|------|---------------\n\
    \                  |      |                      |      |\n   1. Normal Release\n\
    \     F_RELEASE_RQ |      | ESID(R=normal)       |      | F_RELEASE_IND\n   *--------------|->\
    \  ==|======================|=>  --|-------------->\n     (R=normal)   |     \
    \ |                      |      |\n   2. User Initiated Abnormal Release\n   \
    \  F_RELEASE_RQ |      | ESID(R=error)        |      | F_ABORT_IND\n   *--------------|->\
    \  ==|======================|=>   -|-------------->\n   (R=error value)|     \
    \ |                      |      | (R=error,AO=D)\n            User  | OFTP | \
    \       Network       | OFTP |  User\n   ---------------|------|----------------------|------|---------------\n\
    \                  |      |                      |      |\n   3. Provider Initiated\
    \ Abnormal Release\n     F_ABORT_IND  |      | ESID(R=error)        |      | F_ABORT_IND\n\
    \   <--------------|-*  *=|======================|=>  --|-------------->\n   \
    \               |      |                      |      |\n   4. User Initiated Connection\
    \ Abort\n    F_ABORT_RQ    |      | N_DISC_RQ            |      | F_ABORT_IND\n\
    \   *--------------|->  --|--------->..----------|->  --|-------------->\n   \
    \               |      |           N_DISC_IND |      | (R=unsp.,AO=D)\n   5. Provider\
    \ Initiated Connection Abort\n     F_ABORT_IND  |      | N_DISC_RQ           \
    \ |      | F_ABORT_IND\n   <--------------|-*  *-|--------->..----------|->  --|-------------->\n\
    \   (R=error,AO=L) |      |           N_DISC_IND |      | (R=unsp.,AO=D)\n   \
    \        Key:  *        Origin of command flow\n                 F_ --->  File\
    \ Transfer Service primitive\n                 N_ --->  Network Service primitive\n\
    \                    ===>  ODETTE-FTP (OFTP) protocol message\n"
- title: 3.5  Service State Automata
  contents:
  - "3.5  Service State Automata\n   This state automata defines the service as viewed\
    \ by the User\n   Monitor.  Events causing a state transition are shown in lower\
    \ case\n   and the resulting action in upper case where appropriate.\n"
- title: 3.5.1  Idle State Diagram
  contents:
  - "3.5.1  Idle State Diagram\n                                 o------------o\n\
    \                     decision    |            |  f_connect_ind\n            \
    \   +-----------------|    IDLE    |-----------------+\n               |   F_CONNECT_RQ\
    \  |    (0)     |  F_CONNECT_RS   |\n               |                 o------------o\
    \                 |\n               V                                        \
    \        |\n      o-----------------o                                       |\n\
    \      |                 |                                       |\n      | I_WF_FCONNECTCF\
    \ |                                       |\n      |                 |       \
    \                                |\n      o--------+--------o                \
    \                       |\n               |                                  \
    \              |\n               | F_CONNECT_CF                              \
    \     |\n               V                                                V\n \
    \     o-----------------o                              o-----------------o\n \
    \     |                 |                              |                 |\n \
    \     |  IDLE  SPEAKER  |                              | IDLE  LISTENER  |\n \
    \     |       (1)       |                              |       (2)       |\n \
    \     |   See Speaker   |                              |  See Listener   |\n \
    \     |  State Diagram  |                              |  State Diagram  |\n \
    \     |                 |                              |                 |\n \
    \     o-----------------o                              o-----------------o\n"
- title: 3.5.2  Speaker State Diagram
  contents:
  - "3.5.2  Speaker State Diagram\n   o-----------------o                        \
    \      o-----------------o\n   |  IDLE LISTENER  |                           \
    \   |      IDLE       |\n   | CD_RQ just sent |                              |\
    \     see (0)     |\n   | see (3), Listen |                              |   \
    \   Idle       |\n   |  State Diagram  |                              |  State\
    \ Diagram  |\n   o-----------------o                              o-----------------o\n\
    \            A                                                A\n            |\
    \                                                |\n        decision         \
    \ decision                        decision\n        F_CD_RQ    +----------------+\
    \                   F_RELEASE_RQ\n            |      |     F_EERP_RQ  |      \
    \                  |\n   o=================o              |               o-----------------o\n\
    \   |                 |<-------------+               |  IDLE SPEAKER   |\n   |\
    \  IDLE SPEAKER   |                              |       (4)       |\n   |   \
    \    (1)       |       decision               |     CD_IND      |\n   |      \
    \           |<-----------------------------|  just received  |\n   o=================o\
    \       F_EERP_RQ              o-----------------o\n     A  A        |       \
    \                                        |\n     |  |        | decision and P1\
    \              decision and P1  |\n     |  |        +-----------------+      \
    \ +---------------------+\n     |  |         F_START_FILE_RQ  |       |    F_START_FILE_RQ\n\
    \     |  |                          V       V\n     |  |                     \
    \ o---------------o\n     |  |  f_file_start_cf(-)  |               |\n     |\
    \  +----------------------|    OPENING    |\n     |                         |\
    \               |\n     |                         o---------------o\n     |  \
    \                               |\n   f_file_close_cf(-)          f_start_file_cf(+)\n\
    \     and not P2                        |\n     |                            \
    \     V\n   o---------------o           o---------------o\n   |              \
    \ |           |               |------------------+\n   |    CLOSING    |     \
    \      | DATA TRANSFER |  record to send  |\n   |               |           |\
    \               |<-----------------+\n   o---------------o           o---------------o\
    \    F_DATA_RQ\n     |         A                   |\n     |         |    end\
    \ of file    |\n     |         +-------------------+\n     |            F_CLOSE_FILE_RQ\n\
    \     |                                              o-----------------o\n   \
    \  |                f_close_file(+) and P2        |  IDLE LISTENER  |\n     +--------------------------------------------->|\
    \ see (2), Listen |\n                                                    |  State\
    \ Diagram  |\n   Predicates:                                      o-----------------o\n\
    \   P1: Mode = Both or (Mode = Sender-Only)\n   P2: Negative confirmation or (positive\
    \ confirmation, Speaker = YES)\n"
- title: 3.5.3  Listener State Diagram
  contents:
  - "3.5.3  Listener State Diagram\n   o-----------------o                       \
    \       o-----------------o\n   |  IDLE SPEAKER   |                          \
    \    |      IDLE       |\n   |   CD_IND just   |                             \
    \ |                 |\n   | received see(4) |                              | \
    \    see (0)     |\n   |  Speaker State  |                              |    \
    \  Idle       |\n   |     Diagram     |                              |  State\
    \ Diagram  |\n   o-----------------o                              o-----------------o\n\
    \            A                                                A\n            |\
    \                                                |\n         decision     f_eerp_ind\
    \                          decision\n         F_CD_IND  +--------------+     \
    \               F_RELEASE_IND\n            |      |              |           \
    \               |\n   o=================o            |                 o-----------------o\n\
    \   |                 |<-----------+    f_eerp_ind   |                 |\n   |\
    \                 |<-----------------------------|  IDLE LISTENER  |\n   |  IDLE\
    \ LISTENER  |                              |       (3)       |\n   |         \
    \        | f_start_file_ind             |      CD_RQ      |\n   |       (2)  \
    \     |    and not p2                |    just sent    |\n   |               \
    \  |---------------------+        |                 |\n   o=================o\
    \ F_START_FILE_RS(-)  |        o-----------------o\n     A   |      A  A     \
    \                  |           |          |\n     |   |      |  +-----------------------+\
    \           |          |\n     |   |      |                                  \
    \    |          |\n     |   |      | f_start_file_ind and not p2          |  \
    \        |\n     |   |      +--------------------------------------+         \
    \ |\n     |   |               F_START_FILE_RS(-)                       |\n   \
    \  |   |                                                        |\n     |   |\
    \           f_start_file_ind           f_start_file_ind  |\n     |   |       \
    \       and p2                        and p2      |\n     |   +-------------------------------+\
    \     +------------------+\n     |               F_START_FILE_RS(+)  |     | F_START_FILE_RS(+)\n\
    \     |                                   V     V\n     |                    \
    \          o---------------o\n     |  f_close_file_ind and not p1 |     DATA \
    \     |-------------+\n     +------------------------------|   TRANSFER    | \
    \            |\n          F_CLOSE_FILE_RS(-)        |               |<------------+\n\
    \                                    o---------------o  F_DATA_IND\n   o---------------o\
    \                           |\n   | IDLE SPEAKER  |  f_close_file_ind and p1 \
    \ |\n   | see (1), Spkr |<--------------------------+\n   | State Diagram |  \
    \  F_CLOSE_FILE_RS(+)\n   o---------------o\n   Predicates:\n   P1: (decision\
    \ to send F_CLOSE_FILE_RS(+)) and\n       (decision to set Speaker = yes in F_CLOSE_FILE_RS(+))\n\
    \   P2: (decision to send F_START_FILE_RS(+))\n"
- title: 4. Protocol Specification
  contents:
  - '4. Protocol Specification

    '
- title: 4.1  Overview
  contents:
  - "4.1  Overview\n   The ODETTE-FTP protocol is divided into five operating phases.\n\
    \      Start Session\n      Start File\n      Data Transfer\n      End File\n\
    \      End Session\n   After the End File phase an ODETTE-FTP entity may enter\
    \ a new Start\n   File phase or terminate the session via the End Session phase.\n\
    \   ODETTE-FTP peers communicate by sending and receiving messages in\n   Exchange\
    \ Buffers via the Network Service.  Each Exchange Buffer\n   contains one of the\
    \ following commands.\n      SSRM    Start Session Ready Message\n      SSID \
    \   Start Session\n      SFID    Start File\n      SFPA    Start File Positive\
    \ Answer\n      SFNA    Start File Negative Answer\n      DATA    Data\n     \
    \ CDT     Set Credit\n      EFID    End File\n      EFPA    End File Positive\
    \ Answer\n      EFNA    End File Negative Answer\n      ESID    End Session\n\
    \      CD      Change Direction\n      EERP    End to End Response\n      RTR\
    \     Ready To Receive\n   The remainder of this section describes the protocol\
    \ flows.  Section\n   five details the command formats.\n"
- title: 4.2  Start Session Phase
  contents:
  - "4.2  Start Session Phase\n   The Start Session phase is entered immediately after\
    \ the network\n   connection has been established.\n"
- title: 4.2.1  Entity Definition
  contents:
  - "4.2.1  Entity Definition\n   The ODETTE-FTP entity that took the initiative to\
    \ establish the\n   network connection becomes the Initiator.  It's peer becomes\
    \ the\n   Responder.\n"
- title: 4.2.2  Protocol Sequence
  contents:
  - "4.2.2  Protocol Sequence\n   The first message must be sent by the Responder.\n\
    \   1. Initiator <-------------SSRM -- Responder   Ready Message\n           \
    \     -- SSID ------------>             Identification\n                <------------\
    \ SSID --             Identification\n"
- title: 4.3  Start File Phase
  contents:
  - '4.3  Start File Phase

    '
- title: 4.3.1  Entity Definition
  contents:
  - "4.3.1  Entity Definition\n   The Initiator from the Start Session phase is designated\
    \ the Speaker\n   while the Responder becomes the Listener.  The roles are reversed\
    \ by\n   the Speaker sending a Change Direction command to the Listener.\n"
- title: 4.3.2  Protocol Sequence
  contents:
  - "4.3.2  Protocol Sequence\n   1. Speaker  -- SFID ------------> Listener   Start\
    \ File\n               <------------ SFPA --            Answer YES\n   2. Speaker\
    \  -- SFID ------------> Listener   Start File\n               <------------ SFNA\
    \ --            Answer NO\n                     Go To 1\n      Note: The User\
    \ Monitor should take steps to prevent a loop\n            situation occurring.\n\
    \   2. Speaker  -- CD --------------> Listener   Change Direction\n      Listener\
    \ <------------ EERP -- Speaker    End to End Response\n               -- RTR\
    \ ------------->            Ready to Receive\n               <------------ SFID\
    \ --            Start File\n"
- title: 4.3.3  Restart Facilities
  contents:
  - "4.3.3  Restart Facilities\n   The Start File command includes a count allowing\
    \ the restart of an\n   interrupted transmission to be negotiated.  If restart\
    \ facilities are\n   not available the restart count must be set to zero.  The\
    \ sender will\n   start with the lowest record count + 1.\n"
- title: 4.3.4  Broadcast Facilities
  contents:
  - "4.3.4  Broadcast Facilities\n   The destination in a Start File command can be\
    \ specified as follows.\n   1.  An explicitly defined destination.\n   2.  A group\
    \ destination that allows an intermediate location to\n       broadcast the Virtual\
    \ File to multiple destinations.\n   The Listener will send a negative answer\
    \ to the Speaker when the\n   destination is not known.\n"
- title: 4.3.5  Priority
  contents:
  - "4.3.5  Priority\n   The prioritisation of files for transmission is left to the\
    \ local\n   implementation.  To allow some flexibility, a change direction\n \
    \  mechanism is available in the End File phase.\n"
- title: 4.3.6  End To End Response (EERP)
  contents:
  - "4.3.6  End To End Response (EERP)\n   The End to End Response (EERP) command\
    \ notifies the originator of a\n   Virtual File that it has been successfully\
    \ delivered to it's final\n   destination.  This allows the originator to perform\
    \ house keeping\n   tasks such as deleting copies of the delivered data.\n   A\
    \ Response Command must be sent from the location performing the\n   final processing\
    \ or distribution of the data to the originator.  The\n   Response is mandatory\
    \ and may be sent in the same or in any\n   subsequent session.\n   When an intermediate\
    \ location broadcasts or distributes a Virtual\n   File it must receive a Response\
    \ command from all the locations to\n   which it forwarded the data before sending\
    \ it's own Response.  This\n   ensures that the Response received by the Virtual\
    \ File's originator\n   accounts for all the destination locations.  An intermediate\
    \ location\n   therefore needs to track the status of files it processes over\
    \ time.\n   Example: Point to Point\n   Location A sends file Ba to Location B\
    \ which will send an EERP to\n   location A after it successfully receives the\
    \ file.\n   o----------o                          o-----------o\n   | Loc. A \
    \  |----------- S1 ---------->| Loc. B    |\n   |          |                 \
    \         |           |\n   | [Ba]     |<---------- R2 -----------| [Ba]     \
    \ |\n   +----------o                          o-----------o\n   Key:\n      S\
    \ - File Transfer  R - Response EERP  [Ba] - File for B from A\n   Example: Data\
    \ distribution\n   Location A sends a Virtual File containing data for distribution\
    \ to\n   locations B and C via clearing centres E1 and E2.  Clearing centre E1\n\
    \   must wait for a response from E2 (for file Ba) and location C before\n   it\
    \ sends it's response, R8, to location A.  Clearing centre E2 can\n   only send\
    \ response R7 to E1 when location B acknowledges file Ba with\n   response R6.\n\
    \   o---------o        o---------o        o---------o        o---------o\n   |\
    \ Loc. A  |-- S1 ->| Loc. E1 |-- S2 ->| Loc. E2 |-- S5 ->| Loc. B  |\n   |   \
    \      |        |         |        |         |        |         |\n   | [Ba,Ca]\
    \ |<- R8 --| [Ba,Ca] |<- R7 --| [Ba]    |<- R6 --| [Ba]    |\n   o---------o \
    \       o---------o        o---------o        o---------o\n                  \
    \       A   |\n                         |   |           o---------o\n        \
    \                 |   +----- S3 ->| Loc. C  |\n                         |    \
    \           |         |\n                         +--------- R4 --| [Ca]    |\n\
    \                                         o---------o\n   Example: Data collection\n\
    \   Locations A and B send files Ca and Cb to clearing centre E1 which\n   forwards\
    \ both files to location C in a single Virtual File.  When it\n   receives response\
    \ R4 from C, clearing centre E1 sends response R5 to\n   location A and R6 to\
    \ location B.\n   o---------o        o---------o        o---------o\n   | Loc.\
    \ A  |-- S1 ->| Loc. E1 |-- S3 ->| Loc. C  |\n   |         |        |        \
    \ |        |         |\n   | [Ca]    |<- R5 --| [Ca,Cb] |<- R4 --| [Ca,Cb] |\n\
    \   o---------o        o---------o        o---------o\n                      \
    \   A   |\n   o---------o           |   |\n   | Loc. B  |-- S2 -----+   |\n  \
    \ |         |               |\n   | [Cb]    |<- R6 ---------+\n   o---------o\n"
- title: 4.3.7  Ready To Receive Command (RTR)
  contents:
  - "4.3.7  Ready To Receive Command (RTR)\n   In order to avoid congestion between\
    \ two adjacent nodes caused by a\n   continuous flow of EERP's, a Ready To Receive\
    \ (RTR) command is\n   provided.  The RTR acts as an EERP acknowledgement for\
    \ flow control\n   but has no end-to-end significance.\n      Speaker  -- EERP\
    \ ------------> Listener   End to End Response\n               <-------------\
    \ RTR --            Ready to Receive\n               -- EERP ------------>   \
    \         End to End Response\n               <------------- RTR --          \
    \  Ready to Receive\n               -- SFID ------------>            Start File\n\
    \                         or\n               -- CD -------------->           \
    \ Exchange the turn\n   After sending an EERP, the Speaker must wait for an RTR\
    \ before\n   sending any other commands.\n"
- title: 4.4  Data Transfer Phase
  contents:
  - "4.4  Data Transfer Phase\n   Virtual File data flows from the Speaker to the\
    \ Listener during the\n   Data Transfer phase which is entered after the Start\
    \ File phase.\n"
- title: 4.4.1  Protocol Sequence
  contents:
  - "4.4.1  Protocol Sequence\n   To avoid congestion at the protocol level a flow\
    \ control mechanism is\n   provided via the Credit (CDT) command.\n   A Credit\
    \ limit is negotiated in the Start Session phase, this\n   represents the number\
    \ of Data Exchange Buffers that the Speaker may\n   send before it is obliged\
    \ to wait for a Credit command from the\n   Listener.\n   The available credit\
    \ is initially set to the negotiated value by the\n   Start File positive answer,\
    \ which acts as an implicit Credit command.\n   The Speaker decreases the available\
    \ credit count by one for each data\n   buffer sent to the Listener.\n   When\
    \ the available credit is exhausted, the Speaker must wait for a\n   Credit command\
    \ from the Listener otherwise a protocol error will\n   occur and the session\
    \ will be aborted.\n   The Listener should endeavour to send the Credit command\
    \ without\n   delay to prevent the Speaker blocking.\n   1. Speaker  -- SFID ------------>\
    \ Listener   Start File\n               <------------ SFPA --            Answer\
    \ YES\n   2. If the Credit Value is set to 2\n      Speaker  -- Data ------------>\
    \ Listener   Start File\n               -- Data ------------>\n              \
    \ <------------- CDT --            Set Credit\n               -- Data ------------>\n\
    \               -- EFID ------------>            End File\n"
- title: 4.5  End File Phase
  contents:
  - '4.5  End File Phase

    '
- title: 4.5.1  Protocol Sequence
  contents:
  - "4.5.1  Protocol Sequence\n   The Speaker notifies the Listener that it has finished\
    \ sending a\n   Virtual File by sending an End File (EFID) command.  The Listener\n\
    \   replies with a positive or negative End File command and has the\n   option\
    \ to request a Change Direction command from the Speaker.\n   1. Speaker  -- EFID\
    \ ------------> Listener   End File\n               <------------ EFPA --    \
    \        Answer YES\n   2. Speaker  -- EFID ------------> Listener   End File\n\
    \               <------------ EFPA --            Answer YES + CD\n           \
    \    -- CD -------------->            Change Direction\n      Listener <------------\
    \ EERP -- Speaker    End to End Response\n               -------------- RTR ->\
    \            Ready to Receive\n               Go to Start File Phase\n   3. Speaker\
    \  -- EFID ------------> Listener   End File\n               <------------ EFNA\
    \ --            Answer NO\n"
- title: 4.6  End Session Phase
  contents:
  - '4.6  End Session Phase

    '
- title: 4.6.1  Protocol Sequence
  contents:
  - "4.6.1  Protocol Sequence\n   The Speaker terminates the session by sending an\
    \ End Session (ESID)\n   command.\n   1. Speaker  -- EFID ------------> Listener\
    \   End File\n               <------------ EFPA --            Answer YES\n   \
    \            -- CD -------------->            Change Direction\n      Listener\
    \ <------------ ESID -- Speaker    End Session\n"
- title: 4.7  Problem Handling
  contents:
  - "4.7  Problem Handling\n   Error detection and handling should be done as close\
    \ as possible to\n   the problem.  This aids problem determination and correction.\
    \  Each\n   layer of the reference model is responsible for it's own error\n \
    \  handling.\n   ODETTE-FTP can detect protocol errors through the construction\
    \ of\n   it's state machine, and uses activity timers to detect session hang\n\
    \   conditions.  These mechanisms are separate from the End to End\n   controls.\n"
- title: 4.7.1  Protocol Errors
  contents:
  - "4.7.1  Protocol Errors\n   If a protocol error occurs the session will be terminated\
    \ and\n   application activity aborted.  Both locations enter the IDLE state.\n"
- title: 4.7.2  Timers
  contents:
  - "4.7.2  Timers\n   To protect against application and network hang conditions\
    \ ODETTE-FTP\n   uses activity timers for all situations where a response is required.\n\
    \   The timers and actions to be taken if they expire are described in\n   section\
    \ 8, the Protocol State Machine.\n"
- title: 4.7.3  Clearing Centres
  contents:
  - "4.7.3  Clearing Centres\n   The use of clearing centres introduces the possibility\
    \ of errors\n   occurring as a result of data processing activities within the\n\
    \   centre.  Such errors are not directly related to ODETTE-FTP or the\n   communication\
    \ network and are therefore outside the scope of this\n   specification.\n"
- title: 5. Commands and Formats
  contents:
  - "5. Commands and Formats\n   ODETTE-FTP entities communicate via Exchange Buffers.\
    \  The Command\n   Exchange Buffers are described below.  Virtual File data is\
    \ carried\n   in Data Exchange Buffers which are described in Section 6.\n"
- title: 5.1  Conventions
  contents:
  - '5.1  Conventions

    '
- title: '5.1.1  Representation unit:'
  contents:
  - "5.1.1  Representation unit:\n   The basic unit of information is an octet, containing\
    \ eight bits.\n"
- title: '5.1.2  Values and Characters:'
  contents:
  - "5.1.2  Values and Characters:\n   The ISO 646 IRV 7-bit coded character set [ISO-646]\
    \ is used to encode\n   constants and strings within command exchange buffers.\n"
- title: 5.2  Commands
  contents:
  - "5.2  Commands\n   A Command Exchange Buffer contains a single command starting\
    \ at the\n   beginning of the buffer.  Commands and data are never mixed within\
    \ an\n   Exchange Buffer.  Each command has a fixed length and can not be\n  \
    \ compressed.\n   Components:\n   1. Command identifier:\n      The first octet\
    \ of an Exchange Buffer is the Command Identifier\n      and defines the format\
    \ of the buffer.\n   2. Parameter(s):\n      Command parameters are stored in\
    \ fixed fields within a Command\n      Exchange Buffer.  All values are required.\n"
- title: 5.3  Command Formats
  contents:
  - "5.3  Command Formats\n   The ODETTE-FTP commands are described below using the\
    \ following\n   definitions.\n   Position (Pos.)\n      Field offset within the\
    \ command exchange buffer, relative to a\n      zero origin.\n      Field\n  \
    \    The name of the field.\n   Description\n      A description of the field.\n\
    \   Format\n      F    - A field containing fixed values.  All allowable values\
    \ for\n             the field are enumerated in the command definition.\n    \
    \  V    - A field with variable values within a defined range.  For\n        \
    \     example the SFIDFSIZ field may contain any integer value\n             between\
    \ 0000000 and 9999999.\n      X(n) - An alphanumeric field of length n octets.\n\
    \      9(n) - A numeric field of length n octets.\n      All attributes are in\
    \ character format.\n      A String contains alphanumeric characters from the\
    \ following set:\n         The numerals:               0 to 9\n         The upper\
    \ case letters:     A to Z\n         The following special set:  / - . & ( ) space.\n\
    \      Space is not allowed as an embedded character.\n      Numeric fields are\
    \ always right justified and left padding with\n      zeros must be done when\
    \ needed.\n"
- title: 5.3.1  SSRM - Start Session Ready Message
  contents:
  - "5.3.1  SSRM - Start Session Ready Message\n   o-------------------------------------------------------------------o\n\
    \   |       SSRM        Start Session Ready Message                     |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---- Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SSRMCMD   | SSRM Command, 'I'                     | F X(1)  |\n   |  \
    \ 1 | SSRMMSG   | Ready Message, 'ODETTE FTP READY '    | F X(17) |\n   |  18\
    \ | SSRMCR    | Carriage Return                       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   SSRMCMD   Command Code                                      Character\n  \
    \    Value: 'I'  SSRM Command identifier.\n   SSRMMSG   Ready Message        \
    \                            String(17)\n      Value: 'ODETTE FTP READY '\n  \
    \ SSRMCR    Carriage Return                                   Character\n    \
    \  Value: Character with hex value '0D' or '8D'.\n"
- title: 5.3.2  SSID - Start Session
  contents:
  - "5.3.2  SSID - Start Session\n   o-------------------------------------------------------------------o\n\
    \   |       SSID        Start Session                                   |\n  \
    \ |                                                                   |\n   |\
    \       Start Session Phase     Initiator <---> Responder           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SSIDCMD   | SSID Command 'X'                      | F X(1)  |\n   |  \
    \ 1 | SSIDLEV   | Protocol Release Level                | F 9(1)  |\n   |   2\
    \ | SSIDCODE  | Initiator's Identification Code       | V X(25) |\n   |  27 |\
    \ SSIDPSWD  | Initiator's Password                  | V X(8)  |\n   |  35 | SSIDSDEB\
    \  | Exchange Buffer Size                  | V 9(5)  |\n   |  40 | SSIDSR    |\
    \ Send / Receive Capabilities (S/R/B)   | F X(1)  |\n   |  41 | SSIDCMPR  | Compression\
    \ Indicator (Y/N)           | F X(1)  |\n   |  42 | SSIDREST  | Restart Indicator\
    \ (Y/N)               | F X(1)  |\n   |  43 | SSIDSPEC  | Special Logic Indicator\
    \ (N)           | F X(1)  |\n   |  44 | SSIDCRED  | Credit                   \
    \             | V 9(3)  |\n   |  47 | SSIDRSV1  | Reserved                   \
    \           | F X(5)  |\n   |  52 | SSIDUSER  | User Data                    \
    \         | V X(8)  |\n   |  60 | SSIDCR    | Carriage Return                \
    \       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   SSIDCMD   Command Code                                      Character\n  \
    \    Value: 'X'  SSID Command identifier.\n   SSIDLEV   Protocol Release Level\
    \                           Numeric(1)\n      Value: '1' ODETTE-FTP protocol release\
    \ level 1.\n             Future release levels will have higher numbers.  The\n\
    \             protocol release level is negotiable, with the lowest level\n  \
    \           being selected.\n   SSIDCODE  Initiator's Identification Code    \
    \              String(25)\n    Format:  See Identification Code (Section 5.4)\n\
    \             Uniquely identifies the Initiator (sender) participating\n     \
    \        in the ODETTE-FTP session.\n   SSIDPSWD  Password                   \
    \                       String(8)\n             Key to authenticate the sender.\
    \  Assigned by bilateral\n             agreement.\n   SSIDSDEB  Exchange Buffer\
    \ Size                             Numeric(5)\n    Minimum: 128\n    Maximum:\
    \ 99999\n             The length, in octets, of the largest Exchange Buffer that\n\
    \             can be accepted by the location.  The length includes the\n    \
    \         command octet but does not include the Stream Transmission\n       \
    \      Header.\n             After negotiation the smallest size will be selected.\n\
    \   SSIDSR    Send / Receive Capabilities                       Character\n  \
    \    Value: 'S'  Location can only send files.\n             'R'  Location can\
    \ only receive files.\n             'B'  Location can both send and receive files.\n\
    \             Sending and receiving will be serialised during the\n          \
    \   session, so parallel sessions will not take place.\n             An error\
    \ occurs if adjacent locations both specify the send\n             or receive\
    \ capability.\n   SSIDCMPR  Compression Indication                           \
    \ Character\n      Value: 'Y'  The location can handle compressed data.\n    \
    \         'N'  The location can not handle compressed data.\n             Compression\
    \ is only used if supported by both locations.\n             The compression mechanism\
    \ is described in Section 6.2\n   SSIDREST  Restart Indication               \
    \                 Character\n      Value: 'Y'  The location can handle the restart\
    \ of a partially\n                  transmitted file.\n             'N'  The location\
    \ can not restart a file.\n   SSIDSPEC  Special Logic Indication             \
    \             Character\n      Value: 'N'  Only valid value for TCP.\n       \
    \      The Special Logic extensions are only useful in an X.25\n             environment\
    \ and are not supported for TCP/IP.\n   SSIDCRED  Credit                     \
    \                      Numeric(3)\n    Maximum: 999\n             The number of\
    \ consecutive Data Exchange Buffers sent by the\n             Speaker before it\
    \ must wait for a Credit (CDT) command from\n             the Listener.\n    \
    \         The credit value is only applied to Data flow in the Data\n        \
    \     Transfer phase.\n             The Speaker's available credit is initialised\
    \ to SSIDCRED\n             when it receives a Start File Positive Answer (SFPA)\n\
    \             command from the Listener.  It is zeroed by the End File\n     \
    \        (EFID) command.\n             After negotiation, the smallest size must\
    \ be selected in\n             the answer of the Responder, otherwise a protocol\
    \ error\n             will abort the session.\n             Negotiation of the\
    \ \"credit-window-size\" parameter.\n             Window Size m  -- SSID ------------>\n\
    \                            <------------ SSID --  Window Size n\n          \
    \                                         (n less or equal m)\n             Note:\
    \ negotiated value will be \"n\".\n   SSIDRSV1  Reserved                     \
    \                     String(5)\n             This field is reserved for future\
    \ use.\n   SSIDUSER  User Data                                         String(8)\n\
    \             May be used by the ODETTE-FTP in any way.  If unused it\n      \
    \       should be initialised to spaces.  It is expected that a\n            \
    \ bilateral agreement exists as to the meaning of the data.\n   SSIDCR    Carriage\
    \ Return                                   Character\n      Value: Character with\
    \ hex value '0D' or '8D'.\n"
- title: 5.3.3  SFID - Start File
  contents:
  - "5.3.3  SFID - Start File\n   o-------------------------------------------------------------------o\n\
    \   |       SFID        Start File                                      |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SFIDCMD   | SFID Command, 'H'                     | F X(1)  |\n   |  \
    \ 1 | SFIDDSN   | Virtual File Dataset Name             | V X(26) |\n   |  27\
    \ | SFIDRSV1  | Reserved                              | F X(9)  |\n   |  36 |\
    \ SFIDDATE  | Virtual File Date stamp, (YYMMDD)     | V X(6)  |\n   |  42 | SFIDTIME\
    \  | Virtual File Time stamp, (HHMMSS)     | V X(6)  |\n   |  48 | SFIDUSER  |\
    \ User Data                             | V X(8)  |\n   |  56 | SFIDDEST  | Destination\
    \                           | V X(25) |\n   |  81 | SFIDORIG  | Originator   \
    \                         | V X(25) |\n   | 106 | SFIDFMT   | File Format, (F/V/U/T)\
    \                | F X(1)  |\n   | 107 | SFIDLRECL | Maximum Record Size     \
    \              | V 9(5)  |\n   | 112 | SFIDFSIZ  | File Size, 1K blocks      \
    \            | V 9(7)  |\n   | 119 | SFIDREST  | Restart Position            \
    \          | V 9(9)  |\n   o-------------------------------------------------------------------o\n\
    \   SFIDCMD   Command Code                                      Character\n  \
    \    Value: 'H'  SFID Command identifier.\n   SFIDDSN   Virtual File Dataset Name\
    \                        String(26)\n             Dataset name of the Virtual\
    \ File being transferred,\n             assigned by bilateral agreement.\n   \
    \          No general structure is defined for this attribute.\n             See\
    \ Virtual Files - Identification (Section 1.5.2)\n   SFIDRSV1  Reserved      \
    \                                    String(9)\n             This field is reserved\
    \ for future use.\n   SFIDDATE  Virtual File Date stamp                      \
    \     String(6)\n     Format: 'YYMMDD'  6 decimal digits representing the year,\
    \ month\n             and day respectively [ISO-8601].\n             Date stamp\
    \ assigned by the Virtual File's Originator\n             indicating when the\
    \ file was made available for\n             transmission.\n             See Virtual\
    \ Files - Identification (Section 1.5.2)\n   SFIDTIME  Virtual File Time stamp\
    \                           String(6)\n     Format: 'HHMMSS'  6 decimal digits\
    \ representing hours, minutes\n             and seconds respectively [ISO-8601].\n\
    \             Time stamp assigned by the Virtual File's Originator\n         \
    \    indicating when the file was made available for\n             transmission.\n\
    \             See Virtual Files - Identification (Section 1.5.2)\n   SFIDUSER\
    \  User Data                                         String(8)\n             May\
    \ be used by the ODETTE-FTP in any way.  If unused it\n             should be\
    \ initialised to spaces.  It is expected that a\n             bilateral agreement\
    \ exists as to the meaning of the data.\n   SFIDDEST  Destination            \
    \                          String(25)\n     Format: See Identification Code (Section\
    \ 5.4)\n             The Final Recipient of the Virtual File.\n             This\
    \ is the location that will look into the Virtual File\n             content and\
    \ perform mapping functions.  It is also the\n             location that creates\
    \ the End to End Response (EERP)\n             command for the received file.\n\
    \   SFIDORIG  Originator                                       String(25)\n  \
    \   Format: See Identification Code (Section 5.4)\n             Originator of\
    \ the Virtual File.\n             It is the location that created (mapped) the\
    \ data for\n             transmission.\n   SFIDFMT   File Format             \
    \                          Character\n      Value: 'F'  Fixed format binary file.\n\
    \             'V'  Variable format binary file.\n             'U'  Unstructured\
    \ binary file.\n             'T'  Text\n             Virtual File format.  Used\
    \ to calculate the restart\n             position. (Section 1.5.3)\n   SFIDLRECL\
    \ Maximum Record Size                              Numeric(5)\n    Maximum: 99999\n\
    \             Length in octets of the longest logical record which may be\n  \
    \           transferred to a location.  Only user data is included.\n        \
    \     If SFIDFMT is 'T' or 'U' then this attribute must be set to\n          \
    \   '00000'.\n   SFIDFSIZ  File Size                                        Numeric(7)\n\
    \    Maximum: 9999999\n             Space in 1K (1024 octet) blocks required at\
    \ the Originator\n             location to store the Virtual File.\n         \
    \    This parameter is intended to provide only a good estimate\n            \
    \ of the Virtual File size.\n   SFIDREST  Restart Position                   \
    \              Numeric(9)\n    Maximum: 999999999\n             Virtual File restart\
    \ position.\n             The count represents the:\n                - Record\
    \ Number if SSIDFMT is 'F' or 'V'.\n                - File offset in 1K (1024\
    \ octet) blocks if SSIDFMT is\n                  'U' or 'T'.\n             The\
    \ count will express the transmitted user data (i.e.\n             before compression,\
    \ header not included).\n             After negotiation between adjacent locations,\n\
    \             retransmission will start at the lowest value.\n"
- title: 5.3.4  SFPA - Start File Positive Answer
  contents:
  - "5.3.4  SFPA - Start File Positive Answer\n   o-------------------------------------------------------------------o\n\
    \   |       SFPA        Start File Positive Answer                      |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SFPACMD   | SFPA Command, '2'                     | F X(1)  |\n   |  \
    \ 1 | SFPAACNT  | Answer Count                          | V 9(9)  |\n   o-------------------------------------------------------------------o\n\
    \   SFPACMD   Command Code                                      Character\n  \
    \    Value: '2'  SFPA Command identifier.\n   SFPAACNT  Answer Count         \
    \                            Numeric(9)\n             The Listener must enter\
    \ a count lower or equal to the\n             restart count specified by the Speaker\
    \ in the Start File\n             (SFID) command.  The count expresses the received\
    \ user\n             data.  If restart facilities are not available, a count of\n\
    \             zero must be specified.\n"
- title: 5.3.5  SFNA - Start File Negative Answer
  contents:
  - "5.3.5  SFNA - Start File Negative Answer\n   o-------------------------------------------------------------------o\n\
    \   |       SFNA        Start File Negative Answer                      |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SFNACMD   | SFNA Command, '3'                     | F X(1)  |\n   |  \
    \ 1 | SFNAREAS  | Answer Reason                         | F 9(2)  |\n   |   3\
    \ | SFNARRTR  | Retry Indicator, (Y/N)                | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   SFNACMD   Command Code                                      Character\n  \
    \    Value: '3'  SFNA Command identifier.\n   SFNAREAS  Answer Reason        \
    \                            Numeric(2)\n      Value: '01'  Invalid filename.\n\
    \             '02'  Invalid destination.\n             '03'  Invalid origin.\n\
    \             '04'  Storage record format not supported.\n             '05'  Maximum\
    \ record length not supported.\n             '06'  File size is too big.\n   \
    \          '10'  Invalid record count.\n             '11'  Invalid byte count.\n\
    \             '12'  Access method failure.\n             '13'  Duplicate file.\n\
    \             '99'  Unspecified reason.\n             Reason why transmission\
    \ can not proceed.\n   SFNARRTR  Retry Indicator                             \
    \      Character\n      Value: 'N'  Transmission should not be retried.\n    \
    \         'Y'  The transmission may be retried latter.\n             This parameter\
    \ is used to advise the Speaker if it should\n             retry at a latter point\
    \ in time due to a temporary\n             condition at the Listener site, such\
    \ as a lack of storage\n             space.  It should be used in conjunction\
    \ with the Answer\n             Reason code (SFNAREAS).\n             An invalid\
    \ file name error code may be the consequence of a\n             problem in the\
    \ mapping of the Virtual File on to a real\n             file.  Such problems\
    \ cannot always be resolved immediately.\n             It it therefore recommended\
    \ that when a SFNA with Retry = Y\n             is received the User Monitor attempts\
    \ to retransmit the\n             relevant file in a subsequent session.\n"
- title: 5.3.6  DATA - Data Exchange Buffer
  contents:
  - "5.3.6  DATA - Data Exchange Buffer\n   o-------------------------------------------------------------------o\n\
    \   |       DATA        Data Exchange Buffer                            |\n  \
    \ |                                                                   |\n   |\
    \       Data Transfer Phase        Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | DATACMD   | DATA Command, 'D'                     | F X(1)  |\n   |  \
    \ 1 | DATABUF   | Data Exchange Buffer payload          | V X(n)  |\n   o-------------------------------------------------------------------o\n\
    \   DATACMD   Command Code                                      Character\n  \
    \    Value: 'D'  DATA Command identifier.\n   DATABUF   Data Exchange Buffer payload\
    \                      String(n)\n             Variable length buffer containing\
    \ the data payload.  The\n             Data Exchange Buffer is described in Section\
    \ 6.\n"
- title: 5.3.7  CDT - Set Credit
  contents:
  - "5.3.7  CDT - Set Credit\n   o-------------------------------------------------------------------o\n\
    \   |       CDT         Set Credit                                      |\n  \
    \ |                                                                   |\n   |\
    \       Data Transfer Phase        Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | CDTCMD    | CDT Command, 'C'                      | F X(1)  |\n   |  \
    \ 1 | CDTRSV1   | Reserved                              | F X(2)  |\n   o-------------------------------------------------------------------o\n\
    \   CDTCMD    Command Code                                      Character\n  \
    \    Value: 'C'  CDT Command identifier.\n   CDTRSV1   Reserved              \
    \                            String(2)\n             This field is reserved for\
    \ future use.\n"
- title: 5.3.8  EFID - End File
  contents:
  - "5.3.8  EFID - End File\n   o-------------------------------------------------------------------o\n\
    \   |       EFID        End File                                        |\n  \
    \ |                                                                   |\n   |\
    \       End File Phase             Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EFIDCMD   | EFID Command, 'T'                     | F X(1)  |\n   |  \
    \ 1 | EFIDRCNT  | Record Count                          | V 9(9)  |\n   |  10\
    \ | EFIDUCNT  | Unit Count                            | V 9(12) |\n   o-------------------------------------------------------------------o\n\
    \   EFIDCMD   Command Code                                      Character\n  \
    \    Value: 'T'  EFID Command identifier.\n   EFIDRCNT  Record Count         \
    \                            Numeric(9)\n    Maximum: 999999999\n            \
    \ For SSIDFMT 'F' or 'V' the exact record count.\n             For SSIDFMT 'U'\
    \ or 'T' zeros.\n             The count will express the real size of the file\
    \ (before\n             compression, header not included).  The total count is\n\
    \             always used, even during restart processing.\n   EFIDUCNT  Unit\
    \ Count                                      Numeric(12)\n    Maximum: 999999999999\n\
    \             Exact number of units (octets) transmitted.\n             The count\
    \ will express the real size of the file.  The\n             total count is always\
    \ used, even during restart processing.\n"
- title: 5.3.9  EFPA - End File Positive Answer
  contents:
  - "5.3.9  EFPA - End File Positive Answer\n   o-------------------------------------------------------------------o\n\
    \   |       EFPA        End File Positive Answer                        |\n  \
    \ |                                                                   |\n   |\
    \       End File Phase             Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EFPACMD   | EFPA Command, '4'                     | F X(1)  |\n   |  \
    \ 1 | EFPACD    | Change Direction Indicator, (Y/N)     | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   EFPACMD   Command Code                                      Character\n  \
    \    Value: '4'  EFPA Command identifier.\n   EFPACD    Change Direction Indicator\
    \                        Character\n      Value: 'N'  Change direction not requested.\n\
    \             'Y'  Change direction requested.\n             This parameter allows\
    \ the Listener to request a Change\n             Direction (CD) command from the\
    \ Speaker.\n"
- title: 5.3.10  EFNA - End File Negative Answer
  contents:
  - "5.3.10  EFNA - End File Negative Answer\n   o-------------------------------------------------------------------o\n\
    \   |       EFNA        End File Negative Answer                        |\n  \
    \ |                                                                   |\n   |\
    \       End File Phase             Speaker <---- Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EFNACMD   | EFNA Command, '5'                     | F X(1)  |\n   |  \
    \ 1 | EFNAREAS  | Answer Reason                         | F 9(2)  |\n   o-------------------------------------------------------------------o\n\
    \   EFNACMD   Command Code                                      Character\n  \
    \    Value: '5'  EFNA Command identifier.\n   EFNAREAS  Answer Reason        \
    \                            Numeric(2)\n      Value: '01'  Invalid filename.\n\
    \             '02'  Invalid destination.\n             '03'  Invalid origin.\n\
    \             '04'  Storage record format not supported.\n             '05'  Maximum\
    \ record length not supported.\n             '06'  File size is too big.\n   \
    \          '10'  Invalid record count.\n             '11'  Invalid byte count.\n\
    \             '12'  Access method failure.\n             '13'  Duplicate file.\n\
    \             '99'  Unspecified reason.\n             Reason why transmission\
    \ can not proceed.\n"
- title: 5.3.11  ESID - End Session
  contents:
  - "5.3.11  ESID - End Session\n   o-------------------------------------------------------------------o\n\
    \   |       ESID        End Session                                     |\n  \
    \ |                                                                   |\n   |\
    \       End Session Phase          Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | ESIDCMD   | ESID Command, 'F'                     | F X(1)  |\n   |  \
    \ 1 | ESIDREAS  | Reason Code                           | F 9(2)  |\n   |   3\
    \ | ESIDCR    | Carriage Return                       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   ESIDCMD   Command Code                                      Character\n  \
    \    Value: 'F'  ESID Command identifier.\n   ESIDREAS  Reason Code          \
    \                            Numeric(2)\n      Value  '00'  Normal session termination\n\
    \             '01'  Command not recognised\n                   An Exchange Buffer\
    \ contains an invalid command code\n                   (1st octet of the buffer).\n\
    \             '02'  Protocol violation\n                   An Exchange Buffer\
    \ contains an invalid command for\n                   the current state of the\
    \ receiver.\n             '03'  User code not known\n                   A Start\
    \ Session (SSID) command contains an unknown or\n                   invalid Identification\
    \ Code.\n             '04'  Invalid password\n                   A Start Session\
    \ (SSID) command contained an invalid\n                   password.\n        \
    \     '05'  Local site emergency close down\n                   The local site\
    \ has entered an emergency close down\n                   mode.  Communications\
    \ are being forcibly terminated.\n             '06'  Command contained invalid\
    \ data\n                   A field within a Command Exchange buffer contains\n\
    \                   invalid data.\n             '07'  Exchange Buffer size error\n\
    \                   The length of the Exchange Buffer as determined by\n     \
    \              the Stream Transmission Header is different to the\n          \
    \         length implied by the Command Code.\n             '08'  Resources not\
    \ available\n                   The request for connection has been denied due\
    \ to a\n                   resource shortage.  The connection attempt should be\n\
    \                   retried later.\n             '09'  Time out\n            \
    \ '10'  Mode or capabilities incompatible\n             '99'  Unspecified Abort\
    \ code\n                   An error was detected for which no specific code is\n\
    \                   defined.\n   ESIDCR    Carriage Return                   \
    \                Character\n      Value: Character with hex value '0D' or '8D'.\n"
- title: 5.3.12  CD - Change Direction
  contents:
  - "5.3.12  CD - Change Direction\n   o-------------------------------------------------------------------o\n\
    \   |       CD          Change Direction                                |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |  \
    \     End File Phase             Speaker ----> Listener           |\n   |    \
    \   End Session Phase        Initiator <---> Responder          |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | CDCMD     | CD Command, 'R'                       | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   CDCMD     Command Code                                      Character\n  \
    \    Value: 'R'  CD Command identifier.\n"
- title: 5.3.13  EERP - End to End Response
  contents:
  - "5.3.13  EERP - End to End Response\n   o-------------------------------------------------------------------o\n\
    \   |       EERP        End to End Response                             |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase           Speaker ----> Listener           |\n   |  \
    \     End File Phase             Speaker ----> Listener           |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | EERPCMD   | EERP Command, 'E'                     | F X(1)  |\n   |  \
    \ 1 | EERPDSN   | Virtual File Dataset Name             | V X(26) |\n   |  27\
    \ | EERPRSV1  | Reserved                              | F X(9)  |\n   |  36 |\
    \ EERPDATE  | Virtual File Date stamp, (YYMMDD)     | V X(6)  |\n   |  42 | EERPTIME\
    \  | Virtual File Time stamp, (HHMMSS)     | V X(6)  |\n   |  48 | EERPUSER  |\
    \ User Data                             | V X(8)  |\n   |  56 | EERPDEST  | Destination\
    \                           | V X(25) |\n   |  81 | EERPORIG  | Originator   \
    \                         | V X(25) |\n   o-------------------------------------------------------------------o\n\
    \   EERPCMD   Command Code                                      Character\n  \
    \    Value: 'E'  EERP Command identifier.\n   EERPDSN   Virtual File Dataset Name\
    \                        String(26)\n             Dataset name of the Virtual\
    \ File being transferred,\n             assigned by bilateral agreement.\n   \
    \          No general structure is defined for this attribute.\n             See\
    \ Virtual Files - Identification (Section 1.5.2)\n   EERPRSV1  Reserved      \
    \                                    String(9)\n             This field is reserved\
    \ for future use.\n   EERPDATE  Virtual File Date stamp                      \
    \     String(6)\n     Format: 'YYMMDD'  6 decimal digits representing the year,\
    \ month\n             and day respectively [ISO-8601].\n             Date stamp\
    \ assigned by the Virtual File's Originator\n             indicating when the\
    \ file was made available for\n             transmission.\n             See Virtual\
    \ Files - Identification (Section 1.5.2)\n   EERPTIME  Virtual File Time stamp\
    \                           String(6)\n      Format: 'HHMMSS'  6 decimal digits\
    \ representing hours, minutes\n             and seconds respectively [ISO-8601].\n\
    \             Time stamp assigned by the Virtual File's Originator\n         \
    \    indicating when the file was made available for\n             transmission.\n\
    \             See Virtual Files - Identification (Section 1.5.2)\n   EERPUSER\
    \  User Data                                         String(8)\n             May\
    \ be used by the ODETTE-FTP in any way.  If unused it\n             should be\
    \ initialised to spaces.  It is expected that a\n             bilateral agreement\
    \ exists as to the meaning of the data.\n   EERPDEST  Destination            \
    \                          String(25)\n     Format: See Identification Code (Section\
    \ 5.4)\n             Originator of the Virtual File.\n             This is the\
    \ location that created (mapped) the data for\n             transmission.\n  \
    \ EERPORIG  Originator                                       String(25)\n    \
    \ Format: See Identification Code (Section 5.4)\n             Final Recipient\
    \ of the Virtual File.\n             This is the location that will look into\
    \ the Virtual File\n             content and perform mapping functions.  It is\
    \ also the\n             location that creates the EERP for the received file.\n"
- title: 5.3.14  RTR - Ready To Receive
  contents:
  - "5.3.14  RTR - Ready To Receive\n   o-------------------------------------------------------------------o\n\
    \   |       RTR         Ready To Receive                                |\n  \
    \ |                                                                   |\n   |\
    \       Start File Phase         Initiator <---- Responder          |\n   |  \
    \     End File Phase           Initiator <---- Responder          |\n   |-------------------------------------------------------------------|\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | RTRCMD    | RTR Command, 'P'                      | F X(1)  |\n   o-------------------------------------------------------------------o\n\
    \   RTRCMD    Command Code                                      Character\n  \
    \    Value: 'P'  RTR Command identifier.\n"
- title: 5.4  Identification Code
  contents:
  - "5.4  Identification Code\n   The Initiator (sender) and Responder (receiver)\
    \ participating in an\n   ODETTE-FTP session are uniquely identified by an Identification\
    \ Code\n   based on [ISO 6523], Structure for the Identification of\n   Organisations\
    \ (SIO).  The locations are considered to be adjacent for\n   the duration of\
    \ the transmission.\n   The SIO has the following format.\n   o-------------------------------------------------------------------o\n\
    \   | Pos | Field     | Description                           | Format  |\n  \
    \ |-----+-----------+---------------------------------------+---------|\n   |\
    \   0 | SIOOID    | ODETTE Identifier                     | F X(1)  |\n   |  \
    \ 1 | SIOICD    | International Code Designator         | V 9(4)  |\n   |   5\
    \ | SIOORG    | Organisation Code                     | V X(14) |\n   |  19 |\
    \ SIOCSA    | Computer Sub-Address                  | V X(6)  |\n   o-------------------------------------------------------------------o\n\
    \   SIOOID    ODETTE Identifier                                 Character\n  \
    \    Value: 'O' Indicates ODETTE assigned Organisation Identifier.\n         \
    \        Other values may be used for non-ODETTE codes.\n   SIOICD    International\
    \ Code Designator                     String(4)\n             A code forming part\
    \ of the Organisation Identifier.\n   SIOORG    Organisation Code            \
    \                    String(14)\n             A code forming part of the Organisation\
    \ Identifier.  This\n             field may contain the letters A to Z, the digits\
    \ 0 to 9,\n             apace and hyphen characters.\n   SIOCSA    Computer Sub-Address\
    \                              String(6)\n             A locally assigned address\
    \ which uniquely identifies a\n             system within an organisation (defined\
    \ by an Organisation\n             Identifier).\n"
- title: 6. ODETTE-FTP Data Exchange Buffer
  contents:
  - '6. ODETTE-FTP Data Exchange Buffer

    '
- title: 6.1  Overview
  contents:
  - "6.1  Overview\n   Virtual Files are transmitted by mapping the Virtual File records\n\
    \   into Data Exchange Buffers, the maximum length of which was\n   negotiated\
    \ between the ODETTE-FTP entities via the Start Session\n   (SSID) commands exchanged\
    \ during the Start Session Phase of the\n   protocol.  The format is based on\
    \ the Network Independent File\n   Transfer Protocol [NIFTP].\n   Virtual File\
    \ records may be of arbitrary length.  A simple\n   compression scheme is defined\
    \ for strings of repeated characters.\n   An example of the use of the Data Exchange\
    \ Buffer can be found in\n   Appendix A.\n"
- title: 6.2  Data Exchange Buffer Format
  contents:
  - "6.2  Data Exchange Buffer Format\n   For transmission of Virtual File records,\
    \ data is divided into\n   Subrecords, each of which is preceded by a one octet\
    \ Subrecord\n   Header.\n   The Data Exchange Buffer is made up of the initial\
    \ Command character,\n      o--------------------------------------------------------\n\
    \      | C | H |           | H |           | H |           |   /\n      | M |\
    \ D | SUBRECORD | D | SUBRECORD | D | SUBRECORD |  /_\n      | D | R |       \
    \    | R |           | R |           |   /\n      o-------------------------------------------------------\n\
    \   CMD\n      The Data Exchange Buffer Command Character, 'D'.\n   HDR\n    \
    \  A one octet Subrecord Header defined as follows:\n          0   1   2   3 \
    \  4   5   6   7\n        o-------------------------------o\n        | E | C |\
    \                       |\n        | o | F | C O U N T             |\n       \
    \ | R |   |                       |\n        o-------------------------------o\n\
    \      Bits\n       0     End of Record Flag\n             Set to indicate that\
    \ the next subrecord is the last\n             subrecord of the current record.\n\
    \             Unstructured files are transmitted as a single record, in\n    \
    \         this case the flag acts as an end of file marker.\n       1     Compression\
    \ Flag\n             Set to indicate that the next subrecord is compressed.\n\
    \      2-7    Subrecord Count\n             The number of octets in the Virtual\
    \ File represented by the\n             next subrecord expressed as a binary value.\n\
    \             For uncompressed data this is simply the length of the\n       \
    \      subrecord.\n             For compressed data this is the number of times\
    \ that the\n             single octet in the following subrecord must be inserted\
    \ in\n             the Virtual File.\n             As six bits are available,\
    \ the next subrecord may\n             represent between 0 and 63 octets of the\
    \ Virtual File.\n"
- title: 6.3  Buffer Filling Rules
  contents:
  - "6.3  Buffer Filling Rules\n   An Exchange Buffer may be any length up to the\
    \ value negotiated in\n   the Start Session exchange.\n   Virtual File records\
    \ may be concatenated within one Exchange Buffer\n   or split across a number\
    \ of buffers.\n   A subrecord is never split between two Exchange Buffers.  If\
    \ the\n   remaining space in the current Exchange Buffer is insufficient to\n\
    \   contain the next 'complete' subrecord one of the following strategies\n  \
    \ should be used:\n   1. Truncate the Exchange Buffer, and put the complete\n\
    \      subrecord (preceded by its header octet) in a new Exchange Buffer.\n  \
    \ 2. Split the subrecord into two, filling the remainder of the\n      Exchange\
    \ Buffer with the first new subrecord and starting a new\n      Exchange Buffer\
    \ with the second.\n   A record of length zero may appear anywhere in the Exchange\
    \ Buffer.\n   A subrecord of length zero may appear anywhere in the record and/or\n\
    \   the Exchange Buffer.\n"
- title: 7. Stream Transmission Buffer (TCP only)
  contents:
  - '7. Stream Transmission Buffer (TCP only)

    '
- title: 7.1  Introduction
  contents:
  - "7.1  Introduction\n   The ODETTE-FTP was originally designed to utilise the ISO\
    \ Network\n   Service, specifically the X.25 specification.  It relies on the\
    \ fact\n   that the network service will preserve the sequence and boundaries\
    \ of\n   data units transmitted through the network and that the network\n   service\
    \ will pass the length of the data unit to the receiving\n   ODETTE-FTP.  The\
    \ TCP offers a stream based connection which does not\n   provide these functions.\n\
    \   In order to utilise the TCP stream without disruption to the existing\n  \
    \ ODETTE-FTP a Stream Transmission Buffer (STB) is created by adding a\n   Stream\
    \ Transmission Header (STH) to the start of all Command and Data\n   Exchange\
    \ Buffers before they are passed to the TCP transport service.\n   This allows\
    \ the receiving ODETTE-FTP to recover the original Exchange\n   Buffers.\n   \
    \   STH - Stream Transmission Header\n      OEB - ODETTE-FTP Exchange Buffer\n\
    \   The Stream Transmission Buffer comprises of a STH and OEB.\n   o-----+-----------------+-----+--------------------+-----+------\n\
    \   | STH | OEB             | STH |  OEB               | STH | OEB/\n   o-----+-----------------+-----+--------------------+-----+----\n"
- title: 7.2  Stream Transmission Header Format
  contents:
  - "7.2  Stream Transmission Header Format\n   The Stream Transmission Header is\
    \ shown below.  The fields are\n   transmitted from left to right.\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version| Flags | Length                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n      Value: 0001 (binary)\n             Stream Transmission Header\
    \ version number.\n   Flags\n      Value: 0000 (binary)\n             Reserved\
    \ for future use.\n   Length\n      Range: 5 - 100003 (decimal)\n      The length\
    \ of the Stream Transmission Buffer (STH+OEB).\n      The smallest STB is 5 octets\
    \ consisting of a 4 octet header\n      followed by a 1 octet Exchange Buffer\
    \ such as a Change Direction\n      (CD) command.\n      The maximum Exchange\
    \ Buffer length that can be negotiated is 99999\n      octets (Section 5.3.2)\
    \ giving a STB length of 100003.\n      The length is expressed as a binary number\
    \ with the most\n      significant bit on the left.\n   It is expected that implementations\
    \ of this protocol will follow the\n   Internet robustness principle of being\
    \ conservative in what is sent\n   and liberal in what is accepted.\n"
- title: 8. Protocol State Machine
  contents:
  - '8. Protocol State Machine

    '
- title: 8.1  ODETTE-FTP State Machine
  contents:
  - "8.1  ODETTE-FTP State Machine\n   The operation of an ODETTE-FTP entity is formally\
    \ defined by the\n   State Machine presented below.  There are five State and\
    \ Transition\n   tables and for each table additional information is given in\
    \ the\n   associated Predicate and Action lists.\n   The response of an ODETTE-FTP\
    \ entity to the receipt of an event is\n   defined by a Transition table entry\
    \ indexed by the Event/State\n   intersection within the appropriate State table.\n\
    \   Each Transition table entry defines the actions taken, events\n   generated\
    \ and new state entered.  Predicates may be used within a\n   table entry to select\
    \ the correct response on the basis of local\n   information held by the entity.\n\
    \   A transition table contains the following fields:\n   Index(I)    State transition\
    \ index.\n   Predicate   A list of predicates used to select between different\n\
    \               possible transitions.  The predicates are defined in the\n   \
    \            Predicate and Action list.\n   Actions     A list of actions taken\
    \ by the entity.  The actions are\n               defined in the Predicate and\
    \ Action list.\n   Events      Output events generated by the entity\n   Next\
    \ State  The new state of the entity.\n"
- title: 8.2  Error Handling
  contents:
  - "8.2  Error Handling\n   The receipt of an event in a given state may be invalid\
    \ for three\n   reasons.\n   1.  The case is impossible by construction of the\
    \ state automata,\n       denoted 'X' in the State tables.  For example a timer\
    \ which has\n       not been set cannot run out.\n   2.  The event is the result\
    \ of an error in the Network Service\n       implementation, also denoted 'X'\
    \ in the state tables.  The\n       Network Service implementation is considered\
    \ to be correct.\n   3.  For all other cases the event is considered to be a User\
    \ Error,\n       denoted \"U\" in the state tables.\n   The State tables define\
    \ the conditions under which a User event is\n   valid, thus preventing the generation\
    \ of a protocol error by the\n   ODETTE-FTP entity as a result of a User Monitor\
    \ error.  The reaction\n   of the entity to such errors is undefined and regarded\
    \ as a local\n   implementation issue.\n   The State tables also allow protocol\
    \ errors due to the receipt of\n   invalid Exchange Buffers, to be detected. \
    \ In such cases the reaction\n   of the entity to the error is defined.\n"
- title: 8.3  States
  contents:
  - "8.3  States\n   The Command Mode is strictly a Half Duplex Flip-Flop Mode.\n\
    \   A_NC_ONLY   Responder, Network Connection opened\n               The Responder\
    \ has sent it's Ready Message (SSRM) and is\n               waiting for Start\
    \ Session (SSID) from the Initiator.\n   A_WF_CONRS  Responder Waiting for F_CONNECT_RS\n\
    \               The Responder has received the Initiator's Start Session\n   \
    \            (SSID) and is waiting for a response (F_CONNECT_RS) from\n      \
    \         it's User Monitor.\n   CDSTWFCD    CD_RQ stored in WF_CD state\n   \
    \            Since the User Monitor doesn't see the WF_CD state it may\n     \
    \          send a Change Direction request (F_CD_RQ) before the\n            \
    \   ODETTE-FTP receives a Change Direction (CD) command.\n   CLIP        Close\
    \ Input Pending\n               The Listener has received an End File (EFID) command\
    \ and\n               is waiting for the Close File response (F_CLOSE_FILE_RS)\n\
    \               from it's User Monitor.\n   CLOP        Close Out Pending\n  \
    \             The Speaker has sent an End File (EFID) command and is\n       \
    \        waiting for an End File Answer (EFPA or EFNA).\n   ERSTWFCD    End to\
    \ End Response stored in WF_CD state\n               Since the User Monitor doesn't\
    \ see the WF_CD state it may\n               send F_EERP_RQ, before the ODETTE-FTP\
    \ receives a Change\n               Direction (CD) command.\n   IDLE        Connection\
    \ IDLE\n   IDLELI      Idle Listener\n   IDLELICD    Idle Listener, F_CD_RQ Received\n\
    \               The ODETTE-FTP entity has become the Listener after\n        \
    \       receiving a Change Direction request (F_CD_RQ) from the\n            \
    \   User Monitor.  The receipt of an End Session (ESID) is\n               valid\
    \ in this state.\n   IDLESP      Idle Speaker\n   IDLESPCD    Idle Speaker, F_CD_IND\
    \ Sent\n               The ODETTE-FTP entity has sent a Change Direction\n   \
    \            indication (F_CD_IND) to the User Monitor.  A Change\n          \
    \     Direction request (F_CD_RQ) is invalid in this state.\n   I_WF_NC     Initiator\
    \ Waiting for Network Connection\n               The Initiator has requested a\
    \ new network connection and\n               is waiting for a Connection confirmation\
    \ (N_CON_CF) from\n               the Network Service.\n   I_WF_RM     Initiator\
    \ Waiting for Ready Message\n               Before sending Start Session (SSID),\
    \ the Initiator must\n               wait for a Ready Message (SSRM) from the\
    \ Responder.\n   I_WF_SSID   Initiator Waiting for SSID\n               The Initiator\
    \ has sent a Start Session (SSID) command and\n               is waiting for Start\
    \ Session from the Responder.\n   OPI         Open Input (Data Transfer Phase)\n\
    \               The Listener is waiting for the Speaker to send a Data\n     \
    \          Exchange buffer.\n   OPIP        Open Input Pending\n             \
    \  The Listener has received a Start File (SFID) command and\n               is\
    \ waiting for the Start File response (F_START_FILE_RS)\n               from it's\
    \ User Monitor.\n   OPO         Open Out (Data Transfer Phase)\n             \
    \  The Speaker has received a Start File Positive Answer\n               (SFPA)\
    \ and is waiting for a Data (F_DATA_RQ) or Close\n               File (F_CLOSE_FILE)\
    \ request from it's User Monitor.\n   OPOP        Open Out Pending\n         \
    \      The Speaker has sent a Start File (SFID) command and is\n             \
    \  waiting for a Start File Answer (SFPA or SFNA).\n   OPOWFC      Open Out Wait\
    \ for Credit\n               The Speaker is waiting for a Set Credit (CDT) command\n\
    \               before sending further Data Exchange buffers.\n   SFSTWFCD   \
    \ Start File Request stored in WF_CD state.\n               Since the User Monitor\
    \ doesn't see the WF_CD state it may\n               send a Start File request\
    \ (F_START_FILE_RQ) before the\n               ODETTE-FTP receives a Change Direction\
    \ (CD) command.\n   WF_CD       Wait for Change Direction\n               The\
    \ Listener wishes to become the Speaker and is waiting\n               for a Change\
    \ Direction (CD) command after sending an End\n               File Positive Answer\
    \ (EFPA) requesting change direction.\n   WF_RTR      Wait for Ready To Receive\n\
    \               The Initiator has sent an End to End Response (EERP)\n       \
    \        command and must wait for Ready To Receive (RTR) from the\n         \
    \      Responder.\n   WF_NDISC    Wait for N_DISC_IND\n               ODETTE-FTP\
    \ has sent an End Session (ESID) command and is\n               waiting for a\
    \ Disconnection indication (N_DISC_IND) from\n               the Network Service.\n"
- title: 8.4  Input Events
  contents:
  - "8.4  Input Events\n   User Monitor Input Events (Section 3)\n     F_DATA_RQ \
    \  F_CONNECT_RQ   F_START_FILE_RQ      F_CLOSE_FILE_RQ\n     F_EERP_RQ   F_CONNECT_RS\
    \   F_START_FILE_RS(+)   F_CLOSE_FILE_RS(+)\n     F_CD_RQ     F_ABORT_RQ     F_START_FILE_RS(-)\
    \   F_CLOSE_FILE_RS(-)\n                 F_RELEASE_RQ\n   Network Input Events\
    \ (Section 2.2)\n      N_CON_IND   N_CON_CF   N_DATA_IND   N_DISC_IND   N_RST_IND\n\
    \   Peer ODETTE-FTP Input Events (Section 4)\n      SSID   SFID   SFPA   SFNA\
    \   EFID   EFPA   EFNA\n      DATA   ESID   EERP   RTR    CD     CDT    SSRM\n\
    \   Internal Input Events\n      TIME-OUT - Internal ODETTE-FTP timer expires.\n\
    \   Input event parameters are denoted I.Event-name.Parameter-name within\n  \
    \ the state table action and predicate lists.  Their value can be\n   examined\
    \ but not changed by the ODETTE-FTP entity.\n"
- title: 8.5  Output Events
  contents:
  - "8.5  Output Events\n   User Monitor Output Events (Section 3)\n     F_DATA_IND\
    \  F_CONNECT_IND  F_START_FILE_IND     F_CLOSE_FILE_IND\n     F_EERP_IND  F_CONNECT_CF\
    \   F_START_FILE_CF(+)   F_CLOSE_FILE_CF(+)\n     F_CD_IND    F_ABORT_IND    F_START_FILE_CF(-)\
    \   F_CLOSE_FILE_CF(-)\n                 F_RELEASE_IND\n   Network Output Events\
    \ (Section 2.2)\n      N_CON_RQ   N_CON_RS   N_DATA_RQ   N_DISC_RQ\n   Peer ODETTE-FTP\
    \ Output Events (Section 4)\n      SSID   SFID   SFPA   SFNA   EFID   EFPA   EFNA\n\
    \      DATA   ESID   EERP   RTR    CD     CDT    SSRM\n   Output event parameters\
    \ are denoted O.Event-name.Parameter-name\n   within the state table action and\
    \ predicate lists.  Their values can\n   be examined and changed by the ODETTE-FTP\
    \ entity.\n"
- title: 8.6  Local Variables
  contents:
  - "8.6  Local Variables\n   The following variables are maintained by the ODETTE-FTP\
    \ entity to\n   assist the operation of the protocol.  They are denoted V.Variable-\n\
    \   name within the state table action and predicate lists.  Their value\n   can\
    \ be examined and changed by the ODETTE-FTP entity.  The initial\n   value of\
    \ each variable is undefined.\n   Variable     Type       Comments\n   ---------------------------------------------------------------------\n\
    \   Buf-size     Integer    Negotiated Exchange Buffer size.\n   Called-addr \
    \ Address    Used to build O.F_CONNECT_IND.Called-addr\n   Calling-addr Address\
    \    To build O.F_CONNECT_IND.Calling-addr\n   Compression  Yes/No     Compression\
    \ in used as agreed.\n   Credit_L     Integer    Listeners credit counter.\n \
    \  Credit_S     Integer    Speaker's credit counter.\n   Id           String \
    \    Used to build O.SSID.Id\n   Mode                    Sender-only, Receiver-only,\
    \ Both.\n   Pswd         String     Password, used to build O.SSID.Pswd\n   Req-buf\
    \      Primitive  Input event (F_XXX_RQ) stored in WF_CD state.\n   Restart  \
    \    Yes/No     Restart in used as agreed.\n   Restart-pos  Integer    Used only\
    \ during file opening.\n   Window       Integer    The Credit value negotiated\
    \ for the session.\n   ---------------------------------------------------------------------\n"
- title: 8.7  Local Constants
  contents:
  - "8.7  Local Constants\n   The following constants define the capabilities of a\
    \ given ODETTE-FTP\n   entity.  They are denoted C.Constant-name within the state\
    \ table\n   action and predicate lists.  Their value can be examined but not\n\
    \   changed by the ODETTE-FTP entity.\n   Constant         Value             \
    \  Comments\n   ---------------------------------------------------------------------\n\
    \   Cap-compression  Yes/No              Compression supported?\n   Cap-init \
    \        Initiator           Must be Initiator.\n                    Responder\
    \           Must be Responder.\n                    Both                Can be\
    \ Initiator or Responder.\n   Cap-mode         Sender-only         Must be sender.\n\
    \                    Receiver-only       Must be receiver.\n                 \
    \   Both                Can be sender or receiver.\n   Max-buf-size     127 <\
    \ Int < 100000  Maximum buffer size supported.\n   Max-window       Int < 1000\
    \          Local maximum credit value.\n   ---------------------------------------------------------------------\n"
- title: 8.8  Session Connection State Table
  contents:
  - '8.8  Session Connection State Table

    '
- title: 8.8.1  State Table
  contents:
  - "8.8.1  State Table\n   o----------------------------------------------o\n   |\
    \   | Other States                             |\n   |   |--------------------------------------o\
    \   |\n   | S | A_WF_CONRS                           |   |\n   |   |----------------------------------o\
    \   |   |\n   | T | A_NC_ONLY                        |   |   |\n   |   |------------------------------o\
    \   |   |   |\n   | A | I_WF_SSID                    |   |   |   |\n   |   |--------------------------o\
    \   |   |   |   |\n   | T | I_WF_RM                  |   |   |   |   |\n   | \
    \  |----------------------o   |   |   |   |   |\n   | E | I_WF_NC            \
    \  |   |   |   |   |   |\n   |   |------------------o   |   |   |   |   |   |\n\
    \   |   | IDLE             |   |   |   |   |   |   |\n   |==================o---+---+---+---+---+---+---|\n\
    \   |   | F_CONNECT_RQ | A | X | X | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---|\n\
    \   | E | N_CON_CF     | X | C | X | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---|\n\
    \   | V | SSRM         | X | X | H | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---|\n\
    \   | E | SSID         | X | X | X | D | E | F | F |\n   |   |--------------+---+---+---+---+---+---+---|\n\
    \   | N | N_CON_IND    | B | X | X | X | X | X | X |\n   |   |--------------+---+---+---+---+---+---+---|\n\
    \   | T | F_CONNECT_RS | X | U | U | U | U | G | U |\n   |   |--------------+---+---+---+---+---+---+---|\n\
    \   |   | ESID(R=10)   | X | X | X | F | X | X | X |\n   o----------------------------------------------o\n"
- title: 8.8.2  Transition Table
  contents:
  - "8.8.2  Transition Table\n    I | Predicate    Actions     Output Events     \
    \          Next State\n   ===o=================================================================\n\
    \    A | P1:                      F_ABORT_IND                 IDLE\n      | not\
    \ P1:      1           N_CON_RQ                    I_WF_NC\n   ---+-----------------------------------------------------------------\n\
    \    B | P3:                      N_DISC_RQ                   IDLE\n      | not\
    \ P3:                  N_CON_RS\n      |                          SSRM       \
    \                 A_NC_ONLY\n   ---+-----------------------------------------------------------------\n\
    \    C |              2                                       I_WF_RM\n   ---+-----------------------------------------------------------------\n\
    \    D | P2:          4,2,5       F_CONNECT_CF                IDLESP\n      |\
    \ not P2:      4,2         ESID(R=10)\n      |                          F_ABORT_IND(R,AO=L)\
    \         WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    E | P4:          4           N_DISC_RQ                   IDLE\n      | not\
    \ P4:                  F_CONNECT_IND               A_WF_CONRS\n   ---+-----------------------------------------------------------------\n\
    \    F |                          F_ABORT_IND\n      |                       \
    \   N_DISC_RQ                   IDLE\n   ---+-----------------------------------------------------------------\n\
    \    G | P2:          4,2,5       SSID                        IDLELI\n      |\
    \ not P2:      4,2         ESID(R=10)\n      |                          F_ABORT_IND(R,AO=L)\
    \         WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    H |              4,2,3       SSID                        I_WF_SSID\n   ---------------------------------------------------------------------\n"
- title: 8.8.3  Predicates and Actions.
  contents:
  - "8.8.3  Predicates and Actions.\n   Predicate P1:  (No resources available) OR\n\
    \                  (C.Cap-init = Responder) OR\n                  (C.Cap-mode\
    \ = Sender-only AND\n                     I.F_CONNECT_RQ.Mode = Receiver-only)\
    \ OR\n                  (C.Cap-mode = Receiver-only AND\n                    \
    \ I.F_CONNECT_RQ.Mode = Sender-only)\n   Predicate P2:  Negotiation of (Buf-size,\
    \ Restart, Compression,\n                                  Mode, Credit) is OK.\n\
    \   Predicate P3:  C.Cap-init = Initiator\n   Predicate P4:  Mode in SSID incompatible\
    \ with C.Cap-mode\n       Action 1:  Set V.Mode from (C.Cap-mode, I.F_CONNECT_RQ.Mode)\n\
    \                  Set V.Pswd, V.Id, V.Restart from I.F_CONNECT_RQ\n         \
    \         Set V.Buf-size = C.Max-buf-size\n                  Set V.Compression\
    \ = C.Cap-compression\n                  Build O.N_CON_RQ\n       Action 2:  Start\
    \ inactivity timer\n       Action 3:  Set parameters in O.SSID = from local variables\n\
    \       Action 4:  Stop timer\n       Action 5:  Set V.Mode, V.Restart, V.Compression,\
    \ V.Buf-size,\n                      V.Window = from SSID\n"
- title: 8.9  Error and Abort State Table
  contents:
  - '8.9  Error and Abort State Table

    '
- title: 8.9.1  State Table
  contents:
  - "8.9.1  State Table\n   o--------------------------------------o\n   |   | Other\
    \ States                     |\n   | S |------------------------------o   |\n\
    \   | T | WF_NDISC                     |   |\n   | A |--------------------------o\
    \   |   |\n   | T | I_WF_NC                  |   |   |\n   | E |----------------------o\
    \   |   |   |\n   |   | IDLE                 |   |   |   |\n   |======================o---+---+---+---|\n\
    \   |   | TIME-OUT         | X | X | A | B |\n   |   |------------------+---+---+---+---|\n\
    \   | E | F_ABORT_RQ       | X | A | X | C |\n   | V |------------------+---+---+---+---|\n\
    \   | E | N_RST_IND        | X | X | A | D |\n   | N |------------------+---+---+---+---|\n\
    \   | T | N_DISC_IND       | X | E | F | G |\n   |   |------------------+---+---+---+---|\n\
    \   |   | Invalid Buffer   | X | X | H | I |\n   o--------------------------------------o\n"
- title: 8.9.2  Transition Table
  contents:
  - "8.9.2  Transition Table\n    I | Predicate    Actions     Output Events     \
    \         Next State\n   ===o=================================================================\n\
    \    A |                          N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    B |                          F_ABORT_IND\n      |                       \
    \   N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    C |              1           N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    D |              1           N_DISC_RQ\n      |                         \
    \ F_ABORT_IND               IDLE\n   ---+-----------------------------------------------------------------\n\
    \    E |                          F_ABORT_IND               IDLE\n   ---+-----------------------------------------------------------------\n\
    \    F |              1                                     IDLE\n   ---+-----------------------------------------------------------------\n\
    \    G |              1           F_ABORT_IND               IDLE\n   ---+-----------------------------------------------------------------\n\
    \    H |                                                    WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    I |              1,2         ESID(R=01)\n      |                        \
    \  F_ABORT_IND(R,AO=L)       WF_NDISC\n   ---------------------------------------------------------------------\n"
- title: 8.9.3  Predicates and Actions.
  contents:
  - "8.9.3  Predicates and Actions.\n       Action 1:  Stop inactivity timer\n   \
    \    Action 2:  Start inactivity timer\n"
- title: 8.10  Speaker State Table 1
  contents:
  - '8.10  Speaker State Table 1

    '
- title: 8.10.1  State Table
  contents:
  - "8.10.1  State Table\n   The following abbreviations are used in the Speaker State\
    \ table.\n      F_REL_RQ(Ok)   -  F_RELEASE_RQ Reason = Normal\n      F_REL_RQ(Err)\
    \  -  F_RELEASE_RQ Reason = Error\n   o------------------------------------------------------------------o\n\
    \   |   | Other State                                                  |\n   |\
    \   |----------------------------------------------------------o   |\n   |   |\
    \ WF_NDISC                                                 |   |\n   |   |------------------------------------------------------o\
    \   |   |\n   |   | OPOWFC                                               |   |\
    \   |\n   |   |--------------------------------------------------o   |   |   |\n\
    \   |   | OPO                                              |   |   |   |\n   |\
    \ S |----------------------------------------------o   |   |   |   |\n   |   |\
    \ OPOP                                         |   |   |   |   |\n   | T |------------------------------------------o\
    \   |   |   |   |   |\n   |   | CDSTWFCD                                 |   |\
    \   |   |   |   |\n   | A |--------------------------------------o   |   |   |\
    \   |   |   |\n   |   | SFSTWFCD                             |   |   |   |   |\
    \   |   |\n   | T |----------------------------------o   |   |   |   |   |   |\
    \   |\n   |   | ERSTWFCD                         |   |   |   |   |   |   |   |\n\
    \   | E |------------------------------o   |   |   |   |   |   |   |   |\n   |\
    \   | WF_CD                        |   |   |   |   |   |   |   |   |\n   |   |--------------------------o\
    \   |   |   |   |   |   |   |   |   |\n   |   | WF_RTR                   |   |\
    \   |   |   |   |   |   |   |   |\n   |   |----------------------o   |   |   |\
    \   |   |   |   |   |   |   |\n   |   | IDLESPCD             |   |   |   |   |\
    \   |   |   |   |   |   |\n   |   |------------------o   |   |   |   |   |   |\
    \   |   |   |   |   |\n   |   | IDLESP           |   |   |   |   |   |   |   |\
    \   |   |   |   |\n   |===+==============o---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | F_EERP_RQ    | A | A | W | F | W | U | U | U | U | U | U | U |\n   |\
    \   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n   |   |\
    \ F_START_     | B | B | W | G | W | U | U | U | U | U | X | U |\n   |   |   FILE_RQ\
    \    |   |   |   |   |   |   |   |   |   |   |   |   |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | SFPA         | C | C | C | C | C | C | C | K | C | C | S | C |\n   |\
    \   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n   | E |\
    \ SFNA         | C | C | C | C | C | C | C | L | C | C | S | C |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \   | V | CD           | C | C | C | H | R | I | J | C | C | C | S | C |\n   |\
    \   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n   | E |\
    \ F_DATA_RQ    | U | U | U | U | U | U | U | U | M | V | S | U |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \   | N | CDT          | C | C | C | C | C | C | C | C | P | O | S | C |\n   |\
    \   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n   | T |\
    \ F_CD_RQ      | D | U | W | T | W | U | U | U | U | U | X | U |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | F_REL_RQ(Ok) | U | E | U | U | U | U | U | U | U | U | X | U |\n   |\
    \   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n   |   |\
    \ F_REL_RQ(Err)| Q | Q | Q | Q | Q | Q | Q | Q | Q | Q | S | Q |\n   |   |--------------+---+---+---+---+---+---+---+---+---+---+---+---|\n\
    \   |   | RTR          | C | C | N | C | C | C | C | C | C | C | S | C |\n   o------------------------------------------------------------------o\n"
- title: 8.10.2  Transition Table
  contents:
  - "8.10.2  Transition Table\n    I | Predicate    Actions     Output Events    \
    \          Next State\n   ===o=================================================================\n\
    \    A |              1,2,3       EERP                       WF_RTR\n   ---+-----------------------------------------------------------------\n\
    \    B | P1:                                                 UE\n      | not P1:\
    \      1,2,5       SFID                       OPOP\n   ---+-----------------------------------------------------------------\n\
    \    C |              1,2         ESID(R=02)\n      |                        \
    \  F_ABORT_IND(R,AO=L)        WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    D |              1,2         CD                         IDLELICD\n   ---+-----------------------------------------------------------------\n\
    \    E |              1,2         ESID(R=00)                 WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    F |              4                                      ERSTWFCD\n   ---+-----------------------------------------------------------------\n\
    \    G | P1:                                                 UE\n      | not P1:\
    \      6                                      SFSTWFCD\n   ---+-----------------------------------------------------------------\n\
    \    H |              1,2                                    IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    I |              1,2,10      SFID                       OPOP\n   ---+-----------------------------------------------------------------\n\
    \    J |              1,2         CD                         IDLELICD\n   ---+-----------------------------------------------------------------\n\
    \    K | P2:          1,2         ESID(R=02)\n      |                        \
    \  F_ABORT_IND(R,AO=L)        WF_NDISC\n      | not P2:      1,2,7,12    F_START_FILE_CF(+)\
    \         OPO\n   ---+-----------------------------------------------------------------\n\
    \    L |              1,2,8       F_START_FILE_CF(-)         IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    M | P3:          1,2,11,13   DATA                       OPOWFC\n      | not\
    \ P3:      1,2,11,13   DATA                       OPO\n   ---+-----------------------------------------------------------------\n\
    \    N |                          Note 3                     IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    O |              12                                     OPO\n      |    \
    \                                                 See Note 1\n   ---+-----------------------------------------------------------------\n\
    \    P | Protocol     1,2         ESID(R=02)\n      | Error                  \
    \  F_ABORT_IND(R,AO=L)        WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    Q |              1,2         ESID(R)                    WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \                                                            Continued -->\n \
    \   I | Predicate    Actions     Output Events              Next State\n   ===o=================================================================\n\
    \    R |              1,2,9       EERP                       WF_RTR\n   ---+-----------------------------------------------------------------\n\
    \    S |                                                     WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    T |                                                     CDSTWFCD\n   ---+-----------------------------------------------------------------\n\
    \    U |                          User Error                 UE\n   ---+-----------------------------------------------------------------\n\
    \    V |                          User Error - Note 1        UE\n   ---+-----------------------------------------------------------------\n\
    \    W |                          User Error - Note 2        UE\n   ---+-----------------------------------------------------------------\n\
    \    X |                          Error\n   ---------------------------------------------------------------------\n"
- title: 8.10.3  Predicates and Actions.
  contents:
  - "8.10.3  Predicates and Actions.\n   Predicate P1:  (I.F_START_FILE_RQ.Restart-pos\
    \ > 0) AND\n                  ((V.Restart = No) OR (V.Mode = Receiver-only))\n\
    \           Note:  Restart requested and not supported for this session.\n   Predicate\
    \ P2:  (I.SFPA.Restart-pos > V.Restart-pos)\n           Note:  Protocol error\
    \ due to the restart position in the\n                  SFPA acknowledgement being\
    \ greater than the position\n                  requested in the SFID request.\n\
    \   Predicate P3:  V.Credit_S - 1 = 0\n           Note:  Speaker's Credit is exhausted.\n\
    \       Action 1:  Stop inactivity timer\n       Action 2:  Start inactivity timer\n\
    \       Action 3:  Build an EERP from F_EERP_RQ\n       Action 4:  Store F_EERP_RQ\
    \ in V.Req-buf\n       Action 5:  Build SFID from F_START_FILE_RQ\n          \
    \        V.Restart-pos = I.F_START_FILE_RQ.Restart-pos\n       Action 6:  Store\
    \ F_START_FILE_RQ in V.Req-buf\n       Action 7:  Build F_START_FILE_CF(+) from\
    \ I.SFPA\n       Action 8:  Build F_START_FILE_CF(-) from I.SFNA\n       Action\
    \ 9:  Build EERP from F_EERP_RQ stored in V.Req-buf\n       Action 10: Build SFID\
    \ from F_START_FILE_RQ stored in V.Req-buf\n                  Set V.Restart-pos\n\
    \       Action 11: Build Exchange Buffer\n       Action 12: V.Credit_S = V.Window\n\
    \       Action 13: V.Credit_S = V.Credit_S - 1\n          Note 1: The OPOWFC state\
    \ prevents the Speaker from sending\n                  data buffers because it\
    \ is waiting for credit.  The\n                  ODETTE-FTP entity may need to\
    \ control the flow of Data\n                  requests (F_DATA_RQ) from it's User\
    \ Monitor to protect\n                  it's own buffers.  Any such mechanism\
    \ and the\n                  behaviour of the entity should a User Error occur\
    \ are\n                  regarded as local implementation issues.\n          Note\
    \ 2: The choice to accept this \"Request/Event\" while in\n                  this\
    \ state is a matter of local implementation.  The\n                  ODETTE state\
    \ tables are based on the assumption that\n                  this event cannot\
    \ occur in this state and is\n                  considered to be a user error\
    \ (UE).\n          Note 3: It is a local matter to make the User Monitor aware\n\
    \                  that since the RTR is received, the protocol machine\n    \
    \              is now ready to accept the next request.\n"
- title: 8.11  Speaker State Table 2
  contents:
  - '8.11  Speaker State Table 2

    '
- title: 8.11.1  State Table
  contents:
  - "8.11.1  State Table\n   o---------------------------------o\n   | S | CLOP  \
    \                      |\n   | T |-------------------------o   |\n   | A | OPOWFC\
    \                  |   |\n   | T |---------------------o   |   |\n   | E | OPO\
    \                 |   |   |\n   |=====================o---+---+---|\n   | E |\
    \ F_CLOSE_FILE_RQ | A | E | U |\n   | V |-----------------+---+---+---|\n   |\
    \ E | EFPA            | B | B | C |\n   | N |-----------------+---+---+---|\n\
    \   | T | EFNA            | B | B | D |\n   o---------------------------------o\n"
- title: 8.11.2  Transition Table
  contents:
  - "8.11.2  Transition Table\n    I | Predicate    Actions     Output Events    \
    \          Next State\n   ===o=================================================================\n\
    \    A |              1,2,5,7     EFID                       CLOP\n   ---+-----------------------------------------------------------------\n\
    \    B |              1,2         ESID(R=02)\n      |                        \
    \  F_ABORT_IND(R,AO=L)        WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    C | P1:          1,2,3       F_CLOSE_FILE_CF(+,SP=No)\n      |          \
    \                CD                         IDLELI\n      | not P1:      1,2,4\
    \       F_CLOSE_FILE_CF(+,SP=Yes)  IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    D |              1,2,6       F_CLOSE_FILE_CF(-)         IDLESP\n   ---+-----------------------------------------------------------------\n\
    \    E |                          See Note 1\n   ---+-----------------------------------------------------------------\n\
    \    U |                          User Error                 UE\n   ---------------------------------------------------------------------\n"
- title: 8.11.3  Predicates and Actions.
  contents:
  - "8.11.3  Predicates and Actions.\n   Predicate P1: (I.EFPA.CD-Request = Yes) \
    \ AND (V.Mode = Both)\n       Action 1:  Stop inactivity timer\n       Action\
    \ 2:  Start inactivity timer\n       Action 3:  O.F_CLOSE_FILE_CF(+).Speaker =\
    \ No\n       Action 4:  O.F_CLOSE_FILE_CF(+).Speaker = Yes\n       Action 5: \
    \ Build EFID from F_CLOSE_FILE_RQ\n       Action 6:  Build F_CLOSE_FILE_CF(-)\
    \ from EFNA\n       Action 7:  Set V.Credit_S = 0\n         Note 1:  In order\
    \ to respect the \"half duplex\" property of\n                  ODETTE-FTP it\
    \ is forbidden to send EFID while in the\n                  OPOWFC state. EFID\
    \ can be sent only in the OPO state.\n                  The ODETTE-FTP implementation\
    \ must avoid sending EFID\n                  (or receiving F_CLOSE_FILE_RQ) while\
    \ in the OPOWFC\n                  state.\n"
- title: 8.12  Listener State Table
  contents:
  - '8.12  Listener State Table

    '
- title: 8.12.1  State Table
  contents:
  - "8.12.1  State Table\n   o-----------------------------------------o\n   |   |\
    \ CLIP                                |\n   |   |---------------------------------o\
    \   |\n   |   | OPI                             |   |\n   | S |-----------------------------o\
    \   |   |\n   | T | OPIP                        |   |   |\n   | A |-------------------------o\
    \   |   |   |\n   | T | IDLELICD                |   |   |   |\n   | E |---------------------o\
    \   |   |   |   |\n   |   | IDLELI              |   |   |   |   |\n   |=====================o---+---+---+---+---|\n\
    \   |   | SFID            | A | A | B | B | B |\n   |   |-----------------+---+---+---+---+---|\n\
    \   | E | DATA            | B | B | B | I | B |\n   | V |-----------------+---+---+---+---+---|\n\
    \   | E | EFID            | B | B | B | J | B |\n   | N |-----------------+---+---+---+---+---|\n\
    \   | T | F_START_FILE_RS | U | U | H | U | U |\n   |   |-----------------+---+---+---+---+---|\n\
    \   |   | F_CLOSE_FILE_RS | U | U | U | U | K |\n   |   |-----------------+---+---+---+---+---|\n\
    \   |   | CD              | C | B | B | B | B |\n   |   |-----------------+---+---+---+---+---|\n\
    \   |   | ESID R=Normal   | D | F | D | D | D |\n   |   |-----------------+---+---+---+---+---|\n\
    \   |   | ESID R=Error    | D | D | D | D | D |\n   |   |-----------------+---+---+---+---+---|\n\
    \   |   | EERP            | E | G | B | B | B |\n   o-----------------------------------------o\n"
- title: 8.12.2  Transition Table
  contents:
  - "8.12.2  Transition Table\n    I | Predicate    Actions       Output Events  \
    \           Next State\n   ===o=================================================================\n\
    \    A | P1:          1,2           ESID(R=02)\n      |                      \
    \      F_ABORT_IND(R,AO=L)       WF_NDISC\n      | not P1:      1,2,3        \
    \ F_START_FILE_IND          OPIP\n   ---+-----------------------------------------------------------------\n\
    \    B |              1,2           ESID(R=02)\n      |                      \
    \      F_ABORT_IND(R,AO=L)       WF_NDISC\n   ---+-----------------------------------------------------------------\n\
    \    C |              1,2           F_CD_IND                  IDLESPCD\n   ---+-----------------------------------------------------------------\n\
    \    D |              1             F_ABORT_IND(Received\n      |            \
    \                   ESID Reason,AO=D)\n      |                            N_DISC_RQ\
    \                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    E |              4             F_EERP_IND\n      |              8       \
    \      See Note 2\n      |                            RTR                    \
    \   IDLELI\n   ---+-----------------------------------------------------------------\n\
    \    F |              1             F_RELEASE_IND\n      |                   \
    \         N_DISC_RQ                 IDLE\n   ---+-----------------------------------------------------------------\n\
    \    G |                            F_EERP_IND\n      |              8       \
    \      See Note 2\n      |                            RTR                    \
    \   IDLELI\n   ---+-----------------------------------------------------------------\n\
    \    H | P4:                        User Error                UE\n      | P2,not\
    \ P4:   1,2           SFPA                      OPI\n      | not(P2,P4):  1,2\
    \           SFNA                      IDLELI\n   ---+-----------------------------------------------------------------\n\
    \    I | P5:          1,2           ESID(R=02)\n      |                      \
    \      F_ABORT_IND(R,A0=L)       WF_NDISC\n      | not(P5,P6):  1,2,5        \
    \ F_DATA_IND                OPI\n      | not P5,P6:   1,2           F_DATA_IND\n\
    \      |              6,7           See Note 1\n      |                      \
    \      CDT                       OPI\n   ---+-----------------------------------------------------------------\n\
    \    J |              1,2           F_CLOSE_FILE_IND          CLIP\n   ---+-----------------------------------------------------------------\n\
    \    K | P2,P3:       1,2           EFPA(CD-Req)              WF_CD\n      | P2,not\
    \ P3:   1,2           EFPA(no CD)               IDLELI\n      | not P2:      1,2\
    \           EFNA                      IDLELI\n   ---+-----------------------------------------------------------------\n\
    \    U |                            User Error                UE\n   ---------------------------------------------------------------------\n"
- title: 8.12.3  Predicates and Actions.
  contents:
  - "8.12.3  Predicates and Actions.\n   Predicate P1:  (I.SFID.Restart-pos > 0) AND\
    \ (V.Restart = No)\n           Note:  Invalid Start File command\n   Predicate\
    \ P2:  Positive Response\n   Predicate P3:  I.F_CLOSE_FILE_RS(+).Speaker = Yes\n\
    \   Predicate P4:  I.F_START_FILE_RS(+).Restart-pos > V.Restart\n   Predicate\
    \ P5:  V.Credit_L - 1 < 0\n           Note:  Protocol Error because the Speaker\
    \ has exceeded it's\n                  available transmission credit.\n   Predicate\
    \ P6:  V.Credit_L - 1 = 0\n           Note:  The Speaker's credit must be reset\
    \ before it can send\n                  further Data Exchange buffers.\n     \
    \  Action 1:  Stop inactivity timer.\n       Action 2:  Start inactivity timer\n\
    \       Action 3:  Build F_START_FILE_IND from I.SFID\n                  V.Restart-pos\
    \ = I.SFID.Restart-pos\n       Action 4:  Build F_EERP_IND from I.EERP\n     \
    \  Action 5:  V.Credit_L = V.Credit_L - 1\n       Action 6:  Wait for sufficient\
    \ resources to receive up to\n                  V.Window Data Exchange Buffers.\n\
    \       Action 7:  V.Credit_L = V.Window\n       Action 8:  Wait for resources\
    \ required to process a new EERP.\n         Note 1:  Flow control in case of reception.\n\
    \                  The ODETTE-FTP Listener must periodically send new\n      \
    \            credit to the Speaker.  The timing of this operation\n          \
    \        will depend on:\n                  1. The User Monitor's capacity the\
    \ receive data.\n                  2. The number of buffers available to ODETTE-FTP.\n\
    \                  3. The Speaker's available credit, which must be\n        \
    \             equal to zero.\n         Note 2:  Generally, the ODETTE-FTP Listener\
    \ will send RTR\n                  immediately after receiving EERP.  If required,\
    \ it can\n                  delay the RTR until the resources required to process\n\
    \                  a new EERP are available.\n"
- title: 8.13  Example
  contents:
  - "8.13  Example\n   Consider an ODETTE-FTP entity that has sent a Start File (SFID)\n\
    \   command and entered the Open Out Pending (OPOP) state.  It's response\n  \
    \ on receiving a Positive Answer (SFPA) is documented in Speaker State\n   Table\
    \ 1 which shows that transition 'K' should be applied and is\n   interpreted as\
    \ follows:\n      if (I.SFPA.Restart-pos > V.Restart-pos) then\n      begin  \
    \                                     // invalid restart\n         Actions:  \
    \ Stop inactivity timer,        // reset timer\n                    Start inactivity\
    \ timer;\n         Output:    ESID(R=02),                   // to peer ODETTE-FTP\n\
    \                    F_ABORT_IND(R,AO=L);          // to user monitor\n      \
    \   New State: WF_NDISC;\n      end\n      else begin\n         Actions:   Stop\
    \ inactivity timer,        // reset timer\n                    Start inactivity\
    \ timer;\n                    Build F_START_FILE_CF(+) from I.SFPA\n         \
    \           V.Credit_S = V.Window         // initialise credit\n         Output:\
    \    F_START_FILE_CF(+);           // to user monitor\n         New State: OPO;\n\
    \      end\n   The ODETTE-FTP checks the restart position in the received Start\
    \ File\n   Positive Answer (SFPA) command.  If it is invalid it aborts the\n \
    \  session by sending an End Session (ESID) command to it's peer and an\n   Abort\
    \ indication (F_ABORT_IND) to it's User Monitor.  If the restart\n   position\
    \ is valid a Start File confirmation (F_START_FILE_CF) is\n   built and sent to\
    \ the User Monitor, the credit window is initialised\n   and the Open Out (OPO)\
    \ state is entered.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   ODETTE-FTP exchanges user identity and password\
    \ information in clear\n   text.  It is therefore recommended that a lower layer\
    \ (session,\n   network or linkage) security protocol is used to protect the session\n\
    \   from casual identity collection.\n"
- title: Appendix A.  Virtual File Mapping Example
  contents:
  - "Appendix A.  Virtual File Mapping Example\n   This example demonstrates the mapping\
    \ of a Virtual File into a\n   sequence of ODETTE-FTP Data Exchange Buffers and\
    \ shows how each\n   Stream Transmission Buffer is built from an ODETTE-FTP Data\
    \ Exchange\n   Buffer prefixed by a Stream Transmission Header.\n   Each line\
    \ in this extract from 'The Hunting of the Snark' by Lewis\n   Carroll [SNARK]\
    \ is considered to be a separate record in a file\n   containing variable length\
    \ records.  Note that it does not represent\n   a text file and CR/LF record separators\
    \ are not used.  The blank line\n   is represented by a zero length record.\n\
    \      \"It's a Snark!\" was the sound that first came to their ears,\n      \
    \     And seemed almost too good to be true.\n      Then followed a torrent of\
    \ laughter and cheers:\n           Then the ominous words \"It's a Boo-\"\n  \
    \    Then, silence.  Some fancied they heard in the air\n           A weary and\
    \ wandering sigh\n      Then sounded like \"-jum!\" but the others declare\n \
    \          It was only a breeze that went by.\n   Assuming that the minimum exchange\
    \ buffer length of 128 octets has\n   been negotiated the result of mapping the\
    \ text into Stream\n   Transmission Buffers may be as follows.\n   Stream Transmission\
    \ Buffer 1\n      Text  :  ....D.\"It' s a Snark! \" was the  sound that  first\
    \ cam\n      Hex-H :  10084B2472 7262566762 2276727662 7676627667 2667772666\n\
    \      Hex-L :  00044C2947 30103E12B1 2071304850 3F5E404814 069234031D\n     \
    \ Key   :  ----D!.... .......... .......... .......... ..........\n      Text\
    \  :  e to their  ears,. .A nd seemed  almost too  good to b\n      Hex-H :  6276276667\
    \ 26677242A4 6627666662 6666772766 2666627626\n      Hex-L :  504F048592 05123C5061\
    \ E40355D540 1CDF3404FF 07FF404F02\n      Key   :  .......... ......!.!. ..........\
    \ .......... ..........\n      Text  :  e true..Th en followe d a torren t\n \
    \     Hex-H :  6277762156 6626666676 6262767766 72\n      Hex-L :  504255E848\
    \ 5E06FCCF75 40104F225E 40\n      Key   :  .......!.. .......... .......... ..\n\
    \      Text  :  ....D.of l aughter an d cheers:.  .Then the  ominous w\n     \
    \ Hex-H :  1007496626 6766767266 6266667734 2A56662766 2666667727\n      Hex-L\
    \ :  000847F60C 157845201E 40385523A5 04485E0485 0FD9EF5307\n      Key   :  ----D!....\
    \ .......... .........! .!........ ..........\n      Text  :  ords \"It's  a Boo-\"\
    .. Then, sile nce.  Some  fancied t\n      Hex-H :  6767224727 262466228B 5666227666\
    \ 6662225666 2666666627\n      Hex-L :  F243029473 0102FFD202 485EC039C5 E35E003FD5\
    \ 061E395404\n      Key   :  .......... ........!! .......... .......... ..........\n\
    \      Text  :  hey heard  in the air\n      Hex-H :  6672666762 6627662667\n\
    \      Hex-L :  8590851240 9E04850192\n      Key   :  .......... ..........\n\
    \   Stream Transmission Buffer 3\n      Text  :  ....D. .A  weary and  wandering\
    \  sigh.Then  sounded li\n      Hex-H :  1007442942 7667726662 7666676662 7666B56662\
    \ 7676666266\n      Hex-L :  0008450A10 7512901E40 71E4529E70 39780485E0 3F5E4540C9\n\
    \      Key   :  ----D!.!.. .......... .......... ....!..... ..........\n     \
    \ Text  :  ke \"-jum!\"  but the o thers decl are. .It w as only a\n      Hex-H\
    \ :  6622267622 2677276626 7667726666 67642A4727 6726667262\n      Hex-L :  B502DA5D12\
    \ 025404850F 485230453C 1255029407 130FEC9010\n      Key   :  .......... ..........\
    \ .......... ...!.!.... ..........\n      Text  :  breeze tha t went by.\n   \
    \   Hex-H :  6766762766 7276672672\n      Hex-L :  2255A50481 4075E4029E\n   \
    \   Key   :  .......... ..........\n   Notes:\n      Hex-H       High order bits\
    \ of octet\n      Hex-L       Low order bits of octet\n      Key:  ----  Stream\
    \ Transmission Header\n            D     Data Exchange Buffer command code 'D'\n\
    \            !     Subrecord header octet\n            .     Place holder\n  \
    \    All headers are represented with a period in the Text line.\n   Each Data\
    \ Exchange Buffer is preceded by a Stream Transmission\n   Header.\n   In the\
    \ above mapping the first Data Exchange Buffer is 128 octets in\n   length.  The\
    \ last record has been continued in the second buffer.\n   The second Data Exchange\
    \ Buffer has been truncated at 116 octets to\n   finish at the end of a record.\
    \  The following record being completely\n   contained in the third buffer.  This\
    \ is an alternative to spanning\n   the record as shown between the first and\
    \ second Data Exchange\n   Buffers.\n   The blank line has been encoded as a single\
    \ header octet of '80' hex,\n   indicating a zero length subrecord with the end\
    \ of record flag set.\n   The indented lines have been compressed.\n"
- title: Appendix B.  ISO 646 Character Subset
  contents:
  - "Appendix B.  ISO 646 Character Subset\n   o-----------------------------------------------------------------o\n\
    \   |            |   7| 0   | 0   | 0   | 0   | 1   | 1   | 1   | 1   |\n   |\
    \            | B -+-----+-----+-----+-----+-----+-----+-----+-----|\n   |    \
    \        | I 6|  0  |  0  |  1  |  1  |  0  |  0  |  1  |  1  |\n   |        \
    \    | T -+-----+-----+-----+-----+-----+-----+-----+-----|\n   |            |\
    \   5|   0 |   1 |   0 |   1 |   0 |   1 |   0 |   1 |\n   |            |----+-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   |            |    |     |     |     |     |     |     |     |     |\n   |\
    \            |    |     |     |     |     |     |     |     |     |\n   |------------|\
    \    |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |\n   |    BIT     |    |\
    \     |     |     |     |     |     |     |     |\n   | 4  3  2  1 |    |    \
    \ |     |     |     |     |     |     |     |\n   |============o====o=====+=====+=====+=====+=====+=====+=====+=====|\n\
    \   | 0  0  0  0 |  0 |     |     | SP  |  0  |     |  P  |     |     |\n   |------------|----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  0  0  1 |  1 |     |     |     |  1  |  A  |  Q  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  0  1  0 |  2 |     |     |     |  2  |  B  |  R  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  0  1  1 |  3 |     |     |     |  3  |  C  |  S  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  0  0 |  4 |     |     |     |  4  |  D  |  T  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  0  1 |  5 |     |     |     |  5  |  E  |  U  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  1  0 |  6 |     |     |  &  |  6  |  F  |  V  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 0  1  1  1 |  7 |     |     |     |  7  |  G  |  W  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  0  0 |  8 |     |     |  (  |  8  |  H  |  X  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  0  1 |  9 |     |     |  )  |  9  |  I  |  Y  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  1  0 | 10 |     |     |     |     |  J  |  Z  |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  0  1  1 | 11 |     |     |     |     |  K  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  0  0 | 12 |     |     |     |     |  L  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  0  1 | 13 |     |     |  -  |     |  M  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  1  0 | 14 |     |     |  .  |     |  N  |     |     |     |\n   |------------+----|-----+-----+-----+-----+-----+-----+-----+-----|\n\
    \   | 1  1  1  1 | 15 |     |     |  /  |     |  O  |     |     |     |\n   o-----------------------------------------------------------------o\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document draws extensively on revision 1.3 of the ODETTE\
    \ File\n   Transfer Specification [OFTP].\n   Numerous people have contributed\
    \ to the development of this protocol\n   and their work is hereby acknowledged.\
    \  The extensions required to\n   utilise the Transmission Control Protocol were\
    \ formulated and agreed\n   by the current members of ODETTE Working Group Four,\
    \ who also\n   provided helpful reviews and comments on this document.\n"
- title: References
  contents:
  - "References\n   [OFTP]  Organisation for Data Exchange by Tele Transmission in\n\
    \   Europe, Odette File Transfer Protocol, Revision 1.3:1993\n   [RFC-739]  Postel,\
    \ J., Transmission Control Protocol, STD 7, RFC 739,\n   September 1981\n   [ISO-646]\
    \ International Organisation for Standardisation, ISO\n   Standard 646:1991, \"\
    Information technology -- ISO 7-bit coded\n   character set for information interchange\"\
    , 1991\n   [ISO-6523] International Organisation for Standardisation, ISO\n  \
    \ Standard 6523:1984, \"Data interchange -- Structures for the\n   identification\
    \ of organisations\", 1984\n   [ISO-8601] International Organisation for Standardisation,\
    \ ISO\n   Standard 8601:1988 \"Data elements and interchange formats --\n   Information\
    \ interchange -- Representation of dates and times\", 1988\n   [NIFTP] High Level\
    \ Protocol Group, \"A Network Independent File\n   Transfer Protocol\", 1981\n\
    \   [SNARK] Carroll, Lewis \"The Hunting of the Snark\", 1876\n"
- title: ODETTE Address
  contents:
  - "ODETTE Address\n   The ODETTE File Transfer Protocol is a product of Working\
    \ Group Four\n   of the Organisation for Data Exchange by Tele Transmission in\
    \ Europe.\n   The working group can be contacted via the ODETTE Secretariat:\n\
    \   ODETTE Secretariat\n   Forbes House\n   Halkin Street\n   London\n   SW1X\
    \ 7DS\n   United Kingdom\n   Phone: +44 (0)171 344 9227\n   Fax:   +44 (0)171\
    \ 235 7112\n   EMail  odette@odette.org\n          keith.oxley@odette.org\n  \
    \        stephanie.bioux@odette.org\n"
- title: Author's Address
  contents:
  - "Author's Address\n   The author can be contacted at\n   David Nash\n   Ford Motor\
    \ Company Limited\n   Room 1/148, Central Office\n   Eagle Way\n   Warley\n  \
    \ Brentwood\n   Essex\n   CM13 3BW\n   United Kingdom\n   Phone: +44 (0)1277 253043\n\
    \   EMail: dnash@ford.com\n"
