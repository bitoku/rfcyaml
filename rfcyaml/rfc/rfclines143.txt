We should like to comment on a race condition discovered in the ICP as proposed in NWG/RFC #123.
The problem arises when the server attempts to initiate a second connection to the user's receive socket and the first connection is not yet closed.
Using a similar notation to that of the proferred and proposed ICP.
The last two columns indicate which actions must be completed before the current action may be initiated.
User and Server are third level programs, and UNCP and SNCP are the users NCP and Servers NCP respectively.
Allocates have not been included since they add nothing to the argument.
The Server would probably then assume the User was finished with the conversation.
The above problem is resolved by eliminating the Close from one side and causing that side to wait for the CLS from the other side before doing an Init.
We propose that eliminating the user's Close (U) is the best solution.
(The user NCP must of course return a CLS in response to the CLS sent by the server NCP).
The Server's Close (L) leads more quickly to the reuse of socket L thus the serving of another user.
To clarify the above discussion which may seem confusing at first glance, let us demonstrate the problem in the language of RFC #123.
Notice that since server and user are independent (probably in different hosts), server could execute (S6) before user executes (U4) and could receive an error back from user's NCP that socket U is busy.
Similarly, user could execute (U6) before server executes (S4) and could receive an error back from his own NCP that socket U is not yet closed (assuming an implementation where sockets are kept busy until a CLS match).
Various modifications could be made to ICP to solve this problem.
We propose the following ICP:
Init(U,S 1,B ) s Init(S 1,U,B )
This ICP assumes the following: 1.
The user can inquire or is notified of the fact that one of his connections has been closed.
The server can inquire or is notified that a connection for which he has done an Init (or Listen) is now open.
Both of the above seem basic to any NCP user interface.
This race condition problem would not exist had the dynamic reconnection features of RFC #36 been included in the NCP protocol and had dynamic reconnection been used in this ICP.
[ This RFC was put into machine readable form for entry ]
[ into the online RFC archives by Walter Pienciak 1/98 ]
