- title: __initial_text__
  contents:
  - "       Survey of Research towards Robust Peer-to-Peer Networks:\n           \
    \                 Search Methods\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and notes that the decision to publish is not based on IETF\n   review\
    \ apart from IESG review for conflict with IETF work.  The RFC\n   Editor has\
    \ chosen to publish this document at its discretion.  See\n   RFC 3932 for more\
    \ information.\n"
- title: Abstract
  contents:
  - "Abstract\n   The pace of research on peer-to-peer (P2P) networking in the last\n\
    \   five years warrants a critical survey.  P2P has the makings of a\n   disruptive\
    \ technology -- it can aggregate enormous storage and\n   processing resources\
    \ while minimizing entry and scaling costs.\n   Failures are common amongst massive\
    \ numbers of distributed peers,\n   though the impact of individual failures may\
    \ be less than in\n   conventional architectures.  Thus, the key to realizing\
    \ P2P's\n   potential in applications other than casual file sharing is\n   robustness.\n\
    \   P2P search methods are first couched within an overall P2P taxonomy.\n   P2P\
    \ indexes for simple key lookup are assessed, including those based\n   on Plaxton\
    \ trees, rings, tori, butterflies, de Bruijn graphs, and\n   skip graphs.  Similarly,\
    \ P2P indexes for keyword lookup, information\n   retrieval and data management\
    \ are explored.  Finally, early efforts\n   to optimize range, multi-attribute,\
    \ join, and aggregation queries\n   over P2P indexes are reviewed.  Insofar as\
    \ they are available in the\n   primary literature, robustness mechanisms and\
    \ metrics are highlighted\n   throughout.  However, the low-level mechanisms that\
    \ most affect\n   robustness are not well isolated in the literature.  Recommendations\n\
    \   are given for future research.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Related Disciplines ........................................6\n  \
    \    1.2. Structured and Unstructured Routing ........................7\n    \
    \  1.3. Indexes and Queries ........................................9\n   2. Index\
    \ Types ....................................................10\n      2.1. Local\
    \ Index (Gnutella) ....................................10\n      2.2. Central\
    \ Index (Napster) ...................................12\n      2.3. Distributed\
    \ Index (Freenet) ...............................13\n   3. Semantic Free Index\
    \ ............................................15\n      3.1. Origins ...................................................15\n\
    \           3.1.1. Plaxton, Rajaraman, and Richa (PRR) ................15\n  \
    \         3.1.2. Consistent Hashing .................................16\n    \
    \       3.1.3. Scalable Distributed Data Structures (LH*) .........16\n      3.2.\
    \ Dependability .............................................17\n           3.2.1.\
    \ Static Dependability ...............................17\n           3.2.2. Dynamic\
    \ Dependability ..............................18\n           3.2.3. Ephemeral\
    \ or Stable Nodes -- O(log n) or\n                  O(1) Hops ..........................................19\n\
    \           3.2.4. Simulation and Proof ...............................20\n  \
    \    3.3. Latency ...................................................21\n    \
    \       3.3.1. Hop Count and the O(1)-Hop DHTs ....................21\n      \
    \     3.3.2. Proximity and the O(log n)-Hop DHTs ................22\n      3.4.\
    \ Multicasting ..............................................23\n           3.4.1.\
    \ Multicasting vs. Broadcasting ......................23\n           3.4.2. Motivation\
    \ for DHT-based Multicasting ..............23\n           3.4.3. Design Issues\
    \ ......................................24\n      3.5. Routing Geometries ........................................25\n\
    \           3.5.1. Plaxton Trees (Pastry, Tapestry) ...................25\n  \
    \         3.5.2. Rings (Chord, DKS) .................................27\n    \
    \       3.5.3. Tori (CAN) .........................................28\n      \
    \     3.5.4. Butterflies (Viceroy) ..............................29\n        \
    \   3.5.5. de Bruijn (D2B, Koorde, Distance Halving, ODRI) ....30\n          \
    \ 3.5.6. Skip Graphs ........................................32\n   4. Semantic\
    \ Index .................................................33\n      4.1. Keyword\
    \ Lookup ............................................34\n           4.1.1. Gnutella\
    \ Enhancements ..............................36\n           4.1.2. Partition-by-Document,\
    \ Partition-by-Keyword ........38\n           4.1.3. Partial Search, Exhaustive\
    \ Search ..................39\n      4.2. Information Retrieval .....................................39\n\
    \           4.2.1. Vector Model (PlanetP, FASD, eSearch) ..............41\n  \
    \         4.2.2. Latent Semantic Indexing (pSearch) .................43\n    \
    \       4.2.3. Small Worlds .......................................43\n   5. Queries\
    \ ........................................................44\n      5.1. Range\
    \ Queries .............................................45\n      5.2. Multi-Attribute\
    \ Queries ...................................48\n      5.3. Join Queries ..............................................50\n\
    \      5.4. Aggregation Queries .......................................50\n  \
    \ 6. Security Considerations ........................................52\n   7.\
    \ Conclusions ....................................................52\n   8. Acknowledgments\
    \ ................................................53\n   9. References .....................................................54\n\
    \      9.1. Informative References ....................................54\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Peer-to-peer (P2P) networks are those that exhibit three\n\
    \   characteristics: self-organization, symmetric communication, and\n   distributed\
    \ control [1].  A self-organizing P2P network\n   \"automatically adapts to the\
    \ arrival, departure and failure of nodes\"\n   [2].  Communication is symmetric\
    \ in that peers act as both clients\n   and servers.  It has no centralized directory\
    \ or control point.\n   USENET servers and BGP peers have these traits [3] but\
    \ the emphasis\n   here is on the flurry of research since 2000.  Leading examples\n\
    \   include Gnutella [4], Freenet [5], Pastry [2], Tapestry [6], Chord\n   [7],\
    \ the Content Addressable Network (CAN) [8], pSearch [9], and\n   Edutella [10].\
    \  Some have suggested that peers are inherently\n   unreliable [11].  Others\
    \ have assumed well-connected, stable peers\n   [12].\n   This critical survey\
    \ of P2P academic literature is warranted, given\n   the intensity of recent research.\
    \  At the time of writing, one\n   research database lists over 5,800 P2P publications\
    \ [13].  One vendor\n   surveyed P2P products and deployments [14].  There is\
    \ also a tutorial\n   survey of leading P2P systems [15].  DePaoli and Mariani\
    \ recently\n   reviewed the dependability of some early P2P systems at a high\
    \ level\n   [16].  The need for a critical survey was flagged in the peer-to-peer\n\
    \   research group of the Internet Research Task Force (IRTF) [17].\n   P2P is\
    \ potentially a disruptive technology with numerous\n   applications, but this\
    \ potential will not be realized unless it is\n   demonstrated to be robust. \
    \ A massively distributed search technique\n   may yield numerous practical benefits\
    \ for applications [18].  A P2P\n   system has potential to be more dependable\
    \ than architectures relying\n   on a small number of centralized servers.  It\
    \ has potential to evolve\n   better from small configurations -- the capital\
    \ outlays for high\n   performance servers can be reduced and spread over time\
    \ if a P2P\n   assembly of general purpose nodes is used.  A similar argument\n\
    \   motivated the deployment of distributed databases -- one thousand,\n   off-the-shelf\
    \ PC processors are more powerful and much less expensive\n   than a large mainframe\
    \ computer [19].  Storage and processing can be\n   aggregated to achieve massive\
    \ scale.  Wasteful partitioning between\n   servers or clusters can be avoided.\
    \  As Gedik and Liu put it, if P2P\n   is to find its way into applications other\
    \ than casual file sharing,\n   then reliability needs to be addressed [20].\n\
    \   The taxonomy of Figure 1 divides the entire body of P2P research\n   literature\
    \ along four lines: search, storage, security, and\n   applications.  This survey\
    \ concentrates on search aspects.  A P2P\n   search network consists of an underlying\
    \ index (Sections 2 to 4) and\n   queries that propagate over that index (Section\
    \ 5).\n   Search [18, 21-29]\n      Semantic-Free Indexes [2, 6, 7, 30-52]\n \
    \        Plaxton Trees\n         Rings\n         Tori\n         Butterflies\n\
    \         de Bruijn Graphs\n         Skip Graphs\n      Semantic Indexes [4, 53-71]\n\
    \         Keyword Lookup\n         Peer Information Retrieval\n         Peer Data\
    \ Management\n      Queries [20, 22, 23, 25, 32, 38, 41, 56, 72-100]\n       \
    \  Range Queries\n         Multi-Attribute Queries\n         Join Queries\n  \
    \       Aggregation Queries\n         Continuous Queries\n         Recursive Queries\n\
    \         Adaptive Queries\n   Storage\n      Consistency & Replication [101-112]\n\
    \         Eventual consistency\n         Trade-offs\n      Distribution [39, 42,\
    \ 90, 92, 113-131]\n         Epidemics, Bloom Filters\n      Fault Tolerance [40,\
    \ 105, 132-139]\n         Erasure Coding\n         Byzantine Agreement\n     \
    \ Locality [24, 43, 47, 140-160]\n      Load Balancing [37, 86, 100, 107, 151,\
    \ 161-171]\n   Security\n      Character [172-182]\n         Identity\n      \
    \   Reputation and Trust\n         Incentives\n      Goals [25, 27, 71, 183-197]\n\
    \         Availability\n         Authenticity\n         Anonymity\n         Access\
    \ Control\n         Fair Trading\n   Applications [1, 198-200]\n      Memory [32,\
    \ 90, 142, 201-222]\n         File Systems\n         Web\n         Content Delivery\
    \ Networks\n         Directories\n      Service Discovery\n      Publish / Subscribe\
    \ ...\n   Intelligence [223-228]\n      GRID\n      Security...\n   Communication\
    \ [12, 92, 119, 229-247]\n      Multicasting\n      Streaming Media\n      Mobility\n\
    \      Sensors...\n            Figure 1: Classification of P2P Research Literature\n\
    \   This survey is concerned with two questions.  The first, \"How do P2P\n  \
    \ search networks work?\"  This foundation is important given the pace\n   and\
    \ breadth of P2P research in the last five years.  In Section 2, we\n   classify\
    \ indexes as local, centralized and distributed.  Since\n   distributed indexes\
    \ are becoming dominant, they are given closer\n   attention in Sections 3 and\
    \ 4.  Section 3 compares distributed P2P\n   indexes for simple key lookup; in\
    \ particular, their origins (Section\n   3.1), dependability (Section 3.2), latency\
    \ (Section 3.3), and their\n   support for multicast (Section 3.4).  It classifies\
    \ those indexes\n   according to their routing geometry (Section 3.5) -- Plaxton\
    \ trees,\n   rings, tori, butterflies, de Bruijn graphs and skip graphs.  Section\n\
    \   4 reviews distributed P2P indexes supporting keyword lookup (Section\n   4.1)\
    \ and information retrieval (Section 4.2).  Section 5 probes the\n   embryonic\
    \ research on P2P queries; in particular, range queries\n   (Section 5.1), multi-attribute\
    \ queries (Section 5.2), join queries\n   (Section 5.3), and aggregation queries\
    \ (Section 5.4).\n   The second question, \"How robust are P2P search networks?\"\
    \  Insofar\n   as it is available in the research literature, we tease out the\n\
    \   robustness mechanisms and metrics throughout Sections 2 to 5.\n   Unfortunately,\
    \ robustness is often more sensitive to low-level design\n   choices than it is\
    \ to the broad P2P index structure, yet these\n   underlying design choices are\
    \ seldom isolated in the primary\n   literature [248].  Furthermore, there has\
    \ been little consensus on\n   P2P robustness metrics (Section 3.2).  Section\
    \ 8 gives\n   recommendations to address these important gaps.\n"
- title: 1.1.  Related Disciplines
  contents:
  - "1.1.  Related Disciplines\n   Peer-to-peer research draws upon numerous distributed\
    \ systems\n   disciplines.  Networking researchers will recognize familiar issues\n\
    \   of naming, routing, and congestion control.  P2P designs need to\n   address\
    \ routing and security issues across network region boundaries\n   [152].  Networking\
    \ research has traditionally been host-centric.  The\n   Web's Universal Resource\
    \ Identifiers are naturally tied to specific\n   hosts, making object mobility\
    \ a challenge [216].\n   P2P work is data-centric [249].  P2P systems for dynamic\
    \ object\n   location and routing have borrowed heavily from the distributed\n\
    \   systems corpus.  Some have used replication, erasure codes, and\n   Byzantine\
    \ agreement [111].  Others have used epidemics for durable\n   peer group communication\
    \ [39].\n   Similarly, P2P research is set to benefit from database research\n\
    \   [250].  Database researchers will recognize the need to reapply\n   Codd's\
    \ principle of physical data independence, that is, to decouple\n   data indexes\
    \ from the applications that use the data [23].  It was\n   the invention of appropriate\
    \ indexing mechanisms and query\n   optimizations that enabled data independence.\
    \  Database indexes like\n   B+ trees have an analog in P2P's distributed hash\
    \ tables (DHTs).\n   Wide-area, P2P query optimization is a ripe, but challenging,\
    \ area\n   for innovation.\n   More flexible distribution of objects comes with\
    \ increased security\n   risks.  There are opportunities for security researchers\
    \ to deliver\n   new methods for availability, file authenticity, anonymity, and\n\
    \   access control [25].  Proactive and reactive mechanisms are needed to\n  \
    \ deal with large numbers of autonomous, distributed peers.  To build\n   robust\
    \ systems from cooperating but self-interested peers, issues of\n   identity,\
    \ reputation, trust, and incentives need to be tackled.\n   Although it is beyond\
    \ the scope of this paper, robustness against\n   malicious attacks also ought\
    \ to be addressed [195].\n   Possibly the largest portion of P2P research has\
    \ majored on basic\n   routing structures [18], where research on algorithms comes\
    \ to the\n   fore.  Should the overlay be \"structured\" or \"unstructured\"?\
    \  Are the\n   two approaches competing or complementary?  Comparisons of the\n\
    \   \"structured\" approaches (hypercubes, rings, toroids, butterflies, de\n \
    \  Bruijn, and skip graphs) have weighed the amount of routing state per\n   peer\
    \ and the number of links per peer against overlay hop counts.\n   While \"unstructured\"\
    \ overlays initially used blind flooding and\n   random walks, overheads usually\
    \ trigger some structure, for example,\n   super-peers and clusters.\n   P2P applications\
    \ rely on cooperation between these disciplines.\n   Applications have included\
    \ file sharing, directories, content\n   delivery networks, email, distributed\
    \ computation, publish-subscribe\n   middleware, multicasting, and distributed\
    \ authentication.  Which\n   applications will be suited to which structures?\
    \  Are there adaptable\n   mechanisms that can decouple applications from the\
    \ underlying data\n   structures?  What are the criteria for selection of applications\n\
    \   amenable to a P2P design [1]?\n   Robustness is emphasized throughout the\
    \ survey.  We are particularly\n   interested in two aspects.  The first, dependability,\
    \ was a leading\n   design goal for the original Internet [251].  It deserves\
    \ the same\n   status in P2P.  The measures of dependability are well established:\n\
    \   reliability, a measure of the mean-time-to-failure (MTTF);\n   availability,\
    \ a measure of both the MTTF and the mean-time-to-repair\n   (MTTR); maintainability;\
    \ and safety [252].  The second aspect is the\n   ability to accommodate variation\
    \ in outcome, which one could call\n   adaptability.  Its measures have yet to\
    \ be defined.  In the context\n   of the Internet, it was only recently acknowledged\
    \ as a first-class\n   requirement [253].  In P2P, it means planning for the tussles\
    \ over\n   resources and identity.  It means handling different kinds of queries\n\
    \   and accommodating changeable application requirements with minimal\n   intervention.\
    \  It means \"organic scaling\" [22], whereby the system\n   grows gracefully,\
    \ without a priori data center costs or architectural\n   breakpoints.\n   In\
    \ the following section, we discuss one notable omission from the\n   taxonomy\
    \ of P2P networking in Figure 1 -- routing.\n"
- title: 1.2.  Structured and Unstructured Routing
  contents:
  - "1.2.  Structured and Unstructured Routing\n   P2P routing algorithms have been\
    \ classified as \"structured\" or\n   \"unstructured\".  Peers in unstructured\
    \ overlay networks join by\n   connecting to any existing peers [254].  In structured\
    \ overlays, the\n   identifier of the joining peer determines the set of peers\
    \ that it\n   connects to [254].  Early instantiations of Gnutella were\n   unstructured\
    \ -- keyword queries were flooded widely [255].  Napster\n   [256] had decentralized\
    \ content and a centralized index, so it only\n   partially satisfies the distributed\
    \ control criteria for P2P systems.\n   Early structured algorithms included Plaxton,\
    \ Rajaraman and Richa\n   (PRR) [30], Pastry [2], Tapestry [31], Chord [7], and\
    \ the Content\n   Addressable Network [8].  Mishchke and Stiller recently classified\n\
    \   P2P systems by the presence or absence of structure in routing tables\n  \
    \ and network topology [257].\n   Some have cast unstructured and structured algorithms\
    \ as competing\n   alternatives.  Unstructured approaches have been called \"\
    first\n   generation\", implicitly inferior to the \"second generation\"\n   structured\
    \ algorithms [2, 31].  When generic key lookups are\n   required, these structured,\
    \ key-based routing schemes can guarantee\n   location of a target within a bounded\
    \ number of hops [23].  The\n   broadcasting unstructured approaches, however,\
    \ may have large routing\n   costs, or fail to find available content [22].  Despite\
    \ the apparent\n   advantages of structured P2P, several research groups are still\n\
    \   pursuing unstructured P2P.\n   There have been two main criticisms of structured\
    \ systems [61].  The\n   first relates to peer transience, which in turn, affects\
    \ robustness.\n   Chawathe, et al. opined that highly transient peers are not\
    \ well\n   supported by DHTs [61].  P2P systems often exhibit \"churn\", with\n\
    \   peers continually arriving and departing.  One objection to concerns\n   about\
    \ highly transient peers is that many applications use peers in\n   well-connected\
    \ parts of the network.  The Tapestry authors analyzed\n   the impact of churn\
    \ in a network of 1000 nodes [31].  Others opined\n   that it is possible to maintain\
    \ a robust DHT at relatively low cost\n   [258].  Very few papers have quantitatively\
    \ compared the resilience\n   of structured systems.  Loguinov, Kumar, et al.\
    \ claimed that there\n   were only two such works [24, 36].\n   The second criticism\
    \ of structured systems is that they do not\n   support keyword searches and complex\
    \ queries as well as unstructured\n   systems.  Given the current file-sharing\
    \ deployments, keyword\n   searches seem more important than exact-match key searches\
    \ in the\n   short term.  Paraphrased, \"most queries are for hay, not needles\"\
    \n   [61].\n   More recently, some have justifiably seen unstructured and structured\n\
    \   proposals as complementary, and have devised hybrid models [259].\n   Their\
    \ starting point was the observation that unstructured flooding\n   or random\
    \ walks are inefficient for data that is not highly\n   replicated across the\
    \ P2P network.  Structured graphs can find keys\n   efficiently, irrespective\
    \ of replication.  Castro, et al. proposed\n   Structella, a hybrid of Gnutella\
    \ built on top of Pastry [259].\n   Another design used structured search for\
    \ rare items and unstructured\n   search for massively replicated items [54].\n\
    \   However, the \"structured versus unstructured routing\" taxonomy is\n   becoming\
    \ less useful, for two reasons, Firstly, most \"unstructured\"\n   proposals have\
    \ evolved and incorporated structure.  Consider the\n   classic \"unstructured\"\
    \ system, Gnutella [4].  For scalability, its\n   peers are either ultrapeers\
    \ or leaf nodes.  This hierarchy is\n   augmented with a query routing protocol\
    \ whereby ultrapeers receive a\n   hashed summary of the resource names available\
    \ at leaf nodes.\n   Between ultrapeers, simple query broadcast is still used,\
    \ though\n   methods to reduce the query load here have been considered [260].\n\
    \   Secondly, there are emerging schema-based P2P designs [59], with\n   super-node\
    \ hierarchies and structure within documents.  These are\n   quite distinct from\
    \ the structured DHT proposals.\n"
- title: 1.3.  Indexes and Queries
  contents:
  - "1.3.  Indexes and Queries\n   Given that most, if not all, P2P designs today\
    \ assume some structure,\n   a more instructive taxonomy would describe the structure.\
    \  In this\n   survey, we use a database taxonomy in lieu of the networking\n\
    \   taxonomy, as suggested by Hellerstein, Cooper, and Garcia-Molina [23,\n  \
    \ 261].  The structure is determined by the type of index (Sections 2 ,\n   3,\
    \ and 4).  Queries feature in lieu of routing (Section 5).  The DHT\n   algorithms\
    \ implement a \"semantic-free index\" [216].  They are\n   oblivious of whether\
    \ keys represent document titles, meta-data, or\n   text.  Gnutella-like and schema-based\
    \ proposals have a \"semantic\n   index\".\n   Index engineering is at the heart\
    \ of P2P search methods.  It captures\n   a broad range of P2P issues, as demonstrated\
    \ by the Search/Index\n   Links model [261].  As Manber put it, \"the most important\
    \ of the\n   tools for information retrieval is the index -- a collection of terms\n\
    \   with pointers to places where information about documents can be\n   found\"\
    \ [262].  Sen and Wang noted that a \"P2P network\" usually\n   consists of connections\
    \ between hosts for application-layer\n   signaling, rather than for the data\
    \ transfer itself [263].\n   Similarly, we concentrate on the \"signaled\" indexes\
    \ and queries.\n   Our focus here is the dependability and adaptability of the\
    \ search\n   network.  Static dependability is a measure of how well queries route\n\
    \   around failures in a network that is normally fault-free.  Dynamic\n   dependability\
    \ gives an indication of query success when nodes and\n   data are continually\
    \ joining and leaving the P2P system.  An\n   adaptable index accommodates change\
    \ in the data and query\n   distribution.  It enables data independence, in that\
    \ it facilitates\n   changes to the data layout without requiring changes to the\n\
    \   applications that use the data [23].  An adaptable P2P system can\n   support\
    \ rich queries for a wide range of applications.  Some\n   applications benefit\
    \ from simple, semantic-free key lookups [264].\n   Others require more complex,\
    \ Structured Query Language (SQL)-like\n   queries to find documents with multiple\
    \ keywords, or to aggregate or\n   join query results from distributed relations\
    \ [22].\n"
- title: 2.  Index Types
  contents:
  - "2.  Index Types\n   A P2P index can be local, centralized, or distributed.  With\
    \ a local\n   index, a peer only keeps the references to its own data, and does\
    \ not\n   receive references for data at other nodes.  The very early Gnutella\n\
    \   design epitomized the local index (Section 2.1).  In a centralized\n   index,\
    \ a single server keeps references to data on many peers.  The\n   classic example\
    \ is Napster (Section 2.2).  With distributed indexes,\n   pointers towards the\
    \ target reside at several nodes.  One very early\n   example is Freenet (Section\
    \ 2.3).  Distributed indexes are used in\n   most P2P designs nowadays -- they\
    \ dominate this survey.\n   P2P indexes can also be classified as non-forwarding\
    \ and forwarding.\n   When queries are guided by a non-forwarding index, they\
    \ jump to the\n   node containing the target data in a single hop.  There have\
    \ been\n   semantic and semantic-free one-hop schemes [138, 265, 266].  Where\n\
    \   scalability to a massive number of peers is required, these schemes\n   have\
    \ been extended to two hops [267, 268].  More common are the\n   forwarding P2Ps,\
    \ where the number of hops varies with the total\n   number of peers, often logarithmically.\
    \  The related trade-offs\n   between routing state, lookup latency, update bandwidth,\
    \ and peer\n   churn are critical to total system dependability.\n"
- title: 2.1.  Local Index (Gnutella)
  contents:
  - "2.1.  Local Index (Gnutella)\n   P2Ps with a purely local data index are becoming\
    \ rare.  In such\n   designs, peers flood queries widely and only index their\
    \ own content.\n   They enable rich queries - the search is not limited to a simple\
    \ key\n   lookup.  However, they also generate a large volume of query traffic\n\
    \   with no guarantee that a match will be found, even if it does exist\n   on\
    \ the network.  For example, to find potential peers on the early\n   instantiations\
    \ of Gnutella, 'ping' messages were broadcast over the\n   P2P network and the\
    \ 'pong' responses were used to build the node\n   index.  Then, small 'query'\
    \ messages, each with a list of keywords,\n   are broadcast to peers that respond\
    \ with matching filenames [4].\n   There have been numerous attempts to improve\
    \ the scalability of\n   local-index P2P networks.  Gnutella uses fixed time-to-live\
    \ (TTL)\n   rings, where the query's TTL is set less than 7-10 hops [4].  Small\n\
    \   TTLs reduce the network traffic and the load on peers, but also\n   reduce\
    \ the chances of a successful query hit.  One paper reported,\n   perhaps a little\
    \ too bluntly, that the fixed \"TTL-based mechanism\n   does not work\" [67].\
    \  To address this TTL selection problem, they\n   proposed an expanding ring,\
    \ known elsewhere as iterative deepening\n   [29].  It uses successively larger\
    \ TTL counters until there is a\n   match.  The flooding, ring, and expanding\
    \ ring methods all increase\n   network load with duplicated query messages. \
    \ A random walk, whereby\n   an unduplicated query wanders about the network,\
    \ does indeed reduce\n   the network load but massively increases the search latency.\
    \  One\n   solution is to replicate the query k times at each peer.  Called\n\
    \   random k-walkers, this technique can be coupled with TTL limits, or\n   periodic\
    \ checks with the query originator, to cap the query load\n   [67].  Adamic, Lukose,\
    \ et al. suggested that the random walk searches\n   be directed to nodes with\
    \ a higher degree, that is, with larger\n   numbers of inter-peer connections\
    \ [269].  They assumed that higher-\n   degree peers are also capable of higher\
    \ query throughputs.  However,\n   without some balancing design rule, such peers\
    \ would be swamped with\n   the entire P2P signaling traffic.  In addition to\
    \ the above\n   approaches, there is the 'directed breadth-first' algorithm [29].\
    \  It\n   forwards queries within a subset of peers selected according to\n  \
    \ heuristics on previous performance, like the number of successful\n   query\
    \ results.  Another algorithm, called probabilistic flooding, has\n   been modeled\
    \ using percolation theory [270].\n   Several measurement studies have investigated\
    \ locally indexed P2Ps.\n   Jovanovic noted Gnutella's power law behaviour [70].\
    \  Sen and Wang\n   compared the performance of Gnutella, Fasttrack [271], and\
    \ Direct\n   Connect [263, 272, 273].  At the time, only Gnutella used local data\n\
    \   indexes.  All three schemes now use distributed data indexes, with\n   hierarchy\
    \ in the form of Ultrapeers (Gnutella), Super-Nodes\n   FastTrack), and Hubs (Direct\
    \ Connect).  It was found that a very\n   small percentage of peers have a very\
    \ high degree and that the total\n   system dependability is at the mercy of such\
    \ peers.  While peer up-\n   time and bandwidth were heavy-tailed, they did not\
    \ fit well with the\n   Zipf distribution.  Fortunately for Internet Service Providers,\n\
    \   measures aggregated by IP prefix and Autonomous System (AS) were more\n  \
    \ stable than for individual IP addresses.  A study of University of\n   Washington\
    \ traffic found that Gnutella and Kazaa together contributed\n   43% of the university's\
    \ total TCP traffic [274].  They also reported\n   a heavy-tailed distribution,\
    \ with 600 external peers (out of 281,026)\n   delivering 26% of Kazaa bytes to\
    \ internal peers.  Furthermore,\n   objects retrieved from the P2P network were\
    \ typically three orders of\n   magnitude larger than Web objects -- 300 objects\
    \ contributed to\n   almost half the total outbound Kazaa bandwidth.  Others reported\n\
    \   Gnutella's topology mismatch, whereby only 2-5% of P2P connections\n   link\
    \ peers in the same Autonomous System (AS), despite over 40% of\n   peers being\
    \ in the top 10 ASs [65].  Together these studies\n   underscore the significance\
    \ of multimedia sharing applications.  They\n   motivate interesting caching and\
    \ locality solutions to the topology\n   mismatch problem.\n   These same studies\
    \ bear out one main dependability lesson: total\n   system dependability may be\
    \ sensitive to the dependability of high-\n   degree peers.  The designers of\
    \ Scamp translated this observation to\n   the design heuristic, \"have the degree\
    \ of each node be of nearly\n   equal size\" [153].  They analyzed a system of\
    \ N peers, with mean\n   degree c.log(n), where link failures occur independently\
    \ with\n   probability e.  If d>0 is fixed and c>(1+d)/(-log(e)), then the\n \
    \  probability of graph disconnection goes to zero as N->infinity.\n   Otherwise,\
    \ if c<(1-d)/(-log(e)), then the probability of\n   disconnection goes to one\
    \ as N->infinity.  They presented a\n   localizer, which finds approximate minima\
    \ to a global function of\n   peer degree and arbitrary link costs using only\
    \ local information.\n   The Scamp overlay construction algorithms could support\
    \ any of the\n   flooding and walking routing schemes above, or other epidemic\
    \ and\n   multicasting schemes for that matter.  Resilience to high churn rates\n\
    \   was identified for future study.\n"
- title: 2.2.  Central Index (Napster)
  contents:
  - "2.2.  Central Index (Napster)\n   Centralized schemes like Napster [256] are\
    \ significant because they\n   were the first to demonstrate the P2P scalability\
    \ that comes from\n   separating the data index from the data itself.  Ultimately,\
    \ 36\n   million Napster users lost their service not because of technical\n \
    \  failure, but because the single administration was vulnerable to the\n   legal\
    \ challenges of record companies [275].\n   There has since been little research\
    \ on P2P systems with central data\n   indexes.  Such systems have also been called\
    \ 'hybrid' since the index\n   is centralized but the data is distributed.  Yang\
    \ and Garcia-Molina\n   devised a four-way classification of hybrid systems [276]:\
    \ unchained\n   servers, where users whose index is on one server do not see other\n\
    \   servers' indexes; chained servers, where the server that receives a\n   query\
    \ forwards it to a list of servers if it does not own the index\n   itself; full\
    \ replication, where all centralized servers keep a\n   complete index of all\
    \ available metadata; and hashing, where keywords\n   are hashed to the server\
    \ where the associated inverted list is kept.\n   The unchained architecture was\
    \ used by Napster, but it has the\n   disadvantage that users do not see all indexed\
    \ data in the system.\n   Strictly speaking, the other three options illustrate\
    \ the distributed\n   data index, not the central index.  The chained architecture\
    \ was\n   recommended as the optimum for the music-swapping application at the\n\
    \   time.  The methods by which clients update the central index were\n   classified\
    \ as batch or incremental, with the optimum determined by\n   the query-to-login\
    \ ratio.  Measurements were derived from a clone of\n   Napster called OpenNap[277].\
    \  Another study of live Napster data\n   reported wide variation in the availability\
    \ of peers, a general\n   unwillingness to share files (20-40% of peers share\
    \ few or no files),\n   and a common understatement of available bandwidth so\
    \ as to\n   discourage other peers from sharing one's link [202].\n   Influenced\
    \ by Napster's early demise, the P2P research community may\n   have prematurely\
    \ turned its back on centralized architectures.\n   Chawathe, Ratnasamy, et al.\
    \ opined that Google and Yahoo demonstrate\n   the viability of a centralized\
    \ index.  They argued that \"the real\n   barriers to Napster-like designs are\
    \ not technical but legal and\n   financial\" [61].  Even this view may be a little\
    \ too harsh on the\n   centralized architectures -- it implies that they always\
    \ have an up-\n   front capital hurdle that is steeper than for distributed\n\
    \   architectures.  The closer one looks at scalable 'centralized'\n   architectures,\
    \ the less the distinction with 'distributed'\n   architectures seems to matter.\
    \  For example, it is clear that\n   Google's designers consider Google a distributed,\
    \ not centralized,\n   file system [278].  Google demonstrates the scale and performance\n\
    \   possible on commodity hardware, but still has a centralized master\n   that\
    \ is critical to the operation of each Google cluster.  Time may\n   prove that\
    \ the value of emerging P2P networks, regardless of the\n   centralized-versus-distributed\
    \ classification, is that they smooth\n   the capital outlays and remove the single\
    \ points of failure across\n   the spectra of scale and geographic distribution.\n"
- title: 2.3.  Distributed Index (Freenet)
  contents:
  - "2.3.  Distributed Index (Freenet)\n   An important early P2P proposal for a distributed\
    \ index was Freenet\n   [5, 71, 279].  While its primary emphasis was the anonymity\
    \ of peers,\n   it did introduce a novel indexing scheme.  Files are identified\
    \ by\n   low-level \"content-hash\" keys and by \"secure signed-subspace\" keys,\n\
    \   which ensure that only a file owner can write to a file while anyone\n   can\
    \ read from it.  To find a file, the requesting peer first checks\n   its local\
    \ table for the node with keys closest to the target.  When\n   that node receives\
    \ the query, it too checks for either a match or\n   another node with keys close\
    \ to the target.  Eventually, the query\n   either finds the target or exceeds\
    \ time-to-live (TTL) limits.  The\n   query response traverses the successful\
    \ query path in reverse,\n   depositing a new routing table entry (the requested\
    \ key and the data\n   holder) at each peer.  The insert message similarly steps\
    \ towards the\n   target node, updating routing table entries as it goes, and\
    \ finally\n   stores the file there.  Whereas early versions of Gnutella used\n\
    \   breadth-first flooding, Freenet uses a more economic depth-first\n   search\
    \ [280].\n   An initial assessment has been done of Freenet's robustness.  It\
    \ was\n   shown that in a network of 1000 nodes, the median query path length\n\
    \   stayed under 20 hops for a failure of 30% of nodes.  While the\n   Freenet\
    \ designers considered this as evidence that the system is\n   \"surprisingly\
    \ robust against quite large failures\" [71], the same\n   datapoint may well\
    \ be outside meaningful operating bounds.  How many\n   applications are useful\
    \ when the first quartile of queries have path\n   lengths of several hundred\
    \ hops in a network of only 1000 nodes, per\n   Figure 4 of [71]?  To date, there\
    \ has been no analysis of Freenet's\n   dynamic robustness.  For example, how\
    \ does it perform when nodes are\n   continually arriving and departing?\n   There\
    \ have been both criticisms and extensions of the early Freenet\n   work.  Gnutella\
    \ proponents acknowledged the merit in Freenet's\n   avoidance of query broadcasting\
    \ [281].  However, they are critical on\n   two counts: the exact file name is\
    \ needed to construct a query; and\n   exactly one match is returned for each\
    \ query.  P2P designs using\n   DHTs, per Section 3, share similar characteristics\
    \ -- a precise query\n   yields a precise response.  The similarity is not surprising\
    \ since\n   Freenet also uses a hash function to generate keys.  However, the\n\
    \   query routing used in the DHTs has firmer theoretical foundations.\n   Another\
    \ difference with DHTs is that Freenet will take time, when a\n   new node joins\
    \ the network, to build an index that facilitates\n   efficient query routing.\
    \  By the inventor's own admission, this is\n   damaging for a user's first impressions\
    \ [282].  It was proposed to\n   download a copy of routing tables from seed nodes\
    \ at startup, even\n   though the new node might be far from the seed node.  Freenet's\
    \ slow\n   startup motivated Mache, Gilbert, et al. to amend the overlay after\n\
    \   failed requests and to place additional index entries on successful\n   requests\
    \ -- they claim almost an order of magnitude reduction in\n   average query path\
    \ length [280].  Clarke also highlighted the lack of\n   locality or bandwidth\
    \ information available for efficient query\n   routing decisions [282].  He proposed\
    \ that each node gather response\n   times, connection times, and proportion of\
    \ successful requests for\n   each entry in the query routing table.  When searching\
    \ for a key that\n   is not in its own routing table, it was proposed to estimate\
    \ response\n   times from the routing metrics for the nearest known keys and\n\
    \   consequently choose the node that can retrieve the data fastest.  The\n  \
    \ response time heuristic assumed that nodes close in the key space\n   have similar\
    \ response times.  This assumption stemmed from early\n   deployment observations\
    \ that Freenet peers seemed to specialize in\n   parts of the keyspace -- it has\
    \ not been justified analytically.\n   Kronfol drew attention to Freenet's inability\
    \ to do keyword searches\n   [283].  He suggested that peers cache lists of weighted\
    \ keywords in\n   order to route queries to documents, using Term Frequency Inverse\n\
    \   Document Frequency (TFIDF) measures and inverted indexes (Section\n   4.2.1).\
    \  With these methods, a peer can route queries for simple\n   keyword lists or\
    \ more complicated conjunctions and disjunctions of\n   keywords.  Robustness\
    \ analysis and simulation of Kronfol's proposal\n   remain open.\n   The vast\
    \ majority of P2P proposals in following sections rely on a\n   distributed index.\n"
- title: 3.  Semantic Free Index
  contents:
  - "3.  Semantic Free Index\n   Many of today's distributed network indexes are semantic.\
    \  The\n   semantic index is human-readable.  For example, it might associate\n\
    \   information with other keywords, a document, a database key, or even\n   an\
    \ administrative domain.  It makes it easy to associate objects with\n   particular\
    \ network providers, companies, or organizations, as\n   evidenced in the Domain\
    \ Name System (DNS).  However, it can also\n   trigger legal tussles and frustrate\
    \ content replication and migration\n   [216].\n   Distributed Hash Tables (DHTs)\
    \ have been proposed to provide\n   semantic-free, data-centric references.  DHTs\
    \ enable one to find an\n   object's persistent key in a very large, changing\
    \ set of hosts.  They\n   are typically designed for [23]:\n   a) low degree.\
    \  If each node keeps routing information for only a\n      small number of other\
    \ nodes, the impact of high node arrival and\n      departure rates is contained;\n\
    \   b) low hop count.  The hops and delay introduced by the extra\n      indirection\
    \ are minimized;\n   c) greedy routing.  Nodes independently calculate a short\
    \ path to the\n      target.  At each hop, the query moves closer to the target;\
    \ and\n   d) robustness.  A path to the target can be found even when links or\n\
    \      nodes fail.\n"
- title: 3.1.  Origins
  contents:
  - "3.1.  Origins\n   To understand the origins of recent DHTs, one needs to look\
    \ to three\n   contributions from the 1990s.  The first two -- Plaxton, Rajaraman,\n\
    \   and Richa (PRR) [30] and Consistent Hashing [49] -- were published\n   within\
    \ one month of each other.  The third, the Scalable Distributed\n   Data Structure\
    \ (SDDS) [52], was curiously ignored in significant\n   structured P2P designs\
    \ despite having some similar goals [2, 6, 7].\n   It has been briefly referenced\
    \ in other P2P papers [46, 284-287].\n"
- title: 3.1.1.  Plaxton, Rajaraman, and Richa (PRR)
  contents:
  - "3.1.1.  Plaxton, Rajaraman, and Richa (PRR)\n   PRR is the most recent of the\
    \ three.  It influenced the designs of\n   Pastry [2], Tapestry [6], and Chord\
    \ [7].  The value of PRR is that it\n   can locate objects using fixed-length\
    \ routing tables [6].  Objects\n   and nodes are assigned a semantic-free address,\
    \ for example a 160-bit\n   key.  Every node is effectively the root of a spanning\
    \ tree.  A\n   message routes toward an object by matching longer address suffixes,\n\
    \   until it encounters either the object's root node or another node\n   with\
    \ a 'nearby' copy.  It can route around link and node failure by\n   matching\
    \ nodes with a related suffix.  The scheme has several\n   disadvantages [6]:\
    \ global knowledge is needed to construct the\n   overlay; an object's root node\
    \ is a single point of failure; nodes\n   cannot be inserted and deleted; and\
    \ there is no mechanism for queries\n   to avoid congestion hot spots.\n"
- title: 3.1.2.  Consistent Hashing
  contents:
  - "3.1.2.  Consistent Hashing\n   Consistent Hashing [288] strongly influenced the\
    \ designs of Chord [7]\n   and Koorde [37].  Karger, et al. introduced Consistent\
    \ Hashing in the\n   context of the Web-caching problem [49].  Web servers could\n\
    \   conceivably use standard hashing to place objects across a network of\n  \
    \ caches.  Clients could use the approach to find the objects.  For\n   normal\
    \ hashing, most object references would be moved when caches are\n   added or\
    \ deleted.  On the other hand, Consistent Hashing is \"smooth\"\n   -- when caches\
    \ are added or deleted, the minimum number of object\n   references move so as\
    \ to maintain load balancing.  Consistent Hashing\n   also ensures that the total\
    \ number of caches responsible for a\n   particular object is limited.  Whereas\
    \ Litwin's Linear Hashing (LH*)\n   scheme requires 'buckets' to be added one\
    \ at a time in sequence [50],\n   Consistent Hashing allows them to be added in\
    \ any order [49].  There\n   is an open Consistent Hashing problem pertaining\
    \ to the fraction of\n   items moved when a node is inserted [165].  Extended\
    \ Consistent\n   Hashing was recently proposed to randomize queries over the spread\
    \ of\n   caches to significantly reduce the load variance [289].\n   Interestingly,\
    \ Karger [49] referred to an older DHT algorithm by\n   Devine that used \"a novel\
    \ autonomous location discovery algorithm\n   that learns the buckets' locations\
    \ instead of using a centralized\n   directory\" [51].\n"
- title: 3.1.3.  Scalable Distributed Data Structures (LH*)
  contents:
  - "3.1.3.  Scalable Distributed Data Structures (LH*)\n   In turn, Devine's primary\
    \ point of reference was Litwin's work on\n   SDDSs and the associated LH* algorithm\
    \ [52].  An SDDS satisfies three\n   design requirements: files grow to new servers\
    \ only when existing\n   servers are well loaded; there is no centralized directory;\
    \ and the\n   basic operations like insert, search, and split never require atomic\n\
    \   updates to multiple clients.  Honicky and Miller suggested the first\n   requirement\
    \ could be considered a limitation since expansion to new\n   servers is not under\
    \ administrative control [286].  Litwin recently\n   noted numerous similarities\
    \ and differences between LH* and Chord\n   [290].  He found that both implement\
    \ key search.  Although LH* refers\n   to clients and servers, nodes can operate\
    \ as peers in both.  Chord\n   'splits' nodes when a new node is inserted, while\
    \ LH* schedules\n   'splits' to avoid overload.  Chord requests travel O(log n)\
    \ hops,\n   while LH* client requests need, at most, two hops to find the target.\n\
    \   Chord stores a small number of 'fingers' at each node.  LH* servers\n   store\
    \ N/2 to N addresses while LH* clients store 1 to N addresses.\n   This trade-off\
    \ between hop count and the size of the index affects\n   system robustness, and\
    \ bears striking similarity to recent one- and\n   two-hop P2P schemes in Section\
    \ 2.  The arrival and departure of LH*\n   clients does not disrupt LH* server\
    \ metadata at all.  Given the size\n   of the index, the arrival and departure\
    \ of LH* servers are likely to\n   cause more churn than that of Chord nodes.\
    \  Unlike Chord, LH* has a\n   single point of failure, the split coordinator.\
    \  It can be\n   replicated.  Alternatively, it can be removed in later LH* variants,\n\
    \   though details have not been progressed for lack of practical need\n   [290].\n"
- title: 3.2.  Dependability
  contents:
  - "3.2.  Dependability\n   We make four overall observations about their dependability.\n\
    \   Dependability metrics fall into two categories: static dependability,\n  \
    \ a measure of performance before recovery mechanisms take over; and\n   dynamic\
    \ dependability, for the most likely case in massive networks\n   where there\
    \ is continual failure and recovery (\"churn\").\n"
- title: 3.2.1.  Static Dependability
  contents:
  - "3.2.1.  Static Dependability\n   Observation A: Static dependability comparisons\
    \ show that no O(log n)\n   DHT geometry is significantly more dependable than\
    \ the other O(log n)\n   geometries.\n   Gummadi, et al. compared the tree, hypercube,\
    \ butterfly, ring, XOR,\n   and hybrid geometries.  In such geometries, nodes\
    \ generally know\n   about O(log n) neighbors and route to a destination in O(log\
    \ n) hops,\n   where N is the number of nodes in the overlay.  Gummadi, et al.\
    \ asked\n   \"Why not the ring?\"  They concluded that only the ring and XOR\n\
    \   geometries permit flexible choice of both neighbors and alternative\n   routes\
    \ [24].  Loguinov, et al. added the de Bruijn graph to their\n   comparison [36].\
    \  They concluded that the classical analyses, for\n   example the probability\
    \ that a particular node becomes disconnected,\n   yield no major differences\
    \ between the resilience of Chord, CAN, and\n   de Bruijn graphs.  Using bisection\
    \ width (the minimum edge count\n   between two equal partitions) and path overlap\
    \ (the likelihood that\n   backup paths will encounter the same failed nodes or\
    \ links as the\n   primary path), they argued for the superior resilience of the\
    \ de\n   Bruijn graph.  In short, ring, XOR, and de Bruijn graphs all permit\n\
    \   flexible choice of alternative paths, but only in de Bruijn are the\n   alternate\
    \ paths independent of each other [36].\n"
- title: 3.2.2.  Dynamic Dependability
  contents:
  - "3.2.2.  Dynamic Dependability\n   Observation B: Dynamic dependability comparisons\
    \ show that DHT\n   dependability is sensitive to the underlying topology maintenance\n\
    \   algorithms.\n   Li, et al. give the best comparison to date of several leading\
    \ DHTs\n   during churn [291].  They relate the disparate configuration\n   parameters\
    \ of Tapestry, Chord, Kademlia, Kelips, and OneHop to\n   fundamental design choices.\
    \  For each of these DHTs, they plotted the\n   optimal performance in terms of\
    \ lookup latency (milliseconds) and\n   fraction of failed lookups.  The results\
    \ led to several important\n   insights about the underlying algorithms, for example:\
    \ increasing\n   routing table size is more cost-effective than increasing the\
    \ rate of\n   periodic stabilization; learning about new nodes during the lookup\n\
    \   process sometimes eliminates the need for stabilization; and parallel\n  \
    \ lookups reduce latency due to timeouts more effectively than faster\n   stabilization.\
    \  Similarly, Zhuang, et al. compared keep-alive\n   algorithms for DHT failure\
    \ detection [292].  Such algorithmic\n   comparisons can significantly improve\
    \ the dependability of DHT\n   designs.\n   In Figure 2, we propose a taxonomy\
    \ for the topology maintenance\n   algorithms that influence dependability.  The\
    \ algorithms can be\n   classified by how nodes join and leave, how they first\
    \ detect\n   failures, how they share information about topology updates, and\
    \ how\n   they react when they receive information about topology updates.\n \
    \  Normal Updates\n      Joins (passive; active) [293]\n      Leaves (passive;\
    \ active) [293]\n   Fault Detection [292]\n      Maintenance\n         Proactive\
    \ (periodic or keep-alive probes)\n         Reactive (correction-on-use, correction-on-failure)\
    \ [294]\n      Report\n         Negative (all dead nodes, nodes recently failed)\n\
    \         Positive (all live nodes; nodes recently recovered) [292]\n   Topology\
    \ Sharing: yes/ no [292]\n         Multicast Tree (explicit, implicit) [267, 295]\n\
    \         Gossip (timeouts; number of contacts) [39]\n   Corrective Action\n \
    \     Routing\n         Rerouting actions\n            (reroute once; route in\
    \ parallel [291]; reject)\n         Routing timeouts\n            (TCP-style,\
    \ virtual coordinates) [296]\n      Topology\n         Update action (evict/ replace/\
    \ tag node)\n         Update timeliness (immediate, periodic[296], delayed [297])\n\
    \        Figure 2: Topology Maintenance in Distributed Hash Tables\n"
- title: 3.2.3.  Ephemeral or Stable Nodes -- O(log n) or O(1) Hops
  contents:
  - "3.2.3.  Ephemeral or Stable Nodes -- O(log n) or O(1) Hops\n   Observation C:\
    \ Most DHTs use O(log n) geometries to suit ephemeral\n   nodes.  The O(1) hop\
    \ DHTs suit stable nodes and deserve more research\n   attention.\n   Most of\
    \ the DHTs in Section 3.5 assume that nodes are ephemeral, with\n   expected lifetimes\
    \ of one to two hours.  Therefore, they mostly use\n   an O(log n) geometry. \
    \ The common assumption is that maintenance of\n   full routing tables in the\
    \ O(1) hop DHTs will consume excessive\n   bandwidth when nodes are continually\
    \ joining and leaving.  The\n   corollary is that, when they run on stable infrastructure\
    \ servers\n   [298], most of the DHTs in Section 3.5 are less than optimal --\n\
    \   lookups take many more hops than necessary, wasting latency and\n   bandwidth\
    \ budgets.  The O(1) hop DHTs suit stable deployments and\n   high lookup rates.\
    \  For a churning 1024-node network, Li, et al.\n   concluded that OneHop is superior\
    \ to Chord, Tapestry, Kademlia, and\n   Kelips in terms of latency and lookup\
    \ success rate [291].  For a\n   3000-node network, they concluded that \"OneHop\
    \ is only preferable to\n   Chord when the deployment scenario allows a communication\
    \ cost\n   greater than 20 bytes per node per second\" [291].  This apparent\n\
    \   limitation needs to be put in context.  They assumed that each node\n   issues\
    \ only one lookup every 10 minutes and has a lifetime of only 60\n   minutes.\
    \  It seems reasonable to expect that in some deployments,\n   nodes will have\
    \ a lifetime of weeks or more, a maintenance bandwidth\n   of tens of kilobits\
    \ per second, and a load of hundreds of lookups per\n   second.  O(1) hop DHTs\
    \ are superior in such situations.  OneHop can\n   scale at least to many tens\
    \ of thousands of nodes [267].  The recent\n   O(1) hop designs [267, 295] are\
    \ vastly outnumbered by the O(log n)\n   DHTs in Section 3.5.  Research on the\
    \ algorithms of Figure 2 will\n   also yield improvements in the dependability\
    \ of the O(1) hop DHTs.\n"
- title: 3.2.4.  Simulation and Proof
  contents:
  - "3.2.4.  Simulation and Proof\n   Observation D: Although not yet a mature science,\
    \ the study of DHT\n   dependability is helped by recent simulation and formal\
    \ development\n   tools.\n   While there are recent reference architectures [294,\
    \ 298], much of\n   the DHT literature in Section 3.5 does not lend itself to\
    \ repeatable,\n   comparative studies.  The best comparative work to date [291]\
    \ relies\n   on the Peer-to-Peer Simulator (P2PSIM) [299].  At the time of\n \
    \  writing, it supports more DHT geometries than any other simulator.\n   As the\
    \ study of DHTs matures, we can expect to see the simulation\n   emphasis shift\
    \ from geometric comparison to a comparison of the\n   algorithms of Figure 2.\n\
    \   P2P correctness proofs generally rely on less-than-complete formal\n   specifications\
    \ of system invariants and events [7, 45, 300].  Li and\n   Plaxton expressed\
    \ concern that \"when many joins and leaves happen\n   concurrently, it is not\
    \ clear whether the neighbor tables will remain\n   in a 'good' state\" [47].\
    \  While acknowledging that guaranteeing\n   consistency in a failure-prone network\
    \ is impossible, Lynch, Malkhi,\n   et al. sketched amendments to the Chord algorithm\
    \ to guarantee\n   atomicity [301].  More recently, Gilbert, Lynch, et al. gave\
    \ a new\n   algorithm for atomic read/write memory in a churning distributed\n\
    \   network, suggesting it to be a good match for P2P [302].  Lynch and\n   Stoica\
    \ show in an enhancement to Chord that lookups are provably\n   correct when there\
    \ is a limited rate of joins and failures [303].\n   Fault Tolerant Active Rings\
    \ is a protocol for active joins and leaves\n   that was formally specified and\
    \ proven using B-method tools [304].  A\n   good starting point for a formal DHT\
    \ development would be the\n   numerous informal API specifications [22, 305,\
    \ 306].  Such work could\n   be informed by other efforts to formally specify\
    \ routing invariants\n   [307, 308].\n"
- title: 3.3.  Latency
  contents:
  - "3.3.  Latency\n   The key metrics for DHT latency are:\n   1) Shortest-Path Distance\
    \ and Diameter.  In graph theory, the\n      shortest-path distance is the minimum\
    \ number of edges in any path\n      between two vertices of the graph.  Diameter\
    \ is the largest of all\n      shortest-path distances in a graph [309].  Networking\
    \ synonyms for\n      distance on a DHT are \"hop count\" and \"lookup length\"\
    .\n   2) Latency and Latency Stretch.  Two types of latency are relevant\n   \
    \   here -- network-layer latency and overlay latency.  Network-layer\n      latency\
    \ has been referred to as \"proximity\" or \"locality\" [24].\n      Stretch is\
    \ the cost of an overlay path between two nodes, divided\n      by the cost of\
    \ the direct network path between those nodes [310].\n      Latency stretch is\
    \ also known as the \"relative delay penalty\"\n      [311].\n"
- title: 3.3.1.  Hop Count and the O(1)-Hop DHTs
  contents:
  - "3.3.1.  Hop Count and the O(1)-Hop DHTs\n   Hop count gives an approximate indication\
    \ of path latency.  O(1)-hop\n   DHTs have path latencies lower than the O(log\
    \ n)-hop DHTs [291].\n   This significant advantage is often overlooked on account\
    \ of concern\n   about the messaging costs to maintain large routing tables (Section\n\
    \   3.2.3).  Such concern is justified when the mean node lifetime is\n   only\
    \ a few hours and the mean lookup interval per node is more than a\n   few seconds\
    \ (the classic profile of a P2P file-sharing node).\n   However, for a large,\
    \ practical operating range (node lifetimes of\n   days or more, lookup rates\
    \ of over tens of lookups per second per\n   node, up to ~100,000 nodes), the\
    \ total messaging cost in O(1) hop\n   DHTs is lower than in O(log n) DHTs [312].\
    \  Lookups and routing table\n   maintenance contribute to the total messaging\
    \ cost.  If a deployment\n   fits this operating range, then O(1)-hop DHTs will\
    \ give lower path\n   latencies and lower total messaging costs.  An additional\
    \ merit of\n   the O(1)-hop DHTs is that they yield lower lookup failure rates\
    \ than\n   their O(log N)-hop counterparts [291].\n   Low hop count can be achieved\
    \ in two ways: each node has a large O(N)\n   index of nodes; or the object references\
    \ can be replicated on many\n   nodes.  Beehive [313], Kelips [39], LAND [310],\
    \ and Tulip [314] are\n   examples of the latter category.  Beehive achieves O(1)\
    \ hops on\n   average and O(log n) hops in the worst case, by proactive replication\n\
    \   of popular objects.  Kelips replicates the 'file index'.  It incurs\n   O(sqrt(N))\
    \ storage costs for both the node index and the file index.\n   LAND uses O(log\
    \ n) reference pointers for each stored object and an\n   O(log n) index to achieve\
    \ a worst-case 1+e stretch, where 0<e.  The\n   Kelips-like Tulip [314] requires\
    \ 2 hops per lookup.  Each node\n   maintains 2sqrt(N)log(N) links to other nodes\
    \ and objects are\n   replicated on O(sqrt(N)) nodes.\n   The DHTs with a large\
    \ O(N) node index can be divided into two groups:\n   those for which the index\
    \ is always O(N); and those for which the\n   index opportunistically ranges from\
    \ O(log n) to O(N).  Linear Hashing\n   (LH*) servers [52], OneHop [267], and\
    \ 1h-Calot [295] fall into the\n   former category.  EpiChord [315] and Accordion\
    \ [316] are examples of\n   the latter.\n"
- title: 3.3.2.  Proximity and the O(log n)-Hop DHTs
  contents:
  - "3.3.2.  Proximity and the O(log n)-Hop DHTs\n   If one chooses not to use single-hop\
    \ DHTs, hop count is a weak\n   indicator of end-to-end path latency.  Some hops\
    \ may incur large\n   delays because of intercontinental or satellite links. \
    \ Consequently,\n   numerous DHT designs minimize path latency by considering\
    \ the\n   proximity of nodes.  Gummadi, et al. classified the proximity methods\n\
    \   as follows [24]:\n   1) Proximity Neighbor Selection (PNS).  The nodes in\
    \ the routing\n      table are chosen based on the latency of the direct hop to\
    \ those\n      nodes.  The latency may be explicitly measured [317], or it may\
    \ be\n      estimated using one of several synthetic coordinate systems [150,\n\
    \      154, 318].  As a lower bound on PNS performance, Dabek, et al.\n      showed\
    \ that lookups on O(log n) DHTs take at least 1.5 times the\n      average roundtrip\
    \ time of the underlying network [154].\n   2) Proximity Route Selection (PRS).\
    \  At lookup time, the choice of\n      the next-hop node relies on the latency\
    \ of the direct hop to that\n      node.  PRS is less effective than PNS, though\
    \ it may complement it\n      [24].  Some of the routing geometries in Section\
    \ 3.5 do not\n      support PNS and/or PRS [24].\n   3) Proximity Identifier Selection\
    \ (PIS).  Node identifiers indicate\n      geographic position.  PIS frustrates\
    \ load balancing, increases the\n      risk of correlated failures, and is not\
    \ often used [24].\n   The proximity study by Gummadi, et al. assumed recursive\
    \ routing,\n   though they suggested that PNS would also be superior to PRS with\n\
    \   iterative routing [24].  Dabek, et al. found that recursive lookups\n   take\
    \ 0.6 times as long as iterative lookups [150].\n   Beyond the explicit use of\
    \ proximity information, redundancy can help\n   to avoid slow paths and servers.\
    \  One may increase the number of\n   replicas [150], use parallel lookups [291,\
    \ 316], use alternate routes\n   on failure [150], or use multiple gateway nodes\
    \ to enter the DHT\n   [317].\n"
- title: 3.4.  Multicasting
  contents:
  - '3.4.  Multicasting

    '
- title: 3.4.1.  Multicasting vs. Broadcasting
  contents:
  - "3.4.1.  Multicasting vs. Broadcasting\n   \"Multicasting\" here means sending\
    \ a message to a subset of an\n   overlay's nodes.  Nodes explicitly join and\
    \ leave this subset, called\n   a \"multicast group\".  \"Broadcasting\" here\
    \ is a special case of\n   multicasting in which a message is sent to all nodes\
    \ in the overlay.\n   Broadcasting relies on overlay membership messages -- it\
    \ does not\n   need extra group membership messaging.  Castro, et al. said\n \
    \  multicasting on structured overlays is either \"flooding\" (one overlay\n \
    \  per group) or \"tree-based\" (one tree per group) [319].  These are\n   synonyms\
    \ for broadcasting and multicasting respectively.\n   The first DHT-based designs\
    \ for multicasting were CAN multicast\n   [320], Scribe [241], Bayeux [242], and\
    \ i3 [231].  They were based on\n   CAN [8], Pastry [2], Tapestry [31], and Chord\
    \ [7] respectively.  El-\n   Ansary, et al. devised the first DHT-based broadcasting\
    \ scheme [321].\n   It was based on Chord.\n   Multicast trees can be constructed\
    \ using reverse-path forwarding or\n   forward-path forwarding.  Scribe uses reverse-path\
    \ forwarding [241].\n   Bayeux uses forward-path forwarding [242].  Borg, a multicast\
    \ design\n   based on Pastry, uses a combination of forward-path and reverse-path\n\
    \   forwarding to minimize latency [237].\n"
- title: 3.4.2.  Motivation for DHT-based Multicasting
  contents:
  - "3.4.2.  Motivation for DHT-based Multicasting\n   Multicasting complements DHT\
    \ search capability.  DHTs naturally\n   support exact match queries.  With multicasting,\
    \ they can support\n   more complex queries.  Multicasting also enables the dissemination\n\
    \   and collection of global information.\n   Consider, for example, aggregation\
    \ queries like minimum, maximum,\n   count, sum, and average (Section 5.4).  A\
    \ node at the root of a\n   dissemination tree might multicast such a query [322].\
    \  The leaf\n   nodes return local results towards the root node.  Successive\
    \ parents\n   aggregate the result so that eventually the root node can compute\
    \ the\n   global result.  Such queries may help to monitor the capacity and\n\
    \   health of the overlay itself.\n   Why bother with structured overlays for\
    \ multicasting?  In Section\n   2.1, we saw that Gnutella can multicast complex\
    \ queries without them\n   [4].  Castro, et al. posed the question, \"Should we\
    \ build Gnutella on\n   a structured overlay?\" [259].  While acknowledging that\
    \ their study\n   was preliminary, they did conclude that \"we see no reason to\
    \ build\n   Gnutella on top of an unstructured overlay\" [259].  The supposedly\n\
    \   high maintenance costs of structured overlays were outweighed by\n   query\
    \ cost savings.  The structured overlay ensured that nodes were\n   only visited\
    \ once during a complex query.  It also helped to\n   accurately limit the total\
    \ number of nodes visited.  Pai, et al.\n   acknowledged that multicast trees\
    \ based on structured overlays\n   contribute to simple routing rules, low delay\
    \ and low delay variation\n   [323].  However, they opted for unstructured, gossip-based\n\
    \   multicasting for reliability reasons: data loss near the tree root\n   affects\
    \ all subtended nodes; interior node failures must be repaired\n   quickly; interior\
    \ nodes are obliged to disseminate more than their\n   fair share of traffic,\
    \ giving leaf nodes a \"free ride\".  The most\n   promising research direction\
    \ is to improve on the Bimodal\n   Multicasting approach [324].  It combines the\
    \ bandwidth efficiency\n   and low latency of structured, best-effort multicasting\
    \ trees with\n   the reliability of unstructured gossip protocols.\n"
- title: 3.4.3.  Design Issues
  contents:
  - "3.4.3.  Design Issues\n   None of the early structured overlay multicast designs\
    \ addressed all\n   of the following issues [325]:\n   1) Heterogeneous Node Capacity.\
    \  Nodes differ in their processing,\n      memory, and network capacity.  Multicast\
    \ throughput is largely\n      determined by the node with smallest throughput\
    \ [325].  To limit\n      the multicasting load on a node, one might cap its out-degree.\
    \  If\n      the same node receives further join requests, it refers them to\n\
    \      its children (\"pushdown\") [240].  Bharambe, et al. explored\n      several\
    \ pushdown strategies but found them inadequate to deal with\n      heterogeneity\
    \ [326].  They concluded that the heterogeneity issue\n      remains open, and\
    \ should be addressed before deploying DHTs for\n      high-bandwidth multicasting\
    \ applications.  Independently, Zhang et\n      al. partially tackled heterogeneity\
    \ by allowing nodes in their\n      CAM-Chord and CAM-Koorde designs to vary out-degree\
    \ according to\n      the node's capacity [325].  However, they made no mention\
    \ of the\n      \"pushdown\" issue -- they did not describe topology maintenance\n\
    \      when the out-degree limit is reached.\n   2) Reliability (Dynamic Membership).\
    \  If a multicast tree is to be\n      resilient, it must survive dynamic membership.\
    \  There are several\n      ways to deal with dynamic membership: ensure that\
    \ the root node of\n      the multicasting tree does not handle all requests to\
    \ join or\n      leave the multicast group [242]; use multiple interior-node-\n\
    \      disjoint trees to avoid single points of failure in tree\n      structures\
    \ [322]; and split the root node into several replicas\n      and partition members\
    \ across them [241].  For example, Bayeux\n      requires the root node to track\
    \ all group membership changes\n      whereas Scribe does not [241].  CAN-multicast\
    \ uses a single,\n      well-known host to bootstrap the join operations [320].\
    \  The\n      earliest DHT-based broadcasting work by El-Ansary, et al. did not\n\
    \      address the issue of dynamic membership [321].  Ghodsi, et al.\n      addressed\
    \ it in a subsequent paper, though, giving two broadcast\n      algorithms that\
    \ accommodate routing table inconsistencies [327].\n      One algorithm achieves\
    \ a more optimal multicasting network at the\n      expense of greater correction\
    \ overhead.  Splitstream, based on\n      Scribe and Pastry, redundantly striped\
    \ content across multiple\n      interior-node-disjoint multicast trees -- if\
    \ one interior node\n      fails, then only one stripe is lost [240].\n   3) Large\
    \ Any-Source Multicast Groups.  Any group member should be\n      allowed to send\
    \ multicast messages.  The group should scale to a\n      very large number of\
    \ hosts.  CAN-based multicast was the first\n      application-level multicast\
    \ scheme to scale to groups of several\n      thousands of nodes without restricting\
    \ the service model to a\n      single source [320].  Bayeux scales to large groups\
    \ but has a\n      single root node for each multicast group.  It supports the\
    \ any-\n      source model only by having the root node operate as a reflector\n\
    \      for multiple senders [242].\n"
- title: 3.5.  Routing Geometries
  contents:
  - "3.5.  Routing Geometries\n   In Sections 3.5.1 to 3.5.6, we introduce the main\
    \ geometries for\n   simple key lookup and survey their robustness mechanisms.\n"
- title: 3.5.1.  Plaxton Trees (Pastry, Tapestry)
  contents:
  - "3.5.1.  Plaxton Trees (Pastry, Tapestry)\n   Work began in March 2000 on a structured,\
    \ fault-tolerant, wide-area\n   Dynamic Object Location and Routing (DOLR) system\
    \ called Tapestry [6,\n   155].  While DHTs fix replica locations, a DOLR API\
    \ enables\n   applications to control object placement [31].  Tapestry's basic\n\
    \   location and routing scheme follows Plaxton, Rajaraman, and Richa\n   (PRR)\
    \ [30], but it remedies PRR's robustness shortcomings described\n   in Section\
    \ 3.1.  Whereas each object has one root node in PRR,\n   Tapestry uses several\
    \ to avoid a single point of failure.  Unlike\n   PRR, it allows nodes to be inserted\
    \ and deleted.  Whereas PRR\n   required a total ordering of nodes, Tapestry uses\
    \ 'surrogate routing'\n   to incrementally choose root nodes.  The PRR algorithm\
    \ does not\n   address congestion, but Tapestry can put object copies close to\
    \ nodes\n   generating high query loads.  PRR nodes only know of the nearest\n\
    \   replica, whereas Tapestry nodes enable selection from a set of\n   replicas\
    \ (for example, to retrieve the most up to date).  To detect\n   routing faults,\
    \ Tapestry uses TCP timeouts and UDP heartbeats for\n   detection, sequential\
    \ secondary neighbours for rerouting, and a\n   'second chance' window so that\
    \ recovery can occur without the\n   overhead of a full node insertion.  Tapestry's\
    \ dependability has been\n   measured on a testbed of about 100 machines and on\
    \ simulations of\n   about 1000 nodes.  Successful routing rates and maintenance\n\
    \   bandwidths were measured during instantaneous failures and ongoing\n   churn\
    \ [31].\n   Pastry, like Tapestry, uses Plaxton-like prefix routing [2].  As in\n\
    \   Tapestry, Pastry nodes maintain O(log n) neighbours and route to a\n   target\
    \ in O(log n) hops.  Pastry differs from Tapestry only in the\n   method by which\
    \ it handles network locality and replication [2].\n   Each Pastry node maintains\
    \ a 'leaf set' and a 'routing table'.  The\n   leaf set contains l/2 node IDs\
    \ on either side of the local node ID in\n   the node ID space.  The routing table,\
    \ in row r, column c, points to\n   the node ID with the same r-digit prefix as\
    \ the local node, but with\n   an r+1 digit of c.  A Pastry node periodically\
    \ probes leaf set and\n   routing table nodes, with periodicity of Tls and Trt\
    \ and a timeout\n   Tout.  Mahajan, Castry, et al. analyzed the reliability versus\n\
    \   maintenance cost trade-offs in terms of the parameters l, Tls, Trt,\n   and\
    \ Tout [328].  They concluded that earlier concerns about excessive\n   maintenance\
    \ cost in a churning P2P network were unfounded, but\n   suggested follow-up work\
    \ for a wider range of reliability targets,\n   maintenance costs, and probe periods.\
    \  Rhea Geels, et al. concluded\n   that existing DHTs fail at high churn rates\
    \ [329].  Building on a\n   Pastry implementation from Rice University, they found\
    \ that most\n   lookups fail to complete when there is excessive churn.  They\n\
    \   conjectured that short-lived nodes often leave the network with\n   lookups\
    \ that have not yet timed out, but no evidence was provided to\n   confirm the\
    \ theory.  They identified three design issues that affect\n   DHT performance\
    \ under churn: reactive versus periodic recovery of\n   peers; lookup timeouts;\
    \ and choice of nearby neighbours.  Since\n   reactive recovery was found to add\
    \ traffic to already congested\n   links, the authors used periodic recovery in\
    \ their design.  For\n   lookup timeouts, they advocated an exponentially weighted\
    \ moving\n   average of each neighbour's response time, over alternative fixed\n\
    \   timeout or 'virtual coordinate' schemes.  For selection of nearby\n   neighbours,\
    \ they found that 'global sampling' was more effective than\n   simply sampling\
    \ a 'neighbour's neighbours' or 'inverse neighbours'.\n   Castro, Costa, et al.\
    \ have refuted the suggestion that DHTs cannot\n   cope with high churn rates\
    \ [330].  By implementing methods for\n   continuous detection and repair, their\
    \ MSPastry implementation\n   achieved shorter routing paths and a maintenance\
    \ overhead of less\n   than half a message per second per node.\n   There have\
    \ been more recent proposals based on these early Plaxton-\n   like schemes. \
    \ Kademlia uses a bit-wise exclusive or (XOR) metric for\n   the 'distance' between\
    \ 160-bit node identifiers [45].  Each node\n   keeps a list of contact nodes\
    \ for each section of the node space that\n   is between 2^i and 2^(i+1) from\
    \ itself (0.i<160).  Longer-lived nodes\n   are deliberately given preference\
    \ on this list -- it has been found\n   in Gnutella that the longer a node has\
    \ been active, the more likely\n   it is to remain active.  Like Kademlia, Willow\
    \ uses the XOR metric\n   [32].  It implements a Tree Maintenance Protocol to\
    \ 'zipper' together\n   broken segments of a tree.  Where other schemes use DHT\
    \ routing to\n   inefficiently add new peers, Willow can merge disjoint or broken\n\
    \   trees in O(log n) parallel operations.\n"
- title: 3.5.2.  Rings (Chord, DKS)
  contents:
  - "3.5.2.  Rings (Chord, DKS)\n   Chord is the prototypical DHT ring, so we first\
    \ sketch its operation.\n   Chord maps nodes and keys to an identifier ring [7,\
    \ 34].  Chord\n   supports one main operation: find a node with the given key.\
    \  It uses\n   Consistent Hashing (Section 3.1) to minimize disruption of keys\
    \ when\n   nodes join and leave the network.  However, Chord peers need only\n\
    \   track O(log n) other peers, not all peers as in the original\n   consistent\
    \ hashing proposal [49].  It enables concurrent node\n   insertions and deletions,\
    \ improving on PRR.  Compared to Pastry, it\n   has a simpler join protocol. \
    \ Each Chord peer tracks its predecessor,\n   a list of successors, and a finger\
    \ table.  Using the finger table,\n   each hop is at least half the remaining\
    \ distance around the ring to\n   the target node, giving an average lookup hop\
    \ count of (1/2)log\n   n(base 2).  Each Chord node runs a periodic stabilization\
    \ routine\n   that updates predecessor and successor pointers to cater to newly\n\
    \   added nodes.  All successors of a given node need to fail for the\n   ring\
    \ to fail.  Although a node departure could be treated the same as\n   a failure,\
    \ a departing Chord node first notifies the predecessor and\n   successors, so\
    \ as to improve performance.\n   In their definitive paper, Chord's inventors\
    \ critiqued its\n   dependability under churn [34].  They provided proofs on the\n\
    \   behaviour of the Chord network when nodes in a stable network fail,\n   stressing\
    \ that such proofs are inadequate in the general case of a\n   perpetually churning\
    \ network.  An earlier paper had posed the\n   question, \"For lookups to be successful\
    \ during churn, how regularly\n   do the Chord stabilization routines need to\
    \ run?\" [331].  Stoica,\n   Morris, et al. modeled a range of node join/departure\
    \ rates and\n   stabilization periods for a Chord network of 1000 nodes.  They\n\
    \   measured the number of timeouts (caused by a finger pointing to a\n   departed\
    \ node) and lookup failures (caused by nodes that temporarily\n   point to the\
    \ wrong successor during churn).  They also modeled the\n   'lookup stretch',\
    \ the ratio of the Chord lookup time to optimal\n   lookup time on the underlying\
    \ network.  They demonstrated the latency\n   advantage of recursive lookups over\
    \ iterative lookups, but there\n   remains room for delay reduction.  For further\
    \ work, the authors\n   proposed to improve resilience to network partitions,\
    \ using a small\n   set of known nodes or 'remembered' random nodes.  To reduce\
    \ the\n   number of messages per lookup, they suggested an increase in the size\n\
    \   of each step around the ring, accomplished via a larger number of\n   fingers\
    \ at each node.  Much of the paper assumed independent, equally\n   likely node\
    \ failures.  Analysis of correlated node failures, caused\n   by massive site\
    \ or backbone failures, will be more important in some\n   deployments.  The paper\
    \ did not attempt to recommend a fixed optimal\n   stabilization rate.  Liben-Nowell,\
    \ Balakrishnan, et al. had suggested\n   that optimum stabilization rate might\
    \ evolve according to\n   measurements of peers' behaviour [331] -- such a mechanism\
    \ has yet to\n   be devised.\n   Alima, El-Ansary, et al. considered the communication\
    \ costs of\n   Chord's stabilization routines, referred to as 'active correction',\n\
    \   to be excessive [332].  Two other robustness issues also motivated\n   their\
    \ Distributed K-ary Search (DKS) design, which is similar to\n   Chord.  Firstly,\
    \ the total system should evolve for an optimum\n   balance between the number\
    \ of peers, the lookup hop count, and the\n   size of the routing table.  Secondly,\
    \ lookups should be reliable --\n   P2P algorithms should be able to guarantee\
    \ a successful lookup for\n   key/value pairs that have been inserted into the\
    \ system.  A similar\n   lookup-correctness issue was raised elsewhere by one\
    \ of Chord's\n   authors; \"Is it possible to augment the data structure to work\
    \ even\n   when nodes (and their associated finger lists) just disappear?\" [333]\n\
    \   Alima, El-Ansary, et al. asserted that P2Ps using active correction,\n   like\
    \ Chord, Pastry, and Tapestry, are unable to give such a\n   guarantee.  They\
    \ propose an alternate 'correction-on-use' scheme,\n   whereby expired routing\
    \ entries are corrected by information\n   piggybacking lookups and insertions.\
    \  A prerequisite is that lookup\n   and insertion rates are significantly higher\
    \ than node arrival,\n   departure, and failure rates.  Correct lookups are guaranteed\
    \ in the\n   presence of simultaneous node arrivals or up to f concurrent node\n\
    \   departures, where f is configurable.\n"
- title: 3.5.3.  Tori (CAN)
  contents:
  - "3.5.3.  Tori (CAN)\n   Ratnasamy, Francis, et al. developed the Content-Addressable\
    \ Network\n   (CAN), another early DHT widely referenced alongside Tapestry,\n\
    \   Pastry, and Chord [8, 334].  It is arranged as a virtual\n   d-dimensional\
    \ Cartesian coordinate space on a d-torus.  Each node is\n   responsible for a\
    \ zone in this coordinate space.  The designers used\n   a heuristic thought to\
    \ be important for large, churning P2P networks:\n   keep the number of neighbours\
    \ independent of system size.\n   Consequently, its design differs significantly\
    \ from Pastry, Tapestry,\n   and Chord.  Whereas they have O(log n) neighbours\
    \ per node and O(log\n   n) hops per lookup, CAN has O(d) neighbours and O(dn^(1/d))\
    \ hop\n   count.  When CAN's system-wide parameter d is set to log(n), CAN\n \
    \  converges to their profile.  If the number of nodes grows, a major\n   rearrangement\
    \ of the CAN network may be required [151].  The CAN\n   designers considered\
    \ building on PRR, but opted for the simple, low-\n   state-per-node CAN algorithm\
    \ instead.  They had reasoned that a PRR-\n   based design would not perform well\
    \ under churn, given node\n   departures and arrivals would affect a logarithmic\
    \ number of nodes\n   [8].\n   There have been preliminary assessments of CAN's\
    \ resilience.  When a\n   node leaves the CAN in an orderly fashion, it passes\
    \ its own Virtual\n   ID (VID), its neighbours' VIDs and IP addresses, and its\
    \ key/value\n   pairs to a takeover node.  If a node leaves abruptly, its neighbours\n\
    \   send recovery messages towards the designated takeover node.  CAN\n   ensures\
    \ the recovery messages reach the takeover node, even if nodes\n   die simultaneously,\
    \ by maintaining a VID chain with Chord's\n   stabilization algorithm.  Some initial\
    \ 'proof of concept' resilience\n   simulations were run using the Network Simulator\
    \ (NS) [335] for up to\n   a few hundred nodes.  Average hop counts and lookup\
    \ failure\n   probabilities were plotted against the total number of nodes for\n\
    \   various node failure rates [8].  The CAN team documented several open\n  \
    \ research questions pertaining to state/hop count trade-offs,\n   resilience,\
    \ load, locality, and heterogeneous peers [44, 334].\n"
- title: 3.5.4.  Butterflies (Viceroy)
  contents:
  - "3.5.4.  Butterflies (Viceroy)\n   Viceroy approximates a butterfly network [46].\
    \  It generally has\n   constant degree like CAN.  Like Chord, Tapestry, and Pastry,\
    \ it has\n   logarithmic diameter.  It improves on these systems, inasmuch as\
    \ its\n   diameter is better than CAN and its degree is better than Chord,\n \
    \  Tapestry, and Pastry.  As with most DHTs, it utilizes Consistent\n   Hashing.\
    \  When a peer joins the Viceroy network, it takes a random\n   but permanent\
    \ 'identity' and selects its 'level' within the network.\n   Each peer maintains\
    \ general ring pointers ('predecessor' and\n   'successor'), level ring pointers\
    \ ('nextonlevel' and 'prevonlevel'),\n   and butterfly pointers ('left', 'right',\
    \ and 'up').  When a peer\n   departs, it normally passes its key pairs to a successor,\
    \ and\n   notifies other peers to find a replacement peer.\n   The Viceroy paper\
    \ scoped out the issue of robustness.  It explicitly\n   assumed that peers do\
    \ not fail [46].  It assumed that join and leave\n   operations do not overlap,\
    \ so as to avoid the complication of\n   concurrency mechanisms like locking.\
    \  Kaashoek and Karger were\n   somewhat critical of Viceroy's complexity [37].\
    \  They also pointed to\n   its fault-tolerance blind spot.  Li and Plaxton suggested\
    \ that such\n   constant-degree algorithms deserve further consideration [47].\
    \  They\n   offered several pros and cons.  The limited degree may increase the\n\
    \   risk of a network partition, or inhibit use of local neighbours (for\n   the\
    \ simple reason that there are less of them).  On the other hand,\n   it may be\
    \ easier to reason about the correctness of fixed-degree\n   networks.  One of\
    \ the Viceroy authors has since proposed constant-\n   degree peers in a two-tier,\
    \ locality-aware DHT [310] -- the lower\n   degree maintained by each lower-tier\
    \ peer purportedly improves\n   network adaptability.  Another Viceroy author\
    \ has since explored an\n   alternative bounded-degree graph for P2P, namely the\
    \ de Bruijn graph\n   [336].\n"
- title: 3.5.5.  de Bruijn (D2B, Koorde, Distance Halving, ODRI)
  contents:
  - "3.5.5.  de Bruijn (D2B, Koorde, Distance Halving, ODRI)\n   De Bruijn graphs\
    \ have had numerous refinements since their inception\n   [337, 338].  Schlumberger\
    \ was the first to use them for networking\n   [339].  Two research teams independently\
    \ devised the 'generalized' de\n   Bruijn graph that accommodates a flexible number\
    \ of nodes in the\n   system [340, 341].  Rowley and Bose studied fault-tolerant\
    \ rings\n   overlaid on the de Bruijn graph [342].  Lee, Liu, et al. devised a\n\
    \   two-level de Bruijn hierarchy, whereby clusters of local nodes are\n   interconnected\
    \ by a second-tier ring [343].\n   Many of the algorithms discussed previously\
    \ are 'greedy' in that each\n   time a query is forwarded, it moves closer to\
    \ the destination.\n   Unfortunately, greedy algorithms are generally suboptimal\
    \ -- for a\n   given degree, the routing distance is longer than necessary [344].\n\
    \   Unlike these earlier P2P designs, de Bruijn graphs of degree k\n   achieve\
    \ an asymptotically optimal diameter log n, where n is the\n   number of nodes\
    \ in the system and k can be varied to improve\n   resilience.  If there are O(log\
    \ n) neighbours per node, the de Bruijn\n   hop count is O(log n/log log n). \
    \ To illustrate de Bruijn's practical\n   advantage, consider a network with one\
    \ million nodes of degree 20:\n   Chord has a diameter of 20, while de Bruijn\
    \ has a diameter of 5 [36].\n   In 2003, there were a quick succession of de Bruijn\
    \ proposals -- D2B\n   [345], Koorde [37], Distance Halving [132, 336], and the\
    \ Optimal\n   Diameter Routing Infrastructure (ODRI) [36].\n   Fraigniaud and\
    \ Gauron began the D2B design by laying out an informal\n   problem statement:\
    \ keys should be evenly distributed; lookup latency\n   should be small; traffic\
    \ load should be evenly distributed; updates\n   of routing tables and redistribution\
    \ of keys should be fast when\n   nodes join or leave the network.  They defined\
    \ a node's \"congestion\"\n   to be the probability that a lookup will traverse\
    \ it.  Apart from its\n   optimal de Bruijn diameter, they highlighted D2B's merits:\
    \ a constant\n   expected update time when nodes join and leave (O(log n) with\
    \ high\n   probability (w.h.p.)); the expected node congestion is O((log n)/n)\n\
    \   (O(((log n)^2)/n) w.h.p.) [345].  D2B's resilience was discussed only\n  \
    \ in passing.\n   Koorde extends Chord to attain the optimal de Bruijn degree/diameter\n\
    \   trade-off above [37].  Unlike D2B, Koorde does not constrain the\n   selection\
    \ of node identifiers.  Also unlike D2B, it caters to\n   concurrent joins, by\
    \ extension of Chord's functionality.  Kaashoek\n   and Karger investigated Koorde's\
    \ resilience to a rather harsh failure\n   scenario: \"in order for a network\
    \ to stay connected when all nodes\n   fail with probability of 1/2, some nodes\
    \ must have degree\n   omega(log n)\" [37].  They sketched a mechanism to increase\
    \ Koorde's\n   degree for this more stringent fault tolerance, losing de Bruijn's\n\
    \   constant degree advantage.  Similarly, to achieve a constant-factor\n   load\
    \ balance, Koorde would have to sacrifice its degree optimality.\n   They suggested\
    \ that the ability to trade the degree, and hence the\n   maintenance overhead,\
    \ against the expected hop count may be important\n   for churning systems.  They\
    \ also identified an open problem: find a\n   load-balanced, degree optimal DHT.\
    \  Datta, Girdzijauskas, et al.\n   showed that for arbitrary key distributions,\
    \ de Bruijn graphs fail to\n   meet the dual goals of load balancing and search\
    \ efficiency [346].\n   They posed the question, \"(Is there) a constant routing\
    \ table sized\n   DHT which meets the conflicting goals of storage load balancing\
    \ and\n   search efficiency for an arbitrary and changing key distribution?\"\n\
    \   Distance Halving was also inspired by de Bruijn [336] and shares its\n   optimal\
    \ diameter.  Naor and Wieder argued for a two-step\n   \"continuous-discrete\"\
    \ approach for its design.  The correctness of\n   its algorithms is proven in\
    \ a continuous setting.  The algorithms are\n   then mapped to a discrete space.\
    \  The source x and target y are\n   points on the continuous interval [0,1).\
    \  Data items are hashed to\n   this same interval.  <str> is a string that determines\
    \ how messages\n   leave any point on the ring: if bit t of the string is 0, the\
    \ left\n   leg is taken; if it is 1, the right leg is taken.  <str> increases\
    \ by\n   one bit each hop, giving a sequence by which to step around the ring.\n\
    \   A lookup has two phases.  In the first, the lookup message containing\n  \
    \ the source, target, and the random string hops toward the midpoint of\n   the\
    \ source and target.  On each hop, the distance between <str>(x)\n   and <str>(y)\
    \ is halved, by virtue of the specific 'left' and 'right'\n   functions.  In the\
    \ second phase, the message steps 'backward' from\n   the midpoint to the target,\
    \ removing the last bit in <str> at each\n   hop. 'Join' and 'leave' algorithms\
    \ were outlined but there was no\n   consideration of recovery times or message\
    \ load on churn.  Using the\n   Distance Halving properties, the authors devised\
    \ a caching scheme to\n   relieve congestion in a large P2P network.  They have\
    \ also modified\n   the algorithm to be more robust in the presence of random\
    \ faults\n   [132].\n   Solid comparisons of DHT resilience are scarce, but Loguinov,\
    \ Kumar,\n   et al. give just that in their ODRI paper [36].  They compare Chord,\n\
    \   CAN, and de Bruijn in terms of routing performance, graph expansion\n   and\
    \ clustering.  At the outset, they give the optimal diameter (the\n   maximum\
    \ hop count between any two nodes in the graph) and average hop\n   count for\
    \ graphs of fixed degree.  De Bruijn graphs converge to both\n   optima, and outperform\
    \ Chord and CAN on both counts.  These optima\n   impact both delay and aggregate\
    \ lookup load.  They present two\n   clustering measures (edge expansion and node\
    \ expansion), which are\n   interesting for resilience.  Unfortunately, after\
    \ decades of de\n   Bruijn research, they have no exact solution.  De Bruijn was\
    \ shown to\n   be superior in terms of path overlap - \"de Bruijn automatically\n\
    \   selects backup paths that do not overlap with the best shortest path\n   or\
    \ with each other\" [36].\n"
- title: 3.5.6.  Skip Graphs
  contents:
  - "3.5.6.  Skip Graphs\n   Skip Graphs have been pursued by two research camps [38,\
    \ 41].  They\n   augment the earlier Skip Lists [347, 348].  Unlike earlier balanced\n\
    \   trees, the Skip List is probabilistic -- its insert and delete\n   operations\
    \ do not require tree rearrangements and so are faster by a\n   constant factor.\
    \  The Skip List consists of layers of ordered linked\n   lists.  All nodes participate\
    \ in the bottom layer 0 list.  Some of\n   these nodes participate in the layer\
    \ 1 list with some fixed\n   probability.  A subset of layer 1 nodes participate\
    \ in the layer 2\n   list, and so on.  A lookup can proceed quickly through the\
    \ list by\n   traversing the sparse upper layers until it is close to, or at,\
    \ the\n   target.  Unfortunately, nodes in the upper layers of a Skip List are\n\
    \   potential hot spots and single points of failure.  Unlike Skip Lists,\n  \
    \ Skip Graphs provide multiple lists at each level for redundancy, and\n   every\
    \ node participates in one of the lists at each level.\n   Each node in a Skip\
    \ Graph has theta(log n) neighbours on average,\n   like some of the preceding\
    \ DHTs.  The Skip Graph's primary edge over\n   the DHTs is its support for prefix\
    \ and proximity search.  DHTs hash\n   objects to a random point in the graph.\
    \  Consequently, they give no\n   guarantees over where the data is stored.  Nor\
    \ do they guarantee that\n   the path to the data will stay within the one administration\
    \ as far\n   as possible [38].  Skip graphs, on the other hand, provide for\n\
    \   location-sensitive name searches.  For example, to find the document\n   docname\
    \ on the node user.company.com, the Skip Graph might step\n   through its ordered\
    \ lists for the prefix com.company.user [38].\n   Alternatively, to find an object\
    \ with a numeric identifier, an\n   algorithm might search the lowest layer of\
    \ the Skip Graph for the\n   first digit, the next layer for the next digit, in\
    \ the same vein\n   until all digits are resolved.  Being ordered, Skip Graphs\
    \ also\n   facilitate range searches.  In each of these examples, the Skip Graph\n\
    \   can be arranged such that the path to the target, as far as possible,\n  \
    \ stays within an administrative boundary.  If one administration is\n   detached\
    \ from the rest of the Skip Graph, routing can continue within\n   each of the\
    \ partitions.  Mechanisms have been devised to merge\n   disconnected segments\
    \ [157], though at this stage, segments are re-\n   merged one at a time.  A parallel\
    \ merge algorithm has been flagged\n   for future work.\n   The advantages of\
    \ Skip Graphs come at a cost.  To be able to provide\n   range queries and data\
    \ placement flexibility, Skip Graph nodes\n   require many more pointers than\
    \ their DHT counterparts.  An increased\n   number of pointers implies increased\
    \ maintenance traffic.  Another\n   shortcoming of at least one of the early proposals\
    \ was that no\n   algorithm was given to assign keys to machines.  Consequently,\
    \ there\n   are no guarantees on system-wide load balancing or on the distance\n\
    \   between adjacent keys [100].  Aspnes, Kirsch, et al. have recently\n   devised\
    \ a scheme to reduce the inter-machine pointer count from\n   O(mlogm), where\
    \ m is the number of data elements, to O(nlog n), where\n   n is the number of\
    \ nodes [100].  They proposed a two-layer scheme --\n   one layer for the Skip\
    \ Graph itself and the second 'bucket layer'.\n   Each machine is responsible\
    \ for a number of buckets and each bucket\n   elects a representative key.  Nodes\
    \ locally adjust their load.  They\n   accept additional keys if they are below\
    \ their threshold or disperse\n   keys to nearby nodes if they are above threshold.\
    \  There appear to be\n   numerous open issues: simulations have been done but\
    \ analysis is\n   outstanding; mechanisms are required to handle the arrival and\n\
    \   departure of nodes; there were only brief hints as to how to handle\n   nodes\
    \ with different capacities.\n"
- title: 4.  Semantic Index
  contents:
  - "4.  Semantic Index\n   Semantic indexes capture object relationships.  While\
    \ the semantic-\n   free methods (DHTs) have firmer theoretic foundations and\
    \ guarantee\n   that a key can be found if it exists, they do not capture the\n\
    \   relationships between the document name and its content or metadata\n   on\
    \ their own.  Semantic P2P designs do.  However, since their design\n   is often\
    \ driven by heuristics, they may not guarantee that scarce\n   items will be found.\n\
    \   So what might the semantically indexed P2Ps add to an already crowded\n  \
    \ field of distributed information architectures?  At one extreme,\n   there are\
    \ the distributed relational database management systems\n   (RDBMSs), with their\
    \ strong consistency guarantees [284].  They\n   provide strong data independence,\
    \ the flexibility of SQL queries, and\n   strong transactional semantics -- Atomicity,\
    \ Consistency, Isolation\n   and Durability (ACID) [349].  They guarantee that\
    \ the query response\n   is complete -- all matching results are returned.  The\
    \ price is\n   performance.  They scale to perhaps 1000 nodes, as evidenced in\n\
    \   Mariposa [350, 351], or require query caching front ends to constrain\n  \
    \ the load [284].  Database research has \"arguably been cornered into\n   traditional,\
    \ high-end, transactional applications\" [72].  Then there\n   are distributed\
    \ file systems, like the Network File System (NFS) or\n   the Serverless Network\
    \ File Systems (xFS), with little data\n   independence, low-level file retrieval\
    \ interfaces, and varied\n   consistency [284].  Today's eclectic mix of Content\
    \ Distribution\n   Networks (CDNs) generally deload primary servers by redirecting\
    \ Web\n   requests to a nearby replica.  Some intercept the HTTP requests at\n\
    \   the DNS level and then use consistent hashing to find a replica [23].\n  \
    \ Since this same consistent hashing was a forerunner to the DHT\n   approaches\
    \ above, CDNs are generally constrained to the same simple\n   key lookups.\n\
    \   The opportunity for semantically indexed P2Ps, then, is to provide:\n   a)\
    \ graduated data independence, consistency, and query flexibility,\n      and\n\
    \   b) probabilistically complete query responses, across\n   c) very large numbers\
    \ of low-cost, geographically distributed,\n      dynamic nodes.\n"
- title: 4.1.  Keyword Lookup
  contents:
  - "4.1.  Keyword Lookup\n   P2P keyword lookup is best understood by considering\
    \ the structure of\n   the underlying index and the algorithms by which queries\
    \ are routed\n   over that index.  Figure 3 summarizes the following paragraphs\
    \ by\n   classifying the keyword query algorithms, index structures, and\n   metrics.\
    \  The research has largely focused on scalability, not\n   dependability.  There\
    \ have been very few studies that quantify the\n   impact of network churn.  One\
    \ exception is the work by Chawathe, et\n   al. on the Gia system [61].  Gia's\
    \ combination of algorithms from\n   Figure 3 (receiver-based flow control, biased\
    \ random walk, and one-\n   hop replication) gave 2-4 orders of magnitude improvement\
    \ in query\n   success rates in churning networks.\n   QUERY\n   Query routing\n\
    \     Flooding: Peers only index local files so queries must propagate\n     \
    \  widely [4]\n     Policy-based: Choice of the next hop node: random; most/least\n\
    \       recently used; most files shared; most results [265, 352]\n     Random\
    \ walks: Parallel [67] or biased random walks [61, 66]\n   Query forwarding\n\
    \     Iterative: Nodes perform iterative unicast searches of ultrapeers,\n   \
    \    until the desired number of results is achieved.  See Gnutella\n       UDP\
    \ Extension for Scalable Searches (GUESS) [265, 353]\n     Recursive\n   Query\
    \ flow control\n     Receiver-controlled: Receivers grant query tokens to senders,\
    \ so\n       as to avoid overload [61]\n     Reactive: sender throttles queries\
    \ when it notices receivers are\n       discarding packets [61, 66]\n     Dynamic\
    \ Time To Live: In the Dynamic Query Protocol, the sender\n       adjusts the\
    \ time-to-live on each iteration based on the number\n       of results received,\
    \ the number of connections left, and the\n       number of nodes already theoretically\
    \ reached by the search [354]\n   INDEX\n   Distribution\n     Compression: Leaf\
    \ nodes periodically send ultrapeers compressed\n       query routing tables,\
    \ as in the Query Routing Protocol [260]\n     One hop replication: Nodes maintain\
    \ an index of content on their\n       nearest neighbors [61, 352]\n   Partitioning\n\
    \     By document [210]\n     By keyword: Use an inverted list to find a matching\
    \ document,\n       either locally or at another peer [21].  Partition by keyword\n\
    \       sets [355]\n     By document and keyword: Also called Multi-Level Partitioning\
    \ [21]\n   METRIC\n   Query load: Queries per second per node/link [65, 265]\n\
    \   Degree: The number of links per node [66, 352].  Early P2P networks\n    \
    \ approximated power-law networks, where the number of nodes with L\n     links\
    \ is proportional to L^(-k), where k is a constant [65]\n   Query delay: Reported\
    \ in terms of time and hop count [61, 66]\n   Query success rate: The \"Collapse\
    \ Point\" is the per-node query rate\n     at which the query success rate drops\
    \ below 90% [61].  See\n     also [61, 265, 352].\n                  Figure 3:\
    \ Keyword Lookup in P2P Systems\n"
- title: 4.1.1.  Gnutella Enhancements
  contents:
  - "4.1.1.  Gnutella Enhancements\n   Perhaps the most widely referenced P2P system\
    \ for simple keyword\n   match is Gnutella [4].  Gnutella queries contain a string\
    \ of\n   keywords.  Gnutella peers answer when they have files whose names\n \
    \  contain all the keywords.  As discussed in Section 2.1, early\n   versions\
    \ of Gnutella did not forward the document index.  Queries\n   were flooded and\
    \ peers searched their own local indexes for filename\n   matches.  An early review\
    \ highlighted numerous areas for improvement\n   [65].  It was estimated that\
    \ the query traffic alone from 50,000\n   early-generation Gnutella nodes would\
    \ amount to 1.7% of the total\n   U.S. Internet backbone traffic at December 2000\
    \ levels.  It was\n   speculated that high-degree Gnutella nodes would impede\n\
    \   dependability.  An unnecessarily high percentage of Gnutella traffic\n   crossed\
    \ Autonomous System (AS) boundaries -- a locality mechanism may\n   have found\
    \ suitable nearby peers.\n   Fortunately, there have since been numerous enhancements\
    \ within the\n   Gnutella Developer Forum.  At the time of writing, it has been\n\
    \   reported that Gnutella has almost 350,000 unique hosts, of which\n   nearly\
    \ 90,000 accept incoming connections [356].  One of the main\n   improvements\
    \ is that an index of filename keywords, called the Query\n   Routing Table (QRT),\
    \ can now be forwarded from 'leaf peers' to its\n   'ultrapeers' [260].  Ultrapeers\
    \ can then ensure that the leaves only\n   receive queries for which they have\
    \ a match, dramatically reducing\n   the query traffic at the leaves.  Ultrapeers\
    \ can have connections to\n   many leaf nodes (~10-100) and a small number of\
    \ other ultrapeers\n   (<10) [260].  Originally, a leaf node's QRT was not forwarded\
    \ by the\n   parent ultrapeer to other ultrapeers.  More recently, there has been\n\
    \   a proposal to distribute aggregated QRTs amongst ultrapeers [357].\n   To\
    \ further limit traffic, QRTs are compressed by hashing, according\n   to the\
    \ Query Routing Protocol (QRP) specification [281].  This same\n   specification\
    \ claims QRP may reduce Gnutella traffic by orders of\n   magnitude, but cautions\
    \ that simulation is required before mass\n   deployment.  A known shortcoming\
    \ of QRP was that the extent of query\n   propagation was independent of the popularity\
    \ of the search terms.\n   The Dynamic Query Protocol addressed this [358].  It\
    \ required leaf\n   nodes to send single queries to high-degree ultrapeers that\
    \ adjust\n   the queries' time-to-live (TTL) bounds according to the number of\n\
    \   received query results.  An earlier proposal, called the Gnutella UDP\n  \
    \ Extension for Scalable Searches (GUESS) [353], similarly aimed to\n   reduce\
    \ the number of queries for widely distributed files.  GUESS\n   reuses the non-forwarding\
    \ idea (Section 2).  A GUESS peer repeatedly\n   queries single ultrapeers with\
    \ a TTL of 1, with a small timeout on\n   each query to limit load.  It chooses\
    \ the number of iterations and\n   selects ultrapeers so as to satisfy its search\
    \ needs.  For\n   adaptability, a small number of experimental Gnutella nodes\
    \ have\n   implemented eXtensible Markup Language (XML) schemas for richer\n \
    \  queries [359, 360].  None of the above Gnutella proposals explicitly\n   assess\
    \ robustness.\n   The broader research community has recently been leveraging\
    \ aspects\n   of the Gnutella design.  Lv, Ratnasamy, et al. exposed one assumption\n\
    \   implicit in some of the early DHT work -- that designs \"such as\n   Gnutella\
    \ are inherently not scalable, and therefore should be\n   abandoned\" [66]. \
    \ They argued that by making better use of the more\n   powerful peers, Gnutella's\
    \ scalability issues could be alleviated.\n   Instead of its flooding mechanism,\
    \ they used random walks.  Their\n   preliminary design to bias random walks towards\
    \ high capacity nodes\n   did not go as far as the ultrapeer proposals in that\
    \ the indexes did\n   not move to the high-capacity nodes.  Chawathe, Ratnasamy,\
    \ et al.\n   chose to extend the Gnutella design with their Gia system, in\n \
    \  response to the perceived shortcomings of DHTs in Section 1.2 [61].\n   Compared\
    \ to the early Gnutella designs, they incorporated several\n   novel features.\
    \  They devise a topology adaptation algorithm so that\n   most peers are attached\
    \ to high-degree peers.  They use a random walk\n   search algorithm, in lieu\
    \ of flooding, and bias the query load\n   towards higher-degree peers.  For 'one-hop\
    \ replication', they require\n   all nodes to keep pointers to content on adjacent\
    \ peers.  To\n   implement a receiver-controlled token-based flow control, a peer\
    \ must\n   have a token from its neighbouring peer before it sends a query to\n\
    \   it.  Chawathe, Ratnasamy, et al. show by simulations that the\n   combination\
    \ of these features provides a scalability improvement of\n   three to five orders\
    \ of magnitude over Gnutella \"while retaining\n   significant robustness\". \
    \ The main robustness metrics they used were\n   the 'collapse point' query rate\
    \ (the per-node query rate at which the\n   successful query rate falls below\
    \ 90%) and the average hop count\n   immediately prior to collapse.  Their comparison\
    \ with Gnutella did\n   not take into account the Gnutella enhancements above\
    \ -- this was\n   left as future work.  Castro, Costa, and Rowstron argued that\
    \ if\n   Gnutella were built on top of a structured overlay, then both the\n \
    \  query and overlay maintenance traffic could be reduced [259].  Yang,\n   Vinograd,\
    \ et al. explore various policies for peer selection in the\n   GUESS protocol,\
    \ since the issue is left open in the original proposal\n   [265].  For example,\
    \ the peer initiating the query could choose peers\n   that have been \"most recently\
    \ used\" or that have the \"most files\n   shared\".  Various policy pitfalls\
    \ are identified.  For example, good\n   peers could be overloaded, victims of\
    \ their own success.\n   Alternatively, malicious peers could encourage the querying\
    \ peer to\n   try inactive peers.  They conclude that a \"most results\" policy\
    \ gives\n   the best balance of robustness and efficiency.  Like Castro, Costa,\n\
    \   and Rowstron, they concentrated on the static network scenario.\n   Cholvi,\
    \ Felber, et al. very briefly describe how similar \"least\n   recently used\"\
    \ and \"most often used\" heuristics can be used by a peer\n   to select peer\
    \ 'acquaintances' [352].  They were motivated by the\n   congestion associated\
    \ with Gnutella's TTL-limited flooding.\n   Recognizing that the busiest peers\
    \ can quickly become overloaded\n   central hubs for the entire network, they\
    \ limit the number of\n   acquaintances for any given peer to 25.  They sketch\
    \ a mechanism to\n   decrement a query's TTL multiple times when it traverses\
    \ \"interested\n   peers\".  In summary, these Gnutella-related investigations\
    \ are\n   characterized by a bias for high-degree peers and very short directed\n\
    \   query paths, a disdain for flooding, and concern about excessive load\n  \
    \ on the 'better' peers.  Generally, the robustness analysis for\n   dynamic networks\
    \ (content updates and node arrivals/departures)\n   remains open.\n"
- title: 4.1.2.  Partition-by-Document, Partition-by-Keyword
  contents:
  - "4.1.2.  Partition-by-Document, Partition-by-Keyword\n   One aspect of P2P keyword\
    \ search systems has received particular\n   attention: should the index be partitioned\
    \ by document or by keyword?\n   The issue affects scalability.  To be partitioned\
    \ by document, each\n   node has a local index of documents for which it is responsible.\n\
    \   Gnutella is a prime example.  Queries are generally flooded in\n   systems\
    \ partitioned by document.  On the other hand, a peer may\n   assume responsibility\
    \ for a set of keywords.  The peer uses an\n   inverted list to find a matching\
    \ document, either locally or at\n   another peer.  If the query contains several\
    \ keywords, inverted lists\n   may need to be retrieved from several different\
    \ peers to find the\n   intersection [21].  The initial assessment by Li, Loo,\
    \ et al. was\n   that the partition-by-document approach was superior [210]. \
    \ For one\n   scenario of a full-text Web search, they estimated the communications\n\
    \   costs to be about six times higher than the feasible budget.\n   However,\
    \ wanting to exploit prior work on inverted list intersection,\n   they studied\
    \ the partition-by-keyword strategy.  They proposed\n   several optimizations\
    \ that put the communication costs for a\n   partition-by-keyword system within\
    \ an order of magnitude of\n   feasibility.  There had been a couple of prior\
    \ papers that suggested\n   partitioned-by-keyword designs incorporate DHTs to\
    \ map keywords to\n   peers [355, 361].  In Gnawali's Keyword-set Search System\
    \ (KSS), the\n   index is partitioned by sets of keywords [355].  Terpstra, Behnel,\
    \ et\n   al. point out that by keeping keyword pairs or triples, the number of\n\
    \   lists per document in KSS is squared or tripled [362].  Shi,\n   Guangwen,\
    \ et al. interpreted the approximations of Li, Loo, et al. to\n   mean that neither\
    \ approach is feasible on its own [21].  Their\n   Multi-Level Partitioning (MLP)\
    \ scheme incorporates both partitioning\n   approaches.  They arrange nodes into\
    \ a group hierarchy, with all\n   nodes in the single 'level 0' group, and with\
    \ the same nodes sub-\n   divided into k logical subgroups on 'level 1'.  The\
    \ subgroups are\n   again divided, level by level, until level l.  The inverted\
    \ index is\n   partitioned by document between groups and by keyword within groups.\n\
    \   MLP avoids the query flooding normally associated with systems\n   partitioned\
    \ by document, since a small number of nodes in each group\n   process the query.\
    \  It reduces the bandwidth overheads associated\n   with inverted list intersection\
    \ in systems partitioned solely by\n   keyword, since groups can calculate the\
    \ intersection independently\n   over the documents for which they are responsible.\
    \  MLP was overlaid\n   on SkipNet, per Section 3.5.6 [38].  Some initial analyses\
    \ of\n   communications costs and query latencies were provided.\n"
- title: 4.1.3.  Partial Search, Exhaustive Search
  contents:
  - "4.1.3.  Partial Search, Exhaustive Search\n   Much of the research above addresses\
    \ partial keyword search.\n   Daswani, et al. highlighted the open problem of\
    \ efficient,\n   comprehensive keyword search [25].  How can exhaustive searches\
    \ be\n   achieved without flooding queries to every peer in the network?\n   Terpstra,\
    \ Behnel et al. couched the keyword search problem in\n   rendezvous terms: dynamic\
    \ keyword queries need to 'meet' with static\n   document lists [362].  Their\
    \ Bitzipper scheme is partitioned by\n   document.  They improved on full flooding\
    \ by putting document\n   metadata on 2sqrt(n) nodes and forwarding queries through\
    \ only\n   6sqrt(n) nodes.  They reported that Bitzipper nodes need only 1/166th\n\
    \   of the bandwidth of full-flooding Gnutella nodes for an exhaustive\n   search.\
    \  An initial comparison of query load was given.  There was\n   little consideration\
    \ of either static or dynamic resilience; that is,\n   of nodes failing, of documents\
    \ continually changing, or of nodes\n   continually joining and leaving the network.\n"
- title: 4.2.  Information Retrieval
  contents:
  - "4.2.  Information Retrieval\n   The field of Information Retrieval (IR) has matured\
    \ considerably\n   since its inception in the 1950s [363].  A taxonomy for IR\
    \ models has\n   been formalized [262].  It consists of four elements: a\n   representation\
    \ of documents in a collection; a representation of user\n   queries; a framework\
    \ describing relationships between document\n   representations and queries; and\
    \ a ranking function that quantifies\n   an ordering amongst documents for a particular\
    \ query.  Three main\n   issues motivate current IR research -- information relevance,\
    \ query\n   response time, and user interaction with IR systems.  The dominant\
    \ IR\n   trends for searching large text collections are also threefold [262].\n\
    \   The size of collections is increasing dramatically.  More complicated\n  \
    \ search mechanisms are being found to exploit document structure, to\n   accommodate\
    \ heterogeneous document collections, and to deal with\n   document errors.  Compression\
    \ is in favour -- it may be quicker to\n   search compact text or retrieve it\
    \ from external devices.  In a\n   distributed IR system, query processing has\
    \ four parts.  Firstly,\n   particular collections are targeted for the search.\
    \  Secondly,\n   queries are sent to the targeted collections.  Queries are then\n\
    \   evaluated at the individual collections.  Finally, results from the\n   collections\
    \ are collated.\n   So how do P2P networks differ from distributed IR systems?\
    \  Bawa,\n   Manku, et al. presented four differences [62].  They suggested that\
    \ a\n   P2P network is typically larger, with tens or hundreds of thousands\n\
    \   of nodes.  It is usually more dynamic, with node lifetimes measured\n   in\
    \ hours.  They suggested that a P2P network is usually homogeneous,\n   with a\
    \ common resource description language.  It lacks the\n   centralized \"mediators\"\
    \ found in many IR systems that assume\n   responsibility for selecting collections,\
    \ for rewriting queries, and\n   for merging ranked results.  These distinctions\
    \ are generally aligned\n   with the peer characteristics in Section 1.  One might\
    \ add that P2P\n   nodes display more symmetry -- peers are often both information\n\
    \   consumers and producers.  Daswani, Garcia-Molina, et al. pointed out\n   that,\
    \ while there are IR techniques for ranked keyword search at\n   moderate scale,\
    \ research is required so that ranking mechanisms are\n   efficient at the larger\
    \ scale targeted by P2P designs [25].  Joseph\n   and Hoshiai surveyed several\
    \ P2P systems using metadata techniques\n   from the IR toolkit [60].  They described\
    \ an assortment of IR\n   techniques and P2P systems, including various metadata\
    \ formats,\n   retrieval models, bloom filters, DHTs, and trust issues.\n   In\
    \ the ensuing paragraphs, we survey P2P work that has incorporated\n   information\
    \ retrieval models, particularly the Vector Model and the\n   Latent Semantic\
    \ Indexing Model.  We omit the P2P work based on\n   Bayesian models.  Some have\
    \ pointed to such work [60], but made no\n   explicit mention of the model [364].\
    \  One early paper on P2P\n   content-based image retrieval also leveraged the\
    \ Bayesian model\n   [365].  For the former two models, we briefly describe the\
    \ design,\n   then try to highlight robustness aspects.  On robustness, we are\n\
    \   again stymied for lack of prior work.  Indeed, a search across all\n   proceedings\
    \ of the Annual ACM Conference on Research and Development\n   in Information\
    \ Retrieval for the words \"reliable\", \"available\",\n   \"dependable\", or\
    \ \"adaptable\" did not return any results at the time\n   of writing.  In contrast,\
    \ a standard text on distributed database\n   management systems [366] contains\
    \ a whole chapter on reliability.  IR\n   research concentrates on performance\
    \ measures.  Common performance\n   measures include recall, the fraction of the\
    \ relevant documents that\n   has been retrieved and precision, the fraction of\
    \ the retrieved\n   documents that is relevant [262].  Ideally, an IR system would\
    \ have\n   high recall and high precision.  Unfortunately techniques favouring\n\
    \   one often disadvantage the other [363].\n"
- title: 4.2.1.  Vector Model (PlanetP, FASD, eSearch)
  contents:
  - "4.2.1.  Vector Model (PlanetP, FASD, eSearch)\n   The vector model [367] represents\
    \ both documents and queries as term\n   vectors, where a term could be a word\
    \ or a phrase.  If a document or\n   query has a term, the weight of the corresponding\
    \ dimension of the\n   vector is non-zero.  The similarity of the document and\
    \ query vectors\n   gives an indication of how well a document matches a particular\n\
    \   query.\n   The weighting calculation is critical across the retrieval models.\n\
    \   Amongst the numerous proposals for the probabilistic and vector\n   models,\
    \ there are some commonly recurring weighting factors [363].\n   One is term frequency.\
    \  The more a term is repeated in a document,\n   the more important the term\
    \ is.  Another is inverse document\n   frequency.  Terms common to many documents\
    \ give less information\n   about the content of a document.  Then there is document\
    \ length.\n   Larger documents can bias term frequencies, so weightings are\n\
    \   sometimes normalized against document length.  The expression \"TFIDF\n  \
    \ weighting\" refers to the collection of weighting calculations that\n   incorporate\
    \ term frequency and inverse document frequency, not just\n   to one.  Two weighting\
    \ calculations have been particularly dominant\n   -- Okapi [368] and pivoted\
    \ normalization [369].  A distributed\n   version of Google's Pagerank algorithm\
    \ has also been devised for a\n   P2P environment [370].  It allows incremental,\
    \ ongoing Pagerank\n   calculations while documents are inserted and deleted.\n\
    \   A couple of early P2P systems leveraged the vector model.  Building\n   on\
    \ the vector model, PlanetP divided the ranking problem into two\n   steps [215].\
    \  In the first, peers are ranked for the probability that\n   they have matching\
    \ documents.  In the second, higher-priority peers\n   are contacted and the matching\
    \ documents are ranked.  An Inverse Peer\n   Frequency, analogous to the Inverse\
    \ Document Frequency, is used to\n   rank relevant peers.  To further constrain\
    \ the query traffic, PlanetP\n   contacts only the first group of m peers to retrieve\
    \ a relevant set\n   of documents.  In this way, it repeatedly contacts groups\
    \ of m peers\n   until the top k document rankings are stable.  While the PlanetP\n\
    \   designers first quantified recall and precision, they also considered\n  \
    \ reliability.  Each PlanetP peer has a global index with a list of all\n   other\
    \ peers, their IP addresses, and their Bloom filters.  This large\n   volume of\
    \ shared information needs to be maintained.  Klampanos and\n   Jose saw this\
    \ as PlanetP's primary shortcoming [371].  Each Bloom\n   filter summarized the\
    \ set of terms in the local index of each peer.\n   The time to propagate changes,\
    \ be they new documents or peer\n   arrivals/departures, was studied by simulation\
    \ for up to 1000 peers.\n   The reported propagation times were in the hundreds\
    \ of seconds.\n   Design workarounds were required for PlanetP to be viable across\n\
    \   slower dial-up modem connections.  For future work, the authors were\n   considering\
    \ some sort of hierarchy to scale to larger numbers of\n   peers.\n   A second\
    \ early system using the vector model is the Fault-tolerant,\n   Adaptive, Scalable\
    \ Distributed (FASD) search engine [283], which\n   extended the Freenet design\
    \ (Section 2.3) for richer queries.  The\n   original Freenet design could find\
    \ a document based on a globally\n   unique identifier.  Kronfol's design added\
    \ the ability to search, for\n   example, for documents about \"apples AND oranges\
    \ NOT bananas\".  It\n   uses a TFIDF weighting scheme to build a document's term\
    \ vector.\n   Each peer calculates the similarity of the query vector and local\n\
    \   documents and forwards the query to the best downstream peer.  Once\n   the\
    \ best downstream peer returns a result, the second-best peer is\n   tried, and\
    \ so on.  Simulations with 1000 nodes gave an indication of\n   the query path\
    \ lengths in various situations -- when routing queries\n   in a network with\
    \ constant rates of node and document insertion, when\n   bootstrapping the network\
    \ in a \"worst-case\" ring topology, or when\n   failing randomly and specifically\
    \ selected peers.  Kronfol claimed\n   excellent average-case performance -- less\
    \ than 20 hops to retrieve\n   the same top n results as a centralized search\
    \ engine.  There were,\n   however, numerous cases where the worst-case path length\
    \ was several\n   hundred hops in a network of only 1000 nodes.\n   In parallel,\
    \ there have been some P2P designs based on the vector\n   model from the University\
    \ of Rochester -- pSearch [9, 372] and\n   eSearch [373].  The early pSearch paper\
    \ suggested a couple of\n   retrieval models, one of which was the Vector Space\
    \ Model, to search\n   only the nodes likely to have matching documents.  To obtain\n\
    \   approximate global statistics for the TFIDF calculation, a spanning\n   tree\
    \ was constructed across a subset of the peers.  For the m top\n   terms, the\
    \ term-to-document index was inserted into a Content-\n   Addressable Network\
    \ [334].  A variant that mapped terms to document\n   clusters was also suggested.\
    \ eSearch is a hybrid of the partition-\n   by-document and partition-by-term\
    \ approaches (Section 4.1.2) eSearch\n   nodes are primarily partitioned by term.\
    \  Each is responsible for the\n   inverted lists for some top terms.  For each\
    \ document in the inverted\n   list, the node stores the complete term list. \
    \ To reduce the size of\n   the index, the complete term lists for a document\
    \ are only kept on\n   nodes that are responsible for top terms in the document.\
    \  eSearch\n   uses the Okapi term weighting to select top terms.  It relies on\
    \ the\n   Chord DHT [34] to associate terms with nodes storing the inverted\n\
    \   lists.  It also uses automatic query expansion.  This takes the\n   significant\
    \ terms from the top document matches and automatically\n   adds them to the user's\
    \ query to find additional relevant documents.\n   The eSearch performance was\
    \ quantified in terms of search precision,\n   the number of retrieved documents,\
    \ and various load-balancing\n   metrics.  Compared to the more common proposals\
    \ for partitioning by\n   keywords, eSearch consumed 6.8 times the storage space\
    \ to achieve\n   faster search times.\n"
- title: 4.2.2.  Latent Semantic Indexing (pSearch)
  contents:
  - "4.2.2.  Latent Semantic Indexing (pSearch)\n   Another retrieval model used in\
    \ P2P proposals is Latent Semantic\n   Indexing (LSI) [374].  Its key idea is\
    \ to map both the document and\n   query vectors to a concept space with lower\
    \ dimensions.  The starting\n   point is a t*N weighting matrix, where t is the\
    \ total number of\n   indexed terms, N is the total number of documents, and the\
    \ matrix\n   elements could be TFIDF rankings.  Using singular value\n   decomposition,\
    \ this matrix is reduced to a smaller number of\n   dimensions, while retaining\
    \ the more significant term-to-document\n   mappings.  Baeza-Yates and Ribeiro-Neto\
    \ suggested that LSI's value is\n   a novel theoretic framework, but that its\
    \ practical performance\n   advantage for real document collections had yet to\
    \ be proven [262].\n   pSearch incorporated LSI [9].  By placing the indices for\n\
    \   semantically similar documents close in the network, Tang, Xu, et al.\n  \
    \ touted significant bandwidth savings relative to the early full-\n   flooding\
    \ variant of Gnutella [372].  They plotted the number of nodes\n   visited by\
    \ a query.  They also explored the trade-off with accuracy,\n   the percentage\
    \ match between the documents returned by the\n   distributed pSearch algorithm\
    \ and those from a centralized LSI\n   baseline.  In a more recent update to the\
    \ pSearch work, Tang,\n   Dwarkadas, et al. summarized LSI's shortcomings [375].\
    \  Firstly, for\n   large document collections, its retrieval quality is inherently\n\
    \   inferior to Okapi.  Secondly, singular value decomposition consumes\n   excessive\
    \ memory and computation time.  Consequently, the authors\n   used Okapi for searching\
    \ while retaining LSI for indexing.  With\n   Okapi, they selected the next node\
    \ to be searched and selected\n   documents on searched nodes.  With LSI, they\
    \ ensured that similar\n   documents are clustered near each other, thereby optimizing\
    \ the\n   network search costs.  When retrieving a small number of top\n   documents,\
    \ the precision of LSI+Okapi approached that of Okapi.\n   However, if retrieving\
    \ a large number of documents, the LSI+Okapi\n   precision is inferior.  The authors\
    \ want to improve this in future\n   work.\n"
- title: 4.2.3.  Small Worlds
  contents:
  - "4.2.3.  Small Worlds\n   The \"small world\" concept originally described how\
    \ people are\n   interconnected by short chains of acquaintances [376].  Kleinberg\
    \ was\n   struck by the algorithmic lesson of the small world, namely \"that\n\
    \   individuals using local information are collectively very effective\n   at\
    \ constructing short paths between two points in a social network\"\n   [377].\
    \  Small world networks have a small diameter and a large\n   clustering coefficient\
    \ (a large number of connections amongst\n   relevant nodes) [378].\n   The small\
    \ world idea has had a limited impact on peer-to-peer\n   algorithms.  It has\
    \ influenced only a few unstructured [62, 378-380]\n   and structured [344, 381]\
    \ algorithms.  The most promising work on\n   \"small worlds\" in P2P networks\
    \ are those concerned with the\n   information retrieval metrics, precision and\
    \ recall [62, 378, 380].\n"
- title: 5.  Queries
  contents:
  - "5.  Queries\n   Database research suggests directions for P2P research.  Hellerstein\n\
    \   observed that, while work on fast P2P indexes is well underway, P2P\n   query\
    \ optimization remains a promising topic for future research\n   [23].  Kossman\
    \ reviewed the state of the art of distributed query\n   processing, highlighting\
    \ areas for future research: simulation and\n   query optimization for networks\
    \ of tens of thousands of servers and\n   millions of clients; non-relational\
    \ data types (e.g., XML, text, and\n   images); and partial query responses since\
    \ on the Internet, \"failure\n   is the rule rather than the exception\" [19].\
    \  A primary motivation\n   for the P2P system, PIER, was to scale from the largest\
    \ database\n   systems of a few hundred nodes to an Internet environment in which\n\
    \   there are over 160 million nodes [22].  Litwin and Sahri have also\n   considered\
    \ ways to combine distributed hashing, more specifically the\n   Scalable Distributed\
    \ Data Structures, with SQL databases, claiming to\n   be first to implement scalable\
    \ distributed database partitioning\n   [382].  Motivated by the lack of transparent\
    \ distribution in current\n   distributed databases, they measure query execution\
    \ times for\n   Microsoft SQL servers aggregated by means of an SDDS layer.  One\
    \ of\n   their starting assumptions was that it is too challenging to change\n\
    \   the SQL query optimizer.\n   Database research also suggests the approach\
    \ to P2P research.\n   Researchers of database query optimization were divided\
    \ between those\n   looking for optimal solutions in special cases and those using\n\
    \   heuristics to answer all queries [383].  Gribble, et al. cast query\n   optimization\
    \ in terms of the data placement problem, which is to\n   \"distribute data and\
    \ work so the full query workload is answered with\n   lowest cost under the existing\
    \ bandwidth and resource constraints\"\n   [250].  They pointed out that even\
    \ the static version of this problem\n   is NP-complete in P2P networks.  Consequently,\
    \ research on massive,\n   dynamic P2P networks will likely progress using both\
    \ strategies of\n   early database research - heuristics and special-case optimizations.\n\
    \   If P2P networks are going to be adaptable, if they are to support a\n   wide\
    \ range of applications, then they need to accommodate many query\n   types [72].\
    \  Up to this point, we have reviewed queries for keys\n   (Section 3) and keywords\
    \ (Sections 4.1. and 4.2).  Unfortunately, a\n   major shortcoming of the DHTs\
    \ in Section 3.5 is that they primarily\n   support exact-match, single-key queries.\
    \  Skip Graphs support range\n   and prefix queries, but not aggregation queries.\
    \  Here we probe below\n   the language syntax to identify the open research issues\
    \ associated\n   with more expressive P2P queries [25].  Triantafillou and Pitoura\n\
    \   observed the disparate P2P designs for different types of queries and\n  \
    \ so outlined a unifying framework [76].  To classify queries, they\n   considered\
    \ the number of relations (single or multiple), the number\n   of attributes (single\
    \ or multiple), and the type of query operator.\n   They described numerous operators:\
    \  equality, range, join, and\n   \"special functions\".  The latter referred\
    \ to aggregation (like sum,\n   count, average, minimum, and maximum), grouping\
    \ and ordering.  The\n   following sections approximately fit their taxonomy --\
    \ range queries,\n   multi-attribute queries, join queries and aggregation queries.\
    \  There\n   has been some initial P2P work on other query types -- continuous\n\
    \   queries [20, 22, 73], recursive queries [22, 74], and adaptive\n   queries\
    \ [23, 75].  For these, we defer to the primary references.\n"
- title: 5.1.  Range Queries
  contents:
  - "5.1.  Range Queries\n   The support of efficient range predicates in P2P networks\
    \ was\n   identified as an important open research issue by Huebsch, et al.\n\
    \   [22].  Range partitioning has been important in parallel databases to\n  \
    \ improve performance, so that a transaction commonly needs data from\n   only\
    \ one disk or node [22].  One type of range search, longest prefix\n   match,\
    \ is important because of its prevalence in routing schemes for\n   voice and\
    \ data networks alike.  In other applications, users may pose\n   broad, inexact\
    \ queries, even though they require only a small number\n   of responses.  Consequently,\
    \ techniques to locate similar ranges are\n   also important [77].  Various proposals\
    \ for range searches over P2P\n   networks are summarized in Figure 4.  Since\
    \ the Scalable Distributed\n   Data Structure (SDDS) has been an important influence\
    \ on contemporary\n   Distributed Hash Tables (DHTs) [49-51], we also include\
    \ ongoing work\n   on SDDS range searches.\n   PEER-TO-PEER (P2P)\n   Locality\
    \ Sensitive Hashing (Chord) [77]\n   Prefix Hash Trees (unspecified DHT) [78,\
    \ 79]\n   Space Filling Curves (CAN) [80]\n   Space Filling Curves (Chord) [81]\n\
    \   Quadtrees (Chord) [82]\n   Skip Graphs [38, 41, 83, 100]\n   Mercury [84]\n\
    \   P-Grid [85, 86]\n   SCALABLE DISTRIBUTED DATA STRUCTURES (SDDS)\n   RP*  \
    \ [87, 88]\n       Figure 4: Solutions for Range Queries on P2P and SDDS Indexes\n\
    \   The papers on P2P range search can be divided into those that rely on\n  \
    \ an underlying DHT (the first five entries in Figure 4) and those that\n   do\
    \ not (the subsequent three entries).  Bharambe, Agrawal, et al.\n   argued that\
    \ DHTs are inherently ill-suited to range queries [84].\n   The very feature that\
    \ makes for their good load balancing properties,\n   randomized hash functions,\
    \ works against range queries.  One possible\n   solution would be to hash ranges,\
    \ but this can require a priori\n   partitioning.  If the partitions are too large,\
    \ partitions risk\n   overload.  If they are too small, there may be too many\
    \ hops.\n   Despite these potential shortcomings, there have been several range\n\
    \   query proposals based on DHTs.  If hashing ranges to nodes, it is\n   entirely\
    \ possible that overlapping ranges map to different nodes.\n   Gupta, Agrawal,\
    \ et al. rely on locality sensitive hashing to ensure\n   that, with high probability,\
    \ similar ranges are mapped to the same\n   node [77].  They propose one particular\
    \ family of locality sensitive\n   hash functions, called min-wise independent\
    \ permutations.  The number\n   of partitions per node and the path length were\
    \ plotted against the\n   total numbers of peers in the system.  For a network\
    \ with 1000 nodes,\n   the hop count distribution was very similar to that of\
    \ the exact-\n   matching Chord scheme.  Was it load-balanced?  For the same network\n\
    \   with 50,000 partitions, there were over two orders of magnitude\n   variation\
    \ in the number of partitions at each node (first and\n   ninety-ninth percentiles).\
    \  The Prefix Hash Tree is a trie in which\n   prefixes are hashed onto any DHT.\
    \  The preliminary analysis suggests\n   efficient doubly logarithmic lookup,\
    \ balanced load, and fault\n   resilience [78, 79].  Andrzejak and Xu were perhaps\
    \ the first to\n   propose a mapping from ranges to DHTs [80].  They use one particular\n\
    \   Space Filling Curve, the Hilbert curve, over a Content Addressable\n   Network\
    \ (CAN) construction (Section 3.5.3).  They maintain two\n   properties: nearby\
    \ ranges map to nearby CAN zones; if a range is\n   split into two sub-ranges,\
    \ then the zones of the sub-ranges partition\n   the zone of the primary range.\
    \  They plot path length and load proxy\n   measures (the total number of messages\
    \ and nodes visited) for three\n   algorithms to propagate range queries: brute\
    \ force, controlled\n   flooding, and directed controlled flooding.  Schmidt and\
    \ Parashar\n   also advocated Space Filling Curves to achieve range queries over\
    \ a\n   DHT [81].  However, they point out that, while Andrzejak and Xu use\n\
    \   an inverse Space Filling Curve to map a one-dimensional space to d-\n   dimensional\
    \ zones, they map a d-dimensional space back to a one-\n   dimensional index.\
    \  Such a construction gives the ability to search\n   across multiple attributes\
    \ (Section 5.2).  Tanin, Harwood, et al.\n   suggested quadtrees over Chord [82],\
    \ and gave preliminary simulation\n   results for query response times.\n   Because\
    \ DHTs are naturally constrained to exact-match, single-key\n   queries, researchers\
    \ have considered other P2P indexes for range\n   searches.  Several were based\
    \ on Skip Graphs [38, 41], which, unlike\n   the DHTs, do not necessitate randomizing\
    \ hash functions and are\n   therefore capable of range searches.  Unfortunately,\
    \ they are not\n   load balanced [83].  For example, in SkipNet [48], hashing\
    \ was added\n   to balance the load -- the Skip Graph could support range searches\
    \ or\n   load balancing, but not both.  One solution for load-balancing relies\n\
    \   on an increased number of 'virtual' servers [168] but, in their\n   search\
    \ for a system that can both search for ranges and balance\n   loads, Bharambe,\
    \ Agrawal, et al. rejected the idea [84].  The virtual\n   servers work assumed\
    \ load imbalance stems from hashing; that is, by\n   skewed data insertions and\
    \ deletions.  In some situations, the\n   imbalance is triggered by a skewed query\
    \ load.  In such\n   circumstances, additional virtual servers can increase the\
    \ number of\n   routing hops and increase the number of pointers that a Skip Graph\n\
    \   needs to maintain.  Ganesan, Bawa, et al. devised an alternate method\n  \
    \ to balance load [83].  They proposed two Skip Graphs, one to index\n   the data\
    \ itself and the other to track load at each node in the\n   system.  Each node\
    \ is able to determine the load on its neighbours\n   and the most (least) loaded\
    \ nodes in the system.  They devise two\n   algorithms: NBRADJUST balances load\
    \ on neighbouring nodes; using\n   REORDER, empty nodes can take over some of\
    \ the tuples on heavily\n   loaded nodes.  Their simulations focus on skewed storage\
    \ load, rather\n   than on skewed query loads, but they surmise that the same\
    \ approach\n   could be used for the latter.\n   Other proposals for range queries\
    \ avoid both the DHT and the Skip\n   Graph.  Bharambe, Agrawal, et al. distinguish\
    \ their Mercury design by\n   its support for multi-attribute range queries and\
    \ its explicit load\n   balancing [84].  In Mercury, nodes are grouped into routing\
    \ hubs,\n   each of which is responsible for various query attributes.  While\
    \ it\n   does not use hashing, Mercury is loosely similar to the DHT\n   approaches:\
    \ nodes within hubs are arranged into rings, like Chord\n   [34]; for efficient\
    \ routing within hubs, k long-distance links are\n   used, like Symphony [381].\
    \  Range lookups require O(((log n)^2)/k)\n   hops.  Random sampling is used to\
    \ estimate the average load on nodes\n   and to find the parts of the overlay\
    \ that are lightly loaded.\n   Whereas Symphony assumed that nodes are responsible\
    \ for ranges of\n   approximately equal size, Mercury's random sampling can determine\
    \ the\n   location of the start of the range, even for non-uniform ranges [84].\n\
    \   P-Grid [42] does provide for range queries, by virtue of the key\n   ordering\
    \ in its tree structures.  Ganesan, Bawa, et al. critiqued its\n   capabilities\
    \ [83]: P-Grid assumes fixed-capacity nodes; there was no\n   formal characterization\
    \ of imbalance ratios or balancing costs; every\n   P-Grid periodically contacts\
    \ other nodes for load information.\n   The work on Scalable Distributed Data\
    \ Structures (SDDSs) has\n   progressed in parallel with P2P work and has addressed\
    \ range queries.\n   Like the DHTs above, the early SDDS Linear Hashing (LH*)\
    \ schemes were\n   not order-preserving [52].  To facilitate range queries, Litwin,\n\
    \   Niemat, et al. devised a Range Parititioning variant, RP* [87].\n   There\
    \ are options to dispense with the index, to add indexes to\n   clients, and to\
    \ add them to servers.  In the variant without an\n   index, every query is issued\
    \ via multicasting.  The other variants\n   also use some multicasting.  The initial\
    \ RP* paper suggested\n   scalability to thousands of sites, but a more recent\
    \ RP* simulation\n   was capped at 140 servers [88].  In that work, Tsangou, Ndiaye,\
    \ et\n   al. investigated TCP and UDP mechanisms by which servers could return\n\
    \   range query results to clients.  The primary metrics were search and\n   response\
    \ times.  Amongst the commercial parallel database management\n   systems, they\
    \ reported that the largest seems only to scale to 32\n   servers (SQL Server\
    \ 2000).  For future work, they planned to explore\n   aggregation of query results,\
    \ rather than establishing a connection\n   between the client and every single\
    \ server with a response.\n   All in all, it seems there are numerous open research\
    \ questions on\n   P2P range queries.  How realistic is the maintenance of global\
    \ load\n   statistics considering the scale and dynamism of P2P networks?\n  \
    \ Simulations at larger scales are required.  Proposals should take\n   into account\
    \ both the storage load (insert and delete messages) and\n   the query load (lookup\
    \ messages).  Simplifying assumptions need to be\n   attacked.  For example, how\
    \ well do the above solutions work in\n   networks with heterogeneous nodes, where\
    \ the maximum message loads\n   and index sizes are node-dependent?\n"
- title: 5.2.  Multi-Attribute Queries
  contents:
  - "5.2.  Multi-Attribute Queries\n   There has been some work on multi-attribute\
    \ P2P queries.  As late as\n   September 2003, it was suggested that there has\
    \ not been an efficient\n   solution [76].\n   Again, an early significant work\
    \ on multi-attribute queries over\n   aggregated commodity nodes germinated amongst\
    \ SDDSs.  k-RP* [89] uses\n   the multi-dimensional binary search tree (or k-d\
    \ tree, where k\n   indicates the number of dimensions of the search index) [384].\
    \  It\n   builds on the RP* work from the previous section and inherits their\n\
    \   capabilities for range search and partial match.  Like the other\n   SDDSs,\
    \ k-RP* indexes can fit into RAM for very fast lookup.  For\n   future work, Litwin\
    \ and Neimat suggested a) a formal analysis of the\n   range search termination\
    \ algorithm and the k-d paging algorithm, b) a\n   comparison with other multi-attribute\
    \ data structures (quad-trees and\n   R-trees) and c) exploration of query processing,\
    \ concurrency control,\n   and transaction management for k-RP* files [89].  On\
    \ the latter\n   point, others have considered transactions to be inconsequential\
    \ to\n   the core problem of supporting more complex queries in P2P networks\n\
    \   [72].\n   In architecting their secure wide-area Service Discovery Service\n\
    \   (SDS), Hodes, Czerwinski, et al. considered three possible designs\n   for\
    \ multi-criteria search -- Centralization, Mapping and Flooding\n   [90].  These\
    \ correlate to the index classifications of Section 2 --\n   Central, Distributed,\
    \ and Local.  They discounted the centralized,\n   Napster-like index for its\
    \ risk of a single point of failure.  They\n   considered the hash-based mappings\
    \ of Section 3, but concluded that\n   it would not be possible to adequately\
    \ partition data.  A document\n   satisfying many criteria would be wastefully\
    \ stored in many\n   partitions.  They rejected full flooding for its lack of\
    \ scalability.\n   Instead, they devised a query filtering technique, reminiscent\
    \ of\n   Gnutella's query routing protocol (Section 4.1).  Nodes push\n   proactive\
    \ summaries of their data rather than waiting for a query.\n   Summaries are aggregated\
    \ and stored throughout a server hierarchy, to\n   guide subsequent queries. \
    \ Some initial prototype measurements were\n   provided for total load on the\
    \ system, but not for load distribution.\n   They put several issues forward for\
    \ future work.  The indexing needs\n   to be flexible to change according to query\
    \ and storage workloads.  A\n   mesh topology might improve on their hierarchic\
    \ topology since query\n   misses would not propagate to root servers.  The choice\
    \ is analogous\n   to BGP meshes and DNS trees.\n   More recently, Cai, Frank,\
    \ et al. devised the Multi-Attribute\n   Addressable Network (MAAN) [91].  They\
    \ built on Chord to provide both\n   multi-attribute and range queries, claiming\
    \ to be the first to\n   service both query types in a structured P2P system.\
    \  Each MAAN node\n   has O(log n) neighbours, where N is the number of nodes.\
    \  MAAN\n   multi-attribute range queries require O(log n+N*Smin) hops, where\n\
    \   Smin is the minimum range selectivity across all attributes.\n   Selectivity\
    \ is the ratio of the query range to the entire identifier\n   range.  The paper\
    \ assumed that a locality preserving hash function\n   would ensure balanced load.\
    \  Per Section 5.1, the arguments by\n   Bharambe, Agrawal, et al. have highlighted\
    \ the shortcomings of this\n   assumption [84].  MAAN required that the schema\
    \ must be fixed and\n   known in advance -- adaptable schemas were recommended\
    \ for subsequent\n   attention.  The authors also acknowledged that there is a\
    \ selectivity\n   breakpoint at which full flooding becomes more efficient than\
    \ their\n   scheme.  This begs for a query resolution algorithm that adapts to\n\
    \   the profile of queries.  Cai and Frank followed up with RDFPeers\n   [55].\
    \  They differentiate their work from other RDF proposals by a)\n   guaranteeing\
    \ to find query results if they exist and b) removing the\n   requirement of prior\
    \ definition of a fixed schema.  They hashed\n   <subject, predicate, object>\
    \ triples onto the MAAN and reported\n   routing hop metrics for their implementation.\
    \  Load imbalance across\n   nodes was reduced to less than one order of magnitude,\
    \ but the\n   specific measure was the number of triples stored per node - skewed\n\
    \   query loads were not considered.  They plan to improve load balancing\n  \
    \ with the virtual servers of Section 5.1 [168].\n"
- title: 5.3.  Join Queries
  contents:
  - "5.3.  Join Queries\n   Two research teams have done some initial work on P2P\
    \ join\n   operations.  Harren, Hellerstein, et al. initially described a\n  \
    \ three-layer architecture -- storage, DHT and query processing.  They\n   implemented\
    \ the join operation by modifying an existing Content\n   Addressable Network\
    \ (CAN) simulator, reporting \"significant hot-spots\n   in all dimensions: storage,\
    \ processing, and routing\" [72].  They\n   progressed their design more recently\
    \ in the context of PIER, a\n   distributed query engine based on CAN [22, 385].\
    \  They implemented\n   two equi-join algorithms.  In their design, a key is constructed\
    \ from\n   the \"namespace\" and the \"resource ID\".  There is a namespace for\
    \ each\n   relation and the resource ID is the primary key for base tuples in\n\
    \   that relation.  Queries are multicast to all nodes in the two\n   namespaces\
    \ (relations) to be joined.  Their first algorithm is a DHT\n   version of the\
    \ symmetric hash join.  Each node in the two namespaces\n   finds the relevant\
    \ tuples and hashes them to a new query namespace.\n   The resource ID in the\
    \ new namespace is the concatenation of join\n   attributes.  In the second algorithm,\
    \ called \"fetch matches\", one of\n   the relations is already hashed on the\
    \ join attributes.  Each node in\n   the second namespace finds tuples matching\
    \ the query and retrieves\n   the corresponding tuples from the first relation.\
    \  They leveraged two\n   other techniques, namely the symmetric semi-join rewrite\
    \ and the\n   Bloom filter rewrite, to reduce the high bandwidth overheads of\
    \ the\n   symmetric hash join.  For an overlay of 10,000 nodes, they simulated\n\
    \   the delay to retrieve tuples and the aggregate network bandwidth for\n   these\
    \ four schemes.  The initial prototype was on a cluster of 64\n   PCs, but it\
    \ has more recently been expanded to PlanetLab.\n   Triantafillou and Pitoura\
    \ considered multicasting to large numbers of\n   peers to be inefficient [76].\
    \  They therefore allocated a limited\n   number of special peers, called range\
    \ guards.  The domain of the join\n   attributes was divided, one partition per\
    \ range guard.  Join queries\n   were sent only to range guards, where the query\
    \ was executed.\n   Efficient selection of range guards and a quantitive evaluation\
    \ of\n   their proposal were left for future work.\n"
- title: 5.4.  Aggregation Queries
  contents:
  - "5.4.  Aggregation Queries\n   Aggregation queries invariable rely on tree-structures\
    \ to combine\n   results from a large number of nodes.  Examples of aggregation\n\
    \   queries are Count, Sum, Maximum, Minimum, Average, Median, and Top-K\n   [92,\
    \ 386, 387].  Figure 5 summarizes the tree and query\n   characteristics that\
    \ affect dependability.\n   Tree type: Doesn't use DHT [92], use internal DHT\
    \ trees [95], use\n      independent trees on top of DHTs\n   Tree repair: Periodic\
    \ [93], exceptional [32]\n   Tree count: One per key, one per overlay [56]\n \
    \  Tree flexibility: Static [92], dynamic\n   Query interface: install, update,\
    \ probe [98]\n   Query distribution: multicast [98], gossip [92]\n   Query applications:\
    \ leader election, voting, resource location,\n      object placement and error\
    \ recovery [98, 388]\n   Query semantics\n      Consistency: Best-effort, eventual\
    \ [92], snapshot / interval /\n         single-site validity [99]\n      Timeliness\
    \ [388]\n      Lifetime: Continuous [97, 99], single-shot\n      No. attributes:\
    \ Single, multiple\n   Query types: Count, sum, maximum, minimum, average, median,\
    \ top k\n      [92, 386, 387]\n          Figure 5: Aggregation Trees and Queries\
    \ in P2P Networks\n   Key: Astrolabe [92]; Cone [93]; Distributed Approximative\
    \ System\n   Information Service (DASIS) [95]; Scalable Distributed Information\n\
    \   Management System (SDIMS) [98]; Self-Organized Metadata Overlay\n   (SOMO)\
    \ [56]; Wildfire [99]; Willow [32]; Newscast [97]\n   The fundamental design choices\
    \ for aggregation trees relate to how\n   the overlay uses DHTs, how it repairs\
    \ itself when there are failures,\n   how many aggregation trees there are, and\
    \ whether the tree is static\n   or dynamic (Figure 5).  Astrolabe is one of the\
    \ most influential P2P\n   designs included in Figure 5, yet it makes no use of\
    \ DHTs [92].\n   Other designs make use of the internal trees of Plaxton-like\
    \ DHTs.\n   Others build independent tree structures on top of DHTs.  Most of\
    \ the\n   designs repair the aggregation tree with periodic mechanisms similar\n\
    \   to those used in the DHTs themselves.  Willow is an exception [32].\n   It\
    \ uses a Tree Maintenance Protocol to \"zip\" disjoint aggregation\n   trees together\
    \ when there are major failures.  Yalagandula and Dahlin\n   found reconfigurations\
    \ at the aggregation layer to be costly,\n   suggesting more research on techniques\
    \ to reduce the cost and\n   frequency of such reconfigurations [98].  Many of\
    \ the designs use\n   multiple aggregation trees, each rooted at the DHT node\
    \ responsible\n   for the aggregation attribute.  On the other hand, the Self-Organized\n\
    \   Metadata Overlay [56] uses a single tree and is vulnerable to a\n   single\
    \ point of failure at its root.\n   At the time of writing, researchers have just\
    \ begun exploring the\n   performance of queries in the presence of churn.  Most\
    \ designs are\n   for best-effort queries.  Bawa, et al. devised a better consistency\n\
    \   model, called Single-Site Validity [99] to qualify the accuracy of\n   results\
    \ when there is churn.  Its price was a five-fold increase in\n   the message\
    \ load, when compared to an efficient but best-effort\n   Spanning Tree.  Gossip\
    \ mechanisms are resilient to churn, but they\n   delay aggregation results and\
    \ incur high message cost for aggregation\n   attributes with small read-to-write\
    \ ratios.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   An initial list of references to research on\
    \ P2P security is given in\n   Figure 1, Section 1.  This document addresses P2P\
    \ search.  P2P\n   storage, security, and applications are recommended for further\n\
    \   investigation in Section 8.\n"
- title: 7.  Conclusions
  contents:
  - "7.  Conclusions\n   Research on peer-to-peer networks can be divided into four\
    \ categories\n   -- search, storage, security and applications.  This critical\
    \ survey\n   has focused on search methods.  While P2P networks have been\n  \
    \ classified by the existence of an index (structured or unstructured)\n   or\
    \ the location of the index (local, centralized, and distributed),\n   this survey\
    \ has shown that most have evolved to have some structure,\n   whether it is indexes\
    \ at superpeers or indexes defined by DHT\n   algorithms.  As for location, the\
    \ distributed index is most common.\n   The survey has characterized indexes as\
    \ semantic and semantic-free.\n   It has also critiqued P2P work on major query\
    \ types.  While much of\n   it addresses work from 2000 or later, we have traced\
    \ important\n   building blocks from the 1990s.\n   The initial motivation in\
    \ this survey was to answer the question,\n   \"How robust are P2P search networks?\"\
    \  The question is key to the\n   deployment of P2P technology.  Balakrishnan,\
    \ Kaashoek, et al. argued\n   that the P2P architecture is appealing: the startup\
    \ and growth\n   barriers are low; they can aggregate enormous storage and processing\n\
    \   resources; \"the decentralized and distributed nature of P2P systems\n   gives\
    \ them the potential to be robust to faults or intentional\n   attacks\" [18].\
    \  If P2P is to be a disruptive technology in\n   applications other than casual\
    \ file sharing, then robustness needs to\n   be practically verified [20].\n \
    \  The best comparative research on P2P dependability has been done in\n   the\
    \ context of Distributed Hash Tables (DHTs) [291].  The entire body\n   of DHT\
    \ research can be distilled to four main observations about\n   dependability\
    \ (Section 3.2).  Firstly, static dependability\n   comparisons show that no O(log\
    \ n) DHT geometry is significantly more\n   dependable than the other O(log n)\
    \ geometries.  Secondly, dynamic\n   dependability comparisons show that DHT dependability\
    \ is sensitive to\n   the underlying topology maintenance algorithms (Figure 2).\
    \  Thirdly,\n   most DHTs use O(log n) geometries to suit ephemeral nodes, whereas\n\
    \   the O(1) hop DHTs suit stable nodes - they deserve more research\n   attention.\
    \  Fourthly, although not yet a mature science, the study of\n   DHT dependability\
    \ is helped by recent simulation tools that support\n   multiple DHTs [299].\n\
    \   We make the following four suggestions for future P2P research:\n   1) Complete\
    \ the companion P2P surveys for storage, security, and\n      applications.  A\
    \ rough outline has been suggested in Figure 1,\n      along with references.\
    \  The need for such surveys was highlighted\n      within the peer-to-peer research\
    \ group of the Internet Research\n      Task Force (IRTF) [17].\n   2) P2P indexes\
    \ are maturing.  P2P queries are embryonic.  Work on\n      more expressive queries\
    \ over P2P indexes started to gain momentum\n      in 2003, but remains fraught\
    \ with efficiency and load issues.\n   3) Isolate the low-level mechanisms affecting\
    \ robustness.  There is\n      limited value in comparing robustness of DHT geometries\
    \ (like\n      rings versus de Bruijn graphs), when robustness is highly\n   \
    \   sensitive to underlying topology maintenance algorithms (Figure\n      2).\n\
    \   4) Build consensus on robustness metrics and their acceptable ranges.\n  \
    \    This paper has teased out numerous measures that impinge on\n      robustness,\
    \ for example, the median query path length for a\n      failure of x% of nodes,\
    \ bisection width, path overlap, the number\n      of alternatives available for\
    \ the next hop, lookup latency,\n      average live bandwidth (bytes/node/sec),\
    \ successful routing rates,\n      the number of timeouts (caused by a finger\
    \ pointing to a departed\n      node), lookup failure rates (caused by nodes that\
    \ temporarily\n      point to the wrong successor during churn), and clustering\n\
    \      measures (edge expansion and node expansion).  Application-level\n    \
    \  robustness metrics need to drive a consistent assessment of the\n      underlying\
    \ search mechanics.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   This document was adapted from a paper in Elsevier's\
    \ Computer\n   Networks:\n      J. Risson & T. Moors, Survey of Research towards\
    \ Robust Peer-to-\n      Peer Networks: Search Methods, Computer Networks 51(7)2007.\n\
    \   We thank Bill Yeager, Ali Ghodsi, and several anonymous reviewers for\n  \
    \ thorough comments that significantly improved the quality of earlier\n   versions\
    \ of this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Informative References
  contents:
  - "9.1.  Informative References\n   [1]   M. Roussopoulos, M. Baker, D. Rosenthal,\
    \ T. Guili, P. Maniatis,\n         and J. Mogul, 2 P2P of Not 2 P2P?, The 3rd\
    \ Int'l Workshop on\n         Peer-to-Peer Systems, February 26-27 2004.\n   [2]\
    \   A. Rowstron and P. Druschel, Pastry:  Scalable, distributed\n         object\
    \ location and routing for large-scale peer-to-peer\n         systems, IFIP/ACM\
    \ Middleware 2001, Nov 2001.\n   [3]   B. Yeager and B. Bhattacharjee, Peer-to-Peer\
    \ Research Group\n         Charter, http://www.irtf.org/charters/p2prg.html (2003)\n\
    \   [4]   T. Klingberg and R. Manfredi, Gnutella 0.6, (2002)\n   [5]   I. Clarke,\
    \ A Distributed Decentralised Information Storage and\n         Retrieval System,\
    \ Undergraduate Thesis, 1999.\n   [6]   B. Zhao, J. Kubiatowicz, and A. Joseph,\
    \ Tapestry:  an\n         infrastructure for fault-tolerant wide-area location\
    \ and\n         routing, Report No. UCB/CSD-01-1141 2001.\n   [7]   I. Stoica,\
    \ R. Morris, D. Liben-Nowell, D. Karger, M. Kaashoek,\n         F. Dabek, and\
    \ H. Balakrishnan, Chord:  A scalable peer-to-peer\n         lookup service for\
    \ internet applications, Proc.  ACM SIGCOMM\n         2001 2001, pp. 149-160.\n\
    \   [8]   S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker,\n   \
    \      A scalable content-addressable network, Proc. of the conf. on\n       \
    \  Applications, technologies, architectures and protocols for\n         computer\
    \ communications, August 27-31 2001, pp. 161-172.\n   [9]   C. Tang, Z. Xu, and\
    \ M. Mahalingam, pSearch: information\n         retrieval in structured overlays,\
    \ First Workshop on Hot Topics\n         in Networks. Also Computer Communication\
    \ Review, Volume 33,\n         Number 1, January 2003, Oct 28-29 2002.\n   [10]\
    \  W. Nejdl, S. Decker, and W. Siberski, Edutella Project, RDF-\n         based\
    \ Metadata Infrastructure for P2P Applications,\n         http://edutella.jxta.org/\
    \ (2003)\n   [11]  K. Aberer and M. Hauswirth, Peer-to-peer information systems:\n\
    \         concepts and models, state-of-the-art, and future systems, ACM\n   \
    \      SIGSOFT Software Engineering Notes, Proc. 8th European software\n     \
    \    engineering conference held jointly with 9th ACM SIGSOFT\n         international\
    \ symposium on foundations of software engineering\n         26 (5) (2001)\n \
    \  [12]  L. Zhou and R. van Renesse, P6P: a peer-to-peer approach to\n       \
    \  internet infrastructure, The 3rd Int'l Workshop on Peer-to-Peer\n         Systems,\
    \ February 26-27 2004.\n   [13]  Citeseer, Citeseer Scientific Literature Digital\
    \ Library,\n         http://citeseer.ist.psu.edu/ (2004)\n   [14]  D. Milojicic,\
    \ V. Kalogeraki, R. Lukose, K. Nagaraja, J. Pruyne,\n         B. Richard, S. Rollins,\
    \ and Z. Xu, Peer-to-Peer Computing, HP\n         Technical Report, HPL-2002-57\
    \ 2002.\n   [15]  K. Aberer and M. Hauswirth, An overview on peer-to-peer\n  \
    \       information systems, Workshop on Distributed Data and\n         Structures\
    \ WDAS-2002 2002.\n   [16]  F. DePaoli and L. Mariani, Dependability in Peer-to-Peer\n\
    \         Systems, IEEE Internet Computing 8 (4) (2004) 54-61.\n   [17]  B. Yeager,\
    \ Proposed research tracks, Email to the Internet\n         Research Task Force\
    \ IRTF P2P Research Group, Nov 10 2003.\n   [18]  H. Balakrishnan, M. F. Kaashoek,\
    \ D. Karger, R. Morris, and I.\n         Stoica, Looking up data in P2P systems,\
    \ Communications of the\n         ACM 46 (2) (2003) 43-48.\n   [19]  D. Kossmann,\
    \ The state of the art in distributed query\n         processing, ACM Computing\
    \ Surveys 32 (4) (2000) 422-469.\n   [20]  B. Gedik and L. Liu, Reliable peer-to-peer\
    \ information\n         monitoring through replication, Proc. 22nd Int'l Symp.\
    \ on\n         Reliable Distributed Systems, 6-8 Oct 2003, pp. 56-65.\n   [21]\
    \  S.-M. Shi, Y. Guangwen, D. Wang, J. Yu, S. Qu, and M. Chen,\n         Making\
    \ peer-to-peer keyword searching feasible using multi-\n         level partitioning,\
    \ The 3rd Int'l Workshop on Peer-to-Peer\n         Systems, February 26-27 2004.\n\
    \   [22]  R. Huebsch, J. M. Hellerstein, N. Lanham, B. T. Loo, S.\n         Shenker,\
    \ and I. Stoica, Querying the Internet with PIER, Proc.\n         29th Int'l Conf.\
    \ on Very Large Databases VLDB'03, September\n         2003.\n   [23]  J. M. Hellerstein,\
    \ Toward network data independence, ACM SIGMOD\n         Record 32 (3) (2003)\
    \ 34-40.\n   [24]  K. Gummadi, R. Gummadi, S. Gribble, S. Ratnasamy, S. Shenker,\n\
    \         and I. Stoica, The impact of DHT routing geometry on resilience\n  \
    \       and proximity, Proc. 2003 conference on Applications,\n         Technologies,\
    \ Architectures and Protocols for Computer\n         Communications 2003, pp.\
    \ 381-394.\n   [25]  N. Daswani, H. Garcia-Molina, and B. Yang, Open Problems\
    \ in\n         Data- sharing Peer-to-peer Systems, The 9th Int'l Conf. on\n  \
    \       Database Theory (ICDT 2003), Siena, Italy, 8-10 January (2003)\n   [26]\
    \  B. Cooper and H. Garcia-Molina, Studying search networks with\n         SIL,\
    \ Second Int'l Workshop on Peer-to-Peer Systems IPTPS 03,\n         20- 21 February\
    \ 2003.\n   [27]  M. Bawa, Q. Sun, P. Vinograd, B. Yang, B. Cooper, A. Crespo,\
    \ N.\n         Daswani, P. Ganesan, H. Garcia-Molina, S. Kamvar, S. Marti, and\n\
    \         M. Schlossed, Peer-to-peer research at Stanford, ACM SIGMOD\n      \
    \   Record 32 (3) (2003) 23-28.\n   [28]  B. Yang and H. Garcia-Molina, Improving\
    \ search in peer-to-peer\n         networks, Proc. 22nd IEEE Int'l Conf. on Distributed\
    \ Computing\n         Systems, July 2002.\n   [29]  B. Yang and H. Garcia-Molina,\
    \ Efficient search in peer-to-peer\n         networks, Proc. 22nd Int'l Conf.\
    \ on Distributed Computing\n         Systems, July 2-5 2002.\n   [30]  C. Plaxton,\
    \ R. Rajaraman, and A. Richa, Accessing nearby copies\n         of replicated\
    \ objects in a distributed environment, ACM Symp.\n         on Parallel Algorithms\
    \ and Architectures (1997)\n   [31]  B. Zhao, L. Huang, J. Stribling, S. Rhea,\
    \ A. Joseph, and J.\n         Kubiatowicz, Tapestry: A Resilient Global-Scale\
    \ overlay for\n         Service Deployment, IEEE Journal on Selected Areas in\n\
    \         Communications 22 (1) (2004) 41-53.\n   [32]  R. van Renesse and A.\
    \ Bozdog, Willow: DHT, aggregation and\n         publish/subscribe in one protocol,\
    \ The 3rd Int'l Workshop on\n         Peer-to-Peer Systems, February 26-27 2004.\n\
    \   [33]  P. Ganesan, G. Krishna, and H. Garcia-Molina, Canon in G Major:\n  \
    \       Designing DHTs with Hierarchical Structure, Proc. Int'l Conf.\n      \
    \   on Distributed Computing Systems ICDCS 2004 2004.\n   [34]  I. Stoica, R.\
    \ Morris, D. Liben-Nowell, D. Karger, M. Kaashoek,\n         F. Dabek, and H.\
    \ Balakrishnan, Chord:  a scalable peer-to-peer\n         lookup protocol for\
    \ Internet applications, IEEE/ACM Trans. on\n         Networking 11 (1) (2003)\
    \ 17-32.\n   [35]  S. Rhea, T. Roscoe, and J. Kubiatowicz, Structured Peer-to-Peer\n\
    \         Overlays Need Application-Driven Benchmarks, Proc. 2nd Int'l\n     \
    \    Workshop on Peer-to-Peer Systems IPTPS'03, February 20-21 2003.\n   [36]\
    \  D. Loguinov, A. Kumar, and S. Ganesh, Graph-theoretic analysis\n         of\
    \ structured peer-to-peer systems:  routing distances and\n         fault resilience,\
    \ Proc. 2003 conference on Applications,\n         Technologies, Architectures\
    \ and Protocols for Computer\n         Communications, August 25-29 2003, pp.\
    \ 395-406.\n   [37]  F. Kaashoek and D. Karger, Koorde:  A simple degree-optimal\n\
    \         hash table, Second Int'l Workshop on Peer-to-Peer Systems\n        \
    \ IPTPS'03, 20-21 February 2003.\n   [38]  N. Harvey, M. B. Jones, S. Saroiu,\
    \ M. Theimer, and A. Wolman,\n         SkipNet: A Scalable Overlay Network with\
    \ Practical Locality\n         Properties, Proc. Fourth USENIX Symp. on Internet\
    \ Technologies\n         and Systems USITS'03, March 2003.\n   [39]  I. Gupta,\
    \ K. Birman, P. Linga, A. Demers, and R. Van Renesse,\n         Kelips:  Building\
    \ an efficient and stable P2P DHT through\n         increased memory and background\
    \ overhead, Second Int'l Workshop\n         on Peer-to-Peer Systems IPTPS 03,\
    \ Feb 20-21 2003.\n   [40]  J. Cates, Robust and Efficient Data Management for\
    \ a\n         Distributed Hash Table, Master's Thesis, May 2003.\n   [41]  J.\
    \ Aspnes and G. Shah, Skip graphs, Proc. 14th annual ACM-SIAM\n         symposium\
    \ on discrete algorithms (2003) 384-393.\n   [42]  K. Aberer, P. Cudre-Mauroux,\
    \ A. Datta, Z. Despotovic, M.\n         Hauswirth, M. Punceva, and R. Schmidt,\
    \ P-Grid:  a self-\n         organizing structured P2P system, ACM SIGMOD Record\
    \ 32 (3)\n         (2003) 29-33.\n   [43]  B. Zhao, Y. Duan, L. Huang, A. Joseph,\
    \ and J. Kubiatowicz,\n         Brocade: landmark routing on overlay networks,\
    \ First Int'l\n         Workshop on Peer-to-Peer Systems IPTPS'02, March 2002.\n\
    \   [44]  S. Ratnasamy, S. Shenker, and I. Stoica, Routing algorithms for\n  \
    \       DHTs:  some open questions, Proc. First Int'l Workshop on Peer\n     \
    \    to Peer Systems, IPTPS 2002, March 2002.\n   [45]  P. Maymounkov and D. Mazieres,\
    \ Kademlia:  A peer-to-peer\n         information system based on the XOR metric,\
    \ Proc. First Int'l\n         Workshop on Peer to Peer Systems, IPTPS 2002, March\
    \ 7-8 2002.\n   [46]  D. Malkhi, M. Naor, and D. Ratajczak, Viceroy:  a scalable\
    \ and\n         dynamic emulation of the butterfly, Proc. 21st annual symposium\n\
    \         on principles of distributed computing PODC, July 21-24 2002,\n    \
    \     pp. 183-192.\n   [47]  X. Li and C. Plaxton, On name resolution in peer\
    \ to peer\n         networks, Proc. ACM SIGACT Annual Workshop on Principles of\n\
    \         Mobile Computing POMC'02 2002, pp. 82-89.\n   [48]  N. Harvey, J. Dunagan,\
    \ M. B. Jones, S. Saroiu, M. Theimer, and\n         A. Wolman, SkipNet:  A Scalable\
    \ overlay Network with Practical\n         Locality Properties, Microsoft Research\
    \ Technical Report MSR-\n         TR- 2002-92 (2002)\n   [49]  D. Karger, E. Lehman,\
    \ T. Leighton, R. Panigraphy, M. Levin, and\n         D. Lewin, Consistent hashing\
    \ and random trees:  distributed\n         caching protocols for relieving hot\
    \ spots on the World Wide\n         Web, ACM Symp. on Theory of Computing (1997)\n\
    \   [50]  W. Litwin, M. Neimat, and D. Schneider, LH* - a scalable,\n        \
    \ distributed data structure, ACM Trans. on Database Systems\n         (TODS)\
    \ 21 (4) (1996) 480-525.\n   [51]  R. Devine, Design and Implementation of DDH:\
    \ A Distributed\n         Dynamic Hashing Algorithm, Proc.  4th Int'l Conf. on\n\
    \         Foundations of Data Organizations and Algorithms 1993.\n   [52]  W.\
    \ Litwin, M.-A. Niemat, and D. Schneider, LH* - Linear Hashing\n         for Distributed\
    \ Files, Proc.  ACM Int'l Conf. on Mngt. of Data\n         SIGMOD, May 1993, pp.\
    \ 327-336.\n   [53]  C. Tempich, S. Staab, and A. Wranik, Remindin': semantic\
    \ query\n         routing in peer-to-peer networks, Proc. 13th conference on\n\
    \         World Wide Web, New York, NY, USA, May 17-20 (2004) 640-649.\n   [54]\
    \  B. T. Loo, R. Huebsch, I. Stoica, and J. M. Hellerstein, The\n         case\
    \ for a hybrid P2P search infrastructure, The 3rd Int'l\n         Workshop on\
    \ Peer-to-Peer Systems, February 26-27 2004.\n   [55]  M. Cai and M. Frank, RDFPeers:\
    \ a scalable distributed RDF\n         repository based on a structured peer-to-peer\
    \ network, Proc.\n         13th conference on World Wide Web, May 17-20 2004,\
    \ pp. 650-657.\n   [56]  Z. Zhang, S.-M. Shi, and J. Zhu, SOMO: Self-organized\
    \ metadata\n         overlay for resource management in P2P DHTs, Second Int'l\n\
    \         Workshop on Peer-to-Peer Systems IPTPS'03, Feb 20-21 2003.\n   [57]\
    \  B. Yang and H. Garcia-Molina, Designing a super-peer network,\n         Proc.\
    \ 19th Int'l Conf. on Data Engineering ICDE, March 2003.\n   [58]  I. Tatarinov,\
    \ P. Mork, Z. Ives, J. Madhavan, A. Halevy, D.\n         Suciu, N. Dalvi, X. Dong,\
    \ Y. Kadiyska, and G. Miklau, The\n         Piazza peer data management project,\
    \ ACM SIGMOD Record 32 (3)\n         (2003) 47-52.\n   [59]  W. Nejdl, W. Siberski,\
    \ and M. Sintek, Design Issues and\n         Challenges for RDF- and schema-based\
    \ peer-to-peer systems, ACM\n         SIGMOD Record 32 (3) (2003) 41-46.\n   [60]\
    \  S. Joseph and T. Hoshiai, Decentralized Meta-Data Strategies:\n         Effective\
    \ Peer-to-Peer Search, IEICE Trans. Commun. E86-B (6\n         June) (2003) 1740-1753.\n\
    \   [61]  Y. Chawathe, S. Ratnasamy, L. Breslau, N. Lanham, and S.\n         Shenker,\
    \ Making gnutella-like P2P systems scalable, Proc. 2003\n         conference on\
    \ Applications, Technologies, Architectures and\n         Protocols for Computer\
    \ Communications, August 25-29 2003, pp.\n         407-418.\n   [62]  M. Bawa,\
    \ G. S. Manku, and P. Raghavan, SETS: search enhanced by\n         topic segmentation,\
    \ Proc. 26th annual international ACM SIGIR\n         conference on Research and\
    \ Development in Information Retrieval\n         2003, pp. 306-313.\n   [63] \
    \ H. Sunaga, M. Takemoto, and T. Iwata, Advanced peer to peer\n         network\
    \ platform for various services - SIONet Semantic\n         Information Oriented\
    \ Network, Proc. Second Int'l Conf. on Peer\n         to Peer Computing, Sept\
    \ 5-7 2002, pp. 169-170.\n   [64]  M. Schlosser, M. Sintek, S. Decker, and W.\
    \ Nejdl, HyperCuP -\n         Hypercubes, Ontologies and P2P Networks, Springer\
    \ Lecture Notes\n         on Computer Science, Agents and Peer-to-Peer Systems\
    \ Vol. 2530\n         (2002)\n   [65]  M. Ripeanu, A. Iamnitchi, and P. Foster,\
    \ Mapping the Gnutella\n         network, IEEE Internet Computing 6 (1) (2002)\
    \ 50-57.\n   [66]  Q. Lv, S. Ratnasamy, and S. Shenker, Can Heterogeneity Make\n\
    \         Gnutella Scalable?, Proc. 1st Int'l Workshop on Peer-to-Peer\n     \
    \    Systems IPTPS2002, March 7-8 2002.\n   [67]  Q. Lv, P. Cao, E. Cohen, K.\
    \ Li, and S. Shenker, Search and\n         replication in unstructured peer to\
    \ peer networks, Proc. 16th\n         international conference on supercomputing,\
    \ June 22-26 2002,\n         pp. 84-95.\n   [68]  V. Kalogaraki, D. Gunopulos,\
    \ and D. Zeinalipour-Yasti, XML\n         schemas:  integration and translation:\
    \  A local search\n         mechanism for peer to peer networks, Proc. 11th ACM\n\
    \         international conference on Information and Knowledge\n         management\
    \ 2002, pp. 300- 307.\n   [69]  O. Babaoglu, H. Meling, and Montresor, Anthill:\
    \  a framework\n         for the development of agent-based peer-to-peer systems,\
    \ Proc.\n         IEEE Int'l Conf. on Distributed Computer systems 2002, pp. 15-\n\
    \         22.\n   [70]  M. Jovanovic, Modeling large-scale peer-to-peer networks\
    \ and a\n         case study of Gnutella, Master's Thesis 2001.\n   [71]  I. Clarke,\
    \ O. Sandberg, B. Wiley, and T. Hong, Freenet:  A\n         Distributed Anonymous\
    \ Information Storage and Retrieval System.\n         Springer, New York, USA,\
    \ 2001.\n   [72]  J. Harren, J. Hellerstein, R. Huebsch, B. Loo, S. Shenker, and\n\
    \         I. Stoica, Complex queries in DHT-based peer-to-peer networks,\n   \
    \      Proc. First Int'l Workshop on Peer to Peer Systems IPTPS 2002,\n      \
    \   March 2002.\n   [73]  B. Gedik and L. Liu, PeerCQ: A Decentralized and Self-\n\
    \         Configuring Peer-to-Peer Information Monitoring System, Proc.\n    \
    \     23rd Int'l Conf. on Distributed Computing Systems ICDCS2003,\n         May\
    \ 19-22 2003.\n   [74]  B. T. Loo, R. Huebsch, J. M. Hellerstein, T. Roscoe, and\
    \ I.\n         Stoica, Analyzing P2P Overlays with Recursive Queries,\n      \
    \   Technical Report, CSD-04-1301, January 14 2004.\n   [75]  R. Avnur and J.\
    \ Hellerstein, Eddies: continuously adaptive\n         query processing, Proc.\
    \ 2000 ACM SIGMOD international\n         conference on Management of Data 2000,\
    \ pp. 261-272.\n   [76]  P. Triantafillou and T. Pitoura, Towards a unifying framework\n\
    \         for complex query processing over structured peer-to-peer data\n   \
    \      networks, Proc. First Int'l Workshop on Databases, Information\n      \
    \   Systems and Peer-to-Peer Computing DBISP2P, Sept 7-8 2003, pp.\n         169-183.\n\
    \   [77]  A. Gupta, D. Agrawal, and A. E. Abbadi, Approximate range\n        \
    \ selection queries in peer-to-peer systems, Proc. First Biennial\n         Conf.\
    \ on Innovative Data Systems Research CIDR 2003 2003.\n   [78]  S. Ratnasamy,\
    \ P. Francis, and M. Handley, Range queries in\n         DHTs, Technical Report\
    \ IRB-TR-03-009, July 2003.\n   [79]  S. Ramabhadran, S. Ratnasamy, J. Hellerstein,\
    \ and S. Shenker,\n         Brief announcement: prefix hash tree, Proc. 23rd Annual\
    \ ACM\n         SIGACT-SIGOPS Symp. on Principles of Distributed Computing,\n\
    \         PODC 2004, July 25-28 2004, pp. 368-368.\n   [80]  A. Andrzejak and\
    \ Z. Xu, Scalable, efficient range queries for\n         grid information services,\
    \ Proc. Second IEEE Int'l Conf. on\n         Peer to Peer Computing, September\
    \ 2002.\n   [81]  C. Schmidt and M. Parashar, Enabling flexible queries with\n\
    \         guarantees in P2P systems, IEEE Internet Computing 8 (3) (2004)\n  \
    \       19-26.\n   [82]  E. Tanin, A. Harwood, and H. Samet, Indexing distributed\n\
    \         complex data for complex queries, Proc. National Conf. on\n        \
    \ Digital Government Research 2004, pp. 81-90.\n   [83]  P. Ganesan, M. Bawa,\
    \ and H. Garcia-Molina, Online Balancing of\n         Range-Partitioned Data with\
    \ Applications to Peer-to-Peer\n         Systems, Proc. 30th Int'l Conf. on Very\
    \ Large Data Bases VLDB\n         2004, 29 August - 3 September 2004.\n   [84]\
    \  A. Bharambe, M. Agrawal, and S. Seshan, Mercury: Supporting\n         Scalable\
    \ Multi-Attribute Range Queries, SIGCOMM'04, Aug 30-Sept\n         3 2004.\n \
    \  [85]  K. Aberer, Scalable Data Access in P2P Systems Using Unbalanced\n   \
    \      Search Trees, Workshop on Distributed Data and Structures WDAS-\n     \
    \    2002 2002.\n   [86]  K. Aberer, A. Datta, and M. Hauswirth, The Quest for\
    \ Balancing\n         Peer Load in Structured Peer-to-Peer Systems, Technical\
    \ Report\n         IC/2003/32 2003.\n   [87]  W. Litwin, M.-A. Neimat, and D.\
    \ Schneider, RP*: a family of\n         order-preserving scalable distributed\
    \ data structures, Proc.\n         20th Int'l Conf. on Very Large Data Bases VLDB'94,\
    \ September\n         12-15 1994.\n   [88]  M. Tsangou, S. Ndiaye, M. Seck, and\
    \ W. Litwin, Range queries to\n         scalable distributed data structure RP*,\
    \ Proc. Fifth Workshop\n         on Distributed Data and Structures, WDAS 2003,\
    \ June 2003.\n   [89]  W. Litwin and M.-A. Neimat, k-RP*s: a scalable distributed\
    \ data\n         structure for high-performance multi-attributed access, Proc.\n\
    \         Fourth Int'l Conf. on Parallel and Distributed Information\n       \
    \  Systems (1996) 120-131.\n   [90]  T. Hodes, S. Czerwinski, B. Zhao, A. Joseph,\
    \ and R. Katz, An\n         architecture for secure wide-area service discovery,\
    \ Wireless\n         Networks 8 (2/3) (2002) 213-230.\n   [91]  M. Cai, M. Frank,\
    \ J. Chen, and P. Szekely, MAAN: A Multi-\n         Attribute Addressable Network\
    \ for Grid Information Services,\n         Proc. Int'l Workshop on Grid Computing,\
    \ November 2003.\n   [92]  R. van Renesse, K. P. Birman, and W. Vogels, Astrolabe:\
    \  A\n         robust and scalable technology for distribute system\n        \
    \ monitoring, management and data mining, ACM Trans. on Computer\n         Systems\
    \ 21 (2) (2003) 164-206.\n   [93]  R. Bhagwan, G. Varghese, and G. Voelker, Cone:\
    \ Augmenting DHTs\n         to support distributed resource discovery, Technical\
    \ Report,\n         CS2003- 0755, July 2003.\n   [94]  K. Albrecht, R. Arnold,\
    \ and R. Wattenhofer, Join and Leave in\n         Peer-to-Peer Systems: The DASIS\
    \ Approach, Technical Report 427,\n         Department of Computer Science, November\
    \ 2003.\n   [95]  K. Albrecht, R. Arnold, and R. Wattenhofer, Aggregating\n  \
    \       information in peer-to-peer systems for improved join and\n         leave,\
    \ Proc. Fourth IEEE Int'l Conf. on Peer-to-Peer Computing,\n         25-27 August\
    \ 2004.\n   [96]  A. Montresor, M. Jelasity, and O. Babaoglu, Robust aggregation\n\
    \         protocol for large-scale overlay networks, Technical Report\n      \
    \   UBLCS-2003-16, December 2003.\n   [97]  M. Jelasity, W. Kowalczyk, and M.\
    \ van Steen, An Approach to\n         Aggregation in Large and Fully Distributed\
    \ Peer-to-Peer Overlay\n         Networks, Proc. 12th Euromicro Conf. on Parallel,\
    \ Distributted\n         and Network based Processing PDP 2004, February 2004.\n\
    \   [98]  P. Yalagandula and M. Dahlin, A scalable distributed\n         information\
    \ management system, SIGCOMM'04, Aug 30-Sept 3 2004.\n   [99]  M. Bawa, A. Gionis,\
    \ H. Garcia-Molina, and R. Motwani, The price\n         of validity in dynamic\
    \ networks, Proc. 2004 ACM SIGMOD Int'l\n         Conf. on the management of data\
    \ 2004, pp. 515-526.\n   [100] J. Aspnes, J. Kirsch, and A. Krishnamurthy, Load\
    \ Balancing and\n         Locality in Range-Queriable Data Structures, Proc. 23rd\
    \ Annual\n         ACM SIGACT-SIGOPS Symp. on Principles of Distributed Computing\n\
    \         PODC 2004, July 25-28 2004.\n   [101] G. On, J. Schmitt, and R. Steinmetz,\
    \ The effectiveness of\n         realistic replication strategies on quality of\
    \ availability for\n         peer-to-peer systems, Proc. Third Int'l IEEE Conf.\
    \ on Peer-to-\n         Peer Computing, Sept 1-3 2003, pp. 57-64.\n   [102] D.\
    \ Geels and J. Kubiatowicz, Replica management should be a\n         game, Proc.\
    \ SIGOPS European Workshop, September 2003.\n   [103] E. Cohen and S. Shenker,\
    \ Replication strategies in unstructured\n         peer to peer networks, Proc.\
    \ 2002 conference on applications,\n         technologies, architectures and protocols\
    \ for computer\n         communications 2002, pp. 177-190.\n   [104] E. Cohen\
    \ and S. Shenker, P2P and multicast:  replication\n         strategies in unstructured\
    \ peer to peer networks, Proc. 2002\n         conference on applications, technologies,\
    \ architectures and\n         protocols for computer communications 2002, pp.\
    \ 177-190.\n   [105] H. Weatherspoon and J. Kubiatowicz, Erasure coding vs\n \
    \        replication:  a quantative comparison, Proc. First Int'l\n         Workshop\
    \ on Peer to Peer Systems IPTPS'02, March 2002.\n   [106] D. Lomet, Replicated\
    \ indexes for distributed data, Proc. Fourth\n         Int'l Conf. on Parallel\
    \ and Distributed Information Systems,\n         December 18-20 1996, pp. 108-119.\n\
    \   [107] V. Gopalakrishnan, B. Silaghi, B. Bhattacharjee, and P.\n         Keleher,\
    \ Adaptive Replication in Peer-to-Peer Systems, Proc.\n         24th Int'l Conf.\
    \ on Distributed Computing Systems ICDCS 2004,\n         March 23-26 2004.\n \
    \  [108] S.-D. Lin, Q. Lian, M. Chen, and Z. Zhang, A practical\n         distributed\
    \ mutual exclusion protocol in dynamic peer-to-peer\n         systems, The 3rd\
    \ Int'l Workshop on Peer-to-Peer Systems,\n         February 26-27 2004.\n   [109]\
    \ A. Adya, R. Wattenhofer, W. Bolosky, M. Castro, G. Cermak, R.\n         Chaiken,\
    \ J. Douceur, J. Howell, J. Lorch, and M. Thiemer,\n         Farsite: federated,\
    \ available and reliable storage for an\n         incompletely trusted environment,\
    \ ACM SIGOPS Operating Systems\n         Review, Special issue on Decentralized\
    \ storage systems (2002)\n         1- 14.\n   [110] A. Rowstron and P. Druschel,\
    \ Storage management and caching in\n         PAST, a large-scale, persistent\
    \ peer-to-peer storage utility,\n         Proceedings ACM SOSP'01, October 2001,\
    \ pp. 188-201.\n   [111] S. Rhea, C. Wells, P. Eaton, D. Geels, B. Zhao, H.\n\
    \         Weatherspoon, and J. Kubiatowicz, Maintenance-Free Global Data\n   \
    \      Storage, IEEE Internet Computing 5 (5) (2001) 40-49.\n   [112] J. Kubiatowicz,\
    \ D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D.\n         Geels, R. Gummadi,\
    \ S. Rhea, H. Weatherspoon, W. Weimer, C.\n         Wells, and B. Zhao, Oceanstore:\
    \  An Architecture for global-\n         scale persistent storage, Proc. Ninth\
    \ Int'l Conf. on\n         Architecture Support for Programming Languages and\
    \ Operating\n         Systems ASPLOS 2000, November 2000, pp. 190-201.\n   [113]\
    \ K. Birman, The Surprising Power of Epidemic Communication,\n         Springer-Verlag\
    \ Heidelberg Lecture Notes in Computer Science\n         Volume 2584/2003 (2003)\
    \ 97-102.\n   [114] P. Costa, M. Migliavacca, G. P. Picco, and G. Cugola,\n  \
    \       Introducing reliability in content-based publish-subscribe\n         through\
    \ epidemic algorithms, Proc. 2nd international workshop\n         on Distributed\
    \ event-based systems 2003, pp. 1-8.\n   [115] P. Costa, M. Migliavacca, G. P.\
    \ Picco, and G. Cugola, Epidemic\n         Algorithms for Reliable Content-Based\
    \ Publish-Subscribe:  An\n         Evaluation, The 24th Int'l Conf. on Distributed\
    \ Computing\n         Systems (ICDCS-2004), Mar 23-26, Tokyo University of\n \
    \        Technology, Hachioji, Tokyo, Japan (2004)\n   [116] A. Demers, D. Greene,\
    \ C. Hauser, W. Irish, J. Larson, S.\n         Shenker, H. Sturgis, D. Swinehart,\
    \ and D. Terry, Epidemic\n         algorithms for replicated data management,\
    \ Proc. Sixth ACM\n         Symp. on Principles of Distributed Computing 1987,\
    \ pp. 1-12.\n   [117] P. Eugster, R. Guerraoiu, A. Kermarrec, and L. Massoulie,\n\
    \         Epidemic information dissemination in distributed systems, IEEE\n  \
    \       Computer 37 (5) (2004) 60-67.\n   [118] W. Vogels, R. v. Renesse, and\
    \ K. Birman, The power of\n         epidemics: robust communication for large-scale\
    \ distributed\n         systems, ACM SIGCOMM  Computer Communication Review 33\
    \ (1)\n         (2003) 131-135.\n   [119] S. Voulgaris and M. van Steen, An epidemic\
    \ protocol for\n         managing routing tables in very large peer to peer networks,\n\
    \         Proc. 14th IFIP/IEEE Workshop on Distributed Systems:\n         Operations\
    \ and Management, October 2003.\n   [120] I. Gupta, On the design of distributed\
    \ protocols from\n         differential equations, Proc. 23rd Annual ACM SIGACT-SIGOPS\n\
    \         Symp. on Principles of Distributed Computing PODC 2004, July\n     \
    \    25-28 2004, pp. 216-225.\n   [121] I. Gupta, K. Birman, and R. van Renesse,\
    \ Fighting fire with\n         fire: using randomized gossip to combat stochastic\
    \ scalability\n         limits, Cornell University Dept of Computer Science Technical\n\
    \         Report, March 2001.\n   [122] K. Birman and I. Gupta, Building Scalable\
    \ Solutions to\n         Distributed Computing Problems using Probabilistic Components,\n\
    \         Submitted to the Int'l Conf. on Dependable Systems and Networks\n  \
    \       DSN-2004, Dependable Computing and Computing Symp. DCCS, June\n      \
    \   28- July 1 2004.\n   [123] A. Ganesh, A.-M. Kermarrec, and L. Massoulie, Peer-to-peer\n\
    \         membership management for gossip-based protocols, IEEE Trans.\n    \
    \     on Computers 52 (2) (2003) 139-149.\n   [124] N. Bailey, Epidemic Theory\
    \ of Infectious Diseases and its\n         Applications, Second Edition ed. Hafner\
    \ Press, 1975.\n   [125] P. Eugster, R. Guerraoiu, S. Handurukande, P. Kouznetsov,\
    \ and\n         A.- M. Kermarrec, Lightweight probabilistic broadcast, ACM\n \
    \        Trans. on Computer Systems 21 (4) (2003) 341-374.\n   [126] H. Weatherspoon\
    \ and J. Kubiatowicz, Efficient heartbeats and\n         repair of softstate in\
    \ decentralized object location and\n         routing systems, Proc. SIGOPS European\
    \ Workshop, September\n         2002.\n   [127] G. Koloniari and E. Pitoura, Content-based\
    \ Routing of Path\n         Queries in Peer-to-Peer Systems, Proc. 9th Int'l Conf.\
    \ on\n         Extending DataBase Technology EDBT, March 14-18 2004.\n   [128]\
    \ A. Mohan and V. Kalogaraki, Speculative routing and update\n         propagation:\
    \ a kundali centric approach, IEEE Int'l Conf. on\n         Communications ICC'03,\
    \ May 2002.\n   [129] G. Koloniari, Y. Petrakis, and E. Pitoura, Content-Based\n\
    \         Overlay Networks for XML Peers Based on Multi-Level Bloom\n        \
    \ Filters, Proc. First Int'l Workshop on Databases, Information\n         Systems\
    \ and Peer-to-Peer Computing DBISP2P, Sept 7-8 2003, pp.\n         232-247.\n\
    \   [130] G. Koloniari and E. Pitoura, Bloom-Based Filters for\n         Hierarchical\
    \ Data, Proc. 5th Workshop on Distributed Data and\n         Structures (WDAS)\
    \ (2003)\n   [131] B. Bloom, Space/time trade-offs in hash coding with allowable\n\
    \         errors, Communications of the ACM 13 (7) (1970) 422-426.\n   [132] M.\
    \ Naor and U. Wieder, A Simple Fault Tolerant Distributed Hash\n         Table,\
    \ Second Int'l Workshop on Peer-to-Peer Systems (IPTPS\n         03), Berkeley,\
    \ CA, USA, 20-21 February (2003)\n   [133] P. Maymounkov and D. Mazieres, Rateless\
    \ codes and big\n         downloads, Second Int'l Workshop on Peer-to-Peer Systems,\n\
    \         IPTPS'03, February 20-21 2003.\n   [134] M. Krohn, M. Freedman, and\
    \ D. Mazieres, On-the-fly verification\n         of rateless erasure codes for\
    \ efficient content distribution,\n         Proc. IEEE Symp. on Security and Privacy,\
    \ May 2004.\n   [135] J. Byers, J. Considine, M. Mitzenmacher, and S. Rost, Informed\n\
    \         content delivery across adaptive overlay networks, Proc. 2002\n    \
    \     conference on applications, technologies, architectures and\n         protocols\
    \ for computer communications 2002, pp. 47-60.\n   [136] J. Plank, S. Atchley,\
    \ Y. Ding, and M. Beck, Algorithms for High\n         Performance, Wide-Area Distributed\
    \ File Downloads, Parallel\n         Processing Letters 13 (2) (2003) 207-223.\n\
    \   [137] M. Castro, P. Rodrigues, and B. Liskov, BASE:  Using\n         abstraction\
    \ to improve fault tolerance, ACM Trans. on Computer\n         Systems 21 (3)\
    \ (2003) 236-269.\n   [138] R. Rodrigues, B. Liskov, and L. Shrira, The design\
    \ of a robust\n         peer-to-peer system, 10th ACM SIGOPS European Workshop,\
    \ Sep\n         2002.\n   [139] H. Weatherspoon, T. Moscovitz, and J. Kubiatowicz,\n\
    \         Introspective failure analysis: avoiding correlated failures in\n  \
    \       peer-to-peer systems, Proc.  Int'l Workshop on Reliable Peer-\n      \
    \   to-Peer Distributed Systems, Oct 2002.\n   [140] F. Dabek, R. Cox, F. Kaashoek,\
    \ and R. Morris, Vivaldi: A\n         Decentralized Network Coordinate System,\
    \ SIGCOMM'04, Aug 30-\n         Sept 3 2004.\n   [141] E.-K. Lua, J. Crowcroft,\
    \ and M. Pias, Highways: proximity\n         clustering for massively scaleable\
    \ peer-to-peer network\n         routing, Proc. Fourth IEEE Int'l Conf. on Peer-to-Peer\n\
    \         Computing, August 25-27 2004.\n   [142] F. Fessant, S. Handurukande,\
    \ A.-M. Kermarrec, and L. Massoulie,\n         Clustering in Peer-to-Peer File\
    \ Sharing Workloads, The 3rd\n         Int'l Workshop on Peer-to-Peer Systems,\
    \ February 26-27 2004.\n   [143] T. S. E. Ng and H. Zhang, Predicting internet\
    \ network distance\n         with coordinates-based approaches, IEEE Infocom 2002,\
    \ The 21st\n         Annual Joint Conf. of the IEEE Computer and Communication\n\
    \         Societies, June 23-27 2002.\n   [144] K. Hildrum, R. Krauthgamer, and\
    \ J. Kubiatowicz, Object Location\n         in Realistic Networks, Proc. Sixteenth\
    \ ACM Symp. on Parallel\n         Algorithms and Architectures (SPAA 2004), June\
    \ 2004, pp. 25-35.\n   [145] P. Keleher, S. Bhattacharjee, and B. Silaghi, Are\
    \ Virtualized\n         Overlay Networks Too Much of a Good Thing?, First Int'l\n\
    \         Workshop on Peer-to-Peer Systems IPTPS, March 2002.\n   [146] A. Mislove\
    \ and P. Druschel, Providing administrative control\n         and autonomy in\
    \ structured peer-to-peer overlays, The 3rd Int'l\n         Workshop on Peer-to-Peer\
    \ Systems, June 9-12 2004.\n   [147] D. Karger and M. Ruhl, Diminished Chord:\
    \ A Protocol for\n         Heterogeneous SubGroup Formation in Peer-to-Peer Networks,\
    \ The\n         3rd Int'l Workshop on Peer-to-Peer Systems, February 26-27\n \
    \        2004.\n   [148] B. Awerbuch and C. Scheideler, Consistent, order-preserving\n\
    \         data management in distributed storage systems, Proc. Sixteenth\n  \
    \       ACM Symp. on Parallel Algorithms and Architectures SPAA 2004,\n      \
    \   June 27-30 2004, pp. 44-53.\n   [149] M. Freedman and D. Mazieres, Sloppy\
    \ Hashing and Self-Organizing\n         Clusters, Proc. 2nd Int'l Workshop on\
    \ Peer-to-Peer Systems\n         IPTPS\n   [150] F. Dabek, J. Li, E. Sit, J. Robertson,\
    \ F. Kaashoek, and R.\n         Morris, Designing a DHT for low latency and high\
    \ throughput,\n         Proc. First Symp. on Networked Systems Design and\n  \
    \       Implementation (NSDI'04), San Francisco, California, March\n         29-31\
    \ (2004) 85-98.\n   [151] M. Ruhl, Efficient algorithms for new computational\
    \ models,\n         Doctoral Dissertation, September 2003.\n   [152] K. Sollins,\
    \ Designing for scale and differentiation, Proc. ACM\n         SIGCOMM workshop\
    \ on Future Directions in network architecture,\n         August 25-27 2003.\n\
    \   [153] L. Massoulie, A. Kermarrec, and A. Ganesh, Network awareness\n     \
    \    and failure resilience in self-organizing overlay networks,\n         Proc.\
    \ 22nd Int'l Symp. on Reliable Distributed Systems,\n         SRDS'03, Oct 6-8\
    \ 2003, pp. 47-55.\n   [154] R. Cox, F. Dabek, F. Kaashoek, J. Li, and R. Morris,\n\
    \         Practical,distributed network coordinates, ACM SIGCOMM Computer\n  \
    \       Communication Review 34 (1) (2004) 113-118.\n   [155] K. Hildrum, J. Kubiatowicz,\
    \ S. Rao, and B. Zhao, Distributed\n         object location in a dynamic network,\
    \ Proc. 14th annual ACM\n         symposium on parallel algorithms and architectures\
    \ 2002, pp.\n         41- 52.\n   [156] X. Zhang, Q. Zhang, G. Song, and W. Zhu,\
    \ A Construction of\n         Locality-Aware Overlay Network: mOverlay and its\
    \ Performance,\n         IEEE Journal on Selected Areas in Communications 22 (1)\
    \ (2004)\n         18-28.\n   [157] N. Harvey, M. B. Jones, M. Theimer, and A.\
    \ Wolman, Efficient\n         recovery from organization disconnects in Skipnet,\
    \ Second Int'l\n         Workshop on Peer-to-Peer Systems IPTPS'03, Feb 20-21\
    \ 2003.\n   [158] M. Pias, J. Crowcroft, S. Wilbur, T. Harris, and S. Bhatti,\n\
    \         Lighthouses for scalable distributed location, Second Int'l\n      \
    \   Workshop on Peer-to-Peer Systems IPTPS'03, February 20-21 2003.\n   [159]\
    \ K. Gummadi, S. Saroui, S. Gribble, and D. King, Estimating\n         latency\
    \ between arbitrary internet end hosts, Proc.  SIGCOMM\n         IMW 2002, November\
    \ 2002.\n   [160] Y. Liu, X. Liu, L. Xiao, L. Ni, and X. Zhang, Location-aware\n\
    \         topology matching in P2P systems, Proc.  IEEE Infocomm, Mar\n      \
    \   7-11 2004.\n   [161] G. S. Manku, Balanced binary trees for ID management\
    \ and load\n         balance in distributed hash tables, Proc. 23rd Annual ACM\n\
    \         SIGACT-SIGOPS Symp. on Principles of Distributed Computing,\n      \
    \   PODC 2004, July 25-28 2004, pp. 197-205.\n   [162] J. Gao and P. Steenkiste,\
    \ Design and Evaluation of a\n         Distributed Scalable Content Delivery System,\
    \ IEEE Journal on\n         Selected Areas in Communications 22 (1) (2004) 54-66.\n\
    \   [163] X. Wang, Y. Zhang, X. Li, and D. Loguinov, On zone-balancing of\n  \
    \       peer-to-peer networks: analysis of random node join, Proc.\n         joint\
    \ international conference on measurement and modeling of\n         computer systems,\
    \ June 2004.\n   [164] D. Karger and M. Ruhl, Simple efficient load balancing\n\
    \         algorithms for peer-to-peer systems, Proc. Sixteenth ACM Symp.\n   \
    \      on Parallel Algorithms and Architectures SPAA 2004, June 27-30\n      \
    \   2004.\n   [165] D. Karger and M. Ruhl, Simple efficient load balancing\n \
    \        algorithms for peer-to-peer systems, The 3rd Int'l Workshop on\n    \
    \     Peer-to-Peer Systems, February 26-27 2004.\n   [166] M. Adler, E. Halperin,\
    \ R. Karp, and V. Vazirani, A stochastic\n         process on the hypercube with\
    \ applications to peer-to-peer\n         networks, Proc. 35th ACM symposium on\
    \ Theory of Computing 2003,\n         pp. 575-584.\n   [167] C. Baquero and N.\
    \ Lopes, Towards peer to peer content indexing,\n         ACM SIGOPS Operating\
    \ Systems Review 37 (4) (2003) 90-96.\n   [168] A. Rao, K. Lakshminarayanan, S.\
    \ Surana, R. Karp, and I. Stoica,\n         Load balancing in structured P2P systems,\
    \ Proc. 2nd Int'l\n         Workshop on Peer-to-Peer Systems, IPTPS'03, February\
    \ 20-21\n         2003.\n   [169] J. Byers, J. Considine, and M. Mitzenmacher,\
    \ Simple Load\n         Balancing for Distributed Hash Tables, Second Int'l Workshop\
    \ on\n         Peer-to-Peer Systems IPTPS 03, 20-21 February 2003.\n   [170] P.\
    \ Castro, J. Lee, and A. Misra, CLASH: A Protocol for\n         Internet- Scale\
    \ Utility-Oriented Distributed Computing, Proc.\n         24th Int'l Conf. on\
    \ Distributed Computing Systems ICDCS 2004,\n         March 23-26 2004.\n   [171]\
    \ A. Stavrou, D. Rubenstein, and S. Sahu, A Lightwight, Robust\n         P2P System\
    \ to Handle Flash Crowds, IEEE Journal on Selected\n         Areas in Communications\
    \ 22 (1) (2004) 6-17.\n   [172] A. Selcuk, E. Uzun, and M. R. Pariente, A reputation-based\n\
    \         trust management system for P2P networks, Fourth Int'l Workshop\n  \
    \       on Global and Peer-to-Peer Computing, April 20-21 2004.\n   [173] T. Papaioannou\
    \ and G. Stamoulis, Effective use of reputation in\n         peer-to-peer environments,\
    \ Fourth Int'l Workshop on Global and\n         Peer-to-Peer Computing, April\
    \ 20-21 2004.\n   [174] M. Blaze, J. Feigenbaum, and J. Lacy, Trust and Reputation\
    \ in\n         P2P networks,\n         http://www.neurogrid.net/twiki/bin/view/Main/ReputationAndTrust\n\
    \         (2003)\n   [175] E. Damiani, D. C. di Vimercati, S. Paraboschi, P. Samarati,\
    \ and\n         F. Violante, A reputation-based approach for choosing reliable\n\
    \         resources in peer to peer networks, Proc. 9th conference on\n      \
    \   computer and communications security 2002, pp. 207-216.\n   [176] S. Marti,\
    \ P. Ganesan, and H. Garcia-Molina, DHT routing using\n         social links,\
    \ The 3rd Int'l Workshop on Peer-to-Peer Systems,\n         February 26-27 2004.\n\
    \   [177] G. Caronni and M. Waldvogel, Establishing trust in distributed\n   \
    \      storage providers, Proc. Third Int'l IEEE Conf. on Peer-to-Peer\n     \
    \    Computing, 1-3 Sept 2003, pp. 128-133.\n   [178] B. Sieka, A. Kshemkalyani,\
    \ and M. Singhal, On the security of\n         polling protocols in peer-to-peer\
    \ systems, Proc. Fourth IEEE\n         Int'l Conf. on Peer-to-Peer Computing,\
    \ 25-27 August 2004.\n   [179] M. Feldman, K. Lai, I. Stoica, and J. Chuang, Robust\
    \ Incentive\n         Techniques for Peer-to-Peer Networks, ACM E-Commerce Conf.\n\
    \         EC'04, May 2004.\n   [180] K. Anagnostakis and M. Greenwald, Exchange-based\
    \ Incentive\n         Mechanism for Peer-to-Peer File Sharing, Proc. 24th Int'l\
    \ Conf.\n         on Distributed Computing Systems ICDCS 2004, March 23-26 2004.\n\
    \   [181] J. Schneidman and D. Parkes, Rationality and self-Interest in\n    \
    \     peer to peer networks, Second Int'l Workshop on Peer-to-Peer\n         Systems\
    \ IPTPS'03, February 20-21 2003.\n   [182] C. Buragohain, D. Agrawal, and S. Subhash,\
    \ A game theoretic\n         framework for incentives in P2P systems, Proc. Third\
    \ Int'l IEEE\n         Conf. on Peer-to-Peer Computing, 1-3 Sept 2003, pp. 48-56.\n\
    \   [183] W. Josephson, E. Sirer, and F. Schneider, Peer-to-Peer\n         Authentication\
    \ with a Distributed Single Sign-On Service, The\n         3rd Int'l Workshop\
    \ on Peer-to-Peer Systems, February 26-27\n         2004.\n   [184] A. Fiat and\
    \ J. Saia, Censorship resistant peer to peer content\n         addressable networks,\
    \ Proc. 13th annual ACM-SIAM symposium on\n         discrete algorithms 2002,\
    \ pp. 94-103.\n   [185] N. Daswani and H. Garcia-Molina, Query-flood DoS attacks\
    \ in\n         gnutella, Proc. 9th ACM Conf. on Computer and Communications\n\
    \         Security 2002, pp. 181-192.\n   [186] A. Singh and L. Liu, TrustMe:\
    \ anonymous management of trust\n         relationships in decentralized P2P systems,\
    \ Proc. Third Int'l\n         IEEE Conf. on Peer-to-Peer Computing, Sept 1-3 2003.\n\
    \   [187] A. Serjantov, Anonymizing censorship resistant systems, Proc.\n    \
    \     Second Int'l Conf. on Peer to Peer Computing, March 2002.\n   [188] S. Hazel\
    \ and B. Wiley, Achord: A Variant of the Chord Lookup\n         Service for Use\
    \ in Censorship Resistant Peer-to-Peer Publishing\n         Systems, Proc. Second\
    \ Int'l Conf. on Peer to Peer Computing,\n         March 2002.\n   [189] M. Freedman\
    \ and R. Morris, Tarzan: a peer-to-peer anonymizing\n         network layer, Proc.\
    \ 9th ACM Conf. on Computer and\n         Communications Security (2002) 193-206.\n\
    \   [190] M. Feldman, C. Papadimitriou, J. Chuang, and I. Stoica, Free-\n    \
    \     Riding and Whitewashing in Peer-to-Peer Systems, 3rd Annual\n         Workshop\
    \ on Economics and Information Security WEIS04, May\n         2004.\n   [191]\
    \ L. Ramaswamy and L. Liu, FreeRiding: a new challenge for peer-\n         to-peer\
    \ file sharing systems, Proc. 2003 Hawaii Int'l Conf. on\n         System Sciences,\
    \ P2P Track, HICSS2003, January 6-9 2003.\n   [192] T.-W. Ngan, D. Wallach, and\
    \ P. Druschel, Enforcing fair sharing\n         of peer-to-peer resources, Second\
    \ Int'l Workshop on Peer-to-\n         Peer Systems, IPTPS'03, 20-21 February\
    \ 2003.\n   [193] L. Cox and B. D. Noble, Samsara: honor among thieves in peer-\n\
    \         to-peer storage, Proc. nineteenth ACM symposium on Operating\n     \
    \    System Principles 2003, pp. 120-132.\n   [194] M. Surridge and C. Upstill,\
    \ Grid security: lessons for peer-to-\n         peer systems, Proc. Third Int'l\
    \ IEEE Conf. on Peer-to-Peer\n         Computing, Sept 1-3 2003, pp. 2-6.\n  \
    \ [195] E. Sit and R. Morris, Security considerations for peer-to-peer\n     \
    \    distributed hash tables, First Int'l Workshop on Peer-to-Peer\n         Systems,\
    \ March 2002.\n   [196] C. O'Donnel and V. Vaikuntanathan, Information leak in\
    \ the\n         Chord lookup protocol, Proc. Fourth IEEE Int'l Conf. on Peer-\n\
    \         to-Peer Computing, 25-27 August 2004.\n   [197] K. Berket, A. Essiari,\
    \ and A. Muratas, PKI-Based Security for\n         Peer-to-Peer Information Sharing,\
    \ Proc. Fourth IEEE Int'l Conf.\n         on Peer-to-Peer Computing, 25-27 August\
    \ 2004.\n   [198] B. Karp, S. Ratnasamy, S. Rhea, and S. Shenker, Spurring\n \
    \        adoption of DHTs with OpenHash, a public DHT service, The 3rd\n     \
    \    Int'l Workshop on Peer-to-Peer Systems, February 26-27 2004.\n   [199] J.\
    \ Considine, M. Walfish, and D. G. Andersen, A pragmatic\n         approach to\
    \ DHT adoption, Technical Report,, December 2003.\n   [200] G. Li, Peer to Peer\
    \ Networks in Action, IEEE Internet Computing\n         6 (1) (2002) 37-39.\n\
    \   [201] A. Mislove, A. Post, C. Reis, P. Willmann, P. Druschel, D.\n       \
    \  Wallach, X. Bonnaire, P. Sens, J.-M. Busca, and L. Arantes-\n         Bezerra,\
    \ POST:  A Secure, Resilient, Cooperative Messaging\n         System, 9th Workshop\
    \ on Hot Topics in Operating Systems, HotOS,\n         May 2003.\n   [202] S.\
    \ Saroiu, P. Gummadi, and S. Gribble, A measurement study of\n         peer-to-peer\
    \ file sharing systems, Proc.  Multimedia Computing\n         and Networking 2002\
    \ MMCN'02, January 2002.\n   [203] A. Muthitacharoen, R. Morris, T. Gil, and B.\
    \ Chen, Ivy: a\n         read/write peer-to-peer file system, ACM SIGOPS Operating\n\
    \         Systems Review, Special issue on Decentralized storage systems,\n  \
    \       December 2002, pp. 31-44.\n   [204] A. Muthitacharoen, R. Morris, T. Gil,\
    \ and B. Chen, A read/write\n         peer-to-peer file system, Proc. 5th Symp.\
    \ on Operating System\n         Design and Implementation (OSDI 2002), Boston,\
    \ MA, December\n         (2002)\n   [205] F. Annexstein, K. Berman, M. Jovanovic,\
    \ and K. Ponnavaikko,\n         Indexing techniques for file sharing in scalable\
    \ peer to peer\n         networks, 11th IEEE Int'l Conf. on Computer Communications\
    \ and\n         Networks (2002) 10-15.\n   [206] G. Kan and Y. Faybishenko, Introduction\
    \ to Gnougat, First Int'l\n         Conf. on Peer-to-Peer Computing 2001 2001,\
    \ pp. 4-12.\n   [207] R. Gold and D. Tidhar, Towards a content-based aggregation\n\
    \         network, Proc. First Int'l Conf. on Peer to Peer Compuuting\n      \
    \   2001, pp. 62-68.\n   [208] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris,\
    \ and I. Stoica,\n         Wide-area cooperative storage with CFS, Proc. 18th\
    \ ACM\n         symposium on Operating System Principles 2001, pp. 202-215.\n\
    \   [209] M. Freedman, E. Freudenthal, and D. Mazieres, Democratizing\n      \
    \   content publication with coral, Proc. First Symp. on Networked\n         Systems\
    \ Design and Implementation NSDI'04, March 29-31 2004,\n         pp. 239-252.\n\
    \   [210] J. Li, B. T. Loo, J. Hellerstein, F. Kaashoek, D. Karger, and\n    \
    \     R. Morris, On the Feasibility of Peer-to-Peer Web Indexing and\n       \
    \  Search, Second Int'l Workshop on Peer-to-Peer Systems IPTPS 03,\n         20-21\
    \ February 2003.\n   [211] S. Iyer, A. Rowstron, and P. Druschel, Squirrel: a\n\
    \         decentralized peer-to-peer web cache, Proc. 21st annual\n         symposium\
    \ on principles of distributed computing 2002, pp.\n         213-222.\n   [212]\
    \ M. Bawa, R. Bayardo, S. Rajagopalan, and E. Shekita, Make it\n         fresh,\
    \ make it quick: searching a network of personal\n         webservers, Proc. 12th\
    \ international conference on World Wide\n         Web 2003, pp. 577-586.\n  \
    \ [213] B. T. Loo, S. Krishnamurthy, and O. Cooper, Distributed web\n        \
    \ crawling over DHTs, Technical Report, CSD-04-1305, February 9\n         2004.\n\
    \   [214] M. Junginger and Y. Lee, A self-organizing publish/subscribe\n     \
    \    middleware for dynamic peer-to-peer networks, IEEE Network 18\n         (1)\
    \ (2004) 38-43.\n   [215] F. Cuenca-Acuna, C. Peery, R. Martin, and T. Nguyen,\
    \ PlanetP:\n         Using Gossiping to Build Content Addressable Peer-to-Peer\n\
    \         Information Sharing Communities, Proc. 12th international\n        \
    \ symposium on High Performance Distributed Computing (HPDC),\n         June 2002.\n\
    \   [216] M. Walfish, H. Balakrishnan, and S. Shenker, Untangling the web\n  \
    \       from DNS, Proc. First Symp. on Networked Systems Design and\n        \
    \ Implementation NSDI'04, March 29-31 2004, pp. 225-238.\n   [217] B. Awerbuch\
    \ and C. Scheideler, Robust distributed name service,\n         The 3rd Int'l\
    \ Workshop on Peer-to-Peer Systems, February 26-27\n         2004.\n   [218] A.\
    \ Iamnitchi, Resource Discovery in Large Resource-Sharing\n         Environments,\
    \ Doctoral Dissertation 2003.\n   [219] R. Cox, A. Muthitacharoen, and R. Morris,\
    \ Serving DNS using a\n         Peer-to-Peer Lookup Service, First Int'l Workshop\
    \ on Peer-to-\n         Peer Systems (IPTPS), March 2002.\n   [220] A. Chander,\
    \ S. Dawson, P. Lincoln, and D. Stringer-Calvert,\n         NEVRLATE:  scalable\
    \ resource discovery, Second IEEE/ACM Int'l\n         Symp. on Cluster Computing\
    \ and the Grid CCGRID2002 2002, pp.\n         56-65.\n   [221] M. Balazinska,\
    \ H. Balakrishnan, and D. Karger, INS/Twine:  A\n         scalable Peer-to-Peer\
    \ architecture for Intentional Resource\n         Discovery, Proc. First Int'l\
    \ Conf. on Pervasive Computing\n         (IEEE) (2002)\n   [222] J. Kangasharju,\
    \ K. Ross, and D. Turner, Secure and resilient\n         peer-to-peer E-mail:\
    \ design and implementation, Proc. Third\n         Int'l IEEE Conf. on Peer-to-Peer\
    \ Computing, 1-3 Sept 2003.\n   [223] V. Lo, D. Zappala, D. Zhou, Y. Liu, and\
    \ S. Zhao, Cluster\n         computing on the fly: P2P scheduling of idle cycles\
    \ in the\n         internet, The 3rd Int'l Workshop on Peer-to-Peer Systems,\n\
    \         February 26-27 2004.\n   [224] A. Iamnitchi, I. Foster, and D. Nurmi,\
    \ A peer-to-peer approach\n         to resource discovery in grid environments,\
    \ IEEE High\n         Performance Distributed Computing 2002.\n   [225] I. Foster\
    \ and A. Iamnitchi, On Death, Taxes and the Convergence\n         of Peer-to-Peer\
    \ and Grid Computing, Second Int'l Workshop on\n         Peer-to-Peer Systems\
    \ IPTPS 03, 20-21 February 2003.\n   [226] W. Hoschek, Peer-to-Peer Grid Databases\
    \ for Web Service\n         Discovery, Concurrency - Practice and Experience (2002)\
    \ 1-7.\n   [227] K. Aberer, A. Datta, and M. Hauswirth, A decentralized public\n\
    \         key infrastructure for customer-to-customer e-commerce, Int'l\n    \
    \     Journal of Business Process Integration and Management (2004)\n   [228]\
    \ S. Ajmani, D. Clarke, C.-H. Moh, and S. Richman, ConChord:\n         Cooperative\
    \ SDSI Certificate Storage and Name Resolution, First\n         Int'l Workshop\
    \ on Peer-to-Peer Systems IPTPS, March 2002.\n   [229] E. Sit, F. Dabek, and J.\
    \ Robertson, UsenetDHT: a low overhead\n         Usenet server, The 3rd Int'l\
    \ Workshop on Peer-to-Peer Systems,\n         February 26-27 2004.\n   [230] H.-Y.\
    \ Hsieh and R. Sivakumar, On transport layer support for\n         peer-to-peer\
    \ networks, The 3rd Int'l Workshop on Peer-to-Peer\n         Systems, February\
    \ 26-27 2004.\n   [231] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana,\n\
    \         Internet indirection infrastructure, Proc. 2002 conference on\n    \
    \     applications, technologies, architectures and protocols for\n         computer\
    \ communications, August 19-23 2002, pp. 73-86.\n   [232] E. Halepovic and R.\
    \ Deters, Building a P2P forum system with\n         JXTA, Proc. Second IEEE Int'l\
    \ Conf. on Peer to Peer Computing\n         P2P'02, September 5-7 2002.\n   [233]\
    \ M. Wawrzoniak, L. Peterson, and T. Roscoe, Sophia: an\n         Information\
    \ Plane for networked systems, ACM SIGCOMM Computer\n         Communication Review\
    \ 34 (1) (2004) 15-20.\n   [234] D. Tran, K. Hua, and T. Do, A Peer-to-Peer Architecture\
    \ for\n         Media Streaming, IEEE Journal on Selected Areas in\n         Communications\
    \ 22 (1) (2004) 121-133.\n   [235] V. Padmanabhan, H. Wang, and P. Chou, Supporting\
    \ heterogeneity\n         and congestion control in peer-to-peer multicast streaming,\
    \ The\n         3rd Int'l Workshop on Peer-to-Peer Systems, February 26-27\n \
    \        2004.\n   [236] A. Nicolosi and D. Mazieres, Secure acknowledgment of\
    \ multicast\n         messages in open peer-to-peer networks, The 3rd Int'l Workshop\n\
    \         on Peer-to-Peer Systems, February 26-27 2004.\n   [237] R. Zhang and\
    \ C. Hu, Borg: a hybrid protocol for scalable\n         application-level multicast\
    \ in peer-to-peer networks, Proc.\n         13th international workshop on network\
    \ and operating systems\n         for digital audio and video 2003, pp. 172-179.\n\
    \   [238] M. Sasabe, N. Wakamiya, M. Murata, and H. Miyahara, Scalable\n     \
    \    and continuous media streaming on peer-to-peer networks, Proc.\n        \
    \ Third Int'l IEEE Conf. on Peer-to-Peer Computing, Sept 1-3\n         2003, pp.\
    \ 92-99.\n   [239] M. Hefeeda, A. Habib, B. Botev, D. Xu, and B. Bhargava,\n \
    \        PROMISE: peer-to-peer media streaming using CollectCast, Proc.\n    \
    \     eleventh ACM international conference on multimedia 2003, pp.\n        \
    \ 45-54.\n   [240] M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron,\n\
    \         and A. Singh, SplitStream:  high-bandwidth multicast in\n         cooperative\
    \ environments, Proc. 19th ACM symposium on operating\n         systems principles\
    \ 2003, pp. 298-313.\n   [241] M. Castro, P. Druschel, A.-M. Kermarrec, and A.\
    \ Rowstron,\n         SCRIBE: a large-scale and decentralized application-level\n\
    \         multicast infrastructure, IEEE Journal on Selected Areas in\n      \
    \   Communications 20 (8) (2002)\n   [242] S. Zhuang, B. Zhao, A. Joseph, R. Katz,\
    \ and J. Kubiatowicz,\n         Bayeux: an architecture for scalable and fault-tolerant\
    \ wide-\n         area data dissemination, Proc. 11th ACM international workshop\n\
    \         on network and operating systems support for digital audio and\n   \
    \      video, Jan 2001.\n   [243] R. Lienhart, M. Holliman, Y.-K. Chen, I. Kozintsev,\
    \ and M.\n         Yeung, Improving media services on P2P networks, IEEE Internet\n\
    \         Computing 6 (1) (2002) 58-67.\n   [244] S. Ratnasamy, B. Karp, S. Shenker,\
    \ D. Estrin, R. Govindan, L.\n         Yin, and F. Yu, Data Centric Storage in\
    \ Sensornets with GHT, a\n         geographic hash table, Mobile Networks and\
    \ Applications 8 (4)\n         (2003) 427-442.\n   [245] M. Demirbas and H. Ferhatosmanoglu,\
    \ Peer-to-peer spatial\n         queries in sensor networks, Proc. Third Int'l\
    \ IEEE Conf. on\n         Peer-to-Peer Computing, 1-3 Sept 2003, pp. 32-39.\n\
    \   [246] S. Ratnasamy, B. Karp, L. Yin, F. Yu, D. Estrin, R. Govindan,\n    \
    \     and S. Shenker, GHT:  a geographic hash table for data-centric\n       \
    \  storage, Proc. First ACM Int'l Workshop on Wireless Sensor\n         Networks\
    \ and Applications (Mobicom) 2002, pp. 78-87.\n   [247] J. Hellerstein and W.\
    \ Wang, Optimization of In-Network Data\n         Reduction, Proc. First Workshop\
    \ on Data Management for Sensor\n         Networks DMSN 2004, August 30th 2004.\n\
    \   [248] J. Li, J. Stribling, T. Gil, R. Morris, and F. Kaashoek,\n         Comparing\
    \ the performance of distributed hash tables under\n         churn, The 3rd Int'l\
    \ Workshop on Peer-to-Peer Systems, February\n         26-27 2004.\n   [249] S.\
    \ Shenker, The data-centric revolution in networking, Keynote\n         Speech,\
    \ 29th Int'l Conf. on Very Large Data Bases, September\n         9-12 2003.\n\
    \   [250] S. Gribble, A. Halevy, Z. Ives, M. Rodrig, and D. Suciu, What\n    \
    \     can databases do for P2P?, Proc.  Fourth Int'l Workshop on\n         Databases\
    \ and the Web, WebDB2001, May 24-25 2001.\n   [251] D. Clark, The design philosophy\
    \ of the DARPA internet\n         protocols, ACM SIGCOMM Computer Communication\
    \ Review, Symp.\n         proceedings on communications architectures and protocols\
    \ 18\n         (4) (1988)\n   [252] J.-C. Laprie, Dependable Computing and Fault\
    \ Tolerance:\n         Concepts and Terminology, Twenty-Fifth Int'l Symp. on Fault-\n\
    \         Tolerant Computing, Highlights from Twenty-Five Years 1995, pp.\n  \
    \       2-13.\n   [253] D. Clark, J. Wroclawski, K. Sollins, and R. Braden, Tussle\
    \ in\n         cyberspace:  defining tomorrow's internet, Conf. on\n         Applications,\
    \ Technologies, Architectures and Protocols for\n         Computer Communications\
    \ 2002, pp. 347-356.\n   [254] L. O. Alima, A. Ghodsi, and S. Haridi, \"A framework\
    \ for\n         structured peer-to-peer overlay networks,\" in Global computing,\n\
    \         vol. 3267, Lecture Notes in Computer Science: Springer Berlin /\n  \
    \       Heidelberg, 2005, pp. 223-249.\n   [255] Clip2, The Gnutella Protocol\
    \ Specification,\n         http://www.clip2.com (2000)\n   [256] Napster, http://www.napster.com\
    \ (1999)\n   [257] J. Mishchke and B. Stiller, A methodology for the design of\n\
    \         distributed search in P2P middleware, IEEE Network 18 (1)\n        \
    \ (2004) 30-37.\n   [258] J. Li and K. Sollins, Implementing aggregation and broadcast\n\
    \         over distributed hash tables.  Full report,\n         http://krs.lcs.mit.edu/regions/docs.html\
    \ (November) (2003)\n   [259] M. Castro, M. Costa, and A. Rowstron, Should we\
    \ build Gnutella\n         on a structured overlay?, ACM SIGCOMM Computer Communication\n\
    \         Review 34 (1) (2004) 131-136.\n   [260] A. Singla and C. Rohrs, Ultrapeers:\
    \ Another Step Towards\n         Gnutella Scalability,\n         http://groups.yahoo.com/group/the_gdf/files/Proposals/\n\
    \         Working%20Proposals/Ultrapeer/ Version 1.0, 26 November (2002)\n   [261]\
    \ B. Cooper and H. Garcia-Molina, Ad hoc, Self-Supervising Peer-\n         to-Peer\
    \ Search Networks, Technical Report,\n         http://www.cc.gatech.edu/~cooperb/odin/\
    \ 2003.\n   [262] R. Baeza-Yates and B. Ribeiro-Neto, Modern Information\n   \
    \      Retrieval.  Addison Wesley, Essex, England, 1999.\n   [263] S. Sen and\
    \ J. Wang, Analyzing peer-to-peer traffic across large\n         networks, IEEE/ACM\
    \ Trans. on Networking 12 (2) (2004) 219-232.\n   [264] H. Balakrishnan, S. Shenker,\
    \ and M. Walfish, Semantic-Free\n         Referencing in Linked Distributed Systems,\
    \ Second Int'l\n         Workshop on Peer-to-Peer Systems IPTPS 03, 20-21 February\
    \ 2003.\n   [265] B. Yang, P. Vinograd, and H. Garcia-Molina, Evaluating GUESS\n\
    \         and non-forwarding peer-to-peer search, The 24th Int'l Conf. on\n  \
    \       Distributed Computing Systems ICDCS'04, Mar 23-26 2004.\n   [266] A. Gupta,\
    \ B. Liskov, and R. Rodrigues, One Hop Lookups for\n         Peer-to-Peer Overlays,\
    \ 9th Workshop on Hot Topics in Operating\n         Systems (HotOS), 18-21 May\
    \ 2003.\n   [267] A. Gupta, B. Liskov, and R. Rodrigues, Efficient routing for\n\
    \         peer-to-peer overlays, First symp. on Networked Systems Design\n   \
    \      and Implementation (NSDI), Mar 29-31 2004, pp. 113-126.\n   [268] A. Mizrak,\
    \ Y. Cheng, V. Kumar, and S. Savage, Structured\n         superpeers: leveraging\
    \ heterogeneity to provide constant-time\n         lookup, IEEE Workshop on Internet\
    \ Applications, June 23-24\n         2003.\n   [269] L. Adamic, R. Lukose, A.\
    \ Puniyani, and B. Huberman, Search in\n         power-law networks, Physical\
    \ review E, The American Physical\n         Society 64 (046135) (2001)\n   [270]\
    \ F. Banaei-Kashani and C. Shahabi, Criticality-based analysis\n         and design\
    \ of unstructured peer-to-peer networks as \"complex\n         systems\", Proc.\
    \ 3rd IEEE/ACM Int'l Symp. on Cluster Computing\n         and the Grid 2003, pp.\
    \ 351-358.\n   [271] KaZaa, KaZaa Media Desktop, www.kazaa.com (2001)\n   [272]\
    \ S. Sen and J. Wang, Analyzing peer-to-peer traffic across large\n         networks,\
    \ Proc. second ACM SIGCOMM workshop on Internet\n         measurement, November\
    \ 06-08 2002, pp. 137-150.\n   [273] DirectConnect, http:www.neo-modus.com (2001)\n\
    \   [274] S. Saroiu, K. Gummadi, R. Dunn, S. Gribble, and H. Levy, An\n      \
    \   analysis of Internet content delivery systems, ACM SIGOPS\n         Operating\
    \ Systems Review 36 (2002) 315-327.\n   [275] A. Loo, The Future or Peer-to-Peer\
    \ Computing, Communications of\n         the ACM 46 (9) (2003) 56-61.\n   [276]\
    \ B. Yang and H. Garcia-Molina, Comparing Hybrid Peer-to-Peer\n         Systems\
    \ (extended), 27th Int'l Conf. on Very Large Data Bases,\n         September 11-14\
    \ 2001.\n   [277] D. Scholl, OpenNap Home Page, http://opennap.sourceforge.net/\n\
    \         (2001)\n   [278] S. Ghemawat, H. Gobioff, and S.-T. Leung, The Google\
    \ file\n         system, Proc. 19th ACM symposium on operating systems\n     \
    \    principles 2003, pp. 29-43.\n   [279] I. Clarke, S. Miller, T. Hong, O. Sandberg,\
    \ and B. Wiley,\n         Protecting Free Expression Online with Freenet, IEEE\
    \ Internet\n         Computing 6 (1) (2002)\n   [280] J. Mache, M. Gilbert, J.\
    \ Guchereau, J. Lesh, F. Ramli, and M.\n         Wilkinson, Request algorithms\
    \ in Freenet-style peer-to-peer\n         systems, Proc. Second IEEE Int'l Conf.\
    \ on Peer to Peer\n         Computing P2P'02, September 5-7 2002.\n   [281] C.\
    \ Rohrs, Query Routing for the Gnutella Networks,\n         http://www.limewire.com/developer/query_routing/\n\
    \         keyword%20routing.htm Version 1.0 (2002)\n   [282] I. Clarke, Freenet's\
    \ Next Generation Routing Protocol,\n         http://freenetproject.org/index.php?page=ngrouting,\
    \ 20th July\n         2003.\n   [283] A. Z. Kronfol, FASD: A fault-tolerant, adaptive\
    \ scalable\n         distributed search engine, Master's Thesis\n         http://www.cs.princeton.edu/~akronfol/fasd/\
    \ 2002.\n   [284] S. Gribble, E. Brewer, J. M. Hellerstein, and D. Culler,\n \
    \        Scalable, Distributed Data Structures for Internet Service\n        \
    \ Construction, Proc. 4th Symp. on Operating Systems Design and\n         Implementation\
    \ OSDI 2000, October 2000.\n   [285] K. Aberer, Efficient Search in Unbalanced,\
    \ Randomized Peer-to-\n         Peer Search Trees, EPFL Technical Report IC/2002/79\
    \ (2002)\n   [286] R. Honicky and E. Miller, A fast algorithm for online placement\n\
    \         and reorganization of replicated data, Proc. 17th Int'l\n         Parallel\
    \ and Distributed Processing Symp., April 2003.\n   [287] G. S. Manku, Routing\
    \ networks for distributed hash tables,\n         Proc. 22nd annual ACM Symp.\
    \ on Principles of Distributed\n         Computing, PODC 2003, July 13-16 2003,\
    \ pp. 133-142.\n   [288] D. Lewin, Consistent hashing and random trees: algorithms\
    \ for\n         caching in distributed networks, Master's Thesis, Department of\n\
    \         Electrical Engineering and Computer Science, Massachusetts\n       \
    \  Institute of Technology (1998)\n   [289] S. Lei and A. Grama, Extended consistent\
    \ hashing: a framework\n         for distributed servers, Proc. 24th Int'l Conf.\
    \ on Distributed\n         Computing Systems ICDCS 2004, March 23-26 2004.\n \
    \  [290] W. Litwin, Re: Chord & LH*, Email to Ion Stoica, March 23\n         2004a.\n\
    \   [291] J. Li, J. Stribling, R. Morris, F. Kaashoek, and T. Gil, A\n       \
    \  performance vs. cost framework for evaluating DHT design\n         tradeoffs\
    \ under churn, Proc. IEEE Infocom, Mar 13-17 2005.\n   [292] S. Zhuang, D. Geels,\
    \ I. Stoica, and R. Katz, On failure\n         detection algorithms in overlay\
    \ networks, Proc. IEEE Infocomm,\n         Mar 13-17 2005.\n   [293] X. Li, J.\
    \ Misra, and C. G. Plaxton, Active and Concurrent\n         Topology Maintenance,\
    \ The 18th Annual Conf. on Distributed\n         Computing (DISC 2004), Trippenhuis,\
    \ Amsterdam, the Netherlands,\n         October 4 - October 7 (2004)\n   [294]\
    \ K. Aberer, L. O. Alima, A. Ghodsi, S. Girdzijauskas, M.\n         Hauswirth,\
    \ and S. Haridi, The essence of P2P: a reference\n         architecture for overlay\
    \ networks, Proc. of the 5th\n         international conference on peer-to-peer\
    \ computing, Aug 31-Sep\n         2 2005.\n   [295] C. Tang, M. Buco, R. Chang,\
    \ S. Dwarkadas, L. Luan, E. So, and\n         C. Ward, Low traffic overlay networks\
    \ with large routing\n         tables, Proc. of ACM Sigmetrics Int'l Conf. on\
    \ Measurement and\n         Modeling of Comp. Sys., Jun 6-10 2005, pp. 14-25.\n\
    \   [296] S. Rhea, D. Geels, T. Roscoe, and J. Kubiatowicz, Handling\n       \
    \  churn in a DHT, Proc. of the USENIX Annual Technical\n         Conference,\
    \ June 2004.\n   [297] C. Blake and R. Rodrigues, High Availability, Scalable\
    \ Storage,\n         Dynamic Peer Networks:  Pick Two, 9th Workshop on Hot Topics\
    \ in\n         Operating Systems (HotOS), Lihue, Hawaii, 18-21 May (2003)\n  \
    \ [298] S. Rhea, B. Godfrey, B. Karp, J. Kubiatowicz, S. Ratnasamy, S.\n     \
    \    Shenker, I. Stoica, and H. Yu, OpenDHT: a public DHT service\n         and\
    \ its uses, Proc. of the conf. on Applications, technologies,\n         architectures\
    \ and protocols for computer communications, Aug\n         22-26 2005, pp. 73-84.\n\
    \   [299] T. Gil, F. Kaashoek, J. Li, R. Morris, and J. Stribling,\n         p2psim,\
    \ a simulator for peer-to-peer protocols,\n         http://www.pdos.lcs.mit.edu/p2psim/\
    \ (2003)\n   [300] K. Hildrum, J. D. Kubiatowicz, S. Rao, and B. Y. Zhao,\n  \
    \       Distributed object location in a dynamic network, Theory of\n        \
    \ Computing Systems (2004)\n   [301] N. Lynch, D. Malkhi, and D. Ratajczak, Atomic\
    \ data access in\n         distributed hash tables, Proc. Int'l Peer-to-Peer Symp.,\
    \ March\n         7-8 2002.\n   [302] S. Gilbert, N. Lynch, and A. Shvartsman,\
    \ RAMBO II: Rapidly\n         Reconfigurable Atomic Memory for Dynamic Networks,\
    \ Technical\n         Report, MIT-CSAIL-TR-890 2004.\n   [303] N. Lynch and I.\
    \ Stoica, MultiChord: A resilient namespace\n         management algorithm, Technical\
    \ Memo MIT-LCS-TR-936 2004.\n   [304] J. Risson, K. Robinson, and T. Moors, Fault\
    \ tolerant active\n         rings for structured peer-to-peer overlays, Proc.\
    \ of the 30th\n         Annual IEEE Conf. on Local Computer Networks, Nov 15-17\
    \ 2005,\n         pp. 18-25.\n   [305] B. Awerbuch and C. Scheideler, Peer-to-peer\
    \ systems for prefix\n         search, Proc. 22nd annual ACM Symp. on Principles\
    \ of\n         Distributed Computing 2003, pp. 123-132.\n   [306] F. Dabek, B.\
    \ Zhao, P. Druschel, J. Kubiatowicz, and I. Stoica,\n         Towards a common\
    \ API for structured P2P overlays, Proc. Second\n         Int'l Workshop on Peer\
    \ to Peer Systems IPTPS 2003, February\n         2003.\n   [307] N. Feamster and\
    \ H. Balakrishnan, Towards a logic for wide-area\n         Internet routing, Proc.\
    \ ACM SIGCOMM workshop on Future\n         Directions in Network Architecture,\
    \ August 25-27 2003, pp.\n         289-300.\n   [308] B. Ahlgren, M. Brunner,\
    \ L. Eggert, R. Hancock, and S. Schmid,\n         Invariants: a new design methodology\
    \ for network architectures,\n         Proc. ACM SIGCOMM workshop on Future Direction\
    \ in Network\n         Architecture, August 30 2004, pp. 65-70.\n   [309] T. Cormen,\
    \ C. Leiserson, R. Rivest, and C. Stein, Introduction\n         to Algorithms,\
    \ 2nd Edition. MIT Press, McGraw-Hill, Cambridge,\n         London, England, 2003.\n\
    \   [310] I. Abraham, D. Malkhi, and O. Dubzinski, LAND:Stretch\n         (1+epsilon)\
    \ Locality Aware Networks for DHTs, Proc. ACM-SIAM\n         Symp. on Discrete\
    \ Algorithms SODA-04 2004.\n   [311] S. Jain, R. Mahajan, and D. Wetherall, A\
    \ study of the\n         performance potential of DHT-based overlays, Proc. of\
    \ the 4th\n         Usenix symposium on internet technologies and systems (USITS),\n\
    \         Mar 2003.\n   [312] J. Risson, A. Harwood, and T. Moors, Stable high-capacity\
    \ one-\n         hop distributed hash tables, Proc. of the IEEE Symposium on\n\
    \         Computers and Communications (ISCC'06), Jun 26-29 2006.\n   [313] V.\
    \ Ramasubramanian and E. Sirer, Beehive: O(1) Lookup\n         Performance for\
    \ Power-Law Query Distributions in Peer-to-Peer\n         Overlays, Proc. First\
    \ Symp. on Networked Systems Design and\n         Implementation (NSDI'04), San\
    \ Francisco, California, March\n         29-31 (2004) 99-112.\n   [314] I. Abraham,\
    \ A. Badola, D. Bickson, D. Malkhi, S. Maloo, and S.\n         Ron, Practical\
    \ locality-awareness for large scale information\n         sharing, Proc. 4th\
    \ International Workshop on Peer-to-Peer\n         Systems, Feb 24-25 2005.\n\
    \   [315] B. Leong, B. Liskov, and E. Demaine, Epichord: parallelizing\n     \
    \    the Chord lookup algorithm with reactive routing state\n         management,\
    \ Proc. of the 12th International Conference on\n         Networks, Nov 2004.\n\
    \   [316] J. Li, J. Stribling, R. Morris, and F. Kaashoek, Bandwidth-\n      \
    \   efficient management of DHT routing tables, Proc. 2nd Symposium\n        \
    \ on Networked Systems Design and Implementation, May 2-4 2005.\n   [317] S. Rhea,\
    \ B.-G. Chun, J. Kubiatowicz, and S. Shenker, Fixing the\n         embarrassing\
    \ slowness of OpenDHT on PlanetLab, Proc. of the\n         Second USENIX Workshop\
    \ on Real, Large Distributed Systems, Dec\n         13 2005.\n   [318] M. Costa,\
    \ M. Castro, A. Rowstron, and P. Key, PIC: Practical\n         Internet coordinates\
    \ for distance estimation, Proc. of the 24th\n         international conference\
    \ on distributed computing systems, Mar\n         2004.\n   [319] M. Castro, M.\
    \ B. Jones, A.-M. Kermarrec, A. Rowstron, M.\n         Theimer, H. Wang, and A.\
    \ Wolman, An evaluation of scalable\n         application- level multicast built\
    \ using peer-to-peer overlays,\n         Proc. of the 22nd Annual Joint Conf.\
    \ of the IEEE Comp. and\n         Comm. Soc. (INFOCOM), 30 Mar - 3 Apr 2003, pp.\
    \ 1510-1520.\n   [320] S. Ratnasamy, M. Handley, R. Karp, and S. Shenker,\n  \
    \       Application-level multicast using content-addressable networks,\n    \
    \     Proc. of the Third International Workshop on Networked Group\n         Communication,\
    \ Nov 7-9 2001.\n   [321] S. El-Ansary, L. Alima, P. Brand, and S. Haridi, Efficient\n\
    \         broadcast in structured P2P networks, Second Int'l Workshop on\n   \
    \      Peer-to-Peer Systems (IPTPS 03), Berkeley, CA, USA, 20-21\n         February\
    \ (2003)\n   [322] J. Li, K. Sollins, and D.-Y. Lim, Implementing aggregation\
    \ and\n         broadcast over Distributed Hash Tables, ACM Computer\n       \
    \  Communication Reviews 35 (1) (2005) 81-92.\n   [323] V. Pai, K. Tamilmani,\
    \ V. Sambamurthy, K. Kumar, and A. Mohr,\n         Chainsaw: eliminating trees\
    \ from overlay multicast, Proc. 4th\n         Int'l Workshop on Peer-to-Peer Systems,\
    \ February 24-25 2005.\n   [324] K. Birman, M. Hayden, O. Ozkasap, Z. Xiao, and\
    \ M. Budiu,\n         Bimodal Multicast, ACM Trans. on Computer Systems 17 (2)\
    \ (1999)\n         41-88.\n   [325] Z. Zhang, S. Chen, Y. Ling, and R. Chow, Resilient\
    \ capacity-\n         aware multicasting based on overlay networks, Proc. of the\
    \ 25th\n         IEEE Int'l Conf. on Distributed Computing Systems, 6-10 June\n\
    \         2005, pp. 565-574.\n   [326] A. Bharambe, S. Rao, V. Padmanabhan, S.\
    \ Seshan, and H. Zhang,\n         The impact of heterogeneous bandwidth constraints\
    \ on DHT-based\n         multicast protocols, Proc. 4th Int'l Workshop on Peer-to-Peer\n\
    \         Systems, February 24-25 2005.\n   [327] A. Ghodsi, L. O. Alima, S. El-Ansary,\
    \ P. Brand, and S. Haridi,\n         Self-correcting broadcast in distributed\
    \ hash tables, Proc. of\n         the 15th IASTED International Conf. on Parallel\
    \ and Distributed\n         Computing and Systems, Nov 2003.\n   [328] R. Mahajan,\
    \ M. Castro, and A. Rowstron, Controlling the cost of\n         reliability in\
    \ peer-to-peer overlays, Second Int'l Workshop on\n         Peer-to-Peer Systems\
    \ IPTPS'03, February 20-21 2003.\n   [329] S. Rhea, D. Geels, T. Roscoe, and J.\
    \ Kubiatowicz, Handling\n         churn in a DHT, Report No. UCB/CSD-03-1299,\
    \ University of\n         California, also Proc. USENIX Annual Technical Conference,\
    \ June\n         2003.\n   [330] M. Castro, M. Costa, and A. Rowstron, Performance\
    \ and\n         dependability of structured peer-to-peer overlays, Microsoft\n\
    \         Research Technical Report MSR-TR-2003-94, December. Also 2004\n    \
    \     Int'l Conf. on Dependable Systems and Networks, June 28-July 1\n       \
    \  2003.\n   [331] D. Liben-Nowell, H. Balakrishnan, and D. Karger, Analysis of\n\
    \         the evolution of peer-to-peer systems, Annual ACM Symp. on\n       \
    \  Principles of Distributed Computing 2002, pp. 233-242.\n   [332] L. Alima,\
    \ S. El-Ansary, P. Brand, and S. Haridi, DKS(N,k,f): a\n         family of low\
    \ communication, scalable and fault-tolerant\n         infrastructures for P2P\
    \ applications, Proc. 3rd IEEE/ACM Int'l\n         Symp. on Cluster Computing\
    \ and the Grid (2003) 344-350.\n   [333] D. Karger and M. Ruhl, Finding nearest\
    \ neighbours in growth-\n         restricted metrics, Proc. 34th annual ACM symposium\
    \ on Theory\n         of computing 2002, pp. 741-750.\n   [334] S. Ratnasamy,\
    \ A Scalable Content-Addressable Network, Doctoral\n         Dissertation 2002.\n\
    \   [335] S. McCanne and S. Floyd, The LBNL/UCB Network Simulator.\n   [336] M.\
    \ Naor and U. Wieder, Novel architectures for P2P\n         applications: the\
    \ continuous-discrete approach, Proc. fifteenth\n         annual ACM Symp. on\
    \ Parallel Algorithms and Architectures, SPAA\n         2003, June 7-9 2003, pp.\
    \ 50-59.\n   [337] N. D. de Bruijn, A combinatorial problem, Koninklijke\n   \
    \      Netherlands: Academe Van Wetenschappen 49 (1946) 758-764.\n   [338] J.-W.\
    \ Mao, \"The Coloring and Routing Problems on de Bruijn\n         Interconnection\
    \ Networks,\" in Doctoral Dissertation, National\n         Sun Yat-sen University,\
    \ 2003.\n   [339] M. L. Schlumberger, De Bruijn communication networks, Doctoral\n\
    \         Dissertation 1974.\n   [340] M. Imase and M. Itoh, Design to minimize\
    \ diameter on building-\n         block network, IEEE Trans. on Computers C-30\
    \ (6) (1981) 439-\n         442.\n   [341] S. M. Reddy, D. K. Pradhan, and J.\
    \ G. Kuhl, Direct graphs with\n         minimal and maximal connectivity, Technical\
    \ Report, School of\n         Engineering, Oakland University (1980)\n   [342]\
    \ R. A. Rowley and B. Bose, Fault-tolerant ring embedding in de\n         Bruijn\
    \ networks, IEEE Trans. on Computers 42 (12) (1993) 1480-\n         1486.\n  \
    \ [343] K. Y. Lee, G. Liu, and H. F. Jordan, Hierarchical networks for\n     \
    \    optical communications, Journal of Parallel and Distributed\n         Computing\
    \ 60 (2000) 1-16.\n   [344] M. Naor and U. Wieder, Know thy neighbor's neighbor:\
    \  better\n         routing for skip-graphs and small worlds, The 3rd Int'l\n\
    \         Workshop on Peer-to-Peer Systems, February 26-27 2004.\n   [345] P.\
    \ Fraigniaud and P. Gauron, The content-addressable networks\n         D2B, Technical\
    \ Report 1349, Laboratoire de Recherche en\n         Informatique, January 2003.\n\
    \   [346] A. Datta, S. Girdzijauskas, and K. Aberer, On de Bruijn routing\n  \
    \       in distributed hash tables: there and back again, Proc. Fourth\n     \
    \    IEEE Int'l Conf. on Peer-to-Peer Computing, , 25-27 August\n         2004.\n\
    \   [347] W. Pugh, Skip lists: a probabilistic alternative to balanced\n     \
    \    trees, Proc. Workshop on Algorithms and Data Structures, August\n       \
    \  17-19 1989, pp. 437-449.\n   [348] W. Pugh, Skip lists: a probabilistic alternative\
    \ to balanced\n         trees, Communications of the ACM 33 (6) (1990) 668-676.\n\
    \   [349] J. Gray, The transaction concept: Virtues and limitations,\n       \
    \  Proc. VLDB, September 1981.\n   [350] B. T. Loo, J. M. Hellerstein, R. Huebsch,\
    \ S. Shenker, and I.\n         Stoica, Enhancing P2P file-sharing with internet-scale\
    \ query\n         processor, Proc. 30th Int'l Conf. on Very Large Data Bases VLDB\n\
    \         2004, 29 August-3 September 2004.\n   [351] M. Stonebraker, P. Aoki,\
    \ W. Litwin, A. Pfeffer, A. Sah, J.\n         Sidell, C. Staelin, and A. Yu, Mariposa:\
    \ a wide-area\n         distributed database system, THE VLDB Journal - The Int'l\n\
    \         Journal of Very Large Data Bases (5) (1996) 48-63.\n   [352] V. Cholvi,\
    \ P. Felber, and E. Biersack, Efficient Search in\n         Unstructured Peer-to-Peer\
    \ Networks, Proc. Symp. on Parallel\n         Algorithms and Architectures, July\
    \ 2004.\n   [353] S. Daswani and A. Fisk, Gnutella UDP Extension for Scalable\n\
    \         Searches (GUESS) v0.1,\n         http://www.limewire.org/fisheye/viewrep/~raw,r=1.2/limecvs/\n\
    \         core/guess_01.html (2002)\n   [354] A. Fisk, Gnutella Dynamic Query\
    \ Protocol v0.1, Gnutella\n         Developer Forum (2003)\n   [355] O. Gnawali,\
    \ A Keyword Set Search System for Peer-to-Peer\n         Networks, Master's Thesis\
    \ 2002.\n   [356] Limewire, Limewire Host Count,\n         http://www.limewire.com/english/content/netsize.shtml\
    \ (2004)\n   [357] A. Fisk, Gnutella Ultrapeer Query Routing,\n         http://groups.yahoo.com/group/the_gdf/files/Proposals/\n\
    \         Working%20Proposals/search/Ultrapeer%20QRP/ v0.1 (2003)\n   [358] A.\
    \ Fisk, Gnutella Dynamic Query Protocol,\n         http://groups.yahoo.com/group/the_gdf/files/Proposals/\n\
    \         Working%20Proposals/search/Dynamic%20Querying/ v0.1 (2003)\n   [359]\
    \ S. Thadani, Meta Data searches on the Gnutella Network\n         (addendum),\
    \ http://www.limewire.com/developer/MetaProposal2.htm\n         (2001)\n   [360]\
    \ S. Thadani, Meta Information Searches on the Gnutella Networks,\n         http://www.limewire.com/developer/metainfo_searches.html\
    \ (2001)\n   [361] P. Reynolds and A. Vahdat, Efficient peer-to-peer keyword\n\
    \         searching, ACM/IFP/USENIX Int'l Middleware Conference,\n         Middleware\
    \ 2003, June 16-20 2003.\n   [362] W. Terpstra, S. Behnel, L. Fiege, J. Kangasharju,\
    \ and A.\n         Buchmann, Bit Zipper Rendezvous, optimal data placement for\n\
    \         general P2P queries, Proc. First Int'l Workshop on Peer-to-Peer\n  \
    \       Computing and Databases, March 14 2004.\n   [363] A. Singhal, Modern Information\
    \ Retrieval: A Brief Overview,\n         IEEE Data Engineering Bulletin 24 (4)\
    \ (2001) 35-43.\n   [364] E. Cohen, A. Fiat, and H. Kaplan, Associative Search\
    \ in Peer to\n         Peer Networks: Harnessing Latent Semantics, IEEE Infocom\
    \ 2003,\n         The 22nd Annual Joint Conf. of the IEEE Computer and\n     \
    \    Communications Societies, March 30-April 3 2003.\n   [365] W. Muller and\
    \ A. Henrich, Fast retrieval of high-dimensional\n         feature vectors in\
    \ P2P networks using compact peer data\n         summaries, Proc. 5th ACM SIGMM\
    \ international workshop on\n         Multimedia Information Retrieval, November\
    \ 7 2003, pp. 79-86.\n   [366] M. T. Ozsu and P. Valduriez, Principles of Distributed\
    \ Database\n         Systems, 2nd edition ed. Prentice Hall, 1999.\n   [367] G.\
    \ Salton, A. Wong, and C. S. Yang, A vector space model for\n         automatic\
    \ indexing, Communications of the ACM 18 (11) (1975)\n         613- 620.\n   [368]\
    \ S. E. Robertson, S. Walker, and M. Beaulieu, Okapi at TREC-7:\n         automatic\
    \ ad hoc, filtering, VLC and filtering tracks, Proc.\n         Seventh Text REtrieval\
    \ Conference, TREC-7, NIST Special\n         Publication 500-242, July 1999, pp.\
    \ 253-264.\n   [369] A. Singhal, J. Choi, D. Hindle, D. Lewis, and F. Pereira,\
    \ AT&T\n         at TREC-7, Proc. Seventh Text REtrieval Conf. TREC-7, July\n\
    \         1999, pp. 253-264.\n   [370] K. Sankaralingam, S. Sethumadhavan, and\
    \ J. Browne, Distributed\n         Pagerank for P2P Systems, Proc. 12th international\
    \ symposium on\n         High Performance Distributed Computing HPDC, June 22-24\
    \ 2003.\n   [371] I. Klampanos and J. Jose, An architecture for information\n\
    \         retrieval over semi-collaborated peer-to-peer networks, Proc.\n    \
    \     2004 ACM symposium on applied computing 2004, pp. 1078-1083.\n   [372] C.\
    \ Tang, Z. Xu, and S. Dwarkadas, Peer-to-peer information\n         retrieval\
    \ using self-organizing semantic overlay networks,\n         Proc. 2003 conference\
    \ on Applications, Technologies,\n         Architectures and Protocols for Computer\
    \ Communications, August\n         25-29 2003, pp. 175-186.\n   [373] C. Tang\
    \ and S. Dwarkadas, Hybrid global-local indexing for\n         efficient peer-to-peer\
    \ information retrieval, Proc. First Symp.\n         on Networked Systems Design\
    \ and Implementation NSDI'04, March\n         29-31 2004, pp. 211-224.\n   [374]\
    \ G. W. Furnas, S. Deerwester, S. T. Dumais, T. K. Landauer, R.\n         A. Harshman,\
    \ L. A. Streeter, and K. E. Lochbaum, Information\n         retrieval using a\
    \ singular value decomposition model of latent\n         semantic structure, Proc.\
    \ 11th Annual Int'l ACM SIGIR Conf. on\n         Research and Development in Information\
    \ Retrieval 1988, pp.\n         465-480.\n   [375] C. Tang, S. Dwarkadas, and\
    \ Z. Xu, On scaling latent semantic\n         indexing for large peer-to-peer\
    \ systems, The 27th Annual Int'l\n         ACM SIGIR Conf. SIGIR'04, ACM Special\
    \ Interest Group on\n         Information Retrieval, July 2004.\n   [376] S. Milgram,\
    \ The small world problem, Psychology Today 1 (61)\n         (1967)\n   [377]\
    \ J. Kleinberg, The small-world phenonemon: An algorithmic\n         perspective,\
    \ Proc. 32nd ACM Symp. on Theory of Computing (2000)\n   [378] Y. Petrakis and\
    \ E. Pitoura, \"On constructing small worlds in\n         unstructured peer-to-peer\
    \ systems,\" in Current trends in\n         database technology (Proc. First Int'l\
    \ Workshop on Peer-to-Peer\n         Computing and Databases, Heraklion, Crete,\
    \ Greece, March 14),\n         vol. 3268, Lecture Notes in Computer Science: Springer,\
    \ 2004,\n         pp. 415-424.\n   [379] A. Iamnitchi, M. Ripeanu, and I. Foster,\
    \ Locating Data in\n         (Small World?) P2P Scientific Collaborations, First\
    \ Int'l\n         Workshop on Peer-to-Peer Systems (IPTPS), Cambridge, MA, March\n\
    \         (2002)\n   [380] Y. Ren, C. Sha, W. Qian, A. Zhou, B. Ooi, and K. Tan,\
    \ Explore\n         the \"small world phenomena\" in pure P2P information sharing\n\
    \         systems, Proc. 3rd IEEE/ACM Int'l Symp. on Cluster Computing\n     \
    \    and the Grid (2003) 232-239.\n   [381] G. S. Manku, M. Bawa, and P. Raghavan,\
    \ Symphony:  Distributed\n         Hashing in a Small World, Proc. 4th USENIX\
    \ Symp. on Internet\n         Technologies and Systems, March 26-28 2003.\n  \
    \ [382] W. Litwin and S. Sahri, Implementing SD-SQL Server: a Scalable\n     \
    \    Distributed Database System, CERIA Research Rerpot 2004-04-02,\n        \
    \ April 2004.\n   [383] M. Jarke and J. Koch, Query Optimization in Database Systems,\n\
    \         ACM Computing Surveys 16 (2) (1984) 111-152.\n   [384] J. L. Bentley,\
    \ Multidimensional binary search trees used for\n         associative searching,\
    \ Communications of the ACM 18 (9) (1975)\n         509-517.\n   [385] B. Chun,\
    \ I. Stoica, J. Hellerstein, R. Huebsch, S. Jeffery, B.\n         T. Loo, S. Mardanbeigi,\
    \ T. Roscoe, S. Rhea, and S. Schenker,\n         Querying at Internet Scale, Proc.\
    \ 2004 ACM SIGMOD international\n         conference on management of data, demonstration\
    \ session 2004,\n         pp. 935-936.\n   [386] P. Cao and Z. Wang, Efficient\
    \ top-K query calculation in\n         distributed networks, Proc. 23rd Annual\
    \ ACM SIGACT-SIGOPS Symp.\n         on Principles of Distributed Computing PODC\
    \ 2004, July 25-28\n         2004, pp. 206-215.\n   [387] D. Psaltoulis, I. Kostoulas,\
    \ I. Gupta, K. Birman, and A.\n         Demers, Practical algorithms for size\
    \ estimation in large and\n         dynamic groups, Proc. Twenty-Third Annual\
    \ ACM SIGACT-SIGOPS\n         Symp. on Principles of Distributed Computing, PODC\
    \ 2004, July\n         25-28 2004.\n   [388] R. van Renesse, The importance of\
    \ aggregation, Springer-Verlag\n         Lecture Notes in Computer Science  \"\
    Future Directions in\n         Distributed Computing\".  A. Schiper, A. A. Shvartsman,\
    \ H.\n         Weatherspoon, and B. Y. Zhao, editors. Springer-Verlag,\n     \
    \    Heidelberg volume 2584 (2003)\n"
- title: Author's Addresses
  contents:
  - "Author's Addresses\n   John Risson\n   School of Elec Eng and Telecommunications\n\
    \   University of New South Wales\n   Sydney NSW 2052 Australia\n   EMail: jr@tuffit.com\n\
    \   Tim Moors\n   School of Elec Eng and Telecommunications\n   University of\
    \ New South Wales\n   Sydney NSW 2052 Australia\n   EMail: t.moors@unsw.edu.au\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
