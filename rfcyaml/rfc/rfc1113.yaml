- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n      Part I --\
    \ Message Encipherment and Authentication Procedures\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC suggests a draft standard elective protocol\
    \ for the Internet\n   community, and requests discussion and suggestions for\
    \ improvements.\n   Distribution of this memo is unlimited.\n"
- title: ACKNOWLEDGMENT
  contents:
  - "ACKNOWLEDGMENT\n   This RFC is the outgrowth of a series of IAB Privacy Task\
    \ Force\n   meetings and of internal working papers distributed for those\n  \
    \ meetings.  I would like to thank the following Privacy Task Force\n   members\
    \ and meeting guests for their comments and contributions at\n   the meetings\
    \ which led to the preparation of this RFC: David\n   Balenson, Curt Barker, Jim\
    \ Bidzos, Matt Bishop, Danny Cohen, Tom\n   Daniel, Charles Fox, Morrie Gasser,\
    \ Russ Housley, Steve Kent\n   (chairman), John Laws, Steve Lipner, Dan Nessett,\
    \ Mike Padlipsky, Rob\n   Shirey, Miles Smid, Steve Walker, and Steve Wilbur.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Executive Summary                                 \
    \              2\n   2.  Terminology                                         \
    \            3\n   3.  Services, Constraints, and Implications               \
    \          3\n   4.  Processing of Messages                                  \
    \        7\n   4.1  Message Processing Overview                              \
    \      7\n   4.1.1  Types of Keys                                            \
    \    7\n   4.1.2  Processing Procedures                                      \
    \  8\n   4.2  Encryption Algorithms and Modes                                9\n\
    \   4.3  Privacy Enhancement Message Transformations                   10\n  \
    \ 4.3.1  Constraints                                                 10\n   4.3.2\
    \  Approach                                                    11\n   4.3.2.1\
    \  Step 1: Local Form                                        12\n   4.3.2.2  Step\
    \ 2: Canonical Form                                    12\n   4.3.2.3  Step 3:\
    \ Authentication and Encipherment                   12\n   4.3.2.4  Step 4: Printable\
    \ Encoding                                13\n   4.3.2.5  Summary of Transformations\
    \                                15\n   4.4  Encapsulation Mechanism         \
    \                              15\n   4.5  Mail for Mailing Lists            \
    \                            17\n   4.6  Summary of Encapsulated Header Fields\
    \                         18\n   4.6.1  Per-Message Encapsulated Header Fields\
    \                      20\n   4.6.1.1  X-Proc-Type Field                     \
    \                    20\n   4.6.1.2  X-DEK-Info Field                        \
    \                  21\n   4.6.2  Encapsulated Header Fields Normally Per-Message\
    \             21\n   4.6.2.1  X-Sender-ID Field                              \
    \           22\n   4.6.2.2  X-Certificate Field                              \
    \         22\n   4.6.2.3  X-MIC-Info Field                                   \
    \       23\n   4.6.3  Encapsulated Header Fields with Variable Occurrences   \
    \     23\n   4.6.3.1  X-Issuer-Certificate Field                             \
    \   23\n   4.6.4  Per-Recipient Encapsulated Header Fields                   \
    \ 24\n   4.6.4.1  X-Recipient-ID Field                                      24\n\
    \   4.6.4.2  X-Key-Info Field                                          24\n  \
    \ 4.6.4.2.1  Symmetric Key Management                                24\n   4.6.4.2.2\
    \  Asymmetric Key Management                               25\n   5.  Key Management\
    \                                                 26\n   5.1  Data Encrypting\
    \ Keys (DEKs)                                   26\n   5.2  Interchange Keys (IKs)\
    \                                        26\n   5.2.1  Subfield Definitions  \
    \                                      28\n   5.2.1.1  Entity Identifier Subfield\
    \                                28\n   5.2.1.2  Issuing Authority Subfield  \
    \                              29\n   5.2.1.3  Version/Expiration Subfield   \
    \                            29\n   5.2.2  IK Cryptoperiod Issues            \
    \                          29\n   6.  User Naming                            \
    \                        29\n   6.1  Current Approach                        \
    \                      29\n   6.2  Issues for Consideration                  \
    \                    30\n   7.  Example User Interface and Implementation    \
    \                  30\n   8.  Areas For Further Study                        \
    \                31\n   9.  References                                       \
    \              32\n   NOTES                                                  \
    \            32\n"
- title: 1.  Executive Summary
  contents:
  - "1.  Executive Summary\n   This RFC defines message encipherment and authentication\
    \ procedures,\n   in order to provide privacy enhancement services for electronic\
    \ mail\n   transfer in the Internet.  It is one member of a related set of four\n\
    \   RFCs.  The procedures defined in the current RFC are intended to be\n   compatible\
    \ with a wide range of key management approaches, including\n   both symmetric\
    \ (secret-key) and asymmetric (public-key) approaches\n   for encryption of data\
    \ encrypting keys.  Use of symmetric\n   cryptography for message text encryption\
    \ and/or integrity check\n   computation is anticipated.  RFC-1114 specifies supporting\
    \ key\n   management mechanisms based on the use of public-key certificates.\n\
    \   RFC-1115 specifies algorithm and related information relevant to the\n   current\
    \ RFC and to RFC-1114.  A subsequent RFC will provide details\n   of paper and\
    \ electronic formats and procedures for the key management\n   infrastructure\
    \ being established in support of these services.\n   Privacy enhancement services\
    \ (confidentiality, authentication, and\n   message integrity assurance) are offered\
    \ through the use of end-to-\n   end cryptography between originator and recipient\
    \ User Agent\n   processes, with no special processing requirements imposed on\
    \ the\n   Message Transfer System at endpoints or at intermediate relay sites.\n\
    \   This approach allows privacy enhancement facilities to be\n   incorporated\
    \ on a site-by-site or user-by-user basis without impact\n   on other Internet\
    \ entities.  Interoperability among heterogeneous\n   components and mail transport\
    \ facilities is supported.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   For descriptive purposes, this RFC uses some terms defined\
    \ in the OSI\n   X.400 Message Handling System Model per the 1984 CCITT\n   Recommendations.\
    \  This section replicates a portion of X.400's\n   Section 2.2.1, \"Description\
    \ of the MHS Model: Overview\" in order to\n   make the terminology clear to readers\
    \ who may not be familiar with\n   the OSI MHS Model.\n   In the MHS model, a\
    \ user is a person or a computer application.  A\n   user is referred to as either\
    \ an originator (when sending a message)\n   or a recipient (when receiving one).\
    \  MH Service elements define the\n   set of message types and the capabilities\
    \ that enable an originator\n   to transfer messages of those types to one or\
    \ more recipients.\n   An originator prepares messages with the assistance of\
    \ his or her\n   User Agent (UA).  A UA is an application process that interacts\
    \ with\n   the Message Transfer System (MTS) to submit messages.  The MTS\n  \
    \ delivers to one or more recipient UAs the messages submitted to it.\n   Functions\
    \ performed solely by the UA and not standardized as part of\n   the MH Service\
    \ elements are called local UA functions.\n   The MTS is composed of a number\
    \ of Message Transfer Agents (MTAs).\n   Operating together, the MTAs relay messages\
    \ and deliver them to the\n   intended recipient UAs, which then make the messages\
    \ available to the\n   intended recipients.\n   The collection of UAs and MTAs\
    \ is called the Message Handling System\n   (MHS).  The MHS and all of its users\
    \ are collectively referred to as\n   the Message Handling Environment.\n"
- title: 3.  Services, Constraints, and Implications
  contents:
  - "3.  Services, Constraints, and Implications\n   This RFC defines mechanisms to\
    \ enhance privacy for electronic mail\n   transferred in the Internet.  The facilities\
    \ discussed in this RFC\n   provide privacy enhancement services on an end-to-end\
    \ basis between\n   sender and recipient UAs.  No privacy enhancements are offered\
    \ for\n   message fields which are added or transformed by intermediate relay\n\
    \   points.\n   Authentication and integrity facilities are always applied to\
    \ the\n   entirety of a message's text.  No facility for confidentiality\n   without\
    \ authentication is provided.  Encryption facilities may be\n   applied selectively\
    \ to portions of a message's contents; this allows\n   less sensitive portions\
    \ of messages (e.g., descriptive fields) to be\n   processed by a recipient's\
    \ delegate in the absence of the recipient's\n   personal cryptographic keys.\
    \  In the limiting case, where the\n   entirety of message text is excluded from\
    \ encryption, this feature\n   can be used to yield the effective combination\
    \ of authentication and\n   integrity services without confidentiality.\n   In\
    \ keeping with the Internet's heterogeneous constituencies and usage\n   modes,\
    \ the measures defined here are applicable to a broad range of\n   Internet hosts\
    \ and usage paradigms.  In particular, it is worth\n   noting the following attributes:\n\
    \      1.  The mechanisms defined in this RFC are not restricted to a\n      \
    \    particular host or operating system, but rather allow\n          interoperability\
    \ among a broad range of systems.  All\n          privacy enhancements are implemented\
    \ at the application\n          layer, and are not dependent on any privacy features\
    \ at\n          lower protocol layers.\n      2.  The defined mechanisms are compatible\
    \ with non-enhanced\n          Internet components.  Privacy enhancements are\
    \ implemented\n          in an end-to-end fashion which does not impact mail\n\
    \          processing by intermediate relay hosts which do not\n          incorporate\
    \ privacy enhancement facilities.  It is\n          necessary, however, for a\
    \ message's sender to be cognizant\n          of whether a message's intended\
    \ recipient implements privacy\n          enhancements, in order that encoding\
    \ and possible\n          encipherment will not be performed on a message whose\n\
    \          destination is not equipped to perform corresponding inverse\n    \
    \      transformations.\n      3.  The defined mechanisms are compatible with\
    \ a range of mail\n          transport facilities (MTAs).  Within the Internet,\n\
    \          electronic mail transport is effected by a variety of SMTP\n      \
    \    implementations.  Certain sites, accessible via SMTP,\n          forward\
    \ mail into other mail processing environments (e.g.,\n          USENET, CSNET,\
    \ BITNET).  The privacy enhancements must be\n          able to operate across\
    \ the SMTP realm; it is desirable that\n          they also be compatible with\
    \ protection of electronic mail\n          sent between the SMTP environment and\
    \ other connected\n          environments.\n      4.  The defined mechanisms are\
    \ compatible with a broad range of\n          electronic mail user agents (UAs).\
    \  A large variety of\n          electronic mail user agent programs, with a corresponding\n\
    \          broad range of user interface paradigms, is used in the\n         \
    \ Internet.  In order that electronic mail privacy\n          enhancements be\
    \ available to the broadest possible user\n          community, selected mechanisms\
    \ should be usable with the\n          widest possible variety of existing UA\
    \ programs.  For\n          purposes of pilot implementation, it is desirable\
    \ that\n          privacy enhancement processing be incorporable into a\n    \
    \      separate program, applicable to a range of UAs, rather than\n         \
    \ requiring internal modifications to each UA with which\n          privacy-enhanced\
    \ services are to be provided.\n      5.  The defined mechanisms allow electronic\
    \ mail privacy\n          enhancement processing to be performed on personal computers\n\
    \          (PCs) separate from the systems on which UA functions are\n       \
    \   implemented.  Given the expanding use of PCs and the limited\n          degree\
    \ of trust which can be placed in UA implementations on\n          many multi-user\
    \ systems, this attribute can allow many users\n          to process privacy-enhanced\
    \ mail with a higher assurance\n          level than a strictly UA-based approach\
    \ would allow.\n      6.  The defined mechanisms support privacy protection of\n\
    \          electronic mail addressed to mailing lists (distribution\n        \
    \  lists, in ISO parlance).\n      7.  The mechanisms defined within this RFC\
    \ are compatible with a\n          variety of supporting key management approaches,\
    \ including\n          (but not limited to) manual pre-distribution, centralized\n\
    \          key distribution based on symmetric cryptography, and the\n       \
    \   use of public-key certificates.  Different key management\n          mechanisms\
    \ may be used for different recipients of a\n          multicast message.  While\
    \ support for a particular key\n          management mechanism is not a minimum\
    \ essential requirement\n          for compatibility with this RFC, adoption of\
    \ the public-key\n          certificate approach defined in companion RFC-1114\
    \ is\n          strongly recommended.\n   In order to achieve applicability to\
    \ the broadest possible range of\n   Internet hosts and mail systems, and to facilitate\
    \ pilot\n   implementation and testing without the need for prior modifications\n\
    \   throughout the Internet, three basic restrictions are imposed on the\n   set\
    \ of measures to be considered in this RFC:\n      1.  Measures will be restricted\
    \ to implementation at endpoints\n          and will be amenable to integration\
    \ at the user agent (UA)\n          level or above, rather than necessitating\
    \ integration into\n          the message transport system (e.g., SMTP servers).\n\
    \      2.  The set of supported measures enhances rather than restricts\n    \
    \      user capabilities.  Trusted implementations, incorporating\n          integrity\
    \ features protecting software from subversion by\n          local users, cannot\
    \ be assumed in general.  In the absence\n          of such features, it appears\
    \ more feasible to provide\n          facilities which enhance user services (e.g.,\
    \ by protecting\n          and authenticating inter-user traffic) than to enforce\n\
    \          restrictions (e.g., inter-user access control) on user\n          actions.\n\
    \      3.  The set of supported measures focuses on a set of functional\n    \
    \      capabilities selected to provide significant and tangible\n          benefits\
    \ to a broad user community.  By concentrating on the\n          most critical\
    \ set of services, we aim to maximize the added\n          privacy value that\
    \ can be provided with a modest level of\n          implementation effort.\n \
    \  As a result of these restrictions, the following facilities can be\n   provided:\n\
    \      1.  disclosure protection,\n      2.  sender authenticity,\n      3.  message\
    \ integrity measures, and\n      4.  (if asymmetric key management is used) non-repudiation\
    \ of\n          origin,\n   but the following privacy-relevant concerns are not\
    \ addressed:\n      1.  access control,\n      2.  traffic flow confidentiality,\n\
    \      3.  address list accuracy,\n      4.  routing control,\n      5.  issues\
    \ relating to the casual serial reuse of PCs by\n          multiple users,\n \
    \     6.  assurance of message receipt and non-deniability of receipt,\n     \
    \ 7.  automatic association of acknowledgments with the messages\n          to\
    \ which they refer, and\n      8.  message duplicate detection, replay prevention,\
    \ or other\n          stream-oriented services.\n   A message's sender will determine\
    \ whether privacy enhancements are to\n   be performed on a particular message.\
    \  Therefore, a sender must be\n   able to determine whether particular recipients\
    \ are equipped to\n   process privacy-enhanced mail.  In a general architecture,\
    \ these\n   mechanisms will be based on server queries; thus, the query function\n\
    \   could be integrated into a UA to avoid imposing burdens or\n   inconvenience\
    \ on electronic mail users.\n"
- title: 4.  Processing of Messages
  contents:
  - '4.  Processing of Messages

    '
- title: 4.1  Message Processing Overview
  contents:
  - "4.1  Message Processing Overview\n   This subsection provides a high-level overview\
    \ of the components and\n   processing steps involved in electronic mail privacy\
    \ enhancement\n   processing.  Subsequent subsections will define the procedures\
    \ in\n   more detail.\n"
- title: 4.1.1  Types of Keys
  contents:
  - "4.1.1  Types of Keys\n   A two-level keying hierarchy is used to support privacy-enhanced\n\
    \   message transmission:\n      1.  Data Encrypting Keys (DEKs) are used for\
    \ encryption of\n          message text and (with certain choices among a set\
    \ of\n          alternative algorithms) for computation of message integrity\n\
    \          check (MIC) quantities.  DEKs are generated individually for\n    \
    \      each transmitted message; no predistribution of DEKs is\n          needed\
    \ to support privacy-enhanced message transmission.\n      2.  Interchange Keys\
    \ (IKs) are used to encrypt DEKs for\n          transmission within messages.\
    \  Ordinarily, the same IK will\n          be used for all messages sent from\
    \ a given originator to a\n          given recipient over a period of time.  Each\
    \ transmitted\n          message includes a representation of the DEK(s) used\
    \ for\n          message encryption and/or MIC computation, encrypted under\n\
    \          an individual IK per named recipient.  The representation is\n    \
    \      associated with \"X-Sender-ID:\" and \"X-Recipient-ID:\" fields,\n    \
    \      which allow each individual recipient to identify the IK\n          used\
    \ to encrypt DEKs and/or MICs for that recipient's use.\n          Given an appropriate\
    \ IK, a recipient can decrypt the\n          corresponding transmitted DEK representation,\
    \ yielding the\n          DEK required for message text decryption and/or MIC\n\
    \          verification.  The definition of an IK differs depending on\n     \
    \     whether symmetric or asymmetric cryptography is used for DEK\n         \
    \ encryption:\n         2a. When symmetric cryptography is used for DEK\n    \
    \         encryption, an IK is a single symmetric key shared\n             between\
    \ an originator and a recipient.  In this\n             case, the same IK is used\
    \ to encrypt MICs as well\n             as DEKs for transmission.  Version/expiration\n\
    \             information and IA identification associated with\n            \
    \ the originator and with the recipient must be\n             concatenated in\
    \ order to fully qualify a symmetric\n             IK.\n         2b. When asymmetric\
    \ cryptography is used, the IK\n             component used for DEK encryption\
    \ is the public\n             component of the recipient.  The IK component used\n\
    \             for MIC encryption is the private component of the\n           \
    \  originator, and therefore only one encrypted MIC\n             representation\
    \ need be included per message, rather than\n             one per recipient. \
    \ Each of these IK\n             components can be fully qualified in an\n   \
    \          \"X-Recipient-ID:\" or \"X-Sender-ID:\" field,\n             respectively.\n"
- title: 4.1.2  Processing Procedures
  contents:
  - "4.1.2  Processing Procedures\n   When privacy enhancement processing is to be\
    \ performed on an outgoing\n   message, a DEK is generated [1] for use in message\
    \ encryption and (if\n   a chosen MIC algorithm requires a key) a variant of the\
    \ DEK is formed\n   for use in MIC computation.  DEK generation can be omitted\
    \ for the\n   case of a message in which all contents are excluded from encryption,\n\
    \   unless a chosen MIC computation algorithm requires a DEK.\n   An \"X-Sender-ID:\"\
    \ field is included in the header to provide one\n   identification component\
    \ for the IK(s) used for message processing.\n   IK components are selected for\
    \ each individually named recipient; a\n   corresponding \"X-Recipient-ID:\" field,\
    \ interpreted in the context of\n   a prior \"X-Sender-ID:\" field, serves to\
    \ identify each IK.  Each \"X-\n   Recipient-ID:\" field is followed by an \"\
    X-Key-Info:\" field, which\n   transfers a DEK encrypted under the IK appropriate\
    \ for the specified\n   recipient.  When symmetric key management is used for\
    \ a given\n   recipient, the \"X-Key-Info:\" field also transfers the message's\n\
    \   computed MIC, encrypted under the recipient's IK.  When asymmetric\n   key\
    \ management is used, a prior \"X-MIC-Info:\" field carries the\n   message's\
    \ MIC encrypted under the private component of the sender.\n   A four-phase transformation\
    \ procedure is employed in order to\n   represent encrypted message text in a\
    \ universally transmissible form\n   and to enable messages encrypted on one type\
    \ of host computer to be\n   decrypted on a different type of host computer. \
    \ A plaintext message\n   is accepted in local form, using the host's native character\
    \ set and\n   line representation.  The local form is converted to a canonical\n\
    \   message text representation, defined as equivalent to the inter-SMTP\n   representation\
    \ of message text.  This canonical representation forms\n   the input to the MIC\
    \ computation and encryption processes.\n   For encryption purposes, the canonical\
    \ representation is padded as\n   required by the encryption algorithm.  The padded\
    \ canonical\n   representation is encrypted (except for any regions which are\n\
    \   explicitly excluded from encryption).  The encrypted text (along with\n  \
    \ the canonical representation of regions which were excluded from\n   encryption)\
    \ is encoded into a printable form.  The printable form is\n   composed of a restricted\
    \ character set which is chosen to be\n   universally representable across sites,\
    \ and which will not be\n   disrupted by processing within and between MTS entities.\n\
    \   The output of the encoding procedure is combined with a set of header\n  \
    \ fields carrying cryptographic control information.  The result is\n   passed\
    \ to the electronic mail system to be encapsulated as the text\n   portion of\
    \ a transmitted message.\n   When a privacy-enhanced message is received, the\
    \ cryptographic\n   control fields within its text portion provide the information\n\
    \   required for the authorized recipient to perform MIC verification and\n  \
    \ decryption of the received message text.  First, the printable\n   encoding\
    \ is converted to a bitstring.  Encrypted portions of the\n   transmitted message\
    \ are decrypted.  The MIC is verified.  The\n   canonical representation is converted\
    \ to the recipient's local form,\n   which need not be the same as the sender's\
    \ local form.\n"
- title: 4.2  Encryption Algorithms and Modes
  contents:
  - "4.2  Encryption Algorithms and Modes\n   For purposes of this RFC, the Block\
    \ Cipher Algorithm DEA-1, defined\n   in ANSI X3.92-1981 [2] shall be used for\
    \ encryption of message text.\n   The DEA-1 is equivalent to the Data Encryption\
    \ Standard (DES), as\n   defined in FIPS PUB 46 [3].  When used for encryption\
    \ of text, the\n   DEA-1 shall be used in the Cipher Block Chaining (CBC) mode,\
    \ as\n   defined in ISO IS 8372 [4].  The identifier string \"DES-CBC\", defined\n\
    \   in RFC-1115, signifies this algorithm/mode combination.  The CBC mode\n  \
    \ definition in IS 8372 is equivalent to that provided in FIPS PUB 81\n   [5]\
    \ and in ANSI X3.106-1983 [16].  Use of other algorithms and/or\n   modes for\
    \ message text processing will require case-by-case study to\n   determine applicability\
    \ and constraints.  Additional algorithms and\n   modes approved for use in this\
    \ context will be specified in\n   successors to RFC-1115.\n   It is an originator's\
    \ responsibility to generate a new pseudorandom\n   initializing vector (IV) for\
    \ each privacy-enhanced electronic mail\n   message unless the entirety of the\
    \ message is excluded from\n   encryption.  Section 4.3.1 of [17] provides rationale\
    \ for this\n   requirement, even in a context where individual DEKs are generated\n\
    \   for individual messages.  The IV will be transmitted with the\n   message.\n\
    \   Certain operations require that one key be encrypted under an\n   interchange\
    \ key (IK) for purposes of transmission.  A header facility\n   indicates the\
    \ mode in which the IK is used for encryption.  RFC-1115\n   specifies encryption\
    \ algorithm/mode identifiers, including DES-ECB,\n   DES-EDE, and RSA.  All implementations\
    \ using symmetric key management\n   should support DES-ECB IK use, and all implementations\
    \ using\n   asymmetric key management should support RSA IK use.\n   RFC-1114,\
    \ released concurrently with this RFC, specifies asymmetric,\n   certificate-based\
    \ key management procedures to support the message\n   processing procedures defined\
    \ in this document.  The message\n   processing procedures can also be used with\
    \ symmetric key management,\n   given prior distribution of suitable symmetric\
    \ IKs through out-of-\n   band means.  Support for the asymmetric approach defined\
    \ in RFC-1114\n   is strongly recommended.\n"
- title: 4.3  Privacy Enhancement Message Transformations
  contents:
  - '4.3  Privacy Enhancement Message Transformations

    '
- title: 4.3.1  Constraints
  contents:
  - "4.3.1  Constraints\n   An electronic mail encryption mechanism must be compatible\
    \ with the\n   transparency constraints of its underlying electronic mail\n  \
    \ facilities.  These constraints are generally established based on\n   expected\
    \ user requirements and on the characteristics of anticipated\n   endpoint and\
    \ transport facilities.  An encryption mechanism must also\n   be compatible with\
    \ the local conventions of the computer systems\n   which it interconnects.  In\
    \ our approach, a canonicalization step is\n   performed to abstract out local\
    \ conventions and a subsequent encoding\n   step is performed to conform to the\
    \ characteristics of the underlying\n   mail transport medium (SMTP).  The encoding\
    \ conforms to SMTP\n   constraints, established to support interpersonal messaging.\
    \  SMTP's\n   rules are also used independently in the canonicalization process.\n\
    \   RFC-821's [7] Section 4.5 details SMTP's transparency constraints.\n   To\
    \ prepare a message for SMTP transmission, the following\n   requirements must\
    \ be met:\n      1.  All characters must be members of the 7-bit ASCII character\n\
    \          set.\n      2.  Text lines, delimited by the character pair <CR><LF>,\
    \ must\n          be no more than 1000 characters long.\n      3.  Since the string\
    \ <CR><LF>.<CR><LF> indicates the end of a\n          message, it must not occur\
    \ in text prior to the end of a\n          message.\n   Although SMTP specifies\
    \ a standard representation for line delimiters\n   (ASCII <CR><LF>), numerous\
    \ systems use a different native\n   representation to delimit lines.  For example,\
    \ the <CR><LF> sequences\n   delimiting lines in mail inbound to UNIX systems\
    \ are transformed to\n   single <LF>s as mail is written into local mailbox files.\
    \  Lines in\n   mail incoming to record-oriented systems (such as VAX VMS) may\
    \ be\n   converted to appropriate records by the destination SMTP [8] server.\n\
    \   As a result, if the encryption process generated <CR>s or <LF>s,\n   those\
    \ characters might not be accessible to a recipient UA program at\n   a destination\
    \ which uses different line delimiting conventions.  It\n   is also possible that\
    \ conversion between tabs and spaces may be\n   performed in the course of mapping\
    \ between inter-SMTP and local\n   format; this is a matter of local option. \
    \ If such transformations\n   changed the form of transmitted ciphertext, decryption\
    \ would fail to\n   regenerate the transmitted plaintext, and a transmitted MIC\
    \ would\n   fail to compare with that computed at the destination.\n   The conversion\
    \ performed by an SMTP server at a system with EBCDIC as\n   a native character\
    \ set has even more severe impact, since the\n   conversion from EBCDIC into ASCII\
    \ is an information-losing\n   transformation.  In principle, the transformation\
    \ function mapping\n   between inter-SMTP canonical ASCII message representation\
    \ and local\n   format could be moved from the SMTP server up to the UA, given\
    \ a\n   means to direct that the SMTP server should no longer perform that\n \
    \  transformation.  This approach has a major disadvantage: internal\n   file\
    \ (e.g., mailbox) formats would be incompatible with the native\n   forms used\
    \ on the systems where they reside.  Further, it would\n   require modification\
    \ to SMTP servers, as mail would be passed to SMTP\n   in a different representation\
    \ than it is passed at present.\n"
- title: 4.3.2  Approach
  contents:
  - "4.3.2  Approach\n   Our approach to supporting privacy-enhanced mail across an\n\
    \   environment in which intermediate conversions may occur encodes mail\n   in\
    \ a fashion which is uniformly representable across the set of\n   privacy-enhanced\
    \ UAs regardless of their systems' native character\n   sets.  This encoded form\
    \ is used to represent mail text from sender\n   to recipient, but the encoding\
    \ is not applied to enclosing mail\n   transport headers or to encapsulated headers\
    \ inserted to carry\n   control information between privacy-enhanced UAs.  The\
    \ encoding's\n   characteristics are such that the transformations anticipated\
    \ between\n   sender and recipient UAs will not prevent an encoded message from\n\
    \   being decoded properly at its destination.\n   A sender may exclude one or\
    \ more portions of a message from\n   encryption processing, but authentication\
    \ processing is always\n   applied to the entirety of message text.  Explicit\
    \ action is required\n   to exclude a portion of a message from encryption processing;\
    \ by\n   default, encryption is applied to the entirety of message text.  The\n\
    \   user-level delimiter which specifies such exclusion is a local\n   matter,\
    \ and hence may vary between sender and recipient, but all\n   systems should\
    \ provide a means for unambiguous identification of\n   areas excluded from encryption\
    \ processing.\n   An outbound privacy-enhanced message undergoes four transformation\n\
    \   steps, described in the following four subsections.\n"
- title: '4.3.2.1  Step 1: Local Form'
  contents:
  - "4.3.2.1  Step 1: Local Form\n   The message text is created in the system's native\
    \ character set,\n   with lines delimited in accordance with local convention.\n"
- title: '4.3.2.2  Step 2: Canonical Form'
  contents:
  - "4.3.2.2  Step 2: Canonical Form\n   The entire message text, including both those\
    \ portions subject to\n   encipherment processing and those portions excluded\
    \ from such\n   processing, is converted to a universal canonical form, analogous\
    \ to\n   the inter-SMTP representation [9] as defined in RFC-821 and RFC-822\n\
    \   [10] (ASCII character set, <CR><LF> line delimiters).  The processing\n  \
    \ required to perform this conversion is minimal on systems whose\n   native character\
    \ set is ASCII.  (Note: Since the output of the\n   canonical encoding process\
    \ will never be submitted directly to SMTP,\n   but only to subsequent steps of\
    \ the privacy enhancement encoding\n   process, the dot-stuffing transformation\
    \ discussed in RFC-821,\n   section 4.5.2, is not required.)  Since a message\
    \ is converted to a\n   standard character set and representation before encryption,\
    \ it can\n   be decrypted and its MIC can be verified at any type of destination\n\
    \   host computer.  The decryption and MIC verification is performed\n   before\
    \ any conversions which may be necessary to transform the\n   message into a destination-specific\
    \ local form.\n"
- title: '4.3.2.3  Step 3: Authentication and Encipherment'
  contents:
  - "4.3.2.3  Step 3: Authentication and Encipherment\n   The canonical form is input\
    \ to the selected MIC computation algorithm\n   in order to compute an integrity\
    \ check quantity for the message.  No\n   padding is added to the canonical form\
    \ before submission to the MIC\n   computation algorithm, although certain MIC\
    \ algorithms will apply\n   their own padding in the course of computing a MIC.\n\
    \   Padding is applied to the canonical form as needed to perform\n   encryption\
    \ in the DEA-1 CBC mode, as follows: The number of octets to\n   be encrypted\
    \ is determined by subtracting the number of octets\n   excluded from encryption\
    \ from the total length of the canonically\n   encoded text.  Octets with the\
    \ hexadecimal value FF (all ones) are\n   appended to the canonical form as needed\
    \ so that the text octets to\n   be encrypted, along with the added padding octets,\
    \ fill an integral\n   number of 8-octet encryption quanta.  No padding is applied\
    \ if the\n   number of octets to be encrypted is already an integral multiple\
    \ of\n   8.  The use of hexadecimal FF (a value outside the 7-bit ASCII set)\n\
    \   as a padding value allows padding octets to be distinguished from\n   valid\
    \ data without inclusion of an explicit padding count indicator.\n   The regions\
    \ of the message which have not been excluded from\n   encryption are encrypted.\
    \  To support selective encipherment\n   processing, an implementation must retain\
    \ internal indications of the\n   positions of excluded areas excluded from encryption\
    \ with relation to\n   non-excluded areas, so that those areas can be properly\
    \ delimited in\n   the encoding procedure defined in step 4.  If a region excluded\
    \ from\n   encryption intervenes between encrypted regions, cryptographic state\n\
    \   (e.g., IVs and accumulation of octets into encryption quanta) is\n   preserved\
    \ and continued after the excluded region.\n"
- title: '4.3.2.4  Step 4: Printable Encoding'
  contents:
  - "4.3.2.4  Step 4: Printable Encoding\n   Proceeding from left to right, the bit\
    \ string resulting from step 3\n   is encoded into characters which are universally\
    \ representable at all\n   sites, though not necessarily with the same bit patterns\
    \ (e.g.,\n   although the character \"E\" is represented in an ASCII-based system\
    \ as\n   hexadecimal 45 and as hexadecimal C5 in an EBCDIC-based system, the\n\
    \   local significance of the two representations is equivalent).  This\n   encoding\
    \ step is performed for all privacy-enhanced messages, even if\n   an entire message\
    \ is excluded from encryption.\n   A 64-character subset of International Alphabet\
    \ IA5 is used, enabling\n   6 bits to be represented per printable character.\
    \  (The proposed\n   subset of characters is represented identically in IA5 and\
    \ ASCII.)\n   Two additional characters, \"=\" and \"*\", are used to signify\
    \ special\n   processing functions.  The character \"=\" is used for padding within\n\
    \   the printable encoding procedure.  The character \"*\" is used to\n   delimit\
    \ the beginning and end of a region which has been excluded\n   from encipherment\
    \ processing.  The encoding function's output is\n   delimited into text lines\
    \ (using local conventions), with each line\n   except the last containing exactly\
    \ 64 printable characters and the\n   final line containing 64 or fewer printable\
    \ characters.  (This line\n   length is easily printable and is guaranteed to\
    \ satisfy SMTP's 1000-\n   character transmitted line length limit.)\n   The encoding\
    \ process represents 24-bit groups of input bits as output\n   strings of 4 encoded\
    \ characters. Proceeding from left to right across\n   a 24-bit input group extracted\
    \ from the output of step 3, each 6-bit\n   group is used as an index into an\
    \ array of 64 printable characters.\n   The character referenced by the index\
    \ is placed in the output string.\n   These characters, identified in Table 0,\
    \ are selected so as to be\n   universally representable, and the set excludes\
    \ characters with\n   particular significance to SMTP (e.g., \".\", \"<CR>\",\
    \ \"<LF>\").\n   Special processing is performed if fewer than 24 bits are available\n\
    \   in an input group, either at the end of a message or (when the\n   selective\
    \ encryption facility is invoked) at the end of an encrypted\n   region or an\
    \ excluded region.  A full encoding quantum is always\n   completed at the end\
    \ of a message and before the delimiter \"*\" is\n   output to initiate or terminate\
    \ the representation of a block\n   excluded from encryption.  When fewer than\
    \ 24 input bits are\n   available in an input group, zero bits are added (on the\
    \ right) to\n   form an integral number of 6-bit groups.  Output character positions\n\
    \   which are not required to represent actual input data are set to the\n   character\
    \ \"=\".  Since all canonically encoded output is an integral\n   number of octets,\
    \ only the following cases can arise: (1) the final\n   quantum of encoding input\
    \ is an integral multiple of 24 bits; here,\n   the final unit of encoded output\
    \ will be an integral multiple of 4\n   characters with no \"=\" padding, (2)\
    \ the final quantum of encoding\n   input is exactly 8 bits; here, the final unit\
    \ of encoded output will\n   be two characters followed by two \"=\" padding characters,\
    \ or (3) the\n   final quantum of encoding input is exactly 16 bits; here, the\
    \ final\n   unit of encoded output will be three characters followed by one \"\
    =\"\n   padding character.\n"
- title: 4.3.2.5  Summary of Transformations
  contents:
  - "4.3.2.5  Summary of Transformations\n   In summary, the outbound message is subjected\
    \ to the following\n   composition of transformations:\n        Transmit_Form\
    \ = Encode(Encipher(Canonicalize(Local_Form)))\n   The inverse transformations\
    \ are performed, in reverse order, to\n   process inbound privacy-enhanced mail:\n\
    \       Local_Form = DeCanonicalize(Decipher(Decode(Transmit_Form)))\n   Value\
    \ Encoding  Value Encoding  Value Encoding  Value Encoding\n       0 A       \
    \     17 R            34 i            51 z\n       1 B            18 S       \
    \     35 j            52 0\n       2 C            19 T            36 k       \
    \     53 1\n       3 D            20 U            37 l            54 2\n     \
    \  4 E            21 V            38 m            55 3\n       5 F           \
    \ 22 W            39 n            56 4\n       6 G            23 X           \
    \ 40 o            57 5\n       7 H            24 Y            41 p           \
    \ 58 6\n       8 I            25 Z            42 q            59 7\n       9 J\
    \            26 a            43 r            60 8\n      10 K            27 b\
    \            44 s            61 9\n      11 L            28 c            45 t\
    \            62 +\n      12 M            29 d            46 u            63 /\n\
    \      13 N            30 e            47 v\n      14 O            31 f      \
    \      48 w         (pad) =\n      15 P            32 g            49 x\n    \
    \  16 Q            33 h            50 y           (1) *\n   (1) The character\
    \ \"*\" is used to enclose portions of an\n   encoded message to which encryption\
    \ processing has not\n   been applied.\n                       Printable Encoding\
    \ Characters\n                                  Table 1\n   Note that the local\
    \ form and the functions to transform messages to\n   and from canonical form\
    \ may vary between the sender and recipient\n   systems without loss of information.\n"
- title: 4.4  Encapsulation Mechanism
  contents:
  - "4.4  Encapsulation Mechanism\n   Encapsulation of privacy-enhanced messages within\
    \ an enclosing layer\n   of headers interpreted by the electronic mail transport\
    \ system offers\n   a number of advantages in comparison to a flat approach in\
    \ which\n   certain fields within a single header are encrypted and/or carry\n\
    \   cryptographic control information.  Encapsulation provides generality\n  \
    \ and segregates fields with user-to-user significance from those\n   transformed\
    \ in transit.  All fields inserted in the course of\n   encryption/authentication\
    \ processing are placed in the encapsulated\n   header.  This facilitates compatibility\
    \ with mail handling programs\n   which accept only text, not header fields, from\
    \ input files or from\n   other programs.  Further, privacy enhancement processing\
    \ can be\n   applied recursively.  As far as the MTS is concerned, information\n\
    \   incorporated into cryptographic authentication or encryption\n   processing\
    \ will reside in a message's text portion, not its header\n   portion.\n   The\
    \ encapsulation mechanism to be used for privacy-enhanced mail is\n   derived\
    \ from that described in RFC-934 [11] which is, in turn, based\n   on precedents\
    \ in the processing of message digests in the Internet\n   community.  To prepare\
    \ a user message for encrypted or authenticated\n   transmission, it will be transformed\
    \ into the representation shown in\n   Figure 1.\n   As a general design principle,\
    \ sensitive data is protected by\n   incorporating the data within the encapsulated\
    \ text rather than by\n   applying measures selectively to fields in the enclosing\
    \ header.\n   Examples of potentially sensitive header information may include\n\
    \   fields such as \"Subject:\", with contents which are significant on an\n \
    \  end-to-end, inter-user basis.  The (possibly empty) set of headers to\n   which\
    \ protection is to be applied is a user option.  It is strongly\n   recommended,\
    \ however, that all implementations should replicate\n   copies of \"X-Sender-ID:\"\
    \ and \"X-Recipient-ID:\" fields within the\n   encapsulated text.\n   If a user\
    \ wishes disclosure protection for header fields, they must\n   occur only in\
    \ the encapsulated text and not in the enclosing or\n   encapsulated header. \
    \ If disclosure protection is desired for a\n   message's subject indication,\
    \ it is recommended that the enclosing\n   header contain a \"Subject:\" field\
    \ indicating that \"Encrypted Mail\n   Follows\".\n   If an authenticated version\
    \ of header information is desired, that\n   data can be replicated within the\
    \ encapsulated text portion in\n   addition to its inclusion in the enclosing\
    \ header.  For example, a\n   sender wishing to provide recipients with a protected\
    \ indication of a\n   message's position in a series of messages could include\
    \ a copy of a\n   timestamp or message counter field within the encapsulated text.\n\
    \   A specific point regarding the integration of privacy-enhanced mail\n   facilities\
    \ with the message encapsulation mechanism is worthy of\n   note.  The subset\
    \ of IA5 selected for transmission encoding\n   intentionally excludes the character\
    \ \"-\", so encapsulated text can be\n   distinguished unambiguously from a message's\
    \ closing encapsulation\n   boundary (Post-EB) without recourse to character stuffing.\n\
    \   Enclosing Header Portion\n           (Contains header fields per RFC-822)\n\
    \   Blank Line\n           (Separates Enclosing Header from Encapsulated Message)\n\
    \   Encapsulated Message\n       Pre-Encapsulation Boundary (Pre-EB)\n       \
    \    -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n       Encapsulated Header Portion\n\
    \           (Contains encryption control fields inserted in plaintext.\n     \
    \      Examples include \"X-DEK-Info:\", \"X-Sender-ID:\", and\n           \"\
    X-Key-Info:\".\n           Note that, although these control fields have line-oriented\n\
    \           representations similar to RFC-822 header fields, the set\n      \
    \     of fields valid in this context is disjoint from those used\n          \
    \ in RFC-822 processing.)\n       Blank Line\n           (Separates Encapsulated\
    \ Header from subsequent encoded\n           Encapsulated Text Portion)\n    \
    \   Encapsulated Text Portion\n           (Contains message data encoded as specified\
    \ in Section 4.3;\n           may incorporate protected copies of enclosing and\n\
    \           encapsulated header fields such as \"Subject:\", etc.)\n       Post-Encapsulation\
    \ Boundary (Post-EB)\n           -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n\
    \                           Message Encapsulation\n                          \
    \       Figure 1\n"
- title: 4.5  Mail for Mailing Lists
  contents:
  - "4.5  Mail for Mailing Lists\n   When mail is addressed to mailing lists, two\
    \ different methods of\n   processing can be applicable: the IK-per-list method\
    \ and the IK-per-\n   recipient method.  The choice depends on the information\
    \ available to\n   the sender and on the sender's preference.\n   If a message's\
    \ sender addresses a message to a list name or alias,\n   use of an IK associated\
    \ with that name or alias as a entity (IK-per-\n   list), rather than resolution\
    \ of the name or alias to its constituent\n   destinations, is implied.  Such\
    \ an IK must, therefore, be available\n   to all list members.  For the case of\
    \ asymmetric key management, the\n   list's private component must be available\
    \ to all list members.  This\n   alternative will be the normal case for messages\
    \ sent via remote\n   exploder sites, as a sender to such lists may not be cognizant\
    \ of the\n   set of individual recipients.  Unfortunately, it implies an\n   undesirable\
    \ level of exposure for the shared IK, and makes its\n   revocation difficult.\
    \  Moreover, use of the IK-per-list method allows\n   any holder of the list's\
    \ IK to masquerade as another sender to the\n   list for authentication purposes.\n\
    \   If, in contrast, a message's sender is equipped to expand the\n   destination\
    \ mailing list into its individual constituents and elects\n   to do so (IK-per-recipient),\
    \ the message's DEK (and, in the symmetric\n   key management case, MIC) will\
    \ be encrypted under each per-recipient\n   IK and all such encrypted representations\
    \ will be incorporated into\n   the transmitted message.  Note that per-recipient\
    \ encryption is\n   required only for the relatively small DEK and MIC quantities\
    \ carried\n   in the \"X-Key-Info:\" field, not for the message text which is,\
    \ in\n   general, much larger.  Although more IKs are involved in processing\n\
    \   under the IK-per-recipient method, the pairwise IKs can be\n   individually\
    \ revoked and possession of one IK does not enable a\n   successful masquerade\
    \ of another user on the list.\n"
- title: 4.6  Summary of Encapsulated Header Fields
  contents:
  - "4.6  Summary of Encapsulated Header Fields\n   This section summarizes the syntax\
    \ and semantics of the encapsulated\n   header fields to be added to messages\
    \ in the course of privacy\n   enhancement processing.  The fields are presented\
    \ in three groups.\n   Normally, the groups will appear in encapsulated headers\
    \ in the order\n   in which they are shown, though not all fields in each group\
    \ will\n   appear in all messages. In certain indicated cases, it is recommended\n\
    \   that the fields be replicated within the encapsulated text portion as\n  \
    \ well as being included within the encapsulated header.  Figures 2 and\n   3\
    \ show the appearance of small example encapsulated messages.  Figure\n   2 assumes\
    \ the use of symmetric cryptography for key management.\n   Figure 3 illustrates\
    \ an example encapsulated message in which\n   asymmetric key management is used.\n\
    \   Unless otherwise specified, all field arguments are processed in a\n   case-sensitive\
    \ fashion.  In most cases, numeric quantities are\n   represented in header fields\
    \ as contiguous strings of hexadecimal\n   digits, where each digit is represented\
    \ by a character from the\n   ranges \"0\"-\"9\" or upper case \"A\"-\"F\".  Since\
    \ public-key certificates\n   and quantities encrypted using asymmetric algorithms\
    \ are large in\n   size, use of a more space-efficient encoding technique is appropriate\n\
    \   for such quantities, and the encoding mechanism defined in Section\n   4.3.2.4\
    \ of this RFC, representing 6 bits per printed character, is\n   adopted.  The\
    \ example shown in Figure 3 shows asymmetrically\n   encrypted quantities (e.g.,\
    \ \"X-MIC-Info:\", \"X-Key-Info:\") with 64-\n   character printed representations,\
    \ corresponding to 384 bits.  The\n   fields carrying asymmetrically encrypted\
    \ quantities also illustrate\n   the use of folding as defined in RFC-822, section\
    \ 3.1.1.\n   -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n   X-Proc-Type: 3,ENCRYPTED\n\
    \   X-DEK-Info: DES-CBC,F8143EDE5960C597\n   X-Sender-ID: linn@ccy.bbn.com::\n\
    \   X-Recipient-ID: linn@ccy.bbn.com:ptf-kmc:3\n   X-Key-Info: DES-ECB,RSA-MD2,9FD3AAD2F2691B9A,B70665BB9BF7CBCD,\n\
    \    A60195DB94F727D3\n   X-Recipient-ID: privacy-tf@venera.isi.edu:ptf-kmc:4\n\
    \   X-Key-Info: DES-ECB,RSA-MD2,161A3F75DC82EF26,E2EF532C65CBCFF7,\n    9F83A2658132DB47\n\
    \   LLrHB0eJzyhP+/fSStdW8okeEnv47jxe7SJ/iN72ohNcUk2jHEUSoH1nvNSIWL9M\n   8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLpvXR0UrUzYbkNpk0agV2IzUpk\n\
    \   J6UiRRGcDSvzrsoK+oNvqu6z7Xs5Xfz5rDqUcMlK1Z6720dcBWGGsDLpTpSCnpot\n   dXd/H5LMDWnonNvPCwQUHt==\n\
    \   -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n               Example Encapsulated\
    \ Message (Symmetric Case)\n                                 Figure 2\n   -----PRIVACY-ENHANCED\
    \ MESSAGE BOUNDARY-----\n   X-Proc-Type: 3,ENCRYPTED\n   X-DEK-Info: DES-CBC,F8143EDE5960C597\n\
    \   X-Sender-ID: linn@ccy.bbn.com::\n   X-Certificate:\n    jHUlBLpvXR0UrUzYbkNpk0agV2IzUpk8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIk\n\
    \    YbkNpk0agV2IzUpk8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLpvXR0UrUz\n    agV2IzUpk8tEjmFjHUlBLpvXR0UrUz/zxB+bATMtPjCUWbz8Lr9wloXIkYbkNpk0\n\
    \   X-Issuer-Certificate:\n    TMtPjCUWbz8Lr9wloXIkYbkNpk0agV2IzUpk8tEjmFjHUlBLpvXR0UrUz/zxB+bA\n\
    \    IkjHUlBLpvXR0UrUzYbkNpk0agV2IzUpk8tEjmF/zxB+bATMtPjCUWbz8Lr9wloX\n    vXR0UrUzYbkNpk0agV2IzUpk8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLp\n\
    \   X-MIC-Info: RSA-MD2,RSA,\n    5rDqUcMlK1Z6720dcBWGGsDLpTpSCnpotJ6UiRRGcDSvzrsoK+oNvqu6z7Xs5Xfz\n\
    \   X-Recipient-ID: linn@ccy.bbn.com:RSADSI:3\n   X-Key-Info: RSA,\n    lBLpvXR0UrUzYbkNpk0agV2IzUpk8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHU\n\
    \   X-Recipient-ID: privacy-tf@venera.isi.edu:RSADSI:4\n   X-Key-Info: RSA,\n\
    \    NcUk2jHEUSoH1nvNSIWL9MLLrHB0eJzyhP+/fSStdW8okeEnv47jxe7SJ/iN72oh\n   LLrHB0eJzyhP+/fSStdW8okeEnv47jxe7SJ/iN72ohNcUk2jHEUSoH1nvNSIWL9M\n\
    \   8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLpvXR0UrUzYbkNpk0agV2IzUpk\n   J6UiRRGcDSvzrsoK+oNvqu6z7Xs5Xfz5rDqUcMlK1Z6720dcBWGGsDLpTpSCnpot\n\
    \   dXd/H5LMDWnonNvPCwQUHt==\n   -----PRIVACY-ENHANCED MESSAGE BOUNDARY-----\n\
    \              Example Encapsulated Message (Asymmetric Case)\n              \
    \                   Figure 3\n   Although the encapsulated header fields resemble\
    \ RFC-822 header\n   fields, they are a disjoint set and will not in general be\
    \ processed\n   by the same parser which operates on enclosing header fields.\
    \  The\n   complexity of lexical analysis needed and appropriate for\n   encapsulated\
    \ header field processing is significantly less than that\n   appropriate to RFC-822\
    \ header processing.  For example, many\n   characters with special significance\
    \ to RFC-822 at the syntactic\n   level have no such significance within encapsulated\
    \ header fields.\n   When the length of an encapsulated header field is longer\
    \ than the\n   size conveniently printable on a line, whitespace may be used to\
    \ fold\n   the field in the manner of RFC-822, section 3.1.1.  Any such inserted\n\
    \   whitespace is not to be interpreted as a part of a subfield.  As a\n   particular\
    \ example, due to the length of public-key certificates and\n   of quantities\
    \ encrypted using asymmetric algorithms, such quantities\n   may often need to\
    \ be folded across multiple printed lines.  In order\n   to facilitate such folding\
    \ in a uniform manner, the bits representing\n   such a quantity are to be divided\
    \ into an ordered set (with leftmost\n   bits first) of zero or more 384-bit groups\
    \ (corresponding to 64-\n   character printed representations), followed by a\
    \ final group of bits\n   which may be any length up to 384 bits.\n"
- title: 4.6.1  Per-Message Encapsulated Header Fields
  contents:
  - "4.6.1  Per-Message Encapsulated Header Fields\n   This group of encapsulated\
    \ header fields contains fields which occur\n   no more than once in a privacy-enhanced\
    \ message, generally preceding\n   all other encapsulated header fields.\n"
- title: 4.6.1.1  X-Proc-Type Field
  contents:
  - "4.6.1.1  X-Proc-Type Field\n   The \"X-Proc-Type:\" encapsulated header field,\
    \ required for all\n   privacy-enhanced messages, identifies the type of processing\n\
    \   performed on the transmitted message.  Only one \"X-Proc-Type:\" field\n \
    \  occurs in a message; the \"X-Proc-Type:\" field must be the first\n   encapsulated\
    \ header field in the message.\n   The \"X-Proc-Type:\" field has two subfields,\
    \ separated by a comma.\n   The first subfield is a decimal number which is used\
    \ to distinguish\n   among incompatible encapsulated header field interpretations\
    \ which\n   may arise as changes are made to this standard.  Messages processed\n\
    \   according to this RFC will carry the subfield value \"3\" to\n   distinguish\
    \ them from messages processed in accordance with prior\n   RFCs 989 and 1040.\n\
    \   The second subfield may assume one of two string values: \"ENCRYPTED\"\n \
    \  or \"MIC-ONLY\".  Unless all of a message's encapsulated text is\n   excluded\
    \ from encryption, the \"X-Proc-Type:\" field's second subfield\n   must specify\
    \ \"ENCRYPTED\".  Specification of \"MIC-ONLY\", when applied\n   in conjunction\
    \ with certain combinations of key management and MIC\n   algorithm options, permits\
    \ certain fields which are superfluous in\n   the absence of encryption to be\
    \ omitted from the encapsulated header.\n   In particular, \"X-Recipient-ID:\"\
    \ and \"X-Key-Info:\" fields can be\n   omitted for recipients for whom asymmetric\
    \ cryptography is used,\n   assuming concurrent use of a keyless MIC computation\
    \ algorithm.  The\n   \"X-DEK-Info:\" field can be omitted for all \"MIC-ONLY\"\
    \ messages.\n"
- title: 4.6.1.2  X-DEK-Info Field
  contents:
  - "4.6.1.2  X-DEK-Info Field\n   The \"X-DEK-Info:\" encapsulated header field identifies\
    \ the message\n   text encryption algorithm and mode, and also carries the Initializing\n\
    \   Vector used for message encryption.  No more than one \"X-DEK-Info:\"\n  \
    \ field occurs in a message; the field is required except for messages\n   specified\
    \ as \"MIC-ONLY\" in the \"X-Proc-Type:\" field.\n   The \"X-DEK-Info:\" field\
    \ carries two arguments, separated by a comma.\n   For purposes of this RFC, the\
    \ first argument must be the string\n   \"DES-CBC\", signifying (as defined in\
    \ RFC-1115) use of the DES\n   algorithm in the CBC mode.  The second argument\
    \ represents a 64-bit\n   Initializing Vector (IV) as a contiguous string of 16\
    \ hexadecimal\n   digits.  Subsequent revisions of RFC-1115 will specify any additional\n\
    \   values which may appear as the first argument of this field.\n"
- title: 4.6.2  Encapsulated Header Fields Normally Per-Message
  contents:
  - "4.6.2  Encapsulated Header Fields Normally Per-Message\n   This group of encapsulated\
    \ header fields contains fields which\n   ordinarily occur no more than once per\
    \ message.  Depending on the key\n   management option(s) employed, some of these\
    \ fields may be absent\n   from some messages.  The \"X-Sender-ID\" field may\
    \ occur more than once\n   in a message if different sender-oriented IK components\
    \ (perhaps\n   corresponding to different versions) must be used for different\n\
    \   recipients. In this case later occurrences override prior\n   occurrences.\
    \  If a mixture of symmetric and asymmetric key\n   distribution is used within\
    \ a single message, the recipients for each\n   type of key distribution technology\
    \ should be grouped together to\n   simplify parsing.\n"
- title: 4.6.2.1  X-Sender-ID Field
  contents:
  - "4.6.2.1  X-Sender-ID Field\n   The \"X-Sender-ID:\" encapsulated header field,\
    \ required for all\n   privacy-enhanced messages, identifies a message's sender\
    \ and provides\n   the sender's IK identification component.  It should be replicated\n\
    \   within the encapsulated text.  The IK identification component\n   carried\
    \ in an \"X-Sender-ID:\" field is used in conjunction with all\n   subsequent\
    \ \"X-Recipient-ID:\" fields until another \"X-Sender-ID:\"\n   field occurs;\
    \ the ordinary case will be that only a single \"X-\n   Sender-ID:\" field will\
    \ occur, prior to any \"X-Recipient-ID:\" fields.\n   The \"X-Sender-ID:\" field\
    \ contains (in order) an Entity Identifier\n   subfield, an (optional) Issuing\
    \ Authority subfield, and an (optional)\n   Version/Expiration subfield.  The\
    \ optional subfields are omitted if\n   their use is rendered redundant by information\
    \ carried in subsequent\n   \"X-Recipient-ID:\" fields; this will ordinarily be\
    \ the case where\n   symmetric cryptography is used for key management.  The subfields\
    \ are\n   delimited by the colon character (\":\"), optionally followed by\n \
    \  whitespace.\n   Section 5.2, Interchange Keys, discusses the semantics of these\n\
    \   subfields and specifies the alphabet from which they are chosen.\n   Note\
    \ that multiple \"X-Sender-ID:\" fields may occur within a single\n   encapsulated\
    \ header.  All \"X-Recipient-ID:\" fields are interpreted in\n   the context of\
    \ the most recent preceding \"X-Sender-ID:\" field; it is\n   illegal for an \"\
    X-Recipient-ID:\" field to occur in a header before an\n   \"X-Sender-ID:\" has\
    \ been provided.\n"
- title: 4.6.2.2  X-Certificate Field
  contents:
  - "4.6.2.2  X-Certificate Field\n   The \"X-Certificate:\" encapsulated header field\
    \ is used only when\n   asymmetric key management is employed for one or more\
    \ of a message's\n   recipients.  To facilitate processing by recipients (at least\
    \ in\n   advance of general directory server availability), inclusion of this\n\
    \   field in all messages is strongly recommended.  The field transfers a\n  \
    \ sender's certificate as a numeric quantity, represented with the\n   encoding\
    \ mechanism defined in Section 4.3.2.4 of this RFC.  The\n   semantics of a certificate\
    \ are discussed in RFC-1114.  The\n   certificate carried in an \"X-Certificate:\"\
    \ field is used in\n   conjunction with \"X-Sender-ID:\" and \"X-Recipient-ID:\"\
    \ fields for\n   which asymmetric key management is employed.\n"
- title: 4.6.2.3  X-MIC-Info Field
  contents:
  - "4.6.2.3  X-MIC-Info Field\n   The \"X-MIC-Info:\" encapsulated header field,\
    \ used only when\n   asymmetric key management is employed for at least one recipient\
    \ of a\n   message, carries three arguments, separated by commas.  The first\n\
    \   argument identifies the algorithm under which the accompanying MIC is\n  \
    \ computed; RFC-1115 specifies the acceptable set of MIC algorithm\n   identifiers.\
    \  The second argument identifies the algorithm under\n   which the accompanying\
    \ MIC is encrypted; for purposes of this RFC,\n   the string \"RSA\" as described\
    \ in RFC-1115  must occur, identifying\n   use of the RSA algorithm.  The third\
    \ argument is a MIC,\n   asymmetrically encrypted using the originator's private\
    \ component.\n   As discussed earlier in this section, the asymmetrically encrypted\n\
    \   MIC is represented using the technique described in Section 4.3.2.4\n   of\
    \ this RFC.\n   The \"X-MIC-Info:\" field will occur immediately following the\n\
    \   message's \"X-Sender-ID:\" field and any \"X-Certificate:\" or \"X-\n   Issuer-Certificate:\"\
    \ fields.  Analogous to the \"X-Sender-ID:\" field,\n   an \"X-MIC-Info:\" field\
    \ applies to all subsequent recipients for whom\n   asymmetric key management\
    \ is used.\n"
- title: 4.6.3  Encapsulated Header Fields with Variable Occurrences
  contents:
  - "4.6.3  Encapsulated Header Fields with Variable Occurrences\n   This group of\
    \ encapsulated header fields contains fields which will\n   normally occur variable\
    \ numbers of times within a message, with\n   numbers of occurrences ranging from\
    \ zero to non-zero values which are\n   independent of the number of recipients.\n"
- title: 4.6.3.1  X-Issuer-Certificate Field
  contents:
  - "4.6.3.1  X-Issuer-Certificate Field\n   The \"X-Issuer-Certificate:\" encapsulated\
    \ header field is meaningful\n   only when asymmetric key management is used for\
    \ at least one of a\n   message's recipients.  A typical \"X-Issuer-Certificate:\"\
    \ field would\n   contain the certificate containing the public component used\
    \ to sign\n   the certificate carried in the message's \"X-Certificate:\" field,\
    \ for\n   recipients' use in chaining through that certificate's certification\n\
    \   path.  Other \"X-Issuer-Certificate:\" fields, typically representing\n  \
    \ higher points in a certification path, also may be included by a\n   sender.\
    \  The order in which \"X-Issuer-Certificate:\" fields are\n   included need not\
    \ correspond to the order of the certification path;\n   the order of that path\
    \ may in general differ from the viewpoint of\n   different recipients.  More\
    \ information on certification paths can be\n   found in RFC-1114.\n   The certificate\
    \ is represented in the same manner as defined for the\n   \"X-Certificate:\"\
    \ field, and any \"X-Issuer-Certificate:\" fields will\n   ordinarily follow the\
    \ \"X-Certificate:\" field directly.  Use of the\n   \"X-Issuer-Certificate:\"\
    \ field is optional even when asymmetric key\n   management is employed, although\
    \ its incorporation is strongly\n   recommended in the absence of alternate directory\
    \ server facilities\n   from which recipients can access issuers' certificates.\n"
- title: 4.6.4  Per-Recipient Encapsulated Header Fields
  contents:
  - "4.6.4  Per-Recipient Encapsulated Header Fields\n   This group of encapsulated\
    \ header fields normally appears once for\n   each of a message's named recipients.\
    \  As a special case, these\n   fields may be omitted in the case of a \"MIC-ONLY\"\
    \ message to\n   recipients for whom asymmetric key management is employed, given\
    \ that\n   the chosen MIC algorithm is keyless.\n"
- title: 4.6.4.1  X-Recipient-ID Field
  contents:
  - "4.6.4.1  X-Recipient-ID Field\n   The \"X-Recipient-ID:\" encapsulated header\
    \ field identifies a\n   recipient and provides the recipient's IK identification\
    \ component.\n   One \"X-Recipient-ID:\" field is included for each of a message's\
    \ named\n   recipients. It should be replicated within the encapsulated text.\n\
    \   The field contains (in order) an Entity Identifier subfield, an\n   Issuing\
    \ Authority subfield, and a Version/Expiration subfield.  The\n   subfields are\
    \ delimited by the colon character (\":\"), optionally\n   followed by whitespace.\n\
    \   Section 5.2, Interchange Keys, discusses the semantics of the\n   subfields\
    \ and specifies the alphabet from which they are chosen.  All\n   \"X-Recipient-ID:\"\
    \ fields are interpreted in the context of the most\n   recent preceding \"X-Sender-ID:\"\
    \ field; it is illegal for an \"X-\n   Recipient-ID:\" field to occur in a header\
    \ before an \"X-Sender-ID:\"\n   has been provided.\n"
- title: 4.6.4.2  X-Key-Info Field
  contents:
  - "4.6.4.2  X-Key-Info Field\n   One \"X-Key-Info:\" field is included for each\
    \ of a message's named\n   recipients.  Each \"X-Key-Info:\" field is interpreted\
    \ in the context\n   of the most recent preceding \"X-Recipient-ID:\" field; normally,\
    \ an\n   \"X-Key-Info:\" field will immediately follow its associated \"X-\n \
    \  Recipient-ID:\" field.  The field's argument(s) differ depending on\n   whether\
    \ symmetric or asymmetric key management is used for a\n   particular recipient.\n"
- title: 4.6.4.2.1  Symmetric Key Management
  contents:
  - "4.6.4.2.1  Symmetric Key Management\n   When symmetric key management is employed\
    \ for a given recipient, the\n   \"X-Key-Info:\" encapsulated header field transfers\
    \ four items,\n   separated by commas: an IK Use Indicator, a MIC Algorithm Indicator,\n\
    \   a DEK and a MIC.  The IK Use Indicator identifies the algorithm and\n   mode\
    \ in which the identified IK was used for DEK encryption for a\n   particular\
    \ recipient.  For recipients for whom symmetric key\n   management is used, it\
    \ may assume the reserved string values \"DES-\n   ECB\" or \"DES-EDE\", as defined\
    \ in RFC-1115.\n   The MIC Algorithm Indicator identifies the MIC computation\
    \ algorithm\n   used for a particular recipient; values for this subfield are\
    \ defined\n   in RFC-1115.  The DEK and MIC are encrypted under the IK identified\n\
    \   by a preceding \"X-Recipient-ID:\" field and prior \"X-Sender-ID:\"\n   field;\
    \ they are represented as two strings of contiguous hexadecimal\n   digits, separated\
    \ by a comma.\n   When DEA-1 is used for message text encryption, the DEK\n  \
    \ representation will be 16 hexadecimal digits (corresponding to a 64-\n   bit\
    \ key); this subfield can be extended to 32 hexadecimal digits\n   (corresponding\
    \ to a 128-bit key) if required to support other\n   algorithms.\n   Symmetric\
    \ encryption of MICs is always performed in the same\n   encryption mode used\
    \ to encrypt the message's DEK.  Encrypted MICs,\n   like encrypted DEKs, are\
    \ represented as contiguous strings of\n   hexadecimal digits.  The size of a\
    \ MIC is dependent on the choice of\n   MIC algorithm as specified in the MIC\
    \ Algorithm Indicator subfield.\n"
- title: 4.6.4.2.2  Asymmetric Key Management
  contents:
  - "4.6.4.2.2  Asymmetric Key Management\n   When asymmetric key management is employed\
    \ for a given recipient, the\n   \"X-Key-Info:\" field transfers two quantities,\
    \ separated by commas.\n   The first argument is an IK Use Indicator identifying\
    \ the algorithm\n   (and mode, if applicable) in which the DEK is encrypted; for\
    \ purposes\n   of this RFC, the IK Use Indicator subfield will always assume the\n\
    \   reserved string value \"RSA\" (as defined in RFC-1115) for recipients\n  \
    \ for whom asymmetric key management is employed, signifying use of the\n   RSA\
    \ algorithm.  The second argument is a DEK, encrypted (using\n   asymmetric encryption)\
    \ under the recipient's public component.\n   Throughout this RFC we have adopted\
    \ the terms \"private component\" and\n   \"public component\" to refer to the\
    \ quantities which are,\n   respectively, kept secret and made publically available\
    \ in asymmetric\n   cryptosystems.  This convention is adopted to avoid possible\n\
    \   confusion arising from use of the term \"secret key\" to refer to\n   either\
    \ the former quantity or to a key in a symmetric cryptosystem.\n   As discussed\
    \ earlier in this section, the asymmetrically encrypted\n   DEK is represented\
    \ using the technique described in Section 4.3.2.4\n   of this RFC.\n"
- title: 5.  Key Management
  contents:
  - "5.  Key Management\n   Several cryptographic constructs are involved in supporting\
    \ the\n   privacy-enhanced message processing procedure.  A set of fundamental\n\
    \   elements is assumed.  Data Encrypting Keys (DEKs) are used to encrypt\n  \
    \ message text and (for some MIC computation algorithms) in the message\n   integrity\
    \ check (MIC) computation process.  Interchange Keys (IKs)\n   are used to encrypt\
    \ DEKs and MICs for transmission with messages.  In\n   a certificate-based asymmetric\
    \ key management architecture,\n   certificates are used as a means to provide\
    \ entities' public\n   components and other information in a fashion which is\
    \ securely bound\n   by a central authority.  The remainder of this section provides\
    \ more\n   information about these constructs.\n"
- title: 5.1  Data Encrypting Keys (DEKs)
  contents:
  - "5.1  Data Encrypting Keys (DEKs)\n   Data Encrypting Keys (DEKs) are used for\
    \ encryption of message text\n   and (with some MIC computation algorithms) for\
    \ computation of message\n   integrity check quantities (MICs).  It is strongly\
    \ recommended that\n   DEKs be generated and used on a one-time, per-message,\
    \ basis.  A\n   transmitted message will incorporate a representation of the DEK\n\
    \   encrypted under an appropriate interchange key (IK) for each of the\n   named\
    \ recipients.\n   DEK generation can be performed either centrally by key distribution\n\
    \   centers (KDCs) or  by endpoint systems.  Dedicated KDC systems may be\n  \
    \ able to  implement stronger algorithms for random DEK generation than\n   can\
    \ be supported in endpoint systems.  On the other hand,\n   decentralization allows\
    \ endpoints to be relatively self-sufficient,\n   reducing the level of trust\
    \ which must be placed in components other\n   than a message's originator and\
    \ recipient.  Moreover, decentralized\n   DEK generation at endpoints reduces\
    \ the frequency with which senders\n   must make real-time queries of (potentially\
    \ unique) servers in order\n   to send mail, enhancing communications availability.\n\
    \   When symmetric cryptography is used, one advantage of centralized\n   KDC-based\
    \ generation is that DEKs can be returned to endpoints\n   already encrypted under\
    \ the IKs of message recipients rather than\n   providing the IKs to the senders.\
    \  This reduces IK exposure and\n   simplifies endpoint key management requirements.\
    \  This approach has\n   less value if asymmetric cryptography is used for key\
    \ management,\n   since per-recipient public IK components are assumed to be generally\n\
    \   available and per-sender private IK components need not necessarily\n   be\
    \ shared with a KDC.\n"
- title: 5.2  Interchange Keys (IKs)
  contents:
  - "5.2  Interchange Keys (IKs)\n   Interchange Key (IK) components are used to encrypt\
    \ DEKs and MICs.\n   In general, IK granularity is at the pairwise per-user level\
    \ except\n   for mail sent to address lists comprising multiple users.  In order\n\
    \   for two principals to engage in a useful exchange of privacy-enhanced\n  \
    \ electronic mail using conventional cryptography, they must first\n   possess\
    \ common IK components (when symmetric key management is used)\n   or complementary\
    \ IK components (when asymmetric key management is\n   used).  When symmetric\
    \ cryptography is used, the IK consists of a\n   single component, used to encrypt\
    \ both DEKs and MICs.  When\n   asymmetric cryptography is used, a recipient's\
    \ public component is\n   used as an IK to encrypt DEKs (a transformation invertible\
    \ only by a\n   recipient possessing the corresponding private component), and\
    \ the\n   originator's private component is used to encrypt MICs (a\n   transformation\
    \ invertible by all recipients, since the originator's\n   certificate provides\
    \ the necessary public component of the\n   originator).\n   While this RFC does\
    \ not prescribe the means by which interchange keys\n   are provided to appropriate\
    \ parties, it is useful to note that such\n   means may be centralized (e.g.,\
    \ via key management servers) or\n   decentralized (e.g., via pairwise agreement\
    \ and direct distribution\n   among users).  In any case, any given IK component\
    \ is associated with\n   a responsible Issuing Authority (IA).  When certificate-based\n\
    \   asymmetric key management, as discussed in RFC-1114, is employed, the\n  \
    \ IA function is performed by a Certification Authority (CA).\n   When an IA generates\
    \ and distributes an IK component, associated\n   control information is provided\
    \ to direct how it is to be used.  In\n   order to select the appropriate IK(s)\
    \ to use in message encryption, a\n   sender must retain a correspondence between\
    \ IK components and the\n   recipients with which they are associated.  Expiration\
    \ date\n   information must also be retained, in order that cached entries may\n\
    \   be invalidated and replaced as appropriate.\n   Since a message may be sent\
    \ with multiple IK components identified,\n   corresponding to multiple intended\
    \ recipients, each recipient's UA\n   must be able to determine that recipient's\
    \ intended IK component.\n   Moreover, if no corresponding IK component is available\
    \ in the\n   recipient's database when a message arrives, the recipient must be\n\
    \   able to identify the required IK component and identify that IK\n   component's\
    \ associated IA.  Note that different IKs may be used for\n   different messages\
    \ between a pair of communicants.  Consider, for\n   example, one message sent\
    \ from A to B and another message sent (using\n   the IK-per-list method) from\
    \ A to a mailing list of which B is a\n   member.  The first message would use\
    \ IK components associated\n   individually with A and B, but the second would\
    \ use an IK component\n   shared among list members.\n   When a privacy-enhanced\
    \ message is transmitted, an indication of the\n   IK components used for DEK\
    \ and MIC encryption must be included.  To\n   this end, the \"X-Sender-ID:\"\
    \ and \"X-Recipient-ID:\" encapsulated\n   header fields provide the following\
    \ data:\n      1. Identification of the relevant Issuing Authority (IA subfield)\n\
    \      2.  Identification of an entity with which a particular IK\n          component\
    \ is associated (Entity Identifier or EI subfield)\n      3.  Version/Expiration\
    \ subfield\n   The colon character (\":\") is used to delimit the subfields within\
    \ an\n   \"X-Sender-ID:\" or \"X-Recipient-ID:\".  The IA, EI, and\n   version/expiration\
    \ subfields are generated from a restricted\n   character set, as prescribed by\
    \ the following BNF (using notation as\n   defined in RFC-822, sections 2 and\
    \ 3.3):\n   IKsubfld       :=       1*ia-char\n   ia-char        :=       DIGIT\
    \ / ALPHA / \"'\" / \"+\" / \"(\" / \")\" /\n                           \",\"\
    \ / \".\" / \"/\" / \"=\" / \"?\" / \"-\" / \"@\" /\n                        \
    \   \"%\" / \"!\" / '\"' / \"_\" / \"<\" / \">\"\n   An example \"X-Recipient-ID:\"\
    \ field is as follows:\n      X-Recipient-ID: linn@ccy.bbn.com:ptf-kmc:2\n   This\
    \ example field indicates that IA \"ptf-kmc\" has issued an IK\n   component for\
    \ use on messages sent to \"linn@ccy.bbn.com\", and that\n   the IA has provided\
    \ the number 2 as a version indicator for that IK\n   component.\n"
- title: 5.2.1  Subfield Definitions
  contents:
  - "5.2.1  Subfield Definitions\n   The following subsections define the subfields\
    \ of \"X-Sender-ID:\" and\n   \"X-Recipient-ID:\" fields.\n"
- title: 5.2.1.1  Entity Identifier Subfield
  contents:
  - "5.2.1.1  Entity Identifier Subfield\n   An entity identifier is constructed as\
    \ an IKsubfld.  More\n   restrictively, an entity identifier subfield assumes\
    \ the following\n   form:\n                      <user>@<domain-qualified-host>\n\
    \   In order to support universal interoperability, it is necessary to\n   assume\
    \ a universal form for the naming information.  For the case of\n   installations\
    \ which transform local host names before transmission\n   into the broader Internet,\
    \ it is strongly recommended that the host\n   name as presented to the Internet\
    \ be employed.\n"
- title: 5.2.1.2  Issuing Authority Subfield
  contents:
  - "5.2.1.2  Issuing Authority Subfield\n   An IA identifier subfield is constructed\
    \ as an IKsubfld.  IA\n   identifiers must be assigned in a manner which assures\
    \ uniqueness.\n   This can be done on a centralized or hierarchic basis.\n"
- title: 5.2.1.3  Version/Expiration Subfield
  contents:
  - "5.2.1.3  Version/Expiration Subfield\n   A version/expiration subfield is constructed\
    \ as an IKsubfld.  The\n   version/expiration subfield format may vary among different\
    \ IAs, but\n   must satisfy certain functional constraints.  An IA's\n   version/expiration\
    \ subfields must be sufficient to distinguish among\n   the set of IK components\
    \ issued by that IA for a given identified\n   entity.  Use of a monotonically\
    \ increasing number is sufficient to\n   distinguish among the IK components provided\
    \ for an entity by an IA;\n   use of a timestamp additionally allows an expiration\
    \ time or date to\n   be prescribed for an IK component.\n"
- title: 5.2.2  IK Cryptoperiod Issues
  contents:
  - "5.2.2  IK Cryptoperiod Issues\n   An IK component's cryptoperiod is dictated\
    \ in part by a tradeoff\n   between key management overhead and revocation responsiveness.\
    \  It\n   would be undesirable to delete an IK component permanently before\n\
    \   receipt of a message encrypted using that IK component, as this would\n  \
    \ render the message permanently undecipherable.  Access to an expired\n   IK\
    \ component would be needed, for example, to process mail received\n   by a user\
    \ (or system) which had been inactive for an extended period\n   of time.  In\
    \ order to enable very old IK components to be deleted, a\n   message's recipient\
    \ desiring encrypted local long term storage should\n   transform the DEK used\
    \ for message text encryption via re-encryption\n   under a locally maintained\
    \ IK, rather than relying on IA maintenance\n   of old IK components for indefinite\
    \ periods.\n"
- title: 6.  User Naming
  contents:
  - '6.  User Naming

    '
- title: 6.1  Current Approach
  contents:
  - "6.1  Current Approach\n   Unique naming of electronic mail users, as is needed\
    \ in order to\n   select corresponding keys correctly, is an important topic and\
    \ one\n   which has received significant study.  Our current architecture\n  \
    \ associates IK components with user names represented in a universal\n   form\
    \ (\"user@domain-qualified-host\"), relying on the following\n   properties:\n\
    \      1.  The universal form must be specifiable by an IA as it\n          distributes\
    \ IK components and known to a UA as it processes\n          received IK components\
    \ and IK component identifiers.  If a\n          UA or IA uses addresses in a\
    \ local form which is different\n          from the universal form, it must be\
    \ able to perform an\n          unambiguous mapping from the universal form into\
    \ the local\n          representation.\n      2.  The universal form, when processed\
    \ by a sender UA, must have\n          a recognizable correspondence with the\
    \ form of a recipient\n          address as specified by a user (perhaps following\
    \ local\n          transformation from an alias into a universal form).\n   It\
    \ is difficult to ensure these properties throughout the Internet.\n   For example,\
    \ an MTS which transforms address representations between\n   the local form used\
    \ within an organization and the universal form as\n   used for Internet mail\
    \ transmission may cause property 2 to be\n   violated.\n"
- title: 6.2  Issues for Consideration
  contents:
  - "6.2  Issues for Consideration\n   The use of flat (non-hierarchic) electronic\
    \ mail user identifiers,\n   which are unrelated to the hosts on which the users\
    \ reside, may offer\n   value.  As directory servers become more widespread, it\
    \ may become\n   appropriate for would-be senders to search for desired recipients\n\
    \   based on such attributes.  Personal characteristics, like social\n   security\
    \ numbers, might be considered.  Individually-selected\n   identifiers could be\
    \ registered with a central authority, but a means\n   to resolve name conflicts\
    \ would be necessary.\n   A point of particular note is the desire to accommodate\
    \ multiple\n   names for a single individual, in order to represent and allow\n\
    \   delegation of various roles in which that individual may act.  A\n   naming\
    \ mechanism that binds user roles to keys is needed.  Bindings\n   cannot be immutable\
    \ since roles sometimes change (e.g., the\n   comptroller of a corporation is\
    \ fired).\n   It may be appropriate to examine the prospect of extending the\n\
    \   DARPA/DoD domain system and its associated name servers to resolve\n   user\
    \ names to unique user IDs.  An additional issue arises with\n   regard to mailing\
    \ list support: name servers do not currently perform\n   (potentially recursive)\
    \ expansion of lists into users.  ISO and CSNet\n   are working on user-level\
    \ directory service mechanisms, which may\n   also bear consideration.\n"
- title: 7.  Example User Interface and Implementation
  contents:
  - "7.  Example User Interface and Implementation\n   In order to place the mechanisms\
    \ and approaches discussed in this RFC\n   into context, this section presents\
    \ an overview of a prototype\n   implementation. This implementation is a standalone\
    \ program which is\n   invoked by a user, and lies above the existing UA sublayer.\
    \  In the\n   UNIX system, and possibly in other environments as well, such a\n\
    \   program can be invoked as a \"filter\" within an electronic mail UA or\n \
    \  a text editor, simplifying the sequence of operations which must be\n   performed\
    \ by the user.  This form of integration offers the advantage\n   that the program\
    \ can be used in conjunction with a range of UA\n   programs, rather than being\
    \ compatible only with a particular UA.\n   When a user wishes to apply privacy\
    \ enhancements to an outgoing\n   message, the user prepares the message's text\
    \ and invokes the\n   standalone program (interacting with the program in order\
    \ to provide\n   address information and other data required to perform privacy\n\
    \   enhancement processing), which in turn generates output suitable for\n   transmission\
    \ via the UA.  When a user receives a privacy-enhanced\n   message, the UA delivers\
    \ the message in encrypted form, suitable for\n   decryption and associated processing\
    \ by the standalone program.\n   In this prototype implementation (based on symmetric\
    \ key management),\n   a cache of IK components is maintained in a local file,\
    \ with entries\n   managed manually based on information provided by originators\
    \ and\n   recipients.  This cache is, effectively, a simple database.  IK\n  \
    \ components are selected for transmitted messages based on the\n   sender's identity\
    \ and on recipient names, and corresponding \"X-\n   Sender-ID:\" and \"X-Recipient-ID:\"\
    \ fields are placed into the\n   message's encapsulated header.  When a message\
    \ is received, these\n   fields are used as a basis for a lookup in the database,\
    \ yielding the\n   appropriate IK component entries.  DEKs and IVs are generated\n\
    \   dynamically within the program.\n   Options and destination addresses are\
    \ selected by command line\n   arguments to the standalone program.  The function\
    \ of specifying\n   destination addresses to the privacy enhancement program is\
    \ logically\n   distinct from the function of specifying the corresponding addresses\n\
    \   to the UA for use by the MTS.  This separation results from the fact\n   that,\
    \ in many cases, the local form of an address as specified to a\n   UA differs\
    \ from the Internet global form as used in \"X-Sender-ID:\"\n   and \"X-Recipient-ID:\"\
    \ fields.\n"
- title: 8.  Areas For Further Study
  contents:
  - "8.  Areas For Further Study\n   The procedures defined in this RFC are sufficient\
    \ to support\n   implementation of privacy-enhanced electronic mail transmission\
    \ among\n   cooperating parties in the Internet.  Further effort will be needed,\n\
    \   however, to enhance robustness, generality, and interoperability.  In\n  \
    \ particular, further work is needed in the following areas:\n      1.  User naming\
    \ techniques, and their relationship to the domain\n          system, name servers,\
    \ directory services, and key management\n          functions.\n      2.  Detailed\
    \ standardization of Issuing Authority and directory\n          service functions\
    \ and interactions.\n      3.  Privacy-enhanced interoperability with X.400 mail.\n\
    \   We anticipate generation of subsequent RFCs which will address these\n   topics.\n"
- title: 9.  References
  contents:
  - "9.  References\n   This section identifies background references which may be\
    \ useful to\n   those contemplating use of the mechanisms defined in this RFC.\n\
    \       ISO 7498/Part 2 - Security Architecture, prepared by ISO/TC97/SC\n   \
    \    21/WG 1 Ad hoc group on Security, extends the OSI Basic Reference\n     \
    \  Model to cover security aspects which are general architectural\n       elements\
    \ of communications protocols, and provides an annex with\n       tutorial and\
    \ background information.\n       US Federal Information Processing Standards\
    \ Publication (FIPS\n       PUB) 46, Data Encryption Standard, 15 January 1977,\
    \ defines the\n       encipherment algorithm used for message text encryption\
    \ and\n       Message Authentication Code (MAC) computation.\n       FIPS PUB\
    \ 81, DES Modes of Operation, 2 December 1980, defines\n       specific modes\
    \ in which the Data Encryption Standard algorithm\n       may to be used to perform\
    \ encryption.\n       FIPS PUB 113, Computer Data Authentication, May 1985, defines\
    \ a\n       specific procedure for use of the Data Encryption Standard\n     \
    \  algorithm to compute a MAC.\n"
- title: 'NOTES:'
  contents:
  - "NOTES:\n  [1]  Key generation for MIC computation and message text encryption\n\
    \       may either be performed by the sending host or by a centralized\n    \
    \   server.  This RFC does not constrain this design alternative.\n       Section\
    \ 5.1 identifies possible advantages of a centralized\n       server approach\
    \ if symmetric key management is employed.\n  [2]  American National Standard\
    \ Data Encryption Algorithm (ANSI\n       X3.92-1981), American National Standards\
    \ Institute, Approved 30\n       December 1980.\n  [3]  Federal Information Processing\
    \ Standards Publication 46, Data\n       Encryption Standard, 15 January 1977.\n\
    \  [4]  Information Processing Systems: Data Encipherment: Modes of\n       Operation\
    \ of a 64-bit Block Cipher.\n  [5]  Federal Information Processing Standards Publication\
    \ 81, DES\n       Modes of Operation, 2 December 1980.\n  [6]  ANSI X9.17-1985,\
    \ American National Standard, Financial\n       Institution Key Management (Wholesale),\
    \ American Bankers\n       Association, April 4, 1985, Section 7.2.\n  [7]  Postel,\
    \ J., \"Simple Mail Transfer Protocol\" RFC-821,\n       USC/Information Sciences\
    \ Institute, August 1982.\n  [8]  This transformation should occur only at an\
    \ SMTP endpoint, not at\n       an intervening relay, but may take place at a\
    \ gateway system\n       linking the SMTP realm with other environments.\n  [9]\
    \  Use of the SMTP canonicalization procedure at this stage was\n       selected\
    \ since it is widely used and implemented in the Internet\n       community, not\
    \ because SMTP interoperability with this\n       intermediate result is required;\
    \ no privacy-enhanced message will\n       be passed to SMTP for transmission\
    \ directly from this step in the\n       four-phase transformation procedure.\n\
    \ [10]  Crocker, D., \"Standard for the Format of ARPA Internet Text\n       Messages\"\
    , RFC-822, August 1982.\n [11]  Rose, M. and E. Stefferud, \"Proposed Standard\
    \ for Message\n       Encapsulation\", RFC-934, January 1985.\n [12]  CCITT Recommendation\
    \ X.411 (1988), \"Message Handling Systems:\n       Message Transfer System: Abstract\
    \ Service Definition and\n       Procedures\".\n [13]  CCITT Recommendation X.509\
    \ (1988), \"The Directory -\n       Authentication Framework\".\n [14]  Kille,\
    \ S., \"Mapping between X.400 and RFC-822\", RFC-987, June\n       1986.\n [15]\
    \  Federal Information Processing Standards Publication 113,\n       Computer\
    \ Data Authentication, May 1985.\n [16]  American National Standard for Information\
    \ Systems - Data\n       Encryption Algorithm - Modes of Operation (ANSI X3.106-1983),\n\
    \       American National Standards Institute - Approved 16 May 1983.\n [17] \
    \ Voydock, V. and S. Kent, \"Security Mechanisms in High-Level\n       Network\
    \ Protocols\", ACM Computing Surveys, Vol. 15, No. 2, Pages\n       135-171, June\
    \ 1983.\n"
- title: Author's Address
  contents:
  - "Author's Address\n       John Linn\n       Secure Systems\n       Digital Equipment\
    \ Corporation\n       85 Swanson Road, BXB1-2/D04\n       Boxborough, MA  01719-1326\n\
    \       Phone: 508-264-5491\n       EMail: Linn@ultra.enet.dec.com\n"
