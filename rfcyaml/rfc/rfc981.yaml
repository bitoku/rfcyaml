- title: __initial_text__
  contents:
  - '            An Experimental Multiple-Path Routing Algorithm

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This RFC describes an experimental, multiple-path routing\
    \ algorithm\n   designed for a packet-radio broadcast channel and discusses the\n\
    \   design and testing of a prototype implementation.  It is presented as\n  \
    \ an example of a class of routing algorithms and data-base management\n   techniques\
    \ that may find wider application in the Internet community.\n   Of particular\
    \ interest may be the mechanisms to compute, select and\n   rank a potentially\
    \ large number of speculative routes with respect to\n   the limited cumputational\
    \ resources available.  Discussion and\n   suggestions for improvements are welcomed.\
    \  Distribution of this memo\n   is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document introduces wiretap algorithms, which are a class of\n\
    \   routing algorithms that compute quasi-optimum routes for stations\n   sharing\
    \ a broadcast channel, but with some stations hidden from\n   others. The wiretapper\
    \ observes the paths (source routes) used by\n   other stations sending traffic\
    \ on the channel and, using a heuristic\n   set of factors and weights, constructs\
    \ speculative paths for its own\n   traffic.  A prototype algorithm, called here\
    \ the Wiretap Algorithm,\n   has been designed for the AX.25 packet-radio channel.\
    \  Its design is\n   similar in many respects to the shortest-path-first (spf)\
    \ algorithm\n   used in the ARPANET and elsewhere, and is in fact a variation\
    \ in the\n   class of algorithms, including the Viterbi Algorithm, that construct\n\
    \   optimum paths on a graph according to a distance computed as a\n   weighted\
    \ sum of factors assigned to the nodes and edges.\n   The Wiretap Algorithm differs\
    \ from conventional algorithms in that it\n   computes not only the primary route\
    \ (a minimum-distance path), but\n   also additional paths ordered by distance,\
    \ which serve as alternate\n   routes should the primary route fail.  This feature\
    \ is also useful\n   for the discovery of new paths not previously observed on\
    \ the\n   channel.\n   Since the amateur AX.25 packet-radio channel is very active\
    \ in the\n   Washington, DC, area and carries a good deal of traffic under\n \
    \  punishing conditions, it was considered a sufficiently heroic\n   environment\
    \ for a convincing demonstration of the prototype\n   algorithm.  It was implemented\
    \ as part of an IP/TCP driver for the\n   LSI-11 processor running the \"fuzzball\"\
    \ operating system.  The driver\n   is connected via serial line to a 6809-based\
    \ TAPR-1 processor running\n   the WA8DED firmware, which controls the radio equipmnet\
    \ in both\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   virtual-circuit and datagram\
    \ modes. The prototype implementation\n   provides primary and alternate routes,\
    \ can route around congested\n   areas and can change routes during a connection.\
    \ This document\n   describes the design, implementation and initial testing of\
    \ the\n   algorithm.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the design, implementation and initial\n\
    \   testing of the Wiretap Algorithm, a dynamic routing algorithm for the\n  \
    \ AX.25 packet-radio channel [4].  The AX.25 channel operates in CSMA\n   contention\
    \ mode at VHF frequencies using AFSK/FM modulation at 1200\n   bps. The AX.25\
    \ protocol itself is similar to X.25 link-layer protocol\n   LAPB, but with an\
    \ extended frame header consisting of a string of\n   radio callsigns representing\
    \ a path, usually selected by the\n   operator, between two end stations, possibly\
    \ via one or more\n   intermediate packet repeaters or digipeaters.  Most stations\
    \ can\n   operate simultaneously as intermediate systems digipeaters) and as\n\
    \   end systems with respect to the ISO model.\n   Wiretap uses passive monitoring\
    \ of frames transmitted on the channel\n   in order to build a dynamic data base\
    \ which can be used to determine\n   optimum routes.  The algorithm operates in\
    \ real time and generates a\n   set of paths ordered by increasing total distance,\
    \ as determined by a\n   shortest-path-first procedure similar to that used now\
    \ in the ARPANET\n   and planned for use in the new Internet gateway system [2].\
    \  The\n   implementation provides optimum routes (with respect to the factors\n\
    \   and weights selected) at initial-connection time for virtual\n   circuits,\
    \ as well as for each datagram transmission.  This document\n   is an initial\
    \ status report and overview of the prototype\n   implementation for the LSI-11\
    \ processor running the \"fuzzball\"\n   operating system.\n   The principal advantage\
    \ in the use of routing algorithms like Wiretap\n   is that digipeater paths can\
    \ be avoided when direct paths are\n   available, with digipeaters used only when\
    \ necessary and also to\n   discover hidden stations.  In the present exploratory\
    \ stage of\n   evolution, the scope of Wiretap has been intentionally restricted\
    \ to\n   passive monitoring.  In a later stage the scope may be extended to\n\
    \   include the use of active probes to discover hidden stations and the\n   use\
    \ of clustering techniques to manage the distribution of large\n   quantities\
    \ of routing information.\n   The AX.25 channel interface is the 6809-based TAPR-1\
    \ processor\n   running the WA8DED firmware (version 1.0) and connected to the\
    \ LSI-11\n   by a 4800-bps serial line.  The WA8DED firmware produces as an option\n\
    \   a monitor report for each received frame of a selected type,\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   including U, I and S frames.\
    \  Wiretap processes each of these to\n   extract routing information and (optionally)\
    \ saves them in the system\n   log file. Following is a typical report:\n    \
    \  fm KS3Q to W4CQI via WB4JFI-5* WB4APR-6 ctl I11 pid F0\n   The originating\
    \ station is KS3Q and the destination is W4CQI.  The\n   frame has been digipeated\
    \ first by WB4JFI-5 and then WB4APR-6, is an\n   I frame (sequence numbers follow\
    \ the I indicator) and has protocol\n   identifier F0 (hex).  The asterisk \"\
    *\" indicates the report was\n   received from that station.  If no asterisk appears,\
    \ the report was\n   received from the originator.\n"
- title: 2.  Design Principles
  contents:
  - "2.  Design Principles\n   A path is a concatenation of directed links originating\
    \ at one\n   station, extending through one or more digipeaters and terminating\
    \ at\n   another station.  Each link is characterized by a set of factors such\n\
    \   as cost, delay or throughput that can be computed or estimated.\n   Wiretap\
    \ computes several intrinsic factors for each link and updates\n   the routing\
    \ data base, consisting of node and link tables.  The\n   weighted sum of these\
    \ factors for each link is the distance of that\n   link, while the sum of the\
    \ distances for each link in the path is the\n   distance of that path.\n   It\
    \ is the intent of the Wiretap design that the distance of a link\n   reflect\
    \ the a-priori probability that a packet will successfully\n   negotiate that\
    \ link relative to the other choices possible at the\n   sending node.  Thus,\
    \ the probability of a non-looping path is the\n   product of the probabilities\
    \ of its links.  Following the technique\n   of Viterbi [1], it is convenient\
    \ to represent distance as a\n   logarithmic transformation of probability, which\
    \ then becomes a\n   metric.  However, in the following the underlying probabilities\
    \ are\n   not considered directly, since the distances are estimated on a\n  \
    \ heuristic basis.\n   Wiretap incorporates an algorithm which constructs a set\
    \ of paths,\n   ordered by distance, between given end stations according to the\n\
    \   factors and weights contained in the routing data base.  Such paths\n   can\
    \ be considered optimum routes between these stations with respect\n   to the\
    \ given assignment of factors and weights.  In the prototype\n   implementation\
    \ one of the end stations must be the Wiretap station\n   itself;  however, in\
    \ principle, the Wiretap station can generate\n   routes for other stations subject\
    \ to the applicability of the\n   information in its data base.\n   Note that\
    \ Wiretap in effect constructs minimum-distance paths in the\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   direction from the destination\
    \ station to the Wiretap station and,\n   based on that information, then computes\
    \ the optimum reciprocal\n   routes from the Wiretap station to the destination\
    \ station.  The\n   expectation is that the destination station also runs its\
    \ own routing\n   algorithm, which then computes its own optimum reciprocal routes\n\
    \   (i.e.  the optimum direct routes from the Wiretap station).  However,\n  \
    \ the routing data bases at the two stations may diverge due to\n   congestion\
    \ or hidden stations, so that the computed routes may not\n   coincide.\n   In\
    \ principle, Wiretap-computed routes can be fine-tuned using\n   information provided\
    \ not only by its directly communicating stations\n   but others that may hear\
    \ them as well.  The most interesting scenario\n   would be for all stations to\
    \ exchange Wiretap information using a\n   suitable distributed protocol, but\
    \ this is at the moment beyond the\n   scope of the prototype implementation.\
    \  Nevertheless, suboptimum but\n   useful paths can be obtained in the traditional\
    \ and simple way with\n   one station using a Wiretap-computed route and the other\
    \ its\n   reciprocal, as determined from the received frame header.  Thus,\n \
    \  Wiretap is compatible with existing channel procedures and protocols.\n"
- title: 3.  Implementation Overview
  contents:
  - "3.  Implementation Overview\n   The prototype Wiretap implementation for the\
    \ LSI-11 includes two\n   routines, the wiretap routine, which extracts information\
    \ from\n   received monitor headers and builds the routing data base, and the\n\
    \   routing routine, which calculates paths using the information in the\n   data\
    \ base. The data base consists of three tables, the channel table,\n   node table\
    \ and link table.  The channel table includes an entry for\n   each channel (virtual\
    \ circuit) supported by the TAPR-1 processor\n   running the WA8DED firmware,\
    \ five in the present configuration.  The\n   structure and use of this table\
    \ are only incidental to the algorithm\n   and will not be discussed further.\n\
    \   The node table includes an entry for each distinct callsign (which\n   may\
    \ be a collective or beacon identifier) heard on the channel,\n   together with\
    \ node-related routing information, the latest computed\n   route and other miscellaneous\
    \ information.  The table is indexed by\n   node ID (NID), which is used in the\
    \ computed route and in other\n   tables instead of the awkward callsign string.\
    \  The link table\n   contains an entry for each distinct (unordered) node pair\
    \ observed in\n   a monitor header.  Each entry includes the from-NID and to-NID\
    \ of the\n   first instance found, together with link-related routing information\n\
    \   and other miscellaneous information.  Both tables are dynamically\n   managed\
    \ using a cache algorithm based on a weighted\n   least-recently-used replacement\
    \ mechanism described later.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   The example discussed in\
    \ Appendix A includes candidate node and link\n   tables for illustration.  These\
    \ tables were constructed in real time\n   by the prototype implementation from\
    \ off-the-air monitor headers\n   collected over a typical 24-hour period.  Each\
    \ node table entry\n   requires 26 bytes and each link table entry four bytes.\
    \  The maximum\n   size of the node table is presently 75 entries, while that\
    \ of the\n   link table is 150 entries.  Once the cache algorithm has stabilized\n\
    \   for a day or two, it is normal to have about 60 entries in the node\n   table\
    \ and 100 entries in the link table.\n   The node table and link table together\
    \ contain all the information\n   necessary to construct a network graph, as well\
    \ as calculate paths on\n   that graph between any two end stations, not just\
    \ those involving the\n   Wiretap station.  Note, however, that the Wiretap station\
    \ does not in\n   general hear all other stations on the channel, so may choose\n\
    \   suboptimum routes.  However, in the Washington, DC, area most\n   stations\
    \ use one of several digipeaters, which are in general heard\n   reliably by other\
    \ stations in the area.  Thus, a Wiretap station can\n   eventually capture routes\
    \ to almost all other stations using the\n   above tables and the routing algorithm\
    \ described later.\n"
- title: 4.  The Wiretap Routine
  contents:
  - "4.  The Wiretap Routine\n   The wiretap routine is called to process each monitor\
    \ header.  It\n   extracts each callsign from the header in turn and searches\
    \ the node\n   table for corresponding NID, making a new entry and NID if not\n\
    \   already there.  The result is a string of NIDs, starting at the\n   originating\
    \ station, extending through a maximum of eight digipeaters\n   and ending at\
    \ the destination station.  For each pair of NIDs along\n   this string the link\
    \ table is searched for either the direct link, as\n   indicated in the string,\
    \ or its reciprocal;  that is, the direction\n   towards the originator.\n   The\
    \ operations that occur at this point can be illustrated by the\n   following\
    \ diagram, which represents a monitor header with apparent\n   path from station\
    \ 4 to station 6 via digipeaters 7, 2 and 9 in\n   sequence.  It happens the header\
    \ was heard by the Wiretap station (0)\n   from station 2.\n                 \
    \  (4)     (7)     (2)     (9)     (6)\n              orig o------>o<=====>o------>o------>o\
    \ dest\n                                   |\n                               \
    \    |\n                                   V\n                               \
    \   (0)\n                                wiretap\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   Presumably, the fact that\
    \ the header was heard from station 2\n   indicates the path from station 4 to\
    \ station 2 and then to station 0\n   is viable, so that each link along this\
    \ path can be marked \"heard\" in\n   that direction.  However, the viability\
    \ of the path from station 2 to\n   station 6 can only be presumed, unless additional\
    \ evidence is\n   available.  If in fact the header is from an AX.25 I or S frame\
    \ (but\n   not a U frame), an AX.25 virtual circuit has apparently been\n   previously\
    \ established between the end stations and the presumption\n   is strengthened.\
    \  In this case each link from 4 to 6 is marked\n   \"synchronized\" (but not\
    \ the link from 2 to 0).\n   Not all stations can both originate frames and digipeat\
    \ them. Station\n   4 is observed to originate and station 7 to digipeat, but\
    \ station 9\n   is only a presumptive digipeater and no evidence is available\
    \ that\n   the remaining stations can originate frames.  Thus, the link from\n\
    \   station 4 to station 7 is marked \"source\" and from station 7 to\n   station\
    \ 2 is marked \"digipeated.\"\n   Depending on the presence of congestion and\
    \ hidden stations, it may\n   happen that the reciprocal path in the direction\
    \ from station 6 to\n   station 4 has quite different link characteristics;  therefore,\
    \ a\n   link can be recognized as heard in each direction independently.  In\n\
    \   the above diagram the link between 2 and 7 has been heard in both\n   directions\
    \ and is marked \"reciprocal\".  However, there is only one\n   synchronized mark,\
    \ which can be set in either direction.  If a\n   particular link is not marked\
    \ either heard or synchronized, any\n   presumption on its viability to carry\
    \ traffic is highly speculative\n   (the traffic is probably a beacon or \"CQ\"\
    ).  If later marked\n   synchronized the presumption is strengthened and if later\
    \ marked\n   heard in the reciprocal direction the presumption is confirmed.\n\
    \   Experience shows that a successful routing algorithm for any\n   packet-radio\
    \ channel must have provisions for congestion avoidance.\n   There are two straightforward\
    \ ways to cope with this.  The first is a\n   static measure of node congestion\
    \ based on the number of links in the\n   network graph incident at each node.\
    \  This number is computed by the\n   wiretap routine and stored in the node table\
    \ as it adds entries to\n   the link table.\n   The second, not yet implemented,\
    \ is a dynamic measure of node\n   congestion which tallies the number of link\
    \ references during the\n   most recent time interval (of specified length). \
    \ The current plan\n   was suggested by the reachability mechanism used in the\
    \ ARPANET and\n   the Exterior Gateway Protocol [3].  An eight-bit shift register\
    \ for\n   each node is shifted in the direction from high-order to low-order\n\
    \   bits, with zero-bits preceeding the high-order bit, at the rate of\n   one\
    \ shift every ten seconds.  If during the preceeding ten-second\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   period a header with a path\
    \ involving that node is found, the\n   high-order bit of the register is set\
    \ to one.  When a path is\n   calculated the number of one-bits in the register\
    \ is totalled and\n   used as a measure of dynamic node congestion. Thus, the\
    \ time interval\n   specified is 80 seconds, which is believed appropriate for\
    \ the AX.25\n   channel dynamics.\n"
- title: 5.  Factor Computations and Weights
  contents:
  - "5.  Factor Computations and Weights\n   The data items produced by the wiretap\
    \ routine are processed to\n   produce a set of factors that can be used by the\
    \ routing routine to\n   develop optimum routes.  In order to insure a stable\
    \ and reliable\n   convergence as the routing algorithm constructs and discards\n\
    \   candidate paths leading to these routes, the factor computations\n   should\
    \ have the following properties:\n   1.  All factors should be positive, monotone\
    \ functions which increase\n       in value as system performance degrades from\
    \ optimum.\n   2.  The criteria used to estimate link factors should be symmetric;\n\
    \       that is, their values should not depend on the particular\n       direction\
    \ the link is used.\n   3.  The criteria used to estimate node factors should\
    \ not depend on\n       the particular links that traffic enters or leaves the\
    \ node.\n   Each factor is associated with a weight assignment which reflects\
    \ the\n   contribution of the factor in the distance calculation, with larger\n\
    \   weights indicating greater importance.  For comparison with other\n   common\
    \ routing algorithms, as well as for effective control of the\n   computational\
    \ resources required, it may be desirable to impose\n   additional restrictions\
    \ on these computations, which may be a topic\n   for further study.  Obviously,\
    \ the success of this routing algorithm\n   depends on cleverly (i.e.  experimentally)\
    \ determined factor\n   computations and weight assignments.\n   The particular\
    \ choices used in the prototype implementation should be\n   considered educated\
    \ first guesses that might be changed, perhaps in\n   dramatic ways, in later\
    \ implementations.  Nevertheless, the operation\n   of the algorithm in finding\
    \ optimum routes over all choices in factor\n   computations and weights is unchanged.\
    \  Recall that the wiretap\n   routine generates data items for each node and\
    \ link heard and saves\n   them in the node and link tables.  These items are\
    \ processed by the\n   routing routine to generate the factors shown below in\
    \ Table 1 and\n   Table 2.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n      Factor  Weight  Name \
    \           How Determined\n      ---------------------------------------------------------------\n\
    \      f0      30      hop             1 for each link\n      f1      50     \
    \ unverified      1 if not heard either direction\n      f2      5       non-reciprocal\
    \  1 if not heard both directions\n      f3      5       unsynchronized  1 if\
    \ no I or S frame heard\n                         Table 1. Link Factors\n    \
    \  Factor  Weight  Name            How Determined\n      ---------------------------------------------------------------\n\
    \      f4      5       complexity      1 for each incident link\n      f5    \
    \  20      digipeated      1 if station does not digipeat\n      f6      -   \
    \    congestion      (see text)\n                         Table 2. Node Factors\n\
    \   With regard to link factors, the \"hop\" factor is assigned as one for\n \
    \  each link and represents the bias found in other routing algorithms\n   of\
    \ this type.  The intent is that the routing mechanism degenerate to\n   minimum-hop\
    \ in the absence of any other information.  The\n   \"unverified\" factor is assigned\
    \ as one if the heard bit is not set\n   (not heard in either direction), while\
    \ the \"non-reciprocal\" factor is\n   assigned as one if the reciprocal bit is\
    \ not set (not heard in both\n   directions).  The \"unsynchronized\" factor is\
    \ assigned as one if the\n   synchronized bit is not set (no I or S frames observed\
    \ in either\n   direction).\n   With regard to node factors, the \"complexity\"\
    \ factor is computed as\n   the number of links incident at the node, while the\
    \ \"congestion\"\n   factor is to be computed as the number of intervals in the\
    \ eight\n   ten-second intervals preceding the time of observation in which a\n\
    \   frame was transmitted to or through the node.  The \"digipeated\"\n   factor\
    \ is assigned as one if the node is only a source (i.e.  no\n   digipeated frames\
    \ have been heard from it).  For the purposes of\n   path-distance calculations,\
    \ the node factors are taken as zero for\n   the endpoint nodes, since their contribution\
    \ to any path would be the\n   same.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - 'An Experimental Multiple-Path Routing Algorithm

    '
- title: 6.  The Routing Routine
  contents:
  - "6.  The Routing Routine\n   The dynamic data base built by the wiretap routine\
    \ is used by the\n   routing routine to compute routes as required.  Ordinarily,\
    \ this\n   needs to be done only when the first frame to a new destination is\n\
    \   sent and at intervals thereafter, with the intervals perhaps\n   modulated\
    \ by retry count together with congestion thresholds, etc.\n   The technique used\
    \ is a variation of the Viterbi Algorithm [1], which\n   is similar to the the\
    \ shortest-path-first algorithm used in the\n   ARPANET and elsewhere [2].  It\
    \ operates by constructing a set of\n   candidate paths on the network graph from\
    \ the destination to the\n   source in increasing number of hops. Construction\
    \ continues until all\n   the complete paths satisfying a specified condition\
    \ are found,\n   following which one with minimum distance is selected as the\
    \ primary\n   route and the others ranked as alternate routes.\n   There are a\
    \ number of algorithms to determine the mimimum-distance\n   path on a graph between\
    \ two nodes with given metric.  The prototype\n   implementation operates using\
    \ a dynamic path list of entries derived\n   from the link table.  Each list entry\
    \ includes (a) the NID of the\n   current node, (b) a pointer to the preceding\
    \ node on the path and (c)\n   the hop count and (d) distance from the node to\
    \ the final destination\n   node of the path:\n                   [ NID, pointer,\
    \ hop, distance ] .\n   The algorithm starts with the list containing only the\
    \ entry [\n   dest-NID, 0, 0, 0 ], where dest-NID is the final destination NID,\
    \ and\n   then scans the list starting at this entry.  For each such entry it\n\
    \   scans the link table for all links with either to-NID or from-NID\n   matching\
    \ NID and for each one found inserts a new entry:\n         [ new-NID, new-pointer,\
    \ hop + 1, distance + weight ] ,\n   where the new-NID is the to-NID of the link\
    \ if its from-NID matches\n   the old NID and the from-NID of the link otherwise.\
    \  The new-pointer\n   is set at the address of the old entry and the weight is\
    \ computed\n   from the factors and weights as described previously.  The algorithm\n\
    \   coontinues to select succeeding entries and scan the link table until\n  \
    \ no further entries remain to be processed, the allocated list area is\n   full\
    \ or the maximum hop count or distance are exceeded, as explained\n   below.\n\
    \   Note that in the Viterbi Algorithm, which operates in a similar\n   manner,\
    \ when paths merge at a single node, all except one of the\n   minimum-distance\
    \ paths (called survivors) are abandonded.  If only\n   one of the minimum-distance\
    \ paths is required, Wiretap does the same;\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   however, in the more general\
    \ case where alternate paths are required,\n   all non-looping paths are potential\
    \ survivors.  In order to prevent a\n   size explosion in the list, as well as\
    \ to suppress loops, new list\n   entries with new-NID matching the NID of an\
    \ existing entry on the\n   path to the final destination NID are suppressed and\
    \ paths with hop\n   counts exceeding (currently) eight or distances exceeding\
    \ 255 are\n   abandoned.\n   If the Wiretap station NID is found in the from-NID\
    \ of an entry\n   inserted in the list, a complete path has been found.  The algorithm\n\
    \   remembers the minimum distance and minimum hop count of the complete\n   paths\
    \ found as it proceeds.  When only one of the minimum-distance\n   paths (primary\
    \ route) is required, then for any list entry where the\n   distance exceeds the\
    \ minimum distance or the hop count exceeds the\n   maximum hop count (plus one),\
    \ the path is abandoned and no further\n   processing done for it.  When alternate\
    \ routes are required the\n   hop-count test is used, but the minimum-distance\
    \ test is not.\n   The above pruning mechanisms are designed so that the the algorithm\n\
    \   always finds all complete paths with the minimum hop count and the\n   minimum\
    \ hop count (plus one), which are designated the alternate\n   routes. The assignment\
    \ of factor computations and weights is intended\n   to favor minimum-hop paths\
    \ under most conditions, but to allow the\n   path length to grow by no more than\
    \ one additional hop under\n   conditions of extreme congestion.  Thus, the minimum-distance\
    \ path\n   (primary route) must be found among the alternate paths, usually, but\n\
    \   not always, one of the minimum-hop paths.\n   At the completion of processing\
    \ the complete paths are ranked first\n   by distance, then by the order of the\
    \ final entry in the list, which\n   is in hop-count order by construction, to\
    \ establish a well-defined\n   ordering.  The first of these paths represents\
    \ the primary route,\n   while the remaining represent alternatives should all\
    \ lower-ranked\n   routes fail.\n   Some idea of the time and space complexity\
    \ of the routing routine can\n   be determined from the observation that the computations\
    \ for all\n   primary and secondary routes of the example in Appendix A with 58\n\
    \   nodes and 98 links requires a average of about 30 list entries, but\n   occasionally\
    \ overflows the maximum size, currently 100 entries.  Each\n   step requires a\
    \ scan of all the links and a search (for loops) along\n   the maximum path length,\
    \ which in principle can add most of the links\n   to the list for each new hop.\
    \  Obviously, the resources required can\n   escalate dramatically, unless effective\
    \ pruning techniques such as\n   the above are used.\n   The prototype implementation\
    \ requires 316 milliseconds on an\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   LSI-11/73 to calculate the\
    \ 58 primary routes to all 58 nodes for an\n   average of about 5.4 milliseconds\
    \ per route.  The implementation\n   requires 1416 milliseconds to calculate the\
    \ 201 combined primary and\n   alternate routes to all 58 nodes for an average\
    \ of about 3.4\n   milliseconds per route.\n"
- title: 7.  Data Base Housekeeping
  contents:
  - "7.  Data Base Housekeeping\n   In normal operation Wiretap tends to pick up a\
    \ good deal of errors\n   and random junk, since it can happen that a station\
    \ may call any\n   other station using ad-hoc heuristics and often counterproductive\n\
    \   strategies. The result is that Wiretap may add speculative and\n   erroneous\
    \ links to the data base.  In practice, this happens\n   reasonably often as operators\
    \ manually try various paths to stations\n   that may be shut down, busy or blocked\
    \ by congestion.  Nevertheless,\n   since Wiretap operates entirely by passive\
    \ monitoring, speculative\n   links may represent the principal means for discovery\
    \ of new paths.\n   The number of nodes and links, speculative or not, can grow\
    \ without\n   limit as the Wiretap station continues to monitor the channel. \
    \ As\n   the size of the node table or link table approaches the maximum, a\n\
    \   garbage-collection procedure is automatically invoked.  The procedure\n  \
    \ used in the prototype implementation was suggested by virtual-memory\n   storage-management\
    \ techniques in which the oldest unreferenced page\n   is replaced when a new\
    \ page frame is required.  Every link table\n   entry includes an age field, which\
    \ is incremented once each minute if\n   its value is less than 60, once each\
    \ hour otherwise and reset to zero\n   when the link is found in a monitor header.\
    \  When new space is\n   required in the link table, the link with the largest\
    \ product of age\n   and distance, as determined by the factor computations and\
    \ weights,\n   is removed first.\n   Every node table entry includes the congestion\
    \ factor mentioned\n   above, which is a count of the number of links (plus one)\
    \ incident at\n   that node.  As links are removed from the link table, these\
    \ counts\n   are decremented.  If the count for some node decrements to one, that\n\
    \   node is removed.  Thus, if new space is required in the node table,\n   links\
    \ are removed as described above until the required space is\n   reclaimed.\n\
    \   In addition to the above, and in order to avoid capture of the tables\n  \
    \ by occasional speculative spasms on one hand and stagnation due to\n   excessively\
    \ stale information on the other, if the age counter\n   exceeds a predetermined\
    \ threshold, currently fifteen minutes for a\n   speculative link and 24 hours\
    \ for other links, the link is removed\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   from the data base regardless\
    \ of distance.  It is expected that these\n   procedures will be improved as experience\
    \ with the implementation\n   matures.\n"
- title: 8.  Summary and Directions for Further Development
  contents:
  - "8.  Summary and Directions for Further Development\n   Wiretap represents an\
    \ initial experiment and evaluation of the\n   effectiveness of passive monitoring\
    \ in the management of the AX.25\n   packet-radio channel.  While the results\
    \ of initial experiments have\n   been encouraging, considerable work needs to\
    \ be done in the\n   optimization effectively, some experience needs to be gained\
    \ in the\n   day-to-day operation of the prototype system during which various\n\
    \   combinations of weight assignments can be tried.\n   The prototype implementation\
    \ has been in use for about four months at\n   this writing;  however, a number\
    \ of lessons were quickly learned. The\n   implementation includes a finite-state\
    \ automaton to manage initial\n   connection requests, including the capability\
    \ to retry SABM frames\n   along alternate routes computed by Wiretap.  A simple\
    \ but effective\n   heuristic is used to generate speculative paths by artificially\n\
    \   adding links between the destination station and the Wiretap station\n   together\
    \ with all other stations in the node table identified as\n   digipeaters.  The\
    \ algorithm then operates as described above to\n   generate the primary and alternate\
    \ routes.  An example of this\n   technique is given in the Appendix.\n   This\
    \ technique works very well, at least in the initial-connection\n   phase of virtual-circuit\
    \ mode, although it requires significant\n   computational resources, due to the\
    \ large number of possible paths\n   ranging from reasonable to outrageous.  In\
    \ the case of datagram mode\n   only the primary route is computed.  The heuristic\
    \ path-abandonment\n   strategy outlined above is a critical performance determinant\
    \ in this\n   area.\n   While there is a mechanism for the TAPR-1 processor to\
    \ notify the\n   prototype implementation that a lower-level AX.25 virtual circuit\
    \ has\n   failed, so that an alternate path can be tried, there is no intrinsic\n\
    \   mechanism to signal the failure of an upper-level TCP connection,\n   which\
    \ uses IP datagrams wrapped in AX.25 I frames (connection mode)\n   or UI frames\
    \ (connectionless mode).  This is a generic problem with\n   any end-system protocol\
    \ where the peers are located physically\n   distant from the link-level entities.\
    \  Experience indicates the value\n   of providing a two-way conduit to share\
    \ control information between\n   protocol layers may be seriously underestimated.\n\
    \   The prototype implementation manages processor and storage demands in\n  \
    \ relatively simple ways, which can result in considerable\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   inefficiencies.  It is apparent\
    \ that in any widely distributed\n   version of Wiretap these demands will have\
    \ to be carefully managed.\n   As suggested above, effective provisions to purge\
    \ old information,\n   especially speculative links, are vital, as well as provisions\
    \ to\n   control the intervals between route computations, for instance as a\n\
    \   function of link state and traffic mode.\n   The next step in the evolution\
    \ towards a fully distributed routing\n   algorithm is the introduction of active\
    \ probing techniques.  This\n   should considerably improve the capability to\
    \ discover new paths, as\n   well as to fine-tune existing ones.  It should be\
    \ possible to\n   implement an active probing mechanism while maintaining compatibility\n\
    \   with the passive-only Wiretap, as well as maintaining compatibilty\n   with\
    \ other stations using no routing algorithms at all.  It does seem\n   that judicious\
    \ use of beacons to discover and renew paths in the\n   absence of traffic will\
    \ be required, as well as some kind of\n   echo/reply mechanism similar to the\
    \ ICMP Echo/Reply support required\n   of Internet hosts.\n   In order to take\
    \ advantage of the flexibility provided by routing\n   algorithms like Wiretap,\
    \ it will be necessary to revise the AX.25\n   specification to include \"loose\"\
    \ source routing in addition to the\n   present \"strict\" source routing.  Strict\
    \ source routing requires\n   every forwarding stage (callsign) to be explicitly\
    \ declared, while\n   loose source routing would allow some or all stages to be\
    \ left to the\n   discretion of the local routing agent or digipeater.  One suggestion\n\
    \   would be to devise a special collective indicator or callsign that\n   could\
    \ signal a Wiretap digipeater to insert the computed route string\n   following\
    \ its callsign in the AX.25 frame header.\n   A particularly difficult area for\
    \ any routing algorithm is in its\n   detection and reponse to congestion.  Some\
    \ hints on how the existing\n   Wiretap mechanism can be improved are indicated\
    \ in this document.\n   Additional work, especially with respect to the hidden-station\n\
    \   problem, is necessary.  Perhaps the most useful feature of all would\n   be\
    \ a link-quality indication derived from the radio, modem or\n   frame-level procedures\
    \ (checksum failures).  Conceivably, this\n   information could be included in\
    \ beacon messages broadcast\n   occasionally by the digipeaters.\n   It is quite\
    \ likely that the most effective application of routing\n   algorithms in general\
    \ will be at the local-area digipeater sites.\n   One reason for this is that\
    \ these stations may have off-channel\n   trunking facilities that connect different\
    \ areas and may exchange\n   wide-area routing information via these facilities.\
    \  The routing\n   information collected by the local-area Wiretap stations could\
    \ then\n   be exchanged directly with the wide-area sites.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - 'An Experimental Multiple-Path Routing Algorithm

    '
- title: 9.  References
  contents:
  - "9.  References\n   [1]  Forney, G.D., Jr.  The Viterbi Algorithm.  Proc IEEE\
    \ 61, 3\n        (March 1973), 268-278.\n   [2]  McQuillan, J., I.  Richer and\
    \ E.  Rosen.  An overview of the new\n        routing algorithm for the ARPANET.\
    \  Proc.  ACM/IEEE Sixth Data\n        Comm. Symp., November 1979.\n   [3]  Mills,\
    \ D.L.  Exterior Gateway Protocol Formal Specification.\n        DARPA Network\
    \ Working Group Report RFC-904, M/A-COM Linkabit,\n        April 1984.\n   [4]\
    \  Fox, T.L., (Ed.).  AX.25 amateur packet-radio link-layer\n        protocol,\
    \ Version 2.0.  American Radio Relay League, October\n        1984.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - 'An Experimental Multiple-Path Routing Algorithm

    '
- title: Appendix A.  An Example
  contents:
  - "Appendix A.  An Example\n   An example will illustrate how Wiretap constructs\
    \ primary and\n   alternate routes given candidate node and link tables.  The\
    \ candidate\n   tables resulted from a scenario monitoring normal traffic on the\n\
    \   145.01-MHz AX.25 packet-radio channel in the Washington, DC, area\n   during\
    \ a typical 24-hour period.  The node and link tables\n   illustrated below give\
    \ an idea of what the constructed data base\n   looks like, as well as provide\
    \ the basis for the example.\n   Figure 1 illustrates a candidate node table showing\
    \ the node ID\n   (NID), callsign and related information for each station.  The\
    \ Route\n   field contains the primary route (minimum-distance path), as a string\n\
    \   of NIDs from the origination station (NID = 0) to the destination\n   station\
    \ shown, with the exception of the endpoint NIDs.  The absence\n   of a route\
    \ string indicates the station is directly reachable without\n   the assistance\
    \ of a digipeater.  Note that the originating station is\n   always the first\
    \ entry in the node table, in this case W3HCF, and is\n   initialized with defaults\
    \ before the algorithm is started.\n      NID Callsign    Flags   Links   Last\
    \ Rec    Wgt   Route\n      -------------------------------------------------------\n\
    \      0    W3HCF      005     26      15:00:19    255\n      1    WB4APR-5  \
    \ 017     18      16:10:38    30\n      2    DPTRID     000     3       00:00:00\
    \    210   1\n      3    W9BVD      005     3       23:24:33    40\n      4  \
    \  W3IWI      015     5       16:15:30    35\n      5    WB4JFI-5   017     34\
    \      16:15:30    35\n      6    W3TMZ      015     2       01:00:49    150 \
    \  1\n      7    WB4APR-6   017     14      14:56:06    35\n      8    WB4FQR-4\
    \   017     4       06:35:15    40\n      9    WD9ARW     015     3       14:56:04\
    \    115   11\n      10   WA4TSC     015     3       15:08:53    115   11\n  \
    \    11   WA4TSC-1   017     9       15:49:15    35\n      12   KJ3E       015\
    \     4       15:57:26    155   1\n      13   WB2RVX     017     3       09:19:46\
    \    135   7\n      14   AK3P       015     2       12:57:53    185   7 15\n \
    \     15   AK3P-5     016     4       12:57:53    135   7\n      16   KC2TN  \
    \    017     3       04:01:17    135   7\n      17   WA4ZAJ     015     2    \
    \   21:41:24    240   5\n      18   KB3DE      015     3       23:38:16    35\n\
    \      19   K4CG       015     3       13:29:14    35\n      20   WB2MNF     015\
    \     2       04:01:17    180   7 16\n      21   K4NGC      015     3       14:57:44\
    \    90    8\n      22   K3SLV      005     2       03:40:01    160   1\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n      23   KA4USE-1   017  \
    \   6       14:57:44    35\n      24   K4AF       005     3       12:46:38   \
    \ 40\n      25   WB4UNB     015     2       06:45:09    240   5\n      26   PK64\
    \       005     3       02:50:54    40\n      27   N4JOG-2    015     3      \
    \ 13:24:53    35\n      28   KX3C       015     4       02:57:29    35\n     \
    \ 29   W3CSG      015     4       06:10:17    115   11\n      30   WD4SKQ    \
    \ 015     3       16:00:33    35\n      31   WA7DPK     015     3       01:28:11\
    \    35\n      32   N4JGQ      015     3       22:57:50    35\n      33   K3AEE\
    \      005     3       03:52:43    40\n      34   WB3ANQ     015     3       04:01:27\
    \    140   7\n      35   K2VPR      015     2       12:07:51    240   5\n    \
    \  36   G4MZF      015     3       01:38:30    35\n      37   KA3ERW     015 \
    \    2       03:11:17    155   1\n      38   WB3ILO     015     2       02:10:34\
    \    140   7\n      39   KB3FN-5    016     4       06:10:17    110   11\n   \
    \   40   KS3Q       015     5       15:54:57    35\n      41   WA3WUL     015\
    \     2       03:36:18    135   7\n      42   N3EGE      015     3       15:58:01\
    \    160   1\n      43   N4JMQ      015     2       08:02:58    185   7 13\n \
    \     44   K3JYD-5    016     5       15:58:01    155   1\n      45   KA4TMB \
    \    015     3       16:15:23    115   11\n      46   KC3Y       015     2   \
    \    04:14:36    155   1\n      47   W4CTT      005     2       12:21:33    245\
    \   5\n      52   K3JYD      015     2       02:16:52    155   1\n      54   WA5WTF\
    \     015     2       02:01:20    240   5\n      55   KA4USE     005     3   \
    \    23:56:02    105   23\n      56   N3BRQ      005     2       02:00:36    40\n\
    \      57   KC4B       015     2       22:10:37    240   5\n      58   WA5ZAI\
    \     005     2       12:44:03    40\n      59   K4UW       005     2       02:36:05\
    \    40\n      60   K3RH       015     2       01:20:47    135   7\n      61 \
    \  N4KRR      015     3       10:56:50    35\n      62   K4XY       015     2\
    \       04:53:16    240   5\n      64   WA6YBT     015     2       05:13:07  \
    \  190   7 15\n                     Figure 1. Candidate Node Table\n   In the\
    \ above table the Dist field shows the total distance of the\n   primary route,\
    \ the Links field shows the complexity factor, which is\n   the number of links\
    \ incident at that node (plus one), and the Last\n   Rec field shows the time\
    \ (UT) the station was last heard, directly or\n   indirectly. The Flags field\
    \ shows, among other things, which stations\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   have originated frames and\
    \ which have digipeated them.  The bits in\n   this field, which is in octal format,\
    \ are interpeted as follows (bit\n   0 is the rightmost bit):\n              \
    \  Bit     Function                       \n                --------------------\
    \                   \n                0       originating station            \n\
    \                1       digipeater station             \n                2  \
    \     station heard (Last Rec column)\n                3       station synchronized\
    \ connection\n   Among the 58 stations shown in Figure 1 are eleven digipeaters,\
    \ all\n   but three of which also originate traffic.  All but twelve stations\n\
    \   have either originated or digipeated a synchronized connection and\n   only\
    \ one \"station\" DPTRID, actually a beacon, has not been heard to\n   either\
    \ originate or digipeat traffic.\n   Figure 2 illustrates a candidate node table\
    \ of 98 links showing the\n   from-NID, to-NID, Flags and Age information for\
    \ each link as\n   collected. The bits in the Flags field, which is in octal format,\
    \ are\n   interpeted as follows (bit 0 is the rightmost bit):\n              \
    \            Bit     Function    \n                          -------------------\
    \ \n                          0       source      \n                         \
    \ 1       digipeated  \n                          2       heard       \n     \
    \                     3       synchronized\n                          4      \
    \ reciprocal  \n      From    To      Flags   Age            From    To      Flags\
    \   Age\n      ---------------------------            ---------------------------\n\
    \      5       0       017     0               1       0       037     5\n   \
    \   4       0       015     0               5       4       035     0\n      4\
    \       1       015     28              7       0       017     60\n      9  \
    \     5       015     60              1       5       006     56\n      4    \
    \   7       015     60              11      0       017     24\n      7      \
    \ 15      036     62              7       13      037     60\n      12      1\
    \       015     71              15      14      035     62\n      7       16 \
    \     037     70              12      5       015     71\n      19      0    \
    \   015     61              16      20      035     70\n      5       11     \
    \ 036     60              23      0       017     60\n      5       24      035\
    \     73              30      0       015     71\n      29      11      015  \
    \   69              5       29      035     73\n      8       21      035    \
    \ 67              8       5       017     67\n      31      0       015     72\
    \              31      5       015     72\n      32      0       015     74  \
    \            32      5       015     69\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n      40      5       015  \
    \   17              40      0       015     19\n      34      7       015    \
    \ 70              35      5       015     62\n      1       40      035     74\
    \              38      7       015     71\n      5       36      035     72  \
    \            45      5       015     0\n      36      0       015     72     \
    \         5       30      035     14\n      37      1       015     70       \
    \       44      5       016     14\n      12      44      015     17         \
    \     46      1       015     69\n      34      1       015     72           \
    \   44      1       016     70\n      5       23      036     60             \
    \ 9       11      015     79\n      10      11      015     60              1\
    \       6       035     72\n      27      5       015     61              11 \
    \     1       006     83\n      45      11      015     76              52   \
    \   1       015     71\n      5       2       000     14              8      \
    \ 0       005     76\n      57      5       015     75              17      5\
    \       015     75\n      3       0       005     74              3       5  \
    \     005     74\n      26      5       005     71              26      0    \
    \   005     74\n      18      5       015     74              18      0      \
    \ 015     74\n      55      5       005     73              24      0       005\
    \     62\n      61      0       015     63              55      23      005  \
    \   73\n      54      5       015     71              61      5       015    \
    \ 63\n      59      0       005     71              56      0       005     71\n\
    \      5       7       006     71              7       60      035     72\n  \
    \    28      0       015     71              62      5       015     69\n    \
    \  1       7       036     70              28      5       015     71\n      7\
    \       41      035     70              28      1       015     71\n      58 \
    \     0       005     62              1       22      005     70\n      33   \
    \   7       005     70              33      0       005     70\n      64     \
    \ 15      015     69              25      5       015     67\n      39      10\
    \      035     68              11      39      036     68\n      43      13  \
    \    015     65              29      39      015     68\n      40      7     \
    \  015     62              47      5       005     62\n      19      23      015\
    \     61              27      0       015     61\n      42      1       005  \
    \   23              23      21      035     60\n      1       2       000    \
    \ 5               42      44      015     14\n                     Figure 2. Candidate\
    \ Link Table\n   The following tables illustrate the operation of the routing\n\
    \   algorithm in several typical scenarios.  Each line in the table\n   represents\
    \ the step where an entry is extracted from the path list\n   and new entries\
    \ are determined.  The \"Step\" column indexes each step,\n   while the \"To\"\
    \ column indicates the NID of the station at that step.\n   The \"Ptr\" column\
    \ is the index of the preceeding step along the path\n   to the destination, while\
    \ the \"Hop\" and \"Dist\" columns represent the\n   total hop count and computed\
    \ distance along that path.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   Following is a fairly typical\
    \ example where the destination station\n   is not directly reachable, but several\
    \ multiple-hop paths exist via\n   various digipeaters.  The algorithm finds four\
    \ digipeaters:  1, 5, 11\n   and 39, all but the last of which are directly reachable\
    \ from the\n   originating station, to generate two routes of two hops and two\
    \ of\n   three hops, as shown below.  Note that only the steps leading to\n  \
    \ complete paths are shown.\n      Destination: 29  Station: W3CSG\n      Step\
    \    NID     Ptr     Hop     Dist    Comments\n      -------------------------------------------------------------\n\
    \      0       29      0       0       0\n      1       5       0       1    \
    \   30\n      2       11      0       1       35\n      3       39      0    \
    \   1       35\n      4       0       1       2       235     Complete path: 0\
    \ 5 29\n      35      0       2       2       115     Complete path: 0 11 29\n\
    \      37      9       2       2       115\n      38      10      2       2  \
    \     115\n      39      1       2       2       120\n      40      45      2\
    \       2       115\n      41      39      2       2       110\n      42     \
    \ 11      3       2       85\n      43      10      3       2       85\n     \
    \ 46      0       39      3       240     Complete path: 0 1 11 29\n      63 \
    \     0       42      3       165     Complete path: 0 11 39 29\n   The algorithm\
    \ ranks these routes first by distance and then by order\n   in the list, so that\
    \ the two-hop route at N = 35 would be chosen\n   first, followed by the three-hop\
    \ route at N = 63, the two-hop route\n   at N = 4 and, finally the three-hop route\
    \ at N = 46.  The reason why\n   the second choice is a three-hop route and the\
    \ third a two-hop route\n   is because of the extreme congestion at the digipeater\
    \ station 5,\n   which has 34 incident links.\n   Following is an example showing\
    \ how the path-pruning mechanisms\n   operate to limit the scope of exploration\
    \ to those paths most likely\n   to lead to useful routes.  The algorithm finds\
    \ one two-hop route and\n   four three-hop routes.  In this example the complete\
    \ list is shown,\n   including all the steps which are abandond for the reasons\
    \ given.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n      Destination: 13  Station:\
    \ WB2RVX\n      Step    NID     Ptr     Hop     Dist    Comments\n      -------------------------------------------------------------\n\
    \      0       13      0       0       0\n      1       7       0       1    \
    \   30\n      2       43      0       1       35      No path\n      3       0\
    \       1       2       135     Complete path: 0 7 13\n      4       4       1\
    \       2       135\n      5       15      1       2       130\n      6      \
    \ 16      1       2       130\n      7       34      1       2       135\n   \
    \   8       38      1       2       135     No path\n      9       60      1 \
    \      2       130     No path\n      10      5       1       2       140    \
    \ Max distance 310\n      11      1       1       2       130\n      12      41\
    \      1       2       130     No path\n      13      33      1       2      \
    \ 140\n      14      40      1       2       135\n      15      5       4    \
    \   3       210     Max distance 380\n      16      0       4       3       215\
    \     Complete path: 0 4 7 13\n      17      1       4       3       215     Max\
    \ distance 305\n      18      14      5       3       180     Max hops 4\n   \
    \   19      64      5       3       185     Max hops 4\n      20      20     \
    \ 6       3       175     Max hops 4\n      21      1       7       3       205\
    \     Max distance 295\n      22      0       11      3       250     Complete\
    \ path: 0 1 7 13\n      23      4       11      3       255     Max distance 300\n\
    \      24      12      11      3       255     Max distance 295\n      25    \
    \  40      11      3       250     Max distance 295\n      26      37      11\
    \      3       255     Max distance 285\n      27      46      11      3     \
    \  255     Max distance 285\n      28      44      11      3       255     Max\
    \ distance 280\n      29      34      11      3       255     Max distance 290\n\
    \      30      6       11      3       250     Max distance 280\n      31    \
    \  52      11      3       255     Max distance 285\n      32      28      11\
    \      3       255     Max distance 295\n      33      0       13      3     \
    \  215     Complete path: 0 33 7 13\n      34      0       14      3       215\
    \     Complete path: 0 40 7 13\n      35      5       14      3       215    \
    \ Max distance 385\n      36      1       14      3       210     Max distance\
    \ 300\n   The steps labelled \"No path\" are abandonded because no links could\
    \ be\n   found satisfying the constraints:  (a) to-NID or from-NID matching\n\
    \   the NID of the step, (b) loop-free or (c) total path distance less\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n   than 256.  The steps labelled\
    \ \"Max distance\" are abandonded because\n   the total distance, computed as\
    \ the sum of the Dist value plus the\n   weighted node factors, would exceed 256\
    \ as shown.  The steps labelled\n   \"Max hops\" are abandonded because the total\
    \ hop count would exceed\n   the minimum hop count (plus one) as shown.\n   Although\
    \ this example shows the computations for all alternate\n   routes, if only the\
    \ primary route is required all steps with total\n   distance greater than the\
    \ minimum-distance (135) can be abandonded.\n   In this particular case path exploration\
    \ terminates after only 14\n   steps.\n   The following example shows a typical\
    \ scenario involving a previously\n   unknown station;  that is, one not already\
    \ in the data base. Although\n   not strictly part of the algorithm itself, the\
    \ strategy in the\n   present system is to generate speculative paths consisting\
    \ of an\n   imputed direct link between the originating station and the\n   destination\
    \ station, together with imputed direct links between each\n   digipeater in the\
    \ data base and the destination station.  The new\n   links created will time\
    \ out according to the cache-management\n   mechanism in about fifteen minutes.\n\
    \   In the following example the destination station is 74, which results\n  \
    \ in the following additions to the link table:\n      fm-NID  To-NID  Flags \
    \  Node Type\n      ----------------------------------\n      0       74     \
    \ 000     Originator\n      1       74      000     Digipeater\n      5      \
    \ 74      000     Digipeater\n      7       74      000     Digipeater\n     \
    \ 8       74      000     Digipeater\n      11      74      000     Digipeater\n\
    \      13      74      000     Digipeater\n      15      74      000     Digipeater\n\
    \      16      74      000     Digipeater\n      23      74      000     Digipeater\n\
    \      39      74      000     Digipeater\n      44      74      000     Digipeater\n\
    \   There are eleven digipeaters involved, not all of which may be used.\n   The\
    \ resulting primary route and five alternate routes are shown\n   below.  Note\
    \ that only five of the eleven digipeaters are used.  The\n   remainder were either\
    \ too far away or too heavily congested.  Note\n   that only the list entries\
    \ leading to complete paths are shown.\n"
- title: RFC 981                                                       March 1986
  contents:
  - 'RFC 981                                                       March 1986

    '
- title: An Experimental Multiple-Path Routing Algorithm
  contents:
  - "An Experimental Multiple-Path Routing Algorithm\n      Destination: 74  Station:\
    \ CQ\n      Step    NID     Ptr     Hop     Dist    Comments\n      -------------------------------------------------------------\n\
    \      0       74      0       0       0\n      1       0       0       1    \
    \   90      Complete path: 0 74\n      2       1       0       1       90\n  \
    \    4       7       0       1       90\n      5       8       0       1     \
    \  90\n      6       11      0       1       90\n      7       13      0     \
    \  1       90\n      8       15      0       1       90\n      9       16    \
    \  0       1       90\n      10      23      0       1       90\n      11    \
    \  39      0       1       90\n      12      44      0       1       90\n    \
    \  13      0       2       2       210     Complete path: 0 1 74\n      29   \
    \   0       4       2       195     Complete path: 0 7 74\n      44      0   \
    \    5       2       150     Complete path: 0 8 74\n      45      0       6  \
    \     2       170     Complete path: 0 11 74\n      60      0       10      2\
    \       155     Complete path: 0 23 74\n"
