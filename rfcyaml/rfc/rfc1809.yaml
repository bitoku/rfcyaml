- title: __initial_text__
  contents:
  - '                   Using the Flow Label Field in IPv6

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The purpose of this memo is to distill various opinions and\n  \
    \ suggestions of the End-to-End Research Group regarding the handling\n   of Flow\
    \ Labels into a set of suggestions for IPv6.  This memo is for\n   information\
    \ purposes only and is not one of the IPv6 specifications.\n   Distribution of\
    \ this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   This memo originated as the report of a discussion at an End-to-End\n\
    \   Research Group meeting in November 1994.  At that meeting the group\n   discussed\
    \ several issues regarding how to manage flow identifiers in\n   IPv6.   A report\
    \ of the meeting was then circulated to the IPv6\n   community.  Feedback from\
    \ that community resulted in changes to this\n   memo and in changes to the IPv6\
    \ specification to fix some minor\n   problems the End-to-End Group had raised.\n\
    \   While many of the ideas in this memo have found their way into the\n   IPv6\
    \ specification, the explanation of why various design decisions\n   were made\
    \ have not.  This memo is intended to provide some additional\n   context for\
    \ interested parties.\n"
- title: Brief Description of the Flow Label
  contents:
  - "Brief Description of the Flow Label\n   The current draft of the IPv6 specification\
    \ states that every IPv6\n   header contains a 24-bit Flow Label.  (Originally\
    \ the specification\n   called for a 28-bit Flow ID field, which included the\
    \ flow label and\n   a 4-bit priority field.  The priority field is now distinct,\
    \ for\n   reasons discussed at the end of this memo).\n   The Flow Label is a\
    \ pseudo-random number between 1 and FFFFFF (hex)\n   that is unique when combined\
    \ with the source address.  The zero Flow\n   Label is reserved to say that no\
    \ Flow Label is being used.  The\n   specification requires that a source must\
    \ not reuse a Flow Label\n   value until all state information for the previous\
    \ use of the Flow\n   Label has been flushed from all routers in the internet.\n\
    \   The specification further requires that all datagrams with the same\n   (non-zero)\
    \ Flow Label must have the same Destination Address, Hop-\n   by-Hop Options header,\
    \ Routing Header and Source Address contents.\n   The notion is that by simply\
    \ looking up the Flow Label in a table,\n   the router can decide how to route\
    \ and forward the datagram without\n   examining the rest of the header.\n"
- title: Flow Label Issues
  contents:
  - "Flow Label Issues\n   The IPv6 specification originally left open a number of\
    \ questions, of\n   which these three were among the most important:\n       \
    \ 1.   What should a router do if a datagram with a (non-zero)\n             Flow\
    \ Label arrives and the router has no state for that\n             Flow Label?\n\
    \        2.   How does an internet flush old Flow Labels?\n        3.   Which\
    \ datagrams should carry (non-zero) Flow Labels?\n   This memo summarizes the\
    \ End-to-End Group's attempts to answer these\n   questions.\n"
- title: What Does a Router Do With Flow Labels for Which It Has No State?
  contents:
  - "What Does a Router Do With Flow Labels for Which It Has No State?\n   If a datagram\
    \ with a non-zero Flow Label arrives at a router and the\n   router discovers\
    \ it has no state information for that Flow Label,\n   what is the correct thing\
    \ for the router to do?\n   The IPv6 specification allows routers to ignore Flow\
    \ Labels and also\n   allows for the possibility that IPv6 datagrams may carry\
    \ flow setup\n   information in their options.  Unknown Flow Labels may also occur\
    \ if\n   a router crashes and loses its state.  During a recovery period, the\n\
    \   router will receive datagrams with Flow Labels it does not know, but\n   this\
    \ is arguably not an error, but rather a part of the recovery\n   period.  Finally,\
    \ if the controversial suggestion that each TCP\n   connection be assigned a separate\
    \ Flow Label is adopted, it may be\n   necessary to manage Flow Labels using an\
    \ LRU cache (to avoid Flow\n   Label cache overflow in routers), in which case\
    \ an active but\n   infrequently used flow's state may have been intentionally\
    \ discarded.\n   In any case, it is clear that treating this situation as an error\n\
    \   and, say dropping the datagram and sending an ICMP message, is\n   inappropriate.\
    \  Indeed, it seems likely that in most cases, simply\n   forwarding the datagram\
    \ as one would a datagram with a zero Flow\n   Label would give better service\
    \ to the flow than dropping the\n   datagram.\n   Of course, there will be situations\
    \ in which routing the datagram as\n   if its Flow Label were zero will cause\
    \ the wrong result.  An example\n   is a router which has two paths to the datagram's\
    \ destination, one\n   via a high-bandwidth satellite link and the other via a\
    \ low-bandwidth\n   terrestrial link.  A high bandwidth flow obviously should\
    \ be routed\n   via the high-bandwidth link, but if the router loses the flow\
    \ state,\n   the router may route the traffic via the low-bandwidth link, with\
    \ the\n   potential for the flow's traffic to swamp the low-bandwidth link.  It\n\
    \   seems likely, however, these situations will be exceptions rather\n   than\
    \ the rule.   So it seems reasonable to handle these situations\n   using options\
    \ that indicate that if the flow state is absent, the\n   datagram needs special\
    \ handling.  (The options may be Hop-by-Hop or\n   only handled at some routers,\
    \ depending on the flow's needs).\n   It would clearly be desirable to have some\
    \ method for signalling to\n   end systems that the flow state has been lost and\
    \ needs to be\n   refreshed.  One possibility is to add a state-lost bit to the\
    \ Flow\n   Label field, however there is sensitivity to eating into the precious\n\
    \   24-bits of the field.  Other possibilities include adding options to\n   the\
    \ datagram to indicate its Flow Label was unknown or sending an\n   ICMP message\
    \ back to the flow source.\n   In summary, the view is that the default rule should\
    \ be that if a\n   router receives a datagram with an unknown Flow Label, it treats\
    \ the\n   datagram as if the Flow Label is zero.  As part of forwarding, the\n\
    \   router will examine any hop-by-hop options and learn if the the\n   datagram\
    \ requires special handling.  The options could include simply\n   the information\
    \ that the datagram is to be dropped if the Flow Label\n   is unknown or could\
    \ contain the flow state the router should have.\n   There is clearly room here\
    \ for experimentation with option design.\n"
- title: Flushing Old Flow Labels
  contents:
  - "Flushing Old Flow Labels\n   The flow mechanism assumes that state associated\
    \ with a given Flow\n   Label is somehow deposited in routers, so they know how\
    \ to handle\n   datagrams that carry the Flow Label.  A serious problem is how\
    \ to\n   flush Flow Labels that are no longer being used (stale Flow Labels)\n\
    \   from the routers.\n   Stale Flow Labels can happen a number of ways, even\
    \ if we assume that\n   the source always sends a message deleting a Flow Label\
    \ when the\n   source finishes using a Flow.  An internet may have partioned since\n\
    \   the flow was created.  Or the deletion message may be lost before\n   reaching\
    \ all routers.  Furthermore, the source may crash before it\n   can send out a\
    \ Flow Label deletion message.  The point here is that\n   we cannot expect the\
    \ source (or, for the same reasons, a third party)\n   always to clear out stale\
    \ Flow Labels.  Rather, routers will have to\n   find some mechanism to flush\
    \ Flow Labels themselves.\n   The obvious mechanism is to use a timer.  Routers\
    \ should discard Flow\n   Labels whose state has not been refreshed within some\
    \ period of time.\n   At the same time, a source that crashes must observe a quiet\
    \ time,\n   during which it creates no flows, until it knows that all Flow Labels\n\
    \   from its previous life must have expired.  (Sources can avoid quiet\n   time\
    \ restrictions by keeping information about active Flow Labels in\n   stable storage\
    \ that survives crashes).  This is precisely how TCP\n   initial sequence numbers\
    \ are managed and it seems the same mechanism\n   should work well for Flow Labels.\n\
    \   Exactly how the Flow Label and its state should be refreshed needs\n   some\
    \ study.  There are two obvious options.  The source could\n   periodically send\
    \ out a special refresh message (such as an RSVP Path\n   message) to explicitly\
    \ refresh the Flow Label and its state.  Or, the\n   router could treat every\
    \ datagram that carries the Flow Label as an\n   implicit refresh or sources could\
    \ send explicit refresh options.  The\n   choice is between periodically handling\
    \ a special update message and\n   doing an extra computation on each datagram\
    \ (namely noting in the\n   Flow Label's entry that the Flow Label has been refreshed).\n"
- title: Which Datagrams Should Carry (Non-Zero) Flow Labels?
  contents:
  - "Which Datagrams Should Carry (Non-Zero) Flow Labels?\n   Interestingly, this\
    \ is the problem on which the least progress has\n   been made.\n   There were\
    \ some points of basic agreement.  Small exchanges of data\n   should have a zero\
    \ Flow Label, because it is not worth creating a\n   flow for a few datagrams.\
    \  Real-time flows must obviously always have\n   a Flow Label, since flows are\
    \ a primary reason Flow Labels were\n   created.  The issue is what to do with\
    \ peers sending large amounts of\n   best effort traffic (e.g., TCP connections).\
    \  Some people want all\n   long-term TCP connections to use Flow Labels, others\
    \ do not.\n   The argument in favor of using Flow Labels on individual TCP\n \
    \  connections is that even if the source does not request special\n   service,\
    \ a network provider's routers may be able to recognize a\n   large amount of\
    \ traffic and use the Flow Label field to establish a\n   special route that gives\
    \ the TCP connection better service (e.g.,\n   lower delay or bigger bandwidth).\
    \  Another argument is to assist in\n   efficient demux at the receiver (i.e.,\
    \ IP and TCP demuxing could be\n   done once).\n   An argument against using Flow\
    \ Labels in individual TCP connections\n   is that it changes how we handling\
    \ route caches in routers.\n   Currently one can cache a route for a destination\
    \ host, regardless of\n   how many different sources are sending to that destination\
    \ host.\n   I.e., if five sources each have two TCP connections sending data to\
    \ a\n   server, one cache entry containing the route to the server handles\n \
    \  all ten TCPs' traffic.  Putting Flow Labels in each datagram changes\n   the\
    \ cache into a Flow Label cache, in which there is a cache entry\n   for every\
    \ TCP connection.  So there's a potential for cache\n   explosion.  There are\
    \ ways to alleviate this problem, such as\n   managing the Flow Label cache as\
    \ an LRU cache, in which infrequently\n   used Flow Labels get discarded (and\
    \ then recovered later).  It is not\n   clear, however, whether this will cause\
    \ cache thrashing.\n   Observe that there is no easy compromise between these\
    \ positions.\n   One cannot, for instance, let the application decide whether\
    \ to use a\n   Flow Label.  Those who want different Flow Labels for every TCP\n\
    \   connection assume that they may optimize a route without the\n   application's\
    \ knowledge.  And forcing all applications to use Flow\n   Labels will force routing\
    \ vendors to deal with the cache explosion\n   issue, even if we later discover\
    \ that we don't want to optimize\n   individual TCP connections.\n"
- title: Note about the Priority Field
  contents:
  - "Note about the Priority Field\n   The original IPv6 specification combined the\
    \ Priority and Flow Label\n   fields and allowed flows to redefine the means of\
    \ different values of\n   the Priority field.  During its discussions, the End-to-End\
    \ group\n   realized this meant that if a router forwarded a datagram with an\n\
    \   unknown Flow Label it had to ignore the Priority field, because the\n   priority\
    \ values might have been redefined.  (For instance, the\n   priorities might have\
    \ been inverted). The IPv6 community concluded\n   this behavior was undesirable.\
    \  Indeed, it seems likely that when the\n   Flow Label are unknown, the router\
    \ will be able to give much better\n   service if it use the Priority field to\
    \ make a more informed routing\n   decision.  So the Priority field is now a distinct\
    \ field, unaffected\n   by the Flow Label.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   I would like to acknowledge the assistance of the members\
    \ of the\n   End-To-End Research Group, chaired by Bob Braden, whose discussions\n\
    \   produced this memo.  I would also like to particularly thank Deborah\n   Estrin\
    \ for her help in putting this memo together.  Also thanks to\n   Richard Fox,\
    \ Noel Chiappa, and Tony Li for insightful comments on the\n   draft.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Craig Partridge\n   BBN Systems and Technologies\n   10\
    \ Moulton St.\n   Cambridge, MA 02138\n   EMail: craig@aland.bbn.com\n"
