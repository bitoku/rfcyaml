- contents:
  - '               ISO Transport Service on top of TCP (ITOT)

    '
  title: __initial_text__
- contents:
  - "Status of the Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of the Memo
- contents:
  - "Abstract\n   This document is a revision to STD35, RFC1006 written by Marshall
    T.\n   Rose and Dwight E. Cass. Since the release of RFC1006 in May 1987,\n   much
    experience has been gained in using ISO transport services on\n   top of TCP.
    This document refines the protocol and will eventually\n   supersede RFC1006.\n
    \  This document describes the mechanism to allow ISO Transport Services\n   to
    run over TCP over IPv4 or IPv6. It also defines a number of new\n   features,
    which are not provided in RFC1006.\n   The goal of this version is to minimise
    the number of changes to\n   RFC1006 and ISO 8073 transport protocol definitions,
    while maximising\n   performance, extending its applicability and protecting the
    installed\n   base of RFC1006 users.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction, Motivation.....................................2\n
    \  2. The Model....................................................3\n   2.1 ISO
    Transport Model.........................................3\n   2.2 ISO Transport
    over TCP (ITOT) Model.........................4\n   2.3 Overview of Protocol and
    Service............................5\n   3 Service Definition............................................5\n
    \  3.1 Transport Service Definition................................5\n   3.1.1
    Transport Service Definition Primitives...................6\n   3.2 Network Service
    Definition..................................7\n   3.2.1 ISO 8348 CONS primitives..................................7\n
    \  3.2.2 TCP Service primitives....................................8\n   3.2.3
    Mapping TCP as a Network Service Provider.................8\n   3.2.3.1 Network
    Connection Establishment........................8\n   3.2.3.2 Network Data Transfer...................................9\n
    \  3.2.3.3 Network Connection Release.............................10\n   4. Transport
    Protocol Specification............................10\n   4.1 Class 0 over TCP...........................................10\n
    \  4.1.1 Connection Establishment.................................11\n   4.1.2
    Data Transfer............................................11\n   4.1.3 Connection
    Release.......................................11\n   4.2 Class 2 over TCP...........................................12\n
    \  4.2.1 Connection Establishment.................................12\n   4.2.2
    Data Transfer............................................13\n   4.2.3 Connection
    Release.......................................15\n   4.3 TPKT Packet Format.........................................15\n
    \  5. Address representations.....................................16\n   5.1 String
    representation of ITOT access point addresses.......17\n   5.2 OSI Network Address
    encoding...............................17\n   6. Notes to Implementors.......................................17\n
    \  6.1 TCP Connection Establishment...............................17\n   6.2 TCP
    Data transfer..........................................17\n   6.3 Class negotiation..........................................18\n
    \  6.4 Default maximum TPDU size..................................18\n   6.5 Class
    0 TPDU bit encoding..................................18\n   6.6 Class 2 Options............................................19\n
    \  6.7 Class 2 Expedited Data Acknowledgement.....................21\n   6.8 Class
    2 Normal Data and Expedited Data handling............21\n   6.9 Class 2 Forward
    Connection procedure.......................22\n   6.10 TPKT......................................................22\n
    \  7. Rationale - Interoperability with RFC1006...................22\n   8. Security
    Considerations.....................................23\n   Acknowledgements...............................................23\n
    \  References.....................................................23\n   Authors'
    Addresses.............................................25\n"
  title: Table of Contents
- contents:
  - "1. Introduction, Motivation\n   There are two basic approaches which can be taken
    when \"porting\" ISO\n   applications to TCP/IP ([RFC793],[RFC791]) and IPv6 [IPV6]\n
    \  environments. One approach is to port each individual application\n   separately,
    developing local protocols on top of TCP. A second\n   approach is based on the
    notion of layering the ISO Transport Service\n   over TCP/IP. This approach solves
    the problem for all applications\n   which use the ISO Transport Service. This
    document describes the\n   second approach.\n   The protocol described in this
    memo is based on the observation that\n   both the Internet Protocol Suite and
    the ISO Protocol Suite are\n   layered systems.  A key aspect of the layering
    principle is that of\n   layer-independence.  The concept of layer-independence
    means that if\n   one preserves the services offered by a particular layer (the\n
    \  Service-Provider) then the Service-User at that layer is completely\n   unaffected
    by changes in the underlying layers or by the protocol\n   used within the layer.\n
    \  This document defines a Transport Service which appears to be\n   identical
    to the Services and Interfaces offered by the ISO Transport\n   Service Definition
    [ISO8072], but which will in fact implement the\n   ISO Transport Protocol [ISO8073]
    on top of TCP/IP (IPv4 or IPv6),\n   rather than the ISO Network Service [ISO8348].\n
    \  The basis of this document is STD35, RFC1006 [RFC1006] written by\n   Marshall
    T. Rose and Dwight E. Cass and it defines two transport\n   classes of service.
    \ Transport Class 0 refines and supersedes the\n   RFC1006 protocol and is aimed
    at preserving the RFC1006 installed\n   base.  Transport Class 2 defines a number
    of new features which are\n   not provided in RFC1006, such as independence of
    Normal and Expedited\n   Data channels and Explicit Transport Disconnection. These
    new\n   features are largely based on RFC1859 [RFC1859] and extend the\n   applicability
    of RFC1006 to new groups of applications.\n   This document specifies changes
    to the standards mentioned above and\n   must be read in the context of the above
    mentioned standards. It will\n   not be meaningful on its own.\n   The 'well known'
    TCP port 102 is reserved for hosts which implement\n   the Protocol described
    in this document. Note that the Protocol does\n   not mandate the use of TCP port
    102 for all connections.\n"
  title: 1. Introduction, Motivation
- contents:
  - "2. The Model\n   This section describes the differences between the model used
    by the\n   ISO Transport and that described in this document.\n"
  - contents:
    - "2.1 ISO Transport Model\n   The ISO 8072 standard describes the ISO Transport
      Service Definition\n   (TS).  The ISO Transport Service Definition describes
      the services\n   offered by the Transport Service Provider and the interfaces
      used to\n   access these services.\n   The ISO 8073 standard describes the ISO
      Transport Protocol\n   Specification (TP).  The ISO Transport Protocol specifies
      common\n   encoding rules and a number of classes of transport protocol\n   procedure
      which can be used with different network Quality of\n   Service.\n   The ISO
      8348 standard describes the ISO Network Service Definition\n   (NS).  The ISO
      Network Service Definition describes the services\n   offered by the network
      service Provider and the interfaces used to\n   access these services.\n   The
      ISO Network Service specifies two type of service:\n   - Connection Oriented
      Network Service (CONS)\n   - ConnectionLess Network Service (CLNS)\n   The ISO
      Transport Protocol specifies five classes of procedures when\n   operating over
      CONS and one class of procedure when operating over\n   CLNS.\n   The relationship
      of these ISO standards is illustrated below:\n            Transport Service
      User\n              |\n              |-ISO Transport Service Definition [ISO8072]\n
      \             |\n         +--------------------------------------------------+\n
      \        |  Transport Service Provider                      |\n         |  ISO
      Transport Protocol Specification [ISO8073]  |\n         +--------------------------------------------------+\n
      \             |\n              |-ISO Network Service Definition [ISO8348]\n
      \             |\n"
    title: 2.1 ISO Transport Model
  - contents:
    - "2.2 ISO Transport over TCP (ITOT) Model\n   This document defines a model which
      provides ISO Transport Service,\n   with minor extensions, running over TCP.\n
      \  The ISO 8072 Transport Service is supported with minor modifications.\n   See
      section 3.1.\n   The ISO 8073 Transport Protocol with some modifications is
      used to\n   provide the modified Transport Service.\n   The Transmission Control
      Protocol is used in place of the ISO 8348 to\n   provide a CONS like service.
      See section 4.\n   This document specifies a simple encapsulation mechanism
      between the\n   modified ISO 8073 Transport Protocol and the TCP.\n   ISO 8073
      Transport Protocol specifies five classes when operating\n   over ISO 8348 CONS.
      This document specifies how to operate class 0\n   and 2 over TCP. This document
      does not prevent use of other classes\n   from operating over TCP, but their
      specification is beyond the scope\n   of this document.\n   The relationship
      of these standards is illustrated below:\n            Transport Service User\n
      \             |\n              |-ISO Transport Service (modified)\n              |\n
      \        +--------------------------------------------------+\n         |  Transport
      Service Provider                      |\n         |  ISO Transport Protocol
      (modified) Specification |\n         +--------------------------------------------------+\n
      \             |\n              |-TCP as a Connection Oriented Network Service\n
      \             |\n"
    title: 2.2 ISO Transport over TCP (ITOT) Model
  - contents:
    - "2.3 Overview of Protocol and Service\n   This document defines use of the ISO
      Transport Protocol (with some\n   extensions) running over TCP. Two variants
      of the protocol are\n   defined, \"Class 0 over TCP\" and \"Class 2 over TCP\",
      which are based\n   closely on the ISO Transport Class 0 and 2 Protocol.\n   Section
      3 defines the Service offered to the Transport User by this\n   protocol, and
      shows the differences from the ISO Transport Service.\n   The mapping between
      the Service primitives in the ISO Network Service\n   and TCP are defined. Section
      4 defines the Transport Protocol.\n"
    title: 2.3 Overview of Protocol and Service
  title: 2. The Model
- contents:
  - "3 Service Definition\n   This section describes the Transport Service offered
    to the Transport\n   User.  It also defines the mapping between the Network Service\n
    \  Definition and the TCP Service Definition.\n"
  - contents:
    - "3.1 Transport Service Definition\n   ISO 8072 Transport Service is supported
      with the following\n   extensions:\n   - Use of Quality of Service parameter
      is not defined\n   - Access to Non-disruptive Transport Disconnection\n"
    - contents:
      - "3.1.1 Transport Service Definition Primitives\n   Information is transferred
        to and from the TS-User in the Transport\n   Service primitives listed below:\n
        \  Actions\n      T-CONNECT.REQUEST\n         - a TS-User indicates that it
        wants to establish transport\n           connection\n      T-CONNECT.RESPONSE\n
        \        - a TS-User indicates that it will honour the request\n      T-DISCONNECT.REQUEST\n
        \        - a TS-User indicates that the transport connection is to\n           be
        closed\n      T-DATA.REQUEST\n         - a TS-User sends data\n      T-EXPEDITED
        DATA.REQUEST\n         - a TS-User sends \"expedited\" data\n   Events\n      T-CONNECT.INDICATION\n
        \        - a TS-User is notified that a transport connection\n           establishment
        is in progress\n      T-CONNECT.CONFIRMATION\n         - a TS-User is notified
        that the transport connection has been\n           established\n      T-DISCONNECT.INDICATION\n
        \        - a TS-User is notified that the transport connection is closed\n
        \     T-DATA.INDICATION\n         - a TS-User is notified that data can be
        read from the transport\n              connection\n      T-EXPEDITED_DATA.INDICATION\n
        \        - a TS-User is notified that expedited data can be read from\n           the
        transport connection\n"
      title: 3.1.1 Transport Service Definition Primitives
    title: 3.1 Transport Service Definition
  - contents:
    - "3.2 Network Service Definition\n   This section describes how TCP is used to
      provide ISO 8348 CONS.\n"
    - contents:
      - "3.2.1 ISO 8348 CONS primitives\n   Information is transferred to and from
        the NS-provider in the Network\n   Service Primitives listed below:\n   Actions\n
        \     N-CONNECT.REQUEST\n         - a NS-user indicates that it wants to establish
        a network\n           connection\n      N-CONNECT.RESPONSE\n         - a NS-user
        indicates that it will honour the request\n      N-DISCONNECT.REQUEST\n         -
        a NS-user indicates that the network connection is to be\n           closed\n
        \     N-DATA.REQUEST\n         - a NS-user sends data\n      N-EXPEDITED_DATA.REQUEST\n
        \        - a NS-user sends \"expedited\" data\n   Events\n      N-CONNECT.INDICATION\n
        \        - a NS-user is notified that a network connection establishment\n
        \          is in progress\n      N-CONNECT.CONFIRMATION\n         - a NS-user
        is notified that the network connection has been\n           established\n
        \     N-DISCONNECT.INDICATION\n         - a NS-user is notified that the network
        connection is closed\n      N-DATA.INDICATION\n         - a NS-user is notified
        that data can be read from the network\n           connection\n      N-EXPEDITED_DATA.INDICATION\n
        \        - a NS-user is notified that expedited data can be read from\n           the
        connection\n"
      title: 3.2.1 ISO 8348 CONS primitives
    - contents:
      - "3.2.2 TCP Service primitives\n   The mapping between, ISO 8348 CONS primitives
        and TCP Service\n   primitives, defined in this document assumes that the
        TCP offers the\n   following service primitives:\n   Actions\n      TCP-LISTEN_PORT\n
        \        - PASSIVE open on given port\n      TCP-OPEN_PORT\n         - ACTIVE
        open to the given port\n      TCP-READ_DATA\n        - data is read from the
        connection\n      TCP-SEND_DATA\n        - data is sent on the connection\n
        \     TCP-CLOSE\n        - the connection is closed (pending data is sent)\n
        \  Events\n      TCP-CONNECTED\n        - open succeeded (either ACTIVE or
        PASSIVE)\n      TCP-CONNECT_FAIL\n        - ACTIVE open failed\n      TCP-DATA_READY\n
        \       - Data can be read from the connection\n      TCP-ERRORED\n        -
        the connection has errored and is now closed\n      TCP-CLOSED\n        -
        an orderly disconnection has started\n"
      title: 3.2.2 TCP Service primitives
    - contents:
      - '3.2.3 Mapping TCP as a Network Service Provider

        '
      - contents:
        - "3.2.3.1 Network Connection Establishment\n   In order to perform a N-CONNECT.REQUEST
          action, the TS-Provider\n   performs a TCP-OPEN_PORT to the desired IPv4
          or IPv6 address using\n   the selected TCP port. When the TCP signals either
          success or\n   failure, this results in an N-CONNECT.INDICATION action.\n
          \  In order to await a N-CONNECT.INDICATION event, a server performs a\n
          \  TCP-LISTEN_PORT to the selected TCP port.  When a client successfully\n
          \  connects to this port, the TCP-CONNECTED event occurs and an implicit\n
          \  N-CONNECT.RESPONSE action is performed.\n   Mapping parameters between
          the TCP service and the ISO 8348 CONS\n   service is done as follow:\n   Network
          Service                 TCP\n   ---------------                 ---\n   CONNECTION
          ESTABLISHMENT\n           Called address          server's IPv4 or IPv6
          address\n                                   and TCP port number.\n           Calling
          address         client's IPv4 or IPv6 address\n           all others parameters
          \  ignored\n   Please also refer to 'Notes to Implementors' section 6.1.\n
          \  TCP port 102 is reserved for implementations conforming to this\n   specification.
          \ Use of any TCP port is conformant to this\n   specification.\n"
        title: 3.2.3.1 Network Connection Establishment
      - contents:
        - "3.2.3.2 Network Data Transfer\n   In order perform a N-DATA.REQUEST action,
          the TS-provider constructs\n   the desired transport protocol data unit
          (TPDU), encapsulates the\n   TPDU in a discrete unit called TPKT and uses
          the TCP-SEND_DATA\n   primitive.  Please also refer to 'Notes to Implementors'
          section 6.2.\n   In order to trigger a N-DATA.INDICATION action, the TCP
          indicates\n   that data is ready through TCP-DATA_READY event and a TPKT
          is read\n   using the TCP-READ_DATA primitive.\n   Mapping parameters between
          the TCP service and the ISO 8348 CONS\n   service is done as follow:\n   Network
          Service                 TCP\n   ---------------                 ---\n   DATA
          TRANSFER\n           NS User Data (NSDU)     DATA\n"
        title: 3.2.3.2 Network Data Transfer
      - contents:
        - "3.2.3.3 Network Connection Release\n   In order to perform an N-DISCONNECT.REQUEST
          action, the TS-provider\n   simply closes the TCP connection through TCP-CLOSE
          primitive.\n   In order to trigger a N-DISCONNECT.INDICATION, the TCP indicates
          that\n   the connection has been closed through TCP-CLOSE event.  If the
          TCP\n   connection has failed the TCP indicates that the connection has
          been\n   closed through TCP-ERRORED event, this trigger a N-\n   DISCONNECT.INDICATION.\n
          \  Mapping parameters between the TCP service and the ISO 8348 CONS\n   service
          is done as follow:\n   Network Service                 TCP\n   ---------------
          \                ---\n   CONNECTION RELEASE\n           all parameters          ignored\n"
        title: 3.2.3.3 Network Connection Release
      title: 3.2.3 Mapping TCP as a Network Service Provider
    title: 3.2 Network Service Definition
  title: 3 Service Definition
- contents:
  - "4. Transport Protocol Specification\n   ISO 8073 Transport Protocol Classes 0
    and 2 are supported with\n   extensions as defined in each subsections below.\n
    \  A Transport Protocol class is selected for a particular transport\n   connection
    based on the requirements of the TS-User.\n   ISO 8073 Transport Protocol exchanges
    information between peers in\n   discrete units of information called transport
    protocol data units\n   (TPDU). The protocol defined in this document encapsulates
    these\n   TPDUs in discrete units termed Packets (TPKT).\n   This document mandates
    the implementation of ISO 8073 Transport\n   Protocol options negotiation (which
    includes class negotiation).\n   Please refer to 'Notes to Implementors' section
    6.3 with respect to\n   Class negotiation and to the 'Rationale' section 7. with
    respect to\n   Interoperability with RFC1006.\n"
  - contents:
    - "4.1 Class 0 over TCP\n   Class 0 provides the functions needed for connection
      establishment\n   with negotiation, data transfer with segmentation, and protocol
      error\n   reporting.  It provides Transport Connection with flow control based\n
      \  on that of the NS-provider (TCP).  It provides Transport\n   Disconnection
      based on the NS-provider Disconnection.\n   Class 0 is suitable for data transfer
      with no Explicit Transport\n   Disconnection.\n"
    - contents:
      - "4.1.1 Connection Establishment\n   The principles used in connection establishment
        are based upon those\n   described in ISO 8073, with the following extensions:\n
        \  - Connect Data may be exchanged using the user data fields\n     of Connect
        Request (CR) and Connect Confirm (CC) TPDUs\n   - Use of \"Expedited Data
        Transfer Service\" may be negotiated\n     using the negotiation mechanism
        specified in ISO 8073. The\n     default is to not use \"Expedited Data Transfer
        Service\".\n   - Non-standard TPDU size may be negotiated using the negotiation\n
        \    mechanism specified in ISO 8073. The maximum TPDU size is 65531\n     octets.
        The Default maximum TPDU size is 65531 octets.\n     Please refer to 'Notes
        to Implementors' section 6.4.\n"
      title: 4.1.1 Connection Establishment
    - contents:
      - "4.1.2 Data Transfer\n   The elements of procedure used during transfer are
        based upon those\n   presented in ISO 8073, with the following extension:\n
        \     - Expedited Data may be supported (if negotiated during connection\n
        \       establishment) by sending the defined Expedited Data (ED) TPDU.\n
        \  The ED TPDU is sent inband on the same TCP connection as all of the\n   other
        TPDUs.\n   To support Expedited Data a non-standard TPDU is defined. The format\n
        \  used for the ED TPDU is nearly identical to the format for the Normal\n
        \  Data (DT) TPDU. The only difference between ED TPDU and DT TPDU is\n   that
        the value used for the TPDU code is ED and not DT. The size of a\n   Expedited
        Data user data field is 1 to 16 octets.\n   For TPDU bit encoding please refer
        to 'Notes to Implementors' section\n   6.5.\n"
      title: 4.1.2 Data Transfer
    - contents:
      - "4.1.3 Connection Release\n   The elements of procedure used during a connection
        release are\n   identical to those presented in ISO 8073.\n   Transport Disconnection
        is based on the NS-provider (TCP)\n   Disconnection and is therefore disruptive.\n"
      title: 4.1.3 Connection Release
    title: 4.1 Class 0 over TCP
  - contents:
    - "4.2 Class 2 over TCP\n   Class 2 provides the functions needed for connection
      establishment\n   with negotiation, data transfer with segmentation, and protocol
      error\n   reporting.  It provides Transport Connection with flow control based\n
      \  on that of the NS-provider (TCP). It provides Explicit Transport\n   Disconnection.\n
      \  Class 2 is suitable when independence of Normal and Expedited Data\n   channels
      are required or when Explicit Transport Disconnection is\n   needed.\n"
    - contents:
      - "4.2.1 Connection Establishment\n   The principles used in connection establishment
        are based upon those\n   described in ISO 8073, with the following extensions:\n
        \  - Connection Request and Connection Confirmation TPDUs may\n     negotiate
        use of \"Transport Expedited Data Transfer\" service.\n     \"Transport Expedited
        Data Transfer\" service is selected\n     by setting bit 1 of the \"Additional
        Option\" parameter,\n     and is negotiated using the mechanism specified
        in ISO 8073.\n     The default is to not use \"Transport Expedited Data Transfer\n
        \    Service\".\n   - Connection Request and Connection Confirmation TPDUs
        may\n     negotiate use of \"Expedited Data Acknowledgement\".\n     \"Expedited
        Data Acknowledgement\" is selected by setting\n     bit 6 of the \"Additional
        Option\" parameter, and is\n     negotiated using the mechanism specified
        in ISO 8073.\n     The default is to not use \"Expedited Data Acknowledgement\"\n
        \    for Expedited Data transfer.\n   - Connection Request and Connection
        Confirmation TPDUs may\n     negotiate use of the \"Non-blocking Expedited
        Data\" service.\n     \"Non-blocking Expedited Data\" is selected by setting\n
        \    bit 7 of the \"Additional Option\" parameter, and is\n     negotiated
        using the mechanism specified in ISO 8073.\n     The default is to not use
        the \"Non-blocking Expedited\n     Data\" service.\n   - Connection Request
        and Connection Confirmation TPDUs may\n     negotiate use of either \"Forward
        Connection (Splitting\n     and Recombining)\" or \"Reverse Connection\" procedure
        for\n     Expedited Data transfer.\n     Use of \"Forward Connection\" or
        use of \"Reverse Connection\"\n     procedure is selected by setting bit 4
        of the \"Additional\n     Option\" parameter, and is negotiated using the
        mechanism\n     specified in ISO 8073.\n     The default is to use \"Forward
        Connection\" procedure for\n     Expedited Data transfer.\n   - Connection
        Request and Connection Confirmation TPDUs must not\n     negotiate the use
        of \"Explicit Flow Control\".\n   - Non-standard TPDU size may be negotiated
        using the negotiation\n     mechanism specified in ISO 8073. The maximum TPDU
        size is 65531\n     octets. The default maximum TPDU size is 65531 octets.\n
        \    Please refer to 'Notes to Implementors' section 6.4.\n   In the absence
        of a Flow Control policy, the use of ISO 8073\n   Multiplexing procedure lead
        to degradation of the quality of service.\n   The Protocol defined in this
        document does not supported\n   Multiplexing.\n   For the values of the \"Additional
        Option\" parameter please refer to\n   'Notes to Implementors' section 6.6.\n
        \  For Class 2 options Profile please also refer to 'Notes to\n   Implementors'
        section 6.6.\n"
      title: 4.2.1 Connection Establishment
    - contents:
      - "4.2.2 Data Transfer\n   The elements of procedure used during transfer are
        based upon those\n   presented in ISO 8073, with the following extensions:\n
        \  - Expedited Data may be supported (if negotiated during connection\n     establishment)
        by sending Expedited Data (ED) TPDU.\n   - \"Expedited Data Acknowledgement\"
        may be supported (if negotiated\n     during connection establishment) by
        sending Expedited Data\n     Acknowledgement (EA) TPDU.\n     When using \"Expedited
        Data Acknowledgement\", ED TPDUs require\n     acknowledgement, and once an
        ED TPDU is transmitted no further\n     DT/ED TPDUs may be sent until the
        outstanding ED TPDU has been\n     acknowledged.\n     When non-use of \"Expedited
        Data Acknowledgement\" has been\n     negotiated, ED TPDUs require no acknowledgement,
        and further DT/ED\n     TPDUs may be sent immediatly.\n     Please refer to
        'Notes to Implementors' section 6.7 and section\n     6.8.\n   - \"Non-blocking
        Expedited Data\" service may be supported (if\n     negotiated during connection
        establishment).\n     When using \"Non-blocking Expedited Data\" service,
        the sender of an\n     ED TPDU shall send the ED TPDU on both the Normal Data
        and\n     Expedited Data TCP connections. Transmission of subsequent DT TPDU\n
        \    will not be interrupted.  The receiver of ED TPDU counts how many\n     ED
        TPDU it has seen on each TCP connection, and will only deliver\n     to the
        TS-User the ED TPDU from the TCP connection with the higher\n     count.\n
        \    When non-use of \"Non-blocking Expedited Data\" has been negotiated,\n
        \    ED TPDUs will not be duplicated.\n     Please refer to 'Notes to Implementors'
        section 6.7 and section\n     6.8.\n   - For Expedited Data transfer, there
        are two possible\n     procedures for the establishment and assignment of
        the Expedited\n     Data TCP connection. Which one is used is negotiated during\n
        \    connection establishment.\n     Both the \"Forward Connection\" procedure
        and \"Reverse Connection\"\n     procedure guarantee independence of the Normal
        Data TCP connection\n     from the Expedited Data TCP connection. They also
        ensure that a\n     busy Normal Data TCP connection cannot block an Expedited
        Data TCP\n     connection.\n     The Expedited Data TCP connection created
        by either procedure must\n     be between the same pair of hosts as the Normal
        Data TCP\n     connection, must not be shared among Transport Connections,
        and\n     must remain established until the Transport Connection is\n     terminated,
        at which time it must be closed.\n     TCP connections created for Expedited
        Data transfer should also use\n     the TCP primitives defined in this document.\n
        \    The Forward Connection (Splitting and Recombining) procedure is\n     defined
        in ISO 8073. This procedure allows a transport connection\n     to make use
        of multiple TCP connections. Please refer to 'Notes to\n     Implementors'
        section 6.9.\n     The Reverse Connection procedure is not defined in ISO
        8073.  When\n     using the Reverse Connection procedure the initiator of
        a Transport\n     Connection creates a Normal Data TCP connection using an\n
        \    arbitrarily-chosen local TCP port 'x' and a known remote TCP port\n     (either
        the ITOT well-known port, or some other). The initiator\n     listens for
        an incoming TCP connection on the TCP port 'x'. The\n     responder of the
        Transport Connection must create a second TCP\n     connection (to be used
        for Expedited Data) using an arbitrarily-\n     chosen local TCP port 'y'
        and the remote TCP port 'x' , before it\n     can issue a CC TPDU on the Normal
        Data TCP connection. The\n     initiator need not listen for further TCP connections
        on port 'x'\n     after the Expedited Data TCP connection is established.\n"
      title: 4.2.2 Data Transfer
    - contents:
      - "4.2.3 Connection Release\n   The elements of procedure used during a connection
        release are based\n   upon those described in ISO 8073. A connection can be
        terminated by\n   the TS-user in one of two ways:\n   - Disruptive Disconnect\n
        \  - Non-Disruptive Disconnect\n   Disconnect Request (DR) and Disconnect
        Confirm (DC) TPDUs are\n   exchanged in both cases. The DR TPDU carries a
        Reason code indicating\n   the reason for the Disconnection.\n   Disruptive
        Disconnect specifies that all TPDUs still at the source\n   are not required
        to be sent to the destination before the connection\n   is disconnected. The
        DR Reason code is normal (80 hex).\n   Non-Disruptive Disconnect specifies
        that all TPDUs already given to\n   the local TS-provider must be delivered
        to the remote TS-user, before\n   the connection is disconnected. The DR Reason
        code is normal (80 hex)\n   with Additional Information parameter value set
        to 80 hex.\n"
      title: 4.2.3 Connection Release
    title: 4.2 Class 2 over TCP
  - contents:
    - "4.3 TPKT Packet Format\n   A fundamental difference between the TCP and the
      ISO Network Service\n   expected by ISO Transport is that the TCP manages a
      continuous stream\n   of octets, with no explicit boundaries.\n   ISO Transport
      expects information to be sent and delivered in\n   discrete objects termed
      Network Service Data Units (NSDU). Although\n   ISO Transport allows combination
      of more than one TPDU inside a\n   single NSDU for the purposes of discussion
      an NSDU is identical to a\n   TPDU. Please refer to ISO 8073 for the valid set
      of concatenated\n   TPDUs.\n   The protocol described by this memo uses a simple
      packetization\n   scheme in order to delimit TPDU.  Each packet (TPKT), is viewed
      as an\n   object of variable length composed of an integral number of octets.\n
      \  A TPKT consists of two part:\n   - a Packet Header\n   - a TPDU.\n   The
      format of the Packet Header is constant regardless of the type of\n   TPDU.
      The format of the Packet Header is as follows:\n   +--------+--------+----------------+-----------....---------------+\n
      \  |version |reserved| packet length  |             TPDU             |\n   +----------------------------------------------....---------------+\n
      \  <8 bits> <8 bits> <   16 bits    > <       variable length       >\n   where:\n
      \  - Protocol Version Number\n     length: 8 bits\n     Value:  3\n   - Reserved\n
      \    length: 8 bits\n     Value:  0 - (See 'Notes to Implementors' section 6.10)\n
      \  - Packet Length\n     length: 16 bits\n     Value:  Length of the entire
      TPKT in octets, including Packet\n             Header\n   - TPDU\n     ISO Transport
      TPDU as defined in ISO 8073 and as defined in this\n     document.\n"
    title: 4.3 TPKT Packet Format
  title: 4. Transport Protocol Specification
- contents:
  - "5. Address representations\n   It is desirable to be able to represent ITOT access
    point addresses\n   as:\n      - Printable strings\n      - OSI Network Addresses
    (often known as NSAP addresses\n        or simply NSAPAs)\n   This section defines
    the formats which MUST be used in each case.\n"
  - contents:
    - "5.1 String representation of ITOT access point addresses\n   RFC1278 [RFC1278]
      defines a general string representation for OSI\n   Presentation Addresses,
      including specific reference to RFC1006\n   addresses which encapsulate IPv4
      addresses. RFC1278 is also\n   applicable to ITOT addresses which encapsulate
      IPv4 addresses.\n   This RFC is currently being updated to define a string representation\n
      \  for ITOT addresses which encapsulate IPv6 addresses.\n   ITOT access point
      address string representation specify an IP address\n   (IPv4 or IPv6) and an
      optional TCP port number.\n"
    title: 5.1 String representation of ITOT access point addresses
  - contents:
    - "5.2 OSI Network Address encoding\n   RFC1277 [RFC1277] defines a general mechanism
      to encode addressing\n   information within OSI Network Addresses (NSAPA), including
      specific\n   reference to RFC1006 using IPv4. RFC1277 is also applicable to
      ITOT\n   addresses using IPv4.\n   The RFC \"IPv6 addresses inside an NSAPA\"
      [IPv6] defines general\n   mechanisms for the support of NSAP addressing in
      an IPv6 network. It\n   also defines how to embed an IPv6 address inside a OSI
      NSAP address.\n   This RFC is applicable to ITOT addresses using IPv6. For ITOT\n
      \  addresses, the default selector of the NSAPA is defined to have the\n   value
      '10000000'B.\n   It should be noted that given that an IPv6 addresses can encode
      IPv4\n   addresses, this format can also encode ITOT addresses using IPv4.\n"
    title: 5.2 OSI Network Address encoding
  title: 5. Address representations
- contents:
  - '6. Notes to Implementors

    '
  - contents:
    - "6.1 TCP Connection Establishment\n   Implementors should be aware that ISO
      transport protocols assume that\n   they will be told by the network service
      provider (in this case\n   TCP/IP) when the network connection being used to
      transmit their\n   TPDUs is unexpectedly terminated.  It is therefore strongly
      suggested\n   that the TCP keep alive mechanism be selected, as this ensures\n
      \  reporting of network connection loss.\n"
    title: 6.1 TCP Connection Establishment
  - contents:
    - "6.2 TCP Data transfer\n   For performance reason it is suggested that the Nagle
      algorithm [RFC\n   896] be disabled (using the TCP_NODELAY socket option). This
      feature\n   allows TPKT data to be sent without delay.\n"
    title: 6.2 TCP Data transfer
  - contents:
    - "6.3 Class negotiation\n   The principle used in Class negotiation is identical
      to those\n   described in ISO 8073. Class and options are negotiated during\n
      \  Connection establishment. The choice made by the Transport will\n   depend
      upon the TS-User requirements as expressed via T-CONNECT\n   service primitives.\n
      \  The initiator of the Transport Connection proposes a preferred class\n   and
      may propose an alternative class.\n   The responder selects one class defined
      in the table below.\n   If the preferred class is not selected then on receipt
      of the connect\n   confirm TPDU the initiator adjusts its operation according
      to the\n   class selected.\n   +---------------------------------------------+----------------------+\n
      \  |           Proposed in CR TPDU               |      CC TPDU         |\n
      \  |                                             |                      |\n
      \  |Preferred class     |    Alternative class   |      Response        |\n
      \  +--------------------+------------------------+----------------------+\n
      \  |                    |                        |                      |\n
      \  |class 0             |    none                |      class 0         |\n
      \  |                    |                        |                      |\n
      \  |class 2             |    class 0             |      class 2 or 0    |\n
      \  |                    |                        |                      |\n
      \  |class 2             |    none                |      class 2         |\n
      \  |                    |                        |                      |\n
      \  +---------------------------------------------+----------------------+\n"
    title: 6.3 Class negotiation
  - contents:
    - "6.4 Default maximum TPDU size\n   The default maximum TPDU size value specified
      in this document breaks\n   ISO Transport negotiation rule which states that
      the maximum TPDU\n   size specified or defaulted by the CC TPDU cannot be greater
      than the\n   maximum TPDU size proposed by the CR TPDU.\n   To avoid the consequences
      of this, it is strongly recommended that\n   the CC TPDU always specifies the
      maximum TPDU size value.\n"
    title: 6.4 Default maximum TPDU size
  - contents:
    - "6.5 Class 0 TPDU bit encoding\n   This protocol no longer allows credit and
      TPDU-NR (bits 0 to 6)\n   fields to be ignored on input, which is in line with
      ISO 8073\n   encoding rules.  RFC1006 TPDU encoding defined inconsistent encoding\n
      \  rules.\n"
    title: 6.5 Class 0 TPDU bit encoding
  - contents:
    - "6.6 Class 2 Options\n   Class 2 Additional Option parameter value\n   +--------------------------------------------------------------------+\n
      \  |  BIT   |                    OPTION                                 |\n
      \  +--------------------------------------------------------------------+\n
      \  |        |                                                           |\n
      \  |    8   | Not applicable                                            |\n
      \  |        |                                                           |\n
      \  |    7   | = 1 Use of Non-blocking Expedited Data                    |\n
      \  |        | = 0 Non-use of Non-blocking Expedited Data (default)      |\n
      \  |        |                                                           |\n
      \  |(*) 6   | = 1 Use of Expedited Data Acknowledgement                 |\n
      \  |        | = 0 non-use of Expedited Data Acknowledgement (default)   |\n
      \  |        |                                                           |\n
      \  |    5   | Not applicable                                            |\n
      \  |        |                                                           |\n
      \  |(*) 4   | = 1 Use of Reverse Connection procedure                   |\n
      \  |        | = 0 Use of Forward Connection procedure (default)         |\n
      \  |        |                                                           |\n
      \  |    3   | Not applicable                                            |\n
      \  |        |                                                           |\n
      \  |    2   | Not applicable                                            |\n
      \  |        |                                                           |\n
      \  |    1   | = 1 Use of Transport Expedited Data Service               |\n
      \  |        | = 0 Non-use of Transport Expedited Data Service (default) |\n
      \  |        |                                                           |\n
      \  +--------------------------------------------------------------------+\n
      \  (*) In ISO 8073, bit 4 is defined as use of \"Network Expedited\"  and\n
      \  bit 6 is defined as \"Request Acknowledgement\".\n   Class 2 Options Profile\n
      \  +--------------------------------------------------------------------+\n
      \  |  Bits     Service selected                                         |\n
      \  | 1 4 6 7                                                            |\n
      \  +--------------------------------------------------------------------+\n
      \  | 0 x x x   Non-use of Transport Expedited Data Service              |\n
      \  |           ---------------------------------------------------------|\n
      \  |                        Bits 4 6 7 are not applicable (*)           |\n
      \  +--------------------------------------------------------------------+\n
      \  | 1 x x x   Use of Transport Expedited Data Service                  |\n
      \  |           ---------------------------------------------------------|\n
      \  | 1 0 x x       Use of Expedited Data Service with Forward Connection|\n
      \  |               -----------------------------------------------------|\n
      \  | 1 0 1 0                Forward Connection with Expedited Data      |\n
      \  |                        Acknowledgement                             |\n
      \  | 1 0 1 1                Forward Connection with Expedited Data      |\n
      \  |                        Acknowledgement and use of Non-blocking     |\n
      \  |                        Expedited Data  (**)                        |\n
      \  |                        --------------------------------------------|\n
      \  | 1 0 0 0                Forward Connection with non-use of Expedited|\n
      \  |                        Data Acknowledgement  (***)                 |\n
      \  | 1 0 0 1                Forward Connection with non-use of Expedited|\n
      \  |                        Data Acknowledgement and use of Non-blocking|\n
      \  |                        Expedited Data                              |\n
      \  |               -----------------------------------------------------|\n
      \  | 1 1 x x       Use of Expedited Data Service with Reverse Connection|\n
      \  |               -----------------------------------------------------|\n
      \  | 1 1 1 0                Reverse Connection with Expedited Data      |\n
      \  |                        Acknowledgement                             |\n
      \  | 1 1 1 1                Reverse Connection with Expedited Data      |\n
      \  |                        Acknowledgement and use of Non-blocking     |\n
      \  |                        Expedited Data  (**)                        |\n
      \  |                        --------------------------------------------|\n
      \  | 1 1 0 0                Reverse Connection with non-use of Expedited|\n
      \  |                        Data Acknowledgement  (***)                 |\n
      \  | 1 1 0 1                Reverse Connection with non-use of Expedited|\n
      \  |                        Data Acknowledgement and use of Non-blocking|\n
      \  |                        Expedited Data                              |\n
      \  +--------------------------------------------------------------------+\n
      \  (*) Note the default (0000) provides an RFC1006-like service with\n   Explicit
      Transport Disconnection.\n   (**) Note in this case use of Expedited Data Acknowledgement
      with use\n   of Non-blocking Expedited Data is a wasted effort (See section
      6.5)\n   (***) Note in this case Normal and Expedited Data TPDU are not\n   synchronised.
      (See section 6.6)\n"
    title: 6.6 Class 2 Options
  - contents:
    - "6.7 Class 2 Expedited Data Acknowledgement\n   The Protocol specified in this
      document does not define any\n   relationship between use of \"Expedited Data
      Acknowledgement\" option\n   and use of \"Non-blocking Expedited Data\" service.\n
      \  However please note that when using \"Non-blocking Expedited Data\"\n   service
      it is a wasted effort to use \"Expedited Data\n   Acknowledgement\", since ED
      TPDUs are duplicated and sent on both the\n   Normal Data and Expedited Data
      TCP connections.\n"
    title: 6.7 Class 2 Expedited Data Acknowledgement
  - contents:
    - "6.8 Class 2 Normal Data and Expedited Data handling\n   There exist two separate
      application requirements for using Expedited\n   Data:\n   1- Synchronisation
      of the order of delivery between Normal\n      and Expedited Data TPDU.\n   2-
      Independence of Normal and Expedited data channels. A busy\n      Normal Data
      channel should not block an Expedited Data channel.\n   The protocol described
      in this document can accommodate both\n   requirements, separately or in combination.\n
      \  Synchronisation:\n      If synchronised order of delivery between Normal
      and Expedited\n      Data TPDU is required then use of either \"Expedited Data\n
      \     Acknowledgement\" TPDU or use of the \"Non-blocking Expedited Data\"\n
      \     service must be negotiated during connection establishment.\n      If
      synchronised order of delivery between Normal and Expedited\n      Data TPDU
      is not required then non-use of \"Expedited Data\n      Acknowledgement\" need
      not be negotiated during connection\n      establishment.\n   Independence:\n
      \     If Independence of Normal and Expedited data channels is required\n      then
      Forward or Reverse connection must be negotiated during\n      connection establishment.
      Expedited data TPDU must be sent on the\n      Expedited data channel.\n      If
      Independence of Normal and Expedited data channels is not\n      required then
      Forward connection should be negotiated during\n      connection establishment
      and the Expedited data channels should\n      never be established. Expedited
      data TPDU is then sent inband on\n      the Normal data channel.\n   Finally
      please note that independence of Normal and Expedited data\n   channels without
      synchronisation relaxes the Transport Service\n   definition of Expedited data
      and is not consistent with ISO 8072.\n"
    title: 6.8 Class 2 Normal Data and Expedited Data handling
  - contents:
    - "6.9 Class 2 Forward Connection procedure\n   As defined in ISO 8073, when \"Forward
      Connection\" (Splitting and\n   Recombining) procedure is used for Expedited
      Data transmission, ED\n   TPDU must only be sent over an outgoing NS-provider
      TCP connection.\n   As defined in ISO 8073, this document does not mandates
      use of the\n   Splitting procedure for Expedited Data transmission. The\n   Recombination
      procedure, which associates Data (normal and expedited)\n   TPDUs arriving for
      a transport connection over two TCP connections\n   must be handled.\n   It
      is legal to send Expedited Data TPDU inband on the Normal Data TCP\n   connection.\n
      \  Please note that the protocol specified in this document does not\n   define
      when an Expedited Data TCP connection should be established.\n   This is an
      implementation choice.\n   When using \"Non-blocking Expedited Data\" service
      it is recommended to\n   not delay establishing Expedited Data TCP connection.\n"
    title: 6.9 Class 2 Forward Connection procedure
  - contents:
    - "6.10 TPKT\n   This document specifies the value of the TPKT reserved field.\n
      \  Implementation should not interpret and act upon any value in a\n   reserved
      field. To avoid Interoperability issues with RFC1006, this\n   field should
      be ignored on input.\n"
    title: 6.10 TPKT
  title: 6. Notes to Implementors
- contents:
  - "7. Rationale - Interoperability with RFC1006\n   We have chosen to maintain the
    same TPKT protocol version in ITOT as\n   in RFC1006 (version 3). The reason for
    this decision is that the\n   changes in this document do not conflict with RFC1006.
    If we were to\n   change the protocol version we would prevent existing RFC1006\n
    \  implementations which mandate version 3 from interoperating with the\n   protocol
    defined in this document.\n   One consequence of this decision relates to class
    negotiation.  The\n   protocol described in this document introduces Class 2 over
    TCP, and\n   it therefore introduces the need to be able to perform class\n   negotiation
    between Class 2 and Class 0.  While all Transport\n   implementations should be
    able to handle Class negotiation, we\n   recognise that some RFC1006 implementations
    cannot. Therefore\n   Implementors should be aware that Class 2 Connect Request
    (with no\n   Alternative class) could be accepted with a Class 0 Connect Confirm,\n
    \  at which point the Connect Confirm should be rejected as specified in\n   ISO
    8073.\n"
  title: 7. Rationale - Interoperability with RFC1006
- contents:
  - "8. Security Considerations\n   Security issues are not specifically addressed
    in this document.\n   Operation of this protocol is no more and no less secure
    than\n   operation of TCP and ISO 8073 protocols. The reader is directed there\n
    \  for further reading.\n"
  title: 8. Security Considerations
- contents:
  - "Acknowledgements\n   The authors are pleased to acknowledge the suggestions and
    comments\n   of Harald T. Alvestrand, Jim Bound, John Day, Mike Dyer, Peter\n
    \  Furniss, Dan Harrington, Steve Kille, Keith G. Knightson, Keith\n   Sklower,
    Matt Thomas, Robert Watson and many other members of the\n   IETF TOSI mailing
    list. The support of Allison Mankin of the IESG was\n   essential.\n"
  title: Acknowledgements
- contents:
  - "References\n   [ISO8072]  ISO. \"International Standard 8072.  Information Processing\n
    \             Systems - Open Systems Interconnection: Transport Service\n              Definition.\"\n
    \  [ISO8073]  ISO. \"International Standard 8073.  Information Processing\n              Systems
    - Open Systems Interconnection: Transport Protocol\n              Specification.\"
    ISO 8073:1992 and 8073:1992/Amd.5:1995.\n   [ISO8348]  ISO. \"International Standard
    8348.  Information Processing\n              Systems - Open Systems Interconnection:
    Network Service\n              Definition.\"\n   [RFC791]   Postel, J., \"Internet
    Protocol\", STD 5, RFC 791,\n              September 1981.\n   [RFC793]   Postel,
    J., \"Transmission Control Protocol\", STD 7,\n              RFC 793, September
    1981.\n   [RFC896]   Nagle, J., \"Congestion Control in IP/TCP Inertnetworks\",\n
    \             RFC 896, January 1984.\n   [RFC1006]  Rose, M., and D. Cass, \"ISO
    Transport Services on Top of\n              the TCP Version 3\", STD 35, RFC 1006,
    May 1987.\n   [RFC1277]  Hardcastle-Kille, S., \"Encoding Network Addresses to\n
    \             support operation over non-OSI lower layers\", RFC 1277,\n              November
    1991.\n   [RFC1278]  Hardcastle-Kille, S., \"String encoding of Presentation\n
    \             Address\", RFC 1278, November 1991.\n              A string encoding
    of Presentation Address\n              update to RFC1278, Work in Progress.\n
    \  [RFC1859]  Pouffary, Y., \"ISO Transport Class 2 Non-use of Explicit\n              Flow
    Control over TCP - RFC1006 extension\", RFC 1859,\n              October 1995.\n
    \  [IPV6]     Deering, S., and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)
    Specification\", RFC 1883, December 1995.\n              Hinden,, R., and S. Deeing,
    \"IP Version 6 Addressing\n              Architecture\", RFC 1884, December 1995.\n
    \             Bound, J., Carpenter, B., Harrington, D., Houldsworth, J.,\n              and
    A. Lloyd, \"OSI NSAPs and IPv6\", RFC 1888, August 1996.\n"
  title: References
- contents:
  - "Authors' Addresses\n   Yanick Pouffary\n   End Systems Networking\n   Digital
    Equipment Corporation\n   Centre Technique (Europe)\n   B.P. 027\n   950 Routes
    des colles\n   06901 Sophia antipolis, France\n   Phone: +33 92-95-62-85\n   Fax:
    \  +33 92-95-62-35\n   EMail: pouffary@taec.enet.dec.com\n   Alan Young\n   ISODE
    Consortium\n   The Dome\n   The Square\n   Richmond, UK\n   Phone: +44 181 332
    9091\n   Fax:   +44 181 332 9019\n   EMail: A.Young@isode.com\n"
  title: Authors' Addresses
