Abstract This document defines a collection of common data types using the YANG data modeling language.
These derived common types are designed to be imported by other modules defined in the routing area.
[RFC7950] is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols.
The YANG language supports a small set of built in data types and provides mechanisms to derive other types from the built in types.
This document introduces a collection of common data types derived from the built in YANG data types.
The derived types are designed to be the common types applicable for modeling in the routing area.
The terminology for describing YANG data models is found in [RFC7950].
This document defines two YANG modules for common routing types: ietf routing types and iana routing types.
The only module imports (ietf yang types and ietf inet types; see Section 3) are from [RFC6991].
The ietf routing types module contains common routing types other than those corresponding directly to IANA mappings.
These include the following: router i
Router Identifiers are commonly used to identify nodes in routing and other control plane protocols.
An example usage of router
id can be found in [OSPF YANG].
route target Route Targets (RTs) are commonly used to control the distribution of Virtual Routing and Forwarding (VRF) information (see [RFC4364]) in support of BGP/MPLS IP Virtual Private Networks (VPNs) and BGP/MPLS Ethernet VPNs [RFC7432].
An example usage can be found in [L2VPN YANG].
ipv6 route target IPv6 Route Targets are similar to standard Route Targets, except that they are IPv6 Address Specific BGP Extended Communities as described in [RFC5701].
An IPv6 Route Target is 20 octets and includes an IPv6 address as the global administrator.
route target type This type defines the import and export rules of Route Targets, as described in Section 4.3.1 of [RFC4364].
route distinguisher Route Distinguishers (RDs) are commonly used to identify separate routes in support of VPNs.
For example, as described in [RFC4364], RDs are commonly used to identify independent VPNs and VRFs, and, more generally, to identify multiple routes to the same prefix.
route origin A Route Origin is commonly used to indicate the Site of Origin for VRF information (see [RFC4364]) in support of BGP/MPLS IP VPNs and BGP
ipv6 route origin An IPv6 Route Origin would also be used to indicate the Site of Origin for VRF information (see [RFC4364]) in support of VPNs.
IPv6 Route Origins are IPv6 Address Specific BGP Extended Communities as described in [RFC5701].
An IPv6 Route Origin is 20 octets and includes an IPv6 address as the global administrator.
This type defines the representation of an IPv4 multicast group address, which is in the range of 224.0.0.0 to 239.255.255.255.
An example usage can be found in [PIM YANG].
This type defines the representation of an IPv6 multicast group address, which is in the range of ff00::/8.
An example usage can be found in [PIM YANG].
ip multicast group address This type represents an IP multicast group address and is IP version neutral.
The format of the textual representation implies the IP version.
An example usage can be found in [PIM YANG].
This represents the IPv4 source address type for use in multicast control protocols.
An example of where this type may/will be used is [PIM YANG].
This represents the IPv6 source address type for use in multicast control protocols.
An example of where this type may/will be used is [PIM YANG].
This represents the bandwidth in IEEE 754 floating point 32 bit binary format [IEEE754].
It is commonly used in Traffic Engineering control plane protocols.
An example of where this type may/will be used is [OSPF YANG].
This type identifies the IGP link type.
timer multiplier This type is used in conjunction with a timer value type.
It is generally used to indicate the number of timer value intervals that may expire before a specific event must occur.
Examples of this include the arrival of any Bidirectional Forwarding Detection (BFD) packets (see [RFC5880] Section 6.8.4) or hello interval [RFC3209].
This type covers timers that can be set in seconds, not set, or set to infinity.
This type supports a range of values that can be represented in a uint16 (2 octets).
This type covers timers that can be set in seconds, not set, or set to infinity.
This type supports a range of values that can be represented in a uint32 (4 octets).
timer value milliseconds This type covers timers that can be set in milliseconds, not set, or set to infinity.
This type supports a range of values that can be represented in a uint32 (4 octets).
This type defines a percentage with a range of 0 100%.
An example usage can be found in [BGP Model].
This type is based on the timeticks type defined in [RFC6991] but with 64 bit precision.
It represents the time in hundredths of a second between two epochs.
An example usage can be found in [BGP Model].
This type defines a 24 bit unsigned integer.
An example usage can be found in [OSPF YANG].
generalized label This type represents a Generalized Label for Generalized Multiprotocol Label Switching (GMPLS)
The Generalized Label does not identify its type, which is known from context.
An example usage can be found in [TE YANG].
mpls label special purpose This type represents the special purpose MPLS label values [RFC7274].
mpls label general use The 20 bit label value in an MPLS label stack is specified in [RFC3032].
This label value does not include the encodings of Traffic Class and TTL (Time to Live).
The label range specified by this type is for general use, with special purpose MPLS label values excluded.
mpls label The 20 bit label value in an MPLS label stack is specified in [RFC3032].
This label value does not include the encodings of Traffic Class and TTL.
The label range specified by this type covers the general use values and the special purpose label values.
An example usage can be found in [MPLS Base YANG].
This document defines the following YANG groupings: mpls label stack
This grouping defines a reusable collection of schema nodes representing an MPLS label stack [RFC3032].
vpn route targets This grouping defines a reusable collection of schema nodes representing Route Target import export rules used in BGP
An example usage can be found in [L2VPN YANG].
The iana routing types module contains common routing types corresponding directly to IANA mappings.
These include the following: address family
This type defines values for use in Address Family identifiers.
The values are based on the IANA "Address Family Numbers" registry [IANA ADDRESS FAMILY REGISTRY].
An example usage can be found in [BGP Model].
This type defines values for use in Subsequent Address Family Identifiers (SAFIs).
The values are based on the IANA "Subsequent Address Family Identifiers (SAFI) Parameters" registry [IANA SAFI REGISTRY].
IETF Routing Types YANG Module <CODE BEGINS>
file "ietf routing types@2017 12 04.yang
" module ietf routing types { namespace "urn:ietf:params:xml:
yang:ietf routing types"; prefix rt types; import ietf yang types { prefix yang; } import ietf inet types { prefix inet; } organization "IETF RTGWG Routing Area Working Group"
This module contains a collection of YANG data types considered generally useful for routing protocols.
2017 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8294; see the RFC itself for full legal notices."; revision 2017 12 04 { description "Initial revision."
Common YANG Data Types for the Routing Area.
ipv4 explicit null label { base mpls label special purpose value; description "This identity represents the IPv4 Explicit NULL Label."
; reference "RFC 3032: MPLS Label Stack Encoding.
; reference "RFC 3032: MPLS Label Stack Encoding.
ipv6 explicit null label { base mpls label special purpose value; description "This identity represents the IPv6 Explicit NULL Label."
; reference "RFC 3032: MPLS Label Stack Encoding.
; reference "RFC 3032: MPLS Label Stack Encoding.
The Use of Entropy Labels in MPLS Forwarding.
; reference "RFC 5586: MPLS Generic Associated Channel.
Assignment of the 'OAM Alert Label' for Multiprotocol Label Switching Architecture (MPLS) Operation and Maintenance (OAM) Functions.
; reference "RFC 7274: Allocating and Retiring Special Purpose MPLS Labels.
dotted quad; description "A 32 bit number in the dotted quad format assigned to each router.
This number uniquely identifies the router within an Autonomous System."
(([3 57 9a fA F]
However, it has since taken on a more general role in BGP route filtering.
A Route Target consists of two or three fields: a 2 octet Type field, an administrator field, and, optionally, an assigned number field.
According to the data formats for types 0, 1, 2, and 6 as defined in RFC 4360, RFC 5668, and RFC 7432, the encoding pattern is defined as:
octet number 1:4 octet ipv4addr:2 octet number 2:4 octet asn:2 octet number 6:6 octet mac address
Additionally, a generic pattern is defined for future Route Target types: 2 octet other hex number:6 octet hex number
Some valid examples are 0:100:100, 1:1.1.1.1:100, 2:1234567890:203, and 6:26:00:08:92:78:00."; reference "RFC 4360: BGP Extended Communities Attribute.
RFC 4364: BGP/MPLS IP Virtual Private Networks (VPNs).
RFC 5668: 4 Octet AS Specific BGP Extended Community.
BGP MPLS Based Ethernet VPN."
The format is <ipv6 address:2 octet number
Two valid examples are 2001:db8::1:6544 and 2001:db8::5eb1:791:6b37:17958."
; } enum export { value 1; description "The Route Target applies to route export."
(([3 57 9a fA F]
A Route Distinguisher will have the same format as a Route Target as per RFC 4360 and will consist of two or three fields: a 2 octet Type field, an administrator field, and, optionally, an assigned number field.
According to the data formats for types 0, 1, 2, and 6 as defined in RFC 4360, RFC 5668, and RFC 7432, the encoding pattern is defined as:
octet number 1:4 octet ipv4addr:2 octet number 2:4 octet asn:2 octet number 6:6 octet mac address
Additionally, a generic pattern is defined for future route discriminator types: 2 octet other hex number:6 octet hex number
Some valid examples are 0:100:100, 1:1.1.1.1:100, 2:1234567890:203, and 6:26:00:08:92:78:00."; reference "RFC 4360: BGP Extended Communities Attribute.
RFC 4364: BGP/MPLS IP Virtual Private Networks (VPNs).
RFC 5668: 4 Octet AS Specific BGP Extended Community.
BGP MPLS Based Ethernet VPN."
; } typedef route origin { type string { pattern '(0:(6553[0 5] 655[0 2][0 9]
(([3 57 9a fA F]
A Route Origin is an 8 octet BGP extended community identifying the set of sites where the BGP route originated (RFC 4364).
A Route Origin will have the same format as a Route Target as per RFC 4360 and will consist of two or three fields: a 2 octet Type field, an administrator field, and, optionally, an assigned number field.
According to the data formats for types 0, 1, 2, and 6 as defined in RFC 4360, RFC 5668, and RFC 7432, the encoding pattern is defined as:
octet number 1:4 octet ipv4addr:2 octet number 2:4 octet asn:2 octet number 6:6 octet mac address
Additionally, a generic pattern is defined for future Route Origin types: 2 octet other hex number:6 octet hex number
Some valid examples are 0:100:100, 1:1.1.1.1:100, 2:1234567890:203, and 6:26:00:08:92:78:00."; reference "RFC 4360: BGP Extended Communities Attribute.
RFC 4364: BGP/MPLS IP Virtual Private Networks (VPNs).
RFC 5668: 4 Octet AS Specific BGP Extended Community.
BGP MPLS Based Ethernet VPN."
The format is <ipv6 address:2 octet number
Two valid examples are 2001:db8::1:6544 and 2001:db8::5eb1:791:6b37:17958."
This type represents an IPv4 multicast group address, which is in the range of 224.0.0.0 to 239.255.255.255."
Host Extensions for IP Multicasting."
This type represents an IPv6 multicast group address, which is in the range of ff00::/8."; reference "RFC 4291: IP Version 6 Addressing Architecture.
RFC 7346: IPv6 Multicast Address Scopes.
This type represents a version neutral IP multicast group address.
The units are octets per second.
The encoding format is the external hexadecimal significant character sequences specified in IEEE 754 and ISO/IEC C99.
The format is restricted to be normalized, non negative, and non fraction: 0x1.hhhhhhp{ }d, 0X1.HHHHHHP{ }D, or 0x0p0
, where 'h' and 'H' are hexadecimal digits and 'd' and 'D'
are integers in the range of [0..127].
When six hexadecimal digits are used for 'hhhhhh' or 'HHHHHH', the least significant digit must be an even number.
'x' and 'X' indicate hexadecimal; 'p' and 'P' indicate a power of two.
Some examples are 0x0p0, 0x1p10, and 0x1.abcde2p 20."
; reference "IEEE Std 754 2008: IEEE Standard for Floating Point Arithmetic.
Information technology Programming Languages C.
; } enum point to multipoint { description "Specify point to multipoint network."
It represents the time, modulo 2^64, in hundredths of a second between two epochs."
Nodes sending and receiving the Generalized Label are aware of the link specific label context and type."
Generalized Multi Protocol Label Switching (GMPLS)
This type represents the special purpose MPLS label values."
; reference "RFC 3032: MPLS Label Stack Encoding.
This label value does not include the encodings of Traffic Class and TTL (Time to Live).
The label range specified by this type is for general use, with special purpose MPLS label values excluded."
This label value does not include the encodings of Traffic Class and TTL."
This grouping specifies an MPLS label stack.
The label stack is encoded as a list of label stack entries.
The list key is an identifier that indicates the relative ordering of each entry, with the lowest value identifier corresponding to the top of the label stack."; container mpls label stack { description "Container for a list of MPLS label stack entries."; list entry { key "id"; description "List of MPLS label stack entries."; leaf id { type uint8;
description "Identifies the entry in a sequence of MPLS label stack entries.
An entry with a smaller identifier value precedes an entry with a larger identifier value in the label stack.
The value of this ID has no semantic meaning other than relative ordering and referencing the entry."
; } leaf label { type rt types:mpls label; description "Label value."
; } leaf ttl { type uint8; description "Time to Live (TTL)."
Label Stack Entry: 'EXP' Field Renamed to 'Traffic Class' Field."
; reference "RFC 4364: BGP/MPLS IP Virtual Private Networks (VPNs).
YANG Module <CODE BEGINS> file "iana routing types@2017 12 04.yang
" module iana routing types { namespace "urn:ietf:params:xml:
2017 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8294; see the RFC itself for full legal notices."; revision 2017 12 04 { description "Initial revision."
Common YANG Data Types for the Routing Area.
Section Endpoint Identifier Address Family."
; } enum mpls tp lsp eid { value 27;
description "MPLS TP Label Switched Path (LSP) Endpoint Identifier Address Family."
; } enum mpls tp pwe eid { value 28;
description "MPLS TP Pseudowire Endpoint Identifier Address Family."
Common Service Family Address Family."
vpn safi { value 128; description "MPLS Labeled VPN SAFI."
; } enum multicast mpls
This document registers the following namespace URIs in the "IETF XML Registry" [RFC3688]:
N/A; the requested URI is an XML namespace.
iana routing types Registrant Contact: IANA.
N/A; the requested URI is an XML namespace.
This document registers the following YANG modules in the "YANG Module Names" registry [RFC6020]
IANA Maintained iana routing types Module
This document defines the initial version of the IANA maintained iana routing types YANG module (Section 4).
The iana routing types YANG module is intended to reflect the "Address Family Numbers" registry [IANA ADDRESS FAMILY REGISTRY] and the "Subsequent Address Family Identifiers (SAFI) Parameters" registry [IANA SAFI REGISTRY].
IANA has added this note to the "iana routing types YANG Module" registry: Address Families and Subsequent Address Families must not be directly added to the iana routing types YANG module.
They must instead be respectively added to the "Address Family Numbers" and "Subsequent Address Family Identifiers (SAFI)
When an Address Family or Subsequent Address Family is respectively added to the "Address Family Numbers" registry or the "Subsequent Address Family Identifiers (SAFI) Parameters" registry, a new "enum" statement must be added to the iana routing types YANG module.
The name of the "enum" is the same as the corresponding Address Family or SAFI, except that it will be a valid YANG identifier in all lowercase and with hyphens separating individual words in compound identifiers.
The following "enum" statement, and substatements thereof, should be defined:
"enum": Contains the YANG enum identifier for the "address family" (for Address Families) or "bgp safi" (for Subsequent Address Families).
This may be the same as the "address family" or "bgp safi", or it may be a shorter version to facilitate YANG identifier usage.
"value": Contains the IANA assigned value corresponding to the "address family" (for Address Families) or "bgp safi" (for Subsequent Address Families).
"status": Include only if a registration has been deprecated (use the value "deprecated") or obsoleted (use the value "obsolete").
"description": Replicate the description from the registry, if any.
Insert line breaks as needed so that the line does not exceed 72 characters.
"reference": Replicate the reference from the registry, if any, and add the title of the document.
Unassigned or reserved values are not present in these modules.
When the iana routing types YANG module is updated, a new "revision" statement must be added in front of the existing revision statements.
IANA has added this new note to the "Address Family Numbers" and "Subsequent Address Family Identifiers (SAFI)
Parameters" registries: When this registry is modified, the YANG module iana routing types must be updated as defined in RFC 8294.
This document defines common routing type definitions (i.e., typedef statements) using the YANG data modeling language.
The definitions themselves have no security or privacy impact on the Internet, but the usage of these definitions in concrete YANG modules might have.
The security considerations spelled out in the YANG 1.1 specification [RFC7950] apply for this document as well.
