- title: __initial_text__
  contents:
  - "            Network Working Group               N. Borenstein, Bellcore\n   \
    \         Request for Comments: 1341               N. Freed, Innosoft\n      \
    \             MIME  (Multipurpose Internet Mail Extensions):\n               \
    \       Mechanisms for Specifying and Describing\n                       the Format\
    \ of Internet Message Bodies\n          Status of this Memo\n            This\
    \ RFC specifies an IAB standards track protocol  for  the\n            Internet\
    \  community, and requests discussion and suggestions\n            for improvements.\
    \  Please refer to the  current  edition  of\n            the    \"IAB    Official\
    \    Protocol   Standards\"   for   the\n            standardization  state  and\
    \   status   of   this   protocol.\n            Distribution of this memo is unlimited.\n\
    \          Abstract\n            RFC 822 defines  a  message  representation \
    \ protocol  which\n            specifies  considerable  detail  about  message\
    \ headers, but\n            which leaves the message content, or message body,\
    \  as  flat\n            ASCII  text.   This document redefines the format of\
    \ message\n            bodies to allow multi-part textual and  non-textual  message\n\
    \            bodies  to  be  represented  and  exchanged  without loss of\n  \
    \          information.   This is based on earlier work  documented  in\n    \
    \        RFC  934  and  RFC  1049, but extends and revises that work.\n      \
    \      Because RFC 822 said so little about  message  bodies,  this\n        \
    \    document  is  largely  orthogonal to (rather than a revision\n          \
    \  of) RFC 822.\n            In  particular,  this  document  is  designed   to\
    \   provide\n            facilities  to include multiple objects in a single message,\n\
    \            to represent body text in  character  sets  other  than  US-\n  \
    \          ASCII,  to  represent formatted multi-font text messages, to\n    \
    \        represent non-textual material  such  as  images  and  audio\n      \
    \      fragments,  and  generally  to  facilitate  later extensions\n        \
    \    defining new types of Internet mail for use  by  cooperating\n          \
    \  mail agents.\n            This document does NOT extend Internet mail header\
    \ fields to\n            permit  anything  other  than  US-ASCII  text  data.\
    \   It is\n            recognized that such extensions are necessary, and they\
    \  are\n            the subject of a companion document [RFC -1342].\n       \
    \     A table of contents appears at the end of this document.\n            1\
    \    Introduction\n            Since its publication in 1982, RFC 822 [RFC-822]\
    \ has defined\n            the   standard  format  of  textual  mail  messages\
    \  on  the\n            Internet.  Its success has been such that the RFC 822\
    \ format\n            has  been  adopted,  wholly  or  partially,  well beyond\
    \ the\n            confines of the Internet and  the  Internet  SMTP  transport\n\
    \            defined  by RFC 821 [RFC-821].  As the format has seen wider\n  \
    \          use,  a  number  of  limitations  have  proven  increasingly\n    \
    \        restrictive for the user community.\n            RFC 822 was intended\
    \ to specify a format for text  messages.\n            As such, non-text messages,\
    \ such as multimedia messages that\n            might include audio or images,\
    \  are  simply  not  mentioned.\n            Even in the case of text, however,\
    \ RFC 822 is inadequate for\n            the needs of mail users whose languages\
    \ require the  use  of\n            character  sets  richer  than US ASCII [US-ASCII].\
    \ Since RFC\n            822 does not specify mechanisms for mail  containing\
    \  audio,\n            video,  Asian  language  text, or even text in most European\n\
    \            languages, additional specifications are needed\n            One\
    \ of the notable limitations of  RFC  821/822  based  mail\n            systems\
    \  is  the  fact  that  they  limit  the  contents  of\n            electronic\
    \  mail  messages  to  relatively  short  lines  of\n            seven-bit  ASCII.\
    \   This  forces  users  to convert any non-\n            textual data that they\
    \ may wish to send into seven-bit bytes\n            representable  as printable\
    \ ASCII characters before invoking\n            a local mail UA (User Agent, \
    \ a  program  with  which  human\n            users  send  and  receive  mail).\
    \ Examples of such encodings\n            currently used in the  Internet  include\
    \  pure  hexadecimal,\n            uuencode,  the  3-in-4 base 64 scheme specified\
    \ in RFC 1113,\n            the Andrew Toolkit Representation [ATK], and many\
    \ others.\n            The limitations of RFC 822 mail become even more apparent\
    \ as\n            gateways  are  designed  to  allow  for the exchange of mail\n\
    \            messages between RFC 822 hosts and X.400 hosts. X.400 [X400]\n  \
    \          specifies  mechanisms  for the inclusion of non-textual body\n    \
    \        parts  within  electronic  mail   messages.    The   current\n      \
    \      standards  for  the  mapping  of  X.400  messages to RFC 822\n        \
    \    messages specify that either X.400  non-textual  body  parts\n          \
    \  should  be converted to (not encoded in) an ASCII format, or\n            that\
    \ they should be discarded, notifying the  RFC  822  user\n            that  discarding\
    \ has occurred.  This is clearly undesirable,\n            as information that\
    \ a user may  wish  to  receive  is  lost.\n            Even  though  a  user's\
    \  UA  may  not have the capability of\n            dealing with the non-textual\
    \ body part, the user might  have\n            some  mechanism  external  to the\
    \ UA that can extract useful\n            information from the body part.  Moreover,\
    \ it does not allow\n            for  the  fact  that the message may eventually\
    \ be gatewayed\n            back into an X.400 message handling system (i.e.,\
    \ the  X.400\n            message  is  \"tunneled\"  through  Internet  mail),\
    \ where the\n            non-textual  information  would  definitely  become \
    \  useful\n            again.\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n            This document describes several mechanisms\
    \ that  combine  to\n            solve most of these problems without introducing\
    \ any serious\n            incompatibilities with the existing world of RFC  822\
    \  mail.\n            In particular, it describes:\n            1.  A MIME-Version\
    \ header field, which uses a version number\n                 to  declare  a \
    \ message  to  be  conformant  with  this\n                 specification and\
    \  allows  mail  processing  agents  to\n                 distinguish  between\
    \  such messages and those generated\n                 by older or non-conformant\
    \ software, which is  presumed\n                 to lack such a field.\n     \
    \       2.  A Content-Type header field, generalized from  RFC  1049\n       \
    \          [RFC-1049],  which  can be used to specify the type and\n         \
    \        subtype of data in the body of a message and  to  fully\n           \
    \      specify  the  native  representation (encoding) of such\n             \
    \    data.\n                 2.a.  A \"text\" Content-Type value, which can be\
    \ used to\n                      represent  textual  information  in  a  number\
    \  of\n                      character  sets  and  formatted  text  description\n\
    \                      languages in a standardized manner.\n                 2.b.\
    \  A \"multipart\" Content-Type value,  which  can  be\n                     \
    \ used  to  combine  several body parts, possibly of\n                      differing\
    \ types of data, into a single message.\n                 2.c.  An \"application\"\
    \ Content-Type value, which can be\n                      used  to transmit application\
    \ data or binary data,\n                      and hence,  among  other  uses,\
    \  to  implement  an\n                      electronic mail file transfer service.\n\
    \                 2.d.  A \"message\" Content-Type value, for encapsulating\n\
    \                      a mail message.\n                 2.e  An \"image\"  Content-Type\
    \ value,  for  transmitting\n                      still image (picture) data.\n\
    \                 2.f.  An \"audio\"  Content-Type value, for  transmitting\n\
    \                      audio or voice data.\n                 2.g.  A \"video\"\
    \  Content-Type value,  for  transmitting\n                      video or moving\
    \ image data, possibly with audio as\n                      part of the composite\
    \ video data format.\n            3.  A Content-Transfer-Encoding header field,\
    \ which  can  be\n                 used  to specify an auxiliary encoding that\
    \ was applied\n                 to the data in order to allow it to pass  through\
    \  mail\n                 transport  mechanisms  which may have data or character\n\
    \                 set limitations.\n            4.  Two optional header fields\
    \ that can be used  to  further\n                 describe the data in a message\
    \ body, the Content-ID and\n                 Content-Description header fields.\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          MIME has been carefully designed as an extensible mechanism,\n    \
    \        and  it  is  expected  that  the set of content-type/subtype\n      \
    \      pairs   and   their   associated   parameters   will    grow\n        \
    \    significantly with time.  Several other MIME fields, notably\n          \
    \  including character set names, are likely to have new values\n            defined\
    \  over time.  In order to ensure that the set of such\n            values is\
    \  developed  in  an  orderly,  well-specified,  and\n            public  manner,\
    \  MIME  defines  a registration process which\n            uses the Internet\
    \ Assigned Numbers  Authority  (IANA)  as  a\n            central  registry  for\
    \  such  values.   Appendix  F provides\n            details about how IANA registration\
    \ is accomplished.\n            Finally, to specify and promote interoperability,\
    \ Appendix A\n            of  this  document  provides a basic applicability statement\n\
    \            for a subset of the above mechanisms that defines a  minimal\n  \
    \          level of \"conformance\" with this document.\n            HISTORICAL\
    \ NOTE:  Several of  the  mechanisms  described  in\n            this  document\
    \  may seem somewhat strange or even baroque at\n            first reading.  It\
    \ is important to note  that  compatibility\n            with  existing  standards\
    \  AND  robustness  across  existing\n            practice were two of the highest\
    \ priorities of  the  working\n            group   that   developed   this  document.\
    \   In  particular,\n            compatibility was always favored over elegance.\n\
    \            2    Notations, Conventions, and Generic BNF Grammar\n          \
    \  This document is being published in  two  versions,  one  as\n            plain\
    \  ASCII  text  and  one  as  PostScript.  The latter is\n            recommended,\
    \ though the textual contents are  identical.  An\n            Andrew-format \
    \ copy  of this document is also available from\n            the first author\
    \ (Borenstein).\n            Although the mechanisms specified in this document\
    \  are  all\n            described  in prose, most are also described formally\
    \ in the\n            modified BNF notation of RFC 822.  Implementors will need\
    \ to\n            be  familiar  with this notation in order to understand this\n\
    \            specification, and are referred to RFC 822  for  a  complete\n  \
    \          explanation of the modified BNF notation.\n            Some of the\
    \ modified BNF in this document makes reference to\n            syntactic  entities\
    \  that  are defined in RFC 822 and not in\n            this document.  A complete\
    \ formal grammar, then, is obtained\n            by combining the collected grammar\
    \ appendix of this document\n            with that of RFC 822.\n            The\
    \ term CRLF, in this document, refers to the  sequence  of\n            the  two\
    \  ASCII  characters CR (13) and LF (10) which, taken\n            together, in\
    \ this order, denote a  line  break  in  RFC  822\n            mail.\n       \
    \     The term \"character  set\",  wherever  it  is  used  in  this\n       \
    \     document,  refers  to a coded character set, in the sense of\n         \
    \   ISO character set standardization  work,  and  must  not  be\n           \
    \ RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n            misinterpreted\
    \ as meaning \"a set of characters.\"\n            The term \"message\", when\
    \ not further qualified, means either\n            the (complete or \"top-level\"\
    ) message being transferred on a\n            network, or  a  message  encapsulated\
    \  in  a  body  of  type\n            \"message\".\n            The term \"body\
    \ part\", in this document,  means  one  of  the\n            parts  of  the body\
    \ of a multipart entity. A body part has a\n            header and a body, so\
    \ it makes sense to speak about the body\n            of a body part.\n      \
    \      The term \"entity\", in this document, means either a  message\n      \
    \      or  a  body  part.  All kinds of entities share the property\n        \
    \    that they have a header and a body.\n            The term \"body\", when\
    \ not further qualified, means the  body\n            of  an  entity, that is\
    \ the body of either a message or of a\n            body part.\n            Note\
    \ : the previous four definitions are  clearly  circular.\n            This  is\
    \  unavoidable,  since the overal structure of a MIME\n            message is\
    \ indeed recursive.\n            In this document, all numeric and octet values\
    \ are given  in\n            decimal notation.\n            It must be noted that\
    \  Content-Type  values,  subtypes,  and\n            parameter  names  as  defined\
    \  in  this  document  are case-\n            insensitive.  However, parameter\
    \ values  are  case-sensitive\n            unless otherwise specified for the\
    \ specific parameter.\n            FORMATTING NOTE:  This document has been carefully\
    \ formatted\n            for   ease  of  reading.  The  PostScript  version  of\
    \  this\n            document, in particular, places notes like this  one,  which\n\
    \            may  be  skipped  by  the  reader, in a smaller, italicized,\n  \
    \          font, and indents it as well.  In the text version, only the\n    \
    \        indentation  is  preserved,  so  if you are reading the text\n      \
    \      version of this you  might  consider  using  the  PostScript\n        \
    \    version  instead.  However,  all such notes will be indented\n          \
    \  and preceded by \"NOTE:\" or some similar  introduction,  even\n          \
    \  in the text version.\n            The primary purpose  of  these  non-essential\
    \  notes  is  to\n            convey  information about the rationale of this\
    \ document, or\n            to  place  this  document  in  the  proper   historical\
    \   or\n            evolutionary  context.   Such  information may be skipped\
    \ by\n            those who are  focused  entirely  on  building  a  compliant\n\
    \            implementation,  but  may  be  of  use  to those who wish to\n  \
    \          understand why this document is written as it is.\n            For\
    \ ease of  recognition,  all  BNF  definitions  have  been\n            placed\
    \  in  a  fixed-width font in the PostScript version of\n            this document.\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          3    The MIME-Version Header Field\n            Since RFC 822 was published\
    \ in 1982, there has  really  been\n            only  one  format  standard for\
    \ Internet messages, and there\n            has  been  little  perceived  need\
    \  to  declare  the  format\n            standard  in  use.  This document is\
    \ an independent document\n            that complements RFC 822. Although the\
    \  extensions  in  this\n            document have been defined in such a way\
    \ as to be compatible\n            with RFC 822, there are  still  circumstances\
    \  in  which  it\n            might  be  desirable  for  a  mail-processing  agent\
    \ to know\n            whether a message was composed  with  the  new  standard\
    \  in\n            mind.\n            Therefore, this document defines a new header\
    \ field,  \"MIME-\n            Version\",  which is to be used to declare the\
    \ version of the\n            Internet message body format standard in use.\n\
    \            Messages composed in  accordance  with  this  document  MUST\n  \
    \          include  such  a  header  field, with the following verbatim\n    \
    \        text:\n            MIME-Version: 1.0\n            The presence of this\
    \ header field is an assertion  that  the\n            message has been composed\
    \ in compliance with this document.\n            Since it is possible that a future\
    \ document might extend the\n            message format standard again, a formal\
    \ BNF is given for the\n            content of the MIME-Version field:\n     \
    \       MIME-Version := text\n            Thus, future  format  specifiers,  which\
    \  might  replace  or\n            extend  \"1.0\", are (minimally) constrained\
    \ by the definition\n            of \"text\", which appears in RFC 822.\n    \
    \        Note that the MIME-Version header field is required  at  the\n      \
    \      top  level  of  a  message. It is not required for each body\n        \
    \    part of a multipart entity.  It is required for the embedded\n          \
    \  headers  of  a  body  of  type  \"message\" if and only if the\n          \
    \  embedded message is itself claimed to be MIME-compliant.\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            4    The Content-Type\
    \ Header Field\n            The purpose of the Content-Type field  is  to  describe\
    \  the\n            data  contained  in the body fully enough that the receiving\n\
    \            user agent can pick an appropriate  agent  or  mechanism  to\n  \
    \          present  the  data  to the user, or  otherwise deal with the\n    \
    \        data in an appropriate manner.\n            HISTORICAL NOTE:  The Content-Type\
    \ header  field  was  first\n            defined  in RFC 1049.  RFC 1049 Content-types\
    \ used a simpler\n            and less powerful syntax, but one that is largely\
    \ compatible\n            with the mechanism given here.\n            The Content-Type\
    \  header field is used to specify the nature\n            of  the  data  in \
    \ the body of an entity, by giving type and\n            subtype identifiers,\
    \ and by providing auxiliary  information\n            that may be required for\
    \ certain types.   After the type and\n            subtype names, the remainder\
    \ of the header field is simply a\n            set of parameters, specified in\
    \ an attribute/value notation.\n            The set of meaningful parameters differs\
    \ for  the  different\n            types.   The  ordering  of  parameters  is\
    \  not significant.\n            Among the defined parameters is  a  \"charset\"\
    \  parameter  by\n            which  the  character  set used in the body may\
    \ be declared.\n            Comments are allowed in accordance with RFC  822 \
    \ rules  for\n            structured header fields.\n            In general, the\
    \ top-level Content-Type is  used  to  declare\n            the  general  type\
    \  of  data,  while the subtype specifies a\n            specific format for that\
    \ type of data.  Thus, a Content-Type\n            of  \"image/xyz\" is enough\
    \ to tell a user agent that the data\n            is an image, even if the user\
    \ agent has no knowledge of  the\n            specific  image format \"xyz\".\
    \  Such information can be used,\n            for example, to decide whether or\
    \ not to show a user the raw\n            data from an unrecognized subtype --\
    \ such an action might be\n            reasonable for unrecognized subtypes of\
    \ text,  but  not  for\n            unrecognized  subtypes  of image or audio.\
    \  For this reason,\n            registered subtypes of audio, image, text, and\
    \ video, should\n            not  contain  embedded  information  that  is  really\
    \  of  a\n            different type.  Such compound types should  be  represented\n\
    \            using the \"multipart\" or \"application\" types.\n            Parameters\
    \ are modifiers of the content-subtype, and do  not\n            fundamentally\
    \  affect  the  requirements of the host system.\n            Although  most \
    \ parameters  make  sense  only  with  certain\n            content-types,  others\
    \  are  \"global\" in the sense that they\n            might apply to any  subtype.\
    \  For  example,  the  \"boundary\"\n            parameter makes sense only for\
    \ the \"multipart\" content-type,\n            but the \"charset\" parameter might\
    \ make  sense  with  several\n            content-types.\n            An initial\
    \ set of seven Content-Types  is  defined  by  this\n            document.   This\
    \  set  of  top-level names is intended to be\n            substantially complete.\
    \  It is expected  that  additions  to\n            the   larger   set  of  supported\
    \  types  can  generally  be\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n            accomplished by  the  creation  of  new\
    \  subtypes  of  these\n            initial  types.   In the future, more top-level\
    \ types may be\n            defined only by an extension to this standard.   If\
    \  another\n            primary  type is to be used for any reason, it must be\
    \ given\n            a name starting  with  \"X-\"  to  indicate  its  non-standard\n\
    \            status  and  to  avoid  a  potential  conflict with a future\n  \
    \          official name.\n            In the Extended BNF notation  of  RFC \
    \ 822,  a  Content-Type\n            header field value is defined as follows:\n\
    \            Content-Type := type \"/\" subtype *[\";\" parameter]\n         \
    \   type :=          \"application\"     / \"audio\"\n                      /\
    \ \"image\"           / \"message\"\n                      / \"multipart\"  /\
    \ \"text\"\n                      / \"video\"           / x-token\n          \
    \  x-token := <The two characters \"X-\" followed, with no\n                 \
    \      intervening white space, by any token>\n            subtype := token\n\
    \            parameter := attribute \"=\" value\n            attribute := token\n\
    \            value := token / quoted-string\n            token := 1*<any CHAR\
    \ except SPACE, CTLs, or tspecials>\n            tspecials :=  \"(\" / \")\" /\
    \ \"<\" / \">\" / \"@\"  ; Must be in\n                       /  \",\" / \";\"\
    \ / \":\" / \"\\\" / <\">  ; quoted-string,\n                       /  \"/\" /\
    \ \"[\" / \"]\" / \"?\" / \".\"  ; to use within\n                       /  \"\
    =\"                        ; parameter values\n            Note that the definition\
    \ of \"tspecials\" is the same  as  the\n            RFC  822  definition  of\
    \ \"specials\" with the addition of the\n            three characters \"/\", \"\
    ?\", and \"=\".\n            Note also that a subtype specification is MANDATORY.\
    \   There\n            are no default subtypes.\n            The  type,  subtype,\
    \  and  parameter  names  are  not   case\n            sensitive.   For  example,\
    \  TEXT,  Text,  and  TeXt  are all\n            equivalent.  Parameter values\
    \ are normally  case  sensitive,\n            but   certain   parameters   are\
    \  interpreted  to  be  case-\n            insensitive, depending on the intended\
    \ use.   (For  example,\n            multipart  boundaries  are  case-sensitive,\
    \ but the \"access-\n            type\" for message/External-body is not case-sensitive.)\n\
    \            Beyond this syntax, the only constraint on the definition of\n  \
    \          subtype  names  is  the  desire  that  their  uses  must not\n    \
    \        conflict.  That is, it would  be  undesirable  to  have  two\n      \
    \      RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n        \
    \    different       communities       using       \"Content-Type:\n         \
    \   application/foobar\"  to  mean  two  different  things.   The\n          \
    \  process  of  defining  new  content-subtypes,  then,  is not\n            intended\
    \ to be a mechanism for  imposing  restrictions,  but\n            simply  a \
    \ mechanism  for publicizing the usages. There are,\n            therefore,  two\
    \  acceptable  mechanisms  for  defining   new\n            Content-Type subtypes:\n\
    \                 1.  Private values (starting  with  \"X-\")  may  be\n     \
    \                 defined  bilaterally  between two cooperating\n            \
    \          agents  without   outside   registration   or\n                   \
    \   standardization.\n                 2.   New  standard  values  must  be  \
    \ documented,\n                      registered  with,  and  approved  by IANA,\
    \ as\n                      described in Appendix F.  Where intended  for\n  \
    \                    public  use,  the  formats they refer to must\n         \
    \             also be defined by a published specification,\n                \
    \      and possibly offered for standardization.\n            The seven  standard\
    \  initial  predefined  Content-Types  are\n            detailed in the bulk of\
    \ this document.  They are:\n                 text --  textual  information. \
    \  The  primary  subtype,\n                      \"plain\",  indicates plain (unformatted)\
    \ text.   No\n                      special software  is  required  to  get  the\
    \  full\n                      meaning  of  the  text, aside from support for\
    \ the\n                      indicated character set.  Subtypes are to be  used\n\
    \                      for  enriched  text  in  forms  where  application\n  \
    \                    software may enhance the appearance of  the  text,\n    \
    \                  but such software must not be required in order to\n      \
    \                get the general  idea  of  the  content.  Possible\n        \
    \              subtypes  thus include any readable word processor\n          \
    \            format.   A  very  simple  and  portable  subtype,\n            \
    \          richtext, is defined in this document.\n                 multipart\
    \ --  data  consisting  of  multiple  parts  of\n                      independent\
    \  data  types.   Four  initial subtypes\n                      are  defined,\
    \  including   the   primary   \"mixed\"\n                      subtype,  \"alternative\"\
    \  for representing the same\n                      data in multiple  formats,\
    \  \"parallel\"  for  parts\n                      intended to be viewed simultaneously,\
    \ and \"digest\"\n                      for multipart entities in which each \
    \ part  is  of\n                      type \"message\".\n                 message\
    \  --  an  encapsulated  message.   A   body   of\n                      Content-Type\
    \ \"message\" is itself a fully formatted\n                      RFC 822 conformant\
    \ message which may  contain  its\n                      own  different  Content-Type\
    \  header  field.   The\n                      primary  subtype  is  \"rfc822\"\
    .    The   \"partial\"\n                      subtype is defined for partial messages,\
    \ to permit\n                      the fragmented transmission  of  bodies  that\
    \  are\n                      thought  to be too large to be passed through mail\n\
    \                      transport    facilities.      Another     subtype,\n  \
    \                    \"External-body\",  is  defined for specifying large\n  \
    \                    bodies by reference to an external data source.\n       \
    \     RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n         \
    \        image --  image data.  Image requires a display  device\n           \
    \           (such  as a graphical display, a printer, or a FAX\n             \
    \         machine)  to  view   the   information.    Initial\n               \
    \       subtypes  are  defined  for  two widely-used image\n                 \
    \     formats, jpeg and gif.\n                 audio --  audio data,  with  initial\
    \  subtype  \"basic\".\n                      Audio  requires  an audio output\
    \ device (such as a\n                      speaker or a telephone) to \"display\"\
    \ the contents.\n                 video --  video data.  Video requires the capability\
    \ to\n                      display   moving   images,   typically   including\n\
    \                      specialized hardware and  software.   The  initial\n  \
    \                    subtype is \"mpeg\".\n                 application --  some\
    \  other  kind  of  data,  typically\n                      either uninterpreted\
    \ binary data or information to\n                      be processed by  a  mail-based\
    \  application.   The\n                      primary  subtype, \"octet-stream\"\
    , is to be used in\n                      the case of uninterpreted binary  data,\
    \  in  which\n                      case  the  simplest recommended action is\
    \ to offer\n                      to write the information into a file for the\
    \ user.\n                      Two  additional  subtypes, \"ODA\" and \"PostScript\"\
    ,\n                      are defined for transporting  ODA  and  PostScript\n\
    \                      documents  in  bodies.   Other  expected  uses for\n  \
    \                    \"application\"  include  spreadsheets,   data   for\n  \
    \                    mail-based  scheduling  systems, and languages for\n    \
    \                  \"active\" (computational) email.  (Note that active\n    \
    \                  email   entails   several  securityconsiderations,\n      \
    \                which  are   discussed   later   in   this   memo,\n        \
    \              particularly      in      the      context      of\n          \
    \            application/PostScript.)\n            Default RFC 822 messages are\
    \ typed by this protocol as plain\n            text  in the US-ASCII character\
    \ set, which can be explicitly\n            specified as \"Content-type:  text/plain;\
    \  charset=us-ascii\".\n            If  no  Content-Type  is specified, either\
    \ by error or by an\n            older user agent, this default is assumed.  \
    \ In the presence\n            of  a  MIME-Version header field, a receiving User\
    \ Agent can\n            also assume  that  plain  US-ASCII  text  was  the  sender's\n\
    \            intent.   In  the  absence  of a MIME-Version specification,\n  \
    \          plain US-ASCII text must still be assumed, but the  sender's\n    \
    \        intent might have been otherwise.\n            RATIONALE:  In the absence\
    \ of any Content-Type header  field\n            or MIME-Version header field,\
    \ it is impossible to be certain\n            that a message is actually text\
    \ in  the  US-ASCII  character\n            set,  since  it  might  well  be \
    \ a  message that, using the\n            conventions that predate this  document,\
    \  includes  text  in\n            another  character  set or non-textual data\
    \ in a manner that\n            cannot  be  automatically  recognized  (e.g.,\
    \  a   uuencoded\n            compressed  UNIX  tar  file).  Although  there \
    \ is  no fully\n            acceptable alternative to treating such untyped messages\
    \  as\n            \"text/plain;  charset=us-ascii\",  implementors should remain\n\
    \            aware that if a message lacks both the MIME-Version and  the\n  \
    \          Content-Type  header  fields,  it  may  in  practice contain\n    \
    \        almost anything.\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n            It should be noted that  the  list  of  Content-Type\
    \  values\n            given  here  may  be  augmented  in time, via the mechanisms\n\
    \            described above, and that the set of subtypes is expected to\n  \
    \          grow substantially.\n            When a mail reader encounters mail\
    \ with an unknown  Content-\n            type  value,  it  should generally treat\
    \ it as equivalent to\n            \"application/octet-stream\",  as  described\
    \  later  in   this\n            document.\n            5    The Content-Transfer-Encoding\
    \ Header Field\n            Many Content-Types which could usefully be  transported\
    \  via\n            email  are  represented, in their \"natural\" format, as 8-bit\n\
    \            character or binary data.  Such data cannot  be  transmitted\n  \
    \          over   some  transport  protocols.   For  example,  RFC  821\n    \
    \        restricts mail messages to 7-bit  US-ASCII  data  with  1000\n      \
    \      character lines.\n            It is necessary, therefore, to define a \
    \ standard  mechanism\n            for  re-encoding  such  data into a 7-bit short-line\
    \ format.\n            This  document  specifies  that  such  encodings   will\
    \   be\n            indicated by a new \"Content-Transfer-Encoding\" header field.\n\
    \            The Content-Transfer-Encoding field is used to indicate  the\n  \
    \          type  of  transformation  that  has  been  used  in order to\n    \
    \        represent the body in an acceptable manner for transport.\n         \
    \   Unlike Content-Types, a proliferation  of  Content-Transfer-\n           \
    \ Encoding  values  is  undesirable and unnecessary.  However,\n            establishing\
    \   only   a   single   Content-Transfer-Encoding\n            mechanism  does\
    \  not  seem  possible.    There is a tradeoff\n            between the desire\
    \ for a compact and efficient  encoding  of\n            largely-binary  data\
    \  and the desire for a readable encoding\n            of data that is mostly,\
    \ but not entirely, 7-bit  data.   For\n            this reason, at least two\
    \ encoding mechanisms are necessary:\n            a \"readable\" encoding and\
    \ a \"dense\" encoding.\n            The Content-Transfer-Encoding field is designed\
    \  to  specify\n            an invertible mapping between the \"native\" representation\
    \ of\n            a type of data and a  representation  that  can  be  readily\n\
    \            exchanged  using  7  bit  mail  transport protocols, such as\n  \
    \          those defined by RFC 821 (SMTP). This  field  has  not  been\n    \
    \        defined  by  any  previous  standard. The field's value is a\n      \
    \      single token specifying the type of encoding, as  enumerated\n        \
    \    below.  Formally:\n            Content-Transfer-Encoding := \"BASE64\" /\
    \ \"QUOTED-PRINTABLE\" /\n                                         \"8BIT\"  \
    \ / \"7BIT\" /\n                                         \"BINARY\" / x-token\n\
    \            These values are not case sensitive.  That  is,  Base64  and\n  \
    \          BASE64  and  bAsE64 are all equivalent.  An encoding type of\n    \
    \        7BIT requires that the body is already in a seven-bit  mail-\n      \
    \      ready representation.  This is the default value -- that is,\n        \
    \    RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n          \
    \  \"Content-Transfer-Encoding:  7BIT\"   is   assumed   if   the\n          \
    \  Content-Transfer-Encoding header field is not present.\n            The values\
    \ \"8bit\", \"7bit\", and \"binary\" all  imply  that  NO\n            encoding\
    \  has  been performed. However, they are potentially\n            useful as indications\
    \ of the kind of data contained  in  the\n            object,  and  therefore\
    \  of  the kind of encoding that might\n            need to be performed for transmission\
    \ in a  given  transport\n            system.   \"7bit\"  means  that the data\
    \ is all represented as\n            short lines of US-ASCII data.  \"8bit\" means\
    \ that  the  lines\n            are  short,  but  there  may be non-ASCII characters\
    \ (octets\n            with the high-order bit set).  \"Binary\" means that not\
    \  only\n            may non-ASCII characters be present, but also that the lines\n\
    \            are not necessarily short enough for SMTP transport.\n          \
    \  The difference between  \"8bit\"  (or  any  other  conceivable\n          \
    \  bit-width  token)  and  the  \"binary\" token is that \"binary\"\n        \
    \    does not require adherence to any limits on line  length  or\n          \
    \  to  the  SMTP  CRLF semantics, while the bit-width tokens do\n            require\
    \ such adherence.  If the body contains  data  in  any\n            bit-width\
    \   other  than  7-bit,  the  appropriate  bit-width\n            Content-Transfer-Encoding\
    \ token must be used  (e.g.,  \"8bit\"\n            for unencoded 8 bit wide data).\
    \  If the body contains binary\n            data, the \"binary\" Content-Transfer-Encoding\
    \ token  must  be\n            used.\n            NOTE:  The distinction between\
    \ the Content-Transfer-Encoding\n            values  of  \"binary,\"  \"8bit,\"\
    \ etc. may seem unimportant, in\n            that all of them really mean \"none\"\
    \ -- that  is,  there  has\n            been  no encoding of the data for transport.\
    \  However, clear\n            labeling will be  of  enormous  value  to  gateways\
    \  between\n            future mail transport systems with differing capabilities\
    \ in\n            transporting data that do not meet the restrictions  of  RFC\n\
    \            821 transport.\n            As of  the  publication  of  this  document,\
    \  there  are  no\n            standardized  Internet transports for which it\
    \ is legitimate\n            to include unencoded 8-bit or binary data  in  mail\
    \  bodies.\n            Thus  there  are  no  circumstances  in  which the \"\
    8bit\" or\n            \"binary\" Content-Transfer-Encoding is actually legal\
    \ on  the\n            Internet.   However,  in the event that 8-bit or binary\
    \ mail\n            transport becomes a reality in Internet mail, or  when  this\n\
    \            document  is  used  in  conjunction  with any other 8-bit or\n  \
    \          binary-capable transport mechanism, 8-bit or  binary  bodies\n    \
    \        should be labeled as such using this mechanism.\n            NOTE:  The\
    \ five values  defined  for  the  Content-Transfer-\n            Encoding  field\
    \  imply  nothing about the Content-Type other\n            than the algorithm\
    \ by which it was encoded or the  transport\n            system requirements if\
    \ unencoded.\n            Implementors  may,  if  necessary,   define   new  \
    \ Content-\n            Transfer-Encoding  values, but must use an x-token, which\
    \ is\n            a name prefixed by \"X-\" to indicate its non-standard status,\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          e.g.,    \"Content-Transfer-Encoding:     x-my-new-encoding\".\n  \
    \          However, unlike Content-Types and subtypes, the creation  of\n    \
    \        new   Content-Transfer-Encoding  values  is  explicitly  and\n      \
    \      strongly  discouraged,  as  it  seems   likely   to   hinder\n        \
    \    interoperability  with  little potential benefit.  Their use\n          \
    \  is allowed only  as  the  result  of  an  agreement  between\n            cooperating\
    \ user agents.\n            If a Content-Transfer-Encoding header field appears\
    \ as  part\n            of  a  message header, it applies to the entire body of\
    \ that\n            message.   If  a  Content-Transfer-Encoding   header   field\n\
    \            appears as part of a body part's headers, it applies only to\n  \
    \          the body of that  body  part.   If  an  entity  is  of  type\n    \
    \        \"multipart\"  or  \"message\", the Content-Transfer-Encoding is\n  \
    \          not permitted to have any  value  other  than  a  bit  width\n    \
    \        (e.g., \"7bit\", \"8bit\", etc.) or \"binary\".\n            It should\
    \ be noted that email is character-oriented, so that\n            the  mechanisms\
    \  described  here are mechanisms for encoding\n            arbitrary byte streams,\
    \ not bit streams.  If a bit stream is\n            to  be encoded via one of\
    \ these mechanisms, it must first be\n            converted to an 8-bit byte stream\
    \ using the network standard\n            bit  order  (\"big-endian\"),  in  which\
    \ the earlier bits in a\n            stream become the higher-order bits in a\
    \ byte.  A bit stream\n            not  ending at an 8-bit boundary must be padded\
    \ with zeroes.\n            This document provides a mechanism for noting  the\
    \  addition\n            of such padding in the case of the application Content-Type,\n\
    \            which has a \"padding\" parameter.\n            The encoding mechanisms\
    \ defined here explicitly  encode  all\n            data  in  ASCII.   Thus, \
    \ for example, suppose an entity has\n            header fields such as:\n   \
    \              Content-Type: text/plain; charset=ISO-8859-1\n                \
    \ Content-transfer-encoding: base64\n            This should be interpreted to\
    \ mean that the body is a base64\n            ASCII  encoding  of  data that was\
    \ originally in ISO-8859-1,\n            and will be in that character set again\
    \ after decoding.\n            The following sections will define the two standard\
    \ encoding\n            mechanisms.    The   definition   of  new  content-transfer-\n\
    \            encodings is explicitly discouraged and  should  only  occur\n  \
    \          when  absolutely  necessary.   All content-transfer-encoding\n    \
    \        namespace except that  beginning  with  \"X-\"  is  explicitly\n    \
    \        reserved  to  the  IANA  for future use.  Private agreements\n      \
    \      about   content-transfer-encodings   are   also   explicitly\n        \
    \    discouraged.\n            Certain Content-Transfer-Encoding values may only\
    \ be used on\n            certain  Content-Types.   In  particular,  it  is  expressly\n\
    \            forbidden to use any encodings other than \"7bit\", \"8bit\", or\n\
    \            \"binary\"  with  any  Content-Type  that recursively includes\n\
    \            other Content-Type  fields,   notably  the  \"multipart\"  and\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          \"message\" Content-Types.  All encodings that are desired for\n  \
    \          bodies of type multipart or message  must  be  done  at  the\n    \
    \        innermost  level,  by encoding the actual body that needs to\n      \
    \      be encoded.\n            NOTE  ON  ENCODING  RESTRICTIONS:   Though  the\
    \  prohibition\n            against  using  content-transfer-encodings  on  data\
    \ of type\n            multipart or message may  seem  overly  restrictive,  it\
    \  is\n            necessary  to  prevent  nested  encodings, in which data are\n\
    \            passed through an encoding  algorithm  multiple  times,  and\n  \
    \          must  be  decoded  multiple  times  in  order to be properly\n    \
    \        viewed.  Nested encodings  add  considerable  complexity  to\n      \
    \      user  agents:   aside  from  the obvious efficiency problems\n        \
    \    with such multiple encodings, they  can  obscure  the  basic\n          \
    \  structure  of a message.  In particular, they can imply that\n            several\
    \ decoding operations are necessary simply to find out\n            what  types\
    \  of  objects a message contains.  Banning nested\n            encodings may\
    \ complicate the job of certain  mail  gateways,\n            but  this  seems\
    \ less of a problem than the effect of nested\n            encodings on user agents.\n\
    \            NOTE ON THE RELATIONSHIP BETWEEN CONTENT-TYPE  AND  CONTENT-\n  \
    \          TRANSFER-ENCODING:   It  may seem that the Content-Transfer-\n    \
    \        Encoding could be inferred from the characteristics  of  the\n      \
    \      Content-Type  that  is to be encoded, or, at the very least,\n        \
    \    that certain Content-Transfer-Encodings  could  be  mandated\n          \
    \  for  use  with  specific  Content-Types.  There  are several\n            reasons\
    \ why this is not the case. First, given  the  varying\n            types  of\
    \  transports  used  for mail, some encodings may be\n            appropriate\
    \ for some Content-Type/transport combinations and\n            not  for  others.\
    \  (For  example, in an  8-bit transport, no\n            encoding would be required\
    \ for  text  in  certain  character\n            sets,  while  such  encodings\
    \ are clearly required for 7-bit\n            SMTP.)  Second, certain Content-Types\
    \ may require  different\n            types  of  transfer  encoding under different\
    \ circumstances.\n            For example, many PostScript bodies might  consist\
    \  entirely\n            of  short lines of 7-bit data and hence require little\
    \ or no\n            encoding. Other PostScript bodies  (especially  those  using\n\
    \            Level  2 PostScript's binary encoding mechanism) may only be\n  \
    \          reasonably represented using a  binary  transport  encoding.\n    \
    \        Finally,  since Content-Type is intended to be an open-ended\n      \
    \      specification  mechanism,   strict   specification   of   an\n        \
    \    association  between Content-Types and encodings effectively\n          \
    \  couples the specification of an application protocol with  a\n            specific\
    \  lower-level transport. This is not desirable since\n            the developers\
    \ of a Content-Type should not have to be aware\n            of all the transports\
    \ in use and what their limitations are.\n            NOTE ON TRANSLATING  ENCODINGS:\
    \   The  quoted-printable  and\n            base64  encodings  are  designed \
    \ so that conversion between\n            them is possible. The only  issue  that\
    \  arises  in  such  a\n            conversion  is  the handling of line breaks.\
    \ When converting\n            from  quoted-printable  to  base64  a  line  break\
    \  must  be\n            converted  into  a CRLF sequence. Similarly, a CRLF sequence\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          in base64 data should be  converted  to  a  quoted-printable\n    \
    \        line break, but ONLY when converting text data.\n            NOTE  ON\
    \  CANONICAL  ENCODING  MODEL:     There   was   some\n            confusion,\
    \  in  earlier  drafts  of this memo, regarding the\n            model for when\
    \ email data was to be converted  to  canonical\n            form  and  encoded,\
    \ and in particular how this process would\n            affect the treatment of\
    \ CRLFs, given that the representation\n            of  newlines  varies greatly\
    \ from system to system. For this\n            reason, a canonical  model  for\
    \  encoding  is  presented  as\n            Appendix H.\n            5.1  Quoted-Printable\
    \ Content-Transfer-Encoding\n            The Quoted-Printable encoding is intended\
    \ to represent  data\n            that largely consists of octets that correspond\
    \ to printable\n            characters in the ASCII character set.  It encodes\
    \ the  data\n            in  such  a way that the resulting octets are unlikely\
    \ to be\n            modified by mail transport.  If the data being  encoded \
    \ are\n            mostly  ASCII  text,  the  encoded  form of the data remains\n\
    \            largely recognizable by humans.  A body  which  is  entirely\n  \
    \          ASCII  may also be encoded in Quoted-Printable to ensure the\n    \
    \        integrity of the data should  the  message  pass  through  a\n      \
    \      character-translating, and/or line-wrapping gateway.\n            In this\
    \ encoding, octets are to be represented as determined\n            by the following\
    \ rules:\n                 Rule #1:  (General  8-bit  representation)  Any  octet,\n\
    \                 except  those  indicating a line break according to the\n  \
    \               newline convention of the canonical form  of  the  data\n    \
    \             being encoded, may be represented by an \"=\" followed by\n    \
    \             a two digit hexadecimal representation of  the  octet's\n      \
    \           value. The digits of the hexadecimal alphabet, for this\n        \
    \         purpose, are \"0123456789ABCDEF\". Uppercase letters must\n        \
    \         be\n                 used when sending hexadecimal  data,  though  a\
    \  robust\n                 implementation   may   choose  to  recognize  lowercase\n\
    \                 letters on receipt. Thus, for  example,  the  value  12\n  \
    \               (ASCII  form feed) can be represented by \"=0C\", and the\n  \
    \               value 61 (ASCII  EQUAL  SIGN)  can  be  represented  by\n    \
    \             \"=3D\".   Except  when  the  following  rules  allow  an\n    \
    \             alternative encoding, this rule is mandatory.\n                \
    \ Rule #2: (Literal representation) Octets  with  decimal\n                 values\
    \  of 33 through 60 inclusive, and 62 through 126,\n                 inclusive,\
    \ MAY be represented as the  ASCII  characters\n                 which  correspond\
    \  to  those  octets (EXCLAMATION POINT\n                 through LESS THAN, \
    \ and  GREATER  THAN  through  TILDE,\n                 respectively).\n     \
    \            Rule #3: (White Space): Octets with values of 9 and  32\n       \
    \          MAY   be  represented  as  ASCII  TAB  (HT)  and  SPACE\n         \
    \        characters,  respectively,   but   MUST   NOT   be   so\n           \
    \ RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n             \
    \    represented at the end of an encoded line. Any TAB (HT)\n               \
    \  or SPACE characters on an encoded  line  MUST  thus  be\n                 followed\
    \  on  that  line  by a printable character.  In\n                 particular,\
    \ an \"=\" at  the  end  of  an  encoded  line,\n                 indicating \
    \ a  soft line break (see rule #5) may follow\n                 one or more TAB\
    \ (HT) or SPACE characters.   It  follows\n                 that  an  octet with\
    \ value 9 or 32 appearing at the end\n                 of an encoded line must\
    \  be  represented  according  to\n                 Rule  #1.  This  rule  is\
    \  necessary  because some MTAs\n                 (Message Transport  Agents,\
    \  programs  which  transport\n                 messages from one user to another,\
    \ or perform a part of\n                 such transfers) are known to pad  lines\
    \  of  text  with\n                 SPACEs,  and  others  are known to remove\
    \ \"white space\"\n                 characters from the end  of  a  line.  Therefore,\
    \  when\n                 decoding  a  Quoted-Printable  body, any trailing white\n\
    \                 space on a line must be deleted, as it will necessarily\n  \
    \               have been added by intermediate transport agents.\n          \
    \       Rule #4 (Line Breaks): A line  break  in  a  text  body\n            \
    \     part,   independent   of  what  its  representation  is\n              \
    \   following the  canonical  representation  of  the  data\n                \
    \ being  encoded, must be represented by a (RFC 822) line\n                 break,\
    \  which  is  a  CRLF  sequence,  in  the  Quoted-\n                 Printable\
    \  encoding.  If isolated CRs and LFs, or LF CR\n                 and CR LF sequences\
    \ are allowed  to  appear  in  binary\n                 data  according  to  the\
    \  canonical  form, they must be\n                 represented   using  the  \"\
    =0D\",  \"=0A\",  \"=0A=0D\"  and\n                 \"=0D=0A\" notations respectively.\n\
    \                 Note that many implementation may elect to  encode  the\n  \
    \               local representation of various content types directly.\n    \
    \             In particular, this may apply to plain text material on\n      \
    \           systems  that  use  newline conventions other than CRLF\n        \
    \         delimiters. Such an implementation is permissible,  but\n          \
    \       the  generation  of  line breaks must be generalized to\n            \
    \     account for the case where alternate representations of\n              \
    \   newline sequences are used.\n                 Rule  #5  (Soft  Line  Breaks):\
    \  The   Quoted-Printable\n                 encoding REQUIRES that encoded lines\
    \ be no more than 76\n                 characters long. If longer lines are to\
    \ be encoded with\n                 the  Quoted-Printable encoding, 'soft' line\
    \ breaks must\n                 be used. An equal sign  as  the  last  character\
    \  on  a\n                 encoded  line indicates such a non-significant ('soft')\n\
    \                 line break in the encoded text. Thus if the \"raw\"  form\n\
    \                 of the line is a single unencoded line that says:\n        \
    \              Now's the time for all folk to come to the aid of\n           \
    \           their country.\n                 This  can  be  represented,  in \
    \ the   Quoted-Printable\n                 encoding, as\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n                      Now's\
    \ the time =\n                      for all folk to come=\n                  \
    \     to the aid of their country.\n                 This provides a mechanism\
    \ with  which  long  lines  are\n                 encoded  in  such  a  way as\
    \ to be restored by the user\n                 agent.  The 76  character  limit\
    \  does  not  count  the\n                 trailing   CRLF,   but  counts  all\
    \  other  characters,\n                 including any equal signs.\n         \
    \   Since the hyphen character (\"-\") is represented as itself in\n         \
    \   the  Quoted-Printable  encoding,  care  must  be taken, when\n           \
    \ encapsulating a quoted-printable encoded body in a multipart\n            entity,\
    \  to  ensure that the encapsulation boundary does not\n            appear anywhere\
    \ in the encoded body.  (A good strategy is to\n            choose a boundary\
    \ that includes a character sequence such as\n            \"=_\" which can never\
    \ appear in a quoted-printable body.  See\n            the   definition   of \
    \  multipart  messages  later  in  this\n            document.)\n            NOTE:\
    \  The quoted-printable encoding represents something of\n            a   compromise\
    \   between   readability  and  reliability  in\n            transport.   Bodies\
    \  encoded   with   the   quoted-printable\n            encoding will work reliably\
    \ over most mail gateways, but may\n            not work  perfectly  over  a \
    \ few  gateways,  notably  those\n            involving  translation  into  EBCDIC.\
    \  (In theory, an EBCDIC\n            gateway could decode a quoted-printable\
    \ body  and  re-encode\n            it  using  base64,  but  such gateways do\
    \ not yet exist.)  A\n            higher  level  of  confidence  is  offered \
    \ by  the   base64\n            Content-Transfer-Encoding.  A way to get reasonably\
    \ reliable\n            transport through EBCDIC gateways is to also quote the\
    \ ASCII\n            characters\n                 !\"#$@[\\]^`{|}~\n         \
    \   according to rule #1.  See Appendix B for more information.\n            Because\
    \ quoted-printable data is  generally  assumed  to  be\n            line-oriented,\
    \  it is to be expected that the breaks between\n            the lines  of  quoted\
    \  printable  data  may  be  altered  in\n            transport,  in  the  same\
    \  manner  that  plain text mail has\n            always been altered in Internet\
    \ mail  when  passing  between\n            systems   with   differing  newline\
    \  conventions.   If  such\n            alterations are likely to constitute \
    \ a  corruption  of  the\n            data,  it  is  probably  more  sensible\
    \  to  use  the base64\n            encoding rather than the quoted-printable\
    \ encoding.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            5.2  Base64 Content-Transfer-Encoding\n            The  Base64\
    \   Content-Transfer-Encoding   is   designed   to\n            represent  arbitrary\
    \  sequences  of octets in a form that is\n            not humanly readable. \
    \ The encoding and decoding  algorithms\n            are simple, but the encoded\
    \ data are consistently only about\n            33 percent larger than the unencoded\
    \ data.  This encoding is\n            based on the one used in Privacy Enhanced\
    \ Mail applications,\n            as defined in RFC 1113.   The  base64  encoding\
    \  is  adapted\n            from  RFC  1113, with one change:  base64 eliminates\
    \ the \"*\"\n            mechanism for embedded clear text.\n            A 65-character\
    \ subset of US-ASCII is used, enabling  6  bits\n            to  be  represented\
    \ per printable character. (The extra 65th\n            character, \"=\", is used\
    \  to  signify  a  special  processing\n            function.)\n            NOTE:\
    \  This subset has the important  property  that  it  is\n            represented\
    \   identically   in  all  versions  of  ISO  646,\n            including US ASCII,\
    \ and all characters  in  the  subset  are\n            also  represented  identically\
    \  in  all  versions of EBCDIC.\n            Other popular encodings, such as\
    \ the encoding  used  by  the\n            UUENCODE  utility  and the base85 encoding\
    \ specified as part\n            of Level 2 PostScript, do not share  these  properties,\
    \  and\n            thus  do  not  fulfill the portability requirements a binary\n\
    \            transport encoding for mail must meet.\n            The encoding\
    \ process represents 24-bit groups of input  bits\n            as  output  strings\
    \ of 4 encoded characters. Proceeding from\n            left  to  right,  a  24-bit\
    \  input  group   is   formed   by\n            concatenating  3  8-bit input\
    \ groups. These 24 bits are then\n            treated as 4 concatenated 6-bit\
    \ groups,  each  of  which  is\n            translated  into a single digit in\
    \ the base64 alphabet. When\n            encoding a bit stream  via  the  base64\
    \  encoding,  the  bit\n            stream  must  be  presumed  to  be  ordered\
    \  with  the most-\n            significant-bit first.  That is, the first bit\
    \ in the stream\n            will be the high-order bit in the first byte, and\
    \ the eighth\n            bit will be the low-order bit in the first byte, and\
    \ so on.\n            Each 6-bit group is used as an index into  an  array  of\
    \  64\n            printable  characters. The character referenced by the index\n\
    \            is placed in the output string. These characters, identified\n  \
    \          in  Table  1,  below,  are  selected so as to be universally\n    \
    \        representable,  and  the  set   excludes   characters   with\n      \
    \      particular  significance to SMTP (e.g., \".\", \"CR\", \"LF\") and\n  \
    \          to the encapsulation boundaries  defined  in  this  document\n    \
    \        (e.g., \"-\").\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n                            Table 1: The Base64 Alphabet\n\
    \               Value Encoding  Value  Encoding   Value  Encoding   Value\n  \
    \          Encoding\n                   0 A            17 R            34 i  \
    \          51 z\n                   1 B            18 S            35 j      \
    \      52 0\n                   2 C            19 T            36 k          \
    \  53 1\n                   3 D            20 U            37 l            54\
    \ 2\n                   4 E            21 V            38 m            55 3\n\
    \                   5 F            22 W            39 n            56 4\n    \
    \               6 G            23 X            40 o            57 5\n        \
    \           7 H            24 Y            41 p            58 6\n            \
    \       8 I            25 Z            42 q            59 7\n                \
    \   9 J            26 a            43 r            60 8\n                  10\
    \ K            27 b            44 s            61 9\n                  11 L  \
    \          28 c            45 t            62 +\n                  12 M      \
    \      29 d            46 u            63 /\n                  13 N          \
    \  30 e            47 v\n                  14 O            31 f            48\
    \ w         (pad) =\n                  15 P            32 g            49 x\n\
    \                  16 Q            33 h            50 y\n            The output\
    \ stream (encoded bytes)  must  be  represented  in\n            lines  of  no\
    \ more than 76 characters each.  All line breaks\n            or other characters\
    \ not found in Table 1 must be ignored  by\n            decoding  software.  \
    \ In  base64 data, characters other than\n            those in  Table  1,  line\
    \  breaks,  and  other  white  space\n            probably  indicate  a  transmission\
    \  error,  about  which  a\n            warning  message  or  even  a  message\
    \  rejection  might  be\n            appropriate under some circumstances.\n \
    \           Special processing is performed if fewer than  24  bits  are\n   \
    \         available  at  the  end  of  the data being encoded.  A full\n     \
    \       encoding quantum is always completed at the end of  a  body.\n       \
    \     When  fewer  than  24  input  bits are available in an input\n         \
    \   group, zero bits  are  added  (on  the  right)  to  form  an\n           \
    \ integral number of 6-bit groups.  Output character positions\n            which\
    \ are not required to represent actual  input  data  are\n            set  to\
    \  the  character  \"=\".   Since all base64 input is an\n            integral\
    \ number of octets,  only  the  following  cases  can\n            arise:  (1)\
    \  the  final  quantum  of  encoding  input  is an\n            integral multiple\
    \ of  24  bits;  here,  the  final  unit  of\n            encoded  output will\
    \ be an integral multiple of 4 characters\n            with no \"=\" padding,\
    \ (2) the final quantum of encoding input\n            is  exactly  8  bits; here,\
    \ the final unit of encoded output\n            will  be  two  characters  followed\
    \  by  two   \"=\"   padding\n            characters,  or  (3)  the final quantum\
    \ of encoding input is\n            exactly 16 bits; here, the final unit of encoded\
    \ output will\n            be three characters followed by one \"=\" padding character.\n\
    \            Care must be taken to use the proper octets for line  breaks\n  \
    \          if base64 encoding is applied directly to text material that\n    \
    \        has not been converted to  canonical  form.  In  particular,\n      \
    \      text  line  breaks  should  be converted into CRLF sequences\n        \
    \    RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n          \
    \  prior to base64 encoding. The important  thing  to  note  is\n            that\
    \ this may be done directly by the encoder rather than in\n            a prior\
    \ canonicalization step in some implementations.\n            NOTE: There is no\
    \  need  to  worry  about  quoting  apparent\n            encapsulation  boundaries\
    \  within  base64-encoded  parts  of\n            multipart entities because no\
    \ hyphen characters are used  in\n            the base64 encoding.\n         \
    \   6    Additional Optional Content- Header Fields\n            6.1  Optional\
    \ Content-ID Header Field\n            In constructing a high-level user agent,\
    \ it may be desirable\n            to   allow   one   body   to   make  reference\
    \  to  another.\n            Accordingly, bodies may be labeled  using  the  \"\
    Content-ID\"\n            header  field,  which  is  syntactically  identical\
    \  to  the\n            \"Message-ID\" header field:\n            Content-ID :=\
    \ msg-id\n            Like  the  Message-ID  values,  Content-ID  values  must\
    \  be\n            generated to be as unique as possible.\n            6.2  Optional\
    \ Content-Description Header Field\n            The ability to associate some\
    \ descriptive information with a\n            given body is often desirable. For\
    \ example, it may be useful\n            to mark an \"image\" body as \"a picture\
    \ of the  Space  Shuttle\n            Endeavor.\"    Such  text  may  be  placed\
    \  in  the  Content-\n            Description header field.\n            Content-Description\
    \ := *text\n            The description is presumed to  be  given  in  the  US-ASCII\n\
    \            character  set,  although  the  mechanism specified in [RFC-\n  \
    \          1342]  may  be  used  for  non-US-ASCII  Content-Description\n    \
    \        values.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            7    The Predefined Content-Type Values\n            This\
    \ document defines seven initial Content-Type values  and\n            an  extension\
    \  mechanism  for private or experimental types.\n            Further standard\
    \ types must  be  defined  by  new  published\n            specifications.   It\
    \ is expected that most innovation in new\n            types of mail will take\
    \ place as subtypes of the seven types\n            defined  here.   The  most\
    \  essential characteristics of the\n            seven content-types are summarized\
    \ in Appendix G.\n            7.1  The Text Content-Type\n            The text\
    \ Content-Type is intended for sending material which\n            is  principally\
    \ textual in form.  It is the default Content-\n            Type.  A \"charset\"\
    \ parameter may be  used  to  indicate  the\n            character set of the\
    \ body text.  The primary subtype of text\n            is \"plain\".  This indicates\
    \ plain (unformatted)  text.   The\n            default  Content-Type  for  Internet\
    \  mail  is  \"text/plain;\n            charset=us-ascii\".\n            Beyond\
    \ plain text, there are many formats  for  representing\n            what might\
    \ be known as \"extended text\" -- text with embedded\n            formatting\
    \ and  presentation  information.   An  interesting\n            characteristic\
    \ of many such representations is that they are\n            to some extent  readable\
    \  even  without  the  software  that\n            interprets  them.   It is useful,\
    \ then, to distinguish them,\n            at the highest level, from such unreadable\
    \ data  as  images,\n            audio,  or  text  represented in an unreadable\
    \ form.  In the\n            absence  of  appropriate  interpretation  software,\
    \  it   is\n            reasonable to show subtypes of text to the user, while\
    \ it is\n            not reasonable to do so with most nontextual data.\n    \
    \        Such formatted textual  data  should  be  represented  using\n      \
    \      subtypes  of text.  Plausible subtypes of text are typically\n        \
    \    given by the common name of the representation format, e.g.,\n          \
    \  \"text/richtext\".\n            7.1.1     The charset parameter\n         \
    \   A critical parameter that may be specified in  the  Content-\n           \
    \ Type  field  for  text  data  is the character set.  This is\n            specified\
    \ with a \"charset\" parameter, as in:\n                 Content-type: text/plain;\
    \ charset=us-ascii\n            Unlike some  other  parameter  values,  the  values\
    \  of  the\n            charset  parameter  are  NOT  case  sensitive.   The default\n\
    \            character set, which must be assumed in  the  absence  of  a\n  \
    \          charset parameter, is US-ASCII.\n            An initial list of predefined\
    \ character  set  names  can  be\n            found at the end of this section.\
    \  Additional character sets\n            may be registered with IANA  as  described\
    \  in  Appendix  F,\n            although the standardization of their use requires\
    \ the usual\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            IAB  review  and  approval.  Note  that  if  the   specified\n\
    \            character  set  includes  8-bit  data,  a  Content-Transfer-\n  \
    \          Encoding header field and a corresponding  encoding  on  the\n    \
    \        data  are  required  in  order to transmit the body via some\n      \
    \      mail transfer protocols, such as SMTP.\n            The default character\
    \ set, US-ASCII, has been the subject of\n            some  confusion  and  ambiguity\
    \  in the past.  Not only were\n            there some ambiguities in the definition,\
    \  there  have  been\n            wide  variations  in  practice.   In order to\
    \ eliminate such\n            ambiguity and variations  in  the  future,  it \
    \ is  strongly\n            recommended  that  new  user  agents  explicitly \
    \ specify  a\n            character set via the Content-Type header field.  \"\
    US-ASCII\"\n            does not indicate an arbitrary seven-bit character code,\
    \ but\n            specifies that the body uses character coding that uses  the\n\
    \            exact  correspondence  of  codes  to characters specified in\n  \
    \          ASCII.  National use variations of ISO 646 [ISO-646] are NOT\n    \
    \        ASCII   and   their  use  in  Internet  mail  is  explicitly\n      \
    \      discouraged. The omission of the ISO 646  character  set  is\n        \
    \    deliberate  in  this regard.  The character set name of \"US-\n         \
    \   ASCII\" explicitly refers  to ANSI X3.4-1986 [US-ASCII] only.\n          \
    \  The  character  set name \"ASCII\" is reserved and must not be\n          \
    \  used for any purpose.\n            NOTE: RFC 821 explicitly specifies \"ASCII\"\
    ,  and  references\n            an earlier version of the American Standard. \
    \ Insofar as one\n            of the purposes of specifying a Content-Type  and\
    \  character\n            set is to permit the receiver to unambiguously determine\
    \ how\n            the sender intended the coded  message  to  be  interpreted,\n\
    \            assuming  anything  other than \"strict ASCII\" as the default\n\
    \            would risk unintentional and  incompatible  changes  to  the\n  \
    \          semantics  of  messages  now being transmitted.    This also\n    \
    \        implies that messages containing characters coded  according\n      \
    \      to  national  variations on ISO 646, or using code-switching\n        \
    \    procedures (e.g., those of ISO 2022), as well  as  8-bit  or\n          \
    \  multiple   octet character encodings MUST use an appropriate\n            character\
    \ set  specification  to  be  consistent  with  this\n            specification.\n\
    \            The complete US-ASCII character set is listed in [US-ASCII].\n  \
    \          Note  that  the control characters including DEL (0-31, 127)\n    \
    \        have no defined meaning  apart  from  the  combination  CRLF\n      \
    \      (ASCII  values 13 and 10) indicating a new line.  Two of the\n        \
    \    characters have de facto meanings in wide use: FF (12) often\n          \
    \  means  \"start  subsequent  text  on  the  beginning of a new\n           \
    \ page\"; and TAB or HT (9) often  (though  not  always)  means\n            \"\
    move  the  cursor  to  the  next available column after the\n            current\
    \ position where the column number is a multiple of  8\n            (counting\
    \  the  first column as column 0).\" Apart from this,\n            any use of\
    \ the control characters or DEL in a body  must  be\n            part   of   a\
    \  private  agreement  between  the  sender  and\n            recipient.  Such\
    \  private  agreements  are  discouraged  and\n            should  be  replaced\
    \  by  the  other  capabilities  of  this\n            document.\n           \
    \ RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n            NOTE:\
    \   Beyond  US-ASCII,  an  enormous   proliferation   of\n            character\
    \  sets  is  possible. It is the opinion of the IETF\n            working group\
    \ that a large number of character sets is NOT a\n            good  thing.   We\
    \ would prefer to specify a single character\n            set that can be used\
    \ universally for representing all of the\n            world's   languages   in\
    \  electronic  mail.   Unfortunately,\n            existing practice in several\
    \ communities seems to  point  to\n            the  continued  use  of  multiple\
    \ character sets in the near\n            future.  For this reason, we define\
    \ names for a small number\n            of  character  sets  for  which  a  strong\
    \  constituent base\n            exists.    It is our hope  that  ISO  10646 \
    \ or  some  other\n            effort  will  eventually define a single world\
    \ character set\n            which can then be specified for use in Internet mail,\
    \ but in\n            the  advance of that definition we cannot specify the use\
    \ of\n            ISO  10646,  Unicode,  or  any  other  character  set  whose\n\
    \            definition is, as of this writing, incomplete.\n            The defined\
    \ charset values are:\n                 US-ASCII -- as defined in [US-ASCII].\n\
    \                 ISO-8859-X -- where \"X\"  is  to  be  replaced,  as\n     \
    \                 necessary,  for  the  parts of ISO-8859 [ISO-\n            \
    \          8859].  Note that the ISO 646 character  sets\n                   \
    \   have  deliberately  been  omitted in favor of\n                      their\
    \  8859  replacements,  which   are   the\n                      designated  character\
    \ sets for Internet mail.\n                      As of the publication of this\
    \  document,  the\n                      legitimate  values  for  \"X\" are the\
    \ digits 1\n                      through 9.\n            Note that the character\
    \ set used,  if  anything  other  than\n            US-ASCII,   must  always \
    \ be  explicitly  specified  in  the\n            Content-Type field.\n      \
    \      No other character set name may be  used  in  Internet  mail\n        \
    \    without  the  publication  of a formal specification and its\n          \
    \  registration with IANA as described in  Appendix  F,  or  by\n            private\
    \ agreement, in which case the character set name must\n            begin with\
    \ \"X-\".\n            Implementors are discouraged  from  defining  new  character\n\
    \            sets for mail use unless absolutely necessary.\n            The \"\
    charset\" parameter has been defined primarily  for  the\n            purpose\
    \  of  textual  data, and is described in this section\n            for that reason.\
    \   However,  it  is  conceivable  that  non-\n            textual  data might\
    \ also wish to specify a charset value for\n            some purpose, in which\
    \  case  the  same  syntax  and  values\n            should be used.\n       \
    \     In general, mail-sending  software  should  always  use  the\n         \
    \   \"lowest  common  denominator\"  character  set possible.  For\n         \
    \   example, if a body contains  only  US-ASCII  characters,  it\n           \
    \ RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n            should\
    \ be marked as being in the US-ASCII character set, not\n            ISO-8859-1,\
    \ which, like all the ISO-8859 family of character\n            sets,  is  a \
    \ superset  of  US-ASCII.   More generally, if a\n            widely-used character\
    \ set is a subset of  another  character\n            set,  and a body contains\
    \ only characters in the widely-used\n            subset, it should be labeled\
    \ as being in that  subset.  This\n            will increase the chances that\
    \ the recipient will be able to\n            view the mail correctly.\n      \
    \      7.1.2     The Text/plain subtype\n            The primary subtype of text\
    \   is  \"plain\".   This  indicates\n            plain  (unformatted)  text.\
    \  The  default  Content-Type  for\n            Internet  mail,  \"text/plain;\
    \  charset=us-ascii\",  describes\n            existing  Internet practice, that\
    \ is, it is the type of body\n            defined by RFC 822.\n            7.1.3\
    \     The Text/richtext subtype\n            In order to promote the  wider  interoperability\
    \  of  simple\n            formatted  text,  this  document defines an extremely\
    \ simple\n            subtype of \"text\", the \"richtext\" subtype.  This subtype\
    \ was\n            designed to meet the following criteria:\n                \
    \ 1.  The syntax must be extremely simple to  parse,\n                 so  that\
    \  even  teletype-oriented mail systems can\n                 easily strip away\
    \ the formatting  information  and\n                 leave only the readable text.\n\
    \                 2.  The syntax must be extensible to allow for new\n       \
    \          formatting commands that are deemed essential.\n                 3.\
    \  The capabilities must be extremely limited, to\n                 ensure  that\
    \  it  can  represent  no  more than is\n                 likely to be representable\
    \ by the  user's  primary\n                 word  processor.   While  this  limits\
    \ what can be\n                 sent, it increases the  likelihood  that  what\
    \  is\n                 sent can be properly displayed.\n                 4. \
    \ The syntax must be compatible  with  SGML,  so\n                 that,  with\
    \  an  appropriate  DTD  (Document  Type\n                 Definition, the standard\
    \ mechanism for defining  a\n                 document  type  using SGML), a general\
    \ SGML parser\n                 could be made to parse richtext.  However, despite\n\
    \                 this  compatibility,  the  syntax  should  be  far\n       \
    \          simpler than full SGML, so that no SGML  knowledge\n              \
    \   is required in order to implement it.\n            The syntax of \"richtext\"\
    \ is very simple.  It is assumed,  at\n            the  top-level,  to be in the\
    \ US-ASCII character set, unless\n            of course a different charset parameter\
    \ was specified in the\n            Content-type  field.   All  characters represent\
    \ themselves,\n            with the exception of the \"<\" character (ASCII 60),\
    \ which is\n            used   to  mark  the  beginning  of  a  formatting  command.\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          Formatting  instructions  consist  of  formatting   commands\n    \
    \        surrounded  by angle brackets (\"<>\", ASCII 60 and 62).  Each\n    \
    \        formatting command may be no  more  than  40  characters  in\n      \
    \      length,  all in US-ASCII, restricted to the alphanumeric and\n        \
    \    hyphen (\"-\") characters. Formatting commands may be preceded\n        \
    \    by  a  forward slash or solidus (\"/\", ASCII 47), making them\n        \
    \    negations, and such negations must always exist  to  balance\n          \
    \  the  initial opening commands, except as noted below.  Thus,\n            if\
    \ the formatting command \"<bold>\" appears  at  some  point,\n            there\
    \  must  later  be a \"</bold>\" to balance it.  There are\n            only three\
    \ exceptions to this \"balancing\" rule:  First,  the\n            command \"\
    <lt>\" is used to represent a literal \"<\" character.\n            Second, the\
    \ command \"<nl>\" is used to represent  a  required\n            line  break.\
    \   (Otherwise,  CRLFs in the data are treated as\n            equivalent to \
    \ a  single  SPACE  character.)   Finally,  the\n            command  \"<np>\"\
    \  is  used to represent a page break.  (NOTE:\n            The 40 character \
    \ limit  on  formatting  commands  does  not\n            include  the  \"<\"\
    ,  \">\",  or  \"/\"  characters  that might be\n            attached to such\
    \ commands.)\n            Initially defined formatting commands, not all of which\
    \ will\n            be implemented by all richtext implementations, include:\n\
    \                 Bold -- causes the subsequent text  to  be  in  a  bold\n  \
    \                    font.\n                 Italic -- causes the subsequent text\
    \ to be in an italic\n                      font.\n                 Fixed -- causes\
    \ the subsequent text to be  in  a  fixed\n                      width font.\n\
    \                 Smaller -- causes  the  subsequent  text  to  be  in  a\n  \
    \                    smaller font.\n                 Bigger -- causes the subsequent\
    \ text to be in a  bigger\n                      font.\n                 Underline\
    \  --  causes  the  subsequent   text   to   be\n                      underlined.\n\
    \                 Center -- causes the subsequent text to be centered.\n     \
    \            FlushLeft -- causes the  subsequent  text  to  be  left\n       \
    \               justified.\n                 FlushRight -- causes the subsequent\
    \ text  to  be  right\n                      justified.\n                 Indent\
    \ -- causes the subsequent text to be indented  at\n                      the\
    \ left margin.\n                 IndentRight  --  causes  the  subsequent  text\
    \  to   be\n                      indented at the right margin.\n            \
    \     Outdent -- causes the subsequent text to  be  outdented\n              \
    \        at the left margin.\n                 OutdentRight  --  causes  the \
    \ subsequent  text  to  be\n                      outdented at the right margin.\n\
    \                 SamePage -- causes the subsequent text to  be  grouped,\n  \
    \                    if possible, on one page.\n                 Subscript  --\
    \  causes  the  subsequent   text   to   be\n                      interpreted\
    \ as a subscript.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n                 Superscript  --  causes  the  subsequent  text  to  \
    \ be\n                      interpreted as a superscript.\n                 Heading\
    \ -- causes the subsequent text to be interpreted\n                      as a\
    \ page heading.\n                 Footing -- causes the subsequent text to be\
    \ interpreted\n                      as a page footing.\n                 ISO-8859-X\
    \  (for any value of X  that  is  legal  as  a\n                      \"charset\"\
    \ parameter) -- causes the subsequent text\n                      to be  interpreted\
    \  as  text  in  the  appropriate\n                      character set.\n    \
    \             US-ASCII  --  causes  the   subsequent   text   to   be\n      \
    \                interpreted as text in the US-ASCII character set.\n        \
    \         Excerpt -- causes the subsequent text to be interpreted\n          \
    \            as   a   textual   excerpt  from  another  source.\n            \
    \          Typically this will be displayed using indentation\n              \
    \        and  an  alternate font, but such decisions are up\n                \
    \      to the viewer.\n                 Paragraph  --  causes  the  subsequent\
    \   text   to   be\n                      interpreted    as   a   single   paragraph,\
    \   with\n                      appropriate  paragraph  breaks  (typically   blank\n\
    \                      space) before and after.\n                 Signature  --\
    \  causes  the  subsequent   text   to   be\n                      interpreted\
    \  as  a  \"signature\".  Some systems may\n                      wish to display\
    \ signatures in a  smaller  font  or\n                      otherwise set them\
    \ apart from the main text of the\n                      message.\n          \
    \       Comment -- causes the subsequent text to be interpreted\n            \
    \          as a comment, and hence not shown to the reader.\n                \
    \ No-op -- has no effect on the subsequent text.\n                 lt -- <lt>\
    \ is replaced by a literal \"<\" character.   No\n                      balancing\
    \ </lt> is allowed.\n                 nl -- <nl> causes a line break.  No balancing\
    \ </nl>  is\n                      allowed.\n                 np -- <np> causes\
    \ a page break.  No balancing </np>  is\n                      allowed.\n    \
    \        Each positive formatting command affects all subsequent text\n      \
    \      until  the matching negative formatting command.  Such pairs\n        \
    \    of formatting commands must be properly balanced and nested.\n          \
    \  Thus, a proper way to describe text in bold italics is:\n                 \
    \     <bold><italic>the-text</italic></bold>\n                 or, alternately,\n\
    \                      <italic><bold>the-text</bold></italic>\n              \
    \   but,  in  particular,  the  following  is  illegal\n                 richtext:\n\
    \                      <bold><italic>the-text</bold></italic>\n            NOTE:\
    \   The  nesting  requirement  for  formatting  commands\n            imposes\
    \  a  slightly  higher  burden  upon  the composers of\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            richtext  bodies,\
    \  but   potentially   simplifies   richtext\n            displayers  by  allowing\
    \  them  to be stack-based.  The main\n            goal of richtext is to be simple\
    \ enough to  make  multifont,\n            formatted  email  widely  readable,\
    \  so  that those with the\n            capability of  sending  it  will  be \
    \ able  to  do  so  with\n            confidence.   Thus  slightly  increased\
    \  complexity  in  the\n            composing software was  deemed  a  reasonable\
    \  tradeoff  for\n            simplified  reading  software.  Nonetheless, implementors\
    \ of\n            richtext  readers  are  encouraged  to  follow  the  general\n\
    \            Internet  guidelines  of being conservative in what you send\n  \
    \          and liberal in what you accept.  Those implementations  that\n    \
    \        can  do so are encouraged to deal reasonably with improperly\n      \
    \      nested richtext.\n            Implementations  must  regard  any  unrecognized\
    \  formatting\n            command  as  equivalent to \"No-op\", thus facilitating\
    \ future\n            extensions to \"richtext\".  Private extensions may be defined\n\
    \            using  formatting  commands that begin with \"X-\", by analogy\n\
    \            to Internet mail header field names.\n            It is worth noting\
    \ that no special behavior is required  for\n            the TAB (HT) character.\
    \ It is recommended, however, that, at\n            least  when  fixed-width \
    \ fonts  are  in  use,  the   common\n            semantics  of  the  TAB  (HT)\
    \  character should be observed,\n            namely that it moves to the next\
    \ column position that  is  a\n            multiple  of  8.   (In  other words,\
    \ if a TAB (HT) occurs in\n            column n, where the leftmost column is\
    \ column 0,  then  that\n            TAB   (HT)   should   be  replaced  by  8-(n\
    \  mod  8)  SPACE\n            characters.)\n            Richtext also differentiates\
    \ between \"hard\" and \"soft\"  line\n            breaks.   A line break (CRLF)\
    \ in the richtext data stream is\n            interpreted as a \"soft\" line break,\
    \  one  that  is  included\n            only for purposes of mail transport, and\
    \ is to be treated as\n            white space by richtext interpreters.  To include\
    \  a  \"hard\"\n            line  break (one that must be displayed as such),\
    \ the \"<nl>\"\n            or \"<paragraph> formatting constructs  should  be\
    \  used.  In\n            general, a soft line break should be treated as white\
    \ space,\n            but when soft line breaks immediately follow  a  <nl>  or\
    \  a\n            </paragraph>  tag they should be ignored rather than treated\n\
    \            as white space.\n            Putting all this  together,  the  following\
    \  \"text/richtext\"\n            body fragment:\n                      <bold>Now</bold>\
    \ is the time for\n                      <italic>all</italic> good men\n     \
    \                  <smaller>(and <lt>women>)</smaller> to\n                  \
    \    <ignoreme></ignoreme> come\n                      to the aid of their\n \
    \                     <nl>\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n                      beloved <nl><nl>country. <comment>\
    \ Stupid\n                      quote! </comment> -- the end\n            represents\
    \ the following  formatted  text  (which  will,  no\n            doubt,  look\
    \  cryptic  in  the  text-only  version  of  this\n            document):\n  \
    \               Now is the time for all good men (and <women>)  to\n         \
    \        come to the aid of their\n                 beloved\n                \
    \ country. -- the end\n            Richtext conformance:  A minimal richtext implementation\
    \  is\n            one  that  simply  converts \"<lt>\" to \"<\", converts CRLFs\
    \ to\n            SPACE, converts <nl> to a newline according to local newline\n\
    \            convention,  removes  everything between a <comment> command\n  \
    \          and the next balancing </comment> command, and  removes  all\n    \
    \        other  formatting  commands  (all  text  enclosed  in  angle\n      \
    \      brackets).\n            NOTE ON THE RELATIONSHIP OF RICHTEXT TO SGML: \
    \  Richtext  is\n            decidedly  not  SGML,  and  must  not  be  used to\
    \ transport\n            arbitrary SGML  documents.   Those  who  wish  to  use\
    \  SGML\n            document  types as a mail transport format must define a\
    \ new\n            text or application subtype, e.g.,  \"text/sgml-dtd-whatever\"\
    \n            or   \"application/sgml-dtd-whatever\",   depending   on   the\n\
    \            perceived readability  of  the  DTD  in  use.   Richtext  is\n  \
    \          designed  to  be  compatible  with SGML, and specifically so\n    \
    \        that it will be possible to define a richtext DTD if one  is\n      \
    \      needed.   However,  this  does not imply that arbitrary SGML\n        \
    \    can be called richtext, nor that richtext implementors  have\n          \
    \  any  need  to  understand  SGML;  the  description  in  this\n            document\
    \ is a complete definition of richtext, which is  far\n            simpler than\
    \ complete SGML.\n            NOTE ON THE INTENDED USE OF RICHTEXT:  It is recognized\
    \ that\n            implementors  of  future  mail  systems  will want rich text\n\
    \            functionality  far  beyond  that   currently   defined   for\n  \
    \          richtext.   The  intent  of  richtext is to provide a common\n    \
    \        format for expressing that functionality in a form in  which\n      \
    \      much  of  it, at least, will be understood by interoperating\n        \
    \    software.  Thus,  in  particular,  software  with  a  richer\n          \
    \  notion  of  formatted  text  than  richtext  can  still  use\n            richtext\
    \ as its basic representation, but can extend it with\n            new  formatting\
    \  commands and by hiding information specific\n            to that software \
    \ system  in  richtext  comments.   As  such\n            systems  evolve,  it\
    \  is  expected  that  the  definition of\n            richtext  will  be  further\
    \  refined  by  future   published\n            specifications,  but  richtext\
    \  as  defined  here provides a\n            platform on which evolutionary refinements\
    \ can be based.\n            IMPLEMENTATION NOTE:  In  some  environments,  it\
    \  might  be\n            impossible  to combine certain richtext formatting commands,\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          whereas in  others  they  might  be  combined  easily.   For\n    \
    \        example,  the  combination  of  <bold>  and  <italic>  might\n      \
    \      produce bold italics on systems that support such fonts, but\n        \
    \    there  exist  systems that can make text bold or italicized,\n          \
    \  but not both.  In  such  cases,  the  most  recently  issued\n            recognized\
    \ formatting command should be preferred.\n            One of the major goals\
    \ in the design of richtext was to make\n            it  so  simple  that  even\
    \  text-only mailers will implement\n            richtext-to-plain-text  translators,\
    \  thus  increasing   the\n            likelihood  that  multifont  text  will\
    \ become \"safe\" to use\n            very widely.  To demonstrate this simplicity,\
    \  an  extremely\n            simple  35-line  C program that converts richtext\
    \ input into\n            plain text output is included in Appendix D.\n     \
    \       RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n       \
    \     7.2  The Multipart Content-Type\n            In the case of multiple part\
    \ messages, in which one or  more\n            different  sets  of  data  are\
    \  combined in a single body, a\n            \"multipart\" Content-Type field\
    \ must appear in  the  entity's\n            header. The body must then contain\
    \ one or more \"body parts,\"\n            each preceded by an encapsulation boundary,\
    \ and the last one\n            followed  by  a  closing boundary.  Each part\
    \ starts with an\n            encapsulation  boundary,  and  then  contains  a\
    \  body  part\n            consisting  of   header area, a blank line, and a body\
    \ area.\n            Thus a body part is similar to an RFC 822 message in syntax,\n\
    \            but different in meaning.\n            A body part is NOT to be interpreted\
    \ as  actually  being  an\n            RFC  822  message.   To  begin  with, \
    \ NO  header fields are\n            actually required in body parts.  A body\
    \  part  that  starts\n            with  a blank line, therefore, is allowed and\
    \ is a body part\n            for which all default values are to be assumed.\
    \  In  such  a\n            case,  the  absence  of  a Content-Type header field\
    \ implies\n            that the encapsulation is plain  US-ASCII  text.   The\
    \  only\n            header  fields  that have defined meaning for body parts\
    \ are\n            those the names of which begin with \"Content-\".   All  other\n\
    \            header  fields  are  generally  to be ignored in body parts.\n  \
    \          Although  they  should  generally  be   retained   in   mail\n    \
    \        processing,  they may be discarded by gateways if necessary.\n      \
    \      Such other fields are permitted to appear in body parts  but\n        \
    \    should  not  be  depended on. \"X-\" fields may be created for\n        \
    \    experimental or private purposes, with the recognition  that\n          \
    \  the information they contain may be lost at some gateways.\n            The\
    \ distinction between an RFC 822 message and a  body  part\n            is  subtle,\
    \  but  important.  A gateway between Internet and\n            X.400 mail, for\
    \ example, must be able to tell the difference\n            between  a  body part\
    \ that contains an image and a body part\n            that contains an encapsulated\
    \ message, the body of which  is\n            an  image.   In order to represent\
    \ the latter, the body part\n            must have \"Content-Type: message\",\
    \ and its body  (after  the\n            blank  line)  must be the encapsulated\
    \ message, with its own\n            \"Content-Type: image\" header  field.  \
    \ The  use  of  similar\n            syntax facilitates the conversion of messages\
    \ to body parts,\n            and vice versa, but the distinction between the\
    \ two must  be\n            understood  by implementors.  (For the special case\
    \ in which\n            all parts actually are messages, a \"digest\" subtype\
    \ is  also\n            defined.)\n            As stated previously, each  body\
    \  part  is  preceded  by  an\n            encapsulation boundary.  The encapsulation\
    \ boundary MUST NOT\n            appear inside any of the encapsulated parts.\
    \   Thus,  it  is\n            crucial  that  the  composing  agent  be  able\
    \ to choose and\n            specify the unique boundary that will separate the\
    \ parts.\n            All present and future subtypes of the \"multipart\" type\
    \ must\n            use  an  identical  syntax.  Subtypes  may  differ  in their\n\
    \            semantics, and may impose additional restrictions on syntax,\n  \
    \          RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n    \
    \        but  must  conform  to the required syntax for the multipart\n      \
    \      type.  This requirement ensures  that  all  conformant  user\n        \
    \    agents  will  at least be able to recognize and separate the\n          \
    \  parts of any  multipart  entity,  even  of  an  unrecognized\n            subtype.\n\
    \            As stated in the definition of the Content-Transfer-Encoding\n  \
    \          field, no encoding other than \"7bit\", \"8bit\", or \"binary\" is\n\
    \            permitted for entities of type \"multipart\".   The  multipart\n\
    \            delimiters  and  header fields are always 7-bit ASCII in any\n  \
    \          case, and data within the body parts can  be  encoded  on  a\n    \
    \        part-by-part  basis,  with  Content-Transfer-Encoding fields\n      \
    \      for each appropriate body part.\n            Mail gateways, relays, and\
    \ other mail  handling  agents  are\n            commonly  known  to alter the\
    \ top-level header of an RFC 822\n            message.   In particular, they frequently\
    \  add,  remove,  or\n            reorder  header  fields.   Such  alterations\
    \  are explicitly\n            forbidden for the body part headers embedded in\
    \  the  bodies\n            of messages of type \"multipart.\"\n            7.2.1\
    \     Multipart:  The common syntax\n            All subtypes of \"multipart\"\
    \ share a common  syntax,  defined\n            in  this  section.   A simple\
    \ example of a multipart message\n            also appears in this section.  An\
    \ example of a more  complex\n            multipart message is given in Appendix\
    \ C.\n            The Content-Type field for multipart  entities requires  one\n\
    \            parameter,   \"boundary\",   which  is  used  to  specify  the\n\
    \            encapsulation  boundary.   The  encapsulation  boundary   is\n  \
    \          defined   as  a  line  consisting  entirely  of  two  hyphen\n    \
    \        characters (\"-\", decimal code 45) followed by  the  boundary\n    \
    \        parameter value from the Content-Type header field.\n            NOTE:\
    \  The hyphens are  for  rough  compatibility  with  the\n            earlier\
    \  RFC  934  method  of message encapsulation, and for\n            ease   of\
    \   searching   for   the   boundaries    in    some\n            implementations.\
    \  However, it should be noted that multipart\n            messages  are  NOT\
    \  completely  compatible  with   RFC   934\n            encapsulations;  in \
    \ particular,  they  do  not obey RFC 934\n            quoting conventions  for\
    \  embedded  lines  that  begin  with\n            hyphens.   This  mechanism\
    \  was  chosen  over  the  RFC  934\n            mechanism because the latter\
    \ causes lines to grow with  each\n            level  of  quoting.  The combination\
    \ of this growth with the\n            fact that SMTP implementations  sometimes\
    \  wrap  long  lines\n            made  the  RFC 934 mechanism unsuitable for\
    \ use in the event\n            that deeply-nested multipart structuring is ever\
    \ desired.\n            Thus, a typical multipart Content-Type  header  field\
    \  might\n            look like this:\n                 Content-Type: multipart/mixed;\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \                    boundary=gc0p4Jq0M2Yt08jU534c0p\n            This indicates\
    \ that the entity consists  of  several  parts,\n            each itself with\
    \ a structure that is syntactically identical\n            to an RFC 822 message,\
    \ except that the header area might  be\n            completely  empty,  and \
    \ that the parts are each preceded by\n            the line\n                \
    \ --gc0p4Jq0M2Yt08jU534c0p\n            Note that the  encapsulation  boundary\
    \  must  occur  at  the\n            beginning  of  a line, i.e., following a\
    \ CRLF, and that that\n            initial CRLF is considered to be part of  the\
    \  encapsulation\n            boundary  rather  than  part  of  the preceding\
    \ part.    The\n            boundary must be followed immediately either by another\
    \ CRLF\n            and the header fields for the next part, or by two CRLFs,\
    \ in\n            which case there are no header fields for the next part (and\n\
    \            it is therefore assumed to be of Content-Type text/plain).\n    \
    \        NOTE:   The  CRLF  preceding  the  encapsulation   line   is\n      \
    \      considered  part  of  the boundary so that it is possible to\n        \
    \    have a part that does not end with  a  CRLF  (line   break).\n          \
    \  Body  parts that must be considered to end with line breaks,\n            therefore,\
    \ should have two CRLFs preceding the encapsulation\n            line, the first\
    \ of which is part of the preceding body part,\n            and the  second  of\
    \  which  is  part  of  the  encapsulation\n            boundary.\n          \
    \  The requirement that the encapsulation boundary begins  with\n            a\
    \  CRLF  implies  that  the  body of a multipart entity must\n            itself\
    \ begin with a CRLF before the first encapsulation line\n            --  that\
    \  is, if the \"preamble\" area is not used, the entity\n            headers must\
    \ be followed by TWO CRLFs.  This is  indeed  how\n            such  entities\
    \  should be composed.  A tolerant mail reading\n            program, however,\
    \ may interpret a  body  of  type  multipart\n            that  begins  with \
    \ an encapsulation line NOT initiated by a\n            CRLF  as  also  being\
    \  an  encapsulation  boundary,  but   a\n            compliant  mail  sending\
    \  program  must  not  generate  such\n            entities.\n            Encapsulation\
    \  boundaries  must  not   appear   within   the\n            encapsulations,\
    \  and  must  be no longer than 70 characters,\n            not counting the two\
    \ leading hyphens.\n            The encapsulation boundary following the last\
    \ body part is a\n            distinguished  delimiter that indicates that no\
    \ further body\n            parts will follow.  Such a delimiter  is  identical\
    \  to  the\n            previous  delimiters,  with the addition of two more hyphens\n\
    \            at the end of the line:\n                 --gc0p4Jq0M2Yt08jU534c0p--\n\
    \            There appears to be room for additional information prior to\n  \
    \          the  first  encapsulation  boundary  and following the final\n    \
    \        RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n      \
    \      boundary.  These areas should generally be left  blank,  and\n        \
    \    implementations  should  ignore anything that appears before\n          \
    \  the first boundary or after the last one.\n            NOTE:  These \"preamble\"\
    \ and \"epilogue\" areas  are  not  used\n            because  of the lack of\
    \ proper typing of these parts and the\n            lack  of  clear  semantics\
    \  for  handling  these  areas   at\n            gateways, particularly X.400\
    \ gateways.\n            NOTE:  Because encapsulation boundaries must not  appear\
    \  in\n            the  body  parts  being  encapsulated,  a  user  agent  must\n\
    \            exercise care to choose a unique boundary.  The boundary  in\n  \
    \          the example above could have been the result of an algorithm\n    \
    \        designed to produce boundaries with a very  low  probability\n      \
    \      of  already  existing in the data to be encapsulated without\n        \
    \    having to prescan  the  data.   Alternate  algorithms  might\n          \
    \  result in more 'readable' boundaries for a recipient with an\n            old\
    \ user agent, but would  require  more  attention  to  the\n            possibility\
    \   that   the   boundary   might  appear  in  the\n            encapsulated \
    \ part.   The  simplest  boundary  possible   is\n            something like \"\
    ---\", with a closing boundary of \"-----\".\n            As a very simple example,\
    \ the  following  multipart  message\n            has  two  parts,  both  of \
    \ them  plain  text,  one  of them\n            explicitly typed and one of them\
    \ implicitly typed:\n                 From: Nathaniel Borenstein <nsb@bellcore.com>\n\
    \                 To:  Ned Freed <ned@innosoft.com>\n                 Subject:\
    \ Sample message\n                 MIME-Version: 1.0\n                 Content-type:\
    \ multipart/mixed; boundary=\"simple\n                 boundary\"\n          \
    \       This is the preamble.  It is to be ignored, though it\n              \
    \   is a handy place for mail composers to include an\n                 explanatory\
    \ note to non-MIME compliant readers.\n                 --simple boundary\n  \
    \               This is implicitly typed plain ASCII text.\n                 It\
    \ does NOT end with a linebreak.\n                 --simple boundary\n       \
    \          Content-type: text/plain; charset=us-ascii\n                 This is\
    \ explicitly typed plain ASCII text.\n                 It DOES end with a linebreak.\n\
    \                 --simple boundary--\n                 This is the epilogue.\
    \  It is also to be ignored.\n            The use of a Content-Type of multipart\
    \ in a body part within\n            another  multipart  entity  is explicitly\
    \ allowed.   In such\n            cases, for obvious reasons, care must  be  taken\
    \  to  ensure\n            that  each  nested  multipart  entity  must  use a\
    \ different\n            boundary delimiter. See Appendix C for an example of\
    \  nested\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            multipart entities.\n            The use of the multipart\
    \ Content-Type  with  only  a  single\n            body  part  may  be  useful\
    \  in  certain  contexts,  and  is\n            explicitly permitted.\n      \
    \      The only mandatory parameter for the multipart  Content-Type\n        \
    \    is  the  boundary  parameter,  which  consists  of  1  to 70\n          \
    \  characters from a set of characters known to be very  robust\n            through\
    \  email  gateways,  and  NOT ending with white space.\n            (If a boundary\
    \ appears to end with white  space,  the  white\n            space  must be presumed\
    \ to have been added by a gateway, and\n            should  be  deleted.)   It\
    \  is  formally  specified  by  the\n            following BNF:\n            boundary\
    \ := 0*69<bchars> bcharsnospace\n            bchars := bcharsnospace / \" \"\n\
    \            bcharsnospace :=    DIGIT / ALPHA / \"'\" / \"(\" / \")\" / \"+\"\
    \  /\n            \"_\"\n                           / \",\" / \"-\" / \".\" /\
    \ \"/\" / \":\" / \"=\" / \"?\"\n            Overall, the body of a multipart\
    \ entity may be specified  as\n            follows:\n            multipart-body\
    \ := preamble 1*encapsulation\n                           close-delimiter epilogue\n\
    \            encapsulation := delimiter CRLF body-part\n            delimiter\
    \ := CRLF \"--\" boundary   ; taken from  Content-Type\n            field.\n \
    \                                          ;   when   content-type    is\n   \
    \         multipart\n                                         ; There must be\
    \ no space\n                                         ; between \"--\" and boundary.\n\
    \            close-delimiter := delimiter \"--\" ; Again, no  space  before\n\
    \            \"--\"\n            preamble :=  *text                  ;  to  be\
    \  ignored  upon\n            receipt.\n            epilogue :=  *text       \
    \           ;  to  be  ignored  upon\n            receipt.\n            body-part\
    \ = <\"message\" as defined in RFC 822,\n                     with all header\
    \ fields optional, and with the\n                     specified delimiter not\
    \ occurring anywhere in\n                     the message body, either on a line\
    \ by itself\n                     or as a substring anywhere.  Note that the\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \                   semantics of a part differ from the semantics\n          \
    \           of a message, as described in the text.>\n            NOTE:  Conspicuously\
    \ missing from the multipart  type  is  a\n            notion  of  structured,\
    \  related body parts.  In general, it\n            seems premature to try to\
    \  standardize  interpart  structure\n            yet.  It is recommended that\
    \ those wishing to provide a more\n            structured or integrated multipart\
    \ messaging facility should\n            define   a   subtype  of  multipart \
    \ that  is  syntactically\n            identical, but  that  always  expects \
    \ the  inclusion  of  a\n            distinguished part that can be used to specify\
    \ the structure\n            and integration of the other parts,  probably  referring\
    \  to\n            them  by  their Content-ID field.  If this approach is used,\n\
    \            other implementations will not recognize  the  new  subtype,\n  \
    \          but  will  treat it as the primary subtype (multipart/mixed)\n    \
    \        and will thus be able to show the user the  parts  that  are\n      \
    \      recognized.\n            7.2.2     The Multipart/mixed (primary) subtype\n\
    \            The primary subtype for multipart, \"mixed\", is intended  for\n\
    \            use  when  the body parts are independent and intended to be\n  \
    \          displayed  serially.   Any  multipart   subtypes   that   an\n    \
    \        implementation does not recognize should be treated as being\n      \
    \      of subtype \"mixed\".\n            7.2.3     The Multipart/alternative\
    \ subtype\n            The multipart/alternative type is syntactically identical\
    \ to\n            multipart/mixed,   but  the  semantics  are  different.   In\n\
    \            particular, each of the parts is an \"alternative\" version of\n\
    \            the same information.  User agents should recognize that the\n  \
    \          content of the various parts are interchangeable.  The  user\n    \
    \        agent  should  either  choose  the  \"best\" type based on the\n    \
    \        user's environment and preferences, or offer  the  user  the\n      \
    \      available  alternatives.  In general, choosing the best type\n        \
    \    means displaying only the LAST part that can  be  displayed.\n          \
    \  This  may be used, for example, to send mail in a fancy text\n            format\
    \ in such  a  way  that  it  can  easily  be  displayed\n            anywhere:\n\
    \            From:  Nathaniel Borenstein <nsb@bellcore.com>\n            To: Ned\
    \ Freed <ned@innosoft.com>\n            Subject: Formatted text mail\n       \
    \     MIME-Version: 1.0\n            Content-Type: multipart/alternative; boundary=boundary42\n\
    \            --boundary42\n            Content-Type: text/plain; charset=us-ascii\n\
    \            ...plain text version of message goes here....\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            --boundary42\n \
    \           Content-Type: text/richtext\n            .... richtext version of\
    \ same message goes here ...\n            --boundary42\n            Content-Type:\
    \ text/x-whatever\n            .... fanciest formatted version of same  message\
    \  goes  here\n            ...\n            --boundary42--\n            In this\
    \ example, users  whose  mail  system  understood  the\n            \"text/x-whatever\"\
    \  format  would see only the fancy version,\n            while other users would\
    \ see only the richtext or plain  text\n            version, depending on the\
    \ capabilities of their system.\n            In general, user agents that  compose\
    \  multipart/alternative\n            entities  should place the body parts in\
    \ increasing order of\n            preference, that is, with the  preferred  format\
    \  last.  For\n            fancy  text,  the sending user agent should put the\
    \ plainest\n            format first and the richest format  last.   Receiving\
    \  user\n            agents  should  pick  and  display  the last format they\
    \ are\n            capable of  displaying.   In  the  case  where  one  of  the\n\
    \            alternatives  is  itself  of  type  \"multipart\" and contains\n\
    \            unrecognized sub-parts, the user agent may choose either  to\n  \
    \          show that alternative, an earlier alternative, or both.\n         \
    \   NOTE:  From an implementor's perspective, it might seem more\n           \
    \ sensible  to  reverse  this  ordering, and have the plainest\n            alternative\
    \ last.  However, placing the plainest alternative\n            first    is  \
    \  the    friendliest   possible   option   when\n            mutlipart/alternative\
    \ entities are viewed using a  non-MIME-\n            compliant mail reader. \
    \ While this approach does impose some\n            burden on  compliant  mail\
    \  readers,  interoperability  with\n            older  mail  readers was deemed\
    \ to be more important in this\n            case.\n            It may be the case\
    \  that  some  user  agents,  if  they  can\n            recognize more than one\
    \ of the formats, will prefer to offer\n            the user the choice of which\
    \ format  to  view.   This  makes\n            sense, for example, if mail includes\
    \ both a nicely-formatted\n            image version and an easily-edited text\
    \  version.   What  is\n            most  critical,  however, is that the user\
    \ not automatically\n            be shown multiple versions of the  same  data.\
    \   Either  the\n            user  should  be shown the last recognized version\
    \ or should\n            explicitly be given the choice.\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            7.2.4     The Multipart/digest\
    \ subtype\n            This document defines a \"digest\" subtype  of  the  multipart\n\
    \            Content-Type.   This  type  is  syntactically  identical  to\n  \
    \          multipart/mixed,  but  the  semantics  are  different.    In\n    \
    \        particular,  in a digest, the default Content-Type value for\n      \
    \      a   body   part   is   changed    from    \"text/plain\"    to\n      \
    \      \"message/rfc822\".   This  is  done  to allow a more readable\n      \
    \      digest format that is largely  compatible  (except  for  the\n        \
    \    quoting convention) with RFC 934.\n            A digest in this format might,\
    \  then,  look  something  like\n            this:\n            From: Moderator-Address\n\
    \            MIME-Version: 1.0\n            Subject:  Internet Digest, volume\
    \ 42\n            Content-Type: multipart/digest;\n                 boundary=\"\
    ---- next message ----\"\n            ------ next message ----\n            From:\
    \ someone-else\n            Subject: my opinion\n            ...body goes here\
    \ ...\n            ------ next message ----\n            From: someone-else-again\n\
    \            Subject: my different opinion\n            ... another body goes\
    \ here...\n            ------ next message ------\n            7.2.5     The Multipart/parallel\
    \ subtype\n            This document defines a \"parallel\" subtype of the  multipart\n\
    \            Content-Type.   This  type  is  syntactically  identical  to\n  \
    \          multipart/mixed,  but  the  semantics  are  different.    In\n    \
    \        particular,  in  a  parallel  entity,  all  of the parts are\n      \
    \      intended to be presented in parallel, i.e.,  simultaneously,\n        \
    \    on  hardware  and  software  that  are  capable of doing so.\n          \
    \  Composing agents should be aware that many mail readers will\n            lack\
    \ this capability and will show the parts serially in any\n            event.\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          7.3  The Message Content-Type\n            It is frequently desirable,\
    \ in sending mail, to  encapsulate\n            another  mail  message. For this\
    \ common operation, a special\n            Content-Type, \"message\", is defined.\
    \  The  primary  subtype,\n            message/rfc822,  has  no required parameters\
    \ in the Content-\n            Type field.  Additional subtypes, \"partial\" \
    \ and  \"External-\n            body\",  do  have  required  parameters.   These\
    \ subtypes are\n            explained below.\n            NOTE:  It has been suggested\
    \ that subtypes of message  might\n            be  defined  for  forwarded  or\
    \ rejected messages.  However,\n            forwarded and rejected messages can\
    \ be handled as  multipart\n            messages  in  which  the  first part contains\
    \ any control or\n            descriptive  information,  and  a  second  part,\
    \   of   type\n            message/rfc822,   is  the  forwarded  or  rejected\
    \  message.\n            Composing rejection and forwarding messages in  this\
    \  manner\n            will  preserve  the type information on the original message\n\
    \            and allow it to be correctly presented to the recipient, and\n  \
    \          hence is strongly encouraged.\n            As stated in the definition\
    \ of the Content-Transfer-Encoding\n            field, no encoding other than\
    \ \"7bit\", \"8bit\", or \"binary\" is\n            permitted for messages  or\
    \  parts  of  type  \"message\".  The\n            message  header  fields are\
    \ always US-ASCII in any case, and\n            data within the body can still\
    \ be encoded, in which case the\n            Content-Transfer-Encoding  header\
    \  field in the encapsulated\n            message will reflect this.  Non-ASCII\
    \ text in the headers of\n            an   encapsulated   message   can  be  specified\
    \  using  the\n            mechanisms described in [RFC-1342].\n            Mail\
    \ gateways, relays, and other mail  handling  agents  are\n            commonly\
    \  known  to alter the top-level header of an RFC 822\n            message.  \
    \ In particular, they frequently  add,  remove,  or\n            reorder  header\
    \  fields.   Such  alterations  are explicitly\n            forbidden for  the\
    \  encapsulated  headers  embedded  in  the\n            bodies of messages of\
    \ type \"message.\"\n            7.3.1     The Message/rfc822 (primary) subtype\n\
    \            A Content-Type of \"message/rfc822\" indicates that  the  body\n\
    \            contains  an encapsulated message, with the syntax of an RFC\n  \
    \          822 message.\n            7.3.2     The Message/Partial subtype\n \
    \           A subtype of message, \"partial\",  is  defined  in  order  to\n \
    \           allow  large  objects  to  be  delivered as several separate\n   \
    \         pieces  of  mail  and  automatically  reassembled   by   the\n     \
    \       receiving  user  agent.   (The  concept  is  similar  to  IP\n       \
    \     fragmentation/reassembly in the basic  Internet  Protocols.)\n         \
    \   This  mechanism  can  be  used  when  intermediate transport\n           \
    \ agents limit the size of individual  messages  that  can  be\n            sent.\
    \   Content-Type  \"message/partial\"  thus indicates that\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            the body contains\
    \ a fragment of a larger message.\n            Three parameters must be specified\
    \ in the Content-Type field\n            of  type  message/partial:  The  first,\
    \  \"id\",  is  a unique\n            identifier,  as  close  to  a  world-unique\
    \  identifier   as\n            possible,  to  be  used  to  match  the parts\
    \ together.  (In\n            general, the identifier  is  essentially  a  message-id;\
    \  if\n            placed  in  double  quotes,  it  can  be  any message-id, in\n\
    \            accordance with the BNF for  \"parameter\"  given  earlier  in\n\
    \            this  specification.)   The second, \"number\", an integer, is\n\
    \            the part number, which indicates where this part  fits  into\n  \
    \          the  sequence  of  fragments.   The  third, \"total\", another\n  \
    \          integer, is the total number of parts. This  third  subfield\n    \
    \        is  required  on  the  final  part,  and  is optional on the\n      \
    \      earlier parts. Note also that these parameters may be  given\n        \
    \    in any order.\n            Thus, part 2 of a 3-part message  may  have  either\
    \  of  the\n            following header fields:\n                 Content-Type:\
    \ Message/Partial;\n                      number=2; total=3;\n               \
    \       id=\"oc=jpbe0M2Yt4s@thumper.bellcore.com\";\n                 Content-Type:\
    \ Message/Partial;\n                      id=\"oc=jpbe0M2Yt4s@thumper.bellcore.com\"\
    ;\n                      number=2\n            But part 3 MUST specify the total\
    \ number of parts:\n                 Content-Type: Message/Partial;\n        \
    \              number=3; total=3;\n                      id=\"oc=jpbe0M2Yt4s@thumper.bellcore.com\"\
    ;\n            Note that part numbering begins with 1, not 0.\n            When\
    \ the parts of a message broken up in this manner are put\n            together,\
    \  the  result is a complete RFC 822 format message,\n            which may have\
    \ its own Content-Type header field,  and  thus\n            may contain any other\
    \ data type.\n            Message fragmentation and reassembly:  The  semantics\
    \  of  a\n            reassembled  partial  message  must  be those of the \"\
    inner\"\n            message, rather than  of  a  message  containing  the  inner\n\
    \            message.   This  makes  it  possible, for example, to send a\n  \
    \          large audio message as several partial messages,  and  still\n    \
    \        have  it  appear  to the recipient as a simple audio message\n      \
    \      rather than as an encapsulated message containing  an  audio\n        \
    \    message.   That  is,  the  encapsulation  of  the message is\n          \
    \  considered to be \"transparent\".\n            When  generating   and   reassembling\
    \   the   parts   of   a\n            message/partial  message,  the  headers\
    \  of the encapsulated\n            message must be merged with the  headers \
    \ of  the  enclosing\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            entities.  In  this  process  the  following  rules  must\
    \ be\n            observed:\n                 (1) All of the headers from the\
    \ initial  enclosing\n                 entity  (part  one),  except those that\
    \ start with\n                 \"Content-\" and \"Message-ID\", must  be  copied,\
    \  in\n                 order, to the new message.\n                 (2) Only\
    \ those headers  in  the  enclosed  message\n                 which  start with\
    \ \"Content-\" and \"Message-ID\" must\n                 be appended, in order,\
    \ to the headers of  the  new\n                 message.   Any  headers  in  the\
    \  enclosed message\n                 which do not start  with  \"Content-\" \
    \ (except  for\n                 \"Message-ID\") will be ignored.\n          \
    \       (3) All of the headers from  the  second  and  any\n                 subsequent\
    \ messages will be ignored.\n            For example, if an audio message is broken\
    \ into  two  parts,\n            the first part might look something like this:\n\
    \                 X-Weird-Header-1: Foo\n                 From: Bill@host.com\n\
    \                 To: joe@otherhost.com\n                 Subject: Audio mail\n\
    \                 Message-ID: id1@host.com\n                 MIME-Version: 1.0\n\
    \                 Content-type: message/partial;\n                      id=\"\
    ABC@host.com\";\n                      number=1; total=2\n                 X-Weird-Header-1:\
    \ Bar\n                 X-Weird-Header-2: Hello\n                 Message-ID:\
    \ anotherid@foo.com\n                 Content-type: audio/basic\n            \
    \     Content-transfer-encoding: base64\n                 ... first half of encoded\
    \ audio data goes here...\n            and the second half might look something\
    \ like this:\n                 From: Bill@host.com\n                 To: joe@otherhost.com\n\
    \                 Subject: Audio mail\n                 MIME-Version: 1.0\n  \
    \               Message-ID: id2@host.com\n                 Content-type: message/partial;\n\
    \                      id=\"ABC@host.com\"; number=2; total=2\n              \
    \   ... second half of encoded audio data goes here...\n            Then,  when\
    \  the  fragmented  message  is  reassembled,  the\n            resulting  message\
    \  to  be displayed to the user should look\n            something like this:\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \               X-Weird-Header-1: Foo\n                 From: Bill@host.com\n\
    \                 To: joe@otherhost.com\n                 Subject: Audio mail\n\
    \                 Message-ID: anotherid@foo.com\n                 MIME-Version:\
    \ 1.0\n                 Content-type: audio/basic\n                 Content-transfer-encoding:\
    \ base64\n                 ... first half of encoded audio data goes here...\n\
    \                 ... second half of encoded audio data goes here...\n       \
    \     It should be  noted  that,  because  some  message  transfer\n         \
    \   agents  may choose to automatically fragment large messages,\n           \
    \ and because such  agents  may  use  different  fragmentation\n            thresholds,\
    \  it  is  possible  that  the pieces of a partial\n            message, upon\
    \ reassembly, may prove themselves to comprise a\n            partial message.\
    \  This is explicitly permitted.\n            It should also be noted that the\
    \ inclusion of a \"References\"\n            field  in the headers of the second\
    \ and subsequent pieces of\n            a fragmented message that references the\
    \ Message-Id  on  the\n            previous  piece  may  be  of  benefit  to \
    \ mail readers that\n            understand and track references. However, the\
    \ generation  of\n            such \"References\" fields is entirely optional.\n\
    \            7.3.3     The Message/External-Body subtype\n            The external-body\
    \ subtype indicates  that  the  actual  body\n            data are not included,\
    \ but merely referenced.  In this case,\n            the  parameters  describe\
    \  a  mechanism  for  accessing  the\n            external data.\n           \
    \ When  a   message   body   or   body   part   is   of   type\n            \"\
    message/external-body\",   it  consists  of  a  header,  two\n            consecutive\
    \  CRLFs,  and  the   message   header   for   the\n            encapsulated \
    \ message.  If another pair of consecutive CRLFs\n            appears, this of\
    \ course ends  the  message  header  for  the\n            encapsulated   message.\
    \   However,  since  the  encapsulated\n            message's body is itself external,\
    \ it does NOT appear in the\n            area  that  follows.   For  example,\
    \  consider the following\n            message:\n                 Content-type:\
    \ message/external-body; access-\n                 type=local-file;\n        \
    \              name=/u/nsb/Me.gif\n                 Content-type:  image/gif\n\
    \                 THIS IS NOT REALLY THE BODY!\n            The area at the end,\
    \ which  might  be  called  the  \"phantom\n            body\", is ignored for\
    \ most external-body messages.  However,\n            it may be used to contain\
    \ auxilliary  information  for  some\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n            such  messages,  as  indeed  it  is  when\
    \ the access-type is\n            \"mail-server\".   Of  the  access-types   defined\
    \   by   this\n            document, the phantom body is used only when the access-type\n\
    \            is \"mail-server\".  In all other cases, the phantom  body  is\n\
    \            ignored.\n            The only always-mandatory  parameter  for \
    \ message/external-\n            body  is  \"access-type\";  all of the other\
    \ parameters may be\n            mandatory or optional depending on the value\
    \ of access-type.\n                 ACCESS-TYPE -- One or more case-insensitive\
    \ words,\n                 comma-separated,   indicating   supported   access\n\
    \                 mechanisms by  which  the  file  or  data  may  be\n       \
    \          obtained.  Values include, but are not limited to,\n              \
    \   \"FTP\", \"ANON-FTP\",  \"TFTP\",  \"AFS\",  \"LOCAL-FILE\",\n           \
    \      and   \"MAIL-SERVER\".  Future  values,  except  for\n                \
    \ experimental values beginning with \"X-\",  must  be\n                 registered\
    \ with IANA, as described in Appendix F .\n            In addition, the following\
    \ two parameters are  optional  for\n            ALL access-types:\n         \
    \        EXPIRATION -- The date (in the RFC 822 \"date-time\"\n              \
    \   syntax, as extended by RFC 1123 to permit 4 digits\n                 in the\
    \ date field) after which  the  existence  of\n                 the external data\
    \ is not guaranteed.\n                 SIZE -- The size (in octets)  of  the \
    \ data.   The\n                 intent  of this parameter is to help the recipient\n\
    \                 decide whether or  not  to  expend  the  necessary\n       \
    \          resources to retrieve the external data.\n                 PERMISSION\
    \ -- A field that  indicates  whether  or\n                 not it is expected\
    \ that clients might also attempt\n                 to  overwrite  the  data.\
    \   By  default,   or   if\n                 permission  is \"read\", the assumption\
    \ is that they\n                 are not, and that if the data is  retrieved \
    \ once,\n                 it  is never needed again. If PERMISSION is \"read-\n\
    \                 write\", this assumption is invalid, and any  local\n      \
    \           copy  must  be  considered  no  more than a cache.\n             \
    \    \"Read\"  and  \"Read-write\"  are  the  only  defined\n                \
    \ values of permission.\n            The precise semantics of the access-types\
    \ defined  here  are\n            described in the sections that follow.\n   \
    \         7.3.3.1  The \"ftp\" and \"tftp\" access-types\n            An access-type\
    \ of FTP or TFTP  indicates  that  the  message\n            body is accessible\
    \ as a file using the FTP [RFC-959] or TFTP\n            [RFC-783] protocols,\
    \ respectively.  For these  access-types,\n            the following additional\
    \ parameters are mandatory:\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n                 NAME -- The name of the  file  that  contains\
    \  the\n                 actual body data.\n                 SITE -- A machine\
    \  from  which  the  file  may  be\n                 obtained, using the given\
    \ protocol\n            Before the data is retrieved,  using  these  protocols,\
    \  the\n            user  will  generally need to be asked to provide a login\
    \ id\n            and a password for the machine named by the site parameter.\n\
    \            In addition, the  following  optional  parameters  may  also\n  \
    \          appear when the access-type is FTP or ANON-FTP:\n                 DIRECTORY\
    \ -- A directory from which the data named\n                 by NAME should be\
    \ retrieved.\n                 MODE  --  A  transfer  mode  for  retrieving  \
    \ the\n                 information, e.g. \"image\".\n            7.3.3.2  The\
    \ \"anon-ftp\" access-type\n            The \"anon-ftp\" access-type is identical\
    \ to the \"ftp\"  access\n            type,  except  that  the user need not be\
    \ asked to provide a\n            name and password for the specified site.  Instead,\
    \ the  ftp\n            protocol  will be used with login \"anonymous\" and a\
    \ password\n            that corresponds to the user's email address.\n      \
    \      7.3.3.3  The \"local-file\" and \"afs\" access-types\n            An access-type\
    \ of \"local-file\"  indicates  that  the  actual\n            body  is  accessible\
    \  as  a  file  on the local machine.  An\n            access-type of \"afs\"\
    \ indicates that the file  is  accessible\n            via  the  global  AFS \
    \ file  system.   In both cases, only a\n            single parameter is required:\n\
    \                 NAME -- The name of the  file  that  contains  the\n       \
    \          actual body data.\n            The following optional parameter may\
    \ be used to describe the\n            locality  of  reference  for  the data,\
    \ that is, the site or\n            sites at which the file is expected to be\
    \ visible:\n                 SITE -- A domain specifier for a machine or set of\n\
    \                 machines that are known to have access to the data\n       \
    \          file.  Asterisks may be used for wildcard matching\n              \
    \   to   a   part   of   a   domain   name,   such  as\n                 \"*.bellcore.com\"\
    , to indicate a set of machines on\n                 which the data should be\
    \ directly visible, while a\n                 single asterisk may be used  to\
    \  indicate  a  file\n                 that  is  expected  to  be  universally\
    \ available,\n                 e.g., via a global file system.\n            7.3.3.4\
    \  The \"mail-server\" access-type\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n            The \"mail-server\" access-type indicates\
    \ that the actual body\n            is  available  from  a mail server.  The mandatory\
    \ parameter\n            for this access-type is:\n                 SERVER --\
    \ The email address  of  the  mail  server\n                 from which the actual\
    \ body data can be obtained.\n            Because mail servers accept a variety\
    \  of  syntax,  some  of\n            which  is  multiline,  the full command\
    \ to be sent to a mail\n            server is not included as a parameter  on\
    \  the  content-type\n            line.   Instead,  it  may  be provided as the\
    \ \"phantom body\"\n            when  the  content-type  is  message/external-body\
    \  and  the\n            access-type is mail-server.\n            Note that  MIME\
    \  does  not  define  a  mail  server  syntax.\n            Rather,  it  allows\
    \  the  inclusion of arbitrary mail server\n            commands  in  the  phantom\
    \  body.   Implementations   should\n            include the phantom body in the\
    \ body of the message it sends\n            to the mail server address to retrieve\
    \ the relevant data.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            7.3.3.5  Examples and Further Explanations\n            With\
    \  the  emerging  possibility  of  very  wide-area   file\n            systems,\
    \  it becomes very hard to know in advance the set of\n            machines where\
    \ a  file  will  and  will  not  be  accessible\n            directly  from the\
    \ file system.  Therefore it may make sense\n            to provide both a file\
    \ name, to be tried directly,  and  the\n            name of one or more sites\
    \ from which the file is known to be\n            accessible.  An implementation\
    \ can try  to  retrieve  remote\n            files  using FTP or any other protocol,\
    \ using anonymous file\n            retrieval or prompting the user for the necessary\
    \  name  and\n            password.   If  an  external body is accessible via\
    \ multiple\n            mechanisms, the sender may include multiple  parts  of\
    \  type\n            message/external-body    within    an    entity    of   type\n\
    \            multipart/alternative.\n            However, the external-body mechanism\
    \ is not intended  to  be\n            limited  to  file  retrieval,  as  shown\
    \  by the mail-server\n            access-type.  Beyond this, one  can  imagine,\
    \  for  example,\n            using a video server for external references to\
    \ video clips.\n            If an entity is of type  \"message/external-body\"\
    ,  then  the\n            body  of  the  entity  will contain the header fields\
    \ of the\n            encapsulated message.  The body itself is to be found in\
    \ the\n            external  location.   This  means  that  if  the body of the\n\
    \            \"message/external-body\"  message  contains  two  consecutive\n\
    \            CRLFs,  everything  after  those  pairs  is  NOT part of the\n  \
    \          message itself.  For  most  message/external-body  messages,\n    \
    \        this trailing area must simply be ignored.  However, it is a\n      \
    \      convenient place for additional data that cannot be included\n        \
    \    in  the  content-type  header field.   In particular, if the\n          \
    \  \"access-type\" value is \"mail-server\", then the trailing area\n        \
    \    must  contain  commands to be sent to the mail server at the\n          \
    \  address given by NAME@SITE, where  NAME  and  SITE  are  the\n            values\
    \ of the NAME and SITE parameters, respectively.\n            The embedded message\
    \ header fields which appear in the  body\n            of the message/external-body\
    \ data can be used to declare the\n            Content-type  of  the  external\
    \  body.   Thus   a   complete\n            message/external-body  message,  referring\
    \  to a document in\n            PostScript format, might look like this:\n  \
    \               From: Whomever\n                 Subject: whatever\n         \
    \        MIME-Version: 1.0\n                 Message-ID: id1@host.com\n      \
    \           Content-Type: multipart/alternative; boundary=42\n               \
    \  --42\n                 Content-Type: message/external-body;\n             \
    \         name=\"BodyFormats.ps\";\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n                      site=\"thumper.bellcore.com\"\
    ;\n                      access-type=ANON-FTP;\n                      directory=\"\
    pub\";\n                      mode=\"image\";\n                      expiration=\"\
    Fri, 14 Jun 1991 19:13:14 -0400 (EDT)\"\n                 Content-type: application/postscript\n\
    \                 --42\n                 Content-Type: message/external-body;\n\
    \                      name=\"/u/nsb/writing/rfcs/RFC-XXXX.ps\";\n           \
    \           site=\"thumper.bellcore.com\";\n                      access-type=AFS\n\
    \                      expiration=\"Fri, 14 Jun 1991 19:13:14 -0400 (EDT)\"\n\
    \                 Content-type: application/postscript\n                 --42\n\
    \                 Content-Type: message/external-body;\n                     \
    \ access-type=mail-server\n                      server=\"listserv@bogus.bitnet\"\
    ;\n                      expiration=\"Fri, 14 Jun 1991 19:13:14 -0400 (EDT)\"\n\
    \                 Content-type: application/postscript\n                 get rfc-xxxx\
    \ doc\n                 --42--\n            Like the  message/partial  type, \
    \ the  message/external-body\n            type  is  intended to be transparent,\
    \ that is, to convey the\n            data type in the external  body  rather\
    \  than  to  convey  a\n            message  with  a body of that type.  Thus\
    \ the headers on the\n            outer and inner parts must be merged using the\
    \ same rules as\n            for  message/partial.   In  particular,  this means\
    \ that the\n            Content-type header is overridden, but the From and  Subject\n\
    \            headers are preserved.\n            Note that since the external\
    \ bodies are not  transported  as\n            mail,  they  need  not  conform\
    \ to the 7-bit and line length\n            requirements, but might in fact be\
    \  binary  files.   Thus  a\n            Content-Transfer-Encoding is not generally\
    \ necessary, though\n            it is permitted.\n            Note that the body\
    \ of a message of  type  \"message/external-\n            body\"  is  governed\
    \  by  the  basic  syntax  for  an RFC 822\n            message.   In  particular,\
    \   anything   before   the   first\n            consecutive  pair  of  CRLFs\
    \  is  header  information, while\n            anything after it is body information,\
    \ which is ignored  for\n            most access-types.\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            7.4  The Application\
    \ Content-Type\n            The \"application\" Content-Type is to be used for\
    \ data  which\n            do  not fit in any of the other categories, and particularly\n\
    \            for data to be processed by mail-based uses  of  application\n  \
    \          programs.  This is information which must be processed by an\n    \
    \        application before it is  viewable  or  usable  to  a  user.\n      \
    \      Expected  uses  for  Content-Type  application include mail-\n        \
    \    based  file  transfer,  spreadsheets,  data  for  mail-based\n          \
    \  scheduling    systems,    and    languages    for   \"active\"\n          \
    \  (computational) email.  (The latter, in particular, can pose\n            security\
    \    problems   which   should   be   understood   by\n            implementors,\
    \ and are considered in detail in the discussion\n            of the application/PostScript\
    \ content-type.)\n            For example, a meeting scheduler  might  define\
    \  a  standard\n            representation for information about proposed meeting\
    \ dates.\n            An intelligent user agent  would  use  this  information\
    \  to\n            conduct  a dialog with the user, and might then send further\n\
    \            mail based on that dialog. More generally, there  have  been\n  \
    \          several  \"active\"  messaging  languages  developed  in which\n  \
    \          programs in a suitably specialized language are sent through\n    \
    \        the   mail   and   automatically   run  in  the  recipient's\n      \
    \      environment.\n            Such  applications  may  be  defined  as  subtypes\
    \  of   the\n            \"application\"  Content-Type.   This  document  defines\
    \ three\n            subtypes: octet-stream, ODA, and PostScript.\n          \
    \  In general, the subtype of application  will  often  be  the\n            name\
    \  of  the  application  for which the data are intended.\n            This does\
    \ not mean, however, that  any  application  program\n            name  may  be\
    \ used freely as a subtype of application.  Such\n            usages  must  be\
    \  registered  with  IANA,  as  described  in\n            Appendix F.\n     \
    \       7.4.1     The Application/Octet-Stream (primary) subtype\n           \
    \ The primary subtype of application, \"octet-stream\",  may  be\n           \
    \ used  to indicate that a body contains binary data.  The set\n            of\
    \ possible parameters includes, but is not limited to:\n                 NAME\
    \ -- a suggested name for the  binary  data  if\n                 stored as a\
    \ file.\n                 TYPE -- the general type  or  category  of  binary\n\
    \                 data.   This  is  intended  as information for the\n       \
    \          human recipient  rather  than  for  any  automatic\n              \
    \   processing.\n                 CONVERSIONS -- the set  of  operations  that\
    \  have\n                 been  performed  on  the data before putting it in\n\
    \                 the mail (and before any Content-Transfer-Encoding\n       \
    \          that   might   have  been  applied).  If  multiple\n            RFC\
    \ 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n                 conversions\
    \ have occurred, they must be  separated\n                 by  commas  and  specified\
    \  in the order they were\n                 applied -- that is, the leftmost conversion\
    \   must\n                 have  occurred  first,  and conversions are undone\n\
    \                 from right  to  left.   Note  that  NO  conversion\n       \
    \          values   are   defined   by  this  document.   Any\n              \
    \   conversion values that that do not begin with \"X-\"\n                 must\
    \  be preceded by a published specification and\n                 by  registration\
    \  with  IANA,  as   described   in\n                 Appendix F.\n          \
    \       PADDING -- the number of bits of padding that were\n                 appended\
    \  to  the  bitstream comprising the actual\n                 contents to  produce\
    \  the  enclosed  byte-oriented\n                 data.  This is useful for enclosing\
    \ a bitstream in\n                 a body when the total number  of  bits  is\
    \  not  a\n                 multiple of the byte size.\n            The values\
    \  for  these  attributes  are  left  undefined  at\n            present,  but\
    \  may  require specification in the future.  An\n            example of a common\
    \ (though UNIX-specific) usage might be:\n                 Content-Type:  application/octet-stream;\n\
    \                      name=foo.tar.Z; type=tar;\n                      conversions=\"\
    x-encrypt,x-compress\"\n            However, it should be noted that the use of\
    \ such conversions\n            is  explicitly  discouraged due to a lack of portability\
    \ and\n            standardization.   The  use  of  uuencode  is   particularly\n\
    \            discouraged,   in  favor  of  the  Content-Transfer-Encoding\n  \
    \          mechanism, which is both more standardized and more portable\n    \
    \        across mail boundaries.\n            The recommended action for an implementation\
    \  that  receives\n            application/octet-stream  mail is to simply offer\
    \ to put the\n            data in a file, with any  Content-Transfer-Encoding\
    \  undone,\n            or perhaps to use it as input to a user-specified process.\n\
    \            To reduce the danger of transmitting rogue programs  through\n  \
    \          the  mail,  it  is strongly recommended that implementations\n    \
    \        NOT implement a path-search mechanism whereby  an  arbitrary\n      \
    \      program  named  in  the  Content-Type  parameter  (e.g.,  an\n        \
    \    \"interpreter=\" parameter) is found and  executed  using  the\n        \
    \    mail body as input.\n            7.4.2     The Application/PostScript subtype\n\
    \            A  Content-Type  of  \"application/postscript\"  indicates   a\n\
    \            PostScript    program.    The   language   is   defined   in\n  \
    \          [POSTSCRIPT].  It is recommended  that  Postscript  as  sent\n    \
    \        through  email  should  use  Postscript document structuring\n      \
    \      conventions if at all possible, and correctly.\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            The execution  of\
    \  general-purpose  PostScript  interpreters\n            entails   serious  \
    \ security  risks,  and  implementors  are\n            discouraged from simply\
    \ sending PostScript email  bodies  to\n            \"off-the-shelf\"  interpreters.\
    \   While it is usually safe to\n            send PostScript to a printer, where\
    \ the potential  for  harm\n            is  greatly constrained, implementors\
    \ should consider all of\n            the  following  before  they  add  interactive\
    \  display   of\n            PostScript bodies to their mail readers.\n      \
    \      The remainder of this section outlines some, though probably\n        \
    \    not  all,  of  the possible problems with sending PostScript\n          \
    \  through the mail.\n            Dangerous operations in the PostScript language\
    \ include, but\n            may  not be limited to, the PostScript operators deletefile,\n\
    \            renamefile,  filenameforall,  and  file.    File   is   only\n  \
    \          dangerous  when  applied  to  something  other than standard\n    \
    \        input or output. Implementations may also define  additional\n      \
    \      nonstandard  file operators; these may also pose a threat to\n        \
    \    security.     Filenameforall,  the  wildcard   file   search\n          \
    \  operator,  may  appear at first glance to be harmless. Note,\n            however,\
    \ that this operator  has  the  potential  to  reveal\n            information\
    \  about  what  files the recipient has access to,\n            and this  information\
    \  may  itself  be  sensitive.   Message\n            senders  should  avoid the\
    \ use of potentially dangerous file\n            operators, since these operators\
    \  are  quite  likely  to  be\n            unavailable  in secure PostScript implementations.\
    \  Message-\n            receiving and -displaying software should either  completely\n\
    \            disable  all  potentially  dangerous  file operators or take\n  \
    \          special care not to delegate any special authority to  their\n    \
    \        operation. These operators should be viewed as being done by\n      \
    \      an outside agency when  interpreting  PostScript  documents.\n        \
    \    Such  disabling  and/or  checking  should be done completely\n          \
    \  outside of the reach of the PostScript language itself; care\n            should\
    \  be  taken  to  insure  that  no  method  exists  for\n            reenabling\
    \ full-function versions of these operators.\n            The PostScript language\
    \ provides facilities for exiting  the\n            normal  interpreter,  or \
    \ server, loop. Changes made in this\n            \"outer\"  environment   are\
    \   customarily   retained   across\n            documents, and may in some cases\
    \ be retained semipermanently\n            in nonvolatile memory. The operators\
    \ associated with exiting\n            the  interpreter  loop  have the potential\
    \ to interfere with\n            subsequent document processing. As such, their\
    \  unrestrained\n            use  constitutes  a  threat  of  service denial.\
    \  PostScript\n            operators that exit the interpreter loop  include,\
    \  but  may\n            not  be  limited  to, the exitserver and startjob operators.\n\
    \            Message-sending software should not generate PostScript that\n  \
    \          depends  on  exiting  the  interpreter  loop to operate. The\n    \
    \        ability to exit  will  probably  be  unavailable  in  secure\n      \
    \      PostScript     implementations.     Message-receiving    and\n        \
    \    -displaying  software  should,  if  possible,  disable   the\n          \
    \  ability   to   make   retained  changes  to  the  PostScript\n            environment.\
    \ Eliminate the startjob and exitserver commands.\n            RFC 1341MIME: Multipurpose\
    \ Internet Mail ExtensionsJune 1992\n            If  these  commands  cannot \
    \ be eliminated, at least set the\n            password associated with them to\
    \ a hard-to-guess value.\n            PostScript provides operators for  setting\
    \  system-wide  and\n            device-specific  parameters. These parameter\
    \ settings may be\n            retained across jobs and may potentially pose \
    \ a  threat  to\n            the  correct  operation  of the interpreter.  The\
    \ PostScript\n            operators that set system and device parameters include,\
    \ but\n            may  not be limited to, the setsystemparams and setdevparams\n\
    \            operators.  Message-sending  software  should  not  generate\n  \
    \          PostScript  that  depends on the setting of system or device\n    \
    \        parameters to operate correctly. The ability  to  set  these\n      \
    \      parameters will probably be unavailable in secure PostScript\n        \
    \    implementations. Message-receiving and -displaying  software\n          \
    \  should,  if  possible,  disable the ability to change system\n            and\
    \  device  parameters.  If  these  operators   cannot   be\n            disabled,\
    \  at least set the password associated with them to\n            a hard-to-guess\
    \ value.\n            Some   PostScript   implementations   provide    nonstandard\n\
    \            facilities  for  the direct loading and execution of machine\n  \
    \          code.  Such  facilities  are  quite    obviously   open   to\n    \
    \        substantial  abuse.    Message-sending  software  should not\n      \
    \      make use of such features. Besides being  totally  hardware-\n        \
    \    specific,  they  are also likely to be unavailable in secure\n          \
    \  implementations  of  PostScript.     Message-receiving   and\n            -displaying\
    \  software  should not allow such operators to be\n            used if they exist.\n\
    \            PostScript is an extensible language, and many, if not most,\n  \
    \          implementations   of  it  provide  a  number  of  their  own\n    \
    \        extensions. This document does not deal with such extensions\n      \
    \      explicitly   since   they   constitute  an  unknown  factor.\n        \
    \    Message-sending software should not make use of  nonstandard\n          \
    \  extensions;   they  are  likely  to  be  missing  from  some\n            implementations.\
    \ Message-receiving and -displaying  software\n            should  make  sure\
    \ that any nonstandard PostScript operators\n            are secure and don't\
    \ present any kind of threat.\n            It is  possible  to  write  PostScript\
    \  that  consumes  huge\n            amounts  of various system resources. It\
    \ is also possible to\n            write PostScript programs that loop infinitely.\
    \  Both  types\n            of  programs  have  the potential to cause damage\
    \ if sent to\n            unsuspecting recipients.   Message-sending  software\
    \  should\n            avoid  the  construction and dissemination of such programs,\n\
    \            which  is  antisocial.   Message-receiving  and  -displaying\n  \
    \          software  should  provide  appropriate  mechanisms  to abort\n    \
    \        processing of a document after a reasonable amount  of  time\n      \
    \      has  elapsed. In addition, PostScript interpreters should be\n        \
    \    limited to the consumption of only a  reasonable  amount  of\n          \
    \  any given system resource.\n            Finally, bugs may  exist  in  some\
    \  PostScript  interpreters\n            which  could  possibly  be  exploited\
    \  to  gain unauthorized\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n            access to a  recipient's  system.  Apart  from\
    \  noting  this\n            possibility,  there is no specific action to take\
    \ to prevent\n            this, apart from the timely correction of such bugs\
    \  if  any\n            are found.\n            7.4.3     The Application/ODA\
    \ subtype\n            The \"ODA\" subtype of application is used to indicate\
    \ that  a\n            body  contains  information  encoded according to the Office\n\
    \            Document  Architecture  [ODA]   standards,  using  the  ODIF\n  \
    \          representation  format.   For  application/oda, the Content-\n    \
    \        Type line should also specify an attribute/value  pair  that\n      \
    \      indicates  the document application profile (DAP), using the\n        \
    \    key word \"profile\".  Thus an appropriate header field  might\n        \
    \    look like this:\n            Content-Type:  application/oda; profile=Q112\n\
    \            Consult the ODA standard [ODA] for further information.\n       \
    \     RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n         \
    \   7.5  The Image Content-Type\n            A Content-Type of \"image\" indicates\
    \ that the bodycontains an\n            image.   The subtype names the specific\
    \ image format.  These\n            names are case insensitive.  Two initial subtypes\
    \ are \"jpeg\"\n            for the JPEG format, JFIF encoding, and \"gif\" for\
    \ GIF format\n            [GIF].\n            The list of image subtypes given\
    \ here is  neither  exclusive\n            nor  exhaustive,  and  is expected\
    \ to grow as more types are\n            registered with IANA, as described in\
    \ Appendix F.\n            7.6  The Audio Content-Type\n            A Content-Type\
    \ of \"audio\" indicates that the  body  contains\n            audio  data.  \
    \ Although  there  is not yet a consensus on an\n            \"ideal\" audio format\
    \ for use  with  computers,  there  is  a\n            pressing   need   for \
    \  a   format   capable   of  providing\n            interoperable behavior.\n\
    \            The initial subtype of \"basic\" is  specified  to  meet  this\n\
    \            requirement by providing an absolutely minimal lowest common\n  \
    \          denominator  audio  format.   It  is  expected  that  richer\n    \
    \        formats for higher quality and/or lower bandwidth audio will\n      \
    \      be defined by a later document.\n            The content of the \"audio/basic\"\
    \ subtype  is  audio  encoded\n            using  8-bit ISDN u-law [PCM]. When\
    \ this subtype is present,\n            a sample rate of 8000 Hz and a single\
    \ channel is assumed.\n            7.7  The Video Content-Type\n            A\
    \ Content-Type of \"video\" indicates that the body contains a\n            time-varying-picture\
    \   image,   possibly   with   color  and\n            coordinated sound.   The\
    \  term  \"video\"  is  used  extremely\n            generically,  rather  than\
    \  with reference to any particular\n            technology or format, and is\
    \ not meant to preclude  subtypes\n            such  as animated drawings encoded\
    \ compactly.    The subtype\n            \"mpeg\" refers to video coded according\
    \ to the MPEG  standard\n            [MPEG].\n            Note  that  although\
    \  in  general  this  document   strongly\n            discourages  the  mixing\
    \ of multiple media in a single body,\n            it is recognized that many\
    \ so-called \"video\" formats include\n            a   representation  for  synchronized\
    \  audio,  and  this  is\n            explicitly permitted for subtypes of \"\
    video\".\n            7.8  Experimental Content-Type Values\n            A Content-Type\
    \ value beginning with the characters \"X-\" is a\n            private  value,\
    \  to  be  used  by consenting mail systems by\n            mutual agreement.\
    \  Any format without a rigorous and  public\n            definition  must  be\
    \ named with an \"X-\" prefix, and publicly\n            specified  values  shall\
    \  never  begin  with  \"X-\".   (Older\n            RFC 1341MIME: Multipurpose\
    \ Internet Mail ExtensionsJune 1992\n            versions  of  the  widely-used\
    \ Andrew system use the \"X-BE2\"\n            name, so new systems  should  probably\
    \  choose  a  different\n            name.)\n            In general, the use of\
    \  \"X-\"  top-level  types  is  strongly\n            discouraged.   Implementors\
    \  should  invent  subtypes of the\n            existing types whenever  possible.\
    \   The  invention  of  new\n            types   is  intended  to  be  restricted\
    \  primarily  to  the\n            development of new media types for email, \
    \ such  as  digital\n            odors  or  holography,  and  not  for  new  data\
    \  formats in\n            general. In many cases, a subtype  of  application\
    \  will  be\n            more appropriate than a new top-level type.\n       \
    \     RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n         \
    \   Summary\n            Using the MIME-Version, Content-Type, and  Content-Transfer-\n\
    \            Encoding  header  fields,  it  is  possible to include, in a\n  \
    \          standardized way, arbitrary types of data objects  with  RFC\n    \
    \        822  conformant  mail  messages.  No restrictions imposed by\n      \
    \      either RFC 821 or RFC 822 are violated, and  care  has  been\n        \
    \    taken  to  avoid  problems caused by additional restrictions\n          \
    \  imposed  by  the  characteristics  of  some  Internet   mail\n            transport\
    \  mechanisms  (see Appendix B). The \"multipart\" and\n            \"message\"\
    \  Content-Types  allow  mixing   and   hierarchical\n            structuring\
    \  of  objects  of  different  types  in  a single\n            message.  Further\
    \  Content-Types  provide   a   standardized\n            mechanism  for  tagging\
    \  messages  or  body  parts as audio,\n            image, or several other  kinds\
    \  of  data.   A  distinguished\n            parameter syntax allows further specification\
    \ of data format\n            details,  particularly  the   specification   of\
    \   alternate\n            character  sets.  Additional  optional header fields\
    \ provide\n            mechanisms for certain extensions deemed desirable  by\
    \  many\n            implementors.  Finally, a number of useful Content-Types\
    \ are\n            defined for general use by consenting user  agents,  notably\n\
    \            text/richtext, message/partial, and message/external-body.\n    \
    \        RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n      \
    \      Acknowledgements\n            This document is the result of the collective\
    \  effort  of  a\n            large  number  of  people,  at several IETF meetings,\
    \ on the\n            IETF-SMTP  and  IETF-822  mailing  lists,   and   elsewhere.\n\
    \            Although   any  enumeration  seems  doomed  to  suffer  from\n  \
    \          egregious  omissions,  the  following  are  among  the  many\n    \
    \        contributors to this effort:\n            Harald Tveit Alvestrand   \
    \    Timo Lehtinen\n            Randall Atkinson              John R. MacMillan\n\
    \            Philippe Brandon              Rick McGowan\n            Kevin Carosso\
    \                 Leo Mclaughlin\n            Uhhyung Choi                  Goli\
    \ Montaser-Kohsari\n            Cristian Constantinof         Keith Moore\n  \
    \          Mark Crispin                  Tom Moore\n            Dave Crocker \
    \                 Erik Naggum\n            Terry Crowley                 Mark\
    \ Needleman\n            Walt Daniels                  John Noerenberg\n     \
    \       Frank Dawson                  Mats Ohrman\n            Hitoshi Doi   \
    \                Julian Onions\n            Kevin Donnelly                Michael\
    \ Patton\n            Keith Edwards                 David J. Pepper\n        \
    \    Chris Eich                    Blake C. Ramsdell\n            Johnny Eriksson\
    \               Luc Rooijakkers\n            Craig Everhart                Marshall\
    \ T. Rose\n            Patrik Faeltstroem              Jonathan Rosenberg\n  \
    \          Erik E. Fair                  Jan Rynning\n            Roger Fajman\
    \                  Harri Salminen\n            Alain Fontaine                Michael\
    \ Sanderson\n            James M. Galvin               Masahiro Sekiguchi\n  \
    \          Philip Gladstone              Mark Sherman\n            Thomas Gordon\
    \                 Keld Simonsen\n            Phill Gross                   Bob\
    \ Smart\n            James Hamilton                Peter Speck\n            Steve\
    \ Hardcastle-Kille        Henry Spencer\n            David Herron            \
    \      Einar Stefferud\n            Bruce Howard                  Michael Stein\n\
    \            Bill Janssen                  Klaus Steinberger\n            Olle\
    \ Jaernefors                Peter Svanberg\n            Risto Kankkunen      \
    \         James Thompson\n            Phil Karn                     Steve Uhler\n\
    \            Alan Katz                     Stuart Vance\n            Tim Kehres\
    \                    Erik van der Poel\n            Neil Katin               \
    \     Guido van Rossum\n            Kyuho Kim                     Peter Vanderbilt\n\
    \            Anders Klemets                Greg Vaudreuil\n            John Klensin\
    \                  Ed Vielmetti\n            Valdis Kletniek               Ryan\
    \ Waldron\n            Jim Knowles                   Wally Wedel\n           \
    \ Stev Knowles                  Sven-Ove Westberg\n            Bob Kummerfeld\
    \                Brian Wideen\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n            Pekka Kytolaakso              John Wobus\n\
    \            Stellan Lagerstr.m            Glenn Wright\n            Vincent Lau\
    \                   Rayan Zachariassen\n            Donald Lindsay           \
    \     David Zimmerman\n            The authors apologize for  any  omissions \
    \ from  this  list,\n            which are certainly unintentional.\n        \
    \    RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n          \
    \  Appendix A -- Minimal MIME-Conformance\n            The mechanisms described\
    \ in this  document  are  open-ended.\n            It  is definitely not expected\
    \ that all implementations will\n            support all of the Content-Types\
    \ described,  nor  that  they\n            will  all  share  the  same extensions.\
    \  In order to promote\n            interoperability,  however,  it  is  useful\
    \  to  define  the\n            concept  of  \"MIME-conformance\" to define a\
    \ certain level of\n            implementation  that  allows  the  useful  interworking\
    \   of\n            messages  with  content that differs from US ASCII text. \
    \ In\n            this  section,  we  specify  the   requirements   for   such\n\
    \            conformance.\n            A mail user agent that is MIME-conformant\
    \ MUST:\n                 1.  Always generate a \"MIME-Version:  1.0\"  header\n\
    \                 field.\n                 2.  Recognize the Content-Transfer-Encoding\
    \ header\n                 field,  and  decode all received data encoded with\n\
    \                 either    the    quoted-printable    or     base64\n       \
    \          implementations.    Encode  any  data sent that is\n              \
    \   not in seven-bit mail-ready  representation  using\n                 one \
    \ of  these  transformations  and  include  the\n                 appropriate\
    \    Content-Transfer-Encoding    header\n                 field,  unless  the\
    \ underlying transport mechanism\n                 supports non-seven-bit data,\
    \ as SMTP does not.\n                 3.   Recognize  and  interpret  the   Content-Type\n\
    \                 header  field,  and  avoid  showing users raw data\n       \
    \          with a Content-Type field  other  than  text.   Be\n              \
    \   able  to  send  at least text/plain messages, with\n                 the character\
    \ set specified as a parameter  if  it\n                 is not US-ASCII.\n  \
    \               4.  Explicitly handle the  following  Content-Type\n         \
    \        values, to at least the following extents:\n                 Text:\n\
    \                      -- Recognize  and  display  \"text\"  mail\n          \
    \                 with the character set \"US-ASCII.\"\n                     \
    \ -- Recognize  other  character  sets  at\n                           least \
    \ to  the extent of being able\n                           to  inform  the  user\
    \  about   what\n                           character set the message uses.\n\
    \                      -- Recognize the \"ISO-8859-*\"  character\n          \
    \                 sets to the extent of being able to\n                      \
    \     display those characters  that  are\n                           common \
    \ to ISO-8859-* and US-ASCII,\n                           namely all  characters\
    \  represented\n                           by octet values 0-127.\n          \
    \            -- For unrecognized  subtypes,  show  or\n                      \
    \     offer  to  show  the user the \"raw\"\n                           version\
    \ of the data.  An ability at\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n                           least to convert \"text/richtext\"\
    \ to\n                           plain text, as shown in Appendix D,\n       \
    \                    is encouraged, but not required for\n                   \
    \        conformance.\n                 Message:\n                      --Recognize\
    \ and  display  at  least  the\n                           primary (822) encapsulation.\n\
    \                 Multipart:\n                      --   Recognize   the   primary\
    \   (mixed)\n                           subtype.    Display   all  relevant\n\
    \                           information on  the  message  level\n            \
    \               and  the body part header level and\n                        \
    \   then display or  offer  to  display\n                           each     of\
    \    the    body    parts\n                           individually.\n        \
    \              -- Recognize the \"alternative\"  subtype,\n                  \
    \         and    avoid   showing   the   user\n                           redundant\
    \         parts          of\n                           multipart/alternative\
    \ mail.\n                      -- Treat any unrecognized subtypes as if\n    \
    \                       they were \"mixed\".\n                 Application:\n\
    \                      -- Offer the ability to remove either of\n            \
    \               the  two types of Content-Transfer-\n                        \
    \   Encoding defined in  this  document\n                           and  put \
    \ the resulting information\n                           in a user file.\n    \
    \             5.  Upon encountering  any  unrecognized  Content-\n           \
    \      Type, an implementation must treat it as if it had\n                 a\
    \ Content-Type of \"application/octet-stream\"  with\n                 no  parameter\
    \  sub-arguments.  How  such  data are\n                 handled is up to  an\
    \  implementation,  but  likely\n                 options   for   handling  such\
    \  unrecognized  data\n                 include offering the user to write it\
    \ into a  file\n                 (decoded   from  its  mail  transport  format)\
    \  or\n                 offering the user to name a program to  which  the\n \
    \                decoded   data   should   be   passed   as  input.\n        \
    \         Unrecognized predefined types, which  in  a  MIME-\n               \
    \  conformant   mailer  might  still  include  audio,\n                 image,\
    \ or video, should also be  treated  in  this\n                 way.\n       \
    \     A user agent that meets the above conditions is said  to  be\n         \
    \   MIME-conformant.   The  meaning of this phrase is that it is\n           \
    \ assumed  to  be  \"safe\"  to  send  virtually  any  kind   of\n           \
    \ properly-marked  data to users of such mail systems, because\n            such\
    \ systems will at least be able  to  treat  the  data  as\n            undifferentiated\
    \  binary, and will not simply splash it onto\n            the screen of unsuspecting\
    \ users.   There is  another  sense\n            in  which  it is always \"safe\"\
    \ to send data in a format that\n            is MIME-conformant, which is that\
    \ such data will  not  break\n            or  be  broken by any known systems\
    \ that are conformant with\n            RFC 821 and RFC 822.  User agents that\
    \  are  MIME-conformant\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n            have  the  additional  guarantee  that  the\
    \ user will not be\n            shown data that were never intended to be viewed\
    \ as text.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            Appendix B -- General Guidelines For Sending Email Data\n\
    \            Internet email is not a perfect, homogeneous  system.   Mail\n  \
    \          may  become  corrupted  at several stages in its travel to a\n    \
    \        final destination. Specifically, email sent  throughout  the\n      \
    \      Internet  may  travel  across  many networking technologies.\n        \
    \    Many networking and mail technologies  do  not  support  the\n          \
    \  full   functionality   possible   in   the   SMTP  transport\n            environment.\
    \ Mail traversing these systems is likely  to  be\n            modified in such\
    \ a way that it can be transported.\n            There exist many widely-deployed\
    \ non-conformant MTAs in  the\n            Internet.  These  MTAs,  speaking \
    \ the  SMTP protocol, alter\n            messages on the fly to take advantage\
    \ of the  internal  data\n            structure  of the hosts they are implemented\
    \ on, or are just\n            plain broken.\n            The following guidelines\
    \ may be useful to anyone devising  a\n            data  format  (Content-Type)\
    \  that  will  survive the widest\n            range of  networking  technologies\
    \  and  known  broken  MTAs\n            unscathed.    Note  that  anything  encoded\
    \  in  the  base64\n            encoding will satisfy these rules, but that some\
    \  well-known\n            mechanisms,  notably  the  UNIX uuencode facility,\
    \ will not.\n            Note also that  anything  encoded  in  the  Quoted-Printable\n\
    \            encoding will survive most gateways intact, but possibly not\n  \
    \          some gateways to systems that use the EBCDIC character set.\n     \
    \            (1) Under some circumstances the encoding used for\n            \
    \     data  may change as part of normal gateway or user\n                 agent\
    \ operation. In  particular,  conversion  from\n                 base64  to  quoted-printable\
    \ and vice versa may be\n                 necessary. This may result  in  the\
    \  confusion  of\n                 CRLF  sequences  with  line  breaks  in  text\
    \ body\n                 parts.  As  such,  the  persistence  of  CRLF   as\n\
    \                 something  other  than  a line break should not be\n       \
    \          relied on.\n                 (2) Many systems may elect to represent\
    \ and  store\n                 text  data  using local newline conventions. Local\n\
    \                 newline conventions may not match the RFC822  CRLF\n       \
    \          convention -- systems are known that use plain CR,\n              \
    \   plain LF, CRLF, or counted records.  The result is\n                 that\
    \ isolated CR and LF characters  are  not  well\n                 tolerated  in\
    \    general;  they  may  be  lost  or\n                 converted to delimiters\
    \ on some systems, and hence\n                 should not be relied on.\n    \
    \             (3) TAB (HT) characters may be  misinterpreted  or\n           \
    \      may be automatically converted to variable numbers\n                 of\
    \  spaces.    This   is   unavoidable   in   some\n                 environments,\
    \ notably those not based on the ASCII\n                 character  set.  Such\
    \   conversion   is   STRONGLY\n                 DISCOURAGED,  but  it  may occur,\
    \ and mail formats\n                 should not rely on the  persistence  of \
    \ TAB  (HT)\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n                 characters.\n                 (4) Lines longer than 76\
    \ characters may be wrapped\n                 or  truncated  in some environments.\
    \ Line wrapping\n                 and line truncation are STRONGLY DISCOURAGED,\
    \  but\n                 unavoidable  in  some  cases.  Applications  which\n\
    \                 require long lines  should  somehow  differentiate\n       \
    \          between  soft and hard line breaks.  (A simple way\n              \
    \   to  do  this  is  to  use   the   quoted-printable\n                 encoding.)\n\
    \                 (5)  Trailing \"white space\" characters (SPACE, TAB\n     \
    \            (HT)) on a line may be discarded by some transport\n            \
    \     agents, while other transport agents may pad lines\n                 with\
    \  these characters so that all lines in a mail\n                 file are of\
    \ equal  length.    The  persistence  of\n                 trailing  white  space,\
    \  therefore,  should not be\n                 relied on.\n                 (6)\
    \  Many mail domains use variations on the ASCII\n                 character \
    \ set,  or  use  character  sets  such as\n                 EBCDIC which contain\
    \ most but not all of  the  US-\n                 ASCII  characters.   The  correct\
    \  translation  of\n                 characters not in the \"invariant\"  set\
    \  cannot  be\n                 depended  on across character converting gateways.\n\
    \                 For example, this  situation  is  a  problem  when\n       \
    \          sending  uuencoded  information  across BITNET, an\n              \
    \   EBCDIC system.  Similar problems can occur without\n                 crossing\
    \  a gateway, since many Internet hosts use\n                 character sets other\
    \ than ASCII  internally.   The\n                 definition  of  Printable  Strings\
    \  in  X.400 adds\n                 further restrictions in certain special cases.\
    \  In\n                 particular,  the only characters that are known to\n \
    \                be consistent  across  all  gateways  are  the  73\n        \
    \         characters  that correspond to the upper and lower\n               \
    \  case letters A-Z and a-z, the 10 digits  0-9,  and\n                 the following\
    \ eleven special characters:\n                                \"'\"  (ASCII code\
    \ 39)\n                                \"(\"  (ASCII code 40)\n              \
    \                  \")\"  (ASCII code 41)\n                                \"\
    +\"  (ASCII code 43)\n                                \",\"  (ASCII code 44)\n\
    \                                \"-\"  (ASCII code 45)\n                    \
    \            \".\"  (ASCII code 46)\n                                \"/\"  (ASCII\
    \ code 47)\n                                \":\"  (ASCII code 58)\n         \
    \                       \"=\"  (ASCII code 61)\n                             \
    \   \"?\"  (ASCII code 63)\n                 A maximally portable mail representation,\
    \ such  as\n                 the   base64  encoding,  will  confine  itself  to\n\
    \                 relatively short lines of text in which  the  only\n       \
    \          meaningful  characters  are taken from this set of\n            RFC\
    \ 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n                 73\
    \ characters.\n            Please note that the above list is NOT a list of recommended\n\
    \            practices  for  MTAs.  RFC  821  MTAs  are  prohibited  from\n  \
    \          altering the character  of  white  space  or  wrapping  long\n    \
    \        lines.   These  BAD and illegal practices are known to occur\n      \
    \      on established networks, and implementions should be  robust\n        \
    \    in dealing with the bad effects they can cause.\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            Appendix C -- A\
    \ Complex Multipart Example\n            What follows is the outline of a complex\
    \ multipart  message.\n            This  message  has five parts to be displayed\
    \ serially:  two\n            introductory  plain  text  parts,  an   embedded\
    \   multipart\n            message,  a  richtext  part, and a closing encapsulated\
    \ text\n            message  in  a  non-ASCII  character  set.    The   embedded\n\
    \            multipart message has two parts to be displayed in parallel,\n  \
    \          a picture and an audio fragment.\n                 MIME-Version: 1.0\n\
    \                 From: Nathaniel Borenstein <nsb@bellcore.com>\n            \
    \     Subject: A multipart example\n                 Content-Type: multipart/mixed;\n\
    \                      boundary=unique-boundary-1\n                 This is the\
    \ preamble area of a multipart message.\n                 Mail readers that understand\
    \ multipart format\n                 should ignore this preamble.\n          \
    \       If you are reading this text, you might want to\n                 consider\
    \ changing to a mail reader that understands\n                 how to properly\
    \ display multipart messages.\n                 --unique-boundary-1\n        \
    \         ...Some text appears here...\n                 [Note that the preceding\
    \ blank line means\n                 no header fields were given and this is text,\n\
    \                 with charset US ASCII.  It could have been\n               \
    \  done with explicit typing as in the next part.]\n                 --unique-boundary-1\n\
    \                 Content-type: text/plain; charset=US-ASCII\n               \
    \  This could have been part of the previous part,\n                 but illustrates\
    \ explicit versus implicit\n                 typing of body parts.\n         \
    \        --unique-boundary-1\n                 Content-Type: multipart/parallel;\n\
    \                      boundary=unique-boundary-2\n                 --unique-boundary-2\n\
    \                 Content-Type: audio/basic\n                 Content-Transfer-Encoding:\
    \ base64\n                 ... base64-encoded 8000 Hz single-channel\n       \
    \              u-law-format audio data goes here....\n                 --unique-boundary-2\n\
    \                 Content-Type: image/gif\n                 Content-Transfer-Encoding:\
    \ Base64\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n                 ... base64-encoded image data goes here....\n       \
    \          --unique-boundary-2--\n                 --unique-boundary-1\n     \
    \            Content-type: text/richtext\n                 This is <bold><italic>richtext.</italic></bold>\n\
    \                 <nl><nl>Isn't it\n                 <bigger><bigger>cool?</bigger></bigger>\n\
    \                 --unique-boundary-1\n                 Content-Type: message/rfc822\n\
    \                 From: (name in US-ASCII)\n                 Subject: (subject\
    \ in US-ASCII)\n                 Content-Type: Text/plain; charset=ISO-8859-1\n\
    \                 Content-Transfer-Encoding: Quoted-printable\n              \
    \   ... Additional text in ISO-8859-1 goes here ...\n                 --unique-boundary-1--\n\
    \            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n  \
    \          Appendix D -- A Simple Richtext-to-Text Translator in C\n         \
    \   One of the major goals in the design of the richtext subtype\n           \
    \ of the text Content-Type is to make formatted text so simple\n            that\
    \ even  text-only  mailers  will  implement  richtext-to-\n            plain-text\
    \  translators, thus increasing the likelihood that\n            multifont text\
    \ will become \"safe\" to use  very  widely.   To\n            demonstrate  this\
    \  simplicity,  what follows is an extremely\n            simple 44-line C program\
    \ that converts richtext  input  into\n            plain text output:\n      \
    \           #include <stdio.h>\n                 #include <ctype.h>\n        \
    \         main() {\n                     int c, i;\n                     char\
    \ token[50];\n                     while((c = getc(stdin)) != EOF) {\n       \
    \                  if (c == '<') {\n                             for (i=0; (i<49\
    \ && (c = getc(stdin)) != '>'\n                                       && c !=\
    \ EOF); ++i) {\n                                 token[i] = isupper(c) ? tolower(c)\
    \ : c;\n                             }\n                             if (c ==\
    \ EOF) break;\n                             if (c != '>') while ((c = getc(stdin))\
    \ !=\n                 '>'\n                                       && c != EOF)\
    \ {;}\n                             if (c == EOF) break;\n                   \
    \          token[i] = '\\0';\n                             if (!strcmp(token,\
    \ \"lt\")) {\n                                 putc('<', stdout);\n          \
    \                   } else if (!strcmp(token, \"nl\")) {\n                   \
    \              putc('\\n', stdout);\n                             } else if (!strcmp(token,\
    \ \"/paragraph\")) {\n                                 fputs(\"\\n\\n\", stdout);\n\
    \                             } else if (!strcmp(token, \"comment\")) {\n    \
    \                             int commct=1;\n                                \
    \ while (commct > 0) {\n                                     while ((c = getc(stdin))\
    \ != '<'\n                                      && c != EOF) ;\n             \
    \                        if (c == EOF) break;\n                              \
    \       for (i=0; (c = getc(stdin)) != '>'\n                                 \
    \       && c != EOF; ++i) {\n                                         token[i]\
    \ = isupper(c) ?\n                                          tolower(c) : c;\n\
    \                                     }\n                                    \
    \ if (c== EOF) break;\n                                     token[i] = NULL;\n\
    \                                     if (!strcmp(token, \"/comment\")) --\n \
    \                commct;\n                                     if (!strcmp(token,\
    \ \"comment\"))\n                 ++commct;\n            RFC 1341MIME: Multipurpose\
    \ Internet Mail ExtensionsJune 1992\n                                 }\n    \
    \                         } /* Ignore all other tokens */\n                  \
    \       } else if (c != '\\n') putc(c, stdout);\n                     }\n    \
    \                 putc('\\n', stdout); /* for good measure */\n              \
    \   }\n            It should be noted that one can do considerably better  than\n\
    \            this  in  displaying  richtext  data on a dumb terminal.  In\n  \
    \          particular, one can replace font information such as  \"bold\"\n  \
    \          with textual emphasis (like *this* or   _T_H_I_S_).  One can\n    \
    \        also  properly  handle  the  richtext  formatting   commands\n      \
    \      regarding  indentation, justification, and others.  However,\n        \
    \    the above program is all  that  is  necessary  in  order  to\n          \
    \  present richtext on a dumb terminal.\n            RFC 1341MIME: Multipurpose\
    \ Internet Mail ExtensionsJune 1992\n            Appendix E -- Collected Grammar\n\
    \            This appendix contains the complete BNF grammar for all  the\n  \
    \          syntax specified by this document.\n            By itself, however,\
    \ this grammar is incomplete.   It  refers\n            to  several  entities\
    \  that  are defined by RFC 822.  Rather\n            than   reproduce   those\
    \   definitions   here,   and    risk\n            unintentional  differences\
    \  between  the  two, this document\n            simply refers the  reader  to\
    \  RFC  822  for  the  remaining\n            definitions.  Wherever a term is\
    \ undefined, it refers to the\n            RFC 822 definition.\n            attribute\
    \ := token\n            body-part = <\"message\" as defined in RFC 822,\n    \
    \                 with all header fields optional, and with the\n            \
    \         specified delimiter not occurring anywhere in\n                    \
    \ the message body, either on a line by itself\n                     or as a substring\
    \ anywhere.>\n            boundary := 0*69<bchars> bcharsnospace\n           \
    \ bchars := bcharsnospace / \" \"\n            bcharsnospace :=    DIGIT / ALPHA\
    \ / \"'\" / \"(\" / \")\" / \"+\"  /\n            \"_\"\n                    \
    \       / \",\" / \"-\" / \".\" / \"/\" / \":\" / \"=\" / \"?\"\n            close-delimiter\
    \ := delimiter \"--\"\n            Content-Description := *text\n            Content-ID\
    \ := msg-id\n            Content-Transfer-Encoding  :=      \"BASE64\"     / \
    \  \"QUOTED-\n            PRINTABLE\" /\n                                    \
    \        \"8BIT\"  / \"7BIT\" /\n                                            \"\
    BINARY\"     / x-token\n            Content-Type := type \"/\" subtype *[\";\"\
    \ parameter]\n            delimiter := CRLF \"--\" boundary   ; taken from  Content-Type\n\
    \            field.\n                                           ;   when   content-type\
    \    is\n            multipart\n                                         ; There\
    \ should be no space\n                                         ; between \"--\"\
    \ and boundary.\n            encapsulation := delimiter CRLF body-part\n     \
    \       epilogue :=  *text                  ;  to  be  ignored  upon\n       \
    \     receipt.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            MIME-Version := 1*text\n            multipart-body := preamble\
    \  1*encapsulation  close-delimiter\n            epilogue\n            parameter\
    \ := attribute \"=\" value\n            preamble :=  *text                  ;\
    \  to  be  ignored  upon\n            receipt.\n            subtype := token\n\
    \            token := 1*<any CHAR except SPACE, CTLs, or tspecials>\n        \
    \    tspecials :=  \"(\" / \")\" / \"<\" / \">\" / \"@\"  ; Must be in\n     \
    \                  /  \",\" / \";\" / \":\" / \"\\\" / <\">  ; quoted-string,\n\
    \                       /  \"/\" / \"[\" / \"]\" / \"?\" / \".\"  ; to use within\n\
    \                       /  \"=\"                        ; parameter values\n \
    \           type :=            \"application\"     /  \"audio\"     ;  case-\n\
    \            insensitive\n                      / \"image\"           / \"message\"\
    \n                      / \"multipart\"  / \"text\"\n                      / \"\
    video\"           / x-token\n            value := token / quoted-string\n    \
    \        x-token := <The two characters \"X-\" followed, with no\n           \
    \            intervening white space, by any token>\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            Appendix F -- IANA\
    \ Registration Procedures\n            MIME  has  been  carefully  designed  to\
    \   have   extensible\n            mechanisms,  and  it  is  expected  that the\
    \ set of content-\n            type/subtype pairs and their associated parameters\
    \ will grow\n            significantly with time.  Several other MIME fields,\
    \ notably\n            character  set  names,  access-type   parameters   for\
    \   the\n            message/external-body  type,  conversions parameters for\
    \ the\n            application  type,  and  possibly   even   Content-Transfer-\n\
    \            Encoding  values, are likely to have new values defined over\n  \
    \          time.  In order to ensure that the set  of  such  values  is\n    \
    \        developed  in an orderly, well-specified, and public manner,\n      \
    \      MIME defines a registration process which uses the  Internet\n        \
    \    Assigned  Numbers Authority (IANA) as a central registry for\n          \
    \  such values.\n            In general, parameters in the content-type header\
    \ field  are\n            used  to convey supplemental information for various\
    \ content\n            types, and their use is defined when  the  content-type\
    \  and\n            subtype  are  defined.  New parameters should not be defined\n\
    \            as a way to introduce new functionality.\n            In  order \
    \ to  simplify  and  standardize  the  registration\n            process,  this\
    \ appendix gives templates for the registration\n            of new values with\
    \ IANA.  Each of these is given in the form\n            of  an  email  message\
    \  template,  to  be  filled  in by the\n            registering party.\n    \
    \        F.1  Registration of New Content-type/subtype Values\n            Note\
    \ that MIME is  generally  expected  to  be  extended  by\n            subtypes.\
    \   If  a  new fundamental top-level type is needed,\n            its  specification\
    \  should  be  published  as  an   RFC   or\n            submitted  in  a  form\
    \   suitable  to  become an RFC, and be\n            subject to the Internet standards\
    \ process.\n                 To:  IANA@isi.edu\n                 Subject:  Registration\
    \ of new MIME content-type/subtype\n                 MIME type name:\n       \
    \          (If the above is not an existing top-level MIME type,\n           \
    \      please explain why an existing type cannot be used.)\n                \
    \ MIME subtype name:\n                 Required parameters:\n                \
    \ Optional parameters:\n                 Encoding considerations:\n          \
    \       Security considerations:\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n                 Published specification:\n      \
    \           (The published specification must be an Internet RFC or\n        \
    \         RFC-to-be if a new top-level type is being defined, and\n          \
    \       must be a publicly available specification in any\n                 case.)\n\
    \                 Person & email address to contact for further\n            \
    \     information:\n            F.2  Registration of New Character Set Values\n\
    \                 To:  IANA@isi.edu\n                 Subject:  Registration of\
    \ new MIME character set value\n                 MIME character set name:\n  \
    \               Published specification:\n                 (The published specification\
    \ must be an Internet RFC or\n                 RFC-to-be or an international standard.)\n\
    \                 Person & email address to contact for further\n            \
    \     information:\n            F.3  Registration of New Access-type Values for\n\
    \            Message/external-body\n                 To:  IANA@isi.edu\n     \
    \            Subject:  Registration of new MIME Access-type for\n            \
    \          Message/external-body content-type\n                 MIME access-type\
    \ name:\n                 Required parameters:\n                 Optional parameters:\n\
    \                 Published specification:\n                 (The published specification\
    \ must be an Internet RFC or\n                 RFC-to-be.)\n                 Person\
    \ & email address to contact for further\n                 information:\n    \
    \        F.4  Registration of New Conversions Values for Application\n       \
    \          To:  IANA@isi.edu\n                 Subject:  Registration of new MIME\
    \ Conversions value\n                 for Application content-type\n         \
    \        MIME Conversions name:\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n                 Published specification:\n      \
    \           (The published specification must be an Internet RFC or\n        \
    \         RFC-to-be.)\n                 Person & email address to contact for\
    \ further\n                 information:\n            RFC 1341MIME: Multipurpose\
    \ Internet Mail ExtensionsJune 1992\n            Appendix G -- Summary of the\
    \ Seven Content-types\n            Content-type: text\n            Subtypes defined\
    \ by this document:  plain, richtext\n            Important Parameters: charset\n\
    \            Encoding notes: quoted-printable generally preferred  if  an\n  \
    \               encoding  is  needed and the character set is mostly an\n    \
    \             ASCII superset.\n            Security considerations:  Rich text\
    \ formats such as TeX  and\n                 Troff  often contain mechanisms for\
    \ executing arbitrary\n                 commands or file system operations, and\
    \ should  not  be\n                 used  automatically unless these security\
    \ problems have\n                 been addressed.  Even plain text  may  contain\
    \  control\n                 characters that can be used to exploit the capabilities\n\
    \                 of   \"intelligent\"   terminals   and   cause   security\n\
    \                 violations.   User  interfaces  designed to run on such\n  \
    \               terminals should be aware of and try  to  prevent  such\n    \
    \             problems.\n            ________________________________________________________________\n\
    \            Content-type: multipart\n            Subtypes defined by  this  document:\
    \    mixed,  alternative,\n                 digest, parallel.\n            Important\
    \ Parameters: boundary\n            Encoding notes: No content-transfer-encoding\
    \ is permitted.\n            ________________________________________________________________\n\
    \            Content-type: message\n            Subtypes  defined  by  this  document:\
    \    rfc822,   partial,\n                 external-body\n            Important\
    \ Parameters: id, number, total\n            Encoding notes: No content-transfer-encoding\
    \ is permitted.\n            ________________________________________________________________\n\
    \            Content-type: application\n            Subtypes  defined   by   this\
    \   document:      octet-stream,\n                 postscript, oda\n         \
    \   Important Parameters: profile\n            RFC 1341MIME: Multipurpose Internet\
    \ Mail ExtensionsJune 1992\n            Encoding notes: base64 generally preferred\
    \ for  octet-stream\n                 or other unreadable subtypes.\n        \
    \    Security considerations:  This  type  is  intended  for  the\n          \
    \  transmission  of data to be interpreted by locally-installed\n            programs.\
    \  If used,  for  example,  to  transmit  executable\n            binary  programs\
    \  or programs in general-purpose interpreted\n            languages, such as\
    \ LISP programs or  shell  scripts,  severe\n            security  problems  could\
    \  result.   In  general, authors of\n            mail-reading  agents  are  cautioned\
    \  against  giving  their\n            systems  the  power  to  execute mail-based\
    \ application data\n            without carefully  considering  the  security\
    \  implications.\n            While  it  is  certainly possible to define safe\
    \ application\n            formats and even safe interpreters for unsafe formats,\
    \  each\n            interpreter  should  be  evaluated  separately  for possible\n\
    \            security problems.\n            ________________________________________________________________\n\
    \            Content-type: image\n            Subtypes defined by this document:\
    \  jpeg, gif\n            Important Parameters: none\n            Encoding notes:\
    \ base64 generally preferred\n            ________________________________________________________________\n\
    \            Content-type: audio\n            Subtypes defined by this document:\
    \  basic\n            Important Parameters: none\n            Encoding notes:\
    \ base64 generally preferred\n            ________________________________________________________________\n\
    \            Content-type: video\n            Subtypes defined by this document:\
    \  mpeg\n            Important Parameters: none\n            Encoding notes: base64\
    \ generally preferred\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            Appendix H -- Canonical Encoding Model\n            There\
    \ was some confusion, in earlier drafts  of  this  memo,\n            regarding\
    \  the model for when email data was to be converted\n            to canonical\
    \ form and encoded, and in  particular  how  this\n            process  would\
    \ affect the treatment of CRLFs, given that the\n            representation of\
    \ newlines varies  greatly  from  system  to\n            system.   For this reason,\
    \ a canonical model for encoding is\n            presented below.\n          \
    \  The process of composing a MIME message part can be modelled\n            as\
    \  being  done in a number of steps.  Note that these steps\n            are roughly\
    \ similar to those steps used in RFC1113:\n            Step 1.  Creation of local\
    \ form.\n            The body part to be transmitted is created in  the  system's\n\
    \            native format.   The native character set is used, and where\n  \
    \          appropriate local end of line conventions are used as  well.\n    \
    \        The may be a UNIX-style text file, or a Sun raster image, or\n      \
    \      a VMS indexed file, or  audio  data  in  a  system-dependent\n        \
    \    format   stored  only  in  memory,  or  anything  else  that\n          \
    \  corresponds to the local model  for  the  representation  of\n            some\
    \ form of information.\n            Step 2.  Conversion to canonical form.\n \
    \           The entire body part,  including  \"out-of-band\"  information\n \
    \           such   as   record   lengths  and  possibly  file  attribute\n   \
    \         information, is converted to  a  universal  canonical  form.\n     \
    \       The  specific  content  type of the body part as well as its\n       \
    \     associated attributes dictate the nature  of  the  canonical\n         \
    \   form  that is used.  Conversion to the proper canonical form\n           \
    \ may involve  character  set  conversion,  transformation  of\n            audio\
    \   data,   compression,  or  various  other  operations\n            specific\
    \ to the various content types.\n            For example, in the case of text/plain\
    \ data, the  text  must\n            be  converted to a supported character set\
    \ and lines must be\n            delimited with CRLF delimiters in  accordance\
    \  with  RFC822.\n            Note  that the restriction on line lengths implied\
    \ by RFC822\n            is eliminated  if  the  next  step  employs  either \
    \ quoted-\n            printable or base64 encoding.\n            Step 3.  Apply\
    \ transfer encoding.\n            A Content-Transfer-Encoding appropriate for\
    \ this  body  part\n            is  applied.   Note  that  there  is  no  fixed\
    \ relationship\n            between the content  type  and  the  transfer  encoding.\
    \  In\n            particular,  it  may  be  appropriate  to base the choice of\n\
    \            base64 or quoted-printable  on  character  frequency  counts\n  \
    \          which are specific to a given instance of body part.\n            RFC\
    \ 1341MIME: Multipurpose Internet Mail ExtensionsJune 1992\n            Step 4.\
    \  Insertion into message.\n            The encoded object is inserted  into \
    \ a  MIME  message  with\n            appropriate body part headers and boundary\
    \ markers.\n            It is vital to note that these steps are only a model;\
    \  they\n            are  specifically  NOT  a blueprint for how an actual system\n\
    \            would be built.  In particular, the model fails  to  account\n  \
    \          for two common designs:\n                 1.  In many cases the conversion\
    \  to  a  canonical\n                 form  prior  to encoding will be subsumed\
    \ into the\n                 encoder itself, which  understands  local  formats\n\
    \                 directly.    For   example,   the   local  newline\n       \
    \          convention for text  bodyparts  might  be  carried\n              \
    \   through to the encoder itself along with knowledge\n                 of what\
    \ that format is.\n                 2.  The output of the encoders may  have \
    \ to  pass\n                 through  one  or  more  additional  steps prior to\n\
    \                 being transmitted as  a  message.   As  such,  the\n       \
    \          output  of  the  encoder may not be compliant with\n              \
    \   the formats specified by RFC822.   In  particular,\n                 once\
    \   again   it   may  be  appropriate  for  the\n                 converter's\
    \ output to  be  expressed  using  local\n                 newline conventions\
    \ rather than using the standard\n                 RFC822 CRLF delimiters.\n \
    \           Other implementation variations  are  conceivable  as  well.\n   \
    \         The  only  important  aspect  of this discussion is that the\n     \
    \       resulting messages are consistent with those produced by the\n       \
    \     model described here.\n            RFC 1341MIME: Multipurpose Internet Mail\
    \ ExtensionsJune 1992\n            References\n            [US-ASCII] Coded Character\
    \ Set--7-Bit American Standard Code\n            for Information Interchange,\
    \ ANSI X3.4-1986.\n            [ATK]  Borenstein,  Nathaniel  S.,  Multimedia\
    \  Applications\n            Development with the Andrew Toolkit, Prentice-Hall,\
    \ 1990.\n            [GIF] Graphics Interchange Format (Version 89a), Compuserve,\n\
    \            Inc., Columbus, Ohio, 1990.\n            [ISO-2022] International\
    \ Standard--Information  Processing--\n            ISO  7-bit  and  8-bit  coded\
    \ character sets--Code extension\n            techniques, ISO 2022:1986.\n   \
    \         [ISO-8859] Information Processing -- 8-bit Single-Byte Coded\n     \
    \       Graphic  Character Sets -- Part 1: Latin Alphabet No. 1, ISO\n       \
    \     8859-1:1987.  Part 2: Latin  alphabet  No.  2,  ISO  8859-2,\n         \
    \   1987.  Part 3: Latin alphabet No. 3, ISO 8859-3, 1988.  Part\n           \
    \ 4:  Latin  alphabet  No.  4,  ISO  8859-4,  1988.   Part  5:\n            Latin/Cyrillic\
    \   alphabet,  ISO  8859-5,  1988.     Part  6:\n            Latin/Arabic  alphabet,\
    \  ISO  8859-6,   1987.      Part   7:\n            Latin/Greek   alphabet,  \
    \ ISO   8859-7,   1987.     Part  8:\n            Latin/Hebrew alphabet, ISO 8859-8,\
    \ 1988.     Part  9:  Latin\n            alphabet No. 5, ISO 8859-9, 1990.\n \
    \           [ISO-646] International  Standard--Information  Processing--\n   \
    \         ISO  7-bit coded  character set for information interchange,\n     \
    \       ISO 646:1983.\n            [MPEG]  Video  Coding  Draft  Standard  ISO\
    \  11172  CD,  ISO\n            IEC/TJC1/SC2/WG11 (Motion Picture Experts Group),\
    \ May, 1991.\n            [ODA] ISO 8613;  Information  Processing:  Text  and\
    \  Office\n            System;  Office  Document Architecture (ODA) and Interchange\n\
    \            Format (ODIF), Part 1-8, 1989.\n            [PCM] CCITT, Fascicle\
    \ III.4 - Recommendation G.711,  Geneva,\n            1972, \"Pulse Code Modulation\
    \ (PCM) of Voice Frequencies\".\n            [POSTSCRIPT]  Adobe  Systems,  Inc.,\
    \   PostScript   Language\n            Reference Manual,  Addison-Wesley, 1985.\n\
    \            [X400]  Schicker, Pietro, \"Message Handling Systems, X.400\",\n\
    \            Message  Handling  Systems  and Distributed Applications, E.\n  \
    \          Stefferud, O-j. Jacobsen,  and  P.  Schicker,  eds.,  North-\n    \
    \        Holland, 1989, pp. 3-41.\n            [RFC-783]  Sollins, K.R.  TFTP\
    \ Protocol (revision 2).  June,\n            1981, MIT, RFC-783.\n           \
    \ [RFC-821]  Postel,  J.B.   Simple  Mail  Transfer  Protocol.\n            August,\
    \ 1982, USC/Information Sciences Institute, RFC-821.\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            [RFC-822]   Crocker,\
    \ D.  Standard for  the  format  of  ARPA\n            Internet  text  messages.\
    \ August, 1982, UDEL, RFC-822.\n            [RFC-934]   Rose, M.T.; Stefferud,\
    \ E.A.   Proposed  standard\n            for    message     encapsulation.  January,\
    \   1985, Delaware\n            and NMA, RFC-934.\n            [RFC-959]   Postel,\
    \  J.B.;  Reynolds,  J.K.   File  Transfer\n            Protocol.      October,\
    \   1985,   USC/Information   Sciences\n            Institute, RFC-959.\n    \
    \        [RFC-1049]   Sirbu,  M.A.   Content-Type  header  field  for\n      \
    \      Internet messages.  March, 1988, CMU,  RFC-1049.\n            [RFC-1113]\
    \   Linn,  J.   Privacy  enhancement  for  Internet\n            electronic  \
    \  mail:  Part    I  -  message  encipherment and\n            authentication\
    \ procedures.   August,  1989, IAB Privacy Task\n            Force, RFC-1113.\n\
    \            [RFC-1154]  Robinson, D.; Ullmann, R.  Encoding header field\n  \
    \          for   Internet   messages.  April,   1990,   Prime Computer,\n    \
    \        Inc., RFC-1154.\n            [RFC-1342] Moore, Keith, Representation\
    \ of Non-Ascii Text in\n            Internet   Message   Headers.   June,  1992,\
    \  University  of\n            Tennessee, RFC-1342.\n            Security Considerations\n\
    \            Security issues  are  discussed  in  Section  7.4.2  and  in\n  \
    \          Appendix  G.   Implementors should pay special attention  to\n    \
    \        the security implications of any mail content-types that can\n      \
    \      cause the remote execution of any actions in the recipient's\n        \
    \    environment.   In  such  cases,  the   discussion   of   the\n          \
    \  applicaton/postscript   content-type  in  Section  7.4.2 may\n            serve\
    \ as a model for considering  other  content-types  with\n            remote execution\
    \ capabilities.\n            RFC 1341MIME: Multipurpose Internet Mail ExtensionsJune\
    \ 1992\n            Authors' Addresses\n            For more information, the\
    \ authors of this  document  may  be\n            contacted via Internet mail:\n\
    \                                Nathaniel S. Borenstein\n                   \
    \              MRE 2D-296, Bellcore\n                                     445\
    \ South St.\n                               Morristown, NJ 07962-1910\n      \
    \                          Phone: +1 201 829 4270\n                          \
    \       Fax:  +1 201 829 7019\n                                Email: nsb@bellcore.com\n\
    \                                       Ned Freed\n                          \
    \   Innosoft International, Inc.\n                                 250 West First\
    \ Street\n                                       Suite 240\n                 \
    \                 Claremont, CA 91711\n                                Phone:\
    \  +1 714 624 7907\n                                 Fax: +1 714 621 5319\n  \
    \                              Email: ned@innosoft.com\n            RFC 1341MIME:\
    \ Multipurpose Internet Mail ExtensionsJune 1992\n            THIS PAGE INTENTIONALLY\
    \ LEFT BLANK.\n            Please discard this page and place the  following \
    \ table  of\n            contents after the title page.\n                    \
    \           Table of Contents\n            1     Introduction.......................................\
    \  1\n            2     Notations, Conventions, and Generic BNF Grammar....  3\n\
    \            3     The MIME-Version Header Field......................  5\n  \
    \          4     The Content-Type Header Field......................  6\n    \
    \        5     The Content-Transfer-Encoding Header Field......... 10\n      \
    \      5.1   Quoted-Printable Content-Transfer-Encoding......... 14\n        \
    \    5.2   Base64 Content-Transfer-Encoding................... 17\n          \
    \  6     Additional Optional Content- Header Fields......... 19\n            6.1\
    \   Optional Content-ID Header Field................... 19\n            6.2  \
    \ Optional Content-Description Header Field.......... 19\n            7     The\
    \ Predefined Content-Type Values................. 20\n            7.1   The Text\
    \ Content-Type.............................. 20\n            7.1.1 The charset\
    \ parameter.............................. 20\n            7.1.2 The Text/plain\
    \ subtype............................. 23\n            7.1.3 The Text/richtext\
    \ subtype.......................... 23\n            7.2   The Multipart Content-Type.........................\
    \ 29\n            7.2.1 Multipart:  The common syntax...................... 30\n\
    \            7.2.2 The Multipart/mixed (primary) subtype.............. 34\n  \
    \          7.2.3 The Multipart/alternative subtype.................. 34\n    \
    \        7.2.4 The Multipart/digest subtype....................... 36\n      \
    \      7.2.5 The Multipart/parallel subtype..................... 36\n        \
    \    7.3   The Message Content-Type........................... 37\n          \
    \  7.3.1 The Message/rfc822 (primary) subtype............... 37\n            7.3.2\
    \ The Message/Partial subtype........................ 37\n            7.3.3 The\
    \ Message/External-Body subtype.................. 40\n            7.4   The Application\
    \ Content-Type....................... 46\n            7.4.1 The Application/Octet-Stream\
    \ (primary) subtype..... 46\n            7.4.2 The Application/PostScript subtype.................\
    \ 47\n            7.4.3 The Application/ODA subtype........................ 50\n\
    \            7.5   The Image Content-Type............................. 51\n  \
    \          7.6   The Audio Content-Type............................. 51\n    \
    \        7.7   The Video Content-Type............................. 51\n      \
    \      7.8   Experimental Content-Type Values................... 51\n        \
    \          Summary............................................ 53\n          \
    \        Acknowledgements................................... 54\n            \
    \      Appendix A -- Minimal MIME-Conformance............. 56\n              \
    \    Appendix B -- General Guidelines For Sending Email Data59\n             \
    \     Appendix C -- A Complex Multipart Example.......... 62\n               \
    \   Appendix D -- A Simple Richtext-to-Text Translator in C64\n              \
    \    Appendix E -- Collected Grammar.................... 66\n                \
    \  Appendix F -- IANA Registration Procedures......... 68\n                  F.1\
    \  Registration of New Content-type/subtype Values..68\n                  F.2\
    \  Registration of New Character Set Values...... 69\n                  F.3  Registration\
    \ of New Access-type Values for Message/external-body69\n                  F.4\
    \  Registration of New Conversions Values for Application69\n                \
    \  Appendix G -- Summary of the Seven Content-types... 71\n                  Appendix\
    \ H -- Canonical Encoding Model............. 73\n                  References.........................................\
    \ 75\n                  Security Considerations............................ 76\n\
    \                  Authors' Addresses................................. 77\n"
