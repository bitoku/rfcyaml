Abstract This document describes the TinyMT32 Pseudorandom Number Generator (PRNG), which produces 32 bit pseudorandom unsigned integers and aims at having a simple to use and deterministic solution.
This PRNG is a small sized variant of the Mersenne Twister (MT) PRNG.
The main advantage of TinyMT32 over MT is the use of a small internal state, compatible with most target platforms that include embedded devices, while keeping reasonably good randomness that represents a significant improvement compared to the Park Miller Linear Congruential PRNG.
However, neither the TinyMT nor MT PRNG is meant to be used for cryptographic applications.
This document specifies the TinyMT32 PRNG as a specialization of the reference implementation version 1.1 (2015/04/24) by Mutsuo Saito and Makoto Matsumoto from Hiroshima University, which can be found at [TinyMT web] (the TinyMT website) and [TinyMT dev] (the GitHub site).
This specialization aims at having a simple to use and deterministic PRNG, as explained below.
However, the TinyMT32 PRNG is not meant to be used for cryptographic applications.
TinyMT is a new, small sized variant of the Mersenne Twister
(MT) PRNG introduced in 2011 [MT98].
This document focuses on the TinyMT32 variant (rather than TinyMT64) of the TinyMT PRNG, which outputs 32 bit unsigned integers.
The purpose of TinyMT is not to replace the Mersenne Twister: TinyMT has a far shorter period (2^(127) 1) than MT.
The merit of TinyMT is in the small size of the 127 bit internal state, far smaller than the 19937 bits of MT.
The outputs of TinyMT satisfy several statistical tests for non cryptographic randomness, including BigCrush in TestU01 [TestU01] and AdaptiveCrush [AdaptiveCrush], leaving it well placed for non cryptographic usage, especially given the small size of its internal state (see [TinyMT web]).
From this point of view, TinyMT32 represents a major improvement with respect to the Park Miller Linear Congruential PRNG (e.g., as specified in [RFC5170]), which suffers from several known limitations (see, for instance, [PTVF92], Section 7.1, p. 279 and [RFC8681], Appendix B).
The TinyMT32 PRNG initialization depends, among other things, on a parameter set, namely (mat1, mat2, tmat).
In order to facilitate the use of this PRNG and to make the sequence of pseudorandom numbers depend only on the seed value, this specification requires the use of a specific parameter set (see Section 2.1).
This is a major difference with respect to the implementation version 1.1 (2015/04/24), which leaves this parameter set unspecified.
Finally, the determinism of this PRNG for a given seed has been carefully checked (see Section 2.3).
This means that the same sequence of pseudorandom numbers should be generated, no matter the target execution platform and compiler, for a given initial seed value.
This determinism can be a key requirement, as is the case with [RFC8681], which normatively depends on this specification.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The TinyMT32 PRNG must be initialized with a parameter set that needs to be well chosen.
This parameter set is the first entry of the precalculated parameter sets in tinymt32dc/tinymt32dc.0.1048576.txt by Kenji Rikitake, available at [TinyMT params].
This is also the parameter set used in [KR12].
The TinyMT32 PRNG reference implementation is reproduced in Figure 1.
This is a C language implementation written for C99 [C99].
This reference implementation differs from the original source code as follows:
The original authors, who are coauthors of this document, have granted IETF the rights to publish this version with a license and copyright that are in accordance with BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
The source code initially spread over the tinymt32.h and tinymt32.c files has been merged.
The unused parts of the original source code have been removed.
This is the case of the tinymt32 init by array() alternative initialization function.
This is also the case of the period certification() function after having checked it is not required with the chosen parameter set.
The unused constants TINYMT32 MEXP and TINYMT32
The appropriate parameter set has been added to the initialization function.
The function order has been changed.
Certain internal variables have been renamed for compactness purposes.
The const qualifier has been added to the constant definitions.
The code that was dependent on the representation of negative integers by 2's complements has been replaced by a more portable version.
Tiny Mersenne Twister: only 127 bit internal state.
Derived from the reference implementation version 1.1 (2015/04/24)   by Mutsuo Saito (Hiroshima University) and Makoto Matsumoto
/ typedef struct { uint32 t status[4]; uint32 t mat1; uint32 t mat2; uint32 t tmat; }
tinymt32 t; static void tinymt32
UINT32 C(0x8f7011ee); const uint32 t
UINT32 C(0xfc78ff1f); const uint32 t
@param seed  a 32 bit unsigned integer used as a seed.
/ void tinymt32 init (tinymt32 t
TMAT PARAM; for (int i   1
(s status[(i 1) & 3]
The parameter set of this specification warrants   that none of the possible 2^^32 seeds leads to an   all zero 127 bit internal state.
Therefore, the   period certification() function of the original   TinyMT32 source code has been safely removed.
If   another parameter set is used, this function will   have to be reintroduced here.
; i < PRE LOOP; i ) {
32 bit unsigned integer r
(0 <  r < 2^32).
/ uint32 t tinymt32 generate uint32
Users should not call these functions directly.
/ const uint32 t  TINYMT32
SH0   1; const uint32 t
uint32 t x; uint32 t y;
(s status[0] & TINYMT32 MASK)
]; s status[1]   s status[2]; s status[2]
(y << TINYMT32 SH1); s status[3]
The adopted code is equivalent to the original code   but does not depend on the representation of negative   integers by 2's complements.
It is therefore more   portable but includes an if branch, which may slow   down the generation speed.
/ if (y & 1) { s status[1]
t tinymt32 temper (tinymt32 t  s) { uint32 t t0, t1; t0   s status[3]; t1   s
TINYMT32 SH8); t0 ^  t1; /
;   The adopted code is equivalent to the original code   but does not depend on the representation of negative   integers by 2's complements.
It is therefore more   portable but includes an if branch, which may slow   down the generation speed.
/ if (t1 & 1)
This PRNG MUST first be initialized with the following function: void tinymt32 init (tinymt32 t  s, uint32 t seed); It takes as input a 32 bit unsigned integer used as a seed (note that value 0 is permitted by TinyMT32).
This function also takes as input a pointer to an instance of a tinymt32 t structure that needs to be allocated by the caller but is left uninitialized.
This structure will then be updated by the various TinyMT32 functions in order to keep the internal state of the PRNG.
The use of this structure admits several instances of this PRNG to be used in parallel, each of them having its own instance of the structure.
Then, each time a new 32 bit pseudorandom unsigned integer between 0 and 2^(32) 1 inclusive is needed, the following function is used: uint32 t tinymt32 generate uint32
(tinymt32 t   s); Of course, the tinymt32 t structure must be left unchanged by the caller between successive calls to this function.
Specific Implementation Validation and Deterministic Behavior For a given seed, PRNG determinism can be a requirement (e.g., with [RFC8681]).
Consequently, any implementation of the TinyMT32 PRNG in line with this specification MUST have the same output as that provided by the reference implementation of Figure 1.
In order to increase the compliancy confidence, this document proposes the following criteria.
Using a seed value of 1, the first 50 values returned by tinymt32 generate uint32(s) as 32 bit unsigned integers are equal to the values provided in Figure 2, which are to be read line by line.
Note that these values come from the tinymt/ check32.out.txt file provided by the PRNG authors to validate implementations of TinyMT32 as part of the MersenneTwister Lab/TinyMT GitHub repository.
3591001365 3820442102 2114400566 2196103051 2783359912
881558334 4207026366 3690273640 3240535687 2921447122 3984931427
149132008 2547770827 4064042525 4078297538 2057335507
622384752 2041665899 2193913817 1080849512   33160901
First 50 decimal values (to be read per line) returned by tinymt32 generate uint32(s) as 32 bit unsigned integers, with a seed In particular,
the deterministic behavior of the Figure 1 source code has been checked across several platforms: high end laptops running
64 bit Mac OS X and Linux/Ubuntu; a board featuring a 32 bit ARM Cortex A15 and running 32 bit Linux/Ubuntu; several embedded cards featuring either an ARM Cortex M0 , a Cortex M3, or a Cortex M4 32 bit microcontroller, all of them running RIOT [Baccelli18]; two low end embedded cards featuring either a 16 bit microcontroller (TI MSP430) or an 8 bit microcontroller (Arduino ATMEGA2560), both of them running RIOT.
This specification only outputs 32 bit unsigned pseudorandom numbers and does not try to map this output to a smaller integer range (e.g., between 10 and 49 inclusive).
If a specific use case needs such a mapping, it will have to provide its own function.
In that case, if PRNG determinism is also required, the use of a floating point (single or double precision) to perform this mapping should probably be avoided, as these calculations may lead to different rounding errors across different target platforms.
Great care should also be taken to not introduce biases in the randomness of the mapped output (which may be the case with some mapping algorithms) incompatible with the use case requirements.
The details of how to perform such a mapping are out of scope of this document.
The authors do not believe the present specification generates specific security risks per se.
However, the TinyMT and MT PRNG must not be used for cryptographic applications.
This document has no IANA actions.
