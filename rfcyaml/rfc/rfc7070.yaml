- contents:
  - '                An Architecture for Reputation Reporting

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a general architecture for a reputation-based\n
    \  service, allowing one to request reputation-related data over the\n   Internet,
    where \"reputation\" refers to predictions or expectations\n   about an entity
    or an identifier such as a domain name.  The document\n   roughly follows the
    recommendations of RFC 4101 for describing a\n   protocol model.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7070.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Overview ........................................................4\n   3.
    Related Documents ...............................................5\n   4. High-Level
    Architecture .........................................5\n      4.1. Example of
    a Reputation Service Being Used .................6\n   5. Terminology and Definitions
    .....................................7\n      5.1. Application ................................................7\n
    \     5.2. Response Set ...............................................7\n      5.3.
    Assertions and Ratings .....................................8\n      5.4. Reputon
    ....................................................9\n   6. Information Represented
    in the Protocol .........................9\n   7. Information Flow in the Reputation
    Query Protocol ..............10\n   8. Privacy Considerations .........................................10\n
    \     8.1. Data in Transit ...........................................10\n      8.2.
    Aggregation ...............................................11\n      8.3. Collection
    of Data ........................................11\n      8.4. Queries Can Reveal
    Information ............................11\n      8.5. Compromised Relationships
    .................................11\n   9. Security Considerations ........................................12\n
    \     9.1. Biased Reputation Agents ..................................12\n      9.2.
    Malformed Messages ........................................12\n      9.3. Further
    Discussion ........................................13\n   10. Informative References
    ........................................13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Historically, many Internet protocols have operated between\n
    \  unauthenticated entities.  For example, an email message's author\n   field
    (From:) [MAIL] can contain any display name or address and is\n   not verified
    by the recipient or other agents along the delivery\n   path.  Similarly, a server
    that sends email using the Simple Mail\n   Transfer Protocol [SMTP] trusts that
    the Domain Name System [DNS] has\n   led it to the intended receiving server.
    \ Both kinds of trust are\n   easily betrayed, opening the operation to subversion
    of some kind,\n   which makes spam, phishing, and other attacks even easier than
    they\n   would otherwise be.\n   In recent years, explicit identity authentication
    mechanisms have\n   begun to see wider deployment.  For example, the DomainKeys\n
    \  Identified Mail [DKIM] protocol permits associating a validated\n   identifier
    to a message.  This association is cryptographically\n   strong, and is an improvement
    over the prior state of affairs, but it\n   does not distinguish between identifiers
    of good actors and bad.\n   Even when it is possible to validate the domain name
    in an author\n   field (e.g., \"trustworthy.example.com\" in\n   \"john.doe@trustworthy.example.com\"),
    there is no basis for knowing\n   whether it is associated with a good actor who
    is worthy of trust.\n   As a practical matter, both bad actors and good adopt
    basic\n   authentication mechanisms like DKIM.  In fact, bad actors tend to\n
    \  adopt them even more rapidly than the good actors do in the hope that\n   some
    receivers will confuse identity authentication with identity\n   assessment.  The
    former merely means that the name is being used by\n   its owner or their agent,
    while the latter makes a statement about\n   the quality of the owner.\n   With
    the advent of these authentication protocols, it is possible to\n   satisfy the
    requirement for a mechanism by which mutually trusted\n   parties can exchange
    assessment information about other actors.  For\n   these purposes, we may usefully
    define \"reputation\" as \"the\n   estimation in which an identifiable actor is
    held, especially by the\n   community or the Internet public generally\".  (This
    is based on the\n   definition of \"reputation\" in [RANDOMHOUSE].)  We may call
    an\n   aggregation of individual assessments \"reputation input\".\n   While the
    need for reputation services has been perhaps especially\n   clear in the email
    world, where abuses are commonplace, other\n   Internet services are coming under
    attack and may have a similar\n   need.  For instance, a reputation mechanism
    could be useful in rating\n   the security of web sites, the quality of service
    of an Internet\n   Service Provider (ISP), or an Application Service Provider
    (ASP).\n   More generally, there are many different opportunities for use of\n
    \  reputation services, such as customer satisfaction at e-commerce\n   sites,
    and even things unrelated to Internet protocols, such as\n   plumbers, hotels,
    or books.  Just as human beings traditionally rely\n   on the recommendations
    of trusted parties in the physical world, so\n   too they can be expected to make
    use of such reputation services in a\n   variety of applications on the Internet.\n
    \  A full trust architecture encompasses a range of actors and\n   activities,
    to enable an end-to-end service for creating, exchanging,\n   and consuming trust-related
    information.  One component of that is a\n   query mechanism, to permit retrieval
    of a reputation.  Not all such\n   reputation services will need to convey the
    same information.  Some\n   need only to produce a basic rating, while others
    need to provide\n   underlying detail.  This is akin to the difference between
    check\n   approval and a credit report.\n   An overall reckoning of goodness versus
    badness can be defined\n   generically, but specific applications are likely to
    want to describe\n   reputations for multiple attributes: an e-commerce site might
    be\n   rated on price, speed of delivery, customer service, etc., and might\n
    \  receive very different ratings on each.  Therefore, the architecture\n   defines
    a generic query mechanism and basic format for reputation\n   retrieval, but allows
    extensions for each application.\n   Omitted from this architecture is the means
    by which a reputation-\n   reporting agent goes about collecting such data and
    the method for\n   creating an evaluation.  The mechanism defined here merely
    enables\n   asking a question and getting an answer; the remainder of an overall\n
    \  service provided by such a reputation agent is specific to the\n   implementation
    of that service and is out of scope here.\n"
  title: 1.  Introduction
- contents:
  - "2.  Overview\n   The basic premise of this reputation system involves a client
    that is\n   seeking to evaluate content based on an identifier associated with\n
    \  the content, and a reputation service provider that collects,\n   aggregates,
    and makes available for consumption, scores based on the\n   collected data.  Typically,
    client and service operators enter into\n   some kind of agreement during which
    some parameters are exchanged,\n   such as: the location at which the reputation
    service can be reached,\n   the nature of the reputation data being offered, possibly
    some client\n   authentication details, and the like.\n   Upon receipt of some
    content the client operator wishes to evaluate\n   (an Internet message, for example),
    the client extracts from the\n   content one or more identifiers of interest to
    be evaluated.\n   Examples of this include the domain name found in the From:
    field of\n   a message, or the domain name extracted from a valid DKIM signature.\n
    \  Next, the goal is to ask the reputation service provider what the\n   reputation
    of the extracted identifier is.  The query will contain\n   the identifier to
    be evaluated and possibly some context-specific\n   information (such as to establish
    the context of the query, e.g., an\n   email message) or client-specific information.
    \ The client typically\n   folds the data in the response into whatever local
    evaluation logic\n   it applies to decide what disposition the content deserves.\n"
  title: 2.  Overview
- contents:
  - "3.  Related Documents\n   This document presents a high-level view of the reputation\n
    \  architecture.\n   For the purposes of sending and receiving reputation information,\n
    \  [RFC7071] defines a media type for containing responses to reputation\n   queries,
    and a serialization format for these data (with examples).\n   It also creates
    the registry for specific reputation contexts and the\n   parameters related to
    them.\n   [RFC7072] describes how to construct and issue reputation queries and\n
    \  replies in the context of this architecture using the HyperText\n   Transport
    Protocol (HTTP) as the query protocol.\n   Finally, [RFC7073] defines (and registers)
    a first, common,\n   reputation application, namely the evaluation of portions
    of an email\n   message as subjects for reputation queries and replies.\n"
  title: 3.  Related Documents
- contents:
  - "4.  High-Level Architecture\n   This document outlines the reputation query and
    response mechanism.\n   It provides the following definitions:\n   o  Vocabulary
    for the current work and work of this type;\n   o  The types and content of queries
    that can be supported;\n   o  The extensible range of response information that
    can be provided;\n   o  Query/response transport conventions.\n   It provides
    an extremely simple query/response model that can be\n   carried over a variety
    of transports, including the Domain Name\n   System.  (Although not typically
    thought of as a 'transport', the DNS\n   provides generic capabilities and can
    be thought of as a mechanism\n   for transporting queries and responses that have
    nothing to do with\n   Internet addresses, such as is done with a DNS BlockList
    [DNSBL].)\n   Each specification for Repute transport is independent of any other\n
    \  specification.\n   The precise syntaxes of both the query and response are
    application\n   specific.  An application within this architecture defines the\n
    \  parameters available to queries of that type, and it also defines the\n   data
    returned in response to any query.\n"
  - contents:
    - "4.1.  Example of a Reputation Service Being Used\n   A reputation mechanism
      functions as a component of an overall\n   service.  A current example is that
      of an email system that uses DKIM\n   [DKIM] to affix a stable identifier to
      a message and then uses that\n   as a basis for evaluation:\n        +-------------+
      \                          +------------+\n        |   Sender    |                           |
      Recipient  |\n        +-------------+                           +------------+\n
      \              |                                         ^\n               V
      \                                        |\n        +-------------+                           +------------+\n
      \       |     MSA     |                           |     MDA    |\n        +-------------+
      \                          +------------+\n               |                                         ^\n
      \              |                                         |\n               |
      \                                 +------------+\n               |                                  |
      \ Handling  |\n               |                                  |   Filter
      \  |\n               |                                  +------------+\n               |
      \                                        ^\n               |                                         |\n
      \              |             +------------+       +------------+\n               |
      \            | Reputation |<=====>| Identifier |\n               |             |
      \ Service   |       |  Assessor  |\n               |             +------------+
      \      +------------+\n               |                                         ^\n
      \              V                                         |\n        +------------+
      \ Responsible Identifier    +------------+\n        | Identifier |. . . . .
      . . . . . . . . .>| Identifier |\n        |   Signer   |         (DKIM)             |
      \ Verifier  |\n        +------------+                            +------------+\n
      \              |                                         ^\n               V
      \                                        |\n        +-------------+       /~~~~~~~~~~\\
      \       +------+-----+\n        |     MTA     |----->( other MTAs )------>|
      \   MTA     |\n        +-------------+       \\~~~~~~~~~~/        +------------+\n
      \             Figure 1: Actors in a Trust Sequence Using DKIM\n   See [EMAIL-ARCH]
      for a general description of the Internet messaging\n   architecture.  In particular,
      the terms Message Submission Agent\n   (MSA), Message Delivery Agent (MDA),
      and Message Transfer Agent (MTA)\n   are described there.\n   In this figure,
      the solid lines indicate the flow of a message; the\n   dotted line indicates
      transfer of validated identifiers within the\n   message content; and the double
      line shows the query and response of\n   the reputation information.\n   Here,
      the DKIM Service provides one or more stable identifiers that\n   is the basis
      for the reputation query.  On receipt of a message from\n   an MTA, the DKIM
      Service provides a (possibly empty) set of validated\n   identifiers -- domain
      names, in this case -- that are the subjects of\n   reputation queries made
      by the Identifier Assessor.  The Identifier\n   Assessor queries a Reputation
      Service to determine the reputation of\n   the provided identifiers, and delivers
      the identifiers and their\n   reputations to the Handling Filter.  The Handling
      Filter makes a\n   decision about whether and how to deliver the message to
      the\n   recipient based on these and other inputs about the message, possibly\n
      \  including evaluation mechanisms in addition to DKIM.\n"
    title: 4.1.  Example of a Reputation Service Being Used
  title: 4.  High-Level Architecture
- contents:
  - "5.  Terminology and Definitions\n   This section defines terms used in the rest
    of the document.\n"
  - contents:
    - "5.1.  Application\n   An \"Application\" is a specific context in which reputation
      queries\n   are made.  Some obvious popular examples include restaurants, movies,\n
      \  or providers of various services.\n   Applications have different sets of
      attributes of interest, and so\n   the subjects of queries and the resulting
      responses will vary in\n   order to describe the reputations of entities in
      their respective\n   contexts.  For example, the Application \"movies\" would
      have a\n   different set of properties of interest and associated ratings (see\n
      \  below) from \"restaurants\".  It is therefore necessary for them to be\n
      \  formally defined.\n"
    title: 5.1.  Application
  - contents:
    - "5.2.  Response Set\n   A \"Response Set\" is a representation for data that
      are returned in\n   response to a reputation query about a particular entity
      within the\n   context of an Application.  A Response Set will always contain
      at\n   least the following components:\n   o  the name of the entity being rated;\n
      \  o  the Assertion (see Section 5.3);\n   o  the Rating (see Section 5.3).\n
      \  The full content of the Response Set is specific to the Application;\n   though
      all Applications have these few key Response Set fields in\n   common, some
      of the reputation data returned in the evaluation of\n   email senders would
      be different than that returned about a movie,\n   restaurant, or baseball player.
      \ The specific meaning of a Rating is\n   also specific to an Application.\n
      \  A Response Set is declared in a specification document, along with a\n   symbolic
      name representing the Application.  The specifying documents\n   will include
      the details of query parameters and responses particular\n   to that Application.
      \ The symbolic names and corresponding specifying\n   documents are registered
      with IANA in the \"Reputation Applications\"\n   registry in order to prevent
      name collisions and provide convenient\n   references to the documents.\n   IANA
      registries are created in [RFC7071].\n"
    title: 5.2.  Response Set
  - contents:
    - "5.3.  Assertions and Ratings\n   One of the key properties of a Response Set
      is called an \"Assertion\".\n   Assertions are claims made about the subject
      of a reputation query.\n   For example, one might assert that a particular restaurant
      serves\n   good food.  In the context of this architecture, the assertion would\n
      \  be \"serves good food\".\n   Assertions are coupled with a numeric value
      called a \"Rating\", which\n   is an indication of how much the party generating
      the Response Set\n   agrees with the assertion being made.  Ratings are typically\n
      \  expressed as a floating point value between 0.0 and 1.0 inclusive,\n   with
      the former indicating no support for the assertion and the\n   latter indicating
      total agreement with the assertion.\n   The documents that define future applications
      will also specify the\n   type of scale in use when generating ratings, to which
      all reputation\n   service providers for that application space must adhere.
      \ This will\n   allow a client to change which reputation service provider is
      being\n   queried without having to learn through some out-of-band method what\n
      \  the new provider's ratings mean.  For example, a registration might\n   state
      that ratings are linear, which would mean a score of \"x\" is\n   twice as strong
      as a value of \"x/2\".  It also allows easier\n   aggregation of ratings collected
      from multiple reputation service\n   providers.\n"
    title: 5.3.  Assertions and Ratings
  - contents:
    - "5.4.  Reputon\n   A \"reputon\" is an object that comprises the basic response
      to a\n   reputation query.  It contains the Response Set relevant to the\n   subject
      of the query in a serialized form.  Its specific encoding is\n   left to documents
      that implement this architecture.\n"
    title: 5.4.  Reputon
  title: 5.  Terminology and Definitions
- contents:
  - "6.  Information Represented in the Protocol\n   Regardless of the transport selected
    for the interchange, the basic\n   information to be represented in the protocol
    is fairly simple, and\n   normally includes at least the following data:\n   In
    the query:\n   o  the subject of the query;\n   o  the name of the reputation
    context (\"Application\"; see\n      Section 5.1);\n   o  optionally, name(s)
    of the specific reputation assertions of\n      interest.\n   Different transports,
    or different reputation contexts, might need\n   additional query parameters.\n
    \  In the response:\n   o  the identity of the entity providing the reputation
    information;\n   o  the identity of the entity being rated;\n   o  the application
    context for the query (e.g., email address\n      evaluation);\n   o  the overall
    rating score for that entity.\n   Beyond this, arbitrary amounts of additional
    information might be\n   included for specific uses of the service.  The entire
    collection of\n   data found in the response is the Response Set for that application\n
    \  and is defined in specifying documents as described above.\n   For example,
    a specification might be needed for a reputation\n   Response Set for an \"email-sending-domain\";
    the Response Set might\n   include information on how often spam was received
    from that domain.\n   [RFC7071] defines a media type and format for reputation
    data, and\n   [RFC7072] describes a protocol for exchanging such data.\n"
  title: 6.  Information Represented in the Protocol
- contents:
  - "7.  Information Flow in the Reputation Query Protocol\n   The basic Response
    Set could be wrapped into a new MIME media type\n   [MIME] or a DNS Resource Record
    (RR), and transported accordingly.\n   It also could be the integral payload of
    a purpose-built protocol.\n   For a basic request/response scenario, one entity
    (the client) will\n   ask a second entity (the server) for reputation data about
    a third\n   entity (the subject), and the second entity will respond with those\n
    \  data.\n   An application might benefit from an extremely lightweight mechanism,\n
    \  supporting constrained queries and responses, while others might need\n   to
    support larger and more complex responses.\n"
  title: 7.  Information Flow in the Reputation Query Protocol
- contents:
  - '8.  Privacy Considerations

    '
  - contents:
    - "8.1.  Data in Transit\n   Some reputation exchanges can be sensitive, and should
      not be shared\n   publicly.  A client making use of this framework is explicitly\n
      \  revealing that it is interested in particular subjects, and the\n   server
      is revealing what its information sources have reported about\n   those subjects
      (in the aggregate).  In the email context, for\n   example, a client is revealing
      from whom it receives email, and the\n   server is revealing what it (based
      on its aggregated data) believes\n   to be true about those subjects.\n   These
      can be sensitive things that need to be secured, particularly\n   when a client
      is talking to a server outside of its own\n   administrative domain.  Furthermore,
      certain types of reputation\n   information are typically perceived as more
      sensitive than others;\n   movie ratings, for example, are much less damaging
      if leaked than a\n   person's credit rating.\n   For interchanges that are sensitive
      to such exposures, it is\n   imperative to protect the information from unauthorized
      access and\n   viewing, and possibly add the capability to do object-level integrity\n
      \  and origin verification.  Not all transport options can be adequately\n   secured
      in these ways.  In particular, DNS queries and responses are\n   entirely insecure.
      \ Services need to use a transport method that\n   provides adequate security
      when privacy-sensitive data are involved.\n   The architecture described here
      neither suggests nor precludes any\n   particular transport mechanism for the
      data.  An HTTP mechanism is\n   defined in [RFC7072], and email-based mechanisms
      are also envisioned.\n   For HTTP, use of HTTP over Transport Layer Security
      [HTTP-TLS] is\n   very strongly advised.  For email, mechanisms such as OpenPGP\n
      \  [OPENPGP] and S/MIME [SMIME] are similarly advised.\n"
    title: 8.1.  Data in Transit
  - contents:
    - "8.2.  Aggregation\n   The data that are collected as input to a reputation
      calculation are,\n   in essence, a statement by one party about the actions
      or output of\n   another.  What one party says about another is often meant
      to be kept\n   in confidence.  Accordingly, steps often need to be taken to
      secure\n   the submission of these input data to a reputation service provider.\n
      \  Moreover, although the aggregated reputation is the product provided\n   by
      this service, its inadvertent exposure can have undesirable\n   effects.  Just
      as the collection of data about a subject needs due\n   consideration to privacy
      and security, so too does the output and\n   storage of whatever aggregation
      the service provider applies.\n"
    title: 8.2.  Aggregation
  - contents:
    - "8.3.  Collection of Data\n   The basic notion of collection and storage of
      reputation data is\n   obviously a privacy issue in that the opinions of one
      party about\n   another are likely to be sensitive.  Inadvertent or unauthorized\n
      \  exposure of those data can lead to personal or commercial damage.\n"
    title: 8.3.  Collection of Data
  - contents:
    - "8.4.  Queries Can Reveal Information\n   When a client asks a service provider
      about a particular subject, the\n   service provider can infer the existence
      of that subject and begin\n   observing which clients ask about it.  This can
      be an unanticipated\n   leak of private information.\n"
    title: 8.4.  Queries Can Reveal Information
  - contents:
    - "8.5.  Compromised Relationships\n   Reputation services that limit queries
      to authorized clients can\n   cause private information, such as the reputations
      themselves or the\n   data used to compute them, to be revealed if the client
      credentials\n   are compromised.  It is critical to safeguard not only the\n
      \  interchange of reputation information, and the information once it\n   has
      been delivered to the client, but the ability to issue requests\n   for information
      as well.\n   An important consideration here is that compromised credentials
      are\n   mainly an exposure of some third party (whose reputation is\n   improperly
      revealed) rather than the client or the server.\n"
    title: 8.5.  Compromised Relationships
  title: 8.  Privacy Considerations
- contents:
  - "9.  Security Considerations\n   This document introduces an overall protocol
    architecture, but no\n   implementation details.  As such, the security considerations\n
    \  presented here are very high level.  The detailed analysis of the\n   various
    specific components of the protocol can be found in the\n   documents that instantiate
    this architecture.\n"
  - contents:
    - "9.1.  Biased Reputation Agents\n   As with [VBR], an agent seeking to make
      use of a reputation reporting\n   service is placing some trust that the service
      presents an unbiased\n   \"opinion\" of the object about which reputation is
      being returned.\n   The result of trusting the data is, presumably, to guide
      action taken\n   by the reputation client.  It follows, then, that bias in the\n
      \  reputation service can adversely affect the client.  Clients\n   therefore
      need to be aware of this possibility and the effect it\n   might have.  For
      example, a biased system returning a reputation\n   about a DNS domain found
      in email messages could result in the\n   admission of spam, phishing, or malware
      through a mail gateway (by\n   rating the domain name more favorably than warranted)
      or could result\n   in the needless rejection or delay of mail (by rating the
      domain more\n   unfavorably than warranted).  As a possible mitigation strategy,\n
      \  clients might seek to interact only with reputation services that\n   offer
      some disclosure of the computation methods for the results they\n   return.
      \ Such disclosure and evaluation is beyond the scope of the\n   present document.\n
      \  Similarly, a client placing trust in the results returned by such a\n   service
      might suffer if the service itself is compromised, returning\n   biased results
      under the control of an attacker without the knowledge\n   of the agency providing
      the reputation service.  This might result\n   from an attack on the data being
      returned at the source, or from a\n   man-in-the-middle attack.  Protocols,
      therefore, need to be designed\n   so as to be as resilient against such attacks
      as possible.\n"
    title: 9.1.  Biased Reputation Agents
  - contents:
    - "9.2.  Malformed Messages\n   Both clients and servers of reputation systems
      need to be resistant\n   to attacks that involve malformed messages, deliberate
      or otherwise.\n   Malformations can be used to confound clients and servers
      alike in\n   terms of identifying the party or parties responsible for the content\n
      \  under evaluation.  This can result in delivery of undesirable or even\n   dangerous
      content.\n"
    title: 9.2.  Malformed Messages
  - contents:
    - "9.3.  Further Discussion\n   Involving a third party (in this case, a reputation
      service provider)\n   that can influence the handling of incoming content involves
      ceding\n   some amount of control to that third party.  Numerous other topics\n
      \  related to the management, operation, and safe use of reputation\n   systems
      can be found in [CONSIDERATIONS].\n"
    title: 9.3.  Further Discussion
  title: 9.  Security Considerations
- contents:
  - "10.  Informative References\n   [CONSIDERATIONS]\n               Kucherawy, M.,
    \"Operational Considerations Regarding\n               Reputation Services\",
    Work in Progress, May 2013.\n   [DKIM]      Crocker, D., Ed., Hansen, T., Ed.,
    and M.  Kucherawy,\n               Ed., \"DomainKeys Identified Mail (DKIM) Signatures\",\n
    \              STD 76, RFC 6376, September 2011.\n   [DNS]       Mockapetris,
    P., \"Domain names - implementation and\n               specification\", STD 13,
    RFC 1035, November 1987.\n   [DNSBL]     Levine, J., \"DNS Blacklists and Whitelists\",
    RFC 5782,\n               February 2010.\n   [EMAIL-ARCH]\n               Crocker,
    D., \"Internet Mail Architecture\", RFC 5598,\n               July 2009.\n   [HTTP-TLS]
    \ Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [MAIL]      Resnick,
    P., Ed., \"Internet Message Format\", RFC 5322,\n               October 2008.\n
    \  [MIME]      Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n               Extensions
    (MIME) Part One: Format of Internet Message\n               Bodies\", RFC 2045,
    November 1996.\n   [OPENPGP]   Callas, J., Donnerhacke, L., Finney, H., Shaw,
    D., and R.\n               Thayer, \"OpenPGP Message Format\", RFC 4880,\n               November
    2007.\n   [RANDOMHOUSE]\n               \"Random House Webster's Dictionary, Revised
    Edition\",\n               ISBN 978-0-345-44725-8, June 2001.\n   [RFC7071]   Borenstein,
    N. and M. Kucherawy, \"A Media Type for\n               Reputation Interchange\",
    RFC 7071, November 2013.\n   [RFC7072]   Borenstein, N. and M. Kucherawy, \"A
    Reputation Query\n               Protocol\", RFC 7072, November 2013.\n   [RFC7073]
    \  Borenstein, N. and M. Kucherawy, \"A Reputation Response\n               Set
    for Email Identifiers\", RFC 7073, November 2013.\n   [SMIME]     Ramsdell, B.
    and S. Turner, \"Secure/Multipurpose Internet\n               Mail Extensions
    (S/MIME) Version 3.2 Message\n               Specification\", RFC 5751, January
    2010.\n   [SMTP]      Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n
    \              October 2008.\n   [VBR]       Hoffman, P., Levine, J., and A. Hathcock,
    \"Vouch By\n               Reference\", RFC 5518, April 2009.\n"
  title: 10.  Informative References
- contents:
  - "Authors' Addresses\n   Nathaniel Borenstein\n   Mimecast\n   203 Crescent St.,
    Suite 303\n   Waltham, MA 02453\n   USA\n   Phone: +1 781 996 5340\n   EMail:
    nsb@guppylake.com\n   Murray S. Kucherawy\n   270 Upland Drive\n   San Francisco,
    CA 94127\n   USA\n   EMail: superuser@gmail.com\n"
  title: Authors' Addresses
