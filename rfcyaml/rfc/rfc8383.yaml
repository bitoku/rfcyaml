- contents:
  - "         Transparent Interconnection of Lots of Links (TRILL):\n                         Address
    Flush Message\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The TRILL (Transparent Interconnection of Lots of Links) protocol,
    by\n   default, learns end station addresses from observing the data plane.\n
    \  In particular, it learns local Media Access Control (MAC) addresses\n   and
    the edge switch port of attachment from the receipt of local data\n   frames and
    learns remote MAC addresses and the edge switch port of\n   attachment from the
    decapsulation of remotely sourced TRILL Data\n   packets.\n   This document specifies
    a message by which a TRILL switch can\n   explicitly request other TRILL switches
    to flush certain MAC\n   reachability learned through the decapsulation of TRILL
    Data packets.\n   This is a supplement to the TRILL automatic address forgetting
    (see\n   Section 4.8.3 of RFC 6325) and can assist in achieving more rapid\n   convergence
    in case of topology or configuration change.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8383.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Terminology and Abbreviations . . . . . . . . . . .
    . . .   3\n   2.  Address Flush Message Details . . . . . . . . . . . . . . .
    .   5\n     2.1.  VLAN Block Only Case  . . . . . . . . . . . . . . . . . .   6\n
    \    2.2.  Extensible Case . . . . . . . . . . . . . . . . . . . . .   8\n       2.2.1.
    \ Blocks of VLANs . . . . . . . . . . . . . . . . . . .  12\n       2.2.2.  Bit
    Map of VLANs  . . . . . . . . . . . . . . . . . .  12\n       2.2.3.  Blocks of
    FGLs  . . . . . . . . . . . . . . . . . . .  13\n       2.2.4.  list of FGLs  .
    . . . . . . . . . . . . . . . . . . .  13\n       2.2.5.  Big Map of FGLs . .
    . . . . . . . . . . . . . . . . .  14\n       2.2.6.  All Data Labels . . . .
    . . . . . . . . . . . . . . .  14\n       2.2.7.  MAC Address List  . . . . .
    . . . . . . . . . . . . .  15\n       2.2.8.  MAC Address Blocks  . . . . . .
    . . . . . . . . . . .  16\n   3.  IANA Considerations . . . . . . . . . . . .
    . . . . . . . . .  17\n     3.1.  Address Flush RBridge Channel Protocol Number
    . . . . . .  17\n     3.2.  TRILL Address Flush TLV Types . . . . . . . . . .
    . . . .  17\n   4.  Security Considerations . . . . . . . . . . . . . . . . .
    . .  17\n   5.  References  . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 18\n     5.1.  Normative References  . . . . . . . . . . . . . . . . . .  18\n
    \    5.2.  Informative References  . . . . . . . . . . . . . . . . .  19\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  19\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   By default, edge TRILL (Transparent Interconnection of Lots
    of Links)\n   switches [RFC6325] [RFC7780], also called edge Routing Bridges\n
    \  (RBridges), learn end station MAC address reachability from observing\n   the
    data plane.  On receipt of a native frame from an end station,\n   they would
    learn the local MAC address attachment of the source end\n   station.  And on
    egressing (decapsulating) a remotely originated\n   TRILL Data packet, they learn
    the remote MAC address and remote\n   attachment TRILL switch.  Such learning
    is all scoped by data label\n   (VLAN or Fine-Grained Label (FGL) [RFC7172]).\n
    \  TRILL has mechanisms for timing out such learning and appropriately\n   clearing
    it based on some network connectivity and configuration\n   changes; however,
    there are circumstances under which it would be\n   helpful for a TRILL switch
    to be able to explicitly flush (purge)\n   certain learned end station reachability
    information in remote\n   RBridges to achieve more-rapid convergence.  Section
    6.2 of [RFC4762]\n   is an example of the use of such a mechanism.\n   Another
    example, based on Appendix A.3 of [RFC6325] (\"Wiring Closet\n   Topology\"),
    presents a bridged LAN connected to a TRILL network via\n   multiple RBridge ports.
    \ For optimum paths, Appendix A.3.3 suggests\n   configuring the RBridge ports
    to be like one Spanning Tree Protocol\n   (STP) tree root in the bridged LAN.
    \ The Address Flush message in\n   this document could also be triggered in this
    case when one of the\n   edge RBridges receives Topology Change (TC) information
    (e.g., TC in\n   STP, Topology Change Notification (TCN) in Multiple Spanning
    Tree\n   Protocol (MSTP)) in order to rapidly flush the MAC addresses for\n   specific
    VLANs learned at the other edge RBridge ports.\n   A TRILL switch can easily flush
    any locally learned addresses it\n   wants.  This document specifies an RBridge
    Channel Support protocol\n   [RFC7178] message to request flushing address information
    for\n   specific VLANs or FGLs ([RFC7172]) learned from decapsulating TRILL\n
    \  Data packets.\n"
  - contents:
    - "1.1.  Terminology and Abbreviations\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in [RFC2119] [RFC8174]\n   when, and only when, they appear in all capitals,
      as shown here.\n   This document uses the terms and abbreviations defined in
      [RFC6325]\n   and [RFC7178] as well as the following:\n   Data Label:  A VLAN
      or FGL\n   Edge TRILL Switch:  A TRILL switch attached to one or more links
      that\n      provide end station service\n   FCS:  Frame Check Sequence\n   FGL:
      \ Fine-Grained Label [RFC7172]\n   Management VLAN:  A VLAN in which all TRILL
      switches in a campus\n      indicate interest so that multi-destination TRILL
      Data packets,\n      including RBridge Channel protocol messages [RFC7178],
      sent with\n      that VLAN as the Inner.VLAN will be delivered to all TRILL\n
      \     switches in the campus.  Usually, no end station service is\n      offered
      in the Management VLAN.\n   MAC:  Media Access Control\n   RBridge:  An alternative
      name for a TRILL switch\n   STP:  Spanning Tree Protocol\n   TC:  Topology Change
      message\n   TCN:  Topology Change Notification message\n   TRILL switch:  A
      device implementing the TRILL protocol [RFC6325]\n      [RFC7780]\n"
    title: 1.1.  Terminology and Abbreviations
  title: 1.  Introduction
- contents:
  - "2.  Address Flush Message Details\n   The Address Flush message is an RBridge
    Channel protocol message\n   [RFC7178].\n   The general structure of an RBridge
    Channel packet on a link between\n   TRILL switches is shown in Figure 1.  The
    Protocol field in the\n   RBridge Channel Header gives the type of RBridge Channel
    packet and\n   indicates how to interpret the Channel-Protocol-Specific Payload\n
    \  [RFC7178].\n                      +-----------------------------------+\n                      |
    \           Link Header            |\n                      +-----------------------------------+\n
    \                     |            TRILL Header           |\n                      +-----------------------------------+\n
    \                     |      Inner Ethernet Addresses     |\n                      +-----------------------------------+\n
    \                     |      Data Label (VLAN or FGL)     |\n                      +-----------------------------------+\n
    \                     |       RBridge Channel Header      |\n                      +-----------------------------------+\n
    \                     | Channel-Protocol-Specific Payload |\n                      +-----------------------------------+\n
    \                     |   Link Trailer (FCS if Ethernet)  |\n                      +-----------------------------------+\n
    \          Figure 1: RBridge Channel Protocol Message Structure\n   By default,
    an Address Flush RBridge Channel protocol message applies\n   to addresses within
    the Data Label that appear right after the Inner\n   Ethernet Addresses.  Address
    Flush protocol messages are usually sent\n   as multi-destination packets (TRILL
    Header M bit equal to one) so as\n   to reach all TRILL switches offering end
    station service in the VLAN\n   or FGL specified by that Data Label.  Both multi-destination
    and\n   unicast Address Flush messages SHOULD be sent at priority 6 since\n   they
    are important control messages but are lower priority than\n   control messages
    that establish or maintain adjacency.\n   Nevertheless:\n   -  There are provisions
    for optionally indicating the Data Label(s)\n      to be flushed for cases where
    the Address Flush message is sent\n      over a Management VLAN or the like.\n
    \  -  An Address Flush message can be sent unicast, if it is desired to\n      clear
    addresses at one TRILL switch only.\n   -  An Address Flush message can be sent
    selectively to the RBridges\n      that have at least one access port configured
    as one of the VLANs\n      or FGLs specified in the Address Flush message payload.\n
    \  Implementations should consider logging Address Flush messages\n   received
    with appropriate protections against packet storms.\n"
  - contents:
    - "2.1.  VLAN Block Only Case\n   Figure 2 expands the RBridge Channel Header
      and Channel-Protocol-\n   Specific Payload from Figure 1 for the case of the
      VLAN-only-based\n   Address Flush message.  This form of the Address Flush message
      is\n   optimized for flushing MAC addresses based on nickname and blocks of\n
      \  VLANs. 0x8946 is the Ethertype assigned by IEEE for the RBridge\n   Channel
      protocol [RFC7178].\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   RBridge
      Channel Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    RBridge-Channel (0x8946)   |  0x0  |Channel Protocol= 0x009|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |          Flags        |  ERR  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Address Flush Protocol Specific:\n      +-+-+-+-+-+-+-+-+\n      | K-nicks
      \      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Nickname 1                    | Nickname 2                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Nickname ...                  | Nickname K-nicks              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | K-VLBs        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | RESV  | Start.VLAN 1          | RESV  | End.VLAN 1            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | RESV  | Start.VLAN 2          | RESV  | End.VLAN 2            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | RESV  | Start.VLAN ...        | RESV  | End.VLAN ...          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | RESV  | Start.VLAN K-VLBs     | RESV  | End.VLAN K-VLBs       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \            Figure 2: Address Flush Message - VLAN Block Case\n   The fields
      in Figure 2 related to the Address Flush message are as\n   follows:\n   Channel
      Protocol:  The RBridge Channel Protocol value allocated for\n      Address Flush
      (see Section 3).\n   K-nicks:  The number of nicknames listed as an unsigned
      integer.  If\n      this is zero, the ingress nickname in the TRILL Header [RFC6325]\n
      \     is considered to be the only nickname to which the message\n      applies.
      \ If non-zero, it gives the number of nicknames listed\n      right after K-nicks
      to which the message applies, and, in this\n      non-zero case, the flush does
      not apply to the ingress nickname in\n      the TRILL Header unless it is also
      listed.  The message flushes\n      address learning due to egressing TRILL
      Data packets that had an\n      ingress nickname to which the message applies.\n
      \  Nickname:  A listed nickname to which it is intended that the Address\n      Flush
      message apply.  If an unknown or reserved nickname occurs in\n      the list,
      it is ignored, but the address flush operation is still\n      executed with
      the other nicknames.  If an incorrect nickname\n      occurs in the list, so
      that some address learning is flushed that\n      should not have been flushed,
      the network will still operate\n      correctly; however, it will be less efficient
      as the incorrectly\n      flushed learning is relearned.\n   K-VLBs:  The number
      of VLAN blocks present as an unsigned integer.\n      If this byte is zero,
      the message is the more general format\n      specified in Section 2.2.  If
      it is non-zero, it gives the number\n      of blocks of VLANs present.  Thus,
      in the VLAN Block address flush\n      case, K-VLBs will be at least one.\n
      \  RESV:  4 reserved bits.  MUST be sent as zero and ignored on receipt.\n   Start.VLAN,
      End.VLAN:  These 12-bit fields give the beginning and\n      ending VLAN IDs
      of a block of VLANs.  The block includes both the\n      starting and ending
      values; so, a block of size one is indicated\n      by setting End.VLAN equal
      to Start.VLAN.  If Start.VLAN is 0x000,\n      it is treated as if it was 0x001.
      \ If End.VLAN is 0xFFF, it is\n      treated as if it was 0xFFE.  If End.VLAN
      is smaller than\n      Start.VLAN, considering both as unsigned integers, that
      VLAN block\n      is ignored, but the address flush operation is still executed
      with\n      other VLAN blocks in the message.  VLAN blocks may overlap, in\n
      \     which case, the address flush operation is applicable to a VLAN\n      covered
      by any one or more of the blocks in the message.\n   This message flushes all
      addresses in an applicable VLAN learned from\n   egressing TRILL Data packets
      with an applicable nickname as ingress.\n   To flush addresses for all VLANs,
      it is easy to specify a block\n   covering all valid VLAN IDs (i.e., from 0x001
      to 0xFFE).\n"
    title: 2.1.  VLAN Block Only Case
  - contents:
    - "2.2.  Extensible Case\n   A more general form of the Address Flush message
      is provided to\n   support flushing by FGL and more efficient encodings of VLANs
      and\n   FGLs where using a set of contiguous blocks is cumbersome.  It also\n
      \  supports optionally specifying the MAC addresses to clear.  This form\n   is
      extensible.\n   The extensible case is indicated by a zero in the byte shown
      in\n   Figure 2 as \"K-VLBs\" followed by other information encoded as TLVs.\n
      \      0                   1                   2                   3\n       0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   RBridge Channel
      Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    RBridge-Channel (0x8946)   |  0x0  |Channel Protocol=0x009 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |          Flags        |  ERR  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Address Flush Protocol Specific:\n      +-+-+-+-+-+-+-+-+\n      | K-nicks
      \      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Nickname 1                    | Nickname 2                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Nickname ...                  | Nickname K-nicks              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | 0             |  TLVs ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...\n
      \            Figure 3: Address Flush Message - Extensible Case\n   Channel Protocol,
      K-nicks, Nickname:  These fields are as specified\n      in Section 2.1.\n   TLVs:
      \ If the byte immediately before the TLVs field, which is the\n      byte labeled
      \"K-VLBs\" in Figure 2, is zero, as shown in Figure 3,\n      the remainder
      of the message consists of TLVs encoded as shown in\n      Figure 4.\n             0
      1 2 3 4 5 6 7 0 1 2 3 4 5 6 7\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \           |  Type         |  Length       |  Value\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \                      Figure 4: Type, Length, Value\n   Type:  The 8-bit TLV
      type as shown in the table below.  See\n      subsections of Section 2.2 for
      details on each type assigned\n      below.  If the type is reserved or not
      known by a receiving\n      RBridge, that receiving RBridge ignores the value
      and skips to the\n      next TLV by use of the Length byte.  There is no provision
      for a\n      list of VLAN ID TLVs as there are few enough of them that an\n
      \     arbitrary subset of VLAN IDs can be represented as a bit map.\n                Type
      \      Description       Reference\n               ------   ------------------
      \ -----------------\n                   0     Reserved            [RFC8383]\n
      \                  1     Blocks of VLANs     [RFC8383]\n                   2
      \    Bit Map of VLANs    [RFC8383]\n                   3     Blocks of FGLs
      \     [RFC8383]\n                   4     List of FGLs        [RFC8383]\n                   5
      \    Bit Map of FGLs     [RFC8383]\n                   6     All Data Labels
      \    [RFC8383]\n                   7     MAC Address List    [RFC8383]\n                   8
      \    MAC Address Blocks  [RFC8383]\n               9-254     Unassigned\n                 255
      \    Reserved            [RFC8383]\n   Length:  The 8-bit unsigned integer length
      in bytes of the remaining\n      information in the TLV after the Length byte.
      \ The Length MUST NOT\n      imply that the value extends beyond the end of
      the RBridge\n      Channel-Protocol-Specific Payload area.  If it does, the
      Address\n      Flush message is corrupt and MUST be ignored.\n   Value:  Depends
      on the TLV type.\n   In an extensible Address Flush message, when the TLVs are
      parsed,\n   those TLVs having unknown types are ignored by the receiving RBridge.\n
      \  There may be multiple instances of TLVs with the same Type in the\n   same
      Address Flush message, and TLVs are not required to be in any\n   particular
      order.\n   -  All RBridges implementing the Address Flush RBridge Channel\n
      \     protocol message MUST implement types 1 and 2, the VLAN types, and\n      Type
      6, which indicates addresses are to be flushed for all Data\n      Labels.\n
      \  -  RBridges that implement the Address Flush message and implement\n      FGL
      ingress/egress MUST implement types 3, 4, and 5, the FGL\n      types.  (An
      RBridge that is merely FGL safe [RFC7172], but cannot\n      egress FGL TRILL
      Data packets, SHOULD ignore the FGL types, as it\n      will not learn any FGL-scoped
      MAC addresses from the data plane.)\n   -  RBridges that implement the Address
      Flush message SHOULD implement\n      types 7 and 8 so that specific MAC addresses
      can be flushed.  If\n      they do not, the effect will be to flush all MAC
      addresses for the\n      indicated Data Labels, which may be inefficient as
      any MAC\n      addresses not intended to be flushed will have to be relearned.\n
      \  The parsing of the TLVs by a receiving RBridge results in three\n   pieces
      of information:\n      1.  a flag indicating whether one or more Type 6 TLVs
      (All Data\n          Labels) were encountered;\n      2.  a set of Data Labels
      accumulated from VLAN and/or FGL\n          specifying TLVs in the message;
      and,\n      3.  if the MAC address TLV types are implemented, a set of MAC\n
      \         addresses accumulated from MAC-address-specifying TLVs in the\n          message.\n
      \  VLANs/FGLs might be indicated more than once due to overlapping\n   blocks
      or the like, and a VLAN/FGL is included in the above set of\n   VLANs/FGLs if
      it occurs in any TLV in the Address Flush message.  A\n   MAC address might
      be indicated more than once due to overlapping\n   blocks or the like, and a
      particular MAC address is included in the\n   above set of MAC addresses if
      it occurs in any TLV in the Address\n   Flush message.\n   After the above information
      has been accumulated by parsing the TLVs,\n   three sets are derived as described
      below: a set of nicknames, a set\n   of Data Labels, and a set of MAC addresses.
      \ The address flush\n   operation at the receiver applies to the cross product
      of these\n   derived sets.  That is, a { Data Label, MAC address, nickname }\n
      \  triple is flushed if and only if the Data Label matches an element in\n   the
      derived set of Data Labels, the MAC address matches an element in\n   the derived
      set of MAC address, and the nickname matches an element\n   in the derived set
      of nicknames.  In the case of Data Labels and MAC\n   addresses, a special value
      of the set, {ALL}, is permitted, which\n   matches all values.\n   The sets
      are derived as follows:\n      Data Labels set:\n         If the Type 6 TLV
      has been encountered, the set is {ALL}, else,\n         if any Data Labels have
      been accumulated by processing Data\n            Label TLVs (Types 1, 2, 3,
      4, and 5), the set is those\n            accumulated Data Labels, else,\n         the
      Data Labels set is null and the Address Flush message does\n            nothing.\n
      \     MAC Addresses set:\n         In the receiver does not implement the MAC
      address types (Types\n            7 and 8) or it does implement those types
      but no MAC\n            addresses are accumulated in parsing the TLVs, then
      the MAC\n            Address set is {ALL},\n         else, the MAC Addresses
      set is the set of MAC addresses\n            accumulated in processing the TLVs.\n
      \     Nicknames set:\n         If the K-nicks field in the Address Flush message
      was zero,\n            then the ingress nickname in the TRILL Header of the
      message\n            is the sole nickname set member, else,\n         the nicknames
      set members are the K-nicks nicknames listed in\n            the Address Flush
      message.\n   The various formats below are provided for encoding efficiency.
      \ A\n   block of values is most efficient when there are a number of\n   consecutive
      values.  A bit map is most efficient if there are\n   scattered values within
      a limited range.  And a list of single values\n   is most efficient if there
      are widely scattered values.\n"
    - contents:
      - "2.2.1.  Blocks of VLANs\n   If the TLV Type is 1, the value is a list of
        blocks of VLANs as\n   follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Type = 1      | Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | RESV  | Start.VLAN 1          | RESV  | End.VLAN 1            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | RESV  | Start.VLAN 2          | RESV  | End.VLAN 2            |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | RESV  | Start.VLAN ...        | RESV  | End.VLAN ...          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The meaning of Start.VLAN and End.VLAN is as specified in\n   Section 2.1.
        \ Length MUST be a multiple of 4.  If Length is not a\n   multiple of 4, the
        TLV is corrupt and the Address Flush message MUST\n   be discarded.\n"
      title: 2.2.1.  Blocks of VLANs
    - contents:
      - "2.2.2.  Bit Map of VLANs\n   If the TLV Type is 2, the value is a bit map
        of VLANs as follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | Type
        = 2      | Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
        \     | RESV  | Start.VLAN            | Bits...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
        \  The value portion of the TLV begins with two bytes having the 12-bit\n
        \  starting VLAN ID right justified (the top 4 bits are as specified in\n
        \  Section 2.1 RESV).  This is followed by bytes with one bit per VLAN\n   ID.
        \ The high order bit of the first byte is for VLAN N.  The next-\n   to-the-highest
        order bit is for VLAN N+1.  The low order bit of the\n   first byte is for
        VLAN N+7.  The high order bit of the second byte,\n   if there is a second
        byte, is for VLAN N+8, and so on.  If that bit\n   is a one, the Address Flush
        message applies to that VLAN.  If that\n   bit is a zero, then addresses that
        have been learned in that VLAN are\n   not flushed.  Note that Length MUST
        be at least 2.  If Length is 0 or\n   1, the TLV is corrupt and the Address
        Flush message MUST be\n   discarded.  VLAN IDs do not wrap around.  If there
        are enough bytes\n   so that some bits correspond to VLAN ID 0xFFF or higher,
        those bits\n   are ignored, but the message is still processed for bits\n
        \  corresponding to valid VLAN IDs.\n"
      title: 2.2.2.  Bit Map of VLANs
    - contents:
      - "2.2.3.  Blocks of FGLs\n   If the TLV Type is 3, the value is a list of blocks
        of FGLs as\n   follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
        Type = 3      | Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Start.FGL 1                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | End.FGL 1                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Start.FGL 2                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | End.FGL 2                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Start.FGL ...                                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | End.FGL ...                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The TLV value consists of sets of Start.FGL and End.FGL numbers.  The\n
        \  Address Flush information applies to the FGLs in that range,\n   inclusive.
        \ A single FGL is indicated by setting both Start.FGL and\n   End.FGL to the
        same value.  If End.FGL is less than Start.FGL,\n   considering them as unsigned
        integers, that block is ignored, but the\n   Address Flush message is still
        processed for any other blocks\n   present.  For this Type, Length MUST be
        a multiple of 6; if it is\n   not, the TLV is corrupt and the Address Flush
        message MUST be\n   discarded if the receiving RBridge implements Type 3.\n"
      title: 2.2.3.  Blocks of FGLs
    - contents:
      - "2.2.4.  list of FGLs\n   If the TLV Type is 4, the value is a list of FGLs
        as follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | Type = 4      |
        Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | FGL 1                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | FGL 2                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | FGL ...                                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The TLV value consists of FGL numbers each in 3 bytes.  The Address\n   Flush
        message applies to those FGLs.  For this Type, Length MUST be a\n   multiple
        of 3; if it is not, the TLV is corrupt and the Address Flush\n   message MUST
        be discarded if the receiving RBridge implements Type 4.\n"
      title: 2.2.4.  list of FGLs
    - contents:
      - "2.2.5.  Big Map of FGLs\n   If the TLV Type is 5, the value is a bit map
        of FGLs as follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | Type
        = 5      | Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Start.FGL                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Bits...\n      +-+-+-+-+-+-+-+-\n   The TLV value consists of three
        bytes with the 24-bit starting FGL\n   value N.  This is followed by bytes
        with one bit per FGL.  The high\n   order bit of the first byte is for FGL
        N.  The next-to-the-highest\n   order bit is for FGL N+1.  The low order bit
        of the first byte is for\n   FGL N+7.  The high order bit of the second byte,
        if there is a second\n   byte, is for FGL N+8, and so on.  If that bit is
        a one, the Address\n   Flush message applies to that FGL.  If that bit is
        a zero, then\n   addresses that have been learned in that FGL are not flushed.
        \ Note\n   that Length MUST be at least 3.  If Length is 0, 1, or 2 for a
        Type 5\n   TLV, the TLV is corrupt and the Address Flush message MUST be\n
        \  discarded if Type 5 is implemented.  FGLs do not wrap around.  If\n   there
        are enough bytes so that some bits correspond to an FGL higher\n   than 0xFFFFFF,
        those bits are ignored, but the message is still\n   processed for bits corresponding
        to valid FGLs.\n"
      title: 2.2.5.  Big Map of FGLs
    - contents:
      - "2.2.6.  All Data Labels\n   If the TLV Type is 6, the value is null as follows:\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | Type = 6      | Length =
        0    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   This type is used when
        an RBridge wants to withdraw all addresses for\n   all the Data Labels (all
        VLANs and FGLs).  Length MUST be zero.  If\n   Length is any other value,
        the TLV is corrupt and the Address Flush\n   message MUST be discarded.\n"
      title: 2.2.6.  All Data Labels
    - contents:
      - "2.2.7.  MAC Address List\n   If the TLV Type is 7, the value is a list of
        MAC addresses as\n   follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
        Type = 7      | Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC 1 upper half                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC 1 lower half                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC 2 upper half                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC 2 lower half                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC ... upper half                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC ... lower half                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The TLV value consists of a list of 48-bit MAC addresses.  Length\n   MUST
        be a multiple of 6.  If it is not, the TLV is corrupt, and the\n   Address
        Flush message MUST be discarded if the receiving RBridge\n   implements Type
        7.\n"
      title: 2.2.7.  MAC Address List
    - contents:
      - "2.2.8.  MAC Address Blocks\n   If the TLV Type is 8, the value is a list
        of blocks of MAC addresses\n   as follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Type = 8      | Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.start 1 upper half                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.start 1 lower half                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.end 1 upper half                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.end 1 lower half                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.start 2 upper half                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.start 2 lower half                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.end 2 upper half                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.end 2 lower half                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.start ... upper half                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.start ... lower half                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.end ... upper half                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | MAC.end ... lower half                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The TLV value consists of sets of Start.MAC and End.MAC numbers.  The\n
        \  Address Flush information applies to the 48-bit MAC Addresses in that\n
        \  range, inclusive.  A single MAC address is indicated by setting both\n
        \  Start.MAC and End.MAC to the same value.  If End.MAC is less than\n   Start.MAC,
        considering them as unsigned integers, that block is\n   ignored but the Address
        Flush message is still processed for any\n   other blocks present.  For this
        Type, Length MUST be a multiple of\n   12; if it is not, the TLV is corrupt
        and the Address Flush message\n   MUST be discarded if the receiving RBridge
        implements Type 7.\n"
      title: 2.2.8.  MAC Address Blocks
    title: 2.2.  Extensible Case
  title: 2.  Address Flush Message Details
- contents:
  - '3.  IANA Considerations

    '
  - contents:
    - "3.1.  Address Flush RBridge Channel Protocol Number\n   IANA has assigned 0x009
      as the Address Flush RBridge Channel Protocol\n   number from the range of RBridge
      Channel protocols allocated by\n   Standards Action [RFC7178] [RFC8126].\n   The
      added entry to the \"RBridge Channel Protocols\" registry at\n   <https://www.iana.org/assignments/trill-parameters/>
      is as follows:\n         Protocol  Description       Reference\n         --------
      \ --------------    ------------------\n           0x009    Address Flush     [RFC8383]\n"
    title: 3.1.  Address Flush RBridge Channel Protocol Number
  - contents:
    - "3.2.  TRILL Address Flush TLV Types\n   IANA has created the \"TRILL Address
      Flush TLV Types\" registry at\n   <https://www.iana.org/assignments/trill-parameters/>
      as a subregistry\n   of the \"RBridge Channel Protocols\" registry.  Registry
      headers are as\n   below.  The initial entries are as in the table in Section
      2.2.\n         Registry:  TRILL Address Flush TLV Types\n         Registration
      Procedures: IETF Review\n         Reference:  [RFC8383]\n"
    title: 3.2.  TRILL Address Flush TLV Types
  title: 3.  IANA Considerations
- contents:
  - "4.  Security Considerations\n   The Address Flush RBridge Channel Protocol itself
    provides no\n   security assurances or features.  However, Address Flush protocol\n
    \  messages can be secured by use of the RBridge Channel Header\n   Extension
    [RFC7978].  It is RECOMMENDED that all RBridges that\n   implement the Address
    Flush message be configured to ignore such\n   messages unless they have been
    secured with an RBridge Channel Header\n   Extension that meets local security
    policy.\n   If RBridges receiving Address Flush messages do not require them to\n
    \  be at least authenticated, they are relatively easy to forge.  In\n   that
    case, such forged Address Flush messages can reduce network\n   efficiency, by
    purging useful learned information that will have to\n   be relearned.  This provides
    a denial-of-service attack, but cannot\n   cause incorrect operation in the sense
    that it cannot cause a frame\n   to be improperly delivered.\n   See [RFC7178]
    for general RBridge Channel Security Considerations.\n   See [RFC6325] for general
    TRILL Security Considerations.\n"
  title: 4.  Security Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC6325]  Perlman, R., Eastlake 3rd, D., Dutt, D., Gai, S., and A.\n              Ghanwani,
      \"Routing Bridges (RBridges): Base Protocol\n              Specification\",
      RFC 6325, DOI 10.17487/RFC6325, July 2011,\n              <https://www.rfc-editor.org/info/rfc6325>.\n
      \  [RFC7172]  Eastlake 3rd, D., Zhang, M., Agarwal, P., Perlman, R., and\n              D.
      Dutt, \"Transparent Interconnection of Lots of Links\n              (TRILL):
      Fine-Grained Labeling\", RFC 7172,\n              DOI 10.17487/RFC7172, May
      2014,\n              <https://www.rfc-editor.org/info/rfc7172>.\n   [RFC7178]
      \ Eastlake 3rd, D., Manral, V., Li, Y., Aldrin, S., and D.\n              Ward,
      \"Transparent Interconnection of Lots of Links\n              (TRILL): RBridge
      Channel Support\", RFC 7178,\n              DOI 10.17487/RFC7178, May 2014,\n
      \             <https://www.rfc-editor.org/info/rfc7178>.\n   [RFC7780]  Eastlake
      3rd, D., Zhang, M., Perlman, R., Banerjee, A.,\n              Ghanwani, A.,
      and S. Gupta, \"Transparent Interconnection\n              of Lots of Links
      (TRILL): Clarifications, Corrections, and\n              Updates\", RFC 7780,
      DOI 10.17487/RFC7780, February 2016,\n              <https://www.rfc-editor.org/info/rfc7780>.\n
      \  [RFC7978]  Eastlake 3rd, D., Umair, M., and Y. Li, \"Transparent\n              Interconnection
      of Lots of Links (TRILL): RBridge Channel\n              Header Extension\",
      RFC 7978, DOI 10.17487/RFC7978,\n              September 2016, <https://www.rfc-editor.org/info/rfc7978>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [RFC4762]  Lasserre, M., Ed. and V. Kompella,
      Ed., \"Virtual Private\n              LAN Service (VPLS) Using Label Distribution
      Protocol (LDP)\n              Signaling\", RFC 4762, DOI 10.17487/RFC4762, January
      2007,\n              <https://www.rfc-editor.org/info/rfc4762>.\n   [RFC8126]
      \ Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Acknowledgements\n   The following are thanked for their contributions:\n      Ramkumar
    Parameswaran, Henning Rogge\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Weiguo Hao\n   Huawei Technologies\n   101 Software Avenue,\n
    \  Nanjing 210012\n   China\n   Phone: +86-25-56623144\n   Email: haoweiguo@huawei.com\n
    \  Donald Eastlake 3rd\n   Huawei Technologies\n   155 Beaver Street\n   Milford,
    MA 01757\n   United States of America\n   Phone: +1-508-333-2270\n   Email: d3e3e3@gmail.com\n
    \  Yizhou Li\n   Huawei Technologies\n   101 Software Avenue,\n   Nanjing 210012\n
    \  China\n   Phone: +86-25-56624629\n   Email: liyizhou@huawei.com\n   Mohammed
    Umair\n   Cisco\n   Cessna Business Park, Kadubeesanahalli Village, Hobli,\n   Sarjapur,
    Varthur Main Road, Marathahalli,\n   Bengaluru, Karnataka 560087\n   India\n   Email:
    mohammed.umair2@gmail.com\n"
  title: Authors' Addresses
