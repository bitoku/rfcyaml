Abstract This document describes a simple Application Program Interface to cryptographic functions.
The main purpose of such an interface is to separate cryptographic libraries from internet applications, thus allowing an independent development of both.
It can be used in various internet applications such as [IPsec], [ISAKMP], [IKE], [TLS].
Summary Nowadays internet applications that require cryptographic functions at the level of operating system kernel, use the method that assumes the libraries must be compiled/linked together with the module (driver) which provides product functionality.
For the sake of possibility of independent development of the cryptographic modules and in order to provide a simple, effective and universal (suitable for application and as well kernel level of operating system) solution this specification offers the method to extract encrypting algorithms to the separate cryptographic modules.
This document describes simple open interface (Crypto API) to external cryptographic libraries optimized both for the application and kernel level of the operating system.
Terminology Cryptoplugin Operation system unit (driver, shared library, module) that provides cryptographic functions via
well defined (but OS  specific) interface.
Cryptolibrary Part of cryptoplugin that provides its cryptographic functionality via Crypto API.
Wrapper Part of cryptoplugin that provides interfaces translation between Crypto API and OS specific interface.
Definition of all cryptography related terms can be found in [Schneier].
The objectives of Simple CryptoAPI development are as follows: 1) To extract program implementations of encryption, one way hash function, digital signature and random numbers generation algorithms to separate, independently developed modules.
To provide version independence between using encryption modules and external cryptoplugin.
To ensure platform independent developments of encrypting algorithm modules with portable source code.
To enable independent development of modules and compatibility of modules developed independently.
In order to provide fast exchange between the cryptoplugin and its client
the cryptoplugin is implemented as a separate driver (or module) of the particular operating system (Fig.1).
Cryptoplugin consists of two parts (Fig.2): 1) cryptolibrary itself (1) 2) system dependent module (wrapper) for interaction between cryptolibrary and its client (2)
Cryptoplugin initialization / by the operating system
The system dependent module (wrapper) is delivered by the driver  client developer in the form of source code or in the form of libraries (for example, in the form of object files) for particular operating system.
The wrapper is intended for translation of system independent application interface to the particular system  dependent interface with the cryptoplugin's client.
The wrapper context does not include components specific to cryptoplugin's client functionality or to some cryptographic algorithm.
The interface described in section 3 is the standard for interaction between the submodules (1) and (2).
A cryptoplugin can contain a number of different algorithms.
Moreover, it can contain some different implementations of one particular algorithm.
The CPI (Cryptographic Program Interface) consists of a set of functions exported by encrypting algorithm submodule (cryptolibrary).
The interface functions are described below (see also Appendix A).
The function is intended for cryptoplugin initialization and obtaining information about algorithms contained in cryptoplugin.
Returns pointer to CryptoPluginInfo structure on success or NULL on fatal error.
to OS parameters (platform specific)
/ Description of parameters: param pointer to system dependent parameters transmitted to cryptoplugin by the operating system.
Intention and format of parameters are specific to each operating system and should be described in documentation on the cryptoplugin wrapper.
The function is called at the moment of cryptoplugin initialization.
If succeeded it returns the pointer to CryptoPluginInfo structure that describes the module and algorithms implemented in the cryptolibrary.
If function call did not succeed, function will return NULL or appropriate error code in CryptoPluginInfo structure status field.
If the initialization is partially succeeded then the cryptoplugin either returns CryptoPluginInfo structure transformed so that it contains only successfully initialized algorithms or returns appropriate error code in status field of CryptoAlgInfo structures that describes the reason for the failure.
Error codes for the function
: NULL fatal unsuccessful cryptoplugin initialization.
The module is unable even to indicate the reason of failure.
The pointer to cryptoplugin description structure in the case of full or partial success.
The status fields in CryptoPluginInfo structure and in comprised CryptoAlgInfo structures can be set to the following values: CRYPTO OK cryptoplugin (algorithm) is initialized successfully.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR NOT SUPPORTED (only for algorithm)
the algorithm is not supported by the module at the moment.
CRYPTO ERR HARDWARE error of hardware initialization.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
The CryptoPluginInfo structure consists of header of fixed size that generally describes cryptoplugin and array of CryptoAlgInfo structures following the header.
Each structure describes particular algorithm implemented in the cryptolibrary (see Appendix A)
: cpi version  CPI version (should be CRYPTO VER (1,0)).
CPI version determines both functions set and fields layout in CryptoPluginInfo/CryptoAlgInfo structures.
status returns the error code if cryptoplugin initialization failed (otherwise should be CRYPTO OK) name text cryptoplugin description (ASCII 7 characters only; all unused bytes must be set to 0).
version cryptoplugin version (CRYPTO VER(maj,min)).
flags various flags that characterize the cryptoplugin.
number of algs number of algorithms
the cryptolibrary comprises of (i.e. the number of consequent CryptoAlgInfo structures).
Description of CryptoAlgInfo structure Structure fields description status returns the error code
if particular algorithm initialization failed (otherwise should be CRYPTO OK).
id algorithm identifier (CRYPTO A XXX).
Values in the range of 0..249 are reserved; Values in the range of 250..32767 indicate algorithms not enrolled in standard list.
It should be emphasized that algorithm IDs are independent for each algorithm type.
But it is considered that pairs of types CRYPTO TYPE ENCRYPT and CRYPTO TYPE DECRYPT, CRYPTO TYPE SIGN and CRYPTO TYPE VERIFY,
CRYPTO TYPE COMPRESS and CRYPTO TYPE UNCOMPRESS are equivalent because they define reverse actions of the same nature.
group algorithm implementation group (variants algorithm implementations with various parameters not covered by CryptoAlgInfo structure).
Values in the range of 0..
32767 are well known numbers defined in Appendix A; vendors may arbitrarily use values in the range of 32768..65535.
type algorithm type (CRYPTO TYPE XXX).
version version of algorithm implementation (CRYPTO VER (maj,min)).
flags flags that characterize the algorithm and its implementation.
All bits, that are not defined in Appendix A, must be zeroed.
maxcontexts maximum cryptographic contexts number that are simultaneously supported by the algorithm implementation (0 if the number is unlimited or is limited only by environmental conditions like memory size).
name text algorithm name (ASCII characters use only; all unused bytes must be set to 0).
The next information depends on algorithm type:
For encryption algorithms (CRYPTO TYPE ENCRYPT and CRYPTO TYPE DECRYPT): blocklen data block length in bytes (value 1 must be used for stream cipher algorithms).
keylen encrypting (or decrypting) key length in bytes.
outlen output data size for conversion of one input data block in bytes.
Usually it is equal to blocklen.
When prediction of this value is impossible zero value must be indicated.
milen size of initialization vector (for block algorithms) or message indicator (for stream algorithms) in bytes.
For block algorithms zero value of the parameter means that the algorithm implements ECB encoding.
Non zero milen parameter means that the algorithm implements CBC encoding.
For stream algorithms zero value of the parameter means that the message indicator is not required.
For signature algorithms (CRYPTO TYPE SIGN): blocklen block size in bytes.
The length of input signature data will be padded up to this value.
When there is no need in padding the value of 1 must be set.
keylen private key length in bytes.
outlen signature length in bytes.
When prediction of this value is impossible 0 value must be indicated.
If the signature consists of several values then the total length is indicated.
milen non zero value specifies signature parameter length (random number), zero value indicates that the parameter is not required.
For signature verification algorithms (CRYPTO TYPE VERIFY): blocklen is not used.
keylen length of public key in bytes.
outlen signature length in bytes.
When prediction of this value is impossible 0 value must be indicated.
If the signature consists of several values then the total length is indicated.
For data compression algorithms (CRYPTO TYPE COMPRESS): blocklen see outlen.
outlen if the algorithm provides the fixed compression with known value
then it is indicated as blocklen/outlen ratio.
The values can be arbitrary.
If the compression value is not known then outlen is set to 0 and blocklen is not used.
For data uncompressing algorithms (CRYPTO TYPE UNCOMPRESS): blocklen see outlen.
outlen if the algorithm provides the fixed compression with known value
then it is indicated as blocklen/outlen ratio.
The values can be arbitrary.
It is natural that the ratio will be reverse to the similar value for the same algorithm but of CRYPTO TYPE COMPRESS type.
If the compression value is not known then outlen is set to 0 and blocklen is not used.
For one way hash function algorithms (CRYPTO TYPE HASH): blocklen block size in bytes.
The length of input data will be padded up to this value.
When there is no need in padding value 1 should be used.
outlen resulting hash value length in bytes.
For random number generation algorithms (CRYPTO TYPE RANDOM):
keylen initial seed length (0 if not required, for example in a physical effects based generators).
outlen resulting random number length in bytes (0 arbitrary) milen is not used.
Cryptoplugin Deinitialization Function /  Plugin deinitialization
/ CRYPTO STATUS   CryptoPluginFini(void); The function is called before the cryptoplugin operation is to be terminated.
Function execution causes closing of all open cryptographic contexts, system resources deallocation and hardware deinitialization.
The value returned is informational only.
Return codes for the function: CRYPTO OK cryptoplugin is deinitialized successfully.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR UNCLOSED HANDLES warning that there were open cryptographic contexts during cryptoplugin deinitialization.
The warning is informational only.
The open contexts are destroyed anyway.
New algorithm instance (cipher state)
Algorithm number in CryptoPluginInfo structure
The function creates cryptographic context copy inside cryptoplugin and initializes it with the provided key.
Later the handle of the context is used in calls of other algorithm functions.
Description of parameters: state pointer to the variable that will be set to the handle of the context created if succeeded.
NULL parameter value should result in the CRYPTO ERR BAD PARAMS code returned by the function.
algnum algorithm number in the cryptoplugin.
It is equal to the number of CryptoAlgInfo structure (that describes the algorithm) in CryptoPluginInfo structure.
The number begins with zero value.
It should be taken into account that it is not an algorithm identifier but its number in the cryptoplugin.
key pointer to the key (if it is required) or to the seed (for random number generation algorithm).
Generated cryptographic context is stored inside the cryptoplugin until it will be destroyed by the CryptoAlgClose function call.
The maximum number of cryptographic contexts supported by cryptoplugin can be indicated in algorithm parameters description.
If maximum number of cryptographic contexts equals to zero then the cryptographic contexts number is either unlimited (for example, for stateless algorithms like random number generators and one way hash functions) or it is limited by external factors only (like memory size).
Return codes for the function
: CRYPTO OK successful completion.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR BAD PARAMS invalid parameters (invalid algorithm number, zero pointer to the handle or to key (seed) if it is required.
Cryptographic Context Reopening Function /  Reinitialize algorithm instance
The function reinitializes an existing context.
This function is used for key change without new system resources allocation.
The function parameters are handle of opened earlier context and pointer to a new key.
Return codes for the function
: CRYPTO OK successful completion.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module may release system memory and try function call once more.
CRYPTO ERR BAD PARAMS invalid parameters (invalid algorithm number, zero pointer to the handle or to key (seed) if it is required.
Cryptographic Context Closing Function /  Destroy algorithm instance
The function provides cryptographic context destruction.
The cryptographic context handle is its parameter.
The value returned is informational only.
Return codes for the function
: CRYPTO OK successful completion.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
Check key for possible weakness
The function verifies key material whether it is weak (from the algorithm's point of view).
The function is actual for encryption/decryption or signing/verification algorithms only.
Algorithm number (similar to CryptoAlgOpen) and pointer to the key to be verified are the parameters.
Return codes for the function: CRYPTO
O the key has passed the test.
the key has not passed the test (being weak or possibly weak).
CRYPTO ERR NOT SUPPORTED is not supported.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
Data Transformation Function /  Perform CryptoTransform (depends on cipher state type)
This is a cryptographic data transformation function.
Function call results and function parameters are dependent on algorithm type.
For algorithm types CRYTO TYPE ENCRYPT, CRYPTO TYPE DECRYPT, CRYPTO TYPE SIGN and CRYPTO TYPE VERIFY (
function call results are history independent.
Stream encryption algorithms may seem an "exception".
However the same cryptoalgorithm handle must hide its history dependence.
For algorithm types CRYPTO TYPE COMPRESS, CRYPTO TYPE UNCOMPRESS and CRYPTO TYPE HASH (items 3.7.5 3.7.7)
function calls are history dependent.
For the CRYPTO TYPE RANDOM algorithm function call may be for different implementations either dependent or independent on the history.
For CRYPTO TYPE ENCRYPT Algorithm Type: The function encrypts input data.
Its parameters are intended for: inbuff pointer to the input data.
If this parameter is equal to NULL then the function should return the CRYPTO ERR BAD PARAMS error code.
inlen input data size (in bytes).
If the size indicated in algorithm description is divisible by blocklen then padding is not carried out.
Otherwise the algorithm either caries out padding according to the algorithm standard or returns appropriate error code (CRYPTO ERR BAD PARAMS).
The zero parameter is allowed so that the function quits at once and returns CRYPTO OK code.
NULL parameter value results in the outlen parameter setting to output buffer size required to encrypt the input buffer represented.
In this case the CRYPTO ERR SMALL BUFFER error should not be returned.
outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
Both the NULL parameter value and the zero value addressed result in CRYPTO ERR BAD PARAMS code returned by the function.
Its content depends on whether the block or stream algorithm is applied.
In the block algorithm case it is set to the last block encrypted.
When the first block is encrypted mi parameter specifies initial initialization vector.
In the stream algorithm case it is set to the offset of the first byte encrypted in the stream.
If the algorithm uses the message indicator and the mi parameter value is set to NULL
then function should return CRYPTO ERR BAD PARAMS.
If the algorithm (ECB Mode encrypting as an example) does not apply the message indicator then NULL value of mi is acceptable while non NULL value should be ignored.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE DECRYPT Algorithm Type: The function decrypts the input data.
Its parameters are intended for: inbuff pointer to the input data.
If the parameter is equal to NULL then the function should return the CRYPTO ERR BAD PARAMS error code.
inlen input data size (in bytes).
When the parameter is set to zero the function quits at once and CRYPTO OK code is returned.
NULL parameter value results in the outlen parameter setting to output buffer size required to decrypt the input buffer represented.
In this case the CRYPTO ERR SMALL BUFFER error should not be returned.
outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
Both the NULL parameter value and the zero value addressed result in CRYPTO ERR BAD PARAMS code returned by the function.
The content depends on whether the block or stream algorithm is applied.
In the block algorithm case it is set to the last block encrypted.
When the first block is decrypted mi specifies initial initialization vector.
In the stream algorithm case it is set to the offset of the first byte decrypted in the stream.
If the algorithm uses the message indicator and the mi parameter is set to NULL
then function should return CRYPTO ERR BAD PARAMS.
If the algorithm (ECB Mode as an example) does not apply the message indicator then NULL value of mi is acceptable while non NULL value should be ignored.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE SIGN Type Algorithm: The function signs the input data.
Its parameters are intended for: inbuff pointer to the input data.
If the parameter is equal to NULL then the function should return the CRYPTO ERR BAD PARAMS code error.
inlen input data size (in bytes).
If the size indicated in algorithm description is divisible by blocklen then padding is not carried out.
Otherwise the algorithm either caries out padding according to the algorithm standard or returns appropriate error code (CRYPTO ERR BAD PARAMS).
The zero parameter is allowed so that the function quits at once and returns CRYPTO OK code.
NULL parameter value results in the outlen parameter setting to output buffer size required to sign the input buffer represented.
In this case the CRYPTO ERR SMALL BUFFER error should not be returned.
outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
Both the NULL parameter value and the zero value addressed result in CRYPTO ERR BAD PARAMS code returned by the function.
mi pointer to signature parameter (random number usually)
if milen parameter in algorithm description is non zero.
In this case zero mi parameter indicates that the parameter should be chosen (generated) inside the algorithm.
If milen parameter in algorithm description is set to zero then mi parameter is ignored.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE VERIFY Algorithm Type:
The function verifies input data signature.
Its parameters are intended for: inbuff pointer to the input data.
If the parameter is equal to NULL then the function should return the CRYPTO ERR BAD PARAMS code error.
inlen input data size (in bytes).
The zero parameter is allowed so that the function quits at once and returns CRYPTO OK code.
outbuff  pointer to the signature.
If the parameter is set to NULL then the function returns CRYPTO ERR BAD PARAMS error code.
If the signature consists of several parts then they are combined to one array.
outlen specifies the signature length if the signature length is set to zero in algorithm description structure.
If non zero value is specified in algorithm description structure then the parameter is ignored.
If the signature consists of several parts then the maximum part length multiplied by the number of parts is specified.
CRYPTO ERR INVALID SIGNATURE invalid signature.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE COMPRESS Algorithm Type: The function compresses the input data.
Its parameters are intended for: inbuff pointer to the input data.
inlen input data size (in bytes).
The zero parameter is allowed so that the function quits at once and returns CRYPTO OK code.
NULL parameter value results in the outlen parameter setting to output buffer size required to compress the input buffer represented.
In this case the CRYPTO ERR SMALL BUFFER error should not be returned.
outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
Both the NULL parameter value and the zero value addressed result in CRYPTO ERR BAD PARAMS code returned by the function.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE UNCOMPRESS Algorithm Type: The function decompresses the input data.
Its parameters are intended for: inbuff pointer to the input data.
inlen input data size (in bytes).
The zero parameter is allowed so that the function quits at once and returns CRYPTO OK code.
NULL parameter value results in the outlen parameter setting to output buffer size required to decompress the input buffer represented.
In this case the CRYPTO ERR SMALL BUFFER error should not be returned.
outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
Both the NULL parameter value and the zero value addressed result in CRYPTO ERR BAD PARAMS code returned by the function.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE HASH Algorithm Type: The function calculates the hash value of the input data.
Its parameters are intended for: inbuff pointer to the input data.
If the parameter is of NULL value then the function calculates cumulative hash value for the data represented (taking into account all previous data represented).
If total length of all the data represented by the moment is divisible by blocklen and outbuff is non NULL
then it is returned to outbuff.
Nothing is written in outbuff when the length is not divisible by blocklen.
NULL inbuff indicates the last conversion when the input data is padded up to the blocklen size and the result is written to outbuff address.
The padding procedure is defined for the algorithm.
inlen input data size (in bytes).
The zero parameter is allowed when the function quits at once and returns CRYPTO OK code.
outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
If intermediate conversion value (inbuff is not NULL) and total length of data represented by the moment are not divisible by blocklen then outlen is set to zero and the hash value is not written in outbuff.
Both the NULL parameter value and the zero value addressed result in CRYPTO ERR BAD PARAMS code returned by the function.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
For CRYPTO TYPE RANDOM Algorithm Type: The function generates a random number.
Its parameters are intended for: inbuff pointer to the input data used for generation (when one of the pseudorandom algorithms is implemented).
NULL parameter indicates absence of the input data.
inlen input data size (in bytes).
outbuff output data outlen Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter.
If zero (i.e. arbitrary) generated number size is set in the algorithm description then the outlen value determines the number of random bytes required by the calling procedure.
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
Cryptographic Context Control Function /  Algorithm control
GET: on entry val buffer length, on exit number of bytes written to val; for CRYPTO SET: length of value to set
The function provides cryptographic context internal parameters management.
It may be used to check context parameters or to change the context state, for example it may return information about cryptoalgorithm (is given context uses hardware encryption facilities), or it may "scroll" stream algorithms context if necessary, etc.
Description of parameters: state cryptographic context handle.
cmd command (CRYPTO GET or CRYPTO SET).
Values in the range of 0..
32767 are assigned well known numbers for all algorithms.
Values in the range of 32768..
65535 mean various variables for various algorithms (may be arbitrarily used by cryptolibrary developer).
val pointer to the data buffer.
len data size (in bytes).
CRYPTO ERR GENERAL internal error.
CRYPTO ERR BAD HANDLE invalid cryptographic context handle.
CRYPTO ERR NO RESOURCES insufficient internal resources.
Contrary to general CRYPTO ERR NO RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.
CRYPTO ERR SMALL BUFFER insufficient output buffer size.
CRYPTO ERR BAD PARAMS invalid parameters.
Cryptoplugin Registration Procedure Cryptoplugin should be linked together with the cryptoplugin wrapper library delivered by the cryptoplugin's client developer according to the rules specified by the module client developer for each platform.
It should result in a driver (module) of appropriate operating system that implements the cryptolibrary functions.
The driver should be one of the drivers loaded during operating system boot.
The procedure of cryptoplugin driver installation should be defined, documented, and automated when necessary, by the cryptoplugin developer.
At the beginning of operation the driver client determines cryptoplugin driver availability and establishes interconnection with it.
Both module client configuration and current security policy determine data conversion algorithms to be chosen.
Security Considerations Security issues are addressed throughout this memo.
The interface specification as a C header file #ifndef
CRYPTPI H #define  CRYPTPI H
#endif typedef enum tag CRYPTO STATUS {
unclosed handles exist while plugin deinitializises
/  Currently defined algorithm types  /
/  Currently defined algorithm IDs (for types CRYPTO TYPE ENCRYPT & CRYPTO TYPE DECRYPT)  /
CRYPTO TYPE COMPRESS & CRYPTO
Currently defined plugin flags  /
/  algorithm implemented in hardware  /
Currently defined parameters identifiers for CryptoControl  /
Only for CRYPTO GET get current key
Plugin status  / char    name[CRYPTO
Returns pointer to CryptoPluginInfo structure on success or NULL on fatal error.
Algorithm number in CryptoPluginInfo structure
GET: on entry val buffer length, on exit number of bytes written to val; for CRYPTO SET: length of value to set  /
