- title: __initial_text__
  contents:
  - ''
- title: 'Obsoleted By: 4871                                              May 2007'
  contents:
  - "Obsoleted By: 4871                                              May 2007\n  \
    \        Domain-Based Email Authentication Using Public Keys\n               \
    \    Advertised in the DNS (DomainKeys)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines a Historic Document for the Internet\
    \ community.  It\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   \"DomainKeys\" creates a domain-level authentication framework for\n\
    \   email by using public key technology and the DNS to prove the\n   provenance\
    \ and contents of an email.\n   This document defines a framework for digitally\
    \ signing email on a\n   per-domain basis.  The ultimate goal of this framework\
    \ is to\n   unequivocally prove and protect identity while retaining the\n   semantics\
    \ of Internet email as it is known today.\n   Proof and protection of email identity\
    \ may assist in the global\n   control of \"spam\" and \"phishing\".\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Lack of Authentication Is Damaging Internet Email ..........3\n  \
    \    1.2. Digitally Signing Email Creates Credible Domain\n           Authentication\
    \ .............................................4\n      1.3. Public Keys in the\
    \ DNS .....................................4\n      1.4. Initial Deployment Is\
    \ Likely at the Border MTA .............5\n      1.5. Conveying Verification Results\
    \ to MUAs .....................5\n      1.6. Technical Minutiae Are Not Completely\
    \ Covered ..............5\n      1.7. Motivation .................................................6\n\
    \      1.8. Benefits of DomainKeys .....................................6\n  \
    \    1.9. Definitions ................................................7\n    \
    \  1.10. Requirements Notation .....................................8\n   2. DomainKeys\
    \ Overview .............................................8\n   3. DomainKeys Detailed\
    \ View ........................................8\n      3.1. Determining the Sending\
    \ Address of an Email ................9\n      3.2. Retrieving the Public Key\
    \ Given the Sending Domain ........10\n           3.2.1. Introducing \"selectors\"\
    \ ............................10\n           3.2.2. Public Key Signing and Verification\
    \ Algorithm ......11\n           3.2.3. Public key Representation in the DNS ...............13\n\
    \           3.2.4. Key Sizes ..........................................14\n  \
    \    3.3. Storing the Signature in the Email Header .................15\n    \
    \  3.4. Preparation of Email for Transit and Signing ..............17\n      \
    \     3.4.1. Preparation for Transit ............................18\n        \
    \   3.4.2. Canonicalization for Signing .......................18\n          \
    \        3.4.2.1. The \"simple\" Canonicalization Algorithm ...19\n          \
    \        3.4.2.2. The \"nofws\" Canonicalization Algorithm ....19\n      3.5.\
    \ The Signing Process .......................................20\n           3.5.1.\
    \ Identifying the Sending Domain .....................20\n           3.5.2. Determining\
    \ Whether an Email Should Be Signed ......21\n           3.5.3. Selecting a Private\
    \ Key and Corresponding\n                  Selector Information ...............................21\n\
    \           3.5.4. Calculating the Signature Value ....................21\n  \
    \         3.5.5. Prepending the \"DomainKey-Signature:\" Header .......21\n  \
    \    3.6. Policy Statement of Sending Domain ........................22\n    \
    \  3.7. The Verification Process ..................................23\n      \
    \     3.7.1. Presumption that Headers Are Not Reordered .........24\n        \
    \   3.7.2. Verification Should Render a Binary Result .........24\n          \
    \ 3.7.3. Selecting the Most Appropriate\n                  \"DomainKey-Signature:\"\
    \ Header ......................24\n           3.7.4. Retrieve the Public Key Based\
    \ on the\n                  Signature Information ..............................26\n\
    \           3.7.5. Verify the Signature ...............................27\n  \
    \         3.7.6. Retrieving Sending Domain Policy ...................27\n    \
    \       3.7.7. Applying Local Policy ..............................27\n      3.8.\
    \ Conveying Verification Results to MUAs ....................27\n   4. Example\
    \ of Use .................................................29\n      4.1. The User\
    \ Composes an Email ................................29\n      4.2. The Email Is\
    \ Signed .......................................29\n      4.3. The Email Signature\
    \ Is Verified ...........................30\n   5. Association with a Certificate\
    \ Authority .......................31\n      5.1. The \"DomainKey-X509:\" Header\
    \ ..............................31\n   6. Topics for Discussion ..........................................32\n\
    \      6.1. The Benefits of Selectors .................................32\n  \
    \    6.2. Canonicalization of Email .................................33\n    \
    \  6.3. Mailing Lists .............................................33\n      6.4.\
    \ Roving Users ..............................................33\n   7. Security\
    \ Considerations ........................................34\n      7.1. DNS .......................................................34\n\
    \           7.1.1. The DNS Is Not Currently Secure ....................34\n  \
    \         7.1.2. DomainKeys Creates Additional DNS Load .............35\n    \
    \  7.2. Key Management ............................................35\n      7.3.\
    \ Implementation Risks ......................................35\n      7.4. Privacy\
    \ Assumptions with Forwarding Addresses .............35\n      7.5. Cryptographic\
    \ Processing Is Computationally Intensive .....36\n   8. The Trial ......................................................36\n\
    \      8.1. Goals .....................................................36\n  \
    \    8.2. Results of Trial ..........................................37\n   9.\
    \ Note to Implementors Regarding TXT Records .....................37\n   10. References\
    \ ....................................................37\n      10.1. Normative\
    \ References .....................................37\n      10.2. Informative\
    \ References ...................................38\n      Appendix A - Syntax\
    \ Rules for the Tag=Value Format .............39\n      Acknowledgments ................................................40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document proposes an authentication framework for email\
    \ that\n   stores public keys in the DNS and digitally signs email on a domain\n\
    \   basis.  Separate documents discuss how this framework can be extended\n  \
    \ to validate the delivery path of email as well as facilitate per-user\n   authentication.\n\
    \   The DomainKeys specification was a primary source from which the\n   DomainKeys\
    \ Identified Mail [DKIM] specification has been derived.\n   The purpose in submitting\
    \ this document is as an historical reference\n   for deployed implementations\
    \ written prior to the DKIM specification.\n"
- title: 1.1.  Lack of Authentication Is Damaging Internet Email
  contents:
  - "1.1.  Lack of Authentication Is Damaging Internet Email\n   Authentication of\
    \ email is not currently widespread.  Not only is it\n   difficult to prove your\
    \ own identity, it is impossible to prevent\n   others from abusing your identity.\n\
    \   While most email exchanges do not intrinsically need authentication\n   beyond\
    \ context, it is the rampant abuse of identity by \"spammers\",\n   \"phishers\"\
    , and their criminal ilk that makes proof necessary.  In\n   other words, authentication\
    \ is as much about protection as proof.\n   Importantly, the inability to authenticate\
    \ email effectively\n   delegates much of the control of the disposition of inbound\
    \ email to\n   the sender, since senders can trivially assume any email address.\n\
    \   Creating email authentication is the first step to returning\n   dispositional\
    \ control of email to the recipient.\n   For the purposes of this document, authentication\
    \ is seen from a user\n   perspective, and is intended to answer the question\
    \ \"who sent this\n   email?\" where \"who\" is the email address the recipient\
    \ sees and \"this\n   email\" is the content that the recipient sees.\n"
- title: 1.2.  Digitally Signing Email Creates Credible Domain Authentication
  contents:
  - "1.2.  Digitally Signing Email Creates Credible Domain Authentication\n   DomainKeys\
    \ combines public key cryptography and the DNS to provide\n   credible domain-level\
    \ authentication for email.\n   When an email claims to originate from a certain\
    \ domain, DomainKeys\n   provides a mechanism by which the recipient system can\
    \ credibly\n   determine that the email did in fact originate from a person or\n\
    \   system authorized to send email for that domain.\n   The authentication provided\
    \ by DomainKeys works in a number of\n   scenarios in which other authentication\
    \ systems fail or create\n   complex operational requirements.  These include\
    \ the following:\n      o forwarded email\n      o distributed sending systems\n\
    \      o authorized third-party sending\n   This base definition of DomainKeys\
    \ is intended to primarily enable\n   domain-level authenticity.  Whether a given\
    \ message is really sent by\n   the purported user within the domain is outside\
    \ the scope of the base\n   definition.  Having said that, this specification\
    \ includes the\n   possibility that some domains may wish to delegate fine-grained\n\
    \   authentication to individual users.\n"
- title: 1.3.  Public Keys in the DNS
  contents:
  - "1.3.  Public Keys in the DNS\n   DomainKeys differs from traditional hierarchical\
    \ public key systems\n   in that it leverages the DNS for public key management,\
    \ placing\n   complete and direct control of key generation and management with\
    \ the\n   owner of the domain.  That is, if you have control over the DNS for\
    \ a\n   given domain, you have control over your DomainKeys for that domain.\n\
    \   The DNS is proposed as the initial mechanism for publishing public\n   keys.\
    \  DomainKeys is specifically designed to be extensible to other\n   key-fetching\
    \ services as they become available.\n"
- title: 1.4.  Initial Deployment Is Likely at the Border MTA
  contents:
  - "1.4.  Initial Deployment Is Likely at the Border MTA\n   For practical reasons,\
    \ it is expected that initial implementations of\n   DomainKeys will be deployed\
    \ on Mail Transfer Agents (MTAs) that\n   accept or relay email across administrative\
    \ or organizational\n   boundaries.  There are numerous advantages to deployment\
    \ at the\n   border MTA, including:\n      o  a reduction in the number of MTAs\
    \ that have to be changed to\n         support an implementation of DomainKeys\n\
    \      o  a reduction in the number of MTAs involved in transmitting the\n   \
    \      email between a signing system and a verifying system, thus\n         reducing\
    \ the number of places that can make accidental changes\n         to the contents\n\
    \      o  removing the need to implement DomainKeys within an internal\n     \
    \    email network.\n   However, there is no necessity to deploy DomainKeys at\
    \ the border as\n   signing and verifying can effectively occur anywhere from\
    \ the border\n   MTA right back to the Mail User Agent (MUA).  In particular,\
    \ the best\n   place to sign an email for many domains is likely to be at the\
    \ point\n   of SUBMISSION where the sender is often authenticated through SMTP\n\
    \   AUTH or other identifying mechanisms.\n"
- title: 1.5.  Conveying Verification Results to MUAs
  contents:
  - "1.5.  Conveying Verification Results to MUAs\n   It follows that testing the\
    \ authenticity of an email results in some\n   action based on the results of\
    \ the test.  Oftentimes, the action is\n   to notify the MUA in some way -- typically\
    \ via a header line.\n   The \"Domainkey-Status:\" header is defined in this specification\
    \ for\n   recording authentication results in the email.\n"
- title: 1.6.  Technical Minutiae Are Not Completely Covered
  contents:
  - "1.6.  Technical Minutiae Are Not Completely Covered\n   The intent of this specification\
    \ is to communicate the fundamental\n   characteristics of DomainKeys for an implementor.\
    \  However, some\n   aspects are derived from the functionality of the openssl\
    \ command\n   [OPENSSL] and, rather than duplicate that documentation, implementors\n\
    \   are expected to understand the mechanics of the openssl command,\n   sufficient\
    \ to complete the implementation.\n"
- title: 1.7.  Motivation
  contents:
  - "1.7.  Motivation\n   The motivation for DomainKeys is to define a simple, cheap,\
    \ and\n   \"sufficiently effective\" mechanism by which domain owners can control\n\
    \   who has authority to send email using their domain.  To this end, the\n  \
    \ designers of DomainKeys set out to build a framework that:\n      o  is transparent\
    \ and compatible with the existing email\n         infrastructure\n      o  requires\
    \ no new infrastructure\n      o  can be implemented independently of clients\
    \ in order to reduce\n         deployment time\n      o  does not require the\
    \ use of a central certificate authority\n         that might impose fees for\
    \ certificates or introduce delays to\n         deployment\n      o  can be deployed\
    \ incrementally\n   While we believe that DomainKeys meets these criteria, it\
    \ is by no\n   means a perfect solution.  The current Internet imposes considerable\n\
    \   compromises on any similar scheme, and readers should be careful not\n   to\
    \ misinterpret the information provided in this document to imply\n   that DomainKeys\
    \ makes stronger credibility statements than it is able\n   to do.\n"
- title: 1.8.  Benefits of DomainKeys
  contents:
  - "1.8.  Benefits of DomainKeys\n   As the reader will discover, DomainKeys is solely\
    \ an authentication\n   system.  It is not a magic bullet for spam, nor is it\
    \ an\n   authorization system, a reputation system, a certification system, or\n\
    \   a trust system.\n   However, a strong authentication system such as DomainKeys\
    \ creates an\n   unimpeachable framework within which comprehensive authorization\n\
    \   systems, reputations systems, and their ilk can be developed.\n"
- title: 1.9.  Definitions
  contents:
  - "1.9.  Definitions\n   With reference to the following sample email:\n   Line\
    \   Data\n   Number Bytes               Content\n   ----   --- --------------------------------------------\n\
    \     01    46 From: \"Joe SixPack\" <joe@football.example.com>\n     02    40\
    \ To: \"Suzie Q\" <suzie@shopping.example.net>\n     03    25 Subject: Is dinner\
    \ ready?\n     04    43 Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n     05 \
    \   40 Comment: This comment has a continuation\n     06    51   because this\
    \ line begins with folding white space\n     07    60 Message-ID: <20030712040037.46341@football.example.com>\n\
    \     08    00\n     09    03 Hi.\n     10    00\n     11    37 We lost the game.\
    \ Are you hungry yet?\n     12    00\n     13    04 Joe.\n     14    00\n    \
    \ 15    00\n   Line 01 is the first line of the email and the first line of the\n\
    \         headers.\n   Lines 05 and 06 constitute the \"Comment:\" header.\n \
    \  Line 06 is a continuation header line.\n   Line 07 is the last line of the\
    \ headers.\n   Line 08 is the empty line that separates the header from the body.\n\
    \   Line 09 is the first line of the body.\n   Lines 10, 12, 14, and 15 are empty\
    \ lines.\n   Line 13 is the last non-empty line of the email.\n   Line 15 is the\
    \ last line of the body and the last line of the email.\n   Lines 01 to 15 constitute\
    \ the complete email.\n   Line 01 is earlier than line 02, and line 02 is later\
    \ than line 01.\n"
- title: 1.10.  Requirements Notation
  contents:
  - "1.10.  Requirements Notation\n   This document occasionally uses terms that appear\
    \ in capital letters.\n   When the terms \"MUST\", \"SHOULD\", \"RECOMMENDED\"\
    , \"MUST NOT\", \"SHOULD\n   NOT\", and \"MAY\" appear capitalized, they are being\
    \ used to indicate\n   particular requirements of this specification.  A discussion\
    \ of the\n   meanings of these terms appears in [RFC2119].\n"
- title: 2.  DomainKeys Overview
  contents:
  - "2.  DomainKeys Overview\n   Under DomainKeys, a domain owner generates one or\
    \ more private/public\n   key pairs that will be used to sign messages originating\
    \ from that\n   domain.  The domain owner places the public key in his domain\n\
    \   namespace (i.e., in a DNS record associated with that domain), and\n   makes\
    \ the private key available to the outbound email system.  When\n   an email is\
    \ submitted by an authorized user of that domain, the email\n   system uses the\
    \ private key to digitally sign the email associated\n   with the sending domain.\
    \  The signature is added as a header to the\n   email, and the message is transferred\
    \ to its recipients in the usual\n   way.\n   When a message is received with\
    \ a DomainKey signature header, the\n   receiving system can verify the signature\
    \ as follows:\n      1. Extract the signature and claimed sending domain from\
    \ the\n         email.\n      2. Fetch the public key from the claimed sending\
    \ domain namespace.\n      3. Use public key to determine whether the signature\
    \ of the email\n         has been generated with the corresponding private key,\
    \ and thus\n         whether the email was sent with the authority of the claimed\n\
    \         sending domain.\n   In the event that an email arrives without a signature\
    \ or when the\n   signature verification fails, the receiving system retrieves\
    \ the\n   policy of the claimed sending domain to ascertain the preferred\n  \
    \ disposition of such email.\n   Armed with this information, the recipient system\
    \ can apply local\n   policy based on the results of the signature test.\n"
- title: 3.  DomainKeys Detailed View
  contents:
  - "3.  DomainKeys Detailed View\n   This section discusses the specifics of DomainKeys\
    \ that are needed to\n   create interoperable implementations.  This section answers\
    \ the\n   following questions:\n      Given an email, how is the sending domain\
    \ determined?\n      How is the public key retrieved for a sending domain?\n \
    \     As email transits the email system, it can potentially go through\n    \
    \  a number of changes.  Which parts of the email are included in the\n      signature\
    \ and how are they protected from such transformations?\n      How is the signature\
    \ represented in the email?\n      If a signature is not present, or a verification\
    \ fails, how does\n      the recipient determine the policy intent of the sending\
    \ domain?\n      Finally, on verifying the authenticity of an email, how is that\n\
    \      result conveyed to participating MUAs?\n   While there are many alternative\
    \ design choices, most lead to\n   comparable functionality.  The overriding selection\
    \ criteria used to\n   choose among the alternatives are as follows:\n      o\
    \  use deployed technology whenever possible\n      o  prefer ease of implementation\n\
    \      o  avoid trading risk for excessive flexibility or\n         interoperability\n\
    \      o  include basic flexibility\n   Adherence to these criteria implies that\
    \ some existing email\n   implementations will require changes to participate\
    \ in DomainKeys.\n   Ultimately, some hard choices need to be made regarding which\n\
    \   requirements are more important.\n"
- title: 3.1.  Determining the Sending Address of an Email
  contents:
  - "3.1.  Determining the Sending Address of an Email\n   The goal of DomainKeys\
    \ is to give the recipient confidence that the\n   email originated from the claimed\
    \ sender.  As with much of Internet\n   email, agreement over what constitutes\
    \ the \"sender\" is no easy\n   matter.  Forwarding systems and mailing lists\
    \ add serious\n   complications to an overtly simple question.  From the point\
    \ of view\n   of the recipient, the authenticity claim should be directed at the\n\
    \   domain most visible to the recipient.\n   In the first instance, the most\
    \ visible address is clearly the RFC\n   2822 \"From:\" address [RFC2822].  Therefore,\
    \ a conforming email MUST\n   contain a single \"From:\" header from which an\
    \ email address with a\n   domain name can be extracted.\n   A conforming email\
    \ MAY contain a single RFC 2822 \"Sender:\" header\n   from which an email address\
    \ with a domain name can be extracted.\n   If the email has a valid \"From:\"\
    \ and a valid \"Sender:\" header, then\n   the signer MUST use the sending address\
    \ in the \"Sender:\" header.\n   If the email has a valid \"From:\" and no \"\
    Sender:\" header, then the\n   signer MUST use the first sending address in the\
    \ \"From:\" header.\n   In all other cases, a signer MUST NOT sign the email.\
    \  Implementors\n   should note that an email with a \"Sender:\" header and no\
    \ \"From:\"\n   header MUST NOT be signed.\n   The domain name in the sending\
    \ address constitutes the \"sending\n   domain\".\n"
- title: 3.2.  Retrieving the Public Key Given the Sending Domain
  contents:
  - "3.2.  Retrieving the Public Key Given the Sending Domain\n   To avoid namespace\
    \ conflicts, it is proposed that the DNS namespace\n   \"_domainkey.\" be reserved\
    \ within the sending domain for storing\n   public keys, e.g., if the sending\
    \ domain is example.net, then the\n   public keys for that domain are stored in\
    \ the _domainkey.example.net\n   namespace.\n"
- title: 3.2.1.  Introducing "selectors"
  contents:
  - "3.2.1.  Introducing \"selectors\"\n   To support multiple concurrent public keys\
    \ per sending domain, the\n   DNS namespace is further subdivided with \"selectors\"\
    .  Selectors are\n   arbitrary names below the \"_domainkey.\" namespace.  A selector\
    \ value\n   and length MUST be legal in the DNS namespace and in email headers\n\
    \   with the additional provision that they cannot contain a semicolon.\n   Examples\
    \ of namespaces using selectors are as follows:\n      \"coolumbeach._domainkey.example.net\"\
    \n      \"sebastopol._domainkey.example.net\"\n      \"reykjavik._domainkey.example.net\"\
    \n      \"default._domainkey.example.net\"\n   and\n      \"2005.pao._domainkey.example.net\"\
    \n      \"2005.sql._domainkey.example.net\"\n      \"2005.rhv._domainkey.example.net\"\
    \n   Periods are allowed in selectors and are to be treated as component\n   separators.\
    \  In the case of DNS queries, that means the period\n   defines subdomain boundaries.\n\
    \   The number of public keys and corresponding selectors for each domain\n  \
    \ is determined by the domain owner.  Many domain owners will be\n   satisfied\
    \ with just one selector, whereas administratively\n   distributed organizations\
    \ may choose to manage disparate selectors\n   and key pairs in different regions,\
    \ or on different email servers.\n   Beyond administrative convenience, selectors\
    \ make it possible to\n   seamlessly replace public keys on a routine basis. \
    \ If a domain\n   wishes to change from using a public key associated with selector\n\
    \   \"2005\" to a public key associated with selector \"2006\", it merely\n  \
    \ makes sure that both public keys are advertised in the DNS\n   concurrently\
    \ for the transition period during which email may be in\n   transit prior to\
    \ verification.  At the start of the transition\n   period, the outbound email\
    \ servers are configured to sign with the\n   \"2006\" private key.  At the end\
    \ of the transition period, the \"2005\"\n   public key is removed from the DNS.\n\
    \   While some domains may wish to make selector values well known,\n   others\
    \ will want to take care not to allocate selector names in a way\n   that allows\
    \ harvesting of data by outside parties.  For example, if\n   per-user keys are\
    \ issued, the domain owner will need to make the\n   decision as to whether to\
    \ make this selector associated directly with\n   the user name or make it some\
    \ unassociated random value, such as the\n   fingerprint of the public key.\n"
- title: 3.2.2.  Public Key Signing and Verification Algorithm
  contents:
  - "3.2.2.  Public Key Signing and Verification Algorithm\n   The default signature\
    \ is an RSA signed SHA1 digest of the complete\n   email.\n   For ease of explanation,\
    \ the openssl command is used throughout this\n   document to describe the mechanism\
    \ by which keys and signatures are\n   managed.\n   One way to generate a 768-bit\
    \ private key suitable for DomainKeys is\n   to use openssl like this:\n   $ openssl\
    \ genrsa -out rsa.private 768\n   which results in the file rsa.private containing\
    \ the key information\n   similar to this:\n   -----BEGIN RSA PRIVATE KEY-----\n\
    \   MIIByQIBAAJhAKJ2lzDLZ8XlVambQfMXn3LRGKOD5o6lMIgulclWjZwP56LRqdg5\n   ZX15bhc/GsvW8xW/R5Sh1NnkJNyL/cqY1a+GzzL47t7EXzVc+nRLWT1kwTvFNGIo\n\
    \   AUsFUq+J6+OprwIDAQABAmBOX0UaLdWWusYzNol++nNZ0RLAtr1/LKMX3tk1MkLH\n   +Ug13EzB2RZjjDOWlUOY98yxW9/hX05Uc9V5MPo+q2Lzg8wBtyRLqlORd7pfxYCn\n\
    \   Kapi2RPMcR1CxEJdXOkLCFECMQDTO0fzuShRvL8q0m5sitIHlLA/L+0+r9KaSRM/\n   3WQrmUpV+fAC3C31XGjhHv2EuAkCMQDE5U2nP2ZWVlSbxOKBqX724amoL7rrkUew\n\
    \   ti9TEjfaBndGKF2yYF7/+g53ZowRkfcCME/xOJr58VN17pejSl1T8Icj88wGNHCs\n   FDWGAH4EKNwDSMnfLMG4WMBqd9rzYpkvGQIwLhAHDq2CX4hq2tZAt1zT2yYH7tTb\n\
    \   weiHAQxeHe0RK+x/UuZ2pRhuoSv63mwbMLEZAjAP2vy6Yn+f9SKw2mKuj1zLjEhG\n   6ppw+nKD50ncnPoP322UMxVNG4Eah0GYJ4DLP0U=\n\
    \   -----END RSA PRIVATE KEY-----\n   Once a private key has been generated, the\
    \ openssl command can be\n   used to sign an appropriately prepared email, like\
    \ this:\n   $ openssl dgst -sign rsa.private -sha1 <input.file\n   which results\
    \ in signature data similar to this when represented in\n   Base64 [BASE64] format:\n\
    \   aoiDeX42BB/gP4ScqTdIQJcpAObYr+54yvctqc4rSEFYby9+omKD3pJ/TVxATeTz\n   msybuW3WZiamb+mvn7f3rhmnozHJ0yORQbnn4qJQhPbbPbWEQKW09AMJbyz/0lsl\n\
    \   How this signature is added to the email is discussed later in this\n   document.\n\
    \   To extract the public key component from the private key, use openssl\n  \
    \ like this:\n   $ openssl rsa -in rsa.private -out rsa.public -pubout -outform\
    \ PEM\n   which results in the file rsa.public containing the key information\n\
    \   similar to this:\n   -----BEGIN PUBLIC KEY-----\n   MHwwDQYJKoZIhvcNAQEBBQADawAwaAJhAKJ2lzDLZ8XlVambQfMXn3LRGKOD5o6l\n\
    \   MIgulclWjZwP56LRqdg5ZX15bhc/GsvW8xW/R5Sh1NnkJNyL/cqY1a+GzzL47t7E\n   XzVc+nRLWT1kwTvFNGIoAUsFUq+J6+OprwIDAQAB\n\
    \   -----END PUBLIC KEY-----\n   This public key data is placed in the DNS.\n\
    \   With the signature, canonical email contents and public key, a\n   verifying\
    \ system can test the validity of the signature.  The openssl\n   invocation to\
    \ verify a signature looks like this:\n $ openssl dgst -verify rsa.public -sha1\
    \ -signature sig.file <input.file\n"
- title: 3.2.3.  Public key Representation in the DNS
  contents:
  - "3.2.3.  Public key Representation in the DNS\n   There is currently no standard\
    \ method defined for storing public keys\n   in the DNS.  As an interim measure,\
    \ the public key is stored as a TXT\n   record derived from a Privacy-Enhanced\
    \ Mail (PEM) format [PEM], that\n   is, as a Base64 representation of a DER encoded\
    \ key.  Here is an\n   example of a 768-bit RSA key in PEM form:\n   -----BEGIN\
    \ PUBLIC KEY-----\n   MHwwDQYJKoZIhvcNAQEBBQADawAwaAJhAKJ2lzDLZ8XlVambQfMXn3LRGKOD5o6l\n\
    \   MIgulclWjZwP56LRqdg5ZX15bhc/GsvW8xW/R5Sh1NnkJNyL/cqY1a+GzzL47t7E\n   XzVc+nRLWT1kwTvFNGIoAUsFUq+J6+OprwIDAQAB\n\
    \   -----END PUBLIC KEY-----\n   To save scarce DNS packet space and aid extensibility,\
    \ the PEM\n   wrapping MUST be removed and the remaining public key data along\
    \ with\n   other attributes relevant to DomainKeys functionality are stored as\n\
    \   tag=value pairs separated by semicolons, for example, as in the\n   following:\n\
    \   brisbane._domainkey IN TXT \"g=; k=rsa; p=MHww ... IDAQAB\"\n   Verifiers\
    \ MUST support key sizes of 512, 768, 1024, 1536 and 2048\n   bits.  Signers MUST\
    \ support at least one of the verifier supported\n   key sizes.\n   The current\
    \ valid tags are as follows:\n      g = granularity of the key.  If present with\
    \ a non-zero length\n          value, this value MUST exactly match the local\
    \ part of the\n          sending address.  This tag is optional.\n          The\
    \ intent of this tag is to constrain which sending address\n          can legitimately\
    \ use this selector.  An email with a sending\n          address that does not\
    \ match the value of this tag constitutes\n          a failed verification.\n\
    \      k = key type (rsa is the default).  Signers and verifiers MUST\n      \
    \    support the 'rsa' key type.  This tag is optional.\n      n = Notes that\
    \ may be of interest to a human.  No interpretation\n          is made by any\
    \ program.  This tag is optional.\n      p = public key data, encoded as a Base64\
    \ string.  An empty value\n          means that this public key has been revoked.\
    \  This tag MUST be\n          present.\n      t = a set of flags that define\
    \ boolean attributes.  Valid\n          attributes are as follows:\n         \
    \ y = testing mode.  This domain is testing DomainKeys and\n              unverified\
    \ email MUST NOT be treated differently from\n              verified email.  Recipient\
    \ systems MAY wish to track\n              testing mode results to assist the\
    \ sender.\n          This tag is optional.\n   (Syntax rules for the tag=value\
    \ format are discussed in Appendix A.)\n   Keeping the size of the TXT record\
    \ to a minimum is important as some\n   implementations of content and caching\
    \ DNS servers are reported to\n   have problems supporting large TXT records.\
    \  In the example above,\n   the encoding generates a 182-byte TXT record.  That\
    \ this encoding is\n   less than 512 bytes is of particular significance as it\
    \ fits within a\n   single UDP response packet.  With careful selection of query\
    \ values,\n   a TXT record can accommodate a 2048 bit key.\n   For the same size\
    \ restriction reason, the \"n\" tag SHOULD be used\n   sparingly.  The most likely\
    \ use of this tag is to convey a reason why\n   a public key might have been revoked.\
    \  In this case, set the \"n\" tag\n   to the explanation and remove the public\
    \ key value from the \"p\" tag.\n"
- title: 3.2.4.  Key Sizes
  contents:
  - "3.2.4.  Key Sizes\n   Selecting appropriate key sizes is a trade-off between\
    \ cost,\n   performance, and risk.  This specification does not define either\n\
    \   minimum or maximum key sizes -- that decision is a matter for each\n   domain\
    \ owner.\n   Factors that should influence this decision include the following:\n\
    \      o  the practical constraint that a 2048-bit key is the largest key\n  \
    \       that fits within a 512-byte DNS UDP response packet\n      o  larger keys\
    \ impose higher CPU costs to verify and sign email\n      o  keys can be replaced\
    \ on a regular basis; thus, their lifetime\n         can be relatively short\n\
    \      o  the security goals of this specification are modest compared to\n  \
    \       typical goals of public key systems\n   In general, it is expected that\
    \ most domain owners will use keys that\n   are no larger than 1024 bits.\n"
- title: 3.3.  Storing the Signature in the Email Header
  contents:
  - "3.3.  Storing the Signature in the Email Header\n   The signature of the email\
    \ is stored in the \"DomainKey-Signature:\"\n   header.  This header contains\
    \ all of the signature and key-fetching\n   data.\n   When generating the signed\
    \ email, the \"DomainKey-Signature:\" header\n   MUST precede the original email\
    \ headers presented to the signature\n   algorithm.\n   The \"DomainKey-Signature:\"\
    \ header is not included in the signature\n   calculation.\n   For extensibility,\
    \ the \"DomainKey-Signature:\" header contains\n   tag=value pairs separated by\
    \ semicolons, for example, as in the\n   following:\n   DomainKey-Signature: a=rsa-sha1;\
    \ s=brisbane; d=example.net;\n     q=dns; c=simple\n   The current valid tags\
    \ are as follows:\n      a = The algorithm used to generate the signature.  The\
    \ default is\n          \"rsa-sha1\", an RSA signed SHA1 digest.  Signers and\
    \ verifiers\n          MUST support \"rsa-sha1\".\n      b = The signature data,\
    \ encoded as a Base64 string.  This tag MUST\n          be present.\n        \
    \  Whitespace is ignored in this value and MUST be removed when\n          reassembling\
    \ the original signature.  This is another way of\n          saying that the signing\
    \ process can safely insert folding\n          whitespace in this value to conform\
    \ to line-length limits.\n      c = Canonicalization algorithm.  The method by\
    \ which the headers\n          and content are prepared for presentation to the\
    \ signing\n          algorithm.  This tag MUST be present.  Verifiers MUST support\n\
    \          \"simple\" and \"nofws\".  Signers MUST support at least one of\n \
    \         the verifier-supported algorithms.\n      d = The domain name of the\
    \ signing domain.  This tag MUST be\n          present.  In conjunction with the\
    \ selector tag, this domain\n          forms the basis of the public key query.\
    \  The value in this\n          tag MUST match the domain of the sending email\
    \ address or MUST\n          be one of the parent domains of the sending email\
    \ address.\n          Domain name comparison is case insensitive.\n          \
    \   The matching process for this tag is called subdomain\n             matching,\
    \ as the sending email address must be the domain\n             or subdomain of\
    \ the value.\n      h = A colon-separated list of header field names that identify\
    \ the\n          headers presented to the signing algorithm.  If present, the\n\
    \          value MUST contain the complete list of headers in the order\n    \
    \      presented to the signing algorithm.\n          If present, this tag MUST\
    \ include the header that was used to\n          identify the sending domain,\
    \ i.e., the \"From:\" or \"Sender:\"\n          header; thus, this tag can never\
    \ contain an empty value.\n          If this tag is not present, all headers subsequent\
    \ to the\n          signature header are included in the order found in the email.\n\
    \          A verifier MUST support this tag.  A signer MAY support this\n    \
    \      tag.  If a signer generates this tag, it MUST include all\n          email\
    \ headers in the original email, as a verifier MAY remove\n          or render\
    \ suspicious, lines that are not included in the\n          signature.\n     \
    \     In the presence of duplicate headers, a signer may include\n          duplicate\
    \ entries in the list of headers in this tag.  If a\n          header is included\
    \ in this list, a verifier must include all\n          occurrences of that header,\
    \ subsequent to the \"DomainKey-\n          Signature:\" header in the verification.\n\
    \          If a header identified in this list is not found after the\n      \
    \    \"DomainKey-Signature:\" header in the verification process, a\n        \
    \  verifier may \"look\" for a matching header prior to the\n          \"DomainKey-Signature:\"\
    \ header; however, signers should not\n          rely on this as early experience\
    \ suggests that most verifiers\n          do not try to \"look\" back before the\
    \ \"DomainKey-Signature:\"\n          header.\n          Whitespace is ignored\
    \ in this value and header comparisons are\n          case insensitive.\n    \
    \  q = The query method used to retrieve the public key.  This tag\n         \
    \ MUST be present.  Currently, the only valid value is \"dns\",\n          which\
    \ defines the DNS lookup algorithm described in this\n          document.  Verifiers\
    \ and signers MUST support \"dns\".\n      s = The selector used to form the query\
    \ for the public key.  This\n          tag MUST be present.  In the DNS query\
    \ type, this value is\n          prepended to the \"_domainkey.\" namespace of\
    \ the sending\n          domain.\n   (Syntax rules for the tag=value format are\
    \ discussed in Appendix A.)\n   Here is an example of a signature header spread\
    \ across multiple\n   continuation lines:\n      DomainKey-Signature: a=rsa-sha1;\
    \ s=brisbane; d=example.net;\n       c=simple; q=dns;\n       b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ\n\
    \         VoG4ZHRNiYzR;\n   Extreme care must be taken to ensure that any new\
    \ tags added to this\n   header are defined and used solely for the purpose of\
    \ fetching and\n   verifying the signature.  Any semantics beyond verification\
    \ cannot be\n   trusted, as this header is not protected by the signature.\n \
    \  If additional semantics not pertaining directly to signature\n   verification\
    \ are required, they must only be added as subsequent\n   headers protected by\
    \ the signature.  Semantic additions might include\n   audit information describing\
    \ the initial submission.\n"
- title: 3.4.  Preparation of Email for Transit and Signing
  contents:
  - "3.4.  Preparation of Email for Transit and Signing\n   The fundamental purpose\
    \ of a cryptographic signature is to ensure\n   that the signed content matches\
    \ the contents presented for\n   verification.  However, unlike just about every\
    \ other Internet\n   protocol, the email content is routinely modified as it enters\
    \ and\n   transits the email system.\n   Fortunately most of the modifications\
    \ typically made to email can be\n   predicted and consequently accounted for\
    \ when signing and verifying.\n   To maximize the chance of a successful verification,\
    \ submitted email\n   should be prepared for transport prior to signing, and the\
    \ data\n   presented to the signing algorithm is canonicalized to exclude the\n\
    \   most common and minor changes made to email.\n"
- title: 3.4.1.  Preparation for Transit
  contents:
  - "3.4.1.  Preparation for Transit\n   The SMTP protocol defines a number of potential\
    \ limitations to email\n   transport, particularly pertaining to line lengths\
    \ and 8-bit content.\n   While the editor has observed that most modern SMTP implementations\n\
    \   accept 8-bit email and long lines, some implementations still do not.\n  \
    \ Consequently, a DomainKeys implementation SHOULD prepare an email to\n   be\
    \ suitable for the lowest common denominator of SMTP prior to\n   presenting the\
    \ email for signing.\n"
- title: 3.4.2.  Canonicalization for Signing
  contents:
  - "3.4.2.  Canonicalization for Signing\n   DomainKeys is initially expected to\
    \ be deployed at, or close to, the\n   email borders of an organization rather\
    \ than in MUAs or SUBMISSION\n   servers.  In other words, the signing and verifying\
    \ algorithms\n   normally apply after an email has been packaged, transmogrified,\
    \ and\n   generally prepared for transmission across the Internet via SMTP and,\n\
    \   thus the likelihood of the email being subsequently modified is\n   reduced.\n\
    \   Nonetheless, empirical evidence suggests that some mail servers and\n   relay\
    \ systems modify email in transit, potentially invalidating a\n   signature.\n\
    \   There are two competing perspectives on such modifications.  For most\n  \
    \ senders, mild modification of email is immaterial to the\n   authentication\
    \ status of the email.  For such senders, a\n   canonicalization algorithm that\
    \ survives modest in-transit\n   modification is preferred.\n   For other senders\
    \ however, any modification of the email - however\n   minor -- results in a desire\
    \ for the authentication to fail.  In\n   other words, such senders do not want\
    \ a modified email to be seen as\n   being authorized by them.  These senders\
    \ prefer a canonicalization\n   algorithm that does not tolerate in-transit modification\
    \ of the\n   signed email.\n   To satisfy both requirements, two canonicalization\
    \ algorithms are\n   defined.  A \"simple\" algorithm that tolerates almost no\
    \ modification\n   and a \"nofws\" algorithm that tolerates common modifications\
    \ as\n   whitespace replacement and header line rewrapping.\n   A sender may choose\
    \ either algorithm when signing an email.  A\n   verifier MUST be able to process\
    \ email using either algorithm.\n   Either algorithm can be used in conjunction\
    \ with the \"h\" tag in the\n   \"DomainKey-Signature:\" header.\n   Canonicalization\
    \ simply prepares the email for the signing or\n   verification algorithm.  It\
    \ does not change the transmitted data in\n   any way.\n"
- title: 3.4.2.1.  The "simple" Canonicalization Algorithm
  contents:
  - "3.4.2.1.  The \"simple\" Canonicalization Algorithm\n   o  Each line of the email\
    \ is presented to the signing algorithm in\n      the order it occurs in the complete\
    \ email, from the first line of\n      the headers to the last line of the body.\n\
    \   o  If the \"h\" tag is used, only those header lines (and their\n      continuation\
    \ lines if any) added to the \"h\" tag list are included.\n   o  The \"h\" tag\
    \ only constrains header lines.  It has no bearing on\n      body lines, which\
    \ are always included.\n   o  Remove any local line terminator.\n   o  Append\
    \ CRLF to the resulting line.\n   o  All trailing empty lines are ignored.  An\
    \ empty line is a line of\n      zero length after removal of the local line terminator.\n\
    \      If the body consists entirely of empty lines, then the header/body\n  \
    \    line is similarly ignored.\n"
- title: 3.4.2.2.  The "nofws" Canonicalization Algorithm
  contents:
  - "3.4.2.2.  The \"nofws\" Canonicalization Algorithm\n   The \"No Folding Whitespace\"\
    \ algorithm (nofws) is more complicated\n   than the \"simple\" algorithm for\
    \ two reasons; folding whitespace is\n   removed from all lines and header continuation\
    \ lines are unwrapped.\n      o  Each line of the email is presented to the signing\
    \ algorithm in\n         the order it occurs in the complete email, from the first\
    \ line\n         of the headers to the last line of the body.\n      o  Header\
    \ continuation lines are unwrapped so that header lines\n         are processed\
    \ as a single line.\n      o  If the \"h\" tag is used, only those header lines\
    \ (and their\n         continuation lines if any) added to the \"h\" tag list\
    \ are\n         included.\n      o  The \"h\" tag only constrains header lines.\
    \  It has no bearing on\n         body lines, which are always included.\n   \
    \   o  For each line in the email, remove all folding whitespace\n         characters.\
    \  Folding whitespace is defined in RFC 2822 as being\n         the decimal ASCII\
    \ values 9 (HTAB), 10 (NL), 13 (CR), and 32\n         (SP).\n      o  Append CRLF\
    \ to the resulting line.\n      o  Trailing empty lines are ignored.  An empty\
    \ line is a line of\n         zero length after removal of the local line terminator.\
    \  Note\n         that the test for an empty line occurs after removing all\n\
    \         folding whitespace characters.\n         If the body consists entirely\
    \ of empty lines, then the\n         header/body line is similarly ignored.\n"
- title: 3.5.  The Signing Process
  contents:
  - "3.5.  The Signing Process\n   The previous sections defined the various components\
    \ and mechanisms\n   needed to sign an email.  This section brings those together\
    \ to\n   define the complete process of signing an email.\n   A signer MUST only\
    \ sign email from submissions that are authorized to\n   use the sending address.\n\
    \   Once authorization of the submission has been determined, the signing\n  \
    \ process consists of the following steps:\n      o  identifying the sending domain\n\
    \      o  determining if an email should be signed\n      o  selecting a private\
    \ key and corresponding selector information\n      o  calculating the signature\
    \ value\n      o  prepending the \"DomainKey-Signature:\" header\n   If an email\
    \ cannot be signed for some reason, it is a local policy\n   decision as to what\
    \ to do with that email.\n"
- title: 3.5.1.  Identifying the Sending Domain
  contents:
  - "3.5.1.  Identifying the Sending Domain\n   The sending domain is determined by\
    \ finding the email address in the\n   \"Sender:\" header, or, if the \"Sender:\"\
    \ header is not present, the\n   first email address of the \"From:\" header is\
    \ used to determine the\n   sending domain.\n   If the email has an invalid \"\
    From:\" or an invalid \"Sender:\" header,\n   it MUST NOT be signed.\n   If the\
    \ signer adds the \"h\" tag to the \"DomainKey-Signature:\" header,\n   that tag\
    \ MUST include the header that was used to determine the\n   sending domain.\n"
- title: 3.5.2.  Determining Whether an Email Should Be Signed
  contents:
  - "3.5.2.  Determining Whether an Email Should Be Signed\n   A signer can obviously\
    \ only sign email for domains for which it has a\n   private key and the necessary\
    \ knowledge of the corresponding public\n   key and selector information, however\
    \ there are a number of other\n   reasons why a signer may choose not to sign\
    \ an email.\n   A signer MUST NOT sign an email if the email submission is not\n\
    \   authorized to use the sending domain.\n   A signer MUST NOT sign an email\
    \ that already contains a \"DomainKey-\n   Signature:\" header unless a \"Sender:\"\
    \ header has been added that was\n   not included in the original signature. \
    \ The most obvious case where\n   this occurs is with mailing lists.\n   A signer\
    \ SHOULD NOT remove an existing \"DomainKey-Signature:\" header.\n"
- title: 3.5.3.  Selecting a Private Key and Corresponding Selector Information
  contents:
  - "3.5.3.  Selecting a Private Key and Corresponding Selector Information\n   This\
    \ specification does not define the basis by which a signer should\n   choose\
    \ which private key and selector information to use.  Currently,\n   all selectors\
    \ are equal as far as this specification is concerned, so\n   the decision should\
    \ largely be a matter of administrative\n   convenience.\n"
- title: 3.5.4.  Calculating the Signature Value
  contents:
  - "3.5.4.  Calculating the Signature Value\n   The signer MUST use one of the defined\
    \ canonicalization algorithms to\n   present the email to the signing algorithm.\
    \  Canonicalization is only\n   used to prepare the email for signing.  It does\
    \ not affect the\n   transmitted email in any way.\n   To avoid possible ambiguity,\
    \ a signing server may choose to remove\n   any pre-existing \"DomainKey-Status:\"\
    \ headers from the email prior to\n   preparation for signing and transmission.\n"
- title: 3.5.5.  Prepending the "DomainKey-Signature:" Header
  contents:
  - "3.5.5.  Prepending the \"DomainKey-Signature:\" Header\n   The final step in\
    \ the signing process is that the signer MUST prepend\n   the \"DomainKey-Signature:\"\
    \ header prior to continuing with the\n   process of transmitting the email.\n"
- title: 3.6.  Policy Statement of Sending Domain
  contents:
  - "3.6.  Policy Statement of Sending Domain\n   While the disposition of inbound\
    \ email is ultimately a matter for the\n   receiving system, the introduction\
    \ of authentication in email creates\n   a need for the sender domain to indicate\
    \ their signing policy and\n   preferred disposition of unsigned email, in particular,\
    \ whether a\n   domain is participating in DomainKeys, whether it is testing,\
    \ and\n   whether it signs all outbound email.\n   The sending domain policy is\
    \ very simple and is expressed in the\n   _domainkey TXT record in the DNS of\
    \ the sending domain.  For example,\n   in the example.com domain, the record\
    \ is called\n   _domainkey.example.com.\n   The contents of this TXT record are\
    \ stored as tag=value pairs\n   separated by semicolons, for example, as in the\
    \ following:\n   _domainkey   IN TXT \"t=y; o=-; n=notes; r=emailAddress\"\n \
    \  All tags are optional.  The current valid tags are as follows:\n      n = Notes\
    \ that may be of interest to a human.  No interpretation\n          is made by\
    \ any program.\n      o = Outbound Signing policy (\"-\" means that this domain\
    \ signs all\n          email; \"~\" is the default and means that this domain\
    \ may sign\n          some email with DomainKeys).\n      r = A reporting email\
    \ address.  If present, this defines the email\n          address where invalid\
    \ verification results are reported.  This\n          tag is primarily intended\
    \ for early implementers -- the\n          content and frequency of the reports\
    \ will be defined in a\n          separate document.\n      t = a set of flags\
    \ that define boolean attributes.  Valid\n          attributes are as follows:\n\
    \          y = testing mode.  This domain is testing DomainKeys, and\n       \
    \       unverified email MUST NOT be treated differently from\n              verified\
    \ email.  Recipient systems MAY wish to track\n              testing mode results\
    \ to assist the sender).\n          Note that testing mode cannot be turned off\
    \ by this tag;\n          thus, policy cannot revert the testing mode setting\
    \ of a\n          Selector.\n          This tag is optional.\n   (Syntax rules\
    \ for the tag=value format are discussed in Appendix A.)\n   Recipient systems\
    \ SHOULD only retrieve this policy TXT record to\n   determine policy when an\
    \ email fails to verify or does not include a\n   signature.  Recipient systems\
    \ SHOULD not retrieve this policy TXT\n   record for email that successfully verifies.\
    \  Note that \"testing\n   mode\" SHOULD also be in the Selector TXT record if\
    \ the domain owner\n   is running a DomainKeys test.\n   If the policy TXT record\
    \ does not exist, recipient systems MUST\n   assume the default values.\n   There\
    \ is an important implication when a domain states that it signs\n   all email\
    \ with the \"o=-\" setting, namely that the sending domain\n   prefers that the\
    \ recipient system treat unsigned mail with a great\n   deal of suspicion.  Such\
    \ suspicion could reasonably extend to\n   rejecting such email.  A verifying\
    \ system MAY reject unverified email\n   if a domain policy indicates that it\
    \ signs all email.\n   Of course, nothing compels a recipient MTA to abide by\
    \ the policy of\n   the sender.  In fact, during the trial, a sending domain would\
    \ want\n   to be very certain about setting this policy, as processing by\n  \
    \ recipient MTAs may be unpredictable.  Nonetheless, a domain that\n   states\
    \ that it signs all email MUST expect that unverified email may\n   be rejected\
    \ by some receiving MTAs.\n"
- title: 3.7.  The Verification Process
  contents:
  - "3.7.  The Verification Process\n   There is no defined or recommended limit on\
    \ the lifetime of a\n   selector and corresponding public key; however, it is\
    \ recommended\n   that verification occur in a timely manner with the most timely\
    \ place\n   being during acceptance or local delivery by the MTA.\n   Verifying\
    \ a signature consists of the following three steps:\n      o  extract signature\
    \ information from the headers\n      o  retrieve the public key based on the\
    \ signature information\n      o  check that the signature verifies against the\
    \ contents\n   In the event that any of these steps fails, the sending domain\
    \ policy\n   is ascertained to assist in applying local policy.\n"
- title: 3.7.1.  Presumption that Headers Are Not Reordered
  contents:
  - "3.7.1.  Presumption that Headers Are Not Reordered\n   Indications from deployment\
    \ of previous versions of this\n   specification suggest that the canonicalization\
    \ algorithms in\n   conjunction with the \"h\" tag in the \"DomainKey-Signature:\"\
    \ header\n   allows most email to cryptographically survive intact between signing\n\
    \   and verifying.\n   The one assumption that most of the early deployments make\
    \ is that\n   the headers included in the signature are not reordered prior to\n\
    \   verification.\n   While nothing in this specification precludes a verifier\
    \ from\n   \"looking\" for a header that may have been reordered, including being\n\
    \   moved to a position prior to the \"DomainKey-Signature:\" header, such\n \
    \  reordered email is unlikely to be successfully verified by most\n   implementations.\n\
    \   A second consequence of this assumption -- particularly in the\n   presence\
    \ of multiple \"DomainKey-Signature:\" headers -- is that the\n   first \"DomainKey-Signature:\"\
    \ header in the email was the last\n   signature added to the email and thus is\
    \ the one to be verified.\n"
- title: 3.7.2.  Verification Should Render a Binary Result
  contents:
  - "3.7.2.  Verification Should Render a Binary Result\n   While the symptoms of\
    \ a failed verification are obvious -- the\n   signature doesn't verify -- establishing\
    \ the exact cause can be more\n   difficult.  If a selector cannot be found, is\
    \ that because the\n   selector has been removed, or was the value changed somehow\
    \ in\n   transit? If the signature line is missing, is that because it was\n \
    \  never there, or was it removed by an overzealous filter?\n   For diagnostic\
    \ purposes, the exact reason why the verification fails\n   SHOULD be recorded;\
    \ however, in terms of presentation to the end\n   user, the result SHOULD be\
    \ presented as a simple binary result:\n   either the email is verified or it\
    \ is not.  If the email cannot be\n   verified, then it SHOULD be rendered the\
    \ same as all unverified email\n   regardless of whether or not it looks like\
    \ it was signed.\n"
- title: 3.7.3.  Selecting the Most Appropriate "DomainKey-Signature:" Header
  contents:
  - "3.7.3.  Selecting the Most Appropriate \"DomainKey-Signature:\" Header\n   In\
    \ most cases, a signed email is expected to have just one signature\n   -- that\
    \ is, one \"DomainKey-Signature:\" header.  However, it is\n   entirely possible\
    \ that an email can contain multiple signatures.  In\n   such cases, a verifier\
    \ MUST find the most appropriate signature to\n   use and SHOULD ignore all other\
    \ signatures.\n   The process of finding the most appropriate signature consists\
    \ of the\n   following \"best match\" rules.  The rules are to be evaluated in\n\
    \   order.\n      1. Selecting the sending domain\n         If the email contains\
    \ a \"Sender:\" header, the sending domain is\n         extracted from the \"\
    Sender:\" address.  If this extraction\n         fails, the email SHALL fail verification.\n\
    \         If no \"Sender:\" header is present, the sending domain is\n       \
    \  extracted from the first address of the \"From:\" header.  If\n         this\
    \ extraction fails, the email SHALL fail verification.\n      2. Domain matching\n\
    \         A signature can only match if the sending domain matches the\n     \
    \    \"d\" tag domain -- according to the \"d\" tag subdomain matching\n     \
    \    rules.\n      3. \"h\" tag matching\n         If the signature contains the\
    \ \"h\" tag list of headers, that\n         list must include the header used\
    \ to extract the sending domain\n         in rule 1, above.\n      4. Most secure\
    \ signing algorithm\n         While it is not yet the case, in the event that\
    \ additional\n         algorithms are added to this specification, a verifier\
    \ MUST use\n         the signature that contains the most secure algorithm as\n\
    \         defined by the future specification.  For current\n         implementations,\
    \ that means verifiers MUST ignore signatures\n         that are coded with an\
    \ unrecognized signing algorithm.\n      5. Earlier signatures are preferred\n\
    \         If multiple signatures are equal as far as these rules apply,\n    \
    \     the signature from the earlier header MUST be used in\n         preference\
    \ to later signature headers.\n   Implementors MUST meticulously validate the\
    \ format and values in the\n   \"DomainKey-Signature:\" header; any inconsistency\
    \ or unexpected values\n   MUST result in ignoring that header.  Being \"liberal\
    \ in what you\n   accept\" is definitely a bad strategy in this security context.\n\
    \   In all cases, if a verification fails, the \"DomainKey-Status:\" header\n\
    \   SHOULD be generated and include a message to help explain the reason\n   for\
    \ failure.\n"
- title: 3.7.4.  Retrieve the Public Key Based on the Signature Information
  contents:
  - "3.7.4.  Retrieve the Public Key Based on the Signature Information\n   The public\
    \ key is needed to complete the verification process.  The\n   process of retrieving\
    \ the public key depends on the query type as\n   defined by the \"q\" tag in\
    \ the \"DomainKey-Signature:\" header line.\n   Obviously, a public key should\
    \ only be retrieved if the process of\n   extracting the signature information\
    \ is completely successful.\n   Currently, the only valid query type is \"dns\"\
    .  The public key\n   retrieval process for this type is as follows:\n      1.\
    \ Using the selector name defined by the \"s\" tag, the\n         \"_domainkey\"\
    \ namespace and the domain name defined by the \"d\"\n         tag, construct\
    \ and issue the DNS TXT record query string.\n         For example, if s=brisbane\
    \ and d=example.net, the query string\n         is \"brisbane._domainkey.example.net\"\
    .\n      2. If the query for the public key fails to respond, the verifier\n \
    \        SHOULD defer acceptance of this email (normally this will be\n      \
    \   achieved with a 4XX SMTP response code).\n      3. If the query for the public\
    \ key fails because the corresponding\n         data does not exist, the verifier\
    \ MUST treat the email as\n         unverified.\n      4. If the result returned\
    \ from the query does not adhere to the\n         format defined in this specification,\
    \ the verifier MUST treat\n         the email as unverified.\n      5. If the\
    \ public key data is not suitable for use with the\n         algorithm type defined\
    \ by the \"a\" tag in the \"DomainKey-\n         Signature:\" header, the verifier\
    \ MUST treat the email as\n         unverified.\n   Implementors MUST meticulously\
    \ validate the format and values\n   returned by the public key query.  Any inconsistency\
    \ or unexpected\n   values MUST result in an unverified email.  Being \"liberal\
    \ in what\n   you accept\" is definitely a bad strategy in this security context.\n\
    \   Latency critical implementations may wish to initiate the public key\n   query\
    \ in parallel with calculating the SHA-1 hash, as the public key\n   is not needed\
    \ until the final RSA is calculated.\n"
- title: 3.7.5.  Verify the Signature
  contents:
  - "3.7.5.  Verify the Signature\n   Armed with the signature information from the\
    \ \"DomainKey-Signature:\"\n   header and the public key information returned\
    \ by the query, the\n   signature of the email can now be verified.\n   The canonicalization\
    \ algorithm defined by the \"c\" tag in the\n   \"DomainKey-Signature:\" header\
    \ defines how the data is prepared for\n   the verification algorithm, and the\
    \ \"a\" tag in the same header\n   defines which verification algorithm to use.\n"
- title: 3.7.6.  Retrieving Sending Domain Policy
  contents:
  - "3.7.6.  Retrieving Sending Domain Policy\n   In the event that an email fails\
    \ to verify, the policy of the sending\n   domain MUST be consulted.  For now,\
    \ that means consulting the\n   _domainkey TXT record in the DNS of the domain\
    \ in the sending domain\n   as defined in Section 3.5.1.  For example, if example.net\
    \ is the\n   sending domain the TXT query is:\n      _domainkey.example.net\n\
    \   A verifier SHOULD consider the sending domain policy statement and\n   act\
    \ accordingly.  The range of possibilities is up to the receiver,\n   but it MAY\
    \ include rejecting the email.\n"
- title: 3.7.7.  Applying Local Policy
  contents:
  - "3.7.7.  Applying Local Policy\n   After all verification processes are complete,\
    \ the recipient system\n   has authentication information that can help it decide\
    \ what to do\n   with the email.\n   It is beyond the scope of this specification\
    \ to describe what actions\n   a recipient system should take, but an authenticated\
    \ email presents\n   an opportunity to a receiving system that unauthenticated\
    \ email\n   cannot.  Specifically, an authenticated email creates a predictable\n\
    \   identifier by which other decisions can reliably be managed, such as\n   trust\
    \ and reputation.\n   Conversely, unauthenticated email lacks a reliable identifier\
    \ that\n   can be used to assign trust and reputation.  It is not unreasonable\n\
    \   to treat unauthenticated email as lacking any trust and having no\n   positive\
    \ reputation.\n"
- title: 3.8.  Conveying Verification Results to MUAs
  contents:
  - "3.8.  Conveying Verification Results to MUAs\n   Apart from the application of\
    \ automated policy, the result of a\n   signature verification should be conveyed\
    \ to the user reading the\n   email.\n   Most email clients can be configured\
    \ to recognize specific headers\n   and apply simple rules, e.g., filing into\
    \ a particular folder.  Since\n   DomainKey signatures are expected to be initially\
    \ verified at the\n   border MTA, the results of the verification need to be conveyed\
    \ to\n   the email client.  This is done with the \"DomainKey-Status:\" header\n\
    \   line prepended to the email.\n   The \"DomainKey-Status:\" header starts with\
    \ a string that indicate the\n   result of the verification.  Valid values are\
    \ as follows:\n   \"good\"         - the signature was verified at the time of\
    \ testing\n   \"bad\"          - the signature failed the verification\n   \"\
    no key\"       - the public key query failed as the key does not\n           \
    \         exist\n   \"revoked\"      - the public key query failed as the key\
    \ has been\n                    revoked\n   \"no signature\" - this email has\
    \ no \"DomainKey-Signature:\" header\n   \"bad format\"   - the signature or the\
    \ public key contains unexpected\n                    data\n   \"non-participant\"\
    \ - this sending domain has indicated that it does\n                       not\
    \ participate in DomainKeys\n   Verifiers may append additional data that expands\
    \ on the reason for\n   the particular status value.\n   A client SHOULD just\
    \ look for \"good\" and assume that all other values\n   imply that the verification\
    \ could not be performed for some reason.\n   Policy action as a consequence of\
    \ this header is entirely a local\n   matter.\n   Here are some examples:\n  \
    \    DomainKey-Status: good\n      DomainKey-Status: bad format\n   Although it\
    \ is expected that MTAs will be DomainKey aware before\n   MUAs, it is nonetheless\
    \ possible that a DomainKey-aware MUA can be\n   fooled by a spoofed \"DomainKey-Status:\"\
    \ header that passes through a\n   non-DomainKey-aware MTA.\n   If this is perceived\
    \ to be a serious problem, then it may make sense\n   to preclude the \"good\"\
    \ value and only have values that effectively\n   demote the email as far as the\
    \ UA is concerned.  That way successful\n   spoofing attempts can only serve to\
    \ demote themselves.\n"
- title: 4.  Example of Use
  contents:
  - "4.  Example of Use\n   This section shows the complete flow of an email from\
    \ submission to\n   final delivery, demonstrating how the various components fit\n\
    \   together.\n"
- title: 4.1.  The User Composes an Email
  contents:
  - "4.1.  The User Composes an Email\n   From: \"Joe SixPack\" <joe@football.example.com>\n\
    \   To: \"Suzie Q\" <suzie@shopping.example.net>\n   Subject: Is dinner ready?\n\
    \   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n\
    \   Hi.\n   We lost the game. Are you hungry yet?\n   Joe.\n"
- title: 4.2.  The Email Is Signed
  contents:
  - "4.2.  The Email Is Signed\n   This email is signed by the football.example.com\
    \ outbound email\n   server and now looks like this:\n   DomainKey-Signature:\
    \ a=rsa-sha1; s=brisbane; d=football.example.com;\n     c=simple; q=dns;\n   \
    \  b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ\n       VoG4ZHRNiYzR;\n\
    \   Received: from dsl-10.2.3.4.football.example.com  [10.2.3.4]\n        by submitserver.football.example.com\
    \ with SUBMISSION;\n        Fri, 11 Jul 2003 21:01:54 -0700 (PDT)\n   From: \"\
    Joe SixPack\" <joe@football.example.com>\n   To: \"Suzie Q\" <suzie@shopping.example.net>\n\
    \   Subject: Is dinner ready?\n   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n\
    \   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n   Hi.\n   We\
    \ lost the game. Are you hungry yet?\n   Joe.\n   The signing email server requires\
    \ access to the private key\n   associated with the \"brisbane\" selector to generate\
    \ this signature.\n   Distribution and management of private keys are outside\
    \ the scope of\n   this document.\n"
- title: 4.3.  The Email Signature Is Verified
  contents:
  - "4.3.  The Email Signature Is Verified\n   The signature is normally verified\
    \ by an inbound SMTP server or\n   possibly the final delivery agent.  However,\
    \ intervening MTAs can\n   also perform this verification if they choose to do\
    \ so.\n   The verification process uses the domain \"football.example.com\"\n\
    \   extracted from the \"From:\" header and the selector \"brisbane\" from\n \
    \  the \"DomainKey-Signature:\" header to form the DNS TXT query for:\n      brisbane._domainkey.football.example.com\n\
    \   Since there is no \"h\" tag in the \"DomainKey-Signature:\" header,\n   signature\
    \ verification starts with the line following the\n   \"DomainKey-Signature:\"\
    \ line.  The email is canonically prepared for\n   verifying with the \"simple\"\
    \ method.\n   The result of the query and subsequent verification of the signature\n\
    \   is stored in the \"DomainKey-Status:\" header line.  After successful\n  \
    \ verification, the email looks like this:\n   DomainKey-Status: good\n    from=joe@football.example.com;\
    \ domainkeys=pass\n   Received: from mout23.brisbane.football.example.com (192.168.1.1)\n\
    \             by shopping.example.net with SMTP;\n             Fri, 11 Jul 2003\
    \ 21:01:59 -0700 (PDT)\n   DomainKey-Signature: a=rsa-sha1; s=brisbane; d=football.example.com;\n\
    \    c=simple; q=dns;\n    b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ\n\
    \      VoG4ZHRNiYzR;\n   Received: from dsl-10.2.3.4.network.example.com  [10.2.3.4]\n\
    \        by submitserver.example.com with SUBMISSION;\n        Fri, 11 Jul 2003\
    \ 21:01:54 -0700 (PDT)\n   From: \"Joe SixPack\" <joe@football.example.com>\n\
    \   To: \"Suzie Q\" <suzie@shopping.example.net>\n   Subject: Is dinner ready?\n\
    \   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n\
    \   Hi.\n   We lost the game. Are you hungry yet?\n   Joe.\n"
- title: 5.  Association with a Certificate Authority
  contents:
  - "5.  Association with a Certificate Authority\n   A fundamental aspect of DomainKeys\
    \ is that public keys are generated\n   and advertised by each domain at no additional\
    \ cost.  This\n   accessibility markedly differs from traditional Public Key\n\
    \   Infrastructures where there is typically a Certificate Authority (CA)\n  \
    \ who validates an applicant and issues a signed certificate --\n   containing\
    \ their public key -- often for a recurring fee.\n   While CAs do impose costs,\
    \ they also have the potential to provide\n   additional value as part of their\
    \ certification process.  Consider\n   financial institutions, public utilities,\
    \ law enforcement agencies,\n   and the like.  In many cases, such entities justifiably\
    \ need to\n   discriminate themselves above and beyond the authentication that\n\
    \   DomainKeys offers.\n   Creating a link between DomainKeys and CA-issued certificates\
    \ has the\n   potential to access additional authentication mechanisms that are\n\
    \   more authoritative than domain-owner-issued authentication.  It is\n   well\
    \ beyond the scope of this specification to describe such\n   authorities apart\
    \ from defining how the linkage could be achieved\n   with the \"DomainKey-X509:\"\
    \ header.\n"
- title: 5.1.  The "DomainKey-X509:" Header
  contents:
  - "5.1.  The \"DomainKey-X509:\" Header\n   The \"DomainKey-X509:\" header provides\
    \ a link between the public key\n   used to sign the email and the certificate\
    \ issued by a CA.\n   The exact content, syntax, and semantics of this header\
    \ are yet to be\n   resolved.  One possibility is that this header contains an\
    \ encoding\n   of the certificate issued by a CA.  Another possibility is that\
    \ this\n   header contains a URL that points to a certificate issued by a CA.\n\
    \   In either case, this header can only be consulted if the signature\n   verifies\
    \ and MUST be part of the content signed by the corresponding\n   \"DomainKey-Signature:\"\
    \ header.  Furthermore, it is likely that MUAs\n   rather than MTAs will confirm\
    \ that the link to the CA-issued\n   certificate is valid.  In part, this is because\
    \ many MUAs already\n   have built-in capabilities as a consequence of Secure/Multipurpose\n\
    \   Internet Mail Extensions (S/MIME) [SMIME] and Secure Socket Layer\n   (SSL)\
    \ [SSL] support.\n   The proof of linkage is made by testing that the public key\
    \ in the\n   certificate matches the public key used to sign the email.\n   An\
    \ example of an email containing the \"DomainKey-X509:\" header is:\n      DomainKey-Signature:\
    \ a=rsa-sha1; s=statements;\n        d=largebank.example.com; c=simple; q=dns;\n\
    \        b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ\n          VoG4ZHRNiYzR;\n\
    \      DomainKey-X509: https://ca.example.net/largebank.example.com\n      From:\
    \ \"Large Bank\" <statements@largebank.example.com>\n      To: \"Suzie Q\" <suzie@shopping.example.net>\n\
    \      Subject: Statement for Account: 1234-5678\n      ...\n   The format of\
    \ the retrieved value from the URL is not yet defined,\n   nor is the determination\
    \ of valid CAs.\n   The whole matter of linkage to CA-issued certificates is one\
    \ aspect\n   of DomainKeys that needs to be resolved with relevant CA's and\n\
    \   certificate-issuing entities.  The primary point is that a link is\n   possible\
    \ to a higher authority.\n"
- title: 6.  Topics for Discussion
  contents:
  - '6.  Topics for Discussion

    '
- title: 6.1.  The Benefits of Selectors
  contents:
  - "6.1.  The Benefits of Selectors\n   Selectors are at the heart of the flexibility\
    \ of DomainKeys.  A\n   domain administrator is free to use a single DomainKey\
    \ for all\n   outbound mail.  Alternatively, the domain administrator may use\
    \ many\n   DomainKeys differentiated by selector and assign each key to\n   different\
    \ servers.\n   For example, a large outbound email farm might have a unique\n\
    \   DomainKey for each server, and thus their DNS will advertise\n   potentially\
    \ hundreds of keys via their unique selectors.\n   Another example is a corporate\
    \ email administrator who might generate\n   a separate DomainKey for each regional\
    \ office email server.\n   In essence, selectors allow a domain owner to distribute\
    \ authority to\n   send on behalf of that domain.  Combined with the ability to\
    \ revoke\n   by removal or Time to Live (TTL) expiration, a domain owner has\n\
    \   coarse-grained control over the duration of the distributed\n   authority.\n\
    \   Selectors are particularly useful for domain owners who want to\n   contract\
    \ a third-party mailing system to send a particular set of\n   mail.  The domain\
    \ owner can generate a special key pair and selector\n   just for this mail-out.\
    \  The domain owner has to provide the private\n   key and selector to the third\
    \ party for the life of the mail-out.\n   However, as soon as the mail-out is\
    \ completely delivered, the domain\n   owner can revoke the public key by the\
    \ simple expedient of removing\n   the entry from the DNS.\n"
- title: 6.2.  Canonicalization of Email
  contents:
  - "6.2.  Canonicalization of Email\n   It is an unfortunate fact that some email\
    \ software routinely (and\n   often unnecessarily) transforms email as it transits\
    \ through the\n   network.  Such transformations conflict with the fundamental\
    \ purpose\n   of cryptographic signatures - to detect modifications.\n   While\
    \ two canonicalization algorithms are defined in this\n   specification, the primary\
    \ goal of \"nofws\" is to provide a transition\n   path to \"simple\".  With a\
    \ mixture of \"simple\" and \"nofws\" email, a\n   receiver can determine which\
    \ systems are modifying email in ways that\n   cause the signature to fail and\
    \ thus provide feedback to the\n   modifying system.\n"
- title: 6.3.  Mailing Lists
  contents:
  - "6.3.  Mailing Lists\n   Integrating existing Mailing List Managers (MLMs) into\
    \ the DomainKeys\n   authentication system is a complicated area, as the behavior\
    \ of MLMs\n   is highly variable.  Essentially, there are two types of MLMs under\n\
    \   consideration: those that modify email to such an extent that\n   verification\
    \ of the original content is not possible, and those that\n   make minimal or\
    \ no modifications to an email.\n   MLMs that modify email in a way that causes\
    \ verification to fail MUST\n   prepend a \"Sender:\" header and SHOULD prepend\
    \ a \"List-ID:\"  header\n   prior to signing for distribution to list recipients.\n\
    \   A participating SUBMISSION server can deduce the need to re-sign such\n  \
    \ an email by the presence of a \"Sender:\" or \"List-ID:\" header from an\n \
    \  authorized submission.\n   MLMs that do not modify email in a way that causes\
    \ verification to\n   fail MAY perform the same actions as a modifying MLM.\n"
- title: 6.4.  Roving Users
  contents:
  - "6.4.  Roving Users\n   One scenario that presents a particular problem with any\
    \ form of\n   email authentication, including DomainKeys, is the roving user:\
    \ a\n   user who is obliged to use a third-party SUBMISSION service when\n   unable\
    \ to connect to the user's own SUBMISSION service.  The classic\n   example cited\
    \ is a traveling salesperson being redirected to a hotel\n   email server to send\
    \ email.\n   As far as DomainKeys is concerned, email of this nature clearly\n\
    \   originates from an email server that does not have authority to send\n   on\
    \ behalf of the domain of the salesperson and is therefore\n   indistinguishable\
    \ from a forgery.  While DomainKeys does not\n   prescribe any specific action\
    \ for such email, it is likely that over\n   time, such email will be treated\
    \ as second-class email.\n   The typical solution offered to roving users is to\
    \ submit email via\n   an authorized server for their domain -- perhaps via a\
    \ Virtual\n   Private Network (VPN) or a web interface or even SMTP AUTH back\
    \ to a\n   SUBMISSION server.\n   While these are perfectly acceptable solutions\
    \ for many, they are not\n   necessarily solutions that are available or possible\
    \ for all such\n   users.\n   One possible way to address the needs of this contingent\
    \ of\n   potentially disenfranchised users is for the domain to issue per-user\n\
    \   DomainKeys.  Per-user DomainKeys are identified by a non-empty \"g\"\n   tag\
    \ value in the corresponding DNS record.\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1.  DNS
  contents:
  - "7.1.  DNS\n   DomainKeys is primarily a security mechanism.  Its core purpose\
    \ is to\n   make claims about email authentication in a credible way.  However,\n\
    \   DomainKeys, like virtually all Internet applications, relies on the\n   DNS,\
    \ which has well-known security flaws [RFC3833].\n"
- title: 7.1.1.  The DNS Is Not Currently Secure
  contents:
  - "7.1.1.  The DNS Is Not Currently Secure\n   While the DNS is currently insecure,\
    \ it is expected that the security\n   problems should and will be solved by DNS\
    \ Security (DNSSEC) [DNSSEC],\n   and all users of the DNS will reap the benefit\
    \ of that work.\n   Secondly, the types of DNS attacks relevant to DomainKeys\
    \ are very\n   costly and are far less rewarding than DNS attacks on other Internet\n\
    \   applications.\n   To systematically thwart the intent of DomainKeys, an attacker\
    \ must\n   conduct a very costly and very extensive attack on many parts of the\n\
    \   DNS over an extended period.  No one knows for sure how attackers\n   will\
    \ respond; however, the cost/benefit of conducting prolonged DNS\n   attacks of\
    \ this nature is expected to be uneconomical.\n   Finally, DomainKeys is only\
    \ intended as a \"sufficient\" method of\n   proving authenticity.  It is not\
    \ intended to provide strong\n   cryptographic proof about authorship or contents.\
    \  Other technologies\n   such as GnuPG and S/MIME address those requirements.\n"
- title: 7.1.2.  DomainKeys Creates Additional DNS Load
  contents:
  - "7.1.2.  DomainKeys Creates Additional DNS Load\n   A second security issue related\
    \ to the DNS revolves around the\n   increased DNS traffic as a consequence of\
    \ fetching selector-based\n   data, as well as fetching sending domain policy.\
    \  Widespread\n   deployment of DomainKeys will result in a significant increase\
    \ in DNS\n   queries to the claimed sending domain.  In the case of forgeries\
    \ on a\n   large scale, DNS servers could see a substantial increase in queries.\n"
- title: 7.2.  Key Management
  contents:
  - "7.2.  Key Management\n   All public key systems require management of key pairs.\
    \  Private keys\n   in particular need to be securely distributed to each signing\
    \ mail\n   server and protected on those servers.  For those familiar with SSL,\n\
    \   the key management issues are similar to those of managing SSL\n   certificates.\
    \  Poor key management may result in unauthorized access\n   to private keys,\
    \ which in essence gives unauthorized access to your\n   identity.\n"
- title: 7.3.  Implementation Risks
  contents:
  - "7.3.  Implementation Risks\n   It is well recognized in cryptographic circles\
    \ that many security\n   failures are caused by poor implementations rather than\
    \ poor\n   algorithms.  For example, early SSL implementations were vulnerable\n\
    \   because the implementors used predictable \"random numbers\".\n   While some\
    \ MTA software already supports various cryptographic\n   techniques, such as\
    \ TLS, many do not.  This proposal introduces\n   cryptographic requirements into\
    \ MTA software that implies a much\n   higher duty of care to manage the increased\
    \ risk.\n   There are numerous articles, books, courses, and consultants that\n\
    \   help programming security applications.  Potential implementors are\n   strongly\
    \ encouraged to avail themselves of all possible resources to\n   ensure secure\
    \ implementations.\n"
- title: 7.4.  Privacy Assumptions with Forwarding Addresses
  contents:
  - "7.4.  Privacy Assumptions with Forwarding Addresses\n   Some people believe that\
    \ they can achieve anonymity by using an email\n   forwarding service.  While\
    \ this has never been particularly true, as\n   bounces, over-quota messages,\
    \ vacation messages, and web bugs all\n   conspire to expose IP addresses and\
    \ domain names associated with the\n   delivery path, the DNS queries that are\
    \ required to verify DomainKeys\n   signature can provide additional information\
    \ to the sender.\n   In particular, as mail is forwarded through the mail network,\
    \ the DNS\n   queries for the selector will typically identify the DNS cache used\n\
    \   by the forwarding and delivery MTAs.\n"
- title: 7.5.  Cryptographic Processing Is Computationally Intensive
  contents:
  - "7.5.  Cryptographic Processing Is Computationally Intensive\n   Verifying a signature\
    \ is computationally significant.  Early\n   indications are that a typical mail\
    \ server can expect to increase CPU\n   demands by 8-15 percent.  While this increased\
    \ demand is modest\n   compared to other common mail processing costs -- such\
    \ as Bayesian\n   filtering -- any increase in resource requirements can make\
    \ a\n   denial-of-service attack more effective against a mail system.\n   A constraining\
    \ factor of such attacks is that the net computational\n   cost of verifying is\
    \ bounded by the maximum key size allowed by this\n   specification and is essentially\
    \ linear to the rate at which mail is\n   accepted by the verifying system.  Consequently,\
    \ the additional\n   computational cost may augment a denial-of-service attack,\
    \ but it\n   does not add a non-linear component to such attacks.\n"
- title: 8.  The Trial
  contents:
  - "8.  The Trial\n   The DomainKeys protocol was deployed as a trial to better understand\n\
    \   the implications of deploying wide-scale cryptographic email\n   authentication.\n\
    \   Open Source implementations were made available at various places,\n   particularly\
    \ Source Forge [SOURCEFORGE], which includes links to\n   numerous implementations,\
    \ both Open Source and commercial.\n"
- title: 8.1.  Goals
  contents:
  - "8.1.  Goals\n   The primary goals of the trial were to:\n      o  understand\
    \ the operational implications of running a DNS-based\n         public key system\
    \ for email\n      o  measure the effectiveness of the canonicalization algorithms\n\
    \      o  experiment with possible per-user key deployment models\n      o  fully\
    \ define the semantics of the \"DomainKey-X509:\" header\n"
- title: 8.2.  Results of Trial
  contents:
  - "8.2.  Results of Trial\n   The DomainKeys trial ran for approximately 2 years,\
    \ in which time\n   numerous large ISPs and many thousands of smaller domains\n\
    \   participated in signing or verifying with DomainKeys.  The low order\n   numbers\
    \ are that at least one billion DomainKey signed emails transit\n   the Internet\
    \ each day between some 12,000 participating domains.\n   The operational and\
    \ development experience of that trial was applied\n   to DKIM.\n"
- title: 9.  Note to Implementors Regarding TXT Records
  contents:
  - "9.  Note to Implementors Regarding TXT Records\n   The DNS is very flexible in\
    \ that it is possible to have multiple TXT\n   records for a single name and for\
    \ those TXT records to contain\n   multiple strings.\n   In all cases, implementors\
    \ of DomainKeys should expect a single TXT\n   record for any particular name.\
    \  If multiple TXT records are\n   returned, the implementation is free to pick\
    \ any single TXT record as\n   the authoritative data.  In other words, if a name\
    \ server returns\n   different TXT records for the same name, it can expect unpredictable\n\
    \   results.\n   Within a single TXT record, implementors should concatenate multiple\n\
    \   strings in the order presented and ignore string boundaries.  Note\n   that\
    \ a number of popular DNS command-line tools render multiple\n   strings as separately\
    \ quoted strings, which can be misleading to a\n   novice implementor.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [BASE64]      Josefsson, S., \"The Base16, Base32,\
    \ and Base64 Data\n                 Encodings\", RFC 4648, October 2006.\n   [RFC2119]\
    \     Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [PEM]         Linn, J., \"Privacy\
    \ Enhancement for Internet Electronic\n                 Mail: Part I: Message\
    \ Encryption and Authentication\n                 Procedures\", RFC 1421 February,\
    \ 1993.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [DKIM]        Allman, E., Callas, J., Delany,\
    \ M., Libbey, M., Fenton,\n                 J., and M. Thomas, \"DomainKeys Identified\
    \ Mail (DKIM)\n                 Signatures\", RFC 4871, May 2007.\n   [DNSSEC]\
    \      http://www.ietf.org/html.charters/dnsext-charter.html\n   [OPENSSL]   \
    \  http://www.openssl.org\n   [RFC2822]     Resnick, P., Editor, \"Internet Message\
    \ Format\", RFC\n                               2822, April 2001.\n   [RFC3833]\
    \     Atkins, D. and R. Austein, \"Threat Analysis of the\n                 Domain\
    \ Name System (DNS)\", RFC 3833, August 2004.\n   [SMIME]       Ramsdell, B.,\
    \ Ed., \"Secure/Multipurpose Internet Mail\n                 Extensions (S/MIME)\
    \ Version 3.1 Message Specification\",\n                 RFC 3851, July 2004.\n\
    \   [SOURCEFORGE] http://domainkeys.sourceforge.net\n   [SSL]         http://wp.netscape.com/security/techbriefs/ssl.html\n"
- title: Appendix A - Syntax Rules for the Tag=Value Format
  contents:
  - "Appendix A - Syntax Rules for the Tag=Value Format\n   A simple tag=value syntax\
    \ is used to encode data in the response\n   values for DNS queries as well as\
    \ headers embedded in emails.  This\n   section summarized the syntactic rules\
    \ for this encoding:\n      o  A tag=value pair consists of three tokens, a \"\
    tag\", the \"=\"\n         character, and the \"value\"\n      o  A tag MUST be\
    \ one character long and MUST be a lowercase\n         alphabetic character\n\
    \      o  Duplicate tags are not allowed\n      o  A value MUST only consist of\
    \ characters that are valid in RFC\n         2822 headers and DNS TXT records\
    \ and are within the ASCII range\n         of characters from SPACE (0x20) to\
    \ TILDE (0x7E) inclusive.\n         Values MUST NOT contain a semicolon but they\
    \ may contain \"=\"\n         characters.\n      o  A tag=value pair MUST be terminated\
    \ by a semicolon or the end\n         of the data\n      o  Values MUST be processed\
    \ as case sensitive unless the specific\n         tag description of semantics\
    \ imply case insensitivity.\n      o  Values MAY be zero bytes long\n      o \
    \ Whitespace MAY surround any of the tokens; however, whitespace\n         within\
    \ a value MUST be retained unless explicitly excluded by\n         the specific\
    \ tag description.  Currently, the only tags that\n         specifically ignore\
    \ embedded whitespace are the \"b\" and \"h\"\n         tags in the \"DomainKey-Signature:\"\
    \ header.\n      o  Tag=value pairs that represent the default value MAY be\n\
    \         included to aid legibility.\n      o  Unrecognized tags MUST be ignored\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The editor wishes to thank Russ Allbery, Eric Allman, Edwin\
    \ Aoki,\n   Claus Asmann, Steve Atkins, Jon Callas, Dave Crocker, Michael Cudahy,\n\
    \   Jutta Degener, Timothy Der, Jim Fenton, Duncan Findlay, Phillip\n   Hallam-Baker,\
    \ Murray S. Kucherawy, John Levine, Miles Libbey, David\n   Margrave, Justin Mason,\
    \ David Mayne, Russell Nelson, Juan Altmayer\n   Pizzorno, Blake Ramsdell, Scott\
    \ Renfro, the Spamhaus.org team, Malte\n   S. Stretz, Robert Sanders, Bradley\
    \ Taylor, and Rand Wacker for their\n   valuable suggestions and constructive\
    \ criticism.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark Delany\n   Yahoo! Inc\n   701 First Avenue\n   Sunnyvale,\
    \ CA 95087\n   USA\n   EMail: markd+domainkeys@yahoo-inc.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
