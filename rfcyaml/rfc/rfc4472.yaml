- title: __initial_text__
  contents:
  - '          Operational Considerations and Issues with IPv6 DNS

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo presents operational considerations and issues with IPv6\n\
    \   Domain Name System (DNS), including a summary of special IPv6\n   addresses,\
    \ documentation of known DNS implementation misbehavior,\n   recommendations and\
    \ considerations on how to perform DNS naming for\n   service provisioning and\
    \ for DNS resolver IPv6 support,\n   considerations for DNS updates for both the\
    \ forward and reverse\n   trees, and miscellaneous issues.  This memo is aimed\
    \ to include a\n   summary of information about IPv6 DNS considerations for those\
    \ who\n   have experience with IPv4 DNS.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Representing IPv6 Addresses in DNS Records .................3\n  \
    \    1.2. Independence of DNS Transport and DNS Records ..............4\n    \
    \  1.3. Avoiding IPv4/IPv6 Name Space Fragmentation ................4\n      1.4.\
    \ Query Type '*' and A/AAAA Records ..........................4\n   2. DNS Considerations\
    \ about Special IPv6 Addresses .................5\n      2.1. Limited-Scope Addresses\
    \ ....................................5\n      2.2. Temporary Addresses ........................................5\n\
    \      2.3. 6to4 Addresses .............................................5\n  \
    \    2.4. Other Transition Mechanisms ................................5\n   3.\
    \ Observed DNS Implementation Misbehavior .........................6\n      3.1.\
    \ Misbehavior of DNS Servers and Load-balancers ..............6\n      3.2. Misbehavior\
    \ of DNS Resolvers ...............................6\n   4. Recommendations for\
    \ Service Provisioning Using DNS ..............7\n      4.1. Use of Service Names\
    \ instead of Node Names .................7\n      4.2. Separate vs. the Same Service\
    \ Names for IPv4 and IPv6 ......8\n      4.3. Adding the Records Only When Fully\
    \ IPv6-enabled ............8\n      4.4. The Use of TTL for IPv4 and IPv6 RRs\
    \ .......................9\n           4.4.1. TTL with Courtesy Additional Data\
    \ ...................9\n           4.4.2. TTL with Critical Additional Data ..................10\n\
    \      4.5. IPv6 Transport Guidelines for DNS Servers .................10\n  \
    \ 5. Recommendations for DNS Resolver IPv6 Support ..................10\n    \
    \  5.1. DNS Lookups May Query IPv6 Records Prematurely ............10\n      5.2.\
    \ Obtaining a List of DNS Recursive Resolvers ...............12\n      5.3. IPv6\
    \ Transport Guidelines for Resolvers ...................12\n   6. Considerations\
    \ about Forward DNS Updating ......................13\n      6.1. Manual or Custom\
    \ DNS Updates ..............................13\n      6.2. Dynamic DNS ...............................................13\n\
    \   7. Considerations about Reverse DNS Updating ......................14\n  \
    \    7.1. Applicability of Reverse DNS ..............................14\n    \
    \  7.2. Manual or Custom DNS Updates ..............................15\n      7.3.\
    \ DDNS with Stateless Address Autoconfiguration .............16\n      7.4. DDNS\
    \ with DHCP ............................................17\n      7.5. DDNS with\
    \ Dynamic Prefix Delegation .......................17\n   8. Miscellaneous DNS\
    \ Considerations ...............................18\n      8.1. NAT-PT with DNS-ALG\
    \ .......................................18\n      8.2. Renumbering Procedures\
    \ and Applications' Use of DNS .......18\n   9. Acknowledgements ...............................................19\n\
    \   10. Security Considerations .......................................19\n  \
    \ 11. References ....................................................20\n    \
    \  11.1. Normative References .....................................20\n      11.2.\
    \ Informative References ...................................22\n   Appendix A.\
    \ Unique Local Addressing Considerations for DNS ........24\n   Appendix B. Behavior\
    \ of Additional Data in IPv4/IPv6\n               Environments ..........................................24\n\
    \      B.1. Description of Additional Data Scenarios ..................24\n  \
    \    B.2. Which Additional Data to Keep, If Any? ....................26\n    \
    \  B.3. Discussion of the Potential Problems ......................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo presents operational considerations and issues\
    \ with IPv6\n   DNS; it is meant to be an extensive summary and a list of pointers\n\
    \   for more information about IPv6 DNS considerations for those with\n   experience\
    \ with IPv4 DNS.\n   The purpose of this document is to give information about\
    \ various\n   issues and considerations related to DNS operations with IPv6; it\
    \ is\n   not meant to be a normative specification or standard for IPv6 DNS.\n\
    \   The first section gives a brief overview of how IPv6 addresses and\n   names\
    \ are represented in the DNS, how transport protocols and\n   resource records\
    \ (don't) relate, and what IPv4/IPv6 name space\n   fragmentation means and how\
    \ to avoid it; all of these are described\n   at more length in other documents.\n\
    \   The second section summarizes the special IPv6 address types and how\n   they\
    \ relate to DNS.  The third section describes observed DNS\n   implementation\
    \ misbehaviors that have a varying effect on the use of\n   IPv6 records with\
    \ DNS.  The fourth section lists recommendations and\n   considerations for provisioning\
    \ services with DNS.  The fifth section\n   in turn looks at recommendations and\
    \ considerations about providing\n   IPv6 support in the resolvers.  The sixth\
    \ and seventh sections\n   describe considerations with forward and reverse DNS\
    \ updates,\n   respectively.  The eighth section introduces several miscellaneous\n\
    \   IPv6 issues relating to DNS for which no better place has been found\n   in\
    \ this memo.  Appendix A looks briefly at the requirements for\n   unique local\
    \ addressing.  Appendix B discusses additional data.\n"
- title: 1.1.  Representing IPv6 Addresses in DNS Records
  contents:
  - "1.1.  Representing IPv6 Addresses in DNS Records\n   In the forward zones, IPv6\
    \ addresses are represented using AAAA\n   records.  In the reverse zones, IPv6\
    \ address are represented using\n   PTR records in the nibble format under the\
    \ ip6.arpa. tree.  See\n   [RFC3596] for more about IPv6 DNS usage, and [RFC3363]\
    \ or [RFC3152]\n   for background information.\n   In particular, one should note\
    \ that the use of A6 records in the\n   forward tree or Bitlabels in the reverse\
    \ tree is not recommended\n   [RFC3363].  Using DNAME records is not recommended\
    \ in the reverse\n   tree in conjunction with A6 records; the document did not\
    \ mean to\n   take a stance on any other use of DNAME records [RFC3364].\n"
- title: 1.2.  Independence of DNS Transport and DNS Records
  contents:
  - "1.2.  Independence of DNS Transport and DNS Records\n   DNS has been designed\
    \ to present a single, globally unique name space\n   [RFC2826].  This property\
    \ should be maintained, as described here and\n   in Section 1.3.\n   The IP version\
    \ used to transport the DNS queries and responses is\n   independent of the records\
    \ being queried: AAAA records can be queried\n   over IPv4, and A records over\
    \ IPv6.  The DNS servers must not make\n   any assumptions about what data to\
    \ return for Answer and Authority\n   sections based on the underlying transport\
    \ used in a query.\n   However, there is some debate whether the addresses in\
    \ Additional\n   section could be selected or filtered using hints obtained from\
    \ which\n   transport was being used; this has some obvious problems because in\n\
    \   many cases the transport protocol does not correlate with the\n   requests,\
    \ and because a \"bad\" answer is in a way worse than no answer\n   at all (consider\
    \ the case where the client is led to believe that a\n   name received in the\
    \ additional record does not have any AAAA records\n   at all).\n   As stated\
    \ in [RFC3596]:\n      The IP protocol version used for querying resource records\
    \ is\n      independent of the protocol version of the resource records; e.g.,\n\
    \      IPv4 transport can be used to query IPv6 records and vice versa.\n"
- title: 1.3.  Avoiding IPv4/IPv6 Name Space Fragmentation
  contents:
  - "1.3.  Avoiding IPv4/IPv6 Name Space Fragmentation\n   To avoid the DNS name space\
    \ from fragmenting into parts where some\n   parts of DNS are only visible using\
    \ IPv4 (or IPv6) transport, the\n   recommendation is to always keep at least\
    \ one authoritative server\n   IPv4-enabled, and to ensure that recursive DNS\
    \ servers support IPv4.\n   See DNS IPv6 transport guidelines [RFC3901] for more\
    \ information.\n"
- title: 1.4.  Query Type '*' and A/AAAA Records
  contents:
  - "1.4.  Query Type '*' and A/AAAA Records\n   QTYPE=* is typically only used for\
    \ debugging or management purposes;\n   it is worth keeping in mind that QTYPE=*\
    \ (\"ANY\" queries) only return\n   any available RRsets, not *all* the RRsets,\
    \ because the caches do not\n   necessarily have all the RRsets and have no way\
    \ of guaranteeing that\n   they have all the RRsets.  Therefore, to get both A\
    \ and AAAA records\n   reliably, two separate queries must be made.\n"
- title: 2.  DNS Considerations about Special IPv6 Addresses
  contents:
  - "2.  DNS Considerations about Special IPv6 Addresses\n   There are a couple of\
    \ IPv6 address types that are somewhat special;\n   these are considered here.\n"
- title: 2.1.  Limited-Scope Addresses
  contents:
  - "2.1.  Limited-Scope Addresses\n   The IPv6 addressing architecture [RFC4291]\
    \ includes two kinds of\n   local-use addresses: link-local (fe80::/10) and site-local\n\
    \   (fec0::/10).  The site-local addresses have been deprecated [RFC3879]\n  \
    \ but are discussed with unique local addresses in Appendix A.\n   Link-local\
    \ addresses should never be published in DNS (whether in\n   forward or reverse\
    \ tree), because they have only local (to the\n   connected link) significance\
    \ [WIP-DC2005].\n"
- title: 2.2.  Temporary Addresses
  contents:
  - "2.2.  Temporary Addresses\n   Temporary addresses defined in RFC 3041 [RFC3041]\
    \ (sometimes called\n   \"privacy addresses\") use a random number as the interface\
    \ identifier.\n   Having DNS AAAA records that are updated to always contain the\n\
    \   current value of a node's temporary address would defeat the purpose\n   of\
    \ the mechanism and is not recommended.  However, it would still be\n   possible\
    \ to return a non-identifiable name (e.g., the IPv6 address in\n   hexadecimal\
    \ format), as described in [RFC3041].\n"
- title: 2.3.  6to4 Addresses
  contents:
  - "2.3.  6to4 Addresses\n   6to4 [RFC3056] specifies an automatic tunneling mechanism\
    \ that maps a\n   public IPv4 address V4ADDR to an IPv6 prefix 2002:V4ADDR::/48.\n\
    \   If the reverse DNS population would be desirable (see Section 7.1 for\n  \
    \ applicability), there are a number of possible ways to do so.\n   [WIP-H2005]\
    \ aims to design an autonomous reverse-delegation system\n   that anyone being\
    \ capable of communicating using a specific 6to4\n   address would be able to\
    \ set up a reverse delegation to the\n   corresponding 6to4 prefix.  This could\
    \ be deployed by, e.g., Regional\n   Internet Registries (RIRs).  This is a practical\
    \ solution, but may\n   have some scalability concerns.\n"
- title: 2.4.  Other Transition Mechanisms
  contents:
  - "2.4.  Other Transition Mechanisms\n   6to4 is mentioned as a case of an IPv6\
    \ transition mechanism requiring\n   special considerations.  In general, mechanisms\
    \ that include a\n   special prefix may need a custom solution; otherwise, for\
    \ example,\n   when IPv4 address is embedded as the suffix or not embedded at\
    \ all,\n   special solutions are likely not needed.\n   Note that it does not\
    \ seem feasible to provide reverse DNS with\n   another automatic tunneling mechanism,\
    \ Teredo [RFC4380]; this is\n   because the IPv6 address is based on the IPv4\
    \ address and UDP port of\n   the current Network Address Translation (NAT) mapping,\
    \ which is\n   likely to be relatively short-lived.\n"
- title: 3.  Observed DNS Implementation Misbehavior
  contents:
  - "3.  Observed DNS Implementation Misbehavior\n   Several classes of misbehavior\
    \ in DNS servers, load-balancers, and\n   resolvers have been observed.  Most\
    \ of these are rather generic, not\n   only applicable to IPv6 -- but in some\
    \ cases, the consequences of\n   this misbehavior are extremely severe in IPv6\
    \ environments and\n   deserve to be mentioned.\n"
- title: 3.1.  Misbehavior of DNS Servers and Load-balancers
  contents:
  - "3.1.  Misbehavior of DNS Servers and Load-balancers\n   There are several classes\
    \ of misbehavior in certain DNS servers and\n   load-balancers that have been\
    \ noticed and documented [RFC4074]: some\n   implementations silently drop queries\
    \ for unimplemented DNS records\n   types, or provide wrong answers to such queries\
    \ (instead of a proper\n   negative reply).  While typically these issues are\
    \ not limited to\n   AAAA records, the problems are aggravated by the fact that\
    \ AAAA\n   records are being queried instead of (mainly) A records.\n   The problems\
    \ are serious because when looking up a DNS name, typical\n   getaddrinfo() implementations,\
    \ with AF_UNSPEC hint given, first try\n   to query the AAAA records of the name,\
    \ and after receiving a\n   response, query the A records.  This is done in a\
    \ serial fashion --\n   if the first query is never responded to (instead of properly\n\
    \   returning a negative answer), significant time-outs will occur.\n   In consequence,\
    \ this is an enormous problem for IPv6 deployments, and\n   in some cases, IPv6\
    \ support in the software has even been disabled\n   due to these problems.\n\
    \   The solution is to fix or retire those misbehaving implementations,\n   but\
    \ that is likely not going to be effective.  There are some\n   possible ways\
    \ to mitigate the problem, e.g., by performing the\n   lookups somewhat in parallel\
    \ and reducing the time-out as long as at\n   least one answer has been received,\
    \ but such methods remain to be\n   investigated; slightly more on this is included\
    \ in Section 5.\n"
- title: 3.2.  Misbehavior of DNS Resolvers
  contents:
  - "3.2.  Misbehavior of DNS Resolvers\n   Several classes of misbehavior have also\
    \ been noticed in DNS\n   resolvers [WIP-LB2005].  However, these do not seem\
    \ to directly\n   impair IPv6 use, and are only referred to for completeness.\n"
- title: 4.  Recommendations for Service Provisioning Using DNS
  contents:
  - "4.  Recommendations for Service Provisioning Using DNS\n   When names are added\
    \ in the DNS to facilitate a service, there are\n   several general guidelines\
    \ to consider to be able to do it as\n   smoothly as possible.\n"
- title: 4.1.  Use of Service Names instead of Node Names
  contents:
  - "4.1.  Use of Service Names instead of Node Names\n   It makes sense to keep information\
    \ about separate services logically\n   separate in the DNS by using a different\
    \ DNS hostname for each\n   service.  There are several reasons for doing this,\
    \ for example:\n   o  It allows more flexibility and ease for migration of (only\
    \ a part\n      of) services from one node to another,\n   o  It allows configuring\
    \ different properties (e.g., Time to Live\n      (TTL)) for each service, and\n\
    \   o  It allows deciding separately for each service whether or not to\n    \
    \  publish the IPv6 addresses (in cases where some services are more\n      IPv6-ready\
    \ than others).\n   Using SRV records [RFC2782] would avoid these problems.\n\
    \   Unfortunately, those are not sufficiently widely used to be\n   applicable\
    \ in most cases.  Hence an operation technique is to use\n   service names instead\
    \ of node names (or \"hostnames\").  This\n   operational technique is not specific\
    \ to IPv6, but required to\n   understand the considerations described in Section\
    \ 4.2 and\n   Section 4.3.\n   For example, assume a node named \"pobox.example.com\"\
    \ provides both\n   SMTP and IMAP service.  Instead of configuring the MX records\
    \ to\n   point at \"pobox.example.com\", and configuring the mail clients to\n\
    \   look up the mail via IMAP from \"pobox.example.com\", one could use,\n   e.g.,\
    \ \"smtp.example.com\" for SMTP (for both message submission and\n   mail relaying\
    \ between SMTP servers) and \"imap.example.com\" for IMAP.\n   Note that in the\
    \ specific case of SMTP relaying, the server itself\n   must typically also be\
    \ configured to know all its names to ensure\n   that loops do not occur.  DNS\
    \ can provide a layer of indirection\n   between service names and where the service\
    \ actually is, and using\n   which addresses.  (Obviously, when wanting to reach\
    \ a specific node,\n   one should use the hostname rather than a service name.)\n"
- title: 4.2.  Separate vs. the Same Service Names for IPv4 and IPv6
  contents:
  - "4.2.  Separate vs. the Same Service Names for IPv4 and IPv6\n   The service naming\
    \ can be achieved in basically two ways: when a\n   service is named \"service.example.com\"\
    \ for IPv4, the IPv6-enabled\n   service could either be added to \"service.example.com\"\
    \ or added\n   separately under a different name, e.g., in a sub-domain like\n\
    \   \"service.ipv6.example.com\".\n   These two methods have different characteristics.\
    \  Using a different\n   name allows for easier service piloting, minimizing the\
    \ disturbance\n   to the \"regular\" users of IPv4 service; however, the service\
    \ would\n   not be used transparently, without the user/application explicitly\n\
    \   finding it and asking for it -- which would be a disadvantage in most\n  \
    \ cases.  When the different name is under a sub-domain, if the\n   services are\
    \ deployed within a restricted network (e.g., inside an\n   enterprise), it's\
    \ possible to prefer them transparently, at least to\n   a degree, by modifying\
    \ the DNS search path; however, this is a\n   suboptimal solution.  Using the\
    \ same service name is the \"long-term\"\n   solution, but may degrade performance\
    \ for those clients whose IPv6\n   performance is lower than IPv4, or does not\
    \ work as well (see\n   Section 4.3 for more).\n   In most cases, it makes sense\
    \ to pilot or test a service using\n   separate service names, and move to the\
    \ use of the same name when\n   confident enough that the service level will not\
    \ degrade for the\n   users unaware of IPv6.\n"
- title: 4.3.  Adding the Records Only When Fully IPv6-enabled
  contents:
  - "4.3.  Adding the Records Only When Fully IPv6-enabled\n   The recommendation\
    \ is that AAAA records for a service should not be\n   added to the DNS until\
    \ all of following are true:\n   1.  The address is assigned to the interface\
    \ on the node.\n   2.  The address is configured on the interface.\n   3.  The\
    \ interface is on a link that is connected to the IPv6\n       infrastructure.\n\
    \   In addition, if the AAAA record is added for the node, instead of\n   service\
    \ as recommended, all the services of the node should be IPv6-\n   enabled prior\
    \ to adding the resource record.\n   For example, if an IPv6 node is isolated\
    \ from an IPv6 perspective\n   (e.g., it is not connected to IPv6 Internet) constraint\
    \ #3 would mean\n   that it should not have an address in the DNS.\n   Consider\
    \ the case of two dual-stack nodes, which both are IPv6-\n   enabled, but the\
    \ server does not have (global) IPv6 connectivity.  As\n   the client looks up\
    \ the server's name, only A records are returned\n   (if the recommendations above\
    \ are followed), and no IPv6\n   communication, which would have been unsuccessful,\
    \ is even attempted.\n   The issues are not always so black-and-white.  Usually,\
    \ it's\n   important that the service offered using both protocols is of roughly\n\
    \   equal quality, using the appropriate metrics for the service (e.g.,\n   latency,\
    \ throughput, low packet loss, general reliability, etc.).\n   This is typically\
    \ very important especially for interactive or real-\n   time services.  In many\
    \ cases, the quality of IPv6 connectivity may\n   not yet be equal to that of\
    \ IPv4, at least globally; this has to be\n   taken into consideration when enabling\
    \ services.\n"
- title: 4.4.  The Use of TTL for IPv4 and IPv6 RRs
  contents:
  - "4.4.  The Use of TTL for IPv4 and IPv6 RRs\n   The behavior of DNS caching when\
    \ different TTL values are used for\n   different RRsets of the same name calls\
    \ for explicit discussion.  For\n   example, let's consider two unrelated zone\
    \ fragments:\n      example.com.        300    IN    MX     foo.example.com.\n\
    \      foo.example.com.    300    IN    A      192.0.2.1\n      foo.example.com.\
    \    100    IN    AAAA   2001:db8::1\n   ...\n      child.example.com.    300\
    \  IN    NS     ns.child.example.com.\n      ns.child.example.com. 300  IN   \
    \ A      192.0.2.1\n      ns.child.example.com. 100  IN    AAAA   2001:db8::1\n\
    \   In the former case, we have \"courtesy\" additional data; in the\n   latter,\
    \ we have \"critical\" additional data.  See more extensive\n   background discussion\
    \ of additional data handling in Appendix B.\n"
- title: 4.4.1.  TTL with Courtesy Additional Data
  contents:
  - "4.4.1.  TTL with Courtesy Additional Data\n   When a caching resolver asks for\
    \ the MX record of example.com, it\n   gets back \"foo.example.com\".  It may\
    \ also get back either one or both\n   of the A and AAAA records in the additional\
    \ section.  The resolver\n   must explicitly query for both A and AAAA records\
    \ [RFC2821].\n   After 100 seconds, the AAAA record is removed from the cache(s)\n\
    \   because its TTL expired.  It could be argued to be useful for the\n   caching\
    \ resolvers to discard the A record when the shorter TTL (in\n   this case, for\
    \ the AAAA record) expires; this would avoid the\n   situation where there would\
    \ be a window of 200 seconds when\n   incomplete information is returned from\
    \ the cache.  Further argument\n   for discarding is that in the normal operation,\
    \ the TTL values are so\n   high that very likely the incurred additional queries\
    \ would not be\n   noticeable, compared to the obtained performance optimization.\
    \  The\n   behavior in this scenario is unspecified.\n"
- title: 4.4.2.  TTL with Critical Additional Data
  contents:
  - "4.4.2.  TTL with Critical Additional Data\n   The difference to courtesy additional\
    \ data is that the A/AAAA records\n   served by the parent zone cannot be queried\
    \ explicitly.  Therefore,\n   after 100 seconds the AAAA record is removed from\
    \ the cache(s), but\n   the A record remains.  Queries for the remaining 200 seconds\n\
    \   (provided that there are no further queries from the parent that\n   could\
    \ refresh the caches) only return the A record, leading to a\n   potential operational\
    \ situation with unreachable servers.\n   Similar cache flushing strategies apply\
    \ in this scenario; the\n   behavior is likewise unspecified.\n"
- title: 4.5.  IPv6 Transport Guidelines for DNS Servers
  contents:
  - "4.5.  IPv6 Transport Guidelines for DNS Servers\n   As described in Section 1.3\
    \ and [RFC3901], there should continue to\n   be at least one authoritative IPv4\
    \ DNS server for every zone, even if\n   the zone has only IPv6 records.  (Note\
    \ that obviously, having more\n   servers with robust connectivity would be preferable,\
    \ but this is the\n   minimum recommendation; also see [RFC2182].)\n"
- title: 5.  Recommendations for DNS Resolver IPv6 Support
  contents:
  - "5.  Recommendations for DNS Resolver IPv6 Support\n   When IPv6 is enabled on\
    \ a node, there are several things to consider\n   to ensure that the process\
    \ is as smooth as possible.\n"
- title: 5.1.  DNS Lookups May Query IPv6 Records Prematurely
  contents:
  - "5.1.  DNS Lookups May Query IPv6 Records Prematurely\n   The system library that\
    \ implements the getaddrinfo() function for\n   looking up names is a critical\
    \ piece when considering the robustness\n   of enabling IPv6; it may come in basically\
    \ three flavors:\n   1.  The system library does not know whether IPv6 has been\
    \ enabled in\n       the kernel of the operating system: it may start looking\
    \ up AAAA\n       records with getaddrinfo() and AF_UNSPEC hint when the system\
    \ is\n       upgraded to a system library version that supports IPv6.\n   2. \
    \ The system library might start to perform IPv6 queries with\n       getaddrinfo()\
    \ only when IPv6 has been enabled in the kernel.\n       However, this does not\
    \ guarantee that there exists any useful\n       IPv6 connectivity (e.g., the\
    \ node could be isolated from the\n       other IPv6 networks, only having link-local\
    \ addresses).\n   3.  The system library might implement a toggle that would apply\
    \ some\n       heuristics to the \"IPv6-readiness\" of the node before starting\
    \ to\n       perform queries; for example, it could check whether only link-\n\
    \       local IPv6 address(es) exists, or if at least one global IPv6\n      \
    \ address exists.\n   First, let us consider generic implications of unnecessary\
    \ queries\n   for AAAA records: when looking up all the records in the DNS, AAAA\n\
    \   records are typically tried first, and then A records.  These are\n   done\
    \ in serial, and the A query is not performed until a response is\n   received\
    \ to the AAAA query.  Considering the misbehavior of DNS\n   servers and load-balancers,\
    \ as described in Section 3.1, the lookup\n   delay for AAAA may incur additional\
    \ unnecessary latency, and\n   introduce a component of unreliability.\n   One\
    \ option here could be to do the queries partially in parallel; for\n   example,\
    \ if the final response to the AAAA query is not received in\n   0.5 seconds,\
    \ start performing the A query while waiting for the\n   result.  (Immediate parallelism\
    \ might not be optimal, at least\n   without information-sharing between the lookup\
    \ threads, as that would\n   probably lead to duplicate non-cached delegation\
    \ chain lookups.)\n   An additional concern is the address selection, which may,\
    \ in some\n   circumstances, prefer AAAA records over A records even when the\
    \ node\n   does not have any IPv6 connectivity [WIP-RDP2004].  In some cases,\n\
    \   the implementation may attempt to connect or send a datagram on a\n   physical\
    \ link [WIP-R2006], incurring very long protocol time-outs,\n   instead of quickly\
    \ falling back to IPv4.\n   Now, we can consider the issues specific to each of\
    \ the three\n   possibilities:\n   In the first case, the node performs a number\
    \ of completely useless\n   DNS lookups as it will not be able to use the returned\
    \ AAAA records\n   anyway.  (The only exception is where the application desires\
    \ to know\n   what's in the DNS, but not use the result for communication.)  One\n\
    \   should be able to disable these unnecessary queries, for both latency\n  \
    \ and reliability reasons.  However, as IPv6 has not been enabled, the\n   connections\
    \ to IPv6 addresses fail immediately, and if the\n   application is programmed\
    \ properly, the application can fall\n   gracefully back to IPv4 [RFC4038].\n\
    \   The second case is similar to the first, except it happens to a\n   smaller\
    \ set of nodes when IPv6 has been enabled but connectivity has\n   not been provided\
    \ yet.  Similar considerations apply, with the\n   exception that IPv6 records,\
    \ when returned, will be actually tried\n   first, which may typically lead to\
    \ long time-outs.\n   The third case is a bit more complex: optimizing away the\
    \ DNS lookups\n   with only link-locals is probably safe (but may be desirable\
    \ with\n   different lookup services that getaddrinfo() may support), as the\n\
    \   link-locals are typically automatically generated when IPv6 is\n   enabled,\
    \ and do not indicate any form of IPv6 connectivity.  That is,\n   performing\
    \ DNS lookups only when a non-link-local address has been\n   configured on any\
    \ interface could be beneficial -- this would be an\n   indication that the address\
    \ has been configured either from a router\n   advertisement, Dynamic Host Configuration\
    \ Protocol for IPv6 (DHCPv6)\n   [RFC3315], or manually.  Each would indicate\
    \ at least some form of\n   IPv6 connectivity, even though there would not be\
    \ guarantees of it.\n   These issues should be analyzed at more depth, and the\
    \ fixes found\n   consensus on, perhaps in a separate document.\n"
- title: 5.2.  Obtaining a List of DNS Recursive Resolvers
  contents:
  - "5.2.  Obtaining a List of DNS Recursive Resolvers\n   In scenarios where DHCPv6\
    \ is available, a host can discover a list of\n   DNS recursive resolvers through\
    \ the DHCPv6 \"DNS Recursive Name\n   Server\" option [RFC3646].  This option\
    \ can be passed to a host\n   through a subset of DHCPv6 [RFC3736].\n   The IETF\
    \ is considering the development of alternative mechanisms for\n   obtaining the\
    \ list of DNS recursive name servers when DHCPv6 is\n   unavailable or inappropriate.\
    \  No decision about taking on this\n   development work has been reached as of\
    \ this writing [RFC4339].\n   In scenarios where DHCPv6 is unavailable or inappropriate,\
    \ mechanisms\n   under consideration for development include the use of [WIP-O2004]\n\
    \   and the use of Router Advertisements to convey the information\n   [WIP-J2006].\n\
    \   Note that even though IPv6 DNS resolver discovery is a recommended\n   procedure,\
    \ it is not required for dual-stack nodes in dual-stack\n   networks as IPv6 DNS\
    \ records can be queried over IPv4 as well as\n   IPv6.  Obviously, nodes that\
    \ are meant to function without manual\n   configuration in IPv6-only networks\
    \ must implement the DNS resolver\n   discovery function.\n"
- title: 5.3.  IPv6 Transport Guidelines for Resolvers
  contents:
  - "5.3.  IPv6 Transport Guidelines for Resolvers\n   As described in Section 1.3\
    \ and [RFC3901], the recursive resolvers\n   should be IPv4-only or dual-stack\
    \ to be able to reach any IPv4-only\n   DNS server.  Note that this requirement\
    \ is also fulfilled by an IPv6-\n   only stub resolver pointing to a dual-stack\
    \ recursive DNS resolver.\n"
- title: 6.  Considerations about Forward DNS Updating
  contents:
  - "6.  Considerations about Forward DNS Updating\n   While the topic of how to enable\
    \ updating the forward DNS, i.e., the\n   mapping from names to the correct new\
    \ addresses, is not specific to\n   IPv6, it should be considered especially due\
    \ to the advent of\n   Stateless Address Autoconfiguration [RFC2462].\n   Typically,\
    \ forward DNS updates are more manageable than doing them in\n   the reverse DNS,\
    \ because the updater can often be assumed to \"own\" a\n   certain DNS name --\
    \ and we can create a form of security relationship\n   with the DNS name and\
    \ the node that is allowed to update it to point\n   to a new address.\n   A more\
    \ complex form of DNS updates -- adding a whole new name into a\n   DNS zone,\
    \ instead of updating an existing name -- is considered out\n   of scope for this\
    \ memo as it could require zone-wide authentication.\n   Adding a new name in\
    \ the forward zone is a problem that is still\n   being explored with IPv4, and\
    \ IPv6 does not seem to add much new in\n   that area.\n"
- title: 6.1.  Manual or Custom DNS Updates
  contents:
  - "6.1.  Manual or Custom DNS Updates\n   The DNS mappings can also be maintained\
    \ by hand, in a semi-automatic\n   fashion or by running non-standardized protocols.\
    \  These are not\n   considered at more length in this memo.\n"
- title: 6.2.  Dynamic DNS
  contents:
  - "6.2.  Dynamic DNS\n   Dynamic DNS updates (DDNS) [RFC2136] [RFC3007] is a standardized\n\
    \   mechanism for dynamically updating the DNS.  It works equally well\n   with\
    \ Stateless Address Autoconfiguration (SLAAC), DHCPv6, or manual\n   address configuration.\
    \  It is important to consider how each of these\n   behave if IP address-based\
    \ authentication, instead of stronger\n   mechanisms [RFC3007], was used in the\
    \ updates.\n   1.  Manual addresses are static and can be configured.\n   2. \
    \ DHCPv6 addresses could be reasonably static or dynamic, depending\n       on\
    \ the deployment, and could or could not be configured on the\n       DNS server\
    \ for the long term.\n   3.  SLAAC addresses are typically stable for a long time,\
    \ but could\n       require work to be configured and maintained.\n   As relying\
    \ on IP addresses for Dynamic DNS is rather insecure at\n   best, stronger authentication\
    \ should always be used; however, this\n   requires that the authorization keying\
    \ will be explicitly configured\n   using unspecified operational methods.\n \
    \  Note that with DHCP it is also possible that the DHCP server updates\n   the\
    \ DNS, not the host.  The host might only indicate in the DHCP\n   exchange which\
    \ hostname it would prefer, and the DHCP server would\n   make the appropriate\
    \ updates.  Nonetheless, while this makes setting\n   up a secure channel between\
    \ the updater and the DNS server easier, it\n   does not help much with \"content\"\
    \ security, i.e., whether the\n   hostname was acceptable -- if the DNS server\
    \ does not include\n   policies, they must be included in the DHCP server (e.g.,\
    \ a regular\n   host should not be able to state that its name is \"www.example.com\"\
    ).\n   DHCP-initiated DDNS updates have been extensively described in\n   [WIP-SV2005],\
    \ [WIP-S2005a], and [WIP-S2005b].\n   The nodes must somehow be configured with\
    \ the information about the\n   servers where they will attempt to update their\
    \ addresses, sufficient\n   security material for authenticating themselves to\
    \ the server, and\n   the hostname they will be updating.  Unless otherwise configured,\
    \ the\n   first could be obtained by looking up the authoritative name servers\n\
    \   for the hostname; the second must be configured explicitly unless one\n  \
    \ chooses to trust the IP address-based authentication (not a good\n   idea);\
    \ and lastly, the nodename is typically pre-configured somehow\n   on the node,\
    \ e.g., at install time.\n   Care should be observed when updating the addresses\
    \ not to use longer\n   TTLs for addresses than are preferred lifetimes for the\
    \ addresses, so\n   that if the node is renumbered in a managed fashion, the amount\
    \ of\n   stale DNS information is kept to the minimum.  That is, if the\n   preferred\
    \ lifetime of an address expires, the TTL of the record needs\n   to be modified\
    \ unless it was already done before the expiration.  For\n   better flexibility,\
    \ the DNS TTL should be much shorter (e.g., a half\n   or a third) than the lifetime\
    \ of an address; that way, the node can\n   start lowering the DNS TTL if it seems\
    \ like the address has not been\n   renewed/refreshed in a while.  Some discussion\
    \ on how an\n   administrator could manage the DNS TTL is included in [RFC4192];\
    \ this\n   could be applied to (smart) hosts as well.\n"
- title: 7.  Considerations about Reverse DNS Updating
  contents:
  - "7.  Considerations about Reverse DNS Updating\n   Updating the reverse DNS zone\
    \ may be difficult because of the split\n   authority over an address.  However,\
    \ first we have to consider the\n   applicability of reverse DNS in the first\
    \ place.\n"
- title: 7.1.  Applicability of Reverse DNS
  contents:
  - "7.1.  Applicability of Reverse DNS\n   Today, some applications use reverse DNS\
    \ either to look up some hints\n   about the topological information associated\
    \ with an address (e.g.,\n   resolving web server access logs) or (as a weak form\
    \ of a security\n   check) to get a feel whether the user's network administrator\
    \ has\n   \"authorized\" the use of the address (on the premise that adding a\n\
    \   reverse record for an address would signal some form of\n   authorization).\n\
    \   One additional, maybe slightly more useful usage is ensuring that the\n  \
    \ reverse and forward DNS contents match (by looking up the pointer to\n   the\
    \ name by the IP address from the reverse tree, and ensuring that a\n   record\
    \ under the name in the forward tree points to the IP address)\n   and correspond\
    \ to a configured name or domain.  As a security check,\n   it is typically accompanied\
    \ by other mechanisms, such as a user/\n   password login; the main purpose of\
    \ the reverse+forward DNS check is\n   to weed out the majority of unauthorized\
    \ users, and if someone\n   managed to bypass the checks, he would still need\
    \ to authenticate\n   \"properly\".\n   It may also be desirable to store IPsec\
    \ keying material corresponding\n   to an IP address in the reverse DNS, as justified\
    \ and described in\n   [RFC4025].\n   It is not clear whether it makes sense to\
    \ require or recommend that\n   reverse DNS records be updated.  In many cases,\
    \ it would just make\n   more sense to use proper mechanisms for security (or\
    \ topological\n   information lookup) in the first place.  At minimum, the applications\n\
    \   that use it as a generic authorization (in the sense that a record\n   exists\
    \ at all) should be modified as soon as possible to avoid such\n   lookups completely.\n\
    \   The applicability is discussed at more length in [WIP-S2005c].\n"
- title: 7.2.  Manual or Custom DNS Updates
  contents:
  - "7.2.  Manual or Custom DNS Updates\n   Reverse DNS can of course be updated using\
    \ manual or custom methods.\n   These are not further described here, except for\
    \ one special case.\n   One way to deploy reverse DNS would be to use wildcard\
    \ records, for\n   example, by configuring one name for a subnet (/64) or a site\
    \ (/48).\n   As a concrete example, a site (or the site's ISP) could configure\
    \ the\n   reverses of the prefix 2001:db8:f00::/48 to point to one name using\
    \ a\n   wildcard record like \"*.0.0.f.0.8.b.d.0.1.0.0.2.ip6.arpa. IN PTR\n  \
    \ site.example.com.\".  Naturally, such a name could not be verified\n   from\
    \ the forward DNS, but would at least provide some form of\n   \"topological information\"\
    \ or \"weak authorization\" if that is really\n   considered to be useful.  Note\
    \ that this is not actually updating the\n   DNS as such, as the whole point is\
    \ to avoid DNS updates completely by\n   manually configuring a generic name.\n"
- title: 7.3.  DDNS with Stateless Address Autoconfiguration
  contents:
  - "7.3.  DDNS with Stateless Address Autoconfiguration\n   Dynamic reverse DNS with\
    \ SLAAC is simpler than forward DNS updates in\n   some regard, while being more\
    \ difficult in another, as described\n   below.\n   The address space administrator\
    \ decides whether or not the hosts are\n   trusted to update their reverse DNS\
    \ records.  If they are trusted and\n   deployed at the same site (e.g., not across\
    \ the Internet), a simple\n   address-based authorization is typically sufficient\
    \ (i.e., check that\n   the DNS update is done from the same IP address as the\
    \ record being\n   updated); stronger security can also be used [RFC3007].  If\
    \ they\n   aren't allowed to update the reverses, no update can occur.  However,\n\
    \   such address-based update authorization operationally requires that\n   ingress\
    \ filtering [RFC3704] has been set up at the border of the site\n   where the\
    \ updates occur, and as close to the updater as possible.\n   Address-based authorization\
    \ is simpler with reverse DNS (as there is\n   a connection between the record\
    \ and the address) than with forward\n   DNS.  However, when a stronger form of\
    \ security is used, forward DNS\n   updates are simpler to manage because the\
    \ host can be assumed to have\n   an association with the domain.  Note that the\
    \ user may roam to\n   different networks and does not necessarily have any association\
    \ with\n   the owner of that address space.  So, assuming a stronger form of\n\
    \   authorization for reverse DNS updates than an address association is\n   generally\
    \ infeasible.\n   Moreover, the reverse zones must be cleaned up by an unspecified\n\
    \   janitorial process: the node does not typically know a priori that it\n  \
    \ will be disconnected, and it cannot send a DNS update using the\n   correct\
    \ source address to remove a record.\n   A problem with defining the clean-up\
    \ process is that it is difficult\n   to ensure that a specific IP address and\
    \ the corresponding record are\n   no longer being used.  Considering the huge\
    \ address space, and the\n   unlikelihood of collision within 64 bits of the interface\n\
    \   identifiers, a process that would remove the record after no traffic\n   has\
    \ been seen from a node in a long period of time (e.g., a month or\n   year) might\
    \ be one possible approach.\n   To insert or update the record, the node must\
    \ discover the DNS server\n   to send the update to somehow, similar to as discussed\
    \ in\n   Section 6.2.  One way to automate this is looking up the DNS server\n\
    \   authoritative (e.g., through SOA record) for the IP address being\n   updated,\
    \ but the security material (unless the IP address-based\n   authorization is\
    \ trusted) must also be established by some other\n   means.\n   One should note\
    \ that Cryptographically Generated Addresses (CGAs)\n   [RFC3972] may require\
    \ a slightly different kind of treatment.  CGAs\n   are addresses where the interface\
    \ identifier is calculated from a\n   public key, a modifier (used as a nonce),\
    \ the subnet prefix, and\n   other data.  Depending on the usage profile, CGAs\
    \ might or might not\n   be changed periodically due to, e.g., privacy reasons.\
    \  As the CGA\n   address is not predictable, a reverse record can only reasonably\
    \ be\n   inserted in the DNS by the node that generates the address.\n"
- title: 7.4.  DDNS with DHCP
  contents:
  - "7.4.  DDNS with DHCP\n   With DHCPv4, the reverse DNS name is typically already\
    \ inserted to\n   the DNS that reflects the name (e.g., \"dhcp-67.example.com\"\
    ).  One\n   can assume similar practice may become commonplace with DHCPv6 as\n\
    \   well; all such mappings would be pre-configured and would require no\n   updating.\n\
    \   If a more explicit control is required, similar considerations as\n   with\
    \ SLAAC apply, except for the fact that typically one must update\n   a reverse\
    \ DNS record instead of inserting one (if an address\n   assignment policy that\
    \ reassigns disused addresses is adopted) and\n   updating a record seems like\
    \ a slightly more difficult thing to\n   secure.  However, it is yet uncertain\
    \ how DHCPv6 is going to be used\n   for address assignment.\n   Note that when\
    \ using DHCP, either the host or the DHCP server could\n   perform the DNS updates;\
    \ see the implications in Section 6.2.\n   If disused addresses were to be reassigned,\
    \ host-based DDNS reverse\n   updates would need policy considerations for DNS\
    \ record modification,\n   as noted above.  On the other hand, if disused address\
    \ were not to be\n   assigned, host-based DNS reverse updates would have similar\n\
    \   considerations as SLAAC in Section 7.3.  Server-based updates have\n   similar\
    \ properties except that the janitorial process could be\n   integrated with DHCP\
    \ address assignment.\n"
- title: 7.5.  DDNS with Dynamic Prefix Delegation
  contents:
  - "7.5.  DDNS with Dynamic Prefix Delegation\n   In cases where a prefix, instead\
    \ of an address, is being used and\n   updated, one should consider what is the\
    \ location of the server where\n   DDNS updates are made.  That is, where the\
    \ DNS server is located:\n   1.  At the same organization as the prefix delegator.\n\
    \   2.  At the site where the prefixes are delegated to.  In this case,\n    \
    \   the authority of the DNS reverse zone corresponding to the\n       delegated\
    \ prefix is also delegated to the site.\n   3.  Elsewhere; this implies a relationship\
    \ between the site and where\n       the DNS server is located, and such a relationship\
    \ should be\n       rather straightforward to secure as well.  Like in the previous\n\
    \       case, the authority of the DNS reverse zone is also delegated.\n   In\
    \ the first case, managing the reverse DNS (delegation) is simpler\n   as the\
    \ DNS server and the prefix delegator are in the same\n   administrative domain\
    \ (as there is no need to delegate anything at\n   all); alternatively, the prefix\
    \ delegator might forgo DDNS reverse\n   capability altogether, and use, e.g.,\
    \ wildcard records (as described\n   in Section 7.2).  In the other cases, it\
    \ can be slightly more\n   difficult, particularly as the site will have to configure\
    \ the DNS\n   server to be authoritative for the delegated reverse zone, implying\n\
    \   automatic configuration of the DNS server -- as the prefix may be\n   dynamic.\n\
    \   Managing the DDNS reverse updates is typically simple in the second\n   case,\
    \ as the updated server is located at the local site, and\n   arguably IP address-based\
    \ authentication could be sufficient (or if\n   not, setting up security relationships\
    \ would be simpler).  As there\n   is an explicit (security) relationship between\
    \ the parties in the\n   third case, setting up the security relationships to\
    \ allow reverse\n   DDNS updates should be rather straightforward as well (but\
    \ IP\n   address-based authentication might not be acceptable).  In the first\n\
    \   case, however, setting up and managing such relationships might be a\n   lot\
    \ more difficult.\n"
- title: 8.  Miscellaneous DNS Considerations
  contents:
  - "8.  Miscellaneous DNS Considerations\n   This section describes miscellaneous\
    \ considerations about DNS that\n   seem related to IPv6, for which no better\
    \ place has been found in\n   this document.\n"
- title: 8.1.  NAT-PT with DNS-ALG
  contents:
  - "8.1.  NAT-PT with DNS-ALG\n   The DNS-ALG component of NAT-PT [RFC2766] mangles\
    \ A records to look\n   like AAAA records to the IPv6-only nodes.  Numerous problems\
    \ have\n   been identified with [WIP-AD2005].  This is a strong reason not to\n\
    \   use NAT-PT in the first place.\n"
- title: 8.2.  Renumbering Procedures and Applications' Use of DNS
  contents:
  - "8.2.  Renumbering Procedures and Applications' Use of DNS\n   One of the most\
    \ difficult problems of systematic IP address\n   renumbering procedures [RFC4192]\
    \ is that an application that looks up\n   a DNS name disregards information such\
    \ as TTL, and uses the result\n   obtained from DNS as long as it happens to be\
    \ stored in the memory of\n   the application.  For applications that run for\
    \ a long time, this\n   could be days, weeks, or even months.  Some applications\
    \ may be\n   clever enough to organize the data structures and functions in such\
    \ a\n   manner that lookups get refreshed now and then.\n   While the issue appears\
    \ to have a clear solution, \"fix the\n   applications\", practically, this is\
    \ not reasonable immediate advice.\n   The TTL information is not typically available\
    \ in the APIs and\n   libraries (so, the advice becomes \"fix the applications,\
    \ APIs, and\n   libraries\"), and a lot more analysis is needed on how to practically\n\
    \   go about to achieve the ultimate goal of avoiding using the names\n   longer\
    \ than expected.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Some recommendations (Section 4.3, Section 5.1) about\
    \ IPv6 service\n   provisioning were moved here from [RFC4213] by Erik Nordmark\
    \ and Bob\n   Gilligan.  Havard Eidnes and Michael Patton provided useful feedback\n\
    \   and improvements.  Scott Rose, Rob Austein, Masataka Ohta, and Mark\n   Andrews\
    \ helped in clarifying the issues regarding additional data and\n   the use of\
    \ TTL.  Jefsey Morfin, Ralph Droms, Peter Koch, Jinmei\n   Tatuya, Iljitsch van\
    \ Beijnum, Edward Lewis, and Rob Austein provided\n   useful feedback during the\
    \ WG last call.  Thomas Narten provided\n   extensive feedback during the IESG\
    \ evaluation.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document reviews the operational procedures\
    \ for IPv6 DNS\n   operations and does not have security considerations in itself.\n\
    \   However, it is worth noting that in particular with Dynamic DNS\n   updates,\
    \ security models based on the source address validation are\n   very weak and\
    \ cannot be recommended -- they could only be considered\n   in the environments\
    \ where ingress filtering [RFC3704] has been\n   deployed.  On the other hand,\
    \ it should be noted that setting up an\n   authorization mechanism (e.g., a shared\
    \ secret, or public-private\n   keys) between a node and the DNS server has to\
    \ be done manually, and\n   may require quite a bit of time and expertise.\n \
    \  To re-emphasize what was already stated, the reverse+forward DNS\n   check\
    \ provides very weak security at best, and the only\n   (questionable) security-related\
    \ use for them may be in conjunction\n   with other mechanisms when authenticating\
    \ a user.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC1034]     Mockapetris, P., \"Domain names\
    \ - concepts and\n                 facilities\", STD 13, RFC 1034, November 1987.\n\
    \   [RFC2136]     Vixie, P., Thomson, S., Rekhter, Y., and J. Bound,\n       \
    \          \"Dynamic Updates in the Domain Name System (DNS\n                \
    \ UPDATE)\", RFC 2136, April 1997.\n   [RFC2181]     Elz, R. and R. Bush, \"Clarifications\
    \ to the DNS\n                 Specification\", RFC 2181, July 1997.\n   [RFC2182]\
    \     Elz, R., Bush, R., Bradner, S., and M. Patton,\n                 \"Selection\
    \ and Operation of Secondary DNS Servers\",\n                 BCP 16, RFC 2182,\
    \ July 1997.\n   [RFC2462]     Thomson, S. and T. Narten, \"IPv6 Stateless Address\n\
    \                 Autoconfiguration\", RFC 2462, December 1998.\n   [RFC2671]\
    \     Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\",\n                 RFC\
    \ 2671, August 1999.\n   [RFC2821]     Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 2821,\n                 April 2001.\n   [RFC3007]     Wellington, B., \"\
    Secure Domain Name System (DNS)\n                 Dynamic Update\", RFC 3007,\
    \ November 2000.\n   [RFC3041]     Narten, T. and R. Draves, \"Privacy Extensions\
    \ for\n                 Stateless Address Autoconfiguration in IPv6\", RFC 3041,\n\
    \                 January 2001.\n   [RFC3056]     Carpenter, B. and K. Moore,\
    \ \"Connection of IPv6 Domains\n                 via IPv4 Clouds\", RFC 3056,\
    \ February 2001.\n   [RFC3152]     Bush, R., \"Delegation of IP6.ARPA\", BCP 49,\
    \ RFC 3152,\n                 August 2001.\n   [RFC3315]     Droms, R., Bound,\
    \ J., Volz, B., Lemon, T., Perkins, C.,\n                 and M. Carney, \"Dynamic\
    \ Host Configuration Protocol for\n                 IPv6 (DHCPv6)\", RFC 3315,\
    \ July 2003.\n   [RFC3363]     Bush, R., Durand, A., Fink, B., Gudmundsson, O.,\
    \ and T.\n                 Hain, \"Representing Internet Protocol version 6 (IPv6)\n\
    \                 Addresses in the Domain Name System (DNS)\", RFC 3363,\n   \
    \              August 2002.\n   [RFC3364]     Austein, R., \"Tradeoffs in Domain\
    \ Name System (DNS)\n                 Support for Internet Protocol version 6\
    \ (IPv6)\",\n                 RFC 3364, August 2002.\n   [RFC3596]     Thomson,\
    \ S., Huitema, C., Ksinant, V., and M. Souissi,\n                 \"DNS Extensions\
    \ to Support IP Version 6\", RFC 3596,\n                 October 2003.\n   [RFC3646]\
    \     Droms, R., \"DNS Configuration options for Dynamic Host\n              \
    \   Configuration Protocol for IPv6 (DHCPv6)\", RFC 3646,\n                 December\
    \ 2003.\n   [RFC3736]     Droms, R., \"Stateless Dynamic Host Configuration\n\
    \                 Protocol (DHCP) Service for IPv6\", RFC 3736,\n            \
    \     April 2004.\n   [RFC3879]     Huitema, C. and B. Carpenter, \"Deprecating\
    \ Site Local\n                 Addresses\", RFC 3879, September 2004.\n   [RFC3901]\
    \     Durand, A. and J. Ihren, \"DNS IPv6 Transport\n                 Operational\
    \ Guidelines\", BCP 91, RFC 3901,\n                 September 2004.\n   [RFC4038]\
    \     Shin, M-K., Hong, Y-G., Hagino, J., Savola, P., and E.\n               \
    \  Castro, \"Application Aspects of IPv6 Transition\",\n                 RFC 4038,\
    \ March 2005.\n   [RFC4074]     Morishita, Y. and T. Jinmei, \"Common Misbehavior\n\
    \                 Against DNS Queries for IPv6 Addresses\", RFC 4074,\n      \
    \           May 2005.\n   [RFC4192]     Baker, F., Lear, E., and R. Droms, \"\
    Procedures for\n                 Renumbering an IPv6 Network without a Flag Day\"\
    ,\n                 RFC 4192, September 2005.\n   [RFC4193]     Hinden, R. and\
    \ B. Haberman, \"Unique Local IPv6 Unicast\n                 Addresses\", RFC\
    \ 4193, October 2005.\n   [RFC4291]     Hinden, R. and S. Deering, \"IP Version\
    \ 6 Addressing\n                 Architecture\", RFC 4291, February 2006.\n  \
    \ [RFC4339]     Jeong, J., Ed., \"IPv6 Host Configuration of DNS Server\n    \
    \             Information Approaches\", RFC 4339, February 2006.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2766]     Tsirtsis, G. and P. Srisuresh,\
    \ \"Network Address\n                 Translation - Protocol Translation (NAT-PT)\"\
    , RFC 2766,\n                 February 2000.\n   [RFC2782]     Gulbrandsen, A.,\
    \ Vixie, P., and L. Esibov, \"A DNS RR\n                 for specifying the location\
    \ of services (DNS SRV)\",\n                 RFC 2782, February 2000.\n   [RFC2826]\
    \     Internet Architecture Board, \"IAB Technical Comment on\n              \
    \   the Unique DNS Root\", RFC 2826, May 2000.\n   [RFC3704]     Baker, F. and\
    \ P. Savola, \"Ingress Filtering for\n                 Multihomed Networks\",\
    \ BCP 84, RFC 3704, March 2004.\n   [RFC3972]     Aura, T., \"Cryptographically\
    \ Generated Addresses\n                 (CGA)\", RFC 3972, March 2005.\n   [RFC4025]\
    \     Richardson, M., \"A Method for Storing IPsec Keying\n                 Material\
    \ in DNS\", RFC 4025, March 2005.\n   [RFC4213]     Nordmark, E. and R. Gilligan,\
    \ \"Basic Transition\n                 Mechanisms for IPv6 Hosts and Routers\"\
    , RFC 4213,\n                 October 2005.\n   [RFC4215]     Wiljakka, J., \"\
    Analysis on IPv6 Transition in Third\n                 Generation Partnership\
    \ Project (3GPP) Networks\",\n                 RFC 4215, October 2005.\n   [RFC4380]\
    \     Huitema, C., \"Teredo: Tunneling IPv6 over UDP through\n               \
    \  Network Address Translations (NATs)\", RFC 4380,\n                 February\
    \ 2006.\n   [TC-TEST]     Jinmei, T., \"Thread \"RFC2181 section 9.1: TC bit\n\
    \                 handling and additional data\" on DNSEXT mailing list,\n   \
    \              Message-\n                 Id:y7vek9j9hyo.wl%jinmei@isl.rdc.toshiba.co.jp\"\
    , August\n                 1, 2005, <http://ops.ietf.org/lists/namedroppers/\n\
    \                 namedroppers.2005/msg01102.html>.\n   [WIP-AD2005]  Aoun, C.\
    \ and E. Davies, \"Reasons to Move NAT-PT to\n                 Experimental\"\
    , Work in Progress, October 2005.\n   [WIP-DC2005]  Durand, A. and T. Chown, \"\
    To publish, or not to\n                 publish, that is the question\", Work\
    \ in Progress,\n                 October 2005.\n   [WIP-H2005]   Huston, G., \"\
    6to4 Reverse DNS Delegation\n                 Specification\", Work in Progress,\
    \ November 2005.\n   [WIP-J2006]   Jeong, J., \"IPv6 Router Advertisement Option\
    \ for DNS\n                 Configuration\", Work in Progress, January 2006.\n\
    \   [WIP-LB2005]  Larson, M. and P. Barber, \"Observed DNS Resolution\n      \
    \           Misbehavior\", Work in Progress, February 2006.\n   [WIP-O2004]  \
    \ Ohta, M., \"Preconfigured DNS Server Addresses\", Work in\n                \
    \ Progress, February 2004.\n   [WIP-R2006]   Roy, S., \"IPv6 Neighbor Discovery\
    \ On-Link Assumption\n                 Considered Harmful\", Work in Progress,\
    \ January 2006.\n   [WIP-RDP2004] Roy, S., Durand, A., and J. Paugh, \"Issues\
    \ with Dual\n                 Stack IPv6 on by Default\", Work in Progress, July\
    \ 2004.\n   [WIP-S2005a]  Stapp, M., \"The DHCP Client FQDN Option\", Work in\n\
    \                 Progress, March 2006.\n   [WIP-S2005b]  Stapp, M., \"A DNS RR\
    \ for Encoding DHCP Information\n                 (DHCID RR)\", Work in Progress,\
    \ March 2006.\n   [WIP-S2005c]  Senie, D., \"Encouraging the use of DNS IN-ADDR\n\
    \                 Mapping\", Work in Progress, August 2005.\n   [WIP-SV2005] \
    \ Stapp, M. and B. Volz, \"Resolution of FQDN Conflicts\n                 among\
    \ DHCP Clients\", Work in Progress, March 2006.\n"
- title: Appendix A.  Unique Local Addressing Considerations for DNS
  contents:
  - "Appendix A.  Unique Local Addressing Considerations for DNS\n   Unique local\
    \ addresses [RFC4193] have replaced the now-deprecated\n   site-local addresses\
    \ [RFC3879].  From the perspective of the DNS, the\n   locally generated unique\
    \ local addresses (LUL) and site-local\n   addresses have similar properties.\n\
    \   The interactions with DNS come in two flavors: forward and reverse\n   DNS.\n\
    \   To actually use local addresses within a site, this implies the\n   deployment\
    \ of a \"split-faced\" or a fragmented DNS name space, for the\n   zones internal\
    \ to the site, and the outsiders' view to it.  The\n   procedures to achieve this\
    \ are not elaborated here.  The implication\n   is that local addresses must not\
    \ be published in the public DNS.\n   To facilitate reverse DNS (if desired) with\
    \ local addresses, the stub\n   resolvers must look for DNS information from the\
    \ local DNS servers,\n   not, e.g., starting from the root servers, so that the\
    \ local\n   information may be provided locally.  Note that the experience of\n\
    \   private addresses in IPv4 has shown that the root servers get loaded\n   for\
    \ requests for private address lookups in any case.  This\n   requirement is discussed\
    \ in [RFC4193].\n"
- title: Appendix B.  Behavior of Additional Data in IPv4/IPv6 Environments
  contents:
  - "Appendix B.  Behavior of Additional Data in IPv4/IPv6 Environments\n   DNS responses\
    \ do not always fit in a single UDP packet.  We'll\n   examine the cases that\
    \ happen when this is due to too much data in\n   the Additional section.\n"
- title: B.1.  Description of Additional Data Scenarios
  contents:
  - "B.1.  Description of Additional Data Scenarios\n   There are two kinds of additional\
    \ data:\n   1.  \"critical\" additional data; this must be included in all\n \
    \      scenarios, with all the RRsets, and\n   2.  \"courtesy\" additional data;\
    \ this could be sent in full, with only\n       a few RRsets, or with no RRsets,\
    \ and can be fetched separately as\n       well, but at the cost of additional\
    \ queries.\n   The responding server can algorithmically determine which type\
    \ the\n   additional data is by checking whether it's at or below a zone cut.\n\
    \   Only those additional data records (even if sometimes carelessly\n   termed\
    \ \"glue\") are considered \"critical\" or real \"glue\" if and only\n   if they\
    \ meet the above-mentioned condition, as specified in Section\n   4.2.1 of [RFC1034].\n\
    \   Remember that resource record sets (RRsets) are never \"broken up\", so\n\
    \   if a name has 4 A records and 5 AAAA records, you can either return\n   all\
    \ 9, all 4 A records, all 5 AAAA records, or nothing.  In\n   particular, notice\
    \ that for the \"critical\" additional data getting\n   all the RRsets can be\
    \ critical.\n   In particular, [RFC2181] specifies (in Section 9) that:\n   a.\
    \  if all the \"critical\" RRsets do not fit, the sender should set\n       the\
    \ TC bit, and the recipient should discard the whole response\n       and retry\
    \ using mechanism allowing larger responses such as TCP.\n   b.  \"courtesy\"\
    \ additional data should not cause the setting of the TC\n       bit, but instead\
    \ all the non-fitting additional data RRsets\n       should be removed.\n   An\
    \ example of the \"courtesy\" additional data is A/AAAA records in\n   conjunction\
    \ with MX records as shown in Section 4.4; an example of\n   the \"critical\"\
    \ additional data is shown below (where getting both the\n   A and AAAA RRsets\
    \ is critical with respect to the NS RR):\n      child.example.com.    IN   NS\
    \ ns.child.example.com.\n      ns.child.example.com. IN    A 192.0.2.1\n     \
    \ ns.child.example.com. IN AAAA 2001:db8::1\n   When there is too much \"courtesy\"\
    \ additional data, at least the non-\n   fitting RRsets should be removed [RFC2181];\
    \ however, as the\n   additional data is not critical, even all of it could be\
    \ safely\n   removed.\n   When there is too much \"critical\" additional data,\
    \ TC bit will have\n   to be set, and the recipient should ignore the response\
    \ and retry\n   using TCP; if some data were to be left in the UDP response, the\n\
    \   issue is which data could be retained.\n   However, the practice may differ\
    \ from the specification.  Testing and\n   code analysis of three recent implementations\
    \ [TC-TEST] confirm this.\n   None of the tested implementations have a strict\
    \ separation of\n   critical and courtesy additional data, while some forms of\
    \ additional\n   data may be treated preferably.  All the implementations remove\
    \ some\n   (critical or courtesy) additional data RRsets without setting the TC\n\
    \   bit if the response would not otherwise fit.\n   Failing to discard the response\
    \ with the TC bit or omitting critical\n   information but not setting the TC\
    \ bit lead to an unrecoverable\n   problem.  Omitting only some of the RRsets\
    \ if all would not fit (but\n   not setting the TC bit) leads to a performance\
    \ problem.  These are\n   discussed in the next two subsections.\n"
- title: B.2.  Which Additional Data to Keep, If Any?
  contents:
  - "B.2.  Which Additional Data to Keep, If Any?\n   NOTE: omitting some critical\
    \ additional data instead of setting the\n   TC bit violates a 'should' in Section\
    \ 9 of RFC2181.  However, as many\n   implementations still do that [TC-TEST],\
    \ operators need to understand\n   its implications, and we describe that behavior\
    \ as well.\n   If the implementation decides to keep as much data (whether\n \
    \  \"critical\" or \"courtesy\") as possible in the UDP responses, it might\n\
    \   be tempting to use the transport of the DNS query as a hint in either\n  \
    \ of these cases: return the AAAA records if the query was done over\n   IPv6,\
    \ or return the A records if the query was done over IPv4.\n   However, this breaks\
    \ the model of independence of DNS transport and\n   resource records, as noted\
    \ in Section 1.2.\n   With courtesy additional data, as long as enough RRsets\
    \ will be\n   removed so that TC will not be set, it is allowed to send as many\n\
    \   complete RRsets as the implementations prefers.  However, the\n   implementations\
    \ are also free to omit all such RRsets, even if\n   complete.  Omitting all the\
    \ RRsets (when removing only some would\n   suffice) may create a performance\
    \ penalty, whereby the client may\n   need to issue one or more additional queries\
    \ to obtain necessary\n   and/or consistent information.\n   With critical additional\
    \ data, the alternatives are either returning\n   nothing (and absolutely requiring\
    \ a retry with TCP) or returning\n   something (working also in the case if the\
    \ recipient does not discard\n   the response and retry using TCP) in addition\
    \ to setting the TC bit.\n   If the process for selecting \"something\" from the\
    \ critical data would\n   otherwise be practically \"flipping the coin\" between\
    \ A and AAAA\n   records, it could be argued that if one looked at the transport\
    \ of\n   the query, it would have a larger possibility of being right than\n \
    \  just 50/50.  In other words, if the returned critical additional data\n   would\
    \ have to be selected somehow, using something more sophisticated\n   than a random\
    \ process would seem justifiable.\n   That is, leaving in some intelligently selected\
    \ critical additional\n   data is a trade-off between creating an optimization\
    \ for those\n   resolvers that ignore the \"should discard\" recommendation and\
    \ causing\n   a protocol problem by propagating inconsistent information about\n\
    \   \"critical\" records in the caches.\n   Similarly, leaving in the complete\
    \ courtesy additional data RRsets\n   instead of removing all the RRsets is a\
    \ performance trade-off as\n   described in the next section.\n"
- title: B.3.  Discussion of the Potential Problems
  contents:
  - "B.3.  Discussion of the Potential Problems\n   As noted above, the temptation\
    \ for omitting only some of the\n   additional data could be problematic.  This\
    \ is discussed more below.\n   For courtesy additional data, this causes a potential\
    \ performance\n   problem as this requires that the clients issue re-queries for\
    \ the\n   potentially omitted RRsets.  For critical additional data, this\n  \
    \ causes a potential unrecoverable problem if the response is not\n   discarded\
    \ and the query not re-tried with TCP, as the nameservers\n   might be reachable\
    \ only through the omitted RRsets.\n   If an implementation would look at the\
    \ transport used for the query,\n   it is worth remembering that often the host\
    \ using the records is\n   different from the node requesting them from the authoritative\
    \ DNS\n   server (or even a caching resolver).  So, whichever version the\n  \
    \ requestor (e.g., a recursive server in the middle) uses makes no\n   difference\
    \ to the ultimate user of the records, whose transport\n   capabilities might\
    \ differ from those of the requestor.  This might\n   result in, e.g., inappropriately\
    \ returning A records to an IPv6-only\n   node, going through a translation, or\
    \ opening up another IP-level\n   session (e.g., a Packet Data Protocol (PDP)\
    \ context [RFC4215]).\n   Therefore, at least in many scenarios, it would be very\
    \ useful if the\n   information returned would be consistent and complete -- or\
    \ if that\n   is not feasible, leave it to the client to query again.\n   The\
    \ problem of too much additional data seems to be an operational\n   one: the\
    \ zone administrator entering too many records that will be\n   returned truncated\
    \ (or missing some RRsets, depending on\n   implementations) to the users.  A\
    \ protocol fix for this is using\n   Extension Mechanisms for DNS (EDNS0) [RFC2671]\
    \ to signal the capacity\n   for larger UDP packet sizes, pushing up the relevant\
    \ threshold.\n   Further, DNS server implementations should omit courtesy additional\n\
    \   data completely rather than including only some RRsets [RFC2181].  An\n  \
    \ operational fix for this is having the DNS server implementations\n   return\
    \ a warning when the administrators create zones that would\n   result in too\
    \ much additional data being returned.  Further, DNS\n   server implementations\
    \ should warn of or disallow such zone\n   configurations that are recursive or\
    \ otherwise difficult to manage by\n   the protocol.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alain Durand\n   Comcast\n   1500 Market St.\n   Philadelphia,\
    \ PA  19102\n   USA\n   EMail: Alain_Durand@cable.comcast.com\n   Johan Ihren\n\
    \   Autonomica\n   Bellmansgatan 30\n   SE-118 47 Stockholm\n   Sweden\n   EMail:\
    \ johani@autonomica.se\n   Pekka Savola\n   CSC/FUNET\n   Espoo\n   Finland\n\
    \   EMail: psavola@funet.fi\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
