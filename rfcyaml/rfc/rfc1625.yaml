- title: __initial_text__
  contents:
  - '                         WAIS over Z39.50-1988

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The network publishing system, Wide Area Information Servers\
    \ (WAIS),\n   is designed to help users find information over a computer network.\n\
    \   The principles guiding WAIS development are:\n         1. A wide-area networked-based\
    \ information system for searching,\n            browsing, and publishing.\n \
    \        2. Based on standards.\n         3. Easy to use.\n         4. Flexible\
    \ and growth oriented.\n   From this basis, a large group of developers, publishers,\
    \ standards\n   bodies, libraries, government agencies, schools, and users have\
    \ been\n   helping further the WAIS system.\n   The WAIS software architecture\
    \ has four main components: the client,\n   the server, the database, and the\
    \ protocol.  The WAIS client is a\n   user-interface program that sends requests\
    \ for information to local\n   or remote servers.  Clients are available for most\
    \ popular desktop\n   environments.  The WAIS server is a program that services\
    \ client\n   requests, and is available on a variety of UNIX platforms.  The\n\
    \   server generally runs on a machine containing one or more information\n  \
    \ sources, or WAIS databases.  The protocol, Z39.50-1988, is used to\n   connect\
    \ WAIS clients and servers and is based on the 1988 Version of\n   the NISO Z39.50\
    \ Information Retrieval Service and Protocol Standard.\n   The goal of the WAIS\
    \ network publishing system is to create an open\n   architecture of information\
    \ clients and servers by using a standard\n   computer-to-computer protocol that\
    \ enables clients to communicate\n   with servers.\n   WAIS development began\
    \ in October 1989 with the first Internet\n   release occurring in April 1991.\
    \  From the beginning, WAIS committed\n   to use the Z39.50-1988 standard as the\
    \ information retrieval protocol\n   between WAIS clients and servers.  The implementation\
    \ is still in use\n   today by existing WAIS clients and servers resulting in\
    \ over 50,000\n   users of Z39.50-1988 on the Internet.\n"
- title: 2. Purpose
  contents:
  - "2. Purpose\n   The purpose of this memo is to initiate a discussion for a migration\n\
    \   path of the WAIS technology from Z39.50-1988 Information Retrieval\n   Service\
    \ Definitions and Protocol Specification for Library\n   Applications [1] to Z39.50-1992\
    \ [2] and then to Z39.50-1994 [3].  The\n   purpose of this memo is not to provide\
    \ a detailed implementation\n   specification, but rather to describe the high-level\
    \ design goals and\n   functional assumptions made in the WAIS implementation\
    \ of Z39.50-\n   1988.  WAIS use of Z39.50-1992 and Z39.50-1994 standards will\
    \ be the\n   subject of future RFCs.\n"
- title: 3. Historical Design Goals of WAIS
  contents:
  - "3. Historical Design Goals of WAIS\n   As an aid to understanding the original\
    \ WAIS implementation and its\n   use of Z39.50-1988, the historical design goals\
    \ of WAIS are presented\n   in this section.  Included with each goal is a brief\
    \ description of\n   the assumptions used to meet these design goals.\n      \
    \   1. Provide users access to bibliographic and non-bibliographic\n         \
    \   information, including full-text and images.\n   Because Z39.50-1988 grew\
    \ out of the bibliographic community,\n   additional assumptions with the protocol\
    \ were required to serve non-\n   bibliographic information.  They were also necessary\
    \ to serve\n   documents existing in multiple formats (e.g., rtf, postscript,\
    \ gif,\n   etc.).\n         2. Keep the client/server interface simple and independent\
    \ of\n            changes in the functionality of the server.\n   To achieve this,\
    \ the text string entered by the user was transmitted\n   to the server without\
    \ parsing the string into a Type-1 RPN (reverse-\n   polish notation) query, as\
    \ is common for bibliographic applications.\n   Instead WAIS defined a new Type-3\
    \ query containing the text string.\n   In this way, knowledge of the Z39.50 Attributes\
    \ supported by the\n   server was no longer required by the client or the user,\
    \ as is true\n   of many existing Z39.50 implementations.  In addition, the client\n\
    \   software did not require modification to support the evolving\n   functionality\
    \ of the server.\n         3. Provide relevance feedback capability.\n   Relevance\
    \ feedback is the ability to select a document, or portion of\n   a document,\
    \ and find a set of documents similar to the selection.\n   WAIS included documents\
    \ used in relevance feedback as part of the\n   Type-3 query.\n         4. Permit\
    \ the server to operate in a stateless manner.\n   A WAIS server was designed\
    \ to be \"stateless\", meaning that search\n   result sets were not stored by\
    \ the server.  In Z39.50 terms, the\n   server exercised its right to unilaterally\
    \ delete a result set as\n   soon as it sent the search response.  For this reason,\
    \ the Present\n   Facility of Z39.50 was not used, and retrievals were performed\
    \ using\n   the Search Facility.  Relaxing this constraint in future\n   implementations\
    \ may prove the most prudent path.\n         5. Provide the ability for a client\
    \ to retrieve documents in\n            pieces.\n   Because retrieval of a portion\
    \ of a document could be done several\n   ways with Z39.50-1988, specific assumptions\
    \ were made to implement\n   this functionality.  Accessing a portion of a document\
    \ was required\n   for both retrieval and for relevance feedback.\n         6.\
    \ Run over TCP.\n   The Z39.50-1988 standard was designed to run in the application\
    \ layer\n   using the presentation services provided by the Open Systems\n   Interconnection\
    \ (OSI) Reference Model.  Due to the popularity of\n   TCP/IP and the Internet,\
    \ WAIS was designed to run over TCP.  Use of\n   Z39.50 over TCP is described\
    \ in [4].\n"
- title: 4. WAIS Implementation of Z39.50-1988
  contents:
  - "4. WAIS Implementation of Z39.50-1988\n   By working with the Z39.50 Implementors\
    \ Group (ZIG), the WAIS\n   developers used a recommended subset of Z39.50-1988\
    \ and specific\n   assumptions to fulfill its requirements.  Over time, many of\
    \ these\n   requirements have then gone into the definition of subsequent\n  \
    \ versions of Z39.50.  As new requirements become apparent, WAIS will\n   document\
    \ any additional assumptions and work with the ZIG in\n   developing extensions.\n\
    \   WAIS supported the Init and Search Facilities of Z39.50-1988.  Both\n   search\
    \ and retrieval were implemented using the Search Facility, as\n   described in\
    \ this section.\n   Search was initiated by the client with a Search Request APDU\n\
    \   (Application Protocol Data Unit) using a Type-3 query.  The query\n   contained\
    \ two main fields:\n         1. The \"seed words\", or text, typed by the user.\n\
    \         2. A list of document objects, where a document object is a\n      \
    \      full document, or portion thereof, to be used in relevance\n          \
    \  feedback.  Each document object contains a document\n            identifier\
    \ (Doc-ID) [5], type, chunk-code, and start and\n            end locations.  The\
    \ Doc-ID and type specify the location and\n            format, respectively,\
    \ of the document.  The chuck-code\n            determines the unit of measure\
    \ for the start and end\n            locations.  Examples of chunk-codes used\
    \ include\n            byte, line, paragraph, and full document.  If the chunk\
    \ code\n            is a full document, the start and end locations are ignored.\n\
    \   A Search Response APDU returned by the server contained a relevance\n   ranked\
    \ list of records, or WAIS Citations.  A WAIS Citation refers to\n   a document\
    \ on the server.  Each WAIS Citation contains the following\n   fields:\n    \
    \     1. Headline - a set of words that convey the main idea of the\n        \
    \    document.\n         2. Rank - the numerical score of the document based on\
    \ its\n            relevance to the query, normalized to a top score of 1000.\n\
    \         3. List of available formats - e.g. text, postscript, tiff, etc.\n \
    \        4. Doc-ID - the location of the document.\n         5. Length - the length\
    \ of the document in bytes.\n   The number of WAIS Citations returned was limited\
    \ by the preferred\n   message size negotiated during the Init.\n   Retrieval\
    \ of a document was initiated by the client with a Search\n   Request APDU using\
    \ a Type-1 query.  The query contained up to four\n   terms:\n         1. Term:\
    \ Doc-ID\n            Use Attribute: system-control-number      code = \"un\"\n\
    \            Relation Attribute: equal                 code = \"re\"\n       \
    \  2. Term: the requested document format\n            Use Attribute: data-type\
    \                  code = \"wt\"\n            Relation Attribute: equal      \
    \           code = \"re\"\n         3. Term: the start location\n            Use\
    \ Attribute: paragraph, line, byte      code = \"wp\", \"wl\",\n             \
    \                                                \"wb\"\n            Relation\
    \ Attribute: greater-than-or-equal code = \"ro\"\n         4. Term: the end location\n\
    \            Use Attribute: paragraph, line, byte      code = \"wp\", \"wl\",\n\
    \                                                             \"wb\"\n       \
    \     Relation Attribute: less-than             code = \"rl\"\n   Because full-text\
    \ and images were often larger in size than the\n   receive buffer of the client,\
    \ clients were designed to optionally\n   retrieve documents in chunks, specifying\
    \ the start and end positions\n   of the chunk in the query.  An example of a\
    \ fully-specified retrieval\n   query is:\n   query = ( ( use = \"un\", relation\
    \ = \"re\", term = <Doc-ID> )\n             AND\n             ( use = \"wt\",\
    \ relation = \"re\", term = postscript )\n             AND\n             ( use\
    \ = \"wb\", relation = \"ro\", term = 0 )\n             AND\n             ( use\
    \ = \"wb\", relation = \"ro\", term = 2000 )\n            )\n   A retrieval response\
    \ was issued by the server with a Search Response\n   APDU. In this case a single\
    \ record corresponding to the requested\n   document, or portion thereof, was\
    \ returned in the specified format.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1] National Information Standards Organization (NISO).  American\n\
    \       National Standard Z39.50, Information Retrieval Service\n       Definition\
    \ and Protocol Specifications for Library Applications,\n       New Brunswick,\
    \ NJ, Transaction Publishers; 1988.\n   [2] ANSI/NISO Z30.50-1992 (version 2)\
    \ Information Retrieval Service\n       and Protocol: American National Standard,\
    \ Information Retrieval\n       Application Service Definition and Protocol Specification\
    \ for\n       Open Systems Interconnection, 1992.\n   [3] Z39.50 Version 3: Draft\
    \ 8\", October 1993.  Maintenance Agency\n       Reference: Z39.50MA-034.\n  \
    \ [4] Lynch, C., \"Using the Z39.50 Information Retrieval Protocol\n       in\
    \ the Internet Environment\", Work in Progress, November 1993.\n   [5] \"Document\
    \ Identifiers, or International Standard Book Numbers\n       for the Electronic\
    \ Age\", Brewster Kahle, Thinking Machines\n       Corporation, see URL=<ftp://wais.com/pub/protocol/doc-ids.txt>,\n\
    \       September 1991.\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n   Margaret St. Pierre\n   WAIS Incorporated\n   1040\
    \ Noel Drive\n   Menlo Park, California  94025\n   Phone: (415) 327-WAIS\n   Fax:\
    \   (415) 327-6513\n   EMail: saint@wais.com\n   Jim Fullton\n   Clearinghouse\
    \ for Networked Information\n   Discovery & Retrieval\n   3021 Cornwallis Road\n\
    \   Research Triangle Park, North Carolina  27709-2889\n   Phone: (919)-248-9247\n\
    \   Fax:   (919)-248-1101\n   EMail: jim.fullton@cnidr.org\n   Kevin Gamiel\n\
    \   Clearinghouse for Networked Information\n   Discovery & Retrieval\n   3021\
    \ Cornwallis Road\n   Research Triangle Park, North Carolina  27709-2889\n   Phone:\
    \ (919)-248-9247\n   Fax:   (919)-248-1101\n   EMail: kevin.gamiel@cnidr.org\n\
    \   Jonathan Goldman\n   Thinking Machines Corporation\n   1010 El Camino Real,\
    \ Suite 310\n   Menlo Park, California  94025\n   Phone: (415) 329-9300 x229\n\
    \   Fax:   (415) 329-9329\n   EMail: jonathan@think.com\n   Brewster Kahle\n \
    \  WAIS Incorporated\n   1040 Noel Drive\n   Menlo Park, California  94025\n \
    \  Phone: (415) 327-WAIS\n   Fax:   (415) 327-6513\n   EMail: brewster@wais.com\n\
    \   John A. Kunze\n   UC Berkeley\n   289 Evans Hall\n   Berkeley, California\
    \  94720\n   Phone: (510) 642-1530\n   Fax: (510) 643-5385\n   EMail: jak@violet.berkeley.edu\n\
    \   Harry Morris\n   WAIS Incorporated\n   1040 Noel Drive\n   Menlo Park, California\
    \  94025\n   Phone: (415) 327-WAIS\n   Fax:   (415) 327-6513\n   EMail: morris@wais.com\n\
    \   Francois Schiettecatte\n   FS Consulting\n   435 Highland Avenue\n   Rochester,\
    \ New York  14620\n   Phone: (716) 256-2850\n   EMail: francois@wais.com\n"
