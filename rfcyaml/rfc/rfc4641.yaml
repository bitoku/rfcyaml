- title: __initial_text__
  contents:
  - '                      DNSSEC Operational Practices

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a set of practices for operating the DNS\
    \ with\n   security extensions (DNSSEC).  The target audience is zone\n   administrators\
    \ deploying DNSSEC.\n   The document discusses operational aspects of using keys\
    \ and\n   signatures in the DNS.  It discusses issues of key generation, key\n\
    \   storage, signature generation, key rollover, and related policies.\n   This\
    \ document obsoletes RFC 2541, as it covers more operational\n   ground and gives\
    \ more up-to-date requirements with respect to key\n   sizes and the new DNSSEC\
    \ specification.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. The Use of the Term 'key' ..................................4\n  \
    \    1.2. Time Definitions ...........................................4\n   2.\
    \ Keeping the Chain of Trust Intact ...............................5\n   3. Keys\
    \ Generation and Storage .....................................6\n      3.1. Zone\
    \ and Key Signing Keys ..................................6\n           3.1.1.\
    \ Motivations for the KSK and ZSK Separation ..........6\n           3.1.2. KSKs\
    \ for High-Level Zones ...........................7\n      3.2. Key Generation\
    \ .............................................8\n      3.3. Key Effectivity Period\
    \ .....................................8\n      3.4. Key Algorithm ..............................................9\n\
    \      3.5. Key Sizes ..................................................9\n  \
    \    3.6. Private Key Storage .......................................11\n   4.\
    \ Signature Generation, Key Rollover, and Related Policies .......12\n      4.1.\
    \ Time in DNSSEC ............................................12\n           4.1.1.\
    \ Time Considerations ................................12\n      4.2. Key Rollovers\
    \ .............................................14\n           4.2.1. Zone Signing\
    \ Key Rollovers .........................14\n                  4.2.1.1. Pre-Publish\
    \ Key Rollover ..................15\n                  4.2.1.2. Double Signature\
    \ Zone Signing Key\n                           Rollover ..................................17\n\
    \                  4.2.1.3. Pros and Cons of the Schemes ..............18\n  \
    \         4.2.2. Key Signing Key Rollovers ..........................18\n    \
    \       4.2.3. Difference Between ZSK and KSK Rollovers ...........20\n      \
    \     4.2.4. Automated Key Rollovers ............................21\n      4.3.\
    \ Planning for Emergency Key Rollover .......................21\n           4.3.1.\
    \ KSK Compromise .....................................22\n                  4.3.1.1.\
    \ Keeping the Chain of Trust Intact .........22\n                  4.3.1.2. Breaking\
    \ the Chain of Trust ...............23\n           4.3.2. ZSK Compromise .....................................23\n\
    \           4.3.3. Compromises of Keys Anchored in Resolvers ..........24\n  \
    \    4.4. Parental Policies .........................................24\n    \
    \       4.4.1. Initial Key Exchanges and Parental Policies\n                 \
    \ Considerations .....................................24\n           4.4.2. Storing\
    \ Keys or Hashes? ............................25\n           4.4.3. Security Lameness\
    \ ..................................25\n           4.4.4. DS Signature Validity\
    \ Period .......................26\n   5. Security Considerations ........................................26\n\
    \   6. Acknowledgments ................................................26\n  \
    \ 7. References .....................................................27\n    \
    \  7.1. Normative References ......................................27\n      7.2.\
    \ Informative References ....................................28\n   Appendix A.\
    \ Terminology ...........................................30\n   Appendix B. Zone\
    \ Signing Key Rollover How-To ......................31\n   Appendix C. Typographic\
    \ Conventions ...............................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes how to run a DNS Security (DNSSEC)-enabled\n\
    \   environment.  It is intended for operators who have knowledge of the\n   DNS\
    \ (see RFC 1034 [1] and RFC 1035 [2]) and want to deploy DNSSEC.\n   See RFC 4033\
    \ [4] for an introduction to DNSSEC, RFC 4034 [5] for the\n   newly introduced\
    \ Resource Records (RRs), and RFC 4035 [6] for the\n   protocol changes.\n   During\
    \ workshops and early operational deployment tests, operators\n   and system administrators\
    \ have gained experience about operating the\n   DNS with security extensions\
    \ (DNSSEC).  This document translates\n   these experiences into a set of practices\
    \ for zone administrators.\n   At the time of writing, there exists very little\
    \ experience with\n   DNSSEC in production environments; this document should\
    \ therefore\n   explicitly not be seen as representing 'Best Current Practices'.\n\
    \   The procedures herein are focused on the maintenance of signed zones\n   (i.e.,\
    \ signing and publishing zones on authoritative servers).  It is\n   intended\
    \ that maintenance of zones such as re-signing or key\n   rollovers be transparent\
    \ to any verifying clients on the Internet.\n   The structure of this document\
    \ is as follows.  In Section 2, we\n   discuss the importance of keeping the \"\
    chain of trust\" intact.\n   Aspects of key generation and storage of private\
    \ keys are discussed\n   in Section 3; the focus in this section is mainly on\
    \ the private part\n   of the key(s).  Section 4 describes considerations concerning\
    \ the\n   public part of the keys.  Since these public keys appear in the DNS\n\
    \   one has to take into account all kinds of timing issues, which are\n   discussed\
    \ in Section 4.1.  Section 4.2 and Section 4.3 deal with the\n   rollover, or\
    \ supercession, of keys.  Finally, Section 4.4 discusses\n   considerations on\
    \ how parents deal with their children's public keys\n   in order to maintain\
    \ chains of trust.\n   The typographic conventions used in this document are explained\
    \ in\n   Appendix C.\n   Since this is a document with operational suggestions\
    \ and there are\n   no protocol specifications, the RFC 2119 [7] language does\
    \ not apply.\n   This document obsoletes RFC 2541 [12] to reflect the evolution\
    \ of the\n   underlying DNSSEC protocol since then.  Changes in the choice of\n\
    \   cryptographic algorithms, DNS record types and type names, and the\n   parent-child\
    \ key and signature exchange demanded a major rewrite and\n   additional information\
    \ and explanation.\n"
- title: 1.1.  The Use of the Term 'key'
  contents:
  - "1.1.  The Use of the Term 'key'\n   It is assumed that the reader is familiar\
    \ with the concept of\n   asymmetric keys on which DNSSEC is based (public key\
    \ cryptography\n   [17]).  Therefore, this document will use the term 'key' rather\n\
    \   loosely.  Where it is written that 'a key is used to sign data' it is\n  \
    \ assumed that the reader understands that it is the private part of\n   the key\
    \ pair that is used for signing.  It is also assumed that the\n   reader understands\
    \ that the public part of the key pair is published\n   in the DNSKEY Resource\
    \ Record and that it is the public part that is\n   used in key exchanges.\n"
- title: 1.2.  Time Definitions
  contents:
  - "1.2.  Time Definitions\n   In this document, we will be using a number of time-related\
    \ terms.\n   The following definitions apply:\n   o  \"Signature validity period\"\
    \ The period that a signature is valid.\n      It starts at the time specified\
    \ in the signature inception field\n      of the RRSIG RR and ends at the time\
    \ specified in the expiration\n      field of the RRSIG RR.\n   o  \"Signature\
    \ publication period\" Time after which a signature (made\n      with a specific\
    \ key) is replaced with a new signature (made with\n      the same key).  This\
    \ replacement takes place by publishing the\n      relevant RRSIG in the master\
    \ zone file.  After one stops\n      publishing an RRSIG in a zone, it may take\
    \ a while before the\n      RRSIG has expired from caches and has actually been\
    \ removed from\n      the DNS.\n   o  \"Key effectivity period\" The period during\
    \ which a key pair is\n      expected to be effective.  This period is defined\
    \ as the time\n      between the first inception time stamp and the last expiration\n\
    \      date of any signature made with this key, regardless of any\n      discontinuity\
    \ in the use of the key.  The key effectivity period\n      can span multiple\
    \ signature validity periods.\n   o  \"Maximum/Minimum Zone Time to Live (TTL)\"\
    \ The maximum or minimum\n      value of the TTLs from the complete set of RRs\
    \ in a zone.  Note\n      that the minimum TTL is not the same as the MINIMUM\
    \ field in the\n      SOA RR.  See [11] for more information.\n"
- title: 2.  Keeping the Chain of Trust Intact
  contents:
  - "2.  Keeping the Chain of Trust Intact\n   Maintaining a valid chain of trust\
    \ is important because broken chains\n   of trust will result in data being marked\
    \ as Bogus (as defined in [4]\n   Section 5), which may cause entire (sub)domains\
    \ to become invisible\n   to verifying clients.  The administrators of secured\
    \ zones have to\n   realize that their zone is, to verifying clients, part of\
    \ a chain of\n   trust.\n   As mentioned in the introduction, the procedures herein\
    \ are intended\n   to ensure that maintenance of zones, such as re-signing or\
    \ key\n   rollovers, will be transparent to the verifying clients on the\n   Internet.\n\
    \   Administrators of secured zones will have to keep in mind that data\n   published\
    \ on an authoritative primary server will not be immediately\n   seen by verifying\
    \ clients; it may take some time for the data to be\n   transferred to other secondary\
    \ authoritative nameservers and clients\n   may be fetching data from caching\
    \ non-authoritative servers.  In this\n   light, note that the time for a zone\
    \ transfer from master to slave is\n   negligible when using NOTIFY [9] and incremental\
    \ transfer (IXFR) [8].\n   It increases when full zone transfers (AXFR) are used\
    \ in combination\n   with NOTIFY.  It increases even more if you rely on full\
    \ zone\n   transfers based on only the SOA timing parameters for refresh.\n  \
    \ For the verifying clients, it is important that data from secured\n   zones\
    \ can be used to build chains of trust regardless of whether the\n   data came\
    \ directly from an authoritative server, a caching\n   nameserver, or some middle\
    \ box.  Only by carefully using the\n   available timing parameters can a zone\
    \ administrator ensure that the\n   data necessary for verification can be obtained.\n\
    \   The responsibility for maintaining the chain of trust is shared by\n   administrators\
    \ of secured zones in the chain of trust.  This is most\n   obvious in the case\
    \ of a 'key compromise' when a trade-off between\n   maintaining a valid chain\
    \ of trust and replacing the compromised keys\n   as soon as possible must be\
    \ made.  Then zone administrators will have\n   to make a trade-off, between keeping\
    \ the chain of trust intact --\n   thereby allowing for attacks with the compromised\
    \ key -- or\n   deliberately breaking the chain of trust and making secured\n\
    \   subdomains invisible to security-aware resolvers.  Also see Section\n   4.3.\n"
- title: 3.  Keys Generation and Storage
  contents:
  - "3.  Keys Generation and Storage\n   This section describes a number of considerations\
    \ with respect to the\n   security of keys.  It deals with the generation, effectivity\
    \ period,\n   size, and storage of private keys.\n"
- title: 3.1.  Zone and Key Signing Keys
  contents:
  - "3.1.  Zone and Key Signing Keys\n   The DNSSEC validation protocol does not distinguish\
    \ between different\n   types of DNSKEYs.  All DNSKEYs can be used during the\
    \ validation.  In\n   practice, operators use Key Signing and Zone Signing Keys\
    \ and use the\n   so-called Secure Entry Point (SEP) [3] flag to distinguish between\n\
    \   them during operations.  The dynamics and considerations are\n   discussed\
    \ below.\n   To make zone re-signing and key rollover procedures easier to\n \
    \  implement, it is possible to use one or more keys as Key Signing Keys\n   (KSKs).\
    \  These keys will only sign the apex DNSKEY RRSet in a zone.\n   Other keys can\
    \ be used to sign all the RRSets in a zone and are\n   referred to as Zone Signing\
    \ Keys (ZSKs).  In this document, we assume\n   that KSKs are the subset of keys\
    \ that are used for key exchanges with\n   the parent and potentially for configuration\
    \ as trusted anchors --\n   the SEP keys.  In this document, we assume a one-to-one\
    \ mapping\n   between KSK and SEP keys and we assume the SEP flag to be set on\
    \ all\n   KSKs.\n"
- title: 3.1.1.  Motivations for the KSK and ZSK Separation
  contents:
  - "3.1.1.  Motivations for the KSK and ZSK Separation\n   Differentiating between\
    \ the KSK and ZSK functions has several\n   advantages:\n   o  No parent/child\
    \ interaction is required when ZSKs are updated.\n   o  The KSK can be made stronger\
    \ (i.e., using more bits in the key\n      material).  This has little operational\
    \ impact since it is only\n      used to sign a small fraction of the zone data.\
    \  Also, the KSK is\n      only used to verify the zone's key set, not for other\
    \ RRSets in\n      the zone.\n   o  As the KSK is only used to sign a key set,\
    \ which is most probably\n      updated less frequently than other data in the\
    \ zone, it can be\n      stored separately from and in a safer location than the\
    \ ZSK.\n   o  A KSK can have a longer key effectivity period.\n   For almost any\
    \ method of key management and zone signing, the KSK is\n   used less frequently\
    \ than the ZSK.  Once a key set is signed with the\n   KSK, all the keys in the\
    \ key set can be used as ZSKs.  If a ZSK is\n   compromised, it can be simply\
    \ dropped from the key set.  The new key\n   set is then re-signed with the KSK.\n\
    \   Given the assumption that for KSKs the SEP flag is set, the KSK can\n   be\
    \ distinguished from a ZSK by examining the flag field in the DNSKEY\n   RR. \
    \ If the flag field is an odd number it is a KSK.  If it is an\n   even number\
    \ it is a ZSK.\n   The Zone Signing Key can be used to sign all the data in a\
    \ zone on a\n   regular basis.  When a Zone Signing Key is to be rolled, no\n\
    \   interaction with the parent is needed.  This allows for signature\n   validity\
    \ periods on the order of days.\n   The Key Signing Key is only to be used to\
    \ sign the DNSKEY RRs in a\n   zone.  If a Key Signing Key is to be rolled over,\
    \ there will be\n   interactions with parties other than the zone administrator.\
    \  These\n   can include the registry of the parent zone or administrators of\n\
    \   verifying resolvers that have the particular key configured as secure\n  \
    \ entry points.  Hence, the key effectivity period of these keys can\n   and should\
    \ be made much longer.  Although, given a long enough key,\n   the key effectivity\
    \ period can be on the order of years, we suggest\n   planning for a key effectivity\
    \ on the order of a few months so that a\n   key rollover remains an operational\
    \ routine.\n"
- title: 3.1.2.  KSKs for High-Level Zones
  contents:
  - "3.1.2.  KSKs for High-Level Zones\n   Higher-level zones are generally more sensitive\
    \ than lower-level\n   zones.  Anyone controlling or breaking the security of\
    \ a zone thereby\n   obtains authority over all of its subdomains (except in the\
    \ case of\n   resolvers that have locally configured the public key of a subdomain,\n\
    \   in which case this, and only this, subdomain wouldn't be affected by\n   the\
    \ compromise of the parent zone).  Therefore, extra care should be\n   taken with\
    \ high-level zones, and strong keys should be used.\n   The root zone is the most\
    \ critical of all zones.  Someone controlling\n   or compromising the security\
    \ of the root zone would control the\n   entire DNS namespace of all resolvers\
    \ using that root zone (except in\n   the case of resolvers that have locally\
    \ configured the public key of\n   a subdomain).  Therefore, the utmost care must\
    \ be taken in the\n   securing of the root zone.  The strongest and most carefully\
    \ handled\n   keys should be used.  The root zone private key should always be\
    \ kept\n   off-line.\n   Many resolvers will start at a root server for their\
    \ access to and\n   authentication of DNS data.  Securely updating the trust anchors\
    \ in\n   an enormous population of resolvers around the world will be\n   extremely\
    \ difficult.\n"
- title: 3.2.  Key Generation
  contents:
  - "3.2.  Key Generation\n   Careful generation of all keys is a sometimes overlooked\
    \ but\n   absolutely essential element in any cryptographically secure system.\n\
    \   The strongest algorithms used with the longest keys are still of no\n   use\
    \ if an adversary can guess enough to lower the size of the likely\n   key space\
    \ so that it can be exhaustively searched.  Technical\n   suggestions for the\
    \ generation of random keys will be found in RFC\n   4086 [14].  One should carefully\
    \ assess if the random number\n   generator used during key generation adheres\
    \ to these suggestions.\n   Keys with a long effectivity period are particularly\
    \ sensitive as\n   they will represent a more valuable target and be subject to\
    \ attack\n   for a longer time than short-period keys.  It is strongly recommended\n\
    \   that long-term key generation occur off-line in a manner isolated\n   from\
    \ the network via an air gap or, at a minimum, high-level secure\n   hardware.\n"
- title: 3.3.  Key Effectivity Period
  contents:
  - "3.3.  Key Effectivity Period\n   For various reasons, keys in DNSSEC need to\
    \ be changed once in a\n   while.  The longer a key is in use, the greater the\
    \ probability that\n   it will have been compromised through carelessness, accident,\n\
    \   espionage, or cryptanalysis.  Furthermore, when key rollovers are too\n  \
    \ rare an event, they will not become part of the operational habit and\n   there\
    \ is risk that nobody on-site will remember the procedure for\n   rollover when\
    \ the need is there.\n   From a purely operational perspective, a reasonable key\
    \ effectivity\n   period for Key Signing Keys is 13 months, with the intent to\
    \ replace\n   them after 12 months.  An intended key effectivity period of a month\n\
    \   is reasonable for Zone Signing Keys.\n   For key sizes that match these effectivity\
    \ periods, see Section 3.5.\n   As argued in Section 3.1.2, securely updating\
    \ trust anchors will be\n   extremely difficult.  On the other hand, the \"operational\
    \ habit\"\n   argument does also apply to trust anchor reconfiguration.  If a\
    \ short\n   key effectivity period is used and the trust anchor configuration\
    \ has\n   to be revisited on a regular basis, the odds that the configuration\n\
    \   tends to be forgotten is smaller.  The trade-off is against a system\n   that\
    \ is so dynamic that administrators of the validating clients will\n   not be\
    \ able to follow the modifications.\n   Key effectivity periods can be made very\
    \ short, as in a few minutes.\n   But when replacing keys one has to take the\
    \ considerations from\n   Section 4.1 and Section 4.2 into account.\n"
- title: 3.4.  Key Algorithm
  contents:
  - "3.4.  Key Algorithm\n   There are currently three different types of algorithms\
    \ that can be\n   used in DNSSEC: RSA, DSA, and elliptic curve cryptography. \
    \ The\n   latter is fairly new and has yet to be standardized for usage in\n \
    \  DNSSEC.\n   RSA has been developed in an open and transparent manner.  As the\n\
    \   patent on RSA expired in 2000, its use is now also free.\n   DSA has been\
    \ developed by the National Institute of Standards and\n   Technology (NIST).\
    \  The creation of signatures takes roughly the same\n   time as with RSA, but\
    \ is 10 to 40 times as slow for verification\n   [17].\n   We suggest the use\
    \ of RSA/SHA-1 as the preferred algorithm for the\n   key.  The current known\
    \ attacks on RSA can be defeated by making your\n   key longer.  As the MD5 hashing\
    \ algorithm is showing cracks, we\n   recommend the usage of SHA-1.\n   At the\
    \ time of publication, it is known that the SHA-1 hash has\n   cryptanalysis issues.\
    \  There is work in progress on addressing these\n   issues.  We recommend the\
    \ use of public key algorithms based on\n   hashes stronger than SHA-1 (e.g.,\
    \ SHA-256), as soon as these\n   algorithms are available in protocol specifications\
    \ (see [19] and\n   [20]) and implementations.\n"
- title: 3.5.  Key Sizes
  contents:
  - "3.5.  Key Sizes\n   When choosing key sizes, zone administrators will need to\
    \ take into\n   account how long a key will be used, how much data will be signed\n\
    \   during the key publication period (see Section 8.10 of [17]), and,\n   optionally,\
    \ how large the key size of the parent is.  As the chain of\n   trust really is\
    \ \"a chain\", there is not much sense in making one of\n   the keys in the chain\
    \ several times larger then the others.  As\n   always, it's the weakest link\
    \ that defines the strength of the entire\n   chain.  Also see Section 3.1.1 for\
    \ a discussion of how keys serving\n   different roles (ZSK vs. KSK) may need\
    \ different key sizes.\n   Generating a key of the correct size is a difficult\
    \ problem; RFC 3766\n   [13] tries to deal with that problem.  The first part\
    \ of the\n   selection procedure in Section 1 of the RFC states:\n      1. Determine\
    \ the attack resistance necessary to satisfy the\n         security requirements\
    \ of the application.  Do this by\n         estimating the minimum number of computer\
    \ operations that the\n         attacker will be forced to do in order to compromise\
    \ the\n         security of the system and then take the logarithm base two of\n\
    \         that number.  Call that logarithm value \"n\".\n         A 1996 report\
    \ recommended 90 bits as a good all-around choice\n         for system security.\
    \  The 90 bit number should be increased by\n         about 2/3 bit/year, or about\
    \ 96 bits in 2005.\n   [13] goes on to explain how this number \"n\" can be used\
    \ to calculate\n   the key sizes in public key cryptography.  This culminated\
    \ in the\n   table given below (slightly modified for our purpose):\n      +-------------+-----------+--------------+\n\
    \      | System      |           |              |\n      | requirement | Symmetric\
    \ | RSA or DSA   |\n      | for attack  | key size  | modulus size |\n      |\
    \ resistance  | (bits)    | (bits)       |\n      | (bits)      |           |\
    \              |\n      +-------------+-----------+--------------+\n      |  \
    \   70      |     70    |      947     |\n      |     80      |     80    |  \
    \   1228     |\n      |     90      |     90    |     1553     |\n      |    100\
    \      |    100    |     1926     |\n      |    150      |    150    |     4575\
    \     |\n      |    200      |    200    |     8719     |\n      |    250    \
    \  |    250    |    14596     |\n      +-------------+-----------+--------------+\n\
    \   The key sizes given are rather large.  This is because these keys are\n  \
    \ resilient against a trillionaire attacker.  Assuming this rich\n   attacker\
    \ will not attack your key and that the key is rolled over\n   once a year, we\
    \ come to the following recommendations about KSK\n   sizes: 1024 bits for low-value\
    \ domains, 1300 bits for medium-value\n   domains, and 2048 bits for high-value\
    \ domains.\n   Whether a domain is of low, medium, or high value depends solely\
    \ on\n   the views of the zone owner.  One could, for instance, view leaf\n  \
    \ nodes in the DNS as of low value, and top-level domains (TLDs) or the\n   root\
    \ zone of high value.  The suggested key sizes should be safe for\n   the next\
    \ 5 years.\n   As ZSKs can be rolled over more easily (and thus more often), the\
    \ key\n   sizes can be made smaller.  But as said in the introduction of this\n\
    \   paragraph, making the ZSKs' key sizes too small (in relation to the\n   KSKs'\
    \ sizes) doesn't make much sense.  Try to limit the difference in\n   size to\
    \ about 100 bits.\n   Note that nobody can see into the future and that these\
    \ key sizes are\n   only provided here as a guide.  Further information can be\
    \ found in\n   [16] and Section 7.5 of [17].  It should be noted though that [16]\
    \ is\n   already considered overly optimistic about what key sizes are\n   considered\
    \ safe.\n   One final note concerning key sizes.  Larger keys will increase the\n\
    \   sizes of the RRSIG and DNSKEY records and will therefore increase the\n  \
    \ chance of DNS UDP packet overflow.  Also, the time it takes to\n   validate\
    \ and create RRSIGs increases with larger keys, so don't\n   needlessly double\
    \ your key sizes.\n"
- title: 3.6.  Private Key Storage
  contents:
  - "3.6.  Private Key Storage\n   It is recommended that, where possible, zone private\
    \ keys and the\n   zone file master copy that is to be signed be kept and used\
    \ in off-\n   line, non-network-connected, physically secure machines only.\n\
    \   Periodically, an application can be run to add authentication to a\n   zone\
    \ by adding RRSIG and NSEC RRs.  Then the augmented file can be\n   transferred.\n\
    \   When relying on dynamic update to manage a signed zone [10], be aware\n  \
    \ that at least one private key of the zone will have to reside on the\n   master\
    \ server.  This key is only as secure as the amount of exposure\n   the server\
    \ receives to unknown clients and the security of the host.\n   Although not mandatory,\
    \ one could administer the DNS in the following\n   way.  The master that processes\
    \ the dynamic updates is unavailable\n   from generic hosts on the Internet, it\
    \ is not listed in the NS RR\n   set, although its name appears in the SOA RRs\
    \ MNAME field.  The\n   nameservers in the NS RRSet are able to receive zone updates\
    \ through\n   NOTIFY, IXFR, AXFR, or an out-of-band distribution mechanism.  This\n\
    \   approach is known as the \"hidden master\" setup.\n   The ideal situation\
    \ is to have a one-way information flow to the\n   network to avoid the possibility\
    \ of tampering from the network.\n   Keeping the zone master file on-line on the\
    \ network and simply\n   cycling it through an off-line signer does not do this.\
    \  The on-line\n   version could still be tampered with if the host it resides\
    \ on is\n   compromised.  For maximum security, the master copy of the zone file\n\
    \   should be off-net and should not be updated based on an unsecured\n   network\
    \ mediated communication.\n   In general, keeping a zone file off-line will not\
    \ be practical and\n   the machines on which zone files are maintained will be\
    \ connected to\n   a network.  Operators are advised to take security measures\
    \ to shield\n   unauthorized access to the master copy.\n   For dynamically updated\
    \ secured zones [10], both the master copy and\n   the private key that is used\
    \ to update signatures on updated RRs will\n   need to be on-line.\n"
- title: 4.  Signature Generation, Key Rollover, and Related Policies
  contents:
  - '4.  Signature Generation, Key Rollover, and Related Policies

    '
- title: 4.1.  Time in DNSSEC
  contents:
  - "4.1.  Time in DNSSEC\n   Without DNSSEC, all times in the DNS are relative. \
    \ The SOA fields\n   REFRESH, RETRY, and EXPIRATION are timers used to determine\
    \ the time\n   elapsed after a slave server synchronized with a master server.\
    \  The\n   Time to Live (TTL) value and the SOA RR minimum TTL parameter [11]\n\
    \   are used to determine how long a forwarder should cache data after it\n  \
    \ has been fetched from an authoritative server.  By using a signature\n   validity\
    \ period, DNSSEC introduces the notion of an absolute time in\n   the DNS.  Signatures\
    \ in DNSSEC have an expiration date after which\n   the signature is marked as\
    \ invalid and the signed data is to be\n   considered Bogus.\n"
- title: 4.1.1.  Time Considerations
  contents:
  - "4.1.1.  Time Considerations\n   Because of the expiration of signatures, one\
    \ should consider the\n   following:\n   o  We suggest the Maximum Zone TTL of\
    \ your zone data to be a fraction\n      of your signature validity period.\n\
    \         If the TTL would be of similar order as the signature validity\n   \
    \      period, then all RRSets fetched during the validity period\n         would\
    \ be cached until the signature expiration time.  Section\n         7.1 of [4]\
    \ suggests that \"the resolver may use the time\n         remaining before expiration\
    \ of the signature validity period of\n         a signed RRSet as an upper bound\
    \ for the TTL\".  As a result,\n         query load on authoritative servers would\
    \ peak at signature\n         expiration time, as this is also the time at which\
    \ records\n         simultaneously expire from caches.\n         To avoid query\
    \ load peaks, we suggest the TTL on all the RRs in\n         your zone to be at\
    \ least a few times smaller than your\n         signature validity period.\n \
    \  o  We suggest the signature publication period to end at least one\n      Maximum\
    \ Zone TTL duration before the end of the signature validity\n      period.\n\
    \         Re-signing a zone shortly before the end of the signature\n        \
    \ validity period may cause simultaneous expiration of data from\n         caches.\
    \  This in turn may lead to peaks in the load on\n         authoritative servers.\n\
    \   o  We suggest the Minimum Zone TTL to be long enough to both fetch\n     \
    \ and verify all the RRs in the trust chain.  In workshop\n      environments,\
    \ it has been demonstrated [18] that a low TTL (under\n      5 to 10 minutes)\
    \ caused disruptions because of the following two\n      problems:\n         1.\
    \  During validation, some data may expire before the\n             validation\
    \ is complete.  The validator should be able to\n             keep all data until\
    \ it is completed.  This applies to all\n             RRs needed to complete the\
    \ chain of trust: DSes, DNSKEYs,\n             RRSIGs, and the final answers,\
    \ i.e., the RRSet that is\n             returned for the initial query.\n    \
    \     2.  Frequent verification causes load on recursive nameservers.\n      \
    \       Data at delegation points, DSes, DNSKEYs, and RRSIGs\n             benefit\
    \ from caching.  The TTL on those should be\n             relatively long.\n \
    \  o  Slave servers will need to be able to fetch newly signed zones\n      well\
    \ before the RRSIGs in the zone served by the slave server pass\n      their signature\
    \ expiration time.\n         When a slave server is out of sync with its master\
    \ and data in\n         a zone is signed by expired signatures, it may be better\
    \ for\n         the slave server not to give out any answer.\n         Normally,\
    \ a slave server that is not able to contact a master\n         server for an\
    \ extended period will expire a zone.  When that\n         happens, the server\
    \ will respond differently to queries for\n         that zone.  Some servers issue\
    \ SERVFAIL, whereas others turn\n         off the 'AA' bit in the answers.  The\
    \ time of expiration is set\n         in the SOA record and is relative to the\
    \ last successful\n         refresh between the master and the slave servers.\
    \  There exists\n         no coupling between the signature expiration of RRSIGs\
    \ in the\n         zone and the expire parameter in the SOA.\n         If the\
    \ server serves a DNSSEC zone, then it may well happen\n         that the signatures\
    \ expire well before the SOA expiration timer\n         counts down to zero. \
    \ It is not possible to completely prevent\n         this from happening by tweaking\
    \ the SOA parameters.  However,\n         the effects can be minimized where the\
    \ SOA expiration time is\n         equal to or shorter than the signature validity\
    \ period.  The\n         consequence of an authoritative server not being able\
    \ to update\n         a zone, whilst that zone includes expired signatures, is\
    \ that\n         non-secure resolvers will continue to be able to resolve data\n\
    \         served by the particular slave servers while security-aware\n      \
    \   resolvers will experience problems because of answers being\n         marked\
    \ as Bogus.\n         We suggest the SOA expiration timer being approximately\
    \ one\n         third or one fourth of the signature validity period.  It will\n\
    \         allow problems with transfers from the master server to be\n       \
    \  noticed before the actual signature times out.  We also suggest\n         that\
    \ operators of nameservers that supply secondary services\n         develop 'watch\
    \ dogs' to spot upcoming signature expirations in\n         zones they slave,\
    \ and take appropriate action.\n         When determining the value for the expiration\
    \ parameter one has\n         to take the following into account: What are the\
    \ chances that\n         all my secondaries expire the zone? How quickly can I\
    \ reach an\n         administrator of secondary servers to load a valid zone?\
    \  These\n         questions are not DNSSEC specific but may influence the choice\n\
    \         of your signature validity intervals.\n"
- title: 4.2.  Key Rollovers
  contents:
  - "4.2.  Key Rollovers\n   A DNSSEC key cannot be used forever (see Section 3.3).\
    \  So key\n   rollovers -- or supercessions, as they are sometimes called -- are\
    \ a\n   fact of life when using DNSSEC.  Zone administrators who are in the\n\
    \   process of rolling their keys have to take into account that data\n   published\
    \ in previous versions of their zone still lives in caches.\n   When deploying\
    \ DNSSEC, this becomes an important consideration;\n   ignoring data that may\
    \ be in caches may lead to loss of service for\n   clients.\n   The most pressing\
    \ example of this occurs when zone material signed\n   with an old key is being\
    \ validated by a resolver that does not have\n   the old zone key cached.  If\
    \ the old key is no longer present in the\n   current zone, this validation fails,\
    \ marking the data \"Bogus\".\n   Alternatively, an attempt could be made to validate\
    \ data that is\n   signed with a new key against an old key that lives in a local\
    \ cache,\n   also resulting in data being marked \"Bogus\".\n"
- title: 4.2.1.  Zone Signing Key Rollovers
  contents:
  - "4.2.1.  Zone Signing Key Rollovers\n   For \"Zone Signing Key rollovers\", there\
    \ are two ways to make sure\n   that during the rollover data still cached can\
    \ be verified with the\n   new key sets or newly generated signatures can be verified\
    \ with the\n   keys still in caches.  One schema, described in Section 4.2.1.2,\
    \ uses\n   double signatures; the other uses key pre-publication (Section\n  \
    \ 4.2.1.1).  The pros, cons, and recommendations are described in\n   Section\
    \ 4.2.1.3.\n"
- title: 4.2.1.1.  Pre-Publish Key Rollover
  contents:
  - "4.2.1.1.  Pre-Publish Key Rollover\n   This section shows how to perform a ZSK\
    \ rollover without the need to\n   sign all the data in a zone twice -- the \"\
    pre-publish key rollover\".\n   This method has advantages in the case of a key\
    \ compromise.  If the\n   old key is compromised, the new key has already been\
    \ distributed in\n   the DNS.  The zone administrator is then able to quickly\
    \ switch to\n   the new key and remove the compromised key from the zone.  Another\n\
    \   major advantage is that the zone size does not double, as is the case\n  \
    \ with the double signature ZSK rollover.  A small \"how-to\" for this\n   kind\
    \ of rollover can be found in Appendix B.\n   Pre-publish key rollover involves\
    \ four stages as follows:\n      ----------------------------------------------------------------\n\
    \      initial         new DNSKEY       new RRSIGs      DNSKEY removal\n     \
    \ ----------------------------------------------------------------\n      SOA0\
    \            SOA1             SOA2            SOA3\n      RRSIG10(SOA0)   RRSIG10(SOA1)\
    \    RRSIG11(SOA2)   RRSIG11(SOA3)\n      DNSKEY1         DNSKEY1          DNSKEY1\
    \         DNSKEY1\n      DNSKEY10        DNSKEY10         DNSKEY10        DNSKEY11\n\
    \      DNSKEY11         DNSKEY11\n      RRSIG1 (DNSKEY) RRSIG1 (DNSKEY)  RRSIG1(DNSKEY)\
    \  RRSIG1 (DNSKEY)\n      RRSIG10(DNSKEY) RRSIG10(DNSKEY)  RRSIG11(DNSKEY) RRSIG11(DNSKEY)\n\
    \      ----------------------------------------------------------------\n    \
    \                     Pre-Publish Key Rollover\n   initial: Initial version of\
    \ the zone: DNSKEY 1 is the Key Signing\n      Key.  DNSKEY 10 is used to sign\
    \ all the data of the zone, the Zone\n      Signing Key.\n   new DNSKEY: DNSKEY\
    \ 11 is introduced into the key set.  Note that no\n      signatures are generated\
    \ with this key yet, but this does not\n      secure against brute force attacks\
    \ on the public key.  The minimum\n      duration of this pre-roll phase is the\
    \ time it takes for the data\n      to propagate to the authoritative servers\
    \ plus TTL value of the\n      key set.\n   new RRSIGs: At the \"new RRSIGs\"\
    \ stage (SOA serial 2), DNSKEY 11 is\n      used to sign the data in the zone\
    \ exclusively (i.e., all the\n      signatures from DNSKEY 10 are removed from\
    \ the zone).  DNSKEY 10\n      remains published in the key set.  This way data\
    \ that was loaded\n      into caches from version 1 of the zone can still be verified\
    \ with\n      key sets fetched from version 2 of the zone.  The minimum time\n\
    \      that the key set including DNSKEY 10 is to be published is the\n      time\
    \ that it takes for zone data from the previous version of the\n      zone to\
    \ expire from old caches, i.e., the time it takes for this\n      zone to propagate\
    \ to all authoritative servers plus the Maximum\n      Zone TTL value of any of\
    \ the data in the previous version of the\n      zone.\n   DNSKEY removal: DNSKEY\
    \ 10 is removed from the zone.  The key set, now\n      only containing DNSKEY\
    \ 1 and DNSKEY 11, is re-signed with the\n      DNSKEY 1.\n   The above scheme\
    \ can be simplified by always publishing the \"future\"\n   key immediately after\
    \ the rollover.  The scheme would look as follows\n   (we show two rollovers);\
    \ the future key is introduced in \"new DNSKEY\"\n   as DNSKEY 12 and again a\
    \ newer one, numbered 13, in \"new DNSKEY\n   (II)\":\n      ----------------------------------------------------------------\n\
    \      initial             new RRSIGs          new DNSKEY\n      ----------------------------------------------------------------\n\
    \      SOA0                SOA1                SOA2\n      RRSIG10(SOA0)     \
    \  RRSIG11(SOA1)       RRSIG11(SOA2)\n      DNSKEY1             DNSKEY1      \
    \       DNSKEY1\n      DNSKEY10            DNSKEY10            DNSKEY11\n    \
    \  DNSKEY11            DNSKEY11            DNSKEY12\n      RRSIG1(DNSKEY)    \
    \  RRSIG1 (DNSKEY)     RRSIG1(DNSKEY)\n      RRSIG10(DNSKEY)     RRSIG11(DNSKEY)\
    \     RRSIG11(DNSKEY)\n      ----------------------------------------------------------------\n\
    \      ----------------------------------------------------------------\n    \
    \  new RRSIGs (II)     new DNSKEY (II)\n      ----------------------------------------------------------------\n\
    \      SOA3                SOA4\n      RRSIG12(SOA3)       RRSIG12(SOA4)\n   \
    \   DNSKEY1             DNSKEY1\n      DNSKEY11            DNSKEY12\n      DNSKEY12\
    \            DNSKEY13\n      RRSIG1(DNSKEY)      RRSIG1(DNSKEY)\n      RRSIG12(DNSKEY)\
    \     RRSIG12(DNSKEY)\n      ----------------------------------------------------------------\n\
    \              Pre-Publish Key Rollover, Showing Two Rollovers\n   Note that the\
    \ key introduced in the \"new DNSKEY\" phase is not used\n   for production yet;\
    \ the private key can thus be stored in a\n   physically secure manner and does\
    \ not need to be 'fetched' every time\n   a zone needs to be signed.\n"
- title: 4.2.1.2.  Double Signature Zone Signing Key Rollover
  contents:
  - "4.2.1.2.  Double Signature Zone Signing Key Rollover\n   This section shows how\
    \ to perform a ZSK key rollover using the double\n   zone data signature scheme,\
    \ aptly named \"double signature rollover\".\n   During the \"new DNSKEY\" stage\
    \ the new version of the zone file will\n   need to propagate to all authoritative\
    \ servers and the data that\n   exists in (distant) caches will need to expire,\
    \ requiring at least\n   the Maximum Zone TTL.\n   Double signature ZSK rollover\
    \ involves three stages as follows:\n      ----------------------------------------------------------------\n\
    \      initial             new DNSKEY         DNSKEY removal\n      ----------------------------------------------------------------\n\
    \      SOA0                SOA1               SOA2\n      RRSIG10(SOA0)      \
    \ RRSIG10(SOA1)      RRSIG11(SOA2)\n      RRSIG11(SOA1)\n      DNSKEY1       \
    \      DNSKEY1            DNSKEY1\n      DNSKEY10            DNSKEY10        \
    \   DNSKEY11\n      DNSKEY11\n      RRSIG1(DNSKEY)      RRSIG1(DNSKEY)     RRSIG1(DNSKEY)\n\
    \      RRSIG10(DNSKEY)     RRSIG10(DNSKEY)    RRSIG11(DNSKEY)\n      RRSIG11(DNSKEY)\n\
    \      ----------------------------------------------------------------\n    \
    \            Double Signature Zone Signing Key Rollover\n   initial: Initial Version\
    \ of the zone: DNSKEY 1 is the Key Signing\n      Key.  DNSKEY 10 is used to sign\
    \ all the data of the zone, the Zone\n      Signing Key.\n   new DNSKEY: At the\
    \ \"New DNSKEY\" stage (SOA serial 1) DNSKEY 11 is\n      introduced into the\
    \ key set and all the data in the zone is signed\n      with DNSKEY 10 and DNSKEY\
    \ 11.  The rollover period will need to\n      continue until all data from version\
    \ 0 of the zone has expired\n      from remote caches.  This will take at least\
    \ the Maximum Zone TTL\n      of version 0 of the zone.\n   DNSKEY removal: DNSKEY\
    \ 10 is removed from the zone.  All the\n      signatures from DNSKEY 10 are removed\
    \ from the zone.  The key set,\n      now only containing DNSKEY 11, is re-signed\
    \ with DNSKEY 1.\n   At every instance, RRSIGs from the previous version of the\
    \ zone can\n   be verified with the DNSKEY RRSet from the current version and\
    \ the\n   other way around.  The data from the current version can be verified\n\
    \   with the data from the previous version of the zone.  The duration of\n  \
    \ the \"new DNSKEY\" phase and the period between rollovers should be at\n   least\
    \ the Maximum Zone TTL.\n   Making sure that the \"new DNSKEY\" phase lasts until\
    \ the signature\n   expiration time of the data in initial version of the zone\
    \ is\n   recommended.  This way all caches are cleared of the old signatures.\n\
    \   However, this duration could be considerably longer than the Maximum\n   Zone\
    \ TTL, making the rollover a lengthy procedure.\n   Note that in this example\
    \ we assumed that the zone was not modified\n   during the rollover.  New data\
    \ can be introduced in the zone as long\n   as it is signed with both keys.\n"
- title: 4.2.1.3.  Pros and Cons of the Schemes
  contents:
  - "4.2.1.3.  Pros and Cons of the Schemes\n   Pre-publish key rollover: This rollover\
    \ does not involve signing the\n      zone data twice.  Instead, before the actual\
    \ rollover, the new key\n      is published in the key set and thus is available\
    \ for\n      cryptanalysis attacks.  A small disadvantage is that this process\n\
    \      requires four steps.  Also the pre-publish scheme involves more\n     \
    \ parental work when used for KSK rollovers as explained in Section\n      4.2.3.\n\
    \   Double signature ZSK rollover: The drawback of this signing scheme is\n  \
    \    that during the rollover the number of signatures in your zone\n      doubles;\
    \ this may be prohibitive if you have very big zones.  An\n      advantage is\
    \ that it only requires three steps.\n"
- title: 4.2.2.  Key Signing Key Rollovers
  contents:
  - "4.2.2.  Key Signing Key Rollovers\n   For the rollover of a Key Signing Key,\
    \ the same considerations as for\n   the rollover of a Zone Signing Key apply.\
    \  However, we can use a\n   double signature scheme to guarantee that old data\
    \ (only the apex key\n   set) in caches can be verified with a new key set and\
    \ vice versa.\n   Since only the key set is signed with a KSK, zone size considerations\n\
    \   do not apply.\n   --------------------------------------------------------------------\n\
    \       initial        new DNSKEY        DS change       DNSKEY removal\n   --------------------------------------------------------------------\n\
    \     Parent:\n       SOA0           -------->         SOA1            -------->\n\
    \       RRSIGpar(SOA0) -------->         RRSIGpar(SOA1)  -------->\n       DS1\
    \            -------->         DS2             -------->\n       RRSIGpar(DS)\
    \   -------->         RRSIGpar(DS)    -------->\n     Child:\n       SOA0    \
    \        SOA1             -------->       SOA2\n       RRSIG10(SOA0)   RRSIG10(SOA1)\
    \    -------->       RRSIG10(SOA2)\n                                        -------->\n\
    \       DNSKEY1         DNSKEY1          -------->       DNSKEY2\n           \
    \            DNSKEY2          -------->\n       DNSKEY10        DNSKEY10     \
    \    -------->       DNSKEY10\n       RRSIG1 (DNSKEY) RRSIG1 (DNSKEY)  -------->\
    \       RRSIG2 (DNSKEY)\n                       RRSIG2 (DNSKEY)  -------->\n \
    \      RRSIG10(DNSKEY) RRSIG10(DNSKEY)  -------->       RRSIG10(DNSKEY)\n   --------------------------------------------------------------------\n\
    \   Stages of Deployment for a Double Signature Key Signing Key Rollover\n   initial:\
    \ Initial version of the zone.  The parental DS points to\n      DNSKEY1.  Before\
    \ the rollover starts, the child will have to\n      verify what the TTL is of\
    \ the DS RR that points to DNSKEY1 -- it\n      is needed during the rollover\
    \ and we refer to the value as TTL_DS.\n   new DNSKEY: During the \"new DNSKEY\"\
    \ phase, the zone administrator\n      generates a second KSK, DNSKEY2.  The key\
    \ is provided to the\n      parent, and the child will have to wait until a new\
    \ DS RR has been\n      generated that points to DNSKEY2.  After that DS RR has\
    \ been\n      published on all servers authoritative for the parent's zone, the\n\
    \      zone administrator has to wait at least TTL_DS to make sure that\n    \
    \  the old DS RR has expired from caches.\n   DS change: The parent replaces DS1\
    \ with DS2.\n   DNSKEY removal: DNSKEY1 has been removed.\n   The scenario above\
    \ puts the responsibility for maintaining a valid\n   chain of trust with the\
    \ child.  It also is based on the premise that\n   the parent only has one DS\
    \ RR (per algorithm) per zone.  An\n   alternative mechanism has been considered.\
    \  Using an established\n   trust relation, the interaction can be performed in-band,\
    \ and the\n   removal of the keys by the child can possibly be signaled by the\n\
    \   parent.  In this mechanism, there are periods where there are two DS\n   RRs\
    \ at the parent.  Since at the moment of writing the protocol for\n   this interaction\
    \ has not been developed, further discussion is out of\n   scope for this document.\n"
- title: 4.2.3.  Difference Between ZSK and KSK Rollovers
  contents:
  - "4.2.3.  Difference Between ZSK and KSK Rollovers\n   Note that KSK rollovers\
    \ and ZSK rollovers are different in the sense\n   that a KSK rollover requires\
    \ interaction with the parent (and\n   possibly replacing of trust anchors) and\
    \ the ensuing delay while\n   waiting for it.\n   A zone key rollover can be handled\
    \ in two different ways: pre-publish\n   (Section 4.2.1.1) and double signature\
    \ (Section 4.2.1.2).\n   As the KSK is used to validate the key set and because\
    \ the KSK is not\n   changed during a ZSK rollover, a cache is able to validate\
    \ the new\n   key set of the zone.  The pre-publish method would also work for\
    \ a\n   KSK rollover.  The records that are to be pre-published are the\n   parental\
    \ DS RRs.  The pre-publish method has some drawbacks for KSKs.\n   We first describe\
    \ the rollover scheme and then indicate these\n   drawbacks.\n   --------------------------------------------------------------------\n\
    \     initial         new DS           new DNSKEY      DS/DNSKEY removal\n   --------------------------------------------------------------------\n\
    \   Parent:\n     SOA0            SOA1             -------->       SOA2\n    \
    \ RRSIGpar(SOA0)  RRSIGpar(SOA1)   -------->       RRSIGpar(SOA2)\n     DS1  \
    \           DS1              -------->       DS2\n                     DS2   \
    \           -------->\n     RRSIGpar(DS)    RRSIGpar(DS)     -------->       RRSIGpar(DS)\n\
    \   Child:\n     SOA0            -------->        SOA1            SOA1\n     RRSIG10(SOA0)\
    \   -------->        RRSIG10(SOA1)   RRSIG10(SOA1)\n                     -------->\n\
    \     DNSKEY1         -------->        DNSKEY2         DNSKEY2\n             \
    \        -------->\n     DNSKEY10        -------->        DNSKEY10        DNSKEY10\n\
    \     RRSIG1 (DNSKEY) -------->        RRSIG2(DNSKEY)  RRSIG2 (DNSKEY)\n     RRSIG10(DNSKEY)\
    \ -------->        RRSIG10(DNSKEY) RRSIG10(DNSKEY)\n   --------------------------------------------------------------------\n\
    \      Stages of Deployment for a Pre-Publish Key Signing Key Rollover\n   When\
    \ the child zone wants to roll, it notifies the parent during the\n   \"new DS\"\
    \ phase and submits the new key (or the corresponding DS) to\n   the parent. \
    \ The parent publishes DS1 and DS2, pointing to DNSKEY1\n   and DNSKEY2, respectively.\
    \  During the rollover (\"new DNSKEY\" phase),\n   which can take place as soon\
    \ as the new DS set propagated through the\n   DNS, the child replaces DNSKEY1\
    \ with DNSKEY2.  Immediately after that\n   (\"DS/DNSKEY removal\" phase), it\
    \ can notify the parent that the old DS\n   record can be deleted.\n   The drawbacks\
    \ of this scheme are that during the \"new DS\" phase the\n   parent cannot verify\
    \ the match between the DS2 RR and DNSKEY2 using\n   the DNS -- as DNSKEY2 is\
    \ not yet published.  Besides, we introduce a\n   \"security lame\" key (see Section\
    \ 4.4.3).  Finally, the child-parent\n   interaction consists of two steps.  The\
    \ \"double signature\" method\n   only needs one interaction.\n"
- title: 4.2.4.  Automated Key Rollovers
  contents:
  - "4.2.4.  Automated Key Rollovers\n   As keys must be renewed periodically, there\
    \ is some motivation to\n   automate the rollover process.  Consider the following:\n\
    \   o  ZSK rollovers are easy to automate as only the child zone is\n      involved.\n\
    \   o  A KSK rollover needs interaction between parent and child.  Data\n    \
    \  exchange is needed to provide the new keys to the parent;\n      consequently,\
    \ this data must be authenticated and integrity must\n      be guaranteed in order\
    \ to avoid attacks on the rollover.\n"
- title: 4.3.  Planning for Emergency Key Rollover
  contents:
  - "4.3.  Planning for Emergency Key Rollover\n   This section deals with preparation\
    \ for a possible key compromise.\n   Our advice is to have a documented procedure\
    \ ready for when a key\n   compromise is suspected or confirmed.\n   When the\
    \ private material of one of your keys is compromised it can\n   be used for as\
    \ long as a valid trust chain exists.  A trust chain\n   remains intact for\n\
    \   o  as long as a signature over the compromised key in the trust chain\n  \
    \    is valid,\n   o  as long as a parental DS RR (and signature) points to the\n\
    \      compromised key,\n   o  as long as the key is anchored in a resolver and\
    \ is used as a\n      starting point for validation (this is generally the hardest\
    \ to\n      update).\n   While a trust chain to your compromised key exists, your\
    \ namespace is\n   vulnerable to abuse by anyone who has obtained illegitimate\n\
    \   possession of the key.  Zone operators have to make a trade-off if\n   the\
    \ abuse of the compromised key is worse than having data in caches\n   that cannot\
    \ be validated.  If the zone operator chooses to break the\n   trust chain to\
    \ the compromised key, data in caches signed with this\n   key cannot be validated.\
    \  However, if the zone administrator chooses\n   to take the path of a regular\
    \ rollover, the malicious key holder can\n   spoof data so that it appears to\
    \ be valid.\n"
- title: 4.3.1.  KSK Compromise
  contents:
  - "4.3.1.  KSK Compromise\n   A zone containing a DNSKEY RRSet with a compromised\
    \ KSK is vulnerable\n   as long as the compromised KSK is configured as trust\
    \ anchor or a\n   parental DS points to it.\n   A compromised KSK can be used\
    \ to sign the key set of an attacker's\n   zone.  That zone could be used to poison\
    \ the DNS.\n   Therefore, when the KSK has been compromised, the trust anchor\
    \ or the\n   parental DS should be replaced as soon as possible.  It is local\n\
    \   policy whether to break the trust chain during the emergency\n   rollover.\
    \  The trust chain would be broken when the compromised KSK\n   is removed from\
    \ the child's zone while the parent still has a DS\n   pointing to the compromised\
    \ KSK (the assumption is that there is only\n   one DS at the parent.  If there\
    \ are multiple DSes this does not apply\n   -- however the chain of trust of this\
    \ particular key is broken).\n   Note that an attacker's zone still uses the compromised\
    \ KSK and the\n   presence of a parental DS would cause the data in this zone\
    \ to appear\n   as valid.  Removing the compromised key would cause the attacker's\n\
    \   zone to appear as valid and the child's zone as Bogus.  Therefore, we\n  \
    \ advise not to remove the KSK before the parent has a DS to a new KSK\n   in\
    \ place.\n"
- title: 4.3.1.1.  Keeping the Chain of Trust Intact
  contents:
  - "4.3.1.1.  Keeping the Chain of Trust Intact\n   If we follow this advice, the\
    \ timing of the replacement of the KSK is\n   somewhat critical.  The goal is\
    \ to remove the compromised KSK as soon\n   as the new DS RR is available at the\
    \ parent.  And also make sure that\n   the signature made with a new KSK over\
    \ the key set with the\n   compromised KSK in it expires just after the new DS\
    \ appears at the\n   parent, thus removing the old cruft in one swoop.\n   The\
    \ procedure is as follows:\n   1.  Introduce a new KSK into the key set, keep\
    \ the compromised KSK in\n       the key set.\n   2.  Sign the key set, with a\
    \ short validity period.  The validity\n       period should expire shortly after\
    \ the DS is expected to appear\n       in the parent and the old DSes have expired\
    \ from caches.\n   3.  Upload the DS for this new key to the parent.\n   4.  Follow\
    \ the procedure of the regular KSK rollover: Wait for the DS\n       to appear\
    \ in the authoritative servers and then wait as long as\n       the TTL of the\
    \ old DS RRs.  If necessary re-sign the DNSKEY RRSet\n       and modify/extend\
    \ the expiration time.\n   5.  Remove the compromised DNSKEY RR from the zone\
    \ and re-sign the\n       key set using your \"normal\" validity interval.\n \
    \  An additional danger of a key compromise is that the compromised key\n   could\
    \ be used to facilitate a legitimate DNSKEY/DS rollover and/or\n   nameserver\
    \ changes at the parent.  When that happens, the domain may\n   be in dispute.\
    \  An authenticated out-of-band and secure notify\n   mechanism to contact a parent\
    \ is needed in this case.\n   Note that this is only a problem when the DNSKEY\
    \ and or DS records\n   are used for authentication at the parent.\n"
- title: 4.3.1.2.  Breaking the Chain of Trust
  contents:
  - "4.3.1.2.  Breaking the Chain of Trust\n   There are two methods to break the\
    \ chain of trust.  The first method\n   causes the child zone to appear 'Bogus'\
    \ to validating resolvers.  The\n   other causes the child zone to appear 'insecure'.\
    \  These are\n   described below.\n   In the method that causes the child zone\
    \ to appear 'Bogus' to\n   validating resolvers, the child zone replaces the current\
    \ KSK with a\n   new one and re-signs the key set.  Next it sends the DS of the\
    \ new\n   key to the parent.  Only after the parent has placed the new DS in\n\
    \   the zone is the child's chain of trust repaired.\n   An alternative method\
    \ of breaking the chain of trust is by removing\n   the DS RRs from the parent\
    \ zone altogether.  As a result, the child\n   zone would become insecure.\n"
- title: 4.3.2.  ZSK Compromise
  contents:
  - "4.3.2.  ZSK Compromise\n   Primarily because there is no parental interaction\
    \ required when a\n   ZSK is compromised, the situation is less severe than with\
    \ a KSK\n   compromise.  The zone must still be re-signed with a new ZSK as soon\n\
    \   as possible.  As this is a local operation and requires no\n   communication\
    \ between the parent and child, this can be achieved\n   fairly quickly.  However,\
    \ one has to take into account that just as\n   with a normal rollover the immediate\
    \ disappearance of the old\n   compromised key may lead to verification problems.\
    \  Also note that as\n   long as the RRSIG over the compromised ZSK is not expired\
    \ the zone\n   may be still at risk.\n"
- title: 4.3.3.  Compromises of Keys Anchored in Resolvers
  contents:
  - "4.3.3.  Compromises of Keys Anchored in Resolvers\n   A key can also be pre-configured\
    \ in resolvers.  For instance, if\n   DNSSEC is successfully deployed the root\
    \ key may be pre-configured in\n   most security aware resolvers.\n   If trust-anchor\
    \ keys are compromised, the resolvers using these keys\n   should be notified\
    \ of this fact.  Zone administrators may consider\n   setting up a mailing list\
    \ to communicate the fact that a SEP key is\n   about to be rolled over.  This\
    \ communication will of course need to\n   be authenticated, e.g., by using digital\
    \ signatures.\n   End-users faced with the task of updating an anchored key should\n\
    \   always validate the new key.  New keys should be authenticated out-\n   of-band,\
    \ for example, through the use of an announcement website that\n   is secured\
    \ using secure sockets (TLS) [21].\n"
- title: 4.4.  Parental Policies
  contents:
  - '4.4.  Parental Policies

    '
- title: 4.4.1.  Initial Key Exchanges and Parental Policies Considerations
  contents:
  - "4.4.1.  Initial Key Exchanges and Parental Policies Considerations\n   The initial\
    \ key exchange is always subject to the policies set by the\n   parent.  When\
    \ designing a key exchange policy one should take into\n   account that the authentication\
    \ and authorization mechanisms used\n   during a key exchange should be as strong\
    \ as the authentication and\n   authorization mechanisms used for the exchange\
    \ of delegation\n   information between parent and child.  That is, there is no\
    \ implicit\n   need in DNSSEC to make the authentication process stronger than\
    \ it\n   was in DNS.\n   Using the DNS itself as the source for the actual DNSKEY\
    \ material,\n   with an out-of-band check on the validity of the DNSKEY, has the\n\
    \   benefit that it reduces the chances of user error.  A DNSKEY query\n   tool\
    \ can make use of the SEP bit [3] to select the proper key from a\n   DNSSEC key\
    \ set, thereby reducing the chance that the wrong DNSKEY is\n   sent.  It can\
    \ validate the self-signature over a key; thereby\n   verifying the ownership\
    \ of the private key material.  Fetching the\n   DNSKEY from the DNS ensures that\
    \ the chain of trust remains intact\n   once the parent publishes the DS RR indicating\
    \ the child is secure.\n   Note: the out-of-band verification is still needed\
    \ when the key\n   material is fetched via the DNS.  The parent can never be sure\n\
    \   whether or not the DNSKEY RRs have been spoofed.\n"
- title: 4.4.2.  Storing Keys or Hashes?
  contents:
  - "4.4.2.  Storing Keys or Hashes?\n   When designing a registry system one should\
    \ consider which of the\n   DNSKEYs and/or the corresponding DSes to store.  Since\
    \ a child zone\n   might wish to have a DS published using a message digest algorithm\n\
    \   not yet understood by the registry, the registry can't count on being\n  \
    \ able to generate the DS record from a raw DNSKEY.  Thus, we recommend\n   that\
    \ registry systems at least support storing DS records.\n   It may also be useful\
    \ to store DNSKEYs, since having them may help\n   during troubleshooting and,\
    \ as long as the child's chosen message\n   digest is supported, the overhead\
    \ of generating DS records from them\n   is minimal.  Having an out-of-band mechanism,\
    \ such as a registry\n   directory (e.g., Whois), to find out which keys are used\
    \ to generate\n   DS Resource Records for specific owners and/or zones may also\
    \ help\n   with troubleshooting.\n   The storage considerations also relate to\
    \ the design of the customer\n   interface and the method by which data is transferred\
    \ between\n   registrant and registry; Will the child zone administrator be able\
    \ to\n   upload DS RRs with unknown hash algorithms or does the interface only\n\
    \   allow DNSKEYs?  In the registry-registrar model, one can use the\n   DNSSEC\
    \ extensions to the Extensible Provisioning Protocol (EPP) [15],\n   which allows\
    \ transfer of DS RRs and optionally DNSKEY RRs.\n"
- title: 4.4.3.  Security Lameness
  contents:
  - "4.4.3.  Security Lameness\n   Security lameness is defined as what happens when\
    \ a parent has a DS\n   RR pointing to a non-existing DNSKEY RR.  When this happens,\
    \ the\n   child's zone may be marked \"Bogus\" by verifying DNS clients.\n   As\
    \ part of a comprehensive delegation check, the parent could, at key\n   exchange\
    \ time, verify that the child's key is actually configured in\n   the DNS.  However,\
    \ if a parent does not understand the hashing\n   algorithm used by child, the\
    \ parental checks are limited to only\n   comparing the key id.\n   Child zones\
    \ should be very careful in removing DNSKEY material,\n   specifically SEP keys,\
    \ for which a DS RR exists.\n   Once a zone is \"security lame\", a fix (e.g.,\
    \ removing a DS RR) will\n   take time to propagate through the DNS.\n"
- title: 4.4.4.  DS Signature Validity Period
  contents:
  - "4.4.4.  DS Signature Validity Period\n   Since the DS can be replayed as long\
    \ as it has a valid signature, a\n   short signature validity period over the\
    \ DS minimizes the time a\n   child is vulnerable in the case of a compromise\
    \ of the child's\n   KSK(s).  A signature validity period that is too short introduces\
    \ the\n   possibility that a zone is marked \"Bogus\" in case of a configuration\n\
    \   error in the signer.  There may not be enough time to fix the\n   problems\
    \ before signatures expire.  Something as mundane as operator\n   unavailability\
    \ during weekends shows the need for DS signature\n   validity periods longer\
    \ than 2 days.  We recommend an absolute\n   minimum for a DS signature validity\
    \ period of a few days.\n   The maximum signature validity period of the DS record\
    \ depends on how\n   long child zones are willing to be vulnerable after a key\
    \ compromise.\n   On the other hand, shortening the DS signature validity interval\n\
    \   increases the operational risk for the parent.  Therefore, the parent\n  \
    \ may have policy to use a signature validity interval that is\n   considerably\
    \ longer than the child would hope for.\n   A compromise between the operational\
    \ constraints of the parent and\n   minimizing damage for the child may result\
    \ in a DS signature validity\n   period somewhere between a week and months.\n\
    \   In addition to the signature validity period, which sets a lower\n   bound\
    \ on the number of times the zone owner will need to sign the\n   zone data and\
    \ which sets an upper bound to the time a child is\n   vulnerable after key compromise,\
    \ there is the TTL value on the DS\n   RRs.  Shortening the TTL means that the\
    \ authoritative servers will\n   see more queries.  But on the other hand, a short\
    \ TTL lowers the\n   persistence of DS RRSets in caches thereby increasing the\
    \ speed with\n   which updated DS RRSets propagate through the DNS.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   DNSSEC adds data integrity to the DNS.  This\
    \ document tries to assess\n   the operational considerations to maintain a stable\
    \ and secure DNSSEC\n   service.  Not taking into account the 'data propagation'\
    \ properties\n   in the DNS will cause validation failures and may make secured\
    \ zones\n   unavailable to security-aware resolvers.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   Most of the ideas in this document were the result of\
    \ collective\n   efforts during workshops, discussions, and tryouts.\n   At the\
    \ risk of forgetting individuals who were the original\n   contributors of the\
    \ ideas, we would like to acknowledge people who\n   were actively involved in\
    \ the compilation of this document.  In\n   random order: Rip Loomis, Olafur Gudmundsson,\
    \ Wesley Griffin, Michael\n   Richardson, Scott Rose, Rick van Rein, Tim McGinnis,\
    \ Gilles Guette\n   Olivier Courtay, Sam Weiler, Jelte Jansen, Niall O'Reilly,\
    \ Holger\n   Zuleger, Ed Lewis, Hilarie Orman, Marcos Sanz, and Peter Koch.\n\
    \   Some material in this document has been copied from RFC 2541 [12].\n   Mike\
    \ StJohns designed the key exchange between parent and child\n   mentioned in\
    \ the last paragraph of Section 4.2.2\n   Section 4.2.4 was supplied by G. Guette\
    \ and O. Courtay.\n   Emma Bretherick, Adrian Bedford, and Lindy Foster corrected\
    \ many of\n   the spelling and style issues.\n   Kolkman and Gieben take the blame\
    \ for introducing all miscakes (sic).\n   While working on this document, Kolkman\
    \ was employed by the RIPE NCC\n   and Gieben was employed by NLnet Labs.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1]   Mockapetris, P., \"Domain names - concepts\
    \ and facilities\", STD\n         13, RFC 1034, November 1987.\n   [2]   Mockapetris,\
    \ P., \"Domain names - implementation and\n         specification\", STD 13, RFC\
    \ 1035, November 1987.\n   [3]   Kolkman, O., Schlyter, J., and E. Lewis, \"Domain\
    \ Name System\n         KEY (DNSKEY) Resource Record (RR) Secure Entry Point (SEP)\n\
    \         Flag\", RFC 3757, May 2004.\n   [4]   Arends, R., Austein, R., Larson,\
    \ M., Massey, D., and S. Rose,\n         \"DNS Security Introduction and Requirements\"\
    , RFC 4033, March\n         2005.\n   [5]   Arends, R., Austein, R., Larson, M.,\
    \ Massey, D., and S. Rose,\n         \"Resource Records for the DNS Security Extensions\"\
    , RFC 4034,\n         March 2005.\n   [6]   Arends, R., Austein, R., Larson, M.,\
    \ Massey, D., and S. Rose,\n         \"Protocol Modifications for the DNS Security\
    \ Extensions\", RFC\n         4035, March 2005.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [7]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [8]   Ohta, M., \"Incremental Zone Transfer in DNS\", RFC 1995, August\n \
    \        1996.\n   [9]   Vixie, P., \"A Mechanism for Prompt Notification of Zone\
    \ Changes\n         (DNS NOTIFY)\", RFC 1996, August 1996.\n   [10]  Wellington,\
    \ B., \"Secure Domain Name System (DNS) Dynamic\n         Update\", RFC 3007,\
    \ November 2000.\n   [11]  Andrews, M., \"Negative Caching of DNS Queries (DNS\
    \ NCACHE)\",\n         RFC 2308, March 1998.\n   [12]  Eastlake, D., \"DNS Security\
    \ Operational Considerations\", RFC\n         2541, March 1999.\n   [13]  Orman,\
    \ H. and P. Hoffman, \"Determining Strengths For Public\n         Keys Used For\
    \ Exchanging Symmetric Keys\", BCP 86, RFC 3766,\n         April 2004.\n   [14]\
    \  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n         Requirements\
    \ for Security\", BCP 106, RFC 4086, June 2005.\n   [15]  Hollenbeck, S., \"Domain\
    \ Name System (DNS) Security Extensions\n         Mapping for the Extensible Provisioning\
    \ Protocol (EPP)\", RFC\n         4310, December 2005.\n   [16]  Lenstra, A. and\
    \ E. Verheul, \"Selecting Cryptographic Key\n         Sizes\", The Journal of\
    \ Cryptology 14 (255-293), 2001.\n   [17]  Schneier, B., \"Applied Cryptography:\
    \ Protocols, Algorithms, and\n         Source Code in C\", ISBN (hardcover) 0-471-12845-7,\
    \ ISBN\n         (paperback) 0-471-59756-2, Published by John Wiley & Sons Inc.,\n\
    \         1996.\n   [18]  Rose, S., \"NIST DNSSEC workshop notes\", June 2001.\n\
    \   [19]  Jansen, J., \"Use of RSA/SHA-256 DNSKEY and RRSIG Resource\n       \
    \  Records in DNSSEC\", Work in Progress, January 2006.\n   [20]  Hardaker, W.,\
    \ \"Use of SHA-256 in DNSSEC Delegation Signer (DS)\n         Resource Records\
    \ (RRs)\", RFC 4509, May 2006.\n   [21]  Blake-Wilson, S., Nystrom, M., Hopwood,\
    \ D., Mikkelsen, J., and\n         T. Wright, \"Transport Layer Security (TLS)\
    \ Extensions\", RFC\n         4366, April 2006.\n"
- title: Appendix A.  Terminology
  contents:
  - "Appendix A.  Terminology\n   In this document, there is some jargon used that\
    \ is defined in other\n   documents.  In most cases, we have not copied the text\
    \ from the\n   documents defining the terms but have given a more elaborate\n\
    \   explanation of the meaning.  Note that these explanations should not\n   be\
    \ seen as authoritative.\n   Anchored key: A DNSKEY configured in resolvers around\
    \ the globe.\n      This key is hard to update, hence the term anchored.\n   Bogus:\
    \ Also see Section 5 of [4].  An RRSet in DNSSEC is marked\n      \"Bogus\" when\
    \ a signature of an RRSet does not validate against a\n      DNSKEY.\n   Key Signing\
    \ Key or KSK: A Key Signing Key (KSK) is a key that is used\n      exclusively\
    \ for signing the apex key set.  The fact that a key is\n      a KSK is only relevant\
    \ to the signing tool.\n   Key size: The term 'key size' can be substituted by\
    \ 'modulus size'\n      throughout the document.  It is mathematically more correct\
    \ to use\n      modulus size, but as this is a document directed at operators\
    \ we\n      feel more at ease with the term key size.\n   Private and public keys:\
    \ DNSSEC secures the DNS through the use of\n      public key cryptography.  Public\
    \ key cryptography is based on the\n      existence of two (mathematically related)\
    \ keys, a public key and a\n      private key.  The public keys are published\
    \ in the DNS by use of\n      the DNSKEY Resource Record (DNSKEY RR).  Private\
    \ keys should\n      remain private.\n   Key rollover: A key rollover (also called\
    \ key supercession in some\n      environments) is the act of replacing one key\
    \ pair with another at\n      the end of a key effectivity period.\n   Secure\
    \ Entry Point (SEP) key: A KSK that has a parental DS record\n      pointing to\
    \ it or is configured as a trust anchor.  Although not\n      required by the\
    \ protocol, we recommend that the SEP flag [3] is\n      set on these keys.\n\
    \   Self-signature: This only applies to signatures over DNSKEYs; a\n      signature\
    \ made with DNSKEY x, over DNSKEY x is called a self-\n      signature.  Note:\
    \ without further information, self-signatures\n      convey no trust.  They are\
    \ useful to check the authenticity of the\n      DNSKEY, i.e., they can be used\
    \ as a hash.\n   Singing the zone file: The term used for the event where an\n\
    \      administrator joyfully signs its zone file while producing melodic\n  \
    \    sound patterns.\n   Signer: The system that has access to the private key\
    \ material and\n      signs the Resource Record sets in a zone.  A signer may\
    \ be\n      configured to sign only parts of the zone, e.g., only those RRSets\n\
    \      for which existing signatures are about to expire.\n   Zone Signing Key\
    \ (ZSK): A key that is used for signing all data in a\n      zone.  The fact that\
    \ a key is a ZSK is only relevant to the\n      signing tool.\n   Zone administrator:\
    \ The 'role' that is responsible for signing a zone\n      and publishing it on\
    \ the primary authoritative server.\n"
- title: Appendix B.  Zone Signing Key Rollover How-To
  contents:
  - "Appendix B.  Zone Signing Key Rollover How-To\n   Using the pre-published signature\
    \ scheme and the most conservative\n   method to assure oneself that data does\
    \ not live in caches, here\n   follows the \"how-to\".\n   Step 0: The preparation:\
    \ Create two keys and publish both in your key\n      set.  Mark one of the keys\
    \ \"active\" and the other \"published\".\n      Use the \"active\" key for signing\
    \ your zone data.  Store the\n      private part of the \"published\" key, preferably\
    \ off-line.  The\n      protocol does not provide for attributes to mark a key\
    \ as active\n      or published.  This is something you have to do on your own,\n\
    \      through the use of a notebook or key management tool.\n   Step 1: Determine\
    \ expiration: At the beginning of the rollover make a\n      note of the highest\
    \ expiration time of signatures in your zone\n      file created with the current\
    \ key marked as active.  Wait until\n      the expiration time marked in Step\
    \ 1 has passed.\n   Step 2: Then start using the key that was marked \"published\"\
    \ to sign\n      your data (i.e., mark it \"active\").  Stop using the key that\
    \ was\n      marked \"active\"; mark it \"rolled\".\n   Step 3: It is safe to\
    \ engage in a new rollover (Step 1) after at\n      least one signature validity\
    \ period.\n"
- title: Appendix C.  Typographic Conventions
  contents:
  - "Appendix C.  Typographic Conventions\n   The following typographic conventions\
    \ are used in this document:\n   Key notation: A key is denoted by DNSKEYx, where\
    \ x is a number or an\n   identifier, x could be thought of as the key id.\n \
    \  RRSet notations: RRs are only denoted by the type.  All other\n   information\
    \ -- owner, class, rdata, and TTL--is left out.  Thus:\n   \"example.com 3600\
    \ IN A 192.0.2.1\" is reduced to \"A\".  RRSets are a\n   list of RRs.  A example\
    \ of this would be \"A1, A2\", specifying the\n   RRSet containing two \"A\" records.\
    \  This could again be abbreviated to\n   just \"A\".\n   Signature notation:\
    \ Signatures are denoted as RRSIGx(RRSet), which\n   means that RRSet is signed\
    \ with DNSKEYx.\n   Zone representation: Using the above notation we have simplified\
    \ the\n   representation of a signed zone by leaving out all unnecessary\n   details\
    \ such as the names and by representing all data by \"SOAx\"\n   SOA representation:\
    \ SOAs are represented as SOAx, where x is the\n   serial number.\n   Using this\
    \ notation the following signed zone:\n   example.net.      86400  IN SOA  ns.example.net.\
    \ bert.example.net. (\n                            2006022100   ; serial\n   \
    \                         86400        ; refresh (  24 hours)\n              \
    \              7200         ; retry   (   2 hours)\n                         \
    \   3600000      ; expire  (1000 hours)\n                            28800 ) \
    \     ; minimum (   8 hours)\n                     86400  RRSIG   SOA 5 2 86400\
    \ 20130522213204 (\n                                  20130422213204 14 example.net.\n\
    \                                  cmL62SI6iAX46xGNQAdQ... )\n               \
    \      86400  NS      a.iana-servers.net.\n                     86400  NS    \
    \  b.iana-servers.net.\n                     86400  RRSIG   NS 5 2 86400 20130507213204\
    \ (\n                                  20130407213204 14 example.net.\n      \
    \                            SO5epiJei19AjXoUpFnQ ... )\n                    \
    \ 86400  DNSKEY  256 3 5 (\n                                  EtRB9MP5/AvOuVO0I8XDxy0...\
    \ ) ; id = 14\n                     86400  DNSKEY  257 3 5 (\n               \
    \                   gsPW/Yy19GzYIY+Gnr8HABU... ) ; id = 15\n                 \
    \    86400  RRSIG   DNSKEY 5 2 86400 20130522213204 (\n                      \
    \            20130422213204 14 example.net.\n                                \
    \  J4zCe8QX4tXVGjV4e1r9... )\n                     86400  RRSIG   DNSKEY 5 2 86400\
    \ 20130522213204 (\n                                  20130422213204 15 example.net.\n\
    \                                  keVDCOpsSeDReyV6O... )\n                  \
    \   86400  RRSIG   NSEC 5 2 86400 20130507213204 (\n                         \
    \         20130407213204 14 example.net.\n                                  obj3HEp1GjnmhRjX...\
    \ )\n   a.example.net.    86400  IN TXT  \"A label\"\n                     86400\
    \  RRSIG   TXT 5 3 86400 20130507213204 (\n                                  20130407213204\
    \ 14 example.net.\n                                  IkDMlRdYLmXH7QJnuF3v... )\n\
    \                     86400  NSEC    b.example.com. TXT RRSIG NSEC\n         \
    \            86400  RRSIG   NSEC 5 3 86400 20130507213204 (\n                \
    \                  20130407213204 14 example.net.\n                          \
    \        bZMjoZ3bHjnEz0nIsPMM... )\n                     ...\n   is reduced to\
    \ the following representation:\n       SOA2006022100\n       RRSIG14(SOA2006022100)\n\
    \       DNSKEY14\n       DNSKEY15\n       RRSIG14(KEY)\n       RRSIG15(KEY)\n\
    \   The rest of the zone data has the same signature as the SOA record,\n   i.e.,\
    \ an RRSIG created with DNSKEY 14.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Olaf M. Kolkman\n   NLnet Labs\n   Kruislaan 419\n   Amsterdam\
    \  1098 VA\n   The Netherlands\n   EMail: olaf@nlnetlabs.nl\n   URI:   http://www.nlnetlabs.nl\n\
    \   R. (Miek) Gieben\n   EMail: miek@miek.nl\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
