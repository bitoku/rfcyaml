- title: __initial_text__
  contents:
  - '             Compact Forward Error Correction (FEC) Schemes

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document introduces some Forward Error Correction (FEC) schemes\n\
    \   that supplement the FEC schemes described in RFC 3452.  The primary\n   benefits\
    \ of these additional FEC schemes are that they are designed\n   for reliable\
    \ bulk delivery of large objects using a more compact FEC\n   Payload ID, and\
    \ they can be used to sequentially deliver blocks of an\n   object of indeterminate\
    \ length.  Thus, they more flexibly support\n   different delivery models with\
    \ less packet header overhead.\n   This document also describes the Fully-Specified\
    \ FEC scheme\n   corresponding to FEC Encoding ID 0.  This Fully-Specified FEC\
    \ scheme\n   requires no FEC coding and is introduced primarily to allow simple\n\
    \   interoperability testing between different implementations of\n   protocol\
    \ instantiations that use the FEC building block.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Packet Header Fields . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n       2.1.  FEC Payload ID for FEC Encoding IDs 0 and 130. .\
    \ . . . .  4\n       2.2.  Compact No-Code FEC scheme . . . . . . . . . . . .\
    \ . . .  5\n       2.3.  Compact FEC scheme . . . . . . . . . . . . . . . . .\
    \ . .  5\n   3.  Compact No-Code FEC scheme . . . . . . . . . . . . . . . . .\
    \ .  6\n       3.1.  Source Block Logistics . . . . . . . . . . . . . . . . .\
    \  7\n       3.2.  Sending and Receiving a Source Block . . . . . . . . . .  8\n\
    \   4.  Usage Examples . . . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \     4.1.  Reliable Bulk Data Delivery. . . . . . . . . . . . . . .  9\n    \
    \   4.2.  Block-Stream Delivery. . . . . . . . . . . . . . . . . . 10\n   5. \
    \ Security Considerations. . . . . . . . . . . . . . . . . . . . 10\n   6.  IANA\
    \ Considerations. . . . . . . . . . . . . . . . . . . . . . 10\n   7.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n       7.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . 11\n       7.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . 12\n   8.  Authors' Addresses .\
    \ . . . . . . . . . . . . . . . . . . . . . 12\n   9.  Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes two new Forward Error Correction\
    \ (FEC)\n   schemes corresponding to FEC Encoding IDs 0 and 130 which supplement\n\
    \   the FEC schemes corresponding to FEC Encoding IDs 128 and 129\n   described\
    \ in the FEC Building Block [4].\n   The new FEC schemes are particularly applicable\
    \ when an object is\n   partitioned into equal-length source blocks.  In this\
    \ case, the\n   source block length common to all source blocks can be communicated\n\
    \   out-of-band, thus saving the additional overhead of carrying the\n   source\
    \ block length within the FEC Payload ID of each packet.  The\n   new FEC schemes\
    \ are similar to the FEC schemes with FEC Encoding ID\n   128 defined in RFC 3452\
    \ [4], except that the FEC Payload ID is half\n   as long.  This is the reason\
    \ that these new FEC schemes are called\n   Compact FEC schemes.\n   The primary\
    \ focus of FEC Encoding IDs 128 and 129 is to reliably\n   deliver bulk objects\
    \ of known length.  The FEC schemes described in\n   this document are designed\
    \ to be used for both reliable delivery of\n   bulk objects of known length, and\
    \ for the delivery of a stream of\n   source blocks for an object of indeterminate\
    \ length.  Within the\n   block-stream delivery model, reliability guarantees\
    \ can range from\n   acknowledged reliable delivery of each block to unacknowledged\n\
    \   enhanced-reliability delivery of time-sensitive blocks, depending on\n   the\
    \ properties of the protocol instantiation in which the FEC scheme\n   is used.\
    \  Acknowledged reliable block-stream delivery is similar in\n   spirit to the\
    \ byte-stream delivery that TCP offers, except that the\n   unit of delivery is\
    \ a block of data instead of a byte of data.  In\n   the spirit of a building\
    \ block (see RFC 3048 [6]), the FEC schemes\n   described in this document can\
    \ be used to provide reliability for\n   other service models as well.\n   The\
    \ two new FEC Encoding IDs 0 and 130 are described in Section 2,\n   and this\
    \ supplements Section 5 of the FEC building block [4].\n   Section 3 of this document\
    \ describes the Fully-Specified FEC scheme\n   corresponding to the FEC Encoding\
    \ ID 0.  This Fully-Specified FEC\n   scheme requires no FEC coding and is specified\
    \ primarily to allow\n   simple interoperability testing between different implementations\
    \ of\n   protocol instantiations that use the FEC building block.\n   This document\
    \ inherits the context, language, declarations and\n   restrictions of the FEC\
    \ building block [4].  This document also uses\n   the terminology of the companion\
    \ document [7] which describes the use\n   of FEC codes within the context of\
    \ reliable IP multicast transport\n   and provides an introduction to some commonly\
    \ used FEC codes.\n   Building blocks are defined in RFC 3048 [6].  This document\
    \ is a\n   product of the IETF RMT WG and follows the general guidelines\n   provided\
    \ in RFC 3269 [3].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [2].\n"
- title: Statement of Intent
  contents:
  - "Statement of Intent\n   This memo contains part of the definitions necessary\
    \ to fully specify\n   a Reliable Multicast Transport (RMT) protocol in accordance\
    \ with RFC\n   2357 [5].  As per RFC 2357, the use of any reliable multicast\n\
    \   protocol in the Internet requires an adequate congestion control\n   scheme.\n\
    \   While waiting for such a scheme to be available, or for an existing\n   scheme\
    \ to be proven adequate, the RMT working group publishes this\n   Request for\
    \ Comments in the \"Experimental\" category.\n   It is the intent of RMT to re-submit\
    \ this specification as an IETF\n   Proposed Standard as soon as the above condition\
    \ is met.\n"
- title: 2.  Packet Header Fields
  contents:
  - "2.  Packet Header Fields\n   This section specifies FEC Encoding IDs 0 and 130\
    \ and the associated\n   FEC Payload ID formats and the specific information in\
    \ the\n   corresponding FEC Object Transmission Information.  The FEC scheme\n\
    \   associated with FEC Encoding ID 0 is Fully-Specified whereas the FEC\n   schemes\
    \ associated with FEC Encoding ID 130 are Under-Specified.\n   FEC Encoding IDs\
    \ 0 and 130 have the same FEC Payload ID format, which\n   is described in the\
    \ following subsection.  The FEC Object\n   Transmission Information for FEC Encoding\
    \ IDs 0 and 130 is different,\n   and is described in the subsequent two subsections.\n"
- title: 2.1.  FEC Payload ID for FEC Encoding IDs 0 and 130
  contents:
  - "2.1.  FEC Payload ID for FEC Encoding IDs 0 and 130\n   The FEC Payload ID for\
    \ FEC Encoding IDs 0 and 130 is composed of a\n   Source Block Number and an Encoding\
    \ Symbol ID structured as follows:\n     0                   1               \
    \    2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Source Block Number       |      Encoding Symbol ID       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The 16-bit Source Block Number is used to identify from which source\n   block\
    \ of the object the encoding symbol in the payload of the packet\n   is generated.\
    \  There are two possible modes: In the unique SBN mode\n   each source block\
    \ within the object has a unique Source Block Number\n   associated with it, and\
    \ in the non-unique SBN mode the same Source\n   Block Number may be used for\
    \ more than one source block within the\n   object.  Which mode is being used\
    \ for an object is outside the scope\n   of this document and MUST be communicated,\
    \ either explicitly or\n   implicitly, out-of-band to receivers.\n   If the unique\
    \ SBN mode is used then successive Source Block Numbers\n   are associated with\
    \ consecutive source blocks of the object starting\n   with Source Block Number\
    \ 0 for the first source block of the object.\n   In this case, there are at most\
    \ 2^16 source blocks in the object.\n   If the non-unique SBN mode is used then\
    \ the mapping from source\n   blocks to Source Block Numbers MUST be communicated\
    \ out-of-band to\n   receivers, and how this is done is outside the scope of this\n\
    \   document.  This mapping could be implicit, for example determined by\n   the\
    \ transmission order of the source blocks.   In non-unique SBN\n   mode, packets\
    \ for two different source blocks mapped to the same\n   Source Block Number SHOULD\
    \ NOT be sent within an interval of time\n   that is shorter than the transport\
    \ time of a source block.  The\n   transport time of a source block includes the\
    \ amount of time the\n   source block is processed at the transport layer by the\
    \ sender, the\n   network transit time for packets, and the amount of time the\
    \ source\n   block is processed at the transport layer by a receiver.  This allows\n\
    \   the receiver to clearly decide which packets belong to which source\n   block.\n\
    \   The 16-bit Encoding Symbol ID identifies which specific encoding\n   symbol\
    \ generated from the source block is carried in the packet\n   payload.  The exact\
    \ details of the correspondence between Encoding\n   Symbol IDs and the encoding\
    \ symbols in the packet payload for FEC\n   Encoding ID 0 are specified in Section\
    \ 3.  The exact details of the\n   correspondence between Encoding Symbol IDs\
    \ and the encoding symbol(s)\n   in the packet payload for FEC Encoding ID 130\
    \ are dependent on the\n   particular encoding algorithm used as identified by\
    \ the FEC Encoding\n   ID and by the FEC Instance ID.\n"
- title: 2.2.  Compact No-Code FEC scheme
  contents:
  - "2.2.  Compact No-Code FEC scheme\n   This subsection reserves FEC Encoding ID\
    \ 0 for the Compact No-Code\n   FEC scheme described in this subsection and in\
    \ Section 3.  This is a\n   Fully-Specified FEC scheme that is primarily intended\
    \ to be used for\n   simple interoperability testing between different implementations\
    \ of\n   protocol instantiations that use the FEC building block.  The value\n\
    \   of this FEC scheme is that no FEC encoding or decoding is required to\n  \
    \ implement it and therefore it is easy to test interoperability\n   between protocols\
    \ that may use different proprietary FEC schemes in\n   production in their first\
    \ implementations.\n   The FEC Payload ID format for FEC Encoding ID 0 is described\
    \ in\n   Subsection 2.1.  The FEC Object Transmission Information has the\n  \
    \ following specific information:\n   o The FEC Encoding ID 0.\n   o For each\
    \ source block of the object, the length in bytes of the\n     encoding symbol\
    \ carried in the packet payload.  This length MUST be\n     the same for all packets\
    \ sent for the same source block, but MAY be\n     different for different source\
    \ blocks in the same object.\n   o For each source block of the object, the length\
    \ of the source block\n     in bytes.  Typically, each source block for the object\
    \ has the same\n     length and thus only one length common to all source blocks\
    \ need be\n     communicated, but this is not a requirement.  For convenience,\
    \ the\n     source block length MAY be a multiple of the length of the encoding\n\
    \     symbol carried in one packet payload.\n   How this out-of-band information\
    \ is communicated is outside the scope\n   of this document.\n   Other information,\
    \ such as the object length and the number of source\n   blocks of the object\
    \ for an object of known length may be needed by a\n   receiver to support some\
    \ delivery models, i.e., reliable bulk data\n   delivery.\n"
- title: 2.3.  Compact FEC scheme
  contents:
  - "2.3.  Compact FEC scheme\n   This subsection reserves FEC Encoding ID 130 for\
    \ the Compact FEC\n   scheme that is described in this subsection.  This is an\n\
    \   Under-Specified FEC scheme.  This FEC scheme is similar in spirit to\n   the\
    \ Compact No-Code FEC scheme, except that a non-trivial FEC\n   encoding (that\
    \ is Under-Specified) may be used to generate encoding\n   symbol(s) placed in\
    \ the payload of each packet and a corresponding\n   FEC decoder may be used to\
    \ produce the source block from received\n   packets.\n   The FEC Payload ID format\
    \ for FEC Encoding ID 0 is described in\n   Subsection 2.1.  The FEC Object Transmission\
    \ Information has the\n   following specific information:\n   o The FEC Encoding\
    \ ID 130.\n   o The FEC Instance ID associated with the FEC Encoding ID 130 to\
    \ be\n     used.\n   o For each source block of the object, the aggregate length\
    \ of the\n     encoding symbol(s) carried in one packet payload.  This length\
    \ MUST\n     be the same for all packets sent for the same source block, but MAY\n\
    \     be different for different source blocks in the same object.\n   o For each\
    \ source block of the object, the length of the source block\n     in bytes. \
    \ Typically, each source block for the object has the same\n     length and thus\
    \ only one length common to all source blocks need to\n     be communicated, but\
    \ this is not a requirement.  For convenience,\n     the source block length MAY\
    \ be a multiple of the aggregate length\n     of the encoding symbol(s) carried\
    \ in one packet payload.\n   How this out-of-band information is communicated\
    \ is outside the scope\n   of this document.\n   Other information, such as the\
    \ object length and the number of source\n   blocks of the object for an object\
    \ of known length may be needed by a\n   receiver to support some delivery models,\
    \ i.e., reliable bulk data\n   delivery.\n"
- title: 3.  Compact No-Code FEC scheme
  contents:
  - "3.  Compact No-Code FEC scheme\n   In this section we describe a Fully-Specified\
    \ FEC scheme\n   corresponding to FEC Encoding ID 0.  The primary purpose for\n\
    \   introducing these FEC schemes is to allow simple interoperability\n   testing\
    \ between different implementations of the same protocol\n   instantiation that\
    \ uses the FEC building block.\n   The Compact No-Code FEC scheme does not require\
    \ FEC encoding or\n   decoding.  Instead, each encoding symbol consists of consecutive\n\
    \   bytes of a source block of the object.  The FEC Payload ID consists\n   of\
    \ two fields, the 16-bit Source Block Number and the 16-bit Encoding\n   Symbol\
    \ ID, as described in Subsection 2.1.  The relative lengths of\n   these fields\
    \ were chosen for their similarity with the corresponding\n   fields of the FEC\
    \ Payload ID associated with FEC Encoding ID 130, and\n   because of this testing\
    \ interoperability of the FEC scheme associated\n   with FEC Encoding ID 0 provides\
    \ a first basic step to testing\n   interoperability of an FEC scheme associated\
    \ with FEC Encoding ID\n   130.\n   Subsection 2.1. describes mapping between\
    \ source blocks of an object\n   and Source Block Numbers.  The next two subsections\
    \ describe the\n   details of how the Compact No-Code FEC scheme operates for\
    \ each\n   source block of an object.  These subsections are not meant to\n  \
    \ suggest a particular implementation, but just to illustrate the\n   general\
    \ algorithm through the description of a simple, non-optimized\n   implementation.\n"
- title: 3.1.  Source Block Logistics
  contents:
  - "3.1.  Source Block Logistics\n   Let X > 0 be the length of a source block in\
    \ bytes.  The value of X\n   is part of the FEC Object Transmission Information,\
    \ and how this\n   information is communicated to a receiver is outside the scope\
    \ of\n   this document.\n   Let L > 0 be the length of the encoding symbol contained\
    \ in the\n   payload of each packet.  There are several possible ways the length\n\
    \   of the encoding symbol L can be communicated to the receiver, and how\n  \
    \ this is done is outside the scope of this document.  As an example, a\n   sender\
    \ could fix the packet payload length to be L in order to place\n   the encoding\
    \ symbol of length L into the packet, and then a receiver\n   could infer the\
    \ value of L from the length of the received packet\n   payload.  It is REQUIRED\
    \ that L be the same for all packets sent for\n   the same source block but MAY\
    \ be different for different source\n   blocks within the same object.\n   For\
    \ a given source block X bytes in length with Source Block Number\n   I, let N\
    \ = X/L rounded up to the nearest integer.  The encoding\n   symbol carried in\
    \ the payload of a packet consists of a consecutive\n   portion of the source\
    \ block.  The source block is logically\n   partitioned into N encoding symbols,\
    \ each L bytes in length, and the\n   corresponding Encoding Symbol IDs range\
    \ from 0 through N-1 starting\n   at the beginning of the source block and proceeding\
    \ to the end.\n   Thus, the encoding symbol with Encoding Symbol ID Y consists\
    \ of bytes\n   L*Y through L*(Y+1)-1 of the source block, where the bytes of the\n\
    \   source block are numbered from 0 through X-1.  If X/L is not integral\n  \
    \ then the last encoding symbol with Encoding Symbol ID = N-1 consists\n   of\
    \ bytes L*(N-1) through the last byte X-1 of the source block, and\n   the remaining\
    \ L*N - X bytes of the encoding symbol can by padded out\n   with zeroes.\n  \
    \ As an example, suppose that the source block length X = 20,400 and\n   encoding\
    \ symbol length L = 1,000.  The encoding symbol with Encoding\n   Symbol ID =\
    \ 10 contains bytes 10,000 through 10,999 of the source\n   block, and the encoding\
    \ symbol with Encoding Symbol ID = 20 contains\n   bytes 20,000 through the last\
    \ byte 20,399 of the source block and the\n   remaining 600 bytes of the encoding\
    \ symbol can be padded with zeroes.\n   There are no restrictions beyond the rules\
    \ stated above on how a\n   sender generates encoding symbols to send from a source\
    \ block.\n   However, it is recommended that an implementor of refer to the\n\
    \   companion document [7] for general advice.\n   In the next subsection a procedure\
    \ is recommended for sending and\n   receiving source blocks.\n"
- title: 3.2.  Sending and Receiving a Source Block
  contents:
  - "3.2.  Sending and Receiving a Source Block\n   The following carousel procedure\
    \ is RECOMMENDED for a sender to\n   generate packets containing FEC Payload IDs\
    \ and corresponding\n   encoding symbols for a source block with Source Block\
    \ Number I.  Set\n   the length in bytes of an encoding symbol to a fixed value\
    \ L which is\n   reasonable for a packet payload (e.g., ensure that the total\
    \ packet\n   size does not exceed the MTU) and that is smaller than the source\n\
    \   block length X, e.g., L = 1,000 for X >= 1,000.  Initialize Y to a\n   value\
    \ randomly chosen in the interval [0..N-1].  Repeat the following\n   for each\
    \ packet of the source block to be sent.\n   o If Y < N-1 then generate the encoding\
    \ symbol consisting of the L\n     bytes of the source block numbered L*Y through\
    \ L*(Y+1)-1.\n   o If Y = N-1 then generate the encoding symbol consisting of\
    \ the last\n     X - L*(N-1) bytes of the source block numbered L*(N-1) through\
    \ X-1\n     followed by L*N - X padding bytes of zeroes.\n   o Set the Source\
    \ Block Length to X, set the Source Block Number = I,\n     set the Encoding Symbol\
    \ ID = Y, place the FEC Payload ID and the\n     encoding symbol into the packet\
    \ to send.\n   o In preparation for the generation of the next packet: if Y <\
    \ N-1\n     then increment Y by one else if Y = N-1 then reset Y to zero.\n  \
    \ The following procedure is RECOMMENDED for a receiver to recover the\n   source\
    \ block based on receiving packets for the source block from a\n   sender that\
    \ is using the carousel procedure describe above.  The\n   receiver can determine\
    \ from which source block a received packet was\n   generated by the Source Block\
    \ Number carried in the FEC Payload ID.\n   Upon receipt of the first FEC Payload\
    \ ID for a source block, the\n   receiver uses the source block length received\
    \ out-of-band as part of\n   the FEC Object Transmission Information to determine\
    \ the length X in\n   bytes of the source block, and allocates space for the X\
    \ bytes that\n   the source block requires.  The receiver also computes the length\
    \ L\n   of the encoding symbol in the payload of the packet by substracting\n\
    \   the packet header length from the total length of the received packet\n  \
    \ (and the receiver checks that this length is the same in each\n   subsequent\
    \ received packet from the same source block).  After\n   calculating N = X/L\
    \ rounded up to the nearest integer, the receiver\n   allocates a boolean array\
    \ RECEIVED[0..N-1] with all N entries\n   initialized to false to track received\
    \ encoding symbols.  The\n   receiver keeps receiving packets for the source block\
    \ as long as\n   there is at least one entry in RECEIVED still set to false or\
    \ until\n   the application decides to give up on this source block and move on\n\
    \   to other source blocks.  For each received packet for the source\n   block\
    \ (including the first packet) the steps to be taken to help\n   recover the source\
    \ block are as follows.  Let Y be the value of the\n   Encoding Symbol ID within\
    \ FEC Payload ID of the packet.  If Y < N-1\n   then the receiver copies the L\
    \ bytes of the encoding symbol into\n   bytes numbered L*Y through L*(Y+1)-1 of\
    \ the space reserved for the\n   source block.  If Y = N-1 then the receiver copies\
    \ the first\n   X - L*(N-1) bytes of the encoding symbol into bytes numbered L*(N-1)\n\
    \   through X-1 of the space reserved for the source block.  In either\n   case,\
    \ the receiver sets RECEIVED[Y] = true.  At each point in time,\n   the receiver\
    \ has successfully recovered bytes L*Y through L*(Y+1)-1\n   of the source block\
    \ for all Y in the interval [0..N-1] for which\n   RECEIVED[Y] is true.  If all\
    \ N entries of RECEIVED are true then the\n   receiver has recovered the entire\
    \ source block.\n"
- title: 4.  Usage Examples
  contents:
  - "4.  Usage Examples\n   The following subsections outline some usage examples\
    \ for FEC\n   Encoding IDs 0 and 130.\n"
- title: 4.1.  Reliable Bulk Data Delivery
  contents:
  - "4.1.  Reliable Bulk Data Delivery\n   One possible delivery model that can be\
    \ supported using any FEC\n   scheme described in this document is reliable bulk\
    \ data delivery.  In\n   this model, one or more potentially large objects are\
    \ delivered\n   reliably to potentially multiple receivers using multicast.  For\
    \ this\n   delivery model the unique SBN mode is often used.  Using this mode\n\
    \   the maximum length of an object that can be delivered is at most the\n   number\
    \ of possible source blocks times the maximum length of a source\n   block.  If\
    \ the aggregate length of encoding symbols carried in a\n   packet payload is\
    \ L bytes then the maximum length of a source block\n   is the number of distinct\
    \ Encoding Symbol IDs times L, or 2^16 * L\n   for FEC Encoding IDs 0 and 130.\
    \  If for example L = 1 KB then the\n   length of a source block can be up to\
    \ around 65 MB.   However, in\n   practice the length of the source block is usually\
    \ shorter than the\n   number of distinct Encoding Symbol IDs times L, and thus\
    \ generally\n   the length of a source block is a fraction of 65 MB.  Since the\n\
    \   number of distinct Source Block Numbers is 2^16, for this example an\n   object\
    \ can be more than a terabyte.\n   The non-unique SBN mode of delivery can also\
    \ be effectively used for\n   reliably delivering large object.  In this case,\
    \ the length of the\n   object delivered could be arbitrarily large, depending\
    \ on the\n   out-of-band mapping between source blocks and Source Block Numbers.\n"
- title: 4.2.  Block-Stream Delivery
  contents:
  - "4.2.  Block-Stream Delivery\n   Another possible delivery model that can be supported\
    \ using FEC\n   Encoding ID 0 or 130 is block-stream delivery of an object.  In\
    \ this\n   model, the source blocks of a potentially indeterminate length object\n\
    \   are to be reliably delivered in sequence to one or multiple\n   receivers.\
    \  Thus, the object could be partitioned into source blocks\n   on-the-fly at\
    \ the sender as the data arrives, and all packets\n   generated for one source\
    \ block are sent before any packets are sent\n   for the subsequent source block.\
    \  In this example, all source blocks\n   could be of the same length and this\
    \ length could be communicated\n   out-of-band to a receiver before the receiver\
    \ joins the session.  For\n   this delivery model it is not required that the\
    \ Source Block Numbers\n   for all source blocks are unique.  However, a suggested\
    \ usage is to\n   use all 2^16 Source Block Numbers for consecutive source blocks\
    \ of\n   the object, and thus the time between reuse of a Source Block Number\n\
    \   is the time it takes to send the packets for 2^16 source blocks.\n   This\
    \ delivery model can be used to reliably deliver an object to one\n   or multiple\
    \ receivers, using either an ACK or NACK based\n   acknowledgement based scheme\
    \ for each source block.  As another\n   example the sender could send a fixed\
    \ number of packets for each\n   source block without any acknowledgements from\
    \ receivers, for example\n   in a live streaming without feedback application.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The security considerations for this document\
    \ are the same as they\n   are for RFC 3452 [4].\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Values of FEC Encoding IDs and FEC Instance IDs are\
    \ subject to IANA\n   registration.  For general guidelines on IANA considerations\
    \ as they\n   apply to this document, see RFC 3452 [4].  This document assigns\
    \ the\n   Fully-Specified FEC Encoding ID 0 under the ietf:rmt:fec:encoding\n\
    \   name-space to \"Compact No-Code\".  The FEC Payload ID format and\n   corresponding\
    \ FEC Object Transmission Information associated with FEC\n   Encoding ID 0 is\
    \ described in Subsections 2.1 and 2.2, and the\n   corresponding FEC scheme is\
    \ described in Section 3.\n   This document assigns the Under-Specified FEC Encoding\
    \ ID 130 under\n   the ietf:rmt:fec:encoding name-space to \"Compact FEC\".  The\
    \ FEC\n   Payload ID format and corresponding FEC Object Transmission\n   Information\
    \ associated with FEC Encoding ID 130 are described in\n   Subsections 2.1 and\
    \ 2.3.\n   As FEC Encoding ID 130 is Under-Specified, a new \"FEC Instance ID\"\
    \n   sub-name-space must be established, in accordance to RFC 3452. Hence\n  \
    \ this document also establishes a new \"FEC Instance ID\" registry named\n  \
    \ ietf:rmt:fec:encoding:instance:130\n   and scoped by\n   ietf:rmt:fec:encoding\
    \ = 130 (Compact FEC)\n   As per RFC 3452, the values that can be assigned within\n\
    \   ietf:rmt:fec:encoding:instance:130 are non-negative numeric indices.\n   Assignment\
    \ requests are granted on a \"First Come First Served\" basis.\n   RFC 3452 specifies\
    \ additional criteria that MUST be met for the\n   assignment within the generic\
    \ ietf:rmt:fec:encoding:instance name-\n   space.  These criteria also apply to\n\
    \   ietf:rmt:fec:encoding:instance:130.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1] Bradner, S., \"The Internet Standards Process\
    \ -- Revision 3\", BCP\n       9, RFC 2026, October 1996.\n   [2] Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [3] Kermode, R. and L. Vicisano, \"Author Guidelines\
    \ for Reliable\n       Multicast Transport (RMT) Building Blocks and Protocol\n\
    \       Instantiation Documents\", RFC 3269, April 2002.\n   [4] Luby, M., Vicisano,\
    \ L., Gemmell, J., Rizzo, L., Handley, M. and\n       J. Crowcroft, \"Forward\
    \ Error Correction (FEC) Building Block\",\n       RFC 3452, December 2002.\n\
    \   [5] Mankin, A., Romanow, A., Bradner, S. and V. Paxson, \"IETF\n       Criteria\
    \ for Evaluating Reliable Multicast Transport and\n       Application Protocols\"\
    , RFC 2357, June 1998.\n   [6] Whetten, B., Vicisano, L., Kermode, R., Handley,\
    \ M., Floyd, S.\n       and M. Luby, \"Reliable Multicast Transport Building Blocks\
    \ for\n       One-to-Many Bulk-Data Transfer\", RFC 3048, January 2001.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [7] Luby, M., Vicisano, L., Gemmell, J., Rizzo,\
    \ L., Handley, M. and\n       J. Crowcroft, \"The Use of Forward Error Correction\
    \ (FEC) in\n       Reliable Multicast\", RFC 3453, December 2002.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Michael Luby\n   Digital Fountain, Inc.\n   39141\
    \ Civic Center Drive\n   Suite 300\n   Fremont, CA  94538\n   EMail: luby@digitalfountain.com\n\
    \   Lorenzo Vicisano\n   cisco Systems, Inc.\n   170 West Tasman Dr.,\n   San\
    \ Jose, CA, USA, 95134\n   EMail: lorenzo@cisco.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004). \
    \ This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
