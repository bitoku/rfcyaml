- contents:
  - '      Keying Material Exporters for Transport Layer Security (TLS)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   A number of protocols wish to leverage Transport Layer Security
    (TLS)\n   to perform key establishment but then use some of the keying material\n
    \  for their own purposes.  This document describes a general mechanism\n   for
    allowing that.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/5705.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Conventions Used In This Document . . . . . . . . . . .
    . . . . 3\n   3.  Binding to Application Contexts . . . . . . . . . . . . . .
    . . 3\n   4.  Exporter Definition . . . . . . . . . . . . . . . . . . . . . .
    4\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . . . 5\n
    \  6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 6\n   7.
    \ Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . 6\n   8.  References
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n     8.1.  Normative
    References  . . . . . . . . . . . . . . . . . . . 7\n     8.2.  Informative References
    \ . . . . . . . . . . . . . . . . . . 7\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Note:  The mechanism described in this document was previously
    known\n          as \"TLS Extractors\" but was changed to avoid a name conflict\n
    \         with the use of the term \"Extractor\" in the cryptographic\n          community.\n
    \  A number of protocols wish to leverage Transport Layer Security (TLS)\n   [RFC5246]
    or Datagram TLS (DTLS) [RFC4347] to perform key\n   establishment but then use
    some of the keying material for their own\n   purposes.  A typical example is
    DTLS-SRTP [DTLS-SRTP], a key\n   management scheme for the Secure Real-time Transport
    Protocol (SRTP)\n   that uses DTLS to perform a key exchange and negotiate the
    SRTP\n   [RFC3711] protection suite and then uses the DTLS master_secret to\n
    \  generate the SRTP keys.\n   These applications imply a need to be able to export
    keying material\n   (later called Exported Keying Material or EKM) from TLS/DTLS
    to an\n   application or protocol residing at an upper layer, and to securely\n
    \  agree on the upper-layer context where the keying material will be\n   used.
    \ The mechanism for exporting the keying material has the\n   following requirements:\n
    \  o  Both client and server need to be able to export the same EKM\n      value.\n
    \  o  EKM values should be indistinguishable from random data to\n      attackers
    who don't know the master_secret.\n   o  It should be possible to export multiple
    EKM values from the same\n      TLS/DTLS association.\n   o  Knowing one EKM value
    should not reveal any useful information\n      about the master_secret or about
    other EKM values.\n   The mechanism described in this document is intended to
    fulfill these\n   requirements.  This mechanism is compatible with all versions
    of TLS.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used In This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n"
  title: 2.  Conventions Used In This Document
- contents:
  - "3.  Binding to Application Contexts\n   In addition to using an exporter to obtain
    keying material, an\n   application using the keying material has to securely
    establish the\n   upper-layer context where the keying material will be used.
    \ The\n   details of this context depend on the application, but it could\n   include
    things such as algorithms and parameters that will be used\n   with the keys,
    identifier(s) for the endpoint(s) who will use the\n   keys, identifier(s) for
    the session(s) where the keys will be used,\n   and the lifetime(s) for the context
    and/or keys.  At a minimum, there\n   should be some mechanism for signaling that
    an exporter will be used.\n   This specification does not mandate a single mechanism
    for agreeing\n   on such context; instead, there are several possibilities that
    can be\n   used (and can complement each other).  For example:\n   o  Information
    about the upper-layer context can be included in the\n      optional data after
    the exporter label (see Section 4).\n   o  Information about the upper-layer context
    can be exchanged in TLS\n      extensions included in the ClientHello and ServerHello
    messages.\n      This approach is used in [DTLS-SRTP].  The handshake messages
    are\n      protected by the Finished messages, so once the handshake\n      completes,
    the peers will have the same view of the information.\n      Extensions also allow
    a limited form of negotiation: for example,\n      the TLS client could propose
    several alternatives for some context\n      parameters, and the TLS server could
    select one of them.\n   o  The upper-layer protocol can include its own handshake,
    which can\n      be protected using the keys exported by TLS.\n   No matter how
    the context is agreed, it is required that it has one\n   part that indicates
    which application will use the exported keys.\n   This part is the disambiguating
    label string (see Section 4).\n   It is important to note that just embedding
    TLS messages in the\n   upper-layer protocol may not automatically secure all
    the important\n   context information, since the upper-layer messages are not
    covered\n   by TLS Finished messages.\n"
  title: 3.  Binding to Application Contexts
- contents:
  - "4.  Exporter Definition\n   The output of the exporter is intended to be used
    in a single scope,\n   which is associated with the TLS session, the label, and
    the context\n   value.\n   The exporter takes three input values:\n   o  a disambiguating
    label string,\n   o  a per-association context value provided by the application
    using\n      the exporter, and\n   o  a length value.\n   If no context is provided,
    it then computes:\n           PRF(SecurityParameters.master_secret, label,\n               SecurityParameters.client_random
    +\n               SecurityParameters.server_random\n               )[length]\n
    \  If context is provided, it computes:\n           PRF(SecurityParameters.master_secret,
    label,\n               SecurityParameters.client_random +\n               SecurityParameters.server_random
    +\n               context_value_length + context_value\n               )[length]\n
    \  Where PRF is the TLS Pseudorandom Function in use for the session.\n   The
    output is a pseudorandom bit string of length bytes generated\n   from the master_secret.
    \ (This construction allows for\n   interoperability with older exporter-type
    constructions which do not\n   use context values, e.g., [RFC5281]).\n   Labels
    here have the same definition as in TLS, i.e., an ASCII string\n   with no terminating
    NULL.  Label values beginning with \"EXPERIMENTAL\"\n   MAY be used for private
    use without registration.  All other label\n   values MUST be registered via Specification
    Required as described by\n   RFC 5226 [RFC5226].  Note that exporter labels have
    the potential to\n   collide with existing PRF labels.  In order to prevent this,
    labels\n   SHOULD begin with \"EXPORTER\".  This is not a MUST because there are\n
    \  existing uses that have labels which do not begin with this prefix.\n   The
    context value allows the application using the exporter to mix\n   its own data
    with the TLS PRF for the exporter output.  One example\n   of where this might
    be useful is an authentication setting where the\n   client credentials are valid
    for more than one identity; the context\n   value could then be used to mix the
    expected identity into the keying\n   material, thus preventing substitution attacks.
    \ The context value\n   length is encoded as an unsigned, 16-bit quantity (uint16;
    see\n   [RFC5246], Section 4.4) representing the length of the context value.\n
    \  The context MAY be zero length.  Because the context value is mixed\n   with
    the master_secret via the PRF, it is safe to mix confidential\n   information
    into the exporter, provided that the master_secret will\n   not be known to the
    attacker.\n"
  title: 4.  Exporter Definition
- contents:
  - "5.  Security Considerations\n   The prime security requirement for exporter outputs
    is that they be\n   independent.  More formally, after a particular TLS session,
    if an\n   adversary is allowed to choose multiple (label, context value) pairs\n
    \  and is given the output of the PRF for those values, the attacker is\n   still
    unable to distinguish between the output of the PRF for a\n   (label, context
    value) pair (different from the ones that it\n   submitted) and a random value
    of the same length.  In particular,\n   there may be settings, such as the one
    described in Section 4, where\n   the attacker can control the context value;
    such an attacker MUST NOT\n   be able to predict the output of the exporter.  Similarly,
    an\n   attacker who does not know the master secret should not be able to\n   distinguish
    valid exporter outputs from random values.  The current\n   set of TLS PRFs is
    believed to meet this objective, provided the\n   master secret is randomly generated.\n
    \  Because an exporter produces the same value if applied twice with the\n   same
    label to the same master_secret, it is critical that two EKM\n   values generated
    with the same label not be used for two different\n   purposes -- hence, the requirement
    for IANA registration.  However,\n   because exporters depend on the TLS PRF,
    it is not a threat to the\n   use of an EKM value generated from one label to
    reveal an EKM value\n   generated from another label.\n   With certain TLS cipher
    suites, the TLS master secret is not\n   necessarily unique to a single TLS session.
    \ In particular, with RSA\n   key exchange, a malicious party acting as TLS server
    in one session\n   and as TLS client in another session can cause those two sessions
    to\n   have the same TLS master secret (though the sessions must be\n   established
    simultaneously to get adequate control of the Random\n   values).  Applications
    using the EKM need to consider this in how\n   they use the EKM; in some cases,
    requiring the use of other cipher\n   suites (such as those using a Diffie-Hellman
    key exchange) may be\n   advisable.\n   Designing a secure mechanism that uses
    exporters is not necessarily\n   straightforward.  This document only provides
    the exporter mechanism,\n   but the problem of agreeing on the surrounding context
    and the\n   meaning of the information passed to and from the exporter remains.\n
    \  Any new uses of the exporter mechanism should be subject to careful\n   review.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has created a TLS Exporter Label registry for
    this purpose.  The\n   initial contents of the registry are given below:\n        Value
    \                         Reference  Note\n        -----------------------------
    \ ---------  ----\n        client finished                [RFC5246]  (1)\n        server
    finished                [RFC5246]  (1)\n        master secret                  [RFC5246]
    \ (1)\n        key expansion                  [RFC5246]  (1)\n        client EAP
    encryption          [RFC5216]\n        ttls keying material           [RFC5281]\n
    \       ttls challenge                 [RFC5281]\n   Note: (1) These entries are
    reserved and MUST NOT be used for the\n   purpose described in RFC 5705, in order
    to avoid confusion with\n   similar, but distinct, use in RFC 5246.\n   Future
    values are allocated via the RFC 5226 Specification Required\n   policy.  The
    label is a string consisting of printable ASCII\n   characters.  IANA MUST also
    verify that one label is not a prefix of\n   any other label.  For example, labels
    \"key\" or \"master secretary\" are\n   forbidden.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   Thanks to Pasi Eronen for valuable comments and for the
    contents of\n   the IANA section and Section 3.  Thanks to David McGrew for helpful\n
    \  discussion of the security considerations and to Vijay Gurbani and\n   Alfred
    Hoenes for editorial comments.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC5226]    Narten, T. and H. Alvestrand, \"Guidelines for
      Writing an\n                IANA Considerations Section in RFCs\", BCP 26, RFC
      5226,\n                May 2008.\n   [RFC5246]    Dierks, T. and E. Rescorla,
      \"The Transport Layer\n                Security (TLS) Protocol Version 1.2\",
      RFC 5246,\n                August 2008.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [DTLS-SRTP]  McGrew, D. and E. Rescorla, \"Datagram
      Transport Layer\n                Security (DTLS) Extension to Establish Keys
      for Secure\n                Real-time Transport Protocol (SRTP)\", Work in Progress,\n
      \               February 2009.\n   [RFC3711]    Baugher, M., McGrew, D., Naslund,
      M., Carrara, E., and\n                K. Norrman, \"The Secure Real-time Transport
      Protocol\n                (SRTP)\", RFC 3711, March 2004.\n   [RFC4347]    Rescorla,
      E. and N. Modadugu, \"Datagram Transport Layer\n                Security\",
      RFC 4347, April 2006.\n   [RFC5216]    Simon, D., Aboba, B., and R. Hurst, \"The
      EAP-TLS\n                Authentication Protocol\", RFC 5216, March 2008.\n
      \  [RFC5281]    Funk, P. and S. Blake-Wilson, \"Extensible Authentication\n
      \               Protocol Tunneled Transport Layer Security Authenticated\n                Protocol
      Version 0 (EAP-TTLSv0)\", RFC 5281, August 2008.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Author's Address\n   Eric Rescorla\n   RTFM, Inc.\n   2064 Edgewood Drive\n   Palo
    Alto, CA  94303\n   USA\n   EMail: ekr@rtfm.com\n"
  title: Author's Address
