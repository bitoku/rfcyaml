Abstract This document defines a data model for Access Control Lists (ACLs).
An ACL is a user ordered set of rules used to configure the forwarding behavior in a device.
Each rule is used to find a match on a packet and define actions that will be performed on the packet.
An Access Control List (ACL) is one of the basic elements used to configure device forwarding behavior.
It is used in many networking technologies such as Policy Based Routing (PBR), firewalls, etc.
An ACL is a user ordered set of rules that is used to filter traffic on a networking device.
Each rule is represented by an Access Control Entry (ACE).
Each ACE has a group of match criteria and a group of actions.
The match criteria allow for the definition of packet headers and metadata, the contents of which must match the definitions.
Packet header matches apply to fields visible in the packet such as address, Class of Service (CoS), or port number.
In case a vendor supports it, metadata matches apply to fields associated with the packet, that are not in the packet header, such as the input interface or length of the packet as received over the wire.
The actions specify what to do with the packet when the matching criteria are met.
These actions are any operations that would apply to the packet, such as counting, policing, or simply forwarding.
The list of potential actions is unbounded depending on the capabilities of the networking devices.
Access Control List is also widely known as ACL (pronounced as [ak uh l]) or Access List.
In this document, Access Control List, ACL, and Access List are used interchangeably.
The matching of filters and actions in an ACE/ACL is triggered only after the application/attachment of the ACL to an interface, a Virtual Routing and Forwarding (VRF) interface, a vty/tty session, a QoS policy, or routing protocols, amongst various other configuration attachment points.
Once attached, it is used for filtering traffic using the match criteria in the ACEs and taking appropriate action(s) that has been configured against that ACE.
In order to apply an ACL to any attachment point other than an interface, vendors would have to augment the ACL YANG model.
Definitions and Acronyms ACE: Access Control Entry ACL:
Access Control List CoS: Class of Service DSCP:
Differentiated Services Code Point ICMP:
Internet Control Message Protocol IP: Internet Protocol IPv4:
Internet Protocol version 4 IPv6:
Internet Protocol version 6 MAC:
: Transmission Control Protocol UDP: User Datagram Protocol 1.2.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
For a reference to the annotations used in the tree diagrams included in this document, please see "YANG Tree Diagrams" [RFC8340].
This document defines a YANG 1.1 data model [RFC7950] for the configuration of ACLs.
The model defines matching rules for commonly used protocols such as Ethernet, IPv4, IPv6, TCP, UDP, and ICMP.
If more protocols need to be supported in the future, this base model can be augmented.
An example of such an augmentation can be seen in Appendix A. ACL implementations in every device may vary greatly in terms of the filter constructs and actions that they support.
Therefore, this document proposes a model that can be augmented by standard extensions and vendor proprietary models.
Understanding ACL's Filters and Actions
Although different vendors have different ACL data models, there is a common understanding of what an ACL is.
A network system usually has a list of ACLs, and each ACL contains an ordered list of rules, also known as ACEs.
Each ACE has a group of match criteria and a group of actions.
The match criteria allows for definition of the contents of the packet headers or metadata, if supported by the vendor.
Packet header matching applies to fields visible in the packet such as address, CoS, or port number.
Metadata matching applies to fields associated with the packet, that are not in the packet header, such as the input interface, packet length, or source or destination prefix length.
The actions can be any sort of operation from logging to rate limiting or dropping to simply forwarding.
Actions on the first matching ACE are applied with no processing of subsequent ACEs.
The model also includes a container to hold overall operational state for each ACL and for each ACE.
One ACL can be applied to multiple targets within the device, such as the interface of a networking device, applications or features running in the device, etc.
When applied to interfaces of a networked device, distinct ACLs are defined for the ingress (input) or egress (output) interface.
This document tries to address the commonalities between all vendors and creates a common model, which can be augmented with proprietary models.
The base model is simple in design, and we hope to achieve enough flexibility for each vendor to extend the base model.
The use of feature statements in the model allows vendors to advertise match rules they are capable and willing to support.
There are two sets of feature statements a device needs to advertise.
The first set of feature statements specifies the capability of the device.
These include features such as "Device
can support matching on Ethernet headers" or "Device can support matching on IPv4 headers".
The second set of feature statements specifies the combinations of headers the device is willing to support.
These include features such as "Plain IPv6 ACL supported" or "Ethernet, IPv4 and IPv6 ACL combinations supported".
There are two YANG modules in the model.
The first module, "ietf  access control list", defines generic ACL aspects that are common to all ACLs regardless of their type or vendor.
In effect, the module can be viewed as providing a generic ACL "superclass".
It imports the second module, "ietf packet fields".
The match container in "ietf access control list" uses groupings in "ietf packet fields" to specify match fields such as port numbers or protocols.
The combination of 'if feature' checks and 'must' statements allows for the selection of relevant match fields that a user can define rules for.
If there is a need to define a new "matches" choice, such as IP Flow Information Export (IPFIX) [RFC7011], the container "matches" can be augmented.
module: ietf access control list
rw eth {match on eth}?
rw ipv6 {match on ipv6}?
rw tcp {match on tcp}?
ro ace statistics  [name] {interface stats}?
IETF Access Control List Module
The "ietf access control list" module defines the "acls" container that has a list of each "acl".
Each "acl" has information identifying the access list by a name ("name") and a list ("aces") of rules associated with the "name".
Each of the entries in the list ("aces"), indexed by the string "name", has containers defining "matches" and "actions".
The model defines several ACL types and actions in the form of identities and features.
Features are used by implementors to select the ACL types the system can support, and identities are used to validate the types that have been selected.
These types are implicitly inherited by the "ace", thus safeguarding against misconfiguration of "ace" types in an "acl".
The "matches" define criteria used to identify patterns in "ietf  packet fields".
The choice statements within the match container allow for the selection of one header within each of "l2", "l3", or "l4" headers.
The "actions" define the behavior to undertake
once a "match" has been identified.
In addition to permit and deny actions, a logging option allows for a match to be logged that can later be used to determine which rule was matched upon.
The model also defines the ability for ACLs to be attached to a particular interface.
Statistics in the ACL can be collected for an "ace" or for an "interface".
The feature statements defined for statistics can be used to determine whether statistics are being collected per "ace" or per "interface".
This module imports definitions from "Common YANG Data Types" [RFC6991] and "A YANG Data Model for Interface Management" [RFC8343].
<CODE BEGINS> file "ietf access control list@2019 03 04.yang" module ietf access control list { yang version 1.1; namespace "urn:ietf:params:xml:ns:
yang:ietf access control list"; prefix acl; import ietf yang types { prefix yang; reference "RFC 6991
; } organization "IETF NETMOD (Network Modeling) Working Group."; contact
Lisa Huang huangyi 99@yahoo.com Editor:
; description "This YANG module defines a component that describes the configuration and monitoring of Access Control Lists (ACLs).
The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119)
when, and only when, they appear in all capitals, as shown here.
2019 IETF Trust and the persons identified as the document authors.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
An ACL of type ipv4 does not contain matches on fields in the Ethernet header or the IPv6 header."
; } identity ipv6 acl type { base acl:acl base; if feature "ipv6"; description "An ACL that matches on fields from the IPv6 header (e.g., IPv6 destination address) and Layer 4 headers (e.g., TCP destination port).
An ACL of type ipv6 does not contain matches on fields in the Ethernet header or the IPv4 header."
; } identity eth acl type { base acl:acl base; if feature "eth"; description "An ACL that matches on fields in the Ethernet header, like 10/100/1000baseT or a Wi Fi Access Control List.
ipv4 acl type; if feature "mixed eth ipv4"; description "An ACL that contains a mix of entries that match on fields in Ethernet headers and in IPv4 headers.
Matching on Layer 4 header fields may also exist in the list."
; } identity mixed eth ipv6 acl type { base acl:eth acl type;
ipv6 acl type; if feature "mixed eth ipv6"; description "An ACL that contains a mix of entries that match on fields in Ethernet headers and in IPv6 headers.
Matching on Layer 4 header fields may also exist in the list."
; } identity mixed eth ipv4 ipv6 acl type { base acl:eth acl type;
ipv6 acl type; if feature "mixed eth ipv4 ipv6"; description "An ACL that contains a mix of entries that match on fields in Ethernet headers, IPv4 headers, and IPv6 headers.
This type is used to refer to an ACL type."
An implementation should provide this counter on a per interface, per ACL entry basis if possible.
If an implementation only supports ACL counters on a per  entry basis (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.
An implementation should provide this counter on a per interface, per ACL entry basis if possible.
If an implementation only supports ACL counters per entry (i.e., not broken out per interface), then the value should be equal to the aggregate count across all interfaces.
This is a top level container for Access Control Lists.
It can have one or more acl nodes."; list acl { key "name"; description "An ACL is an ordered list of ACEs.
Each ACE has a list of match criteria and a list of actions.
Since there are several kinds of ACLs implemented with different attributes for different vendors, this model accommodates customizing ACLs for each kind and for each vendor."
Indicates the primary intended type of match criteria (e.g., Ethernet, IPv4, IPv6, mixed, etc.)
used in the list instance."
The rules in this set determine what fields will be matched upon before any action is taken on them.
The rules are selected based on the feature set defined by the server and the acl type defined.
If no matches are defined in a particular container, then any packet will match that container.
set that matches IPv4 headers."
acl tcp header fields; container source port { choice source port { case range or operator { uses pf:port range or operator; description "Source port definition from range or operator."
; } description "Choice of source port definition using range/operator or a choice to support future 'case' statements, such as one enabling a group of source ports to be referenced."
; } description "Source port definition."
; } container destination port { choice destination port { case range or operator { uses pf:port range or operator; description "Destination port definition from range or operator."
; } description "Rule set that matches TCP headers."
; } container udp { if feature "match on udp"; uses pf:acl udp header fields; container source port { choice source port { case range or operator { uses pf:port range or operator; description "Source port definition from range or operator."
; } description "Choice of source port definition using range/operator or a choice to support future 'case' statements, such as one enabling a group of source ports to be referenced."
; } description "Source port definition."
; } container destination port { choice destination port { case range or operator { uses pf:port range or operator; description "Destination port definition from range or operator."
; } description "Rule set that matches UDP headers."
; } container icmp { if feature "match on icmp"; uses pf:acl icmp header fields; description "Rule set that matches ICMP headers.";
} description "Choice of TCP, UDP, or ICMP headers."
; } leaf egress interface { type if:interface ref; description "Egress interface.
This should not be used if this ACL is attached as an egress ACL (or the value should equal the interface to which the ACL is attached).
This should not be used if this ACL is attached as an ingress ACL (or the value should equal the interface to which the ACL is attached).
; leaf interface id { type if:interface ref;
description "Reference to the interface
The packet fields module defines the necessary groups for matching on fields in the packet including Ethernet, IPv4, IPv6, and transport  layer fields.
The "type" node determines which of these fields get included for any given ACL with the exception of TCP, UDP, and ICMP header fields.
Those fields can be used in conjunction with any of the above Layer 2 or Layer 3 fields.
Since the number of match criteria are very large, the base specification does not include these directly but references them by the 'uses' statement to keep the base module simple.
In case more match conditions are needed, those can be added by augmenting choices within container "matches" in the ietf access control list.yang data model.
This module imports definitions from "Common YANG Data Types" [RFC6991] and references "Internet Protocol" [RFC791], "Internet Control Message Protocol" [RFC792], "Transmission Control Protocol" [RFC793], "Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers" [RFC2474], "The Addition of Explicit Congestion Notification (ECN) to IP" [RFC3168], "IPv6 Scoped Address Architecture" [RFC4007], "IP Version 6 Addressing Architecture" [RFC4291], "
A Recommendation for IPv6 Address Text Representation" [RFC5952], and "Internet Protocol, Version 6 (IPv6) Specification" [RFC8200].
03 04.yang" module ietf packet fields { yang version 1.1; namespace "urn:ietf:params:xml:
yang:ietf packet fields"; prefix packet fields; import ietf inet types { prefix inet; reference "RFC 6991 Common YANG Data Types."
; } import ietf yang types { prefix yang; reference "RFC 6991
Lisa Huang huangyi 99@yahoo.com Editor:
; description "This YANG module defines groupings that are used by the ietf access control list YANG module.
Their usage is not limited to ietf access control list and can be used anywhere as applicable.
2019 IETF Trust and the persons identified as the document authors.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
An operator is needed only if the lower port is specified and the upper port is not specified.
The operator therefore further qualifies the lower port only."
../upper port' { error message "The lower port must be less than or equal to the upper port."
Total Length is the length of the datagram, measured in octets, including internet header and data.
In the IPv6 header field, this field is known as the Payload Length, which is the length of the IPv6 payload, i.e., the rest of the packet following the IPv6 header, in octets."
If this field contains the value zero, then the datagram must be dropped.
In IPv6, this field is known as the Hop Limit."
Refers to the protocol of the payload.
In IPv6, this field is known as 'next header', and if extension headers are present, the protocol is present in the 'upper layer' header."
In an IPv4 header field, the Internet Header Length (IHL) is the length of the internet header in 32 bit words and thus points to the beginning of the data.
Note that the minimum value for a correct header is 5."
; } leaf flags { type bits { bit reserved { position 0; description "Reserved.
; } bit more { position 2; description "Setting the value to 0 indicates this is the last fragment, and setting the value to 1 indicates more fragments are coming."
The first fragment has offset zero.
The minimum size header is 5 words and the maximum is 15 words; thus, this gives a minimum size of 20 bytes and a maximum of 60 bytes, allowing for up to 40 bytes of options in the header."
ECN Echo has a dual role, depending on the value of the SYN flag.
It indicates the following: if the SYN flag is set (1), the TCP peer is ECN capable, and if the SYN flag is clear (0), a packet with the Congestion Experienced flag set (ECN 11) in the IP header was received during normal transmission (added to the header by RFC 3168).
This serves as an indication of network congestion (or impending congestion) to the TCP sender."
; reference "RFC 3168: The Addition of Explicit Congestion Notification (ECN) to IP."
Only the first packet sent from each end should have this flag set.
Options have up to three fields: Option Kind (1 byte), Option Length (1 byte), and Option Data (variable).
The Option Kind field indicates the type of option and is the only field that is not optional.
The minimum length is 8 bytes because that is the length of the header.
The field size sets a theoretical limit of 65,535 bytes (8 byte header plus 65,527 bytes of data) for a UDP datagram.
However, the actual limit for the data length, which is imposed by the underlying IPv4 protocol, is 65,507 bytes (65,535 minus 8 byte UDP header minus 20 byte IP header).
In IPv6 jumbograms, it is possible to have UDP packets of a size greater than 65,535 bytes.
Also known as control messages."
; reference "RFC 792: Internet Control Message Protocol RFC 4443:
Also referred to as 'Message Body' in ICMPv6.
"; reference "RFC 792: Internet Control Message Protocol RFC 4443: Internet Control Message Protocol (ICMPv6) for Internet Protocol Version 6 (IPv6) Specification."
Deny tcp traffic from 192.0.2.0/24, destined to 198.51.100.0/24.
Here is the ACL configuration xml for this Access Control List:
xml version "1.0" encoding "UTF 8"?
> <destination ipv4 network>198.51.100.0/24</destination\  ipv4 network
> <source ipv4 network>192.0.2.0/24</source ipv4 network
> </matches> <actions> <forwarding>drop</forwarding> </actions> </ace
The ACL and ACEs can be described in the command line interface (CLI) as the following:
acl ipv4 sample ipv4 acl deny tcp 192.0.2.0/24
Accept all DNS traffic destined for 2001:
xml version "1.0" encoding "UTF 8"?
Port Range Usage and Other Examples
When a lower port and an upper port are both present, it represents a range between the lower port and upper port with both the lower port and upper port included.
When only a port is present, it represents a port, with the operator specifying the range.
The following XML example represents a configuration where TCP traffic from source ports 16384, 16385, 16386, and 16387 is dropped.
xml version "1.0" encoding "UTF 8"?
> <name>sample port acl</name> <type
The following XML example represents a configuration where all IPv4 ICMP echo requests are dropped.
xml version "1.0" encoding "UTF 8"?
The following XML example represents a configuration of a single port, port 21, that accepts TCP traffic.
xml version "1.0" encoding "UTF 8"?
The following XML example represents a configuration specifying all ports that are not equal to 21 that will drop TCP packets destined for those ports.
xml version "1.0" encoding "UTF 8"?
The YANG modules specified in this document define a schema for data that is designed to be accessed via network management protocol such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC8446].
The NETCONF Access Control Model (NACM)
[RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
There are a number of data nodes defined in these YANG modules that are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability: /acls/acl/aces: This list specifies all the configured access control entries on the device.
Unauthorized write access to this list can allow intruders to modify the entries so as to permit traffic that should not be permitted, or deny traffic that should be permitted.
The former may result in a DoS attack, or compromise the device.
The latter may result in a DoS attack.
The impact of an unauthorized read access of the list will allow the attacker to determine which rules are in effect, to better craft an attack.
/acl/aces/ace/actions/logging: This node specifies ability to log packets that match this ace entry.
Unauthorized write access to this node can allow intruders to enable logging on one or many ace entries, overwhelming the server in the process.
Unauthorized read access of this node can allow intruders to access logging information, which could be used to craft an attack the server.
This document registers three URIs and three YANG modules.
This document registers three URIs in the "IETF XML Registry" [RFC3688]
yang:ietf access control list URI:
yang:ietf packet fields URI: urn:ietf:params:xml:ns:
N/A; the requested URI is an XML namespace.
This document registers three YANG modules in the "YANG Module Names" registry [RFC6020].
ietf access control list Prefix: acl Reference:
RFC 8519 Name: ietf packet fields
RFC 8519 Appendix A.  Extending ACL Model Examples A.1.
Example of a Company's Proprietary Module
The "example newco acl" module is an example of a company's proprietary model that augments the "ietf acl" module.
It shows how to use 'augment' with an XML Path Language (XPath) expression to add additional match criteria, actions, and default actions for when no ACE matches are found.
All these are company proprietary extensions or system feature extensions.
"example newco acl" is just an example, and it is expected that vendors will create their own proprietary models.
module example newco acl { yang version 1.1; namespace "http://example.com/ns/example newco acl"; prefix example newco acl; import ietf access control list { prefix acl; } organization "Newco model group."
; contact "abc@newco.com"; description "This YANG module augments the IETF ACL YANG module."
The following figure is the tree diagram of example newco acl.
In this example, /ietf acl:
matches are augmented with two new choices:
protocol  payload choice and metadata.
The protocol payload choice uses a grouping with an enumeration of all supported protocol values.
Metadata matches apply to fields associated with the packet, that are not in the packet header, such as overall packet length.
In another example, /ietf acl:
actions are augmented with a new choice of actions.
example newco acl augment /acl:
:(packet length)  rw packet length?
string  :(hierarchical policer)  rw hierarchical policer?
As the Linux platform is becoming more popular than the networking platform, the Linux data model is changing.
Previously, ACLs in Linux were highly protocol specific, and different utilities were used (iptables, ip6tables, arptables, and ebtables), so each one had a separate data model.
Recently, this has changed, and a single utility, nftables, has been developed.
With a single application, it has a single data model for firewall filters, and it follows very similarly the ietf access control list module proposed in this document.
The nftables support input and output ACEs, and each ACE can be defined with match and action.
The example in Section 4.3 can be configured using nftable tool as below.
nft add table ip filter nft add chain filter input nft
add rule ip filter input ip protocol
The configuration entries added in nftable would be: table ip filter { chain input { ip protocol tcp ip saddr 192.0.2.1/24 drop } }
We can see that there are many similarities between Linux nftables and IETF ACL YANG data models and their extension models.
It should be fairly easy to do translation between the ACL YANG model described in this document and Linux nftables.
The ACL module is dependent on the definition of Ethertypes.
IEEE owns the allocation of those Ethertypes.
This model is being included here to enable the definition of those types till such time that IEEE takes up the task of publication of the model that defines those Ethertypes.
At that time, this model can be deprecated.
" module ietf ethertypes { namespace "urn:ietf:params:xml:
yang:ietf ethertypes"; prefix ethertypes; organization "IETF NETMOD (Network Modeling) Working Group."
This module contains common definitions for the Ethertype used by different modules.
It is a placeholder module, till such time that IEEE starts a project to define these Ethertypes and publishes a standard.
At that time, this module can be deprecated.
2019 IETF Trust and the persons identified as the document authors.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8519; see the RFC itself for full legal notices."
; } enum vlan { value 33024; description "VLAN tagged frame (IEEE 802.1Q) and Shortest Path
Bridging IEEE 802.1aq with Network Network Interface (NNI) compatibility.
; } enum qnx { value 33284; description "QNX Qnet.
; } enum ipv6 { value 34525; description "Internet Protocol Version 6 (IPv6).  Hex value of 0x86DD."; reference "RFC 8200: Internet Protocol, Version 6 (IPv6)
Path MTU Discovery for IP version 6."
; } enum efc { value 34824; description "Ethernet flow control using pause frames.
Used during the discovery process.
; } enum provider bridging { value 34984; description "Provider Bridging (802.1ad) and Shortest Path Bridging (801.1aq).
"; reference "IEEE 802.1ad and IEEE 802.1aq).
value 34987; description "Ethernet Powerlink.
Hex value of 0x88BA."; reference "IEC 61850."
; } enum lldp { value 35020; description "Link Layer Discovery Protocol (LLDP).
; } enum wsmp { value 35036; description "WAVE Short Message Protocol (WSMP).
; } enum homeplug av mme { value 35041; description "HomePlug AV Mobile Management Entity (MME).
; } enum mrp { value 35043; description "Media Redundancy Protocol (MRP).
Hex value of 0x88E3."; reference "IEC 62439 2."
; } enum macsec { value 35045; description "MAC Security.
Hex value of 0x88E7."; reference "IEEE 802.1ah."
; } enum cfm { value 35074; description "Connectivity Fault Management (CFM).
