- contents:
  - "         Transparent Interconnection of Lots of Links (TRILL):\n    Using Data
    Labels for Tree Selection for Multi-Destination Data\n"
  title: __initial_text__
- contents:
  - "Abstract\n   TRILL (Transparent Interconnection of Lots of Links) uses\n   distribution
    trees to deliver multi-destination frames.  Multiple\n   trees can be used by
    an ingress Routing Bridge (RBridge) for flows,\n   regardless of the VLAN, Fine-Grained
    Label (FGL), and/or multicast\n   group of the flow.  Different ingress RBridges
    may choose different\n   distribution trees for TRILL Data packets in the same
    VLAN, FGL,\n   and/or multicast group.  To avoid unnecessary link utilization,\n
    \  distribution trees should be pruned based on one or more of the\n   following:
    VLAN, FGL, or multicast destination address.  If any VLAN,\n   FGL, or multicast
    group can be sent on any tree, for typical fast-\n   path hardware, the amount
    of pruning information is multiplied by the\n   number of trees, but there is
    limited hardware capacity for such\n   pruning information.\n   This document
    specifies an optional facility to restrict the TRILL\n   Data packets sent on
    particular distribution trees by VLAN, FGL,\n   and/or multicast groups, thus
    reducing the total amount of pruning\n   information so that it can more easily
    be accommodated by fast-path\n   hardware.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7968.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Background Description .....................................3\n      1.2.
    Terminology Used in This Document ..........................4\n   2. Motivations
    .....................................................5\n   3. Tree Selection Based
    on Data Labels .............................9\n      3.1. Overview of the Mechanism
    ..................................9\n      3.2. APPsub-TLVs Supporting Tree Selection
    .....................10\n           3.2.1. The Tree and VLANs APPsub-TLV ......................11\n
    \          3.2.2. The Tree and VLANs Used APPsub-TLV .................12\n           3.2.3.
    The Tree and FGLs APPsub-TLV .......................12\n           3.2.4. The
    Tree and FGLs Used APPsub-TLV ..................13\n           3.2.5. The Tree
    and Groups APPsub-TLV .....................13\n           3.2.6. The Tree and
    Groups Used APPsub-TLV ................14\n      3.3. Detailed Processing .......................................14\n
    \     3.4. Failure Handling ..........................................15\n   4.
    Backward Compatibility .........................................17\n   5. Security
    Considerations ........................................18\n   6. IANA Considerations
    ............................................19\n   7. References .....................................................19\n
    \     7.1. Normative References ......................................19\n      7.2.
    Informative References ....................................20\n   Acknowledgments
    ...................................................21\n   Authors' Addresses ................................................21\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Background Description\n   One or more distribution trees, identified
      by their root nicknames,\n   are used to distribute multi-destination data in
      a (Transparent\n   Interconnection of Lots of Links) (TRILL) campus [RFC6325].
      \ The\n   Routing Bridge (RBridge) having the highest tree root priority\n   announces
      the total number of trees that should be computed for the\n   campus.  It may
      also specify the list of trees that RBridges need to\n   compute using the Tree
      Identifiers (TREE-RT-IDs) sub-TLV [RFC7176].\n   Every RBridge can specify the
      trees it will use for multi-destination\n   TRILL Data packets it originates
      in the Trees Used Identifiers\n   (TREE-USE-IDs) sub-TLV [RFC7176], and the
      VLANs or Fine-Grained\n   Labels (FGLs) [RFC7172] it is interested in are specified
      in\n   Interested VLANs and/or Interested Labels sub-TLVs [RFC7176].  It is\n
      \  suggested that by default the ingress RBridge uses the distribution\n   tree
      whose root is the closest [RFC6325].  The TREE-USE-IDs sub-TLV\n   is used to
      build the RPF (Reverse Path Forwarding) check table that\n   is used for RPF
      checking.  Interested VLANs and Interested Labels\n   sub-TLVs are used for
      distribution tree pruning, and the\n   multi-destination forwarding table with
      pruning information is built\n   based on that RPF check table.  To reduce unnecessary
      link loads,\n   each distribution tree should be pruned per VLAN/FGL, eliminating\n
      \  branches that have no potential receivers downstream as specified in\n   [RFC6325].
      \ Further pruning based on Layer 2 or Layer 3 multicast\n   addresses is also
      possible.\n   Defaults are provided, but how many trees are calculated, where
      the\n   tree roots are located, and which tree or trees are to be used by an\n
      \  ingress RBridge are implementation dependent.  With the increasing\n   demand
      to use TRILL in data center networks, there are some features\n   we can explore
      for multi-destination frames in the data center use\n   case.  In order to achieve
      non-blocking data forwarding, a fat tree\n   structure is often used.  Figure
      1 shows a typical data center\n   network based on the fat tree structure.  RB1
      and RB2 are aggregation\n   switches, and RB11 through RB14 are access switches.
      \ It is a common\n   practice to configure the tree roots to be at the aggregation\n
      \  switches for efficient traffic transportation.  All the ingress\n   RBridges
      that are access switches will then be equally distant from\n   all the tree
      roots.\n                             +-----+    +-----+\n                             |
      RB1 |    | RB2 |\n                             +-----+    +-----+\n                              /
      | \\\\     / /|\\\n                             /  |  \\ \\  / / | \\\n                            /
      \  |   \\  \\ /  |  \\-----+\n                           /    |    \\/  \\  |
      \       |\n                          /     |    /\\/   \\|        |\n                         /
      \ /---+---/ /\\    |\\       |\n                        /  /    |    /  \\   |
      \ \\     |\n                       /  /     |   /    \\  |    \\   |\n                      /
      \ /      |  /      \\ |      \\ |\n                   +-----+   +-----+   +-----+
      \  +-----+\n                   | RB11|   | RB12|   | RB13|   | RB14|\n                   +-----+
      \  +-----+   +-----+   +-----+\n            Figure 1: TRILL Network Based on
      Fat Tree Structure\n"
    title: 1.1.  Background Description
  - contents:
    - "1.2.  Terminology Used in This Document\n   This document uses the terminology
      from [RFC6325] and [RFC7172], some\n   of which is repeated below for convenience,
      along with some\n   additional terms listed below:\n   Campus: The name for
      a network using the TRILL protocol in the same\n      sense that a \"bridged
      LAN\" is the name for a network using\n      bridging.  In TRILL, the word \"campus\"
      has no academic\n      implication.\n   Data Label: VLAN or FGL.\n   ECMP: Equal-Cost
      Multipath [RFC6325].\n   FGL: Fine-Grained Label [RFC7172].\n   Interested Labels
      sub-TLV: Short for \"Interested Labels and Spanning\n      Tree Roots sub-TLV\"
      [RFC7176].\n   Interested VLANs sub-TLV: Short for \"Interested VLANs and Spanning\n
      \     Tree Roots sub-TLV\" [RFC7176].\n   IPTV: \"Television\" (video) over
      IP.\n   RBridge: An alternative name for a TRILL switch.\n   RPF: Reverse Path
      Forwarding.\n   TRILL: Transparent Interconnection of Lots of Links (or Tunneled\n
      \     Routing in the Link Layer).\n   TRILL switch: A device implementing the
      TRILL protocol.  Sometimes\n      called an RBridge.\n   The key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to
      be interpreted as described in RFC 2119 [RFC2119].\n"
    title: 1.2.  Terminology Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Motivations\n   In the structure of Figure 1, if we choose to put the tree
    roots at\n   RB1 and RB2, the ingress RBridge (e.g., RB11) would find more than\n
    \  one equal-cost closest tree root (i.e., RB1 and RB2).  An ingress\n   RBridge
    has two options to select the tree root for multi-destination\n   frames: choose
    one and only one as the distribution tree root, or use\n   an ECMP-like algorithm
    to balance the traffic among the multiple\n   trees whose roots are at the same
    distance from the RBridge.\n   -  For the former (one distribution tree root),
    a single tree used by\n      each ingress RBridge can have the problem of uneven
    or inefficient\n      link usage.  For example, if RB11 chooses the tree that
    is rooted\n      at RB1 as the distribution tree, the link between RB11 and RB2\n
    \     will not be used for multi-destination frames ingressed by RB11.\n   -  For
    the latter (an ECMP-like algorithm), ECMP-based tree selection\n      results
    in a linear increase in multicast forwarding table size\n      with the number
    of trees, as explained in the next paragraph.\n   A multicast forwarding table
    at an RBridge is normally used to map\n   the key of (distribution tree nickname
    + VLAN) to an index to a list\n   of ports for multicast packet replication.  The
    key used for mapping\n   is simply the tree nickname when the RBridge does not
    prune the tree.\n   The key could be the distribution tree nickname augmented
    by the FGL\n   and/or Layer 2 or 3 multicast address when the RBridge supports
    FGL\n   and/or Layer 2 or 3 pruning information.\n   For any RBridge RBn, for
    each VLAN x, if RBn is in a distribution\n   tree t used by traffic in VLAN x,
    there will be an entry of (t, x,\n   port list) in the multicast forwarding table
    on RBn.  Typically, each\n   entry contains a distinct combination of (tree nickname,
    VLAN) as the\n   lookup key.  If there are n such trees and m such VLANs, the\n
    \  multicast forwarding table size on RBn is n*m entries.  If an FGL is\n   used
    [RFC7172] and/or finer pruning is used (for example, VLAN +\n   multicast group
    address is used for pruning), the value of m\n   increases.  In the larger-scale
    data center, more trees would be\n   necessary for purposes of better load-balancing;
    this results in an\n   increased value for n.  In either case, the number of table
    entries\n   (i.e., n*m) will increase dramatically.\n   The left-hand table in
    Figure 2 shows an example of the multicast\n   forwarding table on RB11 in the
    Figure 1 topology, with two\n   distribution trees in a campus using typical fast-path
    hardware.\n             Before VLAN-Based                 After VLAN-Based\n              Tree
    Selection                    Tree Selection\n     +--------------+-----+---------+
    \ +--------------+-----+---------+\n     |tree nickname |VLAN |port list|  |tree
    nickname |VLAN |port list|\n     +--------------+-----+---------+  +--------------+-----+---------+\n
    \    |   tree 1     |  1  |         |  |   tree 1     |  1  |         |\n     +--------------+-----+---------+
    \ +--------------+-----+---------+\n     |   tree 1     |  2  |         |  |   tree
    1     |  2  |         |\n     +--------------+-----+---------+  +--------------+-----+---------+\n
    \    |   tree 1     | ... |         |  |   tree 1     | ... |         |\n     +--------------+-----+---------+
    \ +--------------+-----+---------+\n     |   tree 1     | ... |         |  |   tree
    1     | 1999|         |\n     +--------------+-----+---------+  +--------------+-----+---------+\n
    \    |   tree 1     | ... |         |  |   tree 1     | 2000|         |\n     +--------------+-----+---------+
    \ +--------------+-----+---------+\n     |   tree 1     | 4093|         |  |   tree
    2     | 2001|         |\n     +--------------+-----+---------+  +--------------+-----+---------+\n
    \    |   tree 1     | 4094|         |  |   tree 2     | 2002|         |\n     +--------------+-----+---------+
    \ +--------------+-----+---------+\n     |   tree 2     |  1  |         |  |   tree
    2     | ... |         |\n     +--------------+-----+---------+  +--------------+-----+---------+\n
    \    |   tree 2     |  2  |         |  |   tree 2     | 4093|         |\n     +--------------+-----+---------+
    \ +--------------+-----+---------+\n     |   tree 2     | ... |         |  |   tree
    2     | 4094|         |\n     +--------------+-----+---------+  +--------------+-----+---------+\n
    \    |   tree 2     | ... |         |\n     +--------------+-----+---------+\n
    \    |   tree 2     | ... |         |\n     +--------------+-----+---------+\n
    \    |   tree 2     | ... |         |\n     +--------------+-----+---------+\n
    \    |   tree 2     | 4093|         |\n     +--------------+-----+---------+\n
    \    |   tree 2     | 4094|         |\n     +--------------+-----+---------+\n
    \                  Figure 2: Multicast Forwarding Table\n             before and
    after Using VLAN-Based Tree Selection\n   The number of entries is approximately
    2*4K in this case.  If four\n   distribution trees are used in a TRILL campus
    and RBn has 4K VLANs\n   with downstream receivers, it consumes 16K table entries.
    \ The size\n   of fast-path TRILL multicast forwarding tables is typically limited\n
    \  by hardware; therefore, the table entries are a precious resource.\n   In some
    implementations, the table is shared with Layer 3 IP\n   multicast for a total
    of 16K or 8K table entries.  Therefore, we want\n   to reduce the table size consumed
    for TRILL distribution trees as\n   much as possible and at the same time maintain
    load-balancing among\n   the trees.\n   In cases where blocks of consecutive VLANs
    or FGLs can be assigned to\n   a tree, the multicast forwarding table could be
    greatly compressed if\n   entries could have a Data Label value and mask, with
    the fast-path\n   hardware doing the longest prefix matching.  But few, if any,\n
    \  fast-path implementations provide such logic.\n   A straightforward way to
    alleviate the problem of limited table\n   entries is not to prune the distribution
    tree.  However, this can\n   only be used in restricted scenarios, for the following
    reasons:\n   -  Not pruning wastes bandwidth for multi-destination packets.  There\n
    \     is normally broadcast traffic, like ARP and unknown unicast, that\n      can
    be pruned on a VLAN (or FGL) so that it is not sent down\n      branches of a
    distribution tree where it is not needed.  In\n      addition, if there is a lot
    of Layer 3 multicast traffic, no\n      pruning may result in a worst-case scenario
    where that user data\n      is unnecessarily flooded all over the campus.  The
    volume of\n      flooded data could be very large if certain applications such
    as\n      IPTV are supported.  More precise pruning, such as pruning based\n      on
    multicast groups, may be desirable in this case.\n   -  Not pruning is only useful
    at pure transit nodes.  Edge nodes\n      always need to maintain the multicast
    forwarding table with the\n      key of (tree nickname + VLAN (or FGL)), since
    the edge node needs\n      to decide whether and how to replicate the frame to
    local access\n      ports.  It is likely that edge nodes are relatively low-end\n
    \     switches with a smaller shared table size, say 4K, available.\n   -  Due
    to security concerns, VLAN-based (or FGL-based) traffic\n      isolation is a
    basic requirement in some scenarios.  No pruning\n      may increase the risk
    of leakage of the traffic.  Misbehaving\n      RBridges may take advantage of
    this leakage of traffic.\n   In addition to the concern regarding multicast table
    size, some\n   silicon does not currently support hashing-based tree nickname\n
    \  selection at the ingress RBridge but commonly uses VLAN-based tree\n   selection.
    \ If the control plane of the ingress RBridge maps the\n   incoming VLAN x to
    a tree nickname t, the data plane will always use\n   tree t for VLAN x multi-destination
    frames.  Such an ingress RBridge\n   may choose multiple trees to be used for
    load-sharing; it can use one\n   and only one tree for each VLAN.  If we make
    sure that all ingress\n   RBridges campus-wide send VLAN x multi-destination packets
    only use\n   tree t, then there would be no need to store the multicast table\n
    \  entry with the key of (tree-other-than-t, x) on any RBridge.\n   This document
    describes the TRILL control-plane support for\n   distribution tree selection
    based on a VLAN, FGL, and/or multicast\n   address to reduce the multicast forwarding
    table size.  It is\n   compatible with the silicon implementations mentioned in
    the previous\n   paragraph.\n"
  title: 2.  Motivations
- contents:
  - "3.  Tree Selection Based on Data Labels\n   Data Label (VLAN-based or FGL-based)
    tree selection can be used as a\n   distribution tree selection mechanism, especially
    when the multicast\n   forwarding table size is a concern.  This section specifies
    that\n   mechanism and how to extend it so that tree selection can be based on\n
    \  multicast groups.\n"
  - contents:
    - "3.1.  Overview of the Mechanism\n   The RBridge that has the highest priority
      to be a tree root announces\n   the tree nicknames and the Data Labels allowed
      on each tree.  Such\n   announcements of correspondence of tree to Data Label
      can be based on\n   static configuration or some predefined algorithm beyond
      the scope of\n   this document.  An ingress RBridge selects the tree-VLAN\n
      \  correspondence that it wishes to use from the list announced by the\n   highest-priority
      tree root.  It SHOULD NOT transmit VLAN x frames on\n   tree y if the highest-priority
      tree root does not say that VLAN x is\n   allowed on tree y.\n   If we make
      sure that a particular VLAN is allowed on one and only one\n   tree, we can
      keep the number of multicast forwarding table entries on\n   any RBridge fixed
      at 4K maximum (or up to 16M in the case of an FGL).\n   Take Figure 1 as an
      example, where two trees are rooted at RB1 and\n   RB2, respectively.  The highest-priority
      tree root appoints tree 1 to\n   carry VLAN 1-2000 and tree 2 to carry VLAN
      2001-4094.  With such an\n   announcement by the highest-priority tree root,
      every RBridge that\n   understands the announcement will not send VLAN 2001-4094
      traffic on\n   tree 1 and will not send VLAN 1-2000 traffic on tree 2.  That
      way, no\n   RBridge would need to store the entries for tree 1 / VLAN 2001-4094\n
      \  or tree 2 / VLAN 1-2000.  Figure 2 shows the multicast forwarding\n   table
      on an RBridge before and after we use VLAN-based tree\n   selection.  The number
      of entries is reduced by a factor f, where f\n   is the number of trees used
      in the campus.  In this example, it is\n   reduced from 2*4094 to 4094.  This
      affects both transit nodes and\n   edge nodes.  The data-plane encoding does
      not change.\n"
    title: 3.1.  Overview of the Mechanism
  - contents:
    - "3.2.  APPsub-TLVs Supporting Tree Selection\n   Six new APPsub-TLVs that can
      be carried in the TRILL GENINFO TLV\n   [RFC7357] in Extended Level 1 Flooding
      Scope (E-L1FS) FS-Link State\n   Protocol Data Units (FS-LSPs) [RFC7780] are
      defined below.  The first\n   four can be considered analogous to finer-granularity
      versions of the\n   TREE-RT-IDs sub-TLV and the TREE-USE-IDs sub-TLV [RFC7176].
      \ Two\n   APPsub-TLVs supporting VLAN-based tree selection are specified in\n
      \  Sections 3.2.1 and 3.2.2.  They are used by the highest-priority tree\n   root
      to announce the allowed VLANs on each tree in the campus and by\n   an ingress
      RBridge to announce the tree-VLAN correspondence that it\n   selects from the
      list announced by the highest-priority tree root.\n   Two APPsub-TLVs supporting
      FGL-based tree selection are specified in\n   Sections 3.2.3 and 3.2.4 for the
      same purpose.  Sections 3.2.5 and\n   3.2.6 define two APPsub-TLVs to support
      finer granularity in\n   selecting trees based on multicast groups rather than
      Data Labels.\n    New APPsub-TLVs              Description\n    =======================
      \     =============\n    Tree and VLANs               announcement by the highest-priority\n
      \                                tree root of the VLANs allowed per tree\n    Tree
      and VLANs Used          tree-VLAN correspondence that an\n                                 ingress
      RBridge selects\n    Tree and FGLs                announcement by the highest-priority\n
      \                                tree root of the FGLs allowed per tree\n    Tree
      and FGLs Used           tree-FGL correspondence that an\n                                 ingress
      RBridge selects\n    Tree and Groups              announcement by the highest-priority\n
      \                                tree root of the multicast groups\n                                 allowed
      on each tree\n    Tree and Groups Used         tree and multicast group correspondence\n
      \                                that an ingress RBridge selects\n"
    - contents:
      - "3.2.1.  The Tree and VLANs APPsub-TLV\n   The RBridge that is the highest-priority
        tree root announces the\n   VLANs allowed on each tree with the Tree and VLANs
        (TREE-VLANs)\n   APPsub-TLV.  Multiple instances of this APPsub-TLV may be
        carried.\n   The same tree nicknames may occur in multiple Tree-VLAN RECORDs\n
        \  within the same APPsub-TLV or across multiple APPsub-TLVs.  The\n   APPsub-TLV
        format is as follows:\n                               1 1 1 1 1 1\n           0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         |   Type = 11                   |         (2 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         |   Length                      |         (2 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \         |   Tree-VLAN RECORD (1)                    |  (6 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \         |   .................                       |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \         |   Tree-VLAN RECORD (N)                    |  (6 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \  where each Tree-VLAN RECORD is of the form:\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           |            Nickname                   |  (2 bytes)\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           | RESV  |        Start.VLAN             |  (2 bytes)\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           | RESV  |        End.VLAN               |  (2 bytes)\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  o  Type: TRILL GENINFO APPsub-TLV type; set to 11 (TREE-VLANs).\n   o  Length:
        6*n bytes, where there are n Tree-VLAN RECORDs.  Thus, the\n      value of
        Length can be used to determine n.  If Length is not a\n      multiple of
        6, the APPsub-TLV is corrupt and MUST be ignored.\n   o  Nickname: The nickname
        identifying the distribution tree by its\n      root.\n   o  RESV: 4 bits
        that MUST be sent as zero and ignored on receipt.\n   o  Start.VLAN, End.VLAN:
        These fields are the VLAN IDs of the allowed\n      VLAN range on the tree,
        inclusive.  To specify a single VLAN, the\n      VLAN's ID appears as both
        the start and end VLAN.  If End.VLAN is\n      less than Start.VLAN, the Tree-VLAN
        RECORD MUST be ignored.\n"
      title: 3.2.1.  The Tree and VLANs APPsub-TLV
    - contents:
      - "3.2.2.  The Tree and VLANs Used APPsub-TLV\n   This APPsub-TLV has the same
        structure as the TREE-VLANs APPsub-TLV\n   specified in Section 3.2.1.  The
        differences are that its APPsub-TLV\n   type is set to 12 (TREE-VLAN-USE)
        and the tree-VLAN correspondences\n   in the Tree-VLAN RECORDs listed are
        those correspondences that the\n   originating RBridge wants to use for multi-destination
        packets.  This\n   APPsub-TLV is used by an ingress RBridge to distribute
        the tree-VLAN\n   correspondence that it selects from the list announced by
        the\n   highest-priority tree root.\n"
      title: 3.2.2.  The Tree and VLANs Used APPsub-TLV
    - contents:
      - "3.2.3.  The Tree and FGLs APPsub-TLV\n   The RBridge that is the highest-priority
        tree root can use the Tree\n   and FGLs (TREE-FGLs) APPsub-TLV to announce
        the FGLs allowed on each\n   tree.  Multiple instances of this APPsub-TLV
        may be carried.  The\n   same tree nicknames may occur in the multiple Tree-FGL
        RECORDs within\n   the same APPsub-TLV or across multiple APPsub-TLVs.  Its
        format is as\n   follows:\n                             1 1 1 1 1 1\n         0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \       |   Type = 13                   |         (2 bytes)\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \       |   Length                      |         (2 bytes)\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \       |   Tree-FGL RECORD (1)                     |  (8 bytes)\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \       |   .................                       |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \       |   Tree-FGL RECORD (N)                     |  (8 bytes)\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+\n
        \  where each Tree-FGL RECORD is of the form:\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |            Nickname                   |         (2 bytes)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+\n
        \      |            Start.FGL                          | (3 bytes)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+\n
        \      |            End.FGL                            | (3 bytes)\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+\n
        \  o  Type: TRILL GENINFO APPsub-TLV type; set to 13 (TREE-FGLs).\n   o  Length:
        8*n bytes, where there are n Tree-FGL RECORDs.  Thus, the\n      value of
        Length can be used to determine n.  If Length is not a\n      multiple of
        8, the APPsub-TLV is corrupt and MUST be ignored.\n   o  Nickname: The nickname
        identifying the distribution tree by\n      its root.\n   o  RESV: 4 bits
        that MUST be sent as zero and ignored on receipt.\n   o  Start.FGL, End.FGL:
        These fields are the FGL IDs of the allowed\n      FGL range on the tree,
        inclusive.  To specify a single FGL, the\n      FGL's ID appears as both the
        start and end FGL.  If End.FGL is\n      less than Start.FGL, the Tree-FGL
        RECORD MUST be ignored.\n"
      title: 3.2.3.  The Tree and FGLs APPsub-TLV
    - contents:
      - "3.2.4.  The Tree and FGLs Used APPsub-TLV\n   This APPsub-TLV has the same
        structure as the TREE-FGLs APPsub-TLV\n   specified in Section 3.2.3.  The
        differences are that its APPsub-TLV\n   type is set to 14 (TREE-FGL-USE) and
        the Tree-FGL correspondences in\n   the Tree-FGL RECORDs listed are those
        that the originating RBridge\n   wants to use for multi-destination packets.
        \ This APPsub-TLV is used\n   by an ingress RBridge to distribute the tree-FGL
        correspondence that\n   it selects from the list announced by the highest-priority
        tree root.\n"
      title: 3.2.4.  The Tree and FGLs Used APPsub-TLV
    - contents:
      - "3.2.5.  The Tree and Groups APPsub-TLV\n   Tree selection based on Data Labels
        is easily extended to tree\n   selection based on Data Label + Layer 2 or
        3 multicast groups.  We\n   can appoint multicast group 1 in VLAN 10 to tree
        1 and appoint\n   group 2 in VLAN 10 to tree 2 for better load-sharing.\n
        \  The RBridge that is the highest-priority tree root can announce the\n   multicast
        groups allowed on each tree for each Data Label with the\n   Tree and Groups
        (TREE-GROUPs) APPsub-TLV.  Multiple instances of this\n   APPsub-TLV may be
        carried.  The APPsub-TLV format is as follows:\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \        |   Type = 15                   |  (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \        |   Length                      |  (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \        |   Tree Nickname               |  (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \        |   Group Sub-Sub-TLVs             (variable)\n         +-+-+-+-+-+-+-+-+-+....\n
        \  o  Type: TRILL GENINFO APPsub-TLV type; set to 15 (TREE-GROUPs).\n   o
        \ Length: 2 + the length of the Group Sub-Sub TLVs that are\n      included.\n
        \  o  Nickname: The nickname identifying the distribution tree by its\n      root.\n
        \  o  Group Sub-Sub-TLVs: Zero or more of the TLV structures that are\n      allowed
        as sub-TLVs of the Group Address (GADDR) TLV [RFC7176].\n      Each such TLV
        structure specifies a multicast group and either a\n      VLAN or FGL.  Although
        these TLV structures are considered\n      sub-TLVs when they appear inside
        a GADDR TLV, they are technically\n      sub-sub-TLVs when they appear inside
        a TREE-GROUPs APPsub-TLV that\n      is in turn inside a TRILL GENINFO TLV
        [RFC7357].\n"
      title: 3.2.5.  The Tree and Groups APPsub-TLV
    - contents:
      - "3.2.6.  The Tree and Groups Used APPsub-TLV\n   The Tree and Groups Used
        (TREE-GROUPs-USE) APPsub-TLV has the same\n   structure as the TREE-GROUPs
        APPsub-TLV specified in Section 3.2.5.\n   The differences are that its APPsub-TLV
        type is set to 16\n   (TREE-GROUPs-USE) and the Tree Nickname and Group sub-sub-TLVs
        listed\n   in this APPsub-TLV are those that the originating RBridge wants
        to\n   use for multi-destination packets.  This APPsub-TLV is used by an\n
        \  ingress RBridge to distribute the tree-group correspondence that it\n   selects
        from the list announced by the highest-priority tree root.\n"
      title: 3.2.6.  The Tree and Groups Used APPsub-TLV
    title: 3.2.  APPsub-TLVs Supporting Tree Selection
  - contents:
    - "3.3.  Detailed Processing\n   The highest-priority tree root RBridge MUST include
      all the necessary\n   tree-related sub-TLVs defined in [RFC7176] as usual in
      its E-L1FS\n   FS-LSP and MAY include the TREE-VLANs APPsub-TLV and/or the TREE-FGLs\n
      \  APPsub-TLV in its E-L1FS FS-LSP [RFC7780].  In this way, it MAY\n   indicate
      that each VLAN and/or FGL is only allowed on one or some\n   other number of
      trees less than the number of trees being calculated\n   in the campus in order
      to save table space in the fast-path\n   forwarding hardware.\n   An ingress
      RBridge that understands the TREE-VLANs APPsub-TLV SHOULD\n   select the tree-VLAN
      correspondences that it wishes to use and put\n   them in TREE-VLAN-USE APPsub-TLVs.
      \ If there are multiple tree\n   nicknames announced in a TREE-VLANs APPsub-TLV
      for VLAN x, the\n   ingress RBridge chooses one of them if it supports this
      feature.  For\n   example, the ingress RBridge may choose the closest (minimum-cost)\n
      \  root among them.  How to make such a choice is out of scope for this\n   document.
      \ It may be desirable to have some fixed algorithm to\n   make sure that all
      ingress RBridges choose the same tree for VLAN x\n   in this case.  Any single
      Data Label that the ingress RBridge is\n   interested in should be related to
      only one tree ID in a\n   TREE-VLAN-USE APPsub-TLV to minimize the multicast
      forwarding table\n   size on other RBridges, but as long as the Data Label is
      related to\n   less than all the trees being calculated, it will reduce the
      burden\n   on the forwarding table size.\n   When an ingress RBridge encapsulates
      a multi-destination frame for\n   Data Label x, it SHOULD use a tree nickname
      that it selected\n   previously in a TREE-VLAN-USE or TREE-FGL-USE APPsub-TLV
      for\n   Data Label x.  However, that may not be possible because either\n   (1)
      the RBridge may not have advertised such TREE-VLAN-USE or\n   TREE-FGL-USE APPsub-TLVs,
      in which case it can use any tree that has\n   been advertised as permitted
      for the Data Label by the\n   highest-priority tree root RBridge, or (2) the
      tree or trees it\n   advertised might be unavailable due to failures.\n   If
      RBridge RBn does not perform pruning, it builds the multicast\n   forwarding
      table as specified in [RFC6325].\n   If RBn prunes the distribution tree based
      on VLANs, RBn uses the\n   information received in TREE-VLAN-USE APPsub-TLVs
      to mark the set of\n   VLANs reachable downstream for each adjacency and for
      each related\n   tree.  If RBn prunes the distribution tree based on FGLs, RBn
      uses\n   the information received in TRILL-FGL-USE APPsub-TLVs to mark the\n
      \  set of FGLs reachable downstream for each adjacency and for each\n   related
      tree.\n   Logically, an ingress RBridge that does not support VLAN-based or\n
      \  FGL-based tree selection is equivalent to the one that supports it\n   but
      uses it in such a way as to gain no advantage; for example, it\n   announces
      the use of all trees for all VLANs and FGLs.\n"
    title: 3.3.  Detailed Processing
  - contents:
    - "3.4.  Failure Handling\n   This section discusses failure scenarios for a distribution
      tree root\n   for the case where that tree root is not the highest-priority
      root\n   and the case where it is the highest-priority root.  This section\n
      \  also discusses some other transient error conditions.\n   Failure of a tree
      root that is not the highest-priority tree root:\n      It is the responsibility
      of the highest-priority tree root to\n      inform other RBridges of any change
      in the allowed tree-VLAN\n      correspondence.  When the highest-priority tree
      root learns that\n      the root of tree t has failed, it should reassign the
      VLANs\n      allowed on tree t to other trees or to a tree replacing the\n      failed
      one.\n   Failure of the highest-priority tree root: It is suggested that the\n
      \     tree root of second-highest priority be pre-configured with the\n      proper
      knowledge of the tree-VLAN correspondence allowed when the\n      highest-priority
      tree root fails.  The information announced by\n      the RBridge that has the
      second-highest priority to be a tree root\n      would be in the link state
      of all RBridges but would not take\n      effect unless the RBridge noticed
      the failure of the\n      highest-priority tree root.  When the highest-priority
      tree root\n      fails, the tree root that formerly had second-highest priority\n
      \     will become the highest-priority tree root of the campus.  When an\n      RBridge
      notices the failure of the original highest-priority tree\n      root, it can
      immediately use the stored information announced by\n      the tree root that
      originally had second-highest priority.  It is\n      suggested that the tree-VLAN
      correspondence information be\n      pre-configured on the tree root of second-highest
      priority to be\n      the same as that on the highest-priority tree root for
      the trees\n      other than the highest-priority tree itself.  This can minimize\n
      \     the change to multicast forwarding tables in the case of\n      highest-priority
      tree root failure.  For a large campus, it may\n      make sense to pre-configure
      this information in a similar way on\n      the third-priority, fourth-priority,
      or even lower-priority tree\n      root RBridges.\n   In some transient conditions,
      or in the case of a misbehaving\n   highest-priority tree root, an ingress RBridge
      may encounter the\n   following scenarios:\n   -  No tree has been announced
      for which VLAN x frames are allowed.\n   -  An ingress RBridge is supposed to
      transmit VLAN x frames on\n      tree t, but the root of tree t is no longer
      reachable.\n   For the second case, an ingress RBridge may choose another reachable\n
      \  tree root that allows VLAN x frames according to the highest-priority\n   tree
      root announcement.  If there is no such tree available, then it\n   is the same
      as the first case above.  The ingress RBridge should then\n   be \"downgraded\"
      to a conventional RBridge with behavior as specified\n   in [RFC6325].  A timer
      should be set to allow the temporary transient\n   stage to complete before
      the change of the responsive tree or the\n   downgrade takes effect.  The value
      of the timer should be set to at\n   least the LSP flooding time of the campus.\n"
    title: 3.4.  Failure Handling
  title: 3.  Tree Selection Based on Data Labels
- contents:
  - "4.  Backward Compatibility\n   RBridges MUST include the TREE-USE-IDs and INT-VLAN
    sub-TLVs in their\n   LSPs when required by [RFC6325] whether or not they support
    the new\n   TREE-VLAN-USE or TREE-FGL-USE APPsub-TLVs specified by this document.\n
    \  RBridges that understand the new TREE-VLAN-USE APPsub-TLV sent from\n   another
    RBridge RBn should use it to build the multicast forwarding\n   table and ignore
    the TREE-USE-IDs and INT-VLAN sub-TLVs sent from the\n   same RBridge.  TREE-USE-IDs
    and INT-VLAN sub-TLVs are still useful\n   for some purposes other than building
    the multicast forwarding table\n   (e.g., building an RPF table, spanning tree
    root notification).  If\n   the RBridge does not receive TREE-VLAN-USE APPsub-TLVs
    from RBn, it\n   uses the conventional way described in [RFC6325] to build the\n
    \  multicast forwarding table.\n   For example, there are two distribution trees,
    tree 1 and tree 2, in\n   the campus.  RB1 and RB2 are RBridges that use the new
    APPsub-TLVs\n   described in this document.  RB3 is an old RBridge that is compatible\n
    \  with [RFC6325].  Assume that RB2 is interested in VLANs 10 and 11 and\n   RB3
    is interested in VLANs 100 and 101.  Hence, RB1 receives\n   ((tree 1, VLAN 10),
    (tree 2, VLAN 11)) as a TREE-VLAN-USE APPsub-TLV\n   and (tree 1, tree 2) as a
    TREE-USE-IDs sub-TLV from RB2 on port x.\n   Also, RB1 receives (tree 1) as a
    TREE-USE-IDs sub-TLV and no\n   TREE-VLAN-USE APPsub-TLV from RB3 on port y.  RB2
    and RB3 announce\n   their interested VLANs in an INT-VLAN sub-TLV as usual.  RB1
    will\n   then build the entry of (tree 1, VLAN 10, port x) and\n   (tree 2, VLAN
    11, port x) based on RB2's LSP and the mechanism\n   specified in this document.
    \ RB1 also builds entries of\n   (tree 1, VLAN 100, port y), (tree 1, VLAN 101,
    port y),\n   (tree 2, VLAN 100, port y), and (tree 2, VLAN 101, port y) based
    on\n   RB3's LSP in the conventional way.\n   The multicast forwarding table on
    RB1 with a merged entry would be\n   like the following:\n                 +--------------+-----+---------+\n
    \                |tree nickname |VLAN |port list|\n                 +--------------+-----+---------+\n
    \                |   tree 1     |  10 |    x    |\n                 +--------------+-----+---------+\n
    \                |   tree 1     | 100 |    y    |\n                 +--------------+-----+---------+\n
    \                |   tree 1     | 101 |    y    |\n                 +--------------+-----+---------+\n
    \                |   tree 2     |  11 |    x    |\n                 +--------------+-----+---------+\n
    \                |   tree 2     | 100 |    y    |\n                 +--------------+-----+---------+\n
    \                |   tree 2     | 101 |    y    |\n                 +--------------+-----+---------+\n
    \  As expected, that table is not as small as the one where every\n   RBridge
    supports the new TREE-VLAN-USE APPsub-TLVs.  In a hybrid\n   campus, the worst
    case would be where the number of entries is equal\n   to the number of entries
    required by the current practice that does\n   not support VLAN-based tree selection.
    \ Such an extreme case happens\n   when the set of interested VLANs from the new
    RBridges is a subset of\n   the set of interested VLANs from the old RBridges.\n
    \  Tree selection based on the Data Label and multicast group is\n   compatible
    with the current practice.  Its effectiveness increases\n   with more RBridges
    supporting this feature in the TRILL campus.\n"
  title: 4.  Backward Compatibility
- contents:
  - "5.  Security Considerations\n   This document does not change the general RBridge
    security\n   considerations of the TRILL base protocol.  The APPsub-TLVs specified\n
    \  can be secured using the IS-IS authentication feature [RFC5310].  See\n   Section
    6 of [RFC6325] for general TRILL security considerations.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has assigned six new TRILL APPsub-TLV types
    from the range less\n   than 255, as specified in Section 3, and updated the \"TRILL\n
    \  APPsub-TLV Types under IS-IS TLV 251 Application Identifier 1\"\n   registry
    on\n   <http://www.iana.org/assignments/trill-parameters/>, as shown below.\n
    \    Type   Name of APPsub-TLV         Reference\n     ----   -----------------------
    \   -------------------------\n      11    Tree and VLANs             Section
    3.2.1 of RFC 7968\n      12    Tree and VLANs Used        Section 3.2.2 of RFC
    7968\n      13    Tree and FGLs              Section 3.2.3 of RFC 7968\n      14
    \   Tree and FGLs Used         Section 3.2.4 of RFC 7968\n      15    Tree and
    Groups            Section 3.2.5 of RFC 7968\n      16    Tree and Groups Used
    \      Section 3.2.6 of RFC 7968\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC6325]  Perlman, R., Eastlake 3rd, D., Dutt, D., Gai, S., and A.\n              Ghanwani,
      \"Routing Bridges (RBridges): Base Protocol\n              Specification\",
      RFC 6325, DOI 10.17487/RFC6325, July 2011,\n              <http://www.rfc-editor.org/info/rfc6325>.\n
      \  [RFC7172]  Eastlake 3rd, D., Zhang, M., Agarwal, P., Perlman, R., and\n              D.
      Dutt, \"Transparent Interconnection of Lots of Links\n              (TRILL):
      Fine-Grained Labeling\", RFC 7172,\n              DOI 10.17487/RFC7172, May
      2014,\n              <http://www.rfc-editor.org/info/rfc7172>.\n   [RFC7176]
      \ Eastlake 3rd, D., Senevirathne, T., Ghanwani, A., Dutt,\n              D.,
      and A. Banerjee, \"Transparent Interconnection of Lots\n              of Links
      (TRILL) Use of IS-IS\", RFC 7176,\n              DOI 10.17487/RFC7176, May 2014,\n
      \             <http://www.rfc-editor.org/info/rfc7176>.\n   [RFC7357]  Zhai,
      H., Hu, F., Perlman, R., Eastlake 3rd, D., and O.\n              Stokes, \"Transparent
      Interconnection of Lots of Links\n              (TRILL): End Station Address
      Distribution Information\n              (ESADI) Protocol\", RFC 7357, DOI 10.17487/RFC7357,\n
      \             September 2014, <http://www.rfc-editor.org/info/rfc7357>.\n   [RFC7780]
      \ Eastlake 3rd, D., Zhang, M., Perlman, R., Banerjee, A.,\n              Ghanwani,
      A., and S. Gupta, \"Transparent Interconnection\n              of Lots of Links
      (TRILL): Clarifications, Corrections, and\n              Updates\", RFC 7780,
      DOI 10.17487/RFC7780, February 2016,\n              <http://www.rfc-editor.org/info/rfc7780>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC5310]  Bhatia, M., Manral, V., Li, T.,
      Atkinson, R., White, R.,\n              and M. Fanto, \"IS-IS Generic Cryptographic\n
      \             Authentication\", RFC 5310, DOI 10.17487/RFC5310,\n              February
      2009, <http://www.rfc-editor.org/info/rfc5310>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   The authors wish to thank David M. Bond, Liangliang Ma, Naveen
    Nimmu,\n   Radia Perlman, Rakesh Kumar, Robert Sparks, Daniele Ceccarelli, and\n
    \  Sunny Rajagopalan for their valuable comments and contributions.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Yizhou Li\n   Huawei Technologies\n   101 Software Avenue\n
    \  Nanjing  210012\n   China\n   Phone: +86-25-56624629\n   Email: liyizhou@huawei.com\n
    \  Donald Eastlake 3rd\n   Huawei Technologies\n   155 Beaver Street\n   Milford,
    MA  01757\n   United States of America\n   Phone: +1-508-333-2270\n   Email: d3e3e3@gmail.com\n
    \  Weiguo Hao\n   Huawei Technologies\n   101 Software Avenue\n   Nanjing  210012\n
    \  China\n   Phone: +86-25-56623144\n   Email: haoweiguo@huawei.com\n   Hao Chen\n
    \  Huawei Technologies\n   101 Software Avenue\n   Nanjing  210012\n   China\n
    \  Email: philips.chenhao@huawei.com\n   Somnath Chatterjee\n   Cisco Systems\n
    \  SEZ Unit, Cessna Business Park\n   Outer Ring Road\n   Bangalore  560087\n
    \  India\n   Email: somnath.chatterjee01@gmail.com\n"
  title: Authors' Addresses
