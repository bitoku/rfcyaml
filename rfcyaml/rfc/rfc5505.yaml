- title: __initial_text__
  contents:
  - '               Principles of Internet Host Configuration

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes principles of Internet host configuration.\n\
    \   It covers issues relating to configuration of Internet-layer\n   parameters,\
    \ as well as parameters affecting higher-layer protocols.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. Internet Host Configuration ................................4\n    \
    \       1.2.1. Internet-Layer Configuration ........................4\n      \
    \     1.2.2. Higher-Layer Configuration ..........................6\n   2. Principles\
    \ ......................................................7\n      2.1. Minimize\
    \ Configuration .....................................7\n      2.2. Less Is More\
    \ ...............................................7\n      2.3. Minimize Diversity\
    \ .........................................8\n      2.4. Lower-Layer Independence\
    \ ...................................9\n      2.5. Configuration Is Not Access\
    \ Control .......................11\n   3. Additional Discussion ..........................................12\n\
    \      3.1. Reliance on General-Purpose Mechanisms ....................12\n  \
    \    3.2. Relationship between IP Configuration and Service\n           Discovery\
    \ .................................................13\n           3.2.1. Fate\
    \ Sharing .......................................14\n      3.3. Discovering Names\
    \ versus Addresses ........................15\n      3.4. Dual-Stack Issues .........................................15\n\
    \      3.5. Relationship between Per-Interface and Per-Host\n           Configuration\
    \ .............................................16\n   4. Security Considerations\
    \ ........................................17\n      4.1. Configuration Authentication\
    \ ..............................18\n   5. Informative References .........................................19\n\
    \   Appendix A. Acknowledgments .......................................24\n  \
    \ Appendix B. IAB Members at the Time of This Writing ...............24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes principles of Internet host [STD3]\n\
    \   configuration.  It covers issues relating to configuration of\n   Internet-layer\
    \ parameters, as well as parameters affecting higher-\n   layer protocols.\n \
    \  In recent years, a number of architectural questions have arisen, for\n   which\
    \ we provide guidance to protocol developers:\n   o The protocol layers and general\
    \ approaches that are most\n     appropriate for configuration of various parameters.\n\
    \   o The relationship between parameter configuration and service\n     discovery.\n\
    \   o The relationship between per-interface and per-host configuration.\n   o\
    \ The relationship between network access authentication and host\n     configuration.\n\
    \   o The desirability of supporting self-configuration of parameters or\n   \
    \  avoiding parameter configuration altogether.\n   o The role of link-layer protocols\
    \ and tunneling protocols in\n     Internet host configuration.\n   The role of\
    \ the link-layer and tunneling protocols is particularly\n   important, since\
    \ it can affect the properties of a link as seen by\n   higher layers (for example,\
    \ whether privacy extensions [RFC4941] are\n   available to applications).\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   link\n      A communication facility or medium over which\
    \ nodes can\n      communicate at the link layer, i.e., the layer immediately\
    \ below\n      IP.  Examples are Ethernets (simple or bridged), Point-to-Point\n\
    \      Protocol (PPP) links, X.25, Frame Relay, or ATM networks as well\n    \
    \  as Internet- or higher-layer \"tunnels\", such as tunnels over IPv4\n     \
    \ or IPv6 itself.\n   on link\n      An address that is assigned to an interface\
    \ on a specified link.\n   off link\n      The opposite of \"on link\"; an address\
    \ that is not assigned to any\n      interfaces on the specified link.\n   mobility\
    \ agent\n      Either a home agent or a foreign agent [RFC3344] [RFC3775].\n"
- title: 1.2.  Internet Host Configuration
  contents:
  - '1.2.  Internet Host Configuration

    '
- title: 1.2.1.  Internet-Layer Configuration
  contents:
  - "1.2.1.  Internet-Layer Configuration\n   Internet-layer configuration is defined\
    \ as the configuration required\n   to support the operation of the Internet layer.\
    \  This includes\n   configuration of per-interface and per-host parameters, including\
    \ IP\n   address(es), subnet prefix(es), default gateway(s), mobility\n   agent(s),\
    \ boot service configuration and other parameters:\n   IP address(es)\n      Internet\
    \ Protocol (IP) address configuration includes both\n      configuration of link-scope\
    \ addresses as well as global addresses.\n      Configuration of IP addresses\
    \ is a vital step, since practically\n      all of IP networking relies on the\
    \ assumption that hosts have IP\n      address(es) associated with (each of) their\
    \ active network\n      interface(s).  Used as the source address of an IP packet,\
    \ these\n      IP addresses indicate the sender of the packet; used as the\n \
    \     destination address of a unicast IP packet, these IP addresses\n      indicate\
    \ the intended receiver.\n      The only common example of IP-based protocols\
    \ operating without an\n      IP address involves address configuration, such\
    \ as the use of\n      DHCPv4 [RFC2131] to obtain an address.  In this case, by\n\
    \      definition, DHCPv4 is operating before the host has an IPv4\n      address,\
    \ so the DHCP protocol designers had the choice of either\n      using IP without\
    \ an IP address, or not using IP at all.  The\n      benefits of making IPv4 self-reliant,\
    \ configuring itself using its\n      own IPv4 packets, instead of depending on\
    \ some other protocol,\n      outweighed the drawbacks of having to use IP in\
    \ this constrained\n      mode.  Use of IP for purposes other than address configuration\
    \ can\n      safely assume that the host will have one or more IP addresses,\n\
    \      which may be self-configured link-local addresses [RFC3927]\n      [RFC4862],\
    \ or other addresses configured via DHCP or other means.\n   Subnet prefix(es)\n\
    \      Once a subnet prefix is configured on an interface, hosts with an\n   \
    \   IP address can exchange unicast IP packets directly with on-link\n      hosts\
    \ within the same subnet prefix.\n   Default gateway(s)\n      Once a default\
    \ gateway is configured on an interface, hosts with\n      an IP address can send\
    \ unicast IP packets to that gateway for\n      forwarding to off-link hosts.\n\
    \   Mobility agent(s)\n      While Mobile IPv4 [RFC3344] and Mobile IPv6 [RFC3775]\
    \ include\n      their own mechanisms for locating home agents, it is also possible\n\
    \      for mobile nodes to utilize dynamic home agent configuration.\n   Boot\
    \ service configuration\n      Boot service configuration is defined as the configuration\n\
    \      necessary for a host to obtain and perhaps also to verify an\n      appropriate\
    \ boot image.  This is appropriate for disk-less hosts\n      looking to obtain\
    \ a boot image via mechanisms such as the Trivial\n      File Transfer Protocol\
    \ (TFTP) [RFC1350], Network File System (NFS)\n      [RFC3530], and Internet Small\
    \ Computer Systems Interface (iSCSI)\n      [RFC3720] [RFC4173].  It also may\
    \ be useful in situations where it\n      is necessary to update the boot image\
    \ of a host that supports a\n      disk, such as in the Preboot Execution Environment\
    \ [PXE]\n      [RFC4578].  While strictly speaking, boot services operate above\n\
    \      the Internet layer, where boot service is used to obtain the\n      Internet-layer\
    \ code, it may be considered part of Internet-layer\n      configuration.  While\
    \ boot service parameters may be provided on a\n      per-interface basis, loading\
    \ and verification of a boot image\n      affects behavior of the host as a whole.\n\
    \   Other IP parameters\n      Internet-layer parameter configuration also includes\
    \ configuration\n      of per-host parameters (e.g., hostname) and per-interface\n\
    \      parameters (e.g., IP Time-To-Live (TTL) to use in outgoing\n      packets,\
    \ enabling/disabling of IP forwarding and source routing,\n      and Maximum Transmission\
    \ Unit (MTU)).\n"
- title: 1.2.2.  Higher-Layer Configuration
  contents:
  - "1.2.2.  Higher-Layer Configuration\n   Higher-layer configuration is defined\
    \ as the configuration required\n   to support the operation of other components\
    \ above the Internet-\n   layer.  This includes, for example:\n   Name Service\
    \ Configuration\n      The configuration required for the host to resolve names.\
    \  This\n      includes configuration of the addresses of name resolution\n  \
    \    servers, including IEN 116 [IEN116], Domain Name System (DNS),\n      Windows\
    \ Internet Name Service (WINS), Internet Storage Name\n      Service (iSNS) [RFC4171]\
    \ [RFC4174], and Network Information\n      Service (NIS) servers [RFC3898], and\
    \ the setting of name\n      resolution parameters such as the DNS domain and\
    \ search list\n      [RFC3397], the NetBIOS node type, etc.  It may also include\
    \ the\n      transmission or setting of the host's own name.  Note that link-\n\
    \      local name resolution services (such as NetBIOS [RFC1001], Link-\n    \
    \  Local Multicast Name Resolution (LLMNR) [RFC4795], and multicast\n      DNS\
    \ (mDNS) [mDNS]) typically do not require configuration.\n      Once the host\
    \ has completed name service configuration, it is\n      capable of resolving\
    \ names using name resolution protocols that\n      require configuration.  This\
    \ not only allows the host to\n      communicate with off-link hosts whose IP\
    \ addresses are not known,\n      but, to the extent that name services requiring\
    \ configuration are\n      utilized for service discovery, also enables the host\
    \ to discover\n      services available on the network or elsewhere.  While name\n\
    \      service parameters can be provided on a per-interface basis, their\n  \
    \    configuration will typically affect behavior of the host as a\n      whole.\n\
    \   Time Service Configuration\n      Time service configuration includes configuration\
    \ of servers for\n      protocols such as the Simple Network Time Protocol (SNTP)\
    \ and the\n      Network Time Protocol (NTP).  Since accurate determination of\
    \ the\n      time may be important to operation of the applications running on\n\
    \      the host (including security services), configuration of time\n      servers\
    \ may be a prerequisite for higher-layer operation.\n      However, it is typically\
    \ not a requirement for Internet-layer\n      configuration.  While time service\
    \ parameters can be provided on a\n      per-interface basis, their configuration\
    \ will typically affect\n      behavior of the host as a whole.\n   Other service\
    \ configuration\n      This can include discovery of additional servers and devices,\
    \ such\n      as printers, Session Initiation Protocol (SIP) proxies, etc.  This\n\
    \      configuration will typically apply to the entire host.\n"
- title: 2.  Principles
  contents:
  - "2.  Principles\n   This section describes basic principles of Internet host\n\
    \   configuration.\n"
- title: 2.1.  Minimize Configuration
  contents:
  - "2.1.  Minimize Configuration\n   Anything that can be configured can be misconfigured.\
    \  Section 3.8 of\n   \"Architectural Principles of the Internet\" [RFC1958] states:\
    \ \"Avoid\n   options and parameters whenever possible.  Any options and parameters\n\
    \   should be configured or negotiated dynamically rather than manually.\"\n \
    \  That is, to minimize the possibility of configuration errors,\n   parameters\
    \ should be automatically computed (or at least have\n   reasonable defaults)\
    \ whenever possible.  For example, the Path\n   Maximum Transmission Unit (PMTU)\
    \ can be discovered, as described in\n   \"Packetization Layer Path MTU Discovery\"\
    \ [RFC4821], \"TCP Problems\n   with Path MTU Discovery\" [RFC2923], \"Path MTU\
    \ discovery\" [RFC1191],\n   and \"Path MTU Discovery for IP version 6\" [RFC1981].\n\
    \   Having a protocol design with many configurable parameters increases\n   the\
    \ possibilities for misconfiguration of those parameters, resulting\n   in failures\
    \ or other sub-optimal operation.  Eliminating or reducing\n   configurable parameters\
    \ helps lessen this risk.  Where configurable\n   parameters are necessary or\
    \ desirable, protocols can reduce the risk\n   of human error by making these\
    \ parameters self-configuring, such as\n   by using capability negotiation within\
    \ the protocol, or by automated\n   discovery of other hosts that implement the\
    \ same protocol.\n"
- title: 2.2.  Less Is More
  contents:
  - "2.2.  Less Is More\n   The availability of standardized, simple mechanisms for\
    \ general-\n   purpose Internet host configuration is highly desirable.\n   \"\
    Architectural Principles of the Internet\" [RFC1958] states,\n   \"Performance\
    \ and cost must be considered as well as functionality\"\n   and \"Keep it simple.\
    \  When in doubt during design, choose the\n   simplest solution.\"\n   To allow\
    \ protocol support in many types of devices, it is important\n   to minimize the\
    \ footprint requirement.  For example, IP-based\n   protocols are used on a wide\
    \ range of devices, from supercomputers to\n   small low-cost devices running\
    \ \"embedded\" operating systems.  Since\n   the resources (e.g., memory and code\
    \ size) available for host\n   configuration may be very small, it is desirable\
    \ for a host to be\n   able to configure itself in as simple a manner as possible.\n\
    \   One interesting example is IP support in preboot execution\n   environments.\
    \  Since by definition boot configuration is required in\n   hosts that have not\
    \ yet fully booted, it is often necessary for pre-\n   boot code to be executed\
    \ from Read Only Memory (ROM), with minimal\n   available memory.  Many hosts\
    \ do not have enough space in this ROM\n   for even a simple implementation of\
    \ TCP, so in the Preboot Execution\n   Environment (PXE) the task of obtaining\
    \ a boot image is performed\n   using the User Datagram Protocol over IP (UDP/IP)\
    \ [RFC768] instead.\n   This is one reason why Internet-layer configuration mechanisms\n\
    \   typically depend only on IP and UDP.  After obtaining the boot image,\n  \
    \ the host will have the full facilities of TCP/IP available to it,\n   including\
    \ support for reliable transport protocols, IPsec, etc.\n   In order to reduce\
    \ complexity, it is desirable for Internet-layer\n   configuration mechanisms\
    \ to avoid dependencies on higher layers.\n   Since embedded devices may be severely\
    \ constrained on how much code\n   they can fit within their ROM, designing a\
    \ configuration mechanism in\n   such a way that it requires the availability\
    \ of higher-layer\n   facilities may make that configuration mechanism unusable\
    \ in such\n   devices.  In fact, it cannot even be guaranteed that all Internet-\n\
    \   layer facilities will be available.  For example, the minimal version\n  \
    \ of IP in a host's boot ROM may not implement IP fragmentation and\n   reassembly.\n"
- title: 2.3.  Minimize Diversity
  contents:
  - "2.3.  Minimize Diversity\n   The number of host configuration mechanisms should\
    \ be minimized.\n   Diversity in Internet host configuration mechanisms presents\
    \ several\n   problems:\n   Interoperability\n      As configuration diversity\
    \ increases, it becomes likely that a\n      host will not support the configuration\
    \ mechanism(s) available on\n      the network to which it has attached, creating\
    \ interoperability\n      problems.\n   Footprint\n      For maximum interoperability,\
    \ a host would need to implement all\n      configuration mechanisms used on all\
    \ the link layers it supports.\n      This increases the required footprint, a\
    \ burden for embedded\n      devices.  It also leads to lower quality, since testing\
    \ resources\n      (both formal testing, and real-world operational use) are spread\n\
    \      more thinly -- the more different configuration mechanisms a\n      device\
    \ supports, the less testing each one is likely to undergo.\n   Redundancy\n \
    \     To support diversity in host configuration mechanisms, operators\n     \
    \ would need to support multiple configuration services to ensure\n      that\
    \ hosts connecting to their networks could configure\n      themselves.  This\
    \ represents an additional expense for little\n      benefit.\n   Latency\n  \
    \    As configuration diversity increases, hosts supporting multiple\n      configuration\
    \ mechanisms may spend increasing effort to determine\n      which mechanism(s)\
    \ are supported.  This adds to configuration\n      latency.\n   Conflicts\n \
    \     Whenever multiple mechanisms are available, it is possible that\n      multiple\
    \ configurations will be returned.  To handle this, hosts\n      would need to\
    \ merge potentially conflicting configurations.  This\n      would require conflict-resolution\
    \ logic, such as ranking of\n      potential configuration sources, increasing\
    \ implementation\n      complexity.\n   Additional traffic\n      To limit configuration\
    \ latency, hosts may simultaneously attempt\n      to obtain configuration by\
    \ multiple mechanisms.  This can result\n      in increasing on-the-wire traffic,\
    \ both from use of multiple\n      mechanisms as well as from retransmissions\
    \ within configuration\n      mechanisms not implemented on the network.\n   Security\n\
    \      Support for multiple configuration mechanisms increases the attack\n  \
    \    surface without any benefit.\n"
- title: 2.4.  Lower-Layer Independence
  contents:
  - "2.4.  Lower-Layer Independence\n   \"Architectural Principles of the Internet\"\
    \ [RFC1958] states,\n   \"Modularity is good.  If you can keep things separate,\
    \ do so.\"\n   It is becoming increasingly common for hosts to support multiple\n\
    \   network access mechanisms, including dialup, wireless, and wired\n   local\
    \ area networks; wireless metropolitan and wide area networks;\n   etc.  The proliferation\
    \ of network access mechanisms makes it\n   desirable for hosts to be able to\
    \ configure themselves on multiple\n   networks without adding configuration code\
    \ specific to each new link\n   layer.\n   As a result, it is highly desirable\
    \ for Internet host configuration\n   mechanisms to be independent of the underlying\
    \ lower layer.  That is,\n   only the link-layer protocol (whether it be a physical\
    \ link or a\n   virtual tunnel link) should be explicitly aware of link-layer\n\
    \   parameters (although those link-layer parameters may be configured by\n  \
    \ general Internet-layer mechanisms).  Introduction of lower-layer\n   dependencies\
    \ increases the likelihood of interoperability problems\n   and adds Internet-layer\
    \ configuration mechanisms that hosts need to\n   implement.\n   Lower-layer dependencies\
    \ can be best avoided by keeping Internet host\n   configuration above the link\
    \ layer, thereby enabling configuration to\n   be handled for any link layer that\
    \ supports IP.  In order to provide\n   media independence, Internet host configuration\
    \ mechanisms should be\n   link-layer protocol independent.\n   While there are\
    \ examples of Internet-layer configuration within the\n   link layer (such as\
    \ in PPP IPv4CP [RFC1332] and \"Mobile radio\n   interface Layer 3 specification;\
    \ Core network protocols; Stage 3\n   (Release 5)\" [3GPP-24.008]), this approach\
    \ has disadvantages.  These\n   include the extra complexity of implementing different\
    \ mechanisms on\n   different link layers and the difficulty in adding new higher-layer\n\
    \   parameters that would require defining a mechanism in each link-layer\n  \
    \ protocol.\n   For example, \"PPP Internet Protocol Control Protocol Extensions\
    \ for\n   Name Server Addresses\" [RFC1877] was developed prior to the\n   definition\
    \ of the DHCPINFORM message in \"Dynamic Host Configuration\n   Protocol\" [RFC2131];\
    \ at that time, Dynamic Host Configuration\n   Protocol (DHCP) servers had not\
    \ been widely implemented on access\n   devices or deployed in service provider\
    \ networks.  While the design\n   of IPv4CP was appropriate in 1992, it should\
    \ not be taken as an\n   example that new link-layer technologies should emulate.\
    \  Indeed, in\n   order to \"actively advance PPP's most useful extensions to\
    \ full\n   standard, while defending against further enhancements of\n   questionable\
    \ value\", \"IANA Considerations for the Point-to-Point\n   Protocol (PPP)\" [RFC3818]\
    \ changed the allocation of PPP numbers\n   (including IPv4CP extensions) so as\
    \ to no longer be \"first come first\n   served\".\n   In IPv6, where link-layer-independent\
    \ mechanisms such as stateless\n   autoconfiguration [RFC4862] and stateless DHCPv6\
    \ [RFC3736] are\n   available, PPP IPv6CP [RFC5072] configures an Interface-Identifier\n\
    \   that is similar to a Media Access Control (MAC) address.  This\n   enables\
    \ PPP IPv6CP to avoid duplicating DHCPv6 functionality.\n   However, Internet\
    \ Key Exchange Version 2 (IKEv2) [RFC4306] utilizes\n   the same approach as PPP\
    \ IPv4CP by defining a Configuration Payload\n   for Internet host configuration\
    \ for both IPv4 and IPv6.  While the\n   IKEv2 approach reduces the number of\
    \ packet exchanges, \"Dynamic Host\n   Configuration Protocol (DHCPv4) Configuration\
    \ of IPsec Tunnel Mode\"\n   [RFC3456] points out that leveraging DHCP has advantages\
    \ in terms of\n   address management integration, address pool management,\n \
    \  reconfiguration, and fail-over.\n   Extensions to link-layer protocols for\
    \ the purpose of Internet-,\n   transport-, or application-layer configuration\
    \ (including server\n   configuration) should be avoided.  Such extensions can\
    \ negatively\n   affect the properties of a link as seen by higher layers.  For\n\
    \   example, if a link-layer protocol (or tunneling protocol) configures\n   individual\
    \ IPv6 addresses and precludes using any other addresses,\n   then applications\
    \ that want to use privacy extensions [RFC4941] may\n   not function well.  Similar\
    \ issues may arise for other types of\n   addresses, such as Cryptographically\
    \ Generated Addresses [RFC3972].\n   Avoiding lower-layer dependencies is desirable\
    \ even where the lower\n   layer is link independent.  For example, while the\
    \ Extensible\n   Authentication Protocol (EAP) may be run over any link satisfying\
    \ its\n   requirements (see Section 3.1 of [RFC3748]), many link layers do not\n\
    \   support EAP and therefore Internet-layer configuration mechanisms\n   that\
    \ depend on EAP would not be usable on links that support IP but\n   not EAP.\n"
- title: 2.5.  Configuration Is Not Access Control
  contents:
  - "2.5.  Configuration Is Not Access Control\n   Network access authentication and\
    \ authorization is a distinct problem\n   from Internet host configuration.  Therefore,\
    \ network access\n   authentication and authorization is best handled independently\
    \ of the\n   Internet and higher-layer configuration mechanisms.\n   Having an\
    \ Internet- or higher-layer protocol authenticate clients is\n   appropriate to\
    \ prevent resource exhaustion of a scarce resource on\n   the server (such as\
    \ IP addresses or prefixes), but not for preventing\n   hosts from obtaining access\
    \ to a link.  If the user can manually\n   configure the host, requiring authentication\
    \ in order to obtain\n   configuration parameters (such as an IP address) has\
    \ little value.\n   Network administrators who wish to control access to a link\
    \ can\n   better achieve this using technologies like Port-Based Network Access\n\
    \   Control [IEEE-802.1X].  Note that client authentication is not\n   required\
    \ for Stateless DHCPv6 [RFC3736] since it does not result in\n   allocation of\
    \ any limited resources on the server.\n"
- title: 3.  Additional Discussion
  contents:
  - '3.  Additional Discussion

    '
- title: 3.1.  Reliance on General-Purpose Mechanisms
  contents:
  - "3.1.  Reliance on General-Purpose Mechanisms\n   Protocols should either be self-configuring\
    \ (especially where fate\n   sharing is important), or use general-purpose configuration\n\
    \   mechanisms (such as DHCP or a service discovery protocol, as noted in\n  \
    \ Section 3.2).  The choice should be made taking into account the\n   architectural\
    \ principles discussed in Section 2.\n   Taking into account the general-purpose\
    \ configuration mechanisms\n   currently available, we see little need for development\
    \ of additional\n   general-purpose configuration mechanisms.\n   When defining\
    \ a new host parameter, protocol designers should first\n   consider whether configuration\
    \ is indeed necessary (see Section 2.1).\n   If configuration is necessary, in\
    \ addition to considering fate\n   sharing (see Section 3.2.1), protocol designers\
    \ should consider:\n   1. The organizational implications for administrators.\
    \  For example,\n      routers and servers are often administered by different\
    \ sets of\n      individuals, so that configuring a router with server parameters\n\
    \      may require cross-group collaboration.\n   2. Whether the need is to configure\
    \ a set of interchangeable servers\n      or to select a particular server satisfying\
    \ a set of criteria.\n      See Section 3.2.\n   3. Whether IP address(es) should\
    \ be configured, or name(s).  See\n      Section 3.3.\n   4. If IP address(es)\
    \ are configured, whether IPv4 and IPv6 addresses\n      should be configured\
    \ simultaneously or separately.  See Section\n      3.4.\n   5. Whether the parameter\
    \ is a per-interface or a per-host parameter.\n      For example, configuration\
    \ protocols such as DHCP run on a per-\n      interface basis and hence are more\
    \ appropriate for per-interface\n      parameters.\n   6. How per-interface configuration\
    \ affects host-wide behavior.  For\n      example, whether the host should select\
    \ a subset of the per-\n      interface configurations, or whether the configurations\
    \ are to\n      merged, and if so, how this is done.  See Section 3.5.\n"
- title: 3.2.  Relationship between IP Configuration and Service Discovery
  contents:
  - "3.2.  Relationship between IP Configuration and Service Discovery\n   Higher-layer\
    \ configuration often includes configuring server\n   addresses.  The question\
    \ arises as to how this differs from \"service\n   discovery\" as provided by\
    \ Service Discovery protocols such as\n   \"Service Location Protocol, Version\
    \ 2\" (SLPv2) [RFC2608] or \"DNS-\n   Based Service Discovery\" (DNS-SD) [DNS-SD].\n\
    \   In Internet host configuration mechanisms such as DHCP, if multiple\n   server\
    \ instances are provided, they are considered interchangeable.\n   For example,\
    \ in a list of time servers, the servers are considered\n   interchangeable because\
    \ they all provide the exact same service --\n   telling you the current time.\
    \  In a list of local caching DNS\n   servers, the servers are considered interchangeable\
    \ because they all\n   should give you the same answer to any DNS query.  In service\n\
    \   discovery protocols, on the other hand, a host desires to find a\n   server\
    \ satisfying a particular set of criteria, which may vary by\n   request.  When\
    \ printing a document, it is not the case that any\n   printer will do.  The speed,\
    \ capabilities, and physical location of\n   the printer matter to the user.\n\
    \   Information learned via DHCP is typically learned once, at boot time,\n  \
    \ and after that may be updated only infrequently (e.g., on DHCP lease\n   renewal),\
    \ if at all.  This makes DHCP appropriate for information\n   that is relatively\
    \ static and unchanging over these time intervals.\n   Boot-time discovery of\
    \ server addresses is appropriate for service\n   types where there are a small\
    \ number of interchangeable servers that\n   are of interest to a large number\
    \ of clients.  For example, listing\n   time servers in a DHCP packet is appropriate\
    \ because an organization\n   may typically have only two or three time servers,\
    \ and most hosts\n   will be able to make use of that service.  Listing all the\
    \ printers\n   or file servers at an organization is a lot less useful, because\
    \ the\n   list may contain hundreds or thousands of entries, and on a given day\n\
    \   a given user may not use any of the printers in that list.\n   Service discovery\
    \ protocols can support discovery of servers on the\n   Internet, not just those\
    \ within the local administrative domain.  For\n   example, see \"Remote Service\
    \ Discovery in the Service Location\n   Protocol (SLP) via DNS SRV\" [RFC3832]\
    \ and DNS-Based Service Discovery\n   [DNS-SD].  Internet host configuration mechanisms\
    \ such as DHCP, on\n   the other hand, typically assume the server or servers\
    \ in the local\n   administrative domain contain the authoritative set of information.\n\
    \   For the service discovery problem (i.e., where the criteria varies on\n  \
    \ a per-request basis, even from the same host), protocols should\n   either be\
    \ self-discovering (if fate sharing is critical), or use a\n   general-purpose\
    \ service discovery mechanism.\n   In order to avoid a dependency on multicast\
    \ routing, it is necessary\n   for a host to either restrict discovery to services\
    \ on the local link\n   or to discover the location of a Directory Agent (DA).\
    \  Since the DA\n   may not be available on the local link, service discovery\
    \ beyond the\n   local link is typically dependent on a mechanism for configuring\
    \ the\n   DA address or name.  As a result, service discovery protocols can\n\
    \   typically not be relied upon for obtaining basic Internet-layer\n   configuration,\
    \ although they can be used to obtain higher-layer\n   configuration parameters.\n"
- title: 3.2.1.  Fate Sharing
  contents:
  - "3.2.1.  Fate Sharing\n   If a server (or set of servers) is needed to get a set\
    \ of\n   configuration parameters, \"fate sharing\" (Section 2.3 of [RFC1958])\n\
    \   is preserved if those parameters are ones that cannot be usefully\n   used\
    \ without those servers being available.  In this case,\n   successfully obtaining\
    \ those parameters via other means has little\n   benefit if they cannot be used\
    \ because the required servers are not\n   available.  The possibility of incorrect\
    \ information being configured\n   is minimized if there is only one machine that\
    \ is authoritative for\n   the information (i.e., there is no need to keep multiple\n\
    \   authoritative servers in sync).  For example, learning default\n   gateways\
    \ via Router Advertisements provides perfect fate sharing.\n   That is, gateway\
    \ addresses can be obtained if and only if they can\n   actually be used.  Similarly,\
    \ obtaining DNS server configuration from\n   a DNS server would provide fate\
    \ sharing since the configuration would\n   only be obtainable if the DNS server\
    \ were available.\n   While fate sharing is a desirable property of a configuration\n\
    \   mechanism, in some situations fate sharing may not be possible.  When\n  \
    \ utilized to discover services on the local link, service discovery\n   protocols\
    \ typically provide for fate sharing, since hosts providing\n   service information\
    \ typically also provide the services.  However,\n   this is no longer the case\
    \ when service discovery is assisted by a\n   Directory Agent (DA).  First of\
    \ all, the DA's list of operational\n   servers may not be current, so it is possible\
    \ that the DA may provide\n   clients with service information that is out of\
    \ date.  For example, a\n   DA's response to a client's service discovery query\
    \ may contain stale\n   information about servers that are no longer operational.\
    \  Similarly,\n   recently introduced servers might not yet have registered themselves\n\
    \   with the DA.  Furthermore, the use of a DA for service discovery also\n  \
    \ introduces a dependency on whether the DA is operational, even though\n   the\
    \ DA is typically not involved in the delivery of the service.\n   Similar limitations\
    \ exist for other server-based configuration\n   mechanisms such as DHCP.  Typically\
    \ DHCP servers do not check for the\n   liveness of the configuration information\
    \ they provide, and do not\n   discover new configuration information automatically.\
    \  As a result,\n   there is no guarantee that configuration information will\
    \ be current.\n   Section 3.3 of \"IPv6 Host Configuration of DNS Server Information\n\
    \   Approaches\" [RFC4339] discusses the use of well-known anycast\n   addresses\
    \ for discovery of DNS servers.  The use of anycast addresses\n   enables fate\
    \ sharing, even where the anycast address is provided by\n   an unrelated server.\
    \  However, in order to be universally useful,\n   this approach would require\
    \ allocation of one or more well-known\n   anycast addresses for each service.\
    \  Configuration of more than one\n   anycast address is desirable to allow the\
    \ client to fail over faster\n   than would be possible from routing protocol\
    \ convergence.\n"
- title: 3.3.  Discovering Names vs. Addresses
  contents:
  - "3.3.  Discovering Names vs. Addresses\n   In discovering servers other than name\
    \ resolution servers, it is\n   possible to either discover the IP addresses of\
    \ the server(s), or to\n   discover names, each of which may resolve to a list\
    \ of addresses.\n   It is typically more efficient to obtain the list of addresses\n\
    \   directly, since this avoids the extra name resolution steps and\n   accompanying\
    \ latency.  On the other hand, where servers are mobile,\n   the name-to-address\
    \ binding may change, requiring a fresh set of\n   addresses to be obtained. \
    \ Where the configuration mechanism does not\n   support fate sharing (e.g., DHCP),\
    \ providing a name rather than an\n   address can simplify operations, assuming\
    \ that the server's new\n   address is manually or automatically updated in the\
    \ DNS; in this\n   case, there is no need to re-do parameter configuration, since\
    \ the\n   name is still valid.  Where fate sharing is supported (e.g., service\n\
    \   discovery protocols), a fresh address can be obtained by re-\n   initiating\
    \ parameter configuration.\n   In providing the IP addresses for a set of servers,\
    \ it is desirable\n   to distinguish which IP addresses belong to which servers.\
    \  If a\n   server IP address is unreachable, this enables the host to try the\
    \ IP\n   address of another server, rather than another IP address of the same\n\
    \   server, in case the server is down.  This can be enabled by\n   distinguishing\
    \ which addresses belong to the same server.\n"
- title: 3.4.  Dual-Stack Issues
  contents:
  - "3.4.  Dual-Stack Issues\n   One use for learning a list of interchangeable server\
    \ addresses is\n   for fault tolerance, in case one or more of the servers are\n\
    \   unresponsive.  Hosts will typically try the addresses in turn, only\n   attempting\
    \ to use the second and subsequent addresses in the list if\n   the first one\
    \ fails to respond quickly enough.  In such cases, having\n   the list sorted\
    \ in order of expected likelihood of success will help\n   clients get results\
    \ faster.  For hosts that support both IPv4 and\n   IPv6, it is desirable to obtain\
    \ both IPv4 and IPv6 server addresses\n   within a single list.  Obtaining IPv4\
    \ and IPv6 addresses in separate\n   lists, without indicating which server(s)\
    \ they correspond to,\n   requires the host to use a heuristic to merge the lists.\n\
    \   For example, assume there are two servers, A and B, each with one\n   IPv4\
    \ address and one IPv6 address.  If the first address the host\n   should try\
    \ is (say) the IPv6 address of server A, then the second\n   address the host\
    \ should try, if the first one fails, would generally\n   be the IPv4 address\
    \ of server B.  This is because the failure of the\n   first address could be\
    \ due to either server A being down, or some\n   problem with the host's IPv6\
    \ address, or a problem with connectivity\n   to server A.  Trying the IPv4 address\
    \ next is preferred since the\n   reachability of the IPv4 address is independent\
    \ of all potential\n   failure causes.\n   If the list of IPv4 server addresses\
    \ were obtained separately from\n   the list of IPv6 server addresses, a host\
    \ trying to merge the lists\n   would not know which IPv4 addresses belonged to\
    \ the same server as\n   the IPv6 address it just tried.  This can be solved either\
    \ by\n   explicitly distinguishing which addresses belong to which server or,\n\
    \   more simply, by configuring the host with a combined list of both\n   IPv4\
    \ and IPv6 addresses.  Note that the same issue can arise with any\n   mechanism\
    \ (e.g., DHCP, DNS, etc.) for obtaining server IP addresses.\n   Configuring a\
    \ combined list of both IPv4 and IPv6 addresses gives the\n   configuration mechanism\
    \ control over the ordering of addresses, as\n   compared with configuring a name\
    \ and allowing the host resolver to\n   determine the address list ordering. \
    \ See \"Dynamic Host Configuration\n   Protocol (DHCP): IPv4 and IPv6 Dual-Stack\
    \ Issues\" [RFC4477] for more\n   discussion of dual-stack issues in the context\
    \ of DHCP.\n"
- title: 3.5.  Relationship between Per-Interface and Per-Host Configuration
  contents:
  - "3.5.  Relationship between Per-Interface and Per-Host Configuration\n   Parameters\
    \ that are configured or acquired on a per-interface basis\n   can affect behavior\
    \ of the host as a whole.  Where only a single\n   configuration can be applied\
    \ to a host, the host may need to\n   prioritize the per-interface configuration\
    \ information in some way\n   (e.g., most trusted to least trusted).  If the host\
    \ needs to merge\n   per-interface configuration to produce a host-wide configuration,\
    \ it\n   may need to take the union of the per-host configuration parameters\n\
    \   and order them in some way (e.g., highest speed interface to lowest\n   speed\
    \ interface).  Which procedure is to be applied and how this is\n   accomplished\
    \ may vary depending on the parameter being configured.\n   Examples include:\n\
    \   Boot service configuration\n      While boot service configuration can be\
    \ provided on multiple\n      interfaces, a given host may be limited in the number\
    \ of boot\n      loads that it can handle simultaneously.  For example, a host\
    \ not\n      supporting virtualization may only be capable of handling a single\n\
    \      boot load at a time, or a host capable of supporting N virtual\n      machines\
    \ may only be capable of handling up to N simultaneous boot\n      loads.  As\
    \ a result, a host may need to select which boot load(s)\n      it will act on,\
    \ out of those configured on a per-interface basis.\n      This requires that\
    \ the host prioritize them (e.g., most to least\n      trusted).\n   Name service\
    \ configuration\n      While name service configuration is provided on a per-interface\n\
    \      basis, name resolution configuration typically will affect\n      behavior\
    \ of the host as a whole.  For example, given the\n      configuration of DNS\
    \ server addresses and searchlist parameters on\n      each interface, the host\
    \ determines what sequence of name service\n      queries is to be sent on which\
    \ interfaces.\n   Since the algorithms used to determine per-host behavior based\
    \ on\n   per-interface configuration can affect interoperability, it is\n   important\
    \ for these algorithms to be understood by implementers.  We\n   therefore recommend\
    \ that documents defining per-interface mechanisms\n   for acquiring per-host\
    \ configuration (e.g., DHCP or IPv6 Router\n   Advertisement options) include\
    \ guidance on how to deal with multiple\n   interfaces.  This may include discussions\
    \ of the following items:\n   1. Merging.  How are per-interface configurations\
    \ combined to produce\n      a per-host configuration? Is a single configuration\
    \ selected, or\n      is the union of the configurations taken?\n   2. Prioritization.\
    \  Are the per-interface configurations prioritized\n      as part of the merge\
    \ process?  If so, what are some of the\n      considerations to be taken into\
    \ account in prioritization?\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Secure IP configuration presents a number of\
    \ challenges.  In addition\n   to denial-of-service and man-in-the-middle attacks,\
    \ attacks on\n   configuration mechanisms may target particular parameters.  For\n\
    \   example, attackers may target DNS server configuration in order to\n   support\
    \ subsequent phishing or pharming attacks such as those\n   described in \"New\
    \ trojan in mass DNS hijack\" [DNSTrojan].  A number\n   of issues exist with\
    \ various classes of parameters, as discussed in\n   Section 2.6, Section 4.2.7\
    \ of \"IPv6 Neighbor Discovery (ND) Trust\n   Models and Threats\" [RFC3756],\
    \ Section 1.1 of \"Authentication for\n   DHCP Messages\" [RFC3118], and Section\
    \ 23 of \"Dynamic Host\n   Configuration Protocol for IPv6 (DHCPv6)\" [RFC3315].\
    \  Given the\n   potential vulnerabilities, hosts often restrict support for DHCP\n\
    \   options to the minimum set required to provide basic TCP/IP\n   configuration.\n\
    \   Since boot configuration determines the boot image to be run by the\n   host,\
    \ a successful attack on boot configuration could result in an\n   attacker gaining\
    \ complete control over a host.  As a result, it is\n   particularly important\
    \ that boot configuration be secured.\n   Approaches to boot configuration security\
    \ are described in\n   \"Bootstrapping Clients using the Internet Small Computer\
    \ System\n   Interface (iSCSI) Protocol\" [RFC4173] and \"Preboot Execution\n\
    \   Environment (PXE) Specification\" [PXE].\n"
- title: 4.1.  Configuration Authentication
  contents:
  - "4.1.  Configuration Authentication\n   The techniques available for securing\
    \ Internet-layer configuration\n   are limited.  While it is technically possible\
    \ to perform a very\n   limited subset of IP networking operations without an\
    \ IP address, the\n   capabilities are severely restricted.  A host without an\
    \ IP address\n   cannot receive conventional unicast IP packets, only IP packets\
    \ sent\n   to the broadcast or a multicast address.  Configuration of an IP\n\
    \   address enables the use of IP fragmentation; packets sent from the\n   unknown\
    \ address cannot be reliably reassembled, since fragments from\n   multiple hosts\
    \ using the unknown address might be reassembled into a\n   single IP packet.\
    \  Without an IP address, it is not possible to take\n   advantage of security\
    \ facilities such as IPsec, specified in\n   \"Security Architecture for the Internet\
    \ Protocol\" [RFC4301] or\n   Transport Layer Security (TLS) [RFC5246].  As a\
    \ result, configuration\n   security is typically implemented within the configuration\
    \ protocols\n   themselves.\n   PPP [RFC1661] does not support secure negotiation\
    \ within IPv4CP\n   [RFC1332] or IPv6CP [RFC5072], enabling an attacker with access\
    \ to\n   the link to subvert the negotiation.  In contrast, IKEv2 [RFC4306]\n\
    \   provides encryption, integrity, and replay protection for\n   configuration\
    \ exchanges.\n   Where configuration packets are only expected to originate on\n\
    \   particular links or from particular hosts, filtering can help control\n  \
    \ configuration spoofing.  For example, a wireless access point usually\n   has\
    \ no reason to forward broadcast DHCP DISCOVER packets to its\n   wireless clients,\
    \ and usually should drop any DHCP OFFER packets\n   received from those wireless\
    \ clients, since, generally speaking,\n   wireless clients should be requesting\
    \ addresses from the network, not\n   offering them.  To prevent spoofing, communication\
    \ between the DHCP\n   relay and servers can be authenticated and integrity protected\
    \ using\n   a mechanism such as IPsec.\n   Internet-layer secure configuration\
    \ mechanisms include SEcure\n   Neighbor Discovery (SEND) [RFC3971] for IPv6 stateless\
    \ address\n   autoconfiguration [RFC4862], or DHCP authentication for stateful\n\
    \   address configuration.  DHCPv4 [RFC2131] initially did not include\n   support\
    \ for security; this was added in \"Authentication for DHCP\n   Messages\" [RFC3118].\
    \  DHCPv6 [RFC3315] included security support.\n   However, DHCP authentication\
    \ is not widely implemented for either\n   DHCPv4 or DHCPv6.\n   Higher-layer\
    \ configuration can make use of a wider range of security\n   techniques.  When\
    \ DHCP authentication is supported, higher-layer\n   configuration parameters\
    \ provided by DHCP can be secured.  However,\n   even if a host does not support\
    \ DHCPv6 authentication, higher-layer\n   configuration via Stateless DHCPv6 [RFC3736]\
    \ can still be secured\n   with IPsec.\n   Possible exceptions can exist where\
    \ security facilities are not\n   available until later in the boot process. \
    \ It may be difficult to\n   secure boot configuration even once the Internet\
    \ layer has been\n   configured, if security functionality is not available until\
    \ after\n   boot configuration has been completed.  For example, it is possible\n\
    \   that Kerberos, IPsec, or TLS will not be available until later in the\n  \
    \ boot process; see \"Bootstrapping Clients using the Internet Small\n   Computer\
    \ System Interface (iSCSI) Protocol\" [RFC4173] for discussion.\n   Where public\
    \ key cryptography is used to authenticate and integrity-\n   protect configuration,\
    \ hosts need to be configured with trust anchors\n   in order to validate received\
    \ configuration messages.  For a node\n   that visits multiple administrative\
    \ domains, acquiring the required\n   trust anchors may be difficult.\n"
- title: 5.  Informative References
  contents:
  - "5.  Informative References\n   [3GPP-24.008] 3GPP TS 24.008 V5.8.0, \"Mobile\
    \ radio interface Layer 3\n                 specification; Core network protocols;\
    \ Stage 3 (Release\n                 5)\", June 2003.\n   [DNSTrojan]   Goodin,\
    \ D., \"New trojan in mass DNS hijack\", The\n                 Register, December\
    \ 5, 2008,\n                 http://www.theregister.co.uk/2008/12/05/\n      \
    \           new_dnschanger_hijacks/\n   [IEN116]      J. Postel, \"Internet Name\
    \ Server\", IEN 116, August\n                 1979, http://www.ietf.org/rfc/ien/ien116.txt\n\
    \   [IEEE-802.1X] Institute of Electrical and Electronics Engineers,\n       \
    \          \"Local and Metropolitan Area Networks: Port-Based\n              \
    \   Network Access Control\", IEEE Standard 802.1X-2004,\n                 December\
    \ 2004.\n   [DNS-SD]      Cheshire, S., and M. Krochmal, \"DNS-Based Service\n\
    \                 Discovery\", Work in Progress, September 2008.\n   [mDNS]  \
    \      Cheshire, S. and M. Krochmal, \"Multicast DNS\", Work in\n            \
    \     Progress, September 2008.\n   [PXE]         Henry, M. and M. Johnston, \"\
    Preboot Execution\n                 Environment (PXE) Specification\", September\
    \ 1999,\n                 http://www.pix.net/software/pxeboot/archive/pxespec.pdf\n\
    \   [RFC768]      Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n  \
    \               August 1980.\n   [RFC1001]     NetBIOS Working Group in the Defense\
    \ Advanced Research\n                 Projects Agency, Internet Activities Board,\
    \ and End-\n                 to-End Services Task Force, \"Protocol standard for\
    \ a\n                 NetBIOS service on a TCP/UDP transport: Concepts and\n \
    \                methods\", STD 19, RFC 1001, March 1987.\n   [RFC1191]     Mogul,\
    \ J. and S. Deering, \"Path MTU discovery\", RFC\n                 1191, November\
    \ 1990.\n   [RFC1332]     McGregor, G., \"The PPP Internet Protocol Control\n\
    \                 Protocol (IPCP)\", RFC 1332, May 1992.\n   [RFC1350]     Sollins,\
    \ K., \"The TFTP Protocol (Revision 2)\", STD 33,\n                 RFC 1350,\
    \ July 1992.\n   [RFC1661]     Simpson, W., Ed., \"The Point-to-Point Protocol\
    \ (PPP)\",\n                 STD 51, RFC 1661, July 1994.\n   [RFC1877]     Cobb,\
    \ S., \"PPP Internet Protocol Control Protocol\n                 Extensions for\
    \ Name Server Addresses\", RFC 1877,\n                 December 1995.\n   [RFC1958]\
    \     Carpenter, B., Ed., \"Architectural Principles of the\n                \
    \ Internet\", RFC 1958, June 1996.\n   [RFC1981]     McCann, J., Deering, S.,\
    \ and J. Mogul, \"Path MTU\n                 Discovery for IP version 6\", RFC\
    \ 1981, August 1996.\n   [RFC2131]     Droms, R., \"Dynamic Host Configuration\
    \ Protocol\", RFC\n                 2131, March 1997.\n   [RFC2608]     Guttman,\
    \ E., Perkins, C., Veizades, J., and M. Day,\n                 \"Service Location\
    \ Protocol, Version 2\", RFC 2608, June\n                 1999.\n   [RFC2923]\
    \     Lahey, K., \"TCP Problems with Path MTU Discovery\", RFC\n             \
    \    2923, September 2000.\n   [RFC3118]     Droms, R., Ed., and W. Arbaugh, Ed.,\
    \ \"Authentication\n                 for DHCP Messages\", RFC 3118, June 2001.\n\
    \   [RFC3315]     Droms, R., Ed., Bound, J., Volz, B., Lemon, T.,\n          \
    \       Perkins, C., and M. Carney, \"Dynamic Host Configuration\n           \
    \      Protocol for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC3344]     Perkins,\
    \ C., Ed., \"IP Mobility Support for IPv4\", RFC\n                 3344, August\
    \ 2002.\n   [RFC3397]     Aboba, B. and S. Cheshire, \"Dynamic Host Configuration\n\
    \                 Protocol (DHCP) Domain Search Option\", RFC 3397,\n        \
    \         November 2002.\n   [RFC3456]     Patel, B., Aboba, B., Kelly, S., and\
    \ V. Gupta, \"Dynamic\n                 Host Configuration Protocol (DHCPv4) Configuration\
    \ of\n                 IPsec Tunnel Mode\", RFC 3456, January 2003.\n   [RFC3530]\
    \     Shepler, S., Callaghan, B., Robinson, D., Thurlow, R.,\n               \
    \  Beame, C., Eisler, M., and D. Noveck, \"Network File\n                 System\
    \ (NFS) version 4 Protocol\", RFC 3530, April 2003.\n   [RFC3720]     Satran,\
    \ J., Meth, K., Sapuntzakis, C., Chadalapaka, M.,\n                 and E. Zeidner,\
    \ \"Internet Small Computer Systems\n                 Interface (iSCSI)\", RFC\
    \ 3720, April 2004.\n   [RFC3736]     Droms, R., \"Stateless Dynamic Host Configuration\n\
    \                 Protocol (DHCP) Service for IPv6\", RFC 3736, April\n      \
    \           2004.\n   [RFC3748]     Aboba, B., Blunk, L., Vollbrecht, J., Carlson,\
    \ J., and\n                 H. Levkowetz, Ed., \"Extensible Authentication Protocol\n\
    \                 (EAP)\", RFC 3748, June 2004.\n   [RFC3756]     Nikander, P.,\
    \ Ed., Kempf, J., and E. Nordmark, \"IPv6\n                 Neighbor Discovery\
    \ (ND) Trust Models and Threats\", RFC\n                 3756, May 2004.\n   [RFC3775]\
    \     Johnson, D., Perkins, C., and J. Arkko, \"Mobility\n                 Support\
    \ in IPv6\", RFC 3775, June 2004.\n   [RFC3818]     Schryver, V., \"IANA Considerations\
    \ for the Point-to-\n                 Point Protocol (PPP)\", BCP 88, RFC 3818,\
    \ June 2004.\n   [RFC3832]     Zhao, W., Schulzrinne, H., Guttman, E., Bisdikian,\
    \ C.,\n                 and W. Jerome, \"Remote Service Discovery in the Service\n\
    \                 Location Protocol (SLP) via DNS SRV\", RFC 3832, July\n    \
    \             2004.\n   [RFC3898]     Kalusivalingam, V., \"Network Information\
    \ Service (NIS)\n                 Configuration Options for Dynamic Host Configuration\n\
    \                 Protocol for IPv6 (DHCPv6)\", RFC 3898, October 2004.\n   [RFC3927]\
    \     Cheshire, S., Aboba, B., and E. Guttman, \"Dynamic\n                 Configuration\
    \ of IPv4 Link-Local Addresses\", RFC 3927,\n                 May 2005.\n   [RFC3971]\
    \     Arkko, J., Ed., Kempf, J., Zill, B., and P. Nikander,\n                \
    \ \"SEcure Neighbor Discovery (SEND)\", RFC 3971, March\n                 2005.\n\
    \   [RFC3972]     Aura, T., \"Cryptographically Generated Addresses\n        \
    \         (CGA)\", RFC 3972, March 2005.\n   [RFC4171]     Tseng, J., Gibbons,\
    \ K., Travostino, F., Du Laney, C.,\n                 and J. Souza, \"Internet\
    \ Storage Name Service (iSNS)\",\n                 RFC 4171, September 2005.\n\
    \   [RFC4173]     Sarkar, P., Missimer, D., and C. Sapuntzakis,\n            \
    \     \"Bootstrapping Clients using the Internet Small\n                 Computer\
    \ System Interface (iSCSI) Protocol\", RFC 4173,\n                 September 2005.\n\
    \   [RFC4174]     Monia, C., Tseng, J., and K. Gibbons, \"The IPv4 Dynamic\n \
    \                Host Configuration Protocol (DHCP) Option for the\n         \
    \        Internet Storage Name Service\", RFC 4174, September\n              \
    \   2005.\n   [RFC4301]     Kent, S. and K. Seo, \"Security Architecture for the\n\
    \                 Internet Protocol\", RFC 4301, December 2005.\n   [RFC4306]\
    \     Kaufman, C., Ed., \"Internet Key Exchange (IKEv2)\n                 Protocol\"\
    , RFC 4306, December 2005.\n   [RFC4339]     Jeong, J., Ed., \"IPv6 Host Configuration\
    \ of DNS Server\n                 Information Approaches\", RFC 4339, February\
    \ 2006.\n   [RFC4477]     Chown, T., Venaas, S., and C. Strauf, \"Dynamic Host\n\
    \                 Configuration Protocol (DHCP): IPv4 and IPv6 Dual-Stack\n  \
    \               Issues\", RFC 4477, May 2006.\n   [RFC4578]     Johnston, M. and\
    \ S. Venaas, Ed., \"Dynamic Host\n                 Configuration Protocol (DHCP)\
    \ Options for the Intel\n                 Preboot eXecution Environment (PXE)\"\
    , RFC 4578,\n                 November 2006.\n   [RFC4795]     Aboba, B., Thaler,\
    \ D., and L. Esibov, \"Link-local\n                 Multicast Name Resolution\
    \ (LLMNR)\", RFC 4795, January\n                 2007.\n   [RFC4821]     Mathis,\
    \ M. and J. Heffner, \"Packetization Layer Path\n                 MTU Discovery\"\
    , RFC 4821, March 2007.\n   [RFC4862]     Thomson, S., Narten, T., and T. Jinmei,\
    \ \"IPv6 Stateless\n                 Address Autoconfiguration\", RFC 4862, September\
    \ 2007.\n   [RFC4941]     Narten, T., Draves, R., and S. Krishnan, \"Privacy\n\
    \                 Extensions for Stateless Address Autoconfiguration in\n    \
    \             IPv6\", RFC 4941, September 2007.\n   [RFC5072]     Varada, S.,\
    \ Ed., Haskins, D., and E. Allen, \"IP Version\n                 6 over PPP\"\
    , RFC 5072, September 2007.\n   [RFC5246]     Dierks, T. and E. Rescorla, \"The\
    \ Transport Layer\n                 Security (TLS) Protocol Version 1.2\", RFC\
    \ 5246, August\n                 2008.\n   [STD3]        Braden, R., Ed., \"Requirements\
    \ for Internet Hosts -\n                 Communication Layers\", STD 3, RFC 1122,\
    \ October 1989.\n                 Braden, R., Ed., \"Requirements for Internet\
    \ Hosts -\n                 Application and Support\", STD 3, RFC 1123, October\n\
    \                 1989.\n"
- title: Appendix A.  Acknowledgments
  contents:
  - "Appendix A.  Acknowledgments\n   Elwyn Davies, Bob Hinden, Pasi Eronen, Jari\
    \ Arkko, Pekka Savola,\n   James Kempf, Ted Hardie, and Alfred Hoenes provided\
    \ valuable input on\n   this document.\n"
- title: Appendix B.  IAB Members at the Time of This Writing
  contents:
  - "Appendix B.  IAB Members at the Time of This Writing\n   Loa Andersson\n   Gonzalo\
    \ Camarillo\n   Stuart Cheshire\n   Russ Housley\n   Olaf Kolkman\n   Gregory\
    \ Lebovitz\n   Barry Leiba\n   Kurtis Lindqvist\n   Andrew Malis\n   Danny McPherson\n\
    \   David Oran\n   Dave Thaler\n   Lixia Zhang\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   EMail: bernarda@microsoft.com\n   Dave Thaler\n\
    \   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA 98052\n   EMail:\
    \ dthaler@microsoft.com\n   Loa Andersson\n   Ericsson AB\n   EMail: loa.andersson@ericsson.com\n\
    \   Stuart Cheshire\n   Apple Computer, Inc.\n   1 Infinite Loop\n   Cupertino,\
    \ CA 95014\n   EMail: cheshire@apple.com\n"
