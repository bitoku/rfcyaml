- title: __initial_text__
  contents:
  - '                      Directory Assistance Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document defines a mechanism by which a user-interface\
    \ may\n   access a textual DAP-like interface over a TCP/IP connection.  This\n\
    \   is a local mechanism.  This memo provides information for the\n   Internet\
    \ community.  It does not specify any standard.  Distribution\n   of this memo\
    \ is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ..........................................\
    \   1\n   1.1 An Aside ............................................    3\n   2.\
    \ Protocol ..............................................   3\n   2.1 Control\
    \ Connection ..................................    4\n   2.1.1 Initialization\
    \ ....................................    4\n   2.1.2 Transactions ......................................\
    \    4\n   2.1.2.1 INTR command ....................................    4\n  \
    \ 2.1.2.2 STAT command ....................................    5\n   2.1.2.3 QUIT\
    \ command ....................................    5\n   2.2 Data Connection .....................................\
    \    5\n   2.2.1 Transactions ......................................    5\n  \
    \ 2.2.2 Responses .........................................    6\n   2.2.2.1 Numeric\
    \ Responses ...............................    6\n   2.2.2.2 'm' Response ....................................\
    \    6\n   2.2.2.3 'y' Response ....................................    6\n  \
    \ 2.2.2.4 'p' Response ....................................    7\n   2.2.2.5 'e'\
    \ Response ....................................    7\n   2.2.2.6 'l' Response\
    \ ....................................    7\n   2.2.2.7 'd' Response ....................................\
    \    8\n   2.2.2.8 'P' Response ....................................    8\n  \
    \ 3. Example Interaction ...................................   9\n   4. References\
    \ ............................................  10\n   5. Security Considerations...............................\
    \   11\n   6. Author's Address......................................   11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The OSI Directory [1] provides a powerful infrastructure\
    \ for the\n   retrieval of information objects.  This infrastructure can be used\
    \ to\n   support, e.g., white pages applications, application entity lookup,\n\
    \   and so on.\n   The Directory service is provided to applications through the\n\
    \   Directory Access Protocol (DAP), which binds a Directory User Agent\n   (DUA)\
    \ to a Directory System Agent (DSA).\n                                       \
    \ | Directory Service\n                                        |    provided via\
    \ DAP\n                                        |\n               +-----------+\
    \            |            +-----------+\n               |           |        \
    \    |            |           |\n               |    DUA    | <----------+---------->\
    \ |    DSA    |\n               |           |            |            |      \
    \     |\n               +-----------+            |            +-----------+\n\
    \                                        |\n                         Directory\
    \ User |\n   The DAP is an OSI application layer protocol which uses the rich\
    \ OSI\n   upper-layer infrastructure.  Unfortunately, the coding investment to\n\
    \   implement the DAP is significant.  As such, it is difficult to host\n   applications\
    \ using the Directory on smaller workstations and personal\n   computers.\n  \
    \ This memo details a local mechanism which has been successfully used\n   to\
    \ separate the functionality of the DAP from the complexity of\n   implementing\
    \ the DAP.  That is, a split-DUA model is used: the DAP is\n   implemented on\
    \ an entity (the \"Directory Assistant\"), which resides\n   on a capable workstation\
    \ or mainframe and exports a simpler\n   interface, the \"Directory Assistance\"\
    \ (DA) protocol, to other end-\n   systems where the user-interface resides, termed\
    \ the DA-client.\n   Since this mechanism provides assistance to applications\
    \ wishing to\n   access the Directory, it is termed the \"Directory Assistance\"\
    \ (DA)\n   service:\n                                        | Directory Service\n\
    \                 split-DUA              |    provided via DAP\n             \
    \                           |\n               +-----------+            |     \
    \       +-----------+\n               |           |            |            |\
    \           |\n               | Directory | <----------+----------> |    DSA \
    \   |\n               | Assistant |            |            |           |\n  \
    \             |           |            |            +-----------+\n          \
    \     +-----------+            |\n                    /|\\                 |\n\
    \                     |                  |\n                     | DA-service\
    \       |\n                     |   provide via    |\n                     | \
    \  DA-protocol    |\n                     |                  |\n             \
    \  ------+------            |\n                     |                  |\n   \
    \                  |                  |\n                     |              \
    \    |\n                     |                  |\n                     |    \
    \              |\n                    \\|/                 |\n               +-----------+\
    \            |\n               |           |            |\n               | DA-client\
    \ |            |\n               |           |            |\n               +-----------+\
    \            |\n                                        |\n                  \
    \       Directory User |\n"
- title: 1.1.  An Aside
  contents:
  - "1.1.  An Aside\n   This memo documents an already existing protocol, which was\n\
    \   originally used to provide a split-DUA model within the same host.\n   In\
    \ the absence of detailed historical and implementational\n   understanding, some\
    \ of the mechanisms described may not appear\n   intuitive.\n"
- title: 2.  Protocol
  contents:
  - "2.  Protocol\n   The DA service operates using two TCP connections: a control\n\
    \   connection, and a data connection.  The control connection defines\n   the\
    \ lifetime of an instance of the DA service; throughout this\n   lifetime, several\
    \ data connections may be established.  However, at\n   any given instant, between\
    \ zero and one data connections will be in\n   progress.\n   The DA service is\
    \ provided by the \"Directory Assistant\", which\n   consists of two entities:\
    \ a DA-server, which manages the control\n   connection; and, a DAP-listener,\
    \ which responds to commands on the\n   data connection.  The DA-server oversees\
    \ the behavior of the DAP-\n   listener.\n"
- title: 2.1.  Control Connection
  contents:
  - "2.1.  Control Connection\n   Data sent over the control connection consists of\
    \ a series of\n   transactions.  NVT-ASCII is used to express these transactions.\
    \  Each\n   transaction consists of the client sending a directive--a line of\n\
    \   text terminated by CR-LF; the DA-server returns a response--a line of\n  \
    \ text terminated by CR-LF.  All responses from a DA-server start with\n   either\
    \ \"+OK\" or \"-ERR\" depending on whether the transaction was\n   successful.\n"
- title: 2.1.1.  Initialization
  contents:
  - "2.1.1.  Initialization\n   A DA-server listens on TCP port 411 for incoming connections.\
    \  Upon\n   establishing a control connection, the DA-server returns a response\n\
    \   indicating whether the service has been started.  If successful, the\n   response\
    \ contains an IP-address and a TCP port, expressed in NVT-\n   ASCII, and separated\
    \ by one or more instances of the space character.\n   This information corresponds\
    \ to the TCP-endpoint that the DAP-\n   listener will use for the data connection.\n\
    \   Note that the DA-server and DAP-listener need not reside at the same\n   IP-address.\
    \  In the future, DA-servers may employ a internal protocol\n   for load-balancing\
    \ purposes.\n   If the DA service can not be started, an error response is returned\n\
    \   and the control connection is closed.\n"
- title: 2.1.2.  Transactions
  contents:
  - "2.1.2.  Transactions\n   All transactions with the DA-server consist of a command\
    \ followed by\n   zero or more arguments, separated by the space character.\n"
- title: 2.1.2.1.  INTR command
  contents:
  - "2.1.2.1.  INTR command\n   The INTR command takes no arguments.\n   The INTR\
    \ command is used to interrupt any DAP transaction\n   currently in progress.\n\
    \   The INTR command always returns success.\n"
- title: 2.1.2.2.  STAT command
  contents:
  - "2.1.2.2.  STAT command\n   The STAT command takes no arguments.\n   The STAT\
    \ command is used to verify that the DAP-listener is\n   available.\n   The STAT\
    \ command returns success only if the DAP-listener is\n   still active.\n"
- title: 2.1.2.3.  QUIT command
  contents:
  - "2.1.2.3.  QUIT command\n   The QUIT command takes no arguments.\n   The QUIT\
    \ command is used to terminate the DA service.\n   The QUIT command always returns\
    \ success.\n"
- title: 2.2.  Data Connection
  contents:
  - "2.2.  Data Connection\n   Data sent over a data connection consists of a single\
    \ DAP-\n   transaction.  NVT-ASCII is used to express these transactions.  Each\n\
    \   transaction consists of the client sending a command--a line of text\n   terminated\
    \ by the LF-character; the DAP-listener returns zero or more\n   responses, each\
    \ with a specific termination sequence.  All responses\n   from a DAP-listener\
    \ start with a single identifying character.  If\n   the character is a digit\
    \ (0-9), then the termination sequence\n   consists of a closing the data connection;\
    \ otherwise, if the\n   character is a lower-case letter (a-z), then the response\
    \ is\n   interactive and is terminated by the LF-character.\n"
- title: 2.2.1.  Transactions
  contents:
  - "2.2.1.  Transactions\n   All transactions with the DAP-listener consist of a\
    \ command followed\n   by zero or more arguments, separated by the space character.\n\
    \   Double-quotes may be used to prevent separation of tokens.\n   The command\
    \ set is taken from the DISH program:\n               add         add a new entry\n\
    \               bind        connect to the Directory\n               compare \
    \    compare entry's attribute\n               delete      delete an entry\n \
    \              fred        back-end to FrED\n               list        list children\n\
    \               modify      modify an existing entry\n               modifyrdn\
    \   modify an entry's name\n               moveto      move to a position\n  \
    \             search      search for an object\n               showentry   show\
    \ an entry\n               showname    show an entry's name\n               squid\
    \       status of dish\n               unbind      disconnect from the Directory\n\
    \   See [2] for a complete list of commands and arguments.\n   Note that commands\
    \ and arguments are in lower-case, and may\n   abbreviated to any unique prefix.\n"
- title: 2.2.2.  Responses
  contents:
  - "2.2.2.  Responses\n   There are two kinds of responses: numeric-responses, which\
    \ consist of\n   arbitrary text; and, letter-responses, which consist of brief\
    \ text,\n   and expect further interaction from the client.\n"
- title: 2.2.2.1.  Numeric Responses
  contents:
  - "2.2.2.1.  Numeric Responses\n   If the response is '1', then the DAP-transaction\
    \ terminated normally;\n   if the response is '2', then the DAP-transaction failed;\
    \ if the\n   response is '3', then the DAP-transaction was a search returning\
    \ more\n   than one result and one of the -hitone or -list option was selected\n\
    \   for the search; if the response is '4', then the DAP-transaction\n   terminated\
    \ normally and the remainder of this line consists of the\n   name of an entry\
    \ (see the 'd' Response below); if the response is\n   '5', then all children\
    \ of an entry were found by the DAP-transaction.\n   Once the response is completely\
    \ sent, the DAP-listener closes the\n   data connection.\n   Note that although\
    \ numeric responses utilize ASCII, they are not\n   NVT-ASCII; in particular,\
    \ the LF-character is used to indicate end-\n   of-line, rather than the CR-LF\
    \ line termination sequence of NVT-\n   ASCII.\n"
- title: 2.2.2.2.  'm' Response
  contents:
  - "2.2.2.2.  'm' Response\n   The 'm' response contains a one-line message which\
    \ should be\n   presented to the user.\n   At this point, the client returns a\
    \ response consisting of 'm'\n   followed by the LF-character.  The client should\
    \ then continue\n   reading from the existing data connection.\n"
- title: 2.2.2.3.  'y' Response
  contents:
  - "2.2.2.3.  'y' Response\n   The 'y' response contains a yes/no question which\
    \ should be presented\n   to the user.  After querying the user, the response\
    \ (either 'y' or\n   'n'), followed by the LF-character, should be sent to the\
    \ DAP-\n   listener.  The client should then continue reading from the existing\n\
    \   data connection.\n"
- title: 2.2.2.4.  'p' Response
  contents:
  - "2.2.2.4.  'p' Response\n   The 'p' response contains a password-prompt which\
    \ should be presented\n   to the user.  After querying the user, the client returns\
    \ a response\n   consisting of 'p' followed by the password supplied by the user\n\
    \   followed by the LF-character.  The client should then continue\n   reading\
    \ from the existing data connection.\n"
- title: 2.2.2.5.  'e' Response
  contents:
  - "2.2.2.5.  'e' Response\n   The 'e' response is used to ask the user to edit some\
    \ text.\n   Following the 'e' character is a decimal number in ASCII followed\
    \ by\n   the LF-character, indicating the number of octets that should be\n  \
    \ presented to the user for editing (these octets may include LF-\n   characters).\n\
    \   At this point, the client returns a response consisting of a single\n   character\
    \ followed by a LF-character.  If the character is 'e', the\n   edit is aborted\
    \ (e.g., the text is too large), and the client should\n   then continue reading\
    \ from the existing data connection.\n   Otherwise, the DAP-listener sends the\
    \ indicated number of octets\n   corresponding to the buffer that the user is\
    \ to edit.  After the user\n   edits the buffer, one of two responses should be\
    \ sent.\n   If the user aborted the edit, the response sent to the DAP-listener\n\
    \   is a single character 'e', followed by the LF-character.\n   Otherwise, the\
    \ response consists of any single character other than\n   indicating the number\
    \ of octets immediately following that resulted\n   from the user-edit.\n   Regardless\
    \ of the outcome, the client should then continue reading\n   from the existing\
    \ data connection.\n"
- title: 2.2.2.6.  'l' Response
  contents:
  - "2.2.2.6.  'l' Response\n   The 'l' response contains an entry for a selection\
    \ list to be\n   presented to the user.  The form of this entry consists of two\n\
    \   strings separated by the '$' character, and terminated by the LF-\n   character.\
    \  The first string is a user-friendly name, suitable for\n   display to the user;\
    \ the second string is a fully-qualified\n   Distinguished Name in textual format.\n\
    \   At this point, the client returns a response consisting of 'l'\n   followed\
    \ by the LF-character.\n   The client should continue to accumulate selection\
    \ entries until an\n   LF-character.\n   At this point, the user should be asked\
    \ to select one or more of the\n   selection entries.  After this selection, the\
    \ client sends back a\n   response consisting of 'L' followed by one or more decimal\
    \ numbers in\n   ASCII followed by the LF-character.  The numbers are separated\
    \ by\n   spaces, and correspond to the entries selected by the user.  (The\n \
    \  entry corresponding to the first 'l' response is numbered 1, etc.)\n   The\
    \ client should then continue reading from the existing data\n   connection.\n"
- title: 2.2.2.7.  'd' Response
  contents:
  - "2.2.2.7.  'd' Response\n   The 'd' response contains a name that the client may\
    \ be interested\n   in.  The form of this name consists of two strings separated\
    \ by the\n   '$' character, and terminated by the LF-character.  The first string\n\
    \   is a user-friendly name, suitable for display to the user; the second\n  \
    \ string is a fully-qualified Distinguished Name in textual format.\n   At this\
    \ point, the client returns a response consisting of 'd'\n   followed by the LF-character.\
    \  The client should then continue\n   reading from the existing data connection.\n"
- title: 2.2.2.8.  'P' Response
  contents:
  - "2.2.2.8.  'P' Response\n   The 'P' response is used to transmit a picture to\
    \ the client.\n   Following the 'P' character is a decimal number in ASCII followed\
    \ by\n   a name and then the LF-character.  The decimal number indicates the\n\
    \   size of the picture.  The name contains three strings separated by\n   the\
    \ '$' character.  The first string is the name of the attribute\n   corresponding\
    \ to the picture, in textual format; the second string is\n   a user-friendly\
    \ name, suitable for display to the user; and, the\n   third string is a fully-qualified\
    \ DistingiushedName in textual\n   format.\n   At this point, the client returns\
    \ a response consisting of a single\n   character followed by a LF-character.\
    \  If the character is 'P', the\n   picture will not be sent (e.g., the image\
    \ is too large), and the\n   client should then continue reading from the existing\
    \ data\n   connection.\n   Otherwise, the DAP-listener sends the indicated number\
    \ of octets\n   corresponding to the picture.  The picture is encoded using the\
    \ PBM\n   format from the PBMPLUS package.\n   Regardless of the outcome, the\
    \ client should then continue reading\n   from the existing data connection.\n"
- title: 3.  Example Interaction
  contents:
  - "3.  Example Interaction\n   In the text that follows, \"S:\" refers to the DA-server,\
    \ \"L:\" refers\n   to the DAP-listener, \"C:\" refers to the client talking to\
    \ the DA-\n   server, and, \"I:\" refers to the client talking to the DAP-listener.\n\
    \          S: <wait for connection on TCP port 411>\n          C: <open connection\
    \ to DA-server>\n          L: <wait for connections>\n          S: +OK 192.33.4.21\
    \ 32867\n          I: <open connection to DAP-listener>\n          I: bind -simple\
    \ -user \"@c=US@cn=Manager\"\n          L: pc=US@cn=Manager\n          -- client\
    \ asks user for password for \"c=US@cn=Manager\"\n          I: psecret\n     \
    \     L: <closes connection, signaling success but no response>\n          --\
    \ since response was null, client verifies that DAP-listener\n          -- is\
    \ still operating...\n          C: STAT\n          S: +OK\n          I: <open\
    \ connection to DAP-listener>\n          I: fred -expand \"@\"\n          L: 5\n\
    \             North America$l=North America\n             US$c=US\n          \
    \   ...\n          L: <closes connection>\n          I: <open connection to DAP-listener>\n\
    \          I: fred -ufn rose,psi,us\n          L: 1\n             <followed by\
    \ much data>\n          L: <closes connection>\n          I: <open connection\
    \ to DAP-listener>\n          I: fred -ufn -list,rose,ps,us\n          L: lHewlett-Packard,\
    \ US$c=US@o=Hewlett-Packard\n          I: l\n          L: lPerformance Systems\
    \ International, US$c=US@o=Performance...\n          I: l\n          L: lRutgers\
    \ University, US$c=US@o=Rutgers University\n          I: l\n          L: Lps\n\
    \          -- client presents selection list to user asking to select\n      \
    \    -- matches for 'ps', user selects the 2nd\n          I: L 2\n          L:\
    \ dManager, US$c=US@cn=Manager\n          I: d\n          L: 4Marshall Rose, ...$c=US@o=Performance...\n\
    \             <followed by much data>\n          L: <closes connection>\n    \
    \      I: <open connection to DAP-listener>\n          I: fred -ufn -list,schoffstall,ps,us\n\
    \          L: 33 matches found.\n          Martin Schoffstall, ...$c=US@o=Performance...\n\
    \          Marvin Schoffstall, ...$c=US@o=Performance...\n          Steve Schoffstall,\
    \ ...$c=US@o=Performance...\n          L: <closes connection>\n          C: QUIT\n\
    \          L: <stop listening for connections>\n          S: +OK\n          C:\
    \ <close connection>\n          S: <wait for next connection>\n"
- title: 4.  References
  contents:
  - "4.  References\n   [1] Information Processing - Open Systems Interconnection\
    \ - The\n       Directory, International Organization for Standardization.\n \
    \      International Standard 9594, (1988).\n   [2] Kille, S., Robbins, C., Roe,\
    \ M., and A. Turland, \"The ISO\n       Development Environment: User's Manual\"\
    , Volume 5: QUIPU,\n       Performance Systems International, January 1990.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security considerations are not discussed in\
    \ this memo.\n"
- title: 6.  Author's Address
  contents:
  - "6.  Author's Address\n   Marshall T. Rose\n   PSI, Inc.\n   PSI California Office\n\
    \   P.O. Box 391776\n   Mountain View, CA 94039\n   Phone: (415) 961-3380\n  \
    \ EMail: mrose@psi.com\n"
