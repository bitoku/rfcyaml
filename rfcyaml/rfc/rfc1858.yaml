- title: __initial_text__
  contents:
  - '           Security Considerations for IP Fragment Filtering

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   IP fragmentation can be used to disguise TCP packets from IP filters\n\
    \   used in routers and hosts. This document describes two methods of\n   attack\
    \ as well as remedies to prevent them.\n"
- title: 1. Background
  contents:
  - "1. Background\n   System administrators rely on manufacturers of networking equipment\n\
    \   to provide them with packet filters; these filters are used for\n   keeping\
    \ attackers from accessing private systems and information,\n   while permitting\
    \ friendly agents to transfer data between private\n   nets and the Internet.\
    \  For this reason, it is important for network\n   equipment vendors to anticipate\
    \ possible attacks against their\n   equipment and to implement robust mechanisms\
    \ to deflect such attacks.\n   The growth of the global Internet has brought with\
    \ it an increase in\n   \"undesirable elements\" manifested in antisocial behavior.\
    \  Recent\n   months have seen the use of novel attacks on Internet hosts, which\n\
    \   have in some cases led to the compromise of sensitive data.\n   Increasingly\
    \ sophisticated attackers have begun to exploit the more\n   subtle aspects of\
    \ the Internet Protocol; fragmentation of IP packets,\n   an important feature\
    \ in heterogeneous internetworks, poses several\n   potential problems which we\
    \ explore here.\n"
- title: 2. Filtering IP Fragments
  contents:
  - "2. Filtering IP Fragments\n   IP packet filters on routers are designed with\
    \ a user interface that\n   hides packet fragmentation from the administrator;\
    \ conceptually, an\n   IP filter is applied to each IP packet as a complete entity.\n\
    \   One approach to fragment filtering, described by Mogul [1], involves\n   keeping\
    \ track of the results of applying filter rules to the first\n   fragment (FO==0)\
    \ and applying them to subsequent fragments of the\n   same packet.  The filtering\
    \ module would maintain a list of packets\n   indexed by the source address, destination\
    \ address, protocol, and IP\n   ID.  When the initial (FO==0) fragment is seen,\
    \ if the MF bit is set,\n   a list item would be allocated to hold the result\
    \ of filter access\n   checks.  When packets with a non-zero FO come in, look\
    \ up the list\n   element with a matching SA/DA/PROT/ID and apply the stored result\n\
    \   (pass or block).  When a fragment with a zero MF bit is seen, free\n   the\
    \ list element.\n   Although this method (or some refinement of it) might successfully\n\
    \   remove any trace of the offending whole packet, it has some\n   difficulties.\
    \  Fragments that arrive out of order, possibly because\n   they traveled over\
    \ different paths, violate one of the design\n   assumptions, and undesired fragments\
    \ can leak through as a result.\n   Furthermore, if the filtering router lies\
    \ on one of several parallel\n   paths, the filtering module will not see every\
    \ fragment and cannot\n   guarantee complete fragment filtering in the case of\
    \ packets that\n   should be dropped.\n   Fortunately, we do not need to remove\
    \ all fragments of an offending\n   packet.  Since \"interesting\" packet information\
    \ is contained in the\n   headers at the beginning, filters are generally applied\
    \ only to the\n   first fragment.  Non-first fragments are passed without filtering,\n\
    \   because it will be impossible for the destination host to complete\n   reassembly\
    \ of the packet if the first fragment is missing, and\n   therefore the entire\
    \ packet will be discarded.\n   The Internet Protocol allows fragmentation of\
    \ packets into pieces so\n   small as to be impractical because of data and computational\n\
    \   overhead.  Attackers can sometimes exploit typical filter behavior\n   and\
    \ the ability to create peculiar fragment sequences in order to\n   sneak otherwise\
    \ disallowed packets past the filter.  In normal\n   practice, such pathalogical\
    \ fragmentation is never used, so it is\n   safe to drop these fragments without\
    \ danger of preventing normal\n   operation.\n"
- title: 3. Tiny Fragment Attack
  contents:
  - "3. Tiny Fragment Attack\n   With many IP implementations it is possible to impose\
    \ an unusually\n   small fragment size on outgoing packets.  If the fragment size\
    \ is\n   made small enough to force some of a TCP packet's TCP header fields\n\
    \   into the second fragment, filter rules that specify patterns for\n   those\
    \ fields will not match.  If the filtering implementation does\n   not enforce\
    \ a minimum fragment size, a disallowed packet might be\n   passed because it\
    \ didn't hit a match in the filter.\n   STD 5, RFC 791 states:\n      Every internet\
    \ module must be able to forward a datagram of 68\n      octets without further\
    \ fragmentation.  This is because an internet\n      header may be up to 60 octets,\
    \ and the minimum fragment is 8\n      octets.\n   Note that, for the purpose\
    \ of security, it is not sufficient to\n   merely guarantee that a fragment contains\
    \ at least 8 octets of data\n   beyond the IP header because important transport\
    \ header information\n   (e.g., the CODE field of the TCP header) might be beyond\
    \ the 8th data\n   octet.\n   3.1 Example of the Tiny Fragment Attack\n      In\
    \ this example, the first fragment contains only eight octets of\n      data (the\
    \ minimum fragment size).  In the case of TCP, this is\n      sufficient to contain\
    \ the source and destination port numbers, but\n      it will force the TCP flags\
    \ field into the second fragment.\n      Filters that attempt to drop connection\
    \ requests (TCP datagrams\n      having SYN=1 and ACK=0) will be unable to test\
    \ these flags in the\n      first octet, and will typically ignore them in subsequent\n\
    \      fragments.\n      FRAGMENT 1\n      IP HEADER\n      +-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+\
    \     +-+-+-+\n      |     | ... | Fragment Offset = 0 | ... |     |\n      +-+-+-+\
    \     +-+-+-+-+-+-+-+-+-+-+-+     +-+-+-+\n      TCP HEADER\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Source Port            |       Destination Port        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Sequence Number                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      FRAGMENT 2\n      IP HEADER\n      +-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+\
    \     +-+-+-+\n      |     | ... | Fragment Offset = 1 | ... |     |\n      +-+-+-+\
    \     +-+-+-+-+-+-+-+-+-+-+-+     +-+-+-+\n      TCP HEADER\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Acknowledgment Number                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Data |           |U|A|P|R|S|F|                               |\n      | Offset|\
    \ Reserved  |R|C|S|S|Y|I|            Window             |\n      |       |   \
    \        |G|K|H|T|N|N|                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   3.2 Prevention of the Tiny Fragment Attack\n      In a router, one can prevent\
    \ this sort of attack by enforcing\n      certain limits on fragments passing\
    \ through, namely, that the\n      first fragment be large enough to contain all\
    \ the necessary header\n      information.\n      There are two ways to guarantee\
    \ that the first fragment of a\n      \"passed\" packet includes all the required\
    \ fields, one direct, the\n      other indirect.\n      3.2.1 Direct Method\n\
    \         There is some number TMIN which is the minimum length of a\n       \
    \  transport header required to contain \"interesting\" fields\n         (i.e.,\
    \ fields whose values are significant to packet filters).\n         This length\
    \ is measured from the beginning of the transport\n         header in the original\
    \ unfragmented IP packet.\n         Note that TMIN is a function of the transport\
    \ protocol involved\n         and also of the particular filters currently configured.\n\
    \         The direct method involves computing the length of the\n         transport\
    \ header in each zero-offset fragment and comparing it\n         against TMIN.\
    \  If the transport header length is less than\n         TMIN, the fragment is\
    \ discarded.  Non-zero-offset fragments\n         need not be checked because\
    \ if the zero-offset fragment is\n         discarded, the destination host will\
    \ be unable to complete\n         reassembly.  So far we have:\n            if\
    \ FO=0 and TRANSPORTLEN < tmin then\n                    DROP PACKET\n       \
    \  However, the \"interesting\" fields of the common transport\n         protocols,\
    \ except TCP, lie in the first eight octets of the\n         transport header,\
    \ so it isn't possible to push them into a\n         non-zero-offset fragment.\
    \ Therefore, as of this writing, only\n         TCP packets are vulnerable to\
    \ tiny-fragment attacks and the\n         test need not be applied to IP packets\
    \ carrying other transport\n         protocols.  A better version of the tiny\
    \ fragment test might\n         therefore be:\n            if FO=0 and PROTOCOL=TCP\
    \ and TRANSPORTLEN < tmin then\n                    DROP PACKET\n         As discussed\
    \ in the section on overlapping fragments below,\n         however, this test\
    \ does not block all fragmentation attacks,\n         and is in fact unnecessary\
    \ when a more general technique is\n         used.\n      3.2.2 Indirect Method\n\
    \         The indirect method relies on the observation that when a TCP\n    \
    \     packet is fragmented so as to force \"interesting\" header fields\n    \
    \     out of the zero-offset fragment, there must exist a fragment\n         with\
    \ FO equal to 1.\n         If a packet with FO==1 is seen, conversely, it could\
    \ indicate\n         the presence, in the fragment set, of a zero-offset fragment\n\
    \         with a transport header length of eight octets Discarding this\n   \
    \      one-offset fragment will block reassembly at the receiving host\n     \
    \    and be as effective as the direct method described above.\n"
- title: 4. Overlapping Fragment Attack
  contents:
  - "4. Overlapping Fragment Attack\n   RFC 791, the current IP protocol specification,\
    \ describes a\n   reassembly algorithm that results in new fragments overwriting\
    \ any\n   overlapped portions of previously-received fragments.\n   Given such\
    \ a reassembly implementation, an attacker could construct a\n   series of packets\
    \ in which the lowest (zero-offset) fragment would\n   contain innocuous data\
    \ (and thereby be passed by administrative\n   packet filters), and in which some\
    \ subsequent packet having a non-\n   zero offset would overlap TCP header information\
    \ (destination port,\n   for instance) and cause it to be modified.  The second\
    \ packet would\n   be passed through most filter implementations because it does\
    \ not\n   have a zero fragment offset.\n   RFC 815 outlines an improved datagram\
    \ reassembly algorithm, but it\n   concerns itself primarily with filling gaps\
    \ during the reassembly\n   process.  This RFC remains mute on the issue of overlapping\n\
    \   fragments.\n   Thus, fully-compliant IP implementations are not guaranteed\
    \ to be\n   immune to overlapping-fragment attacks.  The 4.3 BSD reassembly\n\
    \   implementation takes care to avoid these attacks by forcing data from\n  \
    \ lower-offset fragments to take precedence over data from higher-\n   offset\
    \ fragments.  However, not all IP implementations are based on\n   the original\
    \ BSD code, and it is likely that some of them are\n   vulnerable.\n   4.1 Example\
    \ of the Overlapping Fragment Attack\n      In this example, fragments are large\
    \ enough to satisfy the minimum\n      size requirements described in the previous\
    \ section.  The filter\n      is configured to drop TCP connection request packets.\n\
    \      The first fragment contains values, e.g., SYN=0, ACK=1, that\n      enable\
    \ it to pass through the filter unharmed.\n      The second fragment, with a fragment\
    \ offset of eight octets,\n      contains TCP Flags that differ from those given\
    \ in the first\n      fragment, e.g., SYN=1, ACK=0.  Since this second fragment\
    \ is not a\n      0-offset fragment, it will not be checked, and it, too will\
    \ pass\n      through the filter.\n      The receiving host, if it conforms fully\
    \ to the algorithms given\n      in RFC 791, will reconstitute the packet as a\
    \ connection request\n      because the \"bad\" data arrived later.\n      FRAGMENT\
    \ 1\n      IP HEADER\n      +-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+     +-+-+-+\n\
    \      |     | ... | Fragment Offset = 0 | ... |     |\n      +-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+\
    \     +-+-+-+\n      TCP HEADER\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Source Port            |       Destination Port        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Sequence Number                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Acknowledgment Number                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Data |           |U|A|P|R|S|F|                               |\n      | Offset|\
    \ Reserved  |R|C|S|S|Y|I|            Window             |\n      |       |   \
    \        |G|K|H|T|N|N|                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   .\n                                   .\n\
    \                                   .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        (Other data)                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      FRAGMENT\
    \ 2\n      IP HEADER\n      +-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+     +-+-+-+\n\
    \      |     | ... | Fragment Offset = 1 | ... |     |\n      +-+-+-+     +-+-+-+-+-+-+-+-+-+-+-+\
    \     +-+-+-+\n      TCP HEADER\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Acknowledgment Number                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Data |           |U|A|P|R|S|F|                               |\n      | Offset|\
    \ Reserved  |R|C|S|S|Y|I|            Window             |\n      |       |   \
    \        |G|K|H|T|N|N|                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                   .\n                                   .\n\
    \                                   .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        (Other data)                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      If\
    \ the receiving host has a reassembly algorithm that prevents new\n      data\
    \ from overwriting data received previously, we can send\n      Fragment 2 first,\
    \ followed by Fragment 1, and accomplish the same\n      successful attack.\n\
    \   4.2 Prevention of the Overlapping Fragment Attack\n      Since no standard\
    \ requires that an overlap-safe reassembly\n      algorithm be used, the potential\
    \ vulnerability of hosts to this\n      attack is quite large.\n      By adopting\
    \ a better strategy in a router's IP filtering code, one\n      can be assured\
    \ of blocking this \"attack\".  If the router's\n      filtering module enforces\
    \ a minimum fragment offset for fragments\n      that have non-zero offsets, it\
    \ can prevent overlaps in filter\n      parameter regions of the transport headers.\n\
    \      In the case of TCP, this minimum is sixteen octets, to ensure that\n  \
    \    the TCP flags field is never contained in a non-zero-offset\n      fragment.\
    \  If a TCP fragment has FO==1, it should be discarded\n      because it starts\
    \ only eight octets into the transport header.\n      Conveniently, dropping FO==1\
    \ fragments also protects against the\n      tiny fragment attack, as discussed\
    \ earlier.\n      RFC 791 demands that an IP stack must be capable of passing\
    \ an 8\n      byte IP data payload without further fragmentation (fragments sit\n\
    \      on 8 byte boundaries).  Since an IP header can be up to 60 bytes\n    \
    \  long (including options), this means that the minimum MTU on a\n      link\
    \ should be 68 bytes.\n      A typical IP header is only 20 bytes long and can\
    \ therefore carry\n      48 bytes of data.  No one in the real world should EVER\
    \ be\n      generating a TCP packet with FO=1, as it would require both that a\n\
    \      previous system fragmenting IP data down to the 8 byte minimum and\n  \
    \    a 60 byte IP header.\n      A general algorithm, then, for ensuring that\
    \ filters work in the\n      face of both the tiny fragment attack and the overlapping\
    \ fragment\n      attack is:\n         IF FO=1 and PROTOCOL=TCP then\n       \
    \          DROP PACKET\n      If filtering based on fields in other transport\
    \ protocol headers\n      is provided in a router, the minimum could be greater,\
    \ depending\n      on the position of those fields in the header.  In particular,\
    \ if\n      filtering is permitted on data beyond the sixteenth octet of the\n\
    \      transport header, either because of a flexible user interface or\n    \
    \  the implementation of filters for some new transport protocol,\n      dropping\
    \ packets with FO==1 might not be sufficient.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This memo is concerned entirely with the security\
    \ implications of\n   filtering fragmented IP packets.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   The attack scenarios described above grew from discussions\
    \ that took\n   place on the firewalls mailing list during May of 1995.  Participants\n\
    \   included: Darren Reed <avalon@coombs.anu.edu.au>, Tom Fitzgerald\n   <fitz@wang.com>,\
    \ and Paul Traina <pst@cisco.com>.\n"
- title: 7. References
  contents:
  - "7. References\n   [1] Mogul, J., \"Simple and Flexible Datagram Access Controls\
    \ for\n       Unix-based Gateways\", Digital Equipment Corporation, March 1989.\n\
    \   [2] Postel, J., Editor, \"Internet Protocol - DARPA Internet Program\n   \
    \    Protocol Specification\", STD 5, RFC 791, USC/Information Sciences\n    \
    \   Institute, September 1981.\n   [3] Postel, J., Editor, \"Transmission Control\
    \ Protocol - DARPA\n       Internet Program Protocol Specification\", STD 7, RFC\
    \ 793,\n       USC/Information Sciences Institute, September 1981.\n   [4] Clark,\
    \ D., \"IP Datagram Reassembly Algorithms\", RFC 815, MIT\n       Laboratory for\
    \ Computer Science/Computer Systems and\n       Communications Group, July 1982.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   G. Paul Ziemba\n   Alantec\n   2115 O'Nel Drive\n   San\
    \ Jose, CA 95131\n   EMail: paul@alantec.com\n   Darren Reed\n   Cybersource\n\
    \   1275A Malvern Rd\n   Melbourne, Vic 3144\n   Australia\n   EMail: darrenr@cyber.com.au\n\
    \   Paul Traina\n   cisco Systems, Inc.\n   170 W. Tasman Dr.\n   San Jose, CA\
    \ 95028\n   EMail: pst@cisco.com\n"
