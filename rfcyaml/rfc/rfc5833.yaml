- title: __initial_text__
  contents:
  - '  Control and Provisioning of Wireless Access Points (CAPWAP) Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols.  In particular, it\n   describes\
    \ the managed objects for modeling the Control And\n   Provisioning of Wireless\
    \ Access Points (CAPWAP) Protocol.  This MIB\n   module is presented as a basis\
    \ for future work on the SNMP management\n   of the CAPWAP protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5833.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  The Internet-Standard Management Framework . . . . .\
    \ . . . . .  3\n   3.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  Conventions  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   5.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n     5.1.  Requirements and Constraints . . . . . . . . . . . . . .\
    \ .  5\n     5.2.  Wireless Binding MIB Modules . . . . . . . . . . . . . . .\
    \  5\n     5.3.  Design Objectives  . . . . . . . . . . . . . . . . . . . .  5\n\
    \     5.4.  Design Idea  . . . . . . . . . . . . . . . . . . . . . . .  6\n  \
    \   5.5.  Mechanism of Reusing Wireless Binding MIB Modules  . . . .  6\n    \
    \ 5.6.  CAPWAP Protocol Wireless Binding MIB Module  . . . . . . .  7\n     5.7.\
    \  WTP Profile  . . . . . . . . . . . . . . . . . . . . . . .  7\n   6.  Structure\
    \ of the MIB Module  . . . . . . . . . . . . . . . . .  8\n   7.  Relationship\
    \ to Other MIB Modules  . . . . . . . . . . . . . .  9\n     7.1.  Relationship\
    \ to SNMPv2-MIB Module  . . . . . . . . . . . .  9\n     7.2.  Relationship to\
    \ IF-MIB Module  . . . . . . . . . . . . . .  9\n     7.3.  Relationship to ENTITY-MIB\
    \ Module  . . . . . . . . . . . . 10\n     7.4.  Relationship to Wireless Binding\
    \ MIB Modules . . . . . . . 10\n     7.5.  MIB Modules Required for IMPORTS .\
    \ . . . . . . . . . . . . 10\n   8.  Example of CAPWAP-BASE-MIB Module Usage \
    \ . . . . . . . . . . . 10\n   9.  Definitions  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 14\n   10. Security Considerations  . . . . . . . . . .\
    \ . . . . . . . . . 69\n   11. IANA Considerations  . . . . . . . . . . . . .\
    \ . . . . . . . . 70\n     11.1. IANA Considerations for CAPWAP-BASE-MIB Module\
    \ . . . . . . 70\n     11.2. IANA Considerations for ifType . . . . . . . . .\
    \ . . . . . 70\n   12. Contributors . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 70\n   13. Acknowledgements . . . . . . . . . . . . . . . . . . . .\
    \ . . . 71\n   14. References . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 71\n     14.1. Normative References . . . . . . . . . . . . . . . . . .\
    \ . 71\n     14.2. Informative References . . . . . . . . . . . . . . . . . .\
    \ 72\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The CAPWAP Protocol [RFC5415] defines a standard, interoperable\n\
    \   protocol, which enables an Access Controller (AC) to manage a\n   collection\
    \ of Wireless Termination Points (WTPs).\n   This document defines a MIB module\
    \ that can be used to manage the\n   CAPWAP implementations.  This MIB module\
    \ covers both configuration\n   and WTP status-monitoring aspects of CAPWAP, and\
    \ provides a way to\n   reuse MIB modules for any wireless technology.  It presented\
    \ as a\n   basis for future work on a SNMP management of the CAPWAP protocol.\n"
- title: 2.  The Internet-Standard Management Framework
  contents:
  - "2.  The Internet-Standard Management Framework\n   For a detailed overview of\
    \ the documents that describe the current\n   Internet-Standard Management Framework,\
    \ please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are\
    \ accessed via a virtual information store, termed\n   the Management Information\
    \ Base or MIB.  MIB objects are generally\n   accessed through the Simple Network\
    \ Management Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms\
    \ defined in the\n   Structure of Management Information (SMI).  This memo specifies\
    \ a MIB\n   module that is compliant to the SMIv2, which is described in STD 58,\n\
    \   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579], and STD 58, RFC 2580\n   [RFC2580].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   This document uses terminology from the CAPWAP Protocol specification\n\
    \   [RFC5415] and the Architecture Taxonomy for CAPWAP [RFC4118].\n   Access Controller\
    \ (AC): The network entity that provides WTP access\n   to the network infrastructure\
    \ in the data plane, control plane,\n   management plane, or a combination therein.\n\
    \   Wireless Termination Point (WTP): The physical or network entity that\n  \
    \ contains an radio frequency (RF) antenna and wireless physical layer\n   (PHY)\
    \ to transmit and receive station traffic for wireless access\n   networks.\n\
    \   Control And Provisioning of Wireless Access Points (CAPWAP): It is a\n   generic\
    \ protocol defining AC and WTP control and data plane\n   communication via a\
    \ CAPWAP protocol transport mechanism.  CAPWAP\n   control messages, and optionally\
    \ CAPWAP data messages, are secured\n   using Datagram Transport Layer Security\
    \ (DTLS) [RFC4347].\n   CAPWAP Control Channel: A bi-directional flow defined\
    \ by the AC IP\n   Address, WTP IP Address, AC control port, WTP control port,\
    \ and the\n   transport-layer protocol (UDP or UDP-Lite) over which CAPWAP control\n\
    \   packets are sent and received.\n   CAPWAP Data Channel: A bi-directional flow\
    \ defined by the AC IP\n   Address, WTP IP Address, AC data port, WTP data port,\
    \ and the\n   transport-layer protocol (UDP or UDP-Lite) over which CAPWAP data\n\
    \   packets are sent and received.\n   Station (STA): A device that contains an\
    \ interface to a wireless\n   medium (WM).\n   Split and Local MAC: The CAPWAP\
    \ protocol supports two modes of\n   operation: Split and Local MAC (medium access\
    \ control).  In Split MAC\n   mode, all Layer 2 wireless data and management frames\
    \ are\n   encapsulated via the CAPWAP protocol and exchanged between the AC and\n\
    \   the WTPs.  The Local MAC mode allows the data frames to be either\n   locally\
    \ bridged or tunneled as 802.3 frames.\n   Wireless Binding: The CAPWAP protocol\
    \ is independent of a specific\n   WTP radio technology, as well its associated\
    \ wireless link-layer\n   protocol.  Elements of the CAPWAP protocol are designed\
    \ to\n   accommodate the specific needs of each wireless technology in a\n   standard\
    \ way.  Implementation of the CAPWAP protocol for a particular\n   wireless technology\
    \ MUST define a binding protocol for it, e.g., the\n   binding for IEEE 802.11,\
    \ provided in [RFC5416].\n   Autonomous Wireless Local Area Network (WLAN) Architecture:\
    \ It is the\n   traditional autonomous WLAN architecture, in which each WTP is\
    \ a\n   single physical device that implements all the wireless services.\n  \
    \ Centralized WLAN Architecture: It is an emerging hierarchical\n   architecture\
    \ utilizing one or more centralized controllers for\n   managing a large number\
    \ of WTP devices.  It can be said that the full\n   wireless functions are implemented\
    \ across multiple physical network\n   devices, namely, the WTPs and ACs.\n"
- title: 4.  Conventions
  contents:
  - "4.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 5.  Overview
  contents:
  - '5.  Overview

    '
- title: 5.1.  Requirements and Constraints
  contents:
  - "5.1.  Requirements and Constraints\n   The CAPWAP Protocol MIB module (CAPWAP-BASE-MIB)\
    \ is designed to:\n   -  Support centralized management and monitoring of WTPs\
    \ from the AC\n      in combination with the CAPWAP protocol;\n   -  Allow operators\
    \ to make configurations for WTPs before and after\n      they connect to the\
    \ AC;\n   -  Support querying of CAPWAP protocol parameters;\n   -  Support displaying\
    \ of WTPs' current states and configurations;\n   -  Provide basic property information\
    \ about the AC, WTPs, radios, and\n      stations, and their relationships;\n\
    \   -  Provide counters for events on WTPs and radios such as reboot and\n   \
    \   hardware failure;\n   -  Provide various notifications such as channel up\
    \ and join failure.\n"
- title: 5.2.  Wireless Binding MIB Modules
  contents:
  - "5.2.  Wireless Binding MIB Modules\n   Other Standards Development Organizations\
    \ (SDOs), such as IEEE, have\n   already defined MIB modules for a specific wireless\
    \ technology, e.g.,\n   IEEE 802.11 MIB module [IEEE.802-11.2007].  Such MIB modules\
    \ are\n   called wireless binding MIB modules.\n"
- title: 5.3.  Design Objectives
  contents:
  - "5.3.  Design Objectives\n   This document introduces a mechanism to avoid redefining\
    \ MIB objects\n   in the existing MIB modules for a specific wireless technology,\
    \ in\n   other words, a mechanism to reuse wireless binding MIB modules\n   defined\
    \ by other SDOs.\n   In summary, the CAPWAP-BASE-MIB module has the following\
    \ design\n   objectives:\n   -  To implement an architecture that uses SNMP for\
    \ the management and\n      control of wireless networks, and answering the operator's\n\
    \      requirements for centralized management, whatever the wireless\n      devices\
    \ are configured and deployed (centralized, autonomous, or\n      some mix);\n\
    \   -  To be consistent with the CAPWAP protocol;\n   -  To be independent of\
    \ any wireless technologies and be able to\n      reuse wireless binding MIB modules\
    \ defined by other SDOs;\n   -  To enable interoperability between vendors;\n\
    \   -  To meet the management requirements for the centralized WLAN\n      architecture.\n"
- title: 5.4.  Design Idea
  contents:
  - "5.4.  Design Idea\n   The basic design idea of the CAPWAP-BASE-MIB module is:\n\
    \   -  The SNMP agent MUST be run on the AC devices and is not REQUIRED\n    \
    \  on the WTP devices.  It follows the same model as the CAPWAP\n      protocol:\
    \ Centralized Control.\n   -  It is designed to accommodate the specific needs\
    \ of each wireless\n      technology in a standard way.  It is independent of\
    \ any wireless\n      technologies.\n   -  The ifIndex [RFC2863] is used as a\
    \ common index for corresponding\n      interfaces in the CAPWAP-BASE-MIB and\
    \ the MIB modules of specific\n      wireless technologies.\n   -  The operator\
    \ could manage and control the centralized WLAN\n      architectures using multiple\
    \ MIB modules defined by multiple SDOs,\n      while keeping them loosely coupled.\n"
- title: 5.5.  Mechanism of Reusing Wireless Binding MIB Modules
  contents:
  - "5.5.  Mechanism of Reusing Wireless Binding MIB Modules\n   For any wireless\
    \ technology, the configuration and management of\n   radios are very important.\
    \  As usual, wireless binding MIB modules\n   support radio management on their\
    \ own.  For example, the MIB tables\n   such as the dot11OperationTable [IEEE.802-11.2007]\
    \ are able to\n   support WTP radio configuration.  These tables use the ifIndex\
    \ as the\n   index, and work well under autonomous WLAN architecture.\n   To reuse\
    \ such wireless binding MIB modules is very important to\n   centralized WLAN\
    \ architectures.  According to [RFC5415], a specific\n   PHY radio could be identified\
    \ by the combination of the identifiers\n   of the WTP and radio (WTP ID + Radio\
    \ ID), so the key point is to make\n   use of the ifIndex idea and find a way\
    \ to maintain the mappings\n   between 'WTP ID + radio ID' and the ifIndex.  As\
    \ a generic mechanism,\n   an ifIndex can identify an interface in an abstract\
    \ way, and it does\n   NOT care for the interface's PHY location (either on the\
    \ WTP or AC).\n   The AC can have WTP Virtual Radio Interfaces to logically represent\n\
    \   PHY radios on the WTP.  From the operator's perspective, it appears\n   that\
    \ PHY radios are located on the AC, and the PHY location of the\n   WTP (radio)\
    \ is hidden.  The operator can operate radios through MIB\n   tables with the\
    \ ifIndex of a WTP Virtual Radio Interface.  As a type\n   of abstract interface,\
    \ the WTP Virtual Radio Interface could be used\n   by any wireless technology\
    \ such as IEEE 802.11 and 802.16.  The\n   capwapBaseWirelessBindingTable in the\
    \ CAPWAP-BASE-MIB module is used\n   to store the mappings between the 'WTP ID\
    \ + Radio ID' and the\n   ifIndex.\n"
- title: 5.6.  CAPWAP Protocol Wireless Binding MIB Module
  contents:
  - "5.6.  CAPWAP Protocol Wireless Binding MIB Module\n   According to the CAPWAP\
    \ Protocol specification [RFC5415], when\n   defining a binding for wireless technologies,\
    \ the authors MUST\n   include any necessary definitions for technology-specific\
    \ messages\n   and all technology-specific message elements for those messages.\
    \  A\n   CAPWAP binding protocol is required for a specific wireless binding\n\
    \   technology, e.g., the protocol of [RFC5416] for IEEE 802.11 binding.\n   Sometimes,\
    \ not all the technology-specific message elements in a\n   CAPWAP binding protocol\
    \ have MIB objects defined by other SDOs.  For\n   example, the protocol of [RFC5416]\
    \ defines WLAN management.  The WLAN\n   refers to a logical component instantiated\
    \ on a WTP device.  A single\n   physical WTP MAY operate a number of WLANs. \
    \ Also, Local or Split MAC\n   modes could be specified for a WLAN.  The MAC mode\
    \ for a WLAN is not\n   in the scope of IEEE 802.11 [IEEE.802-11.2007].  In such\
    \ cases, in\n   addition to the existing wireless binding MIB modules defined\
    \ by\n   other SDOs, a CAPWAP protocol wireless binding MIB module is required\n\
    \   to be defined for a wireless binding, e.g, the CAPWAP Protocol\n   Binding\
    \ MIB for IEEE 802.11 [RFC5834].\n"
- title: 5.7.  WTP Profile
  contents:
  - "5.7.  WTP Profile\n   In a centralized WLAN architecture, a WTP profile is used\
    \ to make\n   configurations such as a static IP address for a WTP before and\
    \ after\n   it connects to the AC.  It MUST contain the Base MAC address\n   [RFC5415]\
    \ of the WTP because the CAPWAP message received from the WTP\n   contains the\
    \ Base MAC address and the AC uses this Base MAC address\n   to find the corresponding\
    \ WTP profile.\n   Section 4.6.40 of [RFC5415] omits indicating that the WTP's\
    \ Base MAC\n   address MUST be included in the WTP Board Data message element.\
    \  This\n   is a known errata item [Err1832] and should be fixed in any future\n\
    \   revision of RFC 5415.\n   Another important function of WTP profile is to\
    \ trigger the creation\n   of WTP Virtual Radio Interfaces on the AC.  To implement\
    \ this\n   function, a WTP profile MUST include the WTP's model number\n   [RFC5415],\
    \ which reflects the number of PHY radios on the WTP.  In\n   this way, the creation\
    \ of a WTP profile triggers the AC to\n   automatically create the same number\
    \ of WTP Virtual Radio Interfaces\n   corresponding to the WTP's PHY radios without\
    \ manual intervention.\n   With the ifIndexes of WTP Virtual Radio Interfaces,\
    \ the operator\n   could configure and manage the WTP's PHY radios through the\
    \ wireless\n   binding MIB modules.\n"
- title: 6.  Structure of the MIB Module
  contents:
  - "6.  Structure of the MIB Module\n   The MIB objects are derived from the CAPWAP\
    \ protocol document\n   [RFC5415].\n   1) capwapBaseAcNameListTable\n      The\
    \ AC name list table is used to configure the AC name list.\n   2) capwapBaseMacAclTable\n\
    \      The ACL table is used to configure stations' Access Control Lists\n   \
    \   (ACLs).\n   3) capwapBaseWtpProfileTable\n      The WTP profile table is used\
    \ to configure WTP profiles for WTPs\n      to be managed before they connect\
    \ to the AC.  An operator could\n      change a WTP's current configuration by\
    \ changing the values of\n      parameters in the corresponding WTP profile, then\
    \ the WTP could\n      get the new configuration through the CAPWAP control channel.\n\
    \   4) capwapBaseWtpStateTable\n      The state table of WTPs is used to indicate\
    \ the AC's CAPWAP FSM\n      state for each WTP, and helps the operator to query\
    \ a WTP's\n      current configuration.\n   5) capwapBaseWtpTable\n      The WTP\
    \ table is used to display properties of the WTPs in running\n      state.\n \
    \  6) capwapBaseWirelessBindingTable\n      The wireless binding table is used\
    \ to display the mappings between\n      WTP Virtual Radio Interfaces and PHY\
    \ radios, and the wireless\n      binding type for each PHY radio.\n   7) capwapBaseStationTable\n\
    \      The station table is used for providing stations' basic property\n    \
    \  information.\n   8) capwapBaseWtpEventsStatsTable\n      The WTP events statistic\
    \ table is used for collecting WTP reboot\n      count, link failure count, hardware\
    \ failure count and so on.\n   9) capwapBaseRadioEventsStatsTable\n      The radio\
    \ events statistic table is used for collecting radio\n      reset count, channel\
    \ change count, hardware failure count, and so\n      on.\n"
- title: 7.  Relationship to Other MIB Modules
  contents:
  - '7.  Relationship to Other MIB Modules

    '
- title: 7.1.  Relationship to SNMPv2-MIB Module
  contents:
  - "7.1.  Relationship to SNMPv2-MIB Module\n   The CAPWAP-BASE-MIB module does not\
    \ duplicate the objects of the\n   'system' group in the SNMPv2-MIB [RFC3418]\
    \ that is defined as being\n   mandatory for all systems, and the objects apply\
    \ to the entity as a\n   whole.  The 'system' group provides identification of\
    \ the management\n   entity and certain other system-wide data.\n"
- title: 7.2.  Relationship to IF-MIB Module
  contents:
  - "7.2.  Relationship to IF-MIB Module\n   The Interfaces Group [RFC2863] defines\
    \ generic managed objects for\n   managing interfaces.  This memo contains the\
    \ media-specific\n   extensions to the Interfaces Group for managing WTP PHY radios\
    \ that\n   are modeled as interfaces.\n   The IF-MIB module is required to be\
    \ supported on the AC.  Each PHY\n   radio on the WTP corresponds to a WTP Virtual\
    \ Radio Interface on the\n   AC.  The WTP Virtual Radio Interface provides a way\
    \ to configure the\n   radio's parameters and query radio's traffic statistics,\
    \ and reuse\n   wireless binding modules defined by other SDOs.  The interface\
    \ MUST\n   be modeled as an ifEntry, and ifEntry objects such as ifIndex,\n  \
    \ ifDescr, ifName, and ifAlias are to be used as per [RFC2863].\n   Also, as an\
    \ ifIndex [RFC2863] is used as a common index for\n   corresponding interfaces\
    \ in the CAPWAP-BASE-MIB and specific wireless\n   technologies MIB modules, the\
    \ AC MUST have a mechanism that preserves\n   the values of the ifIndexes in the\
    \ ifTable at AC reboot.\n"
- title: 7.3.  Relationship to ENTITY-MIB Module
  contents:
  - "7.3.  Relationship to ENTITY-MIB Module\n   The ENTITY-MIB module [RFC4133] meets\
    \ the need for a standardized way\n   of representing a single agent that supports\
    \ multiple instances of\n   one MIB.  It could express a certain relationship\
    \ between multiple\n   entities and provide entity properties for each entity.\n\
    \   In a centralized WLAN architecture, the SNMP agent runs on the AC and\n  \
    \ is not required on the WTP.  With the ENTITY-MIB module on the AC, it\n   could\
    \ keep entity information such as firmware revision and software\n   revision\
    \ of the AC and WTPs.  From the ENTITY-MIB module's\n   perspective, the overall\
    \ physical entity (AC) is a 'compound' of\n   multiple physical entities (that\
    \ is, the WTPs connected to AC), and\n   all entities are each identified by a\
    \ physical index.  The\n   capwapBaseWtpTable of the CAPWAP-BASE-MIB module uses\
    \ the\n   capwapBaseWtpPhyIndex object to store the mappings of WTP object\n \
    \  between CAPWAP-BASE-MIB and ENTITY-MIB modules.\n   By querying both the CAPWAP-BASE-MIB\
    \ and ENTITY-MIB modules,\n   operators could query the status and properties\
    \ of the AC and WTPs.\n   For example, they could get a WTP's current status through\
    \ the\n   CAPWAP-BASE-MIB module, and a WTP's software revision information\n\
    \   through the ENTITY-MIB module.  The CAPWAP-BASE-MIB module does not\n   duplicate\
    \ those objects defined in the ENTITY-MIB module.\n"
- title: 7.4.  Relationship to Wireless Binding MIB Modules
  contents:
  - "7.4.  Relationship to Wireless Binding MIB Modules\n   The wireless binding MIB\
    \ module of a wireless technology (such as\n   [IEEE.802-11.2007]) is required\
    \ to be supported on the AC.  The\n   CAPWAP-BASE-MIB module is able to support\
    \ any wireless binding.\n   Through the ifIndexes of WTP Virtual Radio Interfaces,\
    \ it provides a\n   consistent and abstract way of reusing MIB objects in the\
    \ wireless\n   binding MIB modules.  The CAPWAP-BASE-MIB module does not duplicate\n\
    \   those objects defined in the wireless binding MIB modules.\n"
- title: 7.5.  MIB Modules Required for IMPORTS
  contents:
  - "7.5.  MIB Modules Required for IMPORTS\n   The following MIB module IMPORTS objects\
    \ from SYSAPPL-MIB [RFC2287],\n   SNMPv2-SMI [RFC2578], SNMPv2-TC [RFC2579], SNMPv2-CONF\
    \ [RFC2580],\n   IF-MIB [RFC2863], SNMP-FRAMEWORK-MIB [RFC3411], INET-ADDRESS-MIB\n\
    \   [RFC4001], and ENTITY-MIB [RFC4133].\n"
- title: 8.  Example of CAPWAP-BASE-MIB Module Usage
  contents:
  - "8.  Example of CAPWAP-BASE-MIB Module Usage\n   Below, the IEEE 802.11 binding\
    \ is used as an example of how the MIB\n   modules operate.\n   1) Create a WTP\
    \ profile.\n      Suppose the WTP's Base MAC address is '00:01:01:01:01:00'. \
    \ Create\n      the WTP profile as follows:\n     In capwapBaseWtpProfileTable\n\
    \     {\n       capwapBaseWtpProfileId                  = 1,\n       capwapBaseWtpProfileName\
    \                = 'WTP Profile 123456',\n       capwapBaseWtpProfileWtpMacAddress\
    \       = '00:01:01:01:01:00',\n       capwapBaseWtpProfileWtpModelNumber    \
    \         = 'WTP123',\n       capwapBaseWtpProfileWtpName                    =\
    \ 'WTP 123456',\n       capwapBaseWtpProfileWtpLocation                = 'office',\n\
    \       capwapBaseWtpProfileWtpStaticIpEnable          = true(1),\n       capwapBaseWtpProfileWtpStaticIpType\
    \            = ipv4(1),\n       capwapBaseWtpProfileWtpStaticIpAddress       \
    \  = '192.0.2.10',\n       capwapBaseWtpProfileWtpNetmask                 = '255.255.255.0',\n\
    \       capwapBaseWtpProfileWtpGateway                 = '192.0.2.1',\n      \
    \ capwapBaseWtpProfileWtpFallbackEnable          = true(1),\n       capwapBaseWtpProfileWtpEchoInterval\
    \            = 30,\n       capwapBaseWtpProfileWtpIdleTimeout             = 300,\n\
    \       capwapBaseWtpProfileWtpMaxDiscoveryInterval    = 20,\n       capwapBaseWtpProfileWtpReportInterval\
    \          = 120,\n       capwapBaseWtpProfileWtpStatisticsTimer         = 120,\n\
    \       capwapBaseWtpProfileWtpEcnSupport              = limited(0)\n     }\n\
    \      Suppose the WTP with model number 'WTP123' has one PHY radio,\n      which\
    \ is identified by ID 1.  The creation of this WTP profile\n      triggers the\
    \ AC to automatically create a WTP Virtual Radio\n      Interface and add a new\
    \ row object to the\n      capwapBaseWirelessBindingTable without manual intervention.\n\
    \      Suppose the ifIndex of the WTP Virtual Radio Interface is 10.  The\n  \
    \    following information is stored in the\n      capwapBaseWirelessBindingTable.\n\
    \      In capwapBaseWirelessBindingTable\n      {\n        capwapBaseWtpProfileId\
    \                          = 1,\n        capwapBaseWirelessBindingRadioId    \
    \            = 1,\n        capwapBaseWirelessBindingVirtualRadioIfIndex    = 10,\n\
    \        capwapBaseWirelessBindingType                   = dot11(2)\n      }\n\
    \      The WTP Virtual Radio Interfaces on the AC correspond to the PHY\n    \
    \  radios on the WTP.  The WTP Virtual Radio Interface is modeled by\n      ifTable\
    \ [RFC2863].\n      In ifTable\n      {\n        ifIndex              = 10,\n\
    \        ifDescr              = 'WTP Virtual Radio Interface',\n        ifType\
    \               = 254,\n        ifMtu                = 0,\n        ifSpeed   \
    \           = 0,\n        ifPhysAddress        = '00:00:00:00:00:00',\n      \
    \  ifAdminStatus        = true(1),\n        ifOperStatus         = false(0),\n\
    \        ifLastChange         = 0,\n        ifInOctets           = 0,\n      \
    \  ifInUcastPkts        = 0,\n        ifInDiscards         = 0,\n        ifInErrors\
    \           = 0,\n        ifInUnknownProtos    = 0,\n        ifOutOctets     \
    \     = 0,\n        ifOutUcastPkts       = 0,\n        ifOutDiscards        =\
    \ 0,\n        ifOutErrors          = 0\n       }\n   2) Query the ifIndexes of\
    \ WTP Virtual Radio Interfaces.\n      Before configuring PHY radios, the operator\
    \ needs to get the\n      ifIndexes of WTP Virtual Radio Interfaces corresponding\
    \ to the PHY\n      radios.\n      As capwapBaseWirelessBindingTable already stores\
    \ the mappings\n      between PHY radios (Radio IDs) and the ifIndexes of WTP\
    \ Virtual\n      Radio Interfaces, the operator can get the ifIndex information\
    \ by\n      querying this table.  Such a query operation SHOULD run from radio\n\
    \      ID 1 to radio ID 31 according to [RFC5415]), and stop when an\n      invalid\
    \ ifIndex value (0) is returned.\n      This example uses capwapBaseWtpProfileId\
    \ = 1 and\n      capwapBaseWirelessBindingRadioId = 1 as inputs to query the\n\
    \      capwapBaseWirelessBindingTable, and gets\n      capwapBaseWirelessBindingVirtualRadioIfIndex\
    \ = 10.  Then it uses\n      capwapBaseWtpProfileId = 1 and capwapBaseWirelessBindingRadioId\
    \ =\n      2, and gets an invalid ifIndex value (0), so the query operation\n\
    \      ends.  This method gets not only the ifIndexes of WTP Virtual\n      Radio\
    \ Interfaces, but also the numbers of PHY radios.  Besides\n      checking whether\
    \ the ifIndex value is valid, the operator SHOULD\n      check whether the capwapBaseWirelessBindingType\
    \ is the desired\n      binding type.\n   3) Configure specific wireless binding\
    \ parameters for a WTP Virtual\n   Radio Interface.\n      This configuration\
    \ is made on the AC through a specific wireless\n      binding MIB module such\
    \ as the IEEE 802.11 MIB module.\n      The following shows an example of configuring\
    \ parameters for a WTP\n      Virtual Radio Interface with ifIndex 10 through\
    \ the IEEE 802.11\n      dot11OperationTable [IEEE.802-11.2007].\n      In dot11OperationTable\n\
    \      {\n        ifIndex                                  = 10,\n        dot11MACAddress\
    \                          = '00:00:00:00:00:00',\n        dot11RTSThreshold \
    \                       = 2347,\n        dot11ShortRetryLimit                \
    \     = 7,\n        dot11LongRetryLimit                      = 4,\n        dot11FragmentationThreshold\
    \              = 256,\n        dot11MaxTransmitMSDULifetime             = 512,\n\
    \        dot11MaxReceiveLifetime                  = 512,\n        dot11ManufacturerID\
    \                      = 'capwap',\n        dot11ProductID                   \
    \        = 'capwap',\n        dot11CAPLimit                            = 2,\n\
    \        dot11HCCWmin                             = 0,\n        dot11HCCWmax \
    \                            = 0,\n        dot11HCCAIFSN                     \
    \       = 1,\n        dot11ADDBAResponseTimeout                = 1,\n        dot11ADDTSResponseTimeout\
    \                = 1,\n        dot11ChannelUtilizationBeaconInterval    = 50,\n\
    \        dot11ScheduleTimeout                     = 10,\n        dot11DLSResponseTimeout\
    \                  = 10,\n        dot11QAPMissingAckRetryLimit             = 1,\n\
    \        dot11EDCAAveragingPeriod                 = 5\n      }\n   4) Get the\
    \ current configuration status report from the WTP to the\n   AC.\n      According\
    \ to [RFC5415], before a WTP that has joined the AC gets\n      configuration\
    \ from the AC, it needs to report its current\n      configuration status by sending\
    \ a configuration status request\n      message to the AC, which uses the message\
    \ to update MIB objects on\n      the AC.  For example, for IEEE 802.11 binding,\
    \ the AC updates data\n      in the ifTable [RFC2863] and IEEE 802.11 MIB module,\
    \ and so on,\n      according to the message.  For ifIndex 10, its ifOperStatus\
    \ in\n      ifTable is updated according to the current radio operational\n  \
    \    status in the CAPWAP message.\n   5) Query WTP and radio statistical data.\n\
    \      After WTPs start to run, the operator could query WTP and radio\n     \
    \ statistical data through CAPWAP-BASE-MIB and the specific binding\n      MIB\
    \ module on the AC.  For example, through dot11CountersTable in\n      the IEEE\
    \ 802.11 MIB module, the operator could query the counter\n      data of a radio\
    \ using the ifIndex of the corresponding WTP Virtual\n      Radio Interface. \
    \ With the capwapBaseWtpTable table in the CAPWAP-\n      BASE-MIB module, the\
    \ operator could query the properties of\n      running WTPs.\n   6) Run MIB operations\
    \ through a CAPWAP protocol wireless binding MIB\n   module.\n      For example,\
    \ for the CAPWAP IEEE 802.11 binding protocol\n      [RFC5416], some MIB operations\
    \ such as MAC mode configuration for\n      a WLAN depend on the CAPWAP Protocol\
    \ Binding MIB for IEEE 802.11\n      [RFC5834].  For more information, refer to\
    \ [RFC5834].\n   7) Query other properties of a WTP.\n      The Operator could\
    \ query MIB objects in the ENTITY-MIB [RFC4133]\n      module by using the capwapBaseWtpPhyIndex\
    \ in the\n      capwapBaseWtpTable of CAPWAP-BASE-MIB module.  The properties\
    \ of a\n      WTP such as software version, hardware version are available in\n\
    \      the ENTITY-MIB module.\n"
- title: 9.  Definitions
  contents:
  - '9.  Definitions

    '
- title: CAPWAP-BASE-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'CAPWAP-BASE-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n   PhysAddress, TEXTUAL-CONVENTION, TruthValue,\n   DateAndTime, RowStatus\n\
    \       FROM SNMPv2-TC\n   LongUtf8String\n       FROM SYSAPPL-MIB\n   InterfaceIndex,\
    \ ifGeneralInformationGroup\n       FROM IF-MIB\n   PhysicalIndex\n       FROM\
    \ ENTITY-MIB\n   SnmpAdminString\n       FROM SNMP-FRAMEWORK-MIB\n   NOTIFICATION-GROUP,\
    \ OBJECT-GROUP, MODULE-COMPLIANCE\n       FROM SNMPv2-CONF\n   MODULE-IDENTITY,\
    \ OBJECT-TYPE, NOTIFICATION-TYPE, mib-2,\n   Integer32, Unsigned32, Counter32,\
    \ Gauge32, TimeTicks\n       FROM SNMPv2-SMI\n   InetAddressType, InetAddress\n\
    \       FROM INET-ADDRESS-MIB;\n"
- title: capwapBaseMIB MODULE-IDENTITY
  contents:
  - "capwapBaseMIB MODULE-IDENTITY\n    LAST-UPDATED \"201004300000Z\"        -- 30\
    \ April 2010\n    ORGANIZATION \"IETF Control And Provisioning of Wireless Access\n\
    \                  Points (CAPWAP) Working Group\n                  http://www.ietf.org/html.charters/capwap-charter.html\"\
    \n    CONTACT-INFO\n        \"General Discussion: capwap@frascone.com\n      \
    \   To Subscribe: http://lists.frascone.com/mailman/listinfo/capwap\n        \
    \ Yang Shi (editor)\n         Hangzhou H3C Tech. Co., Ltd.\n         Beijing R&D\
    \ Center of H3C, Digital Technology Plaza\n         NO. 9 Shangdi 9th Street,\
    \ Haidian District\n         Beijing  100085\n         China\n         Phone:\
    \ +86 010 82775276\n         Email: rishyang@gmail.com\n         David T. Perkins\
    \ (editor)\n         228 Bayview Dr.\n         San Carlos, CA  94070\n       \
    \  USA\n         Phone: +1 408 394-8702\n         Email: dperkins@dsperkins.com\n\
    \         Chris Elliott (editor)\n         1516 Kent St.\n         Durham, NC\
    \  27707\n         USA\n         Phone: +1 919-308-1216\n         Email: chelliot@pobox.com\n\
    \         Yong Zhang (editor)\n         Fortinet, Inc.\n         1090 Kifer Road\n\
    \         Sunnyvale, CA  94086\n         USA\n         Email: yzhang@fortinet.com\"\
    \n    DESCRIPTION\n        \"Copyright (c) 2010 IETF Trust and the persons identified\
    \ as\n         authors of the code. All rights reserved.\n         Redistribution\
    \ and use in source and binary forms, with or\n         without modification,\
    \ is permitted pursuant to, and subject\n         to the license terms contained\
    \ in, the Simplified BSD License\n         set forth in Section 4.c of the IETF\
    \ Trust's Legal Provisions\n         Relating to IETF Documents\n         (http://trustee.ietf.org/license-info).\n\
    \         This version of this MIB module is part of RFC 5833;\n         see the\
    \ RFC itself for full legal notices.\n         This MIB module contains managed\
    \ object definitions for\n         the CAPWAP Protocol.\"\n    REVISION    \"\
    201004300000Z\"\n    DESCRIPTION\n        \"Initial version published as RFC 5833\"\
    \n         ::= { mib-2 196 }\n"
- title: -- Textual Conventions
  contents:
  - '-- Textual Conventions

    '
- title: CapwapBaseWtpProfileIdTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseWtpProfileIdTC ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"d\"\n   \
    \ STATUS      current\n    DESCRIPTION\n        \"Represents the unique identifier\
    \ of a WTP profile.\"\n    SYNTAX      Unsigned32 (0..4096)\n"
- title: CapwapBaseWtpIdTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseWtpIdTC ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1x:\"\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Represents the unique identifier of\
    \ a WTP instance.\n         As usual, the Base MAC address of the WTP is used.\"\
    \n    SYNTAX      OCTET STRING (SIZE(6|8))\n"
- title: CapwapBaseStationIdTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseStationIdTC ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1x:\"\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Represents the unique identifier of\
    \ a station instance.\n         As usual, the MAC address of the station is used.\"\
    \n    SYNTAX      OCTET STRING (SIZE(6|8))\n"
- title: CapwapBaseRadioIdTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseRadioIdTC ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"d\"\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Represents the unique identifier of\
    \ a radio on a WTP.\"\n    SYNTAX      Unsigned32 (1..31)\n"
- title: CapwapBaseTunnelModeTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseTunnelModeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the tunneling modes of operation that are\n         supported\
    \ by a WTP.\n         The WTP MAY support more than one option, represented by\n\
    \         the bit field below:\n           localBridging(0) - Local bridging mode\n\
    \           dot3Tunnel(1)    - 802.3 frame tunnel mode\n           nativeTunnel(2)\
    \  - Native frame tunnel mode\"\n    REFERENCE\n        \"Section 4.6.43 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    SYNTAX      BITS {\n              \
    \    localBridging(0),\n                  dot3Tunnel(1),\n                  nativeTunnel(2)\n\
    \                }\n"
- title: CapwapBaseMacTypeTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseMacTypeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the MAC mode of operation supported by a WTP.\n        \
    \ The following enumerated values are supported:\n           localMAC(0) - Local-MAC\
    \ mode\n           splitMAC(1) - Split-MAC mode\n           both(2)     - Both\
    \ Local-MAC and Split-MAC\n         Note that the CAPWAP field [RFC5415] modeled\
    \ by this\n         object takes zero as starting value; this MIB object\n   \
    \      follows that rule.\"\n    REFERENCE\n        \"Section 4.6.44 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    SYNTAX      INTEGER {\n           \
    \       localMAC(0),\n                  splitMAC(1),\n                  both(2)\n\
    \                }\n"
- title: CapwapBaseChannelTypeTC::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseChannelTypeTC::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the channel type for CAPWAP protocol.\n         The following\
    \ enumerated values are supported:\n           data(1)    - Data channel\n   \
    \        control(2) - Control channel\"\n    SYNTAX      INTEGER {\n         \
    \         data(1),\n                  control(2)\n                }\n"
- title: CapwapBaseAuthenMethodTC ::= TEXTUAL-CONVENTION
  contents:
  - "CapwapBaseAuthenMethodTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n  \
    \  DESCRIPTION\n        \"Represents the authentication credential type for a\
    \ WTP.\n         The following enumerated values are supported:\n           other(1)\
    \ - Other method, for example, vendor specific\n           clear(2) - Clear text\
    \ and no authentication\n           x509(3)  - X.509 certificate authentication\n\
    \           psk(4)   - Pre-Shared secret authentication\n         As a mandatory\
    \ requirement, CAPWAP control channel\n         authentication SHOULD use DTLS,\
    \ either by certificate or\n         PSK.  For data channel authentication, DTLS\
    \ is optional.\"\n    SYNTAX      INTEGER {\n                  other(1),\n   \
    \               clear(2),\n                  x509(3),\n                  psk(4)\n\
    \                }\n"
- title: -- Top-level components of this MIB module
  contents:
  - '-- Top-level components of this MIB module

    '
- title: -- Notifications
  contents:
  - '-- Notifications

    '
- title: capwapBaseNotifications OBJECT IDENTIFIER
  contents:
  - "capwapBaseNotifications OBJECT IDENTIFIER\n    ::= { capwapBaseMIB 0 }\n"
- title: -- Tables, Scalars
  contents:
  - '-- Tables, Scalars

    '
- title: capwapBaseObjects OBJECT IDENTIFIER
  contents:
  - "capwapBaseObjects OBJECT IDENTIFIER\n    ::= { capwapBaseMIB 1 }\n"
- title: -- Conformance
  contents:
  - '-- Conformance

    '
- title: capwapBaseConformance OBJECT IDENTIFIER
  contents:
  - "capwapBaseConformance OBJECT IDENTIFIER\n    ::= { capwapBaseMIB 2 }\n"
- title: -- AC Objects Group
  contents:
  - '-- AC Objects Group

    '
- title: capwapBaseAc OBJECT IDENTIFIER
  contents:
  - "capwapBaseAc OBJECT IDENTIFIER\n    ::= { capwapBaseObjects 1 }\n"
- title: capwapBaseWtpSessions OBJECT-TYPE
  contents:
  - "capwapBaseWtpSessions OBJECT-TYPE\n    SYNTAX      Gauge32 (0..65535)\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Represents the\
    \ total number of WTPs that are connecting to\n         the AC.\"\n    REFERENCE\n\
    \        \"Section 4.6.1 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseAc 1 }\n"
- title: capwapBaseWtpSessionsLimit  OBJECT-TYPE
  contents:
  - "capwapBaseWtpSessionsLimit  OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..65535)\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents the maximum number of WTP sessions configured on\n         the\
    \ AC.\n         The value of the object is persistent at restart/reboot.\"\n \
    \   REFERENCE\n        \"Section 4.6.1 of CAPWAP Protocol Specification, RFC 5415.\"\
    \n    ::= { capwapBaseAc 2 }\n"
- title: capwapBaseStationSessions  OBJECT-TYPE
  contents:
  - "capwapBaseStationSessions  OBJECT-TYPE\n    SYNTAX      Gauge32 (0..65535)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the total number of stations that are accessing\n         the wireless\
    \ service provided by the AC.\"\n    REFERENCE\n        \"Section 4.6.1 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseAc 3 }\n"
- title: capwapBaseStationSessionsLimit  OBJECT-TYPE
  contents:
  - "capwapBaseStationSessionsLimit  OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..65535)\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents the maximum number of station sessions configured\n         on\
    \ the AC.\n         The value of the object is persistent at restart/reboot.\"\
    \n    REFERENCE\n        \"Section 4.6.1 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseAc 4 }\n"
- title: capwapBaseDataChannelDTLSPolicyOptions  OBJECT-TYPE
  contents:
  - "capwapBaseDataChannelDTLSPolicyOptions  OBJECT-TYPE\n    SYNTAX      BITS {\n\
    \                  other(0),\n                  clear(1),\n                  dtls(2)\n\
    \                }\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The AC communicates its policy on the use of DTLS for\n         the\
    \ CAPWAP data channel.\n         The AC MAY support more than one option, represented\
    \ by the bit\n         field below:\n           other(0) - Other method, for example,\
    \ vendor specific\n           clear(1) - Clear text\n           dtls(2)  - DTLS\"\
    \n    REFERENCE\n        \"Section 4.6.1 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseAc 5 }\n"
- title: capwapBaseControlChannelAuthenOptions  OBJECT-TYPE
  contents:
  - "capwapBaseControlChannelAuthenOptions  OBJECT-TYPE\n    SYNTAX      BITS {\n\
    \                  x509(0),\n                  psk(1)\n                }\n   \
    \ MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the authentication credential type supported by the\n         AC for\
    \ CAPWAP control channel.\n         The AC MAY support more than one option, represented\
    \ by the bit\n         field below:\n           x509(0) - X.509 certificate based\n\
    \           psk(1)  - Pre-Shared secret\"\n    REFERENCE\n        \"Section 4.6.1\
    \ of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseAc 6 }\n"
- title: -- capwapBaseAcNameListTable table
  contents:
  - '-- capwapBaseAcNameListTable table

    '
- title: capwapBaseAcNameListTable OBJECT-TYPE
  contents:
  - "capwapBaseAcNameListTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseAcNameListEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that configure the AC name list.\n         Values\
    \ of all read-create objects in this table are\n         persistent at restart/reboot.\"\
    \n    REFERENCE\n        \"Section 4.6.5 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseAc 9 }\n"
- title: capwapBaseAcNameListEntry  OBJECT-TYPE
  contents:
  - "capwapBaseAcNameListEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseAcNameListEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that configures the AC name list.\"\n    INDEX { capwapBaseAcNameListId\
    \ }\n    ::= { capwapBaseAcNameListTable 1 }\n"
- title: CapwapBaseAcNameListEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseAcNameListEntry ::= SEQUENCE {\n      capwapBaseAcNameListId      \
    \    Unsigned32,\n      capwapBaseAcNameListName        LongUtf8String,\n    \
    \  capwapBaseAcNameListPriority    Unsigned32,\n      capwapBaseAcNameListRowStatus\
    \   RowStatus\n    }\n"
- title: capwapBaseAcNameListId OBJECT-TYPE
  contents:
  - "capwapBaseAcNameListId OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..255)\n   \
    \ MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the unique identifier of an AC Name list.\"\n    ::= { capwapBaseAcNameListEntry\
    \ 1 }\n"
- title: capwapBaseAcNameListName OBJECT-TYPE
  contents:
  - "capwapBaseAcNameListName OBJECT-TYPE\n    SYNTAX      LongUtf8String (SIZE(1..512))\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the name of an AC, and it is expected to be\n         an UTF-8\
    \ encoded string.\"\n    REFERENCE\n        \"Section 4.6.5 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    ::= { capwapBaseAcNameListEntry 2 }\n"
- title: capwapBaseAcNameListPriority OBJECT-TYPE
  contents:
  - "capwapBaseAcNameListPriority OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..255)\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the priority order of the preferred AC.\n         For instance,\
    \ the value of one (1) is used to set the primary\n         AC, the value of two\
    \ (2) is used to set the secondary AC, etc.\"\n    REFERENCE\n        \"Section\
    \ 4.6.5 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseAcNameListEntry\
    \ 3 }\n"
- title: capwapBaseAcNameListRowStatus OBJECT-TYPE
  contents:
  - "capwapBaseAcNameListRowStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"This object\
    \ is used to create, modify, and/or delete a row\n         in this table.\n  \
    \       The value of capwapBaseAcNameListName and\n         capwapBaseAcNameListPriority\
    \ can be changed when this\n         object is in state 'active' or in 'notInService'.\n\
    \         The capwapBaseAcNameListRowStatus may be changed to 'active'\n     \
    \    if all the managed objects in the conceptual row with\n         MAX-ACCESS\
    \ read-create have been assigned valid values.\"\n    ::= { capwapBaseAcNameListEntry\
    \ 4 }\n"
- title: -- End of capwapBaseAcNameListTable table
  contents:
  - '-- End of capwapBaseAcNameListTable table

    '
- title: -- capwapBaseMacAclTable table
  contents:
  - '-- capwapBaseMacAclTable table

    '
- title: capwapBaseMacAclTable OBJECT-TYPE
  contents:
  - "capwapBaseMacAclTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseMacAclEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that configure station Access Control\n         Lists\
    \ (ACLs).\n         The WTP will not provide service to the MAC addresses\n  \
    \       configured in this table.\n         Values of all read-create objects\
    \ in this table are persistent\n         at AC restart/reboot.\"\n    REFERENCE\n\
    \        \"Section 4.6.7 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseAc 10 }\n"
- title: capwapBaseMacAclEntry  OBJECT-TYPE
  contents:
  - "capwapBaseMacAclEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseMacAclEntry\n \
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n   \
    \     \"A set of objects that configures station Access Control\n         Lists\
    \ (ACLs).\"\n    INDEX { capwapBaseMacAclId }\n    ::= { capwapBaseMacAclTable\
    \ 1 }\n"
- title: CapwapBaseMacAclEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseMacAclEntry ::= SEQUENCE {\n      capwapBaseMacAclId           Unsigned32,\n\
    \      capwapBaseMacAclStationId    CapwapBaseStationIdTC,\n      capwapBaseMacAclRowStatus\
    \    RowStatus\n    }\n"
- title: capwapBaseMacAclId OBJECT-TYPE
  contents:
  - "capwapBaseMacAclId OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Represents the unique identifier\
    \ of an ACL.\"\n    ::= { capwapBaseMacAclEntry 1 }\n"
- title: capwapBaseMacAclStationId OBJECT-TYPE
  contents:
  - "capwapBaseMacAclStationId OBJECT-TYPE\n    SYNTAX      CapwapBaseStationIdTC\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the MAC address of a station to which WTPs will\n         no\
    \ longer provides service.\"\n    REFERENCE\n        \"Section 4.6.7 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseMacAclEntry 2 }\n"
- title: capwapBaseMacAclRowStatus OBJECT-TYPE
  contents:
  - "capwapBaseMacAclRowStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"This object\
    \ is used to create, modify, and/or delete a row\n         in this table.\n  \
    \       The value of capwapBaseMacAclStationId can be changed when\n         this\
    \ object is in state 'active' or in 'notInService'.\n         The capwapBaseMacAclRowStatus\
    \ may be changed to 'active'\n         if all the managed objects in the conceptual\
    \ row with\n         MAX-ACCESS read-create have been assigned valid values.\"\
    \n    ::= { capwapBaseMacAclEntry 3 }\n"
- title: -- End of capwapBaseMacAclTable table
  contents:
  - '-- End of capwapBaseMacAclTable table

    '
- title: -- End of AC Objects Group
  contents:
  - '-- End of AC Objects Group

    '
- title: -- WTP Objects Group
  contents:
  - '-- WTP Objects Group

    '
- title: capwapBaseWtps OBJECT IDENTIFIER
  contents:
  - "capwapBaseWtps OBJECT IDENTIFIER\n    ::= { capwapBaseObjects 2 }\n"
- title: -- capwapBaseWtpProfileTable Table
  contents:
  - '-- capwapBaseWtpProfileTable Table

    '
- title: capwapBaseWtpProfileTable OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseWtpProfileEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that configure WTP profiles for WTPs to\n        \
    \ be managed before they connect to the AC.\n         An operator could change\
    \ a WTP's configuration by changing\n         the values of parameters in the\
    \ corresponding WTP profile,\n         then the WTP could get the new configuration\
    \ through the\n         CAPWAP control channel.\n         Values of all read-create\
    \ objects in this table are\n         persistent at restart/reboot.\"\n    ::=\
    \ { capwapBaseWtps 1 }\n"
- title: capwapBaseWtpProfileEntry  OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpProfileEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that configures and displays a WTP profile.\"\n    INDEX\
    \ { capwapBaseWtpProfileId }\n    ::= { capwapBaseWtpProfileTable 1 }\n"
- title: CapwapBaseWtpProfileEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseWtpProfileEntry ::= SEQUENCE {\n      capwapBaseWtpProfileId      \
    \            CapwapBaseWtpProfileIdTC,\n      capwapBaseWtpProfileName       \
    \                SnmpAdminString,\n      capwapBaseWtpProfileWtpMacAddress   \
    \           CapwapBaseWtpIdTC,\n      capwapBaseWtpProfileWtpModelNumber     \
    \        SnmpAdminString,\n      capwapBaseWtpProfileWtpName                 \
    \   LongUtf8String,\n      capwapBaseWtpProfileWtpLocation                LongUtf8String,\n\
    \      capwapBaseWtpProfileWtpStaticIpEnable          TruthValue,\n      capwapBaseWtpProfileWtpStaticIpType\
    \            InetAddressType,\n      capwapBaseWtpProfileWtpStaticIpAddress  \
    \       InetAddress,\n      capwapBaseWtpProfileWtpNetmask                 InetAddress,\n\
    \      capwapBaseWtpProfileWtpGateway                 InetAddress,\n      capwapBaseWtpProfileWtpFallbackEnable\
    \          INTEGER,\n      capwapBaseWtpProfileWtpEchoInterval            Unsigned32,\n\
    \      capwapBaseWtpProfileWtpIdleTimeout             Unsigned32,\n      capwapBaseWtpProfileWtpMaxDiscoveryInterval\
    \    Unsigned32,\n      capwapBaseWtpProfileWtpReportInterval          Unsigned32,\n\
    \      capwapBaseWtpProfileWtpStatisticsTimer         Unsigned32,\n      capwapBaseWtpProfileWtpEcnSupport\
    \              INTEGER,\n      capwapBaseWtpProfileRowStatus                 \
    \ RowStatus\n    }\n"
- title: capwapBaseWtpProfileId OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileId OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpProfileIdTC\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Represents the unique identifier of a WTP profile.\"\n    ::= { capwapBaseWtpProfileEntry\
    \ 1 }\n"
- title: capwapBaseWtpProfileName  OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileName  OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"Represents\
    \ the name of a WTP profile.\"\n    ::= { capwapBaseWtpProfileEntry 2 }\n"
- title: capwapBaseWtpProfileWtpMacAddress  OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpMacAddress  OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpIdTC\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the Base MAC address of a WTP.\n         A WTP profile MUST contain\
    \ the Base MAC address of the WTP\n         because the CAPWAP message received\
    \ from the WTP contains\n         its Base MAC address and the AC uses the Base\
    \ MAC address to\n         find the corresponding WTP profile.\n         Section\
    \ 4.6.40 of [RFC5415] omits indicating that the WTP's\n         Base MAC address\
    \ must be included in the WTP Board Data\n         message element.  This is a\
    \ known errata item and should be\n         fixed in any future revision of the\
    \ RFC 5415.\"\n    REFERENCE\n        \"Section 4.6.40 of CAPWAP Protocol Specification,\
    \ RFC 5415.\"\n    ::= { capwapBaseWtpProfileEntry 3 }\n"
- title: capwapBaseWtpProfileWtpModelNumber  OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpModelNumber  OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the model number of a WTP.\n         A WTP profile MUST include\
    \ the WTP's model number, which\n         reflects the number of Physical Layer\
    \ (PHY) radios on the WTP.\n         In this way, the creation of a WTP profile\
    \ triggers the AC\n         to automatically create the same number of WTP Virtual\
    \ Radio\n         Interfaces corresponding to the WTP's PHY radios without\n \
    \        manual intervention.  With the ifIndexes of WTP Virtual\n         Radio\
    \ Interfaces, the operator could configure and manage\n         the WTP's PHY\
    \ radios through the wireless binding MIB\n         modules.\"\n    REFERENCE\n\
    \        \"Section 4.6.40 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpProfileEntry 4 }\n"
- title: capwapBaseWtpProfileWtpName  OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpName  OBJECT-TYPE\n    SYNTAX      LongUtf8String (SIZE(1..512))\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents the name of the WTP.\"\n    REFERENCE\n        \"Section 4.6.45\
    \ of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpProfileEntry\
    \ 5 }\n"
- title: capwapBaseWtpProfileWtpLocation  OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpLocation  OBJECT-TYPE\n    SYNTAX      LongUtf8String\
    \ (SIZE(1..1024))\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the location of the WTP.\"\n    REFERENCE\n        \"Section\
    \ 4.6.30 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpProfileEntry\
    \ 6 }\n"
- title: capwapBaseWtpProfileWtpStaticIpEnable OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpStaticIpEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"Represents whether the WTP SHOULD use a static IP address\n         or not.\
    \  A value of false disables the static IP address,\n         while a value of\
    \ true enables it.\"\n    REFERENCE\n        \"Section 4.6.48 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    ::= { capwapBaseWtpProfileEntry 7 }\n"
- title: capwapBaseWtpProfileWtpStaticIpType OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpStaticIpType OBJECT-TYPE\n    SYNTAX      InetAddressType\
    \ {ipv4(1)}\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the static IP address type used by the WTP.\n         Only\
    \ ipv4(1) is supported by the object.\n         Although the CAPWAP protocol [RFC5415]\
    \ supports both IPv4\n         and IPv6, note that the CAPWAP field modeled by\
    \ this\n         object does not support IPv6, so the object does not\n      \
    \   support ipv6(2).\"\n    REFERENCE\n        \"Section 4.6.48 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    ::= { capwapBaseWtpProfileEntry 8 }\n"
- title: capwapBaseWtpProfileWtpStaticIpAddress OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpStaticIpAddress OBJECT-TYPE\n    SYNTAX      InetAddress\
    \ (SIZE(4))\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"When capwapBaseWtpProfileWtpStaticIpEnable is true,\n         it represents\
    \ the static IP address to be assigned to the WTP.\n         The format of this\
    \ IP address is determined by the\n         corresponding instance of object\n\
    \         capwapBaseWtpProfileWtpStaticIpType.\"\n    REFERENCE\n        \"Section\
    \ 4.6.48 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpProfileEntry\
    \ 9 }\n"
- title: capwapBaseWtpProfileWtpNetmask OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpNetmask OBJECT-TYPE\n    SYNTAX      InetAddress (SIZE(4))\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"When capwapBaseWtpProfileWtpStaticIpEnable is true,\n         it represents\
    \ the netmask to be assigned to the WTP.\n         The format of this netmask\
    \ is determined by the\n         corresponding instance of object\n         capwapBaseWtpProfileWtpStaticIpType.\"\
    \n    REFERENCE\n        \"Section 4.6.48 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseWtpProfileEntry 10 }\n"
- title: capwapBaseWtpProfileWtpGateway OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpGateway OBJECT-TYPE\n    SYNTAX      InetAddress (SIZE(4))\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"When capwapBaseWtpProfileWtpStaticIpEnable is true,\n         it represents\
    \ the gateway to be assigned to the WTP.\n         The format of this IP address\
    \ is determined by the\n         corresponding instance of object\n         capwapBaseWtpProfileWtpStaticIpType.\"\
    \n    REFERENCE\n        \"Section 4.6.48 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseWtpProfileEntry 11 }\n"
- title: capwapBaseWtpProfileWtpFallbackEnable OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpFallbackEnable OBJECT-TYPE\n    SYNTAX      INTEGER {\n\
    \                  enabled(1),\n                  disabled(2)\n              \
    \  }\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents whether to enable or disable automatic CAPWAP\n        \
    \ fallback in the event that a WTP detects its preferred AC\n         and is not\
    \ currently connected to it.\n         The following enumerated values are supported:\n\
    \           enabled(1)  - The fallback mode is enabled\n           disabled(2)\
    \ - The fallback mode is disabled\"\n    REFERENCE\n        \"Section 4.6.42 of\
    \ CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL { enabled }\n     ::=\
    \ { capwapBaseWtpProfileEntry 12 }\n"
- title: capwapBaseWtpProfileWtpEchoInterval OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpEchoInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the minimum time, in seconds, between sending\
    \ Echo\n         Request messages to the AC that the WTP has joined.\"\n    REFERENCE\n\
    \        \"Section 4.7.7 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL\
    \ { 30 }\n    ::= { capwapBaseWtpProfileEntry 13 }\n"
- title: capwapBaseWtpProfileWtpIdleTimeout OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpIdleTimeout OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the idle timeout value that the WTP SHOULD\
    \ enforce\n         for its active stations.\"\n    REFERENCE\n        \"Section\
    \ 4.7.8 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL { 300 }\n  \
    \  ::= { capwapBaseWtpProfileEntry 14 }\n"
- title: capwapBaseWtpProfileWtpMaxDiscoveryInterval OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpMaxDiscoveryInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\
    \ (2..180)\n    UNITS       \"second\"\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Represents the maximum time allowed\
    \ between sending Discovery\n         Request messages, in seconds.\"\n    REFERENCE\n\
    \        \"Section 4.7.10 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL\
    \ { 20 }\n    ::= { capwapBaseWtpProfileEntry 15 }\n"
- title: capwapBaseWtpProfileWtpReportInterval OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpReportInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the interval for WTP to send the Decryption\
    \ Error\n         report.\"\n    REFERENCE\n        \"Section 4.7.11 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    DEFVAL { 120 }\n    ::= { capwapBaseWtpProfileEntry\
    \ 16 }\n"
- title: capwapBaseWtpProfileWtpStatisticsTimer OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpStatisticsTimer OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the interval the WTP uses between the WTP\
    \ Event\n         Requests it transmits to the AC to communicate its statistics,\n\
    \         in seconds.\"\n    REFERENCE\n        \"Section 4.7.14 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    DEFVAL { 120 }\n    ::= { capwapBaseWtpProfileEntry\
    \ 17 }\n"
- title: capwapBaseWtpProfileWtpEcnSupport OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileWtpEcnSupport OBJECT-TYPE\n    SYNTAX      INTEGER {\n  \
    \                limited(0),\n                  fullAndLimited(1)\n          \
    \      }\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the support for the Explicit Congestion Notification\n \
    \        (ECN) bits, as defined in [RFC3168].\n         The following enumerated\
    \ values are supported:\n           limited(0)        - Limited ECN support\n\
    \           fullAndLimited(1) - Full and limited ECN support\n         Note that\
    \ the CAPWAP field [RFC5415] modeled by this\n         object takes zero as starting\
    \ value; this MIB object follows\n         that rule.\"\n    REFERENCE\n     \
    \   \"Section 4.6.25 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= {\
    \ capwapBaseWtpProfileEntry 18 }\n"
- title: capwapBaseWtpProfileRowStatus OBJECT-TYPE
  contents:
  - "capwapBaseWtpProfileRowStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"This object\
    \ is used to create, modify, and/or delete a row\n         in this table.\n  \
    \       The value of capwapBaseWtpProfileName,\n         capwapBaseWtpProfileWtpName\
    \ and capwapBaseWtpProfileWtpLocation\n         can be changed when this object\
    \ is in state 'active' or in\n         'notInService'.\n         The other objects\
    \ in a row can be modified only when the value\n         of this object in the\
    \ corresponding conceptual row is not\n         'active'.  Thus, to modify one\
    \ or more of the objects in\n         this conceptual row:\n              a. change\
    \ the row status to 'notInService'\n              b. change the values of the\
    \ row\n              c. change the row status to 'active'\n         The capwapBaseWtpProfileRowStatus\
    \ may be changed to 'active'\n         if the managed objects capwapBaseWtpProfileName,\n\
    \         capwapBaseWtpProfileWtpMacAddress,\n         capwapBaseWtpProfileWtpModelNumber,\n\
    \         capwapBaseWtpProfileWtpName, and\n         capwapBaseWtpProfileWtpLocation\
    \ in the conceptual row\n         have been assigned valid values.\n         Deleting\
    \ a WTP profile in use will disconnect the WTP from\n         the AC.  So the\
    \ network management system SHOULD\n         ask the operator to confirm such\
    \ an operation.\n         When a WTP profile entry is removed from the table,\n\
    \         the corresponding WTP Virtual Radio Interfaces are also\n         removed\
    \ from the capwapBaseWirelessBindingTable and\n         ifTable [RFC2863].\n \
    \        Also, the related object instances SHOULD be removed from\n         the\
    \ wireless binding MIB modules such as the IEEE 802.11\n         MIB module [IEEE.802-11.2007].\"\
    \n    ::= { capwapBaseWtpProfileEntry 19 }\n"
- title: -- End of capwapBaseWtpProfileTable table
  contents:
  - '-- End of capwapBaseWtpProfileTable table

    '
- title: -- capwapBaseWtpStateTable table
  contents:
  - '-- capwapBaseWtpStateTable table

    '
- title: capwapBaseWtpStateTable OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseWtpStateEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that indicate the AC's CAPWAP FSM state\n        \
    \ for each WTP, and helps the operator to query a WTP's\n         current configuration.\"\
    \n    ::= { capwapBaseWtps 2 }\n"
- title: capwapBaseWtpStateEntry  OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpStateEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that displays the AC's CAPWAP FSM state\n         for\
    \ each WTP.\n         Also, the operator could query the current configuration\n\
    \         of a WTP by using the identifier of the corresponding\n         WTP\
    \ profile.\"\n    INDEX { capwapBaseWtpStateWtpId }\n    ::= { capwapBaseWtpStateTable\
    \ 1 }\n"
- title: CapwapBaseWtpStateEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseWtpStateEntry ::= SEQUENCE {\n      capwapBaseWtpStateWtpId       \
    \            CapwapBaseWtpIdTC,\n      capwapBaseWtpStateWtpIpAddressType    \
    \    InetAddressType,\n      capwapBaseWtpStateWtpIpAddress            InetAddress,\n\
    \      capwapBaseWtpStateWtpLocalIpAddressType   InetAddressType,\n      capwapBaseWtpStateWtpLocalIpAddress\
    \       InetAddress,\n      capwapBaseWtpStateWtpBaseMacAddress       PhysAddress,\n\
    \      capwapBaseWtpState                        INTEGER,\n      capwapBaseWtpStateWtpUpTime\
    \               TimeTicks,\n      capwapBaseWtpStateWtpCurrWtpProfileId     CapwapBaseWtpProfileIdTC\n\
    \    }\n"
- title: capwapBaseWtpStateWtpId OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpId OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpIdTC\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Represents\
    \ the unique identifier of a WTP.\"\n    ::= { capwapBaseWtpStateEntry 1 }\n"
- title: capwapBaseWtpStateWtpIpAddressType OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpIpAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the IP address type of a WTP.\n         Only ipv4(1) and ipv6(2)\
    \ are supported by the object.\"\n    ::= { capwapBaseWtpStateEntry 2 }\n"
- title: capwapBaseWtpStateWtpIpAddress OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpIpAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n   \
    \ MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the IP address of a WTP that corresponds to\n         the IP address\
    \ in the IP packet header.\n         The format of this IP address is determined\
    \ by\n         the corresponding instance of object\n         capwapBaseWtpStateWtpIpAddressType.\"\
    \n    REFERENCE\n        \"Section 4 of CAPWAP Protocol Specification, RFC 5415.\"\
    \n    ::= { capwapBaseWtpStateEntry 3 }\n"
- title: capwapBaseWtpStateWtpLocalIpAddressType OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpLocalIpAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the local IP address type of a WTP.\n         Only ipv4(1) and\
    \ ipv6(2) are supported by the object.\"\n    ::= { capwapBaseWtpStateEntry 4\
    \ }\n"
- title: capwapBaseWtpStateWtpLocalIpAddress OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpLocalIpAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the local IP address of a WTP and models the\n         CAPWAP Local\
    \ IPv4 Address or CAPWAP Local IPv6 Address fields\n         [RFC5415].\n    \
    \     If a Network Address Translation (NAT) device is present\n         between\
    \ WTP and AC, the value of\n         capwapBaseWtpStateWtpLocalIpAddress will\
    \ be different from the\n         value of capwapBaseWtpStateWtpIpAddress.\n \
    \        The format of this IP address is determined by\n         the corresponding\
    \ instance of object\n         capwapBaseWtpStateWtpLocalIpAddressType.\"\n  \
    \  REFERENCE\n        \"Sections 4.6.11 and 4.6.12 of CAPWAP Protocol Specification,\n\
    \         RFC 5415.\"\n    ::= { capwapBaseWtpStateEntry 5 }\n"
- title: capwapBaseWtpStateWtpBaseMacAddress  OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpBaseMacAddress  OBJECT-TYPE\n    SYNTAX      PhysAddress\
    \ (SIZE(6|8))\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the WTP's Base MAC Address, which MAY be\n         assigned\
    \ to the primary Ethernet interface.\n         The instance of the object corresponds\
    \ to the Base MAC Address\n         sub-element in the CAPWAP protocol [RFC5415].\"\
    \n    REFERENCE\n        \"Section 4.6.40 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseWtpStateEntry 6 }\n"
- title: capwapBaseWtpState  OBJECT-TYPE
  contents:
  - "capwapBaseWtpState  OBJECT-TYPE\n    SYNTAX      INTEGER {\n                \
    \  dtls(1),\n                  join(2),\n                  image(3),\n       \
    \           configure(4),\n                  dataCheck(5),\n                 \
    \ run(6),\n                  reset(7),\n                  dtlsTeardown(8),\n \
    \                 unknown(9)\n                }\n    MAX-ACCESS  read-only\n \
    \   STATUS      current\n    DESCRIPTION\n        \"Represents the various possibilities\
    \ of the AC's CAPWAP FSM\n         state for each WTP.\n         The following\
    \ enumerated values are supported:\n           dtls(1)         - DTLS negotiation\
    \ states, which include\n                             DTLS setup, authorize, DTLS\
    \ connect\n           join(2)         - The WTP is joining with the AC\n     \
    \      image(3)        - The WTP is downloading software\n           configure(4)\
    \    - The WTP is getting configuration from\n                             the\
    \ AC\n           dataCheck(5)    - The AC is waiting for the Data Channel Keep\n\
    \                             Alive Packet\n           run(6)          - The WTP\
    \ enters the running state\n           reset(7)        - The AC transmits a reset\
    \ request message\n                             to the WTP\n           dtlsTeardown(8)\
    \ - DTLS session is torn down\n           unknown(9)      - Operator already prepared\
    \ configuration\n                             for the WTP, while the WTP has not\n\
    \                             contacted the AC until now\"\n    REFERENCE\n  \
    \      \"Section 2.3.1 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpStateEntry 7 }\n"
- title: capwapBaseWtpStateWtpUpTime  OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpUpTime  OBJECT-TYPE\n    SYNTAX      TimeTicks\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Represents the\
    \ time (in hundredths of a second) since the\n         WTP has been in the running\
    \ state (corresponding to the\n         value run(6) of capwapBaseWtpState).\"\
    \n    ::= { capwapBaseWtpStateEntry 8 }\n"
- title: capwapBaseWtpStateWtpCurrWtpProfileId OBJECT-TYPE
  contents:
  - "capwapBaseWtpStateWtpCurrWtpProfileId OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpProfileIdTC\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the current identifier of a WTP profile.\n         The operator\
    \ could query a WTP's current configuration\n         with the identifier of a\
    \ WTP profile.\"\n    ::= { capwapBaseWtpStateEntry 9 }\n"
- title: -- End of capwapBaseWtpStateTable Table
  contents:
  - '-- End of capwapBaseWtpStateTable Table

    '
- title: -- capwapBaseWtpTable Table
  contents:
  - '-- capwapBaseWtpTable Table

    '
- title: capwapBaseWtpTable OBJECT-TYPE
  contents:
  - "capwapBaseWtpTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseWtpEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that display properties of the WTPs\n         in running\
    \ state.\"\n    ::= { capwapBaseWtps 3 }\n"
- title: capwapBaseWtpEntry  OBJECT-TYPE
  contents:
  - "capwapBaseWtpEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A set of\
    \ objects that displays properties of the WTPs\n         in running state.\"\n\
    \    INDEX { capwapBaseWtpCurrId }\n    ::= { capwapBaseWtpTable 1 }\n"
- title: CapwapBaseWtpEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseWtpEntry ::= SEQUENCE {\n      capwapBaseWtpCurrId                \
    \       CapwapBaseWtpIdTC,\n      capwapBaseWtpPhyIndex                     PhysicalIndex,\n\
    \      capwapBaseWtpBaseMacAddress               PhysAddress,\n      capwapBaseWtpTunnelModeOptions\
    \            CapwapBaseTunnelModeTC,\n      capwapBaseWtpMacTypeOptions      \
    \         CapwapBaseMacTypeTC,\n      capwapBaseWtpDiscoveryType             \
    \   INTEGER,\n      capwapBaseWtpRadiosInUseNum               Gauge32,\n     \
    \ capwapBaseWtpRadioNumLimit                Unsigned32,\n      capwapBaseWtpRetransmitCount\
    \              Counter32\n    }\n"
- title: capwapBaseWtpCurrId OBJECT-TYPE
  contents:
  - "capwapBaseWtpCurrId OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpIdTC\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Represents\
    \ the unique identifier of a WTP in running state.\"\n    ::= { capwapBaseWtpEntry\
    \ 1 }\n"
- title: capwapBaseWtpPhyIndex OBJECT-TYPE
  contents:
  - "capwapBaseWtpPhyIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Represents the\
    \ unique physical index of a physical entity\n         in the ENTITY-MIB module\
    \ [RFC4133].\n         Information about a specific WTP such as its software version\n\
    \         could be accessed through this index.\"\n    ::= { capwapBaseWtpEntry\
    \ 2 }\n"
- title: capwapBaseWtpBaseMacAddress  OBJECT-TYPE
  contents:
  - "capwapBaseWtpBaseMacAddress  OBJECT-TYPE\n    SYNTAX      PhysAddress (SIZE(6|8))\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the WTP's Base MAC Address, which MAY be assigned\n         to\
    \ the primary Ethernet interface.\n         The instance of the object corresponds\
    \ to the Base MAC Address\n         sub-element in the CAPWAP protocol [RFC5415].\"\
    \n    REFERENCE\n        \"Section 4.6.40 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseWtpEntry 3 }\n"
- title: capwapBaseWtpTunnelModeOptions  OBJECT-TYPE
  contents:
  - "capwapBaseWtpTunnelModeOptions  OBJECT-TYPE\n    SYNTAX      CapwapBaseTunnelModeTC\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the tunneling modes of operation supported by\n         the WTP.\"\
    \n    REFERENCE\n        \"Section 4.6.43 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseWtpEntry 4 }\n"
- title: capwapBaseWtpMacTypeOptions  OBJECT-TYPE
  contents:
  - "capwapBaseWtpMacTypeOptions  OBJECT-TYPE\n    SYNTAX      CapwapBaseMacTypeTC\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the MAC mode of operation supported by the WTP.\"\n    REFERENCE\n\
    \        \"Section 4.6.44 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpEntry 5 }\n"
- title: capwapBaseWtpDiscoveryType OBJECT-TYPE
  contents:
  - "capwapBaseWtpDiscoveryType OBJECT-TYPE\n    SYNTAX      INTEGER {\n         \
    \         unknown(0),\n                  staticConfig(1),\n                  dhcp(2),\n\
    \                  dns(3),\n                  acRef(4)\n                }\n  \
    \  MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents how the WTP discovers the AC.\n         The following enumerated values\
    \ are supported:\n           unknown(0)      - Unknown\n           staticConfig(1)\
    \ - Static configuration\n           dhcp(2)         - DHCP\n           dns(3)\
    \          - DNS\n           acRef(4)        - AC referral\n         Note that\
    \ the CAPWAP field [RFC5415] modeled by this\n         object takes zero as starting\
    \ value; this MIB object\n         follows that rule.\"\n    REFERENCE\n     \
    \   \"Section 4.6.21 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= {\
    \ capwapBaseWtpEntry 6 }\n"
- title: capwapBaseWtpRadiosInUseNum OBJECT-TYPE
  contents:
  - "capwapBaseWtpRadiosInUseNum OBJECT-TYPE\n    SYNTAX      Gauge32 (0..255)\n \
    \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the number of radios in use on the WTP.\"\n    REFERENCE\n        \"\
    Section 4.6.41 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpEntry\
    \ 7 }\n"
- title: capwapBaseWtpRadioNumLimit OBJECT-TYPE
  contents:
  - "capwapBaseWtpRadioNumLimit OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..255)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the maximum radio number supported by the WTP.\"\n    REFERENCE\n\
    \        \"Section 4.6.41 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpEntry 8 }\n"
- title: capwapBaseWtpRetransmitCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpRetransmitCount OBJECT-TYPE\n    SYNTAX      Counter32\n    UNITS\
    \       \"retransmissions\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the number of retransmissions for a given\n\
    \         CAPWAP packet.\"\n    REFERENCE\n        \"Section 4.8.8 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    ::= { capwapBaseWtpEntry 9 }\n"
- title: -- End of capwapBaseWtpTable table
  contents:
  - '-- End of capwapBaseWtpTable table

    '
- title: -- capwapBaseWirelessBindingTable Table
  contents:
  - '-- capwapBaseWirelessBindingTable Table

    '
- title: capwapBaseWirelessBindingTable OBJECT-TYPE
  contents:
  - "capwapBaseWirelessBindingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseWirelessBindingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that display the mappings between\n         WTP Virtual\
    \ Radio Interfaces and PHY radios, and the\n         wireless binding type for\
    \ each PHY radio.\n         As capwapBaseWirelessBindingTable stores the mappings\
    \ between\n         PHY radios (Radio IDs) and the ifIndexes of WTP Virtual Radio\n\
    \         Interfaces, the operator can get the ifIndex information by\n      \
    \   querying this table.  Such a query operation SHOULD run from\n         radio\
    \ ID 1 to radio ID 31 according to [RFC5415],\n         and stop when an invalid\
    \ ifIndex value (0) is returned.\n         Values of all objects in this table\
    \ are persistent at\n         restart/reboot.\"\n    ::= { capwapBaseWtps 4 }\n"
- title: capwapBaseWirelessBindingEntry  OBJECT-TYPE
  contents:
  - "capwapBaseWirelessBindingEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseWirelessBindingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that displays the mapping between\n         a specific\
    \ WTP Virtual Radio Interface and a PHY\n         radio, and the wireless binding\
    \ type for the PHY radio.\"\n    INDEX {\n      capwapBaseWtpProfileId,\n    \
    \  capwapBaseWirelessBindingRadioId\n    }\n    ::= { capwapBaseWirelessBindingTable\
    \ 1 }\n"
- title: CapwapBaseWirelessBindingEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseWirelessBindingEntry ::= SEQUENCE {\n      capwapBaseWirelessBindingRadioId\
    \              CapwapBaseRadioIdTC,\n      capwapBaseWirelessBindingVirtualRadioIfIndex\
    \  InterfaceIndex,\n      capwapBaseWirelessBindingType                 INTEGER\n\
    \    }\n"
- title: capwapBaseWirelessBindingRadioId OBJECT-TYPE
  contents:
  - "capwapBaseWirelessBindingRadioId OBJECT-TYPE\n    SYNTAX      CapwapBaseRadioIdTC\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Represents the identifier of a PHY radio on a WTP, which\n         is\
    \ required to be unique on a WTP.\n         For example, WTP A and WTP B use a\
    \ same value of\n         capwapBaseWirelessBindingRadioId for their first radio.\"\
    \n    REFERENCE\n        \"Section 4.3 of CAPWAP Protocol Specification, RFC 5415.\"\
    \n    ::= { capwapBaseWirelessBindingEntry 1 }\n"
- title: capwapBaseWirelessBindingVirtualRadioIfIndex OBJECT-TYPE
  contents:
  - "capwapBaseWirelessBindingVirtualRadioIfIndex OBJECT-TYPE\n    SYNTAX      InterfaceIndex\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the index value that uniquely identifies a\n         WLAN Virtual\
    \ Radio Interface.  The interface identified by\n         a particular value of\
    \ this index is the same interface as\n         identified by the same value of\
    \ the ifIndex.\n         Before WTPs contact the AC to get configuration,\n  \
    \       the operator configures WTP profiles for them.\n         The creation\
    \ of a WTP profile triggers the system to\n         automatically create a specific\
    \ number of WTP Virtual Radio\n         Interfaces and add a new row object in\
    \ the\n         capwapBaseWirelessBindingTable without manual intervention.\n\
    \         As most MIB modules use the ifIndex to identify an interface\n     \
    \    for configuration and statistical data (for example, the IEEE\n         802.11\
    \ MIB module [IEEE.802-11.2007]), it will be easy to\n         reuse other wireless\
    \ binding MIB modules through the WTP\n         Virtual Radio Interface in the\
    \ Centralized WLAN\n         Architecture.\"\n    ::= { capwapBaseWirelessBindingEntry\
    \ 2 }\n"
- title: capwapBaseWirelessBindingType OBJECT-TYPE
  contents:
  - "capwapBaseWirelessBindingType OBJECT-TYPE\n    SYNTAX      INTEGER {\n      \
    \            dot11(1),\n                  epc(3)\n                }\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Represents the\
    \ wireless binding type for the radio.\n         The following enumerated values\
    \ are supported:\n           dot11(1) - IEEE 802.11\n           epc(3)   - EPCGlobal\"\
    \n    REFERENCE\n        \"Section 4.3 of CAPWAP Protocol Specification, RFC 5415.\"\
    \n    ::= { capwapBaseWirelessBindingEntry 3 }\n"
- title: -- End of capwapBaseWirelessBindingTable Table
  contents:
  - '-- End of capwapBaseWirelessBindingTable Table

    '
- title: -- capwapBaseStationTable Table
  contents:
  - '-- capwapBaseStationTable Table

    '
- title: capwapBaseStationTable OBJECT-TYPE
  contents:
  - "capwapBaseStationTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseStationEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that display stations that are accessing\n       \
    \  the wireless service provided by the AC.\"\n    REFERENCE\n        \"Section\
    \ 4.6.8 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtps\
    \ 5 }\n"
- title: capwapBaseStationEntry OBJECT-TYPE
  contents:
  - "capwapBaseStationEntry OBJECT-TYPE\n    SYNTAX      CapwapBaseStationEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that displays a station that is\n         associated\
    \ with the specific radio on the WTP.\n         Note that in some cases such as\
    \ roaming that a station may\n         simultaneously associate with two WTPs\
    \ for some (short) time.\n         The MIB implementation MUST ensure there is\
    \ only one valid\n         and meaningful entry for a specific station.\"\n  \
    \  INDEX { capwapBaseStationId }\n    ::= { capwapBaseStationTable 1 }\n"
- title: CapwapBaseStationEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseStationEntry ::= SEQUENCE {\n      capwapBaseStationId            CapwapBaseStationIdTC,\n\
    \      capwapBaseStationWtpId         CapwapBaseWtpIdTC,\n      capwapBaseStationWtpRadioId\
    \    CapwapBaseRadioIdTC,\n      capwapBaseStationAddedTime     DateAndTime,\n\
    \      capwapBaseStationVlanName      SnmpAdminString\n    }\n"
- title: capwapBaseStationId OBJECT-TYPE
  contents:
  - "capwapBaseStationId OBJECT-TYPE\n    SYNTAX      CapwapBaseStationIdTC\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Represents\
    \ the unique identifier of the station.\"\n    REFERENCE\n        \"Section 4.6.8\
    \ of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseStationEntry\
    \ 1 }\n"
- title: capwapBaseStationWtpId OBJECT-TYPE
  contents:
  - "capwapBaseStationWtpId OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpIdTC\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Represents the\
    \ unique identifier of a WTP in running state.\"\n    ::= { capwapBaseStationEntry\
    \ 2 }\n"
- title: capwapBaseStationWtpRadioId OBJECT-TYPE
  contents:
  - "capwapBaseStationWtpRadioId OBJECT-TYPE\n    SYNTAX      CapwapBaseRadioIdTC\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the identifier of a PHY radio on a WTP, which\n         is required\
    \ to be unique on a WTP.\n         For example, WTP A and WTP B use a same value\
    \ of\n         capwapBaseStationWtpRadioId for their first radio.\"\n    REFERENCE\n\
    \        \"Section 4.3 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseStationEntry 3 }\n"
- title: capwapBaseStationAddedTime OBJECT-TYPE
  contents:
  - "capwapBaseStationAddedTime OBJECT-TYPE\n    SYNTAX      DateAndTime\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Represents the\
    \ time when the station is added.\"\n    REFERENCE\n        \"Section 4.6.8 of\
    \ CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseStationEntry\
    \ 4 }\n"
- title: capwapBaseStationVlanName OBJECT-TYPE
  contents:
  - "capwapBaseStationVlanName OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE(0..32))\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents VLAN name to which the station is associated.\"\n    REFERENCE\n\
    \        \"Section 4.6.8 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseStationEntry 5 }\n"
- title: -- End of capwapBaseStationTable Table
  contents:
  - '-- End of capwapBaseStationTable Table

    '
- title: --  capwapBaseWtpEventsStatsTable
  contents:
  - '--  capwapBaseWtpEventsStatsTable

    '
- title: capwapBaseWtpEventsStatsTable  OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsTable  OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseWtpEventsStatsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that display the WTPs' events statistics.\"\n    REFERENCE\n\
    \        \"Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtps 6 }\n"
- title: capwapBaseWtpEventsStatsEntry  OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpEventsStatsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that displays the events statistics\n         of a WTP.\"\
    \n    REFERENCE\n        \"Section 4.6.47 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    INDEX { capwapBaseWtpCurrId }\n    ::= { capwapBaseWtpEventsStatsTable\
    \ 1 }\n"
- title: CapwapBaseWtpEventsStatsEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseWtpEventsStatsEntry ::= SEQUENCE {\n      capwapBaseWtpEventsStatsRebootCount\
    \            Counter32,\n      capwapBaseWtpEventsStatsInitCount             \
    \ Counter32,\n      capwapBaseWtpEventsStatsLinkFailureCount       Counter32,\n\
    \      capwapBaseWtpEventsStatsSwFailureCount         Counter32,\n      capwapBaseWtpEventsStatsHwFailureCount\
    \         Counter32,\n      capwapBaseWtpEventsStatsOtherFailureCount      Counter32,\n\
    \      capwapBaseWtpEventsStatsUnknownFailureCount    Counter32,\n      capwapBaseWtpEventsStatsLastFailureType\
    \        INTEGER\n    }\n"
- title: capwapBaseWtpEventsStatsRebootCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsRebootCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of reboots that have occurred due to a\n         WTP\
    \ crash.\n         Note that the CAPWAP field [RFC5415] modeled by this counter\n\
    \         takes the value 65535 to indicate that the information is not\n    \
    \     available on the WTP.  This MIB object does not follow this\n         behavior,\
    \ which would not be standard in SMIv2.  If the WTP\n         does not have the\
    \ information, the agent will not instantiate\n         the object.\"\n    REFERENCE\n\
    \        \"Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpEventsStatsEntry 1 }\n"
- title: capwapBaseWtpEventsStatsInitCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsInitCount OBJECT-TYPE\n    SYNTAX      Counter32\n  \
    \  MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the number of reboots that have occurred at the\n         request of\
    \ a CAPWAP protocol message, such as a change in\n         configuration that\
    \ requires a reboot or an explicit CAPWAP\n         protocol reset request.\n\
    \         Note that the CAPWAP field [RFC5415] modeled by this counter\n     \
    \    takes the value 65535 to indicate that the information is not\n         available\
    \ on the WTP.  This MIB object does not follow this\n         behavior, which\
    \ would not be standard in SMIv2.  If the WTP\n         does not have the information,\
    \ the agent will not instantiate\n         the object.\"\n    REFERENCE\n    \
    \    \"Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= {\
    \ capwapBaseWtpEventsStatsEntry 2 }\n"
- title: capwapBaseWtpEventsStatsLinkFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsLinkFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that a CAPWAP protocol\n         connection\
    \ with an AC has failed due to link failures.\"\n    REFERENCE\n        \"Section\
    \ 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpEventsStatsEntry\
    \ 3 }\n"
- title: capwapBaseWtpEventsStatsSwFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsSwFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that a CAPWAP protocol\n         connection\
    \ with an AC has failed due to software-related\n         reasons.\"\n    REFERENCE\n\
    \        \"Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpEventsStatsEntry 4 }\n"
- title: capwapBaseWtpEventsStatsHwFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsHwFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that a CAPWAP protocol\n         connection\
    \ with an AC has failed due to hardware-related\n         reasons.\"\n    REFERENCE\n\
    \        \"Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseWtpEventsStatsEntry 5 }\n"
- title: capwapBaseWtpEventsStatsOtherFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsOtherFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that a CAPWAP protocol\n         connection\
    \ with an AC has failed due to known reasons, other\n         than the AC-initiated,\
    \ link, software or hardware failures.\"\n    REFERENCE\n        \"Section 4.6.47\
    \ of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpEventsStatsEntry\
    \ 6 }\n"
- title: capwapBaseWtpEventsStatsUnknownFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsUnknownFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that a CAPWAP protocol\n         connection\
    \ with an AC has failed for unknown reasons.\"\n    REFERENCE\n        \"Section\
    \ 4.6.47 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpEventsStatsEntry\
    \ 7 }\n"
- title: capwapBaseWtpEventsStatsLastFailureType OBJECT-TYPE
  contents:
  - "capwapBaseWtpEventsStatsLastFailureType OBJECT-TYPE\n    SYNTAX      INTEGER\
    \ {\n                  unsupported(0),\n                  acInit(1),\n       \
    \           linkFailure(2),\n                  swFailure(3),\n               \
    \   hwFailure(4),\n                  otherFailure(5),\n                  unknown(255)\n\
    \                }\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the failure type of the most recent WTP failure.\n     \
    \    The following enumerated values are supported:\n           unsupported(0)\
    \  - Not supported\n           acInit(1)       - The AC initiated\n          \
    \ linkFailure(2)  - Link failure\n           swFailure(3)    - Software failure\n\
    \           hwFailure(4)    - Hardware failure\n           otherFailure(5) - Other\
    \ failure\n           unknown(255)    - Unknown (e.g., WTP doesn't keep track\n\
    \                             of info)\n         Note that the CAPWAP field [RFC5415]\
    \ modeled by this\n         object takes zero as starting value; this MIB object\n\
    \         follows that rule.\"\n    REFERENCE\n        \"Section 4.6.47 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseWtpEventsStatsEntry\
    \ 8 }\n"
- title: --  End of capwapBaseWtpEventsStatsTable table
  contents:
  - '--  End of capwapBaseWtpEventsStatsTable table

    '
- title: --  capwapBaseRadioEventsStatsTable table
  contents:
  - '--  capwapBaseRadioEventsStatsTable table

    '
- title: capwapBaseRadioEventsStatsTable  OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsTable  OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CapwapBaseRadioEventsStatsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A table of objects that display statistics on the radios'\n         behaviors\
    \ and reasons why the WTP radio has been reset.\n         To get the events statistics\
    \ of all radios on a specific WTP\n         (identified by the capwapBaseWtpCurrId),\
    \ a query\n         operation SHOULD run from radio ID 1 to radio ID 31 until\
    \ there\n         is no data returned.  The radio ID here corresponds to the\n\
    \         object capwapBaseRadioEventsWtpRadioId.  If the previous MIB\n     \
    \    operations such as query on the capwapBaseWirelessBindingTable\n        \
    \ know the exact value of each radio ID, the query operation on\n         the\
    \ capwapBaseRadioEventsStatsTable could use that value\n         of Radio IDs.\"\
    \n    REFERENCE\n        \"Section 4.6.46 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseWtps 7 }\n"
- title: capwapBaseRadioEventsStatsEntry  OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsEntry  OBJECT-TYPE\n    SYNTAX      CapwapBaseRadioEventsStatsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A set of objects that displays the statistical data of\n         events\
    \ that happened on a specific radio of a WTP.\"\n    INDEX { capwapBaseWtpCurrId,\
    \ capwapBaseRadioEventsWtpRadioId }\n    ::= { capwapBaseRadioEventsStatsTable\
    \ 1 }\n"
- title: CapwapBaseRadioEventsStatsEntry ::= SEQUENCE {
  contents:
  - "CapwapBaseRadioEventsStatsEntry ::= SEQUENCE {\n      capwapBaseRadioEventsWtpRadioId\
    \             CapwapBaseRadioIdTC,\n      capwapBaseRadioEventsStatsResetCount\
    \             Counter32,\n      capwapBaseRadioEventsStatsSwFailureCount     \
    \    Counter32,\n      capwapBaseRadioEventsStatsHwFailureCount         Counter32,\n\
    \      capwapBaseRadioEventsStatsOtherFailureCount      Counter32,\n      capwapBaseRadioEventsStatsUnknownFailureCount\
    \    Counter32,\n      capwapBaseRadioEventsStatsConfigUpdateCount      Counter32,\n\
    \      capwapBaseRadioEventsStatsChannelChangeCount     Counter32,\n      capwapBaseRadioEventsStatsBandChangeCount\
    \        Counter32,\n      capwapBaseRadioEventsStatsCurrNoiseFloor         Integer32,\n\
    \      capwapBaseRadioEventsStatsDecryptErrorCount      Counter32,\n      capwapBaseRadioEventsStatsLastFailureType\
    \        INTEGER\n    }\n"
- title: capwapBaseRadioEventsWtpRadioId OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsWtpRadioId OBJECT-TYPE\n     SYNTAX      CapwapBaseRadioIdTC\n\
    \     MAX-ACCESS  not-accessible\n     STATUS      current\n     DESCRIPTION\n\
    \         \"Represents the identifier of a PHY radio on a WTP, which\n       \
    \   is required to be unique on a WTP.\n          For example, WTP A and WTP B\
    \ use the same value of\n          capwapBaseRadioEventsWtpRadioId for their first\
    \ radio.\"\n     REFERENCE\n         \"Section 4.3 of CAPWAP Protocol Specification,\
    \ RFC 5415.\"\n     ::= { capwapBaseRadioEventsStatsEntry 1 }\n"
- title: capwapBaseRadioEventsStatsResetCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsResetCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio has been\n         reset.\"\n\
    \    REFERENCE\n        \"Section 4.6.46 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry 2 }\n"
- title: capwapBaseRadioEventsStatsSwFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsSwFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio has failed due\n         to\
    \ software-related reasons.\"\n    REFERENCE\n        \"Section 4.6.46 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry\
    \ 3 }\n"
- title: capwapBaseRadioEventsStatsHwFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsHwFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio has failed due\n         to\
    \ hardware-related reasons.\"\n    REFERENCE\n        \"Section 4.6.46 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry\
    \ 4 }\n"
- title: capwapBaseRadioEventsStatsOtherFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsOtherFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio has failed due to\n        \
    \ known reasons, other than software or hardware failure.\"\n    REFERENCE\n \
    \       \"Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseRadioEventsStatsEntry 5 }\n"
- title: capwapBaseRadioEventsStatsUnknownFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsUnknownFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio has failed for\n         unknown\
    \ reasons.\"\n    REFERENCE\n        \"Section 4.6.46 of CAPWAP Protocol Specification,\
    \ RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry 6 }\n"
- title: capwapBaseRadioEventsStatsConfigUpdateCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsConfigUpdateCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio configuration has\n        \
    \ been updated.\"\n    REFERENCE\n        \"Section 4.6.46 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry 7 }\n"
- title: capwapBaseRadioEventsStatsChannelChangeCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsChannelChangeCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio channel has\n         been changed.\"\
    \n    REFERENCE\n        \"Section 4.6.46 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry 8 }\n"
- title: capwapBaseRadioEventsStatsBandChangeCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsBandChangeCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of times that the radio has changed\n         frequency\
    \ bands.\"\n    REFERENCE\n        \"Section 4.6.46 of CAPWAP Protocol Specification,\
    \ RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry 9 }\n"
- title: capwapBaseRadioEventsStatsCurrNoiseFloor OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsCurrNoiseFloor OBJECT-TYPE\n    SYNTAX      Integer32\n\
    \    UNITS       \"dBm\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the noise floor of the radio receiver in\
    \ units of\n         dBm.\"\n    REFERENCE\n        \"Section 4.6.46 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry\
    \ 10 }\n"
- title: capwapBaseRadioEventsStatsDecryptErrorCount OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsDecryptErrorCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of decryption errors that have occurred\n         on\
    \ the WTP.  Note that this field is only valid in cases where\n         the WTP\
    \ provides encryption/decryption services.\"\n    REFERENCE\n        \"Section\
    \ 4.6.46 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseRadioEventsStatsEntry\
    \ 11 }\n"
- title: capwapBaseRadioEventsStatsLastFailureType OBJECT-TYPE
  contents:
  - "capwapBaseRadioEventsStatsLastFailureType OBJECT-TYPE\n    SYNTAX      INTEGER\
    \ {\n                  unsupported(0),\n                  swFailure(1),\n    \
    \              hwFailure(2),\n                  otherFailure(3),\n           \
    \       unknown(255)\n                }\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Represents the failure type of the\
    \ most recent radio failure.\n         The following enumerated values are supported:\n\
    \           unsupported(0)  - Not supported\n           swFailure(1)    - Software\
    \ failure\n           hwFailure(2)    - Hardware failure\n           otherFailure(3)\
    \ - Other failure\n           unknown(255)    - Unknown\n         Note that the\
    \ CAPWAP field [RFC5415] modeled by this\n         object takes zero as starting\
    \ value; this MIB object follows\n         that rule.\"\n    REFERENCE\n     \
    \   \"Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= {\
    \ capwapBaseRadioEventsStatsEntry 12 }\n"
- title: --  End of capwapBaseRadioEventsStatsTable table
  contents:
  - '--  End of capwapBaseRadioEventsStatsTable table

    '
- title: -- End of WTP Objects Group
  contents:
  - '-- End of WTP Objects Group

    '
- title: -- CAPWAP Base Parameters Group
  contents:
  - '-- CAPWAP Base Parameters Group

    '
- title: capwapBaseParameters OBJECT IDENTIFIER
  contents:
  - "capwapBaseParameters OBJECT IDENTIFIER\n    ::= { capwapBaseObjects 3 }\n"
- title: capwapBaseAcMaxRetransmit OBJECT-TYPE
  contents:
  - "capwapBaseAcMaxRetransmit OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS\
    \  read-write\n    STATUS      current\n    DESCRIPTION\n        \"Represents\
    \ the maximum number of retransmissions for a given\n         CAPWAP packet before\
    \ the link layer considers the peer dead.\n         The value of the object is\
    \ persistent at restart/reboot.\"\n    REFERENCE\n        \"Section 4.8.7 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    DEFVAL { 5 }\n    ::= { capwapBaseParameters\
    \ 1 }\n"
- title: capwapBaseAcChangeStatePendingTimer OBJECT-TYPE
  contents:
  - "capwapBaseAcChangeStatePendingTimer OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the maximum time, in seconds, the AC will\
    \ wait\n         for the Change State Event Request from the WTP after having\n\
    \         transmitted a successful Configuration Status Response\n         message.\n\
    \         The value of the object is persistent at restart/reboot.\"\n    REFERENCE\n\
    \        \"Section 4.7.1 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL\
    \ { 25 }\n    ::= { capwapBaseParameters 2 }\n"
- title: capwapBaseAcDataCheckTimer OBJECT-TYPE
  contents:
  - "capwapBaseAcDataCheckTimer OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS\
    \       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents The number of seconds the AC will wait for\n         the\
    \ Data Channel Keep Alive, which is required by the\n         CAPWAP state machine's\
    \ Data Check state.\n         The AC resets the state machine if this timer expires\n\
    \         prior to transitioning to the next state.\n         The value of the\
    \ object is persistent at restart/reboot.\"\n    REFERENCE\n        \"Section\
    \ 4.7.4 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL { 30 }\n   \
    \ ::= { capwapBaseParameters 3 }\n"
- title: capwapBaseAcDTLSSessionDeleteTimer OBJECT-TYPE
  contents:
  - "capwapBaseAcDTLSSessionDeleteTimer OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the minimum time, in seconds, the AC MUST\
    \ wait\n         for DTLS session deletion.\n         The value of the object\
    \ is persistent at restart/reboot.\"\n    REFERENCE\n        \"Section 4.7.6 of\
    \ CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL { 5 }\n    ::= { capwapBaseParameters\
    \ 4 }\n"
- title: capwapBaseAcEchoInterval OBJECT-TYPE
  contents:
  - "capwapBaseAcEchoInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS \
    \      \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the minimum time, in seconds, between sending Echo\n   \
    \      Request messages to the AC with which the WTP has joined.\n         The\
    \ value of the object is persistent at restart/reboot.\"\n    REFERENCE\n    \
    \    \"Section 4.7.7 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL\
    \ { 30 }\n    ::= { capwapBaseParameters 5 }\n"
- title: capwapBaseAcRetransmitInterval OBJECT-TYPE
  contents:
  - "capwapBaseAcRetransmitInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS\
    \       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the minimum time, in seconds, in which a\n         non-acknowledged\
    \ CAPWAP packet will be retransmitted.\n         The value of the object is persistent\
    \ at restart/reboot.\"\n    REFERENCE\n        \"Section 4.7.12 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    DEFVAL { 3 }\n    ::= { capwapBaseParameters\
    \ 6 }\n"
- title: capwapBaseAcSilentInterval OBJECT-TYPE
  contents:
  - "capwapBaseAcSilentInterval OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS\
    \       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the minimum time, in seconds, during which the AC\n    \
    \     SHOULD ignore all CAPWAP and DTLS packets received from the\n         WTP\
    \ that is in the Sulking state.\n         The value of the object is persistent\
    \ at restart/reboot.\"\n    REFERENCE\n        \"Section 4.7.13 of CAPWAP Protocol\
    \ Specification, RFC 5415.\"\n    DEFVAL { 30 }\n    ::= { capwapBaseParameters\
    \ 7 }\n"
- title: capwapBaseAcWaitDTLSTimer OBJECT-TYPE
  contents:
  - "capwapBaseAcWaitDTLSTimer OBJECT-TYPE\n    SYNTAX      Unsigned32 (30..4294967295)\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the maximum time, in seconds, the AC MUST\
    \ wait\n         without having received a DTLS Handshake message from an AC.\n\
    \         This timer MUST be greater than 30 seconds.\n         The value of the\
    \ object is persistent at restart/reboot.\"\n    REFERENCE\n        \"Section\
    \ 4.7.15 of CAPWAP Protocol Specification, RFC 5415.\"\n    DEFVAL { 60 }\n  \
    \  ::= { capwapBaseParameters 8 }\n"
- title: capwapBaseAcWaitJoinTimer OBJECT-TYPE
  contents:
  - "capwapBaseAcWaitJoinTimer OBJECT-TYPE\n    SYNTAX      Unsigned32 (20..4294967295)\n\
    \    UNITS       \"second\"\n    MAX-ACCESS  read-write\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the maximum time, in seconds, the AC will\
    \ wait\n         after the DTLS session has been established until it receives\n\
    \         the Join Request from the WTP.  This timer MUST be greater\n       \
    \  than 20 seconds.\n         The value of the object is persistent at restart/reboot.\"\
    \n    REFERENCE\n        \"Section 4.7.16 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    DEFVAL { 60 }\n    ::= { capwapBaseParameters 9 }\n"
- title: capwapBaseAcEcnSupport OBJECT-TYPE
  contents:
  - "capwapBaseAcEcnSupport OBJECT-TYPE\n    SYNTAX      INTEGER {\n             \
    \     limited(0),\n                  fullAndLimited(1)\n                }\n  \
    \  MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the support for the Explicit Congestion Notification\n         (ECN)\
    \ bits, as defined in [RFC3168].\n         The value of the object is persistent\
    \ at restart/reboot.\n         The following enumerated values are supported:\n\
    \           limited(0)        - Limited ECN support\n           fullAndLimited(1)\
    \ - Full and limited ECN support\n         Note that the CAPWAP field [RFC5415]\
    \ modeled by this\n         object takes zero as starting value; this MIB object\
    \ follows\n         that rule.\"\n    REFERENCE\n        \"Section 4.6.25 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseParameters 10 }\n"
- title: -- End of CAPWAP Base Parameters Group
  contents:
  - '-- End of CAPWAP Base Parameters Group

    '
- title: -- CAPWAP Statistics Group
  contents:
  - '-- CAPWAP Statistics Group

    '
- title: capwapBaseStats OBJECT IDENTIFIER
  contents:
  - "capwapBaseStats OBJECT IDENTIFIER\n    ::= { capwapBaseObjects 4 }\n"
- title: capwapBaseFailedDTLSAuthFailureCount OBJECT-TYPE
  contents:
  - "capwapBaseFailedDTLSAuthFailureCount OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents the number of failed DTLS session establishment\n         attempts\
    \ due to authentication failures.\"\n    REFERENCE\n        \"Section 4.8.3 of\
    \ CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseStats 1 }\n"
- title: capwapBaseFailedDTLSSessionCount OBJECT-TYPE
  contents:
  - "capwapBaseFailedDTLSSessionCount OBJECT-TYPE\n    SYNTAX      Counter32\n   \
    \ MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the number of failed DTLS session\n         establishment attempts.\"\
    \n    REFERENCE\n        \"Section 4.8.4 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseStats 2 }\n"
- title: -- Notifications
  contents:
  - '-- Notifications

    '
- title: capwapBaseChannelUp NOTIFICATION-TYPE
  contents:
  - "capwapBaseChannelUp NOTIFICATION-TYPE\n    OBJECTS     {\n                  capwapBaseNtfWtpId,\n\
    \                  capwapBaseNtfChannelType,\n                  capwapBaseNtfAuthenMethod\n\
    \                }\n    STATUS      current\n    DESCRIPTION\n        \"This notification\
    \ is sent by the AC when a CAPWAP channel\n         is established.\n        \
    \ The notification is separated for data or control channel.\"\n    ::= { capwapBaseNotifications\
    \ 1 }\n"
- title: capwapBaseChannelDown NOTIFICATION-TYPE
  contents:
  - "capwapBaseChannelDown NOTIFICATION-TYPE\n    OBJECTS     {\n                \
    \  capwapBaseNtfWtpId,\n                  capwapBaseNtfChannelType,\n        \
    \          capwapBaseNtfChannelDownReason\n                }\n    STATUS     \
    \ current\n    DESCRIPTION\n        \"This notification is sent by the AC when\
    \ a CAPWAP channel\n         is down.\n         The notification is separated\
    \ for data or control channel.\"\n    ::= { capwapBaseNotifications 2 }\n"
- title: capwapBaseDecryptErrorReport NOTIFICATION-TYPE
  contents:
  - "capwapBaseDecryptErrorReport NOTIFICATION-TYPE\n    OBJECTS     {\n         \
    \         capwapBaseNtfWtpId,\n                  capwapBaseNtfRadioId,\n     \
    \             capwapBaseNtfStationIdList\n                }\n    STATUS      current\n\
    \    DESCRIPTION\n        \"This notification is generated when a WTP has had\
    \ a\n         decryption error since the last report.\"\n    REFERENCE\n     \
    \   \"Section 4.6.17 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= {\
    \ capwapBaseNotifications 3 }\n"
- title: capwapBaseJoinFailure NOTIFICATION-TYPE
  contents:
  - "capwapBaseJoinFailure NOTIFICATION-TYPE\n    OBJECTS     {\n                \
    \  capwapBaseNtfWtpId,\n                  capwapBaseNtfJoinFailureReason\n   \
    \             }\n    STATUS      current\n    DESCRIPTION\n        \"This notification\
    \ is generated when a WTP fails to join.\"\n    REFERENCE\n        \"Section 4.6.35\
    \ of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseNotifications\
    \ 4 }\n"
- title: capwapBaseImageUpgradeFailure NOTIFICATION-TYPE
  contents:
  - "capwapBaseImageUpgradeFailure NOTIFICATION-TYPE\n    OBJECTS     {\n        \
    \          capwapBaseNtfWtpId,\n                  capwapBaseNtfImageFailureReason\n\
    \                }\n    STATUS      current\n    DESCRIPTION\n        \"This notification\
    \ is generated when a WTP fails to update\n         the firmware image.\"\n  \
    \  REFERENCE\n        \"Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415.\"\
    \n    ::= { capwapBaseNotifications 5 }\n"
- title: capwapBaseConfigMsgError NOTIFICATION-TYPE
  contents:
  - "capwapBaseConfigMsgError NOTIFICATION-TYPE\n    OBJECTS     {\n             \
    \     capwapBaseNtfWtpId,\n                  capwapBaseNtfConfigMsgErrorType,\n\
    \                  capwapBaseNtfMsgErrorElements\n                }\n    STATUS\
    \      current\n    DESCRIPTION\n        \"This notification is generated when\
    \ a WTP receives message\n         elements in the configuration management messages\
    \ that it\n         is unable to apply locally.\"\n    REFERENCE\n        \"Section\
    \ 4.6.35 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseNotifications\
    \ 6 }\n"
- title: capwapBaseRadioOperableStatus NOTIFICATION-TYPE
  contents:
  - "capwapBaseRadioOperableStatus NOTIFICATION-TYPE\n    OBJECTS     {\n        \
    \          capwapBaseNtfWtpId,\n                  capwapBaseNtfRadioId,\n    \
    \              capwapBaseNtfRadioOperStatusFlag,\n                  capwapBaseNtfRadioStatusCause\n\
    \                }\n    STATUS      current\n    DESCRIPTION\n        \"The notification\
    \ is generated when a radio's operational state\n         has changed.\"\n   \
    \ REFERENCE\n        \"Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415.\"\
    \n    ::= { capwapBaseNotifications 7 }\n"
- title: capwapBaseAuthenFailure NOTIFICATION-TYPE
  contents:
  - "capwapBaseAuthenFailure NOTIFICATION-TYPE\n    OBJECTS     {\n              \
    \    capwapBaseNtfWtpId,\n                  capwapBaseNtfChannelType,\n      \
    \            capwapBaseNtfAuthenMethod,\n                  capwapBaseNtfAuthenFailureReason\n\
    \                }\n    STATUS      current\n    DESCRIPTION\n        \"This is\
    \ notification of an authentication failure event\n         and provides the reason\
    \ for it.\"\n    ::= { capwapBaseNotifications 8 }\n"
- title: -- Objects used only in notifications
  contents:
  - '-- Objects used only in notifications

    '
- title: -- Notification Objects
  contents:
  - '-- Notification Objects

    '
- title: capwapBaseNotifyVarObjects OBJECT IDENTIFIER
  contents:
  - "capwapBaseNotifyVarObjects OBJECT IDENTIFIER\n    ::= { capwapBaseObjects 5 }\n"
- title: capwapBaseNtfWtpId OBJECT-TYPE
  contents:
  - "capwapBaseNtfWtpId OBJECT-TYPE\n    SYNTAX      CapwapBaseWtpIdTC\n    MAX-ACCESS\
    \  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the unique identifier of a WTP.\"\n    ::= { capwapBaseNotifyVarObjects\
    \ 1 }\n"
- title: capwapBaseNtfRadioId OBJECT-TYPE
  contents:
  - "capwapBaseNtfRadioId OBJECT-TYPE\n    SYNTAX      CapwapBaseRadioIdTC\n    MAX-ACCESS\
    \  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n        \"\
    Represents the identifier of a PHY radio on a WTP, which is\n         only required\
    \ to be unique on a WTP.\n         For example, WTP A and WTP B can use the same\
    \ value of\n         capwapBaseNtfRadioId for their first radio.\"\n    REFERENCE\n\
    \        \"Section 4.3 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::=\
    \ { capwapBaseNotifyVarObjects 2 }\n"
- title: capwapBaseNtfChannelType OBJECT-TYPE
  contents:
  - "capwapBaseNtfChannelType OBJECT-TYPE\n    SYNTAX      CapwapBaseChannelTypeTC\n\
    \    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the channel type for the CAPWAP protocol.\"\n    ::= { capwapBaseNotifyVarObjects\
    \ 3 }\n"
- title: capwapBaseNtfAuthenMethod OBJECT-TYPE
  contents:
  - "capwapBaseNtfAuthenMethod OBJECT-TYPE\n    SYNTAX      CapwapBaseAuthenMethodTC\n\
    \    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the authentication method for the CAPWAP Channel.\"\n  \
    \  ::= { capwapBaseNotifyVarObjects 4 }\n"
- title: capwapBaseNtfChannelDownReason OBJECT-TYPE
  contents:
  - "capwapBaseNtfChannelDownReason OBJECT-TYPE\n    SYNTAX      INTEGER {\n     \
    \             timeout(1),\n                  rekeyFailure(2),\n              \
    \    acRebootWtp(3),\n                  dtlsError(4),\n                  maxRetransmit(5)\n\
    \                }\n    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the reason the channel is down.\n     \
    \    The following enumerated values are supported:\n           timeout(1)   \
    \    - The keepalive timed out\n           rekeyFailure(2)  - Rekey process failed;\
    \ channel will be\n                              broken\n           acRebootWtp(3)\
    \   - The AC rebooted the WTP\n           dtlsError(4)     - DTLS notifications:\
    \ DTLSAborted,\n                              DTLSReassemblyFailure, DTLSPeerDisconnect,\n\
    \                              or frequent DTLSDecapFailure\n           maxRetransmit(5)\
    \ - The underlying reliable transport's\n                              RetransmitCount\
    \ counter has reached the\n                              MaxRetransmit variable\"\
    \n    ::= { capwapBaseNotifyVarObjects 5 }\n"
- title: capwapBaseNtfStationIdList OBJECT-TYPE
  contents:
  - "capwapBaseNtfStationIdList OBJECT-TYPE\n    SYNTAX      LongUtf8String (SIZE\
    \ (6..1024))\n    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents a list of station MAC addresses separated\
    \ by\n         semicolons.\"\n    REFERENCE\n        \"Section 4.6.17 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseNotifyVarObjects 6\
    \ }\n"
- title: capwapBaseNtfAuthenFailureReason OBJECT-TYPE
  contents:
  - "capwapBaseNtfAuthenFailureReason OBJECT-TYPE\n    SYNTAX      INTEGER {\n   \
    \               keyMismatch(1),\n                  invalidCert(2),\n         \
    \         reassemblyFailure(3),\n                  decapFailure(4),\n        \
    \          encapFailure(5),\n                  timeout(6),\n                 \
    \ unknown(8)\n                }\n    MAX-ACCESS  accessible-for-notify\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Represents the reason for WTP authorization\
    \ failure.\n         The following enumerated values are supported:\n        \
    \   keyMismatch(1)       - WTP's and AC's keys did not match\n           invalidCert(2)\
    \       - Certification is not valid\n           reassemblyFailure(3) - Fragment\
    \ reassembly failure\n           decapFailure(4)      - Decapsulation error\n\
    \           encapFailure(5)      - Encapsulation error\n           timeout(6)\
    \           - WaitDTLS timer timeout\n           unknown(8)           - Unknown\
    \ reason\"\n    REFERENCE\n        \"Section 2.3.1 of CAPWAP Protocol Specification,\
    \ RFC 5415.\"\n    ::= { capwapBaseNotifyVarObjects 7 }\n"
- title: capwapBaseNtfRadioOperStatusFlag OBJECT-TYPE
  contents:
  - "capwapBaseNtfRadioOperStatusFlag OBJECT-TYPE\n    SYNTAX      INTEGER {\n   \
    \               operable(0),\n                  inoperable(1)\n              \
    \  }\n    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the operation status of a radio.\n         The following\
    \ enumerated values are supported:\n           operable(0)   - The radio is operable\n\
    \           inoperable(1) - The radio is inoperable, and the\n               \
    \            capwapBaseNtfRadioStatusCause object\n                          \
    \ gives the reason in detail\n         Note that the CAPWAP field [RFC5415] modeled\
    \ by this\n         object takes zero as starting value; this MIB object\n   \
    \      follows that rule.\"\n    REFERENCE\n        \"Section 4.6.34 of CAPWAP\
    \ Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseNotifyVarObjects 8\
    \ }\n"
- title: capwapBaseNtfRadioStatusCause OBJECT-TYPE
  contents:
  - "capwapBaseNtfRadioStatusCause OBJECT-TYPE\n    SYNTAX      INTEGER {\n      \
    \            normal(0),\n                  hwError(1),\n                  swError(2),\n\
    \                  adminSet(3)\n                }\n    MAX-ACCESS  accessible-for-notify\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Represents the reason why\
    \ the radio is out of service.\n         The following enumerated values are supported:\n\
    \           normal(0)   - Normal status\n           hwError(1)  - Radio failure\n\
    \           swError(2)  - Software failure\n           adminSet(3) - Administratively\
    \ set\n         Note that the CAPWAP field [RFC5415] modeled by this\n       \
    \  object takes zero as starting value; this MIB object\n         follows that\
    \ rule.\"\n    REFERENCE\n        \"Section 4.6.34 of CAPWAP Protocol Specification,\
    \ RFC 5415.\"\n    ::= { capwapBaseNotifyVarObjects 9 }\n"
- title: capwapBaseNtfJoinFailureReason  OBJECT-TYPE
  contents:
  - "capwapBaseNtfJoinFailureReason  OBJECT-TYPE\n    SYNTAX      INTEGER {\n    \
    \              unspecified(1),\n                  resDepletion(2),\n         \
    \         unknownSource(3),\n                  incorrectData(4),\n           \
    \       sessionIdInUse(5),\n                  unsupportedHw(6),\n            \
    \      unsupportedBinding(7)\n                }\n    MAX-ACCESS  accessible-for-notify\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Represents the reason of\
    \ join failure.\n         The following enumerated values are supported:\n   \
    \        unspecified(1)        - Unspecified failure\n           resDepletion(2)\
    \       - Resource depletion\n           unknownSource(3)      - Unknown source\n\
    \           incorrectData(4)      - Incorrect data\n           sessionIdInUse(5)\
    \     - Session ID already in use\n           unsupportedHw(6)      - WTP hardware\
    \ not supported\n           unsupportedBinding(7) - Binding not supported\"\n\
    \    REFERENCE\n        \"Section 4.6.35 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseNotifyVarObjects 10 }\n"
- title: capwapBaseNtfImageFailureReason  OBJECT-TYPE
  contents:
  - "capwapBaseNtfImageFailureReason  OBJECT-TYPE\n    SYNTAX      INTEGER {\n   \
    \               invalidChecksum(1),\n                  invalidLength(2),\n   \
    \               other(3),\n                  inStorage(4)\n                }\n\
    \    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the reason of image failure.\n         The following enumerated\
    \ values are supported:\n           invalidChecksum(1) - Invalid checksum\n  \
    \         invalidLength(2)   - Invalid data length\n           other(3)      \
    \     - Other error\n           inStorage(4)       - Image already present\"\n\
    \    REFERENCE\n        \"Section 4.6.35 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseNotifyVarObjects 11 }\n"
- title: capwapBaseNtfConfigMsgErrorType  OBJECT-TYPE
  contents:
  - "capwapBaseNtfConfigMsgErrorType  OBJECT-TYPE\n    SYNTAX      INTEGER {\n   \
    \               unknownElement(1),\n                  unsupportedElement(2),\n\
    \                  unknownValue(3),\n                  unsupportedValue(4)\n \
    \               }\n    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents the type of configuration message error.\n\
    \         The following enumerated values are supported:\n           unknownElement(1)\
    \     - Unknown message element\n           unsupportedElement(2) - Unsupported\
    \ message element\n           unknownValue(3)       - Unknown message element\
    \ value\n           unsupportedValue(4)   - Unsupported message element value\"\
    \n    REFERENCE\n        \"Section 4.6.36 of CAPWAP Protocol Specification, RFC\
    \ 5415.\"\n    ::= { capwapBaseNotifyVarObjects 12 }\n"
- title: capwapBaseNtfMsgErrorElements  OBJECT-TYPE
  contents:
  - "capwapBaseNtfMsgErrorElements  OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n\
    \    MAX-ACCESS  accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents the message elements sent by the AC in the\n         Configuration\
    \ Status Response message that caused the error.\"\n    REFERENCE\n        \"\
    Section 4.6.36 of CAPWAP Protocol Specification, RFC 5415.\"\n    ::= { capwapBaseNotifyVarObjects\
    \ 13 }\n"
- title: -- Notification Control
  contents:
  - '-- Notification Control

    '
- title: capwapBaseNotifyControlObjects OBJECT IDENTIFIER
  contents:
  - "capwapBaseNotifyControlObjects OBJECT IDENTIFIER\n    ::= { capwapBaseObjects\
    \ 6 }\n"
- title: capwapBaseChannelUpDownNotifyEnable  OBJECT-TYPE
  contents:
  - "capwapBaseChannelUpDownNotifyEnable  OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents whether the Channel Up / Channel Down notification\n         should\
    \ be generated.\n         A value of true(1) means that the notification is enabled.\n\
    \         A value of false(2) means that the notification is disabled.\n     \
    \    The value of the object is persistent at restart/reboot.\"\n    DEFVAL {\
    \ false }\n    ::= { capwapBaseNotifyControlObjects 1 }\n"
- title: capwapBaseDecryptErrorNotifyEnable OBJECT-TYPE
  contents:
  - "capwapBaseDecryptErrorNotifyEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents whether the decryption error notification should\n         be\
    \ generated.\n         A value of true(1) means that the notification is enabled.\n\
    \         A value of false(2) means that the notification is disabled.\n     \
    \    The value of the object is persistent at restart/reboot.\"\n    DEFVAL {\
    \ true }\n    ::= { capwapBaseNotifyControlObjects 2 }\n"
- title: capwapBaseJoinFailureNotifyEnable OBJECT-TYPE
  contents:
  - "capwapBaseJoinFailureNotifyEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n \
    \   MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Represents whether the notification of a WTP join failure\n         should\
    \ be generated.\n         A value of true(1) means that the notification is enabled.\n\
    \         A value of false(2) means that the notification is disabled.\n     \
    \    The value of the object is persistent at restart/reboot.\"\n    DEFVAL {\
    \ true }\n    ::= { capwapBaseNotifyControlObjects 3 }\n"
- title: capwapBaseImageUpgradeFailureNotifyEnable OBJECT-TYPE
  contents:
  - "capwapBaseImageUpgradeFailureNotifyEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents whether the notification of a WTP image upgrade\n         failure\
    \ should be generated.\n         A value of true(1) means that the notification\
    \ is enabled.\n         A value of false(2) means that the notification is disabled.\n\
    \         The value of the object is persistent at restart/reboot.\"\n    DEFVAL\
    \ { true }\n    ::= { capwapBaseNotifyControlObjects 4 }\n"
- title: capwapBaseConfigMsgErrorNotifyEnable OBJECT-TYPE
  contents:
  - "capwapBaseConfigMsgErrorNotifyEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents whether the notification of configuration message\n         error\
    \ should be generated.\n         A value of true(1) means that the notification\
    \ is enabled.\n         A value of false(2) means that the notification is disabled.\n\
    \         The value of the object is persistent at restart/reboot.\"\n    DEFVAL\
    \ { false }\n    ::= { capwapBaseNotifyControlObjects 5 }\n"
- title: capwapBaseRadioOperableStatusNotifyEnable OBJECT-TYPE
  contents:
  - "capwapBaseRadioOperableStatusNotifyEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents whether the notification of a radio's operational\n         state\
    \ change should be generated.\n         A value of true(1) means that the notification\
    \ is enabled.\n         A value of false(2) means that the notification is disabled.\n\
    \         The value of the object is persistent at restart/reboot.\"\n    DEFVAL\
    \ { false }\n    ::= { capwapBaseNotifyControlObjects 6 }\n"
- title: capwapBaseAuthenFailureNotifyEnable OBJECT-TYPE
  contents:
  - "capwapBaseAuthenFailureNotifyEnable OBJECT-TYPE\n    SYNTAX      TruthValue\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \  \"Represents whether the notification of authentication failure\n         should\
    \ be generated.\n         A value of true(1) means that the notification is enabled.\n\
    \         A value of false(2) means that the notification is disabled.\n     \
    \    The value of the object is persistent at restart/reboot.\"\n    DEFVAL {\
    \ true }\n    ::= { capwapBaseNotifyControlObjects 7 }\n"
- title: -- Module compliance
  contents:
  - '-- Module compliance

    '
- title: capwapBaseCompliances OBJECT IDENTIFIER
  contents:
  - "capwapBaseCompliances OBJECT IDENTIFIER\n    ::= { capwapBaseConformance 1 }\n"
- title: capwapBaseGroups OBJECT IDENTIFIER
  contents:
  - "capwapBaseGroups OBJECT IDENTIFIER\n    ::= { capwapBaseConformance 2 }\n"
- title: capwapBaseCompliance MODULE-COMPLIANCE
  contents:
  - "capwapBaseCompliance MODULE-COMPLIANCE\n    STATUS current\n    DESCRIPTION\n\
    \       \"Describes the requirements for conformance to the\n        CAPWAP-BASE-MIB\
    \ module.\"\n    MODULE IF-MIB -- The Interfaces MIB, RFC 2863\n    MANDATORY-GROUPS\
    \ {\n       ifGeneralInformationGroup\n    }\n    MODULE -- this module\n    \
    \ MANDATORY-GROUPS {\n       capwapBaseAcNodeGroup,\n       capwapBaseWtpProfileGroup,\n\
    \       capwapBaseWtpStateGroup,\n       capwapBaseWtpGroup,\n       capwapBaseRadioGroup,\n\
    \       capwapBaseStationGroup\n     }\n     GROUP capwapBaseAcNodeGroup2\n  \
    \   DESCRIPTION\n         \"The capwapBaseAcNodeGroup2 group is optional.\"\n\
    \     GROUP capwapBaseAcNameListGroup\n     DESCRIPTION\n         \"The capwapBaseAcNameListGroup\
    \ group is optional.\"\n     GROUP capwapBaseMacAclsGroup\n     DESCRIPTION\n\
    \         \"The capwapBaseMacAclsGroup group is optional.\"\n     GROUP capwapBaseWtpProfileGroup2\n\
    \     DESCRIPTION\n         \"The capwapBaseWtpProfileGroup2 group is optional.\"\
    \n     GROUP capwapBaseWtpGroup2\n     DESCRIPTION\n         \"The capwapBaseWtpGroup2\
    \ group is optional.\"\n     GROUP capwapBaseWtpEventsStatsGroup\n     DESCRIPTION\n\
    \         \"The capwapBaseWtpEventsStatsGroup group is optional.\"\n     GROUP\
    \ capwapBaseRadioEventsStatsGroup\n     DESCRIPTION\n         \"The capwapBaseRadioEventsStatsGroup\
    \ group is optional.\"\n     GROUP capwapBaseParametersGroup\n     DESCRIPTION\n\
    \         \"The capwapBaseParametersGroup group is optional.\"\n     GROUP capwapBaseStatsGroup\n\
    \     DESCRIPTION\n         \"The capwapBaseStatsGroup group is optional.\"\n\
    \     GROUP capwapBaseNotificationsGroup\n     DESCRIPTION\n          \"The capwapBaseNotificationsGroup\
    \ group is optional.\"\n     GROUP capwapBaseNotifyVarsGroup\n     DESCRIPTION\n\
    \         \"The capwapBaseNotifyVarsGroup group is optional.\n          If capwapBaseNotificationsGroup\
    \ is supported,\n          this group must be implemented.\"\n     GROUP capwapBaseNotifyControlGroup\n\
    \     DESCRIPTION\n        \"The capwapBaseNotifyControlGroup group is optional.\n\
    \         If capwapBaseNotificationsGroup is supported,\n         this group must\
    \ be implemented.\"\n     ::= { capwapBaseCompliances 1 }\n"
- title: capwapBaseAcNodeGroup    OBJECT-GROUP
  contents:
  - "capwapBaseAcNodeGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpSessions,\n\
    \      capwapBaseWtpSessionsLimit,\n      capwapBaseStationSessions,\n      capwapBaseStationSessionsLimit\n\
    \    }\n    STATUS  current\n    DESCRIPTION\n        \"A collection of objects\
    \ that is used to represent\n         the basic properties of the AC from the\
    \ CAPWAP\n         protocol perspective.\"\n    ::= { capwapBaseGroups 1 }\n"
- title: capwapBaseAcNodeGroup2   OBJECT-GROUP
  contents:
  - "capwapBaseAcNodeGroup2   OBJECT-GROUP\n    OBJECTS {\n      capwapBaseDataChannelDTLSPolicyOptions,\n\
    \      capwapBaseControlChannelAuthenOptions\n     }\n    STATUS  current\n  \
    \  DESCRIPTION\n        \"A collection of objects that is used to represent\n\
    \         the other properties (such as security) of the AC from\n         the\
    \ CAPWAP protocol perspective.\"\n    ::= { capwapBaseGroups 2 }\n"
- title: capwapBaseAcNameListGroup  OBJECT-GROUP
  contents:
  - "capwapBaseAcNameListGroup  OBJECT-GROUP\n    OBJECTS {\n      capwapBaseAcNameListName,\n\
    \      capwapBaseAcNameListPriority,\n      capwapBaseAcNameListRowStatus\n  \
    \  }\n    STATUS  current\n    DESCRIPTION\n        \"A collection of objects\
    \ that is used to configure\n         the AC name list.\"\n    ::= { capwapBaseGroups\
    \ 3 }\n"
- title: capwapBaseMacAclsGroup  OBJECT-GROUP
  contents:
  - "capwapBaseMacAclsGroup  OBJECT-GROUP\n    OBJECTS {\n      capwapBaseMacAclStationId,\n\
    \      capwapBaseMacAclRowStatus\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"A collection of objects that is used to configure\n         the stations\
    \ ACL.\"\n    ::= { capwapBaseGroups 4 }\n"
- title: capwapBaseWtpProfileGroup    OBJECT-GROUP
  contents:
  - "capwapBaseWtpProfileGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpProfileName,\n\
    \      capwapBaseWtpProfileWtpMacAddress,\n      capwapBaseWtpProfileWtpModelNumber,\n\
    \      capwapBaseWtpProfileWtpName,\n      capwapBaseWtpProfileWtpLocation,\n\
    \      capwapBaseWtpProfileRowStatus\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"A collection of objects that is used to configure\n         the WTP\
    \ profile.\"\n    ::= { capwapBaseGroups 5 }\n"
- title: capwapBaseWtpProfileGroup2    OBJECT-GROUP
  contents:
  - "capwapBaseWtpProfileGroup2    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpProfileWtpStaticIpEnable,\n\
    \      capwapBaseWtpProfileWtpStaticIpType,\n      capwapBaseWtpProfileWtpStaticIpAddress,\n\
    \      capwapBaseWtpProfileWtpNetmask,\n      capwapBaseWtpProfileWtpGateway,\n\
    \      capwapBaseWtpProfileWtpFallbackEnable,\n      capwapBaseWtpProfileWtpEchoInterval,\n\
    \      capwapBaseWtpProfileWtpIdleTimeout,\n      capwapBaseWtpProfileWtpMaxDiscoveryInterval,\n\
    \      capwapBaseWtpProfileWtpReportInterval,\n      capwapBaseWtpProfileWtpStatisticsTimer,\n\
    \      capwapBaseWtpProfileWtpEcnSupport\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"A collection of optional objects that is used to\n         configure\
    \ the WTP profile.\"\n    ::= { capwapBaseGroups 6 }\n"
- title: capwapBaseWtpStateGroup    OBJECT-GROUP
  contents:
  - "capwapBaseWtpStateGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpStateWtpIpAddressType,\n\
    \      capwapBaseWtpStateWtpIpAddress,\n      capwapBaseWtpStateWtpLocalIpAddressType,\n\
    \      capwapBaseWtpStateWtpLocalIpAddress,\n      capwapBaseWtpStateWtpBaseMacAddress,\n\
    \      capwapBaseWtpState,\n      capwapBaseWtpStateWtpUpTime,\n      capwapBaseWtpStateWtpCurrWtpProfileId\n\
    \    }\n    STATUS  current\n    DESCRIPTION\n        \"A collection of objects\
    \ that is used to represent\n         the WTP's state information.\"\n    ::=\
    \ { capwapBaseGroups 7 }\n"
- title: capwapBaseWtpGroup    OBJECT-GROUP
  contents:
  - "capwapBaseWtpGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpBaseMacAddress,\n\
    \      capwapBaseWtpTunnelModeOptions,\n      capwapBaseWtpMacTypeOptions,\n \
    \     capwapBaseWtpDiscoveryType,\n      capwapBaseWtpRadiosInUseNum,\n      capwapBaseWtpRadioNumLimit\n\
    \    }\n    STATUS  current\n    DESCRIPTION\n        \"A collection of objects\
    \ that is used to represent\n         the properties information for the WTPs\
    \ in running state.\"\n    ::= { capwapBaseGroups 8 }\n"
- title: capwapBaseWtpGroup2   OBJECT-GROUP
  contents:
  - "capwapBaseWtpGroup2   OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpPhyIndex,\n\
    \      capwapBaseWtpRetransmitCount\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"A collection of optional objects that is used to represent\n      \
    \   the properties of the WTPs in running state.\"\n    ::= { capwapBaseGroups\
    \ 9 }\n"
- title: capwapBaseRadioGroup    OBJECT-GROUP
  contents:
  - "capwapBaseRadioGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWirelessBindingVirtualRadioIfIndex,\n\
    \      capwapBaseWirelessBindingType\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"A collection of objects that is used to represent\n         the wireless\
    \ binding type and the mappings between the\n         ifIndexes of WLAN Virtual\
    \ Radio Interfaces and PHY radios.\"\n    ::= { capwapBaseGroups 10 }\n"
- title: capwapBaseStationGroup    OBJECT-GROUP
  contents:
  - "capwapBaseStationGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseStationWtpId,\n\
    \      capwapBaseStationWtpRadioId,\n      capwapBaseStationAddedTime,\n     \
    \ capwapBaseStationVlanName\n    }\n    STATUS  current\n    DESCRIPTION\n   \
    \     \"A collection of objects that is used to represent\n         the stations'\
    \ basic properties.\"\n    ::= { capwapBaseGroups 11 }\n"
- title: capwapBaseWtpEventsStatsGroup    OBJECT-GROUP
  contents:
  - "capwapBaseWtpEventsStatsGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseWtpEventsStatsRebootCount,\n\
    \      capwapBaseWtpEventsStatsInitCount,\n      capwapBaseWtpEventsStatsLinkFailureCount,\n\
    \      capwapBaseWtpEventsStatsSwFailureCount,\n      capwapBaseWtpEventsStatsHwFailureCount,\n\
    \      capwapBaseWtpEventsStatsOtherFailureCount,\n      capwapBaseWtpEventsStatsUnknownFailureCount,\n\
    \      capwapBaseWtpEventsStatsLastFailureType\n    }\n    STATUS  current\n \
    \   DESCRIPTION\n        \"A collection of objects that is used for collecting\n\
    \         WTP reboot count, link failure count, hardware failure\n         count,\
    \ and so on.\"\n    ::= { capwapBaseGroups 12 }\n"
- title: capwapBaseRadioEventsStatsGroup    OBJECT-GROUP
  contents:
  - "capwapBaseRadioEventsStatsGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseRadioEventsStatsResetCount,\n\
    \      capwapBaseRadioEventsStatsSwFailureCount,\n      capwapBaseRadioEventsStatsHwFailureCount,\n\
    \      capwapBaseRadioEventsStatsOtherFailureCount,\n      capwapBaseRadioEventsStatsUnknownFailureCount,\n\
    \      capwapBaseRadioEventsStatsConfigUpdateCount,\n      capwapBaseRadioEventsStatsChannelChangeCount,\n\
    \      capwapBaseRadioEventsStatsBandChangeCount,\n      capwapBaseRadioEventsStatsCurrNoiseFloor,\n\
    \      capwapBaseRadioEventsStatsDecryptErrorCount,\n      capwapBaseRadioEventsStatsLastFailureType\n\
    \    }\n    STATUS  current\n    DESCRIPTION\n        \"A collection of objects\
    \ that is used for collecting\n         radio reset count, channel change count,\
    \ hardware failure\n         count, and so on\"\n    ::= { capwapBaseGroups 13\
    \ }\n"
- title: capwapBaseParametersGroup    OBJECT-GROUP
  contents:
  - "capwapBaseParametersGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseAcMaxRetransmit,\n\
    \      capwapBaseAcChangeStatePendingTimer,\n      capwapBaseAcDataCheckTimer,\n\
    \      capwapBaseAcDTLSSessionDeleteTimer,\n      capwapBaseAcEchoInterval,\n\
    \      capwapBaseAcRetransmitInterval,\n      capwapBaseAcSilentInterval,\n  \
    \    capwapBaseAcWaitDTLSTimer,\n      capwapBaseAcWaitJoinTimer,\n      capwapBaseAcEcnSupport\n\
    \    }\n    STATUS  current\n    DESCRIPTION\n        \"Objects used for the CAPWAP\
    \ protocol's parameters.\"\n    ::= { capwapBaseGroups 14 }\n"
- title: capwapBaseStatsGroup    OBJECT-GROUP
  contents:
  - "capwapBaseStatsGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseFailedDTLSAuthFailureCount,\n\
    \      capwapBaseFailedDTLSSessionCount\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"Objects used for collecting the CAPWAP protocol's statistics.\"\n \
    \   ::= { capwapBaseGroups 15 }\n"
- title: capwapBaseNotificationsGroup    NOTIFICATION-GROUP
  contents:
  - "capwapBaseNotificationsGroup    NOTIFICATION-GROUP\n    NOTIFICATIONS {\n   \
    \   capwapBaseChannelUp,\n      capwapBaseChannelDown,\n      capwapBaseDecryptErrorReport,\n\
    \      capwapBaseJoinFailure,\n      capwapBaseImageUpgradeFailure,\n      capwapBaseConfigMsgError,\n\
    \      capwapBaseRadioOperableStatus,\n      capwapBaseAuthenFailure\n    }\n\
    \    STATUS  current\n    DESCRIPTION\n        \"A collection of notifications\
    \ in this MIB module.\"\n    ::= { capwapBaseGroups 16 }\n"
- title: capwapBaseNotifyVarsGroup    OBJECT-GROUP
  contents:
  - "capwapBaseNotifyVarsGroup    OBJECT-GROUP\n    OBJECTS {\n      capwapBaseNtfWtpId,\n\
    \      capwapBaseNtfRadioId,\n      capwapBaseNtfChannelType,\n      capwapBaseNtfAuthenMethod,\n\
    \      capwapBaseNtfChannelDownReason,\n      capwapBaseNtfStationIdList,\n  \
    \    capwapBaseNtfAuthenFailureReason,\n      capwapBaseNtfRadioOperStatusFlag,\n\
    \      capwapBaseNtfRadioStatusCause,\n      capwapBaseNtfJoinFailureReason,\n\
    \      capwapBaseNtfImageFailureReason,\n      capwapBaseNtfConfigMsgErrorType,\n\
    \      capwapBaseNtfMsgErrorElements\n    }\n    STATUS  current\n    DESCRIPTION\n\
    \        \"Objects used for notifications.\"\n    ::= { capwapBaseGroups 17 }\n"
- title: capwapBaseNotifyControlGroup OBJECT-GROUP
  contents:
  - "capwapBaseNotifyControlGroup OBJECT-GROUP\n    OBJECTS {\n      capwapBaseChannelUpDownNotifyEnable,\n\
    \      capwapBaseDecryptErrorNotifyEnable,\n      capwapBaseJoinFailureNotifyEnable,\n\
    \      capwapBaseImageUpgradeFailureNotifyEnable,\n      capwapBaseConfigMsgErrorNotifyEnable,\n\
    \      capwapBaseRadioOperableStatusNotifyEnable,\n      capwapBaseAuthenFailureNotifyEnable\n\
    \   }\n   STATUS  current\n   DESCRIPTION\n        \"Objects used to enable or\
    \ disable notifications.\"\n   ::= { capwapBaseGroups 18 }\n"
- title: END
  contents:
  - 'END

    '
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   There are a number of management objects defined\
    \ in this MIB module\n   with a MAX-ACCESS clause of read-write and/or read-create.\
    \  Such\n   objects MAY be considered sensitive or vulnerable in some network\n\
    \   environments.  The support for SET operations in a non-secure\n   environment\
    \ without proper protection can have a negative effect on\n   network operations.\
    \  The followings are the tables and objects and\n   their sensitivity/vulnerability:\n\
    \   -  Unauthorized changes to the capwapBaseWtProfileTable and writable\n   \
    \   objects under capwapBaseAcs group MAY disrupt allocation of\n      resources\
    \ in the network.  For example, a WTP's static IP address\n      could be changed\
    \ by setting the\n      capwapBaseWtpProfileWtpStaticIpAddress object.\n   - \
    \ Unauthorized changes to writable objects under the capwapBaseAc\n      group\
    \ MAY disrupt allocation of resources in the network.  For\n      example, an\
    \ invalid value for the capwapBaseWtpSessionsLimit\n      object will increase\
    \ the AC's traffic burden.\n   -  Unauthorized changes to the capwapBaseMacAclTable\
    \ MAY prevent\n      legal stations from being able to access the network, while\n\
    \      illegal stations are able to access it.\n   -  Unauthorized changes to\
    \ writable objects under the\n      capwapBaseParameters group MAY influence CAPWAP\
    \ protocol behavior\n      and status.  For example, an invalid value set for\
    \ the\n      capwapBaseAcDataCheckTimer MAY influence the CAPWAP state machine.\n\
    \   Some of the readable objects in this MIB module (i.e., objects with a\n  \
    \ MAX-ACCESS other than not-accessible) MAY be considered sensitive or\n   vulnerable\
    \ in some network environments.  It is thus important to\n   control even GET\
    \ and/or NOTIFY access to these objects and possibly\n   to even encrypt the values\
    \ of these objects when sending them over\n   the network via SNMP.  The followings\
    \ are the tables and objects and\n   their sensitivity/vulnerability:\n   -  The\
    \ capwapBaseDataChannelDTLSPolicyOptions and\n      capwapBaseControlChannelAuthenOptions\
    \ under the capwapBaseAc group\n      expose the current security option for CAPWAP\
    \ data and control\n      channels.\n   -  The capwapBaseWtpTable exposes a WTP's\
    \ important information like\n      tunnel mode, MAC type, and so on.\n   -  The\
    \ capwapBaseWtpEventsStatsTable exposes a WTP's failure\n      information.\n\
    \   -  The capwapBaseRadioEventsStatsTable exposes a radio's failure\n      information.\n\
    \   SNMP versions prior to SNMPv3 did not include adequate security.\n   Even\
    \ if the network itself is secure (for example by using IPsec),\n   even then,\
    \ there is no control as to who on the secure network is\n   allowed to access\
    \ and GET/SET (read/change/create/delete) the objects\n   in this MIB module.\n\
    \   It is RECOMMENDED that implementers consider the security features as\n  \
    \ provided by the SNMPv3 framework (see [RFC3410], section 8),\n   including full\
    \ support for the SNMPv3 cryptographic mechanisms (for\n   authentication and\
    \ privacy).\n   Further, the deployment of SNMP versions prior to SNMPv3 is NOT\n\
    \   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable\
    \ cryptographic security.  It is then a customer/operator\n   responsibility to\
    \ ensure that the SNMP entity giving access to an\n   instance of this MIB module\
    \ is properly configured to give access to\n   the objects only to those principals\
    \ (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)\
    \ them.\n"
- title: 11.  IANA Considerations
  contents:
  - '11.  IANA Considerations

    '
- title: 11.1.  IANA Considerations for CAPWAP-BASE-MIB Module
  contents:
  - "11.1.  IANA Considerations for CAPWAP-BASE-MIB Module\n   The MIB module in this\
    \ document uses the following IANA-assigned\n   OBJECT IDENTIFIER value recorded\
    \ in the SMI Numbers registry:\n        Descriptor     OBJECT IDENTIFIER value\n\
    \        ----------     -----------------------\n        capwapBaseMIB  { mib-2\
    \ 196 }\n"
- title: 11.2.  IANA Considerations for ifType
  contents:
  - "11.2.  IANA Considerations for ifType\n   IANA has assigned the following ifType:\n\
    \       Decimal   Name                   Description\n       -------   ------------\
    \           -------------------------------\n       254       capwapWtpVirtualRadio\
    \  WTP Virtual Radio Interface\n"
- title: 12.  Contributors
  contents:
  - "12.  Contributors\n   This MIB module is based on contributions from Long Gao.\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   Thanks to David Harrington, Dan Romascanu, Abhijit\
    \ Choudhury, Bert\n   Wijnen, and David L. Black for helpful comments on this\
    \ document and\n   guiding some technical solutions.\n   The authors also thank\
    \ the following friends and coworkers: Fei Fang,\n   Xuebin Zhu, Hao Song, Yu\
    \ Liu, Sachin Dutta, Ju Wang, Hao Wang, Yujin\n   Zhao, Haitao Zhang, Xiansen\
    \ Cai, and Xiaolan Wan.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2119]           Bradner, S., \"Key words\
    \ for use in RFCs to\n                       Indicate Requirement Levels\", BCP\
    \ 14, RFC 2119,\n                       March 1997.\n   [RFC2287]           Krupczak,\
    \ C. and J. Saperia, \"Definitions of\n                       System-Level Managed\
    \ Objects for Applications\",\n                       RFC 2287, February 1998.\n\
    \   [RFC2578]           McCloghrie, K., Ed., Perkins, D., Ed., and J.\n      \
    \                 Schoenwaelder, Ed., \"Structure of Management\n            \
    \           Information Version 2 (SMIv2)\", STD 58, RFC 2578,\n             \
    \          April 1999.\n   [RFC2579]           McCloghrie, K., Ed., Perkins, D.,\
    \ Ed., and J.\n                       Schoenwaelder, Ed., \"Textual Conventions\
    \ for\n                       SMIv2\", STD 58, RFC 2579, April 1999.\n   [RFC2580]\
    \           McCloghrie, K., Perkins, D., and J.\n                       Schoenwaelder,\
    \ \"Conformance Statements for\n                       SMIv2\", STD 58, RFC 2580,\
    \ April 1999.\n   [RFC2863]           McCloghrie, K. and F. Kastenholz, \"The\
    \ Interfaces\n                       Group MIB\", RFC 2863, June 2000.\n   [RFC3411]\
    \           Harrington, D., Presuhn, R., and B. Wijnen, \"An\n               \
    \        Architecture for Describing Simple Network\n                       Management\
    \ Protocol (SNMP) Management\n                       Frameworks\", STD 62, RFC\
    \ 3411, December 2002.\n   [RFC3418]           Presuhn, R., \"Management Information\
    \ Base (MIB)\n                       for the Simple Network Management Protocol\n\
    \                       (SNMP)\", STD 62, RFC 3418, December 2002.\n   [RFC4001]\
    \           Daniele, M., Haberman, B., Routhier, S., and J.\n                \
    \       Schoenwaelder, \"Textual Conventions for Internet\n                  \
    \     Network Addresses\", RFC 4001, February 2005.\n   [RFC4133]           Bierman,\
    \ A. and K. McCloghrie, \"Entity MIB\n                       (Version 3)\", RFC\
    \ 4133, August 2005.\n   [RFC5415]           Calhoun, P., Montemurro, M., and\
    \ D. Stanley,\n                       \"Control And Provisioning of Wireless Access\n\
    \                       Points (CAPWAP) Protocol Specification\",\n          \
    \             RFC 5415, March 2009.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [Err1832]           RFC Errata, \"Errata ID\
    \ 1832\", for RFC 5415,\n                       <http://www.rfc-editor.org>.\n\
    \   [IEEE.802-11.2007]  \"Information technology - Telecommunications and\n  \
    \                     information exchange between systems  - Local and\n    \
    \                   metropolitan area networks - Specific\n                  \
    \     requirements - Part 11: Wireless LAN Medium\n                       Access\
    \ Control (MAC) and Physical Layer (PHY)\n                       specifications\"\
    , IEEE Standard 802.11, 2007, <htt\n                       p://standards.ieee.org/getieee802/download/\n\
    \                       802.11-2007.pdf>.\n   [RFC3168]           Ramakrishnan,\
    \ K., Floyd, S., and D. Black, \"The\n                       Addition of Explicit\
    \ Congestion Notification\n                       (ECN) to IP\", RFC 3168, September\
    \ 2001.\n   [RFC3410]           Case, J., Mundy, R., Partain, D., and B. Stewart,\n\
    \                       \"Introduction and Applicability Statements for\n    \
    \                   Internet-Standard Management Framework\",\n              \
    \         RFC 3410, December 2002.\n   [RFC4118]           Yang, L., Zerfos, P.,\
    \ and E. Sadot, \"Architecture\n                       Taxonomy for Control and\
    \ Provisioning of Wireless\n                       Access Points (CAPWAP)\", RFC\
    \ 4118, June 2005.\n   [RFC4347]           Rescorla, E. and N. Modadugu, \"Datagram\
    \ Transport\n                       Layer Security\", RFC 4347, April 2006.\n\
    \   [RFC5416]           Calhoun, P., Montemurro, M., and D. Stanley,\n       \
    \                \"Control and Provisioning of Wireless Access\n             \
    \          Points (CAPWAP) Protocol Binding for IEEE\n                       802.11\"\
    , RFC 5416, March 2009.\n   [RFC5834]           Shi, Y., Ed., Perkins, D., Ed.,\
    \ Elliott, C., Ed.,\n                       and Y. Zhang, Ed., \"Control and Provisioning\
    \ of\n                       Wireless Access Points (CAPWAP) Protocol Binding\n\
    \                       MIB for IEEE 802.11\", RFC 5834, May 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yang Shi (editor)\n   Hangzhou H3C Tech. Co., Ltd.\n \
    \  Beijing R&D Center of H3C, Digital Technology Plaza\n   NO. 9 Shangdi 9th Street,\
    \ Haidian District\n   Beijing  100085\n   China\n   Phone: +86 010 82775276\n\
    \   EMail: rishyang@gmail.com\n   David T. Perkins (editor)\n   228 Bayview Dr.\n\
    \   San Carlos, CA  94070\n   USA\n   Phone: +1 408 394-8702\n   EMail: dperkins@dsperkins.com\n\
    \   Chris Elliott (editor)\n   1516 Kent St.\n   Durham, NC  27707\n   USA\n \
    \  Phone: +1 919-308-1216\n   EMail: chelliot@pobox.com\n   Yong Zhang (editor)\n\
    \   Fortinet, Inc.\n   1090 Kifer Road\n   Sunnyvale, CA  94086\n   USA\n   EMail:\
    \ yzhang@fortinet.com\n"
