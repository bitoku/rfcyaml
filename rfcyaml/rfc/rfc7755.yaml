- title: __initial_text__
  contents:
  - ''
- title: 'SIIT-DC: Stateless IP/ICMP Translation for IPv6 Data Center Environments'
  contents:
  - 'SIIT-DC: Stateless IP/ICMP Translation for IPv6 Data Center Environments

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the use of the Stateless IP/ICMP Translation\n\
    \   Algorithm (SIIT) in an IPv6 Internet Data Center (IDC).  In this\n   deployment\
    \ model, traffic from legacy IPv4-only clients on the\n   Internet is translated\
    \ to IPv6 upon reaching the IDC operator's\n   network infrastructure.  From that\
    \ point on, it may be treated the\n   same as traffic from native IPv6 end users.\
    \  The IPv6 endpoints may\n   be numbered using arbitrary (non-IPv4-translatable)\
    \ IPv6 addresses.\n   This facilitates a single-stack IPv6-only network infrastructure,\
    \ as\n   well as efficient utilization of public IPv4 addresses.\n   The primary\
    \ audience is IDC operators who are deploying IPv6, running\n   out of available\
    \ IPv4 addresses, and/or feeling that dual stack\n   causes undesirable operational\
    \ complexity.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7755.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Single-Stack IPv6 Operation . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Stateless Operation . . . . . . . . . . . . . . . .\
    \ . . .   4\n     1.3.  IPv4 Address Conservation . . . . . . . . . . . . . .\
    \ . .   4\n     1.4.  Clients' IPv4 Source Addresses Visible to Applications \
    \ .   5\n     1.5.  Compatible with Standard IPv4 and IPv6 Stacks . . . . . .\
    \   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 6\n   3.  Architectural Overview  . . . . . . . . . . . . . . . . . . .   8\n\
    \     3.1.  Packet Flow . . . . . . . . . . . . . . . . . . . . . . .   9\n  \
    \ 4.  Deployment Considerations and Guidelines  . . . . . . . . . .  10\n    \
    \ 4.1.  Application/Device Support for IPv6 . . . . . . . . . . .  10\n     4.2.\
    \  Application Support for NAT . . . . . . . . . . . . . . .  10\n     4.3.  Application\
    \ Communication Pattern . . . . . . . . . . . .  10\n     4.4.  Choice of Translation\
    \ Prefix  . . . . . . . . . . . . . .  11\n     4.5.  Routing Considerations \
    \ . . . . . . . . . . . . . . . . .  12\n     4.6.  Location of the SIIT-DC Border\
    \ Relays . . . . . . . . . .  12\n     4.7.  Migration from Dual Stack . . . .\
    \ . . . . . . . . . . . .  13\n     4.8.  Translation of ICMPv6 Errors to IPv4\
    \  . . . . . . . . . .  13\n     4.9.  MTU and Fragmentation . . . . . . . . .\
    \ . . . . . . . . .  13\n       4.9.1.  IPv4/IPv6 Header Size Difference  . .\
    \ . . . . . . . .  14\n       4.9.2.  IPv6 Atomic Fragments . . . . . . . . .\
    \ . . . . . . .  14\n       4.9.3.  Minimum Path MTU Difference between IPv4 and\
    \ IPv6 . .  15\n     4.10. IPv4-Translatable IPv6 Service Addresses  . . . . .\
    \ . . .  16\n   5.  Security Considerations . . . . . . . . . . . . . . . . .\
    \ . .  17\n     5.1.  Mistaking the Translation Prefix for a Trusted Network \
    \ .  17\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  17\n     6.1.  Normative References  . . . . . . . . . . . . . . . . . .  17\n\
    \     6.2.  Informative References  . . . . . . . . . . . . . . . . .  18\n  \
    \ Appendix A.  Complete SIIT-DC IDC Topology Example  . . . . . . .  21\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  24\n   Author's Address  .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Historically, dual stack [RFC4213] [RFC6883] has been the\
    \ recommended\n   way to transition from a legacy IPv4-only environment to one\
    \ capable\n   of serving IPv6 users.  However, for IDC operators, dual-stack\n\
    \   operation has a number of disadvantages compared to single-stack\n   operation.\
    \  In particular, running two protocols rather than one\n   results in increased\
    \ complexity and operational overhead with little\n   return on investment for\
    \ as long as large parts of the public\n   Internet remains predominantly IPv4\
    \ only.  Furthermore, the dual-\n   stack approach does not in any way help with\
    \ the depletion of the\n   IPv4 address space, which at the time of writing is\
    \ a pressing\n   concern in most parts of the world.\n   Therefore, some IDC operators\
    \ may instead prefer an approach in which\n   they only need to operate one protocol\
    \ in the data center as they\n   prepare for the future.  Stateless IP/ICMP Translation\
    \ for IPv6 Data\n   Center Environments (SIIT-DC) is one such approach.  Its design\
    \ goals\n   include:\n   o  Promote the deployment of native IPv6 services (cf.\
    \ [RFC6540]).\n   o  Provide IPv4 service availability for legacy users with no\
    \ loss of\n      performance or functionality.\n   o  Ensure that the legacy users'\
    \ IPv4 addresses remain visible to the\n      nodes and applications located in\
    \ the IPv6 network.\n   o  Conserve and maximize the utilization of the operator's\
    \ public\n      IPv4 addresses.\n   o  Avoid introducing more complexity than\
    \ absolutely necessary,\n      especially on the nodes and applications.\n   o\
    \  Easy to scale and deploy in a fault-tolerant manner.\n   The following subsections\
    \ elaborate on how SIIT-DC meets these goals.\n"
- title: 1.1.  Single-Stack IPv6 Operation
  contents:
  - "1.1.  Single-Stack IPv6 Operation\n   SIIT-DC allows IDC operators to build their\
    \ infrastructure and\n   applications on an IPv6-only foundation.  IPv4 end-user\
    \ connectivity\n   becomes a service provided by the network, which systems\n\
    \   administration and application development staff do not need to\n   concern\
    \ themselves with.  This promotes universal IPv6 deployment for\n   the IDC operator's\
    \ services and applications.\n   SIIT-DC requires no special support or change\
    \ from the underlying\n   IPv6 infrastructure; it is compatible with all standard\
    \ IPv6\n   networks.  Traffic between IPv6-enabled end users and IPv6-enabled\n\
    \   services will always be transported native end to end; SIIT-DC does\n   not\
    \ intercept or handle native IPv6 traffic at all.\n   When the day comes to discontinue\
    \ all support for IPv4, no change\n   needs to be made to the overall architecture\
    \ -- it's only a matter of\n   shutting off the SIIT-DC Border Relays (BRs). \
    \ Operators who deploy\n   native IPv6 along with SIIT-DC will thus avoid requiring\
    \ any future\n   migration or deployment projects relating to IPv6 deployment\
    \ and/or\n   IPv4 sunsetting.\n"
- title: 1.2.  Stateless Operation
  contents:
  - "1.2.  Stateless Operation\n   Unlike other solutions that provide either dual-stack\
    \ availability to\n   single-stack services (e.g., Stateful Network Address and\
    \ Protocol\n   Translation from IPv6 Clients to IPv4 Servers (NAT64) [RFC6146]\
    \ and\n   Layer 4/7 proxies) or conservation of IPv4 addresses (e.g., IPv4\n \
    \  address translation (NAPT44) [RFC3022]), SIIT-DC does not maintain\n   any\
    \ state associated with individual connections or flows.  In this\n   sense, it\
    \ operates exactly like a regular IP router and has similar\n   scaling properties\
    \ -- the limiting factors are packets per second and\n   bandwidth.  The number\
    \ of concurrent flows and flow initiation rates\n   are irrelevant for performance.\n\
    \   This not only allows individual BRs to easily attain \"line-rate\"\n   performance,\
    \ but it also allows for per-packet load balancing between\n   multiple BRs using\
    \ Equal-Cost Multipath Routing [RFC2991].\n   Asymmetric routing is also acceptable,\
    \ which makes it easy to avoid\n   suboptimal traffic patterns; the prefixes involved\
    \ may be anycasted\n   from all the BRs in the provider's network, thus ensuring\
    \ that the\n   most optimal path through the network is used, even where the optimal\n\
    \   path in one direction differs from the optimal path in the opposite\n   direction.\n\
    \   Finally, stateless operation means that high availability is easily\n   achieved.\
    \  If a BR should fail, its traffic can be rerouted onto\n   another BR using\
    \ a standard IP routing protocol.  This does not\n   impact existing flows any\
    \ more than what any other IP rerouting event\n   would.\n"
- title: 1.3.  IPv4 Address Conservation
  contents:
  - "1.3.  IPv4 Address Conservation\n   In most parts of the world, it is difficult\
    \ or even impossible to\n   obtain generously sized IPv4 delegations from the\
    \ Internet Numbers\n   Registry System [RFC7020].  The resulting scarcity in turn\
    \ impacts\n   individual end users and operators, whom might be forced to purchase\n\
    \   IPv4 addresses from other operators in order to cover their needs.\n   This\
    \ process can be risky to business continuity, in the case where\n   no suitable\
    \ block for sale can be located, and/or turn out to be\n   prohibitively expensive.\
    \  In spite of this, an IDC operator will find\n   that providing IPv4 service\
    \ remains essential, as a large share of\n   the Internet end users still do not\
    \ have IPv6 connectivity.\n   A key goal of SIIT-DC is to help reduce a data center\
    \ operator's IPv4\n   address requirement to the absolute minimum by allowing\
    \ the operator\n   to remove them entirely from nodes and applications that do\
    \ not need\n   to communicate with endpoints in the IPv4 Internet.  One example\n\
    \   would be servers that are operating in a supporting/backend role and\n   only\
    \ communicating with other servers (database servers, file\n   servers, and so\
    \ on).  Another example would be the network\n   infrastructure itself (router-to-router\
    \ links, loopback addresses,\n   and so on).  Furthermore, as LAN prefix sizes\
    \ must always be rounded\n   up to the nearest power of two (or larger if one\
    \ reserves space for\n   future growth), even more IPv4 addresses will often end\
    \ up being\n   wasted without even being used.\n   With SIIT-DC, the operator\
    \ can remove these valuable IPv4 addresses\n   from his backend servers and network\
    \ infrastructure and reassign them\n   to the SIIT-DC service as IPv4 Service\
    \ Addresses.  There exists no\n   requirement that IPv4 Service Addresses are\
    \ to be assigned in an\n   aggregated manner, so there is nothing lost due to\
    \ infrastructure\n   overhead; every single IPv4 address assigned to SIIT-DC can\
    \ be used\n   as an IPv4 Service Address.\n"
- title: 1.4.  Clients' IPv4 Source Addresses Visible to Applications
  contents:
  - "1.4.  Clients' IPv4 Source Addresses Visible to Applications\n   SIIT-DC uses\
    \ the [RFC6052] algorithm to map the entire end-user's\n   IPv4 source address\
    \ into a predefined IPv6 translation prefix.  This\n   ensures that there is no\
    \ loss of information; the end-user's IPv4\n   source address remains available\
    \ to the application located in the\n   IPv6 network, allowing it to perform tasks\
    \ like geolocation, logging,\n   abuse handling, and so forth.\n"
- title: 1.5.  Compatible with Standard IPv4 and IPv6 Stacks
  contents:
  - "1.5.  Compatible with Standard IPv4 and IPv6 Stacks\n   Except for the introduction\
    \ of the BRs themselves, no change to the\n   network, nodes, applications, or\
    \ anything else is required in order\n   to support SIIT-DC.  SIIT-DC is practically\
    \ invisible from the point\n   of view of the IPv4 clients, the IPv6 nodes, the\
    \ IPv6 data center\n   network, and the IPv4 Internet.  SIIT-DC interoperates\
    \ with all\n   standards-compliant IPv4 or IPv6 stacks.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document makes use of the following terms:\n   SIIT-DC\
    \ Border Relay (BR):\n      A device or a logical function that performs stateless\
    \ protocol\n      translation between IPv4 and IPv6.  It MUST do so in accordance\n\
    \      with [RFC6145] and [RFC7757].\n   SIIT-DC Edge Relay (ER):\n      A device\
    \ or logical function that provides \"native\" IPv4\n      connectivity to IPv4-only\
    \ devices or application software.  It is\n      very similar in function to a\
    \ BR but is typically located close to\n      the IPv4-only component(s) it is\
    \ supporting rather than on the\n      IDC's outer network border.  The ER is\
    \ an optional component of\n      SIIT-DC.  It is discussed in more detail in\
    \ [RFC7756].\n   IPv4 Service Address:\n      An IPv4 address representing a node\
    \ or service located in an IPv6\n      network.  It is coupled with an IPv6 Service\
    \ Address using an\n      Explicit Address Mapping (EAM).  Packets sent to this\
    \ address are\n      translated to IPv6 by the BR, and possibly back to IPv4 by\
    \ an ER,\n      before reaching the node or service.\n   IPv4 Service Address\
    \ Pool:\n      One or more IPv4 prefixes routed to the BR's IPv4 interface.  IPv4\n\
    \      Service Addresses are allocated from this pool.  This does not\n      necessarily\
    \ have to be a \"pool\" per se, as it could also be one or\n      more host routes\
    \ (whose prefix lengths are equal to /32).  The\n      purpose of using a pool\
    \ rather than host routes is to facilitate\n      IPv4 route aggregation and ease\
    \ provisioning of new IPv4 Service\n      Addresses.\n   IPv6 Service Address:\n\
    \      An IPv6 address assigned to an application, node, or service\n      either\
    \ directly or indirectly (through an ER).  It is coupled with\n      an IPv4 Service\
    \ Address using an EAM.  IPv4-only clients\n      communicate with the IPv6 Service\
    \ Address through SIIT-DC.\n   Explicit Address Mapping (EAM):\n      A bidirectional\
    \ coupling between an IPv4 Service Address and an\n      IPv6 Service Address\
    \ configured in a BR or ER.  When translating\n      between IPv4 and IPv6, the\
    \ BR/ER changes the address fields in the\n      translated packet's IP header\
    \ according to any matching EAM.  The\n      EAM algorithm is specified in [RFC7757].\n\
    \   Translation Prefix:\n      An IPv6 prefix into which the entire IPv4 address\
    \ space is mapped,\n      according to the algorithm in [RFC6052].  The translation\
    \ prefix\n      is routed to the BR's IPv6 interface.  When translating between\n\
    \      IPv4 and IPv6, a BR/ER will insert/remove the translation prefix\n    \
    \  into/from the address fields in the translated packet's IP header,\n      unless\
    \ an EAM exists for the IP address that is being translated.\n   IPv4-Translatable\
    \ IPv6 Addresses:\n      As defined in Section 1.3 of [RFC6052].\n   IDC:\n  \
    \    Short for \"Internet Data Center\"; a data center whose main purpose\n  \
    \    is to deliver services to the public Internet.  SIIT-DC is\n      primarily\
    \ targeted at being deployed in an IDC.  An IDC is\n      typically operated by\
    \ an Internet Content Provider or a Managed\n      Services Provider.\n   SIIT:\n\
    \      The Stateless IP/ICMP Translation Algorithm, as specified in\n      [RFC6145].\n\
    \   XLAT:\n      Short for \"Translation\".  Used in figures to indicate where\
    \ a BR/\n      ER uses SIIT [RFC6145] to translate IPv4 packets to IPv6 and vice\n\
    \      versa.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Architectural Overview
  contents:
  - "3.  Architectural Overview\n   This section describes the basic SIIT-DC architecture.\n\
    \              IPv6-capable user      IPv4-only user\n              <2001:db8::ab:cd>\
    \      <203.0.113.50>\n                |                          |\n        \
    \     (the IPv6 Internet)   (the IPv4 Internet)\n                |           \
    \               |\n                |  +-[BR]---------<192.0.2.0/24>--------------+\n\
    \                |  |                                          |\n           \
    \     |  | EAM #1:      192.0.2.1,2001:db8:12:34::1 |\n                |  | EAM\
    \ #2..#n:  [...]                       |\n                |  | XLAT Prefix: 2001:db8:46::/96\
    \            |\n                |  |                                         \
    \ |\n                |  +------------<2001:db8:46::/96>------------+\n       \
    \         |                        |\n               (the IPv6-only data center\
    \ network)\n                           |\n            +--<2001:db8:12:34::1>--[v6-only\
    \ server]-+\n            |     |                                  |\n        \
    \    | +-[2001:db8:12:34::1]--[v6-only app]-+ |\n            | |   AF_INET6 socket\
    \                  | |\n            | +------------------------------------+ |\n\
    \            +----------------------------------------+\n                    \
    \  Figure 1: SIIT-DC Architecture\n   In Figure 1, 192.0.2.0/24 is the IPv4 Service\
    \ Address Pool.\n   Individual IPv4 Service Addresses are assigned from this prefix,\
    \ and\n   traffic destined for it is routed to the BR's IPv4-facing network\n\
    \   interface.  There are no restrictions on how many IPv4 Service\n   Address\
    \ Pools are used or their prefix length, as long as they are\n   all routed to\
    \ the BR's IPv4-facing network interface.\n   When translating packets between\
    \ IPv4 and IPv6, the BR uses EAM #1 to\n   replace any occurrence of the IPv4\
    \ Service Address (192.0.2.1) with\n   its corresponding IPv6 Service Address\
    \ (2001:db8:12:34::1).\n   Addresses that do not match any EAM configured in the\
    \ BR are\n   translated by inserting or removing the translation prefix\n   (2001:db8:46::/96);\
    \ cf. Section 2.2 of [RFC6052].\n   The BR can be deployed as a separate device\
    \ or as a logical function\n   in another multipurpose device, such as an IP router.\
    \  Any number of\n   BRs may exist simultaneously in the IDC's network infrastructure,\
    \ as\n   long as they are all configured with the same translation prefix and\n\
    \   an identical EAM Table.\n   The IPv6 Service Address should be registered\
    \ in DNS using an \"IN\n   AAAA\" record, while its corresponding IPv4 Service\
    \ Address should be\n   registered using an \"IN A\" record.  This ensures that\
    \ IPv6-capable\n   clients access the application/service directly using native\
    \ IPv6 end\n   to end, while IP4-only clients will access it through SIIT-DC.\n"
- title: 3.1.  Packet Flow
  contents:
  - "3.1.  Packet Flow\n   In this example, the \"IPv4-only user\" from Figure 1 initiates\
    \ a\n   connection to the application running on the IPv6-only server.  After\n\
    \   first having looked up the \"IN A\" record in DNS, the user starts by\n  \
    \ transmitting a TCP SYN packet to the IPv4 Service Address.  This IPv4\n   packet\
    \ is routed to the BR and is there translated to IPv6 as\n   follows:\n      \
    \  +--[IPv4]----------+     +--[IPv6]-----------------------+\n        | SRC 203.0.113.50\
    \ |     | SRC 2001:db8:46::203.0.113.50 |\n        | DST 192.0.2.1    | --> |\
    \ DST 2001:db8:12:34::1         |\n        | TCP SYN [..]     |     | TCP SYN\
    \ [..]                  |\n        +------------------+     +-------------------------------+\n\
    \                    Figure 2: IPv4-to-IPv6 Translation\n   The resulting IPv6\
    \ packet is routed to the IPv6-only server, which\n   processes and responds to\
    \ it as if it had been a native IPv6 packet\n   all along.  The server's IPv6\
    \ response packet is then routed back to\n   the BR, where it is translated back\
    \ to IPv4 as follows:\n        +--[IPv6]-----------------------+      +--[IPv4]----------+\n\
    \        | SRC 2001:db8:12:34::1         |      | SRC 192.0.2.1    |\n       \
    \ | DST 2001:db8:46::203.0.113.50 | -->  | DST 203.0.113.50 |\n        | TCP SYN/ACK\
    \ [..]              |      | TCP SYN/ACK [..] |\n        +-------------------------------+\
    \      +------------------+\n                    Figure 3: IPv6-to-IPv4 Translation\n\
    \   It is important to note that neither the IPv4 client nor the IPv6\n   server/application\
    \ need any special support to participate in\n   SIIT-DC.  However, the application\
    \ may optionally be taught to\n   extract the embedded IPv4 source address from\
    \ incoming IPv6 packets\n   with source addresses within the translation prefix.\
    \  This will allow\n   it to perform IPv4-specific tasks such as geolocation,\
    \ logging, abuse\n   handling, and so on.\n"
- title: 4.  Deployment Considerations and Guidelines
  contents:
  - '4.  Deployment Considerations and Guidelines

    '
- title: 4.1.  Application/Device Support for IPv6
  contents:
  - "4.1.  Application/Device Support for IPv6\n   SIIT-DC as described in this document\
    \ requires that the application\n   (and/or the node the application is located\
    \ on) supports IPv6\n   networking and that it has no dependency on local IPv4\
    \ network\n   connectivity.\n   SIIT-DC can, however, support legacy IPv4-dependent\
    \ applications and\n   nodes through the introduction of an ER.  The ER provides\
    \ the legacy\n   application or node with seemingly native IPv4 Internet connectivity,\n\
    \   so that it may operate correctly in an otherwise IPv6-only network\n   environment.\
    \  This approach is described in more detail in [RFC7756].\n"
- title: 4.2.  Application Support for NAT
  contents:
  - "4.2.  Application Support for NAT\n   The operator should carefully examine whether\
    \ or not the application\n   protocols he would like to use SIIT-DC with are able\
    \ to operate in a\n   network environment where rewriting of IP addresses occurs.\
    \  In\n   general, if an application-layer protocol works correctly through\n\
    \   standard NAT44 (see [RFC3235]), it will most likely work correctly\n   through\
    \ SIIT-DC as well.\n   Higher-level protocols that embed IP addresses as part\
    \ of their\n   payload are particularly problematic [RFC2663] [RFC2993] [RFC3022].\n\
    \   One well-known example of such a protocol is FTP [RFC959].  Such\n   protocols\
    \ can be made to work with SIIT-DC through the introduction\n   of an ER, which\
    \ provides end-to-end IPv4 address transparency by\n   reversing the translations\
    \ performed by the BR before passing the\n   packets to the NAT-incompatible application.\
    \  This approach is\n   described in more detail in [RFC7756].\n"
- title: 4.3.  Application Communication Pattern
  contents:
  - "4.3.  Application Communication Pattern\n   SIIT-DC is best suited for traditional\
    \ client/server applications\n   where IPv4-only clients on the Internet initiate\
    \ traffic towards an\n   IPv6-only service, which in turn is passively listening\
    \ for inbound\n   traffic and responding as necessary.  In this case, an IPv4\
    \ client\n   looks exactly like a native IPv6 client from the IPv6 service's point\n\
    \   of view and thus does not require any special treatment.  One\n   particularly\
    \ common application protocol that follows this client/\n   server communication\
    \ pattern, and thus is ideally suited for use with\n   SIIT-DC, is HTTP [RFC7230].\n\
    \   It is also possible to combine SIIT-DC with DNS64 [RFC6147] in order\n   to\
    \ allow an IPv6-only application to initiate communication with\n   IPv4-only\
    \ nodes through SIIT-DC.  However, in this case, care must be\n   taken so that\
    \ all outgoing communication is sourced from an IPv6\n   Service Address that\
    \ is found in an EAM configured in the BR.  If\n   another address is used, the\
    \ BR will most likely be unable to\n   translate it to IPv4, causing the packet\
    \ to be discarded.  This could\n   be prevented by altering the Default Address\
    \ Selection Policy\n   Table [RFC6724] on the IPv6 node.\n   An alternative approach\
    \ to the above would be to place an ER in front\n   of the application in question,\
    \ as described in [RFC7756].  This\n   provides the application with seemingly\
    \ native IPv4 connectivity,\n   which it may use freely for bidirectional communication\
    \ with the IPv4\n   Internet.  An application or node located behind an ER does\
    \ not need\n   to worry about selecting a specific source address, as it will\
    \ only\n   have valid options available.\n"
- title: 4.4.  Choice of Translation Prefix
  contents:
  - "4.4.  Choice of Translation Prefix\n   Either a Network-Specific Prefix (NSP)\
    \ from the provider's own IPv6\n   address space or the IANA-allocated Well-Known\
    \ Prefix (WKP)\n   64:ff9b::/96 may be used.  From a technical point of view,\
    \ both work\n   equally well.  However, only a single WKP exists, so if a provider\n\
    \   would like to deploy more than one instance of SIIT-DC in his\n   network,\
    \ or another translation technology such as Stateful NAT64\n   [RFC6146], the\
    \ operator will be forced to use an NSP for all but one\n   of those deployments.\n\
    \   Another consideration is that the WKP cannot be used in inter-domain\n   routing.\
    \  By using an NSP instead, SIIT-DC will support a deployment\n   where the BR\
    \ and the IPv6 Service Address are located in different\n   Autonomous Systems.\n\
    \   The translation prefix may use any of the lengths described in\n   Section\
    \ 2.2 of [RFC6052], but /96 has two distinct advantages over\n   the others. \
    \ First, converting it to IPv4 can be done in a single\n   operation by simply\
    \ stripping off the first 96 bits; second, it\n   allows for IPv4 addresses to\
    \ be embedded directly into the text\n   representation of an IPv6 address using\
    \ the familiar dotted quad\n   notation, e.g., \"2001:db8::198.51.100.10\" (cf.\
    \  Section 2.4 of\n   [RFC6052]), instead of being converted to hexadecimal notation.\
    \  This\n   makes it easier to write literal IPv6 addresses (e.g., in ACLs) that\n\
    \   correspond to translated endpoints in the IPv4 Internet.\n   For the reasons\
    \ discussed above, this document recommends that an NSP\n   with a prefix length\
    \ of /96 be used.  Section 3.3 of [RFC6052]\n   discusses the choice of the translation\
    \ prefix in more detail.\n"
- title: 4.5.  Routing Considerations
  contents:
  - "4.5.  Routing Considerations\n   The prefixes that constitute the IPv4 Service\
    \ Address Pool and the\n   IPv6 translation prefix may be routed to the BRs like\
    \ any other IPv4\n   or IPv6 route in the provider's network.  If more than one\
    \ BR is\n   being deployed, it is recommended that a routing protocol (IGP) be\n\
    \   used to advertise the routes within the provider's network.  This\n   will\
    \ ensure that the traffic that is to be translated will reach the\n   closest\
    \ BR, reducing or eliminating suboptimal traffic patterns as\n   well as providing\
    \ high availability: should one BR fail, the IGP will\n   automatically redirect\
    \ the traffic to the closest alternate BR.\n"
- title: 4.6.  Location of the SIIT-DC Border Relays
  contents:
  - "4.6.  Location of the SIIT-DC Border Relays\n   The goal of SIIT-DC is to facilitate\
    \ a true IPv6-only application and\n   network architecture, with the sole exception\
    \ being the IPv4\n   interfaces of the BRs and the network infrastructure required\
    \ to\n   connect the BRs to the IPv4 Internet.  Therefore, the BRs must be\n \
    \  located somewhere between the IPv4 Internet and the application\n   delivery\
    \ stack, which includes all servers, load balancers,\n   firewalls, intrusion\
    \ detection systems, and similar devices that are\n   processing traffic to a\
    \ greater extent than merely forwarding it.\n   It is optimal to place the BRs\
    \ as close as possible to the direct\n   path between the location of the IPv6\
    \ Service Address and the end\n   users.  If the closest BR was located a long\
    \ way from the direct\n   path, all packets in both directions must make a detour\
    \ in order to\n   traverse the BR.  This would increase the RTT between the service\
    \ and\n   the end user by two times the extra latency incurred by the detour,\n\
    \   as well as cause unnecessary load on the network links on the detour\n   path.\n\
    \   Where possible, it is beneficial to implement the BRs as a logical\n   function\
    \ within the routers that also handle the native IPv6 traffic\n   between the\
    \ IPv6 Service Address and the IPv6 Internet.  This way, an\n   SIIT-DC deployment\
    \ does not require separate networks ports (which\n   might become saturated and\
    \ impact the service quality) nor will it\n   require extra rack space and energy.\
    \  Some particularly good choices\n   for the location could be within the IDC's\
    \ access routers or within\n   the Autonomous System's border routers.\n   Finally,\
    \ another possibility is that the IDC operator outsources the\n   SIIT-DC service\
    \ to another entity, for example, his upstream ISP.\n   Doing so allows the IDC\
    \ operator to build a true IPv6-only\n   infrastructure.\n"
- title: 4.7.  Migration from Dual Stack
  contents:
  - "4.7.  Migration from Dual Stack\n   While this document mainly discusses the\
    \ use of IPv6-only nodes and\n   applications, it is important to note that SIIT-DC\
    \ is fully\n   compatible with dual-stack infrastructures, including dual-stack\n\
    \   nodes and applications.\n   Thus, migrating a dual-stacked service to an IPv6-only\
    \ one where\n   SIIT-DC provides the IPv4 Internet connectivity is easy.  The\n\
    \   operator would start out by designating the service's current native\n   IPv6\
    \ address as the IPv6 Service Address and assigning it a\n   corresponding IPv4\
    \ Service Address.  At this point, the service will\n   respond on both its old\
    \ (native) IPv4 address and the SIIT-DC IPv4\n   Service Address.  The operator\
    \ may now move traffic from the former\n   to the latter by changing the service's\
    \ \"IN A\" DNS record.  Once all\n   IPv4 traffic has been successfully moved\
    \ to SIIT-DC, the old IPv4\n   address may be reclaimed.\n"
- title: 4.8.  Translation of ICMPv6 Errors to IPv4
  contents:
  - "4.8.  Translation of ICMPv6 Errors to IPv4\n   In response to an IPv4 packet\
    \ subsequently translated to IPv6 by the\n   BR, an IPv6 router in the IDC network\
    \ may need to transmit an ICMPv6\n   error back to the origin IPv4 node.  By default,\
    \ such an ICMPv6 error\n   will most likely be discarded by the BR, unless the\
    \ source address of\n   the ICMPv6 error happens to be an IPv4-translatable IPv6\
    \ address or\n   covered by an EAM.\n   To facilitate reliable delivery of such\
    \ ICMPv6 errors, an SIIT-DC\n   operator SHOULD implement the recommendations\
    \ in [RFC6791] in the\n   BRs.\n"
- title: 4.9.  MTU and Fragmentation
  contents:
  - "4.9.  MTU and Fragmentation\n   There are some key differences between IPv4 and\
    \ IPv6 relating to\n   packet sizes and fragmentation that one MUST consider when\
    \ deploying\n   SIIT-DC.  They result in a few problematic corner cases, which\
    \ can be\n   dealt with in a few different ways.  The following subsections will\n\
    \   discuss these in detail and provide operational guidance.\n   In particular,\
    \ the operator may find that relying on fragmentation in\n   the IPv6 domain is\
    \ undesired or even operationally impossible\n   [FRAGMENTS].  For this reason,\
    \ the recommendations in this section\n   seek to minimize the use of IPv6 fragmentation.\n\
    \   Unless otherwise stated, the following subsections assume that the\n   MTUs\
    \ in both the IPv4 and IPv6 domains are 1500 bytes.\n"
- title: 4.9.1.  IPv4/IPv6 Header Size Difference
  contents:
  - "4.9.1.  IPv4/IPv6 Header Size Difference\n   The IPv6 header is up to 20 bytes\
    \ larger than the IPv4 header.  This\n   means that a full-size 1500 bytes large\
    \ IPv4 packet cannot be\n   translated to IPv6 without being fragmented, otherwise\
    \ it would\n   likely have resulted in a 1520 bytes large IPv6 packet.\n   If\
    \ the transport protocol used is TCP, this is generally not a\n   problem; the\
    \ IPv6 node will advertise a TCP Maximum Segment Size\n   (MSS) of 1440 bytes\
    \ during the initial TCP handshake.  This causes\n   the IPv4 clients to never\
    \ send larger packets than what can be\n   translated to a single full-size IPv6\
    \ packet, eliminating any need\n   for fragmentation.\n   For other transport\
    \ protocols, full-size IPv4 packets with the Don't\n   Fragment (DF) flag cleared\
    \ will need to be fragmented by the BR.\n   This may be avoided by increasing\
    \ the Path MTU between the BR and the\n   IPv6 nodes to 1520 bytes or greater.\
    \  If this is done, the MTU on the\n   IPv6 nodes themselves SHOULD NOT be increased\
    \ accordingly, as doing\n   so would cause them to undergo Path MTU Discovery\
    \ for all\n   destinations on the IPv6 Internet.  The nodes MUST, however, be\
    \ able\n   to accept and process incoming packets larger than their own MTU. \
    \ If\n   the nodes' IPv6 implementation allows the initial Path MTU to be set\n\
    \   differently for specific destinations, it MAY be increased to 1520\n   for\
    \ destinations within the translation prefix specifically.\n"
- title: 4.9.2.  IPv6 Atomic Fragments
  contents:
  - "4.9.2.  IPv6 Atomic Fragments\n   In keeping with the fifth paragraph of Section\
    \ 4 of [RFC6145], a\n   stateless translator like a BR will by default add an\
    \ IPv6\n   Fragmentation header to the resulting IPv6 packet when translating\
    \ an\n   IPv4 packet with the DF flag set to 0.  This happens even though the\n\
    \   resulting IPv6 packet isn't actually fragmented into several pieces,\n   resulting\
    \ in an IPv6 Atomic Fragment [RFC6946].  These Atomic\n   Fragments are generally\
    \ not useful in an IDC environment, and it is\n   therefore recommended that this\
    \ behavior be disabled in the BRs.  To\n   this end, Section 4 of [RFC6145] notes\
    \ that the \"translator MAY\n   provide a configuration function that allows the\
    \ translator not to\n   include the Fragment Header for the non-fragmented IPv6\
    \ packets.\"\n   Note that work is currently in progress (in [RFC6145bis]) to\n\
    \   deprecate IPv6 Atomic Fragments.  As a result, a BR that conforms to\n   that\
    \ document is required to behave as recommended above.\n   In IPv6, the Identification\
    \ value is located inside the Fragmentation\n   header.  That means that if the\
    \ generation of IPv6 Atomic Fragments\n   is disabled, the IPv4 Identification\
    \ value will be lost during\n   translation to IPv6.  This could potentially confuse\
    \ some diagnostic\n   tools.\n"
- title: 4.9.3.  Minimum Path MTU Difference between IPv4 and IPv6
  contents:
  - "4.9.3.  Minimum Path MTU Difference between IPv4 and IPv6\n   Section 5 of [RFC2460]\
    \ specifies that the minimum IPv6 link MTU is\n   1280 bytes.  Therefore, an IPv6\
    \ node can reasonably assume that if it\n   transmits an IPv6 packet that is 1280\
    \ bytes or smaller, it is\n   guaranteed to reach its destination without requiring\
    \ fragmentation\n   or invoking the Path MTU Discovery algorithm [RFC1981].  However,\n\
    \   this assumption might prove false if the destination is an IPv4 node\n   reached\
    \ through a protocol translator such as a BR, as the minimum\n   IPv4 link MTU\
    \ is 68 bytes.  See Section 3.2 of [RFC791].\n   Section 5.1 of [RFC6145] specifies\
    \ that a stateless translator should\n   set the IPv4 Don't Fragment flag to 1\
    \ when it translates a\n   non-fragmented IPv6 packet to IPv4.  This means that\
    \ when the path to\n   the destination IPv4 node contains an IPv4 link with an\
    \ MTU smaller\n   than 1260 bytes (which corresponds to an IPv6 MTU smaller than\
    \ 1280\n   bytes; cf. Section 4.9.1), the Path MTU Discovery algorithm will be\n\
    \   invoked, even if the original IPv6 packet was only 1280 bytes large.\n   This\
    \ happens as a result of the IPv4 router connecting to the IPv4\n   link with\
    \ the small MTU returning an ICMPv4 Need To Fragment error\n   with an MTU value\
    \ smaller than 1260, which in turn is translated by\n   the BR to an ICMPv6 Packet\
    \ Too Big error with an MTU value smaller\n   than 1280, which is then transmitted\
    \ to the origin IPv6 node.\n   When an IPv6 node receives an ICMPv6 Packet Too\
    \ Big error indicating\n   an MTU value smaller than 1280, it is not allowed to\
    \ reduce its Path\n   MTU estimation to the indicated value.  It must instead\
    \ include a\n   Fragmentation header in subsequent packets sent on that path\n\
    \   [RFC1981].  In other words, the IPv6 node will start emitting Atomic\n   Fragments.\
    \  The Fragmentation header signals to the BR that the Don't\n   Fragment flag\
    \ should be set to 0 in the resulting IPv4 packet, and it\n   also provides the\
    \ Identification value.\n   If the use of the IPv6 Fragmentation header is problematic,\
    \ the\n   operator should consider enabling the functionality described as the\n\
    \   \"second approach\" in Section 6 of [RFC6145].  This functionality\n   changes\
    \ the BR's behavior as follows:\n   o  When translating ICMPv4 Need To Fragment\
    \ to ICMPv6 Packet Too Big,\n      the resulting packet will never contain an\
    \ MTU value lower than\n      1280.  This prevents the IPv6 nodes from generating\
    \ Atomic\n      Fragments.\n   o  When translating IPv6 packets smaller than or\
    \ equal to 1280 bytes,\n      the Don't Fragment flag in the resulting IPv4 packet\
    \ will be set\n      to 0.  This ensures that in the eventuality that the path\
    \ contains\n      an IPv4 link with an MTU smaller than 1260, the IPv4 router\n\
    \      connected to that link will have the responsibility to fragment\n     \
    \ the packet before forwarding it towards its destination.\n   In summary, this\
    \ approach could be seen as prompting the IPv4\n   protocol itself to provide\
    \ the \"link-specific fragmentation and\n   reassembly at a layer below IPv6\"\
    \ required for links that \"cannot\n   convey a 1280-octet packet in one piece\"\
    , to paraphrase Section 5 of\n   [RFC2460].\n   Note that work is currently in\
    \ progress (in [RFC6145bis]) to\n   deprecate IPv6 Atomic Fragments.  As a result,\
    \ a BR that conforms to\n   that document is required to behave as suggested above.\n"
- title: 4.10.  IPv4-Translatable IPv6 Service Addresses
  contents:
  - "4.10.  IPv4-Translatable IPv6 Service Addresses\n   SIIT-DC is designed so that\
    \ the IPv6 Service Addresses are not\n   required to be IPv4-translatable IPv6\
    \ addresses.  Section 2 of\n   [RFC7757] discusses why it is desirable to avoid\
    \ requiring the use of\n   IPv4-translatable IPv6 addresses.\n   It is, however,\
    \ quite possible to deploy SIIT-DC in combination with\n   IPv4-translatable IPv6\
    \ Service Addresses.  The primary benefits in\n   doing so are:\n   o  The operator\
    \ is not required to provision EAMs for\n      IPv4-translatable IPv6 Service\
    \ Addresses onto the BR/ERs.\n   o  [RFC6145] translation can be performed in\
    \ a checksum-neutral\n      manner; cf. Section 4.1 of [RFC6052].\n   The trade-off\
    \ is that the IPv4-translatable IPv6 Service Addresses\n   must be configured\
    \ on the IPv6 nodes, and the applications must be\n   set up to use them -- likely\
    \ in addition to their primary\n   (non-IPv4-translatable) IPv6 addresses.  The\
    \ IPv4-translatable IPv6\n   Service Addresses must also be routed from the BR\
    \ through the IDC's\n   IPv6 network infrastructure to the nodes on which they\
    \ are assigned.\n   This essentially requires the entire IPv6 infrastructure to\
    \ be made\n   aware of and handle translated IPv4 traffic as a special case, which\n\
    \   significantly increases complexity.  As previously described in\n   Section\
    \ 1.1, avoiding such drawbacks is a design goal of SIIT-DC.\n   The use of IPv4-translatable\
    \ IPv6 Service Addresses is therefore\n   discouraged.\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  Mistaking the Translation Prefix for a Trusted Network
  contents:
  - "5.1.  Mistaking the Translation Prefix for a Trusted Network\n   If a Network-Specific\
    \ Prefix from the provider's own address space is\n   chosen for the translation\
    \ prefix, as recommended in Section 4.4,\n   care MUST be taken if the translation\
    \ service is used in front of\n   services that have application-level ACLs that\
    \ distinguish between\n   the operator's own networks and the Internet at large,\
    \ as traffic\n   from translated IPv4 end users on the Internet might appear to\
    \ be\n   originating from the provider's own network.  It is therefore\n   important\
    \ that the translation prefix be treated the same as the\n   Internet at large\
    \ rather than as a trusted network.\n   In order to alleviate this problem, the\
    \ operator may opt to use a\n   translation prefix that is distinct from and not\
    \ a subset of the IPv6\n   prefixes used elsewhere in the network infrastructure.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.\n    \
    \          Li, \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052,\n     \
    \         DOI 10.17487/RFC6052, October 2010,\n              <http://www.rfc-editor.org/info/rfc6052>.\n\
    \   [RFC6145]  Li, X., Bao, C., and F. Baker, \"IP/ICMP Translation\n        \
    \      Algorithm\", RFC 6145, DOI 10.17487/RFC6145, April 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6145>.\n   [RFC6791]  Li, X., Bao, C., Wing,\
    \ D., Vaithianathan, R., and G.\n              Huston, \"Stateless Source Address\
    \ Mapping for ICMPv6\n              Packets\", RFC 6791, DOI 10.17487/RFC6791,\
    \ November 2012,\n              <http://www.rfc-editor.org/info/rfc6791>.\n  \
    \ [RFC7757]  Anderson, T. and A. Leiva, \"Explicit Address Mappings for\n    \
    \          Stateless IP/ICMP Translation\", RFC 7757,\n              DOI 10.17487/RFC7757,\
    \ February 2016,\n              <http://www.rfc-editor.org/info/rfc7757>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [FRAGMENTS]\n              Jaeggli, J., Colitti,\
    \ L., Kumari, W., Vyncke, E., Kaeo,\n              M., and T. Taylor, \"Why Operators\
    \ Filter Fragments and\n              What It Implies\", Work in Progress, draft-taylor-v6ops-\n\
    \              fragdrop-02, December 2013.\n   [RFC791]   Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc791>.\n   [RFC959]   Postel,\
    \ J. and J. Reynolds, \"File Transfer Protocol\",\n              STD 9, RFC 959,\
    \ DOI 10.17487/RFC0959, October 1985,\n              <http://www.rfc-editor.org/info/rfc959>.\n\
    \   [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n \
    \             for IP version 6\", RFC 1981, DOI 10.17487/RFC1981, August\n   \
    \           1996, <http://www.rfc-editor.org/info/rfc1981>.\n   [RFC2460]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, DOI 10.17487/RFC2460,\n              December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n\
    \   [RFC2663]  Srisuresh, P. and M. Holdrege, \"IP Network Address\n         \
    \     Translator (NAT) Terminology and Considerations\",\n              RFC 2663,\
    \ DOI 10.17487/RFC2663, August 1999,\n              <http://www.rfc-editor.org/info/rfc2663>.\n\
    \   [RFC2991]  Thaler, D. and C. Hopps, \"Multipath Issues in Unicast and\n  \
    \            Multicast Next-Hop Selection\", RFC 2991,\n              DOI 10.17487/RFC2991,\
    \ November 2000,\n              <http://www.rfc-editor.org/info/rfc2991>.\n  \
    \ [RFC2993]  Hain, T., \"Architectural Implications of NAT\", RFC 2993,\n    \
    \          DOI 10.17487/RFC2993, November 2000,\n              <http://www.rfc-editor.org/info/rfc2993>.\n\
    \   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n      \
    \        Address Translator (Traditional NAT)\", RFC 3022,\n              DOI\
    \ 10.17487/RFC3022, January 2001,\n              <http://www.rfc-editor.org/info/rfc3022>.\n\
    \   [RFC3235]  Senie, D., \"Network Address Translator (NAT)-Friendly\n      \
    \        Application Design Guidelines\", RFC 3235,\n              DOI 10.17487/RFC3235,\
    \ January 2002,\n              <http://www.rfc-editor.org/info/rfc3235>.\n   [RFC4213]\
    \  Nordmark, E. and R. Gilligan, \"Basic Transition Mechanisms\n             \
    \ for IPv6 Hosts and Routers\", RFC 4213,\n              DOI 10.17487/RFC4213,\
    \ October 2005,\n              <http://www.rfc-editor.org/info/rfc4213>.\n   [RFC6145bis]\n\
    \              Bao, C., Li, X., Baker, F., Anderson, T., and F. Gont,\n      \
    \        \"IP/ICMP Translation Algorithm (rfc6145bis)\", Work in\n           \
    \   Progress, draft-bao-v6ops-rfc6145bis-05, January 2016.\n   [RFC6146]  Bagnulo,\
    \ M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64: Network\
    \ Address and Protocol Translation from IPv6\n              Clients to IPv4 Servers\"\
    , RFC 6146, DOI 10.17487/RFC6146,\n              April 2011, <http://www.rfc-editor.org/info/rfc6146>.\n\
    \   [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n         \
    \     Beijnum, \"DNS64: DNS Extensions for Network Address\n              Translation\
    \ from IPv6 Clients to IPv4 Servers\", RFC 6147,\n              DOI 10.17487/RFC6147,\
    \ April 2011,\n              <http://www.rfc-editor.org/info/rfc6147>.\n   [RFC6540]\
    \  George, W., Donley, C., Liljenstolpe, C., and L. Howard,\n              \"\
    IPv6 Support Required for All IP-Capable Nodes\", BCP 177,\n              RFC\
    \ 6540, DOI 10.17487/RFC6540, April 2012,\n              <http://www.rfc-editor.org/info/rfc6540>.\n\
    \   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,\n   \
    \           \"Default Address Selection for Internet Protocol Version 6\n    \
    \          (IPv6)\", RFC 6724, DOI 10.17487/RFC6724, September 2012,\n       \
    \       <http://www.rfc-editor.org/info/rfc6724>.\n   [RFC6883]  Carpenter, B.\
    \ and S. Jiang, \"IPv6 Guidance for Internet\n              Content Providers\
    \ and Application Service Providers\",\n              RFC 6883, DOI 10.17487/RFC6883,\
    \ March 2013,\n              <http://www.rfc-editor.org/info/rfc6883>.\n   [RFC6946]\
    \  Gont, F., \"Processing of IPv6 \"Atomic\" Fragments\",\n              RFC 6946,\
    \ DOI 10.17487/RFC6946, May 2013,\n              <http://www.rfc-editor.org/info/rfc6946>.\n\
    \   [RFC7020]  Housley, R., Curran, J., Huston, G., and D. Conrad, \"The\n   \
    \           Internet Numbers Registry System\", RFC 7020,\n              DOI 10.17487/RFC7020,\
    \ August 2013,\n              <http://www.rfc-editor.org/info/rfc7020>.\n   [RFC7230]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7756]  Anderson, T. and S. Steffann, \"Stateless IP/ICMP\n           \
    \   Translation for IPv6 Internet Data Center Environments\n              (SIIT-DC):\
    \ Dual Translation Mode\", RFC 7756,\n              DOI 10.17487/RFC7756, February\
    \ 2016,\n              <http://www.rfc-editor.org/info/rfc7756>.\n"
- title: Appendix A.  Complete SIIT-DC IDC Topology Example
  contents:
  - "Appendix A.  Complete SIIT-DC IDC Topology Example\n   Figure 4 attempts to \"\
    tie it all together\" and show a more complete\n   SIIT-DC topology, in order\
    \ to better demonstrate its advantageous\n   properties discussed in Section 1.\
    \  These are discussed in more\n   detail below.\n                  /--------------------------------\\\
    \ /---------------\\\n                  |          IPv4 Internet         | | IPv6\
    \ Internet |\n                  \\-+----------------------------+-/ \\--------+------/\n\
    \                    |                            |            |\n           \
    \         | <----------[BGP]---------> |          [BGP]\n                    |\
    \                            |            |\n     +-------<192.0.2.0/24>---------+\
    \ +---<192.0.2.0/24>---+  |\n     |                        BR #1 | | BR #2   \
    \           |  |\n     | EAM Table:                   | |                    |\
    \  |\n     | ==========                   | |                    |  |\n     |\
    \ 192.0.2.1,2001:db8:12:34::1  | |                    |  |\n     | 192.0.2.2,2001:db8:12:34::2\
    \  | |  Exactly the same  |  |\n     | 192.0.2.3,2001:db8:fe:dc::1  | |  configuration\
    \ as  |  |\n     | 192.0.2.4,2001:db8:12:34::4  | |  BR #1             |  |\n\
    \     | 192.0.2.5,2001:db8:fe:dc::e  | |                    |  |\n     |     \
    \                         | |                    |  |\n     | XLAT Prefix 2001:db8:46::/96\
    \ | |                    |  |\n     |                              | |       \
    \             |  |\n     +--------<2001:db8:46::/96>----+ +-<2001:db8:46::/96>-+\
    \  |\n                       |                      |               |\n      \
    \                 | <------[ECMP]------> |               |\n                 \
    \      |                      |               |\n     /-----------------+----------------------+--\\\
    \            |\n     |         IPv6 IDC network w/ OSPFv3        +------------/\n\
    \     \\-+--------------------------------+--------/\n       |               \
    \                 |\n       | Tenant A's server LAN          | Tenant B's server\
    \ LAN\n       | 2001:db8:12:34::/64            | 2001:db8:fe:dc::/64\n       |\
    \                                |\n       +-- www      ::1 (IPv6+SIIT-DC)  +--\
    \ www-lb ::1 (IPv6+SIIT-DC)\n       |                                |\n     \
    \  +-- mta      ::2 (IPv6+SIIT-DC)  +-- web ::80:01 (IPv6 only)\n       |    \
    \                            |   [...]\n       +-- ftp      ::3 (IPv6)       \
    \   +-- web ::80:99 (IPv6 only)\n       |            ::4 (IPv4, via ER)  |\n \
    \      |                                |         +----+\n       +-- app01 ::a:01\
    \ (IPv6 only)     \\---- ::e | ER | --\\\n       |   [...]                   \
    \               +----+   |\n       +-  app99 ::a:99 (IPv6 only)              \
    \          |\n       |                                  ftp 192.0.2.5 ---/\n \
    \      +-- db01  ::d:01 (IPv6 only)\n       |   [..]\n       \\-- db99  ::d:99\
    \ (IPv6 only)\n                  Figure 4: Example SIIT-DC IDC Topology\n   Single-Stack\
    \ IPv6 Operation:\n      As discussed in Section 1.1, SIIT-DC facilitates an IPv6-only\
    \ IDC\n      network infrastructure.  The only places where IPv4 is absolutely\n\
    \      required are between the BRs and the IPv4 Internet and between any\n  \
    \    ERs and the IPv4-only applications or devices they are serving\n      (illustrated\
    \ here as the two tenants' FTP servers).  The figure\n      also illustrates how\
    \ SIIT-DC does not interfere with native IPv6;\n      when there is no longer\
    \ a need to support IPv4 clients, the BRs\n      may be decommissioned without\
    \ causing any impact to native IPv6\n      traffic.\n   Stateless Operation:\n\
    \      As discussed in Section 1.2, SIIT-DC operates in a stateless\n      fashion.\
    \  In the illustration, both BRs are simultaneously\n      advertising (i.e.,\
    \ anycasting) the IPv4 Service Address Pool and\n      the IPv6 translation prefix,\
    \ so incoming traffic from the IPv4\n      Internet may arrive at either of the\
    \ BRs, while outgoing IPv6\n      traffic destined for IPv4 endpoints are load\
    \ balanced between them\n      using Equal-Cost Multipath Routing.  No continuous\
    \ state\n      synchronization between the two BRs occurs.  Should one of the\
    \ BRs\n      fail, the BGP and OSPF protocols will ensure that traffic\n     \
    \ converges on the remaining BR.  Existing sessions will not be\n      disrupted\
    \ beyond any disruption caused by the BGP/OSPF convergence\n      process itself.\n\
    \   IPv4 Address Conservation:\n      As discussed in Section 1.3, SIIT-DC conserves\
    \ the IDC operator's\n      IPv4 address space.  Even though the two customers\
    \ in the example\n      above have several hundred servers, the majority of the\
    \ servers\n      are not used for running services made available directly from\
    \ the\n      Internet and therefore do not need to consume IPv4 addresses.  The\n\
    \      IDC network infrastructure consumes no IPv4 addresses, either.\n      Finally,\
    \ the IPv4 addresses that are assigned to the SIIT-DC\n      function as IPv4\
    \ Service Address Pools may be assigned with 100%\n      efficiency, one address\
    \ at a time; there is no requirement to\n      assign multiple addresses to a\
    \ single customer in a contiguous\n      block.\n   Application Support:\n   \
    \   As discussed in Section 1.5, as long as the application protocol\n      is\
    \ translation friendly (illustrated here with HTTP and SMTP), it\n      will work\
    \ with SIIT-DC without requiring any special adaptation.\n      Furthermore, translation-unfriendly\
    \ applications (illustrated here\n      with FTP) will also work when located\
    \ behind an ER [RFC7756].\n      Tenant A's FTP server illustrates how an ER may\
    \ be located in the\n      networking stack of a node, while Tenant B's FTP server\n\
    \      illustrates how the ER may be deployed as a network service.  The\n   \
    \   latter approach enables SIIT-DC to support IPv4-only\n      nodes/devices.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to thank the following individuals\
    \ for their\n   contributions, suggestions, corrections, and criticisms: Fred\
    \ Baker,\n   Cameron Byrne, Brian E.  Carpenter, Ross Chandler, Tobias Gondrom,\n\
    \   Christer Holmberg, Dagfinn Ilmari Mannsaaker, Lars Olafsen, Stig\n   Sandbeck\
    \ Mathisen, Knut A. Syed, Qin Wu, and Andrew Yourtchenko.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tore Anderson\n   Redpill Linpro\n   Vitaminveien 1A\n \
    \  0485 Oslo\n   Norway\n   Phone: +47 959 31 212\n   Email: tore@redpill-linpro.com\n\
    \   URI:   http://www.redpill-linpro.com\n"
