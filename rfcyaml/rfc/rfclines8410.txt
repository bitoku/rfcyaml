Abstract This document specifies algorithm identifiers and ASN.1 encoding formats for elliptic curve constructs using the curve25519 and curve448 curves.
The signature algorithms covered are Ed25519 and Ed448.
The key agreement algorithms covered are X25519 and X448.
The encoding for public key, private key, and Edwards curve Digital Signature Algorithm (EdDSA) structures is provided.
In [RFC7748], the elliptic curves curve25519 and curve448 are described.
They are designed with performance and security in mind.
The curves may be used for Diffie Hellman and digital signature operations.
[RFC7748] describes the operations on these curves for the Diffie  Hellman operation.
A convention has developed that when these two curves are used with the Diffie Hellman operation, they are referred to as X25519 and X448.
This RFC defines the ASN.1 Object Identifiers (OIDs) for the operations X25519 and X448 along with the associated parameters.
The use of these OIDs is described for public and private keys.
In [RFC8032] the elliptic curve signature system Edwards curve Digital Signature Algorithm (EdDSA) is described along with a recommendation for the use of the curve25519 and curve448.
EdDSA has defined two modes: the PureEdDSA mode without prehashing and the HashEdDSA mode with prehashing.
The convention used for identifying the algorithm/curve combinations is to use "Ed25519" and "Ed448" for the PureEdDSA mode.
This document does not provide the conventions needed for the prehash versions of the signature algorithm.
The use of the OIDs is described for public keys, private keys and signatures.
[RFC8032] additionally defines the concept of a context.
Contexts can be used to differentiate signatures generated for different purposes with the same key.
The use of contexts is not defined in this document for the following reasons:
The current implementations of Ed25519 do not support the use of contexts; thus, if specified, it will potentially delay the use of these algorithms further.
EdDSA is the only IETF algorithm that currently supports the use of contexts; however, there is a possibility that there will be confusion between which algorithms need to have separate keys and which do not.
This may result in a decrease of security for those other algorithms.
There are still ongoing discussions among the cryptographic community about how effective the use of contexts is for preventing attacks.
There needs to be discussions about the correct way to identify when context strings are to be used.
It is not clear if different OIDs should be used for different contexts or the OID
should merely note that a context string needs to be provided.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Algorithm Identifiers Certificates conforming to [RFC5280]
can convey a public key for any public key algorithm.
The certificate indicates the algorithm through an algorithm identifier.
An algorithm identifier consists of an OID and optional parameters.
The AlgorithmIdentifier type, which is included for convenience, is defined as follows:
The fields in AlgorithmIdentifier have the following meanings:  algorithm identifies the cryptographic algorithm with an object identifier.
Four such OIDs are defined below.
parameters, which are optional, are the associated parameters for the algorithm identifier in the algorithm field.
In this document, we define four new OIDs for identifying the different curve/algorithm pairs: the curves being curve25519 and curve448 and the algorithms being ECDH and EdDSA in pure mode.
For all of the OIDs, the parameters MUST be absent.
It is possible to find systems that require the parameters to be present.
This can be due to either a defect in the original 1997 syntax or a programming error where developers never got input where this was not true.
The optimal solution is to fix these systems; where this is not possible, the problem needs to be restricted to that subsystem and not propagated to the Internet.
The same algorithm identifiers are used for identifying a public key, a private key, and a signature (for the two EdDSA related OIDs).
Additional encoding information is provided below for each of these locations.
1 3 101 110 }
In the X.509 certificate, the subjectPublicKeyInfo field has the SubjectPublicKeyInfo type, which has the following ASN.1 syntax:
The fields in SubjectPublicKeyInfo have the following meanings:  algorithm is the algorithm identifier and parameters for the public key (see above).
subjectPublicKey contains the byte stream of the public key.
The algorithms defined in this document always encode the public key as an exact multiple of 8 bits.
Both [RFC7748] and [RFC8032] define the public key value as being a byte string.
It should be noted that the public key is computed differently for each of these documents; thus, the same private key will not produce the same public key.
The following is an example of a public key encoded using the textual encoding defined in [RFC7468].
The intended application for the key is indicated in the keyUsage certificate extension.
If the keyUsage extension is present in a certificate that indicates i
, then the following MUST be present: keyAgreement; one of the following MAY also be present: encipherOnly; or decipherOnly.
If the keyUsage extension is present in an end entity certificate that indicates id
, then the keyUsage extension MUST contain one or both of the following values: nonRepudiation; and digitalSignature.
If the keyUsage extension is present in a certification authority certificate that indicates i
, then the keyUsage extension MUST contain one or more of the following values: nonRepudiation; digitalSignature; keyCertSign; and cRLSign.
Signatures Signatures can be placed in a number of different ASN.1 structures.
The top level structure for a certificate is given below as being illustrative of how signatures are frequently encoded with an algorithm identifier and a location for the signature.
The same algorithm identifiers are used for signatures as are used for public keys.
When used to identify signature algorithms, the parameters MUST be absent.
The data to be signed is prepared for EdDSA.
Then, a private key operation is performed to generate the signature value.
This value is the opaque value ENC(R)
described in Section 3.3 of [RFC8032].
The octet string representing the signature is encoded directly in the BIT STRING without adding any additional ASN.1 wrapping.
For the Certificate structure, the signature value is wrapped in the "signatureValue" BIT STRING field.
Private Key Format "Asymmetric Key Packages" [RFC5958] describes how to encode a private key in a structure that both identifies what algorithm the private key is for and allows for the public key and additional attributes about the key to be included as well.
For illustration, the ASN.1 structure OneAsymmetricKey is replicated below.
The algorithm  specific details of how a private key is encoded are left for the document describing the algorithm itself.
For the keys defined in this document, the private key is always an opaque byte sequence.
The ASN.1 type CurvePrivateKey is defined in this document to hold the byte sequence.
Thus, when encoding a OneAsymmetricKey object, the private key is wrapped in a CurvePrivateKey object and wrapped by the OCTET STRING of the "privateKey" field.
To encode an EdDSA, X25519, or X448 private key, the "privateKey" field will hold the encoded private key.
The "privateKeyAlgorithm" field uses the AlgorithmIdentifier structure.
The structure is encoded as defined above.
If present, the "publicKey" field will hold the encoded key as defined in [RFC7748] and [RFC8032].
The following is an example of a private key encoded using the textual encoding defined in [RFC7468].
The following example, in addition to encoding the private key, has an attribute included as well as the public key.
As with the prior example, the textual encoding defined in [RFC7468] is used.
: There exist some private key import functions that have not picked up the new ASN.1 structure OneAsymmetricKey that is defined in [RFC7748].
This means that they will not accept a private key structure that contains the public key field.
This means a balancing act needs to be done between being able to do a consistency check on the key pair and widest ability to import the key.
For the purpose of consistent cross implementation naming, this section establishes human readable names for the algorithms specified in this document.
Implementations SHOULD use these names when referring to the algorithms.
If there is a strong reason to deviate from these names   for example, if the implementation has a different naming convention and wants to maintain internal consistency   it is encouraged to deviate as little as possible from the names given here.
Use the string "ECDH" when referring to a public key of type "X25519" or "X448" when the curve is not known or relevant.
When the curve is known, use the more specific string of "X25519" or "X448".
"EdDSA" when referring to a signing public key or signature when the curve is not known or relevant.
When the curve is known, use a more specific string.
Ed25519 value use the string "Ed25519".
For id Ed448, use "Ed448".
ASN.1 Module For reference purposes
, the ASN.1 syntax is presented as an ASN.1 module here.
Module Safecurves pkix 18 {
} DEFINITIONS EXPLICIT TAGS ::
BEGIN IMPORTS SIGNATURE ALGORITHM, KEY AGREE, PUBLIC KEY, KEY WRAP, KeyUsage, AlgorithmIdentifier FROM AlgorithmInformation 2009 {iso(1) identified organization(3) dod(6)
mda sha512 FROM PKIX1 PSS
id mod pkix1 rsa pkalgs 02(54) }
kwa aes128 wrap, kwa aes256 wrap FROM CMSAesRsaesOaep 2009 { iso(1) member body(2) us(840)
d mod cms aes 02(38)
{ id edwards curve algs 110 }
{ id edwards curve algs 111 }
{ id edwards curve algs 112 }
{ id edwards curve algs 113 }
sa Ed25519 SIGNATURE ALGORITHM ::
Ed25519 PARAMS ARE absent PUBLIC KEYS {pk Ed25519} SMIME CAPS
PARAMS ARE absent CERT KEY USAGE {digitalSignature, nonRepudiation, keyCertSign, cRLSign}
X25519 PARAMS ARE absent PUBLIC KEYS {pk X25519}
no ASN.1 wrapping   ARE preferredPresent SMIME CAPS { TYPE AlgorithmIdentifier{KEY WRAP, {KeyWrapAlgorithms}}
} pk X25519 PUBLIC KEY ::
d X448 PARAMS ARE absent PUBLIC KEYS {pk X448}
preferredPresent SMIME CAPS { TYPE AlgorithmIdentifier{KEY WRAP, {KeyWrapAlgorithms}} IDENTIFIED BY id X448 }
absent CERT KEY USAGE { keyAgreement } PRIVATE KEY CurvePrivateKey } CurvePrivateKey ::
This section contains illustrations of EdDSA public keys and certificates, illustrating parameter choices.
An example of an Ed25519 public key: Public Key Information:
OBJECT IDENTIFIER commonName (2 5 4 3) 40  14:
OBJECT IDENTIFIER commonName (2 5 4 3)
OCTET STRING, encapsulates { 175
(2 5 29 14) 203   1:
9B 1F 5E ED ED 04 33 85 E4 F7 BC 62
AF 23 01 FE DD C9 E6 FF C1 CC A7 3D 74 D6 48 A4 :
39 80 82 CD DB 69 B1 4E 4D 06 EC F8 1A 25
4E DD 83 46 85 6E C8 6F 3D CE :
1A 18 65 C5 7A C2 7B 50 A0 C3 50 07 F5 E7 D9 07
An example of an Ed25519 private key without the public key:  BEGIN PRIVATE KEY
An example of the same Ed25519 private key encoded with an attribute and the public key:  BEGIN
The same item dumped as ASN.1 yields: 0 114: SEQUENCE { 2   1:   INTEGER 1 5   5:
[1] 00 19 BF 44 09 69 84 CD FE 85 41 BA C1
67 DC 3B 96 C8 50 86 AA 30 B6 B6 CB 0C 5C 38 AD
IANA Considerations For the ASN.1 module in Section 9, IANA has registered value 93 for "id mod safecurves pkix" in the "SMI Security for PKIX Module Identifier" (1.3.6.1.5.5.7.0) registry.
The OIDs are being independently registered in the IANA registry "SMI Security for Cryptographic Algorithms" in [RFC8411].
The security considerations of [RFC5280], [RFC7748], and [RFC8032] apply accordingly.
The procedures for going from a private key to a public key are different when used with Diffie Hellman versus when used with Edwards Signatures.
This means that the same public key cannot be used for both ECDH and EdDSA.
There are a number of things that need to be dealt with when a new key part is decoded and imported into the system.
A partial list of these includes:  ASN.1 encoding errors: Two items are highlighted here.
First, the use of an OCTET STRING rather than a BIT STRING for the public key.
The use of OCTET STRING was a copy error that existed in a previous draft version of this document; the structure is correct in [RFC5958].
However, any early implementation may have this wrong.
Second, the value of the version field is required to be 0 if the publicKey is absent and 1 if present.
This is called out in [RFC5958], but was not duplicated above.
Key encoding errors: Both [RFC7748] and [RFC8032]
have formatting requirements for keys that need to be enforced.
In some cases, the enforcement is done at the time of importing, for example, doing masking or a mod p operation.
In other cases, the enforcement is done by rejecting the keys and having an import failure.
Key mismatch errors: If a public key is provided, it may not agree with the private key because either it is wrong or the wrong algorithm was used.
Some systems are also going to be stricter on what they accept.
As stated in [RFC5958], BER decoding of OneAsymmetricKey objects is a requirement for compliance.
Despite this requirement, some acceptors will only decode DER formats.
The following is a BER encoding of a private key; it is valid, but it may not be accepted by many systems.
What follows here is a brief sampling of some incorrect keys.
In the following example, the private key does not match the masking requirements for X25519.
For this example, the top bits are set to zero and the bottom three bits are set to 001.
In the following examples, the key is the wrong length because an all zero byte has been removed.
In one case, the first byte has been removed; in the other case, the last byte has been removed.
