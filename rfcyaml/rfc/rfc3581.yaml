- contents:
  - "       An Extension to the Session Initiation Protocol (SIP) for\n                       Symmetric
    Response Routing\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) operates over UDP and TCP,\n
    \  among others.  When used with UDP, responses to requests are returned\n   to
    the source address the request came from, and to the port written\n   into the
    topmost Via header field value of the request.  This\n   behavior is not desirable
    in many cases, most notably, when the\n   client is behind a Network Address Translator
    (NAT).  This extension\n   defines a new parameter for the Via header field, called
    \"rport\",\n   that allows a client to request that the server send the response\n
    \  back to the source IP address and port from which the request\n   originated.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Client Behavior  . . . . . . . . . . . . . . . . . . . . .
    . .  3\n   4.  Server Behavior  . . . . . . . . . . . . . . . . . . . . . . .
    \ 4\n   5.  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5\n
    \  6.  Example  . . . . . . . . . . . . . . . . . . . . . . . . . . .  5\n   7.
    \ Security Considerations  . . . . . . . . . . . . . . . . . . .  6\n   8.  IANA
    Considerations  . . . . . . . . . . . . . . . . . . . . .  6\n   9.  IAB Considerations
    . . . . . . . . . . . . . . . . . . . . . .  6\n       9.1.  Problem Definition
    . . . . . . . . . . . . . . . . . . .  8\n       9.2.  Exit Strategy  . . . .
    . . . . . . . . . . . . . . . . .  8\n       9.3.  Brittleness Introduced by this
    Specification . . . . . .  9\n       9.4.  Requirements for a Long Term Solution
    \ . . . . . . . . . 10\n       9.5.  Issues with Existing NAPT Boxes  . . . .
    . . . . . . . . 10\n   10. Acknowledgements . . . . . . . . . . . . . . . . .
    . . . . . . 10\n   11. References . . . . . . . . . . . . . . . . . . . . . .
    . . . . 11\n       11.1. Normative References . . . . . . . . . . . . . . . .
    . . 11\n       11.2. Informative References . . . . . . . . . . . . . . . . .
    11\n   12. Intellectual Property and Copyright Statements . . . . . . . . 11\n
    \  13. Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 12\n   14.
    Full Copyright Statement . . . . . . . . . . . . . . . . . . . 13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [1] operates over
    UDP and TCP.\n   When used with UDP, responses to requests are returned to the
    source\n   address the request came from, and to the port written into the\n   topmost
    Via header field value of the request.  This results in a\n   \"hybrid\" way of
    computing the destination of the response.  Half of\n   the information (specifically,
    the IP address) is taken from the IP\n   packet headers, and the other half (specifically,
    the port) from the\n   SIP message headers.  SIP operates in this manner so that
    a server\n   can listen for all messages, both requests and responses, on a single\n
    \  IP address and port.  This helps improve scalability.  However, this\n   behavior
    is not desirable in many cases, most notably, when the\n   client is behind a
    NAT.  In that case, the response will not properly\n   traverse the NAT, since
    it will not match the binding established\n   with the request.\n   Furthermore,
    there is currently no way for a client to examine a\n   response and determine
    the source port that the server saw in the\n   corresponding request.  Currently,
    SIP provides the client with the\n   source IP address that the server saw in
    the request, but not the\n   port.  The source IP address is conveyed in the \"received\"
    parameter\n   in the topmost Via header field value of the response.  This\n   information
    has proved useful for basic NAT traversal, debugging\n   purposes, and support
    of multi-homed hosts.  However, it is\n   incomplete without the port information.\n
    \  This extension defines a new parameter for the Via header field,\n   called
    \"rport\", that allows a client to request that the server send\n   the response
    back to the source IP address and port where the request\n   came from.  The \"rport\"
    parameter is analogous to the \"received\"\n   parameter, except \"rport\" contains
    a port number, not the IP address.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in BCP 14, RFC 2119\n   [2]
    and indicate requirement levels for compliant implementations.\n"
  title: 2.  Terminology
- contents:
  - "3.  Client Behavior\n   The client behavior specified here affects the transport
    processing\n   defined in Section 18.1 of SIP (RFC 3261) [1].\n   A client, compliant
    to this specification (clients include UACs and\n   proxies), MAY include an \"rport\"
    parameter in the top Via header\n   field value of requests it generates.  This
    parameter MUST have no\n   value; it serves as a flag to indicate to the server
    that this\n   extension is supported and requested for the transaction.\n   When
    the client sends the request, if the request is sent using UDP,\n   the client
    MUST be prepared to receive the response on the same IP\n   address and port it
    used to populate the source IP address and source\n   port of the request.  For
    backwards compatibility, the client MUST\n   still be prepared to receive a response
    on the port indicated in the\n   sent-by field of the topmost Via header field
    value, as specified in\n   Section 18.1.1 of SIP [1].\n   When there is a NAT
    between the client and server, the request will\n   create (or refresh) a binding
    in the NAT.  This binding must remain\n   in existence for the duration of the
    transaction in order for the\n   client to receive the response.  Most UDP NAT
    bindings appear to have\n   a timeout of about one minute.  This exceeds the duration
    of non-\n   INVITE transactions.  Therefore, responses to a non-INVITE request\n
    \  will be received while the binding is still in existence.  INVITE\n   transactions
    can take an arbitrarily long amount of time to complete.\n   As a result, the
    binding may expire before a final response is\n   received.  To keep the binding
    fresh, the client SHOULD retransmit\n   its INVITE every 20 seconds or so.  These
    retransmissions will need\n   to take place even after receiving a provisional
    response.\n   A UA MAY execute the binding lifetime discovery algorithm in Section\n
    \  10.2 of RFC 3489 [4] to determine the actual binding lifetime in the\n   NAT.
    \ If it is longer than 1 minute, the client SHOULD increase the\n   interval for
    request retransmissions up to half of the discovered\n   lifetime.  If it is shorter
    than one minute, it SHOULD decrease the\n   interval for request retransmissions
    to half of the discovered\n   lifetime.  Note that discovery of binding lifetimes
    can be\n   unreliable.  See Section 14.3 of RFC 3489 [4].\n"
  title: 3.  Client Behavior
- contents:
  - "4.  Server Behavior\n   The server behavior specified here affects the transport
    processing\n   defined in Section 18.2 of SIP [1].\n   When a server compliant
    to this specification (which can be a proxy\n   or UAS) receives a request, it
    examines the topmost Via header field\n   value.  If this Via header field value
    contains an \"rport\" parameter\n   with no value, it MUST set the value of the
    parameter to the source\n   port of the request.  This is analogous to the way
    in which a server\n   will insert the \"received\" parameter into the topmost
    Via header\n   field value.  In fact, the server MUST insert a \"received\" parameter\n
    \  containing the source IP address that the request came from, even if\n   it
    is identical to the value of the \"sent-by\" component.  Note that\n   this processing
    takes place independent of the transport protocol.\n   When a server attempts
    to send a response, it examines the topmost\n   Via header field value of that
    response.  If the \"sent-protocol\"\n   component indicates an unreliable unicast
    transport protocol, such as\n   UDP, and there is no \"maddr\" parameter, but
    there is both a\n   \"received\" parameter and an \"rport\" parameter, the response
    MUST be\n   sent to the IP address listed in the \"received\" parameter, and the\n
    \  port in the \"rport\" parameter.  The response MUST be sent from the\n   same
    address and port that the corresponding request was received on.\n   This effectively
    adds a new processing step between bullets two and\n   three in Section 18.2.2
    of SIP [1].\n   The response must be sent from the same address and port that
    the\n   request was received on in order to traverse symmetric NATs.  When a\n
    \  server is listening for requests on multiple ports or interfaces, it\n   will
    need to remember the one on which the request was received.  For\n   a stateful
    proxy, storing this information for the duration of the\n   transaction is not
    an issue.  However, a stateless proxy does not\n   store state between a request
    and its response, and therefore cannot\n   remember the address and port on which
    a request was received.  To\n   properly implement this specification, a stateless
    proxy can encode\n   the destination address and port of a request into the Via
    header\n   field value that it inserts.  When the response arrives, it can\n   extract
    this information and use it to forward the response.\n"
  title: 4.  Server Behavior
- contents:
  - "5.  Syntax\n   The syntax for the \"rport\" parameter is:\n   response-port =
    \"rport\" [EQUAL 1*DIGIT]\n   This extends the existing definition of the Via
    header field\n   parameters, so that its BNF now looks like:\n   via-params        =
    \ via-ttl / via-maddr\n                        / via-received / via-branch\n                        /
    response-port / via-extension\n"
  title: 5.  Syntax
- contents:
  - "6.  Example\n   A client sends an INVITE to a proxy server which looks like,
    in part:\n   INVITE sip:user@example.com SIP/2.0\n   Via: SIP/2.0/UDP 10.1.1.1:4540;rport;branch=z9hG4bKkjshdyff\n
    \  This INVITE is sent with a source port of 4540 and a source IP\n   address
    of 10.1.1.1.  The proxy is at 192.0.2.2 (proxy.example.com),\n   listening on
    both port 5060 and 5070.  The client sends the request\n   to port 5060.  The
    request passes through a NAT on the way to the\n   proxy, so that the source IP
    address appears as 192.0.2.1 and the\n   source port as 9988.  The proxy forwards
    the request, but not before\n   appending a value to the \"rport\" parameter in
    the proxied request:\n   INVITE sip:user@example.com SIP/2.0\n   Via: SIP/2.0/UDP
    proxy.example.com;branch=z9hG4bKkjsh77\n   Via: SIP/2.0/UDP 10.1.1.1:4540;received=192.0.2.1;rport=9988\n
    \   ;branch=z9hG4bKkjshdyff\n   This request generates a response which arrives
    at the proxy:\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP proxy.example.com;branch=z9hG4bKkjsh77\n
    \  Via: SIP/2.0/UDP 10.1.1.1:4540;received=192.0.2.1;rport=9988\n    ;branch=z9hG4bKkjshdyff\n
    \  The proxy strips its top Via header field value, and then examines\n   the
    next one.  It contains both a \"received\" parameter and an \"rport\"\n   parameter.
    \ The server follows the rules specified in Section 4 and\n   sends the response
    to IP address 192.0.2.1, port 9988, and sends it\n   from port 5060 on 192.0.2.2:\n
    \  SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 10.1.1.1:4540;received=192.0.2.1;rport=9988\n
    \   ;branch=z9hG4bKkjshdyff\n   This packet matches the binding created by the
    initial request.\n   Therefore, the NAT rewrites the destination address of this
    packet\n   back to 10.1.1.1, and the destination port back to 4540.  It forwards\n
    \  this response to the client, which is listening for the response on\n   that
    address and port.  The client properly receives the response.\n"
  title: 6.  Example
- contents:
  - "7.  Security Considerations\n   When a server uses this specification, responses
    that it sends will\n   now include the source port where the request came from.
    \ In some\n   instances, the source address and port of a request are sensitive\n
    \  information.  If they are sensitive, requests SHOULD be protected by\n   using
    SIP over TLS [1].  In such a case, this specification does not\n   provide any
    response routing functions (as these only work with TCP);\n   it merely provides
    the client with information about the source port\n   as seen by the server.\n
    \  It is possible that an attacker might try to disrupt service to a\n   client
    by acting as a man-in-the-middle, modifying the \"rport\"\n   parameter in a Via
    header in a request sent by a client.  Removal of\n   this parameter will prevent
    clients from behind NATs from receiving\n   service.  The addition of the parameter
    will generally have no\n   impact.  Of course, if an attacker is capable of launching
    a man-in-\n   the-middle attack, there are many other ways of denying service,
    such\n   as merely discarding the request.  Therefore, this attack does not\n
    \  seem significant.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   There are no IANA considerations associated with
    this specification.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  IAB Considerations\n   The IAB has studied a class of protocols referred
    to as Unilateral\n   Self Address Fixing (UNSAF) protocols [5].  These protocols
    allow a\n   client behind a NAT to learn the IP address and port that a NAT will\n
    \  allocate for a particular request, in order to use this information\n   in
    application layer protocols.  An example of an UNSAF protocol is\n   the Simple
    Traversal of UDP Through NATs (STUN) [4].\n   Any protocol is an UNSAF protocol
    if it reveals, to a client, the\n   source IP address and port of a packet sent
    through that NAT.\n   Although not designed for that purpose, this specification
    can be\n   used as an UNSAF protocol.  Using the \"rport\" parameter (defined\n
    \  here) and the \"received\" parameter (defined in RFC 3261 [1]) in the\n   topmost
    Via header field value of a response, a client sending a\n   request can learn
    its address as it was seen by the server which sent\n   the response.\n   There
    are two uses of this information.  The first is for\n   registrations.  Consider
    a client behind a NAT wishing to register\n   with a proxy/registrar on the other
    side of the NAT.  The client must\n   provide, in its registration, the address
    at which it should receive\n   incoming SIP requests from the proxy.  However,
    since the client is\n   located behind a NAT, none of the addresses on any of
    its interfaces\n   will be reachable from the proxy.  If the client can provide
    the\n   proxy with an address that the proxy can reach, the client can\n   receive
    incoming requests.  Using this specification, a client behind\n   a NAT can learn
    its address and port as seen by the proxy which\n   receives a REGISTER request.
    \ The client can then perform an\n   additional registration, using this address
    in a Contact header.\n   This would allow a client to receive incoming requests,
    such as\n   INVITE, on the IP address and port it used to populate the source
    IP\n   address and port of the registration it sent.  This approach will\n   only
    work when servers send requests to a UA from the same address\n   and port on
    which the REGISTER itself was received.\n   In many cases, the server to whom
    the registration is sent won't be\n   the registrar itself, but rather a proxy
    which then sends the request\n   to the registrar.  In such a case, any incoming
    requests for the\n   client must traverse the proxy to whom the registration was
    directly\n   sent.  The Path header extension to SIP [3] allows the proxy to\n
    \  indicate that it must be on the path of such requests.\n   The second usage
    is for record routing, to address the same problem\n   as above, but between two
    proxies.  A proxy behind a NAT which\n   forwards a request to a server can use
    OPTIONS, for example, to learn\n   its address as seen by that server.  This address
    can be placed into\n   the Record-Route header field of requests sent to that
    server.  This\n   would allow the proxy to receive requests from that server on
    the\n   same IP address and port it used to populate the source IP address\n   and
    port of the OPTIONS request.\n   Because of this potential usage, this document
    must consider the\n   issues raised in [5].\n"
  - contents:
    - "9.1.  Problem Definition\n   From [5], any UNSAF proposal must provide:\n      Precise
      definition of a specific, limited-scope problem that is to\n      be solved
      with the UNSAF proposal.  A short term fix should not be\n      generalized
      to solve other problems; this is why \"short term fixes\n      usually aren't\".\n
      \  This specification is primarily aimed at allowing SIP responses to be\n   received
      when a request is sent through a NAT.  In this primary\n   application, this
      specification is not an UNSAF proposal.  However,\n   as a side effect of this
      capability, this specification can be used\n   as an UNSAF protocol.  In that
      usage, it would address two issues:\n   o  Provide a client with an address
      that it could use in the Contact\n      header of a REGISTER request when it
      is behind a NAT.\n   o  Provide a proxy with an address that it could use in
      a Record-\n      Route header in a request, when it is behind a NAT.\n"
    title: 9.1.  Problem Definition
  - contents:
    - "9.2.  Exit Strategy\n   From [5], any UNSAF proposal must provide:\n      Description
      of an exit strategy/transition plan.  The better short\n      term fixes are
      the ones that will naturally see less and less use\n      as the appropriate
      technology is deployed.\n   The SIP working group has recognized that the usage
      of this\n   specification to support registrations and record-routing through\n
      \  NATs is not appropriate.  It has a number of known problems which are\n   documented
      below.  The way to eliminate potential usage of this\n   specification for address
      fixing is to provide a proper solution to\n   the problems that might motivate
      the usage of this specification for\n   address fixing.  Specifically, appropriate
      solutions for\n   registrations and record-routing in the presence of NATs need
      to be\n   developed.  These solutions would not rely on address fixing.\n   Requirements
      for such solutions are already under development [6].\n   Implementors of this
      specification are encouraged to follow this work\n   for better solutions for
      registrations and record-routing through\n   NAT.\n"
    title: 9.2.  Exit Strategy
  - contents:
    - "9.3.  Brittleness Introduced by this Specification\n   From [5], any UNSAF
      proposal must provide:\n      Discussion of specific issues that may render
      systems more\n      \"brittle\".  For example, approaches that involve using
      data at\n      multiple network layers create more dependencies, increase\n
      \     debugging challenges, and make it harder to transition.\n   This specification,
      if used for address fixing, introduces several\n   points of brittleness into
      a SIP system:\n   o  If used for UDP registrations, a client will need to frequently\n
      \     re-register in order to keep the NAT bindings fresh.  In many\n      cases,
      these registrations will need to take place nearly one\n      hundred times
      more frequently than the typical refresh interval of\n      a registration.
      \ This introduces load into the system and hampers\n      scalability.\n   o
      \ A client cannot accurately determine the binding lifetime of a NAT\n      it
      is registering (or record-routing) through.  Therefore, there\n      may be
      periods of unreachability that occur between the time a\n      binding expires
      and the next registration or OPTIONS refresh is\n      sent.  This may result
      in missed calls, messages, or other\n      information.\n   o  If the NAT is
      of the symmetric variety [4], a client will only be\n      able to use its address
      to receive requests from the server it has\n      sent the request to.  If that
      server is one of many servers in a\n      cluster, the client may not be able
      to receive requests from other\n      servers in the cluster.  This may result
      in missed calls,\n      messages, or other information.\n   o  If the NAT is
      of the symmetric variety [4], a client will only be\n      able to use its address
      to receive requests if the server sends\n      requests to the client from the
      same address and port the server\n      received the registrations on.  This
      server behavior is not\n      mandated by RFC 3261 [1], although it appears
      to be common in\n      practice.\n   o  If the registrar and the server to whom
      the client sent its\n      REGISTER request are not the same, the approach will
      only work if\n      the server uses the Path header field [3].  There is not
      an easy\n      and reliable way for the server to determine that the Path header\n
      \     should be used for a registration.  Using Path when the address in\n      the
      topmost Via header field is a private address will usually\n      work, but
      may result in usage of Path when it is not actually\n      needed.\n"
    title: 9.3.  Brittleness Introduced by this Specification
  - contents:
    - "9.4.  Requirements for a Long Term Solution\n   From [5], any UNSAF proposal
      must provide:\n      Identify requirements for longer term, sound technical
      solutions\n      -- contribute to the process of finding the right longer term\n
      \     solution.\n   The brittleness described in Section 9.3 has led us to the
      following\n   requirements for a long term solution:\n   The client should not
      need to specify its address.  Registrations and\n      record routing require
      the client to specify the address at which\n      it should receive requests.
      \ A sound technical solution should\n      allow a client to explicitly specify
      that it wants to receive\n      incoming requests on the connection over which
      the outgoing\n      request was sent.  In this way, the client does not need
      to\n      specify its address.\n   The solution must deal with clusters of servers.
      \ In many\n      commercially deployed SIP systems, there will be multiple servers,\n
      \     each at different addresses and ports, handling incoming requests\n      for
      a client.  The solution must explicitly consider this case.\n   The solution
      must not require increases in network load.  There\n      cannot be a penalty
      for a sound technical solution.\n"
    title: 9.4.  Requirements for a Long Term Solution
  - contents:
    - "9.5.  Issues with Existing NAPT Boxes\n   From [5], any UNSAF proposal must
      provide:\n      Discussion of the impact of the noted practical issues with\n
      \     existing, deployed NA[P]Ts and experience reports.\n   To our knowledge,
      at the time of writing, there is only very limited\n   usage of this specification
      for address fixing.  Therefore, no\n   specific practical issues have been raised.\n"
    title: 9.5.  Issues with Existing NAPT Boxes
  title: 9.  IAB Considerations
- contents:
  - "10.  Acknowledgements\n   The authors would like to thank Rohan Mahy and Allison
    Mankin for\n   their comments and contributions to this work.\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [1] Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n       Peterson, J., Sparks, R., Handley, M. and E. Schooler,
      \"SIP:\n       Session Initiation Protocol\", RFC 3261, June 2002.\n   [2] Bradner,
      S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP
      14, RFC 2119, March 1997.\n   [3] Willis, D. and B. Hoeneisen, \"Session Initiation
      Protocol (SIP)\n       Extension Header Field for Registering Non-Adjacent Contacts\",\n
      \      RFC 3327, December 2002.\n   [4] Rosenberg, J., Weinberger, J., Huitema,
      C. and R. Mahy, \"STUN -\n       Simple Traversal of User Datagram Protocol
      (UDP) Through Network\n       Address Translators (NATs)\", RFC 3489, March
      2003.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [5] Daigle, L., Ed., and IAB, \"IAB Considerations
      for UNilateral\n       Self-Address Fixing (UNSAF) Across Network Address Translation\",\n
      \      RFC 3424, November 2002.\n   [6] Mahy, R., \"Requirements for Connection
      Reuse in the Session\n       Initiation Protocol (SIP)\", Work in Progress.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "12.  Intellectual Property Statement\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 12.  Intellectual Property Statement
- contents:
  - "13.  Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   600 Lanidex
    Plaza\n   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@dynamicsoft.com\n
    \  URI:   http://www.jdrosen.net\n   Henning Schulzrinne\n   Columbia University\n
    \  M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY  10027\n   US\n   EMail:
    schulzrinne@cs.columbia.edu\n   URI:   http://www.cs.columbia.edu/~hgs\n"
  title: 13.  Authors' Addresses
- contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assignees.\n   This document and the
    information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET
    SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,
    EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
    OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 14.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
