- title: __initial_text__
  contents:
  - '                      CHAIN Query Requests in DNS

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines an EDNS0 extension that can be used by a\n\
    \   security-aware validating resolver configured to use a forwarding\n   resolver\
    \ to send a single query, requesting a complete validation\n   path along with\
    \ the regular query answer.  The reduction in queries\n   potentially lowers the\
    \ latency and reduces the need to send multiple\n   queries at once.  This extension\
    \ mandates the use of source-IP-\n   verified transport such as TCP or UDP with\
    \ EDNS-COOKIE, so it cannot\n   be abused in amplification attacks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7901.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Notation . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   3.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   4.  Option Format . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n   5.  Protocol Description  . . . . . . . . . . . . . . . . . . . .\
    \   6\n     5.1.  Discovery of Support  . . . . . . . . . . . . . . . . . .  \
    \ 6\n     5.2.  Generate a Query  . . . . . . . . . . . . . . . . . . . .   6\n\
    \     5.3.  Send the Option . . . . . . . . . . . . . . . . . . . . .   6\n  \
    \   5.4.  Generate a Response . . . . . . . . . . . . . . . . . . .   7\n   6.\
    \  Protocol Considerations . . . . . . . . . . . . . . . . . . .   8\n     6.1.\
    \  DNSSEC Considerations . . . . . . . . . . . . . . . . . .   8\n     6.2.  NS\
    \ Record Considerations  . . . . . . . . . . . . . . . .   8\n     6.3.  Session\
    \ Management  . . . . . . . . . . . . . . . . . . .   9\n     6.4.  Negative Trust\
    \ Anchors  . . . . . . . . . . . . . . . . .   9\n     6.5.  Anycast Considerations\
    \  . . . . . . . . . . . . . . . . .   9\n   7.  Security Considerations . . .\
    \ . . . . . . . . . . . . . . . .  10\n     7.1.  Additional Work and Bandwidth\
    \ . . . . . . . . . . . . . .  10\n     7.2.  Amplification Attacks . . . . .\
    \ . . . . . . . . . . . . .  10\n     7.3.  Privacy Considerations  . . . . .\
    \ . . . . . . . . . . . .  10\n   8.  Examples  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  10\n     8.1.  CHAIN Query for \"www.example.com\" .\
    \ . . . . . . . . . . .  10\n     8.2.  Out-of-Path Query for \"example.com\"\
    \ . . . . . . . . . . .  12\n     8.3.  Nonexistent Data  . . . . . . . . . .\
    \ . . . . . . . . . .  13\n   9.  IANA Considerations . . . . . . . . . . . .\
    \ . . . . . . . . .  14\n     9.1.  EDNS0 Option Code for CHAIN . . . . . . .\
    \ . . . . . . . .  14\n   10. Normative References  . . . . . . . . . . . . .\
    \ . . . . . . .  14\n   Acknowledgments . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  16\n   Author's Address  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traditionally, a DNS client operates in stub mode.  For\
    \ each DNS\n   question the DNS client needs to resolve, it sends a single query\
    \ to\n   an upstream recursive resolver to obtain a single DNS answer.  When\n\
    \   DNSSEC [RFC4033] is deployed on such DNS clients, validation requires\n  \
    \ that the client obtain all the intermediate information from the DNS\n   root\
    \ down to the queried-for host name, so it can perform DNSSEC\n   validation on\
    \ the complete chain of trust.\n   Currently, applications send out many UDP requests\
    \ concurrently.\n   This requires more resources on the DNS client with respect\
    \ to state\n   (CPU, memory, battery) and bandwidth.  There is also no guarantee\n\
    \   that the initial set of UDP questions will result in all the records\n   required\
    \ for DNSSEC validation.  More round trips could be required\n   depending on\
    \ the resulting DNS answers.  This especially affects\n   high-latency links.\n\
    \   This document specifies an EDNS0 extension that allows a validating\n   resolver\
    \ running as a forwarding resolver to open a TCP connection to\n   another resolver\
    \ and request a DNS chain answer using one DNS query/\n   answer pair.  This reduces\
    \ the number of round trips to two.  If\n   combined with long-lived TCP or [RFC7828],\
    \ there is only one round\n   trip.  While the upstream resolver still needs to\
    \ perform all the\n   individual queries required for the complete answer, it\
    \ usually has a\n   much bigger cache and does not experience significant slowdown\
    \ from\n   last-mile latency.\n   This EDNS0 extension allows the forwarding resolver\
    \ to indicate which\n   part of the DNS hierarchy it already contains in its cache.\
    \  This\n   reduces the amount of data required to be transferred and reduces\
    \ the\n   work the upstream recursive resolver has to perform.\n   This EDNS0\
    \ extension is only intended to be sent by forwarding\n   resolvers to recursive\
    \ resolvers.  It MUST be ignored by\n   authoritative servers.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The DNS terminology used in this document is that of [RFC7719].\n\
    \   Additionally, the following terms are used:\n   Forwarding Resolver:  A nameserver\
    \ that does not do iterative\n      resolution itself; instead, it passes that\
    \ responsibility to\n      another recursive resolver, called a \"forwarder\"\
    \ in [RFC2308],\n      Section 1.\n   Recursive Resolver:  A nameserver that is\
    \ responsible for resolving\n      domain names for clients by following the domain's\
    \ delegation\n      chain, starting at the root.  Recursive resolvers frequently\
    \ use\n      caches to be able to respond to client queries quickly, as\n    \
    \  described in [RFC1035], Section 7.\n   Validating Resolver:  A recursive nameserver\
    \ that also performs\n      DNSSEC [RFC4033] validation.  Also known as \"security-aware\n\
    \      resolver\".\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   When DNSSEC is deployed on a host, it can no longer delegate\
    \ all DNS\n   work to the upstream recursive resolver.  Obtaining just the DNS\n\
    \   answer itself is not enough to validate that answer using DNSSEC.\n   For\
    \ DNSSEC validation, the DNS client requires a locally running\n   validating\
    \ resolver, so it can confirm DNSSEC validation of all\n   intermediary DNS answers.\
    \  It can configure itself as a forwarding\n   resolver if it obtains the IP addresses\
    \ of one or more recursive\n   resolvers that are available or as a stand-alone\
    \ recursive resolver\n   if no functional recursive resolvers were obtained. \
    \ Generating the\n   required queries for validation adds a significant delay\
    \ in answering\n   the DNS question of the locally running application.  The application\n\
    \   must wait while the resolver validates all intermediate answers.\n   Each\
    \ round trip adds to the total time waiting on DNS resolution with\n   validation\
    \ to complete.  This makes DNSSEC resolving impractical for\n   devices on networks\
    \ with a high latency.\n   This document defines the CHAIN option that allows\
    \ the resolver to\n   request all intermediate DNS data it requires to resolve\
    \ and validate\n   a particular DNS answer in a single round trip.  The resolver\
    \ could\n   be part of the application or a recursive resolver running on the\n\
    \   host.\n   Servers answering with CHAIN data should ensure that the peer's\
    \ IP\n   address is not a spoofed source IP address.  See Section 7.  This\n \
    \  prevents DNS amplification attacks.\n   Applications that support CHAIN internally\
    \ can perform validation\n   without requiring the host to run a recursive resolver.\
    \  This is\n   particularly useful for virtual servers in a cloud or container-based\n\
    \   deployment where it is undesirable to run a recursive resolver per\n   virtual\
    \ machine.\n   The format of this option is described in Section 4.\n   As described\
    \ in Section 5.4, a recursive resolver can use this EDNS0\n   option to include\
    \ additional data required by the resolver in the\n   Authority Section of the\
    \ DNS answer packet.  The Answer\n   Section remains unchanged from a traditional\
    \ DNS answer and contains\n   the answer and related DNSSEC entries.\n   An empty\
    \ CHAIN EDNS0 option MAY be sent over any transport as a\n   discovery method.\
    \  A DNS server receiving such an empty CHAIN option\n   SHOULD add an empty CHAIN\
    \ option in its answer to indicate that it\n   supports the CHAIN option.\n  \
    \ The mechanisms provided by CHAIN raise various security concerns\n   related\
    \ to the additional work, bandwidth, amplification attacks, and\n   privacy issues\
    \ with the cache.  These concerns are described in\n   Section 7.\n"
- title: 4.  Option Format
  contents:
  - "4.  Option Format\n   This document uses an EDNS0 option [RFC6891] to include\
    \ client IP\n   information in DNS messages.  The option is structured as follows:\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-------------------------------+-------------------------------+\n\
    \   !         OPTION-CODE           !         OPTION-LENGTH         !\n   +-------------------------------+-------------------------------+\n\
    \   ~                Closest Trust Point (FQDN)                     ~\n   +---------------------------------------------------------------+\n\
    \   o  OPTION-CODE, 2 octets, for CHAIN is 13.\n   o  OPTION-LENGTH, 2 octets,\
    \ contains the length of the payload\n      (everything after Option-length) in\
    \ octets.\n   o  Closest trust point, a variable-length Fully-Qualified Domain\
    \ Name\n      (FQDN) in DNS wire format of the requested start point of the\n\
    \      chain.  This entry is the \"lowest\" known entry in the DNS chain\n   \
    \   known by the recursive server seeking a CHAIN answer for which it\n      has\
    \ a validated Delegation Signer (DS) and DNSKEY record.  The\n      endpoint of\
    \ the chain is obtained from the DNS Query\n      Section itself.  No DNS name\
    \ compression is allowed for this\n      value.\n"
- title: 5.  Protocol Description
  contents:
  - '5.  Protocol Description

    '
- title: 5.1.  Discovery of Support
  contents:
  - "5.1.  Discovery of Support\n   A forwarding resolver may include a zero-length\
    \ CHAIN option in a\n   regular query over any transport to discover the DNS server\n\
    \   capability for CHAIN.  Recursive resolvers that support and are\n   willing\
    \ to accept CHAIN queries over source IP verified transport\n   respond to a zero-length\
    \ CHAIN received by including a zero-length\n   CHAIN option in the answer.  If\
    \ not already using a source-IP-\n   verified transport, the forwarding resolver\
    \ MAY then switch to a\n   source-IP-verified transport and start sending queries\
    \ with the CHAIN\n   option to request a CHAIN response from the recursive resolver.\n\
    \   Examples of source-IP-verified transports are the three-way TCP\n   handshake\
    \ and UDP with DNS cookies [RFC7873].\n"
- title: 5.2.  Generate a Query
  contents:
  - "5.2.  Generate a Query\n   In this option value, the forwarding resolver sets\
    \ the closest trust\n   point in the chain -- furthest from the root -- that it\
    \ already has a\n   DNSSEC-validated (secure or not) answer for in its cache.\
    \  The\n   upstream recursive resolver does not need to include any part of the\n\
    \   chain from the root down to this option's FQDN.  A complete example\n   is\
    \ described in Section 8.1.\n   The CHAIN option should generally be sent by system\
    \ forwarding\n   resolvers and resolvers within an application that also performs\n\
    \   DNSSEC validation.\n"
- title: 5.3.  Send the Option
  contents:
  - "5.3.  Send the Option\n   When CHAIN is available, the downstream recursive resolver\
    \ can adjust\n   its query strategy based on the desired queries and its cache\n\
    \   contents.\n   A forwarding resolver can request the CHAIN option with every\n\
    \   outgoing DNS query.  However, it is RECOMMENDED that forwarding\n   resolvers\
    \ remember which upstream recursive resolvers did not return\n   the option (and\
    \ additional data) with their response.  The forwarding\n   resolver SHOULD fall\
    \ back to regular DNS for subsequent queries to\n   those recursive resolvers.\
    \  It MAY switch to another recursive\n   resolver that does support the CHAIN\
    \ option or try again later to see\n   if the server has become less loaded and\
    \ is now willing to answer\n   with CHAIN queries.  A fallback strategy similar\
    \ to that described in\n   [RFC6891], Section 6.2.2 SHOULD be employed to avoid\
    \ persistent\n   interference due to non-clean paths.\n"
- title: 5.4.  Generate a Response
  contents:
  - "5.4.  Generate a Response\n   When a query containing a non-zero CHAIN option\
    \ is received from a\n   forwarding resolver, the upstream recursive resolver\
    \ supporting CHAIN\n   MAY respond by confirming that it is returning a CHAIN.\
    \  To do so, it\n   MUST set the CHAIN option to the lowest trust point sent as\
    \ part of\n   the chain, with its corresponding OPTION-LENGTH.  It extends the\n\
    \   Authority Section in the DNS answer packet with the DNS RRsets\n   required\
    \ for validating the answer.  The added DNS RRsets start with\n   the first chain\
    \ element below the received closest trust point up to\n   and including the NS\
    \ and DS RRsets that represent the zone cut\n   (authoritative servers) of the\
    \ QNAME.  The added RRsets MAY be added\n   in matching hierarchical order, but\
    \ a DNS client MUST NOT depend on\n   the order of the added RRsets for validation.\
    \  The actual DNS answer\n   to the question in the Query Section is placed in\
    \ the DNS Answer\n   Section identical to the traditional DNS answer.  All required\n\
    \   DNSSEC-related records must be added to their appropriate sections.\n   This\
    \ includes records required for proof of nonexistence of regular\n   and/or wildcard\
    \ records, such as NextSECure (NSEC) or NSEC3 records.\n   Recursive resolvers\
    \ that have not implemented or enabled support for\n   the CHAIN option, or are\
    \ otherwise unwilling to perform the\n   additional work for a CHAIN query due\
    \ to workload, may safely ignore\n   the option in the incoming queries.  Such\
    \ a server MUST NOT include a\n   CHAIN option when sending DNS answer replies\
    \ back, thus indicating it\n   is not able or willing to support CHAIN queries\
    \ at this time.\n   Requests with wrongly formatted options (i.e., bogus FQDN)\
    \ MUST be\n   rejected; a FORMERR response must be returned to the sender, as\n\
    \   described by [RFC6891].\n   Requests resulting in chains that the receiving\
    \ resolver is unwilling\n   to serve can be rejected by answering the query as\
    \ a regular DNS\n   reply but with an empty CHAIN payload.  Replying with an empty\
    \ CHAIN\n   can be used for chains that would be too big or for chains that would\n\
    \   reveal too much information considered private.\n   At any time, a recursive\
    \ resolver that has determined that it is\n   running low on resources can refuse\
    \ CHAIN queries by replying with a\n   regular DNS reply with an empty CHAIN payload.\n\
    \   If a CHAIN answer would be bigger than the recursive resolver is\n   willing\
    \ to serve, it SHOULD send a partial chain starting with the\n   data closest\
    \ to the top of the chain.  The client MAY resend the\n   query with an updated\
    \ closest trust point until it has received the\n   full chain.  The CHAIN response\
    \ will contain the lowest closest trust\n   point that was included in the CHAIN\
    \ answer.\n   If the DNS request results in a CNAME or DNAME for the Answer\n\
    \   Section, the recursive resolver MUST return these records in the\n   Answer\
    \ Section similar to regular DNS processing.  The CNAME or DNAME\n   target MAY\
    \ be placed in the Additional Section only if all supporting\n   records for DNSSEC\
    \ validation of the CNAME or DNAME target are also\n   added to the Authority\
    \ Section.\n   The response from a recursive resolver to a resolver MUST NOT contain\n\
    \   the CHAIN option if none was present in the resolver's original\n   request.\n\
    \   A DNS query that contains the CHAIN option MUST also have the \"DNSSEC\n \
    \  OK\" (DO) bit set.  If this bit is not set, or if the \"Checking\n   Disabled\"\
    \ (CD) bit is set, the CHAIN option received MUST be ignored.\n"
- title: 6.  Protocol Considerations
  contents:
  - '6.  Protocol Considerations

    '
- title: 6.1.  DNSSEC Considerations
  contents:
  - "6.1.  DNSSEC Considerations\n   The presence or absence of an OPT resource record\
    \ containing a CHAIN\n   option in a DNS query does not change the usage of those\
    \ resource\n   records and mechanisms used to provide data origin authentication\
    \ and\n   data integrity to the DNS, as described in [RFC4033], [RFC4034], and\n\
    \   [RFC4035].\n"
- title: 6.2.  NS Record Considerations
  contents:
  - "6.2.  NS Record Considerations\n   CHAIN responses SHOULD include the authoritative\
    \ NS RRset with its\n   RRSIG records required for validation.  It MUST NOT include\
    \ the NS\n   RRset from the parent zone, as this RRset is not signed.  If the\
    \ size\n   of the answer is an important factor, the NS RRset MAY be omitted.\n\
    \   When a DNSSEC chain is supplied via CHAIN, the forwarding resolver is\n  \
    \ no longer required to use the NS RRset, as it can construct the\n   validation\
    \ path via the DNSKEY and DS RRsets without using the NS\n   RRset.  However,\
    \ the forwarding resolver might be forced to switch\n   from forwarding resolver\
    \ mode to recursive resolver mode due to a\n   network topology change.  In recursive\
    \ resolver mode, the NS RRsets\n   are needed to find and query authoritative\
    \ servers directly.  It is\n   RECOMMENDED that the DNS forwarding resolver populate\
    \ its cache with\n   this information to avoid requiring future queries to obtain\
    \ any\n   missing NS records.  Therefore, CHAIN responses MUST include the NS\n\
    \   RRset from the child zone, including the RRSIG records required for\n   validation.\n"
- title: 6.3.  Session Management
  contents:
  - "6.3.  Session Management\n   The use of TCP keepalive [RFC7828] on DNS TCP sessions\
    \ is\n   RECOMMENDED; thus, TCP sessions should not immediately be closed\n  \
    \ after the DNS answer to the first query is received.\n   Both DNS clients and\
    \ servers are subject to resource constraints that\n   will limit the extent to\
    \ which CHAIN queries can be executed.\n   Effective limits for the number of\
    \ active sessions that can be\n   maintained on individual clients and servers\
    \ should be established\n   either as configuration options or by interrogation\
    \ of process limits\n   imposed by the operating system.\n   In the event that\
    \ there is greater demand for CHAIN queries than can\n   be accommodated, DNS\
    \ servers may stop advertising the CHAIN option in\n   successive DNS messages.\
    \  This allows, for example, clients with\n   other candidate servers to query\
    \ to establish new sessions with\n   different servers in expectation that those\
    \ servers might still allow\n   CHAIN queries.\n"
- title: 6.4.  Negative Trust Anchors
  contents:
  - "6.4.  Negative Trust Anchors\n   If a CHAIN answer would intersect with a negative\
    \ trust anchor\n   [RFC7646], a partial CHAIN up to the node above the negative\
    \ trust\n   anchor should be returned.\n"
- title: 6.5.  Anycast Considerations
  contents:
  - "6.5.  Anycast Considerations\n   Recursive resolvers of various types are commonly\
    \ deployed using\n   anycast [RFC4786].\n   Successive DNS transactions between\
    \ a client and server using UDP\n   transport may involve responses generated\
    \ by different anycast nodes,\n   and the use of anycast in the implementation\
    \ of a DNS server is\n   effectively undetectable by the client.  The CHAIN option\
    \ SHOULD NOT\n   be included in responses using UDP transport from servers provisioned\n\
    \   using anycast unless all anycast server nodes are capable of\n   processing\
    \ the CHAIN option.\n   Since DNS queries using CHAIN may result in longer TCP\
    \ sessions,\n   network topology changes may disrupt them more frequently.  Anycast\n\
    \   servers MAY make use of Multipath TCP [RFC6824] to anchor the server\n   side\
    \ of the TCP connection to an unambiguously unicast address in\n   order to avoid\
    \ disruption due to topology changes.\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1.  Additional Work and Bandwidth
  contents:
  - "7.1.  Additional Work and Bandwidth\n   Producing CHAIN answers incurs additional\
    \ load and bandwidth on the\n   recursive resolver.  At any time, a recursive\
    \ resolver may decide to\n   no longer answer with CHAIN answers and fall back\
    \ to traditional DNS\n   answers.\n"
- title: 7.2.  Amplification Attacks
  contents:
  - "7.2.  Amplification Attacks\n   CHAIN queries can potentially send very large\
    \ DNS answers.  Attackers\n   could abuse this using spoofed source IP addresses\
    \ to inflict large\n   distributed denial-of-service attacks using CHAINS as an\n\
    \   amplification vector in their attack.  While TCP is not vulnerable\n   for\
    \ this type of abuse, the UDP protocol is vulnerable to this.\n   A recursive\
    \ resolver MUST NOT return CHAIN answers to clients over\n   UDP without source\
    \ IP address verification.  An example of UDP-based\n   source IP address verification\
    \ is [RFC7873].  A recursive resolver\n   refusing a CHAIN option MUST respond\
    \ with a zero-length CHAIN option\n   to indicate support for CHAIN queries when\
    \ a proper transport is\n   used.  It MUST NOT send an RCODE of REFUSED.\n"
- title: 7.3.  Privacy Considerations
  contents:
  - "7.3.  Privacy Considerations\n   A client producing CHAIN queries reveals a little\
    \ more information\n   about its cache contents than regular DNS clients.  This\
    \ could be\n   used to fingerprint a client across network reconnections.  If\
    \ DNS\n   privacy is a concern, a CHAIN query client MAY try to use a DNS\n  \
    \ transport that provides privacy, such as [RFC7858] or a trusted DNS\n   server\
    \ that is contacted through a VPN connection such as IPsec.\n"
- title: 8.  Examples
  contents:
  - '8.  Examples

    '
- title: 8.1.  CHAIN Query for "www.example.com"
  contents:
  - "8.1.  CHAIN Query for \"www.example.com\"\n   o  A web browser on a client machine\
    \ asks the forwarding resolver\n      running on the local host to resolve the\
    \ A record of\n      \"www.example.com.\" by sending a regular DNS UDP query on\
    \ port 53\n      to 127.0.0.1.\n   o  The resolver on the client machine checks\
    \ its cache and notices it\n      already has a DNSSEC-validated entry of \"com.\"\
    \ in its cache.  This\n      includes the DNSKEY RRset with its RRSIG records.\
    \  In other words,\n      according to its cache, \".com\" is DNSSEC validated\
    \ as \"secure\" and\n      can be used to continue a DNSSEC-validated chain.\n\
    \   o  The resolver on the client opens a TCP connection to its upstream\n   \
    \   recursive resolver on port 53.  It adds the CHAIN option as\n      follows:\n\
    \      *  Option-code, set to 13\n      *  Option-length, set to 5\n      *  Closest\
    \ trust point set to \"com.\" (0x03 0x63 0x6f 0x6d 0x00)\n   o  The upstream recursive\
    \ resolver receives a DNS query over TCP with\n      the CHAIN closest trust point\
    \ set to \"com.\".  After accepting the\n      query, it starts constructing a\
    \ DNS reply packet.\n   o  The upstream recursive resolver performs all the regular\
    \ work to\n      ensure it has all the answers to the query for the A record of\n\
    \      \"www.example.com.\".  It does so without using the CHAIN option --\n \
    \     unless it is also configured as a forwarding resolver.  The answer\n   \
    \   to the original DNS question could be the actual A record, the\n      DNSSEC\
    \ proof of nonexistence, or an insecure NXDOMAIN response.\n   o  The upstream\
    \ recursive resolver adds the CHAIN option to the DNS\n      response as follows:\n\
    \      *  Option-code, set to 13\n      *  Option-length, set to 5\n      *  The\
    \ closest trust point is set to \"com.\" (0x03 0x63 0x6f 0x6d\n         0x00)\n\
    \   o  The upstream recursive resolver constructs the DNS Authority\n      Section\
    \ and fills it (in any order) with:\n      *  The DS RRset for \"example.com.\"\
    \ and its corresponding RRSIGs\n         (made by the \"com.\"  DNSKEY(s))\n \
    \     *  The DNSKEY RRset for \"example.com.\" and its corresponding\n       \
    \  RRSIGs (made by the \"example.com.\"  DNSKEY(s))\n      *  The authoritative\
    \ NS RRset for \"example.com.\" and its\n         corresponding RRSIGs (from the\
    \ child zone)\n      If the answer does not exist, and the zone uses DNSSEC, it\
    \ also\n      adds the proof of nonexistence, such as NSEC or NSEC3 records, to\n\
    \      the Authority Section.\n   o  The upstream recursive resolver constructs\
    \ the DNS Answer section\n      and fills it with:\n      *  The A record of \"\
    www.example.com.\" and its corresponding\n         RRSIGs.\n      If the answer\
    \ does not exist (NODATA or NXDOMAIN), the Answer\n      Section remains empty.\
    \  For the NXDOMAIN case, the RCODE of the\n      DNS answer packet is set to\
    \ NXDOMAIN.  Otherwise, it remains as\n      NOERROR.\n   o  The upstream recursive\
    \ resolver returns the DNS answer over the\n      existing TCP connection.  When\
    \ all data is sent, it SHOULD keep\n      the TCP connection open to allow for\
    \ additional incoming DNS\n      queries -- provided it has enough resources to\
    \ do so.\n   o  The resolver on the client receives the DNS answer.  It processes\n\
    \      the Authority and the Answer Sections and places the information\n    \
    \  in its local cache.  It ensures that no data is accepted into the\n      cache\
    \ without having proper DNSSEC validation.  It MAY do so by\n      looping over\
    \ the entries in the Authority and Answer Sections.\n      When an entry is validated\
    \ for its cache, it is removed from the\n      processing list.  If an entry cannot\
    \ be validated, it is left in\n      the process list.  When the end of the list\
    \ is reached, the list\n      is processed again until either all entries are\
    \ placed in the\n      cache or the remaining items cannot be placed in the cache\
    \ due to\n      lack of validation.  Those entries are then discarded.\n   o \
    \ If the cache contains a valid answer to the application's query,\n      this\
    \ answer is returned to the application via a regular DNS\n      answer packet.\
    \  This packet MUST NOT contain a CHAIN option.  If\n      no valid answer can\
    \ be returned, normal error processing is done.\n      For example, an NXDOMAIN\
    \ or an empty Answer Section could be\n      returned depending on the error condition.\n"
- title: 8.2.  Out-of-Path Query for "example.com"
  contents:
  - "8.2.  Out-of-Path Query for \"example.com\"\n   A recursive resolver receives\
    \ a query for the A record for\n   \"example.com\".  It includes the CHAIN option\
    \ with the following\n   parameters:\n   o  Option-code, set to 13\n   o  Option-length,\
    \ set to 14\n   o  The closest trust point set to \"unrelated.ca.\" (0x09 0x75\
    \ 0x6e\n      0x72 0x65 0x6c 0x61 0x74 0x65 0x64 0x03 0x63 0x61 0x00)\n   As there\
    \ is no chain that leads from \"unrelated.ca.\" to\n   \"example.com.\", the resolving\
    \ nameserver answers with an empty CHAIN\n   specified using:\n   o  Option-code,\
    \ set to 13\n   o  Option-length, set to 0x00 0x00\n   o  The closest trust point\
    \ is omitted (zero length)\n   Note that the regular answer is still present just\
    \ as it would be for\n   a query that did not specify the CHAIN option.\n"
- title: 8.3.  Nonexistent Data
  contents:
  - "8.3.  Nonexistent Data\n   A recursive resolver receives a query for the A record\
    \ for\n   \"ipv6.toronto.redhat.ca\".  It includes the CHAIN option with the\n\
    \   following parameters:\n   o  Option-code, set to 13\n   o  Option-length,\
    \ set to 0x00 0x03\n   o  The closest trust point set to \"ca.\"\n   Using regular\
    \ UDP queries towards authoritative nameservers, it\n   locates the NS RRset for\
    \ \"toronto.redhat.ca.\".  When querying for the\n   A record, it receives a reply\
    \ with RCODE \"NoError\" and an empty\n   Answer Section.  The Authority Section\
    \ contains NSEC3 and RRSIG\n   records proving there is no A RRTYPE for the QNAME\n\
    \   \"ipv6.toronto.redhat.ca\".\n   The recursive resolver constructs a DNS reply\
    \ with the following\n   CHAIN option parameters:\n   o  Option-code, set to 13\n\
    \   o  Option-length, set to 0x00 0x00\n   o  The closest trust point is omitted\
    \ (zero length)\n   The RCODE is set to \"NoError\".  The Authority Section is\
    \ filled in\n   with:\n   o  The DS RRset for \"redhat.ca.\" plus RRSIGs\n   o\
    \  The DNSKEY RRset for \"redhat.ca.\" plus RRSIGs\n   o  The NS RRset for \"\
    redhat.ca.\" plus RRSIGs (e.g., ns[01].redhat.ca)\n   o  The A RRset for \"ns0.redhat.ca.\"\
    \ and \"ns1.redhat.ca.\" plus RRSIGs\n   o  The DS RRset for \"toronto.redhat.ca.\"\
    \ plus RRSIGs\n   o  The NS RRset for \"toronto.redhat.ca.\" plus RRSIGs (e.g.,\n\
    \      ns[01].toronto.redhat.ca)\n   o  The DNSKEY RRset for \"toronto.redhat.ca.\"\
    \ plus RRSIGs\n   o  The A RRset and/or AAAA RRset for \"ns0.toronto.redhat.ca.\"\
    \ and\n      \"ns1.toronto.redhat.ca.\" plus RRSIGs\n   o  The NSEC record for\
    \ \"ipv6.toronto.redhat.ca.\" (proves what RRTYPEs\n      do exist; does not include\
    \ A)\n   o  The NSEC record for \"toronto.redhat.ca.\" (proves no wildcard\n \
    \     exists)\n   The Answer Section is empty.  The RCODE is set to NOERROR.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  EDNS0 Option Code for CHAIN
  contents:
  - "9.1.  EDNS0 Option Code for CHAIN\n   IANA has assigned option code 13 in the\
    \ \"DNS EDNS0 Option Codes\n   (OPT)\" registry to CHAIN.\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names - implementation\
    \ and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2308]  Andrews,\
    \ M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\", RFC 2308,\
    \ DOI 10.17487/RFC2308, March 1998,\n              <http://www.rfc-editor.org/info/rfc2308>.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, DOI 10.17487/RFC4033, March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Resource Records for the DNS Security Extensions\",\n      \
    \        RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC4786]  Abley, J. and K. Lindqvist, \"Operation of Anycast\n          \
    \    Services\", BCP 126, RFC 4786, DOI 10.17487/RFC4786,\n              December\
    \ 2006, <http://www.rfc-editor.org/info/rfc4786>.\n   [RFC6824]  Ford, A., Raiciu,\
    \ C., Handley, M., and O. Bonaventure,\n              \"TCP Extensions for Multipath\
    \ Operation with Multiple\n              Addresses\", RFC 6824, DOI 10.17487/RFC6824,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6824>.\n   [RFC6891]\
    \  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n              for\
    \ DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891, April\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6891>.\n   [RFC7646]\
    \  Ebersman, P., Kumari, W., Griffiths, C., Livingood, J.,\n              and\
    \ R. Weber, \"Definition and Use of DNSSEC Negative Trust\n              Anchors\"\
    , RFC 7646, DOI 10.17487/RFC7646, September 2015,\n              <http://www.rfc-editor.org/info/rfc7646>.\n\
    \   [RFC7719]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n           \
    \   Terminology\", RFC 7719, DOI 10.17487/RFC7719, December\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7719>.\n   [RFC7828]  Wouters, P., Abley,\
    \ J., Dickinson, S., and R. Bellis, \"The\n              edns-tcp-keepalive EDNS0\
    \ Option\", RFC 7828,\n              DOI 10.17487/RFC7828, April 2016,\n     \
    \         <http://www.rfc-editor.org/info/rfc7828>.\n   [RFC7858]  Hu, Z., Zhu,\
    \ L., Heidemann, J., Mankin, A., Wessels, D.,\n              and P. Hoffman, \"\
    Specification for DNS over Transport\n              Layer Security (TLS)\", RFC\
    \ 7858, DOI 10.17487/RFC7858, May\n              2016, <http://www.rfc-editor.org/info/rfc7858>.\n\
    \   [RFC7873]  Eastlake 3rd, D. and M. Andrews, \"Domain Name System (DNS)\n \
    \             Cookies\", RFC 7873, DOI 10.17487/RFC7873, May 2016,\n         \
    \     <http://www.rfc-editor.org/info/rfc7873>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Andrew Sullivan pointed out that we do not need any new data\
    \ formats\n   to support DNS chains.  Olafur Gudmundsson ensured the RRsets are\n\
    \   returned in the proper sections.  Thanks to Tim Wicinski for his\n   thorough\
    \ review.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul Wouters\n   Red Hat\n   Email: pwouters@redhat.com\n"
