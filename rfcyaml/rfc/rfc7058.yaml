- title: __initial_text__
  contents:
  - '        Media Control Channel Framework (CFW) Call Flow Examples

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides a list of typical Media Control Channel\n\
    \   Framework call flows.  It aims at being a simple guide to the use of\n   the\
    \ interface between Application Servers and MEDIACTRL-based Media\n   Servers,\
    \ as well as a base reference document for both implementors\n   and protocol\
    \ researchers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7058.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions .....................................................5\n  \
    \ 3. Terminology .....................................................5\n   4.\
    \ A Practical Approach ............................................6\n      4.1.\
    \ State Diagrams .............................................6\n   5. Control\
    \ Channel Establishment ..................................10\n      5.1. COMEDIA\
    \ Negotiation .......................................11\n      5.2. SYNC ......................................................14\n\
    \      5.3. K-ALIVE ...................................................15\n  \
    \    5.4. Wrong Behavior ............................................17\n   6.\
    \ Use-Case Scenarios and Examples ................................20\n      6.1.\
    \ Echo Test .................................................27\n           6.1.1.\
    \ Direct Echo Test ...................................28\n           6.1.2. Echo\
    \ Test Based on Recording .......................30\n      6.2. Phone Call ................................................39\n\
    \           6.2.1. Direct Connection ..................................42\n  \
    \         6.2.2. Conference-Based Approach ..........................44\n    \
    \       6.2.3. Recording a Conversation ...........................51\n      6.3.\
    \ Conferencing ..............................................57\n           6.3.1.\
    \ Simple Bridging ....................................62\n           6.3.2. Rich\
    \ Conference Scenario ...........................66\n           6.3.3. Coaching\
    \ Scenario ..................................75\n           6.3.4. Sidebars ...........................................83\n\
    \           6.3.5. Floor Control ......................................93\n  \
    \    6.4. Additional Scenarios ......................................99\n    \
    \       6.4.1. Voice Mail ........................................100\n      \
    \     6.4.2. Current Time ......................................107\n        \
    \   6.4.3. DTMF-Driven Conference Manipulation ...............112\n   7. Media\
    \ Resource Brokering ......................................126\n      7.1. Publishing\
    \ Interface .....................................127\n      7.2. Consumer Interface\
    \ .......................................136\n           7.2.1. Query Mode ........................................137\n\
    \           7.2.2. Inline-Aware Mode .................................140\n  \
    \         7.2.3. Inline-Unaware Mode ...............................155\n    \
    \  7.3. Handling Media Dialogs ...................................157\n      \
    \     7.3.1. Query and Inline-Aware Mode .......................157\n        \
    \   7.3.2. Inline-Unaware Mode ...............................160\n          \
    \ 7.3.3. CFW Protocol Behavior .............................167\n   8. Security\
    \ Considerations .......................................170\n   9. Acknowledgments\
    \ ...............................................180\n   10. References ...................................................180\n\
    \      10.1. Normative References ....................................180\n  \
    \    10.2. Informative References ..................................181\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides a list of typical MEDIACTRL Media\
    \ Control\n   Channel Framework [RFC6230] call flows.  The motivation for this\n\
    \   comes from our implementation experience with the framework and its\n   protocol.\
    \  This drove us to write a simple guide to the use of the\n   several interfaces\
    \ between Application Servers and MEDIACTRL-based\n   Media Servers, and a base\
    \ reference document for other implementors\n   and protocol researchers.\n  \
    \ Following this spirit, this document covers several aspects of the\n   interaction\
    \ between Application Servers and Media Servers.  However,\n   in the context\
    \ of this document, the call flows almost always depict\n   the interaction between\
    \ a single Application Server (which, for the\n   sake of conciseness, is called\
    \ the AS from now on) and a single Media\n   Server (MS).  In Section 7, some\
    \ flows involving more entities by\n   means of a Media Resource Broker compliant\
    \ with [RFC6917] are\n   presented.  To help readers understand all the flows\
    \ (as related to\n   both SIP dialogs and Media Control Channel Framework (CFW)\n\
    \   transactions), the domains hosting the AS and the MS in all the\n   scenarios\
    \ are called 'as.example.com' and 'ms.example.net',\n   respectively, per [RFC2606].\
    \  The flows will often focus more on the\n   CFW [RFC6230] interaction, rather\
    \ than on the other involved\n   protocols, e.g., SIP [RFC3261], the Session Description\
    \ Protocol\n   (SDP) [RFC3264], or RTP [RFC3550].\n   In the next paragraphs,\
    \ a brief overview of our implementation\n   approach is described, with particular\
    \ focus on protocol-related\n   aspects.  This involves state diagrams that depict\
    \ both the client\n   side (the AS) and the server side (the MS).  Of course,\
    \ this section\n   is not at all to be considered a mandatory approach to the\n\
    \   implementation of the framework.  It is only meant to help readers\n   understand\
    \ how the framework works from a practical point of view.\n   Once done with these\
    \ preliminary considerations, in the subsequent\n   sections real-life scenarios\
    \ are addressed.  In this context, first\n   of all, the establishment of the\
    \ Control Channel is dealt with.\n   After that, some use-case scenarios involving\
    \ the most typical\n   multimedia applications are depicted and described.\n \
    \  It is worth pointing out that this document is not meant in any way\n   to\
    \ be a self-contained guide to implementing a MEDIACTRL-compliant\n   framework.\
    \  The specifications are a mandatory read for all\n   implementors, especially\
    \ because this document follows their\n   guidelines but does not delve into the\
    \ details of every aspect of the\n   protocol.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   Note that due to RFC formatting conventions, SIP/SDP and\
    \ CFW lines\n   whose content exceeds 72 characters are split across lines.  This\n\
    \   line folding is marked by a backslash at the end of the first line.\n   This\
    \ backslash, the preceding whitespace, the following CRLF, and the\n   whitespace\
    \ beginning the next line would not appear in the actual\n   protocol contents.\
    \  Note also that the indentation of the XML content\n   is only provided for\
    \ readability.  Actual messages will follow strict\n   XML syntax, which allows,\
    \ but does not require, indentation.  Due to\n   the same limit of 72 characters\
    \ per line, this document also\n   sometimes splits the content of XML elements\
    \ across lines.  Please be\n   aware that when this happens, no whitespace is\
    \ actually meant to be\n   at either the beginning or the end of the element content.\n\
    \   Note also that a few diagrams show arrows that go from a network\n   entity\
    \ to itself.  It's worth pointing out that such arrows do not\n   represent any\
    \ transaction message but are rather meant as an\n   indication to the reader\
    \ that the involved network entity made a\n   decision, within its application\
    \ logic, according to the input it\n   previously received.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   This document uses the same terminology as [RFC6230], [RFC6231],\n\
    \   [RFC6505], and [RFC6917].  The following terms are only a\n   summarization\
    \ of the terms most commonly used in this context and are\n   mostly derived from\
    \ the terminology used in the related documents:\n   COMEDIA:  connection-oriented\
    \ media (i.e., TCP and Transport Layer\n      Security (TLS)).  Also used to signify\
    \ the support in SDP for\n      connection-oriented media and the RFCs that define\
    \ that support\n      ([RFC4145] and [RFC4572]).\n   Application Server:  an entity\
    \ that requests media processing and\n      manipulation from a Media Server;\
    \ typical examples are Back-to-\n      Back User Agents (B2BUAs) and endpoints\
    \ requesting manipulation of\n      a third party's media stream.\n   Media Server:\
    \  an entity that performs a service, such as media\n      processing, on behalf\
    \ of an Application Server; typical provided\n      functions are mixing, announcement,\
    \ tone detection and generation,\n      and play and record services.\n   Control\
    \ Channel:  a reliable connection between an Application Server\n      and a Media\
    \ Server that is used to exchange framework messages.\n   VCR controls:  runtime\
    \ control of aspects of an audio playback like\n      speed and volume, via dual-tone\
    \ multi-frequency (DTMF) signals\n      sent by the user, in a manner that resembles\
    \ the functions of a\n      VCR (video cassette recorder) controller.\n"
- title: 4.  A Practical Approach
  contents:
  - "4.  A Practical Approach\n   In this document, we embrace an engineering approach\
    \ to the\n   description of a number of interesting scenarios that can be realized\n\
    \   through the careful orchestration of the Media Control Channel\n   Framework\
    \ entities, namely the Application Server and the Media\n   Server.  We will demonstrate,\
    \ through detailed call flows, how a\n   variegated bouquet of services (ranging\
    \ from very simple scenarios to\n   much more complicated examples) can be implemented\
    \ with the\n   functionality currently offered, within the main MEDIACTRL framework,\n\
    \   by the Control Packages that have been made available to date.  The\n   document\
    \ aims at being a useful guide for those interested in\n   investigating the inter-operation\
    \ among MEDIACTRL components, as well\n   as being a base reference document for\
    \ application developers willing\n   to build advanced services on top of the\
    \ base infrastructure made\n   available by the framework.\n"
- title: 4.1.  State Diagrams
  contents:
  - "4.1.  State Diagrams\n   In this section, we present an \"informal\" view of\
    \ the main MEDIACTRL\n   protocol interactions, in the form of state diagrams.\
    \  Each diagram\n   is indeed a classical representation of a Mealy automaton,\
    \ comprising\n   a number of possible protocol states, indicated with rectangular\n\
    \   boxes.  Transitions between states are indicated through edges, with\n   each\
    \ edge labeled with a slash-separated pair representing a specific\n   input together\
    \ with the associated output (a dash in the output\n   position means that, for\
    \ that particular input, no output is\n   generated from the automaton).  Some\
    \ of the inputs are associated\n   with MEDIACTRL protocol messages arriving at\
    \ a MEDIACTRL component\n   while it is in a certain state.  This is the case\
    \ for 'CONTROL',\n   'REPORT' (in its various \"flavors\" -- pending, terminate,\
    \ etc.),\n   '200', '202', and 'Error' (error messages correspond to specific\n\
    \   numeric codes).  Further inputs represent triggers arriving at the\n   MEDIACTRL\
    \ automaton from the upper layer, namely the Application\n   Programming Interface\
    \ used by programmers while implementing\n   MEDIACTRL-enabled services.  Such\
    \ inputs have been indicated with the\n   term 'API' followed by the message that\
    \ the API itself is triggering\n   (as an example, 'API terminate' is a request\
    \ to send a 'REPORT'\n   message with a status of 'terminate' to the peering component).\n\
    \   Four diagrams are provided.  Two of them (Figures 1 and 2) describe\n   normal\
    \ operation of the framework.  Figure 3 contains two diagrams\n   describing asynchronous\
    \ event notifications.  Figure 1 embraces the\n   MS perspective, whereas Figure\
    \ 2 shows the AS side.  The upper part\n   of Figure 3 shows how events are generated,\
    \ on the MS side, by\n   issuing a CONTROL message addressed to the AS; events\
    \ are\n   acknowledged by the AS through standard 200 responses.  Hence, the\n\
    \   behavior of the AS, which mirrors that of the MS, is depicted in the\n   lower\
    \ part of the figure.\n   Coming back to Figure 1, the diagram shows that the\
    \ MS activates upon\n   reception of CONTROL messages coming from the AS.  The\
    \ CONTROL\n   messages instruct the MS regarding the execution of a specific\n\
    \   command that belongs to one of the available Control Packages.  The\n   execution\
    \ of the received command can either be quick or require some\n   time.  In the\
    \ former case, right after completing its operation, the\n   MS sends back to\
    \ the AS a 200 message, which basically acknowledges\n   correct termination of\
    \ the invoked task.  In the latter case, the MS\n   first sends back an interlocutory\
    \ 202 message containing a 'Timeout'\n   value, which lets it enter a different\
    \ state ('202' sent).  While in\n   the new state, the MS keeps on performing\
    \ the invoked task.  If the\n   task does not complete in the provided timeout,\
    \ the server will\n   update the AS on the other side of the Control Channel by\n\
    \   periodically issuing 'REPORT update' messages; each such message has\n   to\
    \ be acknowledged by the AS (through a '200' response).  Eventually,\n   when\
    \ the MS is done with the required service, it sends to the AS a\n   'REPORT terminate'\
    \ message.  The transaction is concluded when the AS\n   acknowledges receipt\
    \ of the message.  It is worth pointing out that\n   the MS may send a 202 response\
    \ after it determines that the request\n   does not contain any errors that cannot\
    \ be reported in a later REPORT\n   terminate request instead.  After the MS sends\
    \ a 202 response, any\n   error that it (or the API) finds in the request is reported\
    \ in the\n   final REPORT terminate request.  Again, the behavior of the AS, as\n\
    \   depicted in Figure 2, mirrors the above-described actions undertaken\n   at\
    \ the MS side.  The figures also show the cases in which\n   transactions cannot\
    \ be successfully completed due to abnormal\n   conditions; such conditions always\
    \ trigger the creation and\n   transmission of a specific 'Error' message that,\
    \ as mentioned\n   previously, is reported as a numeric error code.\n   +------------------+\
    \  CONTROL/-  +------------------+ API 202/202\n   | Idle/'terminate' |------------>|\
    \ CONTROL received |---------+\n   +------------------+             +------------------+\
    \         |\n     ^          ^   ^   API 200/200    |     |                  \
    \ |\n     |          |   |                  |     |                   |\n    \
    \ |          |   +------------------+     |                   |\n     | 200/-\
    \    |      API Error/Error       |                   |\n     |          +----------------------------+\
    \                   |\n     |                                                \
    \           |\n   +-------------+                                            \
    \   |\n   | Waiting for |                                               v\n  \
    \ |  last 200   |<------------------------+             +------------+\n   +-------------+\
    \                         |             | '202' sent |\n        ^            \
    \                      |             +------------+\n        |               \
    \                   |               |     |\n        |                       \
    \           +---------------+     |\n        | API terminate/                \
    \     API terminate/      |\n        | REPORT terminate                   REPORT\
    \ terminate    |\n        |                                                  \
    \      |\n      +--------------------+                                     |\n\
    \      | 'update' confirmed |------+                  API update/ |\n      +--------------------+\
    \      |                REPORT update |\n                ^                 | API\
    \ update/                  |\n                |                 | REPORT update\
    \                |\n                |                 v                      \
    \        |\n                |   200/-      +---------------+                 |\n\
    \                +--------------| 'update' sent |<----------------+\n        \
    \                       +---------------+\n                 Figure 1: Media Server\
    \ CFW State Diagram\n                 +--------------+   202/-   +--------------+\n\
    \             +-->| CONTROL sent |---------->| 202 received |\n             |\
    \   +--------------+           +--------------+\n             |        |     \
    \  |                 |     |\n             |        |       |                \
    \ |     |\n"
- title: API CONTROL/ |        | 200/- |                 |     |
  contents:
  - 'API CONTROL/ |        | 200/- |                 |     |

    '
- title: send CONTROL |        |       |                 |     |
  contents:
  - "send CONTROL |        |       |                 |     |\n             |     \
    \   |       | Error/          |     |\n"
- title: +------------------+  |       | Error           |     |
  contents:
  - '+------------------+  |       | Error           |     |

    '
- title: '| Idle/''terminate'' |<-+       |                 |     |'
  contents:
  - '| Idle/''terminate'' |<-+       |                 |     |

    '
- title: +------------------+<---------+                 |     |
  contents:
  - "+------------------+<---------+                 |     |\n    ^          ^   \
    \                             |     |\n    |          |            REPORT 'terminate'/\
    \ |     |\n    |          |                       send 200 |     |\n    |    \
    \      +--------------------------------+     | REPORT 'update'/\n    |      \
    \                                           | send 200\n    | REPORT 'terminate'/\
    \                             |\n    | send 200                              \
    \          |\n    |                     +-----------+               |\n    +---------------------|\
    \ 'update ' |<--------------+\n                          +-----------+\n     \
    \                       ^      |\n                            |      | REPORT\
    \ 'update'/\n                            +------+ send 200\n              Figure\
    \ 2: Application Server CFW State Diagram\n                                  \
    \  +--------------+\n                                +-->| CONTROL sent |\n  \
    \                              |   +--------------+\n                        \
    \        |           |\n                                |           |\n      \
    \             API CONTROL/ |           | 200/-\n                   send CONTROL\
    \ |           |\n                                |           |\n             \
    \      +------------------+     |\n                   | Idle/'terminate' |<----+\n\
    \                   +------------------+\n                          (Media Server\
    \ perspective)\n           +------------------+  CONTROL/-  +------------------+\n\
    \           | Idle/'terminate' |------------>| CONTROL received |\n          \
    \ +------------------+             +------------------+\n                    \
    \    ^       API 200/200          |\n                        |               \
    \             |\n                        +----------------------------+\n    \
    \                   (Application Server perspective)\n                       Figure\
    \ 3: Event Notifications\n"
- title: 5.  Control Channel Establishment
  contents:
  - "5.  Control Channel Establishment\n   As specified in [RFC6230], the preliminary\
    \ step to any interaction\n   between an AS and an MS is the establishment of\
    \ a Control Channel\n   between the two.  As explained in the next subsection,\
    \ this is\n   accomplished by means of a connection-oriented media (COMEDIA)\n\
    \   [RFC4145] [RFC4572] negotiation.  This negotiation allows a reliable\n   connection\
    \ to be created between the AS and the MS.  It is here that\n   the AS and the\
    \ MS agree on the transport-level protocol to use (TCP /\n   Stream Control Transmission\
    \ Protocol (SCTP)) and whether any\n   application-level security is needed or\
    \ not (e.g., TLS).  For the\n   sake of simplicity, we assume that an unencrypted\
    \ TCP connection is\n   negotiated between the two involved entities.  Once they\
    \ have\n   connected, a SYNC message sent by the AS to the MS consolidates the\n\
    \   Control Channel.  An example of how a keep-alive message is triggered\n  \
    \ is also presented in the following paragraphs.  For the sake of\n   completeness,\
    \ this section also includes a couple of common mistakes\n   that can occur when\
    \ dealing with the Control Channel establishment.\n               AS         \
    \                     MS\n               |                               |\n \
    \              | INVITE (COMEDIA)              |\n               |------------------------------>|\n\
    \               |                  100 (Trying) |\n               |<------------------------------|\n\
    \               |              200 OK (COMEDIA) |\n               |<------------------------------|\n\
    \               | ACK                           |\n               |------------------------------>|\n\
    \               |                               |\n               |==============================>|\n\
    \               | TCP CONNECT (CTRL CHANNEL)    |\n               |==============================>|\n\
    \               |                               |\n               | SYNC (Dialog-ID,\
    \ etc.)        |\n               |+++++++++++++++++++++++++++++>>|\n         \
    \      |                               |--+\n               |                \
    \               |  | Check SYNC\n               |                            \
    \   |<-+\n               |                        200 OK |\n               |<<+++++++++++++++++++++++++++++|\n\
    \               |                               |\n               .          \
    \                     .\n               .                               .\n  \
    \                Figure 4: Control Channel Establishment\n"
- title: 5.1.  COMEDIA Negotiation
  contents:
  - "5.1.  COMEDIA Negotiation\n   As a first step, the AS and the MS establish a\
    \ Control SIP dialog.\n   This is usually originated by the AS itself.  The AS\
    \ generates a SIP\n   INVITE message containing in its SDP body information about\
    \ the TCP\n   connection it wants to establish with the MS.  In the provided\n\
    \   example (see Figure 5 and the attached call flow), the AS wants to\n   actively\
    \ open a new TCP connection, which on its side will be bound\n   to port 5757.\
    \  If the request is fine, the MS answers by\n   communicating to the AS the transport\
    \ address to connect to in order\n   to establish the TCP connection.  In the\
    \ provided example, the MS\n   will listen on port 7575.  Once this negotiation\
    \ is over, the AS can\n   effectively connect to the MS.\n   The negotiation includes\
    \ additional attributes.  The 'cfw-id'\n   attribute is the most important, since\
    \ it specifies the Dialog-ID,\n   which in turn will be subsequently referred\
    \ to by both the AS and the\n   MS as specified in [RFC6230].\n              \
    \       AS                              MS\n                     |           \
    \                    |\n                     | 1. INVITE (COMEDIA)           |\n\
    \                     |------------------------------>|\n                    \
    \ |               2. 100 (Trying) |\n                     |<------------------------------|\n\
    \                     |           3. 200 OK (COMEDIA) |\n                    \
    \ |<------------------------------|\n                     | 4. ACK           \
    \             |\n                     |------------------------------>|\n    \
    \                 |                               |\n                     |==============================>|\n\
    \                     | TCP CONNECT (CTRL CHANNEL)    |\n                    \
    \ |==============================>|\n                     |                  \
    \             |\n                     .                               .\n    \
    \                 .                               .\n              Figure 5: COMEDIA\
    \ Negotiation: Sequence Diagram\n"
- title: 1. AS -> MS (SIP INVITE)
  contents:
  - '1. AS -> MS (SIP INVITE)

    '
- title: '------------------------'
  contents:
  - "------------------------\n   INVITE sip:MediaServer@ms.example.net:5060 SIP/2.0\n\
    \   Via: SIP/2.0/UDP 203.0.113.1:5060;\\\n           branch=z9hG4bK-d8754z-9b07c8201c3aa510-1---d8754z-;rport=5060\n\
    \   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n \
    \  To: <sip:MediaServer@ms.example.net:5060>\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n\
    \   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 INVITE\n\
    \   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type:\
    \ application/sdp\n   Content-Length: 203\n   v=0\n   o=lminiero 2890844526 2890842807\
    \ IN IP4 as.example.com\n   s=MediaCtrl\n   c=IN IP4 as.example.com\n   t=0 0\n\
    \   m=application 5757 TCP cfw\n   a=connection:new\n   a=setup:active\n   a=cfw-id:5feb6486792a\n"
- title: 2. AS <- MS (SIP 100 Trying)
  contents:
  - '2. AS <- MS (SIP 100 Trying)

    '
- title: '----------------------------'
  contents:
  - "----------------------------\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/UDP 203.0.113.1:5060;\
    \ \\\n           branch=z9hG4bK-d8754z-9b07c8201c3aa510-1---d8754z-;rport=5060\n\
    \   To: <sip:MediaServer@ms.example.net:5060>;tag=499a5b74\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n\
    \   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 INVITE\n\
    \   Content-Length: 0\n"
- title: 3. AS <- MS (SIP 200 OK)
  contents:
  - '3. AS <- MS (SIP 200 OK)

    '
- title: '------------------------'
  contents:
  - "------------------------\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 203.0.113.1:5060;\
    \ \\\n           branch=z9hG4bK-d8754z-9b07c8201c3aa510-1---d8754z-;rport=5060\n\
    \   Contact: <sip:MediaServer@ms.example.net:5060>\n   To: <sip:MediaServer@ms.example.net:5060>;tag=499a5b74\n\
    \   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n   Call-ID:\
    \ MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 INVITE\n   Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n\
    \   Content-Length: 199\n   v=0\n   o=lminiero 2890844526 2890842808 IN IP4 ms.example.net\n\
    \   s=MediaCtrl\n   c=IN IP4 ms.example.net\n   t=0 0\n   m=application 7575 TCP\
    \ cfw\n   a=connection:new\n   a=setup:passive\n   a=cfw-id:5feb6486792a\n"
- title: 4. AS -> MS (SIP ACK)
  contents:
  - '4. AS -> MS (SIP ACK)

    '
- title: '---------------------'
  contents:
  - "---------------------\n   ACK sip:MediaServer@ms.example.net:5060 SIP/2.0\n \
    \  Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n                branch=z9hG4bK-d8754z-22940f5f4589701b-1---d8754z-;rport\n\
    \   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n \
    \  To: <sip:MediaServer@ms.example.net:5060>;tag=499a5b74\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n\
    \   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 ACK\n  \
    \ Content-Length: 0\n"
- title: 5.2.  SYNC
  contents:
  - "5.2.  SYNC\n   Once the AS and the MS have successfully established a TCP\n \
    \  connection, an additional step is needed before the Control Channel\n   can\
    \ be used.  In fact, as seen in the previous subsection, the first\n   interaction\
    \ between the AS and the MS happens by means of a SIP\n   dialog, which in turn\
    \ allows the creation of the TCP connection.\n   This introduces the need for\
    \ a proper correlation between the above-\n   mentioned entities (SIP dialog and\
    \ TCP connection), so that the MS\n   can be sure that the connection came from\
    \ the AS that requested it.\n   This is accomplished by means of a dedicated framework\
    \ message called\n   a SYNC message.  This SYNC message uses a unique identifier\
    \ called\n   the Dialog-ID to validate the Control Channel.  This identifier,\
    \ as\n   introduced previously, is meant to be globally unique and as such is\n\
    \   properly generated by the caller (the AS in the call flow) and added\n   as\
    \ an SDP media attribute (cfw-id) to the COMEDIA negotiation in\n   order to make\
    \ both entities aware of its value:\n                       a=cfw-id:5feb6486792a\n\
    \                                ^^^^^^^^^^^^\n   It also offers an additional\
    \ negotiation mechanism.  In fact, the AS\n   uses the SYNC to not only properly\
    \ correlate, as explained before,\n   but also negotiate with the MS the Control\
    \ Packages in which it is\n   interested, as well as agree on a 'Keep-Alive' timer\
    \ needed by both\n   the AS and the MS so that they will know if problems on the\n\
    \   connection occur.  In the provided example (see Figure 6 and the\n   related\
    \ call flow), the AS sends a SYNC with a Dialog-ID constructed\n   as needed (using\
    \ the 'cfw-id' attribute from the SIP dialog) and\n   requests access to two Control\
    \ Packages: specifically, the\n   Interactive Voice Response (IVR) package and\
    \ the Mixer package.  The\n   AS also instructs the MS that a 100-second timeout\
    \ is to be used for\n   keep-alive messages.  The MS validates the request by\
    \ matching the\n   received Dialog-ID with the SIP dialog values, and, assuming\
    \ that it\n   supports the Control Packages the AS requested access to (and for\
    \ the\n   sake of this document we assume that it does), it answers with a\n \
    \  200 message.  Additionally, the MS provides the AS with a list of\n   other\
    \ unrequested packages it supports (in this case just a dummy\n   package providing\
    \ testing functionality).\n             AS                              MS\n \
    \            .                               .\n             .               \
    \                .\n             |                               |\n         \
    \    | 1. SYNC (Dialog-ID, etc.)     |\n             |+++++++++++++++++++++++++++++>>|\n\
    \             |                               |--+\n             |           \
    \                    |  | Check SYNC\n             |                         \
    \      |<-+\n             |                     2. 200 OK |\n             |<<+++++++++++++++++++++++++++++|\n\
    \             |                               |\n             .              \
    \                 .\n             .                               .\n        \
    \             Figure 6: SYNC: Sequence Diagram\n   1. AS -> MS (CFW SYNC)\n  \
    \ ----------------------\n      CFW 6e5e86f95609 SYNC\n      Dialog-ID: 5feb6486792a\n\
    \      Keep-Alive: 100\n      Packages: msc-ivr/1.0,msc-mixer/1.0\n   2. AS <-\
    \ MS (CFW 200)\n   ---------------------\n      CFW 6e5e86f95609 200\n      Keep-Alive:\
    \ 100\n      Packages: msc-ivr/1.0,msc-mixer/1.0\n      Supported: msc-example-pkg/1.0\n\
    \   The framework-level transaction identifier is obviously the same in\n   both\
    \ the request and the response (6e5e86f95609), since the AS needs\n   to be able\
    \ to match the response to the original request.  At this\n   point, the Control\
    \ Channel is finally established, and it can be used\n   by the AS to request\
    \ services from the MS.\n"
- title: 5.3.  K-ALIVE
  contents:
  - "5.3.  K-ALIVE\n   [RFC6230] provides a mechanism for implementing a keep-alive\n\
    \   functionality.  Such a mechanism is especially useful whenever any\n   NAT\
    \ or firewall sits in the path between an AS and an MS.  In fact,\n   NATs and\
    \ firewalls may have timeout values for the TCP connections\n   they handle, which\
    \ means that if no traffic is detected on these\n   connections within a specific\
    \ time they could be shut down.  This\n   could be the case for a Control Channel\
    \ established between an AS and\n   an MS but not used for some time.  For this\
    \ reason, [RFC6230]\n   specifies a dedicated framework message (K-ALIVE) that\
    \ the AS and MS\n   can use in order to generate traffic on the TCP connection\
    \ and keep\n   it alive.\n   As discussed in Section 5.2, the timeout value for\
    \ the keep-alive\n   mechanism is set by the SYNC request.  Specifically, in the\
    \ example,\n   the AS specified a value of 100 seconds.  In fact, the timeout\
    \ value\n   is not actually negotiated between the AS and MS, as it is simply\n\
    \   specified by whichever endpoint takes the active role.  The\n   100-second\
    \ value is compliant with how NATs and firewalls are usually\n   implemented,\
    \ since in most cases the timeout value they use before\n   shutting TCP connections\
    \ down is around 2 minutes.  Such a value has\n   a strong meaning within the\
    \ context of this mechanism.  In fact, it\n   means that the active role (the\
    \ AS, in this case) has to send a\n   K-ALIVE message before those 100 seconds\
    \ pass; otherwise, the passive\n   role (the MS) will tear down the connection,\
    \ treating it like a\n   timeout.  [RFC6230] suggests a more conservative approach\
    \ towards\n   handling this timeout value, suggesting that the K-ALIVE message\
    \ be\n   triggered before 80% of the negotiated time passes (80 seconds, in\n\
    \   this case).  This is exactly the case presented in Figure 7.\n           \
    \        AS                              MS\n                   .            \
    \                   .\n                   .                               .\n\
    \                   |                               |\n     ~80 s have +--|  \
    \                             |\n   passed since |  |                        \
    \       |\n   last K-ALIVE +->|                               |\n            \
    \       | 1. K-ALIVE                    |\n                   |+++++++++++++++++++++++++++++>>|\n\
    \                   |                               |--+ Reset the local\n   \
    \                |                               |  | 'Keep-Alive'\n         \
    \          |                               |<-+ timer\n                   |  \
    \                   2. 200 OK |\n                   |<<+++++++++++++++++++++++++++++|\n\
    \      Reset the +--|                               |\n          local |  |  \
    \                             |\n   'Keep-Alive' +->|                        \
    \       |\n          timer    |                               |\n            \
    \       .                               .\n                   .              \
    \                 .\n                    Figure 7: K-ALIVE: Sequence Diagram\n\
    \   After the Control Channel has been established (COMEDIA+SYNC), both\n   the\
    \ AS and the MS start local 'Keep-Alive' timers mapped to the\n   negotiated keep-alive\
    \ timeout value (100 seconds).  When about\n   80 seconds have passed since the\
    \ start of the timer (80% of\n   100 seconds), the AS sends a framework-level\
    \ K-ALIVE message to the\n   MS.  The message as seen in the protocol message\
    \ dump is very\n   lightweight, since it only includes a single line with no additional\n\
    \   header.  When the MS receives the K-ALIVE message, it resets its\n   local\
    \ 'Keep-Alive' timer and sends a 200 message back as\n   confirmation.  As soon\
    \ as the AS receives the 200 message, it resets\n   its local 'Keep-Alive' timer\
    \ as well, and the mechanism starts over\n   again.\n   The actual transaction\
    \ steps are presented below.\n   1. AS -> MS (K-ALIVE)\n   ---------------------\n\
    \      CFW 518ba6047880 K-ALIVE\n   2. AS <- MS (CFW 200)\n   ---------------------\n\
    \      CFW 518ba6047880 200\n   If the timer expired in either the AS or the MS\
    \ (i.e., the K-ALIVE or\n   the 200 arrived after the 100 seconds), the connection\
    \ and the\n   associated SIP control dialog would be torn down by the entity\n\
    \   detecting the timeout, thus ending the interaction between the AS and\n  \
    \ the MS.\n"
- title: 5.4.  Wrong Behavior
  contents:
  - "5.4.  Wrong Behavior\n   This section will briefly address some types of behavior\
    \ that could\n   represent the most common mistakes when dealing with the\n  \
    \ establishment of a Control Channel between an AS and an MS.  These\n   scenarios\
    \ are obviously of interest, since they result in the AS and\n   the MS being\
    \ unable to interact with each other.  Specifically, these\n   simple scenarios\
    \ will be described:\n   1.  an AS providing the MS with a wrong Dialog-ID in\
    \ the initial\n       SYNC.\n   2.  an AS sending a generic CONTROL message instead\
    \ of SYNC as a\n       first transaction.\n   The first scenario is depicted in\
    \ Figure 8.\n             AS                              MS\n             . \
    \                              .\n             .                             \
    \  .\n             |                               |\n             | 1. SYNC (Dialog-ID,\
    \ etc.)     |\n             |+++++++++++++++++++++++++++++>>|\n             |\
    \                               |--+\n             |                         \
    \      |  | Check SYNC (wrong!)\n             |                              \
    \ |<-+\n             |                        2. 481 |\n             |<<+++++++++++++++++++++++++++++|\n\
    \             |                               |\n             |<-XX- CLOSE TCP\
    \ CONNECTION -XX-|\n             |                               |\n         \
    \    | SIP BYE                       |\n             |------------------------------>|\n\
    \             |                               |\n             .              \
    \                 .\n             .                               .\n        \
    \   Figure 8: SYNC with Wrong Dialog-ID: Sequence Diagram\n   This scenario is\
    \ similar to the scenario presented in Section 5.2,\n   but with a difference:\
    \ instead of using the correct, expected\n   Dialog-ID in the SYNC message (5feb6486792a,\
    \ the one negotiated via\n   COMEDIA), the AS uses a wrong value (4hrn7490012c).\
    \  This causes the\n   SYNC transaction to fail.  First of all, the MS sends a\
    \ framework-\n   level 481 message.  This response, when given in reply to a SYNC\n\
    \   message, means that the SIP dialog associated with the provided\n   Dialog-ID\
    \ (the wrong identifier) does not exist.  The Control Channel\n   must be torn\
    \ down as a consequence, and so the MS also closes the TCP\n   connection it received\
    \ the SYNC message from.  The AS at this point\n   is supposed to tear down its\
    \ SIP control dialog as well, and so it\n   sends a SIP BYE to the MS.\n   The\
    \ actual transaction is presented below.\n   1. AS -> MS (CFW SYNC with wrong\
    \ Dialog-ID)\n   -------------------------------------------\n      CFW 2b4dd8724f27\
    \ SYNC\n      Dialog-ID: 4hrn7490012c\n      Keep-Alive: 100\n      Packages:\
    \ msc-ivr/1.0,msc-mixer/1.0\n   2. AS <- MS (CFW 481)\n   ---------------------\n\
    \      CFW 2b4dd8724f27 481\n   The second scenario is depicted in Figure 9.\n\
    \             AS                              MS\n             .             \
    \                  .\n             .                               .\n       \
    \      |                               |\n             | 1. CONTROL          \
    \          |\n             |+++++++++++++++++++++++++++++>>|\n             | \
    \                              |--+ First transaction\n             |        \
    \                       |  | is not a SYNC\n             |                   \
    \            |<-+\n             |                        2. 403 |\n          \
    \   |<<+++++++++++++++++++++++++++++|\n             |                        \
    \       |\n             |<-XX- CLOSE TCP CONNECTION -XX-|\n             |    \
    \                           |\n             | SIP BYE                       |\n\
    \             |------------------------------>|\n             |              \
    \                 |\n             .                               .\n        \
    \     .                               .\n          Figure 9: Incorrect First Transaction:\
    \ Sequence Diagram\n   This scenario demonstrates another common mistake that\
    \ could occur\n   when trying to set up a Control Channel.  In fact, [RFC6230]\
    \ mandates\n   that the first transaction after the COMEDIA negotiation be a SYNC\
    \ to\n   conclude the setup.  If the AS, instead of triggering a SYNC message\n\
    \   as expected, sends a different message to the MS (in the example\n   below,\
    \ it tries to send an <audit> message addressed to the IVR\n   Control Package),\
    \ the MS treats it like an error.  As a consequence,\n   the MS replies with a\
    \ framework-level 403 message (Forbidden) and,\n   just as before, closes the\
    \ TCP connection and waits for the related\n   SIP control dialog to be torn down.\n\
    \   The actual transaction is presented below.\n   1. AS -> MS (CFW CONTROL instead\
    \ of SYNC)\n   -----------------------------------------\n      CFW 101fbbd62c35\
    \ CONTROL\n      Control-Package: msc-ivr/1.0\n      Content-Type: application/msc-ivr+xml\n\
    \      Content-Length: 78\n      <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n         <audit/>\n      </mscivr>\n   2. AS <- MS (CFW 403 Forbidden)\n  \
    \ -------------------------------\n      CFW 101fbbd62c35 403\n"
- title: 6.  Use-Case Scenarios and Examples
  contents:
  - "6.  Use-Case Scenarios and Examples\n   The following scenarios have been chosen\
    \ for their common presence in\n   many rich real-time multimedia applications.\
    \  Each scenario is\n   depicted as a set of call flows involving both the SIP/SDP\
    \ signaling\n   (UACs<->AS<->MS) and the Control Channel communication (AS<->MS).\n\
    \   All the examples assume that a Control Channel has already been\n   correctly\
    \ established and SYNCed between the reference AS and MS.\n   Also, unless stated\
    \ otherwise, the same User Agent Client (UAC)\n   session is referenced in all\
    \ the examples that will be presented in\n   this document.  The UAC session is\
    \ assumed to have been created as\n   described in Figure 10:\n   UAC        \
    \          AS                          MS\n    |                   |         \
    \                  |\n    | INVITE (X)        |                           |\n\
    \    |------------------>|                           |\n    |     180 (Ringing)\
    \ |                           |\n    |<------------------|                   \
    \        |\n    |                   |--+                        |\n    |     \
    \              |  | Handle app(X)          |\n    |                   |<-+   \
    \                     |\n    |                   | INVITE (Y) as 3PCC        |\n\
    \    |                   |-------------------------->|\n    |                \
    \   |              100 (Trying) |\n    |                   |<--------------------------|\n\
    \    |                   |                           |--+ Negotiate media\n  \
    \  |                   |                           |  | with UAC; map\n    | \
    \                  |                           |<-+ tags and labels\n    |   \
    \                |                    200 OK |\n    |                   |<--------------------------|\n\
    \    |            200 OK |                           |\n    |<------------------|\
    \                           |\n    | ACK               |                     \
    \      |\n    |------------------>|                           |\n    |       \
    \            | ACK                       |\n    |                   |-------------------------->|\n\
    \    |                   |                           |\n    |<<###########################################>>|\n\
    \    |         RTP Media Stream(s) flowing           |\n    |<<###########################################>>|\n\
    \    |                   |                           |\n    .                \
    \   .                           .\n    .                   .                 \
    \          .\n                     Figure 10: 3PCC Sequence Diagram\n   Note well:\
    \ This is only an example of a possible approach involving a\n   Third-Party Call\
    \ Control (3PCC) negotiation among the UAC, the AS,\n   and the MS, and as such\
    \ is not at all to be considered the mandatory\n   way, nor best common practice,\
    \ in the presented scenario.  [RFC3725]\n   provides several different solutions\
    \ and many details about how 3PCC\n   can be realized, with pros and cons.  It\
    \ is also worth pointing out\n   that the two INVITEs displayed in the figure\
    \ are different SIP\n   dialogs.\n   The UAC first places a call to a SIP URI\
    \ for which the AS is\n   responsible.  The specific URI is not relevant to the\
    \ examples, since\n   the application logic behind the mapping between a URI and\
    \ the\n   service it provides is a matter that is important only to the AS.\n\
    \   So, a generic 'sip:mediactrlDemo@as.example.com' is used in all the\n   examples,\
    \ whereas the service this URI is associated with in the AS\n   logic is mapped\
    \ scenario by scenario to the case under examination.\n   The UAC INVITE is treated\
    \ as envisaged in [RFC5567].  The INVITE is\n   forwarded by the AS to the MS\
    \ via a third party (e.g., the 3PCC\n   approach), without the SDP provided by\
    \ the UAC being touched, in\n   order to have the session fully negotiated by\
    \ the MS according to its\n   description.  The MS matches the UAC's offer with\
    \ its own\n   capabilities and provides its answer in a 200 OK.  This answer is\n\
    \   then forwarded, again without the SDP contents being touched, by the\n   AS\
    \ to the target UAC.  This way, while the SIP signaling from the UAC\n   is terminated\
    \ in the AS, all the media would start flowing directly\n   between the UAC and\
    \ the MS.\n   As a consequence of this negotiation, one or more media connections\n\
    \   are created between the MS and the UAC.  They are then addressed,\n   when\
    \ needed, by the AS and the MS by means of the concatenation of\n   tags, as specified\
    \ in [RFC6230].  How the identifiers are created and\n   addressed is explained\
    \ by using the sample signaling provided in the\n   following lines.\n"
- title: 1. UAC -> AS (SIP INVITE)
  contents:
  - '1. UAC -> AS (SIP INVITE)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   INVITE sip:mediactrlDemo@as.example.com SIP/2.0\n\
    \   Via: SIP/2.0/UDP 203.0.113.2:5063;rport;branch=z9hG4bK1396873708\n   From:\
    \ <sip:lminiero@users.example.com>;tag=1153573888\n   To: <sip:mediactrlDemo@as.example.com>\n\
    \   Call-ID: 1355333098\n   CSeq: 20 INVITE\n   Contact: <sip:lminiero@203.0.113.2:5063>\n\
    \   Content-Type: application/sdp\n   Max-Forwards: 70\n   User-Agent: Linphone/2.1.1\
    \ (eXosip2/3.0.3)\n   Subject: Phone call\n   Expires: 120\n   Content-Length:\
    \ 330\n   v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n\
    \   c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0\
    \ PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101\
    \ telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n   a=rtpmap:98\
    \ H263-1998/90000\n   a=fmtp:98 CIF=1;QCIF=1\n"
- title: 2. UAC <- AS (SIP 180 Ringing)
  contents:
  - '2. UAC <- AS (SIP 180 Ringing)

    '
- title: '------------------------------'
  contents:
  - "------------------------------\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/UDP 203.0.113.2:5063;rport=5063;\
    \ \\\n                                                branch=z9hG4bK1396873708\n\
    \   Contact: <sip:mediactrlDemo@as.example.com>\n   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n\
    \   From: <sip:lminiero@users.example.com>;tag=1153573888\n   Call-ID: 1355333098\n\
    \   CSeq: 20 INVITE\n   Content-Length: 0\n"
- title: 3. AS -> MS (SIP INVITE)
  contents:
  - '3. AS -> MS (SIP INVITE)

    '
- title: '------------------------'
  contents:
  - "------------------------\n   INVITE sip:MediaServer@ms.example.net:5060;transport=UDP\
    \ SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n                branch=z9hG4bK-d8754z-8723e421ebc45f6b-1---d8754z-;rport\n\
    \   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n \
    \  To: <sip:MediaServer@ms.example.net:5060>\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n\
    \   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 INVITE\n\
    \   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type:\
    \ application/sdp\n   Content-Length: 330\n   v=0\n   o=lminiero 123456 654321\
    \ IN IP4 203.0.113.2\n   s=A conversation\n   c=IN IP4 203.0.113.2\n   t=0 0\n\
    \   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n\
    \   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101\
    \ 0-11\n   m=video 9078 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98\
    \ CIF=1;QCIF=1\n"
- title: 4. AS <- MS (SIP 100 Trying)
  contents:
  - '4. AS <- MS (SIP 100 Trying)

    '
- title: '----------------------------'
  contents:
  - "----------------------------\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/UDP 203.0.113.1:5060;\
    \ \\\n           branch=z9hG4bK-d8754z-8723e421ebc45f6b-1---d8754z-;rport=5060\n\
    \   To: <sip:MediaServer@ms.example.net:5060>;tag=6a900179\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n\
    \   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 INVITE\n\
    \   Content-Length: 0\n"
- title: 5. AS <- MS (SIP 200 OK)
  contents:
  - '5. AS <- MS (SIP 200 OK)

    '
- title: '------------------------'
  contents:
  - "------------------------\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 203.0.113.1:5060;\
    \ \\\n           branch=z9hG4bK-d8754z-8723e421ebc45f6b-1---d8754z-;rport=5060\n\
    \   Contact: <sip:MediaServer@ms.example.net:5060>\n   To: <sip:MediaServer@ms.example.net:5060>;tag=6a900179\n\
    \   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n   Call-ID:\
    \ NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 INVITE\n   Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n\
    \   Content-Length: 374\n   v=0\n   o=lminiero 123456 654322 IN IP4 ms.example.net\n\
    \   s=MediaCtrl\n   c=IN IP4 ms.example.net\n   t=0 0\n   m=audio 63442 RTP/AVP\
    \ 0 3 8 101\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:3 GSM/8000\n   a=rtpmap:8 PCMA/8000\n\
    \   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101 0-15\n   a=ptime:20\n   a=label:7eda834\n\
    \   m=video 33468 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=2\n\
    \   a=label:0132ca2\n"
- title: 6. UAC <- AS (SIP 200 OK)
  contents:
  - '6. UAC <- AS (SIP 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 203.0.113.2:5063;rport=5063;\
    \ \\\n                                                branch=z9hG4bK1396873708\n\
    \   Contact: <sip:mediactrlDemo@as.example.com>\n   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n\
    \   From: <sip:lminiero@users.example.com>;tag=1153573888\n   Call-ID: 1355333098\n\
    \   CSeq: 20 INVITE\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n\
    \   Content-Type: application/sdp\n   Content-Length: 374\n   v=0\n   o=lminiero\
    \ 123456 654322 IN IP4 ms.example.net\n   s=MediaCtrl\n   c=IN IP4 ms.example.net\n\
    \   t=0 0\n   m=audio 63442 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:3\
    \ GSM/8000\n   a=rtpmap:8 PCMA/8000\n   a=rtpmap:101 telephone-event/8000\n  \
    \ a=fmtp:101 0-15\n   a=ptime:20\n   a=label:7eda834\n   m=video 33468 RTP/AVP\
    \ 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=2\n   a=label:0132ca2\n"
- title: 7. UAC -> AS (SIP ACK)
  contents:
  - '7. UAC -> AS (SIP ACK)

    '
- title: '----------------------'
  contents:
  - "----------------------\n   ACK sip:mediactrlDemo@as.example.com SIP/2.0\n   Via:\
    \ SIP/2.0/UDP 203.0.113.2:5063;rport;branch=z9hG4bK1113338059\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n\
    \   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   Call-ID: 1355333098\n\
    \   CSeq: 20 ACK\n   Contact: <sip:lminiero@203.0.113.2:5063>\n   Max-Forwards:\
    \ 70\n   User-Agent: Linphone/2.1.1 (eXosip2/3.0.3)\n   Content-Length: 0\n"
- title: 8. AS -> MS (SIP ACK)
  contents:
  - '8. AS -> MS (SIP ACK)

    '
- title: '---------------------'
  contents:
  - "---------------------\n   ACK sip:MediaServer@ms.example.net:5060;transport=UDP\
    \ SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n                branch=z9hG4bK-d8754z-5246003419ccd662-1---d8754z-;rport\n\
    \   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n \
    \  To: <sip:MediaServer@ms.example.net:5060;tag=6a900179\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n\
    \   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 ACK\n  \
    \ Content-Length: 0\n   As a result of the 3PCC negotiation just presented, the\
    \ following\n   relevant information is retrieved:\n   1.  The 'From' and 'To'\
    \ tags (10514b7f and 6a900179, respectively) of\n       the AS<->MS session:\n\
    \     From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n       \
    \                                                    ^^^^^^^^\n     To: <sip:MediaServer@ms.example.net:5060>;tag=6a900179\n\
    \                                                   ^^^^^^^^\n   2.  The labels\
    \ [RFC4574] associated with the negotiated media\n       connections, in this\
    \ case an audio stream (7eda834) and a video\n       stream (0132ca2):\n     \
    \ m=audio 63442 RTP/AVP 0 3 8 101\n      [..]\n      a=label:7eda834\n       \
    \       ^^^^^^^\n      m=video 33468 RTP/AVP 98\n      [..]\n      a=label:0132ca2\n\
    \              ^^^^^^^\n   These four identifiers allow the AS and MS to univocally\
    \ and\n   unambiguously address to each other the connections associated with\n\
    \   the related UAC.  Specifically:\n   1.  10514b7f:6a900179, the concatenation\
    \ of the 'From' and 'To' tags\n       through a colon (':') token, addresses all\
    \ the media connections\n       between the MS and the UAC.\n   2.  10514b7f:6a900179\
    \ <-> 7eda834, the association of the previous\n       value with the label attribute,\
    \ addresses only one of the media\n       connections of the UAC session (in this\
    \ case, the audio stream).\n       Since, as will be made clearer in the example\
    \ scenarios, the\n       explicit identifiers in requests can only address 'from:tag'\n\
    \       connections, an additional mechanism will be required to have a\n    \
    \   finer control of individual media streams (i.e., by means of the\n       <stream>\
    \ element in package-level requests).\n   The mapping that the AS makes between\
    \ the UACs<->AS and the AS<->MS\n   SIP dialogs is out of scope for this document.\
    \  We just assume that\n   the AS knows how to address the right connection according\
    \ to the\n   related session it has with a UAC (e.g., to play an announcement\
    \ to a\n   specific UAC).  This is obviously very important, since the AS is\n\
    \   responsible for all the business logic of the multimedia application\n   it\
    \ provides.\n"
- title: 6.1.  Echo Test
  contents:
  - "6.1.  Echo Test\n   The echo test is the simplest example scenario that can be\
    \ achieved\n   by means of an MS.  It basically consists of a UAC directly or\n\
    \   indirectly \"talking\" to itself.  A media perspective of such a\n   scenario\
    \ is depicted in Figure 11.\n              +-------+  A (RTP)                \
    \ +--------+\n              |  UAC  |=========================>| Media  |\n  \
    \            |   A   |<=========================| Server |\n              +-------+\
    \                 A (RTP)  +--------+\n                  Figure 11: Echo Test:\
    \ Media Perspective\n   From the framework point of view, when the UAC's leg is\
    \ not attached\n   to anything yet, what appears is shown in Figure 12: since\
    \ there's no\n   connection involving the UAC yet, the frames it might be sending\
    \ are\n   discarded, and nothing is sent to it (except for silence, if its\n \
    \  transmission is requested).\n                                           MS\n\
    \                                        +------+\n                          \
    \ UAC          |      |\n                            o----->>-------x   |\n  \
    \                          o.....<<.......x   |\n                            \
    \            |      |\n                                        +------+\n    \
    \         Figure 12: Echo Test: UAC Media Leg Not Attached\n   Starting from these\
    \ considerations, two different approaches to the\n   Echo Test scenario are explored\
    \ in this document:\n   1.  a Direct Echo Test approach, where the UAC directly\
    \ talks to\n       itself.\n   2.  a Recording-based Echo Test approach, where\
    \ the UAC indirectly\n       talks to itself.\n"
- title: 6.1.1.  Direct Echo Test
  contents:
  - "6.1.1.  Direct Echo Test\n   In the Direct Echo Test approach, the UAC is directly\
    \ connected to\n   itself.  This means that, as depicted in Figure 13, each frame\
    \ the MS\n   receives from the UAC is sent back to it in real time.\n        \
    \                                   MS\n                                     \
    \   +------+\n                           UAC          |      |\n             \
    \               o----->>-------@   |\n                            o-----<<-------@\
    \   |\n                                        |      |\n                    \
    \                    +------+\n            Figure 13: Echo Test: Direct Echo (Self-Connection)\n\
    \   In the framework, this can be achieved by means of the Mixer Control\n   Package\
    \ [RFC6505], which is in charge of joining connections and\n   conferences.\n\
    \   A sequence diagram of a potential transaction is depicted in\n   Figure 14:\n\
    \  UAC                      AS                                 MS\n   |      \
    \                 |                                  |\n   |                 \
    \      | 1. CONTROL (join UAC to itself)  |\n   |                       |++++++++++++++++++++++++++++++++>>|\n\
    \   |                       |                                  |--+ self-\n  \
    \ |                       |                                  |  | join\n   | \
    \                      |                        2. 200 OK |<-+ UAC\n   |     \
    \                  |<<++++++++++++++++++++++++++++++++|\n   |                \
    \       |                                  |\n   |<<######################################################>>|\n\
    \   |         Everything is now echoed back to the UAC         |\n   |<<######################################################>>|\n\
    \   |                       |                                  |\n   .       \
    \                .                                  .\n   .                  \
    \     .                                  .\n             Figure 14: Self-Connection:\
    \ Framework Transaction\n   The transaction steps have been numbered and are explained\
    \ below:\n   o  The AS requests the joining of the connection to itself by sending\n\
    \      to the MS a CONTROL request (1) that is specifically meant for the\n  \
    \    conferencing Control Package (msc-mixer/1.0).  A <join> request is\n    \
    \  used for this purpose, and since the connection must be attached\n      to\
    \ itself, both id1 and id2 attributes are set to the same value,\n      i.e.,\
    \ the connectionid.\n   o  The MS, having checked the validity of the request,\
    \ enforces the\n      joining of the connection to itself.  This means that all\
    \ the\n      frames sent by the UAC are sent back to it.  To report the result\n\
    \      of the operation, the MS sends a 200 OK (2) in reply to the AS,\n     \
    \ thus ending the transaction.  The transaction ended successfully,\n      as\
    \ indicated by the body of the message (the 200 status code in\n      the <response>\
    \ tag).\n   The complete transaction -- that is, the full bodies of the exchanged\n\
    \   messages -- is provided in the following lines:\n   1. AS -> MS (CFW CONTROL)\n\
    \   -------------------------\n      CFW 4fed9bf147e2 CONTROL\n      Control-Package:\
    \ msc-mixer/1.0\n      Content-Type: application/msc-mixer+xml\n      Content-Length:\
    \ 130\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <join id1=\"10514b7f:6a900179\" id2=\"10514b7f:6a900179\"/>\n    \
    \  </mscmixer>\n   2. AS <- MS (CFW 200 OK)\n   ------------------------\n   \
    \   CFW 4fed9bf147e2 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n"
- title: 6.1.2.  Echo Test Based on Recording
  contents:
  - "6.1.2.  Echo Test Based on Recording\n   In the Recording-based Echo Test approach,\
    \ the UAC is NOT directly\n   connected to itself, but rather indirectly.  This\
    \ means that, as\n   depicted in Figure 15, each frame the MS receives from the\
    \ UAC is\n   first recorded; then, when the recording process is ended, the whole\n\
    \   recorded frames are played back to the UAC as an announcement.\n         \
    \                       MS\n                             +------+\n          \
    \      UAC          |      |\n                 o----->>-------+~~~~~> (recording.wav)\
    \ ~~+\n                 o-----<<-------+   |                     |\n         \
    \                    |  ^   |                     v\n                        \
    \     +--|---+                     |\n                                +~~~~~~~~~~~<<~~~~~~~~~~~~+\n\
    \                 Figure 15: Echo Test: Recording Involved\n   In the framework,\
    \ this can be achieved by means of the IVR Control\n   Package [RFC6231], which\
    \ is in charge of both the recording and the\n   playout phases.  However, the\
    \ whole scenario cannot be accomplished\n   in a single transaction; at least\
    \ two steps, in fact, need to be\n   performed:\n   1.  First, a recording (preceded\
    \ by an announcement, if requested)\n       must take place.\n   2.  Then, a playout\
    \ of the previously recorded media must occur.\n   This means that two separate\
    \ transactions need to be invoked.  A\n   sequence diagram of a potential multiple\
    \ transaction is depicted in\n   Figure 16:\n UAC                      AS    \
    \                             MS\n  |                       |                \
    \                  |\n  |                       | A1. CONTROL (record for 10s)\
    \     |\n  |                       |++++++++++++++++++++++++++++++++>>|\n  | \
    \                      |                          A2. 202 |\n  |             \
    \          |<<++++++++++++++++++++++++++++++++| prepare &\n  |               \
    \        |                                  |--+ start\n  |                  \
    \     |                                  |  | the\n  |                       |\
    \           A3. REPORT (terminate) |<-+ dialog\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       | A4. 200 OK                       |\n  |         \
    \              |++++++++++++++++++++++++++++++++>>|\n  |                     \
    \  |                                  |\n  |<<########################################################|\n\
    \  |           \"This is an echo test: say something\"          |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |########################################################>>|\n\
    \  |          10 s of audio from the UAC are recorded         |--+ save\n  |########################################################>>|\
    \  | in a\n  |                       |                                  |<-+ file\n\
    \  |                       |       B1. CONTROL (<recordinfo>) |\n  |         \
    \              |<<++++++++++++++++++++++++++++++++|\n  |       Use recorded +--|\
    \ B2. 200 OK                       |\n  |       file to play |  |++++++++++++++++++++++++++++++++>>|\n\
    \  |       announcement +->|                                  |\n  |         \
    \              | C1. CONTROL (play recorded)      |\n  |                     \
    \  |++++++++++++++++++++++++++++++++>>|\n  |                       |         \
    \                 C2. 202 |\n  |                       |<<++++++++++++++++++++++++++++++++|\
    \ prepare &\n  |                       |                                  |--+\
    \ start\n  |                       |                                  |  | the\n\
    \  |                       |           C3. REPORT (terminate) |<-+ dialog\n  |\
    \                       |<<++++++++++++++++++++++++++++++++|\n  |            \
    \           | C4. 200 OK                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |         \"Can you hear me? It's me, UAC, talking\"         |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |         \
    \              |       D1. CONTROL (<promptinfo>) |\n  |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n  |                       | D2. 200 OK\
    \                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  .         \
    \              .                                  .\n  .                     \
    \  .                                  .\n        Figure 16: Recording-Based Echo:\
    \ Two Framework Transactions\n   The first obvious difference that stands out\
    \ when looking at the\n   diagram is that, unlike the Direct Echo scenario, the\
    \ MS does not\n   reply with a 200 message to the CONTROL request originated by\
    \ the AS.\n   Instead, a 202 provisional message is sent first, followed by a\n\
    \   REPORT message.  The 202+REPORT(s) mechanism is used whenever the MS\n   wants\
    \ to tell the AS that the requested operation might take more\n   time than the\
    \ limit specified in the definition of the Control\n   Package.  So, while the\
    \ <join> operation in the Direct Echo scenario\n   was expected to be fulfilled\
    \ in a very short time, the IVR request\n   was assumed to last longer.  A 202\
    \ message provides a timeout value\n   and tells the AS to wait a bit, since the\
    \ preparation of the dialog\n   might not happen immediately.  In this example,\
    \ the preparation ends\n   before the timeout, and so the transaction is concluded\
    \ with a\n   'REPORT terminate', which reports the end of the transaction (as\
    \ did\n   the 200 message in the previous example).  If the preparation took\n\
    \   longer than the timeout, an additional 'REPORT update' would have\n   been\
    \ sent with a new timeout value, and so on, until completion by\n   means of a\
    \ 'REPORT terminate'.\n   Note that the REPORT mechanism depicted is only shown\
    \ to clarify its\n   behavior.  In fact, the 202+REPORT mechanism is assumed to\
    \ be\n   involved only when the requested transaction is expected to take a\n\
    \   long time (e.g., retrieving a large media file for a prompt from an\n   external\
    \ server).  In this scenario, the transaction would be\n   prepared in much less\
    \ time and as a consequence would very likely be\n   completed within the context\
    \ of a simple CONTROL+200 request/\n   response.  The following scenarios will\
    \ only involve 202+REPORTs when\n   they are strictly necessary.\n   Regarding\
    \ the dialog itself, note how the AS-originated CONTROL\n   transactions are terminated\
    \ as soon as the requested dialogs start.\n   As specified in [RFC6231], the MS\
    \ uses a framework CONTROL message to\n   report the result of the dialog and\
    \ how it has proceeded.  The two\n   transactions (the AS-generated CONTROL request\
    \ and the MS-generated\n   CONTROL event) are correlated by means of the associated\
    \ dialog\n   identifier, as explained below.  As before, the transaction steps\n\
    \   have been numbered.  The two transactions are distinguished by the\n   preceding\
    \ letter (A,B=recording, C,D=playout).\n   o  The AS, as a first transaction,\
    \ invokes a recording on the UAC\n      connection by means of a CONTROL request\
    \ (A1).  The body is for\n      the IVR package (msc-ivr/1.0) and requests the\
    \ start\n      (<dialogstart>) of a new recording context (<record>).  The\n \
    \     recording must be preceded by an announcement (<prompt>), must not\n   \
    \   last longer than 10 s (maxtime), and cannot be interrupted by a\n      DTMF\
    \ tone (dtmfterm=false).  This is only done once (the missing\n      repeatCount\
    \ attribute is 1 by default for a <dialog>), which means\n      that if the recording\
    \ does not succeed the first time, the\n      transaction must fail.  A video\
    \ recording is requested\n      (considering that the associated connection includes\
    \ both audio\n      and video and no restriction is enforced on streams to record),\n\
    \      which is to be fed by both of the negotiated media streams.  A\n      beep\
    \ has to be played (beep=true) right before the recording\n      starts, to notify\
    \ the UAC.\n   o  As seen before, the MS sends a provisional 202 response to let\
    \ the\n      AS know that the operation might need some time.\n   o  In the meantime,\
    \ the MS prepares the dialog (e.g., by retrieving\n      the announcement file,\
    \ for which an HTTP URL is provided, and by\n      checking that the request is\
    \ well formed) and if all is fine it\n      starts it, notifying the AS with a\
    \ new REPORT (A3) with a\n      terminated status.  As explained previously, interlocutory\
    \ REPORT\n      messages with an update status would have been sent if the\n \
    \     preparation took longer than the timeout provided in the 202\n      message\
    \ (e.g., if retrieving the resource via HTTP took longer\n      than expected).\
    \  Once the dialog has been prepared and started,\n      the UAC connection is\
    \ then passed to the IVR package, which first\n      plays the announcement on\
    \ the connection, followed by a beep, and\n      then records all the incoming\
    \ frames to a buffer.  The MS also\n      provides the AS with a unique dialog\
    \ identifier (dialogid) that\n      will be used in all subsequent event notifications\
    \ concerning the\n      dialog it refers to.\n   o  The AS acks the latest REPORT\
    \ (A4), thus terminating this\n      transaction, and waits for the results.\n\
    \   o  Once the recording is over, the MS prepares a notification CONTROL\n  \
    \    (B1).  The <event> body is prepared with an explicit reference to\n     \
    \ the previously provided dialog identifier, in order to make the AS\n      aware\
    \ of the fact that the notification is related to that\n      specific dialog.\
    \  The event body is then completed with the\n      recording-related information\
    \ (<recordinfo>), in this case the\n      path to the recorded file (here, an\
    \ HTTP URL) that can be used by\n      the AS for anything it needs.  The payload\
    \ also contains\n      information about the prompt (<promptinfo>), which is,\
    \ however,\n      not relevant to the scenario.\n   o  The AS concludes this first\
    \ recording transaction by acking the\n      CONTROL event (B2).\n   Now that\
    \ the first transaction has ended, the AS has the 10-s\n   recording of the UAC\
    \ talking and can let the UAC hear it by having\n   the MS play it for the UAC\
    \ as an announcement:\n   o  In the second transaction, the AS invokes a playout\
    \ on the UAC\n      connection by means of a new CONTROL request (C1).  The body\
    \ is\n      once again for the IVR package (msc-ivr/1.0), but this time it\n \
    \     requests the start (<dialogstart>) of a new announcement context\n     \
    \ (<prompt>).  The file to be played is the file that was recorded\n      before\
    \ (<media>).\n   o  Again, the usual provisional 202 (C2) takes place.\n   o \
    \ In the meantime, the MS prepares and starts the new dialog, and\n      notifies\
    \ the AS with a new REPORT (C3) with a terminated status.\n      The connection\
    \ is then passed to the IVR package, which plays the\n      file on it.\n   o\
    \  The AS acks the terminating REPORT (C4), now waiting for the\n      announcement\
    \ to end.\n   o  Once the playout is over, the MS sends a CONTROL event (D1) that\n\
    \      contains in its body (<promptinfo>) information about the just-\n     \
    \ concluded announcement.  As before, the proper dialogid is used as\n      a\
    \ reference to the correct dialog.\n   o  The AS concludes this second and last\
    \ transaction by acking the\n      CONTROL event (D2).\n   As in the previous\
    \ paragraph, the whole CFW interaction is provided\n   for a more in-depth evaluation\
    \ of the protocol interaction.\n   A1. AS -> MS (CFW CONTROL, record)\n   ----------------------------------\n\
    \      CFW 796d83aa1ce4 CONTROL\n      Control-Package: msc-ivr/1.0\n      Content-Type:\
    \ application/msc-ivr+xml\n      Content-Length: 265\n      <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <dialogstart connectionid=\"\
    10514b7f:6a900179\">\n          <dialog>\n            <prompt>\n             \
    \ <media\n                loc=\"http://www.example.com/demo/echorecord.mpg\"/>\n\
    \            </prompt>\n            <record beep=\"true\" maxtime=\"10s\"/>\n\
    \          </dialog>\n        </dialogstart>\n      </mscivr>\n   A2. AS <- MS\
    \ (CFW 202)\n   ----------------------\n      CFW 796d83aa1ce4 202\n      Timeout:\
    \ 5\n   A3. AS <- MS (CFW REPORT terminate)\n   -----------------------------------\n\
    \      CFW 796d83aa1ce4 REPORT\n      Seq: 1\n      Status: terminate\n      Timeout:\
    \ 25\n      Content-Type: application/msc-ivr+xml\n      Content-Length: 137\n\
    \      <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n   \
    \      <response status=\"200\" reason=\"Dialog started\"\n                  \
    \ dialogid=\"68d6569\"/>\n      </mscivr>\n   A4. AS -> MS (CFW 200, ACK to 'REPORT\
    \ terminate')\n   -------------------------------------------------\n      CFW\
    \ 796d83aa1ce4 200\n      Seq: 1\n   B1. AS <- MS (CFW CONTROL event)\n   --------------------------------\n\
    \      CFW 0eb1678c0bfc CONTROL\n      Control-Package: msc-ivr/1.0\n      Content-Type:\
    \ application/msc-ivr+xml\n      Content-Length: 403\n      <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <event dialogid=\"68d6569\"\
    >\n          <dialogexit status=\"1\" reason=\"Dialog successfully completed\"\
    >\n            <promptinfo duration=\"9987\" termmode=\"completed\"/>\n      \
    \      <recordinfo duration=\"10017\" termmode=\"maxtime\">\n              <mediainfo\n\
    \     loc=\"http://www.example.net/recordings/recording-68d6569.mpg\"\n     type=\"\
    video/mpeg\" size=\"591872\"/>\n            </recordinfo>\n          </dialogexit>\n\
    \        </event>\n      </mscivr>\n   B2. AS -> MS (CFW 200, ACK to 'CONTROL\
    \ event')\n   ----------------------------------------------\n      CFW 0eb1678c0bfc\
    \ 200\n   C1. AS -> MS (CFW CONTROL, play)\n   --------------------------------\n\
    \      CFW 1632eead7e3b CONTROL\n      Control-Package: msc-ivr/1.0\n      Content-Type:\
    \ application/msc-ivr+xml\n      Content-Length: 241\n      <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <dialogstart connectionid=\"\
    10514b7f:6a900179\">\n          <dialog>\n            <prompt>\n             \
    \ <media\n     loc=\"http://www.example.net/recordings/recording-68d6569.mpg\"\
    />\n            </prompt>\n          </dialog>\n        </dialogstart>\n     \
    \ </mscivr>\n   C2. AS <- MS (CFW 202)\n   ----------------------\n      CFW 1632eead7e3b\
    \ 202\n      Timeout: 5\n   C3. AS <- MS (CFW REPORT terminate)\n   -----------------------------------\n\
    \      CFW 1632eead7e3b REPORT\n      Seq: 1\n      Status: terminate\n      Timeout:\
    \ 25\n      Content-Type: application/msc-ivr+xml\n      Content-Length: 137\n\
    \      <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n   \
    \      <response status=\"200\" reason=\"Dialog started\"\n                  \
    \ dialogid=\"5f5cb45\"/>\n      </mscivr>\n   C4. AS -> MS (CFW 200, ACK to 'REPORT\
    \ terminate')\n   -------------------------------------------------\n      CFW\
    \ 1632eead7e3b 200\n      Seq: 1\n   D1. AS <- MS (CFW CONTROL event)\n   --------------------------------\n\
    \      CFW 502a5fd83db8 CONTROL\n      Control-Package: msc-ivr/1.0\n      Content-Type:\
    \ application/msc-ivr+xml\n      Content-Length: 230\n      <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <event dialogid=\"5f5cb45\"\
    >\n          <dialogexit status=\"1\" reason=\"Dialog successfully completed\"\
    >\n            <promptinfo duration=\"10366\" termmode=\"completed\"/>\n     \
    \     </dialogexit>\n        </event>\n      </mscivr>\n   D2. AS -> MS (CFW 200,\
    \ ACK to 'CONTROL event')\n   ----------------------------------------------\n\
    \      CFW 502a5fd83db8 200\n"
- title: 6.2.  Phone Call
  contents:
  - "6.2.  Phone Call\n   Another scenario that might involve the interaction between\
    \ an AS and\n   an MS is the classic phone call between two UACs.  In fact, even\n\
    \   though the most straightforward way to achieve this would be to let\n   the\
    \ UACs negotiate the session and the media to be used between them,\n   there\
    \ are cases when the services provided by an MS might also prove\n   useful for\
    \ such phone calls.\n   One of these cases is when the two UACs have no common\
    \ supported\n   codecs: having the two UACs directly negotiate the session would\n\
    \   result in a session with no available media.  Involving the MS as a\n   transcoder\
    \ would in this case still allow the two UACs to\n   communicate.  Another interesting\
    \ case is when the AS (or any other\n   entity on whose behalf the AS is working)\
    \ is interested in\n   manipulating or monitoring the media session between the\
    \ UACs, e.g.,\n   to record the conversation.  A similar scenario will be dealt\
    \ with in\n   Section 6.2.2.\n   Before looking at how such a scenario might be\
    \ accomplished by means\n   of the Media Control Channel Framework, it is worth\
    \ mentioning what\n   the SIP signaling involving all the interested parties might\
    \ look\n   like.  In fact, in such a scenario, a 3PCC approach is absolutely\n\
    \   needed.  An example is provided in Figure 17.  Again, the presented\n   example\
    \ is not at all to be considered best common practice when 3PCC\n   is needed\
    \ in a MEDIACTRL-based framework.  It is only described in\n   order to help the\
    \ reader more easily understand what the requirements\n   are on the MS side,\
    \ and as a consequence what information might be\n   required.  [RFC3725] provides\
    \ a much more detailed overview on 3PCC\n   patterns in several use cases.  Only\
    \ an explanatory sequence diagram\n   is provided, without delving into the details\
    \ of the exchanged SIP\n   messages.\n   UAC(1)        UAC(2)                \
    \  AS                          MS\n     |             |                     |\
    \                           |\n     | INVITE (offer A)                  |    \
    \                       |\n     | Call-Id: A  |                     |        \
    \                   |\n     |---------------------------------->|            \
    \               |\n     |             |          100 Trying |                \
    \           |\n     |             |          Call-Id: A |                    \
    \       |\n     |<----------------------------------|                        \
    \   |\n     |             |   INVITE (no offer) |                           |\n\
    \     |             |   Call-Id: B        |                           |\n    \
    \ |             |<--------------------|                           |\n     |  \
    \           | 180 Ringing         |                           |\n     |      \
    \       | Call-Id: B          |                           |\n     |          \
    \   |-------------------->|                           |\n     |             |\
    \         180 Ringing |                           |\n     |             |    \
    \      Call-Id: A |                           |\n     |<----------------------------------|\
    \                           |\n     |             |                     | INVITE\
    \ (offer A)          |\n     |             |                     | Call-Id: C\
    \                |\n     |             |                     |-------------------------->|\n\
    \     |             |                     |         200 OK (offer A') |\n    \
    \ |             |                     |         Call-Id: C        |\n     |  \
    \           |                     |<--------------------------|\n     |      \
    \       |                     | ACK                       |\n     |          \
    \   |                     | Call-Id: C                |\n     |             |\
    \                     |-------------------------->|\n     |             | 200\
    \ OK (offer B)    |                           |\n     |             | Call-Id:\
    \ B          |                           |\n     |             |-------------------->|\
    \                           |\n     |             |                     | INVITE\
    \ (offer B)          |\n     |             |                     | Call-Id: D\
    \                |\n     |             |                     |-------------------------->|\n\
    \     |             |                     |         200 OK (offer B') |\n    \
    \ |             |                     |         Call-Id: D        |\n     |  \
    \           |                     |<--------------------------|\n     |      \
    \       |                     | ACK                       |\n     |          \
    \   |                     | Call-Id: D                |\n     |             |\
    \                     |-------------------------->|\n     |             |    \
    \  ACK (offer B') |                           |\n     |             |      Call-Id:\
    \ B     |                           |\n     |             |<--------------------|\
    \                           |\n     |             |   200 OK (offer A') |    \
    \                       |\n     |             |   Call-Id: A        |        \
    \                   |\n     |<----------------------------------|            \
    \               |\n     | ACK         |                     |                \
    \           |\n     | Call-Id: A  |                     |                    \
    \       |\n     |---------------------------------->|                        \
    \   |\n     |             |                     |                           |\n\
    \     .             .                     .                           .\n    \
    \ .             .                     .                           .\n        \
    \          Figure 17: Phone Call: Example of 3PCC\n   In this example, UAC1 wants\
    \ to place a phone call to UAC2.  To do so,\n   it sends an INVITE to the AS with\
    \ its offer A.  The AS sends an\n   offerless INVITE to UAC2.  When UAC2 responds\
    \ with a 180, the same\n   message is forwarded by the AS to UAC1 to notify it\
    \ that the callee\n   is ringing.  In the meantime, the AS also adds a leg to\
    \ the MS for\n   UAC1, as explained at the beginning of Section 6.  To do so,\
    \ it of\n   course uses the offer A that UAC1 made.  Once UAC2 accepts the call\n\
    \   by providing its own offer B in the 200, the AS also adds a leg for\n   offer\
    \ B to the MS.  At this point, the negotiation can be completed\n   by providing\
    \ the two UACs with the SDP answer negotiated by the MS\n   with them (A' and\
    \ B', respectively).\n   Of course, this is only one way to deal with the signaling\
    \ and shall\n   not be considered an absolutely mandatory approach.\n   Once the\
    \ negotiation is over, the two UACs are not in communication\n   yet.  In fact,\
    \ it's up to the AS now to actively trigger the MS to\n   somehow attach their\
    \ media streams to each other, by referring to the\n   connection identifiers\
    \ associated with the UACs as explained\n   previously.  This document presents\
    \ two different approaches that\n   might be followed, according to what needs\
    \ to be accomplished.  A\n   generic media perspective of the phone call scenario\
    \ is depicted in\n   Figure 18.  The MS is basically in the media path between\
    \ the\n   two UACs.\n   +-------+  UAC1 (RTP)        +--------+  UAC1 (RTP)  \
    \      +-------+\n   |  UAC  |===================>| Media  |===================>|\
    \  UAC  |\n   |   1   |<===================| Server |<===================|   2\
    \   |\n   +-------+        UAC2 (RTP)  +--------+        UAC2 (RTP)  +-------+\n\
    \                 Figure 18: Phone Call: Media Perspective\n   From the framework\
    \ point of view, when the UACs' legs are not\n   attached to anything yet, what\
    \ appears is shown in Figure 19: since\n   there are no connections involving\
    \ the UACs yet, the frames they\n   might be sending are discarded, and nothing\
    \ is sent to them (except\n   for silence, if its transmission is requested).\n\
    \                                     MS\n                              +--------------+\n\
    \                UAC 1         |              |         UAC 2\n              \
    \    o----->>-------x        x.......>>.....o\n                  o.....<<.......x\
    \        x-------<<-----o\n                              |              |\n  \
    \                            +--------------+\n             Figure 19: Phone Call:\
    \ UAC Media Leg Not Attached\n"
- title: 6.2.1.  Direct Connection
  contents:
  - "6.2.1.  Direct Connection\n   The Direct Connection approach is the easiest,\
    \ and a more\n   straightforward, approach to get the phone call between the two\
    \ UACs\n   to work.  The idea is basically the same as that of the Direct Echo\n\
    \   approach.  A <join> directive is used to directly attach one UAC to\n   the\
    \ other, by exploiting the MS to only deal with the transcoding/\n   adaption\
    \ of the flowing frames, if needed.\n   This approach is depicted in Figure 20.\n\
    \                                     MS\n                              +--------------+\n\
    \                UAC 1         |              |         UAC 2\n              \
    \    o----->>-------+~~~>>~~~+------->>-----o\n                  o-----<<-------+~~~<<~~~+-------<<-----o\n\
    \                              |              |\n                            \
    \  +--------------+\n                 Figure 20: Phone Call: Direct Connection\n\
    \  UAC1       UAC2         AS                                   MS\n   |     \
    \      |          |                                    |\n   |           |   \
    \       | 1. CONTROL (join UAC1 to UAC2)     |\n   |           |          |++++++++++++++++++++++++++++++++++>>|\n\
    \   |           |          |                                    |--+ join\n  \
    \ |           |          |                                    |  | UAC1\n   |\
    \           |          |                          2. 200 OK |<-+ UAC2\n   |  \
    \         |          |<<++++++++++++++++++++++++++++++++++|\n   |           |\
    \          |                                    |\n   |<<#######################################################>>|\n\
    \   |                UAC1 can hear UAC2 talking                 |\n   |<<#######################################################>>|\n\
    \   |           |          |                                    |\n   |      \
    \     |<<###########################################>>|\n   |           |    \
    \      UAC2 can hear UAC1 talking           |\n   |           |<<###########################################>>|\n\
    \   |           |          |                                    |\n   |<*talking*>|\
    \          |                                    |\n   .           .          .\
    \                                    .\n   .           .          .          \
    \                          .\n           Figure 21: Direct Connection: Framework\
    \ Transactions\n   The framework transactions needed to accomplish this scenario\
    \ are\n   very trivial and easy to understand.  They are basically the same as\n\
    \   those presented in the Direct Echo Test scenario; the only difference\n  \
    \ is in the provided identifiers.  In fact, this time the MS is not\n   supposed\
    \ to attach the UACs' media connections to themselves but has\n   to join the\
    \ media connections of two different UACs, i.e., UAC1 and\n   UAC2.  This means\
    \ that in this transaction, id1 and i2 will have to\n   address the media connections\
    \ of UAC1 and UAC2.  In the case of a\n   successful transaction, the MS takes\
    \ care of forwarding all media\n   coming from UAC1 to UAC2 and vice versa, transparently\
    \ taking care of\n   any required transcoding steps, if necessary.\n   1. AS ->\
    \ MS (CFW CONTROL)\n   -------------------------\n      CFW 0600855d24c8 CONTROL\n\
    \      Control-Package: msc-mixer/1.0\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 130\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <join id1=\"10514b7f:6a900179\" id2=\"e1e1427c:1c998d22\"/>\n    \
    \  </mscmixer>\n   2. AS <- MS (CFW 200 OK)\n   ------------------------\n   \
    \   CFW 0600855d24c8 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   Such a simple approach has its drawbacks.  For instance, with such an\n  \
    \ approach, recording a conversation between two users might be tricky\n   to\
    \ accomplish.  In fact, since no mixing would be involved, only the\n   single\
    \ connections (UAC1<->MS and UAC2<->MS) could be recorded.  If\n   the AS wants\
    \ a conversation-recording service to be provided anyway,\n   it needs additional\
    \ business logic on its side.  An example of such a\n   use case is provided in\
    \ Section 6.2.3.\n"
- title: 6.2.2.  Conference-Based Approach
  contents:
  - "6.2.2.  Conference-Based Approach\n   The approach described in Section 6.2.1\
    \ surely works for a basic\n   phone call but, as explained previously, might\
    \ have some drawbacks\n   whenever more advanced features are needed.  For instance,\
    \ one can't\n   record the whole conversation -- only the single connections --\
    \ since\n   no mixing is involved.  Additionally, even the single task of playing\n\
    \   an announcement over the conversation could be complex, especially if\n  \
    \ the MS does not support implicit mixing over media connections.  For\n   this\
    \ reason, in more advanced cases a different approach might be\n   taken, like\
    \ the conference-based approach described in this section.\n   The idea is to\
    \ use a mixing entity in the MS that acts as a bridge\n   between the two UACs.\
    \  The presence of this entity allows more\n   customization of what needs to\
    \ be done with the conversation, like\n   the recording of the conversation that\
    \ has been provided as an\n   example.  The approach is depicted in Figure 22.\
    \  The mixing\n   functionality in the MS will be described in more detail in\
    \ the\n   following section (which deals with many conference-related\n   scenarios),\
    \ so only some hints will be provided here for basic\n   comprehension of the\
    \ approach.\n                                      MS\n                      \
    \        +---------------+\n                UAC A         |               |  \
    \       UAC B\n                  o----->>-------+~~>{#}::>+:::::::>>:::::o\n \
    \                 o:::::<<:::::::+<::{#}<~~+-------<<-----o\n                \
    \              |       :       |\n                              |       :    \
    \   |\n                              +-------:-------+\n                     \
    \                 :\n                                      +::::> (conversation.wav)\n\
    \             Figure 22: Phone Call: Conference-Based Approach\n   To identify\
    \ a single sample scenario, let's consider a phone call\n   that the AS wants\
    \ to record.\n   Figure 23 shows how this could be accomplished in the Media Control\n\
    \   Channel Framework.  This example, as usual, hides the previous\n   interaction\
    \ between the UACs and the AS and instead focuses on the\n   Control Channel operations\
    \ and what follows.\n UAC1        UAC2       AS                              \
    \   MS\n  |           |         |                                  |\n  |    \
    \       |         | A1. CONTROL (create conference)  |\n  |           |      \
    \   |++++++++++++++++++++++++++++++++>>|\n  |           |         |          \
    \                        |--+ create\n  |           |         |              \
    \                    |  | conf and\n  |           |         |      A2. 200 OK\
    \ (conferenceid=Y) |<-+ its ID\n  |           |         |<<++++++++++++++++++++++++++++++++|\n\
    \  |           |         |                                  |\n  |           |\
    \         | B1. CONTROL (record for 10800 s) |\n  |           |         |++++++++++++++++++++++++++++++++>>|\n\
    \  |           |         |                                  |--+ start\n  |  \
    \         |         |                                  |  | the\n  |         \
    \  |         |                       B2. 200 OK |<-+ dialog\n  |           | \
    \        |<<++++++++++++++++++++++++++++++++|\n  |        Recording +--|     \
    \                             |\n  |       of the mix |  |                   \
    \               |\n  |      has started +->|                                 \
    \ |\n  |           |         | C1. CONTROL (join UAC1<->confY)  |\n  |       \
    \    |         |++++++++++++++++++++++++++++++++>>|\n  |           |         |\
    \                                  |--+  join\n  |           |         |     \
    \                             |  | UAC1 &\n  |           |         |         \
    \              C2. 200 OK |<-+ confY\n  |           |         |<<++++++++++++++++++++++++++++++++|\n\
    \  |           |         |                                  |\n  |<<####################################################>>|\n\
    \  |           Now UAC1 is mixed in the conference          |\n  |<<####################################################>>|\n\
    \  |           |         |                                  |\n  |           |\
    \         | D1. CONTROL (join UAC2<->confY)  |\n  |           |         |++++++++++++++++++++++++++++++++>>|\n\
    \  |           |         |                                  |--+  join\n  |  \
    \         |         |                                  |  | UAC2 &\n  |      \
    \     |         |                       D2. 200 OK |<-+ confY\n  |           |\
    \         |<<++++++++++++++++++++++++++++++++|\n  |           |         |    \
    \                              |\n  |           |<<########################################>>|\n\
    \  |           |            Now UAC2 is mixed too           |\n  |           |<#########################################>>|\n\
    \  |           |         |                                  |\n  |<*talking*>|\
    \         |                                  |\n  |           |         |    \
    \                              |\n  .           .         .                  \
    \                .\n  .           .         .                                \
    \  .\n       Figure 23: Conference-Based Approach: Framework Transactions\n  \
    \ The AS uses two different packages to accomplish this scenario: the\n   Mixer\
    \ package (to create the mixing entity and join the UACs) and the\n   IVR package\
    \ (to record what happens in the conference).  The\n   framework transaction steps\
    \ can be described as follows:\n   o  First of all, the AS creates a new hidden\
    \ conference by means of a\n      <createconference> request (A1).  This conference\
    \ is properly\n      configured according to the use it is assigned to.  In fact,\
    \ since\n      only two participants will be joined to it, both\n      'reserved-talkers'\
    \ and 'reserved-listeners' are set to 2, just as\n      the 'n' value for the\
    \ N-best audio mixing algorithm.  The video\n      layout is also set accordingly\
    \ (<single-view>/<dual-view>).\n   o  The MS sends notification of the successful\
    \ creation of the new\n      conference in a 200 framework message (A2).  The\
    \ identifier\n      assigned to the conference, which will be used in subsequent\n\
    \      requests addressed to it, is 6013f1e.\n   o  The AS requests a new recording\
    \ for the newly created conference.\n      To do so, it places a proper request\
    \ to the IVR package (B1).  The\n      AS is interested in a video recording (type=video/mpeg),\
    \ which\n      must not last longer than 3 hours (maxtime=10800s), after which\n\
    \      the recording must end.  Additionally, no beep must be played on\n    \
    \  the conference (beep=false), and the recording must start\n      immediately\
    \ whether or not any audio activity has been reported\n      (vadinitial=false\
    \ is the default value for <record>).\n   o  The transaction is handled by the\
    \ MS, and when the dialog has been\n      successfully started, a 200 OK is issued\
    \ to the AS (B2).  The\n      message contains the dialogid associated with the\
    \ dialog\n      (00b29fb), which the AS must refer to for later notifications.\n\
    \   o  At this point, the AS attaches both UACs to the conference with\n     \
    \ two separate <join> directives (C1/D1).  When the MS confirms the\n      success\
    \ of both operations (C2/D2), the two UACs are actually in\n      contact with\
    \ each other (even though indirectly, since a hidden\n      conference they're\
    \ unaware of is on their path), and their media\n      contribution is recorded.\n"
- title: A1. AS -> MS (CFW CONTROL, createconference)
  contents:
  - 'A1. AS -> MS (CFW CONTROL, createconference)

    '
- title: '--------------------------------------------'
  contents:
  - "--------------------------------------------\n   CFW 238e1f2946e8 CONTROL\n \
    \  Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n  \
    \ Content-Length: 395\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n      <createconference reserved-talkers=\"2\" reserved-listeners=\"2\">\n\
    \         <audio-mixing type=\"nbest\" n=\"2\"/>\n         <video-layouts>\n \
    \           <video-layout min-participants='1'>\n               <single-view/>\n\
    \            </video-layout>\n            <video-layout min-participants='2'>\n\
    \               <dual-view/>\n            </video-layout>\n         </video-layouts>\n\
    \         <video-switch>\n            <controller/>\n         </video-switch>\n\
    \      </createconference>\n   </mscmixer>\n"
- title: A2. AS <- MS (CFW 200 OK)
  contents:
  - 'A2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 238e1f2946e8 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 151\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n      <response status=\"200\"\
    \ reason=\"Conference created\"\n                conferenceid=\"6013f1e\"/>\n\
    \   </mscmixer>\n"
- title: B1. AS -> MS (CFW CONTROL, record)
  contents:
  - 'B1. AS -> MS (CFW CONTROL, record)

    '
- title: '----------------------------------'
  contents:
  - "----------------------------------\n   CFW 515f007c5bd0 CONTROL\n   Control-Package:\
    \ msc-ivr\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 226\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <dialogstart\
    \ conferenceid=\"6013f1e\">\n         <dialog>\n            <record beep=\"false\"\
    \ type=\"video/mpeg\" maxtime=\"10800s\"/>\n         </dialog>\n      </dialogstart>\n\
    \   </mscivr>\n"
- title: B2. AS <- MS (CFW 200 OK)
  contents:
  - 'B2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 515f007c5bd0 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"00b29fb\"/>\n   </mscivr>\n"
- title: C1. AS -> MS (CFW CONTROL, join)
  contents:
  - 'C1. AS -> MS (CFW CONTROL, join)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 0216231b1f16 CONTROL\n   Control-Package:\
    \ msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123\n\
    \   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n  \
    \    <join id1=\"10514b7f:6a900179\" id2=\"6013f1e\"/>\n   </mscmixer>\n"
- title: C2. AS <- MS (CFW 200 OK)
  contents:
  - 'C2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 125\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n      <response status=\"200\"\
    \ reason=\"Join successful\"/>\n   </mscmixer>\n"
- title: D1. AS -> MS (CFW CONTROL, join)
  contents:
  - 'D1. AS -> MS (CFW CONTROL, join)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 140e0f763352 CONTROL\n   Control-Package:\
    \ msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 124\n\
    \   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n  \
    \    <join id1=\"219782951:0b9d3347\" id2=\"6013f1e\"/>\n   </mscmixer>\n"
- title: D2. AS <- MS (CFW 200 OK)
  contents:
  - 'D2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 140e0f763352 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 125\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n      <response status=\"200\"\
    \ reason=\"Join successful\"/>\n   </mscmixer>\n   The recording of the conversation\
    \ can subsequently be accessed by the\n   AS by waiting for an event notification\
    \ from the MS.  This event,\n   which will be associated with the previously started\
    \ recording\n   dialog, will contain the URI of the recorded file.  Such an event\
    \ may\n   be triggered by either a natural completion of the dialog (e.g., the\n\
    \   dialog has reached its programmed 3 hours) or any interruption of the\n  \
    \ dialog itself (e.g., the AS actively requests that the recording be\n   interrupted,\
    \ since the call between the UACs ended).\n"
- title: 6.2.3.  Recording a Conversation
  contents:
  - "6.2.3.  Recording a Conversation\n   The previous section described how to take\
    \ advantage of the\n   conferencing functionality of the Mixer package in order\
    \ to allow the\n   recording of phone calls in a simple way.  However, using a\
    \ dedicated\n   mixer just for a phone call might be considered overkill.  This\n\
    \   section shows how recording a conversation and subsequently playing\n   it\
    \ out can be accomplished without a mixing entity involved in the\n   call, i.e.,\
    \ by using the Direct Connection approach as described in\n   Section 6.2.1.\n\
    \   As explained previously, if the AS wants to record a phone call\n   between\
    \ two UACs, the use of just the <join> directive without a\n   mixer forces the\
    \ AS to just rely on separate recording commands.\n   That is, the AS can only\
    \ instruct the MS to separately record the\n   media flowing on each media leg:\
    \ a recording for all the data coming\n   from UAC1, and a different recording\
    \ for all the data coming from\n   UAC2.  If someone subsequently wants to access\
    \ the whole\n   conversation, the AS may take at least two different approaches:\n\
    \   1.  It may mix the two recordings itself (e.g., by delegating it to\n    \
    \   an offline mixing entity) in order to obtain a single file\n       containing\
    \ the combination of the two recordings.  This way, a\n       simple playout as\
    \ described in Section 6.1.2 would suffice.\n   2.  Alternatively, it may take\
    \ advantage of the mixing functionality\n       provided by the MS itself.  One\
    \ way to do this is to create a\n       hidden conference on the MS, attach the\
    \ UAC as a passive\n       participant to it, and play the separate recordings\
    \ on the\n       conference as announcements.  This way, the UAC accessing\n \
    \      the recording would experience both of the recordings at the\n       same\
    \ time.\n   The second approach is considered in this section.  The framework\n\
    \   transaction as described in Figure 24 assumes that a recording has\n   already\
    \ been requested for both UAC1 and UAC2, that the phone call\n   has ended, and\
    \ that the AS has successfully received the URIs to both\n   of the recordings\
    \ from the MS.  Such steps are not described again,\n   since they would be quite\
    \ similar to the steps described in\n   Section 6.1.2.  As mentioned previously,\
    \ the idea is to use a\n   properly constructed hidden conference to mix the two\
    \ separate\n   recordings on the fly and present them to the UAC.  It is, of course,\n\
    \   up to the AS to subsequently unjoin the user from the conference and\n   destroy\
    \ the conference itself once the playout of the recordings ends\n   for any reason.\n\
    \ UAC3                     AS                                 MS\n  |        \
    \               |                                  |\n  | (UAC1 and UAC2 have\
    \ previously been recorded; the AS has |\n  |  the two different recordings available\
    \ for playout.)    |\n  |                       |                            \
    \      |\n  |                       | A1. CONTROL (create conference)  |\n  |\
    \                       |++++++++++++++++++++++++++++++++>>|\n  |            \
    \           |                                  |--+ create\n  |              \
    \         |                                  |  | conf &\n  |                \
    \       |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n  |                  \
    \     |<<++++++++++++++++++++++++++++++++|\n  |                       |      \
    \                            |\n  |                       | B1. CONTROL (join\
    \ UAC3 & confY)  |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |--+ join\n  | \
    \                      |                                  |  | UAC &\n  |    \
    \                   |                       B2. 200 OK |<-+ confY\n  |       \
    \                |<+++++++++++++++++++++++++++++++++|\n  |                   \
    \    |                                  |\n  |<<######################################################>>|\n\
    \  |   UAC3 is now a passive participant in the conference    |\n  |<<######################################################>>|\n\
    \  |                       |                                  |\n  |         \
    \              | C1. CONTROL (play REC1 on confY) |\n  |                     \
    \  |++++++++++++++++++++++++++++++++>>|\n  |                       | D1. CONTROL\
    \ (play REC2 on confY) |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |--+ Start\n  |\
    \                       |                                  |  | both\n  |    \
    \                   |                                  |  | of the\n  |      \
    \                 |                                  |  |dialogs\n  |        \
    \               |                       C2. 200 OK |<-+\n  |                 \
    \      |<<++++++++++++++++++++++++++++++++|\n  |                       |     \
    \                  D2. 200 OK |\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |  The two recordings are mixed and played together to UAC |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |         \
    \              |       E1. CONTROL (<promptinfo>) |\n  |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n  |                       | E2. 200 OK\
    \                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |       F1. CONTROL (<promptinfo>) |\n  |         \
    \              |<<++++++++++++++++++++++++++++++++|\n  |                     \
    \  | F2. 200 OK                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  .         \
    \              .                                  .\n  .                     \
    \  .                                  .\n         Figure 24: Phone Call: Playout\
    \ of a Recorded Conversation\n   The diagram above assumes that a recording of\
    \ both of the channels\n   (UAC1 and UAC2) has already taken place.  Later, when\
    \ we desire to\n   play the whole conversation to a new user, UAC3, the AS may\
    \ take care\n   of the presented transactions.  The framework transaction steps\
    \ are\n   only apparently more complicated than those presented so far.  The\n\
    \   only difference, in fact, is that transactions C and D are\n   concurrent,\
    \ since the recordings must be played together.\n   o  First of all, the AS creates\
    \ a new conference to act as a mixing\n      entity (A1).  The settings for the\
    \ conference are chosen according\n      to the use case, e.g., the video layout,\
    \ which is fixed to\n      <dual-view>, and the switching type to <controller>.\
    \  When the\n      conference has been successfully created (A2), the AS takes\
    \ note\n      of the conference identifier.\n   o  At this point, UAC3 is attached\
    \ to the conference as a passive\n      user (B1).  There would be no point in\
    \ letting the user contribute\n      to the conference mix, since he will only\
    \ need to watch a\n      recording.  In order to specify his passive status, both\
    \ the audio\n      and video streams for the user are set to 'recvonly'.  If the\n\
    \      transaction succeeds, the MS notifies the AS (B2).\n   o  Once the conference\
    \ has been created and UAC3 has been attached to\n      it, the AS can request\
    \ the playout of the recordings; in order to\n      do so, it requests two concurrent\
    \ <prompt> directives (C1 and D1),\n      addressing the recording of UAC1 (REC1)\
    \ and UAC2 (REC2),\n      respectively.  Both of the prompts must be played on\
    \ the\n      previously created conference and not to UAC3 directly, as can be\n\
    \      deduced from the 'conferenceid' attribute of the <dialog> element.\n  \
    \ o  The transactions \"live their lives\" exactly as explained for\n      previous\
    \ <prompt> examples.  The originating transactions are\n      first prepared and\
    \ started (C2, D2), and then, as soon as the\n      playout ends, a related CONTROL\
    \ message is triggered by the MS\n      (E1, F1).  This notification may contain\
    \ a <promptinfo> element\n      with information about how the playout proceeded\
    \ (e.g., whether\n      the playout completed normally or was interrupted by a\
    \ DTMF\n      tone, etc.).\n A1. AS -> MS (CFW CONTROL, createconference)\n --------------------------------------------\n\
    \    CFW 506e039f65bd CONTROL\n    Control-Package: msc-mixer/1.0\n    Content-Type:\
    \ application/msc-mixer+xml\n    Content-Length: 312\n    <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n       <createconference reserved-talkers=\"\
    0\" reserved-listeners=\"1\">\n          <audio-mixing type=\"controller\"/>\n\
    \          <video-layouts>\n             <video-layout min-participants='1'>\n\
    \                <dual-view/>\n             </video-layout>\n          </video-layouts>\n\
    \          <video-switch>\n             <controller/>\n          </video-switch>\n\
    \       </createconference>\n    </mscmixer>\n A2. AS <- MS (CFW 200 OK)\n -------------------------\n\
    \    CFW 506e039f65bd 200\n    Timeout: 10\n    Content-Type: application/msc-mixer+xml\n\
    \    Content-Length: 151\n    <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n       <response status=\"200\" reason=\"Conference created\"\n           \
    \      conferenceid=\"2625069\"/>\n    </mscmixer>\n B1. AS -> MS (CFW CONTROL,\
    \ join)\n --------------------------------\n    CFW 09202baf0c81 CONTROL\n   \
    \ Control-Package: msc-mixer/1.0\n    Content-Type: application/msc-mixer+xml\n\
    \    Content-Length: 214\n    <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n       <join id1=\"aafaf62d:0eac5236\" id2=\"2625069\">\n          <stream\
    \ media=\"audio\" direction=\"recvonly\"/>\n          <stream media=\"video\"\
    \ direction=\"recvonly\"/>\n       </join>\n    </mscmixer>\n B2. AS <- MS (CFW\
    \ 200 OK)\n -------------------------\n    CFW 09202baf0c81 200\n    Timeout:\
    \ 10\n    Content-Type: application/msc-mixer+xml\n    Content-Length: 125\n \
    \   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n  \
    \     <response status=\"200\" reason=\"Join successful\"/>\n    </mscmixer>\n\
    \ C1. AS -> MS (CFW CONTROL, play recording from UAC1)\n ----------------------------------------------------\n\
    \    CFW 3c2a08be4562 CONTROL\n    Control-Package: msc-ivr/1.0\n    Content-Type:\
    \ application/msc-ivr+xml\n    Content-Length: 229\n    <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n       <dialogstart conferenceid=\"\
    2625069\">\n          <dialog>\n             <prompt>\n                <media\n\
    \   loc=\"http://www.example.net/recordings/recording-4ca9fc2.mpg\"/>\n      \
    \       </prompt>\n          </dialog>\n       </dialogstart>\n    </mscivr>\n\
    \ D1. AS -> MS (CFW CONTROL, play recording from UAC2)\n ----------------------------------------------------\n\
    \    CFW 1c268d810baa CONTROL\n    Control-Package: msc-ivr/1.0\n    Content-Type:\
    \ application/msc-ivr+xml\n    Content-Length: 229\n    <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n       <dialogstart conferenceid=\"\
    2625069\">\n          <dialog>\n             <prompt>\n                <media\n\
    \   loc=\"http://www.example.net/recordings/recording-39dfef4.mpg\"/>\n      \
    \       </prompt>\n          </dialog>\n       </dialogstart>\n    </mscivr>\n\
    \ C2. AS <- MS (CFW 200 OK)\n -------------------------\n    CFW 1c268d810baa\
    \ 200\n    Timeout: 10\n    Content-Type: application/msc-ivr+xml\n    Content-Length:\
    \ 137\n    <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \       <response status=\"200\" reason=\"Dialog started\"\n                 dialogid=\"\
    7a457cc\"/>\n    </mscivr>\n D2. AS <- MS (CFW 200 OK)\n -------------------------\n\
    \    CFW 3c2a08be4562 200\n    Timeout: 10\n    Content-Type: application/msc-ivr+xml\n\
    \    Content-Length: 137\n    <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n       <response status=\"200\" reason=\"Dialog started\"\n               \
    \  dialogid=\"1a0c7cf\"/>\n    </mscivr>\n E1. AS <- MS (CFW CONTROL event, playout\
    \ of recorded UAC1 ended)\n ----------------------------------------------------------------\n\
    \    CFW 77aec0735922 CONTROL\n    Control-Package: msc-ivr/1.0\n    Content-Type:\
    \ application/msc-ivr+xml\n    Content-Length: 230\n    <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n       <event dialogid=\"7a457cc\"\
    >\n          <dialogexit status=\"1\" reason=\"Dialog successfully completed\"\
    >\n             <promptinfo duration=\"10339\" termmode=\"completed\"/>\n    \
    \      </dialogexit>\n       </event>\n    </mscivr>\n E2. AS -> MS (CFW 200,\
    \ ACK to 'CONTROL event')\n ----------------------------------------------\n \
    \   CFW 77aec0735922 200\n F1. AS <- MS (CFW CONTROL event, playout of recorded\
    \ UAC2 ended)\n ----------------------------------------------------------------\n\
    \    CFW 62726ace1660 CONTROL\n    Control-Package: msc-ivr/1.0\n    Content-Type:\
    \ application/msc-ivr+xml\n    Content-Length: 230\n    <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n       <event dialogid=\"1a0c7cf\"\
    >\n          <dialogexit status=\"1\" reason=\"Dialog successfully completed\"\
    >\n             <promptinfo duration=\"10342\" termmode=\"completed\"/>\n    \
    \      </dialogexit>\n       </event>\n    </mscivr>\n F2. AS -> MS (CFW 200,\
    \ ACK to 'CONTROL event')\n ----------------------------------------------\n \
    \   CFW 62726ace1660 200\n"
- title: 6.3.  Conferencing
  contents:
  - "6.3.  Conferencing\n   One of the most important services the MS must be able\
    \ to provide is\n   mixing.  This involves mixing media streams from different\
    \ sources\n   and delivering the resulting mix(es) to each interested party, often\n\
    \   according to per-user policies, settings, and encoding.  A typical\n   scenario\
    \ involving mixing is, of course, media conferencing.  In such\n   a scenario,\
    \ the media sent by each participant is mixed, and each\n   participant typically\
    \ receives the overall mix, excluding its own\n   contribution and encoded in\
    \ the format it negotiated.  This example\n   points out in a quite clear way\
    \ how mixing must take care of the\n   profile of each involved entity.\n   A\
    \ media perspective of such a scenario is depicted in Figure 25.\n           \
    \                     +-------+\n                                |  UAC  |\n \
    \                               |   C   |\n                                +-------+\n\
    \                                   \" ^\n                           C (RTP) \"\
    \ \"\n                                   \" \"\n                             \
    \      \" \" A+B (RTP)\n                                   v \"\n   +-------+\
    \  A (RTP)           +--------+  A+C (RTP)         +-------+\n   |  UAC  |===================>|\
    \ Media  |===================>|  UAC  |\n   |   A   |<===================| Server\
    \ |<===================|   B   |\n   +-------+         B+C (RTP)  +--------+ \
    \          B (RTP)  +-------+\n                 Figure 25: Conference: Media Perspective\n\
    \   From the framework point of view, when the UACs' legs are not\n   attached\
    \ to anything yet, what appears is shown in Figure 26: since\n   there are no\
    \ connections involving the UACs yet, the frames they\n   might be sending are\
    \ discarded, and nothing is sent back to them\n   (except for silence, if its\
    \ transmission is requested).\n                                     MS\n     \
    \                        +----------------+\n               UAC A         |  \
    \              |         UAC B\n                 o----->>-------x          x.......>>.....o\n\
    \                 o.....<<.......x          x-------<<-----o\n               \
    \              |                |\n                             |            \
    \    |\n                             |       xx       |\n                    \
    \         |       |.       |\n                             +-------|.-------+\n\
    \                                     |.\n                                   \
    \  ^v\n                                     ^v\n                             \
    \        |.\n                                     oo\n                       \
    \            UAC C\n               Figure 26: Conference: UAC Legs Not Attached\n\
    \   The next subsections will cover several typical scenarios involving\n   mixing\
    \ and conferencing as a whole, specifically:\n   1.  Simple Bridging scenario,\
    \ which is a very basic (i.e., no\n       \"special effects\"; just mixing involved)\
    \ conference involving one\n       or more participants.\n   2.  Rich Conference\
    \ scenario, which enriches the Simple Bridging\n       scenario by adding additional\
    \ features typically found in\n       conferencing systems (e.g., DTMF collection\
    \ for PIN-based\n       conference access, private and global announcements, recordings,\n\
    \       and so on).\n   3.  Coaching scenario, which is a more complex scenario\
    \ that involves\n       per-user mixing (customers, agents, and coaches don't\
    \ all get the\n       same mixes).\n   4.  Sidebars scenario, which adds more\
    \ complexity to the previous\n       conferencing scenarios by involving sidebars\
    \ (i.e., separate\n       conference instances that only exist within the context\
    \ of a\n       parent conference instance) and the custom media delivery that\n\
    \       follows.\n   5.  Floor Control scenario, which provides some guidance\
    \ on how floor\n       control could be involved in a MEDIACTRL-based media conference.\n\
    \   All of the above-mentioned scenarios depend on the availability of a\n   mixing\
    \ entity.  Such an entity is provided in the Media Control\n   Channel Framework\
    \ by the conferencing package.  Besides allowing for\n   the interconnection of\
    \ media sources as seen in the Direct Echo Test\n   section, this package enables\
    \ the creation of abstract connections\n   that can be joined to multiple connections.\
    \  These abstract\n   connections, called conferences, mix the contribution of\
    \ each\n   attached connection and feed them accordingly (e.g., a connection\n\
    \   with a 'sendrecv' property would be able to contribute to the mix and\n  \
    \ listen to it, while a connection with a 'recvonly' property would\n   only be\
    \ able to listen to the overall mix but not actively contribute\n   to it).\n\
    \   That said, each of the above-mentioned scenarios will start more or\n   less\
    \ in the same way: by the creation of a conference connection (or\n   more than\
    \ one, as needed in some cases) to be subsequently referred\n   to when it comes\
    \ to mixing.  A typical framework transaction to\n   create a new conference instance\
    \ in the Media Control Channel\n   Framework is depicted in Figure 27:\n     \
    \               AS                                 MS\n                    | \
    \                                 |\n                    | 1. CONTROL (create\
    \ conference)   |\n                    |++++++++++++++++++++++++++++++++>>|\n\
    \                    |                                  |--+ create\n        \
    \            |                                  |  | conf and\n              \
    \      |       2. 200 OK (conferenceid=Y) |<-+ its ID\n                    |<<++++++++++++++++++++++++++++++++|\n\
    \         map URI +--|                                  |\n          X with |\
    \  |                                  |\n           confY +->|               \
    \                   |\n                    |                                 \
    \ |\n                    .                                  .\n              \
    \      .                                  .\n               Figure 27: Conference:\
    \ Framework Transactions\n   The call flow is quite straightforward and can typically\
    \ be\n   summarized in the following steps:\n   o  The AS invokes the creation\
    \ of a new conference instance by means\n      of a CONTROL request (1); this\
    \ request is addressed to the\n      conferencing package (msc-mixer/1.0) and\
    \ contains in the body the\n      directive (<createconference>) with all the\
    \ desired settings for\n      the new conference instance.  In the example below,\
    \ the mixing\n      policy is to mix the five ('reserved-talkers') loudest speakers\n\
    \      (nbest), while ten listeners at maximum are allowed.  Video\n      settings\
    \ are configured, including the mechanism used to select\n      active video sources\
    \ (<controller>, meaning the AS will explicitly\n      instruct the MS about it)\
    \ and details about the video layouts to\n      make available.  In this example,\
    \ the AS is instructing the MS to\n      use a <single-view> layout when only\
    \ one video source is active,\n      to pass to a <quad-view> layout when at least\
    \ two video sources\n      are active, and to use a <multiple-5x1> layout whenever\
    \ the number\n      of sources is at least five.  Finally, the AS also subscribes\
    \ to\n      the \"active-talkers\" event, which means it wants to be informed\n\
    \      (at a rate of 4 seconds) whenever an active participant is\n      speaking.\n\
    \   o  The MS creates the conference instance, assigns a unique\n      identifier\
    \ to it (6146dd5), and completes the transaction with a\n      200 response (2).\n\
    \   o  At this point, the requested conference instance is active and\n      ready\
    \ to be used by the AS.  It is then up to the AS to integrate\n      the use of\
    \ this identifier in its application logic.\n   1. AS -> MS (CFW CONTROL)\n  \
    \ -------------------------\n      CFW 3032e5fb79a1 CONTROL\n      Control-Package:\
    \ msc-mixer/1.0\n      Content-Type: application/msc-mixer+xml\n      Content-Length:\
    \ 489\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n        <createconference reserved-talkers=\"5\" reserved-listeners=\"10\"\
    >\n           <audio-mixing type=\"nbest\"/>\n           <video-layouts>\n   \
    \          <video-layout min-participants='1'>\n                <single-view/>\n\
    \             </video-layout>\n             <video-layout min-participants='2'>\n\
    \                <quad-view/>\n             </video-layout>\n             <video-layout\
    \ min-participants='5'>\n                <multiple-5x1/>\n             </video-layout>\n\
    \           </video-layouts>\n           <video-switch>\n              <controller/>\n\
    \           </video-switch>\n           <subscribe>\n              <active-talkers-sub\
    \ interval=\"4\"/>\n           </subscribe>\n        </createconference>\n   \
    \   </mscmixer>\n   2. AS <- MS (CFW 200)\n   ---------------------\n      CFW\
    \ 3032e5fb79a1 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 151\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Conference created\"\n         \
    \          conferenceid=\"6146dd5\"/>\n      </mscmixer>\n"
- title: 6.3.1.  Simple Bridging
  contents:
  - "6.3.1.  Simple Bridging\n   As mentioned previously, the simplest way that an\
    \ AS can use a\n   conference instance is simple bridging.  In this scenario,\
    \ the\n   conference instance just acts as a bridge for all the participants\n\
    \   that are attached to it.  The bridge takes care of transcoding, if\n   needed\
    \ (in general, different participants may use different codecs\n   for their streams),\
    \ echo cancellation (each participant will receive\n   the overall mix, excluding\
    \ its own contribution) and per-participant\n   mixing (each participant may receive\
    \ different mixed streams,\n   according to what it needs/is allowed to send/receive).\
    \  This\n   assumes, of course, that each interested participant must be somehow\n\
    \   joined to the bridge in order to indirectly communicate with the\n   other\
    \ participants.  From the media perspective, the scenario can be\n   seen as depicted\
    \ in Figure 28.\n                                      MS\n                  \
    \           +-----------------+\n               UAC A         |              \
    \   |         UAC B\n                 o----->>-------+~~~>{##}:::>+:::::::>>:::::o\n\
    \                 o:::::<<:::::::+<:::{##}<~~~+-------<<-----o\n             \
    \                |        ^:       |\n                             |        |v\
    \       |\n                             |        ++       |\n                \
    \             |        |:       |\n                             +--------|:-------+\n\
    \                                      |:\n                                  \
    \    ^v\n                                      ^v\n                          \
    \            |:\n                                      oo\n                  \
    \                  UAC C\n                  Figure 28: Conference: Simple Bridging\n\
    \   In the framework, the first step is obviously to create a new\n   conference\
    \ instance as seen in the introductory section (Figure 27).\n   Assuming that\
    \ a conference instance has already been created,\n   bridging participants to\
    \ it is quite straightforward and can be\n   accomplished as seen in the Direct\
    \ Echo Test scenario.  The only\n   difference here is that each participant is\
    \ not directly connected to\n   itself (Direct Echo) or another UAC (Direct Connection)\
    \ but to the\n   bridge instead.  Figure 29 shows the example of two different\
    \ UACs\n   joining the same conference.  The example, as usual, hides the\n  \
    \ previous interaction between each of the two UACs and the AS, and\n   instead\
    \ focuses on what the AS does in order to actually join the\n   participants to\
    \ the bridge so that they can interact in a conference.\n   Please note also that\
    \ to make the diagram more readable, two\n   different identifiers (UAC1 and UAC2)\
    \ are used in place of the\n   identifiers previously employed to introduce the\
    \ scenario (UAC A,\n   B, C).\n UAC1      UAC2         AS                    \
    \               MS\n  |          |          |                                \
    \    |\n  |          |          | A1. CONTROL (join UAC1 and confY)  |\n  |  \
    \        |          |++++++++++++++++++++++++++++++++++>>|\n  |          |   \
    \       |                                    |--+  join\n  |          |      \
    \    |                                    |  | UAC1 &\n  |          |        \
    \  |                         A2. 200 OK |<-+ confY\n  |          |          |<<++++++++++++++++++++++++++++++++++|\n\
    \  |          |          |                                    |\n  |<<######################################################>>|\n\
    \  |            Now UAC1 is mixed in the conference           |\n  |<<######################################################>>|\n\
    \  |          |          |                                    |\n  |         \
    \ |          | B1. CONTROL (join UAC2 and confY)  |\n  |          |          |++++++++++++++++++++++++++++++++++>>|\n\
    \  |          |          |                                    |--+  join\n  |\
    \          |          |                                    |  | UAC2 &\n  |  \
    \        |          |                         B2. 200 OK |<-+ confY\n  |     \
    \     |          |<<++++++++++++++++++++++++++++++++++|\n  |          |      \
    \    |                                    |\n  |          |<<###########################################>>|\n\
    \  |          |    Now UAC2 too is mixed in the conference    |\n  |         \
    \ |<<###########################################>>|\n  |          |          |\
    \                                    |\n  .          .          .            \
    \                        .\n  .          .          .                        \
    \            .\n          Figure 29: Simple Bridging: Framework Transactions (1)\n\
    \   The framework transaction steps are actually quite trivial and easy\n   to\
    \ understand, since they're very similar to some previously\n   described scenarios.\
    \  The AS joins both UAC1 (id1 in A1) and UAC2\n   (id1 in B1) to the conference\
    \ (id2 in both transactions).  As a\n   result of these two operations, both UACs\
    \ are mixed in the\n   conference.  Since no <stream> is explicitly provided in\
    \ any of the\n   transactions, all the media from the UACs (audio/video) are attached\n\
    \   to the conference (as long as the conference has been properly\n   configured\
    \ to support both, of course).\n   A1. AS -> MS (CFW CONTROL)\n   --------------------------\n\
    \      CFW 434a95786df8 CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 120\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"e1e1427c:1c998d22\"\
    \ id2=\"6146dd5\"/>\n      </mscmixer>\n   A2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 434a95786df8 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   B1. AS -> MS (CFW CONTROL)\n   --------------------------\n      CFW 5c0cbd372046\
    \ CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 120\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <join id1=\"10514b7f:6a900179\" id2=\"6146dd5\"/>\n      </mscmixer>\n\
    \   B2. AS <- MS (CFW 200 OK)\n   -------------------------\n      CFW 5c0cbd372046\
    \ 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n    \
    \  Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   Once one or more participants have been attached to the bridge, their\n  \
    \ connections and how their media are handled by the bridge can be\n   dynamically\
    \ manipulated by means of another directive, called\n   <modifyjoin>.  A typical\
    \ use case for this directive is the change of\n   direction of an existing media\
    \ (e.g., a previously speaking\n   participant is muted, which means its media\
    \ direction changes from\n   'sendrecv' to 'recvonly').  Figure 30 shows how a\
    \ framework\n   transaction requesting such a directive might appear.\n UAC1 \
    \     UAC2         AS                                 MS\n  |          |     \
    \     |                                  |\n  |          |          | 1. CONTROL\
    \ (modifyjoin UAC1)     |\n  |          |          |++++++++++++++++++++++++++++++++>>|\n\
    \  |          |          |                                  |--+ modify\n  | \
    \         |          |                                  |  | join\n  |       \
    \   |          |                        2. 200 OK |<-+ settings\n  |         \
    \ |          |<<++++++++++++++++++++++++++++++++|\n  |          |          | \
    \                                 |\n  |<<######################################################|\n\
    \  |      Now UAC1 can receive but not send (recvonly)      |\n  |<<######################################################|\n\
    \  |          |          |                                  |\n  .          .\
    \          .                                  .\n  .          .          .   \
    \                               .\n          Figure 30: Simple Bridging: Framework\
    \ Transactions (2)\n   The directive used to modify an existing join configuration\
    \ is\n   <modifyjoin>, and its syntax is exactly the same as the syntax\n   required\
    \ in <join> instructions.  In fact, the same syntax is used\n   for identifiers\
    \ (id1/id2).  Whenever a <modifyjoin> is requested and\n   id1 and id2 address\
    \ one or more joined connections, the AS is\n   requesting a change of the join\
    \ configuration.  In this case, the AS\n   instructs the MS to mute (<stream>\
    \ media=audio, direction=recvonly)\n   UAC1 (id1=UAC1) in the conference (id2)\
    \ it has been attached to\n   previously.  Any other connection existing between\
    \ them is left\n   untouched.\n   It is worth noting that the <stream> settings\
    \ are enforced according\n   to both the provided direction AND the id1 and id2\
    \ identifiers.  For\n   instance, in this example id1 refers to UAC1, while id2\
    \ refers to the\n   conference in the MS.  This means that the required modifications\n\
    \   have to be applied to the stream specified in the <stream> element of\n  \
    \ the message, along the direction that goes from 'id1' to 'id2' (as\n   specified\
    \ in the <modifyjoin> element of the message).  In the\n   provided example, the\
    \ AS wants to mute UAC1 with respect to the\n   conference.  To do so, the direction\
    \ is set to 'recvonly', meaning\n   that, for what affects id1, the media stream\
    \ is only to be received.\n   If id1 referred to the conference and id2 to UAC1,\
    \ to achieve the\n   same result the direction would have to be set to 'sendonly',\
    \ meaning\n   \"id1 (the conference) can only send to id2 (UAC1), and no media\n\
    \   stream must be received\".  Additional settings for a <stream> (e.g.,\n  \
    \ audio volume, region assignments, and so on) follow the same\n   approach, as\
    \ discussed in subsequent sections.\n   1. AS -> MS (CFW CONTROL)\n   -------------------------\n\
    \      CFW 57f2195875c9 CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 182\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <modifyjoin id1=\"\
    e1e1427c:1c998d22\" id2=\"6146dd5\">\n            <stream media=\"audio\" direction=\"\
    recvonly\"/>\n         </modifyjoin>\n      </mscmixer>\n   2. AS <- MS (CFW 200\
    \ OK)\n   ------------------------\n      CFW 57f2195875c9 200\n      Timeout:\
    \ 10\n      Content-Type: application/msc-mixer+xml\n      Content-Length: 123\n\
    \      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n\
    \         <response status=\"200\" reason=\"Join modified\"/>\n      </mscmixer>\n"
- title: 6.3.2.  Rich Conference Scenario
  contents:
  - "6.3.2.  Rich Conference Scenario\n   The previous scenario can be enriched with\
    \ additional features often\n   found in existing conferencing systems.  Typical\
    \ examples include\n   IVR-based menus (e.g., the DTMF collection for PIN-based\
    \ conference\n   access), partial and complete recordings in the conference (e.g.,\
    \ for\n   the \"state your name\" functionality and recording of the whole\n \
    \  conference), private and global announcements, and so on.  All of\n   this\
    \ can be achieved by means of the functionality provided by the\n   MS.  In fact,\
    \ even if the conferencing and IVR features come from\n   different packages,\
    \ the AS can interact with both of them and achieve\n   complex results by correlating\
    \ the effects of different transactions\n   in its application logic.\n   From\
    \ the media and framework perspective, a typical Rich Conference\n   scenario\
    \ can be seen as depicted in Figure 31.\n                                    \
    \  MS\n                                       +-------- (announcement.wav)\n \
    \    (conference_recording.wav) <:::::+|\n                                   \
    \   :|\n                             +--------:|--------+\n               UAC\
    \ A         |        :v        |         UAC B\n                 o----->>-------+~~~>{##}:::>+:::::::>>:::::o\n\
    \                 o:::::<<:::::::+<:::{##}<~~~+-------<<-----o\n             \
    \                |        ^:     |  |\n                             |        |v\
    \     v  |\n                             |        ++     * (collect DTMF, get\
    \ name)\n                             |        |:        |\n                 \
    \            +--------|:--------+\n                                      |:\n\
    \                                      ^v\n                                  \
    \    ^v\n                                      |:\n                          \
    \            oo\n                                    UAC C\n              Figure\
    \ 31: Conference: Rich Conference Scenario\n   To identify a single sample scenario,\
    \ let's consider this sequence\n   for a participant joining a conference (which\
    \ again we assume has\n   already been created):\n   1.  The UAC as usual INVITEs\
    \ a URI associated with a conference, and\n       the AS follows the previously\
    \ explained procedure to have the UAC\n       negotiate a new media session with\
    \ the MS.\n   2.  The UAC is presented with an IVR menu, in which it is requested\n\
    \       to input a PIN code to access the conference.\n   3.  If the PIN is correct,\
    \ the UAC is asked to state its name so that\n       it can be recorded.\n   4.\
    \  The UAC is attached to the conference, and the previously\n       recorded\
    \ name is announced globally to the conference to\n       advertise its arrival.\n\
    \   Figure 32 shows a single UAC joining a conference.  The example, as\n   usual,\
    \ hides the previous interaction between the UAC and the AS, and\n   instead focuses\
    \ on what the AS does to actually interact with the\n   participant and join it\
    \ to the conference bridge.\n UAC                      AS                    \
    \             MS\n  |                       |                                \
    \  |\n  |                       | A1. CONTROL (request DTMF PIN)   |\n  |    \
    \                   |++++++++++++++++++++++++++++++++>>|\n  |                \
    \       |                                  |--+ start\n  |                   \
    \    |                                  |  | the\n  |                       |\
    \                       A2. 200 OK |<-+ dialog\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |   \"Please input the PIN number to join the conference\"   |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |########################################################>>|\n\
    \  |                   DTMF digits are collected              |--+ get\n  |########################################################>>|\
    \  | DTMF\n  |                       |                                  |<-+ digits\n\
    \  |                       |      B1. CONTROL (<collectinfo>) |\n  |         \
    \              |<<++++++++++++++++++++++++++++++++|\n  |       Compare DTMF +--|\
    \ B2. 200 OK                       |\n  |        digits with |  |++++++++++++++++++++++++++++++++>>|\n\
    \  |     the PIN number +->|                                  |\n  |         \
    \              | C1. CONTROL (record name)        |\n  |                     \
    \  |++++++++++++++++++++++++++++++++>>|\n  |                       |         \
    \                         |--+ start\n  |                       |            \
    \                      |  | the\n  |                       |                 \
    \      C2. 200 OK |<-+ dialog\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |          \"Please state your name after the beep\"         |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |########################################################>>|\n\
    \  |  Audio from the UAC is recorded (until timeout or DTMF)  |--+ save\n  |########################################################>>|\
    \  | in a\n  |                       |                                  |<-+ file\n\
    \  |                       |       D1. CONTROL (<recordinfo>) |\n  |         \
    \              |<<++++++++++++++++++++++++++++++++|\n  |     Store recorded +--|\
    \ D2. 200 OK                       |\n  |       file to play |  |++++++++++++++++++++++++++++++++>>|\n\
    \  |    announcement in +->|                                  |\n  |   conference\
    \ later    |                                  |\n  |                       | E1.\
    \ CONTROL (join UAC & confY)   |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |--+ join\n  | \
    \                      |                                  |  | UAC &\n  |    \
    \                   |                       E2. 200 OK |<-+ confY\n  |       \
    \                |<+++++++++++++++++++++++++++++++++|\n  |                   \
    \    |                                  |\n  |<<######################################################>>|\n\
    \  |     UAC is now included in the mix of the conference     |\n  |<<######################################################>>|\n\
    \  |                       |                                  |\n  |         \
    \              | F1. CONTROL (play name on confY) |\n  |                     \
    \  |++++++++++++++++++++++++++++++++>>|\n  |                       |         \
    \                         |--+ start\n  |                       |            \
    \                      |  | the\n  |                       |                 \
    \      F2. 200 OK |<-+ dialog\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |  Global announcement: \"Simon has joined the conference\"  |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |         \
    \              |       G1. CONTROL (<promptinfo>) |\n  |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n  |                       | G2. 200 OK\
    \                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  .         \
    \              .                                  .\n  .                     \
    \  .                                  .\n        Figure 32: Rich Conference Scenario:\
    \ Framework Transactions\n   As can be deduced from the sequence diagram above,\
    \ the AS, in its\n   business logic, correlates the results of different transactions,\n\
    \   addressed to different packages, to implement a conferencing scenario\n  \
    \ more complex than the Simple Bridging scenario previously described.\n   The\
    \ framework transaction steps are as follows:\n   o  Since this is a private conference,\
    \ the UAC is to be presented\n      with a request for a password, in this case\
    \ a PIN number.  To do\n      so, the AS instructs the MS (A1) to collect a series\
    \ of DTMF\n      digits from the specified UAC (connectionid=UAC).  The request\n\
    \      includes both a voice message (<prompt>) and the described digit\n    \
    \  collection context (<collect>).  The PIN is assumed to be a\n      4-digit\
    \ number, and so the MS has to collect 4 digits maximum\n      (maxdigits=4).\
    \  The DTMF digit buffer must be cleared before\n      collecting (cleardigitbuffer=true),\
    \ and the UAC can use the star\n      key to restart the collection (escapekey=*),\
    \ e.g., if the UAC is\n      aware that he mistyped any of the digits and wants\
    \ to start again.\n   o  The transaction goes on as usual (A2), with the transaction\
    \ being\n      handled and notification of the dialog start being sent in a 200\n\
    \      OK.  After that, the UAC is actually presented with the voice\n      message\
    \ and is subsequently requested to input the required PIN\n      number.\n   o\
    \  We assume that the UAC typed the correct PIN number (1234), which\n      is\
    \ reported by the MS to the AS by means of the usual MS-generated\n      CONTROL\
    \ event (B1).  The AS correlates this event to the\n      previously started dialog\
    \ by checking the referenced dialogid\n      (06d1bac) and acks the event (B2).\
    \  It then extracts the\n      information it needs from the event (in this case,\
    \ the digits\n      provided by the MS) from the <controlinfo> container (dtmf=1234)\n\
    \      and verifies that it is correct.\n   o  Since the PIN is correct, the AS\
    \ can proceed to the next step,\n      i.e., asking the UAC to state his name,\
    \ in order to subsequently\n      play the recording on the conference to report\
    \ the new\n      participant.  Again, this is done with a request to the IVR\n\
    \      package (C1).  The AS instructs the MS to play a voice message\n      (\"\
    state your name after the beep\"), to be followed by a recording\n      of only\
    \ the audio from the UAC (in stream, media=audio/sendonly,\n      while media=video/inactive).\
    \  A beep must be played right before\n      the recording starts (beep=true),\
    \ and the recording must only last\n      3 seconds (maxtime=3s), since it is\
    \ only needed as a brief\n      announcement.\n   o  Without delving again into\
    \ the details of a recording-related\n      transaction (C2), the AS finally gets\
    \ the URI of the requested\n      recording (D1, acked in D2).\n   o  At this\
    \ point, the AS attaches the UAC (id1) to the conference\n      (id2), just as\
    \ explained for the Simple Bridging scenario (E1/E2).\n   o  Finally, to notify\
    \ the other participants that a new participant\n      has arrived, the AS requests\
    \ a global announcement on the\n      conference.  This is a simple <prompt> request\
    \ to the IVR package\n      (F1), as explained in previous sections (e.g., Section\
    \ 6.1.2,\n      among others), but with a slight difference: the target of the\n\
    \      prompt is not a connectionid (a media connection) but the\n      conference\
    \ itself (conferenceid=6146dd5).  As a result of this\n      transaction, the\
    \ announcement would be played on all the media\n      connections attached to\
    \ the conference that are allowed to receive\n      media from it.  The AS specifically\
    \ requests that two media files\n      be played:\n      1.  the media file containing\
    \ the recorded name of the new user as\n          retrieved in D1 (\"Simon...\"\
    ).\n      2.  a pre-recorded media file explaining what happened (\"... has\n\
    \          joined the conference\").\n      The transaction then follows its usual\
    \ flow (F2), and the event\n      that sends notification regarding the end of\
    \ the announcement (G1,\n      acked in G2) concludes the scenario.\n"
- title: A1. AS -> MS (CFW CONTROL, collect)
  contents:
  - 'A1. AS -> MS (CFW CONTROL, collect)

    '
- title: '-----------------------------------'
  contents:
  - "-----------------------------------\n   CFW 50e56b8d65f9 CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 311\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <dialogstart\
    \ connectionid=\"10514b7f:6a900179\">\n        <dialog>\n          <prompt>\n\
    \              <media\n           loc=\"http://www.example.net/prompts/conf-getpin.wav\"\
    \n           type=\"audio/x-wav\"/>\n          </prompt>\n          <collect maxdigits=\"\
    4\" escapekey=\"*\" cleardigitbuffer=\"true\"/>\n        </dialog>\n     </dialogstart>\n\
    \   </mscivr>\n"
- title: A2. AS <- MS (CFW 200 OK)
  contents:
  - 'A2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 50e56b8d65f9 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"06d1bac\"/>\n   </mscivr>\n"
- title: B1. AS <- MS (CFW CONTROL event)
  contents:
  - 'B1. AS <- MS (CFW CONTROL event)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 166d68a76659 CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 272\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <event\
    \ dialogid=\"06d1bac\">\n         <dialogexit status=\"1\" reason=\"Dialog successfully\
    \ completed\">\n            <promptinfo duration=\"2312\" termmode=\"completed\"\
    />\n            <collectinfo dtmf=\"1234\" termmode=\"match\"/>\n         </dialogexit>\n\
    \      </event>\n   </mscivr>\n"
- title: B2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'B2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 166d68a76659 200\n"
- title: C1. AS -> MS (CFW CONTROL, record)
  contents:
  - 'C1. AS -> MS (CFW CONTROL, record)

    '
- title: '----------------------------------'
  contents:
  - "----------------------------------\n   CFW 61fd484f196e CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 373\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <dialogstart\
    \ connectionid=\"10514b7f:6a900179\">\n         <dialog>\n            <prompt>\n\
    \               <media\n         loc=\"http://www.example.net/prompts/conf-rec-name.wav\"\
    \n         type=\"audio/x-wav\"/>\n            </prompt>\n            <record\
    \ beep=\"true\" maxtime=\"3s\"/>\n         </dialog>\n         <stream media=\"\
    audio\" direction=\"sendonly\"/>\n         <stream media=\"video\" direction=\"\
    inactive\"/>\n      </dialogstart>\n   </mscivr>\n"
- title: C2. AS <- MS (CFW 200 OK)
  contents:
  - 'C2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 61fd484f196e 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"1cf0549\"/>\n   </mscivr>\n"
- title: D1. AS <- MS (CFW CONTROL event)
  contents:
  - 'D1. AS <- MS (CFW CONTROL event)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 3ec13ab96224 CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 402\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <event\
    \ dialogid=\"1cf0549\">\n       <dialogexit status=\"1\" reason=\"Dialog successfully\
    \ completed\">\n         <promptinfo duration=\"4988\" termmode=\"completed\"\
    />\n         <recordinfo duration=\"3000\" termmode=\"maxtime\">\n           <mediainfo\n\
    \  loc=\"http://www.example.net/recordings/recording-1cf0549.wav\"\n  type=\"\
    audio/x-wav\" size=\"48044\"/>\n         </recordinfo>\n       </dialogexit>\n\
    \     </event>\n   </mscivr>\n"
- title: D2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'D2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 3ec13ab96224 200\n"
- title: E1. AS -> MS (CFW CONTROL, join)
  contents:
  - 'E1. AS -> MS (CFW CONTROL, join)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 261d188b63b7 CONTROL\n   Control-Package:\
    \ msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length:\
    \ 120\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n      <join id1=\"10514b7f:6a900179\" id2=\"6146dd5\"/>\n   </mscmixer>\n"
- title: E2. AS <- MS (CFW 200 OK)
  contents:
  - 'E2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 261d188b63b7 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 125\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n      <response status=\"200\"\
    \ reason=\"Join successful\"/>\n   </mscmixer>\n"
- title: F1. AS -> MS (CFW CONTROL, play)
  contents:
  - 'F1. AS -> MS (CFW CONTROL, play)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 718c30836f38 CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 334\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <dialogstart\
    \ conferenceid=\"6146dd5\">\n       <dialog>\n         <prompt>\n           <media\n\
    \  loc=\"http://www.example.net/recordings/recording-1cf0549.wav\"\n  type=\"\
    audio/x-wav\"/>\n               <media\n  loc=\"http://www.example.net/prompts/conf-hasjoin.wav\"\
    \n  type=\"audio/x-wav\"/>\n         </prompt>\n       </dialog>\n     </dialogstart>\n\
    \   </mscivr>\n"
- title: F2. AS <- MS (CFW 200 OK)
  contents:
  - 'F2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 718c30836f38 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"5f4bc7e\"/>\n   </mscivr>\n"
- title: G1. AS <- MS (CFW CONTROL event)
  contents:
  - 'G1. AS <- MS (CFW CONTROL event)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 6485194f622f CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 229\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <event\
    \ dialogid=\"5f4bc7e\">\n         <dialogexit status=\"1\" reason=\"Dialog successfully\
    \ completed\">\n            <promptinfo duration=\"1838\" termmode=\"completed\"\
    />\n         </dialogexit>\n      </event>\n   </mscivr>\n"
- title: G2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'G2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 6485194f622f 200\n"
- title: 6.3.3.  Coaching Scenario
  contents:
  - "6.3.3.  Coaching Scenario\n   Another typical conference-based use case is the\
    \ so-called Coaching\n   scenario.  In such a scenario, a customer (called \"\
    A\" in the\n   following example) places a call to a business call center.  An\
    \ agent\n   (B) is assigned to the customer.  A coach (C), who cannot be heard\
    \ by\n   the customer, provides the agent with whispered suggestions about\n \
    \  what to say.  This scenario is also described in [RFC4597].\n   As can be deduced\
    \ from the scenario description, per-user policies\n   for media mixing and delivery,\
    \ i.e., who can hear what, are very\n   important.  The MS must make sure that\
    \ only the agent can hear the\n   coach's suggestions.  Since this is basically\
    \ a multiparty call\n   (despite what the customer might be thinking), a mixing\
    \ entity is\n   needed in order to accomplish the scenario requirements.  To\n\
    \   summarize:\n   o  The customer (A) must only hear what the agent (B) says.\n\
    \   o  The agent (B) must be able to hear both A and the coach (C).\n   o  C must\
    \ be able to hear both A and B in order to give B the right\n      suggestions\
    \ and also be aware of the whole conversation.\n   From the media and framework\
    \ perspective, such a scenario can be seen\n   as depicted in Figure 33.\n   \
    \ **************              +-------+\n    * A=Customer *              |  UAC\
    \  |\n    * B=Agent    *              |   C   |\n    * C=Coach    *          \
    \    +-------+\n    **************                 \" ^\n                    \
    \       C (RTP) \" \"\n                                   \" \"\n            \
    \                       \" \" A+B (RTP)\n                                   v\
    \ \"\n   +-------+  A (RTP)           +--------+  A+C (RTP)         +-------+\n\
    \   |  UAC  |===================>| Media  |===================>|  UAC  |\n   |\
    \   A   |<===================| Server |<===================|   B   |\n   +-------+\
    \           B (RTP)  +--------+           B (RTP)  +-------+\n              Figure\
    \ 33: Coaching Scenario: Media Perspective\n   From the framework point of view,\
    \ when the previously mentioned legs\n   are not attached to anything yet, what\
    \ appears is shown in Figure 34.\n                                    MS\n   \
    \                   +---------------------------+\n                      |   \
    \                        |\n        UAC A         |                          \
    \ |         UAC B\n          o.....<<.......x                     x-------<<-----o\n\
    \          o----->>-------x                     x.......>>.....o\n           \
    \           |                           |\n                      |           \
    \                |\n                      |                           |\n    \
    \                  |                           |\n                      |    \
    \        xx             |\n                      |            .|             +\n\
    \                      +------------v^-------------+\n                       \
    \            v^\n                                   .|\n                     \
    \              .|\n                                   oo\n                   \
    \               UAC C\n            Figure 34: Coaching Scenario: UAC Legs Not\
    \ Attached\n   By contrast, what the scenario should look like is depicted in\n\
    \   Figure 35.  The customer receives media directly from the agent\n   ('recvonly'),\
    \ while all of the three involved participants contribute\n   to a hidden conference.\
    \  Of course, the customer is not allowed to\n   receive the mixed flows from\
    \ the conference ('sendonly'), unlike the\n   agent and the coach, who must both\
    \ be aware of the whole conversation\n   ('sendrecv').\n                     \
    \               MS\n                      +---------------------------+\n    \
    \                  |                           |\n        UAC A         |    \
    \                       |         UAC B\n          o-----<<-------+----<<----+----<<----+-------<<-----o\n\
    \          o----->>-------+          |          +------->>-----o\n           \
    \           |  |          v          ^  |\n                      |  +~~~~~~~>[##]::::>::::+\
    \  |\n                      |            v^             |\n                  \
    \    |            ||             |\n                      |            ++    \
    \         |\n                      |            :|             +\n           \
    \           +------------v^-------------+\n                                  \
    \ v^\n                                   :|\n                                \
    \   :|\n                                   oo\n                              \
    \    UAC C\n         Figure 35: Coaching Scenario: UAC Legs Mixed and Attached\n\
    \   In the framework, this can be achieved by means of the Mixer Control\n   Package,\
    \ which, as demonstrated in the previous conferencing\n   examples, can be exploited\
    \ whenever mixing and joining entities are\n   needed.  The needed steps can be\
    \ summarized in the following list:\n   1.  First of all, a hidden conference\
    \ is created.\n   2.  Then, the three participants are all attached to it, each\
    \ with a\n       custom mixing policy, specifically:\n       *  the customer (A)\
    \ as 'sendonly'.\n       *  the agent (B) as 'sendrecv'.\n       *  the coach\
    \ (C) as 'sendrecv' and with a gain of -3 dB to halve\n          the volume of\
    \ its own contribution (so that the agent actually\n          hears the customer\
    \ at a louder volume and hears the coach\n          whispering).\n   3.  Finally,\
    \ the customer is joined to the agent as a passive\n       receiver ('recvonly').\n\
    \   A diagram of such a sequence of transactions is depicted in\n   Figure 36:\n\
    \  A      B      C       AS                                 MS\n  |      |   \
    \   |       |                                  |\n  |      |      |       | A1.\
    \ CONTROL (create conference)  |\n  |      |      |       |++++++++++++++++++++++++++++++++>>|\n\
    \  |      |      |       |                                  |--+ create\n  | \
    \     |      |       |                                  |  | conf and\n  |   \
    \   |      |       |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n  |      |\
    \      |       |<<++++++++++++++++++++++++++++++++|\n  |      |      |       |\
    \                                  |\n  |      |      |       | B1. CONTROL (join\
    \ A-->confY)     |\n  |      |      |       |++++++++++++++++++++++++++++++++>>|\n\
    \  |      |      |       |                                  |--+ join A\n  | \
    \     |      |       |                                  |  | & confY\n  |    \
    \  |      |       |                       B2. 200 OK |<-+ sendonly\n  |      |\
    \      |       |<<++++++++++++++++++++++++++++++++|\n  |      |      |       |\
    \                                  |\n  |######################################################>>|\n\
    \  |   Customer (A) is mixed (sendonly) in the conference   |\n  |######################################################>>|\n\
    \  |      |      |       |                                  |\n  |      |    \
    \  |       | C1. CONTROL (join B<->confY)     |\n  |      |      |       |++++++++++++++++++++++++++++++++>>|\n\
    \  |      |      |       |                                  |--+ join B\n  | \
    \     |      |       |                                  |  | & confY\n  |    \
    \  |      |       |                       C2. 200 OK |<-+ sendrecv\n  |      |\
    \      |       |<<++++++++++++++++++++++++++++++++|\n  |      |      |       |\
    \                                  |\n  |      |<<#############################################>>|\n\
    \  |      | Agent (B) is mixed (sendrecv) in the conference |\n  |      |<##############################################>>|\n\
    \  |      |      |       |                                  |\n  |      |    \
    \  |       | D1. CONTROL (join C<->confY)     |\n  |      |      |       |++++++++++++++++++++++++++++++++>>|\n\
    \  |      |      |       |                                  |--+ join C\n  | \
    \     |      |       |                                  |  | & confY\n  |    \
    \  |      |       |                       D2. 200 OK |<-+ sendrecv\n  |      |\
    \      |       |<<++++++++++++++++++++++++++++++++|\n  |      |      |       |\
    \                                  |\n  |      |      |<<######################################>>|\n\
    \  |      |      |  Coach (C) is mixed (sendrecv) as well   |\n  |      |    \
    \  |<<######################################>>|\n  |      |      |       |   \
    \                               |\n  |      |      |       | E1. CONTROL (join\
    \ A<--B)         |\n  |      |      |       |++++++++++++++++++++++++++++++++>>|\n\
    \  |      |      |       |                                  |--+ join\n  |   \
    \   |      |       |                                  |  | A & B\n  |      | \
    \     |       |                       E2. 200 OK |<-+ recvonly\n  |      |   \
    \   |       |<<++++++++++++++++++++++++++++++++|\n  |      |      |       |  \
    \                                |\n  |<<######################################################|\n\
    \  | Finally, Customer (A) is joined (recvonly) to Agent (B)|\n  |<<######################################################|\n\
    \  |      |      |       |                                  |\n  .      .    \
    \  .       .                                  .\n  .      .      .       .   \
    \                               .\n           Figure 36: Coaching Scenario: Framework\
    \ Transactions\n   o  First of all, the AS creates a new hidden conference by\
    \ means of a\n      <createconference> request (A1).  This conference is properly\n\
    \      configured according to the use it is assigned to, i.e., to mix\n     \
    \ all the involved parties accordingly.  Since only three\n      participants\
    \ will be joined to it, 'reserved-talkers' is set to 3.\n      'reserved-listeners',\
    \ on the other hand, is set to 2, since only\n      the agent and the coach must\
    \ receive a mix, while the customer\n      must be unaware of the coach.  Finally,\
    \ the video layout is set to\n      <dual-view> for the same reason, since only\
    \ the customer and the\n      agent must appear in the mix.\n   o  The MS sends\
    \ notification of the successful creation of the new\n      conference in a 200\
    \ framework message (A2).  The identifier\n      assigned to the conference, which\
    \ will be used in subsequent\n      requests addressed to it, is 1df080e.\n  \
    \ o  Now that the conference has been created, the AS joins the three\n      actors\
    \ to it with different policies, namely (i) the customer (A)\n      is joined\
    \ as 'sendonly' to the conference (B1), (ii) the agent (B)\n      is joined as\
    \ 'sendrecv' to the conference (C1), and (iii) the\n      coach (C) is joined\
    \ as 'sendrecv' (but audio only) to the\n      conference and with a lower volume\
    \ (D1).  The custom policies are\n      enforced by means of properly constructed\
    \ <stream> elements.\n   o  The MS takes care of the requests and acks them (B2,\
    \ C2, D2).  At\n      this point, the conference will receive media from all the\
    \ actors\n      but only provide the agent and the coach with the resulting mix.\n\
    \   o  To complete the scenario, the AS joins A with B directly as\n      'recvonly'\
    \ (E1).  The aim of this request is to provide A with\n      media too, namely\
    \ the media contributed by B.  This way, A is\n      unaware of the fact that\
    \ its media are accessed by C by means of\n      the hidden mixer.\n   o  The\
    \ MS takes care of this request too and acks it (E2), concluding\n      the scenario.\n\
    \   A1. AS -> MS (CFW CONTROL, createconference)\n   --------------------------------------------\n\
    \      CFW 238e1f2946e8 CONTROL\n      Control-Package: msc-mixer\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 329\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <createconference\
    \ reserved-talkers=\"3\" reserved-listeners=\"2\">\n            <audio-mixing\
    \ type=\"nbest\"/>\n            <video-layouts>\n               <video-layout\
    \ min-participants='1'>\n                  <dual-view/>\n               </video-layout>\n\
    \            </video-layouts>\n            <video-switch>\n               <controller/>\n\
    \            </video-switch>\n         </createconference>\n      </mscmixer>\n\
    \   A2. AS <- MS (CFW 200 OK)\n   -------------------------\n      CFW 238e1f2946e8\
    \ 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n    \
    \  Content-Length: 151\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Conference created\"\n         \
    \          conferenceid=\"1df080e\"/>\n      </mscmixer>\n   B1. AS -> MS (CFW\
    \ CONTROL, join)\n   --------------------------------\n      CFW 2eb141f241b7\
    \ CONTROL\n      Control-Package: msc-mixer\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 226\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <join id1=\"10514b7f:6a900179\" id2=\"1df080e\">\n            <stream\
    \ media=\"audio\" direction=\"sendonly\"/>\n            <stream media=\"video\"\
    \ direction=\"sendonly\"/>\n         </join>\n      </mscmixer>\n   B2. AS <-\
    \ MS (CFW 200 OK)\n   -------------------------\n      CFW 2eb141f241b7 200\n\
    \      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n      Content-Length:\
    \ 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   C1. AS -> MS (CFW CONTROL, join)\n   --------------------------------\n  \
    \    CFW 515f007c5bd0 CONTROL\n      Control-Package: msc-mixer\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 122\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"756471213:c52ebf1b\"\
    \ id2=\"1df080e\"/>\n      </mscmixer>\n   C2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 515f007c5bd0 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   D1. AS -> MS (CFW CONTROL, join)\n   --------------------------------\n  \
    \    CFW 0216231b1f16 CONTROL\n      Control-Package: msc-mixer\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 221\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"z9hG4bK19461552:1353807a\"\
    \ id2=\"1df080e\">\n            <stream media=\"audio\">\n               <volume\
    \ controltype=\"setgain\" value=\"-3\"/>\n            </stream>\n         </join>\n\
    \      </mscmixer>\n   D2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 0216231b1f16 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   E1. AS -> MS (CFW CONTROL, join)\n   --------------------------------\n  \
    \    CFW 140e0f763352 CONTROL\n      Control-Package: msc-mixer\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 236\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"10514b7f:6a900179\"\
    \ id2=\"756471213:c52ebf1b\">\n            <stream media=\"audio\" direction=\"\
    recvonly\"/>\n            <stream media=\"video\" direction=\"recvonly\"/>\n \
    \        </join>\n      </mscmixer>\n   E2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 140e0f763352 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n"
- title: 6.3.4.  Sidebars
  contents:
  - "6.3.4.  Sidebars\n   Within the context of conferencing, there could be a need\
    \ for\n   so-called sidebars, or side conferences.  This would be the case, for\n\
    \   instance, if two or more participants of a conference were willing to\n  \
    \ create a side conference among each other while still receiving part\n   of\
    \ the original conference mix in the background.  Motivations for\n   such a use\
    \ case can be found in both [RFC4597] and [RFC5239].  It is\n   clear that in\
    \ such a case the side conference is actually a separate\n   conference but must\
    \ also somehow be related to the original\n   conference.  Although the application-level\
    \ relationship is out of\n   scope for this document (this \"belongs\" to Centralized\
    \ Conferencing\n   (XCON)), the media stream relationship is more relevant here,\
    \ because\n   there is a stronger relationship at the media level from the\n \
    \  MEDIACTRL point of view.  Consequently, it is interesting to analyze\n   how\
    \ sidebars could be used to construct the conference mixes\n   according to the\
    \ MEDIACTRL specification.\n   The scenario presented in this section is a conference\
    \ hosting four\n   different participants: A, B, C, and D.  All these participants\
    \ are\n   attached to the conference as active senders and receivers of the\n\
    \   existing media streams.  At a certain point in time, two participants\n  \
    \ (B and D) decide to create a sidebar just for them.  The sidebar they\n   want\
    \ to create is constructed so that only audio is involved.  The\n   audio mix\
    \ of the sidebar must not be made available to the main\n   conference.  The mix\
    \ of the conference must be attached to the\n   sidebar, but with a lower volume\
    \ (30%), because it is just background\n   to the actual conversation.  This would\
    \ allow both B and D to talk to\n   each other without A and C listening to them,\
    \ while B and D could\n   still have an overview of what's happening in the main\
    \ conference.\n   From the media and framework perspective, such a scenario can\
    \ be seen\n   as depicted in Figure 37.\n                                 +-------+\n\
    \                                 |  UAC  |\n                                \
    \ |   C   |\n                                 +-------+\n                    \
    \                \" ^\n                            C (RTP) \" \"\n           \
    \                         \" \"\n                                    \" \" A (RTP)\n\
    \                                    v \"\n    +-------+  A (RTP)           +--------+\
    \  D+[a+c] (RTP)     +-------+\n    |  UAC  |===================>| Media  |===================>|\
    \  UAC  |\n    |   A   |<===================| Server |<===================|  \
    \ B   |\n    +-------+           C (RTP)  +--------+           B (RTP)  +-------+\n\
    \                                    ^ \"\n                                  \
    \  \" \" B+[a+c] (RTP)\n                                    \" \"\n          \
    \                  D (RTP) \" \"\n                                    \" v\n \
    \                                +-------+\n                                 |\
    \  UAC  |\n                                 |   D   |\n                      \
    \           +-------+\n                  Figure 37: Sidebars: Media Perspective\n\
    \   From the framework point of view, when all the participants are\n   attached\
    \ to the main conference, what appears is shown in Figure 38.\n              \
    \                      UAC C\n                                      oo\n     \
    \                                 :|\n                                      ^v\n\
    \                                      ^v\n                                  \
    \    :|\n                             +--------:|-------+\n                  \
    \           |        :|       |\n                             |        ++    \
    \   |\n               UAC A         |        ^|       |         UAC B\n      \
    \           o----->>-------+~~~>{##}:::>+:::::::>>:::::o\n                 o:::::<<:::::::+<:::{##}<~~~+-------<<-----o\n\
    \                             |        ^:       |\n                          \
    \   |        |v       |\n                             |        ++       |\n  \
    \                           |        |:       |\n                            \
    \ +--------|:-------+\n                                      |:\n            \
    \                          ^v\n                                      ^v\n    \
    \                                  |:\n                                      oo\n\
    \                                    UAC D\n             Figure 38: Sidebars:\
    \ UAC Legs in Main Conference\n   By contrast, what the scenario should look like\
    \ is depicted in\n   Figure 39.  A new mixer is created to host the sidebar. \
    \ The main mix\n   is then attached as 'sendonly' to the sidebar mix at a lower\
    \ volume\n   (in order to provide the sidebar users with a background of the main\n\
    \   conference).  The two interested participants (B and D) have their\n   audio\
    \ leg detached from the main conference and attached to the\n   sidebar.  This\
    \ detachment can be achieved by either actually\n   detaching the leg or just\
    \ modifying the status of the leg to\n   'inactive'.  Note that this only affects\
    \ the audio stream: the video\n   of the two users is still attached to the main\
    \ conference, and what\n   happens at the application level may or may not have\
    \ been changed\n   accordingly (e.g., XCON protocol interactions).\n   Please\
    \ note that the main conference is assumed to be in place and\n   the involved\
    \ participants (A, B, C, and D) attached ('sendrecv')\n   to it.\n           \
    \                      UAC C\n                                   oo\n        \
    \                           :|\n                                   ^v\n      \
    \                             ^v\n                                   :|\n    \
    \                      +--------:|----------------+\n                        \
    \  |        :|                |\n                          |        ++       \
    \         |\n            UAC A         |        ^|                |          UAC\
    \ B\n              o----->>-------+~~~>{##}:::>{##}:::>+:::::::>>:::::o\n    \
    \          o:::::<<:::::::+<:::{##}    {##}<~~~+-------<<-----o\n            \
    \              |                ^:        |\n                          |     \
    \           ++        |\n                          |                |v       \
    \ |\n                          +----------------|:--------+\n                \
    \                           |:\n                                           ^v\n\
    \                                           ^v\n                             \
    \              |:\n                                           oo\n           \
    \                               UAC D\n             Figure 39: Sidebars: UAC Legs\
    \ Mixed and Attached\n   The situation may subsequently be reverted (e.g., destroying\
    \ the\n   sidebar conference and reattaching B and D to the main conference\n\
    \   mix) in the same way.  The AS would just need to unjoin B and D from\n   the\
    \ hidden conference and change their connection with the main\n   conference back\
    \ to 'sendrecv'.  After unjoining the main mix and the\n   sidebar mix, the sidebar\
    \ conference could then be destroyed.  For\n   brevity, and because similar transactions\
    \ have already been\n   presented, these steps are not described here.\n   In\
    \ the framework, just as in the previous section, the presented\n   scenario can\
    \ again be achieved by means of the Mixer Control Package.\n   The needed steps\
    \ can be summarized in the following list:\n   1.  First of all, a hidden conference\
    \ is created (the sidebar mix).\n   2.  Then, the main conference mix is attached\
    \ to it as 'sendonly' and\n       with a gain of -5 dB to limit the volume of\
    \ its own contribution\n       to 30% (so that B and D can hear each other at\
    \ a louder volume\n       while still listening to what's happening in the main\
    \ conference\n       in the background).\n   3.  B and D are detached from the\
    \ main mix for audio (<modifyjoin>\n       with 'inactive' status).\n   4.  B\
    \ and D are attached to the hidden sidebar mix for audio.\n   Note that for detaching\
    \ B and D from the main mix, a <modifyjoin>\n   with an 'inactive' status is used,\
    \ instead of an <unjoin>.  The\n   motivation for this is related to how a subsequent\
    \ rejoining of B and\n   D to the main mix could take place.  In fact, by using\
    \ <modifyjoin>\n   the resources created when first joining B and D to the main\
    \ mix\n   remain in place, even if marked as unused at the moment.  An\n   <unjoin>,\
    \ on the other hand, would actually free those resources,\n   which in turn could\
    \ be granted to other participants joining the\n   conference in the meantime.\
    \  This means that when needing to reattach\n   B and D to the main mix, the MS\
    \ may not have the resources to do so,\n   resulting in an undesired failure.\n\
    \   A diagram of such a sequence of transactions (where confX is the\n   identifier\
    \ of the pre-existing main conference mix) is depicted in\n   Figure 40:\n  B\
    \         D         AS                                 MS\n  |         |     \
    \    |                                  |\n  |         |         | A1. CONTROL\
    \ (create conference)  |\n  |         |         |++++++++++++++++++++++++++++++++>>|\n\
    \  |         |         |                                  |--+ create\n  |   \
    \      |         |                                  |  | conf and\n  |       \
    \  |         |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n  |         |   \
    \      |<<++++++++++++++++++++++++++++++++|\n  |         |         |         \
    \                         |\n  |         |         | B1. CONTROL (join confX-->confY)\
    \ |\n  |         |         |++++++++++++++++++++++++++++++++>>|\n  |         |\
    \         |                                  |--+ join confX\n  |         |  \
    \       |                                  |  | & confY\n  |         |       \
    \  |                       B2. 200 OK |<-+ sendonly\n  |         |         |<<++++++++++++++++++++++++++++++++|\
    \    (30% vol)\n  |         |         |                                  |\n \
    \ |         |         | C1. CONTROL (modjoin B---confX)  |\n  |         |    \
    \     |++++++++++++++++++++++++++++++++>>|\n  |         |         |          \
    \                        |--+ modjoin B\n  |         |         |             \
    \                     |  | & confX\n  |         |         |                  \
    \     C2. 200 OK |<-+ (inactive)\n  |         |         |<<++++++++++++++++++++++++++++++++|\n\
    \  |         |         |                                  |\n  |         |   \
    \      | D1. CONTROL (join B<-->confY)    |\n  |         |         |++++++++++++++++++++++++++++++++>>|\n\
    \  |         |         |                                  |--+ join B\n  |   \
    \      |         |                                  |  | & confY\n  |        \
    \ |         |                       D2. 200 OK |<-+ sendrecv\n  |         |  \
    \       |<<++++++++++++++++++++++++++++++++|    (audio)\n  |         |       \
    \  |                                  |\n  |<<##################################################>>|\n\
    \  |   Participant B is mixed (sendrecv) in the sidebar   |\n  |     (A, C, and\
    \ D can't listen to her/him anymore)    |\n  |<<##################################################>>|\n\
    \  |         |         |                                  |\n  |         |   \
    \      | E1. CONTROL (modjoin D---confX)  |\n  |         |         |++++++++++++++++++++++++++++++++>>|\n\
    \  |         |         |                                  |--+ modjoin D\n  |\
    \         |         |                                  |  | & confX\n  |     \
    \    |         |                       E2. 200 OK |<-+ (inactive)\n  |       \
    \  |         |<<++++++++++++++++++++++++++++++++|\n  |         |         |   \
    \                               |\n  |         |         | F1. CONTROL (join D<-->confY)\
    \    |\n  |         |         |++++++++++++++++++++++++++++++++>>|\n  |      \
    \   |         |                                  |--+ join D\n  |         |  \
    \       |                                  |  | & confY\n  |         |       \
    \  |                       F2. 200 OK |<-+ sendrecv\n  |         |         |<<++++++++++++++++++++++++++++++++|\
    \    (audio)\n  |         |         |                                  |\n  |\
    \         |<<########################################>>|\n  |         |  D is\
    \ mixed (sendrecv) in the sidebar too  |\n  |         |  (A and C can't listen\
    \ to her/him anymore) |\n  |         |<<########################################>>|\n\
    \  |         |                                            |\n  .         .   \
    \                                         .\n  .         .                   \
    \                         .\n                Figure 40: Sidebars: Framework Transactions\n\
    \   o  First of all, the hidden conference mix is created (A1).  The\n      request\
    \ is basically the same as that presented in previous\n      sections, i.e., a\
    \ <createconference> request addressed to the\n      Mixer package.  The request\
    \ is very lightweight and asks the MS to\n      only reserve two listener seats\
    \ ('reserved-listeners', since only\n      B and D have to hear something) and\
    \ three talker seats\n      ('reserved-listeners', because in addition to B and\
    \ D the main mix\n      is also an active contributor to the sidebar).  The mixing\
    \ will be\n      driven by directives from the AS (mix-type=controller).  When\
    \ the\n      mix is successfully created, the MS provides the AS with its\n  \
    \    identifier (519c1b9).\n   o  As a first transaction after that, the AS joins\
    \ the audio from the\n      main conference and the newly created sidebar conference\
    \ mix (B1).\n      Only audio needs to be joined (media=audio), with a 'sendonly'\n\
    \      direction (i.e., only flowing from the main conference to the\n      sidebar\
    \ and not vice versa) and at 30% volume with respect to the\n      original stream\
    \ (setgain=-5 dB).  A successful completion of the\n      transaction is reported\
    \ to the AS (B2).\n   o  At this point, the AS makes the connection of B (2133178233:\n\
    \      18294826) and the main conference (2f5ad43) inactive by means of a\n  \
    \    <modifyjoin> directive (C1).  The request is taken care of by the\n     \
    \ MS (C2), and B is actually excluded from the mix for sending as\n      well\
    \ as receiving.\n   o  After that, the AS (D1) joins B (2133178233:18294826) to\
    \ the\n      sidebar mix created previously (519c1b9).  The MS attaches the\n\
    \      requested connections and sends confirmation to the AS (D2).\n   o  The\
    \ same transactions already done for B are done for D as well\n      (id1=1264755310:2beeae5b),\
    \ i.e., the <modifyjoin> to make the\n      connection in the main conference\
    \ inactive (E1-2) and the <join>\n      to attach D to the sidebar mix (F1-2).\
    \  At the end of these\n      transactions, A and C will only listen to each other,\
    \ while B and\n      D will listen to each other and to the conference mix as\
    \ a\n      comfortable background.\n   A1. AS -> MS (CFW CONTROL, createconference)\n\
    \   --------------------------------------------\n      CFW 7fdcc2331bef CONTROL\n\
    \      Control-Package: msc-mixer/1.0\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 198\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <createconference reserved-talkers=\"3\" reserved-listeners=\"2\"\
    >\n            <audio-mixing type=\"controller\"/>\n         </createconference>\n\
    \      </mscmixer>\n   A2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 7fdcc2331bef 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 151\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Conference created\"\n         \
    \          conferenceid=\"519c1b9\"/>\n      </mscmixer>\n   B1. AS -> MS (CFW\
    \ CONTROL, join with setgain)\n   ---------------------------------------------\n\
    \      CFW 4e6afb6625e4 CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 226\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"2f5ad43\"\
    \ id2=\"519c1b9\">\n            <stream media=\"audio\" direction=\"sendonly\"\
    >\n               <volume controltype=\"setgain\" value=\"-5\"/>\n           \
    \ </stream>\n         </join>\n      </mscmixer>\n   B2. AS <- MS (CFW 200 OK)\n\
    \   -------------------------\n      CFW 4e6afb6625e4 200\n      Timeout: 10\n\
    \      Content-Type: application/msc-mixer+xml\n      Content-Length: 125\n  \
    \    <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n \
    \        <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   C1. AS -> MS (CFW CONTROL, modifyjoin with 'inactive' status)\n   -----------------------------------------------------------\n\
    \      CFW 3f2dba317c83 CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 193\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <modifyjoin id1=\"\
    2133178233:18294826\" id2=\"2f5ad43\">\n            <stream media=\"audio\" direction=\"\
    inactive\"/>\n         </modifyjoin>\n      </mscmixer>\n   C2. AS <- MS (CFW\
    \ 200 OK)\n   -------------------------\n      CFW 3f2dba317c83 200\n      Timeout:\
    \ 10\n      Content-Type: application/msc-mixer+xml\n      Content-Length: 123\n\
    \      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n\
    \         <response status=\"200\" reason=\"Join modified\"/>\n      </mscmixer>\n\
    \   D1. AS -> MS (CFW CONTROL, join to sidebar)\n   -------------------------------------------\n\
    \      CFW 2443a8582d1d CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 181\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"2133178233:18294826\"\
    \ id2=\"519c1b9\">\n            <stream media=\"audio\" direction=\"sendrecv\"\
    />\n         </join>\n      </mscmixer>\n   D2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 2443a8582d1d 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n\
    \   E1. AS -> MS (CFW CONTROL, modifyjoin with 'inactive' status)\n   -----------------------------------------------------------\n\
    \      CFW 436c6125628c CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 193\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <modifyjoin id1=\"\
    1264755310:2beeae5b\" id2=\"2f5ad43\">\n            <stream media=\"audio\" direction=\"\
    inactive\"/>\n         </modifyjoin>\n      </mscmixer>\n   E2. AS <- MS (CFW\
    \ 200 OK)\n   -------------------------\n      CFW 436c6125628c 200\n      Timeout:\
    \ 10\n      Content-Type: application/msc-mixer+xml\n      Content-Length: 123\n\
    \      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n\
    \         <response status=\"200\" reason=\"Join modified\"/>\n      </mscmixer>\n\
    \   F1. AS -> MS (CFW CONTROL, join to sidebar)\n   -------------------------------------------\n\
    \      CFW 7b7ed00665dd CONTROL\n      Control-Package: msc-mixer/1.0\n      Content-Type:\
    \ application/msc-mixer+xml\n      Content-Length: 181\n      <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n         <join id1=\"1264755310:2beeae5b\"\
    \ id2=\"519c1b9\">\n            <stream media=\"audio\" direction=\"sendrecv\"\
    />\n         </join>\n      </mscmixer>\n   F2. AS <- MS (CFW 200 OK)\n   -------------------------\n\
    \      CFW 7b7ed00665dd 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 125\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join successful\"/>\n      </mscmixer>\n"
- title: 6.3.5.  Floor Control
  contents:
  - "6.3.5.  Floor Control\n   As described in [RFC4597], floor control is a feature\
    \ typically\n   needed and employed in most conference scenarios.  In fact, while\
    \ not\n   a mandatory feature to implement when realizing a conferencing\n   application,\
    \ it provides additional control of the media streams\n   contributed by participants,\
    \ thus allowing for moderation of the\n   available resources.  The Centralized\
    \ Conferencing (XCON) framework\n   [RFC5239] suggests the use of the Binary Floor\
    \ Control Protocol\n   (BFCP) [RFC4582] to achieve the aforementioned functionality.\
    \  That\n   said, a combined use of floor control functionality and the tools\n\
    \   made available by the MEDIACTRL specification for conferencing would\n   definitely\
    \ be interesting to investigate.  [RFC5567] introduces two\n   different approaches\
    \ to integrating floor control with the MEDIACTRL\n   architecture: (i) a topology\
    \ where the floor control server is\n   co-located with the AS and (ii) a topology\
    \ where the floor control\n   server is co-located with the MS.  The two approaches\
    \ are obviously\n   different with respect to the amount of information the AS\
    \ and the MS\n   have to deal with, especially when thinking about the logic behind\n\
    \   the floor queues and automated decisions.  Nevertheless, considering\n   how\
    \ the Media Control Channel Framework is conceived, approach (ii)\n   would need\
    \ a dedicated package (be it an extension or a totally new\n   package) in order\
    \ to make the MS aware of floor control and allow the\n   MS to interact with\
    \ the interested UAC accordingly.  At the time of\n   writing, such a package\
    \ doesn't exist yet, and as a consequence only\n   approach (i) will be dealt\
    \ with in the presented scenario.\n   The scenario will then assume that the Floor\
    \ Control Server (FCS) is\n   co-located with the AS.  This means that all the\
    \ BFCP requests will\n   be sent by Floor Control Participants (FCPs) to the FCS,\
    \ which will\n   make the AS directly aware of the floor statuses.  For the sake\
    \ of\n   simplicity, the scenario assumes that the involved participants are\n\
    \   already aware of all the identifiers needed in order to make BFCP\n   requests\
    \ for a specific conference.  Such information may have been\n   carried according\
    \ to the COMEDIA negotiation as specified in\n   [RFC4583].  It is important to\
    \ note that such information must not\n   reach the MS.  This means that within\
    \ the context of the 3PCC\n   mechanism that may have been used in order to attach\
    \ a UAC to the MS,\n   all the BFCP-related information negotiated by the AS and\
    \ the UAC\n   must be removed before making the negotiation available to the MS,\n\
    \   which may be unable to understand the specification.  A simplified\n   example\
    \ of how this could be achieved is presented in Figure 41.\n   Please note that\
    \ within the context of this example scenario,\n   different identifiers may be\
    \ used to address the same entity.\n   Specifically, in this case the UAC (the\
    \ endpoint sending and\n   receiving media) is also a FCP, as it negotiates a\
    \ BFCP channel too.\n  UAC                               AS\n (FCP)          \
    \                   (FCS)                              MS\n  |               \
    \                  |                                 |\n  | INVITE (SDP: RTP+BFCP)\
    \          |                                 |\n  |-------------------------------->|\
    \                                 |\n  |                                 | INVITE\
    \ (SDP: RTP)               |\n  |                                 |-------------------------------->|\n\
    \  |                                 |          200 (SDP: RTP'+labels) |\n  |\
    \                                 |<--------------------------------|\n  |   \
    \                     match +--|                                 |\n  |      \
    \                 floors |  |                                 |\n  |         \
    \            & labels +->|                                 |\n  |            \
    \                     |                                 |\n  |    200 (SDP: RTP'+BFCP'+labels)\
    \ |                                 |\n  |<--------------------------------| \
    \                                |\n  | ACK                             |    \
    \                             |\n  |-------------------------------->|       \
    \                          |\n  |                                 | ACK      \
    \                       |\n  |                                 |-------------------------------->|\n\
    \  |                                 |                                 |\n  |<<######################\
    \ RTP MEDIA STREAMS ######################>>|\n  |                           \
    \      |                                 |\n  |<<******** BFCP CHANNEL *******>>|\
    \                                 |\n  |                                 |   \
    \                              |\n  .                                 .      \
    \                           .\n  .                                 .         \
    \                        .\n             Figure 41: Floor Control: Example of\
    \ Negotiation\n   From the media and framework perspective, such a scenario doesn't\n\
    \   differ much from the conferencing scenarios presented earlier.  It is\n  \
    \ more interesting to focus on the chosen topology for the scenario, as\n   depicted\
    \ in Figure 42.\n   +-------+                    +--------+\n   |  UAC  |    \
    \                |   AS   |                     +-------+\n   | (FCP) |<******\
    \ BFCP ******>|  (FCS) |<****** BFCP *******>| (FCC) |\n   +-------+         \
    \           +--------+                     +-------+\n       ^               \
    \              ^\n       |                             |\n       |           \
    \              CFW |\n       |                             |\n       |       \
    \                      v\n       |                        +--------+\n       +----------RTP---------->|\
    \   MS   |\n                                +--------+\n               Figure\
    \ 42: Floor Control: Overall Perspective\n   The AS, besides maintaining the already-known\
    \ SIP signaling among the\n   involved parties, also acts as the FCS for the participants\
    \ in the\n   conferences for which it is responsible.  In the scenario, two Floor\n\
    \   Control Participants are involved: a basic Participant (FCP) and a\n   Chair\
    \ (FCC).\n   As in all of the previously described conferencing examples, in the\n\
    \   framework this can be achieved by means of the Mixer Control Package.\n  \
    \ Assuming that the conference has been created, the participant has\n   been\
    \ attached ('recvonly') to it, and the participant is aware of the\n   involved\
    \ BFCP identifiers, the needed steps can be summarized in the\n   following list:\n\
    \   1.  The assigned chair, FCC, sends a subscription for events related\n   \
    \    to the floor for which it is responsible (FloorQuery).\n   2.  The FCP sends\
    \ a BFCP request (FloorRequest) to access the audio\n       resource (\"I want\
    \ to speak\").\n   3.  The FCS (AS) sends a provisional response to the FCP\n\
    \       (FloorRequestStatus PENDING) and handles the request in its\n       queue.\
    \  Since a chair is assigned to this floor, the request is\n       forwarded to\
    \ the FCC for a decision (FloorStatus).\n   4.  The FCC makes a decision and sends\
    \ it to the FCS (ChairAction\n       ACCEPTED).\n   5.  The FCS takes note of\
    \ the decision and updates the queue\n       accordingly.  The decision is sent\
    \ to the FCP (FloorRequestStatus\n       ACCEPTED).  The floor has not been granted\
    \ yet.\n   6.  As soon as the queue allows it, the floor is actually granted to\n\
    \       the FCP.  The AS, which is co-located with the FCS, understands\n    \
    \   in its business logic that such an event is associated with the\n       audio\
    \ resource being granted to the FCP.  As a consequence, a\n       <modifyjoin>\
    \ ('sendrecv') is sent through the Control Channel to\n       the MS in order\
    \ to unmute the FCP UAC in the conference.\n   7.  The FCP is notified of this\
    \ event (FloorRequestStatus GRANTED),\n       thus ending the scenario.\n   A\
    \ diagram of such a sequence of transactions (also involving the BFCP\n   message\
    \ flow at a higher level) is depicted in Figure 43:\n UAC1      UAC2       AS\n\
    \ (FCP)     (FCC)     (FCS)                               MS\n  |         |  \
    \       |                                  |\n  |<<####################################################|\n\
    \  |   UAC1 is muted (recvonly stream) in the conference  |\n  |<<####################################################|\n\
    \  |         |         |                                  |\n  |         | FloorQuery\
    \                                 |\n  |         |*******>>|                 \
    \                 |\n  |         |         |--+ handle                       \
    \ |\n  |         |         |  | subscription                  |\n  |         |\
    \         |<-+                               |\n  |         | FloorStatus    \
    \                            |\n  |         |<<*******|                      \
    \            |\n  |         |         |                                  |\n \
    \ | FloorRequest      |                                  |\n  |*****************>>|\
    \                                  |\n  |         |         |--+ handle      \
    \                  |\n  |         |         |  | request                     \
    \  |\n  |           Pending |<-+ (queue)                       |\n  |<<*****************|\
    \                                  |\n  |         |         |                \
    \                  |\n  |         | FloorStatus                              \
    \  |\n  |         |<<*******|                                  |\n  |        \
    \ |         |                                  |\n  |         | ChairAction (ACCEPT)\
    \                       |\n  |         |*******>>|                           \
    \       |\n  |         | ChairActionAck                             |\n  |   \
    \      |<<*******|                                  |\n  |         |         |--+\
    \ handle                        |\n  |         |         |  | decision       \
    \               |\n  |         |         |<-+ (queue)                       |\n\
    \  |          Accepted |                                  |\n  |<<*****************|\
    \                                  |\n  |         | FloorStatus              \
    \                  |\n  |         |<<*******|                                \
    \  |\n  |         |         |                                  |\n  |        \
    \ |         |--+ queue                         |\n  |         |         |  | grants\
    \                        |\n  |         |         |<-+ floor                 \
    \        |\n  |         |         |                                  |\n  |  \
    \       |         | 1. CONTROL (modjoin UAC<->conf)  |\n  |         |        \
    \ |++++++++++++++++++++++++++++++++>>|\n  |         |         |              \
    \                    |--+ modjoin\n  |         |         |                   \
    \               |  | UAC & conf\n  |         |         |                     \
    \   2. 200 OK |<-+ (sendrecv)\n  |         |         |<<++++++++++++++++++++++++++++++++|\n\
    \  |         |         |                                  |\n  |<<##################################################>>|\n\
    \  |   UAC1 is now unmuted (sendrecv) in the conference   |\n  |        and can\
    \ speak, contributing to the mix        |\n  |<<##################################################>>|\n\
    \  |         |         |                                  |\n  |           Granted\
    \ |                                  |\n  |<<*****************|              \
    \                    |\n  |         | FloorStatus                            \
    \    |\n  |         |<<*******|                                  |\n  |      \
    \   |         |                                  |\n  .         .            \
    \                                .\n  .         .                            \
    \                .\n             Figure 43: Floor Control: Framework Transactions\n\
    \   As can easily be deduced from the above diagram, the complex\n   interaction\
    \ at the BFCP level only results in a single transaction at\n   the MEDIACTRL\
    \ level.  In fact, the purpose of the BFCP transactions\n   is to moderate access\
    \ to the audio resource, which means providing\n   the event trigger to MEDIACTRL-based\
    \ conference manipulation\n   transactions.  Before being granted the floor, the\
    \ FCP UAC is\n   excluded from the conference mix at the MEDIACTRL level ('recvonly').\n\
    \   As soon as the floor has been granted, the FCP UAC is included in the\n  \
    \ mix.  In MEDIACTRL words:\n   o  Since the FCP UAC must be included in the audio\
    \ mix, a\n      <modifyjoin> is sent to the MS in a CONTROL directive.  The\n\
    \      <modifyjoin> has as identifiers the connectionid associated with\n    \
    \  the FCP UAC (e1e1427c:1c998d22) and the conferenceid of the mix\n      (cf45ee2).\
    \  The <stream> element tells the MS that the audio media\n      stream between\
    \ the two must become bidirectional ('sendrecv'),\n      changing the previous\
    \ status ('recvonly').  Please note that in\n      this case only audio was involved\
    \ in the conference; if video were\n      involved as well, and video had to be\
    \ unchanged, a <stream>\n      directive for video had to be placed in the request\
    \ as well in\n      order to maintain its current status.\n   1. AS -> MS (CFW\
    \ CONTROL)\n   -------------------------\n      CFW gh67ffg56w21 CONTROL\n   \
    \   Control-Package: msc-mixer/1.0\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 182\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <modifyjoin id1=\"e1e1427c:1c998d22\" id2=\"cf45ee2\">\n         \
    \   <stream media=\"audio\" direction=\"sendrecv\"/>\n         </modifyjoin>\n\
    \      </mscmixer>\n   2. AS <- MS (CFW 200 OK)\n   ------------------------\n\
    \      CFW gh67ffg56w21 200\n      Timeout: 10\n      Content-Type: application/msc-mixer+xml\n\
    \      Content-Length: 123\n      <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n         <response status=\"200\" reason=\"Join modified\"/>\n      </mscmixer>\n"
- title: 6.4.  Additional Scenarios
  contents:
  - "6.4.  Additional Scenarios\n   This section includes additional scenarios that\
    \ can be of interest\n   when dealing with AS<->MS flows.  The aim of the following\n\
    \   subsections is to present the use of features peculiar to the IVR\n   package:\
    \ specifically, variable announcements, VCR (video cassette\n   recorder) prompts,\
    \ parallel playback, recurring dialogs, and custom\n   grammars.  To describe\
    \ how call flows involving such features might\n   happen, three sample scenarios\
    \ have been chosen:\n   1.  Voice Mail (variable announcements for digits, VCR\
    \ controls).\n   2.  Current Time (variable announcements for date and time, parallel\n\
    \       playback).\n   3.  DTMF-driven Conference Manipulation (recurring dialogs,\
    \ custom\n       grammars).\n"
- title: 6.4.1.  Voice Mail
  contents:
  - "6.4.1.  Voice Mail\n   An application that typically uses the services an MS\
    \ can provide is\n   Voice Mail.  In fact, while it is clear that many of its\
    \ features are\n   part of the application logic (e.g., the mapping of a URI with\
    \ a\n   specific user's voice mailbox, the list of messages and their\n   properties,\
    \ and so on), the actual media work is accomplished through\n   the MS.  Features\
    \ needed by a Voice Mail application include the\n   ability to record a stream\
    \ and play it back at a later time, give\n   verbose announcements regarding the\
    \ status of the application,\n   control the playout of recorded messages by means\
    \ of VCR controls,\n   and so on.  These features are all supported by the MS\
    \ through the\n   IVR package.\n   Without delving into the details of a full\
    \ Voice Mail application and\n   all its possible use cases, this section will\
    \ cover a specific\n   scenario and try to deal with as many interactions as possible\
    \ that\n   may happen between the AS and the MS in such a context.  This\n   scenario,\
    \ depicted as a sequence diagram in Figure 44, will be as\n   follows:\n   1.\
    \  The UAC INVITEs a URI associated with his mailbox, and the AS\n       follows\
    \ the previously explained procedure to have the UAC\n       negotiate a new media\
    \ session with the MS.\n   2.  The UAC is first prompted with an announcement\
    \ giving him the\n       amount of available new messages in the mailbox.  After\
    \ that, the\n       UAC can choose which message to access by sending a DTMF tone.\n\
    \   3.  The UAC is then presented with a VCR-controlled announcement, in\n   \
    \    which the chosen received mail is played back to him.  VCR\n       controls\
    \ allow him to navigate through the prompt.\n   This is a quite oversimplified\
    \ scenario, considering that it doesn't\n   even allow the UAC to delete old messages\
    \ or organize them but just\n   to choose which received message to play.  Nevertheless,\
    \ it gives us\n   the chance to deal with variable announcements and VCR controls\
    \ --\n   two typical features that a Voice Mail application would almost\n   always\
    \ take advantage of.  Other features that a Voice Mail\n   application would rely\
    \ upon (e.g., recording streams, event-driven\n   IVR menus, and so on) have been\
    \ introduced in previous sections, and\n   so representing them would be redundant.\
    \  This means that the\n   presented call flows assume that some messages have\
    \ already been\n   recorded and are available at reachable locations.  The example\
    \ also\n   assumes that the AS has placed the recordings in its own storage\n\
    \   facilities, since it is not safe to rely upon the internal MS\n   storage,\
    \ which is likely to be temporary.\n UAC                      AS             \
    \                    MS\n  |                       |                         \
    \         |\n  |                       | A1. CONTROL (play variables and  |\n\
    \  |                       |      collect the user's choice)  |\n  |         \
    \              |++++++++++++++++++++++++++++++++>>|\n  |                     \
    \  |                                  | prepare &\n  |                       |\
    \                                  |--+ start\n  |                       |   \
    \                               |  | the\n  |                       |        \
    \               A2. 200 OK |<-+ dialog\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |                \"You have five messages ...\"              |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |         \
    \              |      B1. CONTROL (<collectinfo>) |\n  |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n  |                       | B2. 200 OK\
    \                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  |         \
    \              | C1. CONTROL (VCR for chosen msg) |\n  |                     \
    \  |++++++++++++++++++++++++++++++++>>|\n  |                       |         \
    \                         | prepare &\n  |                       |           \
    \                       |--+ start\n  |                       |              \
    \                    |  | the\n  |                       |                   \
    \    C2. 200 OK |<-+ dialog\n  |                       |<<++++++++++++++++++++++++++++++++|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |          \"Hi there, I tried to call you but...\"          |--+\n  |<<########################################################|\
    \  | handle\n  |                       |                                  |  |\
    \ VCR-\n  |########################################################>>|  | driven\n\
    \  |        The UAC controls the playout using DTMF           |  | (DTMF)\n  |########################################################>>|\
    \  |playout\n  |                       |                                  |<-+\n\
    \  |                       |       D1. CONTROL (<dtmfnotify>) |\n  |         \
    \              |<<++++++++++++++++++++++++++++++++|\n  |                     \
    \  | D2. 200 OK                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  .         \
    \              .                                  .\n  .       (other events are\
    \ received in the meantime)        |\n  .                       .            \
    \                      .\n  |                       |      E1. CONTROL (<controlinfo>)\
    \ |\n  |                       |<<++++++++++++++++++++++++++++++++|\n  |     \
    \                  | E2. 200 OK                       |\n  |                 \
    \      |++++++++++++++++++++++++++++++++>>|\n  |                       |     \
    \                             |\n  .                       .                 \
    \                 .\n  .                       .                             \
    \     .\n               Figure 44: Voice Mail: Framework Transactions\n   The\
    \ framework transaction steps are as follows:\n   o  The first transaction (A1)\
    \ is addressed to the IVR package (msc-\n      ivr).  It is basically an [RFC6231]\
    \ 'promptandcollect' dialog, but\n      with a slight difference: some of the\
    \ prompts to play are actual\n      audio files, for which a URI is provided (media\
    \ loc=\"xxx\"), while\n      others are so-called <variable> prompts; these <variable>\
    \ prompts\n      are actually constructed by the MS itself according to the\n\
    \      directives provided by the AS.  In this example, the sequence of\n    \
    \  prompts requested by the AS is as follows:\n      1.  play a wav file (\"you\
    \ have...\").\n      2.  play a digit (\"five...\") by building it (variable:\
    \ digit=5).\n      3.  play a wav file (\"messages...\").\n      A DTMF collection\
    \ is requested as well (<collect>) to be taken\n      after the prompts have been\
    \ played.  The AS is only interested in\n      a single digit (maxdigits=1).\n\
    \   o  The transaction is handled by the MS, and if everything works fine\n  \
    \    (i.e., the MS retrieved all the audio files and successfully built\n    \
    \  the variable announcements), the dialog is started; its start is\n      reported,\
    \ together with the associated identifier (5db01f4) to the\n      AS in a terminating\
    \ 200 OK message (A2).\n   o  The AS then waits for the dialog to end in order\
    \ to retrieve the\n      results in which it is interested (in this case, the\
    \ DTMF tone the\n      UAC chooses, since it will affect which message will have\
    \ to be\n      played subsequently).\n   o  The UAC hears the prompts and chooses\
    \ a message to play.  In this\n      example, he wants to listen to the first\
    \ message and so inputs\n      \"1\".  The MS intercepts this tone and notifies\
    \ the AS of it in a\n      newly created CONTROL event message (B1); this CONTROL\
    \ includes\n      information about how each single requested operation ended\n\
    \      (<promptinfo> and <collectinfo>).  Specifically, the event states\n   \
    \   that the prompt ended normally (termmode=completed) and that the\n      subsequently\
    \ collected tone is 1 (dtmf=1).  The AS acks the event\n      (B2), since the\
    \ dialogid provided in the message is the same as\n      that of the previously\
    \ started dialog.\n   o  At this point, the AS uses the value retrieved from the\
    \ event to\n      proceed with its business logic.  It decides to present the\
    \ UAC\n      with a VCR-controllable playout of the requested message.  This is\n\
    \      done with a new request to the IVR package (C1), which contains\n     \
    \ two operations: <prompt> to address the media file to play (an old\n      recording)\
    \ and <control> to instruct the MS about how the playout\n      of this media\
    \ file shall be controlled via DTMF tones provided by\n      the UAC (in this\
    \ example, different DTMF digits are associated\n      with different actions,\
    \ e.g., pause/resume, fast forward, rewind,\n      and so on).  The AS also subscribes\
    \ to DTMF events related to this\n      control operation (matchmode=control),\
    \ which means that the MS is\n      to trigger an event any time that a DTMF associated\
    \ with a control\n      operation (e.g., 7=pause) is intercepted.\n   o  The MS\
    \ prepares the dialog and, when the playout starts, sends\n      notification\
    \ in a terminating 200 OK message (C2).  At this point,\n      the UAC is presented\
    \ with the prompt and can use DTMF digits to\n      control the playback.\n  \
    \ o  As explained previously, any DTMF associated with a VCR operation\n     \
    \ is then reported to the AS, together with a timestamp stating when\n      the\
    \ event happened.  An example is provided (D1) in which the UAC\n      pressed\
    \ the fast-forward key (6) at a specific time.  Of course,\n      as for any other\
    \ MS-generated event, the AS acks it (D2).\n   o  When the playback ends (whether\
    \ because the media reached its\n      termination or because any other interruption\
    \ occurred), the MS\n      triggers a concluding event with information about\
    \ the whole\n      dialog (E1).  This event, besides including information about\
    \ the\n      prompt itself (<promptinfo>), also includes information related to\n\
    \      the VCR operations (<controlinfo>), that is, all the VCR controls\n   \
    \   the UAC used (fast forward/rewind/pause/resume in this example)\n      and\
    \ when it happened.  The final ack by the AS (E2) concludes the\n      scenario.\n"
- title: A1. AS -> MS (CFW CONTROL, play and collect)
  contents:
  - 'A1. AS -> MS (CFW CONTROL, play and collect)

    '
- title: '--------------------------------------------'
  contents:
  - "--------------------------------------------\n   CFW 2f931de22820 CONTROL\n \
    \  Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n  \
    \ Content-Length: 429\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n      <dialogstart connectionid=\"10514b7f:6a900179\">\n         <dialog>\n\
    \            <prompt>\n               <media\n            loc=\"http://www.example.net/prompts/vm-youhave.wav\"\
    \n            type=\"audio/x-wav\"/>\n               <variable value=\"5\" type=\"\
    digits\"/>\n               <media\n           loc=\"http://www.example.net/prompts/vm-messages.wav\"\
    \n           type=\"audio/x-wav\"/>\n            </prompt>\n            <collect\
    \ maxdigits=\"1\" escapekey=\"*\"\n                     cleardigitbuffer=\"true\"\
    />\n         </dialog>\n      </dialogstart>\n   </mscivr>\n"
- title: A2. AS <- MS (CFW 200 OK)
  contents:
  - 'A2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 2f931de22820 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"5db01f4\"/>\n   </mscivr>\n"
- title: B1. AS <- MS (CFW CONTROL event)
  contents:
  - 'B1. AS <- MS (CFW CONTROL event)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 7c97adc41b3e CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 270\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <event\
    \ dialogid=\"5db01f4\">\n         <dialogexit status=\"1\" reason=\"Dialog successfully\
    \ completed\">\n            <promptinfo duration=\"11713\" termmode=\"completed\"\
    />\n            <collectinfo dtmf=\"1\" termmode=\"match\"/>\n         </dialogexit>\n\
    \      </event>\n   </mscivr>\n"
- title: B2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'B2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 7c97adc41b3e 200\n"
- title: C1. AS -> MS (CFW CONTROL, VCR)
  contents:
  - 'C1. AS -> MS (CFW CONTROL, VCR)

    '
- title: '-------------------------------'
  contents:
  - "-------------------------------\n   CFW 3140c24614bb CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 423\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <dialogstart\
    \ connectionid=\"10514b7f:6a900179\">\n         <dialog>\n            <prompt\
    \ bargein=\"false\">\n               <media\n  loc=\"http://www.example.com/messages/recording-4ca9fc2.mpg\"\
    />\n            </prompt>\n            <control gotostartkey=\"1\" gotoendkey=\"\
    3\"\n                     ffkey=\"6\" rwkey=\"4\" pausekey=\"7\" resumekey=\"\
    9\"\n                     volupkey=\"#\" voldnkey=\"*\"/>\n            </dialog>\n\
    \         <subscribe>\n            <dtmfsub matchmode=\"control\"/>\n        \
    \ </subscribe>\n      </dialogstart>\n   </mscivr>\n"
- title: C2. AS <- MS (CFW 200 OK)
  contents:
  - 'C2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 3140c24614bb 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"3e936e0\"/>\n   </mscivr>\n"
- title: D1. AS <- MS (CFW CONTROL event, dtmfnotify)
  contents:
  - 'D1. AS <- MS (CFW CONTROL event, dtmfnotify)

    '
- title: '--------------------------------------------'
  contents:
  - "--------------------------------------------\n   CFW 361840da0581 CONTROL\n \
    \  Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n  \
    \ Content-Length: 179\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n      <event dialogid=\"3e936e0\">\n         <dtmfnotify matchmode=\"control\"\
    \ dtmf=\"6\"\n                     timestamp=\"2008-12-16T12:58:36Z\"/>\n    \
    \  </event>\n   </mscivr>\n"
- title: D2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'D2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 361840da0581 200\n   \
    \   [..] The other VCR DTMF notifications are skipped for brevity [..]\n"
- title: E1. AS <- MS (CFW CONTROL event, dialogexit)
  contents:
  - 'E1. AS <- MS (CFW CONTROL event, dialogexit)

    '
- title: '--------------------------------------------'
  contents:
  - "--------------------------------------------\n   CFW 3ffab81c21e9 CONTROL\n \
    \  Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n  \
    \ Content-Length: 485\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n      <event dialogid=\"3e936e0\">\n         <dialogexit status=\"1\" reason=\"\
    Dialog successfully completed\">\n            <promptinfo duration=\"10270\" termmode=\"\
    completed\"/>\n            <controlinfo>\n               <controlmatch dtmf=\"\
    6\" timestamp=\"2008-12-16T12:58:36Z\"/>\n               <controlmatch dtmf=\"\
    4\" timestamp=\"2008-12-16T12:58:37Z\"/>\n               <controlmatch dtmf=\"\
    7\" timestamp=\"2008-12-16T12:58:38Z\"/>\n               <controlmatch dtmf=\"\
    9\" timestamp=\"2008-12-16T12:58:40Z\"/>\n            </controlinfo>\n       \
    \  </dialogexit>\n      </event>\n   </mscivr>\n"
- title: E2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'E2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 3ffab81c21e9 200\n"
- title: 6.4.2.  Current Time
  contents:
  - "6.4.2.  Current Time\n   An interesting scenario to create with the help of features\
    \ provided\n   by the MS is what is typically called 'Current Time'.  A UAC calls\
    \ a\n   URI, which presents the caller with the current date and time.  As\n \
    \  can easily be deduced by the very nature of the application, variable\n   announcements\
    \ play an important role in this scenario.  In fact,\n   rather than having the\
    \ AS build an announcement according to the\n   current time using different framework\
    \ messages, it is much easier to\n   rely upon the \"variable announcements\"\
    \ mechanism provided by the IVR\n   package, as variable announcements provide\
    \ several ways to deal with\n   dates and times.\n   To make the scenario more\
    \ interesting and have it cover more\n   functionality, the application is also\
    \ assumed to have background\n   music played during the announcement.  Because\
    \ most of the\n   announcements will be variable, a means is needed to have more\n\
    \   streams played in parallel on the same connection.  This can be\n   achieved\
    \ in two different ways:\n   1.  two separate and different dialogs, playing the\
    \ variable\n       announcements and the background track, respectively.\n   2.\
    \  a single dialog implementing a parallel playback.\n   The first approach assumes\
    \ that the available MS implements implicit\n   mixing, which may or may not be\
    \ supported since it's a recommended\n   feature but not mandatory.  The second\
    \ approach assumes that the MS\n   implements support for more streams of the\
    \ same media type (in this\n   case audio) in the same dialog, which, exactly\
    \ as for the case of\n   implicit mixing, is not to be taken for granted.  Because\
    \ the first\n   approach is quite straightforward and easy to understand, the\n\
    \   following scenario uses the second approach and assumes that the\n   available\
    \ MS supports parallel playback of more audio tracks within\n   the context of\
    \ the same dialog.\n   That said, the covered scenario, depicted as a sequence\
    \ diagram in\n   Figure 45, will be as follows:\n   1.  The UAC INVITEs a URI\
    \ associated with the Current Time\n       application, and the AS follows the\
    \ previously explained\n       procedure to have the UAC negotiate a new media\
    \ session with the\n       MS.\n   2.  The UAC is presented with an announcement\
    \ including (i) a voice\n       stating the current date and time; (ii) a background\
    \ music track;\n       and (iii) a mute background video track.\n UAC        \
    \              AS                                 MS\n  |                    \
    \   |                                  |\n  |                       | A1. CONTROL\
    \ (play variables)     |\n  |                       |++++++++++++++++++++++++++++++++>>|\
    \ prepare\n  |                       |                                  |--+ and\n\
    \  |                       |                          A2. 202 |  | start\n  |\
    \                       |<<++++++++++++++++++++++++++++++++|  | the\n  |     \
    \                  |                                  |  | dialog\n  |       \
    \                |                                  |  | (takes\n  |         \
    \              |           A3. REPORT (terminate) |<-+ time)\n  |            \
    \           |<<++++++++++++++++++++++++++++++++|\n  |                       |\
    \ A4. 200 OK                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  |<<########################################################|\n\
    \  |            \"16th of december 2008, 5:31 PM...\"           |\n  |<<########################################################|\n\
    \  |                       |                                  |\n  |         \
    \              |       B1. CONTROL (<promptinfo>) |\n  |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n  |                       | B2. 200 OK\
    \                       |\n  |                       |++++++++++++++++++++++++++++++++>>|\n\
    \  |                       |                                  |\n  .         \
    \              .                                  .\n  .                     \
    \  .                                  .\n  .                       .         \
    \                         .\n              Figure 45: Current Time: Framework\
    \ Transactions\n   The framework transaction steps are as follows:\n   o  The\
    \ first transaction (A1) is addressed to the IVR package (msc-\n      ivr); it\
    \ is basically an [RFC6231] 'playannouncements' dialog,\n      but, unlike all\
    \ the scenarios presented so far, it includes\n      directives for a parallel\
    \ playback, as indicated by the <par>\n      element.  There are three flows to\
    \ play in parallel:\n      *  a sequence (<seq>) of variable and static announcements\
    \ (the\n         actual time and date).\n      *  a music track ('media=music.wav')\
    \ to be played in the\n         background at a lower volume (soundLevel=50%).\n\
    \      *  a mute background video track (media=clock.mpg).\n      The global announcement\
    \ ends when the longest of the three\n      parallel steps ends (endsync=last).\
    \  This means that if one of the\n      steps ends before the others, the step\
    \ is muted for the rest of\n      the playback.  In this example, the series of\
    \ static and\n      <variable> announcements is requested by the AS:\n      *\
    \  play a wav file (\"Tuesday...\").\n      *  play a date (\"16th of december\
    \ 2008...\") by building it\n         (variable: date with a ymd=year/month/day\
    \ format).\n      *  play a time (\"5:31 PM...\") by building it (variable: time\
    \ with\n         a t12=12 hour day format, am/pm).\n   o  The transaction is extended\
    \ by the MS (A2) with a new timeout, as\n      in this case the MS needs some\
    \ more time to retrieve all the\n      needed media files.  Should the new timeout\
    \ expire as well, the MS\n      would send a further message to extend it again\
    \ (a REPORT update),\n      but for the sake of simplicity we assume that in this\
    \ scenario it\n      is not needed.  If everything went fine (i.e., the MS retrieved\n\
    \      all the audio files and successfully built the variable\n      announcements,\
    \ and it supports parallel playback as requested),\n      the dialog is started.\
    \  Its start is reported, together with the\n      associated identifier (415719e),\
    \ to the AS in a terminating REPORT\n      message (A3).\n   o  The AS acks the\
    \ REPORT (A4) and waits for the dialog to end in\n      order to either conclude\
    \ the application or proceed to further\n      steps if required by the application\
    \ itself.\n   o  When the last of the three parallel announcements ends, the dialog\n\
    \      terminates, and an event (B1) is triggered to the AS with the\n      relevant\
    \ information (promptinfo).  The AS acks (B2) and\n      terminates the scenario.\n"
- title: A1. AS -> MS (CFW CONTROL, play)
  contents:
  - 'A1. AS -> MS (CFW CONTROL, play)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 0c7680191bd2 CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 506\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <dialogstart\
    \ connectionid=\"21c8e07b:055a893f\">\n       <dialog>\n         <prompt bargein=\"\
    true\">\n           <par endsync=\"last\">\n             <seq>\n             \
    \  <media loc=\"http://www.example.com/day-2.wav\"/>\n               <variable\
    \ value=\"2008-12-16\" type=\"date\" format=\"ymd\"/>\n               <variable\
    \ value=\"17:31\" type=\"time\" format=\"t12\"/>\n             </seq>\n      \
    \       <media loc=\"http://www.example.com/music.wav\"\n                    soundLevel=\"\
    50%\"/>\n             <media loc=\"http://www.example.com/clock.mpg\"/>\n    \
    \       </par>\n         </prompt>\n       </dialog>\n     </dialogstart>\n  \
    \ </mscivr>\n"
- title: A2. AS <- MS (CFW 202)
  contents:
  - 'A2. AS <- MS (CFW 202)

    '
- title: '----------------------'
  contents:
  - "----------------------\n   CFW 0c7680191bd2 202\n   Timeout: 5\n"
- title: A3. AS <- MS (CFW REPORT terminate)
  contents:
  - 'A3. AS <- MS (CFW REPORT terminate)

    '
- title: '-----------------------------------'
  contents:
  - "-----------------------------------\n   CFW 0c7680191bd2 REPORT\n   Seq: 1\n\
    \   Status: terminate\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n\
    \   Content-Length: 137\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <response status=\"200\" reason=\"Dialog started\" dialogid=\"415719e\"\
    />\n   </mscivr>\n"
- title: A4. AS -> MS (CFW 200, ACK to 'REPORT terminate')
  contents:
  - 'A4. AS -> MS (CFW 200, ACK to ''REPORT terminate'')

    '
- title: '-------------------------------------------------'
  contents:
  - "-------------------------------------------------\n   CFW 0c7680191bd2 200\n\
    \   Seq: 1\n"
- title: B1. AS <- MS (CFW CONTROL event)
  contents:
  - 'B1. AS <- MS (CFW CONTROL event)

    '
- title: '--------------------------------'
  contents:
  - "--------------------------------\n   CFW 4481ca0c4fca CONTROL\n   Control-Package:\
    \ msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 229\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n      <event\
    \ dialogid=\"415719e\">\n         <dialogexit status=\"1\" reason=\"Dialog successfully\
    \ completed\">\n            <promptinfo duration=\"8046\" termmode=\"completed\"\
    />\n         </dialogexit>\n      </event>\n   </mscivr>\n"
- title: B2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'B2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 4481ca0c4fca 200\n"
- title: 6.4.3.  DTMF-Driven Conference Manipulation
  contents:
  - "6.4.3.  DTMF-Driven Conference Manipulation\n   To complete the scenarios presented\
    \ in Section 6.3, this section\n   deals with how the AS can use the MS to detect\
    \ DTMF tones from\n   conference participants and take actions on the conference\n\
    \   accordingly.  A typical example is when participants in a conference\n   are\
    \ provided with specific codes to:\n   o  mute/unmute themselves in the conference;\n\
    \   o  change their volume in the conference, or the volume of the\n      conference\
    \ itself;\n   o  change the video layout in the conference, if allowed;\n   o\
    \  kick abusive users out of the conference;\n   and so on.  To achieve all this,\
    \ the simplest thing an AS can do is\n   to prepare a recurring DTMF collection\
    \ for each participant with\n   specific grammars to match.  If the collected\
    \ tones match the\n   grammar, the MS would notify the AS of the tones and start\
    \ the\n   collection again.  Upon receipt of <collectinfo> events, the AS would\n\
    \   in turn originate the proper related request, e.g., a <modifyjoin> on\n  \
    \ the participant's stream with the conference.  This is made possible\n   by\
    \ three features provided by the IVR package:\n   1.  the 'repeatCount' attribute.\n\
    \   2.  the subscription mechanism.\n   3.  the Speech Recognition Grammar Specification\
    \ (SRGS) [SRGS].\n   The first feature allows recurring instances of the same\
    \ dialog\n   without the need for additional requests upon completion of the\n\
    \   dialog itself.  In fact, the 'repeatCount' attribute indicates how\n   many\
    \ times the dialog has to be repeated.  When the attribute has the\n   value 0,\
    \ it means that the dialog has to be repeated indefinitely,\n   meaning that it's\
    \ up to the AS to destroy it by means of a\n   <dialogterminate> request when\
    \ the dialog is no longer needed.  The\n   second feature allows the AS to subscribe\
    \ to events related to the\n   IVR package without waiting for the dialog to end,\
    \ e.g., matching\n   DTMF collections in this case.  Finally, the last feature\
    \ allows\n   custom matching grammars to be specified.  This way, only a subset\
    \ of\n   the possible DTMF strings can be specified, so that only those\n   matches\
    \ in which the AS is interested are reported.  Grammars other\n   than SRGS may\
    \ be supported by the MS and will achieve the same\n   result.  This document\
    \ will only describe the use of an SRGS grammar,\n   since support for SRGS is\
    \ mandated in [RFC6231].\n   To identify a single sample scenario, we assume that\
    \ a participant\n   has successfully joined a conference, e.g., as detailed in\
    \ Figure 32.\n   We also assume that the following codes are to be provided within\
    \ the\n   conference to participants in order to let them take advantage of\n\
    \   advanced features:\n   1.  *6 to mute/unmute themselves (on/off trigger).\n\
    \   2.  *1 to lower their own volume in the conference and *3 to raise\n     \
    \  it.\n   3.  *7 to lower the volume of the conference stream they are\n    \
    \   receiving and *9 to raise it.\n   4.  *0 to leave the conference.\n   This\
    \ means that six different codes are supported and are to be\n   matched in the\
    \ requested DTMF collection.  All other codes are\n   collected by the MS but\
    \ discarded, and no event is triggered to the\n   AS.  Because all the codes have\
    \ the '*' (star) DTMF code in common,\n   the following is an example of an SRGS\
    \ grammar that may be used in\n   the request by the AS:\n     <grammar mode=\"\
    dtmf\" version=\"1.0\"\n              xmlns=\"http://www.w3.org/2001/06/grammar\"\
    >\n       <rule id=\"digit\">\n         <one-of>\n           <item>0</item>\n\
    \           <item>1</item>\n           <item>3</item>\n           <item>6</item>\n\
    \           <item>7</item>\n           <item>9</item>\n         </one-of>\n  \
    \     </rule>\n       <rule id=\"action\" scope=\"public\">\n         <item>\n\
    \           *\n           <item><ruleref uri=\"#digit\"/></item>\n         </item>\n\
    \       </rule>\n     </grammar>\n   As can be deduced by looking at the grammar,\
    \ the presented SRGS XML\n   code specifies exactly the requirements for the collections\
    \ to match.\n   The rule is to match any string that has a star ('*') followed\
    \ by a\n   single supported digit (0, 1, 3, 6, 7, or 9).  Such grammar, as\n \
    \  stated in [RFC6231], may be either provided inline in the request\n   itself\
    \ or referenced externally by means of the 'src' attribute.  In\n   the example\
    \ scenario, we'll put it inline, but an external reference\n   to the same document\
    \ would achieve exactly the same result.\n   Figure 46 shows how the AS might\
    \ request the recurring collection for\n   a UAC.  As before, the example assumes\
    \ that the UAC is already a\n   participant in the conference.\n UAC         \
    \         AS                                     MS\n  |                   | \
    \                                     |\n  |                   | A1. CONTROL (recurring\
    \ collection)   |\n  |                   |++++++++++++++++++++++++++++++++++++>>|\n\
    \  |                   |                                      |--+ start\n  |\
    \                   |                                      |  | the\n  |     \
    \              |                           A2. 200 OK |<-+ dialog\n  |       \
    \            |<<++++++++++++++++++++++++++++++++++++|\n  |                   |\
    \                                      |\n  |########################################################>>|\n\
    \  |          Recurring DTMF digit collection starts          |--+ get\n  |########################################################>>|\
    \  | DTMF\n  |                   |                                      |<-+ digits\n\
    \  |                   |            B1. CONTROL (dtmfinfo=*1) |\n  |         \
    \          |<<++++++++++++++++++++++++++++++++++++|\n  |                   | B2.\
    \ 200 OK                           |--+ get\n  |                   |++++++++++++++++++++++++++++++++++++>>|\
    \  | DTMF\n  |                   |                                      |<-+ digits\n\
    \  |                   | C1. CONTROL (modifyjoin UAC1-->conf) |\n  |         \
    \          |++++++++++++++++++++++++++++++++++++>>|\n  |                   | \
    \                                     |--+ modify\n  |                   |   \
    \                                   |  | UAC\n  |                   |        \
    \                   C2. 200 OK |<-+ volume\n  |                   |<<++++++++++++++++++++++++++++++++++++|\n\
    \  |                   |                                      |\n  |########################################################>>|\n\
    \  |          Volume of UAC in conference is lowered          |\n  |########################################################>>|\n\
    \  |                   |                                      |\n  |         \
    \          |            D1. CONTROL (dtmfinfo=*9) |\n  |                   |<<++++++++++++++++++++++++++++++++++++|\n\
    \  |                   | D2. 200 OK                           |--+ get\n  |  \
    \                 |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n  |      \
    \             |                                      |<-+ digits\n  |        \
    \           | E1. CONTROL (modifyjoin UAC1<--conf) |\n  |                   |++++++++++++++++++++++++++++++++++++>>|\n\
    \  |                   |                                      |--+ modify\n  |\
    \                   |                                      |  | conf\n  |    \
    \               |                           E2. 200 OK |<-+ volume\n  |      \
    \             |<<++++++++++++++++++++++++++++++++++++|\n  |                  \
    \ |                                      |\n  |<<########################################################|\n\
    \  |  Now UAC can hear the conference mix at a higher volume  |\n  |<<########################################################|\n\
    \  |                   |                                      |\n  |         \
    \          |            F1. CONTROL (dtmfinfo=*6) |\n  |                   |<<++++++++++++++++++++++++++++++++++++|\n\
    \  |                   | F2. 200 OK                           |--+ get\n  |  \
    \                 |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n  |      \
    \             |                                      |<-+ digits\n  |        \
    \           | G1. CONTROL (modifyjoin UAC1-->conf) |\n  |                   |++++++++++++++++++++++++++++++++++++>>|\n\
    \  |                   |                                      |--+ mute\n  | \
    \                  |                                      |  | UAC in\n  |   \
    \                |                           G2. 200 OK |<-+ conf\n  |       \
    \            |<<++++++++++++++++++++++++++++++++++++|\n  |                   |\
    \                                      |\n  |########################################################>>|\n\
    \  |             UAC is now muted in the conference           |\n  |########################################################>>|\n\
    \  |                   |                                      |\n  |         \
    \          |            H1. CONTROL (dtmfinfo=*0) |\n  |                   |<<++++++++++++++++++++++++++++++++++++|\n\
    \  |                   | H2. 200 OK                           |--+ get\n  |  \
    \                 |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n  |      \
    \             |                                      |<-+ digits\n  |        \
    \           | I1. CONTROL (destroy DTMF dialog)    |\n  |                   |++++++++++++++++++++++++++++++++++++>>|\n\
    \  |                   |                                      |--+ delete\n  |\
    \                   |                                      |  | the\n  |     \
    \              |                           I2. 200 OK |<-+ dialog\n  |       \
    \            |<<++++++++++++++++++++++++++++++++++++|    (DTMF\n  |          \
    \         |                                      |collection\n  |            \
    \       |                                      |    stops)\n  |              \
    \     |             J1. CONTROL (dialogexit) |\n  |                   |<<++++++++++++++++++++++++++++++++++++|\n\
    \  |                   | J2. 200 OK                           |\n  |         \
    \          |++++++++++++++++++++++++++++++++++++>>|\n  |                   | \
    \                                     |\n  |########################################################>>|\n\
    \  |           No more tones from UAC are collected           |\n  |########################################################>>|\n\
    \  |                   |                                      |\n  |         \
    \          | K1. CONTROL (unjoin UAC1<-X->conf)   |\n  |                   |++++++++++++++++++++++++++++++++++++>>|\n\
    \  |                   |                                      |--+ unjoin\n  |\
    \                   |                                      |  | UAC &\n  |   \
    \                |                           K2. 200 OK |<-+ conf\n  |       \
    \            |<<++++++++++++++++++++++++++++++++++++|\n  |                   |\
    \                                      |\n  |                   |          L1.\
    \ CONTROL (unjoin-notify) |\n  |                   |<<++++++++++++++++++++++++++++++++++++|\n\
    \  |                   | L2. 200 OK                           |\n  |         \
    \          |++++++++++++++++++++++++++++++++++++>>|\n  |                   | \
    \                                     |\n  .                   .             \
    \                         .\n  .                   .                         \
    \             .\n              Figure 46: DTMF-Driven Conference Manipulation:\n\
    \                          Framework Transactions\n   As can be deduced from the\
    \ sequence diagram above, the AS, in its\n   business logic, correlates the results\
    \ of different transactions,\n   addressed to different packages, to implement\
    \ a more complex\n   conferencing scenario.  In fact, <dtmfnotify> events are\
    \ used to take\n   actions according to the functions of the DTMF codes.  The\
    \ framework\n   transaction steps are as follows:\n   o  The UAC is already in\
    \ the conference, and so the AS starts a\n      recurring collect with a grammar\
    \ to match.  This is done by\n      placing a CONTROL request addressed to the\
    \ IVR package (A1).  The\n      operation to implement is a <collect>, and we\
    \ are only interested\n      in two-digit DTMF strings (maxdigits).  The AS is\
    \ not interested\n      in a DTMF terminator (termchar is set to a non-conventional\
    \ DTMF\n      character), and the DTMF escape key is set to '#' (the default is\n\
    \      '*', which would conflict with the code syntax for the conference\n   \
    \   and so needs to be changed).  A custom SRGS grammar is provided\n      inline\
    \ (<grammar> with mode=dtmf).  The whole dialog is to be\n      repeated indefinitely\
    \ (dialog has repeatCount=0), and the AS wants\n      to be notified when matching\
    \ collections occur (dtmfsub with\n      matchmode=collect).\n   o  The request\
    \ is handled by the MS (A2) and then successfully\n      started (dialogid=01d1b38).\
    \  This means that the MS has started\n      collecting DTMF tones from the UAC.\n\
    \   o  The MS collects a matching DTMF string from the UAC (*1).  Since\n    \
    \  the AS subscribed to this kind of event, a CONTROL event\n      notification\
    \ (dtmfnotify) is triggered by the MS (B1), including\n      the collected tones.\
    \  Since the dialog is recurring, the MS\n      immediately restarts the collection.\n\
    \   o  The AS acks the event (B2) and in its business logic understands\n    \
    \  that the code '*1' means that the UAC wants its own volume to be\n      lowered\
    \ in the conference mix.  The AS is able to associate the\n      event with the\
    \ right UAC by referring to the attached dialogid\n      (01d1b38).  It then acts\
    \ accordingly by sending a <modifyjoin>\n      (C1) that does exactly this: the\
    \ provided <stream> child element\n      instructs the MS to modify the volume\
    \ of the UAC-->conference\n      audio flow (setgain=-5 dB 'sendonly').  Note\
    \ that the \"setgain\"\n      value is the absolute volume level.  If the user's\
    \ request is to\n      lower the volume level, the AS must remember the previously\
    \ set\n      volume level and from it calculate the new volume level.  Note how\n\
    \      the request also includes directives for the inverse direction.\n     \
    \ This verbose approach is needed; otherwise, the MS would not only\n      change\
    \ the volume in the requested direction but would also\n      disable the media\
    \ flow in the other direction.  Having a proper\n      <stream> addressing the\
    \ UAC<--conf media flow as well ensures that\n      this doesn't happen.\n   o\
    \  The MS successfully enforces the requested operation (C2),\n      changing\
    \ the volume.\n   o  A new matching DTMF string from the UAC is collected (*9).\
    \  As\n      before, an event is triggered to the AS (D1).\n   o  The AS acks\
    \ the event (D2) and matches the new code ('*9') with\n      its related operation\
    \ (raise the volume of the conference mix for\n      the UAC), taking the proper\
    \ action.  A different <modifyjoin> is\n      sent (E1) with the new instructions\
    \ (setgain=+3 dB 'recvonly').\n      The same considerations regarding how the\
    \ incremental operation\n      should be mapped to the command apply here as well.\
    \  Note also how\n      a <stream> for the inverse direction ('sendonly') is again\n\
    \      provided just as a placeholder, which basically instructs the MS\n    \
    \  that the settings for that direction are not to be changed,\n      maintaining\
    \ the previous directives of (C1).\n   o  The MS successfully enforces this requested\
    \ operation as well\n      (E2), changing the volume in the specified direction.\n\
    \   o  At this point, a further matching DTMF string from the UAC is\n      collected\
    \ (*6) and sent to the AS (F1).\n   o  After the required ack (F2), the AS reacts\
    \ by implementing the\n      action associated with the new code ('*6'), by which\
    \ the UAC\n      requested that it be muted within the conference.  A new\n  \
    \    <modifyjoin> is sent (G1) with a properly constructed payload\n      (setstate=mute\
    \ 'sendonly'), and the MS enforces it (G2).\n   o  A last (in this scenario) matching\
    \ DTMF string is collected by the\n      MS (*0).  As with all the previous codes,\
    \ notification of this\n      string is sent to the AS (H1).\n   o  The AS acks\
    \ the event (H2) and understands that the UAC wants to\n      leave the conference\
    \ now (since the code is *0).  This means that\n      a series of actions must\
    \ be taken:\n      *  The recurring collection is stopped, since it's no longer\n\
    \         needed.\n      *  The UAC is unjoined from the conference it is in.\n\
    \      *  Additional operations might be considered, e.g., a global\n        \
    \ announcement stating that the UAC is leaving, but for the sake\n         of\
    \ conciseness such operations are not listed here.\n      The former is accomplished\
    \ by means of a <dialogterminate> request\n      (I1) to the IVR package (dialogid=01d1b38)\
    \ and the latter by means\n      of an <unjoin> request (K1) to the Mixer package.\n\
    \   o  The <dialogterminate> request is handled by the MS (I2), and the\n    \
    \  dialog is terminated successfully.  As soon as the dialog has\n      actually\
    \ been terminated, a <dialogexit> event is triggered as\n      well to the AS\
    \ (J1).  This event has no report of the result of\n      the last iteration (since\
    \ the dialog was terminated abruptly with\n      an immediate=true) and is acked\
    \ by the AS (J2) to finally complete\n      the dialog lifetime.\n   o  The <unjoin>\
    \ request is immediately enforced (K2).  As a\n      consequence of the unjoin\
    \ operation, an <unjoin-notify> event\n      notification is triggered by the\
    \ MS (L1) to confirm to the AS that\n      the requested entities are no longer\
    \ attached to each other.  The\n      status in the event is set to 0, which,\
    \ as stated in the\n      specification, means that the join has been terminated\
    \ by an\n      <unjoin> request.  The ack from the AS (L2) concludes this\n  \
    \    scenario.\n"
- title: A1. AS -> MS (CFW CONTROL, recurring collect with grammar)
  contents:
  - 'A1. AS -> MS (CFW CONTROL, recurring collect with grammar)

    '
- title: '----------------------------------------------------------'
  contents:
  - "----------------------------------------------------------\n   CFW 238e1f2946e8\
    \ CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n\
    \   Content-Length: 809\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <dialogstart connectionid=\"14849028:37fc2523\">\n       <dialog repeatCount=\"\
    0\">\n         <collect maxdigits=\"2\" termchar=\"A\" escapekey=\"#\">\n    \
    \       <grammar>\n             <grammar version=\"1.0\" mode=\"dtmf\"\n     \
    \                 xmlns=\"http://www.w3.org/2001/06/grammar\">\n             \
    \  <rule id=\"digit\">\n                 <one-of>\n                   <item>0</item>\n\
    \                   <item>1</item>\n                   <item>3</item>\n      \
    \             <item>6</item>\n                   <item>7</item>\n            \
    \       <item>9</item>\n                 </one-of>\n               </rule>\n \
    \              <rule id=\"action\" scope=\"public\">\n                 <example>*3</example>\n\
    \                 <one-of>\n                   <item>\n                     *\n\
    \                     <ruleref uri=\"#digit\"/>\n                   </item>\n\
    \                 </one-of>\n               </rule>\n             </grammar>\n\
    \           </grammar>\n         </collect>\n       </dialog>\n       <subscribe>\n\
    \         <dtmfsub matchmode=\"collect\"/>\n       </subscribe>\n     </dialogstart>\n\
    \   </mscivr>\n"
- title: A2. AS <- MS (CFW 200 OK)
  contents:
  - 'A2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 238e1f2946e8 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 137\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog started\" dialogid=\"01d1b38\"/>\n   </mscivr>\n"
- title: B1. AS <- MS (CFW CONTROL dtmfnotify event)
  contents:
  - 'B1. AS <- MS (CFW CONTROL dtmfnotify event)

    '
- title: '-------------------------------------------'
  contents:
  - "-------------------------------------------\n   CFW 1dd62e043c00 CONTROL\n  \
    \ Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length:\
    \ 180\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \     <event dialogid=\"01d1b38\">\n       <dtmfnotify matchmode=\"collect\" dtmf=\"\
    *1\"\n                   timestamp=\"2008-12-17T17:20:53Z\"/>\n     </event>\n\
    \   </mscivr>\n"
- title: B2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'B2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 1dd62e043c00 200\n"
- title: C1. AS -> MS (CFW CONTROL, modifyjoin with setgain)
  contents:
  - 'C1. AS -> MS (CFW CONTROL, modifyjoin with setgain)

    '
- title: '---------------------------------------------------'
  contents:
  - "---------------------------------------------------\n   CFW 0216231b1f16 CONTROL\n\
    \   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n\
    \   Content-Length: 290\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <modifyjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\">\n       <stream\
    \ media=\"audio\" direction=\"sendonly\">\n         <volume controltype=\"setgain\"\
    \ value=\"-5\"/>\n       </stream>\n       <stream media=\"audio\" direction=\"\
    recvonly\"/>\n     </modifyjoin>\n   </mscmixer>\n"
- title: C2. AS <- MS (CFW 200 OK)
  contents:
  - 'C2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 123\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n     <response status=\"200\" reason=\"\
    Join modified\"/>\n   </mscmixer>\n"
- title: D1. AS <- MS (CFW CONTROL dtmfnotify event)
  contents:
  - 'D1. AS <- MS (CFW CONTROL dtmfnotify event)

    '
- title: '-------------------------------------------'
  contents:
  - "-------------------------------------------\n   CFW 4d674b3e0862 CONTROL\n  \
    \ Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length:\
    \ 180\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \     <event dialogid=\"01d1b38\">\n       <dtmfnotify matchmode=\"collect\" dtmf=\"\
    *9\"\n                   timestamp=\"2008-12-17T17:20:57Z\"/>\n     </event>\n\
    \   </mscivr>\n"
- title: D2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'D2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 4d674b3e0862 200\n"
- title: E1. AS -> MS (CFW CONTROL, modifyjoin with setgain)
  contents:
  - 'E1. AS -> MS (CFW CONTROL, modifyjoin with setgain)

    '
- title: '---------------------------------------------------'
  contents:
  - "---------------------------------------------------\n   CFW 140e0f763352 CONTROL\n\
    \   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n\
    \   Content-Length: 292\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <modifyjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\">\n       <stream\
    \ media=\"audio\" direction=\"recvonly\">\n         <volume controltype=\"setgain\"\
    \ value=\"+3\"/>\n       </stream>\n       <stream media=\"audio\" direction=\"\
    sendonly\"/>\n     </modifyjoin>\n   </mscmixer>\n"
- title: E2. AS <- MS (CFW 200 OK)
  contents:
  - 'E2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 140e0f763352 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 123\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n     <response status=\"200\" reason=\"\
    Join modified\"/>\n   </mscmixer>\n"
- title: F1. AS <- MS (CFW CONTROL dtmfnotify event)
  contents:
  - 'F1. AS <- MS (CFW CONTROL dtmfnotify event)

    '
- title: '-------------------------------------------'
  contents:
  - "-------------------------------------------\n   CFW 478ed6f1775b CONTROL\n  \
    \ Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length:\
    \ 180\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \     <event dialogid=\"01d1b38\">\n       <dtmfnotify matchmode=\"collect\" dtmf=\"\
    *6\"\n                   timestamp=\"2008-12-17T17:21:02Z\"/>\n     </event>\n\
    \   </mscivr>\n"
- title: F2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'F2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 478ed6f1775b 200\n"
- title: G1. AS -> MS (CFW CONTROL, modifyjoin with setstate)
  contents:
  - 'G1. AS -> MS (CFW CONTROL, modifyjoin with setstate)

    '
- title: '----------------------------------------------------'
  contents:
  - "----------------------------------------------------\n   CFW 7fdcc2331bef CONTROL\n\
    \   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n\
    \   Content-Length: 295\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <modifyjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\">\n       <stream\
    \ media=\"audio\" direction=\"sendonly\">\n         <volume controltype=\"setstate\"\
    \ value=\"mute\"/>\n       </stream>\n       <stream media=\"audio\" direction=\"\
    recvonly\"/>\n     </modifyjoin>\n   </mscmixer>\n"
- title: G2. AS <- MS (CFW 200 OK)
  contents:
  - 'G2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 7fdcc2331bef 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 123\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n     <response status=\"200\" reason=\"\
    Join modified\"/>\n   </mscmixer>\n"
- title: H1. AS <- MS (CFW CONTROL dtmfnotify event)
  contents:
  - 'H1. AS <- MS (CFW CONTROL dtmfnotify event)

    '
- title: '-------------------------------------------'
  contents:
  - "-------------------------------------------\n   CFW 750b917a5d4a CONTROL\n  \
    \ Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length:\
    \ 180\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \     <event dialogid=\"01d1b38\">\n       <dtmfnotify matchmode=\"collect\" dtmf=\"\
    *0\"\n                   timestamp=\"2008-12-17T17:21:05Z\"/>\n     </event>\n\
    \   </mscivr>\n"
- title: H2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'H2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 750b917a5d4a 200\n"
- title: I1. AS -> MS (CFW CONTROL, dialogterminate)
  contents:
  - 'I1. AS -> MS (CFW CONTROL, dialogterminate)

    '
- title: '-------------------------------------------'
  contents:
  - "-------------------------------------------\n   CFW 515f007c5bd0 CONTROL\n  \
    \ Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length:\
    \ 128\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \     <dialogterminate dialogid=\"01d1b38\" immediate=\"true\"/>\n   </mscivr>\n"
- title: I2. AS <- MS (CFW 200 OK)
  contents:
  - 'I2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 515f007c5bd0 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-ivr+xml\n   Content-Length: 140\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" reason=\"\
    Dialog terminated\"\n               dialogid=\"01d1b38\"/>\n   </mscivr>\n"
- title: J1. AS <- MS (CFW CONTROL dialogexit event)
  contents:
  - 'J1. AS <- MS (CFW CONTROL dialogexit event)

    '
- title: '-------------------------------------------'
  contents:
  - "-------------------------------------------\n   CFW 76adc41122c1 CONTROL\n  \
    \ Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length:\
    \ 155\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \     <event dialogid=\"01d1b38\">\n       <dialogexit status=\"0\" reason=\"\
    Dialog terminated\"/>\n     </event>\n   </mscivr>\n"
- title: J2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'J2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 76adc41122c1 200\n"
- title: K1. AS -> MS (CFW CONTROL, unjoin)
  contents:
  - 'K1. AS -> MS (CFW CONTROL, unjoin)

    '
- title: '----------------------------------'
  contents:
  - "----------------------------------\n   CFW 4e6afb6625e4 CONTROL\n   Control-Package:\
    \ msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length:\
    \ 127\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <unjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\"/>\n   </mscmixer>\n"
- title: K2. AS <- MS (CFW 200 OK)
  contents:
  - 'K2. AS <- MS (CFW 200 OK)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   CFW 4e6afb6625e4 200\n   Timeout: 10\n   Content-Type:\
    \ application/msc-mixer+xml\n   Content-Length: 122\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n     <response status=\"200\" reason=\"\
    Join removed\"/>\n   </mscmixer>\n"
- title: L1. AS <- MS (CFW CONTROL unjoin-notify event)
  contents:
  - 'L1. AS <- MS (CFW CONTROL unjoin-notify event)

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 577696293504 CONTROL\n\
    \   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n\
    \   Content-Length: 157\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <event>\n       <unjoin-notify status=\"0\"\n                      id1=\"\
    873975758:a5105056\" id2=\"54b4ab3\"/>\n     </event>\n   </mscmixer>\n"
- title: L2. AS -> MS (CFW 200, ACK to 'CONTROL event')
  contents:
  - 'L2. AS -> MS (CFW 200, ACK to ''CONTROL event'')

    '
- title: '----------------------------------------------'
  contents:
  - "----------------------------------------------\n   CFW 577696293504 200\n"
- title: 7.  Media Resource Brokering
  contents:
  - "7.  Media Resource Brokering\n   All the flows presented so far describe the\
    \ interaction between a\n   single AS and a single MS.  This is the simplest topology\
    \ that can be\n   envisaged in a MEDIACTRL-compliant architecture, but it's not\
    \ the\n   only topology that is allowed.  [RFC5567] presents several possible\n\
    \   topologies that potentially involve several AS and several MS as\n   well.\
    \  To properly allow for such topologies, an additional element\n   called the\
    \ Media Resource Broker (MRB) has been introduced in the\n   MEDIACTRL architecture.\
    \  Such an entity, and the protocols needed to\n   interact with it, has been\
    \ standardized in [RFC6917].\n   An MRB is basically a locator that is aware of\
    \ a pool of MS and makes\n   them available to interested AS according to their\
    \ requirements.  For\n   this reason, two different interfaces have been introduced:\n\
    \   o  the Publishing interface (Section 7.1), which allows an MRB to\n      subscribe\
    \ for notifications at the MS it is handling (e.g.,\n      available and occupied\
    \ resources, current state, etc.).\n   o  the Consumer interface (Section 7.2),\
    \ which allows an interested\n      AS to query an MRB for an MS capable of fulfilling\
    \ its\n      requirements.\n   The flows in the following sections will present\
    \ some typical\n   use-case scenarios involving an MRB and the different topologies\
    \ in\n   which it has been conceived to work.\n   Additionally, a few considerations\
    \ on the handling of media dialogs\n   whenever an MRB is involved are presented\
    \ in Section 7.3.\n"
- title: 7.1.  Publishing Interface
  contents:
  - "7.1.  Publishing Interface\n   An MRB uses the MS's Publishing interface to acquire\
    \ relevant\n   information.  This Publishing interface, as specified in [RFC6917],\n\
    \   is made available as a Control Package for the Media Control Channel\n   Framework.\
    \  This means that in order to receive information from an\n   MS, an MRB must\
    \ negotiate a Control Channel as explained in\n   Section 5.  This package allows\
    \ an MRB to either request information\n   in the form of a direct request/answer\
    \ from an MS or subscribe for\n   events.\n   Of course, since the MRB is interested\
    \ in the Publishing interface,\n   the previously mentioned negotiation must be\
    \ changed in order to take\n   into account the need for the MRB Control Package.\
    \  The name of this\n   package is 'mrb-publish/1.0', which means that the SYNC\
    \ might look\n   like the following:\n   1. MRB -> MS (CFW SYNC)\n   -----------------------\n\
    \      CFW 6b8b4567327b SYNC\n      Dialog-ID: z9hG4bK-4542-1-0\n      Keep-Alive:\
    \ 100\n      Packages: msc-ivr/1.0,msc-mixer/1.0,mrb-publish/1.0\n   2. MRB <-\
    \ MS (CFW 200)\n   ----------------------\n      CFW 6b8b4567327b 200\n      Keep-Alive:\
    \ 100\n      Packages: msc-ivr/1.0,msc-mixer/1.0,mrb-publish/1.0\n      Supported:\
    \ msc-example-pkg/1.0\n   The meaning of this negotiation was presented previously.\
    \  It is\n   enough to point out that the MRB in this case adds a new item to\
    \ the\n   'Packages' it needs support for (mrb-publish/1.0).  In this case, the\n\
    \   MS supports it, and in fact it is added to the negotiated packages in\n  \
    \ the reply:\n           Packages: msc-ivr/1.0,msc-mixer/1.0,mrb-publish/1.0\n\
    \                                               ^^^^^^^^^^^^^^^\n   The MS as\
    \ described in Section 5, on the other hand, did not have\n   support for that\
    \ package, since only 'msc-example-pkg/1.0' was part\n   of the 'Supported' list.\n\
    \   Figure 47 presents a ladder diagram of a typical interaction based on\n  \
    \ the MRB Control Package.\n         MRB                                     \
    \       MS\n          |                                              |\n     \
    \     | A1. CONTROL (MRB subscription)               |\n          |--------------------------------------------->|\n\
    \          |                                   A2. 200 OK |\n          |<---------------------------------------------|\n\
    \          |                                              |--+ collect\n     \
    \     |                                              |  | requested\n        \
    \  |                                              |<-+ info\n          |     \
    \          B1. CONTROL (MRB notification) |\n          |<---------------------------------------------|\n\
    \          | B2. 200 OK                                   |\n          |--------------------------------------------->|\n\
    \          |                                              |\n          .     \
    \                                         .\n          .                     \
    \                         .\n          |                                     \
    \         |\n          |                                              |--+ collect\n\
    \          |                                              |  | up-to-date\n  \
    \        |                                              |<-+ info\n          |\
    \               C1. CONTROL (MRB notification) |\n          |<---------------------------------------------|\n\
    \          | C2. 200 OK                                   |\n          |--------------------------------------------->|\n\
    \          |                                              |\n          .     \
    \                                         .\n          .                     \
    \                         .\n          |                                     \
    \         |\n          | D1. CONTROL (Update MRB subscription)        |\n    \
    \      |--------------------------------------------->|\n          |         \
    \                          D2. 200 OK |\n          |<---------------------------------------------|\n\
    \          |                                              |\n          .     \
    \                                         .\n          .                     \
    \                         .\n    Figure 47: Media Resource Brokering: Subscription\
    \ and Notification\n   In this example, the MRB subscribes for information at\
    \ the specified\n   MS, and events are triggered on a regular, negotiated basis.\
    \  All of\n   these messages flow through the Control Channel, as do all of the\n\
    \   messages discussed in this document.  The framework transaction steps\n  \
    \ are as follows:\n   o  The MRB sends a new CONTROL message (A1) addressed to\
    \ the MRB\n      package (mrb-publish/1.0); it is a subscription for information\n\
    \      (<subscription>), and the MRB is asking to be notified at least\n     \
    \ every 10 minutes (<minfrequency>) or, if required, every 30\n      seconds at\
    \ maximum.  The subscription must last 30 minutes\n      (<expires>), after which\
    \ no additional notifications must be sent.\n   o  The MS acknowledges the request\
    \ (A2) and sends notification of the\n      success of the request in a 200 OK\
    \ message (<mrbresponse>).\n   o  The MS prepares and sends the first notification\
    \ to the MRB (B1).\n      As has been done with other packages, the notification\
    \ has been\n      sent as an MS-generated CONTROL message; it is a notification\n\
    \      related to the request in the first message, because the 'id'\n      (p0T65U)\
    \ matches that request.  All of the information that the\n      MRB subscribed\
    \ for is provided in the payload.\n   o  The MRB acknowledges the notification\
    \ (B2) and uses the retrieved\n      information to update its own information\
    \ as part of its business\n      logic.\n   o  The previous step (the MRB acknowledges\
    \ notifications and uses the\n      retrieved information) repeats at the required\
    \ frequency, with\n      up-to-date information.\n   o  After a while, the MRB\
    \ updates its subscription (D1) to get more\n      frequent updates (minfrequency=1,\
    \ an update every second at\n      least).  The MS accepts the update (D2), although\
    \ it may adjust\n      the frequency in the reply according to its policies (e.g.,\
    \ a\n      lower rate, such as minfrequency=30).  The notifications continue,\n\
    \      but at the newer rate; the expiration is also updated accordingly\n   \
    \   (600 seconds again, since the update refreshes it).\n"
- title: A1. MRB -> MS (CONTROL, publish request)
  contents:
  - 'A1. MRB -> MS (CONTROL, publish request)

    '
- title: '----------------------------------------'
  contents:
  - "----------------------------------------\n   CFW lidc30BZObiC CONTROL\n   Control-Package:\
    \ mrb-publish/1.0\n   Content-Type: application/mrb-publish+xml\n   Content-Length:\
    \ 337\n   <mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"\
    >\n      <mrbrequest>\n         <subscription action=\"create\" seqnumber=\"1\"\
    \ id=\"p0T65U\">\n            <expires>60</expires>\n            <minfrequency>600</minfrequency>\n\
    \            <maxfrequency>30</maxfrequency>\n         </subscription>\n     \
    \ </mrbrequest>\n   </mrbpublish>\n"
- title: A2. MRB <- MS (200 to CONTROL, request accepted)
  contents:
  - 'A2. MRB <- MS (200 to CONTROL, request accepted)

    '
- title: '------------------------------------------------'
  contents:
  - "------------------------------------------------\n   CFW lidc30BZObiC 200\n \
    \  Timeout: 10\n   Content-Type: application/mrb-publish+xml\n   Content-Length:\
    \ 139\n   <mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"\
    >\n           <mrbresponse status=\"200\" reason=\"OK: Request accepted\"/>\n\
    \   </mrbpublish>\n"
- title: B1. MRB <- MS (CONTROL, event notification from MS)
  contents:
  - 'B1. MRB <- MS (CONTROL, event notification from MS)

    '
- title: '---------------------------------------------------'
  contents:
  - "---------------------------------------------------\n   CFW 03fff52e7b7a CONTROL\n\
    \   Control-Package: mrb-publish/1.0\n   Content-Type: application/mrb-publish+xml\n\
    \   Content-Length: 4157\n   <mrbpublish version=\"1.0\"\n             xmlns=\"\
    urn:ietf:params:xml:ns:mrb-publish\">\n    <mrbnotification seqnumber=\"1\" id=\"\
    p0T65U\">\n        <media-server-id>a1b2c3d4</media-server-id>\n        <supported-packages>\n\
    \            <package name=\"msc-ivr/1.0\"/>\n            <package name=\"msc-mixer/1.0\"\
    />\n            <package name=\"mrb-publish/1.0\"/>\n            <package name=\"\
    msc-example-pkg/1.0\"/>\n        </supported-packages>\n        <active-rtp-sessions>\n\
    \            <rtp-codec name=\"audio/basic\">\n                <decoding>10</decoding>\n\
    \                <encoding>20</encoding>\n            </rtp-codec>\n        </active-rtp-sessions>\n\
    \        <active-mixer-sessions>\n            <active-mix conferenceid=\"7cfgs43\"\
    >\n                <rtp-codec name=\"audio/basic\">\n                    <decoding>3</decoding>\n\
    \                    <encoding>3</encoding>\n                </rtp-codec>\n  \
    \          </active-mix>\n        </active-mixer-sessions>\n        <non-active-rtp-sessions>\n\
    \            <rtp-codec name=\"audio/basic\">\n                <decoding>50</decoding>\n\
    \                <encoding>40</encoding>\n            </rtp-codec>\n        </non-active-rtp-sessions>\n\
    \        <non-active-mixer-sessions>\n            <non-active-mix available=\"\
    15\">\n                <rtp-codec name=\"audio/basic\">\n                    <decoding>15</decoding>\n\
    \                    <encoding>15</encoding>\n                </rtp-codec>\n \
    \           </non-active-mix>\n        </non-active-mixer-sessions>\n        <media-server-status>active</media-server-status>\n\
    \        <supported-codecs>\n            <supported-codec name=\"audio/basic\"\
    >\n                <supported-codec-package name=\"msc-ivr/1.0\">\n          \
    \          <supported-action>encoding</supported-action>\n                   \
    \ <supported-action>decoding</supported-action>\n                </supported-codec-package>\n\
    \                <supported-codec-package name=\"msc-mixer/1.0\">\n          \
    \          <supported-action>encoding</supported-action>\n                   \
    \ <supported-action>decoding</supported-action>\n                </supported-codec-package>\n\
    \            </supported-codec>\n        </supported-codecs>\n        <application-data>TestbedPrototype</application-data>\n\
    \        <file-formats>\n            <supported-format name=\"audio/x-wav\">\n\
    \                <supported-file-package>\n                    msc-ivr/1.0\n \
    \               </supported-file-package>\n            </supported-format>\n \
    \       </file-formats>\n        <max-prepared-duration>\n            <max-time\
    \ max-time-seconds=\"3600\">\n                <max-time-package>msc-ivr/1.0</max-time-package>\n\
    \            </max-time>\n        </max-prepared-duration>\n        <dtmf-support>\n\
    \            <detect>\n                <dtmf-type package=\"msc-ivr/1.0\" name=\"\
    RFC4733\"/>\n                <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"\
    />\n            </detect>\n            <generate>\n                <dtmf-type\
    \ package=\"msc-ivr/1.0\" name=\"RFC4733\"/>\n                <dtmf-type package=\"\
    msc-mixer/1.0\" name=\"RFC4733\"/>\n            </generate>\n            <passthrough>\n\
    \                <dtmf-type package=\"msc-ivr/1.0\" name=\"RFC4733\"/>\n     \
    \           <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/>\n        \
    \    </passthrough>\n        </dtmf-support>\n        <mixing-modes>\n       \
    \     <audio-mixing-modes>\n                <audio-mixing-mode package=\"msc-ivr/1.0\"\
    > \\\n                     nbest \\\n                </audio-mixing-mode>\n  \
    \          </audio-mixing-modes>\n            <video-mixing-modes activespeakermix=\"\
    true\" vas=\"true\">\n                <video-mixing-mode package=\"msc-mixer/1.0\"\
    > \\\n                     single-view \\\n                </video-mixing-mode>\n\
    \                <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n          \
    \           dual-view \\\n                </video-mixing-mode>\n             \
    \   <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n                     dual-view-crop\
    \ \\\n                </video-mixing-mode>\n                <video-mixing-mode\
    \ package=\"msc-mixer/1.0\"> \\\n                     dual-view-2x1 \\\n     \
    \           </video-mixing-mode>\n                <video-mixing-mode package=\"\
    msc-mixer/1.0\"> \\\n                     dual-view-2x1-crop \\\n            \
    \    </video-mixing-mode>\n                <video-mixing-mode package=\"msc-mixer/1.0\"\
    > \\\n                     quad-view \\\n                </video-mixing-mode>\n\
    \                <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n          \
    \           multiple-5x1 \\\n                </video-mixing-mode>\n          \
    \      <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n                    \
    \ multiple-3x3 \\\n                </video-mixing-mode>\n                <video-mixing-mode\
    \ package=\"msc-mixer/1.0\"> \\\n                     multiple-4x4 \\\n      \
    \          </video-mixing-mode>\n            </video-mixing-modes>\n        </mixing-modes>\n\
    \        <supported-tones>\n            <supported-country-codes>\n          \
    \      <country-code package=\"msc-ivr/1.0\">GB</country-code>\n             \
    \   <country-code package=\"msc-ivr/1.0\">IT</country-code>\n                <country-code\
    \ package=\"msc-ivr/1.0\">US</country-code>\n            </supported-country-codes>\n\
    \            <supported-h248-codes>\n                <h248-code package=\"msc-ivr/1.0\"\
    >cg/*</h248-code>\n                <h248-code package=\"msc-ivr/1.0\">biztn/ofque</h248-code>\n\
    \                <h248-code package=\"msc-ivr/1.0\">biztn/erwt</h248-code>\n \
    \               <h248-code package=\"msc-mixer/1.0\">conftn/*</h248-code>\n  \
    \          </supported-h248-codes>\n        </supported-tones>\n        <file-transfer-modes>\n\
    \            <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n   \
    \     </file-transfer-modes>\n        <asr-tts-support>\n            <asr-support>\n\
    \                <language xml:lang=\"en\"/>\n            </asr-support>\n   \
    \         <tts-support>\n                <language xml:lang=\"en\"/>\n       \
    \     </tts-support>\n        </asr-tts-support>\n        <vxml-support>\n   \
    \         <vxml-mode package=\"msc-ivr/1.0\" support=\"rfc6231\"/>\n        </vxml-support>\n\
    \        <media-server-location>\n            <civicAddress xml:lang=\"it\">\n\
    \                <country>IT</country>\n                <A1>Campania</A1>\n  \
    \              <A3>Napoli</A3>\n                <A6>Via Claudio</A6>\n       \
    \         <HNO>21</HNO>\n                <LMK>University of Napoli Federico II</LMK>\n\
    \                <NAM>Dipartimento di Informatica e Sistemistica</NAM>\n     \
    \           <PC>80210</PC>\n            </civicAddress>\n        </media-server-location>\n\
    \        <label>TestbedPrototype-01</label>\n        <media-server-address>\n\
    \            sip:MediaServer@ms.example.net\n        </media-server-address>\n\
    \        <encryption/>\n    </mrbnotification>\n   </mrbpublish>\n"
- title: B2. MRB -> MS (200 to CONTROL)
  contents:
  - 'B2. MRB -> MS (200 to CONTROL)

    '
- title: '------------------------------'
  contents:
  - "------------------------------\n   CFW 03fff52e7b7a 200\n"
- title: (C1 and C2 omitted for brevity)
  contents:
  - '(C1 and C2 omitted for brevity)

    '
- title: D1. MRB -> MS (CONTROL, publish request)
  contents:
  - 'D1. MRB -> MS (CONTROL, publish request)

    '
- title: '----------------------------------------'
  contents:
  - '----------------------------------------

    '
- title: CFW pyu788fc32wa CONTROL
  contents:
  - 'CFW pyu788fc32wa CONTROL

    '
- title: 'Control-Package: mrb-publish/1.0'
  contents:
  - 'Control-Package: mrb-publish/1.0

    '
- title: 'Content-Type: application/mrb-publish+xml'
  contents:
  - 'Content-Type: application/mrb-publish+xml

    '
- title: 'Content-Length: 342'
  contents:
  - 'Content-Length: 342

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
- title: <mrbpublish version="1.0" xmlns="urn:ietf:params:xml:ns:mrb-publish">
  contents:
  - "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\">\n \
    \   <mrbrequest>\n        <subscription action=\"update\" seqnumber=\"2\" id=\"\
    p0T65U\">\n            <expires>600</expires>\n            <minfrequency>1</minfrequency>\n\
    \        </subscription>\n    </mrbrequest>\n"
- title: </mrbpublish>
  contents:
  - '</mrbpublish>

    '
- title: D2. MRB <- MS (200 to CONTROL, request accepted)
  contents:
  - 'D2. MRB <- MS (200 to CONTROL, request accepted)

    '
- title: '------------------------------------------------'
  contents:
  - '------------------------------------------------

    '
- title: CFW pyu788fc32wa 200
  contents:
  - 'CFW pyu788fc32wa 200

    '
- title: 'Timeout: 10'
  contents:
  - 'Timeout: 10

    '
- title: 'Content-Type: application/mrb-publish+xml'
  contents:
  - 'Content-Type: application/mrb-publish+xml

    '
- title: 'Content-Length: 332'
  contents:
  - 'Content-Length: 332

    '
- title: <mrbpublish version="1.0" xmlns="urn:ietf:params:xml:ns:mrb-publish">
  contents:
  - "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\">\n \
    \   <mrbresponse status=\"200\" reason=\"OK: Request accepted\">\n        <subscription\
    \ action=\"create\" seqnumber=\"2\" id=\"p0T65U\">\n            <expires>600</expires>\n\
    \            <minfrequency>30</minfrequency>\n        </subscription>\n    </mrbresponse>\n"
- title: </mrbpublish>
  contents:
  - '</mrbpublish>

    '
- title: 7.2.  Consumer Interface
  contents:
  - "7.2.  Consumer Interface\n   Whereas the Publishing interface is used by an MS\
    \ to publish its\n   functionality and up-to-date information to an MRB, the Consumer\n\
    \   interface is used by an interested AS to access a resource.  An AS\n   can\
    \ use the Consumer interface to contact an MRB and describe the\n   resources\
    \ it needs.  The MRB then replies with the needed\n   information: specifically,\
    \ the address of an MS that is capable of\n   meeting the requirements.\n   However,\
    \ unlike the Publishing interface, the Consumer interface is\n   not specified\
    \ as a Control Package.  Rather, it is conceived as an\n   XML-based protocol\
    \ that can be transported by means of either HTTP or\n   SIP, as will be shown\
    \ in the following sections.\n   As specified in [RFC6917], the Consumer interface\
    \ can be involved in\n   two topologies: Query mode and Inline mode.  In the Query\
    \ mode\n   (Section 7.2.1), the Consumer requests and responses are conveyed by\n\
    \   means of HTTP.  Once the AS gets the answer, the usual MEDIACTRL\n   interactions\
    \ occur between the AS and the MS chosen by the MRB.  By\n   contrast, in the\
    \ Inline mode, the MRB is in the path between the AS\n   and the pool of MS it\
    \ is handling.  In this case, an AS can place\n   Consumer requests using SIP\
    \ as a transport, by means of a multipart\n   payload (Section 7.2.2) containing\
    \ the Consumer request itself and an\n   SDP related either to the creation of\
    \ a Control Channel or to a UAC\n   media dialog.  This is called Inline-aware\
    \ mode, since it assumes\n   that the interested AS knows that an MRB is in place\
    \ and knows how to\n   talk to it.  The MRB is also conceived to work with AS\
    \ that are\n   unaware of its functionality, i.e., unaware of the Consumer\n \
    \  interface.  In this kind of scenario, the Inline mode is still used,\n   but\
    \ with the AS thinking the MRB it is talking to is actually an MS.\n   This approach\
    \ is called Inline-unaware mode (Section 7.2.3).\n"
- title: 7.2.1.  Query Mode
  contents:
  - "7.2.1.  Query Mode\n   As discussed in the previous section, in the Query mode\
    \ the AS sends\n   Consumer requests by means of HTTP.  Specifically, an HTTP\
    \ POST is\n   used to convey the request.  The MRB is assumed to send its response\n\
    \   by means of an HTTP 200 OK reply.  Since a successful Consumer\n   response\
    \ contains information to contact a specific MS (the MS the\n   MRB has deemed\
    \ most capable of fulfilling the AS's requirements), an\n   AS can subsequently\
    \ directly contact the MS, as described in\n   Section 5.  This means that in\
    \ the Query mode the MRB acts purely as\n   a locator, and then the AS and the\
    \ MS can talk 1:1.\n   Figure 48 presents a ladder diagram of a typical Consumer\
    \ request in\n   the Query topology:\n     AS                                \
    \             MRB\n      |                                              |\n  \
    \    | 1. HTTP POST (Consumer request)              |\n      |--------------------------------------------->|\n\
    \      |                                              |\n      |             \
    \                                 |\n      |                                 \
    \             |--+ Parse request\n      |                                    \
    \          |  | and see if any\n      |                                      \
    \        |<-+ MS applies\n      |                                            \
    \  |\n      |                2. 200 OK (Consumer response) |\n      |<---------------------------------------------|\n\
    \      |                                              |\n      |--+ Parse response\
    \ and                        |\n      |  | start session (SIP/COMEDIA/CFW)   \
    \        |\n      |<-+ with MS reported by MRB                   |\n      |  \
    \                                            |\n      .                      \
    \                        .\n      .                                          \
    \    .\n              Figure 48: Media Resource Brokering: Query Mode\n   In this\
    \ example, the AS is interested in an MS meeting a defined set\n   of requirements.\
    \  The MS must:\n   1.  support both the IVR and Mixer packages.\n   2.  provide\
    \ at least 10 G.711 encoding/decoding RTP sessions for IVR\n       purposes.\n\
    \   3.  support HTTP-based streaming and support for the audio/x-wav file\n  \
    \     format in the IVR package.\n   These requirements are properly formatted\
    \ according to the MRB\n   Consumer syntax.  The framework transaction steps are\
    \ as follows:\n   o  The AS sends an HTTP POST message to the MRB (1).  The payload\
    \ is,\n      of course, the Consumer request, which is reflected by the\n    \
    \  Content-Type header (application/mrb-consumer+xml).  The Consumer\n      request\
    \ (<mediaResourceRequest>, uniquely identified by its 'id'\n      attribute set\
    \ to the random value 'n3un93wd'), includes some\n      general requirements (<generalInfo>)\
    \ and some IVR-specific\n      requirements (<ivrInfo>).  The general part of\
    \ the requests\n      contains the set of required packages (<packages>).  The\n\
    \      IVR-specific section contains requirements concerning the number\n    \
    \  of required IVR sessions (<ivr-sessions>), the file formats that\n      are\
    \ to be supported (<file-formats>), and the required file\n      transfer capabilities\
    \ (<file-transfer-modes>).\n   o  The MRB gets the request and parses it.  Then,\
    \ according to its\n      business logic, it realizes it can't find a single MS\
    \ capable of\n      targeting the request and as a consequence picks two MS instances\n\
    \      that can handle 60 and 40 of the requested sessions, respectively.\n  \
    \    It prepares a Consumer response (2) to provide the AS with the\n      requested\
    \ information.  The response (<mediaResourceResponse>,\n      which includes the\
    \ same 'id' attribute as the request) indicates\n      success (status=200) and\
    \ includes the relevant information\n      (<response-session-info>).  Specifically,\
    \ the response includes\n      transaction-related information (the same session-id\
    \ and seq\n      provided by the AS in its request, to allow proper request/\n\
    \      response matching) together with information on the duration of\n     \
    \ the reservation (expires=3600, i.e., after an hour the request\n      will expire)\
    \ and the SIP addresses of the chosen MS.\n   Note how the sequence number the\
    \ MRB returned is not 1.  According to\n   the MRB specification, this is the\
    \ starting value to increment for\n   the sequence number to be used in subsequent\
    \ requests.  This means\n   that should the AS want to update or remove the session\
    \ it should use\n   10 as a value for the sequence number in the related request.\n\
    \   According to Section 12 of [RFC6917], this random value for the first\n  \
    \ sequence number is also a way to help prevent a malicious entity from\n   messing\
    \ with or disrupting another AS session with the MRB.  In fact,\n   sequence numbers\
    \ in requests and responses have to match, and failure\n   to provide the correct\
    \ sequence number would result in session\n   failure and a 405 error message.\n"
- title: 1. AS -> MRB (HTTP POST, Consumer request)
  contents:
  - '1. AS -> MRB (HTTP POST, Consumer request)

    '
- title: '------------------------------------------'
  contents:
  - "------------------------------------------\n POST /Mrb/Consumer HTTP/1.1\n Content-Length:\
    \ 893\n Content-Type: application/mrb-consumer+xml\n Host: mrb.example.com:8080\n\
    \ Connection: Keep-Alive\n User-Agent: Apache-HttpClient/4.0.1 (java 1.5)\n <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <mrbconsumer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\">\n    <mediaResourceRequest\
    \ id=\"n3un93wd\">\n        <generalInfo>\n            <packages>\n          \
    \      <package>msc-ivr/1.0</package>\n                <package>msc-mixer/1.0</package>\n\
    \            </packages>\n        </generalInfo>\n        <ivrInfo>\n        \
    \    <ivr-sessions>\n                <rtp-codec name=\"audio/basic\">\n      \
    \              <decoding>100</decoding>\n                    <encoding>100</encoding>\n\
    \                </rtp-codec>\n            </ivr-sessions>\n            <file-formats>\n\
    \                <required-format name=\"audio/x-wav\"/>\n            </file-formats>\n\
    \            <file-transfer-modes>\n                <file-transfer-mode package=\"\
    msc-ivr/1.0\" name=\"HTTP\"/>\n            </file-transfer-modes>\n        </ivrInfo>\n\
    \    </mediaResourceRequest>\n </mrbconsumer>\n"
- title: 2. AS <- MRB (200 to POST, Consumer response)
  contents:
  - '2. AS <- MRB (200 to POST, Consumer response)

    '
- title: '---------------------------------------------'
  contents:
  - "---------------------------------------------\n HTTP/1.1 200 OK\n X-Powered-By:\
    \ Servlet/2.5\n Server: Sun GlassFish Communications Server 1.5\n Content-Type:\
    \ application/mrb-consumer+xml;charset=ISO-8859-1\n Content-Length: 1146\n Date:\
    \ Thu, 28 Jul 2011 10:34:45 GMT\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>\n <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"\
    >\n    <mediaResourceResponse reason=\"Resource found\" status=\"200\"\n     \
    \                      id=\"n3un93wd\">\n        <response-session-info>\n   \
    \         <session-id>z603G3yaUzM8</session-id>\n            <seq>9</seq>\n  \
    \          <expires>3600</expires>\n            <media-server-address\n      \
    \                        uri=\"sip:MediaServer@ms.example.com:5080\">\n      \
    \          <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\"\
    >\n                        <decoding>60</decoding>\n                        <encoding>60</encoding>\n\
    \                    </rtp-codec>\n                </ivr-sessions>\n         \
    \   </media-server-address>\n            <media-server-address\n             \
    \          uri=\"sip:OtherMediaServer@pool.example.net:5080\">\n             \
    \   <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n   \
    \                     <decoding>40</decoding>\n                        <encoding>40</encoding>\n\
    \                    </rtp-codec>\n                </ivr-sessions>\n         \
    \   </media-server-address>\n        </response-session-info>\n    </mediaResourceResponse>\n\
    \ </mrbconsumer>\n   For the sake of conciseness, the subsequent steps are not\
    \ presented.\n   They are very trivial, since they basically consist of the AS\
    \ issuing\n   a COMEDIA negotiation with either of the obtained MS, as already\n\
    \   presented in Section 5.  The same can be said with respect to\n   attaching\
    \ UAC media dialogs.  In fact, since after the Query the\n   AS<->MS interaction\
    \ becomes 1:1, UAC media dialogs can be redirected\n   directly to the proper\
    \ MS using the 3PCC approach, e.g., as shown in\n   Figure 10.\n"
- title: 7.2.2.  Inline-Aware Mode
  contents:
  - "7.2.2.  Inline-Aware Mode\n   Unlike the Query mode, in the Inline-Aware MRB\
    \ Mode (IAMM) the AS\n   sends Consumer requests by means of SIP.  Of course,\
    \ saying that the\n   transport changes from HTTP to SIP is not as trivial as\
    \ it seems.  In\n   fact, HTTP and SIP behave in very different ways, and this\
    \ is\n   reflected in the way the Inline-aware mode is conceived.\n   An AS willing\
    \ to issue a Consumer request by means of SIP has to do\n   so by means of an\
    \ INVITE.  As specified in [RFC6917], the payload of\n   the INVITE can't contain\
    \ only the Consumer request itself.  In fact,\n   the Consumer request is assumed\
    \ to be carried within a SIP\n   transaction.  A Consumer session is not strictly\
    \ associated with the\n   lifetime of any SIP transaction, meaning that Consumer\
    \ requests\n   belonging to the same session may be transported over different\
    \ SIP\n   messages; therefore, a hangup on any of these SIP dialogs would not\n\
    \   affect a Consumer session.\n   That said, as documented in [RFC6230], [RFC6917]\
    \ envisages two kinds\n   of SIP dialogs over which a Consumer request may be\
    \ sent: a SIP\n   control dialog (a SIP dialog sent by the AS in order to set\
    \ up a\n   Control Channel) and a UAC media dialog (a SIP dialog sent by the AS\n\
    \   in order to attach a UAC to an MS).  In both cases, the AS would\n   prepare\
    \ a multipart/mixed payload to achieve both ends, i.e.,\n   receiving a reply\
    \ to its Consumer request and effectively carrying on\n   the negotiation described\
    \ in the SDP payload.\n   The behaviors in the two cases, which are called the\
    \ CFW-based\n   approach and the media dialog-based approach, respectively, are\
    \ only\n   slightly different, but both will be presented to clarify how they\n\
    \   could be exploited.  To make things clearer for the reader, the same\n   Consumer\
    \ request as the Consumer request presented in the Query mode\n   will be sent,\
    \ in order to clarify how the behavior of the involved\n   parties may differ.\n"
- title: '7.2.2.1.  Inline-Aware Mode: CFW-Based Approach'
  contents:
  - "7.2.2.1.  Inline-Aware Mode: CFW-Based Approach\n   Figure 49 presents a ladder\
    \ diagram of a typical Consumer request in\n   the CFW-based Inline-aware topology:\n\
    \   AS                      MRB                          MS\n    |           \
    \            |                           |\n    | 1. INVITE             |    \
    \                       |\n    | (multipart/mixed:     |                     \
    \      |\n    |  application/cfw,     |                           |\n    |  application/mrb-consumer+xml)\
    \                    |\n    |---------------------->|                        \
    \   |\n    |       2. 100 (Trying) |                           |\n    |<----------------------|\
    \                           |\n    |                       |--+ Extract SDP and\
    \        |\n    |                       |  | MRB payloads; handle   |\n    | \
    \                      |<-+ Consumer request to    |\n    |                  \
    \     |    pick MS                |\n    |                       |           \
    \                |\n    |                       | 3. INVITE                 |\n\
    \    |                       | (application/cfw from 1.) |\n    |            \
    \           |-------------------------->|\n    |                       |     \
    \      4. 100 (Trying) |\n    |                       |<--------------------------|\n\
    \    |                       |                           |--+ Negotiate\n    |\
    \                       |                           |  | CFW Control\n    |  \
    \                     |                           |<-+ Channel\n    |        \
    \               |                 5. 200 OK |\n    |                       | (application/cfw\
    \ from MS) |\n    |                       |<--------------------------|\n    |\
    \                       | 6. ACK                    |\n    |                 \
    \      |-------------------------->|\n    |        Prepare new +--|          \
    \                 |\n    |       payload with |  |                           |\n\
    \    |    SDP from MS and +->|                           |\n    |     Consumer\
    \ reply    |                           |\n    |                       |      \
    \                     |\n    |             7. 200 OK |                       \
    \    |\n    |     (multipart/mixed: |                           |\n    |     \
    \ application/cfw from MS,                     |\n    |      application/mrb-consumer+xml)\
    \                |\n    |<----------------------|                           |\n\
    \    | 8. ACK                |                           |\n    |---------------------->|\
    \                           |\n    |                       |                 \
    \          |\n    |--+ Read Consumer      |                           |\n    |\
    \  | reply and use SDP  |                           |\n    |<-+ to create CFW\
    \ Chn. |                           |\n    |                       |          \
    \                 |\n    |                                                   |\n\
    \    |<<############## TCP CONNECTION #################>>|\n    |            \
    \                                       |\n    | CFW SYNC                    \
    \                      |\n    |++++++++++++++++++++++++++++++++++++++++++++++++++>|\n\
    \    |                                                   |\n    .            \
    \           .                           .\n    .                       .     \
    \                      .\n     Figure 49: Media Resource Brokering: CFW-Based\
    \ Inline-Aware Mode\n   To make the scenario easier to understand, we assume that\
    \ the AS is\n   interested in exactly the same set of requirements as those presented\n\
    \   in Section 7.2.1.  This means that the Consumer request originated by\n  \
    \ the AS will be the same as before, with only the transport/topology\n   changing.\n\
    \   Please note that to make the protocol contents easier to read, a\n   simple\
    \ 'Part' is used whenever a boundary for a multipart/mixed\n   payload is provided,\
    \ instead of the actual boundary that would be\n   inserted in the SIP messages.\n\
    \   The framework transaction steps (for simplicity's sake, only the\n   payloads,\
    \ and not the complete SIP transactions, are reported) are as\n   follows:\n"
- title: 1. AS -> MRB (INVITE multipart/mixed)
  contents:
  - '1. AS -> MRB (INVITE multipart/mixed)

    '
- title: '-------------------------------------'
  contents:
  - "-------------------------------------\n   [..]\n   Content-Type: multipart/mixed;boundary=\"\
    Part\"\n   --Part\n   Content-Type: application/sdp\n   v=0\n   o=- 2890844526\
    \ 2890842807 IN IP4 as.example.com\n   s=MediaCtrl\n   c=IN IP4 as.example.com\n\
    \   t=0 0\n   m=application 48035 TCP cfw\n   a=connection:new\n   a=setup:active\n\
    \   a=cfw-id:vF0zD4xzUAW9\n   --Part\n   Content-Type: application/mrb-consumer+xml\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <mrbconsumer\
    \ version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"\
    >\n     <mediaResourceRequest id=\"fr34asx1\">\n        <generalInfo>\n      \
    \      <packages>\n                <package>msc-ivr/1.0</package>\n          \
    \      <package>msc-mixer/1.0</package>\n            </packages>\n        </generalInfo>\n\
    \        <ivrInfo>\n            <ivr-sessions>\n                <rtp-codec name=\"\
    audio/basic\">\n                    <decoding>100</decoding>\n               \
    \     <encoding>100</encoding>\n                </rtp-codec>\n            </ivr-sessions>\n\
    \            <file-formats>\n                <required-format name=\"audio/x-wav\"\
    />\n            </file-formats>\n            <file-transfer-modes>\n         \
    \       <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n        \
    \    </file-transfer-modes>\n        </ivrInfo>\n     </mediaResourceRequest>\n\
    \   </mrbconsumer>\n   --Part\n"
- title: 3. MRB -> MS (INVITE SDP only)
  contents:
  - '3. MRB -> MS (INVITE SDP only)

    '
- title: '------------------------------'
  contents:
  - "------------------------------\n   [..]\n   Content-Type: application/sdp\n \
    \  v=0\n   o=- 2890844526 2890842807 IN IP4 as.example.com\n   s=MediaCtrl\n \
    \  c=IN IP4 as.example.com\n   t=0 0\n   m=application 48035 TCP cfw\n   a=connection:new\n\
    \   a=setup:active\n   a=cfw-id:vF0zD4xzUAW9\n"
- title: 5. MRB <- MS (200 OK SDP)
  contents:
  - '5. MRB <- MS (200 OK SDP)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   [..]\n   Content-Type: application/sdp\n   v=0\n\
    \   o=lminiero 2890844526 2890842808 IN IP4 ms.example.net\n   s=MediaCtrl\n \
    \  c=IN IP4 ms.example.net\n   t=0 0\n   m=application 7575 TCP cfw\n   a=connection:new\n\
    \   a=setup:passive\n   a=cfw-id:vF0zD4xzUAW9\n"
- title: 7. AS <- MRB (200 OK multipart/mixed)
  contents:
  - '7. AS <- MRB (200 OK multipart/mixed)

    '
- title: '-------------------------------------'
  contents:
  - "-------------------------------------\n   [..]\n   Content-Type: multipart/mixed;boundary=\"\
    Part\"\n   --Part\n   Content-Type: application/sdp\n   v=0\n   o=lminiero 2890844526\
    \ 2890842808 IN IP4 ms.example.net\n   s=MediaCtrl\n   c=IN IP4 ms.example.net\n\
    \   t=0 0\n   m=application 7575 TCP cfw\n   a=connection:new\n   a=setup:passive\n\
    \   a=cfw-id:vF0zD4xzUAW9\n   --Part\n   Content-Type: application/mrb-consumer+xml\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <mrbconsumer\
    \ version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"\
    >\n     <mediaResourceResponse reason=\"Resource found\" status=\"200\"\n    \
    \                        id=\"fr34asx1\">\n        <response-session-info>\n \
    \           <session-id>z603G3yaUzM8</session-id>\n            <seq>9</seq>\n\
    \            <expires>3600</expires>\n            <media-server-address\n    \
    \                          uri=\"sip:MediaServer@ms.example.com:5080\">\n    \
    \            <connection-id>32pbdxZ8:KQw677BF</connection-id>\n              \
    \  <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n    \
    \                    <decoding>60</decoding>\n                        <encoding>60</encoding>\n\
    \                    </rtp-codec>\n                </ivr-sessions>\n         \
    \   </media-server-address>\n            <media-server-address\n             \
    \          uri=\"sip:OtherMediaServer@pool.example.net:5080\">\n             \
    \   <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n   \
    \                     <decoding>40</decoding>\n                        <encoding>40</encoding>\n\
    \                    </rtp-codec>\n                </ivr-sessions>\n         \
    \   </media-server-address>\n        </response-session-info>\n     </mediaResourceResponse>\n\
    \   </mrbconsumer>\n   --Part\n   The sequence diagram and the dumps effectively\
    \ show the different\n   approach with respect to the Query mode.  The SIP INVITE\
    \ sent by the\n   AS (1.) includes both a Consumer request (the same as before)\
    \ and an\n   SDP to negotiate a CFW channel with an MS.  The MRB takes care of\
    \ the\n   request exactly as before (provisioning two MS instances) but with a\n\
    \   remarkable difference: first of all, it picks one of the two MS\n   instances\
    \ on behalf of the AS (negotiating the Control Channel in\n   steps 3 to 6) and\
    \ only then replies to the AS with both the MS side\n   of the SDP negotiation\
    \ (with information on how to set up the Control\n   Channel) and the Consumer\
    \ response itself.\n   The Consumer response is also slightly different in the\
    \ first place.\n   In fact, as can be seen in 7., there's an additional element\n\
    \   (<connection-id>) that the MRB has added to the message.  This\n   element\
    \ contains the 'connection-id' that the AS and MS would have\n   built out of\
    \ the 'From' and 'To' tags as explained in Section 6, had\n   the AS contacted\
    \ the MS directly.  Since the MRB has actually done\n   the negotiation on behalf\
    \ of the AS, without this information the AS\n   and MS would refer to different\
    \ connectionid attributes to target the\n   same dialog, thus causing the CFW\
    \ protocol not to behave as expected.\n   This aspect will be more carefully described\
    \ in the next section (for\n   the media dialog-based approach), since the 'connection-id'\
    \ attribute\n   is strictly related to media sessions.\n   As before, for the\
    \ sake of conciseness the subsequent steps of the\n   previous transaction are\
    \ quite trivial and therefore are not\n   presented.  In fact, as shown in the\
    \ flow, the SIP negotiation has\n   resulted in both the AS and the chosen MS\
    \ negotiating a Control\n   Channel.  This means that the AS is only left to instantiate\
    \ the\n   Control Channel and send CFW requests according to its application\n\
    \   logic.\n   It is worthwhile to highlight the fact that, as in the Query example,\n\
    \   the AS gets the addresses of both of the chosen MS in this example as\n  \
    \ well, since a Consumer transaction has taken place.  This means that,\n   just\
    \ as in the Query case, any UAC media dialog can be redirected\n   directly to\
    \ the proper MS using the 3PCC approach, e.g., as shown in\n   Figure 10, rather\
    \ than again using the MRB as a Proxy/B2BUA.  Of\n   course, a separate SIP control\
    \ dialog would be needed before\n   attempting to use the second MS instance.\n"
- title: '7.2.2.2.  Inline-Aware Mode: Media Dialog-Based Approach'
  contents:
  - "7.2.2.2.  Inline-Aware Mode: Media Dialog-Based Approach\n   There's a second\
    \ way to take advantage of the IAMM mode, i.e.,\n   exploiting SIP dialogs related\
    \ to UAC media dialogs as 'vessels' for\n   Consumer messages.  As will be made\
    \ clearer in the following sequence\n   diagram and protocol dumps, this scenario\
    \ does not differ much from\n   the scenario presented in Section 7.2.2.1 with\
    \ respect to the\n   Consumer request/response, but it may be useful to compare\
    \ these two\n   scenarios and show how they may differ with respect to the management\n\
    \   of the media dialog itself and any CFW Control Channel that may be\n   involved.\n\
    \   Figure 50 presents a ladder diagram of a typical Consumer request in\n   the\
    \ media dialog-based Inline-aware topology:\n   UAC              AS          \
    \           MRB                        MS\n    |               |             \
    \          |                          |\n    | 1. INVITE     |               \
    \        |                          |\n    | (audio/video) |                 \
    \      |                          |\n    |-------------->|                   \
    \    |                          |\n    | 2. 100 Trying |                     \
    \  |                          |\n    |<--------------|                       |\
    \                          |\n    |               | 3. INVITE             |  \
    \                        |\n    |               | (multipart/mixed:     |    \
    \                      |\n    |               |  audio/video from 1., |      \
    \                    |\n    |               |  application/mrb-consumer+xml) \
    \                  |\n    |               |---------------------->|          \
    \                |\n    |               |       4. 100 (Trying) |            \
    \              |\n    |               |<----------------------|              \
    \            |\n    |               |                       |--+ Extract SDP and\
    \       |\n    |               |                       |  | MRB payloads; handle\
    \  |\n    |               |                       |<-+ Consumer request to   |\n\
    \    |               |                       |    pick Media Servers    |\n  \
    \  |               |                       |                          |\n    |\
    \               |                       | 5. INVITE                |\n    |  \
    \             |                       | (audio/video from 3.)    |\n    |    \
    \           |                       |------------------------->|\n    |      \
    \         |                       |          6. 100 (Trying) |\n    |        \
    \       |                       |<-------------------------|\n    |          \
    \     |                       |                       +--|\n    |            \
    \   |                       |   Handle media dialog |  |\n    |              \
    \ |                       |       (connection-id) +->|\n    |               |\
    \                       |                          |\n    |               |  \
    \                     |                7. 200 OK |\n    |               |    \
    \                   |    (audio/video from MS) |\n    |               |      \
    \                 |<-------------------------|\n    |               |        \
    \               | 8. ACK                   |\n    |               |          \
    \             |------------------------->|\n    |               |        Prepare\
    \ new +--|                          |\n    |               |       payload with\
    \ |  |                          |\n    |               |    SDP from MS and +->|\
    \                          |\n    |               |     Consumer reply    |  \
    \                        |\n    |               |                       |    \
    \                      |\n    |               |             9. 200 OK |      \
    \                    |\n    |               |     (multipart/mixed: |        \
    \                  |\n    |               |      audio/video from MS,        \
    \                |\n    |               |      application/mrb-consumer+xml) \
    \              |\n    |               |<----------------------|              \
    \            |\n    |               | 10. ACK               |                \
    \          |\n    |               |---------------------->|                  \
    \        |\n    |               |                       |                    \
    \      |\n    |               |--+ Read Consumer      |                      \
    \    |\n    |               |  | reply and send     |                        \
    \  |\n    |               |<-+ SDP back to UAC    |                          |\n\
    \    |    11. 200 OK |                       |                          |\n  \
    \  |(audio/video from MS)                  |                          |\n    |<--------------|\
    \                       |                          |\n    | 12. ACK       |  \
    \                     |                          |\n    |-------------->|    \
    \                   |                          |\n    |               |      \
    \                 |                          |\n    |<<***************************\
    \ RTP ******************************>>|\n    |               |               \
    \        |                          |\n    |               |--+ Negotiate    \
    \      |                          |\n    |               |  | CFW channel    \
    \    |                          |\n    |               |<-+ towards MS       \
    \  |                          |\n    |               |    (if needed)        |\
    \                          |\n    .               .                       .  \
    \                        .\n    .               .                       .    \
    \                      .\n    |               |                       |      \
    \                    |\n    |               |<<############## TCP CONNECTION ################>>|\n\
    \    |               |                                                  |\n  \
    \  |               | CFW SYNC                                         |\n    |\
    \               |+++++++++++++++++++++++++++++++++++++++++++++++++>|\n    |  \
    \             |                                                  |\n    .    \
    \           .                       .                          .\n    .      \
    \         .                       .                          .\n          Figure\
    \ 50: Media Resource Brokering: Media Dialog-Based\n                         \
    \    Inline-Aware Mode\n   To make the scenario easier to understand, we assume\
    \ that the AS is\n   interested in exactly the same set of requirements as those\
    \ presented\n   in Section 7.2.1.  This means that the Consumer request originated\
    \ by\n   the AS will be the same as before, with only the transport/topology\n\
    \   changing.\n   Again, please note that to make the protocol contents easier\
    \ to read,\n   a simple 'Part' is used whenever a boundary for a multipart/mixed\n\
    \   payload is provided, instead of the actual boundary that would be\n   inserted\
    \ in the SIP messages.\n   The framework transaction steps (for simplicity's sake,\
    \ only the\n   relevant headers and payloads, and not the complete SIP transactions,\n\
    \   are reported) are as follows:\n"
- title: 1. UAC -> AS (INVITE with media SDP)
  contents:
  - '1. UAC -> AS (INVITE with media SDP)

    '
- title: '------------------------------------'
  contents:
  - "------------------------------------\n   [..]\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n\
    \   To: <sip:mediactrlDemo@as.example.com>\n   [..]\n   Content-Type: application/sdp\n\
    \   v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n\
    \   c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0\
    \ PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101\
    \ telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n"
- title: 3. AS -> MRB (INVITE multipart/mixed)
  contents:
  - '3. AS -> MRB (INVITE multipart/mixed)

    '
- title: '-------------------------------------'
  contents:
  - "-------------------------------------\n   [..]\n   From: <sip:ApplicationServer@as.example.com>;tag=fd4fush5\n\
    \   To: <sip:Mrb@mrb.example.org>\n   [..]\n   Content-Type: multipart/mixed;boundary=\"\
    Part\"\n   --Part\n   Content-Type: application/sdp\n   v=0\n   o=lminiero 123456\
    \ 654321 IN IP4 203.0.113.2\n   s=A conversation\n   c=IN IP4 203.0.113.2\n  \
    \ t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000/1\n   a=rtpmap:3\
    \ GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101 telephone-event/8000\n\
    \   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n   --Part\n   Content-Type: application/mrb-consumer+xml\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <mrbconsumer\
    \ version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"\
    >\n    <mediaResourceRequest id=\"bnv3xc45\">\n        <generalInfo>\n       \
    \     <packages>\n                <package>msc-ivr/1.0</package>\n           \
    \     <package>msc-mixer/1.0</package>\n            </packages>\n        </generalInfo>\n\
    \        <ivrInfo>\n            <ivr-sessions>\n                <rtp-codec name=\"\
    audio/basic\">\n                    <decoding>100</decoding>\n               \
    \     <encoding>100</encoding>\n                </rtp-codec>\n            </ivr-sessions>\n\
    \            <file-formats>\n                <required-format name=\"audio/x-wav\"\
    />\n            </file-formats>\n            <file-transfer-modes>\n         \
    \       <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n        \
    \    </file-transfer-modes>\n        </ivrInfo>\n    </mediaResourceRequest>\n\
    \   </mrbconsumer>\n   --Part\n"
- title: 5. MRB -> MS (INVITE SDP only)
  contents:
  - '5. MRB -> MS (INVITE SDP only)

    '
- title: '------------------------------'
  contents:
  - "------------------------------\n   [..]\n   From: <sip:Mrb@mrb.example.org:5060>;tag=32pbdxZ8\n\
    \   To: <sip:MediaServer@ms.example.com:5080>\n   [..]\n   Content-Type: application/sdp\n\
    \   v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n\
    \   c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0\
    \ PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101\
    \ telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n"
- title: 7. MRB <- MS (200 OK SDP)
  contents:
  - '7. MRB <- MS (200 OK SDP)

    '
- title: '-------------------------'
  contents:
  - "-------------------------\n   [..]\n   From: <sip:Mrb@mrb.example.org:5060>;tag=32pbdxZ8\n\
    \   To: <sip:MediaServer@ms.example.com:5080>;tag=KQw677BF\n   [..]\n   Content-Type:\
    \ application/sdp\n   v=0\n   o=lminiero 123456 654322 IN IP4 203.0.113.1\n  \
    \ s=MediaCtrl\n   c=IN IP4 203.0.113.1\n   t=0 0\n   m=audio 63442 RTP/AVP 0 3\
    \ 8 101\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:3 GSM/8000\n   a=rtpmap:8 PCMA/8000\n\
    \   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101 0-15\n   a=ptime:20\n   a=label:7eda834\n\
    \   m=video 33468 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=2\n\
    \   a=label:0132ca2\n"
- title: 9. AS <- MRB (200 OK multipart/mixed)
  contents:
  - '9. AS <- MRB (200 OK multipart/mixed)

    '
- title: '-------------------------------------'
  contents:
  - "-------------------------------------\n   [..]\n   From: <sip:ApplicationServer@as.example.com>;tag=fd4fush5\n\
    \   To: <sip:Mrb@mrb.example.org>;tag=117652221\n   [..]\n   Content-Type: multipart/mixed;boundary=\"\
    Part\"\n   --Part\n   Content-Type: application/sdp\n   v=0\n   o=lminiero 123456\
    \ 654322 IN IP4 203.0.113.1\n   s=MediaCtrl\n   c=IN IP4 203.0.113.1\n   t=0 0\n\
    \   m=audio 63442 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:3 GSM/8000\n\
    \   a=rtpmap:8 PCMA/8000\n   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101\
    \ 0-15\n   a=ptime:20\n   a=label:7eda834\n   m=video 33468 RTP/AVP 98\n   a=rtpmap:98\
    \ H263-1998/90000\n   a=fmtp:98 CIF=2\n   a=label:0132ca2\n   --Part\n   Content-Type:\
    \ application/mrb-consumer+xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>\n   <mrbconsumer version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"\
    \ >\n    <mediaResourceResponse reason=\"Resource found\" status=\"200\"\n   \
    \                        id=\"bnv3xc45\">\n        <response-session-info>\n \
    \           <session-id>z1skKYZQ3eFu</session-id>\n            <seq>9</seq>\n\
    \            <expires>3600</expires>\n            <media-server-address\n    \
    \                          uri=\"sip:MediaServer@ms.example.com:5080\">\n    \
    \            <connection-id>32pbdxZ8:KQw677BF</connection-id>\n              \
    \  <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n    \
    \                    <decoding>60</decoding>\n                        <encoding>60</encoding>\n\
    \                    </rtp-codec>\n                </ivr-sessions>\n         \
    \   </media-server-address>\n            <media-server-address\n             \
    \          uri=\"sip:OtherMediaServer@pool.example.net:5080\">\n             \
    \   <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n   \
    \                     <decoding>40</decoding>\n                        <encoding>40</encoding>\n\
    \                    </rtp-codec>\n                </ivr-sessions>\n         \
    \   </media-server-address>\n        </response-session-info>\n    </mediaResourceResponse>\n\
    \   </mrbconsumer>\n   --Part\n"
- title: 11. UAC <- AS (200 OK SDP)
  contents:
  - '11. UAC <- AS (200 OK SDP)

    '
- title: '--------------------------'
  contents:
  - "--------------------------\n   [..]\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n\
    \   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   [..]\n   Content-Type:\
    \ application/sdp\n   v=0\n   o=lminiero 123456 654322 IN IP4 203.0.113.1\n  \
    \ s=MediaCtrl\n   c=IN IP4 203.0.113.1\n   t=0 0\n   m=audio 63442 RTP/AVP 0 3\
    \ 8 101\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:3 GSM/8000\n   a=rtpmap:8 PCMA/8000\n\
    \   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101 0-15\n   a=ptime:20\n   a=label:7eda834\n\
    \   m=video 33468 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=2\n\
    \   a=label:0132ca2\n   The first obvious difference is that the first INVITE\
    \ (1.) is not\n   originated by the AS itself (the AS was willing to set up a\
    \ Control\n   Channel in the previous example) but by an authorized UAC (e.g.,\
    \ to\n   take advantage of a media service provided by the AS).  As such, the\n\
    \   first INVITE only contains an SDP to negotiate an audio and video\n   channel.\
    \  The AS in its business logic needs to attach this UAC to an\n   MS according\
    \ to some specific requirements (e.g., the called URI is\n   associated to a specific\
    \ service) and as such prepares a Consumer\n   request to be sent to the MRB in\
    \ order to obtain a valid MS for that\n   purpose.  As before, the Consumer request\
    \ is sent together with the\n   SDP to the MRB (3.).  The MRB extracts the Consumer\
    \ payload and takes\n   care of it as usual; it picks two MS instances and attaches\
    \ the UAC\n   to the first MS instance (5.).  Once the MS has successfully\n \
    \  negotiated the audio and video streams (7.), the MRB takes note of\n   the\
    \ 'connection-id' associated with this call (which will be needed\n   afterwards\
    \ in order to manipulate the audio and video streams for\n   this user) and sends\
    \ back to the AS both the SDP returned by the MS\n   and the Consumer response\
    \ (9.).  The AS extracts the Consumer\n   response and takes note of both the\
    \ MS instances it has been given\n   and the connection-id information.  It then\
    \ completes the scenario by\n   sending back to the UAC the SDP returned by the\
    \ MS (11.).\n   At this point, the UAC has successfully been attached to an MS.\
    \  The\n   AS only needs to set up a Control Channel to that MS, if needed.\n\
    \   This step may not be required, especially if the Consumer request is\n   an\
    \ update to an existing session rather than the preparation of a new\n   session.\
    \  Assuming that a Control Channel towards that MS doesn't\n   exist yet, the\
    \ AS creates it as usual by sending an INVITE directly\n   to the MS for which\
    \ it has an address.  Once done with that, it can\n   start manipulating the audio\
    \ and video streams of the UAC.  To do so,\n   it refers to the <connection-id>\
    \ element as reported by the MRB,\n   rather than relying on the <connection-id>\
    \ element that it is aware\n   of.  In fact, the AS is aware of a connection-id\
    \ value (fd4fush5:\n   117652221, built out of the messages exchanged with the\
    \ MRB), while\n   the MS is aware of another (32pbdxZ8:KQw677BF, built out of\
    \ the\n   MRB-MS interaction).  The right connection-id is of course the one\n\
    \   the MS is aware of, and as such the AS refers to that connection-id,\n   which\
    \ the MRB added to the Consumer response just for that purpose.\n"
- title: 7.2.3.  Inline-Unaware Mode
  contents:
  - "7.2.3.  Inline-Unaware Mode\n   Whereas in the Inline-aware mode the AS knows\
    \ it is sending an INVITE\n   to an MRB and not to an MS, and acts accordingly\
    \ (using the\n   multipart/mixed payload to query for an MS able to fulfill its\n\
    \   requirements), in the Inline-Unaware MRB Mode (IUMM) the AS does not\n   distinguish\
    \ an MRB from an MS.  This means that an MRB-unaware AS\n   having access to an\
    \ MRB talks to it as if it were a generic MEDIACTRL\n   MS: i.e., the AS negotiates\
    \ a Control Channel directly with the MRB\n   and attaches its media dialogs there\
    \ as well.  Of course, since the\n   MRB doesn't provide any MS functionality\
    \ by itself, it must act as a\n   Proxy/B2BUA between the AS and an MS for both\
    \ the Control Channel\n   dialog and the media dialogs.  According to implementation\
    \ or\n   deployment choices, simple redirects could also be exploited for that\n\
    \   purpose.\n   The problem is that without any Consumer request being placed\
    \ by the\n   MRB-unaware AS the MRB can't rely on AS-originated directives to\
    \ pick\n   one MS rather than another.  In fact, the MRB can't know what the AS\n\
    \   is looking for.  The MRB is then assumed to pick one according to its\n  \
    \ logic, which is implementation specific.\n   Figure 51 presents a ladder diagram\
    \ of a typical Consumer request in\n   the Inline-unaware topology:\n   AS   \
    \                   MRB                          MS\n    |                   \
    \    |                           |\n    | 1. INVITE             |            \
    \               |\n    | (application/cfw)     |                           |\n\
    \    |---------------------->|                           |\n    |       2. 100\
    \ (Trying) |                           |\n    |<----------------------|      \
    \                     |\n    |                       |--+ Pick an MS         \
    \    |\n    |                       |  | and redirect           |\n    |     \
    \                  |<-+ INVITE there           |\n    |                      \
    \ |                           |\n    |                       | 3. INVITE     \
    \            |\n    |                       | (application/cfw from 1.) |\n  \
    \  |                       |-------------------------->|\n    |              \
    \         |           4. 100 (Trying) |\n    |                       |<--------------------------|\n\
    \    |                       |                           |--+ Negotiate\n    |\
    \                       |                           |  | CFW Control\n    |  \
    \                     |                           |<-+ Channel\n    |        \
    \               |                 5. 200 OK |\n    |                       | (application/cfw\
    \ from MS) |\n    |                       |<--------------------------|\n    |\
    \                       | 6. ACK                    |\n    |                 \
    \      |-------------------------->|\n    |                       |          \
    \                 |\n    |             7. 200 OK |                           |\n\
    \    |(application/cfw from MS)                          |\n    |<----------------------|\
    \                           |\n    | 8. ACK                |                 \
    \          |\n    |---------------------->|                           |\n    |\
    \                       |                           |\n    |                 \
    \                                  |\n    |<<############## TCP CONNECTION #################>>|\n\
    \    |                                                   |\n    | CFW SYNC   \
    \                                       |\n    |++++++++++++++++++++++++++++++++++++++++++++++++++>|\n\
    \    |                                                   |\n    .            \
    \           .                           .\n    .                       .     \
    \                      .\n         Figure 51: Media Resource Brokering: Inline-Unaware\
    \ Mode\n   As can be seen in the diagram, in this topology the MRB basically\n\
    \   acts as a 3PCC between the AS and the chosen MS.\n   The same can be said\
    \ with respect to attaching UAC media dialogs.\n   The MRB remembers the MS it\
    \ has chosen for the AS, and for every UAC\n   media dialog the AS tries to attach\
    \ to the MRB, it makes sure that it\n   is somehow actually redirected to the\
    \ MS.\n   No content for the presented messages is provided in this section, as\n\
    \   in the IUMM mode no Consumer transaction is involved.  In this\n   example,\
    \ a simple [RFC6230] Control Channel negotiation occurs where\n   the MRB acts\
    \ as an intermediary, that is, picking an MS for the AS\n   according to some\
    \ logic.  In this case, in fact, the AS does not\n   support the MRB specification\
    \ and so just tries to set up a Control\n   Channel according to its own logic.\n\
    \   It is worth pointing out that the MRB may actually enforce its\n   decision\
    \ about the MS to grant to the AS in different ways.\n   Specifically, the sentence\
    \ \"redirect the INVITE\" that is used in\n   Figure 51 does not necessarily mean\
    \ that a SIP 302 message should be\n   used for that purpose.  A simple way to\
    \ achieve this may be\n   provisioning the unaware AS with different URIs, all\
    \ actually\n   transparently handled by the MRB itself; this would allow the MRB\
    \ to\n   simply map those URIs to different MS instances.  The SIP 'Contact'\n\
    \   header may also be used by the MRB in a reply to an INVITE coming\n   from\
    \ an AS to provide the actual URI on which the chosen MS might be\n   reached.\
    \  A motivation for such a discussion, and more details on\n   this topic, are\
    \ provided in Section 7.3.2.\n"
- title: 7.3.  Handling Media Dialogs
  contents:
  - "7.3.  Handling Media Dialogs\n   It is worthwhile to briefly address how media\
    \ dialogs would be\n   managed whenever an MRB is involved in the following scenarios.\
    \  In\n   fact, the presence of an MRB may introduce an additional complexity\n\
    \   compared to the quite straightforward 1:1 AS-MS topology.\n"
- title: 7.3.1.  Query and Inline-Aware Mode
  contents:
  - "7.3.1.  Query and Inline-Aware Mode\n   Normally, especially in the Query and\
    \ IAMM case, the MRB would only\n   handle Consumer requests by an AS, and after\
    \ that the AS and the MS\n   picked by the MRB for a specific request would talk\
    \ directly to each\n   other by means of SIP.  This is made possible by the fact\
    \ that the AS\n   gets the MS SIP URI in reply to its request.  In this case,\
    \ an AS can\n   simply relay media dialogs associated with that session to the\
    \ right\n   MS to have them handled accordingly.  Of course, in order for this\
    \ to\n   work it is assumed that the AS creates a Control Channel to a chosen\n\
    \   MS before it has any requests to service.\n   An example of such a scenario\
    \ is presented in Figure 52.  Please note\n   that this diagram and subsequent\
    \ diagrams in this section are\n   simplified with respect to the actual protocol\
    \ interactions.  For\n   instance, the whole SIP transactions are not presented,\
    \ and only the\n   originating messages are presented in order to clarify the\
    \ scenario\n   in a simple way.\n"
- title: UAC              AS                           MRB                     MS
  contents:
  - "UAC              AS                           MRB                     MS\n |\
    \                |                            |                      |\n |   \
    \             | 1. Consumer request        |                      |\n |      \
    \          |--------------------------->|                      |\n |         \
    \       |                            |                      |\n |            \
    \    |       2. Consumer response |                      |\n |               \
    \ |<---------------------------|                      |\n |                | \
    \                           |                      |\n |                | 3. COMEDIA\
    \ negotiation to create CFW channel      |\n |                |-------------------------------------------------->|\n\
    \ |                |                            |                      |\n | \
    \               |<<############## CFW CONNECTION #################>>|\n | 4. INVITE\
    \ xyz  |                            |                      |\n |--------------->|\
    \                            |                      |\n |                | 5.\
    \ Attach UAC to MS (3PCC)                        |\n |                |-------------------------------------------------->|\n\
    \ |                |                            |                      |\n |<<++++++++++++++++++++++\
    \ RTP channels ++++++++++++++++++++++++++++>>|\n |                |          \
    \                  |                      |\n .                .             \
    \               .                      .\n .                .                \
    \            .                      .\n              Figure 52: Handling Media\
    \ Dialogs in Query/IAMM\n   As can be deduced from the diagram, the interactions\
    \ among the\n   components are quite straightforward.  The AS knows which MS it\
    \ has\n   been assigned to (as a consequence of the MRB Consumer request,\n  \
    \ whether it has been achieved by means of HTTP or SIP), and so it can\n   easily\
    \ attach any UAC accessing its functionality to the MS itself\n   and manipulate\
    \ its media connections by using the CFW Control Channel\n   as usual.\n   In\
    \ such a scenario, the MRB is only involved as a locator.  Once the\n   MRB provides\
    \ the AS with the URI of the required resource, it doesn't\n   interfere with\
    \ subsequent interactions unless it wants to perform\n   monitoring (e.g., by\
    \ exploiting the Publishing information reported\n   by the MS).  As a consequence,\
    \ the scenario basically becomes 1:1\n   between the AS and the MS again.\n  \
    \ Nevertheless, there are cases when having an MRB in the SIP signaling\n   path\
    \ as well might be a desired feature, e.g., for more control over\n   the use\
    \ of the resources.  Considering how the Consumer interface has\n   been envisaged,\
    \ this feature is easily achievable, with no change to\n   the protocol required\
    \ at all.  Specifically, in order to achieve such\n   functionality, the MRB may\
    \ reply to a Consumer request with a URI for\n   which the MRB is responsible\
    \ (rather than the MS SIP URI as discussed\n   previously) and map this URI to\
    \ the actual MS URI in its business\n   logic; this would be transparent to the\
    \ AS.  This way, the AS would\n   interact with the MRB as if it were the MS itself.\n\
    \   Figure 53 shows how the scenario would change in this case.\n UAC        \
    \      AS                           MRB                    MS\n  |           \
    \     |                            |                      |\n  |             \
    \   | 1. Consumer request        |                      |\n  |               \
    \ |--------------------------->|                      |\n  |                |\
    \                            |                      |\n  |                |  \
    \     2. Consumer response |                      |\n  |                |<---------------------------|\
    \                      |\n  |                |                            |  \
    \                    |\n  |                | 3. COMEDIA negotiation     |    \
    \                  |\n  |                |--------------------------->|      \
    \                |\n  |                |                            | 4. COMEDIA\
    \ neg.      |\n  |                |                            |--------------------->|\n\
    \  |                |                            |                      |\n  |\
    \                |<<############## CFW CONNECTION #################>>|\n  | 5.\
    \ INVITE xyz  |                            |                      |\n  |--------------->|\
    \                            |                      |\n  |                | 6.\
    \ Attach UAC to MS (3PCC) |                      |\n  |                |--------------------------->|\
    \                      |\n  |                |                            | 7.\
    \ Attach UAC (3PCC) |\n  |                |                            |--------------------->|\n\
    \  |                |                            |                      |\n  |<<++++++++++++++++++++++\
    \ RTP channels ++++++++++++++++++++++++++++>>|\n  |                |         \
    \                   |                      |\n  .                .           \
    \                 .                      .\n  .                .             \
    \               .                      .\n             Figure 53: Handling Media\
    \ Dialogs in Query/IAMM:\n                         MRB in the Signaling Path\n\
    \   This time, even though the MRB has picked a specific MS after a\n   request\
    \ from an AS, it replies with another SIP URI, a URI it would\n   reply to itself.\
    \  The AS would contact that URI in order to negotiate\n   the Control Channel,\
    \ and the MRB would proxy/forward the request to\n   the actual MS transparently.\
    \  Eventually, the Control Channel would\n   be instantiated between the AS and\
    \ the MS.  The same happens for UACs\n   handled by the AS; the AS would forward\
    \ the calls to the URI provided\n   to it, the one handled by the MRB, which would\
    \ in turn relay the call\n   to the MS in order to have the proper RTP channels\
    \ created between\n   the UAC and the MS.\n   This scenario is not very different\
    \ from the previous scenario,\n   except that the MRB is now on the signaling\
    \ path for both the SIP\n   control dialog and the SIP media dialogs, allowing\
    \ it to have more\n   control of the resources (e.g., triggering a BYE if a resource\
    \ has\n   expired).  There are several possible approaches an MRB might take to\n\
    \   allocate URIs to map to a requested MS.  For example, an MRB might\n   use\
    \ SIP URI parameters to generate multiple SIP URIs that are unique\n   but that\
    \ all route to the same host and port, e.g.,\n   sip:MrbToMs@mrb.example.com:5080;p=1234567890.\
    \  Alternatively, the\n   MRB might simply allocate a pool of URIs for which it\
    \ would be\n   responsible and manage the associations with the requested MS\n\
    \   services accordingly.\n"
- title: 7.3.2.  Inline-Unaware Mode
  contents:
  - "7.3.2.  Inline-Unaware Mode\n   As mentioned previously, in the IUMM case the\
    \ AS would interact with\n   the MRB as if it were the MS itself.  One might argue\
    \ that this would\n   make the AS act as it would in the IAMM case.  This is not\
    \ the case,\n   however, since the AS actually provided the MRB with information\n\
    \   about the resources it required, leading to the selection of a proper\n  \
    \ MS, while in the IUMM case the MRB would have to pick an MS with no\n   help\
    \ from the AS at all.\n   That said, the IUMM case is also very interesting with\
    \ respect to\n   media dialog management.  In fact, in the MRB-unaware mode, there\n\
    \   would be no Consumer request, and an AS would actually see the MRB as\n  \
    \ an MS.  Unlike the previous scenarios, because there is no AS<->MRB\n   interaction\
    \ and as such no MS selection process, the MRB would likely\n   be in the signaling\
    \ path anyway, at least when the AS first shows up.\n   The MRB could either redirect\
    \ the AS to an MS directly or\n   transparently act as a Proxy/B2BUA and contact\
    \ an MS (according to\n   implementation-specific policies) on behalf of the unaware\
    \ AS.\n   While apparently not a problem, this raises an issue when the same\n\
    \   unaware AS has several sessions with different MS.  The AS would only\n  \
    \ see one \"virtual\" MS (the MRB), and so it would relay all calls\n   there,\
    \ making it hard for the MRB to understand where these media\n   dialogs should\
    \ belong: specifically, whether the UAC calling belongs\n   to the AS application\
    \ logic leading to MS1 or MS2, or somewhere else.\n   One possible, and very simple,\
    \ approach to take care of this issue is\n   to always relay the SIP dialogs from\
    \ the same unaware AS to the same\n   MS, as depicted in Figure 54.\n"
- title: UAC1  UAC2       AS                           MRB                     MS
  contents:
  - "UAC1  UAC2       AS                           MRB                     MS\n |\
    \     |          |                            |                      |\n |   \
    \  |          | 1. COMEDIA negotiation (A) |                      |\n |     |\
    \          |--------------------------->|                      |\n |     |   \
    \       |                            | 2. COMEDIA neg. (A)  |\n |     |      \
    \    |                            |--------------------->|\n |     |         \
    \ |                            |                      |\n |     |          |<<##############\
    \ CFW CONNECTION #################>>|\n |     |          |                   \
    \         |                      |\n |     |          | 3. COMEDIA negotiation\
    \ (B) |                      |\n |     |          |--------------------------->|\
    \                      |\n |     |          |                            | 4.\
    \ COMEDIA neg. (B)  |\n |     |          |                            |--------------------->|\n\
    \ |     |          |                            |                      |\n | \
    \    |          |<<############## CFW CONNECTION #################>>|\n | 5. INVITE\
    \ xyz  |                            |                      |\n |--------------->|\
    \                            |                      |\n |     |          | 6.\
    \ Attach UAC1 to MS (3PCC)|                      |\n |     |          |--------------------------->|\
    \                      |\n |     |          |                            | 7.\
    \ Attach UAC (3PCC) |\n |     |          |                            |--------------------->|\n\
    \ |     |          |                            |                      |\n |<<++++++++++++++++++++++\
    \ RTP channels ++++++++++++++++++++++++++++>>|\n |     |          |          \
    \                  |                      |\n |     | 8. INVITE|             \
    \               |                      |\n |     |    jkl   |                \
    \            |                      |\n |     |--------->|                   \
    \         |                      |\n |     |          | 9. Attach UAC2 to MS (3PCC)|\
    \                      |\n |     |          |--------------------------->|   \
    \                   |\n |     |          |                            | 10. Attach\
    \ UAC (3PCC)|\n |     |          |                            |--------------------->|\n\
    \ |     |          |                            |                      |\n | \
    \    |<<++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |    \
    \ |          |                            |                      |\n .     . \
    \         .                            .                      .\n .     .    \
    \      .                            .                      .\n       Figure 54:\
    \ Handling Media Dialogs in IUMM: Always the Same MS\n   In this example, the\
    \ AS creates two different Control Channel\n   sessions (A and B) to address two\
    \ different business logic\n   implementations; e.g., the AS SIP URI 'xyz' (associated\
    \ with CFW\n   session A) may be an IVR pizza-ordering application, while the\
    \ AS SIP\n   URI 'jkl' (associated with CFW session B) may be associated with\
    \ a\n   conference room.  It's quite clear, then, that if the MRB forwarded\n\
    \   the two CFW sessions to two different MS, the handling of UAC media\n   dialogs\
    \ would prove troublesome, because the MRB would have\n   difficulty figuring\
    \ out whether UAC1 should be attached to the MS\n   managing CFW session A or\
    \ the MS managing CFW session B.  In this\n   example, forwarding all CFW sessions\
    \ and UAC media dialogs coming\n   from the same MRB-unaware AS to the same MS\
    \ would work as expected.\n   The MRB would in fact leave the mapping of media\
    \ dialogs and CFW\n   sessions up to the AS.\n   This approach, while very simple\
    \ and indeed not very scalable, would\n   actually help take care of the issue.\
    \  In fact, no matter how many\n   separate Control Channels the AS might have\
    \ with the MRB/MS (in this\n   example, Control Channel A would be mapped to application\
    \ xyz and\n   Control Channel B to application jkl), the termination point would\n\
    \   still always be the same MS, which would consequently be the\n   destination\
    \ for all media dialogs as well.\n   To overcome the scalability limitations of\
    \ such an approach, at least\n   in regard to the MRB being in the SIP signaling\
    \ path for all calls, a\n   different approach needs to be exploited.  In fact,\
    \ especially in the\n   case of different applications handled by the same unaware\
    \ AS, it\n   makes sense to try to exploit different MS for that purpose and to\n\
    \   correctly track media dialogs being forwarded accordingly.  This\n   means\
    \ that the MRB must find a way to somehow redirect the unaware AS\n   to different\
    \ MS when it predicts or realizes that a different\n   application logic is involved.\n\
    \   To do so, the MRB might use different approaches.  One approach would\n  \
    \ use redirection, e.g., by means of a SIP 302 message in reply to a\n   Control\
    \ Channel negotiation originated by an unaware AS.  Such an\n   approach is depicted\
    \ in Figure 55.\n"
- title: UAC1             AS                           MRB                     MS
  contents:
  - "UAC1             AS                           MRB                     MS\n |\
    \                |                            |                      |\n |   \
    \             | 1. COMEDIA negotiation     |                      |\n |      \
    \          |--------------------------->|                      |\n |         \
    \       |                            |                      |\n |            \
    \    |          2. 302 Moved (MS) |                      |\n |               \
    \ |<---------------------------|                      |\n |                | \
    \                           |                      |\n |                | 3. COMEDIA\
    \ negotiation     |                      |\n |                |-------------------------------------------------->|\n\
    \ |                |                            |                      |\n | \
    \               |<<############## CFW CONNECTION #################>>|\n |    \
    \            |                            |                      |\n | 4. INVITE\
    \ xyz  |                            |                      |\n |--------------->|\
    \                            |                      |\n |                | 5.\
    \ Attach UAC1 to MS (3PCC)|                      |\n |                |-------------------------------------------------->|\n\
    \ |                |                            |                      |\n |<<++++++++++++++++++++++\
    \ RTP channels ++++++++++++++++++++++++++++>>|\n |                |          \
    \                  |                      |\n .                .             \
    \               .                      .\n .                .                \
    \            .                      .\n          Figure 55: Handling Media Dialogs\
    \ in IUMM: Redirection\n   With this approach, the MRB might redirect the AS to\
    \ a specific MS\n   whenever a new Control Channel is to be created, and as a\
    \ consequence\n   the AS would redirect the related calls there.  This is similar\
    \ to\n   the first approach of the Query/IAMM case, with the difference that\n\
    \   no Consumer request would be involved.  The scenario would again fall\n  \
    \ back to a 1:1 topology between the AS and the MS, making the\n   interactions\
    \ quite simple.\n   Just as before, the MRB might be interested in being in the\
    \ signaling\n   path for the SIP dialogs, instead of just acting as a locator.\
    \  A\n   third potential approach could be implementing the \"virtual\" URIs\n\
    \   handled by the MRB, as described in the previous section.  Rather\n   than\
    \ resorting to explicit redirection or always using the same MS,\n   the MRB may\
    \ redirect new SIP control dialogs to one of its own URIs,\n   using the same\
    \ approach previously presented in Figure 53.  Such an\n   approach, as applied\
    \ to the IUMM case, is depicted in Figure 56.\n"
- title: UAC1             AS                              MRB                  MS
  contents:
  - "UAC1             AS                              MRB                  MS\n |\
    \                |                               |                   |\n |   \
    \             | 1. COMEDIA negotiation (MRB)  |                   |\n |      \
    \          |------------------------------>|                   |\n |         \
    \       |                               |                   |\n |            \
    \    |           2. 302 Moved (MRB') |                   |\n |               \
    \ |<------------------------------|                   |\n |                | \
    \                              |                   |\n |                | 3. COMEDIA\
    \ negotiation (MRB') |                   |\n |                |------------------------------>|\
    \                   |\n |                |                               | 4.\
    \ COMEDIA neg.   |\n |                |                               |------------------>\n\
    \ |                |                               |                   |\n | \
    \               |<<############## CFW CONNECTION #################>>|\n |    \
    \            |                               |                   |\n | 5. INVITE\
    \ xyz  |                               |                   |\n |--------------->|\
    \                               |                   |\n |                | 6.\
    \ Attach UAC1 to MRB' (3PCC) |                   |\n |                |------------------------------>|\
    \                   |\n |                |                               | 7 Attach\
    \ UAC (3PCC)\n |                |                               |------------------>\n\
    \ |                |                               |                   |\n |<<++++++++++++++++++++++\
    \ RTP channels ++++++++++++++++++++++++++++>>|\n |                |          \
    \                     |                   |\n .                .             \
    \                  .                   .\n .                .                \
    \               .                   .\n   Figure 56: Handling Media Dialogs in\
    \ IUMM: MRB in the Signaling Path\n   It is worth pointing out, though, that in\
    \ both cases there are\n   scenarios where there could be no assurance that the\
    \ 302 sent by the\n   MRB would be seen by the AS.  In fact, should a proxy be\
    \ between the\n   AS and the MRB, such a proxy could itself act on the 302.  To\n\
    \   properly cope with such an issue, the MRB might also use the\n   'Contact'\
    \ header in the SIP responses to the INVITE to address the\n   right MS.  Although\
    \ the AS is not required to use the information in\n   such a header to reach\
    \ the MS, it could be reasonable to exploit it\n   for that purpose, as it would\
    \ take care of the proxy scenario\n   mentioned above.\n   To conclude, there\
    \ is a further approach an MRB might try to exploit\n   to take care of the IUMM\
    \ case.  Since, as explained before, the\n   issues related to the IUMM case mostly\
    \ relate to the fact that the\n   MRB is seen as a single MS instance by the AS,\
    \ a simple way to\n   overcome this might be to make the MRB look like a set of\
    \ different\n   MS right away; this can be done by simply provisioning the unaware\
    \ AS\n   with a series of different URIs, all handled by the MRB itself acting\n\
    \   as a pool of \"virtual\" MS.  This way, the AS may be designed to use\n  \
    \ different MS for different classes of calls, e.g., for different\n   applications\
    \ it is managing (two in the example presented in this\n   section), and as such\
    \ would contact two different provisioned URIs to\n   create two distinct Control\
    \ Channels towards two different MS.  Since\n   both of the URIs would be handled\
    \ by the MRB, the MRB can use them to\n   determine to which MS each call should\
    \ be directed.  Expanding on\n   Figure 54 by removing the constraint to always\
    \ use the same MS, this\n   new scenario might look like that depicted in Figure\
    \ 57.\n UAC1  UAC2       AS                           MRB              MS1  MS2\n\
    \  |     |          |                            |                 |    |\n  |\
    \     |          | 1. COMEDIA negotiation (A) |                 |    |\n  |  \
    \   |          |    INVITE fake-ms1         |                 |    |\n  |    \
    \ |          |--------------------------->|                 |    |\n  |     |\
    \          |                            | 2. COMEDIA (A)  |    |\n  |     |  \
    \        |                            |---------------->|    |\n  |     |    \
    \      |                            |                 |    |\n  |     |      \
    \    |<<############## CFW CONNECTION 1 ##########>>|    |\n  |     |        \
    \  |                            |                 |    |\n  |     |          |\
    \ 3. COMEDIA negotiation (B) |                 |    |\n  |     |          |  \
    \  INVITE fake-ms2         |                 |    |\n  |     |          |--------------------------->|\
    \                 |    |\n  |     |          |                            | 4.\
    \ COMEDIA neg. (B)  |\n  |     |          |                            |--------------------->|\n\
    \  |     |          |                            |                 |    |\n  |\
    \     |          |<<############## CFW CONNECTION 2 ###############>>|\n  |  \
    \   |          |                            |                 |    |\n  | 5. INVITE\
    \ xyz  |                            |                 |    |\n  |--------------->|\
    \                            |                 |    |\n  |     |          | 6.\
    \ Attach UAC1 to fake-ms1 (3PCC)            |    |\n  |     |          |--------------------------->|\
    \                 |    |\n  |     |          |                            | 7.\
    \ Attach UAC   |    |\n  |     |          |                            |---------------->|\
    \    |\n  |     |          |                            |                 |  \
    \  |\n  |<<++++++++++++++++++++++ RTP channels +++++++++++++++++++++++>>|    |\n\
    \  |     |          |                            |                 |    |\n  |\
    \ 8. INVITE jkl  |                            |                 |    |\n  |--------------->|\
    \                            |                 |    |\n  |     |          | 9.\
    \ Attach UAC2 to fake-ms2 (3PCC)            |    |\n  |     |          |--------------------------->|\
    \                 |    |\n  |     |          |                            | 10.\
    \ Attach UAC  |    |\n  |     |          |                            |--------------------->|\n\
    \  |     |          |                            |                 |    |\n  |<<+++++++++++++++++++++++++\
    \ RTP channels +++++++++++++++++++++++++>>|\n  |     |          |            \
    \                |                 |    |\n  .     .          .              \
    \              .                 .    .\n  .     .          .                \
    \            .                 .    .\n        Figure 57: Handling Media Dialogs\
    \ in IUMM: Provisioned URIs\n   In this new example, we still assume that the\
    \ same unaware AS is\n   handling two different applications, still associated\
    \ with the same\n   URIs as before.  This time, though, we also assume that the\
    \ AS has\n   been designed to try to use different MS instances to handle the\
    \ two\n   very different applications for which it is responsible.  We also\n\
    \   assume that it has been configured to be able to use two different MS\n  \
    \ instances, reachable at SIP URI 'fake-ms1' and 'fake-ms2',\n   respectively,\
    \ and both actually handled by the MRB transparently.\n   This results, just as\
    \ before, in two different Control Channels (A\n   and B) being created, but this\
    \ time towards two different MS.\n   Specifically, the MRB makes sure that for\
    \ this AS the Control Channel\n   negotiation towards 'fake-ms1' is actually redirected\
    \ to MS1.  At the\n   same time, 'fake-ms2' is associated with MS2.  Once the\
    \ AS has set up\n   the Control Channels with both of the MS, it is ready to handle\
    \ media\n   dialogs.  UAC1 calls the SIP URI 'xyz' on the AS to order a pizza.\n\
    \   The AS attaches the media dialog to the MS it knows is responsible\n   for\
    \ that branch of application logic, i.e., 'fake-ms1'.  The MRB in\n   turn makes\
    \ sure that it reaches the right MS instance, MS1.  Later\n   on, a different\
    \ user, UAC2, calls SIP URI 'jkl' to join a conference\n   room.  This time, the\
    \ AS attaches this new media dialog to the MS\n   instance handling the conference\
    \ application, i.e., 'fake-ms2'.\n   Again, the MRB makes sure that it is actually\
    \ MS2 that receives the\n   dialog.\n   Again, this diagram is only meant to describe\
    \ how the MRB might\n   enforce its decisions.  Just as described in the previous\
    \ examples,\n   the MRB may choose to either act as a Proxy/B2BUA between the\
    \ AS and\n   the MS instances or redirect the AS to the right MS instances when\n\
    \   they're first contacted (e.g., by means of the Contact header and/or\n   a\
    \ SIP redirect, as explained before) and let the AS attach the media\n   dialogs\
    \ by itself.\n"
- title: 7.3.3.  CFW Protocol Behavior
  contents:
  - "7.3.3.  CFW Protocol Behavior\n   As shown in the previous diagrams, no matter\
    \ what the topology, the\n   AS and MS usually end up with a direct connection\
    \ with respect to the\n   CFW Control Channel.  As such, it can be expected that\
    \ the CFW\n   protocol continue to work as it should, and as a consequence all\
    \ the\n   call flows presented in this document can easily be reproduced in\n\
    \   those circumstances as well.\n   Nevertheless, one aspect needs to be considered\
    \ very carefully.  It's\n   worthwhile to remind readers that both the AS and\
    \ the MS use some\n   SIP-related information to address the entities they manipulate.\n\
    \   This is the case, for instance, for the <connectionid> element to\n   which\
    \ both the AS and the MS refer when addressing a specific UAC.\n   As explained\
    \ in Section 6, this 'connectionid' identifier is\n   constructed by concatenating\
    \ the 'From' and 'To' tags extracted from\n   a SIP header: specifically, from\
    \ the headers of the AS<->MS leg that\n   allows a UAC to be attached to the MS.\
    \  The presence of an additional\n   component in the path between the AS and\
    \ the MS, the MRB, might alter\n   these tags, thus causing the AS to use tags\
    \ (AS<->MRB) different than\n   those used by the MS (MRB<->MS).  This would result\
    \ in the AS and MS\n   using different 'connectionid' identifiers to address the\
    \ same UAC,\n   thus preventing the protocol from working as expected.  As a\n\
    \   consequence, it's very important that any MRB implementation take\n   very\
    \ good care to preserve the integrity of the involved SIP headers\n   when proxying/forwarding\
    \ SIP dialogs between the AS and MS, in order\n   not to \"break\" the behavior\
    \ of the protocol.\n   Let's take, for instance, the scenario depicted in Figure\
    \ 53,\n   especially steps 6 and 7, which specifically address a UAC being\n \
    \  attached by an AS to an MS via the MRB.  Let's assume that Figure 58\n   shows\
    \ what happens to the 'From' and 'To' headers in that scenario,\n   when dealing\
    \ with the 3PCC approach to attach a specific UAC to\n   the MS.\n"
- title: UAC              AS                         MRB                       MS
  contents:
  - "UAC              AS                         MRB                       MS\n |\
    \                |                          |                        |\n | INVITE\
    \ xyz     |                          |                        |\n |--------------->|\
    \                          |                        |\n |                | SIP\
    \ [..]                 |                        |\n |                | From: <..>;tag=a1b2c3\
    \    |                        |\n |                | To: <..>;tag=d4e5f6     \
    \ |                        |\n |                |<------------------------>| \
    \                       |\n |                |                          | SIP\
    \ [..]               |\n |                |                          | From: <..>;tag=aaabbb\
    \  |\n |                |                          | To: <..>;tag=cccddd    |\n\
    \ |                |                          |<---------------------->|\n | \
    \               |                          |                        |\n |    \
    \            | 1. CONTROL (play announcement to UAC)             |\n |       \
    \         |-------------------------------------------------->|\n |          \
    \      |                               2. 200 (IVR Error!) |\n |             \
    \   |<--------------------------------------------------|\n |                |\
    \                          |                        |\n .                .   \
    \                       .                        .\n .                .      \
    \                    .                        .\n     Figure 58: CFW Protocol\
    \ Behavior in the Case of Manipulated Tags\n   In this example, once done with\
    \ the 3PCC, and now that the UAC is\n   attached to the MS, the AS and the MS\
    \ end up with different\n   interpretations of what the 'connectionid' for the\
    \ UAC should be.  In\n   fact, the AS builds a 'connectionid' using the tags it\
    \ is aware of\n   (a1b2c3:d4e5f6), while the MS builds a different identifier\
    \ after\n   receiving different information from the MRB (aaabbb:cccddd).\n  \
    \ As a consequence, when the AS tries to play an announcement to the\n   UAC using\
    \ the connectionid it correctly constructed, the MS just as\n   correctly replies\
    \ with an error, since it doesn't know that\n   identifier.  This is correct protocol\
    \ behavior, because in this case\n   it was caused by misuse of the information\
    \ needed for it to work as\n   expected.\n   1. AS -> MS (CFW CONTROL, play)\n\
    \   -------------------------------\n      CFW ffhg45dzf123 CONTROL\n      Control-Package:\
    \ msc-ivr/1.0\n      Content-Type: application/msc-ivr+xml\n      Content-Length:\
    \ 284\n      <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n        <dialogstart connectionid=\"a1b2c3:d4e5f6\">\n          <dialog>\n\
    \            <prompt>\n              <media loc=\"http://www.example.net/hello.wav\"\
    />\n            </prompt>\n          </dialog>\n        </dialogstart>\n     \
    \ </mscivr>\n   2. AS <- MS (CFW 200 OK)\n   ------------------------\n      CFW\
    \ ffhg45dzf123 200\n      Timeout: 10\n      Content-Type: application/msc-ivr+xml\n\
    \      Content-Length: 148\n      <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n        <response status=\"407\" reason=\"connectionid does not exist\"\n \
    \                 dialogid=\"\"/>\n      </mscivr>\n   In an even worse scenario,\
    \ the connectionid might actually exist but\n   might be mapped to a different\
    \ UAC.  In such a case, the transaction\n   would succeed, but a completely different\
    \ UAC would be involved, thus\n   causing a silent failure that neither the AS\
    \ nor the MS would be\n   aware of.\n   That said, proper management of these\
    \ sensitive pieces of information\n   by the MRB would prevent such failure scenarios\
    \ from happening.  How\n   this issue is taken care of in the IAMM case (both\
    \ CFW-based and\n   media dialog-based) has already been described.  Addressing\
    \ this\n   issue for the IUMM case is not documented in [RFC6917] as explicitly\n\
    \   out of scope and as such may be implementation specific.\n   The same applies\
    \ to SDP fields as well.  In fact, the AS and MS use\n   ad hoc SDP attributes\
    \ to instantiate a Control Channel, as they use\n   SDP labels to address specific\
    \ media connections of a UAC media\n   dialog when a fine-grained approach is\
    \ needed.  As a consequence, any\n   MRB implementation should limit any SDP manipulation\
    \ as much as\n   possible or at least take very good care not to cause changes\
    \ that\n   could \"break\" the expected behavior of the CFW protocol.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   All the MEDIACTRL documents have strong statements\
    \ regarding security\n   considerations within the context of the interactions\
    \ occurring at\n   all levels among the involved parties.  Considering the sensitive\n\
    \   nature of the interaction between AS and MS, particular efforts have\n   been\
    \ devoted to providing guidance on how to secure what flows\n   through a Control\
    \ Channel.  In fact, transactions concerning dialogs,\n   connections, and mixes\
    \ are quite strongly related to resources\n   actually being deployed and used\
    \ in the MS.  This means that it is in\n   the interest of both AS and MS that\
    \ resources created and handled by\n   an entity are not manipulated by a potentially\
    \ malicious third party\n   if permission was not granted.\n   Because strong\
    \ statements are provided in the aforementioned\n   documents and these documents\
    \ provide good guidance to implementors\n   with respect to these issues, this\
    \ section will only provide the\n   reader with some MEDIACTRL call flows that\
    \ show how a single secured\n   MS is assumed to reply to different AS when receiving\
    \ requests that\n   may cross the bounds within which each AS is constrained.\
    \  This would\n   be the case, for instance, for generic auditing requests, or\
    \ explicit\n   conference manipulation requests where the involved identifiers\
    \ are\n   not part of the context of the originating AS.\n   To address a very\
    \ specific scenario, let's assume that two different\n   AS, AS1 and AS2, have\
    \ established a Control Channel with the same MS.\n   Considering the SYNC transaction\
    \ that an AS and an MS use to set up a\n   Control Channel, the MS is able to\
    \ discern the requests coming from\n   AS1 from the requests coming from AS2.\
    \  In fact, as explained in\n   Sections 5.1 and 5.2, an AS and an MS negotiate\
    \ a cfw-id attribute in\n   the SDP, and the same value is subsequently used in\
    \ the SYNC message\n   on the Control Channel that is created after the negotiation,\
    \ thus\n   reassuring both the AS and the MS that the Control Channel they share\n\
    \   is in fact the channel they negotiated in the first place.\n   Let's also\
    \ assume that AS1 has created a conference mix\n   (confid=74b6d62) to which it\
    \ has attached some participants within\n   the context of its business logic,\
    \ while AS2 has created a currently\n   active IVR dialog (dialogid=dfg3252) with\
    \ a user agent it is handling\n   (237430727:a338e95f).  AS2 has also joined two\
    \ connections to each\n   other (1:75d4dd0d and 1:b9e6a659).  Clearly, it is highly\
    \ desirable\n   that AS1 not be aware of what AS2 is doing with the MS and vice\n\
    \   versa, and that they not be allowed to manipulate each other's\n   resources.\
    \  The following transactions will occur:\n   1.  AS1 places a generic audit request\
    \ to both the Mixer and IVR\n       packages.\n   2.  AS2 places a generic audit\
    \ request to both the Mixer and IVR\n       packages.\n   3.  AS1 tries to terminate\
    \ the dialog created by AS2 (6791fee).\n   4.  AS2 tries to join a user agent\
    \ it handles (1:272e9c05) to the\n       conference mix created by AS1 (74b6d62).\n\
    \   A sequence diagram of the above-mentioned transactions is depicted in\n  \
    \ Figure 59, which shows how the MS is assumed to reply in all cases,\n   in order\
    \ to avoid security issues:\n      AS1                     AS2               \
    \                  MS\n       |                       |                      \
    \            |\n       | A1. CONTROL (IVR audit)                             \
    \     |\n       |++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>|\n\
    \       |                       |                       A2. 200 OK |\n       |<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n\
    \       |                       |                                  |\n       |\
    \ B1. CONTROL (Mixer audit)                                |\n       |++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>|\n\
    \       |                       |                       B2. 200 OK |\n       |<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n\
    \       |                       |                                  |\n       |\
    \                       | C1. CONTROL (IVR audit)          |\n       |       \
    \                |++++++++++++++++++++++++++++++++>>|\n       |              \
    \         |                       C2. 200 OK |\n       |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n       |                       |    \
    \                              |\n       |                       | D1. CONTROL\
    \ (Mixer audit)        |\n       |                       |++++++++++++++++++++++++++++++++>>|\n\
    \       |                       |                       D2. 200 OK |\n       |\
    \                       |<<++++++++++++++++++++++++++++++++|\n       |       \
    \                |                                  |\n       | E1. CONTROL (dialogterminate)\
    \                            |\n       |++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>|\n\
    \       |                       |                E2. 403 Forbidden |\n       |<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n\
    \       |                       |                                  |\n       |\
    \                       | F1. CONTROL (join UAC&conf[AS1]) |\n       |       \
    \                |++++++++++++++++++++++++++++++++>>|\n       |              \
    \         |                F2. 403 Forbidden |\n       |                     \
    \  |<<++++++++++++++++++++++++++++++++|\n       |                       |    \
    \                              |\n       .                       .           \
    \                       .\n       .                       .                  \
    \                .\n         Figure 59: Security Considerations: Framework Transaction\n\
    \   The expected outcome of the transaction is that the MS partially\n   \"lies\"\
    \ to both AS1 and AS2 when replying to the audit requests (not\n   all of the\
    \ identifiers are reported, but only those identifiers with\n   which each AS\
    \ is directly involved), and the MS denies the requests\n   for the unauthorized\
    \ operations (403).  Looking at each transaction\n   separately:\n   o  In the\
    \ first transaction (A1), AS1 places a generic <audit>\n      request to the IVR\
    \ package.  The request is generic, since no\n      attributes are passed as part\
    \ of the request, meaning that AS1 is\n      interested in the MS capabilities\
    \ as well as all of the dialogs\n      that the MS is currently handling.  As\
    \ can be seen in the reply\n      (A2), the MS only reports in the <auditresponse>\
    \ the package\n      capabilities, while the <dialogs> element is empty; this\
    \ is\n      because the only dialog the MS is handling has actually been\n   \
    \   created by AS2, which causes the MS not to report the related\n      identifier\
    \ (6791fee) to AS1.  In fact, AS1 could use that\n      identifier to manipulate\
    \ the dialog, e.g., by tearing it down and\n      thus causing the service to\
    \ be interrupted without AS2's\n      intervention.\n   o  In the second transaction\
    \ (B1), AS1 places an identical <audit>\n      request to the Mixer package. \
    \ The request is again generic,\n      meaning that AS1 is interested in the package\
    \ capabilities as well\n      as all the mixers and connections that the package\
    \ is handling at\n      the moment.  This time, the MS reports not only capabilities\
    \ (B2)\n      but information about mixers and connections as well.  However,\n\
    \      this information is not complete; in fact, only information about\n   \
    \   mixers and connections originated by AS1 is reported (mixer\n      74b6d62\
    \ and its participants), while the information originated by\n      AS2 is omitted\
    \ in the report.  The motivation is the same as\n      before.\n   o  In the third\
    \ and fourth transactions (C1 and D1), it's AS2 that\n      places an <audit>\
    \ request to both the IVR and Mixer packages.  As\n      with the previous transactions,\
    \ the audit requests are generic.\n      Looking at the replies (C2 and D2), it's\
    \ obvious that the\n      capabilities section is identical to the replies given\
    \ to AS1.  In\n      fact, the MS has no reason to \"lie\" about what it can do.\
    \  The\n      <dialogs> and <mixers> sections are totally different.  AS2 in\n\
    \      fact receives information about its own IVR dialog (6791fee),\n      which\
    \ was omitted in the reply to AS1, while it only receives\n      information about\
    \ the only connection it created (1:75d4dd0d and\n      1:b9e6a659) without any\
    \ details related to the mixers and\n      connections originated by AS1.\n  \
    \ o  In the fifth transaction (E1), AS1, instead of just auditing the\n      packages,\
    \ tries to terminate (<dialogterminate>) the dialog\n      created by AS2 (6791fee).\
    \  Since the identifier has not been\n      reported by the MS in the reply to\
    \ the previous audit request, we\n      assume that AS1 accessed it via a different\
    \ out-of-band mechanism.\n      This is assumed to be an unauthorized operation,\
    \ because the\n      above-mentioned dialog is outside the bounds of AS1; therefore,\n\
    \      the MS, instead of handling the syntactically correct request,\n      replies\
    \ (E2) with a framework-level 403 message (Forbidden),\n      leaving the dialog\
    \ untouched.\n   o  Similarly, in the sixth and last transaction (F1), AS2 tries\
    \ to\n      attach (<join>) one of the UACs it is handling to the conference\n\
    \      mix created by AS1 (74b6d62).  Just as in the previous\n      transaction,\
    \ the identifier is assumed to have been accessed by\n      AS2 via some out-of-band\
    \ mechanism, since the MS didn't report it\n      in the reply to the previous\
    \ audit request.  While one of the\n      identifiers (the UAC) is actually handled\
    \ by AS2, the other (the\n      conference mix) is not; therefore, as with the\
    \ fifth transaction,\n      this last transaction is regarded by the MS as outside\
    \ the bounds\n      of AS2.  For the same reason as before, the MS replies (F2)\
    \ with a\n      framework-level 403 message (Forbidden), leaving the mix and the\n\
    \      UAC unjoined.\n  A1. AS1 -> MS (CFW CONTROL, audit IVR)\n  --------------------------------------\n\
    \     CFW 140e0f763352 CONTROL\n     Control-Package: msc-ivr/1.0\n     Content-Type:\
    \ application/msc-ivr+xml\n     Content-Length: 81\n     <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <audit/>\n     </mscivr>\n\
    \  A2. AS1 <- MS (CFW 200, auditresponse)\n  --------------------------------------\n\
    \     CFW 140e0f763352 200\n     Timeout: 10\n     Content-Type: application/msc-ivr+xml\n\
    \     Content-Length: 1419\n     <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <auditresponse status=\"200\">\n        <capabilities>\n           <dialoglanguages/>\n\
    \           <grammartypes/>\n           <recordtypes>\n              <mimetype>audio/x-wav</mimetype>\n\
    \              <mimetype>video/mpeg</mimetype>\n           </recordtypes>\n  \
    \         <prompttypes>\n              <mimetype>audio/x-wav</mimetype>\n    \
    \          <mimetype>video/mpeg</mimetype>\n           </prompttypes>\n      \
    \     <variables>\n              <variabletype type=\"date\"\n               \
    \             desc=\"value formatted as YYYY-MM-DD\">\n                 <format\
    \ desc=\"month day year\">mdy</format>\n                 <format desc=\"year month\
    \ day\">ymd</format>\n                 <format desc=\"day month year\">dmy</format>\n\
    \                 <format desc=\"day month\">dm</format>\n              </variabletype>\n\
    \              <variabletype type=\"time\" desc=\"value formatted as HH:MM\">\n\
    \                 <format desc=\"24 hour format\">t24</format>\n             \
    \    <format desc=\"12 hour format with am/pm\">t12</format>\n              </variabletype>\n\
    \              <variabletype type=\"digits\" desc=\"value formatted as D+\">\n\
    \                 <format desc=\"general digit string\">gen</format>\n       \
    \          <format desc=\"cardinal\">crn</format>\n                 <format desc=\"\
    ordinal\">ord</format>\n              </variabletype>\n           </variables>\n\
    \           <maxpreparedduration>60s</maxpreparedduration>\n           <maxrecordduration>1800s</maxrecordduration>\n\
    \           <codecs>\n              <codec name=\"audio\"><subtype>basic</subtype></codec>\n\
    \              <codec name=\"audio\"><subtype>gsm</subtype></codec>\n        \
    \      <codec name=\"video\"><subtype>h261</subtype></codec>\n              <codec\
    \ name=\"video\"><subtype>h263</subtype></codec>\n              <codec name=\"\
    video\"><subtype>h263-1998</subtype></codec>\n              <codec name=\"video\"\
    ><subtype>h264</subtype></codec>\n           </codecs>\n        </capabilities>\n\
    \        <dialogs>\n        </dialogs>\n     </auditresponse>\n     </mscivr>\n\
    \  B1. AS1 -> MS (CFW CONTROL, audit mixer)\n  ----------------------------------------\n\
    \     CFW 0216231b1f16 CONTROL\n     Control-Package: msc-mixer/1.0\n     Content-Type:\
    \ application/msc-mixer+xml\n     Content-Length: 87\n     <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n        <audit/>\n     </mscmixer>\n\
    \  B2. AS1 <- MS (CFW 200, auditresponse)\n  --------------------------------------\n\
    \     CFW 0216231b1f16 200\n     Timeout: 10\n     Content-Type: application/msc-mixer+xml\n\
    \     Content-Length: 903\n     <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <auditresponse status=\"200\">\n       <capabilities>\n          <codecs>\n\
    \             <codec name=\"audio\"><subtype>basic</subtype></codec>\n       \
    \      <codec name=\"audio\"><subtype>gsm</subtype></codec>\n             <codec\
    \ name=\"video\"><subtype>h261</subtype></codec>\n             <codec name=\"\
    video\"><subtype>h263</subtype></codec>\n             <codec name=\"video\"><subtype>h263-1998</subtype></codec>\n\
    \             <codec name=\"video\"><subtype>h264</subtype></codec>\n        \
    \  </codecs>\n       </capabilities>\n       <mixers>\n         <conferenceaudit\
    \ conferenceid=\"74b6d62\">\n           <participants>\n             <participant\
    \ id=\"1864574426:e2192766\"/>\n             <participant id=\"1:5a97fd79\"/>\n\
    \           </participants>\n           <video-layout min-participants=\"1\">\n\
    \             <quad-view/>\n           </video-layout>\n         </conferenceaudit>\n\
    \         <joinaudit id1=\"1864574426:e2192766\" id2=\"74b6d62\"/>\n         <joinaudit\
    \ id1=\"1:5a97fd79\" id2=\"74b6d62\"/>\n       </mixers>\n     </auditresponse>\n\
    \     </mscmixer>\n  C1. AS2 -> MS (CFW CONTROL, audit IVR)\n  --------------------------------------\n\
    \     CFW 0216231b1f16 CONTROL\n     Control-Package: msc-ivr/1.0\n     Content-Type:\
    \ application/msc-ivr+xml\n     Content-Length: 81\n     <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <audit/>\n     </mscivr>\n\
    \  C2. AS2 <- MS (CFW 200, auditresponse)\n  --------------------------------------\n\
    \     CFW 0216231b1f16 200\n     Timeout: 10\n     Content-Type: application/msc-ivr+xml\n\
    \     Content-Length: 1502\n     <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <auditresponse status=\"200\">\n        <capabilities>\n           <dialoglanguages/>\n\
    \           <grammartypes/>\n           <recordtypes>\n              <mimetype>audio/wav</mimetype>\n\
    \              <mimetype>video/mpeg</mimetype>\n           </recordtypes>\n  \
    \         <prompttypes>\n              <mimetype>audio/wav</mimetype>\n      \
    \        <mimetype>video/mpeg</mimetype>\n           </prompttypes>\n        \
    \   <variables>\n              <variabletype type=\"date\"\n                 \
    \           desc=\"value formatted as YYYY-MM-DD\">\n                 <format\
    \ desc=\"month day year\">mdy</format>\n                 <format desc=\"year month\
    \ day\">ymd</format>\n                 <format desc=\"day month year\">dmy</format>\n\
    \                 <format desc=\"day month\">dm</format>\n              </variabletype>\n\
    \              <variabletype type=\"time\" desc=\"value formatted as HH:MM\">\n\
    \                 <format desc=\"24 hour format\">t24</format>\n             \
    \    <format desc=\"12 hour format with am/pm\">t12</format>\n              </variabletype>\n\
    \              <variabletype type=\"digits\" desc=\"value formatted as D+\">\n\
    \                 <format desc=\"general digit string\">gen</format>\n       \
    \          <format desc=\"cardinal\">crn</format>\n                 <format desc=\"\
    ordinal\">ord</format>\n              </variabletype>\n           </variables>\n\
    \           <maxpreparedduration>60s</maxpreparedduration>\n           <maxrecordduration>1800s</maxrecordduration>\n\
    \           <codecs>\n              <codec name=\"audio\"><subtype>basic</subtype></codec>\n\
    \              <codec name=\"audio\"><subtype>gsm</subtype></codec>\n        \
    \      <codec name=\"video\"><subtype>h261</subtype></codec>\n              <codec\
    \ name=\"video\"><subtype>h263</subtype></codec>\n              <codec name=\"\
    video\"><subtype>h263-1998</subtype></codec>\n              <codec name=\"video\"\
    ><subtype>h264</subtype></codec>\n           </codecs>\n        </capabilities>\n\
    \        <dialogs>\n           <dialogaudit dialogid=\"6791fee\" state=\"started\"\
    \n                        connectionid=\"237430727:a338e95f\"/>\n        </dialogs>\n\
    \     </auditresponse>\n     </mscivr>\n  D1. AS2 -> MS (CFW CONTROL, audit mixer)\n\
    \  ----------------------------------------\n     CFW 515f007c5bd0 CONTROL\n \
    \    Control-Package: msc-mixer/1.0\n     Content-Type: application/msc-mixer+xml\n\
    \     Content-Length: 87\n     <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n        <audit/>\n     </mscmixer>\n  D2. AS2 <- MS (CFW 200, auditresponse)\n\
    \  --------------------------------------\n     CFW 515f007c5bd0 200\n     Timeout:\
    \ 10\n     Content-Type: application/msc-mixer+xml\n     Content-Length: 548\n\
    \     <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n\
    \     <auditresponse status=\"200\">\n        <capabilities>\n           <codecs>\n\
    \              <codec name=\"audio\"><subtype>basic</subtype></codec>\n      \
    \        <codec name=\"audio\"><subtype>gsm</subtype></codec>\n              <codec\
    \ name=\"video\"><subtype>h261</subtype></codec>\n              <codec name=\"\
    video\"><subtype>h263</subtype></codec>\n              <codec name=\"video\"><subtype>h263-1998</subtype></codec>\n\
    \              <codec name=\"video\"><subtype>h264</subtype></codec>\n       \
    \    </codecs>\n        </capabilities>\n        <mixers>\n           <joinaudit\
    \ id1=\"1:75d4dd0d\" id2=\"1:b9e6a659\"/>\n        </mixers>\n     </auditresponse>\n\
    \     </mscmixer>\n  E1. AS1 -> MS (CFW CONTROL, dialogterminate)\n  --------------------------------------------\n\
    \     CFW 7fdcc2331bef CONTROL\n     Control-Package: msc-ivr/1.0\n     Content-Type:\
    \ application/msc-ivr+xml\n     Content-Length: 127\n     <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n        <dialogterminate dialogid=\"\
    6791fee\" immediate=\"true\"/>\n     </mscivr>\n  E2. AS1 <- MS (CFW 403 Forbidden)\n\
    \  ---------------------------------\n     CFW 7fdcc2331bef 403\n  F1. AS2 ->\
    \ MS (CFW CONTROL, join to conference)\n  -----------------------------------------------\n\
    \     CFW 140e0f763352 CONTROL\n     Control-Package: msc-mixer/1.0\n     Content-Type:\
    \ application/msc-mixer+xml\n     Content-Length: 117\n     <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n        <join id1=\"1:272e9c05\"\
    \ id2=\"74b6d62\"/>\n     </mscmixer>\n  F2. AS2 <- MS (CFW 403 Forbidden)\n \
    \ ---------------------------------\n     CFW 140e0f763352 403\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The authors would like to thank Dale Worley for the thorough\
    \ review\n   of the whole document and for contributing text to make the document\n\
    \   easier to read.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"\
    An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264,\n              June 2002.\n   [RFC3550]  Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n              Applications\", STD 64, RFC 3550, July 2003.\n\
    \   [RFC4574]  Levin, O. and G. Camarillo, \"The Session Description\n       \
    \       Protocol (SDP) Label Attribute\", RFC 4574, August 2006.\n   [RFC4145]\
    \  Yon, D. and G. Camarillo, \"TCP-Based Media Transport in\n              the\
    \ Session Description Protocol (SDP)\", RFC 4145,\n              September 2005.\n\
    \   [RFC4572]  Lennox, J., \"Connection-Oriented Media Transport over the\n  \
    \            Transport Layer Security (TLS) Protocol in the Session\n        \
    \      Description Protocol (SDP)\", RFC 4572, July 2006.\n   [RFC6230]  Boulton,\
    \ C., Melanchuk, T., and S. McGlashan, \"Media\n              Control Channel\
    \ Framework\", RFC 6230, May 2011.\n   [RFC6231]  McGlashan, S., Melanchuk, T.,\
    \ and C. Boulton, \"An\n              Interactive Voice Response (IVR) Control\
    \ Package for the\n              Media Control Channel Framework\", RFC 6231,\
    \ May 2011.\n   [RFC6505]  McGlashan, S., Melanchuk, T., and C. Boulton, \"A Mixer\n\
    \              Control Package for the Media Control Channel Framework\",\n  \
    \            RFC 6505, March 2012.\n   [RFC6917]  Boulton, C., Miniero, L., and\
    \ G. Munson, \"Media Resource\n              Brokering\", RFC 6917, April 2013.\n\
    \   [RFC5239]  Barnes, M., Boulton, C., and O. Levin, \"A Framework for\n    \
    \          Centralized Conferencing\", RFC 5239, June 2008.\n   [RFC4582]  Camarillo,\
    \ G., Ott, J., and K. Drage, \"The Binary Floor\n              Control Protocol\
    \ (BFCP)\", RFC 4582, November 2006.\n   [RFC4583]  Camarillo, G., \"Session Description\
    \ Protocol (SDP) Format\n              for Binary Floor Control Protocol (BFCP)\
    \ Streams\",\n              RFC 4583, November 2006.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC2606]  Eastlake, D. and A. Panitz, \"Reserved\
    \ Top Level DNS\n              Names\", BCP 32, RFC 2606, June 1999.\n   [RFC3725]\
    \  Rosenberg, J., Peterson, J., Schulzrinne, H., and G.\n              Camarillo,\
    \ \"Best Current Practices for Third Party Call\n              Control (3pcc)\
    \ in the Session Initiation Protocol (SIP)\",\n              BCP 85, RFC 3725,\
    \ April 2004.\n   [SRGS]     Hunt, A. and S. McGlashan, \"Speech Recognition Grammar\n\
    \              Specification Version 1.0\", W3C Recommendation,\n            \
    \  March 2004.\n   [RFC4597]  Even, R. and N. Ismail, \"Conferencing Scenarios\"\
    ,\n              RFC 4597, August 2006.\n   [RFC5567]  Melanchuk, T., \"An Architectural\
    \ Framework for Media\n              Server Control\", RFC 5567, June 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alessandro Amirante\n   University of Napoli\n   Via Claudio\
    \ 21\n   Napoli  80125\n   Italy\n   EMail: alessandro.amirante@unina.it\n   Tobia\
    \ Castaldi\n   Meetecho\n   Via Carlo Poerio 89\n   Napoli  80100\n   Italy\n\
    \   EMail: tcastaldi@meetecho.com\n   Lorenzo Miniero\n   Meetecho\n   Via Carlo\
    \ Poerio 89\n   Napoli  80100\n   Italy\n   EMail: lorenzo@meetecho.com\n   Simon\
    \ Pietro Romano\n   University of Napoli\n   Via Claudio 21\n   Napoli  80125\n\
    \   Italy\n   EMail: spromano@unina.it\n"
