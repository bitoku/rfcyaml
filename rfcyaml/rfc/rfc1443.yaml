- title: __initial_text__
  contents:
  - "          Network Working Group                                  J. Case\n  \
    \        Request for Comments: 1443                 SNMP Research, Inc.\n    \
    \                           Textual Conventions\n                            \
    \   for version 2 of the\n                   Simple Network Management Protocol\
    \ (SNMPv2)\n          Status of this Memo\n          This RFC specifes an IAB\
    \ standards track protocol for the\n          Internet community, and requests\
    \ discussion and suggestions\n          for improvements.  Please refer to the\
    \ current edition of the\n          \"IAB Official Protocol Standards\" for the\
    \ standardization\n          state and status of this protocol.  Distribution\
    \ of this memo\n          is unlimited.\n          Table of Contents\n       \
    \   1 Introduction ..........................................    2\n         \
    \ 1.1 A Note on Terminology ...............................    3\n          2\
    \ Definitions ...........................................    4\n          3 Mapping\
    \ of the TEXTUAL-CONVENTION macro ...............   22\n          3.1 Mapping\
    \ of the DISPLAY-HINT clause ..................   22\n          3.2 Mapping of\
    \ the STATUS clause ........................   24\n          3.3 Mapping of the\
    \ DESCRIPTION clause ...................   24\n          3.4 Mapping of the REFERENCE\
    \ clause .....................   24\n          3.5 Mapping of the SYNTAX clause\
    \ ........................   24\n          4 Acknowledgements ......................................\
    \   26\n          5 References ............................................  \
    \ 30\n          6 Security Considerations ...............................   31\n\
    \          7 Authors' Addresses ....................................   31\n  \
    \        RFC 1443        Textual Conventions for SNMPv2      April 1993\n    \
    \      1.  Introduction\n          A network management system contains: several\
    \ (potentially\n          many) nodes, each with a processing entity, termed an\
    \ agent,\n          which has access to management instrumentation; at least one\n\
    \          management station; and, a management protocol, used to convey\n  \
    \        management information between the agents and management\n          stations.\
    \  Operations of the protocol are carried out under an\n          administrative\
    \ framework which defines both authentication and\n          authorization policies.\n\
    \          Network management stations execute management applications\n     \
    \     which monitor and control network elements.  Network elements\n        \
    \  are devices such as hosts, routers, terminal servers, etc.,\n          which\
    \ are monitored and controlled through access to their\n          management information.\n\
    \          Management information is viewed as a collection of managed\n     \
    \     objects, residing in a virtual information store, termed the\n         \
    \ Management Information Base (MIB).  Collections of related\n          objects\
    \ are defined in MIB modules.  These modules are written\n          using a subset\
    \ of OSI's Abstract Syntax Notation One (ASN.1)\n          [1], termed the Structure\
    \ of Management Information (SMI) [2].\n          When designing a MIB module,\
    \ it is often useful to new define\n          types similar to those defined in\
    \ the SMI.  In comparison to a\n          type defined in the SMI, each of these\
    \ new types has a\n          different name, a similar syntax, but a more precise\n\
    \          semantics.  These newly defined types are termed textual\n        \
    \  conventions, and are used for the convenience of humans\n          reading\
    \ the MIB module.  It is the purpose of this document to\n          define the\
    \ initial set of textual conventions available to all\n          MIB modules.\n\
    \          Objects defined using a textual convention are always encoded\n   \
    \       by means of the rules that define their primitive type.\n          However,\
    \ textual conventions often have special semantics\n          associated with\
    \ them.  As such, an ASN.1 macro, TEXTUAL-\n          CONVENTION, is used to concisely\
    \ convey the syntax and\n          semantics of a textual convention.\n      \
    \    For all textual conventions defined in an information module,\n         \
    \ the name shall be unique and mnemonic, and shall not exceed 64\n          characters\
    \ in length.  All names used for the textual\n          conventions defined in\
    \ all \"standard\" information modules\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n          shall be unique.\n          1.1.  A Note\
    \ on Terminology\n          For the purpose of exposition, the original Internet-standard\n\
    \          Network Management Framework, as described in RFCs 1155, 1157,\n  \
    \        and 1212, is termed the SNMP version 1 framework (SNMPv1).\n        \
    \  The current framework is termed the SNMP version 2 framework\n          (SNMPv2).\n\
    \          RFC 1443        Textual Conventions for SNMPv2      April 1993\n  \
    \        2.  Definitions\n          SNMPv2-TC DEFINITIONS ::= BEGIN\n        \
    \  IMPORTS\n              ObjectSyntax, Integer32, TimeTicks\n               \
    \   FROM SNMPv2-SMI;\n          -- definition of textual conventions\n       \
    \   TEXTUAL-CONVENTION MACRO ::=\n          BEGIN\n              TYPE NOTATION\
    \ ::=\n                            DisplayPart\n                            \"\
    STATUS\" Status\n                            \"DESCRIPTION\" Text\n          \
    \                  ReferPart\n                            \"SYNTAX\" type(Syntax)\n\
    \              VALUE NOTATION ::=\n                            value(VALUE Syntax)\n\
    \              DisplayPart ::=\n                            \"DISPLAY-HINT\" Text\n\
    \                          | empty\n              Status ::=\n               \
    \             \"current\"\n                          | \"deprecated\"\n      \
    \                    | \"obsolete\"\n              ReferPart ::=\n           \
    \                 \"REFERENCE\" Text\n                          | empty\n    \
    \          -- uses the NVT ASCII character set\n              Text ::= \"\"\"\"\
    \ string \"\"\"\"\n          END\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n          DisplayString ::= TEXTUAL-CONVENTION\n\
    \              DISPLAY-HINT \"255a\"\n              STATUS       current\n   \
    \           DESCRIPTION\n                      \"Represents textual information\
    \ taken from the NVT\n                      ASCII character set, as defined in\
    \ pages 4, 10-11\n                      of RFC 854.  Any object defined using\
    \ this syntax\n                      may not exceed 255 characters in length.\"\
    \n              SYNTAX       OCTET STRING (SIZE (0..255))\n          PhysAddress\
    \ ::= TEXTUAL-CONVENTION\n              DISPLAY-HINT \"1x:\"\n              STATUS\
    \       current\n              DESCRIPTION\n                      \"Represents\
    \ media- or physical-level addresses.\"\n              SYNTAX       OCTET STRING\n\
    \          MacAddress ::= TEXTUAL-CONVENTION\n              DISPLAY-HINT \"1x:\"\
    \n              STATUS       current\n              DESCRIPTION\n            \
    \          \"Represents an 802 MAC address represented in the\n              \
    \        'canonical' order defined by IEEE 802.1a, i.e., as\n                \
    \      if it were transmitted least significant bit\n                      first,\
    \ even though 802.5 (in contrast to other\n                      802.x protocols)\
    \ requires MAC addresses to be\n                      transmitted most significant\
    \ bit first.\"\n              SYNTAX       OCTET STRING (SIZE (6))\n         \
    \ TruthValue ::= TEXTUAL-CONVENTION\n              STATUS       current\n    \
    \          DESCRIPTION\n                      \"Represents a boolean value.\"\n\
    \              SYNTAX       INTEGER { true(1), false(2) }\n          RFC 1443\
    \        Textual Conventions for SNMPv2      April 1993\n          TestAndIncr\
    \ ::= TEXTUAL-CONVENTION\n              STATUS       current\n              DESCRIPTION\n\
    \                      \"Represents integer-valued information used for\n    \
    \                  atomic operations.  When the management protocol\n        \
    \              is used to specify that an object instance having\n           \
    \           this syntax is to be modified, the new value\n                   \
    \   supplied via the management protocol must\n                      precisely\
    \ match the value presently held by the\n                      instance.  If not,\
    \ the management protocol set\n                      operation fails with an error\
    \ of\n                      'inconsistentValue'.  Otherwise, if the current\n\
    \                      value is the maximum value of 2^31-1 (2147483647\n    \
    \                  decimal), then the value held by the instance is\n        \
    \              wrapped to zero; otherwise, the value held by the\n           \
    \           instance is incremented by one.  (Note that\n                    \
    \  regardless of whether the management protocol set\n                      operation\
    \ succeeds, the variable-binding in the\n                      request and response\
    \ PDUs are identical.)\n                      The value of the ACCESS clause for\
    \ objects having\n                      this syntax is either 'read-write' or\
    \ 'read-\n                      create'.  When an instance of a columnar object\n\
    \                      having this syntax is created, any value may be\n     \
    \                 supplied via the management protocol.\"\n              SYNTAX\
    \       INTEGER (0..2147483647)\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n          AutonomousType ::= TEXTUAL-CONVENTION\n\
    \              STATUS       current\n              DESCRIPTION\n             \
    \         \"Represents an independently extensible type\n                    \
    \  identification value.  It may, for example,\n                      indicate\
    \ a particular sub-tree with further MIB\n                      definitions, or\
    \ define a particular type of\n                      protocol or hardware.\"\n\
    \              SYNTAX       OBJECT IDENTIFIER\n          InstancePointer ::= TEXTUAL-CONVENTION\n\
    \              STATUS       current\n              DESCRIPTION\n             \
    \         \"A pointer to a specific instance of a conceptual\n               \
    \       row of a MIB table in the managed device.  By\n                      convention,\
    \ it is the name of the particular\n                      instance of the first\
    \ columnar object in the\n                      conceptual row.\"\n          \
    \    SYNTAX       OBJECT IDENTIFIER\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n          RowStatus ::= TEXTUAL-CONVENTION\n   \
    \           STATUS       current\n              DESCRIPTION\n                \
    \      \"The RowStatus textual convention is used to\n                      manage\
    \ the creation and deletion of conceptual\n                      rows, and is\
    \ used as the value of the SYNTAX\n                      clause for the status\
    \ column of a conceptual row\n                      (as described in Section 7.7.1\
    \ of [2].)\n                      The status column has six defined values:\n\
    \                           - 'active', which indicates that the\n           \
    \                conceptual row is available for use by the\n                \
    \           managed device;\n                           - 'notInService', which\
    \ indicates that the\n                           conceptual row exists in the\
    \ agent, but is\n                           unavailable for use by the managed\
    \ device\n                           (see NOTE below);\n                     \
    \      - 'notReady', which indicates that the\n                           conceptual\
    \ row exists in the agent, but is\n                           missing information\
    \ necessary in order to be\n                           available for use by the\
    \ managed device;\n                           - 'createAndGo', which is supplied\
    \ by a\n                           management station wishing to create a new\n\
    \                           instance of a conceptual row and to have it\n    \
    \                       available for use by the managed device;\n           \
    \                - 'createAndWait', which is supplied by a\n                 \
    \          management station wishing to create a new\n                      \
    \     instance of a conceptual row but not to have\n                         \
    \  it available for use by the managed device;\n                           and,\n\
    \                           - 'destroy', which is supplied by a\n            \
    \               management station wishing to delete all of\n                \
    \           the instances associated with an existing\n                      \
    \     conceptual row.\n                      Whereas five of the six values (all\
    \ except\n                      'notReady') may be specified in a management\n\
    \                      protocol set operation, only three values will be\n   \
    \                   returned in response to a management protocol\n          RFC\
    \ 1443        Textual Conventions for SNMPv2      April 1993\n               \
    \       retrieval operation: 'notReady', 'notInService' or\n                 \
    \     'active'.  That is, when queried, an existing\n                      conceptual\
    \ row has only three states: it is either\n                      available for\
    \ use by the managed device (the\n                      status column has value\
    \ 'active'); it is not\n                      available for use by the managed\
    \ device, though\n                      the agent has sufficient information to\
    \ make it so\n                      (the status column has value 'notInService');\
    \ or,\n                      it is not available for use by the managed device,\n\
    \                      because the agent lacks sufficient information\n      \
    \                (the status column has value 'notReady').\n                 \
    \                         NOTE WELL\n                           This textual convention\
    \ may be used for a MIB\n                           table, irrespective of whether\
    \ the values of\n                           that table's conceptual rows are able\
    \ to be\n                           modified while it is active, or whether its\n\
    \                           conceptual rows must be taken out of service\n   \
    \                        in order to be modified.  That is, it is the\n      \
    \                     responsibility of the DESCRIPTION clause of\n          \
    \                 the status column to specify whether the\n                 \
    \          status column must be 'notInService' in order\n                   \
    \        for the value of some other column of the\n                         \
    \  same conceptual row to be modified.\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n                      To summarize the effect of\
    \ having a conceptual row\n                      with a status column having a\
    \ SYNTAX clause value\n                      of RowStatus, consider the following\
    \ state\n                      diagram:\n                                    \
    \        STATE\n                 +--------------+-----------+-------------+-------------\n\
    \                 |      A       |     B     |      C      |      D\n        \
    \         |              |status col.|status column|\n                 |status\
    \ column |    is     |      is     |status column\n       ACTION    |does not\
    \ exist|  notReady | notInService|  is active\n   --------------+--------------+-----------+-------------+-------------\n\
    \   set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-\n  \
    \ column to     |       or     |   entValue|        Value|        Value\n   createAndGo\
    \   |inconsistent- |           |             |\n                 |         Value|\
    \           |             |\n   --------------+--------------+-----------+-------------+-------------\n\
    \   set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-\n  \
    \ column to     |       or     |   entValue|        Value|        Value\n   createAndWait\
    \ |wrongValue    |           |             |\n   --------------+--------------+-----------+-------------+-------------\n\
    \   set status    |inconsistent- |inconsist- |noError      |noError\n   column\
    \ to     |         Value|   entValue|             |\n   active        |      \
    \        |           |             |\n                 |              |     or\
    \    |             |\n                 |              |           |          \
    \   |\n                 |              |see 2   ->D|          ->D|          ->D\n\
    \   --------------+--------------+-----------+-------------+-------------\n  \
    \ set status    |inconsistent- |inconsist- |noError      |noError   ->C\n   column\
    \ to     |         Value|   entValue|             |\n   notInService  |      \
    \        |           |             |\n                 |              |     or\
    \    |             |      or\n                 |              |           |  \
    \           |\n                 |              |see 3   ->C|          ->C|wrongValue\n\
    \   --------------+--------------+-----------+-------------+-------------\n  \
    \ set status    |noError       |noError    |noError      |noError\n   column to\
    \     |              |           |             |\n   destroy       |         \
    \  ->A|        ->A|          ->A|          ->A\n   --------------+--------------+-----------+-------------+-------------\n\
    \   set any other |see 4         |noError    |noError      |noError\n   column\
    \ to some|              |           |             |\n   value         |      \
    \     ->A|      see 1|          ->C|          ->D\n   --------------+--------------+-----------+-------------+-------------\n\
    \          RFC 1443        Textual Conventions for SNMPv2      April 1993\n  \
    \                    (1) goto B or C, depending on information\n             \
    \         available to the agent.\n                      (2) if other variable\
    \ bindings included in the\n                      same PDU, provide values for\
    \ all columns which are\n                      missing but required, then return\
    \ noError and goto\n                      D.\n                      (3) if other\
    \ variable bindings included in the\n                      same PDU, provide values\
    \ for all columns which are\n                      missing but required, then\
    \ return noError and goto\n                      C.\n                      (4)\
    \ at the discretion of the agent, either noError\n                      or inconsistentValue\
    \ may be returned.\n                      NOTE: Other processing of the set request\
    \ may\n                      result in a response other than noError being\n \
    \                     returned, e.g., wrongValue, noCreation, etc.\n         \
    \                          Conceptual Row Creation\n                      There\
    \ are four potential interactions when\n                      creating a conceptual\
    \ row: selecting an instance-\n                      identifier which is not in\
    \ use; creating the\n                      conceptual row; initializing any objects\
    \ for which\n                      the agent does not supply a default; and, making\n\
    \                      the conceptual row available for use by the\n         \
    \             managed device.\n                      Interaction 1: Selecting\
    \ an Instance-Identifier\n                      The algorithm used to select an\
    \ instance-\n                      identifier varies for each conceptual row.\
    \  In\n                      some cases, the instance-identifier is\n        \
    \              semantically significant, e.g., the destination\n             \
    \         address of a route, and a management station\n                     \
    \ selects the instance-identifier according to the\n                      semantics.\n\
    \                      In other cases, the instance-identifier is used\n     \
    \                 solely to distinguish conceptual rows, and a\n             \
    \         management station without specific knowledge of\n                 \
    \     the conceptual row might examine the instances\n          RFC 1443     \
    \   Textual Conventions for SNMPv2      April 1993\n                      present\
    \ in order to determine an unused instance-\n                      identifier.\
    \  (This approach may be used, but it is\n                      often highly sub-optimal;\
    \ however, it is also a\n                      questionable practice for a naive\
    \ management\n                      station to attempt conceptual row creation.)\n\
    \                      Alternately, the MIB module which defines the\n       \
    \               conceptual row might provide one or more objects\n           \
    \           which provide assistance in determining an unused\n              \
    \        instance-identifier.  For example, if the\n                      conceptual\
    \ row is indexed by an integer-value,\n                      then an object having\
    \ an integer-valued SYNTAX\n                      clause might be defined for\
    \ such a purpose,\n                      allowing a management station to issue\
    \ a\n                      management protocol retrieval operation.  In order\n\
    \                      to avoid unnecessary collisions between competing\n   \
    \                   management stations, 'adjacent' retrievals of this\n     \
    \                 object should be different.\n                      Finally,\
    \ the management station could select a\n                      pseudo-random number\
    \ to use as the index.  In the\n                      event that this index was\
    \ already in use and an\n                      inconsistentValue was returned\
    \ in response to the\n                      management protocol set operation,\
    \ the management\n                      station should simply select a new pseudo-random\n\
    \                      number and retry the operation.\n                     \
    \ A MIB designer should choose between the two\n                      latter algorithms\
    \ based on the size of the table\n                      (and therefore the efficiency\
    \ of each algorithm).\n                      For tables in which a large number\
    \ of entries are\n                      expected, it is recommended that a MIB\
    \ object be\n                      defined that returns an acceptable index for\n\
    \                      creation.  For tables with small numbers of\n         \
    \             entries, it is recommended that the latter\n                   \
    \   pseudo-random index mechanism be used.\n                      Interaction\
    \ 2: Creating the Conceptual Row\n                      Once an unused instance-identifier\
    \ has been\n                      selected, the management station determines\
    \ if it\n                      wishes to create and activate the conceptual row\n\
    \                      in one transaction or in a negotiated set of\n        \
    \              interactions.\n          RFC 1443        Textual Conventions for\
    \ SNMPv2      April 1993\n                      Interaction 2a: Creating and Activating\
    \ the\n                      Conceptual Row\n                      The management\
    \ station must first determine the\n                      column requirements,\
    \ i.e., it must determine those\n                      columns for which it must\
    \ or must not provide\n                      values.  Depending on the complexity\
    \ of the table\n                      and the management station's knowledge of\
    \ the\n                      agent's capabilities, this determination can be\n\
    \                      made locally by the management station.\n             \
    \         Alternately, the management station issues a\n                     \
    \ management protocol get operation to examine all\n                      columns\
    \ in the conceptual row that it wishes to\n                      create.  In response,\
    \ for each column, there are\n                      three possible outcomes:\n\
    \                           - a value is returned, indicating that some\n    \
    \                       other management station has already created\n       \
    \                    this conceptual row.  We return to\n                    \
    \       interaction 1.\n                           - the exception 'noSuchInstance'\
    \ is returned,\n                           indicating that the agent implements\
    \ the\n                           object-type associated with this column, and\n\
    \                           that this column in at least one conceptual\n    \
    \                       row would be accessible in the MIB view used\n       \
    \                    by the retrieval were it to exist. For those\n          \
    \                 columns to which the agent provides read-\n                \
    \           create access, the 'noSuchInstance' exception\n                  \
    \         tells the management station that it should\n                      \
    \     supply a value for this column when the\n                           conceptual\
    \ row is to be created.\n                           - the exception 'noSuchObject'\
    \ is returned,\n                           indicating that the agent does not\
    \ implement\n                           the object-type associated with this column\n\
    \                           or that there is no conceptual row for which\n   \
    \                        this column would be accessible in the MIB\n        \
    \                   view used by the retrieval.  As such, the\n              \
    \             management station can not issue any\n                         \
    \  management protocol set operations to create\n                           an\
    \ instance of this column.\n                      Once the column requirements\
    \ have been determined,\n                      a management protocol set operation\
    \ is accordingly\n          RFC 1443        Textual Conventions for SNMPv2   \
    \   April 1993\n                      issued.  This operation also sets the new\
    \ instance\n                      of the status column to 'createAndGo'.\n   \
    \                   When the agent processes the set operation, it\n         \
    \             verifies that it has sufficient information to\n               \
    \       make the conceptual row available for use by the\n                   \
    \   managed device.  The information available to the\n                      agent\
    \ is provided by two sources: the management\n                      protocol set\
    \ operation which creates the\n                      conceptual row, and, implementation-specific\n\
    \                      defaults supplied by the agent (note that an agent\n  \
    \                    must provide implementation-specific defaults for\n     \
    \                 at least those objects which it implements as\n            \
    \          read-only).  If there is sufficient information\n                 \
    \     available, then the conceptual row is created, a\n                     \
    \ 'noError' response is returned, the status column\n                      is\
    \ set to 'active', and no further interactions\n                      are necessary\
    \ (i.e., interactions 3 and 4 are\n                      skipped).  If there is\
    \ insufficient information,\n                      then the conceptual row is\
    \ not created, and the\n                      set operation fails with an error\
    \ of\n                      'inconsistentValue'.  On this error, the\n       \
    \               management station can issue a management protocol\n         \
    \             retrieval operation to determine if this was\n                 \
    \     because it failed to specify a value for a\n                      required\
    \ column, or, because the selected instance\n                      of the status\
    \ column already existed.  In the\n                      latter case, we return\
    \ to interaction 1.  In the\n                      former case, the management\
    \ station can re-issue\n                      the set operation with the additional\
    \ information,\n                      or begin interaction 2 again using 'createAndWait'\n\
    \                      in order to negotiate creation of the conceptual\n    \
    \                  row.\n          RFC 1443        Textual Conventions for SNMPv2\
    \      April 1993\n                                          NOTE WELL\n     \
    \                      Regardless of the method used to determine\n          \
    \                 the column requirements, it is possible that\n             \
    \              the management station might deem a column\n                  \
    \         necessary when, in fact, the agent will not\n                      \
    \     allow that particular columnar instance to be\n                        \
    \   created or written.  In this case, the\n                           management\
    \ protocol set operation will fail\n                           with an error such\
    \ as 'noCreation' or\n                           'notWritable'.  In this case,\
    \ the management\n                           station decides whether it needs\
    \ to be able\n                           to set a value for that particular columnar\n\
    \                           instance.  If not, the management station\n      \
    \                     re-issues the management protocol set\n                \
    \           operation, but without setting a value for\n                     \
    \      that particular columnar instance; otherwise,\n                       \
    \    the management station aborts the row\n                           creation\
    \ algorithm.\n                      Interaction 2b: Negotiating the Creation of\
    \ the\n                      Conceptual Row\n                      The management\
    \ station issues a management\n                      protocol set operation which\
    \ sets the desired\n                      instance of the status column to 'createAndWait'.\n\
    \                      If the agent is unwilling to process a request of\n   \
    \                   this sort, the set operation fails with an error\n       \
    \               of 'wrongValue'.  (As a consequence, such an agent\n         \
    \             must be prepared to accept a single management\n               \
    \       protocol set operation, i.e., interaction 2a\n                      above,\
    \ containing all of the columns indicated by\n                      its column\
    \ requirements.) Otherwise, the\n                      conceptual row is created,\
    \ a 'noError' response is\n                      returned, and the status column\
    \ is immediately set\n                      to either 'notInService' or 'notReady',\
    \ depending\n                      on whether it has sufficient information to\
    \ make\n                      the conceptual row available for use by the\n  \
    \                    managed device.  If there is sufficient\n               \
    \       information available, then the status column is\n                   \
    \   set to 'notInService'; otherwise, if there is\n                      insufficient\
    \ information, then the status column\n                      is set to 'notReady'.\
    \  Regardless, we proceed to\n                      interaction 3.\n         \
    \ RFC 1443        Textual Conventions for SNMPv2      April 1993\n           \
    \           Interaction 3: Initializing non-defaulted Objects\n              \
    \        The management station must now determine the\n                     \
    \ column requirements.  It issues a management\n                      protocol\
    \ get operation to examine all columns in\n                      the created conceptual\
    \ row.  In the response, for\n                      each column, there are three\
    \ possible outcomes:\n                           - a value is returned, indicating\
    \ that the\n                           agent implements the object-type associated\n\
    \                           with this column and had sufficient\n            \
    \               information to provide a value.  For those\n                 \
    \          columns to which the agent provides read-\n                       \
    \    create access, a value return tells the\n                           management\
    \ station that it may issue\n                           additional management\
    \ protocol set\n                           operations, if it desires, in order\
    \ to change\n                           the value associated with this column.\n\
    \                           - the exception 'noSuchInstance' is returned,\n  \
    \                         indicating that the agent implements the\n         \
    \                  object-type associated with this column, and\n            \
    \               that this column in at least one conceptual\n                \
    \           row would be accessible in the MIB view used\n                   \
    \        by the retrieval were it to exist. However,\n                       \
    \    the agent does not have sufficient\n                           information\
    \ to provide a value, and until a\n                           value is provided,\
    \ the conceptual row may not\n                           be made available for\
    \ use by the managed\n                           device.  For those columns to\
    \ which the agent\n                           provides read-create access, the\n\
    \                           'noSuchInstance' exception tells the\n           \
    \                management station that it must issue\n                     \
    \      additional management protocol set\n                           operations,\
    \ in order to provide a value\n                           associated with this\
    \ column.\n                           - the exception 'noSuchObject' is returned,\n\
    \                           indicating that the agent does not implement\n   \
    \                        the object-type associated with this column\n       \
    \                    or that there is no conceptual row for which\n          \
    \                 this column would be accessible in the MIB\n               \
    \            view used by the retrieval.  As such, the\n                     \
    \      management station can not issue any\n                           management\
    \ protocol set operations to create\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n                           an instance of this column.\n\
    \                      If the value associated with the status column is\n   \
    \                   'notReady', then the management station must first\n     \
    \                 deal with all 'noSuchInstance' columns, if any.\n          \
    \            Having done so, the value of the status column\n                \
    \      becomes 'notInService', and we proceed to\n                      interaction\
    \ 4.\n                      Interaction 4: Making the Conceptual Row Available\n\
    \                      Once the management station is satisfied with the\n   \
    \                   values associated with the columns of the\n              \
    \        conceptual row, it issues a management protocol\n                   \
    \   set operation to set the status column to\n                      'active'.\
    \  If the agent has sufficient information\n                      to make the\
    \ conceptual row available for use by\n                      the managed device,\
    \ the management protocol set\n                      operation succeeds (a 'noError'\
    \ response is\n                      returned).  Otherwise, the management protocol\
    \ set\n                      operation fails with an error of\n              \
    \        'inconsistentValue'.\n                                          NOTE\
    \ WELL\n                           A conceptual row having a status column with\n\
    \                           value 'notInService' or 'notReady' is\n          \
    \                 unavailable to the managed device.  As such,\n             \
    \              it is possible for the managed device to\n                    \
    \       create its own instances during the time\n                           between\
    \ the management protocol set operation\n                           which sets\
    \ the status column to\n                           'createAndWait' and the management\
    \ protocol\n                           set operation which sets the status column\
    \ to\n                           'active'.  In this case, when the management\n\
    \                           protocol set operation is issued to set the\n    \
    \                       status column to 'active', the values held in\n      \
    \                     the agent supersede those used by the managed\n        \
    \                   device.\n                      If the management station is\
    \ prevented from\n                      setting the status column to 'active'\
    \ (e.g., due\n                      to management station or network failure)\
    \ the\n                      conceptual row will be left in the 'notInService'\n\
    \                      or 'notReady' state, consuming resources\n          RFC\
    \ 1443        Textual Conventions for SNMPv2      April 1993\n               \
    \       indefinitely.  The agent must detect conceptual\n                    \
    \  rows that have been in either state for an\n                      abnormally\
    \ long period of time and remove them.\n                      This period of time\
    \ should be long enough to allow\n                      for human response time\
    \ (including 'think time')\n                      between the creation of the\
    \ conceptual row and the\n                      setting of the status to 'active'.\
    \  It is\n                      suggested that this period be approximately 5\n\
    \                      minutes in length.\n                                  Conceptual\
    \ Row Suspension\n                      When a conceptual row is 'active', the\
    \ management\n                      station may issue a management protocol set\n\
    \                      operation which sets the instance of the status\n     \
    \                 column to 'notInService'.  If the agent is\n               \
    \       unwilling to do so, the set operation fails with\n                   \
    \   an error of 'wrongValue'.  Otherwise, the\n                      conceptual\
    \ row is taken out of service, and a\n                      'noError' response\
    \ is returned.  It is the\n                      responsibility of the the DESCRIPTION\
    \ clause of\n                      the status column to indicate under what\n\
    \                      circumstances the status column should be taken\n     \
    \                 out of service (e.g., in order for the value of\n          \
    \            some other column of the same conceptual row to be\n            \
    \          modified).\n                                   Conceptual Row Deletion\n\
    \                      For deletion of conceptual rows, a management\n       \
    \               protocol set operation is issued which sets the\n            \
    \          instance of the status column to 'destroy'.  This\n               \
    \       request may be made regardless of the current\n                      value\
    \ of the status column (e.g., it is possible\n                      to delete\
    \ conceptual rows which are either\n                      'notReady', 'notInService'\
    \ or 'active'.) If the\n                      operation succeeds, then all instances\
    \ associated\n                      with the conceptual row are immediately removed.\"\
    \n          RFC 1443        Textual Conventions for SNMPv2      April 1993\n \
    \             SYNTAX       INTEGER {\n                               -- the following\
    \ two values are states:\n                               -- these values may be\
    \ read or written\n                               active(1),\n               \
    \                notInService(2),\n                               -- the following\
    \ value is a state:\n                               -- this value may be read,\
    \ but not written\n                               notReady(3),\n             \
    \                  -- the following three values are\n                       \
    \        -- actions: these values may be written,\n                          \
    \     --   but are never read\n                               createAndGo(4),\n\
    \                               createAndWait(5),\n                          \
    \     destroy(6)\n                           }\n          RFC 1443        Textual\
    \ Conventions for SNMPv2      April 1993\n          TimeStamp ::= TEXTUAL-CONVENTION\n\
    \              STATUS       current\n              DESCRIPTION\n             \
    \         \"The value of MIB-II's sysUpTime object at which a\n              \
    \        specific occurrence happened.  The specific\n                      occurrence\
    \ must be defined in the description of\n                      any object defined\
    \ using this type.\"\n              SYNTAX       TimeTicks\n          TimeInterval\
    \ ::= TEXTUAL-CONVENTION\n              STATUS       current\n              DESCRIPTION\n\
    \                      \"A period of time, measured in units of 0.01\n       \
    \               seconds.\"\n              SYNTAX       INTEGER (0..2147483647)\n\
    \          RFC 1443        Textual Conventions for SNMPv2      April 1993\n  \
    \        DateAndTime ::= TEXTUAL-CONVENTION\n              DISPLAY-HINT \"2d-1d-1d,1d:1d:1d.1d,1a1d:1d\"\
    \n              STATUS       current\n              DESCRIPTION\n            \
    \          \"A date-time specification.\n                      field  octets \
    \ contents                  range\n                      -----  ------  --------\
    \                  -----\n                        1      1-2   year          \
    \            0..65536\n                        2       3    month            \
    \         1..12\n                        3       4    day                    \
    \   1..31\n                        4       5    hour                      0..23\n\
    \                        5       6    minutes                   0..59\n      \
    \                  6       7    seconds                   0..60\n            \
    \                         (use 60 for leap-second)\n                        7\
    \       8    deci-seconds              0..9\n                        8       9\
    \    direction from UTC        '+' / '-'\n                        9      10  \
    \  hours from UTC            0..11\n                       10      11    minutes\
    \ from UTC          0..59\n                      For example, Tuesday May 26,\
    \ 1992 at 1:30:15 PM\n                      EDT would be displayed as:\n     \
    \                             1992-5-26,13:30:15.0,-4:0\n                    \
    \  Note that if only local time is known, then\n                      timezone\
    \ information (fields 8-10) is not\n                      present.\"\n       \
    \       SYNTAX       OCTET STRING (SIZE (8 | 11))\n          END\n          RFC\
    \ 1443        Textual Conventions for SNMPv2      April 1993\n          3.  Mapping\
    \ of the TEXTUAL-CONVENTION macro\n          The TEXTUAL-CONVENTION macro is used\
    \ to convey the syntax and\n          semantics associated with a textual convention.\
    \  It should be\n          noted that the expansion of the TEXTUAL-CONVENTION\
    \ macro is\n          something which conceptually happens during implementation\
    \ and\n          not during run-time.\n          For all descriptors appearing\
    \ in an information module, the\n          descriptor shall be unique and mnemonic,\
    \ and shall not exceed\n          64 characters in length.  Further, the hyphen\
    \ is not allowed\n          as a character in the name of any textual convention.\n\
    \          3.1.  Mapping of the DISPLAY-HINT clause\n          The DISPLAY-HINT\
    \ clause, which need not be present, gives a\n          hint as to how the value\
    \ of an instance of an object with the\n          syntax defined using this textual\
    \ convention might be\n          displayed.  The DISPLAY-HINT clause may only\
    \ be present when\n          the syntax has an underlying primitive type of INTEGER\
    \ or\n          OCTET STRING.\n          When the syntax has an underlying primitive\
    \ type of INTEGER,\n          the hint consists of a single character suggesting\
    \ a display\n          format, either: 'x' for hexadecimal, 'd' for decimal, or\
    \ 'o'\n          for octal, or 'b' for binary.\n          When the syntax has\
    \ an underlying primitive type of OCTET\n          STRING, the hint consists of\
    \ one or more octet-format\n          specifications.  Each specification consists\
    \ of five parts,\n          with each part using and removing zero or more of\
    \ the next\n          octets from the value and producing the next zero or more\n\
    \          characters to be displayed.  The octets within the value are\n    \
    \      processed in order of significance, most significant first.\n         \
    \ The five parts of a octet-format specification are:\n          (1)  the (optional)\
    \ repeat indicator; if present, this part is\n               a '*', and indicates\
    \ that the current octet of the value\n               is to be used as the repeat\
    \ count.  The repeat count is\n               an unsigned integer (which may be\
    \ zero) which specifies\n               how many times the remainder of this octet-format\n\
    \               specification should be successively applied.  If the\n      \
    \         repeat indicator is not present, the repeat count is one.\n        \
    \  RFC 1443        Textual Conventions for SNMPv2      April 1993\n          (2)\
    \  the octet length: one or more decimal digits specifying\n               the\
    \ number of octets of the value to be used and\n               formatted by this\
    \ octet-specification.  Note that the\n               octet length can be zero.\
    \  If less than this number of\n               octets remain in the value, then\
    \ the lesser number of\n               octets are used.\n          (3)  the display\
    \ format, either: 'x' for hexadecimal, 'd' for\n               decimal, 'o' for\
    \ octal, or 'a' for ascii.  If the octet\n               length part is greater\
    \ than one, and the display format\n               part refers to a numeric format,\
    \ then network-byte\n               ordering (big-endian encoding) is used interpreting\
    \ the\n               octets in the value.\n          (4)  the (optional) display\
    \ separator character; if present,\n               this part is a single character\
    \ which is produced for\n               display after each application of this\
    \ octet-\n               specification; however, this character is not produced\n\
    \               for display if it would be immediately followed by the\n     \
    \          display of the repeat terminator character for this\n             \
    \  octet-specification.  This character can be any character\n               other\
    \ than a decimal digit and a '*'.\n          (5)  the (optional) repeat terminator\
    \ character, which can be\n               present only if the display separator\
    \ character is\n               present and this octet-specification begins with\
    \ a repeat\n               indicator; if present, this part is a single character\n\
    \               which is produced after all the zero or more repeated\n      \
    \         applications (as given by the repeat count) of this\n              \
    \ octet-specification.  This character can be any character\n               other\
    \ than a decimal digit and a '*'.\n          Output of a display separator character\
    \ or a repeat terminator\n          character is suppressed if it would occur\
    \ as the last\n          character of the display.\n          If the octets of\
    \ the value are exhausted before all the\n          octet-format specification\
    \ have been used, then the excess\n          specifications are ignored.  If additional\
    \ octets remain in\n          the value after interpreting all the octet-format\n\
    \          specifications, then the last octet-format specification is\n     \
    \     re-interpreted to process the additional octets, until no\n          octets\
    \ remain in the value.\n          RFC 1443        Textual Conventions for SNMPv2\
    \      April 1993\n          3.2.  Mapping of the STATUS clause\n          The\
    \ STATUS clause, which must be present, indicates whether\n          this definition\
    \ is current or historic.\n          The values \"current\", and \"obsolete\"\
    \ are self-explanatory.\n          The \"deprecated\" value indicates that the\
    \ textual convention\n          is obsolete, but that an implementor may wish\
    \ to support that\n          object to foster interoperability with older implementations.\n\
    \          3.3.  Mapping of the DESCRIPTION clause\n          The DESCRIPTION\
    \ clause, which must be present, contains a\n          textual definition of the\
    \ textual convention, which provides\n          all semantic definitions necessary\
    \ for implementation, and\n          should embody any information which would\
    \ otherwise be\n          communicated in any ASN.1 commentary annotations associated\n\
    \          with the object.\n          Note that, in order to conform to the ASN.1\
    \ syntax, the entire\n          value of this clause must be enclosed in double\
    \ quotation\n          marks, and therefore cannot itself contain double quotation\n\
    \          marks, although the value may be multi-line.\n          3.4.  Mapping\
    \ of the REFERENCE clause\n          The REFERENCE clause, which need not be present,\
    \ contains a\n          textual cross-reference to a related item defined in some\n\
    \          other published work.\n          3.5.  Mapping of the SYNTAX clause\n\
    \          The SYNTAX clause, which must be present, defines abstract\n      \
    \    data structure corresponding to the textual convention.  The\n          data\
    \ structure must be one of the alternatives defined in the\n          ObjectSyntax\
    \ CHOICE [2].\n          Full ASN.1 sub-typing is allowed, as appropriate to the\n\
    \          underingly ASN.1 type, primarily as an aid to implementors in\n   \
    \       understanding the meaning of the textual convention.  Of\n          course,\
    \ sub-typing is not allowed for textual conventions\n          derived from either\
    \ the Counter32 or Counter64 types, but is\n          RFC 1443        Textual\
    \ Conventions for SNMPv2      April 1993\n          allowed for textual conventions\
    \ derived from the Gauge32 type.\n          RFC 1443        Textual Conventions\
    \ for SNMPv2      April 1993\n          4.  Acknowledgements\n          PhysAddress\
    \ (and textual conventions) originated in RFC 1213.\n          MacAddress originated\
    \ in RFCs 1230 and 1231.\n          TruthValue originated in RFC 1253.\n     \
    \     AutonomousType and InstancePointer originated in RFC 1316.\n          RowStatus\
    \ originated in RFC 1271.\n          A special thanks to Bancroft Scott of Open\
    \ Systems Solutions,\n          Inc., for helping in the definition of the TEXTUAL-CONVENTIONS\n\
    \          macro.\n          Finally, the comments of the SNMP version 2 working\
    \ group are\n          gratefully acknowledged:\n               Beth Adams, Network\
    \ Management Forum\n               Steve Alexander, INTERACTIVE Systems Corporation\n\
    \               David Arneson, Cabletron Systems\n               Toshiya Asaba\n\
    \               Fred Baker, ACC\n               Jim Barnes, Xylogics, Inc.\n \
    \              Brian Bataille\n               Andy Bierman, SynOptics Communications,\
    \ Inc.\n               Uri Blumenthal, IBM Corporation\n               Fred Bohle,\
    \ Interlink\n               Jack Brown\n               Theodore Brunner, Bellcore\n\
    \               Stephen F. Bush, GE Information Services\n               Jeffrey\
    \ D. Case, University of Tennessee, Knoxville\n               John Chang, IBM\
    \ Corporation\n               Szusin Chen, Sun Microsystems\n               Robert\
    \ Ching\n               Chris Chiotasso, Ungermann-Bass\n               Bobby\
    \ A. Clay, NASA/Boeing\n               John Cooke, Chipcom\n               Tracy\
    \ Cox, Bellcore\n               Juan Cruz, Datability, Inc.\n               David\
    \ Cullerot, Cabletron Systems\n               Cathy Cunningham, Microcom\n   \
    \            James R. (Chuck) Davin, Bellcore\n               Michael Davis, Clearpoint\n\
    \          RFC 1443        Textual Conventions for SNMPv2      April 1993\n  \
    \             Mike Davison, FiberCom\n               Cynthia DellaTorre, MITRE\n\
    \               Taso N. Devetzis, Bellcore\n               Manual Diaz, DAVID\
    \ Systems, Inc.\n               Jon Dreyer, Sun Microsystems\n               David\
    \ Engel, Optical Data Systems\n               Mike Erlinger, Lexcel\n        \
    \       Roger Fajman, NIH\n               Daniel Fauvarque, Sun Microsystems\n\
    \               Karen Frisa, CMU\n               Shari Galitzer, MITRE\n     \
    \          Shawn Gallagher, Digital Equipment Corporation\n               Richard\
    \ Graveman, Bellcore\n               Maria Greene, Xyplex, Inc.\n            \
    \   Michel Guittet, Apple\n               Robert Gutierrez, NASA\n           \
    \    Bill Hagerty, Cabletron Systems\n               Gary W. Haney, Martin Marietta\
    \ Energy Systems\n               Patrick Hanil, Nokia Telecommunications\n   \
    \            Matt Hecht, SNMP Research, Inc.\n               Edward A. Heiner,\
    \ Jr., Synernetics Inc.\n               Susan E. Hicks, Martin Marietta Energy\
    \ Systems\n               Geral Holzhauer, Apple\n               John Hopprich,\
    \ DAVID Systems, Inc.\n               Jeff Hughes, Hewlett-Packard\n         \
    \      Robin Iddon, Axon Networks, Inc.\n               David Itusak\n       \
    \        Kevin M. Jackson, Concord Communications, Inc.\n               Ole J.\
    \ Jacobsen, Interop Company\n               Ronald Jacoby, Silicon Graphics, Inc.\n\
    \               Satish Joshi, SynOptics Communications, Inc.\n               Frank\
    \ Kastenholz, FTP Software\n               Mark Kepke, Hewlett-Packard\n     \
    \          Ken Key, SNMP Research, Inc.\n               Zbiginew Kielczewski,\
    \ Eicon\n               Jongyeoi Kim\n               Andrew Knutsen, The Santa\
    \ Cruz Operation\n               Michael L. Kornegay, VisiSoft\n             \
    \  Deirdre C. Kostik, Bellcore\n               Cheryl Krupczak, Georgia Tech\n\
    \               Mark S. Lewis, Telebit\n               David Lin\n           \
    \    David Lindemulder, AT&T/NCR\n               Ben Lisowski, Sprint\n      \
    \         David Liu, Bell-Northern Research\n          RFC 1443        Textual\
    \ Conventions for SNMPv2      April 1993\n               John Lunny, The Wollongong\
    \ Group\n               Robert C. Lushbaugh Martin, Marietta Energy Systems\n\
    \               Michael Luufer, BBN\n               Carl Madison, Star-Tek, Inc.\n\
    \               Keith McCloghrie, Hughes LAN Systems\n               Evan McGinnis,\
    \ 3Com Corporation\n               Bill McKenzie, IBM Corporation\n          \
    \     Donna McMaster, SynOptics Communications, Inc.\n               John Medicke,\
    \ IBM Corporation\n               Doug Miller, Telebit\n               Dave Minnich,\
    \ FiberCom\n               Mohammad Mirhakkak, MITRE\n               Rohit Mital,\
    \ Protools\n               George Mouradian, AT&T Bell Labs\n               Patrick\
    \ Mullaney, Cabletron Systems\n               Dan Myers, 3Com Corporation\n  \
    \             Rina Nathaniel, Rad Network Devices Ltd.\n               Hien V.\
    \ Nguyen, Sprint\n               Mo Nikain\n               Tom Nisbet\n      \
    \         William B. Norton, MERIT\n               Steve Onishi, Wellfleet Communications,\
    \ Inc.\n               David T. Perkins, SynOptics Communications, Inc.\n    \
    \           Carl Powell, BBN\n               Ilan Raab, SynOptics Communications,\
    \ Inc.\n               Richard Ramons, AT&T\n               Venkat D. Rangan,\
    \ Metric Network Systems, Inc.\n               Louise Reingold, Sprint\n     \
    \          Sam Roberts, Farallon Computing, Inc.\n               Kary Robertson,\
    \ Concord Communications, Inc.\n               Dan Romascanu, Lannet Data Communications\
    \ Ltd.\n               Marshall T. Rose, Dover Beach Consulting, Inc.\n      \
    \         Shawn A. Routhier, Epilogue Technology Corporation\n               Chris\
    \ Rozman\n               Asaf Rubissa, Fibronics\n               Jon Saperia,\
    \ Digital Equipment Corporation\n               Michael Sapich\n             \
    \  Mike Scanlon, Interlan\n               Sam Schaen, MITRE\n               John\
    \ Seligson, Ultra Network Technologies\n               Paul A. Serice, Corporation\
    \ for Open Systems\n               Chris Shaw, Banyan Systems\n              \
    \ Timon Sloane\n               Robert Snyder, Cisco Systems\n               Joo\
    \ Young Song\n          RFC 1443        Textual Conventions for SNMPv2      April\
    \ 1993\n               Roy Spitier, Sprint\n               Einar Stefferud, Network\
    \ Management Associates\n               John Stephens, Cayman Systems, Inc.\n\
    \               Robert L. Stewart, Xyplex, Inc. (chair)\n               Kaj Tesink,\
    \ Bellcore\n               Dean Throop, Data General\n               Ahmet Tuncay,\
    \ France Telecom-CNET\n               Maurice Turcotte, Racal Datacom\n      \
    \         Warren Vik, INTERACTIVE Systems Corporation\n               Yannis Viniotis\n\
    \               Steven L. Waldbusser, Carnegie Mellon Universitty\n          \
    \     Timothy M. Walden, ACC\n               Alice Wang, Sun Microsystems\n  \
    \             James Watt, Newbridge\n               Luanne Waul, Timeplex\n  \
    \             Donald E. Westlake III, Digital Equipment Corporation\n        \
    \       Gerry White\n               Bert Wijnen, IBM Corporation\n           \
    \    Peter Wilson, 3Com Corporation\n               Steven Wong, Digital Equipment\
    \ Corporation\n               Randy Worzella, IBM Corporation\n              \
    \ Daniel Woycke, MITRE\n               Honda Wu\n               Jeff Yarnell,\
    \ Protools\n               Chris Young, Cabletron\n               Kiho Yum, 3Com\
    \ Corporation\n          RFC 1443        Textual Conventions for SNMPv2      April\
    \ 1993\n          5.  References\n          [1]  Information processing systems\
    \ - Open Systems\n               Interconnection - Specification of Abstract Syntax\n\
    \               Notation One (ASN.1), International Organization for\n       \
    \        Standardization.  International Standard 8824, (December,\n         \
    \      1987).\n          [2]  Case, J., McCloghrie, K., Rose, M., and Waldbusser,\
    \ S.,\n               \"Structure of Management Information for version 2 of the\n\
    \               Simple Network Management Protocol (SNMPv2)\", RFC 1442,\n   \
    \            SNMP Research, Inc., Hughes LAN Systems, Dover Beach\n          \
    \     Consulting, Inc., Carnegie Mellon University, April 1993.\n          RFC\
    \ 1443        Textual Conventions for SNMPv2      April 1993\n          6.  Security\
    \ Considerations\n          Security issues are not discussed in this memo.\n\
    \          7.  Authors' Addresses\n               Jeffrey D. Case\n          \
    \     SNMP Research, Inc.\n               3001 Kimberlin Heights Rd.\n       \
    \        Knoxville, TN  37920-9716\n               US\n               Phone: +1\
    \ 615 573 1434\n               Email: case@snmp.com\n               Keith McCloghrie\n\
    \               Hughes LAN Systems\n               1225 Charleston Road\n    \
    \           Mountain View, CA  94043\n               US\n               Phone:\
    \ +1 415 966 7934\n               Email: kzm@hls.com\n               Marshall\
    \ T. Rose\n               Dover Beach Consulting, Inc.\n               420 Whisman\
    \ Court\n               Mountain View, CA  94043-2186\n               US\n   \
    \            Phone: +1 415 968 1052\n               Email: mrose@dbc.mtview.ca.us\n\
    \               Steven Waldbusser\n               Carnegie Mellon University\n\
    \               4910 Forbes Ave\n               Pittsburgh, PA  15213\n      \
    \         US\n               Phone: +1 412 268 6628\n               Email: waldbusser@cmu.edu\n"
