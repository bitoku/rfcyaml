- contents:
  - '   Distribution of EAP-Based Keys for Handover and Re-Authentication

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an abstract mechanism for delivering root\n
    \  keys from an Extensible Authentication Protocol (EAP) server to\n   another
    network server that requires the keys for offering security\n   protected services,
    such as re-authentication, to an EAP peer.  The\n   distributed root key can be
    either a usage-specific root key (USRK),\n   a domain-specific root key (DSRK),
    or a domain-specific usage-\n   specific root key (DSUSRK) that has been derived
    from an Extended\n   Master Session Key (EMSK) hierarchy previously established
    between\n   the EAP server and an EAP peer.  This document defines a template
    for\n   a key distribution exchange (KDE) protocol that can distribute these\n
    \  different types of root keys using a AAA (Authentication,\n   Authorization,
    and Accounting) protocol and discusses its security\n   requirements.  The described
    protocol template does not specify\n   message formats, data encoding, or other
    implementation details.  It\n   thus needs to be instantiated with a specific
    protocol (e.g., RADIUS\n   or Diameter) before it can be used.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5749.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  Key Delivery Architecture  . . . . . . . . . . . . . . . .
    . .  5\n   4.  Key Distribution Exchange (KDE)  . . . . . . . . . . . . . . .
    \ 6\n     4.1.  Context and Scope for Distributed Keys . . . . . . . . . .  7\n
    \    4.2.  Key Distribution Exchange Scenarios  . . . . . . . . . . .  8\n   5.
    \ KDE Used in the EAP Re-Authentication Protocol (ERP) . . . . .  8\n   6.  Security
    Considerations  . . . . . . . . . . . . . . . . . . .  9\n     6.1.  Requirements
    on AAA Key Transport Protocols  . . . . . . .  9\n     6.2.  Distributing RK without
    Peer Consent . . . . . . . . . . . 10\n   7.  Acknowledgments  . . . . . . . .
    . . . . . . . . . . . . . . . 10\n   8.  Contributors . . . . . . . . . . . .
    . . . . . . . . . . . . . 10\n   9.  References . . . . . . . . . . . . . . .
    . . . . . . . . . . . 10\n     9.1.  Normative References . . . . . . . . . .
    . . . . . . . . . 10\n     9.2.  Informative References . . . . . . . . . . .
    . . . . . . . 11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Extensible Authentication Protocol (EAP) [RFC3748] is
    an\n   authentication framework supporting authentication methods that are\n   specified
    in EAP methods.  By definition, any key-generating EAP\n   method derives a Master
    Session Key (MSK) and an Extended Master\n   Session Key (EMSK).  [RFC5295] reserves
    the EMSK for the sole purpose\n   of deriving root keys that can be used for specific
    purposes called\n   usages.  In particular, [RFC5295] defines how to create a
    usage-\n   specific root key (USRK) for bootstrapping security in a specific\n
    \  application, a domain-specific root key (DSRK) for bootstrapping\n   security
    of a set of services within a domain, and a usage-specific\n   DSRK (DSUSRK) for
    a specific application within a domain.  [RFC5296]\n   defines a re-authentication
    root key (rRK) that is a USRK designated\n   for re-authentication.\n   The MSK
    and EMSK may be used to derive further keying material for a\n   variety of security
    mechanisms [RFC5247].  For example, the MSK has\n   been widely used for bootstrapping
    the wireless link security\n   associations between the peer and the network attachment
    points.\n   However, performance as well as security issues arise when using the\n
    \  MSK and the current bootstrapping methods in mobile scenarios that\n   require
    handovers, as described in [RFC5169].  To address handover\n   latencies and other
    shortcomings, [RFC5296] specifies an EAP re-\n   authentication protocol (ERP)
    that uses keys derived from the EMSK or\n   DSRK to enable efficient re-authentications
    in handover scenarios.\n   Neither [RFC5295] nor [RFC5296] specifies how root
    keys are delivered\n   to the network server requiring the key.  Such a key delivery\n
    \  mechanism is essential because the EMSK cannot leave the EAP server\n   ([RFC5295]),
    but root keys are needed by other network servers\n   disjoint with the EAP server.
    \ For example, in order to enable an EAP\n   peer to re-authenticate to a network
    during a handover, certain root\n   keys need to be made available by the EAP
    server to the server\n   carrying out the re-authentication.\n   This document
    specifies an abstract mechanism for the delivery of the\n   EMSK child keys from
    the server holding the EMSK or a root key to\n   another network server that requests
    a root key for providing\n   protected services (such as re-authentication and
    other usage and\n   domain-specific services) to EAP peers.  In the remainder
    of this\n   document, a server delivering root keys is referred to as a Key\n
    \  Delivering Server (KDS), and a server authorized to request and\n   receive
    root keys from a KDS is referred to as a Key Requesting\n   Server (KRS).  The
    Key Distribution Exchange (KDE) mechanism defined\n   in this document runs over
    a AAA (Authentication, Authorization, and\n   Accounting) protocol, e.g., RADIUS
    ([RFC2865], [RFC3579]) or Diameter\n   [RFC3588], and has several variants depending
    on the type of key that\n   is requested and delivered (i.e., DRSK, USRK, or DSUSRK).
    \ The\n   presented KDE mechanism is a protocol template that must be\n   instantiated
    for a particular protocol, such as RADIUS or Diameter,\n   to specify the format
    and encoding of the abstract protocol messages.\n   Only after such an instantiation
    can the KDE mechanism described in\n   this document be implemented.  This document
    also describes security\n   requirements for the secure key delivery over AAA.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   The
    following acronyms are used.\n   AAA\n      Authentication, Authorization and
    Accounting.  AAA protocols with\n      EAP support include RADIUS ([RFC2865],
    [RFC3579]) and Diameter\n      [RFC3588].\n   USRK\n      Usage-Specific Root
    Key.  A root key that is derived from the\n      EMSK; see [RFC5295].\n   USR-KH\n
    \     USRK Holder.  A network server that is authorized to request and\n      receive
    a USRK from the EAP server.  The USR-KH can be a AAA\n      server or dedicated
    service server.\n   DSRK\n      Domain-Specific Root Key.  A root key that is
    derived from the\n      EMSK; see [RFC5295].\n   DSR-KH\n      DSRK Holder.  A
    network server that is authorized to request and\n      receive a DSRK from the
    EAP server.  The most likely\n      implementation of a DSR-KH is a AAA server
    in a domain, enforcing\n      the policies for the usage of the DSRK within this
    domain.\n   DSUSRK\n      Domain-Specific Usage-Specific Root Key.  A root key
    that is\n      derived from the DSRK; see [RFC5295].\n   DSUSR-KH\n      DSUSRK
    holder.  A network server authorized to request and receive\n      a DSUSRK from
    the DSR-KH.  The most likely implementation of a\n      DSUSR-KH is a AAA server
    in a domain, responsible for a particular\n      service offered within this domain.\n
    \  RK\n      Root Key.  An EMSK child key, i.e., a USRK, DSRK, or DSUSRK.\n   KDS\n
    \     Key Delivering Server.  A network server that holds an EMSK or\n      DSRK
    and delivers root keys to a KRS requesting root keys.  The\n      EAP server (together
    with the AAA server to which it exports the\n      keys for delivery) and the
    DSR-KH can both act as KDS.\n   KRS\n      Key Requesting Server.  A network server
    that shares an interface\n      with a KDS and is authorized to request root keys
    from the KDS.  A\n      USR-KH, DSR-KH, and DSUSR-KH can all act as a KRS.\n   HOKEY\n
    \     Handover Keying.\n"
  title: 2.  Terminology
- contents:
  - "3.  Key Delivery Architecture\n   An EAP server carries out normal EAP authentications
    with EAP peers\n   but is typically not involved in potential handovers and re-\n
    \  authentication attempts by the same EAP peer.  Other servers are\n   typically
    in place to offer these requested services.  These servers\n   can be AAA servers
    or other service network servers.  Whenever EAP-\n   based keying material is
    used to protect a requested service, the\n   respective keying material has to
    be available to the server\n   providing the requested service.  For example,
    the first time a peer\n   requests a service from a network server, this server
    acts as a KRS.\n   The KRS requests the root keys needed to derive the keys for\n
    \  protecting the requested service from the respective KDS.  In\n   subsequent
    requests from the same peer and as long as the root key\n   has not expired, the
    KRS can use the same root keys to derive fresh\n   keying material to protect
    the requested service.  These kinds of key\n   requests and distributions are
    necessary because an EMSK cannot leave\n   the EAP server ([RFC5295]).  Hence,
    any root key that is directly\n   derived from an EMSK can only be derived by
    the EAP server itself.\n   The EAP server then exports these keys to a server
    that can\n   distribute the keys to the KRS.  In the remainder of this document,\n
    \  the KDS consisting of the EAP server that derives the root keys\n   together
    with the AAA server that distributes these keys is denoted\n   EAP/AAA server.
    \ Root keys derived from EMSK child keys, such as a\n   DSUSRK, can be requested
    from the respective root key holder.  Hence,\n   a KDS can be either the EAP/AAA
    server or a DSRK holder (DSR-KH),\n   whereas a KRS can be either a USRK holder
    (USR-KH), a DSR-KH, or a\n   DSUSRK holder (DSUSR-KH).\n   The KRS needs to share
    an interface with the KDS to be able to send\n   all necessary input data to derive
    the requested key and to receive\n   the requested key.  The provided data includes
    the Key Derivation\n   Function (KDF) that should be used to derive the requested
    key.  The\n   KRS uses the received root key to derive further keying material
    in\n   order to secure its offered services.  Every KDS is responsible for\n   storing
    and protecting the received root key as well as the\n   derivation and distribution
    of any child key derived from the root\n   key.  An example of a key delivery
    architecture is illustrated in\n   Figure 1 showing the different types of KRS
    and their interfaces to\n   the KDS.\n                 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                |             EAP/AAA server              |\n                 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                 /             |             |          \\\n                 /
    \             |             |           \\\n                /               |
    \            |            \\\n        +-+-+-+-+-+-+-+   +-+-+-+-+-+-+  +-+-+-+-+-+
    \ +-+-+-+-+-+\n        |   USR-KH1   |   |  USR-KH2  |  | DSR-KH1 |  | DSR-KH2
    |\n        | HOKEY server|   | XYZ server|  |Domain 1 |  | Domain 2|\n        +-+-+-+-+-+-+-+
    \  +-+-+-+-+-+-+  +-+-+-+-+-+  +-+-+-+-+-+\n                                             /
    \            |\n                                            /              |\n
    \                                          /               |\n                                    +-+-+-+-+-+-+-+
    \ +-+-+-+-+-+-+-+-+\n                                    |  DSUSR-KH   |  |  DSUSR-KH2
    \   |\n                                    |  Domain 1   |  |   Domain 2    |\n
    \                                   |Home domain  |  |Visited domain |\n                                    |HOKEY
    server |  |HOKEY server   |\n                                    +-+-+-+-+-+-+-+
    \ +-+-+-+-+-+-+-+-+\n   Figure 1: Example Key Delivery Architecture for the Different
    KRS and\n                                    KDS\n"
  title: 3.  Key Delivery Architecture
- contents:
  - "4.  Key Distribution Exchange (KDE)\n   In this section, a generic mechanism
    for a key distribution exchange\n   (KDE) over AAA is described in which a root
    key (RK) is distributed\n   from a KDS to a KRS.  It is required that the communication
    path\n   between the KDS and the KRS is protected by the use of an appropriate\n
    \  AAA transport security mechanism (see Section 6 for security\n   requirements).
    \ Here, it is assumed that the KRS and the KDS are\n   separate entities, logically
    if not physically, and the delivery of\n   the requested RK is specified accordingly.\n
    \  The key distribution exchange consists of one round-trip, i.e., two\n   messages
    between the KRS and the KDS, as illustrated in Figure 2.\n   First, the KRS sends
    a KDE-Request carrying a Key Request Token\n   (KRT).  As a response, the KDS
    sends a KDE-Response carrying a Key\n   Delivery Token (KDT).  Both tokens are
    encapsulated in AAA messages.\n   The definition of the AAA attributes depends
    on the implemented AAA\n   protocol and is out of scope of this document.  However,
    the security\n   requirements for AAA messages carrying KDE messages are discussed
    in\n   Section 6.  The contents of KRT and KDT are defined in the following.\n
    \    KRS                                        KDS\n   --------                                   -------\n
    \      |                                          |\n       |       KDE-Request:
    AAA{KRT}              |\n       |----------------------------------------->|\n
    \      |       KDE-Response: AAA{KDT}             |\n       |<-----------------------------------------|\n
    \                       Figure 2: KDE Message Flow\n   KRT : (PID, KT, KL)\n      KRT
    carries the identifiers of the peer (PID), the key type (KT)\n      and the key
    label (KL).  The key type specifies which type of root\n      key is requested,
    e.g., DSRK, USRK and DSUSRK.  The encoding rules\n      for each key type are
    left to the protocol developers who define\n      the instantiation of the KDE
    mechanism for a particular protocol.\n      For the specification of key labels
    and the associated IANA\n      registries, please refer to [RFC5295], which specifies
    key labels\n      for USRKs and establishes an IANA registry for them.  The same\n
    \     specifications can be applied to other root keys.\n   KDT : (KT, KL, RK,
    KN_RK, LT_RK)\n      KDT carries the root key (RK) to be distributed to the KRS,
    as\n      well as the key type (KT) of the key, the key label (KL), the key\n
    \     name (KN_RK), and the lifetime of RK (LT_RK).  The key lifetime of\n      each
    distributed key MUST NOT be greater than that of its parent\n      key.\n"
  - contents:
    - "4.1.  Context and Scope for Distributed Keys\n   The key context of each distributed
      key is determined by the sequence\n   of KTs in the key hierarchy.  The key
      scope of each distributed key\n   is determined by the sequence of (PID, KT,
      KL)-tuples in the key\n   hierarchy and the identifier of the KRS.  The KDF
      used to generate\n   the requested keys includes context and scope information,
      thus,\n   binding the key to the specific channel [RFC5295].\n"
    title: 4.1.  Context and Scope for Distributed Keys
  - contents:
    - "4.2.  Key Distribution Exchange Scenarios\n   Given the three types of KRS,
      there are three scenarios for the\n   distribution of the EMSK child keys.  For
      all scenarios, the trigger\n   and mechanism for key delivery may involve a
      specific request from an\n   EAP peer and/or another intermediary (such as an
      authenticator).  For\n   simplicity, it is assumed that USR-KHs reside in the
      same domain as\n   the EAP server.\n   Scenario 1: EAP/AAA server to USR-KH:
      \ In this scenario, the EAP/AAA\n      server delivers a USRK to a USR-KH.\n
      \  Scenario 2: EAP/AAA server to DSR-KH:  In this scenario, the EAP/AAA\n      server
      delivers a DSRK to a DSR-KH.\n   Scenario 3: DSR-KH to DSUSR-KH:  In this scenario,
      a DSR-KH in a\n      specific domain delivers keying material to a DSUSR-KH
      in the same\n      domain.\n   The key distribution exchanges for Scenario 3
      can be combined with\n   the key distribution exchanges for Scenario 2 into
      a single round-\n   trip exchange as shown in Figure 3.  Here, KDE-Request and
      KDE-\n   Response are messages for Scenarios 2, whereas KDE-Request' and KDE-\n
      \  Response' are messages for Scenarios 3.\n   DSUSR-KH                   DSR-KH
      \                   EAP/AAA Server\n   --------                   ------                     ------------\n
      \     |  KDE-Request'(KRT')     |   KDE-Request(KRT)        |\n      |------------------------>|-------------------------->|\n
      \     |  KDE-Response'(KDT')    |   KDE-Response(KDT)       |\n      |<-----------------------
      |<--------------------------|\n      |                         |                           |\n
      \                   Figure 3: Combined Message Exchange\n"
    title: 4.2.  Key Distribution Exchange Scenarios
  title: 4.  Key Distribution Exchange (KDE)
- contents:
  - "5.  KDE Used in the EAP Re-Authentication Protocol (ERP)\n   This section describes
    how the presented KDE mechanism should be used\n   to request and deliver the
    root keys used for re-authentication in\n   the EAP Re-authentication Protocol
    (ERP) defined in [RFC5296].  ERP\n   supports two forms of bootstrapping, implicit
    as well as explicit\n   bootstrapping, and KDE is discussed for both cases in
    the remainder\n   of this section.\n   In implicit bootstrapping, the local EAP
    Re-authentication (ER)\n   server requests the DSRK from the home AAA server during
    the initial\n   EAP exchange.  Here, the local ER server acts as the KRS and the
    home\n   AAA server as the KDS.  In this case, the local ER server requesting\n
    \  the DSRK includes a KDE-Request in the AAA packet encapsulating the\n   first
    EAP-Response message from the peer.  Here, a AAA User-Name\n   attribute is used
    as the PID.  If the EAP exchange is successful, the\n   home AAA server includes
    a KDE-Response in the AAA message that\n   carries the EAP-Success message.\n
    \  Explicit bootstrapping is initiated by peers that do not know the\n   domain.
    \ Here, the peer sends an EAP-Initiate message with the\n   bootstrapping flag
    turned on.  The local ER server (acting as KRS)\n   includes a KDE-Request message
    in the AAA message that carries the\n   peer's EAP-Initiate message and sends
    it to the peer's home AAA\n   server.  Here, a AAA User-Name attribute is used
    as the PID.  In its\n   response, the home AAA server (acting as KDS) includes
    a KDE-Response\n   in the AAA message that carries the EAP-Finish message with
    the\n   bootstrapping flag set.\n"
  title: 5.  KDE Used in the EAP Re-Authentication Protocol (ERP)
- contents:
  - "6.  Security Considerations\n   This section provides security requirements and
    a discussion of\n   distributing RK without peer consent.\n"
  - contents:
    - "6.1.  Requirements on AAA Key Transport Protocols\n   Any KDE attribute that
      is exchanged as part of a KDE-Request or KDE-\n   Response MUST be integrity-protected
      and replay-protected by the\n   underlying AAA protocol that is used to encapsulate
      the attributes.\n   Additionally, a secure key wrap algorithm MUST be used by
      the AAA\n   protocol to protect the RK in a KDE-Response.  Other confidential\n
      \  information as part of the KDE messages (e.g., identifiers if privacy\n   is
      a requirement) SHOULD be encrypted by the underlying AAA protocol.\n   When
      there is an intermediary, such as a AAA proxy, on the path\n   between the KRS
      and the KDS, there will be a series of hop-by-hop\n   security associations
      along the path.  The use of hop-by-hop security\n   associations implies that
      the intermediary on each hop can access the\n   distributed keying material.
      \ Hence, the use of hop-by-hop security\n   SHOULD be limited to an environment
      where an intermediary is trusted\n   not to abuse the distributed key material.
      \ If such a trusted AAA\n   infrastructure does not exist, other means must
      be applied at a\n   different layer to ensure the end-to-end security (i.e.,
      between KRS\n   and KDS) of the exchanged KDE messages.  The security requirements\n
      \  for such a protocol are the same as previously outlined for AAA\n   protocols
      and MUST hold when encapsulated in AAA messages.\n"
    title: 6.1.  Requirements on AAA Key Transport Protocols
  - contents:
    - "6.2.  Distributing RK without Peer Consent\n   When a KDE-Request is sent as
      a result of explicit ERP bootstrapping\n   [RFC5296], cryptographic verification
      of peer consent on distributing\n   an RK is provided by the integrity checksum
      of the EAP-Initiate\n   message with the bootstrapping flag turned on.\n   On
      the other hand, when a KDE-Request is sent as a result of implicit\n   ERP bootstrapping
      [RFC5296], cryptographic verification of peer\n   consent on distributing an
      RK is not provided.  A peer is not\n   involved in the process and, thus, not
      aware of key delivery requests\n   for root keys derived from its established
      EAP keying material.\n   Hence, a peer has no control where keys derived from
      its established\n   EAP keying material are distributed.  A possible consequence
      of this\n   is that a KRS may request and obtain an RK from the home server
      even\n   if the peer does not support ERP.  EAP-Initiate/Re-auth-Start\n   messages
      send to the peer will be silently dropped by the peer\n   causing further waste
      of resources.\n"
    title: 6.2.  Distributing RK without Peer Consent
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgments\n   The editors would like to thank Dan Harkins, Chunqiang
    Li, Rafael\n   Marin Lopez, and Charles Clancy for their valuable comments.\n"
  title: 7.  Acknowledgments
- contents:
  - "8.  Contributors\n   The following people contributed to this document: Kedar
    Gaonkar,\n   Lakshminath Dondeti, Vidya Narayanan, and Glen Zorn.\n"
  title: 8.  Contributors
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and
      H.\n              Levkowetz, \"Extensible Authentication Protocol (EAP)\",\n
      \             RFC 3748, June 2004.\n   [RFC5295]  Salowey, J., Dondeti, L.,
      Narayanan, V., and M. Nakhjiri,\n              \"Specification for the Derivation
      of Root Keys from an\n              Extended Master Session Key (EMSK)\", RFC
      5295,\n              August 2008.\n   [RFC5296]  Narayanan, V. and L. Dondeti,
      \"EAP Extensions for EAP Re-\n              authentication Protocol (ERP)\",
      RFC 5296, August 2008.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2865]  Rigney, C., Willens, S., Rubens,
      A., and W. Simpson,\n              \"Remote Authentication Dial In User Service
      (RADIUS)\",\n              RFC 2865, June 2000.\n   [RFC3579]  Aboba, B. and
      P. Calhoun, \"RADIUS (Remote Authentication\n              Dial In User Service)
      Support For Extensible\n              Authentication Protocol (EAP)\", RFC 3579,
      September 2003.\n   [RFC3588]  Calhoun, P., Loughney, J., Guttman, E., Zorn,
      G., and J.\n              Arkko, \"Diameter Base Protocol\", RFC 3588, September
      2003.\n   [RFC5169]  Clancy, T., Nakhjiri, M., Narayanan, V., and L. Dondeti,\n
      \             \"Handover Key Management and Re-Authentication Problem\n              Statement\",
      RFC 5169, March 2008.\n   [RFC5247]  Aboba, B., Simon, D., and P. Eronen, \"Extensible\n
      \             Authentication Protocol (EAP) Key Management Framework\",\n              RFC
      5247, August 2008.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Katrin Hoeper (editor)\n   Motorola, Inc.\n   1295 E Algonquin
    Road\n   Schaumburg, IL  60196\n   USA\n   Phone: +1 847 576 4714\n   EMail: khoeper@motorola.com\n
    \  Madjid F. Nakhjiri\n   Motorola, Inc.\n   6450 Sequence Drive\n   San Diego,
    CA  92121\n   USA\n   EMail: madjid.nakhjiri@motorola.com\n   Yoshihiro Ohba (editor)\n
    \  Toshiba Corporate Research and Development Center\n   1 Komukai-Toshiba-cho\n
    \  Saiwai-ku, Kawasaki, Kanagawa  212-8582\n   Japan\n   Phone: +81 44 549 2230\n
    \  EMail: yoshihiro.ohba@toshiba.co.jp\n"
  title: Authors' Addresses
