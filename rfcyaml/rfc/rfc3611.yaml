- contents:
  - '            RTP Control Protocol Extended Reports (RTCP XR)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines the Extended Report (XR) packet type for the\n
    \  RTP Control Protocol (RTCP), and defines how the use of XR packets\n   can
    be signaled by an application if it employs the Session\n   Description Protocol
    (SDP).  XR packets are composed of report\n   blocks, and seven block types are
    defined here.  The purpose of the\n   extended reporting format is to convey information
    that supplements\n   the six statistics that are contained in the report blocks
    used by\n   RTCP's Sender Report (SR) and Receiver Report (RR) packets.  Some\n
    \  applications, such as multicast inference of network characteristics\n   (MINC)
    or voice over IP (VoIP) monitoring, require other and more\n   detailed statistics.
    \ In addition to the block types defined here,\n   additional block types may
    be defined in the future by adhering to\n   the framework that this document provides.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n       1.1.  Applicability. . . . . . . . . . . . . . . . . .
    . . . .  4\n       1.2.  Terminology. . . . . . . . . . . . . . . . . . . . .
    . .  7\n   2.  XR Packet Format . . . . . . . . . . . . . . . . . . . . . . .
    \ 7\n   3.  Extended Report Block Framework. . . . . . . . . . . . . . . .  8\n
    \  4.  Extended Report Blocks . . . . . . . . . . . . . . . . . . . .  9\n       4.1.
    \ Loss RLE Report Block. . . . . . . . . . . . . . . . . .  9\n             4.1.1.
    \ Run Length Chunk . . . . . . . . . . . . . . . . 15\n             4.1.2.  Bit
    Vector Chunk . . . . . . . . . . . . . . . . 15\n             4.1.3.  Terminating
    Null Chunk . . . . . . . . . . . . . 16\n       4.2.  Duplicate RLE Report Block
    . . . . . . . . . . . . . . . 16\n       4.3.  Packet Receipt Times Report Block.
    . . . . . . . . . . . 18\n       4.4.  Receiver Reference Time Report Block .
    . . . . . . . . . 20\n       4.5.  DLRR Report Block. . . . . . . . . . . . .
    . . . . . . . 21\n       4.6.  Statistics Summary Report Block. . . . . . . .
    . . . . . 22\n       4.7.  VoIP Metrics Report Block. . . . . . . . . . . . .
    . . . 25\n             4.7.1.  Packet Loss and Discard Metrics. . . . . . . .
    . 27\n             4.7.2.  Burst Metrics. . . . . . . . . . . . . . . . . . 27\n
    \            4.7.3.  Delay Metrics. . . . . . . . . . . . . . . . . . 30\n             4.7.4.
    \ Signal Related Metrics . . . . . . . . . . . . . 31\n             4.7.5.  Call
    Quality or Transmission Quality Metrics . . 33\n             4.7.6.  Configuration
    Parameters . . . . . . . . . . . . 34\n             4.7.7.  Jitter Buffer Parameters
    . . . . . . . . . . . . 36\n   5.  SDP Signaling. . . . . . . . . . . . . . .
    . . . . . . . . . . 36\n       5.1.  The SDP Attribute. . . . . . . . . . . .
    . . . . . . . . 37\n       5.2.  Usage in Offer/Answer. . . . . . . . . . . .
    . . . . . . 40\n       5.3.  Usage Outside of Offer/Answer. . . . . . . . . .
    . . . . 42\n   6.  IANA Considerations. . . . . . . . . . . . . . . . . . . .
    . . 42\n       6.1.  XR Packet Type . . . . . . . . . . . . . . . . . . . . .
    42\n       6.2.  RTCP XR Block Type Registry. . . . . . . . . . . . . . . 42\n
    \      6.3.  The \"rtcp-xr\" SDP Attribute. . . . . . . . . . . . . . . 43\n   7.
    \ Security Considerations. . . . . . . . . . . . . . . . . . . . 44\n   A.  Algorithms
    . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n       A.1.  Sequence
    Number Interpretation . . . . . . . . . . . . . 46\n       A.2.  Example Burst
    Packet Loss Calculation. . . . . . . . . . 47\n   Intellectual Property Notice
    . . . . . . . . . . . . . . . . . . . 49\n   Acknowledgments. . . . . . . . .
    . . . . . . . . . . . . . . . . . 50\n   Contributors . . . . . . . . . . . .
    . . . . . . . . . . . . . . . 50\n   References . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . 51\n   Normative References . . . . . . . . . . . .
    . . . . . . . . . . . 51\n   Informative References . . . . . . . . . . . . .
    . . . . . . . . . 51\n   Authors' Addresses . . . . . . . . . . . . . . . . .
    . . . . . . . 53\n   Full Copyright Statement . . . . . . . . . . . . . . . .
    . . . . . 55\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines the Extended Report (XR) packet type
    for the\n   RTP Control Protocol (RTCP) [9], and defines how the use of XR\n   packets
    can be signaled by an application if it employs the Session\n   Description Protocol
    (SDP) [4].  XR packets convey information beyond\n   that already contained in
    the reception report blocks of RTCP's\n   sender report (SR) or Receiver Report
    (RR) packets.  The information\n   is of use across RTP profiles, and so is not
    appropriately carried in\n   SR or RR profile-specific extensions.  Information
    used for network\n   management falls into this category, for instance.\n   The
    definition is broken out over the three sections that follow the\n   Introduction.
    \ Section 2 defines the XR packet as consisting of an\n   eight octet header followed
    by a series of components called report\n   blocks.  Section 3 defines the common
    format, or framework,\n   consisting of a type and a length field, required for
    all report\n   blocks.  Section 4 defines several specific report block types.\n
    \  Other block types can be defined in future documents as the need\n   arises.\n
    \  The report block types defined in this document fall into three\n   categories.
    \ The first category consists of packet-by-packet reports\n   on received or lost
    RTP packets.  Reports in the second category\n   convey reference time information
    between RTP participants.  In the\n   third category, reports convey metrics relating
    to packet receipts,\n   that are summary in nature but that are more detailed,
    or of a\n   different type, than that conveyed in existing RTCP packets.\n   All
    told, seven report block formats are defined by this document.\n   Of these, three
    are packet-by-packet block types:\n   -  Loss RLE Report Block (Section 4.1):
    Run length encoding of\n      reports concerning the losses and receipts of RTP
    packets.\n   -  Duplicate RLE Report Block (Section 4.2): Run length encoding
    of\n      reports concerning duplicates of received RTP packets.\n   -  Packet
    Receipt Times Report Block (Section 4.3): A list of\n      reception timestamps
    of RTP packets.\n   There are two reference time related block types:\n   -  Receiver
    Reference Time Report Block (Section 4.4): Receiver-end\n      wallclock timestamps.
    \ Together with the DLRR Report Block\n      mentioned next, these allow non-senders
    to calculate round-trip\n      times.\n   -  DLRR Report Block (Section 4.5):
    The delay since the last Receiver\n      Reference Time Report Block was received.
    \ An RTP data sender that\n      receives a Receiver Reference Time Report Block
    can respond with a\n      DLRR Report Block, in much the same way as, in the mechanism\n
    \     already defined for RTCP [9, Section 6.3.1], an RTP data receiver\n      that
    receives a sender's NTP timestamp can respond by filling in\n      the DLSR field
    of an RTCP reception report block.\n   Finally, this document defines two summary
    metric block types:\n   -  Statistics Summary Report Block (Section 4.6): Statistics
    on RTP\n      packet sequence numbers, losses, duplicates, jitter, and TTL or\n
    \     Hop Limit values.\n   -  VoIP Metrics Report Block (Section 4.7): Metrics
    for monitoring\n      Voice over IP (VoIP) calls.\n   Before proceeding to the
    XR packet and report block definitions, this\n   document provides an applicability
    statement (Section 1.1) that\n   describes the contexts in which these report
    blocks can be used.  It\n   also defines (Section 1.2) the normative use of key
    words, such as\n   MUST and SHOULD, as they are employed in this document.\n   Following
    the definitions of the various report blocks, this document\n   describes how
    applications that employ SDP can signal their use\n   (Section 5).  The document
    concludes with a discussion (Section 6) of\n   numbering considerations for the
    Internet Assigned Numbers Authority\n   (IANA), of security considerations (Section
    7), and with appendices\n   that provide examples of how to implement algorithms
    discussed in the\n   text.\n"
  - contents:
    - "1.1.  Applicability\n   The XR packets are useful across multiple applications,
      and for that\n   reason are not defined as profile-specific extensions to RTCP
      sender\n   or Receiver Reports [9, Section 6.4.3].  Nonetheless, they are not
      of\n   use in all contexts.  In particular, the VoIP metrics report block\n
      \  (Section 4.7) is specific to voice applications, though it can be\n   employed
      over a wide variety of such applications.\n   The VoIP metrics report block
      can be applied to any one-to-one or\n   one-to-many voice application for which
      the use of RTP and RTCP is\n   specified.  The use of conversational metrics
      (Section 4.7.5),\n   including the R factor (as described by the E Model defined
      in [3])\n   and the mean opinion score for conversational quality (MOS-CQ),
      in\n   applications other than simple two party calls is not defined; hence,\n
      \  these metrics should be identified as unavailable in multicast\n   conferencing
      applications.\n   The packet-by-packet report block types, Loss RLE (Section
      4.1),\n   Duplicate RLE (Section 4.2), and Packet Receipt Times (Section 4.3),\n
      \  have been defined with network tomography applications, such as\n   multicast
      inference of network characteristics (MINC) [11], in mind.\n   MINC requires
      detailed packet receipt traces from multicast session\n   receivers in order
      to infer the gross structure of the multicast\n   distribution tree and the
      parameters, such as loss rates and delays,\n   that apply to paths between the
      branching points of that tree.\n   Any real time multicast multimedia application
      can use the packet-\n   by-packet report block types.  Such an application could
      employ a\n   MINC inference subsystem that would provide it with multicast tree\n
      \  topology information.  One potential use of such a subsystem would be\n   for
      the identification of high loss regions in the multicast tree and\n   the identification
      of multicast session participants well situated to\n   provide retransmissions
      of lost packets.\n   Detailed packet-by-packet reports do not necessarily have
      to consume\n   disproportionate bandwidth with respect to other RTCP packets.
      \ An\n   application can cap the size of these blocks.  A mechanism called\n
      \  \"thinning\" is provided for these report blocks, and can be used to\n   ensure
      that they adhere to a size limit by restricting the number of\n   packets reported
      upon within any sequence number interval.  The\n   rationale for, and use of
      this mechanism is described in [13].\n   Furthermore, applications might not
      require report blocks from all\n   receivers in order to answer such important
      questions as where in the\n   multicast tree there are paths that exceed a defined
      loss rate\n   threshold.  Intelligent decisions regarding which receivers send\n
      \  these report blocks can further restrict the portion of RTCP\n   bandwidth
      that they consume.\n   The packet-by-packet report blocks can also be used by
      dedicated\n   network monitoring applications.  For such an application, it
      might\n   be appropriate to allow more than 5% of RTP data bandwidth to be used\n
      \  for RTCP packets, thus allowing proportionately larger and more\n   detailed
      report blocks.\n   Nothing in the packet-by-packet block types restricts their
      use to\n   multicast applications.  In particular, they could be used for\n
      \  network tomography similar to MINC, but using striped unicast packets\n   instead.
      \ In addition, if it were found useful, they could be used\n   for applications
      limited to two participants.\n   One use to which the packet-by-packet reports
      are not immediately\n   suited is for data packet acknowledgments as part of
      a packet\n   retransmission mechanism.  The reason is that the packet accounting\n
      \  technique suggested for these blocks differs from the packet\n   accounting
      normally employed by RTP.  In order to favor measurement\n   applications, an
      effort is made to interpret as little as possible at\n   the data receiver,
      and leave the interpretation as much as possible\n   to participants that receive
      the report blocks.  Thus, for example, a\n   packet with an anomalous SSRC ID
      or an anomalous sequence number\n   might be excluded by normal RTP accounting,
      but would be reported\n   upon for network monitoring purposes.\n   The Statistics
      Summary Report Block (Section 4.6) has also been\n   defined with network monitoring
      in mind.  This block type can be used\n   equally well for reporting on unicast
      and multicast packet reception.\n   The reference time related block types were
      conceived for receiver-\n   based TCP-friendly multicast congestion control
      [18].  By allowing\n   data receivers to calculate their round trip times to
      senders, they\n   help the receivers estimate the downstream bandwidth they
      should\n   request.  Note that if every receiver is to send Receiver Reference\n
      \  Time Report Blocks (Section 4.4), a sender might potentially send a\n   number
      of DLRR Report Blocks (Section 4.5) equal to the number of\n   receivers whose
      RTCP packets have arrived at the sender within its\n   reporting interval.  As
      the number of participants in a multicast\n   session increases, an application
      should use discretion regarding\n   which participants send these blocks, and
      how frequently.\n   XR packets supplement the existing RTCP packets, and may
      be stacked\n   with other RTCP packets to form compound RTCP packets [9, Section
      6].\n   The introduction of XR packets into a session in no way changes the\n
      \  rules governing the calculation of the RTCP reporting interval [9,\n   Section
      6.2].  As XR packets are RTCP packets, they count as such for\n   bandwidth
      calculations.  As a result, the addition of extended\n   reporting information
      may tend to increase the average RTCP packet\n   size, and thus the average
      reporting interval.  This increase may be\n   limited by limiting the size of
      XR packets.\n   The SDP signaling defined for XR packets in this document (Section
      5)\n   was done so with three use scenarios in mind: a Real Time Streaming\n
      \  Protocol (RTSP) controlled streaming application, a one-to-many\n   multicast
      multimedia application such as a course lecture with\n   enhanced feedback,
      and a Session Initiation Protocol (SIP) controlled\n   conversational session
      involving two parties.  Applications that\n   employ SDP are free to use additional
      SDP signaling for cases not\n   covered here.  In addition, applications are
      free to use signaling\n   mechanisms other than SDP.\n"
    title: 1.1.  Applicability
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP
      14, RFC 2119 [1]\n   and indicate requirement levels for compliance with this\n
      \  specification.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  XR Packet Format\n   An XR packet consists of a header of two 32-bit words,
    followed by a\n   number, possibly zero, of extended report blocks.  This type
    of\n   packet is laid out in a manner consistent with other RTCP packets, as\n
    \  concerns the essential version, packet type, and length information.\n   XR
    packets are thus backwards compatible with RTCP receiver\n   implementations that
    do not recognize them, but that ought to be able\n   to parse past them using
    the length information.  A padding field and\n   an SSRC field are also provided
    in the same locations that they\n   appear in other RTCP packets, for simplicity.
    \ The format is as\n   follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |V=2|P|reserved |   PT=XR=207   |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                              SSRC                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  :                         report blocks                         :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  version (V): 2 bits\n         Identifies the version of RTP.  This specification
    applies to\n         RTP version two.\n   padding (P): 1 bit\n         If the
    padding bit is set, this XR packet contains some\n         additional padding
    octets at the end.  The semantics of this\n         field are identical to the
    semantics of the padding field in\n         the SR packet, as defined by the RTP
    specification.\n   reserved: 5 bits\n         This field is reserved for future
    definition.  In the absence\n         of such definition, the bits in this field
    MUST be set to zero\n         and MUST be ignored by the receiver.\n   packet
    type (PT): 8 bits\n         Contains the constant 207 to identify this as an RTCP
    XR\n         packet.  This value is registered with the Internet Assigned\n         Numbers
    Authority (IANA), as described in Section 6.1.\n   length: 16 bits\n         As
    described for the RTCP Sender Report (SR) packet (see\n         Section 6.4.1
    of the RTP specification [9]).  Briefly, the\n         length of this XR packet
    in 32-bit words minus one, including\n         the header and any padding.\n   SSRC:
    32 bits\n         The synchronization source identifier for the originator of\n
    \        this XR packet.\n   report blocks: variable length.\n         Zero or
    more extended report blocks.  In keeping with the\n         extended report block
    framework defined below, each block MUST\n         consist of one or more 32-bit
    words.\n"
  title: 2.  XR Packet Format
- contents:
  - "3.  Extended Report Block Framework\n   Extended report blocks are stacked, one
    after the other, at the end\n   of an XR packet.  An individual block's length
    is a multiple of 4\n   octets.  The XR header's length field describes the total
    length of\n   the packet, including these extended report blocks.\n   Each block
    has block type and length fields that facilitate parsing.\n   A receiving application
    can demultiplex the blocks based upon their\n   type, and can use the length information
    to locate each successive\n   block, even in the presence of block types it does
    not recognize.\n   An extended report block has the following format:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |      BT       | type-specific |         block length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  :             type-specific block contents                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  block type (BT): 8 bits\n         Identifies the block format.  Seven block
    types are defined in\n         Section 4.  Additional block types may be defined
    in future\n         specifications.  This field's name space is managed by the\n
    \        Internet Assigned Numbers Authority (IANA), as described in\n         Section
    6.2.\n   type-specific: 8 bits\n         The use of these bits is determined by
    the block type\n         definition.\n   block length: 16 bits\n         The length
    of this report block, including the header, in 32-\n         bit words minus one.
    \ If the block type definition permits,\n         zero is an acceptable value,
    signifying a block that consists\n         of only the BT, type-specific, and
    block length fields, with a\n         null type-specific block contents field.\n
    \  type-specific block contents: variable length\n         The use of this field
    is defined by the particular block type,\n         subject to the constraint that
    it MUST be a multiple of 32 bits\n         long.  If the block type definition
    permits, It MAY be zero\n         bits long.\n"
  title: 3.  Extended Report Block Framework
- contents:
  - "4.  Extended Report Blocks\n   This section defines seven extended report blocks:
    block types for\n   reporting upon received packet losses and duplicates, packet\n
    \  reception times, receiver reference time information, receiver\n   inter-report
    delays, detailed reception statistics, and voice over IP\n   (VoIP) metrics.  An
    implementation SHOULD ignore incoming blocks with\n   types not relevant or unknown
    to it.  Additional block types MUST be\n   registered with the Internet Assigned
    Numbers Authority (IANA) [16],\n   as described in Section 6.2.\n"
  - contents:
    - "4.1.  Loss RLE Report Block\n   This block type permits detailed reporting
      upon individual packet\n   receipt and loss events.  Such reports can be used,
      for example, for\n   multicast inference of network characteristics (MINC) [11].
      \ With\n   MINC, one can discover the topology of the multicast tree used for\n
      \  distributing a source's RTP packets, and of the loss rates along\n   links
      within that tree, or they could be used to provide raw data to\n   a network
      management application.\n   Since a Boolean trace of lost and received RTP packets
      is potentially\n   lengthy, this block type permits the trace to be compressed
      through\n   run length encoding.  To further reduce block size, loss event\n
      \  reports can be systematically dropped from the trace in a mechanism\n   called
      thinning that is described below and that is studied in [13].\n   A participant
      that generates a Loss RLE Report Block should favor\n   accuracy in reporting
      on observed events over interpretation of those\n   events whenever possible.
      \ Interpretation should be left to those who\n   observe the report blocks.
      \ Following this approach implies that\n   accounting for Loss RLE Report Blocks
      will differ from the accounting\n   for the generation of the SR and RR packets
      described in the RTP\n   specification [9] in the following two areas: per-sender
      accounting\n   and per-packet accounting.\n   In its per-sender accounting,
      an RTP session participant SHOULD NOT\n   make the receipt of a threshold minimum
      number of RTP packets a\n   condition for reporting upon the sender of those
      packets.  This\n   accounting technique differs from the technique described
      in Section\n   6.2.1 and Appendix A.1 of the RTP specification that allows a\n
      \  threshold to determine whether a sender is considered valid.\n   In its per-packet
      accounting, an RTP session participant SHOULD treat\n   all sequence numbers
      as valid.  This accounting technique differs\n   from the technique described
      in Appendix A.1 of the RTP specification\n   that suggests ruling a sequence
      number valid or invalid on the basis\n   of its contiguity with the sequence
      numbers of previously received\n   packets.\n   Sender validity and sequence
      number validity are interpretations of\n   the raw data.  Such interpretations
      are justified in the interest,\n   for example, of excluding the stray old packet
      from an unrelated\n   session from having an effect upon the calculation of
      the RTCP\n   transmission interval.  The presence of stray packets might, on
      the\n   other hand, be of interest to a network monitoring application.\n   One
      accounting interpretation that is still necessary is for a\n   participant to
      decide whether the 16 bit sequence number has rolled\n   over.  Under ordinary
      circumstances this is not a difficult task.\n   For example, if packet number
      65,535 (the highest possible sequence\n   number) is followed shortly by packet
      number 0, it is reasonable to\n   assume that there has been a rollover.  However,
      it is possible that\n   the packet is an earlier one (from 65,535 packets earlier).
      \ It is\n   also possible that the sequence numbers have rolled over multiple\n
      \  times, either forward or backward.  The interpretation becomes more\n   difficult
      when there are large gaps between the sequence numbers,\n   even accounting
      for rollover, and when there are long intervals\n   between received packets.\n
      \  The per-packet accounting technique mandated here is for a\n   participant
      to keep track of the sequence number of the packet most\n   recently received
      from a sender.  For the next packet that arrives\n   from that sender, the sequence
      number MUST be judged to fall no more\n   than 32,768 packets ahead or behind
      the most recent one, whichever\n   choice places it closer.  In the event that
      both choices are equally\n   distant (only possible when the distance is 32,768),
      the choice MUST\n   be the one that does not require a rollover.  Appendix A.1
      presents\n   an algorithm that implements this technique.\n   Each block reports
      on a single RTP data packet source, identified by\n   its SSRC.  The receiver
      that is supplying the report is identified in\n   the header of the RTCP packet.\n
      \  Choice of beginning and ending RTP packet sequence numbers for the\n   trace
      is left to the application.  These values are reported in the\n   block.  The
      last sequence number in the trace MAY differ from the\n   sequence number reported
      on in any accompanying SR or RR report.\n   Note that because of sequence number
      wraparound, the ending sequence\n   number MAY be less than the beginning sequence
      number.  A Loss RLE\n   Report Block MUST NOT be used to report upon a range
      of 65,534 or\n   greater in the sequence number space, as there is no means
      of\n   identifying multiple wraparounds.\n   The trace described by a Loss RLE
      report consists of a sequence of\n   Boolean values, one for each sequence number
      of the trace.  A value\n   of one represents a packet receipt, meaning that
      one or more packets\n   having that sequence number have been received since
      the most recent\n   wraparound of sequence numbers (or since the beginning of
      the RTP\n   session if no wraparound has been judged to have occurred).  A value\n
      \  of zero represents a packet loss, meaning that there has been no\n   packet
      receipt for that sequence number as of the time of the report.\n   If a packet
      with a given sequence number is received after a report\n   of a loss for that
      sequence number, a later Loss RLE report MAY\n   report a packet receipt for
      that sequence number.\n   The encoding itself consists of a series of 16 bit
      units called\n   chunks that describe sequences of packet receipts or losses
      in the\n   trace.  Each chunk either specifies a run length or a bit vector,
      or\n   is a null chunk.  A run length describes between 1 and 16,383 events\n
      \  that are all the same (either all receipts or all losses).  A bit\n   vector
      describes 15 events that may be mixed receipts and losses.  A\n   null chunk
      describes no events, and is used to round out the block to\n   a 32 bit word
      boundary.\n   The mapping from a sequence of lost and received packets into
      a\n   sequence of chunks is not necessarily unique.  For example, the\n   following
      trace covers 45 packets, of which the 22nd and 24th have\n   been lost and the
      others received:\n      1111 1111 1111 1111 1111 1010 1111 1111 1111 1111 1111
      1\n   One way to encode this would be:\n      bit vector 1111 1111 1111 111\n
      \     bit vector 1111 1101 0111 111\n      bit vector 1111 1111 1111 111\n      null
      chunk\n   Another way to encode this would be:\n      run of 21 receipts\n      bit
      vector 0101 1111 1111 111\n      run of 9 receipts\n      null chunk\n   The
      choice of encoding is left to the application.  As part of this\n   freedom
      of choice, applications MAY terminate a series of run length\n   and bit vector
      chunks with a bit vector chunk that runs beyond the\n   sequence number space
      described by the report block.  For example, if\n   the 44th packet in the same
      sequence was lost:\n      1111 1111 1111 1111 1111 1010 1111 1111 1111 1111
      1110 1\n   This could be encoded as:\n      run of 21 receipts\n      bit vector
      0101 1111 1111 111\n      bit vector 1111 1110 1000 000\n      null chunk\n
      \  In this example, the last five bits of the second bit vector describe\n   a
      part of the sequence number space that extends beyond the last\n   sequence
      number in the trace.  These bits have been set to zero.\n   All bits in a bit
      vector chunk that describe a part of the sequence\n   number space that extends
      beyond the last sequence number in the\n   trace MUST be set to zero, and MUST
      be ignored by the receiver.\n   A null packet MUST appear at the end of a Loss
      RLE Report Block if\n   the number of run length plus bit vector chunks is odd.
      \ The null\n   chunk MUST NOT appear in any other context.\n   Caution should
      be used in sending Loss RLE Report Blocks because,\n   even with the compression
      provided by run length encoding, they can\n   easily consume bandwidth out of
      proportion with normal RTCP packets.\n   The block type includes a mechanism,
      called thinning, that allows an\n   application to limit report sizes.\n   A
      thinning value, T, selects a subset of packets within the sequence\n   number
      space: those with sequence numbers that are multiples of 2^T.\n   Packet reception
      and loss reports apply only to those packets.  T can\n   vary between 0 and
      15.  If T is zero, then every packet in the\n   sequence number space is reported
      upon.  If T is fifteen, then one in\n   every 32,768 packets is reported upon.\n
      \  Suppose that the trace just described begins at sequence number\n   13,821.
      \ The last sequence number in the trace is 13,865.  If the\n   trace were to
      be thinned with a thinning value of T=2, then the\n   following sequence numbers
      would be reported upon: 13,824, 13,828,\n   13,832, 13,836, 13,840, 13,844,
      13,848, 13,852, 13,856, 13,860,\n   13,864.  The thinned trace would be as follows:\n
      \     1    1    1    1    1    0    1    1    1    1    0\n   This could be
      encoded as follows:\n      bit vector 1111 1011 1100 000\n      null chunk\n
      \  The last four bits in the bit vector, representing sequence numbers\n   13,868,
      13,872, 13,876, and 13,880, extend beyond the trace and are\n   thus set to
      zero and are ignored by the receiver.  With thinning, the\n   loss of the 22nd
      packet goes unreported because its sequence number,\n   13,842, is not a multiple
      of four.  Packet receipts for all sequence\n   numbers that are not multiples
      of four also go unreported.  However,\n   in this example thinning has permitted
      the Loss RLE Report Block to\n   be shortened by one 32 bit word.\n   Choice
      of the thinning value is left to the application.\n   The Loss RLE Report Block
      has the following format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=1      | rsvd. |   T   |         block length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        SSRC of source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          begin_seq            |             end_seq           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          chunk 1              |             chunk 2           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  :                              ...                              :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          chunk n-1            |             chunk n           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  block type (BT): 8 bits\n         A Loss RLE Report Block is identified by
      the constant 1.\n   rsvd.: 4 bits\n         This field is reserved for future
      definition.  In the absence\n         of such definition, the bits in this field
      MUST be set to zero\n         and MUST be ignored by the receiver.\n   thinning
      (T): 4 bits\n         The amount of thinning performed on the sequence number
      space.\n         Only those packets with sequence numbers 0 mod 2^T are reported\n
      \        on by this block.  A value of 0 indicates that there is no\n         thinning,
      and all packets are reported on.  The maximum\n         thinning is one packet
      in every 32,768 (amounting to two\n         packets within each 16-bit sequence
      space).\n   block length: 16 bits\n         Defined in Section 3.\n   SSRC of
      source: 32 bits\n         The SSRC of the RTP data packet source being reported
      upon by\n         this report block.\n   begin_seq: 16 bits\n         The first
      sequence number that this block reports on.\n   end_seq: 16 bits\n         The
      last sequence number that this block reports on plus one.\n   chunk i: 16 bits\n
      \        There are three chunk types: run length, bit vector, and\n         terminating
      null, defined in the following sections.  If the\n         chunk is all zeroes,
      then it is a terminating null chunk.\n         Otherwise, the left most bit
      of the chunk determines its type:\n         0 for run length and 1 for bit vector.\n"
    - contents:
      - "4.1.1.  Run Length Chunk\n    0                   1\n    0 1 2 3 4 5 6 7
        8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |C|R|        run
        length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   chunk type (C):
        1 bit\n         A zero identifies this as a run length chunk.\n   run type
        (R): 1 bit\n         Zero indicates a run of 0s.  One indicates a run of 1s.\n
        \  run length: 14 bits\n         A value between 1 and 16,383.  The value
        MUST not be zero for a\n         run length chunk (zeroes in both the run
        type and run length\n         fields would make the chunk a terminating null
        chunk).  Run\n         lengths of 15 or less MAY be described with a run length
        chunk\n         despite the fact that they could also be described as part
        of a\n         bit vector chunk.\n"
      title: 4.1.1.  Run Length Chunk
    - contents:
      - "4.1.2.  Bit Vector Chunk\n    0                   1\n    0 1 2 3 4 5 6 7
        8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |C|        bit vector
        \          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   chunk type (C): 1 bit\n
        \        A one identifies this as a bit vector chunk.\n   bit vector: 15 bits\n
        \        The vector is read from left to right, in order of increasing\n         sequence
        number (with the appropriate allowance for\n         wraparound).\n"
      title: 4.1.2.  Bit Vector Chunk
    - contents:
      - "4.1.3.  Terminating Null Chunk\n   This chunk is all zeroes.\n    0                   1\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 4.1.3.  Terminating Null Chunk
    title: 4.1.  Loss RLE Report Block
  - contents:
    - "4.2.  Duplicate RLE Report Block\n   This block type permits per-sequence-number
      reports on duplicates in\n   a source's RTP packet stream.  Such information
      can be used for\n   network diagnosis, and provide an alternative to packet
      losses as a\n   basis for multicast tree topology inference.\n   The Duplicate
      RLE Report Block format is identical to the Loss RLE\n   Report Block format.
      \ Only the interpretation is different, in that\n   the information concerns
      packet duplicates rather than packet losses.\n   The trace to be encoded in
      this case also consists of zeros and ones,\n   but a zero here indicates the
      presence of duplicate packets for a\n   given sequence number, whereas a one
      indicates that no duplicates\n   were received.\n   The existence of a duplicate
      for a given sequence number is\n   determined over the entire reporting period.
      \ For example, if packet\n   number 12,593 arrives, followed by other packets
      with other sequence\n   numbers, the arrival later in the reporting period of
      another packet\n   numbered 12,593 counts as a duplicate for that sequence number.
      \ The\n   duplicate does not need to follow immediately upon the first packet\n
      \  of that number.  Care must be taken that a report does not cover a\n   range
      of 65,534 or greater in the sequence number space.\n   No distinction is made
      between the existence of a single duplicate\n   packet and multiple duplicate
      packets for a given sequence number.\n   Note also that since there is no duplicate
      for a lost packet, a loss\n   is encoded as a one in a Duplicate RLE Report
      Block.\n   The Duplicate RLE Report Block has the following format:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=2      | rsvd. |   T   |         block length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        SSRC of source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          begin_seq            |             end_seq           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          chunk 1              |             chunk 2           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  :                              ...                              :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          chunk n-1            |             chunk n           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  block type (BT): 8 bits\n         A Duplicate RLE Report Block is identified
      by the constant 2.\n   rsvd.: 4 bits\n         This field is reserved for future
      definition.  In the absence\n         of such a definition, the bits in this
      field MUST be set to\n         zero and MUST be ignored by the receiver.\n   thinning
      (T): 4 bits\n         As defined in Section 4.1.\n   block length: 16 bits\n
      \        Defined in Section 3.\n   SSRC of source: 32 bits\n         As defined
      in Section 4.1.\n   begin_seq: 16 bits\n         As defined in Section 4.1.\n
      \  end_seq: 16 bits\n         As defined in Section 4.1.\n   chunk i: 16 bits\n
      \        As defined in Section 4.1.\n"
    title: 4.2.  Duplicate RLE Report Block
  - contents:
    - "4.3.  Packet Receipt Times Report Block\n   This block type permits per-sequence-number
      reports on packet receipt\n   times for a given source's RTP packet stream.
      \ Such information can\n   be used for MINC inference of the topology of the
      multicast tree used\n   to distribute the source's RTP packets, and of the delays
      along the\n   links within that tree.  It can also be used to measure partial
      path\n   characteristics and to model distributions for packet jitter.\n   Packet
      receipt times are expressed in the same units as in the RTP\n   timestamps of
      data packets.  This is so that, for each packet, one\n   can establish both
      the send time and the receipt time in comparable\n   terms.  Note, however,
      that as an RTP sender ordinarily initializes\n   its time to a value chosen
      at random, there can be no expectation\n   that reported send and receipt times
      will differ by an amount equal\n   to the one-way delay between sender and receiver.
      \ The reported times\n   can nonetheless be useful for the purposes mentioned
      above.\n   At least one packet MUST have been received for each sequence number\n
      \  reported upon in this block.  If this block type is used to report\n   receipt
      times for a series of sequence numbers that includes lost\n   packets, several
      blocks are required.  If duplicate packets have been\n   received for a given
      sequence number, and those packets differ in\n   their receipt times, any time
      other than the earliest MUST NOT be\n   reported.  This is to ensure consistency
      among reports.\n   Times reported in RTP timestamp format consume more bits
      than loss or\n   duplicate information, and do not lend themselves to run length\n
      \  encoding.  The use of thinning is encouraged to limit the size of\n   Packet
      Receipt Times Report Blocks.\n   The Packet Receipt Times Report Block has the
      following format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=3      | rsvd. |   T   |         block length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        SSRC of source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          begin_seq            |             end_seq           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Receipt time of packet begin_seq                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Receipt time of packet (begin_seq + 1) mod 65536        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  :                              ...                              :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Receipt time of packet (end_seq - 1) mod 65536          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  block type (BT): 8 bits\n         A Packet Receipt Times Report Block is
      identified by the\n         constant 3.\n   rsvd.: 4 bits\n         This field
      is reserved for future definition.  In the absence\n         of such a definition,
      the bits in this field MUST be set to\n         zero and MUST be ignored by
      the receiver.\n   thinning (T): 4 bits\n         As defined in Section 4.1.\n
      \  block length: 16 bits\n         Defined in Section 3.\n   SSRC of source:
      32 bits\n         As defined in Section 4.1.\n   begin_seq: 16 bits\n         As
      defined in Section 4.1.\n   end_seq: 16 bits\n         As defined in Section
      4.1.\n   Packet i receipt time: 32 bits\n         The receipt time of the packet
      with sequence number i at the\n         receiver.  The modular arithmetic shown
      in the packet format\n         diagram is to allow for sequence number rollover.
      \ It is\n         preferable for the time value to be established at the link\n
      \        layer interface, or in any case as close as possible to the\n         wire
      arrival time.  Units and format are the same as for the\n         timestamp
      in RTP data packets.  As opposed to RTP data packet\n         timestamps, in
      which nominal values may be used instead of\n         system clock values in
      order to convey information useful for\n         periodic playout, the receipt
      times should reflect the actual\n         time as closely as possible.  For
      a session, if the RTP\n         timestamp is chosen at random, the first receipt
      time value\n         SHOULD also be chosen at random, and subsequent timestamps\n
      \        offset from this value.  On the other hand, if the RTP\n         timestamp
      is meant to reflect the reference time at the sender,\n         then the receipt
      time SHOULD be as close as possible to the\n         reference time at the receiver.\n"
    title: 4.3.  Packet Receipt Times Report Block
  - contents:
    - "4.4.  Receiver Reference Time Report Block\n   This block extends RTCP's timestamp
      reporting so that non-senders may\n   also send timestamps.  It recapitulates
      the NTP timestamp fields from\n   the RTCP Sender Report [9, Sec. 6.3.1].  A
      non-sender may estimate\n   its round trip time (RTT) to other participants,
      as proposed in [18],\n   by sending this report block and receiving DLRR Report
      Blocks (see\n   next section) in reply.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=4      |   reserved    |       block length = 2        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |              NTP timestamp, most significant word             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             NTP timestamp, least significant word             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  block type (BT): 8 bits\n         A Receiver Reference Time Report Block
      is identified by the\n         constant 4.\n   reserved: 8 bits\n         This
      field is reserved for future definition.  In the absence\n         of such definition,
      the bits in this field MUST be set to zero\n         and MUST be ignored by
      the receiver.\n   block length: 16 bits\n         The constant 2, in accordance
      with the definition of this field\n         in Section 3.\n   NTP timestamp:
      64 bits\n         Indicates the wallclock time when this block was sent so that\n
      \        it may be used in combination with timestamps returned in DLRR\n         Report
      Blocks (see next section) from other receivers to\n         measure round-trip
      propagation to those receivers.  Receivers\n         should expect that the
      measurement accuracy of the timestamp\n         may be limited to far less than
      the resolution of the NTP\n         timestamp.  The measurement uncertainty
      of the timestamp is not\n         indicated as it may not be known.  A report
      block sender that\n         can keep track of elapsed time but has no notion
      of wallclock\n         time may use the elapsed time since joining the session\n
      \        instead.  This is assumed to be less than 68 years, so the high\n         bit
      will be zero.  It is permissible to use the sampling clock\n         to estimate
      elapsed wallclock time.  A report sender that has\n         no notion of wallclock
      or elapsed time may set the NTP\n         timestamp to zero.\n"
    title: 4.4.  Receiver Reference Time Report Block
  - contents:
    - "4.5.  DLRR Report Block\n   This block extends RTCP's delay since the last
      Sender Report (DLSR)\n   mechanism [9, Sec. 6.3.1] so that non-senders may also
      calculate\n   round trip times, as proposed in [18].  It is termed DLRR for
      delay\n   since the last Receiver Report, and may be sent in response to a\n
      \  Receiver Timestamp Report Block (see previous section) from a\n   receiver
      to allow that receiver to calculate its round trip time to\n   the respondent.
      \ The report consists of one or more 3 word sub-\n   blocks: one sub-block per
      Receiver Report.\n  0                   1                   2                   3\n
      \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      |     BT=5      |   reserved    |         block length          |\n +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      |                 SSRC_1 (SSRC of first receiver)               | sub-\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      block\n |                         last RR (LRR)                         |   1\n
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |                   delay
      since last RR (DLRR)                  |\n +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      |                 SSRC_2 (SSRC of second receiver)              | sub-\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      block\n :                               ...                             :   2\n
      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n   block
      type (BT): 8 bits\n         A DLRR Report Block is identified by the constant
      5.\n   reserved: 8 bits\n         This field is reserved for future definition.
      \ In the absence\n         of such definition, the bits in this field MUST be
      set to zero\n         and MUST be ignored by the receiver.\n   block length:
      16 bits\n         Defined in Section 3.\n   last RR timestamp (LRR): 32 bits\n
      \        The middle 32 bits out of 64 in the NTP timestamp (as explained\n         in
      the previous section), received as part of a Receiver\n         Reference Time
      Report Block from participant SSRC_n.  If no\n         such block has been received,
      the field is set to zero.\n   delay since last RR (DLRR): 32 bits\n         The
      delay, expressed in units of 1/65536 seconds, between\n         receiving the
      last Receiver Reference Time Report Block from\n         participant SSRC_n
      and sending this DLRR Report Block.  If a\n         Receiver Reference Time
      Report Block has yet to be received\n         from SSRC_n, the DLRR field is
      set to zero (or the DLRR is\n         omitted entirely).  Let SSRC_r denote
      the receiver issuing this\n         DLRR Report Block.  Participant SSRC_n can
      compute the round-\n         trip propagation delay to SSRC_r by recording the
      time A when\n         this Receiver Timestamp Report Block is received.  It\n
      \        calculates the total round-trip time A-LRR using the last RR\n         timestamp
      (LRR) field, and then subtracting this field to leave\n         the round-trip
      propagation delay as A-LRR-DLRR.  This is\n         illustrated in [9, Fig.
      2].\n"
    title: 4.5.  DLRR Report Block
  - contents:
    - "4.6.  Statistics Summary Report Block\n   This block reports statistics beyond
      the information carried in the\n   standard RTCP packet format, but is not as
      finely grained as that\n   carried in the report blocks previously described.
      \ Information is\n   recorded about lost packets, duplicate packets, jitter
      measurements,\n   and TTL or Hop Limit values.  Such information can be useful
      for\n   network management.\n   The report block contents are dependent upon
      a series of flag bits\n   carried in the first part of the header.  Not all
      parameters need to\n   be reported in each block.  Flags indicate which are
      and which are\n   not reported.  The fields corresponding to unreported parameters
      MUST\n   be present, but are set to zero.  The receiver MUST ignore any\n   Statistics
      Summary Report Block with a non-zero value in any field\n   flagged as unreported.\n
      \  The Statistics Summary Report Block has the following format:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=6      |L|D|J|ToH|rsvd.|       block length = 9        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        SSRC of source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          begin_seq            |             end_seq           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        lost_packets                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        dup_packets                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         min_jitter                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         max_jitter                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         mean_jitter                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         dev_jitter                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | min_ttl_or_hl | max_ttl_or_hl |mean_ttl_or_hl | dev_ttl_or_hl |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  block type (BT): 8 bits\n         A Statistics Summary Report Block is identified
      by the constant\n         6.\n   loss report flag (L): 1 bit\n         Bit set
      to 1 if the lost_packets field contains a report, 0\n         otherwise.\n   duplicate
      report flag (D): 1 bit\n         Bit set to 1 if the dup_packets field contains
      a report, 0\n         otherwise.\n   jitter flag (J): 1 bit\n         Bit set
      to 1 if the min_jitter, max_jitter, mean_jitter, and\n         dev_jitter fields
      all contain reports, 0 if none of them do.\n   TTL or Hop Limit flag (ToH):
      2 bits\n         This field is set to 0 if none of the fields min_ttl_or_hl,\n
      \        max_ttl_or_hl, mean_ttl_or_hl, or dev_ttl_or_hl contain\n         reports.
      \ If the field is non-zero, then all of these fields\n         contain reports.
      \ The value 1 signifies that they report on\n         IPv4 TTL values.  The
      value 2 signifies that they report on\n         IPv6 Hop Limit values.  The
      value 3 is undefined and MUST NOT\n         be used.\n   rsvd.: 3 bits\n         This
      field is reserved for future definition.  In the absence\n         of such a
      definition, the bits in this field MUST be set to\n         zero and MUST be
      ignored by the receiver.\n   block length: 16 bits\n         The constant 9,
      in accordance with the definition of this field\n         in Section 3.\n   SSRC
      of source: 32 bits\n         As defined in Section 4.1.\n   begin_seq: 16 bits\n
      \        As defined in Section 4.1.\n   end_seq: 16 bits\n         As defined
      in Section 4.1.\n   lost_packets: 32 bits\n         Number of lost packets in
      the above sequence number interval.\n   dup_packets: 32 bits\n         Number
      of duplicate packets in the above sequence number\n         interval.\n   min_jitter:
      32 bits\n         The minimum relative transit time between two packets in the\n
      \        above sequence number interval.  All jitter values are measured\n         as
      the difference between a packet's RTP timestamp and the\n         reporter's
      clock at the time of arrival, measured in the same\n         units.\n   max_jitter:
      32 bits\n         The maximum relative transit time between two packets in the\n
      \        above sequence number interval.\n   mean_jitter: 32 bits\n         The
      mean relative transit time between each two packet series\n         in the above
      sequence number interval, rounded to the nearest\n         value expressible
      as an RTP timestamp.\n   dev_jitter: 32 bits\n         The standard deviation
      of the relative transit time between\n         each two packet series in the
      above sequence number interval.\n   min_ttl_or_hl: 8 bits\n         The minimum
      TTL or Hop Limit value of data packets in the\n         sequence number range.\n
      \  max_ttl_or_hl: 8 bits\n         The maximum TTL or Hop Limit value of data
      packets in the\n         sequence number range.\n   mean_ttl_or_hl: 8 bits\n
      \        The mean TTL or Hop Limit value of data packets in the sequence\n         number
      range, rounded to the nearest integer.\n   dev_ttl_or_hl: 8 bits\n         The
      standard deviation of TTL or Hop Limit values of data\n         packets in the
      sequence number range.\n"
    title: 4.6.  Statistics Summary Report Block
  - contents:
    - "4.7.  VoIP Metrics Report Block\n   The VoIP Metrics Report Block provides
      metrics for monitoring voice\n   over IP (VoIP) calls.  These metrics include
      packet loss and discard\n   metrics, delay metrics, analog metrics, and voice
      quality metrics.\n   The block reports separately on packets lost on the IP
      channel, and\n   those that have been received but then discarded by the receiving\n
      \  jitter buffer.  It also reports on the combined effect of losses and\n   discards,
      as both have equal effect on call quality.\n   In order to properly assess the
      quality of a Voice over IP call, it\n   is desirable to consider the degree
      of burstiness of packet loss\n   [14].  Following a Gilbert-Elliott model [3],
      a period of time,\n   bounded by lost and/or discarded packets with a high rate
      of losses\n   and/or discards, is a \"burst\", and a period of time between
      two\n   bursts is a \"gap\".  Bursts correspond to periods of time during which\n
      \  the packet loss rate is high enough to produce noticeable degradation\n   in
      audio quality.  Gaps correspond to periods of time during which\n   only isolated
      lost packets may occur, and in general these can be\n   masked by packet loss
      concealment.  Delay reports include the transit\n   delay between RTP end points
      and the VoIP end system processing\n   delays, both of which contribute to the
      user perceived delay.\n   Additional metrics include signal, echo, noise, and
      distortion\n   levels.  Call quality metrics include R factors (as described
      by the\n   E Model defined in [6,3]) and mean opinion scores (MOS scores).\n
      \  Implementations MUST provide values for all the fields defined here.\n   For
      certain metrics, if the value is undefined or unknown, then the\n   specified
      default or unknown field value MUST be provided.\n   The block is encoded as
      seven 32-bit words:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=7      |   reserved    |       block length = 8        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        SSRC of source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   loss rate   | discard rate  | burst density |  gap density  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       burst duration          |         gap duration          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     round trip delay          |       end system delay        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | signal level  |  noise level  |     RERL      |     Gmin      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   R factor    | ext. R factor |    MOS-LQ     |    MOS-CQ     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   RX config   |   reserved    |          JB nominal           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          JB maximum           |          JB abs max           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  block type (BT): 8 bits\n         A VoIP Metrics Report Block is identified
      by the constant 7.\n   reserved: 8 bits\n         This field is reserved for
      future definition.  In the absence\n         of such a definition, the bits
      in this field MUST be set to\n         zero and MUST be ignored by the receiver.\n
      \  block length: 16 bits\n         The constant 8, in accordance with the definition
      of this field\n         in Section 3.\n   SSRC of source: 32 bits\n         As
      defined in Section 4.1.\n   The remaining fields are described in the following
      six sections:\n   Packet Loss and Discard Metrics, Delay Metrics, Signal Related\n
      \  Metrics, Call Quality or Transmission Quality Metrics, Configuration\n   Metrics,
      and Jitter Buffer Parameters.\n"
    - contents:
      - "4.7.1.  Packet Loss and Discard Metrics\n   It is very useful to distinguish
        between packets lost by the network\n   and those discarded due to jitter.
        \ Both have equal effect on the\n   quality of the voice stream, however,
        having separate counts helps\n   identify the source of quality degradation.
        \ These fields MUST be\n   populated, and MUST be set to zero if no packets
        have been received.\n   loss rate: 8 bits\n         The fraction of RTP data
        packets from the source lost since the\n         beginning of reception, expressed
        as a fixed point number with\n         the binary point at the left edge of
        the field.  This value is\n         calculated by dividing the total number
        of packets lost (after\n         the effects of applying any error protection
        such as FEC) by\n         the total number of packets expected, multiplying
        the result of\n         the division by 256, limiting the maximum value to
        255 (to\n         avoid overflow), and taking the integer part.  The numbers
        of\n         duplicated packets and discarded packets do not enter into this\n
        \        calculation.  Since receivers cannot be required to maintain\n         unlimited
        buffers, a receiver MAY categorize late-arriving\n         packets as lost.
        \ The degree of lateness that triggers a loss\n         SHOULD be significantly
        greater than that which triggers a\n         discard.\n   discard rate: 8
        bits\n         The fraction of RTP data packets from the source that have
        been\n         discarded since the beginning of reception, due to late or\n
        \        early arrival, under-run or overflow at the receiving jitter\n         buffer.
        \ This value is expressed as a fixed point number with\n         the binary
        point at the left edge of the field.  It is\n         calculated by dividing
        the total number of packets discarded\n         (excluding duplicate packet
        discards) by the total number of\n         packets expected, multiplying the
        result of the division by\n         256, limiting the maximum value to 255
        (to avoid overflow), and\n         taking the integer part.\n"
      title: 4.7.1.  Packet Loss and Discard Metrics
    - contents:
      - "4.7.2.  Burst Metrics\n   A burst is a period during which a high proportion
        of packets are\n   either lost or discarded due to late arrival.  A burst
        is defined, in\n   terms of a value Gmin, as the longest sequence that (a)
        starts with a\n   lost or discarded packet, (b) does not contain any occurrences
        of\n   Gmin or more consecutively received (and not discarded) packets, and\n
        \  (c) ends with a lost or discarded packet.\n   A gap, informally, is a period
        of low packet losses and/or discards.\n   Formally, a gap is defined as any
        of the following: (a) the period\n   from the start of an RTP session to the
        receipt time of the last\n   received packet before the first burst, (b) the
        period from the end\n   of the last burst to either the time of the report
        or the end of the\n   RTP session, whichever comes first, or (c) the period
        of time between\n   two bursts.\n   For the purpose of determining if a lost
        or discarded packet near the\n   start or end of an RTP session is within
        a gap or a burst, it is\n   assumed that the RTP session is preceded and followed
        by at least\n   Gmin received packets, and that the time of the report is
        followed by\n   at least Gmin received packets.\n   A gap has the property
        that any lost or discarded packets within the\n   gap must be preceded and
        followed by at least Gmin packets that were\n   received and not discarded.
        \ This gives a maximum loss/discard rate\n   within a gap of: 1 / (Gmin +
        1).\n   A Gmin value of 16 is RECOMMENDED, as it results in gap\n   characteristics
        that correspond to good quality (i.e., low packet\n   loss rate, a minimum
        distance of 16 received packets between lost\n   packets), and hence differentiates
        nicely between good and poor\n   quality periods.\n   For example, a 1 denotes
        a received packet, 0 a lost packet, and X a\n   discarded packet in the following
        pattern covering 64 packets:\n      11110111111111111111111X111X1011110111111111111111111X111111111\n
        \     |---------gap----------|--burst---|------------gap------------|\n   The
        burst consists of the twelve packets indicated above, starting at\n   a discarded
        packet and ending at a lost packet.  The first gap starts\n   at the beginning
        of the session and the second gap ends at the time\n   of the report.\n   If
        the packet spacing is 10 ms and the Gmin value is the recommended\n   value
        of 16, the burst duration is 120 ms, the burst density 0.33,\n   the gap duration
        230 ms + 290 ms = 520 ms, and the gap density 0.04.\n   This would result
        in reported values as follows (see field\n   descriptions for semantics and
        details on how these are calculated):\n      loss rate             12, which
        corresponds to 5%\n      discard rate          12, which corresponds to 5%\n
        \     burst density         84, which corresponds to 33%\n      gap density
        \          10, which corresponds to 4%\n      burst duration       120, value
        in milliseconds\n      gap duration         520, value in milliseconds\n   burst
        density: 8 bits\n         The fraction of RTP data packets within burst periods
        since the\n         beginning of reception that were either lost or discarded.\n
        \        This value is expressed as a fixed point number with the binary\n
        \        point at the left edge of the field.  It is calculated by\n         dividing
        the total number of packets lost or discarded\n         (excluding duplicate
        packet discards) within burst periods by\n         the total number of packets
        expected within the burst periods,\n         multiplying the result of the
        division by 256, limiting the\n         maximum value to 255 (to avoid overflow),
        and taking the\n         integer part.  This field MUST be populated and MUST
        be set to\n         zero if no packets have been received.\n   gap density:
        8 bits\n         The fraction of RTP data packets within inter-burst gaps
        since\n         the beginning of reception that were either lost or discarded.\n
        \        The value is expressed as a fixed point number with the binary\n
        \        point at the left edge of the field.  It is calculated by\n         dividing
        the total number of packets lost or discarded\n         (excluding duplicate
        packet discards) within gap periods by the\n         total number of packets
        expected within the gap periods,\n         multiplying the result of the division
        by 256, limiting the\n         maximum value to 255 (to avoid overflow), and
        taking the\n         integer part.  This field MUST be populated and MUST
        be set to\n         zero if no packets have been received.\n   burst duration:
        16 bits\n         The mean duration, expressed in milliseconds, of the burst\n
        \        periods that have occurred since the beginning of reception.\n         The
        duration of each period is calculated based upon the\n         packets that
        mark the beginning and end of that period.  It is\n         equal to the timestamp
        of the end packet, plus the duration of\n         the end packet, minus the
        timestamp of the beginning packet.\n         If the actual values are not
        available, estimated values MUST\n         be used.  If there have been no
        burst periods, the burst\n         duration value MUST be zero.\n   gap duration:
        16 bits\n         The mean duration, expressed in milliseconds, of the gap\n
        \        periods that have occurred since the beginning of reception.\n         The
        duration of each period is calculated based upon the packet\n         that
        marks the end of the prior burst and the packet that marks\n         the beginning
        of the subsequent burst.  It is equal to the\n         timestamp of the subsequent
        burst packet, minus the timestamp\n         of the prior burst packet, plus
        the duration of the prior burst\n         packet.  If the actual values are
        not available, estimated\n         values MUST be used.  In the case of a
        gap that occurs at the\n         beginning of reception, the sum of the timestamp
        of the prior\n         burst packet and the duration of the prior burst packet
        are\n         replaced by the reception start time.  In the case of a gap\n
        \        that occurs at the end of reception, the timestamp of the\n         subsequent
        burst packet is replaced by the reception end time.\n         If there have
        been no gap periods, the gap duration value MUST\n         be zero.\n"
      title: 4.7.2.  Burst Metrics
    - contents:
      - "4.7.3.  Delay Metrics\n   For the purpose of the following definitions, the
        RTP interface is\n   the interface between the RTP instance and the voice
        application\n   (i.e., FEC, de-interleaving, de-multiplexing, jitter buffer).
        \ For\n   example, the time delay due to RTP payload multiplexing would be\n
        \  considered part of the voice application or end-system delay, whereas\n
        \  delay due to multiplexing RTP frames within a UDP frame would be\n   considered
        part of the RTP reported delay.  This distinction is\n   consistent with the
        use of RTCP for delay measurements.\n   round trip delay: 16 bits\n         The
        most recently calculated round trip time between RTP\n         interfaces,
        expressed in milliseconds.  This value MAY be\n         measured using RTCP,
        the DLRR method defined in Section 4.5 of\n         this document, where it
        is necessary to convert the units of\n         measurement from NTP timestamp
        values to milliseconds, or other\n         approaches.  If RTCP is used, then
        the reported delay value is\n         the time of receipt of the most recent
        RTCP packet from source\n         SSRC, minus the LSR (last SR) time reported
        in its SR (Sender\n         Report), minus the DLSR (delay since last SR)
        reported in its\n         SR.  A non-zero LSR value is required in order to
        calculate\n         round trip delay.  A value of 0 is permissible; however,
        this\n         field MUST be populated as soon as a delay estimate is\n         available.\n
        \  end system delay: 16 bits\n         The most recently estimated end system
        delay, expressed in\n         milliseconds.  End system delay is defined as
        the sum of the\n         total sample accumulation and encoding delay associated
        with\n         the sending direction and the jitter buffer, decoding, and\n
        \        playout buffer delay associated with the receiving direction.\n         This
        delay MAY be estimated or measured.  This value SHOULD be\n         provided
        in all VoIP metrics reports.  If an implementation is\n         unable to
        provide the data, the value 0 MUST be used.\n   Note that the one way symmetric
        VoIP segment delay may be calculated\n   from the round trip and end system
        delays is as follows; if the round\n   trip delay is denoted, RTD and the
        end system delays associated with\n   the two endpoints are ESD(A) and ESD(B)
        then:\n    one way symmetric voice path delay  =  ( RTD + ESD(A) + ESD(B)
        ) / 2\n"
      title: 4.7.3.  Delay Metrics
    - contents:
      - "4.7.4.  Signal Related Metrics\n   The following metrics are intended to
        provide real time information\n   related to the non-packet elements of the
        voice over IP system to\n   assist with the identification of problems affecting
        call quality.\n   The values identified below must be determined for the received
        audio\n   signal.  The information required to populate these fields may not
        be\n   available in all systems, although it is strongly recommended that\n
        \  this data SHOULD be provided to support problem diagnosis.\n   signal level:
        8 bits\n         The voice signal relative level is defined as the ratio of
        the\n         signal level to a 0 dBm0 reference [10], expressed in decibels\n
        \        as a signed integer in two's complement form.  This is measured\n
        \        only for packets containing speech energy.  The intent of this\n
        \        metric is not to provide a precise measurement of the signal\n         level
        but to provide a real time indication that the signal\n         level may
        be excessively high or low.\n         signal level = 10 Log10 ( rms talkspurt
        power (mW) )\n         A value of 127 indicates that this parameter is unavailable.\n
        \        Typical values should generally be in the -15 to -20 dBm range.\n
        \  noise level: 8 bits\n         The noise level is defined as the ratio of
        the silent period\n         background noise level to a 0 dBm0 reference,
        expressed in\n         decibels as a signed integer in two's complement form.\n
        \        noise level = 10 Log10 ( rms silence power (mW) )\n         A value
        of 127 indicates that this parameter is unavailable.\n   residual echo return
        loss (RERL): 8 bits\n         The residual echo return loss value may be measured
        directly by\n         the VoIP end system's echo canceller or may be estimated
        by\n         adding the echo return loss (ERL) and echo return loss\n         enhancement
        (ERLE) values reported by the echo canceller.\n         RERL(dB) = ERL (dB)
        + ERLE (dB)\n         In the case of a VoIP gateway, the source of echo is
        typically\n         line echo that occurs at 2-4 wire conversion points in
        the\n         network.  This can be in the 8-12 dB range.  A line echo\n         canceler
        can provide an ERLE of 30 dB or more and hence reduce\n         this to 40-50
        dB.  In the case of an IP phone, this could be\n         acoustic coupling
        between handset speaker and microphone or\n         residual acoustic echo
        from speakerphone operation, and may\n         more correctly be termed terminal
        coupling loss (TCL).  A\n         typical handset would result in 40-50 dB
        of echo loss due to\n         acoustic feedback.\n         Examples:\n         -
        \ IP gateway connected to circuit switched network with 2 wire\n            loop.
        \ Without echo cancellation, typical 2-4 wire converter\n            ERL of
        12 dB.  RERL = ERL + ERLE = 12 + 0 = 12 dB.\n         -  IP gateway connected
        to circuit switched network with 2 wire\n            loop.  With echo canceler
        that improves echo by 30 dB.\n            RERL = ERL + ERLE = 12 + 30 = 42
        dB.\n         -  IP phone with conventional handset.  Acoustic coupling from\n
        \           handset speaker to microphone (terminal coupling loss) is\n            typically
        40 dB.  RERL = TCL = 40 dB.\n         If we denote the local end of the VoIP
        path as A and the remote\n         end as B, and if the sender loudness rating
        (SLR) and receiver\n         loudness rating (RLR) are known for A (default
        values 8 dB and\n         2 dB respectively), then the echo loudness level
        at end A\n         (talker echo loudness rating or TELR) is given by:\n         TELR(A)
        = SRL(A) + ERL(B) + ERLE(B) + RLR(A)\n         TELR(B) = SRL(B) + ERL(A) +
        ERLE(A) + RLR(B)\n         Hence, in order to incorporate echo into a voice
        quality\n         estimate at the A end of a VoIP connection, it is desirable
        to\n         send the ERL + ERLE value from B to A using a format such as\n
        \        RTCP XR.\n         Echo related information may not be available
        in all VoIP end\n         systems.  As echo does have a significant effect
        on\n         conversational quality, it is recommended that estimated values\n
        \        for echo return loss and terminal coupling loss be provided (if\n
        \        sensible estimates can be reasonably determined).\n         Typical
        values for end systems are given below to provide\n         guidance:\n         -
        \ IP Phone with handset: typically 45 dB.\n         -  PC softphone or speakerphone:
        extremely variable, consider\n            reporting \"undefined\" (127).\n
        \        -  IP gateway with line echo canceller: typically has ERL and\n            ERLE
        available.\n         -  IP gateway without line echo canceller: frequently
        a source\n            of echo related problems, consider reporting either
        a low\n            value (12 dB) or \"undefined\" (127).\n   Gmin\n         See
        Configuration Parameters (Section 4.7.6, below).\n"
      title: 4.7.4.  Signal Related Metrics
    - contents:
      - "4.7.5.  Call Quality or Transmission Quality Metrics\n   The following metrics
        are direct measures of the call quality or\n   transmission quality, and incorporate
        the effects of codec type,\n   packet loss, discard, burstiness, delay etc.
        \ These metrics may not\n   be available in all systems, however, they SHOULD
        be provided in\n   order to support problem diagnosis.\n   R factor: 8 bits\n
        \        The R factor is a voice quality metric describing the segment\n         of
        the call that is carried over this RTP session.  It is\n         expressed
        as an integer in the range 0 to 100, with a value of\n         94 corresponding
        to \"toll quality\" and values of 50 or less\n         regarded as unusable.
        \ This metric is defined as including the\n         effects of delay, consistent
        with ITU-T G.107 [6] and ETSI TS\n         101 329-5 [3].\n         A value
        of 127 indicates that this parameter is unavailable.\n         Values other
        than 127 and the valid range defined above MUST\n         not be sent and
        MUST be ignored by the receiving system.\n   ext. R factor: 8 bits\n         The
        external R factor is a voice quality metric describing the\n         segment
        of the call that is carried over a network segment\n         external to the
        RTP segment, for example a cellular network.\n         Its values are interpreted
        in the same manner as for the RTP R\n         factor.  This metric is defined
        as including the effects of\n         delay, consistent with ITU-T G.107 [6]
        and ETSI TS 101 329-5\n         [3], and relates to the outward voice path
        from the Voice over\n         IP termination for which this metrics block
        applies.\n         A value of 127 indicates that this parameter is unavailable.\n
        \        Values other than 127 and the valid range defined above MUST\n         not
        be sent and MUST be ignored by the receiving system.\n   Note that an overall
        R factor may be estimated from the RTP segment R\n   factor and the external
        R factor, as follows:\n   R total = RTP R factor + ext. R factor - 94\n   MOS-LQ:
        8 bits\n         The estimated mean opinion score for listening quality (MOS-LQ)\n
        \        is a voice quality metric on a scale from 1 to 5, in which 5\n         represents
        excellent and 1 represents unacceptable.  This\n         metric is defined
        as not including the effects of delay and can\n         be compared to MOS
        scores obtained from listening quality (ACR)\n         tests.  It is expressed
        as an integer in the range 10 to 50,\n         corresponding to MOS x 10.
        \ For example, a value of 35 would\n         correspond to an estimated MOS
        score of 3.5.\n         A value of 127 indicates that this parameter is unavailable.\n
        \        Values other than 127 and the valid range defined above MUST\n         not
        be sent and MUST be ignored by the receiving system.\n   MOS-CQ: 8 bits\n
        \        The estimated mean opinion score for conversational quality\n         (MOS-CQ)
        is defined as including the effects of delay and other\n         effects that
        would affect conversational quality.  The metric\n         may be calculated
        by converting an R factor determined\n         according to ITU-T G.107 [6]
        or ETSI TS 101 329-5 [3] into an\n         estimated MOS using the equation
        specified in G.107.  It is\n         expressed as an integer in the range
        10 to 50, corresponding to\n         MOS x 10, as for MOS-LQ.\n         A
        value of 127 indicates that this parameter is unavailable.\n         Values
        other than 127 and the valid range defined above MUST\n         not be sent
        and MUST be ignored by the receiving system.\n"
      title: 4.7.5.  Call Quality or Transmission Quality Metrics
    - contents:
      - "4.7.6.  Configuration Parameters\n   Gmin: 8 bits\n         The gap threshold.
        \ This field contains the value used for this\n         report block to determine
        if a gap exists.  The recommended\n         value of 16 corresponds to a burst
        period having a minimum\n         density of 6.25% of lost or discarded packets,
        which may cause\n         noticeable degradation in call quality; during gap
        periods, if\n         packet loss or discard occurs, each lost or discarded
        packet\n         would be preceded by and followed by a sequence of at least
        16\n         received non-discarded packets.  Note that lost or discarded\n
        \        packets that occur within Gmin packets of a report being\n         generated
        may be reclassified as part of a burst or gap in\n         later reports.
        \ ETSI TS 101 329-5 [3] defines a computationally\n         efficient algorithm
        for measuring burst and gap density using a\n         packet loss/discard
        event driven approach.  This algorithm is\n         reproduced in Appendix
        A.2 of the present document.  Gmin MUST\n         not be zero, MUST be provided,
        and MUST remain constant across\n         VoIP Metrics report blocks for the
        duration of the RTP session.\n   receiver configuration byte (RX config):
        8 bits\n         This byte consists of the following fields:\n             0
        1 2 3 4 5 6 7\n            +-+-+-+-+-+-+-+-+\n            |PLC|JBA|JB rate|\n
        \           +-+-+-+-+-+-+-+-+\n   packet loss concealment (PLC): 2 bits\n
        \        Standard (11) / enhanced (10) / disabled (01) / unspecified\n         (00).
        \ When PLC = 11, then a simple replay or interpolation\n         algorithm
        is being used to fill-in the missing packet; this\n         approach is typically
        able to conceal isolated lost packets at\n         low packet loss rates.
        \ When PLC = 10, then an enhanced\n         interpolation algorithm is being
        used; algorithms of this type\n         are able to conceal high packet loss
        rates effectively.  When\n         PLC = 01, then silence is being inserted
        in place of lost\n         packets.  When PLC = 00, then no information is
        available\n         concerning the use of PLC; however, for some codecs this
        may be\n         inferred.\n   jitter buffer adaptive (JBA): 2 bits\n         Adaptive
        (11) / non-adaptive (10) / reserved (01)/ unknown\n         (00).  When the
        jitter buffer is adaptive, then its size is\n         being dynamically adjusted
        to deal with varying levels of\n         jitter.  When non-adaptive, the jitter
        buffer size is\n         maintained at a fixed level.  When either adaptive
        or non-\n         adaptive modes are specified, then the jitter buffer size\n
        \        parameters below MUST be specified.\n   jitter buffer rate (JB rate):
        4 bits\n         J = adjustment rate (0-15).  This represents the implementation\n
        \        specific adjustment rate of a jitter buffer in adaptive mode.\n         This
        parameter is defined in terms of the approximate time\n         taken to fully
        adjust to a step change in peak to peak jitter\n         from 30 ms to 100
        ms such that:\n         adjustment time = 2 * J * frame size (ms)\n         This
        parameter is intended only to provide a guide to the\n         degree of \"aggressiveness\"
        of an adaptive jitter buffer and may\n         be estimated.  A value of 0
        indicates that the adjustment time\n         is unknown for this implementation.\n
        \  reserved: 8 bits\n         This field is reserved for future definition.
        \ In the absence\n         of such a definition, the bits in this field MUST
        be set to\n         zero and MUST be ignored by the receiver.\n"
      title: 4.7.6.  Configuration Parameters
    - contents:
      - "4.7.7.  Jitter Buffer Parameters\n   The values reported in these fields
        SHOULD be the most recently\n   obtained values at the time of reporting.\n
        \  jitter buffer nominal delay (JB nominal): 16 bits\n         This is the
        current nominal jitter buffer delay in\n         milliseconds, which corresponds
        to the nominal jitter buffer\n         delay for packets that arrive exactly
        on time.  This parameter\n         MUST be provided for both fixed and adaptive
        jitter buffer\n         implementations.\n   jitter buffer maximum delay (JB
        maximum): 16 bits\n         This is the current maximum jitter buffer delay
        in milliseconds\n         which corresponds to the earliest arriving packet
        that would\n         not be discarded.  In simple queue implementations this
        may\n         correspond to the nominal size.  In adaptive jitter buffer\n
        \        implementations, this value may dynamically vary up to JB abs\n         max
        (see below).  This parameter MUST be provided for both\n         fixed and
        adaptive jitter buffer implementations.\n   jitter buffer absolute maximum
        delay (JB abs max): 16 bits\n         This is the absolute maximum delay in
        milliseconds that the\n         adaptive jitter buffer can reach under worst
        case conditions.\n         If this value exceeds 65535 milliseconds, then
        this field SHALL\n         convey the value 65535.  This parameter MUST be
        provided for\n         adaptive jitter buffer implementations and its value
        MUST be\n         set to JB maximum for fixed jitter buffer implementations.\n"
      title: 4.7.7.  Jitter Buffer Parameters
    title: 4.7.  VoIP Metrics Report Block
  title: 4.  Extended Report Blocks
- contents:
  - "5.  SDP Signaling\n   This section defines Session Description Protocol (SDP)
    [4] signaling\n   for XR blocks that can be employed by applications that utilize
    SDP.\n   This signaling is defined to be used either by applications that\n   implement
    the SDP Offer/Answer model [8] or by applications that use\n   SDP to describe
    media and transport configurations in connection\n   with such protocols as the
    Session Announcement Protocol (SAP) [15]\n   or the Real Time Streaming Protocol
    (RTSP) [17].  There exist other\n   potential signaling methods that are not defined
    here.\n   The XR blocks MAY be used without prior signaling.  This is\n   consistent
    with the rules governing other RTCP packet types, as\n   described in [9].  An
    example in which signaling would not be used is\n   an application that always
    requires the use of one or more XR blocks.\n   However, for applications that
    are configured at session initiation,\n   the use of some type of signaling is
    recommended.\n   Note that, although the use of SDP signaling for XR blocks may
    be\n   optional, if used, it MUST be used as defined here.  If SDP signaling\n
    \  is used in an environment where XR blocks are only implemented by\n   some
    fraction of the participants, the ones not implementing the XR\n   blocks will
    ignore the SDP attribute.\n"
  - contents:
    - "5.1.  The SDP Attribute\n   This section defines one new SDP attribute \"rtcp-xr\"
      that can be used\n   to signal participants in a media session that they should
      use the\n   specified XR blocks.  This attribute can be easily extended in the\n
      \  future with new parameters to cover any new report blocks.\n   The RTCP XR
      blocks SDP attribute is defined below in Augmented\n   Backus-Naur Form (ABNF)
      [2].  It is both a session and a media level\n   attribute.  When specified
      at session level, it applies to all media\n   level blocks in the session.  Any
      media level specification MUST\n   replace a session level specification, if
      one is present, for that\n   media block.\n    rtcp-xr-attrib = \"a=\" \"rtcp-xr\"
      \":\" [xr-format *(SP xr-format)] CRLF\n     xr-format = pkt-loss-rle\n               /
      pkt-dup-rle\n               / pkt-rcpt-times\n               / rcvr-rtt\n               /
      stat-summary\n               / voip-metrics\n               / format-ext\n     pkt-loss-rle
      \  = \"pkt-loss-rle\" [\"=\" max-size]\n     pkt-dup-rle    = \"pkt-dup-rle\"
      [\"=\" max-size]\n     pkt-rcpt-times = \"pkt-rcpt-times\" [\"=\" max-size]\n
      \    rcvr-rtt       = \"rcvr-rtt\" \"=\" rcvr-rtt-mode [\":\" max-size]\n     rcvr-rtt-mode
      \ = \"all\"\n                    / \"sender\"\n     stat-summary   = \"stat-summary\"
      [\"=\" stat-flag *(\",\" stat-flag)]\n     stat-flag      = \"loss\"\n                    /
      \"dup\"\n                    / \"jitt\"\n                    / \"TTL\"\n                    /
      \"HL\"\n     voip-metrics   = \"voip-metrics\"\n     max-size       = 1*DIGIT
      ; maximum block size in octets\n     DIGIT          = %x30-39\n     format-ext
      \    = non-ws-string\n     non-ws-string  = 1*(%x21-FF)\n     CRLF           =
      %d13.10\n   The \"rtcp-xr\" attribute contains zero, one, or more XR block related\n
      \  parameters.  Each parameter signals functionality for an XR block, or\n   a
      group of XR blocks.  The attribute is extensible so that parameters\n   can
      be defined for any future XR block (and a parameter should be\n   defined for
      every future block).\n   Each \"rtcp-xr\" parameter belongs to one of two categories.
      \ The first\n   category, the unilateral parameters, are for report blocks that\n
      \  simply report on the RTP stream and related metrics.  The second\n   category,
      collaborative parameters, are for XR blocks that involve\n   actions by more
      than one party in order to carry out their functions.\n   Round trip time (RTT)
      measurement is an example of collaborative\n   functionality.  An RTP data packet
      receiver sends a Receiver\n   Reference Time Report Block (Section 4.4).  A
      participant that\n   receives this block sends a DLRR Report Block (Section
      4.5) in\n   response, allowing the receiver to calculate its RTT to that\n   participant.
      \ As this example illustrates, collaborative\n   functionality may be implemented
      by two or more different XR blocks.\n   The collaborative functionality of several
      XR blocks may be governed\n   by a single \"rtcp-xr\" parameter.\n   For the
      unilateral category, this document defines the following\n   parameters.  The
      parameter names and their corresponding XR formats\n   are as follows:\n      Parameter
      name    XR block (block type and name)\n      --------------    ------------------------------------\n
      \     pkt-loss-rle      1  Loss RLE Report Block\n      pkt-dup-rle       2
      \ Duplicate RLE Report Block\n      pkt-rcpt-times    3  Packet Receipt Times
      Report Block\n      stat-summary      6  Statistics Summary Report Block\n      voip-metrics
      \     7  VoIP Metrics Report Block\n   The \"pkt-loss-rle\", \"pkt-dup-rle\",
      and \"pkt-rcpt-times\" parameters\n   MAY specify an integer value.  This value
      indicates the largest size\n   the whole report block SHOULD have in octets.
      \ This shall be seen as\n   an indication that thinning shall be applied if
      necessary to meet the\n   target size.\n   The \"stat-summary\" parameter contains
      a list indicating which fields\n   SHOULD be included in the Statistics Summary
      report blocks that are\n   sent.  The list is a comma separated list, containing
      one or more\n   field indicators.  The space character (0x20) SHALL NOT be present\n
      \  within the list.  Field indicators represent the flags defined in\n   Section
      4.6.  The field indicators and their respective flags are as\n   follows:\n
      \     Indicator    Flag\n      ---------    ---------------------------\n      loss
      \        loss report flag (L)\n      dup          duplicate report flag (D)\n
      \     jitt         jitter flag (J)\n      TTL          TTL or Hop Limit flag
      (ToH)\n      HL           TTL or Hop Limit flag (ToH)\n   For \"loss\", \"dup\",
      and \"jitt\", the presence of the indicator\n   indicates that the corresponding
      flag should be set to 1 in the\n   Statistics Summary report blocks that are
      sent.  The presence of\n   \"TTL\" indicates that the corresponding flag should
      be set to 1.  The\n   presence of \"HL\" indicates that the corresponding flag
      should be set\n   to 2.  The indicators \"TTL\" and \"HL\" MUST NOT be signaled
      together.\n   Blocks in the collaborative category are classified as initiator\n
      \  blocks or response blocks.  Signaling SHOULD indicate which\n   participants
      are required to respond to the initiator block.  A party\n   that wishes to
      receive response blocks from those participants can\n   trigger this by sending
      an initiator block.\n   The collaborative category currently consists only of
      one\n   functionality, namely the RTT measurement mechanism for RTP data\n   receivers.
      \ The collective functionality of the Receiver Reference\n   Time Report Block
      and DLRR Report Block is represented by the \"rcvr-\n   rtt\" parameter.  This
      parameter takes as its arguments a mode value\n   and, optionally, a maximum
      size for the DLRR report block.  The mode\n   value \"all\" indicates that both
      RTP data senders and data receivers\n   MAY send DLRR blocks, while the mode
      value \"sender\" indicates that\n   only active RTP senders MAY send DLRR blocks,
      i.e., non RTP senders\n   SHALL NOT send DLRR blocks.  If a maximum size in
      octets is included,\n   any DLRR Report Blocks that are sent SHALL NOT exceed
      the specified\n   size.  If size limitations mean that a DLRR Report Block sender\n
      \  cannot report in one block upon all participants from which it has\n   received
      a Receiver Reference Time Report Block then it SHOULD report\n   on participants
      in a round robin fashion across several report\n   intervals.\n   The \"rtcp-xr\"
      attributes parameter list MAY be empty.  This is useful\n   in cases in which
      an application needs to signal that it understands\n   the SDP signaling but
      does not wish to avail itself of XR\n   functionality.  For example, an application
      in a SIP controlled\n   session could signal that it wishes to stop using all
      XR blocks by\n   removing all applicable SDP parameters in a re-INVITE message
      that it\n   sends.  If XR blocks are not to be used at all from the beginning
      of\n   a session, it is RECOMMENDED that the \"rtcp-xr\" attribute not be\n
      \  supplied at all.\n   When the \"rtcp-xr\" attribute is present, participants
      SHOULD NOT send\n   XR blocks other than the ones indicated by the parameters.
      \ This\n   means that inclusion of a \"rtcp-xr\" attribute without any parameters\n
      \  tells a participant that it SHOULD NOT send any XR blocks at all.\n   The
      purpose is to conserve bandwidth.  This is especially important\n   when collaborative
      parameters are applied to a large multicast group:\n   the sending of an initiator
      block could potentially trigger responses\n   from all participants.  There
      are, however, contexts in which it\n   makes sense to send an XR block in the
      absence of a parameter\n   signaling its use.  For instance, an application
      might be designed so\n   as to send certain report blocks without negotiation,
      while using SDP\n   signaling to negotiate the use of other blocks.\n"
    title: 5.1.  The SDP Attribute
  - contents:
    - "5.2.  Usage in Offer/Answer\n   In the Offer/Answer context [8], the interpretation
      of SDP signaling\n   for XR packets depends upon the direction attribute that
      is signaled:\n   \"recvonly\", \"sendrecv\", or \"sendonly\" [4].  If no direction
      attribute\n   is supplied, then \"sendrecv\" is assumed.  This section applies
      only\n   to unicast media streams, except where noted.  Discussion of\n   unilateral
      parameters is followed by discussion of collaborative\n   parameters in this
      section.\n   For \"sendonly\" and \"sendrecv\" media stream offers that specify\n
      \  unilateral \"rtcp-xr\" attribute parameters, the answerer SHOULD send\n   the
      corresponding XR blocks.  For \"sendrecv\" offers, the answerer MAY\n   include
      the \"rtcp-xr\" attribute in its response, and specify any\n   unilateral parameters
      in order to request that the offerer send the\n   corresponding XR blocks.  The
      offerer SHOULD send these blocks.\n   For \"recvonly\" media stream offers,
      the offerer's use of the \"rtcp-\n   xr\" attribute in connection with unilateral
      parameters indicates that\n   the offerer is capable of sending the corresponding
      XR blocks.  If\n   the answerer responds with an \"rtcp-xr\" attribute, the
      offerer SHOULD\n   send XR blocks for each specified unilateral parameter that
      was in\n   its offer.\n   For multicast media streams, the inclusion of an \"rtcp-xr\"
      attribute\n   with unilateral parameters means that every media recipient SHOULD\n
      \  send the corresponding XR blocks.\n   An SDP offer with a collaborative parameter
      declares the offerer\n   capable of receiving the corresponding initiator and
      replying with\n   the appropriate responses.  For example, an offer that specifies
      the\n   \"rcvr-rtt\" parameter means that the offerer is prepared to receive\n
      \  Receiver Reference Time Report Blocks and to send DLRR Report Blocks.\n   An
      offer of a collaborative parameter means that the answerer MAY\n   send the
      initiator, and, having received the initiator, the offerer\n   SHOULD send the
      responses.\n   There are exceptions to the rule that an offerer of a collaborative\n
      \  parameter should send responses.  For instance, the collaborative\n   parameter
      might specify a mode that excludes the offerer; or\n   congestion control or
      maximum transmission unit considerations might\n   militate against the offerer's
      response.\n   By including a collaborative parameter in its answer, the answerer\n
      \  declares its ability to receive initiators and to send responses.\n   The
      offerer MAY then send initiators, to which the answerer SHOULD\n   reply with
      responses.  As for the offer of a collaborative parameter,\n   there are exceptions
      to the rule that the answerer should reply.\n   When making an SDP offer of
      a collaborative parameter for a multicast\n   media stream, the offerer SHOULD
      specify which participants are to\n   respond to a received initiator.  A participant
      that is not specified\n   SHOULD NOT send responses.  Otherwise, undue bandwidth
      might be\n   consumed.  The offer indicates that each participant that is\n
      \  specified SHOULD respond if it receives an initiator.  It also\n   indicates
      that a specified participant MAY send an initiator block.\n   An SDP answer
      for a multicast media stream SHOULD include all\n   collaborative parameters
      that are present in the offer and that are\n   supported by the answerer.  It
      SHOULD NOT include any collaborative\n   parameter that is absent from the offer.\n
      \  If a participant receives an SDP offer and understands the \"rtcp-xr\"\n
      \  attribute but does not wish to implement XR functionality offered,\n   its
      answer SHOULD include an \"rtcp-xr\" attribute without parameters.\n   By doing
      so, the party declares that, at a minimum, is capable of\n   understanding the
      signaling.\n"
    title: 5.2.  Usage in Offer/Answer
  - contents:
    - "5.3.  Usage Outside of Offer/Answer\n   SDP can be employed outside of the
      Offer/Answer context, for instance\n   for multimedia sessions that are announced
      through the Session\n   Announcement Protocol (SAP) [15], or streamed through
      the Real Time\n   Streaming Protocol (RTSP) [17].  The signaling model is simpler,
      as\n   the sender does not negotiate parameters, but the functionality\n   expected
      from specifying the \"rtcp-xr\" attribute is the same as in\n   Offer/Answer.\n
      \  When a unilateral parameter is specified for the \"rtcp-xr\" attribute\n
      \  associated with a media stream, the receiver of that stream SHOULD\n   send
      the corresponding XR block.  When a collaborative parameter is\n   specified,
      only the participants indicated by the mode value in the\n   collaborative parameter
      are concerned.  Each such participant that\n   receives an initiator block SHOULD
      send the corresponding response\n   block.  Each such participant MAY also send
      initiator blocks.\n"
    title: 5.3.  Usage Outside of Offer/Answer
  title: 5.  SDP Signaling
- contents:
  - "6.  IANA Considerations\n   This document defines a new RTCP packet type, the
    Extended Report\n   (XR) type, within the existing Internet Assigned Numbers Authority\n
    \  (IANA) registry of RTP RTCP Control Packet Types.  This document also\n   defines
    a new IANA registry: the registry of RTCP XR Block Types.\n   Within this new
    registry, this document defines an initial set of\n   seven block types and describes
    how the remaining types are to be\n   allocated.\n   Further, this document defines
    a new SDP attribute, \"rtcp-xr\", within\n   the existing IANA registry of SDP
    Parameters.  It defines a new IANA\n   registry, the registry of RTCP XR SDP Parameters,
    and an initial set\n   of six parameters, and describes how additional parameters
    are to be\n   allocated.\n"
  - contents:
    - "6.1.  XR Packet Type\n   The XR packet type defined by this document is registered
      with the\n   IANA as packet type 207 in the registry of RTP RTCP Control Packet\n
      \  types (PT).\n"
    title: 6.1.  XR Packet Type
  - contents:
    - "6.2.  RTCP XR Block Type Registry\n   This document creates an IANA registry
      called the RTCP XR Block Type\n   Registry to cover the name space of the Extended
      Report block type\n   (BT) field specified in Section 3.  The BT field contains
      eight bits,\n   allowing 256 values.  The RTCP XR Block Type Registry is to
      be\n   managed by the IANA according to the Specification Required policy of\n
      \  RFC 2434 [7].  Future specifications SHOULD attribute block type\n   values
      in strict numeric order following the values attributed in\n   this document:\n
      \     BT  name\n      --  ----\n       1  Loss RLE Report Block\n       2  Duplicate
      RLE Report Block\n       3  Packet Receipt Times Report Block\n       4  Receiver
      Reference Time Report Block\n       5  DLRR Report Block\n       6  Statistics
      Summary Report Block\n       7  VoIP Metrics Report Block\n      The BT value
      255 is reserved for future extensions.\n   Furthermore, future specifications
      SHOULD avoid the value 0.  Doing\n   so facilitates packet validity checking,
      since an all-zeros field\n   might commonly be found in an ill-formed packet.\n
      \  Any registration MUST contain the following information:\n   -  Contact information
      of the one doing the registration, including\n      at least name, address,
      and email.\n   -  The format of the block type being registered, consistent
      with the\n      extended report block format described in Section 3.\n   -  A
      description of what the block type represents and how it shall\n      be interpreted,
      detailing this information for each of its fields.\n"
    title: 6.2.  RTCP XR Block Type Registry
  - contents:
    - "6.3.  The \"rtcp-xr\" SDP Attribute\n   The SDP attribute \"rtcp-xr\" defined
      by this document is registered\n   with the IANA registry of SDP Parameters
      as follows:\n   SDP Attribute (\"att-field\"):\n     Attribute name:     rtcp-xr\n
      \    Long form:          RTP Control Protocol Extended Report Parameters\n     Type
      of name:       att-field\n     Type of attribute:  session and media level\n
      \    Subject to charset: no\n     Purpose:            see Section 5 of this
      document\n     Reference:          this document\n     Values:             see
      this document and registrations below\n   The attribute has an extensible parameter
      field and therefore a\n   registry for these parameters is required.  This document
      creates an\n   IANA registry called the RTCP XR SDP Parameters Registry.  It\n
      \  contains the six parameters defined in Section 5.1: \"pkt-loss-rle\",\n   \"pkt-dup-rle\",
      \"pkt-rcpt-times\", \"stat-summary\", \"voip-metrics\", and\n   \"recv-rtt\".\n
      \  Additional parameters are to be added to this registry in accordance\n   with
      the Specification Required policy of RFC 2434 [7].  Any\n   registration MUST
      contain the following information:\n   -  Contact information of the one doing
      the registration, including\n      at least name, address, and email.\n   -
      \ An Augmented Backus-Naur Form (ABNF) [2] definition of the\n      parameter,
      in accordance with the \"format-ext\" definition of\n      Section 5.1.\n   -
      \ A description of what the parameter represents and how it shall be\n      interpreted,
      both normally and in Offer/Answer.\n"
    title: 6.3.  The "rtcp-xr" SDP Attribute
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   This document extends the RTCP reporting mechanism.
    \ The security\n   considerations that apply to RTCP reports [9, Appendix B] also
    apply\n   to XR reports.  This section details the additional security\n   considerations
    that apply to the extensions.\n   The extensions introduce heightened confidentiality
    concerns.\n   Standard RTCP reports contain a limited number of summary statistics.\n
    \  The information contained in XR reports is both more detailed and\n   more
    extensive (covering a larger number of parameters).  The per-\n   packet report
    blocks and the VoIP Metrics Report Block provide\n   examples.\n   The per-packet
    information contained in Loss RLE, Duplicate RLE, and\n   Packet Receipt Times
    Report Blocks facilitates multicast inference of\n   network characteristics (MINC)
    [11].  Such inference can reveal the\n   gross topology of a multicast distribution
    tree, as well as\n   parameters, such as the loss rates and delays, along paths
    between\n   branching points in that tree.  Such information might be considered\n
    \  sensitive to autonomous system administrators.\n   The VoIP Metrics Report
    Block provides information on the quality of\n   ongoing voice calls.  Though
    such information might be carried in an\n   application specific format in standard
    RTP sessions, making it\n   available in a standard format here makes it more
    available to\n   potential eavesdroppers.\n   No new mechanisms are introduced
    in this document to ensure\n   confidentiality.  Encryption procedures, such as
    those being\n   suggested for a Secure RTCP (SRTCP) [12] at the time that this\n
    \  document was written, can be used when confidentiality is a concern\n   to
    end hosts.  Given that RTCP traffic can be encrypted by the end\n   hosts, autonomous
    systems must be prepared for the fact that certain\n   aspects of their network
    topology can be revealed.\n   Any encryption or filtering of XR report blocks
    entails a loss of\n   monitoring information to third parties.  For example, a
    network that\n   establishes a tunnel to encrypt VoIP Report Blocks denies that\n
    \  information to the service providers traversed by the tunnel.  The\n   service
    providers cannot then monitor or respond to the quality of\n   the VoIP calls
    that they carry, potentially creating problems for the\n   network's users.  As
    a default, XR packets should not be encrypted or\n   filtered.\n   The extensions
    also make certain denial of service attacks easier.\n   This is because of the
    potential to create RTCP packets much larger\n   than average with the per packet
    reporting capabilities of the Loss\n   RLE, Duplicate RLE, and Timestamp Report
    Blocks.  Because of the\n   automatic bandwidth adjustment mechanisms in RTCP,
    if some session\n   participants are sending large RTCP packets, all participants
    will\n   see their RTCP reporting intervals lengthened, meaning they will be\n
    \  able to report less frequently.  To limit the effects of large\n   packets,
    even in the absence of denial of service attacks,\n   applications SHOULD place
    an upper limit on the size of the XR report\n   blocks they employ.  The \"thinning\"
    techniques described in Section\n   4.1 permit the packet-by-packet report blocks
    to adhere to a\n   predefined size limit.\n"
  - 'A.  Algorithms

    '
  - contents:
    - "A.1.  Sequence Number Interpretation\n   This is the algorithm suggested by
      Section 4.1 for keeping track of\n   the sequence numbers from a given sender.
      \ It implements the\n   accounting practice required for the generation of Loss
      RLE Report\n   Blocks.\n   This algorithm keeps track of 16 bit sequence numbers
      by translating\n   them into a 32 bit sequence number space.  The first packet
      received\n   from a source is considered to have arrived roughly in the middle
      of\n   that space.  Each packet that follows is placed either ahead of or\n
      \  behind the prior one in this 32 bit space, depending upon which\n   choice
      would place it closer (or, in the event of a tie, which choice\n   would not
      require a rollover in the 16 bit sequence number).\n   // The reference sequence
      number is an extended sequence number\n   // that serves as the basis for determining
      whether a new 16 bit\n   // sequence number comes earlier or later in the 32
      bit sequence\n   // space.\n   u_int32 _src_ref_seq;\n   bool    _uninitialized_src_ref_seq;\n
      \  // Place seq into a 32-bit sequence number space based upon a\n   // heuristic
      for its most likely location.\n   u_int32 extend_seq(const u_int16 seq) {\n
      \          u_int32 extended_seq, seq_a, seq_b, diff_a, diff_b;\n           if(_uninitialized_src_ref_seq)
      {\n                   // This is the first sequence number received.  Place\n
      \                  // it in the middle of the extended sequence number\n                   //
      space.\n                   _src_ref_seq                = seq | 0x80000000u;\n
      \                  _uninitialized_src_ref_seq  = false;\n                   extended_seq
      \               = _src_ref_seq;\n           }\n           else {\n                   //
      Prior sequence numbers have been received.\n                   // Propose two
      candidates for the extended sequence\n                   // number: seq_a is
      without wraparound, seq_b with\n                   // wraparound.\n                   seq_a
      = seq | (_src_ref_seq & 0xFFFF0000u);\n                   if(_src_ref_seq <
      seq_a) {\n                           seq_b  = seq_a - 0x00010000u;\n                           diff_a
      = seq_a - _src_ref_seq;\n                           diff_b = _src_ref_seq -
      seq_b;\n                   }\n                   else {\n                           seq_b
      \ = seq_a + 0x00010000u;\n                           diff_a = _src_ref_seq -
      seq_a;\n                           diff_b = seq_b - _src_ref_seq;\n                   }\n
      \                  // Choose the closer candidate.  If they are equally\n                   //
      close, the choice is somewhat arbitrary: we choose\n                   // the
      candidate for which no rollover is necessary.\n                   if(diff_a
      < diff_b) {\n                           extended_seq = seq_a;\n                   }\n
      \                  else {\n                           extended_seq = seq_b;\n
      \                  }\n                   // Set the reference sequence number
      to be this most\n                   // recently-received sequence number.\n
      \                  _src_ref_seq = extended_seq;\n           }\n           //
      Return our best guess for a 32-bit sequence number that\n           // corresponds
      to the 16-bit number we were given.\n           return extended_seq;\n   }\n"
    title: A.1.  Sequence Number Interpretation
  - contents:
    - "A.2.  Example Burst Packet Loss Calculation.\n   This is an algorithm for measuring
      the burst characteristics for the\n   VoIP Metrics Report Block (Section 4.7).
      \ The algorithm, which has\n   been verified against a working implementation
      for correctness, is\n   reproduced from ETSI TS 101 329-5 [3].  The algorithm,
      as described\n   here, takes precedence over any change that might eventually
      be made\n   to the algorithm in future ETSI documents.\n   This algorithm is
      event driven and hence extremely computationally\n   efficient.\n   Given the
      following definition of states:\n      state 1 = received a packet during a
      gap\n      state 2 = received a packet during a burst\n      state 3 = lost
      a packet during a burst\n      state 4 = lost an isolated packet during a gap\n
      \  The \"c\" variables below correspond to state transition counts, i.e.,\n
      \  c14 is the transition from state 1 to state 4.  It is possible to\n   infer
      one of a pair of state transition counts to an accuracy of 1\n   which is generally
      sufficient for this application.\n   \"pkt\" is the count of packets received
      since the last packet was\n   declared lost or discarded, and \"lost\" is the
      number of packets lost\n   within the current burst.  \"packet_lost\" and \"packet_discarded\"
      are\n   Boolean variables that indicate if the event that resulted in this\n
      \  function being invoked was a lost or discarded packet.\n   if(packet_lost)
      {\n           loss_count++;\n   }\n   if(packet_discarded) {\n           discard_count++;\n
      \  }\n   if(!packet_lost && !packet_discarded) {\n           pkt++;\n   }\n
      \  else {\n           if(pkt >= gmin) {\n                   if(lost == 1) {\n
      \                          c14++;\n                   }\n                   else
      {\n                           c13++;\n                   }\n                   lost
      = 1;\n                   c11 += pkt;\n           }\n           else {\n                   lost++;\n
      \                  if(pkt == 0) {\n                           c33++;\n                   }\n
      \                  else {\n                           c23++;\n                           c22
      += (pkt - 1);\n                   }\n           }\n           pkt = 0;\n   }\n
      \  At each reporting interval the burst and gap metrics can be\n   calculated
      as follows.\n   // Calculate additional transition counts.\n   c31 = c13;\n
      \  c32 = c23;\n   ctotal = c11 + c14 + c13 + c22 + c23 + c31 + c32 + c33;\n
      \  // Calculate burst and densities.\n   p32 = c32 / (c31 + c32 + c33);\n   if((c22
      + c23) < 1) {\n           p23 = 1;\n   }\n   else {\n           p23 = 1 - c22/(c22
      + c23);\n   }\n   burst_density = 256 * p23 / (p23 + p32);\n   gap_density =
      256 * c14 / (c11 + c14);\n   // Calculate burst and gap durations in ms\n   m
      = frameDuration_in_ms * framesPerRTPPkt;\n   gap_length = (c11 + c14 + c13)
      * m / c13;\n   burst_length = ctotal * m / c13 - lgap;\n   /* calculate loss
      and discard rates */\n   loss_rate = 256 * loss_count / ctotal;\n   discard_rate
      = 256 * discard_count / ctotal;\n"
    title: A.2.  Example Burst Packet Loss Calculation.
  title: 7.  Security Considerations
- contents:
  - "Intellectual Property Notice\n   The IETF takes no position regarding the validity
    or scope of any\n   intellectual property or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; neither does it represent that it\n   has made any effort to
    identify any such rights.  Information on the\n   IETF's procedures with respect
    to rights in standards-track and\n   standards-related documentation can be found
    in BCP 11 [5].  Copies\n   of claims of rights made available for publication
    and any assurances\n   of licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: Intellectual Property Notice
- contents:
  - "Acknowledgments\n   We thank the following people: Colin Perkins, Steve Casner,
    and\n   Henning Schulzrinne for their considered guidance; Sue Moon for\n   helping
    foster collaboration between the authors; Mounir Benzaid for\n   drawing our attention
    to the reporting needs of MLDA; Dorgham Sisalem\n   and Adam Wolisz for encouraging
    us to incorporate MLDA block types;\n   and Jose Rey for valuable review of the
    SDP Signaling section.\n"
  title: Acknowledgments
- contents:
  - "Contributors\n   The following people are the authors of this document:\n     Kevin
    Almeroth, UCSB\n     Ramon Caceres, IBM Research\n     Alan Clark, Telchemy\n
    \    Robert G. Cole, JHU Applied Physics Laboratory\n     Nick Duffield, AT&T
    Labs-Research\n     Timur Friedman, Paris 6\n     Kaynam Hedayat, Brix Networks\n
    \    Kamil Sarac, UT Dallas\n     Magnus Westerlund, Ericsson\n   The principal
    people to contact regarding the individual report\n   blocks described in this
    document are as follows:\n   sec. report block                         principal
    contributors\n   ---- ------------                         ----------------------\n
    \  4.1  Loss RLE Report Block                Friedman, Caceres, Duffield\n   4.2
    \ Duplicate RLE Report Block           Friedman, Caceres, Duffield\n   4.3  Packet
    Receipt Times Report Block    Friedman, Caceres, Duffield\n   4.4  Receiver Reference
    Time Report Block Friedman\n   4.5  DLRR Report Block                    Friedman\n
    \  4.6  Statistics Summary Report Block      Almeroth, Sarac\n   4.7  VoIP Metrics
    Report Block            Clark, Cole, Hedayat\n   The principal person to contact
    regarding the SDP signaling described\n   in this document is Magnus Westerlund.\n"
  title: Contributors
- contents:
  - 'References

    '
  title: References
- contents:
  - "Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs to Indicate
    Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]  Crocker,
    D., Ed. and P. Overell, \"Augmented BNF for Syntax\n        Specifications: ABNF\",
    RFC 2234, November 1997.\n   [3]  ETSI, \"Quality of Service (QoS) measurement
    methodologies\", ETSI\n        TS 101 329-5 V1.1.1 (2000-11), November 2000.\n
    \  [4]  Handley, M. and V. Jacobson, \"SDP: Session Description\n        Protocol\",
    RFC 2327, April 1998.\n   [5]  Hovey, R. and S. Bradner, \"The Organizations Involved
    in the\n        IETF Standards Process\", BCP 11, RFC 2028, October 1996.\n   [6]
    \ ITU-T, \"The E-Model, a computational model for use in\n        transmission
    planning\", Recommendation G.107, January 2003.\n   [7]  Narten, T. and H. Alvestrand,
    \"Guidelines for Writing an IANA\n        Considerations Section in RFCs\", BCP
    26, RFC 2434, October 1998.\n   [8]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
    Model with\n        the Session Description Protocol (SDP)\", RFC 3264, June 2002.\n
    \  [9]  Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\n        \"RTP:
    A Transport Protocol for Real-Time Applications\", RFC\n        3550, July 2003.\n
    \  [10] TIA/EIA-810-A Transmission Requirements for Narrowband Voice\n        over
    IP and Voice over PCM Digital Wireline Telephones, December\n        2000.\n"
  title: Normative References
- contents:
  - "Informative References\n   [11] Adams, A., Bu, T., Caceres, R., Duffield, N.G.,
    Friedman, T.,\n        Horowitz, J., Lo Presti, F., Moon, S.B., Paxson, V. and
    D.\n        Towsley, \"The Use of End-to-End Multicast Measurements for\n        Characterizing
    Internal Network Behavior\", IEEE Communications\n        Magazine, May 2000.\n
    \  [12] Baugher, McGrew, Oran, Blom, Carrara, Naslund and Norrman, \"The\n        Secure
    Real-time Transport Protocol\", Work in Progress.\n   [13] Caceres, R., Duffield,
    N.G. and T. Friedman, \"Impromptu\n        measurement infrastructures using RTP\",
    Proc. IEEE Infocom 2002.\n   [14] Clark, A.D., \"Modeling the Effects of Burst
    Packet Loss and\n        Recency on Subjective Voice Quality\", Proc. IP Telephony\n
    \       Workshop 2001.\n   [15] Handley, M., Perkins, C. and E. Whelan, \"Session
    Announcement\n        Protocol\", RFC 2974, October 2000.\n   [16] Reynolds, J.,
    Ed., \"Assigned Numbers: RFC 1700 is Replaced by an\n        On-line Database\",
    RFC 3232, January 2002.\n   [17] Schulzrinne, H., Rao, A. and R. Lanphier, \"Real
    Time Streaming\n        Protocol (RTSP)\", RFC 2326, April 1998.\n   [18] Sisalem
    D. and A. Wolisz, \"MLDA: A TCP-friendly Congestion\n        Control Framework
    for Heterogeneous Multicast Environments\",\n        Proc. IWQoS 2000.\n"
  title: Informative References
- contents:
  - "Authors' Addresses\n   Kevin Almeroth\n   Department of Computer Science\n   University
    of California\n   Santa Barbara, CA 93106 USA\n   EMail: almeroth@cs.ucsb.edu\n
    \  Ramon Caceres\n   IBM Research\n   19 Skyline Drive\n   Hawthorne, NY 10532
    USA\n   EMail: caceres@watson.ibm.com\n   Alan Clark\n   Telchemy Incorporated\n
    \  3360 Martins Farm Road, Suite 200\n   Suwanee, GA 30024 USA\n   Phone: +1 770
    614 6944\n   Fax:   +1 770 614 3951\n   EMail: alan@telchemy.com\n   Robert G.
    Cole\n   Johns Hopkins University Applied Physics Laboratory\n   MP2-S170\n   11100
    Johns Hopkins Road\n   Laurel, MD 20723-6099 USA\n   Phone: +1 443 778 6951\n
    \  EMail: robert.cole@jhuapl.edu\n   Nick Duffield\n   AT&T Labs-Research\n   180
    Park Avenue, P.O. Box 971\n   Florham Park, NJ 07932-0971 USA\n   Phone: +1 973
    360 8726\n   Fax:   +1 973 360 8050\n   EMail: duffield@research.att.com\n   Timur
    Friedman\n   Universite Pierre et Marie Curie (Paris 6)\n   Laboratoire LiP6-CNRS\n
    \  8, rue du Capitaine Scott\n   75015 PARIS France\n   Phone: +33 1 44 27 71
    06\n   Fax:   +33 1 44 27 74 95\n   EMail: timur.friedman@lip6.fr\n   Kaynam Hedayat\n
    \  Brix Networks\n   285 Mill Road\n   Chelmsford, MA 01824 USA\n   Phone: +1
    978 367 5600\n   Fax:   +1 978 367 5700\n   EMail: khedayat@brixnet.com\n   Kamil
    Sarac\n   Department of Computer Science (ES 4.207)\n   Eric Jonsson School of
    Engineering & Computer Science\n   University of Texas at Dallas\n   Richardson,
    TX 75083-0688 USA\n   Phone: +1 972 883 2337\n   Fax:   +1 972 883 2349\n   EMail:
    ksarac@utdallas.edu\n   Magnus Westerlund\n   Ericsson Research\n   Ericsson AB\n
    \  SE-164 80 Stockholm Sweden\n   Phone: +46 8 404 82 87\n   Fax:   +46 8 757
    55 50\n   EMail: magnus.westerlund@ericsson.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assignees.\n   This document and the
    information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET
    SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,
    EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
    OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
