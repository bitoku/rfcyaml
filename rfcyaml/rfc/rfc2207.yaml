- contents:
  - '                  RSVP Extensions for IPSEC Data Flows

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document presents extensions to Version 1 of RSVP.  These\n
    \  extensions permit support of individual data flows using RFC 1826, IP\n   Authentication
    Header (AH) or RFC 1827, IP Encapsulating Security\n   Payload (ESP).  RSVP Version
    1 as currently specified can support the\n   IPSEC protocols, but only on a per
    address, per protocol basis not on\n   a per flow basis.  The presented extensions
    can be used with both\n   IPv4 and IPv6.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1   Introduction . . . . . . . . . . . . . . . . . . .
    . . . . 2\n   2   Overview of Extensions . . . . . . . . . . . . . . . . . . 3\n
    \  3   Object Definition. . . . . . . . . . . . . . . . . . . . . 4\n       3.1
    \ SESSION Class . . . . . . . . . . . . . . . . . . . . 5\n       3.2  FILTER_SPEC
    Class . . . . . . . . . . . . . . . . . . 5\n       3.3  SENDER_TEMPLATE Class
    . . . . . . . . . . . . . . . . 6\n   4   Processing Rules . . . . . . . . . .
    . . . . . . . . . . . 6\n       4.1  Required Changes. . . . . . . . . . . . .
    . . . . . . 6\n       4.2  Merging Flowspecs . . . . . . . . . . . . . . . . .
    . 7\n       4.2.1  FF and SE Styles. . . . . . . . . . . . . . . . . . 7\n       4.2.2
    \ WF Styles . . . . . . . . . . . . . . . . . . . . . 8\n   5   IANA Considerations.
    . . . . . . . . . . . . . . . . . . . 8\n   6   Security Considerations. . . .
    . . . . . . . . . . . . . . 8\n   7   References . . . . . . . . . . . . . . .
    . . . . . . . . .10\n   8   Acknowledgments . . . . . . . . . . . .  . . . . .
    . . . .10\n   9   Authors' Addresses . . . . . . . . . . . . . . . . . . . .10\n
    \  A   Options Considered . . . . . . . . . . . . . . . . . . . .11\n       A.1
    \ UDP Encapsulation . . . . . . . . . . . . . . . . . .11\n       A.2  FlowID
    Header Encapsulation . . . . . . . . . . . . .12\n       A.3  IPSEC Protocol Modification
    . . . . . . . . . . . . .12\n       A.4  AH Transparency . . . . . . . . . . .
    . . . . . . . .13\n"
  title: Table of Contents
- contents:
  - "1   Introduction\n   Recently published Standards Track RFCs specify protocol
    mechanisms\n   to provide IP level security.  These IP Security, or IPSEC, protocols\n
    \  support packet level authentication, [RFC 1826], and integrity and\n   confidentiality
    [RFC 1827].  A number of interoperable\n   implementations already exist and several
    vendors have announced\n   commercial products that will use these mechanisms.\n
    \  The IPSEC protocols provide service by adding a new header between a\n   packet's
    IP header and the transport (e.g. UDP) protocol header.  The\n   two security
    headers are the Authentication Header (AH), for\n   authentication, and the Encapsulating
    Security Payload (ESP), for\n   integrity and confidentiality.\n   RSVP is being
    developed as a resource reservation (dynamic QoS setup)\n   protocol.  RSVP as
    currently specified [RFC 2205] is tailored towards\n   IP packets carrying protocols
    that have TCP or UDP-like ports.\n   Protocols that do not have such UDP/TCP-like
    ports, such as the IPSEC\n   protocols, can be supported, but only with limitations.\n
    \  Specifically, for flows of IPSEC data packets, flow definition can\n   only
    be done on per IP address, per protocol basis.\n   This memo proposes extensions
    to RSVP so that data flows containing\n   IPSEC protocols can be controlled at
    a granularity similar to what is\n   already specified for UDP and TCP.  The proposed
    extensions can be\n   used with both IPv4 and IPv6.  Section 2 of this memo will
    provide an\n   overview of extensions.  Section 3 contains a description of extended\n
    \  protocol mechanisms.  Section 4 presents extended protocol processing\n   rules.
    \ Section 5 defines the additional RSVP data objects.\n"
  title: 1   Introduction
- contents:
  - "2   Overview of Extensions\n   The basic notion is to extend RSVP to use the
    IPSEC Security\n   Parameter Index, or SPI, in place of the UDP/TCP-like ports.
    \ This\n   will require a new FILTER_SPEC object, which will contain the IPSEC\n
    \  SPI, and a new SESSION object.\n   While SPIs are allocated based on destination
    address, they will\n   typically be associated with a particular sender.  As a
    result, two\n   senders to the same unicast destination will usually have different\n
    \  SPIs.  In order to support the control of multiple independent flows\n   between
    source and destination IP addresses, the SPI will be included\n   as part of the
    FILTER_SPEC.  When using WF, however, all flows to the\n   same IP destination
    address using the same IP protocol ID will share\n   the same reservation.  (This
    limitation exists because the IPSEC\n   transport headers do not contain a destination
    demultiplexing value\n   like the UDP/TCP destination port.)\n   Although the
    RESV message format will not change, RESV processing\n   will require modification.
    \ Processing of the new IPSEC FILTER_SPEC\n   will depend on the use of the new
    SESSION object and on the protocol\n   ID contained in the session definition.
    \ When the new FILTER_SPEC\n   object is used, the complete four bytes of the
    SPI will need to be\n   extracted from the FILTER_SPEC for use by the packet classifier.
    \ The\n   location of the SPI in the transport header of the IPSEC packets is\n
    \  dependent on the protocol ID field.\n   The extension will also require a change
    to PATH processing,\n   specifically in the usage of the port field in a session
    definition.\n   An RSVP session is defined by the triple: (DestAddress, protocol
    ID,\n   DstPort).  [RFC 2205] includes the definition of one type of SESSION\n
    \  object, it contains UDP/TCP destination ports, specifically \"a 16-bit\n   quantity
    carried at the octet offset +2 in the transport header\" or\n   zero for protocols
    that lack such a field.  The IPSEC protocols do\n   not contain such a field,
    but there remains a requirement for\n   demultiplexing sessions beyond the IP
    destination address.  In order\n   to satisfy this requirement, a virtual destination
    port, or vDstPort,\n   is introduced.  The vDstPort value will be carried in the
    new SESSION\n   object but not in the IPSEC transport header.  The vDstPort allows\n
    \  for the differentiation of multiple IPSEC sessions destined to the\n   same
    IP address.  See Section 5 for a discussion of vDstPort ranges.\n   In PATH messages,
    the SENDER_TEMPLATE for IPSEC flows will have the\n   same format as the modified
    FILTER_SPEC.  But, a new SESSION object\n   will be used to unambiguously distinguish
    the use of a virtual\n   destination port.\n   Traffic will be mapped (classified)
    to reservations based on SPIs in\n   FILTER_SPECs.  This, of course, means that
    when WF is used all flows\n   to the same IP destination address and with the
    same IP protocol ID\n   will share the same reservation.\n   The advantages to
    the described approach are that no changes to\n   RFC1826 and 1827 are required
    and that there is no additional per\n   data packet overhead.  Appendix A contains
    a discussion of the\n   advantages of this approach compared to several other
    alternatives.\n   This approach does not take advantage of the IPv6 Flow Label
    field,\n   so greater efficiency may be possible for IPv6 flows.  The details
    of\n   IPv6 Flow Label usage is left for the future.\n"
  title: 2   Overview of Extensions
- contents:
  - "3   Object Definition\n   The FILTER_SPEC and SENDER_TEMPLATE used with IPSEC
    protocols will\n   contain a four byte field that will be used to carry the SPI.
    \ Rather\n   than label the modified field with an IPSEC specific label, SPI,
    the\n   label \"Generalized Port Identifier\", or GPI, will be so that these\n
    \  object may be reused for non-IPSEC uses in the future.  The name for\n   these
    objects are the IPv4/GPI FILTER_SPEC, IPv6/GPI FILTER_SPEC,\n   IPv4/GPI SENDER_TEMPLATE,
    and IPv6/GPI SENDER_TEMPLATE.  Similarly,\n   the new SESSION objects will be
    the IPv4/GPI SESSION and the IPv6/GPI\n   SESSION.  When referring to the new
    objects, IP version will not be\n   included unless a specific distinction between
    IPv4 and IPv6 is being\n   made.\n"
  - contents:
    - "3.1  SESSION Class\n        SESSION Class = 1.\n        o    IPv4/GPI SESSION
      object: Class = 1, C-Type = 3\n        +-------------+-------------+-------------+-------------+\n
      \       |               IPv4 DestAddress (4 bytes)              |\n        +-------------+-------------+-------------+-------------+\n
      \       | Protocol ID |     Flags   |         vDstPort          |\n        +-------------+-------------+-------------+-------------+\n
      \       o    IPv6/GPI SESSION object:  Class = 1, C-Type = 4\n        +-------------+-------------+-------------+-------------+\n
      \       |                                                       |\n        +
      \                                                      +\n        |                                                       |\n
      \       +               IPv6 DestAddress (16 bytes)             +\n        |
      \                                                      |\n        +                                                       +\n
      \       |                                                       |\n        +-------------+-------------+-------------+-------------+\n
      \       | Protocol ID |     Flags   |         vDstPort          |\n        +-------------+-------------+-------------+-------------+\n"
    title: 3.1  SESSION Class
  - contents:
    - "3.2  FILTER_SPEC Class\n        FILTER_SPEC class = 10.\n        o    IPv4/GPI
      FILTER_SPEC object: Class = 10, C-Type = 4\n        +-------------+-------------+-------------+-------------+\n
      \       |               IPv4 SrcAddress (4 bytes)               |\n        +-------------+-------------+-------------+-------------+\n
      \       |            Generalized Port Identifier (GPI)          |\n        +-------------+-------------+-------------+-------------+\n
      \       o    IPv6/GPI FILTER_SPEC object: Class = 10, C-Type = 5\n        +-------------+-------------+-------------+-------------+\n
      \       |                                                       |\n        +
      \                                                      +\n        |                                                       |\n
      \       +               IPv6 SrcAddress (16 bytes)              +\n        |
      \                                                      |\n        +                                                       +\n
      \       |                                                       |\n        +-------------+-------------+-------------+-------------+\n
      \       |            Generalized Port Identifier (GPI)          |\n        +-------------+-------------+-------------+-------------+\n"
    title: 3.2  FILTER_SPEC Class
  - contents:
    - "3.3  SENDER_TEMPLATE Class\n        SENDER_TEMPLATE class = 11.\n        o
      \   IPv4/GPI SENDER_TEMPLATE object: Class = 11, C-Type = 4\n                 Definition
      same as IPv4/GPI FILTER_SPEC object.\n        o    IPv6/GPI SENDER_TEMPLATE
      object: Class = 11, C-Type = 5\n                 Definition same as IPv6/GPI
      FILTER_SPEC object.\n"
    title: 3.3  SENDER_TEMPLATE Class
  title: 3   Object Definition
- contents:
  - "4   Processing Rules\n   This section presents additions to the Processing Rules
    presented in\n   [RFC 2209].  These additions are required in order to properly\n
    \  process the GPI SESSION and FILTER_SPEC objects.  Values for\n   referenced
    error codes can be found in [RFC 2205].  As in with the\n   other RSVP documents,
    values for internally reported (API) errors are\n   not defined.\n"
  - contents:
    - "4.1  Required Changes\n   Both RESV and PATH processing will need to be changed
      to support the\n   new objects.  The changes ensure consistency and extend port\n
      \  processing.\n   The following PATH message processing changes are required:\n
      \    o  When a session is defined using the GPI SESSION object, only\n        the
      GPI SENDER_TEMPLATE may be used.  When this condition is\n        violated,
      end-stations should report a \"Conflicting C-Type\" API\n        error to the
      application.\n     o  For PATH messages that contain the GPI SESSION object,\n
      \       end-stations must verify that the protocol ID corresponds to a\n        protocol
      known to use the GPI SESSION object.  Values 51 (AH)\n        or 50 (ESP) must
      be supported by implementations supporting\n        the described IPSEC extensions.
      \ If an unknown protocol ID is\n        used, then the API should report an
      \"API Error\" to the\n        application.\n     o  For such messages, the vDstPort
      value should be recorded.\n        The vDstPort value forms part of the recorded
      state and is used\n        to match Resv messages, but it is not passed to traffic
      control.\n        Non-zero values of vDstPort are required.  This requirement\n
      \       ensures that a non-GPI SESSION object will never merge with a\n        GPI
      SESSION object.  Violation of this condition causes an\n        \"Invalid Destination
      Port\" API error.\n     The changes to RESV message processing are:\n     o
      \ When a RESV message contains a GPI FILTER_SPEC, the session\n        must
      be defined using the GPI SESSION object. Otherwise, this is\n        a message
      formatting error.\n     o  The GPI contained in the FILTER_SPEC must match the
      GPI\n        contained in the SENDER_TEMPLATE.  Otherwise, a \"No sender\n        information
      for this Resv message\" error  is generated.\n     o  When the GPI FILTER_SPEC
      is used, each node must create\n        a data classifier for the flow described
      by the quadruple:\n        (DestAddress, protocol ID, SrcAddress, GPI). The
      data classifier\n        will need to look for the four byte GPI at transport
      header\n        offset +4 for AH, and at transport header offset +0 for ESP.\n"
    title: 4.1  Required Changes
  - contents:
    - "4.2  Merging Flowspecs\n   When using this extension for IPSEC data flows,
      RSVP sessions are\n   defined by the triple: (DestAddress, protocol Id, vDstPort).\n
      \  Similarly, a sender is defined by the tuple: (SrcAddress, GPI), where\n   the
      GPI field will be a four byte representation of a generalized\n   source port.
      \ These extensions have some ramifications depending upon\n   the reservation
      style.\n"
    - contents:
      - "4.2.1  FF and SE Styles\n   In the FF and SE Styles, the FILTER_SPEC object
        contains the\n   (SrcAddress, GPI) pair.  This allows the receiver to uniquely\n
        \  identify senders based on both elements of the pair.  When merging\n   explicit
        sender descriptors, the senders may only be considered\n   identical when
        both elements are identical.\n"
      title: 4.2.1  FF and SE Styles
    - contents:
      - "4.2.2  WF Styles\n   These extensions provide very limited service when used
        with WF style\n   reservations.  As described, the SENDER_TEMPLATE and FILTER_SPEC
        each\n   contain the GPI.  In a WF style reservation, the RESV message does\n
        \  NOT contain a FILTER_SPEC (after all, it is a wildcard filter), and\n   the
        SENDER_TEMPLATE is ignored (again, because any sender is\n   allowed).  As
        a result, classifiers may match all packets which\n   contain both the session's
        destination IP address and protocol ID to\n   such WF reservations.\n   Although
        a solution for this limitation is not proposed, this issue\n   is not seen
        as significant since IPSEC applications are less likely\n   to use WF style
        reservations.\n"
      title: 4.2.2  WF Styles
    title: 4.2  Merging Flowspecs
  title: 4   Processing Rules
- contents:
  - "5   IANA Considerations\n   The range of possible vDstPort values is broken down
    into sections,\n   in a fashion similar to the UDP/TCP port ranges.\n             0
    \             Illegal Value\n             1 - 10         Reserved. Contact authors.\n
    \            11 - 8191      Assigned by IANA\n             8192 - 65535   Dynamic\n
    \  IANA is directed to assign the well-known vDstPorts using the\n   following
    criteria:  Anyone who asks for an assigned vDstPort must\n   provide a) a Point
    of Contact, b) a brief description of intended\n   use, and c) a short name to
    be associated with the assignment (e.g.\n   \"ftp\").\n"
  title: 5   IANA Considerations
- contents:
  - "6   Security Considerations\n   The same considerations stated in [RFC 2205],
    [RFC 1826], and [RFC\n   1827] apply to the extensions described in this note.
    \ There are two\n   additional issue related to these extensions.\n   First, the
    vDstPort mechanism represents another data element about\n   the IP Flow that
    might be available to an adversary.  Such data might\n   be useful to an adversary
    engaging in traffic analysis by monitoring\n   not only the data packets of the
    IP Flow but also the RSVP control\n   messages associated with that Flow.  Protection
    against traffic\n   analysis attacks is outside the scope of this mechanism.  One\n
    \  possible approach to precluding such attacks would be deployment and\n   use
    of appropriate link-layer confidentiality mechansisms, such as\n   encryption.\n
    \  Secondly, Changes in SPI values for a given flow will affect RSVP\n   flows
    and reservations.  Changes will happen whenever that flow\n   changes its Security
    Association.  Such changes will occur when a\n   flow is rekeyed (i.e. to use
    a new key). Rekeying intervals are\n   typically set based on traffic levels,
    key size, threat environment,\n   and crypto algorithm in use.  When an SPI change
    occurs it will, in\n   most cases, be necessary to update (send) the corresponding\n
    \  SENDER_TEMPLATEs and FILTER_SPECs.  IPSEC implementations, RSVP\n   applications,
    and RSVP end-station implementations will need to take\n   the possibility of
    changes of SPI into account to ensure proper\n   reservation behavior.  This issue
    is likely to be a tolerable, since\n   rekeying intervals are under the control
    of local administrators.\n   Many, if not most, RSVP sessions will not need to
    deal with this\n   rekeying issue.  For those applications that do need to deal
    with\n   changes of SPIs during a session, the impact of sending new PATH and\n
    \  RESV messages will vary based on the reservation style being used.\n   Builders
    of such applications may want to select reservation style\n   based on interaction
    with SPI changes.\n   The least impact of an SPI change will be to WF style reservations.\n
    \  For such reservations, a new SENDER_TEMPLATE will need to be sent,\n   but
    no new RESV is required.  For SE style reservations, both a new\n   SENDER_TEMPLATE
    and a new RESV will need to be sent.  This will\n   result in changes to state,
    but should not affect data packet\n   delivery or actual resource allocation in
    any way.  The FF style will\n   be impacted the most.  Like with SE, both PATH
    and RESV messages will\n   need to be sent.  But, since FF style reservations
    result in sender\n   receiving its own resource allocation, resources will be
    allocated\n   twice for a period of time.  Or, even worse, there won't be enough\n
    \  resources to support the new flow without first freeing the old flow.\n   A
    way around this FF/SPI-change problem does exist.  Applications\n   that want
    FF style reservations can use multiple SE reservations.\n   Each real sender would
    have a separate SESSION (vDstPort) definition.\n   When it came time to switch
    SPIs, a shared reservation could be made\n   for the new SPI while the old SPI
    was still active.  Once the new SPI\n   was in use, the old reservation could
    be torn down.  This is less\n   than optimal, but will provide uninterrupted service
    for a set of\n   applications.\n"
  title: 6   Security Considerations
- contents:
  - "7   References\n     [RFC 2205] Braden, R., Ed., Zhang, L., Estrin, D., Herzog,
    S.,\n                and S. Jamin, \"Resource ReSerVation Protocol (RSVP)\n                --
    Version 1 Functional Specification\", RFC 2205,\n                September 1997.\n
    \    [RFC 2209] Braden, R., Ed., Zhang, \"Resource ReSerVation\n                Protocol
    (RSVP) -- Version 1 Message Processing\n                Rules\", RFC 2209, September
    1997.\n     [RFC 1825] Atkinson, R., \"Security Architecture for the Internet\n
    \               Protocol\", RFC 1825, NRL, August 1995.\n     [RFC 1826] Atkinson,
    R., \"IP Authentication Header\", RFC 1826, NRL,\n                August 1995.\n
    \    [RFC 1827] Atkinson, R., \"IP Encapsulating Security Payload\", RFC\n                1827,
    NRL, August 1995.\n"
  title: 7   References
- contents:
  - "8   Acknowledgments\n   This note includes ideas originated and reviewed by a
    number of\n   individuals who did not participate in this note's writing.  The\n
    \  authors would like to acknowledge their contribution.  We thank Ran\n   Atkinson
    <rja@cisco.com>, Fred Baker <fred@cisco.com>, Greg Troxel\n   <gdt@bbn.com>, John
    Krawczyk <jkrawczyk@BayNetworks.com> for much\n   appreciated input and feedback.
    Special appreciation goes to Bob\n   Braden <braden@isi.edu> for his detailed
    editorial and technical\n   comments.  We also thank Buz Owen, Claudio Topolcic,
    Andy Veitch, and\n   Luis Sanchez for their help in coming up with the proposed
    approach.\n   If any brain-damage exists in this note, it originated solely from\n
    \  the authors.\n"
  title: 8   Acknowledgments
- contents:
  - "9   Authors' Addresses\n   Lou Berger                           Tim O'Malley\n
    \  FORE Systems                         BBN Corporation\n   6905 Rockledge Drive
    \                10 Moulton Street\n   Suite 800                            Cambridge,
    MA 02138\n   Bethesda, MD 20817\n   Phone: 301-571-2534                  Phone:
    617-873-3076\n   EMail: lberger@fore.com              EMail: timo@bbn.com\n"
  - "A   Options Considered\n   This sections reviews other approaches that were explored
    in\n   developing the described extensions.  They are included here to\n   provide
    additional context into the general problem.  All listed\n   options were rejected
    by the working group.\n   Four other options were considered:\n   1.  UDP Encapsulation\n
    \      Add a UDP header between the IP and the IPSEC AH or ESP\n       headers.\n
    \  2.  FlowID Header Encapsulation\n       Add a new type of header between the
    IP and the IPSEC AH or\n       ESP headers.\n   3.  IPSEC modification\n       Modify
    IPSEC headers so that there are appropriate fields in\n       same location as
    UDP and TCP ports.\n   4.  AH Transparency\n       Skip over the Authentication
    Header packet classifier\n       processing.\n"
  - contents:
    - "A.1  UDP Encapsulation\n   Since current SESSION and FILTER object expect UDP
      or TCP ports, this\n   proposal says let's just give it to them.  The basic
      concept is to\n   add a UDP port between the IP and AH/ESP headers.  The UDP
      ports\n   would provide the granularity of control that is need to associate\n
      \  specific flows with reservations.\n   Source and destination ports would
      be used, as normal, in RSVP\n   session definition and control.  The port fields
      would also need to\n   be used to identify the real transport level protocol
      (e.g. ESP)\n   being used. Also since many UDP ports are assigned as well known\n
      \  ports, use of port numbers would be limited.  So, the port fields\n   would
      need to be used to unambiguously identify 1) the next level\n   protocol, 2)
      the RSVP session, and 3) the RSVP reservation.\n   The advantages of this option
      is that no RSVP changes are required.\n   The disadvantages is that, since the
      headers aren't in the expected\n   location, RFC 1826 and RFC 1827 are violated.\n"
    title: A.1  UDP Encapsulation
  - contents:
    - "A.2  FlowID Header Encapsulation\n   [This option was originally proposed by
      Greg Troxel <gdt@bbn.com>.]\n   This option is very similar to option 1, but
      is more generic and\n   could be adopted as a standard solution.  The notion
      is to use UDP\n   like ports for the sole purpose of flow identification.  RSVP
      would\n   treat this new protocol exactly the same as UDP.\n   The difference
      between this and UDP encapsulation is in destination\n   host processing.  The
      destination host would essentially ignore port\n   information and use a new
      field, protocol ID, to identify which\n   protocol should process the packet
      next.  Some examples of protocol\n   IDs correspond to TCP, UDP, ESP, or AH.\n
      \     The format of the FlowID Header would be:\n  +---------------+---------------+---------------+---------------+\n
      \ |          Source Port          |            Dest Port          |\n  +---------------+---------------+---------------+---------------+\n
      \ |  Ver  |  Len  |  Protocol ID  |            Checksum           |\n  +---------------+---------------+---------------+---------------+\n
      \  1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8\n       2
      bytes source port                 4 bits length-32 (2)\n       2 bytes dest
      port                   8 bits protocol ID\n       4 bits version (1)                  16
      bits checksum\n   The advantage of this protocol is that flow identification
      is\n   separated from all other protocol processing.  The disadvantage is\n
      \  that the addition of a header violates RFC 1826 and 1827, and also\n   that
      applications using RSVP will need to add this extra header on\n   all data packets
      whose transport headers do not have UDP/TCP like\n   ports.\n"
    title: A.2  FlowID Header Encapsulation
  - contents:
    - "A.3  IPSEC Protocol Modification\n   The basic notion of this option is to
      leave RSVP as currently\n   specified and use the Security Association Identifier
      (SPI) found in\n   the IPSEC headers for flow identification.  There are two
      issues with\n   using the SPI. The first is that the SPI is located in the wrong\n
      \  location when using Authentication (AH).  The second issue is how to\n   make
      use of the SPI.\n   The first issue is easy to fix, but violates RFC 1826.  UDP
      and TCP\n   have port assignments in the first 4 bytes of their headers, each
      is\n   two bytes long, source comes first, then destination.  The ESP header\n
      \  has the SPI in the same location as UDP/TCP ports, the AH doesn't.\n   The
      IP Authentication Header has the following syntax:\n  +---------------+---------------+---------------+---------------+\n
      \ | Next Header   | Length        |           RESERVED            |\n  +---------------+---------------+---------------+---------------+\n
      \ |                    Security Parameters Index                  |\n  +---------------+---------------+---------------+---------------+\n
      \ |                                                               |\n  +     Authentication
      Data (variable number of 32-bit words)     |\n  |                                                               |\n
      \ +---------------+---------------+---------------+---------------+\n   1 2
      3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8\n   Simply reversing
      the first 4 bytes with the SPI we will have the SPI\n   in the location that
      RSVP expects.  This would be non-standard, or\n   require a major (i.e. not
      backward compatible) change to RSVP 1826.\n   The second issue is how to make
      use of the SPI.  Per the current RSVP\n   specification, the first two bytes
      of a flow's SPI will need to be\n   carried in the PATH message and the second
      two bytes in the RESV\n   message.  The biggest problem is that the SPI is normally
      selected by\n   the receiver and is likely to be different for EACH sender.
      \ (There\n   is a special case where the same SPI is used by all senders in
      a\n   multicast group.  But this is a special case.)  It is possible to\n   have
      the SPI selected prior to starting the RSVPsession.  This will\n   work for
      unicast and the special multicast case.  But using this\n   approach means that
      setup time will usually be extended by at least 1\n   round trip time.  Its
      not clear how to support SE and WF style\n   reservations.\n   The advantage
      of this approach is no change to RSVP.  The\n   disadvantages are modification
      to RFC1827 and limited support of RSVP\n   reservation styles.\n"
    title: A.3  IPSEC Protocol Modification
  - contents:
    - "A.4  AH Transparency\n   The source of the RSVP support of IPSEC protocols
      problem is that the\n   real transport header is not in the expected location.
      \ With ESP\n   packets, the real source and destination ports are encrypted
      and\n   therefore useless to RSVP.  This is not the case for authentication.\n
      \  For AH, the real header just follows the Authentication Header.  So,\n   it
      would be possible to use the real transport header for RSVP\n   session definition
      and reservation.\n   To use the transport header, all that would need to be
      done is for\n   the flow classifier to skip over AHs before classifying packets.
      \ No\n   modification to RSVP formats or setup processing would be required.\n
      \  Applications would make reservations based on transport (i.e., UDP or\n   TCP)
      ports as usual.\n   The advantages of this approach are no changes to either
      IPSEC\n   protocols or RSVP formats.  The major disadvantage is that routers\n
      \  and hosts must skip all AHs before classifying packets.  The working\n   group
      decided that it was best to have a consistent solution for both\n   AH and ESP.\n"
    title: A.4  AH Transparency
  title: 9   Authors' Addresses
