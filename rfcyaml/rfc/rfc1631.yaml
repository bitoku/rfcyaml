- title: __initial_text__
  contents:
  - '                The IP Network Address Translator (NAT)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The two most compelling problems facing the IP Internet are IP\n\
    \   address depletion and scaling in routing. Long-term and short-term\n   solutions\
    \ to these problems are being developed. The short-term\n   solution is CIDR (Classless\
    \ InterDomain Routing). The long-term\n   solutions consist of various proposals\
    \ for new internet protocols\n   with larger addresses.\n   It is possible that\
    \ CIDR will not be adequate to maintain the IP\n   Internet until the long-term\
    \ solutions are in place. This memo\n   proposes another short-term solution,\
    \ address reuse, that complements\n   CIDR or even makes it unnecessary. The address\
    \ reuse solution is to\n   place Network Address Translators (NAT) at the borders\
    \ of stub\n   domains. Each NAT box has a table consisting of pairs of local IP\n\
    \   addresses and globally unique addresses. The IP addresses inside the\n   stub\
    \ domain are not globally unique. They are reused in other\n   domains, thus solving\
    \ the address depletion problem. The globally\n   unique IP addresses are assigned\
    \ according to current CIDR address\n   allocation schemes. CIDR solves the scaling\
    \ problem. The main\n   advantage of NAT is that it can be installed without changes\
    \ to\n   routers or hosts. This memo presents a preliminary design for NAT,\n\
    \   and discusses its pros and cons.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This memo is based on a paper by Paul Francis (formerly Tsuchiya)\
    \ and\n   Tony Eng, published in Computer Communication Review, January 1993.\n\
    \   Paul had the concept of address reuse from Van Jacobson.\n   Kjeld Borch Egevang\
    \ edited the paper to produce this memo and\n   introduced adjustment of sequence-numbers\
    \ for FTP. Thanks to Jacob\n   Michael Christensen for his comments on the idea\
    \ and text (we thought\n   for a long time, we were the only ones who had had\
    \ the idea).\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The two most compelling problems facing the IP Internet are\
    \ IP\n   address depletion and scaling in routing. Long-term and short-term\n\
    \   solutions to these problems are being developed. The short-term\n   solution\
    \ is CIDR (Classless InterDomain Routing) [2]. The long-term\n   solutions consist\
    \ of various proposals for new internet protocols\n   with larger addresses.\n\
    \   Until the long-term solutions are ready an easy way to hold down the\n   demand\
    \ for IP addresses is through address reuse. This solution takes\n   advantage\
    \ of the fact that a very small percentage of hosts in a stub\n   domain are communicating\
    \ outside of the domain at any given time. (A\n   stub domain is a domain, such\
    \ as a corporate network, that only\n   handles traffic originated or destined\
    \ to hosts in the domain).\n   Indeed, many (if not most) hosts never communicate\
    \ outside of their\n   stub domain. Because of this, only a subset of the IP addresses\n\
    \   inside a stub domain, need be translated into IP addresses that are\n   globally\
    \ unique when outside communications is required.\n   This solution has the disadvantage\
    \ of taking away the end-to-end\n   significance of an IP address, and making\
    \ up for it with increased\n   state in the network. There are various work-arounds\
    \ that minimize\n   the potential pitfalls of this. Indeed, connection-oriented\
    \ protocols\n   are essentially doing address reuse at every hop.\n   The huge\
    \ advantage of this approach is that it can be installed\n   incrementally, without\
    \ changes to either hosts or routers. (A few\n   unusual applications may require\
    \ changes). As such, this solution can\n   be implemented and experimented with\
    \ quickly. If nothing else, this\n   solution can serve to provide temporarily\
    \ relief while other, more\n   complex and far-reaching solutions are worked out.\n"
- title: 2. Overview of NAT
  contents:
  - "2. Overview of NAT\n   The design presented in this memo is called NAT, for Network\
    \ Address\n   Translator. NAT is a router function that can be configured as shown\n\
    \   in figure 1. Only the stub border router requires modifications.\n   NAT's\
    \ basic operation is as follows. The addresses inside a stub\n   domain can be\
    \ reused by any other stub domain. For instance, a single\n   Class A address\
    \ could be used by many stub domains. At each exit\n   point between a stub domain\
    \ and backbone, NAT is installed. If there\n   is more than one exit point it\
    \ is of great importance that each NAT\n   has the same translation table.\n \
    \       \\ | /                 .                                /\n   +---------------+\
    \  WAN     .           +-----------------+/\n   |Regional Router|----------------------|Stub\
    \ Router w/NAT|---\n   +---------------+          .           +-----------------+\\\
    \n                              .                      |         \\\n        \
    \                      .                      |  LAN\n                       \
    \       .               ---------------\n                        Stub border\n\
    \                      Figure 1: NAT Configuration\n   For instance, in the example\
    \ of figure 2, both stubs A and B\n   internally use class A address 10.0.0.0.\
    \ Stub A's NAT is assigned the\n   class C address 198.76.29.0, and Stub B's NAT\
    \ is assigned the class C\n   address 198.76.28.0. The class C addresses are globally\
    \ unique no\n   other NAT boxes can use them.\n                              \
    \         \\ | /\n                                     +---------------+\n   \
    \                                  |Regional Router|\n                       \
    \              +---------------+\n                                   WAN |   \
    \        | WAN\n                                       |           |\n       \
    \            Stub A .............|....   ....|............ Stub B\n          \
    \                             |           |\n                     {s=198.76.29.7,^\
    \  |           |  v{s=198.76.29.7,\n                      d=198.76.28.4}^  | \
    \          |  v d=198.76.28.4}\n                       +-----------------+   \
    \    +-----------------+\n                       |Stub Router w/NAT|       |Stub\
    \ Router w/NAT|\n                       +-----------------+       +-----------------+\n\
    \                             |                         |\n                  \
    \           |  LAN               LAN  |\n                       -------------\
    \             -------------\n                                 |              \
    \   |\n               {s=10.33.96.5, ^  |                 |  v{s=198.76.29.7,\n\
    \                d=198.76.28.4}^ +--+             +--+ v d=10.81.13.22}\n    \
    \                            |--|             |--|\n                         \
    \      /____\\           /____\\\n                             10.33.96.5    \
    \   10.81.13.22\n                     Figure 2: Basic NAT Operation\n   When stub\
    \ A host 10.33.96.5 wishes to send a packet to stub B host\n   10.81.13.22, it\
    \ uses the globally unique address 198.76.28.4 as\n   destination, and sends the\
    \ packet to it's primary router. The stub\n   router has a static route for net\
    \ 198.76.0.0 so the packet is\n   forwarded to the WAN-link. However, NAT translates\
    \ the source address\n   10.33.96.5 of the IP header with the globally unique\
    \ 198.76.29.7\n   before the package is forwarded. Likewise, IP packets on the\
    \ return\n   path go through similar address translations.\n   Notice that this\
    \ requires no changes to hosts or routers. For\n   instance, as far as the stub\
    \ A host is concerned, 198.76.28.4 is the\n   address used by the host in stub\
    \ B. The address translations are\n   completely transparent.\n   Of course, this\
    \ is just a simple example. There are numerous issues\n   to be explored. In the\
    \ next section, we discuss various aspects of\n   NAT.\n"
- title: 3. Various Aspects of NAT
  contents:
  - '3. Various Aspects of NAT

    '
- title: 3.1 Address Spaces
  contents:
  - '3.1 Address Spaces

    '
- title: Partitioning of Reusable and Non-reusable Addresses
  contents:
  - "Partitioning of Reusable and Non-reusable Addresses\n   For NAT to operate properly,\
    \ it is necessary to partition the IP\n   address space into two parts - the reusable\
    \ addresses used internal\n   to stub domains, and the globally unique addresses.\
    \ We call the\n   reusable address local addresses, and the globally unique addresses\n\
    \   global addresses. Any given address must either be a local address or\n  \
    \ a global address. There is no overlap.\n   The problem with overlap is the following.\
    \ Say a host in stub A\n   wished to send packets to a host in stub B, but the\
    \ local addresses\n   of stub B overlapped the local addressees of stub A. In\
    \ this case,\n   the routers in stub A would not be able to distinguish the global\n\
    \   address of stub B from its own local addresses.\n"
- title: Initial Assignment of Local and Global Addresses
  contents:
  - "Initial Assignment of Local and Global Addresses\n   A single class A address\
    \ should be allocated for local networks. (See\n   RFC 1597 [3].)  This address\
    \ could then be used for internets with no\n   connection to the Internet. NAT\
    \ then provides an easy way to change\n   an experimental network to a \"real\"\
    \ network by translating the\n   experimental addresses to globally unique Internet\
    \ addresses.\n   Existing stubs which have unique addresses assigned internally,\
    \ but\n   are running out of them, can change addresses subnet by subnet to\n\
    \   local addresses. The freed adresses can then be used by NAT for\n   external\
    \ communications.\n"
- title: 3.2 Routing Across NAT
  contents:
  - "3.2 Routing Across NAT\n   The router running NAT should never advertise the\
    \ local networks to\n   the backbone. Only the networks with global addresses\
    \ may be known\n   outside the stub. However, global information that NAT receives\
    \ from\n   the stub border router can be advertised in the stub the usual way.\n"
- title: Private Networks that Span Backbones
  contents:
  - "Private Networks that Span Backbones\n   In many cases, a private network (such\
    \ as a corporate network) will\n   be spread over different locations and will\
    \ use a public backbone for\n   communications between those locations. In this\
    \ case, it is not\n   desirable to do address translation, both because large\
    \ numbers of\n   hosts may want to communicate across the backbone, thus requiring\n\
    \   large address tables, and because there will be more applications\n   that\
    \ depend on configured addresses, as opposed to going to a name\n   server. We\
    \ call such a private network a backbone-partitioned stub.\n   Backbone-partitioned\
    \ stubs should behave as though they were a non-\n   partitioned stub. That is,\
    \ the routers in all partitions should\n   maintain routes to the local address\
    \ spaces of all partitions. Of\n   course, the (public) backbones do not maintain\
    \ routes to any local\n   addresses. Therefore, the border routers must tunnel\
    \ through the\n   backbones using encapsulation. To do this, each NAT box will\
    \ set\n   aside one global address for tunneling. When a NAT box x in stub\n \
    \  partition X wishes to deliver a packet to stub partition Y, it will\n   encapsulate\
    \ the packet in an IP header with destination address set\n   to the global address\
    \ of NAT box y that has been reserved for\n   encapsulation. When NAT box y receives\
    \ a packet with that destination\n   address, it decapsulates the IP header and\
    \ routes the packet\n   internally.\n"
- title: 3.3 Header Manipulations
  contents:
  - "3.3 Header Manipulations\n   In addition to modifying the IP address, NAT must\
    \ modify the IP\n   checksum and the TCP checksum. Remember, TCP's checksum also\
    \ covers a\n   pseudo header which contains the source and destination address.\
    \ NAT\n   must also look out for ICMP and FTP and modify the places where the\n\
    \   IP address appears. There are undoubtedly other places, where\n   modifications\
    \ must be done. Hopefully, most such applications will be\n   discovered during\
    \ experimentation with NAT.\n   The checksum modifications to IP and TCP are simple\
    \ and efficient.\n   Since both use a one's complement sum, it is sufficient to\
    \ calculate\n   the arithmetic difference between the before-translation and after-\n\
    \   translation addresses and add this to the checksum. The only tricky\n   part\
    \ is determining whether the addition resulted in a wrap-around\n   (in either\
    \ the positive or negative direction) of the checksum. If\n   so, 1 must be added\
    \ or subtracted to satisfy the one's complement\n   arithmetic. Sample code (in\
    \ C) for this is as follows:\n   void checksumadjust(unsigned char *chksum, unsigned\
    \ char *optr,\n   int olen, unsigned char *nptr, int nlen)\n   /* assuming: unsigned\
    \ char is 8 bits, long is 32 bits.\n     - chksum points to the chksum in the\
    \ packet\n     - optr points to the old data in the packet\n     - nptr points\
    \ to the new data in the packet\n   */\n   {\n     long x, old, new;\n     x=chksum[0]*256+chksum[1];\n\
    \     x=~x;\n     while (olen) {\n       if (olen==1) {\n         old=optr[0]*256+optr[1];\n\
    \         x-=old & 0xff00;\n         if (x<=0) { x--; x&=0xffff; }\n         break;\n\
    \       }\n       else {\n         old=optr[0]*256+optr[1]; optr+=2;\n       \
    \  x-=old & 0xffff;\n         if (x<=0) { x--; x&=0xffff; }\n         olen-=2;\n\
    \       }\n     }\n     while (nlen) {\n       if (nlen==1) {\n         new=nptr[0]*256+nptr[1];\n\
    \         x+=new & 0xff00;\n         if (x & 0x10000) { x++; x&=0xffff; }\n  \
    \       break;\n       }\n       else {\n         new=nptr[0]*256+nptr[1]; nptr+=2;\n\
    \         x+=new & 0xffff;\n         if (x & 0x10000) { x++; x&=0xffff; }\n  \
    \       nlen-=2;\n       }\n     }\n     x=~x;\n     chksum[0]=x/256; chksum[1]=x\
    \ & 0xff;\n   }\n   The arguments to the File Transfer Protocol (FTP) PORT command\n\
    \   include an IP address (in ASCII!). If the IP address in the PORT\n   command\
    \ is local to the stub domain, then NAT must substitute this.\n   Because the\
    \ address is encoded in ASCII, this may result in a change\n   in the size of\
    \ the packet (for instance 10.18.177.42 is 12 ASCII\n   characters, while 193.45.228.137\
    \ is 14 ASCII characters). If the new\n   size is the same as the previous, only\
    \ the TCP checksum needs\n   adjustment (again). If the new size is less than\
    \ the previous, ASCII\n   zeroes may be inserted, but this is not guaranteed to\
    \ work. If the\n   new size is larger than the previous, TCP sequence numbers\
    \ must be\n   changed too.\n   A special table is used to correct the TCP sequence\
    \ and acknowledge\n   numbers with source port FTP or destination port FTP. The\
    \ table\n   entries should have source, destination, source port, destination\n\
    \   port, initial sequence number, delta for sequence numbers and a\n   timestamp.\
    \ New entries are created only when FTP PORT commands are\n   seen. The initial\
    \ sequence numbers are used to find out if the\n   sequence number of a packet\
    \ is before or after the last FTP PORT\n   command (delta may be increased for\
    \ every FTP PORT command). Sequence\n   numbers are incremented and acknowledge\
    \ numbers are decremented. If\n   the FIN bit is set in one of the packets, the\
    \ associated entry may be\n   deleted soon after (1 minute should be safe). Entries\
    \ that have not\n   been used for e.g. 24 hours should be safe to delete too.\n\
    \   The sequence number adjustment must be coded carefully, not to harm\n   performance\
    \ for TCP in general. Of course, if the FTP session is\n   encrypted, the PORT\
    \ command will fail.\n   If an ICMP message is passed through NAT, it may require\
    \ two address\n   modifications and three checksum modifications. This is because\
    \ most\n   ICMP messages contain part of the original IP packet in the body.\n\
    \   Therefore, for NAT to be completely transparent to the host, the IP\n   address\
    \ of the IP header embedded in the data part of the ICMP packet\n   must be modified,\
    \ the checksum field of the same IP header must\n   correspondingly be modified,\
    \ and the ICMP header checksum must be\n   modified to reflect the changes to\
    \ the IP header and checksum in the\n   ICMP body. Furthermore, the normal IP\
    \ header must also be modified as\n   already described.\n   It is not entirely\
    \ clear if the IP header information in the ICMP\n   part of the body really need\
    \ to be modified. This depends on whether\n   or not any host code actually looks\
    \ at this IP header information.\n   Indeed, it may be useful to provide the exact\
    \ header seen by the\n   router or host that issued the ICMP message to aid in\
    \ debugging. In\n   any event, no modifications are needed for the Echo and Timestamp\n\
    \   messages, and NAT should never need to handle a Redirect message.\n   SNMP\
    \ messages could be modified, but it is even more dubious than for\n   ICMP messages\
    \ that it will be necessary.\n"
- title: Applications with IP-address Content
  contents:
  - "Applications with IP-address Content\n   Any application that carries (and uses)\
    \ the IP address inside the\n   application will not work through NAT unless NAT\
    \ knows of such\n   instances and does the appropriate translation. It is not\
    \ possible or\n   even necessarily desirable for NAT to know of all such applications.\n\
    \   And, if encryption is used then it is impossible for NAT to make the\n   translation.\n\
    \   It may be possible for such systems to avoid using NAT, if the hosts\n   in\
    \ which they run are assigned global addresses. Whether or not this\n   can work\
    \ depends on the capability of the intra-domain routing\n   algorithm and the\
    \ internal topology. This is because the global\n   address must be advertised\
    \ in the intra-domain routing algorithm.\n   With a low-feature routing algorithm\
    \ like RIP, the host may require\n   its own class C address space, that must\
    \ not only be advertised\n   internally but externally as well (thus hurting global\
    \ scaling). With\n   a high-feature routing algorithm like OSPF, the host address\
    \ can be\n   passed around individually, and can come from the NAT table.\n"
- title: Privacy, Security, and Debugging Considerations
  contents:
  - "Privacy, Security, and Debugging Considerations\n   Unfortunately, NAT reduces\
    \ the number of options for providing\n   security. With NAT, nothing that carries\
    \ an IP address or information\n   derived from an IP address (such as the TCP-header\
    \ checksum) can be\n   encrypted. While most application-level encryption should\
    \ be ok, this\n   prevents encryption of the TCP header.\n   On the other hand,\
    \ NAT itself can be seen as providing a kind of\n   privacy mechanism. This comes\
    \ from the fact that machines on the\n   backbone cannot monitor which hosts are\
    \ sending and receiving traffic\n   (assuming of course that the application data\
    \ is encrypted).\n   The same characteristic that enhances privacy potentially\
    \ makes\n   debugging problems (including security violations) more difficult.\
    \ If\n   a host is abusing the Internet is some way (such as trying to attack\n\
    \   another machine or even sending large amounts of junk mail or\n   something)\
    \ it is more difficult to pinpoint the source of the trouble\n   because the IP\
    \ address of the host is hidden.\n"
- title: 4. Conclusions
  contents:
  - "4. Conclusions\n   NAT may be a good short term solution to the address depletion\
    \ and\n   scaling problems. This is because it requires very few changes and\n\
    \   can be installed incrementally. NAT has several negative\n   characteristics\
    \ that make it inappropriate as a long term solution,\n   and may make it inappropriate\
    \ even as a short term solution. Only\n   implementation and experimentation will\
    \ determine its\n   appropriateness.\n"
- title: 'The negative characteristics are:'
  contents:
  - 'The negative characteristics are:

    '
- title: 1. It requires a sparse end-to-end traffic matrix. Otherwise, the NAT
  contents:
  - "1. It requires a sparse end-to-end traffic matrix. Otherwise, the NAT\n   tables\
    \ will be large, thus giving lower performance. While the\n   expectation is that\
    \ end-to-end traffic matrices are indeed sparse,\n   experience with NAT will\
    \ determine whether or not they are. In any\n   event, future applications may\
    \ require a rich traffic matrix (for\n   instance, distributed resource discovery),\
    \ thus making long-term use\n   of NAT unattractive.\n"
- title: 2. It increases the probability of mis-addressing.
  contents:
  - '2. It increases the probability of mis-addressing.

    '
- title: 3. It breaks certain applications (or at least makes them more difficult
  contents:
  - "3. It breaks certain applications (or at least makes them more difficult\n  \
    \ to run).\n"
- title: 4. It hides the identity of hosts. While this has the benefit of
  contents:
  - "4. It hides the identity of hosts. While this has the benefit of\n   privacy,\
    \ it is generally a negative effect.\n"
- title: 5. Problems with SNMP, DNS, ... you name it.
  contents:
  - '5. Problems with SNMP, DNS, ... you name it.

    '
- title: Current Implementations
  contents:
  - "Current Implementations\n   Paul and Tony implemented an experimental prototype\
    \ of NAT on public\n   domain KA9Q TCP/IP software [1]. This implementation manipulates\n\
    \   addresses and IP checksums.\n   Kjeld implemented NAT in a Cray Communications\
    \ IP-router. The\n   implementation was tested with Telnet and FTP. This implementation\n\
    \   manipulates addresses, IP checksums, TCP sequence/acknowledge numbers\n  \
    \ and FTP PORT commands.\n   The prototypes has demonstrated that IP addresses\
    \ can be translated\n   transparently to hosts within the limitations described\
    \ in this\n   paper.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1] Karn, P., \"KA9Q\", anonymous FTP from ucsd.edu\n       (hamradio/packet/ka9q/docs).\n\
    \   [2] Fuller, V., Li, T., and J. Yu, \"Classless Inter-Domain Routing\n    \
    \   (CIDR) an Address Assignment and Aggregation Strategy\", RFC 1519,\n     \
    \  BARRNet, cisco, Merit, OARnet, September 1993.\n   [3] Rekhter, Y., Moskowitz,\
    \ B., Karrenberg, D., and G. de Groot,\n       \"Address Allocation for Private\
    \ Internets\", RFC 1597, T.J. Watson\n       Research Center, IBM Corp., Chrysler\
    \ Corp., RIPE NCC, March 1994.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kjeld Borch Egevang\n   Cray Communications\n   Smedeholm\
    \ 12-14\n   DK-2730 Herlev\n   Denmark\n   Phone: +45 44 53 01 00\n   EMail: kbe@craycom.dk\n\
    \   Paul Francis\n   NTT Software Lab\n   3-9-11 Midori-cho Musashino-shi\n  \
    \ Tokyo 180 Japan\n   Phone: +81-422-59-3843\n   Fax +81-422-59-3765\n   EMail:\
    \ francis@cactus.ntt.jp\n"
