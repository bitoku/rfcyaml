- contents:
  - '          Textual Encodings of PKIX, PKCS, and CMS Structures

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes and discusses the textual encodings of the\n
    \  Public-Key Infrastructure X.509 (PKIX), Public-Key Cryptography\n   Standards
    (PKCS), and Cryptographic Message Syntax (CMS).  The\n   textual encodings are
    well-known, are implemented by several\n   applications and libraries, and are
    widely deployed.  This document\n   articulates the de facto rules by which existing
    implementations\n   operate and defines them so that future implementations can\n
    \  interoperate.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7468.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  General Considerations  . . . . . . . . . . . . . . . .
    . . .   3\n   3.  ABNF  . . . . . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   4.  Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n
    \  5.  Textual Encoding of Certificates  . . . . . . . . . . . . . .   8\n     5.1.
    \ Encoding  . . . . . . . . . . . . . . . . . . . . . . . .   8\n     5.2.  Explanatory
    Text  . . . . . . . . . . . . . . . . . . . .   9\n     5.3.  File Extension  .
    . . . . . . . . . . . . . . . . . . . .   9\n   6.  Textual Encoding of Certificate
    Revocation Lists  . . . . . .  10\n   7.  Textual Encoding of PKCS #10 Certification
    Request Syntax . .  11\n   8.  Textual Encoding of PKCS #7 Cryptographic Message
    Syntax  . .  11\n   9.  Textual Encoding of Cryptographic Message Syntax  . .
    . . . .  12\n   10. One Asymmetric Key and the Textual Encoding of PKCS #8\n       Private
    Key Info  . . . . . . . . . . . . . . . . . . . . . .  12\n   11. Textual Encoding
    of PKCS #8 Encrypted Private Key Info  . . .  13\n   12. Textual Encoding of Attribute
    Certificates  . . . . . . . . .  13\n   13. Textual Encoding of Subject Public
    Key Info . . . . . . . . .  14\n   14. Security Considerations . . . . . . . .
    . . . . . . . . . . .  14\n   15. References  . . . . . . . . . . . . . . . .
    . . . . . . . . .  14\n     15.1.  Normative References . . . . . . . . . . .
    . . . . . . .  14\n     15.2.  Informative References . . . . . . . . . . . .
    . . . . .  15\n   Appendix A.  Non-conforming Examples  . . . . . . . . . . .
    . . .  17\n   Appendix B.  DER Expectations . . . . . . . . . . . . . . . . .
    .  18\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  19\n
    \  Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Several security-related standards used on the Internet
    define ASN.1\n   data formats that are normally encoded using the Basic Encoding
    Rules\n   (BER) or Distinguished Encoding Rules (DER) [X.690], which are\n   binary,
    octet-oriented encodings.  This document is about the textual\n   encodings of
    the following formats:\n   1.  Certificates, Certificate Revocation Lists (CRLs),
    and Subject\n       Public Key Info structures in the Internet X.509 Public Key\n
    \      Infrastructure Certificate and Certificate Revocation List (CRL)\n       Profile
    [RFC5280].\n   2.  PKCS #10: Certification Request Syntax [RFC2986].\n   3.  PKCS
    #7: Cryptographic Message Syntax [RFC2315].\n   4.  Cryptographic Message Syntax
    [RFC5652].\n   5.  PKCS #8: Private-Key Information Syntax [RFC5208], renamed
    to One\n       Asymmetric Key in Asymmetric Key Package [RFC5958], and Encrypted\n
    \      Private-Key Information Syntax in the same documents.\n   6.  Attribute
    Certificates in An Internet Attribute Certificate\n       Profile for Authorization
    [RFC5755].\n   A disadvantage of a binary data format is that it cannot be\n   interchanged
    in textual transports, such as email or text documents.\n   One advantage with
    text-based encodings is that they are easy to\n   modify using common text editors;
    for example, a user may concatenate\n   several certificates to form a certificate
    chain with copy-and-paste\n   operations.\n   The tradition within the RFC series
    can be traced back to Privacy-\n   Enhanced Mail (PEM) [RFC1421], based on a proposal
    by Marshall Rose\n   in Message Encapsulation [RFC934].  Originally called \"PEM\n
    \  encapsulation mechanism\", \"encapsulated PEM message\", or (arguably)\n   \"PEM
    printable encoding\", today the format is sometimes referred to\n   as \"PEM encoding\".
    \ Variations include OpenPGP ASCII armor [RFC4880]\n   and OpenSSH key file format
    [RFC4716].\n   For reasons that basically boil down to non-coordination or\n   inattention,
    many PKIX, PKCS, and CMS libraries implement a text-\n   based encoding that is
    similar to -- but not identical with -- PEM\n   encoding.  This document specifies
    the _textual encoding_ format,\n   articulates the de facto rules that most implementations
    operate by,\n   and provides recommendations that will promote interoperability
    going\n   forward.  This document also provides common nomenclature for syntax\n
    \  elements, reflecting the evolution of this de facto standard format.\n   Peter
    Gutmann's \"X.509 Style Guide\" [X.509SG] contains a section\n   \"base64 Encoding\"
    that describes the formats and contains suggestions\n   similar to what is in
    this document.  All figures are real,\n   functional examples, with key lengths
    and inner contents chosen to be\n   as small as practicable.\n   The key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"
    in this document are to be interpreted as described in RFC\n   2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  General Considerations\n   Textual encoding begins with a line comprising
    \"-----BEGIN \", a\n   label, and \"-----\", and ends with a line comprising \"-----END
    \", a\n   label, and \"-----\".  Between these lines, or \"encapsulation\n   boundaries\",
    are base64-encoded data according to Section 4 of\n   [RFC4648].  (PEM [RFC1421]
    referred to this data as the \"encapsulated\n   text portion\".)  Data before
    the encapsulation boundaries are\n   permitted, and parsers MUST NOT malfunction
    when processing such\n   data.  Furthermore, parsers SHOULD ignore whitespace
    and other non-\n   base64 characters and MUST handle different newline conventions.\n
    \  The type of data encoded is labeled depending on the type label in\n   the
    \"-----BEGIN \" line (pre-encapsulation boundary).  For example,\n   the line
    may be \"-----BEGIN CERTIFICATE-----\" to indicate that the\n   content is a PKIX
    certificate (see further below).  Generators MUST\n   put the same label on the
    \"-----END \" line (post-encapsulation\n   boundary) as the corresponding \"-----BEGIN
    \" line.  Labels are\n   formally case-sensitive, uppercase, and comprised of
    zero or more\n   characters; they do not contain consecutive spaces or hyphen-minuses,\n
    \  nor do they contain spaces or hyphen-minuses at either end.  Parsers\n   MAY
    disregard the label in the post-encapsulation boundary instead of\n   signaling
    an error if there is a label mismatch: some extant\n   implementations require
    the labels to match; others do not.\n   There is exactly one space character (SP)
    separating the \"BEGIN\" or\n   \"END\" from the label.  There are exactly five
    hyphen-minus (also\n   known as dash) characters (\"-\") on both ends of the encapsulation\n
    \  boundaries, no more, no less.\n   The label type implies that the encoded data
    follows the specified\n   syntax.  Parsers MUST handle non-conforming data gracefully.\n
    \  However, not all parsers or generators prior to this document behave\n   consistently.
    \ A conforming parser MAY interpret the contents as\n   another label type but
    ought to be aware of the security implications\n   discussed in the Security Considerations
    section.  The labels\n   described in this document identify container formats
    that are not\n   specific to any particular cryptographic algorithm, a property\n
    \  consistent with algorithm agility.  These formats use the ASN.1\n   AlgorithmIdentifier
    structure as described in Section 4.1.1.2 of\n   [RFC5280].\n   Unlike legacy
    PEM encoding [RFC1421], OpenPGP ASCII armor, and the\n   OpenSSH key file format,
    textual encoding does *not* define or permit\n   headers to be encoded alongside
    the data.  Empty space can appear\n   between the pre-encapsulation boundary and
    the base64, but generators\n   SHOULD NOT emit such any such spacing.  (The provision
    for this empty\n   area is a throwback to PEM, which defined an \"encapsulated
    header\n   portion\".)\n   Implementers need to be aware that extant parsers diverge\n
    \  considerably on the handling of whitespace.  In this document,\n   \"whitespace\"
    means any character or series of characters that\n   represent horizontal or vertical
    space in typography.  In US-ASCII,\n   whitespace means HT (0x09), VT (0x0B),
    FF (0x0C), SP (0x20), CR\n   (0x0D), and LF (0x0A); \"blank\" means HT and SP;
    lines are divided\n   with CRLF, CR, or LF.  The common ABNF production WSP is
    congruent\n   with \"blank\"; a new production W is used for \"whitespace\".  The
    ABNF\n   in Section 3 is specific to US-ASCII.  As these textual encodings can\n
    \  be used on many different systems as well as on long-term archival\n   storage
    media such as paper or engravings, an implementer ought to\n   use the spirit
    rather than the letter of the rules when generating or\n   parsing these formats
    in environments that are not strictly limited\n   to US-ASCII.\n   Most extant
    parsers ignore blanks at the ends of lines; blanks at the\n   beginnings of lines
    or in the middle of the base64-encoded data are\n   far less compatible.  These
    observations are codified in Figure 1.\n   The most lax parser implementations
    are not line-oriented at all and\n   will accept any mixture of whitespace outside
    of the encapsulation\n   boundaries (see Figure 2).  Such lax parsing may run
    the risk of\n   accepting text that was not intended to be accepted in the first\n
    \  place (e.g., because the text was a snippet or sample).\n   Generators MUST
    wrap the base64-encoded lines so that each line\n   consists of exactly 64 characters
    except for the final line, which\n   will encode the remainder of the data (within
    the 64-character line\n   boundary), and they MUST NOT emit extraneous whitespace.
    \ Parsers MAY\n   handle other line sizes.  These requirements are consistent
    with PEM\n   [RFC1421].\n   Files MAY contain multiple textual encoding instances.
    \ This is used,\n   for example, when a file contains several certificates.  Whether
    the\n   instances are ordered or unordered depends on the context.\n"
  title: 2.  General Considerations
- contents:
  - "3.  ABNF\n   The ABNF [RFC5234] of the textual encoding is:\n  textualmsg = preeb
    *WSP eol\n               *eolWSP\n               base64text\n               posteb
    *WSP [eol]\n  preeb      = \"-----BEGIN \" label \"-----\" ; unlike [RFC1421]
    (A)BNF,\n                                           ; eol is not required (but\n
    \ posteb     = \"-----END \" label \"-----\"   ; see [RFC1421], Section 4.4)\n
    \ base64char = ALPHA / DIGIT / \"+\" / \"/\"\n  base64pad  = \"=\"\n  base64line
    = 1*base64char *WSP eol\n  base64finl = *base64char (base64pad *WSP eol base64pad
    /\n                            *2base64pad) *WSP eol\n                       ;
    ...AB= <EOL> = <EOL> is not good, but is valid\n  base64text = *base64line base64finl\n
    \        ; we could also use <encbinbody> from RFC 1421, which requires\n         ;
    16 groups of 4 chars, which means exactly 64 chars per\n         ; line, except
    the final line, but this is more accurate\n  labelchar  = %x21-2C / %x2E-7E    ;
    any printable character,\n                                    ; except hyphen-minus\n
    \ label      = [ labelchar *( [\"-\" / SP] labelchar ) ]       ; empty ok\n  eol
    \       = CRLF / CR / LF\n  eolWSP     = WSP / CR / LF                        ;
    compare with LWSP\n                         Figure 1: ABNF (Standard)\n   laxtextualmsg
    \   = *W preeb\n                      laxbase64text\n                      posteb
    *W\n   W                = WSP / CR / LF / %x0B / %x0C           ; whitespace\n
    \  laxbase64text    = *(W / base64char) [base64pad *W [base64pad *W]]\n                           Figure
    2: ABNF (Lax)\n   stricttextualmsg = preeb eol\n                      strictbase64text\n
    \                     posteb eol\n   strictbase64finl = *15(4base64char) (4base64char
    / 3base64char\n                        base64pad / 2base64char 2base64pad) eol\n
    \  base64fullline   = 64base64char eol\n   strictbase64text = *base64fullline
    strictbase64finl\n                          Figure 3: ABNF (Strict)\n   New implementations
    SHOULD emit the strict format (Figure 3)\n   specified above.  The choice of parsing
    strategy depends on the\n   context of use.\n"
  title: 3.  ABNF
- contents:
  - "4.  Guide\n   For convenience, these figures summarize the structures, encodings,\n
    \  and references in the following sections:\n"
  - 'Sec. Label                  ASN.1 Type              Reference Module

    '
  - "----+----------------------+-----------------------+---------+----------\n  5
    \ CERTIFICATE            Certificate             [RFC5280] id-pkix1-e\n  6  X509
    CRL               CertificateList         [RFC5280] id-pkix1-e\n  7  CERTIFICATE
    REQUEST    CertificationRequest    [RFC2986] id-pkcs10\n  8  PKCS7                  ContentInfo
    \            [RFC2315] id-pkcs7*\n  9  CMS                    ContentInfo             [RFC5652]
    id-cms2004\n 10  PRIVATE KEY            PrivateKeyInfo ::=      [RFC5208] id-pkcs8\n
    \                           OneAsymmetricKey        [RFC5958] id-aKPV1\n 11  ENCRYPTED
    PRIVATE KEY  EncryptedPrivateKeyInfo [RFC5958] id-aKPV1\n 12  ATTRIBUTE CERTIFICATE
    \ AttributeCertificate    [RFC5755] id-acv2\n 13  PUBLIC KEY             SubjectPublicKeyInfo
    \   [RFC5280] id-pkix1-e\n                        Figure 4: Convenience Guide\n
    -----------------------------------------------------------------------\n id-pkixmod
    OBJECT IDENTIFIER ::= {iso(1) identified-organization(3)\n            dod(6) internet(1)
    security(5) mechanisms(5) pkix(7) mod(0)}\n id-pkix1-e OBJECT IDENTIFIER ::= {id-pkixmod
    pkix1-explicit(18)}\n id-acv2    OBJECT IDENTIFIER ::= {id-pkixmod mod-attribute-cert-v2(61)}\n
    id-pkcs    OBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840)\n                                   rsadsi(113549)
    pkcs(1)}\n id-pkcs10  OBJECT IDENTIFIER ::= {id-pkcs 10 modules(1) pkcs-10(1)}\n
    id-pkcs7   OBJECT IDENTIFIER ::= {id-pkcs 7 modules(0) pkcs-7(1)}\n id-pkcs8   OBJECT
    IDENTIFIER ::= {id-pkcs 8 modules(1) pkcs-8(1)}\n id-sm-mod  OBJECT IDENTIFIER
    ::= {id-pkcs 9 smime(16) modules(0)}\n id-aKPV1   OBJECT IDENTIFIER ::= {id-sm-mod
    mod-asymmetricKeyPkgV1(50)}\n id-cms2004 OBJECT IDENTIFIER ::= {id-sm-mod cms-2004(24)}\n
    \  * This OID does not actually appear in PKCS #7 v1.5 [RFC2315].  It\n   was
    defined in the ASN.1 module to PKCS #7 v1.6 [P7v1.6], and has\n   been carried
    forward through PKCS #12 [RFC7292].\n        Figure 5: ASN.1 Module Object Identifier
    Value Assignments\n"
  title: 4.  Guide
- contents:
  - '5.  Textual Encoding of Certificates

    '
  - contents:
    - "5.1.  Encoding\n   Public-key certificates are encoded using the \"CERTIFICATE\"
      label.\n   The encoded data MUST be a BER (DER strongly preferred; see\n   Appendix
      B) encoded ASN.1 Certificate structure as described in\n   Section 4 of [RFC5280].\n"
    - '-----BEGIN CERTIFICATE-----

      '
    - 'MIICLDCCAdKgAwIBAgIBADAKBggqhkjOPQQDAjB9MQswCQYDVQQGEwJCRTEPMA0G

      '
    - 'A1UEChMGR251VExTMSUwIwYDVQQLExxHbnVUTFMgY2VydGlmaWNhdGUgYXV0aG9y

      '
    - 'aXR5MQ8wDQYDVQQIEwZMZXV2ZW4xJTAjBgNVBAMTHEdudVRMUyBjZXJ0aWZpY2F0

      '
    - 'ZSBhdXRob3JpdHkwHhcNMTEwNTIzMjAzODIxWhcNMTIxMjIyMDc0MTUxWjB9MQsw

      '
    - 'CQYDVQQGEwJCRTEPMA0GA1UEChMGR251VExTMSUwIwYDVQQLExxHbnVUTFMgY2Vy

      '
    - 'dGlmaWNhdGUgYXV0aG9yaXR5MQ8wDQYDVQQIEwZMZXV2ZW4xJTAjBgNVBAMTHEdu

      '
    - 'dVRMUyBjZXJ0aWZpY2F0ZSBhdXRob3JpdHkwWTATBgcqhkjOPQIBBggqhkjOPQMB

      '
    - 'BwNCAARS2I0jiuNn14Y2sSALCX3IybqiIJUvxUpj+oNfzngvj/Niyv2394BWnW4X

      '
    - 'uQ4RTEiywK87WRcWMGgJB5kX/t2no0MwQTAPBgNVHRMBAf8EBTADAQH/MA8GA1Ud

      '
    - 'DwEB/wQFAwMHBgAwHQYDVR0OBBYEFPC0gf6YEr+1KLlkQAPLzB9mTigDMAoGCCqG

      '
    - 'SM49BAMCA0gAMEUCIDGuwD1KPyG+hRf88MeyMQcqOFZD0TbVleF+UsAGQ4enAiEA

      '
    - 'l4wOuDwKQa+upc8GftXE2C//4mKANBC6It01gUaTIpo=

      '
    - "-----END CERTIFICATE-----\n                       Figure 6: Certificate Example\n
      \  Historically, the label \"X509 CERTIFICATE\" and also less commonly\n   \"X.509
      CERTIFICATE\" have been used.  Generators conforming to this\n   document MUST
      generate \"CERTIFICATE\" labels and MUST NOT generate\n   \"X509 CERTIFICATE\"
      or \"X.509 CERTIFICATE\" labels.  Parsers SHOULD NOT\n   treat \"X509 CERTIFICATE\"
      or \"X.509 CERTIFICATE\" as equivalent to\n   \"CERTIFICATE\", but a valid exception
      may be for backwards\n   compatibility (potentially together with a warning).\n"
    title: 5.1.  Encoding
  - contents:
    - "5.2.  Explanatory Text\n   Many tools are known to emit explanatory text before
      the BEGIN and\n   after the END lines for PKIX certificates, more than any other
      type.\n   If emitted, such text SHOULD be related to the certificate, such as\n
      \  providing a textual representation of key data elements in the\n   certificate.\n"
    - 'Subject: CN=Atlantis

      '
    - 'Issuer: CN=Atlantis

      '
    - 'Validity: from 7/9/2012 3:10:38 AM UTC to 7/9/2013 3:10:37 AM UTC

      '
    - '-----BEGIN CERTIFICATE-----

      '
    - 'MIIBmTCCAUegAwIBAgIBKjAJBgUrDgMCHQUAMBMxETAPBgNVBAMTCEF0bGFudGlz

      '
    - 'MB4XDTEyMDcwOTAzMTAzOFoXDTEzMDcwOTAzMTAzN1owEzERMA8GA1UEAxMIQXRs

      '
    - 'YW50aXMwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAu+BXo+miabDIHHx+yquqzqNh

      '
    - 'Ryn/XtkJIIHVcYtHvIX+S1x5ErgMoHehycpoxbErZmVR4GCq1S2diNmRFZCRtQID

      '
    - 'AQABo4GJMIGGMAwGA1UdEwEB/wQCMAAwIAYDVR0EAQH/BBYwFDAOMAwGCisGAQQB

      '
    - 'gjcCARUDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDAzA1BgNVHQEE

      '
    - 'LjAsgBA0jOnSSuIHYmnVryHAdywMoRUwEzERMA8GA1UEAxMIQXRsYW50aXOCASow

      '
    - 'CQYFKw4DAh0FAANBAKi6HRBaNEL5R0n56nvfclQNaXiDT174uf+lojzA4lhVInc0

      '
    - 'ILwpnZ1izL4MlI9eCSHhVQBHEp2uQdXJB+d5Byg=

      '
    - "-----END CERTIFICATE-----\n            Figure 7: Certificate Example with Explanatory
      Text\n"
    title: 5.2.  Explanatory Text
  - contents:
    - "5.3.  File Extension\n   Although textual encodings of PKIX structures can
      occur anywhere,\n   many tools are known to offer an option to output this encoding
      when\n   serializing PKIX structures.  To promote interoperability and to\n
      \  separate DER encodings from textual encodings, the extension \".crt\"\n   SHOULD
      be used for the textual encoding of a certificate.\n   Implementations should
      be aware that in spite of this recommendation,\n   many tools still default
      to encode certificates in this textual\n   encoding with the extension \".cer\".\n
      \  This section does not disturb the official application/pkix-cert\n   registration
      [RFC2585] in any way (which states that \"each '.cer'\n   file contains exactly
      one certificate, encoded in DER format\"), but\n   merely articulates a widespread,
      de facto alternative.\n"
    title: 5.3.  File Extension
  title: 5.  Textual Encoding of Certificates
- contents:
  - "6.  Textual Encoding of Certificate Revocation Lists\n   Certificate Revocation
    Lists (CRLs) are encoded using the \"X509 CRL\"\n   label.  The encoded data MUST
    be a BER (DER strongly preferred; see\n   Appendix B) encoded ASN.1 CertificateList
    structure as described in\n   Section 5 of [RFC5280].\n"
  - '-----BEGIN X509 CRL-----

    '
  - 'MIIB9DCCAV8CAQEwCwYJKoZIhvcNAQEFMIIBCDEXMBUGA1UEChMOVmVyaVNpZ24s

    '
  - 'IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsT

    '
  - 'PXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9SUEEgSW5jb3JwLiBieSBSZWYu

    '
  - 'LExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDEm

    '
  - 'MCQGA1UECxMdRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUxGDAWBgNVBAMU

    '
  - 'D1NpbW9uIEpvc2Vmc3NvbjEiMCAGCSqGSIb3DQEJARYTc2ltb25Aam9zZWZzc29u

    '
  - 'Lm9yZxcNMDYxMjI3MDgwMjM0WhcNMDcwMjA3MDgwMjM1WjAjMCECEC4QNwPfRoWd

    '
  - 'elUNpllhhTgXDTA2MTIyNzA4MDIzNFowCwYJKoZIhvcNAQEFA4GBAD0zX+J2hkcc

    '
  - 'Nbrq1Dn5IKL8nXLgPGcHv1I/le1MNo9t1ohGQxB5HnFUkRPAY82fR6Epor4aHgVy

    '
  - 'b+5y+neKN9Kn2mPF4iiun+a4o26CjJ0pArojCL1p8T0yyi9Xxvyc/ezaZ98HiIyP

    '
  - 'c3DGMNR+oUmSjKZ0jIhAYmeLxaPHfQwR

    '
  - "-----END X509 CRL-----\n                           Figure 8: CRL Example\n   Historically,
    the label \"CRL\" has rarely been used.  Today, it is not\n   common and many
    popular tools do not understand the label.\n   Therefore, this document standardizes
    \"X509 CRL\" in order to promote\n   interoperability and backwards-compatibility.
    \ Generators conforming\n   to this document MUST generate \"X509 CRL\" labels
    and MUST NOT\n   generate \"CRL\" labels.  Parsers SHOULD NOT treat \"CRL\" as
    equivalent\n   to \"X509 CRL\".\n"
  title: 6.  Textual Encoding of Certificate Revocation Lists
- contents:
  - "7.  Textual Encoding of PKCS #10 Certification Request Syntax\n   PKCS #10 Certification
    Requests are encoded using the\n   \"CERTIFICATE REQUEST\" label.  The encoded
    data MUST be a BER (DER\n   strongly preferred; see Appendix B) encoded ASN.1\n
    \  CertificationRequest structure as described in [RFC2986].\n"
  - '-----BEGIN CERTIFICATE REQUEST-----

    '
  - 'MIIBWDCCAQcCAQAwTjELMAkGA1UEBhMCU0UxJzAlBgNVBAoTHlNpbW9uIEpvc2Vm

    '
  - 'c3NvbiBEYXRha29uc3VsdCBBQjEWMBQGA1UEAxMNam9zZWZzc29uLm9yZzBOMBAG

    '
  - 'ByqGSM49AgEGBSuBBAAhAzoABLLPSkuXY0l66MbxVJ3Mot5FCFuqQfn6dTs+9/CM

    '
  - 'EOlSwVej77tj56kj9R/j9Q+LfysX8FO9I5p3oGIwYAYJKoZIhvcNAQkOMVMwUTAY

    '
  - 'BgNVHREEETAPgg1qb3NlZnNzb24ub3JnMAwGA1UdEwEB/wQCMAAwDwYDVR0PAQH/

    '
  - 'BAUDAwegADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDATAKBggqhkjOPQQDAgM/ADA8

    '
  - 'AhxBvfhxPFfbBbsE1NoFmCUczOFApEuQVUw3ZP69AhwWXk3dgSUsKnuwL5g/ftAY

    '
  - 'dEQc8B8jAcnuOrfU

    '
  - "-----END CERTIFICATE REQUEST-----\n                        Figure 9: PKCS #10
    Example\n   The label \"NEW CERTIFICATE REQUEST\" is also in wide use.  Generators\n
    \  conforming to this document MUST generate \"CERTIFICATE REQUEST\"\n   labels.
    \ Parsers MAY treat \"NEW CERTIFICATE REQUEST\" as equivalent to\n   \"CERTIFICATE
    REQUEST\".\n"
  title: '7.  Textual Encoding of PKCS #10 Certification Request Syntax'
- contents:
  - "8.  Textual Encoding of PKCS #7 Cryptographic Message Syntax\n   PKCS #7 Cryptographic
    Message Syntax structures are encoded using the\n   \"PKCS7\" label.  The encoded
    data MUST be a BER-encoded ASN.1\n   ContentInfo structure as described in [RFC2315].\n"
  - '-----BEGIN PKCS7-----

    '
  - 'MIHjBgsqhkiG9w0BCRABF6CB0zCB0AIBADFho18CAQCgGwYJKoZIhvcNAQUMMA4E

    '
  - 'CLfrI6dr0gUWAgITiDAjBgsqhkiG9w0BCRADCTAUBggqhkiG9w0DBwQIZpECRWtz

    '
  - 'u5kEGDCjerXY8odQ7EEEromZJvAurk/j81IrozBSBgkqhkiG9w0BBwEwMwYLKoZI

    '
  - 'hvcNAQkQAw8wJDAUBggqhkiG9w0DBwQI0tCBcU09nxEwDAYIKwYBBQUIAQIFAIAQ

    '
  - 'OsYGYUFdAH0RNc1p4VbKEAQUM2Xo8PMHBoYdqEcsbTodlCFAZH4=

    '
  - "-----END PKCS7-----\n                        Figure 10: PKCS #7 Example\n   The
    label \"CERTIFICATE CHAIN\" has been in use to denote a degenerate\n   PKCS #7
    structure that contains only a list of certificates (see\n   Section 9 of [RFC2315]).
    \ Several modern tools do not support this\n   label.  Generators MUST NOT generate
    the \"CERTIFICATE CHAIN\" label.\n   Parsers SHOULD NOT treat \"CERTIFICATE CHAIN\"
    as equivalent to\n   \"PKCS7\".\n   PKCS #7 is an old specification that has long
    been superseded by CMS\n   [RFC5652].  Implementations SHOULD NOT generate PKCS
    #7 when CMS is\n   an alternative.\n"
  title: '8.  Textual Encoding of PKCS #7 Cryptographic Message Syntax'
- contents:
  - "9.  Textual Encoding of Cryptographic Message Syntax\n   Cryptographic Message
    Syntax structures are encoded using the \"CMS\"\n   label.  The encoded data MUST
    be a BER-encoded ASN.1 ContentInfo\n   structure as described in [RFC5652].\n"
  - '-----BEGIN CMS-----

    '
  - 'MIGDBgsqhkiG9w0BCRABCaB0MHICAQAwDQYLKoZIhvcNAQkQAwgwXgYJKoZIhvcN

    '
  - 'AQcBoFEET3icc87PK0nNK9ENqSxItVIoSa0o0S/ISczMs1ZIzkgsKk4tsQ0N1nUM

    '
  - 'dvb05OXi5XLPLEtViMwvLVLwSE0sKlFIVHAqSk3MBkkBAJv0Fx0=

    '
  - "-----END CMS-----\n                          Figure 11: CMS Example\n   CMS is
    the IETF successor to PKCS #7.  Section 1.1.1 of [RFC5652]\n   describes the changes
    since PKCS #7 v1.5.  Implementations SHOULD\n   generate CMS when it is an alternative,
    promoting interoperability\n   and forwards-compatibility.\n"
  title: 9.  Textual Encoding of Cryptographic Message Syntax
- contents:
  - "10.  One Asymmetric Key and the Textual Encoding of PKCS #8 Private Key\n     Info\n
    \  Unencrypted PKCS #8 Private Key Information Syntax structures\n   (PrivateKeyInfo),
    renamed to Asymmetric Key Packages\n   (OneAsymmetricKey), are encoded using the
    \"PRIVATE KEY\" label.  The\n   encoded data MUST be a BER (DER preferred; see
    Appendix B) encoded\n   ASN.1 PrivateKeyInfo structure as described in PKCS #8
    [RFC5208], or\n   a OneAsymmetricKey structure as described in [RFC5958].  The
    two are\n   semantically identical and can be distinguished by version number.\n"
  - '-----BEGIN PRIVATE KEY-----

    '
  - 'MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgVcB/UNPxalR9zDYAjQIf

    '
  - 'jojUDiQuGnSJrFEEzZPT/92hRANCAASc7UJtgnF/abqWM60T3XNJEzBv5ez9TdwK

    '
  - 'H0M6xpM2q+53wmsN/eYLdgtjgBd3DBmHtPilCkiFICXyaA8z9LkJ

    '
  - "-----END PRIVATE KEY-----\n       Figure 12: PKCS #8 PrivateKeyInfo (OneAsymmetricKey)
    Example\n"
  title: '10.  One Asymmetric Key and the Textual Encoding of PKCS #8 Private Key'
- contents:
  - "11.  Textual Encoding of PKCS #8 Encrypted Private Key Info\n   Encrypted PKCS
    #8 Private Key Information Syntax structures\n   (EncryptedPrivateKeyInfo), called
    the same in [RFC5958], are encoded\n   using the \"ENCRYPTED PRIVATE KEY\" label.
    \ The encoded data MUST be a\n   BER (DER preferred; see Appendix B) encoded ASN.1\n
    \  EncryptedPrivateKeyInfo structure as described in PKCS #8 [RFC5208]\n   and
    [RFC5958].\n"
  - '-----BEGIN ENCRYPTED PRIVATE KEY-----

    '
  - 'MIHNMEAGCSqGSIb3DQEFDTAzMBsGCSqGSIb3DQEFDDAOBAghhICA6T/51QICCAAw

    '
  - 'FAYIKoZIhvcNAwcECBCxDgvI59i9BIGIY3CAqlMNBgaSI5QiiWVNJ3IpfLnEiEsW

    '
  - 'Z0JIoHyRmKK/+cr9QPLnzxImm0TR9s4JrG3CilzTWvb0jIvbG3hu0zyFPraoMkap

    '
  - '8eRzWsIvC5SVel+CSjoS2mVS87cyjlD+txrmrXOVYDE+eTgMLbrLmsWh3QkCTRtF

    '
  - 'QC7k0NNzUHTV9yGDwfqMbw==

    '
  - "-----END ENCRYPTED PRIVATE KEY-----\n            Figure 13: PKCS #8 EncryptedPrivateKeyInfo
    Example\n"
  title: '11.  Textual Encoding of PKCS #8 Encrypted Private Key Info'
- contents:
  - "12.  Textual Encoding of Attribute Certificates\n   Attribute certificates are
    encoded using the \"ATTRIBUTE CERTIFICATE\"\n   label.  The encoded data MUST
    be a BER (DER strongly preferred; see\n   Appendix B) encoded ASN.1 AttributeCertificate
    structure as described\n   in [RFC5755].\n"
  - '-----BEGIN ATTRIBUTE CERTIFICATE-----

    '
  - 'MIICKzCCAZQCAQEwgZeggZQwgYmkgYYwgYMxCzAJBgNVBAYTAlVTMREwDwYDVQQI

    '
  - 'DAhOZXcgWW9yazEUMBIGA1UEBwwLU3RvbnkgQnJvb2sxDzANBgNVBAoMBkNTRTU5

    '
  - 'MjE6MDgGA1UEAwwxU2NvdHQgU3RhbGxlci9lbWFpbEFkZHJlc3M9c3N0YWxsZXJA

    '
  - 'aWMuc3VueXNiLmVkdQIGARWrgUUSoIGMMIGJpIGGMIGDMQswCQYDVQQGEwJVUzER

    '
  - 'MA8GA1UECAwITmV3IFlvcmsxFDASBgNVBAcMC1N0b255IEJyb29rMQ8wDQYDVQQK

    '
  - 'DAZDU0U1OTIxOjA4BgNVBAMMMVNjb3R0IFN0YWxsZXIvZW1haWxBZGRyZXNzPXNz

    '
  - 'dGFsbGVyQGljLnN1bnlzYi5lZHUwDQYJKoZIhvcNAQEFBQACBgEVq4FFSjAiGA8z

    '
  - 'OTA3MDIwMTA1MDAwMFoYDzM5MTEwMTMxMDUwMDAwWjArMCkGA1UYSDEiMCCGHmh0

    '
  - 'dHA6Ly9pZGVyYXNobi5vcmcvaW5kZXguaHRtbDANBgkqhkiG9w0BAQUFAAOBgQAV

    '
  - 'M9axFPXXozEFcer06bj9MCBBCQLtAM7ZXcZjcxyva7xCBDmtZXPYUluHf5OcWPJz

    '
  - '5XPus/xS9wBgtlM3fldIKNyNO8RsMp6Ocx+PGlICc7zpZiGmCYLl64lAEGPO/bsw

    '
  - 'Smluak1aZIttePeTAHeJJs8izNJ5aR3Wcd3A5gLztQ==

    '
  - "-----END ATTRIBUTE CERTIFICATE-----\n                 Figure 14: Attribute Certificate
    Example\n"
  title: 12.  Textual Encoding of Attribute Certificates
- contents:
  - "13.  Textual Encoding of Subject Public Key Info\n   Public keys are encoded
    using the \"PUBLIC KEY\" label.  The encoded\n   data MUST be a BER (DER preferred;
    see Appendix B) encoded ASN.1\n   SubjectPublicKeyInfo structure as described
    in Section 4.1.2.7 of\n   [RFC5280].\n"
  - '-----BEGIN PUBLIC KEY-----

    '
  - 'MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEn1LlwLN/KBYQRVH6HfIMTzfEqJOVztLe

    '
  - 'kLchp2hi78cCaMY81FBlYs8J9l7krc+M4aBeCGYFjba+hiXttJWPL7ydlE+5UG4U

    '
  - 'Nkn3Eos8EiZByi9DVsyfy9eejh+8AXgp

    '
  - "-----END PUBLIC KEY-----\n                Figure 15: Subject Public Key Info
    Example\n"
  title: 13.  Textual Encoding of Subject Public Key Info
- contents:
  - "14.  Security Considerations\n   Data in this format often originates from untrusted
    sources, thus\n   parsers must be prepared to handle unexpected data without causing\n
    \  security vulnerabilities.\n   Implementers building implementations that rely
    on canonical\n   representation or the ability to fingerprint a particular data
    object\n   need to understand that this document does not define canonical\n   encodings.
    \ The first ambiguity is introduced by permitting the text-\n   encoded representation
    instead of the binary BER or DER encodings,\n   but further ambiguities arise
    when multiple labels are treated as\n   similar.  Variations of whitespace and
    non-base64 alphabetic\n   characters can create further ambiguities.  Data encoding
    ambiguities\n   also create opportunities for side channels.  If canonical encodings\n
    \  are desired, the encoded structure must be decoded and processed into\n   a
    canonical form (namely, DER encoding).\n"
  title: 14.  Security Considerations
- contents:
  - '15.  References

    '
  - contents:
    - "15.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2315]
      \ Kaliski, B., \"PKCS #7: Cryptographic Message Syntax\n              Version
      1.5\", RFC 2315, March 1998,\n              <http://www.rfc-editor.org/info/rfc2315>.\n
      \  [RFC2986]  Nystrom, M. and B. Kaliski, \"PKCS #10: Certification\n              Request
      Syntax Specification Version 1.7\", RFC 2986,\n              November 2000,
      <http://www.rfc-editor.org/info/rfc2986>.\n   [RFC4648]  Josefsson, S., \"The
      Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648, October
      2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May
      2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n   [RFC5234]
      \ Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n
      \  [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n
      \             RFC 5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC5755]  Farrell, S., Housley, R., and S. Turner, \"An Internet\n              Attribute
      Certificate Profile for Authorization\", RFC\n              5755, January 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5755>.\n   [RFC5958]  Turner,
      S., \"Asymmetric Key Packages\", RFC 5958, August\n              2010, <http://www.rfc-editor.org/info/rfc5958>.\n
      \  [X.690]    International Telecommunications Union, \"Information\n              Technology
      - ASN.1 encoding rules: Specification of Basic\n              Encoding Rules
      (BER), Canonical Encoding Rules (CER) and\n              Distinguished Encoding
      Rules (DER)\", ITU-T Recommendation\n              X.690, ISO/IEC 8825-1:2008,
      November 2008.\n"
    title: 15.1.  Normative References
  - contents:
    - "15.2.  Informative References\n   [RFC934]   Rose, M. and E. Stefferud, \"Proposed
      standard for message\n              encapsulation\", RFC 934, January 1985,\n
      \             <http://www.rfc-editor.org/info/rfc934>.\n   [RFC1421]  Linn,
      J., \"Privacy Enhancement for Internet Electronic\n              Mail: Part
      I: Message Encryption and Authentication\n              Procedures\", RFC 1421,
      February 1993,\n              <http://www.rfc-editor.org/info/rfc1421>.\n   [RFC2585]
      \ Housley, R. and P. Hoffman, \"Internet X.509 Public Key\n              Infrastructure
      Operational Protocols: FTP and HTTP\", RFC\n              2585, May 1999, <http://www.rfc-editor.org/info/rfc2585>.\n
      \  [RFC4716]  Galbraith, J. and R. Thayer, \"The Secure Shell (SSH)\n              Public
      Key File Format\", RFC 4716, November 2006,\n              <http://www.rfc-editor.org/info/rfc4716>.\n
      \  [RFC4880]  Callas, J., Donnerhacke, L., Finney, H., Shaw, D., and R.\n              Thayer,
      \"OpenPGP Message Format\", RFC 4880, November 2007,\n              <http://www.rfc-editor.org/info/rfc4880>.\n
      \  [RFC5208]  Kaliski, B., \"Public-Key Cryptography Standards (PKCS) #8:\n
      \             Private-Key Information Syntax Specification Version 1.2\",\n
      \             RFC 5208, May 2008,\n              <http://www.rfc-editor.org/info/rfc5208>.\n
      \  [RFC7292]  Moriarty, K., Ed., Nystrom, M., Parkinson, S., Rusch, A.,\n              and
      M. Scott, \"PKCS #12: Personal Information Exchange\n              Syntax v1.1\",
      RFC 7292, July 2014,\n              <http://www.rfc-editor.org/info/rfc7292>.\n
      \  [P7v1.6]   Kaliski, B. and K. Kingdon, \"Extensions and Revisions to\n              PKCS
      #7 (Version 1.6 Bulletin)\", May 1997,\n              <http://www.emc.com/emc-plus/rsa-labs/\n
      \             standards-initiatives/pkcs-7-cryptographic-message-\n              syntax-standar.htm>.\n
      \  [X.509SG]  Gutmann, P., \"X.509 Style Guide\", October 2000,\n              <http://www.cs.auckland.ac.nz/~pgut001/pubs/\n
      \             x509guide.txt>.\n"
    title: 15.2.  Informative References
  title: 15.  References
- contents:
  - "Appendix A.  Non-conforming Examples\n   This appendix contains examples for
    the non-recommended label\n   variants described earlier in this document.  As
    discussed earlier,\n   supporting these is not required and is sometimes discouraged.\n
    \  Still, they can be useful for interoperability testing and for easy\n   reference.\n"
  - '-----BEGIN X509 CERTIFICATE-----

    '
  - 'MIIBHDCBxaADAgECAgIcxzAJBgcqhkjOPQQBMBAxDjAMBgNVBAMUBVBLSVghMB4X

    '
  - 'DTE0MDkxNDA2MTU1MFoXDTI0MDkxNDA2MTU1MFowEDEOMAwGA1UEAxQFUEtJWCEw

    '
  - 'WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATwoQSr863QrR0PoRIYQ96H7WykDePH

    '
  - 'Wa0eVAE24bth43wCNc+U5aZ761dhGhSSJkVWRgVH5+prLIr+nzfIq+X4oxAwDjAM

    '
  - 'BgNVHRMBAf8EAjAAMAkGByqGSM49BAEDRwAwRAIfMdKS5F63lMnWVhi7uaKJzKCs

    '
  - 'NnY/OKgBex6MIEAv2AIhAI2GdvfL+mGvhyPZE+JxRxWChmggb5/9eHdUcmW/jkOH

    '
  - "-----END X509 CERTIFICATE-----\n            Figure 16: Non-standard 'X509' Certificate
    Example\n"
  - '-----BEGIN X.509 CERTIFICATE-----

    '
  - 'MIIBHDCBxaADAgECAgIcxzAJBgcqhkjOPQQBMBAxDjAMBgNVBAMUBVBLSVghMB4X

    '
  - 'DTE0MDkxNDA2MTU1MFoXDTI0MDkxNDA2MTU1MFowEDEOMAwGA1UEAxQFUEtJWCEw

    '
  - 'WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATwoQSr863QrR0PoRIYQ96H7WykDePH

    '
  - 'Wa0eVAE24bth43wCNc+U5aZ761dhGhSSJkVWRgVH5+prLIr+nzfIq+X4oxAwDjAM

    '
  - 'BgNVHRMBAf8EAjAAMAkGByqGSM49BAEDRwAwRAIfMdKS5F63lMnWVhi7uaKJzKCs

    '
  - 'NnY/OKgBex6MIEAv2AIhAI2GdvfL+mGvhyPZE+JxRxWChmggb5/9eHdUcmW/jkOH

    '
  - "-----END X.509 CERTIFICATE-----\n            Figure 17: Non-standard 'X.509'
    Certificate Example\n"
  - '-----BEGIN NEW CERTIFICATE REQUEST-----

    '
  - 'MIIBWDCCAQcCAQAwTjELMAkGA1UEBhMCU0UxJzAlBgNVBAoTHlNpbW9uIEpvc2Vm

    '
  - 'c3NvbiBEYXRha29uc3VsdCBBQjEWMBQGA1UEAxMNam9zZWZzc29uLm9yZzBOMBAG

    '
  - 'ByqGSM49AgEGBSuBBAAhAzoABLLPSkuXY0l66MbxVJ3Mot5FCFuqQfn6dTs+9/CM

    '
  - 'EOlSwVej77tj56kj9R/j9Q+LfysX8FO9I5p3oGIwYAYJKoZIhvcNAQkOMVMwUTAY

    '
  - 'BgNVHREEETAPgg1qb3NlZnNzb24ub3JnMAwGA1UdEwEB/wQCMAAwDwYDVR0PAQH/

    '
  - 'BAUDAwegADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDATAKBggqhkjOPQQDAgM/ADA8

    '
  - 'AhxBvfhxPFfbBbsE1NoFmCUczOFApEuQVUw3ZP69AhwWXk3dgSUsKnuwL5g/ftAY

    '
  - 'dEQc8B8jAcnuOrfU

    '
  - "-----END NEW CERTIFICATE REQUEST-----\n              Figure 18: Non-standard
    'NEW' PKCS #10 Example\n"
  - '-----BEGIN CERTIFICATE CHAIN-----

    '
  - 'MIHjBgsqhkiG9w0BCRABF6CB0zCB0AIBADFho18CAQCgGwYJKoZIhvcNAQUMMA4E

    '
  - 'CLfrI6dr0gUWAgITiDAjBgsqhkiG9w0BCRADCTAUBggqhkiG9w0DBwQIZpECRWtz

    '
  - 'u5kEGDCjerXY8odQ7EEEromZJvAurk/j81IrozBSBgkqhkiG9w0BBwEwMwYLKoZI

    '
  - 'hvcNAQkQAw8wJDAUBggqhkiG9w0DBwQI0tCBcU09nxEwDAYIKwYBBQUIAQIFAIAQ

    '
  - 'OsYGYUFdAH0RNc1p4VbKEAQUM2Xo8PMHBoYdqEcsbTodlCFAZH4=

    '
  - "-----END CERTIFICATE CHAIN-----\n            Figure 19: Non-standard 'CERTIFICATE
    CHAIN' Example\n"
  title: Appendix A.  Non-conforming Examples
- contents:
  - "Appendix B.  DER Expectations\n   This appendix is informative.  Consult the
    respective standards for\n   the normative rules.\n   DER is a restricted profile
    of BER [X.690]; thus, all DER encodings\n   of data values are BER encodings,
    but just one of the BER encodings\n   is the DER encoding for a data value.  Canonical
    encoding matters\n   when performing cryptographic operations; additionally, canonical\n
    \  encoding has certain efficiency advantages for parsers.  There are\n   three
    principal reasons to encode with DER:\n   1.  A digital signature is (supposed
    to be) computed over the DER\n       encoding of the semantic content, so providing
    anything other\n       than the DER encoding is senseless.  (In practice, an implementer\n
    \      might choose to have an implementation parse and digest the data\n       as
    is, but this practice amounts to guesswork.)\n   2.  In practice, cryptographic
    hashes are computed over the DER\n       encoding for identification.\n   3.  In
    practice, the content is small.  DER always encodes data\n       values in definite-length
    form (where the length is stated at the\n       beginning of the encoding); thus,
    a parser can anticipate memory\n       or resource usage up front.\n   Figure
    20 matches the structures in this document with the particular\n   reasons for
    DER encoding:\n                    Sec. Label                  Reasons\n                    ----+----------------------+-------\n
    \                     5  CERTIFICATE            1  2 ~3\n                      6
    \ X509 CRL               1\n                      7  CERTIFICATE REQUEST    1
    \   ~3\n                      8  PKCS7                  *\n                      9
    \ CMS                    *\n                     10  PRIVATE KEY                  3\n
    \                    11  ENCRYPTED PRIVATE KEY        3\n                     12
    \ ATTRIBUTE CERTIFICATE  1    ~3\n                     13  PUBLIC KEY                2
    \ 3\n                     Figure 20: Guide for DER Encoding\n   * Cryptographic
    Message Syntax is designed for content of any length;\n     indefinite-length
    encoding enables one-pass processing (streaming)\n     when generating the encoding.
    \ Only certain parts -- namely, signed\n     and authenticated attributes -- need
    to be DER encoded.\n   ~ Although not always \"small\", these encoded structures
    should not be\n     particularly \"large\" (e.g., more than 16 kilobytes).  The
    parser\n     ought to be informed of large things up front in any event; this
    is\n     yet another reason to DER encode these things in the first place.\n                     Figure
    20: Guide for DER Encoding\n"
  title: Appendix B.  DER Expectations
- contents:
  - "Acknowledgements\n   Peter Gutmann suggested to document labels for Attribute
    Certificates\n   and PKCS #7 messages, and to add examples for the non-standard\n
    \  variants.  Dr. Stephen Henson suggested distinguishing when BER\n   versus
    DER is appropriate or necessary.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Simon Josefsson\n   SJD AB\n   Johan Olof Wallins Vaeg
    13\n   Solna  171 64\n   Sweden\n   EMail: simon@josefsson.org\n   URI:   http://josefsson.org/\n
    \  Sean Leonard\n   Penango, Inc.\n   5900 Wilshire Boulevard\n   21st Floor\n
    \  Los Angeles, CA  90036\n   United States\n   EMail: dev+ietf@seantek.com\n
    \  URI:   http://www.penango.com/\n"
  title: Authors' Addresses
