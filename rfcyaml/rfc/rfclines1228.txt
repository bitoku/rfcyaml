Simple Network Management Protocol Distributed Program Interface Status of this Memo
This RFC describes a protocol that International Business Machines Corporation (IBM) has been implementing in most of its SNMP agents to allow dynamic extension of supported MIBs.
This is an Experimental Protocol for the Internet community.
Discussion and suggestions for improvement are requested.
Please refer to the current edition of the "IAB Official Protocol Standards" for the standardization state and status of this protocol.
Distribution of this memo is unlimited.
The Simple Network Management Protocol (SNMP)
[1] Distributed Program Interface (DPI) is an extension to SNMP agents that permits end users to dynamically add, delete or replace management variables in the local Management Information Base without requiring recompilation of the SNMP agent.
This is achieved by writing a so called sub agent that communicates with the agent via the SNMP DPI.
For the author of a sub agent, the SNMP DPI eliminates the need to know the details of ASN.1 [2] or
SNMP PDU (Protocol Data Unit) encoding/decoding [1, 3].
This protocol has been in use within IBM since 1989 and is included in the SNMP agents for VM, MVS and OS/2.
Potentially useful sample sub agent code and implementation examples are available for anonymous FTP from the University of Toronto.
The Simple Network Management Protocol [1] defines a protocol that permits operations on a collection of variables.
This set of variables is called the Management Information Base (MIB) and a core set of variables has previously been defined [4, 5]; however, the design of the MIB makes provision for extension of this core set.
Thus, an enterprise or individual can define variables of their own which represent information of use to them.
An example of a potentially interesting variable which is not in the core MIB would be CPU utilization (percent busy).
Unfortunately, conventional SNMP agent implementations provide no means for an end user to make available new variables.
The SNMP DPI addresses this issue by providing a light weight mechanism by which a process can register the existence of a MIB variable with the SNMP agent.
When requests for the variable are received by the SNMP agent, it will pass the query on to the process acting as a sub agent.
This sub agent then returns an appropriate answer to the SNMP agent.
The SNMP agent eventually packages an SNMP response packet and sends the answer back to the remote network management station that initiated the request.
None of the remote network management stations have any knowledge that the SNMP agent calls on other processes to obtain an answer.
As far as they can tell, there is only one network management application running on the host.
ESTABLISHMENT Communication between the SNMP Agent and its clients (sub agents) takes place over a stream connection.
This is typically a TCP connection, but other stream oriented transport mechanisms can be used.
As an example, the VM SNMP agent allows DPI connections over IUCV (Inter User Communications Vehicle) [6, 7].
Other than the connection establishment procedure, the protocol used is identical in these environments.
Regardless of the connection oriented transport mechanism used, after establishing a connection to the SNMP agent, the sub agent registers the set of variables it supports.
Finally, when all the variable classes have been registered, the sub agent then waits for requests from the SNMP agent or generates traps as required.
There are three requests that can be initiated by the SNMP agent: GET, GET NEXT and SET.
These correspond directly to the three SNMP requests that a network management station can make.
The sub agent responds to a request with a RESPONSE packet.
There are currently two requests that can be initiated by a sub  agent: REGISTER and TRAP.
SNMP DPI overview Remarks for Figure 1:
The SNMP agent communicates with the SNMP manager via the standard SNMP protocol.
The SNMP agent communicates with the TCP/IP layers and kernel (operating system) in an implementation dependent manner.
It potentially implements the standard MIB view in this way.
An SNMP sub agent, running as a separate process (potentially even on another machine), can register objects with the SNMP agent.
The SNMP agent will decode SNMP Packets.
If such a packet contains a Get/GetNext or Set request for an object registered by a sub agent, it will send the request to the sub agent via the corresponding query packet.
The SNMP sub agent sends responses back via a RESPONSE packet.
The SNMP agent then encodes the reply into an SNMP packet and sends it back to the requesting SNMP manager.
If the sub agent wants to report an important state change, it sends a TRAP packet to the SNMP agent, which will encode it into an SNMP trap packet and send it to the manager(s).
This section describes the actual protocol used between the SNMP agent and sub agents.
This information has not previously been published.
In a TCP/IP environment, the SNMP agent listens on an arbitrary TCP port for a connection request from a sub agent.
It is important to realize that a well known port is not used:  every invocation of the SNMP agent will potentially result in a different TCP port being used.
A sub agent needs to determine this port number to establish a connection.
The sub agent learns the port number from the agent by sending it one conventional SNMP get request PDU.
The port number is maintained by the SNMP agent as the object whose identifier is 1.3.6.1.4.1.2.2.1.1.0; this variable is registered under the IBM enterprise specific tree.
The SNMP agent replies with a conventional SNMP response PDU that contains the port number to be used.
This response is examined by the sub agent and the port number is extracted.
The sub agent then establishes the connection to the specified port.
On the surface, this procedure appears to mean that the sub agent must be able to create and parse SNMP packets, but this is not the case.
The DPI Application Program Interface (API) has a library routine, query DPI port(), which can be used to generate and parse the required SNMP packets.
This routine is very small (under 100 lines of C), so it does not greatly increase the size of any sub  agent).
For completeness, byte by byte descriptions of the packets generated by the SNMP DPI API routine query DPI port() are provided below.
This is probably of little interest to most readers and reading the source to query DPI port() provides much of the same information.
TO GET THE AGENT'S DPI PORT
As noted, before a TCP connection to the SNMP agent can be made, the sub agent must learn which TCP port that the agent is listening on.
To do so, it can issue an SNMP GET for an IBM enterprise specific variable 1.3.6.1.4.1.2.2.1.1.0.
the object instance of ".0" is included for clarity in this document.
The SNMP PDU can be constructed as shown below.
This PDU must be sent to UDP port 161 on the host where the agent runs (probably the same host where the sub agent runs).
SNMP PDU for GET DPI port.
length of community name (depends...)
PDU CONTAINING THE RESPONSE TO THE GET
Assuming that no errors occured, then the port is returned in the last 2 octets of the received packet.
SNMP RESPONSE PDU for GET of Agent's DPI port.
SNMP RESPONSE PDU for GET of Agent's DPI port.
length of community name (depends...)
Each request to or response from the agent is constructed as a "packet" and is written to the stream.
Each packet is prefaced with the length of the data remaining in the packet.
The length is stored in network byte order (most significant byte first, least significant last).
The receiving side will read the packet by doing something similar to: unsigned char len bfr[2]; char  bfr; int len; read(fd,len bfr,2); len   len bfr[0]
len bfr[1]; bfr   malloc(len); read(fd,bfr,len)
the above example makes no provisions for error handling or a read returning less than the requested amount of data.
This is not a suggested coding style.
The first part of every packet identifies the application protocol being used, as well as some version information.
The protocol major version is intended to indicate in broad terms what version of the protocol is used.
The protocol minor version is intended to identify major incompatible versions of the protocol.
The protocol release is intended to indicate incremental modifications to the protocol.
The constants that are valid for these fields are defined in Table 10 on page 18.
The next (common) field in all packets is the packet type.
This field indicates what kind of packet we're dealing with (SNMP DPI GET, GET NEXT, SET, TRAP, RESPONSE or REGISTER).
The permitted values for this field are defined in Table 11 on page 18.
From this point onwards, the contents of the packet are defined by the protocol being used.
The remainder of this section describes:   the structure of packets for the SNMP DPI protocol, version 1.0.
The constants as defined with this version of the protocol.
In order to register a branch in the MIB tree, an SNMP sub agent sends an SNMP DPI REGISTER packet to the agent.
Such a packet contains the standard SNMP DPI header plus REGISTER  specific data, which basically is a null terminated string representing the object ID in dotted ASN.1 notation (with a trailing dot!).
When the SNMP agent receives a PDU containing an SNMP GET request for a variable that a sub agent registered with the agent, it passes an SNMP DPI GET packet to the sub agent.
Such a packet contains the standard SNMP DPI header plus GET specific data, which is basically a null terminated string representing the object ID in dotted ASN.1 notation.
This is the layout of an SNMP
When the SNMP agent receives a PDU containing an SNMP GET
NEXT request for a variable for which a sub agent may be authoritative
, it passes an SNMP
NEXT packet to the sub agent.
Such a packet contains the standard SNMP DPI header plus GET NEXT  specific data.
These data take the form of two null terminated strings.
The first string represents the object ID in dotted ASN.1 notation; the second string represents the group ID in dotted ASN.1 notation.
This is the layout of an SNMP
When the SNMP agent receives a PDU containing an SNMP SET request for a variable that a sub agent registered with the agent, it passes an SNMP DPI SET packet to the sub agent.
Such a packet contains the standard SNMP DPI header plus SET specific data, which is basically a null terminated string representing the object ID in ASN.1 notation, with the type, value length and value to be set.
The permitted types for the type field are defined in Table 12 on page 19.
Integer values are sent as 4 byte elements in network byte order (most significant byte first, least significant byte last).
An SNMP sub agent must respond to a GET, GET NEXT or SET
request that it has received from the agent (unless it fails or has a bug).
To do so, it sends an SNMP DPI RESPONSE packet to the agent.
Such a packet contains the standard SNMP DPI header plus RESPONSE specific data, which basically is an error code plus (if there was no error), the name/type/value tuple representing the returned object.
This is described as by a string representing the object ID in ASN.1 notation, plus the type, value length and value of the object that was manipulated.
The permitted types for the type field are defined in Table 12 on page 19.
Integer values are sent as 4 byte elements in network byte order (most significant byte first, least significant byte last).
An SNMP sub agent can request the agent to generate a TRAP by sending an SNMP DPI TRAP packet to the agent.
Such a packet contains the standard SNMP DPI header plus TRAP specific data, which is basically the generic and specific trap code, plus a name/type/value tuple.
The tuple is described by a string representing the object ID in ASN.1 notation, plus the type, value length and value of the object that is being sent in the trap.
The permitted types for the type field are defined in Table 12 on page 19.
Integer values are sent as 4 byte elements in network byte order (most significant byte first, least significant byte last).
This is the layout of
This section describes the constants that have been defined for this version of the SNMP DPI Protocol.
Protocol version and release values
Any other values are currently undefined.
Fields which represent values that are stored as a 4 byte integer are indicated by ORing their base type value with 128.
Error Code Values for SNMP Agent Detected Errors
This information has been previously published [6, 8], but the information provided below is more current as of May 14, 1991.
GET PROCESSING A GET request is the easiest to process.
When the DPI packet is parsed, the parse tree holds the object ID of the variable being requested.
If the specified object is not supported by the sub agent, it would return an error indication of "no such name".
No name/type/value information would be returned.
This is demonstrated below (a string is being returned).
get request  / data   "a string to be returned";
) 1,data); cp   mkDPIresponse(0,ret value);
SET PROCESSING Processing a SET request is only slightly more difficult than a GET request.
In this case, additional information is made available in the parse tree, namely the type, length and value to be set.
The sub agent may return an error indication of "no such name" if the variable is unrecognized, just as in a GET request.
If the variable is recognized, but cannot be set, an error indication of "no such name" should be also be returned, although it is tempting to return a "read only" error.
NEXT requests are the most complicated requests to process.
After parsing a GET NEXT request, the parse tree will contain two parameters.
One is the object ID on which the GET NEXT operation is being performed.
The semantics of the operation are that the sub  agent is to return the name/type/value of the next variable it supports whose name lexicographically follows the passed object ID.
It is important to realize that a given sub agent may support several discontiguous sections of the MIB tree.
In such a situation it would be incorrect to jump from one section to another.
This problem is correctly handled by examining the second parameter which is passed.
This parameter represents the "reason" why the sub agent is being called.
It holds the prefix of the tree that the sub agent had indicated it supported.
If the next variable supported by the sub agent does not begin with that prefix, the sub agent must return an error indication of "no such name".
If required, the SNMP agent will call upon the sub agent again, but pass it a different group prefix.
This is illustrated in the discussion below:
Assume there are two sub agents.
The first sub agent registers two distinct sections of the tree, A and C.
In reality, the sub agent supports variables A.1 and A.2, but it correctly registers the minimal prefix required to uniquely identify the variable class it supports.
The second sub agent registers a different section, B, which appears between the two sections registered by the first agent.
If a remote management station begins dumping the MIB, starting from A, the following sequence of queries would be performed: Sub agent 1 gets called: get next(A,A)
Sub agent 2 is then called: get next(A.2,B)
Sub agent 1 gets called again: get next(B.1,C)
A sub agent must register the variables it supports with the SNMP agent.
The appropriate packets may be created using the DPI API library routine mkDPIregister().
A sub agent can request that the SNMP agent generate a trap for it.
The sub agent must provide the desired values for the generic and specific parameters of the trap.
It may optionally provide a name/type/value parameter that will be included in the trap packet.
The DPI API library routine mkDPItrap() can be used to generate the required packet.
This section documents Application Program Interfaces to the DPI.
QUERY DPI PORT() int port; char  hostname,  community name; port   query DPI port(hostname, community name);
The query DPI port() function is used by a DPI client to determine what TCP port number is associated with the DPI.
This port number is needed to connect() to the SNMP agent.
If the port cannot be determined,  1 is returned.
The function is passed two arguments:  a string representing the host's name or IP address and the community name to be used when making the request.
This function enables a DPI client to "bootstrap" itself.
The port number is obtained via an SNMP GET request, but the DPI client does not have to be able to create and
parse SNMP packets this is all done by the query DPI port() function.
the query DPI port() function assumes that the community name does not contain any null characters.
If this is not the case, use the  query DPI port() function which takes a third parameter, the length of the community name.
The mkDPIregister() function creates the necessary register request packet and returns a pointer to a static buffer holding the packet contents.
The null pointer (0) is returned if there is an error detected during the creation of the packet.
The length of the remainder packet is stored in the first two bytes of the packet, as demonstrated in the example above.
MKDPISET #include "snmp dpi.h" struct dpi set packet  set value; char  obj id; int type, length; char  value; set value
mkDPIset(obj id, type, length, value);
The mkDPIset() function can be used to create the portion of a parse tree that represents a name/value pair (as would be normally be returned in a response packet).
It returns a pointer to a dynamically allocated parse tree representing the name/type/value information.
If there is an error detected while creating the parse tree, the null pointer (0) is returned.
The value of type can be one of the following (which are defined in the include file "snmp dpi.h"):
The value parameter is always a pointer to the first byte of the object's value.
the parse tree is dynamically allocated and copies are made of the passed parameters.
After a successful call to mkDPIset
(), they can be disposed of in any manner the application chooses without affecting the parse tree contents.
MKDPIRESPONSE #include "snmp dpi.h" unsigned char  packet; int error code; struct dpi set packet  ret value; packet   mkDPIresponse(error code, ret value); len    packet
The mkDPIresponse() function creates an appropriate response packet.
The first is the error code to be returned.
If the error code indicates no error, then the second parameter is a pointer to a parse tree (created by mkDPIset()) which represents the name/type/value information being returned.
If an error is indicated, the second parameter is passed as a null pointer (0).
If the packet can be created, a pointer to a static buffer containing the packet contents is returned.
This is the same buffer used by mkDPIregister().
If an error is encountered while creating the packet, the null pointer (0) is returned.
The length of the remainder packet is stored in the first two bytes of the packet, as demonstrated in the example above.
NOTE:  mkDPIresponse() always frees the passed parse tree.
MKDPITRAP #include "snmp dpi.h" unsigned char  packet; int generic, specific; struct dpi set packet  ret value; packet   mkDPItrap(generic, specific, ret value); len    packet
The mkDPItrap() function creates an appropriate trap request packet.
The first two parameters correspond to to value of the generic and specific fields in the SNMP trap packet.
The third field can be used to pass a name/value pair to be provided in the SNMP trap packet.
This information is passed as the set packet portion of the parse tree.
As an example, a linkDown trap for interface 3 might be generated by the following: struct dpi set packet  if index value; unsigned long data; unsigned char  packet
", SNMP TYPE NUMBER, sizeof(unsigned long), &data); packet   mkDPItrap(2, 0, if index value); len    packet
This is the same buffer used by mkDPIregister().
If an error is encountered while creating the packet, the null pointer (0) is returned.
The length of the remainder packet is stored in the first two bytes of the packet, as demonstrated in the example above.
mkDPItrap() always frees the passed parse tree.
PDPIPACKET #include "snmp dpi.h" unsigned char  packet; struct snmp dpi hdr  hdr; hdr   pDPIpacket(packet)
The pDPIpacket() function parses a DPI packet and returns a parse tree representing its contents.
The parse tree is dynamically allocated and contains copies of the information within the DPI packet.
After a successful call to pDPIpacket(), the packet may be disposed of in any manner the application chooses without affecting the contents of the parse tree.
If an error is encountered during the parse, the null pointer (0) is returned.
the relevant parse tree structures are defined in the include file "snmp dpi.h", and that file remains the definitive reference.
The root of the parse tree is represented by a snmp dpi hdr structure: struct snmp dpi hdr { unsigned char  proto major; unsigned char  proto minor; unsigned char  proto release; unsigned char  packet type;
This field can have one of the following values (which are defined in the include file "snmp dpi.h"):
The packet type field indicates what request is being made of the DPI client.
For each of these requests, the remainder of the packet body will be different.
next request is similar, but the dpi next packet structure also contains the object ID prefix of the group that is currently being traversed
d does not begin with the suffix indicated by group id, the DPI client must return an error indication of SNMP
A set request has the most amount of data associated with it and this is contained in a dpi set packet structure:
The type of the variable is provided in type and may have one of the following values:
The length of the value to be set is stored in value len and value contains a pointer to the value.
the storage pointed to by value will be reclaimed when the parse tree is freed.
The DPI client must make provision for copying the value contents.
FDPIPARSE #include "snmp dpi.h" struct snmp dpi hdr  hdr; fDPIparse(hdr); The routine fDPIparse() frees a parse tree previously created by a call to pDPIpacket
This routine is declared as void it has no return value.
NOTE:  after calling fDPIparse(), no further references to the parse tree can be made.
Although the SNMP DPI protocol is completely documented in this paper, the document itself is somewhat biased towards clearly defining the interface provided to sub agents (i.e., it provides a specification of a C language API).
This detailed coverage is possible because the client side of the interface is completely self contained.
The agent side of the interface has to be integrated into individual vendor implementations, many of which may have a unique organizational structure in an attempt to address various performance and storage constraints.
This makes it infeasible to provide much more than suggestions for SNMP agent implementers.
Unfortunately, this leaves room for a large amount of interpretation which can lead to implementations that don't necessarily work they way
they should   too much ambiguity can be a bad thing.
The following characteristics of an agent implementation are to be considered mandatory:
DUPLICATE REGISTRATIONS With this release of the protocol, order of registration is significant.
The last sub agent to register a variable is the one that is deemed to be authoritative.
Variables implemented by the base SNMP agent are considered to have been registered prior to any sub agent registrations.
Thus sub agents may re implement support for variables that were incorrectly implemented by a vendor.
All SNMP DPI connections are carried over a stream connection.
When the connection is closed by the client (no matter what the cause), the agent must automatically unregister all of the variables that were registered by the sub agent.
A sub agent must respond to a request in a timely fashion.
In this version of the protocol, we specify that a sub agent must respond to a request by the SNMP agent within 5 seconds.
If the sub agent does not respond in time, the SNMP agent should terminate the connection and unregister all of the variables that were previously registered by the sub agent in question.
agent implementations that do not have access to a timer may not be able to implement this.
In that case, they leave themselves open to being placed in a state where they are blocked forever if the sub agent malfunctions.
SUPPORT FOR MULTIPLE MIB VIEWS Some agents allow different MIB views to be selected based on the community name used.
It is not the intention of this document to pass judgement on the various approaches that have been proposed or implemented, but instead merely to recognize the existence of implementations that support this feature.
The point of this discussion is to specify clearly that objects supported by an SNMP DPI sub agent are to be registered under the MIB view that was selected by the community name used in the SNMP GET request that obtained the DPI port value.
The SNMP DPI does not specify a reserved port, but instead sub agents bootstrap themselves by making an SNMP GET request for the DPI port variable.
This variable represents the TCP port to which the sub  agent should connect.
It should be understood that there is no reason why the SNMP agent cannot have several listens (passive opens) active, each corresponding to a distinct MIB view.
The port number returned then would be different based on the community name used in the SNMP
GET request for the DPI port variable.
CONSIDERATIONS FOR THE NEXT RELEASE
The SNMP DPI protocol makes provision for extension and parallel use of potentially incompatible releases.
The discussion above documents the protocol as it is currently in use and has not discussed features of interest that should be considered for a future revision.
For closure, an UNREGISTER request could be of use.
The SNMP protocol [1] specifies that: Each variable assignment specified by the SetRequest PDU should be effected as if simultaneously set with respect to all other assignments specified in the same message.
The SNMP DPI has no provision for backing out a successfully processed SET request if one of the subsequent variable assignments fails.
This omission is a reflection of several biases:
the SNMP DPI was intended to be light weight.
a belief that the SNMP RFC prescribes semantics which are infeasible to implement unless the range of applications is restricted.
It has been suggested that a new request, TEST SET, be added to the DPI protocol.
Processing of a SET request would then be performed as follows:
all variables would be processed using TEST SET unless any error occurred.
The subagents would verify that they could process the request.
if no error occurred, each of the variables would be reprocessed, this time with a SET request.
A problem with such an approach is that it relies on the TEST SET operation to make an assertion that the request can be successfully performed.
If this is not possible, then it cannot be asserted that the prescribed semantics will be provided.
Such situations do exist, for example, a SET request that causes the far end channel service unit to be looped up one does not know if the operation will be successful until it is performed.
SAMPLE SNMP DPI API IMPLEMENTATION
The following C language sources show an example implementation of the SNMP DPI Application Programming Interface as it would be exposed to the sub agents.
SAMPLE SNMP DPI INCLUDE FILE /
SNMP distributed program interface  /
/  integer, len 1,request id
integer, len 1, error status   0
integer, len 1, error index   0
/  varbind , len 0x0e  / 0x06, 0x0a
/ 0x2b, 0x06, 0x01, 0x04, 0x01, 0x02, 0x02, 0x01, 0x01, 0x00, 0x05
host(hostname); packet len   0; bcopy(asn1 hdr, packet, sizeof(asn1 hdr)); packet len    sizeof(asn1 hdr); remaining len   sizeof(version)
; rc   bind(fd, &sock, sizeof(sock)); if (rc < 0) return ( 1);
timeout.tv sec   3; timeout.tv usec   0;
bzero(&dest sock, sizeof(dest sock)); dest sock.sin family   AF INET; dest sock.sin port
htons(161); dest sock.sin addr.s addr   host addr
; tries   0; while ( tries < 4) { rc   sendto(fd, packet, packet len, 0, &dest sock, sizeof(dest sock)); read mask   1 << fd;
/ offset   len 2; port   (packet[offset]
" #endif #include "snmp dpi.h" static struct dpi get packet
(); static struct dpi get packet
(); static struct dpi next packet
mkDPInext(); struct dpi set packet
hdr   (struct snmp dpi hdr  ) malloc(sizeof(struct
; len    2; offset   2; hdr proto major
packet[offset ]; hdr proto minor   packet[offset ]; hdr proto release   packet[offset ]; hdr packet type   packet[offset ]; switch (hdr packet type) { case SNMP
hdr packet body.dpi get   pDPIget(packet
offset, len offset); break; case SNMP
next   pDPInext(packet   offset, len offset); break; case SNMP DPI SET: hdr packet body.dpi set
offset, len offset); break; case SNMP DPI TRAP:
hdr packet body.dpi trap   pDPItrap(packet   offset, len offset)
; break; case SNMP DPI RESPONSE:
hdr packet body.dpi response   pDPIresponse(packet   offset, len offset);
if (get   0) return (0);
dpi next packet)); if (next   0) return (0)
; cp   packet; l   strlen(cp)   1; next object
malloc(l); strcpy(next object id, cp); cp
/ set   (struct dpi set packet  )
dpi set packet)); if (set   0) return (0); cp   packet; l   strlen(cp)   1; set object id
; strcpy(set object id, cp); cp    l;
if (resp   0) return (0); resp ret code    packet; resp ret data
case SNMP DPI REGISTER: fDPIget(hdr);
struct snmp dpi hdr  hdr; { struct dpi get packet  get; get   hdr packet body.dpi get;
if (get   0) return; if (get object id
struct snmp dpi hdr  hdr; { struct dpi next packet  next; next   hdr packet body.dpi next; if (next   0) return; if (next object id)
; if (next group id)
struct snmp dpi hdr  hdr; { struct dpi set packet  set; set   hdr packet body.dpi set; if (set   0) return; if (set object id
{ if (set object id
packet body.dpi get); break; case SNMP
rc   cDPInext(hdr packet body.dpi next); break; case SNMP DPI SET: rc   cDPIset(hdr packet body.dpi set); break; case SNMP DPI TRAP: rc   cDPItrap(hdr packet body.dpi trap); break; case SNMP DPI RESPONSE:
rc   cDPIresponse(hdr packet body.dpi response); break; } if (rc    1) return (0); len   packet len 2; new packet[1]   len & 0xff
0) return ( 1); strcpy(&new packet[packet len], get object id);
) return ( 1); if (next group id   0)
return ( 1); strcpy(&new packet[packet len], next object
id)   1; strcpy(&new packet[packet len],
next group id); packet len    strlen(next
) return ( 1); if ((
0)) return ( 1); strcpy(&new packet[packet len], set object id); packet len
resp ret code; if (resp ret data !
trap generic; new packet[packet len ]
trap specific; if (trap info !
; hdr   mkDPIhdr(cmd); if (hdr   0) return (0); switch (hdr packet type) { case SNMP
hdr packet body.dpi get   mkDPIget(oid name); break; case SNMP
; struct dpi set packet  value list; { struct snmp dpi hdr  hdr; struct dpi resp packet  resp; unsigned char   cp
; hdr   mkDPIhdr(SNMP DPI RESPONSE); resp   (struct dpi resp packet  )
; hdr   mkDPIhdr(SNMP DPI TRAP); trap
(struct dpi trap packet  )
; { struct snmp dpi hdr  hdr; hdr   (struct snmp dpi hdr  ) malloc(sizeof(struct
; if (hdr   0) return (0); hdr proto major   SNMP DPI PROTOCOL; hdr proto minor
SNMP DPI VERSION; hdr proto release
SNMP DPI RELEASE; hdr packet type   type; return (hdr)
; } static struct dpi get packet  mkDPIget(oid name
dpi get packet)); if (get   0) return (0); l   strlen(oid name)   1; get object i
dpi next packet)); if (next   0) return (0); l   strlen(oid name)   1;
malloc(l); strcpy(next object id, oid name); l   strlen(group oid)
(struct dpi set packet  )
dpi set packet)); if (set   0) return (0); l   strlen(oid name)   1; set object id
The complete source to two SNMP DPI related programs is available for anonymous ftp from the University of Toronto.
The host name to use is "vm.utcs.utoronto.ca" (128.100.100.2).
The files are in the "anonymou.204" minidisk, so one must issue a "cd anonymou.204" after having logged in.
Don't forget to use the binary transmission mode.
This program is an SNMP DPI sub agent which allows network management stations to perform remote PINGs.
The source to this applications is in the file "ping eng.tarbin".
The source to the SNMP DPI API is also contained within the archive.
This program illustrates what is required to include the SNMP DPI in an SNMP agent.
This is actually a SMUX based agent that works with the ISODE SNMP agent and provides an interface for SNMP DPI sub  agents.
The source to this program is in the file "dpid.tarbin".
ISODE 6.7, or later, is a prerequisite.
References [1] Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple Network Management Protocol", RFC 1157, SNMP Research, Performance Systems International, Performance Systems International, MIT Laboratory for Computer Science, May 1990.
[2] Information processing systems Open Systems Interconnection, "Specification of Abstract Syntax Notation One (ASN.1)", International Organization for Standardization, International Standard 8824, December 1987.
[3] Information processing systems Open Systems Interconnection, "Specification of Basic Encoding Rules for Abstract Syntax Notation One (ASN.1)", International Organization for Standardization, International Standard 8825, December 1987.
[4] McCloghrie K., and M. Rose, "Management Information Base for Network Management of TCP/IP based internets", RFC 1156, Performance Systems International and Hughes LAN Systems, May 1990.
[5] Rose, M., and K. McCloghrie, "Structure and Identification of Management Information for TCP/IP based internets", RFC 1155, Performance Systems International and Hughes LAN Systems, May 1990.
[6] International Business Machines, Inc., "TCP/IP for VM:
Programmer's Reference", SC31 6084 0, 1990.
[7] International Business Machines, Inc., "Virtual Machine System Facilities for Programming, Release 6", SC24 5288 01, 1988.
[8] International Business Machines, Inc., "TCP/IP Version 1.1 for OS/2
Programmer's Reference", SC31 6077 1, 1990.
Security Considerations Security issues are not discussed in this memo.
Authors' Addresses Geoffrey C. Carpenter IBM T. J. Watson Research Center P. O. Box 218 Yorktown Heights, NY
(914) 945 1970 Email:  gcc@watson.ibm.com
Bert Wijnen IBM International Operations Watsonweg 2 1423 ND Uithoorn
