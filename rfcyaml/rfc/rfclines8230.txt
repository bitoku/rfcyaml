Abstract The CBOR Object Signing and Encryption (COSE) specification defines cryptographic message encodings using Concise Binary Object Representation (CBOR).
This specification defines algorithm encodings and representations enabling RSA algorithms to be used for COSE messages.
Encodings are specified for the use of RSA Probabilistic Signature Scheme (RSASSA PSS) signatures, RSA Encryption Scheme Optimal Asymmetric Encryption Padding (RSAES  OAEP) encryption, and RSA keys.
The CBOR Object Signing and Encryption (COSE)
[RFC8152] specification defines cryptographic message encodings using Concise Binary Object Representation (CBOR) [RFC7049].
This specification defines algorithm encodings and representations enabling RSA algorithms to be used for COSE messages.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The RSASSA PSS signature algorithm is defined in [RFC8017].
The RSASSA PSS signature algorithm is parameterized with a hash function (h), a mask generation function (mgf), and a salt length (sLen).
For this specification, the mask generation function is fixed to be MGF1 as defined in [RFC8017].
It has been recommended that the same hash function be used for hashing the data as well as in the mask generation function.
This specification follows this recommendation.
The salt length is the same length as the hash function output.
Implementations need to check that the key type is 'RSA' when creating or verifying a signature.
The RSASSA PSS algorithms specified in this document are in the following table.
Key Encryption Algorithm RSAES OAEP is an asymmetric key encryption algorithm.
The definition of RSAEA OAEP can be found in Section 7.1 of [RFC8017].
The algorithm is parameterized using a mask generation function (mgf), a hash function (h), and encoding parameters (P).
For the algorithm identifiers defined in this section:  mgf is always set to MGF1 as defined in [RFC8017] and uses the same hash function as h.
P is always set to the empty octet string.
The following table summarizes the rest of the values.
The key type MUST be 'RSA'.
RSA Keys Key types are identified by the 'kty' member of the COSE Key object.
This specification defines one value for this member in the following table.
This document defines a key structure for both the public and private parts of RSA keys.
Together, an RSA public key and an RSA private key form an RSA key pair.
The document also provides support for the so called "multi prime" RSA keys, in which the modulus may have more than two prime factors.
The benefit of multi prime RSA is lower computational cost for the decryption and signature primitives.
For a discussion on how multi  prime affects the security of RSA cryptosystems, the reader is referred to [MultiPrimeRSA].
This document follows the naming convention of [RFC8017] for the naming of the fields of an RSA public or private key, and the corresponding fields have identical semantics.
The requirements for fields for RSA keys are as follows:
For all keys, 'kty' MUST be present and MUST have a value of 3.
For public keys, the fields 'n' and 'e' MUST be present.
All other fields defined in the following table below MUST be absent.
For private keys with two primes, the fields 'other',
'r i', 'd i', and
't i' MUST be absent; all other fields MUST be present.
For private keys with more than two primes, all fields MUST be present.
For the third to nth primes, each of the primes is represented as a map containing the fields 'r i',
'd i', and 't i'.
The field 'other' is an array of those maps.
All numeric key parameters are encoded in an unsigned big endian representation as an octet sequence using the CBOR byte string type (major type 2).
The octet sequence MUST utilize the minimum number of octets needed to represent the value.
For instance, the value 32,768 is represented as the CBOR byte sequence 0b010 00010,
0x80 0x00 (major type 2, additional information 2 for the length).
The following table provides a summary of the label values and the types associated with each of those labels.
COSE Algorithms Registrations IANA has registered the following values in the IANA "COSE Algorithms" registry [IANA.COSE].
Value:  37  Description: RSASSA PSS w/ SHA 256
Section 2 of this document  Recommended:
Value:  38  Description: RSASSA PSS
Section 2 of this document  Recommended:
Value:  39  Description: RSASSA PSS w/ SHA 512
Section 2 of this document  Recommended:
w/ RFC 8017 default parameters
40  Description: RSAES OAEP w/ SHA 1  Reference:
Section 3 of this document  Recommended:
RSAES OAEP w/ SHA 256  Value:
41  Description: RSAES OAEP w/ SHA 256  Reference:
Section 3 of this document  Recommended:
RSAES OAEP w/ SHA 512  Value:
42  Description: RSAES OAEP w/ SHA 512
Section 3 of this document  Recommended:
COSE Key Type Registrations IANA has registered the following value in the IANA "COSE Key Types" registry [IANA.COSE].
Section 4 of this document 5.3.
COSE Key Type Parameters Registrations IANA has registered the following values in the IANA "COSE Key Type Parameters" registry [IANA.COSE].
Key Type: 3  Name: n
Section 4 of this document
Key Type: 3  Name: e
Label:  2  CBOR Type: bstr  Description: the RSA public exponent e  Reference: Section 4 of this document
Label:  3  CBOR Type: bstr  Description: the RSA private exponent d  Reference: Section 4 of this document
Key Type: 3  Name: p
Label:  4  CBOR Type: bstr  Description: the prime factor p of n  Reference: Section 4 of this document
the prime factor q of n  Reference: Section 4 of this document
: dP is d mod (p 1)
Section 4 of this document
d mod (q 1)  Reference:
Section 4 of this document
: qInv is the CRT coefficient q^( 1)
Section 4 of this document
other  Label:  9  CBOR Type:
array  Description: other prime infos, an array
Section 4 of this document
CBOR Type: bstr  Description: a prime factor r i of n, where i >  3  Reference:
Section 4 of this document
d mod (r i 1)
Section 4 of this document
Label:  12  CBOR Type: bstr  Description: the CRT coefficient t
Section 4 of this document 6.
A key size of 2048 bits or larger MUST be used with these algorithms.
This key size corresponds roughly to the same strength as provided by a 128 bit symmetric encryption algorithm.
Implementations SHOULD be able to encrypt and decrypt with modulus between 2048 and 16K bits in length.
Applications can impose additional restrictions on the length of the modulus.
In addition to needing to worry about keys that are too small to provide the required security, there are issues with keys that are too large.
Denial of service attacks have been mounted with overly large keys or oddly sized keys.
This has the potential to consume resources with these keys.
It is highly recommended that checks on the key length be done before starting a cryptographic operation.
There are two reasonable ways to address this attack.
First, a key should not be used for a cryptographic operation until it has been verified that it is controlled by a party trusted by the recipient.
This approach means that no cryptography will be done until a trust decision about the key has been made, a process described in Appendix D, Item 4 of [RFC7515].
Second, applications can impose maximum  as well as minimum length requirements on keys.
This limits the resources that would otherwise be consumed by the use of overly large keys.
There is a theoretical hash substitution attack that can be mounted against RSASSA PSS [HASHID].
However, the requirement that the same hash function be used consistently for all operations is an effective mitigation against it.
Unlike an Elliptic Curve Digital Signature Algorithm (ECDSA), hash function outputs are not truncated so that the full hash value is always signed.
The internal padding structure of RSASSA PSS means that one needs to have multiple collisions between the two hash functions to be successful in producing a forgery based on changing the hash function.
A version of RSAES OAEP using the default parameters specified in Appendix A.2.1 of [RFC8017] is included because this is the most widely implemented set of OAEP parameter choices.
(Those default parameters are the SHA 1 hash function and the MGF1 with SHA 1 mask generation function.)
Keys used with RSAES OAEP MUST follow the constraints in Section 7.1 of [RFC8017].
Also, keys with a low private key exponent value, as described in Section 3 of "Twenty Years of Attacks on the RSA Cryptosystem" [Boneh99], MUST NOT be used.
