- title: __initial_text__
  contents:
  - '                 TCP-ENO: Encryption Negotiation Option

    '
- title: Abstract
  contents:
  - "Abstract\n   Despite growing adoption of TLS, a significant fraction of TCP\n\
    \   traffic on the Internet remains unencrypted.  The persistence of\n   unencrypted\
    \ traffic can be attributed to at least two factors.\n   First, some legacy protocols\
    \ lack a signaling mechanism (such as a\n   STARTTLS command) by which to convey\
    \ support for encryption, thus\n   making incremental deployment impossible. \
    \ Second, legacy\n   applications themselves cannot always be upgraded and therefore\n\
    \   require a way to implement encryption transparently entirely within\n   the\
    \ transport layer.  The TCP Encryption Negotiation Option (TCP-ENO)\n   addresses\
    \ both of these problems through a new TCP option kind\n   providing out-of-band,\
    \ fully backward-compatible negotiation of\n   encryption.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8547.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Design Goals  . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Requirements Language . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   4.  TCP-ENO Specification . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     4.1.  ENO Option  . . . . . . . . . . . . . . . . . . . . . . .\
    \   7\n     4.2.  The Global Suboption  . . . . . . . . . . . . . . . . . .  \
    \ 9\n     4.3.  TCP-ENO Roles . . . . . . . . . . . . . . . . . . . . . .  10\n\
    \     4.4.  Specifying Suboption Data Length  . . . . . . . . . . . .  11\n  \
    \   4.5.  The Negotiated TEP  . . . . . . . . . . . . . . . . . . .  12\n    \
    \ 4.6.  TCP-ENO Handshake . . . . . . . . . . . . . . . . . . . .  13\n     4.7.\
    \  Data in SYN Segments  . . . . . . . . . . . . . . . . . .  14\n     4.8.  Negotiation\
    \ Transcript  . . . . . . . . . . . . . . . . .  16\n   5.  Requirements for TEPs\
    \ . . . . . . . . . . . . . . . . . . . .  16\n     5.1.  Session IDs . . . .\
    \ . . . . . . . . . . . . . . . . . . .  18\n   6.  Examples  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  19\n   7.  Future Developments . . . .\
    \ . . . . . . . . . . . . . . . . .  21\n   8.  Design Rationale  . . . . . .\
    \ . . . . . . . . . . . . . . . .  22\n     8.1.  Handshake Robustness  . . .\
    \ . . . . . . . . . . . . . . .  22\n     8.2.  Suboption Data  . . . . . . .\
    \ . . . . . . . . . . . . . .  22\n     8.3.  Passive Role Bit  . . . . . . .\
    \ . . . . . . . . . . . . .  22\n     8.4.  Application-Aware Bit . . . . . .\
    \ . . . . . . . . . . . .  23\n     8.5.  Use of ENO Option Kind by TEPs  . .\
    \ . . . . . . . . . . .  24\n     8.6.  Unpredictability of Session IDs . . .\
    \ . . . . . . . . . .  24\n   9.  Experiments . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  24\n   10. Security Considerations . . . . . . . . . . .\
    \ . . . . . . . .  25\n   11. IANA Considerations . . . . . . . . . . . . . .\
    \ . . . . . . .  27\n   12. References  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  28\n     12.1.  Normative References . . . . . . . . . . . . .\
    \ . . . . .  28\n     12.2.  Informative References . . . . . . . . . . . . .\
    \ . . . .  29\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  30\n   Contributors  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  30\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Many applications and protocols running on top of TCP today\
    \ do not\n   encrypt traffic.  This failure to encrypt lowers the bar for certain\n\
    \   attacks, harming both user privacy and system security.\n   Counteracting\
    \ the problem demands a minimally intrusive, backward-\n   compatible mechanism\
    \ for incrementally deploying encryption.  The TCP\n   Encryption Negotiation\
    \ Option (TCP-ENO) specified in this document\n   provides such a mechanism.\n\
    \   Introducing TCP options, extending operating system interfaces to\n   support\
    \ TCP-level encryption, and extending applications to take\n   advantage of TCP-level\
    \ encryption all require effort.  To the\n   greatest extent possible, the effort\
    \ invested in realizing TCP-level\n   encryption today needs to remain applicable\
    \ in the future should the\n   need arise to change encryption strategies.  To\
    \ this end, it is\n   useful to consider two questions separately:\n   1.  How\
    \ to negotiate the use of encryption at the TCP layer\n   2.  How to perform encryption\
    \ at the TCP layer\n   This document addresses question 1 with a new TCP option,\
    \ ENO.\n   TCP-ENO provides a framework in which two endpoints can agree on a\n\
    \   TCP encryption protocol (TEP) out of multiple possible TEPs.  For\n   future\
    \ compatibility, TEPs can vary widely in terms of wire format,\n   use of TCP\
    \ option space, and integration with the TCP header and\n   segmentation.  However,\
    \ ENO abstracts these differences to ensure the\n   introduction of new TEPs can\
    \ be transparent to applications taking\n   advantage of TCP-level encryption.\n\
    \   Question 2 is addressed by one or more companion TEP specification\n   documents.\
    \  While current TEPs enable TCP-level traffic encryption\n   today, TCP-ENO ensures\
    \ that the effort invested to deploy today's\n   TEPs will additionally benefit\
    \ future ones.\n"
- title: 1.1.  Design Goals
  contents:
  - "1.1.  Design Goals\n   TCP-ENO was designed to achieve the following goals:\n\
    \   1.  Enable endpoints to negotiate the use of a separately specified\n    \
    \   TCP encryption protocol (TEP) suitable for either opportunistic\n       security\
    \ [RFC7435] of arbitrary TCP communications or stronger\n       security of applications\
    \ willing to perform endpoint\n       authentication.\n   2.  Transparently fall\
    \ back to unencrypted TCP when not supported by\n       both endpoints.\n   3.\
    \  Provide out-of-band signaling through which applications can\n       better\
    \ take advantage of TCP-level encryption (for instance, by\n       improving authentication\
    \ mechanisms in the presence of TCP-level\n       encryption).\n   4.  Define\
    \ a standard negotiation transcript that TEPs can use to\n       defend against\
    \ tampering with TCP-ENO.\n   5.  Make parsimonious use of TCP option space.\n\
    \   6.  Define roles for the two ends of a TCP connection, so as to name\n   \
    \    each end of a connection for encryption or authentication\n       purposes\
    \ even following a symmetric simultaneous open.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   Throughout this document, we use the following terms, several\
    \ of\n   which have more detailed normative descriptions in [RFC793]:\n   SYN\
    \ segment\n      A TCP segment in which the SYN flag is set\n   ACK segment\n\
    \      A TCP segment in which the ACK flag is set (which includes most\n     \
    \ segments other than an initial SYN segment)\n   Non-SYN segment\n      A TCP\
    \ segment in which the SYN flag is clear\n   SYN-only segment\n      A TCP segment\
    \ in which the SYN flag is set but the ACK flag is\n      clear\n   SYN-ACK segment\n\
    \      A TCP segment in which the SYN and ACK flags are both set\n   Active opener\n\
    \      A host that initiates a connection by sending a SYN-only segment.\n   \
    \   With the BSD socket API, an active opener calls \"connect\".  In\n      client-server\
    \ configurations, active openers are typically\n      clients.\n   Passive opener\n\
    \      A host that does not send a SYN-only segment but responds to one\n    \
    \  with a SYN-ACK segment.  With the BSD socket API, passive openers\n      call\
    \ \"listen\" and \"accept\", rather than \"connect\".  In client-\n      server\
    \ configurations, passive openers are typically servers.\n   Simultaneous open\n\
    \      The act of symmetrically establishing a TCP connection between two\n  \
    \    active openers (both of which call \"connect\" with BSD sockets).\n     \
    \ Each host of a simultaneous open sends both a SYN-only and a SYN-\n      ACK\
    \ segment.  Simultaneous open is less common than asymmetric\n      open with\
    \ one active and one passive opener, but it can be used\n      for NAT traversal\
    \ by peer-to-peer applications [RFC5382].\n   TEP\n      A TCP encryption protocol\
    \ intended for use with TCP-ENO and\n      specified in a separate document\n\
    \   TEP identifier\n      A unique 7-bit value in the range 0x20-0x7f that IANA\
    \ has assigned\n      to a TEP\n   Negotiated TEP\n      The single TEP governing\
    \ a TCP connection, determined by use of\n      the TCP ENO option specified in\
    \ this document\n"
- title: 4.  TCP-ENO Specification
  contents:
  - "4.  TCP-ENO Specification\n   TCP-ENO extends TCP connection establishment to\
    \ enable encryption\n   opportunistically.  It uses a new TCP option kind [RFC793]\
    \ to\n   negotiate one among multiple possible TCP encryption protocols\n   (TEPs).\
    \  The negotiation involves hosts exchanging sets of supported\n   TEPs, where\
    \ each TEP is represented by a suboption within a larger\n   TCP ENO option in\
    \ the offering host's SYN segment.\n   If TCP-ENO succeeds, it yields the following\
    \ information:\n   o  a negotiated TEP represented by a unique 7-bit TEP identifier,\n\
    \   o  a few extra bytes of suboption data from each host, if needed by\n    \
    \  the TEP,\n   o  a negotiation transcript with which to mitigate attacks on\
    \ the\n      negotiation itself,\n   o  role assignments designating one endpoint\
    \ \"host A\" and the other\n      endpoint \"host B\", and\n   o  a bit available\
    \ to higher-layer protocols at each endpoint for\n      out-of-band negotiation\
    \ of updated behavior in the presence of TCP\n      encryption.\n   If TCP-ENO\
    \ fails, encryption is disabled and the connection falls\n   back to traditional\
    \ unencrypted TCP.\n   The remainder of this section provides the normative description\
    \ of\n   the TCP ENO option and handshake protocol.\n"
- title: 4.1.  ENO Option
  contents:
  - "4.1.  ENO Option\n   TCP-ENO employs an option in the TCP header [RFC793].  Figure\
    \ 1\n   illustrates the high-level format of this option.\n         byte    0\
    \     1     2             N+1   (N+2 bytes total)\n              +-----+-----+-----+--....--+-----+\n\
    \              |Kind=|Len= |                    |\n              |  69 | N+2 |\
    \ contents (N bytes) |\n              +-----+-----+-----+--....--+-----+\n   \
    \                    Figure 1: The TCP-ENO Option\n   The contents of an ENO option\
    \ can take one of two forms.  A SYN-form\n   ENO option, illustrated in Figure\
    \ 2, appears only in SYN segments.  A\n   non-SYN-form ENO option, illustrated\
    \ in Figure 3, appears only in\n   non-SYN segments.  The SYN-form ENO option\
    \ acts as a container for\n   zero or more suboptions, labeled \"Opt_0\", \"Opt_1\"\
    , ... in Figure 2.\n   The non-SYN-form ENO option, by its presence, acts as a\
    \ one-bit\n   acknowledgment, with the actual contents ignored by ENO.  Particular\n\
    \   TEPs MAY assign additional meaning to the contents of non-SYN-form\n   ENO\
    \ options.  When a negotiated TEP does not assign such meaning, the\n   contents\
    \ of a non-SYN-form ENO option MUST be zero bytes (i.e.,\n   N = 0) in sent segments\
    \ and MUST be ignored in received segments.\n         byte    0     1     2  \
    \   3                     ... N+1\n              +-----+-----+-----+-----+--...--+-----+----...----+\n\
    \              |Kind=|Len= |Opt_0|Opt_1|       |Opt_i|   Opt_i   |\n         \
    \     |  69 | N+2 |     |     |       |     |   data    |\n              +-----+-----+-----+-----+--...--+-----+----...----+\n\
    \                       Figure 2: SYN-Form ENO Option\n                      byte\
    \   0     1     2     N+1\n                          +-----+-----+-----...----+\n\
    \                          |Kind=|Len= |  ignored   |\n                      \
    \    |  69 | N+2 | by TCP-ENO |\n                          +-----+-----+-----...----+\n\
    \            Figure 3: Non-SYN-Form ENO option, Where N MAY Be 0\n   Every suboption\
    \ starts with a byte of the form illustrated in\n   Figure 4.  The high bit \"\
    v\", when set, introduces suboptions with\n   variable-length data.  When v =\
    \ 0, the byte itself constitutes the\n   entirety of the suboption.  The remaining\
    \ 7-bit value, called \"glt\",\n   takes on various meanings as defined below:\n\
    \   o  Global configuration data (discussed in Section 4.2)\n   o  Suboption data\
    \ length for the next suboption (discussed in\n      Section 4.4)\n   o  An offer\
    \ to use a particular TEP defined in a separate TEP\n      specification document\n\
    \      bit   7   6   5   4   3   2   1   0\n          +---+---+---+---+---+---+---+---+\n\
    \          | v |            glt            |\n          +---+---+---+---+---+---+---+---+\n\
    \          v   - non-zero for use with variable-length suboption data\n      \
    \    glt - Global suboption, Length, or TEP identifier\n                Figure\
    \ 4: Format of Initial Suboption Byte\n   Table 1 summarizes the meaning of initial\
    \ suboption bytes.  Values of\n   glt below 0x20 are used for global suboptions\
    \ and length information\n   (the \"gl\" in \"glt\"), while those greater than\
    \ or equal to 0x20 are\n   TEP identifiers (the \"t\").  When v = 0, since the\
    \ initial suboption\n   byte constitutes the entirety of the suboption, all information\
    \ is\n   expressed by the 7-bit glt value, which can be either a global\n   suboption\
    \ or a TEP identifier.  When v = 1, it indicates a suboption\n   with variable-length\
    \ suboption data.  Only TEP identifiers have\n   suboption data, not global suboptions.\
    \  Therefore, bytes with v = 1\n   and glt < 0x20 are not global suboptions but\
    \ rather length bytes\n   governing the length of the next suboption (which MUST\
    \ be a TEP\n   identifier).  In the absence of a length byte, a TEP identifier\n\
    \   suboption with v = 1 has suboption data extending to the end of the\n   TCP\
    \ option.\n       +-----------+---+-------------------------------------------+\n\
    \       | glt       | v | Meaning                                   |\n      \
    \ +-----------+---+-------------------------------------------+\n       | 0x00-0x1f\
    \ | 0 | Global suboption (Section 4.2)            |\n       | 0x00-0x1f | 1 |\
    \ Length byte (Section 4.4)                 |\n       | 0x20-0x7f | 0 | TEP identifier\
    \ without suboption data     |\n       | 0x20-0x7f | 1 | TEP identifier followed\
    \ by suboption data |\n       +-----------+---+-------------------------------------------+\n\
    \                  Table 1: Initial Suboption Byte Values\n   A SYN segment MUST\
    \ contain at most one TCP ENO option.  If a SYN\n   segment contains more than\
    \ one ENO option, the receiver MUST behave\n   as though the segment contained\
    \ no ENO options and disable\n   encryption.  A TEP MAY specify the use of multiple\
    \ ENO options in a\n   non-SYN segment.  For non-SYN segments, ENO itself only\
    \ distinguishes\n   between the presence or absence of ENO options; multiple ENO\
    \ options\n   are interpreted the same as one.\n"
- title: 4.2.  The Global Suboption
  contents:
  - "4.2.  The Global Suboption\n   Suboptions 0x00-0x1f are used for global configuration\
    \ that applies\n   regardless of the negotiated TEP.  A TCP SYN segment MUST include\
    \ at\n   most one ENO suboption in this range.  A receiver MUST ignore all but\n\
    \   the first suboption in this range in any given TCP segment so as to\n   anticipate\
    \ updates to ENO that assign new meaning to bits in\n   subsequent global suboptions.\
    \  The value of a global suboption byte\n   is interpreted as a bit mask, illustrated\
    \ in Figure 5.\n               bit   7   6   5   4   3   2   1   0\n         \
    \          +---+---+---+---+---+---+---+---+\n                   | 0 | 0 | 0 |z1\
    \ |z2 |z3 | a | b |\n                   +---+---+---+---+---+---+---+---+\n  \
    \                 b  - Passive role bit\n                   a  - Application-aware\
    \ bit\n                   z* - Zero bits (reserved for future use)\n         \
    \      Figure 5: Format of the Global Suboption Byte\n   The fields of the bit\
    \ mask are interpreted as follows:\n   b\n      The passive role bit MUST be 1\
    \ for all passive openers.  For\n      active openers, it MUST default to 0, but\
    \ implementations MUST\n      provide an API through which an application can\
    \ explicitly set b =\n      1 before initiating an active open.  (Manual configuration\
    \ of \"b\"\n      is only necessary to enable encryption with a simultaneous open\n\
    \      and requires prior coordination to ensure exactly one endpoint\n      sets\
    \ b = 1 before connecting.)  See Section 8.3 for further\n      discussion.\n\
    \   a\n      Legacy applications can benefit from ENO-specific updates that\n\
    \      improve endpoint authentication or avoid double encryption.  The\n    \
    \  application-aware bit \"a\" is an out-of-band signal through which\n      higher-layer\
    \ protocols can enable ENO-specific updates that would\n      otherwise not be\
    \ backwards compatible.  Implementations MUST set\n      this bit to zero by default,\
    \ and MUST provide an API through which\n      applications can change the value\
    \ of the bit as well as examine\n      the value of the bit sent by the remote\
    \ host.  Implementations\n      MUST furthermore support a mandatory application-aware\
    \ mode in\n      which TCP-ENO is automatically disabled if the remote host does\n\
    \      not set a = 1.  See Section 8.4 for further discussion.\n   z1, z2, z3\n\
    \      The \"z\" bits are reserved for future updates to TCP-ENO.  They\n    \
    \  MUST be set to zero in sent segments and MUST be ignored in\n      received\
    \ segments.\n   A SYN segment without an explicit global suboption has an implicit\n\
    \   global suboption of 0x00.  Because passive openers MUST always set\n   b =\
    \ 1, they cannot rely on this implicit 0x00 byte and MUST include\n   an explicit\
    \ global suboption in their SYN-ACK segments.\n"
- title: 4.3.  TCP-ENO Roles
  contents:
  - "4.3.  TCP-ENO Roles\n   TCP-ENO uses abstract roles called \"A\" and \"B\" to\
    \ distinguish the two\n   ends of a TCP connection.  These roles are determined\
    \ by the \"b\" bit\n   in the global suboption.  The host that sent an implicit\
    \ or explicit\n   suboption with b = 0 plays the A role.  The host that sent b\
    \ = 1\n   plays the B role.  Because a passive opener MUST set b = 1 and an\n\
    \   active opener by default has b = 0, the normal case is for the active\n  \
    \ opener to play role A and the passive opener role B.\n   Applications performing\
    \ a simultaneous open, if they desire TCP-level\n   encryption, need to arrange\
    \ for exactly one endpoint to set b = 1\n   (despite being an active opener) while\
    \ the other endpoint keeps the\n   default b = 0.  Otherwise, if both sides use\
    \ the default b = 0 or if\n   both sides set b = 1, then TCP-ENO will fail and\
    \ fall back to\n   unencrypted TCP.  Likewise, if an active opener explicitly\
    \ configures\n   b = 1 and connects to a passive opener (which MUST always have\n\
    \   b = 1), then TCP-ENO will fail and fall back to unencrypted TCP.\n   TEP specifications\
    \ SHOULD refer to TCP-ENO's A and B roles to specify\n   asymmetric behavior by\
    \ the two hosts.  For the remainder of this\n   document, we will use the terms\
    \ \"host A\" and \"host B\" to designate\n   the hosts with roles A and B, respectively,\
    \ in a connection.\n"
- title: 4.4.  Specifying Suboption Data Length
  contents:
  - "4.4.  Specifying Suboption Data Length\n   A TEP MAY optionally make use of one\
    \ or more bytes of suboption data.\n   The presence of such data is indicated\
    \ by setting v = 1 in the\n   initial suboption byte (see Figure 4).  A suboption\
    \ introduced by a\n   TEP identifier with v = 1 (i.e., a suboption whose first\
    \ octet has\n   value 0xa0 or higher) extends to the end of the TCP option.  Hence,\n\
    \   if only one suboption requires data, the most compact way to encode\n   it\
    \ is to place it last in the ENO option, after all other suboptions.\n   In Figure\
    \ 2, for example, the last suboption, Opt_i, has suboption\n   data and thus requires\
    \ v = 1.  However, the suboption data length is\n   inferred from the total length\
    \ of the TCP option.\n   When a suboption with data is not last in an ENO option,\
    \ the sender\n   MUST explicitly specify the suboption data length for the receiver\
    \ to\n   know where the next suboption starts.  The sender does so by\n   introducing\
    \ the suboption with a length byte, depicted in Figure 6.\n   The length byte\
    \ encodes a 5-bit value nnnnn.  Adding one to nnnnn\n   yields the length of the\
    \ suboption data (not including the length\n   byte or the TEP identifier).  Hence,\
    \ a length byte can designate\n   anywhere from 1 to 32 bytes of suboption data\
    \ (inclusive).\n               bit   7   6   5   4   3   2   1   0\n         \
    \          +---+---+---+-------------------+\n                   | 1   0   0 \
    \        nnnnn       |\n                   +---+---+---+-------------------+\n\
    \                   nnnnn - 5-bit value encoding (length - 1)\n              \
    \       Figure 6: Format of a Length Byte\n   A suboption preceded by a length\
    \ byte MUST be a TEP identifier\n   (glt >= 0x20) and MUST have v = 1.  Figure\
    \ 7 shows an example of such\n   a suboption.\n       byte    0      1       2\
    \      nnnnn+2  (nnnnn+3 bytes total)\n            +------+------+-------...-------+\n\
    \            |length| TEP  | suboption data  |\n            | byte |ident.| (nnnnn+1\
    \ bytes) |\n            +------+------+-------...-------+\n            length\
    \ byte    - specifies nnnnn\n            TEP identifier - MUST have v = 1 and\
    \ glt >= 0x20\n            suboption data - length specified by nnnnn+1\n    \
    \               Figure 7: Suboption with Length Byte\n   A host MUST ignore an\
    \ ENO option in a SYN segment and MUST disable\n   encryption if either of the\
    \ following apply:\n   1.  A length byte indicates that suboption data would extend\
    \ beyond\n       the end of the TCP ENO option.\n   2.  A length byte is followed\
    \ by an octet in the range 0x00-0x9f\n       (meaning the following byte has v\
    \ = 0 or glt < 0x20).\n   Because the last suboption in an ENO option is special-cased\
    \ to have\n   its length inferred from the 8-bit TCP option length, it MAY contain\n\
    \   more than 32 bytes of suboption data.  Other suboptions are limited\n   to\
    \ 32 bytes by the length byte format.  However, the TCP header\n   itself can\
    \ only accommodate a maximum of 40 bytes of options.\n   Therefore, regardless\
    \ of the length byte format, a segment would not\n   be able to contain more than\
    \ one suboption over 32 bytes in size.\n   That said, TEPs MAY define the use\
    \ of multiple suboptions with the\n   same TEP identifier in the same SYN segment,\
    \ providing another way to\n   convey over 32 bytes of suboption data even with\
    \ length bytes.\n"
- title: 4.5.  The Negotiated TEP
  contents:
  - "4.5.  The Negotiated TEP\n   A TEP identifier glt (with glt >= 0x20) is valid\
    \ for a connection\n   when all of the following hold:\n   1.  Each side has sent\
    \ a suboption for glt in its SYN-form ENO\n       option.\n   2.  Any suboption\
    \ data in these glt suboptions is valid according to\n       the TEP specification\
    \ and satisfies any runtime constraints.\n   3.  If an ENO option contains multiple\
    \ suboptions with glt, then such\n       repetition is well-defined by the TEP\
    \ specification.\n   A passive opener (which is always host B) sees the remote\
    \ host's SYN\n   segment before constructing its own SYN-ACK segment.  Therefore,\
    \ a\n   passive opener SHOULD include only one TEP identifier in SYN-ACK\n   segments\
    \ and SHOULD ensure this TEP identifier is valid.  However,\n   simultaneous open\
    \ or implementation considerations can prevent host B\n   from offering only one\
    \ TEP.\n   To accommodate scenarios in which host B sends multiple TEP\n   identifiers\
    \ in the SYN-ACK segment, the negotiated TEP is defined as\n   the last valid\
    \ TEP identifier in host B's SYN-form ENO option.  This\n   definition means host\
    \ B specifies TEP suboptions in order of\n   increasing priority, while host A\
    \ does not influence TEP priority.\n"
- title: 4.6.  TCP-ENO Handshake
  contents:
  - "4.6.  TCP-ENO Handshake\n   A host employing TCP-ENO for a connection MUST include\
    \ an ENO option\n   in every TCP segment sent until either encryption is disabled\
    \ or the\n   host receives a non-SYN segment.  In particular, this means an active\n\
    \   opener MUST include a non-SYN-form ENO option in the third segment of\n  \
    \ a three-way handshake.\n   A host MUST disable encryption, refrain from sending\
    \ any further ENO\n   options, and fall back to unencrypted TCP if any of the\
    \ following\n   occurs:\n   1.  Any segment it receives up to and including the\
    \ first received\n       ACK segment does not contain an ENO option (or contains\
    \ an ill-\n       formed SYN-form ENO option).\n   2.  The SYN segment it receives\
    \ does not contain a valid TEP\n       identifier.\n   3.  It receives a SYN segment\
    \ with an incompatible global suboption.\n       (Specifically, \"incompatible\"\
    \ means the two hosts set the same\n       \"b\" value, or the connection is in\
    \ mandatory application-aware\n       mode and the remote host set a = 0.)\n \
    \  Hosts MUST NOT alter SYN-form ENO options in retransmitted segments,\n   or\
    \ between the SYN and SYN-ACK segments of a simultaneous open, with\n   two exceptions\
    \ for an active opener.  First, an active opener MAY\n   unilaterally disable\
    \ ENO (and thus remove the ENO option) between\n   retransmissions of a SYN-only\
    \ segment.  (Such removal could enable\n   recovery from middleboxes dropping\
    \ segments with ENO options.)\n   Second, an active opener performing simultaneous\
    \ open MAY include no\n   TCP-ENO option in its SYN-ACK if the received SYN caused\
    \ it to\n   disable encryption according to the above rules (for instance,\n \
    \  because role negotiation failed).\n   Once a host has both sent and received\
    \ an ACK segment containing an\n   ENO option, encryption MUST be enabled.  Once\
    \ encryption is enabled,\n   hosts MUST follow the specification of the negotiated\
    \ TEP and MUST\n   NOT present raw TCP payload data to the application.  In particular,\n\
    \   data segments MUST NOT contain plaintext application data, but rather\n  \
    \ ciphertext, key negotiation parameters, or other messages as\n   determined\
    \ by the negotiated TEP.\n   A host MAY send a SYN-form ENO option containing\
    \ zero TEP identifier\n   suboptions, which we term a \"vacuous\" ENO option.\
    \  If either host's\n   SYN segment contains a vacuous ENO option, it follows\
    \ that there are\n   no valid TEP identifiers for the connection, and therefore\
    \ the\n   connection MUST fall back to unencrypted TCP.  Hosts MAY send vacuous\n\
    \   ENO options to indicate that ENO is supported but unavailable by\n   configuration,\
    \ or to probe network paths for robustness to ENO\n   options.  However, a passive\
    \ opener MUST NOT send a vacuous ENO\n   option in a SYN-ACK segment unless there\
    \ was an ENO option in the SYN\n   segment it received.  Moreover, a passive opener's\
    \ SYN-form ENO\n   option MUST still include a global suboption with b = 1 as\
    \ discussed\n   in Section 4.3.\n"
- title: 4.7.  Data in SYN Segments
  contents:
  - "4.7.  Data in SYN Segments\n   TEPs MAY specify the use of data in SYN segments\
    \ so as to reduce the\n   number of round trips required for connection setup.\
    \  The meaning of\n   data in a SYN segment with an ENO option (a SYN+ENO segment)\
    \ is\n   determined by the last TEP identifier in the ENO option, which we\n \
    \  term the segment's \"SYN TEP\".  A SYN+ENO segment MAY of course\n   include\
    \ multiple TEP suboptions, but only the SYN TEP (i.e., the last\n   one) specifies\
    \ how to interpret the SYN segment's data payload.\n   A host sending a SYN+ENO\
    \ segment MUST NOT include data in the segment\n   unless the SYN TEP's specification\
    \ defines the use of such data.\n   Furthermore, to avoid conflicting interpretations\
    \ of SYN data, a\n   SYN+ENO segment MUST NOT include a non-empty TCP Fast Open\
    \ (TFO)\n   option [RFC7413].\n   Because a host can send SYN data before knowing\
    \ which if any TEP the\n   connection will negotiate, hosts implementing ENO are\
    \ REQUIRED to\n   discard data from SYN+ENO segments when the SYN TEP does not\
    \ become\n   the negotiated TEP.  Hosts are furthermore REQUIRED to discard SYN\n\
    \   data in cases where another Internet standard specifies a conflicting\n  \
    \ interpretation of SYN data (as would occur when receiving a non-empty\n   TFO\
    \ option).  This requirement applies to hosts that implement ENO\n   even when\
    \ ENO has been disabled by configuration.  However, note that\n   discarding SYN\
    \ data is already common practice [RFC4987] and the new\n   requirement applies\
    \ only to segments containing ENO options.\n   More specifically, a host that\
    \ implements ENO MUST discard the data\n   in a received SYN+ENO segment if any\
    \ of the following applies:\n   o  ENO fails and TEP-indicated encryption is disabled\
    \ for the\n      connection.\n   o  The received segment's SYN TEP is not the\
    \ negotiated TEP.\n   o  The negotiated TEP does not define the use of SYN data.\n\
    \   o  The SYN segment contains a non-empty TFO option or any other TCP\n    \
    \  option implying a conflicting definition of SYN data.\n   A host discarding\
    \ SYN data in compliance with the above requirement\n   MUST NOT acknowledge the\
    \ sequence number of the discarded data, but\n   rather MUST acknowledge the other\
    \ host's initial sequence number as\n   if the received SYN segment contained\
    \ no data.  Furthermore, after\n   discarding SYN data, such a host MUST NOT assume\
    \ the SYN data will be\n   identically retransmitted, and MUST process data only\
    \ from non-SYN\n   segments.\n   If a host sends a SYN+ENO segment with data and\
    \ receives\n   acknowledgment for the data, but the SYN TEP in its transmitted\
    \ SYN\n   segment is not the negotiated TEP (either because a different TEP was\n\
    \   negotiated or because ENO failed to negotiate encryption), then the\n   host\
    \ MUST abort the TCP connection.  Proceeding in any other fashion\n   risks misinterpreted\
    \ SYN data.\n   If a host sends a SYN-only SYN+ENO segment bearing data and\n\
    \   subsequently receives a SYN-ACK segment without an ENO option, that\n   host\
    \ MUST abort the connection even if the SYN-ACK segment does not\n   acknowledge\
    \ the SYN data.  The issue is that unacknowledged data\n   could nonetheless have\
    \ been cached by the receiver; later\n   retransmissions intended to supersede\
    \ this unacknowledged data could\n   fail to do so if the receiver gives precedence\
    \ to the cached original\n   data.  Implementations MAY provide an API call for\
    \ a non-default mode\n   in which unacknowledged SYN data does not cause a connection\
    \ abort,\n   but applications MUST use this mode only when a higher-layer\n  \
    \ integrity check would anyway terminate a garbled connection.\n   To avoid unexpected\
    \ connection aborts, ENO implementations MUST\n   disable the use of data in SYN-only\
    \ segments by default.  Such data\n   MAY be enabled by an API command.  In particular,\
    \ implementations MAY\n   provide a per-connection mandatory encryption mode that\
    \ automatically\n   aborts a connection if ENO fails, and they MAY enable SYN\
    \ data in\n   this mode.\n   To satisfy the requirement of the previous paragraph,\
    \ all TEPs SHOULD\n   support a normal mode of operation that avoids data in SYN-only\n\
    \   segments.  An exception is TEPs intended to be disabled by default.\n"
- title: 4.8.  Negotiation Transcript
  contents:
  - "4.8.  Negotiation Transcript\n   To defend against attacks on encryption negotiation\
    \ itself, a TEP\n   MUST, with high probability, fail to establish a working connection\n\
    \   between two ENO-compliant hosts when SYN-form ENO options have been\n   altered\
    \ in transit.  (Of course, in the absence of endpoint\n   authentication, two\
    \ compliant hosts can each still be connected to a\n   man-in-the-middle attacker.)\
    \  To detect SYN-form ENO option\n   tampering, TEPs MUST reference a transcript\
    \ of TCP-ENO's negotiation.\n   TCP-ENO defines its negotiation transcript as\
    \ a packed data structure\n   consisting of two TCP-ENO options exactly as they\
    \ appeared in the TCP\n   header (including the TCP option kind and TCP option\
    \ length byte as\n   illustrated in Figure 1).  The transcript is constructed\
    \ from the\n   following, in order:\n   1.  The TCP-ENO option in host A's SYN\
    \ segment, including the kind\n       and length bytes\n   2.  The TCP-ENO option\
    \ in host B's SYN segment, including the kind\n       and length bytes\n   Note\
    \ that because the ENO options in the transcript contain length\n   bytes as specified\
    \ by TCP, the transcript unambiguously delimits A's\n   and B's ENO options.\n"
- title: 5.  Requirements for TEPs
  contents:
  - "5.  Requirements for TEPs\n   TCP-ENO affords TEP specifications a large amount\
    \ of design\n   flexibility.  However, to abstract TEP differences away from\n\
    \   applications requires fitting them all into a coherent framework.  As\n  \
    \ such, any TEP claiming an ENO TEP identifier MUST satisfy the\n   following\
    \ normative list of properties:\n   o  TEPs MUST protect TCP data streams with\
    \ authenticated encryption.\n      (Note that \"authenticated encryption\" refers\
    \ only to the form of\n      encryption, such as an Authenticated Encryption with\
    \ Associated\n      Data (AEAD) algorithm meeting the requirements of [RFC5116];\
    \ it\n      does not imply endpoint authentication.)\n   o  TEPs MUST define a\
    \ session ID whose value identifies the TCP\n      connection and, with overwhelming\
    \ probability, is unique over all\n      time if either host correctly obeys the\
    \ TEP.  Section 5.1\n      describes the requirements of the session ID in more\
    \ detail.\n   o  TEPs MUST NOT make data confidentiality dependent on encryption\n\
    \      algorithms with a security strength [NIST-SP-800-57] of less than\n   \
    \   120 bits.  The number 120 was chosen to accommodate ciphers with\n      128-bit\
    \ keys that lose a few bits of security either to\n      particularities of the\
    \ key schedule or to highly theoretical and\n      unrealistic attacks.\n   o\
    \  TEPs MUST NOT allow the negotiation of null cipher suites, even\n      for\
    \ debugging purposes.  (Implementations MAY support debugging\n      modes that\
    \ allow applications to extract their own session keys.)\n   o  TEPs MUST guarantee\
    \ the confidentiality of TCP streams without\n      assuming the security of any\
    \ long-lived secrets.  Implementations\n      SHOULD provide forward secrecy soon\
    \ after the close of a TCP\n      connection and SHOULD therefore bound the delay\
    \ between closing a\n      connection and erasing any relevant cryptographic secrets.\n\
    \      (Exceptions to forward secrecy are permissible only at the\n      implementation\
    \ level and only in response to hardware or\n      architectural constraints --\
    \ e.g., storage that cannot be securely\n      erased.)\n   o  TEPs MUST protect\
    \ and authenticate the end-of-file marker conveyed\n      by TCP's FIN flag. \
    \ In particular, a receiver MUST, with\n      overwhelming probability, detect\
    \ a FIN flag that was set or\n      cleared in transit and does not match the\
    \ sender's intent.  A TEP\n      MAY discard a segment with such a corrupted FIN\
    \ bit or MAY abort\n      the connection in response to such a segment.  However,\
    \ any such\n      abort MUST raise an error condition distinct from an authentic\n\
    \      end-of-file condition.\n   o  TEPs MUST prevent corrupted packets from\
    \ causing urgent data to be\n      delivered when none has been sent.  There are\
    \ several ways to do\n      so.  For instance, a TEP MAY cryptographically protect\
    \ the URG\n      flag and urgent pointer alongside ordinary payload data.\n  \
    \    Alternatively, a TEP MAY disable urgent data functionality by\n      clearing\
    \ the URG flag on all received segments and returning\n      errors in response\
    \ to sender-side urgent-data API calls.\n      Implementations SHOULD avoid negotiating\
    \ TEPs that disable urgent\n      data by default.  The exception is when applications\
    \ and protocols\n      are known never to send urgent data.\n"
- title: 5.1.  Session IDs
  contents:
  - "5.1.  Session IDs\n   Each TEP MUST define a session ID that is computable by\
    \ both\n   endpoints and uniquely identifies each encrypted TCP connection.\n\
    \   Implementations MUST expose the session ID to applications via an API\n  \
    \ extension.  The API extension MUST return an error when no session ID\n   is\
    \ available because ENO has failed to negotiate encryption or\n   because no connection\
    \ is yet established.  Applications that are\n   aware of TCP-ENO SHOULD, when\
    \ practical, authenticate the TCP\n   endpoints by incorporating the values of\
    \ the session ID and TCP-ENO\n   role (A or B) into higher-layer authentication\
    \ mechanisms.\n   In order to avoid replay attacks and prevent authenticated session\n\
    \   IDs from being used out of context, session IDs MUST be unique over\n   all\
    \ time with high probability.  This uniqueness property MUST hold\n   even if\
    \ one end of a connection maliciously manipulates the protocol\n   in an effort\
    \ to create duplicate session IDs.  In other words, it\n   MUST be infeasible\
    \ for a host, even by violating the TEP\n   specification, to establish two TCP\
    \ connections with the same session\n   ID to remote hosts properly implementing\
    \ the TEP.\n   To prevent session IDs from being confused across TEPs, all session\n\
    \   IDs begin with the negotiated TEP identifier -- that is, the last\n   valid\
    \ TEP identifier in host B's SYN segment.  Furthermore, this\n   initial byte\
    \ has bit \"v\" set to the same value that accompanied the\n   negotiated TEP\
    \ identifier in B's SYN segment.  However, only this\n   single byte is included,\
    \ not any suboption data.  Figure 8 shows the\n   resulting format.  This format\
    \ is designed for TEPs to compute unique\n   identifiers; it is not intended for\
    \ application authors to pick apart\n   session IDs.  Applications SHOULD treat\
    \ session IDs as monolithic\n   opaque values and SHOULD NOT discard the first\
    \ byte to shorten\n   identifiers.  (An exception is for non-security-relevant\
    \ purposes,\n   such as gathering statistics about negotiated TEPs.)\n       \
    \          byte    0     1     2        N-1    N\n                      +-----+------------...------------+\n\
    \                      | sub-| collision-resistant hash  |\n                 \
    \     | opt | of connection information |\n                      +-----+------------...------------+\n\
    \                     Figure 8: Format of a Session ID\n   Though TEP specifications\
    \ retain considerable flexibility in their\n   definitions of the session ID,\
    \ all session IDs MUST meet the\n   following normative list of requirements:\n\
    \   o  The session ID MUST be at least 33 bytes (including the one-byte\n    \
    \  suboption), though TEPs MAY choose longer session IDs.\n   o  The session ID\
    \ MUST depend, in a collision-resistant way, on all\n      of the following (meaning\
    \ it is computationally infeasible to\n      produce collisions of the session\
    \ ID derivation function unless\n      all of the following quantities are identical):\n\
    \      *  Fresh data contributed by both sides of the connection\n      *  Any\
    \ public keys, public Diffie-Hellman parameters, or other\n         public asymmetric\
    \ cryptographic parameters that are employed by\n         the TEP and have corresponding\
    \ private data that is known by\n         only one side of the connection\n  \
    \    *  The negotiation transcript specified in Section 4.8\n   o  Unless and\
    \ until applications disclose information about the\n      session ID, all but\
    \ the first byte MUST be computationally\n      indistinguishable from random\
    \ bytes to a network eavesdropper.\n   o  Applications MAY choose to make session\
    \ IDs public.  Therefore,\n      TEPs MUST NOT place any confidential data in\
    \ the session ID (such\n      as data permitting the derivation of session keys).\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   This subsection illustrates the TCP-ENO handshake with a few\
    \ non-\n   normative examples.\n             (1) A -> B:  SYN      ENO<X,Y>\n\
    \             (2) B -> A:  SYN-ACK  ENO<b=1,Y>\n             (3) A -> B:  ACK\
    \      ENO<>\n             [rest of connection encrypted according to TEP Y]\n\
    \     Figure 9: Three-Way Handshake with Successful TCP-ENO Negotiation\n   Figure\
    \ 9 shows a three-way handshake with a successful TCP-ENO\n   negotiation.  Host\
    \ A includes two ENO suboptions with TEP identifiers\n   X and Y.  Host A does\
    \ not include an explicit global suboption, which\n   means it has an implicit\
    \ global suboption 0x00 conveying passive role\n   bit b = 0.  The two sides agree\
    \ to follow the TEP identified by\n   suboption Y.\n                (1) A -> B:\
    \  SYN      ENO<X,Y>\n                (2) B -> A:  SYN-ACK\n                (3)\
    \ A -> B:  ACK\n                [rest of connection unencrypted legacy TCP]\n\
    \      Figure 10: Three-Way Handshake with Failed TCP-ENO Negotiation\n   Figure\
    \ 10 shows a failed TCP-ENO negotiation.  The active opener (A)\n   indicates\
    \ support for TEPs corresponding to suboptions X and Y.\n   Unfortunately, at\
    \ this point, one of several things occurs:\n   1.  The passive opener (B) does\
    \ not support TCP-ENO.\n   2.  B supports TCP-ENO but supports neither of the\
    \ TEPs X and Y, and\n       so it does not reply with an ENO option.\n   3.  B\
    \ supports TCP-ENO but has the connection configured in mandatory\n       application-aware\
    \ mode and thus disables ENO because A's SYN\n       segment contains an implicit\
    \ global suboption with a = 0.\n   4.  The network stripped the ENO option out\
    \ of A's SYN segment, so B\n       did not receive it.\n   Whichever of the above\
    \ applies, the connection transparently falls\n   back to unencrypted TCP.\n \
    \      (1) A -> B:  SYN      ENO<X,Y>\n       (2) B -> A:  SYN-ACK  ENO<b=1,X>\
    \ [ENO stripped by middlebox]\n       (3) A -> B:  ACK\n       [rest of connection\
    \ unencrypted legacy TCP]\n     Figure 11: Failed TCP-ENO Negotiation Because\
    \ of Option Stripping\n   Figure 11 Shows another handshake with a failed encryption\n\
    \   negotiation.  In this case, the passive opener (B) receives an ENO\n   option\
    \ from A and replies.  However, the reverse network path from B\n   to A strips\
    \ ENO options.  Therefore, A does not receive an ENO option\n   from B, it disables\
    \ ENO, and it does not include a non-SYN-form ENO\n   option in segment 3 when\
    \ ACKing B's SYN.  Had A not disabled\n   encryption, Section 4.6 would have required\
    \ it to include a non-SYN-\n   form ENO option in segment 3.  The omission of\
    \ this option informs B\n   that encryption negotiation has failed, after which\
    \ the two hosts\n   proceed with unencrypted TCP.\n             (1) A -> B:  SYN\
    \      ENO<Y,X>\n             (2) B -> A:  SYN      ENO<b=1,X,Y,Z>\n         \
    \    (3) A -> B:  SYN-ACK  ENO<Y,X>\n             (4) B -> A:  SYN-ACK  ENO<b=1,X,Y,Z>\n\
    \             [rest of connection encrypted according to TEP Y]\n     Figure 12:\
    \ Simultaneous Open with Successful TCP-ENO Negotiation\n   Figure 12 shows a\
    \ successful TCP-ENO negotiation with simultaneous\n   open.  Here, the first\
    \ four segments contain a SYN-form ENO option,\n   as each side sends both a SYN-only\
    \ and a SYN-ACK segment.  The ENO\n   option in each host's SYN-ACK is identical\
    \ to the ENO option in its\n   SYN-only segment, as otherwise, connection establishment\
    \ could not\n   recover from the loss of a SYN segment.  The last valid TEP in\
    \ host\n   B's ENO option is Y, so Y is the negotiated TEP.\n"
- title: 7.  Future Developments
  contents:
  - "7.  Future Developments\n   TCP-ENO is designed to capitalize on future developments\
    \ that could\n   alter trade-offs and change the best approach to TCP-level encryption\n\
    \   (beyond introducing new cipher suites).  By way of example, we\n   discuss\
    \ a few such possible developments.\n   Various proposals exist to increase the\
    \ maximum space for options in\n   the TCP header.  These proposals are highly\
    \ experimental --\n   particularly those that apply to SYN segments.  Therefore,\
    \ future\n   TEPs are unlikely to benefit from extended SYN option space.  In\
    \ the\n   unlikely event that SYN option space is one day extended, however,\n\
    \   future TEPs could benefit by embedding key agreement messages\n   directly\
    \ in SYN segments.  Under such usage, the 32-byte limit on\n   length bytes could\
    \ prove insufficient.  This document intentionally\n   aborts TCP-ENO if a length\
    \ byte is followed by an octet in the range\n   0x00-0x9f.  If necessary, a future\
    \ update to this document can define\n   a format for larger suboptions by assigning\
    \ meaning to such currently\n   undefined byte sequences.\n   New revisions to\
    \ socket interfaces [RFC3493] could involve library\n   calls that simultaneously\
    \ have access to hostname information and an\n   underlying TCP connection.  Such\
    \ an API enables the possibility of\n   authenticating servers transparently to\
    \ the application, particularly\n   in conjunction with technologies such as DNS-Based\
    \ Authentication of\n   Named Entities (DANE) [RFC6394].  An update to TCP-ENO\
    \ can adopt one\n   of the \"z\" bits in the global suboption to negotiate the\
    \ use of an\n   endpoint authentication protocol before any application use of\
    \ the\n   TCP connection.  Over time, the consequences of failed or missing\n\
    \   endpoint authentication can gradually be increased from issuing log\n   messages\
    \ to aborting the connection if some as yet unspecified DNS\n   record indicates\
    \ authentication is mandatory.  Through shared library\n   updates, such endpoint\
    \ authentication can potentially be added\n   transparently to legacy applications\
    \ without recompilation.\n   TLS can currently only be added to legacy applications\
    \ whose\n   protocols accommodate a STARTTLS command or equivalent.  TCP-ENO,\n\
    \   because it provides out-of-band signaling, opens the possibility of\n   future\
    \ TLS revisions being generically applicable to any TCP\n   application.\n"
- title: 8.  Design Rationale
  contents:
  - "8.  Design Rationale\n   This section describes some of the design rationale\
    \ behind TCP-ENO.\n"
- title: 8.1.  Handshake Robustness
  contents:
  - "8.1.  Handshake Robustness\n   Incremental deployment of TCP-ENO depends critically\
    \ on failure cases\n   devolving to unencrypted TCP rather than causing the entire\
    \ TCP\n   connection to fail.\n   Because a network path might drop ENO options\
    \ in one direction only,\n   a host needs to know not just that the peer supports\
    \ encryption, but\n   that the peer has received an ENO option.  To this end,\
    \ ENO disables\n   encryption unless it receives an ACK segment bearing an ENO\
    \ option.\n   To stay robust in the face of dropped segments, hosts continue to\n\
    \   include non-SYN-form ENO options in segments until the point that\n   they\
    \ have received a non-SYN segment from the other side.\n   One particularly pernicious\
    \ middlebox behavior found in the wild is\n   load balancers that echo unknown\
    \ TCP options found in SYN segments\n   back to an active opener.  The passive\
    \ role bit \"b\" in global\n   suboptions ensures encryption will always be disabled\
    \ under such\n   circumstances, as sending back a verbatim copy of an active opener's\n\
    \   SYN-form ENO option always causes role negotiation to fail.\n"
- title: 8.2.  Suboption Data
  contents:
  - "8.2.  Suboption Data\n   TEPs can employ suboption data for session caching,\
    \ cipher suite\n   negotiation, or other purposes.  However, TCP currently limits\
    \ total\n   option space consumed by all options to only 40 bytes, making it\n\
    \   impractical to have many suboptions with data.  For this reason, ENO\n   optimizes\
    \ the case of a single suboption with data by inferring the\n   length of the\
    \ last suboption from the TCP option length.  Doing so\n   saves one byte.\n"
- title: 8.3.  Passive Role Bit
  contents:
  - "8.3.  Passive Role Bit\n   TCP-ENO, TEPs, and applications all have asymmetries\
    \ that require an\n   unambiguous way to identify one of the two connection endpoints.\
    \  As\n   an example, Section 4.8 specifies that host A's ENO option comes\n \
    \  before host B's in the negotiation transcript.  As another example,\n   an\
    \ application might need to authenticate one end of a TCP connection\n   with\
    \ a digital signature.  To ensure the signed message cannot be\n   interpreted\
    \ out of context to authenticate the other end, the signed\n   message would need\
    \ to include both the session ID and the local role,\n   A or B.\n   A normal\
    \ TCP three-way handshake involves one active and one passive\n   opener.  This\
    \ asymmetry is captured by the default configuration of\n   the \"b\" bit in the\
    \ global suboption.  With simultaneous open, both\n   hosts are active openers,\
    \ so TCP-ENO requires that one host\n   explicitly configure b = 1.  An alternate\
    \ design might automatically\n   break the symmetry to avoid this need for explicit\
    \ configuration.\n   However, all such designs we considered either lacked robustness\
    \ or\n   consumed precious bytes of SYN option space even in the absence of\n\
    \   simultaneous open.  (One complicating factor is that TCP does not\n   know\
    \ it is participating in a simultaneous open until after it has\n   sent a SYN\
    \ segment.  Moreover, with packet loss, one host might never\n   learn it has\
    \ participated in a simultaneous open.)\n"
- title: 8.4.  Application-Aware Bit
  contents:
  - "8.4.  Application-Aware Bit\n   Applications developed before TCP-ENO can potentially\
    \ evolve to take\n   advantage of TCP-level encryption.  For instance, an application\n\
    \   designed to run only on trusted networks might leverage TCP-ENO to\n   run\
    \ on untrusted networks, but, importantly, needs to authenticate\n   endpoints\
    \ and session IDs to do so.  In addition to user-visible\n   changes such as requesting\
    \ credentials, this kind of authentication\n   functionality requires application-layer\
    \ protocol changes.  Some\n   protocols can accommodate the requisite changes\
    \ -- for instance, by\n   introducing a new verb analogous to STARTTLS, while\
    \ others cannot do\n   so in a backwards-compatible manner.\n   The application-aware\
    \ bit \"a\" in the global suboption provides a\n   means of incrementally deploying\
    \ enhancements specific to TCP-ENO to\n   application-layer protocols that would\
    \ otherwise lack the necessary\n   extensibility.  Software implementing the enhancement\
    \ always sets a =\n   1 in its own global suboption, but only activates the new\
    \ behavior\n   when the other end of the connection also sets a = 1.\n   A related\
    \ issue is that an application might leverage TCP-ENO as a\n   replacement for\
    \ legacy application-layer encryption.  In this\n   scenario, if both endpoints\
    \ support TCP-ENO, then application-layer\n   encryption can be disabled in favor\
    \ of simply authenticating the TCP-\n   ENO session ID.  On the other hand, if\
    \ one endpoint is not aware of\n   the new mode of operation specific to TCP-ENO,\
    \ there is little\n   benefit to performing redundant encryption at the TCP layer;\
    \ data is\n   already encrypted once at the application layer, and authentication\n\
    \   only has meaning with respect to this application-layer encryption.\n   The\
    \ mandatory application-aware mode lets applications avoid double\n   encryption\
    \ in this case: the mode sets a = 1 in the local host's\n   global suboption but\
    \ also disables TCP-ENO entirely in the event that\n   the other side has not\
    \ also set a = 1.\n   Note that the application-aware bit is not needed by applications\n\
    \   that already support adequate higher-layer encryption such as those\n   provided\
    \ by TLS [RFC8446] or SSH [RFC4253].  To avoid double\n   encryption in such cases,\
    \ it suffices to disable TCP-ENO by\n   configuration on any ports with known\
    \ secure protocols.\n"
- title: 8.5.  Use of ENO Option Kind by TEPs
  contents:
  - "8.5.  Use of ENO Option Kind by TEPs\n   This document does not specify the use\
    \ of ENO options beyond the\n   first few segments of a connection.  Moreover,\
    \ it does not specify\n   the content of ENO options in non-SYN segments, only\
    \ their presence.\n   As a result, any use of option kind 69 after the SYN exchange\
    \ does\n   not conflict with this document.  In addition, because ENO guarantees\n\
    \   at most one negotiated TEP per connection, TEPs will not conflict\n   with\
    \ one another or ENO if they use option kind 69 for out-of-band\n   signaling\
    \ in non-SYN segments.\n"
- title: 8.6.  Unpredictability of Session IDs
  contents:
  - "8.6.  Unpredictability of Session IDs\n   Section 5.1 specifies that all but\
    \ the first (TEP identifier) byte of\n   a session ID MUST be computationally\
    \ indistinguishable from random\n   bytes to a network eavesdropper.  This property\
    \ is easy to ensure\n   under standard assumptions about cryptographic hash functions.\
    \  Such\n   unpredictability helps security in a broad range of cases.  For\n\
    \   example, it makes it possible for applications to use a session ID\n   from\
    \ one connection to authenticate a session ID from another,\n   thereby tying\
    \ the two connections together.  It furthermore helps\n   ensure that TEPs do\
    \ not trivially subvert the 33-byte minimum-length\n   requirement for session\
    \ IDs by padding shorter session IDs with\n   zeros.\n"
- title: 9.  Experiments
  contents:
  - "9.  Experiments\n   This document has experimental status because TCP-ENO's viability\n\
    \   depends on middlebox behavior that can only be determined a\n   posteriori.\
    \  Specifically, we need to determine to what extent\n   middleboxes will permit\
    \ the use of TCP-ENO.  Once TCP-ENO is\n   deployed, we will be in a better position\
    \ to gather data on two types\n   of failure:\n   1.  Middleboxes downgrading\
    \ TCP-ENO connections to unencrypted TCP.\n       This can happen if middleboxes\
    \ strip unknown TCP options or if\n       they terminate TCP connections and relay\
    \ data back and forth.\n   2.  Middleboxes causing TCP-ENO connections to fail\
    \ completely.  This\n       can happen if middleboxes perform deep packet inspection\
    \ and\n       start dropping segments that unexpectedly contain ciphertext, or\n\
    \       if middleboxes strip ENO options from non-SYN segments after\n       allowing\
    \ them in SYN segments.\n   Type-1 failures are tolerable since TCP-ENO is designed\
    \ for\n   incremental deployment anyway.  Type-2 failures are more problematic,\n\
    \   and, if prevalent, will require the development of techniques to\n   avoid\
    \ and recover from such failures.  The experiment will succeed so\n   long as\
    \ we can avoid type-2 failures and find sufficient use cases\n   that avoid type-1\
    \ failures (possibly along with a gradual path for\n   further reducing type-1\
    \ failures).\n   In addition to the question of basic viability, deploying TCP-ENO\n\
    \   will allow us to identify and address other potential corner cases or\n  \
    \ relaxations.  For example, does the slight decrease in effective TCP\n   segment\
    \ payload pose a problem to any applications, which would\n   require restrictions\
    \ on how TEPs interpret socket buffer sizes?\n   Conversely, can we relax the\
    \ prohibition on default TEPs that disable\n   urgent data?\n   A final important\
    \ metric, related to the pace of deployment and\n   incidence of type-1 failures,\
    \ will be the extent to which\n   applications adopt enhancements specific to\
    \ TCP-ENO for endpoint\n   authentication.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   An obvious use case for TCP-ENO is opportunistic\
    \ encryption, e.g.,\n   encrypting some connections, but only where supported\
    \ and without any\n   kind of endpoint authentication.  Opportunistic encryption\
    \ provides a\n   property known as \"opportunistic security\" [RFC7435], which\
    \ protects\n   against undetectable large-scale eavesdropping.  However, it does\
    \ not\n   protect against detectable large-scale eavesdropping (for instance,\n\
    \   if ISPs terminate TCP connections and proxy them or simply downgrade\n   connections\
    \ to unencrypted).  Moreover, opportunistic encryption\n   emphatically does not\
    \ protect against targeted attacks that employ\n   trivial spoofing to redirect\
    \ a specific high-value connection to a\n   man-in-the-middle attacker.  Hence,\
    \ the mere presence of TEP-\n   indicated encryption does not suffice for an application\
    \ to represent\n   a connection as secure to the user.\n   Achieving stronger\
    \ security with TCP-ENO requires verifying session\n   IDs.  Any application relying\
    \ on ENO for communication security MUST\n   incorporate session IDs into its\
    \ endpoint authentication.  By way of\n   example, an authentication mechanism\
    \ based on keyed digests (such as\n   Digest Access Authentication [RFC7616])\
    \ can be extended to include\n   the role and session ID in the input of the keyed\
    \ digest.\n   Authentication mechanisms with a notion of channel binding (such\
    \ as\n   Salted Challenge Response Authentication Mechanism (SCRAM) [RFC5802])\n\
    \   can be updated to derive a channel binding from the session ID.\n   Higher-layer\
    \ protocols MAY use the application-aware \"a\" bit to\n   negotiate the inclusion\
    \ of session IDs in authentication even when\n   there is no in-band way to carry\
    \ out such a negotiation.  Because\n   there is only one \"a\" bit, however, a\
    \ protocol extension that\n   specifies use of the \"a\" bit will likely require\
    \ a built-in\n   versioning or negotiation mechanism to accommodate crypto agility\
    \ and\n   future updates.\n   Because TCP-ENO enables multiple different TEPs\
    \ to coexist, security\n   could potentially be only as strong as the weakest\
    \ available TEP.  In\n   particular, if TEPs use a weak hash function to incorporate\
    \ the TCP-\n   ENO transcript into session IDs, then an attacker can undetectably\n\
    \   tamper with ENO options to force negotiation of a deprecated and\n   vulnerable\
    \ TEP.  To avoid such problems, security reviewers of new\n   TEPs SHOULD pay\
    \ particular attention to the collision resistance of\n   hash functions used\
    \ for session IDs (including the state of\n   cryptanalysis and research into\
    \ possible attacks).  Even if other\n   parts of a TEP rely on more esoteric cryptography\
    \ that turns out to\n   be vulnerable, it ought nonetheless to be intractable\
    \ for an attacker\n   to induce identical session IDs at both ends after tampering\
    \ with ENO\n   contents in SYN segments.\n   Implementations MUST NOT send ENO\
    \ options unless they have access to\n   an adequate source of randomness [RFC4086].\
    \  Without secret\n   unpredictable data at both ends of a connection, it is impossible\
    \ for\n   TEPs to achieve confidentiality and forward secrecy.  Because systems\n\
    \   typically have very little entropy on bootup, implementations might\n   need\
    \ to disable TCP-ENO until after system initialization.\n   With a regular three-way\
    \ handshake (meaning no simultaneous open),\n   the non-SYN-form ENO option in\
    \ an active opener's first ACK segment\n   MAY contain N > 0 bytes of TEP-specific\
    \ data, as shown in Figure 3.\n   Such data is not part of the TCP-ENO negotiation\
    \ transcript and\n   therefore MUST be separately authenticated by the TEP.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document defines a new TCP option kind for\
    \ TCP-ENO, assigned a\n   value of 69 from the TCP option space.  This value is\
    \ defined as:\n     +------+--------+----------------------------------+-----------+\n\
    \     | Kind | Length | Meaning                          | Reference |\n     +------+--------+----------------------------------+-----------+\n\
    \     | 69   | N      | Encryption Negotiation (TCP-ENO) | RFC 8547  |\n     +------+--------+----------------------------------+-----------+\n\
    \                     Table 2: TCP Option Kind Numbers\n   Early implementations\
    \ of TCP-ENO and a predecessor TCP encryption\n   protocol made unauthorized use\
    \ of TCP option kind 69.  These earlier\n   uses of option 69 are not compatible\
    \ with TCP-ENO and could disable\n   encryption or suffer complete connection\
    \ failure when interoperating\n   with TCP-ENO-compliant hosts.  Hence, legacy\
    \ use of option 69 MUST be\n   disabled on hosts that cannot be upgraded to TCP-ENO.\
    \  More recent\n   implementations used experimental option 253 per [RFC6994]\
    \ with\n   16-bit ExID 0x454E.  Current and new implementations of TCP-ENO MUST\n\
    \   use option 69, while any legacy implementations MUST migrate to\n   option\
    \ 69.  Note in particular that Section 4.1 requires at most one\n   SYN-form ENO\
    \ option per segment, which means hosts MUST NOT include\n   both option 69 and\
    \ option 253 with ExID 0x454E in the same TCP\n   segment.\n   This document defines\
    \ a 7-bit glt field in the range of 0x20-0x7f.\n   IANA has created and will maintain\
    \ a new registry titled \"TCP\n   Encryption Protocol Identifiers\" under the\
    \ \"Transmission Control\n   Protocol (TCP) Parameters\" registry.  Table 3 shows\
    \ the initial\n   contents of this registry.  This document allocates one TEP\n\
    \   identifier (0x20) for experimental use.  In case the TEP identifier\n   space\
    \ proves too small, identifiers in the range 0x70-0x7f are\n   reserved to enable\
    \ a future update to this document to define\n   extended identifier values. \
    \ Future assignments are to be made upon\n   satisfying either of two policies\
    \ defined in [RFC8126]: \"IETF Review\"\n   or (for non-IETF stream specifications)\
    \ \"Expert Review with RFC\n   Required\".  IANA will furthermore provide early\
    \ allocation [RFC7120]\n   to facilitate testing before RFCs are finalized.\n\
    \         +-----------+------------------------------+-----------+\n         |\
    \ Value     | Meaning                      | Reference |\n         +-----------+------------------------------+-----------+\n\
    \         | 0x20      | Experimental Use             | RFC 8547  |\n         |\
    \ 0x70-0x7f | Reserved for extended values | RFC 8547  |\n         +-----------+------------------------------+-----------+\n\
    \               Table 3: TCP Encryption Protocol Identifiers\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [NIST-SP-800-57]\n              National Institute\
    \ of Standards and Technology,\n              \"Recommendation for Key Management\
    \ - Part 1: General\",\n              NIST Special Publication, 800-57, Revision\
    \ 4,\n              DOI 10.6028/NIST.SP.800-57pt1r4, January 2016,\n         \
    \     <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n              NIST.SP.800-57pt1r4.pdf>.\n\
    \   [RFC793]   Postel, J., \"Transmission Control Protocol\", STD 7,\n       \
    \       RFC 793, DOI 10.17487/RFC0793, September 1981,\n              <https://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4086]\
    \  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness\
    \ Requirements for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086,\
    \ June 2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC7120]\
    \  Cotton, M., \"Early IANA Allocation of Standards Track Code\n             \
    \ Points\", BCP 100, RFC 7120, DOI 10.17487/RFC7120, January\n              2014,\
    \ <https://www.rfc-editor.org/info/rfc7120>.\n   [RFC8126]  Cotton, M., Leiba,\
    \ B., and T. Narten, \"Guidelines for\n              Writing an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126, June\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC3493]  Gilligan, R., Thomson, S., Bound,\
    \ J., McCann, J., and W.\n              Stevens, \"Basic Socket Interface Extensions\
    \ for IPv6\",\n              RFC 3493, DOI 10.17487/RFC3493, February 2003,\n\
    \              <https://www.rfc-editor.org/info/rfc3493>.\n   [RFC4253]  Ylonen,\
    \ T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Transport Layer\
    \ Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n              January 2006, <https://www.rfc-editor.org/info/rfc4253>.\n\
    \   [RFC4987]  Eddy, W., \"TCP SYN Flooding Attacks and Common\n             \
    \ Mitigations\", RFC 4987, DOI 10.17487/RFC4987, August 2007,\n              <https://www.rfc-editor.org/info/rfc4987>.\n\
    \   [RFC5116]  McGrew, D., \"An Interface and Algorithms for Authenticated\n \
    \             Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008,\n  \
    \            <https://www.rfc-editor.org/info/rfc5116>.\n   [RFC5382]  Guha, S.,\
    \ Ed., Biswas, K., Ford, B., Sivakumar, S., and P.\n              Srisuresh, \"\
    NAT Behavioral Requirements for TCP\", BCP 142,\n              RFC 5382, DOI 10.17487/RFC5382,\
    \ October 2008,\n              <https://www.rfc-editor.org/info/rfc5382>.\n  \
    \ [RFC5802]  Newman, C., Menon-Sen, A., Melnikov, A., and N. Williams,\n     \
    \         \"Salted Challenge Response Authentication Mechanism\n             \
    \ (SCRAM) SASL and GSS-API Mechanisms\", RFC 5802,\n              DOI 10.17487/RFC5802,\
    \ July 2010,\n              <https://www.rfc-editor.org/info/rfc5802>.\n   [RFC6394]\
    \  Barnes, R., \"Use Cases and Requirements for DNS-Based\n              Authentication\
    \ of Named Entities (DANE)\", RFC 6394,\n              DOI 10.17487/RFC6394, October\
    \ 2011,\n              <https://www.rfc-editor.org/info/rfc6394>.\n   [RFC6994]\
    \  Touch, J., \"Shared Use of Experimental TCP Options\",\n              RFC 6994,\
    \ DOI 10.17487/RFC6994, August 2013,\n              <https://www.rfc-editor.org/info/rfc6994>.\n\
    \   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n   \
    \           Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014,\n    \
    \          <https://www.rfc-editor.org/info/rfc7413>.\n   [RFC7435]  Dukhovni,\
    \ V., \"Opportunistic Security: Some Protection\n              Most of the Time\"\
    , RFC 7435, DOI 10.17487/RFC7435,\n              December 2014, <https://www.rfc-editor.org/info/rfc7435>.\n\
    \   [RFC7616]  Shekh-Yusef, R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n     \
    \         Digest Access Authentication\", RFC 7616,\n              DOI 10.17487/RFC7616,\
    \ September 2015,\n              <https://www.rfc-editor.org/info/rfc7616>.\n\
    \   [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n  \
    \            <https://www.rfc-editor.org/info/rfc8446>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We are grateful for contributions, help, discussions, and\
    \ feedback\n   from the IETF and its TCPINC Working Group, including Marcelo\n\
    \   Bagnulo, David Black, Bob Briscoe, Benoit Claise, Spencer Dawkins,\n   Jake\
    \ Holland, Jana Iyengar, Tero Kivinen, Mirja Kuhlewind, Watson\n   Ladd, Kathleen\
    \ Moriarty, Yoav Nir, Christoph Paasch, Eric Rescorla,\n   Adam Roach, Kyle Rose,\
    \ Michael Scharf, Joe Touch, and Eric Vyncke.\n   This work was partially funded\
    \ by DARPA CRASH and the Stanford Secure\n   Internet of Things Project.\n"
- title: Contributors
  contents:
  - "Contributors\n   Dan Boneh was a coauthor of the draft that became this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andrea Bittau\n   Google\n   345 Spear Street\n   San\
    \ Francisco, CA  94105\n   United States of America\n   Email: bittau@google.com\n\
    \   Daniel B. Giffin\n   Stanford University\n   353 Serra Mall, Room 288\n  \
    \ Stanford, CA  94305\n   United States of America\n   Email: daniel@beech-grove.net\n\
    \   Mark Handley\n   University College London\n   Gower St.\n   London  WC1E\
    \ 6BT\n   United Kingdom\n   Email: M.Handley@cs.ucl.ac.uk\n   David Mazieres\n\
    \   Stanford University\n   353 Serra Mall, Room 290\n   Stanford, CA  94305\n\
    \   United States of America\n   Email: dm@uun.org\n   Eric W. Smith\n   Kestrel\
    \ Institute\n   3260 Hillview Avenue\n   Palo Alto, CA  94304\n   United States\
    \ of America\n   Email: eric.smith@kestrel.edu\n"
