- contents:
  - '                  RTP Payload for Redundant Audio Data

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document describes a payload format for use with the real-time\n
    \  transport protocol (RTP), version 2, for encoding redundant audio\n   data.
    \ The primary motivation for the scheme described herein is the\n   development
    of audio conferencing tools for use with lossy packet\n   networks such as the
    Internet Mbone, although this scheme is not\n   limited to such applications.\n"
  title: Abstract
- contents:
  - "1  Introduction\n   If multimedia conferencing is to become widely used by the
    Internet\n   Mbone community, users must perceive the quality to be sufficiently\n
    \  good for most applications.  We have identified a number of problems\n   which
    impair the quality of conferences, the most significant of\n   which is packet
    loss.  This is a persistent problem, particularly\n   given the increasing popularity,
    and therefore increasing load, of\n   the Internet.  The disruption of speech
    intelligibility even at low\n   loss rates which is currently experienced may
    convince a whole\n   generation of users that multimedia conferencing over the
    Internet is\n   not viable.  The addition of redundancy to the data stream is
    offered\n   as a solution [1].  If a packet is lost then the missing information\n
    \  may be reconstructed at the receiver from the redundant data that\n   arrives
    in the following packet(s), provided that the average number\n   of consecutively
    lost packets is small.  Recent work [4,5] shows that\n   packet loss patterns
    in the Internet are such that this scheme\n   typically functions well.\n   This
    document describes an RTP payload format for the transmission of\n   audio data
    encoded in such a redundant fashion.  Section 2 presents\n   the requirements
    and motivation leading to the definition of this\n   payload format, and does
    not form part of the payload format\n   definition.  Sections 3 onwards define
    the RTP payload format for\n   redundant audio data.\n"
  title: 1  Introduction
- contents:
  - "2  Requirements/Motivation\n   The requirements for a redundant encoding scheme
    under RTP are as\n   follows:\n     o Packets have to carry a primary encoding
    and one or more\n       redundant encodings.\n     o As a multitude of encodings
    may be used for redundant\n       information, each block of redundant encoding
    has to have an\n       encoding type identifier.\n     o As the use of variable
    size encodings is desirable, each encoded\n       block in the packet has to have
    a length indicator.\n     o The RTP header provides a timestamp field that corresponds
    to\n       the time of creation of the encoded data.  When redundant\n       encodings
    are used this timestamp field can refer to the time of\n       creation of the
    primary encoding data.  Redundant blocks of data\n       will correspond to different
    time intervals than the primary\n       data, and hence each block of redundant
    encoding will require its\n       own timestamp.  To reduce the number of bytes
    needed to carry the\n       timestamp, it can be encoded as the difference of
    the timestamp\n       for the redundant encoding and the timestamp of the primary.\n
    \  There are two essential means by which redundant audio may be added\n   to
    the standard RTP specification:  a header extension may hold the\n   redundancy,
    or one, or more, additional payload types may be defined.\n   Including all the
    redundancy information for a packet in a header\n   extension would make it easy
    for applications that do not implement\n   redundancy to discard it and just process
    the primary encoding data.\n   There are, however, a number of disadvantages with
    this scheme:\n     o There is a large overhead from the number of bytes needed
    for\n       the extension header (4) and the possible padding that is needed\n
    \      at the end of the extension to round up to a four byte  boundary\n       (up
    to 3 bytes).  For many applications this overhead is\n       unacceptable.\n     o
    Use of the header extension limits applications to a single\n       redundant
    encoding, unless further structure is introduced into\n       the extension.  This
    would result in further overhead.\n   For these reasons, the use of RTP header
    extension to hold redundant\n   audio encodings is disregarded.\n   The RTP profile
    for audio and video conferences [3] lists a set of\n   payload types and provides
    for a dynamic range of 32 encodings that\n   may be defined through a conference
    control protocol.  This leads to\n   two possible schemes for assigning additional
    RTP payload types for\n   redundant audio applications:\n     1.A dynamic encoding
    scheme may be defined, for each combination\n       of primary/redundant payload
    types, using the RTP dynamic payload\n       type range.\n     2.A single fixed
    payload type may be defined to represent a packet\n       with redundancy.  This
    may then be assigned to either a static\n       RTP payload type, or the payload
    type for this may be assigned\n       dynamically.\n   It is possible to define
    a set of payload types that signify a\n   particular combination of primary and
    secondary encodings for each of\n   the 32 dynamic payload types provided.  This
    would be a slightly\n   restrictive yet feasible solution for packets with a single
    block of\n   redundancy as the number of possible combinations is not too large.\n
    \  However the need for multiple blocks of redundancy greatly increases\n   the
    number of encoding combinations and makes this solution not\n   viable.\n   A
    modified version of the above solution could be to decide prior to\n   the beginning
    of a conference on a set a 32 encoding combinations\n   that will be used for
    the duration of the conference.  All tools in\n   the conference can be initialized
    with this working set of encoding\n   combinations.  Communication of the working
    set could be made through\n   the use of an external, out of band, mechanism.
    \ Setup is complicated\n   as great care needs to be taken in starting tools with
    identical\n   parameters.  This scheme is more efficient as only one byte is used\n
    \  to identify combinations of encodings.\n   It is felt that the complication
    inherent in distributing the mapping\n   of payload types onto combinations of
    redundant data preclude the use\n   of this mechanism.\n   A more flexible solution
    is to have a single payload type which\n   signifies a packet with redundancy.
    That packet then becomes a\n   container, encapsulating multiple payloads into
    a single RTP packet.\n   Such a scheme is flexible, since any amount of redundancy
    may be\n   encapsulated within a single packet.  There is, however, a small\n
    \  overhead since each encapsulated payload must be preceded by a header\n   indicating
    the type of data enclosed.  This is the preferred\n   solution, since it is both
    flexible, extensible, and has a relatively\n   low overhead.  The remainder of
    this document describes this\n   solution.\n"
  title: 2  Requirements/Motivation
- contents:
  - "3  Payload Format Specification\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC2119
    [7].\n   The assignment of an RTP payload type for this new packet format is\n
    \  outside the scope of this document, and will not be specified here.\n   It
    is expected that the RTP profile for a particular class of\n   applications will
    assign a payload type for this encoding, or if that\n   is not done then a payload
    type in the dynamic range shall be chosen.\n   An RTP packet containing redundant
    data shall have a standard RTP\n   header, with payload type indicating redundancy.
    \ The other fields of\n   the RTP header relate to the primary data block of the
    redundant\n   data.\n   Following the RTP header are a number of additional headers,
    defined\n   in the figure below, which specify the contents of each of the\n   encodings
    carried by the packet.  Following these additional headers\n   are a number of
    data blocks, which contain the standard RTP payload\n   data for these encodings.
    \ It is noted that all the headers are\n   aligned to a 32 bit boundary, but that
    the payload data will\n   typically not be aligned.  If multiple redundant encodings
    are\n   carried in a packet, they should correspond to different time\n   intervals:
    \ there is no reason to include multiple copies of data for\n   a single time
    interval within a packet.\n    0                   1                    2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3  4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |F|   block PT  |  timestamp offset         |   block length    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The bits in the header are specified as follows:\n   F: 1 bit First bit in
    header indicates whether another header block\n       follows.  If 1 further header
    blocks follow, if 0 this is the\n       last header block.\n   block PT: 7 bits
    RTP payload type for this block.\n   timestamp offset:  14 bits Unsigned offset
    of timestamp of this block\n       relative to timestamp given in RTP header.
    \ The use of an unsigned\n       offset implies that redundant data must be sent
    after the primary\n       data, and is hence a time to be subtracted from the
    current\n       timestamp to determine the timestamp of the data for which this\n
    \      block is the redundancy.\n   block length:  10 bits Length in bytes of
    the corresponding data\n       block excluding header.\n   It is noted that the
    use of an unsigned timestamp offset limits the\n   use of redundant data slightly:
    \ it is not possible to send\n   redundancy before the primary encoding.  This
    may affect schemes\n   where a low bandwidth coding suitable for redundancy is
    produced\n   early in the encoding process, and hence could feasibly be\n   transmitted
    early.  However, the addition of a sign bit would\n   unacceptably reduce the
    range of the timestamp offset, and increasing\n   the size of the field above
    14 bits limits the block length field.\n   It seems that limiting redundancy to
    be transmitted after the primary\n   will cause fewer problems than limiting the
    size of the other fields.\n   The timestamp offset for a redundant block is measured
    in the same\n   units as the timestamp of the primary encoding (ie:  audio samples,\n
    \  with the same clock rate as the primary).  The implication of this is\n   that
    the redundant encoding MUST be sampled at the same rate as the\n   primary.\n
    \  It is further noted that the block length and timestamp offset are 10\n   bits,
    and 14 bits respectively; rather than the more obvious 8 and 16\n   bits.  Whilst
    such an encoding complicates parsing the header\n   information slightly, and
    adds some additional processing overhead,\n   there are a number of problems involved
    with the more obvious choice:\n   An 8 bit block length field is sufficient for
    most, but not all,\n   possible encodings:  for example 80ms PCM and DVI audio
    packets\n   comprise more than 256 bytes, and cannot be encoded with a single\n
    \  byte length field.  It is possible to impose additional structure on\n   the
    block length field (for example the high bit set could imply the\n   lower 7 bits
    code a length in words, rather than bytes), however such\n   schemes are complex.
    \ The use of a 10 bit block length field retains\n   simplicity and provides an
    enlarged range, at the expense of a\n   reduced range of timestamp values.\n   The
    primary encoding block header is placed last in the packet.  It\n   is therefore
    possible to omit the timestamp and block-length fields\n   from the header of
    this block, since they may be determined from the\n   RTP header and overall packet
    length.  The header for the primary\n   (final) block comprises only a zero F
    bit, and the block payload type\n   information, a total of 8 bits.  This is illustrated
    in the figure\n   below:\n                      0 1 2 3 4 5 6 7\n                     +-+-+-+-+-+-+-+-+\n
    \                    |0|   Block PT  |\n                     +-+-+-+-+-+-+-+-+\n
    \  The final header is followed, immediately, by the data blocks, stored\n   in
    the same order as the headers.  There is no padding or other\n   delimiter between
    the data blocks, and they are typically not 32 bit\n   aligned.  Again, this choice
    was made to reduce bandwidth overheads,\n   at the expense of additional decoding
    time.\n   The choice of encodings used should reflect the bandwidth\n   requirements
    of those encodings.  It is expected that the redundant\n   encoding shall use
    significantly less bandwidth that the primary\n   encoding:  the exception being
    the case where the primary is very\n   low-bandwidth and has high processing requirement,
    in which case a\n   copy of the primary MAY be used as the redundancy.  The redundant\n
    \  encoding MUST NOT be higher bandwidth than the primary.\n   The use of multiple
    levels of redundancy is rarely necessary.\n   However, in those cases which require
    it, the bandwidth required by\n   each level of redundancy is expected to be significantly
    less than\n   that of the previous level.\n"
  title: 3  Payload Format Specification
- contents:
  - "4  Limitations\n   The RTP marker bit is not preserved for redundant data blocks.
    \ Hence\n   if the primary (containing this marker) is lost, the marker is lost.\n
    \  It is believed that this will not cause undue problems:  even if the\n   marker
    bit was transmitted with the redundant information, there\n   would still be the
    possibility of its loss, so applications would\n   still have to be written with
    this in mind.\n   In addition, CSRC information is not preserved for redundant
    data.\n   The CSRC data in the RTP header of a redundant audio packet relates\n
    \  to the primary only.  Since CSRC data in an audio stream is expected\n   to
    change relatively infrequently, it is recommended that\n   applications which
    require this information assume that the CSRC data\n   in the RTP header may be
    applied to the reconstructed redundant data.\n"
  title: 4  Limitations
- contents:
  - "5  Relation to SDP\n   When a redundant payload is used, it may need to be bound
    to an RTP\n   dynamic payload type.  This may be achieved through any out-of-band\n
    \  mechanism, but one common way is to communicate this binding using\n   the
    Session Description Protocol (SDP) [6].  SDP has a mechanism for\n   binding a
    dynamic payload types to particular codec, sample rate, and\n   number of channels
    using the \"rtpmap\" attribute.  An example of its\n   use (using the RTP audio/video
    profile [3]) is:\n       m=audio 12345 RTP/AVP 121 0 5\n       a=rtpmap:121 red/8000/1\n
    \  This specifies that an audio stream using RTP is using payload types\n   121
    (a dynamic payload type), 0 (PCM u-law) and 5 (DVI). The \"rtpmap\"\n   attribute
    is used to bind payload type 121 to codec \"red\" indicating\n   this codec is
    actually a redundancy frame, 8KHz, and monaural.  When\n   used with SDP, the
    term \"red\" is used to indicate the redundancy\n   format discussed in this document.\n
    \  In this case the additional formats of PCM and DVI are specified.\n   The receiver
    must therefore be prepared to use these formats.  Such a\n   specification means
    the sender will send redundancy by default, but\n   also may send PCM or DVI.
    However, with a redundant payload we\n   additionally take this to mean that no
    codec other than PCM or DVI\n   will be used in the redundant encodings.  Note
    that the additional\n   payload formats defined in the \"m=\" field may themselves
    be dynamic\n   payload types, and if so a number of additional \"a=\" attributes
    may\n   be required to describe these dynamic payload types.\n   To receive a
    redundant stream, this is all that is required.  However\n   to send a redundant
    stream, the sender needs to know which codecs are\n   recommended for the primary
    and secondary (and tertiary, etc)\n   encodings.  This information is specific
    to the redundancy format,\n   and is specified using an additional attribute \"fmtp\"
    which conveys\n   format-specific information.  A session directory does not parse
    the\n   values specified in an fmtp attribute but merely hands it to the\n   media
    tool unchanged.  For redundancy, we define the format\n   parameters to be a slash
    \"/\" separated list of RTP payload types.\n   Thus a complete example is:\n       m=audio
    12345 RTP/AVP 121 0 5\n       a=rtpmap:121 red/8000/1\n       a=fmtp:121 0/5\n
    \  This specifies that the default format for senders is redundancy with\n   PCM
    as the primary encoding and DVI as the secondary encoding.\n   Encodings cannot
    be specified in the fmtp attribute unless they are\n   also specified as valid
    encodings on the media (\"m=\") line.\n"
  title: 5  Relation to SDP
- contents:
  - "6  Security Considerations\n   RTP packets containing redundant information are
    subject to the\n   security considerations discussed in the RTP specification
    [2], and\n   any appropriate RTP profile (for example [3]).  This implies that\n
    \  confidentiality of the media streams is achieved by encryption.\n   Encryption
    of a redundant data stream may occur in two ways:\n     1.The entire stream is
    to be secured, and all participants are\n       expected to have keys to decode
    the entire stream.  In this case,\n       nothing special need be done, and encryption
    is performed in the\n       usual manner.\n     2.A portion of the stream is to
    be encrypted with a different\n       key to the remainder.  In this case a redundant
    copy of the last\n       packet of that portion cannot be sent, since there is
    no\n       following packet which is encrypted with the correct key in which\n
    \      to send it.  Similar limitations may occur when\n       enabling/disabling
    encryption.\n   The choice between these two is a matter for the encoder only.\n
    \  Decoders can decrypt either form without modification.\n   Whilst the addition
    of low-bandwidth redundancy to an audio stream is\n   an effective means by which
    that stream may be protected against\n   packet loss, application designers should
    be aware that the addition\n   of large amounts of redundancy will increase network
    congestion, and\n   hence packet loss, leading to a worsening of the problem which
    the\n   use of redundancy was intended to solve.  At its worst, this can lead\n
    \  to excessive network congestion and may constitute a denial of\n   service
    attack.\n"
  title: 6  Security Considerations
- contents:
  - "7  Example Packet\n   An RTP audio data packet containing a DVI4 (8KHz) primary,
    and a\n   single block of redundancy encoded using 8KHz LPC (both 20ms\n   packets),
    as defined in the RTP audio/video profile [3] is\n   illustrated:\n    0                   1
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3  4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |V=2|P|X| CC=0  |M|      PT     |   sequence number of primary  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |              timestamp  of primary encoding                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           synchronization source (SSRC) identifier            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |1| block PT=7  |  timestamp offset         |   block length    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| block PT=5  |                                               |\n   +-+-+-+-+-+-+-+-+
    \                                              +\n   |                                                               |\n
    \  +                LPC encoded redundant data (PT=7)              +\n   |                (14
    bytes)                                     |\n   +                                               +---------------+\n
    \  |                                               |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    \              +\n   |                                                               |\n
    \  +                                                               +\n   |                                                               |\n
    \  +                                                               +\n   |                                                               |\n
    \  +                                                               +\n   |                DVI4
    encoded primary data (PT=5)               |\n   +                (84 bytes, not
    to scale)                       +\n   /                                                               /\n
    \  +                                                               +\n   |                                                               |\n
    \  +                                                               +\n   |                                                               |\n
    \  +                                               +---------------+\n   |                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
  title: 7  Example Packet
- contents:
  - "8  Authors' Addresses\n   Colin Perkins/Isidor Kouvelas/Orion Hodson/Vicky Hardman\n
    \  Department of Computer Science\n   University College London\n   London WC1E
    6BT\n   United Kingdom\n   EMail:  {c.perkins|i.kouvelas|o.hodson|v.hardman}@cs.ucl.ac.uk\n
    \  Mark Handley\n   USC Information Sciences Institute\n   c/o MIT Laboratory
    for Computer Science\n   545 Technology Square\n   Cambridge, MA 02139, USA\n
    \  EMail:  mjh@isi.edu\n   Jean-Chrysostome Bolot/Andres Vega-Garcia/Sacha Fosse-Parisis\n
    \  INRIA Sophia Antipolis\n   2004 Route des Lucioles, BP 93\n   06902 Sophia
    Antipolis\n   France\n   EMail:  {bolot|avega|sfosse}@sophia.inria.fr\n"
  title: 8  Authors' Addresses
- contents:
  - "9  References\n   [1] V.J. Hardman, M.A. Sasse, M. Handley and A. Watson; Reliable\n
    \  Audio for Use over the Internet; Proceedings INET'95, Honalulu, Oahu,\n   Hawaii,
    September 1995.  http://www.isoc.org/in95prc/\n   [2] Schulzrinne, H., Casner,
    S., Frederick R., and V. Jacobson, \"RTP:\n   A Transport Protocol for Real-Time
    Applications\", RFC 1889, January\n   1996.\n   [3] Schulzrinne, H., \"RTP Profile
    for Audio and Video Conferences\n   with Minimal Control\", RFC 1890, January
    1996.\n   [4] M. Yajnik, J. Kurose and D. Towsley; Packet loss correlation in\n
    \  the MBone multicast network; IEEE Globecom Internet workshop, London,\n   November
    1996\n   [5] J.-C. Bolot and A. Vega-Garcia; The case for FEC-based error\n   control
    for packet audio in the Internet; ACM Multimedia Systems,\n   1997\n   [6] Handley,
    M., and V. Jacobson, \"SDP: Session Description Protocol\n   (draft 03.2)\", Work
    in Progress.\n   [7] Bradner, S., \"Key words for use in RFCs to indicate requirement\n
    \  levels\", RFC 2119, March 1997.\n"
  title: 9  References
