- title: __initial_text__
  contents:
  - '   Session Initiation Protocol (SIP) Usage of the Offer/Answer Model

    '
- title: Abstract
  contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) utilizes the offer/answer\
    \ model\n   to establish and update multimedia sessions using the Session\n  \
    \ Description Protocol (SDP).  The description of the offer/answer\n   model in\
    \ SIP is dispersed across multiple RFCs.  This document\n   summarizes all the\
    \ current usages of the offer/answer model in SIP\n   communication.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6337.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Summary of SIP Usage of the Offer/Answer Model ..................3\n  \
    \    2.1. Terminology ................................................3\n    \
    \  2.2. Offer/Answer Exchange Pairs in SIP Messages ................4\n      2.3.\
    \ Rejection of an Offer ......................................5\n      2.4. Session\
    \ Description That Is Not an Offer or an Answer ......7\n   3. Detailed Discussion\
    \ of the Offer/Answer Model for SIP ...........8\n      3.1. Offer/Answer for\
    \ the INVITE method with 100rel Extension ...8\n           3.1.1. INVITE Request\
    \ with SDP .............................8\n           3.1.2. INVITE Request without\
    \ SDP .........................11\n      3.2. Offer/Answer Exchange in Early Dialog\
    \ .....................12\n      3.3. Offer/Answer Exchange in an Established\
    \ Dialog ............12\n      3.4. Recovering from a Failed Re-INVITE ........................13\n\
    \   4. Exceptional Case Handling ......................................13\n  \
    \    4.1. Message Crossing Case Handling ............................13\n    \
    \  4.2. Glare Case Handling .......................................18\n      4.3.\
    \ Interworking of UPDATE and Re-INVITE ......................21\n   5. Content\
    \ of Offers and Answers ..................................25\n      5.1. General\
    \ Principle for Constructing Offers and Answers .....26\n      5.2. Choice of\
    \ Media Types and Formats to Include and Exclude ..26\n           5.2.1. Sending\
    \ an Initial INVITE with Offer ...............26\n           5.2.2. Responding\
    \ with an Offer When the Initial\n                  INVITE Has No Offer ................................27\n\
    \           5.2.3. Answering an Initial INVITE with Offer .............27\n  \
    \         5.2.4. Answering When the Initial INVITE Had No Offer .....28\n    \
    \       5.2.5. Subsequent Offers and Answers ......................28\n      5.3.\
    \ Hold and Resume of Media ..................................29\n      5.4. Behavior\
    \ on Receiving SDP with c=0.0.0.0 ..................31\n   6. Security Considerations\
    \ ........................................31\n   7. Acknowledgements ...............................................31\n\
    \   8. References .....................................................32\n  \
    \    8.1. Normative References ......................................32\n    \
    \  8.2. Informative References ....................................33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SIP utilizes the offer/answer model to establish and update\
    \ sessions.\n   The rules that govern the offer/answer behaviors in SIP are described\n\
    \   in several RFCs: [RFC3261], [RFC3262], [RFC3264], [RFC3311], and\n   [RFC6141].\n\
    \   The primary purpose of this document is to describe all forms of SIP\n   usage\
    \ of the offer/answer model in one document to help the readers\n   to fully understand\
    \ it.  Also, this document tries to incorporate the\n   results of the discussions\
    \ on the controversial issues to avoid\n   repeating the same discussions later.\n\
    \   This document describes ambiguities in the current specifications and\n  \
    \ the authors' understanding of the correct interpretation of these\n   specifications.\
    \  This document is not intended to make any changes to\n   those specifications,\
    \ but rather is intended to provide a reference\n   for future standards development\
    \ work on the SIP offer/answer model\n   and to developers looking for advice\
    \ on how to implement in\n   compliance with the standards.\n"
- title: 2.  Summary of SIP Usage of the Offer/Answer Model
  contents:
  - "2.  Summary of SIP Usage of the Offer/Answer Model\n   The offer/answer model\
    \ itself is independent from the higher layer\n   application protocols that utilize\
    \ it.  SIP is one of the\n   applications using the offer/answer model.  [RFC3264]\
    \ defines the\n   offer/answer model, but does not specify which SIP messages\
    \ should\n   convey an offer or an answer.  This should be defined in the SIP\
    \ core\n   and extension RFCs.\n   In theory, any SIP message can include a session\
    \ description in its\n   body.  But a session description in a SIP message is\
    \ not necessarily\n   an offer or an answer.  Only certain session description\
    \ usages that\n   conform to the rules described in Standards-Track RFCs can be\n\
    \   interpreted as an offer or an answer.  The rules for how to handle\n   the\
    \ offer/answer model are defined in several RFCs.\n   The offer/answer model defines\
    \ a mechanism for update of sessions.\n   In SIP, a dialog is used to associate\
    \ an offer/answer exchange with\n   the session that it is to update.  In other\
    \ words, only the offer/\n   answer exchange in the SIP dialog can update the\
    \ session that is\n   managed by that dialog.\n"
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   The following abbreviations are used in this document.\n   UA:\
    \  User Agent.\n   UAC: User Agent Client.\n   UAS: User Agent Server.\n   SDP:\
    \ Session Description Protocol [RFC4566].\n"
- title: 2.2.  Offer/Answer Exchange Pairs in SIP Messages
  contents:
  - "2.2.  Offer/Answer Exchange Pairs in SIP Messages\n   Currently, the rules on\
    \ the offer/answer model are defined in\n   [RFC3261], [RFC3262], [RFC3264], [RFC3311],\
    \ and [RFC6141].  In these\n   RFCs, only the six patterns shown in Table 1 are\
    \ defined for\n   exchanging an offer and an answer with SIP messages.\n   Note\
    \ that an offer/answer exchange initiated by an INVITE request\n   must follow\
    \ exactly one of the Patterns 1, 2, 3, 4.  When an initial\n   INVITE causes multiple\
    \ dialogs due to forking, an offer/answer\n   exchange is carried out independently\
    \ in each distinct dialog.  When\n   an INVITE request contains no offer, only\
    \ Pattern 2 or Pattern 4\n   apply.  According to Section 13.2.1 of [RFC3261],\
    \ 'The first reliable\n   non-failure message' must have an offer if there is\
    \ no offer in the\n   INVITE request.  This means that the User Agent (UA) that\
    \ receives\n   the INVITE request without an offer must include an offer in the\n\
    \   first reliable response with 100rel extension.  If no reliable\n   provisional\
    \ response has been sent, the User Agent Server (UAS) must\n   include an offer\
    \ when sending 2xx response.\n   In Pattern 3, the first reliable provisional\
    \ response may or may not\n   have an answer.  When a reliable provisional response\
    \ contains a\n   session description, and is the first to do so, then that session\n\
    \   description is the answer to the offer in the INVITE request.  The\n   answer\
    \ cannot be updated, and a new offer cannot be sent in a\n   subsequent reliable\
    \ response for the same INVITE transaction.\n   In Pattern 5, a Provisional Response\
    \ ACKnowledgement (PRACK) request\n   can contain an offer only if the reliable\
    \ response that it\n   acknowledges contains an answer to the previous offer/answer\n\
    \   exchange.\n      NOTE: It is legal to have UPDATE/2xx exchanges without offer/\n\
    \      answer exchanges (Pattern 6).  However, when re-INVITEs are sent\n    \
    \  for non-offer/answer purposes, an offer/answer exchange is\n      required.\
    \  In that case, the prior SDP will typically be repeated.\n   There may be ONLY\
    \ ONE offer/answer negotiation in progress for a\n   single dialog at any point\
    \ in time.  Section 4 explains how to ensure\n   this.  When an INVITE results\
    \ in multiple dialogs, each has a\n   separate offer/answer negotiation.\n   \
    \   NOTE: This is when using a Content-Disposition of \"session\".\n      There\
    \ may be a second offer/answer negotiation in progress using a\n      Content-Disposition\
    \ of \"early-session\" [RFC3959].  That is not\n      addressed by this document.\n\
    \            Offer                Answer             RFC    Ini Est Early\n  \
    \   -------------------------------------------------------------------\n    \
    \ 1. INVITE Req.          2xx INVITE Resp.     RFC 3261  Y   Y    N\n     2. 2xx\
    \ INVITE Resp.     ACK Req.             RFC 3261  Y   Y    N\n     3. INVITE Req.\
    \          1xx-rel INVITE Resp. RFC 3262  Y   Y    N\n     4. 1xx-rel INVITE Resp.\
    \ PRACK Req.           RFC 3262  Y   Y    N\n     5. PRACK Req.           200\
    \ PRACK Resp.      RFC 3262  N   Y    Y\n     6. UPDATE Req.          2xx UPDATE\
    \ Resp.     RFC 3311  N   Y    Y\n          Table 1: Summary of SIP Usage of the\
    \ Offer/Answer Model\n   In Table 1, '1xx-rel' corresponds to the reliable provisional\n\
    \   response that contains the 100rel option defined in [RFC3262].\n   The 'Ini'\
    \ column shows the ability to exchange the offer/answer to\n   initiate the session.\
    \  'Y' indicates that the pattern can be used in\n   the initial offer/answer\
    \ exchange, while 'N' indicates that it\n   cannot.  Only the initial INVITE transaction\
    \ can be used to exchange\n   the offer/answer to establish a multimedia session.\n\
    \   The 'Est' column shows the ability to update the established session.\n  \
    \ The 'Early' column indicates which patterns may be used to modify the\n   established\
    \ session in an early dialog.  There are two ways to\n   exchange a subsequent\
    \ offer/answer in an early dialog.\n"
- title: 2.3.  Rejection of an Offer
  contents:
  - "2.3.  Rejection of an Offer\n   It is not always clear how to reject an offer\
    \ when it is\n   unacceptable, and some methods do not allow explicit rejection\
    \ of an\n   offer.  For each of the patterns in Table 1, Table 2 shows how to\n\
    \   reject an offer.\n   When a UA receives an INVITE request with an unacceptable\
    \ offer, it\n   should respond with a 488 response, preferably with Warning header\n\
    \   field indicating the reason of the rejection, unless another response\n  \
    \ code is more appropriate to reject it (Pattern 1 and Pattern 3).\n   If this\
    \ is a re-INVITE, extra care must be taken, as detailed in\n   [RFC6141].  Specifically,\
    \ if the offer contains any changes or\n   additions to media stream properties,\
    \ and those have already been\n   used to transmit/receive media before the final\
    \ response is sent,\n   then a 2xx response should be sent, with a syntactically\
    \ correct\n   session description.  This may optionally be followed by an UPDATE\n\
    \   request to rearrange the session parameters if both ends support the\n   UPDATE\
    \ method.  Alternatively, the UA may send an error response to\n   the (re-)INVITE\
    \ request to terminate the dialog or to roll back the\n   offer/answer status\
    \ before sending re-INVITE request.  In this case,\n   the UAS should not continue\
    \ to retransmit the unacknowledged reliable\n   provisional response; the User\
    \ Agent Client (UAC) should not continue\n   to retransmit a PRACK request.\n\
    \   When a UA receives an UPDATE request with an offer that it cannot\n   accept,\
    \ it should respond with a 488 response, preferably with\n   Warning header field\
    \ indicating the reason of the rejection, unless\n   another response code is\
    \ more appropriate to reject it (Pattern 6).\n   When a UA receives a PRACK request\
    \ with an offer that it cannot\n   accept, it may respond with a 200 response\
    \ with a syntactically\n   correct session description.  Optionally, this may\
    \ be followed by an\n   UPDATE request to rearrange the session parameters if\
    \ both ends\n   support the UPDATE method.  Alternatively, the UA may terminate\
    \ the\n   dialog and send an error response to the INVITE request (Pattern 5).\n\
    \   In addition, there is a possibility for UAC to receive a 488 response\n  \
    \ for an PRACK request.  In that case, UAC may send again a PRACK\n   request\
    \ without an offer or send a CANCEL request to terminate the\n   INVITE transaction.\n\
    \      NOTE: In [RFC3262], the following restriction is defined with\n      regard\
    \ to responding to a PRACK request.\n      \"If the PRACK does match an unacknowledged\
    \ reliable provisional\n      response, it MUST be responded to with a 2xx response.\"\
    \n      This restriction is not clear.  There are cases where it is\n      unacceptable\
    \ to send a 2xx response.  For example, the UAS may\n      need to send an authentication\
    \ challenge in a 401 response.  This\n      is an open issue and out of scope\
    \ for this document.\n   When a UA receives a response with an offer that it cannot\
    \ accept,\n   the UA does not have a way to reject it explicitly.  Therefore,\
    \ a UA\n   should respond to the offer with the correct session description and\n\
    \   rearrange the session parameters by initiating a new offer/answer\n   exchange,\
    \ or alternatively terminate the session (Pattern 2 and\n   Pattern 4).  When\
    \ initiating a new offer/answer, a UA should take\n   care not to cause an infinite\
    \ offer/answer loop.\n   Section 14.2 of [RFC3261], \"UAS Behavior\", states:\n\
    \      The UAS MUST ensure that the session description overlaps with its\n  \
    \    previous session description in media formats, transports, or\n      other\
    \ parameters that require support from the peer.  This is to\n      avoid the\
    \ need for the peer to reject the session description.\n   This is a rule for\
    \ an offer within 2xx response to a re-INVITE.  This\n   rule should be applied\
    \ to an offer within a reliable provisional\n   response and a PRACK request.\n\
    \        Offer                Rejection\n     ------------------------------------------------------------------\n\
    \     1. INVITE Req. (*)      488 INVITE Response\n     2. 2xx INVITE Resp.  \
    \   Answer in ACK Req. followed by new offer\n                             OR\
    \ termination of dialog\n     3. INVITE Req.          488 INVITE Response (same\
    \ as Pattern 1)\n     4. 1xx-rel INVITE Resp. Answer in PRACK Req. followed by\
    \ new offer\n     5. PRACK Req. (**)      200 PRACK Resp. followed by new offer\n\
    \                             OR termination of dialog\n     6. UPDATE Req.  \
    \        488 UPDATE Response\n   (*) If this was a re-INVITE, a failure response\
    \ should not be sent if\n   media has already been exchanged using the new offer.\n\
    \   (**) A UA should only use PRACK to send an offer when it has strong\n   reasons\
    \ to expect the receiver will accept the offer.\n                      Table 2:\
    \ Rejection of an Offer\n"
- title: 2.4.  Session Description That Is Not an Offer or an Answer
  contents:
  - "2.4.  Session Description That Is Not an Offer or an Answer\n   As previously\
    \ stated, a session description in a SIP message is not\n   necessarily an offer\
    \ or an answer.  For example, SIP can use a\n   session description to describe\
    \ capabilities apart from offer/answer\n   exchange.  Examples of this are a 200\
    \ OK response for OPTIONS and a\n   488 response for INVITE.\n"
- title: 3.  Detailed Discussion of the Offer/Answer Model for SIP
  contents:
  - '3.  Detailed Discussion of the Offer/Answer Model for SIP

    '
- title: 3.1.  Offer/Answer for the INVITE method with 100rel Extension
  contents:
  - "3.1.  Offer/Answer for the INVITE method with 100rel Extension\n   The INVITE\
    \ method provides the basic procedure for offer/answer\n   exchange in SIP.  Without\
    \ the 100rel option, the rules are simple as\n   described in [RFC3261].  If an\
    \ INVITE request includes a session\n   description, Pattern 1 is applied and\
    \ if an INVITE request does not\n   include a session description, Pattern 2 is\
    \ applied.\n   With 100rel, Patterns 3, 4, and 5 are added and this complicates\
    \ the\n   rules.  An INVITE request may cause multiple responses.  Note that\n\
    \   even if both UAs support the 100rel extension, not all the\n   provisional\
    \ responses may be sent reliably.\n"
- title: 3.1.1.  INVITE Request with SDP
  contents:
  - "3.1.1.  INVITE Request with SDP\n   When a UAC includes an SDP body in the INVITE\
    \ request as an offer,\n   only the first SDP in a reliable non-failure response\
    \ to the INVITE\n   request is the real answer.  No other offer/answer exchanges\
    \ can\n   occur within the messages (other responses and ACK) of the INVITE\n\
    \   transaction.\n   In [RFC3261] there are some descriptions about an offer/answer\n\
    \   exchange, but those cause a little confusion.  We interpret those\n   descriptions\
    \ as follows,\n   UAC behavior:\n      1.  If the first SDP that the UAC received\
    \ is included in an\n          unreliable provisional response to the INVITE request,\n\
    \          [RFC3261] (Section 13.2.1, second bullet) requires that this\n    \
    \      be treated as an answer.  However, because that same section\n        \
    \  states that the answer has to be in a reliable non-failure\n          message,\
    \ this SDP is not the true answer and therefore the\n          offer/answer exchange\
    \ is not yet completed.\n      2.  After the UAC has received the answer in a\
    \ reliable\n          provisional response to the INVITE, [RFC3261] requires that\n\
    \          any SDP in subsequent responses be ignored.\n      3.  If the second\
    \ and subsequent SDP (including a real answer) is\n          different from the\
    \ first SDP, the UAC should consider that the\n          SDP is equal to the first\
    \ SDP.  Therefore, the UAC should not\n          switch to the new SDP.\n   UAS\
    \ behavior:\n      1.  [RFC3261] requires all SDP in the responses to the INVITE\n\
    \          request to be identical.\n      2.  After the UAS has sent the answer\
    \ in a reliable provisional\n          response to the INVITE, the UAS should\
    \ not include any SDPs in\n          subsequent responses to the INVITE.\n   \
    \   3.  [RFC3261] permits the UAS to send any provisional response\n         \
    \ without SDP regardless of the transmission of the answer.\n   A session description\
    \ in an unreliable response that precedes a\n   reliable response can be considered\
    \ a \"preview\" of the answer that\n   will be coming.\n      NOTE: This \"preview\"\
    \ session description rule applies to a single\n      offer/answer exchange. \
    \ In parallel offer/answer exchanges (caused\n      by forking), a UA may obviously\
    \ receive a different \"preview\" of\n      an answer in each dialog.  UAs are\
    \ expected to deal with this.\n   Although [RFC3261] says a UA should accept media\
    \ once an INVITE with\n   an offer has been sent, in many cases, an answer (or,\
    \ at least a\n   preview of it) is required in order for media to be accepted.\
    \  Two\n   examples of why this might be required are as follows:\n   o  To avoid\
    \ receiving media from undesired sources, some User Agents\n      assume symmetric\
    \ RTP will be used, ignore all incoming media\n      packets until an address/port\
    \ has been received from the other\n      end, and then use that address/port\
    \ to filter incoming media\n      packets.\n   o  In some networks, an intermediate\
    \ node must authorize a media\n      stream before it can flow and requires a\
    \ confirming answer to the\n      offer before doing so.\n   Therefore, a UAS\
    \ should send an SDP answer reliably (if possible)\n   before it starts sending\
    \ media.  And, if neither the UAC nor the UAS\n   support 100rel, the UAS should\
    \ send a preview of the answer before it\n   starts sending media.\n     UAC \
    \                  UAS\n      | F1  INVITE (SDP)    | <- The offer in the offer/answer\
    \ model.\n      |-------------------->|\n      | F2     1xx (SDP)    | <- The\
    \ offer/answer exchange is not\n      |<--------------------|    closed yet, but\
    \ UAC acts as if it\n      |                     | ^  receives the answer.\n \
    \     | F3 1xx-rel (no SDP) | |<- a 1xx-rel may be sent without answer\n     \
    \ |<--------------------| |   SDP.\n      | F4   PRACK (no SDP) | |\n      |-------------------->|\
    \ | The UAC must not send a new offer.\n      | F5 2xx PRA (no SDP) | |\n    \
    \  |<--------------------| v\n      |                     |\n      | F6 1xx-rel\
    \ (SDP)    | <- The answer in the offer/ answer model.\n      |<--------------------|\
    \ -\n      | F7   PRACK          | | The UAC can send a new offer in a PRACK\n\
    \      |-------------------->| | request to acknowledge F6.\n      | F8 2xx PRA\
    \          | | After F7, the UAC and UAS can send a new\n      |<--------------------|\
    \ v offer in an UPDATE request.\n      |                     |\n      | F9 1xx-rel\
    \          | <- SDP should not be included in the\n      |<--------------------|\
    \    subsequent 1xx-rel once offer/answer\n      | F10  PRACK          |    has\
    \ been completed.\n      |-------------------->|\n      | F11 2xx PRA        \
    \ |\n      |<--------------------|\n      |                     |\n      | F12\
    \ 2xx INV         | <- SDP should not be included in the\n      |<--------------------|\
    \    final response once offer/answer has\n      | F13    ACK          |    been\
    \ completed.\n      |-------------------->|\n        Figure 1: Example of Offer/Answer\
    \ with 100rel Extension (1)\n   For example, in Figure 1, only the SDP in F6 is\
    \ the answer.  The SDP\n   in the non-reliable response (F2) is the preview of\
    \ the answer and\n   must be the same as the answer in F6.  Receiving F2, the\
    \ UAC should\n   act as if it receives the answer.  However, offer/answer exchange\
    \ is\n   not completed yet and the UAC must not send a new offer until it\n  \
    \ receives the same SDP in a reliable non-failure response, which is\n   the real\
    \ answer.  After sending the SDP in F6, the UAS must prepare\n   to receive a\
    \ new offer from the UAC in a PRACK request or in an\n   UPDATE request if the\
    \ UAS supports UPDATE.\n   The UAS does not include SDP in responses F9 and F12.\
    \  However, the\n   UAC should prepare to receive SDP bodies in F9 and/or F12,\
    \ and just\n   ignore them, to handle a peer that does not conform to the\n  \
    \ recommended implementation.\n"
- title: 3.1.2.  INVITE Request without SDP
  contents:
  - "3.1.2.  INVITE Request without SDP\n   When a UAC does not include an SDP body\
    \ in the INVITE request,\n   [RFC3261] (Section 13.2.1, first bullet) requires\
    \ that the UAS\n   include an offer in the first reliable non-failure response.\n\
    \   However, a UAC might not expect an SDP in the other responses to the\n   INVITE\
    \ request because RFC 3261 simply does not anticipate the\n   possibility.  Therefore,\
    \ the UAS ought not include any SDP in the\n   other responses to the INVITE request.\n\
    \      NOTE: In Figure 2, the UAS should not include SDP in the responses\n  \
    \    F6 and F9.  However, the UAC should prepare to receive SDP bodies\n     \
    \ in F6 and/or F9, and just ignore them to handle a peer that does\n      not\
    \ conform to the recommended implementation.\n    UAC                   UAS\n\
    \     | F1  INVITE (no SDP) |\n     |-------------------->|\n     | F2     1xx\
    \          |\n     |<--------------------|\n     |                     |\n   \
    \  | F3 1xx-rel (SDP)    | <- The first 1xx-rel must contain SDP\n     |<--------------------|\
    \    as the offer.\n     | F4   PRACK (SDP)    | <- A PRACK request to the first\
    \ 1xx-rel\n     |-------------------->|    must contain SDP as the answer.\n \
    \    | F5 2xx PRA (no SDP) | -\n     |<--------------------| |\n     |       \
    \              | |\n     | F6 1xx-rel (no SDP) | <- The subsequent 1xx-rel should\
    \ not\n     |<--------------------| |  contain SDP.\n     | F7   PRACK       \
    \   | |\n     |-------------------->| | The UAC can send a new offer in an UPDATE\n\
    \     | F8 2xx PRA          | | request after F4.\n     |<--------------------|\
    \ v\n     |                     |\n     | F9 2xx INV (no SDP) | <- The final response\
    \ should not\n     |<--------------------|    contain SDP.\n     | F10    ACK\
    \          |\n     |-------------------->|\n        Figure 2: Example of Offer/Answer\
    \ with 100rel Extension (2)\n   Note that in the case that the UAC needs to prompt\
    \ the user to accept\n   or reject the offer, the reliable provisional response\
    \ with SDP as an\n   offer (Pattern 4) can result in the retransmission until\
    \ the PRACK\n   request can be sent.  The UAC should take care to avoid this\n\
    \   situation when it sends the INVITE request without SDP.\n"
- title: 3.2.  Offer/Answer Exchange in Early Dialog
  contents:
  - "3.2.  Offer/Answer Exchange in Early Dialog\n   When both UAs support the 100rel\
    \ extension, they can update the\n   session in the early dialog once the first\
    \ offer/answer exchange has\n   been completed.\n   From a UA sending an INVITE\
    \ request:\n   A UA can send an UPDATE request with a new offer if both ends support\n\
    \   the UPDATE method.  Note that if the UAS needs to prompt the user to\n   accept\
    \ or reject the offer, the delay can result in retransmission of\n   the UPDATE\
    \ request.\n   A UA can send a PRACK request with a new offer only when\n   acknowledging\
    \ the reliable provisional response carrying the answer\n   to an offer in the\
    \ INVITE request.  Compared to using the UPDATE\n   method, using PRACK can reduce\
    \ the number of messages exchanged\n   between the UAs.  However, to avoid problems\
    \ or delays caused by\n   PRACK offer rejection, the UA is recommended to send\
    \ a PRACK request\n   only when it has strong reasons to expect the receiver will\
    \ accept\n   it.  For example, the procedure used in precondition extension\n\
    \   [RFC3312] is a case where a PRACK request should be used for updating\n  \
    \ the session status in an early dialog.  Note also that if a UAS needs\n   to\
    \ prompt the user to accept or reject the offer, the delay can\n   result in retransmission\
    \ of the PRACK request.\n   From a UA receiving an INVITE request:\n   A UA can\
    \ send an UPDATE request with a new offer if both ends support\n   the UPDATE\
    \ method.  A UAS cannot send a new offer in the reliable\n   provisional response,\
    \ so the UPDATE method is the only method for a\n   UAS to update an early session.\n"
- title: 3.3.  Offer/Answer Exchange in an Established Dialog
  contents:
  - "3.3.  Offer/Answer Exchange in an Established Dialog\n   Both the re-INVITE and\
    \ UPDATE methods can be used in an established\n   dialog to update the session.\n\
    \   The UPDATE method is simpler and can save at least one message\n   compared\
    \ with the INVITE method.  But both ends must support the\n   UPDATE method for\
    \ it to be used.\n   The INVITE method needs at least three messages to complete\
    \ but no\n   extensions are needed.  Additionally, the INVITE method allows the\n\
    \   peer to take time to decide whether or not it will accept a session\n   update\
    \ by sending provisional responses.  That is, re-INVITE allows\n   the UAS to\
    \ interact with the user at the peer, while UPDATE needs to\n   be answered automatically\
    \ by the UAS.  It is noted that re-INVITE\n   should be answered immediately unless\
    \ such a user interaction is\n   needed.  Otherwise, some Third Party Call Control\
    \ (3PCC) [RFC3725]\n   flows will break.\n"
- title: 3.4.  Recovering from a Failed Re-INVITE
  contents:
  - "3.4.  Recovering from a Failed Re-INVITE\n   Section 14.1 of [RFC3261] requires\
    \ that the session parameters in\n   effect prior to a re-INVITE remain unchanged\
    \ if the re-INVITE fails,\n   as if no re-INVITE had been issued.  This remains\
    \ the case even if\n   multiple offer/answer exchanges have occurred between the\
    \ sending of\n   the re-INVITE and its failure, and even if media has been exchanged\n\
    \   using the proposed changes in the session.  Because this can be\n   difficult\
    \ to achieve in practice, a newer specification [RFC6141]\n   recommends the UAS\
    \ to send a 2xx response to a re-INVITE in cases\n   where rolling back changes\
    \ would be problematic.\n   Nevertheless, a UAC may receive a failure response\
    \ to a re-INVITE\n   after proposed changes that must be rolled back have already\
    \ been\n   used.  In such a case, the UAC should send an UPDATE offering the SDP\n\
    \   that has been reinstated.  (See [RFC6141] for details.)\n"
- title: 4.  Exceptional Case Handling
  contents:
  - "4.  Exceptional Case Handling\n   In [RFC3264], the following restrictions are\
    \ defined with regard to\n   sending a new offer.\n      At any time, either agent\
    \ MAY generate a new offer that updates\n      the session.  However, it MUST\
    \ NOT generate a new offer if it has\n      received an offer which it has not\
    \ yet answered or rejected.\n      Furthermore, it MUST NOT generate a new offer\
    \ if it has generated\n      a prior offer for which it has not yet received an\
    \ answer or a\n      rejection.\n   Assuming that the above rules are guaranteed,\
    \ there seem to be two\n   possible 'exceptional' cases to be considered in SIP\
    \ offer/answer\n   usage: the 'message crossing' case and the 'glare' case.  One\
    \ of the\n   reasons why the usage of SIP methods to exchange offer/answer needs\n\
    \   to be carefully restricted in the RFCs is to ensure that the UA can\n   detect\
    \ and handle appropriately the 'exceptional' cases to avoid\n   incompatible behavior.\n"
- title: 4.1.  Message Crossing Case Handling
  contents:
  - "4.1.  Message Crossing Case Handling\n   When message packets cross in the transport\
    \ network, an offer may be\n   received before the answer for the previous offer/answer\
    \ exchange, as\n   shown in Figure 3.  In such a case, UA A must detect that the\
    \ session\n   description SDP-2 is not the answer to offer1.\n               \
    \             A                  B\n                            |SDP-1     (offer1)|\n\
    \                         M1 |----------------->|\n                          \
    \  |SDP-2    (answer1)|\n                         M2 |<------\\  /-------|\n \
    \                           |        \\/        |\n                          \
    \  |SDP-3   /\\(offer2)|\n                         M3 |<------/  \\-------|\n\
    \                      Figure 3: Message Crossing Case\n   Because of the restrictions\
    \ on placement of offers and answers\n   (summarized in Table 1), there are a\
    \ limited number of valid\n   exchanges of messages that may lead to this message\
    \ crossing case.\n   These are enumerated in Table 3.  (This table only shows\
    \ messages\n   containing offers or answers.  There could be other messages, without\n\
    \   session descriptions, which are not shown.)\n   When a response to an UPDATE\
    \ request crosses a reliable response to\n   an INVITE request, there are variants\
    \ shown in Figures 4 and 5, which\n   are dependent on an INVITE (Mx) that contains\
    \ no offer.  These are\n   also included in Table 3.\n                   A   \
    \                            B\n                   |                         \
    \      |\n                   |UPDATE(offer1)                 |\n             \
    \   M1 |==============================>|\n                   |re-INVITE(no offer)\
    \            |\n                Mx |------------------------------>| --+\n   \
    \                |               2xx-UPD(answer1)|   |\n                M2 |<===========\\\
    \  /===============|   | first reliable\n                   |             \\/\
    \ 1xx-rel/2xx-INV|   | response\n                   |             /\\        (offer2)|\
    \   |\n                M3 |<===========/  \\===============| <-+\n           \
    \        |PRACK/ACK(answer2)             |\n                My |------------------------------>|\n\
    \                   |                               |\n                Figure\
    \ 4: Avoidable Message Crossing Cases\n   To avoid the message crossing condition\
    \ shown in Figure 4, UA A\n   should not send this re-INVITE request until an\
    \ UPDATE transaction\n   has been completed.  If UA B encounters this message\
    \ crossing\n   condition, it should reject this re-INVITE request with a 500\n\
    \   response.\n                   A                               B\n        \
    \           |                               |\n                   |re-INVITE(no\
    \ offer)            |\n                Mx |------------------------------>| --+\n\
    \                   |UPDATE(offer1)                 |   |\n                M1\
    \ |==============================>|   |\n                   |               2xx-UPD(answer1)|\
    \   |\n                M2 |<===========\\  /===============|   | first reliable\n\
    \                   |             \\/ 1xx-rel/2xx-INV|   | response\n        \
    \           |             /\\        (offer2)|   |\n                M3 |<===========/\
    \  \\===============| <-+\n                   |PRACK/ACK(answer2)            \
    \ |\n                My |------------------------------>|\n                  \
    \ |                               |\n                Figure 5: Avoidable Message\
    \ Crossing Cases\n   To avoid the message crossing condition shown in Figure 5,\
    \ UA A\n   should not send this UPDATE request until an ACK or a PRACK\n   transaction\
    \ associated with an offer/answer has been completed.  If\n   UA B encounters\
    \ this message crossing condition, it should reject\n   this UPDATE request with\
    \ a 500 response.\n   The situation when a PRACK request crosses UPDATE request\
    \ is shown in\n   Figure 6.\n                   A                            \
    \   B\n                   |                               |\n                \
    \   |           re-INVITE (no offer)|\n   1st reliable+-- |<------------------------------|\n\
    \   response    | M1|1xx-rel(offer1)                |\n               +-> |==============================>|\
    \ --+\n                   |                 PRACK(answer1)| M3| Acknowledge\n\
    \                   |<===========\\  /===============| <-+\n                 \
    \  |             \\/                |\n                   |             /\\  UPDATE(offer2)|\n\
    \                   |<===========/  \\===============| M2\n                  \
    \ |500-UPD                        |\n                   |------------------------------>|\n\
    \                   |2xx-PRA                        |\n                   |------------------------------>|\n\
    \                   |                               |\n                Figure\
    \ 6: Avoidable Message Crossing Cases\n   To avoid the message crossing condition\
    \ shown in Figure 6, UA B\n   should not send this UPDATE request until a PRACK\
    \ transaction\n   associated with an offer/answer has been completed.  If UA A\n\
    \   encounters this message crossing condition, it should reject this\n   UPDATE\
    \ request with a 500 response.\n   The situation when a reliable provisional response\
    \ to an INVITE\n   request crosses UPDATE request is shown in Figure 7.\n    \
    \               A                               B\n                   |      \
    \                         |\n                   |re-INVITE(offer1)           \
    \   |\n                M1 |==============================>|\n                \
    \   |               1xx-rel(answer1)|\n                   |<===========\\  /===============|\
    \ M3\n                   |             \\/                |\n                \
    \   |             /\\  UPDATE(offer2)|\n               +-- |<===========/  \\\
    ===============| M2\n               |   |491-UPD                        |\n  \
    \ Acknowledge |   |------------------------------>|\n               |   |PRACK\
    \                          |\n               +-> |------------------------------>|\n\
    \                   |                               |\n                Figure\
    \ 7: Avoidable Message Crossing Cases\n   To avoid the message crossing condition\
    \ shown in Figure 7, UA B\n   should not send this UPDATE request until a PRACK\
    \ transaction\n   associated with an offer/answer has been completed.  If UA A\n\
    \   encounters this message crossing condition, it should reject this\n   UPDATE\
    \ request with a 491 response.\n   The situation when a 2xx response to an INVITE\
    \ request crosses UPDATE\n   request is shown in Figure 8.\n                 \
    \  A                               B\n                   |                   \
    \            |\n                   |re-INVITE(offer1)              |\n       \
    \            |==============================>|\n                   |         \
    \      2xx-INV(answer1)|\n                   |<===========\\  /===============|\n\
    \                   |             \\/                |\n                   | \
    \            /\\  UPDATE(offer2)|\n               +-- |<===========/  \\===============|\n\
    \               |   |491-UPD                        |\n   Acknowledge |   |------------------------------>|\n\
    \               |   |ACK                            |\n               +-> |------------------------------>|\n\
    \                   |                               |\n                Figure\
    \ 8: Avoidable Message Crossing Cases\n   This is a true glare.  To avoid the\
    \ message crossing condition shown\n   in Figure 8, UA B should not send the UPDATE\
    \ request until it has\n   received an ACK request.  But there is no problem even\
    \ if UA B sends\n   it.  If UA A encounters this message crossing condition, it\
    \ should\n   reject this UPDATE request with a 491 response.\n   The situation\
    \ when a response to an UPDATE request crosses a PRACK\n   request is shown in\
    \ Figure 9.\n                   A                               B\n          \
    \         |                               |\n                   |            \
    \  re-INVITE(offer0)|\n                   |<------------------------------|\n\
    \                   |1xx-rel(answer0)               |\n                   |------------------------------>|\
    \ --+\n                   |UPDATE(offer1)                 |   |\n            \
    \    M1 |==============================>|   |\n                   |          \
    \     2xx-UPD(answer1)|   | Acknowledge\n                   |<===========\\  /===============|\
    \ M3|\n                   |             \\/                |   |\n           \
    \        |             /\\   PRACK(offer2)| M2|\n                   |<===========/\
    \  \\===============| <-+\n                   |                              \
    \ |\n                 Figure 9: Avoidable Message Crossing Case\n   To avoid the\
    \ message crossing condition shown in Figure 9, UA A\n   should not send this\
    \ UPDATE request until a PRACK transaction\n   associated with an offer/answer\
    \ has been completed.  If UA B\n   encounters this message crossing condition,\
    \ it should reject this\n   UPDATE request with a 491 response.\n   Table 3 summarizes\
    \ this section.  Each action is described in\n   Section 4.3.\n        | M1  \
    \   | M3       | M2        |Action |Action |Figure|\n        |(offer1)|(answer1)\
    \ |(offer2)   | of A  | of B  |      |\n        +--------+----------+-----------+-------+-------+------+\n\
    \        | UPDATE | 2xx-UPD  | UPDATE    |UAS-UcU|       |      |\n        | \
    \       |          +-----------+-------+ -     |      |\n        |        |  \
    \        | INVITE    |UAS-UcI|       |      |\n        |        |          +-----------+-------+-------+------+\n\
    \        |        |          | 1xx-INV   |       |       |      |\n        | \
    \       |          +-----------+UAC-UI,|UAS-UsI| 4,5  |\n        |        |  \
    \        | 2xx-INV   |UAC-IU |UAS-IsU|      |\n        |        |          +-----------+-------+-------+------+\n\
    \        |        |          | PRACK  (*)|UAC-IU |UAS-IcU|  9   |\n        +--------+----------+-----------+-------+-------+------+\n\
    \        | PRACK  | 2xx-PRA  | UPDATE    |UAS-IcU|       |      |\n        +--------+----------+-----------+-------+\
    \       |      |\n        | 2xx-INV| ACK      | UPDATE    |UAS-IsU| -     |  \
    \    |\n        |        |          +-----------+-------+       |      |\n   \
    \     |        |          | INVITE    |UAS-IsI|       |      |\n        +--------+----------+-----------+-------+-------+------+\n\
    \        | 1xx-rel| PRACK    | UPDATE    |UAS-IsU|       |  6   |\n        +--------+----------+-----------+-------+UAC-IU\
    \ +------+\n        | INVITE | 1xx-rel  | UPDATE (*)|       |       |  7   |\n\
    \        |        +----------+-----------+UAS-IcU+-------+------+\n        | \
    \       | 2xx-INV  | UPDATE (*)|       | -     |  8   |\n        +--------+----------+-----------+-------+-------+------+\n\
    \        (*) invalid sequences if INVITE request is an initial one\n         \
    \    Table 3: Offer/Answer Crossing Message Sequences\n"
- title: 4.2.  Glare Case Handling
  contents:
  - "4.2.  Glare Case Handling\n   When both ends in a dialog send a new offer at\
    \ nearly the same time,\n   as described in Figure 10, a UA may receive a new\
    \ offer before it\n   receives the answer to the offer it sent.  This case is\
    \ usually\n   called a 'glare' case.\n                            A          \
    \        B\n                            |offer1      offer2|\n               \
    \          M1 |-------\\  /-------| M2\n                            |        \\\
    /        |\n                            |        /\\        |\n              \
    \              |<------/  \\------>|\n                           Figure 10: Glare\
    \ Case\n   When offer2 is in an UPDATE request or (re-)INVITE request, it must\n\
    \   be rejected with a 491 or 500 response.\n   There is a variant of Figure 7.\
    \  When offer2 is in a PRACK request\n   (within the current rules, only possible\
    \ if offer1 is in an UPDATE\n   request), as shown in Figure 11, UA A has a dilemma.\n\
    \                   A                               B\n                   |  \
    \                             |\n                   |              re-INVITE(offer0)|\n\
    \                   |<------------------------------|\n                   |1xx-rel(answer0)\
    \               |\n                   |------------------------------>| --+\n\
    \                   |UPDATE(offer1)    PRACK(offer2)| M2| Acknowledge\n      \
    \          M1 |============\\  /===============| <-+\n                   |   \
    \          \\/                |\n                   |             /\\        \
    \        |\n                   |<===========/  \\==============>|\n          \
    \         |                        491-UPD|\n                   |<------------------------------|\n\
    \                   |                               |\n                      Figure\
    \ 11: Avoidable Glare Case\n   All PRACKs are supposed to be accepted with a 200\
    \ response, yet there\n   is no way to indicate the problem with a 200 response.\
    \  At best, it\n   could proceed on the assumption that the UPDATE will be rejected\
    \ with\n   a 491.  To avoid the glare condition shown in Figure 11, UA A should\n\
    \   not send this UPDATE request until a PRACK transaction associated\n   with\
    \ an offer/answer has been completed.  If UA B encounters this\n   glare condition,\
    \ it should reject this UPDATE request with a 491\n   response.\n   Glare can\
    \ also occur when offer2 is in a 1xx or 2xx response.  This\n   is a variant of\
    \ Figure 5, as shown in Figure 12.\n                   A                     \
    \          B\n                   |                               |\n         \
    \          |re-INVITE(no offer)            |\n                   |------------------------------>|\
    \ --+\n                   |                1xx-rel/2xx-INV|   | 1st reliable\n\
    \                   |UPDATE(offer1)         (offer2)| M2| response\n         \
    \       M1 |============\\  /===============| <-+\n                   |      \
    \       \\/                |\n                   |             /\\           \
    \     |\n                   |<===========/  \\==============>|\n             \
    \      |                        500-UPD|\n                   |<------------------------------|\n\
    \                   |                               |\n                      Figure\
    \ 12: Avoidable Glare Case\n   To avoid the glare condition shown in Figure 12,\
    \ UA A should not send\n   this UPDATE request until an ACK or a PRACK transaction\
    \ associated\n   with an offer/answer has been completed.  If UA B encounters\
    \ this\n   glare condition, it should reject this UPDATE request with a 500\n\
    \   response.\n   There is a variant of Figure 4, as shown in Figure 13.\n   \
    \                A                               B\n                   |     \
    \                          |\n                   |UPDATE(offer1)             \
    \    |\n                   |==========\\                    |\n              \
    \     |re-INVITE  \\  (no offer)       |\n                   |------------\\----------------->|\
    \ --+\n                   |             \\  1xx-rel/2xx-INV|   | 1st reliable\n\
    \                   |              \\        (offer2)|   | response\n        \
    \           |<==============\\===============| <-+\n                   |     \
    \           \\              |\n                   |                 \\============>|\n\
    \                   |                        500-UPD|\n                   |<------------------------------|\n\
    \                   |                               |\n                      Figure\
    \ 13: Avoidable Glare Case\n   To avoid the glare condition shown in Figure 13,\
    \ UA A should not send\n   this re-INVITE request until an UPDATE transaction\
    \ has been\n   completed.  If UA B encounters this glare condition, it should\
    \ reject\n   this UPDATE request with a 500 response.\n   Table 4 summarizes this\
    \ section.  Each action is described in\n   Section 4.3.\n       | offer1    |\
    \ offer2    |Action |Action |Figure|\n       |  M1       |  M2       | of A  |\
    \ of B  |      |\n       +-----------+-----------+-------+-------+------+\n  \
    \     |           | re-INVITE |UAS-IcI|UAS-IcI|      |\n       | re-INVITE +-----------+-------+-------+\
    \      |\n       |           | UPDATE    |UAS-IcU|UAS-UcI|      |\n       +-----------+-----------+-------+-------+\
    \      |\n       |           | UPDATE    |UAS-UcU|UAS-UcU|      |\n       |  \
    \         +-----------+-------+-------+------+\n       |           | 1xx-rel \
    \  |       |       |      |\n       | UPDATE    +-----------+UAC-IU,|UAS-IsU|12,13\
    \ |\n       |           | 2xx-INV   |UAC-UI |       |      |\n       |       \
    \    +-----------+-------+-------+------+\n       |           | PRACK (*) |UAC-IU\
    \ |UAS-IcU|  11  |\n       +-----------+-----------+-------+-------+------+\n\
    \        (*) invalid sequences if INVITE request is an initial one\n         \
    \      Table 4: Offer/Answer Glare Message Sequences\n"
- title: 4.3.  Interworking of UPDATE and Re-INVITE
  contents:
  - "4.3.  Interworking of UPDATE and Re-INVITE\n   Almost all exceptional cases are\
    \ caused by an interworking of UPDATE\n   and re-INVITE.  The interworking is\
    \ described in Section 5 of\n   [RFC3311].  And UAC behavior sending an UPDATE\
    \ is described in\n   Section 5.1 of [RFC3311].  There are two concerns in this\
    \ section:\n   1.  It seems to describe different rules for each of initial INVITE\n\
    \       and re-INVITE.  But there is no particular reason why the rules\n    \
    \   are separated.  The lack of restrictions for sending a re-INVITE\n       request\
    \ cause a lot of problems shown in Section 4.1.\n   2.  It seems to describe that\
    \ a UA may send an UPDATE request after\n       sending or receiving a PRACK request.\
    \  But it should be \"after\n       PRACK transaction is completed by 2xx response\"\
    , because it\n       causes the message-crossing case shown in Figure 6.\n   Since\
    \ it is assumed that the language in this section itself is non-\n   normative\
    \ and is justified as a corollary of [RFC3261], we interpret\n   it as follows:\n\
    \   UAC-II:   While an INVITE transaction is incomplete or ACK\n             transaction\
    \ associated with an offer/answer is incomplete,\n             a UA must not send\
    \ another INVITE request.\n   UAC-UU:   While an UPDATE transaction is incomplete,\
    \ a UA must not\n             send another UPDATE request.\n   UAC-UI:   While\
    \ an UPDATE transaction is incomplete, a UA should not\n             send a re-INVITE\
    \ request.\n   UAC-IU:   While an INVITE transaction is incomplete, and an ACK\
    \ or a\n             PRACK transaction associated with an offer/answer is\n  \
    \           incomplete, a UA should not send an UPDATE request.\n   When a 2xx\
    \ response to an INVITE includes an offer, the ACK\n   transaction is considered\
    \ to be associated with an offer/answer.\n   When a reliable provisional response\
    \ to an INVITE includes an offer\n   or an answer, the PRACK transaction is considered\
    \ to be associated\n   with an offer/answer.\n   UAS behavior receiving an UPDATE\
    \ is described in Section 5.2 of\n   [RFC3311].  There are two concerns in this\
    \ section:\n   1.  There is no description about the interworking of an UPDATE\n\
    \       request and an INVITE request without an offer.\n   2.  There is no description\
    \ about the interworking of an UPDATE\n       request and reliable response to\
    \ an INVITE with an offer.\n   We interpret this section as follows:\n   UAS-IcI:\
    \  While an INVITE client transaction is incomplete or ACK\n             transaction\
    \ associated with an offer/answer is incomplete,\n             a UA must reject\
    \ another INVITE request with a 491\n             response.\n   UAS-IsI:  While\
    \ an INVITE server transaction is incomplete or ACK\n             transaction\
    \ associated with an offer/answer is incomplete,\n             a UA must reject\
    \ another INVITE request with a 500\n             response.\n   UAS-UcU:  While\
    \ an UPDATE client transaction is incomplete, a UA must\n             reject another\
    \ UPDATE request with a 491 response.\n   UAS-UsU:  While an UPDATE server transaction\
    \ is incomplete, a UA must\n             reject another UPDATE request with a\
    \ 500 response.\n   UAS-UcI:  While an UPDATE client transaction is incomplete,\
    \ a UA\n             should reject a re-INVITE request with a 491 response.\n\
    \   UAS-UsI:  While an UPDATE server transaction is incomplete, a UA\n       \
    \      should reject a re-INVITE request with a 500 response.\n   UAS-IcU:  While\
    \ an INVITE client transaction is incomplete, and an\n             ACK or a PRACK\
    \ transaction associated with an offer/answer\n             is incomplete, a UA\
    \ should reject an UPDATE request with a\n             491 response.\n   UAS-IsU:\
    \  While an INVITE server transaction is incomplete, and an\n             ACK\
    \ or a PRACK transaction associated with an offer/answer\n             is incomplete,\
    \ a UA should reject an UPDATE request with a\n             500 response.\n  \
    \ These rules are shown in following figures.\n               A              \
    \                 B\n               |                               |\n      \
    \         |                         UPDATE|\n               |<------------------------------|\n\
    \               |UPDATE                         |\n               |==============================>|\n\
    \               |                            491|\n               |<==============================|\n\
    \               |                               |\n            Figure 14: Example\
    \ of UAC-UU and UAS-UcU\n               A                               B\n  \
    \             |                               |\n               |UPDATE CSeq:m\
    \                  |\n               |------------------------------>|\n     \
    \          |UPDATE CSeq:n(>m)              |\n               |==============================>|\n\
    \               |            500 (UPDATE CSeq:n)|\n               |<==============================|\n\
    \               |                               |\n            Figure 15: Example\
    \ of UAC-UU and UAS-UsU\n               A                               B\n  \
    \             |                               |\n               |            \
    \     UPDATE(offer1)|\n               |<------------------------------|\n    \
    \           |reINVITE(no offer)             |\n               |==============================>|\n\
    \               |                   491 (INVITE)|\n               |<==============================|\n\
    \               |                               |\n            Figure 16: Example\
    \ of UAC-UI and UAS-UcI\n               A                               B\n  \
    \             |                               |\n               |UPDATE(offer1)\
    \                 |\n               |------------------------------>|\n      \
    \         |reINVITE(no offer)             |\n               |==============================>|\n\
    \               |                   500 (INVITE)|\n               |<==============================|\n\
    \               |                               |\n            Figure 17: Example\
    \ of UAC-UU and UAS-UsI\n               A                               B\n  \
    \             |                               |\n               |            \
    \ reINVITE(no offer)|\n               |<------------------------------|\n    \
    \           |1xx-rel(offer0)                |\n               |------------------------------>|\n\
    \               |UPDATE(offer1)                 |\n               |==============================>|\n\
    \               |                   491 (UPDATE)|\n               |<==============================|\n\
    \               |                               |\n            Figure 18: Example\
    \ of UAC-IU and UAS-IcU\n               A                               B\n  \
    \             |                               |\n               |reINVITE(no offer)\
    \             |\n               |------------------------------>|\n          \
    \     |                1xx-rel(offer0)|\n               |<------------------------------|\n\
    \               |UPDATE(offer1)                 |\n               |==============================>|\n\
    \               |                   500 (UPDATE)|\n               |<==============================|\n\
    \               |                               |\n            Figure 19: Example\
    \ of UAC-IU and UAS-IsU\n   In addition, it is assumed that the UPDATE request\
    \ in this section\n   includes an offer.  The interworking of a re-INVITE and\
    \ an UPDATE\n   without an offer is out of scope for this document.\n"
- title: 5.  Content of Offers and Answers
  contents:
  - "5.  Content of Offers and Answers\n   While [RFC3264] and [RFC3312] give some\
    \ guidance, questions remain\n   about exactly what should be included in an offer\
    \ or answer.  This is\n   especially a problem when the common \"hold\" feature\
    \ has been\n   activated, and when there is the potential for a multimedia call.\n\
    \   Details of behavior depend on the capabilities and state of the User\n   Agent.\
    \  The kinds of recommendations that can be made are limited by\n   the model\
    \ of device capabilities and state that is presumed to exist.\n   This section\
    \ focuses on a few key aspects of offers and answers that\n   have been identified\
    \ as troublesome, and will consider other aspects\n   to be out of scope.  This\
    \ section considers:\n   o  choice of supported media types and formats to include\
    \ and exclude\n   o  hold and resume of media\n   The following are out of scope\
    \ for this document:\n   o  NAT traversal and Interactive Connectivity Establishment\
    \ (ICE)\n   o  specific codecs and their parameters\n   o  the negotiation of\
    \ secure media streams\n   o  grouping of media streams\n   o  preconditions\n"
- title: 5.1.  General Principle for Constructing Offers and Answers
  contents:
  - "5.1.  General Principle for Constructing Offers and Answers\n   A UA should send\
    \ an offer that indicates what it, and its user, are\n   interested in using/doing\
    \ at that time, without regard for what the\n   other party in the call may have\
    \ indicated previously.  This is the\n   case even when the offer is sent in response\
    \ to an INVITE or re-\n   INVITE that contains no offer.  (However, in the case\
    \ of re-INVITE,\n   the constraints of [RFC3261] and [RFC3264] must be observed.)\n\
    \   A UA should send an answer that includes as close an approximation to\n  \
    \ what the UA and its user are interested in doing at that time, while\n   remaining\
    \ consistent with the offer/answer rules of [RFC3264] and\n   other RFCs.\n  \
    \    NOTE: \"at that time\" is important.  The device may permit the user\n  \
    \    to configure which supported media are to be used by default.\n   In some\
    \ cases, a UA may not have direct knowledge of what it is\n   interested in doing\
    \ at a particular time.  If it is an intermediary,\n   it may be able to delegate\
    \ the decision.  In the worst case, it may\n   apply a default, such as assuming\
    \ it wants to use all of its\n   capabilities.\n"
- title: 5.2.  Choice of Media Types and Formats to Include and Exclude
  contents:
  - '5.2.  Choice of Media Types and Formats to Include and Exclude

    '
- title: 5.2.1.  Sending an Initial INVITE with Offer
  contents:
  - "5.2.1.  Sending an Initial INVITE with Offer\n   When a UAC sends an initial\
    \ INVITE with an offer, it has complete\n   freedom to choose which media type(s)\
    \ and media format(s) (payload\n   types in the case of RTP) it should include\
    \ in the offer.\n   The media types may be all or a subset of the media the UAC\
    \ is\n   capable of supporting, with the particular subset being determined by\n\
    \   the design and configuration (e.g., via [RFC6080]) of the UAC\n   combined\
    \ with input from the user interface of the UAC.\n   The media formats may be\
    \ all or a subset of the media formats the UAC\n   is capable of supporting for\
    \ the corresponding media type, with the\n   particular subset being determined\
    \ by the design and configuration of\n   the UAC combined with input from the\
    \ user interface of the UAC.\n   Including all supported media formats will maximize\
    \ the possibility\n   that the other party will have a supported format in common.\
    \  But\n   including many can result in an unacceptably large SDP body.\n"
- title: 5.2.2.  Responding with an Offer When the Initial INVITE Has No Offer
  contents:
  - "5.2.2.  Responding with an Offer When the Initial INVITE Has No Offer\n   When\
    \ a UAS has received an initial INVITE without an offer, it must\n   include an\
    \ offer in the first reliable response to the INVITE.  It\n   has largely the\
    \ same options as when sending an initial INVITE with\n   an offer, but there\
    \ are some differences.  The choice may be governed\n   by both static (default)\
    \ selections of media types as well as dynamic\n   selections made by a user via\
    \ interaction with the device while it is\n   alerting.\n      NOTE: The offer\
    \ may be sent in a reliable provisional response,\n      before the user of the\
    \ device has been alerted and had an\n      opportunity to select media options\
    \ for the call.  In this case,\n      the UAS cannot include any call-specific\
    \ options from the user of\n      the device.  If there is a possibility that\
    \ the user of the device\n      will wish to change what is offered before answering\
    \ the call,\n      then special care should be taken.  If PRACK and UPDATE are\n\
    \      supported by caller and callee then an initial offer can be sent\n    \
    \  reliably, and changed with an UPDATE if the user desires a change.\n      If\
    \ PRACK and UPDATE are not supported, then the initial offer\n      cannot be\
    \ changed until the call is fully established.  In that\n      case, the offer\
    \ in a 200 response for the initial INVITE should\n      include only the media\
    \ types and formats believed to be acceptable\n      to the user.\n"
- title: 5.2.3.  Answering an Initial INVITE with Offer
  contents:
  - "5.2.3.  Answering an Initial INVITE with Offer\n   When a UAS receives an initial\
    \ INVITE with an offer, what media lines\n   the answer may contain is constrained\
    \ by [RFC3264].  The answer must\n   contain the same number of \"m=\" lines as\
    \ the offer, and they must\n   contain the same media types.  Each media line\
    \ may be accepted, by\n   including a non-zero port number, or rejected by including\
    \ a zero\n   port number in the answer.  The media lines that are accepted should\n\
    \   typically be those with types and formats the UAS would have included\n  \
    \ if it were the offerer.\n   The media formats the answer may contain are constrained\
    \ by\n   [RFC3264].  For each accepted \"m=\" line in the answer, there must be\n\
    \   at least one media format in common with the corresponding \"m=\" line\n \
    \  of the offer.  The UAS may also include other media formats it is\n   able\
    \ to support at this time.  Doing so establishes an asymmetric\n   media format\
    \ situation, where these \"other\" media formats may only be\n   sent from the\
    \ offerer to the answerer.  This asymmetric media\n   situation is also limited\
    \ because it cannot be sustained if there is\n   a subsequent offer/answer exchange\
    \ in the opposite direction.  Also,\n   there is limited value in including these\
    \ other media formats because\n   there is no assurance that the offerer will\
    \ be able to use them.\n   If the UAS does not wish to indicate support for any\
    \ of the media\n   types in a particular media line of the offer it must reject\
    \ the\n   corresponding media line, by setting the port number to zero.\n   When\
    \ the UAS wishes to reject all of the media lines in the offer, it\n   may send\
    \ a 488 failure response.  Alternatively, it may send a\n   reliable non-failure\
    \ response including all media lines with port\n   numbers set to zero.\n"
- title: 5.2.4.  Answering When the Initial INVITE Had No Offer
  contents:
  - "5.2.4.  Answering When the Initial INVITE Had No Offer\n   When a UAC has sent\
    \ an initial INVITE without an offer, and then\n   receives a response with the\
    \ first offer, it should answer in the\n   same way as a UAS receiving an initial\
    \ INVITE with an offer.\n   Because the offer arrives in a response to the INVITE,\
    \ the UAC cannot\n   reject the message containing the offer.  If the UAC wishes\
    \ to reject\n   the entire offer, it must send a PRACK or ACK request including\
    \ all\n   the media lines with ports set to zero.  Then, if it does not wish to\n\
    \   continue the session, it may send a CANCEL or BYE request to\n   terminate\
    \ the dialog.\n"
- title: 5.2.5.  Subsequent Offers and Answers
  contents:
  - "5.2.5.  Subsequent Offers and Answers\n   The guidelines above (Sections 5.1\
    \ and 5.2.1 through Section 5.2.4)\n   apply, but constraints in [RFC3264] must\
    \ also be followed.  The\n   following are of particular note because they have\
    \ proven\n   troublesome:\n   o  The number of \"m=\" lines may not be reduced\
    \ in a subsequent offer.\n      Previously rejected media streams must remain,\
    \ or be reused to\n      offer the same or a different stream.  (Section 6 of\
    \ [RFC3264].)\n   o  In the \"o=\" line, only the version number may change, and\
    \ if it\n      changes, it must increment by one from the one previously sent\
    \ as\n      an offer or answer.  (Section 8 of [RFC3264].)  If it doesn't\n  \
    \    change, then the entire SDP body must be identical to what was\n      previously\
    \ sent as an offer or answer.  Changing the \"o=\" line,\n      except version\
    \ number value, during the session is an error case.\n      The behavior when\
    \ receiving such a non-compliant offer/answer SDP\n      body is implementation\
    \ dependent.  If a UA needs to negotiate a\n      'new' SDP session, it should\
    \ use the INVITE/Replaces method.\n   o  In the case of RTP, the mapping from\
    \ a particular dynamic payload\n      type number to a particular codec within\
    \ that media stream (\"m=\"\n      line) must not change for the duration of the\
    \ session.  (Section\n      8.3.2 of [RFC3264].)\n         NOTE: This may be impossible\
    \ for a back-to-back user agent\n         (B2BUA) to follow in some cases (e.g.,\
    \ 3PCC transfer) if it\n         does not terminate media.\n   When the new offer\
    \ is sent in response to an offerless (re-)INVITE,\n   it should be constructed\
    \ according to the General Principle for\n   Constructing Offers and Answers (Section\
    \ 5.1 ): all codecs the UA is\n   currently willing and able to use should be\
    \ included, not just the\n   ones that were negotiated by previous offer/answer\
    \ exchanges.  The\n   same is true for media types -- so if UA A initially offered\
    \ audio\n   and video to UA B, and they end up with only audio, and UA B sends\
    \ an\n   offerless (re-)INVITE to UA A, A's resulting offer should most likely\n\
    \   re-attempt video, by reusing the zeroed \"m=\" line used previously.\n   \
    \   NOTE: The behavior above is recommended, but it is not always\n      achievable,\
    \ for example, in some interworking scenarios.  Or, the\n      offerer may simply\
    \ not have enough resources to offer \"everything\"\n      at that point.  Even\
    \ if the UAS is not able to offer any other SDP\n      that the one currently\
    \ being used, it should not reject the re-\n      INVITE.  Instead, it should\
    \ generate an offer with the currently\n      used SDP with \"o=\" line unchanged.\n"
- title: 5.3.  Hold and Resume of Media
  contents:
  - "5.3.  Hold and Resume of Media\n   [RFC3264] specifies (using non-normative language)\
    \ that \"hold\" should\n   be indicated in an established session by sending a\
    \ new offer\n   containing \"a=sendonly\" attribute for each media stream to be\
    \ held.\n   An answerer is then to respond with \"a=recvonly\" attribute to\n\
    \   acknowledge that the hold request has been understood.\n   Note that the use\
    \ of sendonly/recvonly is not limited to hold.  These\n   may be used for other\
    \ reasons, such as devices that are only capable\n   of sending or receiving.\
    \  So receiving an offer with \"a=sendonly\"\n   attribute must not be treated\
    \ as a certain indication that the\n   offerer has placed the media stream on\
    \ hold.\n   This model is based on an assumption that the UA initiating the hold\n\
    \   will want to play Music on Hold, which is not always the case.  A UA\n   may,\
    \ if desired, initiate hold by offering \"a=inactive\" attribute if\n   it does\
    \ not intend to transmit any media while in hold status.\n   The rules of [RFC3264]\
    \ constrain what may be in an answer when the\n   offer contains \"sendonly\"\
    , \"recvonly\", or \"inactive\" in an \"a=\" line.\n   But they do not constrain\
    \ what must be in a subsequent offer.  The\n   \"General Principle for Constructing\
    \ Offers and Answers\" (Section 5.1)\n   is important here.  The initiation of\
    \ \"hold\" is a local action.  It\n   should reflect the desired state of the\
    \ UA.  It then affects what the\n   UA includes in offers and answers until the\
    \ local state is reset.\n   The receipt of an offer containing \"a=sendonly\"\
    \ attribute or\n   \"a=inactive\" attribute and the sending of a compatible answer\
    \ should\n   not change the desired state of the recipient.  However, a UA that\n\
    \   has been \"placed on hold\" may itself desire to initiate its own hold\n \
    \  status, based on local input.\n   If UA2 has previously been \"placed on hold\"\
    \ by UA1, via receipt of\n   \"a=sendonly\" attribute, then it may initiate its\
    \ own hold by sending\n   a new offer containing \"a=sendonly\" attribute to UA1.\
    \  Upon receipt\n   of that, UA1 will answer with \"a=inactive\" attribute because\
    \ that is\n   the only valid answer that reflects its desire not to receive media.\n\
    \      NOTE: Section 8.4 of [RFC3264] contains a conflicting\n      recommendation\
    \ that the offer contain \"a=inactive\" attribute in\n      this case.  We interpret\
    \ that recommendation to be non-normative.\n      The use of \"a=sendonly\" attribute\
    \ in this case will never produce\n      a worse outcome, and can produce a better\
    \ outcome in useful cases.\n   Once in this state, to resume a two-way exchange\
    \ of media, each side\n   must reset its local hold status.  If UA1 is first to\
    \ go off hold, it\n   will then send an offer with \"a=sendrecv\" attribute. \
    \ The UA2 will\n   respond with its desired state of \"a=sendonly\" attribute\
    \ because that\n   is a permitted response.  When UA2 desires to also resume,\
    \ it will\n   send an offer with \"a=sendrecv\" attribute.  In this case, because\
    \ UA1\n   has the same desire it will respond with \"a=sendrecv\" attribute. \
    \ In\n   the same case, when UA2 receives the offer with \"a=sendrecv\"\n   attribute,\
    \ if it has decided it wants to reset its local hold but has\n   not yet signaled\
    \ the intent, it may send \"a=sendrecv\" attribute in\n   the answer.\n   If UA2\
    \ has been \"placed on hold\" by UA1 via receipt of \"a=inactive\"\n   attribute,\
    \ and subsequently wants to initiate its own hold, also\n   using \"a=inactive\"\
    \ attribute, it need not send a new offer, since the\n   only valid response is\
    \ \"a=inactive\" attribute and that is already in\n   effect.  However, its local\
    \ desired state will now be either\n   \"inactive\" or \"a=sendonly\" attribute.\
    \  This affects what it will send\n   in future offers and answers.\n   If a UA\
    \ has occasion to send another offer in the session, without\n   any desire to\
    \ change the hold status (e.g., in response to a re-\n   INVITE without an offer,\
    \ or when sending a re-INVITE to refresh the\n   session timer), it should follow\
    \ the \"General Principle for\n   Constructing Offers and Answers\" (Section 5.1).\
    \  If it previously\n   initiated a \"hold\" by sending \"a=sendonly\" attribute\
    \ or \"a=inactive\"\n   attribute, then it should offer that again.  If it had\
    \ not previously\n   initiated \"hold\", then it should offer \"a=sendrecv\" attribute,\
    \ even\n   if it had previously been forced to answer something else.  Without\n\
    \   this behavior it is possible to get \"stuck on hold\" in some cases,\n   especially\
    \ when a 3pcc is involved.\n"
- title: 5.4.  Behavior on Receiving SDP with c=0.0.0.0
  contents:
  - "5.4.  Behavior on Receiving SDP with c=0.0.0.0\n   [RFC3264] requires that an\
    \ agent be capable of receiving SDP with a\n   connection address of 0.0.0.0,\
    \ in which case it means that neither\n   RTP nor RTCP should be sent to the peer.\n\
    \   If a UA generates an answer to the offer received with \"c=IN IP4\n   0.0.0.0\"\
    , the direction attribute of the accepted media stream in the\n   answer must\
    \ still be based on direction attribute of the offered\n   stream and rules specified\
    \ in [RFC3264] to form the direction \"a=\"\n   line in the answer.  There is\
    \ no clear rule about the use of \"c=IN\n   IP4 0.0.0.0\" in the answer; it may\
    \ be used or \"c=\" line with a valid\n   IP address may be used.  RTP/RTCP will\
    \ not be sent toward an address\n   of 0.0.0.0 because it is an invalid address.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document clarifies ambiguities in the intended\
    \ behavior of the\n   two SIP User Agents engaged in a dialog.  The primary specification\n\
    \   of offer/answer behavior that is being clarified resides in [RFC3261]\n  \
    \ and [RFC3264], with extensions in [RFC3311], [RFC3312], and\n   [RFC6141]. \
    \ The focus of this document is on cases where ambiguities\n   can result failed\
    \ or degraded calls when there is no attacker.  The\n   clarifications exclude\
    \ call flows that lead to difficulties, without\n   legitimizing any formerly\
    \ invalid call flows.  Thus, the security\n   considerations of the above mentioned\
    \ documents continue to apply and\n   need not be extended to handle any additional\
    \ cases.\n   The offer/answer process can be disrupted in numerous ways by an\n\
    \   attacker.  SIP provides mechanisms to protect the offer/answer\n   exchange\
    \ from tampering by third parties.  Of note is \"Enhancements\n   for Authenticated\
    \  Identity Management in the Session Initiation\n   Protocol (SIP)\" [RFC4474],\
    \ as well as Section 26.3.2, \"Security\n   Solutions\", of [RFC3261].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to thank Christer Holmberg, Rajeev\
    \ Seth,\n   Nataraju A B, Byron Campen, Jonathan Rosenberg, Gonzalo Camarillo,\n\
    \   and Gao Yang for their thorough reviews and comments.  Many of their\n   suggestions\
    \ and ideas have been incorporated in this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3262]  Rosenberg, J. and H. Schulzrinne, \"Reliability of\n  \
    \            Provisional Responses in Session Initiation Protocol\n          \
    \    (SIP)\", RFC 3262, June 2002.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264,\n              June 2002.\n   [RFC3311]  Rosenberg, J., \"The Session\
    \ Initiation Protocol (SIP)\n              UPDATE Method\", RFC 3311, October\
    \ 2002.\n   [RFC3312]  Camarillo, G., Marshall, W., and J. Rosenberg,\n      \
    \        \"Integration of Resource Management and Session Initiation\n       \
    \       Protocol (SIP)\", RFC 3312, October 2002.\n   [RFC4566]  Handley, M.,\
    \ Jacobson, V., and C. Perkins, \"SDP: Session\n              Description Protocol\"\
    , RFC 4566, July 2006.\n   [RFC6141]  Camarillo, G., Holmberg, C., and Y. Gao,\
    \ \"Re-INVITE and\n              Target-Refresh Request Handling in the Session\
    \ Initiation\n              Protocol (SIP)\", RFC 6141, March 2011.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC3725]  Rosenberg, J., Peterson, J., Schulzrinne,\
    \ H., and G.\n              Camarillo, \"Best Current Practices for Third Party\
    \ Call\n              Control (3pcc) in the Session Initiation Protocol (SIP)\"\
    ,\n              BCP 85, RFC 3725, April 2004.\n   [RFC3959]  Camarillo, G., \"\
    The Early Session Disposition Type for the\n              Session Initiation Protocol\
    \ (SIP)\", RFC 3959,\n              December 2004.\n   [RFC4474]  Peterson, J.\
    \ and C. Jennings, \"Enhancements for\n              Authenticated Identity Management\
    \ in the Session\n              Initiation Protocol (SIP)\", RFC 4474, August\
    \ 2006.\n   [RFC6080]  Petrie, D. and S. Channabasappa, \"A Framework for Session\n\
    \              Initiation Protocol User Agent Profile Delivery\",\n          \
    \    RFC 6080, March 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   OKUMURA Shinji\n   Softfront\n   28-196, Noth9, West15,\
    \ Chuo-ku\n   Sapporo, Hokkaido  060-0009\n   Japan\n   EMail: shinji.okumura@softfront.jp\n\
    \   Takuya Sawada\n   KDDI Corporation\n   3-10-10, Iidabashi, Chiyoda-ku\n  \
    \ Tokyo\n   Japan\n   EMail: tu-sawada@kddi.com\n   Paul H. Kyzivat\n   Hudson,\
    \ MA  01749\n   USA\n   EMail: pkyzivat@alum.mit.edu\n"
