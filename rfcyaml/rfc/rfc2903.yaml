- title: __initial_text__
  contents:
  - '                        Generic AAA Architecture

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo proposes an Authentication, Authorization, Accounting\
    \ (AAA)\n   architecture that would incorporate a generic AAA server along with\n\
    \   an application interface to a set of Application Specific Modules\n   that\
    \ could perform application specific AAA functions.  A separation\n   of AAA functions\
    \ required in a multi-domain environment is then\n   proposed using a layered\
    \ protocol abstraction.  The long term goal is\n   to create a generic framework\
    \ which allows complex authorizations to\n   be realized through a network of\
    \ interconnected AAA servers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ................................................\
    \  2\n   2. Generic AAA Architecture ....................................  4\n\
    \      2.1. Architectural Components of a Generic AAA Server .......  4\n    \
    \       2.1.1. Authorization Rule Evaluation ...................  4\n        \
    \   2.1.2. Application Specific Module (ASM) ...............  5\n           2.1.3.\
    \ Authorization Event Log .........................  6\n           2.1.4. Policy\
    \ Repository ...............................  6\n           2.1.5. Request Forwarding\
    \ ..............................  6\n      2.2. Generic AAA Server Model ...............................\
    \  6\n           2.2.1. Generic AAA Server Interactions .................  7\n\
    \           2.2.2. Compatibility with Legacy Protocols .............  7\n    \
    \       2.2.3. Interaction between the ASM and the Service .....  9\n        \
    \   2.2.4. Multi-domain Architecture ....................... 10\n      2.3. Model\
    \ Observations ..................................... 10\n      2.4. Suggestions\
    \ for Future Work ............................ 11\n   3. Layered AAA Protocol\
    \ Model .................................. 12\n      3.1. Elements of a Layered\
    \ Architecture ..................... 14\n           3.1.1. Service Layer Abstract\
    \ Interface Primitives ..... 14\n           3.1.2. Service Layer Peer End Point\
    \ Name Space ......... 14\n           3.1.3. Peer Registration, Discovery, and\
    \ Location\n           Resolution .............................................\
    \ 14\n           3.1.4. Trust Relationships Between Peer End Points ..... 14\n\
    \           3.1.5. Service Layer Finite State Machine .............. 15\n    \
    \       3.1.6. Protocol Data Unit Types ........................ 15\n      3.2.\
    \ AAA Application Specific Service Layer ................. 15\n      3.3. Presentation\
    \ Service Layer ............................. 16\n      3.4. AAA Transaction/Session\
    \ Management Service Layer ....... 17\n      3.5. AAA-TSM Service Layer Program\
    \ Interface Primitives ..... 20\n      3.6. AAA-TSM Layer End Point Name Space\
    \ ..................... 21\n      3.7. Protocol Stack Examples ................................\
    \ 22\n   4. Security Considerations ..................................... 22\n\
    \   Glossary ....................................................... 23\n   References\
    \ ..................................................... 24\n   Authors' Addresses\
    \ ............................................. 24\n   Full Copyright Statement\
    \ ....................................... 26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The work for this memo was done by a group that originally\
    \ was the\n   Authorization subgroup of the AAA Working Group of the IETF.  When\n\
    \   the charter of the AAA working group was changed to focus on MobileIP\n  \
    \ and NAS requirements, the AAAarch Research Group was chartered within\n   the\
    \ IRTF to continue and expand the architectural work started by the\n   Authorization\
    \ subgroup.  This memo is one of four which were created\n   by the subgroup.\
    \  This memo is a starting point for further work\n   within the AAAarch Research\
    \ Group.  It is still a work in progress\n   and is published so that the work\
    \ will be available for the AAAarch\n   subgroup and others working in this area,\
    \ not as a definitive\n   description of architecture or requirements.\n   The\
    \ authorization subgroup of the AAA Working Group proposed an \"AAA\n   Authorization\
    \ Framework\" [2] illustrated with numerous application\n   examples [3] which\
    \ in turn motivates a proposed list of authorization\n   requirements [4].  This\
    \ memo builds on the framework presented in [2]\n   by proposing an AAA infrastructure\
    \ consisting of a network of\n   cooperating generic AAA servers communicating\
    \ via a standard\n   protocol.  The protocol should be quite general and should\
    \ support\n   the needs of a wide variety of applications requiring AAA\n   functionality.\
    \  To realize this goal, the protocol will need to\n   operate in a multi-domain\
    \ environment with multiple service providers\n   as well as entities taking on\
    \ other AAA roles such as User Home\n   Organizations and brokers.  It should\
    \ be possible to combine requests\n   for multiple authorizations of different\
    \ types in the same\n   authorization transaction.  The AAA infrastructure will\
    \ be required\n   to forward the components of such requests to the appropriate\
    \ AAA\n   servers for authorization and to collect the authorization decisions\n\
    \   from the various AAA servers consulted.  All of this activity is\n   perfectly\
    \ general in nature and can be realized in the common\n   infrastructure.\n  \
    \ But the applications requiring AAA services will each have their own\n   unique\
    \ needs.  After a service is authorized, it must be configured\n   and initialized.\
    \  This will require application specific knowledge\n   and may require application\
    \ specific protocols to communicate with\n   application specific service components.\
    \  To handle these application\n   specific functions, we propose an application\
    \ interface between a\n   generic AAA server and a set of one or more Application\
    \ Specific\n   Modules (ASMs) which can carry out the unique functionality required\n\
    \   by each application.\n   Since the data required by each application for authentication,\n\
    \   authorization, or accounting may have unique structure, the standard\n   AAA\
    \ protocol should allow the encapsulation of opaque units of\n   Application Specific\
    \ Information (ASI).  These units would begin with\n   a standard header to allow\
    \ them to be forwarded by the generic\n   infrastructure.  When delivered to the\
    \ final destination, an ASI unit\n   would be passed by a generic AAA server across\
    \ its program interface\n   to an appropriate ASM for application specific processing.\n\
    \   Nevertheless, it remains a goal of the design for information units\n   to\
    \ be encoded in standard ways as much as possible so as to enable\n   processing\
    \ by a generic rule based engine.\n   The interactions of the generic AAA server\
    \ with the Application\n   Specific Modules and with each other to realize complex\
    \ AAA functions\n   is explored in section 2.  Then, in section 3, we attempt\
    \ to further\n   organize the AAA functions into logical groups using a protocol\n\
    \   layering abstraction.  This abstraction is not intended to be a\n   reference\
    \ model ready to be used for protocol design.  At this point\n   in the work,\
    \ there are numerous questions that need to be addressed\n   and numerous problems\
    \ that remain to be solved.  It may be that an\n   abstraction other than layering\
    \ will prove to be more useful or, more\n   likely, that the application layer\
    \ will require some substructure of\n   its own.\n   Finally, in section 4, we\
    \ show how the security requirements\n   identified in [4] can be met in the generic\
    \ server and the\n   Application Specific Modules by applying security techniques\
    \ such as\n   public key encryption or digital signatures to the Application\n\
    \   Specific Information units individually, so that different\n   stakeholders\
    \ in the AAA server network can protect selected\n   information units from being\
    \ deciphered or altered by other\n   stakeholders in an authentication, authorization,\
    \ or accounting\n   chain.\n"
- title: 2.  Generic AAA Architecture
  contents:
  - "2.  Generic AAA Architecture\n   For the long term we envision a generic AAA\
    \ server which is capable\n   of authenticating users, handling authorization\
    \ requests, and\n   collecting accounting data.  For a service provider, such\
    \ a generic\n   AAA server would be interfaced to an application specific module\n\
    \   which manages the resource for which authorization is required.\n   Generic\
    \ AAA components would also be deployed in other administrative\n   domains performing\
    \ authorization functions.\n"
- title: 2.1.  Architectural Components of a Generic AAA Server
  contents:
  - '2.1.  Architectural Components of a Generic AAA Server

    '
- title: 2.1.1.  Authorization Rule Evaluation
  contents:
  - "2.1.1.  Authorization Rule Evaluation\n   The first step in the authorization\
    \ process is for the user or an\n   entity operating on the user's behalf to submit\
    \ a well-formatted\n   request to an AAA server.  A generic AAA server has rules\
    \ (logic\n   and/or algebraic formulas) to inspect the request and come to an\n\
    \   authorization decision.  The first problem which arises is that\n   Application\
    \ Specific Information (ASI) has to be separated from the\n   underlying logic\
    \ for the authorization.  Ideally the AAA server would\n   have a rule based engine\
    \ at this point which would know the logic\n   rules and understand some generic\
    \ information in the request, but it\n   would not know anything about application\
    \ specific information except\n   where this information can be evaluated to give\
    \ a boolean or\n   numerical value.  It should be possible to create rules that\
    \ refer to\n   data elements that were not considered when the application was\n\
    \   created.  For example, one could request to do a remote virtual\n   control\
    \ room experiment from home using a dialin provider. The\n   request would only\
    \ be successful if the dialin access server allows\n   it and if there is bandwidth\
    \ available (bandwidth broker) and if the\n   experimenter has the money to pay\
    \ for it (E-Commerce).  Possibly the\n   people who specified the bandwidth broker\
    \ protocol did not think of\n   combining quality of service with a network service\
    \ authorization in\n   a single AAA request, but this generic model would allow\
    \ it.\n   +------+      +-------+      +-------+      +-------+      +-------+\n\
    \   |      | auth |       | auth |       | auth |       | auth |       |\n   |\
    \      |<---->|  AAA  |<---->|  AAA  |<---->|  AAA  |<---->|  AAA  |\n   |   \
    \   |      |       |      |       |      |       |      |       |\n   |      |\
    \      +-------+      +-------+      +-------+      +-------+\n   | User |   \
    \       |              |              |              |\n   |      |          |\
    \          +-------+      +-------+      +-------+\n   |      |          |   \
    \       |  BB   |      |  BB   |      |Budget |\n   |      |          |      \
    \    +-------+      +-------+      +-------+\n   |      |          |         \
    \     |              |\n   |      |      +-------+          |              |\n\
    \   |      |      |dial in|      +-------+      +-------+\n   |      |<====>|service|<====>|network|<====>|network|<===>\
    \ Experiment\n   +------+      +-------+      +-------+      +-------+\n     user\
    \ <-> dialin <-> backbone with BB <-> <remote experiment>\n     Fig. 1 -- Example\
    \ of a Multi Domain Multi Type of Server Request\n"
- title: 2.1.2.  Application Specific Module (ASM)
  contents:
  - "2.1.2.  Application Specific Module (ASM)\n   Ultimately an AAA server needs\
    \ to interact with an application\n   specific module (ASM).  In a service provider,\
    \ the ASM would manage\n   resources and configure the service equipment to provide\
    \ the\n   authorized service.  It might also involve itself in the\n   authorization\
    \ decision because it has the application specific\n   knowledge required.  A\
    \ user home organization (UHO) may require ASMs\n   as well, to perform application\
    \ specific user authorization\n   functions.  For example, a UHO ASM might be\
    \ required to access\n   certain application specific databases or interpret application\n\
    \   specific service level specifications.\n   Whatever the role of an administration\
    \ relative to an authorization\n   decision,  the capabilities of the generic\
    \ AAA server and the\n   interface between it and the ASMs remains the same. \
    \ This interface\n   may be an Application Program Interface (API) or could even\
    \ be a\n   protocol based interface.  In this model, however, the application\n\
    \   specific module is regarded as as separate architectural component\n   from\
    \ the generic AAA server.  As such, it must be addressable and\n   must therefore\
    \ be part of a global naming space.\n"
- title: 2.1.3.  Authorization Event Log
  contents:
  - "2.1.3.  Authorization Event Log\n   For auditing purposes, the generic server\
    \ must have some form of\n   database to store time-stamped events which occur\
    \ in the AAA server.\n   This database can be used to account for authorizations\
    \ which were\n   given, but it can also be used in rules.  One can imagine rules\
    \ in\n   which an authorization is only given if some other event was logged\n\
    \   in the past.  With the aid of certificates, this database could\n   support\
    \ non-repudiation.\n"
- title: 2.1.4.  Policy Repository
  contents:
  - "2.1.4.  Policy Repository\n   A database containing the available services and\
    \ resources about\n   which authorization decisions can be made and the policy\
    \ rules to\n   make them is also needed.  Here too, the naming space for the\n\
    \   services and resources is important since they must be addressable\n   from\
    \ other AAA servers to be able to build complex authorization\n   requests.\n"
- title: 2.1.5.  Request Forwarding
  contents:
  - "2.1.5.  Request Forwarding\n   Due to the multiple administrative domain (multi-kingdom)\
    \ nature of\n   the AAA problem, a mechanism to forward messages between AAA servers\n\
    \   is needed.  The protocol by which two AAA servers communicate should\n   be\
    \ a peer-to-peer protocol.\n"
- title: 2.2.  Generic AAA Server Model
  contents:
  - "2.2.  Generic AAA Server Model\n   With the implementation of the above mentioned\
    \ components, the AAA\n   server would be able to handle AAA requests.  It would\
    \ inspect the\n   contents of the request, determine what authorization is requested,\n\
    \   retrieve the policy rules from the repository, perform various local\n   functions,\
    \ and then choose one of the following options to further\n   process each of\
    \ the components of the request:\n   a) Let the component be evaluated by an attached\
    \ ASM.\n   b) Query the authorization event log or the policy repository for the\n\
    \      answer.\n   c) Forward the component(s) to another AAA server for evaluation.\n\
    \   In the following sections we present the generic model.\n"
- title: 2.2.1.  Generic AAA Server Interactions
  contents:
  - "2.2.1.  Generic AAA Server Interactions\n   Figure 2 illustrates a generic AAA\
    \ Server with connections to the\n   various architectural components described\
    \ above. In this model, the\n   user or another AAA server contacts the AAA server\
    \ to get\n   authorization, and the AAA server interacts with the service.  The\n\
    \   request is sent to the AAA server using the future AAA protocol.  The\n  \
    \ server interacts with the service via a second protocol which we have\n   labeled\
    \ as type \"2\" in the figure.  We say no more of the type 2\n   protocol than\
    \ that it must support some global naming space for the\n   application specific\
    \ items.  The same holds for the type 3\n   communication used to access the repository.\n\
    \                         +------------------+\n                         |   \
    \               |\n   request  <-----1----->|Generic AAA Server|<---1---> AAA\
    \ server\n                         |Rule based engine |\n                    \
    \     |                  |\\\n                         +------------------+ 3\
    \ +------------+\n                                  ^            \\| Policy and\
    \ |\n                                  |             | event      |\n        \
    \                          2             | repository |\n                    \
    \              |             +------------+\n                                \
    \  v\n                         +------------------+\n                        \
    \ |   Application    |\n                         |     Specific     |\n      \
    \                   |      Module      |\n                         +------------------+\n\
    \       The numbers in the links denote types of communication.\n            \
    \  Fig. 2 -- Generic AAA Server Interactions\n"
- title: 2.2.2.  Compatibility with Legacy Protocols
  contents:
  - "2.2.2.  Compatibility with Legacy Protocols\n   Because of the widespread deployment\
    \ of equipment that implements\n   legacy AAA protocols and the desire to realize\
    \ the functionality of\n   the new AAA protocol while protecting the investment\
    \ in existing\n   infrastructure, it may be useful to implement a AAA gateway\
    \ function\n   that can encapsulate legacy protocol data units within the messages\n\
    \   of the new protocol.  Use of this technique, for example, would allow\n  \
    \ Radius attribute value pairs to be encapsulated in Application\n   Specific\
    \ Information (ASI) units of the new protocol in such a way\n   that the ASI units\
    \ can be digitally signed and encrypted for end-to-\n   end protection between\
    \ a service provider's AAA server and a home AAA\n   server communicating via\
    \ a marginally trusted proxy AAA server.  The\n   service provider's NAS would\
    \ communicate via Radius to the service\n   provider's AAA server, but the AAA\
    \ servers would communicate among\n   themselves via the new AAA protocol.  In\
    \ this case, the AAA gateway\n   would be a software module residing in the service\
    \ provider's AAA\n   server.  Alternatively the AAA gateway could be implemented\
    \ as a\n   standalone process.\n   Figure 3 illustrates an AAA gateway.  Communication\
    \ type 4 is the\n   legacy protocol.  Communication type 1 is the future standard\
    \ AAA\n   protocol.  And communication type 2 is for application specific\n  \
    \ communication to Application Specific Modules (ASMs) or Service\n   Equipment.\n\
    \                    +-------+\n                    |  AAA  |<---1---> to AAA\
    \ server as in fig. 2\n   request <---4--->|GateWay|\n                    |  \
    \     |<---2---> optionally to ASM/service\n                    +-------+\n  \
    \ The numbers in the links denote types of communication.\n               Fig.\
    \ 3 -- AAA Gateway for Legacy AAA Protocols\n"
- title: 2.2.3.  Interaction between the ASM and the Service
  contents:
  - "2.2.3.  Interaction between the ASM and the Service\n   In a service provider,\
    \ the Application Specific Module (ASM) and the\n   software providing the service\
    \ itself may be tightly bound into a\n   single \"Service Application\".  In this\
    \ case, the interface between\n   them is just a software interface.  But the\
    \ service itself may be\n   provided by equipment external to the ASM, for example,\
    \ a router in\n   the bandwidth broker application.  In this case, the ASM communicates\n\
    \   with the service via some protocol.  These two possibilities are\n   illustrated\
    \ in figure 4.  In both cases, we have labeled the\n   communication between the\
    \ ASM and the service as communication type\n   5, which of course, is service\
    \ specific.\n                            |                  |\n             +--------------|----+\
    \             |\n             | Service      2    |             2\n          \
    \   | Application  |    |             |\n             |  +-------------+  |  \
    \    +-------------+\n             |  | Application |  |      | Application |\n\
    \             |  |  Specific   |  |      |  Specific   |\n             |  |  \
    \ Module    |  |      |   Module    |\n             |  +-------------+  |    \
    \  +-------------+\n             |         |         |             |\n       \
    \      |         5         |             5\n             |         |         |\
    \             |\n             |  +-------------+  |      +-------------+\n   \
    \          |  |   Service   |  |      |   Service   |\n             |  |     \
    \        |  |      |  Equipment  |\n             |  +-------------+  |      +-------------+\n\
    \             +-------------------+\n          Fig. 4 -- ASM to Service Interaction\
    \ (two views)\n"
- title: 2.2.4.  Multi-domain Architecture
  contents:
  - "2.2.4.  Multi-domain Architecture\n   The generic AAA server modules can use\
    \ communication type 1 to\n   contact each other to evaluate parts of requests.\
    \  Figure 5\n   illustrates a network of generic AAA servers in different\n  \
    \ administrative domains communicating via communication type 1.\n           \
    \                                       +-----+\n                            \
    \             o--------| AAA |---->...\n                                     \
    \   /         |     |\n                                       /          +-----+\\\
    \n                                      /              |    \\+----+\n       \
    \                              /            +-----+  | RP |\n                \
    \                    /             | ASM |  +----+\n    +--------+      +-----+\
    \        /              |     |\n    | Client |------| AAA |-------o         \
    \      +-----+\n    +--------+      |     |        \\\n                    +-----+\
    \        \\\n                       |    +----+  \\      +-----+\n           \
    \         +-----+  | RP |   o-----| AAA |---->...\n                    | ASM |\
    \  +----+         |     |\n                    |     |                 +-----+\\\
    \n                    +-----+                    |    \\+----+\n             \
    \                               +-----+  | RP |\n                            \
    \                | ASM |  +----+\n                                           \
    \ |     |\n                                            +-----+\n      The AAA\
    \ servers use only communication type 1 to communicate.\n      ASM = Application\
    \ Specific Module\n      RP  = Repository\n      Fig. 5 -- Multi-domain Multi-type\
    \ of Service Architecture\n"
- title: 2.3.  Model Observations
  contents:
  - "2.3.  Model Observations\n   Some key points of the generic architecture are:\n\
    \   1) The same generic AAA server can function in all three\n      authorization\
    \ models: agent, pull, and push [2].\n   2) The rule based engine knows how to\
    \ evaluate logical formulas and\n      how to parse AAA requests.\n   3) The Generic\
    \ AAA server has no knowledge whatsoever about the\n      application specific\
    \ services so the application specific\n      information it forwards is opaque\
    \ to it.\n   4) Communication types 1, 2, and 3 each present their own naming\n\
    \      space problems.  Solving these problems is fundamental to\n      forwarding\
    \ AAA messages, locating application specific entities,\n      and locating applicable\
    \ rules in the rule repositories.\n   5) A standard AAA protocol for use in communication\
    \ type 1 should be\n      a peer-to-peer protocol without imposing client and\
    \ server roles\n      on the communicating entities.\n   6) A standard AAA protocol\
    \ should allow information units for\n      multiple different services belonging\
    \ to multiple different\n      applications in multiple different administrative\
    \ domains to be\n      combined in a single AAA protocol message.\n"
- title: 2.4.  Suggestions for Future Work
  contents:
  - "2.4.  Suggestions for Future Work\n   It is hoped that by using this generic\
    \ model it will be feasible to\n   design a AAA protocol that is \"future proof\"\
    , in a sense, because\n   much of what we do not think about now can be encoded\
    \ as application\n   specific information and referenced by policy rules stored\
    \ in a\n   policy repository.  From this model, some generic requirements arise\n\
    \   that will require some further study.  For example, suppose a new\n   user\
    \ is told that somewhere on a specific AAA server a certain\n   authorization\
    \ can be obtained.  The user will need a AAA protocol\n   that can:\n   1) send\
    \ a query to find out which authorizations can be obtained from\n      a specific\
    \ server,\n   2) provide a mechanism for determining what components must be put\
    \ in\n      an AAA request for a specific authorization, and\n   3) formulate\
    \ and transmit the authorization request.\n   Some areas where further work is\
    \ particularly needed are in\n   identifying and designing the generic components\
    \ of a AAA protocol\n   and in determining the basis upon which component forwarding\
    \ and\n   policy retrieval decisions are made.\n   In addition to these areas,\
    \ there is a need to explore the management\n   of rules in a multi-domain AAA\
    \ environment because the development\n   and future deployment of a generic multi-domain\
    \ AAA infrastructure is\n   largely dependent on its manageability.  Multi-domain\
    \ AAA\n   environments housing many rules distributed over several AAA servers\n\
    \   quickly become unmanageable if there is not some form of automated\n   rule\
    \ creation and housekeeping.  Organizations that allow their\n   services to be\
    \ governed by rules, based on some form of commercial\n   contract, require the\
    \ contract to be implemented with the least\n   possible effort.  This can, for\
    \ example, be achieved in a scalable\n   fashion if the individual user or user\
    \ organization requesting a\n   service is able to establish the service itself.\
    \  This kind of\n   interaction requires policy rule establishment between AAA\
    \ servers\n   belonging to multiple autonomous administrative domains.\n"
- title: 3.  Layered AAA Protocol Model
  contents:
  - "3.  Layered AAA Protocol Model\n   In the previous section, we proposed the idea\
    \ of a generic AAA server\n   with an interface to one or more Application Specific\
    \ Modules (ASMs).\n   The generic server would handle many common functions including\
    \ the\n   forwarding of AAA messages between servers in different\n   administrative\
    \ domains.  We envision message transport, hop-by-hop\n   security, and message\
    \ forwarding as clearly being functions of the\n   generic server.  The application\
    \ specific modules would handle all\n   application specific tasks such as communication\
    \ with service\n   equipment and access to special purpose databases.  Between\
    \ these two\n   sets of functions is another set of functions that presumably\
    \ could\n   take place in either the generic server or an ASM or possibly by a\n\
    \   collaboration of both.  These functions include the evaluation of\n   authorization\
    \ rules against data that may reside in various places\n   including attributes\
    \ from the authorization request itself.  The more\n   we can push these functions\
    \ down into the generic server, the more\n   powerful the generic server can be\
    \ and the simpler the ASMs can be.\n   One way of organizing the different functions\
    \ mentioned above would\n   be to assign them to a layered hierarchy.  In fact,\
    \ we have found the\n   layer paradigm to be a useful one in understanding AAA\
    \ functionality.\n   This section explores the use of a layered hierarchy consisting\
    \ of\n   the following AAA layers as a way of organizing the AAA functions:\n\
    \         Application Specific Service Layer\n         Presentation Service Layer\n\
    \         Transaction/Session Management Service Layer\n         Reliable/Secure\
    \ Transport Service Layer\n   Nevertheless, the interface between the generic\
    \ AAA server and the\n   ASMs proposed in the previous section may be more complex\
    \ than a\n   simple layered model would allow.  Even the division of functionality\n\
    \   proposed in this section goes beyond a strict understanding of\n   layering.\
    \  Therefore this paper can probably best be understood as\n   the beginnings\
    \ of a work to understand and organize the common\n   functionality required for\
    \ a general purpose AAA infrastructure\n   rather than as a mature reference model\
    \ for the creation of AAA\n   protocols.\n   In our view of AAA services modeled\
    \ as a hierarchy of service layers,\n   there is a set of distributed processes\
    \ at each service layer that\n   cooperate and are responsible for implementing\
    \ that service layer's\n   functions.  These processes communicate with each other\
    \ using a\n   protocol specialized to carry out the functions and responsibilities\n\
    \   assigned to their service layer.  The protocol at service layer n\n   communicates\
    \ to its peers by depending on the services available to\n   it from service layer\
    \ n-1.  The service layer n also has a protocol\n   end point address space, through\
    \ which the peer processes at service\n   layer n can send messages to each other.\
    \  Together, these AAA service\n   layers can be assembled into an AAA protocol\
    \ stack.\n   The advantage of this approach is that there is not just one\n  \
    \ monolithic \"AAA protocol\".  Instead there is a suite of protocols,\n   and\
    \ each one is optimized to solve the problems found at its layer of\n   the AAA\
    \ protocol stack hierarchy.\n   This approach realizes several key benefits:\n\
    \   -  The protocol used at any particular layer in the protocol stack\n     \
    \ can be substituted for another functionally equivalent protocol\n      without\
    \ disrupting the services in adjacent layers.\n   -  Requirements in one layer\
    \ may be met without impact on protocols\n      operating in other layers.  For\
    \ example, local security\n      requirements may dictate the substitution of\
    \ stronger or weaker\n      \"reliable secure transport\" layer security algorithms\
    \ or\n      protocols.  These can be introduced with no change or awareness of\n\
    \      the substitution by the layers above the Reliable/Secure Transport\n  \
    \    layer.\n   -  The protocol used for a given layer is simpler because it is\n\
    \      focused on a specific narrow problem that is assigned to its\n      service\
    \ layer. In particular, it should be feasible to leverage\n      existing protocol\
    \ designs for some aspects of this protocol stack\n      (e.g. CORBA GIOP/CDR\
    \ for the presentation layer).\n   -  A legacy AAA protocol message (e.g. a RADIUS\
    \ message) can be\n      encapsulated within the protocol message(s) of a lower\
    \ layer\n      protocol, preserving the investment of a Service Provider or User\n\
    \      Home Organization in their existing AAA infrastructure.\n   -  At each\
    \ service layer, a suite of alternatives can be designed,\n      and the service\
    \ layer above it can choose which alternative makes\n      sense for a given application.\
    \  However, it should be a primary\n      goal of the AAA protocol standardization\
    \ effort to specify one\n      mandatory to implement protocol at the AAA Transaction/Session\n\
    \      Management (AAA-TSM) service layer (see section 3.4).\n"
- title: 3.1.  Elements of a Layered Architecture
  contents:
  - "3.1.  Elements of a Layered Architecture\n   At each layer of a layered architecture,\
    \ a number of elements need to\n   be defined.  These elements are discussed in\
    \ the following sections.\n"
- title: 3.1.1.  Service Layer Abstract Interface Primitives
  contents:
  - "3.1.1.  Service Layer Abstract Interface Primitives\n   The service layer n is\
    \ assumed to present a program interface through\n   which its adjacent service\
    \ layer n+1 can access its services.  The\n   types of abstract program service\
    \ primitives and associated\n   parameters exchanged across the boundary between\
    \ these service layers\n   must be specified.\n"
- title: 3.1.2.  Service Layer Peer End Point Name Space
  contents:
  - "3.1.2.  Service Layer Peer End Point Name Space\n   Each service layer is treated\
    \ as a set of cooperating processes\n   distributed across multiple computing\
    \ systems.  The service layer\n   must manage an end point name space that identifies\
    \ these peer\n   processes.  The conventions by which a service layer assigns\
    \ a unique\n   end point name to each such peer process must be specified.\n"
- title: 3.1.3.  Peer Registration, Discovery, and Location Resolution
  contents:
  - "3.1.3.  Peer Registration, Discovery, and Location Resolution\n   Along with\
    \ defining an end point name space, a service layer must\n   also specify how\
    \ its peers:\n   -  announce their presence and availability,\n   -  discover\
    \ one another when they first begin operation, and\n   -  detect loss of connectivity\
    \ or service withdrawal.\n   It is also necessary to specify what mechanisms,\
    \ if any, exist to\n   resolve a set of service layer specific search attributes\
    \ into one or\n   more peer end point names that match the search criteria.\n"
- title: 3.1.4.  Trust Relationships Between Peer End Points
  contents:
  - "3.1.4.  Trust Relationships Between Peer End Points\n   Once an end point has\
    \ established its initial contact with another\n   peer, it must decide what authentication\
    \ policy to adapt.  It can\n   trust whatever authentication was done on its behalf\
    \ by a lower\n   service layer or, through a pre-provisioning process, implicitly\n\
    \   trust the peer, or else go through an authentication process with its\n  \
    \ peer.  The supported mechanisms for establishing a service layer's\n   end point\
    \ trust relationships must be specified.\n"
- title: 3.1.5.  Service Layer Finite State Machine
  contents:
  - "3.1.5.  Service Layer Finite State Machine\n   To the extent that a service layer's\
    \ internal states are externally\n   visible, the layer's behavior in terms of\
    \ a Finite State Machine\n   (FSM) should be specified.  Events that can drive\
    \ the FSM state\n   transitions may include:\n   -  service layer n+1 interface\
    \ primitive requests\n   -  protocol data unit arrivals from peer service layer\
    \ n end points\n      received through the layer n-1 access point\n   -  service\
    \ layer n-1 interface primitives (e.g. call backs or\n      interrupts)\n   -\
    \  timer expirations\n"
- title: 3.1.6.  Protocol Data Unit Types
  contents:
  - "3.1.6.  Protocol Data Unit Types\n   Each service layer defines a lexicon of\
    \ protocol data units (PDUs)\n   that communicate between the layer's peer processes\
    \ the information\n   that controls and/or monitors that service layer's distributed\
    \ state\n   and allows the service processes of that layer to perform their\n\
    \   functions.  Embedded in the PDUs of each layer are the PDUs of the\n   higher\
    \ layers which depend on its services.  The PDUs of each service\n   layer must\
    \ be specified.\n"
- title: 3.2.  AAA Application Specific Service Layer
  contents:
  - "3.2.  AAA Application Specific Service Layer\n   AAA applications have almost\
    \ unlimited diversity, but imposing some\n   constraints and commonality is required\
    \ for them to participate in\n   this generic AAA architectural framework.  To\
    \ satisfy these\n   constraints, participating AAA applications would derive their\n\
    \   application specific program logic from a standardized \"Authorization\n \
    \  Server\" abstract base object class.  They would also support an\n   \"Authorized\
    \ Session\" object class.  An Authorization Session object\n   instance represents\
    \ an approved authorization request that has a\n   long-lived allocation of services\
    \ or resources.  The generic AAA\n   architecture could be extended to include\
    \ other abstract base object\n   classes in the future (e.g. Authorization Reservation,\
    \ Authentication\n   Server, etc.).  How to implement the derived Authorization\
    \ Server\n   class's public methods for a given problem domain is entirely up\
    \ to\n   the application.  One technique might be to place a software\n   \"wrapper\"\
    \ around an existing embedded application specific service to\n   adapt it to\
    \ the standardized Authorization Server object paradigm.\n   The major Authorization\
    \ Server class methods are:\n   -  Publish an advertisement that describes the\
    \ Authorization Server's\n      service attributes and its application specific\
    \ service layer end\n      point address.  Once the Authorization Server has registered,\
    \ peer\n      processes can discover its presence or send messages addressed to\n\
    \      it.\n   -  Application Specific Authorization Decision Function (AS-ADF)\n\
    \      method takes a User's application specific authorization request\n    \
    \  and returns a decision of approve, deny, or conditionally approve\n      with\
    \ referral to another stakeholder.  In the latter case, the\n      application\
    \ may create a reservation for the requested services or\n      resources.  This\
    \ method represents the \"condition\" side of a\n      policy rule's condition/action\
    \ pair.\n   -  Commit a service or set of resources to a previously conditionally\n\
    \      approved authorization decision.  For those authorization requests\n  \
    \    that have a long-term lifecycle (as opposed to being\n      transactions),\
    \ this method mobilizes a reservation into an\n      Authorized Session object\
    \ instance.  This method represents the\n      \"action\" side of a policy rule's\
    \ condition/action pair.\n   -  Cancel a previously conditionally approved Authorization\
    \ request.\n      This method releases any associated reservations for services\
    \ or\n      resources.\n   -  Withdraw the Authorization Server's service advertisement.\n\
    \   A key motivation for structuring an AAA application as an\n   Authorization\
    \ Server object instance is to separate the generic\n   authorization decision\
    \ logic from the application-specific\n   authorization decision logic.  In many\
    \ cases, the application can be\n   divorced from the AAA problem altogether,\
    \ and its AAA responsibility\n   can be assigned to an external rules based generic\
    \ AAA Server.  (The\n   idea is similar to that of a trust management policy server\
    \ as\n   defined in [5].)  This would facilitate a security administrator\n  \
    \ deploying AAA policy in a central repository.  The AAA policy is\n   applied\
    \ consistently across all users of the applications, resources,\n   and services\
    \ controlled by the AAA server.  However, it is recognized\n   that for many problem\
    \ domains, there are unique rules intrinsic to\n   the application.  In these\
    \ cases, the generic AAA Server must refer\n   the User's authorization request\
    \ to the relevant Application Specific\n   Module.\n"
- title: 3.3.  Presentation Service Layer
  contents:
  - "3.3.  Presentation Service Layer\n   The presentation service layer solves the\
    \ data representation\n   problems that are encountered when communicating peers\
    \ exchange\n   complex data structures or objects between their heterogeneous\n\
    \   computing systems.  The goal is to transfer semantically equivalent\n   application\
    \ layer data structures regardless of the local machine\n   architecture, operating\
    \ system, compiler, or other potential inter-\n   system differences.\n   One\
    \ way to better understand the role of the presentation layer is to\n   evaluate\
    \ an existing example.  The Generic Inter-ORB Protocol (GIOP)\n   and its Common\
    \ Data Representation (CDR) is a presentation service\n   layer protocol developed\
    \ by the Object Management Group (OMG)\n   industry consortium.  GIOP is one component\
    \ within the Common Object\n   Request Broker Architecture (CORBA).  Peer Object\
    \ Request Brokers\n   (ORB) executing on heterogeneous systems use GIOP to invoke\
    \ remote\n   CORBA object interface methods.  GIOP encodes an object method's\n\
    \   input and output parameters in the Common Data Representation (CDR).\n   While\
    \ there are other presentation service layer protocols in the\n   industry, GIOP\
    \ in combination with CDR represents a mature,\n   comprehensive solution that\
    \ exhibits many of the presentation service\n   layer requirements that are applicable\
    \ within the AAA protocol model.\n   In the context of Internet access AAA protocols,\
    \ RADIUS and its\n   successors use the Attribute Value Pair (AVP) paradigm as\
    \ the\n   presentation service layer encoding scheme.  While such an approach\n\
    \   is versatile, it is also prone to becoming splintered into many ad\n   hoc\
    \ and vendor specific dialects.  There is no structure imposed or\n   method to\
    \ negotiate the constraints on which AVPs are combined and\n   interpreted for\
    \ a given conversation in a consistent way across AAA\n   protocol implementations\
    \ or problem domains.  At run-time, it can be\n   hard for the communicating peers\
    \ to negotiate to a common inter-\n   operable set of AVPs.\n   To avoid this\
    \ pitfall, a primary presentation service layer\n   responsibility is the ability\
    \ to let peers negotiate from a base\n   Authorization Server object class towards\
    \ a commonly understood\n   derived Authorization Server object class that both\
    \ presentation\n   service layer peers have implemented for their application\
    \ specific\n   problem domain.  This negotiation implies a requirement for a\n\
    \   globally registered and maintained presentation service layer\n   hierarchy\
    \ of Authorization Server object class names.\n"
- title: 3.4.  AAA Transaction/Session Management Service Layer
  contents:
  - "3.4.  AAA Transaction/Session Management Service Layer\n   The AAA Transaction/Session\
    \ Management (AAA-TSM) service layer is a\n   distributed set of AAA Servers,\
    \ which typically reside in different\n   administrative domains.  Collectively\
    \ they are responsible for the\n   following three services:\n   Authentication\
    \ -- Execute the procedure(s) needed to confirm the\n      identity of the other\
    \ parties with which the AAA TSM entity has a\n      trust relationship.\n   Authorization\
    \ -- Make an authorization decision to grant or deny a\n      User's request for\
    \ services or resources.  The generic rules based\n      policy engine described\
    \ earlier in this document executes the\n      authorization decision function.\
    \  When the User's request is\n      instantaneous and transient, then its authorization\
    \ approval is\n      treated as an ephemeral transaction.  If the authorization\n\
    \      approval implies a sustained consumption of a service or\n      resources,\
    \ then the request is transformed into an Authorized\n      Session.  For the\
    \ duration of the Authorized Session's lifetime:\n      -  its state may be queried\
    \ and reported, or\n      -  it may be canceled before service is completed, or\n\
    \      -  the service being delivered may be modified to operate under\n     \
    \    new parameters and conditions, or\n      -  the service may complete on its\
    \ own accord.\n      In each of these cases, the AAA-TSM service layer must synchronize\n\
    \      the Authorized Session's distributed state across all of those AAA\n  \
    \    Servers which are implementing that specific Authorized Session.\n   Accounting\
    \ -- Generate any relevant accounting information regarding\n      the authorization\
    \ decision and the associated Authorized Session\n      (if any) that represents\
    \ the ongoing consumption of those services\n      or resources.\n   The peer\
    \ AAA servers and their AAA-TSM end points exchange AAA-TSM\n   messages to realize\
    \ these AAA functions.  A central AAA-TSM concept\n   is that there is a set of\
    \ one or more AAA Server stakeholders who are\n   solicited to approve/disapprove\
    \ a User request for application layer\n   services.  The AAA-TSM service layer\
    \ routes the User's request from\n   one stakeholder to the next, accumulating\
    \ the requisite approvals\n   until they have all been asked to make an authorization\
    \ decision.\n   The AAA Servers may also do User authentication (or re-\n   authentication)\
    \ as part of this approval process.  The overall flow\n   of the routing from\
    \ one stakeholder to another may take the form of\n   the \"push\", \"pull\",\
    \ or \"agent\" authorization models developed in [2].\n   However, in principle,\
    \ it is feasible to have an arbitrary routing\n   path of an AAA-TSM authorization\
    \ request among stakeholders. Once the\n   final approval is received, the AAA-TSM\
    \ service layer commits the\n   requested service by notifying all of those stakeholders\
    \ that require\n   a confirmation (i.e. turn on a pending reservation and do a\n\
    \   transaction commit).  Alternatively, any stakeholder among those on\n   the\
    \ consent list can veto the authorization request.  In that case,\n   all stakeholders\
    \ who previously approved the request and had asked\n   for a confirmation are\
    \ told that the request has been denied (i.e.,\n   cancel reservation and do a\
    \ transaction rollback).\n   The AAA-TSM authorization request payload must carry\
    \ its own \"Context\n   State\", such that when an AAA server receives it, there\
    \ is sufficient\n   information that it is essentially self-contained.  Embedding\
    \ the\n   Context State within the AAA-TSM message provides two benefits.\n  \
    \ First, the message can be immediately processed with respect to the\n   AAA\
    \ Server's local policy, and this minimizes or altogether avoids\n   the need\
    \ for the AAA Server to exchange additional AAA-TSM messages\n   with its peers\
    \ to complete its piece of the overall authorization\n   decision.  The other\
    \ benefit is that the AAA Server minimizes the\n   amount of state information\
    \ resources that it commits to a user's\n   pending request until it is fully\
    \ approved.  This helps protect\n   against denial of service attacks.\n   One\
    \ can envision many possible message elements that could be part of\n   the Context\
    \ State carried within an AAA-TSM request message:\n   -  AAA-TSM session identifier,\
    \ a unique handle representing this\n      authorization request.  All AAA servers\
    \ who participate in a\n      request's approval process and its subsequent monitoring\n\
    \      throughout its Session lifetime refer to this handle.\n   -  permission\
    \ lists stating which AAA Servers are allowed to modify\n      which parts of\
    \ the message.\n   -  User's authorization request, encoded as a presentation\
    \ layer PDU.\n   -  User authentication information, (e.g. an X.509 public key\n\
    \      certificate).\n   -  User credentials information, or else a pointer to\
    \ where that\n      information can be found by an AAA server. An example of such\n\
    \      credentials would be an X.509 attributes certificate.\n   -  the list of\
    \ AAA Server stakeholders who have yet to be visited to\n      gain full approval\
    \ of the User's authorization request.  Each\n      element in that list contains\
    \ a presentation layer message\n      encoding how the user authorization request\
    \ should be evaluated by\n      its application specific Authorization Decision\
    \ Function (ADF).\n   -  the current position in the list of AAA Server stakeholders\
    \ to be\n      visited.\n   -  a list of those AAA servers which have already\
    \ conditionally\n      approved the User's authorization request, but which have\n\
    \      predicated their approval on the request also completing its\n      approval\
    \ from those stakeholders who have not yet seen the\n      request.  Each element\
    \ in the list has a digital signature or\n      comparable mechanism by which\
    \ their approval can be subsequently\n      verified.\n   -  an expiration time\
    \ stamp, expressed in a universally understood\n      time reference, which sets\
    \ a lifetime limit on the AAA-TSM\n      message's validity.  This offers some\
    \ replay attack protection,\n      and inhibits messages from circulating indefinitely\
    \ seeking the\n      completion of a request's approval.\n   -  a message payload\
    \ modification audit trail, tracing which parties\n      introduced changes into\
    \ the User's authorization request terms and\n      conditions.\n   -  an AAA-TSM\
    \ message integrity check, computed across the whole\n      message rather than\
    \ its individual elements, and signed by the\n      most recent AAA-TSM layer\
    \ end point process to modify the AAA-TSM\n      message before its transmission\
    \ to its AAA-TSM peer.  This\n      function may be delegated to the underlying\
    \ Reliable Secure\n      Transport layer connection to that destination peer.\n"
- title: 3.5.  AAA-TSM Service Layer Program Interface Primitives
  contents:
  - "3.5.  AAA-TSM Service Layer Program Interface Primitives\n   The AAA-TSM service\
    \ layer and its adjacent presentation service layer\n   communicate across their\
    \ boundary through a set of program interface\n   primitives.  A key design goal\
    \ is to keep these primitives the same\n   regardless of the higher level AAA\
    \ application, analogous to a\n   callable \"plug-in\".  The two service layers\
    \ are responsible for\n   coordinating their state information.  This responsibility\
    \ includes\n   all of the pending Authorization requests and the Authorization\n\
    \   Sessions that they are both controlling and monitoring.  The initial\n   contact\
    \ between these two layers is through an abstract object that\n   is called an\
    \ AAA-TSM Service Access Point (SAP).  A particular\n   service instance between\
    \ these two layers is realized in an abstract\n   object that is called an Authorized\
    \ Session.  The presentation\n   service layer invokes AAA-TSM interface primitives\
    \ against an AAA-TSM\n   SAP.\n   The AAA-TSM service layer interface primitives\
    \ can be broadly\n   characterized as follows:\n   -  Register a presentation\
    \ end point address identifier and its\n      associated set of attributes to\
    \ a service access point.\n   -  Send a presentation layer message to a specified\
    \ destination\n      presentation layer peer end point address.\n   -  Receive\
    \ a presentation layer message from another presentation\n      layer end point\
    \ address.  A receive operation may select a\n      specific originating presentation\
    \ layer end point address from\n      which the message is expected, or receive\
    \ a message from any\n      presentation layer peer.\n   -  The AAA-TSM service\
    \ layer calls an application specific\n      authorization decision function,\
    \ which returns a condition code\n      expressing an approval, denial, or partially\
    \ approves with a\n      referral to another AAA Server.\n   -  AAA-TSM service\
    \ layer tells the presentation layer to commit an\n      earlier partially approved\
    \ authorization request.\n   -  Cancel an earlier partially approved authorization\
    \ request (i.e.\n      rollback).\n   -  The presentation service layer notifies\
    \ the AAA-TSM service layer\n      that it has terminated an in-progress Authorized\
    \ Session.\n   -  AAA-TSM service layer notifies the presentation service layer\
    \ that\n      another presentation service layer peer has terminated an\n    \
    \  Authorized Session.\n   -  Un-register a presentation service layer end point\
    \ address.\n"
- title: 3.6.  AAA-TSM Layer End Point Name Space
  contents:
  - "3.6.  AAA-TSM Layer End Point Name Space\n   The AAA-TSM service layer end point\
    \ name space is the N-tuple formed\n   by concatenating the following components:\n\
    \   -  AAA Server's Reliable/Secure Transport layer end point address\n   -  AAA-TSM\
    \ authorization request serial number, a unique durable\n      unsigned integer\
    \ generated by the AAA Server who first receives\n      the User's authorization\
    \ request.\n   Some AAA applications may require that each assigned AAA-TSM\n\
    \   transaction serial number be stored in persistent storage, and\n   require\
    \ that it be recoverable across AAA Server system re-boots.\n   The serial number\
    \ generation algorithm must be guaranteed unique even\n   if the AAA Server does\
    \ a re-boot.\n"
- title: 3.7.  Protocol Stack Examples
  contents:
  - "3.7.  Protocol Stack Examples\n   The layering paradigm makes it possible to\
    \ use the most appropriate\n   syntax for each application for encoding the Application\
    \ Specific\n   Information units of that application.  This encoding would take\n\
    \   place at the presentation layer.  Similarly the application layer can\n  \
    \ recognize the semantics specific to each application.  Figure 6\n   illustrates\
    \ some possible AAA protocol stacks.\n   +------------++------------++-----------++-----------++----------+\n\
    \   |            || Application|| E-Commerce|| Bandwidth || Roaming &|\n   | \
    \   AAA     ||  specific  || Internet  ||  Broker   || mobile IP|\n   | Application||object\
    \ class||   Open    ||cross-admin||  remote  |\n   |  Service   || interface \
    \ ||  Trading  ||  domain   ||  access  |\n   |   Layer    ||specified in|| Protocol\
    \  ||   COPS    ||   AVP    |\n   |            || CORBA IDL  ||  (IOTP)   || extensions||\
    \ lexicons |\n   +------------++------------++-----------++-----------++----------+\n\
    \   |            ||   CORBA    ||Extensible ||  Common   || DIAMETER |\n   |Presentation||\
    \  Generic   ||  Markup   ||   Open    ||    or    |\n   |  Service   || Inter-ORB\
    \  || Language  ||  Policy   ||  RADIUS  |\n   |   Layer    ||  Protocol  || \
    \  (XML)   ||Specificatn||Attribute |\n   |            ||   (GIOP)   ||      \
    \     ||  (COPS)   ||Value/Pair|\n   +------------++------------++-----------++-----------++----------+\n\
    \   |   AAA-TSM Service Layer Application Program Interface (API)    |\n   +----------------------------------------------------------------+\n\
    \   |   AAA Transaction/Session Management (AAA-TSM) Service Layer   |\n   +----------------------------------------------------------------+\n\
    \   |                Reliable Secure Transport Layer                 |\n   +----------------------------------------------------------------+\n\
    \                 Fig. 6 -- Possible AAA Protocol Stacks\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Security considerations for the framework on\
    \ which the work described\n   in this memo is based are discussed in [2].  Security\
    \ requirements\n   for authorization are listed in section 2.2 of [3].\n   This\
    \ memo identifies a basic set of AAA functions that are general in\n   nature\
    \ and common to many different AAA applications.  We propose\n   that a standard\
    \ set of security mechanisms should be defined as part\n   of a base AAA protocol\
    \ which would include such things as public key\n   encryption and digital signatures\
    \ that could be applied to individual\n   information units within an AAA message.\
    \  Security with this\n   granularity is needed to meet the end-to-end security\
    \ requirement\n   specified in section 2.2.7 of [3] because a single AAA message\
    \ may\n   contain multiple information units each generated by AAA servers from\n\
    \   different administrative domains and destined to AAA servers in\n   different\
    \ domains.\n   In addition, it may be necessary to encrypt or sign an entire AAA\n\
    \   message on a hop-by-hop basis.  This could be handled by a standard,\n   lower\
    \ layer protocol such as IPSEC.  If so, then certain auditing\n   requirements\
    \ will have to be met so that it can be established later\n   that the messages\
    \ relative to some specific session ID were, in fact,\n   protected in a particular\
    \ way.  Alternatively, hop-by-hop security\n   mechanisms may be built into the\
    \ base AAA protocol itself.\n"
- title: Glossary
  contents:
  - "Glossary\n   Application Specific Information (ASI) -- information in an AAA\n\
    \      protocol message that is specific to a particular application.\n   Application\
    \ Specific Module (ASM) -- a software module that\n      implements a program\
    \ interface to a generic AAA server which\n      handles application specific\
    \ functionality for an AAA protocol\n      message.\n   Service Provider -- an\
    \ organization which provides a service.\n   User -- the entity seeking authorization\
    \ to use a resource or a\n      service.\n   User Home Organization (UHO) -- An\
    \ organization with whom the User\n      has a contractual relationship which\
    \ can authenticate the User and\n      may be able to authorize access to resources\
    \ or services.\n"
- title: References
  contents:
  - "References\n   [1]  Bradner, S., \"The Internet Standards Process -- Revision\
    \ 3\", BCP\n        9, RFC 2026, October 1996.\n   [2]  Vollbrecht, J., Calhoun,\
    \ P., Farrell, S., Gommans, L., Gross,\n        G., de Bruijn, B., de Laat, D.,\
    \ Holdrege, M. and D. Spence, \"AAA\n        Authorization Framework\", RFC 2904,\
    \ August 2000.\n   [3]  Vollbrecht, J., Calhoun, P., Farrell, S., Gommans, L.,\
    \ Gross,\n        G., de Bruijn, B., de Laat, C., Holdrege, M. and D. Spence,\
    \ \"AAA\n        Authorization Application Examples\", RFC 2905, August 2000.\n\
    \   [4]  Farrell, S., Vollbrecht, J., Calhoun, P., Gommans, L., Gross,\n     \
    \   G., de Bruijn, B., de Laat, C., Holdrege, M. and D. Spence, \"AAA\n      \
    \  Authorization Requirements\", RFC 2906, August 2000.\n   [5]  Blaze, M., Feigenbaum,\
    \ J., Ioannidis, J. and A. Keromytis, \"The\n        KeyNote Trust-Management\
    \ System Version 2\", RFC 2704, September\n        1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Cees T.A.M. de Laat\n   Physics and Astronomy dept.\n\
    \   Utrecht University\n   Pincetonplein 5,\n   3584CC Utrecht\n   Netherlands\n\
    \   Phone: +31 30 2534585\n   Phone: +31 30 2537555\n   EMail: delaat@phys.uu.nl\n\
    \   George M. Gross\n   Lucent Technologies\n   184 Liberty Corner Road, m.s.\
    \ LC2N-D13\n   Warren, NJ 07059\n   USA\n   Phone:  +1 908 580 4589\n   Fax: \
    \   +1 908-580-4991\n   EMail:  gmgross@lucent.com\n   Leon Gommans\n   Enterasys\
    \ Networks EMEA\n   Kerkplein 24\n   2841 XM  Moordrecht\n   The Netherlands\n\
    \   Phone: +31 182 379279\n   email: gommans@cabletron.com\n          or at University\
    \ of Utrecht:\n          l.h.m.gommans@phys.uu.nl\n   John R. Vollbrecht\n   Interlink\
    \ Networks, Inc.\n   775 Technology Drive, Suite 200\n   Ann Arbor, MI  48108\n\
    \   USA\n   Phone: +1 734 821 1205\n   Fax:   +1 734 821 1235\n   EMail: jrv@interlinknetworks.com\n\
    \   David W. Spence\n   Interlink Networks, Inc.\n   775 Technology Drive, Suite\
    \ 200\n   Ann Arbor, MI  48108\n   USA\n   Phone: +1 734 821 1203\n   Fax:   +1\
    \ 734 821 1235\n   EMail: dspence@interlinknetworks.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
