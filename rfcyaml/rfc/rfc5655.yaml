- contents:
  - '  Specification of the IP Flow Information Export (IPFIX) File Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a file format for the storage of flow data\n
    \  based upon the IP Flow Information Export (IPFIX) protocol.  It\n   proposes
    a set of requirements for flat-file, binary flow data file\n   formats, then specifies
    the IPFIX File format to meet these\n   requirements based upon IPFIX Messages.
    \ This IPFIX File format is\n   designed to facilitate interoperability and reusability
    among a wide\n   variety of flow storage, processing, and analysis tools.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. IPFIX Documents Overview ...................................4\n   2.
    Terminology .....................................................5\n   3. Design
    Overview .................................................6\n   4. Motivation
    ......................................................7\n   5. Requirements ...................................................10\n
    \     5.1. Record Format Flexibility .................................10\n      5.2.
    Self-Description ..........................................10\n      5.3. Data
    Compression ..........................................11\n      5.4. Indexing
    and Searching ....................................11\n      5.5. Error Recovery
    ............................................12\n      5.6. Authentication, Confidentiality,
    and Integrity ............12\n      5.7. Anonymization and Obfuscation .............................13\n
    \     5.8. Session Auditability and Replayability ....................13\n      5.9.
    Performance Characteristics ...............................14\n   6. Applicability
    ..................................................14\n      6.1. Storage of IPFIX-Collected
    Flow Data ......................14\n      6.2. Storage of NetFlow-V9-Collected
    Flow Data .................15\n      6.3. Testing IPFIX Collecting Processes ........................15\n
    \     6.4. IPFIX Device Diagnostics ..................................16\n   7.
    Detailed File Format Specification .............................16\n      7.1.
    File Reader Specification .................................16\n      7.2. File
    Writer Specification .................................17\n      7.3. Specific
    File Writer Use Cases ............................18\n           7.3.1. Collocating
    a File Writer with a Collecting\n                  Process ............................................18\n
    \          7.3.2. Collocating a File Writer with a Metering Process ..19\n           7.3.3.
    Using IPFIX Files for Archival Storage .............20\n           7.3.4. Using
    IPFIX Files as Documents .....................20\n           7.3.5. Using IPFIX
    Files for Testing ......................21\n           7.3.6. Writing IPFIX Files
    for Device Diagnostics .........22\n           7.3.7. IPFIX File Manipulation
    ............................22\n      7.4. Media Type of IPFIX Files .................................22\n
    \  8. File Format Metadata Specification .............................22\n      8.1.
    Recommended Options Templates for IPFIX Files .............22\n           8.1.1.
    Message Checksum Options Template ..................23\n           8.1.2. File
    Time Window Options Template ..................23\n           8.1.3. Export Session
    Details Options Template ............24\n           8.1.4. Message Details Options
    Template ...................26\n      8.2. Recommended Information Elements for
    IPFIX Files ..........29\n           8.2.1. collectionTimeMilliseconds .........................29\n
    \          8.2.2. collectorCertificate ...............................29\n           8.2.3.
    exporterCertificate ................................29\n           8.2.4. exportSctpStreamId
    .................................30\n           8.2.5. maxExportSeconds ...................................30\n
    \          8.2.6. maxFlowEndMicroseconds .............................30\n           8.2.7.
    maxFlowEndMilliseconds .............................31\n           8.2.8. maxFlowEndNanoseconds
    ..............................31\n           8.2.9. maxFlowEndSeconds ..................................32\n
    \          8.2.10. messageMD5Checksum ................................32\n           8.2.11.
    messageScope ......................................32\n           8.2.12. minExportSeconds
    ..................................33\n           8.2.13. minFlowStartMicroseconds
    ..........................33\n           8.2.14. minFlowStartMilliseconds ..........................34\n
    \          8.2.15. minFlowStartNanoseconds ...........................34\n           8.2.16.
    minFlowStartSeconds ...............................34\n           8.2.17. opaqueOctets
    ......................................35\n           8.2.18. sessionScope ......................................35\n
    \  9. Signing and Encryption of IPFIX Files ..........................36\n      9.1.
    CMS Detached Signatures ...................................36\n           9.1.1.
    ContentInfo ........................................37\n           9.1.2. SignedData
    .........................................38\n           9.1.3. SignerInfo .........................................38\n
    \          9.1.4. EncapsulatedContentInfo ............................39\n      9.2.
    Encryption Error Resilience ...............................39\n   10. Compression
    of IPFIX Files ....................................39\n      10.1. Supported Compression
    Formats ............................40\n      10.2. Compression Recognition at
    the File Reader ...............40\n      10.3. Compression Error Resilience .............................40\n
    \  11. Recommended File Integration Strategies .......................41\n      11.1.
    Encapsulation of Non-IPFIX Data in IPFIX Files ...........41\n      11.2. Encapsulation
    of IPFIX Files within Other File Formats ...42\n   12. Security Considerations
    .......................................42\n      12.1. Relationship between IPFIX
    File and Transport\n            Encryption ...............................................43\n
    \     12.2. End-to-End Assertions for IPFIX Files ....................43\n      12.3.
    Recommendations for Strength of Cryptography for\n            IPFIX Files ..............................................44\n
    \  13. IANA Considerations ...........................................44\n   14.
    Acknowledgements ..............................................46\n   15. References
    ....................................................47\n      15.1. Normative
    References .....................................47\n      15.2. Informative References
    ...................................48\n   Appendix A.  Example IPFIX File ...................................49\n
    \    A.1.  Example Options Templates .................................50\n     A.2.
    \ Example Supplemental Options Data .........................52\n     A.3.  Example
    Message Checksum ..................................54\n     A.4.  File Example
    Data Set .....................................55\n     A.5.  Complete File Example
    .....................................55\n   Appendix B.  Applicability of IPFIX
    Files to NetFlow V9 Flow\n                Storage ..............................................57\n
    \    B.1.  Comparing NetFlow V9 to IPFIX .............................57\n       B.1.1.
    \ Message Header Format .................................57\n       B.1.2.  Set
    Header Format .....................................58\n       B.1.3.  Template
    Format .......................................59\n       B.1.4.  Information Model
    .....................................59\n       B.1.5.  Template Management ...................................59\n
    \      B.1.6.  Transport .............................................59\n     B.2.
    \ A Method for Transforming NetFlow V9 Messages to IPFIX ....60\n     B.3.  NetFlow
    V9 Transformation Example .........................61\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies a file format based upon IPFIX,
    designed to\n   facilitate interoperability and reusability among a wide variety
    of\n   flow storage, processing, and analysis tools.  It begins with an\n   overview
    of the IPFIX File format, and a quick summary of how IPFIX\n   Files work in Section
    3.  The detailed specification of the IPFIX\n   File format appears in Section
    7; this section includes general\n   specifications for IPFIX File Readers and
    IPFIX File Writers and\n   specific recommendations for common situations in which
    they are\n   used.  The format makes use of the IPFIX Options mechanism for\n
    \  additional file metadata, in order to avoid requiring any protocol\n   extensions,
    and to minimize the effort required to adapt IPFIX\n   implementations to use
    the file format; a detailed definition of the\n   Options Templates used for storage
    metadata appears in Section 8.\n   Appendix A contains a detailed example IPFIX
    File.\n   An advantage of file-based storage is that files can be readily\n   encapsulated
    within each other and other data storage and\n   transmission formats.  The IPFIX
    File format leverages this to\n   provide encryption, described in Section 9 and
    compression, described\n   in Section 10.  Section 11 provides specific recommendations
    for\n   integration of IPFIX File data with other formats.\n   The IPFIX File
    format was designed to be applicable to a wide variety\n   of flow storage situations;
    the motivation behind its creation is\n   described in Section 4.  The document
    outlines of the set of\n   requirements the format is designed to meet in Section
    5, and\n   explores the applicability of such a format to various specific\n   application
    areas in Section 6.  These sections are intended to give\n   background on the
    development of IPFIX Files.\n"
  - contents:
    - "1.1.  IPFIX Documents Overview\n   \"Specification of the IP Flow Information
      Export (IPFIX) Protocol for\n   the Exchange of IP Traffic Flow Information\"
      [RFC5101] and its\n   associated documents define the IPFIX protocol, which
      provides\n   network engineers and administrators with access to IP traffic
      flow\n   information.\n   \"Architecture for IP Flow Information Export\" [RFC5470]
      defines the\n   architecture for the export of measured IP flow information
      out of an\n   IPFIX Exporting Process to an IPFIX Collecting Process, and the
      basic\n   terminology used to describe the elements of this architecture, per\n
      \  the requirements defined in \"Requirements for IP Flow Information\n   Export\"
      [RFC3917].  [RFC5101] then covers the details of the method\n   for transporting
      IPFIX Data Records and Templates via a congestion-\n   aware transport protocol
      from an IPFIX Exporting Process to an IPFIX\n   Collecting Process.\n   \"Information
      Model for IP Flow Information Export\" [RFC5102]\n   describes the Information
      Elements used by IPFIX, including details\n   on Information Element naming,
      numbering, and data type encoding.\n   \"IP Flow Information Export (IPFIX)
      Applicability\" [RFC5472]\n   describes the various applications of the IPFIX
      protocol and their\n   use of information exported via IPFIX, and it relates
      the IPFIX\n   architecture to other measurement architectures and frameworks.\n
      \  In addition, \"Exporting Type Information for IP Flow Information\n   Export
      (IPFIX) Information Elements\" [RFC5610] specifies a method for\n   encoding
      Information Model properties within an IPFIX Message stream.\n   This document
      references [RFC5101] and [RFC5470] for terminology,\n   defines IPFIX File Writer
      and IPFIX File Reader in terms of the IPFIX\n   Exporting Process and IPFIX
      Collecting Process definitions from\n   [RFC5101], and extends the IPFIX Information
      Model defined in\n   [RFC5102] to provide new Information Elements for IPFIX
      File\n   metadata.  It uses the method described in [RFC5610] to support the\n
      \  self-description of IPFIX Files containing enterprise-specific\n   Information
      Elements.\n"
    title: 1.1.  IPFIX Documents Overview
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This section defines terminology related to the IPFIX File
    format.\n   In addition, terms used in this document that are defined in the\n
    \  \"Terminology\" section of [RFC5101] are to be interpreted as defined\n   there.\n
    \  IPFIX File:   An IPFIX File is a serialized stream of IPFIX Messages;\n      this
    stream may be stored on a filesystem or transported using any\n      technique
    customarily used for files.  Any IPFIX Message stream\n      that would be considered
    valid when transported over one or more\n      of the specified IPFIX transports
    (Stream Control Transmission\n      Protocol (SCTP), TCP, or UDP) as defined in
    [RFC5101] is\n      considered an IPFIX File.  However, this document extends
    that\n      definition with recommendations on the construction of IPFIX Files\n
    \     that meet the requirements identified in Section 5.\n   IPFIX File Reader:
    \  An IPFIX File Reader is a process that reads\n      IPFIX Files from a filesystem.
    \ An IPFIX File Reader operates as\n      an IPFIX Collecting Process as specified
    in [RFC5101], except as\n      modified by this document.\n   IPFIX File Writer:
    \  An IPFIX File Writer is a process that writes\n      IPFIX Files to a filesystem.
    \ An IPFIX File Writer operates as an\n      IPFIX Exporting Process as specified
    in [RFC5101], except as\n      modified by this document.\n   The key words \"MUST\",
    \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to
    be interpreted as described in [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Design Overview\n   An IPFIX File is simply a data stream containing one
    or more IPFIX\n   Messages serialized to some filesystem.  Though any set of valid\n
    \  IPFIX Messages can be serialized into an IPFIX File, the\n   specification
    includes guidelines designed to ease storage and\n   retrieval of flow data using
    the IPFIX File format.\n   IPFIX Files contain only IPFIX Messages; any file metadata
    such as\n   checksums or export session details are stored using Options within\n
    \  the IPFIX Message.  This design is completely compatible with the\n   IPFIX
    protocol on the wire.  A schematic of a typical IPFIX File is\n   shown below:\n
    \            +=======================================+\n             | IPFIX File
    \                           |\n             | +===================================+
    |\n             | | IPFIX Message                     | |\n             | | +-------------------------------+
    | |\n             | | | IPFIX Message Header          | | |\n             | |
    +-------------------------------+ | |\n             | | +-------------------------------+
    | |\n             | | | Options Template Set          | | |\n             | |
    |   Options Template Record     | | |\n             | | |           . . .               |
    | |\n             | | +-------------------------------+ | |\n             | |
    +-------------------------------+ | |\n             | | | Template Set                  |
    | |\n             | | |   Template Record             | | |\n             | |
    |            . . .              | | |\n             | | +-------------------------------+
    | |\n             | +===================================+ |\n             | |
    IPFIX Message                     | |\n             | | +-------------------------------+
    | |\n             | | | IPFIX Message Header          | | |\n             | |
    +-------------------------------+ | |\n             | | +-------------------------------+
    | |\n             | | | Data Set                      | | |\n             | |
    |   Data Record                 | | |\n             | | |            . . .              |
    | |\n             | | +-------------------------------+ | |\n             | |
    +-------------------------------+ | |\n             | | | Data Set                      |
    | |\n             | | |   Data Record                 | | |\n             | |
    |            . . .              | | |\n             | | +-------------------------------+
    | |\n             | |              . . .                | |\n             | +===================================+
    |\n             |                . . .                  |\n             +=======================================+\n
    \                    Figure 1: Typical File Structure\n"
  title: 3.  Design Overview
- contents:
  - "4.  Motivation\n   There is a wide variety of applications for the file-based
    storage of\n   IP flow data, across a continuum of time scales.  Tools used in
    the\n   analysis of flow data and creation of analysis products often use\n   files
    as a convenient unit of work, with an ephemeral lifetime.  A\n   set of flows
    relevant to a security investigation may be stored in a\n   file for the duration
    of that investigation, and further exchanged\n   among incident handlers via email
    or within an external incident\n   handling workflow application.  Sets of flow
    data relevant to\n   Internet measurement research may be published as files,
    much as\n   libpcap [pcap] packet trace files are, to provide common datasets
    for\n   the repeatability of research efforts; these files would have\n   lifetimes
    measured in months or years.  Operational flow measurement\n   systems also have
    a need for long-term, archival storage of flow\n   data, either as a primary flow
    data repository, or as a backing tier\n   for online storage in a relational database
    management system\n   (RDBMS).\n   The variety of applications of flow data, and
    the variety of\n   presently deployed storage approaches, indicates the need for
    a\n   standard approach to flow storage with applicability across the\n   continuum
    of time scales over which flow data is stored.  A storage\n   format based around
    flat files would best address the variety of\n   storage requirements.  While
    much work has been done on structured\n   storage via RDBMS, relational database
    systems are not a good basis\n   for format standardization owing to the fact
    that their internal data\n   structures are generally private to a single implementation
    and\n   subject to change for internal reasons.  Also, there are a wide\n   variety
    of operations available on flat files, and external tools and\n   standards can
    be leveraged to meet file-based flow storage\n   requirements.  Further, flow
    data is often not very semantically\n   complicated, and is managed in very high
    volume; therefore, an RDBMS-\n   based flow storage system would not benefit much
    from the advantages\n   of relational database technology.\n   The simplest way
    to create a new file format is simply to serialize\n   some internal data model
    to disk, with either textual or binary\n   representation of data elements, and
    some framing strategy for\n   delimiting fields and records.  \"Ad hoc\" file
    formats such as this\n   have several important disadvantages.  They impose the
    semantics of\n   the data model from which they are derived on the file format,
    and as\n   such, they are difficult to extend, describe, and standardize.\n   Indeed,
    one de facto standard for the storage of flow data is one of\n   these ad hoc
    formats.  A common method of storing data collected via\n   Cisco NetFlow is to
    serialize a stream of raw NetFlow datagrams into\n   files.  These NetFlow PDU
    files consist of a collection of header-\n   prefixed blocks (corresponding to
    the datagrams as received on the\n   wire) containing fixed-length binary flow
    records.  NetFlow V5, V7,\n   and V8 data may be mixed within a given file, as
    the header on each\n   datagram defines the NetFlow version of the records following.
    \ While\n   this NetFlow PDU file format has all the disadvantages of an ad hoc\n
    \  format, and is not extensible to data models other than that defined\n   by
    Cisco NetFlow, it is at least reasonably well understood due to\n   its ubiquity.\n
    \  Over the past decade, XML has emerged as a new \"universal\"\n   representation
    format for structured data.  It is intended to be\n   human readable; indeed,
    that is one reason for its rapid adoption.\n   However, XML has limited usefulness
    for representing network flow\n   data.  Network flow data has a simple, repetitive,
    non-hierarchical\n   structure that does not benefit much from XML.  An XML representation\n
    \  of flow data would be an essentially flat list of the attributes and\n   their
    values for each flow record.\n   The XML approach to data encoding is very heavyweight
    when compared\n   to binary flow encoding.  XML's use of start- and end-tags,
    and\n   plaintext encoding of the actual values, leads to significant\n   inefficiency
    in encoding size.  Typical network traffic datasets can\n   contain millions or
    billions of flows per hour of traffic\n   represented.  Any increase in storage
    size per record can have\n   dramatic impact on flow data storage and transfer
    sizes.  While data\n   compression algorithms can partially remove the redundancy
    introduced\n   by XML encoding, they introduce additional overhead of their own.\n
    \  A further problem is that XML processing tools require a full XML\n   parser.
    \ XML parsers are fully general and therefore complex,\n   resource-intensive,
    and relatively slow, introducing significant\n   processing time overhead for
    large network-flow datasets.  In\n   contrast, parsers for typical binary flow
    data encodings are simply\n   structured, since they only need to parse a very
    small header and\n   then have complete knowledge of all following fields for
    the\n   particular flow.  These can then be read in a very efficient linear\n
    \  fashion.\n   This leads us to propose the IPFIX Message format as the basis
    for a\n   new flow data file format.  The IPFIX Working Group, in defining the\n
    \  IPFIX protocol, has already defined an information model and data\n   formatting
    rules for representation of flow data.  Especially at\n   shorter time scales,
    when a file is a unit of data interchange, the\n   filesystem may be viewed as
    simply another IPFIX Message transport\n   between processes.  This format is
    especially well suited to\n   representing flow data, as it was designed specifically
    for flow data\n   export; it is easily extensible, unlike ad hoc serialization,
    and\n   compact, unlike XML.  In addition, IPFIX is an IETF Standards-Track\n
    \  protocol for the export and collection of flow data; using a common\n   format
    for storage and analysis at the collection side allows\n   implementors to use
    substantially the same information model and data\n   formatting implementation
    for transport as well as storage.\n"
  title: 4.  Motivation
- contents:
  - "5.  Requirements\n   In this section, we outline a proposed set of requirements\n
    \  [SAINT2007] for any persistent storage format for flow data.  First\n   and
    foremost, a flow data file format should support storage across\n   the continuum
    of time scales important to flow storage applications.\n   Each of the requirements
    enumerated in the sections below is broadly\n   applicable to flow storage applications,
    though each may be more\n   important at certain time scales.  For each, we first
    identify the\n   requirement, then explain how the IPFIX Message format addresses
    it,\n   or briefly outline the changes that must be made in order for an\n   IPFIX-based
    file format to meet the requirement.\n"
  - contents:
    - "5.1.  Record Format Flexibility\n   Due to the wide variety of flow attributes
      collected by different\n   network flow attribute measurement systems, the ideal
      flow storage\n   format will not impose a single data model or a specific record
      type\n   on the flows it stores.  The file format must be flexible and\n   extensible;
      that is, it must support the definition of multiple\n   record types within
      the file itself, and must be able to support new\n   field types for data within
      the records in a graceful way.\n   IPFIX provides record format flexibility
      through the use of Templates\n   to describe each Data Record, through the use
      of an IANA Registry to\n   define its Information Elements, and through the
      use of enterprise-\n   specific Information Elements.\n"
    title: 5.1.  Record Format Flexibility
  - contents:
    - "5.2.  Self-Description\n   Archived data may be read at a time in the future
      when any external\n   reference to the meaning of the data may be lost.  The
      ideal flow\n   storage format should be self-describing; that is, a process
      reading\n   flow data from storage should be able to properly interpret the\n
      \  stored flows without reference to anything other than standard\n   sources
      (e.g., the standards document describing the file format) and\n   the stored
      flow data itself.\n   The IPFIX Message format is partially self-describing;
      that is, IPFIX\n   Templates containing only IANA-assigned Information Elements
      can be\n   completely interpreted according to the IPFIX Information Model\n
      \  without additional external data.\n   However, Templates containing private
      information elements lack\n   detailed type and semantic information; a Collecting
      Process\n   receiving Data Records described by a Template containing enterprise-\n
      \  specific Information Elements it does not understand can only treat\n   the
      data contained within those Information Elements as octet arrays.\n   To be
      fully self-describing, enterprise-specific Information Elements\n   must be
      additionally described via IPFIX Options according to the\n   Information Element
      Type Options Template defined in [RFC5610].\n"
    title: 5.2.  Self-Description
  - contents:
    - "5.3.  Data Compression\n   Regardless of the representation format, flow data
      describing traffic\n   on real networks tends to be highly compressible.  Compression
      tends\n   to improve the scalability of flow collection systems, by reducing\n
      \  the disk storage and I/O bandwidth requirement for a given workload.\n   The
      ideal flow storage format should support applications that wish\n   to leverage
      this fact by supporting compression of stored data.\n   The IPFIX Message format
      has no support for data compression, as the\n   IPFIX protocol was designed
      for speed and simplicity of export.  Of\n   course, any flat file is readily
      compressible using a wide variety of\n   external data compression tools, formats,
      and algorithms; therefore,\n   this requirement can be met via encapsulation
      in one of these\n   formats.  Section 10 specifies an encapsulation based on
      bzip2 or\n   gzip, to maximize interoperability.\n   A few simple optimizations
      can be made by File Writers to increase\n   the integrity and usability of compressed
      IPFIX data; these are\n   outlined in Section 10.3.\n"
    title: 5.3.  Data Compression
  - contents:
    - "5.4.  Indexing and Searching\n   Binary, record-stream-oriented file formats
      natively support only one\n   form of searching: sequential scan in file order.
      \ By choosing the\n   order of records in a file carefully (e.g., by flow end
      time), a file\n   can be indexed by a single key.\n   Beyond this, properly
      addressing indexing is an application-specific\n   problem, as it inherently
      involves trade-offs between storage\n   complexity and retrieval speed, and
      requirements vary widely based on\n   time scales and the types of queries used
      from site to site.\n   However, a generic standard flow storage format may provide
      limited\n   direct support for indexing and searching.\n   The ideal flow storage
      format will support a limited table of\n   contents facility noting that the
      records in a file contain data\n   relating only to certain keys or values of
      keys, in order to keep\n   multi-file search implementations from having to
      scan a file for data\n   it does not contain.\n   The IPFIX Message format has
      no direct support for indexing.\n   However, the technique described in \"Reducing
      Redundancy in IP Flow\n   Information Export (IPFIX) and Packet Sampling (PSAMP)
      Reports\"\n   [RFC5473] can be used to describe the contents of a file in a
      limited\n   way.  Additionally, as flow data is often sorted and divided by
      time,\n   the start and end time of the flows in a file may be declared using\n
      \  the File Time Window Options Template defined in Section 8.1.2.\n"
    title: 5.4.  Indexing and Searching
  - contents:
    - "5.5.  Error Recovery\n   When storing flow data for archival purposes, it is
      important to\n   ensure that hardware or software faults do not introduce errors
      into\n   the data over time.  The ideal flow storage format will support the\n
      \  detection and correction of encoding-level errors in the data.\n   Note that
      more advanced error correction is best handled at a layer\n   below that addressed
      by this document.  Error correction is a topic\n   well addressed by the storage
      industry in general (e.g., by Redundant\n   Array of Independent Disks (RAID)
      and other technologies).  By\n   specifying a flow storage format based upon
      files, we can leverage\n   these features to meet this requirement.\n   However,
      the ideal flow storage format will be resilient against\n   errors, providing
      an internal facility for the detection of errors\n   and the ability to isolate
      errors to as few data records as possible.\n   Note that this requirement interacts
      with the choice of data\n   compression or encryption algorithm.  For example,
      the use of block\n   compression algorithms can serve to isolate errors to a
      single\n   compression block, unlike stream compressors, which may fail to\n
      \  resynchronize after a single bit error, invalidating the entire\n   message
      stream.\n   The IPFIX Message format does not support data integrity assurance.\n
      \  It is assumed that advanced error correction will be provided\n   externally.
      \ Compression and encryption, if used, provide some\n   allowance for detection,
      if not correction, of errors.  For simple\n   error detection support in the
      absence of compression or encryption,\n   checksums may be attached to messages
      via IPFIX Options according to\n   the Message Checksum Options Template defined
      in Section 8.1.1.\n"
    title: 5.5.  Error Recovery
  - contents:
    - "5.6.  Authentication, Confidentiality, and Integrity\n   Archival storage of
      flow data may also require assurance that no\n   unauthorized entity can read
      or modify the stored data.  Cryptography\n   can be applied to this problem
      to ensure integrity and\n   confidentiality by signing and encryption.\n   As
      with error correction, this problem has been addressed well at a\n   layer below
      that addressed by this document.  We can leverage the\n   fact that existing
      cryptographic technologies work quite well on data\n   stored in files to meet
      this requirement.\n   Beyond support for the use of Transport Layer Security
      (TLS) for\n   transport over TCP or Datagram Transport Layer Security (DTLS)
      for\n   transport over SCTP or UDP, both of which provide transient\n   authentication
      and confidentiality, the IPFIX protocol does not\n   support this requirement
      directly.  The IETF has specified the\n   Cryptographic Message Syntax (CMS)
      [RFC3852] for creating detached\n   signatures for integrity and authentication;
      Section 9 specifies a\n   CMS-based method for signing IPFIX Files.  Confidentiality
      protection\n   is assumed to be met by methods external to this specification,\n
      \  leveraging one of the many such technologies for encrypting files to\n   meet
      specific application and process requirements; however, notes on\n   improving
      archival integrity of encrypted IPFIX Files are given in\n   Section 9.2.\n"
    title: 5.6.  Authentication, Confidentiality, and Integrity
  - contents:
    - "5.7.  Anonymization and Obfuscation\n   To ensure the privacy of individuals
      and organizations at the\n   endpoints of communications represented by flow
      records, it is often\n   necessary to obfuscate or anonymize stored and exported
      flow data.\n   The ideal flow storage format will provide for a notation that
      a\n   given information element on a given record type represents\n   anonymized,
      rather than real, data.\n   The IPFIX protocol presently has no support for
      anonymization\n   notation.  It should be noted that anonymization is one of
      the\n   requirements given for IPFIX in [RFC3917].  The decision to qualify\n
      \  this requirement with 'MAY' and not 'MUST' in the requirements\n   document,
      and its subsequent lack of specification in the current\n   version of the IPFIX
      protocol, is due to the fact that anonymization\n   algorithms are still an
      open area of research, and that there\n   currently exist no standardized methods
      for anonymization.\n   No support is presently defined in [RFC5101] or this
      IPFIX-based File\n   format for anonymization, as anonymization notation is
      an area of\n   open work for the IPFIX Working Group.\n"
    title: 5.7.  Anonymization and Obfuscation
  - contents:
    - "5.8.  Session Auditability and Replayability\n   Certain use cases for archival
      flow storage require the storage of\n   collection infrastructure details alongside
      the data itself.  These\n   details include information about how and when data
      was received, and\n   where it was received from.  They are useful for auditing
      as well as\n   for the replaying received data for testing purposes.\n   The
      IPFIX protocol contains no direct support for auditability and\n   replayability,
      though the IPFIX Information Model does define various\n   Information Elements
      required to represent collection infrastructure\n   details.  These details
      may be stored in IPFIX Files using the Export\n   Session Details Options Template
      defined in Section 8.1.3, and the\n   Message Details Options Template defined
      in Section 8.1.4.\n"
    title: 5.8.  Session Auditability and Replayability
  - contents:
    - "5.9.  Performance Characteristics\n   The ideal standard flow storage format
      will not have a significant\n   negative impact on the performance of the application
      generating or\n   processing flow data stored in the format.  This is a non-functional\n
      \  requirement, but it is important to note that a standard that implies\n   a
      significant performance penalty is unlikely to be widely\n   implemented and
      adopted.\n   An examination of the IPFIX protocol would seem to suggest that\n
      \  implementations of it are not particularly prone to slowness; indeed,\n   a
      template-based data representation is more easily subject to\n   optimization
      for common cases than representations that embed\n   structural information
      directly in the data stream (e.g., XML).\n   However, a full analysis of the
      impact of using IPFIX Messages as a\n   basis for flow data storage on read/write
      performance will require\n   more implementation experience and performance
      measurement.\n"
    title: 5.9.  Performance Characteristics
  title: 5.  Requirements
- contents:
  - "6.  Applicability\n   This section describes the specific applicability of IPFIX
    Files to\n   various use cases.  IPFIX Files are particularly useful in a flow\n
    \  collection and processing infrastructure using IPFIX for flow export.\n   We
    explore the applicability and provide guidelines for using IPFIX\n   Files for
    the storage of flow data collected by IPFIX Collecting\n   Processes and NetFlow
    V9 collectors, the testing of IPFIX Collecting\n   Processes, and diagnostics
    of IPFIX Devices.\n"
  - contents:
    - "6.1.  Storage of IPFIX-Collected Flow Data\n   IPFIX Files can naturally be
      used to store flow data collected by an\n   IPFIX Collecting Process; indeed,
      this was one of the primary initial\n   motivations behind the file format described
      within this document.\n   Using IPFIX Files as such provides a single, standard,
      well-\n   understood encoding to be used for flow data on disk and on the wire,\n
      \  and allows IPFIX implementations to leverage substantially the same\n   code
      for flow export and flow storage.  In addition, the storage of\n   single Transport
      Sessions in IPFIX Files is particularly important\n   for network measurement
      research, allowing repeatability of\n   experiments by providing a format for
      the storage and exchange of\n   IPFIX flow trace data much as the libpcap [pcap]
      format is used for\n   experiments on packet trace data.\n"
    title: 6.1.  Storage of IPFIX-Collected Flow Data
  - contents:
    - "6.2.  Storage of NetFlow-V9-Collected Flow Data\n   Although the IPFIX protocol
      is based on the Cisco NetFlow Services,\n   Version 9 (NetFlow V9) protocol
      [RFC3954], the two have diverged\n   since work began on IPFIX.  However, since
      the NetFlow V9 information\n   model is a compatible subset of the IPFIX Information
      Model, it is\n   possible to use IPFIX Files to store collected NetFlow V9 flow
      data.\n   This approach may be particularly useful in multi-vendor, multi-\n
      \  protocol collection infrastructures using both NetFlow V9 and IPFIX\n   to
      export flow data.\n   The applicability of IPFIX Files to this use case is outlined
      in\n   Appendix B.\n"
    title: 6.2.  Storage of NetFlow-V9-Collected Flow Data
  - contents:
    - "6.3.  Testing IPFIX Collecting Processes\n   IPFIX Files can be used to store
      IPFIX Messages for the testing of\n   IPFIX Collecting Processes.  A variety
      of test cases may be stored in\n   IPFIX Files.  First, IPFIX data collected
      in real network\n   environments and stored in an IPFIX File can be used as
      input to\n   check the behavior of new or extended implementations of IPFIX\n
      \  Collectors.  Furthermore, IPFIX Files can be used to validate the\n   operation
      of a given IPFIX Collecting Process in a new environment,\n   i.e., to test
      with recorded IPFIX data from the target network before\n   installing the Collecting
      Process in the network.\n   The IPFIX File format can also be used to store
      artificial, non-\n   compliant reference messages for specific Collecting Process
      test\n   cases.  Examples for such test cases are sets of IPFIX records with\n
      \  undefined Information Elements, Data Records described by missing\n   Templates,
      or incorrectly framed Messages or Data Sets.\n   Representative error handling
      test cases are defined in [RFC5471].\n   Furthermore, fast replay of IPFIX Messages
      stored in a file can be\n   used for stress/load tests (e.g., high rate of incoming
      Data Records,\n   large Templates with high Information Element counts), as
      described\n   in [RFC5471].  The provisioning and use of a set of reference
      files\n   for testing simplifies the performance of tests and increases the\n
      \  comparability of test results.\n"
    title: 6.3.  Testing IPFIX Collecting Processes
  - contents:
    - "6.4.  IPFIX Device Diagnostics\n   As an IPFIX File can be used to store any
      collection of flows, the\n   format may also be used for dumping and storing
      various types of flow\n   data for IPFIX Device diagnostics (e.g., the open
      flow cache of a\n   Metering Process or the flow backlog of an Exporting or
      Collecting\n   Process at the time of a process reset or crash).  File-based
      storage\n   is preferable to remote transmission in such error-recovery\n   situations.\n"
    title: 6.4.  IPFIX Device Diagnostics
  title: 6.  Applicability
- contents:
  - "7.  Detailed File Format Specification\n   Any valid serialized IPFIX Message
    stream MUST be accepted by a File\n   Reader as a valid IPFIX File.  In this way,
    the filesystem is simply\n   treated as another IPFIX transport alongside SCTP,
    TCP, and UDP,\n   albeit a potentially high-latency transport, as the File Reader
    and\n   File Writer do not necessarily run at the same time.\n   This section
    specifies the detailed actions of File Readers and File\n   Writers in handling
    IPFIX Files, and further specifies actions of\n   File Writers in specific use
    cases.  Unless otherwise specified\n   herein, IPFIX File Writers MUST behave
    as IPFIX Exporting Processes,\n   and IPFIX File Readers MUST behave as IPFIX
    Collecting Processes,\n   where appropriate.\n"
  - contents:
    - "7.1.  File Reader Specification\n   An IPFIX File Reader MUST act as an IPFIX
      Collecting Process as\n   specified in [RFC5101], except as modified by this
      document.\n   An IPFIX File Reader MUST accept as valid any serialized IPFIX\n
      \  Message stream that would be considered valid by one or more of the\n   other
      defined IPFIX transport layers.  Practically, this means that\n   the union
      of IPFIX Template management features supported by SCTP,\n   TCP, and UDP MUST
      be supported in IPFIX Files.  File Readers MUST:\n   o  accept IPFIX Messages
      containing Template Sets, Options Template\n      Sets, and Data Sets within
      the same message, as with IPFIX over\n      TCP or UDP;\n   o  accept Template
      Sets that define Templates already defined within\n      the File, as may occur
      with retransmission of Templates when using\n      IPFIX over UDP as described
      in Section 10.3.6 of [RFC5101];\n   o  resolve any conflict between a resent
      definition and a previous\n      definition by assuming that the new Template
      replaces the old, as\n      consistent with Template expiration and ID reuse
      when using UDP at\n      the IPFIX transport protocol; and\n   o  accept Template
      Withdrawals as described in Section 8 of\n      [RFC5101], provided that the
      Template to be withdrawn is defined,\n      as is the case with IPFIX over TCP
      and SCTP.\n   Considering the filesystem-as-transport view, in the general case,
      an\n   IPFIX File SHOULD be treated as containing a single Transport Session\n
      \  as defined by [RFC5101].  However, some applications may benefit from\n   the
      ability to treat a collection of IPFIX Files as a single\n   Transport Session;
      see especially Section 7.3.3 below.  A File Reader\n   MAY be configurable to
      treat a collection of Files as a single\n   Transport Session.  However, a File
      Reader MUST NOT treat a single\n   IPFIX File as containing multiple Transport
      Sessions.\n   If an IPFIX File uses the technique described in [RFC5473] AND
      all of\n   the non-Options Templates in the File contain the commonPropertiesId\n
      \  Information Element, a File Reader MAY assume the set of\n   commonPropertiesId
      definitions provides a complete table of contents\n   for the File for searching
      purposes.\n"
    title: 7.1.  File Reader Specification
  - contents:
    - "7.2.  File Writer Specification\n   An IPFIX File Writer MUST act as an IPFIX
      Exporting Process as\n   specified in [RFC5101], except as modified by this
      document.  This\n   section contains specifications for IPFIX File Writers in
      all\n   situations; specifications and recommendations for specific File\n   Writer
      use cases are found in Section 7.3 below.\n   File Writers SHOULD store the
      Templates and Options required to\n   decode the data within the File itself,
      unless modified by the\n   requirements of a specific use case in a subsection
      of Section 7.3.\n   In this way, a single IPFIX File generally contains a single
      notional\n   Transport Session as defined by [RFC5101].\n   File Writers SHOULD
      emit each Template Set or Options Template Set to\n   appear in the File before
      any Data Set described by the Templates\n   within that Set, to ensure the File
      Reader can decode every Data Set\n   without waiting to process subsequent Templates
      or Options Templates.\n   File Writers SHOULD emit Data Records described by
      Options Templates\n   to appear in the File before any Data Records that depend
      on the\n   scopes defined by those options.\n   File Writers SHOULD use Template
      Withdrawals to withdraw Templates if\n   Template IDs need to be reused.  Template
      Withdrawals SHOULD NOT be\n   used unless it is necessary to reuse Template
      IDs.\n   File Writers SHOULD write IPFIX Messages within an IPFIX File in\n
      \  ascending Export Time order.\n   File Writers MAY write Data Records to an
      IPFIX File in any order.\n   However, File Writers that write flow records to
      an IPFIX File in\n   flowStartTime or flowEndTime order SHOULD be consistent
      in this\n   ordering within each File.\n"
    title: 7.2.  File Writer Specification
  - contents:
    - "7.3.  Specific File Writer Use Cases\n   The specifications in this section
      apply to specific situations.\n   Each section below extends or modifies the
      base File Writer\n   specification in Section 7.2.  Considerations for collocation
      of a\n   File Writer with IPFIX Collecting Processes and Metering Processes\n
      \  are given, as are specific guidelines for using IPFIX Files for\n   archival
      storage, or as documents.  Also covered are the use of IPFIX\n   Files in the
      testing and diagnostics of IPFIX Devices.\n"
    - contents:
      - "7.3.1.  Collocating a File Writer with a Collecting Process\n   When collocating
        a File Writer with an IPFIX Collecting Process for\n   archival storage of
        collected data in IPFIX Files as described in\n   Section 6.1, the following
        recommendations may improve the usefulness\n   of the stored data.\n   The
        simplest way for a File Writer to store the data collected in a\n   single
        Transport Session is to simply write the incoming IPFIX\n   Messages to an
        IPFIX File as they are collected.  This approach has\n   several drawbacks.
        \ First, if the original Exporting Process did not\n   conform to the recommendations
        in Section 7.2 with respect to\n   Template and Data Record ordering, the
        written file can be difficult\n   to use later; in this case, File Writers
        MAY reorder records as\n   received in order to ensure that Templates appear
        before the Data\n   Records they describe.\n   A File Writer collocated with
        a Collecting Process that starts\n   writing data from a running Transport
        Session SHOULD write all the\n   Templates currently active within that Transport
        Session before\n   writing any Data Records described by them.\n   Also, the
        resulting IPFIX Files will lack information about the IPFIX\n   Transport
        Session used to export them, such as the network addresses\n   of the Exporting
        and Collecting Processes and the protocols used to\n   transport them.  In
        this case, if information about the Transport\n   Session is required, the
        File Writer SHOULD store a single IPFIX\n   Transport Session in an IPFIX
        File and SHOULD record information\n   about the Transport Session using the
        Export Session Details Options\n   Template described in Section 8.1.3.\n
        \  Additional per-Message information MAY be recorded by the File Writer\n
        \  using the Message Details Options Template described in\n   Section 8.1.4.
        \ Per-Message information includes the time at which\n   each IPFIX Message
        was received at the Collecting Process, and can be\n   used to resend IPFIX
        Messages while keeping the original measurement\n   plane traffic profile.\n
        \  When collocating a File Writer with a Collecting Process, the Export\n
        \  Time of each Message SHOULD be the Export Time of the Message\n   received
        by the Collecting Process containing the first Data Record\n   in the Message.
        \ Note that File Writers storing IPFIX data collected\n   from an IPFIX Collecting
        Process using SCTP as the transport protocol\n   SHOULD interleave messages
        from multiple streams in order to preserve\n   Export Time order, and SHOULD
        reorder the written messages as\n   necessary to ensure that each Template
        Set or Options Template Set\n   appears in the File before any Data Set described
        by the Templates\n   within that Set.  Template reordering MUST preserve the
        sequence of\n   Template Sets with Template Withdrawals in order to ensure\n
        \  consistency of Templates.\n   Note that when adding additional information
        to IPFIX Messages\n   received from Collecting Processes (e.g., Message Checksum
        Options,\n   Message Detail Options), the File Writer SHOULD extend the length
        of\n   the Message for the additional data if possible; otherwise, the\n   Message
        SHOULD be split into two approximately equal-size Messages\n   aligned on
        a Data Set or Template Set boundary from the original\n   Message if possible;
        otherwise, the Message SHOULD be split into two\n   approximately equal-size
        Messages aligned on a Data Record boundary.\n   Note that, since the Maximum
        Segment Size (MSS) or MTU of most\n   network links (1500-9000 for common
        Ethernets) is smaller than the\n   maximum IPFIX Message size (65536) within
        an IPFIX File, it is\n   expected that message length extension will suffice
        in most\n   circumstances.\n   A File Writer collocated with a Collecting
        Process SHOULD NOT sign a\n   File as specified in Section 9.1 unless the
        Transport Session over\n   which the data was exported was protected via TLS
        or DTLS, and the\n   Collecting Process positively identified the Exporting
        Process by its\n   certificate.  See Section 12.2 for more information on
        this issue.\n"
      title: 7.3.1.  Collocating a File Writer with a Collecting Process
    - contents:
      - "7.3.2.  Collocating a File Writer with a Metering Process\n   Note that File
        Writers may also be collocated directly with IPFIX\n   Metering Processes,
        for writing measured information directly to disk\n   without intermediate
        IPFIX Exporting or Collecting Processes.  This\n   arrangement may be particularly
        useful when providing data to an\n   analysis environment with an IPFIX-File-based
        workflow, when testing\n   Metering Processes during development, or when
        the authentication of\n   a Metering Process is important.\n   When collocating
        a File Writer with a Metering Process, note that\n   Information Elements
        associated with Exporting or Collecting\n   Processes are meaningless, and
        SHOULD NOT appear in the Export\n   Session Details Options Template described
        in Section 8.1.3 or the\n   Message Details Options Template described in
        Section 8.1.4.\n   When collocating a File Writer with a Metering Process,
        the Export\n   Time of each Message SHOULD be the time at which the first
        Data\n   Record in the Message was received from the Metering Process.\n   Note
        that collocating a File Writer with a Metering Process is the\n   only way
        to provide positive authentication of a Metering Process\n   through signatures
        as in Section 9.1.  See Section 12.2 for more\n   information on this issue.\n"
      title: 7.3.2.  Collocating a File Writer with a Metering Process
    - contents:
      - "7.3.3.  Using IPFIX Files for Archival Storage\n   While in the general case
        File Writers should store one Transport\n   Session per IPFIX File, some applications
        storing large collections\n   of data over long periods of time may benefit
        from the ability to\n   treat a collection of IPFIX Files as a single Transport
        Session.  A\n   File Writer MAY be configurable to write data from a single
        Transport\n   Session into multiple IPFIX Files; however, File Writers supporting\n
        \  such a configuration option MUST provide a configuration option to\n   support
        one-file-per-session behavior for interoperability purposes.\n   File Writers
        using IPFIX Files for archival storage SHOULD support\n   compression as in
        Section 10.\n"
      title: 7.3.3.  Using IPFIX Files for Archival Storage
    - contents:
      - "7.3.4.  Using IPFIX Files as Documents\n   When IPFIX Files are used as documents,
        to store a set of flows\n   relevant to query, investigation, or other common
        context, or for the\n   publication of traffic datasets relevant to network
        research, each\n   File MUST be readable as a single Transport Session, self-contained\n
        \  aside from any detached signature as in Section 9.1, and making no\n   reference
        to metadata stored in separate Files, in order to ensure\n   interoperability.\n
        \  When writing Files to be used as documents, File Writers MAY emit the\n
        \  special Data Records described by Options Templates before any other\n
        \  Data Records in the File in the following order to ease the\n   inspection
        and use of documents by File Readers:\n   o  Time Window records described
        by the File Time Window Options\n      Template as defined in Section 8.1.2
        below; followed by:\n   o  Information Element Type Records as described in
        [RFC5610];\n      followed by\n   o  commonPropertiesId definitions as described
        in [RFC5473]; followed\n      by\n   o  Export Session details records described
        by the Export Session\n      Details Options Template as defined in Section
        8.1.3 below.\n   The Export Time of each Message within a File used as a document\n
        \  SHOULD be the time at which the Message was written by the File\n   Writer.\n
        \  If an IPFIX File used as a document uses the technique described in\n   [RFC5473]
        AND all of the non-Options Templates in the File contain\n   the commonPropertiesId
        Information Element, a File Reader MAY assume\n   the set of commonPropertiesId
        definitions provides a complete table\n   of contents for the File for searching
        purposes.\n"
      title: 7.3.4.  Using IPFIX Files as Documents
    - contents:
      - "7.3.5.  Using IPFIX Files for Testing\n   IPFIX Files can be used for testing
        IPFIX Collecting Processes in two\n   ways.  First, IPFIX Files can be used
        to store specific flow data for\n   regression and stress testing of Collectors;
        there are no special\n   considerations for IPFIX Files used in this way.\n
        \  Second, IPFIX Files are useful for storing reference messages that do\n
        \  not comply to the IPFIX protocol in order to test the error handling\n
        \  and recovery behavior of Collectors.  Of course, IPFIX Files intended\n
        \  to be used in this application necessarily MAY violate any of the\n   specifications
        in this document or in [RFC5101], and such Files MUST\n   NOT be transmitted
        to Collecting Processes or given as input to File\n   Readers not under test.\n
        \  Note that an extremely simple IPFIX Exporting Process may be crafted\n
        \  for testing purposes by simply reading an IPFIX File and transmitting\n
        \  it directly to a Collecting Process.  Similarly, an extremely simple\n
        \  Collecting Process may be crafted for testing purposes by simply\n   accepting
        connections and/or IPFIX Messages from Exporting Processes\n   and writing
        the session's message stream to an IPFIX File.\n"
      title: 7.3.5.  Using IPFIX Files for Testing
    - contents:
      - "7.3.6.  Writing IPFIX Files for Device Diagnostics\n   IPFIX Files can be
        used in the debugging of devices that use flow\n   data as internal state,
        as a common format for the representation of\n   flow tables.  In such situations,
        the opaqueOctets information\n   element can be used to store additional non-IPFIX
        encoded, non-flow\n   information (e.g., stack backtraces, process state,
        etc.) within the\n   IPFIX File as in Section 11.1; the IPFIX flow table information
        could\n   also be embedded in a larger proprietary diagnostic format using\n
        \  delimiters as in Section 11.2\n"
      title: 7.3.6.  Writing IPFIX Files for Device Diagnostics
    - contents:
      - "7.3.7.  IPFIX File Manipulation\n   For many applications, it may prove useful
        for implementations to\n   provide functionality for the manipulation of IPFIX
        Files; for\n   example, to select data from a File, to change the Templates
        used\n   within a File, or to split or join data in Files.  Any such utility\n
        \  should take special care to ensure that its output remains a valid\n   IPFIX
        File, specifically with respect to Templates and Options, which\n   are scoped
        to Transport Sessions.\n   Any operation that splits one File into multiple
        Files SHOULD write\n   all necessary Templates and Options to each resulting
        File, and\n   ensure that written Options are valid for each resulting File
        (e.g.,\n   the Time Window Options Template in Section 8.1.2).  Any operation\n
        \  that joins multiple Files into a single File should do the same,\n   additionally
        ensuring that Template IDs do not collide, through the\n   use of different
        Observation Domain IDs or Template ID rewriting.\n   Combining operations
        may also want to ensure any desired ordering of\n   flow records is maintained.\n"
      title: 7.3.7.  IPFIX File Manipulation
    title: 7.3.  Specific File Writer Use Cases
  - contents:
    - "7.4.  Media Type of IPFIX Files\n   The media type for IPFIX Files is application/ipfix.
      \ The\n   registration information [RFC4288] for this media type is given in\n
      \  the IANA Considerations section.\n"
    title: 7.4.  Media Type of IPFIX Files
  title: 7.  Detailed File Format Specification
- contents:
  - "8.  File Format Metadata Specification\n   This section defines the Options Templates
    used for IPFIX File\n   metadata, and the Information Elements they require.\n"
  - contents:
    - "8.1.  Recommended Options Templates for IPFIX Files\n   The following Options
      Templates allow IPFIX Message streams to meet\n   the requirements outlined
      above without extension to the message\n   format or protocol.  They are defined
      in terms of existing\n   Information Elements defined in [RFC5102], the Information
      Elements\n   defined in [RFC5610], as well as Information Elements defined in\n
      \  Section 8.2.  IPFIX File Readers and Writers SHOULD support these\n   Options
      Templates as defined below.\n   In addition, IPFIX File Readers and Writers
      SHOULD support the\n   Options Templates defined in [RFC5610] in order to support
      self-\n   description of enterprise-specific Information Elements.\n"
    - contents:
      - "8.1.1.  Message Checksum Options Template\n   The Message Checksum Options
        Template specifies the structure of a\n   Data Record for attaching an MD5
        message checksum to an IPFIX\n   Message.  An MD5 message checksum as described
        MAY be used if data\n   integrity is important to the application but file
        signing is not\n   available or desired.  The described Data Record MUST appear
        only\n   once per IPFIX Message, but MAY appear anywhere within the Message.\n
        \  This Options Template SHOULD contain the following Information\n   Elements:\n
        \  +--------------------+----------------------------------------------+\n
        \  | IE                 | Description                                  |\n
        \  +--------------------+----------------------------------------------+\n
        \  | messageScope       | A marker denoting this Option applies to the |\n
        \  | [scope]            | whole IPFIX Message; content is ignored.     |\n
        \  |                    | This Information Element MUST be defined as  |\n
        \  |                    | a Scope Field.                               |\n
        \  | messageMD5Checksum | The MD5 checksum of the containing IPFIX     |\n
        \  |                    | Message.                                     |\n
        \  +--------------------+----------------------------------------------+\n"
      title: 8.1.1.  Message Checksum Options Template
    - contents:
      - "8.1.2.  File Time Window Options Template\n   The File Time Window Options
        Template specifies the structure of a\n   Data Record for attaching a time
        window to an IPFIX File; this Data\n   Record is referred to as a time window
        record.  A time window record\n   defines the earliest flow start time and
        the latest flow end time of\n   the flow records within a File.  One and only
        one time window record\n   MAY appear within an IPFIX File if the time window
        information is\n   available; a File Writer MUST NOT write more than one time
        window\n   record to an IPFIX File.  A File Writer that writes a time window\n
        \  record to a File MUST NOT write any Flow with a start time before the\n
        \  beginning of the window or an end time after the end of the window to\n
        \  that File.\n   This Options Template SHOULD contain the following Information\n
        \  Elements:\n   +---------------+---------------------------------------------------+\n
        \  | IE            | Description                                       |\n
        \  +---------------+---------------------------------------------------+\n
        \  | sessionScope  | A marker denoting this Option applies to the      |\n
        \  | [scope]       | whole IPFIX Transport Session (i.e., the IPFIX    |\n
        \  |               | File in the common case); content is ignored.     |\n
        \  |               | This Information Element MUST be defined as a     |\n
        \  |               | Scope Field.                                      |\n
        \  | minFlowStart* | Exactly one of minFlowStartSeconds,               |\n
        \  |               | minFlowStartMilliseconds,                         |\n
        \  |               | minFlowStartMicroseconds, or                      |\n
        \  |               | minFlowStartNanoseconds SHOULD match the          |\n
        \  |               | precision of the accompanying maxFlowEnd*         |\n
        \  |               | Information Element.  The start time of the       |\n
        \  |               | earliest flow in the Transport Session (i.e.,     |\n
        \  |               | File).                                            |\n
        \  | maxFlowEnd*   | Exactly one of maxFlowEndSeconds,                 |\n
        \  |               | maxFlowEndMilliseconds, maxFlowEndMicroseconds,   |\n
        \  |               | or maxFlowEndNanoseconds SHOULD match the         |\n
        \  |               | precision of the accompanying minFlowStart*       |\n
        \  |               | Information Element.  The end time of the latest  |\n
        \  |               | flow in the Transport Session (i.e., File).       |\n
        \  +---------------+---------------------------------------------------+\n"
      title: 8.1.2.  File Time Window Options Template
    - contents:
      - "8.1.3.  Export Session Details Options Template\n   The Export Session Details
        Options Template specifies the structure\n   of a Data Record for recording
        the details of an IPFIX Transport\n   Session in an IPFIX File.  It is intended
        for use in storing a single\n   complete IPFIX Transport Session in a single
        IPFIX File.  The\n   described Data Record SHOULD appear only once in a given
        IPFIX File.\n   This Options Template SHOULD contain at least the following\n
        \  Information Elements, subject to applicability as noted on each\n   Information
        Element:\n   +----------------------------+--------------------------------------+\n
        \  | IE                         | Description                          |\n
        \  +----------------------------+--------------------------------------+\n
        \  | sessionScope [scope]       | A marker denoting this Option        |\n
        \  |                            | applies to the whole IPFIX Transport |\n
        \  |                            | Session (i.e., the IPFIX File in the |\n
        \  |                            | common case); content is ignored.    |\n
        \  |                            | This Information Element MUST be     |\n
        \  |                            | defined as a Scope Field.            |\n
        \  | exporterIPv4Address        | IPv4 address of the IPFIX Exporting  |\n
        \  |                            | Process from which the Messages in   |\n
        \  |                            | this Transport Session were          |\n
        \  |                            | received.  Present only for          |\n
        \  |                            | Exporting Processes with an IPv4     |\n
        \  |                            | interface.  For multi-homed SCTP     |\n
        \  |                            | associations, this SHOULD be the     |\n
        \  |                            | primary path endpoint address of the |\n
        \  |                            | Exporting Process.                   |\n
        \  | exporterIPv6Address        | IPv6 address of the IPFIX Exporting  |\n
        \  |                            | Process from which the Messages in   |\n
        \  |                            | this Transport Session were          |\n
        \  |                            | received.  Present only for          |\n
        \  |                            | Exporting Processes with an IPv6     |\n
        \  |                            | interface.  For multi-homed SCTP     |\n
        \  |                            | associations, this SHOULD be the     |\n
        \  |                            | primary path endpoint address of the |\n
        \  |                            | Exporting Process.                   |\n
        \  | exporterTransportPort      | The source port from which the       |\n
        \  |                            | Messages in this Transport Session   |\n
        \  |                            | were received.                       |\n
        \  | exporterCertificate        | The certificate used by the IPFIX    |\n
        \  |                            | Exporting Process from which the     |\n
        \  |                            | Messages in this Transport Session   |\n
        \  |                            | were received.  Present only for     |\n
        \  |                            | Transport Sessions protected by TLS  |\n
        \  |                            | or DTLS.                             |\n
        \  | collectorIPv4Address       | IPv4 address of the IPFIX Collecting |\n
        \  |                            | Process that received the Messages   |\n
        \  |                            | in this Transport Session.  Present  |\n
        \  |                            | only for Collecting Processes with   |\n
        \  |                            | an IPv4 interface.  For multi-homed  |\n
        \  |                            | SCTP associations, this SHOULD be    |\n
        \  |                            | the primary path endpoint address of |\n
        \  |                            | the Collecting Process.              |\n
        \  | collectorIPv6Address       | IPv6 address of the IPFIX Collecting |\n
        \  |                            | Process that received the Messages   |\n
        \  |                            | in this Transport Session.  Present  |\n
        \  |                            | only for Collecting Processes with   |\n
        \  |                            | an IPv6 interface.  For multi-homed  |\n
        \  |                            | SCTP associations, this SHOULD be    |\n
        \  |                            | the primary path endpoint address of |\n
        \  |                            | the Collecting Process.              |\n
        \  | collectorTransportPort     | The destination port on which the    |\n
        \  |                            | Messages in this Transport Session   |\n
        \  |                            | were received.                       |\n
        \  | collectorTransportProtocol | The IP Protocol Identifier of the    |\n
        \  |                            | transport protocol used to transport |\n
        \  |                            | Messages within this Transport       |\n
        \  |                            | Session.                             |\n
        \  | collectorProtocolVersion   | The version of the export protocol   |\n
        \  |                            | used to transport Messages within    |\n
        \  |                            | this Transport Session.  Applicable  |\n
        \  |                            | only in mixed NetFlow V9-IPFIX       |\n
        \  |                            | collection environments when storing |\n
        \  |                            | NetFlow V9 data in IPFIX Messages,   |\n
        \  |                            | as in Appendix B.                    |\n
        \  | collectorCertificate       | The certificate used by the IPFIX    |\n
        \  |                            | Collecting Process that received the |\n
        \  |                            | Messages in this Transport Session.  |\n
        \  |                            | Present only for Transport Sessions  |\n
        \  |                            | protected by TLS or DTLS.            |\n
        \  | minExportSeconds           | The Export Time of the first Message |\n
        \  |                            | in the Transport Session.            |\n
        \  | maxExportSeconds           | The Export Time of the last Message  |\n
        \  |                            | in the Transport Session.            |\n
        \  +----------------------------+--------------------------------------+\n"
      title: 8.1.3.  Export Session Details Options Template
    - contents:
      - "8.1.4.  Message Details Options Template\n   The Message Details Options
        Template specifies the structure of a\n   Data Record for attaching additional
        export details to an IPFIX\n   Message.  These details include the time at
        which a message was\n   received and information about the export and collection\n
        \  infrastructure used to transport the Message.  This Options Template\n
        \  also allows the storage of the export session metadata provided the\n   Export
        Session Details Options Template, for storing information from\n   multiple
        Transport Sessions in the same IPFIX File.\n   This Options Template SHOULD
        contain at least the following\n   Information Elements, subject to applicability
        as noted for each\n   Information Element.  Note that when used in conjunction
        with the\n   Export Session Details Options Template, when storing a single\n
        \  complete IPFIX Transport Session in an IPFIX File, this Options\n   Template
        SHOULD contain only the messageScope and\n   collectionTimeMilliseconds Information
        Elements, and the\n   exportSctpStreamId Information Element for Messages
        transported via\n   SCTP.\n   +----------------------------+--------------------------------------+\n
        \  | IE                         | Description                          |\n
        \  +----------------------------+--------------------------------------+\n
        \  | messageScope [scope]       | A marker denoting this Option        |\n
        \  |                            | applies to the whole IPFIX message;  |\n
        \  |                            | content is ignored.  This            |\n
        \  |                            | Information Element MUST be defined  |\n
        \  |                            | as a Scope Field.                    |\n
        \  | collectionTimeMilliseconds | The absolute time at which this      |\n
        \  |                            | Message was received by the IPFIX    |\n
        \  |                            | Collecting Process.                  |\n
        \  | exporterIPv4Address        | IPv4 address of the IPFIX Exporting  |\n
        \  |                            | Process from which this Message was  |\n
        \  |                            | received.  Present only for          |\n
        \  |                            | Exporting Processes with an IPv4     |\n
        \  |                            | interface, and if this information   |\n
        \  |                            | is not available via the Export      |\n
        \  |                            | Session Details Options Template.    |\n
        \  |                            | For multi-homed SCTP associations,   |\n
        \  |                            | this SHOULD be the primary path      |\n
        \  |                            | endpoint address of the Exporting    |\n
        \  |                            | Process.                             |\n
        \  | exporterIPv6Address        | IPv6 address of the IPFIX Exporting  |\n
        \  |                            | Process from which this Message was  |\n
        \  |                            | received.  Present only for          |\n
        \  |                            | Exporting Processes with an IPv6     |\n
        \  |                            | interface and if this information is |\n
        \  |                            | not available via the Export Session |\n
        \  |                            | Details Options Template.  For       |\n
        \  |                            | multi-homed SCTP associations, this  |\n
        \  |                            | SHOULD be the primary path endpoint  |\n
        \  |                            | address of the Exporting Process.    |\n
        \  | exporterTransportPort      | The source port from which this      |\n
        \  |                            | Message was received.  Present only  |\n
        \  |                            | if this information is not available |\n
        \  |                            | via the Export Session Details       |\n
        \  |                            | Options Template.                    |\n
        \  | exporterCertificate        | The certificate used by the IPFIX    |\n
        \  |                            | Exporting Process from which this    |\n
        \  |                            | Message was received.  Present only  |\n
        \  |                            | for Transport Sessions protected by  |\n
        \  |                            | TLS or DTLS.                         |\n
        \  | collectorIPv4Address       | IPv4 address of the IPFIX Collecting |\n
        \  |                            | Process that received this Message.  |\n
        \  |                            | Present only for Collecting          |\n
        \  |                            | Processes with an IPv4 interface,    |\n
        \  |                            | and if this information is not       |\n
        \  |                            | available via the Export Session     |\n
        \  |                            | Details Options Template.  For       |\n
        \  |                            | multi-homed SCTP associations, this  |\n
        \  |                            | SHOULD be the primary path endpoint  |\n
        \  |                            | address of the Collecting Process.   |\n
        \  | collectorIPv6Address       | IPv6 address of the IPFIX Collecting |\n
        \  |                            | Process that received this Message.  |\n
        \  |                            | Present only for Collecting          |\n
        \  |                            | Processes with an IPv6 interface,    |\n
        \  |                            | and if this information is not       |\n
        \  |                            | available via the Export Session     |\n
        \  |                            | Details Options Template.  For       |\n
        \  |                            | multi-homed SCTP associations, this  |\n
        \  |                            | SHOULD be the primary path endpoint  |\n
        \  |                            | address of the Collecting Process.   |\n
        \  | collectorTransportPort     | The destination port on which this   |\n
        \  |                            | Message was received.  Present only  |\n
        \  |                            | if this information is not available |\n
        \  |                            | via the Export Session Details       |\n
        \  |                            | Options Template.                    |\n
        \  | collectorTransportProtocol | The IP Protocol Identifier of the    |\n
        \  |                            | transport protocol used to transport |\n
        \  |                            | this Message.  Present only if this  |\n
        \  |                            | information is not available via the |\n
        \  |                            | Export Session Details Options       |\n
        \  |                            | Template.                            |\n
        \  | collectorProtocolVersion   | The version of the export protocol   |\n
        \  |                            | used to transport this Message.      |\n
        \  |                            | Present only if necessary and if     |\n
        \  |                            | this information is not available    |\n
        \  |                            | via the Export Session Details       |\n
        \  |                            | Options Template.                    |\n
        \  | collectorCertificate       | The certificate used by the IPFIX    |\n
        \  |                            | Collecting Process that received     |\n
        \  |                            | this Message.  Present only for      |\n
        \  |                            | Transport Sessions protected by TLS  |\n
        \  |                            | or DTLS.                             |\n
        \  | exportSctpStreamId         | The SCTP stream used to transport    |\n
        \  |                            | this Message.  Present only if the   |\n
        \  |                            | Message was transported via SCTP.    |\n
        \  +----------------------------+--------------------------------------+\n"
      title: 8.1.4.  Message Details Options Template
    title: 8.1.  Recommended Options Templates for IPFIX Files
  - contents:
    - "8.2.  Recommended Information Elements for IPFIX Files\n   The following Information
      Elements are used by the Options Templates\n   in Section 8.1 to allow IPFIX
      Message streams to meet the\n   requirements outlined above without extension
      of the protocol.  IPFIX\n   File Readers and Writers SHOULD support these Information
      Elements as\n   defined below.\n   In addition, IPFIX File Readers and Writers
      SHOULD support the\n   Information Elements defined in [RFC5610] in order to
      support full\n   self-description of Information Elements.\n"
    - contents:
      - "8.2.1.  collectionTimeMilliseconds\n   Description:   The absolute timestamp
        at which the data within the\n      scope containing this Information Element
        was received by a\n      Collecting Process.  This Information Element SHOULD
        be bound to\n      its containing IPFIX Message via IPFIX Options and the\n
        \     messageScope Information Element, as defined below.\n   Abstract Data
        Type:   dateTimeMilliseconds\n   ElementId:   258\n   Status:   current\n"
      title: 8.2.1.  collectionTimeMilliseconds
    - contents:
      - "8.2.2.  collectorCertificate\n   Description:   The full X.509 certificate,
        encoded in ASN.1 DER\n      format, used by the Collector when IPFIX Messages
        were transmitted\n      using TLS or DTLS.  This Information Element SHOULD
        be bound to\n      its containing IPFIX Transport Session via an options record
        and\n      the sessionScope Information Element, or to its containing IPFIX\n
        \     Message via an options record and the messageScope Information\n      Element.\n
        \  Abstract Data Type:   octetArray\n   ElementId:   274\n   Status:   current\n"
      title: 8.2.2.  collectorCertificate
    - contents:
      - "8.2.3.  exporterCertificate\n   Description:   The full X.509 certificate,
        encoded in ASN.1 DER\n      format, used by the Collector when IPFIX Messages
        were transmitted\n      using TLS or DTLS.  This Information Element SHOULD
        be bound to\n      its containing IPFIX Transport Session via an options record
        and\n      the sessionScope Information Element, or to its containing IPFIX\n
        \     Message via an options record and the messageScope Information\n      Element.\n
        \  Abstract Data Type:   octetArray\n   ElementId:   275\n   Status:   current\n"
      title: 8.2.3.  exporterCertificate
    - contents:
      - "8.2.4.  exportSctpStreamId\n   Description:   The value of the SCTP Stream
        Identifier used by the\n      Exporting Process for exporting IPFIX Message
        data.  This is\n      carried in the Stream Identifier field of the header
        of the SCTP\n      DATA chunk containing the IPFIX Message(s).\n   Abstract
        Data Type:   unsigned16\n   Data Type Semantics:   identifier\n   ElementId:
        \  259\n   Status:   current\n"
      title: 8.2.4.  exportSctpStreamId
    - contents:
      - "8.2.5.  maxExportSeconds\n   Description:   The absolute Export Time of the
        latest IPFIX Message\n      within the scope containing this Information Element.
        \ This\n      Information Element SHOULD be bound to its containing IPFIX\n
        \     Transport Session via IPFIX Options and the sessionScope\n      Information
        Element.\n   Abstract Data Type:   dateTimeSeconds\n   ElementId:   260\n
        \  Status:   current\n   Units:   seconds\n"
      title: 8.2.5.  maxExportSeconds
    - contents:
      - "8.2.6.  maxFlowEndMicroseconds\n   Description:   The latest absolute timestamp
        of the last packet\n      within any Flow within the scope containing this
        Information\n      Element, rounded up to the microsecond if necessary.  This\n
        \     Information Element SHOULD be bound to its containing IPFIX\n      Transport
        Session via IPFIX Options and the sessionScope\n      Information Element.
        \ This Information Element SHOULD be used only\n      in Transport Sessions
        containing Flow Records with microsecond-\n      precision (or better) timestamp
        Information Elements.\n   Abstract Data Type:   dateTimeMicroseconds\n   ElementId:
        \  268\n   Status:   current\n   Units:   microseconds\n"
      title: 8.2.6.  maxFlowEndMicroseconds
    - contents:
      - "8.2.7.  maxFlowEndMilliseconds\n   Description:   The latest absolute timestamp
        of the last packet\n      within any Flow within the scope containing this
        Information\n      Element, rounded up to the millisecond if necessary.  This\n
        \     Information Element SHOULD be bound to its containing IPFIX\n      Transport
        Session via IPFIX Options and the sessionScope\n      Information Element.
        \ This Information Element SHOULD be used only\n      in Transport Sessions
        containing Flow Records with millisecond-\n      precision (or better) timestamp
        Information Elements.\n   Abstract Data Type:   dateTimeMilliseconds\n   ElementId:
        \  269\n   Status:   current\n   Units:   milliseconds\n"
      title: 8.2.7.  maxFlowEndMilliseconds
    - contents:
      - "8.2.8.  maxFlowEndNanoseconds\n   Description:   The latest absolute timestamp
        of the last packet\n      within any Flow within the scope containing this
        Information\n      Element.  This Information Element SHOULD be bound to its\n
        \     containing IPFIX Transport Session via IPFIX Options and the\n      sessionScope
        Information Element.  This Information Element SHOULD\n      be used only
        in Transport Sessions containing Flow Records with\n      nanosecond-precision
        timestamp Information Elements.\n   Abstract Data Type:   dateTimeNanoseconds\n
        \  ElementId:   270\n   Status:   current\n   Units:   nanoseconds\n"
      title: 8.2.8.  maxFlowEndNanoseconds
    - contents:
      - "8.2.9.  maxFlowEndSeconds\n   Description:   The latest absolute timestamp
        of the last packet\n      within any Flow within the scope containing this
        Information\n      Element, rounded up to the second if necessary.  This Information\n
        \     Element SHOULD be bound to its containing IPFIX Transport Session\n
        \     via IPFIX Options and the sessionScope Information Element.\n   Abstract
        Data Type:   dateTimeSeconds\n   ElementId:   261\n   Status:   current\n
        \  Units:   seconds\n"
      title: 8.2.9.  maxFlowEndSeconds
    - contents:
      - "8.2.10.  messageMD5Checksum\n   Description:   The MD5 checksum of the IPFIX
        Message containing this\n      record.  This Information Element SHOULD be
        bound to its\n      containing IPFIX Message via an options record and the\n
        \     messageScope Information Element, as defined below, and SHOULD\n      appear
        only once in a given IPFIX Message.  To calculate the value\n      of this
        Information Element, first buffer the containing IPFIX\n      Message, setting
        the value of this Information Element to all\n      zeroes.  Then calculate
        the MD5 checksum of the resulting buffer\n      as defined in [RFC1321], place
        the resulting value in this\n      Information Element, and export the buffered
        message.  This\n      Information Element is intended as a simple checksum
        only;\n      therefore collision resistance and algorithm agility are not\n
        \     required, and MD5 is an appropriate message digest.\n   Abstract Data
        Type:   octetArray (16 bytes)\n   ElementId:   262\n   Status:   current\n
        \  Reference:   RFC 1321, The MD5 Message-Digest Algorithm [RFC1321]\n"
      title: 8.2.10.  messageMD5Checksum
    - contents:
      - "8.2.11.  messageScope\n   Description:   The presence of this Information
        Element as scope in\n      an Options Template signifies that the options
        described by the\n      Template apply to the IPFIX Message that contains
        them.  It is\n      defined for general purpose message scoping of options,
        and\n      proposed specifically to allow the attachment of checksum and\n
        \     collection information to a message via IPFIX Options.  The value\n
        \     of this Information Element MUST be written as 0 by the File\n      Writer
        or Exporting Process.  The value of this Information\n      Element MUST be
        ignored by the File Reader or the Collecting\n      Process.\n   Abstract
        Data Type:   unsigned8\n   ElementId:   263\n   Status:   current\n"
      title: 8.2.11.  messageScope
    - contents:
      - "8.2.12.  minExportSeconds\n   Description:   The absolute Export Time of
        the earliest IPFIX Message\n      within the scope containing this Information
        Element.  This\n      Information Element SHOULD be bound to its containing
        IPFIX\n      Transport Session via an options record and the sessionScope\n
        \     Information Element.\n   Abstract Data Type:   dateTimeSeconds\n   ElementId:
        \  264\n   Status:   current\n   Units:   seconds\n"
      title: 8.2.12.  minExportSeconds
    - contents:
      - "8.2.13.  minFlowStartMicroseconds\n   Description:   The earliest absolute
        timestamp of the first packet\n      within any Flow within the scope containing
        this Information\n      Element, rounded down to the microsecond if necessary.
        \ This\n      Information Element SHOULD be bound to its containing IPFIX\n
        \     Transport Session via an options record and the sessionScope\n      Information
        Element.  This Information Element SHOULD be used only\n      in Transport
        Sessions containing Flow Records with microsecond-\n      precision (or better)
        timestamp Information Elements.\n   Abstract Data Type:   dateTimeMicroseconds\n
        \  ElementId:   271\n   Status:   current\n   Units:   microseconds\n"
      title: 8.2.13.  minFlowStartMicroseconds
    - contents:
      - "8.2.14.  minFlowStartMilliseconds\n   Description:   The earliest absolute
        timestamp of the first packet\n      within any Flow within the scope containing
        this Information\n      Element, rounded down to the millisecond if necessary.
        \ This\n      Information Element SHOULD be bound to its containing IPFIX\n
        \     Transport Session via an options record and the sessionScope\n      Information
        Element.  This Information Element SHOULD be used only\n      in Transport
        Sessions containing Flow Records with millisecond-\n      precision (or better)
        timestamp Information Elements.\n   Abstract Data Type:   dateTimeMilliseconds\n
        \  ElementId:   272\n   Status:   current\n   Units:   milliseconds\n"
      title: 8.2.14.  minFlowStartMilliseconds
    - contents:
      - "8.2.15.  minFlowStartNanoseconds\n   Description:   The earliest absolute
        timestamp of the first packet\n      within any Flow within the scope containing
        this Information\n      Element.  This Information Element SHOULD be bound
        to its\n      containing IPFIX Transport Session via an options record and
        the\n      sessionScope Information Element.  This Information Element SHOULD\n
        \     be used only in Transport Sessions containing Flow Records with\n      nanosecond-precision
        timestamp Information Elements.\n   Abstract Data Type:   dateTimeNanoseconds\n
        \  ElementId:   273\n   Status:   current\n   Units:   nanoseconds\n"
      title: 8.2.15.  minFlowStartNanoseconds
    - contents:
      - "8.2.16.  minFlowStartSeconds\n   Description:   The earliest absolute timestamp
        of the first packet\n      within any Flow within the scope containing this
        Information\n      Element, rounded down to the second if necessary.  This\n
        \     Information Element SHOULD be bound to its containing IPFIX\n      Transport
        Session via an options record and the sessionScope\n      Information Element.\n
        \  Abstract Data Type:   dateTimeSeconds\n   ElementId:   265\n   Status:
        \  current\n   Units:   seconds\n"
      title: 8.2.16.  minFlowStartSeconds
    - contents:
      - "8.2.17.  opaqueOctets\n   Description:   This Information Element is used
        to encapsulate non-\n      IPFIX data into an IPFIX Message stream, for the
        purpose of\n      allowing a non-IPFIX data processor to store a data stream
        inline\n      within an IPFIX File.  A Collecting Process or File Writer MUST\n
        \     NOT try to interpret this binary data.  This Information Element\n      differs
        from paddingOctets as its contents are meaningful in some\n      non-IPFIX
        context, while the contents of paddingOctets MUST be\n      0x00 and are intended
        only for Information Element alignment.\n   Abstract Data Type:   octetArray\n
        \  ElementId:   266\n   Status:   current\n"
      title: 8.2.17.  opaqueOctets
    - contents:
      - "8.2.18.  sessionScope\n   Description:   The presence of this Information
        Element as scope in\n      an Options Template signifies that the options
        described by the\n      Template apply to the IPFIX Transport Session that
        contains them.\n      Note that as all options are implicitly scoped to Transport\n
        \     Session and Observation Domain, this Information Element is\n      equivalent
        to a \"null\" scope.  It is defined for general purpose\n      session scoping
        of options, and proposed specifically to allow the\n      attachment of time
        window and collection information to an IPFIX\n      File via IPFIX Options.
        \ The value of this Information Element\n      MUST be written as 0 by the
        File Writer or Exporting Process.  The\n      value of this Information Element
        MUST be ignored by the File\n      Reader or the Collecting Process.\n   Abstract
        Data Type:   unsigned8\n   ElementId:   267\n   Status:   current\n"
      title: 8.2.18.  sessionScope
    title: 8.2.  Recommended Information Elements for IPFIX Files
  title: 8.  File Format Metadata Specification
- contents:
  - "9.  Signing and Encryption of IPFIX Files\n   In order to ensure the integrity
    of IPFIX Files and the identity of\n   IPFIX File Writers, File Writers and File
    Readers SHOULD provide for\n   an interoperable and easily implemented method
    for signing IPFIX\n   Files, and verifying those signatures.  This section specifies
    method\n   via CMS detached signatures.\n   Note that while CMS specifies an encapsulation
    format that can be\n   used for encryption as well as signing, no method is specified
    for\n   encapsulation for confidentiality protection.  It is assumed that\n   application-specific
    or process-specific requirements outweigh the\n   need for interoperability for
    encrypted files.\n"
  - contents:
    - "9.1.  CMS Detached Signatures\n   The Cryptographic Message Syntax (CMS) [RFC3852]
      defines an\n   encapsulation syntax for data protection, used to digitally sign,\n
      \  authenticate, or encrypt arbitrary message content.  CMS can also be\n   used
      to create detached signatures, in which the signature is stored\n   in a separate
      file.  This arrangement maximizes interoperability, as\n   File Readers that
      are not aware of CMS detached signatures and have\n   no requirement for them
      can simply ignore them; the content of the\n   IPFIX File itself is unchanged
      by the signature.\n   The detached signature file for an IPFIX File SHOULD be
      stored,\n   transported, or otherwise made available (e.g., by FTP or HTTP)\n
      \  alongside the signed IPFIX File, with the same filename as the IPFIX\n   File,
      except that the file extension \".p7s\" is added to the end,\n   conforming
      to the naming convention in [RFC3851].\n   Within the detached signature, the
      CMS ContentInfo type MUST always\n   be present, and it MUST encapsulate the
      CMS SignedData content type,\n   which in turn MUST NOT encapsulate the signed
      IPFIX File content.\n   The CMS detached signature is summarized as follows:\n
      \  ContentInfo {\n     contentType          id-signedData, -- (1.2.840.113549.1.7.2)\n
      \    content              SignedData\n   }\n   SignedData {\n     version              CMSVersion,
      -- Always set to 3\n     digestAlgorithms     DigestAlgorithmIdentifiers,\n
      \    encapContentInfo     EncapsulatedContentInfo,\n     certificates         CertificateSet,
      -- File Writer certificate(s)\n     crls                 CertificateRevocationLists,
      -- Optional\n     signerInfos          SET OF SignerInfo -- Only one signer\n
      \  }\n   SignerInfo {\n     version              CMSVersion, -- Always set to
      3\n     sid                  SignerIdentifier,\n     digestAlgorithm      DigestAlgorithmIdentifier,\n
      \    signedAttrs          SignedAttributes,\n     signatureAlgorithm   SignatureAlgorithmIdentifier,\n
      \    signature            SignatureValue,\n     unsignedAttrs        UnsignedAttributes\n
      \  }\n   EncapsulatedContentInfo {\n     eContentType         id-data, -- (1.2.840.113549.1.7.1)\n
      \    eContent             OCTET STRING  -- Always absent\n   }\n   The details
      of the contents of each CMS encapsulation are detailed in\n   the subsections
      below.\n"
    - contents:
      - "9.1.1.  ContentInfo\n   [RFC3852] requires the outer-most encapsulation to
        be ContentInfo;\n   the fields of ContentInfo are as follows:\n   contentType:
        \ the type of the associated content.  For the detached\n      signature file,
        the encapsulated type is always SignedData, so the\n      id-signedData (1.2.840.113549.1.7.2)
        object identifier MUST be\n      present in this field.\n   content:  a SignedData
        content, detailed in Section 9.1.2.\n"
      title: 9.1.1.  ContentInfo
    - contents:
      - "9.1.2.  SignedData\n   The SignedData content type contains the signature
        of the IPFIX File\n   and information to aid in validation; the fields of
        SignedData are as\n   follows:\n   version:  MUST be 3.\n   digestAlgorithms:
        \ a collection of one-way hash function identifiers.\n      It MUST contain
        the identifier used by the File Writer to generate\n      the digital signature.\n
        \  encapContentInfo:  the signed content, including a content type\n      identifier.
        \ Since a detached signature is being created, it does\n      not encapsulate
        the IPFIX File.  The EncapsulatedContentInfo is\n      detailed in Section
        9.1.4.\n   certificates:  a collection of certificates.  It SHOULD include
        the\n      X.509 certificate needed to validate the digital signature file.\n
        \     Certification Authority (CA) and File Writer certificates MUST\n      conform
        to the certificate profile specified in [RFC5280].\n   crls:  an optional
        collection of certificate revocation lists (CRLs).\n      It SHOULD NOT contain
        any CRLs; any CRLs that are present MUST\n      conform to the certificate
        profile specified in [RFC5280].\n   signerInfos:  a collection of per-signer
        information; this identifies\n      the File Writer.  More than one SignerInfo
        MAY appear to\n      facilitate transitions between keys or algorithms.  The
        SignerInfo\n      type is detailed in Section 9.1.3.\n"
      title: 9.1.2.  SignedData
    - contents:
      - "9.1.3.  SignerInfo\n   The SignerInfo type identifies the File Writer; the
        fields of\n   SignerInfo are as follows:\n   version:  MUST be 3.\n   sid:
        \ identifies the File Writer's public key.  This identifier MUST\n      match
        the value included in the subjectKeyIdentifier certificate\n      extension
        on the File Writer's X.509 certificate.\n   digestAlgorithm:  identifies the
        one-way hash function and associated\n      parameters used to generate the
        signature.\n   signedAttrs:  an optional set of attributes that are signed
        along\n      with the content.\n   digestAlgorithm:  identifies the digital
        signature algorithm and\n      associated parameters used to generate the
        signature.\n   signature:  the digital signature of the associated file.\n
        \  unsignedAttrs:  an optional set of attributes that are not signed.\n"
      title: 9.1.3.  SignerInfo
    - contents:
      - "9.1.4.  EncapsulatedContentInfo\n   The EncapsulatedContentInfo structure
        contains a content type\n   identifier.  Since a detached signature is being
        created, it does not\n   encapsulate the IPFIX File.  The fields of EncapsulatedContentInfo\n
        \  are as follows:\n   eContentType:  an object identifier that uniquely specifies
        the\n      content type.  The content type associated with IPFIX File MUST
        be\n      id-data (1.2.840.113549.1.7.1).\n   eContent:  an optional field
        containing the signed content.  Since\n      this is a detached signature,
        eContent MUST be absent.\n"
      title: 9.1.4.  EncapsulatedContentInfo
    title: 9.1.  CMS Detached Signatures
  - contents:
    - "9.2.  Encryption Error Resilience\n   Note that single bit errors in the encrypted
      data stream can result\n   in larger errors in the decrypted stream, depending
      on the encryption\n   scheme used.\n   In applications (e.g., archival storage)
      in which error resilience is\n   very important, File Writers SHOULD use an
      encryption scheme that can\n   resynchronize after bit errors.  A common example
      is a block cipher\n   in CBC (Cipher Block Chaining) mode.  In this case, File
      Writers MAY\n   also use the Message Checksum Options Template to attach a checksum\n
      \  to each IPFIX Message in the IPFIX File, in order to support the\n   recognition
      of errors in the decrypted data.\n"
    title: 9.2.  Encryption Error Resilience
  title: 9.  Signing and Encryption of IPFIX Files
- contents:
  - "10.  Compression of IPFIX Files\n   Network traffic measurement data is generally
    highly compressible.\n   IPFIX Templates tend to increase the information content
    per record\n   by not requiring the export of irrelevant or non-present fields
    in\n   records, and the technique described in [RFC5473] also reduces the\n   export
    of redundant information.  However, even with these\n   techniques, generalized
    compression can decrease storage requirements\n   significantly; therefore, IPFIX
    File Writers and File Readers SHOULD\n   support compression as described in this
    section.\n"
  - contents:
    - "10.1.  Supported Compression Formats\n   IPFIX Files support two compression
      encapsulation formats: bzip2\n   [bzip2] and gzip [RFC1952]. bzip2 provides
      better compression than\n   gzip and, as a block compression algorithm, better
      error recovery\n   characteristics, at the expense of slower compression. gzip
      is\n   potentially a better choice when compression time is an issue.  These\n
      \  two algorithms and encapsulation formats were chosen for ubiquity and\n   ease
      of implementation.\n   IPFIX File Readers and Writers supporting compression
      MUST support\n   bzip2, and SHOULD support gzip.\n"
    title: 10.1.  Supported Compression Formats
  - contents:
    - "10.2.  Compression Recognition at the File Reader\n   bzip2, gzip, and uncompressed
      IPFIX Files have distinct magic\n   numbers.  IPFIX File Readers SHOULD use
      these magic numbers to\n   determine what compression, if any, is in use for
      an IPFIX File, and\n   invoke the proper decompression. bzip2 files are identified
      by the\n   initial three-octet string 0x42, 0x5A, 0x68 (\"BZh\"). gzip files
      are\n   identified by the initial two-octet string 0x1F, 0x8B.  IPFIX Files\n
      \  are identified by the initial two-octet string 0x00, 0x0A; these are\n   the
      version bytes of the first IPFIX Message header in the File.\n"
    title: 10.2.  Compression Recognition at the File Reader
  - contents:
    - "10.3.  Compression Error Resilience\n   Compression at the file level, like
      encryption, is not particularly\n   resilient to errors; in the worst case,
      a single bit error in a\n   stream-compressed file could result in the loss
      of the entire file.\n   Since block compression algorithms that support the
      identification\n   and isolation of blocks containing errors limit the impact
      of errors\n   on the recoverability of compressed data, the use of bzip2 in\n
      \  applications where error resilience is important is RECOMMENDED.\n   Since
      the block boundary of a block-compressed IPFIX File may fall in\n   the middle
      of an IPFIX Message, resynchronization of an IPFIX Message\n   stream by a File
      Reader after a compression error requires some care.\n   The beginning of an
      IPFIX Message may be identified by its header\n   signature (the Version field
      of the Message Header, 0x00 0x0A,\n   followed by a 16-bit Message Length),
      but simply searching for the\n   first occurrence of the Version field is insufficient,
      since these\n   two bytes may occur in valid IPFIX Template or Data Sets.\n
      \  Therefore, we specify the following algorithm for File Readers to\n   resynchronize
      an IPFIX Message Stream after skipping a compressed\n   block containing errors:\n
      \  1.  Search after the error for the first occurrence of the octet\n       string
      0x00, 0x0A (the IPFIX Message Header Version field).\n   2.  Treat this field
      as the beginning of a candidate IPFIX Message.\n       Read the two bytes following
      the Version field as a Message\n       Length, and seek to that offset from
      the beginning of the\n       candidate IPFIX Message.\n   3.  If the first two
      octets after the candidate IPFIX Message are\n       0x00, 0x0A (i.e., the IPFIX
      Message Header Version field of the\n       next message in the stream), or
      if the end-of-file is reached\n       precisely at the end of the candidate
      IPFIX Message, presume that\n       the candidate IPFIX Message is valid, and
      begin reading the IPFIX\n       File from the start of the candidate IPFIX Message.\n
      \  4.  If not, or if the seek reaches end-of-file or another block\n       containing
      errors before finding the end of the candidate\n       message, go back to step
      1, starting the search two bytes from\n       the start of the candidate IPFIX
      Message.\n   The algorithm above will improperly identify a non-message as a\n
      \  message approximately 1 in 2^32 times, assuming random IPFIX data.\n   It
      may be expanded to consider multiple candidate IPFIX Messages in\n   order to
      increase reliability.\n   In applications (e.g., archival storage) in which
      error resilience is\n   very important, File Writers SHOULD use block compression
      algorithms,\n   and MAY attempt to align IPFIX Messages within compression blocks
      to\n   ease resynchronization after errors.  File Readers SHOULD use the\n   resynchronization
      algorithm above to minimize data loss due to\n   compression errors.\n"
    title: 10.3.  Compression Error Resilience
  title: 10.  Compression of IPFIX Files
- contents:
  - "11.  Recommended File Integration Strategies\n   This section describes methods
    for integrating IPFIX File data with\n   other file formats.\n"
  - contents:
    - "11.1.  Encapsulation of Non-IPFIX Data in IPFIX Files\n   At times, it may
      be useful to export or store non-IPFIX data inline\n   in an IPFIX File or Message
      stream.  To do this cleanly, this data\n   must be encapsulated into IPFIX Messages
      so that an IPFIX File Reader\n   or Collecting Process can handle it without
      any need to interpret it.\n   At the same time, this data must not be changed
      during transmission\n   or storage.  The opaqueOctets Information Element, as
      defined in\n   Section 8.2.17, is provided for this encapsulation.\n   Processing
      the encapsulated non-IPFIX data is left to a separate\n   processing mechanisms
      that can identify encapsulated non-IPFIX data\n   in an IPFIX Message Stream,
      but need not have any other IPFIX\n   handling capability, except the ability
      to skip over all IPFIX\n   Messages that do not encapsulate non-IPFIX data.\n
      \  The Message Checksum Options Template, described in Section 8.1.1,\n   may
      be used as a uniform mechanism to identify errors within\n   encapsulated data.\n
      \  Note that this mechanism can only encapsulate data objects up to\n   65,515
      octets in length.  If the space available in one IPFIX Message\n   is not enough
      for the amount of data to be encapsulated, then the\n   data must be broken
      into smaller segments that are encapsulated into\n   consecutive IPFIX Messages.
      \ Any additional structuring or semantics\n   of the raw data is outside the
      scope of IPFIX and must be implemented\n   within the encapsulated binary data
      itself.  Furthermore, the raw\n   encapsulated data cannot be assumed by an
      IPFIX File Reader to have\n   any specific format.\n"
    title: 11.1.  Encapsulation of Non-IPFIX Data in IPFIX Files
  - contents:
    - "11.2.  Encapsulation of IPFIX Files within Other File Formats\n   Consequently,
      it may also be useful to reverse the encapsulation,\n   that is, to export or
      store IPFIX data inline within a non-IPFIX File\n   or data stream.  This makes
      sense when the other file format is not\n   compatible with the encapsulation
      described above in Section 11.1.\n   Generally speaking, the encapsulation here
      will be specific to the\n   format of the containing file.  For example, IPFIX
      Files may be\n   embedded in XML elements using hex or Base64 encoding, or in
      raw\n   binary files using start and end delimiters or some form of run-\n   length
      encoding.  As there are as many potential encapsulations here\n   as there are
      potential file formats, the specifics of each are out of\n   scope for this
      specification.\n"
    title: 11.2.  Encapsulation of IPFIX Files within Other File Formats
  title: 11.  Recommended File Integration Strategies
- contents:
  - "12.  Security Considerations\n   The Security Considerations section of [RFC5101],
    on which the IPFIX\n   File format is based, is largely concerned with the proper\n
    \  application of TLS and DTLS to ensure confidentiality and integrity\n   when
    exporting IPFIX Messages.  By analogy, this document specifies\n   the use of
    CMS [RFC3852] detached signatures to provide equivalent\n   integrity protection
    to TLS and DTLS in Section 9.1.  However, aside\n   from merely applying CMS for
    signatures, there are several security\n   issues which much be considered in
    certain circumstances; these are\n   covered in the subsections below.\n"
  - contents:
    - "12.1.  Relationship between IPFIX File and Transport Encryption\n   The underlying
      protocol used to exchange the information that will be\n   stored using the
      format proposed in this document must as well apply\n   appropriate procedures
      to guarantee the integrity and confidentiality\n   of the exported information.
      \ Such issues are addressed in [RFC5101].\n   Specifically, IPFIX Files that
      store data taken from an IPFIX\n   Collecting Process using TLS or DTLS for
      transport security SHOULD be\n   signed as in Section 9.1 and SHOULD be encrypted
      out of band; storage\n   of such flow data without encryption may present a
      potential breach\n   of confidentiality.  Conversely, flow data considered sensitive\n
      \  enough to require encryption in storage that is later transmitted\n   using
      IPFIX SHOULD be transmitted using TLS or DTLS for transport\n   security.\n"
    title: 12.1.  Relationship between IPFIX File and Transport Encryption
  - contents:
    - "12.2.  End-to-End Assertions for IPFIX Files\n   Note that while both TLS and
      CMS provide the ability to sign an IPFIX\n   Transport Session or an IPFIX File,
      there exists no method for\n   protecting data integrity end-to-end in the case
      in which a\n   Collecting Process is collocated with a File Writer.  The channel\n
      \  between the Exporting Process to Collecting Process using IPFIX is\n   signed
      by the Exporting Process key and protected via TLS and DTLS,\n   while the File
      is signed by the File Writer key and protected via\n   CMS.  The identity of
      the Exporting Process is not asserted in the\n   file, and the records may be
      modified between the Collecting Process\n   and the File Writer.\n   There are
      two potential ways to address this issue.  The first is by\n   fiat, and is
      appropriate only when the application allows the\n   Collecting-Process-to-File-Writer
      channel to be trusted.  In this\n   case, the File Writer's signature is an
      implicit assertion that the\n   channel to the Exporting Process was protected,
      that the Exporting\n   Process's signature was verified, and that the data was
      not changed\n   after collection.  For this to work, a File Writer collocated
      with a\n   Collecting Process SHOULD NOT sign a File as specified in Section
      9.1\n   unless the Transport Session over which the data was exported was\n
      \  protected via TLS or DTLS, and the Collecting Process positively\n   identified
      the Exporting Process by its certificate.  The File Writer\n   SHOULD include
      the Exporting Process and Collecting Process\n   certificates within the File
      using the Export Session Detail Options\n   Template in Section 8.1.3 or the
      Message Detail Options Template in\n   Section 8.1.4 to allow for later verification.\n
      \  In situations in which the Collecting Process and/or File Writer\n   cannot
      be trusted, end-to-end integrity can then be approximated by\n   collocating
      the File Writer with the Metering Process, and removing\n   the IPFIX protocol
      completely from the chain.  In this case, the File\n   Writer's signature is
      an implicit assertion that the Metering Process\n   is identified and is not
      tampering with the information as observed\n   on the wire.\n   Verification
      of these trust relationships is out of scope for this\n   document, and should
      be considered on a per-implementation basis.\n"
    title: 12.2.  End-to-End Assertions for IPFIX Files
  - contents:
    - "12.3.  Recommendations for Strength of Cryptography for IPFIX Files\n   Note
      that when encrypting files for archival storage, the\n   cryptographic strength
      is dependent on the length of time over which\n   archival data is expected
      to be kept.  Long-term storage may require\n   re-application of cryptographic
      protection, periodically resigning\n   and reencrypting files with stronger
      keys.  In this case, it is\n   recommended that the existing signed and/or encypted
      data be\n   encapsulated within newer, stronger protection.  See [RFC4810] for
      a\n   discussion of this issue.\n"
    title: 12.3.  Recommendations for Strength of Cryptography for IPFIX Files
  title: 12.  Security Considerations
- contents:
  - "13.  IANA Considerations\n   This document specifies the creation of several
    new IPFIX Information\n   Elements in the IPFIX Information Element registry located
    at\n   http://www.iana.org, as defined in Section 8.2 above.  IANA has\n   assigned
    the following Information Element numbers for their\n   respective Information
    Elements as specified below:\n   o  Information Element number 258 for the collectionTimeMilliseconds\n
    \     Information Element.\n   o  Information Element number 274 for the collectorCertificate\n
    \     Information Element.\n   o  Information Element number 275 for the exporterCertificate\n
    \     Information Element.\n   o  Information Element number 259 for the exportSctpStreamId\n
    \     Information Element.\n   o  Information Element number 260 for the maxExportSeconds\n
    \     Information Element.\n   o  Information Element number 268 for the maxFlowEndMicroseconds\n
    \     Information Element.\n   o  Information Element number 269 for the maxFlowEndMilliseconds\n
    \     Information Element.\n   o  Information Element number 270 for the maxFlowEndNanoseconds\n
    \     Information Element.\n   o  Information Element number 261 for the maxFlowEndSeconds\n
    \     Information Element.\n   o  Information Element number 262 for the messageMD5Checksum\n
    \     Information Element.\n   o  Information Element number 263 for the messageScope
    Information\n      Element.\n   o  Information Element number 264 for the minExportSeconds\n
    \     Information Element.\n   o  Information Element number 271 for the minFlowStartMicroseconds\n
    \     Information Element.\n   o  Information Element number 272 for the minFlowStartMilliseconds\n
    \     Information Element.\n   o  Information Element number 273 for the minFlowStartNanoseconds\n
    \     Information Element.\n   o  Information Element number 265 for the minFlowStartSeconds\n
    \     Information Element.\n   o  Information Element number 266 for the opaqueOctets
    Information\n      Element.\n   o  Information Element number 267 for the sessionScope
    Information\n      Element.\n   IANA has created the media type application/ipfix
    for IPFIX data, as\n   described by the following registration information:\n
    \  Type name:   application\n   Subtype name:   ipfix\n   Required parameters:
    \  none\n   Optional parameters:   none\n   Encoding considerations:   IPFIX Files
    are binary, and therefore must\n      be encoded in non-binary contexts.\n   Security
    considerations:   See the Security Considerations\n      (Section 12) of RFC 5655,
    and the Security Considerations of\n      [RFC5101].\n   Interoperability considerations:
    \  See the \"Detailed Specification\"\n      (Section 7) of RFC 5655.  The format
    is designed to be broadly\n      interoperable, as any valid stream of IPFIX Messages
    over any\n      transport specified in [RFC5101] MUST be recognizable as a valid\n
    \     IPFIX File.\n   Published specification:   RFC 5655, especially Section
    7, and\n      [RFC5101].\n   Applications that use this media type:   Various
    IPFIX\n      implementations (see [RFC5153]) support the construction of IPFIX\n
    \     File Readers and Writers.\n   Additional information:\n      Magic number(s):
    \  None, although the first two bytes of any IPFIX\n         File are the first
    two bytes of a message header, the Version\n         field, which as of [RFC5101]
    are always 10 in network byte\n         order: 0x00, 0x0A.\n      File extension(s):
    \  .ipfix\n      Macintosh file type code(s):   none\n   Person & email address
    to contact for further information:   Brian\n      Trammell <brian.trammell@hitachi-eu.com>
    for the authors of RFC\n      5655; Nevil Brownlee <n.brownlee@auckland.ac.nz>
    for the IPFIX\n      Working Group.\n   Intended usage:   LIMITED USE\n   Restrictions
    on usage:   none\n   Change controller:   Brian Trammell <brian.trammell@hitachi-eu.com>\n
    \     for the authors of RFC 5655; Nevil Brownlee\n      <n.brownlee@auckland.ac.nz>
    for the IPFIX Working Group.\n"
  title: 13.  IANA Considerations
- contents:
  - "14.  Acknowledgements\n   Thanks to Maurizio Molina, Tom Kosnar, and Andreas
    Kind for technical\n   assistance with the requirements for a standard flow storage
    format.\n   Thanks to Benoit Claise, Paul Aitken, Andrew Johnson, Gerhard Muenz,\n
    \  and Nevil Brownlee for their reviews and feedback.  Thanks to Pasi\n   Eronen
    for pointing out [RFC5485], and Russ Housley for writing it;\n   it specifies
    a detached signature format, from which Section 9.1 is\n   largely drawn.  Thanks
    to the PRISM project for its support of this\n   work.\n"
  title: 14.  Acknowledgements
- contents:
  - '15.  References

    '
  - contents:
    - "15.1.  Normative References\n   [RFC5101]    Claise, B., \"Specification of
      the IP Flow Information\n                Export (IPFIX) Protocol for the Exchange
      of IP Traffic\n                Flow Information\", RFC 5101, January 2008.\n
      \  [RFC5102]    Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.\n                Meyer,
      \"Information Model for IP Flow Information\n                Export\", RFC 5102,
      January 2008.\n   [RFC5610]    Boschi, E., Trammell, B., Mark, L., and T. Zseby,\n
      \               \"Exporting Type Information for IP Flow Information\n                Export
      (IPFIX) Information Elements\", RFC 5610,\n                July 2009.\n   [RFC1321]
      \   Rivest, R., \"The MD5 Message-Digest Algorithm\",\n                RFC 1321,
      April 1992.\n   [RFC1952]    Deutsch, P., Gailly, J-L., Adler, M., Deutsch,
      L., and\n                G. Randers-Pehrson, \"GZIP file format specification\n
      \               version 4.3\", RFC 1952, May 1996.\n   [RFC2119]    Bradner,
      S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC3852]    Housley, R., \"Cryptographic
      Message Syntax (CMS)\",\n                RFC 3852, July 2004.\n   [RFC4810]
      \   Wallace, C., Pordesch, U., and R. Brandner, \"Long-Term\n                Archive
      Service Requirements\", RFC 4810, March 2007.\n   [RFC5280]    Cooper, D., Santesson,
      S., Farrell, S., Boeyen, S.,\n                Housley, R., and W. Polk, \"Internet
      X.509 Public Key\n                Infrastructure Certificate and Certificate
      Revocation\n                List (CRL) Profile\", RFC 5280, May 2008.\n   [bzip2]
      \     Seward, J., \"bzip2 (http://www.bzip.org/)\", March 2008.\n"
    title: 15.1.  Normative References
  - contents:
    - "15.2.  Informative References\n   [RFC3917]    Quittek, J., Zseby, T., Claise,
      B., and S. Zander,\n                \"Requirements for IP Flow Information Export
      (IPFIX)\",\n                RFC 3917, October 2004.\n   [RFC3954]    Claise,
      B., \"Cisco Systems NetFlow Services Export\n                Version 9\", RFC
      3954, October 2004.\n   [RFC5153]    Boschi, E., Mark, L., Quittek, J., Stiemerling,
      M., and\n                P. Aitken, \"IP Flow Information Export (IPFIX)\n                Implementation
      Guidelines\", RFC 5153, April 2008.\n   [RFC5470]    Sadasivan, G., Brownlee,
      N., Claise, B., and J. Quittek,\n                \"Architecture for IP Flow
      Information Export\", RFC 5470,\n                March 2009.\n   [RFC5471]    Schmoll,
      C., Aitken, P., and B. Claise, \"Guidelines for\n                IP Flow Information
      Export (IPFIX) Testing\", RFC 5471,\n                March 2009.\n   [RFC5472]
      \   Zseby, T., Boschi, E., Brownlee, N., and B. Claise, \"IP\n                Flow
      Information Export (IPFIX) Applicability\",\n                RFC 5472, March
      2009.\n   [RFC5473]    Boschi, E., Mark, L., and B. Claise, \"Reducing\n                Redundancy
      in IP Flow Information Export (IPFIX) and\n                Packet Sampling (PSAMP)
      Reports\", RFC 5473, March 2009.\n   [SAINT2007]  Trammell, B., Boschi, E.,
      Mark, L., and T. Zseby,\n                \"Requirements for a standardized flow
      storage solution\",\n                 in Proceedings of the SAINT 2007 workshop
      on Internet\n                Measurement Technology, Hiroshima, Japan, January
      2007.\n   [RFC3851]    Ramsdell, B., \"Secure/Multipurpose Internet Mail\n                Extensions
      (S/MIME) Version 3.1 Message Specification\",\n                RFC 3851, July
      2004.\n   [RFC4288]    Freed, N. and J. Klensin, \"Media Type Specifications
      and\n                Registration Procedures\", BCP 13, RFC 4288,\n                December
      2005.\n   [RFC5485]    Housley, R., \"Digital Signatures on Internet-Draft\n
      \               Documents\", RFC 5485, March 2009.\n   [pcap]       \"libpcap
      (http://www.tcpdump.org/)\", October 2008.\n"
    title: 15.2.  Informative References
  title: 15.  References
- contents:
  - "Appendix A.  Example IPFIX File\n   In this section we will explore an example
    IPFIX File that\n   demonstrates the various features of the IPFIX File format.
    \ This\n   File contains flow records described by a single Template.  This File\n
    \  also contains a File Time Window record to note the start and end\n   time
    of the data, and an Export Session Details record to record\n   collection infrastructure
    information.  Each Message within this File\n   also contains a Message Checksum
    record, as this File may be\n   externally encrypted and/or stored as an archive.
    \ The structure of\n   this File is shown in Figure 2.\n             +=================================================+\n
    \            | IPFIX Message                       seq. 0      |\n             |
    +---------------------------------------------+ |\n             | | Template Set
    (ID 2)                  1 rec  | |\n             | |   Data Tmpl. ID 256                         |
    |\n             | +---------------------------------------------+ |\n             |
    | Options Template Set (ID 3)          3 recs | |\n             | |   File Time
    Window Opt. Tmpl. ID 257        | |\n             | |   Message Checksum Opt.
    Tmpl. ID 259        | |\n             | |   Export Session Details Opt. Tmpl.
    ID 258  | |\n             | +---------------------------------------------+ |\n
    \            | | Data Set (ID 259) [Message Checksum] 1 rec  | |\n             |
    +---------------------------------------------+ |\n             +=================================================+\n
    \            | IPFIX Message                       seq. 1      |\n             |
    +---------------------------------------------+ |\n             | | Data Set (ID
    257) [File Time Window] 1 rec  | |\n             | +---------------------------------------------+
    |\n             | | Data Set (ID 258) [Export Session]   1 rec  | |\n             |
    +---------------------------------------------+ |\n             | | Data Set (ID
    259) [Message Checksum] 1 rec  | |\n             | +---------------------------------------------+
    |\n             +=================================================+\n             |
    IPFIX Message                       seq. 4      |\n             | +---------------------------------------------+
    |\n             | | Data Set (ID 256)                   50 recs | |\n             |
    |  contains flow data                         | |\n             | +---------------------------------------------+
    |\n             | | Data Set (ID 259) [Message Checksum] 1 rec  | |\n             |
    +---------------------------------------------+ |\n             +=================================================+\n
    \            | IPFIX Message                       seq. 55     |\n             |
    \                   . . .                        |\n                     Figure
    2: File Example Structure\n   The Template describing the data records contains
    a flow start\n   timestamp, an IPv4 5-tuple, and packet and octet total counts.
    \ The\n   Template Set defining this is as shown in Figure 3 below:\n                        1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Set ID = 2           |          Length =  40         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |      Template ID = 256        |        Field Count = 8        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| flowStartSeconds      = 150 |       Field Length =  4       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| sourceIPv4Address     =   8 |       Field Length =  4       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| dest.IPv4Address      =  12 |       Field Length =  4       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| sourceTransportPort   =   7 |       Field Length =  2       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| dest.TransportPort    =  11 |       Field Length =  2       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| protocolIdentifier    =   4 |       Field Length =  1       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| octetTotalCount       =  85 |       Field Length =  4       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |0| packetTotalCount      =  86 |       Field Length =  4       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                  Figure 3: File Example Data Template\n"
  - contents:
    - "A.1.  Example Options Templates\n   This is followed by an Options Template
      Set containing the Options\n   Templates required to read the File: the File
      Time Window Options\n   Template (defined in Section 8.1.2 above), the Export
      Session Details\n   Options Template (defined in Section 8.1.3 above), and the
      Message\n   Checksum Options Template (defined in Section 8.1.1 above).  This\n
      \  Options Template Set is shown in Figure 4 and Figure 5 below:\n                        1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Set ID = 3           |          Length =  80         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      Template ID = 257        |        Field Count = 3        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Scope Field Count = 1      |0| sessionScope          = 267 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length = 1        |0| minFlowStartSeconds   = 265 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length = 4        |0| maxFlowEndSeconds     = 261 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length = 4        |      Template ID = 259        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Count = 2         |    Scope Field Count = 1      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0| messageScope          = 263 |       Field Length =  1       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0| messageMD5Checksum    = 262 |       Field Length = 16       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 4: File Example Options Templates (Time Window and Checksum)\n                        1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Template ID = 258       |         Field Count = 9       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Scope Field Count = 1      |0| sessionScope          = 267 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  1       |0| exporterIPv4Address   = 130 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  4       |0| collectorIPv4Address  = 211 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  4       |0| exporterTransportPort = 217 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  2       |0| col.TransportPort     = 216 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  2       |0| col.TransportProtocol = 215 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  1       |0| col.ProtocolVersion   = 214 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  1       |0| minExportSeconds      = 264 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  4       |0| maxExportSeconds      = 260 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Field Length =  4       |     set padding (2 octets)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 5: File Example Options Templates, Continued (Session Details)\n"
    title: A.1.  Example Options Templates
  - contents:
    - "A.2.  Example Supplemental Options Data\n   Following the Templates required
      to decode the File is the\n   supplemental IPFIX Options information used to
      describe the File's\n   contents and type information.  First comes the File
      Time Window\n   record; it notes that the File contains data from 9 October
      2007\n   between 00:01:13 and 23:56:27 UTC, and appears as in Figure 6:\n                        1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Set ID = 257         |          Length =  13         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | sessionScope  |           minFlowStartSeconds\n   |       0       |         2007-10-09
      00:01:13 UTC           . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |            maxFlowEndSeconds\n   . . .           |         2007-10-09
      23:56:27 UTC           . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |\n   . . .           |\n   +-+-+-+-+-+-+-+-+\n                    Figure
      6: File Example Time Window\n   This is followed by information about how the
      data in the File was\n   collected, in the Export Session Details record.  This
      record notes\n   that the session stored in this File was sent via SCTP from
      an\n   Exporter at 192.0.2.30 port 32769 to a Collector at 192.0.2.40 port\n
      \  4739, and contains messages exported between 00:01:57 and 23:57:12\n   UTC
      on 9 October 2007; it is represented in its Data Set as in\n   Figure 7:\n                       1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Set ID = 258         |          Length =  27         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | sessionScope  |           exporterIPv4Address\n   |       0       |               192.0.2.30
      \                 . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |           collectorIPv4Address\n   . . .           |               192.0.2.31
      \                 . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |     exporterTransportPort     |   cTPort\n   . . .           |
      \            32769             |    4739   . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |   cTProtocol  |  cPVersion    |\n   . . .           |      132
      \     |     10        |           . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \               minExportSeconds                   |\n   . . .     2007-10-09
      00:01:57 UTC               |           . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \               maxExportSeconds                   |\n   . . .     2007-10-09
      23:57:12 UTC               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              Figure 7: File Example Export Session Details\n"
    title: A.2.  Example Supplemental Options Data
  - contents:
    - "A.3.  Example Message Checksum\n   Each IPFIX Message within the File is completed
      with a Message\n   Checksum record; the structure of this record within its
      Data Set is\n   as in Figure 8:\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
      0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Set ID = 259         |          Length =  24         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | messageScope  |                                               |\n   |       0
      \      |                                               |\n   +-+-+-+-+-+-+-+-+
      \                                              |\n   |                       messageMD5Checksum
      \                     |\n   |           (16-byte MD5 checksum of options message)
      \          |\n   |                                                               |\n
      \  |                                                               |\n   |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |              set padding (3 octets)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                 Figure 8: File Example Message Checksum\n"
    title: A.3.  Example Message Checksum
  - contents:
    - "A.4.  File Example Data Set\n   After the Templates and supplemental Options
      information comes the\n   data itself.  The first record of an example Data
      Set is shown with\n   its message and set headers in Figure 9:\n                        1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Version = 10              |         Length = 1296         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Export Time = 2007-10-09 00:01:57 UTC                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Sequence Number = 4                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Observation Domain ID = 1                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Set ID = 256           |          Length = 1254         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      flowStartSeconds                         |\n   |                    2007-10-09
      00:01:13 UTC                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      sourceIPv4Address                        |\n   |                          192.0.2.2
      \                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                    destinationIPv4Address                     |\n   |                          192.0.2.3
      \                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      sourceTransportPort      |   destinationTransportPort    |\n   |             32770
      \            |               80              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  protocolId   |             totalOctetCount\n   |       6       |                  18000
      \                   . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |             totalPacketCount\n   . . .           |                    65
      \                    . . .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  |             (49 more records)\n   . . .           |\n   +-+-+-+-+-+-+-+-+\n
      \                     Figure 9: File Example Data Set\n"
    title: A.4.  File Example Data Set
  - contents:
    - "A.5.  Complete File Example\n   Bringing together the examples above and adding
      message headers as\n   appropriate, a hex dump of the first 317 bytes of the
      example File\n   constructed above would appear as in the annotated Figure 10
      below.\n     0:|00 0A 00 A0 47 0A B6 E5 00 00 00 00 00 00 00 01\n      [^ first
      message header (length 160 bytes) -->\n    16:|00 02 00 28 01 00 00 08 00 96
      00 04 00 08 00 04\n      [^ data template set -->\n    32: 00 0C 00 04 00 07
      00 02 00 0B 00 02 00 04 00 01\n    48: 00 55 00 04 00 56 00 04|00 03 00 50 01
      01 00 03\n                              [^ opt template set -->\n    64: 00
      01 01 0B 00 01 01 09 00 04 01 05 00 04 01 03\n    80: 00 02 00 01 01 07 00 01
      01 06 00 10 01 02 00 09\n    96: 00 01 01 0B 00 01 00 82 00 04 00 D3 00 04 00
      D9\n   112: 00 02 00 D8 00 02 00 D7 00 01 00 D0 00 01 01 08\n   128: 00 04 01
      04 00 04 00 00|01 03 00 18 00 73 F1 12\n                              [^ checksum
      record -->\n   144: D6 C7 58 BE 44 E6 60 06 4E 78 74 AE 7D 00 00 00\n   176:|00
      0A 00 50 47 0A B6 E5 00 00 00 01 00 00 00 01\n      [^ second message header
      (length 80 bytes) -->\n   192:|01 01 00 0E 00 47 0A B6 B9 47 0C 07 1B 00|01
      02\n      [^ time window rec -> [ session detail rec ^ -->\n   208: 00 1C 00
      C0 00 02 1E 0C 00 02 1F 80 01 12 83 84\n   224: 0A 47 0A B6 E5 47 0C 07 48 00|01
      03 00 18 00 3E\n           [ message checksum record ^ -->\n   240: 2B 37 08
      CE B2 0E 30 11 32 12 4A 5F E3 AD DB 00\n   256:|00 0A 05 10 47 0A B6 E5 00 00
      00 06 00 00 00 01\n      [^ third message header (length 1296 bytes) -->\n   272:|01
      00 04 E6|47 0A B6 B9 C0 00 02 02 C0 00 02 03\n      [^ set hdr ][^ first data
      rec -->\n   288: 80 02 00 50 06 00 00 46 50 00 00 00 41\n                     Figure
      10: File Example Hex Dump\n"
    title: A.5.  Complete File Example
  title: Appendix A.  Example IPFIX File
- contents:
  - "Appendix B.  Applicability of IPFIX Files to NetFlow V9 Flow Storage\n   As the
    IPFIX Message format is nearly a superset of the NetFlow V9\n   packet format,
    IPFIX Files can be used for store NetFlow V9 data\n   relatively easily.  This
    section describes a method for doing so.\n   The differences between the two protocols
    are outlined in\n   Appendix B.1 below.  A simple, lightweight, message-for-message\n
    \  translation method for transforming V9 Packets into IPFIX Messages\n   for
    storage within IPFIX Files is described in Appendix B.2.  An\n   example of this
    translation method is given in Appendix B.3.\n"
  - contents:
    - "B.1.  Comparing NetFlow V9 to IPFIX\n   With a few caveats, the IPFIX protocol
      is a superset of the NetFlow\n   V9 protocol, having evolved from it largely
      through a process of\n   feature addition to bring it into compliance with the
      IPFIX\n   Requirements and the needs of stakeholders within the IPFIX Working\n
      \  Group.  This appendix outlines the differences between the two\n   protocols.
      \ It is informative only, and presented as an exploration\n   of the two protocols
      to motivate the usage of IPFIX Files to store\n   V9-collected flow data.\n"
    - contents:
      - "B.1.1.  Message Header Format\n   Both NetFlow V9 and IPFIX use streams of
        messages prefixed by a\n   message header, though the message header differs
        significantly\n   between the two.  Note that in NetFlow V9 terminology, these
        messages\n   are called packets, and messages must be delimited by datagram\n
        \  boundaries.  IPFIX does not have this constraint.  The header formats\n
        \  are detailed below:\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       Version Number          |            Count              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                           sysUpTime                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                           UNIX Secs                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Sequence Number                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Source ID                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 11: NetFlow V9 Packet Header Format\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       Version Number          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                           Export Time                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Sequence Number                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                    Observation Domain ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                 Figure 12: IPFIX Message Header Format\n   Version Number:
        \  The IPFIX Version Number MUST be 10, while the\n      NetFlow V9 Version
        Number MUST be 9.\n   Length vs. Count:   The Count field in the NetFlow V9
        packet header\n      counts records in the message (including Data and Template\n
        \     Records), while the Length field in the IPFIX Message Header\n      counts
        octets in the message.  Note that this implies that NetFlow\n      V9 collectors
        must rely on datagram boundaries or some other\n      external delimiter;
        otherwise, they must completely consume a\n      message before finding its
        end.\n   System Uptime:   System uptime in milliseconds is exported in the\n
        \     NetFlow V9 packet header.  This field is not present in the IPFIX\n
        \     Message Header, and must be exported using an IPFIX Option if\n      required.\n
        \  Export Time:   Aside from being called UNIX Secs in the NetFlow V9\n      packet
        header specification, the export time in seconds since 1\n      January 1970
        at 0000 UTC appears in both NetFlow V9 and IPFIX\n      message headers.\n
        \  Sequence Number:   The NetFlow V9 Sequence Number counts packets,\n      while
        the IPFIX Sequence Number counts records in Data Sets.  Both\n      are scoped
        to Observation Domain.\n   Observation Domain ID:   Similarly, the NetFlow
        V9 sourceID has\n      become the IPFIX Observation Domain ID.\n"
      title: B.1.1.  Message Header Format
    - contents:
      - "B.1.2.  Set Header Format\n   Set headers are identical between NetFlow V9
        and IPFIX; that is, each\n   Set (FlowSet in NetFlow V9 terminology) is prefixed
        by a 4-byte set\n   header containing the Set ID and the length of the set
        in octets.\n   Note that the special Set IDs are different between IPFIX and
        NetFlow\n   V9.  IPFIX Template Sets are identified by Set ID 2, while NetFlow
        V9\n   Template FlowSets are identified by Set ID 0.  Similarly, IPFIX\n   Options
        Template Sets are identified by Set ID 3, while NetFlow V9\n   Options Template
        FlowSets are identified by Set ID 1.\n   Both protocols reserve Set IDs 0-255,
        and use Set IDs 256-65535 for\n   Data Sets (or FlowSets, in NetFlow V9 terminology).\n"
      title: B.1.2.  Set Header Format
    - contents:
      - "B.1.3.  Template Format\n   Template FlowSets in NetFlow V9 support a subset
        of functionality of\n   those in IPFIX.  Specifically, NetFlow V9 does not
        have any support\n   for vendor-specific Information Elements as IPFIX does,
        so there is\n   no enterprise bit or facility for associating a private enterprise\n
        \  number with an information element.  NetFlow V9 also does not support\n
        \  variable-length fields.\n   Options Template FlowSets in NetFlow V9 are
        similar to Options\n   Template Sets in IPFIX subject to the same caveats.\n"
      title: B.1.3.  Template Format
    - contents:
      - "B.1.4.  Information Model\n   The NetFlow V9 field type definitions are a
        compatible subset of, and\n   have evolved in concert with, the IPFIX Information
        Model.  IPFIX\n   Information Element identifiers in the range 1-127 are defined
        by the\n   IPFIX Information Model [RFC5102] to be compatible with the\n   corresponding
        NetFlow V9 field types.\n"
      title: B.1.4.  Information Model
    - contents:
      - "B.1.5.  Template Management\n   NetFlow V9 has no concept of a Transport
        Session as in IPFIX, as\n   NetFlow V9 was designed with a connectionless
        transport in mind.\n   Template IDs are therefore scoped to an Exporting Process
        lifetime\n   (i.e., an Exporting Process instance between restarts).  There
        is no\n   facility in NetFlow V9 as in IPFIX for Template withdrawal or\n
        \  Template ID reuse.  Template retransmission at the Exporter works as\n
        \  in UDP-based IPFIX Exporting Processes.\n"
      title: B.1.5.  Template Management
    - contents:
      - "B.1.6.  Transport\n   In practice, though NetFlow V9 is designed to be transport-\n
        \  independent, it is transported only over UDP.  There is no facility\n   as
        in IPFIX for full connection-oriented transport without datagram\n   boundaries,
        due to the use of a record count field as opposed to a\n   message length
        field in the packet header.  There is no support in\n   NetFlow V9 for transport
        layer security via TLS or DTLS.\n"
      title: B.1.6.  Transport
    title: B.1.  Comparing NetFlow V9 to IPFIX
  - contents:
    - "B.2.  A Method for Transforming NetFlow V9 Messages to IPFIX\n   This appendix
      describes a method for transforming NetFlow V9 Packets\n   into IPFIX Messages,
      which can be used to store NetFlow V9 data in\n   IPFIX Files.  A process transforming
      NetFlow V9 Packets into IPFIX\n   Messages must handle the fact that NetFlow
      V9 Packets and IPFIX\n   Messages are framed differently, that sequence numbering
      works\n   differently, and that the NetFlow V9 field type definitions are only\n
      \  compatible with the IPFIX Information Model below Information Element\n   identifier
      128.\n   For each incoming NetFlow V9 packet, the transformation process must:\n
      \  1.  Verify that the Version field of the packet header is 9.\n   2.  Verify
      that the Sequence Number field of the packet header is\n       valid.\n   3.
      \ Scan the packet to:\n       1.  Verify that it contains no Templates with
      field types outside\n           the range 1-127;\n       2.  Verify that it
      contains no FlowSets with Set IDs between 2\n           and 255 inclusive;\n
      \      3.  Verify that it contains the number of records in FlowSets,\n           Template
      FlowSets, and Options Template FlowSets declared in\n           the Count field
      of the packet header; and\n       4.  Count the number of records in Data FlowSets
      for calculating\n           the IPFIX Sequence Number.\n   4.  Calculate a Sequence
      Number for each IPFIX Observation Domain by\n       storing the last Sequence
      Number sent for each Observation Domain\n       plus the count of records in
      Data FlowSets in the previous step\n       to be sent as the Sequence Number
      for the IPFIX Message following\n       this one within that Observation Domain.\n
      \  5.  Generate a new IPFIX Message Header with:\n       1.  a Version field
      of 10;\n       2.  a Length field with the number of octets in the IPFIX\n           Message,
      generally available by subtracting 4 from the length\n           of the NetFlow
      V9 packet as returned from the transport layer\n           (accounting for the
      difference in message header lengths);\n       3.  the Sequence Number calculated
      for this message by the\n           Sequence Number calculation step; and\n
      \      4.  Export Time and Observation Domain ID taken from the UNIX\n           secs
      and Source ID fields of the NetFlow V9 packet header,\n           respectively.\n
      \  6.  Copy each FlowSet from the Netflow V9 packet to the IPFIX Message\n       after
      the header.  Replace Set ID 0 with Set ID 2 for Template\n       Sets, and Set
      ID 1 with Set ID 3 for Options Template Sets.\n   Note that this process loses
      system uptime information; if such\n   information is required, the transformation
      process will have to\n   export that information using IPFIX Options.  This
      may require a more\n   sophisticated transformation process structure.\n"
    title: B.2.  A Method for Transforming NetFlow V9 Messages to IPFIX
  - contents:
    - "B.3.  NetFlow V9 Transformation Example\n   The following two figures show
      a single NetFlow V9 packet with\n   templates and the corresponding IPFIX Message,
      exporting a single\n   flow record representing 60,303 octets sent from 192.0.2.2
      to\n   192.0.2.3.  This would be the third packet exported in Observation\n
      \  Domain 33 from the NetFlow V9 exporter, containing records starting\n   with
      the 12th record (packet and record sequence numbers count from\n   0).\n   The
      ** symbol in the IPFIX example shows those fields that required\n   modification
      from the NetFlow V9 packet by the transformation\n   process.\n                        1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Version = 9          |         Count = 2             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               Uptime = 3750405 ms (1:02:30.405)               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Export Time = 1171557627 epoch sec (2007-02-15 16:40:27)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Sequence Number = 2                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                 Observation Domain ID = 33                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Set ID = 0          |       Set Length = 20         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Template ID = 256       |       Field Count = 3         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | IPV4_SRC_ADDR           =   8 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | IPV4_DST_ADDR           =  12 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | IN_BYTES                =   1 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Set ID = 256         |       Set Length = 16         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         IPV4_SRC_ADDR                         |\n   |                           192.0.2.2
      \                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         IPV4_DST_ADDR                         |\n   |                           192.0.2.3
      \                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                           IN_BYTES                            |\n   |                             60303
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  Figure 13: Example NetFlow V9 Packet\n                       1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | **       Version = 10         | **      Length = 52           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Export Time = 1171557627 epoch sec (2007-02-15 16:40:27)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | **                   Sequence Number = 11                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Observation Domain ID = 33                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | **         Set ID = 2         |       Set Length = 20         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Template ID = 256       |       Field Count  = 3        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0| sourceIPv4Address      =  8 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0| destinationIPv4Address = 12 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0| octetDeltaCount        =  1 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Set ID = 256         |       Set Length = 16         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       sourceIPv4Address                       |\n   |                           192.0.2.2
      \                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     destinationIPv4Address                    |\n   |                           192.0.2.3
      \                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        octetDeltaCount                        |\n   |                             60303
      \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Figure 14: Corresponding Example IPFIX Message\n"
    title: B.3.  NetFlow V9 Transformation Example
  title: Appendix B.  Applicability of IPFIX Files to NetFlow V9 Flow Storage
- contents:
  - "Authors' Addresses\n   Brian Trammell\n   Hitachi Europe\n   c/o ETH Zurich\n
    \  Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n   Phone: +41 44 632 70 13\n
    \  EMail: brian.trammell@hitachi-eu.com\n   Elisa Boschi\n   Hitachi Europe\n
    \  c/o ETH Zurich\n   Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n   Phone:
    +41 44 632 70 57\n   EMail: elisa.boschi@hitachi-eu.com\n   Lutz Mark\n   Fraunhofer
    IFAM\n   Wiener Str. 12\n   28359 Bremen\n   Germany\n   Phone: +49 421 2246206\n
    \  EMail: lutz.mark@ifam.fraunhofer.de\n   Tanja Zseby\n   Fraunhofer Institute
    for Open Communication Systems\n   Kaiserin-Augusta-Allee 31\n   10589 Berlin\n
    \  Germany\n   Phone: +49 30 3463 7153\n   EMail: tanja.zseby@fokus.fraunhofer.de\n
    \  Arno Wagner\n   ETH Zurich\n   Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n
    \  Phone: +41 44 632 70 04\n   EMail: arno@wagner.name\n"
  title: Authors' Addresses
