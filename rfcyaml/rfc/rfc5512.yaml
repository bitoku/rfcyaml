- contents:
  - "   The BGP Encapsulation Subsequent Address Family Identifier (SAFI)\n               and
    the BGP Tunnel Encapsulation Attribute\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   In certain situations, transporting a packet from one Border Gateway\n
    \  Protocol (BGP) speaker to another (the BGP next hop) requires that\n   the
    packet be encapsulated by the first BGP speaker and decapsulated\n   by the second.
    \ To support these situations, there needs to be some\n   agreement between the
    two BGP speakers with regard to the\n   \"encapsulation information\", i.e., the
    format of the encapsulation\n   header as well as the contents of various fields
    of the header.\n   The encapsulation information need not be signaled for all\n
    \  encapsulation types.  In cases where signaling is required (such as\n   Layer
    Two Tunneling Protocol - Version 3 (L2TPv3) or Generic Routing\n   Encapsulation
    (GRE) with key), this document specifies a method by\n   which BGP speakers can
    signal encapsulation information to each\n   other.  The signaling is done by
    sending BGP updates using the\n   Encapsulation Subsequent Address Family Identifier
    (SAFI) and the\n   IPv4 or IPv6 Address Family Identifier (AFI).  In cases where
    no\n   encapsulation information needs to be signaled (such as GRE without\n   key),
    this document specifies a BGP extended community that can be\n   attached to BGP
    UPDATE messages that carry payload prefixes in order\n   to indicate the encapsulation
    protocol type to be used.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Specification of Requirements ...................................4\n   3.
    Encapsulation NLRI Format .......................................4\n   4. Tunnel
    Encapsulation Attribute ..................................5\n      4.1. Encapsulation
    sub-TLV ......................................6\n      4.2. Protocol Type Sub-TLV
    ......................................7\n      4.3. Color Sub-TLV ..............................................8\n
    \          4.3.1. Color Extended Community ............................8\n      4.4.
    Tunnel Type Selection ......................................8\n      4.5. BGP
    Encapsulation Extended Community .......................9\n   5. Capability Advertisement
    .......................................10\n   6. Error Handling .................................................10\n
    \  7. Security Considerations ........................................10\n   8.
    IANA Considerations ............................................10\n   9. Acknowledgements
    ...............................................11\n   10. References ....................................................12\n
    \     10.1. Normative References .....................................12\n      10.2.
    Informative References ...................................12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Consider the case of a router R1 forwarding an IP packet
    P.  Let D be\n   P's IP destination address.  R1 must look up D in its forwarding\n
    \  table.  Suppose that the \"best match\" route for D is route Q, where Q\n   is
    a BGP-distributed route whose \"BGP next hop\" is router R2.  And\n   suppose
    further that the routers along the path from R1 to R2 have\n   entries for R2
    in their forwarding tables, but do NOT have entries\n   for D in their forwarding
    tables.  For example, the path from R1 to\n   R2 may be part of a \"BGP-free core\",
    where there are no BGP-\n   distributed routes at all in the core.  Or, as in
    [MESH], D may be an\n   IPv4 address while the intermediate routers along the
    path from R1 to\n   R2 may support only IPv6.\n   In cases such as this, in order
    for R1 to properly forward packet P,\n   it must encapsulate P and send P \"through
    a tunnel\" to R2.  For\n   example, R1 may encapsulate P using GRE, L2TPv3, IP
    in IP, etc.,\n   where the destination IP address of the encapsulation header
    is the\n   address of R2.\n   In order for R1 to encapsulate P for transport to
    R2, R1 must know\n   what encapsulation protocol to use for transporting different
    sorts\n   of packets to R2.  R1 must also know how to fill in the various\n   fields
    of the encapsulation header.  With certain encapsulation\n   types, this knowledge
    may be acquired by default or through manual\n   configuration.  Other encapsulation
    protocols have fields such as\n   session id, key, or cookie that must be filled
    in.  It would not be\n   desirable to require every BGP speaker to be manually
    configured with\n   the encapsulation information for every one of its BGP next
    hops.\n   In this document, we specify a way in which BGP itself can be used by\n
    \  a given BGP speaker to tell other BGP speakers, \"if you need to\n   encapsulate
    packets to be sent to me, here's the information you need\n   to properly form
    the encapsulation header\".  A BGP speaker signals\n   this information to other
    BGP speakers by using a distinguished SAFI\n   value, the Encapsulation SAFI.
    \ The Encapsulation SAFI can be used\n   with the AFI for IPv4 or with the AFI
    for IPv6.  The IPv4 AFI is used\n   when the encapsulated packets are to be sent
    using IPv4; the IPv6 AFI\n   is used when the encapsulated packets are to be sent
    using IPv6.\n   In a given BGP update, the Network Layer Reachability Information\n
    \  (NLRI) of the Encapsulation SAFI consists of the IP address (in the\n   family
    specified by the AFI) of the originator of that update.  The\n   encapsulation
    information is specified in the BGP \"tunnel\n   encapsulation attribute\" (specified
    herein).  This attribute\n   specifies the encapsulation protocols that may be
    used as well as\n   whatever additional information (if any) is needed in order
    to\n   properly use those protocols.  Other attributes, e.g., communities or\n
    \  extended communities, may also be included.\n   Since the encapsulation information
    is coded as an attribute, one\n   could ask whether a new SAFI is really required.
    \ After all, a BGP\n   speaker could simply attach the tunnel encapsulation attribute
    to\n   each prefix (like Q in our example) that it advertises.  But with\n   that
    technique, any change in the encapsulation information would\n   cause a very
    large number of updates.  Unless one really wants to\n   specify different encapsulation
    information for each prefix, it is\n   much better to have a mechanism in which
    a change in the\n   encapsulation information causes a BGP speaker to advertise
    only a\n   single update.  Conversely, when prefixes get modified, the tunnel\n
    \  encapsulation information need not be exchanged.\n   In this specification,
    a single SAFI is used to carry information for\n   all encapsulation protocols.
    \ One could have taken an alternative\n   approach of defining a new SAFI for
    each encapsulation protocol.\n   However, with the specified approach, encapsulation
    information can\n   pass transparently and automatically through intermediate
    BGP\n   speakers (e.g., route reflectors) that do not necessarily understand\n
    \  the encapsulation information.  This works because the encapsulation\n   attribute
    is defined as an optional transitive attribute.  New\n   encapsulations can thus
    be added without the need to reconfigure any\n   intermediate BGP system.  If
    adding a new encapsulation required\n   using a new SAFI, the information for
    that encapsulation would not\n   pass through intermediate BGP systems unless
    those systems were\n   reconfigured to support the new SAFI.\n   For encapsulation
    protocols where no encapsulation information needs\n   to be signaled (such as
    GRE without key), the egress router MAY still\n   want to specify the protocol
    to use for transporting packets from the\n   ingress router.  This document specifies
    a new BGP extended community\n   that can be attached to UPDATE messages that
    carry payload prefixes\n   for this purpose.\n"
  title: 1.  Introduction
- contents:
  - "2.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Specification of Requirements
- contents:
  - "3.  Encapsulation NLRI Format\n   The NLRI, defined below, is carried in BGP
    UPDATE messages [RFC4271]\n   using BGP multiprotocol extensions [RFC4760] with
    an AFI of 1 or 2\n   (IPv4 or IPv6) [IANA-AF] and a SAFI value of 7 (called an\n
    \  Encapsulation SAFI).\n   The NLRI is encoded in a format defined in Section
    5 of [RFC4760] (a\n   2-tuple of the form <length, value>).  The value field is
    structured\n   as follows:\n            +-----------------------------------------------+\n
    \           |       Endpoint Address (Variable)             |\n            +-----------------------------------------------+\n
    \  - Endpoint Address: This field identifies the BGP speaker originating\n     the
    update.  It is typically one of the interface addresses\n     configured at the
    router.  The length of the endpoint address is\n     dependent on the AFI being
    advertised.  If the AFI is set to IPv4\n     (1), then the endpoint address is
    a 4-octet IPv4 address, whereas\n     if the AFI is set to IPv6 (2), the endpoint
    address is a 16-octet\n     IPv6 address.\n   An update message that carries the
    MP_REACH_NLRI or MP_UNREACH_NLRI\n   attribute with the Encapsulation SAFI MUST
    also carry the BGP\n   mandatory attributes:  ORIGIN, AS_PATH, and LOCAL_PREF
    (for IBGP\n   neighbors), as defined in [RFC4271].  In addition, such an update\n
    \  message can also contain any of the BGP optional attributes, like the\n   Community
    or Extended Community attribute, to influence an action on\n   the receiving speaker.\n
    \  When a BGP speaker advertises the Encapsulation NLRI via BGP, it uses\n   its
    own address as the BGP nexthop in the MP_REACH_NLRI or\n   MP_UNREACH_NLRI attribute.
    \ The nexthop address is set based on the\n   AFI in the attribute.  For example,
    if the AFI is set to IPv4 (1),\n   the nexthop is encoded as a 4-byte IPv4 address.
    \ If the AFI is set\n   to IPv6 (2), the nexthop is encoded as a 16-byte IPv6
    address of the\n   router.  On the receiving router, the BGP nexthop of such an
    update\n   message is validated by performing a recursive route lookup operation\n
    \  in the routing table.\n   Bestpath selection of Encapsulation NLRIs is governed
    by the decision\n   process outlined in Section 9.1 of [RFC4271].  The encapsulation
    data\n   carried through other attributes in the message are to be used by the\n
    \  receiving router only if the NLRI has a bestpath.\n"
  title: 3.  Encapsulation NLRI Format
- contents:
  - "4.  Tunnel Encapsulation Attribute\n   The Tunnel Encapsulation attribute is
    an optional transitive\n   attribute that is composed of a set of Type-Length-Value
    (TLV)\n   encodings.  The type code of the attribute is 23.  Each TLV contains\n
    \  information corresponding to a particular tunnel technology.  The TLV\n   is
    structured as follows:\n       0                   1                   2                   3\n
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |    Tunnel Type (2 Octets)     |        Length (2 Octets)      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                                                               |\n      |
    \                            Value                             |\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   *
    Tunnel Type (2 octets): identifies the type of tunneling technology\n     being
    signaled.  This document defines the following types:\n     - L2TPv3 over IP [RFC3931]:
    Tunnel Type = 1\n     - GRE [RFC2784]: Tunnel Type = 2\n     - IP in IP [RFC2003]
    [RFC4213]: Tunnel Type = 7\n     Unknown types are to be ignored and skipped upon
    receipt.\n   * Length (2 octets): the total number of octets of the value field.\n
    \  * Value (variable): comprised of multiple sub-TLVs.  Each sub-TLV\n     consists
    of three fields: a 1-octet type, 1-octet length, and zero\n     or more octets
    of value.  The sub-TLV is structured as follows:\n                     +-----------------------------------+\n
    \                    |      Sub-TLV Type (1 Octet)       |\n                     +-----------------------------------+\n
    \                    |     Sub-TLV Length (1 Octet)      |\n                     +-----------------------------------+\n
    \                    |     Sub-TLV Value (Variable)      |\n                     |
    \                                  |\n                     +-----------------------------------+\n
    \  * Sub-TLV Type (1 octet): each sub-TLV type defines a certain\n     property
    about the tunnel TLV that contains this sub-TLV.  The\n     following are the
    types defined in this document:\n     - Encapsulation: sub-TLV type = 1\n     -
    Protocol type: sub-TLV type = 2\n     - Color: sub-TLV type = 4\n     When the
    TLV is being processed by a BGP speaker that will be\n     performing encapsulation,
    any unknown sub-TLVs MUST be ignored and\n     skipped.  However, if the TLV is
    understood, the entire TLV MUST\n     NOT be ignored just because it contains
    an unknown sub-TLV.\n   * Sub-TLV Length (1 octet): the total number of octets
    of the sub-TLV\n     value field.\n   * Sub-TLV Value (variable): encodings of
    the value field depend on\n     the sub-TLV type as enumerated above.  The following
    sub-sections\n     define the encoding in detail.\n"
  - contents:
    - "4.1.  Encapsulation Sub-TLV\n   The syntax and semantics of the encapsulation
      sub-TLV is determined\n   by the tunnel type of the TLV that contains this sub-TLV.\n
      \  When the tunnel type of the TLV is L2TPv3 over IP, the following is\n   the
      structure of the value field of the encapsulation sub-TLV:\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                      Session ID (4 octets)                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                                                               |\n      |
      \                       Cookie (Variable)                      |\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   *
      Session ID: a non-zero 4-octet value locally assigned by the\n     advertising
      router that serves as a lookup key in the incoming\n     packet's context.\n
      \  * Cookie: an optional, variable length (encoded in octets -- 0 to 8\n     octets)
      value used by L2TPv3 to check the association of a received\n     data message
      with the session identified by the Session ID.\n     Generation and usage of
      the cookie value is as specified in\n     [RFC3931].\n     The length of the
      cookie is not encoded explicitly, but can be\n     calculated as (sub-TLV length
      - 4).\n   When the tunnel type of the TLV is GRE, the following is the\n   structure
      of the value field of the encapsulation sub-TLV:\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                      GRE Key (4 octets)                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  * GRE Key: 4-octet field [RFC2890] that is generated by the\n     advertising
      router.  The actual method by which the key is obtained\n     is beyond the
      scope of this document.  The key is inserted into the\n     GRE encapsulation
      header of the payload packets sent by ingress\n     routers to the advertising
      router.  It is intended to be used for\n     identifying extra context information
      about the received payload.\n     Note that the key is optional.  Unless a key
      value is being\n     advertised, the GRE encapsulation sub-TLV MUST NOT be present.\n"
    title: 4.1.  Encapsulation Sub-TLV
  - contents:
    - "4.2.  Protocol Type Sub-TLV\n   The protocol type sub-TLV MAY be encoded to
      indicate the type of the\n   payload packets that will be encapsulated with
      the tunnel parameters\n   that are being signaled in the TLV.  The value field
      of the sub-TLV\n   contains a 2-octet protocol type that is one of the types
      defined in\n   [IANA-AF] as ETHER TYPEs.\n   For example, if we want to use
      three L2TPv3 sessions, one carrying\n   IPv4 packets, one carrying IPv6 packets,
      and one carrying MPLS\n   packets, the egress router will include three TLVs
      of L2TPv3\n   encapsulation type, each specifying a different Session ID and
      a\n   different payload type.  The protocol type sub-TLV for these will be\n
      \  IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and\n   MPLS
      (protocol type = 0x8847), respectively.  This informs the\n   ingress routers
      of the appropriate encapsulation information to use\n   with each of the given
      protocol types.  Insertion of the specified\n   Session ID at the ingress routers
      allows the egress to process the\n   incoming packets correctly, according to
      their protocol type.\n   Inclusion of this sub-TLV depends on the tunnel type.
      \ It MUST be\n   encoded for L2TPv3 tunnel type.  On the other hand, the protocol
      type\n   sub-TLV is not required for IP in IP or GRE tunnels.\n"
    title: 4.2.  Protocol Type Sub-TLV
  - contents:
    - "4.3.  Color Sub-TLV\n   The color sub-TLV MAY be encoded as a way to color
      the corresponding\n   tunnel TLV.  The value field of the sub-TLV contains an
      extended\n   community that is defined as follows:\n"
    - contents:
      - "4.3.1.  Color Extended Community\n   The Color Extended Community is an opaque
        extended community\n   [RFC4360] with the following encoding:\n           0
        \                  1                   2                   3\n           0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         |       0x03    |     0x0b      |           Reserved            |\n
        \         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         |                          Color Value                          |\n
        \         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The value of the high-order octet of the extended type field is 0x03,\n
        \  which indicates it is transitive.  The value of the low-order octet\n   of
        the extended type field for this community is 0x0b.  The color\n   value is
        user defined and configured locally on the routers.  The\n   same Color Extended
        Community can then be attached to the UPDATE\n   messages that contain payload
        prefixes.  This way, the BGP speaker\n   can express the fact that it expects
        the packets corresponding to\n   these payload prefixes to be received with
        a particular tunnel\n   encapsulation header.\n"
      title: 4.3.1.  Color Extended Community
    title: 4.3.  Color Sub-TLV
  - contents:
    - "4.4.  Tunnel Type Selection\n   A BGP speaker may include multiple tunnel TLVs
      in the tunnel\n   attribute.  The receiving speaker MAY have local policies
      defined to\n   choose different tunnel types for different sets/types of payload\n
      \  prefixes received from the same BGP speaker.  For instance, if a BGP\n   speaker
      includes both L2TPv3 and GRE tunnel types in the tunnel\n   attribute and it
      also advertises IPv4 and IPv6 prefixes, the ingress\n   router may have local
      policy defined to choose L2TPv3 for IPv4\n   prefixes (provided the protocol
      type received in the tunnel attribute\n   matches) and GRE for IPv6 prefixes.\n
      \  Additionally, the Encapsulation SAFI UPDATE message can contain a\n   color
      sub-TLV for some or all of the tunnel TLVs.  The BGP speaker\n   SHOULD then
      attach a Color Extended Community to payload prefixes to\n   select the appropriate
      tunnel types.\n   In a multi-vendor deployment that has routers supporting different\n
      \  tunneling technologies, including color sub-TLV to the Encapsulation\n   SAFI
      UPDATE message can serve as a classification mechanism (for\n   example, set
      A of routers for GRE and set B of routers for L2TPv3).\n   The ingress router
      can then choose the encapsulation data\n   appropriately while sending packets
      to an egress router.\n   If a BGP speaker originates an update for prefix P
      with color C and\n   with itself as the next hop, then it MUST also originate
      an\n   Encapsulation SAFI update that contains the color C.\n   Suppose that
      a BGP speaker receives an update for prefix P with color\n   C, that the BGP
      decision procedure has selected the route in that\n   update as the best route
      to P, and that the next hop is node N, but\n   that an Encapsulation SAFI update
      originating from node N containing\n   color C has not been received.  In this
      case, no route to P will be\n   installed in the forwarding table unless and
      until the corresponding\n   Encapsulation SAFI update is received, or the BGP
      decision process\n   selects a different route.\n   Suppose that a BGP speaker
      receives an \"uncolored\" update for prefix\n   P, with next hop N, and that
      the BGP speaker has also received an\n   Encapsulation SAFI originated by N,
      specifying one or more\n   encapsulations that may or may not be colored.  In
      this case, the\n   choice of encapsulation is a matter of local policy.  The
      only\n   \"default policy\" necessary is to choose one of the encapsulations\n
      \  supported by the speaker.\n"
    title: 4.4.  Tunnel Type Selection
  - contents:
    - "4.5.  BGP Encapsulation Extended Community\n   Here, we define a BGP opaque
      extended community that can be attached\n   to BGP UPDATE messages to indicate
      the encapsulation protocol to be\n   used for sending packets from an ingress
      router to an egress router.\n   Considering our example from the Section 1,
      R2 MAY include this\n   extended community, specifying a particular tunnel type
      to be used in\n   the UPDATE message that carries route Q to R1.  This is useful
      if\n   there is no explicit encapsulation information to be signaled using\n
      \  the Encapsulation SAFI for a tunneling protocol (such as GRE without\n   key).\n
      \       0                   1                   2                   3\n        0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |       0x03    |      0x0c     |           Reserved            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |            Reserved           |          Tunnel Type          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The value of the high-order octet of the extended type field is 0x03,\n   which
      indicates it's transitive.  The value of the low-order octet of\n   the extended
      type field is 0x0c.\n   The last two octets of the value field encode a tunnel
      type as\n   defined in this document.\n   For interoperability, a speaker supporting
      Encapsulation SAFI MUST\n   implement the Encapsulation Extended Community.\n"
    title: 4.5.  BGP Encapsulation Extended Community
  title: 4.  Tunnel Encapsulation Attribute
- contents:
  - "5.  Capability Advertisement\n   A BGP speaker that wishes to exchange tunnel
    endpoint information\n   must use the Multiprotocol Extensions Capability Code
    as defined in\n   [RFC4760], to advertise the corresponding (AFI, SAFI) pair.\n"
  title: 5.  Capability Advertisement
- contents:
  - "6.  Error Handling\n   When a BGP speaker encounters an error while parsing the
    tunnel\n   encapsulation attribute, the speaker MUST treat the UPDATE as a\n   withdrawal
    of existing routes to the included Encapsulation SAFI\n   NLRIs, or discard the
    UPDATE if no such routes exist.  A log entry\n   should be raised for local analysis.\n"
  title: 6.  Error Handling
- contents:
  - "7.  Security Considerations\n   Security considerations applicable to softwires
    can be found in the\n   mesh framework [MESH].  In general, security issues of
    the tunnel\n   protocols signaled through Encapsulation SAFI are inherited.\n
    \  If a third party is able to modify any of the information that is\n   used
    to form encapsulation headers, to choose a tunnel type, or to\n   choose a particular
    tunnel for a particular payload type, user data\n   packets may end up getting
    misrouted, misdelivered, and/or dropped.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   IANA assigned value 7 from the \"Subsequent Address
    Family\" Registry,\n   in the \"Standards Action\" range, to \"Encapsulation SAFI\",
    with this\n   document as the reference.\n   IANA assigned value 23 from the \"BGP
    Path Attributes\" Registry, to\n   \"Tunnel Encapsulation Attribute\", with this
    document as the\n   reference.\n   IANA assigned two new values from the \"BGP
    Opaque Extended Community\"\n   type Registry.  Both are from the transitive range.
    \ The first new\n   value is called \"Color Extended Community\" (0x030b), and
    the second\n   is called \"Encapsulation Extended Community\"(0x030c).  This document\n
    \  is the reference for both assignments.\n   IANA set up a registry for \"BGP
    Tunnel Encapsulation Attribute Tunnel\n   Types\".  This is a registry of two-octet
    values (0-65535), to be\n   assigned on a first-come, first-served basis.  The
    initial\n   assignments are as follows:\n      Tunnel Name                             Type\n
    \     ---------------                         -----\n      L2TPv3 over IP                            1\n
    \     GRE                                       2\n      IP in IP                                  7\n
    \  IANA set up a registry for \"BGP Tunnel Encapsulation Attribute Sub-\n   TLVs\".
    \ This is a registry of 1-octet values (0-255), to be assigned\n   on a \"standards
    action/early allocation\" basis.  This document is the\n   reference.  The initial
    assignments are:\n      Sub-TLV name                            Type\n      -------------
    \                          -----\n      Encapsulation                             1\n
    \     Protocol Type                             2\n      Color                                     4\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgements\n   This specification builds on prior work by Gargi Nalawade,
    Ruchi\n   Kapoor, Dan Tappan, David Ward, Scott Wainner, Simon Barber, and\n   Chris
    Metz.  The current authors wish to thank all these authors for\n   their contribution.\n
    \  The authors would like to thank John Scudder, Robert Raszuk, Keyur\n   Patel,
    Chris Metz, Yakov Rekhter, Carlos Pignataro, and Brian\n   Carpenter for their
    valuable comments and suggestions.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC4271]  Rekhter, Y., Ed., Li, T., Ed., and
      S. Hares, Ed., \"A\n              Border Gateway Protocol 4 (BGP-4)\", RFC 4271,
      January\n              2006.\n   [RFC4760]  Bates, T., Chandra, R., Katz, D.,
      and Y. Rekhter,\n              \"Multiprotocol Extensions for BGP-4\", RFC 4760,
      January\n              2007.\n   [RFC4360]  Sangli, S., Tappan, D., and Y. Rekhter,
      \"BGP Extended\n              Communities Attribute\", RFC 4360, February 2006.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3931]  Lau, J., Ed., Townsley,
      M., Ed., and I. Goyret, Ed.,\n              \"Layer Two Tunneling Protocol -
      Version 3 (L2TPv3)\", RFC\n              3931, March 2005.\n   [RFC2784]  Farinacci,
      D., Li, T., Hanks, S., Meyer, D., and P.\n              Traina, \"Generic Routing
      Encapsulation (GRE)\", RFC 2784,\n              March 2000.\n   [RFC2890]  Dommety,
      G., \"Key and Sequence Number Extensions to GRE\",\n              RFC 2890,
      September 2000.\n   [RFC2003]  Perkins, C., \"IP Encapsulation within IP\",
      RFC 2003,\n              October 1996.\n   [RFC4213]  Nordmark, E. and R. Gilligan,
      \"Basic Transition Mechanisms\n              for IPv6 Hosts and Routers\", RFC
      4213, October 2005.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [IANA-AF]  \"Address Family Numbers,\" http://www.iana.org.\n
      \  [MESH]     Wu, J., Cui, Y., Metz, C., and E. Rosen, \"Softwire Mesh\n              Framework,\"
      Work in Progress, February 2009.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Pradosh Mohapatra\n   Cisco Systems, Inc.\n   170 Tasman
    Drive\n   San Jose, CA, 95134\n   EMail: pmohapat@cisco.com\n   Eric Rosen\n   Cisco
    Systems, Inc.\n   1414 Massachusetts Avenue\n   Boxborough, MA, 01719\n   EMail:
    erosen@cisco.com\n"
  title: Authors' Addresses
