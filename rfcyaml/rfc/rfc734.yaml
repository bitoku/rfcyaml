- title: __initial_text__
  contents:
  - "\t\t\t  SUPDUP Protocol\nINTRODUCTION\nThis document describes  the SUPDUP protocol,\
    \  a highly efficient  display\ntelnet protocol.  It originally started as a private\
    \ protocol between  the\nITS systems at MIT to allow a user at any one of these\
    \ systems to use  one\nof the others as a display.  At the current writing, SUPDUP\
    \ user  programs\nalso exist  for  Data  Disc  and  Datamedia  displays  at  SU-AI\
    \  and  for\nDatamedias at SRI-KL.  The author is not aware of any SUPDUP servers\
    \ other\nthan at the four MIT ITS sites.\nThe advantage  of  the  SUPDUP  protocol\
    \  over  an  individual  terminal's\nprotocol is that SUPDUP defines a \"virtual\"\
    \ or \"software\" display terminal\nthat implements relevant  cursor motion operations.\
    \   The protocol is  not\nbuilt on  any  particular  display  terminal but  rather\
    \  on  the  set  of\nfunctions common to all display terminals; hence it is completely\
    \  device-\nindependent.  In addition, the protocol also provides for terminals\
    \  which\ncannot handle certain operations, such as line or character insert/delete.\n\
    In fact,  it is  more than  this.   It provides  for terminals  which  are\nmissing\
    \ any set of features, all the way down to model 33 Teletypes.\nThe advantage\
    \ over the TELNET protocol  is that SUPDUP takes advantage  of\nthe full  capabilities\
    \ of  display  terminals, although  it also  has  the\nability to run printing\
    \ terminals.\nIt is to be  noted that SUPDUP operates  independently from TELNET;\
    \ it  is\nnot an option to  the TELNET protocol.   In addition, certain  assumptions\n\
    are made about the  server and the user  programs and their  capabilities.\nSpecifically,\
    \ it is  assumed that the  operating system on  a server  host\nprovides all the\
    \ display-oriented features of ITS.  However, a server  may\nelect not to do certain\
    \ display operations available in SUPDUP; the SUPDUP\nprotocol is far-reaching\
    \ enough so  that the protocol allows terminals  to\nbe handled  as well  as that\
    \  host can  handle terminals  in general.   Of\ncourse, if a host does not  support\
    \ display terminals in any special  way,\nthere is no point in bothering  to implement\
    \ a SUPDUP server since  TELNET\nwill work just as well.\nA more complete description\
    \  of the display facilities  of SUPDUP and  ITS\ncan be found by FTP'ing the\
    \  online file .INFO.;ITS TTY from ARPAnet  host\nMIT-AI (host 206 octal, 134.\
    \ decimal).  For more information, the  mailing\naddress for SUPDUP is \"(BUG\
    \ SUPDUP) at MIT-AI\".  If your mail system won't\nallow you to use parentheses,\
    \ use Bug-SUPDUP@MIT-AI.\nSUPDUP Display Protocol\t\t\t\t\t\t    Page 2\nBACKGROUND\n\
    The SUPDUP protocol originated as the internal protocol used between parts\nof\
    \ ITS, and between ITS and \"intelligent\" terminals.  Over the network,  a\n\
    user host acts like an intelligent terminal programmed for ITS.\nThe way terminal\
    \  output works  in ITS is  as follows:   The user  program\ntells the system\
    \ to  do various operations,  such as printing  characters,\nclearing the screen,\
    \ moving the cursor, etc.  These operations are  formed\ninto 8-bit characters\
    \  (using the  %TD codes described  below) and  stored\ninto a  buffer.   At interrupt\
    \  level,  as the  terminal  demands  output,\ncharacters are  removed  from \
    \ the buffer  and  translated  into  terminal\ndependent codes.  At this time\
    \  padding and cursor motion optimization are\nalso done.\nIn some cases, the\
    \ interrupt side does not run on the same machine as  the\nuser program.  SUPDUP\
    \ terminals have their \"interrupt side\" running in the\nuser host.  When  SUPDUP\
    \ is  run between two  ITS's, the  SUPDUP user  and\nserver programs and the network\
    \ simply move characters from the buffer  in\nthe server machine to the buffer\
    \ in the user machine.  The interrupt  side\nthen runs on the user machine just\
    \ as if the characters had been generated\nlocally.\nDue to the highly interactive\
    \ characteristics of both the SUPDUP  protocol\nand the ITS system, all transactions\
    \ are strictly character at a time  and\nall echoing  is  remote.  In  addition,\
    \  all padding  and  cursor  control\noptimization must be done by the user.\n\
    Because this is also the internals of ITS, the right to change it any time\nif\
    \ necessary to provide new features  is reserved by MIT.  In  particular,\nthe\
    \ initial  negotiation  is probably  going  to be  changed  to  transmit\nadditional\
    \ variables, and additional %TD codes  may be added at any  time.\nUser programs\
    \ should ignore those they don't know about.\nThe following conventions are  used\
    \ in this  document: function keys  (ie,\nkeys which represent a \"function\"\
    \  rather than a \"graphic character\")  are\nin upper case in square brackets.\
    \  Prefix keys (ie, keys which generate no\ncharacter but  rather are  held  down\
    \ while  typing another  character  to\nmodify that  character)  are  in  upper\
    \ case  in  angle  brackets.   Hence\n\"<CONTROL><META>[LINE FEED]\" refers to\
    \  the character generated when  both\nthe CONTROL and META keys  are held down\
    \ while a LINE FEED is typed.  Case\nshould  be  noted;  <CONTROL>A  refers  to\
    \  a  different  character   from\n<CONTROL>a.  Finally, all numbers which  do\
    \ not explicitly specify a  base\n(ie, octal  or decimal)  should be  read  as\
    \ octal  unless the  number  is\nimmediately followed by a period, in which case\
    \ it is decimal.\nSUPDUP Display Protocol\t\t\t\t\t\t    Page 3\nINITIALIZATION\n\
    The SUPDUP server listens on socket 137 octal.  ICP proceeds in the normal\nway\
    \ for establishing 8-bit connections.   After the ICP is completed,  the\nuser\
    \ side  sends several  parameters to  the server  side in  the form  of\n36.-bit\
    \ words.  Each  word is  sent through  the 8-bit  connection as  six\n6-bit bytes,\
    \ most-significant first.  Each byte is in the low-order 6 bits\nof a character.\
    \  The first word is the negative of the number of variables\nto follow in the\
    \ high order 18. bits (the low-order 18. bits are ignored),\nfollowed by the \
    \ values of  the TCTYP,  TTYOPT, TCMXV,  TCMXH, and  TTYROL\nterminal descriptor\
    \ variables (these  are the names they  are known by  at\nITS sites).  These \
    \ variables are  36.-bit binary numbers  and define  the\nterminal characteristics\
    \ for the virtual terminal at the REMOTE host.\nThe count is for future compatability.\
    \  If more variables need to be  sent\nin the future, the server should assume\
    \ \"reasonable\" default values if the\nuser does not specify them.  PDP-10 fans\
    \ will recognize the format of  the\ncount (ie, -count,,0) as being an  AOBJN\
    \ pointer.  At the present  writing\nthere are five variables hence this word\
    \ should be -5,,0.\nThe TCTYP variable defines the terminal type.  It MUST be\
    \ 7 (%TNSFW).  Any\nother value is a violation of protocol.\nThe TTYOPT  variable\
    \ specifies  what capabilities  or options  the  user's\nterminal has.  A bit\
    \ being true implies that the terminal has this option.\nThis variable also includes\
    \ user options which the user may wish to  alter\nat his or her own descretion;\
    \ these options are included since they may be\nspecified along with the terminal\
    \ capabilities in the initial negotiation.\nSee below for the relevant TTYOPT\
    \ bits.\nThe TCMXV variable specifies the screen height in number of lines.\n\
    The TCMXH variable specifies the line width in number of characters.  This\nvalue\
    \ is one less  than the screen width  (ITS indicates line overflow  by\noutputting\
    \ an exclamation  point at  the end  of the  display line  before\nmoving to the\
    \  next line).  Note:  the terminal must  not do an  automatic\nCRLF when a  character\
    \ is  printed in the  rightmost column.   If this  is\nunavoidable, the user SUPDUP\
    \ must decrement the width it sends by one.\nNote: Setting either the TCMXV or\
    \  TCMXH dimension greater than 128.  will\nwork, but will have some problems\
    \ as coordinates are sometimes represented\nin only  7 bits.   The main  problems\
    \ occur  in the  SUPDUP protocol  when\nsending the cursor position after an output\
    \ reset and in ITS user programs\nusing the display position codes ^PH and ^PV.\n\
    The TTYROL variable specifies the \"glitch count\" when scrolling.  This  is\n\
    the number of lines to scroll up when scrolling is required.  If zero, the\nterminal\
    \ is not  capable of  scrolling.  1 is  the usual  value, but  some\nterminals\
    \ glitch up by more than one line when they scroll.\nFollowing the transmission\
    \ of the terminal options by the user, the server\nshould respond with an  ASCII\
    \ greeting message,  terminated with a  %TDNOP\ncode (%TD codes are described\
    \  below).  All transmissions from the  server\nafter the  %TDNOP  are  either\
    \ printing  characters  or  virtual  terminal\ndisplay codes.\nSUPDUP Display\
    \ Protocol\t\t\t\t\t\t    Page 4\nThe user  and  the  server  now both  communicate\
    \  using  the  intelligent\nterminal protocol (described below) from the  user\
    \ and %TD codes from  the\nserver.  The user has two commands in addition to these;\
    \ they are  escaped\nby sending 300  (octal).  If following  the escape is  a\
    \ 301 (octal),  the\nserver should attempt to  log off the remote  job (generally\
    \ this is  sent\nimmediately before the user disconnects,  so this logout procedure\
    \  should\nbe done regardless of the continuing integrity of the connection).\
    \  If the\ncharacter following  the escape  is a  302 (octal),  all ASCII  characters\n\
    following up to a null (000  octal) are interpreted as \"console  location\"\n\
    which the server  can handle as  it pleases.  No  carriage return or  line\nfeed\
    \ should be in the console location text.  Normally this is saved  away\nto be\
    \ displayed by the \"who\" command when other users ask where this  user\nis located.\n\
    SUPDUP Display Protocol\t\t\t\t\t\t    Page 5\nTTYOPT FUNCTION BITS\nThe relevant\
    \ TTYOPT bits for SUPDUP usage follow.  The values are given in\noctal, with the\
    \ left and right 18-bit  halves separated by \",,\" as in  the\nusual PDP-10 convention.\n\
    Bit name\tValue\t\tMeaning\n%TOALT\t\t200000,,0\tcharacters  175  and 176  are\
    \ converted to\n\t\t\t\taltmode (033) on input.\n%TOERS\t\t 40000,,0\tthis  terminal\
    \  is capable  of selectively\n\t\t\t\terasing its  screen.  That is, it supports\n\
    \t\t\t\tthe %TDEOL,  the %TDDLF,  and (optionally)\n\t\t\t\tthe  %TDEOF  operations.\
    \   For   terminals\n\t\t\t\twhich   can   only   do   single-character\n\t\t\t\
    \terasing, see %TOOVR.\n%TOMVB\t\t 10000,,0\tthis  terminal  is capable of  backspacing\n\
    \t\t\t\t(ie, moving the cursor backwards).\n%TOSAI\t\t  4000,,0\tthis   terminal\
    \   has   the   Stanford/ITS\n\t\t\t\textended ASCII graphics character set.\n\
    %TOOVR\t\t  1000,,0\tthis terminal is  capable of overprinting;\n\t\t\t\tif  two\
    \  characters  are  displayed in the\n\t\t\t\tsame  position, they will both be\
    \ visible,\n\t\t\t\trather than one replacing the other.\n\t\t\t\tLack of this\
    \ capability but the capability\n\t\t\t\tto backspace (see %TOMVB) implies that\
    \ the\n\t\t\t\tterminal can  do single  character erasing\n\t\t\t\tby overstriking\
    \ with a space.  This allows\n\t\t\t\tterminals without the %TOERS capability\
    \ to\n\t\t\t\thave display-style \"rubout processing\", as\n\t\t\t\tthis capability\
    \ depends upon either %TOERS\n\t\t\t\tor [%TOMVB and not %TOOVR].\n%TOMVU\t\t\
    \   400,,0\tthis terminal  is capable  of  moving  the\n\t\t\t\tcursor upwards.\n\
    %TOLWR\t\t    20,,0\tthis  terminal's  keyboard is  capable  of\n\t\t\t\tgenerating\
    \ lowercase characters;  this bit\n\t\t\t\tis mostly provided for programs which\
    \ want\n\t\t\t\tto know this information.\n%TOFCI\t\t    10,,0\tthis  terminal's\
    \  keyboard is  capable  of\n\t\t\t\tgenerating  CONTROL and META characters as\n\
    \t\t\t\tdescribed below.\n%TOLID\t\t     2,,0\tthis  terminal  is  capable  of\
    \ doing line\n\t\t\t\tinsert/delete operations,  ie, it supports\n\t\t\t\t%TDILP\
    \ and %TDDLP.\n%TOCID\t\t     1,,0\tthis   terminal   is   capable   of  doing\n\
    \t\t\t\tcharacter insert/delete operations, ie, it\n\t\t\t\tsupports %TDICP and\
    \ %TDDCP.\nSUPDUP Display Protocol\t\t\t\t\t\t    Page 6\nTTYOPT FUNCTION BITS\
    \ (continued)\nBit name\tValue\t\tMeaning\n%TPCBS\t\t     0,,40\tthis terminal\
    \ is  using  the  \"intelligent\n\t\t\t\tterminal protocol\".\n\t\t\t\t THIS BIT\
    \ MUST BE ON.\n%TPORS\t\t     0,,10\tthe server should  process  output  resets\n\
    \t\t\t\tinstead of ignoring them.\n\t\t\t\t IT IS HIGHLY RECOMMENDED THAT THIS\
    \ BIT BE\n\t\t\t\tON; OTHERWISE THERE MAY BE LARGE DELAYS IN\n\t\t\t\tABORTING\
    \ OUTPUT.\nThe following bits are user  option bits.  They may be  set or not\
    \ set  at\nthe user's discretion.  The bits that are labelled \"normally on\"\
    \ are those\nthat are normally  set on when  a terminal is  initialized (ie, by\
    \  typing\n[CALL] on a local terminal).\nBit name\tValue\t\tMeaning\n%TOCLC\t\t\
    100000,,0\tconvert  lower-case  input to  upper case.\n\t\t\t\tMany  terminals\
    \  have  a  \"shift lock\" key\n\t\t\t\twhich makes this option useless.\n\t\t\
    \t\t NORMALLY OFF.\n%TOSA1\t\t  2000,,0\tcharacters  001-037  should  be  displayed\n\
    \t\t\t\tusing  the  Stanford/ITS  extended   ASCII\n\t\t\t\tgraphics character\
    \ set instead of  uparrow\n\t\t\t\tfollowed by 100+character.\n\t\t\t\t NORMALLY\
    \ OFF.\n%TOMOR\t\t   200,,0\tthe   system   should  provide  \"**MORE**\"\n\t\t\
    \t\tprocessing when  the  cursor  reaches  the\n\t\t\t\tbottom  line  of  the\
    \  screen.    **MORE**\n\t\t\t\tprocessing is described in ITS TTY.\n\t\t\t\t\
    \ NORMALLY ON.\n%TOROL\t\t   100,,0\tthe terminal should scroll when attempting\n\
    \t\t\t\toutput below the bottom line of the screen\n\t\t\t\tinstead of wrapping\
    \ around to the top.\n\t\t\t\t NORMALLY OFF.\nSUPDUP Display Protocol\t\t\t\t\t\
    \t    Page 7\nINPUT -- THE INTELLIGENT TERMINAL PROTOCOL\nNote: only  the parts\
    \  of the  intelligent terminal  protocol relevant  to\nSUPDUP are discussed here.\
    \  For more information, read ITS TTY.\nCHARACTER SETS\nThere are two  character\
    \ sets  available for  use with  SUPDUP; the  7-bit\ncharacter set of standard\
    \ ASCII, and the 12-bit character set of  extended\nASCII.  Extended ASCII has\
    \ 5 high order  or \"bucky\" bits on input and  has\ngraphics for octal 000-037\
    \ and 177 (see the section entitled \"Stanford/ITS\ncharacter set\" for more details).\
    \  The two character sets are identical on\noutput since the protocol  specifies\
    \ that the host  should never send  the\nstandard ASCII  formatting  characters\
    \  (ie,  TAB,  LF,  VT,  FF,  CR)  as\nformatting characters; the characters whose\
    \  octal values are the same  as\nthese formatting characters are never output\
    \ unless the user job has these\ncharacters enabled (setting %TOSAI and %TOSA1\
    \ generally does this).\nInput differs dramatically  between the 7-bit  and 12-bit\
    \ character  sets.\nIn the 7-bit character set, all characters input whose value\
    \ is 037  octal\nor less  are assumed  to be  (ASCII) control  characters.  In\
    \  the  12-bit\ncharacter set,  there are  5 \"bucky\"  bits which  may be  attached\
    \ to  the\ncharacter.  The two most  important of these are  CONTROL and META,\
    \  which\nform a 9-bit character set.  TOP  is used to distinguish between  printing\n\
    graphics in the extended character set and ASCII controls.  The other  two\nare\
    \ reserved and should be ignored.  Since both 7-bit and 12-bit terminals\nare\
    \ commonly in use, 0001, 0301, and 0341 are considered to be  <CONTROL>A\non input\
    \ by most programs, while 4001 is considered to be downwards arrow.\nMAPPING BETWEEN\
    \ CHARACTER SETS\nMany programs and hosts do not process 12-bit input.  In this\
    \ case, 12-bit\ninput is folded down to 7-bit as follows: TOP and META are discarded.\
    \   If\nCONTROL is on, then if the 7-bit  part of the character specifies a  lower\n\
    case alphabetic it is converted to upper  case; then if the 7-bit part  is\nbetween\
    \ 077 and 137 the  100 bit is complemented or  if the 7-bit part  is\n040 the\
    \ 040 bit is subtracted  (that's right, <CONTROL>?  is converted  to\n[RUBOUT]\
    \ and <CONTROL>[SPACE] is  converted to [NULL]).   In any case  the\nCONTROL bit\
    \ is discarded,  and the remainder is  treated as a 7-bit  ASCII\ncharacter. \
    \ It should be noted that  in this case downwards arrow is  read\nby the program\
    \ as standard ASCII <CONTROL>A.\nServers which expect 12-bit input and are told\
    \ to use the 7-bit  character\nset should  do  appropriate unfolding  from  the\
    \ 7-bit  character  set  to\n12-bit.  It is up  to the individual server  to decide\
    \ upon the  unfolding\nscheme.  On ITS, user programs that use the 12-bit character\
    \ set generally\nhave an alternative method for 7-bit; this often takes the form\
    \ of  prefix\ncharacters indicating that the next character should be \"controllified\"\
    \ or\n\"metized\", etc.\nSUPDUP Display Protocol\t\t\t\t\t\t    Page 8\nINPUT\
    \ -- THE INTELLIGENT TERMINAL PROTOCOL (continued)\nBUCKY BITS\nUnder normal circumstances,\
    \ characters input from the keyboard are sent to\nthe foreign host as is.  There\
    \  are two exceptions; the first occurs  when\nan octal 034  character is to \
    \ be sent; it  must be quoted  by being  sent\ntwice, because 034 is used as \
    \ an escape character for protocol  commands.\nThe second  exception occurs  when\
    \  %TOFCI is  set  and a  character  with\nnon-zero bucky bits is to be sent.\
    \  In this case, the character, which  is\nin the 12-bit form:\nName\tValue\t\
    Description\n%TXTOP\t4000\tThis character has the [TOP] key depressed.\n%TXSFL\t\
    2000\tReserved, must be zero.\n%TXSFT\t1000\tReserved, must be zero.\n%TXMTA\t\
    \ 400\tThis character has the [META] key depressed.\n%TXCTL\t 200\tThis character\
    \ has the [CONTROL] key depressed.\n%TXASC\t 177\tThe ASCII portion of the character\n\
    is sent as three bytes.  The first  byte is always 034 octal (that is  why\n034\
    \ must be  quoted).  The next  byte contains the  \"bucky bits\", ie,  the\n%TXTOP\
    \ through %TXCTL bits,  shifted over 7 bits  (ie, %TXTOP becomes  20)\nwith the\
    \ 100  bit on.   The third  byte contains  the %TXASC  part of  the\ncharacter.\
    \  Hence the character <CONTROL><META>[LINE FEED] is sent as  034\n103 012.\n\
    OUTPUT RESETS\nThe  intelligent  terminal  protocol  also  is  involved  when\
    \  a  network\ninterrupt (INR/INS) is  received by  the user program.   The user\
    \  program\nshould increment a count of received network interrupts when this\
    \ happens.\nIt should not do any output, and if possible abort any output in progress,\n\
    if this count is greater than zero  (NOTE: the program MUST allow for  the\ncount\
    \ to go less than zero).\nSince the server  no longer  knows where the  cursor\
    \ is,  it suspends  all\noutput until the user informs it of the cursor position.\
    \  This also  gives\nthe server an idea of how much was thrown out in case it\
    \ has to have  some\nof the aborted output  displayed at a later  time.  The user\
    \ program  does\nthis when it  receives a  %TDORS from the  server.  When  this\
    \ happens  it\nshould  decrement  the  \"number  of  received  network  interrupts\"\
    \  count\ndescribed in the previous paragraph and then send 034 followed by 020,\
    \ the\nvertical position,  and  the  horizontal  position  of  where  the  cursor\n\
    currently is located on the user's screen.\nSUPDUP Display Protocol\t\t\t\t\t\t\
    \    Page 9\nOUTPUT -- DISPLAY PROTOCOL (%TD CODES)\nDisplay output  is  somewhat\
    \  simpler.   Codes less  than  200  octal  are\nprinting characters and  are\
    \ displayed  on the terminal  (see the  section\ndescribing the \"Stanford/ITS\
    \ character set\").  Codes greater than or equal\nto 200 (octal) are known as\
    \ \"%TD codes\", so called since their names begin\nwith %TD.  The %TD codes that\
    \ are relevant to SUPDUP operation are  listed\nhere.  Any other code  received\
    \ should be ignored,  although a bug  report\nmight be sent  to the server's \
    \ maintainers.  Note that  the normal  ASCII\nformatting characters (011 - 015)\
    \ do NOT have their formatting sense under\nSUPDUP and should not occur at all\
    \ unless the Stanford/ITS extended  ASCII\ncharacter set is in use (ie, %TOSAI\
    \ is set in the TTYOPT word).\nFor cursor  positioning operations,  the  top left\
    \  corner is  (0,0),  ie,\nvertical position 0, horizontal position 0.\n%TD code\t\
    Value\t\tMeaning\n%TDMOV\t\t200\t\tGeneral cursor position code.  Followed by\n\
    \t\t\t\tfour bytes;  the  first  two are the \"old\"\n\t\t\t\tvertical  and horizontal\
    \ positions and may\n\t\t\t\tbe  ignored.    The  next  two are the new\n\t\t\t\
    \tvertical  and  horizontal  positions.  The\n\t\t\t\tcursor  should be moved\
    \  to this position.\n\t\t\t\tOn printing consoles (non %TOMVU), the old\n\t\t\
    \t\tvertical position may differ from the true\n\t\t\t\tvertical position;  this\
    \  can  occur  when\n\t\t\t\tscrolling.  In this case, the user program\n\t\t\t\
    \tshould set  its  idea of the old  vertical\n\t\t\t\tposition to what the %TDMOV\
    \ says and  then\n\t\t\t\tproceed.  Hence a %TDMOV with an old  vpos\n\t\t\t\t\
    of 20. and a new vpos of 22. should always\n\t\t\t\tmove the \"cursor\" down two\
    \ lines.  This is\n\t\t\t\tused to prevent the vertical position from\n\t\t\t\t\
    becoming infinite.\n%TDMV1\t\t201\t\tAn  internal  cursor  motion  code   which\n\
    \t\t\t\tshould not be seen;  but if it is,  it has\n\t\t\t\ttwo  argument bytes\
    \ after it and should be\n\t\t\t\ttreated the same as %TDMV0.\n%TDEOF\t\t202\t\
    \tErase  to  end  of  screen.   This  is  an\n\t\t\t\toptional function  since\
    \ many terminals do\n\t\t\t\tnot support this.   If  the terminal  does\n\t\t\t\
    \tnot  support this  function,  it should be\n\t\t\t\ttreated the same as %TDEOL.\n\
    \t\t\t\t%TDEOF does an erase to end of line,  then\n\t\t\t\terases  all lines\
    \ lower on the screen than\n\t\t\t\tthe cursor.  The cursor does not move.\n%TDEOL\t\
    \t203\t\tErase  to  end  of  line.  This erases the\n\t\t\t\tcharacter position\
    \ the  cursor  is at  and\n\t\t\t\tall  positions  to the right on  the  same\n\
    \t\t\t\tline.  The cursor does not move.\nSUPDUP Display Protocol\t\t\t\t\t\t\
    \   Page 10\nOUTPUT -- DISPLAY PROTOCOL (%TD CODES) (continued)\n%TD code\tValue\t\
    \tMeaning\n%TDDLF\t\t204\t\tClear the character position the cursor is\n\t\t\t\
    \ton.  The cursor does not move.\n%TDCRL\t\t207\t\tIf the cursor is not on the\
    \ bottom line of\n\t\t\t\tthe screen, move  cursor to  the beginning\n\t\t\t\t\
    of the next line and clear that line.   If\n\t\t\t\tthe  cursor is at the bottom\
    \ line,  scroll\n\t\t\t\tup.\n%TDNOP\t\t210\t\tNo-op; should be ignored.\n%TDORS\t\
    \t214\t\tOutput reset.   This code serves as a data\n\t\t\t\tmark for  aborting\
    \  output much as  IAC DM\n\t\t\t\tdoes in the ordinary TELNET protocol.\n%TDQOT\t\
    \t215\t\tQuotes the following  character.   This is\n\t\t\t\tused  when sending\
    \ 8-bit codes  which  are\n\t\t\t\tnot  %TD codes,  for instance when loading\n\
    \t\t\t\tprograms  into  an  intelligent  terminal.\n\t\t\t\tThe  following  character\
    \ should be passed\n\t\t\t\tthrough intact to the terminal.\n%TDFS\t\t216\t\t\
    Non-destructive forward space.  The cursor\n\t\t\t\tmoves right one position;\
    \  this  code will\n\t\t\t\tnot be sent at the end of a line.\n%TDMV0\t\t217\t\
    \tGeneral cursor position code.  Followed by\n\t\t\t\ttwo bytes; the new vertical\
    \ and horizontal\n\t\t\t\tpositions.\n%TDCLR\t\t220\t\tErase the screen.   Home\
    \ the cursor to the\n\t\t\t\ttop left hand corner of the screen.\n%TDBEL\t\t221\t\
    \tGenerate an audio tone, bell, whatever.\n%TDILP\t\t223\t\tInsert blank lines\
    \ at the cursor; followed\n\t\t\t\tby a byte containing a count of the number\n\
    \t\t\t\tof blank lines to insert.   The  cursor is\n\t\t\t\tunmoved.   The line\
    \ the cursor is  on  and\n\t\t\t\tall lines below it move down;  lines moved\n\
    \t\t\t\toff the bottom of the screen are lost.\n%TDDLP\t\t224\t\tDelete lines\
    \ at the cursor;  followed by a\n\t\t\t\tcount.  The cursor is unmoved.   The\
    \ first\n\t\t\t\tline  deleted is the  one the cursor is on.\n\t\t\t\tLines below\
    \ those deleted move up.  Newly-\n\t\t\t\tcreated lines  at the bottom of the\
    \ screen\n\t\t\t\tare blank.\nSUPDUP Display Protocol\t\t\t\t\t\t   Page 11\n\
    OUTPUT -- DISPLAY PROTOCOL (%TD CODES) (continued)\n%TD code\tValue\t\tMeaning\n\
    %TDICP\t\t225\t\tInsert  blank  character  positions at the\n\t\t\t\tcursor; \
    \ followed by  a count.  The cursor\n\t\t\t\tis unmoved.   The character the \
    \ cursor is\n\t\t\t\ton and all characters to the right  on the\n\t\t\t\tcurrent\
    \ line move to the right; characters\n\t\t\t\tmoved off the end of the line are\
    \ lost.\n%TDDCP\t\t226\t\tDelete characters at the cursor;  followed\n\t\t\t\t\
    by a count.   The cursor is unmoved.   The\n\t\t\t\tfirst  character  deleted\
    \  is the  one the\n\t\t\t\tcursor is on.  Newly-created characters at\n\t\t\t\
    \tthe end of the line are blank.\n%TDBOW\t\t227\t\tDisplay black characters on\
    \ white screen.\n\t\t\t\tHIGHLY OPTIONAL.\n%TDRST\t\t230\t\tReset %TDBOW and such\
    \ any future options.\nSUPDUP Display Protocol\t\t\t\t\t\t   Page 12\nSTANFORD/ITS\
    \ CHARACTER SET\nThis section describes the extended  ASCII character set.   It\
    \  originated\nwith the character set developed at SAIL but was modified for 1968\
    \ ASCII.\nThis character set only  applies to terminals with  the %TOSAI and \
    \ %TOFCI\nbits set in its TTYOPT word.  For non-%TOSAI terminals, the standard\
    \ ASCII\nprinting  characters  are  the  only  available  output  characters.\
    \   For\nnon-%TOFCI terminals, the standard ASCII characters are the only available\n\
    input characters.\nPRINTING CHARACTERS\nThe first table describes the printing\
    \ characters.  For output, the  7-bit\ncode is sent (terminal operations are performed\
    \ by %TD codes).  For input,\nthe characters with values 000-037 and 177 must\
    \ have the %TXTOP bit on  to\nindicate the graphic is intended rather than a function\
    \ or ASCII control.\nValue\tCharacter\n 4000\tcentered dot\n 4001\tdownward arrow\n\
    \ 4002\talpha\n 4003\tbeta\n 4004\tlogical AND\n 4005\tlogical NOT\n 4006\tepsilon\n\
    \ 4007\tpi\n 4010\tlambda\n 4011\tgamma\n 4012\tdelta\n 4013\tuparrow\n 4014\t\
    plus-minus\n 4015\tcircle-plus\n 4016\tinfinity\n 4017\tpartial delta\n 4020\t\
    proper subset (left horseshoe)\n 4021\tproper superset (right horseshoe)\n 4022\t\
    intersection (up horseshoe)\n 4023\tunion (downward horseshoe)\n 4024\tuniversal\
    \ quantifer\n 4025\texistential quantifier\n 4026\tcircle-X\n 4027\tdouble arrow\n\
    \ 4030\tleft arrow\n 4031\tright arrow\n 4032\tnot-equal\n 4033\tlozenge (diamond)\n\
    \ 4034\tless-than-or-equal\n 4035\tgreater-than-or-equal\n 4036\tequivalence\n\
    \ 4037\tlogical OR\n 0040\tfirst standard ASCII character (space)\n  ..\t\t. .\
    \ .\n 0176\tlast standard ASCII character (tilde)\n 4177\tintegral\nSUPDUP Display\
    \ Protocol\t\t\t\t\t\t   Page 13\nSTANFORD/ITS CHARACTER SET (continued)\nFUNCTION\
    \ KEYS AND SPECIAL CHARACTERS\nIn addition, the following special characters exist\
    \ for input only.  These\ncharacters are  function keys  rather than  printing\
    \ characters;  however,\nsome of these  characters have some  format effect or\
    \  graphic which  they\necho as; the host, not the SUPDUP program, handles any\
    \ such mappings.\nValue\tCharacter\tUsual echo\t\tUsual Function\n 0000\t[NULL]\n\
    \ 0010\t[BACK SPACE]\t\t\t\ttext formatting\n 0011\t[TAB]\t\t\t\t\ttext formatting\n\
    \ 0012\t[LINE FEED]\t\t\t\ttext formatting\n 0013\t[VT]\t\t\t\t\ttext formatting\n\
    \ 0014\t[FORM]\t\t\t\t\ttext formatting\n 0015\t[RETURN]\t\t\t\ttext formatting\n\
    \ 0032\t[CALL]\t\tuparrow-Z\t\tescape to system\n 0033\t[ALTMODE]\tlozenge or\
    \ $\t\tspecial activation\n 0037\t[BACK NEXT]\tuparrow-underscore\tmonitor command\
    \ prefix\n 0177\t[RUBOUT]\t\t\t\tcharacter delete\n 4101\t[ESCAPE]\t\t\t\tlocal\
    \ terminal command\n 4102\t[BREAK]\t\t\t\t\tlocal subsystem escape\n 4103\t[CLEAR]\n\
    \ 4110\t[HELP]\t\t\t\t\trequests a help message\nBUCKY BITS\nFor all input characters,\
    \ the following  \"bucky bits\" may be added to  the\ncharacter.  Their interpretation\
    \ depends entirely upon the host.  <TOP> is\nnot listed here, as it  has been\
    \ considered part  of the character in  the\nprevious  tables.\n<CONTROL> is different\
    \ from ASCII CTRL, however, many programs may request\nthe operating system to\
    \ map such  characters to the ASCII forms (with  the\n<TOP> bit off).  In this\
    \ case <META> is ignored.\nValue\tKey\n 2000\tReserved\n 1000\tReserved\n 0400\t\
    <META>\n 0200\t<CONTROL>\nSUPDUP Display Protocol\t\t\t\t\t\t   Page 14\nACKNOWLEDGEMENTS\n\
    Richard M. Stallman (RMS@MIT-AI)  and David A.  Moon (Moon@MIT-MC) of  the\nMIT-AI\
    \ and MIT-MC  systems staff  wrote the source  documentation and  the\nwonderful\
    \ ITS terminal support that made this protocol possible.  It  must\nbe emphasized\
    \  that  this is  a  functional  protocol which  has  been  in\noperation for\
    \ some years now.\nIn addition, Moon,  Stallman, and Michael  McMahon (MMcM@SRI-KL)\
    \  provided\nmany helpful comments and corrections to this document.\nFor further\
    \ reference, the sources for the known currently existing SUPDUP\nuser programs\
    \ are available online as:\n[MIT-AI] SYSENG;SUPDUP >\t\tfor the ITS monitor,\n\
    [SU-AI]  SUPDUP.MID[NET,MRC]\t\tfor the SAIL monitor,\n[SRI-KL] <MMcM>SD.FAI\t\
    \t\tfor the TOPS-20 monitor.\nThe source for the known currently existing SUPDUP\
    \ server program is:\n[MIT-AI] SYSENG;TELSER >\t\tfor the ITS monitor.\n"
