- contents:
  - '                    IPv6 Scoped Address Architecture

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies the architectural characteristics, expected\n
    \  behavior, textual representation, and usage of IPv6 addresses of\n   different
    scopes.  According to a decision in the IPv6 working group,\n   this document
    intentionally avoids the syntax and usage of unicast\n   site-local addresses.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Definitions  . . . . . . . . . . . . . . . . . . . . . .
    . .   3\n   3.  Basic Terminology  . . . . . . . . . . . . . . . . . . . . .   3\n
    \  4.  Address Scope  . . . . . . . . . . . . . . . . . . . . . . .   3\n   5.
    \ Scope Zones  . . . . . . . . . . . . . . . . . . . . . . . .   4\n   6.  Zone
    Indices . . . . . . . . . . . . . . . . . . . . . . . .   6\n   7.  Sending Packets
    \ . . . . . . . . . . . . . . . . . . . . . .  11\n   8.  Receiving Packets  .
    . . . . . . . . . . . . . . . . . . . .  11\n   9.  Forwarding . . . . . . . .
    . . . . . . . . . . . . . . . . .  11\n   10. Routing  . . . . . . . . . . . .
    . . . . . . . . . . . . . .  13\n   11. Textual Representation . . . . . . . .
    . . . . . . . . . . .  15\n       11.1.  Non-Global Addresses  . . . . . . . .
    . . . . . . . .  15\n       11.2.  The <zone_id> Part. . . . . . . . . . . . .
    . . . . .  15\n       11.3.  Examples. . . . . . . . . . . . . . . . . . . . .
    . .  17\n       11.4.  Usage Examples. . . . . . . . . . . . . . . . . . . .  17\n
    \      11.5.  Related API . . . . . . . . . . . . . . . . . . . . .  18\n       11.6.
    \ Omitting Zone Indices . . . . . . . . . . . . . . . .  18\n       11.7.  Combinations
    of Delimiter Characters. . . . . . . . .  18\n   12. Security Considerations  .
    . . . . . . . . . . . . . . . . .  19\n   13. Contributors . . . . . . . . . .
    . . . . . . . . . . . . . .  20\n   14. Acknowledgements . . . . . . . . . . .
    . . . . . . . . . . .  20\n   15. References . . . . . . . . . . . . . . . . .
    . . . . . . . .  20\n       15.1. Normative References . . . . . . . . . . . .
    . . . . .  20\n       15.2. Informative References . . . . . . . . . . . . . .
    . .  21\n   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . .  22\n
    \  Full Copyright Statement . . . . . . . . . . . . . . . . . . . .  24\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Internet Protocol version 6 includes support for addresses
    of\n   different \"scope\"; that is, both global and non-global (e.g., link-\n
    \  local) addresses.  Although non-global addressing has been introduced\n   operationally
    in the IPv4 Internet, both in the use of private\n   address space (\"net 10\",
    etc.) and with administratively scoped\n   multicast addresses, the design of
    IPv6 formally incorporates the\n   notion of address scope into its base architecture.
    \ This document\n   specifies the architectural characteristics, expected behavior,\n
    \  textual representation, and usage of IPv6 addresses of different\n   scopes.\n
    \  Though the current address architecture specification [1] defines\n   unicast
    site-local addresses, the IPv6 working group decided to\n   deprecate the syntax
    and the usage [5] and is now investigating other\n   forms of local IPv6 addressing.
    \ The usage of any new forms of\n   local addresses will be documented elsewhere
    in the future.  Thus,\n   this document intentionally focuses on link-local and
    multicast\n   scopes only.\n"
  title: 1.  Introduction
- contents:
  - "2.  Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [2].\n"
  title: 2.  Definitions
- contents:
  - "3.  Basic Terminology\n   The terms link, interface, node, host, and router are
    defined in [3].\n   The definitions of unicast address scopes (link-local and
    global) and\n   multicast address scopes (interface-local, link-local, etc.) are\n
    \  contained in [1].\n"
  title: 3.  Basic Terminology
- contents:
  - "4.  Address Scope\n   Every IPv6 address other than the unspecified address has
    a specific\n   scope; that is, a topological span within which the address may
    be\n   used as a unique identifier for an interface or set of interfaces.\n   The
    scope of an address is encoded as part of the address, as\n   specified in [1].\n
    \  For unicast addresses, this document discusses two defined scopes:\n   o  Link-local
    scope, for uniquely identifying interfaces within\n      (i.e., attached to) a
    single link only.\n   o  Global scope, for uniquely identifying interfaces anywhere
    in the\n      Internet.\n   The IPv6 unicast loopback address, ::1, is treated
    as having link-\n   local scope within an imaginary link to which a virtual \"loopback\n
    \  interface\" is attached.\n   The unspecified address, ::, is a special case.
    \ It does not have any\n   scope because it must never be assigned to any node
    according to [1].\n   Note, however, that an implementation might use an implementation\n
    \  dependent semantics for the unspecified address and may want to allow\n   the
    unspecified address to have specific scopes.  For example,\n   implementations
    often use the unspecified address to represent \"any\"\n   address in APIs.  In
    this case, implementations may regard the\n   unspecified address with a given
    particular scope as representing the\n   notion of \"any address in the scope\".
    \ This document does not\n   prohibit such a usage, as long as it is limited within
    the\n   implementation.\n   [1] defines IPv6 addresses with embedded IPv4 addresses
    as being part\n   of global addresses.  Thus, those addresses have global scope,
    with\n   regard to the IPv6 scoped address architecture.  However, an\n   implementation
    may use those addresses as if they had other scopes\n   for convenience.  For
    instance, [6] assigns link-local scope to IPv4\n   auto-configured link-local
    addresses (the addresses from the prefix\n   169.254.0.0/16 [7]) and converts
    those addresses into IPv4-mapped\n   IPv6 addresses in order to perform destination
    address selection\n   among IPv4 and IPv6 addresses.  This would implicitly mean
    that the\n   IPv4-mapped IPv6 addresses equivalent to the IPv4 auto-configuration\n
    \  link-local addresses have link-local scope.  This document does not\n   preclude
    such a usage, as long as it is limited within the\n   implementation.\n   Anycast
    addresses [1] are allocated from the unicast address space\n   and have the same
    scope properties as unicast addresses.  All\n   statements in this document regarding
    unicast apply equally to\n   anycast.\n   For multicast addresses, there are fourteen
    possible scopes, ranging\n   from interface-local to global (including link-local).
    \ The\n   interface-local scope spans a single interface only; a multicast\n   address
    of interface-local scope is useful only for loopback delivery\n   of multicasts
    within a single node; for example, as a form of inter-\n   process communication
    within a computer.  Unlike the unicast loopback\n   address, interface-local multicast
    addresses may be assigned to any\n   interface.\n   There is a size relationship
    among scopes:\n   o  For unicast scopes, link-local is a smaller scope than global.\n
    \  o  For multicast scopes, scopes with lesser values in the \"scop\"\n      subfield
    of the multicast address (Section 2.7 of [1]) are smaller\n      than scopes with
    greater values, with interface-local being the\n      smallest and global being
    the largest.\n   However, two scopes of different size may cover the exact same
    region\n   of topology.  For example, a (multicast) site may consist of a single\n
    \  link, in which both link-local and site-local scope effectively cover\n   the
    same topological span.\n"
  title: 4.  Address Scope
- contents:
  - "5.  Scope Zones\n   A scope zone, or simply a zone, is a connected region of
    topology of\n   a given scope.  For example, the set of links connected by routers\n
    \  within a particular (multicast) site, and the interfaces attached to\n   those
    links, comprise a single zone of multicast site-local scope.\n   Note that a zone
    is a particular instance of a topological region\n   (e.g., Alice's site or Bob's
    site), whereas a scope is the size of a\n   topological region (e.g., a site or
    a link).\n   The zone to which a particular non-global address pertains is not\n
    \  encoded in the address itself but determined by context, such as the\n   interface
    from which it is sent or received.  Thus, addresses of a\n   given (non-global)
    scope may be re-used in different zones of that\n   scope.  For example, two different
    physical links may each contain a\n   node with the link-local address fe80::1.\n
    \  Zones of the different scopes are instantiated as follows:\n   o  Each interface
    on a node comprises a single zone of interface-\n      local scope (for multicast
    only).\n   o  Each link and the interfaces attached to that link comprise a\n
    \     single zone of link-local scope (for both unicast and multicast).\n   o
    \ There is a single zone of global scope (for both unicast and\n      multicast)
    comprising all the links and interfaces in the\n      Internet.\n   o  The boundaries
    of zones of a scope other than interface-local,\n      link-local, and global
    must be defined and configured by network\n      administrators.\n   Zone boundaries
    are relatively static features, not changing in\n   response to short-term changes
    in topology.  Thus, the requirement\n   that the topology within a zone be \"connected\"
    is intended to include\n   links and interfaces that may only be occasionally
    connected.  For\n   example, a residential node or network that obtains Internet
    access\n   by dial-up to an employer's (multicast) site may be treated as part\n
    \  of the employer's (multicast) site-local zone even when the dial-up\n   link
    is disconnected.  Similarly, a failure of a router, interface,\n   or link that
    causes a zone to become partitioned does not split that\n   zone into multiple
    zones.  Rather, the different partitions are still\n   considered to belong to
    the same zone.\n   Zones have the following additional properties:\n   o  Zone
    boundaries cut through nodes, not links.  (Note that the\n      global zone has
    no boundary, and the boundary of an interface-\n      local zone encloses just
    a single interface.)\n   o  Zones of the same scope cannot overlap; i.e., they
    can have no\n      links or interfaces in common.\n   o  A zone of a given scope
    (less than global) falls completely within\n      zones of larger scope.  That
    is, a smaller scope zone cannot\n      include more topology than would any larger
    scope zone with which\n      it shares any links or interfaces.\n   o  Each zone
    is required to be \"convex\" from a routing perspective;\n      i.e., packets
    sent from one interface to any other in the same\n      zone are never routed
    outside the zone.  Note, however, that if a\n      zone contains a tunneled link
    (e.g., an IPv6-over-IPv6 tunnel link\n      [8]), a lower layer network of the
    tunnel can be located outside\n      the zone without breaking the convexity property.\n
    \  Each interface belongs to exactly one zone of each possible scope.\n   Note
    that this means that an interface belongs to a scope zone\n   regardless of what
    kind of unicast address the interface has or of\n   which multicast groups the
    node joins on the interface.\n"
  title: 5.  Scope Zones
- contents:
  - "6.  Zone Indices\n   Because the same non-global address may be in use in more
    than one\n   zone of the same scope (e.g., the use of link-local address fe80::1\n
    \  in two separate physical links) and a node may have interfaces\n   attached
    to different zones of the same scope (e.g., a router\n   normally has multiple
    interfaces attached to different links), a node\n   requires an internal means
    to identify to which zone a non-global\n   address belongs.  This is accomplished
    by assigning, within the node,\n   a distinct \"zone index\" to each zone of the
    same scope to which that\n   node is attached, and by allowing all internal uses
    of an address to\n   be qualified by a zone index.\n   The assignment of zone
    indices is illustrated in the example in the\n   figure below:\n       ---------------------------------------------------------------\n
    \     | a node                                                        |\n      |
    \                                                              |\n      |                                                               |\n
    \     |                                                               |\n      |
    \                                                              |\n      |                                                               |\n
    \     |                                                               |\n      |
    \ /--link1--\\ /--------link2--------\\ /--link3--\\ /--link4--\\  |\n      |
    \                                                              |\n      |  /--intf1--\\
    /--intf2--\\ /--intf3--\\ /--intf4--\\ /--intf5--\\  |\n       ---------------------------------------------------------------\n
    \             :           |           |           |           |\n              :
    \          |           |           |           |\n              :           |
    \          |           |           |\n          (imaginary    =================
    \     a point-       a\n           loopback        an Ethernet         to-point
    \    tunnel\n             link)                               link\n                   Figure
    1: Zone Indices Example\n   This example node has five interfaces:\n      A loopback
    interface to the imaginary loopback link (a phantom\n      link that goes nowhere).\n
    \     Two interfaces to the same Ethernet link.\n      An interface to a point-to-point
    link.\n      A tunnel interface (e.g., the abstract endpoint of an IPv6-over-\n
    \     IPv6 tunnel [8], presumably established over either the Ethernet\n      or
    the point-to-point link).\n   It is thus attached to five interface-local zones,
    identified by the\n   interface indices 1 through 5.\n   Because the two Ethernet
    interfaces are attached to the same link,\n   the node is only attached to four
    link-local zones, identified by\n   link indices 1 through 4.  Also note that
    even if the tunnel\n   interface is established over the Ethernet, the tunnel
    link gets its\n   own link index, which is different from the index of the Ethernet\n
    \  link zone.\n   Each zone index of a particular scope should contain enough\n
    \  information to indicate the scope, so that all indices of all scopes\n   are
    unique within the node and zone indices themselves can be used\n   for a dedicated
    purpose.  Usage of the index to identify an entry in\n   the Management Information
    Base (MIB) is an example of the dedicated\n   purpose.  The actual representation
    to encode the scope is\n   implementation dependent and is out of scope of this
    document.\n   Within this document, indices are simply represented in a format
    such\n   as \"link index 2\" for readability.\n   The zone indices are strictly
    local to the node.  For example, the\n   node on the other end of the point-to-point
    link may well use\n   entirely different interface and link index values for that
    link.\n   An implementation should also support the concept of a \"default\" zone\n
    \  for each scope.  And, when supported, the index value zero at each\n   scope
    SHOULD be reserved to mean \"use the default zone\".  Unlike\n   other zone indices,
    the default index does not contain any scope, and\n   the scope is determined
    by the address that the default index\n   accompanies.  An implementation may
    additionally define a separate\n   default zone for each scope.  Those default
    indices can also be used\n   as the zone qualifier for an address for which the
    node is attached\n   to only one zone; e.g., when using global addresses.\n   At
    present, there is no way for a node to automatically determine\n   which of its
    interfaces belong to the same zones; e.g., the same link\n   or the same multicast
    scope zone larger than interface.  In the\n   future, protocols may be developed
    to determine that information.  In\n   the absence of such protocols, an implementation
    must provide a means\n   for manual assignment and/or reassignment of zone indices.\n
    \  Furthermore, to avoid performing manual configuration in most cases,\n   an
    implementation should, by default, initially assign zone indices\n   only as follows:\n
    \  o  A unique interface index for each interface.\n   o  A unique link index
    for each interface.\n   Then manual configuration would only be necessary for
    the less common\n   cases of nodes with multiple interfaces to a single link or
    of those\n   with interfaces to zones of different (multicast-only) scopes.\n
    \  Thus, the default zone index assignments for the example node from\n   Figure
    1 would be as illustrated in Figure 2, below.  Manual\n   configuration would
    then be required to, for example, assign the same\n   link index to the two Ethernet
    interfaces, as shown in Figure 1.\n       ---------------------------------------------------------------\n
    \     | a node                                                        |\n      |
    \                                                              |\n      |                                                               |\n
    \     |                                                               |\n      |
    \                                                              |\n      |                                                               |\n
    \     |  /--link1--\\ /--link2--\\ /--link3--\\ /--link4--\\ /--link5--\\  |\n
    \     |                                                               |\n      |
    \ /--intf1--\\ /--intf2--\\ /--intf3--\\ /--intf4--\\ /--intf5--\\  |\n       ---------------------------------------------------------------\n
    \             :           |           |           |           |\n              :
    \          |           |           |           |\n              :           |
    \          |           |           |\n          (imaginary    =================
    \     a point-       a\n           loopback        an Ethernet         to-point
    \    tunnel\n             link)                               link\n             Figure
    2: Example of Default Zone Indices\n   As well as initially assigning zone indices,
    as specified above, an\n   implementation should automatically select a default
    zone for each\n   scope for which there is more than one choice, to be used whenever
    an\n   address is specified without a zone index (or with a zone index of\n   zero).
    \ For instance, in the example shown in Figure 2, the\n   implementation might
    automatically select intf2 and link2 as the\n   default zones for each of those
    two scopes.  (One possible selection\n   algorithm is to choose the first zone
    that includes an interface\n   other than the loopback interface as the default
    for each scope.)  A\n   means must also be provided to assign the default zone
    for a scope\n   manually, overriding any automatic assignment.\n   The unicast
    loopback address, ::1, may not be assigned to any\n   interface other than the
    loopback interface.  Therefore, it is\n   recommended that, whenever ::1 is specified
    without a zone index or\n   with the default zone index, it be interpreted as
    belonging to the\n   loopback link-local zone, regardless of which link-local
    zone has\n   been selected as the default.  If this is done, then for nodes with\n
    \  only a single non-loopback interface (e.g., a single Ethernet\n   interface),
    the common case, link-local addresses need not be\n   qualified with a zone index.
    \ The unqualified address ::1 would\n   always refer to the link-local zone containing
    the loopback\n   interface.  All other unqualified link-local addresses would
    refer to\n   the link-local zone containing the non-loopback interface (as long
    as\n   the default link-local zone was set to be the zone containing the\n   non-loopback
    interface).\n   Because of the requirement that a zone of a given scope fall\n
    \  completely within zones of larger scope (see Section 5, above), two\n   interfaces
    assigned to different zones of scope S must also be\n   assigned to different
    zones of all scopes smaller than S.  Thus, the\n   manual assignment of distinct
    zone indices for one scope may require\n   the automatic assignment of distinct
    zone indices for smaller scopes.\n   For example, suppose that distinct multicast
    site-local indices 1 and\n   2 are manually assigned in Figure 1 and that site
    1 contains links 1,\n   2, and 3, but site 2 only contains link 4.  This configuration
    would\n   cause the automatic creation of corresponding admin-local (i.e.,\n   multicast
    \"scop\" value 4) indices 1 and 2, because admin-local scope\n   is smaller than
    site-local scope.\n   With the above considerations, the complete set of zone
    indices for\n   our example node from Figure 1, with the additional configurations\n
    \  here, is shown in Figure 3, below.\n       ---------------------------------------------------------------\n
    \     | a node                                                        |\n      |
    \                                                              |\n      |                                                               |\n
    \     |                                                               |\n      |
    \                                                              |\n      |                                                               |\n
    \     |  /--------------------site1--------------------\\ /--site2--\\  |\n      |
    \                                                              |\n      |  /-------------------admin1--------------------\\
    /-admin2--\\  |\n      |                                                               |\n
    \     |  /--link1--\\ /--------link2--------\\ /--link3--\\ /--link4--\\  |\n
    \     |                                                               |\n      |
    \ /--intf1--\\ /--intf2--\\ /--intf3--\\ /--intf4--\\ /--intf5--\\  |\n       ---------------------------------------------------------------\n
    \             :           |           |           |           |\n              :
    \          |           |           |           |\n              :           |
    \          |           |           |\n          (imaginary    =================
    \     a point-       a\n           loopback        an Ethernet         to-point
    \    tunnel\n             link)                               link\n              Figure
    3: Complete Zone Indices Example\n   Although the above examples show the zones
    being assigned index\n   values sequentially for each scope, starting at one,
    the zone index\n   values are arbitrary.  An implementation may label a zone with
    any\n   value it chooses, as long as the index value of each zone of all\n   scopes
    is unique within the node.  Zero SHOULD be reserved to\n   represent the default
    zone.  Implementations choosing to follow the\n   recommended basic API [10] will
    want to restrict their index values\n   to those that can be represented by the
    sin6_scope_id field of the\n   sockaddr_in6 structure.\n"
  title: 6.  Zone Indices
- contents:
  - "7.  Sending Packets\n   When an upper-layer protocol sends a packet to a non-global\n
    \  destination address, it must have a means of identifying the intended\n   zone
    to the IPv6 layer for cases in which the node is attached to\n   more than one
    zone of the destination address's scope.\n   Although identification of an outgoing
    interface is sufficient to\n   identify an intended zone (because each interface
    is attached to no\n   more than one zone of each scope), in many cases that is
    more\n   specific than desired.  For example, when sending to a link-local\n   unicast
    address from a node that has more than one interface to the\n   intended link
    (an unusual configuration), the upper layer protocol\n   may not care which of
    those interfaces is used for the transmission.\n   Rather, it would prefer to
    leave that choice to the routing function\n   in the IP layer.  Thus, the upper-layer
    requires the ability to\n   specify a zone index, when sending to a non-global,
    non-loopback\n   destination address.\n"
  title: 7.  Sending Packets
- contents:
  - "8.  Receiving Packets\n   When an upper-layer protocol receives a packet containing
    a non-\n   global source or destination address, the zone to which that address\n
    \  pertains can be determined from the arrival interface, because the\n   arrival
    interface can be attached to only one zone of the same scope\n   as that of the
    address under consideration.  However, it is\n   recommended that the IP layer
    convey to the upper layer the correct\n   zone indices for the arriving source
    and destination addresses, in\n   addition to the arrival interface identifier.\n"
  title: 8.  Receiving Packets
- contents:
  - "9.  Forwarding\n   When a router receives a packet addressed to a node other
    than\n   itself, it must take the zone of the destination and source addresses\n
    \  into account as follows:\n   o  The zone of the destination address is determined
    by the scope of\n      the address and arrival interface of the packet.  The next-hop\n
    \     interface is chosen by looking up the destination address in a\n      (conceptual)
    routing table specific to that zone (see Section 10).\n      That routing table
    is restricted to refer to interfaces belonging\n      to that zone.\n   o  After
    the next-hop interface is chosen, the zone of the source\n      address is considered.
    \ As with the destination address, the zone\n      of the source address is determined
    by the scope of the address\n      and arrival interface of the packet.  If transmitting
    the packet\n      on the chosen next-hop interface would cause the packet to leave\n
    \     the zone of the source address, i.e., cross a zone boundary of the\n      scope
    of the source address, then the packet is discarded.\n      Additionally, if the
    packet's destination address is a unicast\n      address, an ICMP Destination
    Unreachable message [4] with Code 2\n      (\"beyond scope of source address\")
    is sent to the source of the\n      original packet.  Note that Code 2 is currently
    left as unassigned\n      in [4], but the IANA will re-assign the value for the
    new purpose,\n      and [4] will be revised with this change.\n   Note that even
    if unicast site-local addresses are deprecated, the\n   above procedure still
    applies to link-local addresses.  Thus, if a\n   router receives a packet with
    a link-local destination address that\n   is not one of the router's own link-local
    addresses on the arrival\n   link, the router is expected to try to forward the
    packet to the\n   destination on that link (subject to successful determination
    of the\n   destination's link-layer address via the Neighbor Discovery protocol\n
    \  [9]).  The forwarded packet may be transmitted back through the\n   arrival
    interface, or through any other interface attached to the\n   same link.\n   A
    node that receives a packet addressed to itself and containing a\n   Routing Header
    with more than zero Segments Left (Section 4.4 of [3])\n   first checks the scope
    of the next address in the Routing Header.  If\n   the scope of the next address
    is smaller than the scope of the\n   original destination address, the node MUST
    discard the packet.\n   Otherwise, it swaps the original destination address with
    the next\n   address in the Routing Header.  Then the above forwarding rules apply\n
    \  as follows:\n   o  The zone of the new destination address is determined by
    the scope\n      of the next address and the arrival interface of the packet.
    \ The\n      next-hop interface is chosen as per the first bullet of the rules\n
    \     above.\n   o  After the next-hop interface is chosen, the zone of the source\n
    \     address is considered as per the second bullet of the rules above.\n   This
    check about the scope of the next address ensures that when a\n   packet arrives
    at its final destination, if that destination is\n   link-local, then the receiving
    node can know that the packet\n   originated on-link.  This will help the receiving
    node send a\n   \"response\" packet with the final destination of the received
    packet\n   as the source address without breaking its source zone.\n   Note that
    it is possible, though generally inadvisable, to use a\n   Routing Header to convey
    a non-global address across its associated\n   zone boundary in the previously
    used next address field.  For\n   example, consider a case in which a link-border
    node (e.g., a router)\n   receives a packet with the destination being a link-local
    address,\n   and the source address a global address.  If the packet contains
    a\n   Routing Header where the next address is a global address, the next-\n   hop
    interface to the global address may belong to a different link\n   than that of
    the original destination.  This is allowed because the\n   scope of the next address
    is not smaller than the scope of the\n   original destination.\n"
  title: 9.  Forwarding
- contents:
  - "10.  Routing\n   Note that as unicast site-local addresses are deprecated, and
    link-\n   local addresses do not need routing, the discussion in this section\n
    \  only applies to multicast scoped routing.\n   When a routing protocol determines
    that it is operating on a zone\n   boundary, it MUST protect inter-zone integrity
    and maintain intra-\n   zone connectivity.\n   To maintain connectivity, the routing
    protocol must be able to create\n   forwarding information for the global groups
    and for all the scoped\n   groups for each of its attached zones.  The most straightforward
    way\n   of doing this is to create (conceptual) forwarding tables for each\n   specific
    zone.\n   To protect inter-zone integrity, routers must be selective in the\n
    \  group information shared with neighboring routers.  Routers routinely\n   exchange
    routing information with neighboring routers.  When a router\n   is transmitting
    this routing information, it must not include any\n   information about zones
    other than the zones assigned to the\n   interface used to transmit the information.\n
    \                        *                                 *\n                         *
    \                                *\n                         *   ===========    Organization
    X *\n                         *    |       |                    *\n                         *
    \   |       |                    *\n                       +-*----|-------|------+
    \            *\n                       | *  intf1   intf2    |             *\n
    \                      | *                   |             *\n                       |
    *             intf3 ---           *\n                       | *                   |
    \            *\n                       | ***********************************\n
    \                      |                     |\n                       |        Router
    \      |\n                       |                     |\n         **********************
    \      **********************\n                       |       *     *       |\n
    \           Org. Y   --- intf4  *   *  intf5 ---   Org. Z\n                       |
    \      *     *       |\n         **********************       **********************\n
    \                      +---------------------+\n             Figure 4: Multi-Organization
    Multicast Router\n   As an example, the router in Figure 4 must exchange routing\n
    \  information on five interfaces.  The information exchanged is as\n   follows
    (for simplicity, multicast scopes smaller or larger than the\n   organization
    scope except global are not considered here):\n   o  Interface 1\n      *  All
    global groups\n      *  All organization groups learned from Interfaces 1, 2,
    and 3\n   o  Interface 2\n      *  All global groups\n      *  All organization
    groups learned from Interfaces 1, 2, and 3\n   o  Interface 3\n      *  All global
    groups\n      *  All organization groups learned from Interfaces 1, 2, and 3\n
    \  o  Interface 4\n      *  All global groups\n      *  All organization groups
    learned from Interface 4\n   o  Interface 5\n      *  All global groups\n      *
    \ All organization groups learned from Interface 5\n   By imposing route exchange
    rules, zone integrity is maintained by\n   keeping all zone-specific routing information
    contained within the\n   zone.\n"
  title: 10.  Routing
- contents:
  - "11.  Textual Representation\n   As already mentioned, to specify an IPv6 non-global
    address without\n   ambiguity, an intended scope zone should be specified as well.
    \ As a\n   common notation to specify the scope zone, an implementation SHOULD\n
    \  support the following format:\n            <address>%<zone_id>\n   where\n
    \     <address> is a literal IPv6 address,\n      <zone_id> is a string identifying
    the zone of the address, and\n      `%' is a delimiter character to distinguish
    between <address> and\n      <zone_id>.\n   The following subsections describe
    detailed definitions, concrete\n   examples, and additional notes of the format.\n"
  - contents:
    - "11.1.  Non-Global Addresses\n   The format applies to all kinds of unicast
      and multicast addresses of\n   non-global scope except the unspecified address,
      which does not have\n   a scope.  The format is meaningless and should not be
      used for global\n   addresses.  The loopback address belongs to the trivial
      link; i.e.,\n   the link attached to the loopback interface.  Thus the format
      should\n   not be used for the loopback address, either.  This document does
      not\n   specify the usage of the format when the <address> is the unspecified\n
      \  address, as the address does not have a scope.  This document,\n   however,
      does not prohibit an implementation from using the format\n   for those special
      addresses for implementation dependent purposes.\n"
    title: 11.1.  Non-Global Addresses
  - contents:
    - "11.2.  The <zone_id> Part\n   In the textual representation, the <zone_id>
      part should be able to\n   identify a particular zone of the address's scope.
      \ Although a zone\n   index is expected to contain enough information to determine
      the\n   scope and to be unique among all scopes as described in Section 6,\n
      \  the <zone_id> part of this format does not have to contain the scope.\n   This
      is because the <address> part should specify the appropriate\n   scope.  This
      also means that the <zone_id> part does not have to be\n   unique among all
      scopes.\n   With this loosened property, an implementation can use a convenient\n
      \  representation as <zone_id>.  For example, to represent link index 2,\n   the
      implementation can simply use \"2\" as <zone_id>, which would be\n   more readable
      than other representations that contain the \"link\"\n   scope.\n   When an
      implementation interprets the format, it should construct the\n   \"full\" zone
      index, which contains the scope, from the <zone_id> part\n   and the scope specified
      by the <address> part.  (Remember that a zone\n   index itself should contain
      the scope, as specified in Section 6.)\n   An implementation SHOULD support
      at least numerical indices that are\n   non-negative decimal integers as <zone_id>.
      \ The default zone index,\n   which should typically be 0 (see Section 6), is
      included in the\n   integers.  When <zone_id> is the default, the delimiter
      characters\n   \"%\" and <zone_id> can be omitted.  Similarly, if a textual\n
      \  representation of an IPv6 address is given without a zone index, it\n   should
      be interpreted as <address>%<default ID>, where <default ID>\n   is the default
      zone index of the scope that <address> has.\n   An implementation MAY support
      other kinds of non-null strings as\n   <zone_id>.  However, the strings must
      not conflict with the delimiter\n   character.  The precise format and semantics
      of additional strings is\n   implementation dependent.\n   One possible candidate
      for these strings would be interface names, as\n   interfaces uniquely disambiguate
      any scopes.  In particular,\n   interface names can be used as \"default identifiers\"
      for interfaces\n   and links, because by default there is a one-to-one mapping
      between\n   interfaces and each of those scopes as described in Section 6.\n
      \  An implementation could also use interface names as <zone_id> for\n   scopes
      larger than links, but there might be some confusion in this\n   use.  For example,
      when more than one interface belongs to the same\n   (multicast) site, a user
      would be confused about which interface\n   should be used.  Also, a mapping
      function from an address to a name\n   would encounter the same kind of problem
      when it prints an address\n   with an interface name as a zone index.  This
      document does not\n   specify how these cases should be treated and leaves it\n
      \  implementation dependent.\n   It cannot be assumed that indices are common
      across all nodes in a\n   zone (see Section 6).  Hence, the format MUST be used
      only within a\n   node and MUST NOT be sent on the wire unless every node that\n
      \  interprets the format agrees on the semantics.\n"
    title: 11.2.  The <zone_id> Part
  - contents:
    - "11.3.  Examples\n   The following addresses\n             fe80::1234 (on the
      1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n
      \            ff08::9abc (on the 10th organization of the node)\n   would be
      represented as follows:\n             fe80::1234%1\n             ff02::5678%5\n
      \            ff08::9abc%10\n   (Here we assume a natural translation from a
      zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated
      into\n   \"N\".)\n   If we use interface names as <zone_id>, those addresses
      could also be\n   represented as follows:\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n
      \           ff08::9abc%interface10\n   where the interface \"ne0\" belongs to
      the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs
      to the 10th organization.\n"
    title: 11.3.  Examples
  - contents:
    - "11.4.  Usage Examples\n   Applications that are supposed to be used in end
      hosts such as\n   telnet, ftp, and ssh may not explicitly support the notion
      of address\n   scope, especially of link-local addresses.  However, an expert
      user\n   (e.g., a network administrator) sometimes has to give even link-local\n
      \  addresses to such applications.\n   Here is a concrete example.  Consider
      a multi-linked router called\n   \"R1\" that has at least two point-to-point
      interfaces (links).  Each\n   of the interfaces is connected to another router,
      \"R2\" and \"R3\",\n   respectively.  Also assume that the point-to-point interfaces
      have\n   link-local addresses only.\n   Now suppose that the routing system
      on R2 hangs up and has to be\n   reinvoked.  In this situation, we may not be
      able to use a global\n   address of R2, because this is routing trouble and
      we cannot expect\n   to have enough routes for global reachability to R2.\n
      \  Hence, we have to login R1 first and then try to login R2 by using\n   link-local
      addresses.  In this case, we have to give the link-local\n   address of R2 to,
      for example, telnet.  Here we assume the address is\n   fe80::2.\n   Note that
      we cannot just type\n            % telnet fe80::2\n   here, since R1 has more
      than one link and hence the telnet command\n   cannot detect which link it should
      try to use for connecting.\n   Instead, we should type the link-local address
      with the link index as\n   follows:\n            % telnet fe80::2%3\n   where
      \"3\" after the delimiter character `%' corresponds to the link\n   index of
      the point-to-point link.\n"
    title: 11.4.  Usage Examples
  - contents:
    - "11.5.  Related API\n   An extension to the recommended basic API defines how
      the format for\n   non-global addresses should be treated in library functions
      that\n   translate a nodename to an address, or vice versa [11].\n"
    title: 11.5.  Related API
  - contents:
    - "11.6.  Omitting Zone Indices\n   The format defined in this document does not
      intend to invalidate the\n   original format for non-global addresses; that
      is, the format without\n   the zone index portion.  As described in Section
      6, in some common\n   cases with the notion of the default zone index, there
      can be no\n   ambiguity about scope zones.  In such an environment, the\n   implementation
      can omit the \"%<zone_id>\" part.  As a result, it can\n   act as though it
      did not support the extended format at all.\n"
    title: 11.6.  Omitting Zone Indices
  - contents:
    - "11.7.  Combinations of Delimiter Characters\n   There are other kinds of delimiter
      characters defined for IPv6\n   addresses.  In this subsection, we describe
      how they should be\n   combined with the format for non-global addresses.\n
      \  The IPv6 addressing architecture [1] also defines the syntax of IPv6\n   prefixes.
      \ If the address portion of a prefix is non-global and its\n   scope zone should
      be disambiguated, the address portion SHOULD be in\n   the format.  For example,
      a link-local prefix fe80::/64 on the second\n   link can be represented as follows:\n
      \           fe80::%2/64\n   In this combination, it is important to place the
      zone index portion\n   before the prefix length when we consider parsing the
      format by a\n   name-to-address library function [11].  That is, we can first\n
      \  separate the address with the zone index from the prefix length, and\n   just
      pass the former to the library function.\n   The preferred format for literal
      IPv6 addresses in URLs is also\n   defined [12].  When a user types the preferred
      format for an IPv6\n   non-global address whose zone should be explicitly specified,
      the\n   user could use the format for the non-global address combined with\n
      \  the preferred format.\n   However, the typed URL is often sent on the wire,
      and it would cause\n   confusion if an application did not strip the <zone_id>
      portion\n   before sending.  Note that the applications should not need to care\n
      \  about which kind of addresses they're using, much less parse or strip\n   out
      the <zone_id> portion of the address.\n   Also, the format for non-global addresses
      might conflict with the URI\n   syntax [13], since the syntax defines the delimiter
      character (`%')\n   as the escape character.  This conflict would require, for
      example,\n   that the <zone_id> part for zone 1 with the delimiter be represented\n
      \  as '%251'.  It also means that we could not simply copy a non-escaped\n   format
      from other sources as input to the URI parser.  Additionally,\n   if the URI
      parser does not convert the escaped format before passing\n   it to a name-to-address
      library, the conversion will fail.  All these\n   issues would decrease the
      benefit of the textual representation\n   described in this section.\n   Hence,
      this document does not specify how the format for non-global\n   addresses should
      be combined with the preferred format for literal\n   IPv6 addresses.  In any
      case, it is recommended to use an FQDN\n   instead of a literal IPv6 address
      in a URL, whenever an FQDN is\n   available.\n"
    title: 11.7.  Combinations of Delimiter Characters
  title: 11.  Textual Representation
- contents:
  - "12.  Security Considerations\n   A limited scope address without a zone index
    has security\n   implications and cannot be used for some security contexts.  For\n
    \  example, a link-local address cannot be used in a traffic selector of\n   a
    security association established by Internet Key Exchange (IKE)\n   when the IKE
    messages are carried over global addresses.  Also, a\n   link-local address without
    a zone index cannot be used in access\n   control lists.\n   The routing section
    of this document specifies a set of guidelines\n   whereby routers can prevent
    zone-specific information from leaking\n   out of each zone.  If, for example,
    multicast site boundary routers\n   allow site routing information to be forwarded
    outside of the site,\n   the integrity of the site could be compromised.\n   Since
    the use of the textual representation of non-global addresses\n   is restricted
    to use within a single node, it does not create a\n   security vulnerability from
    outside the node.  However, a malicious\n   node might send a packet that contains
    a textual IPv6 non-global\n   address with a zone index, intending to deceive
    the receiving node\n   about the zone of the non-global address.  Thus, an implementation\n
    \  should be careful when it receives packets that contain textual non-\n   global
    addresses as data.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Contributors\n   This document is a combination of several separate efforts.
    \ Atsushi\n   Onoe took a significant role in one of them and deeply contributed
    to\n   the content of Section 11 as a co-author of a separate proposal.\n"
  title: 13.  Contributors
- contents:
  - "14.  Acknowledgements\n   Many members of the IPv6 working group provided useful
    comments and\n   feedback on this document.  In particular, Margaret Wasserman
    and Bob\n   Hinden led the working group to make a consensus on IPv6 local\n   addressing.
    \ Richard Draves proposed an additional rule to process\n   Routing header containing
    scoped addresses.  Dave Thaler and Francis\n   Dupont gave valuable suggestions
    to define semantics of zone indices\n   in terms of related API.  Pekka Savola
    reviewed a version of the\n   document very carefully and made detailed comments
    about serious\n   problems.  Steve Bellovin, Ted Hardie, Bert Wijnen, and Timothy\n
    \  Gleeson reviewed and helped improve the document during the\n   preparation
    for publication.\n"
  title: 14.  Acknowledgements
- contents:
  - '15.  References

    '
  - contents:
    - "15.1.  Normative References\n   [1]  Hinden, R. and S. Deering, \"Internet
      Protocol Version 6 (IPv6)\n        Addressing Architecture\", RFC 3513, April
      2003.\n   [2]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n
      \       Levels\", BCP 14, RFC 2119, March 1997.\n   [3]  Deering, S. and R.
      Hinden, \"Internet Protocol, Version 6 (IPv6)\n        Specification\", RFC
      2460, December 1998.\n   [4]  Conta, A. and S. Deering, \"Internet Control Message
      Protocol\n        (ICMPv6) for the Internet Protocol Version 6 (IPv6)\n        Specification\",
      RFC 2463, December 1998.\n"
    title: 15.1.  Normative References
  - contents:
    - "15.2.  Informative References\n   [5]  Huitema, C. and B. Carpenter, \"Deprecating
      Site Local\n        Addresses\", RFC 3879, September 2004.\n   [6]  Draves,
      R., \"Default Address Selection for Internet Protocol\n        version 6 (IPv6)\",
      RFC 3484, February 2003.\n   [7]  Cheshire, S., Aboba, B., and E. Guttman, \"Dynamic
      Configuration\n        of Link-Local IPv4 Addresses\", Work in Progress.\n   [8]
      \ Conta, A. and S. Deering, \"Generic Packet Tunneling in IPv6\n        Specification\",
      RFC 2473, December 1998.\n   [9]  Narten, T., Nordmark, E., and W. Simpson,
      \"Neighbor Discovery\n        for IP Version 6 (IPv6)\", RFC 2461, December
      1998.\n   [10] Gilligan, R., Thomson, S., Bound, J., McCann, J., and W.\n        Stevens,
      \"Basic Socket Interface Extensions for IPv6\", RFC 3493,\n        February
      2003.\n   [11] Gilligan, R., \"Scoped Address Extensions to the IPv6 Basic\n
      \       Socket API\", Work in Progress, July 2002.\n   [12] Hinden, R., Carpenter,
      B., and L. Masinter, \"Format for Literal\n        IPv6 Addresses in URL's\",
      RFC 2732, December 1999.\n   [13] Berners-Lee, T., Fielding, R., and L. Masinter,
      \"Uniform\n        Resource Identifiers (URI): Generic Syntax\", RFC 3986, January\n
      \       2005.\n"
    title: 15.2.  Informative References
  title: 15.  References
- contents:
  - "Authors' Addresses\n   Stephen E. Deering\n   Cisco Systems, Inc.\n   170 West
    Tasman Drive\n   San Jose, CA  95134-1706\n   USA\n   Brian Haberman\n   Johns
    Hopkins University Applied Physics Laboratory\n   11100 Johns Hopkins Road\n   Laurel,
    MD  20723-6099\n   USA\n   Phone: +1-443-778-1319\n   EMail: brian@innovationslab.net\n
    \  Tatuya Jinmei\n   Corporate Research & Development Center, Toshiba Corporation\n
    \  1 Komukai Toshiba-cho, Saiwai-ku\n   Kawasaki-shi, Kanagawa  212-8582\n   Japan\n
    \  Phone: +81-44-549-2230\n   Fax:   +81-44-520-1841\n   EMail: jinmei@isl.rdc.toshiba.co.jp\n
    \  Erik Nordmark\n   17 Network Circle\n   Menlo Park, CA 94025\n   USA\n   Phone:
    +1 650 786 2921\n   Fax:   +1 650 786 5896\n   EMail: Erik.Nordmark@sun.com\n
    \  Brian D. Zill\n   Microsoft Research\n   One Microsoft Way\n   Redmond, WA
    \ 98052-6399\n   USA\n   Phone: +1-425-703-3568\n   Fax:   +1-425-936-7329\n   EMail:
    bzill@microsoft.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
