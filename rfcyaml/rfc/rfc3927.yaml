- contents:
  - '           Dynamic Configuration of IPv4 Link-Local Addresses

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   To participate in wide-area IP networking, a host needs to be\n
    \  configured with IP addresses for its interfaces, either manually by\n   the
    user or automatically from a source on the network such as a\n   Dynamic Host
    Configuration Protocol (DHCP) server.  Unfortunately,\n   such address configuration
    information may not always be available.\n   It is therefore beneficial for a
    host to be able to depend on a\n   useful subset of IP networking functions even
    when no address\n   configuration is available.  This document describes how a
    host may\n   automatically configure an interface with an IPv4 address within
    the\n   169.254/16 prefix that is valid for communication with other devices\n
    \  connected to the same physical (or logical) link.\n   IPv4 Link-Local addresses
    are not suitable for communication with\n   devices not directly connected to
    the same physical (or logical)\n   link, and are only used where stable, routable
    addresses are not\n   available (such as on ad hoc or isolated networks).  This
    document\n   does not recommend that IPv4 Link-Local addresses and routable\n
    \  addresses be configured simultaneously on the same interface.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .
    . . . . .  3\n       1.1.  Requirements. . . . . . . . . . . . . . . . . . . .
    . .  3\n       1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .  3\n
    \      1.3.  Applicability . . . . . . . . . . . . . . . . . . . . .  5\n       1.4.
    \ Application Layer Protocol Considerations . . . . . . .  6\n       1.5.  Autoconfiguration
    Issues. . . . . . . . . . . . . . . .  7\n       1.6.  Alternate Use Prohibition
    . . . . . . . . . . . . . . .  7\n       1.7.  Multiple Interfaces . . . . . .
    . . . . . . . . . . . .  8\n       1.8.  Communication with Routable Addresses
    . . . . . . . . .  8\n       1.9.  When to configure an IPv4 Link-Local Address.
    . . . . .  8\n   2.  Address Selection, Defense and Delivery . . . . . . . . .
    . .  9\n       2.1.  Link-Local Address Selection. . . . . . . . . . . . . . 10\n
    \      2.2.  Claiming a Link-Local Address . . . . . . . . . . . . . 11\n       2.3.
    \ Shorter Timeouts. . . . . . . . . . . . . . . . . . . . 13\n       2.4.  Announcing
    an Address . . . . . . . . . . . . . . . . . 13\n       2.5.  Conflict Detection
    and Defense. . . . . . . . . . . . . 13\n       2.6.  Address Usage and Forwarding
    Rules. . . . . . . . . . . 14\n       2.7.  Link-Local Packets Are Not Forwarded.
    . . . . . . . . . 16\n       2.8.  Link-Local Packets are Local. . . . . . . .
    . . . . . . 16\n       2.9.  Higher-Layer Protocol Considerations. . . . . . .
    . . . 17\n       2.10. Privacy Concerns. . . . . . . . . . . . . . . . . . . .
    17\n       2.11. Interaction between DHCPv4 and IPv4 Link-Local\n             State
    Machines. . . . . . . . . . . . . . . . . . . . . 17\n   3.  Considerations for
    Multiple Interfaces. . . . . . . . . . . . 18\n       3.1.  Scoped Addresses.
    . . . . . . . . . . . . . . . . . . . 18\n       3.2.  Address Ambiguity . . .
    . . . . . . . . . . . . . . . . 19\n       3.3.  Interaction with Hosts with Routable
    Addresses. . . . . 20\n       3.4.  Unintentional Autoimmune Response . . . .
    . . . . . . . 21\n   4.  Healing of Network Partitions . . . . . . . . . . . .
    . . . . 22\n   5.  Security Considerations . . . . . . . . . . . . . . . . . .
    . 23\n   6.  Application Programming Considerations. . . . . . . . . . . . 24\n
    \      6.1.  Address Changes, Failure and Recovery . . . . . . . . . 24\n       6.2.
    \ Limited Forwarding of Locators. . . . . . . . . . . . . 24\n       6.3.  Address
    Ambiguity . . . . . . . . . . . . . . . . . . . 25\n   7.  Router Considerations
    . . . . . . . . . . . . . . . . . . . . 25\n   8.  IANA Considerations . . . .
    . . . . . . . . . . . . . . . . . 25\n   9.  Constants . . . . . . . . . . . .
    . . . . . . . . . . . . . . 26\n   10. References. . . . . . . . . . . . . . .
    . . . . . . . . . . . 26\n       10.1. Normative References. . . . . . . . . .
    . . . . . . . . 26\n       10.2. Informative References. . . . . . . . . . . .
    . . . . . 26\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .
    . . 27\n   Appendix A - Prior Implementations. . . . . . . . . . . . . . . . 28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   As the Internet Protocol continues to grow in popularity,
    it becomes\n   increasingly valuable to be able to use familiar IP tools such
    as FTP\n   not only for global communication, but for local communication as\n
    \  well.  For example, two people with laptop computers supporting IEEE\n   802.11
    Wireless LANs [802.11] may meet and wish to exchange files.\n   It is desirable
    for these people to be able to use IP application\n   software without the inconvenience
    of having to manually configure\n   static IP addresses or set up a DHCP server
    [RFC2131].\n   This document describes a method by which a host may automatically\n
    \  configure an interface with an IPv4 address in the 169.254/16 prefix\n   that
    is valid for Link-Local communication on that interface.  This\n   is especially
    valuable in environments where no other configuration\n   mechanism is available.
    \ The IPv4 prefix 169.254/16 is registered\n   with the IANA for this purpose.
    \ Allocation of IPv6 Link-Local\n   addresses is described in \"IPv6 Stateless
    Address Autoconfiguration\"\n   [RFC2462].\n   Link-Local communication using
    IPv4 Link-Local addresses is only\n   suitable for communication with other devices
    connected to the same\n   physical (or logical) link.  Link-Local communication
    using IPv4\n   Link-Local addresses is not suitable for communication with devices\n
    \  not directly connected to the same physical (or logical) link.\n   Microsoft
    Windows 98 (and later) and Mac OS 8.5 (and later) already\n   support this capability.
    \ This document standardizes usage,\n   prescribing rules for how IPv4 Link-Local
    addresses are to be treated\n   by hosts and routers.  In particular, it describes
    how routers are to\n   behave when receiving packets with IPv4 Link-Local addresses
    in the\n   source or destination address.  With respect to hosts, it discusses\n
    \  claiming and defending addresses, maintaining Link-Local and routable\n   IPv4
    addresses on the same interface, and multi-homing issues.\n"
  - contents:
    - "1.1.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      \"Key words for use in\n   RFCs\" [RFC2119].\n"
    title: 1.1.  Requirements
  - contents:
    - "1.2.  Terminology\n   This document describes Link-Local addressing, for IPv4
      communication\n   between two hosts on a single link.  A set of hosts is considered
      to\n   be \"on the same link\", if:\n   -  when any host A from that set sends
      a packet to any other host B\n      in that set, using unicast, multicast, or
      broadcast, the entire\n      link-layer packet payload arrives unmodified, and\n
      \  -  a broadcast sent over that link by any host from that set of hosts\n      can
      be received by every other host in that set\n   The link-layer *header* may
      be modified, such as in Token Ring Source\n   Routing [802.5], but not the link-layer
      *payload*.  In particular, if\n   any device forwarding a packet modifies any
      part of the IP header or\n   IP payload then the packet is no longer considered
      to be on the same\n   link.  This means that the packet may pass through devices
      such as\n   repeaters, bridges, hubs or switches and still be considered to
      be on\n   the same link for the purpose of this document, but not through a\n
      \  device such as an IP router that decrements the TTL or otherwise\n   modifies
      the IP header.\n   This document uses the term \"routable address\" to refer
      to all valid\n   unicast IPv4 addresses outside the 169.254/16 prefix that may
      be\n   forwarded via routers.  This includes all global IP addresses and\n   private
      addresses such as Net 10/8 [RFC1918], but not loopback\n   addresses such as
      127.0.0.1.\n   Wherever this document uses the term \"host\" when describing
      use of\n   IPv4 Link-Local addresses, the text applies equally to routers when\n
      \  they are the source of or intended destination of packets containing\n   IPv4
      Link-Local source or destination addresses.\n   Wherever this document uses
      the term \"sender IP address\" or \"target\n   IP address\" in the context of
      an ARP packet, it is referring to the\n   fields of the ARP packet identified
      in the ARP specification [RFC826]\n   as \"ar$spa\" (Sender Protocol Address)
      and \"ar$tpa\" (Target Protocol\n   Address) respectively.  For the usage of
      ARP described in this\n   document, each of these fields always contains an
      IP address.\n   In this document, the term \"ARP Probe\" is used to refer to
      an ARP\n   Request packet, broadcast on the local link, with an all-zero 'sender\n
      \  IP address'.  The 'sender hardware address' MUST contain the hardware\n   address
      of the interface sending the packet.  The 'target hardware\n   address' field
      is ignored and SHOULD be set to all zeroes.  The\n   'target IP address' field
      MUST be set to the address being probed.\n   In this document, the term \"ARP
      Announcement\" is used to refer to an\n   ARP Request packet, broadcast on the
      local link, identical to the ARP\n   Probe described above, except that both
      the sender and target IP\n   address fields contain the IP address being announced.\n
      \  Constants are introduced in all capital letters.  Their values are\n   given
      in Section 9.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Applicability\n   This specification applies to all IEEE 802 Local Area
      Networks (LANs)\n   [802], including Ethernet [802.3], Token-Ring [802.5] and
      IEEE 802.11\n   wireless LANs [802.11], as well as to other link-layer technologies\n
      \  that operate at data rates of at least 1 Mbps, have a round-trip\n   latency
      of at most one second, and support ARP [RFC826].  Wherever\n   this document
      uses the term \"IEEE 802\", the text applies equally to\n   any of these network
      technologies.\n   Link-layer technologies that support ARP but operate at rates
      below 1\n   Mbps or latencies above one second may need to specify different\n
      \  values for the following parameters:\n   (a) the number of, and interval
      between, ARP probes, see PROBE_NUM,\n       PROBE_MIN, PROBE_MAX defined in
      Section 2.2.1\n   (b) the number of, and interval between, ARP announcements,
      see\n       ANNOUNCE_NUM and ANNOUNCE_INTERVAL defined in Section 2.4\n   (c)
      the maximum rate at which address claiming may be attempted, see\n       RATE_LIMIT_INTERVAL
      and MAX_CONFLICTS defined in Section 2.2.1\n   (d) the time interval between
      conflicting ARPs below which a host\n       MUST reconfigure instead of attempting
      to defend its address, see\n       DEFEND_INTERVAL defined in Section 2.5\n
      \  Link-layer technologies that do not support ARP may be able to use\n   other
      techniques for determining whether a particular IP address is\n   currently
      in use.  However, the application of claim-and-defend\n   mechanisms to such
      networks is outside the scope of this document.\n   This specification is intended
      for use with small ad hoc networks --\n   a single link containing only a few
      hosts.  Although 65024 IPv4\n   Link-Local addresses are available in principle,
      attempting to use\n   all those addresses on a single link would result in a
      high\n   probability of address conflicts, requiring a host to take an\n   inordinate
      amount of time to find an available address.\n   Network operators with more
      than 1300 hosts on a single link may want\n   to consider dividing that single
      link into two or more subnets.  A\n   host connecting to a link that already
      has 1300 hosts, selecting an\n   IPv4 Link-Local address at random, has a 98%
      chance of selecting an\n   unused IPv4 Link-Local address on the first try.
      \ A host has a 99.96%\n   chance of selecting an unused IPv4 Link-Local address
      within two\n   tries.  The probability that it will have to try more than ten
      times\n   is about 1 in 10^17.\n"
    title: 1.3.  Applicability
  - contents:
    - "1.4.  Application Layer Protocol Considerations\n   IPv4 Link-Local addresses
      and their dynamic configuration have\n   profound implications upon applications
      which use them.  This is\n   discussed in Section 6.  Many applications fundamentally
      assume that\n   addresses of communicating peers are routable, relatively unchanging\n
      \  and unique.  These assumptions no longer hold with IPv4 Link-Local\n   addresses,
      or a mixture of Link-Local and routable IPv4 addresses.\n   Therefore while
      many applications will work properly with IPv4 Link-\n   Local addresses, or
      a mixture of Link-Local and routable IPv4\n   addresses, others may do so only
      after modification, or will exhibit\n   reduced or partial functionality.\n
      \  In some cases it may be infeasible for the application to be modified\n   to
      operate under such conditions.\n   IPv4 Link-Local addresses should therefore
      only be used where stable,\n   routable addresses are not available (such as
      on ad hoc or isolated\n   networks) or in controlled situations where these
      limitations and\n   their impact on applications are understood and accepted.
      \ This\n   document does not recommend that IPv4 Link-Local addresses and\n
      \  routable addresses be configured simultaneously on the same\n   interface.\n
      \  Use of IPv4 Link-Local addresses in off-link communication is likely\n   to
      cause application failures.  This can occur within any application\n   that
      includes embedded addresses, if an IPv4 Link-Local address is\n   embedded when
      communicating with a host that is not on the link.\n   Examples of applications
      that embed addresses include IPsec, Kerberos\n   4/5, FTP, RSVP, SMTP, SIP,
      X-Windows/Xterm/Telnet, Real Audio, H.323,\n   and SNMP [RFC3027].\n   To preclude
      use of IPv4 Link-Local addresses in off-link\n   communication, the following
      cautionary measures are advised:\n   a. IPv4 Link-Local addresses MUST NOT be
      configured in the DNS.\n      Mapping from IPv4 addresses to host names is conventionally
      done\n      by issuing DNS queries for names of the form,\n      \"x.x.x.x.in-addr.arpa.\"
      \ When used for link-local addresses, which\n      have significance only on
      the local link, it is inappropriate to\n      send such DNS queries beyond the
      local link.  DNS clients MUST NOT\n      send DNS queries for any name that
      falls within the\n      \"254.169.in-addr.arpa.\" domain.\n      DNS recursive
      name servers receiving queries from non-compliant\n      clients for names within
      the \"254.169.in-addr.arpa.\" domain MUST\n      by default return RCODE 3,
      authoritatively asserting that no such\n      name exists in the Domain Name
      System.\n   b. Names that are globally resolvable to routable addresses should
      be\n      used within applications whenever they are available.  Names that\n
      \     are resolvable only on the local link (such as through use of\n      protocols
      such as Link Local Multicast Name Resolution [LLMNR])\n      MUST NOT be used
      in off-link communication.  IPv4 addresses and\n      names that can only be
      resolved on the local link SHOULD NOT be\n      forwarded beyond the local link.
      \ IPv4 Link-Local addresses SHOULD\n      only be sent when a Link-Local address
      is used as the source\n      and/or destination address.  This strong advice
      should hinder\n      limited scope addresses and names from leaving the context
      in\n      which they apply.\n   c. If names resolvable to globally routable
      addresses are not\n      available, but the globally routable addresses are,
      they should be\n      used instead of IPv4 Link-Local addresses.\n"
    title: 1.4.  Application Layer Protocol Considerations
  - contents:
    - "1.5.  Autoconfiguration Issues\n   Implementations of IPv4 Link-Local address
      autoconfiguration MUST\n   expect address conflicts, and MUST be prepared to
      handle them\n   gracefully by automatically selecting a new address whenever
      a\n   conflict is detected, as described in Section 2.  This requirement to\n
      \  detect and handle address conflicts applies during the entire period\n   that
      a host is using a 169.254/16 IPv4 Link-Local address, not just\n   during initial
      interface configuration.  For example, address\n   conflicts can occur well
      after a host has completed booting if two\n   previously separate networks are
      joined, as described in Section 4.\n"
    title: 1.5.  Autoconfiguration Issues
  - contents:
    - "1.6.  Alternate Use Prohibition\n   Note that addresses in the 169.254/16 prefix
      SHOULD NOT be configured\n   manually or by a DHCP server.  Manual or DHCP configuration
      may cause\n   a host to use an address in the 169.254/16 prefix without following\n
      \  the special rules regarding duplicate detection and automatic\n   configuration
      that pertain to addresses in this prefix.  While the\n   DHCP specification
      [RFC2131] indicates that a DHCP client SHOULD\n   probe a newly received address
      with ARP, this is not mandatory.\n   Similarly, while the DHCP specification
      recommends that a DHCP server\n   SHOULD probe an address using an ICMP Echo
      Request before allocating\n   it, this is also not mandatory, and even if the
      server does this,\n   IPv4 Link-Local addresses are not routable, so a DHCP
      server not\n   directly connected to a link cannot detect whether a host on
      that\n   link is already using the desired IPv4 Link-Local address.\n   Administrators
      wishing to configure their own local addresses (using\n   manual configuration,
      a DHCP server, or any other mechanism not\n   described in this document) should
      use one of the existing private\n   address prefixes [RFC1918], not the 169.254/16
      prefix.\n"
    title: 1.6.  Alternate Use Prohibition
  - contents:
    - "1.7.  Multiple Interfaces\n   Additional considerations apply to hosts that
      support more than one\n   active interface where one or more of these interfaces
      support IPv4\n   Link-Local address configuration.  These considerations are
      discussed\n   in Section 3.\n"
    title: 1.7.  Multiple Interfaces
  - contents:
    - "1.8.  Communication with Routable Addresses\n   There will be cases when devices
      with a configured Link-Local address\n   will need to communicate with a device
      with a routable address\n   configured on the same physical link, and vice versa.
      \ The rules in\n   Section 2.6 allow this communication.\n   This allows, for
      example, a laptop computer with only a routable\n   address to communicate with
      web servers world-wide using its\n   globally-routable address while at the
      same time printing those web\n   pages on a local printer that has only an IPv4
      Link-Local address.\n"
    title: 1.8.  Communication with Routable Addresses
  - contents:
    - "1.9.  When to configure an IPv4 Link-Local address\n   Having addresses of
      multiple different scopes assigned to an\n   interface, with no adequate way
      to determine in what circumstances\n   each address should be used, leads to
      complexity for applications and\n   confusion for users.  A host with an address
      on a link can\n   communicate with all other devices on that link, whether those\n
      \  devices use Link-Local addresses, or routable addresses.  For these\n   reasons,
      a host SHOULD NOT have both an operable routable address and\n   an IPv4 Link-Local
      address configured on the same interface.  The\n   term \"operable address\"
      is used to mean an address which works\n   effectively for communication in
      the current network context (see\n   below).  When an operable routable address
      is available on an\n   interface, the host SHOULD NOT also assign an IPv4 Link-Local
      address\n   on that interface.  However, during the transition (in either\n
      \  direction) between using routable and IPv4 Link-Local addresses both\n   MAY
      be in use at once subject to these rules:\n      1. The assignment of an IPv4
      Link-Local address on an interface is\n         based solely on the state of
      the interface, and is independent\n         of any other protocols such as DHCP.
      \ A host MUST NOT alter its\n         behavior and use of other protocols such
      as DHCP because the\n         host has assigned an IPv4 Link-Local address to
      an interface.\n      2. If a host finds that an interface that was previously\n
      \        configured with an IPv4 Link-Local address now has an operable\n         routable
      address available, the host MUST use the routable\n         address when initiating
      new communications, and MUST cease\n         advertising the availability of
      the IPv4 Link-Local address\n         through whatever mechanisms that address
      had been made known to\n         others.  The host SHOULD continue to use the
      IPv4 Link-Local\n         address for communications already underway, and MAY
      continue\n         to accept new communications addressed to the IPv4 Link-Local\n
      \        address.  Ways in which an operable routable address might\n         become
      available on an interface include:\n               * Manual configuration\n
      \              * Address assignment through DHCP\n               * Roaming of
      the host to a network on which a previously\n                 assigned address
      becomes operable\n      3. If a host finds that an interface no longer has an
      operable\n         routable address available, the host MAY identify a usable
      IPv4\n         Link-Local address (as described in section 2) and assign that\n
      \        address to the interface.  Ways in which an operable routable\n         address
      might cease to be available on an interface include:\n               * Removal
      of the address from the interface through\n                 manual configuration\n
      \              * Expiration of the lease on the address assigned through\n                 DHCP\n
      \              * Roaming of the host to a new network on which the\n                 address
      is no longer operable.\n   The determination by the system of whether an address
      is \"operable\"\n   is not clear cut and many changes in the system context
      (e.g.,\n   router changes) may affect the operability of an address.  In\n   particular
      roaming of a host from one network to another is likely --\n   but not certain
      -- to change the operability of a configured address\n   but detecting such
      a move is not always trivial.\n   \"Detection of Network Attachment (DNA) in
      IPv4\" [DNAv4] provides\n   further discussion of address assignment and operability\n
      \  determination.\n"
    title: 1.9.  When to configure an IPv4 Link-Local address
  title: 1.  Introduction
- contents:
  - "2.  Address Selection, Defense and Delivery\n   The following section explains
    the IPv4 Link-Local address selection\n   algorithm, how IPv4 Link-Local addresses
    are defended, and how IPv4\n   packets with IPv4 Link-Local addresses are delivered.\n
    \  Windows and Mac OS hosts that already implement Link-Local IPv4\n   address
    auto-configuration are compatible with the rules presented in\n   this section.
    \ However, should any interoperability problem be\n   discovered, this document,
    not any prior implementation, defines the\n   standard.\n"
  - contents:
    - "2.1.  Link-Local Address Selection\n   When a host wishes to configure an IPv4
      Link-Local address, it\n   selects an address using a pseudo-random number generator
      with a\n   uniform distribution in the range from 169.254.1.0 to 169.254.254.255\n
      \  inclusive.\n   The IPv4 prefix 169.254/16 is registered with the IANA for
      this\n   purpose.  The first 256 and last 256 addresses in the 169.254/16\n
      \  prefix are reserved for future use and MUST NOT be selected by a host\n   using
      this dynamic configuration mechanism.\n   The pseudo-random number generation
      algorithm MUST be chosen so that\n   different hosts do not generate the same
      sequence of numbers.  If the\n   host has access to persistent information that
      is different for each\n   host, such as its IEEE 802 MAC address, then the pseudo-random
      number\n   generator SHOULD be seeded using a value derived from this\n   information.
      \ This means that even without using any other persistent\n   storage, a host
      will usually select the same IPv4 Link-Local address\n   each time it is booted,
      which can be convenient for debugging and\n   other operational reasons.  Seeding
      the pseudo-random number\n   generator using the real-time clock or any other
      information which is\n   (or may be) identical in every host is NOT suitable
      for this purpose,\n   because a group of hosts that are all powered on at the
      same time\n   might then all generate the same sequence, resulting in a never-\n
      \  ending series of conflicts as the hosts move in lock-step through\n   exactly
      the same pseudo-random sequence, conflicting on every address\n   they probe.\n
      \  Hosts that are equipped with persistent storage MAY, for each\n   interface,
      record the IPv4 address they have selected.  On booting,\n   hosts with a previously
      recorded address SHOULD use that address as\n   their first candidate when probing.
      \ This increases the stability of\n   addresses.  For example, if a group of
      hosts are powered off at\n   night, then when they are powered on the next morning
      they will all\n   resume using the same addresses, instead of picking different\n
      \  addresses and potentially having to resolve conflicts that arise.\n"
    title: 2.1.  Link-Local Address Selection
  - contents:
    - "2.2.  Claiming a Link-Local Address\n   After it has selected an IPv4 Link-Local
      address, a host MUST test to\n   see if the IPv4 Link-Local address is already
      in use before beginning\n   to use it.  When a network interface transitions
      from an inactive to\n   an active state, the host does not have knowledge of
      what IPv4 Link-\n   Local addresses may currently be in use on that link, since
      the point\n   of attachment may have changed or the network interface may have
      been\n   inactive when a conflicting address was claimed.\n   Were the host
      to immediately begin using an IPv4 Link-Local address\n   which is already in
      use by another host, this would be disruptive to\n   that other host.  Since
      it is possible that the host has changed its\n   point of attachment, a routable
      address may be obtainable on the new\n   network, and therefore it cannot be
      assumed that an IPv4 Link-Local\n   address is to be preferred.\n   Before using
      the IPv4 Link-Local address (e.g., using it as the\n   source address in an
      IPv4 packet, or as the Sender IPv4 address in an\n   ARP packet) a host MUST
      perform the probing test described below to\n   achieve better confidence that
      using the IPv4 Link-Local address will\n   not cause disruption.\n   Examples
      of events that involve an interface becoming active include:\n      Reboot/startup\n
      \     Wake from sleep (if network interface was inactive during sleep)\n      Bringing
      up previously inactive network interface\n      IEEE 802 hardware link-state
      change (appropriate for the\n           media type and security mechanisms which
      apply) indicates\n           that an interface has become active.\n      Association
      with a wireless base station or ad hoc network.\n   A host MUST NOT perform
      this check periodically as a matter of\n   course.  This would be a waste of
      network bandwidth, and is\n   unnecessary due to the ability of hosts to passively
      discover\n   conflicts, as described in Section 2.5.\n"
    - contents:
      - "2.2.1.  Probe details\n   On a link-layer such as IEEE 802 that supports
        ARP, conflict\n   detection is done using ARP probes.  On link-layer technologies
        that\n   do not support ARP other techniques may be available for determining\n
        \  whether a particular IPv4 address is currently in use.  However, the\n
        \  application of claim-and-defend mechanisms to such networks is\n   outside
        the scope of this document.\n   A host probes to see if an address is already
        in use by broadcasting\n   an ARP Request for the desired address.  The client
        MUST fill in the\n   'sender hardware address' field of the ARP Request with
        the hardware\n   address of the interface through which it is sending the
        packet.  The\n   'sender IP address' field MUST be set to all zeroes, to avoid\n
        \  polluting ARP caches in other hosts on the same link in the case\n   where
        the address turns out to be already in use by another host.\n   The 'target
        hardware address' field is ignored and SHOULD be set to\n   all zeroes.  The
        'target IP address' field MUST be set to the address\n   being probed.  An
        ARP Request constructed this way with an all-zero\n   'sender IP address'
        is referred to as an \"ARP Probe\".\n   When ready to begin probing, the host
        should then wait for a random\n   time interval selected uniformly in the
        range zero to PROBE_WAIT\n   seconds, and should then send PROBE_NUM probe
        packets, each of these\n   probe packets spaced randomly, PROBE_MIN to PROBE_MAX
        seconds apart.\n   If during this period, from the beginning of the probing
        process\n   until ANNOUNCE_WAIT seconds after the last probe packet is sent,
        the\n   host receives any ARP packet (Request *or* Reply) on the interface\n
        \  where the probe is being performed where the packet's 'sender IP\n   address'
        is the address being probed for, then the host MUST treat\n   this address
        as being in use by some other host, and MUST select a\n   new pseudo-random
        address and repeat the process.  In addition, if\n   during this period the
        host receives any ARP Probe where the packet's\n   'target IP address' is
        the address being probed for, and the packet's\n   'sender hardware address'
        is not the hardware address of the\n   interface the host is attempting to
        configure, then the host MUST\n   similarly treat this as an address conflict
        and select a new address\n   as above.  This can occur if two (or more) hosts
        attempt to configure\n   the same IPv4 Link-Local address at the same time.\n
        \  A host should maintain a counter of the number of address conflicts\n   it
        has experienced in the process of trying to acquire an address,\n   and if
        the number of conflicts exceeds MAX_CONFLICTS then the host\n   MUST limit
        the rate at which it probes for new addresses to no more\n   than one new
        address per RATE_LIMIT_INTERVAL.  This is to prevent\n   catastrophic ARP
        storms in pathological failure cases, such as a\n   rogue host that answers
        all ARP probes, causing legitimate hosts to\n   go into an infinite loop attempting
        to select a usable address.\n   If, by ANNOUNCE_WAIT seconds after the transmission
        of the last ARP\n   Probe no conflicting ARP Reply or ARP Probe has been received,
        then\n   the host has successfully claimed the desired IPv4 Link-Local\n   address.\n"
      title: 2.2.1.  Probe details
    title: 2.2.  Claiming a Link-Local Address
  - contents:
    - "2.3.  Shorter Timeouts\n   Network technologies may emerge for which shorter
      delays are\n   appropriate than those required by this document.  A subsequent
      IETF\n   publication may be produced providing guidelines for different values\n
      \  for PROBE_WAIT, PROBE_NUM, PROBE_MIN and PROBE_MAX on those\n   technologies.\n"
    title: 2.3.  Shorter Timeouts
  - contents:
    - "2.4.  Announcing an Address\n   Having probed to determine a unique address
      to use, the host MUST\n   then announce its claimed address by broadcasting
      ANNOUNCE_NUM ARP\n   announcements, spaced ANNOUNCE_INTERVAL seconds apart.
      \ An ARP\n   announcement is identical to the ARP Probe described above, except\n
      \  that now the sender and target IP addresses are both set to the\n   host's
      newly selected IPv4 address.  The purpose of these ARP\n   announcements is
      to make sure that other hosts on the link do not\n   have stale ARP cache entries
      left over from some other host that may\n   previously have been using the same
      address.\n"
    title: 2.4.  Announcing an Address
  - contents:
    - "2.5.  Conflict Detection and Defense\n   Address conflict detection is not
      limited to the address selection\n   phase, when a host is sending ARP probes.
      \ Address conflict detection\n   is an ongoing process that is in effect for
      as long as a host is\n   using an IPv4 Link-Local address.  At any time, if
      a host receives an\n   ARP packet (request *or* reply) on an interface where
      the 'sender IP\n   address' is the IP address the host has configured for that\n
      \  interface, but the 'sender hardware address' does not match the\n   hardware
      address of that interface, then this is a conflicting ARP\n   packet, indicating
      an address conflict.\n   A host MUST respond to a conflicting ARP packet as
      described in\n   either (a) or (b) below:\n   (a) Upon receiving a conflicting
      ARP packet, a host MAY elect to\n   immediately configure a new IPv4 Link-Local
      address as described\n   above, or\n   (b) If a host currently has active TCP
      connections or other reasons\n   to prefer to keep the same IPv4 address, and
      it has not seen any\n   other conflicting ARP packets within the last DEFEND_INTERVAL\n
      \  seconds, then it MAY elect to attempt to defend its address by\n   recording
      the time that the conflicting ARP packet was received, and\n   then broadcasting
      one single ARP announcement, giving its own IP and\n   hardware addresses as
      the sender addresses of the ARP.  Having done\n   this, the host can then continue
      to use the address normally without\n   any further special action.  However,
      if this is not the first\n   conflicting ARP packet the host has seen, and the
      time recorded for\n   the previous conflicting ARP packet is recent, within
      DEFEND_INTERVAL\n   seconds, then the host MUST immediately cease using this
      address and\n   configure a new IPv4 Link-Local address as described above.
      \ This is\n   necessary to ensure that two hosts do not get stuck in an endless\n
      \  loop with both hosts trying to defend the same address.\n   A host MUST respond
      to conflicting ARP packets as described in either\n   (a) or (b) above.  A host
      MUST NOT ignore conflicting ARP packets.\n   Forced address reconfiguration
      may be disruptive, causing TCP\n   connections to be broken.  However, it is
      expected that such\n   disruptions will be rare, and if inadvertent address
      duplication\n   happens, then disruption of communication is inevitable, no
      matter\n   how the addresses were assigned.  It is not possible for two\n   different
      hosts using the same IP address on the same network to\n   operate reliably.\n
      \  Before abandoning an address due to a conflict, hosts SHOULD actively\n   attempt
      to reset any existing connections using that address.  This\n   mitigates some
      security threats posed by address reconfiguration, as\n   discussed in Section
      5.\n   Immediately configuring a new address as soon as the conflict is\n   detected
      is the best way to restore useful communication as quickly\n   as possible.
      \ The mechanism described above of broadcasting a single\n   ARP announcement
      to defend the address mitigates the problem\n   somewhat, by helping to improve
      the chance that one of the two\n   conflicting hosts may be able to retain its
      address.\n   All ARP packets (*replies* as well as requests) that contain a
      Link-\n   Local 'sender IP address' MUST be sent using link-layer broadcast\n
      \  instead of link-layer unicast.  This aids timely detection of\n   duplicate
      addresses.  An example illustrating how this helps is given\n   in Section 4.\n"
    title: 2.5.  Conflict Detection and Defense
  - contents:
    - "2.6.  Address Usage and Forwarding Rules\n   A host implementing this specification
      has additional rules to\n   conform to, whether or not it has an interface configured
      with an\n   IPv4 Link-Local address.\n"
    - contents:
      - "2.6.1.  Source Address Usage\n   Since each interface on a host may have
        an IPv4 Link-Local address in\n   addition to zero or more other addresses
        configured by other means\n   (e.g., manually or via a DHCP server), a host
        may have to make a\n   choice about what source address to use when it sends
        a packet or\n   initiates a TCP connection.\n   Where both an IPv4 Link-Local
        and a routable address are available on\n   the same interface, the routable
        address should be preferred as the\n   source address for new communications,
        but packets sent from or to\n   the IPv4 Link-Local address are still delivered
        as expected.  The\n   IPv4 Link-Local address may continue to be used as a
        source address\n   in communications where switching to a preferred address
        would cause\n   communications failure because of the requirements of an upper-layer\n
        \  protocol (e.g., an existing TCP connection).  For more details, see\n   Section
        1.7.\n   A multi-homed host needs to select an outgoing interface whether
        or\n   not the destination is an IPv4 Link-Local address.  Details of that\n
        \  process are beyond the scope of this specification.  After selecting\n
        \  an interface, the multi-homed host should send packets involving IPv4\n
        \  Link-Local addresses as specified in this document, as if the\n   selected
        interface were the host's only interface.  See Section 3 for\n   further discussion
        of multi-homed hosts.\n"
      title: 2.6.1.  Source Address Usage
    - contents:
      - "2.6.2.  Forwarding Rules\n   Whichever interface is used, if the destination
        address is in the\n   169.254/16 prefix (excluding the address 169.254.255.255,
        which is\n   the broadcast address for the Link-Local prefix), then the sender\n
        \  MUST ARP for the destination address and then send its packet\n   directly
        to the destination on the same physical link.  This MUST be\n   done whether
        the interface is configured with a Link-Local or a\n   routable IPv4 address.\n
        \  In many network stacks, achieving this functionality may be as simple\n
        \  as adding a routing table entry indicating that 169.254/16 is\n   directly
        reachable on the local link.  This approach will not work\n   for routers
        or multi-homed hosts.  Refer to section 3 for more\n   discussion of multi-homed
        hosts.\n   The host MUST NOT send a packet with an IPv4 Link-Local destination\n
        \  address to any router for forwarding.\n   If the destination address is
        a unicast address outside the\n   169.254/16 prefix, then the host SHOULD
        use an appropriate routable\n   IPv4 source address, if it can.  If for any
        reason the host chooses\n   to send the packet with an IPv4 Link-Local source
        address (e.g., no\n   routable address is available on the selected interface),
        then it\n   MUST ARP for the destination address and then send its packet,
        with\n   an IPv4 Link-Local source address and a routable destination IPv4\n
        \  address, directly to its destination on the same physical link.  The\n
        \  host MUST NOT send the packet to any router for forwarding.\n   In the
        case of a device with a single interface and only an Link-\n   Local IPv4
        address, this requirement can be paraphrased as \"ARP for\n   everything\".\n
        \  In many network stacks, achieving this \"ARP for everything\" behavior\n
        \  may be as simple as having no primary IP router configured, having\n   the
        primary IP router address configured to 0.0.0.0, or having the\n   primary
        IP router address set to be the same as the host's own Link-\n   Local IPv4
        address.  For suggested behavior in multi-homed hosts, see\n   Section 3.\n"
      title: 2.6.2.  Forwarding Rules
    title: 2.6.  Address Usage and Forwarding Rules
  - contents:
    - "2.7.  Link-Local Packets Are Not Forwarded\n   A sensible default for applications
      which are sending from an IPv4\n   Link-Local address is to explicitly set the
      IPv4 TTL to 1.  This is\n   not appropriate in all cases as some applications
      may require that\n   the IPv4 TTL be set to other values.\n   An IPv4 packet
      whose source and/or destination address is in the\n   169.254/16 prefix MUST
      NOT be sent to any router for forwarding, and\n   any network device receiving
      such a packet MUST NOT forward it,\n   regardless of the TTL in the IPv4 header.
      \ Similarly, a router or\n   other host MUST NOT indiscriminately answer all
      ARP Requests for\n   addresses in the 169.254/16 prefix.  A router may of course
      answer\n   ARP Requests for one or more IPv4 Link-Local address(es) that it
      has\n   legitimately claimed for its own use according to the claim-and-\n   defend
      protocol described in this document.\n   This restriction also applies to multicast
      packets.  IPv4 packets\n   with a Link-Local source address MUST NOT be forwarded
      outside the\n   local link even if they have a multicast destination address.\n"
    title: 2.7.  Link-Local Packets Are Not Forwarded
  - contents:
    - "2.8.  Link-Local Packets are Local\n   The non-forwarding rule means that hosts
      may assume that all\n   169.254/16 destination addresses are \"on-link\" and
      directly\n   reachable.  The 169.254/16 address prefix MUST NOT be subnetted.\n
      \  This specification utilizes ARP-based address conflict detection,\n   which
      functions by broadcasting on the local subnet.  Since such\n   broadcasts are
      not forwarded, were subnetting to be allowed then\n   address conflicts could
      remain undetected.\n   This does not mean that Link-Local devices are forbidden
      from any\n   communication outside the local link.  IP hosts that implement
      both\n   Link-Local and conventional routable IPv4 addresses may still use\n
      \  their routable addresses without restriction as they do today.\n"
    title: 2.8.  Link-Local Packets are Local
  - contents:
    - "2.9.  Higher-Layer Protocol Considerations\n   Similar considerations apply
      at layers above IP.\n   For example, designers of Web pages (including automatically\n
      \  generated web pages) SHOULD NOT contain links with embedded IPv4\n   Link-Local
      addresses if those pages are viewable from hosts outside\n   the local link
      where the addresses are valid.\n   As IPv4 Link-Local addresses may change at
      any time and have limited\n   scope, IPv4 Link-Local addresses MUST NOT be stored
      in the DNS.\n"
    title: 2.9.  Higher-Layer Protocol Considerations
  - contents:
    - "2.10.  Privacy Concerns\n   Another reason to restrict leakage of IPv4 Link-Local
      addresses\n   outside the local link is privacy concerns.  If IPv4 Link-Local\n
      \  addresses are derived from a hash of the MAC address, some argue that\n   they
      could be indirectly associated with an individual, and thereby\n   used to track
      that individual's activities.  Within the local link\n   the hardware addresses
      in the packets are all directly observable, so\n   as long as IPv4 Link-Local
      addresses don't leave the local link they\n   provide no more information to
      an intruder than could be gained by\n   direct observation of hardware addresses.\n"
    title: 2.10.  Privacy Concerns
  - contents:
    - "2.11.  Interaction between DHCPv4 client and IPv4 Link-Local State\n       Machines\n
      \  As documented in Appendix A, early implementations of IPv4 Link-Local\n   have
      modified the DHCP state machine.  Field experience shows that\n   these modifications
      reduce the reliability of the DHCP service.\n   A device that implements both
      IPv4 Link-Local and a DHCPv4 client\n   should not alter the behavior of the
      DHCPv4 client to accommodate\n   IPv4 Link-Local configuration.  In particular
      configuration of an\n   IPv4 Link-Local address, whether or not a DHCP server
      is currently\n   responding, is not sufficient reason to unconfigure a valid
      DHCP\n   lease, to stop the DHCP client from attempting to acquire a new IP\n
      \  address, to change DHCP timeouts or to change the behavior of the\n   DHCP
      state machine in any other way.\n   Further discussion of this issue is provided
      in \"Detection of Network\n   Attachment (DNA) in IPv4\" [DNAv4].\n"
    title: 2.11.  Interaction between DHCPv4 client and IPv4 Link-Local State
  title: 2.  Address Selection, Defense and Delivery
- contents:
  - "3.  Considerations for Multiple Interfaces\n   The considerations outlined here
    also apply whenever a host has\n   multiple IP addresses, whether or not it has
    multiple physical\n   interfaces.  Other examples of multiple interfaces include
    different\n   logical endpoints (tunnels, virtual private networks etc.) and\n
    \  multiple logical networks on the same physical medium.  This is often\n   referred
    to as \"multi-homing\".\n   Hosts which have more than one active interface and
    elect to\n   implement dynamic configuration of IPv4 Link-Local addresses on one\n
    \  or more of those interfaces will face various problems.  This section\n   lists
    these problems but does no more than indicate how one might\n   solve them.  At
    the time of this writing, there is no silver bullet\n   which solves these problems
    in all cases, in a general way.\n   Implementors must think through these issues
    before implementing the\n   protocol specified in this document on a system which
    may have more\n   than one active interface as part of a TCP/IP stack capable
    of\n   multi-homing.\n"
  - contents:
    - "3.1.  Scoped Addresses\n   A host may be attached to more than one network
      at the same time.  It\n   would be nice if there was a single address space
      used in every\n   network, but this is not the case.  Addresses used in one
      network, be\n   it a network behind a NAT or a link on which IPv4 Link-Local\n
      \  addresses are used, cannot be used in another network and have the\n   same
      effect.\n   It would also be nice if addresses were not exposed to applications,\n
      \  but they are.  Most software using TCP/IP which await messages\n   receives
      from any interface at a particular port number, for a\n   particular transport
      protocol.  Applications are generally only aware\n   (and care) that they have
      received a message.  The application knows\n   the address of the sender to
      which the application will reply.\n   The first scoped address problem is source
      address selection.  A\n   multi-homed host has more than one address.  Which
      address should be\n   used as the source address when sending to a particular
      destination?\n   This question is usually answered by referring to a routing
      table,\n   which expresses on which interface (with which address) to send,
      and\n   how to send (should one forward to a router, or send directly).  The\n
      \  choice is made complicated by scoped addresses because the address\n   range
      in which the destination lies may be ambiguous.  The table may\n   not be able
      to yield a good answer.  This problem is bound up with\n   next-hop selection,
      which is discussed in Section 3.2.\n   The second scoped address problem arises
      from scoped parameters\n   leaking outside their scope.  This is discussed in
      Section 7.\n   It is possible to overcome these problems.  One way is to expose\n
      \  scope information to applications such that they are always aware of\n   what
      scope a peer is in.  This way, the correct interface could be\n   selected,
      and a safe procedure could be followed with respect to\n   forwarding addresses
      and other scoped parameters.  There are other\n   possible approaches.  None
      of these methods have been standardized\n   for IPv4 nor are they specified
      in this document.  A good API design\n   could mitigate the problems, either
      by exposing address scopes to\n   'scoped-address aware' applications or by
      cleverly encapsulating the\n   scoping information and logic so that applications
      do the right thing\n   without being aware of address scoping.\n   An implementer
      could undertake to solve these problems, but cannot\n   simply ignore them.
      \ With sufficient experience, it is hoped that\n   specifications will emerge
      explaining how to overcome scoped address\n   multi-homing problems.\n"
    title: 3.1.  Scoped Addresses
  - contents:
    - "3.2.  Address Ambiguity\n   This is a core problem with respect to IPv4 Link-Local
      destination\n   addresses being reachable on more than one interface.  What
      should a\n   host do when it needs to send to Link-Local destination L and L
      can\n   be resolved using ARP on more than one link?\n   Even if a Link-Local
      address can be resolved on only one link at a\n   given moment, there is no
      guarantee that it will remain unambiguous\n   in the future.  Additional hosts
      on other interfaces may claim the\n   address L as well.\n   One possibility
      is to support this only in the case where the\n   application specifically expresses
      which interface to send from.\n   There is no standard or obvious solution to
      this problem.  Existing\n   application software written for the IPv4 protocol
      suite is largely\n   incapable of dealing with address ambiguity.  This does
      not preclude\n   an implementer from finding a solution, writing applications
      which\n   are able to use it, and providing a host which can support dynamic\n
      \  configuration of IPv4 Link-Local addresses on more than one\n   interface.
      \ This solution will almost surely not be generally\n   applicable to existing
      software and transparent to higher layers,\n   however.\n   Given that the IP
      stack must have the outbound interface associated\n   with a packet that needs
      to be sent to a Link-Local destination\n   address, interface selection must
      occur.  The outbound interface\n   cannot be derived from the packet's header
      parameters such as source\n   or destination address (e.g., by using the forwarding
      table lookup).\n   Therefore, outbound interface association must be done explicitly\n
      \  through other means.  The specification does not stipulate those\n   means.\n"
    title: 3.2.  Address Ambiguity
  - contents:
    - "3.3.  Interaction with Hosts with Routable Addresses\n   Attention is paid
      in this specification to transition from the use of\n   IPv4 Link-Local addresses
      to routable addresses (see Section 1.5).\n   The intention is to allow a host
      with a single interface to first\n   support Link-Local configuration then gracefully
      transition to the\n   use of a routable address.  Since the host transitioning
      to the use\n   of a routable address may temporarily have more than one address\n
      \  active, the scoped address issues described in Section 3.1 will\n   apply.
      \ When a host acquires a routable address, it does not need to\n   retain its
      Link-Local address for the purpose of communicating with\n   other devices on
      the link that are themselves using only Link-Local\n   addresses: any host conforming
      to this specification knows that\n   regardless of source address an IPv4 Link-Local
      destination must be\n   reached by forwarding directly to the destination, not
      via a router;\n   it is not necessary for that host to have a Link-Local source
      address\n   in order to send to a Link-Local destination address.\n   A host
      with an IPv4 Link-Local address may send to a destination\n   which does not
      have an IPv4 Link-Local address.  If the host is not\n   multi-homed, the procedure
      is simple and unambiguous: Using ARP and\n   forwarding directly to on-link
      destinations is the default route.  If\n   the host is multi-homed, however,
      the routing policy is more complex,\n   especially if one of the interfaces
      is configured with a routable\n   address and the default route is (sensibly)
      directed at a router\n   accessible through that interface.  The following example
      illustrates\n   this problem and provides a common solution to it.\n                         i1
      +---------+ i2   i3 +-------+\n               ROUTER-------=  HOST1  =---------=
      HOST2 |\n                      link1 +---------+  link2  +-------+\n   In the
      figure above, HOST1 is connected to link1 and link2.\n   Interface i1 is configured
      with a routable address, while i2 is an\n   IPv4 Link-Local address.  HOST1
      has its default route set to ROUTER's\n   address, through i1.  HOST1 will route
      to destinations in 169.254/16\n   to i2, sending directly to the destination.\n
      \  HOST2 has a configured (non-Link-Local) IPv4 address assigned to i3.\n   Using
      a name resolution or service discovery protocol HOST1 can\n   discover HOST2's
      address.  Since HOST2's address is not in\n   169.254/16, HOST1's routing policy
      will send datagrams to HOST2 via\n   i1, to the ROUTER.  Unless there is a route
      from ROUTER to HOST2, the\n   datagrams sent from HOST1 to HOST2 will not reach
      it.\n   One solution to this problem is for a host to attempt to reach any\n
      \  host locally (using ARP) for which it receives an unreachable ICMP\n   error
      message (ICMP message codes 0, 1, 6 or 7 [RFC792]).  The host\n   tries all
      its attached links in a round robin fashion.  This has been\n   implemented
      successfully for some IPv6 hosts, to circumvent exactly\n   this problem.  In
      terms of this example, HOST1 upon failing to reach\n   HOST2 via the ROUTER,
      will attempt to forward to HOST2 via i2 and\n   succeed.\n   It may also be
      possible to overcome this problem using techniques\n   described in section
      3.2, or other means not discussed here.  This\n   specification does not provide
      a standard solution, nor does it\n   preclude implementers from supporting multi-homed
      configurations,\n   provided that they address the concerns in this section
      for the\n   applications which will be supported on the host.\n"
    title: 3.3.  Interaction with Hosts with Routable Addresses
  - contents:
    - "3.4.  Unintentional Autoimmune Response\n   Care must be taken if a multi-homed
      host can support more than one\n   interface on the same link, all of which
      support IPv4 Link-Local\n   autoconfiguration.  If these interfaces attempt
      to allocate the same\n   address, they will defend the host against itself --
      causing the\n   claiming algorithm to fail.  The simplest solution to this problem
      is\n   to run the algorithm independently on each interface configured with\n
      \  IPv4 Link-Local addresses.\n   In particular, ARP packets which appear to
      claim an address which is\n   assigned to a specific interface, indicate conflict
      only if they are\n   received on that interface and their hardware address is
      of some\n   other interface.\n   If a host has two interfaces on the same link,
      then claiming and\n   defending on those interfaces must ensure that they end
      up with\n   different addresses just as if they were on different hosts.  Note\n
      \  that some of the ways a host may find itself with two interfaces on\n   the
      same link may be unexpected and non-obvious, such as when a host\n   has Ethernet
      and 802.11 wireless, but those two links are (possibly\n   even without the
      knowledge of the host's user) bridged together.\n"
    title: 3.4.  Unintentional Autoimmune Response
  title: 3.  Considerations for Multiple Interfaces
- contents:
  - "4.  Healing of Network Partitions\n   Hosts on disjoint network links may configure
    the same IPv4 Link-\n   Local address.  If these separate network links are later
    joined or\n   bridged together, then there may be two hosts which are now on the\n
    \  same link, trying to use the same address.  When either host attempts\n   to
    communicate with any other host on the network, it will at some\n   point broadcast
    an ARP packet which will enable the hosts in question\n   to detect that there
    is an address conflict.\n   When these address conflicts are detected, the subsequent
    forced\n   reconfiguration may be disruptive, causing TCP connections to be\n
    \  broken.  However, it is expected that such disruptions will be rare.\n   It
    should be relatively uncommon for networks to be joined while\n   hosts on those
    networks are active.  Also, 65024 addresses are\n   available for IPv4 Link-Local
    use, so even when two small networks\n   are joined, the chance of conflict for
    any given host is fairly\n   small.\n   When joining two large networks (defined
    as networks with a\n   substantial number of hosts per segment) there is a greater
    chance of\n   conflict.  In such networks, it is likely that the joining of\n
    \  previously separated segments will result in one or more hosts\n   needing
    to change their IPv4 Link-Local address, with subsequent loss\n   of TCP connections.
    \ In cases where separation and re-joining is\n   frequent, as in remotely bridged
    networks, this could prove\n   disruptive.  However, unless the number of hosts
    on the joined\n   segments is very large, the traffic resulting from the join
    and\n   subsequent address conflict resolution will be small.\n   Sending ARP
    replies that have IPv4 Link-Local sender addresses via\n   broadcast instead of
    unicast ensures that these conflicts can be\n   detected as soon as they become
    potential problems, but no sooner.\n   For example, if two disjoint network links
    are joined, where hosts A\n   and B have both configured the same Link-Local address,
    X, they can\n   remain in this state until A, B or some other host attempts to\n
    \  initiate communication.  If some other host C now sends an ARP\n   request
    for address X, and hosts A and B were to both reply with\n   conventional unicast
    ARP replies, then host C might be confused, but\n   A and B still wouldn't know
    there is a problem because neither would\n   have seen the other's packet.  Sending
    these replies via broadcast\n   allows A and B to see each other's conflicting
    ARP packets and\n   respond accordingly.\n   Note that sending periodic gratuitous
    ARPs in an attempt to detect\n   these conflicts sooner is not necessary, wastes
    network bandwidth,\n   and may actually be detrimental.  For example, if the network
    links\n   were joined only briefly, and were separated again before any new\n
    \  communication involving A or B were initiated, then the temporary\n   conflict
    would have been benign and no forced reconfiguration would\n   have been required.
    \ Triggering an unnecessary forced reconfiguration\n   in this case would not
    serve any useful purpose.  Hosts SHOULD NOT\n   send periodic gratuitous ARPs.\n"
  title: 4.  Healing of Network Partitions
- contents:
  - "5.  Security Considerations\n   The use of IPv4 Link-Local Addresses may open
    a network host to new\n   attacks.  In particular, a host that previously did
    not have an IP\n   address, and no IP stack running, was not susceptible to IP-based\n
    \  attacks.  By configuring a working address, the host may now be\n   vulnerable
    to IP-based attacks.\n   The ARP protocol [RFC826] is insecure.  A malicious host
    may send\n   fraudulent ARP packets on the network, interfering with the correct\n
    \  operation of other hosts.  For example, it is easy for a host to\n   answer
    all ARP requests with replies giving its own hardware address,\n   thereby claiming
    ownership of every address on the network.\n   NOTE: There are certain kinds of
    local links, such as wireless LANs,\n   that provide no physical security.  Because
    of the existence of these\n   links it would be very unwise for an implementer
    to assume that when\n   a device is communicating only on the local link it can
    dispense with\n   normal security precautions.  Failure to implement appropriate\n
    \  security measures could expose users to considerable risks.\n   A host implementing
    IPv4 Link-Local configuration has an additional\n   vulnerability to selective
    reconfiguration and disruption.  It is\n   possible for an on-link attacker to
    issue ARP packets which would\n   cause a host to break all its connections by
    switching to a new\n   address.  The attacker could force the host implementing
    IPv4 Link-\n   Local configuration to select certain addresses, or prevent it
    from\n   ever completing address selection.  This is a distinct threat from\n
    \  that posed by spoofed ARPs, described in the preceding paragraph.\n   Implementations
    and users should also note that a node that gives up\n   an address and reconfigures,
    as required by section 2.5, allows the\n   possibility that another node can easily
    and successfully hijack\n   existing TCP connections.\n   Implementers are advised
    that the Internet Protocol architecture\n   expects every networked device or
    host must implement security which\n   is adequate to protect the resources to
    which the device or host has\n   access, including the network itself, against
    known or credible\n   threats.  Even though use of IPv4 Link-Local addresses may
    reduce the\n   number of threats to which a device is exposed, implementers of\n
    \  devices supporting the Internet Protocol must not assume that a\n   customer's
    local network is free from security risks.\n   While there may be particular kinds
    of devices, or particular\n   environments, for which the security provided by
    the network is\n   adequate to protect the resources that are accessible by the
    device,\n   it would be misleading to make a general statement to the effect that\n
    \  the requirement to provide security is reduced for devices using IPv4\n   Link-Local
    addresses as a sole means of access.\n   In all cases, whether or not IPv4 Link-Local
    addresses are used, it\n   is necessary for implementers of devices supporting
    the Internet\n   Protocol to analyze the known and credible threats to which a\n
    \  specific host or device might be subjected, and to the extent that it\n   is
    feasible, to provide security mechanisms which ameliorate or\n   reduce the risks
    associated with such threats.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Application Programming Considerations\n   Use of IPv4 Link-Local autoconfigured
    addresses presents additional\n   challenges to writers of applications and may
    result in existing\n   application software failing.\n"
  - contents:
    - "6.1.  Address Changes, Failure and Recovery\n   IPv4 Link-Local addresses used
      by an application may change over\n   time.  Some application software encountering
      an address change will\n   fail.  For example, existing client TCP connections
      will be aborted,\n   servers whose addresses change will have to be rediscovered,
      blocked\n   reads and writes will exit with an error condition, and so on.\n
      \  Vendors producing application software which will be used on IP\n   implementations
      supporting IPv4 Link-Local address configuration\n   SHOULD detect and cope
      with address change events.  Vendors producing\n   IPv4 implementations supporting
      IPv4 Link-Local address configuration\n   SHOULD expose address change events
      to applications.\n"
    title: 6.1.  Address Changes, Failure and Recovery
  - contents:
    - "6.2.  Limited Forwarding of Locators\n   IPv4 Link-Local addresses MUST NOT
      be forwarded via an application\n   protocol (for example in a URL), to a destination
      that is not on the\n   same link.  This is discussed further in Sections 2.9
      and 3.\n   Existing distributed application software that forwards address\n
      \  information may fail.  For example, FTP [RFC959] (when not using\n   passive
      mode) transmits the IP address of the client.  Suppose a\n   client starts up
      and obtains its IPv4 configuration at a time when it\n   has only a Link-Local
      address.  Later, the host gets a global IP\n   address, and the client contacts
      an FTP server outside the local\n   link.  If the FTP client transmits its old
      Link-Local address instead\n   of its new global IP address in the FTP \"port\"
      command, then the FTP\n   server will be unable to open a data connection back
      to the client,\n   and the FTP operation will fail.\n"
    title: 6.2.  Limited Forwarding of Locators
  - contents:
    - "6.3.  Address Ambiguity\n   Application software run on a multi-homed host
      that supports IPv4\n   Link-Local address configuration on more than one interface
      may fail.\n   This is because application software assumes that an IPv4 address
      is\n   unambiguous, that it can refer to only one host.  IPv4 Link-Local\n   addresses
      are unique only on a single link.  A host attached to\n   multiple links can
      easily encounter a situation where the same\n   address is present on more than
      one interface, or first on one\n   interface, later on another; in any case
      associated with more than\n   one host.  Most existing software is not prepared
      for this ambiguity.\n   In the future, application programming interfaces could
      be developed\n   to prevent this problem.  This issue is discussed in Section
      3.\n"
    title: 6.3.  Address Ambiguity
  title: 6.  Application Programming Considerations
- contents:
  - "7.  Router Considerations\n   A router MUST NOT forward a packet with an IPv4
    Link-Local source or\n   destination address, irrespective of the router's default
    route\n   configuration or routes obtained from dynamic routing protocols.\n   A
    router which receives a packet with an IPv4 Link-Local source or\n   destination
    address MUST NOT forward the packet.  This prevents\n   forwarding of packets
    back onto the network segment from which they\n   originated, or to any other
    segment.\n"
  title: 7.  Router Considerations
- contents:
  - "8.  IANA Considerations\n   The IANA has allocated the prefix 169.254/16 for
    the use described in\n   this document.  The first and last 256 addresses in this
    range\n   (169.254.0.x and 169.254.255.x) are allocated by Standards Action, as\n
    \  defined in \"Guidelines for Writing an IANA\" (BCP 26) [RFC2434].  No\n   other
    IANA services are required by this document.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Constants\n   The following timing constants are used in this protocol; they
    are\n   not intended to be user configurable.\n   PROBE_WAIT           1 second
    \  (initial random delay)\n   PROBE_NUM            3          (number of probe
    packets)\n   PROBE_MIN            1 second   (minimum delay till repeated probe)\n
    \  PROBE_MAX            2 seconds  (maximum delay till repeated probe)\n   ANNOUNCE_WAIT
    \       2 seconds  (delay before announcing)\n   ANNOUNCE_NUM         2          (number
    of announcement packets)\n   ANNOUNCE_INTERVAL    2 seconds  (time between announcement
    packets)\n   MAX_CONFLICTS       10          (max conflicts before rate limiting)\n
    \  RATE_LIMIT_INTERVAL 60 seconds  (delay between successive attempts)\n   DEFEND_INTERVAL
    \    10 seconds  (minimum interval between defensive\n                                    ARPs).\n"
  title: 9.  Constants
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC792]  Postel, J., \"Internet Control Message
      Protocol\", STD 5, RFC\n             792, September 1981.\n   [RFC826]  Plummer,
      D., \"Ethernet Address Resolution Protocol: Or\n             converting network
      protocol addresses to 48.bit Ethernet\n             address for transmission
      on Ethernet hardware\", STD 37, RFC\n             826, November 1982.\n   [RFC2119]
      Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2434] Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an\n             IANA Considerations Section in RFCs\",
      BCP 26, RFC 2434,\n             October 1998.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [802]     IEEE Standards for Local and Metropolitan
      Area Networks:\n             Overview and Architecture, ANSI/IEEE Std 802, 1990.\n
      \  [802.3]   ISO/IEC 8802-3 Information technology - Telecommunications\n             and
      information exchange between systems - Local and\n             metropolitan
      area networks - Common specifications - Part\n             3:  Carrier Sense
      Multiple Access with Collision Detection\n             (CSMA/CD) Access Method
      and Physical Layer Specifications,\n             (also ANSI/IEEE Std 802.3-
      1996), 1996.\n   [802.5]   ISO/IEC 8802-5 Information technology - Telecommunications\n
      \            and information exchange between systems - Local and\n             metropolitan
      area networks - Common specifications - Part\n             5: Token ring access
      method and physical layer\n             specifications, (also ANSI/IEEE Std
      802.5-1998), 1998.\n   [802.11]  Information technology - Telecommunications
      and information\n             exchange between systems - Local and metropolitan
      area\n             networks - Specific Requirements Part 11:  Wireless LAN\n
      \            Medium Access Control (MAC) and Physical Layer (PHY)\n             Specifications,
      IEEE Std. 802.11-1999, 1999.\n   [RFC959]  Postel, J. and J. Reynolds, \"File
      Transfer Protocol\", STD\n             9, RFC 959, October 1985.\n   [RFC1918]
      Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n             and
      E. Lear, \"Address Allocation for Private Internets\",\n             BCP 5,
      RFC 1918, February 1996.\n   [RFC2131] Droms, R., \"Dynamic Host Configuration
      Protocol\", RFC 2131,\n             March 1997.\n   [RFC2462] Thomson, S. and
      T. Narten, \"IPv6 Stateless Address\n             Autoconfiguration\", RFC 2462,
      December 1998.\n   [RFC3027] Holdrege, M. and P. Srisuresh, \"Protocol Complications
      with\n             the IP Network Address Translator\", RFC 3027, January 2001.\n
      \  [DNAv4]   Aboba, B., \"Detection of Network Attachment (DNA) in IPv4\",\n
      \            Work in Progress, July 2004.\n   [LLMNR]   Esibov, L., Aboba, B.
      and D. Thaler, \"Linklocal Multicast\n             Name Resolution (LLMNR)\",
      Work in Progress, June 2004.\n"
    - "Acknowledgments\n   We would like to thank (in alphabetical order) Jim Busse,
      Pavani\n   Diwanji, Donald Eastlake 3rd, Robert Elz, Peter Ford, Spencer\n   Giacalone,
      Josh Graessley, Brad Hards, Myron Hattig, Hugh Holbrook,\n   Christian Huitema,
      Richard Johnson, Kim Yong-Woon, Mika Liljeberg,\n   Rod Lopez, Keith Moore,
      Satish Mundra, Thomas Narten, Erik Nordmark,\n   Philip Nye, Howard Ridenour,
      Daniel Senie, Dieter Siegmund, Valery\n   Smyslov, and Ryan Troll for their
      contributions.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - 'Appendix A - Prior Implementations

    '
  - contents:
    - "A.1.  Apple Mac OS 8.x and 9.x.\n   Mac OS chooses the IP address on a pseudo-random
      basis.  The selected\n   address is saved in persistent storage for continued
      use after\n   reboot, when possible.\n   Mac OS sends nine DHCPDISCOVER packets,
      with an interval of two\n   seconds between packets.  If no response is received
      from any of\n   these requests (18 seconds), it will autoconfigure.\n   Upon
      finding that a selected address is in use, Mac OS will select a\n   new random
      address and try again, at a rate limited to no more than\n   one attempt every
      two seconds.\n   Autoconfigured Mac OS systems check for the presence of a DHCP
      server\n   every five minutes.  If a DHCP server is found but Mac OS is not\n
      \  successful in obtaining a new lease, it keeps the existing\n   autoconfigured
      IP address.  If Mac OS is successful at obtaining a\n   new lease, it drops
      all existing connections without warning.  This\n   may cause users to lose
      sessions in progress.  Once a new lease is\n   obtained, Mac OS will not allocate
      further connections using the\n   autoconfigured IP address.\n   Mac OS systems
      do not send packets addressed to a Link-Local address\n   to the default gateway
      if one is present; these addresses are always\n   resolved on the local segment.\n
      \  Mac OS systems by default send all outgoing unicast packets with a\n   TTL
      of 255.  All multicast and broadcast packets are also sent with a\n   TTL of
      255 if they have a source address in the 169.254/16 prefix.\n   Mac OS implements
      media sense where the hardware (and driver\n   software) supports this.  As
      soon as network connectivity is\n   detected, a DHCPDISCOVER will be sent on
      the interface.  This means\n   that systems will immediately transition out
      of autoconfigured mode\n   as soon as connectivity is restored.\n"
    title: A.1.  Apple Mac OS 8.x and 9.x.
  - contents:
    - "A.2.  Apple Mac OS X Version 10.2\n   Mac OS X chooses the IP address on a
      pseudo-random basis.  The\n   selected address is saved in memory so that it
      can be re-used during\n   subsequent autoconfiguration attempts during a single
      boot of the\n   system.\n   Autoconfiguration of a Link-Local address depends
      on the results of\n   the DHCP process.  DHCP sends two packets, with timeouts
      of one and\n   two seconds.  If no response is received (three seconds), it
      begins\n   autoconfiguration.  DHCP continues sending packets in parallel for
      a\n   total time of 60 seconds.\n   At the start of autoconfiguration, it generates
      10 unique random IP\n   addresses, and probes each one in turn for 2 seconds.
      \ It stops\n   probing after finding an address that is not in use, or the list
      of\n   addresses is exhausted.\n   If DHCP is not successful, it waits five
      minutes before starting over\n   again.  Once DHCP is successful, the autoconfigured
      Link-Local\n   address is given up.  The Link-Local subnet, however, remains\n
      \  configured.\n   Autoconfiguration is only attempted on a single interface
      at any\n   given moment in time.\n   Mac OS X ensures that the connected interface
      with the highest\n   priority is associated with the Link-Local subnet.  Packets
      addressed\n   to a Link-Local address are never sent to the default gateway,
      if one\n   is present.  Link-local addresses are always resolved on the local\n
      \  segment.\n   Mac OS X implements media sense where the hardware and driver
      support\n   it.  When the network media indicates that it has been connected,
      the\n   autoconfiguration process begins again, and attempts to re-use the\n
      \  previously assigned Link-Local address.  When the network media\n   indicates
      that it has been disconnected, the system waits four\n   seconds before de-configuring
      the Link-Local address and subnet.  If\n   the connection is restored before
      that time, the autoconfiguration\n   process begins again.  If the connection
      is not restored before that\n   time, the system chooses another interface to
      autoconfigure.\n   Mac OS X by default sends all outgoing unicast packets with
      a TTL of\n   255.  All multicast and broadcast packets are also sent with a
      TTL of\n   255 if they have a source address in the 169.254/16 prefix.\n"
    title: A.2.  Apple Mac OS X Version 10.2
  - contents:
    - "A.3.  Microsoft Windows 98/98SE\n   Windows 98/98SE systems choose their IPv4
      Link-Local address on a\n   pseudo-random basis.  The address selection algorithm
      is based on\n   computing a hash on the interface's MAC address, so that a large\n
      \  collection of hosts should obey the uniform probability distribution\n   in
      choosing addresses within the 169.254/16 address space.  Deriving\n   the initial
      IPv4 Link-Local address from the interface's MAC address\n   also ensures that
      systems rebooting will obtain the same\n   autoconfigured address, unless a
      conflict is detected.\n   When in INIT state, the Windows 98/98SE DHCP Client
      sends out a total\n   of 4 DHCPDISCOVERs, with an inter-packet interval of 6
      seconds.  When\n   no response is received after all 4 packets (24 seconds),
      it will\n   autoconfigure an address.\n   The autoconfigure retry count for
      Windows 98/98SE systems is 10.\n   After trying 10 autoconfigured IPv4 addresses,
      and finding all are\n   taken, the host will boot without an IPv4 address.\n
      \  Autoconfigured Windows 98/98SE systems check for the presence of a\n   DHCP
      server every five minutes.  If a DHCP server is found but\n   Windows 98 is
      not successful in obtaining a new lease, it keeps the\n   existing autoconfigured
      IPv4 Link-Local address.  If Windows 98/98SE\n   is successful at obtaining
      a new lease, it drops all existing\n   connections without warning.  This may
      cause users to lose sessions\n   in progress.  Once a new lease is obtained,
      Windows 98/98SE will not\n   allocate further connections using the autoconfigured
      IPv4 Link-Local\n   address.\n   Windows 98/98SE systems with an IPv4 Link-Local
      address do not send\n   packets addressed to an IPv4 Link-Local address to the
      default\n   gateway if one is present; these addresses are always resolved on
      the\n   local segment.\n   Windows 98/98SE systems by default send all outgoing
      unicast packets\n   with a TTL of 128.  TTL configuration is performed by setting
      the\n   Windows Registry Key\n   HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services:\\Tcpip\\\n
      \  Parameters\\DefaultTTL of type REG_DWORD to the appropriate value.\n   However,
      this default TTL will apply to all packets.  While this\n   facility could be
      used to set the default TTL to 255, it cannot be\n   used to set the default
      TTL of IPv4 Link-Local packets to one (1),\n   while allowing other packets
      to be sent with a TTL larger than one.\n   Windows 98/98SE systems do not implement
      media sense.  This means\n   that network connectivity issues (such as a loose
      cable) may prevent\n   a system from contacting the DHCP server, thereby causing
      it to\n   auto-configure.  When the connectivity problem is fixed (such as when\n
      \  the cable is re-connected) the situation will not immediately correct\n   itself.
      \ Since the system will not sense the re-connection, it will\n   remain in autoconfigured
      mode until an attempt is made to reach the\n   DHCP server.\n   The DHCP server
      included with Windows 98SE Internet Connection\n   Sharing (ICS) (a NAT implementation)
      allocates out of the 192.168/16\n   private address space by default.\n   However,
      it is possible to change the allocation prefix via a\n   registry key, and no
      checks are made to prevent allocation out of the\n   IPv4 Link-Local prefix.
      \ When configured to do so, Windows 98SE ICS\n   will rewrite packets from the
      IPv4 Link-Local prefix and forward them\n   beyond the local link.  Windows
      98SE ICS does not automatically route\n   for the IPv4 Link-Local prefix, so
      that hosts obtaining addresses via\n   DHCP cannot communicate with autoconfigured-only
      devices.\n   Other home gateways exist that allocate addresses out of the IPv4\n
      \  Link-Local prefix by default.  Windows 98/98SE systems can use a\n   169.254/16
      IPv4 Link-Local address as the source address when\n   communicating with non-Link-Local
      hosts.  Windows 98/98SE does not\n   support router solicitation/advertisement.
      \ Windows 98/98SE systems\n   will not automatically discover a default gateway
      when in\n   autoconfigured mode.\n"
    title: A.3.  Microsoft Windows 98/98SE
  - contents:
    - "A.4.  Windows XP, 2000, and ME\n   The autoconfiguration behavior of Windows
      XP, Windows 2000, and\n   Windows ME systems is identical to Windows 98/98SE
      except in the\n   following respects:\n   Media Sense\n   Router Discovery\n
      \  Silent RIP\n   Windows XP, 2000, and ME implement media sense.  As soon as
      network\n   connectivity is detected, a DHCPREQUEST or DHCPDISCOVER will be
      sent\n   on the interface.  This means that systems will immediately\n   transition
      out of autoconfigured mode as soon as connectivity is\n   restored.\n   Windows
      XP, 2000, and ME also support router discovery, although it\n   is turned off
      by default.  Windows XP and 2000 also support a RIP\n   listener.  This means
      that they may inadvertently discover a default\n   gateway while in autoconfigured
      mode.\n   ICS on Windows XP/2000/ME behaves identically to Windows 98SE with\n
      \  respect to address allocation and NATing of Link-Local prefixes.\n"
    title: A.4.  Windows XP, 2000, and ME
  title: Appendix A - Prior Implementations
- contents:
  - "Authors' Addresses\n   Stuart Cheshire\n   Apple Computer, Inc.\n   1 Infinite
    Loop\n   Cupertino\n   California 95014, USA\n   Phone: +1 408 974 3207\n   EMail:
    rfc@stuartcheshire.org\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft
    Way\n   Redmond, WA 98052\n   Phone: +1 425 818 4011\n   EMail: bernarda@microsoft.com\n
    \  Erik Guttman\n   Sun Microsystems\n   Eichhoelzelstr. 7\n   74915 Waibstadt
    Germany\n   Phone: +49 7263 911 701\n   EMail: erik@spybeam.org\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
