- title: __initial_text__
  contents:
  - '                         ARP Extension - UNARP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Address Resolution Protocol allows an IP node to determine the\n\
    \   hardware (datalink) address of a neighboring node on a broadcast\n   network.\
    \  The protocol depends on timers to age away old ARP entries.\n   This document\
    \ specifies a trivial modification to the ARP mechanism,\n   not the packet format,\
    \ which allows a node to announce that it is\n   leaving the network and that\
    \ all other nodes should modify their ARP\n   tables accordingly.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to James Carlson/Xylogics for reviewing this document\
    \ and\n   proposing the backwards compatibility mechanism.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The primary purpose of the Address Resolution Protocol, as\
    \ defined in\n   [1], is to determine a node's hardware address based on its network\n\
    \   address (protocol address in ARPspeak).  The ARP protocol\n   specifically\
    \ states that nodes should not periodically advertise\n   their existence for\
    \ two reasons: first, this would generate a lot of\n   network traffic and table\
    \ maintenance overhead; second, it is highly\n   unlikely that all nodes will\
    \ need to communicate to all other nodes.\n   Since a node does not advertise\
    \ its existence, neither does it\n   advertise its imminent departure.  This is\
    \ not a serious problem\n   since most ARP implementations maintain timers to\
    \ age away old\n   entries, and departing nodes seldom depart gracefully in any\
    \ case.\n   Over time, an additional use has been found for ARP: Proxy ARP.\n\
    \   While there are those who believe Proxy ARP is an evil thing, it does\n  \
    \ serve a purpose; that is, it allows for communication in ways never\n   considered\
    \ in the original IP architecture.  For example, allows\n   dial-in hosts to connect\
    \ to a network without consuming a large\n   amount of the IP address space (i.e.,\
    \ all of the hosts contain\n   addresses on the same subnet, even though they\
    \ are not directly\n   attached to the physical network associated with that subnet\
    \ address.\n   It is this use of Proxy ARP which produces the problem addressed\
    \ by\n   this document.\n"
- title: 2. The Problem
  contents:
  - "2. The Problem\n   Consider the following topology:\n                    +--------+\n\
    \                    | Host A |\n                    +--------+\n            \
    \            |\n      ======================================== LAN\n         \
    \ |                             |\n      +--------+                    +--------+\n\
    \      |  CS1   |   comm. servers    |  CS2   |\n      +--------+            \
    \        +--------+\n        |    |                        |    |\n       +-+\
    \  +-+                      +-+  +-+\n       | |  | |       modems         | |\
    \  | |\n       +-+  +-+                      +-+  +-+\n   Assume that all of the\
    \ modems are on the same rotary; that is, when a\n   remote host dials in, it\
    \ may be assigned a modem on either of the\n   communication servers.  Further\
    \ assume that all of the remote hosts'\n   IP addresses have the same subnet address\
    \ as the servers and Host A,\n   this in order to conserve address space.\n  \
    \ To begin, a remote host dials into CS1 and attempts to communicate\n   with\
    \ Host A.  Host A will assume, based on the subnet mask, that the\n   remote host\
    \ is actually attached to the LAN and will issue an ARP\n   Request to determine\
    \ its hardware address.  Naturally, the remote\n   host will not hear this request.\
    \  CS1, knowing this, will respond in\n   the remote host's place with its own\
    \ hardware address.  Host A, on\n   receiving the ARP Reply, will then communicate\
    \ with the remote host,\n   transparently through CS1.  So far everything is just\
    \ fine.\n   Now, the remote host disconnects and, before Host A can age its ARP\n\
    \   cache, reconnects through CS2.  Herein lies the problem.  Whenever\n   Host\
    \ A attempts to send a packet to the remote host, it will send it\n   to CS1 because\
    \ it cannot know that its ARP cache entry is invalid.\n   If, when the remote\
    \ host disconnects, the server to which it was\n   attached could inform other\
    \ nodes on the LAN that the protocol\n   address/hardware address mapping was\
    \ no longer valid, the problem\n   would not occur.\n"
- title: 3. The Solution
  contents:
  - "3. The Solution\n   When a server, as described above, disconnects from a remote\
    \ host for\n   which it has responded to a Proxy ARP, it broadcasts an UNARP.\
    \  An\n   UNARP is an unsolicited ARP Reply with the following field values:\n\
    \      Hardware Address Space       as appropriate\n      Protocol Address Space\
    \       0x800 (IP)\n      Hardware Address Length      0 (see Backwards Compatibility)\n\
    \      Protocol Address Length      4 (length of an IP address)\n      Opcode\
    \                       2 (Reply)\n      Source Hardware Address      Not Included\n\
    \      Source Protocol Address      IP address of detaching host\n      Target\
    \ Hardware Address      Not Included\n      Target Protocol Address      255.255.255.255\
    \ (IP broadcast)\n      NOTE: this is a 16-byte packet (not including MAC header)\n\
    \   On receiving an UNARP, a node deletes the ARP cache entry associated\n   with\
    \ the IP address.\n   It is not strictly necessary that a server keep state information\n\
    \   about whether or not it has actually sent a Proxy ARP Reply; it would\n  \
    \ be sufficient if a server always sends an UNARP when a remote host\n   disconnects.\n\
    \   Of course, there is no reason why a host which gracefully detaches\n   from\
    \ a LAN cannot also send an UNARP for itself.  This would be\n   especially useful\
    \ if, upon re-attaching, it might have a different\n   hardware address.\n"
- title: 4. Backwards Compatibility
  contents:
  - "4. Backwards Compatibility\n   The modifications to support UNARP are trivial,\
    \ so there is every\n   expectation that it will be widely supported.  Of course,\
    \ there will\n   be a period of time during which nodes which support UNARP will\n\
    \   coexist with nodes which do not support UNARP.  To prevent\n   unenlightened\
    \ nodes from adding spurious ARP cache entries with\n   hardware addresses of\
    \ zero, UNARP packets specify a hardware address\n   length of zero.  This should\
    \ be rejected by nodes which do not\n   support UNARP.  As a consequence of this,\
    \ the source and target\n   hardware address fields do not exist in UNARP packets\
    \ (as previously\n   described).\n   It is recommended that implementors include\
    \ a configuration switch to\n   disable UNARP in the event that some vendor's\
    \ ARP implementation\n   might take offense at the abbreviated UNARP packet format.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1] Plummer, D., \"An Ethernet Address Resolution Protocol\",\
    \ STD 37,\n       RFC 826, MIT, November 1982.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Gary Scott Malkin\n   Xylogics, Inc.\n   53 Third Avenue\n\
    \   Burlington, MA  01803\n   Phone:  (617) 272-8140\n   EMail:  gmalkin@xylogics.com\n"
