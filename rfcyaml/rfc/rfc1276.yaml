- title: __initial_text__
  contents:
  - "Requests for Comments 1276                   University College London\n    \
    \      Replication and Distributed Operations extensions\n             to provide\
    \ an Internet Directory using X.500\nStatus of this Memo\n    This RFC specifies\
    \ an IAB standards track protocol for the\n    Internet community, and requests\
    \ discussion and suggestions for\n    improvements.  Please refer to the current\
    \ edition of the ``IAB\n    Official Protocol Standards'' for the standardization\
    \ state and\n    status of this protocol.  Distribution of this memo is unlimited.\n\
    Abstract\n    Some requirements on extensions to X.500 are described in the\n\
    \    RFC[HK91b], in order to build an Internet Directory using\n    X.500(1988).\
    \  This document specifies a set of solutions to the\n    problems raised.  These\
    \ solutions are based on some work done for\n    the QUIPU implementation, and\
    \ demonstrated to be effective in a\n    number of directory pilots.  By documenting\
    \ a de facto standard,\n    rapid progress can be made towards a full-scale pilot.\
    \  These\n    procedures are an INTERIM approach.  There are known\n    deficiencies,\
    \ both in terms of manageability and scalability.\nRFC 1276         Internet Directory\
    \ Replication          November 1991\nContents\n1   Approach                 \
    \                                        2\n2   Extensions to Distributed Operations\
    \                             3\n3   Alternative DSAs                        \
    \                         4\n4   Data Model                                  \
    \                     5\n5   DSA Naming                                      \
    \                 6\n6   Knowledge Representation                            \
    \             6\n7   Replication Protocol                                    \
    \         9\n8   New Application Context                                     \
    \    12\n9   Policy on Replication Procedures                                12\n\
    10  Use of the Directory by Applications                            12\n11  Migration\
    \ and Scaling                                           12\n12  Security Considerations\
    \                                         13\n13  Author's Address           \
    \                                     13\nA   ASN.1 Summary and Object Identifier\
    \ Allocation                  14\nList of Figures\n    1      Knowledge Attributes\
    \  .   .   .   .   .   .   .   .       8\n    2      Replication Protocol  . \
    \  .   .   .   .   .   .   .      10\n    3      Summary of the ASN.1  .   . \
    \  .   .   .   .   .   .      17\nRFC 1276         Internet Directory Replication\
    \          November 1991\n1  Approach\nThere are a number of non-negotiable requirements\
    \ which must be met\nbefore a directory can be deployed on the Internet [HK91b].\
    \  These\nproblems are being tackled in the standards arena, but there is\ncurrently\
    \ no stable solution.  One approach would be to attempt to\nintercept the standard.\
    \  Difficulties with this would be:\n o  Defining a coherent intercept would be\
    \ awkward, and the effort\n    would probably be better devoted to working on\
    \ the standard.  It\n    is not even clear that such an intercept could be defined.\n\
    \ o  The target is moving, and it is always tempting to track it, thus\n    causing\
    \ more delay.\n o  There would be a delay involved with this approach.  It would\
    \ be\n    too late to be useful for a rapid start, and sufficiently close to\n\
    \    the timing of the final standard that many would choose not to\n    implement\
    \ it.\nTherefore, we choose to take a simple approach.  This is a good deal\n\
    simpler than the full X.500 approach, and is based on operational\nexperience.\
    \  The advantages of this approach are:\n o  It is proven in operation.  This\
    \ RFCis simply documenting what is\n    being done already.\n o  There will be\
    \ a minimum of delay in starting to use the approach.\n o  The approach is simpler,\
    \ and so the cost of implementation is much\n    less.  It will therefore be much\
    \ more attractive to add into an\n    implementation, as it is less effort, and\
    \ can be further ahead of\n    the standard.\nThese procedures are an INTERIM\
    \ approach.  There are known\ndeficiencies, both in terms of manageability and\
    \ scalability.\nTransition to standard approaches are planned when appropriate\n\
    standards are available.  This RFCwill be obsoleted at this point.\nRFC 1276 \
    \        Internet Directory Replication          November 1991\n2  Extensions\
    \ to Distributed Operations\nThe distributed operations of X.500 assume that all\
    \ DUAs and DSAs are\nfully interconnected with a global network service.  For\
    \ the Internet\nPilot, this assumption is invalid.  DSAs may be operated over\
    \ TCP/IP,\nTP4/CLNS, or TP0/CONS.\nThe extension to distributed operations to\
    \ support this situation is\nstraightforward.  We define the term community as\
    \ an environment where\ndirect (network) communication is possible.  Communities\
    \ may be\nseparated because they operate different protocols, or because of lack\n\
    of physical connectivity.  Example communities are the DARPA/NSF\nInternet, and\
    \ the Janet private X.25 network.  A network entity in a\ncommunity is addressed\
    \ by its Network Address.  If two network\nentities are in the same community,\
    \ they can by definition\ncommunicate.  A community is identified by a set of\
    \ network address\nprefixes.  For the approach to be useful, this set should be\
    \ small\n(typically 1).  For TCP/IP Networks, and X.25 Networks not providing\n\
    CONS, the approach is described in [HK91a] allows for communities to\nbe defined\
    \ for the networks of operational interest.\nThis model can be used to determine\
    \ whether a pair of application\nentities can communicate.  For each entity, determine\
    \ the presentation\naddress (typically by directory lookup).  Each network address\
    \ in the\npresentation address will have a single associated community.  The set\n\
    of communities to which each application entity belongs can thus be\ndetermined.\
    \  If the two application entities have a common community,\nthen they can communicate\
    \ directly.\nTwo extensions to the standard distributed operations are needed.\n\
    1.  Consider a DSA (the local DSA) which is contacted by either a DUA\n    or\
    \ DSA (the calling entity) to resolve a query.  The local DSA\n    determines\
    \ that the query must be progressed by another DSA (the\n    referred-to DSA).\
    \ The DSA will make a chain/referral choice.  If\n    chaining is prohibited by\
    \ service control, a referral will be\n    passed back.  Otherwise, if the local\
    \ DSA prefers to chain (e.g.,\n    for policy reasons) it will then chain.  The\
    \ remaining situation\n    is that the local DSA prefers to give a referral. \
    \ It shall only\n    do so if it believes that the calling entity can directly\
    \ connect\n    to the referred-to DSA. If the calling entity is a DUA, it should\n\
    \    be assumed to belong only to the community of the called network\n    address.\
    \  If the calling entity is a DSA, its communities should\n    be determined by\
    \ lookup of the DSA's presentation address in the\nRFC 1276         Internet Directory\
    \ Replication          November 1991\n    determined from its presentation address,\
    \ which will either be\n    present in the reference or can be looked up in the\
    \ directory.  If\n    the calling entity and the referred-to DSA do not have a\
    \ common\n    community, then chaining shall be used.  Otherwise, a referral may\n\
    \    be passed back to the calling entity.\n2.  Consider that a DSA (or DUA),\
    \ termed here the local entity is\n    following a referral (to a referred-to\
    \ DSA). In some cases, the\n    local entity and referred-to DSA will not be able\
    \ to communicate\n    directly (i.e., not have a common community).  There are\
    \ two\n    approaches to solve this:\n   (a)  Pass the query to a DSA it would\
    \ use to resolve a query for\n        the entry one level higher in the DIT. This\
    \ will work,\n        provided that this DSA follows this specification.  This\n\
    \        default mechanism will work without additional configuration.\n   (b)\
    \  Use a ``relay DSA'' to access the community.  A relay DSA is\n        one which\
    \ can chain the query on to the remote community.  The\n        relay DSA must\
    \ belong to both the remote community and to at\n        least one community to\
    \ which the local entity belongs.  The\n        choice of relay DSA for a given\
    \ community will be manually\n        configured by a DSA manager to enable access\
    \ to a community to\n        which there is not direct connectivity.  Typically\
    \ this will\n        be used where the default DSA is a poor choice (e.g., because\n\
    \        relaying is not authorised through this DSA).\n    A DSA conforming to\
    \ this specification shall follow these\n    procedures.  A DUA may also follow\
    \ these procedures, and this will\n    give improvements in some circumstances\
    \ (i.e., the ability to\n    resolve certain queries without use of chaining).\
    \  However, this\n    specification does not place requirements on DUAs.\n3  Alternative\
    \ DSAs\nThere is a need to give information on slave copies of data.  This can\n\
    be done using the standard protocol, but modifying the semantics.\nThis relies\
    \ on the fact that there may only be a single subordinate\nreference or cross\
    \ reference.\nIf there is a need to include references to master and slave data\
    \ (EDB\ncopies) in a referral, then this should be done in a referral by\nRFC\
    \ 1276         Internet Directory Replication          November 1991\nbe a standard\
    \ subordinate reference, which would only have a single\nvalue.  Therefore, this\
    \ usage does not conflict with standard\nreferences.  The first reference is the\
    \ master copy, and subsequent\nreferences are slave copies.\n4  Data Model\nThe\
    \ X.500 data model takes the unit of mastering data as the entry.  A\nDSA may\
    \ hold an arbitrary collection of entries.  We restrict this\nmodel so that for\
    \ the replication protocol defined in this\nspecification the base unit of replication\
    \ (shadowing) is the complete\nset of immediate subordinate entries of a given\
    \ entry, termed an Entry\nData Block (EDB). An EDB is named by its parent entry.\
    \  It contains\nthe relative distinguished names of all of the children of the\
    \ entry,\nand each of the child entries.  For each entry, this comprises all\n\
    attributes of the entry, the relative distinguished name, and\nknowledge information\
    \ associated with the entry.  If a DSA holds\n(non-cached) information on an entry,\
    \ it will hold information on all\nof its siblings.  One DSA will hold a master\
    \ EDB. This will contain\ntwo types of entry:\n1.  Entries for which this DSA\
    \ is the master.\n2.  Slave copies of entries which are mastered in another DSA,\n\
    \    indicated by a subordinate reference.  This copy must be\n    maintained\
    \ automatically by the DSA holding the master EDB.\nThus the master EDB contains\
    \ a mixture of master entries, and entries\nwhich are mastered elsewhere and shadowed\
    \ by the DSA holding the\nmaster EDB on an entry by entry basis.  Other DSAs may\
    \ hold slave\ncopies of this EDB (slave EDBs), which are replicated in their\n\
    entirity directly or indirectly from the master EDB. This approach has\nthe following\
    \ advantages.\n o  Name resolution is simplified, and performance improved.\n\
    \ o  Single level searching and listing have good performance, and are\n    straightforward\
    \ to implement.  In a more general case of applying\n    the standard, without\
    \ sophisticated replication, these operations\n    might require to access very\
    \ many DSAs and be prohibitively\n    expensive.\nRFC 1276         Internet Directory\
    \ Replication          November 1991\n5  DSA Naming\nAll DSAs must be named in\
    \ the DIT, and the master definition of the\npresentation address stored in this\
    \ entry.  X.500 (including some of\nthe extension work) implies that the presentation\
    \ address information\nis extensively replicated (manually).  The management overhead\
    \ implied\nby this is not acceptable.\nCare must be taken to prevent deadlock\
    \ in determining a DSAs address.\nThis is solved by:\n1.  Use of a well known\
    \ DSA with ``root knowledge''\n2.  Naming DSAs in a manner which prevents deadlocks.\
    \  Currently this\n    is done by giving DSAs names high in the DIT.\nThe Internet\
    \ Pilot will need to define detailed policies for naming\nDSAs, in conjunction\
    \ with the replication policy.  This will be\ndefined in a future RFC.\n6  Knowledge\
    \ Representation\nKnowledge information is represented in the DIT. It seems unreasonable\n\
    to manage this by any other means.  Knowledge information is\nrepresented in an\
    \ entry by use of knowledge attributes.  These\nattributes are considered separately\
    \ from all the other attributes in\nthe entry which are termed ``user attributes''.\
    \  Each entry in a\nmaster EDB will be in one of four categories.\n1.  The entry\
    \ is a leaf entry mastered in this EDB, and so only\n    contains user attributes\n\
    2.  The level below has an associated EDB (i.e., the DIT continues\n    downwards\
    \ to use the data model of this specification).  All\n    attributes of this entry\
    \ will be mastered in this entry.  The\n    entry will contain an attribute with\
    \ the name of the DSA which\n    holds the master of the associated EDB. Optionally,\
    \ it will\n    contain an attribute holding the names of DSAs which hold slave\n\
    \    EDBs.  The entry may not hold a subordinate reference attribute.\n    The\
    \ DIT is followed by use of the master and slave attributes.\nRFC 1276       \
    \  Internet Directory Replication          November 1991\n3.  The entry is mastered\
    \ in a DSA which does not follow this\n    specification.  The entry in the EDB\
    \ will contain a master\n    attribute, which holds a subordinate reference (or\
    \ cross\n    reference) to the DSA which holds the master entry.  The user\n \
    \   attributes of the entry will be mastered in the DSA pointed to by\n    the\
    \ reference.  The DSA holding the master EDB, which actually\n    acts as an intermediate\
    \ shadow for this entry, will read these\n    attributes from the DSA indicated\
    \ by the reference, so that it\n    will have a full copy of the entry, using\
    \ a standared DSP Read\n    operation.  This technique is called ``spot shadowing''.\
    \  Any\n    access control on the entry being spot shadowed must be configured\n\
    \    so that all attributes can be copied by the DSA holding the master\n    EDB.\
    \ DSAs taking slave copies of the EDB will not do spot\n    shadowing.  However,\
    \ the knowledge attributes will be copied, and\n    may be used by this DSA (e.g.,\
    \ for modify operations).\n4.  The entries at the level below are held in DSAs\
    \ which do not\n    follow this specification, and all of these are indicated\
    \ by a set\n    of NSSRs (Non Specific Subordinate Reference).  The NSSRs are\n\
    \    stored as an attribute of the entry.  The user attributes are\n    either\
    \ mastered in the EDB.\n    It is important to note that NSSRs are stored at the\
    \ level above\n    subordinate references.  At a given point in the DIT, if there\
    \ are\n    subordinate references, these are stored in shadow entries below\n\
    \    that point, and named by the RDN. If there are NSSRs, they are\n    stored\
    \ in the entry itself, as there is no RDN associated with an\n    NSSR. This approach\
    \ is cleanest where there are either NSSRs or\n    subordinate references, but\
    \ not both.  For example, consider an\n    Organisation HP, whose many OUs are\
    \ stored in a set of DSAs\n    indicated by by NSSRs.  Here, the NSSR attributes\
    \ will be used to\n    identify these DSAs.\n    This model of replication is\
    \ not tightly integrated with NSSRs.\n    Where there is a mixture of NSSRs and\
    \ Subordinate references at a\n    given point in the DIT, this is handled by\
    \ giving a single\n    subordinate reference to a DSA which follows standard X.500\n\
    \    distributed operations and can cleanly handle this mixture.  In\n    practice,\
    \ this is equivalent to not allowing a mixture of\n    subordinate references\
    \ and NSSRs.\nThe information framework needed to support this is defined in\n\
    Figure_1.______________________________________________________________\nRFC 1276\
    \         Internet Directory Replication          November 1991\nInternetDSNonLeafObject\
    \ ::= OBJECT-CLASS\n        SUBCLASS OF top\n        MUST CONTAIN {masterDSA}\n\
    \        MAY CONTAIN {slaveDSA}\nExternalDSObject ::= OBJECT-CLASS\n        SUBCLASS\
    \ OF top\n        MAY CONTAIN {SubordinateReference, CrossReference,         \
    \ 10\n                NonSpecificSubordinateReference}\n                     \
    \   -- will contain exactly one of these references\nMasterDSA ::= ATTRIBUTE\n\
    \    WITH ATTRIBUTE-SYNTAX distinguishedNameSyntax\n    SINGLE VALUE\nSlaveDSA\
    \ ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX distinguishedNameSyntax\n         \
    \                                                           20\nSubordinateReference\
    \ ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX AccessPoint\n    SINGLE VALUE\nCrossReference\
    \ ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX AccessPoint\n    SINGLE VALUE\nNonSpecificSubordinateReference\
    \ ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX AccessPoint                       \
    \        30\nAccessPoint ::= SET {\n        ae-title [0] Name,\n        address\
    \  [2] PresentationAddress OPTIONAL }\n                -- Same definition as X.500\
    \ AccessPoint,\n                -- but presentation address is optional\n___________________Figure_1:__Knowledge_Attributes_____________________\n\
    Two object classes are defined to support this approach:\nRFC 1276         Internet\
    \ Directory Replication          November 1991\nInternetDSNonLeafObject This is\
    \ for where the level below follows the\n    model defined here, and there is\
    \ an Entry Data Block (EDB)\n    containing the sibling entries.  The Entry itself\
    \ contains master\n    data.  The associated attributes are:\n    MasterDSA The\
    \ name of the DSA where the master EDB is held.\n    SlaveDSA The names of DSAs\
    \ which hold slave copies of the EDB for\n        public access.\nExternalDSObject\
    \ This is for where the entry and levels below are\n    mastered according to\
    \ X.500.  There are attributes corresponding\n    to the standard knowledge references,\
    \ which are used to resolve\n    queries.  The presentation address is optional\
    \ in these\n    attributes.  If not present, it should be looked up in the DSAs\n\
    \    own entry.  For NonSpecificSubordinateReference, the master of the\n    entry\
    \ will be in the master EDB, For SubordinateReference or\n    CrossReference1\
    \ the DSA which masters the EDB will ``spot shadow''\n    the entry, by reading\
    \ it at intervals.  This will ensure that the\n    master EDB contains a copy\
    \ of each entry.  Single level searching\n    can then be done efficiently where\
    \ it is not required to access\n    the master copy of the data.  DSAs holding\
    \ slave copies of the EDB\n    do not perform spot shadowing, but do receive copies\
    \ of the\n    references.\n7  Replication Protocol\n_______________________________________________________________________\n\
    GetEntryDataBlock ABSTRACT-OPERATION\n        ARGUMENT GetEntryDataBlockArgument\n\
    \        RESULT GetEntryDataBlockResult\n        ERRORS {nameError,ServiceError,SecurityError,EDBVersionError}\n\
    EDBVersionError ABSTRACT-ERROR\n        PARAMETER versionHeld EDBVersion\nGetEntryDataBlockArgument\
    \ ::= SET {                                 10\n----------------------------\n\
    \    1. These references are really the same.  The function and value\nare the\
    \ same.  The name depends on where the reference is stored.  It\nmay be preferable\
    \ to have only one attribute.\nRFC 1276         Internet Directory Replication\
    \          November 1991\n        entry [0] DistinguishedName,\n        CHOICE\
    \ {\n                sendIfMoreRecentThan [1] EDBVersion,\n                getVersionNumber\
    \ [2] NULL,\n                getEDB [3] NULL,        -- force retrieval\n    \
    \            continuation [4] SEQUENCE {\n                        EDBVersion,\n\
    \                        nextEntryPosition INTEGER }\n                },\n   \
    \     maxEntries [5] INTEGER OPTIONAL                             20\n       \
    \                 -- if omitted return whole EDB in\n                        --\
    \ one operation\n}\nGetEntryDataBlockResult ::= SEQUENCE {\n                versionHeld\
    \ [0] EDBVersion,\n                [1] SEQUENCE OF RelativeEntry OPTIONAL,\n \
    \                       -- if omitted, only version is returned\n            \
    \    nextEntryPostion INTEGER OPTIONAL\n                        -- if omitted\
    \ there are no more entries     30\n        }\nRelativeEntry ::= SEQUENCE {\n\
    \        RelativeDistinguishedName,\n        SET OF Attribute\n        }\nEDBVersion\
    \ ::= UTCTime                                              40\n___________________Figure_2:__Replication_Protocol_____________________\n\
    A ROS operation to support replication is defined in Figure 2.  This\npulls an\
    \ entire copy of the EDB. In normal use, the initiator\nspecifies the EDB Version\
    \ held.  If the responder has a more recent\nversion, then all of the entries\
    \ in the EDB are returned.  There are\noptions to rerequest only the version of\
    \ EDB held, or to return the\nfull EDB irrespective of the version held by the\
    \ initiator.\nFor large EDBs, transfer of an entire EDB in a single operation\
    \ would\nlead to very large ROS PDUs.  This gives a definite scaling\nlimitation.\
    \  To overcome this, the protocol allows an EDB to be\nretrived in chunks of a\
    \ size (in number of entries) specified by the\nRFC 1276         Internet Directory\
    \ Replication          November 1991\ninitiator.  The responder specifies a number\
    \ which indicates the next\nentry to be transferred.  The same operation can be\
    \ used to retrieve\nthe next chunk of the EDB, with EDBVersion and the same integer\
    \ as\nparameters.\nThis approach is simple to implement.  It is less efficient\
    \ than an\nincremental technique.  When scaling dictates that an incremental\n\
    technique must be used, it is expected that a suitable standard will\nbe available.\n\
    An implementation issue that must be noted is how to deal with updates\nwhilst\
    \ a multi-operation transfer is in progress.  There are two\npossible approaches:\n\
    1.  Refuse/block updates until the EDB is transferred.  This may cause\n    problems\
    \ where the rate of update and transfer is high, as this\n    may make update\
    \ very difficult (for the manager).\n2.  Create a new version of the EDB, whilst\
    \ retaining the old EDB to\n    complete the bulk transfer.  A suitable retentions\
    \ strategy would\n    be to hold an EDB version as long as the association on\
    \ which it\n    is being pulled it remains active.\n3.  Allow the update and fail\
    \ subsequent transfer requests for the\n    EDB. This may cause both transfer\
    \ failure and excessive waste of\n    bandwidth due to retries if the rate of\
    \ update and transfer is\n    high.\nIf option 1.  or 3.  is chosen, for a widely\
    \ replicated EDB where the\nupdate rate is greater than a few changes per day,\
    \ it is recommended\nto configure the master EDB in a DSA which only replicates\
    \ to one\nother DSA. This second DSA can then control its update rate, and\nsafely\
    \ perform a large fanout of replications (option 3).  The first\nDSA will have\
    \ reasonable availability for modifications (option 1).\nThis protocol will be\
    \ used by DSAs to obtain copies of EDBs high in\nthe tree (typically root and\
    \ national EDBs).  DSAs which need these\ncopies should establish bilateral agreements\
    \ to access them2.\nThis protocol should only transfer user attributes.  In particular,\n\
    implementation specific attributes such as those needed to support\n----------------------------\n\
    \    2. QUIPU defines some attributes to register such agreements, but\nthese\
    \ are probably not appropriate for this specification.\nRFC 1276         Internet\
    \ Directory Replication          November 1991\nprivate access control should\
    \ not be transferred.  There may be\nbilateral agreements on access control policy\
    \ of the information\n(e.g., size limits on listing), which are implemented by\
    \ (different)\nsystem specific techniques.\n8  New Application Context\nA DSA\
    \ which follows these procedures will support a new\nApplicationContext ``Internet\
    \ DSP'' defined in Appendix A. This will\nbe stored in the DSAs entry, so that\
    \ support of the extensions defined\nhere can easily be determined.\n9  Policy\
    \ on Replication Procedures\nTo be effective, a directory configuration must be\
    \ laid out.  These\nprotocols will need to be used in the framework of a pilot,\
    \ and\nservice providers making available data for replication.\nThere is a requirement\
    \ to manage the replication process.  This can be\ndone by a combination of local\
    \ configuration (to register shadowing\nagreements) and directory operations to\
    \ set pointers to master and\nslave copies of the data.\n10  Use of the Directory\
    \ by Applications\nCare must be taken by users of the directory when replication\
    \ is\navailable.  This is not a change from current use of X.500, but is\nnoted\
    \ here as it is important.  Normal read requests should allow use\nof copy information.\
    \  If the user of the directory believes that\ninformation may be out of date\
    \ (e.g., because an association could not\nbe established), then the request should\
    \ be repeated and use of copy\ndata prohibited by service controls.\n11  Migration\
    \ and Scaling\nThe major scaling limit of this approach is the non-incremental\n\
    update.  This will put a limit on the maximum DIT fanout which can be\nsupported.\
    \  Given an average entry size of around a thousand bytes,\nand a maximum reasonable\
    \ transfer size is tens of megabytes, then the\nRFC 1276         Internet Directory\
    \ Replication          November 1991\nfanout limit of this approach is of order\
    \ 10 000.  Note that smaller\norganisations will tend to be registered geographically\
    \ (e.g., in the\nUS, by State), so that the limit of the number of Organisations\
    \ is\nsomewhat larger.  It should be noted that although the replication\ntechnique\
    \ described here is general, it is only intended for high\nlevels of the DIT.\
    \ These figures assume this.\nThese techniques do not preclude use of other techniques\
    \ for\nreplication.  It would be quite reasonable to replicate data using\nthis\
    \ approach, and that which will be defined in X.500(92).\nReferences\n[HK91a]\
    \ S.E. Hardcastle-Kille. Encoding network addresses to support\n        operation\
    \ over non-osi lower layers. Request for Comments\n        RFC 1277, Department\
    \ of Computer Science, University College\n        London, November 1991.\n[HK91b]\
    \ S.E. Hardcastle-Kille. Replication requirement to provide an\n        internet\
    \ directory using X.500. Request for Comments\n        RFC 1275, Department of\
    \ Computer Science, University College\n        London, November 1991.\n12  Security\
    \ Considerations\nSecurity considerations are not discussed in this memo.\n13\
    \  Author's Address\n    Steve Hardcastle-Kille\n    Department of Computer Science\n\
    \    University College London\n    Gower Street\n    WC1E 6BT\n    England\n\
    \    Phone:  +44-71-380-7294\n    EMail:  S.Kille@CS.UCL.AC.UK\nRFC 1276     \
    \    Internet Directory Replication          November 1991\nA  ASN.1 Summary and\
    \ Object Identifier Allocation\nThere_are_a_few_object_identifiers_needed.__These_are_defined_here.____\n\
    InternetDSP  TAGS ::=\nBEGIN\nIMPORTS\n    APPLICATION-SERVICE-ELEMENT, PORT,\
    \ APPLICATION-CONTEXT,\n    aCSE, ABSTRACT OPERATION\n        FROM Remote-Operations-Notation-extension\
    \ {joint-iso-ccitt\n        remote-operations(4) notation-extension(2)}\n    \
    \                                                                10\n   id-as-mrse,\
    \ id-as-mase, id-as-ms\n        FROM MTSAccessProtocol {joint-iso-ccitt mhs-motis(6)\n\
    \        protocols(0) modules(0) object-identifiers(0)}\n   chainedReadASE, chainedSearchASE,\
    \ chainedModifyASE\n        FROM DirectorySystemProtocol {joint-iso-ccitt ds(5)\n\
    \                modules(1) dsp(12)}\n   DistinguishedName, RelativeDistinguishedName,\
    \ Attribute\n        FROM InformationFramework {joint-iso-ccitt ds(5)        \
    \    20\n                modules(1) InformationFramework(1)}\n   ATTRIBUTE, OBJECT-CLASS\n\
    \        FROM InformationFramework {joint-iso-ccitt ds(5)\n        modules(1)\
    \ informationFramework(1)};\ninternet-dsp OBJECT IDENTIFIER ::= {ccitt data(9)\
    \ pss(2342)         30\n        ucl(19200300) internet-dsp(107)}\n-- General\n\
    at OBJECT IDENTIFIER ::= {internet-dsp at(1)}\noc OBJECT IDENTIFIER ::= {internet-dsp\
    \ oc(2)}\n-- Object Classes needed for association\nRFC 1276         Internet\
    \ Directory Replication          November 1991\n                             \
    \                                       40\nid-ac-idsp  OBJECT IDENTIFIER ::=\
    \ {internet-dsp ac-idsp(3))}\nid-as-idsp  OBJECT IDENTIFIER ::= {internet-dsp\
    \ as-idsp(4))}\nid-ase-replication  OBJECT IDENTIFIER ::= {internet-dsp ase-replication(5))}\n\
    -- Attribute Types\nmaster-dsa MasterDSA ::= {at 1}\nslave-dsa SlaveDSA ::= {at\
    \ 2}\nsubordinate-reference SubordinateReference ::= {at 3}               50\n\
    cross-reference CrossReference ::= {at 4}\nnssr NonSpecificSubordinateReference\
    \ ::= {at 5}\n-- Object Classes\ninternet-ds-non-leaf-object InternetDSNonLeafObject\
    \ ::= {oc 1}\nexternal-ds-object ExternalDSObject ::= {oc 2}\n-- Operation and\
    \ Error bindings                                     60\ngetEntryDataBlock GetEntryDataBlock\
    \ ::= 10\neDBVersionError EDBVersionError ::= 10\n-- Protocol Definitions\nreplicationASE\
    \ APPLICATION-SERVICE-ELEMENT\n    OPERATIONS {getEntryDataBlock}            \
    \                      70\n    ::= id-ase-replication\ninternet-dsp APPLICATION-CONTEXT\n\
    \    APPLICATION SERVICE ELEMENTS {aCSE}\n    BIND MSBind\n    UNBIND MSUnbind\n\
    \    REMOTE OPERATIONS {rOSE}\n    OPERATIONS OF { chainedReadADSm chainedSearchASE,\n\
    \        chainedModifyASE, replicationASE }\n    ABSTRACT SYNTAXES {         \
    \                                    80\n        id-as-acse,\n        id-as-idsp\
    \ }\nRFC 1276         Internet Directory Replication          November 1991\n\
    \                                                                    90\nInternetDSNonLeafObject\
    \ ::= OBJECT-CLASS\n        SUBCLASS OF top\n        MUST CONTAIN {masterDSA}\n\
    \        MAY CONTAIN {slaveDSA}\nExternalDSObject ::= OBJECT-CLASS\n        SUBCLASS\
    \ OF top\n        MAY CONTAIN {SubordinateReference, CrossReference,\n       \
    \         NonSpecificSubordinateReference}\n                        -- will contain\
    \ exactly one of these references100\nMasterDSA ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX\
    \ distinguishedNameSyntax\n    SINGLE VALUE\nSlaveDSA ::= ATTRIBUTE\n    WITH\
    \ ATTRIBUTE-SYNTAX distinguishedNameSyntax\nSubordinateReference ::= ATTRIBUTE\n\
    \    WITH ATTRIBUTE-SYNTAX AccessPoint                              110\n    SINGLE\
    \ VALUE\nCrossReference ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX AccessPoint\n\
    \    SINGLE VALUE\nNonSpecificSubordinateReference ::= ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX\
    \ AccessPoint\nAccessPoint ::= SET {                                         \
    \     120\n        ae-title [0] Name,\n        address  [2] PresentationAddress\
    \ OPTIONAL }\n                -- Same definition as X.500 AccessPoint,\n     \
    \           -- but presentation address is optional\nRFC 1276         Internet\
    \ Directory Replication          November 1991\n        ARGUMENT GetEntryDataBlockArgument\n\
    \        RESULT GetEntryDataBlockResult\n        ERRORS {nameError,ServiceError,SecurityError,EDBVersionError}130\n\
    EDBVersionError ABSTRACT-ERROR\n        PARAMETER versionHeld EDBVersion\nGetEntryDataBlockArgument\
    \ ::= SET {\n        entry [0] DistinguishedName,\n        CHOICE {\n        \
    \        sendIfMoreRecentThan [1] EDBVersion,\n                getVersionNumber\
    \ [2] NULL,                         140\n                getEDB [3] NULL,    \
    \    -- force retrieval\n                continuation [4] SEQUENCE {\n       \
    \                 EDBVersion,\n                        nextEntryPosition INTEGER\
    \ }\n                },\n        maxEntries [5] INTEGER OPTIONAL\n           \
    \             -- if omitted return whole EDB in\n                        -- one\
    \ operation\n}\n                                                             \
    \      150\nGetEntryDataBlockResult ::= SEQUENCE {\n                versionHeld\
    \ [0] EDBVersion,\n                [1] SEQUENCE OF RelativeEntry OPTIONAL,\n \
    \                       -- if omitted, only version is returned\n            \
    \    nextEntryPostion INTEGER OPTIONAL\n                        -- if omitted\
    \ there are no more entries\n        }\n                                     \
    \                              160\nRelativeEntry ::= SEQUENCE {\n        RelativeDistinguishedName,\n\
    \        SET OF Attribute\n        }\nEDBVersion ::= UTCTime\nEND\n___________________Figure_3:__Summary_of_the_ASN.1_____________________\n"
