- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                            S. Gueron
  contents:
  - "Internet Research Task Force (IRTF)                            S. Gueron\n  \
    \    AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies two authenticated encryption algorithms that\
    \ are\n   nonce misuse resistant -- that is, they do not fail catastrophically\n\
    \   if a nonce is repeated.\n   This document is the product of the Crypto Forum\
    \ Research Group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Crypto Forum\n   Research Group of the Internet Research Task Force (IRTF).\
    \  Documents\n   approved for publication by the IRSG are not candidates for any\
    \ level\n   of Internet Standard; see Section 2 of RFC 7841.\n   Information about\
    \ the current status of this document, any errata,\n   and how to provide feedback\
    \ on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8452.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  POLYVAL . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   4.  Encryption  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   5.  Decryption  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n   6.  AEADs . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  10\n   7.  Field Operation Examples  . . . . . . . . . . . . . . . . . .  10\n\
    \   8.  Worked Example  . . . . . . . . . . . . . . . . . . . . . . .  10\n  \
    \ 9.  Security Considerations . . . . . . . . . . . . . . . . . . .  11\n   10.\
    \ IANA Considerations . . . . . . . . . . . . . . . . . . . . .  14\n   11. References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  14\n     11.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . .  14\n     11.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  15\n   Appendix A.  The Relationship\
    \ between POLYVAL and GHASH . . . . .  17\n   Appendix B.  Additional Comparisons\
    \ with AES-GCM  . . . . . . . .  19\n   Appendix C.  Test Vectors . . . . . .\
    \ . . . . . . . . . . . . . .  20\n     C.1.  AEAD_AES_128_GCM_SIV  . . . . .\
    \ . . . . . . . . . . . . .  20\n     C.2.  AEAD_AES_256_GCM_SIV  . . . . . .\
    \ . . . . . . . . . . . .  30\n     C.3.  Counter Wrap Tests  . . . . . . . .\
    \ . . . . . . . . . . .  41\n   Acknowledgements  . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  42\n   Authors' Addresses  . . . . . . . . . . . . . .\
    \ . . . . . . . . .  42\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The concept of Authenticated Encryption with Additional\
    \ Data (AEAD)\n   [RFC5116] couples confidentiality and integrity in a single\n\
    \   operation, avoiding the risks of the previously common practice of\n   using\
    \ ad hoc constructions of block-cipher and hash primitives.  The\n   most popular\
    \ AEAD, AES-GCM [GCM], is seeing widespread use due to its\n   attractive performance.\n\
    \   However, some AEADs (including AES-GCM) suffer catastrophic failures\n   of\
    \ confidentiality and/or integrity when two distinct messages are\n   encrypted\
    \ with the same key and nonce.  While the requirements for\n   AEADs specify that\
    \ the pair of (key, nonce) shall only ever be used\n   once, and thus prohibit\
    \ this, this is a worry in practice.\n   Nonce misuse-resistant AEADs do not suffer\
    \ from this problem.  For\n   this class of AEADs, encrypting two messages with\
    \ the same nonce only\n   discloses whether the messages were equal or not.  This\
    \ is the\n   minimum amount of information that a deterministic algorithm can\
    \ leak\n   in this situation.\n   This memo specifies two nonce misuse-resistant\
    \ AEADs:\n   AEAD_AES_128_GCM_SIV and AEAD_AES_256_GCM_SIV.  These AEADs are\n\
    \   designed to be able to take advantage of existing hardware support\n   for\
    \ AES-GCM and can decrypt within 5% of the speed of AES-GCM (for\n   multikilobyte\
    \ messages).  Encryption is, perforce, slower than\n   AES-GCM, because two passes\
    \ are required in order to achieve that\n   nonce misuse-resistance property.\
    \  However, measurements suggest that\n   it can still run at two-thirds of the\
    \ speed of AES-GCM.\n   We suggest that these AEADs be considered in any situation\
    \ where\n   nonce uniqueness cannot be guaranteed.  This includes situations\n\
    \   where there is no stateful counter or where such state cannot be\n   guaranteed,\
    \ as when multiple encryptors use the same key.  As\n   discussed in Section 9,\
    \ it is RECOMMENDED to use this scheme with\n   randomly chosen nonces.\n   This\
    \ document represents the consensus of the Crypto Forum Research\n   Group (CFRG).\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  POLYVAL
  contents:
  - "3.  POLYVAL\n   The GCM-SIV construction is similar to GCM: the block cipher\
    \ is used\n   in counter mode to encrypt the plaintext, and a polynomial\n   authenticator\
    \ is used to provide integrity.  The authenticator in\n   GCM-SIV is called POLYVAL.\n\
    \   POLYVAL, like GHASH (the authenticator in AES-GCM; see [GCM],\n   Section\
    \ 6.4), operates in a binary field of size 2^128.  The field is\n   defined by\
    \ the irreducible polynomial x^128 + x^127 + x^126 + x^121 +\n   1.  The sum of\
    \ any two elements in the field is the result of XORing\n   them.  The product\
    \ of any two elements is calculated using standard\n   (binary) polynomial multiplication\
    \ followed by reduction modulo the\n   irreducible polynomial.\n   We define another\
    \ binary operation on elements of the field:\n   dot(a, b), where dot(a, b) =\
    \ a * b * x^-128.  The value of the field\n   element x^-128 is equal to x^127\
    \ + x^124 + x^121 + x^114 + 1.  The\n   result of this multiplication, dot(a,\
    \ b), is another field element.\n   Polynomials in this field are converted to\
    \ and from 128-bit strings\n   by taking the least significant bit of the first\
    \ byte to be the\n   coefficient of x^0, the most significant bit of the first\
    \ byte to be\n   the coefficient of x^7, and so on, until the most significant\
    \ bit of\n   the last byte is the coefficient of x^127.\n   POLYVAL takes a field\
    \ element, H, and a series of field elements\n   X_1, ..., X_s.  Its result is\
    \ S_s, where S is defined by the\n   iteration S_0 = 0; S_j = dot(S_{j-1} + X_j,\
    \ H), for j = 1..s.\n   We note that POLYVAL(H, X_1, X_2, ...) is equal to\n \
    \  ByteReverse(GHASH(ByteReverse(H) * x, ByteReverse(X_1),\n   ByteReverse(X_2),\
    \ ...)), where ByteReverse is a function that\n   reverses the order of 16 bytes.\
    \  See Appendix A for a more detailed\n   explanation.\n"
- title: 4.  Encryption
  contents:
  - "4.  Encryption\n   AES-GCM-SIV encryption takes a 16- or 32-byte key-generating\
    \ key, a\n   96-bit nonce, and plaintext and additional data byte strings of\n\
    \   variable length.  It outputs an authenticated ciphertext that will be\n  \
    \ 16 bytes longer than the plaintext.  Both encryption and decryption\n   are\
    \ only defined on inputs that are a whole number of bytes.\n   If the key-generating\
    \ key is 16 bytes long, then AES-128 is used\n   throughout.  Otherwise, AES-256\
    \ is used throughout.\n   The first step of encryption is to generate per-nonce,\
    \ message-\n   authentication and message-encryption keys.  The message-\n   authentication\
    \ key is 128 bit, and the message-encryption key is\n   either 128 (for AES-128)\
    \ or 256 bit (for AES-256).\n   These keys are generated by encrypting a series\
    \ of plaintext blocks\n   that contain a 32-bit, little-endian counter followed\
    \ by the nonce,\n   and then discarding the second half of the resulting ciphertext.\
    \  In\n   the AES-128 case, 128 + 128 = 256 bits of key material need to be\n\
    \   generated, and, since encrypting each block yields 64 bits after\n   discarding\
    \ half, four blocks need to be encrypted.  The counter\n   values for these blocks\
    \ are 0, 1, 2, and 3.  For AES-256, six blocks\n   are needed in total, with counter\
    \ values 0 through 5 (inclusive).\n   In pseudocode form, where \"++\" indicates\
    \ concatenation and \"x[:8]\"\n   indicates taking only the first eight bytes\
    \ from x:\n   func derive_keys(key_generating_key, nonce) {\n     message_authentication_key\
    \ =\n         AES(key = key_generating_key,\n             block = little_endian_uint32(0)\
    \ ++ nonce)[:8] ++\n         AES(key = key_generating_key,\n             block\
    \ = little_endian_uint32(1) ++ nonce)[:8]\n     message_encryption_key =\n   \
    \      AES(key = key_generating_key,\n             block = little_endian_uint32(2)\
    \ ++ nonce)[:8] ++\n         AES(key = key_generating_key,\n             block\
    \ = little_endian_uint32(3) ++ nonce)[:8]\n     if bytelen(key_generating_key)\
    \ == 32 {\n       message_encryption_key ++=\n           AES(key = key_generating_key,\n\
    \               block = little_endian_uint32(4) ++ nonce)[:8] ++\n           AES(key\
    \ = key_generating_key,\n               block = little_endian_uint32(5) ++ nonce)[:8]\n\
    \     }\n     return message_authentication_key, message_encryption_key\n   }\n\
    \   Define the \"length block\" as a 16-byte value that is the\n   concatenation\
    \ of the 64-bit, little-endian encodings of\n   bytelen(additional_data) * 8 and\
    \ bytelen(plaintext) * 8.  Pad the\n   plaintext and additional data with zeros\
    \ until they are each a\n   multiple of 16 bytes, the AES block size.  Then X_1,\
    \ X_2, ... (the\n   series of field elements that are inputs to POLYVAL) are the\n\
    \   concatenation of the padded additional data, the padded plaintext,\n   and\
    \ the length block.\n   Calculate S_s = POLYVAL(message-authentication-key, X_1,\
    \ X_2, ...).\n   XOR the first twelve bytes of S_s with the nonce and clear the\
    \ most\n   significant bit of the last byte.  Encrypt the result with AES using\n\
    \   the message-encryption key to produce the tag.\n   (It's worth highlighting\
    \ a contrast with AES-GCM here: AES-GCM\n   authenticates the encoded additional\
    \ data and ciphertext, while\n   AES-GCM-SIV authenticates the encoded additional\
    \ data and plaintext.)\n   The encrypted plaintext is produced by using AES, with\
    \ the message-\n   encryption key, in counter mode (see [SP800-38A], Section 6.5)\
    \ on the\n   unpadded plaintext.  The initial counter block is the tag with the\n\
    \   most significant bit of the last byte set to one.  The counter\n   advances\
    \ by incrementing the first 32 bits interpreted as an\n   unsigned, little-endian\
    \ integer, wrapping at 2^32.  The result of the\n   encryption is the encrypted\
    \ plaintext (truncated to the length of the\n   plaintext), followed by the tag.\n\
    \   In pseudocode form, the encryption process can be expressed as:\n   func right_pad_to_multiple_of_16_bytes(input)\
    \ {\n     while (bytelen(input) % 16 != 0) {\n       input = input ++ \"\\x00\"\
    \n     }\n     return input\n   }\n   func AES_CTR(key, initial_counter_block,\
    \ in) {\n     block = initial_counter_block\n     output = \"\"\n     while bytelen(in)\
    \ > 0 {\n       keystream_block = AES(key = key, block = block)\n       block[0:4]\
    \ = little_endian_uint32(\n           read_little_endian_uint32(block[0:4]) +\
    \ 1)\n       todo = min(bytelen(in), bytelen(keystream_block)\n       for j =\
    \ 0; j < todo; j++ {\n         output = output ++ (keystream_block[j] ^ in[j])\n\
    \       }\n       in = in[todo:]\n     }\n     return output\n   }\n   func encrypt(key_generating_key,\n\
    \                nonce,\n                plaintext,\n                additional_data)\
    \ {\n     if bytelen(plaintext) > 2^36 {\n       fail()\n     }\n     if bytelen(additional_data)\
    \ > 2^36 {\n       fail()\n     }\n     message_encryption_key, message_authentication_key\
    \ =\n         derive_keys(key_generating_key, nonce)\n     length_block =\n  \
    \       little_endian_uint64(bytelen(additional_data) * 8) ++\n         little_endian_uint64(bytelen(plaintext)\
    \ * 8)\n     padded_plaintext = right_pad_to_multiple_of_16_bytes(plaintext)\n\
    \     padded_ad = right_pad_to_multiple_of_16_bytes(additional_data)\n     S_s\
    \ = POLYVAL(key = message_authentication_key,\n                   input = padded_ad\
    \ ++ padded_plaintext ++\n                           length_block)\n     for i\
    \ = 0; i < 12; i++ {\n       S_s[i] ^= nonce[i]\n     }\n     S_s[15] &= 0x7f\n\
    \     tag = AES(key = message_encryption_key, block = S_s)\n     counter_block\
    \ = tag\n     counter_block[15] |= 0x80\n     return AES_CTR(key = message_encryption_key,\n\
    \                    initial_counter_block = counter_block,\n                \
    \    in = plaintext) ++\n            tag\n   }\n"
- title: 5.  Decryption
  contents:
  - "5.  Decryption\n   Decryption takes a 16- or 32-byte key-generating key, a 96-bit\
    \ nonce,\n   and ciphertext and additional data byte strings of variable length.\n\
    \   It either fails or outputs a plaintext that is 16 bytes shorter than\n   the\
    \ ciphertext.\n   To decrypt an AES-GCM-SIV ciphertext, first derive the message-\n\
    \   encryption and message-authentication keys in the same manner as when\n  \
    \ encrypting.\n   If the ciphertext is less than 16 bytes or more than 2^36 +\
    \ 16 bytes,\n   then fail.  Otherwise, split the input into the encrypted plaintext\n\
    \   and a 16-byte tag.  Decrypt the encrypted plaintext with the message-\n  \
    \ encryption key in counter mode, where the initial counter block is\n   the tag\
    \ with the most significant bit of the last byte set to one.\n   Advance the counter\
    \ for each block in the same way as when\n   encrypting.  At this point, the plaintext\
    \ is unauthenticated and MUST\n   NOT be output until the following tag confirmation\
    \ is complete:\n   Pad the additional data and plaintext with zeros until they\
    \ are each\n   a multiple of 16 bytes, the AES block size.  Calculate the length\n\
    \   block and X_1, X_2, ... as above and compute\n   S_s = POLYVAL(message-authentication-key,\
    \ X_1, X_2, ...)\n   Compute the expected tag by XORing S_s and the nonce, clearing\
    \ the\n   most significant bit of the last byte and encrypting with the\n   message-encryption\
    \ key.  Compare the provided and expected tag values\n   in constant time.  Fail\
    \ the decryption if they do not match (and do\n   not release the plaintext);\
    \ otherwise, return the plaintext.\n   In pseudocode form, the decryption process\
    \ can be expressed as:\n   func decrypt(key_generating_key,\n                nonce,\n\
    \                ciphertext,\n                additional_data) {\n     if bytelen(ciphertext)\
    \ < 16 || bytelen(ciphertext) > 2^36 + 16 {\n       fail()\n     }\n     if bytelen(additional_data)\
    \ > 2^36 {\n       fail()\n     }\n     message_encryption_key, message_authentication_key\
    \ =\n         derive_keys(key_generating_key, nonce)\n     tag = ciphertext[bytelen(ciphertext)-16:]\n\
    \     counter_block = tag\n     counter_block[15] |= 0x80\n     plaintext = AES_CTR(key\
    \ = message_encryption_key,\n                         initial_counter_block =\
    \ counter_block,\n                         in = ciphertext[:bytelen(ciphertext)-16])\n\
    \     length_block =\n         little_endian_uint64(bytelen(additional_data) *\
    \ 8) ++\n         little_endian_uint64(bytelen(plaintext) * 8)\n     padded_plaintext\
    \ = right_pad_to_multiple_of_16_bytes(plaintext)\n     padded_ad = right_pad_to_multiple_of_16_bytes(additional_data)\n\
    \     S_s = POLYVAL(key = message_authentication_key,\n                   input\
    \ = padded_ad ++ padded_plaintext ++\n                           length_block)\n\
    \     for i = 0; i < 12; i++ {\n       S_s[i] ^= nonce[i]\n     }\n     S_s[15]\
    \ &= 0x7f\n     expected_tag = AES(key = message_encryption_key, block = S_s)\n\
    \     xor_sum = 0\n     for i := 0; i < bytelen(expected_tag); i++ {\n       xor_sum\
    \ |= expected_tag[i] ^ tag[i]\n     }\n     if xor_sum != 0 {\n       fail()\n\
    \     }\n     return plaintext\n   }\n"
- title: 6.  AEADs
  contents:
  - "6.  AEADs\n   We define two AEADs, in the format of RFC 5116, that use AES-GCM-SIV:\n\
    \   AEAD_AES_128_GCM_SIV and AEAD_AES_256_GCM_SIV.  They differ only in\n   the\
    \ size of the AES key used.\n   The key input to these AEADs becomes the key-generating\
    \ key.  Thus,\n   AEAD_AES_128_GCM_SIV takes a 16-byte key and AEAD_AES_256_GCM_SIV\n\
    \   takes a 32-byte key.\n   The parameters for AEAD_AES_128_GCM_SIV are then\
    \ as follows:\n   K_LEN is 16, P_MAX is 2^36, A_MAX is 2^36, N_MIN and N_MAX are\
    \ 12,\n   and C_MAX is 2^36 + 16.\n   The parameters for AEAD_AES_256_GCM_SIV\
    \ differ only in the key size:\n   K_LEN is 32, P_MAX is 2^36, A_MAX is 2^36,\
    \ N_MIN and N_MAX are 12,\n   and C_MAX is 2^36 + 16.\n"
- title: 7.  Field Operation Examples
  contents:
  - "7.  Field Operation Examples\n   Polynomials in this document will be written\
    \ as 16-byte values.  For\n   example, the sixteen bytes 01000000000000000000000000000492\
    \ would\n   represent the polynomial x^127 + x^124 + x^121 + x^114 + 1, which\
    \ is\n   also the value of x^-128 in this field.\n      If a = 66e94bd4ef8a2c3b884cfa59ca342b2e\
    \ and\n         b = ff000000000000000000000000000000,\n    then a + b = 99e94bd4ef8a2c3b884cfa59ca342b2e,\n\
    \         a * b = 37856175e9dc9df26ebc6d6171aa0ae9, and\n         dot(a, b) =\
    \ ebe563401e7e91ea3ad6426b8140c394.\n"
- title: 8.  Worked Example
  contents:
  - "8.  Worked Example\n   Consider the encryption of the plaintext \"Hello world\"\
    \ with the\n   additional data \"example\" under key ee8e1ed9ff2540ae8f2ba9f50bc2f27c\n\
    \   using AEAD_AES_128_GCM_SIV.  The random nonce that we'll use for this\n  \
    \ example is 752abad3e0afb5f434dc4310.\n   In order to generate the message-authentication\
    \ and message-\n   encryption keys, a counter is combined with the nonce to form\
    \ four\n   blocks.  These blocks are encrypted with the key given above:\n   Counter\
    \ |       Nonce                         Ciphertext\n   00000000752abad3e0afb5f434dc4310\
    \ -> 310728d9911f1f38c40e952ca83d093e\n   01000000752abad3e0afb5f434dc4310 ->\
    \ 37b24316c3fab9a046ae90952daa0450\n   02000000752abad3e0afb5f434dc4310 -> a4c5ae624996327947920b2d2412474b\n\
    \   03000000752abad3e0afb5f434dc4310 -> c100be4d7e2c6edd1efef004305ab1e7\n   The\
    \ latter halves of the ciphertext blocks are discarded and the\n   remaining bytes\
    \ are concatenated to form the per-message keys.  Thus,\n   the message-authentication\
    \ key is 310728d9911f1f3837b24316c3fab9a0,\n   and the message-encryption key\
    \ is a4c5ae6249963279c100be4d7e2c6edd.\n   The length block contains the encoding\
    \ of the bit lengths of the\n   additional data and plaintext, respectively. \
    \ The string \"example\" is\n   seven characters, thus 56 bits (or 0x38 in hex).\
    \  The string \"Hello\n   world\" is 11 characters, or 88 = 0x58 bits.  Thus,\
    \ the length block\n   is 38000000000000005800000000000000.\n   The input to POLYVAL\
    \ is the padded additional data, padded plaintext,\n   and then the length block.\
    \  This is 6578616d706c650000000000000000004\n   8656c6c6f20776f726c64000000000038000000000000005800000000000000,\n\
    \   based on the ASCII encoding of \"example\" (6578616d706c65) and \"Hello\n\
    \   world\" (48656c6c6f20776f726c64).\n   Calling POLYVAL with the message-authentication\
    \ key and the input\n   above results in S_s = ad7fcf0b5169851662672f3c5f95138f.\n\
    \   Before encrypting, the nonce is XORed in and the most significant bit\n  \
    \ of the last byte is cleared.  This gives\n   d85575d8b1c630e256bb6c2c5f95130f,\
    \ because that bit happened to be one\n   previously.  Encrypting with the message-encryption\
    \ key (using\n   AES-128) gives the tag, which is 4fbcdeb7e4793f4a1d7e4faa70100af1.\n\
    \   In order to form the initial counter block, the most significant bit\n   of\
    \ the last byte of the tag is set to one.  That doesn't result in a\n   change\
    \ in this example.  Encrypting this with the message key (using\n   AES-128) gives\
    \ the first block of the keystream:\n   1551f2c1787e81deac9a99f139540ab5.\n  \
    \ The final ciphertext is the result of XORing the plaintext with the\n   keystream\
    \ and appending the tag.  That gives\n   5d349ead175ef6b1def6fd4fbcdeb7e4793f4a1d7e4faa70100af1.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   AES-GCM-SIV decryption involves first producing\
    \ an unauthenticated\n   plaintext.  This plaintext is vulnerable to manipulation\
    \ by an\n   attacker; thus, if an implementation released some or all of the\n\
    \   plaintext before authenticating it, other parts of a system may\n   process\
    \ malicious data as if it were authentic.  AES-GCM might be\n   less likely to\
    \ lead implementations to do this because there the\n   ciphertext is generally\
    \ authenticated before, or concurrently with,\n   the plaintext calculation. \
    \ Therefore, this text requires that\n   implementations MUST NOT release unauthenticated\
    \ plaintext.  Thus,\n   system designers should consider memory limitations when\
    \ picking the\n   size of AES-GCM-SIV plaintexts: large plaintexts may not fit\
    \ in the\n   available memory of some machines, tempting implementations to\n\
    \   release unverified plaintext.\n   A detailed cryptographic analysis of AES-GCM-SIV\
    \ appears in\n   [AES-GCM-SIV], and the remainder of this section is a summary\
    \ of that\n   paper.\n   The AEADs defined in this document calculate fresh AES\
    \ keys for each\n   nonce.  This allows a larger number of plaintexts to be encrypted\n\
    \   under a given key.  Without this step, AES-GCM-SIV encryption would\n   be\
    \ limited by the birthday bound like other standard modes (e.g.,\n   AES-GCM,\
    \ AES-CCM [RFC3610], and AES-SIV [RFC5297]).  This means that\n   when 2^64 blocks\
    \ have been encrypted overall, a distinguishing\n   adversary who is trying to\
    \ break the confidentiality of the scheme\n   has an advantage of 1/2.  Thus,\
    \ in order to limit the adversary's\n   advantage to 2^-32, at most 2^48 blocks\
    \ can be encrypted overall.  In\n   contrast, by deriving fresh keys from each\
    \ nonce, it is possible to\n   encrypt a far larger number of messages and blocks\
    \ with AES-GCM-SIV.\n   We stress that nonce misuse-resistant schemes guarantee\
    \ that if a\n   nonce repeats, then the only security loss is that identical\n\
    \   plaintexts will produce identical ciphertexts.  Since this can also\n   be\
    \ a concern (as the fact that the same plaintext has been encrypted\n   twice\
    \ is revealed), we do not recommend using a fixed nonce as a\n   policy.  In addition,\
    \ as we show below, better-than-birthday bounds\n   are achieved by AES-GCM-SIV\
    \ when the nonce repetition rate is low.\n   Finally, as shown in [BHT18], there\
    \ is a great security benefit in\n   the multiuser/multikey setting when each\
    \ particular nonce is reused\n   by a small number of users only.  We stress that\
    \ the nonce misuse-\n   resistance property is not intended to be coupled with\
    \ intentional\n   nonce reuse; rather, such schemes provide the best possible\
    \ security\n   in the event of nonce reuse.  Due to all of the above, it is\n\
    \   RECOMMENDED that AES-GCM-SIV nonces be randomly generated.\n   Some example\
    \ usage bounds for AES-GCM-SIV are given below.  The\n   adversary's advantage\
    \ is the \"AdvEnc\" from [key-derive] and is\n   colloquially the ability of an\
    \ attacker to distinguish ciphertexts\n   from random bit strings.  The bounds\
    \ below limit this advantage to\n   2^-32.  For up to 256 uses of the same nonce\
    \ and key (i.e., where one\n   can assume that nonce misuse is no more than this\
    \ bound), the\n   following message limits should be respected (this assumes a\
    \ short\n   additional authenticated data (AAD), i.e., less than 64 bytes):\n\
    \      2^29 messages, where each plaintext is at most 1 GiB\n      2^35 messages,\
    \ where each plaintext is at most 128 MiB\n      2^49 messages, where each plaintext\
    \ is at most 1 MiB\n      2^61 messages, where each plaintext is at most 16 KiB\n\
    \   Suzuki et al. [multi-birthday] show that even if nonces are selected\n   uniformly\
    \ at random, the probability that one or more values would be\n   repeated 256\
    \ or more times is negligible until the number of nonces\n   reaches 2^102.  (Specifically,\
    \ the probability is 1/((2^96)^(255)) *\n   Binomial(q, 256), where q is the number\
    \ of nonces.)  Since 2^102 is\n   vastly greater than the limit on the number\
    \ of plaintexts per key\n   given above, we don't feel that this limit on the\
    \ number of repeated\n   nonces will be a problem.  This also means that selecting\
    \ nonces at\n   random is a safe practice with AES-GCM-SIV.  The bounds obtained\
    \ for\n   random nonces are as follows (as above, for these bounds, the\n   adversary's\
    \ advantage is at most 2^-32):\n      2^32 messages, where each plaintext is at\
    \ most 8 GiB\n      2^48 messages, where each plaintext is at most 32 MiB\n  \
    \    2^64 messages, where each plaintext is at most 128 KiB\n   For situations\
    \ where, for some reason, an even higher number of nonce\n   repeats is possible\
    \ (e.g., in devices with very poor randomness), the\n   message limits need to\
    \ be reconsidered.  Theorem 7 in [AES-GCM-SIV]\n   contains more details, but\
    \ for up to 1,024 repeats of each nonce, the\n   limits would be (again assuming\
    \ a short AAD, i.e., less than 64\n   bytes):\n      2^25 messages, where each\
    \ plaintext is at most 1 GiB\n      2^31 messages, where each plaintext is at\
    \ most 128 MiB\n      2^45 messages, where each plaintext is at most 1 MiB\n \
    \     2^57 messages, where each plaintext is at most 16 KiB\n   In addition to\
    \ calculating fresh AES keys for each nonce, these AEADs\n   also calculate fresh\
    \ POLYVAL keys.  Previous versions of GCM-SIV did\n   not do this and instead\
    \ used part of the AEAD's key as the POLYVAL\n   key.  Bleichenbacher pointed\
    \ out [Bleichenbacher16] that this allowed\n   an attacker who controlled the\
    \ AEAD key to force the POLYVAL key to\n   be zero.  If a user of this AEAD authenticated\
    \ messages with a secret\n   additional-data value, then this would be insecure\
    \ as the attacker\n   could calculate a valid authenticator without knowing the\
    \ input.\n   This does not violate the standard properties of an AEAD as the\n\
    \   additional data is not assumed to be confidential.  However, we want\n   these\
    \ AEADs to be robust against plausible misuse and also to be\n   drop-in replacements\
    \ for AES-GCM and so derive nonce-specific POLYVAL\n   keys to avoid this issue.\n\
    \   We also wish to note that the probability of successful forgery\n   increases\
    \ with the number of attempts that an attacker is permitted.\n   The advantage\
    \ defined in [key-derive] and used above is specified in\n   terms of the ability\
    \ of an attacker to distinguish ciphertexts from\n   random bit strings.  It thus\
    \ covers both confidentiality and\n   integrity, and Theorem 6.2 in [key-derive]\
    \ shows that the advantage\n   increases with the number of decryption attempts,\
    \ although much more\n   slowly than with the number of encryptions; the dependence\
    \ on the\n   number of decryption queries for forgery is actually only linear,\
    \ not\n   quadratic.  The latter is an artifact of the bound in the paper not\n\
    \   being tight.  If an attacker is permitted extremely large numbers of\n   attempts,\
    \ then the tiny probability that any given attempt succeeds\n   may sum to a non-trivial\
    \ chance.\n   A security analysis of a similar scheme without nonce-based key\n\
    \   derivation appears in [GCM-SIV], and a full analysis of the bounds\n   when\
    \ applying nonce-based key derivation appears in [key-derive].  A\n   larger table\
    \ of bounds and other information appears at\n   [aes-gcm-siv-homepage].\n   The\
    \ multiuser/multikey security of AES-GCM-SIV was studied by\n   [BHT18], which\
    \ showed that security is almost the same as in the\n   single-user setting, as\
    \ long as nonces do not repeat many times\n   across many users.  This is the\
    \ case when nonces are chosen randomly.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA has added two entries to the \"AEAD Algorithms\"\
    \ registry:\n   AEAD_AES_128_GCM_SIV (Numeric ID 30) and AEAD_AES_256_GCM_SIV\n\
    \   (Numeric ID 31), both referencing this document as their\n   specification.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [SP800-38A]\n\
    \              Dworkin, M., \"Recommendation for Block Cipher Modes of\n     \
    \         Operation: Methods and Techniques\", NIST SP 800-38A,\n            \
    \  DOI 10.6028/NIST.SP.800-38A, December 2001,\n              <https://csrc.nist.gov/publications/detail/sp/800-38a/\n\
    \              final>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [AES-GCM-SIV]\n              Gueron, S., Langley,\
    \ A., and Y. Lindell, \"AES-GCM-SIV:\n              Specification and Analysis\"\
    , July 2017,\n              <https://eprint.iacr.org/2017/168>.\n   [aes-gcm-siv-homepage]\n\
    \              Gueron, S., Langley, A., and Y. Lindell, \"Webpage for the\n  \
    \            AES-GCM-SIV Mode of Operation\",\n              <https://cyber.biu.ac.il/aes-gcm-siv/>.\n\
    \   [BHT18]    Bose, P., Hoang, V., and S. Tessaro, \"Revisiting AES-GCM-\n  \
    \            SIV: Multi-user Security, Faster Key Derivation, and\n          \
    \    Better Bounds\", Advances in Cryptology - EUROCRYPT 2018,\n             \
    \ DOI 10.1007/978-3-319-78381-9_18, May 2018,\n              <https://eprint.iacr.org/2018/136.pdf>.\n\
    \   [Bleichenbacher16]\n              Bleichenbacher, D., \"Subject: AES-GCM-SIV\
    \ security of the\n              additional data\", message to the cfrg mailing\
    \ list, 24\n              June 2016, <https://mailarchive.ietf.org/arch/msg/cfrg/\n\
    \              qgh-Yxmj7CC7cq2YZLpmfGA3x-o>.\n   [GCM]      Dworkin, M., \"Recommendation\
    \ for Block Cipher Modes of\n              Operation: Galois/Counter Mode (GCM)\
    \ and GMAC\", NIST\n              SP 800-38D, DOI 10.6028/NIST.SP.800-38D, November\
    \ 2007,\n              <https://csrc.nist.gov/publications/detail/sp/800-38d/\n\
    \              final>.\n   [GCM-SIV]  Gueron, S. and Y. Lindell, \"GCM-SIV: Full\
    \ Nonce Misuse-\n              Resistant Authenticated Encryption at Under One\
    \ Cycle Per\n              Byte\", Proceedings of the 22nd ACM SIGSAC Conference\
    \ on\n              Computer and Communications Security,\n              DOI 10.1145/2810103.2813613,\
    \ October 2015,\n              <http://doi.acm.org/10.1145/2810103.2813613>.\n\
    \   [key-derive]\n              Gueron, S. and Y. Lindell, \"Better Bounds for\
    \ Block Cipher\n              Modes of Operation via Nonce-Based Key Derivation\"\
    ,\n              Proceedings of the 2017 ACM SIGSAC Conference on Computer\n \
    \             and Communications Security, DOI 10.1145/3133956.3133992,\n    \
    \          2017, <https://doi.org/10.1145/3133956.3133992>.\n   [multi-birthday]\n\
    \              Suzuki, K., Tonien, D., Kurosawa, K., and K. Toyota,\n        \
    \      \"Birthday Paradox for Multi-collisions\", Information\n              Security\
    \ and Cryptology - ICISC 2006, Lecture Notes in\n              Computer Science,\
    \ Volume 4296, DOI 10.1007/11927587_5,\n              2006, <http://dx.doi.org/10.1007/11927587_5>.\n\
    \   [RFC3610]  Whiting, D., Housley, R., and N. Ferguson, \"Counter with\n   \
    \           CBC-MAC (CCM)\", RFC 3610, DOI 10.17487/RFC3610, September\n     \
    \         2003, <https://www.rfc-editor.org/info/rfc3610>.\n   [RFC5116]  McGrew,\
    \ D., \"An Interface and Algorithms for Authenticated\n              Encryption\"\
    , RFC 5116, DOI 10.17487/RFC5116, January 2008,\n              <https://www.rfc-editor.org/info/rfc5116>.\n\
    \   [RFC5297]  Harkins, D., \"Synthetic Initialization Vector (SIV)\n        \
    \      Authenticated Encryption Using the Advanced Encryption\n              Standard\
    \ (AES)\", RFC 5297, DOI 10.17487/RFC5297, October\n              2008, <https://www.rfc-editor.org/info/rfc5297>.\n"
- title: Appendix A.  The Relationship between POLYVAL and GHASH
  contents:
  - "Appendix A.  The Relationship between POLYVAL and GHASH\n   GHASH and POLYVAL\
    \ both operate in GF(2^128), although with different\n   irreducible polynomials:\
    \ POLYVAL works modulo x^128 + x^127 + x^126 +\n   x^121 + 1 and GHASH works modulo\
    \ x^128 + x^7 + x^2 + x + 1.  Note\n   that these irreducible polynomials are\
    \ the \"reverse\" of each other.\n   GHASH also has a different mapping between\
    \ 128-bit strings and field\n   elements.  Whereas POLYVAL takes the least significant\
    \ to most\n   significant bits of the first byte to be the coefficients of x^0\
    \ to\n   x^7, GHASH takes them to be the coefficients of x^7 to x^0.  This\n \
    \  continues until, for the last byte, POLYVAL takes the least\n   significant\
    \ to most significant bits to be the coefficients of x^120\n   to x^127, while\
    \ GHASH takes them to be the coefficients of x^127 to\n   x^120.\n   The combination\
    \ of these facts means that it's possible to \"convert\"\n   values between the\
    \ two by reversing the order of the bytes in a\n   16-byte string.  The differing\
    \ interpretations of bit order takes\n   care of reversing the bits within each\
    \ byte, and then reversing the\n   bytes does the rest.  This may have a practical\
    \ benefit for\n   implementations that wish to implement both GHASH and POLYVAL.\n\
    \   In order to be clear which field a given operation is performed in,\n   let\
    \ mulX_GHASH be a function that takes a 16-byte string, converts it\n   to an\
    \ element of GHASH's field using GHASH's convention, multiplies\n   it by x, and\
    \ converts it back to a string.  Likewise, let\n   mulX_POLYVAL be a function\
    \ that converts a 16-byte string to an\n   element of POLYVAL's field using POLYVAL's\
    \ convention, multiplies it\n   by x, and converts it back.\n   Given the 16-byte\
    \ string 01000000000000000000000000000000, mulX_GHASH\n   of that string is 00800000000000000000000000000000\
    \ and mulX_POLYVAL\n   of that string is 02000000000000000000000000000000.  As\
    \ a more\n   general example, given 9c98c04df9387ded828175a92ba652d8, mulX_GHASH\n\
    \   of that string is 4e4c6026fc9c3ef6c140bad495d3296c and mulX_POLYVAL\n   of\
    \ it is 3931819bf271fada0503eb52574ca5f2.\n   Lastly, let ByteReverse be the function\
    \ that takes a 16-byte string\n   and returns a copy where the order of the bytes\
    \ has been reversed.\n   Now GHASH and POLYVAL can be defined in terms of one\
    \ another:\n   POLYVAL(H, X_1, ..., X_n) =\n   ByteReverse(GHASH(mulX_GHASH(ByteReverse(H)),\
    \ ByteReverse(X_1), ...,\n   ByteReverse(X_n)))\n   GHASH(H, X_1, ..., X_n) =\n\
    \   ByteReverse(POLYVAL(mulX_POLYVAL(ByteReverse(H)), ByteReverse(X_1),\n   ...,\
    \ ByteReverse(X_n)))\n   As a worked example:\n      let H = 25629347589242761d31f826ba4b757b,\n\
    \          X_1 = 4f4f95668c83dfb6401762bb2d01a262, and\n          X_2 = d1a24ddd2721d006bbe45f20d3c9f362.\n\
    \      POLYVAL(H, X_1, X_2) = f7a3b47b846119fae5b7866cf5e5b77e.\n   If we wished\
    \ to calculate this given only an implementation of GHASH,\n   then the key for\
    \ GHASH would be\n   mulX_GHASH(ByteReverse(H)) = dcbaa5dd137c188ebb21492c23c9b112.\n\
    \   Then ByteReverse(GHASH(dcba..., ByteReverse(X_1), ByteReverse(X_2)))\n   \
    \     = f7a3b47b846119fae5b7866cf5e5b77e, as required.\n   In the other direction,\
    \ GHASH(H, X_1, X_2) =\n   bd9b3997046731fb96251b91f9c99d7a.  If we wished to\
    \ calculate this\n   given only an implementation of POLYVAL, then we would first\n\
    \   calculate the key for POLYVAL:\n  mulX_POLYVAL(ByteReverse(H)) = f6ea96744df0633aec8424b18e26c54a.\n\
    \  Then ByteReverse(POLYVAL(f6ea..., ByteReverse(X_1), ByteReverse(X_2)))\n  \
    \     = bd9b3997046731fb96251b91f9c99d7a.\n"
- title: Appendix B.  Additional Comparisons with AES-GCM
  contents:
  - "Appendix B.  Additional Comparisons with AES-GCM\n   Some functional properties\
    \ that differ between AES-GCM and AES-GCM-\n   SIV that are also worth noting:\n\
    \   AES-GCM allows plaintexts to be encrypted in a streaming fashion --\n   i.e.,\
    \ the beginning of the plaintext can be encrypted and transmitted\n   before the\
    \ entire message has been processed.  AES-GCM-SIV requires\n   two passes for\
    \ encryption and so cannot do this.\n   AES-GCM allows a constant additional-data\
    \ input to be precomputed in\n   order to save per-message computation.  AES-GCM-SIV\
    \ varies the\n   authenticator key based on the nonce and so does not permit this.\n\
    \   The performance for AES-GCM versus AES-GCM-SIV on small machines can\n   be\
    \ roughly characterized by the number of AES operations and the\n   number of\
    \ GF(2^128) multiplications needed to process a message.\n      Let a = (bytelen(additional-data)\
    \ + 15) / 16 and\n          p = (bytelen(plaintext) + 15) / 16.\n   Then AES-GCM\
    \ requires p + 1 AES operations and p + a + 1 field\n   multiplications.\n   Defined\
    \ similarly, AES-GCM-SIV with AES-128 requires p + 5 AES\n   operations and p\
    \ + a + 1 field multiplications.  With AES-256, that\n   becomes p + 7 AES operations.\n\
    \   With large machines, the available parallelism becomes far more\n   important,\
    \ and such simple performance analysis is no longer\n   representative.  For such\
    \ machines, we find that decryption of AES-\n   GCM-SIV is only about 5% slower\
    \ than AES-GCM, as long as the message\n   is at least a couple of kilobytes.\
    \  Encryption tends to run about\n   two-thirds the speed because of the additional\
    \ pass required.\n"
- title: Appendix C.  Test Vectors
  contents:
  - 'Appendix C.  Test Vectors

    '
- title: C.1.  AEAD_AES_128_GCM_SIV
  contents:
  - "C.1.  AEAD_AES_128_GCM_SIV\n   Plaintext (0 bytes) =\n   AAD (0 bytes) =\n  \
    \ Key =                       01000000000000000000000000000000\n   Nonce =   \
    \                  030000000000000000000000\n   Record authentication key = d9b360279694941ac5dbc6987ada7377\n\
    \   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n   POLYVAL input\
    \ =             00000000000000000000000000000000\n   POLYVAL result =        \
    \    00000000000000000000000000000000\n   POLYVAL result XOR nonce =  03000000000000000000000000000000\n\
    \   ... and masked =            03000000000000000000000000000000\n   Tag =   \
    \                    dc20e2d83f25705bb49e439eca56de25\n   Initial counter =  \
    \         dc20e2d83f25705bb49e439eca56dea5\n   Result (16 bytes) =         dc20e2d83f25705bb49e439eca56de25\n\
    \   Plaintext (8 bytes) =       0100000000000000\n   AAD (0 bytes) =\n   Key =\
    \                       01000000000000000000000000000000\n   Nonce =         \
    \            030000000000000000000000\n   Record authentication key = d9b360279694941ac5dbc6987ada7377\n\
    \   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    00000000000000004000000000000000\n   POLYVAL result =            eb93b7740962c5e49d2a90a7dc5cec74\n\
    \   POLYVAL result XOR nonce =  e893b7740962c5e49d2a90a7dc5cec74\n   ... and masked\
    \ =            e893b7740962c5e49d2a90a7dc5cec74\n   Tag =                    \
    \   578782fff6013b815b287c22493a364c\n   Initial counter =           578782fff6013b815b287c22493a36cc\n\
    \   Result (24 bytes) =         b5d839330ac7b786578782fff6013b81\n           \
    \                    5b287c22493a364c\n   Plaintext (12 bytes) =      010000000000000000000000\n\
    \   AAD (0 bytes) =\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    00000000000000006000000000000000\n   POLYVAL result =   \
    \         48eb6c6c5a2dbe4a1dde508fee06361b\n   POLYVAL result XOR nonce =  4beb6c6c5a2dbe4a1dde508fee06361b\n\
    \   ... and masked =            4beb6c6c5a2dbe4a1dde508fee06361b\n   Tag =   \
    \                    a4978db357391a0bc4fdec8b0d106639\n   Initial counter =  \
    \         a4978db357391a0bc4fdec8b0d1066b9\n   Result (28 bytes) =         7323ea61d05932260047d942a4978db3\n\
    \                               57391a0bc4fdec8b0d106639\n   Plaintext (16 bytes)\
    \ =      01000000000000000000000000000000\n   AAD (0 bytes) =\n   Key =      \
    \                 01000000000000000000000000000000\n   Nonce =               \
    \      030000000000000000000000\n   Record authentication key = d9b360279694941ac5dbc6987ada7377\n\
    \   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    00000000000000008000000000000000\n   POLYVAL result =            20806c26e3c1de019e111255708031d6\n\
    \   POLYVAL result XOR nonce =  23806c26e3c1de019e111255708031d6\n   ... and masked\
    \ =            23806c26e3c1de019e11125570803156\n   Tag =                    \
    \   303aaf90f6fe21199c6068577437a0c4\n   Initial counter =           303aaf90f6fe21199c6068577437a0c4\n\
    \   Result (32 bytes) =         743f7c8077ab25f8624e2e948579cf77\n           \
    \                    303aaf90f6fe21199c6068577437a0c4\n   Plaintext (32 bytes)\
    \ =      01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \   AAD (0 bytes) =\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         00000000000000000001000000000000\n   POLYVAL result =            ce6edc9a50b36d9a98986bbf6a261c3b\n\
    \   POLYVAL result XOR nonce =  cd6edc9a50b36d9a98986bbf6a261c3b\n   ... and masked\
    \ =            cd6edc9a50b36d9a98986bbf6a261c3b\n   Tag =                    \
    \   1a8e45dcd4578c667cd86847bf6155ff\n   Initial counter =           1a8e45dcd4578c667cd86847bf6155ff\n\
    \   Result (48 bytes) =         84e07e62ba83a6585417245d7ec413a9\n           \
    \                    fe427d6315c09b57ce45f2e3936a9445\n                      \
    \         1a8e45dcd4578c667cd86847bf6155ff\n   Plaintext (48 bytes) =      01000000000000000000000000000000\n\
    \                               02000000000000000000000000000000\n           \
    \                    03000000000000000000000000000000\n   AAD (0 bytes) =\n  \
    \ Key =                       01000000000000000000000000000000\n   Nonce =   \
    \                  030000000000000000000000\n   Record authentication key = d9b360279694941ac5dbc6987ada7377\n\
    \   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               00000000000000008001000000000000\n   POLYVAL result\
    \ =            81388746bc22d26b2abc3dcb15754222\n   POLYVAL result XOR nonce =\
    \  82388746bc22d26b2abc3dcb15754222\n   ... and masked =            82388746bc22d26b2abc3dcb15754222\n\
    \   Tag =                       5e6e311dbf395d35b0fe39c2714388f8\n   Initial counter\
    \ =           5e6e311dbf395d35b0fe39c2714388f8\n   Result (64 bytes) =       \
    \  3fd24ce1f5a67b75bf2351f181a475c7\n                               b800a5b4d3dcf70106b1eea82fa1d64d\n\
    \                               f42bf7226122fa92e17a40eeaac1201b\n           \
    \                    5e6e311dbf395d35b0fe39c2714388f8\n   Plaintext (64 bytes)\
    \ =      01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \                               03000000000000000000000000000000\n           \
    \                    04000000000000000000000000000000\n   AAD (0 bytes) =\n  \
    \ Key =                       01000000000000000000000000000000\n   Nonce =   \
    \                  030000000000000000000000\n   Record authentication key = d9b360279694941ac5dbc6987ada7377\n\
    \   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               04000000000000000000000000000000\n           \
    \                    00000000000000000002000000000000\n   POLYVAL result =   \
    \         1e39b6d3344d348f6044f89935d1cf78\n   POLYVAL result XOR nonce =  1d39b6d3344d348f6044f89935d1cf78\n\
    \   ... and masked =            1d39b6d3344d348f6044f89935d1cf78\n   Tag =   \
    \                    8a263dd317aa88d56bdf3936dba75bb8\n   Initial counter =  \
    \         8a263dd317aa88d56bdf3936dba75bb8\n   Result (80 bytes) =         2433668f1058190f6d43e360f4f35cd8\n\
    \                               e475127cfca7028ea8ab5c20f7ab2af0\n           \
    \                    2516a2bdcbc08d521be37ff28c152bba\n                      \
    \         36697f25b4cd169c6590d1dd39566d3f\n                               8a263dd317aa88d56bdf3936dba75bb8\n\
    \   Plaintext (8 bytes) =       0200000000000000\n   AAD (1 bytes) =         \
    \    01\n   Key =                       01000000000000000000000000000000\n   Nonce\
    \ =                     030000000000000000000000\n   Record authentication key\
    \ = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         08000000000000004000000000000000\n   POLYVAL result =            b26781e7e2c1376f96bec195f3709b2a\n\
    \   POLYVAL result XOR nonce =  b16781e7e2c1376f96bec195f3709b2a\n   ... and masked\
    \ =            b16781e7e2c1376f96bec195f3709b2a\n   Tag =                    \
    \   3b0a1a2560969cdf790d99759abd1508\n   Initial counter =           3b0a1a2560969cdf790d99759abd1588\n\
    \   Result (24 bytes) =         1e6daba35669f4273b0a1a2560969cdf\n           \
    \                    790d99759abd1508\n   Plaintext (12 bytes) =      020000000000000000000000\n\
    \   AAD (1 bytes) =             01\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         08000000000000006000000000000000\n   POLYVAL result =            111f5affb18e4cc1164a01bdc12a4145\n\
    \   POLYVAL result XOR nonce =  121f5affb18e4cc1164a01bdc12a4145\n   ... and masked\
    \ =            121f5affb18e4cc1164a01bdc12a4145\n   Tag =                    \
    \   08299c5102745aaa3a0c469fad9e075a\n   Initial counter =           08299c5102745aaa3a0c469fad9e07da\n\
    \   Result (28 bytes) =         296c7889fd99f41917f4462008299c51\n           \
    \                    02745aaa3a0c469fad9e075a\n   Plaintext (16 bytes) =     \
    \ 02000000000000000000000000000000\n   AAD (1 bytes) =             01\n   Key\
    \ =                       01000000000000000000000000000000\n   Nonce =       \
    \              030000000000000000000000\n   Record authentication key = d9b360279694941ac5dbc6987ada7377\n\
    \   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               08000000000000008000000000000000\n\
    \   POLYVAL result =            79745ab508622c8a958543675fac4688\n   POLYVAL result\
    \ XOR nonce =  7a745ab508622c8a958543675fac4688\n   ... and masked =         \
    \   7a745ab508622c8a958543675fac4608\n   Tag =                       8f8936ec039e4e4bb97ebd8c4457441f\n\
    \   Initial counter =           8f8936ec039e4e4bb97ebd8c4457449f\n   Result (32\
    \ bytes) =         e2b0c5da79a901c1745f700525cb335b\n                        \
    \       8f8936ec039e4e4bb97ebd8c4457441f\n   Plaintext (32 bytes) =      02000000000000000000000000000000\n\
    \                               03000000000000000000000000000000\n   AAD (1 bytes)\
    \ =             01\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n                               08000000000000000001000000000000\n\
    \   POLYVAL result =            2ce7daaf7c89490822051255b12eca6b\n   POLYVAL result\
    \ XOR nonce =  2fe7daaf7c89490822051255b12eca6b\n   ... and masked =         \
    \   2fe7daaf7c89490822051255b12eca6b\n   Tag =                       e6af6a7f87287da059a71684ed3498e1\n\
    \   Initial counter =           e6af6a7f87287da059a71684ed3498e1\n   Result (48\
    \ bytes) =         620048ef3c1e73e57e02bb8562c416a3\n                        \
    \       19e73e4caac8e96a1ecb2933145a1d71\n                               e6af6a7f87287da059a71684ed3498e1\n\
    \   Plaintext (48 bytes) =      02000000000000000000000000000000\n           \
    \                    03000000000000000000000000000000\n                      \
    \         04000000000000000000000000000000\n   AAD (1 bytes) =             01\n\
    \   Key =                       01000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n                               04000000000000000000000000000000\n\
    \                               08000000000000008001000000000000\n   POLYVAL result\
    \ =            9ca987715d69c1786711dfcd22f830fc\n   POLYVAL result XOR nonce =\
    \  9fa987715d69c1786711dfcd22f830fc\n   ... and masked =            9fa987715d69c1786711dfcd22f8307c\n\
    \   Tag =                       6a8cc3865f76897c2e4b245cf31c51f2\n   Initial counter\
    \ =           6a8cc3865f76897c2e4b245cf31c51f2\n   Result (64 bytes) =       \
    \  50c8303ea93925d64090d07bd109dfd9\n                               515a5a33431019c17d93465999a8b005\n\
    \                               3201d723120a8562b838cdff25bf9d1e\n           \
    \                    6a8cc3865f76897c2e4b245cf31c51f2\n   Plaintext (64 bytes)\
    \ =      02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               04000000000000000000000000000000\n           \
    \                    05000000000000000000000000000000\n   AAD (1 bytes) =    \
    \         01\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n                               04000000000000000000000000000000\n\
    \                               05000000000000000000000000000000\n           \
    \                    08000000000000000002000000000000\n   POLYVAL result =   \
    \         ffcd05d5770f34ad9267f0a59994b15a\n   POLYVAL result XOR nonce =  fccd05d5770f34ad9267f0a59994b15a\n\
    \   ... and masked =            fccd05d5770f34ad9267f0a59994b15a\n   Tag =   \
    \                    cdc46ae475563de037001ef84ae21744\n   Initial counter =  \
    \         cdc46ae475563de037001ef84ae217c4\n   Result (80 bytes) =         2f5c64059db55ee0fb847ed513003746\n\
    \                               aca4e61c711b5de2e7a77ffd02da42fe\n           \
    \                    ec601910d3467bb8b36ebbaebce5fba3\n                      \
    \         0d36c95f48a3e7980f0e7ac299332a80\n                               cdc46ae475563de037001ef84ae21744\n\
    \   Plaintext (4 bytes) =       02000000\n   AAD (12 bytes) =            010000000000000000000000\n\
    \   Key =                       01000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         60000000000000002000000000000000\n   POLYVAL result =            f6ce9d3dcd68a2fd603c7ecc18fb9918\n\
    \   POLYVAL result XOR nonce =  f5ce9d3dcd68a2fd603c7ecc18fb9918\n   ... and masked\
    \ =            f5ce9d3dcd68a2fd603c7ecc18fb9918\n   Tag =                    \
    \   07eb1f84fb28f8cb73de8e99e2f48a14\n   Initial counter =           07eb1f84fb28f8cb73de8e99e2f48a94\n\
    \   Result (20 bytes) =         a8fe3e8707eb1f84fb28f8cb73de8e99\n           \
    \                    e2f48a14\n   Plaintext (20 bytes) =      03000000000000000000000000000000\n\
    \                               04000000\n   AAD (18 bytes) =            01000000000000000000000000000000\n\
    \                               0200\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n                               04000000000000000000000000000000\n\
    \                               9000000000000000a000000000000000\n   POLYVAL result\
    \ =            4781d492cb8f926c504caa36f61008fe\n   POLYVAL result XOR nonce =\
    \  4481d492cb8f926c504caa36f61008fe\n   ... and masked =            4481d492cb8f926c504caa36f610087e\n\
    \   Tag =                       24afc9805e976f451e6d87f6fe106514\n   Initial counter\
    \ =           24afc9805e976f451e6d87f6fe106594\n   Result (36 bytes) =       \
    \  6bb0fecf5ded9b77f902c7d5da236a43\n                               91dd029724afc9805e976f451e6d87f6\n\
    \                               fe106514\n   Plaintext (18 bytes) =      03000000000000000000000000000000\n\
    \                               0400\n   AAD (20 bytes) =            01000000000000000000000000000000\n\
    \                               02000000\n   Key =                       01000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = d9b360279694941ac5dbc6987ada7377\n   Record encryption key =     4004a0dcd862f2a57360219d2d44ef6c\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n                               04000000000000000000000000000000\n\
    \                               a0000000000000009000000000000000\n   POLYVAL result\
    \ =            75cbc23a1a10e348aeb8e384b5cc79fd\n   POLYVAL result XOR nonce =\
    \  76cbc23a1a10e348aeb8e384b5cc79fd\n   ... and masked =            76cbc23a1a10e348aeb8e384b5cc797d\n\
    \   Tag =                       bff9b2ef00fb47920cc72a0c0f13b9fd\n   Initial counter\
    \ =           bff9b2ef00fb47920cc72a0c0f13b9fd\n   Result (34 bytes) =       \
    \  44d0aaf6fb2f1f34add5e8064e83e12a\n                               2adabff9b2ef00fb47920cc72a0c0f13\n\
    \                               b9fd\n   Plaintext (0 bytes) =\n   AAD (0 bytes)\
    \ =\n   Key =                       e66021d5eb8e4f4066d4adb9c33560e4\n   Nonce\
    \ =                     f46e44bb3da0015c94f70887\n   Record authentication key\
    \ = 036ee1fe2d7926af68898095e54e7b3c\n   Record encryption key =     5e46482396008223b5c1d25173d87539\n\
    \   POLYVAL input =             00000000000000000000000000000000\n   POLYVAL result\
    \ =            00000000000000000000000000000000\n   POLYVAL result XOR nonce =\
    \  f46e44bb3da0015c94f7088700000000\n   ... and masked =            f46e44bb3da0015c94f7088700000000\n\
    \   Tag =                       a4194b79071b01a87d65f706e3949578\n   Initial counter\
    \ =           a4194b79071b01a87d65f706e39495f8\n   Result (16 bytes) =       \
    \  a4194b79071b01a87d65f706e3949578\n   Plaintext (3 bytes) =       7a806c\n \
    \  AAD (5 bytes) =             46bb91c3c5\n   Key =                       36864200e0eaf5284d884a0e77d31646\n\
    \   Nonce =                     bae8e37fc83441b16034566b\n   Record authentication\
    \ key = 3e28de1120b2981a0155795ca2812af6\n   Record encryption key =     6d4b78b31a4c9c03d8db0f42f7507fae\n\
    \   POLYVAL input =             46bb91c3c50000000000000000000000\n           \
    \                    7a806c00000000000000000000000000\n                      \
    \         28000000000000001800000000000000\n   POLYVAL result =            43d9a745511dcfa21b96dd606f1d5720\n\
    \   POLYVAL result XOR nonce =  f931443a99298e137ba28b0b6f1d5720\n   ... and masked\
    \ =            f931443a99298e137ba28b0b6f1d5720\n   Tag =                    \
    \   711bd85bc1e4d3e0a462e074eea428a8\n   Initial counter =           711bd85bc1e4d3e0a462e074eea428a8\n\
    \   Result (19 bytes) =         af60eb711bd85bc1e4d3e0a462e074ee\n           \
    \                    a428a8\n   Plaintext (6 bytes) =       bdc66f146545\n   AAD\
    \ (10 bytes) =            fc880c94a95198874296\n   Key =                     \
    \  aedb64a6c590bc84d1a5e269e4b47801\n   Nonce =                     afc0577e34699b9e671fdd4f\n\
    \   Record authentication key = 43b8de9cea62330d15cccfc84a33e8c8\n   Record encryption\
    \ key =     8e54631607e431e095b54852868e3a27\n   POLYVAL input =             fc880c94a95198874296000000000000\n\
    \                               bdc66f14654500000000000000000000\n           \
    \                    50000000000000003000000000000000\n   POLYVAL result =   \
    \         26498e0d2b1ef004e808c458e8f2f515\n   POLYVAL result XOR nonce =  8989d9731f776b9a8f171917e8f2f515\n\
    \   ... and masked =            8989d9731f776b9a8f171917e8f2f515\n   Tag =   \
    \                    d6a9c45545cfc11f03ad743dba20f966\n   Initial counter =  \
    \         d6a9c45545cfc11f03ad743dba20f9e6\n   Result (22 bytes) =         bb93a3e34d3cd6a9c45545cfc11f03ad\n\
    \                               743dba20f966\n   Plaintext (9 bytes) =       1177441f195495860f\n\
    \   AAD (15 bytes) =            046787f3ea22c127aaf195d1894728\n   Key =     \
    \                  d5cc1fd161320b6920ce07787f86743b\n   Nonce =              \
    \       275d1ab32f6d1f0434d8848c\n   Record authentication key = 8a51df64d93eaf667c2c09bd454ce5c5\n\
    \   Record encryption key =     43ab276c2b4a473918ca73f2dd85109c\n   POLYVAL input\
    \ =             046787f3ea22c127aaf195d189472800\n                           \
    \    1177441f195495860f00000000000000\n                               78000000000000004800000000000000\n\
    \   POLYVAL result =            63a3451c0b23345ad02bba59956517cf\n   POLYVAL result\
    \ XOR nonce =  44fe5faf244e2b5ee4f33ed5956517cf\n   ... and masked =         \
    \   44fe5faf244e2b5ee4f33ed59565174f\n   Tag =                       1d02fd0cd174c84fc5dae2f60f52fd2b\n\
    \   Initial counter =           1d02fd0cd174c84fc5dae2f60f52fdab\n   Result (25\
    \ bytes) =         4f37281f7ad12949d01d02fd0cd174c8\n                        \
    \       4fc5dae2f60f52fd2b\n   Plaintext (12 bytes) =      9f572c614b4745914474e7c7\n\
    \   AAD (20 bytes) =            c9882e5386fd9f92ec489c8fde2be2cf\n           \
    \                    97e74e93\n   Key =                       b3fed1473c528b8426a582995929a149\n\
    \   Nonce =                     9e9ad8780c8d63d0ab4149c0\n   Record authentication\
    \ key = 22f50707a95dd416df069d670cb775e8\n   Record encryption key =     f674a5584ee21fe97b4cebc468ab61e4\n\
    \   POLYVAL input =             c9882e5386fd9f92ec489c8fde2be2cf\n           \
    \                    97e74e93000000000000000000000000\n                      \
    \         9f572c614b4745914474e7c700000000\n                               a0000000000000006000000000000000\n\
    \   POLYVAL result =            0cca0423fba9d77fe7e2e6963b08cdd0\n   POLYVAL result\
    \ XOR nonce =  9250dc5bf724b4af4ca3af563b08cdd0\n   ... and masked =         \
    \   9250dc5bf724b4af4ca3af563b08cd50\n   Tag =                       c1dc2f871fb7561da1286e655e24b7b0\n\
    \   Initial counter =           c1dc2f871fb7561da1286e655e24b7b0\n   Result (28\
    \ bytes) =         f54673c5ddf710c745641c8bc1dc2f87\n                        \
    \       1fb7561da1286e655e24b7b0\n   Plaintext (15 bytes) =      0d8c8451178082355c9e940fea2f58\n\
    \   AAD (25 bytes) =            2950a70d5a1db2316fd568378da107b5\n           \
    \                    2b0da55210cc1c1b0a\n   Key =                       2d4ed87da44102952ef94b02b805249b\n\
    \   Nonce =                     ac80e6f61455bfac8308a2d4\n   Record authentication\
    \ key = 0b00a29a83e7e95b92e3a0783b29f140\n   Record encryption key =     a430c27f285aed913005975c42eed5f3\n\
    \   POLYVAL input =             2950a70d5a1db2316fd568378da107b5\n           \
    \                    2b0da55210cc1c1b0a00000000000000\n                      \
    \         0d8c8451178082355c9e940fea2f5800\n                               c8000000000000007800000000000000\n\
    \   POLYVAL result =            1086ef25247aa41009bbc40871d9b350\n   POLYVAL result\
    \ XOR nonce =  bc0609d3302f1bbc8ab366dc71d9b350\n   ... and masked =         \
    \   bc0609d3302f1bbc8ab366dc71d9b350\n   Tag =                       83b3449b9f39552de99dc214a1190b0b\n\
    \   Initial counter =           83b3449b9f39552de99dc214a1190b8b\n   Result (31\
    \ bytes) =         c9ff545e07b88a015f05b274540aa183\n                        \
    \       b3449b9f39552de99dc214a1190b0b\n   Plaintext (18 bytes) =      6b3db4da3d57aa94842b9803a96e07fb\n\
    \                               6de7\n   AAD (30 bytes) =            1860f762ebfbd08284e421702de0de18\n\
    \                               baa9c9596291b08466f37de21c7f\n   Key =       \
    \                bde3b2f204d1e9f8b06bc47f9745b3d1\n   Nonce =                \
    \     ae06556fb6aa7890bebc18fe\n   Record authentication key = 21c874a8bad3603d1c3e8784df5b3f9f\n\
    \   Record encryption key =     d1c16d72651c3df504eae27129d818e8\n   POLYVAL input\
    \ =             1860f762ebfbd08284e421702de0de18\n                           \
    \    baa9c9596291b08466f37de21c7f0000\n                               6b3db4da3d57aa94842b9803a96e07fb\n\
    \                               6de70000000000000000000000000000\n           \
    \                    f0000000000000009000000000000000\n   POLYVAL result =   \
    \         55462a5afa0da8d646481e049ef9c764\n   POLYVAL result XOR nonce =  fb407f354ca7d046f8f406fa9ef9c764\n\
    \   ... and masked =            fb407f354ca7d046f8f406fa9ef9c764\n   Tag =   \
    \                    3e377094f04709f64d7b985310a4db84\n   Initial counter =  \
    \         3e377094f04709f64d7b985310a4db84\n   Result (34 bytes) =         6298b296e24e8cc35dce0bed484b7f30\n\
    \                               d5803e377094f04709f64d7b985310a4\n           \
    \                    db84\n   Plaintext (21 bytes) =      e42a3c02c25b64869e146d7b233987bd\n\
    \                               dfc240871d\n   AAD (35 bytes) =            7576f7028ec6eb5ea7e298342a94d4b2\n\
    \                               02b370ef9768ec6561c4fe6b7e7296fa\n           \
    \                    859c21\n   Key =                       f901cfe8a69615a93fdf7a98cad48179\n\
    \   Nonce =                     6245709fb18853f68d833640\n   Record authentication\
    \ key = 3724f55f1d22ac0ab830da0b6a995d74\n   Record encryption key =     75ac87b70c05db287de779006105a344\n\
    \   POLYVAL input =             7576f7028ec6eb5ea7e298342a94d4b2\n           \
    \                    02b370ef9768ec6561c4fe6b7e7296fa\n                      \
    \         859c2100000000000000000000000000\n                               e42a3c02c25b64869e146d7b233987bd\n\
    \                               dfc240871d0000000000000000000000\n           \
    \                    1801000000000000a800000000000000\n   POLYVAL result =   \
    \         4cbba090f03f7d1188ea55749fa6c7bd\n   POLYVAL result XOR nonce =  2efed00f41b72ee7056963349fa6c7bd\n\
    \   ... and masked =            2efed00f41b72ee7056963349fa6c73d\n   Tag =   \
    \                    2d15506c84a9edd65e13e9d24a2a6e70\n   Initial counter =  \
    \         2d15506c84a9edd65e13e9d24a2a6ef0\n   Result (37 bytes) =         391cc328d484a4f46406181bcd62efd9\n\
    \                               b3ee197d052d15506c84a9edd65e13e9\n           \
    \                    d24a2a6e70\n"
- title: C.2.  AEAD_AES_256_GCM_SIV
  contents:
  - "C.2.  AEAD_AES_256_GCM_SIV\n   Plaintext (0 bytes) =\n   AAD (0 bytes) =\n  \
    \ Key =                       01000000000000000000000000000000\n             \
    \                  00000000000000000000000000000000\n   Nonce =              \
    \       030000000000000000000000\n   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n\
    \   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n           \
    \                    456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input =    \
    \         00000000000000000000000000000000\n   POLYVAL result =            00000000000000000000000000000000\n\
    \   POLYVAL result XOR nonce =  03000000000000000000000000000000\n   ... and masked\
    \ =            03000000000000000000000000000000\n   Tag =                    \
    \   07f5f4169bbf55a8400cd47ea6fd400f\n   Initial counter =           07f5f4169bbf55a8400cd47ea6fd408f\n\
    \   Result (16 bytes) =         07f5f4169bbf55a8400cd47ea6fd400f\n   Plaintext\
    \ (8 bytes) =       0100000000000000\n   AAD (0 bytes) =\n   Key =           \
    \            01000000000000000000000000000000\n                              \
    \ 00000000000000000000000000000000\n   Nonce =                     030000000000000000000000\n\
    \   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n   Record encryption\
    \ key =     b914f4742be9e1d7a2f84addbf96dec3\n                               456e3c6c05ecc157cdbf0700fedad222\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    00000000000000004000000000000000\n   POLYVAL result =   \
    \         05230f62f0eac8aa14fe4d646b59cd41\n   POLYVAL result XOR nonce =  06230f62f0eac8aa14fe4d646b59cd41\n\
    \   ... and masked =            06230f62f0eac8aa14fe4d646b59cd41\n   Tag =   \
    \                    843122130f7364b761e0b97427e3df28\n   Initial counter =  \
    \         843122130f7364b761e0b97427e3dfa8\n   Result (24 bytes) =         c2ef328e5c71c83b843122130f7364b7\n\
    \                               61e0b97427e3df28\n   Plaintext (12 bytes) =  \
    \    010000000000000000000000\n   AAD (0 bytes) =\n   Key =                  \
    \     01000000000000000000000000000000\n                               00000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    00000000000000006000000000000000\n   POLYVAL result =            6d81a24732fd6d03ae5af544720a1c13\n\
    \   POLYVAL result XOR nonce =  6e81a24732fd6d03ae5af544720a1c13\n   ... and masked\
    \ =            6e81a24732fd6d03ae5af544720a1c13\n   Tag =                    \
    \   8ca50da9ae6559e48fd10f6e5c9ca17e\n   Initial counter =           8ca50da9ae6559e48fd10f6e5c9ca1fe\n\
    \   Result (28 bytes) =         9aab2aeb3faa0a34aea8e2b18ca50da9\n           \
    \                    ae6559e48fd10f6e5c9ca17e\n   Plaintext (16 bytes) =     \
    \ 01000000000000000000000000000000\n   AAD (0 bytes) =\n   Key =             \
    \          01000000000000000000000000000000\n                               00000000000000000000000000000000\n\
    \   Nonce =                     030000000000000000000000\n   Record authentication\
    \ key = b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    00000000000000008000000000000000\n   POLYVAL result =            74eee2bf7c9a165f8b25dea73db32a6d\n\
    \   POLYVAL result XOR nonce =  77eee2bf7c9a165f8b25dea73db32a6d\n   ... and masked\
    \ =            77eee2bf7c9a165f8b25dea73db32a6d\n   Tag =                    \
    \   c9eac6fa700942702e90862383c6c366\n   Initial counter =           c9eac6fa700942702e90862383c6c3e6\n\
    \   Result (32 bytes) =         85a01b63025ba19b7fd3ddfc033b3e76\n           \
    \                    c9eac6fa700942702e90862383c6c366\n   Plaintext (32 bytes)\
    \ =      01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \   AAD (0 bytes) =\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               00000000000000000001000000000000\n\
    \   POLYVAL result =            899b6381b3d46f0def7aa0517ba188f5\n   POLYVAL result\
    \ XOR nonce =  8a9b6381b3d46f0def7aa0517ba188f5\n   ... and masked =         \
    \   8a9b6381b3d46f0def7aa0517ba18875\n   Tag =                       e819e63abcd020b006a976397632eb5d\n\
    \   Initial counter =           e819e63abcd020b006a976397632ebdd\n   Result (48\
    \ bytes) =         4a6a9db4c8c6549201b9edb53006cba8\n                        \
    \       21ec9cf850948a7c86c68ac7539d027f\n                               e819e63abcd020b006a976397632eb5d\n\
    \   Plaintext (48 bytes) =      01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n   AAD (0 bytes) =\n   Key =     \
    \                  01000000000000000000000000000000\n                        \
    \       00000000000000000000000000000000\n   Nonce =                     030000000000000000000000\n\
    \   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n   Record encryption\
    \ key =     b914f4742be9e1d7a2f84addbf96dec3\n                               456e3c6c05ecc157cdbf0700fedad222\n\
    \   POLYVAL input =             01000000000000000000000000000000\n           \
    \                    02000000000000000000000000000000\n                      \
    \         03000000000000000000000000000000\n                               00000000000000008001000000000000\n\
    \   POLYVAL result =            c1f8593d8fc29b0c290cae1992f71f51\n   POLYVAL result\
    \ XOR nonce =  c2f8593d8fc29b0c290cae1992f71f51\n   ... and masked =         \
    \   c2f8593d8fc29b0c290cae1992f71f51\n   Tag =                       790bc96880a99ba804bd12c0e6a22cc4\n\
    \   Initial counter =           790bc96880a99ba804bd12c0e6a22cc4\n   Result (64\
    \ bytes) =         c00d121893a9fa603f48ccc1ca3c57ce\n                        \
    \       7499245ea0046db16c53c7c66fe717e3\n                               9cf6c748837b61f6ee3adcee17534ed5\n\
    \                               790bc96880a99ba804bd12c0e6a22cc4\n   Plaintext\
    \ (64 bytes) =      01000000000000000000000000000000\n                       \
    \        02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               04000000000000000000000000000000\n   AAD (0 bytes)\
    \ =\n   Key =                       01000000000000000000000000000000\n       \
    \                        00000000000000000000000000000000\n   Nonce =        \
    \             030000000000000000000000\n   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n\
    \   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n           \
    \                    456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input =    \
    \         01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \                               03000000000000000000000000000000\n           \
    \                    04000000000000000000000000000000\n                      \
    \         00000000000000000002000000000000\n   POLYVAL result =            6ef38b06046c7c0e225efaef8e2ec4c4\n\
    \   POLYVAL result XOR nonce =  6df38b06046c7c0e225efaef8e2ec4c4\n   ... and masked\
    \ =            6df38b06046c7c0e225efaef8e2ec444\n   Tag =                    \
    \   112864c269fc0d9d88c61fa47e39aa08\n   Initial counter =           112864c269fc0d9d88c61fa47e39aa88\n\
    \   Result (80 bytes) =         c2d5160a1f8683834910acdafc41fbb1\n           \
    \                    632d4a353e8b905ec9a5499ac34f96c7\n                      \
    \         e1049eb080883891a4db8caaa1f99dd0\n                               04d80487540735234e3744512c6f90ce\n\
    \                               112864c269fc0d9d88c61fa47e39aa08\n   Plaintext\
    \ (8 bytes) =       0200000000000000\n   AAD (1 bytes) =             01\n   Key\
    \ =                       01000000000000000000000000000000\n                 \
    \              00000000000000000000000000000000\n   Nonce =                  \
    \   030000000000000000000000\n   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n\
    \   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n           \
    \                    456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input =    \
    \         01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \                               08000000000000004000000000000000\n   POLYVAL result\
    \ =            34e57bafe011b9b36fc6821b7ffb3354\n   POLYVAL result XOR nonce =\
    \  37e57bafe011b9b36fc6821b7ffb3354\n   ... and masked =            37e57bafe011b9b36fc6821b7ffb3354\n\
    \   Tag =                       91213f267e3b452f02d01ae33e4ec854\n   Initial counter\
    \ =           91213f267e3b452f02d01ae33e4ec8d4\n   Result (24 bytes) =       \
    \  1de22967237a813291213f267e3b452f\n                               02d01ae33e4ec854\n\
    \   Plaintext (12 bytes) =      020000000000000000000000\n   AAD (1 bytes) = \
    \            01\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               08000000000000006000000000000000\n\
    \   POLYVAL result =            5c47d68a22061c1ad5623a3b66a8e206\n   POLYVAL result\
    \ XOR nonce =  5f47d68a22061c1ad5623a3b66a8e206\n   ... and masked =         \
    \   5f47d68a22061c1ad5623a3b66a8e206\n   Tag =                       c1a4a19ae800941ccdc57cc8413c277f\n\
    \   Initial counter =           c1a4a19ae800941ccdc57cc8413c27ff\n   Result (28\
    \ bytes) =         163d6f9cc1b346cd453a2e4cc1a4a19a\n                        \
    \       e800941ccdc57cc8413c277f\n   Plaintext (16 bytes) =      02000000000000000000000000000000\n\
    \   AAD (1 bytes) =             01\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               08000000000000008000000000000000\n\
    \   POLYVAL result =            452896726c616746f01d11d82911d478\n   POLYVAL result\
    \ XOR nonce =  462896726c616746f01d11d82911d478\n   ... and masked =         \
    \   462896726c616746f01d11d82911d478\n   Tag =                       b292d28ff61189e8e49f3875ef91aff7\n\
    \   Initial counter =           b292d28ff61189e8e49f3875ef91aff7\n   Result (32\
    \ bytes) =         c91545823cc24f17dbb0e9e807d5ec17\n                        \
    \       b292d28ff61189e8e49f3875ef91aff7\n   Plaintext (32 bytes) =      02000000000000000000000000000000\n\
    \                               03000000000000000000000000000000\n   AAD (1 bytes)\
    \ =             01\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               08000000000000000001000000000000\n   POLYVAL result\
    \ =            4e58c1e341c9bb0ae34eda9509dfc90c\n   POLYVAL result XOR nonce =\
    \  4d58c1e341c9bb0ae34eda9509dfc90c\n   ... and masked =            4d58c1e341c9bb0ae34eda9509dfc90c\n\
    \   Tag =                       aea1bad12702e1965604374aab96dbbc\n   Initial counter\
    \ =           aea1bad12702e1965604374aab96dbbc\n   Result (48 bytes) =       \
    \  07dad364bfc2b9da89116d7bef6daaaf\n                               6f255510aa654f920ac81b94e8bad365\n\
    \                               aea1bad12702e1965604374aab96dbbc\n   Plaintext\
    \ (48 bytes) =      02000000000000000000000000000000\n                       \
    \        03000000000000000000000000000000\n                               04000000000000000000000000000000\n\
    \   AAD (1 bytes) =             01\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               04000000000000000000000000000000\n           \
    \                    08000000000000008001000000000000\n   POLYVAL result =   \
    \         2566a4aff9a525df9772c16d4eaf8d2a\n   POLYVAL result XOR nonce =  2666a4aff9a525df9772c16d4eaf8d2a\n\
    \   ... and masked =            2666a4aff9a525df9772c16d4eaf8d2a\n   Tag =   \
    \                    03332742b228c647173616cfd44c54eb\n   Initial counter =  \
    \         03332742b228c647173616cfd44c54eb\n   Result (64 bytes) =         c67a1f0f567a5198aa1fcc8e3f213143\n\
    \                               36f7f51ca8b1af61feac35a86416fa47\n           \
    \                    fbca3b5f749cdf564527f2314f42fe25\n                      \
    \         03332742b228c647173616cfd44c54eb\n   Plaintext (64 bytes) =      02000000000000000000000000000000\n\
    \                               03000000000000000000000000000000\n           \
    \                    04000000000000000000000000000000\n                      \
    \         05000000000000000000000000000000\n   AAD (1 bytes) =             01\n\
    \   Key =                       01000000000000000000000000000000\n           \
    \                    00000000000000000000000000000000\n   Nonce =            \
    \         030000000000000000000000\n   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n\
    \   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n           \
    \                    456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input =    \
    \         01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \                               03000000000000000000000000000000\n           \
    \                    04000000000000000000000000000000\n                      \
    \         05000000000000000000000000000000\n                               08000000000000000002000000000000\n\
    \   POLYVAL result =            da58d2f61b0a9d343b2f37fb0c519733\n   POLYVAL result\
    \ XOR nonce =  d958d2f61b0a9d343b2f37fb0c519733\n   ... and masked =         \
    \   d958d2f61b0a9d343b2f37fb0c519733\n   Tag =                       5bde0285037c5de81e5b570a049b62a0\n\
    \   Initial counter =           5bde0285037c5de81e5b570a049b62a0\n   Result (80\
    \ bytes) =         67fd45e126bfb9a79930c43aad2d3696\n                        \
    \       7d3f0e4d217c1e551f59727870beefc9\n                               8cb933a8fce9de887b1e40799988db1f\n\
    \                               c3f91880ed405b2dd298318858467c89\n           \
    \                    5bde0285037c5de81e5b570a049b62a0\n   Plaintext (4 bytes)\
    \ =       02000000\n   AAD (12 bytes) =            010000000000000000000000\n\
    \   Key =                       01000000000000000000000000000000\n           \
    \                    00000000000000000000000000000000\n   Nonce =            \
    \         030000000000000000000000\n   Record authentication key = b5d3c529dfafac43136d2d11be284d7f\n\
    \   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n           \
    \                    456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input =    \
    \         01000000000000000000000000000000\n                               02000000000000000000000000000000\n\
    \                               60000000000000002000000000000000\n   POLYVAL result\
    \ =            6dc76ae84b88916e073a303aafde05cf\n   POLYVAL result XOR nonce =\
    \  6ec76ae84b88916e073a303aafde05cf\n   ... and masked =            6ec76ae84b88916e073a303aafde054f\n\
    \   Tag =                       1835e517741dfddccfa07fa4661b74cf\n   Initial counter\
    \ =           1835e517741dfddccfa07fa4661b74cf\n   Result (20 bytes) =       \
    \  22b3f4cd1835e517741dfddccfa07fa4\n                               661b74cf\n\
    \   Plaintext (20 bytes) =      03000000000000000000000000000000\n           \
    \                    04000000\n   AAD (18 bytes) =            01000000000000000000000000000000\n\
    \                               0200\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               04000000000000000000000000000000\n           \
    \                    9000000000000000a000000000000000\n   POLYVAL result =   \
    \         973ef4fd04bd31d193816ab26f8655ca\n   POLYVAL result XOR nonce =  943ef4fd04bd31d193816ab26f8655ca\n\
    \   ... and masked =            943ef4fd04bd31d193816ab26f86554a\n   Tag =   \
    \                    b879ad976d8242acc188ab59cabfe307\n   Initial counter =  \
    \         b879ad976d8242acc188ab59cabfe387\n   Result (36 bytes) =         43dd0163cdb48f9fe3212bf61b201976\n\
    \                               067f342bb879ad976d8242acc188ab59\n           \
    \                    cabfe307\n   Plaintext (18 bytes) =      03000000000000000000000000000000\n\
    \                               0400\n   AAD (20 bytes) =            01000000000000000000000000000000\n\
    \                               02000000\n   Key =                       01000000000000000000000000000000\n\
    \                               00000000000000000000000000000000\n   Nonce = \
    \                    030000000000000000000000\n   Record authentication key =\
    \ b5d3c529dfafac43136d2d11be284d7f\n   Record encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n\
    \                               456e3c6c05ecc157cdbf0700fedad222\n   POLYVAL input\
    \ =             01000000000000000000000000000000\n                           \
    \    02000000000000000000000000000000\n                               03000000000000000000000000000000\n\
    \                               04000000000000000000000000000000\n           \
    \                    a0000000000000009000000000000000\n   POLYVAL result =   \
    \         2cbb6b7ab2dbffefb797f825f826870c\n   POLYVAL result XOR nonce =  2fbb6b7ab2dbffefb797f825f826870c\n\
    \   ... and masked =            2fbb6b7ab2dbffefb797f825f826870c\n   Tag =   \
    \                    cfcdf5042112aa29685c912fc2056543\n   Initial counter =  \
    \         cfcdf5042112aa29685c912fc20565c3\n   Result (34 bytes) =         462401724b5ce6588d5a54aae5375513\n\
    \                               a075cfcdf5042112aa29685c912fc205\n           \
    \                    6543\n   Plaintext (0 bytes) =\n   AAD (0 bytes) =\n   Key\
    \ =                       e66021d5eb8e4f4066d4adb9c33560e4\n                 \
    \              f46e44bb3da0015c94f7088736864200\n   Nonce =                  \
    \   e0eaf5284d884a0e77d31646\n   Record authentication key = e40d26f82774aa27f47b047b608b9585\n\
    \   Record encryption key =     7c7c3d9a542cef53dde0e6de9b580040\n           \
    \                    0f82e73ec5f7ee41b7ba8dcb9ba078c3\n   POLYVAL input =    \
    \         00000000000000000000000000000000\n   POLYVAL result =            00000000000000000000000000000000\n\
    \   POLYVAL result XOR nonce =  e0eaf5284d884a0e77d3164600000000\n   ... and masked\
    \ =            e0eaf5284d884a0e77d3164600000000\n   Tag =                    \
    \   169fbb2fbf389a995f6390af22228a62\n   Initial counter =           169fbb2fbf389a995f6390af22228ae2\n\
    \   Result (16 bytes) =         169fbb2fbf389a995f6390af22228a62\n   Plaintext\
    \ (3 bytes) =       671fdd\n   AAD (5 bytes) =             4fbdc66f14\n   Key\
    \ =                       bae8e37fc83441b16034566b7a806c46\n                 \
    \              bb91c3c5aedb64a6c590bc84d1a5e269\n   Nonce =                  \
    \   e4b47801afc0577e34699b9e\n   Record authentication key = b546f5a850d0a90adfe39e95c2510fc6\n\
    \   Record encryption key =     b9d1e239d62cbb5c49273ddac8838bdc\n           \
    \                    c53bca478a770f07087caa4e0a924a55\n   POLYVAL input =    \
    \         4fbdc66f140000000000000000000000\n                               671fdd00000000000000000000000000\n\
    \                               28000000000000001800000000000000\n   POLYVAL result\
    \ =            b91f91f96b159a7c611c05035b839e92\n   POLYVAL result XOR nonce =\
    \  5dabe9f8c4d5cd0255759e9d5b839e92\n   ... and masked =            5dabe9f8c4d5cd0255759e9d5b839e12\n\
    \   Tag =                       93da9bb81333aee0c785b240d319719d\n   Initial counter\
    \ =           93da9bb81333aee0c785b240d319719d\n   Result (19 bytes) =       \
    \  0eaccb93da9bb81333aee0c785b240d3\n                               19719d\n \
    \  Plaintext (6 bytes) =       195495860f04\n   AAD (10 bytes) =            6787f3ea22c127aaf195\n\
    \   Key =                       6545fc880c94a95198874296d5cc1fd1\n           \
    \                    61320b6920ce07787f86743b275d1ab3\n   Nonce =            \
    \         2f6d1f0434d8848c1177441f\n   Record authentication key = e156e1f9b0b07b780cbe30f259e3c8da\n\
    \   Record encryption key =     6fc1c494519f944aae52fcd8b14e5b17\n           \
    \                    1b5a9429d3b76e430d49940c0021d612\n   POLYVAL input =    \
    \         6787f3ea22c127aaf195000000000000\n                               195495860f0400000000000000000000\n\
    \                               50000000000000003000000000000000\n   POLYVAL result\
    \ =            2c480ed9d236b1df24c6eec109bd40c1\n   POLYVAL result XOR nonce =\
    \  032511dde6ee355335b1aade09bd40c1\n   ... and masked =            032511dde6ee355335b1aade09bd4041\n\
    \   Tag =                       6b62b84dc40c84636a5ec12020ec8c2c\n   Initial counter\
    \ =           6b62b84dc40c84636a5ec12020ec8cac\n   Result (22 bytes) =       \
    \  a254dad4f3f96b62b84dc40c84636a5e\n                               c12020ec8c2c\n\
    \   Plaintext (9 bytes) =       c9882e5386fd9f92ec\n   AAD (15 bytes) =      \
    \      489c8fde2be2cf97e74e932d4ed87d\n   Key =                       d1894728b3fed1473c528b8426a58299\n\
    \                               5929a1499e9ad8780c8d63d0ab4149c0\n   Nonce = \
    \                    9f572c614b4745914474e7c7\n   Record authentication key =\
    \ 0533fd71f4119257361a3ff1469dd4e5\n   Record encryption key =     4feba89799be8ac3684fa2bb30ade0ea\n\
    \                               51390e6d87dcf3627d2ee44493853abe\n   POLYVAL input\
    \ =             489c8fde2be2cf97e74e932d4ed87d00\n                           \
    \    c9882e5386fd9f92ec00000000000000\n                               78000000000000004800000000000000\n\
    \   POLYVAL result =            bf160bc9ded8c63057d2c38aae552fb4\n   POLYVAL result\
    \ XOR nonce =  204127a8959f83a113a6244dae552fb4\n   ... and masked =         \
    \   204127a8959f83a113a6244dae552f34\n   Tag =                       c0fd3dc6628dfe55ebb0b9fb2295c8c2\n\
    \   Initial counter =           c0fd3dc6628dfe55ebb0b9fb2295c8c2\n   Result (25\
    \ bytes) =         0df9e308678244c44bc0fd3dc6628dfe\n                        \
    \       55ebb0b9fb2295c8c2\n   Plaintext (12 bytes) =      1db2316fd568378da107b52b\n\
    \   AAD (20 bytes) =            0da55210cc1c1b0abde3b2f204d1e9f8\n           \
    \                    b06bc47f\n   Key =                       a44102952ef94b02b805249bac80e6f6\n\
    \                               1455bfac8308a2d40d8c845117808235\n   Nonce = \
    \                    5c9e940fea2f582950a70d5a\n   Record authentication key =\
    \ 64779ab10ee8a280272f14cc8851b727\n   Record encryption key =     25f40fc63f49d3b9016a8eeeb75846e0\n\
    \                               d72ca36ddbd312b6f5ef38ad14bd2651\n   POLYVAL input\
    \ =             0da55210cc1c1b0abde3b2f204d1e9f8\n                           \
    \    b06bc47f000000000000000000000000\n                               1db2316fd568378da107b52b00000000\n\
    \                               a0000000000000006000000000000000\n   POLYVAL result\
    \ =            cc86ee22c861e1fd474c84676b42739c\n   POLYVAL result XOR nonce =\
    \  90187a2d224eb9d417eb893d6b42739c\n   ... and masked =            90187a2d224eb9d417eb893d6b42731c\n\
    \   Tag =                       404099c2587f64979f21826706d497d5\n   Initial counter\
    \ =           404099c2587f64979f21826706d497d5\n   Result (28 bytes) =       \
    \  8dbeb9f7255bf5769dd56692404099c2\n                               587f64979f21826706d497d5\n\
    \   Plaintext (15 bytes) =      21702de0de18baa9c9596291b08466\n   AAD (25 bytes)\
    \ =            f37de21c7ff901cfe8a69615a93fdf7a\n                            \
    \   98cad481796245709f\n   Key =                       9745b3d1ae06556fb6aa7890bebc18fe\n\
    \                               6b3db4da3d57aa94842b9803a96e07fb\n   Nonce = \
    \                    6de71860f762ebfbd08284e4\n   Record authentication key =\
    \ 27c2959ed4daea3b1f52e849478de376\n   Record encryption key =     307a38a5a6cf231c0a9af3b527f23a62\n\
    \                               e9a6ff09aff8ae669f760153e864fc93\n   POLYVAL input\
    \ =             f37de21c7ff901cfe8a69615a93fdf7a\n                           \
    \    98cad481796245709f00000000000000\n                               21702de0de18baa9c9596291b0846600\n\
    \                               c8000000000000007800000000000000\n   POLYVAL result\
    \ =            c4fa5e5b713853703bcf8e6424505fa5\n   POLYVAL result XOR nonce =\
    \  a91d463b865ab88beb4d0a8024505fa5\n   ... and masked =            a91d463b865ab88beb4d0a8024505f25\n\
    \   Tag =                       b3080d28f6ebb5d3648ce97bd5ba67fd\n   Initial counter\
    \ =           b3080d28f6ebb5d3648ce97bd5ba67fd\n   Result (31 bytes) =       \
    \  793576dfa5c0f88729a7ed3c2f1bffb3\n                               080d28f6ebb5d3648ce97bd5ba67fd\n\
    \   Plaintext (18 bytes) =      b202b370ef9768ec6561c4fe6b7e7296\n           \
    \                    fa85\n   AAD (30 bytes) =            9c2159058b1f0fe91433a5bdc20e214e\n\
    \                               ab7fecef4454a10ef0657df21ac7\n   Key =       \
    \                b18853f68d833640e42a3c02c25b6486\n                          \
    \     9e146d7b233987bddfc240871d7576f7\n   Nonce =                     028ec6eb5ea7e298342a94d4\n\
    \   Record authentication key = 670b98154076ddb59b7a9137d0dcc0f0\n   Record encryption\
    \ key =     78116d78507fbe69d4a820c350f55c7c\n                               b36c3c9287df0e9614b142b76a587c3f\n\
    \   POLYVAL input =             9c2159058b1f0fe91433a5bdc20e214e\n           \
    \                    ab7fecef4454a10ef0657df21ac70000\n                      \
    \         b202b370ef9768ec6561c4fe6b7e7296\n                               fa850000000000000000000000000000\n\
    \                               f0000000000000009000000000000000\n   POLYVAL result\
    \ =            4e4108f09f41d797dc9256f8da8d58c7\n   POLYVAL result XOR nonce =\
    \  4ccfce1bc1e6350fe8b8c22cda8d58c7\n   ... and masked =            4ccfce1bc1e6350fe8b8c22cda8d5847\n\
    \   Tag =                       454fc2a154fea91f8363a39fec7d0a49\n   Initial counter\
    \ =           454fc2a154fea91f8363a39fec7d0ac9\n   Result (34 bytes) =       \
    \  857e16a64915a787637687db4a951963\n                               5cdd454fc2a154fea91f8363a39fec7d\n\
    \                               0a49\n   Plaintext (21 bytes) =      ced532ce4159b035277d4dfbb7db6296\n\
    \                               8b13cd4eec\n   AAD (35 bytes) =            734320ccc9d9bbbb19cb81b2af4ecbc3\n\
    \                               e72834321f7aa0f70b7282b4f33df23f\n           \
    \                    167541\n   Key =                       3c535de192eaed3822a2fbbe2ca9dfc8\n\
    \                               8255e14a661b8aa82cc54236093bbc23\n   Nonce = \
    \                    688089e55540db1872504e1c\n   Record authentication key =\
    \ cb8c3aa3f8dbaeb4b28a3e86ff6625f8\n   Record encryption key =     02426ce1aa3ab31313b0848469a1b5fc\n\
    \                               6c9af9602600b195b04ad407026bc06d\n   POLYVAL input\
    \ =             734320ccc9d9bbbb19cb81b2af4ecbc3\n                           \
    \    e72834321f7aa0f70b7282b4f33df23f\n                               16754100000000000000000000000000\n\
    \                               ced532ce4159b035277d4dfbb7db6296\n           \
    \                    8b13cd4eec0000000000000000000000\n                      \
    \         1801000000000000a800000000000000\n   POLYVAL result =            ffd503c7dd712eb3791b7114b17bb0cf\n\
    \   POLYVAL result XOR nonce =  97558a228831f5ab0b4b3f08b17bb0cf\n   ... and masked\
    \ =            97558a228831f5ab0b4b3f08b17bb04f\n   Tag =                    \
    \   9d6c7029675b89eaf4ba1ded1a286594\n   Initial counter =           9d6c7029675b89eaf4ba1ded1a286594\n\
    \   Result (37 bytes) =         626660c26ea6612fb17ad91e8e767639\n           \
    \                    edd6c9faee9d6c7029675b89eaf4ba1d\n                      \
    \         ed1a286594\n"
- title: C.3.  Counter Wrap Tests
  contents:
  - "C.3.  Counter Wrap Tests\n   The tests in this section use AEAD_AES_256_GCM_SIV\
    \ and are crafted to\n   test correct wrapping of the block counter.\n   Plaintext\
    \ (32 bytes) =      00000000000000000000000000000000\n                       \
    \        4db923dc793ee6497c76dcc03a98e108\n   AAD (0 bytes) =\n   Key =      \
    \                 00000000000000000000000000000000\n                         \
    \      00000000000000000000000000000000\n   Nonce =                     000000000000000000000000\n\
    \   Record authentication key = dc95c078a24089895275f3d86b4fb868\n   Record encryption\
    \ key =     779b38d15bffb63d39d6e9ae76a9b2f3\n                               75d11b0e3a68c422845c7d4690fa594f\n\
    \   POLYVAL input =             00000000000000000000000000000000\n           \
    \                    4db923dc793ee6497c76dcc03a98e108\n                      \
    \         00000000000000000001000000000000\n   POLYVAL result =            7367cdb411b730128dd56e8edc0eff56\n\
    \   POLYVAL result XOR nonce =  7367cdb411b730128dd56e8edc0eff56\n   ... and masked\
    \ =            7367cdb411b730128dd56e8edc0eff56\n   Tag =                    \
    \   ffffffff000000000000000000000000\n   Initial counter =           ffffffff000000000000000000000080\n\
    \   Result (48 bytes) =         f3f80f2cf0cb2dd9c5984fcda908456c\n           \
    \                    c537703b5ba70324a6793a7bf218d3ea\n                      \
    \         ffffffff000000000000000000000000\n   Plaintext (24 bytes) =      eb3640277c7ffd1303c7a542d02d3e4c\n\
    \                               0000000000000000\n   AAD (0 bytes) =\n   Key =\
    \                       00000000000000000000000000000000\n                   \
    \            00000000000000000000000000000000\n   Nonce =                    \
    \ 000000000000000000000000\n   Record authentication key = dc95c078a24089895275f3d86b4fb868\n\
    \   Record encryption key =     779b38d15bffb63d39d6e9ae76a9b2f3\n           \
    \                    75d11b0e3a68c422845c7d4690fa594f\n   POLYVAL input =    \
    \         eb3640277c7ffd1303c7a542d02d3e4c\n                               00000000000000000000000000000000\n\
    \                               0000000000000000c000000000000000\n   POLYVAL result\
    \ =            7367cdb411b730128dd56e8edc0eff56\n   POLYVAL result XOR nonce =\
    \  7367cdb411b730128dd56e8edc0eff56\n   ... and masked =            7367cdb411b730128dd56e8edc0eff56\n\
    \   Tag =                       ffffffff000000000000000000000000\n   Initial counter\
    \ =           ffffffff000000000000000000000080\n   Result (40 bytes) =       \
    \  18ce4f0b8cb4d0cac65fea8f79257b20\n                               888e53e72299e56dffffffff00000000\n\
    \                               0000000000000000\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Daniel Bleichenbacher, Uri\n\
    \   Blumenthal, Deb Cooley's team at NSA Information Assurance, Scott\n   Fluhrer,\
    \ Tetsu Iwata, Tibor Jager, John Mattsson, Ondrej Mosnacek,\n   Kenny Paterson,\
    \ Bart Preneel, Yannick Seurin, and Bjoern Tackmann for\n   their helpful suggestions\
    \ and review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Shay Gueron\n   University of Haifa and Amazon\n   Abba\
    \ Khoushy Ave 199\n   Haifa  3498838\n   Israel\n   Email: shay@math.haifa.ac.il\n\
    \   Adam Langley\n   Google LLC\n   345 Spear St\n   San Francisco, CA  94105\n\
    \   United States of America\n   Email: agl@google.com\n   Yehuda Lindell\n  \
    \ Bar-Ilan University and Unbound Tech\n   Ramat Gan\n   5290002\n   Israel\n\
    \   Email: Yehuda.Lindell@biu.ac.il\n"
