- title: __initial_text__
  contents:
  - '              Cisco Layer Two Forwarding (Protocol) "L2F"

    '
- title: Status of Memo
  contents:
  - "Status of Memo\n   This memo describes a historic protocol for the Internet community.\n\
    \   It does not specify an Internet standard of any kind.  Distribution\n   of\
    \ this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Virtual dial-up allows many separate and autonomous protocol domains\n\
    \   to share common access infrastructure including modems, Access\n   Servers,\
    \ and ISDN routers.  Previous RFCs have specified protocols\n   for supporting\
    \ IP dial-up via SLIP [1] and multiprotocol dial-up via\n   PPP [2].  This document\
    \ describes the Layer Two Forwarding protocol\n   (L2F) which permits the tunneling\
    \ of the link layer (i.e., HDLC,\n   async HDLC, or SLIP frames) of higher level\
    \ protocols.  Using such\n   tunnels, it is possible to divorce the location of\
    \ the initial dial-\n   up server from the location at which the dial-up protocol\
    \ connection\n   is terminated and access to the network provided.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0 Introduction                                      \
    \          3\n   1.1 Conventions                                             \
    \    3\n   2.0 Problem Space Overview                                      3\n\
    \   2.1 Initial Assumptions                                         3\n   2.2\
    \ Topology                                                    4\n   2.3 Virtual\
    \ dial-up Service - a walk-though                     5\n   3.0 Service Model\
    \ Issues                                        7\n   3.1 Security           \
    \                                         7\n   3.2 Address allocation       \
    \                                   8\n   3.3 Authentication                 \
    \                             8\n   3.4 Accounting                           \
    \                       8\n   4.0 Protocol Definition                        \
    \                 9\n   4.1 Encapsulation within L2F                         \
    \          10\n   4.1.1 Encapsulation of PPP within L2F                      \
    \    10\n   4.1.2 Encapsulation of SLIP within L2F                         10\n\
    \   4.2 L2F Packet Format                                          10\n   4.2.1\
    \ Overall Packet Format                                    10\n   4.2.2 Packet\
    \ Header                                            11\n   4.2.3 Version field\
    \                                            11\n   4.2.4 Protocol field     \
    \                                      11\n   4.2.5 Sequence Number          \
    \                                12\n   4.2.6 Packet Multiplex ID            \
    \                          12\n   4.2.7 Client ID                            \
    \                    13\n   4.2.8 Length                                     \
    \              13\n   4.2.9 Packet Checksum                                  \
    \        13\n   4.2.10 Payload Offset                                        \
    \  14\n   4.2.11 Packet Key                                              14\n\
    \   4.2.12 Packet priority                                         14\n   4.3\
    \ L2F Tunnel Establishment                                   14\n   4.3.1 Normal\
    \ Tunnel Negotiation Sequence                       15\n   4.3.2 Normal Client\
    \ Negotiation Sequence                       17\n   4.4 L2F management message\
    \ types                               18\n   4.4.1 L2F message type: Invalid \
    \                               18\n   4.4.2 L2F_CONF                        \
    \                         19\n   4.4.3 L2F_OPEN, tunnel establishment        \
    \                   20\n   4.4.4 L2F_OPEN, client establishment              \
    \             20\n   4.4.5 L2F_CLOSE                                         \
    \       22\n   4.4.6 L2F_ECHO                                                \
    \ 22\n   4.4.7 L2F_ECHO_RESP                                            23\n \
    \  4.5 L2F Message Delivery                                       23\n   4.5.1\
    \ Sequenced Delivery                                       23\n   4.5.2 Flow Control\
    \                                             23\n   4.5.3 Tunnel State Table\
    \                                       24\n   4.5.4 Client State Table      \
    \                                 25\n   5.0 Protocol Considerations         \
    \                           26\n   5.1 PPP Features                          \
    \                     26\n   5.2 Termination                                 \
    \               26\n   5.3 Extended Authentication                           \
    \         26\n   5.4 MNP4 and Apple Remote Access Protocol                   \
    \   27\n   5.5 Operation over IP/UDP                                      27\n\
    \   6.0 Acknowledgments                                            27\n   7.0\
    \ References                                                 27\n   8.0 Security\
    \ Considerations                                    28\n   9.0 Authors' Addresses\
    \                                         28\n   10.0 Full Copyright Statement\
    \                                  29\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   The traditional dial-up network service on the Internet\
    \ is for\n   registered IP addresses only.  A new class of virtual dial-up\n \
    \  application which allows multiple protocols and unregistered IP\n   addresses\
    \ is also desired on the Internet. Examples of this class of\n   network application\
    \ are support for privately addressed IP, IPX, and\n   AppleTalk dial-up via SLIP/PPP\
    \ across existing Internet\n   infrastructure.\n   The support of these multiprotocol\
    \ virtual dial-up applications is of\n   significant benefit to end users and\
    \ Internet Service providers as it\n   allows the sharing of very large investments\
    \ in access and core\n   infrastructure and allows local calls to be used.  It\
    \ also allows\n   existing investments in non-IP protocol applications to be supported\n\
    \   in a secure manner while still leveraging the access infrastructure\n   of\
    \ the Internet.\n   It is the purpose of this RFC to identify the issues encountered\
    \ in\n   integrating multiprotocol dial-up services into an existing Internet\n\
    \   Service Provider's Point of Presence (hereafter referred to as ISP\n   and\
    \ POP, respectively), and to describe the L2F protocol which\n   permits the leveraging\
    \ of existing access protocols.\n"
- title: 1.1. Conventions
  contents:
  - "1.1. Conventions\n   The following language conventions are used in the items\
    \ of\n   specification in this document:\n      o   MUST, SHALL, or MANDATORY\
    \ -- This item is an absolute\n          requirement of the specification.\n \
    \     o   SHOULD or RECOMMEND -- This item should generally be followed\n    \
    \      for all but exceptional circumstances.\n      o   MAY or OPTIONAL -- This\
    \ item is truly optional and may be\n          followed or ignored according to\
    \ the needs of the implementor.\n"
- title: 2.0 Problem Space Overview
  contents:
  - "2.0 Problem Space Overview\n   In this section we describe in high level terms\
    \ the scope of the\n   problem that will be explored in more detail in later sections.\n"
- title: 2.1 Initial Assumptions
  contents:
  - "2.1 Initial Assumptions\n   We begin by assuming that Internet access is provided\
    \ by an ISP and\n   that the ISP wishes to offer services other than traditional\n\
    \   registered IP address based services to dial-up users of the network.\n  \
    \ We also assume that the user of such a service wants all of the\n   security\
    \ facilities that are available to him in a dedicated dial-up\n   configuration.\
    \  In particular, the end user requires:\n   +  End System transparency: Neither\
    \ the remote end system nor his\n      home site hosts should require any special\
    \ software to use this\n      service in a secure manner.\n   +  Authentication\
    \ as provided via dial-up PPP CHAP or PAP, or through\n      other dialogs as\
    \ needed for protocols without authentication\n      (e.g., SLIP).  This will\
    \ include TACACS+ and RADIUS solutions as\n      well as support for smart cards\
    \ and one-time passwords.  The\n      authentication should be manageable by the\
    \ user independently of\n      the ISP.\n   +  Addressing should be as manageable\
    \ as dedicated dial-up solutions.\n      The address should be assigned by the\
    \ home site and not the ISP.\n   +  Authorization should be managed by the home\
    \ site as it would in a\n      direct dial-up solution.\n   +  Accounting should\
    \ be performed both by the ISP (for billing\n      purposes) and by the user (for\
    \ charge-back and auditing).\n"
- title: 2.2 Topology
  contents:
  - "2.2 Topology\n   Shown below is a generic Internet with Public switched Telephone\n\
    \   Network (PSTN) access (i.e., async PPP via modems) and Integrated\n   Services\
    \ Digital Network (ISDN) access (i.e., synchronous PPP\n   access).  Remote users\
    \ (either async PPP or SLIP, or ISDN) will\n   access the Home LAN as if they\
    \ were dialed into the Home Gateway,\n   although their physical dial-up is via\
    \ the ISP Network Access Server.\n           ...----[L]----+---[L]-----...\n \
    \                        |\n                         |\n                     \
    \   [H]\n                         |\n                 ________|________________________\n\
    \                 |                                |\n         ________|__   \
    \                     ______|________\n         |         |                  \
    \      |             |\n         |  PSTN  [R]                      [R]  ISDN \
    \     |\n         |  Cloud  |                        |   Cloud    [N]__[U]\n \
    \        |         |             Internet   |             |\n         |      \
    \   |                       [R]            |\n         [N]______[R]          \
    \             |_____________|\n          |      |                            \
    \    |\n          |      |                                |\n         [U]    \
    \ |________________________________|\n      [H] = Home Gateway\n      [L] = Home\
    \ LAN(s)\n      [R] = Router\n      [U] = Remote User\n      [N] = ISP Network\
    \ Access Server (\"NAS\")\n"
- title: 2.3 Providing Virtual dial-up Services - a walk-through
  contents:
  - "2.3 Providing Virtual dial-up Services - a walk-through\n   To motivate the following\
    \ discussion, this section walks through an\n   example of what might happen when\
    \ a Virtual dial-up client initiates\n   access.\n   The Remote User initiates\
    \ a PPP connection to an ISP via either the\n   PSTN or ISDN.  The Network Access\
    \ Server (NAS) accepts the connection\n   and the PPP link is established.\n \
    \  The ISP undertakes a partial authentication of the end system/user\n   via\
    \ CHAP or PAP.  Only the username field is interpreted to determine\n   whether\
    \ the user requires a Virtual dial-up service.  It is\n   expected-- but not required--that\
    \ usernames will be structured (e.g.\n   littlewo@cisco.com).  Alternatively,\
    \ the ISP may maintain a database\n   mapping users to services.  In the case\
    \ of Virtual dial-up, the\n   mapping will name a specific endpoint, the Home\
    \ Gateway.\n   If a virtual dial-up service is not required, standard access to\
    \ the\n   Internet may be provided.\n   If no tunnel connection currently exists\
    \ to the desired Home Gateway,\n   one is initiated.  L2F is designed to be largely\
    \ insulated from the\n   details of the media over which the tunnel is established;\
    \ L2F\n   requires only that the tunnel media provide packet oriented point-\n\
    \   to-point connectivity.  Obvious examples of such media are UDP, Frame\n  \
    \ Relay PVC's, or X.25 VC's.  Details for L2F operation over UDP are\n   provided\
    \ in section 5.5.  The specification for L2F packet formats is\n   provided in\
    \ section 4.2, and the message types and semantics starting\n   in section 4.4.\n\
    \   Once the tunnel exists, an unused Multiplex ID (hereafter, \"MID\") is\n \
    \  allocated, and a connect indication is sent to notify the Home\n   Gateway\
    \ of this new dial-up session.  The Home Gateway either accepts\n   the connection,\
    \ or rejects.  Rejection may include a reason\n   indication, which may be displayed\
    \ to the dial-up user, after which\n   the call should be disconnected.\n   The\
    \ initial setup notification may include the authentication\n   information required\
    \ to allow the Home Gateway to authenticate the\n   user and decide to accept\
    \ or decline the connection.  In the case of\n   CHAP, the set-up packet includes\
    \ the challenge, username and raw\n   response.  For PAP or text dialog (i.e.,\
    \ for SLIP users), it includes\n   username and clear text password.  The Home\
    \ Gateway may choose to use\n   this information to complete its authentication,\
    \ avoiding an\n   additional cycle of authentication.\n   For PPP, the initial\
    \ setup notification may also include a copy of\n   the the LCP CONFACKs sent\
    \ in each direction which completed LCP\n   negotiation.  The Home Gateway may\
    \ use this information to initialize\n   its own PPP state (thus avoiding an additional\
    \ LCP negotiation), or\n   it may choose to initiate a new LCP CONFREQ exchange.\n\
    \   If the Home Gateway accepts the connection, it creates a \"virtual\n   interface\"\
    \ for SLIP or PPP in a manner analogous to what it would use\n   for a direct-dialed\
    \ connection.  With this \"virtual interface\" in\n   place, link layer frames\
    \ may now pass over this tunnel in both\n   directions.  Frames from the remote\
    \ user are received at the POP,\n   stripped of any link framing or transparency\
    \ bytes, encapsulated in\n   L2F, and forwarded over the appropriate tunnel.\n\
    \   The Home Gateway accepts these frames, strips L2F, and processes them\n  \
    \ as normal incoming frames for the appropriate interface and protocol.\n   The\
    \ \"virtual interface\" behaves very much like a hardware interface,\n   with\
    \ the exception that the hardware in this case is physically\n   located at the\
    \ ISP POP.  The other direction behaves analogously,\n   with the Home Gateway\
    \ encapsulating the packet in L2F, and the POP\n   stripping L2F before transmitting\
    \ it out the physical interface to\n   the remote user.\n   At this point, the\
    \ connectivity is a point-to-point PPP or SLIP\n   connection whose endpoints\
    \ are the remote user's networking\n   application on one end and the termination\
    \ of this connectivity into\n   the Home Gateway's SLIP or PPP support on the\
    \ other.  Because the\n   remote user has become simply another dial-up client\
    \ of the Home\n   Gateway access server, client connectivity can now be managed\
    \ using\n   traditional mechanisms with respect to further authorization,\n  \
    \ protocol access, and filtering.\n   Accounting can be performed at both the\
    \ NAS as well as the Home\n   Gateway.  This document illustrates some Accounting\
    \ techniques which\n   are possible using L2F, but the policies surrounding such\
    \ Accounting\n   are outside the scope of this specification.\n   Because L2F\
    \ connect notifications for PPP clients contain sufficient\n   information for\
    \ a Home Gateway to authenticate and initialize its LCP\n   state machine, it\
    \ is not required that the remote user be queried a\n   second time for CHAP authentication,\
    \ nor that the client undergo\n   multiple rounds of LCP negotiation and convergence.\
    \  These techniques\n   are intended to optimize connection setup, and are not\
    \ intended to\n   deprecate any functions required by the PPP specification.\n"
- title: 3.0 Service Model Issues
  contents:
  - "3.0 Service Model Issues\n   There are several significant differences between\
    \ the standard\n   Internet access service and the Virtual dial-up service with\
    \ respect\n   to authentication, address allocation, authorization and accounting.\n\
    \   The details of the differences between these services and the\n   problems\
    \ presented by these differences are described below.  The\n   mechanisms used\
    \ for Virtual Dial-up service are intended to coexist\n   with more traditional\
    \ mechanisms; it is intended that an ISP's POP\n   can simultaneously service\
    \ ISP clients as well as Virtual dial-up\n   clients.\n"
- title: 3.1 Security
  contents:
  - "3.1 Security\n   For the Virtual dial-up service, the ISP pursues authentication\
    \ only\n   to the extent required to discover the user's apparent identity (and\n\
    \   by implication, their desired Home Gateway).  As soon as this is\n   determined,\
    \ a connection to the Home Gateway is initiated with the\n   authentication information\
    \ gathered by the ISP.  The Home Gateway\n   completes the authentication by either\
    \ accepting the connection, or\n   rejecting it.\n   The Home Gateway must also\
    \ protect against attempts by third parties\n   to establish tunnels to the Home\
    \ Gateway.  Tunnel establishment\n   involves an ISP-to-Home Gateway authentication\
    \ phase to protect\n   against such attacks.\n"
- title: 3.2 Address Allocation
  contents:
  - "3.2 Address Allocation\n   For an Internet service, the user accepts that the\
    \ IP address may be\n   allocated dynamically from a pool of Service provider\
    \ addresses.\n   This model often means that the remote user has little or no\
    \ access\n   to their home network's resources, due to firewalls and other\n \
    \  security policies applied by the home network to accesses from\n   external\
    \ IP addresses.\n   For the Virtual dial-up service, the Home Gateway can exist\
    \ behind\n   the home firewall, allocating addresses which are internal (and,\
    \ in\n   fact, can be RFC1597 addresses, or non-IP addresses).  Because L2F\n\
    \   tunnels exclusively at the frame layer, the actual policies of such\n   address\
    \ management are irrelevant to correct Virtual dial-up service;\n   for all purposes\
    \ of PPP or SLIP protocol handling, the dial-in user\n   appears to have connected\
    \ at the Home Gateway.\n"
- title: 3.3 Authentication
  contents:
  - "3.3 Authentication\n   The authentication of the user occurs in three phases;\
    \ the first at\n   the ISP, and the second and optional third at the Home gateway.\n\
    \   The ISP uses the username to determine that a Virtual dial-up service\n  \
    \ is required and initiate the tunnel connection to the appropriate\n   Home Gateway.\
    \  Once a tunnel is established, a new MID is allocated\n   and a session initiated\
    \ by forwarding the gathered authentication\n   information.\n   The Home Gateway\
    \ undertakes the second phase by deciding whether or\n   not to accept the connection.\
    \  The connection indication may include\n   CHAP, PAP, or textual authentication\
    \ information.  Based on this\n   information, the Home Gateway may accept the\
    \ connection, or may\n   reject it (for instance, it was a PAP request and the\n\
    \   username/password are found to be incorrect).\n   Once the connection is accepted,\
    \ the Home Gateway is free to pursue a\n   third phase of authentication at the\
    \ PPP or SLIP layer.  These\n   activities are outside the scope of this specification,\
    \ but might\n   include an additional cycle of LCP authentication, proprietary\
    \ PPP\n   extensions, or textual challenges carried via a TCP/IP telnet\n   session.\n"
- title: 3.4 Accounting
  contents:
  - "3.4 Accounting\n   It is a requirement that both the Access gateway and the Home\
    \ Gateway\n   can provide accounting data and hence both may count packets, octets\n\
    \   and connection start and stop times.\n   Since Virtual dial-up is an access\
    \ service, accounting of connection\n   attempts (in particular, failed connection\
    \ attempts) is of\n   significant interest.  The Home Gateway can reject new connections\n\
    \   based on the authentication information gathered by the ISP, with\n   corresponding\
    \ logging.  For cases where the Home Gateway accepts the\n   connection and then\
    \ continues with further authentication, the Home\n   Gateway might subsequently\
    \ disconnect the client.  For such\n   scenarios, the disconnection indication\
    \ back to the ISP may also\n   include a reason.\n   Because the Home Gateway\
    \ can decline a connection based on the\n   authentication information collected\
    \ by the ISP, accounting can\n   easily draw a distinction between a series of\
    \ failed connection\n   attempts and a series of brief successful connections.\
    \  Lacking this\n   facility, the Home Gateway must always accept connection requests,\n\
    \   and would need to exchange a number of PPP packets with the remote\n   system.\n"
- title: 4.0 Protocol Definition
  contents:
  - "4.0 Protocol Definition\n   The protocol definition for Virtual dial-up services\
    \ requires two\n   areas of standardization:\n   +  Encapsulation of PPP packets\
    \ within L2F.  The ISP NAS and the\n      Home gateway require a common understanding\
    \ of the encapsulation\n      protocol so that SLIP/PPP packets can be successfully\
    \ transmitted\n      and received across the Internet.\n   +  Connection management\
    \ of L2F and MIDs.  The tunnel must be\n      initiated and terminated, as must\
    \ MIDs within the tunnel.\n      Termination includes diagnostic codes to assist\
    \ in the diagnosis\n      of problems and to support accounting.\n   While providing\
    \ these services, the protocol must address the\n   following required attributes:\n\
    \   +  Low overhead.  The protocol must impose a minimal additional\n      overhead.\
    \  This requires a compact encapsulation, and a structure\n      for omitting\
    \ some portions of the encapsulation where their\n      function is not required.\n\
    \   +  Efficiency.  The protocol must be efficient to encapsulate and\n      deencapsulate.\n\
    \   +  Protocol independence.  The protocol must make very few\n      assumptions\
    \ about the substrate over which L2F packets are\n      carried.\n   +  Simple\
    \ deployment.  The protocol must not rely on additional\n      telecommunication\
    \ support (for instance, unique called numbers,\n      or caller ID) to operate.\n"
- title: 4.1 Encapsulation within L2F
  contents:
  - '4.1 Encapsulation within L2F

    '
- title: 4.1.1 Encapsulation of PPP within L2F
  contents:
  - "4.1.1 Encapsulation of PPP within L2F\n   The PPP packets may be encapsulated\
    \ within L2F.  The packet\n   encapsulated is the packet as it would be transmitted\
    \ over a physical\n   link.  The following are NOT present in the packet:\n  \
    \ + Flags\n   + Transparency data (ACCM for async, bit stuffing for sync)\n  \
    \ + CRC\n   The following ARE still present:\n   + Address and control flags (unless\
    \ negotiated away by LCP)\n   + Protocol value\n"
- title: 4.1.2 Encapsulation of SLIP within L2F
  contents:
  - "4.1.2 Encapsulation of SLIP within L2F\n   SLIP is encapsulated within L2F in\
    \ much the same way as PPP.  The\n   transparency characters are removed before\
    \ encapsulating within L2F,\n   as is the framing.\n"
- title: 4.2 L2F Packet Format
  contents:
  - '4.2 L2F Packet Format

    '
- title: 4.2.1 Overall Packet Format
  contents:
  - "4.2.1 Overall Packet Format\n   The entire encapsulated packet has the form:\n\
    \                 ---------------------------------\n                 |      \
    \                         |\n                 |         L2F Header           \
    \ |\n                 |                               |\n                 ---------------------------------\n\
    \                 |                               |\n                 |  Payload\
    \ packet (SLIP/PPP)    |\n                 |                               |\n\
    \                 ---------------------------------\n                 |      \
    \                         |\n                 |    L2F Checksum (optional)   \
    \ |\n                 |                               |\n                 ---------------------------------\n"
- title: 4.2.2 Packet Format
  contents:
  - "4.2.2 Packet Format\n   An L2F packet has the form:\n 0                   1 \
    \                  2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n"
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|F|K|P|S|0|0|0|0|0|0|0|0|C| Ver |    Protocol   |Sequence (opt)|\'
  contents:
  - '|F|K|P|S|0|0|0|0|0|0|0|0|C| Ver |    Protocol   |Sequence (opt)|\

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\

    '
- title: '|          Multiplex ID         |           Client ID           | |'
  contents:
  - '|          Multiplex ID         |           Client ID           | |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | L2F
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | L2F

    '
- title: '|             Length            |       Offset (opt)            | |Header'
  contents:
  - '|             Length            |       Offset (opt)            | |Header

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |

    '
- title: '|                         Key (opt)                             | /'
  contents:
  - '|                         Key (opt)                             | /

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+/
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+/

    '
- title: +                                 (payload)                     |
  contents:
  - '+                                 (payload)                     |

    '
- title: +                             .....                             |
  contents:
  - '+                             .....                             |

    '
- title: +                             .....                             |
  contents:
  - '+                             .....                             |

    '
- title: +                             .....                             |
  contents:
  - '+                             .....                             |

    '
- title: +                                 (payload)                     |
  contents:
  - '+                                 (payload)                     |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|   L2F Checksum (optional)     |'
  contents:
  - '|   L2F Checksum (optional)     |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: 4.2.3 Version field
  contents:
  - "4.2.3 Version field\n   The Ver (\"Version\") field represents the major version\
    \ of the L2F\n   software creating the packet.  It MUST contain the value 001.\n\
    \   If Ver holds a value other than 1, or any bits are non-zero after bit\n  \
    \ S but before bit C, this corresponds to a packet containing\n   extensions not\
    \ understood by the receiving end.  The packet is\n   handled as an invalid packet\
    \ as defined in 4.4.1.\n"
- title: 4.2.4 Protocol field
  contents:
  - "4.2.4 Protocol field\n   The Protocol specifies the protocol carried within the\
    \ L2F packet.\n   Legal values (represented here in hexadecimal) are:\n      Value\
    \           Type                   Description\n      0x00            L2F_ILLEGAL\
    \            Illegal\n      0x01            L2F_PROTO              L2F management\
    \ packets\n      0x02            L2F_PPP                PPP tunneled inside L2F\n\
    \      0x03            L2F_SLIP               SLIP tunneled inside L2F\n   If\
    \ a packet is received with a Protocol of L2F_ILLEGAL or any other\n   unrecognized\
    \ value, it MUST be treated as an illegal packet as\n   defined in 4.4.1.\n"
- title: 4.2.5 Sequence Number
  contents:
  - "4.2.5 Sequence Number\n   The Sequence number is present if the S bit in the\
    \ L2F header is set\n   to 1.  This bit MUST be 1 for all L2F management packets.\
    \  It MAY be\n   set to 1 for non-L2F management packets.  If a non-L2F management\n\
    \   packet is received with the S bit set, all future L2F packets sent\n   for\
    \ that MID MUST have the S bit set (and, by implication, be sent\n   using sequence\
    \ numbers).  For instance, the Home Gateway might choose\n   to force sequenced\
    \ packet delivery if it detects an NCP opening for a\n   protocol which can not\
    \ operate with out-of-sequence packets.\n   The Sequence number starts at 0 for\
    \ the first sequenced L2F packet.\n   Each subsequent packet is sent with the\
    \ next increment of the\n   sequence number.  The sequence number is thus a free\
    \ running counter\n   represented modulo 256.  There is distinct Sequence number\
    \ state\n   (i.e., counter) for each distinct MID value.\n   For packets with\
    \ S bit and sequence number, the sequence number is\n   used to protect against\
    \ duplication of packets, as follows:\n   The receiving side of the tunnel records\
    \ the sequence number of each\n   valid L2F packet it receives.  If a received\
    \ packet appears to have a\n   value less than or equal to the last received value,\
    \ the packet MUST\n   be silently discarded.  Otherwise, the packet is accepted\
    \ and the\n   sequence number in the packet recorded as the latest value last\n\
    \   received.\n   For purposes of detecting duplication, a received sequence value\
    \ is\n   considered less than or equal to the last received value if its value\n\
    \   lies in the range of the last value and its 127 successor values.\n   For\
    \ example, if the last received sequence number was 15, then\n   packets with\
    \ sequence numbers 0 through 15, as well as 144 through\n   255, would be considered\
    \ less than or equal to, and would be silently\n   discarded.  Otherwise it would\
    \ be accepted.\n"
- title: 4.2.6 Packet Multiplex ID
  contents:
  - "4.2.6 Packet Multiplex ID\n   The Multiplex ID (\"MID\") identifies a particular\
    \ connection within\n   the tunnel.  Each new connection is assigned a MID currently\
    \ unused\n   within the tunnel.  It is recommended that the MID cycle through\
    \ the\n   entire 16-bit namespace, to reduce aliasing between previous and\n \
    \  current sessions.  A MID value which has been previously used within\n   a\
    \ tunnel, has been closed, and will now be used again, must be\n   considered\
    \ as an entirely new MID, and initialised as such.\n   The MID with value 0 is\
    \ special; it is used to communicate the state\n   of the tunnel itself, as distinct\
    \ from any connection within the\n   tunnel.  Only L2F_PROTO packets may be sent\
    \ using an MID of 0; if any\n   other type is sent on MID 0, the packet is illegal\
    \ and MUST be\n   processed as defined in 4.4.1.\n"
- title: 4.2.7 Client ID
  contents:
  - "4.2.7 Client ID\n   The Client ID (\"CLID\") is used to assist endpoints in demultiplexing\n\
    \   tunnels when the underlying point-to-point substrate lacks an\n   efficient\
    \ or dependable technique for doing so directly.  Using the\n   CLID, it is possible\
    \ to demultiplex multiple tunnels whose packets\n   arrive over the point-to-point\
    \ media interleaved, without requiring\n   media-specific semantics.\n   When\
    \ transmitting the L2F_CONF message (described below), the peer's\n   CLID must\
    \ be communicated via the Assigned_CLID field.  This MUST be\n   a unique non-zero\
    \ value on the sender's side, which is to be expected\n   in the Home Gateway's\
    \ L2F_CONF response, as well as all future non-\n   L2F_CONF packets received.\n\
    \   The CLID value from the last valid L2F_CONF message received MUST be\n   recorded\
    \ and used as the CLID field value for all subsequent packets\n   sent to the\
    \ peer.\n   Packets with an unknown Client ID MUST be silently discarded.\n  \
    \ For the initial packet sent during tunnel establishment, where no\n   L2F_CONF\
    \ has yet been received, the CLID field MUST be set to 0.\n   Thus, during L2F_CONF\
    \ each side is told its CLID value.  All later\n   packets sent, tagged with this\
    \ CLID value, serve as a tag which\n   uniquely identifies this peer.\n"
- title: 4.2.8 Length
  contents:
  - "4.2.8 Length\n   Length is the size in octets of the entire packet, including\
    \ header,\n   all fields present, and payload.  Length does not reflect the\n\
    \   addition of the checksum, if one is present.  The packet should be\n   silently\
    \ discarded if the received packet is shorter than the\n   indicated length. \
    \ Additional bytes present in the packet beyond the\n   indicated length MUST\
    \ be silently ignored.\n"
- title: 4.2.9 Packet Checksum
  contents:
  - "4.2.9 Packet Checksum\n   The Checksum is present if the C bit is present in\
    \ the header flags.\n   It is a 16-bit CRC as used by PPP/HDLC (specifically,\
    \ FCS-16 [3]).\n   Is is applied over the entire packet starting with the first\
    \ byte of\n   L2F flags, through the last byte of payload data.  The checksum\
    \ is\n   then added as two bytes immediately following the last byte of\n   payload\
    \ data.\n"
- title: 4.2.10 Payload Offset
  contents:
  - "4.2.10 Payload Offset\n   The Offset is present if the F bit is set in the header\
    \ flags.  This\n   field specifies the number of bytes past the L2F header at\
    \ which the\n   payload data is expected to start.  If it is 0, or the F bit is\
    \ not\n   set, the first byte following the last byte of L2F header is the\n \
    \  first byte of payload data.\n   It is recommended that data skipped due to\
    \ the payload offset be\n   initialized to 0's.\n   For architectures where it\
    \ is more efficient to have the payload\n   start at an aligned 32-bit boundary\
    \ with respect to the L2F header,\n   it is recommended that the F bit be set,\
    \ and an offset of 0 be used.\n"
- title: 4.2.11 Packet Key
  contents:
  - "4.2.11 Packet Key\n   The Key field is present if the K bit is set in the L2F\
    \ header.  The\n   Key is based on the authentication response last given to the\
    \ peer\n   during tunnel creation (the details of tunnel creation are provided\n\
    \   in the next section).  It serves as a key during the life of a\n   session\
    \ to resist attacks based on spoofing.  If a packet is received\n   in which the\
    \ Key does not match the expected value, the packet MUST\n   be silently discarded.\
    \  Such handling takes precedence over 4.4.1.\n   The Key value is generated by\
    \ taking the 128-bit authentication\n   response from the peer, interpreting it\
    \ as four adjacent 32-bit words\n   in network byte order, XOR'ing these words\
    \ together, and using the\n   resulting 32-bit value as the Key.\n"
- title: 4.2.12 Packet priority
  contents:
  - "4.2.12 Packet priority\n   If the P bit in the L2F header is set, this packet\
    \ is a \"priority\"\n   packet.  When possible for an implementation, a packet\
    \ received with\n   the P bit should be processed in preference to previously\
    \ received\n   unprocessed packets without the P bit.\n   The P bit may be set\
    \ by an implementation based on criteria beyond\n   the scope of this specification.\
    \  However, it is recommended that PPP\n   keepalive traffic, if any, be sent\
    \ with this bit set.\n"
- title: 4.3 L2F Tunnel Establishment
  contents:
  - "4.3 L2F Tunnel Establishment\n   When the point-to-point link is first initiated\
    \ between the NAS and\n   the Home Gateway, the endpoints communicate on MID 0\
    \ prior to\n   providing general L2F services to clients.  This communication\
    \ is\n   used to verify the presence of L2F on the remote end, and to permit\n\
    \   any needed authentication.\n   The protocol for such negotiation is always\
    \ 1, indicating L2F\n   management.  The message itself is structured as a sequence\
    \ of single\n   octets indicating an option, followed by zero or more further\
    \ octets\n   formatted as needed for the option.\n"
- title: 4.3.1 Normal Tunnel Negotiation Sequence
  contents:
  - "4.3.1 Normal Tunnel Negotiation Sequence\n   The establishment sequence is best\
    \ illustrated by a \"typical\"\n   connection sequence.  Detailed description\
    \ of each functions follows,\n   along with descriptions of the handling of exceptional\
    \ conditions.\n   Each packet is described as a source->destination on one line,\
    \ a\n   description of the L2F packet field contents on the next, and the\n  \
    \ contents of the packet's body on following lines.  The exact encoding\n   of\
    \ octets will be described later.\n   Note that this example uses the Key option,\
    \ but does not use the\n   Offset and Checksum options.  The Length field would\
    \ be present,\n   reflecting the actual length of the packets as encoded as an\
    \ octet\n   stream.\n      1. NAS->GW:\n          Proto=L2F, Seq=0, MID=0, CLID=0,\
    \ Key=0\n          L2F_CONF\n              Name: NAS_name\n              Challenge:\
    \ Rnd\n              Assigned_CLID: 22\n   The NAS decides that a tunnel must\
    \ be initiated from the NAS to the\n   GW.  An L2F packet is sent with the Proto\
    \ field indicating an L2F\n   management message is contained.\n   Because the\
    \ tunnel is being initiated, Key is set to 0.  The sequence\n   number starts\
    \ at 0; the MID is 0 to reflect the establishment of the\n   tunnel itself.  Since\
    \ the NAS has not yet received an L2F_CONF, the\n   CLID is set to 0.\n   The\
    \ body of the packet specifies the claimed name of the NAS, and a\n   challenge\
    \ random number which GW will use in authenticating itself as\n   a valid tunnel\
    \ endpoint.  Assigned_CLID is generated to be a value\n   not currently assigned\
    \ out to any other tunnel to any other Home\n   Gateway.\n      2. GW->NAS:\n\
    \          Proto=L2F, Seq=0, MID=0, CLID=22, Key=0\n          L2F_CONF\n     \
    \         Name: GW_name\n              Challenge: Rnd2\n              Assigned_CLID:\
    \ 73\n   The Home Gateway has processed the previous packet, and sends a\n   response.\
    \  The protocol continues to be L2F, with a sequence number 0\n   (each side maintains\
    \ its own sequence number for transmissions).  MID\n   continues to be 0 to reflect\
    \ tunnel establishment.  CLID reflects the\n   Assigned_CLID field of the L2F_CONF\
    \ received.  The Key continues to\n   be 0 during this phase of tunnel establishment.\n\
    \   The body contains the Home Gateway's name, its own random number\n   challenge,\
    \ and its own Assigned_CLID for the NAS to place in the CLID\n   field of future\
    \ packets.  The CLID is generated in an analogous\n   manner to that of the NAS.\
    \  After this, all packets received from the\n   NAS must be tagged with a CLID\
    \ field containing 73, and all packets\n   sent to the NAS must be tagged with\
    \ a CLID field containing 22.\n      3. NAS->GW\n          Proto=L2F, Seq=1, MID=0,\
    \ CLID=73, Key=C(Rnd2)\n          L2F_OPEN\n              Response: C(Rnd2)\n\
    \   The NAS responds with its Key now set to reflect the shared secret.\n   The\
    \ Key is a CHAP-style hash of the random number received; each\n   packet hereafter\
    \ will reflect this calculated value, which serves as\n   a key for the life of\
    \ the tunnel.  Both the Home Gateway and the NAS\n   use such Keys for the life\
    \ of the tunnel.  The Key is a 32-bit\n   representation of the MD5 digest resulting\
    \ from encrypting the shared\n   secret; the full MD5 digest is included in the\
    \ L2F_OPEN response, in\n   the \"response\" field.\n      4. GW->NAS\n      \
    \    Proto=L2F, Seq=1, MID=0, CLID=22, Key=C(Rnd)\n          L2F_OPEN\n      \
    \        Response: C(Rnd)\n   The Home Gateway provides closure of the key from\
    \ the NAS, reflected\n   in both the Key field as well as the \"response\" field.\
    \  The tunnel is\n   now available for clients to be established.\n"
- title: 4.3.2 Normal Client Negotiation Sequence
  contents:
  - "4.3.2 Normal Client Negotiation Sequence\n   This section describes the establishment\
    \ of a Virtual dial-up client\n   on a NAS into a Home Gateway.  It assumes a\
    \ tunnel has been created\n   in the way described in 4.3.1.  The client for this\
    \ example is a PPP\n   client configured for CHAP.\n   Treatment of Checksum,\
    \ Length, and Offset are as in 4.3.1.\n         1. NAS->GW\n             Proto=L2F,\
    \ Seq=2, MID=1, CLID=73, Key=C(Rnd2)\n             L2F_OPEN\n                \
    \ Type: CHAP\n                 Name: CHAP-name\n                 Challenge: Rnd3\n\
    \                 Response: <Value received, presumably C(Rnd3)>\n           \
    \      ID: <ID used in challenge>\n   The NAS has received a call, tried CHAP\
    \ with a challenge value of\n   Rnd3, and found that the client responded.  The\
    \ claimed name lead the\n   NAS to believe it was a Virtual dial-up client hosted\
    \ by the Home\n   Gateway.  The next free MID is allocated, and the information\n\
    \   associated with the CHAP challenge/response is included in the\n   connect\
    \ notification.\n      2. GW->NAS\n          Proto=L2F, Seq=2, MID=1, CLID=22,\
    \ Key=C(Rnd)\n          L2F_OPEN\n   The Home Gateway, by sending back the L2F_OPEN,\
    \ accepts the client.\n      3. NAS->GW\n          Proto=PPP, Seq=0, MID=1, CLID=73,\
    \ Key=C(Rnd2)\n          <Frame follows>\n      4. GW->NAS\n          Proto=PPP,\
    \ Seq=0, MID=1, CLID=22, Key=C(Rnd)\n          <Frame follows>\n   Traffic is\
    \ now free to flow in either direction as sent by the remote\n   client or the\
    \ home site.  The contents is uninterpreted data, HDLC in\n   this case.  Data\
    \ traffic, since it is not the L2F protocol, does not\n   usually use the Seq\
    \ field, which is set to 0 in non-L2F messages (see\n   the S bit in section 4.2.5\
    \ for details on an exception to this).\n"
- title: 4.4 L2F management message types
  contents:
  - "4.4 L2F management message types\n   When an L2F packet's Proto field specifies\
    \ L2F management, the body\n   of the packet is encoded as zero or more options.\
    \  An option is a\n   single octet \"message type\", followed by zero or more\
    \ sub-options.\n   Each sub-option is a single byte sub-option value, and further\
    \ bytes\n   as appropriate for the sub-option.\n   Options in L2F are:\n   Hex\
    \ Value       Abbreviation       Description\n   --------        ------------\
    \       -----------\n    0x00            Invalid           Invalid message\n \
    \   0x01            L2F_CONF          Request configuration\n    0x02        \
    \    L2F_CONF_NAME     Name of peer sending L2F_CONF\n    0x03            L2F_CONF_CHAL\
    \     Random number peer challenges with\n    0x04            L2F_CONF_CLID  \
    \   Assigned_CLID for peer to use\n    0x02            L2F_OPEN          Accept\
    \ configuration\n    0x01            L2F_OPEN_NAME     Name received from client\n\
    \    0x02            L2F_OPEN_CHAL     Challenge client received\n    0x03   \
    \         L2F_OPEN_RESP     Challenge response from client\n    0x04         \
    \   L2F_ACK_LCP1      LCP CONFACK accepted from client\n    0x05            L2F_ACK_LCP2\
    \      LCP CONFACK sent to client\n    0x06            L2F_OPEN_TYPE     Type\
    \ of authentication used\n    0x07            L2F_OPEN_ID       ID associated\
    \ with authentication\n    0x08            L2F_REQ_LCP0      First LCP CONFREQ\
    \ from client\n    0x03            L2F_CLOSE         Request disconnect\n    0x01\
    \            L2F_CLOSE_WHY     Reason code for close\n    0x02            L2F_CLOSE_STR\
    \     ASCII string description\n    0x04            L2F_ECHO          Verify presence\
    \ of peer\n    0x05            L2F_ECHO_RESP     Respond to L2F_ECHO\n"
- title: '4.4.1 L2F message type: Invalid'
  contents:
  - "4.4.1 L2F message type: Invalid\n   If a message is received with this value,\
    \ or any value higher than\n   the last recognized option value, or if an illegal\
    \ packet as defined\n   by other parts of this specification is received, the\
    \ packet is\n   considered invalid.  The packet MUST be discarded, and an L2F_CLOSE\n\
    \   of the entire tunnel MUST be requested.  Upon receipt of an\n   L2F_CLOSE,\
    \ the tunnel itself may be closed.  All other received\n   message MUST be discarded.\
    \  An implementation MAY close the tunnel\n   after an interval of time appropriate\
    \ to the characteristics of the\n   tunnel.\n   Note that packets with an invalid\
    \ Key are discarded, but disconnect\n   is not initiated.  This prevents denial-of-service\
    \ attacks.  Invalid\n   option types within a message MUST be treated as if the\
    \ entire\n   message type was invalid.\n"
- title: 4.4.2 L2F_CONF
  contents:
  - "4.4.2 L2F_CONF\n   The L2F message type is used to establish the tunnel between\
    \ the NAS\n   and the Home Gateway.  MID is always set to 0.  The body of such\
    \ a\n   message starts with the octet 0x01 (L2F_CONF), followed by all three\n\
    \   of the sub-options below.\n   The L2F_CONF_NAME sub-option MUST be present.\
    \  It is encoded as the\n   octet value 0x02, followed by an octet specifying\
    \ a non-zero length,\n   followed by the indicated number of bytes, which are\
    \ interpreted as\n   the sender's ASCII name.\n   The L2F_CONF_CHAL sub-option\
    \ MUST be present.  It is encoded as the\n   octet value 0x03, followed by a non-zero\
    \ octet, followed by a number\n   of bytes specified by this non-zero octet.\n\
    \   The challenge value should be generated using whatever techniques\n   provide\
    \ the highest quality of random numbers available to a given\n   implementation.\n\
    \   The L2F_CONF_CLID sub-option MUST be present.  It is encoded as the\n   octet\
    \ 0x04, followed by four bytes of Assigned_CLID value.  The\n   Assigned_CLID\
    \ value is generated as a non-zero 16-bit integer value\n   unique across all\
    \ tunnels which exist on the sending system.  The\n   least significant two octets\
    \ of Assigned_CLID are set to this value,\n   and the most significant two octets\
    \ MUST be set to 0.\n   The CLID field is sent as 0 in the initial L2F_CONF packet\
    \ from NAS\n   to Home Gateway, and otherwise MUST be sent containing the value\n\
    \   specified in the Assigned_CLID field of the last L2F_CONF message\n   received.\n\
    \   Key MUST be set to 0 in all L2F_CONF packets, and no key field is\n   included\
    \ in the packet.\n   When sent from a NAS to a Home Gateway, the L2F_CONF is the\
    \ initial\n   packet in the conversation.\n   When sent from the Home Gateway\
    \ to the NAS, an L2F_CONF indicates the\n   Home Gateway's recognition of the\
    \ tunnel creation request.  The Home\n   Gateway MUST provide its name and its\
    \ own challenge in the message\n   body.\n   In all packets following the L2F_CONF,\
    \ the Key MUST be set to the\n   CHAP-style hash of the received challenge bytes.\
    \  The CHAP-style hash\n   is done over the concatenation of the low 8 bits of\
    \ the assigned\n   CLID, the secret, and the challenge value.  Generation of the\
    \ 32-bit\n   key value is discussed in section 4.2.11.\n"
- title: 4.4.3 L2F_OPEN, tunnel establishment
  contents:
  - "4.4.3 L2F_OPEN, tunnel establishment\n   The L2F_OPEN message is used to provide\
    \ tunnel setup closure (for a\n   MID of 0) or to establish a client connection\
    \ within a tunnel\n   previously established by L2F_CONF and L2F_OPEN messages\
    \ (MID not\n   equal to 0).  This section describes tunnel establishment; section\n\
    \   4.4.4 following describes clients established within the tunnel.\n   An L2F_OPEN\
    \ for tunnel establishment MUST contain only the sub-option\n   0x03, L2F_OPEN_RESP.\
    \  This option MUST be followed by the octet 0x10,\n   specifying the size of\
    \ the 128-bit MD5 digest resulting from\n   encrypting the challenge value in\
    \ the L2F_CONF, along with the low\n   byte of the Assigned_CLID.  After this\
    \ byte MUST be the sixteen bytes\n   of the generated MD5 digest.\n   If during\
    \ tunnel establishment an L2F_OPEN is received with an\n   incorrect L2F_OPEN_RESP,\
    \ the packet MUST be silently discarded.  It\n   is recommended that such an event\
    \ generate a log event as well.\n"
- title: 4.4.4 L2F_OPEN, client establishment
  contents:
  - "4.4.4 L2F_OPEN, client establishment\n   An L2F_OPEN (with non-zero MID) sent\
    \ from the NAS to the Home Gateway\n   indicates the presence of a new dial-in\
    \ client.  When sent back from\n   the Home Gateway to the NAS, it indicates acceptance\
    \ of the client.\n   This message starts with the octet 0x02.  When sent from\
    \ the NAS, it\n   may contain further sub-options.  When sent from the Home Gateway,\
    \ it\n   may not contain any sub-options.  All further discussion of sub-\n  \
    \ options in this section apply only to the NAS to Home Gateway\n   direction.\n\
    \   The L2F_OPEN_TYPE sub-option MUST be present.  It is encoded as the\n   octet\
    \ 0x06, followed by a single byte describing the type of\n   authentication the\
    \ NAS exchanged with the client in detecting the\n   client's claimed identification.\
    \  Implicit in the authentication type\n   is the encapsulation to be carried\
    \ over the life of the session.  The\n   authentication types are:\n      0x01\
    \ Textual username/password exchange for SLIP\n      0x02 PPP CHAP\n      0x03\
    \ PPP PAP\n      0x04 PPP no authentication\n      0x05 SLIP no authentication\n\
    \   The L2F_OPEN_NAME sub-option is encoded as the octet 0x01, followed\n   by\
    \ an octet specifying the length of the name, followed by the\n   indicated number\
    \ of bytes of the name.  This field MUST be present\n   for any authentication\
    \ type except 0x04 (None).  It MUST contain the\n   name specified in the client's\
    \ authentication response.\n   The L2F_OPEN_CHAL sub-option is encoded as the\
    \ octet 0x02, followed\n   by an octet specifying the length of the challenge\
    \ sent, followed by\n   the challenge itself.  This field is only present for\
    \ CHAP, and MUST\n   contain the challenge value sent to the client by the NAS.\n\
    \   The L2F_OPEN_RESP sub-option is encoded as the octet 0x03, followed\n   by\
    \ an octet specifying the length of the response received, followed\n   by the\
    \ client's response to the challenge.  For CHAP, this field\n   contains the response\
    \ value received by the NAS.  For PAP or textual\n   authentication, it contains\
    \ the clear text password received from the\n   client by the NAS.  This field\
    \ is absent for authentication 0x04\n   \"None\".\n   The L2F_ACK_LCP1 and L2F_ACK_LCP2\
    \ sub-options are encoded as the\n   octets 0x04 and 0x05 respectively, followed\
    \ in either case by two\n   octets in network byte order specifying the length\
    \ of the LCP CONFACK\n   last received from or sent to the client.  Following\
    \ these octets is\n   an exact copy of the CONFACK packet.  L2F_ACK_LCP1 specifies\
    \ a copy\n   of the closing CONFACK received from the client, and L2F_ACK_LCP2\n\
    \   specifies a copy of the closing CONFACK sent to the client by the\n   NAS.\n\
    \   The L2F_REQ_LCP0 sub-option is encoded as the octet 0x08, followed by\n  \
    \ two octets in network byte order specifying the length of the LCP\n   CONFREQ\
    \ initially received from the client.  This may be used by the\n   Home Gateway\
    \ to detect capabilities of the client which were\n   negotiated away while starting\
    \ LCP with the NAS.  Detection of such\n   options may be used by the Home Gateway\
    \ to decide to renegotiate LCP.\n   The L2F_OPEN_ID sub-option is encoded as the\
    \ octet 0x06, followed by\n   a single octet.  This sub-option is only present\
    \ for CHAP; the single\n   octet contains the CHAP Identifier value sent to the\
    \ client during\n   the CHAP challenge.\n   The Home Gateway may choose to ignore\
    \ any sub-option of the L2F_OPEN,\n   and accept the connection anyway.  The Home\
    \ Gateway would then have\n   to undertake its own LCP negotiations and authentication.\
    \  To\n   maximize the transparency of the L2F tunnel, it is recommended that\n\
    \   extra negotiations and authentication be avoided if possible.\n"
- title: 4.4.5 L2F_CLOSE
  contents:
  - "4.4.5 L2F_CLOSE\n   This message is encoded as the byte 0x03.  An L2F_CLOSE may\
    \ be sent\n   by either side of the tunnel at any time.  When sent with MID of\
    \ 0,\n   it indicates the desire to terminate the entire tunnel and all\n   clients\
    \ within the tunnel.  When sent from the Home Gateway in\n   response to an L2F_OPEN,\
    \ it indicates that the Home Gateway has\n   declined the connection.  When sent\
    \ with a non-zero MID, it indicates\n   the termination of that client within\
    \ the tunnel.\n   The L2F_CLOSE_WHY sub-option is encoded as the byte 0x01 followed\n\
    \   four bytes in network byte order specifying a bit mask of reasons for\n  \
    \ the disconnection.  The bits are encoded as:\n      0x00000001 Authentication\
    \ failed\n      0x00000002 Out of resources\n      0x00000004 Administrative intervention\n\
    \      0x00000008 User quota exceeded\n      0x00000010 Protocol error\n     \
    \ 0x00000020 Unknown user\n      0x00000040 Incorrect password\n      0x00000080\
    \ PPP configuration incompatible\n      0x00000100 Wrong multilink PPP destination\n\
    \   Bits in the mask 0xFF000000 are reserved for per-vendor\n   interpretation.\n\
    \   An implementation can choose to not provide status bits even if it\n   detects\
    \ a condition described by one of these bits.  For instance, an\n   implementation\
    \ may choose to not use 0x00000020 due to security\n   considerations, as it can\
    \ be used to probe user name space.\n   The L2F_CLOSE_STR sub-option is encoded\
    \ as the byte 0x02, followed by\n   a two-byte length in network byte order, followed\
    \ by the indicated\n   number of bytes, which are interpreted as descriptive ASCII\
    \ text\n   associated with the disconnection.  This string may be ignored, but\n\
    \   could be recorded in a log to provide detailed or auxiliary\n   information\
    \ associated with the L2F_CLOSE.\n"
- title: 4.4.6 L2F_ECHO
  contents:
  - "4.4.6 L2F_ECHO\n   Transmission of L2F_ECHO messages is optional.  If an implementation\n\
    \   transmits L2F_ECHO messages, it MUST not transmit more than one such\n   request\
    \ each second.  The payload size MUST be 64 bytes or less in\n   length.  It is\
    \ recommended that at least 5 L2F_ECHO messages be sent\n   without response before\
    \ an implementation assumes that its peer has\n   terminated.\n   The L2F_ECHO\
    \ message is encoded as the single byte 0x04.  It may be\n   sent by either side\
    \ once the tunnel is established.  MID MUST be 0.\n   An L2F_ECHO_RESP (documented\
    \ below) MUST be sent back in response.\n"
- title: 4.4.7 L2F_ECHO_RESP
  contents:
  - "4.4.7 L2F_ECHO_RESP\n   All implementations MUST respond to L2F_ECHO, using L2F_ECHO_RESP.\n\
    \   The received packet MUST be sent back verbatim, except that the CLID,\n  \
    \ sequence number, and checksum (if any) MUST be updated, and the\n   L2F_ECHO\
    \ message type changed to an L2F_ECHO_RESP.  Payload data\n   following the 0x04\
    \ octet, if any, MUST be preserved in the response.\n   When an L2F_ECHO_RESP\
    \ is received, the payload data may be used to\n   associate this response with\
    \ a previously sent L2F_ECHO, or the\n   packet may be silently discarded.\n"
- title: 4.5 L2F Message Delivery
  contents:
  - "4.5 L2F Message Delivery\n   L2F is designed to operate over point-to-point unreliable\
    \ links.  It\n   is not designed to provide flow control of the data traffic,\
    \ nor does\n   it provide reliable delivery of this traffic; each protocol tunnel\n\
    \   carried via L2F is expected to manage flow control and retry itself.\n   Thus,\
    \ it is only L2F control messages which must be retransmitted;\n   this process\
    \ is described in this section.\n"
- title: 4.5.1 Sequenced delivery
  contents:
  - "4.5.1 Sequenced delivery\n   All L2F control messages (i.e., those L2F packets\
    \ with a protocol\n   type of 0x01) are transmitted with a sequence number.  The\
    \ sequence\n   number is a per-L2F tunnel free running counter which is incremented\n\
    \   (modulo 256) after each packet is transmitted.  It is used to permit\n   the\
    \ receiving end to detect duplicated or out-of-order packets, and\n   to discard\
    \ such packets.  Section 4.2.5 describes the process in\n   detail.\n"
- title: 4.5.2 Flow control
  contents:
  - "4.5.2 Flow control\n   L2F control messages are expected to be exchanged lock-step.\
    \  Thus,\n   per-client activities can not occur until tunnel setup is complete.\n\
    \   Neither can one client be serviced until the L2F message exchange is\n   complete\
    \ for a previous client.  Thus, it is expected that rarely--if\n   ever--should\
    \ a flow control action be required.  If the input queue\n   of L2F control messages\
    \ reaches an objectionable level for an\n   implementation, the implementation\
    \ may silently discard all messages\n   in the queue to stabilize the situation.\n"
- title: 4.5.3 Tunnel State table
  contents:
  - "4.5.3 Tunnel State table\n   The following enumerates the handling of L2F messages\
    \ for tunnel\n   creation in state table format.  Events name an L2F_ message\
    \ type\n   (the L2F_ portion of the named message is omitted to permit a more\n\
    \   compact table).  A start (\"*\") matches any event not otherwise\n   matched\
    \ for the named state.\n   A NAS starts at initial state Start0, sending a packet\
    \ before waiting\n   for its first event.  A Home Gateway starts at Start1, waiting\
    \ for an\n   initial packet to start service.\n   If an event is not matched for\
    \ a given state, the packet associated\n   with that event is silently discarded.\n\
    \   Tunnel establishment (MID == 0), NAS side.\n      State   Event          \
    \ Action                  New State\n      -----   -----           ------    \
    \              ---------\n      Start0                  Send CONF            \
    \   Start1\n      Start1  CONF            Send OPEN               Start2\n   \
    \   Start1  timeout 1-3     Send CONF               Start1\n      Start1  timeout\
    \ 4       Clean up tunnel         (done)\n      Start2  OPEN            (initiate\
    \ 1st client)   Open1\n      Start2  timeout 1-3     Send OPEN               Start2\n\
    \      Start2  timeout 4       Clean up tunnel         (done)\n      Open1   OPEN\
    \            Send OPEN               Open1\n      Open1   CLOSE           Send\
    \ CLOSE              Close1\n      Open1   no MIDs open    Send CLOSE        \
    \      Close2\n      Close1  CLOSE           Send CLOSE              Close1\n\
    \      Close1  timeout 4       Clean up tunnel         (done)\n      Close2  CLOSE\
    \           Clean up tunnel         (done)\n      Close2  timeout 1-3     Send\
    \ CLOSE              Close2\n      Close2  timeout 4       Clean up tunnel   \
    \      (done)\n   Tunnel establishment (MID == 0), Home Gateway side.\n      State\
    \   Event           Action                  New State\n      -----   -----   \
    \        ------                  ---------\n      Start0  CONF            Send\
    \ CONF               Start1\n      Start1  CONF            Send CONF         \
    \      Start1\n      Start1  OPEN            Send OPEN               Open1\n \
    \     Start1  timeout 4       Clean up tunnel         (done)\n      Open1   OPEN\
    \            Send OPEN               Open1\n      Open1   OPEN (MID > 0)  (1st\
    \ client, below)     Open2\n      Open1   CLOSE           Send CLOSE         \
    \     Close1\n      Open1   timeout 4       Clean up tunnel         (done)\n \
    \     Open2   OPEN (MID > 0)  (below)                 Open2\n      Open2   CLOSE\
    \           Send CLOSE              Close1\n      Close1  CLOSE           Send\
    \ CLOSE              Close1\n      Close1  timeout 4       Clean up tunnel   \
    \      (done)\n"
- title: 4.5.4 Client State table
  contents:
  - "4.5.4 Client State table\n   This table is similar to the previous one, but enumerates\
    \ the states\n   for a client connection within a tunnel in the opened state from\n\
    \   4.5.3.  As this sequence addresses clients, MID will be non-zero.\n   Client\
    \ establishment (MID != 0), NAS side.\n      State   Event           Action  \
    \                New State\n      -----   -----           ------             \
    \     ---------\n      Start0                  Send OPEN               Start1\n\
    \      Start1  OPEN            (enable forwarding)     Open1\n      Start1  CLOSE\
    \           Clean up MID            (MID done)\n      Start1  timeout 1-3    \
    \ Send OPEN               Start1\n      Start1  timeout 4       Clean up MID \
    \           (MID done)\n      Start1  client done     Send CLOSE             \
    \ Close2\n      Open1   OPEN            (no change)             Open1\n      Open1\
    \   CLOSE           Send CLOSE              Close1\n      Open1   client done\
    \     Send CLOSE              Close2\n      Close1  CLOSE           Send CLOSE\
    \              Close1\n      Close1  timeout 4       Clean up MID            (MID\
    \ done)\n      Close2  CLOSE           Clean up MID            (MID done)\n  \
    \    Close2  timeout 1-3     Send CLOSE              Close2\n      Close2  timeout\
    \ 4       Clean up MID            (MID done)\n   Client establishment (MID !=\
    \ 0), Home Gateway side.\n      State   Event           Action               \
    \   New State\n      -----   -----           ------                  ---------\n\
    \      Start0  OPEN            Send OPEN               Open1\n      Start0  OPEN\
    \ (fail)     Send CLOSE              Close3\n      Open1   OPEN            Send\
    \ OPEN               Open1\n      Open1   CLOSE           Send CLOSE         \
    \     Close1\n      Open1   client done     Send CLOSE              Close2\n \
    \     Close1  CLOSE           Send CLOSE              Close1\n      Close1  timeout\
    \ 4       Clean up MID            (MID done)\n      Close2  CLOSE           Clean\
    \ up MID            (MID done)\n      Close2  timeout 1-3     Send CLOSE     \
    \         Close2\n      Close2  timeout 4       Clean up MID            (MID done)\n\
    \      Close3  OPEN            Send CLOSE              Close3\n      Close3  timeout\
    \ 4       Clean up MID            (MID done)\n"
- title: 5. Protocol Considerations
  contents:
  - "5. Protocol Considerations\n   Several aspects of operation over L2F, while outside\
    \ the realm of the\n   protocol description itself, serve to clarify the operation\
    \ of L2F.\n"
- title: 5.1 PPP Features
  contents:
  - "5.1 PPP Features\n   Because L2F in operation carries uninterpreted frames, it\
    \ permits\n   operation of features without explicit knowledge of these features.\n\
    \   For instance, if a PPP session is carried, L2F is simply transporting\n  \
    \ HDLC frames.  The two PPP endpoints can negotiate higher-level\n   features,\
    \ such as reliable link, compression, multi-link, or\n   encryption.  These features\
    \ then operate between the two PPP\n   endpoints (the dial-in client on one end,\
    \ and the Home Gateway on the\n   other), with L2F continuing to simply ship HDLC\
    \ frames back and\n   forth.\n   For similar reasons, PPP echo requests, NCP configuration\n\
    \   negotiation, and even termination requests, are all simply tunneled\n   HDLC\
    \ frames.\n"
- title: 5.2 Termination
  contents:
  - "5.2 Termination\n   As L2F simply tunnels link-layer frames, it does not detect\
    \ frames\n   like PPP TERMREQ.  L2F termination in these scenarios is driven from\n\
    \   a protocol endpoint; for instance, if a Home Gateway receives a\n   TERMREQ,\
    \ its action will be to \"hang up\" the PPP session.  It is the\n   responsibility\
    \ of the L2F implementation at the Home Gateway to\n   convert a \"hang up\" into\
    \ an L2F_CLOSE action, which will shut down\n   client's session in the tunnel\
    \ cleanly.  L2F_CLOSE_WHY and\n   L2F_CLOSE_STR may be included to describe the\
    \ reason for the\n   shutdown.\n"
- title: 5.3 Extended Authentication
  contents:
  - "5.3 Extended Authentication\n   L2F is compatible with both PAP and CHAP protocols.\
    \  SLIP does not\n   provide authentication within the protocol itself, and thus\
    \ requires\n   an ASCII exchange of username and password before SLIP is started.\n\
    \   L2F is compatible with this mode of operation as well.\n   One-time password\
    \ cards have become very common.  To the extent the\n   NAS can capture and forward\
    \ the one-time password, L2F operation is\n   compatible with password cards.\
    \  For the most general solution, an\n   arbitrary request/response exchange must\
    \ be supported.  In an L2F\n   environment, the protocol must be structured so\
    \ that the NAS can\n   detect the apparent identity of the user and establish\
    \ a tunnel\n   connection to the Home Gateway, where the arbitrary exchange can\n\
    \   occur.\n"
- title: 5.4 MNP4 and Apple Remote Access Protocol
  contents:
  - "5.4 MNP4 and Apple Remote Access Protocol\n   L2F appears compatible with Apple's\
    \ ARAP protocol.  Its operation\n   under L2F has not been described simply because\
    \ this experimental RFC\n   does not have a corresponding implementation of such\
    \ operation.\n"
- title: 5.5 Operation of IP and UDP
  contents:
  - "5.5 Operation of IP and UDP\n   L2F tries to be self-describing, operating at\
    \ a level above the\n   particular media over which it is carried.  However, some\
    \ details of\n   its connection to media are required to permit interoperable\n\
    \   implementations.  This section describes the issues which have been\n   found\
    \ when operating L2F over IP and UDP.\n   L2F uses the well-known UDP port 1701\
    \ [4].  The entire L2F packet,\n   including payload and L2F header, is sent within\
    \ a UDP datagram.  The\n   source and destination ports are the same (1701), with\
    \ demultiplexing\n   being achieved using CLID values.  It is legal for the source\
    \ IP\n   address of a given CLID to change over the life of a connection, as\n\
    \   this may correspond to a peer with multiple IP interfaces responding\n   to\
    \ a network topology change.  Responses should reflect the last\n   source IP\
    \ address for that CLID.\n   IP fragmentation may occur as the L2F packet travels\
    \ over the IP\n   substrate.  L2F makes no special efforts to optimize this. \
    \ A NAS\n   implementation MAY cause its LCP to negotiate for a specific MRU,\n\
    \   which could optimize for NAS environments in which the MTUs of the\n   path\
    \ over which the L2F packets are likely to travel have a\n   consistent value.\n"
- title: 6.0 Acknowledgments
  contents:
  - "6.0 Acknowledgments\n   L2F uses a packet format inspired by GRE [5].  Thanks\
    \ to Fred Baker\n   for consultation, Dave Carrel for consulting on security aspects,\
    \ and\n   to Paul Traina for philosophical guidance.\n"
- title: 7.0 References
  contents:
  - "7.0 References\n   [1] Romkey, J., \"A Nonstandard for Transmission of IP Datagrams\
    \ over\n       Serial Lines: SLIP\", RFC 1055, June 1988.\n   [2] Simpson, W.,\
    \ \"The Point-to-Point Protocol (PPP)\", STD 51,\n       RFC 1661, July 1994.\n\
    \   [3] Simpson, W., \"PPP in HDLC-like Framing\", STD 51,, RFC 1662,\n      \
    \ July 1994.\n   [4] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2,\
    \ RFC 1700,\n       October 1994.\n   [5] Hanks, S., Li, T., Farinacci, D., and\
    \ P. Traina, \"Generic Routing\n       Encapsulation (GRE)\", RFC 1701, October\
    \ 1994.\n"
- title: 8.0 Security Considerations
  contents:
  - "8.0 Security Considerations\n   Security issues are discussed in Section 3.1.\n"
- title: 9.0 Authors' Addresses
  contents:
  - "9.0 Authors' Addresses\n   Tim Kolar\n   Cisco Systems\n   170 West Tasman Drive\n\
    \   San Jose CA 95134-1706\n   EMail: tkolar@cisco.com\n   Morgan Littlewood\n\
    \   Cisco Systems\n   170 West Tasman Drive\n   San Jose CA 95134-1706\n   EMail:\
    \ littlewo@cisco.com\n   Andy Valencia\n   Cisco Systems\n   170 West Tasman Drive\n\
    \   San Jose CA 95134-1706\n   EMail: valencia@cisco.com\n"
- title: 9.0  Full Copyright Statement
  contents:
  - "9.0  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
