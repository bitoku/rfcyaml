- title: __initial_text__
  contents:
  - "         Internet Email to Support Diverse Service Environments\n           \
    \                (Lemonade) Profile\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a profile (a set of required extensions,\n\
    \   restrictions, and usage modes) of the IMAP and mail submission\n   protocols.\
    \  This profile allows clients (especially those that are\n   constrained in memory,\
    \ bandwidth, processing power, or other areas)\n   to efficiently use IMAP and\
    \ Submission to access and submit mail.\n   This includes the ability to forward\
    \ received mail without needing to\n   download and upload the mail, to optimize\
    \ submission, and to\n   efficiently resynchronize in case of loss of connectivity\
    \ with the\n   server.\n   The Internet Email to Support Diverse Service Environments\
    \ (Lemonade)\n   profile relies upon extensions to IMAP and Mail Submission protocols;\n\
    \   specifically, the URLAUTH and CATENATE IMAP protocol (RFC 3501)\n   extensions\
    \ and the BURL extension to the SUBMIT protocol (RFC 4409).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Forward without Download ........................................3\n    \
    \  2.1. Motivations ................................................3\n      2.2.\
    \ Message Sending Overview ...................................4\n      2.3. Traditional\
    \ Strategy .......................................4\n      2.4. Step-by-Step Description\
    \ ...................................5\n           2.4.1. Message Assembly Using\
    \ IMAP CATENATE Extension ......6\n           2.4.2. Message Assembly Using SMTP\
    \ CHUNKING and\n                  BURL Extensions ....................................10\n\
    \      2.5. Normative Statements Related to Forward without Download ..14\n  \
    \    2.6. Security Considerations for \"pawn-tickets\" ................14\n  \
    \    2.7. The fcc Problem ...........................................15\n    \
    \  2.8. Registration of $Forwarded IMAP Keyword ...................15\n   3. Message\
    \ Submission .............................................15\n      3.1. Pipelining\
    \ ................................................16\n      3.2. DSN Support ...............................................16\n\
    \      3.3. Message Size Declaration ..................................16\n  \
    \    3.4. Enhanced Status Code Support ..............................16\n    \
    \  3.5. TLS .......................................................16\n   4. Quick\
    \ Resynchronization ........................................16\n   5. Additional\
    \ IMAP Extensions .....................................17\n   6. Summary of the\
    \ Required IMAP and SMTP Extensions ...............17\n   7. Future work ....................................................18\n\
    \   8. Security Considerations ........................................18\n  \
    \    8.1. Confidentiality Protection of Submitted Messages ..........19\n    \
    \  8.2. TLS .......................................................19\n   9. References\
    \ .....................................................20\n      9.1. Normative\
    \ References ......................................20\n      9.2. Informative\
    \ References ....................................21\n   10. Acknowledgements ..............................................21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Lemonade provides enhancements to Internet email to support\
    \ diverse\n   service environments.\n   This document describes the Lemonade profile,\
    \ which includes:\n      -  \"forward without download\", which describes exchanges\
    \ between\n         Lemonade clients and servers to allow new email messages to\
    \ be\n         submitted incorporating content that resides on locations\n   \
    \      external to the client.\n      -  Quick mailbox resynchronization using\
    \ [CONDSTORE].\n      -  Several IMAP and SMTP extensions that save bandwidth\
    \ and/or\n         number of round-trips required to send/receive data.\n   The\
    \ organization of this document is as follows.  Section 2 describes\n   \"forward\
    \ without download\".  Section 3 describes additional SMTP\n   extensions that\
    \ must be supported by all Lemonade Submission servers.\n   Section 4 describes\
    \ IMAP quick resynchronization.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   In examples, \"M:\", \"I:\", and\
    \ \"S:\" indicate lines sent by the client\n   messaging user agent, IMAP e-mail\
    \ server, and SMTP submit server,\n   respectively.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in [RFC2119].\n   All examples in this document\
    \ are optimized for Lemonade use and\n   might not represent examples of proper\
    \ protocol usage for a general\n   use Submit/IMAP client.  In particular, examples\
    \ assume that Lemonade\n   Submit and IMAP servers support all Lemonade extensions\
    \ described in\n   this document, so they don't show how to deal with absence\
    \ of an\n   extension.\n"
- title: 2.  Forward without Download
  contents:
  - '2.  Forward without Download

    '
- title: 2.1.  Motivations
  contents:
  - "2.1.  Motivations\n   The advent of client/server email using the [RFC3501],\
    \ [RFC2821], and\n   [SUBMIT] protocols has changed what formerly were local disk\n\
    \   operations into repetitive network data transmissions.\n   Lemonade \"forward\
    \ without download\" makes use of the [BURL] SUBMIT\n   extension to enable access\
    \ to external sources during the submission\n   of a message.  In combination\
    \ with the IMAP [URLAUTH] extension,\n   inclusion of message parts or even entire\
    \ messages from the IMAP mail\n   store is possible with a minimal trust relationship\
    \ between the IMAP\n   and SMTP SUBMIT servers.\n   Lemonade \"forward without\
    \ download\" has the advantage of maintaining\n   one submission protocol, and\
    \ thus avoids the risk of having multiple\n   parallel and possibly divergent\
    \ mechanisms for submission.  The\n   client can use Submit/SMTP [SUBMIT] extensions\
    \ without these being\n   added to IMAP.  Furthermore, by keeping the details\
    \ of message\n   submission in the SMTP SUBMIT server, Lemonade \"forward without\n\
    \   download\" can work with other message retrieval protocols such as\n   Post\
    \ Office Protocol (POP), Network News Transfer Protocol (NNTP), or\n   whatever\
    \ else may be designed in the future.\n"
- title: 2.2.  Message Sending Overview
  contents:
  - "2.2.  Message Sending Overview\n   The act of sending an email message can be\
    \ thought of as involving\n   multiple steps: initiation of a new draft, draft\
    \ editing, message\n   assembly, and message submission.\n   Initiation of a new\
    \ draft and draft editing takes place in the Mail\n   User Agent (MUA).  Frequently,\
    \ users choose to save more complex\n   messages on an [RFC3501] server (via the\
    \ APPEND command with the\n   \\Draft flag) for later recall by the MUA and resumption\
    \ of the\n   editing process.\n   Message assembly is the process of producing\
    \ a complete message from\n   the final revision of the draft and external sources.\
    \  At assembly\n   time, external data is retrieved and inserted in the message.\n\
    \   Message submission is the process of inserting the assembled message\n   into\
    \ the [RFC2821] infrastructure, typically using the [SUBMIT]\n   protocol.\n"
- title: 2.3.  Traditional Strategy
  contents:
  - "2.3.  Traditional Strategy\n   Traditionally, messages are initiated, edited,\
    \ and assembled entirely\n   within an MUA, although drafts may be saved to an\
    \ [RFC3501] server\n   and later retrieved from the server.  The completed text\
    \ is then\n   transmitted to a Message Submission Agent (MSA) for delivery.\n\
    \   There is often no clear boundary between the editing and assembly\n   process.\
    \  If a message is forwarded, its content is often retrieved\n   immediately and\
    \ inserted into the message text.  Similarly, when\n   external content is inserted\
    \ or attached, the content is usually\n   retrieved immediately and made part\
    \ of the draft.\n   As a consequence, each save of a draft and subsequent retrieve\
    \ of the\n   draft transmits that entire (possibly large) content, as does message\n\
    \   submission.\n   In the past, this was not much of a problem, because drafts,\
    \ external\n   data, and the message submission mechanism were typically located\
    \ on\n   the same system as the MUA.  The most common problem was running out\n\
    \   of disk quota.\n"
- title: 2.4.  Step-by-Step Description
  contents:
  - "2.4.  Step-by-Step Description\n   The model distinguishes among a Mail User\
    \ Agent (MUA), an IMAP4Rev1\n   Server ([RFC3501]), and a SMTP submit server ([SUBMIT]),\
    \ as\n   illustrated in Figure 1.\n        +--------------------+            \
    \   +--------------+\n        |                    | <------------ |         \
    \     |\n        |     MUA (M)        |               | IMAPv4Rev1   |\n     \
    \   |                    |               |  Server      |\n        |         \
    \           | ------------> | (Server I)   |\n        +--------------------+ \
    \              +--------------+\n               ^    |                       \
    \       ^     |\n               |    |                              |     |\n\
    \               |    |                              |     |\n               |\
    \    |                              |     |\n               |    |           \
    \                   |     |\n               |    |                           \
    \   |     |\n               |    |                              |     v\n    \
    \           |    |                        +--------------+\n               | \
    \   |----------------------> |   SMTP       |\n               |              \
    \               |   Submit     |\n               |-----------------------------|\
    \   Server     |\n                                             |  (Server S) \
    \ |\n                                             +--------------+\n         \
    \    Figure 1:  Lemonade \"forward without download\"\n   Lemonade \"forward without\
    \ download\" allows a Messaging User Agent to\n   compose and forward an e-mail\
    \ combining fragments that are located in\n   an IMAP server, without having to\
    \ download these fragments to the\n   client.\n   There are two ways to perform\
    \ \"forward without download\", based on\n   where the message assembly takes\
    \ place.  The first uses an extended\n   APPEND command [CATENATE] to edit a draft\
    \ message in the message\n   store and cause the message assembly on the IMAP\
    \ server.  The second\n   uses a succession of BURL and BDAT commands to submit\
    \ and assemble\n   (through concatenation) message data from the client and external\n\
    \   data fetched from the provided URL.  The two subsequent sections\n   provide\
    \ step-by-step instructions on how \"forward without download\"\n   is achieved.\n"
- title: 2.4.1.  Message Assembly Using IMAP CATENATE Extension
  contents:
  - "2.4.1.  Message Assembly Using IMAP CATENATE Extension\n   In the [BURL]/[CATENATE]\
    \ variant of the Lemonade \"forward without\n   download\" strategy, messages\
    \ are initially composed and edited within\n   an MUA.  The [CATENATE] extension\
    \ to [RFC3501] is then used to create\n   the messages on the IMAP server by transmitting\
    \ new text and\n   assembling them.  The [UIDPLUS] IMAP extension is used by the\
    \ client\n   in order to learn the Unique Identifier (UID) of the created\n  \
    \ messages.  Finally, a [URLAUTH] format URL is given to a [SUBMIT]\n   server\
    \ for submission using the [BURL] extension.\n   The flow involved to support\
    \ such a use case consists of:\n      M: {to I -- Optional} The client connects\
    \ to the IMAP server,\n      optionally starts TLS (if data confidentiality is\
    \ required),\n      authenticates, opens a mailbox (\"INBOX\" in the example below)\
    \ and\n      fetches body structures (See [RFC3501]).\n      Example:\n      \
    \      M: A0051 UID FETCH 25627 (UID BODYSTRUCTURE)\n            I: * 161 FETCH\
    \ (UID 25627 BODYSTRUCTURE ((\"TEXT\" \"PLAIN\"\n               (\"CHARSET\" \"\
    US-ASCII\") NIL NIL \"7BIT\" 1152 23)(\n               \"TEXT\" \"PLAIN\" (\"\
    CHARSET\" \"US-ASCII\" \"NAME\"\n               \"trip.txt\")\n              \
    \ \"<960723163407.20117h@washington.example.com>\"\n               \"Your trip\
    \ details\" \"BASE64\" 4554 73) \"MIXED\"))\n            I: A0051 OK completed\n\
    \      M: {to I} The client invokes CATENATE (See [CATENATE] for details\n   \
    \   of the semantics and steps) -- this allows the MUA to create\n      messages\
    \ on the IMAP server using new data combined with one or\n      more message parts\
    \ already present on the IMAP server.\n      Note that the example for this step\
    \ doesn't use the LITERAL+\n      [LITERAL+] extension.  Without LITERAL+, the\
    \ new message is\n      constructed using 3 round-trips.  If LITERAL+ is used,\
    \ the new\n      message can be constructed using one round-trip.\n         M:\
    \ A0052 APPEND Sent FLAGS (\\Seen $MDNSent)\n            CATENATE (TEXT {475}\n\
    \         I: + Ready for literal data\n         M: Message-ID: <419399E1.6000505@caernarfon.example.org>\n\
    \         M: Date: Thu, 12 Nov 2004 16:57:05 +0000\n         M: From: Bob Ar <bar@example.org>\n\
    \         M: MIME-Version: 1.0\n         M: To: foo@example.net\n         M: Subject:\
    \ About our holiday trip\n         M: Content-Type: multipart/mixed;\n       \
    \  M:     boundary=\"------------030308070208000400050907\"\n         M:\n   \
    \      M: --------------030308070208000400050907\n         M: Content-Type: text/plain;\
    \ format=flowed\n         M:\n         M: Our travel agent has sent the updated\
    \ schedule.\n         M:\n         M: Cheers,\n         M: Bob\n         M: --------------030308070208000400050907\n\
    \         M:  URL \"/INBOX;UIDVALIDITY=385759045/;\n            UID=25627/;Section=2.MIME\"\
    \ URL \"/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2\" TEXT\
    \ {44}\n         I: + Ready for literal data\n         M:\n         M: --------------030308070208000400050907--\n\
    \         M: )\n         I: A0052 OK [APPENDUID 387899045 45] CATENATE Completed\n\
    \      M: {to I} The client uses GENURLAUTH command to request a URLAUTH\n   \
    \   URL (see [URLAUTH]).\n      I: {to M} The IMAP server returns a URLAUTH URL\
    \ suitable for later\n      retrieval with URLFETCH (see [URLAUTH] for details\
    \ of the\n      semantics and steps).\n         M: A0054 GENURLAUTH \"imap://bob.ar@example.org/Sent;\n\
    \            UIDVALIDITY=387899045/;uid=45;expire=2005-10-\n            28T23:59:59Z;urlauth=submit+bob.ar\"\
    \ INTERNAL\n         I: * GENURLAUTH \"imap://bob.ar@example.org/Sent;\n     \
    \       UIDVALIDITY=387899045/;uid=45;expire=\n            2005-10-28T23:59:59Z;urlauth=submit+bob.ar:\n\
    \            internal:91354a473744909de610943775f92038\"\n         I: A0054 OK\
    \ GENURLAUTH completed\n      M: {to S} The client connects to the mail submission\
    \ server and\n      starts a new mail transaction.  It uses BURL to let the SMTP\n\
    \      submit server fetch the content of the message from the IMAP\n      server.\
    \  (See [BURL] for details of the semantics and steps.)\n      This allows the\
    \ MUA to authorize the SMTP submit server to access\n      the message composed\
    \ as a result of the CATENATE step.  Note that\n      the second EHLO command\
    \ is required after a successful STARTTLS\n      command.  Also note that there\
    \ might be a third required EHLO\n      command if the second EHLO response doesn't\
    \ list any BURL options.\n      Section 2.4.2 demonstrates this.\n         S:\
    \ 220 owlry.example.org ESMTP\n         M: EHLO potter.example.org\n         S:\
    \ 250-owlry.example.com\n         S: 250-8BITMIME\n         S: 250-BINARYMIME\n\
    \         S: 250-PIPELINING\n         S: 250-BURL imap\n         S: 250-CHUNKING\n\
    \         S: 250-AUTH PLAIN\n         S: 250-DSN\n         S: 250-SIZE 10240000\n\
    \         S: 250-STARTTLS\n         S: 250 ENHANCEDSTATUSCODES\n         M: STARTTLS\n\
    \         S: 220 Ready to start TLS\n         ...TLS negotiation, subsequent data\
    \ is encrypted...\n         M: EHLO potter.example.org\n         S: 250-owlry.example.com\n\
    \         S: 250-8BITMIME\n         S: 250-BINARYMIME\n         S: 250-PIPELINING\n\
    \         S: 250-BURL imap\n         S: 250-CHUNKING\n         S: 250-AUTH PLAIN\n\
    \         S: 250-DSN\n         S: 250-SIZE 10240000\n         S: 250 ENHANCEDSTATUSCODES\n\
    \         M: AUTH PLAIN aGFycnkAaGFycnkAYWNjaW8=\n         S: 235 2.7.0 PLAIN\
    \ authentication successful.\n         M: MAIL FROM:<bob.ar@example.org>\n   \
    \      S: 250 2.5.0 Address Ok.\n         M: RCPT TO:<foo@example.net>\n     \
    \    S: 250 2.1.5 foo@example.net OK.\n         M: BURL imap://bob.ar@example.org/Sent;UIDVALIDITY=387899045/;\n\
    \            uid=45/;urlauth=submit+bar:internal:\n            91354a473744909de610943775f92038\
    \ LAST\n      S: {to I} The mail submission server uses URLFETCH to fetch the\n\
    \      message to be sent.  (See [URLAUTH] for details of the semantics\n    \
    \  and steps.  The so-called \"pawn-ticket\" authorization mechanism\n      uses\
    \ a URI that contains its own authorization credentials.)\n      I: {to S} Provides\
    \ the message composed as a result of the\n      CATENATE step.\n      Mail submission\
    \ server opens IMAP connection to the IMAP server:\n         I: * OK [CAPABILITY\
    \ IMAP4REV1 STARTTLS NAMESPACE LITERAL+\n            CATENATE URLAUTH UIDPLUS\
    \ CONDSTORE IDLE] imap.example.com\n            IMAP server ready\n         S:\
    \ a000 STARTTLS\n         I: a000 Start TLS negotiation now\n         ...TLS negotiation,\
    \ if successful - subsequent data\n            is encrypted...\n         S: a001\
    \ LOGIN submitserver secret\n         I: a001 OK submitserver logged in\n    \
    \     S: a002 URLFETCH \"imap://bob.ar@example.org/Sent;\n            UIDVALIDITY=387899045/;uid=45/;urlauth=submit+bob.ar:\n\
    \            internal:91354a473744909de610943775f92038\"\n         I: * URLFETCH\
    \ \"imap://bob.ar@example.org/Sent;\n            UIDVALIDITY=387899045/;uid=45/;urlauth=submit+bob.ar:\n\
    \            internal:91354a473744909de610943775f92038\" {15065}\n         ...message\
    \ body follows...\n         S: a002 OK URLFETCH completed\n         I: a003 LOGOUT\n\
    \         S: * BYE See you later\n         S: a003 OK Logout successful\n    \
    \  Note that if the IMAP server doesn't send CAPABILITY response code\n      in\
    \ the greeting, the mail submission server must issue the\n      CAPABILITY command\
    \ to learn about supported IMAP extensions as\n      described in RFC 3501.\n\
    \      Also, if data confidentiality is not required, the mail submission\n  \
    \    server may omit the STARTTLS command before issuing the LOGIN\n      command.\n\
    \      S: {to M} Submission server assembles the complete message, and if\n  \
    \    the assembly succeeds, it returns OK to the MUA:\n         S: 250 2.5.0 Ok.\n\
    \      M: {to I} The client marks the message containing the forwarded\n     \
    \ attachment on the IMAP server.\n         M: A0053 UID STORE 25627 +FLAGS.SILENT\
    \ ($Forwarded)\n         I: * 215 FETCH (UID 25627 MODSEQ (12121231000))\n   \
    \      I: A0053 OK STORE completed\n      Note: the UID STORE command shown above\
    \ will only work if the\n      marked message is in the currently selected mailbox;\
    \ otherwise, it\n      requires a SELECT.  This command can be omitted.  The untagged\n\
    \      FETCH response is due to [CONDSTORE].  The $Forwarded IMAP keyword\n  \
    \    is described in Section 2.8.\n"
- title: 2.4.2.  Message Assembly Using SMTP CHUNKING and BURL Extensions
  contents:
  - "2.4.2.  Message Assembly Using SMTP CHUNKING and BURL Extensions\n   In the [BURL]/[CHUNKING]\
    \ variant of the Lemonade \"forward without\n   download\" strategy, messages\
    \ are initially composed and edited within\n   an MUA.  During submission [SUBMIT],\
    \ BURL [BURL] and BDAT [CHUNKING]\n   commands are used to create the messages\
    \ from multiple parts.  New\n   body parts are supplied using BDAT commands, while\
    \ existing body\n   parts are referenced using [URLAUTH] format URLs in BURL commands.\n\
    \   The flow involved to support such a use case consists of:\n      M: {to I\
    \ -- Optional} The client connects to the IMAP server,\n      optionally starts\
    \ TLS (if data confidentiality is required),\n      authenticates, opens a mailbox\
    \ (\"INBOX\" in the example below), and\n      fetches body structures (see [RFC3501]).\n\
    \      Example:\n            M: A0051 UID FETCH 25627 (UID BODYSTRUCTURE)\n  \
    \          I: * 161 FETCH (UID 25627 BODYSTRUCTURE ((\"TEXT\" \"PLAIN\"\n    \
    \           (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\" 1152 23)(\n          \
    \     \"TEXT\" \"PLAIN\" (\"CHARSET\" \"US-ASCII\" \"NAME\"\n               \"\
    trip.txt\")\n               \"<960723163407.20117h@washington.example.com>\"\n\
    \               \"Your trip details\" \"BASE64\" 4554 73) \"MIXED\"))\n      \
    \      I: A0051 OK completed\n      M: {to I} The client uses GENURLAUTH command\
    \ to request URLAUTH\n      URLs (see [URLAUTH]) referencing pieces of the message\
    \ to be\n      assembled.\n      I: {to M} The IMAP server returns URLAUTH URLs\
    \ suitable for later\n      retrieval with URLFETCH (see [URLAUTH] for details\
    \ of the\n      semantics and steps).\n         M: A0054 GENURLAUTH \"imap://bob.ar@example.org/INBOX;\n\
    \            UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar\"\
    \n            INTERNAL \"imap://bob.ar@example.org/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2;\n\
    \            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar\" INTERNAL\n  \
    \       I: * GENURLAUTH \"imap://bob.ar@example.org/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n\
    \            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n            internal:A0DEAD473744909de610943775f9BEEF\"\
    \n            \"imap://bob.ar@example.org/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2;\n\
    \            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n            internal:BEEFA0DEAD473744909de610943775f9\"\
    \n         I: A0054 OK GENURLAUTH completed\n      M: {to S} The client connects\
    \ to the mail submission server and\n      starts a new mail transaction.  It\
    \ uses BURL to instruct the SMTP\n      submit server to fetch from the IMAP server\
    \ pieces of the message\n      to be sent (see [BURL] for details of the semantics\
    \ and steps).\n      Note that the second EHLO command is required after a successful\n\
    \      STARTTLS command.  The third EHLO command is required if and only\n   \
    \   if the second EHLO response doesn't list any BURL options.  See\n      Section\
    \ 2.4.1 for an example of submission where the third EHLO\n      command/response\
    \ is not present.\n         S: 220 owlry.example.org ESMTP\n         M: EHLO potter.example.org\n\
    \         S: 250-owlry.example.com\n         S: 250-8BITMIME\n         S: 250-BINARYMIME\n\
    \         S: 250-PIPELINING\n         S: 250-BURL\n         S: 250-CHUNKING\n\
    \         S: 250-AUTH DIGEST-MD5\n         S: 250-DSN\n         S: 250-SIZE 10240000\n\
    \         S: 250-STARTTLS\n         S: 250 ENHANCEDSTATUSCODES\n         M: STARTTLS\n\
    \         S: 220 Ready to start TLS\n         ...TLS negotiation, subsequent data\
    \ is encrypted...\n         M: EHLO potter.example.org\n         S: 250-owlry.example.com\n\
    \         S: 250-8BITMIME\n         S: 250-BINARYMIME\n         S: 250-PIPELINING\n\
    \         S: 250-BURL\n         S: 250-CHUNKING\n         S: 250-AUTH DIGEST-MD5\
    \ CRAM-MD5 PLAIN EXTERNAL\n         S: 250-DSN\n         S: 250-SIZE 10240000\n\
    \         S: 250 ENHANCEDSTATUSCODES\n         M: AUTH PLAIN aGFycnkAaGFycnkAYWNjaW8=\n\
    \         S: 235 2.7.0 PLAIN authentication successful.\n         M: EHLO potter.example.org\n\
    \         S: 250-owlry.example.com\n         S: 250-8BITMIME\n         S: 250-BINARYMIME\n\
    \         S: 250-PIPELINING\n         S: 250-BURL imap imap://imap.example.org\n\
    \         S: 250-CHUNKING\n         S: 250-AUTH DIGEST-MD5 CRAM-MD5 PLAIN EXTERNAL\n\
    \         S: 250-DSN\n         S: 250-SIZE 10240000\n         S: 250 ENHANCEDSTATUSCODES\n\
    \         M: MAIL FROM:<bob.ar@example.org> BODY=BINARY\n         S: 250 2.5.0\
    \ Address Ok.\n         M: RCPT TO:<foo@example.net>\n         S: 250 2.1.5 foo@example.net\
    \ OK.\n         M: BDAT 475\n         M: Message-ID: <419399E1.6000505@caernarfon.example.org>\n\
    \         M: Date: Thu, 12 Nov 2004 16:57:05 +0000\n         M: From: Bob Ar <bar@example.org>\n\
    \         M: MIME-Version: 1.0\n         M: To: foo@example.net\n         M: Subject:\
    \ About our holiday trip\n         M: Content-Type: multipart/mixed;\n       \
    \  M:     boundary=\"------------030308070208000400050907\"\n         M:\n   \
    \      M: --------------030308070208000400050907\n         M: Content-Type: text/plain;\
    \ format=flowed\n         M:\n         M: Our travel agent has sent the updated\
    \ schedule.\n         M:\n         M: Cheers,\n         M: Bob\n         M: --------------030308070208000400050907\n\
    \         S: 250 2.5.0 OK\n         M: BURL imap://bob.ar@example.org/INBOX;\n\
    \            UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n\
    \            internal:A0DEAD473744909de610943775f9BEEF\n         S: 250 2.5.0\
    \ OK\n         M: BURL imap://bob.ar@example.org/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2;\n\
    \            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n            internal:BEEFA0DEAD473744909de610943775f9\n\
    \         S: 250 2.5.0 OK\n         M: BDAT 44 LAST\n         M:\n         M:\
    \ --------------030308070208000400050907--\n      S: {to I} The mail submission\
    \ server uses URLFETCH to fetch the\n      pieces of the message to be sent (see\
    \ [URLAUTH] for details of the\n      semantics and steps).  The so-called \"\
    pawn-ticket\" authorization\n      mechanism uses a URI that contains its own\
    \ authorization\n      credentials.\n      I: {to S} Returns the requested body\
    \ parts.\n      Mail submission server opens IMAP connection to the IMAP server:\n\
    \         I: * OK [CAPABILITY IMAP4REV1 STARTTLS NAMESPACE LITERAL+\n        \
    \    CATENATE URLAUTH UIDPLUS CONDSTORE IDLE] imap.example.com\n            IMAP\
    \ server ready\n         S: a001 LOGIN submitserver secret\n         I: a001 OK\
    \ submitserver logged in\n         S: a002 URLFETCH \"imap://bob.ar@example.org/INBOX;\n\
    \            UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n\
    \            internal:A0DEAD473744909de610943775f9BEEF\" \"imap://\n         \
    \   bob.ar@example.org/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2;\n\
    \            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n            internal:BEEFA0DEAD473744909de610943775f9\"\
    \n         I: * URLFETCH \"imap://bob.ar@example.org/INBOX;\n            UIDVALIDITY=385759045/;UID=25627/;Section=2.MIME;\n\
    \            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n            internal:A0DEAD473744909de610943775f9BEEF\"\
    \ {84}\n         ...message section follows...\n             \"imap://bob.ar@example.org/INBOX;\n\
    \            UIDVALIDITY=385759045/;UID=25627/;Section=2;\n            expire=2006-10-28T23:59:59Z;urlauth=submit+bob.ar:\n\
    \            internal:BEEFA0DEAD473744909de610943775f9\" {15065}\n         ...message\
    \ section follows...\n         S: a002 OK URLFETCH completed\n         I: a003\
    \ LOGOUT\n         S: * BYE See you later\n         S: a003 OK Logout successful\n\
    \      Note that if the IMAP server doesn't send CAPABILITY response code\n  \
    \    in the greeting, the mail submission server must issue the\n      CAPABILITY\
    \ command to learn about supported IMAP extensions as\n      described in RFC\
    \ 3501.\n      Also, if data confidentiality is required, the mail submission\n\
    \      server should start TLS before issuing the LOGIN command.\n      S: {to\
    \ M} Submission server assembles the complete message, and if\n      the assembly\
    \ succeeds, it acknowledges acceptance of the message\n      by sending 250 response\
    \ to the last BDAT command:\n         S: 250 2.5.0 Ok, message accepted.\n   \
    \   M: {to I} The client marks the message containing the forwarded\n      attachment\
    \ on the IMAP server.\n         M: A0053 UID STORE 25627 +FLAGS.SILENT ($Forwarded)\n\
    \         I: * 215 FETCH (UID 25627 MODSEQ (12121231000))\n         I: A0053 OK\
    \ STORE completed\n      Note: the UID STORE command shown above will only work\
    \ if the\n      marked message is in the currently selected mailbox; otherwise,\
    \ it\n      requires a SELECT.  This command can be omitted.  The untagged\n \
    \     FETCH response is due to [CONDSTORE].  The $Forwarded IMAP keyword\n   \
    \   is described in Section 2.8.\n"
- title: 2.5.  Normative Statements Related to Forward without Download
  contents:
  - "2.5.  Normative Statements Related to Forward without Download\n   Lemonade-compliant\
    \ IMAP servers MUST support IMAP4Rev1 [RFC3501],\n   CATENATE [CATENATE], UIDPLUS\
    \ [UIDPLUS], and URLAUTH [URLAUTH].  This\n   support MUST be declared via CAPABILITY\
    \ [RFC3501].\n   Lemonade-compliant submit servers MUST support BURL [BURL], 8BITMIME\n\
    \   [8BITMIME], BINARYMIME [CHUNKING], and CHUNKING [CHUNKING].  This\n   support\
    \ MUST be declared via EHLO [RFC2821].  BURL MUST support\n   URLAUTH type URLs\
    \ [URLAUTH], and thus MUST advertise the \"imap\"\n   option following the BURL\
    \ EHLO keyword (see [BURL] for more details).\n   Additional normative statements\
    \ are provided in other sections.\n"
- title: 2.6.  Security Considerations for "pawn-tickets"
  contents:
  - "2.6.  Security Considerations for \"pawn-tickets\"\n   The so-called \"pawn-ticket\"\
    \ authorization mechanism uses a URI, which\n   contains its own authorization\
    \ credentials using [URLAUTH].  The\n   advantage of this mechanism is that the\
    \ SMTP submit [SUBMIT] server\n   cannot access any data on the [RFC3501] server\
    \ without a \"pawn-\n   ticket\" created by the client.\n   The \"pawn-ticket\"\
    \ grants access only to the specific data that the\n   SMTP submit [SUBMIT] server\
    \ is authorized to access, can be revoked\n   by the client, and can have a time-limited\
    \ validity.\n"
- title: 2.7.  The fcc Problem
  contents:
  - "2.7.  The fcc Problem\n   The \"fcc problem\" refers to delivering a copy of\
    \ a message to a \"file\n   carbon copy\" recipient.  By far, the most common\
    \ case of fcc is a\n   client leaving a copy of outgoing mail in a \"Sent Mail\"\
    \ or \"Outbox\"\n   mailbox.\n   In the traditional strategy, the MUA duplicates\
    \ the effort spent in\n   transmitting to the MSA by writing the message to the\
    \ fcc destination\n   in a separate step.  This may be a write to a local disk\
    \ file or an\n   APPEND to a mailbox on an IMAP server.  The latter is one of\
    \ the\n   \"repetitive network data transmissions\" that represents the \"problem\"\
    \n   aspect of the \"fcc problem\".\n   The [CATENATE] extension to [RFC3501]\
    \ can be used to address the fcc\n   problem.  The final message is constructed\
    \ in the mailbox designed\n   for outgoing mail.  Note that the [CATENATE] extension\
    \ can only\n   create a single message and only on the server that stages the\n\
    \   outgoing message for submission.  Additional copies of the message\n   can\
    \ be created on the same server using one or more COPY commands.\n"
- title: 2.8.  Registration of $Forwarded IMAP Keyword
  contents:
  - "2.8.  Registration of $Forwarded IMAP Keyword\n   The $Forwarded IMAP keyword\
    \ is used by several IMAP clients to\n   specify that the message was resent to\
    \ another email address,\n   embedded within or attached to a new message.  A\
    \ mail client sets\n   this keyword when it successfully forwards the message\
    \ to another\n   email address.  Typical usage of this keyword is to show a different\n\
    \   (or additional) icon for a message that has been forwarded.  Once\n   set,\
    \ the flag SHOULD NOT be cleared.\n   Lemonade-compliant servers MUST be able\
    \ to store the $Forwarded\n   keyword.  They MUST preserve it on the COPY operation.\
    \  The servers\n   MUST support the SEARCH KEYWORD $Forwarded.\n"
- title: 3.  Message Submission
  contents:
  - "3.  Message Submission\n   Lemonade-compliant mail submission servers are expected\
    \ to implement\n   the following set of SMTP extensions to make message submission\n\
    \   efficient.\n   Lemonade clients should take advantage of these features.\n"
- title: 3.1.  Pipelining
  contents:
  - "3.1.  Pipelining\n   Mobile clients regularly use networks with a relatively\
    \ high latency.\n   Avoidance of round-trips within a transaction has a great\
    \ advantage\n   for reduction in both bandwidth and total transaction time.  For\
    \ this\n   reason, Lemonade-compliant mail submission servers MUST support the\n\
    \   SMTP Service Extensions for Command Pipelining [RFC2920].\n   Clients SHOULD\
    \ pipeline SMTP commands when possible.\n"
- title: 3.2.  DSN Support
  contents:
  - "3.2.  DSN Support\n   Lemonade-compliant mail submission servers MUST support\
    \ SMTP service\n   extensions for delivery status notifications [RFC3461].\n"
- title: 3.3.  Message Size Declaration
  contents:
  - "3.3.  Message Size Declaration\n   Lemonade-compliant mail submission servers\
    \ MUST support the SMTP\n   Service Extension for Message Size Declaration [RFC1870].\n\
    \   Lemonade-compliant mail submission servers MUST \"expand\" all BURL\n   parts\
    \ before enforcing a message size limit.\n   A Lemonade-compliant client SHOULD\
    \ use message size declaration.  In\n   particular, it MUST NOT send a message\
    \ to a mail submission server,\n   if the client knows that the message exceeds\
    \ the maximal message size\n   advertised by the submission server.\n"
- title: 3.4.  Enhanced Status Code Support
  contents:
  - "3.4.  Enhanced Status Code Support\n   Lemonade-compliant mail submission servers\
    \ MUST support SMTP Service\n   Extension for Returning Enhanced Error Codes [RFC2034].\n"
- title: 3.5.  TLS
  contents:
  - "3.5.  TLS\n   Lemonade-compliant mail submission servers MUST support SMTP Service\n\
    \   Extension for Secure SMTP over TLS [SMTP-TLS].\n"
- title: 4.  Quick Resynchronization
  contents:
  - "4.  Quick Resynchronization\n   Lemonade-compliant IMAP servers MUST support\
    \ the CONDSTORE\n   [CONDSTORE] extension.  It allows a client to quickly resynchronize\n\
    \   any mailbox by asking the server to return all flag changes that have\n  \
    \ occurred since the last known mailbox synchronization mark.\n   [IMAP-DISC]\
    \ shows how to perform quick mailbox resynchronization.\n"
- title: 5.  Additional IMAP Extensions
  contents:
  - "5.  Additional IMAP Extensions\n   Lemonade-compliant IMAP servers MUST support\
    \ the NAMESPACE\n   [NAMESPACE] extension.  The extension allows clients to discover\n\
    \   shared mailboxes and mailboxes belonging to other users.\n   Lemonade-compliant\
    \ IMAP servers MUST support the LITERAL+ [LITERAL+]\n   extension.  The extension\
    \ allows clients to save a round-trip each\n   time a non-synchronizing literal\
    \ is sent.\n   Lemonade-compliant IMAP servers MUST support the IDLE [IDLE]\n\
    \   extension.  The extension allows clients to receive instant\n   notifications\
    \ about changes in the selected mailbox, without needing\n   to poll for changes.\n\
    \   Lemonade-compliant IMAP servers MUST support IMAP over TLS [RFC3501]\n   as\
    \ required by RFC 3501.\n"
- title: 6.  Summary of the Required IMAP and SMTP Extensions
  contents:
  - "6.  Summary of the Required IMAP and SMTP Extensions\n      -----------------------------------------------------|\n\
    \      |  Name of SMTP extension |            Comment       |\n      |-------------------------|--------------------------|\n\
    \      |        PIPELINING       |       Section 3.1        |\n      |-------------------------|--------------------------|\n\
    \      |           DSN           |       Section 3.2        |\n      |-------------------------|--------------------------|\n\
    \      |           SIZE          |       Section 3.3        |\n      |-------------------------|--------------------------|\n\
    \      |  ENHANCEDSTATUSCODES    |       Section 3.4        |\n      |-------------------------|--------------------------|\n\
    \      |        STARTTLS         |       Section 3.5        |\n      |-------------------------|--------------------------|\n\
    \      |           BURL          | Forward without download,|\n      |       \
    \                  |         Section 2        |\n      |-------------------------|--------------------------|\n\
    \      | URLAUTH support in BURL |       Section 2.5        |\n      |-------------------------|--------------------------|\n\
    \      |        CHUNKING,        |       Section 2.5        |\n      |       BINARYMIME\
    \        |       Section 2.5        |\n      |-------------------------|--------------------------|\n\
    \      |        8BITMIME,        |    Required by BURL      |\n      |-------------------------|--------------------------|\n\
    \      |          AUTH           |  Required by Submission, |\n      |       \
    \                  |      See [SMTPAUTH].     |\n      |-------------------------|--------------------------|\n\
    \      -----------------------------------------------------|\n      |  Name of\
    \ IMAP extension |            Comment       |\n      |        or feature     \
    \  |                          |\n      |-------------------------|--------------------------|\n\
    \      |        NAMESPACE        |       Section 5          |\n      |-------------------------|--------------------------|\n\
    \      |        CONDSTORE        |       Section 4          |\n      |-------------------------|--------------------------|\n\
    \      |        STARTTLS         |Required by IMAP (RFC3501)|\n      |-------------------------|--------------------------|\n\
    \      |        URLAUTH,         | Forward without download,|\n      |       \
    \ CATENATE,        |        Section 2         |\n      |        UIDPLUS      \
    \    |                          |\n      |-------------------------|--------------------------|\n\
    \      |        LITERAL+         |       Section 5          |\n      |-------------------------|--------------------------|\n\
    \      |          IDLE           |       Section 5          |\n      |-------------------------|--------------------------|\n\
    \      | $Forwarded IMAP keyword |       Section 2.8        |\n      |-------------------------|--------------------------|\n"
- title: 7.  Future work
  contents:
  - "7.  Future work\n   The Lemonade Working Group is looking into additional issues\
    \ related\n   to usage of email by mobile devices, possibly including:\n     \
    \ -  Media conversion (static and possibly streamed)\n      -  Transport optimization\
    \ for low or costly bandwidth and less\n         reliable mobile networks (e.g.,\
    \ quick reconnect)\n      -  Server to client notifications, possibly outside\
    \ of the\n         traditional IMAP band\n      -  Dealing with firewall and intermediaries\n\
    \      -  Compression and other bandwidth optimization\n      -  Filtering\n \
    \     -  Other considerations for mobile clients\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security considerations on Lemonade \"forward\
    \ without download\" are\n   discussed throughout Section 2.  Additional security\
    \ considerations\n   can be found in [RFC3501] and other documents describing\
    \ other SMTP\n   and IMAP extensions comprising the Lemonade profile.\n   Note\
    \ that the mandatory-to-implement authentication mechanism for\n   SMTP submission\
    \ is described in [SUBMIT].  The mandatory-to-implement\n   authentication mechanism\
    \ for IMAP is described in [RFC3501].\n"
- title: 8.1.  Confidentiality Protection of Submitted Messages
  contents:
  - "8.1.  Confidentiality Protection of Submitted Messages\n   When clients submit\
    \ new messages, link protection such as TLS guards\n   against an eavesdropper\
    \ seeing the contents of the submitted message.\n   It's worth noting, however,\
    \ that even if TLS is not used, the\n   security risks are no worse if BURL is\
    \ used to reference the text\n   than if the text is submitted directly.  If BURL\
    \ is not used, an\n   eavesdropper gains access to the full text of the message.\
    \  If BURL\n   is used, the eavesdropper may or may not be able to gain such access,\n\
    \   depending on the form of BURL used.  For example, some forms restrict\n  \
    \ use of the URL to an entity authorized as a submission server or a\n   specific\
    \ user.\n"
- title: 8.2.  TLS
  contents:
  - "8.2.  TLS\n   When Lemonade clients use the BURL extension to mail submission,\n\
    \   which requires sending a URLAUTH token to the mail submission server,\n  \
    \ such a token should be protected from interception to avoid a replay\n   attack\
    \ that may disclose the contents of the message to an attacker.\n   TLS-based\
    \ encryption of the mail submission path will provide\n   protection against this\
    \ attack.\n   Lemonade clients SHOULD use TLS-protected IMAP and mail submission\n\
    \   channels when using BURL-based message submission to protect the\n   URLAUTH\
    \ token from interception.\n   Lemonade-compliant mail submission servers SHOULD\
    \ use TLS-protected\n   IMAP connections when fetching message content using the\
    \ URLAUTH\n   token provided by the Lemonade client.\n   When a client uses SMTP\
    \ STARTTLS to send a BURL command that\n   references non-public information,\
    \ there is a user expectation that\n   the entire message content will be treated\
    \ confidentially.  To meet\n   this expectation, the message submission server\
    \ should use STARTTLS\n   or a mechanism providing equivalent data confidentiality\
    \ when\n   fetching the content referenced by that URL.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [BURL]      Newman, C. \"Message Submission BURL\
    \ Extension\", RFC 4468,\n               May 2006.\n   [8BITMIME]  Klensin, J.,\
    \ Freed, N., Rose, M., Stefferud, E., and D.\n               Crocker, \"SMTP Service\
    \ Extension for 8bit-MIMEtransport\",\n               RFC 1652, July 1994.\n \
    \  [CHUNKING]  Vaudreuil, G., \"SMTP Service Extensions for Transmission\n   \
    \            of Large and Binary MIME Messages\", RFC 3030, December\n       \
    \        2000.\n   [CATENATE]  Resnick, P., \"Internet Message Access Protocol\
    \ (IMAP)\n               CATENATE Extension\", RFC 4469, April 2006.\n   [UIDPLUS]\
    \   Crispin, M., \"Internet Message Access Protocol (IMAP) -\n               UIDPLUS\
    \ extension\", RFC 4315, December 2005.\n   [RFC2119]   Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC2920]   Freed, N., \"SMTP Service Extension for Command\n\
    \               Pipelining\", STD 60, RFC 2920, September 2000.\n   [RFC1870]\
    \   Klensin, J., Freed, N., and K. Moore, \"SMTP Service\n               Extension\
    \ for Message Size Declaration\", STD 10, RFC\n               1870, November 1995.\n\
    \   [SUBMIT]    Gellens, R. and J. Klensin, \"Message Submission for\n       \
    \        Mail\", RFC 4409, April 2006.\n   [SMTP-TLS]  Hoffman, P., \"SMTP Service\
    \ Extension for Secure SMTP over\n               Transport Layer Security\", RFC\
    \ 3207, February 2002.\n   [RFC2821]   Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 2821,\n               April 2001.\n   [RFC3501]   Crispin, M., \"INTERNET\
    \ MESSAGE ACCESS PROTOCOL - VERSION\n               4rev1\", RFC 3501, March 2003.\n\
    \   [RFC3461]   Moore, K., \"Simple Mail Transfer Protocol (SMTP) Service\n  \
    \             Extension for Delivery Status Notifications (DSNs)\", RFC\n    \
    \           3461, January 2003.\n   [URLAUTH]   Crispin, M., \"Internet Message\
    \ Access Protocol (IMAP) -\n               URLAUTH Extension\", RFC 4467, May\
    \ 2006.\n   [RFC2034]   Freed, N., \"SMTP Service Extension for Returning Enhanced\n\
    \               Error Codes\", RFC 2034, October 1996.\n   [NAMESPACE] Gahrns,\
    \ M. and C. Newman, \"IMAP4 Namespace\", RFC 2342,\n               May 1998.\n\
    \   [SMTPAUTH]  Myers, J., \"SMTP Service Extension for Authentication\",\n  \
    \             RFC 2554, March 1999.\n   [LITERAL+]  Myers, J., \"IMAP4 non-synchronizing\
    \ literals\", RFC 2088,\n               January 1997.\n   [CONDSTORE] Melnikov,\
    \ A. and S. Hole, \"IMAP Extension for Conditional\n               STORE Operation\
    \ or Quick Flag Changes Resynchronization\",\n               RFC 4551, June 2006.\n\
    \   [IDLE]      Leiba, B., \"IMAP4 IDLE command\", RFC 2177, June 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [IMAP-DISC] Melnikov, A., \"Synchronization\
    \ operations for\n               disconnected IMAP4 clients\", Work in Progress,\
    \ October\n               2004.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This document is a product of Lemonade WG.  The editors\
    \ thank the\n   Lemonade WG members that contributed comments and corrections;\
    \ in\n   particular: Randy Gellens, Dave Cridland, and Greg Vaudreuil.\n   This\
    \ document borrows some text from \"Message Submission\" (February\n   2004) by\
    \ Mark Crispin, as well as from the trio [BURL], [CATENATE],\n   and [URLAUTH].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stephane H. Maes\n   Oracle Corporation\n   500 Oracle\
    \ Parkway\n   M/S 4op634\n   Redwood Shores, CA 94065\n   USA\n   Phone: +1-650-607-6296\n\
    \   EMail: stephane.maes@oracle.com\n   Alexey Melnikov\n   Isode Limited\n  \
    \ 5 Castle Business Village\n   36 Station Road\n   Hampton, Middlesex\n   TW12\
    \ 2BX\n   UK\n   EMail: Alexey.melnikov@isode.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
