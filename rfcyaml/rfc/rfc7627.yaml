- contents:
  - "            Transport Layer Security (TLS) Session Hash and\n                    Extended
    Master Secret Extension\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The Transport Layer Security (TLS) master secret is not\n   cryptographically
    bound to important session parameters such as the\n   server certificate.  Consequently,
    it is possible for an active\n   attacker to set up two sessions, one with a client
    and another with a\n   server, such that the master secrets on the two sessions
    are the\n   same.  Thereafter, any mechanism that relies on the master secret
    for\n   authentication, including session resumption, becomes vulnerable to a\n
    \  man-in-the-middle attack, where the attacker can simply forward\n   messages
    back and forth between the client and server.  This\n   specification defines
    a TLS extension that contextually binds the\n   master secret to a log of the
    full handshake that computes it, thus\n   preventing such attacks.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7627.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Requirements Notation ...........................................5\n   3.
    The TLS Session Hash ............................................5\n   4. The
    Extended Master Secret ......................................6\n   5. Extension
    Negotiation ...........................................6\n      5.1. Extension
    Definition .......................................6\n      5.2. Client and Server
    Behavior: Full Handshake .................7\n      5.3. Client and Server Behavior:
    Abbreviated Handshake ..........7\n      5.4. Interoperability Considerations
    ............................9\n   6. Security Considerations .........................................9\n
    \     6.1. Triple Handshake Preconditions and Impact ..................9\n      6.2.
    Cryptographic Properties of the Hash Function .............11\n      6.3. Handshake
    Messages Included in the Session Hash ...........11\n      6.4. No SSL 3.0 Support
    ........................................12\n   7. IANA Considerations ............................................12\n
    \  8. References .....................................................12\n      8.1.
    Normative References ......................................12\n      8.2. Informative
    References ....................................13\n   Acknowledgments ...................................................14\n
    \  Authors' Addresses ................................................15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In TLS [RFC5246], every session has a \"master_secret\"
    computed as:\n   master_secret = PRF(pre_master_secret, \"master secret\",\n                       ClientHello.random
    + ServerHello.random)\n                       [0..47];\n   where the \"pre_master_secret\"
    is the result of some key exchange\n   protocol.  For example, when the handshake
    uses an RSA ciphersuite,\n   this value is generated uniformly at random by the
    client, whereas\n   for Ephemeral Diffie-Hellman (DHE) ciphersuites, it is the
    result of\n   a Diffie-Hellman key agreement.\n   As described in [TRIPLE-HS],
    in both the RSA and DHE key exchanges,\n   an active attacker can synchronize
    two TLS sessions so that they\n   share the same \"master_secret\".  For an RSA
    key exchange where the\n   client is unauthenticated, this is achieved as follows.
    \ Suppose a\n   client C connects to a server A.  C does not realize that A is\n
    \  malicious and that A connects in the background to an honest server S\n   and
    completes both handshakes.  For simplicity, assume that C and S\n   only use RSA
    ciphersuites.\n   1.  C sends a \"ClientHello\" to A, and A forwards it to S.\n
    \  2.  S sends a \"ServerHello\" to A, and A forwards it to C.\n   3.  S sends
    a \"Certificate\", containing its certificate chain, to A.\n       A replaces
    it with its own certificate chain and sends it to C.\n   4.  S sends a \"ServerHelloDone\"
    to A, and A forwards it to C.\n   5.  C sends a \"ClientKeyExchange\" to A, containing
    the\n       \"pre_master_secret\", encrypted with A's public key.  A decrypts\n
    \      the \"pre_master_secret\", re-encrypts it with S's public key, and\n       sends
    it on to S.\n   6.  C sends a \"Finished\" to A.  A computes a \"Finished\" for
    its\n       connection with S and sends it to S.\n   7.  S sends a \"Finished\"
    to A.  A computes a \"Finished\" for its\n       connection with C and sends it
    to C.\n   At this point, both connections (between C and A, and between A and\n
    \  S) have new sessions that share the same \"pre_master_secret\",\n   \"ClientHello.random\",
    \"ServerHello.random\", as well as other session\n   parameters, including the
    session identifier and, optionally, the\n   session ticket.  Hence, the \"master_secret\"
    value will be equal for\n   the two sessions and will be associated both at C
    and S with the same\n   session ID, even though the server identities on the two
    connections\n   are different.  Recall that C only sees A's certificate and is\n
    \  unaware of A's connection with S.  Moreover, the record keys on the\n   two
    connections will also be the same.\n   The scenario above shows that TLS does
    not guarantee that the master\n   secrets and keys used on different connections
    will be different.\n   Even if client authentication is used, the scenario still
    works,\n   except that the two sessions now differ on both client and server\n
    \  identities.\n   A similar scenario can be achieved when the handshake uses
    a DHE\n   ciphersuite.  Note that even if the client or server does not prefer\n
    \  using RSA or DHE, the attacker can force them to use it by offering\n   only
    RSA or DHE in its hello messages.  Handshakes using Ephemeral\n   Elliptic Curve
    Diffie-Hellman (ECDHE) ciphersuites are also\n   vulnerable if they allow arbitrary
    explicit curves or use curves with\n   small subgroups.  Against more powerful
    adversaries, other key\n   exchanges, such as Secure Remote Password (SRP) and
    Pre-Shared Key\n   (PSK), have also been shown to be vulnerable [VERIFIED-BINDINGS].\n
    \  Once A has synchronized the two connections, since the keys are the\n   same
    on the two sides, it can step away and transparently forward\n   messages between
    C and S, reading and modifying when it desires.  In\n   the key exchange literature,
    such occurrences are called unknown key-\n   share attacks, since C and S share
    a secret but they both think that\n   their secret is shared only with A.  In
    themselves, these attacks do\n   not break integrity or confidentiality between
    honest parties, but\n   they offer a useful starting point from which to mount
    impersonation\n   attacks on C and S.\n   Suppose C tries to resume its session
    on a new connection with A.  A\n   can then resume its session with S on a new
    connection and forward\n   the abbreviated handshake messages unchanged between
    C and S.  Since\n   the abbreviated handshake only relies on the master secret
    for\n   authentication and does not mention client or server identities, both\n
    \  handshakes complete successfully, resulting in the same session keys\n   and
    the same handshake log.  A still knows the connection keys and\n   can send messages
    to both C and S.\n   Critically, at the new connection, even the handshake log
    is the same\n   on C and S, thus defeating any man-in-the-middle protection scheme\n
    \  that relies on the uniqueness of finished messages, such as the\n   secure
    renegotiation indication extension [RFC5746] or TLS channel\n   bindings [RFC5929].
    \ [TRIPLE-HS] describes several exploits based on\n   such session synchronization
    attacks.  In particular, it describes a\n   man-in-the-middle attack, called the
    \"triple handshake\", that\n   circumvents the protections of [RFC5746] to break
    client-\n   authenticated TLS renegotiation after session resumption.  Similar\n
    \  attacks apply to application-level authentication mechanisms that\n   rely
    on channel bindings [RFC5929] or on key material exported from\n   TLS [RFC5705].\n
    \  The underlying protocol issue leading to these attacks is that the\n   TLS
    master secret is not guaranteed to be unique across sessions,\n   since it is
    not context-bound to the full handshake that generated\n   it.  If we fix this
    problem in the initial master secret computation,\n   then all these attacks can
    be prevented.  This specification\n   introduces a TLS extension that changes
    the way the \"master_secret\"\n   value is computed in a full handshake by including
    the log of the\n   handshake messages, so that different sessions will, by construction,\n
    \  have different master secrets.  This prevents the attacks described\n   in
    [TRIPLE-HS] and documented in Section 2.11 of [RFC7457].\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Notation\n   This document uses the same notation and terminology
    used in the TLS\n   protocol specification [RFC5246].\n   The key words \"MUST\",
    \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in
    this document are to be interpreted as described in RFC\n   2119 [RFC2119].\n"
  title: 2.  Requirements Notation
- contents:
  - "3.  The TLS Session Hash\n   When a full TLS handshake takes place, we define\n
    \        session_hash = Hash(handshake_messages)\n   where \"handshake_messages\"
    refers to all handshake messages sent or\n   received, starting at the ClientHello
    up to and including the\n   ClientKeyExchange message, including the type and
    length fields of\n   the handshake messages.  This is the concatenation of all
    the\n   exchanged Handshake structures, as defined in Section 7.4 of\n   [RFC5246].\n
    \  For TLS 1.2, the \"Hash\" function is the one defined in Section 7.4.9\n   of
    [RFC5246] for the Finished message computation.  For all previous\n   versions
    of TLS, the \"Hash\" function computes the concatenation of\n   MD5 and SHA1.\n
    \  There is no \"session_hash\" for resumed handshakes, as they do not\n   lead
    to the creation of a new session.\n"
  title: 3.  The TLS Session Hash
- contents:
  - "4.  The Extended Master Secret\n   When the extended master secret extension
    is negotiated in a full\n   handshake, the \"master_secret\" is computed as\n
    \  master_secret = PRF(pre_master_secret, \"extended master secret\",\n                       session_hash)\n
    \                      [0..47];\n   The extended master secret computation differs
    from that described in\n   [RFC5246] in the following ways:\n   o  The \"extended
    master secret\" label is used instead of \"master\n      secret\".\n   o  The
    \"session_hash\" is used instead of the \"ClientHello.random\" and\n      \"ServerHello.random\".\n
    \  The \"session_hash\" depends upon a handshake log that includes\n   \"ClientHello.random\"
    and \"ServerHello.random\", in addition to\n   ciphersuites, key exchange information,
    and certificates (if any)\n   from the client and server.  Consequently, the extended
    master secret\n   depends upon the choice of all these session parameters.\n   This
    design reflects the recommendation that keys should be bound to\n   the security
    contexts that compute them [SP800-108].  The technique\n   of mixing a hash of
    the key exchange messages into master key\n   derivation is already used in other
    well-known protocols such as\n   Secure Shell (SSH) [RFC4251].\n   Clients and
    servers SHOULD NOT accept handshakes that do not use the\n   extended master secret,
    especially if they rely on features like\n   compound authentication that fall
    into the vulnerable cases described\n   in Section 6.1.\n"
  title: 4.  The Extended Master Secret
- contents:
  - '5.  Extension Negotiation

    '
  - contents:
    - "5.1.  Extension Definition\n   This document defines a new TLS extension, \"extended_master_secret\"\n
      \  (with extension type 0x0017), which is used to signal both client and\n   server
      to use the extended master secret computation.  The\n   \"extension_data\" field
      of this extension is empty.  Thus, the entire\n   encoding of the extension
      is 00 17 00 00 (in hexadecimal.)\n   Although this document refers only to TLS,
      the extension proposed\n   here can also be used with Datagram TLS (DTLS) [RFC6347].\n
      \  If the client and server agree on this extension and a full handshake\n   takes
      place, both client and server MUST use the extended master\n   secret derivation
      algorithm, as defined in Section 4.  All other\n   cryptographic computations
      remain unchanged.\n"
    title: 5.1.  Extension Definition
  - contents:
    - "5.2.  Client and Server Behavior: Full Handshake\n   In the following, we use
      the phrase \"abort the handshake\" as\n   shorthand for terminating the handshake
      by sending a fatal\n   \"handshake_failure\" alert.\n   In all handshakes, a
      client implementing this document MUST send the\n   \"extended_master_secret\"
      extension in its ClientHello.\n   If a server implementing this document receives
      the\n   \"extended_master_secret\" extension, it MUST include the extension
      in\n   its ServerHello message.\n   If both the ClientHello and ServerHello
      contain the extension, the\n   new session uses the extended master secret computation.\n
      \  If the server receives a ClientHello without the extension, it SHOULD\n   abort
      the handshake if it does not wish to interoperate with legacy\n   clients.  If
      it chooses to continue the handshake, then it MUST NOT\n   include the extension
      in the ServerHello.\n   If a client receives a ServerHello without the extension,
      it SHOULD\n   abort the handshake if it does not wish to interoperate with legacy\n
      \  servers.\n   If the client and server choose to continue a full handshake
      without\n   the extension, they MUST use the standard master secret derivation\n
      \  for the new session.  In this case, the new session is not protected\n   by
      the mechanisms described in this document.  So, implementers\n   should follow
      the guidelines in Section 5.4 to avoid dangerous usage\n   scenarios.  In particular,
      the master secret derived from the new\n   session should not be used for application-level
      authentication.\n"
    title: '5.2.  Client and Server Behavior: Full Handshake'
  - contents:
    - "5.3.  Client and Server Behavior: Abbreviated Handshake\n   The client SHOULD
      NOT offer an abbreviated handshake to resume a\n   session that does not use
      an extended master secret.  Instead, it\n   SHOULD offer a full handshake.\n
      \  If the client chooses to offer an abbreviated handshake even for such\n   sessions
      in order to support legacy insecure resumption, then the\n   current connection
      is not protected by the mechanisms in this\n   document.  So, the client should
      follow the guidelines in Section 5.4\n   to avoid dangerous usage scenarios.
      \ In particular, renegotiation is\n   no longer secure on this connection, even
      if the client and server\n   support the renegotiation indication extension
      [RFC5746].\n   When offering an abbreviated handshake, the client MUST send
      the\n   \"extended_master_secret\" extension in its ClientHello.\n   If a server
      receives a ClientHello for an abbreviated handshake\n   offering to resume a
      known previous session, it behaves as follows:\n   o  If the original session
      did not use the \"extended_master_secret\"\n      extension but the new ClientHello
      contains the extension, then the\n      server MUST NOT perform the abbreviated
      handshake.  Instead, it\n      SHOULD continue with a full handshake (as described
      in\n      Section 5.2) to negotiate a new session.\n   o  If the original session
      used the \"extended_master_secret\"\n      extension but the new ClientHello
      does not contain it, the server\n      MUST abort the abbreviated handshake.\n
      \  o  If neither the original session nor the new ClientHello uses the\n      extension,
      the server SHOULD abort the handshake.  If it continues\n      with an abbreviated
      handshake in order to support legacy insecure\n      resumption, the connection
      is no longer protected by the\n      mechanisms in this document, and the server
      should follow the\n      guidelines in Section 5.4.\n   o  If the new ClientHello
      contains the extension and the server\n      chooses to continue the handshake,
      then the server MUST include\n      the \"extended_master_secret\" extension
      in its ServerHello message.\n   If a client receives a ServerHello that accepts
      an abbreviated\n   handshake, it behaves as follows:\n   o  If the original
      session did not use the \"extended_master_secret\"\n      extension but the
      new ServerHello contains the extension, the\n      client MUST abort the handshake.\n
      \  o  If the original session used the extension but the new ServerHello\n      does
      not contain the extension, the client MUST abort the\n      handshake.\n   If
      the client and server continue the abbreviated handshake, they\n   derive the
      connection keys for the new session as usual from the\n   master secret of the
      original session.\n"
    title: '5.3.  Client and Server Behavior: Abbreviated Handshake'
  - contents:
    - "5.4.  Interoperability Considerations\n   To allow interoperability with legacy
      clients and servers, a TLS peer\n   may decide to accept full handshakes that
      use the legacy master\n   secret computation.  If so, they need to differentiate
      between\n   sessions that use legacy and extended master secrets by adding a
      flag\n   to the session state.\n   If a client or server chooses to continue
      with a full handshake\n   without the extended master secret extension, then
      the new session\n   becomes vulnerable to the man-in-the-middle key synchronization\n
      \  attack described in Section 1.  Hence, the client or server MUST NOT\n   export
      any key material based on the new master secret for any\n   subsequent application-level
      authentication.  In particular, it MUST\n   disable [RFC5705] and any Extensible
      Authentication Protocol (EAP)\n   relying on compound authentication [COMPOUND-AUTH].\n
      \  If a client or server chooses to continue an abbreviated handshake to\n   resume
      a session that does not use the extended master secret, then\n   the current
      connection becomes vulnerable to a man-in-the-middle\n   handshake log synchronization
      attack as described in Section 1.\n   Hence, the client or server MUST NOT use
      the current handshake's\n   \"verify_data\" for application-level authentication.
      \ In particular,\n   the client MUST disable renegotiation and any use of the
      \"tls-unique\"\n   channel binding [RFC5929] on the current connection.\n   If
      the original session uses an extended master secret but the\n   ClientHello
      or ServerHello in the abbreviated handshake does not\n   include the extension,
      it MAY be safe to continue the abbreviated\n   handshake since it is protected
      by the extended master secret of the\n   original session.  This scenario may
      occur, for example, when a\n   server that implements this extension establishes
      a session but the\n   session is subsequently resumed at a different server
      that does not\n   support the extension.  Since such situations are unusual
      and likely\n   to be the result of transient or inadvertent misconfigurations,
      this\n   document recommends that the client and server MUST abort such\n   handshakes.\n"
    title: 5.4.  Interoperability Considerations
  title: 5.  Extension Negotiation
- contents:
  - '6.  Security Considerations

    '
  - contents:
    - "6.1.  Triple Handshake Preconditions and Impact\n   One way to mount a triple
      handshake attack is described in Section 1,\n   along with a mention of the
      security mechanisms that break due to the\n   attack; more in-depth discussion
      and diagrams can be found in\n   [TRIPLE-HS].  Here, some further discussion
      is presented about attack\n   preconditions and impact.\n   To mount a triple
      handshake attack, it must be possible to force the\n   same master secret on
      two different sessions.  For this to happen,\n   two preconditions must be met:\n
      \  o  The client, C, must be willing to connect to a malicious server,\n      A.
      \ In certain contexts, like the web, this can be easily\n      achieved, since
      a browser can be instructed to load content from\n      an untrusted origin.\n
      \  o  The pre-master secret must be synchronized on the two sessions.\n      This
      is particularly easy to achieve with the RSA and DHE key\n      exchanges, but
      under some conditions, ECDHE, SRP, and PSK key\n      exchanges can be exploited
      to this effect as well.\n   Once the master secret is synchronized on two sessions,
      any security\n   property that relies on the uniqueness of the master secret
      is\n   compromised.  For example, a TLS exporter [RFC5705] no longer\n   provides
      a unique key bound to the current session.\n   TLS session resumption also relies
      on the uniqueness of the master\n   secret to authenticate the resuming peers.
      \ Hence, if a synchronized\n   session is resumed, the peers cannot be sure
      about each other's\n   identities, and the attacker knows the connection keys.
      \ Clearly, a\n   precondition to this step of the attack is that both client
      and\n   server support session resumption (either via session identifier or\n
      \  session tickets [RFC5077]).\n   Additionally, in a synchronized abbreviated
      handshake, the whole\n   transcript (which includes the \"verify_data\" values)
      is synchronized.\n   So, after an abbreviated handshake, channel bindings like\n
      \  \"tls-unique\" [RFC5929] will not uniquely identify the connection\n   anymore.\n
      \  Synchronization of the \"verify_data\" in abbreviated handshakes also\n   undermines
      the security guarantees of the renegotiation indication\n   extension [RFC5746],
      re-enabling a prefix-injection flaw similar to\n   the renegotiation attack
      [Ray09].  However, in a triple handshake\n   attack, the client sees the server
      certificate changing across\n   different full handshakes.  Hence, a precondition
      to mount this stage\n   of the attack is that the client accepts different certificates
      at\n   each handshake, even if their common names do not match.  Before the\n
      \  triple handshake attack was discovered, this used to be widespread\n   behavior,
      at least among some web browsers; such browsers were hence\n   vulnerable to
      the attack.\n   The extended master secret extension thwarts triple handshake
      attacks\n   at their first stage by ensuring that different sessions necessarily\n
      \  end up with different master secret values.  Hence, all security\n   properties
      relying on the uniqueness of the master secret are now\n   expected to hold.
      \ In particular, if a TLS session is protected by\n   the extended master secret
      extension, it is safe to resume it, to use\n   its channel bindings, and to
      allow for certificate changes across\n   renegotiation, meaning that all certificates
      are controlled by the\n   same peer.  A symbolic cryptographic protocol analysis
      justifying the\n   extended master secret extension appears in [VERIFIED-BINDINGS].\n"
    title: 6.1.  Triple Handshake Preconditions and Impact
  - contents:
    - "6.2.  Cryptographic Properties of the Hash Function\n   The session hashes
      of two different sessions need to be distinct;\n   hence, the \"Hash\" function
      used to compute the \"session_hash\" needs\n   to be collision resistant.  As
      such, hash functions such as MD5 or\n   SHA1 are NOT RECOMMENDED.\n   We observe
      that the \"Hash\" function used in the Finished message\n   computation already
      needs to be collision resistant for the\n   renegotiation indication extension
      [RFC5746] to work, because a\n   meaningful collision on the handshake messages
      (and hence on the\n   \"verify_data\") may re-enable the renegotiation attack
      [Ray09].\n   The hash function used to compute the session hash depends on the
      TLS\n   protocol version.  All current ciphersuites defined for TLS 1.2 use\n
      \  SHA256 or better, and so does the session hash.  For earlier versions\n   of
      the protocol, only MD5 and SHA1 can be assumed to be supported,\n   and this
      document does not require legacy implementations to add\n   support for new
      hash functions.  In these versions, the session hash\n   uses the concatenation
      of MD5 and SHA1, as in the Finished message.\n"
    title: 6.2.  Cryptographic Properties of the Hash Function
  - contents:
    - "6.3.  Handshake Messages Included in the Session Hash\n   The \"session_hash\"
      is intended to encompass all relevant session\n   information, including ciphersuite
      negotiation, key exchange\n   messages, and client and server identities.  The
      hash is needed to\n   compute the extended master secret and hence must be available
      before\n   the Finished messages.\n   This document sets the \"session_hash\"
      to cover all handshake messages\n   up to and including the ClientKeyExchange.
      \ For existing TLS\n   ciphersuites, these messages include all the significant
      contents of\n   the new session -- CertificateVerify does not change the session\n
      \  content.  At the same time, this allows the extended master secret to\n   be
      computed immediately after the pre-master secret, so that\n   implementations
      can shred the temporary pre-master secret from memory\n   as early as possible.\n
      \  It is possible that new ciphersuites or TLS extensions may include\n   additional
      messages between ClientKeyExchange and Finished that add\n   important session
      context.  In such cases, some of the security\n   guarantees of this specification
      may no longer apply, and new man-in-\n   the-middle attacks may be possible.
      \ For example, if the client and\n   server support the session ticket extension
      [RFC5077], the session\n   hash does not cover the new session ticket sent by
      the server.\n   Hence, a man-in-the-middle may be able to cause a client to
      store a\n   session ticket that was not meant for the current session.  Attacks\n
      \  based on this vector are not yet known, but applications that store\n   additional
      information in session tickets beyond those covered in the\n   session hash
      require careful analysis.\n"
    title: 6.3.  Handshake Messages Included in the Session Hash
  - contents:
    - "6.4.  No SSL 3.0 Support\n   The Secure Sockets Layer (SSL) protocol version
      3.0 [RFC6101] is a\n   predecessor of the TLS protocol, and it is equally vulnerable
      to\n   triple handshake attacks, alongside other vulnerabilities stemming\n
      \  from its use of obsolete cryptographic constructions that are now\n   considered
      weak.  SSL 3.0 has been deprecated [RFC7568].\n   The countermeasure described
      in this document relies on a TLS\n   extension and hence cannot be used with
      SSL 3.0.  Clients and servers\n   implementing this document SHOULD refuse SSL
      3.0 handshakes.  If they\n   choose to support SSL 3.0, the resulting sessions
      MUST use the legacy\n   master secret computation, and the interoperability
      considerations of\n   Section 5.4 apply.\n"
    title: 6.4.  No SSL 3.0 Support
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   IANA has added the extension code point 23 (0x0017),
    which has been\n   used by prototype implementations, for the \"extended_master_secret\"\n
    \  extension to the \"ExtensionType Values\" registry specified in the TLS\n   specification
    [RFC5246].\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n
      \              DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5246]   Dierks, T. and E. Rescorla, \"The Transport Layer Security\n
      \              (TLS) Protocol Version 1.2\", RFC 5246,\n               DOI 10.17487/RFC5246,
      August 2008,\n               <http://www.rfc-editor.org/info/rfc5246>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [COMPOUND-AUTH]\n               Asokan, N.,
      Valtteri, N., and K. Nyberg, \"Man-in-the-\n               Middle in Tunnelled
      Authentication Protocols\", Security\n               Protocols, LNCS, Volume
      3364, DOI 10.1007/11542322_6,\n               2005.\n   [Ray09]     Ray, M.,
      \"Authentication Gap in TLS Renegotiation\", 2009.\n   [RFC4251]   Ylonen, T.
      and C. Lonvick, Ed., \"The Secure Shell (SSH)\n               Protocol Architecture\",
      RFC 4251, DOI 10.17487/RFC4251,\n               January 2006, <http://www.rfc-editor.org/info/rfc4251>.\n
      \  [RFC5077]   Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n               \"Transport
      Layer Security (TLS) Session Resumption\n               without Server-Side
      State\", RFC 5077,\n               DOI 10.17487/RFC5077, January 2008,\n               <http://www.rfc-editor.org/info/rfc5077>.\n
      \  [RFC5705]   Rescorla, E., \"Keying Material Exporters for Transport\n               Layer
      Security (TLS)\", RFC 5705, DOI 10.17487/RFC5705,\n               March 2010,
      <http://www.rfc-editor.org/info/rfc5705>.\n   [RFC5746]   Rescorla, E., Ray,
      M., Dispensa, S., and N. Oskov,\n               \"Transport Layer Security (TLS)
      Renegotiation Indication\n               Extension\", RFC 5746, DOI 10.17487/RFC5746,
      February\n               2010, <http://www.rfc-editor.org/info/rfc5746>.\n   [RFC5929]
      \  Altman, J., Williams, N., and L. Zhu, \"Channel Bindings\n               for
      TLS\", RFC 5929, DOI 10.17487/RFC5929, July 2010,\n               <http://www.rfc-editor.org/info/rfc5929>.\n
      \  [RFC6101]   Freier, A., Karlton, P., and P. Kocher, \"The Secure\n               Sockets
      Layer (SSL) Protocol Version 3.0\", RFC 6101,\n               DOI 10.17487/RFC6101,
      August 2011,\n               <http://www.rfc-editor.org/info/rfc6101>.\n   [RFC6347]
      \  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n               Security
      Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n               January 2012,
      <http://www.rfc-editor.org/info/rfc6347>.\n   [RFC7457]   Sheffer, Y., Holz,
      R., and P. Saint-Andre, \"Summarizing\n               Known Attacks on Transport
      Layer Security (TLS) and\n               Datagram TLS (DTLS)\", RFC 7457, DOI
      10.17487/RFC7457,\n               February 2015, <http://www.rfc-editor.org/info/rfc7457>.\n
      \  [RFC7568]   Barnes, R., Thomson, M., Pironti, A., and A. Langley,\n               \"Deprecating
      Secure Sockets Layer Version 3.0\", RFC 7568,\n               DOI 10.17487/RFC7568,
      June 2015,\n               <http://www.rfc-editor.org/info/rfc7568>.\n   [SP800-108]
      Chen, L., \"Recommendation for Key Derivation Using\n               Pseudorandom
      Functions (Revised)\", NIST Special\n               Publication 800-108, 2009.\n
      \  [TRIPLE-HS] Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Pironti,\n               A.,
      and P-Y. Strub, \"Triple Handshakes and Cookie\n               Cutters: Breaking
      and Fixing Authentication over TLS\",\n               IEEE Symposium on Security
      and Privacy,\n               DOI 10.1109/SP.2014.14, 2014.\n   [VERIFIED-BINDINGS]\n
      \              Bhargavan, K., Delignat-Lavaud, A., and A. Pironti,\n               \"Verified
      Contributive Channel Bindings for Compound\n               Authentication\",
      Network and Distributed System Security\n               Symposium (NDSS), 2015.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgments\n   Triple handshake attacks were originally discovered by Antoine\n
    \  Delignat-Lavaud, Karthikeyan Bhargavan, and Alfredo Pironti.  They\n   were
    further developed by the miTLS team: Cedric Fournet, Pierre-Yves\n   Strub, Markulf
    Kohlweiss, and Santiago Zanella-Beguelin.  Many of the\n   ideas in this document
    emerged from discussions with Martin Abadi,\n   Ben Laurie, Nikos Mavrogiannopoulos,
    Manuel Pegourie-Gonnard, Eric\n   Rescorla, Martin Rex, and Brian Smith.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Karthikeyan Bhargavan (editor)\n   Inria Paris-Rocquencourt\n
    \  23, Avenue d'Italie\n   Paris  75214 CEDEX 13\n   France\n   Email: karthikeyan.bhargavan@inria.fr\n
    \  Antoine Delignat-Lavaud\n   Inria Paris-Rocquencourt\n   23, Avenue d'Italie\n
    \  Paris  75214 CEDEX 13\n   France\n   Email: antoine.delignat-lavaud@inria.fr\n
    \  Alfredo Pironti\n   Inria Paris-Rocquencourt\n   23, Avenue d'Italie\n   Paris
    \ 75214 CEDEX 13\n   France\n   Email: alfredo.pironti@inria.fr\n   Adam Langley\n
    \  Google Inc.\n   1600 Amphitheatre Parkway\n   Mountain View, CA  94043\n   United
    States\n   Email: agl@google.com\n   Marsh Ray\n   Microsoft Corp.\n   1 Microsoft
    Way\n   Redmond, WA  98052\n   United States\n   Email: maray@microsoft.com\n"
  title: Authors' Addresses
