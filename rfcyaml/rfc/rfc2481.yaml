- title: __initial_text__
  contents:
  - '     A Proposal to add Explicit Congestion Notification (ECN) to IP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This note describes a proposed addition of ECN (Explicit Congestion\n\
    \   Notification) to IP.  TCP is currently the dominant transport\n   protocol\
    \ used in the Internet. We begin by describing TCP's use of\n   packet drops as\
    \ an indication of congestion.  Next we argue that with\n   the addition of active\
    \ queue management (e.g., RED) to the Internet\n   infrastructure, where routers\
    \ detect congestion before the queue\n   overflows, routers are no longer limited\
    \ to packet drops as an\n   indication of congestion.  Routers could instead set\
    \ a Congestion\n   Experienced (CE) bit in the packet header of packets from ECN-capable\n\
    \   transport protocols.  We describe when the CE bit would be set in the\n  \
    \ routers, and describe what modifications would be needed to TCP to\n   make\
    \ it ECN-capable.  Modifications to other transport protocols\n   (e.g., unreliable\
    \ unicast or multicast, reliable multicast, other\n   reliable unicast transport\
    \ protocols) could be considered as those\n   protocols are developed and advance\
    \ through the standards process.\n"
- title: 1.  Conventions and Acronyms
  contents:
  - "1.  Conventions and Acronyms\n   The keywords MUST, MUST NOT, REQUIRED, SHALL,\
    \ SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they\
    \ appear in this\n   document, are to be interpreted as described in [B97].\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   TCP's congestion control and avoidance algorithms are based\
    \ on the\n   notion that the network is a black-box [Jacobson88, Jacobson90].\
    \  The\n   network's state of congestion or otherwise is determined by end-\n\
    \   systems probing for the network state, by gradually increasing the\n   load\
    \ on the network (by increasing the window of packets that are\n   outstanding\
    \ in the network) until the network becomes congested and a\n   packet is lost.\
    \  Treating the network as a \"black-box\" and treating\n   loss as an indication\
    \ of congestion in the network is appropriate for\n   pure best-effort data carried\
    \ by TCP which has little or no\n   sensitivity to delay or loss of individual\
    \ packets.  In addition,\n   TCP's congestion management algorithms have techniques\
    \ built-in (such\n   as Fast Retransmit and Fast Recovery) to minimize the impact\
    \ of\n   losses from a throughput perspective.\n   However, these mechanisms are\
    \ not intended to help applications that\n   are in fact sensitive to the delay\
    \ or loss of one or more individual\n   packets.  Interactive traffic such as\
    \ telnet, web-browsing, and\n   transfer of audio and video data can be sensitive\
    \ to packet losses\n   (using an unreliable data delivery transport such as UDP)\
    \ or to the\n   increased latency of the packet caused by the need to retransmit\
    \ the\n   packet after a loss (for reliable data delivery such as TCP).\n   Since\
    \ TCP determines the appropriate congestion window to use by\n   gradually increasing\
    \ the window size until it experiences a dropped\n   packet, this causes the queues\
    \ at the bottleneck router to build up.\n   With most packet drop policies at\
    \ the router that are not sensitive\n   to the load placed by each individual\
    \ flow, this means that some of\n   the packets of latency-sensitive flows are\
    \ going to be dropped.\n   Active queue management mechanisms detect congestion\
    \ before the queue\n   overflows, and provide an indication of this congestion\
    \ to the end\n   nodes.  The advantages of active queue management are discussed\
    \ in\n   RFC 2309 [RFC2309].  Active queue management avoids some of the bad\n\
    \   properties of dropping on queue overflow, including the undesirable\n   synchronization\
    \ of loss across multiple flows.  More importantly,\n   active queue management\
    \ means that transport protocols with\n   congestion control (e.g., TCP) do not\
    \ have to rely on buffer overflow\n   as the only indication of congestion.  This\
    \ can reduce unnecessary\n   queueing delay for all traffic sharing that queue.\n\
    \   Active queue management mechanisms may use one of several methods for\n  \
    \ indicating congestion to end-nodes. One is to use packet drops, as is\n   currently\
    \ done. However, active queue management allows the router to\n   separate policies\
    \ of queueing or dropping packets from the policies\n   for indicating congestion.\
    \ Thus, active queue management allows\n   routers to use the Congestion Experienced\
    \ (CE) bit in a packet header\n   as an indication of congestion, instead of relying\
    \ solely on packet\n   drops.\n"
- title: 3. Assumptions and General Principles
  contents:
  - "3. Assumptions and General Principles\n   In this section, we describe some of\
    \ the important design principles\n   and assumptions that guided the design choices\
    \ in this proposal.\n   (1) Congestion may persist over different time-scales.\
    \ The time\n       scales that we are concerned with are congestion events that\
    \ may\n       last longer than a round-trip time.\n   (2) The number of packets\
    \ in an individual flow (e.g., TCP connection\n       or an exchange using UDP)\
    \ may range from a small number of\n       packets to quite a large number. We\
    \ are interested in managing\n       the congestion caused by flows that send\
    \ enough packets so that\n       they are still active when network feedback reaches\
    \ them.\n   (3) New mechanisms for congestion control and avoidance need to co-\n\
    \       exist and cooperate with existing mechanisms for congestion\n       control.\
    \  In particular, new mechanisms have to co-exist with\n       TCP's current methods\
    \ of adapting to congestion and with routers'\n       current practice of dropping\
    \ packets in periods of congestion.\n   (4) Because ECN is likely to be adopted\
    \ gradually, accommodating\n       migration is essential. Some routers may still\
    \ only drop packets\n       to indicate congestion, and some end-systems may not\
    \ be ECN-\n       capable. The most viable strategy is one that accommodates\n\
    \       incremental deployment without having to resort to \"islands\" of\n  \
    \     ECN-capable and non-ECN-capable environments.\n   (5) Asymmetric routing\
    \ is likely to be a normal occurrence in the\n       Internet. The path (sequence\
    \ of links and routers) followed by\n       data packets may be different from\
    \ the path followed by the\n       acknowledgment packets in the reverse direction.\n\
    \   (6) Many routers process the \"regular\" headers in IP packets more\n    \
    \   efficiently than they process the header information in IP\n       options.\
    \  This suggests keeping congestion experienced\n       information in the regular\
    \ headers of an IP packet.\n   (7) It must be recognized that not all end-systems\
    \ will cooperate in\n       mechanisms for congestion control. However, new mechanisms\n\
    \       shouldn't make it easier for TCP applications to disable TCP\n       congestion\
    \ control.  The benefit of lying about participating in\n       new mechanisms\
    \ such as ECN-capability should be small.\n"
- title: 4. Random Early Detection (RED)
  contents:
  - "4. Random Early Detection (RED)\n   Random Early Detection (RED) is a mechanism\
    \ for active queue\n   management that has been proposed to detect incipient congestion\n\
    \   [FJ93], and is currently being deployed in the Internet backbone\n   [RFC2309].\
    \  Although RED is meant to be a general mechanism using one\n   of several alternatives\
    \ for congestion indication, in the current\n   environment of the Internet RED\
    \ is restricted to using packet drops\n   as a mechanism for congestion indication.\
    \  RED drops packets based on\n   the average queue length exceeding a threshold,\
    \ rather than only when\n   the queue overflows.  However, when RED drops packets\
    \ before the\n   queue actually overflows, RED is not forced by memory limitations\
    \ to\n   discard the packet.\n   RED could set a Congestion Experienced (CE) bit\
    \ in the packet header\n   instead of dropping the packet, if such a bit was provided\
    \ in the IP\n   header and understood by the transport protocol.  The use of the\
    \ CE\n   bit would allow the receiver(s) to receive the packet, avoiding the\n\
    \   potential for excessive delays due to retransmissions after packet\n   losses.\
    \  We use the term 'CE packet' to denote a packet that has the\n   CE bit set.\n"
- title: 5. Explicit Congestion Notification in IP
  contents:
  - "5. Explicit Congestion Notification in IP\n   We propose that the Internet provide\
    \ a congestion indication for\n   incipient congestion (as in RED and earlier\
    \ work [RJ90]) where the\n   notification can sometimes be through marking packets\
    \ rather than\n   dropping them.  This would require an ECN field in the IP header\
    \ with\n   two bits.  The ECN-Capable Transport (ECT) bit would be set by the\n\
    \   data sender to indicate that the end-points of the transport protocol\n  \
    \ are ECN-capable.  The CE bit would be set by the router to indicate\n   congestion\
    \ to the end nodes.  Routers that have a packet arriving at\n   a full queue would\
    \ drop the packet, just as they do now.\n   Bits 6 and 7 in the IPv4 TOS octet\
    \ are designated as the ECN field.\n   Bit 6 is designated as the ECT bit, and\
    \ bit 7 is designated as the CE\n   bit.  The IPv4 TOS octet corresponds to the\
    \ Traffic Class octet in\n   IPv6.  The definitions for the IPv4 TOS octet [RFC791]\
    \ and the IPv6\n   Traffic Class octet are intended to be superseded by the DS\n\
    \   (Differentiated Services) Field [DIFFSERV].  Bits 6 and 7 are listed\n   in\
    \ [DIFFSERV] as Currently Unused.  Section 19 gives a brief history\n   of the\
    \ TOS octet.\n   Because of the unstable history of the TOS octet, the use of\
    \ the ECN\n   field as specified in this document cannot be guaranteed to be\n\
    \   backwards compatible with all past uses of these two bits.  The\n   potential\
    \ dangers of this lack of backwards compatibility are\n   discussed in Section\
    \ 19.\n   Upon the receipt by an ECN-Capable transport of a single CE packet,\n\
    \   the congestion control algorithms followed at the end-systems MUST be\n  \
    \ essentially the same as the congestion control response to a *single*\n   dropped\
    \ packet.  For example, for ECN-Capable TCP the source TCP is\n   required to\
    \ halve its congestion window for any window of data\n   containing either a packet\
    \ drop or an ECN indication.  However, we\n   would like to point out some notable\
    \ exceptions in the reaction of\n   the source TCP, related to following the shorter-time-scale\
    \ details\n   of particular implementations of TCP.  For TCP's response to an\
    \ ECN\n   indication, we do not recommend such behavior as the slow-start of\n\
    \   Tahoe TCP in response to a packet drop, or Reno TCP's wait of roughly\n  \
    \ half a round-trip time during Fast Recovery.\n   One reason for requiring that\
    \ the congestion-control response to the\n   CE packet be essentially the same\
    \ as the response to a dropped packet\n   is to accommodate the incremental deployment\
    \ of ECN in both end-\n   systems and in routers.  Some routers may drop ECN-Capable\
    \ packets\n   (e.g., using the same RED policies for congestion detection) while\n\
    \   other routers set the CE bit, for equivalent levels of congestion.\n   Similarly,\
    \ a router might drop a non-ECN-Capable packet but set the\n   CE bit in an ECN-Capable\
    \ packet, for equivalent levels of congestion.\n   Different congestion control\
    \ responses to a CE bit indication and to\n   a packet drop could result in unfair\
    \ treatment for different flows.\n   An additional requirement is that the end-systems\
    \ should react to\n   congestion at most once per window of data (i.e., at most\
    \ once per\n   roundtrip time), to avoid reacting multiple times to multiple\n\
    \   indications of congestion within a roundtrip time.\n   For a router, the CE\
    \ bit of an ECN-Capable packet should only be set\n   if the router would otherwise\
    \ have dropped the packet as an\n   indication of congestion to the end nodes.\
    \ When the router's buffer\n   is not yet full and the router is prepared to drop\
    \ a packet to inform\n   end nodes of incipient congestion, the router should\
    \ first check to\n   see if the ECT bit is set in that packet's IP header.  If\
    \ so, then\n   instead of dropping the packet, the router MAY instead set the\
    \ CE bit\n   in the IP header.\n   An environment where all end nodes were ECN-Capable\
    \ could allow new\n   criteria to be developed for setting the CE bit, and new\
    \ congestion\n   control mechanisms for end-node reaction to CE packets.  However,\n\
    \   this is a research issue, and as such is not addressed in this\n   document.\n\
    \   When a CE packet is received by a router, the CE bit is left\n   unchanged,\
    \ and the packet transmitted as usual. When severe\n   congestion has occurred\
    \ and the router's queue is full, then the\n   router has no choice but to drop\
    \ some packet when a new packet\n   arrives.  We anticipate that such packet losses\
    \ will become\n   relatively infrequent when a majority of end-systems become\
    \ ECN-\n   Capable and participate in TCP or other compatible congestion control\n\
    \   mechanisms. In an adequately-provisioned network in such an ECN-\n   Capable\
    \ environment, packet losses should occur primarily during\n   transients or in\
    \ the presence of non-cooperating sources.\n   We expect that routers will set\
    \ the CE bit in response to incipient\n   congestion as indicated by the average\
    \ queue size, using the RED\n   algorithms suggested in [FJ93, RFC2309].  To the\
    \ best of our\n   knowledge, this is the only proposal currently under discussion\
    \ in\n   the IETF for routers to drop packets proactively, before the buffer\n\
    \   overflows.  However, this document does not attempt to specify a\n   particular\
    \ mechanism for active queue management, leaving that\n   endeavor, if needed,\
    \ to other areas of the IETF.  While ECN is\n   inextricably tied up with active\
    \ queue management at the router, the\n   reverse does not hold; active queue\
    \ management mechanisms have been\n   developed and deployed independently from\
    \ ECN, using packet drops as\n   indications of congestion in the absence of ECN\
    \ in the IP\n   architecture.\n"
- title: 6. Support from the Transport Protocol
  contents:
  - "6. Support from the Transport Protocol\n   ECN requires support from the transport\
    \ protocol, in addition to the\n   functionality given by the ECN field in the\
    \ IP packet header. The\n   transport protocol might require negotiation between\
    \ the endpoints\n   during setup to determine that all of the endpoints are ECN-capable,\n\
    \   so that the sender can set the ECT bit in transmitted packets.\n   Second,\
    \ the transport protocol must be capable of reacting\n   appropriately to the\
    \ receipt of CE packets.  This reaction could be\n   in the form of the data receiver\
    \ informing the data sender of the\n   received CE packet (e.g., TCP), of the\
    \ data receiver unsubscribing to\n   a layered multicast group (e.g., RLM [MJV96]),\
    \ or of some other\n   action that ultimately reduces the arrival rate of that\
    \ flow to that\n   receiver.\n   This document only addresses the addition of\
    \ ECN Capability to TCP,\n   leaving issues of ECN and other transport protocols\
    \ to further\n   research.  For TCP, ECN requires three new mechanisms:  negotiation\n\
    \   between the endpoints during setup to determine if they are both\n   ECN-capable;\
    \ an ECN-Echo flag in the TCP header so that the data\n   receiver can inform\
    \ the data sender when a CE packet has been\n   received; and a Congestion Window\
    \ Reduced (CWR) flag in the TCP\n   header so that the data sender can inform\
    \ the data receiver that the\n   congestion window has been reduced. The support\
    \ required from other\n   transport protocols is likely to be different, particular\
    \ for\n   unreliable or reliable multicast transport protocols, and will have\n\
    \   to be determined as other transport protocols are brought to the IETF\n  \
    \ for standardization.\n"
- title: 6.1. TCP
  contents:
  - "6.1. TCP\n   The following sections describe in detail the proposed use of ECN\
    \ in\n   TCP.  This proposal is described in essentially the same form in\n  \
    \ [Floyd94]. We assume that the source TCP uses the standard congestion\n   control\
    \ algorithms of Slow-start, Fast Retransmit and Fast Recovery\n   [RFC 2001].\n\
    \   This proposal specifies two new flags in the Reserved field of the\n   TCP\
    \ header.  The TCP mechanism for negotiating ECN-Capability uses\n   the ECN-Echo\
    \ flag in the TCP header.  (This was called the ECN Notify\n   flag in some earlier\
    \ documents.)  Bit 9 in the Reserved field of the\n   TCP header is designated\
    \ as the ECN-Echo flag.  The location of the\n   6-bit Reserved field in the TCP\
    \ header is shown in Figure 3 of RFC\n   793 [RFC793].\n   To enable the TCP receiver\
    \ to determine when to stop setting the\n   ECN-Echo flag, we introduce a second\
    \ new flag in the TCP header, the\n   Congestion Window Reduced (CWR) flag.  The\
    \ CWR flag is assigned to\n   Bit 8 in the Reserved field of the TCP header.\n\
    \   The use of these flags is described in the sections below.\n"
- title: 6.1.1.  TCP Initialization
  contents:
  - "6.1.1.  TCP Initialization\n   In the TCP connection setup phase, the source\
    \ and destination TCPs\n   exchange information about their desire and/or capability\
    \ to use ECN.\n   Subsequent to the completion of this negotiation, the TCP sender\
    \ sets\n   the ECT bit in the IP header of data packets to indicate to the\n \
    \  network that the transport is capable and willing to participate in\n   ECN\
    \ for this packet. This will indicate to the routers that they may\n   mark this\
    \ packet with the CE bit, if they would like to use that as a\n   method of congestion\
    \ notification. If the TCP connection does not\n   wish to use ECN notification\
    \ for a particular packet, the sending TCP\n   sets the ECT bit equal to 0 (i.e.,\
    \ not set), and the TCP receiver\n   ignores the CE bit in the received packet.\n\
    \   When a node sends a TCP SYN packet, it may set the ECN-Echo and CWR\n   flags\
    \ in the TCP header.  For a SYN packet, the setting of both the\n   ECN-Echo and\
    \ CWR flags are defined as an indication that the sending\n   TCP is ECN-Capable,\
    \ rather than as an indication of congestion or of\n   response to congestion.\
    \ More precisely, a SYN packet with both the\n   ECN-Echo and CWR flags set indicates\
    \ that the TCP implementation\n   transmitting the SYN packet will participate\
    \ in ECN as both a sender\n   and receiver.  As a receiver, it will respond to\
    \ incoming data\n   packets that have the CE bit set in the IP header by setting\
    \ the\n   ECN-Echo flag in outgoing TCP Acknowledgement (ACK) packets.  As a\n\
    \   sender, it will respond to incoming packets that have the ECN-Echo\n   flag\
    \ set by reducing the congestion window when appropriate.\n   When a node sends\
    \ a SYN-ACK packet, it may set the ECN-Echo flag, but\n   it does not set the\
    \ CWR flag.  For a SYN-ACK packet, the pattern of\n   the ECN-Echo flag set and\
    \ the CWR flag not set in the TCP header is\n   defined as an indication that\
    \ the TCP transmitting the SYN-ACK packet\n   is ECN-Capable.\n   There is the\
    \ question of why we chose to have the TCP sending the SYN\n   set two ECN-related\
    \ flags in the Reserved field of the TCP header for\n   the SYN packet, while\
    \ the responding TCP sending the SYN-ACK sets\n   only one ECN-related flag in\
    \ the SYN-ACK packet.  This asymmetry is\n   necessary for the robust negotiation\
    \ of ECN-capability with deployed\n   TCP implementations.  There exists at least\
    \ one TCP implementation in\n   which TCP receivers set the Reserved field of\
    \ the TCP header in ACK\n   packets (and hence the SYN-ACK) simply to reflect\
    \ the Reserved field\n   of the TCP header in the received data packet.  Because\
    \ the TCP SYN\n   packet sets the ECN-Echo and CWR flags to indicate ECN-capability,\n\
    \   while the SYN-ACK packet sets only the ECN-Echo flag, the sending TCP\n  \
    \ correctly interprets a receiver's reflection of its own flags in the\n   Reserved\
    \ field as an indication that the receiver is not ECN-capable.\n"
- title: 6.1.2.  The TCP Sender
  contents:
  - "6.1.2.  The TCP Sender\n   For a TCP connection using ECN, data packets are transmitted\
    \ with the\n   ECT bit set in the IP header (set to a \"1\").  If the sender receives\n\
    \   an ECN-Echo ACK packet (that is, an ACK packet with the ECN-Echo flag\n  \
    \ set in the TCP header), then the sender knows that congestion was\n   encountered\
    \ in the network on the path from the sender to the\n   receiver.  The indication\
    \ of congestion should be treated just as a\n   congestion loss in non-ECN-Capable\
    \ TCP. That is, the TCP source\n   halves the congestion window \"cwnd\" and reduces\
    \ the slow start\n   threshold \"ssthresh\".  The sending TCP does NOT increase\
    \ the\n   congestion window in response to the receipt of an ECN-Echo ACK\n  \
    \ packet.\n   A critical condition is that TCP does not react to congestion\n\
    \   indications more than once every window of data (or more loosely,\n   more\
    \ than once every round-trip time). That is, the TCP sender's\n   congestion window\
    \ should be reduced only once in response to a series\n   of dropped and/or CE\
    \ packets from a single window of data, In\n   addition, the TCP source should\
    \ not decrease the slow-start\n   threshold, ssthresh, if it has been decreased\
    \ within the last round\n   trip time.  However, if any retransmitted packets\
    \ are dropped or have\n   the CE bit set, then this is interpreted by the source\
    \ TCP as a new\n   instance of congestion.\n   After the source TCP reduces its\
    \ congestion window in response to a\n   CE packet, incoming acknowledgements\
    \ that continue to arrive can\n   \"clock out\" outgoing packets as allowed by\
    \ the reduced congestion\n   window.  If the congestion window consists of only\
    \ one MSS (maximum\n   segment size), and the sending TCP receives an ECN-Echo\
    \ ACK packet,\n   then the sending TCP should in principle still reduce its congestion\n\
    \   window in half. However, the value of the congestion window is\n   bounded\
    \ below by a value of one MSS.  If the sending TCP were to\n   continue to send,\
    \ using a congestion window of 1 MSS, this results in\n   the transmission of\
    \ one packet per round-trip time.  We believe it is\n   desirable to still reduce\
    \ the sending rate of the TCP sender even\n   further, on receipt of an ECN-Echo\
    \ packet when the congestion window\n   is one.  We use the retransmit timer as\
    \ a means to reduce the rate\n   further in this circumstance.  Therefore, the\
    \ sending TCP should also\n   reset the retransmit timer on receiving the ECN-Echo\
    \ packet when the\n   congestion window is one.  The sending TCP will then be\
    \ able to send\n   a new packet when the retransmit timer expires.\n   [Floyd94]\
    \ discusses TCP's response to ECN in more detail.  [Floyd98]\n   discusses the\
    \ validation test in the ns simulator, which illustrates\n   a wide range of ECN\
    \ scenarios. These scenarios include the following:\n   an ECN followed by another\
    \ ECN, a Fast Retransmit, or a Retransmit\n   Timeout; a Retransmit Timeout or\
    \ a Fast Retransmit followed by an\n   ECN, and a congestion window of one packet\
    \ followed by an ECN.\n   TCP follows existing algorithms for sending data packets\
    \ in response\n   to incoming ACKs, multiple duplicate acknowledgements, or retransmit\n\
    \   timeouts [RFC2001].\n"
- title: 6.1.3.  The TCP Receiver
  contents:
  - "6.1.3.  The TCP Receiver\n   When TCP receives a CE data packet at the destination\
    \ end-system, the\n   TCP data receiver sets the ECN-Echo flag in the TCP header\
    \ of the\n   subsequent ACK packet.  If there is any ACK withholding implemented,\n\
    \   as in current \"delayed-ACK\" TCP implementations where the TCP\n   receiver\
    \ can send an ACK for two arriving data packets, then the\n   ECN-Echo flag in\
    \ the ACK packet will be set to the OR of the CE bits\n   of all of the data packets\
    \ being acknowledged.  That is, if any of\n   the received data packets are CE\
    \ packets, then the returning ACK has\n   the ECN-Echo flag set.\n   To provide\
    \ robustness against the possibility of a dropped ACK packet\n   carrying an ECN-Echo\
    \ flag, the TCP receiver must set the ECN-Echo\n   flag in a series of ACK packets.\
    \ The TCP receiver uses the CWR flag\n   to determine when to stop setting the\
    \ ECN-Echo flag.\n   When an ECN-Capable TCP reduces its congestion window for\
    \ any reason\n   (because of a retransmit timeout, a Fast Retransmit, or in response\n\
    \   to an ECN Notification), the TCP sets the CWR flag in the TCP header\n   of\
    \ the first data packet sent after the window reduction.  If that\n   data packet\
    \ is dropped in the network, then the sending TCP will have\n   to reduce the\
    \ congestion window again and retransmit the dropped\n   packet.  Thus, the Congestion\
    \ Window Reduced message is reliably\n   delivered to the data receiver.\n   After\
    \ a TCP receiver sends an ACK packet with the ECN-Echo bit set,\n   that TCP receiver\
    \ continues to set the ECN-Echo flag in ACK packets\n   until it receives a CWR\
    \ packet (a packet with the CWR flag set).\n   After the receipt of the CWR packet,\
    \ acknowledgements for subsequent\n   non-CE data packets do not have the ECN-Echo\
    \ flag set. If another CE\n   packet is received by the data receiver, the receiver\
    \ would once\n   again send ACK packets with the ECN-Echo flag set.  While the\
    \ receipt\n   of a CWR packet does not guarantee that the data sender received\
    \ the\n   ECN-Echo message, this does indicate that the data sender reduced its\n\
    \   congestion window at some point *after* it sent the data packet for\n   which\
    \ the CE bit was set.\n   We have already specified that a TCP sender reduces\
    \ its congestion\n   window at most once per window of data.  This mechanism requires\
    \ some\n   care to make sure that the sender reduces its congestion window at\n\
    \   most once per ECN indication, and that multiple ECN messages over\n   several\
    \ successive windows of data are properly reported to the ECN\n   sender.  This\
    \ is discussed further in [Floyd98].\n"
- title: 6.1.4. Congestion on the ACK-path
  contents:
  - "6.1.4. Congestion on the ACK-path\n   For the current generation of TCP congestion\
    \ control algorithms, pure\n   acknowledgement packets (e.g., packets that do\
    \ not contain any\n   accompanying data) should be sent with the ECT bit off.\
    \ Current TCP\n   receivers have no mechanisms for reducing traffic on the ACK-path\
    \ in\n   response to congestion notification.  Mechanisms for responding to\n\
    \   congestion on the ACK-path are areas for current and future research.\n  \
    \ (One simple possibility would be for the sender to reduce its\n   congestion\
    \ window when it receives a pure ACK packet with the CE bit\n   set). For current\
    \ TCP implementations, a single dropped ACK generally\n   has only a very small\
    \ effect on the TCP's sending rate.\n"
- title: 7. Summary of changes required in IP and TCP
  contents:
  - "7. Summary of changes required in IP and TCP\n   Two bits need to be specified\
    \ in the IP header, the ECN-Capable\n   Transport (ECT) bit and the Congestion\
    \ Experienced (CE) bit.  The ECT\n   bit set to \"0\" indicates that the transport\
    \ protocol will ignore the\n   CE bit.  This is the default value for the ECT\
    \ bit.  The ECT bit set\n   to \"1\" indicates that the transport protocol is\
    \ willing and able to\n   participate in ECN.\n   The default value for the CE\
    \ bit is \"0\".  The router sets the CE bit\n   to \"1\" to indicate congestion\
    \ to the end nodes.  The CE bit in a\n   packet header should never be reset by\
    \ a router from \"1\" to \"0\".\n   TCP requires three changes, a negotiation\
    \ phase during setup to\n   determine if both end nodes are ECN-capable, and two\
    \ new flags in the\n   TCP header, from the \"reserved\" flags in the TCP flags\
    \ field.  The\n   ECN-Echo flag is used by the data receiver to inform the data\
    \ sender\n   of a received CE packet.  The Congestion Window Reduced flag is used\n\
    \   by the data sender to inform the data receiver that the congestion\n   window\
    \ has been reduced.\n"
- title: 8. Non-relationship to ATM's EFCI indicator or Frame Relay's FECN
  contents:
  - "8. Non-relationship to ATM's EFCI indicator or Frame Relay's FECN\n   Since the\
    \ ATM and Frame Relay mechanisms for congestion indication\n   have typically\
    \ been defined without any notion of average queue size\n   as the basis for determining\
    \ that an intermediate node is congested,\n   we believe that they provide a very\
    \ noisy signal. The TCP-sender\n   reaction specified in this draft for ECN is\
    \ NOT the appropriate\n   reaction for such a noisy signal of congestion notification.\
    \ It is\n   our expectation that ATM's EFCI and Frame Relay's FECN mechanisms\n\
    \   would be phased out over time within the ATM network.  However, if\n   the\
    \ routers that interface to the ATM network have a way of\n   maintaining the\
    \ average queue at the interface, and use it to come to\n   a reliable determination\
    \ that the ATM subnet is congested, they may\n   use the ECN notification that\
    \ is defined here.\n   We emphasize that a *single* packet with the CE bit set\
    \ in an IP\n   packet causes the transport layer to respond, in terms of congestion\n\
    \   control, as it would to a packet drop.  As such, the CE bit is not a\n   good\
    \ match to a transient signal such as one based on the\n   instantaneous queue\
    \ size.  However, experiments in techniques at\n   layer 2 (e.g., in ATM switches\
    \ or Frame Relay switches) should be\n   encouraged.  For example, using a scheme\
    \ such as RED (where packet\n   marking is based on the average queue length exceeding\
    \ a threshold),\n   layer 2 devices could provide a reasonably reliable indication\
    \ of\n   congestion.  When all the layer 2 devices in a path set that layer's\n\
    \   own Congestion Experienced bit (e.g., the EFCI bit for ATM, the FECN\n   bit\
    \ in Frame Relay) in this reliable manner, then the interface\n   router to the\
    \ layer 2 network could copy the state of that layer 2\n   Congestion Experienced\
    \ bit into the CE bit in the IP header.  We\n   recognize that this is not the\
    \ current practice, nor is it in current\n   standards. However, encouraging experimentation\
    \ in this manner may\n   provide the information needed to enable evolution of\
    \ existing layer\n   2 mechanisms to provide a more reliable means of congestion\n\
    \   indication, when they use a single bit for indicating congestion.\n"
- title: 9. Non-compliance by the End Nodes
  contents:
  - "9. Non-compliance by the End Nodes\n   This section discusses concerns about\
    \ the vulnerability of ECN to\n   non-compliant end-nodes (i.e., end nodes that\
    \ set the ECT bit in\n   transmitted packets but do not respond to received CE\
    \ packets).  We\n   argue that the addition of ECN to the IP architecture would\
    \ not\n   significantly increase the current vulnerability of the architecture\n\
    \   to unresponsive flows.\n   Even for non-ECN environments, there are serious\
    \ concerns about the\n   damage that can be done by non-compliant or unresponsive\
    \ flows (that\n   is, flows that do not respond to congestion control indications\
    \ by\n   reducing their arrival rate at the congested link).  For example, an\n\
    \   end-node could \"turn off congestion control\" by not reducing its\n   congestion\
    \ window in response to packet drops. This is a concern for\n   the current Internet.\
    \  It has been argued that routers will have to\n   deploy mechanisms to detect\
    \ and differentially treat packets from\n   non-compliant flows.  It has also\
    \ been argued that techniques such as\n   end-to-end per-flow scheduling and isolation\
    \ of one flow from\n   another, differentiated services, or end-to-end reservations\
    \ could\n   remove some of the more damaging effects of unresponsive flows.\n\
    \   It has been argued that dropping packets in itself may be an adequate\n  \
    \ deterrent for non-compliance, and that the use of ECN removes this\n   deterrent.\
    \  We would argue in response that (1) ECN-capable routers\n   preserve packet-dropping\
    \ behavior in times of high congestion; and\n   (2) even in times of high congestion,\
    \ dropping packets in itself is\n   not an adequate deterrent for non-compliance.\n\
    \   First, ECN-Capable routers will only mark packets (as opposed to\n   dropping\
    \ them) when the packet marking rate is reasonably low. During\n   periods where\
    \ the average queue size exceeds an upper threshold, and\n   therefore the potential\
    \ packet marking rate would be high, our\n   recommendation is that routers drop\
    \ packets rather then set the CE\n   bit in packet headers.\n   During the periods\
    \ of low or moderate packet marking rates when ECN\n   would be deployed, there\
    \ would be little deterrent effect on\n   unresponsive flows of dropping rather\
    \ than marking those packets. For\n   example, delay-insensitive flows using reliable\
    \ delivery might have\n   an incentive to increase rather than to decrease their\
    \ sending rate\n   in the presence of dropped packets.  Similarly, delay-sensitive\
    \ flows\n   using unreliable delivery might increase their use of FEC in response\n\
    \   to an increased packet drop rate, increasing rather than decreasing\n   their\
    \ sending rate.  For the same reasons, we do not believe that\n   packet dropping\
    \ itself is an effective deterrent for non-compliance\n   even in an environment\
    \ of high packet drop rates.\n   Several methods have been proposed to identify\
    \ and restrict non-\n   compliant or unresponsive flows. The addition of ECN to\
    \ the network\n   environment would not in any way increase the difficulty of\
    \ designing\n   and deploying such mechanisms. If anything, the addition of ECN\
    \ to\n   the architecture would make the job of identifying unresponsive flows\n\
    \   slightly easier.  For example, in an ECN-Capable environment routers\n   are\
    \ not limited to information about packets that are dropped or have\n   the CE\
    \ bit set at that router itself; in such an environment routers\n   could also\
    \ take note of arriving CE packets that indicate congestion\n   encountered by\
    \ that packet earlier in the path.\n"
- title: 10. Non-compliance in the Network
  contents:
  - "10. Non-compliance in the Network\n   The breakdown of effective congestion control\
    \ could be caused not\n   only by a non-compliant end-node, but also by the loss\
    \ of the\n   congestion indication in the network itself.  This could happen\n\
    \   through a rogue or broken router that set the ECT bit in a packet\n   from\
    \ a non-ECN-capable transport, or \"erased\" the CE bit in arriving\n   packets.\
    \  As one example, a rogue or broken router that \"erased\" the\n   CE bit in\
    \ arriving CE packets would prevent that indication of\n   congestion from reaching\
    \ downstream receivers.  This could result in\n   the failure of congestion control\
    \ for that flow and a resulting\n   increase in congestion in the network, ultimately\
    \ resulting in\n   subsequent packets dropped for this flow as the average queue\
    \ size\n   increased at the congested gateway.\n   The actions of a rogue or broken\
    \ router could also result in an\n   unnecessary indication of congestion to the\
    \ end-nodes.  These actions\n   can include a router dropping a packet or setting\
    \ the CE bit in the\n   absence of congestion. From a congestion control point\
    \ of view,\n   setting the CE bit in the absence of congestion by a non-compliant\n\
    \   router would be no different than a router dropping a packet\n   unecessarily.\
    \ By \"erasing\" the ECT bit of a packet that is later\n   dropped in the network,\
    \ a router's actions could result in an\n   unnecessary packet drop for that packet\
    \ later in the network.\n   Concerns regarding the loss of congestion indications\
    \ from\n   encapsulated, dropped, or corrupted packets are discussed below.\n"
- title: 10.1. Encapsulated packets
  contents:
  - "10.1. Encapsulated packets\n   Some care is required to handle the CE and ECT\
    \ bits appropriately\n   when packets are encapsulated and de-encapsulated for\
    \ tunnels.\n   When a packet is encapsulated, the following rules apply regarding\n\
    \   the ECT bit.  First, if the ECT bit in the encapsulated ('inside')\n   header\
    \ is a 0, then the ECT bit in the encapsulating ('outside')\n   header MUST be\
    \ a 0.  If the ECT bit in the inside header is a 1, then\n   the ECT bit in the\
    \ outside header SHOULD be a 1.\n   When a packet is de-encapsulated, the following\
    \ rules apply regarding\n   the CE bit.  If the ECT bit is a 1 in both the inside\
    \ and the outside\n   header, then the CE bit in the outside header MUST be ORed\
    \ with the\n   CE bit in the inside header.  (That is, in this case a CE bit of\
    \ 1 in\n   the outside header must be copied to the inside header.)  If the ECT\n\
    \   bit in either header is a 0, then the CE bit in the outside header is\n  \
    \ ignored.  This requirement for the treatment of de-encapsulated\n   packets\
    \ does not currently apply to IPsec tunnels.\n   A specific example of the use\
    \ of ECN with encapsulation occurs when a\n   flow wishes to use ECN-capability\
    \ to avoid the danger of an\n   unnecessary packet drop for the encapsulated packet\
    \ as a result of\n   congestion at an intermediate node in the tunnel.  This functionality\n\
    \   can be supported by copying the ECN field in the inner IP header to\n   the\
    \ outer IP header upon encapsulation, and using the ECN field in\n   the outer\
    \ IP header to set the ECN field in the inner IP header upon\n   decapsulation.\
    \  This effectively allows routers along the tunnel to\n   cause the CE bit to\
    \ be set in the ECN field of the unencapsulated IP\n   header of an ECN-capable\
    \ packet when such routers experience\n   congestion.\n"
- title: 10.2.  IPsec Tunnel Considerations
  contents:
  - "10.2.  IPsec Tunnel Considerations\n   The IPsec protocol, as defined in [ESP,\
    \ AH], does not include the IP\n   header's ECN field in any of its cryptographic\
    \ calculations (in the\n   case of tunnel mode, the outer IP header's ECN field\
    \ is not\n   included).  Hence modification of the ECN field by a network node\
    \ has\n   no effect on IPsec's end-to-end security, because it cannot cause any\n\
    \   IPsec integrity check to fail.  As a consequence, IPsec does not\n   provide\
    \ any defense against an adversary's modification of the ECN\n   field (i.e.,\
    \ a man-in-the-middle attack), as the adversary's\n   modification will also have\
    \ no effect on IPsec's end-to-end security.\n   In some environments, the ability\
    \ to modify the ECN field without\n   affecting IPsec integrity checks may constitute\
    \ a covert channel; if\n   it is necessary to eliminate such a channel or reduce\
    \ its bandwidth,\n   then the outer IP header's ECN field can be zeroed at the\
    \ tunnel\n   ingress and egress nodes.\n   The IPsec protocol currently requires\
    \ that the inner header's ECN\n   field not be changed by IPsec decapsulation\
    \ processing at a tunnel\n   egress node.  This ensures that an adversary's modifications\
    \ to the\n   ECN field cannot be used to launch theft- or denial-of-service\n\
    \   attacks across an IPsec tunnel endpoint, as any such modifications\n   will\
    \ be discarded at the tunnel endpoint.  This document makes no\n   change to that\
    \ IPsec requirement. As a consequence of the current\n   specification of the\
    \ IPsec protocol, we suggest that experiments with\n   ECN not be carried out\
    \ for flows that will undergo IPsec tunneling at\n   the present time.\n   If\
    \ the IPsec specifications are modified in the future to permit a\n   tunnel egress\
    \ node to modify the ECN field in an inner IP header\n   based on the ECN field\
    \ value in the outer header (e.g., copying part\n   or all of the outer ECN field\
    \ to the inner ECN field), or to permit\n   the ECN field of the outer IP header\
    \ to be zeroed during\n   encapsulation, then experiments with ECN may be used\
    \ in combination\n   with IPsec tunneling.\n   This discussion of ECN and IPsec\
    \ tunnel considerations draws heavily\n   on related discussions and documents\
    \ from the Differentiated Services\n   Working Group.\n"
- title: 10.3.  Dropped or Corrupted Packets
  contents:
  - "10.3.  Dropped or Corrupted Packets\n   An additional issue concerns a packet\
    \ that has the CE bit set at one\n   router and is dropped by a subsequent router.\
    \  For the proposed use\n   for ECN in this paper (that is, for a transport protocol\
    \ such as TCP\n   for which a dropped data packet is an indication of congestion),\
    \ end\n   nodes detect dropped data packets, and the congestion response of the\n\
    \   end nodes to a dropped data packet is at least as strong as the\n   congestion\
    \ response to a received CE packet.\n   However, transport protocols such as TCP\
    \ do not necessarily detect\n   all packet drops, such as the drop of a \"pure\"\
    \ ACK packet; for\n   example, TCP does not reduce the arrival rate of subsequent\
    \ ACK\n   packets in response to an earlier dropped ACK packet.  Any proposal\n\
    \   for extending ECN-Capability to such packets would have to address\n   concerns\
    \ raised by CE packets that were later dropped in the network.\n   Similarly,\
    \ if a CE packet is dropped later in the network due to\n   corruption (bit errors),\
    \ the end nodes should still invoke congestion\n   control, just as TCP would\
    \ today in response to a dropped data\n   packet. This issue of corrupted CE packets\
    \ would have to be\n   considered in any proposal for the network to distinguish\
    \ between\n   packets dropped due to corruption, and packets dropped due to\n\
    \   congestion or buffer overflow.\n"
- title: 11. A summary of related work.
  contents:
  - "11. A summary of related work.\n   [Floyd94] considers the advantages and drawbacks\
    \ of adding ECN to the\n   TCP/IP architecture.  As shown in the simulation-based\
    \ comparisons,\n   one advantage of ECN is to avoid unnecessary packet drops for\
    \ short\n   or delay-sensitive TCP connections.  A second advantage of ECN is\
    \ in\n   avoiding some unnecessary retransmit timeouts in TCP.  This paper\n \
    \  discusses in detail the integration of ECN into TCP's congestion\n   control\
    \ mechanisms.  The possible disadvantages of ECN discussed in\n   the paper are\
    \ that a non-compliant TCP connection could falsely\n   advertise itself as ECN-capable,\
    \ and that a TCP ACK packet carrying\n   an ECN-Echo message could itself be dropped\
    \ in the network.  The\n   first of these two issues is discussed in Section 8\
    \ of this document,\n   and the second is addressed by the proposal in Section\
    \ 5.1.3 for a\n   CWR flag in the TCP header.\n   [CKLTZ97] reports on an experimental\
    \ implementation of ECN in IPv6.\n   The experiments include an implementation\
    \ of ECN in an existing\n   implementation of RED for FreeBSD.  A number of experiments\
    \ were run\n   to demonstrate the control of the average queue size in the router,\n\
    \   the performance of ECN for a single TCP connection as a congested\n   router,\
    \ and fairness with multiple competing TCP connections.  One\n   conclusion of\
    \ the experiments is that dropping packets from a bulk-\n   data transfer can\
    \ degrade performance much more severely than marking\n   packets.\n   Because\
    \ the experimental implementation in [CKLTZ97] predates some of\n   the developments\
    \ in this document, the implementation does not\n   conform to this document in\
    \ all respects.  For example, in the\n   experimental implementation the CWR flag\
    \ is not used, but instead the\n   TCP receiver sends the ECN-Echo bit on a single\
    \ ACK packet.\n   [K98] and [CKLTZ98] build on [CKLTZ97] to further analyze the\n\
    \   benefits of ECN for TCP. The conclusions are that ECN TCP gets\n   moderately\
    \ better throughput than non-ECN TCP; that ECN TCP flows are\n   fair towards\
    \ non-ECN TCP flows; and that ECN TCP is robust with two-\n   way traffic, congestion\
    \ in both directions, and with multiple\n   congested gateways.  Experiments with\
    \ many short web transfers show\n   that, while most of the short connections\
    \ have similar transfer times\n   with or without ECN, a small percentage of the\
    \ short connections have\n   very long transfer times for the non-ECN experiments\
    \ as compared to\n   the ECN experiments.  This increased transfer time is particularly\n\
    \   dramatic for those short connections that have their first packet\n   dropped\
    \ in the non-ECN experiments, and that therefore have to wait\n   six seconds\
    \ for the retransmit timer to expire.\n   The ECN Web Page [ECN] has pointers\
    \ to other implementations of ECN\n   in progress.\n"
- title: 12. Conclusions
  contents:
  - "12. Conclusions\n   Given the current effort to implement RED, we believe this\
    \ is the\n   right time for router vendors to examine how to implement congestion\n\
    \   avoidance mechanisms that do not depend on packet drops alone.  With\n   the\
    \ increased deployment of applications and transports sensitive to\n   the delay\
    \ and loss of a single packet (e.g., realtime traffic, short\n   web transfers),\
    \ depending on packet loss as a normal congestion\n   notification mechanism appears\
    \ to be insufficient (or at the very\n   least, non-optimal).\n"
- title: 13. Acknowledgements
  contents:
  - "13. Acknowledgements\n   Many people have made contributions to this RFC.  In\
    \ particular, we\n   would like to thank Kenjiro Cho for the proposal for the\
    \ TCP\n   mechanism for negotiating ECN-Capability, Kevin Fall for the proposal\n\
    \   of the CWR bit, Steve Blake for material on IPv4 Header Checksum\n   Recalculation,\
    \ Jamal Hadi Salim for discussions of ECN issues, and\n   Steve Bellovin, Jim\
    \ Bound, Brian Carpenter, Paul Ferguson, Stephen\n   Kent, Greg Minshall, and\
    \ Vern Paxson for discussions of security\n   issues.  We also thank the Internet\
    \ End-to-End Research Group for\n   ongoing discussions of these issues.\n"
- title: 14. References
  contents:
  - "14. References\n   [AH]         Kent, S. and R. Atkinson, \"IP Authentication\
    \ Header\",\n                RFC 2402, November 1998.\n   [B97]        Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [CKLT98]     Chen, C., Krishnan, H., Leung,\
    \ S., Tang, N., and Zhang,\n                L., \"Implementing ECN for TCP/IPv6\"\
    , presentation to the\n                ECN BOF at the L.A. IETF, March 1998, URL\n\
    \                \"http://www.cs.ucla.edu/~hari/ecn-ietf.ps\".\n   [DIFFSERV]\
    \   Nichols, K., Blake, S., Baker, F. and D.  Black,\n                \"Definition\
    \ of the Differentiated Services Field (DS\n                Field) in the IPv4\
    \ and IPv6 Headers\", RFC 2474, December\n                1998.\n   [ECN]    \
    \    \"The ECN Web Page\", URL \"http://www-\n                nrg.ee.lbl.gov/floyd/ecn.html\"\
    .\n   [ESP]        Kent, S. and R. Atkinson, \"IP Encapsulating Security\n   \
    \             Payload\", RFC 2406, November 1998.\n   [FJ93]       Floyd, S.,\
    \ and Jacobson, V., \"Random Early Detection\n                gateways for Congestion\
    \ Avoidance\", IEEE/ACM\n                Transactions on Networking, V.1 N.4,\
    \ August 1993, p.\n                397-413.  URL \"ftp://ftp.ee.lbl.gov/papers/early.pdf\"\
    .\n   [Floyd94]    Floyd, S., \"TCP and Explicit Congestion Notification\",\n\
    \                ACM Computer Communication Review, V. 24 N. 5, October\n    \
    \            1994, p. 10-23.  URL\n                \"ftp://ftp.ee.lbl.gov/papers/tcp_ecn.4.ps.Z\"\
    .\n   [Floyd97]    Floyd, S., and Fall, K., \"Router Mechanisms to Support\n \
    \               End-to-End Congestion Control\", Technical report,\n         \
    \       February 1997.  URL \"http://www-\n                nrg.ee.lbl.gov/floyd/end2end-paper.html\"\
    .\n   [Floyd98]    Floyd, S., \"The ECN Validation Test in the NS\n          \
    \      Simulator\", URL \"http://www-mash.cs.berkeley.edu/ns/\",\n           \
    \     test tcl/test/test-all-ecn.\n   [K98]        Krishnan, H., \"Analyzing Explicit\
    \ Congestion\n                Notification (ECN) benefits for TCP\", Master's\
    \ thesis,\n                UCLA, 1998, URL\n                \"http://www.cs.ucla.edu/~hari/software/ecn/\n\
    \                ecn_report.ps.gz\".\n   [FRED]       Lin, D., and Morris, R.,\
    \ \"Dynamics of Random Early\n                Detection\", SIGCOMM '97, September\
    \ 1997.  URL\n                \"http://www.inria.fr/rodeo/sigcomm97/program.html#ab078\"\
    .\n   [Jacobson88] V. Jacobson, \"Congestion Avoidance and Control\", Proc.\n\
    \                ACM SIGCOMM '88, pp. 314-329.  URL\n                \"ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z\"\
    .\n   [Jacobson90] V. Jacobson, \"Modified TCP Congestion Avoidance\n        \
    \        Algorithm\", Message to end2end-interest mailing list,\n            \
    \    April 1990.  URL\n                \"ftp://ftp.ee.lbl.gov/email/vanj.90apr30.txt\"\
    .\n   [MJV96]      S. McCanne, V. Jacobson, and M. Vetterli, \"Receiver-\n   \
    \             driven Layered Multicast\", SIGCOMM '96, August 1996, pp.\n    \
    \            117-130.\n   [RFC791]     Postel, J., \"Internet Protocol\", STD\
    \ 5, RFC 791,\n                September 1981.\n   [RFC793]     Postel, J., \"\
    Transmission Control Protocol\", STD 7, RFC\n                793, September 1981.\n\
    \   [RFC1141]    Mallory, T. and A. Kullberg, \"Incremental Updating of\n    \
    \            the Internet Checksum\", RFC 1141, January 1990.\n   [RFC1349]  \
    \  Almquist, P., \"Type of Service in the Internet Protocol\n                Suite\"\
    , RFC 1349, July 1992.\n   [RFC1455]    Eastlake, D., \"Physical Link Security\
    \ Type of Service\",\n                RFC 1455, May 1993.\n   [RFC2001]    Stevens,\
    \ W., \"TCP Slow Start, Congestion Avoidance, Fast\n                Retransmit,\
    \ and Fast Recovery Algorithms\", RFC 2001,\n                January 1997.\n \
    \  [RFC2309]    Braden, B., Clark, D., Crowcroft, J., Davie, B.,\n           \
    \     Deering, S., Estrin, D., Floyd, S., Jacobson, V.,\n                Minshall,\
    \ G., Partridge, C., Peterson, L., Ramakrishnan,\n                K., Shenker,\
    \ S., Wroclawski, J. and L. Zhang,\n                \"Recommendations on Queue\
    \ Management and Congestion\n                Avoidance in the Internet\", RFC\
    \ 2309, April 1998.\n   [RJ90]       K. K. Ramakrishnan and Raj Jain, \"A Binary\
    \ Feedback\n                Scheme for Congestion Avoidance in Computer Networks\"\
    ,\n                ACM Transactions on Computer Systems, Vol.8, No.2, pp.\n  \
    \              158-181, May 1990.\n"
- title: 15. Security Considerations
  contents:
  - "15. Security Considerations\n   Security considerations have been discussed in\
    \ Section 9.\n"
- title: 16. IPv4 Header Checksum Recalculation
  contents:
  - "16. IPv4 Header Checksum Recalculation\n   IPv4 header checksum recalculation\
    \ is an issue with some high-end\n   router architectures using an output-buffered\
    \ switch, since most if\n   not all of the header manipulation is performed on\
    \ the input side of\n   the switch, while the ECN decision would need to be made\
    \ local to the\n   output buffer. This is not an issue for IPv6, since there is\
    \ no IPv6\n   header checksum. The IPv4 TOS octet is the last byte of a 16-bit\n\
    \   half-word.\n   RFC 1141 [RFC1141] discusses the incremental updating of the\
    \ IPv4\n   checksum after the TTL field is decremented.  The incremental\n   updating\
    \ of the IPv4 checksum after the CE bit was set would work as\n   follows: Let\
    \ HC be the original header checksum, and let HC' be the\n   new header checksum\
    \ after the CE bit has been set.  Then for header\n   checksums calculated with\
    \ one's complement subtraction, HC' would be\n   recalculated as follows:\n  \
    \    HC' = { HC - 1     HC > 1\n            { 0x0000     HC = 1\n   For header\
    \ checksums calculated on two's complement machines, HC'\n   would be recalculated\
    \ as follows after the CE bit was set:\n       HC' = { HC - 1     HC > 0\n   \
    \          { 0xFFFE     HC = 0\n"
- title: 17. The motivation for the ECT bit.
  contents:
  - "17. The motivation for the ECT bit.\n   The need for the ECT bit is motivated\
    \ by the fact that ECN will be\n   deployed incrementally in an Internet where\
    \ some transport protocols\n   and routers understand ECN and some do not. With\
    \ the ECT bit, the\n   router can drop packets from flows that are not ECN-capable,\
    \ but can\n   *instead* set the CE bit in flows that *are* ECN-capable. Because\
    \ the\n   ECT bit allows an end node to have the CE bit set in a packet\n   *instead*\
    \ of having the packet dropped, an end node might have some\n   incentive to deploy\
    \ ECN.\n   If there was no ECT indication, then the router would have to set the\n\
    \   CE bit for packets from both ECN-capable and non-ECN-capable flows.\n   In\
    \ this case, there would be no incentive for end-nodes to deploy\n   ECN, and\
    \ no viable path of incremental deployment from a non-ECN\n   world to an ECN-capable\
    \ world.  Consider the first stages of such an\n   incremental deployment, where\
    \ a subset of the flows are ECN-capable.\n   At the onset of congestion, when\
    \ the packet dropping/marking rate\n   would be low, routers would only set CE\
    \ bits, rather than dropping\n   packets.  However, only those flows that are\
    \ ECN-capable would\n   understand and respond to CE packets. The result is that\
    \ the ECN-\n   capable flows would back off, and the non-ECN-capable flows would\
    \ be\n   unaware of the ECN signals and would continue to open their\n   congestion\
    \ windows.\n   In this case, there are two possible outcomes: (1) the ECN-capable\n\
    \   flows back off, the non-ECN-capable flows get all of the bandwidth,\n   and\
    \ congestion remains mild, or (2) the ECN-capable flows back off,\n   the non-ECN-capable\
    \ flows don't, and congestion increases until the\n   router transitions from\
    \ setting the CE bit to dropping packets.\n   While this second outcome evens\
    \ out the fairness, the ECN-capable\n   flows would still receive little benefit\
    \ from being ECN-capable,\n   because the increased congestion would drive the\
    \ router to packet-\n   dropping behavior.\n   A flow that advertised itself as\
    \ ECN-Capable but does not respond to\n   CE bits is functionally equivalent to\
    \ a flow that turns off\n   congestion control, as discussed in Sections 8 and\
    \ 9.\n   Thus, in a world when a subset of the flows are ECN-capable, but\n  \
    \ where ECN-capable flows have no mechanism for indicating that fact to\n   the\
    \ routers, there would be less effective and less fair congestion\n   control\
    \ in the Internet, resulting in a strong incentive for end\n   nodes not to deploy\
    \ ECN.\n"
- title: 18. Why use two bits in the IP header?
  contents:
  - "18. Why use two bits in the IP header?\n   Given the need for an ECT indication\
    \ in the IP header, there still\n   remains the question of whether the ECT (ECN-Capable\
    \ Transport) and\n   CE (Congestion Experienced) indications should be overloaded\
    \ on a\n   single bit.  This overloaded-one-bit alternative, explored in\n   [Floyd94],\
    \ would involve a single bit with two values.  One value,\n   \"ECT and not CE\"\
    , would represent an ECN-Capable Transport, and the\n   other value, \"CE or not\
    \ ECT\", would represent either Congestion\n   Experienced or a non-ECN-Capable\
    \ transport.\n   One difference between the one-bit and two-bit implementations\n\
    \   concerns packets that traverse multiple congested routers.  Consider\n   a\
    \ CE packet that arrives at a second congested router, and is\n   selected by\
    \ the active queue management at that router for either\n   marking or dropping.\
    \  In the one-bit implementation, the second\n   congested router has no choice\
    \ but to drop the CE packet, because it\n   cannot distinguish between a CE packet\
    \ and a non-ECT packet.  In the\n   two-bit implementation, the second congested\
    \ router has the choice of\n   either dropping the CE packet, or of leaving it\
    \ alone with the CE bit\n   set.\n   Another difference between the one-bit and\
    \ two-bit implementations\n   comes from the fact that with the one-bit implementation,\
    \ receivers\n   in a single flow cannot distinguish between CE and non-ECT packets.\n\
    \   Thus, in the one-bit implementation an ECN-capable data sender would\n   have\
    \ to unambiguously indicate to the receiver or receivers whether\n   each packet\
    \ had been sent as ECN-Capable or as non-ECN-Capable.  One\n   possibility would\
    \ be for the sender to indicate in the transport\n   header whether the packet\
    \ was sent as ECN-Capable.  A second\n   possibility that would involve a functional\
    \ limitation for the one-\n   bit implementation would be for the sender to unambiguously\
    \ indicate\n   that it was going to send *all* of its packets as ECN-Capable or\
    \ as\n   non-ECN-Capable.  For a multicast transport protocol, this\n   unambiguous\
    \ indication would have to be apparent to receivers joining\n   an on-going multicast\
    \ session.\n   Another advantage of the two-bit approach is that it is somewhat\
    \ more\n   robust.  The most critical issue, discussed in Section 8, is that the\n\
    \   default indication should be that of a non-ECN-Capable transport.  In\n  \
    \ a two-bit implementation, this requirement for the default value\n   simply\
    \ means that the ECT bit should be `OFF' by default.  In the\n   one-bit implementation,\
    \ this means that the single overloaded bit\n   should by default be in the \"\
    CE or not ECT\" position.  This is less\n   clear and straightforward, and possibly\
    \ more open to incorrect\n   implementations either in the end nodes or in the\
    \ routers.\n   In summary, while the one-bit implementation could be a possible\n\
    \   implementation, it has the following significant limitations relative\n  \
    \ to the two-bit implementation.  First, the one-bit implementation has\n   more\
    \ limited functionality for the treatment of CE packets at a\n   second congested\
    \ router.  Second, the one-bit implementation requires\n   either that extra information\
    \ be carried in the transport header of\n   packets from ECN-Capable flows (to\
    \ convey the functionality of the\n   second bit elsewhere, namely in the transport\
    \ header), or that\n   senders in ECN-Capable flows accept the limitation that\
    \ receivers\n   must be able to determine a priori which packets are ECN-Capable\
    \ and\n   which are not ECN-Capable. Third, the one-bit implementation is\n  \
    \ possibly more open to errors from faulty implementations that choose\n   the\
    \ wrong default value for the ECN bit.  We believe that the use of\n   the extra\
    \ bit in the IP header for the ECT-bit is extremely valuable\n   to overcome these\
    \ limitations.\n"
- title: 19.  Historical definitions for the IPv4 TOS octet
  contents:
  - "19.  Historical definitions for the IPv4 TOS octet\n   RFC 791 [RFC791] defined\
    \ the ToS (Type of Service) octet in the IP\n   header.  In RFC 791, bits 6 and\
    \ 7 of the ToS octet are listed as\n   \"Reserved for Future Use\", and are shown\
    \ set to zero.  The first two\n   fields of the ToS octet were defined as the\
    \ Precedence and Type of\n   Service (TOS) fields.\n            0     1     2\
    \     3     4     5     6     7\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         |   PRECEDENCE    |       TOS       |  0  |  0  |    RFC 791\n     \
    \    +-----+-----+-----+-----+-----+-----+-----+-----+\n   RFC 1122 included bits\
    \ 6 and 7 in the TOS field, though it did not\n   discuss any specific use for\
    \ those two bits:\n            0     1     2     3     4     5     6     7\n \
    \        +-----+-----+-----+-----+-----+-----+-----+-----+\n         |   PRECEDENCE\
    \    |       TOS                   |    RFC 1122\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   The IPv4 TOS octet was redefined in RFC 1349 [RFC1349] as follows:\n     \
    \       0     1     2     3     4     5     6     7\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         |   PRECEDENCE    |       TOS             | MBZ |    RFC 1349\n    \
    \     +-----+-----+-----+-----+-----+-----+-----+-----+\n   Bit 6 in the TOS field\
    \ was defined in RFC 1349 for \"Minimize Monetary\n   Cost\".  In addition to\
    \ the Precedence and Type of Service (TOS)\n   fields, the last field, MBZ (for\
    \ \"must be zero\") was defined as\n   currently unused.  RFC 1349 stated that\
    \ \"The originator of a datagram\n   sets [the MBZ] field to zero (unless participating\
    \ in an Internet\n   protocol experiment which makes use of that bit).\"\n   RFC\
    \ 1455 [RFC 1455] defined an experimental standard that used all\n   four bits\
    \ in the TOS field to request a guaranteed level of link\n   security.\n   RFC\
    \ 1349 is obsoleted by \"Definition of the Differentiated Services\n   Field (DS\
    \ Field) in the IPv4 and IPv6 Headers\" [DIFFSERV], in which\n   bits 6 and 7\
    \ of the DS field are listed as Currently Unused (CU).\n   The first six bits\
    \ of the DS field are defined as the Differentiated\n   Services CodePoint (DSCP):\n\
    \            0     1     2     3     4     5     6     7\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         |               DSCP                |    CU     |\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   Because of this unstable history, the definition of the ECN field in\n   this\
    \ document cannot be guaranteed to be backwards compatible with\n   all past uses\
    \ of these two bits.  The damage that could be done by a\n   non-ECN-capable router\
    \ would be to \"erase\" the CE bit for an ECN-\n   capable packet that arrived\
    \ at the router with the CE bit set, or set\n   the CE bit even in the absence\
    \ of congestion.  This has been\n   discussed in Section 10 on \"Non-compliance\
    \ in the Network\".\n   The damage that could be done in an ECN-capable environment\
    \ by a\n   non-ECN-capable end-node transmitting packets with the ECT bit set\n\
    \   has been discussed in Section 9 on \"Non-compliance by the End Nodes\".\n"
- title: AUTHORS' ADDRESSES
  contents:
  - "AUTHORS' ADDRESSES\n   K. K. Ramakrishnan\n   AT&T Labs. Research\n   Phone:\
    \ +1 (973) 360-8766\n   EMail: kkrama@research.att.com\n   URL: http://www.research.att.com/info/kkrama\n\
    \   Sally Floyd\n   Lawrence Berkeley National Laboratory\n   Phone: +1 (510)\
    \ 486-7518\n   EMail: floyd@ee.lbl.gov\n   URL: http://www-nrg.ee.lbl.gov/floyd/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
