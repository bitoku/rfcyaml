- contents:
  - "             Correct Transaction Handling for 2xx Responses\n          to Session
    Initiation Protocol (SIP) INVITE Requests\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document normatively updates RFC 3261, the Session Initiation\n
    \  Protocol (SIP), to address an error in the specified handling of\n   success
    (2xx class) responses to INVITE requests.  Elements following\n   RFC 3261 exactly
    will misidentify retransmissions of the request as a\n   new, unassociated request.
    \ The correction involves modifying the\n   INVITE transaction state machines.
    \ The correction also changes the\n   way responses that cannot be matched to
    an existing transaction are\n   handled to address a security risk.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6026.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions and Definitions .....................................3\n   3.
    Reason for Change ...............................................3\n   4. Summary
    of Change ...............................................4\n   5. Consequences
    if Not Implemented .................................4\n   6. The Change ......................................................4\n
    \  7. Change Details ..................................................5\n      7.1.
    Server Transaction Impacts .................................5\n      7.2. Client
    Transaction Impacts .................................9\n      7.3. Proxy Considerations
    ......................................10\n   8. Exact Changes to RFC 3261 ......................................11\n
    \     8.1. Page 85 ...................................................11\n      8.2.
    Page 107 ..................................................11\n      8.3. Page
    114 ..................................................11\n      8.4. Pages 126
    through 128 .....................................12\n      8.5. Pages 134 to 135
    ..........................................15\n      8.6. Page 136 ..................................................15\n
    \     8.7. Page 137 ..................................................17\n      8.8.
    Page 141 ..................................................17\n      8.9. Page
    144 ..................................................18\n      8.10. Page 146
    .................................................18\n      8.11. Page 265 .................................................18\n
    \  9. IANA Considerations ............................................18\n   10.
    Security Considerations .......................................19\n   11. Acknowledgments
    ...............................................20\n   12. Normative References
    ..........................................20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes an essential correction to the Session\n
    \  Initiation Protocol (SIP), defined in [RFC3261].  The change\n   addresses
    an error in the handling of 2xx class responses to INVITE\n   requests that leads
    to retransmissions of the INVITE being treated as\n   new requests and forbids
    forwarding stray INVITE responses.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions and Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n"
  title: 2.  Conventions and Definitions
- contents:
  - "3.  Reason for Change\n   One use of the INVITE method in SIP is to establish
    new sessions.\n   These \"initial\" INVITEs may fork at intermediaries, and more
    than one\n   receiving endpoint may choose to accept the request.  SIP is designed\n
    \  such that the requester receives all of these success responses.\n   Two sets
    of requirements in [RFC3261] work together to allow multiple\n   2xx responses
    to be processed correctly by the requester.  First, all\n   elements are required
    to immediately destroy any INVITE client\n   transaction state upon forwarding
    a matching 2xx class response.\n   This requirement applies to both UAs (user
    agents) and proxies\n   (proxies forward the response upstream, the transaction
    layer at user\n   agents forwards the response to its \"UA core\").  Second, all
    proxies\n   are required to statelessly forward upstream any 2xx class responses\n
    \  that do not match an existing transaction, also called stray\n   responses.
    \ The transaction layer at user agents is required to\n   forward these responses
    to its UA core.  Logic in the UA core deals\n   with acknowledging each of these
    responses.\n   This technique for specifying the behavior was chosen over adjusting\n
    \  INVITE client transaction state machines as a simpler way to specify\n   the
    correct behavior.\n   Over time, implementation experience demonstrated the existing
    text\n   is in error.  Once any element with a server transaction (say, a\n   proxy
    in the path of the INVITE) deletes that transaction state, any\n   retransmission
    of the INVITE will be treated as a new request,\n   potentially forwarded to different
    locations than the original.  Many\n   implementations in the field have made
    proprietary adjustments to\n   their transaction logic to avoid this error.\n
    \  The requirement to statelessly forward stray responses has also been\n   identified
    as a security risk.  Through it, elements compliant to\n   [RFC3261] are compelled
    to do work (forward packets) that is not\n   protected by the admission policies
    applied to requests.  This can be\n   leveraged to, for instance, use a SIP proxy
    as an anonymizing\n   forwarder of packets in a distributed denial-of-service
    attack.\n   General Internet endpoints can also collude to tunnel non-SIP content\n
    \  through such proxies by wrapping them in an SIP response envelope.\n   Additionally,
    [RFC3261] requires that if an unrecoverable transport\n   error is encountered
    while sending a response in a client\n   transaction, that the transaction moves
    immediately into the\n   \"Terminated\" state.  This will result in any retransmitted
    INVITE\n   requests received after such an error was encountered to be processed\n
    \  as a new request instead of being absorbed as a retransmission.\n"
  title: 3.  Reason for Change
- contents:
  - "4.  Summary of Change\n   This correction document updates [RFC3261], adding
    a state and\n   changing the transitions in the INVITE client state machine such
    that\n   the INVITE client transaction remains in place to receive multiple\n
    \  2xx responses.  It adds a state to the INVITE server state machine to\n   absorb
    retransmissions of the INVITE after a 2xx response has been\n   sent.  It modifies
    state transitions in the INVITE server state\n   machine to absorb retransmissions
    of the INVITE request after\n   encountering an unrecoverable transport error
    when sending a\n   response.  It also forbids forwarding stray responses to INVITE\n
    \  requests (not just 2xx responses), which RFC 3261 requires.\n"
  title: 4.  Summary of Change
- contents:
  - "5.  Consequences if Not Implemented\n   Implementations strictly conformant to
    [RFC3261] will process\n   retransmitted initial INVITE requests as new requests.
    \ Proxies may\n   forward them to different locations than the original.  Proxies
    may\n   also be used as anonymizing forwarders of bulk traffic.\n   Implementations
    will process any retransmitted INVITE request as a\n   new request after an attempt
    to send a response results in an\n   unrecoverable error.\n"
  title: 5.  Consequences if Not Implemented
- contents:
  - "6.  The Change\n   An element sending or receiving a 2xx to an INVITE transaction
    MUST\n   NOT destroy any matching INVITE transaction state.  This state is\n   necessary
    to ensure correct processing of retransmissions of the\n   request and the retransmission
    of the 2xx and ACK that follow.\n   An element encountering an unrecoverable transport
    error when trying\n   to send a response to an INVITE request MUST NOT immediately
    destroy\n   the associated INVITE server transaction state.  This state is\n   necessary
    to ensure correct processing of retransmissions of the\n   request.\n   When receiving
    any SIP response, a transaction-stateful proxy MUST\n   compare the transaction
    identifier in that response against its\n   existing transaction state machines.
    \ The proxy MUST NOT forward the\n   response if there is no matching transaction
    state machine.\n   When receiving an ACK that matches an existing INVITE server\n
    \  transaction and that does not contain a branch parameter containing\n   the
    magic cookie defined in RFC 3261, the matching transaction MUST\n   be checked
    to see if it is in the \"Accepted\" state.  If it is, then\n   the ACK must be
    passed directly to the transaction user instead of\n   being absorbed by the transaction
    state machine.  This is necessary\n   as requests from RFC 2543 clients will not
    include a unique branch\n   parameter, and the mechanisms for calculating the
    transaction ID from\n   such a request will be the same for both INVITE and ACKs.\n"
  title: 6.  The Change
- contents:
  - "7.  Change Details\n   These changes impact requirements in several sections
    of RFC 3261.\n   The exact effect on that text is detailed in Section 8.  This
    section\n   describes the details of the change, particularly the impact on the\n
    \  INVITE state machines, more succinctly to facilitate review and\n   simplify
    implementation.\n"
  - contents:
    - "7.1.  Server Transaction Impacts\n   To allow a SIP element to recognize retransmissions
      of an INVITE as\n   retransmissions instead of new requests, a new state, \"Accepted\",
      is\n   added to the INVITE server transaction state machine.  A new timer,\n
      \  Timer L, is also added to ultimately allow the state machine to\n   terminate.
      \ A server transaction in the \"Proceeding\" state will\n   transition to the
      \"Accepted\" state when it issues a 2xx response and\n   will remain in that
      state just long enough to absorb any\n   retransmissions of the INVITE.\n   If
      the SIP element's TU (Transaction User) issues a 2xx response for\n   this transaction
      while the state machine is in the \"Proceeding\"\n   state, the state machine
      MUST transition to the \"Accepted\" state and\n   set Timer L to 64*T1, where
      T1 is the round-trip time estimate\n   defined in Section 17.1.1.1 of [RFC3261].\n
      \  While in the \"Accepted\" state, any retransmissions of the INVITE\n   received
      will match this transaction state machine and will be\n   absorbed by the machine
      without changing its state.  These\n   retransmissions are not passed onto the
      TU.  RFC 3261 requires the TU\n   to periodically retransmit the 2xx response
      until it receives an ACK.\n   The server transaction MUST NOT generate 2xx retransmissions
      on its\n   own.  Any retransmission of the 2xx response passed from the TU to\n
      \  the transaction while in the \"Accepted\" state MUST be passed to the\n   transport
      layer for transmission.  Any ACKs received from the network\n   while in the
      \"Accepted\" state MUST be passed directly to the TU and\n   not absorbed.\n
      \  When Timer L fires and the state machine is in the \"Accepted\" state,\n
      \  the machine MUST transition to the \"Terminated\" state.  Once the\n   transaction
      is in the \"Terminated\" state, it MUST be destroyed\n   immediately.  Timer
      L reflects the amount of time the server\n   transaction could receive 2xx responses
      for retransmission from the\n   TU while it is waiting to receive an ACK.\n
      \  A server transaction MUST NOT discard transaction state based only on\n   encountering
      a non-recoverable transport error when sending a\n   response.  Instead, the
      associated INVITE server transaction state\n   machine MUST remain in its current
      state.  (Timers will eventually\n   cause it to transition to the \"Terminated\"
      state).  This allows\n   retransmissions of the INVITE to be absorbed instead
      of being\n   processed as a new request.\n   Figures 1 and 2 show the parts
      of the INVITE server state machine\n   that have changed.  The entire new INVITE
      server state machine is\n   shown in Figure 5.\n    BEFORE                                 AFTER\n
      \ +-----------+                       +-----------+\n  |           |                       |
      \          |\n  | Proceeding|                       | Proceeding|\n  |           |
      \                      |           |\n  |           |                       |
      \          |\n  |           |                       |           |\n  |           |
      \                      |           |\n  +-----------+                       +-----------+\n
      \          |2xx from TU                      |2xx from TU\n           |send
      response                    |send response\n           +-------------->+                 +------->+\n
      \                          |                          |\n                           |
      \                         |\n                           |                          |\n
      \                          |                          |  Transport\n                           |
      \                INVITE   |  Error\n                           |                 -
      \       |  Inform TU\n                           |                 +-----+  |
      \ +--+\n                           |                 |     |  V  |  v\n                           |
      \                |  +------------+\n                           |                 |
      \ |            |<--+\n                           |                 +->|  Accepted
      \ |   | ACK\n                           |                    |            |---+
      to TU\n                           |                    +------------+\n                           |
      \                    |   ^     |\n                           |                  +--+
      \  |     |\n                           |                  |      +-----+\n                           |
      \                 |  2xx from TU\n                           |                  |
      \ send response\n                           |                  |\n                           |
      \                 | Timer L fires\n                           |                  |
      -\n                           |                  |\n                           |
      \                 V\n  +-----------+            |                +------------+\n
      \ |           |            |                |            |\n  | Terminated|<-----------+
      \               | Terminated |\n  |           |                             |
      \           |\n  +-----------+                             +------------+\n
      \    Figure 1: Changes to the INVITE server transaction state machine\n                             when
      sending 2xx\n     BEFORE                                  AFTER\n  +-----------+
      \                         +------------+\n  |           |                          |
      \           |\n  | Proceeding|                          | Proceeding | Transport
      Err.\n  |           |                          |            | Inform TU\n  |
      \          |   Transport Err.         |            |----------+\n  |           |
      \  Inform TU              |            |          |\n  |           |--------------->+
      \        |            |<---------+\n  +-----------+                |         +------------+\n
      \                              |\n                               |\n                               |\n
      \                              |\n                               |                       Transport
      Err.\n  +-----------+                |         +-----------+ Inform TU\n  |
      \          |                |         |           |---------+\n  | Completed
      |                |         | Completed |         |\n  |           |                |
      \        |           |<--------+\n  +-----------+                |         +-----------+\n
      \          |                   |\n           |                   |\n           +------------------>+\n
      \                Transport Err.|\n                 Inform TU     |\n                               |\n
      \                              |\n                               |\n                               |\n
      \                              |\n                               |\n                               |\n
      \                              |\n                               |\n  +-----------+
      \               |\n  |           |                |\n  | Terminated|<---------------+\n
      \ |           |\n  +-----------+\n   Figure 2: Changes to the INVITE server
      transaction state machine on\n                       encountering transport
      error\n"
    title: 7.1.  Server Transaction Impacts
  - contents:
    - "7.2.  Client Transaction Impacts\n   In order to correctly distinguish retransmissions
      of 2xx responses\n   from stray 2xx responses, the INVITE client state machine
      is modified\n   to not transition immediately to \"Terminated\" on receipt of
      a 2xx\n   response.  Instead, the machine will transition to a new \"Accepted\"\n
      \  state, and remain there just long enough, determined by a new timer\n   M,
      to receive and pass to the TU any retransmissions of the 2xx\n   response or
      any additional 2xx responses from other branches of a\n   downstream fork of
      the matching request.  If a 2xx response is\n   received while the client INVITE
      state machine is in the \"Calling\" or\n   \"Proceeding\" states, it MUST transition
      to the \"Accepted\" state, pass\n   the 2xx response to the TU, and set Timer
      M to 64*T1.  A 2xx response\n   received while in the \"Accepted\" state MUST
      be passed to the TU and\n   the machine remains in the \"Accepted\" state.  The
      client transaction\n   MUST NOT generate an ACK to any 2xx response on its own.
      \ The TU\n   responsible for the transaction will generate the ACK.\n   When
      Timer M fires and the state machine is in the \"Accepted\" state,\n   the machine
      MUST transition to the \"Terminated\" state.  Once the\n   transaction is in
      the \"Terminated\" state, it MUST be destroyed\n   immediately.\n   Any response
      received that does not match an existing client\n   transaction state machine
      is simply dropped.  (Implementations are,\n   of course, free to log or do other
      implementation-specific things\n   with such responses, but the implementer
      should be sure to consider\n   the impact of large numbers of malicious stray
      responses.)\n   Note that it is not necessary to preserve client transaction
      state\n   upon the detection of unrecoverable transport errors.  Existing\n
      \  requirements ensure the TU has been notified, and the new\n   requirements
      in this document ensure that any received retransmitted\n   response will be
      dropped since there will no longer be any matching\n   transaction state.\n
      \  Figure 3 shows the part of the INVITE client state machine that has\n   changed.
      \ The entire new INVITE client state machine is shown in\n   Figure 5.\n   +-----------+
      \                       +-----------+\n   |           |                        |
      \          |\n   |  Calling  |                        |  Calling  |\n   |           |----------->+
      \          |           |-----------+\n   +-----------+ 2xx        |           +-----------+
      2xx       |\n                 2xx to TU  |                         2xx to TU
      |\n                            |                                   |\n                            |
      \                                  |\n                            |                                   |\n
      \                           |                                   |\n   +-----------+
      \           |           +-----------+           |\n   |           |            |
      \          |           |           |\n   |Proceeding |----------->|           |Proceeding
      |---------->|\n   |           | 2xx        |           |           | 2xx       |\n
      \  +-----------+ 2xx to TU  |           +-----------+ 2xx to TU |\n                            |
      \                                  |\n                            |                                   |\n
      \                           |                                   |\n                            |
      \                                  V\n                            |                            +-----------+\n
      \                           |                            |           |\n                            |
      \                           | Accepted  |\n                            |                        +---|
      \          |\n                            |              2xx       |   +-----------+\n
      \                           |              2xx to TU |     ^    |\n                            |
      \                       |     |    |\n                            |                        +-----+
      \   |\n                            |                                   |\n                            |
      \                +-----------------+\n                            |                 |
      Timer M fires\n                            |                 | -\n                            |
      \                V\n   +-----------+            |           +-----------+\n
      \  |           |            |           |           |\n   | Terminated|<-----------+
      \          | Terminated|\n   |           |                        |           |\n
      \  +-----------+                        +-----------+\n     Figure 3: Changes
      to the INVITE client transaction state machine\n"
    title: 7.2.  Client Transaction Impacts
  - contents:
    - "7.3.  Proxy Considerations\n   This document changes the behavior of transaction-stateful
      proxies to\n   not forward stray INVITE responses.  When receiving any SIP response,\n
      \  a transaction-stateful proxy MUST compare the transaction identifier\n   in
      that response against its existing transaction state machines.\n   The proxy
      MUST NOT forward the response if there is no matching\n   transaction state
      machine.\n"
    title: 7.3.  Proxy Considerations
  title: 7.  Change Details
- contents:
  - "8.  Exact Changes to RFC 3261\n   This section describes exactly the same changes
    as above, but shows\n   exactly which text in RFC 3261 is affected.  This document\n
    \  intentionally does not contain a Figure 4 or Figure 6 so that the\n   labels
    for Figures 5 and 7 are identical to the labels of the figures\n   they are replacing
    in RFC 3261.\n"
  - contents:
    - "8.1.  Page 85\n   Section 13.3.1.4, paragraph 4, is replaced entirely by:\n
      \     Once the response has been constructed, it is passed to the INVITE\n      server
      transaction.  In order to ensure reliable end-to-end\n      transport of the
      response, it is necessary to periodically pass\n      the response directly
      to the transport until the ACK arrives.  The\n      2xx response is passed to
      the transport with an interval that\n      starts at T1 seconds and doubles
      for each retransmission until it\n      reaches T2 seconds (T1 and T2 are defined
      in Section 17).\n      Response retransmissions cease when an ACK request for
      the\n      response is received.  This is independent of whatever transport\n
      \     protocols are used to send the response.\n"
    title: 8.1.  Page 85
  - contents:
    - "8.2.  Page 107\n   Section 16.7, paragraphs 1 and 2, are replaced entirely
      by:\n      When a response is received by an element, it first tries to\n      locate
      a client transaction (Section 17.1.3) matching the\n      response.  If a transaction
      is found, the response is handed to\n      the client transaction.  If none
      is found, the element MUST NOT\n      forward the response.\n"
    title: 8.2.  Page 107
  - contents:
    - "8.3.  Page 114\n   Section 16.7, part 9, first paragraph.  Replace this sentence:\n
      \     If the server transaction is no longer available to handle the\n      transmission,
      the element MUST forward the response statelessly by\n      sending it to the
      server transport.\n   with\n      If the server transaction is no longer available
      to handle the\n      transmission, the response is simply discarded.\n"
    title: 8.3.  Page 114
  - contents:
    - "8.4.  Pages 126 through 128\n   Section 17.1.1.2.  Replace paragraph 7 (starting
      \"When in either\")\n   through the end of the section with:\n      When in
      either the \"Calling\" or \"Proceeding\" states, reception of\n      a response
      with status code from 300-699 MUST cause the client\n      transaction to transition
      to \"Completed\".  The client transaction\n      MUST pass the received response
      up to the TU, and the client\n      transaction MUST generate an ACK request,
      even if the transport is\n      reliable (guidelines for constructing the ACK
      from the response\n      are given in Section 17.1.1.3), and then pass the ACK
      to the\n      transport layer for transmission.  The ACK MUST be sent to the\n
      \     same address, port, and transport to which the original request\n      was
      sent.\n      The client transaction MUST start Timer D when it enters the\n
      \     \"Completed\" state for any reason, with a value of at least 32\n      seconds
      for unreliable transports, and a value of zero seconds for\n      reliable transports.
      \ Timer D reflects the amount of time that the\n      server transaction can
      remain in the \"Completed\" state when\n      unreliable transports are used.
      \ This is equal to Timer H in the\n      INVITE server transaction, whose default
      is 64*T1, and is also\n      equal to the time a UAS core will wait for an ACK
      once it sends a\n      2xx response.  However, the client transaction does not
      know the\n      value of T1 in use by the server transaction or any downstream
      UAS\n      cores, so an absolute minimum of 32 s is used instead of basing\n
      \     Timer D on T1.\n      Any retransmissions of a response with status code
      300-699 that\n      are received while in the \"Completed\" state MUST cause
      the ACK to\n      be re-passed to the transport layer for retransmission, but
      the\n      newly received response MUST NOT be passed up to the TU.\n      A
      retransmission of the response is defined as any response that\n      would
      match the same client transaction based on the rules of\n      Section 17.1.3.\n
      \     If Timer D fires while the client transaction is in the\n      \"Completed\"
      state, the client transaction MUST move to the\n      \"Terminated\" state.\n
      \     When a 2xx response is received while in either the \"Calling\" or\n      \"Proceeding\"
      states, the client transaction MUST transition to the\n      \"Accepted\" state,
      and Timer M MUST be started with a value of\n      64*T1.  The 2xx response
      MUST be passed up to the TU.  The client\n      transaction MUST NOT generate
      an ACK to the 2xx response -- its\n      handling is delegated to the TU.  A
      UAC core will send an ACK to\n      the 2xx response using a new transaction.
      \ A proxy core will\n      always forward the 2xx response upstream.\n      The
      purpose of the \"Accepted\" state is to allow the client\n      transaction
      to continue to exist to receive, and pass to the TU,\n      any retransmissions
      of the 2xx response and any additional 2xx\n      responses from other branches
      of the INVITE if it forked\n      downstream.  Timer M reflects the amount of
      time that the\n      transaction user will wait for such messages.\n      Any
      2xx responses that match this client transaction and that are\n      received
      while in the \"Accepted\" state MUST be passed up to the\n      TU.  The client
      transaction MUST NOT generate an ACK to the 2xx\n      response.  The client
      transaction takes no further action.\n      If Timer M fires while the client
      transaction is in the \"Accepted\"\n      state, the client transaction MUST
      move to the \"Terminated\" state.\n      The client transaction MUST be destroyed
      the instant it enters the\n      \"Terminated\" state.\n      Replace Figure
      5 with:\n                                    |INVITE from TU\n                  Timer
      A fires     |INVITE sent      Timer B fires\n                  Reset A,          V
      \                or Transport Err.\n                  INVITE sent +-----------+
      \          inform TU\n                    +---------|           |--------------------------+\n
      \                   |         |  Calling  |                          |\n                    +-------->|
      \          |-----------+              |\n   300-699                    +-----------+
      2xx       |              |\n   ACK sent                      |  |       2xx
      to TU |              |\n   resp. to TU                   |  |1xx              |
      \             |\n   +-----------------------------+  |1xx to TU        |              |\n
      \  |                                |                 |              |\n   |
      \               1xx             V                 |              |\n   |                1xx
      to TU +-----------+           |              |\n   |                +---------|
      \          |           |              |\n   |                |         |Proceeding
      |           |              |\n   |                +-------->|           |           |
      \             |\n   |                          +-----------+ 2xx       |              |\n
      \  |         300-699             |    |     2xx to TU |              |\n   |
      \        ACK sent,  +--------+    +---------------+              |\n   |         resp.
      to TU|                             |              |\n   |                    |
      \                            |              |\n   |                    V                             V
      \             |\n   |              +-----------+                   +----------+
      \      |\n   +------------->|           |Transport Err.     |          |       |\n
      \                 | Completed |Inform TU          | Accepted |       |\n               +--|
      \          |-------+           |          |-+     |\n       300-699 |  +-----------+
      \      |           +----------+ |     |\n       ACK sent|    ^  |              |
      \              |  ^     |     |\n               |    |  |              |               |
      \ |     |     |\n               +----+  |              |               |  +-----+
      \    |\n                       |Timer D fires |  Timer M fires|    2xx       |\n
      \                      |-             |             - |    2xx to TU |\n                       +--------+
      \    |   +-----------+              |\n      NOTE:                     V     V
      \  V                          |\n   Transitions                 +------------+
      \                       |\n   are labeled                 |            |                        |\n
      \  with the event              | Terminated |<-----------------------+\n   over
      the action             |            |\n   to take.                    +------------+\n
      \                   Figure 5: INVITE client transaction\n"
    title: 8.4.  Pages 126 through 128
  - contents:
    - "8.5.  Pages 134 to 135\n   Section 17.2.1, paragraph 4, is replaced with:\n
      \     If, while in the \"Proceeding\" state, the TU passes a 2xx response\n
      \     to the server transaction, the server transaction MUST pass this\n      response
      to the transport layer for transmission.  It is not\n      retransmitted by
      the server transaction; retransmissions of 2xx\n      responses are handled
      by the TU.  The server transaction MUST then\n      transition to the \"Accepted\"
      state.\n"
    title: 8.5.  Pages 134 to 135
  - contents:
    - "8.6.  Page 136\n   Replace Figure 7 with:\n                                      |INVITE\n
      \                                     |pass INV to TU\n                   INVITE
      \            V send 100 if TU won't in 200 ms\n                   send response+------------+\n
      \                      +--------|            |--------+ 101-199 from TU\n                       |
      \       |            |        | send response\n                       +------->|
      \           |<-------+\n                                | Proceeding |\n                                |
      \           |--------+ Transport Err.\n                                |            |
      \       | Inform TU\n                                |            |<-------+\n
      \                               +------------+\n                   300-699 from
      TU |    |2xx from TU\n                   send response   |    |send response\n
      \                   +--------------+    +------------+\n                    |
      \                               |\n   INVITE           V          Timer G fires
      \        |\n   send response +-----------+ send response         |\n        +--------|
      \          |--------+              |\n        |        |           |        |
      \             |\n        +------->| Completed |<-------+      INVITE  |  Transport
      Err.\n                 |           |               -       |  Inform TU\n        +--------|
      \          |----+          +-----+ |  +---+\n        |        +-----------+
      \   | ACK      |     | v  |   v\n        |          ^   |          | -        |
      \ +------------+\n        |          |   |          |          |  |            |---+
      ACK\n        +----------+   |          |          +->|  Accepted  |   | to TU\n
      \       Transport Err. |          |             |            |<--+\n        Inform
      TU      |          V             +------------+\n                       |      +-----------+
      \       |  ^     |\n                       |      |           |        |  |
      \    |\n                       |      | Confirmed |        |  +-----+\n                       |
      \     |           |        |  2xx from TU\n         Timer H fires |      +-----------+
      \       |  send response\n         -             |          |                |\n
      \                      |          | Timer I fires  |\n                       |
      \         | -              | Timer L fires\n                       |          V
      \               | -\n                       |        +------------+     |\n
      \                      |        |            |<----+\n                       +------->|
      Terminated |\n                                |            |\n                                +------------+\n
      \                   Figure 7: INVITE server transaction\n"
    title: 8.6.  Page 136
  - contents:
    - "8.7.  Page 137\n   In Section 17.2.1, replace the last paragraph (starting
      \"Once the\n   transaction\") with:\n      The purpose of the \"Accepted\" state
      is to absorb retransmissions\n      of an accepted INVITE request.  Any such
      retransmissions are\n      absorbed entirely within the server transaction.
      \ They are not\n      passed up to the TU since any downstream UAS cores that
      accepted\n      the request have taken responsibility for reliability and will\n
      \     already retransmit their 2xx responses if necessary.\n      While in the
      \"Accepted\" state, if the TU passes a 2xx response,\n      the server transaction
      MUST pass the response to the transport\n      layer for transmission.\n      When
      the INVITE server transaction enters the \"Accepted\" state,\n      Timer L
      MUST be set to fire in 64*T1 for all transports.  This\n      value matches
      both Timer B in the next upstream client state\n      machine (the amount of
      time the previous hop will wait for a\n      response when no provisionals have
      been sent) and the amount of\n      time this (or any downstream) UAS core might
      be retransmitting the\n      2xx while waiting for an ACK.  If an ACK is received
      while the\n      INVITE server transaction is in the \"Accepted\" state, then
      the ACK\n      must be passed up to the TU.  If Timer L fires while the INVITE\n
      \     server transaction is in the \"Accepted\" state, the transaction\n      MUST
      transition to the \"Terminated\" state.\n      Once the transaction is in the
      \"Terminated\" state, it MUST be\n      destroyed immediately.\n"
    title: 8.7.  Page 137
  - contents:
    - "8.8.  Page 141\n   In Section 17.2.4, replace the second paragraph with:\n
      \     First, the procedures in [4] are followed, which attempt to\n      deliver
      the response to a backup.  If those should all fail, based\n      on the definition
      of failure in [4], the server transaction SHOULD\n      inform the TU that a
      failure has occurred, and MUST remain in the\n      current state.\n"
    title: 8.8.  Page 141
  - contents:
    - "8.9.  Page 144\n      In Section 18.1.2, replace the second paragraph with:\n
      \     The client transport uses the matching procedures of Section\n      17.1.3
      to attempt to match the response to an existing\n      transaction.  If there
      is a match, the response MUST be passed to\n      that transaction.  Otherwise,
      any element other than a stateless\n      proxy MUST silently discard the response.\n"
    title: 8.9.  Page 144
  - contents:
    - "8.10.  Page 146\n      In Section 18.2.1, replace the last paragraph with:\n
      \     Next, the server transport attempts to match the request to a\n      server
      transaction.  It does so using the matching rules described\n      in Section
      17.2.3.  If a matching server transaction is found, the\n      request is passed
      to that transaction for processing.  If no match\n      is found, the request
      is passed to the core, which may decide to\n      construct a new server transaction
      for that request.\n"
    title: 8.10.  Page 146
  - contents:
    - "8.11.  Page 265\n      Add to Table 4:\n      Timer L  64*T1            Section
      17.2.1       Wait time for\n                                                     accepted
      INVITE\n                                                     request retransmits\n
      \     Timer M  64*T1            Section 17.1.1       Wait time for\n                                                     retransmission
      of\n                                                     2xx to INVITE or\n
      \                                                    additional 2xx from\n                                                     other
      branches of\n                                                     a forked INVITE\n"
    title: 8.11.  Page 265
  title: 8.  Exact Changes to RFC 3261
- contents:
  - "9.  IANA Considerations\n   IANA has updated the SIP Parameters: Method and Response
    Codes\n   registry as follows:\n   OLD:\n   Methods Reference\n   ------- ---------\n
    \  INVITE  [RFC3261]\n   NEW:\n   Methods Reference\n   ------- ---------\n   INVITE
    \ [RFC3261][RFC6026]\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Security Considerations\n   This document makes two changes to the Session
    Initiation Protocol to\n   address the error discussed in Section 3.  It changes
    the behavior of\n   both the client and server INVITE transaction state machines,
    and it\n   changes the way \"stray\" responses (those that don't match any\n   existing
    transaction) are handled at transaction-stateful elements.\n   The changes to
    the state machines cause elements to hold onto each\n   accepted INVITE transaction
    state 32 seconds longer than what was\n   specified in RFC 3261.  This will have
    a direct impact on the amount\n   of work an attacker that is leveraging state
    exhaustion will have to\n   exert against the system.  However, this additional
    state is\n   necessary to achieve correct operation.  There is some discussion
    of\n   avoiding state exhaustion and other denial-of-service attacks in RFC\n
    \  3261, Section 26.3.2.4.\n   RFC 3261 required SIP proxies to forward any stray
    2xx class\n   responses to an INVITE request upstream statelessly.  As a result,\n
    \  conformant proxies can be forced to forward packets (that look\n   sufficiently
    like SIP responses) to destinations of the sender's\n   choosing.  Section 3 discusses
    some of the malicious behavior this\n   enables.  This document reverses the stateless
    forwarding\n   requirement, making it a violation of the specification to forward\n
    \  stray responses.\n   RFC 3261 defines a \"stateless proxy\", which forwards
    requests and\n   responses without creating or maintaining any transaction state.
    \ The\n   requirements introduced in this document do not change the behavior\n
    \  of these elements in any way.  Stateless proxies are inherently\n   vulnerable
    to the abuses discussed in Section 3.  One way operators\n   might mitigate this
    vulnerability is to carefully control which peer\n   elements can present traffic
    to a given stateless proxy.\n   The changes introduced by this document are backward-compatible.\n
    \  Transaction behavior will be no less correct, and possibly more\n   correct,
    when only one peer in a transaction implements these\n   changes.  Except for
    the considerations mentioned earlier in this\n   section, introducing elements
    implementing these changes into\n   deployments with RFC 3261 implementations
    adds no additional security\n   concerns.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  Acknowledgments\n   Pekka Pessi reported the improper handling of INVITE
    retransmissions.\n   Brett Tate performed a careful review uncovering the need
    for the\n   \"Accepted\" state and Timer M in the client transaction state machine.\n
    \  Jan Kolomaznik noticed that a server transaction should let a TU know\n   about
    transport errors when it attempts to send a 2xx class response.\n   Michael Procter
    corrected several nits.\n"
  title: 11.  Acknowledgments
- contents:
  - "12.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in
    RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
    \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
    \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n"
  title: 12.  Normative References
- contents:
  - "Authors' Addresses\n   Robert Sparks\n   Tekelec\n   17210 Campbell Road\n   Suite
    250\n   Dallas, Texas  75252\n   USA\n   EMail: RjS@nostrum.com\n   Theo Zourzouvillys\n
    \  Skype\n   3rd Floor\n   8000 Marina Blvd\n   Brisbane, California  84005\n
    \  US\n   EMail: theo@crazygreek.co.uk\n"
  title: Authors' Addresses
