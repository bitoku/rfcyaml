- title: __initial_text__
  contents:
  - '                IP Payload Compression Protocol (IPComp)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol intended to provide lossless\n\
    \   compression for Internet Protocol datagrams in an Internet\n   environment.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   IP payload compression is a protocol to reduce the size of\
    \ IP\n   datagrams.  This protocol will increase the overall communication\n \
    \  performance between a pair of communicating hosts/gateways (\"nodes\")\n  \
    \ by compressing the datagrams, provided the nodes have sufficient\n   computation\
    \ power, through either CPU capacity or a compression\n   coprocessor, and the\
    \ communication is over slow or congested links.\n   IP payload compression is\
    \ especially useful when encryption is\n   applied to IP datagrams.  Encrypting\
    \ the IP datagram causes the data\n   to be random in nature, rendering compression\
    \ at lower protocol\n   layers (e.g., PPP Compression Control Protocol [RFC-1962])\n\
    \   ineffective.  If both compression and encryption are required,\n   compression\
    \ MUST be applied before encryption.\n   This document defines the IP payload\
    \ compression protocol (IPComp),\n   the IPComp packet structure, the IPComp Association\
    \ (IPCA), and\n   several methods to negotiate the IPCA.\n   Other documents shall\
    \ specify how a specific compression algorithm\n   can be used with the IP payload\
    \ compression protocol.  Such\n   algorithms are beyond the scope of this document.\n"
- title: 1.1. Specification of Requirements
  contents:
  - "1.1. Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC-2119].\n"
- title: 2. Compression Process
  contents:
  - "2. Compression Process\n   The compression processing of IP datagrams has two\
    \ phases:\n   compressing of outbound IP datagrams (\"compression\") and\n   decompressing\
    \ of inbound datagrams (\"decompression\").  The\n   compression processing MUST\
    \ be lossless, ensuring that the IP\n   datagram, after being compressed and decompressed,\
    \ is identical to\n   the original IP datagram.\n   Each IP datagram is compressed\
    \ and decompressed by itself without any\n   relation to other datagrams (\"stateless\
    \ compression\"), as IP\n   datagrams may arrive out of order or not arrive at\
    \ all.  Each\n   compressed IP datagram encapsulates a single IP payload.\n  \
    \ Processing of inbound IP datagrams MUST support both compressed and\n   non-compressed\
    \ IP datagrams, in order to meet the non-expansion\n   policy requirements, as\
    \ defined in section 2.2.\n   The compression of outbound IP datagrams MUST be\
    \ done before any IP\n   security processing, such as encryption and authentication,\
    \ and\n   before any fragmentation of the IP datagram.  In addition, in IP\n \
    \  version 6 [RFC-2460], the compression of outbound IP datagrams MUST\n   be\
    \ done before the addition of either a Hop-by-Hop Options header or\n   a Routing\
    \ Header, since both carry information that must be examined\n   and processed\
    \ by possibly every node along a packet's delivery path,\n   and therefore MUST\
    \ be sent in the original form.\n   Similarly, the decompression of inbound IP\
    \ datagrams MUST be done\n   after the reassembly of the IP datagrams, and after\
    \ the completion of\n   all IP security processing, such as authentication and\
    \ decryption.\n"
- title: 2.1. Compressed Payload
  contents:
  - "2.1. Compressed Payload\n   The compression is applied to a single array of octets,\
    \ which are\n   contiguous in the IP datagram.  This array of octets always ends\
    \ at\n   the last octet of the IP packet payload.  Note: a contiguous array of\n\
    \   octets in the IP datagram may be not contiguous in physical memory.\n   In\
    \ IP version 4 [RFC-0791], the compression is applied to the upper\n   layer protocol\
    \ (ULP) payload of the IP datagram.  No portion of the\n   IP header or the IP\
    \ header options is compressed.\n   In the IPv6 context, IPComp is viewed as an\
    \ end-to-end payload, and\n   MUST not apply to hop-by-hop, routing, and fragmentation\
    \ extension\n   headers.  The compression is applied starting at the first IP\
    \ Header\n   Option field that does not carry information that must be examined\n\
    \   and processed by nodes along a packet's delivery path, if such IP\n   Header\
    \ Option field exists, and continues to the ULP payload of the\n   IP datagram.\n\
    \   The size of a compressed payload, generated by the compression\n   algorithm,\
    \ MUST be in whole octet units.\n   As defined in section 3, an IPComp header\
    \ is inserted immediately\n   preceding the compressed payload.  The original\
    \ IP header is modified\n   to indicate the usage of the IPComp protocol and the\
    \ reduced size of\n   the IP datagram.  The original content of the Next Header\
    \ (IPv6) or\n   protocol (IPv4) field is stored in the IPComp header.\n   The\
    \ decompression is applied to a single contiguous array of octets\n   in the IP\
    \ datagram.  The start of the array of octets immediately\n   follows the IPComp\
    \ header and ends at the last octet of the IP\n   payload.  If the decompression\
    \ process is successfully completed, the\n   IP header is modified to indicate\
    \ the size of the decompressed IP\n   datagram, and the original next header as\
    \ stored in the IPComp\n   header.  The IPComp header is removed from the IP datagram\
    \ and the\n   decompressed payload immediately follows the IP header.\n"
- title: 2.2. Non-Expansion Policy
  contents:
  - "2.2. Non-Expansion Policy\n   If the total size of a compressed ULP payload and\
    \ the IPComp header,\n   as defined in section 3, is not smaller than the size\
    \ of the original\n   ULP payload, the IP datagram MUST be sent in the original\
    \ non-\n   compressed form.  To clarify:  If an IP datagram is sent non-\n   compressed,\
    \ no IPComp header is added to the datagram.  This policy\n   ensures saving the\
    \ decompression processing cycles and avoiding\n   incurring IP datagram fragmentation\
    \ when the expanded datagram is\n   larger than MTU.\n   Small IP datagrams are\
    \ likely to expand as a result of compression.\n   Therefore, a numeric threshold\
    \ should be applied before compression,\n   where IP datagrams of size smaller\
    \ than the threshold are sent in the\n   original form without attempting compression.\
    \  The numeric threshold\n   is implementation dependent.\n   An IP datagram with\
    \ payload that has been previously compressed tends\n   not to compress any further.\
    \  The previously compressed payload may\n   be the result of external processes,\
    \ such as compression applied by\n   an upper layer in the communication stack,\
    \ or by an off-line\n   compression utility.  An adaptive algorithm should be\
    \ implemented to\n   avoid the performance hit.  For example, if the compression\
    \ of i\n   consecutive IP datagrams of an IPCA fails, the next k IP datagrams\n\
    \   are sent without attempting compression.  If the next j datagrams are\n  \
    \ also failing to compress, the next k+n datagrams are sent without\n   attempting\
    \ compression.  Once a datagram is compressed successfully,\n   the normal process\
    \ of IPComp restarts.  Such an adaptive algorithm,\n   including all the related\
    \ thresholds, is implementation dependent.\n   During the processing of the payload,\
    \ the compression algorithm MAY\n   periodically apply a test to determine the\
    \ compressibility of the\n   processed data, similar to the requirements of [V42BIS].\
    \  The nature\n   of the test is algorithm dependent.  Once the compression algorithm\n\
    \   detects that the data is non-compressible, the algorithm SHOULD stop\n   processing\
    \ the data, and the payload is sent in the original non-\n   compressed form.\n"
- title: 3. Compressed IP Datagram Header Structure
  contents:
  - "3. Compressed IP Datagram Header Structure\n   A compressed IP datagram is encapsulated\
    \ by modifying the IP header\n   and inserting an IPComp header immediately preceding\
    \ the compressed\n   payload.  This section defines the IP header modifications\
    \ both in\n   IPv4 and IPv6, and the structure of the IPComp header.\n"
- title: 3.1. IPv4 Header Modifications
  contents:
  - "3.1. IPv4 Header Modifications\n   The following IPv4 header fields are set before\
    \ transmitting the\n   compressed IP datagram:\n      Total Length\n         The\
    \ length of the entire encapsulated IP datagram, including\n         the IP header,\
    \ the IPComp header and the compressed payload.\n      Protocol\n         The\
    \ Protocol field is set to 108, IPComp Datagram, [RFC-1700].\n      Header Checksum\n\
    \         The Internet Header checksum [RFC-0791] of the IP header.\n   All other\
    \ IPv4 header fields are kept unchanged, including any header\n   options.\n"
- title: 3.2. IPv6 Header Modifications
  contents:
  - "3.2. IPv6 Header Modifications\n   The following IPv6 header fields are set before\
    \ transmitting the\n   compressed IP datagram:\n      Payload Length\n       \
    \  The length of the compressed IP payload.\n      Next Header\n         The Next\
    \ Header field is set to 108, IPComp Datagram, [RFC-\n         1700].\n   All\
    \ other IPv6 header fields are kept unchanged, including any non-\n   compressed\
    \ header options.\n   The IPComp header is placed in an IPv6 packet using the\
    \ same rules as\n   the IPv6 Fragment Header.  However if an IPv6 packet contains\
    \ both an\n   IPv6 Fragment Header and an IPComp header, the IPv6 Fragment Header\n\
    \   MUST precede the IPComp header in the packet.\n"
- title: 3.3.  IPComp Header Structure
  contents:
  - "3.3.  IPComp Header Structure\n   The four-octet header has the following structure:\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Next Header  |     Flags     | Compression Parameter Index |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Next Header\n        8-bit selector.  Stores the IPv4 Protocol field or the\
    \ IPv6 Next\n        Header field of the original IP header.\n   Flags\n     \
    \   8-bit field.  Reserved for future use.  MUST be set to zero.\n        MUST\
    \ be ignored by the receiving node.\n   Compression Parameter Index (CPI)\n  \
    \      16-bit index.  The CPI is stored in network order.  The values\n      \
    \  0-63 define well-known compression algorithms, which require no\n        additional\
    \ information, and are used for manual setup.  The\n        values themselves\
    \ are identical to IPCOMP Transform identifiers\n        as defined in [SECDOI].\
    \  Consult [SECDOI] for an initial set of\n        defined values and for instructions\
    \ on how to assign new values.\n        The values 64-255 are reserved for future\
    \ use.  The values\n        256-61439 are negotiated between the two nodes in\
    \ definition of\n        an IPComp Association, as defined in section 4.  Note:\
    \ When\n        negotiating one of the well-known algorithms, the nodes MAY\n\
    \        select a CPI in the pre-defined range 0-63.  The values\n        61440-65535\
    \ are for private use among mutually consenting\n        parties.  Both nodes\
    \ participating can select a CPI value\n        independently of each other and\
    \ there is no relationships\n        between the two separately chosen CPIs. \
    \ The outbound IPComp\n        header MUST use the CPI value chosen by the decompressing\
    \ node.\n        The CPI in combination with the destination IP address uniquely\n\
    \        identifies the compression algorithm characteristics for the\n      \
    \  datagram.\n"
- title: 4. IPComp Association (IPCA) Negotiation
  contents:
  - "4. IPComp Association (IPCA) Negotiation\n   To utilize the IPComp protocol,\
    \ two nodes MUST first establish an\n   IPComp Association (IPCA) between them.\
    \  The IPCA includes all\n   required information for the operation of IPComp,\
    \ including the\n   Compression Parameter Index (CPI), the mode of operation,\
    \ the\n   compression algorithm to be used, and any required parameter for the\n\
    \   selected compression algorithm.  The IPComp mode of operation is\n   either\
    \ a node-to-node policy where IPComp is applied to every IP\n   packet between\
    \ the nodes, or an ULP session based policy where only\n   selected ULP sessions\
    \ between the nodes are using IPComp.  For each\n   IPCA, a different compression\
    \ algorithm may be negotiated in each\n   direction, or only one direction may\
    \ be compressed.  The default is\n   \"no IPComp compression\".\n   The IPCA is\
    \ established by dynamic negotiations or by manual\n   configuration.  The dynamic\
    \ negotiations SHOULD use the Internet\n   Security Association and Key Management\
    \ Protocol [ISAKMP], where\n   IPSec is present.  The dynamic negotiations MAY\
    \ be implemented\n   through a different protocol.\n"
- title: 4.1. Use of ISAKMP
  contents:
  - "4.1. Use of ISAKMP\n   For IPComp in the context of IP Security, ISAKMP provides\
    \ the\n   necessary mechanisms to establish IPCA.  IPComp Association is\n   negotiated\
    \ by the initiator using a Proposal Payload, which would\n   include one or more\
    \ Transform Payloads.  The Proposal Payload would\n   specify a compression protocol\
    \ in the protocol id field and each\n   Transform Payload would contain the specific\
    \ compression method(s)\n   being offered to the responder.\n   In the Internet\
    \ IP Security Domain of Interpretation (DOI), IPComp is\n   negotiated as the\
    \ Protocol ID PROTO_IPCOMP.  The compression\n   algorithm is negotiated as one\
    \ of the defined IPCOMP Transform\n   Identifiers.\n"
- title: 4.2. Use of Non-ISAKMP Protocol
  contents:
  - "4.2. Use of Non-ISAKMP Protocol\n   The dynamic negotiations MAY be implemented\
    \ through a protocol other\n   than ISAKMP.  Such protocol is beyond the scope\
    \ of this document.\n"
- title: 4.3. Manual Configuration
  contents:
  - "4.3. Manual Configuration\n   Nodes may establish IPComp Associations using manual\
    \ configuration.\n   For this method, a limited number of Compression Parameters\
    \ Indexes\n   (CPIs) is designated to represent a list of specific compression\n\
    \   methods.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   When IPComp is used in the context of IPSec, it\
    \ is believed not to\n   have an effect on the underlying security functionality\
    \ provided by\n   the IPSec protocol; i.e., the use of compression is not known\
    \ to\n   degrade or alter the nature of the underlying security architecture\n\
    \   or the encryption technologies used to implement it.\n   When IPComp is used\
    \ without IPSec, IP payload compression potentially\n   reduces the security of\
    \ the Internet, similar to the effects of IP\n   encapsulation [RFC-2003].  For\
    \ example, IPComp may make it difficult\n   for border routers to filter datagrams\
    \ based on header fields.  In\n   particular, the original value of the Protocol\
    \ field in the IP header\n   is not located in its normal positions within the\
    \ datagram, and any\n   transport layer header fields within the datagram, such\
    \ as port\n   numbers, are neither located in their normal positions within the\n\
    \   datagram nor presented in their original values after compression.  A\n  \
    \ filtering border router can filter the datagram only if it shares the\n   IPComp\
    \ Association used for the compression.  To allow this sort of\n   compression\
    \ in environments in which all packets need to be filtered\n   (or at least accounted\
    \ for), a mechanism must be in place for the\n   receiving node to securely communicate\
    \ the IPComp Association to the\n   border router.  This might, more rarely, also\
    \ apply to the IPComp\n   Association used for outgoing datagrams.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC-0791] Postel, J., Editor, \"Internet Protocol\", STD 5,\
    \ RFC 791,\n              September 1981.\n   [RFC-1700] Reynolds, J., and J.\
    \ Postel, \"Assigned Numbers\", STD 2,\n              RFC 1700, October 1994.\
    \  Or see:\n              http://www.iana.org/numbers.html\n   [RFC-2460] Deering,\
    \ S., and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC-1962] Rand, D., \"The PPP Compression Control\
    \ Protocol (CCP)\",\n              RFC 1962, June 1996.\n   [RFC-2003] Perkins,\
    \ C., \"IP Encapsulation within IP\", RFC 2003,\n              October 1996.\n\
    \   [RFC-2119] Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [ISAKMP]   Maughan,\
    \ D., Schertler, M., Schneider, M., and J. Turner,\n              \"Internet Security\
    \ Association and Key Management Protocol\n              (ISAKMP)\", RFC 2408,\
    \ November 1998.\n   [SECDOI]   Piper, D., \"The Internet IP Security Domain of\n\
    \              Interpretation for ISAKMP\", RFC 2407, November 1998.\n   [V42BIS]\
    \   CCITT, \"Data Compression Procedures for Data Circuit\n              Terminating\
    \ Equipment (DCE) Using Error Correction\n              Procedures\", Recommendation\
    \ V.42 bis, January 1990.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Abraham Shacham\n   Cisco Systems\n   170 West Tasman\
    \ Drive\n   San Jose, California 95134\n   United States of America\n   EMail:\
    \ shacham@cisco.com\n   Robert Monsour\n   Hi/fn Inc.\n   2105 Hamilton Avenue,\
    \ Suite 230\n   San Jose, California 95125\n   United States of America\n   EMail:\
    \ rmonsour@hifn.com\n   Roy Pereira\n   TimeStep Corporation\n   362 Terry Fox\
    \ Drive\n   Kanata, Ontario K2K 2P5\n   Canada\n   EMail: rpereira@timestep.com\n\
    \   Matt Thomas\n   AltaVista Internet Software\n   30 Porter Road\n   Littleton,\
    \ Massachusetts 01460\n   United States of America\n   EMail: matt.thomas@altavista-software.com\n"
- title: Working Group
  contents:
  - "Working Group\n   The IP Payload Compression Protocol (IPPCP) working group can\
    \ be\n   contacted through its chair:\n   Naganand Dorswamy\n   Bay Networks\n\
    \   EMail: naganand@baynetworks.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
