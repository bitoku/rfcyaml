- title: __initial_text__
  contents:
  - "   Mutual Authentication Protocol for HTTP: Cryptographic Algorithms\n      \
    \       Based on the Key Agreement Mechanism 3 (KAM3)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies cryptographic algorithms for use with the\n\
    \   Mutual user authentication method for the Hypertext Transfer Protocol\n  \
    \ (HTTP).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8121.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Cryptographic Overview (Non-normative) ..........................3\n   3.\
    \ Authentication Algorithms .......................................4\n      3.1.\
    \ Support Functions and Notations ............................5\n      3.2. Functions\
    \ for Discrete-Logarithm Settings ..................6\n      3.3. Functions for\
    \ Elliptic-Curve Settings ......................7\n   4. IANA Considerations .............................................9\n\
    \   5. Security Considerations .........................................9\n  \
    \    5.1. General Implementation Considerations ......................9\n    \
    \  5.2. Cryptographic Assumptions and Considerations ..............10\n   6. References\
    \ .....................................................11\n      6.1. Normative\
    \ References ......................................11\n      6.2. Informative\
    \ References ....................................12\n   Appendix A. (Informative)\
    \ Group Parameters for Algorithms Based\n               on the Discrete Logarithm\
    \ .............................13\n   Appendix B. (Informative) Derived Numerical\
    \ Values ................16\n   Authors' Addresses ................................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies algorithms for use with the Mutual\n\
    \   authentication protocol for the Hypertext Transfer Protocol (HTTP)\n   [RFC8120]\
    \ (hereafter referred to as the \"core specification\").  The\n   algorithms are\
    \ based on augmented password-based authenticated key\n   exchange (augmented\
    \ PAKE) techniques.  In particular, it uses one of\n   three key exchange algorithms\
    \ defined in ISO 11770-4 (\"Information\n   technology - Security techniques -\
    \ Key management - Part 4:\n   Mechanisms based on weak secrets\") [ISO.11770-4.2006]\
    \ as its basis.\n   To briefly summarize, the Mutual authentication protocol exchanges\n\
    \   four values -- K_c1, K_s1, VK_c, and VK_s -- to perform authenticated\n  \
    \ key exchanges, using the password-derived secret pi and its\n   \"augmented\
    \ version\" J(pi).  This document defines the set of\n   functions K_c1, K_s1,\
    \ and J for a specific algorithm family.\n   Please note that from the point of\
    \ view of literature related to\n   cryptography, the original functionality of\
    \ augmented PAKE is\n   separated into the functions K_c1 and K_s1 as defined\
    \ in this\n   document, and the functions VK_c and VK_s, which are defined in\n\
    \   Section 12.2 of [RFC8120] as \"default functions\".  For the purpose of\n\
    \   security analysis, please also refer to these functions.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   The term \"natural numbers\" refers to non-negative\
    \ integers (including\n   zero) throughout this document.\n   This document treats\
    \ both the input (domain) and the output\n   (codomain) of hash functions as octet\
    \ strings.  When a natural-number\n   output of hash function H is required, it\
    \ will be notated, for\n   example, as INT(H(s)).\n"
- title: 2.  Cryptographic Overview (Non-normative)
  contents:
  - "2.  Cryptographic Overview (Non-normative)\n   The cryptographic primitive used\
    \ in this algorithm specification is\n   based on a variant of augmented PAKE\
    \ called \"APKAS-AMP\" (augmented\n   password-authenticated key agreement scheme,\
    \ version AMP), proposed\n   by T. Kwon and originally submitted to [IEEE-1363.2_2008].\
    \  The\n   general flow of the successful exchange is shown below for\n   informative\
    \ purposes only.  The multiplicative notations are used for\n   group operators,\
    \ and all modulus operations for finite groups (mod q\n   and mod r) are omitted.\n\
    \      C: S_c1 = random\n      C: K_c1 = g^(S_c1)\n                       -----\
    \ ID, K_c1 ----->\n      C: t_1 = H1(K_c1)                S: t_1 = H1(K_c1)\n\
    \                                       S: fetch J = g^pi by ID\n            \
    \                           S: S_s1 = random\n                               \
    \        S: K_s1 = (J * K_c1^(t_1))^(S_s1)\n                       <----- K_s1\
    \ -----\n      C: t_2 = H2(K_c1, K_s1)          S: t_2 = H2(K_c1, K_s1)\n    \
    \  C: z = K_s1^((S_c1 + t_2) / (S_c1 * t_1 + pi))\n                          \
    \             S: z' = (K_c1 * g^(t_2))^(S_s1)\n      (assumption at this point:\
    \ z = z' if authentication succeeded)\n      C: VK_c = H4(K_c1, K_s1, z)     \
    \ S: VK_c' = H4(K_c1, K_s1, z')\n                       ----- VK_c ------->\n\
    \                                       S: assert(VK_c = VK_c')\n      C: VK_s'\
    \ = H3(K_c1, K_s1, z)     S: VK_s = H3(K_c1, K_s1, z')\n                     \
    \  <----- VK_s ------\n      C: assert(VK_s = VK_s')\n   Note that the concrete\
    \ (binary) message formats (mapping to HTTP\n   messages), as well as the formal\
    \ definitions of equations for the\n   latter two messages, are defined in the\
    \ core specification [RFC8120].\n   The formal definitions for values corresponding\
    \ to the first two\n   messages are defined in the following sections.\n"
- title: 3.  Authentication Algorithms
  contents:
  - "3.  Authentication Algorithms\n   This document specifies one family of algorithms\
    \ based on APKAS-AMP,\n   to be used with [RFC8120].  This family consists of\
    \ four\n   authentication algorithms, which differ only in their underlying\n\
    \   mathematical groups and security parameters.  These algorithms do not\n  \
    \ add any additional parameters.  The tokens for these algorithms are\n   as follows:\n\
    \   o  iso-kam3-dl-2048-sha256: for the 2048-bit discrete-logarithm\n      setting\
    \ with the SHA-256 hash function.\n   o  iso-kam3-dl-4096-sha512: for the 4096-bit\
    \ discrete-logarithm\n      setting with the SHA-512 hash function.\n   o  iso-kam3-ec-p256-sha256:\
    \ for the 256-bit prime-field\n      elliptic-curve setting with the SHA-256 hash\
    \ function.\n   o  iso-kam3-ec-p521-sha512: for the 521-bit prime-field\n    \
    \  elliptic-curve setting with the SHA-512 hash function.\n   For discrete-logarithm\
    \ settings, the underlying groups are the\n   2048-bit and 4096-bit Modular Exponential\
    \ (MODP) groups defined in\n   [RFC3526].  See Appendix A for the exact specifications\
    \ for the\n   groups and associated parameters.  Hash function H is SHA-256 for\
    \ the\n   2048-bit group and SHA-512 for the 4096-bit group, respectively, as\n\
    \   defined in FIPS PUB 180-4 [FIPS.180-4.2015].  The hash iteration\n   count\
    \ nIterPi is 16384.  The representation of the parameters \"kc1\",\n   \"ks1\"\
    , \"vkc\", and \"vks\" is base64-fixed-number.\n   For the elliptic-curve settings,\
    \ the underlying groups are the\n   elliptic curves over the prime fields P-256\
    \ and P-521, respectively,\n   as specified in Appendix D.1.2 of the FIPS PUB\
    \ 186-4\n   [FIPS.186-4.2013] specification.  Hash function H is SHA-256 for the\n\
    \   P-256 curve and SHA-512 for the P-521 curve, respectively.  Cofactors\n  \
    \ of these curves are 1.  The hash iteration count nIterPi is 16384.\n   The representation\
    \ of the parameters \"kc1\", \"ks1\", \"vkc\", and \"vks\"\n   is hex-fixed-number.\n\
    \   Note: This algorithm is based on the Key Agreement Mechanism 3 (KAM3)\n  \
    \ as defined in Section 6.3 of ISO/IEC 11770-4 [ISO.11770-4.2006], with\n   a\
    \ few modifications/improvements.  However, implementers should\n   consider this\
    \ document as normative, because several minor details of\n   the algorithm have\
    \ changed and major improvements have been made.\n"
- title: 3.1.  Support Functions and Notations
  contents:
  - "3.1.  Support Functions and Notations\n   The algorithm definitions use the support\
    \ functions and notations\n   defined below.\n   Decimal notations are used for\
    \ integers in this specification by\n   default.  Integers in hexadecimal notations\
    \ are prefixed with \"0x\".\n   In this document, the octet(), OCTETS(), and INT()\
    \ functions are used\n   as defined in the core specification [RFC8120].\n   Note:\
    \ The definition of OCTETS() is different from the function\n   GE2OS_x in the\
    \ original ISO specification; GE2OS_x takes the shortest\n   representation without\
    \ preceding zeros.\n   All of the algorithms defined in this specification use\
    \ the default\n   functions defined in Section 12.2 of [RFC8120] for computing\
    \ the\n   values pi, VK_c, and VK_s.\n"
- title: 3.2.  Functions for Discrete-Logarithm Settings
  contents:
  - "3.2.  Functions for Discrete-Logarithm Settings\n   In this section, an equation\
    \ (x / y mod z) denotes a natural number w\n   less than z that satisfies (w *\
    \ y) mod z = x mod z.\n   For the discrete logarithm, we refer to some of the\
    \ domain parameters\n   by using the following symbols:\n   o  q: for \"the prime\"\
    \ defining the MODP group.\n   o  g: for \"the generator\" associated with the\
    \ group.\n   o  r: for the order of the subgroup generated by g.\n   The function\
    \ J is defined as\n      J(pi) = g^(pi) mod q\n   The value of K_c1 is derived\
    \ as\n      K_c1 = g^(S_c1) mod q\n   where S_c1 is a random integer within the\
    \ range [1, r-1] and r is the\n   size of the subgroup generated by g.  In addition,\
    \ S_c1 MUST be\n   larger than log(q)/log(g) (so that g^(S_c1) > q).\n   The server\
    \ MUST check the condition 1 < K_c1 < q-1 upon reception.\n   Let an intermediate\
    \ value t_1 be\n      t_1 = INT(H(octet(1) | OCTETS(K_c1)))\n   The value of K_s1\
    \ is derived from J(pi) and K_c1 as\n      K_s1 = (J(pi) * K_c1^(t_1))^(S_s1)\
    \ mod q\n   where S_s1 is a random number within the range [1, r-1].  The value\n\
    \   of K_s1 MUST satisfy 1 < K_s1 < q-1.  If this condition is not held,\n   the\
    \ server MUST reject the exchange.  The client MUST check this\n   condition upon\
    \ reception.\n   Let an intermediate value t_2 be\n      t_2 = INT(H(octet(2)\
    \ | OCTETS(K_c1) | OCTETS(K_s1)))\n   The value z on the client side is derived\
    \ by the following equation:\n      z = K_s1^((S_c1 + t_2) / (S_c1 * t_1 + pi)\
    \ mod r) mod q\n   The value z on the server side is derived by the following\
    \ equation:\n      z = (K_c1 * g^(t_2))^(S_s1) mod q\n   (Note: The original ISO\
    \ specification contained a message pair\n   containing verification of value\
    \ z along with the \"transcript\" of the\n   protocol exchange.  This functionality\
    \ is contained in the functions\n   VK_c and VK_s.)\n"
- title: 3.3.  Functions for Elliptic-Curve Settings
  contents:
  - "3.3.  Functions for Elliptic-Curve Settings\n   For the elliptic-curve settings,\
    \ we refer to some of the domain\n   parameters by the following symbols:\n  \
    \ o  q: for the prime used to define the group.\n   o  G: for the point defined\
    \ with the underlying group called\n      \"the generator\".\n   o  h: for the\
    \ cofactor of the group.\n   o  r: for the order of the subgroup generated by\
    \ G.\n   The function P(p) converts a curve point p into an integer\n   representing\
    \ point p, by computing x * 2 + (y mod 2), where (x, y)\n   are the coordinates\
    \ of point p.  P'(z) is the inverse of function P;\n   that is, it converts an\
    \ integer z to a point p that satisfies\n   P(p) = z.  If such p exists, it is\
    \ uniquely defined.  Otherwise,\n   z does not represent a valid curve point.\n\
    \   The operator \"+\" indicates the elliptic-curve group operation, and\n   the\
    \ operation [x] * p denotes an integer-multiplication of point p:\n   it calculates\
    \ p + p + ... (x times) ... + p.  See the literature on\n   elliptic-curve cryptography\
    \ for the exact algorithms used for those\n   functions (e.g., Section 3 of [RFC6090];\
    \ however, note that [RFC6090]\n   uses different notations).  0_E represents\
    \ the infinity point.  The\n   equation (x / y mod z) denotes a natural number\
    \ w less than z that\n   satisfies (w * y) mod z = x mod z.\n   The function J\
    \ is defined as\n      J(pi) = [pi] * G\n   The value of K_c1 is derived as\n\
    \      K_c1 = P(K_c1'), where K_c1' = [S_c1] * G\n   where S_c1 is a random number\
    \ within the range [1, r-1].  The server\n   MUST check that (1) the value of\
    \ received K_c1 represents a valid\n   curve point and (2) [h] * K_c1' is not\
    \ equal to 0_E.\n   Let an intermediate integer t_1 be\n      t_1 = INT(H(octet(1)\
    \ | OCTETS(K_c1)))\n   The value of K_s1 is derived from J(pi) and K_c1' = P'(K_c1)\
    \ as\n      K_s1 = P([S_s1] * (J(pi) + [t_1] * K_c1'))\n   where S_s1 is a random\
    \ number within the range [1, r-1].  The value\n   of K_s1 MUST represent a valid\
    \ curve point and satisfy\n   [h] * P'(K_s1) <> 0_E.  If this condition is not\
    \ satisfied, the\n   server MUST reject the exchange.  The client MUST check this\n\
    \   condition upon reception.\n   Let an intermediate integer t_2 be\n      t_2\
    \ = INT(H(octet(2) | OCTETS(K_c1) | OCTETS(K_s1)))\n   The value z on the client\
    \ side is derived by the following equation:\n      z = P([(S_c1 + t_2) / (S_c1\
    \ * t_1 + pi) mod r] * P'(K_s1))\n   The value z on the server side is derived\
    \ by the following equation:\n      z = P([S_s1] * (P'(K_c1) + [t_2] * G))\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document defines four new tokens that have been\
    \ added to the\n   \"HTTP Mutual Authentication Algorithms\" registry:\n   +-------------------------+-----------------------------+-----------+\n\
    \   | Token                   | Description                 | Reference |\n  \
    \ +-------------------------+-----------------------------+-----------+\n   |\
    \ iso-kam3-dl-2048-sha256 | ISO-11770-4 KAM3,           | RFC 8121  |\n   |  \
    \                       | 2048-bit DL                 |           |\n   |    \
    \                     |                             |           |\n   | iso-kam3-dl-4096-sha512\
    \ | ISO-11770-4 KAM3,           | RFC 8121  |\n   |                         |\
    \ 4096-bit DL                 |           |\n   |                         |  \
    \                           |           |\n   | iso-kam3-ec-p256-sha256 | ISO-11770-4\
    \ KAM3,           | RFC 8121  |\n   |                         | 256-bit EC   \
    \               |           |\n   |                         |                \
    \             |           |\n   | iso-kam3-ec-p521-sha512 | ISO-11770-4 KAM3,\
    \           | RFC 8121  |\n   |                         | 521-bit EC         \
    \         |           |\n   +-------------------------+-----------------------------+-----------+\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Please refer to the Security Considerations section\
    \ of the core\n   specification [RFC8120] for algorithm-independent considerations.\n"
- title: 5.1.  General Implementation Considerations
  contents:
  - "5.1.  General Implementation Considerations\n   o  During the exchange, the value\
    \ VK_s, defined in [RFC8120], MUST\n      only be sent when the server has received\
    \ a correct (expected)\n      value of VK_c.  This is a cryptographic requirement,\
    \ as stated in\n      [ISO.11770-4.2006].\n   o  All random numbers used in these\
    \ algorithms MUST be\n      cryptographically secure against forward and backward\
    \ guessing\n      attacks.\n   o  To prevent timing-based side-channel attacks,\
    \ computation times of\n      all numerical operations on discrete-logarithm group\
    \ elements and\n      elliptic-curve points MUST be normalized and made independent\
    \ of\n      the exact values.\n"
- title: 5.2.  Cryptographic Assumptions and Considerations
  contents:
  - "5.2.  Cryptographic Assumptions and Considerations\n   The notes in this subsection\
    \ are for those who analyze the security\n   of this algorithm and those who might\
    \ want to make a derived work\n   from this algorithm specification.\n   o  The\
    \ treatment of an invalid K_s1 value in the exchange has been\n      changed from\
    \ the method defined in the original ISO specification,\n      which specifies\
    \ that the sender should retry with another random\n      S_s1 value.  We specify\
    \ that the exchange must be rejected.  This\n      is due to an observation that\
    \ this condition is less likely to\n      result from a random error caused by\
    \ an unlucky choice of S_s1 but\n      is more likely the result of a systematic\
    \ failure caused by an\n      invalid J(pi) value (even implying possible denial-of-service\n\
    \      attacks).\n   o  The usual construction of authenticated key exchange algorithms\n\
    \      consists of a key exchange phase and a key verification phase.  To\n  \
    \    avoid security risks or vulnerabilities caused by mixing values\n      from\
    \ two or more key exchanges, the latter usually involves some\n      kinds of\
    \ exchange transactions to be verified.  In the algorithms\n      defined in this\
    \ document, such verification steps are provided in\n      the generalized definitions\
    \ of VK_c and VK_s in [RFC8120].  If the\n      algorithm defined above is used\
    \ in other protocols, this aspect\n      MUST be given careful consideration.\n\
    \   o  The domain parameters chosen and specified in this document are\n     \
    \ based on a few assumptions.  In the discrete-logarithm setting,\n      q has\
    \ to be a safe prime ([(q - 1) / 2] must also be prime), and\n      r should be\
    \ the largest possible value [(q - 1) / 2].  In the\n      elliptic-curve setting,\
    \ r has to be prime.  Implementers defining\n      a variation of this algorithm\
    \ using a different domain parameter\n      SHOULD be attentive to these conditions.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [FIPS.180-4.2015]\n              National Institute\
    \ of Standards and Technology, \"Secure\n              Hash Standard (SHS)\",\
    \ FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4, August 2015,\n \
    \             <http://nvlpubs.nist.gov/nistpubs/FIPS/\n              NIST.FIPS.180-4.pdf>.\n\
    \   [FIPS.186-4.2013]\n              National Institute of Standards and Technology,\
    \ \"Digital\n              Signature Standard (DSS)\", FIPS PUB 186-4,\n     \
    \         DOI 10.6028/NIST.FIPS.186-4, July 2013,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/\n\
    \              NIST.FIPS.186-4.pdf>.\n   [RFC2119]  Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n\
    \              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3526]  Kivinen, T. and M. Kojo, \"More Modular Exponential (MODP)\n  \
    \            Diffie-Hellman groups for Internet Key Exchange (IKE)\",\n      \
    \        RFC 3526, DOI 10.17487/RFC3526, May 2003,\n              <http://www.rfc-editor.org/info/rfc3526>.\n\
    \   [RFC8120]  Oiwa, Y., Watanabe, H., Takagi, H., Maeda, K., Hayashi,\n     \
    \         T., and Y. Ioku, \"Mutual Authentication Protocol for\n            \
    \  HTTP\", RFC 8120, DOI 10.17487/RFC8120, April 2017,\n              <http://www.rfc-editor.org/info/rfc8120>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [IEEE-1363.2_2008]\n              IEEE, \"IEEE\
    \ Standard Specifications for Password-Based\n              Public-Key Cryptographic\
    \ Techniques\", IEEE 1363.2-2008,\n              DOI 10.1109/ieeestd.2009.4773330,\n\
    \              <http://ieeexplore.ieee.org/servlet/\n              opac?punumber=4773328>.\n\
    \   [ISO.11770-4.2006]\n              International Organization for Standardization,\n\
    \              \"Information technology -- Security techniques -- Key\n      \
    \        management -- Part 4: Mechanisms based on weak secrets\",\n         \
    \     ISO Standard 11770-4, May 2006,\n              <http://www.iso.org/iso/iso_catalogue/catalogue_tc/\n\
    \              catalogue_detail.htm?csnumber=39723>.\n   [RFC6090]  McGrew, D.,\
    \ Igoe, K., and M. Salter, \"Fundamental Elliptic\n              Curve Cryptography\
    \ Algorithms\", RFC 6090,\n              DOI 10.17487/RFC6090, February 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6090>.\n"
- title: Appendix A.  (Informative) Group Parameters for Algorithms Based on the
  contents:
  - "Appendix A.  (Informative) Group Parameters for Algorithms Based on the\n   \
    \          Discrete Logarithm\n   The MODP group used for the iso-kam3-dl-2048-sha256\
    \ algorithm is\n   defined by the following parameters:\n   The prime is\n   \
    \   q = 0xFFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1\n            29024E08\
    \ 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD\n            EF9519B3 CD3A431B\
    \ 302B0A6D F25F1437 4FE1356D 6D51C245\n            E485B576 625E7EC6 F44C42E9\
    \ A637ED6B 0BFF5CB6 F406B7ED\n            EE386BFB 5A899FA5 AE9F2411 7C4B1FE6\
    \ 49286651 ECE45B3D\n            C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8\
    \ FD24CF5F\n            83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D\n\
    \            670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B\n         \
    \   E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9\n            DE2BCBF6\
    \ 95581718 3995497C EA956AE5 15D22618 98FA0510\n            15728E5A 8AACAA68\
    \ FFFFFFFF FFFFFFFF\n   The generator is\n      g = 2\n   The size of the subgroup\
    \ generated by g is\n      r = (q - 1) / 2 =\n          0x7FFFFFFF FFFFFFFF E487ED51\
    \ 10B4611A 62633145 C06E0E68\n            94812704 4533E63A 0105DF53 1D89CD91\
    \ 28A5043C C71A026E\n            F7CA8CD9 E69D218D 98158536 F92F8A1B A7F09AB6\
    \ B6A8E122\n            F242DABB 312F3F63 7A262174 D31BF6B5 85FFAE5B 7A035BF6\n\
    \            F71C35FD AD44CFD2 D74F9208 BE258FF3 24943328 F6722D9E\n         \
    \   E1003E5C 50B1DF82 CC6D241B 0E2AE9CD 348B1FD4 7E9267AF\n            C1B2AE91\
    \ EE51D6CB 0E3179AB 1042A95D CF6A9483 B84B4B36\n            B3861AA7 255E4C02\
    \ 78BA3604 650C10BE 19482F23 171B671D\n            F1CF3B96 0C074301 CD93C1D1\
    \ 7603D147 DAE2AEF8 37A62964\n            EF15E5FB 4AAC0B8C 1CCAA4BE 754AB572\
    \ 8AE9130C 4C7D0288\n            0AB9472D 45565534 7FFFFFFF FFFFFFFF\n   The MODP\
    \ group used for the iso-kam3-dl-4096-sha512 algorithm is\n   defined by the following\
    \ parameters:\n   The prime is\n      q = 0xFFFFFFFF FFFFFFFF C90FDAA2 2168C234\
    \ C4C6628B 80DC1CD1\n            29024E08 8A67CC74 020BBEA6 3B139B22 514A0879\
    \ 8E3404DD\n            EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245\n\
    \            E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED\n         \
    \   EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D\n            C2007CB8\
    \ A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F\n            83655D23 DCA3AD96\
    \ 1C62F356 208552BB 9ED52907 7096966D\n            670C354E 4ABC9804 F1746C08\
    \ CA18217C 32905E46 2E36CE3B\n            E39E772C 180E8603 9B2783A2 EC07A28F\
    \ B5C55DF0 6F4C52C9\n            DE2BCBF6 95581718 3995497C EA956AE5 15D22618\
    \ 98FA0510\n            15728E5A 8AAAC42D AD33170D 04507A33 A85521AB DF1CBA64\n\
    \            ECFB8504 58DBEF0A 8AEA7157 5D060C7D B3970F85 A6E1E4C7\n         \
    \   ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D226 1AD2EE6B\n            F12FFA06\
    \ D98A0864 D8760273 3EC86A64 521F2B18 177B200C\n            BBE11757 7A615D6C\
    \ 770988C0 BAD946E2 08E24FA0 74E5AB31\n            43DB5BFC E0FD108E 4B82D120\
    \ A9210801 1A723C12 A787E6D7\n            88719A10 BDBA5B26 99C32718 6AF4E23C\
    \ 1A946834 B6150BDA\n            2583E9CA 2AD44CE8 DBBBC2DB 04DE8EF9 2E8EFC14\
    \ 1FBECAA6\n            287C5947 4E6BC05D 99B2964F A090C3A2 233BA186 515BE7ED\n\
    \            1F612970 CEE2D7AF B81BDD76 2170481C D0069127 D5B05AA9\n         \
    \   93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 34063199\n            FFFFFFFF\
    \ FFFFFFFF\n   The generator is\n      g = 2\n   The size of the subgroup generated\
    \ by g is\n      r = (q - 1) / 2 =\n          0x7FFFFFFF FFFFFFFF E487ED51 10B4611A\
    \ 62633145 C06E0E68\n            94812704 4533E63A 0105DF53 1D89CD91 28A5043C\
    \ C71A026E\n            F7CA8CD9 E69D218D 98158536 F92F8A1B A7F09AB6 B6A8E122\n\
    \            F242DABB 312F3F63 7A262174 D31BF6B5 85FFAE5B 7A035BF6\n         \
    \   F71C35FD AD44CFD2 D74F9208 BE258FF3 24943328 F6722D9E\n            E1003E5C\
    \ 50B1DF82 CC6D241B 0E2AE9CD 348B1FD4 7E9267AF\n            C1B2AE91 EE51D6CB\
    \ 0E3179AB 1042A95D CF6A9483 B84B4B36\n            B3861AA7 255E4C02 78BA3604\
    \ 650C10BE 19482F23 171B671D\n            F1CF3B96 0C074301 CD93C1D1 7603D147\
    \ DAE2AEF8 37A62964\n            EF15E5FB 4AAC0B8C 1CCAA4BE 754AB572 8AE9130C\
    \ 4C7D0288\n            0AB9472D 45556216 D6998B86 82283D19 D42A90D5 EF8E5D32\n\
    \            767DC282 2C6DF785 457538AB AE83063E D9CB87C2 D370F263\n         \
    \   D5FAD746 6D8499EB 8F464A70 2512B0CE E771E913 0D697735\n            F897FD03\
    \ 6CC50432 6C3B0139 9F643532 290F958C 0BBD9006\n            5DF08BAB BD30AEB6\
    \ 3B84C460 5D6CA371 047127D0 3A72D598\n            A1EDADFE 707E8847 25C16890\
    \ 54908400 8D391E09 53C3F36B\n            C438CD08 5EDD2D93 4CE1938C 357A711E\
    \ 0D4A341A 5B0A85ED\n            12C1F4E5 156A2674 6DDDE16D 826F477C 97477E0A\
    \ 0FDF6553\n            143E2CA3 A735E02E CCD94B27 D04861D1 119DD0C3 28ADF3F6\n\
    \            8FB094B8 67716BD7 DC0DEEBB 10B8240E 68034893 EAD82D54\n         \
    \   C9DA754C 46C7EEE0 C37FDBEE 48536047 A6FA1AE4 9A0318CC\n            FFFFFFFF\
    \ FFFFFFFF\n"
- title: Appendix B.  (Informative) Derived Numerical Values
  contents:
  - "Appendix B.  (Informative) Derived Numerical Values\n   This section provides\
    \ several numerical values for implementing this\n   protocol.  These values are\
    \ derived from the specifications provided\n   in Section 3.  The values shown\
    \ in this section are for informative\n   purposes only.\n   +----------------+---------+---------+---------+---------+----------+\n\
    \   |                | dl-2048 | dl-4096 | ec-p256 | ec-p521 |          |\n  \
    \ +----------------+---------+---------+---------+---------+----------+\n   |\
    \ Size of K_c1,  | 2048    | 4096    | 257     | 522     | (bits)   |\n   | etc.\
    \           |         |         |         |         |          |\n   |       \
    \         |         |         |         |         |          |\n   | hSize, size\
    \ of | 256     | 512     | 256     | 512     | (bits)   |\n   | H(...)       \
    \  |         |         |         |         |          |\n   |                |\
    \         |         |         |         |          |\n   | Length of      | 256\
    \     | 512     | 33      | 66      | (octets) |\n   | OCTETS(K_c1),  |      \
    \   |         |         |         |          |\n   | etc.           |        \
    \ |         |         |         |          |\n   |                |         |\
    \         |         |         |          |\n   | Length of kc1, | 344*    | 684*\
    \    | 66      | 132     | (octets) |\n   | ks1 param.     |         |       \
    \  |         |         |          |\n   | values         |         |         |\
    \         |         |          |\n   |                |         |         |  \
    \       |         |          |\n   | Length of vkc, | 44*     | 88*     | 64 \
    \     | 128     | (octets) |\n   | vks param.     |         |         |      \
    \   |         |          |\n   | values         |         |         |        \
    \ |         |          |\n   |                |         |         |         |\
    \         |          |\n   | Minimum        | 2048    | 4096    | 1       | 1\
    \       |          |\n   | allowed S_c1   |         |         |         |    \
    \     |          |\n   +----------------+---------+---------+---------+---------+----------+\n\
    \   (The numbers marked with an \"*\" do not include any enclosing\n   quotation\
    \ marks.)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yutaka Oiwa\n   National Institute of Advanced Industrial\
    \ Science and Technology\n   Information Technology Research Institute\n   Tsukuba\
    \ Central 1\n   1-1-1 Umezono\n   Tsukuba-shi, Ibaraki\n   Japan\n   Email: y.oiwa@aist.go.jp\n\
    \   Hajime Watanabe\n   National Institute of Advanced Industrial Science and\
    \ Technology\n   Information Technology Research Institute\n   Tsukuba Central\
    \ 1\n   1-1-1 Umezono\n   Tsukuba-shi, Ibaraki\n   Japan\n   Email: h-watanabe@aist.go.jp\n\
    \   Hiromitsu Takagi\n   National Institute of Advanced Industrial Science and\
    \ Technology\n   Information Technology Research Institute\n   Tsukuba Central\
    \ 1\n   1-1-1 Umezono\n   Tsukuba-shi, Ibaraki\n   Japan\n   Email: takagi.hiromitsu@aist.go.jp\n\
    \   Kaoru Maeda\n   Individual Contributor\n   Email: kaorumaeda.ml@gmail.com\n\
    \   Tatsuya Hayashi\n   Lepidum Co. Ltd.\n   Village Sasazuka 3, Suite #602\n\
    \   1-30-3 Sasazuka\n   Shibuya-ku, Tokyo\n   Japan\n   Email: hayashi@lepidum.co.jp\n\
    \   Yuichi Ioku\n   Individual Contributor\n   Email: mutual-work@ioku.org\n"
