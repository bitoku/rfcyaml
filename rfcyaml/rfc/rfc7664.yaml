- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                      D. Harkins, Ed.
  contents:
  - "Internet Research Task Force (IRTF)                      D. Harkins, Ed.\n  \
    \                       Dragonfly Key Exchange\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a key exchange using discrete logarithm\n\
    \   cryptography that is authenticated using a password or passphrase.\n   It\
    \ is resistant to active attack, passive attack, and offline\n   dictionary attack.\
    \  This document is a product of the Crypto Forum\n   Research Group (CFRG).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the individual\
    \ opinion(s) of one or\n   more members of the Crypto Forum Research Group of\
    \ the Internet\n   Research Task Force (IRTF).  Documents approved for publication\
    \ by\n   the IRSG are not a candidate for any level of Internet Standard; see\n\
    \   Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7664.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   2\n     1.2.  Definitions . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n       1.2.1.  Notations . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n       1.2.2.  Resistance to Dictionary Attack . . . . . . . . . .\
    \ .   3\n   2.  Discrete Logarithm Cryptography . . . . . . . . . . . . . . .\
    \   4\n     2.1.  Elliptic Curve Cryptography . . . . . . . . . . . . . . .  \
    \ 4\n     2.2.  Finite Field Cryptography . . . . . . . . . . . . . . . .   5\n\
    \   3.  The Dragonfly Key Exchange  . . . . . . . . . . . . . . . . .   6\n  \
    \   3.1.  Assumptions . . . . . . . . . . . . . . . . . . . . . . .   7\n    \
    \ 3.2.  Derivation of the Password Element  . . . . . . . . . . .   8\n      \
    \ 3.2.1.  Hunting and Pecking with ECC Groups . . . . . . . . .  10\n       3.2.2.\
    \  Hunting and Pecking with MODP Groups  . . . . . . . .  12\n     3.3.  The Commit\
    \ Exchange . . . . . . . . . . . . . . . . . . .  13\n     3.4.  The Confirm Exchange\
    \  . . . . . . . . . . . . . . . . . .  14\n   4.  Security Considerations . .\
    \ . . . . . . . . . . . . . . . . .  15\n   5.  References  . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  16\n     5.1.  Normative References  . . .\
    \ . . . . . . . . . . . . . . .  16\n     5.2.  Informative References  . . .\
    \ . . . . . . . . . . . . . .  16\n   Acknowledgements  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  18\n   Author's Address  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Passwords and passphrases are the predominant way of doing\n\
    \   authentication in the Internet today.  Many protocols that use\n   passwords\
    \ and passphrases for authentication exchange password-\n   derived data as a\
    \ proof-of-knowledge of the password (for example,\n   [RFC7296] and [RFC5433]).\
    \  This opens the exchange up to an offline\n   dictionary attack where the attacker\
    \ gleans enough knowledge from\n   either an active or passive attack on the protocol\
    \ to run through a\n   pool of potential passwords and compute verifiers until\
    \ it is able to\n   match the password-derived data.\n   This protocol employs\
    \ discrete logarithm cryptography to perform an\n   efficient exchange in a way\
    \ that performs mutual authentication using\n   a password that is provably resistant\
    \ to an offline dictionary\n   attack.  Consensus of the CFRG for this document\
    \ was rough.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 1.2.  Definitions
  contents:
  - '1.2.  Definitions

    '
- title: 1.2.1.  Notations
  contents:
  - "1.2.1.  Notations\n   The following notations are used in this memo.\n   password\n\
    \      A shared, secret, and potentially low-entropy word, phrase, code,\n   \
    \   or key used as a credential to mutually authenticate the peers.\n      It\
    \ is not restricted to characters in a human language.\n   a | b\n      denotes\
    \ concatenation of bit string \"a\" with bit string \"b\".\n   len(a)\n      indicates\
    \ the length in bits of the bit string \"a\".\n   lsb(a)\n      returns the least-significant\
    \ bit of the bit string \"a\".\n   lgr(a,b)\n      takes \"a\" and a prime, \"\
    b\", and returns the Legendre symbol (a/b).\n   min(a,b)\n      returns the lexicographical\
    \ minimum of strings \"a\" and \"b\", or\n      zero (0) if \"a\" equals \"b\"\
    .\n   max(a,b)\n      returns the lexicographical maximum of strings \"a\" and\
    \ \"b\", or\n      zero (0) if \"a\" equals \"b\".\n   The convention for this\
    \ memo is to represent an element in a finite\n   cyclic group with an uppercase\
    \ letter or acronym, while a scalar is\n   indicated with a lowercase letter or\
    \ acronym.  An element that\n   represents a point on an elliptic curve has an\
    \ implied composite\n   nature -- i.e., it has both an x- and y-coordinate.\n"
- title: 1.2.2.  Resistance to Dictionary Attack
  contents:
  - "1.2.2.  Resistance to Dictionary Attack\n   Resistance to dictionary attack means\
    \ that any advantage an adversary\n   can gain must be directly related to the\
    \ number of interactions she\n   makes with an honest protocol participant and\
    \ not through\n   computation.  The adversary will not be able to obtain any\n\
    \   information about the password except whether a single guess from a\n   protocol\
    \ run is correct or incorrect.\n"
- title: 2.  Discrete Logarithm Cryptography
  contents:
  - "2.  Discrete Logarithm Cryptography\n   Dragonfly uses discrete logarithm cryptography\
    \ to achieve\n   authentication and key agreement (see [SP800-56A]).  Each party\
    \ to\n   the exchange derives ephemeral keys with respect to a particular set\n\
    \   of domain parameters (referred to here as a \"group\").  A group can be\n\
    \   based on Finite Field Cryptography (FFC) or Elliptic Curve\n   Cryptography\
    \ (ECC).\n   Three operations are defined for both types of groups:\n   o  \"\
    scalar operation\" -- takes a scalar and an element in the group\n      to produce\
    \ another element -- Z = scalar-op(x, Y).\n   o  \"element operation\" -- takes\
    \ two elements in the group to produce\n      a third -- Z = element-op(X, Y).\n\
    \   o  \"inverse operation\" -- takes an element and returns another\n      element\
    \ such that the element operation on the two produces the\n      identity element\
    \ of the group -- Y = inverse(X).\n"
- title: 2.1.  Elliptic Curve Cryptography
  contents:
  - "2.1.  Elliptic Curve Cryptography\n   Domain parameters for the ECC groups used\
    \ by Dragonfly are:\n   o  A prime, p, determining a prime field GF(p).  The cryptographic\n\
    \      group will be a subgroup of the full elliptic curve group that\n      consists\
    \ of points on an elliptic curve -- elements from GF(p)\n      that satisfy the\
    \ curve's equation -- together with the \"point at\n      infinity\" that serves\
    \ as the identity element.  The group\n      operation for ECC groups is addition\
    \ of points on the elliptic\n      curve.\n   o  Elements a and b from GF(p) that\
    \ define the curve's equation.  The\n      point (x, y) in GF(p) x GF(p) is on\
    \ the elliptic curve if and only\n      if (y^2 - x^3 - a*x - b) mod p equals\
    \ zero (0).\n   o  A point, G, on the elliptic curve, which serves as a generator\
    \ for\n      the ECC group.  G is chosen such that its order, with respect to\n\
    \      elliptic curve addition, is a sufficiently large prime.\n   o  A prime,\
    \ q, which is the order of G, and thus is also the size of\n      the cryptographic\
    \ subgroup that is generated by G.\n   An (x,y) pair is a valid ECC element if:\
    \ 1) the x- and y-coordinates\n   are both greater than zero (0) and less than\
    \ the prime defining the\n   underlying field; and, 2) the x- and y-coordinates\
    \ satisfy the\n   equation for the curve and produce a valid point on the curve\
    \ that is\n   not the point at infinity.  If either one of those conditions do\
    \ not\n   hold, the (x,y) pair is not a valid element.\n   The scalar operation\
    \ is addition of a point on the curve with itself\n   a number of times.  The\
    \ point Y is multiplied x times to produce\n   another point Z:\n      Z = scalar-op(x,\
    \ Y) = x*Y\n   The element operation is addition of two points on the curve. \
    \ Points\n   X and Y are summed to produce another point Z:\n      Z = element-op(X,\
    \ Y) = X + Y\n   The inverse function is defined such that the sum of an element\
    \ and\n   its inverse is \"0\", the point at infinity of an elliptic curve group:\n\
    \      R + inverse(R) = \"0\"\n   Elliptic curve groups require a mapping function,\
    \ q = F(Q), to\n   convert a group element to an integer.  The mapping function\
    \ used in\n   this memo returns the x-coordinate of the point it is passed.\n\
    \   scalar-op(x, Y) can be viewed as x iterations of element-op() by\n   defining:\n\
    \      Y = scalar-op(1, Y)\n      Y = scalar-op(x, Y) = element-op(Y, scalar-op(x-1,\
    \ Y)), for x > 1\n   A definition of how to add two points on an elliptic curve\
    \ (i.e.,\n   element-op(X, Y)) can be found in [RFC6090].\n   Note: There is another\
    \ elliptic curve domain parameter, a cofactor,\n   h, that is defined by the requirement\
    \ that the size of the full\n   elliptic curve group (including \"0\") be the\
    \ product of h and q.\n   Elliptic curve groups used with Dragonfly authentication\
    \ MUST have a\n   cofactor of one (1).\n"
- title: 2.2.  Finite Field Cryptography
  contents:
  - "2.2.  Finite Field Cryptography\n   Domain parameters for the FFC groups used\
    \ in Dragonfly are:\n   o  A prime, p, determining a prime field GF(p), the integers\
    \ modulo\n      p.  The FFC group will be a subgroup of GF(p)*, the multiplicative\n\
    \      group of non-zero elements in GF(p).  The group operation for FFC\n   \
    \   groups is multiplication modulo p.\n   o  An element, G, in GF(p)* which serves\
    \ as a generator for the FFC\n      group.  G is chosen such that its multiplicative\
    \ order is a\n      sufficiently large prime divisor of ((p-1)/2).\n   o  A prime,\
    \ q, which is the multiplicative order of G, and thus also\n      the size of\
    \ the cryptographic subgroup of GF(p)* that is generated\n      by G.\n   A number\
    \ is a valid element in an FFC group if: 1) it is between one\n   (1) and one\
    \ (1) less than the prime, p, exclusive (i.e., 1 < element\n   < p-1); and, 2)\
    \ if modular exponentiation of the element by the group\n   order, q, equals one\
    \ (1).  If either one of those conditions do not\n   hold, the number is not a\
    \ valid element.\n   The scalar operation is exponentiation of a generator modulo\
    \ a prime.\n   An element Y is taken to the x-th power modulo the prime returning\n\
    \   another element, Z:\n      Z = scalar-op(x, Y) = Y^x mod p\n   The element\
    \ operation is modular multiplication.  Two elements, X and\n   Y, are multiplied\
    \ modulo the prime returning another element, Z:\n      Z = element-op(X, Y) =\
    \ (X * Y) mod p\n   The inverse function for a MODP group is defined such that\
    \ the\n   product of an element and its inverse modulo the group prime equals\n\
    \   one (1).  In other words,\n      (R * inverse(R)) mod p = 1\n"
- title: 3.  The Dragonfly Key Exchange
  contents:
  - "3.  The Dragonfly Key Exchange\n   There are two parties to the Dragonfly exchange\
    \ named, for\n   convenience and by convention, Alice and Bob.  The two parties\
    \ have a\n   shared password that was established in an out-of-band mechanism,\
    \ and\n   they both agree to use a particular domain parameter set (either ECC\n\
    \   or FFC).  In the Dragonfly exchange, both Alice and Bob share an\n   identical\
    \ view of the shared password -- i.e., it is not \"augmented\",\n   where one\
    \ side holds a password and the other side holds a non-\n   invertible verifier.\
    \  This allows Dragonfly to be used in traditional\n   client-server protocols\
    \ and also in peer-to-peer applications in\n   which there are not fixed roles\
    \ and either party may initiate the\n   exchange (and both parties may implement\
    \ it simultaneously).\n   Prior to beginning the Dragonfly exchange, the two peers\
    \ MUST derive\n   a secret element in the chosen domain parameter set.  Two \"\
    hunting-\n   and-pecking\" techniques to determine a secret element, one for ECC\n\
    \   and one for FFC, are described in Section 3.2, but any secure,\n   deterministic\
    \ method that is agreed upon can be used.  For instance,\n   the technique described\
    \ in [hash2ec] can be used for ECC groups.\n   The Dragonfly exchange consists\
    \ of two message exchanges, a \"Commit\n   Exchange\" in which both sides commit\
    \ to a single guess of the\n   password, and a \"Confirm Exchange\" in which both\
    \ sides confirm\n   knowledge of the password.  A side effect of running the Dragonfly\n\
    \   exchange is an authenticated, shared, and secret key whose\n   cryptographic\
    \ strength is set by the agreed-upon group.\n   Dragonfly uses a random function,\
    \ H(), a mapping function, F(), and a\n   key derivation function, KDF().\n"
- title: 3.1.  Assumptions
  contents:
  - "3.1.  Assumptions\n   In order to avoid attacks on the Dragonfly protocol, some\
    \ basic\n   assumptions are made:\n   1.  Function H is a \"random oracle\" (see\
    \ [RANDOR]) that maps a binary\n       string of indeterminate length onto a fixed\
    \ binary string that is\n       x bits in length.\n          H: {0,1}^* --> {0,1}^x\n\
    \   2.  Function F is a mapping function that takes an element in a group\n  \
    \     and returns an integer.  For ECC groups, function F() returns the\n    \
    \   x-coordinate of the element (which is a point on the elliptic\n       curve);\
    \ for FFC groups, function F() is the identity function\n       (since all elements\
    \ in an FFC group are already integers less\n       than the prime).\n       \
    \   ECC: x = F(P), where P=(x,y)\n          FFC: x = F(x)\n   3.  Function KDF\
    \ is a key derivation function (see, for instance,\n       [SP800-108]) that takes\
    \ a key to stretch, k, a label to bind to\n       the key, label, and an indication\
    \ of the desired output, n:\n          stretch = KDF-n(k, label)\n       so that\
    \ len(stretch) equals n.\n   4.  The discrete logarithm problem for the chosen\
    \ group is hard.\n       That is, given G, P, and Y = G^x mod p, it is computationally\n\
    \       infeasible to determine x.  Similarly, for an ECC group given the\n  \
    \     curve definition, a generator G, and Y = x * G, it is\n       computationally\
    \ infeasible to determine x.\n   5.  There exists a pool of passwords from which\
    \ the password shared\n       by the two peers is drawn.  This pool can consist\
    \ of words from a\n       dictionary, for example.  Each password in this pool\
    \ has an equal\n       probability of being the shared password.  All potential\n\
    \       attackers have access to this pool of passwords.\n   6.  The peers have\
    \ the ability to produce quality random numbers.\n"
- title: 3.2.  Derivation of the Password Element
  contents:
  - "3.2.  Derivation of the Password Element\n   Prior to beginning the exchange\
    \ of information, the peers MUST derive\n   a secret element, called the Password\
    \ Element (PE), in the group\n   defined by the chosen domain parameter set. \
    \ From the point of view\n   of an attacker who does not know the password, the\
    \ PE will be a\n   random element in the negotiated group.  Two examples are described\n\
    \   here for completeness, but any method of deterministically mapping a\n   secret\
    \ string into an element in a selected group can be used -- for\n   instance,\
    \ the technique in [hash2ec] for ECC groups.  If a different\n   technique than\
    \ the ones described here is used, the secret string\n   SHOULD include the identities\
    \ of the peers.\n   To fix the PE, both peers MUST have a common view of the password.\n\
    \   If there is any password processing necessary (for example, to\n   support\
    \ internationalization), the processed password is then used as\n   the shared\
    \ credential.  If either side wants to store a hashed\n   version of the password\
    \ (hashing the password with random data called\n   a \"salt\"), it will be necessary\
    \ to convey the salt to the other side\n   prior to commencing the exchange, and\
    \ the hashed password is then\n   used as the shared credential.\n   Note: Only\
    \ one party would be able to maintain a salted password, and\n   this would require\
    \ that the Dragonfly key exchange be used in a\n   protocol that has strict roles\
    \ for client (that always initiates) and\n   server (that always responds).  Due\
    \ to the symmetric nature of\n   Dragonfly, salting passwords does not prevent\
    \ an impersonation attack\n   after compromise of a database of salted passwords.\n\
    \   The deterministic process to select the PE begins with choosing a\n   secret\
    \ seed and then performing a group-specific hunting-and-pecking\n   technique\
    \ -- one for FFC groups and another for ECC groups.\n   To thwart side-channel\
    \ attacks that attempt to determine the number\n   of iterations of the hunting-and-pecking\
    \ loop used to find the PE for\n   a given password, a security parameter, k,\
    \ is used that ensures that\n   at least k iterations are always performed.  The\
    \ probability that one\n   requires more than n iterations of the hunting-and-pecking\
    \ loop to\n   find an ECC PE is roughly (q/2p)^n and to find an FFC PE is roughly\n\
    \   (q/p)^n, both of which rapidly approach zero (0) as n increases.  The\n  \
    \ security parameter, k, SHOULD be set sufficiently large such that the\n   probability\
    \ that finding the PE would take more than k iterations is\n   sufficiently small\
    \ (see Section 4).\n   First, an 8-bit counter is set to one (1), and a secret\
    \ base is\n   computed using the negotiated one-way function with the identities\
    \ of\n   the two participants, Alice and Bob, the secret password, and the\n \
    \  counter:\n   base = H(max(Alice,Bob) | min(Alice,Bob) | password | counter)\n\
    \   The identities are passed to the max() and min() functions to provide\n  \
    \ the necessary ordering of the inputs to H() while still allowing for\n   a peer-to-peer\
    \ exchange where both Alice and Bob each view themselves\n   as the \"initiator\"\
    \ of the exchange.\n   The base is then stretched using the technique from Section\
    \ B.5.1 of\n   [FIPS186-4].  The key derivation function, KDF, is used to produce\
    \ a\n   bitstream whose length is equal to the length of the prime from the\n\
    \   group's domain parameter set plus the constant sixty-four (64) to\n   derive\
    \ a temporary value, and the temporary value is modularly\n   reduced to produce\
    \ a seed:\n   n = len(p) + 64\n   temp = KDF-n(base, \"Dragonfly Hunting and Pecking\"\
    )\n   seed = (temp mod (p - 1)) + 1\n   The string bound to the derived temporary\
    \ value is for illustrative\n   purposes only.  Implementations of the Dragonfly\
    \ key exchange SHOULD\n   use a usage-specific label with the KDF.\n   Note: The\
    \ base is stretched to 64 more bits than are needed so that\n   the bias from\
    \ the modular reduction is not so apparent.\n   The seed is then passed to the\
    \ group-specific hunting-and-pecking\n   technique.\n   If the protocol performing\
    \ the Dragonfly exchange has the ability to\n   exchange random nonces, those\
    \ SHOULD be added to the computation of\n   the base to ensure that each run of\
    \ the protocol produces a different\n   PE.\n"
- title: 3.2.1.  Hunting and Pecking with ECC Groups
  contents:
  - "3.2.1.  Hunting and Pecking with ECC Groups\n   The ECC-specific hunting-and-pecking\
    \ technique entails looping until\n   a valid point on the elliptic curve has\
    \ been found.  The seed is used\n   as an x-coordinate with the equation of the\
    \ curve to check whether\n   x^3 + a*x + b is a quadratic residue modulo p.  If\
    \ it is not, then\n   the counter is incremented, a new base and new seed are\
    \ generated,\n   and the hunting and pecking continues.  If it is a quadratic\
    \ residue\n   modulo p, then the x-coordinate is assigned the value of seed and\
    \ the\n   current base is stored.  When the hunting-and-pecking loop\n   terminates,\
    \ the x-coordinate is used with the equation of the curve\n   to solve for a y-coordinate.\
    \  An ambiguity exists since two values\n   for the y-coordinate would be valid,\
    \ and the low-order bit of the\n   stored base is used to unambiguously determine\
    \ the correct\n   y-coordinate.  The resulting (x,y) pair becomes the Password\
    \ Element,\n   PE.\n   Algorithmically, the process looks like this:\n       \
    \ found = 0\n        counter = 1\n        n = len(p) + 64\n        do {\n    \
    \      base = H(max(Alice,Bob) | min(Alice,Bob) | password | counter)\n      \
    \    temp = KDF-n(base, \"Dragonfly Hunting And Pecking\")\n          seed = (temp\
    \ mod (p - 1)) + 1\n          if ( (seed^3 + a*seed + b) is a quadratic residue\
    \ mod p)\n          then\n            if ( found == 0 )\n            then\n  \
    \            x = seed\n              save = base\n              found = 1\n  \
    \          fi\n          fi\n          counter = counter + 1\n        } while\
    \ ((found == 0) || (counter <= k))\n        y = sqrt(x^3 + ax + b)\n        if\
    \ ( lsb(y) == lsb(save) )\n        then\n          PE = (x,y)\n        else\n\
    \          PE = (x,p-y)\n        fi\n                    Figure 1: Fixing PE for\
    \ ECC Groups\n   Checking whether a value is a quadratic residue modulo a prime\
    \ can\n   leak information about that value in a side-channel attack.\n   Therefore,\
    \ it is RECOMMENDED that the technique used to determine if\n   the value is a\
    \ quadratic residue modulo p blind the value with a\n   random number so that\
    \ the blinded value can take on all numbers\n   between 1 and p-1 with equal probability\
    \ while not changing its\n   quadratic residuosity.  Determining the quadratic\
    \ residue in a\n   fashion that resists leakage of information is handled by flipping\
    \ a\n   coin and multiplying the blinded value by either a random quadratic\n\
    \   residue or a random quadratic nonresidue and checking whether the\n   multiplied\
    \ value is a quadratic residue (qr) or a quadratic\n   nonresidue (qnr) modulo\
    \ p, respectively.  The random residue and\n   nonresidue can be calculated prior\
    \ to hunting and pecking by\n   calculating the Legendre symbol on random values\
    \ until they are\n   found:\n      do {\n        qr = random() mod p\n      }\
    \ while ( lgr(qr, p) != 1)\n      do {\n        qnr = random() mod p\n      }\
    \ while ( lgr(qnr, p) != -1)\n   Algorithmically, the masking technique to find\
    \ out whether or not a\n   value is a quadratic residue looks like this:\n   \
    \   is_quadratic_residue (val, p) {\n          r = (random() mod (p - 1)) + 1\n\
    \          num = (val * r * r) mod p\n          if ( lsb(r) == 1 )\n         \
    \    num = (num * qr) mod p\n             if ( lgr(num, p) == 1)\n           \
    \  then\n                return TRUE\n             fi\n          else\n      \
    \       num = (num * qnr) mod p\n             if ( lgr(num, p) == -1)\n      \
    \       then\n                return TRUE\n             fi\n          fi\n   \
    \       return FALSE\n      }\n"
- title: 3.2.2.  Hunting and Pecking with MODP Groups
  contents:
  - "3.2.2.  Hunting and Pecking with MODP Groups\n   The MODP-specific hunting-and-pecking\
    \ technique entails finding a\n   random element which, when used as a generator,\
    \ will create a group\n   with the same order as the group created by the generator\
    \ from the\n   domain parameter set.  The secret generator is found by\n   exponentiating\
    \ the seed to the value ((p-1)/q), where p is the prime\n   and q is the order\
    \ from the domain parameter set.  If that value is\n   greater than one (1), it\
    \ becomes the PE; otherwise, the counter is\n   incremented, a new base and seed\
    \ are generated, and the hunting and\n   pecking continues.\n   Algorithmically,\
    \ the process looks like this:\n      found = 0\n      counter = 1\n      n =\
    \ len(p) + 64\n      do {\n        base = H(max(Alice,Bob) | min(Alice,Bob) |\
    \ password | counter)\n        temp = KDF-n(seed, \"Dragonfly Hunting And Pecking\"\
    )\n        seed = (temp mod (p - 1)) + 1\n        temp = seed ^ ((p-1)/q) mod\
    \ p\n        if (temp > 1)\n        then\n          if (not found)\n         \
    \   PE = temp\n            found = 1\n          fi\n        fi\n        counter\
    \ = counter + 1\n      } while ((found == 0) || (counter <= k))\n            \
    \        Figure 2: Fixing PE for MODP Groups\n"
- title: 3.3.  The Commit Exchange
  contents:
  - "3.3.  The Commit Exchange\n   In the Commit Exchange, both sides commit to a\
    \ single guess of the\n   password.  The peers generate a scalar and an element,\
    \ exchange them\n   with each other, and process the other's scalar and element\
    \ to\n   generate a common and shared secret.\n   First, each peer generates two\
    \ random numbers, private and mask that\n   are each greater than one (1) and\
    \ less than the order from the\n   selected domain parameter set:\n      1 < private\
    \ < q\n      1 < mask < q\n   These two secrets and the Password Element are then\
    \ used to construct\n   the scalar and element:\n         scalar = (private +\
    \ mask) modulo q\n         Element = inverse(scalar-op(mask, PE))\n   If the scalar\
    \ is less than two (2), the private and mask MUST be\n   thrown away and new values\
    \ generated.  Once a valid scalar and\n   Element are generated, the mask is no\
    \ longer needed and MUST be\n   irretrievably destroyed.\n   The peers exchange\
    \ their scalar and Element and check the peer's\n   scalar and Element, deemed\
    \ peer-scalar and Peer-Element.  If the peer\n   has sent an identical scalar\
    \ and Element -- i.e., if scalar equals\n   peer-scalar and Element equals Peer-Element\
    \ -- it is sign of a\n   reflection attack, and the exchange MUST be aborted.\
    \  If the values\n   differ, peer-scalar and Peer-Element must be validated. \
    \ For the\n   peer-scalar to be valid, it MUST be between 1 and q exclusive.\n\
    \   Validation of the Peer-Element depends on the type of cryptosystem --\n  \
    \ validation of an (x,y) pair as an ECC element is specified in\n   Section 2.1,\
    \ and validation of a number as an FFC element is\n   specified in Section 2.2.\
    \  If either the peer-scalar or Peer-Element\n   fail validation, then the exchange\
    \ MUST be terminated and\n   authentication fails.  If both the peer-scalar and\
    \ Peer-Element are\n   valid, they are used with the Password Element to derive\
    \ a shared\n   secret, ss:\n            ss = F(scalar-op(private,\n          \
    \                   element-op(peer-Element,\n                               \
    \         scalar-op(peer-scalar, PE))))\n   To enforce key separation and cryptographic\
    \ hygiene, the shared\n   secret is stretched into two subkeys -- a key confirmation\
    \ key, kck,\n   and a master key, mk.  Each of the subkeys SHOULD be at least\
    \ the\n   length of the prime used in the selected group.\n         kck | mk =\
    \ KDF-n(ss, \"Dragonfly Key Derivation\")\n   where n = len(p)*2.\n"
- title: 3.4.  The Confirm Exchange
  contents:
  - "3.4.  The Confirm Exchange\n   In the Confirm Exchange, both sides confirm that\
    \ they derived the\n   same secret, and therefore, are in possession of the same\
    \ password.\n   The Commit Exchange consists of an exchange of data that is the\n\
    \   output of the random function, H(), the key confirmation key, and the\n  \
    \ two scalars and two elements exchanged in the Commit Exchange.  The\n   order\
    \ of the scalars and elements are: scalars before elements, and\n   sender's value\
    \ before recipient's value.  So from each peer's\n   perspective, it would generate:\n\
    \                confirm = H(kck | scalar | peer-scalar |\n                  \
    \          Element | Peer-Element | <sender-id>)\n   Where <sender-id> is the\
    \ identity of the sender of the confirm\n   message.  This identity SHALL be that\
    \ contributed by the sender of\n   the confirm message in generation of the base\
    \ in Section 3.2.\n   The two peers exchange these confirmations and verify the\
    \ correctness\n   of the other peer's confirmation that they receive.  If the\
    \ other\n   peer's confirmation is valid, authentication succeeds; if the other\n\
    \   peer's confirmation is not valid, authentication fails.\n   If authentication\
    \ fails, all ephemeral state created as part of the\n   particular run of the\
    \ Dragonfly exchange MUST be irretrievably\n   destroyed.  If authentication does\
    \ not fail, mk can be exported as an\n   authenticated and secret key that can\
    \ be used by another protocol,\n   for instance IPsec, to protect other data.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The Dragonfly exchange requires both participants\
    \ to have an\n   identical representation of the password.  Salting of the password\n\
    \   merely generates a new credential -- the salted password -- that must\n  \
    \ be identically represented on both sides.  If an adversary is able to\n   gain\
    \ access to the database of salted passwords, she would be able to\n   impersonate\
    \ one side to the other, even if she was unable to\n   determine the underlying,\
    \ unsalted password.\n   Resistance to dictionary attack means that an adversary\
    \ must launch\n   an active attack to make a single guess at the password.  If\
    \ the size\n   of the dictionary from which the password was extracted was d,\
    \ and\n   each password in the dictionary has an equal probability of being\n\
    \   chosen, then the probability of success after a single guess is 1/d.\n   After\
    \ x guesses, and removal of failed guesses from the pool of\n   possible passwords,\
    \ the probability becomes 1/(d-x).  As x grows, so\n   does the probability of\
    \ success.  Therefore, it is possible for an\n   adversary to determine the password\
    \ through repeated brute-force,\n   active, guessing attacks.  Users of the Dragonfly\
    \ key exchange SHOULD\n   ensure that the size of the pool from which the password\
    \ was drawn,\n   d, is sufficiently large to make this attack preventable.\n \
    \  Implementations of Dragonfly SHOULD support countermeasures to deal\n   with\
    \ this attack -- for instance, by refusing authentication attempts\n   for a certain\
    \ amount of time, after the number of failed\n   authentication attempts reaches\
    \ a certain threshold.  No such\n   threshold or amount of time is recommended\
    \ in this memo.\n   Due to the problems with using groups that contain a small\
    \ subgroup,\n   it is RECOMMENDED that implementations of Dragonfly not allow\
    \ for the\n   specification of a group's complete domain parameter to be sent\n\
    \   in-line, but instead use a common repository and pass an identifier\n   to\
    \ a domain parameter set whose strength has been rigorously proven\n   and that\
    \ does not have small subgroups.  If a group's complete domain\n   parameter set\
    \ is passed in-line, it SHOULD NOT be used with Dragonfly\n   unless it directly\
    \ matches a known good group.\n   It is RECOMMENDED that an implementation set\
    \ the security parameter,\n   k, to a value of at least forty (40) which will\
    \ put the probability\n   that more than forty iterations are needed in the order\
    \ of one in one\n   trillion (1:1,000,000,000,000).\n   The technique used to\
    \ obtain the Password Element in Section 3.2.1\n   addresses side-channel attacks\
    \ in a manner deemed controversial by\n   some reviewers in the CFRG.  An alternate\
    \ method, such as the one\n   defined in [hash2ec], can be used to alleviate concerns.\n\
    \   This key exchange protocol has received cryptanalysis in [clarkehao].\n  \
    \ [lanskro] provides a security proof of Dragonfly in the random oracle\n   model\
    \ when both identities are included in the data sent in the\n   Confirm Exchange\
    \ (see Section 3.4).\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n \
    \              DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [clarkehao] Clarke, D. and F. Hao, \"Cryptanalysis\
    \ of the Dragonfly\n               Key Exchange Protocol\", IET Information Security,\
    \ Volume\n               8, Issue 6, DOI 10.1049/iet-ifs.2013.0081, November 2014.\n\
    \   [FIPS186-4] NIST, \"Digital Signature Standard (DSS)\", Federal\n        \
    \       Information Processing Standard (FIPS) 186-4,\n               DOI 10.6028/NIST.FIPS.186-4,\
    \ July 2013.\n   [hash2ec]   Brier, E., Coron, J-S., Icart, T., Madore, D., Randriam,\n\
    \               H., and M. Tibouchi, \"Efficient Indifferentiable Hashing\n  \
    \             into Ordinary Elliptic Curves\", Cryptology ePrint Archive\n   \
    \            Report 2009/340, 2009.\n   [lanskro]   Lancrenon, J. and M. Skrobot,\
    \ \"On the Provable Security\n               of the Dragonfly Protocol\", Proceedings\
    \ of 18th\n               International Information Security Conference (ISC\n\
    \               2015), pp 244-261, DOI 10.1007/978-3-319-23318-5_14,\n       \
    \        September 2015.\n   [RANDOR]    Bellare, M. and P. Rogaway, \"Random\
    \ Oracles are\n               Practical: A Paradigm for Designing Efficient Protocols\"\
    ,\n               Proceedings of the 1st ACM Conference on Computer and\n    \
    \           Communication Security, ACM Press,\n               DOI 10.1145/168588.168596,\
    \ 1993.\n   [RFC5433]   Clancy, T. and H. Tschofenig, \"Extensible Authentication\n\
    \               Protocol - Generalized Pre-Shared Key (EAP-GPSK) Method\",\n \
    \              RFC 5433, DOI 10.17487/RFC5433, February 2009,\n              \
    \ <http://www.rfc-editor.org/info/rfc5433>.\n   [RFC6090]   McGrew, D., Igoe,\
    \ K., and M. Salter, \"Fundamental\n               Elliptic Curve Cryptography\
    \ Algorithms\", RFC 6090,\n               DOI 10.17487/RFC6090, February 2011,\n\
    \               <http://www.rfc-editor.org/info/rfc6090>.\n   [RFC7296]   Kaufman,\
    \ C., Hoffman, P., Nir, Y., Eronen, P., and T.\n               Kivinen, \"Internet\
    \ Key Exchange Protocol Version 2\n               (IKEv2)\", STD 79, RFC 7296,\
    \ DOI 10.17487/RFC7296, October\n               2014, <http://www.rfc-editor.org/info/rfc7296>.\n\
    \   [SP800-108] Chen, L., \"Recommendation for Key Derivation Using\n        \
    \       Pseudorandom Functions\", NIST Special\n               Publication 800-108,\
    \ October 2009.\n   [SP800-56A] Barker, E., Johnson, D., and M. Smid, \"Recommendation\
    \ for\n               Pair-Wise Key Establishment Schemes Using Discrete\n   \
    \            Logarithm Cryptography (Revised)\", NIST Special\n              \
    \ Publication 800-56A, March 2007.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to thank Kevin Igoe and David McGrew,\
    \ chairmen\n   of the Crypto Forum Research Group (CFRG) for agreeing to accept\
    \ this\n   memo as a CFRG work item.  Additional thanks go to Scott Fluhrer and\n\
    \   Hideyuki Suzuki for discovering attacks against earlier versions of\n   this\
    \ key exchange and suggesting fixes to address them.  Lily Chen\n   provided helpful\
    \ discussions on hashing into an elliptic curve.  Rich\n   Davis suggested the\
    \ validation steps used on received elements to\n   prevent a small subgroup attack.\
    \  Dylan Clarke and Feng Hao\n   discovered a dictionary attack against Dragonfly\
    \ if those checks are\n   not made and a group with a small subgroup is used.\
    \  And finally, a\n   very heartfelt thanks to Jean Lancrenon and Marjan Skrobot\
    \ for\n   developing a proof of the security of Dragonfly.\n   The blinding scheme\
    \ to prevent side-channel attacks when determining\n   whether a value is a quadratic\
    \ residue modulo a prime was suggested\n   by Scott Fluhrer.  Kevin Igoe suggested\
    \ addition of the security\n   parameter k to hide the amount of time taken hunting\
    \ and pecking for\n   the password element.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dan Harkins (editor)\n   Aruba Networks\n   1322 Crossman\
    \ Avenue\n   Sunnyvale, CA  94089-1113\n   United States\n   Email: dharkins@arubanetworks.com\n"
