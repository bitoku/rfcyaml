- title: __initial_text__
  contents:
  - "          Use of Elliptic Curve Cryptography (ECC) Algorithms\n             \
    \    in Cryptographic Message Syntax (CMS)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use Elliptic Curve Cryptography (ECC)\n\
    \   public key algorithms in the Cryptographic Message Syntax (CMS).  The\n  \
    \ ECC algorithms support the creation of digital signatures and the\n   exchange\
    \ of keys to encrypt or authenticate content.  The definition\n   of the algorithm\
    \ processing is based on the NIST FIPS 186-3 for\n   digital signature, NIST SP800-56A\
    \ and SEC1 for key agreement, RFC\n   3370 and RFC 3565 for key wrap and content\
    \ encryption, NIST FIPS\n   180-3 for message digest, SEC1 for key derivation,\
    \ and RFC 2104 and\n   RFC 4231 for message authentication code standards.  This\
    \ document\n   obsoletes RFC 3278.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5753.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Terminology ...................................3\n  \
    \ 2. SignedData Using ECC ............................................3\n    \
    \  2.1. SignedData Using ECDSA .....................................4\n   3. EnvelopedData\
    \ Using ECC Algorithms ..............................5\n      3.1. EnvelopedData\
    \ Using (ephemeral-static) ECDH ................5\n      3.2. EnvelopedData Using\
    \ 1-Pass ECMQV ...........................8\n   4. AuthenticatedData and AuthEnvelopedData\
    \ Using ECC ..............11\n      4.1. AuthenticatedData Using 1-Pass ECMQV\
    \ ......................11\n      4.2. AuthEnvelopedData Using 1-Pass ECMQV ......................12\n\
    \   5. Certificates Using ECC .........................................13\n  \
    \ 6. SMIMECapabilities Attribute and ECC ............................13\n   7.\
    \ ASN.1 Syntax ...................................................21\n      7.1.\
    \ Algorithm Identifiers .....................................21\n      7.2. Other\
    \ Syntax ..............................................24\n   8. Recommended Algorithms\
    \ and Elliptic Curves .....................26\n   9. Security Considerations ........................................28\n\
    \   10. IANA Considerations ...........................................33\n  \
    \ 11. References ....................................................33\n    \
    \  11.1. Normative References .....................................33\n      11.2.\
    \ Informative References ...................................35\n   Appendix A.\
    \  ASN.1 Modules.........................................37\n      A.1.  1988\
    \ ASN.1 Module.........................................37\n      A.2.  2004 ASN.1\
    \ Module.........................................45\n   Appendix B. Changes since\
    \ RFC 3278.................................59\n   Acknowledgements...................................................61\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Cryptographic Message Syntax (CMS) is cryptographic\
    \ algorithm\n   independent.  This specification defines a profile for the use\
    \ of\n   Elliptic Curve Cryptography (ECC) public key algorithms in the CMS.\n\
    \   The ECC algorithms are incorporated into the following CMS content\n   types:\n\
    \   -  'SignedData' to support ECC-based digital signature methods\n      (ECDSA)\
    \ to sign content;\n   -  'EnvelopedData' to support ECC-based public key agreement\
    \ methods\n      (ECDH and ECMQV) to generate pairwise key-encryption keys to\n\
    \      encrypt content-encryption keys used for content encryption;\n   -  'AuthenticatedData'\
    \ to support ECC-based public key agreement\n      methods (ECMQV) to generate\
    \ pairwise key-encryption keys to\n      encrypt message-authentication keys used\
    \ for content\n      authentication and integrity; and\n   -  'AuthEnvelopedData'\
    \ to support ECC-based public key agreement\n      methods (ECMQV) to generate\
    \ pairwise key-encryption keys to\n      encrypt message-authentication and content-encryption\
    \ keys used\n      for content authentication, integrity, and encryption.\n  \
    \ Certification of EC public keys is also described to provide public\n   key\
    \ distribution in support of the specified techniques.\n   The document will obsolete\
    \ [CMS-ECC].  The technical changes\n   performed since RFC 3278 are detailed\
    \ in Appendix B.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [MUST].\n"
- title: 2.  SignedData Using ECC
  contents:
  - "2.  SignedData Using ECC\n   This section describes how to use ECC algorithms\
    \ with the CMS\n   SignedData format to sign data.\n"
- title: 2.1.  SignedData Using ECDSA
  contents:
  - "2.1.  SignedData Using ECDSA\n   This section describes how to use the Elliptic\
    \ Curve Digital\n   Signature Algorithm (ECDSA) with SignedData.  ECDSA is specified\
    \ in\n   [FIPS186-3].  The method is the elliptic curve analog of the Digital\n\
    \   Signature Algorithm (DSA) [FIPS186-3].  ECDSA is used with the Secure\n  \
    \ Hash Algorithm (SHA) [FIPS180-3].\n   In an implementation that uses ECDSA with\
    \ CMS SignedData, the\n   following techniques and formats MUST be used.\n"
- title: 2.1.1.  Fields of the SignedData
  contents:
  - "2.1.1.  Fields of the SignedData\n   When using ECDSA with SignedData, the fields\
    \ of SignerInfo are as in\n   [CMS], but with the following restrictions:\n  \
    \ -  digestAlgorithm MUST contain the algorithm identifier of the hash\n     \
    \ algorithm (see Section 7.1.1), which MUST be one of the following:\n      id-sha1,\
    \ id-sha224, id-sha256, id-sha384, or id-sha512.\n   -  signatureAlgorithm contains\
    \ the signature algorithm identifier\n      (see Section 7.1.3): ecdsa-with-SHA1,\
    \ ecdsa-with-SHA224, ecdsa-\n      with-SHA256, ecdsa-with-SHA384, or ecdsa-with-SHA512.\
    \  The hash\n      algorithm identified in the name of the signature algorithm\
    \ MUST\n      be the same as the digestAlgorithm (e.g., digestAlgorithm is id-\n\
    \      sha256 therefore signatureAlgorithm is ecdsa-with-SHA256).\n   -  signature\
    \ MUST contain the DER encoding (as an octet string) of a\n      value of the\
    \ ASN.1 type ECDSA-Sig-Value (see Section 7.2).\n   When using ECDSA, the SignedData\
    \ certificates field MAY include the\n   certificate(s) for the EC public key(s)\
    \ used in the generation of the\n   ECDSA signatures in SignedData.  ECC certificates\
    \ are discussed in\n   Section 5.\n"
- title: 2.1.2.  Actions of the Sending Agent
  contents:
  - "2.1.2.  Actions of the Sending Agent\n   When using ECDSA with SignedData, the\
    \ sending agent uses the message\n   digest calculation process and signature\
    \ generation process for\n   SignedData that are specified in [CMS].  To sign\
    \ data, the sending\n   agent uses the signature method specified in [FIPS186-3].\n\
    \   The sending agent encodes the resulting signature using the ECDSA-\n   Sig-Value\
    \ syntax (see Section 7.2) and places it in the SignerInfo\n   signature field.\n"
- title: 2.1.3.  Actions of the Receiving Agent
  contents:
  - "2.1.3.  Actions of the Receiving Agent\n   When using ECDSA with SignedData,\
    \ the receiving agent uses the\n   message digest calculation process and signature\
    \ verification process\n   for SignedData that are specified in [CMS].  To verify\
    \ SignedData,\n   the receiving agent uses the signature verification method specified\n\
    \   in [FIPS186-3].\n   In order to verify the signature, the receiving agent\
    \ retrieves the\n   integers r and s from the SignerInfo signature field of the\
    \ received\n   message.\n"
- title: 3.  EnvelopedData Using ECC Algorithms
  contents:
  - "3.  EnvelopedData Using ECC Algorithms\n   This section describes how to use\
    \ ECC algorithms with the CMS\n   EnvelopedData format.\n   This document does\
    \ not specify the static-static ECDH, method C(0,2,\n   ECC CDH) from [SP800-56A].\
    \  Static-static ECDH is analogous to\n   static-static DH, which is specified\
    \ in [CMS-ALG].  Ephemeral-static\n   ECDH and 1-Pass ECMQV were specified because\
    \ they provide better\n   security due to the originator's ephemeral contribution\
    \ to the key\n   agreement scheme.\n"
- title: 3.1.  EnvelopedData Using (ephemeral-static) ECDH
  contents:
  - "3.1.  EnvelopedData Using (ephemeral-static) ECDH\n   This section describes\
    \ how to use the ephemeral-static Elliptic Curve\n   Diffie-Hellman (ECDH) key\
    \ agreement algorithm with EnvelopedData.\n   This algorithm has two variations:\n\
    \   - 'Standard' ECDH, described as the 'Elliptic Curve Diffie-Hellman\n     Scheme'\
    \ with the 'Elliptic Curve Diffie-Hellman Primitive' in\n     [SEC1], and\n  \
    \ - 'Co-factor' ECDH, described as the 'One-Pass Diffie-Hellman scheme'\n    \
    \ (method C(1, 1, ECC CDH)) in [SP800-56A].\n   Both variations of ephemeral-static\
    \ ECDH are elliptic curve analogs\n   of the ephemeral-static Diffie-Hellman key\
    \ agreement algorithm\n   specified jointly in the documents [CMS-ALG] and [CMS-DH].\n\
    \   If an implementation uses ECDH with CMS EnvelopedData, then the\n   following\
    \ techniques and formats MUST be used.\n   The fields of EnvelopedData are as\
    \ in [CMS]; as ECDH is a key\n   agreement algorithm, the RecipientInfo kari choice\
    \ is used.\n"
- title: 3.1.1.  Fields of KeyAgreeRecipientInfo
  contents:
  - "3.1.1.  Fields of KeyAgreeRecipientInfo\n   When using ephemeral-static ECDH\
    \ with EnvelopedData, the fields of\n   KeyAgreeRecipientInfo are as follows:\n\
    \   -  version MUST be 3.\n   -  originator MUST be the alternative originatorKey.\
    \  The\n      originatorKey algorithm field MUST contain the id-ecPublicKey\n\
    \      object identifier (see Section 7.1.2).  The parameters associated\n   \
    \   with id-ecPublicKey MUST be absent, ECParameters, or NULL.  The\n      parameters\
    \ associated with id-ecPublicKey SHOULD be absent or\n      ECParameters, and\
    \ NULL is allowed to support legacy\n      implementations.  The previous version\
    \ of this document required\n      NULL to be present.  If the parameters are\
    \ ECParameters, then they\n      MUST be namedCurve.  The originatorKey publicKey\
    \ field MUST\n      contain the DER encoding of the value of the ASN.1 type ECPoint\n\
    \      (see Section 7.2), which represents the sending agent's ephemeral\n   \
    \   EC public key.  The ECPoint in uncompressed form MUST be\n      supported.\n\
    \   -  ukm MAY be present or absent.  However, message originators SHOULD\n  \
    \    include the ukm.  As specified in RFC 3852 [CMS], implementations\n     \
    \ MUST support ukm message recipient processing, so interoperability\n      is\
    \ not a concern if the ukm is present or absent.  The ukm is\n      placed in\
    \ the entityUInfo field of the ECC-CMS-SharedInfo\n      structure.  When present,\
    \ the ukm is used to ensure that a\n      different key-encryption key is generated,\
    \ even when the ephemeral\n      private key is improperly used more than once,\
    \ by using the ECC-\n      CMS-SharedInfo as an input to the key derivation function\
    \ (see\n      Section 7.2).\n   -  keyEncryptionAlgorithm MUST contain the object\
    \ identifier of the\n      key-encryption algorithm, which in this case is a key\
    \ agreement\n      algorithm (see Section 7.1.4).  The parameters field contains\n\
    \      KeyWrapAlgorithm.  The KeyWrapAlgorithm is the algorithm\n      identifier\
    \ that indicates the symmetric encryption algorithm used\n      to encrypt the\
    \ content-encryption key (CEK) with the key-\n      encryption key (KEK) and any\
    \ associated parameters (see Section\n      7.1.5).  Algorithm requirements are\
    \ found in Section 8.\n   -  recipientEncryptedKeys contains an identifier and\
    \ an encrypted key\n      for each recipient.  The RecipientEncryptedKey\n   \
    \   KeyAgreeRecipientIdentifier MUST contain either the\n      issuerAndSerialNumber\
    \ identifying the recipient's certificate or\n      the RecipientKeyIdentifier\
    \ containing the subject key identifier\n      from the recipient's certificate.\
    \  In both cases, the recipient's\n      certificate contains the recipient's\
    \ static ECDH public key.\n      RecipientEncryptedKey EncryptedKey MUST contain\
    \ the content-\n      encryption key encrypted with the ephemeral-static, ECDH-generated\n\
    \      pairwise key-encryption key using the algorithm specified by the\n    \
    \  KeyWrapAlgorithm.\n"
- title: 3.1.2.  Actions of the Sending Agent
  contents:
  - "3.1.2.  Actions of the Sending Agent\n   When using ephemeral-static ECDH with\
    \ EnvelopedData, the sending\n   agent first obtains the recipient's EC public\
    \ key and domain\n   parameters (e.g., from the recipient's certificate).  The\
    \ sending\n   agent then performs one of the two ECDH variations mentioned above:\n\
    \   - If the value of keyEncryptionAlgorithm indicates the use of\n     'standard'\
    \ Diffie-Hellman, then the sending agent performs the\n     'Elliptic Curve Diffie-Hellman\
    \ Scheme' with the 'Elliptic Curve\n     Diffie-Hellman Primitive' in [SEC1].\n\
    \   - If the value of keyEncryptionAlgorithm indicates the use of 'co-\n     factor'\
    \ Diffie-Hellman, then the sending agent performs the 'One-\n     Pass Diffie-Hellman\
    \ scheme' (method C(1, 1, ECC CDH)) in\n     [SP800-56A].\n   In both of these\
    \ cases, the sending agent uses the KDF defined in\n   Section 3.6.1 of [SEC1]\
    \ with the hash algorithm identified by the\n   value of keyEncryptionAlgorithm.\
    \  As a result, the sending agent\n   obtains:\n   -  an ephemeral public key,\
    \ which is represented as a value of the\n      type ECPoint (see Section 7.2),\
    \ encapsulated in a bit string and\n      placed in the KeyAgreeRecipientInfo\
    \ originator originatorKey\n      publicKey field, and\n   -  a shared secret\
    \ bit string \"K\", which is used as the pairwise key-\n      encryption key for\
    \ that recipient, as specified in [CMS].\n   In a single message, if there are\
    \ multiple layers for a recipient,\n   then the ephemeral public key can be reused\
    \ by the originator for\n   that recipient in each of the different layers.\n"
- title: 3.1.3.  Actions of the Receiving Agent
  contents:
  - "3.1.3.  Actions of the Receiving Agent\n   When using ephemeral-static ECDH with\
    \ EnvelopedData, the receiving\n   agent determines the bit string \"SharedInfo\"\
    , which is the DER\n   encoding of ECC-CMS-SharedInfo (see Section 7.2), and the\
    \ integer\n   \"keydatalen\" from the key size, in bits, of the KeyWrapAlgorithm.\n\
    \   The receiving agent retrieves the ephemeral EC public key from the\n   bit\
    \ string KeyAgreeRecipientInfo originator, with a value of the type\n   ECPoint\
    \ (see Section 7.2) encapsulated as a bit string, and if\n   present, originally\
    \ supplied additional user key material from the\n   ukm field.  The receiving\
    \ agent then performs one of the two ECDH\n   variations mentioned above:\n  \
    \ - If the value of keyEncryptionAlgorithm indicates the use of\n     'standard'\
    \ Diffie-Hellman, then the receiving agent performs the\n     'Elliptic Curve\
    \ Diffie-Hellman Scheme' with the 'Elliptic Curve\n     Diffie-Hellman Primitive'\
    \ in [SEC1].\n   - If the value of keyEncryptionAlgorithm indicates the use of\
    \ 'co-\n     factor' Diffie-Hellman, then the receiving agent performs the 'One-\n\
    \     Pass Diffie-Hellman scheme' (method C(1, 1, ECC CDH)) in\n     [SP800-56A].\n\
    \   In both of these cases, the receiving agent uses the KDF defined in\n   Section\
    \ 3.6.1 of [SEC1] with the hash algorithm identified by the\n   value of keyEncryptionAlgorithm.\
    \  As a result, the receiving agent\n   obtains a shared secret bit string \"\
    K\", which is used as the pairwise\n   key-encryption key to unwrap the CEK.\n"
- title: 3.2.  EnvelopedData Using 1-Pass ECMQV
  contents:
  - "3.2.  EnvelopedData Using 1-Pass ECMQV\n   This section describes how to use\
    \ the 1-Pass Elliptic Curve Menezes-\n   Qu-Vanstone (ECMQV) key agreement algorithm\
    \ with EnvelopedData,\n   method C(1, 2, ECC MQV) from [SP800-56A].  Like the\
    \ KEA algorithm\n   [CMS-KEA], 1-Pass ECMQV uses three key pairs: an ephemeral\
    \ key pair,\n   a static key pair of the sending agent, and a static key pair\
    \ of the\n   receiving agent.  Using an algorithm with the sender static key pair\n\
    \   allows for knowledge of the message creator; this means that\n   authentication\
    \ can, in some circumstances, be obtained for\n   AuthEnvelopedData and AuthenticatedData.\
    \  This means that 1-Pass\n   ECMQV can be a common algorithm for EnvelopedData,\
    \ AuthenticatedData,\n   and AuthEnvelopedData, while ECDH can only be used in\
    \ EnvelopedData.\n   If an implementation uses 1-Pass ECMQV with CMS EnvelopedData,\
    \ then\n   the following techniques and formats MUST be used.\n   The fields of\
    \ EnvelopedData are as in [CMS]; as 1-Pass ECMQV is a key\n   agreement algorithm,\
    \ the RecipientInfo kari choice is used.  When\n   using 1-Pass ECMQV, the EnvelopedData\
    \ originatorInfo field MAY\n   include the certificate(s) for the EC public key(s)\
    \ used in the\n   formation of the pairwise key.  ECC certificates are discussed\
    \ in\n   Section 5.\n"
- title: 3.2.1.  Fields of KeyAgreeRecipientInfo
  contents:
  - "3.2.1.  Fields of KeyAgreeRecipientInfo\n   When using 1-Pass ECMQV with EnvelopedData,\
    \ the fields of\n   KeyAgreeRecipientInfo are as follows:\n   -  version MUST\
    \ be 3.\n   -  originator identifies the static EC public key of the sender. \
    \ It\n      SHOULD be one of the alternatives, issuerAndSerialNumber or\n    \
    \  subjectKeyIdentifier, and point to one of the sending agent's\n      certificates.\n\
    \   -  ukm MUST be present.  The ukm field is an octet string that MUST\n    \
    \  contain the DER encoding of the type MQVuserKeyingMaterial (see\n      Section\
    \ 7.2).  The MQVuserKeyingMaterial ephemeralPublicKey\n      algorithm field MUST\
    \ contain the id-ecPublicKey object identifier\n      (see Section 7.1.2).  The\
    \ parameters associated with id-\n      ecPublicKey MUST be absent, ECParameters,\
    \ or NULL.  The parameters\n      associated with id-ecPublicKey SHOULD be absent\
    \ or ECParameters,\n      as NULL is allowed to support legacy implementations.\
    \  The\n      previous version of this document required NULL to be present. \
    \ If\n      the parameters are ECParameters, then they MUST be namedCurve.\n \
    \     The MQVuserKeyingMaterial ephemeralPublicKey publicKey field MUST\n    \
    \  contain the DER encoding of the ASN.1 type ECPoint (see Section\n      7.2)\
    \ representing the sending agent's ephemeral EC public key.\n      The MQVuserKeyingMaterial\
    \ addedukm field, if present, contains\n      additional user keying material\
    \ from the sending agent.\n   -  keyEncryptionAlgorithm MUST contain the object\
    \ identifier of the\n      key-encryption algorithm, which in this case is a key\
    \ agreement\n      algorithm (see Section 7.1.4).  The parameters field contains\n\
    \      KeyWrapAlgorithm.  The KeyWrapAlgorithm indicates the symmetric\n     \
    \ encryption algorithm used to encrypt the CEK with the KEK\n      generated using\
    \ the 1-Pass ECMQV algorithm and any associated\n      parameters (see Section\
    \ 7.1.5).  Algorithm requirements are found\n      in Section 8.\n   -  recipientEncryptedKeys\
    \ contains an identifier and an encrypted key\n      for each recipient.  The\
    \ RecipientEncryptedKey\n      KeyAgreeRecipientIdentifier MUST contain either\
    \ the\n      issuerAndSerialNumber identifying the recipient's certificate or\n\
    \      the RecipientKeyIdentifier containing the subject key identifier\n    \
    \  from the recipient's certificate.  In both cases, the recipient's\n      certificate\
    \ contains the recipient's static ECMQV public key.\n      RecipientEncryptedKey\
    \ EncryptedKey MUST contain the content-\n      encryption key encrypted with\
    \ the 1-Pass ECMQV-generated pairwise\n      key-encryption key using the algorithm\
    \ specified by the\n      KeyWrapAlgorithm.\n"
- title: 3.2.2.  Actions of the Sending Agent
  contents:
  - "3.2.2.  Actions of the Sending Agent\n   When using 1-Pass ECMQV with EnvelopedData,\
    \ the sending agent first\n   obtains the recipient's EC public key and domain\
    \ parameters (e.g.,\n   from the recipient's certificate), and checks that the\
    \ domain\n   parameters are the same as the sender's domain parameters.  The\n\
    \   sending agent then determines an integer \"keydatalen\", which is the\n  \
    \ KeyWrapAlgorithm symmetric key size in bits, and also a bit string\n   \"SharedInfo\"\
    , which is the DER encoding of ECC-CMS-SharedInfo (see\n   Section 7.2).  The\
    \ sending agent then performs the key deployment and\n   key agreement operations\
    \ of the Elliptic Curve MQV Scheme specified\n   in [SP800-56A], but uses the\
    \ KDF defined in Section 3.6.1 of [SEC1].\n   As a result, the sending agent obtains:\n\
    \   - an ephemeral public key, which is represented as a value of type\n     ECPoint\
    \ (see Section 7.2), encapsulated in a bit string, placed in\n     an MQVuserKeyingMaterial\
    \ ephemeralPublicKey publicKey field (see\n     Section 7.2), and\n   - a shared\
    \ secret bit string \"K\", which is used as the pairwise key-\n     encryption\
    \ key for that recipient, as specified in [CMS].\n   In a single message, if there\
    \ are multiple layers for a recipient,\n   then the ephemeral public key can be\
    \ reused by the originator for\n   that recipient in each of the different layers.\n"
- title: 3.2.3.  Actions of the Receiving Agent
  contents:
  - "3.2.3.  Actions of the Receiving Agent\n   When using 1-Pass ECMQV with EnvelopedData,\
    \ the receiving agent\n   determines the bit string \"SharedInfo\", which is the\
    \ DER encoding of\n   ECC-CMS-SharedInfo (see Section 7.2), and the integer \"\
    keydatalen\"\n   from the key size, in bits, of the KeyWrapAlgorithm.  The receiving\n\
    \   agent then retrieves the static and ephemeral EC public keys of the\n   originator,\
    \ from the originator and ukm fields as described in\n   Section 3.2.1, and its\
    \ static EC public key identified in the rid\n   field and checks that the originator's\
    \ domain parameters are the same\n   as the recipient's domain parameters.  The\
    \ receiving agent then\n   performs the key agreement operation of the Elliptic\
    \ Curve MQV Scheme\n   [SP800-56A], but uses the KDF defined in Section 3.6.1\
    \ of [SEC1].  As\n   a result, the receiving agent obtains a shared secret bit\
    \ string \"K\",\n   which is used as the pairwise key-encryption key to unwrap\
    \ the CEK.\n"
- title: 4.  AuthenticatedData and AuthEnvelopedData Using ECC
  contents:
  - "4.  AuthenticatedData and AuthEnvelopedData Using ECC\n   This section describes\
    \ how to use ECC algorithms with the CMS\n   AuthenticatedData format.  AuthenticatedData\
    \ lacks non-repudiation,\n   and so in some instances is preferable to SignedData.\
    \  (For example,\n   the sending agent might not want the message to be authenticated\
    \ when\n   forwarded.)\n   This section also describes how to use ECC algorithms\
    \ with the CMS\n   AuthEnvelopedData format [CMS-AUTHENV].  AuthEnvelopedData\
    \ supports\n   authentication and encryption, and in some instances is preferable\
    \ to\n   signing and then encrypting data.\n   For both AuthenticatedData and\
    \ AuthEnvelopedData, data origin\n   authentication with 1-Pass ECMQV can only\
    \ be provided when there is\n   one and only one recipient.  When there are multiple\
    \ recipients, an\n   attack is possible where one recipient modifies the content\
    \ without\n   other recipients noticing [BON].  A sending agent who is concerned\n\
    \   with such an attack SHOULD use a separate AuthenticatedData or\n   AuthEnvelopedData\
    \ for each recipient.\n   Using an algorithm with the sender static key pair allows\
    \ for\n   knowledge of the message creator; this means that authentication can,\n\
    \   in some circumstances, be obtained for AuthEnvelopedData and\n   AuthenticatedData.\
    \  This means that 1-Pass ECMQV can be a common\n   algorithm for EnvelopedData,\
    \ AuthenticatedData, and AuthEnvelopedData\n   while ECDH can only be used in\
    \ EnvelopedData.\n"
- title: 4.1.  AuthenticatedData Using 1-Pass ECMQV
  contents:
  - "4.1.  AuthenticatedData Using 1-Pass ECMQV\n   This section describes how to\
    \ use the 1-Pass ECMQV key agreement\n   algorithm with AuthenticatedData.  ECMQV\
    \ is method C(1, 2, ECC MQV)\n   from [SP800-56A].\n   When using ECMQV with AuthenticatedData,\
    \ the fields of\n   AuthenticatedData are as in [CMS], but with the following\n\
    \   restrictions:\n   - macAlgorithm MUST contain the algorithm identifier of\
    \ the message\n     authentication code (MAC) algorithm (see Section 7.1.7), which\
    \ MUST\n     be one of the following: hmac-SHA1, id-hmacWITHSHA224, id-\n    \
    \ hmacWITHSHA256, id-hmacWITHSHA384, or id-hmacWITHSHA512.\n   - digestAlgorithm\
    \ MUST contain the algorithm identifier of the hash\n     algorithm (see Section\
    \ 7.1.1), which MUST be one of the following:\n     id-sha1, id-sha224, id-sha256,\
    \ id-sha384, or id-sha512.\n   As 1-Pass ECMQV is a key agreement algorithm, the\
    \ RecipientInfo kari\n   choice is used in the AuthenticatedData.  When using\
    \ 1-Pass ECMQV,\n   the AuthenticatedData originatorInfo field MAY include the\n\
    \   certificate(s) for the EC public key(s) used in the formation of the\n   pairwise\
    \ key.  ECC certificates are discussed in Section 5.\n"
- title: 4.1.1.  Fields of the KeyAgreeRecipientInfo
  contents:
  - "4.1.1.  Fields of the KeyAgreeRecipientInfo\n   The AuthenticatedData KeyAgreeRecipientInfo\
    \ fields are used in the\n   same manner as the fields for the corresponding EnvelopedData\n\
    \   KeyAgreeRecipientInfo fields of Section 3.2.1 of this document.\n"
- title: 4.1.2.  Actions of the Sending Agent
  contents:
  - "4.1.2.  Actions of the Sending Agent\n   The sending agent uses the same actions\
    \ as for EnvelopedData with\n   1-Pass ECMQV, as specified in Section 3.2.2 of\
    \ this document.\n   In a single message, if there are multiple layers for a recipient,\n\
    \   then the ephemeral public key can be reused by the originator for\n   that\
    \ recipient in each of the different layers.\n"
- title: 4.1.3.  Actions of the Receiving Agent
  contents:
  - "4.1.3.  Actions of the Receiving Agent\n   The receiving agent uses the same\
    \ actions as for EnvelopedData with\n   1-Pass ECMQV, as specified in Section\
    \ 3.2.3 of this document.\n"
- title: 4.2.  AuthEnvelopedData Using 1-Pass ECMQV
  contents:
  - "4.2.  AuthEnvelopedData Using 1-Pass ECMQV\n   This section describes how to\
    \ use the 1-Pass ECMQV key agreement\n   algorithm with AuthEnvelopedData.  ECMQV\
    \ is method C(1, 2, ECC MQV)\n   from [SP800-56A].\n   When using ECMQV with AuthEnvelopedData,\
    \ the fields of\n   AuthEnvelopedData are as in [CMS-AUTHENV].\n   As 1-Pass ECMQV\
    \ is a key agreement algorithm, the RecipientInfo kari\n   choice is used.  When\
    \ using 1-Pass ECMQV, the AuthEnvelopedData\n   originatorInfo field MAY include\
    \ the certificate(s) for the EC public\n   key used in the formation of the pairwise\
    \ key.  ECC certificates are\n   discussed in Section 5.\n"
- title: 4.2.1.  Fields of the KeyAgreeRecipientInfo
  contents:
  - "4.2.1.  Fields of the KeyAgreeRecipientInfo\n   The AuthEnvelopedData KeyAgreeRecipientInfo\
    \ fields are used in the\n   same manner as the fields for the corresponding EnvelopedData\n\
    \   KeyAgreeRecipientInfo fields of Section 3.2.1 of this document.\n"
- title: 4.2.2.  Actions of the Sending Agent
  contents:
  - "4.2.2.  Actions of the Sending Agent\n   The sending agent uses the same actions\
    \ as for EnvelopedData with\n   1-Pass ECMQV, as specified in Section 3.2.2 of\
    \ this document.\n   In a single message, if there are multiple layers for a recipient,\n\
    \   then the ephemeral public key can be reused by the originator for\n   that\
    \ recipient in each of the different layers.\n"
- title: 4.2.3.  Actions of the Receiving Agent
  contents:
  - "4.2.3.  Actions of the Receiving Agent\n   The receiving agent uses the same\
    \ actions as for EnvelopedData with\n   1-Pass ECMQV, as specified in Section\
    \ 3.2.3 of this document.\n"
- title: 5.  Certificates Using ECC
  contents:
  - "5.  Certificates Using ECC\n   Internet X.509 certificates [PKI] can be used\
    \ in conjunction with\n   this specification to distribute agents' public keys.\
    \  The use of ECC\n   algorithms and keys within X.509 certificates is specified\
    \ in\n   [PKI-ALG].\n"
- title: 6.  SMIMECapabilities Attribute and ECC
  contents:
  - "6.  SMIMECapabilities Attribute and ECC\n   A sending agent MAY announce to receiving\
    \ agents that it supports one\n   or more of the ECC algorithms specified in this\
    \ document by using the\n   SMIMECapabilities signed attribute [MSG] in either\
    \ a signed message\n   or a certificate [CERTCAP].\n   The SMIMECapabilities attribute\
    \ value indicates support for one of\n   the ECDSA signature algorithms in a SEQUENCE\
    \ with the capabilityID\n   field containing the object identifier ecdsa-with-SHA1\
    \ with NULL\n   parameters and ecdsa-with-SHA* (where * is 224, 256, 384, or 512)\n\
    \   with absent parameters.  The DER encodings are:\n      ecdsa-with-SHA1:  \
    \ 30 0b 06 07 2a 86 48 ce 3d 04 01 05 00\n      ecdsa-with-SHA224: 30 0a 06 08\
    \ 2a 86 48 ce 3d 04 03 01\n      ecdsa-with-SHA256: 30 0a 06 08 2a 86 48 ce 3d\
    \ 04 03 02\n      ecdsa-with-SHA384: 30 0a 06 08 2a 86 48 ce 3d 04 03 03\n   \
    \   ecdsa-with-SHA512: 30 0a 06 08 2a 86 48 ce 3d 04 03 04\n   NOTE: The SMIMECapabilities\
    \ attribute indicates that parameters for\n   ECDSA with SHA-1 are NULL; however,\
    \ the parameters are absent when\n   used to generate a digital signature.\n \
    \  The SMIMECapabilities attribute value indicates support for\n      a)  the\
    \ standard ECDH key agreement algorithm,\n      b)  the cofactor ECDH key agreement\
    \ algorithm, or\n      c)  the 1-Pass ECMQV key agreement algorithm and\n   is\
    \ a SEQUENCE with the capabilityID field containing the object\n   identifier\n\
    \      a)  dhSinglePass-stdDH-sha*kdf-scheme,\n      b)  dhSinglePass-cofactorDH-sha*kdf-scheme,\
    \ or\n      c)  mqvSinglePass-sha*kdf-scheme\n   respectively (where * is 1, 224,\
    \ 256, 384, or 512) with the\n   parameters present.  The parameters indicate\
    \ the supported key-\n   encryption algorithm with the KeyWrapAlgorithm algorithm\
    \ identifier.\n   The DER encodings that indicate capabilities are as follows\
    \ (KA is\n   key agreement, KDF is key derivation function, and Wrap is key wrap\n\
    \   algorithm):\n      KA=ECDH standard KDF=SHA-1 Wrap=Triple-DES\n        30\
    \ 1c 06 09 2b 81 05 10 86 48 3f 00 02 30 0f 06 0b 2a 86 48 86\n        f7 0d 01\
    \ 09 10 03 06 05 00\n      KA=ECDH standard KDF=SHA-224 Wrap=Triple-DES\n    \
    \    30 17 06 06 2b 81 04 01 0B 00 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09\
    \ 10 03 06\n      KA=ECDH standard KDF=SHA-256 Wrap=Triple-DES\n        30 17\
    \ 06 06 2b 81 04 01 0B 01 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n\
    \      KA=ECDH standard KDF=SHA-384 Wrap=Triple-DES\n        30 17 06 06 2b 81\
    \ 04 01 0B 02 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n      KA=ECDH\
    \ standard KDF=SHA-512 Wrap=Triple-DES\n        30 17 06 06 2b 81 04 01 0B 03\
    \ 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n      KA=ECDH standard\
    \ KDF=SHA-1 Wrap=AES-128\n        30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b\
    \ 06 09 60 86 48 01\n        65 03 04 01 05\n      KA=ECDH standard KDF=SHA-224\
    \ Wrap=AES-128\n        30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01\
    \ 65 03 04\n        01 05\n      KA=ECDH standard KDF=SHA-256 Wrap=AES-128\n \
    \       30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04\n     \
    \   01 05\n      KA=ECDH standard KDF=SHA-384 Wrap=AES-128\n        30 15 06 06\
    \ 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04\n        01 05\n      KA=ECDH\
    \ standard KDF=SHA-512 Wrap=AES-128\n        30 15 06 06 2b 81 04 01 0B 03 30\
    \ 0b 06 09 60 86 48 01 65 03 04\n        01 05\n      KA=ECDH standard KDF=SHA-1\
    \ Wrap=AES-192\n        30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60\
    \ 86 48 01\n        65 03 04 01 19\n      KA=ECDH standard KDF=SHA-224 Wrap=AES-192\n\
    \        30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04\n    \
    \    01 19\n      KA=ECDH standard KDF=SHA-256 Wrap=AES-192\n        30 15 06\
    \ 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04\n        01 19\n     \
    \ KA=ECDH standard KDF=SHA-384 Wrap=AES-192\n        30 15 06 06 2b 81 04 01 0B\
    \ 02 30 0b 06 09 60 86 48 01 65 03 04\n        01 19\n      KA=ECDH standard KDF=SHA-512\
    \ Wrap=AES-192\n        30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01\
    \ 65 03 04\n        01 19\n      KA=ECDH standard KDF=SHA-1 Wrap=AES-256\n   \
    \     30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01\n       \
    \ 65 03 04 01 2D\n      KA=ECDH standard KDF=SHA-224 Wrap=AES-256\n        30\
    \ 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04\n        01 2D\n\
    \      KA=ECDH standard KDF=SHA-256 Wrap=AES-256\n        30 15 06 06 2b 81 04\
    \ 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04\n        01 2D\n      KA=ECDH standard\
    \ KDF=SHA-384 Wrap=AES-256\n        30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09\
    \ 60 86 48 01 65 03 04\n        01 2D 05 00\n      KA=ECDH standard KDF=SHA-512\
    \ Wrap=AES-256\n        30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01\
    \ 65 03 04\n        01 2D\n      KA=ECDH cofactor KDF=SHA-1 Wrap=Triple-DES\n\
    \        30 1c 06 09 2b 81 05 10 86 48 3f 00 03 30 0f 06 0b 2a 86 48 86\n    \
    \    f7 0d 01 09 10 03 06 05 00\n      KA=ECDH cofactor KDF=SHA-224 Wrap=Triple-DES\n\
    \        30 17 06 06 2b 81 04 01 0E 00 30 0d 06 0b 2a 86 48 86 f7 0d 01\n    \
    \    09 10 03 06\n      KA=ECDH cofactor KDF=SHA-256 Wrap=Triple-DES\n       \
    \ 30 17 06 06 2b 81 04 01 0E 01 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10\
    \ 03 06\n      KA=ECDH cofactor KDF=SHA-384 Wrap=Triple-DES\n        30 17 06\
    \ 06 2b 81 04 01 0E 02 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n\
    \      KA=ECDH cofactor KDF=SHA-512 Wrap=Triple-DES\n        30 17 06 06 2b 81\
    \ 04 01 0E 03 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n      KA=ECDH\
    \ cofactor KDF=SHA-1 Wrap=AES-128\n        30 18 06 09 2b 81 05 10 86 48 3f 00\
    \ 03 30 0b 06 09 60 86 48 01\n        65 03 04 01 05\n      KA=ECDH cofactor KDF=SHA-224\
    \ Wrap=AES-128\n        30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01\
    \ 65 03 04\n        01 05\n      KA=ECDH cofactor KDF=SHA-256 Wrap=AES-128\n \
    \       30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04\n     \
    \   01 05\n      KA=ECDH cofactor KDF=SHA-384 Wrap=AES-128\n        30 15 06 06\
    \ 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04\n        01 05\n      KA=ECDH\
    \ cofactor KDF=SHA-512 Wrap=AES-128\n        30 17 06 06 2b 81 04 01 0E 03 30\
    \ 0b 06 09 60 86 48 01 65 03 04\n        01 05\n      KA=ECDH cofactor KDF=SHA-1\
    \ Wrap=AES-192\n        30 18 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60\
    \ 86 48 01\n        65 03 04 01 19\n      KA=ECDH cofactor KDF=SHA-224 Wrap=AES-192\n\
    \        30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04\n    \
    \    01 19\n      KA=ECDH cofactor KDF=SHA-256 Wrap=AES-192\n        30 15 06\
    \ 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04\n        01 19\n     \
    \ KA=ECDH cofactor KDF=SHA-384 Wrap=AES-192\n        30 15 06 06 2b 81 04 01 0E\
    \ 02 30 0b 06 09 60 86 48 01 65 03 04\n        01 19\n      KA=ECDH cofactor KDF=SHA-512\
    \ Wrap=AES-192\n        30 15 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01\
    \ 65 03 04\n        01 19\n      KA=ECDH cofactor KDF=SHA-1 Wrap=AES-256\n   \
    \     30 15 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01\n       \
    \ 65 03 04 01 2D\n      KA=ECDH cofactor KDF=SHA-224 Wrap=AES-256\n        30\
    \ 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04\n        01 2D\n\
    \      KA=ECDH cofactor KDF=SHA-256 Wrap=AES-256\n        30 15 06 06 2b 81 04\
    \ 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04\n        01 2D\n      KA=ECDH cofactor\
    \ KDF=SHA-384 Wrap=AES-256\n        30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09\
    \ 60 86 48 01 65 03 04\n        01 2D\n      KA=ECDH cofactor KDF=SHA-512 Wrap=AES-256\n\
    \        30 15 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04\n    \
    \    01 2D\n      KA=ECMQV 1-Pass KDF=SHA-1 Wrap=Triple-DES\n        30 1c 06\
    \ 09 2b 81 05 10 86 48 3f 00 10 30 0f 06 0b 2a 86 48 86\n        f7 0d 01 09 10\
    \ 03 06 05 00\n      KA=ECMQV 1-Pass KDF=SHA-224 Wrap=Triple-DES\n        30 17\
    \ 06 06 2b 81 04 01 0F 00 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n\
    \      KA=ECMQV 1-Pass KDF=SHA-256 Wrap=Triple-DES\n        30 17 06 06 2b 81\
    \ 04 01 0F 01 30 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n      KA=ECMQV\
    \ 1-Pass KDF=SHA-384 Wrap=Triple-DES\n        30 17 06 06 2b 81 04 01 0F 02 30\
    \ 0d 06 0b 2a 86 48 86 f7 0d 01\n        09 10 03 06\n      KA=ECMQV 1-Pass KDF=SHA-512\
    \ Wrap=Triple-DES\n        30 17 06 06 2b 81 04 01 0F 03 30 0d 06 0b 2a 86 48\
    \ 86 f7 0d 01\n        09 10 03 06\n      KA=ECMQV 1-Pass KDF=SHA-1 Wrap=AES-128\n\
    \        30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01\n    \
    \    65 03 04 01 05\n      KA=ECMQV 1-Pass KDF=SHA-224 Wrap=AES-128\n        30\
    \ 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04\n        01 05\n\
    \      KA=ECMQV 1-Pass KDF=SHA-256 Wrap=AES-128\n        30 15 06 06 2b 81 04\
    \ 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04\n        01 05\n      KA=ECMQV 1-Pass\
    \ KDF=SHA-384 Wrap=AES-128\n        30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09\
    \ 60 86 48 01 65 03 04\n        01 05\n      KA=ECMQV 1-Pass KDF=SHA-512 Wrap=AES-128\n\
    \        30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04\n    \
    \    01 05\n      KA=ECMQV 1-Pass KDF=SHA-1 Wrap=AES-192\n        30 18 06 09\
    \ 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01\n        65 03 04 01 19\n\
    \      KA=ECMQV 1-Pass KDF=SHA-224 Wrap=AES-192\n        30 15 06 06 2b 81 04\
    \ 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04\n        01 19\n      KA=ECMQV 1-Pass\
    \ KDF=SHA-256 Wrap=AES-192\n        30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09\
    \ 60 86 48 01 65 03 04\n        01 19\n      KA=ECMQV 1-Pass KDF=SHA-384 Wrap=AES-192\n\
    \        30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04\n    \
    \    01 19\n      KA=ECMQV 1-Pass KDF=SHA-512 Wrap=AES-192\n        30 15 06 06\
    \ 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04\n        01 19\n      KA=ECMQV\
    \ 1-Pass KDF=SHA-1 Wrap=AES-256\n        30 18 06 09 2b 81 05 10 86 48 3f 00 10\
    \ 30 0b 06 09 60 86 48 01\n        65 03 04 01 2D\n      KA=ECMQV 1-Pass KDF=SHA-224\
    \ Wrap=AES-256\n        30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01\
    \ 65 03 04\n        01 2D\n      KA=ECMQV 1-Pass KDF=SHA-256 Wrap=AES-256\n  \
    \      30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04\n      \
    \  01 2D\n      KA=ECMQV 1-Pass KDF=SHA-384 Wrap=AES-256\n        30 15 06 06\
    \ 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04\n        01 2D\n      KA=ECMQV\
    \ 1-Pass KDF=SHA-512 Wrap=AES-256\n        30 15 06 06 2b 81 04 01 0F 03 30 0b\
    \ 06 09 60 86 48 01 65 03 04\n        01 2D\n   NOTE: The S/MIME Capabilities\
    \ for the supported AES content-\n   encryption key sizes are defined in [CMS-AES].\n\
    \   NOTE: The S/MIME Capabilities for the supported MAC algorithms are\n   defined\
    \ in [CMS-ASN].\n"
- title: 7.  ASN.1 Syntax
  contents:
  - "7.  ASN.1 Syntax\n   The ASN.1 syntax [X.680], [X.681], [X.682], [X.683] used\
    \ in this\n   document is gathered in this section for reference purposes.\n"
- title: 7.1.  Algorithm Identifiers
  contents:
  - "7.1.  Algorithm Identifiers\n   This section provides the object identifiers\
    \ for the algorithms used\n   in this document along with any associated parameters.\n"
- title: 7.1.1.  Digest Algorithms
  contents:
  - "7.1.1.  Digest Algorithms\n   Digest algorithm object identifiers are used in\
    \ the SignedData\n   digestAlgorithms and digestAlgorithm fields and the AuthenticatedData\n\
    \   digestAlgorithm field.  The digest algorithms used in this document\n   are\
    \ SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512.  The object\n   identifiers and\
    \ parameters associated with these algorithms are found\n   in [CMS-ALG] and [CMS-SHA2].\n"
- title: 7.1.2.  Originator Public Key
  contents:
  - "7.1.2.  Originator Public Key\n   The KeyAgreeRecipientInfo originator field\
    \ uses the following object\n   identifier to indicate an elliptic curve public\
    \ key:\n      id-ecPublicKey OBJECT IDENTIFIER ::= {\n        ansi-x9-62 keyType(2)\
    \ 1 }\n   where\n      ansi-x9-62 OBJECT IDENTIFIER ::= {\n        iso(1) member-body(2)\
    \ us(840) 10045 }\n   When the object identifier id-ecPublicKey is used here with\
    \ an\n   algorithm identifier, the associated parameters MUST be either absent\n\
    \   or ECParameters.  Implementations MUST accept id-ecPublicKey with\n   absent\
    \ and ECParameters parameters.  If ECParameters is present, its\n   value MUST\
    \ match the recipient's ECParameters.  Implementations\n   SHOULD generate absent\
    \ parameters for the id-ecPublicKey object\n   identifier in the KeyAgreeRecipientInfo\
    \ originator field.\n   [CMS-ECC] indicated the parameters were NULL.  Support\
    \ for this\n   legacy form is OPTIONAL.\n"
- title: 7.1.3.  Signature Algorithms
  contents:
  - "7.1.3.  Signature Algorithms\n   Signature algorithm identifiers are used in\
    \ the SignedData\n   signatureAlgorithm and signature fields.  The signature algorithms\n\
    \   used in this document are ECDSA with SHA-1, ECDSA with SHA-224, ECDSA\n  \
    \ with SHA-256, ECDSA with SHA-384, and ECDSA with SHA-512.  The object\n   identifiers\
    \ and parameters associated with these algorithms are found\n   in [PKI-ALG].\n\
    \   [CMS-ECC] indicated the parameters were NULL.  Support for this\n   legacy\
    \ form is OPTIONAL.\n"
- title: 7.1.4.  Key Agreement Algorithms
  contents:
  - "7.1.4.  Key Agreement Algorithms\n   Key agreement algorithms are used in EnvelopedData,\n\
    \   AuthenticatedData, and AuthEnvelopedData in the KeyAgreeRecipientInfo\n  \
    \ keyEncryptionAlgorithm field.  The following object identifiers\n   indicate\
    \ the key agreement algorithms used in this document\n   [SP800-56A], [SEC1]:\n\
    \      dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n        x9-63-scheme\
    \ 2 }\n      dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n   \
    \     secg-scheme 11 0 }\n      dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n        secg-scheme 11 1 }\n      dhSinglePass-stdDH-sha384kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 11 2 }\n      dhSinglePass-stdDH-sha512kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 11 3 }\n      dhSinglePass-cofactorDH-sha1kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        x9-63-scheme 3 }\n      dhSinglePass-cofactorDH-sha224kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 14 0 }\n      dhSinglePass-cofactorDH-sha256kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 14 1 }\n      dhSinglePass-cofactorDH-sha384kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 14 2 }\n      dhSinglePass-cofactorDH-sha512kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 14 3 }\n      mqvSinglePass-sha1kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        x9-63-scheme 16 }\n      mqvSinglePass-sha224kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 15 0 }\n      mqvSinglePass-sha256kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 15 1 }\n      mqvSinglePass-sha384kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 15 2 }\n      mqvSinglePass-sha512kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n        secg-scheme 15 3 }\n   where\n      x9-63-scheme\
    \ OBJECT IDENTIFIER ::= {\n        iso(1) identified-organization(3) tc68(133)\
    \ country(16)\n        x9(840) x9-63(63) schemes(0) }\n   and\n      secg-scheme\
    \ OBJECT IDENTIFIER ::= {\n        iso(1) identified-organization(3) certicom(132)\
    \ schemes(1) }\n   When the object identifiers are used here within an algorithm\n\
    \   identifier, the associated parameters field contains KeyWrapAlgorithm\n  \
    \ to indicate the key wrap algorithm and any associated parameters.\n"
- title: 7.1.5.  Key Wrap Algorithms
  contents:
  - "7.1.5.  Key Wrap Algorithms\n   Key wrap algorithms are used as part of the parameters\
    \ in the key\n   agreement algorithm.  The key wrap algorithms used in this document\n\
    \   are Triple-DES, AES-128, AES-192, and AES-256.  The object\n   identifiers\
    \ and parameters for these algorithms are found in\n   [CMS-ALG] and [CMS-AES].\n"
- title: 7.1.6.  Content Encryption Algorithms
  contents:
  - "7.1.6.  Content Encryption Algorithms\n   Content encryption algorithms are used\
    \ in EnvelopedData and\n   AuthEnvelopedData in the EncryptedContentInfo\n   contentEncryptionAlgorithm\
    \ field.  The content encryption algorithms\n   used with EnvelopedData in this\
    \ document are 3-Key Triple DES in CBC\n   mode, AES-128 in CBC mode, AES-192\
    \ in CBC mode, and AES-256 in CBC\n   mode.  The object identifiers and parameters\
    \ associated with these\n   algorithms are found in [CMS-ALG] and [CMS-AES]. \
    \ The content\n   encryption algorithms used with AuthEnvelopedData in this document\n\
    \   are AES-128 in CCM mode, AES-192 in CCM mode, AES-256 in CCM mode,\n   AES-128\
    \ in GCM mode, AES-192 in GCM mode, and AES-256 in GCM mode.\n   The object identifiers\
    \ and parameters associated with these\n   algorithms are found in [CMS-AESCG].\n"
- title: 7.1.7.  Message Authentication Code Algorithms
  contents:
  - "7.1.7.  Message Authentication Code Algorithms\n   Message authentication code\
    \ algorithms are used in AuthenticatedData\n   in the macAlgorithm field.  The\
    \ message authentication code\n   algorithms used in this document are HMAC with\
    \ SHA-1, HMAC with\n   SHA-224, HMAC with SHA-256, HMAC with SHA-384, and HMAC\
    \ with SHA-512.\n   The object identifiers and parameters associated with these\n\
    \   algorithms are found in [CMS-ALG] and [HMAC-SHA2].\n   NOTE: [HMAC-SHA2] defines\
    \ the object identifiers for HMAC with\n   SHA-224, HMAC with SHA-256, HMAC with\
    \ SHA-384, and HMAC with SHA-512,\n   but there is no ASN.1 module from which\
    \ to import these object\n   identifiers.  Therefore, the object identifiers for\
    \ these algorithms\n   are included in the ASN.1 modules defined in Appendix A.\n"
- title: 7.1.8.  Key Derivation Algorithm
  contents:
  - "7.1.8.  Key Derivation Algorithm\n   The KDF used in this document is as specified\
    \ in Section 3.6.1 of\n   [SEC1].  The hash algorithm is identified in the key\
    \ agreement\n   algorithm.  For example, dhSinglePass-stdDH-sha256kdf-scheme uses\
    \ the\n   KDF from [SEC1] but uses SHA-256 instead of SHA-1.\n"
- title: 7.2.  Other Syntax
  contents:
  - "7.2.  Other Syntax\n   The following additional syntax is used here.\n   When\
    \ using ECDSA with SignedData, ECDSA signatures are encoded using\n   the type:\n\
    \      ECDSA-Sig-Value ::= SEQUENCE {\n        r INTEGER,\n        s INTEGER }\n\
    \   ECDSA-Sig-Value is specified in [PKI-ALG].  Within CMS, ECDSA-Sig-\n   Value\
    \ is DER-encoded and placed within a signature field of\n   SignedData.\n   When\
    \ using ECDH and ECMQV with EnvelopedData, AuthenticatedData, and\n   AuthEnvelopedData,\
    \ ephemeral and static public keys are encoded using\n   the type ECPoint.  Implementations\
    \ MUST support uncompressed keys,\n   MAY support compressed keys, and MUST NOT\
    \ support hybrid keys.\n      ECPoint ::= OCTET STRING\n   When using ECMQV with\
    \ EnvelopedData, AuthenticatedData, and\n   AuthEnvelopedData, the sending agent's\
    \ ephemeral public key and\n   additional keying material are encoded using the\
    \ type:\n      MQVuserKeyingMaterial ::= SEQUENCE {\n        ephemeralPublicKey\
    \      OriginatorPublicKey,\n        addedukm            [0] EXPLICIT UserKeyingMaterial\
    \ OPTIONAL  }\n   The ECPoint syntax is used to represent the ephemeral public\
    \ key and\n   is placed in the ephemeralPublicKey publicKey field.  The additional\n\
    \   user keying material is placed in the addedukm field.  Then the\n   MQVuserKeyingMaterial\
    \ value is DER-encoded and placed within the ukm\n   field of EnvelopedData, AuthenticatedData,\
    \ or AuthEnvelopedData.\n   When using ECDH or ECMQV with EnvelopedData, AuthenticatedData,\
    \ or\n   AuthEnvelopedData, the key-encryption keys are derived by using the\n\
    \   type:\n      ECC-CMS-SharedInfo ::= SEQUENCE {\n        keyInfo         AlgorithmIdentifier,\n\
    \        entityUInfo [0] EXPLICIT OCTET STRING OPTIONAL,\n        suppPubInfo\
    \ [2] EXPLICIT OCTET STRING  }\n   The fields of ECC-CMS-SharedInfo are as follows:\n\
    \      keyInfo contains the object identifier of the key-encryption\n      algorithm\
    \ (used to wrap the CEK) and associated parameters.  In\n      this specification,\
    \ 3DES wrap has NULL parameters while the AES\n      wraps have absent parameters.\n\
    \      entityUInfo optionally contains additional keying material\n      supplied\
    \ by the sending agent.  When used with ECDH and CMS, the\n      entityUInfo field\
    \ contains the octet string ukm.  When used with\n      ECMQV and CMS, the entityUInfo\
    \ contains the octet string addedukm\n      (encoded in MQVuserKeyingMaterial).\n\
    \      suppPubInfo contains the length of the generated KEK, in bits,\n      represented\
    \ as a 32-bit number, as in [CMS-DH] and [CMS-AES].\n      (For example, for AES-256\
    \ it would be 00 00 01 00.)\n   Within CMS, ECC-CMS-SharedInfo is DER-encoded\
    \ and used as input to\n   the key derivation function, as specified in Section\
    \ 3.6.1 of [SEC1].\n   NOTE: ECC-CMS-SharedInfo differs from the OtherInfo specified\
    \ in\n   [CMS-DH].  Here, a counter value is not included in the keyInfo field\n\
    \   because the key derivation function specified in Section 3.6.1 of\n   [SEC1]\
    \ ensures that sufficient keying data is provided.\n"
- title: 8.  Recommended Algorithms and Elliptic Curves
  contents:
  - "8.  Recommended Algorithms and Elliptic Curves\n   It is RECOMMENDED that implementations\
    \ of this specification support\n   SignedData and EnvelopedData.  Support for\
    \ AuthenticatedData and\n   AuthEnvelopedData is OPTIONAL.\n   In order to encourage\
    \ interoperability, implementations SHOULD use\n   the elliptic curve domain parameters\
    \ specified by [PKI-ALG].\n   Implementations that support SignedData with ECDSA:\n\
    \      - MUST support ECDSA with SHA-256; and\n      - MAY support ECDSA with\
    \ SHA-1, ECDSA with SHA-224, ECDSA with\n        SHA-384, and ECDSA with SHA-512;\
    \ other digital signature\n        algorithms MAY also be supported.\n   When\
    \ using ECDSA, to promote interoperability it is RECOMMENDED that\n   the P-192,\
    \ P-224, and P-256 curves be used with SHA-256; the P-384\n   curve be used with\
    \ SHA-384; and the P-521 curve be used with SHA-512.\n   If EnvelopedData is supported,\
    \ then ephemeral-static ECDH standard\n   primitive MUST be supported.  Support\
    \ for ephemeral-static ECDH co-\n   factor is OPTIONAL, and support for 1-Pass\
    \ ECMQV is also OPTIONAL.\n   Implementations that support EnvelopedData with\
    \ the ephemeral-static\n   ECDH standard primitive:\n      - MUST support the\
    \ dhSinglePass-stdDH-sha256kdf-scheme key\n        agreement algorithm, the id-aes128-wrap\
    \ key wrap algorithm, and\n        the id-aes128-cbc content encryption algorithm;\
    \ and\n      - MAY support the dhSinglePass-stdDH-sha1kdf-scheme, dhSinglePass-\n\
    \        stdDH-sha224kdf-scheme, dhSinglePass-stdDH-sha384kdf-scheme, and\n  \
    \      dhSinglePass-stdDH-sha512kdf-scheme key agreement algorithms;\n       \
    \ the id-alg-CMS3DESwrap, id-aes192-wrap, and id-aes256-wrap key\n        wrap\
    \ algorithms; and the des-ede3-cbc, id-aes192-cbc, and id-\n        aes256-cbc\
    \ content encryption algorithms; other algorithms MAY\n        also be supported.\n\
    \   Implementations that support EnvelopedData with the ephemeral-static\n   ECDH\
    \ cofactor primitive:\n      - MUST support the dhSinglePass-cofactorDH-sha256kdf-scheme\
    \ key\n        agreement algorithm, the id-aes128-wrap key wrap algorithm, and\n\
    \        the id-aes128-cbc content encryption algorithm; and\n      - MAY support\
    \ the dhSinglePass-cofactorDH-sha1kdf-scheme,\n        dhSinglePass-cofactorDH-sha224kdf-scheme,\
    \ dhSinglePass-\n        cofactorDH-sha384kdf-scheme, and dhSinglePass-cofactorDH-\n\
    \        sha512kdf-scheme key agreement; the id-alg-CMS3DESwrap, id-\n       \
    \ aes192-wrap, and id-aes256-wrap key wrap algorithms; and the\n        des-ede3-cbc,\
    \ id-aes192-cbc, and id-aes256-cbc content\n        encryption algorithms; other\
    \ algorithms MAY also be supported.\n   Implementations that support EnvelopedData\
    \ with 1-Pass ECMQV:\n      - MUST support the mqvSinglePass-sha256kdf-scheme\
    \ key agreement\n        algorithm, the id-aes128-wrap key wrap algorithm, and\
    \ the id-\n        aes128-cbc content encryption algorithm; and\n      - MAY support\
    \ the mqvSinglePass-sha1kdf-scheme, mqvSinglePass-\n        sha224kdf-scheme,\
    \ mqvSinglePass-sha384kdf-scheme, and\n        mqvSinglePass-sha512kdf-scheme\
    \ key agreement algorithms; the id-\n        alg-CMS3DESwrap, id-aes192-wrap,\
    \ and id-aes256-wrap key wrap\n        algorithms; and the des-ede3-cbc, id-aes192-cbc,\
    \ and id-\n        aes256-cbc content encryption algorithms; other algorithms\
    \ MAY\n        also be supported.\n   Implementations that support AuthenticatedData\
    \ with 1-Pass ECMQV:\n      - MUST support the mqvSinglePass-sha256kdf-scheme\
    \ key agreement,\n        the id-aes128-wrap key wrap, the id-sha256 message digest,\
    \ and\n        id-hmacWithSHA256 message authentication code algorithms; and\n\
    \      - MAY support the mqvSinglePass-sha1kdf-scheme, mqvSinglePass-\n      \
    \  sha224kdf-scheme, mqvSinglePass-sha384kdf-scheme, mqvSinglePass-\n        sha512kdf-scheme\
    \ key agreement algorithms; the id-alg-\n        CMS3DESwrap, id-aes192-wrap,\
    \ and id-aes256-wrap key wrap\n        algorithms; the id-sha1, id-sha224, id-sha384,\
    \ and id-sha512,\n        message digest algorithms; and the hmac-SHA1, id-hmacWithSHA224,\n\
    \        id-hmacWithSHA384, and id-hmacWithSHA512 message authentication\n   \
    \     code algorithms; other algorithms MAY also be supported.\n   Implementations\
    \ that support AuthEnvelopedData with 1-Pass ECMQV:\n      - MUST support the\
    \ mqvSinglePass-sha256kdf-scheme key agreement,\n        the id-aes128-wrap key\
    \ wrap, and the id-aes128-ccm\n        authenticated-content encryption; and\n\
    \      - MAY support the mqvSinglePass-sha1kdf-scheme, mqvSinglePass-\n      \
    \  sha224kdf-scheme, mqvSinglePass-sha384kdf-scheme, and\n        mqvSinglePass-sha512kdf-scheme\
    \ key agreement algorithms; the id-\n        alg-CMS3DESwrap, id-aes192-wrap,\
    \ and id-aes256-wrap key wrap\n        algorithms; and the id-aes192-ccm, id-aes256-ccm,\
    \ id-aes128-gcm,\n        id-aes192-gcm, and id-aes256-ccm authenticated-content\n\
    \        encryption algorithms; other algorithms MAY also be supported.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Cryptographic algorithms will be broken or weakened\
    \ over time.\n   Implementers and users need to check that the cryptographic\n\
    \   algorithms listed in this document continue to provide the expected\n   level\
    \ of security.  The IETF from time to time may issue documents\n   dealing with\
    \ the current state of the art.\n   Cryptographic algorithms rely on random numbers.\
    \  See [RANDOM] for\n   guidance on generation of random numbers.\n   Receiving\
    \ agents that validate signatures and sending agents that\n   encrypt messages\
    \ need to be cautious of cryptographic processing\n   usage when validating signatures\
    \ and encrypting messages using keys\n   larger than those mandated in this specification.\
    \  An attacker could\n   send keys and/or certificates with keys that would result\
    \ in\n   excessive cryptographic processing, for example, keys larger than\n \
    \  those mandated in this specification, which could swamp the\n   processing\
    \ element.  Agents that use such keys without first\n   validating the certificate\
    \ to a trust anchor are advised to have some\n   sort of cryptographic resource\
    \ management system to prevent such\n   attacks.\n   Using secret keys of an appropriate\
    \ size is crucial to the security\n   of a Diffie-Hellman exchange.  For elliptic\
    \ curve groups, the size of\n   the secret key must be equal to the size of n\
    \ (the order of the group\n   generated by the point g).  Using larger secret\
    \ keys provides\n   absolutely no additional security, and using smaller secret\
    \ keys is\n   likely to result in dramatically less security.  (See [SP800-56A]\
    \ for\n   more information on selecting secret keys.)\n   This specification is\
    \ based on [CMS], [CMS-AES], [CMS-AESCG],\n   [CMS-ALG], [CMS-AUTHENV], [CMS-DH],\
    \ [CMS-SHA2], [FIPS180-3],\n   [FIPS186-3], and [HMAC-SHA2], and the appropriate\
    \ security\n   considerations of those documents apply.\n   In addition, implementers\
    \ of AuthenticatedData and AuthEnvelopedData\n   should be aware of the concerns\
    \ expressed in [BON] when using\n   AuthenticatedData and AuthEnvelopedData to\
    \ send messages to more than\n   one recipient.  Also, users of MQV should be\
    \ aware of the\n   vulnerability described in [K].\n   When implementing EnvelopedData,\
    \ AuthenticatedData, and\n   AuthEnvelopedData, there are five algorithm-related\
    \ choices that need\n   to be made:\n      1) What is the public key size?\n \
    \     2) What is the KDF?\n      3) What is the key wrap algorithm?\n      4)\
    \ What is the content encryption algorithm?\n      5) What is the curve?\n   Consideration\
    \ must be given to the strength of the security provided\n   by each of these\
    \ choices.  Security algorithm strength is measured in\n   bits, where bits is\
    \ measured in equivalence to a symmetric cipher\n   algorithm.  Thus, a strong\
    \ symmetric cipher algorithm with a key of X\n   bits is said to provide X bits\
    \ of security.  For other algorithms,\n   the key size is mapped to an equivalent\
    \ symmetric cipher strength.\n   It is recommended that the bits of security provided\
    \ by each are\n   roughly equivalent.  The following table provides comparable\
    \ minimum\n   bits of security [SP800-57] for the ECDH/ECMQV key sizes, KDFs,\
    \ key\n   wrapping algorithms, and content encryption algorithms.  It also\n \
    \  lists curves [PKI-ALG] for the key sizes.\n   Minimum  | ECDH or  | Key   \
    \     | Key      | Content     | Curves\n   Bits of  | ECMQV    | Derivation |\
    \ Wrap     | Encryption  |\n   Security | Key Size | Function   | Alg.     | Alg.\
    \        |\n   ---------+----------+------------+----------+-------------+----------\n\
    \   80       | 160-223  | SHA-1      | 3DES     | 3DES CBC    | sect163k1\n  \
    \          |          | SHA-224    | AES-128  | AES-128 CBC | secp163r2\n    \
    \        |          | SHA-256    | AES-192  | AES-192 CBC | secp192r1\n      \
    \      |          | SHA-384    | AES-256  | AES-256 CBC |\n            |     \
    \     | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n\
    \   112      | 224-255  | SHA-1      | 3DES     | 3DES CBC    | secp224r1\n  \
    \          |          | SHA-224    | AES-128  | AES-128 CBC | sect233k1\n    \
    \        |          | SHA-256    | AES-192  | AES-192 CBC | sect233r1\n      \
    \      |          | SHA-384    | AES-256  | AES-256 CBC |\n            |     \
    \     | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n\
    \   128      | 256-383  | SHA-1      | AES-128  | AES-128 CBC | secp256r1\n  \
    \          |          | SHA-224    | AES-192  | AES-192 CBC | sect283k1\n    \
    \        |          | SHA-256    | AES-256  | AES-256 CBC | sect283r1\n      \
    \      |          | SHA-384    |          |             |\n            |     \
    \     | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n\
    \   192      | 384-511  | SHA-224    | AES-192  | AES-192 CBC | secp384r1\n  \
    \          |          | SHA-256    | AES-256  | AES-256 CBC | sect409k1\n    \
    \        |          | SHA-384    |          |             | sect409r1\n      \
    \      |          | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n\
    \   256      | 512+     | SHA-256    | AES-256  | AES-256 CBC | secp521r1\n  \
    \          |          | SHA-384    |          |             | sect571k1\n    \
    \        |          | SHA-512    |          |             | sect571r1\n   ---------+----------+------------+----------+-------------+---------\n\
    \   To promote interoperability, the following choices are RECOMMENDED:\n   Minimum\
    \  | ECDH or  | Key        | Key      | Content     | Curve\n   Bits of  | ECMQV\
    \    | Derivation | Wrap     | Encryption  |\n   Security | Key Size | Function\
    \   | Alg.     | Alg.        |\n   ---------+----------+------------+----------+-------------+----------\n\
    \   80       | 192      | SHA-256    | 3DES     | 3DES CBC    | secp192r1\n  \
    \ ---------+----------+------------+----------+-------------+----------\n   112\
    \      | 224      | SHA-256    | 3DES     | 3DES CBC    | secp224r1\n   ---------+----------+------------+----------+-------------+----------\n\
    \   128      | 256      | SHA-256    | AES-128  | AES-128 CBC | secp256r1\n  \
    \ ---------+----------+------------+----------+-------------+----------\n   192\
    \      | 384      | SHA-384    | AES-256  | AES-256 CBC | secp384r1\n   ---------+----------+------------+----------+-------------+----------\n\
    \   256      | 512+     | SHA-512    | AES-256  | AES-256 CBC | secp521r1\n  \
    \ ---------+----------+------------+----------+-------------+----------\n   When\
    \ implementing SignedData, there are three algorithm-related\n   choices that\
    \ need to be made:\n      1) What is the public key size?\n      2) What is the\
    \ hash algorithm?\n      3) What is the curve?\n   Consideration must be given\
    \ to the bits of security provided by each\n   of these choices.  Security is\
    \ measured in bits, where a strong\n   symmetric cipher with a key of X bits is\
    \ said to provide X bits of\n   security.  It is recommended that the bits of\
    \ security provided by\n   each choice are roughly equivalent.  The following\
    \ table provides\n   comparable minimum bits of security [SP800-57] for the ECDSA\
    \ key\n   sizes and message digest algorithms.  It also lists curves [PKI-ALG]\n\
    \   for the key sizes.\n   Minimum  | ECDSA    | Message   | Curve\n   Bits of\
    \  | Key Size | Digest    |\n   Security |          | Algorithm |\n   ---------+----------+-----------+-----------\n\
    \   80       | 160-223  | SHA-1     | sect163k1\n            |          | SHA-224\
    \   | secp163r2\n            |          | SHA-256   | secp192r1\n            |\
    \          | SHA-384   |\n            |          | SHA-512   |\n   ---------+----------+-----------+-----------\n\
    \   112      | 224-255  | SHA-224   | secp224r1\n            |          | SHA-256\
    \   | sect233k1\n            |          | SHA-384   | sect233r1\n            |\
    \          | SHA-512   |\n   ---------+----------+-----------+-----------\n  \
    \ 128      | 256-383  | SHA-256   | secp256r1\n            |          | SHA-384\
    \   | sect283k1\n            |          | SHA-512   | sect283r1\n   ---------+----------+-----------+-----------\n\
    \   192      | 384-511  | SHA-384   | secp384r1\n            |          | SHA-512\
    \   | sect409k1\n            |          |           | sect409r1\n   ---------+----------+-----------+-----------\n\
    \   256      | 512+     | SHA-512   | secp521r1\n            |          |    \
    \       | sect571k1\n            |          |           | sect571r1\n   ---------+----------+-----------+-----------\n\
    \   To promote interoperability, the following choices are RECOMMENDED:\n   Minimum\
    \  | ECDSA    | Message   | Curve\n   Bits of  | Key Size | Digest    |\n   Security\
    \ |          | Algorithm |\n   ---------+----------+-----------+-----------\n\
    \   80       | 192      | SHA-256   | sect192r1\n   ---------+----------+-----------+-----------\n\
    \   112      | 224      | SHA-256   | secp224r1\n   ---------+----------+-----------+-----------\n\
    \   128      | 256      | SHA-256   | secp256r1\n   ---------+----------+-----------+-----------\n\
    \   192      | 384      | SHA-384   | secp384r1\n   ---------+----------+-----------+-----------\n\
    \   256      | 512+     | SHA-512   | secp521r1\n   ---------+----------+-----------+-----------\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This document makes extensive use of object identifiers\
    \ to register\n   originator public key types and algorithms.  The algorithm object\n\
    \   identifiers are registered in the ANSI X9.62, ANSI X9.63, NIST, RSA,\n   and\
    \ SECG arcs.  Additionally, object identifiers are used to identify\n   the ASN.1\
    \ modules found in Appendix A (there are two).  These are\n   defined by the SMIME\
    \ WG Registrar in an arc delegated by RSA to the\n   SMIME Working Group: iso(1)\
    \ member-body(2) us(840) rsadsi(113549)\n   pkcs(1) pkcs-9(9) smime(16) modules(0).\
    \  No action by IANA is\n   necessary for this document or any anticipated updates.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [CMS]          Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\", RFC\n                  5652, September 2009.\n   [CMS-AES] \
    \     Schaad, J., \"Use of the Advanced Encryption Standard\n                \
    \  (AES) Encryption Algorithm in Cryptographic Message\n                  Syntax\
    \ (CMS)\", RFC 3565, July 2003.\n   [CMS-AESCG]    Housley, R., \"Using AES-CCM\
    \ and AES-GCM Authenticated\n                  Encryption in the Cryptographic\
    \ Message Syntax (CMS)\",\n                  RFC 5084, December 2007.\n   [CMS-ALG]\
    \      Housley, R., \"Cryptographic Message Syntax (CMS)\n                  Algorithms\"\
    , RFC 3370, August 2002.\n   [CMS-AUTHENV]  Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\n                  Authenticated-Enveloped-Data Content Type\"\
    , RFC 5083,\n                  November 2007.\n   [CMS-DH]       Rescorla, E.,\
    \ \"Diffie-Hellman Key Agreement Method\",\n                  RFC 2631, June 1999.\n\
    \   [CMS-SHA2]     Turner, S., \"Using SHA2 Algorithms with Cryptographic\n  \
    \                Message Syntax\", RFC 5754, January 2010.\n   [FIPS180-3]   \
    \ National Institute of Standards and Technology (NIST),\n                  FIPS\
    \ Publication 180-3: Secure Hash Standard, October\n                  2008.\n\
    \   [FIPS186-3]    National Institute of Standards and Technology (NIST),\n  \
    \                FIPS Publication 186-3: Digital Signature Standard,\n       \
    \           June 2009.\n   [HMAC-SHA2]    Nystrom, M., \"Identifiers and Test\
    \ Vectors for HMAC-\n                  SHA-224, HMAC-SHA-256, HMAC-SHA-384, and\
    \ HMAC-\n                  SHA-512\", RFC 4231, December 2005.\n   [MUST]    \
    \     Bradner, S., \"Key words for use in RFCs to Indicate\n                 \
    \ Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [MSG]          Ramsdell,\
    \ B. and S. Turner, \"Secure/Multipurpose\n                  Internet Mail Extensions\
    \ (S/MIME) Version 3.2 Message\n                  Specification\", RFC 5751, January\
    \ 2010.\n   [PKI]          Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n\
    \                  Housley, R., and W. Polk, \"Internet X.509 Public Key\n   \
    \               Infrastructure Certificate and Certificate Revocation\n      \
    \            List (CRL) Profile\", RFC 5280, May 2008.\n   [PKI-ALG]      Turner,\
    \ S., Brown, D., Yiu, K., Housley, R., and T.\n                  Polk, \"Elliptic\
    \ Curve Cryptography Subject Public Key\n                  Information\", RFC\
    \ 5480, March 2009.\n   [RANDOM]       Eastlake, D., 3rd, Schiller, J., and S.\
    \ Crocker,\n                  \"Randomness Requirements for Security\", BCP 106,\
    \ RFC\n                  4086, June 2005.\n   [RSAOAEP]      Schaad, J., Kaliski,\
    \ B., and R. Housley, \"Additional\n                  Algorithms and Identifiers\
    \ for RSA Cryptography for\n                  use in the Internet X.509 Public\
    \ Key Infrastructure\n                  Certificate and Certificate Revocation\
    \ List (CRL)\n                  Profile\", RFC 4055, June 2005.\n   [SEC1]   \
    \      Standards for Efficient Cryptography Group, \"SEC 1:\n                \
    \  Elliptic Curve Cryptography\", version 2.0, May 2009,\n                  available\
    \ from www.secg.org.\n   [SP800-56A]    National Institute of Standards and Technology\
    \ (NIST),\n                  Special Publication 800-56A: Recommendation Pair-Wise\n\
    \                  Key Establishment Schemes Using Discrete Logarithm\n      \
    \            Cryptography (Revised), March 2007.\n   [X.680]        ITU-T Recommendation\
    \ X.680 (2002) | ISO/IEC\n                  8824-1:2002. Information Technology\
    \ - Abstract Syntax\n                  Notation One.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [BON]          D. Boneh, \"The Security of\
    \ Multicast MAC\",\n                  Presentation at Selected Areas of Cryptography\
    \ 2000,\n                  Center for Applied Cryptographic Research, University\n\
    \                  of Waterloo, 2000.  Paper version available from\n        \
    \          http://crypto.stanford.edu/~dabo/papers/mmac.ps\n   [CERTCAP]     \
    \ Santesson, S., \"X.509 Certificate Extension for\n                  Secure/Multipurpose\
    \ Internet Mail Extensions (S/MIME)\n                  Capabilities\", RFC 4262,\
    \ December 2005.\n   [CMS-ASN]      Hoffman, P. and J. Schaad, \"New ASN.1 Modules\
    \ for CMS\n                  and S/MIME\", Work in Progress, August 2009.\n  \
    \ [CMS-ECC]      Blake-Wilson, S., Brown, D., and P. Lambert, \"Use of\n     \
    \             Elliptic Curve Cryptography (ECC) Algorithms in\n              \
    \    Cryptographic Message Syntax (CMS)\", RFC 3278, April\n                 \
    \ 2002.\n   [CMS-KEA]      Pawling, J., \"Use of the KEA and SKIPJACK Algorithms\n\
    \                  in CMS\", RFC 2876, July 2000.\n   [K]            B. Kaliski,\
    \ \"MQV Vulnerability\", Posting to ANSI X9F1\n                  and IEEE P1363\
    \ newsgroups, 1998.\n   [PKI-ASN]      Hoffman, P. and J. Schaad, \"New ASN.1\
    \ Modules for\n                  PKIX\", Work in Progress, August 2009.\n   [SP800-57]\
    \     National Institute of Standards and Technology (NIST),\n               \
    \   Special Publication 800-57: Recommendation for Key\n                  Management\
    \ - Part 1 (Revised), March 2007.\n   [X.681]        ITU-T Recommendation X.681\
    \ (2002) | ISO/IEC\n                  8824-2:2002. Information Technology - Abstract\
    \ Syntax\n                  Notation One: Information Object Specification.\n\
    \   [X.682]        ITU-T Recommendation X.682 (2002) | ISO/IEC\n             \
    \     8824-3:2002. Information Technology - Abstract Syntax\n                \
    \  Notation One: Constraint Specification.\n   [X.683]        ITU-T Recommendation\
    \ X.683 (2002) | ISO/IEC\n                  8824-4:2002. Information Technology\
    \ - Abstract Syntax\n                  Notation One: Parameterization of ASN.1\n\
    \                  Specifications, 2002.\n   [X9.62]        X9.62-2005, \"Public\
    \ Key Cryptography for the Financial\n                  Services Industry: The\
    \ Elliptic Curve Digital\n                  Signature Standard (ECDSA)\", November,\
    \ 2005.\n"
- title: Appendix A.   ASN.1 Modules
  contents:
  - "Appendix A.   ASN.1 Modules\n   Appendix A.1 provides the normative ASN.1 definitions\
    \ for the\n   structures described in this specification using ASN.1 as defined\
    \ in\n   [X.680] for compilers that support the 1988 ASN.1.\n   Appendix A.2 provides\
    \ informative ASN.1 definitions for the\n   structures described in this specification\
    \ using ASN.1 as defined in\n   [X.680], [X.681], [X.682], and [X.683] for compilers\
    \ that support the\n   2002 ASN.1.  This appendix contains the same information\
    \ as Appendix\n   A.1 in a more recent (and precise) ASN.1 notation; however,\
    \ Appendix\n   A.1 takes precedence in case of conflict.\n"
- title: A.1.  1988 ASN.1 Module
  contents:
  - "A.1.  1988 ASN.1 Module\n   CMSECCAlgs-2009-88\n     { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n       smime(16) modules(0) id-mod-cms-ecc-alg-2009-88(45)\
    \ }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL\n   IMPORTS\n\
    \   -- From [PKI]\n   AlgorithmIdentifier\n     FROM PKIX1Explicit88\n       {\
    \ iso(1) identified-organization(3) dod(6)\n         internet(1) security(5) mechanisms(5)\
    \ pkix(7) mod(0)\n         pkix1-explicit(18) }\n   -- From [RSAOAEP]\n   id-sha224,\
    \ id-sha256, id-sha384, id-sha512\n     FROM PKIX1-PSS-OAEP-Algorithms\n     \
    \  { iso(1) identified-organization(3) dod(6) internet(1)\n         security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n         id-mod-pkix1-rsa-pkalgs(33) }\n  \
    \ -- From [PKI-ALG]\n   id-sha1, ecdsa-with-SHA1, ecdsa-with-SHA224,\n   ecdsa-with-SHA256,\
    \ ecdsa-with-SHA384, ecdsa-with-SHA512,\n   id-ecPublicKey, ECDSA-Sig-Value, ECPoint,\
    \ ECParameters\n     FROM PKIX1Algorithms2008\n       { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) id-mod(0) 45\
    \ }\n   -- From [CMS]\n   OriginatorPublicKey, UserKeyingMaterial\n     FROM CryptographicMessageSyntax2004\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n   \
    \      smime(16) modules(0) cms-2004(24) }\n   -- From [CMS-ALG]\n   hMAC-SHA1,\
    \ des-ede3-cbc, id-alg-CMS3DESwrap, CBCParameter\n     FROM CryptographicMessageSyntaxAlgorithms\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n   \
    \      smime(16) modules(0) cmsalg-2001(16) }\n   -- From [CMS-AES]\n   id-aes128-CBC,\
    \ id-aes192-CBC, id-aes256-CBC, AES-IV,\n   id-aes128-wrap, id-aes192-wrap, id-aes256-wrap\n\
    \     FROM CMSAesRsaesOaep\n       { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-cms-aes(19) }\n   --\
    \ From [CMS-AESCG]\n   id-aes128-CCM, id-aes192-CCM, id-aes256-CCM, CCMParameters\n\
    \   id-aes128-GCM, id-aes192-GCM, id-aes256-GCM, GCMParameters\n     FROM CMS-AES-CCM-and-AES-GCM\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n   \
    \      smime(16) modules(0) id-mod-cms-aes(32) }\n   ;\n   --\n   -- Message Digest\
    \ Algorithms: Imported from [PKI-ALG] and [RSAOAEP]\n   --\n   -- id-sha1 Parameters\
    \ are preferred absent\n   -- id-sha224 Parameters are preferred absent\n   --\
    \ id-sha256 Parameters are preferred absent\n   -- id-sha384 Parameters are preferred\
    \ absent\n   -- id-sha512 Parameters are preferred absent\n   --\n   -- Signature\
    \ Algorithms: Imported from [PKI-ALG]\n   --\n   -- ecdsa-with-SHA1 Parameters\
    \ are NULL\n   -- ecdsa-with-SHA224 Parameters are absent\n   -- ecdsa-with-SHA256\
    \ Parameters are absent\n   -- ecdsa-with-SHA384 Parameters are absent\n   --\
    \ ecdsa-with-SHA512 Parameters are absent\n   -- ECDSA Signature Value\n   --\
    \ Contents of SignatureValue OCTET STRING\n   -- ECDSA-Sig-Value ::= SEQUENCE\
    \ {\n   --   r  INTEGER,\n   --   s  INTEGER\n   -- }\n   --\n   -- Key Agreement\
    \ Algorithms\n   --\n   x9-63-scheme OBJECT IDENTIFIER ::= {\n     iso(1) identified-organization(3)\
    \ tc68(133) country(16) x9(840)\n     x9-63(63) schemes(0) }\n   secg-scheme OBJECT\
    \ IDENTIFIER ::= {\n     iso(1) identified-organization(3) certicom(132) schemes(1)\
    \ }\n   --\n   -- Diffie-Hellman Single Pass, Standard, with KDFs\n   --\n   --\
    \ Parameters are always present and indicate the key wrap algorithm\n   -- with\
    \ KeyWrapAlgorithm.\n   dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::=\
    \ {\n     x9-63-scheme 2 }\n   dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n     secg-scheme 11 0 }\n   dhSinglePass-stdDH-sha256kdf-scheme OBJECT\
    \ IDENTIFIER ::= {\n     secg-scheme 11 1 }\n   dhSinglePass-stdDH-sha384kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     secg-scheme 11 2 }\n   dhSinglePass-stdDH-sha512kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     secg-scheme 11 3 }\n   --\n   -- Diffie-Hellman\
    \ Single Pass, Cofactor, with KDFs\n   --\n   dhSinglePass-cofactorDH-sha1kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     x9-63-scheme 3 }\n   dhSinglePass-cofactorDH-sha224kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     secg-scheme 14 0 }\n   dhSinglePass-cofactorDH-sha256kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     secg-scheme 14 1 }\n   dhSinglePass-cofactorDH-sha384kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     secg-scheme 14 2 }\n   dhSinglePass-cofactorDH-sha512kdf-scheme\
    \ OBJECT IDENTIFIER ::= {\n     secg-scheme 14 3 }\n   --\n   -- MQV Single Pass,\
    \ Cofactor, with KDFs\n   --\n   mqvSinglePass-sha1kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n     x9-63-scheme 16 }\n   mqvSinglePass-sha224kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n     secg-scheme 15 0 }\n   mqvSinglePass-sha256kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n     secg-scheme 15 1 }\n   mqvSinglePass-sha384kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n     secg-scheme 15 2 }\n   mqvSinglePass-sha512kdf-scheme OBJECT IDENTIFIER\
    \ ::= {\n     secg-scheme 15 3 }\n   --\n   -- Key Wrap Algorithms: Imported from\
    \ [CMS-ALG] and [CMS-AES]\n   --\n   KeyWrapAlgorithm ::= AlgorithmIdentifier\n\
    \   -- id-alg-CMS3DESwrap Parameters are NULL\n   -- id-aes128-wrap Parameters\
    \ are absent\n   -- id-aes192-wrap Parameters are absent\n   -- id-aes256-wrap\
    \ Parameters are absent\n   --\n   -- Content Encryption Algorithms: Imported\
    \ from [CMS-ALG]\n   -- and [CMS-AES]\n   --\n   -- des-ede3-cbc Parameters are\
    \ CBCParameter\n   -- id-aes128-CBC Parameters are AES-IV\n   -- id-aes192-CBC\
    \ Parameters are AES-IV\n   -- id-aes256-CBC Parameters are AES-IV\n   -- id-aes128-CCM\
    \ Parameters are CCMParameters\n   -- id-aes192-CCM Parameters are CCMParameters\n\
    \   -- id-aes256-CCM Parameters are CCMParameters\n   -- id-aes128-GCM Parameters\
    \ are GCMParameters\n   -- id-aes192-GCM Parameters are GCMParameters\n   -- id-aes256-GCM\
    \ Parameters are GCMParameters\n   --\n   -- Message Authentication Code Algorithms\n\
    \   --\n   -- hMAC-SHA1 Parameters are preferred absent\n   -- HMAC with SHA-224,\
    \ SHA-256, SHA_384, and SHA-512 Parameters are\n   -- absent\n   id-hmacWithSHA224\
    \ OBJECT IDENTIFIER ::= {\n     iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \     digestAlgorithm(2) 8 }\n   id-hmacWithSHA256 OBJECT IDENTIFIER ::= {\n \
    \    iso(1) member-body(2) us(840) rsadsi(113549)\n     digestAlgorithm(2) 9 }\n\
    \   id-hmacWithSHA384 OBJECT IDENTIFIER ::= {\n     iso(1) member-body(2) us(840)\
    \ rsadsi(113549)\n     digestAlgorithm(2) 10 }\n   id-hmacWithSHA512 OBJECT IDENTIFIER\
    \ ::= {\n     iso(1) member-body(2) us(840) rsadsi(113549)\n     digestAlgorithm(2)\
    \ 11 }\n   --\n   -- Originator Public Key Algorithms: Imported from [PKI-ALG]\n\
    \   --\n   -- id-ecPublicKey Parameters are absent, NULL, or ECParameters\n  \
    \ -- Format for both ephemeral and static public keys: Imported from\n   -- [PKI-ALG]\n\
    \   -- ECPoint ::= OCTET STRING\n   -- ECParameters ::= CHOICE {\n   --   namedCurve\
    \      OBJECT IDENTIFIER\n   --   commented out in [PKI-ALG]  implicitCurve  \
    \ NULL\n   --   commented out in [PKI-ALG]  specifiedCurve  SpecifiedECDomain\n\
    \   --   commented out in [PKI-ALG]  ...\n   -- }\n       -- implicitCurve and\
    \ specifiedCurve MUST NOT be used in PKIX.\n       -- Details for SpecifiedECDomain\
    \ can be found in [X9.62].\n       -- Any future additions to this CHOICE should\
    \ be coordinated\n       -- with ANSI X9.\n   -- Format of KeyAgreeRecipientInfo\
    \ ukm field when used with\n   -- ECMQV\n   MQVuserKeyingMaterial ::= SEQUENCE\
    \ {\n     ephemeralPublicKey       OriginatorPublicKey,\n     addedukm       \
    \      [0] EXPLICIT UserKeyingMaterial OPTIONAL\n   }\n   -- 'SharedInfo' for\
    \ input to KDF when using ECDH and ECMQV with\n   -- EnvelopedData, AuthenticatedData,\
    \ or AuthEnvelopedData\n   ECC-CMS-SharedInfo ::= SEQUENCE {\n     keyInfo   \
    \      AlgorithmIdentifier,\n     entityUInfo [0] EXPLICIT OCTET STRING OPTIONAL,\n\
    \     suppPubInfo [2] EXPLICIT OCTET STRING\n   }\n   --\n   -- S/MIME Capabilities\n\
    \   -- An identifier followed by type.\n   --\n   --\n   -- S/MIME Capabilities:\
    \ Message Digest Algorithms\n   --\n   -- Found in [CMS-SHA2].\n   --\n   -- S/MIME\
    \ Capabilities: Signature Algorithms\n   --\n   -- ecdsa-with-SHA1 Type NULL\n\
    \   -- ecdsa-with-SHA224 Type absent\n   -- ecdsa-with-SHA256 Type absent\n  \
    \ -- ecdsa-with-SHA384 Type absent\n   -- ecdsa-with-SHA512 Type absent\n   --\n\
    \   -- S/MIME Capabilities: ECDH, Single Pass, Standard\n   --\n   -- dhSinglePass-stdDH-sha1kdf\
    \ Type is the KeyWrapAlgorithm\n   -- dhSinglePass-stdDH-sha224kdf Type is the\
    \ KeyWrapAlgorithm\n   -- dhSinglePass-stdDH-sha256kdf Type is the KeyWrapAlgorithm\n\
    \   -- dhSinglePass-stdDH-sha384kdf Type is the KeyWrapAlgorithm\n   -- dhSinglePass-stdDH-sha512kdf\
    \ Type is the KeyWrapAlgorithm\n   --\n   -- S/MIME Capabilities: ECDH, Single\
    \ Pass, Cofactor\n   --\n   -- dhSinglePass-cofactorDH-sha1kdf Type is the KeyWrapAlgorithm\n\
    \   -- dhSinglePass-cofactorDH-sha224kdf Type is the KeyWrapAlgorithm\n   -- dhSinglePass-cofactorDH-sha256kdf\
    \ Type is the KeyWrapAlgorithm\n   -- dhSinglePass-cofactorDH-sha384kdf Type is\
    \ the KeyWrapAlgorithm\n   -- dhSinglePass-cofactorDH-sha512kdf Type is the KeyWrapAlgorithm\n\
    \   --\n   -- S/MIME Capabilities: ECMQV, Single Pass, Standard\n   --\n   --\
    \ mqvSinglePass-sha1kdf Type is the KeyWrapAlgorithm\n   -- mqvSinglePass-sha224kdf\
    \ Type is the KeyWrapAlgorithm\n   -- mqvSinglePass-sha256kdf Type is the KeyWrapAlgorithm\n\
    \   -- mqvSinglePass-sha384kdf Type is the KeyWrapAlgorithm\n   -- mqvSinglePass-sha512kdf\
    \ Type is the KeyWrapAlgorithm\n   --\n   -- S/MIME Capabilities: Message Authentication\
    \ Code Algorithms\n   --\n   -- hMACSHA1 Type is preferred absent\n   -- id-hmacWithSHA224\
    \ Type is absent\n   -- if-hmacWithSHA256 Type is absent\n   -- id-hmacWithSHA384\
    \ Type is absent\n   -- id-hmacWithSHA512 Type is absent\n   END\n"
- title: A.2.  2004 ASN.1 Module
  contents:
  - 'A.2.  2004 ASN.1 Module

    '
- title: CMSECCAlgs-2009-02
  contents:
  - "CMSECCAlgs-2009-02\n  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\
    \ pkcs-9(9)\n    smime(16) modules(0) id-mod-cms-ecc-alg-2009-02(46) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS ALL
  contents:
  - '-- EXPORTS ALL

    '
- title: IMPORTS
  contents:
  - 'IMPORTS

    '
- title: -- From [PKI-ASN]
  contents:
  - '-- From [PKI-ASN]

    '
- title: mda-sha1, sa-ecdsaWithSHA1, sa-ecdsaWithSHA224, sa-ecdsaWithSHA256,
  contents:
  - 'mda-sha1, sa-ecdsaWithSHA1, sa-ecdsaWithSHA224, sa-ecdsaWithSHA256,

    '
- title: sa-ecdsaWithSHA384, sa-ecdsaWithSHA512, id-ecPublicKey,
  contents:
  - 'sa-ecdsaWithSHA384, sa-ecdsaWithSHA512, id-ecPublicKey,

    '
- title: ECDSA-Sig-Value, ECPoint, ECParameters
  contents:
  - "ECDSA-Sig-Value, ECPoint, ECParameters\n  FROM PKIXAlgs-2009\n    { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n    \
    \  id-mod-pkix1-algorithms2008-02(56) }\n"
- title: -- From [PKI-ASN]
  contents:
  - '-- From [PKI-ASN]

    '
- title: mda-sha224, mda-sha256, mda-sha384, mda-sha512
  contents:
  - "mda-sha224, mda-sha256, mda-sha384, mda-sha512\n  FROM PKIX1-PSS-OAEP-Algorithms-2009\n\
    \    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n      id-mod-pkix1-rsa-pkalgs-02(54) }\n"
- title: -- FROM [CMS-ASN]
  contents:
  - '-- FROM [CMS-ASN]

    '
- title: KEY-WRAP, SIGNATURE-ALGORITHM, DIGEST-ALGORITHM, ALGORITHM,
  contents:
  - 'KEY-WRAP, SIGNATURE-ALGORITHM, DIGEST-ALGORITHM, ALGORITHM,

    '
- title: PUBLIC-KEY, MAC-ALGORITHM, CONTENT-ENCRYPTION, KEY-AGREE, SMIME-CAPS,
  contents:
  - 'PUBLIC-KEY, MAC-ALGORITHM, CONTENT-ENCRYPTION, KEY-AGREE, SMIME-CAPS,

    '
- title: AlgorithmIdentifier{}
  contents:
  - "AlgorithmIdentifier{}\n  FROM AlgorithmInformation-2009\n    { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n    \
    \  id-mod-algorithmInformation-02(58) }\n"
- title: -- From [CMS-ASN]
  contents:
  - '-- From [CMS-ASN]

    '
- title: OriginatorPublicKey, UserKeyingMaterial
  contents:
  - "OriginatorPublicKey, UserKeyingMaterial\n  FROM CryptographicMessageSyntax-2009\n\
    \    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16)\
    \ modules(0) id-mod-cms-2004-02(41) }\n"
- title: -- From [CMS-ASN]
  contents:
  - '-- From [CMS-ASN]

    '
- title: maca-hMAC-SHA1, cea-3DES-cbc, kwa-3DESWrap, CBCParameter
  contents:
  - "maca-hMAC-SHA1, cea-3DES-cbc, kwa-3DESWrap, CBCParameter\n  FROM CryptographicMessageSyntaxAlgorithms-2009\n\
    \    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16)\
    \ modules(0) id-mod-cmsalg-2001-02(37) }\n"
- title: -- From [CMS-ASN]
  contents:
  - '-- From [CMS-ASN]

    '
- title: cea-aes128-cbc, cea-aes192-cbc, cea-aes256-cbc, kwa-aes128-wrap,
  contents:
  - 'cea-aes128-cbc, cea-aes192-cbc, cea-aes256-cbc, kwa-aes128-wrap,

    '
- title: kwa-aes192-wrap, kwa-aes256-wrap
  contents:
  - "kwa-aes192-wrap, kwa-aes256-wrap\n  FROM CMSAesRsaesOaep-2009\n    { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cms-aes-02(38)\
    \ }\n"
- title: -- From [CMS-ASN]
  contents:
  - '-- From [CMS-ASN]

    '
- title: cea-aes128-CCM, cea-aes192-CCM, cea-aes256-CCM, cea-aes128-GCM,
  contents:
  - 'cea-aes128-CCM, cea-aes192-CCM, cea-aes256-CCM, cea-aes128-GCM,

    '
- title: cea-aes192-GCM, cea-aes256-GCM
  contents:
  - "cea-aes192-GCM, cea-aes256-GCM\n  FROM CMS-AES-CCM-and-AES-GCM-2009\n    { iso(1)\
    \ member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0)\
    \ id-mod-cms-aes-ccm-gcm-02(44) }\n"
- title: ;
  contents:
  - ';

    '
- title: -- Constrains the SignedData digestAlgorithms field
  contents:
  - '-- Constrains the SignedData digestAlgorithms field

    '
- title: -- Constrains the SignedData SignerInfo digestAlgorithm field
  contents:
  - '-- Constrains the SignedData SignerInfo digestAlgorithm field

    '
- title: -- Constrains the AuthenticatedData digestAlgorithm field
  contents:
  - '-- Constrains the AuthenticatedData digestAlgorithm field

    '
- title: '-- Message Digest Algorithms: Imported from [PKI-ASN]'
  contents:
  - '-- Message Digest Algorithms: Imported from [PKI-ASN]

    '
- title: -- MessageDigestAlgs DIGEST-ALGORITHM ::= {
  contents:
  - '-- MessageDigestAlgs DIGEST-ALGORITHM ::= {

    '
- title: --  mda-sha1   |
  contents:
  - '--  mda-sha1   |

    '
- title: --  mda-sha224 |
  contents:
  - '--  mda-sha224 |

    '
- title: --  mda-sha256 |
  contents:
  - '--  mda-sha256 |

    '
- title: --  mda-sha384 |
  contents:
  - '--  mda-sha384 |

    '
- title: --  mda-sha512,
  contents:
  - '--  mda-sha512,

    '
- title: --  ...
  contents:
  - '--  ...

    '
- title: -- }
  contents:
  - '-- }

    '
- title: -- Constrains the SignedData SignerInfo signatureAlgorithm field
  contents:
  - '-- Constrains the SignedData SignerInfo signatureAlgorithm field

    '
- title: '-- Signature Algorithms: Imported from [PKI-ASN]'
  contents:
  - '-- Signature Algorithms: Imported from [PKI-ASN]

    '
- title: -- SignatureAlgs SIGNATURE-ALGORITHM ::= {
  contents:
  - '-- SignatureAlgs SIGNATURE-ALGORITHM ::= {

    '
- title: --  sa-ecdsaWithSHA1   |
  contents:
  - '--  sa-ecdsaWithSHA1   |

    '
- title: --  sa-ecdsaWithSHA224 |
  contents:
  - '--  sa-ecdsaWithSHA224 |

    '
- title: --  sa-ecdsaWithSHA256 |
  contents:
  - '--  sa-ecdsaWithSHA256 |

    '
- title: --  sa-ecdsaWithSHA384 |
  contents:
  - '--  sa-ecdsaWithSHA384 |

    '
- title: --  sa-ecdsaWithSHA512,
  contents:
  - '--  sa-ecdsaWithSHA512,

    '
- title: --  ...
  contents:
  - '--  ...

    '
- title: -- }
  contents:
  - '-- }

    '
- title: '-- ECDSA Signature Value: Imported from [PKI-ALG]'
  contents:
  - '-- ECDSA Signature Value: Imported from [PKI-ALG]

    '
- title: -- Contents of SignatureValue OCTET STRING
  contents:
  - '-- Contents of SignatureValue OCTET STRING

    '
- title: -- ECDSA-Sig-Value ::= SEQUENCE {
  contents:
  - '-- ECDSA-Sig-Value ::= SEQUENCE {

    '
- title: --   r  INTEGER,
  contents:
  - '--   r  INTEGER,

    '
- title: --   s  INTEGER
  contents:
  - '--   s  INTEGER

    '
- title: -- }
  contents:
  - '-- }

    '
- title: --
  contents:
  - '--

    '
- title: -- Key Agreement Algorithms
  contents:
  - '-- Key Agreement Algorithms

    '
- title: --
  contents:
  - '--

    '
- title: -- Constrains the EnvelopedData RecipientInfo KeyAgreeRecipientInfo
  contents:
  - '-- Constrains the EnvelopedData RecipientInfo KeyAgreeRecipientInfo

    '
- title: --   keyEncryption Algorithm field
  contents:
  - '--   keyEncryption Algorithm field

    '
- title: -- Constrains the AuthenticatedData RecipientInfo
  contents:
  - '-- Constrains the AuthenticatedData RecipientInfo

    '
- title: --   KeyAgreeRecipientInfo keyEncryption Algorithm field
  contents:
  - '--   KeyAgreeRecipientInfo keyEncryption Algorithm field

    '
- title: -- Constrains the AuthEnvelopedData RecipientInfo
  contents:
  - '-- Constrains the AuthEnvelopedData RecipientInfo

    '
- title: --   KeyAgreeRecipientInfo keyEncryption Algorithm field
  contents:
  - '--   KeyAgreeRecipientInfo keyEncryption Algorithm field

    '
- title: -- DH variants are not used with AuthenticatedData or
  contents:
  - '-- DH variants are not used with AuthenticatedData or

    '
- title: -- AuthEnvelopedData
  contents:
  - '-- AuthEnvelopedData

    '
- title: KeyAgreementAlgs KEY-AGREE ::= {
  contents:
  - "KeyAgreementAlgs KEY-AGREE ::= {\n  kaa-dhSinglePass-stdDH-sha1kdf-scheme   \
    \     |\n  kaa-dhSinglePass-stdDH-sha224kdf-scheme      |\n  kaa-dhSinglePass-stdDH-sha256kdf-scheme\
    \      |\n  kaa-dhSinglePass-stdDH-sha384kdf-scheme      |\n  kaa-dhSinglePass-stdDH-sha512kdf-scheme\
    \      |\n  kaa-dhSinglePass-cofactorDH-sha1kdf-scheme   |\n  kaa-dhSinglePass-cofactorDH-sha224kdf-scheme\
    \ |\n  kaa-dhSinglePass-cofactorDH-sha256kdf-scheme |\n  kaa-dhSinglePass-cofactorDH-sha384kdf-scheme\
    \ |\n  kaa-dhSinglePass-cofactorDH-sha512kdf-scheme |\n  kaa-mqvSinglePass-sha1kdf-scheme\
    \             |\n  kaa-mqvSinglePass-sha224kdf-scheme           |\n  kaa-mqvSinglePass-sha256kdf-scheme\
    \           |\n  kaa-mqvSinglePass-sha384kdf-scheme           |\n  kaa-mqvSinglePass-sha512kdf-scheme,\n\
    \  ...\n"
- title: '}'
  contents:
  - '}

    '
- title: x9-63-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "x9-63-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) tc68(133)\
    \ country(16) x9(840)\n  x9-63(63) schemes(0) }\n"
- title: secg-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "secg-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) certicom(132)\
    \ schemes(1) }\n"
- title: --
  contents:
  - '--

    '
- title: -- Diffie-Hellman Single Pass, Standard, with KDFs
  contents:
  - '-- Diffie-Hellman Single Pass, Standard, with KDFs

    '
- title: --
  contents:
  - '--

    '
- title: -- Parameters are always present and indicate the Key Wrap Algorithm
  contents:
  - '-- Parameters are always present and indicate the Key Wrap Algorithm

    '
- title: kaa-dhSinglePass-stdDH-sha1kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-stdDH-sha1kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha1kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 2 }\n"
- title: kaa-dhSinglePass-stdDH-sha224kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-stdDH-sha224kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha224kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11\
    \ 0 }\n"
- title: kaa-dhSinglePass-stdDH-sha256kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-stdDH-sha256kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha256kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11\
    \ 1 }\n"
- title: kaa-dhSinglePass-stdDH-sha384kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-stdDH-sha384kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha384kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-stdDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-stdDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11\
    \ 2 }\n"
- title: kaa-dhSinglePass-stdDH-sha512kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-stdDH-sha512kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha512kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-stdDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-stdDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11\
    \ 3 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Diffie-Hellman Single Pass, Cofactor, with KDFs
  contents:
  - '-- Diffie-Hellman Single Pass, Cofactor, with KDFs

    '
- title: --
  contents:
  - '--

    '
- title: kaa-dhSinglePass-cofactorDH-sha1kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-cofactorDH-sha1kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha1kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-cofactorDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-cofactorDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme\
    \ 3 }\n"
- title: kaa-dhSinglePass-cofactorDH-sha224kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-cofactorDH-sha224kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha224kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-cofactorDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-cofactorDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme\
    \ 14 0 }\n"
- title: kaa-dhSinglePass-cofactorDH-sha256kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-cofactorDH-sha256kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha256kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-cofactorDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-cofactorDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme\
    \ 14 1 }\n"
- title: kaa-dhSinglePass-cofactorDH-sha384kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-cofactorDH-sha384kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha384kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-cofactorDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-cofactorDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme\
    \ 14 2 }\n"
- title: kaa-dhSinglePass-cofactorDH-sha512kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-dhSinglePass-cofactorDH-sha512kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha512kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: dhSinglePass-cofactorDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "dhSinglePass-cofactorDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme\
    \ 14 3 }\n"
- title: --
  contents:
  - '--

    '
- title: -- MQV Single Pass, Cofactor, with KDFs
  contents:
  - '-- MQV Single Pass, Cofactor, with KDFs

    '
- title: --
  contents:
  - '--

    '
- title: kaa-mqvSinglePass-sha1kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-mqvSinglePass-sha1kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha1kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha1kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: mqvSinglePass-sha1kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "mqvSinglePass-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 16 }\n"
- title: kaa-mqvSinglePass-sha224kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-mqvSinglePass-sha224kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha224kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha224kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: mqvSinglePass-sha224kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "mqvSinglePass-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 0 }\n"
- title: kaa-mqvSinglePass-sha256kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-mqvSinglePass-sha256kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha256kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha256kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: mqvSinglePass-sha256kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "mqvSinglePass-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 1 }\n"
- title: kaa-mqvSinglePass-sha384kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-mqvSinglePass-sha384kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha384kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha384kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: mqvSinglePass-sha384kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "mqvSinglePass-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 2 }\n"
- title: kaa-mqvSinglePass-sha512kdf-scheme KEY-AGREE ::= {
  contents:
  - "kaa-mqvSinglePass-sha512kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha512kdf-scheme\n\
    \  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data --\
    \ ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha512kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: mqvSinglePass-sha512kdf-scheme OBJECT IDENTIFIER ::= {
  contents:
  - "mqvSinglePass-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 3 }\n"
- title: --
  contents:
  - '--

    '
- title: '-- Key Wrap Algorithms: Imported from [CMS-ASN]'
  contents:
  - '-- Key Wrap Algorithms: Imported from [CMS-ASN]

    '
- title: --
  contents:
  - '--

    '
- title: KeyWrapAlgorithm ::= AlgorithmIdentifier { KEY-WRAP, { KeyWrapAlgs } }
  contents:
  - 'KeyWrapAlgorithm ::= AlgorithmIdentifier { KEY-WRAP, { KeyWrapAlgs } }

    '
- title: KeyWrapAlgs KEY-WRAP ::= {
  contents:
  - "KeyWrapAlgs KEY-WRAP ::= {\n  kwa-3DESWrap    |\n  kwa-aes128-wrap |\n  kwa-aes192-wrap\
    \ |\n  kwa-aes256-wrap,\n  ...\n"
- title: '}'
  contents:
  - '}

    '
- title: --
  contents:
  - '--

    '
- title: '-- Content Encryption Algorithms: Imported from [CMS-ASN]'
  contents:
  - '-- Content Encryption Algorithms: Imported from [CMS-ASN]

    '
- title: --
  contents:
  - '--

    '
- title: -- Constrains the EnvelopedData EncryptedContentInfo encryptedContent
  contents:
  - '-- Constrains the EnvelopedData EncryptedContentInfo encryptedContent

    '
- title: -- field and the AuthEnvelopedData EncryptedContentInfo
  contents:
  - '-- field and the AuthEnvelopedData EncryptedContentInfo

    '
- title: -- contentEncryptionAlgorithm field
  contents:
  - '-- contentEncryptionAlgorithm field

    '
- title: -- ContentEncryptionAlgs CONTENT-ENCRYPTION ::= {
  contents:
  - '-- ContentEncryptionAlgs CONTENT-ENCRYPTION ::= {

    '
- title: --   cea-3DES-cbc |
  contents:
  - '--   cea-3DES-cbc |

    '
- title: --   cea-aes128-cbc   |
  contents:
  - '--   cea-aes128-cbc   |

    '
- title: --   cea-aes192-cbc   |
  contents:
  - '--   cea-aes192-cbc   |

    '
- title: --   cea-aes256-cbc   |
  contents:
  - '--   cea-aes256-cbc   |

    '
- title: --   cea-aes128-ccm   |
  contents:
  - '--   cea-aes128-ccm   |

    '
- title: --   cea-aes192-ccm   |
  contents:
  - '--   cea-aes192-ccm   |

    '
- title: --   cea-aes256-ccm   |
  contents:
  - '--   cea-aes256-ccm   |

    '
- title: --   cea-aes128-gcm   |
  contents:
  - '--   cea-aes128-gcm   |

    '
- title: --   cea-aes192-gcm   |
  contents:
  - '--   cea-aes192-gcm   |

    '
- title: --   cea-aes256-gcm,
  contents:
  - '--   cea-aes256-gcm,

    '
- title: --   ...
  contents:
  - '--   ...

    '
- title: --   }
  contents:
  - '--   }

    '
- title: -- des-ede3-cbc and aes*-cbc are used with EnvelopedData and
  contents:
  - '-- des-ede3-cbc and aes*-cbc are used with EnvelopedData and

    '
- title: -- EncryptedData
  contents:
  - '-- EncryptedData

    '
- title: -- aes*-ccm are used with AuthEnvelopedData
  contents:
  - '-- aes*-ccm are used with AuthEnvelopedData

    '
- title: -- aes*-gcm are used with AuthEnvelopedData
  contents:
  - '-- aes*-gcm are used with AuthEnvelopedData

    '
- title: -- (where * is 128, 192, and 256)
  contents:
  - '-- (where * is 128, 192, and 256)

    '
- title: --
  contents:
  - '--

    '
- title: -- Message Authentication Code Algorithms
  contents:
  - '-- Message Authentication Code Algorithms

    '
- title: --
  contents:
  - '--

    '
- title: -- Constrains the AuthenticatedData
  contents:
  - '-- Constrains the AuthenticatedData

    '
- title: -- MessageAuthenticationCodeAlgorithm field
  contents:
  - '-- MessageAuthenticationCodeAlgorithm field

    '
- title: --
  contents:
  - '--

    '
- title: MessageAuthAlgs MAC-ALGORITHM ::= {
  contents:
  - 'MessageAuthAlgs MAC-ALGORITHM ::= {

    '
- title: --  maca-hMAC-SHA1 |
  contents:
  - "--  maca-hMAC-SHA1 |\n  maca-hMAC-SHA224 |\n  maca-hMAC-SHA256 |\n  maca-hMAC-SHA384\
    \ |\n  maca-hMAC-SHA512,\n  ...\n"
- title: '}'
  contents:
  - '}

    '
- title: maca-hMAC-SHA224 MAC-ALGORITHM ::= {
  contents:
  - "maca-hMAC-SHA224 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA224\n  PARAMS\
    \ ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA224\n"
- title: '}'
  contents:
  - '}

    '
- title: id-hmacWithSHA224 OBJECT IDENTIFIER ::= {
  contents:
  - "id-hmacWithSHA224 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \  digestAlgorithm(2) 8 }\n"
- title: maca-hMAC-SHA256 MAC-ALGORITHM ::= {
  contents:
  - "maca-hMAC-SHA256 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA256\n  PARAMS\
    \ ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA256\n"
- title: '}'
  contents:
  - '}

    '
- title: id-hmacWithSHA256 OBJECT IDENTIFIER ::= {
  contents:
  - "id-hmacWithSHA256 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \  digestAlgorithm(2) 9 }\n"
- title: maca-hMAC-SHA384 MAC-ALGORITHM ::= {
  contents:
  - "maca-hMAC-SHA384 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA384\n  PARAMS\
    \ ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA384\n"
- title: '}'
  contents:
  - '}

    '
- title: id-hmacWithSHA384 OBJECT IDENTIFIER ::= {
  contents:
  - "id-hmacWithSHA384 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \  digestAlgorithm(2) 10 }\n"
- title: maca-hMAC-SHA512 MAC-ALGORITHM ::= {
  contents:
  - "maca-hMAC-SHA512 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA512\n  PARAMS\
    \ ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA512\n"
- title: '}'
  contents:
  - '}

    '
- title: id-hmacWithSHA512 OBJECT IDENTIFIER ::= {
  contents:
  - "id-hmacWithSHA512 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \  digestAlgorithm(2) 11 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Originator Public Key Algorithms
  contents:
  - '-- Originator Public Key Algorithms

    '
- title: --
  contents:
  - '--

    '
- title: -- Constraints on KeyAgreeRecipientInfo OriginatorIdentifierOrKey
  contents:
  - '-- Constraints on KeyAgreeRecipientInfo OriginatorIdentifierOrKey

    '
- title: -- OriginatorPublicKey algorithm field
  contents:
  - '-- OriginatorPublicKey algorithm field

    '
- title: OriginatorPKAlgorithms PUBLIC-KEY ::= {
  contents:
  - "OriginatorPKAlgorithms PUBLIC-KEY ::= {\n  opka-ec,\n  ...\n"
- title: '}'
  contents:
  - '}

    '
- title: opka-ec PUBLIC-KEY ::={
  contents:
  - "opka-ec PUBLIC-KEY ::={\n  IDENTIFIER id-ecPublicKey\n  KEY ECPoint\n  PARAMS\
    \ TYPE CHOICE { n NULL, p ECParameters } ARE preferredAbsent\n"
- title: '}'
  contents:
  - '}

    '
- title: '-- Format for both ephemeral and static public keys: Imported from'
  contents:
  - '-- Format for both ephemeral and static public keys: Imported from

    '
- title: -- [PKI-ALG]
  contents:
  - '-- [PKI-ALG]

    '
- title: -- ECPoint ::= OCTET STRING
  contents:
  - '-- ECPoint ::= OCTET STRING

    '
- title: -- ECParameters ::= CHOICE {
  contents:
  - '-- ECParameters ::= CHOICE {

    '
- title: --   namedCurve      CURVE.&id({NamedCurve})
  contents:
  - '--   namedCurve      CURVE.&id({NamedCurve})

    '
- title: --   commented out in [PKI-ALG] implicitCurve   NULL
  contents:
  - '--   commented out in [PKI-ALG] implicitCurve   NULL

    '
- title: --   commented out in [PKI-ALG] specifiedCurve  SpecifiedECDomain
  contents:
  - '--   commented out in [PKI-ALG] specifiedCurve  SpecifiedECDomain

    '
- title: --   commented out in [PKI-ALG] ...
  contents:
  - '--   commented out in [PKI-ALG] ...

    '
- title: -- }
  contents:
  - "-- }\n  -- implicitCurve and specifiedCurve MUST NOT be used in PKIX.\n  -- Details\
    \ for SpecifiedECDomain can be found in [X9.62].\n  -- Any future additions to\
    \ this CHOICE should be coordinated\n  -- with ANSI X.9.\n"
- title: -- Format of KeyAgreeRecipientInfo ukm field when used with
  contents:
  - '-- Format of KeyAgreeRecipientInfo ukm field when used with

    '
- title: -- ECMQV
  contents:
  - '-- ECMQV

    '
- title: MQVuserKeyingMaterial ::= SEQUENCE {
  contents:
  - "MQVuserKeyingMaterial ::= SEQUENCE {\n  ephemeralPublicKey       OriginatorPublicKey,\n\
    \  addedukm             [0] EXPLICIT UserKeyingMaterial OPTIONAL\n"
- title: '}'
  contents:
  - '}

    '
- title: -- 'SharedInfo' for input to KDF when using ECDH and ECMQV with
  contents:
  - '-- ''SharedInfo'' for input to KDF when using ECDH and ECMQV with

    '
- title: -- EnvelopedData, AuthenticatedData, or AuthEnvelopedData
  contents:
  - '-- EnvelopedData, AuthenticatedData, or AuthEnvelopedData

    '
- title: ECC-CMS-SharedInfo ::= SEQUENCE {
  contents:
  - "ECC-CMS-SharedInfo ::= SEQUENCE {\n  keyInfo         KeyWrapAlgorithm,\n  entityUInfo\
    \ [0] EXPLICIT OCTET STRING OPTIONAL,\n  suppPubInfo [2] EXPLICIT OCTET STRING\n"
- title: '}'
  contents:
  - '}

    '
- title: --
  contents:
  - '--

    '
- title: -- S/MIME CAPS for algorithms in this document
  contents:
  - '-- S/MIME CAPS for algorithms in this document

    '
- title: --
  contents:
  - '--

    '
- title: SMimeCAPS SMIME-CAPS ::= {
  contents:
  - 'SMimeCAPS SMIME-CAPS ::= {

    '
- title: --  mda-sha1.&smimeCaps                                   |
  contents:
  - '--  mda-sha1.&smimeCaps                                   |

    '
- title: --  mda-sha224.&smimeCaps                                 |
  contents:
  - '--  mda-sha224.&smimeCaps                                 |

    '
- title: --  mda-sha256.&smimeCaps                                 |
  contents:
  - '--  mda-sha256.&smimeCaps                                 |

    '
- title: --  mda-sha384.&smimeCaps                                 |
  contents:
  - '--  mda-sha384.&smimeCaps                                 |

    '
- title: --  mda-sha512.&smimeCaps                                 |
  contents:
  - '--  mda-sha512.&smimeCaps                                 |

    '
- title: --  sa-ecdsaWithSHA1.&smimeCaps                           |
  contents:
  - '--  sa-ecdsaWithSHA1.&smimeCaps                           |

    '
- title: --  sa-ecdsaWithSHA224.&smimeCaps                         |
  contents:
  - '--  sa-ecdsaWithSHA224.&smimeCaps                         |

    '
- title: --  sa-ecdsaWithSHA256.&smimeCaps                         |
  contents:
  - '--  sa-ecdsaWithSHA256.&smimeCaps                         |

    '
- title: --  sa-ecdsaWithSHA384.&smimeCaps                         |
  contents:
  - '--  sa-ecdsaWithSHA384.&smimeCaps                         |

    '
- title: --  sa-ecdsaWithSHA512.&smimeCaps                         |
  contents:
  - "--  sa-ecdsaWithSHA512.&smimeCaps                         |\n  kaa-dhSinglePass-stdDH-sha1kdf-scheme.&smimeCaps\
    \        |\n  kaa-dhSinglePass-stdDH-sha224kdf-scheme.&smimeCaps      |\n  kaa-dhSinglePass-stdDH-sha256kdf-scheme.&smimeCaps\
    \      |\n  kaa-dhSinglePass-stdDH-sha384kdf-scheme.&smimeCaps      |\n  kaa-dhSinglePass-stdDH-sha512kdf-scheme.&smimeCaps\
    \      |\n  kaa-dhSinglePass-cofactorDH-sha1kdf-scheme.&smimeCaps   |\n  kaa-dhSinglePass-cofactorDH-sha224kdf-scheme.&smimeCaps\
    \ |\n  kaa-dhSinglePass-cofactorDH-sha256kdf-scheme.&smimeCaps |\n  kaa-dhSinglePass-cofactorDH-sha384kdf-scheme.&smimeCaps\
    \ |\n  kaa-dhSinglePass-cofactorDH-sha512kdf-scheme.&smimeCaps |\n  kaa-mqvSinglePass-sha1kdf-scheme.&smimeCaps\
    \             |\n  kaa-mqvSinglePass-sha224kdf-scheme.&smimeCaps           |\n\
    \  kaa-mqvSinglePass-sha256kdf-scheme.&smimeCaps           |\n  kaa-mqvSinglePass-sha384kdf-scheme.&smimeCaps\
    \           |\n  kaa-mqvSinglePass-sha512kdf-scheme.&smimeCaps           |\n"
- title: --  kwa-3des.&smimeCaps                                   |
  contents:
  - '--  kwa-3des.&smimeCaps                                   |

    '
- title: --  kwa-aes128.&smimeCaps                                 |
  contents:
  - '--  kwa-aes128.&smimeCaps                                 |

    '
- title: --  kwa-aes192.&smimeCaps                                 |
  contents:
  - '--  kwa-aes192.&smimeCaps                                 |

    '
- title: --  kwa-aes256.&smimeCaps                                 |
  contents:
  - '--  kwa-aes256.&smimeCaps                                 |

    '
- title: --  cea-3DES-cbc.&smimeCaps                               |
  contents:
  - '--  cea-3DES-cbc.&smimeCaps                               |

    '
- title: --  cea-aes128-cbc.&smimeCaps                             |
  contents:
  - '--  cea-aes128-cbc.&smimeCaps                             |

    '
- title: --  cea-aes192-cbc.&smimeCaps                             |
  contents:
  - '--  cea-aes192-cbc.&smimeCaps                             |

    '
- title: --  cea-aes256-cbc.&smimeCaps                             |
  contents:
  - '--  cea-aes256-cbc.&smimeCaps                             |

    '
- title: --  cea-aes128-ccm.&smimeCaps                             |
  contents:
  - '--  cea-aes128-ccm.&smimeCaps                             |

    '
- title: --  cea-aes192-ccm.&smimeCaps                             |
  contents:
  - '--  cea-aes192-ccm.&smimeCaps                             |

    '
- title: --  cea-aes256-ccm.&smimeCaps                             |
  contents:
  - '--  cea-aes256-ccm.&smimeCaps                             |

    '
- title: --  cea-aes128-gcm.&smimeCaps                             |
  contents:
  - '--  cea-aes128-gcm.&smimeCaps                             |

    '
- title: --  cea-aes192-gcm.&smimeCaps                             |
  contents:
  - '--  cea-aes192-gcm.&smimeCaps                             |

    '
- title: --  cea-aes256-gcm.&smimeCaps                             |
  contents:
  - '--  cea-aes256-gcm.&smimeCaps                             |

    '
- title: --  maca-hMAC-SHA1.&smimeCaps                             |
  contents:
  - "--  maca-hMAC-SHA1.&smimeCaps                             |\n  maca-hMAC-SHA224.&smimeCaps\
    \                             |\n  maca-hMAC-SHA256.&smimeCaps               \
    \              |\n  maca-hMAC-SHA384.&smimeCaps                             |\n\
    \  maca-hMAC-SHA512.&smimeCaps,\n  ...\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme SMIME-CAPS ::= {
  contents:
  - "cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-stdDH-sha1kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme SMIME-CAPS ::= {
  contents:
  - "cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-stdDH-sha224kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme SMIME-CAPS ::= {
  contents:
  - "cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-stdDH-sha256kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme SMIME-CAPS ::= {
  contents:
  - "cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme SMIME-CAPS ::= {\n   TYPE KeyWrapAlgorithm\n\
    \   IDENTIFIED BY dhSinglePass-stdDH-sha384kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme SMIME-CAPS ::= {
  contents:
  - "cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-stdDH-sha512kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-cofactorDH-sha1kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-cofactorDH-sha224kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-cofactorDH-sha256kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-cofactorDH-sha384kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY dhSinglePass-cofactorDH-sha512kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-mqvSinglePass-sha1kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-mqvSinglePass-sha1kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY mqvSinglePass-sha1kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-mqvSinglePass-sha224kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-mqvSinglePass-sha224kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY mqvSinglePass-sha224kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-mqvSinglePass-sha256kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-mqvSinglePass-sha256kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY mqvSinglePass-sha256kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-mqvSinglePass-sha384kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-mqvSinglePass-sha384kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY mqvSinglePass-sha384kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-kaa-mqvSinglePass-sha512kdf-scheme SMIME-CAPS ::={
  contents:
  - "cap-kaa-mqvSinglePass-sha512kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n\
    \  IDENTIFIED BY mqvSinglePass-sha512kdf-scheme\n"
- title: '}'
  contents:
  - '}

    '
- title: cap-hMAC-SHA224 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA224 }
  contents:
  - 'cap-hMAC-SHA224 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA224 }

    '
- title: cap-hMAC-SHA256 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA256 }
  contents:
  - 'cap-hMAC-SHA256 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA256 }

    '
- title: cap-hMAC-SHA384 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA384 }
  contents:
  - 'cap-hMAC-SHA384 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA384 }

    '
- title: cap-hMAC-SHA512 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA512 }
  contents:
  - 'cap-hMAC-SHA512 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA512 }

    '
- title: END
  contents:
  - 'END

    '
- title: Appendix B.  Changes since RFC 3278
  contents:
  - "Appendix B.  Changes since RFC 3278\n   The following summarizes the changes:\n\
    \   - Abstract: The basis of the document was changed to refer to NIST\n     FIPS\
    \ 186-3 and SP800-56A.  However, to maintain backwards\n     compatibility the\
    \ Key Derivation Function from ANSI/SEC1 is\n     retained.\n   - Section 1: A\
    \ bullet was added to address AuthEnvelopedData.\n   - Section 2.1: A sentence\
    \ was added to indicate FIPS180-3 is used\n     with ECDSA.  Replaced reference\
    \ to ANSI X9.62 with FIPS186-3.\n   - Section 2.1.1: The permitted digest algorithms\
    \ were expanded from\n     SHA-1 to SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512.\n\
    \   - Section 2.1.2 and 2.1.3: The bullet addressing integer \"e\" was\n     deleted.\n\
    \   - Section 3: Added explanation of why static-static ECDH is not\n     included.\n\
    \   - Section 3.1: The reference for DH was changed from RFC 3852 to RFC\n   \
    \  3370.  Provided text to indicate fields of EnvelopedData are as in\n     CMS.\n\
    \   - Section 3.1.1: The text was updated to include description of all\n    \
    \ KeyAgreeRecipientInfo fields.  Parameters for id-ecPublicKey field\n     changed\
    \ from NULL to absent or ECParameter.  Additional information\n     about ukm\
    \ was added.\n   - Section 3.2: The sentence describing the advantages of 1-Pass\
    \ ECMQV\n     was rewritten.\n   - Section 3.2.1: The text was updated to include\
    \ description of all\n     fields.  Parameters for id-ecPublicKey field changed\
    \ from NULL to\n     absent or ECParameters.\n   - Sections 3.2.2 and 4.1.2: The\
    \ re-use of ephemeral keys paragraph\n     was reworded.\n   - Section 4.1:  The\
    \ sentences describing the advantages of 1-Pass\n     ECMQV was moved to Section\
    \ 4.\n   - Section 4.1.2: The note about the attack was moved to Section 4.\n\
    \   - Section 4.2: This section was added to address AuthEnvelopedData\n     with\
    \ ECMQV.\n   - Section 5: This section was moved to Section 8.  The 1st paragraph\n\
    \     was modified to recommend both SignedData and EnvelopedData.  The\n    \
    \ requirements were updated for hash algorithms and recommendations\n     for\
    \ matching curves and hash algorithms.  Also, the requirements\n     were expanded\
    \ to indicate which ECDH and ECMQV variants, key wrap\n     algorithms, and content\
    \ encryption algorithms are required for each\n     of the content types used\
    \ in this document.  The permitted digest\n     algorithms used in KDFs were expanded\
    \ from SHA-1 to SHA-1, SHA-224,\n     SHA-256, SHA-384, and SHA-512.\n   - Section\
    \ 6 (formerly 7): This section was updated to allow for\n     SMIMECapabilities\
    \ to be present in certificates.  The S/MIME\n     capabilities for ECDSA with\
    \ SHA-224, SHA-256, SHA-384, and SHA-512\n     were added to the list of S/MIME\
    \ Capabilities.  Also, updated to\n     include S/MIME capabilities for ECDH and\
    \ ECMQV using the SHA-224,\n     SHA-256, SHA-384, and SHA-512 algorithms as the\
    \ KDF.\n   - Section 7.1 (formerly 8.1): Added sub-sections for digest,\n    \
    \ signature, originator public key, key agreement, content\n     encryption, key\
    \ wrap, and message authentication code algorithms.\n     Pointed to algorithms\
    \ and parameters in appropriate documents for:\n     SHA-224, SHA-256, SHA-384,\
    \ and SHA-512 as well as SHA-224, SHA-256,\n     SHA-384, and SHA-512 with ECDSA.\
    \  Also, added algorithm identifiers\n     for ECDH std, ECDH cofactor, and ECMQV\
    \ with SHA-224, SHA-256,\n     SHA-384, and SHA-512 algorithms as the KDF.  Changed\
    \ id-ecPublicKey\n     parameters to be absent, NULL, or ECParameters, and if\
    \ present the\n     originator's ECParameters must match the recipient's ECParameters.\n\
    \   - Section 7.2 (formerly 8.2): Updated to include AuthEnvelopedData.\n    \
    \ Also, added text to address support requirement for compressed,\n     uncompressed,\
    \ and hybrid keys; changed pointers from ANSI X9.61 to\n     PKIX (where ECDSA-Sig-Value\
    \ is imported); changed pointers from\n     SECG to NIST specs; and updated example\
    \ of suppPubInfo to be\n     AES-256.  keyInfo's parameters changed from NULL\
    \ to any associated\n     parameters (AES wraps have absent parameters).\n   -\
    \ Section 9: Replaced text, which was a summary paragraph, with an\n     updated\
    \ security considerations section.  Paragraph referring to\n     definitions of\
    \ SHA-224, SHA-256, SHA-384, and SHA-512 is deleted.\n   - Updated references.\n\
    \   - Added ASN.1 modules.\n   - Updated acknowledgements section.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The methods described in this document are based on work\
    \ done by the\n   ANSI X9F1 working group.  The authors wish to extend their thanks\
    \ to\n   ANSI X9F1 for their assistance.  The authors also wish to thank Peter\n\
    \   de Rooij for his patient assistance.  The technical comments of\n   Francois\
    \ Rousseau were valuable contributions.\n   Many thanks go out to the other authors\
    \ of RFC 3278: Simon Blake-\n   Wilson and Paul Lambert.  Without RFC 3278, this\
    \ version wouldn't\n   exist.\n   The authors also wish to thank Alfred Hoenes,\
    \ Jonathan Herzog, Paul\n   Hoffman, Russ Housley, and Jim Schaad for their valuable\
    \ input.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite\
    \ 106\n   Fairfax, VA 22031\n   USA\n   EMail: turners@ieca.com\n   Daniel R.\
    \ L. Brown\n   Certicom Corp\n   5520 Explorer Drive #400\n   Mississauga, ON\
    \ L4W 5L1\n   Canada\n   EMail: dbrown@certicom.com\n"
