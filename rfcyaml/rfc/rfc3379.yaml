- title: __initial_text__
  contents:
  - "        Delegated Path Validation and Delegated Path Discovery\n            \
    \             Protocol Requirements\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the requirements for Delegated Path\n  \
    \ Validation (DPV) and Delegated Path Discovery (DPD) for Public Key\n   Certificates.\
    \ It also specifies the requirements for DPV and DPD\n   policy management.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document specifies the requirements for Delegated Path\n\
    \   Validation (DPV) and Delegated Path Discovery (DPD) for Public Key\n   Certificates,\
    \ using two main request/response pairs.\n   Delegated processing provides two\
    \ primary services: DPV and DPD.\n   Some clients require a server to perform\
    \ certification path\n   validation and have no need for data acquisition, while\
    \ some other\n   clients require only path discovery in support of local path\n\
    \   validation.\n   The DPV request/response pair, can be used to fully delegate\
    \ path\n   validation processing to an DPV server, according to a set of rules,\n\
    \   called a validation policy.\n   The DPD request/response pair can be used\
    \ to obtain from a DPD server\n   all the information needed (e.g., the end-entity\
    \ certificate, the CA\n   certificates, full CRLs, delta-CRLs, OCSP responses)\
    \ to locally\n   validate a certificate.  The DPD server uses a set of rules,\
    \ called a\n   path discovery policy, to determine which information to return.\n\
    \   A third request/response pair allows clients to obtain references for\n  \
    \ the policies supported by a DPV or DPD server.\n"
- title: 1.1. Terminology
  contents:
  - "1.1. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document (in uppercase, as shown) are to be interpreted\
    \ as described\n   in [RFC2119].\n"
- title: 2. Rationale and Benefits for DPV (Delegated Path Validation)
  contents:
  - "2. Rationale and Benefits for DPV (Delegated Path Validation)\n   DPV allows\
    \ a server to perform a real time certificate validation for\n   a validation\
    \ time T, where T may be the current time or a time in the\n   recent past.\n\
    \   In order to validate a certificate, a chain of multiple certificates,\n  \
    \ called a certification path, may be needed, comprising a certificate\n   of\
    \ the public key owner (the end entity) signed by one CA, and zero\n   or more\
    \ additional certificates of CAs signed by other CAs.\n   Offloading path validation\
    \ to a server may be required by a client\n   that lacks the processing, and/or\
    \ communication capabilities to fetch\n   the necessary certificates and revocation\
    \ information, perform\n   certification path construction, and perform local\
    \ path validation.\n   In constrained execution environments, such as telephones\
    \ and PDAs,\n   memory and processing limitations may preclude local implementation\n\
    \   of complete, PKIX-compliant certification path validation [PKIX-1].\n   In\
    \ applications where minimum latency is critical, delegating\n   validation to\
    \ a trusted server can offer significant advantages. The\n   time required to\
    \ send the target certificate to the validation\n   server, receive the response,\
    \ and authenticate the response, can be\n   considerably less than the time required\
    \ for the client to perform\n   certification path discovery and validation. \
    \ Even if a certification\n   path were readily available to the client, the processing\
    \ time\n   associated with signature verification for each certificate in the\n\
    \   path might (especially when validating very long paths or using a\n   limited\
    \ processor) be greater than the delay associated with use of a\n   validation\
    \ server.\n   Another motivation for offloading path validation is that it allows\n\
    \   validation against management-defined validation policies in a\n   consistent\
    \ fashion across an enterprise.  Clients that are able to do\n   their own path\
    \ validation may rely on a trusted server to do path\n   validation if centralized\
    \ management of validation policies is\n   needed, or the clients rely on a trusted\
    \ server to maintain\n   centralized records of such activities.\n   When a client\
    \ uses this service, it inherently trusts the server as\n   much as it would its\
    \ own path validation software (if it contained\n   such software).  Clients can\
    \ direct the server to perform path\n   validation in accordance with a particular\
    \ validation policy.\n"
- title: 3. Rationale and Benefits for DPD (Delegated Path Discovery)
  contents:
  - "3. Rationale and Benefits for DPD (Delegated Path Discovery)\n   DPD is valuable\
    \ for clients that do much of the PKI processing\n   themselves and simply want\
    \ a server to collect information for them.\n   The server is trusted to return\
    \ the most current information that is\n   available to it (which may not be the\
    \ most current information that\n   has been issued).  The client will ultimately\
    \ perform certification\n   path validation.\n   A client that performs path validation\
    \ for itself may get benefit in\n   several ways from using a server to acquire\
    \ certificates, CRLs, and\n   OCSP responses [OCSP] as inputs to the validation\
    \ process.  In this\n   context, the client is relying on the server to interact\
    \ with\n   repositories to acquire the data that the client would otherwise have\n\
    \   to acquire using LDAP, HTTP, FTP [LDAP, FTP&HTTP] or another\n   repository\
    \ access protocol.  Since these data items are digitally\n   signed, the client\
    \ need not trust the server any more than the client\n   would trust the repositories.\n\
    \   DPD provides several benefits.  For example, a single query to a\n   server\
    \ can replace multiple repository queries, and caching by the\n   server can reduce\
    \ latency.  Another benefit to the client system is\n   that it need not incorporate\
    \ a diverse set of software to interact\n   with various forms of repositories,\
    \ perhaps via different protocols,\n   nor to perform the graph processing necessary\
    \ to discover\n   certification paths, separate from making the queries to acquire\
    \ path\n   validation data.\n"
- title: 4. Delegated Path Validation Protocol Requirements
  contents:
  - '4. Delegated Path Validation Protocol Requirements

    '
- title: 4.1. Basic Protocol
  contents:
  - "4.1. Basic Protocol\n   The Delegated Path Validation (DPV) protocol allows a\
    \ server to\n   validate one or more public key certificates on behalf of a client\n\
    \   according to a validation policy.\n   If the DPV server does not support the\
    \ client requested validation\n   policy, then the DPV server MUST return an error.\n\
    \   If the DPV request does not specify a validation policy, the server\n   response\
    \ MUST indicate the validation policy that was used.\n   Policy definitions can\
    \ be quite long and complex, and some policies\n   may allow for the setting of\
    \ a few parameters (such as root self-\n   signed certificates).  The protocol\
    \ MUST allow the client to include\n   these policy dependent parameters in the\
    \ DPV request; however, it is\n   expected that most clients will simply reference\
    \ a validation policy\n   for a given application or accept the DPV server's default\
    \ validation\n   policy.\n   The client can request that the server determines\
    \ the certificate\n   validity at a time other than the current time.  The DPV\
    \ server MUST\n   obtain revocation status information for the validation time\
    \ in the\n   client request.\n   In order to obtain the revocation status information\
    \ of any\n   certificate from the certification path, the DPV server might use,\
    \ in\n   accordance with the validation policy, different sources of\n   revocation\
    \ information.  For example, a combination of OCSP\n   responses, CRLs, and delta\
    \ CRLs could be used.  Alternatively, a\n   response from another DPV server could\
    \ be used.\n   If the revocation status information for the requested validation\n\
    \   time is unavailable, then the DPV server MUST return a status\n   indicating\
    \ that the certificate is invalid.  Additional information\n   about the reason\
    \ for invalidity MAY also be provided.\n   The certificate to be validated MUST\
    \ either be directly provided in\n   the request or unambiguously referenced,\
    \ such as the CA distinguished\n   name, certificate serial number, and the hash\
    \ of the certificate,\n   like ESSCertID as defined in [ESS] or OtherSigningCertificate\
    \ as\n   defined in [ES-F].\n   The DPV client MUST be able to provide to the\
    \ validation server,\n   associated with each certificate to be validated, useful\n\
    \   certificates, as well as useful revocation information.  Revocation\n   information\
    \ includes OCSP responses, CRLs, and delta CRLs.  As an\n   example, an S/MIME\
    \ message might include such information, and the\n   client can simply copy that\
    \ information into the DPV request.\n   The DPV server MUST have the certificate\
    \ to be validated.  When the\n   certificate is not provided in the request, the\
    \ server MUST obtain\n   the certificate and then verify that the certificate\
    \ is indeed the\n   one being unambiguous referenced by the client.  The DPV server\
    \ MUST\n   include either the certificate or an unambiguous reference to the\n\
    \   certificate (in case of a CA key compromise) in the DPV response.\n   The\
    \ DPV response MUST indicate one of the following status\n   alternatives:\n \
    \  1) the certificate is valid according to the validation policy.\n   2) the\
    \ certificate is not valid according to the validation policy.\n   3) the validity\
    \ of the certificate is unknown according to the\n      validation policy.\n \
    \  4) the validity could not be determined due to an error.\n   When the certificate\
    \ is not valid according to the validation policy,\n   then the reason MUST also\
    \ be indicated.  Invalidity reasons include:\n   a) the DPV server cannot determine\
    \ the validity of the certificate\n      because a certification path cannot be\
    \ constructed.\n   b) the DPV server successfully constructed a certification\
    \ path, but\n      it was not valid according to the validation algorithm in\n\
    \      [PKIX-1].\n   c) the certificate is not valid at this time.  If another\
    \ request\n      could be made later on, the certificate could possibly be\n \
    \     determined as valid.  This condition may occur before a\n      certificate\
    \ validity period has begun or while a certificate is\n      suspended.\n   The\
    \ protocol MUST prevent replay attacks, and the replay prevention\n   mechanism\
    \ employed by the protocol MUST NOT rely on synchronized\n   clocks.\n   The DPV\
    \ request MUST allow the client to request that the server\n   include in its\
    \ response additional information which will allow\n   relying parties not trusting\
    \ the DPV server to be confident that the\n   certificate validation has correctly\
    \ been performed.  Such\n   information may (not necessarily exclusively) consist\
    \ of a\n   certification path, revocation status information from authorized CRL\n\
    \   issuers or authorized OCSP responders, revocation status information\n   from\
    \ CRL issuers or OCSP responders trusted under the validation\n   policy, time-stamp\
    \ tokens from TSAs responders trusted under the\n   validation policy, or a DPV\
    \ response from a DPV server that is\n   trusted under the validation policy.\
    \  When the certificate is valid\n   according to the validation policy, the server\
    \ MUST, upon request,\n   include that information in the response.  However,\
    \ the server MAY\n   omit that information when the certificate is invalid or\
    \ when it\n   cannot determine the validity.\n   The DPV server MUST be able,\
    \ upon request, copy a text field provided\n   by the client into the DPV response.\
    \  As an example, this field may\n   relate to the nature or reason for the DPV\
    \ query.\n   The DPV response MUST be bound to the DPV request so that the client\n\
    \   can be sure that all the parameters from the request have been taken\n   into\
    \ consideration by the DPV server to build the response.  This can\n   be accomplished\
    \ by including a one-way hash of the request in the\n   response.\n   In some\
    \ environments it may be necessary to present only a DPV\n   response to another\
    \ relying party without the corresponding request.\n   In this case the response\
    \ MUST be self contained.  This can be\n   accomplished by repeating only the\
    \ important components from the\n   request in the response.\n   For the client\
    \ to be confident that the certificate validation was\n   handled by the expected\
    \ DPV server, the DPV response MUST be\n   authenticated, unless an error is reported\
    \ (such as a badly formatted\n   request or unknown validation policy).\n   For\
    \ the client to be able prove to a third party that trusts the same\n   DPV server\
    \ that the certificate validation was handled correctly, the\n   DPV response\
    \ MUST be digitally signed, unless an error is reported.\n   The DPV server's\
    \ certificate MUST authenticate the DPV server.\n   The DPV server MAY require\
    \ client authentication, therefore, the DPV\n   request MUST be able to be authenticated.\n\
    \   When the DPV request is authenticated, the client SHOULD be able to\n   include\
    \ a client identifier in the request for the DPV server to copy\n   into the response.\
    \  Mechanisms for matching this identifier with the\n   authenticated identity\
    \ depends on local DPV server conditions and/or\n   the validation policy.  The\
    \ DPV server MAY choose to blindly copy the\n   identifier, omit the identifier,\
    \ or return an error response.\n   There are no specific confidentiality requirements\
    \ within this\n   application layer protocol.  However, when confidentiality is\
    \ needed,\n   it can be achieved with a lower-layer security protocol.\n"
- title: 4.2. Relaying, Re-direction and Multicasting
  contents:
  - "4.2. Relaying, Re-direction and Multicasting\n   In some network environments,\
    \ especially ones that include firewalls,\n   a DPV server might not be able to\
    \ obtain all of the information that\n   it needs to process a request.  However,\
    \ the DPV server might be\n   configured to use the services of one or more other\
    \ DPV servers to\n   fulfill all requests.  In such cases, the client is unaware\
    \ that the\n   queried DPV server is using the services of other DPV servers,\
    \ and\n   the client-queried DPV server acts as a DPV client to another DPV\n\
    \   server.  Unlike the original client, the DPV server is expected to\n   have\
    \ moderate computing and memory resources, enabling the use of\n   relay, re-direct\
    \ or multicasting mechanisms.  The requirements in\n   this section support DPV\
    \ server-to-DPV server exchanges without\n   imposing them on DPV client-to-DPV\
    \ server exchanges.\n   Protocols designed to satisfy these requirements MAY include\
    \ optional\n   fields and/or extensions to support relaying, re-direction or\n\
    \   multicasting.  However, DPV clients are not expected to support\n   relay,\
    \ re-direct or multicast.  If the protocol supports such\n   features, the protocol\
    \ MUST include provisions for DPV clients and\n   DPV servers that do not support\
    \ such features, allowing them to\n   conform to the basic set of requirements.\n\
    \   - When a server supports a relay mechanism, a mechanism to detect\n     loops\
    \ or repetition MUST be provided.\n   - When a protocol provides the capability\
    \ for a DPV server to re-\n     direct a request to another DPV server (that is,\
    \ the protocol\n     chooses to provide a referral mechanism), a mechanism to\
    \ provide\n     information to be used for the re-direction SHOULD be supported.\n\
    \     If such re-direction information is sent back to clients, then the\n   \
    \  protocol MUST allow conforming clients to ignore it.\n   - Optional parameters\
    \ in the protocol request and/or response MAY be\n     provide support for relaying,\
    \ re-direction or multicasting.  DPV\n     clients that ignore any such optional\
    \ parameters MUST be able to\n     use the DPV service.  DPV servers that ignore\
    \ any such optional\n     parameters MUST still be able to offer the DPV service,\
    \ although\n     they might not be able to overcome the limitations imposed by\
    \ the\n     network topology.  In this way, protocol implementers do not need\n\
    \     to understand the syntax or semantics of any such optional\n     parameters.\n"
- title: 5. Delegated Path Discovery Protocol Requirements
  contents:
  - "5. Delegated Path Discovery Protocol Requirements\n   The Delegated Path Discovery\
    \ (DPD) protocol allows the client to use\n   a single request to collect at one\
    \ time from a single server the data\n   elements available at the current time\
    \ that might be collected using\n   different protocols (such as LDAP, HTTP, FTP,\
    \ or OCSP) or by querying\n   multiple servers, to locally validate a public key\
    \ certificate\n   according to a single path discovery policy.  The returned\n\
    \   information can be used to locally validate one or more certificates\n   for\
    \ the current time.\n   Clients MUST be able to specify whether they want, in\
    \ addition to the\n   certification path, the revocation information associated\
    \ with the\n   path, for the end-entity certificate, for the CA certificates,\
    \ or for\n   both.\n   If the DPD server does not support the client requested\
    \ path\n   discovery policy, the DPD server MUST return an error.  Some forms\
    \ of\n   path discovery policy can be simple.  In that case it is acceptable\n\
    \   to pass the parameters from the path discovery policy with each\n   individual\
    \ request.  For example, the client might provide a set of\n   trust anchors and\
    \ separate revocation status conditions for the end-\n   entity certificate and\
    \ for the other certificates.  The DPD request\n   MUST allow more elaborated\
    \ path discovery policies to be referenced.\n   However, it is expected that most\
    \ of the time clients will only be\n   aware of the referenced path discovery\
    \ policy for a given\n   application.\n   The DPD server response includes zero,\
    \ one, or several certification\n   paths.  Each path consists of a sequence of\
    \ certificates, starting\n   with the certificate to be validated and ending with\
    \ a trust anchor.\n   If the trust anchor is a self-signed certificate, that self-signed\n\
    \   certificate MUST NOT be included.  In addition, if requested, the\n   revocation\
    \ information associated with each certificate in the path\n   MUST also be returned.\n\
    \   By default, the DPD server MUST return a single certification path\n   for\
    \ each end-entity certificate in the DPD request.  However, the\n   returned path\
    \ may need to match some additional local criteria known\n   only to the client.\
    \  For example, the client might require the\n   presence of a particular certificate\
    \ extension or a particular name\n   form.  Therefore, the DPD client MUST have\
    \ a means of obtaining more\n   than one certification path for each end-entity\
    \ certificate in the\n   DPD request.  At the same time, the mechanism for obtaining\n\
    \   additional certification paths MUST NOT impose protocol state on the\n   DPD\
    \ server.  Avoiding the maintenance of state information associated\n   with previous\
    \ requests minimizes potential denial of service attacks\n   and other problems\
    \ associated with server crashes.\n   Path discovery MUST be performed according\
    \ to the path discovery\n   policy.  The DPD response MUST indicate one of the\
    \ following status\n   alternatives:\n   1) one or more certification paths was\
    \ found according to the path\n      discovery policy, with all of the requested\
    \ revocation information\n      present.\n   2) one or more certification paths\
    \ was found according to the path\n      discovery policy, with a subset of the\
    \ requested revocation\n      information present.\n   3) one or more certification\
    \ paths was found according to the path\n      discovery policy, with none of\
    \ the requested revocation\n      information present.\n   4) no certification\
    \ path was found according to the path discovery\n      policy.\n   5) path construction\
    \ could not be performed due to an error.\n   When no errors are detected, the\
    \ information that is returned\n   consists of one or more certification paths\
    \ and, if requested, its\n   associated revocation status information for each\
    \ certificate in the\n   path.\n   For the client to be confident that all of\
    \ the elements from the\n   response originate from the expected DPD server, an\
    \ authenticated\n   response MAY be required.  For example, the server might sign\
    \ the\n   response or data authentication might also be achieved using a\n   lower-layer\
    \ security protocol.\n   The DPD server MAY require client authentication, allowing\
    \ the DPD\n   request MUST to be authenticated.\n   There are no specific confidentiality\
    \ requirement within the\n   application layer protocol.  However, when confidentiality\
    \ is needed,\n   it can be achieved with a lower-layer security protocol.\n"
- title: 6. DPV and DPD Policy Query
  contents:
  - "6. DPV and DPD Policy Query\n   Using a separate request/response pair, the DPV\
    \ or DPD client MUST be\n   able to obtain references for the default policy or\
    \ for all of the\n   policies supported by the server.  The response can include\n\
    \   references to previously defined policies or to a priori known\n   policies.\n"
- title: 7. Validation Policy
  contents:
  - "7. Validation Policy\n   A validation policy is a set of rules against which\
    \ the validation of\n   the certificate is performed.\n   A validation policy\
    \ MAY include several trust anchors.  A trust\n   anchor is defined as one public\
    \ key, a CA name, and a validity time\n   interval; a trust anchor optionally\
    \ includes additional constraints.\n   The use of a self-signed certificate is\
    \ one way to specify the public\n   key to be used, the issuer name, and the validity\
    \ period of the\n   public key.\n   Additional constraints for each trust anchor\
    \ MAY be defined.  These\n   constraints might include a set of certification\
    \ policy constraints\n   or a set of naming constraints.  These constraints MAY\
    \ also be\n   included in self-signed certificates.\n   Additional conditions\
    \ that apply to the certificates in the path MAY\n   also be specified in the\
    \ validation policy.  For example, specific\n   values could be provided for the\
    \ inputs to the certification path\n   validation algorithm in [PKIX-1], such\
    \ as user-initial-policy-set,\n   initial-policy-mapping-inhibit, initial-explicit-policy,\
    \ or initial-\n   any-policy-inhibit.\n   Additional conditions that apply to\
    \ the end-entity certificate MAY\n   also be specified in the validation policy.\
    \  For example, a specific\n   name form might be required.\n   In order to succeed,\
    \ one valid certification path (none of the\n   certificates in the path are expired\
    \ or revoked) MUST be found\n   between an end-entity certificate and a trust\
    \ anchor and all\n   constraints that apply to the certification path MUST be\
    \ verified.\n"
- title: 7.1. Components for a Validation Policy
  contents:
  - "7.1. Components for a Validation Policy\n   A validation policy is built from\
    \ three components:\n   1. Certification path requirements,\n   2. Revocation\
    \ requirements, and\n   3. End-entity certificate specific requirements.\n   Note:\
    \  [ES-P] defines ASN.1 data elements that may be useful while\n   defining the\
    \ components of a validation policy.\n"
- title: 7.2. Certificate Path Requirements
  contents:
  - "7.2. Certificate Path Requirements\n   The path requirements identify a sequence\
    \ of trust anchors used to\n   start certification path processing and initial\
    \ conditions for\n   certification path validation as defined in [PKIX-1].\n"
- title: 7.3. Revocation Requirements
  contents:
  - "7.3. Revocation Requirements\n   Revocation information might be obtained through\
    \ CRLs, delta CRLs or\n   OCSP responses.  Certificate revocation requirements\
    \ are specified in\n   terms of checks required on the end-entity certificate\
    \ and CA\n   certificates.\n   Revocation requirements for the end-entity certificate\
    \ may not be the\n   same as the requirements for the CA certificates.  For example,\
    \ an\n   OCSP response may be needed for the end-entity certificate while CRLs\n\
    \   may be sufficient for the CA certificates.\n   The validation policy MUST\
    \ specify the source of revocation\n   information:\n   - full CRLs (or full Authority\
    \ Revocation Lists) have to be\n     collected.\n   - OCSP responses, using [OCSP],\
    \ have to be collected.\n   - delta CRLs and the relevant associated full CRLs\
    \ (or full Authority\n     Revocation Lists) are to be collected.\n   - any available\
    \ revocation information has to be collected.\n   - no revocation information\
    \ need be collected.\n"
- title: 7.4. End-entity Certificate Specific Requirements
  contents:
  - "7.4. End-entity Certificate Specific Requirements\n   The validation policy might\
    \ require the end-entity certificate to\n   contain specific extensions with specific\
    \ types or values (it does\n   not matter whether they are critical or non-critical).\
    \  For example,\n   the validation policy might require an end-entity certificate\
    \ that\n   contains an electronic mail address (either in the rfc822 subject alt\n\
    \   name or in the emailAddress naming attribute in the subject name).\n"
- title: 8. Path Discovery Policy
  contents:
  - "8. Path Discovery Policy\n   A path discovery policy is a set of rules against\
    \ which the discovery\n   of a certification path is performed.  A path discovery\
    \ policy is a\n   subset of a validation policy.  A path discovery policy MAY\
    \ either be\n   a reference to a validation policy or contain only some major\n\
    \   elements from a validation policy, such as the trust anchors.\n   Since the\
    \ DPD client is \"PKI aware\", it can locally apply additional\n   selection criteria\
    \ to the certification paths returned by the server.\n   Thus, a simpler policy\
    \ can be defined and used for path discovery.\n"
- title: 8.1. Components for a Path Discovery Policy
  contents:
  - "8.1. Components for a Path Discovery Policy\n   The path discovery policy includes\
    \ certification path requirements,\n   revocation requirements, and end-entity\
    \ certificate specific\n   requirements.  These requirements are the same as those\
    \ specified in\n   sections 7.2, 7.3, and 7.4, respectively.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   A DPV client must trust a DPV server to provide\
    \ the correct answer.\n   However, this does not mean that all DPV clients will\
    \ trust the same\n   DPV servers.  While a positive answer might be sufficient\
    \ for one DPV\n   client, that same positive answer will not necessarily convince\n\
    \   another DPV client.\n   Other clients may trust their own DPV servers, or\
    \ they might perform\n   certification path validation themselves.  DPV clients\
    \ operating\n   under an organizational validation policy must ensure that each\
    \ of\n   the DPV servers they trust is operating under that organizational\n \
    \  validation policy.\n   When no policy reference is present in the DPV request,\
    \ the DPV\n   client ought to verify that the policy selected by the DPV server\
    \ is\n   appropriate.\n   The revocation status information is obtained for the\
    \ validation\n   time.  In case of a digital signature, it is not necessarily\n\
    \   identical to the time when the private key was used.  The validation\n   time\
    \ ought to be adjusted by the DPV client to compensate for:\n   1) time for the\
    \ end-entity to realize that its private key has been\n      or could possibly\
    \ be compromised, and/or\n   2) time for the end-entity to report the key compromise,\
    \ and/or\n   3) time for the revocation authority to process the revocation\n\
    \      request from the end-entity, and/or\n   4) time for the revocation authority\
    \ to update and distribute the\n      revocation status information.\n"
- title: 10. Acknowledgments
  contents:
  - "10. Acknowledgments\n   These requirements have been refined after some valuable\
    \ inputs from\n   Trevor Freeman, Paul Hoffman, Ambarish Malpani, Mike Myers,\
    \ Tim Polk,\n   and Peter Sylvester.\n"
- title: 11. References
  contents:
  - '11. References

    '
- title: 11.1. Normative References
  contents:
  - "11.1. Normative References\n   [PKIX-1]   Housley, R., Ford, W., Polk, W. and\
    \ D. Solo, \"Internet\n              X.509 Public Key Infrastructure Certificate\
    \ and CRL\n              Profile\", RFC 3280, April 2002.\n   [OCSP]     Myers,\
    \ M., Ankney, R., Malpani, A., Galperin, S. and C.\n              Adams, \"X.509\
    \ Internet Public Key Infrastructure Online\n              Certificate Status\
    \ Protocol - OCSP\", RFC 2560, June 1999.\n"
- title: 11.2. Informative References
  contents:
  - "11.2. Informative References\n   [ES-F]     Pinkas, D., Ross, J. and N. Pope,\
    \ \"Electronic Signature\n              Formats for long term electronic signatures\"\
    , RFC 3126,\n              September 2001.\n   [ES-P]     Pinkas, D., Ross, J.\
    \ and N. Pope, \"Electronic Signature\n              Policies\", RFC 3125, September\
    \ 2001.\n   [ESS]      Hoffman, P., \"Enhanced Security Services for S/MIME\"\
    , RFC\n              2634, June 1999.\n   [ISO-X509] ISO/IEC 9594-8/ITU-T Recommendation\
    \ X.509, \"Information\n              Technology - Open Systems Interconnection:\
    \ The Directory:\n              Authentication Framework,\" 1997 edition.\n  \
    \ [FTP&HTTP] Housley, R. and P. Hoffman, \"Internet X.509 Public Key\n       \
    \       Infrastructure. Operational Protocols: FTP and HTTP\", RFC\n         \
    \     2585, May 1999.\n   [LDAP]     Boeyen, S., Howes, T. and P. Richard, \"\
    Internet X.509\n              Public Key Infrastructure Operational Protocols\
    \ LDAPv2\",\n              RFC 2559, April 1999.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Denis Pinkas\n   Bull\n   Rue Jean-Jaures - BP 68\n\
    \   78340 Les Clayes-sous-Bois\n   FRANCE\n   EMail: Denis.Pinkas@bull.net\n \
    \  Russell Housley\n   RSA Laboratories\n   918 Spring Knoll Drive\n   Herndon,\
    \ VA 20170\n   USA\n   EMail: rhousley@rsasecurity.com\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
