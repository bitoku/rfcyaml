- contents:
  - ''
  - 'Network Working Group                    Marshall T. Rose, Dwight E. Cass

    '
  - 'Request for Comments: RFC 1006    Northrop Research and Technology Center

    '
  - "Obsoletes: RFC 983                                               May 1987\n                ISO
    Transport Service on top of the TCP\n                               Version: 3\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This memo specifies a standard for the Internet community.
    Hosts\n   on the Internet that choose to implement ISO transport services\n   on
    top of the TCP are expected to adopt and implement this\n   standard.  TCP port
    102 is reserved for hosts which implement this\n   standard.  Distribution of
    this memo is unlimited.\n   This memo specifies version 3 of the protocol and
    supersedes\n   [RFC983].  Changes between the protocol as described in Request
    for\n   Comments 983 and this memo are minor, but are unfortunately\n   incompatible.\n"
  title: Status of this Memo
- contents:
  - "1.  Introduction and Philosophy\n      The Internet community has a well-developed,
    mature set of\n      transport and internetwork protocols (TCP/IP), which are
    quite\n      successful in offering network and transport services to\n      end-users.
    The CCITT and the ISO have defined various session,\n      presentation, and application
    recommendations which have been\n      adopted by the international community
    and numerous vendors.\n      To the largest extent possible, it is desirable to
    offer these\n      higher level directly in the ARPA Internet, without disrupting\n
    \     existing facilities.  This permits users to develop expertise\n      with
    ISO and CCITT applications which previously were not\n      available in the ARPA
    Internet.  It also permits a more\n      graceful convergence and transition strategy
    from\n      TCP/IP-based networks to ISO-based networks in the\n      medium-and
    long-term.\n      There are two basic approaches which can be taken when \"porting\"\n
    \     an ISO or CCITT application to a TCP/IP environment.  One\n      approach
    is to port each individual application separately,\n      developing local protocols
    on top of the TCP.  Although this is\n      useful in the short-term (since special-purpose
    interfaces to the\n      TCP can be developed quickly), it lacks generality.\n
    \     A second approach is based on the observation that both the ARPA\n      Internet
    protocol suite and the ISO protocol suite are both\n      layered systems (though
    the former uses layering from a more\n      pragmatic perspective).  A key aspect
    of the layering principle\n      is that of layer-independence.  Although this
    section is\n      redundant for most readers, a slight bit of background material\n
    \     is necessary to introduce this concept.\n      Externally, a layer is defined
    by two definitions:\n         a service-offered definition, which describes the
    services\n         provided by the layer and the interfaces it provides to\n         access
    those services; and,\n         a service-required definitions, which describes
    the services\n         used by the layer and the interfaces it uses to access
    those\n         services.\n      Collectively, all of the entities in the network
    which co-operate\n      to provide the service are known as the service-provider.\n
    \     Individually, each of these entities is known as a service-peer.\n      Internally,
    a layer is defined by one definition:\n          a protocol definition, which
    describes the rules which each\n          service-peer uses when communicating
    with other service-peers.\n      Putting all this together, the service-provider
    uses the protocol\n      and services from the layer below to offer the its service
    to the\n      layer above.  Protocol verification, for instance, deals with\n
    \     proving that this in fact happens (and is also a fertile field\n      for
    many Ph.D. dissertations in computer science).\n      The concept of layer-independence
    quite simply is:\n          IF one preserves the services offered by the service-provider\n
    \         THEN the service-user is completely naive with respect to the\n          protocol
    which the service-peers use\n      For the purposes of this memo, we will use
    the layer-independence\n      to define a Transport Service Access Point (TSAP)
    which appears\n      to be identical to the services and interfaces offered by
    the\n      ISO/CCITT TSAP (as defined in [ISO8072]), but we will in fact\n      implement
    the ISO TP0 protocol on top of TCP/IP (as defined in\n      [RFC793,RFC791]),
    not on top of the the ISO/CCITT network\n      protocol.  Since the transport
    class 0 protocol is used over the\n      TCP/IP connection, it achieves identical
    functionality as\n      transport class 4.  Hence, ISO/CCITT higher level layers
    (all\n      session, presentation, and application entities) can operate\n      fully
    without knowledge of the fact that they are running on a\n      TCP/IP internetwork.\n"
  title: 1.  Introduction and Philosophy
- contents:
  - "2.  Motivation\n      In migrating from the use of TCP/IP to the ISO protocols,
    there\n      are several strategies that one might undertake.  This memo was\n
    \     written with one particular strategy in mind.\n      The particular migration
    strategy which this memo uses is based\n      on the notion of gatewaying between
    the TCP/IP and ISO protocol\n      suites at the transport layer.  There are two
    strong arguments\n      for this approach:\n      1.  Experience teaches us that
    it takes just as long to get good\n      implementations of the lower level protocols
    as it takes to get\n      implementations of the higher level ones.  In particular,
    it has\n      been observed that there is still a lot of work being done at the\n
    \     ISO network and transport layers.  As a result, implementations\n      of
    protocols above these layers are not being aggressively\n      pursued. Thus,
    something must be done \"now\" to provide a medium\n      in which the higher
    level protocols can be developed.  Since\n      TCP/IP is mature, and essentially
    provides identical\n      functionality, it is an ideal medium to support this
    development.\n      2.  Implementation of gateways at the IP and ISO IP layers
    are\n      probably not of general use in the long term.  In effect, this\n      would
    require each Internet host to support both TP4 and TCP.\n      As such, a better
    strategy is to implement a graceful migration\n      path from TCP/IP to ISO protocols
    for the ARPA Internet when the\n      ISO protocols have matured sufficiently.\n
    \     Both of these arguments indicate that gatewaying should occur at\n      or
    above the transport layer service access point.  Further, the\n      first argument
    suggests that the best approach is to perform the\n      gatewaying exactly AT
    the transport service access point to\n      maximize the number of ISO layers
    which can be developed.\n        NOTE:     This memo does not intend to act as
    a migration or\n                  intercept document.  It is intended ONLY to
    meet the\n                  needs discussed above.  However, it would not be\n
    \                 unexpected that the protocol described in this memo\n                  might
    form part of an overall transition plan.  The\n                  description of
    such a plan however is COMPLETELY\n                  beyond the scope of this
    memo.\n      Finally, in general, building gateways between other layers in the\n
    \     TCP/IP and ISO protocol suites is problematic, at best.\n      To summarize:
    the primary motivation for the standard described in\n      this memo is to facilitate
    the process of gaining experience with\n      higher-level ISO protocols (session,
    presentation, and\n      application). The stability and maturity of TCP/IP are
    ideal for\n      providing solid transport services independent of actual\n      implementation.\n"
  title: 2.  Motivation
- contents:
  - "3.  The Model\n      The [ISO8072] standard describes the ISO transport service\n
    \     definition, henceforth called TP.\n          ASIDE:    This memo references
    the ISO specifications rather\n                    than the CCITT recommendations.
    \ The differences\n                    between these parallel standards are quite
    small,\n                    and can be ignored, with respect to this memo,\n                    without
    loss of generality.  To provide the reader\n                    with the relationships:\n
    \                        Transport service    [ISO8072]       [X.214]\n                         Transport
    protocol   [ISO8073]       [X.224]\n                         Session protocol
    \    [ISO8327]       [X.225]\n      The ISO transport service definition describes
    the services\n      offered by the TS-provider (transport service) and the interfaces\n
    \     used to access those services.  This memo focuses on how the ARPA\n      Transmission
    Control Protocol (TCP) [RFC793] can be used to offer\n      the services and provide
    the interfaces.\n      +-----------+                                       +-----------+\n
    \     |  TS-user  |                                       |  TS-user  |\n      +-----------+
    \                                      +-----------+\n           |                                                     |\n
    \          | TSAP interface                       TSAP interface |\n           |
    \ [ISO8072]                                          |\n           |                                                     |\n
    \     +----------+   ISO Transport Services on the TCP     +----------+\n      |
    \ client  |-----------------------------------------|  server  |\n      +----------+
    \             (this memo)                +----------+\n           |                                                     |\n
    \          | TCP interface                         TCP interface |\n           |
    \ [RFC793]                                           |\n           |                                                     |\n
    \     For expository purposes, the following abbreviations are used:\n         TS-peer
    \     a process which implements the protocol described\n                      by
    this memo\n         TS-user      a process talking using the services of a TS-peer\n
    \        TS-provider  the black-box entity implementing the protocol\n                      described
    by this memo\n      For the purposes of this memo, which describes version 2 of
    the\n      TSAP protocol, all aspects of [ISO8072] are supported with one\n      exception:\n
    \         Quality of Service parameters\n      In the spirit of CCITT, this is
    left \"for further study\".  A\n      future version of the protocol will most
    likely support the QOS\n      parameters for TP by mapping these onto various
    TCP parameters.\n      The ISO standards do not specify the format of a session
    port\n      (termed a TSAP ID).  This memo mandates the use of the GOSIP\n      specification
    [GOSIP86] for the interpretation of this field.\n      (Please refer to Section
    5.2, entitled \"UPPER LAYERS ADDRESSING\".)\n      Finally, the ISO TSAP is fundamentally
    symmetric in behavior.\n      There is no underlying client/server model.  Instead
    of a server\n      listening on a well-known port, when a connection is established,\n
    \     the TS-provider generates an INDICATION event which, presumably\n      the
    TS-user catches and acts upon.  Although this might be\n      implemented by having
    a server \"listen\" by hanging on the\n      INDICATION event, from the perspective
    of the ISO TSAP, all TS-\n      users just sit around in the IDLE state until
    they either generate\n      a REQUEST or accept an INDICATION.\n"
  title: 3.  The Model
- contents:
  - "4.  The Primitives\n      The protocol assumes that the TCP[RFC793] offers the
    following\n      service primitives:\n                                    Events\n
    \        connected       - open succeeded (either ACTIVE or PASSIVE)\n         connect
    fails   - ACTIVE open failed\n         data ready      - data can be read from
    the connection\n         errored         - the connection has errored and is now
    closed\n         closed          - an orderly disconnection has started\n                                     Actions\n
    \        listen on port  - PASSIVE open on the given port\n         open port
    \      - ACTIVE open to the given port\n         read data       - data is read
    from the connection\n         send data       - data is sent on the connection\n
    \        close           - the connection is closed (pending data is\n                           sent)\n"
  - 'This memo describes how to use these services to emulate the following

    '
  - "service primitives, which are required by [ISO8073]:\n                                 Events\n
    \        N-CONNECT.INDICATION\n                          - An NS-user (responder)
    is notified that\n                            connection establishment is in progress\n
    \        N-CONNECT.CONFIRMATION\n                          - An NS-user (responder)
    is notified that\n                            the connection has been established\n
    \        N-DATA.INDICATION\n                          - An NS-user is notified
    that data can be\n                            read from the connection\n         N-DISCONNECT.INDICATION\n
    \                         - An NS-user is notified that the connection\n                            is
    closed\n                                Actions\n         N-CONNECT.REQUEST\n
    \                         - An NS-user (initiator) indicates that it\n                            wants
    to establish a connection\n         N-CONNECT.RESPONSE\n                          -
    An NS-user (responder) indicates that it\n                            will honor
    the request\n         N-DATA.REQUEST   - An NS-user sends data\n         N-DISCONNECT.REQUEST\n
    \                         - An NS-user indicates that the connection\n                            is
    to be closed\n      The protocol offers the following service primitives, as defined\n
    \     in [ISO8072], to the TS-user:\n                                    Events\n
    \        T-CONNECT.INDICATION\n                          - a TS-user (responder)
    is notified that\n                            connection establishment is in progress\n
    \        T-CONNECT.CONFIRMATION\n                          - a TS-user (initiator)
    is notified that the\n                            connection has been established\n
    \        T-DATA.INDICATION\n                          - a TS-user is notified
    that data can be read\n                            from the connection\n         T-EXPEDITED
    DATA.INDICATION\n                          - a TS-user is notified that \"expedited\"
    data\n                            can be read from the connection\n         T-DISCONNECT.INDICATION\n
    \                         - a TS-user is notified that the connection\n                            is
    closed\n                                Actions\n         T-CONNECT.REQUEST\n
    \                         - a TS-user (initiator) indicates that it\n                            wants
    to establish a connection\n         T-CONNECT.RESPONSE\n                          -
    a TS-user (responder) indicates that it\n                            will honor
    the request\n         T-DATA.REQUEST   - a TS-user sends data\n         T-EXPEDITED
    DATA.REQUEST\n                          - a TS-user sends \"expedited\" data\n
    \        T-DISCONNECT.REQUEST\n                          - a TS-user indicates
    that the connection\n                            is to be closed\n"
  title: 4.  The Primitives
- contents:
  - "5.  The Protocol\n      The protocol specified by this memo is identical to the
    protocol\n      for ISO transport class 0, with the following exceptions:\n            -
    for testing purposes, initial data may be exchanged\n              during connection
    establishment\n            - for testing purposes, an expedited data service is\n
    \             supported\n            - for performance reasons, a much larger
    TSDU size is\n              supported\n            - the network service used
    by the protocol is provided\n              by the TCP\n      The ISO transport
    protocol exchanges information between peers in\n      discrete units of information
    called transport protocol data units\n      (TPDUs).  The protocol defined in
    this memo encapsulates these\n      TPDUs in discrete units called TPKTs.  The
    structure of these\n      TPKTs and their relationship to TPDUs are discussed
    in the next\n      section.\n      PRIMITIVES\n         The mapping between the
    TCP service primitives and the service\n         primitives expected by transport
    class 0 are quite straight-\n         forward:\n                   network service
    \             TCP\n                   ---------------              ---\n                   CONNECTION
    ESTABLISHMENT\n                       N-CONNECT.REQUEST        open completes\n
    \                      N-CONNECT.INDICATION     listen (PASSIVE open)\n                                                finishes\n
    \                      N-CONNECT.RESPONSE       listen completes\n                       N-CONNECT.CONFIRMATION
    \  open (ACTIVE open)\n                                                finishes\n
    \                  DATA TRANSFER\n                       N-DATA.REQUEST           send
    data\n                       N-DATA.INDICATION        data ready followed by\n
    \                                               read data\n                   CONNECTION
    RELEASE\n                       N-DISCONNECT.REQUEST     close\n                       N-DISCONNECT.INDICATION
    \ connection closes or\n                                                errors\n
    \         Mapping parameters is also straight-forward:\n                     network
    service             TCP\n                     ---------------             ---\n
    \                    CONNECTION RELEASE\n                         Called address
    \         server's IP address\n                                                 (4
    octets)\n                         Calling address         client's IP address\n
    \                                                (4 octets)\n                         all
    others              ignored\n                      DATA TRANSFER\n                         NS-user
    data (NSDU)     data\n                      CONNECTION RELEASE\n                         all
    parameters          ignored\n      CONNECTION ESTABLISHMENT\n          The elements
    of procedure used during connection establishment\n          are identical to
    those presented in [ISO8073], with three\n          exceptions.\n          In
    order to facilitate testing, the connection request and\n          connection
    confirmation TPDUs may exchange initial user data,\n          using the user data
    fields of these TPDUs.\n          In order to experiment with expedited data services,
    the\n          connection request and connection confirmation TPDUs may\n          negotiate
    the use of expedited data transfer using the\n          negotiation mechanism
    specified in [ISO8073] is used (e.g.,\n          setting the \"use of transport
    expedited data transfer service\"\n          bit in the \"Additional Option Selection\"
    variable part). The\n          default is not to use the transport expedited data
    transfer\n          service.\n          In order to achieve good performance,
    the default TPDU size is\n          65531 octets, instead of 128 octets.  In order
    to negotiate a\n          smaller (standard) TPDU size, the negotiation mechanism\n
    \         specified in [ISO8073] is used (e.g., setting the desired bit\n          in
    the \"TPDU Size\" variable part).\n          To perform an N-CONNECT.REQUEST action,
    the TS-peer performs\n          an active open to the desired IP address using
    TCP port 102.\n          When the TCP signals either success or failure, this
    results\n          in an N-CONNECT.INDICATION action.\n          To await an N-CONNECT.INDICATION
    event, a server listens on\n          TCP port 102.  When a client successfully
    connects to this\n          port, the event occurs, and an implicit N-CONNECT.RESPONSE\n
    \         action is performed.\n              NOTE:      In most implementations,
    a single server will\n                         perpetually LISTEN on port 102,
    handing off\n                         connections as they are made\n"
  - "DATA TRANSFER\n      The elements of procedure used during data transfer are
    identical\n      to those presented in [ISO8073], with one exception: expedited\n
    \     data may be supported (if so negotiated during connection\n      establishment)
    by sending a modified ED TPDU (described below).\n      The TPDU is sent on the
    same TCP connection as all of the other\n      TPDUs. This method, while not faithful
    to the spirit of [ISO8072],\n      is true to the letter of the specification.\n
    \     To perform an N-DATA.REQUEST action, the TS-peer constructs the\n      desired
    TPKT and uses the TCP send data primitive.\n      To trigger an N-DATA.INDICATION
    action, the TCP indicates that\n      data is ready and a TPKT is read using the
    TCP read data\n      primitive.\n"
  - "CONNECTION RELEASE\n   To perform an N-DISCONNECT.REQUEST action, the TS-peer
    simply closes\n   the TCP connection.\n   If the TCP informs the TS-peer that
    the connection has been closed or\n   has errored, this indicates an N-DISCONNECT.INDICATION
    event.\n"
  title: 5.  The Protocol
- contents:
  - "6.  Packet Format\n      A fundamental difference between the TCP and the network
    service\n      expected by TP0 is that the TCP manages a continuous stream of\n
    \     octets, with no explicit boundaries.  The TP0 expects information\n      to
    be sent and delivered in discrete objects termed network\n      service data units
    (NSDUs).  Although other classes of transport\n      may combine more than one
    TPDU inside a single NSDU, transport\n      class 0 does not use this facility.
    \ Hence, an NSDU is identical\n      to a TPDU for the purposes of our discussion.\n
    \     The protocol described by this memo uses a simple packetization\n      scheme
    in order to delimit TPDUs.  Each packet, termed a TPKT, is\n      viewed as an
    object composed of an integral number of octets, of\n      variable length.\n
    \         NOTE:       For the purposes of presentation, these objects are\n                      shown
    as being 4 octets (32 bits wide).  This\n                      representation
    is an artifact of the style of this\n                      memo and should not
    be interpreted as requiring\n                      that a TPKT be a multiple of
    4 octets in length.\n      A TPKT consists of two parts:  a packet-header and
    a TPDU.  The\n      format of the header is constant regardless of the type of
    packet.\n      The format of the packet-header is as follows:\n        0                   1
    \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |      vrsn     |    reserved   |          packet length        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     where:\n      vrsn                         8 bits\n      This field is always
    3 for the version of the protocol described in\n      this memo.\n      packet
    length                16 bits (min=7, max=65535)\n      This field contains the
    length of entire packet in octets,\n      including packet-header.  This permits
    a maximum TPDU size of\n      65531 octets.  Based on the size of the data transfer
    (DT) TPDU,\n      this permits a maximum TSDU size of 65524 octets.\n      The
    format of the TPDU is defined in [ISO8073].  Note that only\n      TPDUs formatted
    for transport class 0 are exchanged (different\n      transport classes may use
    slightly different formats).\n      To support expedited data, a non-standard
    TPDU, for expedited data\n      is permitted.  The format used for the ED TPDU
    is nearly identical\n      to the format for the normal data, DT, TPDU.  The only
    difference\n      is that the value used for the TPDU's code is ED, not DT:\n
    \      0                   1                   2                   3\n       0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     | header length | code  |credit |TPDU-NR and EOT|   user data   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |      ...      |      ...      |      ...      |      ...      |\n      |
    \     ...      |      ...      |      ...      |      ...      |\n      |      ...
    \     |      ...      |      ...      |      ...      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     After the credit field (which is always ZERO on output and ignored\n      on
    input), there is one additional field prior to the user data.\n      TPDU-NR and
    EOT         8 bits\n      Bit 7 (the high-order bit, bit mask 1000 0000) indicates
    the end\n      of a TSDU.  All other bits should be ZERO on output and ignored
    on\n      input.\n      Note that the TP specification limits the size of an expedited\n
    \     transport service data unit (XSDU) to 16 octets.\n"
  title: 6.  Packet Format
- contents:
  - "7.  Comments\n      Since the release of RFC983 in April of 1986, we have gained
    much\n      experience in using ISO transport services on top of the TCP.  In\n
    \     September of 1986, we introduced the use of version 2 of the\n      protocol,
    based mostly on comments from the community.\n      In January of 1987, we observed
    that the differences between\n      version 2 of the protocol and the actual transport
    class 0\n      definition were actually quite small.  In retrospect, this\n      realization
    took much longer than it should have:  TP0 is is meant\n      to run over a reliable
    network service, e.g., X.25. The TCP can be\n      used to provide a service of
    this type, and, if no one complains\n      too loudly, one could state that this
    memo really just describes a\n      method for encapsulating TPO inside of TCP!\n
    \     The changes in going from version 1 of the protocol to version 2\n      and
    then to version 3 are all relatively small. Initially, in\n      describing version
    1, we decided to use the TPDU formats from the\n      ISO transport protocol.
    \ This naturally led to the evolution\n      described above.\n"
  title: 7.  Comments
- contents:
  - "8. References\n   [GOSIP86]    The U.S. Government OSI User's Committee.\n                \"Government
    Open Systems Interconnection Procurement\n                (GOSIP) Specification
    for Fiscal years 1987 and\n                1988.\" (December, 1986) [draft status]\n
    \  [ISO8072]    ISO.\n                \"International Standard 8072.  Information
    Processing\n                Systems -- Open Systems Interconnection: Transport\n
    \               Service Definition.\"\n                (June, 1984)\n   [ISO8073]
    \   ISO.\n                \"International Standard 8073.  Information Processing\n
    \               Systems -- Open Systems Interconnection: Transport\n                Protocol
    Specification.\"\n                (June, 1984)\n   [ISO8327]    ISO.\n                \"International
    Standard 8327.  Information Processing\n                Systems -- Open Systems
    Interconnection: Session\n                Protocol Specification.\"\n                (June,
    1984)\n   [RFC791]     Internet Protocol.\n                Request for Comments
    791 (MILSTD 1777)\n                (September, 1981)\n   [RFC793]     Transmission
    Control Protocol.\n                Request for Comments 793 (MILSTD 1778)\n                (September,
    1981)\n   [RFC983]     ISO Transport Services on Top of the TCP.\n                Request
    for Comments 983\n                (April, 1986)\n   [X.214]      CCITT.\n                \"Recommendation
    X.214.  Transport Service Definitions\n                for Open Systems Interconnection
    (OSI) for CCITT\n                Applications.\"\n                (October, 1984)\n
    \  [X.224]      CCITT.\n                \"Recommendation X.224.  Transport Protocol\n
    \               Specification for Open Systems Interconnection (OSI)\n                for
    CCITT Applications.\" (October, 1984)\n   [X.225]      CCITT.\n                \"Recommendation
    X.225.  Session Protocol Specification\n                for Open Systems Interconnection
    (OSI) for CCITT\n                Applications.\"\n                (October, 1984)\n"
  title: 8. References
