- title: __initial_text__
  contents:
  - "        SOFTWARE CHECKSUMMING IN THE IMP AND NETWORK RELIABILITY\n   As the ARPA\
    \ Network has developed over the last few years, and our\n   experience with operating\
    \ the IMP subnetwork has grown, the issue of\n   reliability has assumed greater\
    \ importance and greater complexity.\n   This note describes some modifications\
    \ that have recently been made\n   to the IMP and TIP programs in this regard.\
    \  These changes are\n   mechanically minor and do not affect Host operation at\
    \ all, but they\n   are logically noteworthy, and for this reason we have explained\
    \ the\n   workings of the new IMP and TIP programs in some detail.  Host\n   personnel\
    \ are advised to note particularly the modifications\n   described in sections\
    \ 4 and 5, as they may wish to change their own\n   programs or operating procedures.\n"
- title: 1. A Changing View of Network Reliability
  contents:
  - "1. A Changing View of Network Reliability\n   Our idea of the Network has evolved\
    \ as the Network itself has grown.\n   Initially, it was thought that the only\
    \ components in the network\n   design that were prone to errors were the communications\
    \ circuits,\n   and the modem interfaces in the IMPs are equipped with a CRC checksum\n\
    \   to detect \"almost all\" such errors.  The rest of the system,\n   including\
    \ Host interfaces, IMP processors, memories, and interfaces,\n   were all considered\
    \ to be error-free.  We have had to re-evaluate\n   this position in the light\
    \ of our experience.  In operating the\n   network we are faced with the problem\
    \ of having to perform remote\n   diagnosis on failures which cannot easily be\
    \ classified or\n   understood.  Some examples of such problems include reports\
    \ from Host\n   personnel of lost RFNMs and lost Host-Host protocol allocate\n\
    \   messages, inexplicable behavior in the IMP of a transient nature,\n   and,\
    \ finally, the problem of crashes -- the total failure of an IMP,\n   perhaps\
    \ affecting adjacent IMPs.  These circumstances are infrequent\n   and are therefore\
    \ difficult to correlate with other failures or with\n   particular attempted\
    \ remedies.  Indeed, it is often impossible to\n   distinguish a software failure\
    \ from a hardware failure.\n   In attempting to post-mortem crashes, we have sometimes\
    \ found the IMP\n   program has had instructions incorrect--sometimes just one\
    \ or two\n   bits picked or dropped.  Clearly, memory errors can account for\n\
    \   almost any failure, not only program crashes but also data errors\n   which\
    \ can lead to many other syndromes.  For instance, if the address\n   of a message\
    \ is changed in transit, then one Host thinks the message\n   was lost, and another\
    \ Host may receive an extra message.  Errors of\n   this kind fall into two general\
    \ classes: errors in Host messages,\n   whether in the control information or\
    \ the data, and errors in inter-\n   IMP messages, primarily routing update messages.\
    \  In the course of\n   the last few years, it has become increasingly clear that\
    \ such errors\n   were occurring, though it was difficult to speculate as to where,\n\
    \   why, and how often.\n   One of the earliest problems of this kind was discovered\
    \ in 1971.\n   The Harvard IMP was sometimes crashing in an unknown manner so\
    \ that\n   all the other IMPs were affected.  It was finally determined that its\n\
    \   memory was faulty and sometimes the routing messages read out from\n   memory\
    \ by the modem output interfaces were all zeroes.  The adjacent\n   IMPs interpreted\
    \ such an erroneous message as stating that the\n   Harvard IMP had zero delay\
    \ to all destinations -- that it was the\n   best route to everywhere! Once this\
    \ information propagated to the\n   other IMPs, the whole network was in a shambles.\
    \  The solution to\n   this problem was to generate a software checksum for each\
    \ routing\n   message before it was sent from one IMP, and to check it after it\
    \ was\n   received at the other IMP.  This software checksum, in addition to\n\
    \   the hardware checksum of the circuit, checks the modem interfaces and\n  \
    \ memories at each IMP, and protects the IMPs from erroneous routing\n   information.\
    \  The overhead in computing these checksums is not great\n   since the messages\
    \ are only exchanged every 2/3 of a second.\n   In the first few months of 1973,\
    \ we began to have a great deal of\n   trouble with the reliability of some IMPs,\
    \ especially these in the\n   Washington area.  The normal procedures of calling\
    \ in and working\n   with Honeywell field engineers had not cleared up several\
    \ of these\n   persistent failures, and it was felt that an escalation of BBN\n\
    \   involvement was needed to identify the exact causes of the problems.\n   Therefore,\
    \ during much of February and March there were one or more\n   members of the\
    \ staff at various sites in the network where hardware\n   problems were suspected.\
    \  The first thing we found out was that the\n   operational IMP program did not\
    \ give enough diagnostic information\n   about failures when they occurred, and\
    \ that the available test\n   programs did not detect errors frequently enough\
    \ to justify their\n   use.  That is, the errors were appearing at rather low\
    \ frequency,\n   from once every few hours to once every few days, compared to\
    \ message\n   rates of once a second or faster.  Therefore, we decided to try\
    \ to\n   make the operational IMP program run when it could, and report more\n\
    \   information about detected hardware errors, rather than keep the\n   failing\
    \ IMPs off the network for days at a time.\n   Modifications to the IMP program\
    \ had two independent goals: we wanted\n   to make the software less vulnerable\
    \ to hardware failures, and we\n   wanted the software to isolate the failures\
    \ and report them to the\n   NCC.  The technique we chose to use was generating\
    \ a software\n   checksum on all packets as they are sent out over a line.  We\n\
    \   suspected that the hardware failures in the Washington area were\n   happening\
    \ between IMPs, that is, the packets were correct before they\n   were sent. \
    \ Thus, a memory-to-memory software checksum, similar to\n   the technique installed\
    \ two years before for routing messages only,\n   should be able to detect these\
    \ errors.  On March 13, a new version of\n   the IMP program was released with\
    \ software checksum code.  In this\n   program, when a packet is found to have\
    \ an incorrect checksum it is\n   discarded, and a copy of the data is sent to\
    \ the NCC.  The previous\n   IMP retransmits the packet, since an acknowledgment\
    \ is not returned.\n   A partial list of the hardware problems that were uncovered\
    \ by\n   software checksums, and subsequently fixed, includes:\n      *  One modem\
    \ interface at the Aberdeen IMP dropped several bits\n         from several successive\
    \ words in transferring data into memory.\n      *  One modem interface at the\
    \ Belvoir IMP picked one or two bits\n         in a single word in transferring\
    \ data into memory.\n      *  One modem interface at the ETAC TIP dropped the\
    \ first word in\n         transferring data out of memory.\n      *  A region\
    \ in memory at the Utah IMP changed the low order two\n         bits in some words\
    \ on an irregular basis.\n   Each of these problems resulted in two or three detected\
    \ errors per\n   day.  There were other problems that were not detected by the\n\
    \   software checksum, such as dropped interrupts.  This set of problems\n   may\
    \ be explained by the electronics of the high-speed DMC on 316\n   IMPs.  The\
    \ first three machines cited above are 316 IMPs with 3 modem\n   interfaces, and\
    \ they are the only such machines in the network.  The\n   third interface is\
    \ in a separate drawer and the total bus length\n   seems to be too long for the\
    \ driving electronics in the original\n   design.  We are presently investigating\
    \ various ways to fix these\n   problems, and have had some success already.\n"
- title: 2. An End-to-End Software Checksum on Packets
  contents:
  - "2. An End-to-End Software Checksum on Packets\n   This last experience, and the\
    \ earlier checksum on routing messages,\n   proved the value of a software checksum\
    \ on all inter-IMP\n   transmissions.  We have decided to extend the checksum\
    \ to detect\n   intra-IMP failures as well, and make software checksums on all\n\
    \   network transmissions a permanent feature of the IMP system.  We can\n   obtain\
    \ an end-to-end software checksum on packets, without any time\n   gaps, as follows:\n\
    \          +--------+        +--------+        +---------+\n          |  IMP \
    \ 2|--------|3 IMP  4|--------|5  IMP   |\n          |   1    |        |     \
    \   |        |    6    |\n          +---|----+        +--------+        +----|----+\n\
    \              |                                    |\n          +---|----+  \
    \                        +----|----+\n          |        |                   \
    \       |         |\n          |  Host  |                          |  Host   |\n\
    \          +--------+                          +---------+\n      *  A checksum\
    \ is computed at the source IMP for each packet as it\n         is received from\
    \ the source Host. (interface 1)\n      *  The checksum is verified at each intermediate\
    \ IMP as it is\n         received over the circuit from the previous IMP. (interfaces\
    \ 3\n         and 5)\n      *  If the checksum is in error, the packet is discarded,\
    \ and the\n         previous IMP retransmits the packet when it does not receive\
    \ an\n         acknowledgment. (interface 2 and 4)\n      *  The previous IMP\
    \ does not verify the checksum before the\n         original transmission, to\
    \ cut the number of checks in half.\n         But when it must retransmit a packet\
    \ it does verify the\n         checksum.  If it finds an error, it has detected\
    \ an intra-IMP\n         failure, and the packet is lost.  If not, then the first\n\
    \         transmission was lost due to an inter-IMP failure, a circuit\n     \
    \    error, or was simply refused by the adjacent IMP.  The previous\n       \
    \  IMP holds a good copy of the packet, which it then retransmits.\n         (interface\
    \ 2 and 4)\n      *  After the packet has successfully traversed several\n   \
    \      intermediate IMPs, it arrives at the destination IMP.  The\n         checksum\
    \ is verified just before the packet is sent to the\n         Host. (interface\
    \ 6)\n   This technique provides a checksum from the source IMP to the\n   destination\
    \ IMP on each packet, with no gaps in time when the packet\n   is unchecked. \
    \ Any errors are reported to the NCC in full, with a\n   copy of the packet in\
    \ question.  This method answers both\n   requirements stated above: it makes\
    \ the IMPs more reliable and\n   fault-tolerant, and it provides a maximum of\
    \ diagnostic information\n   for use in fault isolation.  This expanded checksum\
    \ logic was\n   installed in the network on June 19.\n   On of the major questions\
    \ about such approaches is their efficiency.\n   We have been able to include\
    \ the software checksum on all packets\n   without greatly increasing the processing\
    \ overhead in the IMP.  The\n   method described above involves one checksum calculation\
    \ at each IMP\n   through which a packet travels.  We developed a very fast checksum\n\
    \   technique, which takes only 2 msec per word.  The program computes\n   the\
    \ number of words in a packet and then jumps to the appropriate\n   entry in a\
    \ chain of add instructions.  This produces a simple sum of\n   the words in the\
    \ packet, to which the number of words in the packet\n   is added to detect missing\
    \ or extra words of zero.  With the\n   inclusion of this code, the effective\
    \ processor bandwidth of a 516\n   IMP is reduced by one-eighth for full-length\
    \ store-and-forward\n   packets, from a megabit per second to 875 kilobits per\
    \ second.  That\n   is, the IMP now has the processing capability to connect to\
    \ 17 full\n   duplex 50 kilobit per second lines, as compared to 20 such lines\n\
    \   without the checksum program.  We are aware that this add checksum is\n  \
    \ not a very good one in terms of its error-detecting capabilities, but\n   it\
    \ is as much as the IMP can afford to do in software.  Furthermore,\n   we emphasize\
    \ that the primary goal of this modification is to assist\n   in the remote diagnosis\
    \ of intermittent hardware failures.\n"
- title: 3. Checksumming to Improve the Reliability of Routing
  contents:
  - "3. Checksumming to Improve the Reliability of Routing\n   We mentioned earlier\
    \ the catastrophic effects that follow for the\n   Network as a whole when a single\
    \ IMP begins to propagate incorrect\n   routing information.  The experience described\
    \ above involved a\n   specific memory failure which has not recurred in the last\
    \ two years,\n   but the problem is easily understood to be of a general nature.\
    \  In\n   fact, we recently had another network-wide failure that was traced to\n\
    \   a hardware error that resulted in erroneous routing messages, after\n   we\
    \ had installed a software checksum on all inter-IMP transmissions.\n   The problem\
    \ we had were due to a single broken instruction in the\n   part of the IMP program\
    \ that builds the routing message.  As a\n   result, the routing messages from\
    \ that IMP were random data, and the\n   neighboring IMPs interpreted these messages\
    \ as routing update\n   information.  When this happened, traffic flow through\
    \ the Network\n   was completely disrupted and no useful work could be done until\
    \ the\n   failed IMP was halted.\n   This kind of problem, the introduction of\
    \ incorrect routing\n   information into the Network, can happen in three ways:\n\
    \      *  The routing message is changed in transmission.  The inter-IMP\n   \
    \      checksum should catch this.  The bad routing messages we saw in\n     \
    \    the Network had good checksums.\n      *  The routing message is changed\
    \ as it is constructed, say by a\n         memory or processor failure, or before\
    \ it is transmitted.  This\n         is what we termed above an intra-IMP failure.\n\
    \      *  The routing program is incorrect for hardware or software\n        \
    \ reasons.\n   We have attempted to solve the last two kinds of problems by\n\
    \   extending the concept of software checksums.  The routing program has\n  \
    \ been modified to build a software checksum for the routing message as\n   it\
    \ builds the message, just as if it came from a Host.  It is\n   important that\
    \ this checksum refer to the intended contents of the\n   routing message, not\
    \ the actual contents.  That is, the program which\n   generates the routing message\
    \ builds its own software checksum as it\n   proceeds, not by reading what has\
    \ been stored in the routing message\n   area, but by adding up the intended contents\
    \ for each entry as it\n   computes them.  The process which sends out routing\
    \ messages then\n   always verifies the checksum before transmitting them.  This\
    \ scheme\n   should detect all intra-IMP failures.\n   Finally, the routing program\
    \ itself can be checksummed to detect any\n   changes in the code.  The programs\
    \ which copy in received routing\n   messages, compute new routing tables, and\
    \ send out routing messages\n   each calculate the checksum of the code before\
    \ executing it.  If the\n   program finds a discrepancy in the checksum of the\
    \ program it is\n   about to run, it immediately requests a program reload from\
    \ an\n   adjacent IMP.  These checksums include the checksum computation\n   itself,\
    \ the routing program and any constants referenced.  This\n   modification should\
    \ prevent a hardware failure at one IMP from\n   affecting the Network at large\
    \ by stopping the IMP before it does any\n   damage in terms of spreading bad\
    \ routing.  A version of the IMP\n   program with this added protection for routing\
    \ was released on May\n   22.\n   In the first few months of 1973, there have\
    \ been several other\n   efforts aimed at improving the reliability of the Network,\
    \ in\n   addition to software checksumming in the IMPs.  At the same time that\n\
    \   we were discovering inter-IMP failures with the software checksum\n   packets,\
    \ we began to notice a different kind of problem with intra-\n   IMP failures.\
    \  In these cases we were primarily faced with memory\n   problems, and they often\
    \ affected the IMP program itself, rather than\n   the packets flowing through\
    \ the IMP.  Our first attack on this\n   problem was to build a PDP-1 program\
    \ to verify the running IMP and\n   TIP programs at a site against the correct\
    \ core images held at the\n   PDP-1.  The program interrogates the IMP with DDT\
    \ messages, and\n   prints out a list of discrepancies.  Using this program, we\
    \ have\n   already found memory failures at one site.\n"
- title: 4. TIP Modifications
  contents:
  - "4. TIP Modifications\n   The hardware difficulties which we began to experience\
    \ during the\n   first few months of 1973 had two effects on Host-to-Host\n  \
    \ communication.  First, the intermittent modem interface failures, of\n   the\
    \ type seen at Belvoir, Aberdeen, and ETAC, meant that messages\n   were occasionally\
    \ lost by the network.  This loss is reported to the\n   transmitting Host by\
    \ the \"Incomplete Transmission\" message generated\n   by the source IMP; the\
    \ Host must then decide whether to retransmit or\n   to take some other action.\
    \  Second, the higher than normal incidence\n   of machine failures meant that\
    \ the network sometimes \"partitioned\" so\n   that there was no path between\
    \ the two communicating Hosts. (It\n   should be noted that, contrary to the original\
    \ design, two sites are\n   currently connected to the network by only a single\
    \ path; other\n   similar connections are planned.  For any such sites, any failure\n\
    \   along the single path will be seen as a partition.) Since a TIP acts\n   as\
    \ a Host for its users, its resilience when these types of failures\n   occur\
    \ has a major effect on user satisfaction.\n   Prior to this time the TIP program\
    \ \"aborted\" the user's connection if\n   it received an Incomplete Transmission\
    \ indication from the IMP\n   program.  In March the TIP program (and the programs\
    \ of several other\n   Hosts) was changed to retransmit messages for which the\
    \ Incomplete\n   Transmission indication was returned; some Hosts (e.g. MULTICs)\
    \ have\n   done this from the start.  This modification has turned out to be\n\
    \   relatively simple, and we urge other Hosts to consider implementing\n   some\
    \ sort of error recovery software.  On the other hand, it has not\n   seemed reasonable\
    \ to continue attempting to transmit when the program\n   receives a \"Destination\
    \ Unreachable\" indication, since this could\n   arise either from a network partition\
    \ or from a failure at the\n   destination site.  The interactive user is, of\
    \ course, free to try\n   again manually.\n   A different situation pertains to\
    \ tape transfers involving TIPs with\n   the magnetic tape option.  In these cases,\
    \ the user would like to\n   start the process and then ignore it until the transfer\
    \ is finished.\n   Network partitions, even if infrequent, may occur when tape\
    \ transfers\n   many hours in length are in progress.  Therefore, we made a\n\
    \   significant modification to the TIP magnetic tape option to include a\n  \
    \ sequencing mechanism in the tape transfer protocol which permits\n   automatic\
    \ recovery and transmission continuation after most kinds of\n   network transients.\
    \  With this mechanism in effect, and assuming a\n   tape is mounted at the \"\
    other end\", the complete transfer of a tape\n   is possible with a single command\
    \ given at either end.  If the\n   connection goes dead in mid-transfer, the TIP\
    \ magnetic tape software\n   will attempt to reopen the connection until successful\
    \ and then\n   continue the transfer from where it was left off.  In addition\
    \ to\n   modifying the TIP magnetic tape option as specified above, we also\n\
    \   modified the TENEX program which is able to communicate with the TIP\n   magnetic\
    \ tape option so that it remained compatible.  These changes\n   were installed\
    \ in April.\n"
- title: 5. Future Plans
  contents:
  - "5. Future Plans\n   We have been considering some of the issues of network reliability\n\
    \   discussed above in connection with the development of the new High\n   Speed\
    \ Modular IMP.  This design effort and the experiences with the\n   current IMP\
    \ system are, of course, linked together, and we have\n   already decided on several\
    \ approaches to be taken in the new line of\n   IMPs:\n      *  The IMP will have\
    \ a hardware CRC checksum generator which\n         returns the checksum on a\
    \ specified range of memory.\n      *  The IMP will use this facility to generate\
    \ and check an end-\n         to-end checksum on messages.  This checksum will\
    \ therefore be\n         more comprehensive and better for error detection than\
    \ the\n         current software checksum.  It will insure a high degree of\n\
    \         reliability for Host transmissions.\n      *  In addition, the IMP will\
    \ perform a verification of a packet\n         checksum at each hop to provide\
    \ diagnostic information.  This\n         check will be on an optional basis,\
    \ whenever the system has\n         available resources for the check.\n     \
    \ *  The code for the new IMP system will be read-only (this is\n         impractical\
    \ for the present 516 and 316 IMPs), and the program\n         will periodically\
    \ checksum itself using the hardware CRC\n         generator.  We hope to design\
    \ the program so that it can be\n         reloaded in segments in the event of\
    \ a detected error in the\n         code, with no service interruption.\n    \
    \  *  Finally, we are looking into the structure of an optional IMP-\n       \
    \  Host/Host-IMP checksum to complete Host/Host end-to-end\n         checksum.\
    \  Under such an arrangement, the IMP and Host could\n         agree to verify\
    \ the checksums on the messages transferred over\n         the interface between\
    \ them, and the appropriate signalling\n         mechanisms would be provided\
    \ to handled errors.  With this\n         technique in effect, two Hosts could\
    \ be certain that their\n         messages were delivered error-free or else they\
    \ would be\n         notified of an error, and could then retransmit their message\n\
    \         if desired.\n         More details on any such modifications to the\
    \ IMP and to the\n         IMP-Host interface will be published when appropriate.\n\
    \             [This RFC was put into machine readable form for entry]\n      \
    \         [into the online RFC archives by Via Genie 12/1999]\n"
