- contents:
  - '    Internet Message Access Protocol (IMAP) - MULTIAPPEND Extension

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the multiappending extension to the Internet\n
    \  Message Access Protocol (IMAP) (RFC 3501).  This extension provides\n   substantial
    performance improvements for IMAP clients which upload\n   multiple messages at
    a time to a mailbox on the server.\n   A server which supports this extension
    indicates this with a\n   capability name of \"MULTIAPPEND\".\n"
  title: Abstract
- contents:
  - "Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"MAY\", and \"OPTIONAL\" in this
    document are to\n   be interpreted as described in [KEYWORDS].\n"
  title: Terminology
- contents:
  - "Introduction\n   The MULTIAPPEND extension permits uploading of multiple messages
    with\n   a single command.  When used in conjunction with the [LITERAL+]\n   extension,
    the entire upload is accomplished in a single\n   command/response round trip.\n
    \  A MULTIAPPEND APPEND operation is atomic; either all messages are\n   successfully
    appended, or no messages are appended.\n   In the base IMAP specification, each
    message must be appended in a\n   separate command, and there is no mechanism
    to \"unappend\" messages if\n   an error occurs while appending.  Also, some mail
    stores may require\n   an expensive \"open/lock + sync/unlock/close\" operation
    as part of\n   appending; this can be quite expensive if it must be done on a\n
    \  per-message basis.\n   If the server supports both LITERAL+ and pipelining
    but not\n   MULTIAPPEND, it may be possible to get some of the performance\n   advantages
    of MULTIAPPEND by doing a pipelined \"batch\" append.\n   However, it will not
    work as well as MULTIAPPEND for the following\n   reasons:\n        1) Multiple
    APPEND commands, even as part of a pipelined batch,\n        are non-atomic by
    definition.  There is no way to revert the\n        mailbox to the state before
    the batch append in the event of an\n        error.\n        2) It may not be
    feasible for the server to coalesce pipelined\n        APPEND operations so as
    to avoid the \"open/lock +\n        sync/unlock/close\" overhead described above.
    \ In any case, such\n        coalescing would be timing dependent and thus potentially\n
    \       unreliable.  In particular, with traditional UNIX mailbox files,\n        it
    is assumed that a lock is held only for a single atomic\n        operation, and
    many applications disregard any lock that is\n        older than 5 minutes.\n
    \       3) If an error occurs, depending upon the nature of the error,\n        it
    is possible for additional messages to be appended after the\n        error.  For
    example, the user wants to append 5 messages, but a\n        disk quota error
    occurs with the third message because of its\n        size.  However, the fourth
    and fifth messages have already been\n        sent in the pipeline, so the mailbox
    ends up with the first,\n        second, fourth, and fifth messages of the batch
    appended.\n"
  title: Introduction
- contents:
  - "6.3.11.  APPEND Command\n   Arguments:  mailbox name\n               one or more
    messages to upload, specified as:\n                  OPTIONAL flag parenthesized
    list\n                  OPTIONAL date/time string\n                  message literal\n
    \  Data:       no specific responses for this command\n   Result:     OK - append
    completed\n               NO - append error: can't append to that mailbox, error\n
    \                   in flags or date/time or message text,\n                    append
    cancelled\n               BAD - command unknown or arguments invalid\n      The
    APPEND command appends the literal arguments as new messages\n      to the end
    of the specified destination mailbox.  This argument\n      SHOULD be in the format
    of an [RFC-2822] message.  8-bit\n      characters are permitted in the message.
    \ A server implementation\n      that is unable to preserve 8-bit data properly
    MUST be able to\n      reversibly convert 8-bit APPEND data to 7-bit using a [MIME-IMB]\n
    \     content transfer encoding.\n            Note: There MAY be exceptions, e.g.,
    draft messages, in\n            which required [RFC-2822] header lines are omitted
    in the\n            message literal argument to APPEND.  The full implications\n
    \           of doing so MUST be understood and carefully weighed.\n      If a
    flag parenthesized list is specified, the flags SHOULD be set\n      in the resulting
    message; otherwise, the flag list of the\n      resulting message is set empty
    by default.\n      If a date-time is specified, the internal date SHOULD be set
    in\n      the resulting message; otherwise, the internal date of the\n      resulting
    message is set to the current date and time by default.\n      A zero-length message
    literal argument is an error, and MUST\n      return a NO.  This can be used to
    cancel the append.\n      If the append is unsuccessful for any reason (including
    being\n      cancelled), the mailbox MUST be restored to its state before the\n
    \     APPEND attempt; no partial appending is permitted.  The server MAY\n      return
    an error before processing all the message arguments.\n      If the destination
    mailbox does not exist, a server MUST return an\n      error, and MUST NOT automatically
    create the mailbox.  Unless it\n      is certain that the destination mailbox
    can not be created, the\n      server MUST send the response code \"[TRYCREATE]\"
    as the prefix of\n      the text of the tagged NO response.  This gives a hint
    to the\n      client that it can attempt a CREATE command and retry the APPEND\n
    \     if the CREATE is successful.\n      If the mailbox is currently selected,
    the normal new message\n      actions SHOULD occur.  Specifically, the server
    SHOULD notify the\n      client immediately via an untagged EXISTS response.  If
    the server\n      does not do so, the client MAY issue a NOOP command (or failing\n
    \     that, a CHECK command) after one or more APPEND commands.\n   Example: C:
    A003 APPEND saved-messages (\\Seen) {329}\n            S: + Ready for literal
    data\n            C: Date: Mon, 7 Feb 1994 21:52:25 -0800 (PST)\n            C:
    From: Fred Foobar <foobar@Blurdybloop.example.COM>\n            C: Subject: afternoon
    meeting\n            C: To: mooch@owatagu.example.net\n            C: Message-Id:
    <B27397-0100000@Blurdybloop.example.COM>\n            C: MIME-Version: 1.0\n            C:
    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n            C:\n            C: Hello
    Joe, do you think we can meet at 3:30 tomorrow?\n            C:  (\\Seen) \" 7-Feb-1994
    22:43:04 -0800\" {295}\n            S: + Ready for literal data\n            C:
    Date: Mon, 7 Feb 1994 22:43:04 -0800 (PST)\n            C: From: Joe Mooch <mooch@OWaTaGu.example.net>\n
    \           C: Subject: Re: afternoon meeting\n            C: To: foobar@blurdybloop.example.com\n
    \           C: Message-Id: <a0434793874930@OWaTaGu.example.net>\n            C:
    MIME-Version: 1.0\n            C: Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n
    \           C:\n            C: 3:30 is fine with me.\n            C:\n            S:
    A003 OK APPEND completed\n            C: A004 APPEND bogusname (\\Flagged) {1023}\n
    \           S: A004 NO [TRYCREATE] No such mailbox as bogusname\n            C:
    A005 APPEND test (\\Flagged) {99}\n            S: + Ready for literal data\n            C:
    Date: Mon, 7 Feb 2000 22:43:04 -0800 (PST)\n            C: From: Fred Foobar <fred@example.com>\n
    \           C: Subject: hmm...\n            C:  {35403}\n            S: A005 NO
    APPEND failed: Disk quota exceeded\n        Note: The APPEND command is not used
    for message delivery,\n        because it does not provide a mechanism to transfer
    [SMTP]\n        envelope information.\n"
  title: 6.3.11.  APPEND Command
- contents:
  - "Modification to IMAP4rev1 Base Protocol Formal Syntax\n   The following syntax
    specification uses the Augmented Backus-Naur\n   Form (ABNF) notation as specified
    in [ABNF].\n   append          = \"APPEND\" SP mailbox 1*append-message\n   append-message
    \ = [SP flag-list] [SP date-time] SP literal\n"
  title: Modification to IMAP4rev1 Base Protocol Formal Syntax
- contents:
  - "MULTIAPPEND Interaction with UIDPLUS Extension\n   Servers which support both
    MULTIAPPEND and [UIDPLUS] will have the\n   \"resp-code-apnd\" rule modified as
    follows:\n   resp-code-apnd  = \"APPENDUID\" SP nz-number SP set\n   That is,
    the APPENDUID response code returns as many UIDs as there\n   were messages appended
    in the multiple append.  The UIDs returned\n   should be in the order the articles
    where appended.  The message set\n   may not contain extraneous UIDs or the symbol
    \"*\".\n"
  title: MULTIAPPEND Interaction with UIDPLUS Extension
- contents:
  - "Security Considerations\n   The MULTIAPPEND extension does not raise any security
    considerations\n   that are not present in the base [IMAP] protocol, and these
    issues\n   are discussed in [IMAP].  Nevertheless, it is important to remember\n
    \  that IMAP4rev1 protocol transactions, including electronic mail data,\n   are
    sent in the clear over the network unless protection from\n   snooping is negotiated,
    either by the use of STARTTLS, privacy\n   protection is negotiated in the AUTHENTICATE
    command, or some other\n   protection mechanism is in effect.\n"
  title: Security Considerations
- contents:
  - "Normative References\n   [ABNF]     Crocker, D. and P. Overell, \"Augmented BNF
    for Syntax\n              Specifications: ABNF\", RFC 2234, November 1997.\n   [IMAP]
    \    Crispin, M., \"Internet Message Access Protocol - Version\n              4rev1\",
    RFC 3501, March 2003.\n   [KEYWORDS] Bradner, S., \"Key words for use in RFCs
    to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [MIME-IMB] Freed, N. and N. Borenstein, \"MIME (Multipurpose Internet\n              Mail
    Extensions) Part One: Format of Internet Message\n              Bodies\", RFC
    2045, November 1996.\n   [RFC-2822] Resnick, P., \"Internet Message Format\",
    RFC 2822, April\n              2001.\n"
  title: Normative References
- contents:
  - "Informative References\n   [LITERAL+] Myers, J., \"IMAP4 non-synchronizing literals\",
    RFC 2088,\n              January 1997.\n   [UIDPLUS]  Myers, J., \"IMAP4 UIDPLUS
    extension\", RFC 2359, June 1988.\n   [SMTP]     Klensin, J., Editor, \"Simple
    Mail Transfer Protocol\", RFC\n              2821, April 2001.\n"
  title: Informative References
- contents:
  - "Author's Address\n   Mark R. Crispin\n   Networks and Distributed Computing\n
    \  University of Washington\n   4545 15th Avenue NE\n   Seattle, WA  98105-4527\n
    \  Phone: (206) 543-5762\n   EMail: MRC@CAC.Washington.EDU\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
