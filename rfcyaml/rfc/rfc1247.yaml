- title: __initial_text__
  contents:
  - "                             OSPF Version 2\nStatus of this Memo\nThis RFC specifies\
    \ an IAB standards track protocol for the Internet\ncommunity, and requests discussion\
    \ and suggestions for improvements.\nPlease refer to the current edition of the\
    \ ``IAB Official Protocol\nStandards'' for the standardization state and status\
    \ of this protocol.\nDistribution of this memo is unlimited.\nAbstract\nThis memo\
    \ documents version 2 of the OSPF protocol.  OSPF is a link-\nstate based routing\
    \ protocol.  It is designed to be run internal to a\nsingle Autonomous System.\
    \  Each OSPF router maintains an identical\ndatabase describing the Autonomous\
    \ System's topology.  From this\ndatabase, a routing table is calculated by constructing\
    \ a shortest-path\ntree.\nOSPF recalculates routes quickly in the face of topological\
    \ changes,\nutilizing a minimum of routing protocol traffic.  OSPF provides support\n\
    for equal-cost multipath.  Separate routes can be calculated for each IP\ntype\
    \ of service.  An area routing capability is provided, enabling an\nadditional\
    \ level of routing protection and a reduction in routing\nprotocol traffic.  In\
    \ addition, all OSPF routing protocol exchanges are\nauthenticated.\nVersion 1\
    \ of the OSPF protocol was documented in RFC 1131.  The\ndifferences between the\
    \ two versions are explained in Appendix F.\nPlease send comments to ospf@trantor.umd.edu.\n\
    1. Introduction\nThis document is a specification of the Open Shortest Path First\
    \ (OSPF)\ninternet routing protocol.  OSPF is classified as an Internal Gateway\n\
    Protocol (IGP).  This means that it distributes routing information\nbetween routers\
    \ belonging to a single Autonomous System.  The OSPF\nprotocol is based on SPF\
    \ or link-state technology.  This is a departure\nfrom the Bellman-Ford base used\
    \ by traditional internet routing\nprotocols.\nThe OSPF protocol was developed\
    \ by the OSPF working group of the\nInternet Engineering Task Force.  It has been\
    \ designed expressly for the\ninternet environment, including explicit support\
    \ for IP subnetting,\nTOS-based routing and the tagging of externally-derived\
    \ routing\ninformation.  OSPF also provides for the authentication of routing\n\
    updates, and utilizes IP multicast when sending/receiving the updates.\nIn addition,\
    \ much work has been done to produce a protocol that responds\nquickly to topology\
    \ changes, yet involves small amounts of routing\nprotocol traffic.\nThe author\
    \ would like to thank Rob Coltun, Milo Medin, Mike Petry and\nthe rest of the\
    \ OSPF working group for the ideas and support they have\ngiven to this project.\n\
    1.1 Protocol overview\nOSPF routes IP packets based solely on the destination\
    \ IP address and IP\nType of Service found in the IP packet header.  IP packets\
    \ are routed\n\"as is\" -- they are not encapsulated in any further protocol headers\
    \ as\nthey transit the Autonomous System.  OSPF is a dynamic routing protocol.\n\
    It quickly detects topological changes in the AS (such as router\ninterface failures)\
    \ and calculates new loop-free routes after a period\nof convergence.  This period\
    \ of convergence is short and involves a\nminimum of routing traffic.\nIn an SPF-based\
    \ routing protocol, each router maintains a database\ndescribing the Autonomous\
    \ System's topology.  Each participating router\nhas an identical database.  Each\
    \ individual piece of this database is a\nparticular router's local state (e.g.,\
    \ the router's usable interfaces\nand reachable neighbors).  The router distributes\
    \ its local state\nthroughout the Autonomous System by flooding.\nAll routers\
    \ run the exact same algorithm, in parallel.  From the\ntopological database,\
    \ each router constructs a tree of shortest paths\nwith itself as root.  This\
    \ shortest-path tree gives the route to each\ndestination in the Autonomous System.\
    \  Externally derived routing\ninformation appears on the tree as leaves.\nOSPF\
    \ calculates separate routes for each Type of Service (TOS).  When\nseveral equal-cost\
    \ routes to a destination exist, traffic is distributed\nequally among them. \
    \ The cost of a route is described by a single\ndimensionless metric.\nOSPF allows\
    \ sets of networks to be grouped together.  Such a grouping is\ncalled an area.\
    \  The topology of an area is hidden from the rest of the\nAutonomous System.\
    \  This information hiding enables a significant\nreduction in routing traffic.\
    \  Also, routing within the area is\ndetermined only by the area's own topology,\
    \ lending the area protection\nfrom bad routing data.  An area is a generalization\
    \ of an IP subnetted\nnetwork.\nOSPF enables the flexible configuration of IP\
    \ subnets.  Each route\ndistributed by OSPF has a destination and mask.  Two different\
    \ subnets\nof the same IP network number may have different sizes (i.e., different\n\
    masks).  This is commonly referred to as variable length subnets.  A\npacket is\
    \ routed to the best (i.e., longest or most specific) match.\nHost routes are\
    \ considered to be subnets whose masks are \"all ones\"\n(0xffffffff).\nAll OSPF\
    \ protocol exchanges are authenticated.  This means that only\ntrusted routers\
    \ can participate in the Autonomous System's routing.  A\nvariety of authentication\
    \ schemes can be used; a single authentication\nscheme is configured for each\
    \ area.  This enables some areas to use much\nstricter authentication than others.\n\
    Externally derived routing data (e.g., routes learned from the Exterior\nGateway\
    \ Protocol (EGP)) is passed transparently throughout the\nAutonomous System. \
    \ This externally derived data is kept separate from\nthe OSPF protocol's link\
    \ state data.  Each external route can also be\ntagged by the advertising router,\
    \ enabling the passing of additional\ninformation between routers on the boundaries\
    \ of the Autonomous System.\n1.2 Definitions of commonly used terms\nHere is a\
    \ collection of definitions for terms that have a specific\nmeaning to the protocol\
    \ and that are used throughout the text.  The\nreader unfamiliar with the Internet\
    \ Protocol Suite is referred to [RS-\n85-153] for an introduction to IP.\nRouter\n\
    \    A level three Internet Protocol packet switch.  Formerly called a\n    gateway\
    \ in much of the IP literature.\nAutonomous System\n    A group of routers exchanging\
    \ routing information via a common\n    routing protocol.  Abbreviated as AS.\n\
    Internal Gateway Protocol\n    The routing protocol spoken by the routers belonging\
    \ to an\n    Autonomous system.  Abbreviated as IGP.  Each Autonomous System has\n\
    \    a single IGP.  Different Autonomous Systems may be running different\n  \
    \  IGPs.\nRouter ID\n    A 32-bit number assigned to each router running the OSPF\
    \ protocol.\n    This number uniquely identifies the router within an Autonomous\n\
    \    System.\nNetwork\n    In this paper, an IP network or subnet.  It is possible\
    \ for one\n    physical network to be assigned multiple IP network/subnet numbers.\n\
    \    We consider these to be separate networks.  Point-to-point physical\n   \
    \ networks are an exception - they are considered a single network no\n    matter\
    \ how many (if any at all) IP network/subnet numbers are\n    assigned to them.\n\
    Network mask\n    A 32-bit number indicating the range of IP addresses residing\
    \ on a\n    single IP network/subnet.  This specification displays network masks\n\
    \    as hexadecimal numbers.  For example, the network mask for a class C\n  \
    \  IP network is displayed as 0xffffff00.  Such a mask is often\n    displayed\
    \ elsewhere in the literature as 255.255.255.0.\nMulti-access networks\n    Those\
    \ physical networks that support the attachment of multiple\n    (more than two)\
    \ routers.  Each pair of routers on such a network is\n    assumed to be able\
    \ to communicate directly (e.g., multi-drop\n    networks are excluded).\nInterface\n\
    \    The connection between a router and one of its attached networks.\n    An\
    \ interface has state information associated with it, which is\n    obtained from\
    \ the underlying lower level protocols and the routing\n    protocol itself. \
    \ An interface to a network has associated with it a\n    single IP address and\
    \ mask (unless the network is an unnumbered\n    point-to-point network).  An\
    \ interface is sometimes also referred to\n    as a link.\nNeighboring routers\n\
    \    Two routers that have interfaces to a common network.  On multi-\n    access\
    \ networks, neighbors are dynamically discovered by OSPF's\n    Hello Protocol.\n\
    Adjacency\n    A relationship formed between selected neighboring routers for\
    \ the\n    purpose of exchanging routing information.  Not every pair of\n   \
    \ neighboring routers become adjacent.\nLink state advertisement\n    Describes\
    \ to the local state of a router or network.  This includes\n    the state of\
    \ the router's interfaces and adjacencies.  Each link\n    state advertisement\
    \ is flooded throughout the routing domain.  The\n    collected link state advertisements\
    \ of all routers and networks\n    forms the protocol's topological database.\n\
    Hello protocol\n    The part of the OSPF protocol used to establish and maintain\n\
    \    neighbor relationships.  On multi-access networks the Hello protocol\n  \
    \  can also dynamically discover neighboring routers.\nDesignated Router\n   \
    \ Each multi-access network that has at least two attached routers has\n    a\
    \ Designated Router.  The Designated Router generates a link state\n    advertisement\
    \ for the multi-access network and has other special\n    responsibilities in\
    \ the running of the protocol.  The Designated\n    Router is elected by the Hello\
    \ Protocol.\n    The Designated Router concept enables a reduction in the number\
    \ of\n    adjacencies required on a multi-access network.  This in turn\n    reduces\
    \ the amount of routing protocol traffic and the size of the\n    topological\
    \ database.\nLower-level protocols\n    The underlying network access protocols\
    \ that provide services to the\n    Internet Protocol and in turn the OSPF protocol.\
    \  Examples of these\n    are the X.25 packet and frame levels for PDNs, and the\
    \ ethernet data\n    link layer for ethernets.\n1.3 Brief history of SPF-based\
    \ routing technology\nOSPF is an SPF-based routing protocol.  Such protocols are\
    \ also referred\nto in the literature as link-state or distributed-database protocols.\n\
    This section gives a brief description of the developments in SPF-based\ntechnology\
    \ that have influenced the OSPF protocol.\nThe first SPF-based routing protocol\
    \ was developed for use in the\nARPANET packet switching network.  This protocol\
    \ is described in\n[McQuillan].  It has formed the starting point for all other\
    \ SPF-based\nprotocols.  The homogeneous Arpanet environment, i.e., single-vendor\n\
    packet switches connected by synchronous serial lines, simplified the\ndesign\
    \ and implementation of the original protocol.\nModifications to this protocol\
    \ were proposed in [Perlman].  These\nmodifications dealt with increasing the\
    \ fault tolerance of the routing\nprotocol through, among other things, adding\
    \ a checksum to the link\nstate advertisements (thereby detecting database corruption).\
    \  The paper\nalso included means for reducing the routing traffic overhead in\
    \ an\nSPF-based protocol.  This was accomplished by introducing mechanisms\nwhich\
    \ enabled the interval between link state advertisements to be\nincreased by an\
    \ order of magnitude.\nAn SPF-based algorithm has also been proposed for use as\
    \ an ISO IS-IS\nrouting protocol.  This protocol is described in [DEC].  The protocol\n\
    includes methods for data and routing traffic reduction when operating\nover broadcast\
    \ networks.  This is accomplished by election of a\nDesignated Router for each\
    \ broadcast network, which then originates a\nlink state advertisement for the\
    \ network.\nThe OSPF subcommittee of the IETF has extended this work in developing\n\
    the OSPF protocol.  The Designated Router concept has been greatly\nenhanced to\
    \ further reduce the amount of routing traffic required.\nMulticast capabilities\
    \ are utilized for additional routing bandwidth\nreduction.  An area routing scheme\
    \ has been developed enabling\ninformation hiding/protection/reduction.  Finally,\
    \ the algorithm has\nbeen modified for efficient operation in the internet environment.\n\
    1.4 Organization of this document\nThe first three sections of this specification\
    \ give a general overview\nof the protocol's capabilities and functions.  Sections\
    \ 4-16 explain the\nprotocol's mechanisms in detail.  Packet formats, protocol\
    \ constants,\nconfiguration items and required management statistics are specified\
    \ in\nthe appendices.\nLabels such as HelloInterval encountered in the text refer\
    \ to protocol\nconstants.  They may or may not be configurable.  The architectural\n\
    constants are explained in Appendix B.  The configurable constants are\nexplained\
    \ in Appendix C.\nThe detailed specification of the protocol is presented in terms\
    \ of data\nstructures.  This is done in order to make the explanation more precise.\n\
    Implementations of the protocol are required to support the\nfunctionality described,\
    \ but need not use the precise data structures\nthat appear in this paper.\n2.\
    \ The Topological Database\nThe database of the Autonomous System's topology describes\
    \ a directed\ngraph.  The vertices of the graph consist of routers and networks.\
    \  A\ngraph edge connects two routers when they are attached via a physical\n\
    point-to-point network.  An edge connecting a router to a network\nindicates that\
    \ the router has an interface on the network.\nThe vertices of the graph can be\
    \ further typed according to function.\nOnly some of these types carry transit\
    \ data traffic; that is, traffic\nthat is neither locally originated nor locally\
    \ destined.  Vertices that\ncan carry transit traffic are indicated on the graph\
    \ by having both\nincoming and outgoing edges.\n                   Vertex type\
    \   Vertex name    Transit?\n                   _____________________________________\n\
    \                   1             Router         yes\n                   2   \
    \          Network        yes\n                   3             Stub network \
    \  no\n                        Table 1: OSPF vertex types.\nOSPF supports the\
    \ following types of physical networks:\nPoint-to-point networks\n    A network\
    \ that joins a single pair of routers.  A 56Kb serial line\n    is an example\
    \ of a point-to-point network.\nBroadcast networks\n    Networks supporting many\
    \ (more than two) attached routers, together\n    with the capability to address\
    \ a single physical message to all of\n    the attached routers (broadcast). \
    \ Neighboring routers are\n    discovered dynamically on these nets using OSPF's\
    \ Hello Protocol.\n    The Hello Protocol itself takes advantage of the broadcast\n\
    \    capability.  The protocol makes further use of multicast\n    capabilities,\
    \ if they exist.  An ethernet is an example of a\n    broadcast network.\nNon-broadcast\
    \ networks\n    Networks supporting many (more than two) routers, but having no\n\
    \    broadcast capability.  Neighboring routers are also discovered on\n    these\
    \ nets using OSPF's Hello Protocol.  However, due to the lack of\n    broadcast\
    \ capability, some configuration information is necessary\n    for the correct\
    \ operation of the Hello Protocol.  On these networks,\n    OSPF protocol packets\
    \ that are normally multicast need to be sent to\n    each neighboring router,\
    \ in turn.  An X.25 Public Data Network (PDN)\n    is an example of a non-broadcast\
    \ network.\nThe neighborhood of each network node in the graph depends on whether\n\
    the network has multi-access capabilities (either broadcast or non-\nbroadcast)\
    \ and, if so, the number of routers having an interface to the\nnetwork.  The\
    \ three cases are depicted in Figure 1.  Rectangles indicate\nrouters.  Circles\
    \ and oblongs indicate multi-access networks.  Router\nnames are prefixed with\
    \ the letters RT and network names with N.  Router\ninterface names are prefixed\
    \ by I.  Lines between routers indicate\npoint-to-point networks.  The left side\
    \ of the figure shows a network\nwith its connected routers, with the resulting\
    \ graph shown on the right.\nTwo routers joined by a point-to-point network are\
    \ represented in the\ndirected graph as being directly connected by a pair of\
    \ edges, one in\neach direction.  Interfaces to physical point-to-point networks\
    \ need not\nbe assigned IP addresses.  Such a point-to-point network is called\n\
    unnumbered.  The graphical representation of point-to-point networks is\ndesigned\
    \ so that unnumbered networks can be supported naturally.  When\ninterface addresses\
    \ exist, they are modelled as stub routes.  Note that\neach router would then\
    \ have a stub connection to the other router's\ninterface address (see Figure\
    \ 1).\nWhen multiple routers are attached to a multi-access network, the\ndirected\
    \ graph shows all routers bidirectionally connected to the\nnetwork vertex (again,\
    \ see Figure 1).  If only a single router is\nattached to a multi-access network,\
    \ the network will appear in the\ndirected graph as a stub connection.\nEach network\
    \ (stub or transit) in the graph has an IP address and\nassociated network mask.\
    \  The mask indicates the number of nodes on the\nnetwork.  Hosts attached directly\
    \ to routers (referred to as host\nroutes) appear on the graph as stub networks.\
    \  The network mask for a\nhost route is always 0xffffffff, which indicates the\
    \ presence of a\nsingle node.\nFigure 2 shows a sample map of an Autonomous System.\
    \  The rectangle\nlabelled H1 indicates a host, which has a SLIP connection to\
    \ router\nRT12.  Router RT12 is therefore advertising a host route.  Lines between\n\
    \                 ______________________________________\n                 (Figure\
    \ not included in text version.)\n                    Figure 1: Network map components\n\
    \                 ______________________________________\nrouters indicate physical\
    \ point-to-point networks.  The only point-to-\npoint network that has been assigned\
    \ interface addresses is the one\njoining routers RT6 and RT10.  Routers RT5 and\
    \ RT7 have EGP connections\nto other Autonomous Systems.  A set of EGP-learned\
    \ routes have been\ndisplayed for both of these routers.\nA cost is associated\
    \ with the output side of each router interface.\nThis cost is configurable by\
    \ the system administrator.  The lower the\ncost, the more likely the interface\
    \ is to be used to forward data\ntraffic.  Costs are also associated with the\
    \ externally derived routing\ndata (e.g., the EGP-learned routes).\nThe directed\
    \ graph resulting from the map in Figure 2 is depicted in\nFigure 3.  Arcs are\
    \ labelled with the cost of the corresponding router\noutput interface.  Arcs\
    \ having no labelled cost have a cost of 0.  Note\nthat arcs leading from networks\
    \ to routers always have cost 0; they are\nsignificant nonetheless.  Note also\
    \ that the externally derived routing\ndata appears on the graph as stubs.\nThe\
    \ topological database (or what has been referred to above as the\ndirected graph)\
    \ is pieced together from link state advertisements\ngenerated by the routers.\
    \  The neighborhood of each transit vertex is\nrepresented in a single, separate\
    \ link state advertisement.  Figure 4\nshows graphically the link state representation\
    \ of the two kinds of\ntransit vertices: routers and multi-access networks.  Router\
    \ RT12 has an\n                 ______________________________________\n     \
    \            (Figure not included in text version.)\n                  Figure\
    \ 2: A sample Autonomous System\n                 ______________________________________\n\
    \               __________________________________________\n                (Figures\
    \ not included in text version.)\n                 Figure 3: The resulting directed\
    \ graph\n               Figure 4: Individual link state components\n         \
    \      __________________________________________\ninterface to two broadcast\
    \ networks and a SLIP line to a host.  Network\nN6 is a broadcast network with\
    \ three attached routers.  The cost of all\nlinks from network N6 to its attached\
    \ routers is 0.  Note that the link\nstate advertisement for network N6 is actually\
    \ generated by one of the\nattached routers: the router that has been elected\
    \ Designated Router for\nthe network.\n2.1 The shortest-path tree\nWhen no OSPF\
    \ areas are configured, each router in the Autonomous System\nhas an identical\
    \ topological database, leading to an identical graphical\nrepresentation.  A\
    \ router generates its routing table from this graph by\ncalculating a tree of\
    \ shortest paths with the router itself as root.\nObviously, the shortest-path\
    \ tree depends on the router doing the\ncalculation.  The shortest-path tree for\
    \ router RT6 in our example is\ndepicted in Figure 5.\nThe tree gives the entire\
    \ route to any destination network or host.\nHowever, only the next hop to the\
    \ destination is used in the forwarding\nprocess.  Note also that the best route\
    \ to any router has also been\ncalculated.  For the processing of external data,\
    \ we note the next hop\nand distance to any router advertising external routes.\
    \  The resulting\nrouting table for router RT6 is pictured in Table 2.  Note that\
    \ there is\na separate route for each end of a numbered serial line (in this case,\n\
    the serial line between routers RT6 and RT10).\nRoutes to networks belonging to\
    \ other AS'es (such as N12) appear as\ndashed lines on the shortest path tree\
    \ in Figure 5.  Use of this\nexternally derived routing information is considered\
    \ in the next\nsection.\n                 ______________________________________\n\
    \                 (Figure not included in text version.)\n                 Figure\
    \ 5: The SPF tree for router RT6\n                 ______________________________________\n\
    \                   Destination   Next  Hop   Distance\n                   __________________________________\n\
    \                   N1            RT3         10\n                   N2      \
    \      RT3         10\n                   N3            RT3         7\n      \
    \             N4            RT3         8\n                   Ib            *\
    \           7\n                   Ia            RT10        12\n             \
    \      N6            RT10        8\n                   N7            RT10    \
    \    12\n                   N8            RT10        10\n                   N9\
    \            RT10        11\n                   N10           RT10        13\n\
    \                   N11           RT10        14\n                   H1      \
    \      RT10        21\n                   __________________________________\n\
    \                   RT5           RT5         6\n                   RT7      \
    \     RT10        8\n    Table 2: The portion of router RT6's routing table listing\
    \ local\n                             destinations.\n2.2 Use of external routing\
    \ information\nAfter the tree is created the external routing information is examined.\n\
    This external routing information may originate from another routing\nprotocol\
    \ such as EGP, or be statically configured (static routes).\nDefault routes can\
    \ also be included as part of the Autonomous System's\nexternal routing information.\n\
    External routing information is flooded unaltered throughout the AS.  In\nour\
    \ example, all the routers in the Autonomous System know that router\nRT7 has\
    \ two external routes, with metrics 2 and 9.\nOSPF supports two types of external\
    \ metrics.  Type 1 external metrics\nare equivalent to the link state metric.\
    \  Type 2 external metrics are\ngreater than the cost of any path internal to\
    \ the AS.  Use of Type 2\nexternal metrics assumes that routing between AS'es\
    \ is the major cost of\nrouting a packet, and eliminates the need for conversion\
    \ of external\ncosts to internal link state metrics.\nHere is an example of Type\
    \ 1 external metric processing.  Suppose that\nthe routers RT7 and RT5 in Figure\
    \ 2 are advertising Type 1 external\nmetrics.  For each external route, the distance\
    \ from Router RT6 is\ncalculated as the sum of the external route's cost and the\
    \ distance from\nRouter RT6 to the advertising router.  For every external destination,\n\
    the router advertising the shortest route is discovered, and the next\nhop to\
    \ the advertising router becomes the next hop to the destination.\nBoth Router\
    \ RT5 and RT7 are advertising an external route to destination\nnetwork N12. \
    \ Router RT7 is preferred since it is advertising N12 at a\ndistance of 10 (8+2)\
    \ to Router RT6, which is better than router RT5's 14\n(6+8).  Table 3 shows the\
    \ entries that are added to the routing table\nwhen external routes are examined:\n\
    \                     Destination   Next  Hop   Distance\n                   \
    \  __________________________________\n                     N12           RT10\
    \        10\n                     N13           RT5         14\n             \
    \        N14           RT5         14\n                     N15           RT10\
    \        17\n    Table 3: The portion of router RT6's routing table listing external\n\
    \                               destinations.\nProcessing of Type 2 external metrics\
    \ is simpler.  The AS boundary\nrouter advertising the smallest external metric\
    \ is chosen, regardless of\nthe internal distance to the AS boundary router. \
    \ Suppose in our example\nboth router RT5 and router RT7 were advertising Type\
    \ 2 external routes.\nThen all traffic destined for network N12 would be forwarded\
    \ to router\nRT7, since 2 < 8.  When several equal-cost Type 2 routes exist, the\n\
    internal distance to the advertising routers is used to break the tie.\nBoth Type\
    \ 1 and Type 2 external metrics can be present in the AS at the\nsame time.  In\
    \ that event, Type 1 external metrics always take\nprecedence.\nThis section has\
    \ assumed that packets destined for external destinations\nare always routed through\
    \ the advertising AS boundary router.  This is\nnot always desirable.  For example,\
    \ suppose in Figure 2 there is an\nadditional router attached to network N6, called\
    \ Router RTX.  Suppose\nfurther that RTX does not participate in OSPF routing,\
    \ but does exchange\nEGP information with the AS boundary router RT7.  Then, router\
    \ RT7 would\nend up advertising OSPF external routes for all destinations that\
    \ should\nbe routed to RTX.  An extra hop will sometimes be introduced if packets\n\
    for these destinations need always be routed first to router RT7 (the\nadvertising\
    \ router).\nTo deal with this situation, the OSPF protocol allows an AS boundary\n\
    router to specify a \"forwarding address\" in its external advertisements.\nIn\
    \ the above example, Router RT7 would specify RTX's IP address as the\n\"forwarding\
    \ address\" for all those destinations whose packets should be\nrouted directly\
    \ to RTX.\nThe \"forwarding address\" has one other application.  It enables routers\n\
    in the Autonomous System's interior to function as \"route servers\".  For\nexample,\
    \ in Figure 2 the router RT6 could become a route server, gaining\nexternal routing\
    \ information through a combination of static\nconfiguration and external routing\
    \ protocols.  RT6 would then start\nadvertising itself as an AS boundary router,\
    \ and would originate a\ncollection of OSPF external advertisements.  In each\
    \ external\nadvertisement, router RT6 would specify the correct Autonomous System\n\
    exit point to use for the destination through appropriate setting of the\nadvertisement's\
    \ \"forwarding address\" field.\n2.3 Equal-cost multipath\nThe above discussion\
    \ has been simplified by considering only a single\nroute to any destination.\
    \  In reality, if multiple equal-cost routes to\na destination exist, they are\
    \ all discovered and used.  This requires no\nconceptual changes to the algorithm,\
    \ and its discussion is postponed\nuntil we consider the tree-building process\
    \ in more detail.\nWith equal cost multipath, a router potentially has several\
    \ available\nnext hops towards any given destination.\n2.4 TOS-based routing\n\
    OSPF can calculate a separate set of routes for each IP Type of Service.\nThe\
    \ IP TOS values are represented in OSPF exactly as they appear in the\nIP packet\
    \ header.  This means that, for any destination, there can\npotentially be multiple\
    \ routing table entries, one for each IP TOS.\nUp to this point, all examples\
    \ shown have assumed that routes do not\nvary on TOS.  In order to differentiate\
    \ routes based on TOS, separate\ninterface costs can be configured for each TOS.\
    \  For example, in Figure\n2 there could be multiple costs (one for each TOS)\
    \ listed for each\ninterface.  A cost for TOS 0 must always be specified.\nWhen\
    \ interface costs vary based on TOS, a separate shortest path tree is\ncalculated\
    \ for each TOS (see Section 2.1).  In addition, external costs\ncan vary based\
    \ on TOS.  For example, in Figure 2 router RT7 could\nadvertise a separate type\
    \ 1 external metric for each TOS.  Then, when\ncalculating the TOS X distance\
    \ to network N15 the cost of the shortest\nTOS X path to RT7 would be added to\
    \ the TOS X cost advertised by RT7\n(see Section 2.2).\nAll OSPF implementations\
    \ must be capable of calculating routes based on\nTOS.  However, OSPF routers\
    \ can be configured to route all packets on\nthe TOS 0 path (see Appendix C),\
    \ eliminating the need to calculate non-\nzero TOS paths.  This can be used to\
    \ conserve routing table space and\nprocessing resources in the router.  These\
    \ TOS-0-only routers can be\nmixed with routers that do route based on TOS.  TOS-0-only\
    \ routers will\nbe avoided as much as possible when forwarding traffic requesting\
    \ a\nnon-zero TOS.\nIt may be the case that no path exists for some non-zero TOS,\
    \ even if\nthe router is calculating non-zero TOS paths.  In that case, packets\n\
    requesting that non-zero TOS are routed along the TOS 0 path (see\nSection 11.1).\n\
    3. Splitting the AS into Areas\nOSPF allows collections of contiguous networks\
    \ and hosts to be grouped\ntogether.  Such a group, together with the routers\
    \ having interfaces to\nany one of the included networks, is called an area. \
    \ Each area runs a\nseparate copy of the basic SPF routing algorithm.  This means\
    \ that each\narea has its own topological database and corresponding graph, as\n\
    explained in the previous section.\nThe topology of an area is invisible from\
    \ the outside of the area.\nConversely, routers internal to a given area know\
    \ nothing of the\ndetailed topology external to the area.  This isolation of knowledge\n\
    enables the protocol to effect a marked reduction in routing traffic as\ncompared\
    \ to treating the entire Autonomous System as a single SPF\ndomain.\nWith the\
    \ introduction of areas, it is no longer true that all routers in\nthe AS have\
    \ an identical topological database.  A router actually has a\nseparate topological\
    \ database for each area it is connected to.\n(Routers connected to multiple areas\
    \ are called area border routers).\nTwo routers belonging to the same area have,\
    \ for that area, identical\narea topological databases.\nRouting in the Autonomous\
    \ System takes place on two levels, depending on\nwhether the source and destination\
    \ of a packet reside in the same area\n(intra-area routing is used) or different\
    \ areas (inter-area routing is\nused).  In intra-area routing, the packet is routed\
    \ solely on\ninformation obtained within the area; no routing information obtained\n\
    from outside the area can be used.  This protects intra-area routing\nfrom the\
    \ injection of bad routing information.  We discuss inter-area\nrouting in Section\
    \ 3.2.\n3.1 The backbone of the Autonomous System\nThe backbone consists of those\
    \ networks not contained in any area, their\nattached routers, and those routers\
    \ that belong to multiple areas.  The\nbackbone must be contiguous.\nIt is possible\
    \ to define areas in such a way that the backbone is no\nlonger contiguous.  In\
    \ this case the system administrator must restore\nbackbone connectivity by configuring\
    \ virtual links.\nVirtual links can be configured between any two backbone routers\
    \ that\nhave an interface to a common non-backbone area.  Virtual links belong\n\
    to the backbone.  The protocol treats two routers joined by a virtual\nlink as\
    \ if they were connected by an unnumbered point-to-point network.\nOn the graph\
    \ of the backbone, two such routers are joined by arcs whose\ncosts are the intra-area\
    \ distances between the two routers.  The routing\nprotocol traffic that flows\
    \ along the virtual link uses intra-area\nrouting only.\nThe backbone is responsible\
    \ for distributing routing information between\nareas.  The backbone itself has\
    \ all of the properties of an area.  The\ntopology of the backbone is invisible\
    \ to each of the areas, while the\nbackbone itself knows nothing of the topology\
    \ of the areas.\n3.2 Inter-area routing\nWhen routing a packet between two areas\
    \ the backbone is used.  The path\nthat the packet will travel can be broken up\
    \ into three contiguous\npieces: an intra-area path from the source to an area\
    \ border router, a\nbackbone path between the source and destination areas, and\
    \ then another\nintra-area path to the destination.  The algorithm finds the set\
    \ of such\npaths that have the smallest cost.\nLooking at this another way, inter-area\
    \ routing can be pictured as\nforcing a star configuration on the Autonomous System,\
    \ with the backbone\nas hub and and each of the areas as spokes.\nThe topology\
    \ of the backbone dictates the backbone paths used between\nareas.  The topology\
    \ of the backbone can be enhanced by adding virtual\nlinks.  This gives the system\
    \ administrator some control over the routes\ntaken by inter-area traffic.\nThe\
    \ correct area border router to use as the packet exits the source\narea is chosen\
    \ in exactly the same way routers advertising external\nroutes are chosen.  Each\
    \ area border router in an area summarizes for\nthe area its cost to all networks\
    \ external to the area.  After the SPF\ntree is calculated for the area, routes\
    \ to all other networks are\ncalculated by examining the summaries of the area\
    \ border routers.\n3.3 Classification of routers\nBefore the introduction of areas,\
    \ the only OSPF routers having a\nspecialized function were those advertising\
    \ external routing\ninformation, such as router RT5 in Figure 2.  When the AS\
    \ is split into\nOSPF areas, the routers are further divided according to function\
    \ into\nthe following four overlapping categories:\nInternal routers\n    A router\
    \ with all directly connected networks belonging to the same\n    area.  Routers\
    \ with only backbone interfaces also belong to this\n    category.  These routers\
    \ run a single copy of the basic routing\n    algorithm.\nArea border routers\n\
    \    A router that attaches to multiple areas.  Area border routers run\n    multiple\
    \ copies of the basic algorithm, one copy for each attached\n    area and an additional\
    \ copy for the backbone.  Area border routers\n    condense the topological information\
    \ of their attached areas for\n    distribution to the backbone.  The backbone\
    \ in turn distributes the\n    information to the other areas.\nBackbone routers\n\
    \    A router that has an interface to the backbone.  This includes all\n    routers\
    \ that interface to more than one area (i.e., area border\n    routers).  However,\
    \ backbone routers do not have to be area border\n    routers.  Routers with all\
    \ interfaces connected to the backbone are\n    considered to be internal routers.\n\
    AS boundary routers\n    A router that exchanges routing information with routers\
    \ belonging\n    to other Autonomous Systems.  Such a router has AS external routes\n\
    \    that are advertised throughout the Autonomous System.  The path to\n    each\
    \ AS boundary router is known by every router in the AS.  This\n    classification\
    \ is completely independent of the previous\n    classifications: AS boundary\
    \ routers may be internal or area border\n    routers, and may or may not participate\
    \ in the backbone.\n3.4 A sample area configuration\nFigure 6 shows a sample area\
    \ configuration.  The first area consists of\nnetworks N1-N4, along with their\
    \ attached routers RT1-RT4.  The second\narea consists of networks N6-N8, along\
    \ with their attached routers RT7,\nRT8, RT10, RT11.  The third area consists\
    \ of networks N9-N11 and host\nH1, along with their attached routers RT9, RT11,\
    \ RT12.  The third area\nhas been configured so that networks N9-N11 and host\
    \ H1 will all be\ngrouped into a single route, when advertised external to the\
    \ area (see\nSection 3.5 for more details).\nIn Figure 6, routers RT1, RT2, RT5,\
    \ RT6, RT8, RT9 and RT12 are internal\nrouters.  Routers RT3, RT4, RT7, RT10 and\
    \ RT11 are area border routers.\nFinally as before, routers RT5 and RT7 are AS\
    \ boundary routers.\nFigure 7 shows the resulting topological database for the\
    \ Area 1.  The\nfigure completely describes that area's intra-area routing.  It\
    \ also\nshows the complete view of the internet for the two internal routers RT1\n\
    and RT2.  It is the job of the area border routers, RT3 and RT4, to\nadvertise\
    \ into Area 1 the distances to all destinations external to the\narea.  These\
    \ are indicated in Figure 7 by the dashed stub routes.  Also,\nRT3 and RT4 must\
    \ advertise into Area 1 the location of the AS boundary\nrouters RT5 and RT7.\
    \  Finally, external advertisements from RT5 and RT7\nare flooded throughout the\
    \ entire AS, and in particular throughout Area\n1.  These advertisements are included\
    \ in Area 1's database, and yield\nroutes to networks N12-N15.\nRouters RT3 and\
    \ RT4 must also summarize Area 1's topology for\ndistribution to the backbone.\
    \  Their backbone advertisements are shown\nin Table 4.  These summaries show\
    \ which networks are contained in Area 1\n(i.e., networks N1-N4), and the distance\
    \ to these networks from the\nrouters RT3 and RT4 respectively.\nThe topological\
    \ database for the backbone is shown in Figure 8.  The set\nof routers pictured\
    \ are the backbone routers.  Router RT11 is a backbone\nrouter because it belongs\
    \ to two areas.  In order to make the backbone\nconnected, a virtual link has\
    \ been configured between routers R10 and\nR11.\n               __________________________________________\n\
    \                 (Figure not included in text version.)\n               Figure\
    \ 6: A sample OSPF area configuration\n               __________________________________________\n\
    \                     Network   RT3 adv.   RT4 adv.\n                     _____________________________\n\
    \                     N1        4          4\n                     N2        4\
    \          4\n                     N3        1          1\n                  \
    \   N4        2          3\n  Table 4: Networks advertised to the backbone by\
    \ routers RT3 and RT4.\n                 ______________________________________\n\
    \                 (Figure not included in text version.)\n                   \
    \   Figure 7: Area 1's Database\n                    Figure 8: The backbone database\n\
    \                 ______________________________________\nAgain, routers RT3,\
    \ RT4, RT7, RT10 and RT11 are area border routers.  As\nrouters RT3 and RT4 did\
    \ above, they have condensed the routing\ninformation of their attached areas\
    \ for distribution via the backbone;\nthese are the dashed stubs that appear in\
    \ Figure 8.  Remember that the\nthird area has been configured to condense networks\
    \ N9-N11 and Host H1\ninto a single route.  This yields a single dashed line for\
    \ networks N9-\nN11 and Host H1 in Figure 8.  Routers RT5 and RT7 are AS boundary\n\
    routers; their externally derived information also appears on the graph\nin Figure\
    \ 8 as stubs.\nThe backbone enables the exchange of summary information between\
    \ area\nborder routers.  Every area border router hears the area summaries from\n\
    all other area border routers.  It then forms a picture of the distance\nto all\
    \ networks outside of its area by examining the collected\nadvertisements, and\
    \ adding in the backbone distance to each advertising\nrouter.\nAgain using routers\
    \ RT3 and RT4 as an example, the procedure goes as\nfollows: They first calculate\
    \ the SPF tree for the backbone.  This gives\nthe distances to all other area\
    \ border routers.  Also noted are the\ndistances to networks (Ia and Ib) and AS\
    \ boundary routers (RT5 and RT7)\nthat belong to the backbone.  This calculation\
    \ is shown in Table 5.\nNext, by looking at the area summaries from these area\
    \ border routers,\nRT3 and RT4 can determine the distance to all networks outside\
    \ their\n                 Area  border   dist  from   dist  from\n           \
    \      router         RT3          RT4\n                 ______________________________________\n\
    \                 to  RT3        *            21\n                 to  RT4   \
    \     22           *\n                 to  RT7        20           14\n      \
    \           to  RT10       15           22\n                 to  RT11       18\
    \           25\n                 ______________________________________\n    \
    \             to  Ia         20           27\n                 to  Ib        \
    \ 15           22\n                 ______________________________________\n \
    \                to  RT5        14           8\n                 to  RT7     \
    \   20           14\n     Table 5: Backbone distances calculated by routers RT3\
    \ and RT4.\narea.  These distances are then advertised internally to the area\
    \ by RT3\nand RT4.  The advertisements that router RT3 and RT4 will make into\
    \ Area\n1 are shown in Table 6.  Note that Table 6 assumes that an area range\n\
    has been configured for the backbone which groups I5 and I6 into a\nsingle advertisement.\n\
    The information imported into Area 1 by routers RT3 and RT4 enables an\ninternal\
    \ router, such as RT1, to choose an area border router\nintelligently.  Router\
    \ RT1 would use RT4 for traffic to network N6, RT3\nfor traffic to network N10,\
    \ and would load share between the two for\n                   Destination   RT3\
    \ adv.   RT4 adv.\n                   _________________________________\n    \
    \               Ia,Ib         15         22\n                   N6           \
    \ 16         15\n                   N7            20         19\n            \
    \       N8            18         18\n                   N9-N11,H1     19     \
    \    26\n                   _________________________________\n              \
    \     RT5           14         8\n                   RT7           20        \
    \ 14\n  Table 6: Destinations advertised into Area 1 by routers RT3 and RT4.\n\
    traffic to network N8.\nRouter RT1 can also determine in this manner the shortest\
    \ path to the AS\nboundary routers RT5 and RT7.  Then, by looking at RT5 and RT7's\n\
    external advertisements, router RT1 can decide between RT5 or RT7 when\nsending\
    \ to a destination in another Autonomous System (one of the\nnetworks N12-N15).\n\
    Note that a failure of the line between routers RT6 and RT10 will cause\nthe backbone\
    \ to become disconnected.  Configuring another virtual link\nbetween routers RT7\
    \ and RT10 will give the backbone more connectivity\nand more resistance to such\
    \ failures.  Also, a virtual link between RT7\nand RT10 would allow a much shorter\
    \ path between the third area\n(containing N9) and the router RT7, which is advertising\
    \ a good route to\nexternal network N12.\n3.5 IP subnetting support\nOSPF attaches\
    \ an IP address mask to each advertised route.  The mask\nindicates the range\
    \ of addresses being described by the particular\nroute.  For example, a summary\
    \ advertisement for the destination\n128.185.0.0 with a mask of 0xffff0000 actually\
    \ is describing a single\nroute to the collection of destinations 128.185.0.0\
    \ - 128.185.255.255.\nSimilarly, host routes are always advertised with a mask\
    \ of 0xffffffff,\nindicating the presence of only a single destination.\nIncluding\
    \ the mask with each advertised destination enables the\nimplementation of what\
    \ is commonly referred to as variable-length subnet\nmasks.  This means that a\
    \ single IP class A, B, or C network number can\nbe broken up into many subnets\
    \ of various sizes.  For example, the\nnetwork 128.185.0.0 could be broken up\
    \ into 64 variable-sized subnets:\n16 subnets of size 4K, 16 subnets of size 256,\
    \ and 32 subnets of size 8.\nTable 7 shows some of the resulting network addresses\
    \ together with\ntheir masks:\n              Network address   IP address mask\
    \   Subnet size\n              _______________________________________________\n\
    \              128.185.16.0      0xfffff000        4K\n              128.185.1.0\
    \       0xffffff00        256\n              128.185.0.8       0xfffffff8    \
    \    8\n                     Table 7: Some sample subnet sizes.\nThere are many\
    \ possible ways of dividing up a class A, B, and C network\ninto variable sized\
    \ subnets.  The precise procedure for doing so is\nbeyond the scope of this specification.\
    \  The specification however\nestablishes the following guideline: When an IP\
    \ packet is forwarded, it\nis always forwarded to the network that is the best\
    \ match for the\npacket's destination.  Here best match is synonymous with the\
    \ longest or\nmost specific match.  For example, the default route with destination\
    \ of\n0.0.0.0 and mask 0x00000000 is always a match for every IP destination.\n\
    Yet it is always less specific than any other match.  Subnet masks must\nbe assigned\
    \ so that the best match for any IP destination is\nunambiguous.\nThe OSPF area\
    \ concept is modelled after an IP subnetted network.  OSPF\nareas have been loosely\
    \ defined to be a collection of networks.  In\nactuality, an OSPF area is specified\
    \ to be a list of address ranges (see\nSection C.2 for more details).  Each address\
    \ range is defined as an\n[address,mask] pair.  Many separate networks may then\
    \ be contained in a\nsingle address range, just as a subnetted network is composed\
    \ of many\nseparate subnets.  Area border routers then summarize the area contents\n\
    (for distribution to the backbone) by advertising a single route for\neach address\
    \ range.  The cost of the route is the minimum cost to any of\nthe networks falling\
    \ in the specified range.\nFor example, an IP subnetted network can be configured\
    \ as a single OSPF\narea.  In that case, the area would be defined as a single\
    \ address\nrange: a class A, B, or C network number along with its natural IP\
    \ mask.\nInside the area, any number of variable sized subnets could be defined.\n\
    External to the area, a single route for the entire subnetted network\nwould be\
    \ distributed, hiding even the fact that the network is subnetted\nat all.  The\
    \ cost of this route is the minimum of the set of costs to\nthe component subnets.\n\
    3.6 Supporting stub areas\nIn some Autonomous Systems, the majority of the topological\
    \ database may\nconsist of external advertisements.  An OSPF external advertisement\
    \ is\nusually flooded throughout the entire AS.  However, OSPF allows certain\n\
    areas to be configured as \"stub areas\".  External advertisements are not\nflooded\
    \ into/throughout stub areas; routing to AS external destinations\nin these areas\
    \ is based on a (per-area) default only.  This reduces the\ntopological database\
    \ size, and therefore the memory requirements, for a\nstub area's internal routers.\n\
    In order to take advantage of the OSPF stub area support, default\nrouting must\
    \ be used in the stub area.  This is accomplished as follows.\nOne or more of\
    \ the stub area's area border routers must advertise a\ndefault route into the\
    \ stub area via summary advertisements.  These\nsummary defaults are flooded throughout\
    \ the stub area, but no further.\n(For this reason these defaults pertain only\
    \ to the particular stub\narea).  These summary default routes will match any\
    \ destination that is\nnot explicitly reachable by an intra-area or inter-area\
    \ path (i.e., AS\nexternal destinations).\nAn area can be configured as stub when\
    \ there is a single exit point from\nthe area, or when the choice of exit point\
    \ need not be made on a per-\nexternal-destination basis.  For example, area 3\
    \ in Figure 6 could be\nconfigured as a stub area, because all external traffic\
    \ must travel\nthough its single area border router RT11.  If area 3 were configured\
    \ as\na stub, router RT11 would advertise a default route for distribution\ninside\
    \ area 3 (in a summary advertisement), instead of flooding the\nexternal advertisements\
    \ for networks N12-N15 into/throughout the area.\nThe OSPF protocol ensures that\
    \ all routers belonging to an area agree on\nwhether the area has been configured\
    \ as a stub.  This guarantees that no\nconfusion will arise in the flooding of\
    \ external advertisements.\nThere are a couple of restrictions on the use of stub\
    \ areas.  Virtual\nlinks cannot be configured through stub areas.  In addition,\
    \ AS boundary\nrouters cannot be placed internal to stub areas.\n3.7 Partitions\
    \ of areas\nOSPF does not actively attempt to repair area partitions.  When an\
    \ area\nbecomes partitioned, each component simply becomes a separate area.  The\n\
    backbone then performs routing between the new areas.  Some destinations\nreachable\
    \ via intra-area routing before the partition will now require\ninter-area routing.\n\
    In the previous section, an area was described as a list of address\nranges. \
    \ Any particular address range must still be completely contained\nin a single\
    \ component of the area partition.  This has to do with the\nway the area contents\
    \ are summarized to the backbone.  Also, the\nbackbone itself must not partition.\
    \  If it does, parts of the Autonomous\nSystem will become unreachable.  Backbone\
    \ partitions can be repaired by\nconfiguring virtual links (see Section 15).\n\
    Another way to think about area partitions is to look at the Autonomous\nSystem\
    \ graph that was introduced in Section 2.  Area IDs can be viewed\nas colors for\
    \ the graph's edges.[1] Each edge of the graph connects to a\nnetwork, or is itself\
    \ a point-to-point network.  In either case, the\nedge is colored with the network's\
    \ Area ID.\nA group of edges, all having the same color, and interconnected by\n\
    vertices, represents an area.  If the topology of the Autonomous System\nis intact,\
    \ the graph will have several regions of color, each color\nbeing a distinct Area\
    \ ID.\nWhen the AS topology changes, one of the areas may become partitioned.\n\
    The graph of the AS will then have multiple regions of the same color\n(Area ID).\
    \  The routing in the Autonomous System will continue to\nfunction as long as\
    \ these regions of same color are connected by the\nsingle backbone region.\n\
    4. Functional Summary\nA separate copy of OSPF's basic routing algorithm runs\
    \ in each area.\nRouters having interfaces to multiple areas run multiple copies\
    \ of the\nalgorithm.  A brief summary of the routing algorithm follows.\nWhen\
    \ a router starts, it first initializes the routing protocol data\nstructures.\
    \  The router then waits for indications from the lower-level\nprotocols that\
    \ its interfaces are functional.\nA router then uses the OSPF's Hello Protocol\
    \ to acquire neighbors.  The\nrouter sends Hello packets to its neighbors, and\
    \ in turn receives their\nHello packets.  On broadcast and point-to-point networks,\
    \ the router\ndynamically detects its neighboring routers by sending its Hello\
    \ packets\nto the multicast address AllSPFRouters.  On non-broadcast networks,\
    \ some\nconfiguration information is necessary in order to discover neighbors.\n\
    On all multi-access networks (broadcast or non-broadcast), the Hello\nProtocol\
    \ also elects a Designated router for the network.\nThe router will attempt to\
    \ form adjacencies with some of its newly\nacquired neighbors.  Topological databases\
    \ are synchronized between\npairs of adjacent routers.  On multi-access networks,\
    \ the Designated\nRouter determines which routers should become adjacent.\nAdjacencies\
    \ control the distribution of routing protocol packets.\nRouting protocol packets\
    \ are sent and received only on adjacencies.  In\nparticular, distribution of\
    \ topological database updates proceeds along\nadjacencies.\nA router periodically\
    \ advertises its state, which is also called link\nstate.  Link state is also\
    \ advertised when a router's state changes.  A\nrouter's adjacencies are reflected\
    \ in the contents of its link state\nadvertisements.  This relationship between\
    \ adjacencies and link state\nallows the protocol to detect dead routers in a\
    \ timely fashion.\nLink state advertisements are flooded throughout the area.\
    \  The flooding\nalgorithm is reliable, ensuring that all routers in an area have\
    \ exactly\nthe same topological database.  This database consists of the collection\n\
    of link state advertisements received from each router belonging to the\narea.\
    \  From this database each router calculates a shortest-path tree,\nwith itself\
    \ as root.  This shortest-path tree in turn yields a routing\ntable for the protocol.\n\
    4.1 Inter-area routing\nThe previous section described the operation of the protocol\
    \ within a\nsingle area.  For intra-area routing, no other routing information\
    \ is\npertinent.  In order to be able to route to destinations outside of the\n\
    area, the area border routers inject additional routing information into\nthe\
    \ area.  This additional information is a distillation of the rest of\nthe Autonomous\
    \ System's topology.\nThis distillation is accomplished as follows: Each area\
    \ border router is\nby definition connected to the backbone.  Each area border\
    \ router\nsummarizes the topology of its attached areas for transmission on the\n\
    backbone, and hence to all other area border routers.  A area border\nrouter then\
    \ has complete topological information concerning the\nbackbone, and the area\
    \ summaries from each of the other area border\nrouters.  From this information,\
    \ the router calculates paths to all\ndestinations not contained in its attached\
    \ areas.  The router then\nadvertises these paths to its attached areas.  This\
    \ enables the area's\ninternal routers to pick the best exit router when forwarding\
    \ traffic to\ndestinations in other areas.\n4.2 AS external routes\nRouters that\
    \ have information regarding other Autonomous Systems can\nflood this information\
    \ throughout the AS.  This external routing\ninformation is distributed verbatim\
    \ to every participating router.\nThere is one exception: external routing information\
    \ is not flooded into\n\"stub\" areas (see Section 3.6).\nTo utilize external\
    \ routing information, the path to all routers\nadvertising external information\
    \ must be known throughout the AS\n(excepting the stub areas).  For that reason,\
    \ the locations of these AS\nboundary routers are summarized by the (non-stub)\
    \ area border routers.\n4.3 Routing protocol packets\nThe OSPF protocol runs directly\
    \ over IP, using IP protocol 89.  OSPF\ndoes not provide any explicit fragmentation/reassembly\
    \ support.  When\nfragmentation is necessary, IP fragmentation/reassembly is used.\
    \  OSPF\nprotocol packets have been designed so that large protocol packets can\n\
    generally be split into several smaller protocol packets.  This practice\nis recommended;\
    \ IP fragmentation should be avoided whenever possible.\nRouting protocol packets\
    \ should always be sent with the IP TOS field set\nto 0.  If at all possible,\
    \ routing protocol packets should be given\npreference over regular IP data traffic,\
    \ both when being sent and\nreceived.  As an aid to accomplishing this, OSPF protocol\
    \ packets should\nhave their IP precedence field set to the value Internetwork\
    \ Control\n(see [RFC 791]).\nAll OSPF protocol packets share a common protocol\
    \ header that is\ndescribed in Appendix A.  The OSPF packet types are listed below\
    \ in\nTable 8.  Their formats are also described in Appendix A.\n         Type\
    \   Packet  name           Protocol  function\n         __________________________________________________________\n\
    \         1      Hello                  Discover/maintain  neighbors\n       \
    \  2      Database Description   Summarize database contents\n         3     \
    \ Link State Request     Database download\n         4      Link State Update\
    \      Database update\n         5      Link State Ack         Flooding acknowledgment\n\
    \                        Table 8: OSPF packet types.\nOSPF's Hello protocol uses\
    \ Hello packets to discover and maintain\nneighbor relationships.  The Database\
    \ Description and Link State Request\npackets are used in the forming of adjacencies.\
    \  OSPF's reliable update\nmechanism is implemented by the Link State Update and\
    \ Link State\nAcknowledgment packets.\nEach Link State Update packet carries a\
    \ set of new link state\nadvertisements one hop further away from their point\
    \ of origination.  A\nsingle Link State Update packet may contain the link state\n\
    advertisements of several routers.  Each advertisement is tagged with\nthe ID\
    \ of the originating router and a checksum of its link state\ncontents.  The five\
    \ different types of OSPF link state advertisements\nare listed below in Table\
    \ 9.\nLS     Advertisement        Advertisement description\ntype   name\n____________________________________________________________________________\n\
    1      Router links advs.   Originated by all routers. This\n       advs.    \
    \            advertisement describes the collected\n                         \
    \   states of the router's interfaces to an\n                            area.\
    \ Flooded throughout a single area\n                            only.\n____________________________________________________________________________\n\
    2      Network links        Originated for multi-access networks by\n       advs.\
    \                the Designated Router. This\n                            advertisement\
    \ contains the list of\n                            routers connected to the network.\n\
    \                            Flooded throughout a single area only.\nLS     Advertisement\
    \        Advertisement description\ntype   name\n____________________________________________________________________________\n\
    ____________________________________________________________________________\n\
    3,4    Summary link         Originated by area border routers, and\n       advs.\
    \                flooded throughout their associated\n                       \
    \     area. Each summary link advertisement\n                            describes\
    \ a route to a destination\n                            outside the area, yet\
    \ still inside the\n                            AS (i.e., an inter-area route).\
    \ Type 3\n                            advertisements describe routes to\n    \
    \                        networks. Type 4 advertisements\n                   \
    \         describe routes to AS boundary routers.\n____________________________________________________________________________\n\
    5      AS external          Originated by AS boundary routers, and\n       link\
    \ advs.           flooded throughout the AS. Each external\n                 \
    \           advertisement describes a route to a\n                           \
    \ destination in another Autonomous\n                            System. Default\
    \ routes for the AS can\n                            also be described by AS external\
    \ advertisements.\n                Table 9: OSPF link state advertisements.\n\
    As mentioned above, OSPF routing packets (with the exception of Hellos)\nare sent\
    \ only over adjacencies.  Note that this means that all protocol\npackets travel\
    \ a single IP hop, except those that are sent over virtual\nadjacencies.  The\
    \ IP source address of an OSPF protocol packet is one\nend of a router adjacency,\
    \ and the IP destination address is either the\nother end of the adjacency or\
    \ an IP multicast address.\n4.4 Basic implementation requirements\nAn implementation\
    \ of OSPF requires the following pieces of system\nsupport:\nTimers\n    Two different\
    \ kind of timers are required.  The first kind, called\n    single shot timers,\
    \ fire once and cause a protocol event to be\n    processed.  The second kind,\
    \ called interval timers, fire at\n    continuous intervals.  These are used for\
    \ the sending of packets at\n    regular intervals.  A good example of this is\
    \ the regular broadcast\n    of Hello packets (on broadcast networks).  The granularity\
    \ of both\n    kinds of timers is one second.\n    Interval timers should be implemented\
    \ to avoid drift.  In some\n    router implementations, packet processing can\
    \ affect timer\n    execution.  When multiple routers are attached to a single\
    \ network,\n    all doing broadcasts, this can lead to the synchronization of\n\
    \    routing packets (which should be avoided).  If timers cannot be\n    implemented\
    \ to avoid drift, small random amounts should be added\n    to/subtracted from\
    \ the timer interval at each firing.\nIP multicast\n    Certain OSPF packets use\
    \ IP multicast.  Support for receiving and\n    sending IP multicasts, along with\
    \ the appropriate lower-level\n    protocol support, is required.  These IP multicast\
    \ packets never\n    travel more than one hop.  For information on IP multicast,\
    \ see [RFC\n    1112].\nLower-level protocol support\n    The lower level protocols\
    \ referred to here are the network access\n    protocols, such as the Ethernet\
    \ data link layer.  Indications must\n    be passed from from these protocols\
    \ to OSPF as the network interface\n    goes up and down.  For example, on an\
    \ ethernet it would be valuable\n    to know when the ethernet transceiver cable\
    \ becomes unplugged.\nNon-broadcast lower-level protocol support\n    Remember\
    \ that non-broadcast networks are multi-access networks such\n    as a X.25 PDN.\
    \  On these networks, the Hello Protocol can be aided\n    by providing an indication\
    \ to OSPF when an attempt is made to send a\n    packet to a dead or non-existent\
    \ router.  For example, on a PDN a\n    dead router may be indicated by the reception\
    \ of a X.25 clear with\n    an appropriate cause and diagnostic, and this information\
    \ would be\n    passed to OSPF.\nList manipulation primitives\n    Much of the\
    \ OSPF functionality is described in terms of its\n    operation on lists of link\
    \ state advertisements.  For example, the\n    advertisements that will be retransmitted\
    \ to an adjacent router\n    until acknowledged are described as a list.  Any\
    \ particular\n    advertisement may be on many such lists.  An OSPF implementation\n\
    \    needs to be able to manipulate these lists, adding and deleting\n    constituent\
    \ advertisements as necessary.\nTasking support\n    Certain procedures described\
    \ in this specification invoke other\n    procedures.  At times, these other procedures\
    \ should be executed\n    in-line, that is, before the current procedure is finished.\
    \  This is\n    indicated in the text by instructions to execute a procedure.\
    \  At\n    other times, the other procedures are to be executed only when the\n\
    \    current procedure has finished.  This is indicated by instructions\n    to\
    \ schedule a task.\n4.5 Optional OSPF capabilities\nThe OSPF protocol defines\
    \ several optional capabilities.  A router\nindicates the optional capabilities\
    \ that it supports in its OSPF Hello\npackets, Database Description packets and\
    \ in its link state\nadvertisements.  This enables routers supporting a mix of\
    \ optional\ncapabilities to coexist in a single Autonomous System.\nSome capabilities\
    \ must be supported by all routers attached to a\nspecific area.  In this case,\
    \ a router will not accept a neighbor's\nHello unless there is a match in reported\
    \ capabilities (i.e., a\ncapability mismatch prevents a neighbor relationship\
    \ from forming).  An\nexample of this is the external routing capability (see\
    \ below).\nOther capabilities can be negotiated during the database synchronization\n\
    process.  This is accomplished by specifying the optional capabilities\nin Database\
    \ Description packets.  A capability mismatch with a neighbor\nis this case will\
    \ result in only a subset of link state advertisements\nbeing exchanged between\
    \ the two neighbors.\nThe routing table build process can also be affected by\
    \ the\npresence/absence of optional capabilities.  For example, since the\noptional\
    \ capabilities are reported in link state advertisements, routers\nincapable of\
    \ certain functions can be avoided when building the shortest\npath tree.  An\
    \ example of this is the TOS routing capability (see\nbelow).\nThe current OSPF\
    \ optional capabilities are listed below.  See Section\nA.2 for more information.\n\
    External routing capability\n    Entire OSPF areas can be configured as \"stubs\"\
    \ (see Section 3.6).\n    AS external advertisements will not be flooded into\
    \ stub areas.\n    This capability is represented by the E-bit in the OSPF options\n\
    \    field (see Section A.2).  In order to ensure consistent\n    configuration\
    \ of stub areas, all routers interfacing to such an area\n    must have the E-bit\
    \ clear in their Hello packets (see Sections 9.5\n    and 10.5).\nTOS capability\n\
    \    All OSPF implementations must be able to calculate separate routes\n    based\
    \ on IP Type of Service.  However, to save routing table space\n    and processing\
    \ resources, an OSPF router can be configured to ignore\n    TOS when forwarding\
    \ packets.  In this case, the router calculates\n    routes for TOS 0 only.  This\
    \ capability is represented by the T-bit\n    in the OSPF options field (see Section\
    \ A.2).  TOS-capable routers\n    will attempt to avoid non-TOS-capable routers\
    \ when calculating non-\n    zero TOS paths.\n5. Protocol Data Structures\nThe\
    \ OSPF protocol is described in this specification in terms of its\noperation\
    \ on various protocol data structures.  The following list\ncomprises the top-level\
    \ OSPF data structures.  Any initialization that\nneeds to be done is noted. \
    \ Areas, OSPF interfaces and neighbors also\nhave associated data structures that\
    \ are described later in this\nspecification.\nRouter ID\n    a 32-bit number\
    \ that uniquely identifies this router in the AS.  One\n    possible implementation\
    \ strategy would be to use the smallest IP\n    interface address belonging to\
    \ the router.\nPointers to area structures\n    Each one of the areas to which\
    \ the router is connected has its own\n    data structure.  This data structure\
    \ describes the working of the\n    basic algorithm.  Remember that each area\
    \ runs a separate copy of\n    the basic algorithm.\nPointer to the backbone structure\n\
    \    The basic algorithm operates on the backbone as if it were an area.\n   \
    \ For this reason the backbone is represented as an area structure.\nVirtual links\
    \ configured\n    The virtual links configured with this router as one endpoint.\
    \  In\n    order to have configured virtual links, the router itself must be an\n\
    \    area border router.  Virtual links are identified by the Router ID\n    of\
    \ the other endpoint -- which is another area border router.  These\n    two endpoint\
    \ routers must be attached to a common area, called the\n    virtual link's transit\
    \ area.  Virtual links are part of the\n    backbone, and behave as if they were\
    \ unnumbered point-to-point\n    networks between the two routers.  A virtual\
    \ link uses the intra-\n    area routing of its transit area to forward packets.\
    \  Virtual links\n    are brought up and down through the building of the shortest-path\n\
    \    trees for the transit area.\nList of external routes\n    These are routes\
    \ to destinations external to the Autonomous System,\n    that have been gained\
    \ either through direct experience with another\n    routing protocol (such as\
    \ EGP), or through configuration\n    information, or through a combination of\
    \ the two (e.g., dynamic\n    external info.  to be advertised by OSPF with configured\
    \ metric).\n    Any router having these external routes is called an AS boundary\n\
    \    router.  These routes are advertised by the router to the entire AS\n   \
    \ through AS external link advertisements.\nList of AS external link advertisements\n\
    \    Part of the topological database.  These have have originated from\n    the\
    \ AS boundary routers.  They comprise routes to destinations\n    external to\
    \ the Autonomous System.  Note that, if the router is\n    itself an AS boundary\
    \ router, some of these AS external link\n    advertisements have been self originated.\n\
    The routing table\n    Derived from the topological database.  Each destination\
    \ that the\n    router can forward to is represented by a cost and a set of paths.\n\
    \    A path is described by its type and next hop.  For more information,\n  \
    \  see Section 11.\nTOS capability\n    This item indicates whether the router\
    \ will calculate separate\n    routes based on TOS.  This is a configurable parameter.\
    \  For more\n    information, see Sections 4.5 and 16.9.\nFigure 9 shows the collection\
    \ of data structures present in a typical\nrouter.  The router pictured is RT10,\
    \ from the map in Figure 6.  Note\nthat router RT10 has a virtual link configured\
    \ to router RT11, with Area\n2 as the link's transit area.  This is indicated\
    \ by the dashed line in\nFigure 9.  When the virtual link becomes active, through\
    \ the building of\nthe shortest path tree for Area 2, it becomes an interface\
    \ to the\nbackbone (see the two backbone interfaces depicted in Figure 9).\n6.\
    \ The Area Data Structure\nThe area data structure contains all the information\
    \ used to run the\nbasic routing algorithm.  Remember that each area maintains\
    \ its own\ntopological database.  Router interfaces and adjacencies belong to\
    \ a\n                _______________________________________\n               \
    \ (Figure not included in text version.)\n                Figure 9: Router RT10's\
    \ Data Structures\n                _______________________________________\nsingle\
    \ area.\nThe backbone has all the properties of an area.  For that reason it is\n\
    also represented by an area data structure.  Note that some items in the\nstructure\
    \ apply differently to the backbone than to areas.\nThe area topological (or link\
    \ state) database consists of the collection\nof router links, network links and\
    \ summary links advertisements that\nhave originated from the area's routers.\
    \  This information is flooded\nthroughout a single area only.  The list of AS\
    \ external advertisements\nis also considered to be part of each area's topological\
    \ database.\nArea ID\n    A 32-bit number identifying the area.  0 is reserved\
    \ for the area ID\n    of the backbone.  If assigning subnetted networks as separate\
    \ areas,\n    the IP network number could be used as the Area ID.\nList of component\
    \ address ranges\n    The address ranges that define the area.  Each address range\
    \ is\n    specified by an [address,mask] pair.  Each network is then assigned\n\
    \    to an area depending on the address range that it falls into\n    (specified\
    \ address ranges are not allowed to overlap).  As an\n    example, if an IP subnetted\
    \ network is to be its own separate OSPF\n    area, the area is defined to consist\
    \ of a single address range - an\n    IP network number with its natural (class\
    \ A, B or C) mask.\nAssociated router interfaces\n    This router's interfaces\
    \ connecting to the area.  A router interface\n    belongs to one and only one\
    \ area (or the backbone).  For the\n    backbone structure this list includes\
    \ all the virtual adjacencies.\n    A virtual adjacency is identified by the router\
    \ ID of its other\n    endpoint; its cost is the cost of the shortest intra-area\
    \ path that\n    exists between the two routers.\nList of router links advertisements\n\
    \    A router links advertisement is generated by each router in the\n    area.\
    \  It describes the state of the router's interfaces to the\n    area.\nList of\
    \ network links advertisements\n    One network links advertisement is generated\
    \ for each transit\n    multi-access network in the area.  It describes the set\
    \ of routers\n    currently connected to the network.\nList of summary links advertisements\n\
    \    Summary link advertisements originate from the area's area border\n    routers.\
    \  They describe routes to destinations internal to the\n    Autonomous System,\
    \ yet external to the area.\nShortest-path tree\n    The shortest-path tree for\
    \ the area, with this router itself as\n    root.  Derived from the collected\
    \ router links and network links\n    advertisements by the Dijkstra algorithm.\n\
    Authentication type\n    The type of authentication used for this area.  Authentication\
    \ types\n    are defined in Appendix E.  All OSPF packet exchanges are\n    authenticated.\
    \  Different authentication schemes may be used in\n    different areas.\nExternal\
    \ routing capability\n    Whether AS external advertisements will be flooded into/throughout\n\
    \    the area.  This is a configurable parameter.  If AS external\n    advertisements\
    \ are excluded from the area, the area is called a\n    \"stub\".  Internal to\
    \ stub areas, routing to external destinations\n    will be based solely on a\
    \ default summary route.  The backbone\n    cannot be configured as a stub area.\
    \  Also, virtual links cannot be\n    configured through stub areas.  For more\
    \ information, see Section\n    3.6.\nStubDefaultCost\n    If the area has been\
    \ configured as a stub area, and the router\n    itself is an area border router,\
    \ then the StubDefaultCost indicates\n    the cost of the default summary link\
    \ that the router should\n    advertise into the area.  There can be a separate\
    \ cost configured\n    for each IP TOS.  See Section 12.4.3 for more information.\n\
    Unless otherwise specified, the remaining sections of this document\nrefer to\
    \ the operation of the protocol in a single area.\n7. Bringing Up Adjacencies\n\
    OSPF creates adjacencies between neighboring routers for the purpose of\nexchanging\
    \ routing information.  Not every two neighboring routers will\nbecome adjacent.\
    \  This section covers the generalities involved in\ncreating adjacencies.  For\
    \ further details consult Section 10.\n7.1 The Hello Protocol\nThe Hello Protocol\
    \ is responsible for establishing and maintaining\nneighbor relationships.  It\
    \ also ensures that communication between\nneighbors is bidirectional.  Hello\
    \ packets are sent periodically out all\nrouter interfaces.  Bidirectional communication\
    \ is indicated when the\nrouter sees itself listed in the neighbor's Hello Packet.\n\
    On multi-access networks, the Hello Protocol elects a Designated Router\nfor the\
    \ network.  Among other things, the Designated Router controls\nwhat adjacencies\
    \ will be formed over the network (see below).\nThe Hello Protocol works differently\
    \ on broadcast networks, as compared\nto non-broadcast networks.  On broadcast\
    \ networks, each router\nadvertises itself by periodically multicasting Hello\
    \ Packets.  This\nallows neighbors to be discovered dynamically.  These Hello\
    \ Packets\ncontain the router's view of the Designated Router's identity, and\
    \ the\nlist of routers whose Hellos have been seen recently.\nOn non-broadcast\
    \ networks some configuration information is necessary\nfor the operation of the\
    \ Hello Protocol.  Each router that may\npotentially become Designated Router\
    \ has a list of all other routers\nattached to the network.  A router, having\
    \ Designated Router potential,\nsends hellos to all other potential Designated\
    \ Routers when its\ninterface to the non-broadcast network first becomes operational.\
    \  This\nis an attempt to find the Designated Router for the network.  If the\n\
    router itself is elected Designated Router, it begins sending hellos to\nall other\
    \ routers attached to the network.\nAfter a neighbor has been discovered, bidirectional\
    \ communication\nensured, and (if on a multi-access network) a Designated Router\
    \ elected,\na decision is made regarding whether or not an adjacency should be\n\
    formed with the neighbor (see Section 10.4).  An attempt is always made\nto establish\
    \ adjacencies over point-to-point networks and virtual links.\nThe first step\
    \ in bringing up an adjacency is to synchronize the\nneighbors' topological databases.\
    \  This is covered in the next section.\n7.2 The Synchronization of Databases\n\
    In an SPF-based routing algorithm, it is very important for all routers'\ntopological\
    \ databases to stay synchronized.  OSPF simplifies this by\nrequiring only adjacent\
    \ routers to remain synchronized.  The\nsynchronization process begins as soon\
    \ as the routers attempt to bring\nup the adjacency.  Each router describes its\
    \ database by sending a\nsequence of Database Description packets to its neighbor.\
    \  Each Database\nDescription Packet describes a set of link state advertisements\n\
    belonging to the database.  When the neighbor sees a link state\nadvertisement\
    \ that is more recent than its own database copy, it makes a\nnote that this newer\
    \ advertisement should be requested.\nThis sending and receiving of Database Description\
    \ packets is called the\n\"Database Exchange Process\".  During this process,\
    \ the two routers form\na master/slave relationship.  Each Database Description\
    \ Packet has a\nsequence number.  Database Description Packets sent by the master\n\
    (polls) are acknowledged by the slave through echoing of the sequence\nnumber.\
    \  Both polls and their responses contain summaries of link state\ndata.  The\
    \ master is the only one allowed to retransmit Database\nDescription Packets.\
    \  It does so only at fixed intervals, the length of\nwhich is the configured\
    \ constant RxmtInterval.\nEach Database Description contains an indication that\
    \ there are more\npackets to follow --- the M-bit.  The Database Exchange Process\
    \ is over\nwhen a router has received and sent Database Description Packets with\n\
    the M-bit off.\nDuring and after the Database Exchange Process, each router has\
    \ a list\nof those link state advertisements for which the neighbor has more up-\n\
    to-date instances.  These advertisements are requested in Link State\nRequest\
    \ Packets.  Link State Request packets that are not satisfied are\nretransmitted\
    \ at fixed intervals of time RxmtInterval.  When the\nDatabase Description Process\
    \ has completed and all Link State Requests\nhave been satisfied, the databases\
    \ are deemed synchronized and the\nrouters are marked fully adjacent.  At this\
    \ time the adjacency is fully\nfunctional and is advertised in the two routers'\
    \ link state\nadvertisements.\nThe adjacency is used by the flooding procedure\
    \ as soon as the Database\nExchange Process begins.  This simplifies database\
    \ synchronization, and\nguarantees that it finishes in a predictable period of\
    \ time.\n7.3 The Designated Router\nEvery multi-access network has a Designated\
    \ Router.  The Designated\nRouter performs two main functions for the routing\
    \ protocol:\no   The Designated Router originates a network links advertisement\
    \ on\n    behalf of the network.  This advertisement lists the set of routers\n\
    \    (including the Designated Router itself) currently attached to the\n    network.\
    \  The Link State ID for this advertisement (see Section\n    12.1.4) is the IP\
    \ interface address of the Designated Router.  The\n    IP network number can\
    \ then be obtained by using the subnet/network\n    mask.\no   The Designated\
    \ router becomes adjacent to all other routers on the\n    network.  Since the\
    \ link state databases are synchronized across\n    adjacencies (through adjacency\
    \ bring-up and then the flooding\n    procedure), the Designated Router plays\
    \ a central part in the\n    synchronization process.\nThe Designated Router is\
    \ elected by the Hello Protocol.  A router's\nHello Packet contains its Router\
    \ Priority, which is configurable on a\nper-interface basis.  In general, when\
    \ a router's interface to a network\nfirst becomes functional, it checks to see\
    \ whether there is currently a\nDesignated Router for the network.  If there is,\
    \ it accepts that\nDesignated Router, regardless of its Router Priority.  (This\
    \ makes it\nharder to predict the identity of the Designated Router, but ensures\n\
    that the Designated Router changes less often.  See below.)  Otherwise,\nthe router\
    \ itself becomes Designated Router if it has the highest Router\nPriority on the\
    \ network.  A more detailed (and more accurate)\ndescription of Designated Router\
    \ election is presented in Section 9.4.\nThe Designated Router is the endpoint\
    \ of many adjacencies.  In order to\noptimize the flooding procedure on broadcast\
    \ networks, the Designated\nRouter multicasts its Link State Update Packets to\
    \ the address\nAllSPFRouters, rather than sending separate packets over each adjacency.\n\
    Section 2 of this document discusses the directed graph representation\nof an\
    \ area.  Router nodes are labelled with their Router ID.  Broadcast\nnetwork nodes\
    \ are actually labelled with the IP address of their\nDesignated Router.  It follows\
    \ that when the Designated Router changes,\nit appears as if the network node\
    \ on the graph is replaced by an\nentirely new node.  This will cause the network\
    \ and all its attached\nrouters to originate new link state advertisements.  Until\
    \ the\ntopological databases again converge, some temporary loss of\nconnectivity\
    \ may result.  This may result in ICMP unreachable messages\nbeing sent in response\
    \ to data traffic.  For that reason, the Designated\nRouter should change only\
    \ infrequently.  Router Priorities should be\nconfigured so that the most dependable\
    \ router on a network eventually\nbecomes Designated Router.\n7.4 The Backup Designated\
    \ Router\nIn order to make the transition to a new Designated Router smoother,\n\
    there is a Backup Designated Router for each multi-access network.  The\nBackup\
    \ Designated Router is also adjacent to all routers on the network,\nand becomes\
    \ Designated Router when the previous Designated Router fails.\nIf there were\
    \ no Backup Designated Router, when a new Designated Router\nbecame necessary,\
    \ new adjacencies would have to be formed between the\nrouter and all other routers\
    \ attached to the network.  Part of the\nadjacency forming process is the synchronizing\
    \ of topological databases,\nwhich can potentially take quite a long time.  During\
    \ this time, the\nnetwork would not be available for transit data traffic.  The\
    \ Backup\nDesignated obviates the need to form these adjacencies, since they\n\
    already exist.  This means the period of disruption in transit traffic\nlasts\
    \ only as long as it take to flood the new link state advertisements\n(which announce\
    \ the new Designated Router).\nThe Backup Designated Router does not generate\
    \ a network links\nadvertisement for the network.  (If it did, the transition\
    \ to a new\nDesignated Router would be even faster.  However, this is a tradeoff\n\
    between database size and speed of convergence when the Designated\nRouter disappears.)\n\
    The Backup Designated Router is also elected by the Hello Protocol.\nEach Hello\
    \ Packet has a field that specifies the Backup Designated\nRouter for the network.\n\
    In some steps of the flooding procedure, the Backup Designated Router\nplays a\
    \ passive role, letting the Designated Router do more of the work.\nThis cuts\
    \ down on the amount of local routing traffic.  See Section 13.3\nfor more information.\n\
    7.5 The graph of adjacencies\nAn adjacency is bound to the network that the two\
    \ routers have in\ncommon.  If two routers have multiple networks in common, they\
    \ may have\nmultiple adjacencies between them.\nOne can picture the collection\
    \ of adjacencies on a network as forming an\nundirected graph.  The vertices consist\
    \ of routers, with an edge joining\ntwo routers if they are adjacent.  The graph\
    \ of adjacencies describes\nthe flow of routing protocol packets, and in particular\
    \ Link State\nUpdates, through the Autonomous System.\nTwo graphs are possible,\
    \ depending on whether the common network is\nmulti-access.  On physical point-to-point\
    \ networks (and virtual links),\nthe two routers joined by the network will be\
    \ adjacent after their\ndatabases have been synchronized.  On multi-access networks,\
    \ both the\nDesignated Router and the Backup Designated Router are adjacent to\
    \ all\nother routers attached to the network, and these account for all\nadjacencies.\n\
    These graphs are shown in Figure 10.  It is assumed that router RT7 has\nbecome\
    \ the Designated Router, and router RT3 the Backup Designated\nRouter, for the\
    \ network N2.  The Backup Designated Router performs a\nlesser function during\
    \ the flooding procedure than the Designated Router\n(see Section 13.3).  This\
    \ is the reason for the dashed lines connecting\nthe Backup Designated Router\
    \ RT3.\n8. Protocol Packet Processing\nThis section discusses the general processing\
    \ of routing protocol\npackets.  It is very important that the router topological\
    \ databases\nremain synchronized.  For this reason, routing protocol packets should\n\
    get preferential treatment over ordinary data packets, both in sending\nand receiving.\n\
    Routing protocol packets are sent along adjacencies only (with the\nexception\
    \ of Hello packets, which are used to discover the adjacencies).\nThis means that\
    \ all protocol packets travel a single IP hop, except\nthose sent over virtual\
    \ links.\nAll routing protocol packets begin with a standard header.  The sections\n\
    below give the details on how to fill in and verify this standard\nheader.  Then,\
    \ for each packet type, the section is listed that gives\nmore details on that\
    \ particular packet type's processing.\n8.1 Sending protocol packets\nWhen a router\
    \ sends a routing protocol packet, it fills in the fields of\nthat standard header\
    \ as follows.  For more details on the header format\nconsult Section A.3.1:\n\
    Version #\n    Set to 2, the version number of the protocol as documented in this\n\
    \    specification.\nPacket type\n    The type of OSPF packet, such as Link state\
    \ Update or Hello Packet.\nPacket length\n    The length of the entire OSPF packet\
    \ in bytes, including the\n    standard header.\nRouter ID\n    The identity of\
    \ the router itself (who is originating the packet).\n                 ______________________________________\n\
    \                 (Figure not included in text version.)\n                  Figure\
    \ 10: The graph of adjacencies\n                   Figure 11: Interface state\
    \ changes\n                 ______________________________________\nArea ID\n\
    \    The area that the packet is being sent into.\nChecksum\n    The standard\
    \ IP 16-bit one's complement checksum of the entire OSPF\n    packet, excluding\
    \ the 64-bit authentication field.  This checksum\n    should be calculated before\
    \ handing the packet to the appropriate\n    authentication procedure.\nAutype\
    \ and Authentication\n    Each OSPF packet exchange is authenticated.  Authentication\
    \ types\n    are assigned by the protocol and documented in Appendix E.  A\n \
    \   different authentication scheme can be used for each OSPF area.  The\n   \
    \ 64-bit authentication field is set by the appropriate authentication\n    procedure\
    \ (determined by Autype).  This procedure should be the last\n    called when\
    \ forming the packet to be sent.  The setting of the\n    authentication field\
    \ is determined by the packet contents and the\n    authentication key (which\
    \ is configurable on a per-interface basis).\nThe IP destination address for the\
    \ packet is selected as follows.  On\nphysical point-to-point networks, the IP\
    \ destination is always set to\nthe the address AllSPFRouters.  On all other network\
    \ types (including\nvirtual links), the majority of OSPF packets are sent as unicasts,\
    \ i.e.,\nsent directly to the other end of the adjacency.  In this case, the IP\n\
    destination is just the neighbor IP address associated with the other\nend of\
    \ the adjacency (see Section 10).  The only packets not sent as\nunicasts are\
    \ on broadcast networks; on these networks Hello packets are\nsent to the multicast\
    \ destination AllSPFRouters, the Designated Router\nand its Backup send both Link\
    \ State Update Packets and Link State\nAcknowledgment Packets to the multicast\
    \ address AllSPFRouters, while all\nother routers send both their Link State Update\
    \ and Link State\nAcknowledgment Packets to the multicast address AllDRouters.\n\
    Retransmissions of Link State Update packets are ALWAYS sent as\nunicasts.\nThe\
    \ IP source address should be set to the IP address of the sending\ninterface.\
    \  Interfaces to unnumbered point-to-point networks have no\nassociated IP address.\
    \  On these interfaces, the IP source should be set\nto any of the other IP addresses\
    \ belonging to the router.  For this\nreason, there must be at least one IP address\
    \ assigned to the router.[2]\nNote that, for most purposes, virtual links act\
    \ precisely the same as\nunnumbered point-to-point networks.  However, each virtual\
    \ link does\nhave an interface IP address (discovered during the routing table\
    \ build\nprocess) which is used as the IP source when sending packets over the\n\
    virtual link.\nFor more information on the format of specific packet types, consult\
    \ the\nsections listed in Table 10.\n         Type   Packet name            detailed\
    \ section (transmit)\n         _________________________________________________________\n\
    \         1      Hello                  Section  9.5\n         2      Database\
    \ description   Section 10.8\n         3      Link state request     Section 10.9\n\
    \         4      Link state update      Section 13.3\n         5      Link state\
    \ ack         Section 13.5\n             Table 10: Sections describing packet\
    \ transmission.\n8.2 Receiving protocol packets\nWhenever a protocol packet is\
    \ received by the router it is marked with\nthe interface it was received on.\
    \  For routers that have virtual links\nconfigured, it may not be immediately\
    \ obvious which interface to\nassociate the packet with.  For example, consider\
    \ the router RT11\ndepicted in Figure 6.  If RT11 receives an OSPF protocol packet\
    \ on its\ninterface to network N8, it may want to associate the packet with the\n\
    interface to area 2, or with the virtual link to router RT10 (which is\npart of\
    \ the backbone).  In the following, we assume that the packet is\ninitially associated\
    \ with the non-virtual  link.[3]\nIn order for the packet to be accepted at the\
    \ IP level, it must pass a\nnumber of tests, even before the packet is passed\
    \ to OSPF for\nprocessing:\no   The IP checksum must be correct.\no   The packet's\
    \ IP destination address must be the IP address of the\n    receiving interface,\
    \ or one of the IP multicast addresses\n    AllSPFRouters or AllDRouters.\no \
    \  The IP protocol specified must be OSPF (89).\no   Locally originated packets\
    \ should not be passed on to OSPF.  That\n    is, the source IP address should\
    \ be examined to make sure this is\n    not a multicast packet that the router\
    \ itself generated.\nNext, the OSPF packet header is verified.  The fields specified\
    \ in the\nheader must match those configured for the receiving interface.  If\
    \ they\ndo not, the packet should be discarded:\no   The version number field\
    \ must specify protocol version 2.\no   The 16-bit checksum of the OSPF packet's\
    \ contents must be verified.\n    Remember that the 64-bit authentication field\
    \ must be excluded from\n    the checksum calculation.\no   The Area ID found\
    \ in the OSPF header must be verified.  If both of\n    the following cases fail,\
    \ the packet should be discarded.  The Area\n    ID specified in the header must\
    \ either:\n    (1) Match the Area ID of the receiving interface.  In this case,\
    \ the\n        packet has been sent over a single hop.  Therefore, the packet's\n\
    \        IP source address must be on the same network as the receiving\n    \
    \    interface.  This can be determined by comparing the packet's IP\n       \
    \ source address to the interface's IP address, after masking both\n        addresses\
    \ with the interface mask.\n    (2) Indicate the backbone.  In this case, the\
    \ packet has been sent\n        over a virtual link.  The receiving router must\
    \ be an area\n        border router, and the router ID specified in the packet\
    \ (the\n        source router) must be the other end of a configured virtual\n\
    \        link.  The receiving interface must also attach to the virtual\n    \
    \    link's configured transit area.  If all of these checks succeed,\n      \
    \  the packet is accepted and is from now on associated with the\n        virtual\
    \ link (and the backbone area).\no   Packets whose IP destination is AllDRouters\
    \ should only be accepted\n    if the state of the receiving interface is DR or\
    \ Backup (see Section\n    9.1).\no   The Authentication type specified must match\
    \ the authentication type\n    specified for the associated area.\nNext, the packet\
    \ must be authenticated.  This depends on the\nauthentication type specified (see\
    \ Appendix E).  The authentication\nprocedure may use an Authentication key, which\
    \ can be configured on a\nper-interface basis.  If the authentication fails, the\
    \ packet should be\ndiscarded.\nIf the packet type is Hello, it should then be\
    \ further processed by the\nHello Protocol (see Section 10.5).  All other packet\
    \ types are\nsent/received only on adjacencies.  This means that the packet must\
    \ have\nbeen sent by one of the router's active neighbors.  If the receiving\n\
    interface is a multi-access network (either broadcast or non-broadcast)\nthe sender\
    \ is identified by the IP source address found in the packet's\nIP header.  If\
    \ the receiving interface is a point-to-point link or a\nvirtual link, the sender\
    \ is identified by the Router ID (source router)\nfound in the packet's OSPF header.\
    \  The data structure associated with\nthe receiving interface contains the list\
    \ of active neighbors.  Packets\nnot matching any active neighbor are discarded.\n\
    At this point all received protocol packets are associated with an\nactive neighbor.\
    \  For the further input processing of specific packet\ntypes, consult the sections\
    \ listed in Table 11.\n          Type   Packet name            detailed section\
    \ (receive)\n          ________________________________________________________\n\
    \          1      Hello                  Section 10.5\n          2      Database\
    \ description   Section 10.6\n          3      Link state request     Section\
    \ 10.7\n          4      Link state update      Section 13\n          5      Link\
    \ state ack         Section 13.7\n              Table 11: Sections describing\
    \ packet reception.\n9. The Interface Data Structure\nAn OSPF interface is the\
    \ connection between a router and a network.\nThere is a single OSPF interface\
    \ structure for each attached network;\neach interface structure has at most one\
    \ IP interface address (see\nbelow).  The support for multiple addresses on a\
    \ single network is a\nmatter for future consideration.\nAn OSPF interface can\
    \ be considered to belong to the area that contains\nthe attached network.  All\
    \ routing protocol packets originated by the\nrouter over this interface are labelled\
    \ with the interface's Area ID.\nOne or more router adjacencies may develop over\
    \ an interface.  A\nrouter's link state advertisements reflect the state of its\
    \ interfaces\nand their associated adjacencies.\nThe following data items are\
    \ associated with an interface.  Note that a\nnumber of these items are actually\
    \ configuration for the attached\nnetwork; those items must be the same for all\
    \ routers connected to the\nnetwork.\nType\n    The kind of network to which the\
    \ interface attaches.  Its value is\n    either broadcast, non-broadcast yet still\
    \ multi-access, point-to-\n    point or virtual link.\nState\n    The functional\
    \ level of an interface.  State determines whether or\n    not full adjacencies\
    \ are allowed to form over the interface.  State\n    is also reflected in the\
    \ router's link state advertisements.\nIP interface address\n    The IP address\
    \ associated with the interface.  This appears as the\n    IP source address in\
    \ all routing protocol packets originated over\n    this interface.  Interfaces\
    \ to unnumbered point-to-point networks do\n    not have an associated IP address.\n\
    IP interface mask\n    This indicates the portion of the IP interface address\
    \ that\n    identifies the attached network.  This is often referred to as the\n\
    \    subnet mask.  Masking the IP interface address with this value\n    yields\
    \ the IP network number of the attached network.\nArea ID\n    The Area ID to\
    \ which the attached network belongs.  All routing\n    protocol packets originating\
    \ from the interface are labelled with\n    this Area ID.\nHelloInterval\n   \
    \ The length of time, in seconds, between the Hello packets that the\n    router\
    \ sends on the interface.  Advertised in Hello packets sent out\n    this interface.\n\
    RouterDeadInterval\n    The number of seconds before the router's neighbors will\
    \ declare it\n    down, when they stop hearing the router's hellos.  Advertised\
    \ in\n    Hello packets sent out this interface.\nInfTransDelay\n    The estimated\
    \ number of seconds it takes to transmit a Link State\n    Update Packet over\
    \ this interface.  Link state advertisements\n    contained in the update packet\
    \ will have their age incremented by\n    this amount before transmission.  This\
    \ value should take into\n    account transmission and propagation delays; it\
    \ must be greater than\n    zero.\nRouter Priority\n    An 8-bit unsigned integer.\
    \  When two routers attached to a network\n    both attempt to become Designated\
    \ Router, the one with the highest\n    Router Priority takes precedence.  A router\
    \ whose Router Priority is\n    set to 0 is ineligible to become Designated Router\
    \ on the attached\n    network.  Advertised in Hello packets sent out this interface.\n\
    Hello Timer\n    An interval timer that causes the interface to send a Hello packet.\n\
    \    This timer fires every HelloInterval seconds.  Note that on non-\n    broadcast\
    \ networks a separate Hello packet is sent to each qualified\n    neighbor.\n\
    Wait Timer\n    A single shot timer that causes the interface to exit the Waiting\n\
    \    state, and as a consequence select a Designated Router on the\n    network.\
    \  The length of the timer is RouterDeadInterval seconds.\nList of neighboring\
    \ routers\n    The other routers attached to this network.  On multi-access\n\
    \    networks, this list is formed by the Hello Protocol.  Adjacencies\n    will\
    \ be formed to some of these neighbors.  The set of adjacent\n    neighbors can\
    \ be determined by an examination of all of the\n    neighbors' states.\nDesignated\
    \ Router\n    The Designated Router selected for the attached network.  The\n\
    \    Designated Router is selected on all multi-access networks by the\n    Hello\
    \ Protocol.  Two pieces of identification are kept for the\n    Designated Router:\
    \ its Router ID and its interface IP address on the\n    network.  The Designated\
    \ Router advertises link state for the\n    network.  The network link state advertisement\
    \ is labelled with the\n    Designated Router's IP address.  This item is initialized\
    \ to 0,\n    which indicates the lack of a Designated Router.\nBackup Designated\
    \ Router\n    The Backup Designated Router is also selected on all multi-access\n\
    \    networks by the Hello Protocol.  All routers on the attached network\n  \
    \  become adjacent to both the Designated Router and the Backup\n    Designated\
    \ Router.  The Backup Designated Router becomes Designated\n    Router when the\
    \ current Designated Router fails.  Initialized to 0\n    indicating the lack\
    \ of a Backup Designated Router.\nInterface output cost(s)\n    The cost of sending\
    \ a packet on the interface, expressed in the link\n    state metric.  This is\
    \ advertised as the link cost for this\n    interface in the router links advertisement.\
    \  There may be a\n    separate cost for each IP Type of Service.  The cost of\
    \ an interface\n    must be greater than zero.\nRxmtInterval\n    The number of\
    \ seconds between link state advertisement\n    retransmissions, for adjacencies\
    \ belonging to this interface.  Also\n    used when retransmitting Database Description\
    \ and Link State Request\n    Packets.\nAuthentication key\n    This configured\
    \ data allows the authentication procedure to generate\n    and/or verify the\
    \ authentication field in the OSPF header.  The\n    authentication key can be\
    \ configured on a per-interface basis.  For\n    example, if the authentication\
    \ type indicates simple password, the\n    authentication key would be a 64-bit\
    \ password.  This key would be\n    inserted directly into the OSPF header when\
    \ originating routing\n    protocol packets, and there could be a separate password\
    \ for each\n    network.\n9.1 Interface states\nThe various states that router\
    \ interface may attain is documented in\nthis section.  The states are listed\
    \ in order of progressing\nfunctionality.  For example, the inoperative state\
    \ is listed first,\nfollowed by a list of intermediate states before the final,\
    \ fully\nfunctional state is achieved.  The specification makes use of this\n\
    ordering by sometimes making references such as \"those interfaces in\nstate greater\
    \ than X\".\nFigure 11 shows the graph of interface state changes.  The arcs of\
    \ the\ngraph are labelled with the event causing the state change.  These\nevents\
    \ are documented in Section 9.2.  The interface state machine is\ndescribed in\
    \ more detail in Section 9.3.\nDown\n    This is the initial interface state.\
    \  In this state, the lower-level\n    protocols have indicated that the interface\
    \ is unusable.  No\n    protocol traffic at all will be sent or received on such\
    \ a\n    interface.  In this state, interface parameters should be set to\n  \
    \  their initial values.  All interface timers should be disabled, and\n    there\
    \ should be no adjacencies associated with the interface.\nLoopback\n    In this\
    \ state, the router's interface to the network is looped back.\n    The interface\
    \ may be looped back in hardware or software.  The\n    interface will be unavailable\
    \ for regular data traffic.  However, it\n    may still be desirable to gain information\
    \ on the quality of this\n    interface, either through sending ICMP pings to\
    \ the interface or\n    through something like a bit error test.  For this reason,\
    \ IP\n    packets may still be addressed to an interface in Loopback state.\n\
    \    To facilitate this, such interfaces are advertised in router links\n    advertisements\
    \ as single host routes, whose destination is the IP\n    interface address.[4]\n\
    Waiting\n    In this state, the router is trying to determine the identity of\
    \ the\n    Backup Designated Router for the network.  To do this, the router\n\
    \    monitors the Hellos it receives.  The router is not allowed to elect\n  \
    \  a Backup Designated Router nor Designated Router until it\n    transitions\
    \ out of Waiting state.  This prevents unnecessary changes\n    of (Backup) Designated\
    \ Router.\nPoint-to-point\n    In this state, the interface is operational, and\
    \ connects either to\n    a physical point-to-point network or to a virtual link.\
    \  Upon\n    entering this state, the router attempts to form an adjacency with\n\
    \    the neighboring router.  Hellos are sent to the neighbor every\n    HelloInterval\
    \ seconds.\nDR Other\n    The interface is to a multi-access network on which\
    \ another router\n    has been selected to be the Designated Router.  In this\
    \ state, the\n    router itself has not been selected Backup Designated Router\
    \ either.\n    The router forms adjacencies to both the Designated Router and\
    \ the\n    Backup Designated Router (if they exist).\nBackup\n    In this state,\
    \ the router itself is the Backup Designated Router on\n    the attached network.\
    \  It will be promoted to Designated Router when\n    the present Designated Router\
    \ fails.  The router establishes\n    adjacencies to all other routers attached\
    \ to the network.  The\n    Backup Designated Router performs slightly different\
    \ functions\n    during the Flooding Procedure, as compared to the Designated\
    \ Router\n    (see Section 13.3).  See Section 7.4 for more details on the\n \
    \   functions performed by the Backup Designated Router.\nDR  In this state, this\
    \ router itself is the Designated Router on the\n    attached network.  Adjacencies\
    \ are established to all other routers\n    attached to the network.  The router\
    \ must also originate a network\n    links advertisement for the network node.\
    \  The advertisement will\n    contain links to all routers (including the Designated\
    \ Router\n    itself) attached to the network.  See Section 7.3 for more details\n\
    \    on the functions performed by the Designated Router.\n9.2 Events causing\
    \ interface state changes\nState changes can be effected by a number of events.\
    \  These events are\npictured as the labelled arcs in Figure 11.  The label definitions\
    \ are\nlisted below.  For a detailed explanation of the effect of these events\n\
    on OSPF protocol operation, consult Section 9.3.\nInterface Up\n    Lower-level\
    \ protocols have indicated that the network interface is\n    operational.  This\
    \ enables the interface to transition out of Down\n    state.  On virtual links,\
    \ the interface operational indication is\n    actually a result of the shortest\
    \ path calculation (see Section\n    16.7).\nWait Timer\n    The Wait timer has\
    \ fired, indicating the end of the waiting period\n    that is required before\
    \ electing a (Backup) Designated Router.\nBackup seen\n    The router has detected\
    \ the existence or non-existence of a Backup\n    Designated Router for the network.\
    \  This is done in one of two ways.\n    First, a Hello Packet may be received\
    \ from a neighbor claiming to be\n    itself the Backup Designated Router.  Alternatively,\
    \ a Hello Packet\n    may be received from a neighbor claiming to be itself the\
    \ Designated\n    Router, and indicating that there is no Backup.  In either case\n\
    \    there must be bidirectional communication with the neighbor, i.e.,\n    the\
    \ router must also appear in the neighbor's Hello Packet.  This\n    event signals\
    \ an end to the Waiting state.\nNeighbor Change\n    There has been a change in\
    \ the set of bidirectional neighbors\n    associated with the interface.  The\
    \ (Backup) Designated Router needs\n    to be recalculated.  The following neighbor\
    \ changes lead to the\n    Neighbor Change event.  For an explanation of neighbor\
    \ states, see\n    Section 10.1.\n    o   Bidirectional communication has been\
    \ established to a neighbor.\n        In other words, the state of the neighbor\
    \ has transitioned to\n        2-Way or higher.\n    o   There is no longer bidirectional\
    \ communication with a neighbor.\n        In other words, the state of the neighbor\
    \ has transitioned to\n        Init or lower.\n    o   One of the bidirectional\
    \ neighbors is newly declaring itself as\n        either Designated Router or\
    \ Backup Designated Router.  This is\n        detected through examination of\
    \ that neighbor's Hello Packets.\n    o   One of the bidirectional neighbors is\
    \ no longer declaring itself\n        as Designated Router, or is no longer declaring\
    \ itself as Backup\n        Designated Router.  This is again detected through\
    \ examination\n        of that neighbor's Hello Packets.\n    o   The advertised\
    \ Router Priority for a bidirectional neighbor has\n        changed.  This is\
    \ again detected through examination of that\n        neighbor's Hello Packets.\n\
    Loop Ind\n    An indication has been received that the interface is now looped\n\
    \    back to itself.  This indication can be received either from network\n  \
    \  management or from the lower level protocols.\nUnloop Ind\n    An indication\
    \ has been received that the interface is no longer\n    looped back.  As with\
    \ the Loop Ind event, this indication can be\n    received either from network\
    \ management or from the lower level\n    protocols.\nInterface Down\n    Lower-level\
    \ protocols indicate that this interface is no longer\n    functional.  No matter\
    \ what the current interface state is, the new\n    interface state will be Down.\n\
    9.3 The Interface state machine\nA detailed description of the interface state\
    \ changes follows.  Each\nstate change is invoked by an event (Section 9.2). \
    \ This event may\nproduce different effects, depending on the current state of\
    \ the\ninterface.  For this reason, the state machine below is organized by\n\
    current interface state and received event.  Each entry in the state\nmachine\
    \ describes the resulting new interface state and the required set\nof additional\
    \ actions.\nWhen an interface's state changes, it may be necessary to originate\
    \ a\nnew router links advertisement.  See Section 12.4 for more details.\nSome\
    \ of the required actions below involve generating events for the\nneighbor state\
    \ machine.  For example, when an interface becomes\ninoperative, all neighbor\
    \ connections associated with the interface must\nbe destroyed.  For more information\
    \ on the neighbor state machine, see\nSection 10.3.\n State(s):  Down\n    Event:\
    \  Interface Up\nNew state:  Depends on action routine\n   Action:  Start the\
    \ interval Hello Timer, enabling the periodic\n            sending of Hello packets\
    \ out the interface.  If the attached\n            network is a physical point-to-point\
    \ network or virtual\n            link, the interface state transitions to Point-to-Point.\n\
    \            Else, if the router is not eligible to become Designated\n      \
    \      Router the interface state transitions to DR other.\n            Otherwise,\
    \ the attached network is multi-access and the\n            router is eligible\
    \ to become Designated Router.  In this\n            case, in an attempt to discover\
    \ the attached network's\n            Designated Router the interface state is\
    \ set to Waiting and\n            the single shot Wait Timer is started.  If in\
    \ addition the\n            attached network is non-broadcast, examine the configured\n\
    \            list of neighbors for this interface and generate the\n         \
    \   neighbor event Start for each neighbor that is also eligible\n           \
    \ to become Designated Router.\n State(s):  Waiting\n    Event:  Backup Seen\n\
    New state:  Depends upon action routine.\n   Action:  Calculate the attached network's\
    \ Backup Designated Router\n            and Designated Router, as shown in Section\
    \ 9.4.  As a result\n            of this calculation, the new state of the interface\
    \ will be\n            either DR other, Backup or DR.\n State(s):  Waiting\n \
    \   Event:  Wait Timer\nNew state:  Depends upon action routine.\n   Action: \
    \ Calculate the attached network's Backup Designated Router\n            and Designated\
    \ Router, as shown in Section 9.4.  As a result\n            of this calculation,\
    \ the new state of the interface will be\n            either DR other, Backup\
    \ or DR.\n State(s):  DR Other, Backup or DR\n    Event:  Neighbor Change\nNew\
    \ state:  Depends upon action routine.\n   Action:  Recalculate the attached network's\
    \ Backup Designated Router\n            and Designated Router, as shown in Section\
    \ 9.4.  As a result\n            of this calculation, the new state of the interface\
    \ will be\n            either DR other, Backup or DR.\n State(s):  Any State\n\
    \    Event:  Interface Down\nNew state:  Down\n   Action:  All interface variables\
    \ are reset, and interface timers\n            disabled.  Also, all neighbor connections\
    \ associated with\n            the interface are destroyed.  This is done by generating\
    \ the\n            event KillNbr on all associated neighbors (see Section\n  \
    \          10.2).\n State(s):  Any State\n    Event:  Loop Ind\nNew state:  Loopback\n\
    \   Action:  Since this interface is no longer connected to the attached\n   \
    \         network the actions associated with the above Interface Down\n     \
    \       event are executed.\n State(s):  Loopback\n    Event:  Unloop Ind\nNew\
    \ state:  Down\n   Action:  No actions are necessary.  For example, the interface\n\
    \            variables have already been reset upon entering the Loopback\n  \
    \          state.  Note that reception of an Interface Up event is\n         \
    \   necessary before the interface again becomes fully\n            functional.\n\
    9.4 Electing the Designated Router\nThis section describes the algorithm used\
    \ for calculating a network's\nDesignated Router and Backup Designated Router.\
    \  This algorithm is\ninvoked by the Interface state machine.  The initial time\
    \ a router runs\nthe election algorithm for a network, the network's Designated\
    \ Router\nand Backup Designated Router are initialized to 0.0.0.0.  This indicates\n\
    the lack of both a Designated Router and a Backup Designated Router.\nThe Designated\
    \ Router election algorithm proceeds as follows: Call the\nrouter doing the calculation\
    \ Router X.  The list of neighbors attached\nto the network and having established\
    \ bidirectional communication with\nRouter X is examined.  This list is precisely\
    \ the collection of Router\nX's neighbors (on this network) whose state is greater\
    \ than or equal to\n2-Way (see Section 10.1).  Router X itself is also considered\
    \ to be on\nthe list.  Discard all routers from the list that are ineligible to\n\
    become Designated Router.  (Routers having Router Priority of 0 are\nineligible\
    \ to become Designated Router.)  The following steps are then\nexecuted, considering\
    \ only those routers that remain on the list:\n(1) Note the current values for\
    \ the network's Designated Router and\n    Backup Designated Router.  This is\
    \ used later for comparison\n    purposes.\n(2) Calculate the new Backup Designated\
    \ Router for the network as\n    follows.  Only those routers on the list that\
    \ have not declared\n    themselves to be Designated Router are eligible to become\
    \ Backup\n    Designated Router.  If one or more of these routers have declared\n\
    \    themselves Backup Designated Router (i.e., they are currently\n    listing\
    \ themselves as Backup Designated Router, but not as\n    Designated Router, in\
    \ their Hello Packets) the one having highest\n    Router Priority is declared\
    \ to be Backup Designated Router.  In case\n    of a tie, the one having the highest\
    \ Router ID is chosen.  If no\n    routers have declared themselves Backup Designated\
    \ Router, choose\n    the router having highest Router Priority, (again excluding\
    \ those\n    routers who have declared themselves Designated Router), and again\n\
    \    use the Router ID to break ties.\n(3) Calculate the new Designated Router\
    \ for the network as follows.  If\n    one or more of the routers have declared\
    \ themselves Designated\n    Router (i.e., they are currently listing themselves\
    \ as Designated\n    Router in their Hello Packets) the one having highest Router\n\
    \    Priority is declared to be Designated Router.  In case of a tie, the\n  \
    \  one having the highest Router ID is chosen.  If no routers have\n    declared\
    \ themselves Designated Router, promote the new Backup\n    Designated Router\
    \ to Designated Router.\n(4) If Router X is now newly the Designated Router or\
    \ newly the Backup\n    Designated Router, or is now no longer the Designated\
    \ Router or no\n    longer the Backup Designated Router, repeat steps 2 and 3,\
    \ and then\n    proceed to step 5.  For example, if Router X is now the Designated\n\
    \    Router, when step 2 is repeated X will no longer be eligible for\n    Backup\
    \ Designated Router election.  Among other things, this will\n    ensure that\
    \ no router will declare itself both Backup Designated\n    Router and Designated\
    \ Router.[5]\n(5) As a result of these calculations, the router itself may now\
    \ be\n    Designated Router or Backup Designated Router.  See Sections 7.3 and\n\
    \    7.4 for the additional duties this would entail.  The router's\n    interface\
    \ state should be set accordingly.  If the router itself is\n    now Designated\
    \ Router, the new interface state is DR.  If the router\n    itself is now Backup\
    \ Designated Router, the new interface state is\n    Backup.  Otherwise, the new\
    \ interface state is DR Other.\n(6) If the attached network is non-broadcast,\
    \ and the router itself has\n    just become either Designated Router or Backup\
    \ Designated Router, it\n    must start sending hellos to those neighbors that\
    \ are not eligible\n    to become Designated Router (see Section 9.5.1).  This\
    \ is done by\n    invoking the neighbor event Start for each neighbor having a\
    \ Router\n    Priority of 0.\n(7) If the above calculations have caused the identity\
    \ of either the\n    Designated Router or Backup Designated Router to change,\
    \ the set of\n    adjacencies associated with this interface will need to be modified.\n\
    \    Some adjacencies may need to be formed, and others may need to be\n    broken.\
    \  To accomplish this, invoke the event AdjOK?  on all\n    neighbors whose state\
    \ is at least 2-Way.  This will cause their\n    eligibility for adjacency to\
    \ be reexamined (see Sections 10.3 and\n    10.4).\nThe reason behind the election\
    \ algorithm's complexity is the desire for\nan orderly transition from Backup\
    \ Designated Router to Designated\nRouter, when the current Designated Router\
    \ fails.  This orderly\ntransition is ensured through the introduction of hysteresis:\
    \ no new\nBackup router can be chosen until the old Backup accepts its new\nDesignated\
    \ Router responsibilities.\nIf Router X is not itself eligible to become Designated\
    \ Router, it is\npossible that neither a Backup Designated Router nor a Designated\
    \ Router\nwill be selected in the above procedure.  Note also that if Router X\
    \ is\nthe only attached router that is eligible to become Designated Router,\n\
    it will select itself as Designated Router and there will be no Backup\nDesignated\
    \ Router for the network.\n9.5 Sending Hello packets\nHello packets are sent out\
    \ each functioning router interface.  They are\nused to discover and maintain\
    \ neighbor relationships.[6] On multi-access\nnetworks, hellos are also used to\
    \ elect the Designated Router and Backup\nDesignated Router, and in that way determine\
    \ what adjacencies should be\nformed.\nThe format of a Hello packet is detailed\
    \ in Section A.3.2.  The Hello\nPacket contains the router's Router Priority (used\
    \ in choosing the\nDesignated Router), and the interval between Hello broadcasts\n\
    (HelloInterval).  The Hello Packet also indicates how often a neighbor\nmust be\
    \ heard from to remain active (RouterDeadInterval).  Both\nHelloInterval and RouterDeadInterval\
    \ must be the same for all routers\nattached to a common network.  The Hello packet\
    \ also contains the IP\naddress mask of the attached network (Network Mask). \
    \ On unnumbered\npoint-to-point networks and on virtual links this field should\
    \ be set to\n0.\nThe Hello packet's Options field describes the router's optional\
    \ OSPF\ncapabilities.  There are currently two optional capabilities defined\n\
    (see Sections 4.5 and A.2).  The T-bit of the Options field should be\nset if\
    \ the router is capable of calculating separate routes for each IP\nTOS.  The\
    \ E-bit should be set if and only if the attached area is\ncapable of processing\
    \ AS external advertisements (i.e., it is not a stub\narea).  If the E-bit is\
    \ set incorrectly the neighboring routers will\nrefuse to accept the Hello Packet\
    \ (see Section 10.5).  The rest of the\nHello Packet's Options field should be\
    \ set to zero.\nIn order to ensure two-way communication between adjacent routers,\
    \ the\nHello packet contains the list of all routers from which hellos have\n\
    been seen recently.  The Hello packet also contains the router's current\nchoice\
    \ for Designated Router and Backup Designated Router.  A value of 0\nin these\
    \ fields means that one has not yet been selected.\nOn broadcast networks and\
    \ physical point-to-point networks, Hello\npackets are sent every HelloInterval\
    \ seconds to the IP multicast address\nAllSPFRouters.  On virtual links, Hello\
    \ packets are sent as unicasts\n(addressed directly to the other end of the virtual\
    \ link) every\nHelloInterval seconds.  On non-broadcast networks, the sending\
    \ of Hello\npackets is more complicated.  This will be covered in the next section.\n\
    9.5.1 Sending Hello packets on non-broadcast networks\nStatic configuration information\
    \ is necessary in order for the Hello\nProtocol to function on non-broadcast networks\
    \ (see Section C.5).  Every\nattached router which is eligible to become Designated\
    \ Router has a\nconfigured list of all of its neighbors on the network.  Each\
    \ listed\nneighbor is labelled with its Designated Router eligibility.\nThe interface\
    \ state must be at least Waiting for any hellos to be sent.\nHellos are then sent\
    \ directly (as unicasts) to some subset of a router's\nneighbors.  Sometimes an\
    \ hello is sent periodically on a timer; at other\ntimes it is sent as a response\
    \ to a received hello.  A router's hello-\nsending behavior varies depending on\
    \ whether the router itself is\neligible to become Designated Router.\nIf the\
    \ router is eligible to become Designated Router, it must\nperiodically send hellos\
    \ to all neighbors that are also eligible.  In\naddition, if the router is itself\
    \ the Designated Router or Backup\nDesignated Router, it must also send periodic\
    \ hellos to all other\nneighbors.  This means that any two eligible routers are\
    \ always\nexchanging hellos, which is necessary for the correct operation of the\n\
    Designated Router election algorithm.  To minimize the number of hellos\nsent,\
    \ the number of eligible routers on a non-broadcast network should\nbe kept small.\n\
    If the router is not eligible to become Designated Router, it must\nperiodically\
    \ send hellos to both the Designated Router and the Backup\nDesignated Router\
    \ (if they exist).  It must also send an hello in reply\nto an hello received\
    \ from any eligible neighbor (other than the current\nDesignated Router and Backup\
    \ Designated Router).  This is needed to\nestablish an initial bidirectional relationship\
    \ with any potential\nDesignated Router.\nWhen sending Hello packets periodically\
    \ to any neighbor, the interval\nbetween hellos is determined by the neighbor's\
    \ state.  If the neighbor\nis in state Down, hellos are sent every PollInterval\
    \ seconds.\nOtherwise, hellos are sent every HelloInterval seconds.\n10. The Neighbor\
    \ Data Structure\nAn OSPF router converses with its neighboring routers.  Each\
    \ separate\nconversation is described by a \"neighbor data structure\".  Each\n\
    conversation is bound to a particular OSPF router interface, and is\nidentified\
    \ either by the neighboring router's OSPF router ID or by its\nNeighbor IP address\
    \ (see below).  Thus if the OSPF router and another\nrouter have multiple attached\
    \ networks in common, multiple conversations\nensue, each described by a unique\
    \ neighbor data structure.  Each\nseparate conversation is loosely referred to\
    \ in the text as being a\nseparate \"neighbor\".\nThe neighbor data structure\
    \ contains all information pertinent to the\nforming or formed adjacency between\
    \ the two neighbors.  (However,\nremember that not all neighbors become adjacent.)\
    \  An adjacency can be\nviewed as a highly developed conversation between two\
    \ routers.\nState\n    The functional level of the neighbor conversation.  This\
    \ is\n    described in more detail in Section 10.1.\nInactivity Timer\n    A single\
    \ shot timer whose firing indicates that no Hello Packet has\n    been seen from\
    \ this neighbor recently.  The length of the timer is\n    RouterDeadInterval\
    \ seconds.\nMaster/Slave\n    When the two neighbors are exchanging databases,\
    \ they form a Master\n    Slave relationship.  The Master sends the first Database\
    \ Description\n    Packet, and is the only part that is allowed to retransmit.\
    \  The\n    slave can only respond to the master's Database Description Packets.\n\
    \    The master/slave relationship is negotiated in state ExStart.\nSequence Number\n\
    \    A 32-bit number identifying individual Database Description packets.\n  \
    \  When the neighbor state ExStart is entered, the sequence number\n    should\
    \ be set to a value not previously seen by the neighboring\n    router.  One possible\
    \ scheme is to use the machine's time of day\n    counter.  The sequence number\
    \ is then incremented by the master with\n    each new Database Description packet\
    \ sent.  The slave's sequence\n    number indicates the last packet received from\
    \ the master.  Only one\n    packet is allowed outstanding at a time.\nNeighbor\
    \ ID\n    The OSPF Router ID of the neighboring router.  The neighbor ID is\n\
    \    learned when Hello packets are received from the neighbor, or is\n    configured\
    \ if this is a virtual adjacency (see Section C.4).\nNeighbor priority\n    The\
    \ Router Priority of the neighboring router.  Contained in the\n    neighbor's\
    \ Hello packets, this item is used when selecting the\n    Designated Router for\
    \ the attached network.\nNeighbor IP address\n    The IP address of the neighboring\
    \ router's interface to the attached\n    network.  Used as the Destination IP\
    \ address when protocol packets\n    are sent as unicasts along this adjacency.\
    \  Also used in router\n    links advertisements as the Link ID for the attached\
    \ network if the\n    neighboring router is selected to be Designated Router (see\
    \ Section\n    12.4.1).  The neighbor IP address is learned when Hello packets\
    \ are\n    received from the neighbor.  For virtual links, the neighbor IP\n \
    \   address is learned during the routing table build process (see\n    Section\
    \ 15).\nNeighbor Options\n    The optional OSPF capabilities supported by the\
    \ neighbor.  Learned\n    during the Database Exchange process (see Section 10.6).\
    \  The\n    neighbor's optional OSPF capabilities are also listed in its Hello\n\
    \    packets.  This enables received Hellos to be rejected (i.e.,\n    neighbor\
    \ relationships will not even start to form) if there is a\n    mismatch in certain\
    \ crucial OSPF capabilities (see Section 10.5).\n    The optional OSPF capabilities\
    \ are documented in Section 4.5.\nNeighbor's Designated Router\n    The neighbor's\
    \ idea of the Designated Router.  If this is the\n    neighbor itself, this is\
    \ important in the local calculation of the\n    Designated Router.  Defined only\
    \ on multi-access networks.\nNeighbor's Backup Designated Router\n    The neighbor's\
    \ idea of the Backup Designated Router.  If this is the\n    neighbor itself,\
    \ this is important in the local calculation of the\n    Backup Designated Router.\
    \  Defined only on multi-access networks.\nThe next set of variables are lists\
    \ of link state advertisements.  These\nlists describe subsets of the area topological\
    \ database.  There can be\nfive distinct types of link state advertisements in\
    \ an area topological\ndatabase: router links, network links, and type 3 and 4\
    \ summary links\n(all stored in the area data structure), and AS external links\
    \ (stored\nin the global data structure).\nLink state retransmission list\n  \
    \  The list of link state advertisements that have been flooded but not\n    acknowledged\
    \ on this adjacency.  These will be retransmitted at\n    intervals until they\
    \ are acknowledged, or until the adjacency is\n    destroyed.\nDatabase summary\
    \ list\n    The complete list of link state advertisements that make up the area\n\
    \    topological database, at the moment the neighbor goes into Database\n   \
    \ Exchange state.  This list is sent to the neighbor in Database\n    Description\
    \ packets.\nLink state request list\n    The list of link state advertisements\
    \ that need to be received from\n    this neighbor in order to synchronize the\
    \ two neighbors' topological\n    databases.  This list is created as Database\
    \ Description packets are\n    received, and is then sent to the neighbor in Link\
    \ State Request\n    packets.  The list is depleted as appropriate Link State\
    \ Update\n    packets are received.\n10.1 Neighbor states\nThe state of a neighbor\
    \ (really, the state of a conversation being held\nwith a neighboring router)\
    \ is documented in the following sections.  The\nstates are listed in order of\
    \ progressing functionality.  For example,\nthe inoperative state is listed first,\
    \ followed by a list of\nintermediate states before the final, fully functional\
    \ state is\nachieved.  The specification makes use of this ordering by sometimes\n\
    making references such as \"those neighbors/adjacencies in state greater\nthan\
    \ X\".  Figures 12 and 13 show the graph of neighbor state changes.\nThe arcs\
    \ of the graphs are labelled with the event causing the state\nchange.  The neighbor\
    \ events are documented in Section 10.2.\nThe graph in Figure 12 show the state\
    \ changes effected by the Hello\nProtocol.  The Hello Protocol is responsible\
    \ for neighbor acquisition\nand maintenance, and for ensuring two way communication\
    \ between\nneighbors.\nThe graph in Figure 13 shows the forming of an adjacency.\
    \  Not every two\nneighboring routers become adjacent (see Section 10.4).  The\
    \ adjacency\nstarts to form when the neighbor is in state ExStart.  After the\
    \ two\nrouters discover their master/slave status, the state transitions to\n\
    Exchange.  At this point the neighbor starts to be used in the flooding\nprocedure,\
    \ and the two neighboring routers begin synchronizing their\ndatabases.  When\
    \ this synchronization is finished, the neighbor is in\nstate Full and we say\
    \ that the two routers are fully adjacent.  At this\npoint the adjacency is listed\
    \ in link state advertisements.\nFor a more detailed description of neighbor state\
    \ changes, together with\nthe additional actions involved in each change, see\
    \ Section 10.3.\n         _____________________________________________________\n\
    \                (Figures not included in text version.)\n          Figure 12:\
    \ Neighbor state changes (Hello Protocol)\n         Figure 13: Neighbor state\
    \ changes (Database Exchange)\n         _____________________________________________________\n\
    Down\n    This is the initial state of a neighbor conversation.  It indicates\n\
    \    that there has been no recent information received from the\n    neighbor.\
    \  On non-broadcast networks, Hello packets may still be\n    sent to \"Down\"\
    \ neighbors, although at a reduced frequency (see\n    Section 9.5.1).\nAttempt\n\
    \    This state is only valid for neighbors attached to non-broadcast\n    networks.\
    \  It indicates that no recent information has been received\n    from the neighbor,\
    \ but that a more concerted effort should be made\n    to contact the neighbor.\
    \  This is done by sending the neighbor Hello\n    packets at intervals of HelloInterval\
    \ (see Section 9.5.1).\nInit\n    In this state, an Hello packet has recently\
    \ been seen from the\n    neighbor.  However, bidirectional communication has\
    \ not yet been\n    established with the neighbor (i.e., the router itself did\
    \ not\n    appear in the neighbor's Hello packet).  All neighbors in this state\n\
    \    (or higher) are listed in the Hello packets sent from the associated\n  \
    \  interface.\n2-Way\n    In this state, communication between the two routers\
    \ is\n    bidirectional.  This has been assured by the operation of the Hello\n\
    \    Protocol.  This is the most advanced state short of beginning\n    adjacency\
    \ establishment.  The (Backup) Designated Router is selected\n    from the set\
    \ of neighbors in state 2-Way or greater.\nExStart\n    This is the first step\
    \ in creating an adjacency between the two\n    neighboring routers.  The goal\
    \ of this step is to decide which\n    router is the master, and to decide upon\
    \ the initial sequence\n    number.  Neighbor conversations in this state or greater\
    \ are called\n    adjacencies.\nExchange\n    In this state the router is describing\
    \ its entire link state\n    database by sending Database Description packets\
    \ to the neighbor.\n    Each Database Description Packet has a sequence number,\
    \ and is\n    explicitly acknowledged.  Only one Database Description Packet is\n\
    \    allowed outstanding at any one time.  In this state, Link State\n    Request\
    \ Packets may also be sent asking for the neighbor's more\n    recent advertisements.\
    \  All adjacencies in Exchange state or greater\n    are used by the flooding\
    \ procedure.  In fact, these adjacencies are\n    fully capable of transmitting\
    \ and receiving all types of OSPF\n    routing protocol packets.\nLoading\n  \
    \  In this state, Link State Request packets are sent to the neighbor\n    asking\
    \ for the more recent advertisements that have been discovered\n    (but not yet\
    \ received) in the Exchange state.\nFull\n    In this state, the neighboring routers\
    \ are fully adjacent.  These\n    adjacencies will now appear in router links\
    \ and network links\n    advertisements.\n10.2 Events causing neighbor state changes\n\
    State changes can be effected by a number of events.  These events are\nshown\
    \ in the labels of the arcs in Figures 12 and 13.  The label\ndefinitions are\
    \ as follows:\nHello Received\n    A Hello packet has been received from a neighbor.\n\
    Start\n    This is an indication that Hello Packets should now be sent to the\n\
    \    neighbor at intervals of HelloInterval seconds.  This event is\n    generated\
    \ only for neighbors associated with non-broadcast networks.\n2-Way Received\n\
    \    Bidirectional communication has been realized between the two\n    neighboring\
    \ routers.  This is indicated by this router seeing itself\n    in the other's\
    \ Hello packet.\nNegotiationDone\n    The Master/Slave relationship has been negotiated,\
    \ and sequence\n    numbers have been exchanged.  This signals the start of the\n\
    \    sending/receiving of Database Description packets.  For more\n    information\
    \ on the generation of this event, consult Section 10.8.\nExchange Done\n    Both\
    \ routers have successfully transmitted a full sequence of\n    Database Description\
    \ packets.  Each router now knows what parts of\n    its link state database are\
    \ out of date.  For more information on\n    the generation of this event, consult\
    \ Section 10.8.\nBadLSReq\n    A Link State Request has been received for a link\
    \ state\n    advertisement not contained in the database.  This indicates an\n\
    \    error in the synchronization process.\nLoading Done\n    Link State Updates\
    \ have been received for all out-of-date portions\n    of the database.  This\
    \ is indicated by the Link state request list\n    becoming empty after the Database\
    \ Description Process has completed.\nAdjOK?\n    A decision must be made (again)\
    \ as to whether an adjacency should be\n    established/maintained with the neighbor.\
    \  This event will start\n    some adjacencies forming, and destroy others.\n\
    The following events cause well developed neighbors to revert to lesser\nstates.\
    \  Unlike the above events, these events may occur when the\nneighbor conversation\
    \ is in any of a number of states.\nSeq Number Mismatch\n    A Database Description\
    \ packet has been received that either a) has\n    an unexpected sequence number,\
    \ b) unexpectedly has the Init bit set\n    or c) has an Options field differing\
    \ from the last Options field\n    received in a Database Description packet.\
    \  Any of these conditions\n    indicate that some error has occurred during adjacency\n\
    \    establishment.\n1-Way\n    An Hello packet has been received from the neighbor,\
    \ in which this\n    router is not mentioned.  This indicates that communication\
    \ with the\n    neighbor is not bidirectional.\nKillNbr\n    This  is  an  indication\
    \ that  all  communication  with  the\n    neighbor  is now  impossible,  forcing\
    \  the  neighbor  to  revert\n    to  Down  state.\nInactivity Timer\n    The\
    \ inactivity Timer has fired.  This means that no Hello packets\n    have been\
    \ seen recently from the neighbor.  The neighbor reverts to\n    Down state.\n\
    LLDown\n    This is an indication from the lower level protocols that the\n  \
    \  neighbor is now unreachable.  For example, on an X.25 network this\n    could\
    \ be indicated by an X.25 clear indication with appropriate\n    cause and diagnostic\
    \ fields.  This event forces the neighbor into\n    Down state.\n10.3 The Neighbor\
    \ state machine\nA detailed description of the neighbor state changes follows.\
    \  Each\nstate change is invoked by an event (Section 10.2).  This event may\n\
    produce different effects, depending on the current state of the\nneighbor.  For\
    \ this reason, the state machine below is organized by\ncurrent neighbor state\
    \ and received event.  Each entry in the state\nmachine describes the resulting\
    \ new neighbor state and the required set\nof additional actions.\nWhen an neighbor's\
    \ state changes, it may be necessary to rerun the\nDesignated Router election\
    \ algorithm.  This is determined by whether the\ninterface Neighbor Change event\
    \ is generated (see Section 9.2).  Also,\nif the Interface is in DR state (the\
    \ router is itself Designated\nRouter), changes in neighbor state may cause a\
    \ new network links\nadvertisement to be originated (see Section 12.4).\nWhen\
    \ the neighbor state machine needs to invoke the interface state\nmachine, it\
    \ should be done as a scheduled task (see Section 4.4).  This\nsimplifies things,\
    \ by ensuring that neither state machine will be\nexecuted recursively.\n State(s):\
    \  Down\n    Event:  Start\nNew state:  Attempt\n   Action:  Send an hello to\
    \ the neighbor (this neighbor is always\n            associated with a non-broadcast\
    \ network) and start the\n            inactivity timer for the neighbor.  The\
    \ timer's later firing\n            would indicate that communication with the\
    \ neighbor was not\n            attained.\n State(s):  Attempt\n    Event:  Hello\
    \ Received\nNew state:  Init\n   Action:  Restart the inactivity timer for the\
    \ neighbor, since the\n            neighbor has now been heard from.\n State(s):\
    \  Down\n    Event:  Hello Received\nNew state:  Init\n   Action:  Start the inactivity\
    \ timer for the neighbor.  The timer's\n            later firing would indicate\
    \ that the neighbor is dead.\n State(s):  Init or greater\n    Event:  Hello Received\n\
    New state:  No state change.\n   Action:  Restart the inactivity timer for the\
    \ neighbor, since the\n            neighbor has again been heard from.\n State(s):\
    \  Init\n    Event:  2-Way Received\nNew state:  Depends upon action routine.\n\
    \   Action:  Determine whether an adjacency should be established with\n     \
    \       the neighbor (see Section 10.4).  If not, the new neighbor\n         \
    \   state is 2-Way.\n            Otherwise (an adjacency should be established)\
    \ the neighbor\n            state transitions to ExStart.  Upon entering this\
    \ state, the\n            router increments the sequence number for this neighbor.\
    \  If\n            this is the first time that an adjacency has been attempted,\n\
    \            the sequence number should be assigned some unique value\n      \
    \      (like the time of day clock).  It then declares itself\n            master\
    \ (sets the master/slave bit to master), and starts\n            sending Database\
    \ Description Packets, with the initialize\n            (I), more (M) and master\
    \ (MS) bits set.  This Database\n            Description Packet should be otherwise\
    \ empty.  This Database\n            Description Packet should be retransmitted\
    \ at intervals of\n            RxmtInterval until the next state is entered (see\
    \ Section\n            10.8).\n State(s):  ExStart\n    Event:  NegDone\nNew state:\
    \  Exchange\n   Action:  The router must list the contents of its entire area\
    \ link\n            state database in the neighbor Database summary list.  The\n\
    \            area link state database consists of the router links,\n        \
    \    network links and summary links contained in the area\n            structure,\
    \ along with the AS external links contained in the\n            global structure.\
    \  AS external link advertisements are\n            omitted from a virtual neighbor's\
    \ Database summary list.  AS\n            external advertisements are omitted\
    \ from the Database\n            summary list if the area has been configured\
    \ as a stub (see\n            Section 3.6).  Advertisements whose age is equal\
    \ to MaxAge\n            are instead added to the neighbor's Link state\n    \
    \        retransmission list.  A summary of the Database summary list\n      \
    \      will be sent to the neighbor in Database Description\n            packets.\
    \  Each Database Description Packet has a sequence\n            number, and is\
    \ explicitly acknowledged.  Only one Database\n            Description Packet\
    \ is allowed outstanding at any one time.\n            For more detail on the\
    \ sending and receiving of Database\n            Description packets, see Sections\
    \ 10.8 and 10.6.\n State(s):  Exchange\n    Event:  Exchange Done\nNew state:\
    \  Depends upon action routine.\n   Action:  If the neighbor Link state request\
    \ list is empty, the new\n            neighbor state is Full.  No other action\
    \ is required.  This\n            is an adjacency's final state.\n           \
    \ Otherwise, the new neighbor state is Loading.  Start (or\n            continue)\
    \ sending Link State Request packets to the neighbor\n            (see Section\
    \ 10.9).  These are requests for the neighbor's\n            more recent advertisements\
    \ (which were discovered but not\n            yet received in the Exchange state).\
    \  These advertisements\n            are listed in the Link state request list\
    \ associated with\n            the neighbor.\n State(s):  Loading\n    Event:\
    \  Loading Done\nNew state:  Full\n   Action:  No action required.  This is an\
    \ adjacency's final state.\n State(s):  2-Way\n    Event:  AdjOK?\nNew state:\
    \  Depends upon action routine.\n   Action:  Determine whether an adjacency should\
    \ be formed with the\n            neighboring router (see Section 10.4).  If not,\
    \ the neighbor\n            state remains at 2-Way.  Otherwise, transition the\
    \ neighbor\n            state to ExStart and perform the actions associated with\
    \ the\n            above state machine entry for state Init and event 2-Way\n\
    \            Received.\n State(s):  ExStart or greater\n    Event:  AdjOK?\nNew\
    \ state:  Depends upon action routine.\n   Action:  Determine whether the neighboring\
    \ router should still be\n            adjacent.  If yes, there is no state change\
    \ and no further\n            action is necessary.\n            Otherwise, the\
    \ (possibly partially formed) adjacency must be\n            destroyed.  The neighbor\
    \ state transitions to 2-Way.  The\n            Link state retransmission list,\
    \ Database summary list and\n            Link state request list are cleared of\
    \ link state\n            advertisements.\n State(s):  Exchange or greater\n \
    \   Event:  Seq Number Mismatch\nNew state:  ExStart\n   Action:  The (possibly\
    \ partially formed) adjacency is torn down, and\n            then an attempt is\
    \ made at reestablishment.  The neighbor\n            state first transitions\
    \ to ExStart.  The Link state\n            retransmission list, Database summary\
    \ list and Link state\n            request list are cleared of link state advertisements.\
    \  Then\n            the router increments the sequence number for this neighbor,\n\
    \            declares itself master (sets the master/slave bit to\n          \
    \  master), and starts sending Database Description Packets,\n            with\
    \ the initialize (I), more (M) and master (MS) bits set.\n            This Database\
    \ Description Packet should be otherwise empty\n            (see Section 10.8).\n\
    \ State(s):  Exchange or greater\n    Event:  BadLSReq\nNew state:  ExStart\n\
    \   Action:  The action for event BadLSReq is exactly the same as for the\n  \
    \          neighbor event SeqNumberMismatch.  The (possibly partially\n      \
    \      formed) adjacency is torn down, and then an attempt is made\n         \
    \   at reestablishment.  For more information, see the neighbor\n            state\
    \ machine entry that is invoked when event\n            SeqNumberMismatch is generated\
    \ in state Exchange or greater.\n State(s):  Any state\n    Event:  KillNbr\n\
    New state:  Down\n   Action:  The Link state retransmission list, Database summary\
    \ list\n            and Link state request list are cleared of link state\n  \
    \          advertisements.  Also, the inactivity timer is disabled.\n State(s):\
    \  Any state\n    Event:  LLDown\nNew state:  Down\n   Action:  The Link state\
    \ retransmission list, Database summary list\n            and Link state request\
    \ list are cleared of link state\n            advertisements.  Also, the inactivity\
    \ timer is disabled.\n State(s):  Any state\n    Event:  Inactivity Timer\nNew\
    \ state:  Down\n   Action:  The Link state retransmission list, Database summary\
    \ list\n            and Link state request list are cleared of link state\n  \
    \          advertisements.\n State(s):  2-Way or greater\n    Event:  1-Way Received\n\
    New state:  Init\n   Action:  The Link state retransmission list, Database summary\
    \ list\n            and Link state request list are cleared of link state\n  \
    \          advertisements.\n State(s):  2-Way or greater\n    Event:  2-Way received\n\
    New state:  No state change.\n   Action:  No action required.\n State(s):  Init\n\
    \    Event:  1-Way received\nNew state:  No state change.\n   Action:  No action\
    \ required.\n10.4 Whether to become adjacent\nAdjacencies are established with\
    \ some subset of the router's neighbors.\nRouters connected by point-to-point\
    \ networks and virtual links always\nbecome adjacent.  On multi-access networks,\
    \ all routers become adjacent\nto both the Designated Router and the Backup Designated\
    \ Router.\nThe adjacency-forming decision occurs in two places in the neighbor\n\
    state machine.  First, when bidirectional communication is initially\nestablished\
    \ with the neighbor, and secondly, when the identity of the\nattached network's\
    \ (Backup) Designated Router changes.  If the decision\nis made to not attempt\
    \ an adjacency, the state of the neighbor\ncommunication stops at 2-Way.\nAn adjacency\
    \ should be established with a (bidirectional) neighbor when\nat least one of\
    \ the following conditions holds:\no   The underlying network type is point-to-point\n\
    o   The underlying network type is virtual link\no   The router itself is the\
    \ Designated Router\no   The router itself is the Backup Designated Router\no\
    \   The neighboring router is the Designated Router\no   The neighboring router\
    \ is the Backup Designated Router\n10.5 Receiving Hello packets\nThis section\
    \ explains the detailed processing of a received Hello\npacket.  (See Section\
    \ A.3.2 for the format of Hello packets.)  The\ngeneric input processing of OSPF\
    \ packets will have checked the validity\nof the IP header and the OSPF packet\
    \ header.  Next, the values of the\nNetwork Mask, HelloInt, and DeadInt fields\
    \ in the received Hello packet\nmust be checked against the values configured\
    \ for the receiving\ninterface.  Any mismatch causes processing to stop and the\
    \ packet to be\ndropped.  In other words, the above fields are really describing\
    \ the\nattached network's configuration.  Note that the value of the Network\n\
    Mask field should not be checked in Hellos received on unnumbered serial\nlines\
    \ or on virtual links.\nThe receiving interface attaches to a single OSPF area\
    \ (this could be\nthe backbone).  The setting of the E-bit found in the Hello\
    \ Packet's\noption field must match this area's external routing capability. \
    \ If AS\nexternal advertisements are not flooded into/throughout the area (i.e,\n\
    the area is a \"stub\") the E-bit must be clear in received hellos,\notherwise\
    \ the E-bit must be set.  A mismatch causes processing to stop\nand the packet\
    \ to be dropped.  The setting of the rest of the bits in\nthe Hello Packet's option\
    \ field should be ignored.\nAt this point, an attempt is made to match the source\
    \ of the Hello\nPacket to one of the receiving interface's neighbors.  If the\
    \ receiving\ninterface is a multi-access network (either broadcast or non-broadcast)\n\
    the source is identified by the IP source address found in the Hello's\nIP header.\
    \  If the receiving interface is a point-to-point link or a\nvirtual link, the\
    \ source is identified by the Router ID found in the\nHello's OSPF packet header.\
    \  The interface's current list of neighbors\nis contained in the interface's\
    \ data structure.  If a matching neighbor\nstructure cannot be found, (i.e., this\
    \ is the first time the neighbor\nhas been detected), one is created.  The initial\
    \ state of a newly\ncreated neighbor is set to Down.\nWhen receiving an Hello\
    \ Packet from a neighbor on a multi-access network\n(broadcast or non-broadcast),\
    \ set the neighbor structure's Neighbor ID\nequal to the Router ID found in the\
    \ packet's OSPF header.  When\nreceiving an Hello on a point-to-point network\
    \ (but not on a virtual\nlink) set the neighbor structure's Neighbor IP address\
    \ to the packet's\nIP source address.\nNow the rest of the Hello Packet is examined,\
    \ generating events to be\ngiven to the neighbor and interface state machines.\
    \  These state\nmachines are specified either to be executed or scheduled (see\
    \ Section\n4.4).  For example, by specifying below that the neighbor state machine\n\
    be executed in line, several neighbor state transitions may be effected\nby a\
    \ single received Hello:\no   Each Hello Packet causes the neighbor state machine\
    \ to be executed\n    with the event Hello Received.\no   Then the list of neighbors\
    \ contained in the Hello Packet is\n    examined.  If the router itself appears\
    \ in this list, the neighbor\n    state machine should be executed with the event\
    \ 2-Way Received.\n    Otherwise, the neighbor state machine should be executed\
    \ with the\n    event 1-Way Received, and the processing of the packet stops.\n\
    o   Next, the Hello packet's Router Priority field is examined.  If this\n   \
    \ field is different than the one previously received from the\n    neighbor,\
    \ the receiving interface's state machine is scheduled with\n    the event NeighborChange.\
    \  In any case, the Router Priority field in\n    the neighbor data structure\
    \ should be set accordingly.\no   Next the Designated Router field in the Hello\
    \ Packet is examined.\n    If the neighbor is both declaring itself to be Designated\
    \ Router\n    (Designated Router field = neighbor IP address) and the Backup\n\
    \    Designated Router field in the packet is equal to 0.0.0.0 and the\n    receiving\
    \ interface is in state Waiting, the receiving interface's\n    state machine\
    \ is scheduled with the event BackupSeen.  Otherwise, if\n    the neighbor is\
    \ declaring itself to be Designated Router and it had\n    not previously, or\
    \ the neighbor is not declaring itself Designated\n    Router where it had previously,\
    \ the receiving interface's state\n    machine is scheduled with the event NeighborChange.\
    \  In any case,\n    the Designated Router item in the neighbor structure is set\n\
    \    accordingly.\no   Finally, the Backup Designated Router field in the Hello\
    \ Packet is\n    examined.  If the neighbor is declaring itself to be Backup\n\
    \    Designated Router (Backup Designated Router field = neighbor IP\n    address)\
    \ and the receiving interface is in state Waiting, the\n    receiving interface's\
    \ state machine is scheduled with the event\n    BackupSeen.  Otherwise, if the\
    \ neighbor is declaring itself to be\n    Backup Designated Router and it had\
    \ not previously, or the neighbor\n    is not declaring itself Backup Designated\
    \ Router where it had\n    previously, the receiving interface's state machine\
    \ is scheduled\n    with the event NeighborChange.  In any case, the Backup Designated\n\
    \    Router item in the neighbor structure is set accordingly.\n10.6 Receiving\
    \ Database Description Packets\nThis section explains the detailed processing\
    \ of a received Database\nDescription packet.  The incoming Database Description\
    \ Packet has\nalready been associated with a neighbor and receiving interface\
    \ by the\ngeneric input packet processing (Section 8.2).  The further processing\n\
    of the Database Description Packet depends on the neighbor state.  If\nthe neighbor's\
    \ state is Down or Attempt the packet should be ignored.\nOtherwise, if the state\
    \ is:\nInit\n    The neighbor state machine should be executed with the event\
    \ 2-Way\n    Received.  This causes an immediate state change to either state\
    \ 2-\n    Way or state Exstart.  The processing of the current packet should\n\
    \    then continue in this new state.\n2-Way\n    The packet should be ignored.\
    \  Database description packets are used\n    only for the purpose of bringing\
    \ up adjacencies.[7]\nExStart\n    If the received packet matches one of the following\
    \ cases, then the\n    neighbor state machine should be executed with the event\n\
    \    NegotiationDone (causing the state to transition to Exchange), the\n    packet's\
    \ Options field should be recorded in the neighbor\n    structure's Neighbor Options\
    \ field and the packet should be accepted\n    as next in sequence and processed\
    \ further (see below).  Otherwise,\n    the packet should be ignored.\n    o \
    \  The initialize(I), more (M) and master(MS) bits are set, the\n        contents\
    \ of the packet are empty, and the neighbor's Router ID\n        is larger than\
    \ the router's own.  In this case the router is now\n        Slave.  Set the master/slave\
    \ bit to slave, and set the sequence\n        number to that specified by the\
    \ master.\n    o   The initialize(I) and master(MS) bits are off, the packet's\n\
    \        sequence number equals the router's own sequence number\n        (indicating\
    \ acknowledgment) and the neighbor's Router ID is\n        smaller than the router's\
    \ own.  In this case the router is\n        Master.\nExchange\n    If the state\
    \ of the MS-bit is inconsistent with the master/slave\n    state of the connection,\
    \ generate the neighbor event Seq Number\n    Mismatch and stop processing the\
    \ packet.  Otherwise:\n    o   If the initialize(I) bit is set, generate the neighbor\
    \ event Seq\n        Number Mismatch and stop processing the packet.\n    o  \
    \ If the packet's Options field indicates a different set of\n        optional\
    \ OSPF capabilities than were previously received from\n        the neighbor (recorded\
    \ in the Neighbor Options field of the\n        neighbor structure), generate\
    \ the neighbor event Seq Number\n        Mismatch and stop processing the packet.\n\
    \    o   If the router is master, and the packet's sequence number equals\n  \
    \      the router's own sequence number (this packet is the next in\n        sequence)\
    \ the packet should be accepted and its contents\n        processed (below).\n\
    \    o   If the router is master, and the packet's sequence number is one\n  \
    \      less than the router's sequence number, the packet is a\n        duplicate.\
    \  Duplicates should be discarded by the master.\n    o   If the router is slave,\
    \ and the packet's sequence number is one\n        more than the router's own\
    \ sequence number (this packet is the\n        next in sequence) the packet should\
    \ be accepted and its contents\n        processed (below).\n    o   If the router\
    \ is slave, and the packet's sequence number is\n        equal to the router's\
    \ sequence number, the packet is a\n        duplicate.  The slave must respond\
    \ to duplicates by repeating\n        the last Database Description packet that\
    \ it sent.\n    o   Else, generate the neighbor event Seq Number Mismatch and\
    \ stop\n        processing the packet.\nLoading or Full\n    In this state, the\
    \ router has sent and received an entire sequence\n    of Database Descriptions.\
    \  The only packets received should be\n    duplicates (see above).  In particular,\
    \ the packet's Options field\n    should match the set of optional OSPF capabilities\
    \ previously\n    indicated by the neighbor (stored in the neighbor structure's\n\
    \    neighbor Options field).  Any other packets received, including the\n   \
    \ reception of a packet with the Initialize(I) bit set, should\n    generate the\
    \ neighbor event Seq Number Mismatch.[8] Duplicates\n    should be discarded by\
    \ the master.  The slave must respond to\n    duplicates by repeating the last\
    \ Database Description packet that it\n    sent.\nWhen the router accepts a received\
    \ Database Description Packet as the\nnext in sequence the packet contents are\
    \ processed as follows.  For each\nlink state advertisement listed, the advertisement's\
    \ LS type is checked\nfor validity.  If the LS type is unknown (e.g., not one\
    \ of the LS types\n1-5 defined by this specification), or if this is a AS external\n\
    advertisement (LS type = 5) and the neighbor is associated with a stub\narea,\
    \ generate the neighbor event Seq Number Mismatch and stop\nprocessing the packet.\
    \  Otherwise, the router looks up the advertisement\nin its database to see whether\
    \ it also has an instance of the link state\nadvertisement.  If it does not, or\
    \ if the database copy is less recent\n(see Section 13.1), the link state advertisement\
    \ is put on the Link\nstate request list so that it can be requested (immediately\
    \ or at some\nlater time) in Link State Request Packets.\nWhen the router accepts\
    \ a received Database Description Packet as the\nnext in sequence, it also performs\
    \ the following actions, depending on\nwhether it is master or slave:\nMaster\n\
    \    Increments the sequence number.  If the router has already sent its\n   \
    \ entire sequence of Database Descriptions, and the just accepted\n    packet\
    \ has the more bit (M) set to 0, the neighbor event Exchange\n    Done is generated.\
    \  Otherwise, it should send a new Database\n    Description to the slave.\nSlave\n\
    \    Sets the sequence number to the sequence number appearing in the\n    received\
    \ packet.  The slave must send a Database Description in\n    reply.  If the received\
    \ packet has the more bit (M) set to 0, and\n    the packet to be sent by the\
    \ slave will have the M-bit set to 0\n    also, the neighbor event Exchange Done\
    \ is generated.  Note that the\n    slave always generates this event before the\
    \ master.\n10.7 Receiving Link State Request Packets\nThis section explains the\
    \ detailed processing of received Link State\nRequest packets.  Received Link\
    \ State Request Packets specify a list of\nlink state advertisements that the\
    \ neighbor wishes to receive.  Link\nstate Request Packets should be accepted\
    \ when the neighbor is in states\nExchange, Loading, or Full.  In all other states\
    \ Link State Request\nPackets should be ignored.\nEach link state advertisement\
    \ specified in the Link State Request packet\nshould be located in the router's\
    \ database, and copied into Link State\nUpdate packets for transmission to the\
    \ neighbor.  These link state\nadvertisements should NOT be placed on the Link\
    \ state retransmission\nlist for the neighbor.  If a link state advertisement\
    \ cannot be found in\nthe database, something has gone wrong with the synchronization\n\
    procedure, and neighbor event BadLSReq should be generated.\n10.8 Sending Database\
    \ Description Packets\nThis section describes how Database Description Packets\
    \ are sent to a\nneighbor.  The router's optional OSPF capabilities (see Section\
    \ 4.5) are\ntransmitted to the neighbor in the Options field of the Database\n\
    Description packet.  The router should maintain the same set of optional\ncapabilities\
    \ throughout the Database Exchange and flooding procedures.\nIf for some reason\
    \ the router's optional capabilities change, the\nDatabase Exchange procedure\
    \ should be restarted by reverting to neighbor\nstate ExStart.  There are currently\
    \ two optional capabilities defined.\nThe T-bit should be set if and only if the\
    \ router is capable of\ncalculating separate routes for each IP TOS.  The E-bit\
    \ should be set if\nand only if the attached network belongs to a non-stub area.\
    \  The rest\nof the Options field should be set to zero.\nThe sending of Database\
    \ Description packets depends on the neighbor's\nstate.  In state ExStart the\
    \ router sends empty Database Description\npackets, with the initialize (I), more\
    \ (M) and master (MS) bits set.\nThese packets are retransmitted every RxmtInterval\
    \ seconds.\nIn state Exchange the Database Description Packets actually contain\n\
    summaries of the link state information contained in the router's\ndatabase. \
    \ Each link state advertisement in the area's topological\ndatabase (at the time\
    \ the neighbor transitions into Exchange state) is\nlisted in the neighbor Database\
    \ summary list.  When a new Database\nDescription Packet is to be sent, the packet's\
    \ sequence number is\nincremented, and the (new) top of the Database summary list\
    \ is described\nby the packet.  Items are removed from the Database summary list\
    \ when\nthe previous packet is acknowledged.\nIn state Exchange, the determination\
    \ of when to send a packet depends on\nwhether the router is master or slave:\n\
    Master\n    Packets are sent when either a) the slave acknowledges the previous\n\
    \    packet by echoing the sequence number or b) RxmtInterval seconds\n    elapse\
    \ without an acknowledgment, in which case the previous packet\n    is retransmitted.\n\
    Slave\n    Packets are sent only in response to packets received from the\n  \
    \  master.  If the packet received from the master is new, a new packet\n    is\
    \ sent, otherwise the previous packet is resent.\nIn states Loading and Full the\
    \ slave must resend its last packet in\nresponse to duplicate packets received\
    \ from the master.  For this reason\nthe slave must wait RouterDeadInterval seconds\
    \ before freeing the last\npacket.  Reception of a packet from the master after\
    \ this interval will\ngenerate a Seq Number Mismatch neighbor event.\n10.9 Sending\
    \ Link State Request Packets\nIn neighbor states Exchange or Loading, the Link\
    \ state request list\ncontains a list of those link state advertisements that\
    \ need to be\nobtained from the neighbor.  To request these advertisements, a\
    \ router\nsends the neighbor the beginning of the Link state request list,\npackaged\
    \ in a Link State Request packet.\nWhen the neighbor responds to these requests\
    \ with the proper Link State\nUpdate packet(s), the Link state request list is\
    \ truncated and a new\nLink State Request packet is sent.  This process continues\
    \ until the\nlink state request list becomes empty.  Unsatisfied Link State Requests\n\
    are retransmitted at intervals of RxmtInterval.  There should be at most\none\
    \ Link State Request packet outstanding at any one time.\nWhen the Link state\
    \ request list becomes empty, and the neighbor state\nis Loading (i.e., a complete\
    \ sequence of Database Description packets\nhas been received from the neighbor),\
    \ the Loading Done neighbor event is\ngenerated.\n10.10 An Example\nFigure 14\
    \ shows an example of an adjacency forming.  Routers RT1 and RT2\nare both connected\
    \ to a broadcast network.  It is assumed that RT2 is\nthe Designated Router for\
    \ the network, and that RT2 has a higher Router\nID that router RT1.\nThe neighbor\
    \ state changes realized by each router are listed on the\nsides of the figure.\n\
    At the beginning of Figure 14, router RT1's interface to the network\nbecomes\
    \ operational.  It begins sending hellos, although it doesn't know\nthe identity\
    \ of the Designated Router or of any other neighboring\nrouters.  Router RT2 hears\
    \ this hello (moving the neighbor to Init\nstate), and in its next hello indicates\
    \ that it is itself the Designated\nRouter and that it has heard hellos from RT1.\
    \  This in turn causes RT1\nto go to state ExStart, as it starts to bring up the\
    \ adjacency.\nRT1 begins by asserting itself as the master.  When it sees that\
    \ RT2 is\nindeed the master (because of RT2's higher Router ID), RT1 transitions\n\
    to slave state and adopts its neighbor's sequence number.  Database\nDescription\
    \ packets are then exchanged, with polls coming from the\nmaster (RT2) and responses\
    \ from the slave (RT1).  This sequence of\nDatabase Description Packets ends when\
    \ both the poll and associated\nresponse has the M-bit off.\nIn this example,\
    \ it is assumed that RT2 has a completely up to date\ndatabase.  In that case,\
    \ RT2 goes immediately into Full state.  RT1 will\ngo into Full state after updating\
    \ the necessary parts of its database.\nThis is done by sending Link State Request\
    \ Packets, and receiving Link\nState Update Packets in response.  Note that, while\
    \ RT1 has waited until\na complete set of Database Description Packets has been\
    \ received (from\nRT2) before sending any Link State Request Packets, this need\
    \ not be the\ncase.  RT1 could have interleaved the sending of Link State Request\n\
    Packets with the reception of Database Description Packets.\n11. The Routing Table\
    \ Structure\nThe routing table data structure contains all the information necessary\n\
    to forward an IP data packet toward its destination.  Each routing table\nentry\
    \ describes the collection of best paths to a particular\ndestination.  When forwarding\
    \ an IP data packet, the routing table entry\nproviding the best match for the\
    \ packet's IP destination is located.\n                ________________________________________\n\
    \                 (Figure not included in text version.)\n                Figure\
    \ 14: An adjacency bring-up example\n                ________________________________________\n\
    The matching routing table entry then provides the next hop towards the\npacket's\
    \ destination.  OSPF also provides for the existence of a default\nroute (Destination\
    \ ID = DefaultDestination).  When the default route\nexists, it matches all IP\
    \ destinations (although any other matching\nentry is a better match).  Finding\
    \ the routing table entry that best\nmatches an IP destination is further described\
    \ in Section 11.1.\nThere is a single routing table in each router.  Two sample\
    \ routing\ntables are described in Sections 11.2 and 11.3.  The building of the\n\
    routing table is discussed in Section 16.\nThe rest of this section defines the\
    \ fields found in a routing table\nentry.  The first set of fields describes the\
    \ routing table entry's\ndestination.\nDestination Type\n    The destination can\
    \ be one of three types.  Only the first type,\n    Network, is actually used\
    \ when forwarding IP data traffic.  The\n    other destinations are used solely\
    \ as intermediate steps in the\n    routing table build process.\n    Network\n\
    \        A range of IP addresses, to which IP data traffic may be\n        forwarded.\
    \  This includes IP networks (class A, B, or C), IP\n        subnets, and single\
    \ IP hosts.  The default route also falls in\n        this category.\n    Area\
    \ border router\n        Routers that are connected to multiple OSPF areas.  Such\
    \ routers\n        originate summary link advertisements.  These routing table\n\
    \        entries are used when calculating the inter-area routes (see\n      \
    \  Section 16.2).  These routing table entries may also be\n        associated\
    \ with configured virtual links.\n    AS boundary router\n        Routers that\
    \ originate AS external link advertisements.  These\n        routing table entries\
    \ are used when calculating the AS external\n        routes (see Section 16.4).\n\
    Destination ID\n    The destination's identifier or name.  This depends on the\n\
    \    destination's type.  For networks, the identifier is their\n    associated\
    \ IP address.  For all other types, the identifier is the\n    OSPF Router ID.[9]\n\
    Address Mask\n    Only defined for networks.  The network's IP address together\
    \ with\n    its address mask defines a range of IP addresses.  For IP subnets,\n\
    \    the address mask is referred to as the subnet mask.  For host\n    routes,\
    \ the mask is \"all ones\" (0xffffffff).\nOptional Capabilities\n    When the\
    \ destination is a router (either an area border router or an\n    AS boundary\
    \ router) this field indicates the optional OSPF\n    capabilities supported by\
    \ the destination router.  The two optional\n    capabilities currently defined\
    \ by this specification are the ability\n    to route based on IP TOS and the\
    \ ability to process AS external\n    advertisements.  For a further discussion\
    \ of OSPF's optional\n    capabilities, see Section 4.5.\nThe set of paths to\
    \ use for a destination may vary based on IP Type of\nService and the OSPF area\
    \ to which the paths belong.  This means that\nthere may be multiple routing table\
    \ entries for the same destination,\ndepending on the values of the next two fields.\n\
    Type of Service\n    There can be a separate set of routes for each IP Type of\
    \ Service.\n    The encoding of TOS in OSPF link state advertisements is described\n\
    \    in Section 12.3.\nArea\n    This field indicates the area whose link state\
    \ information has led\n    to the routing table entry's collection of paths. \
    \ This is called\n    the entry's associated area.  For sets of AS external paths,\
    \ this\n    field is not defined.  For destinations of type \"area border\n  \
    \  router\", there may be separate sets of paths (and therefore separate\n   \
    \ routing table entries) associated with each of several areas.  This\n    will\
    \ happen when two area border routers share multiple areas in\n    common.  For\
    \ all other destination types, only the set of paths\n    associated with the\
    \ best area (the one providing the shortest route)\n    is kept.\nThe rest of\
    \ the routing table entry describes the set of paths to the\ndestination.  The\
    \ following fields pertain to the set of paths as a\nwhole.  In other words, each\
    \ one of the paths contained in a routing\ntable entry is of the same path-type\
    \ and cost (see below).\nPath-type\n    There are four possible types of paths\
    \ used to route traffic to the\n    destination, listed here in order of preference:\
    \ intra-area, inter-\n    area, type 1 external or type 2 external.  Intra-area\
    \ paths indicate\n    destinations belonging to one of the router's attached areas.\n\
    \    Inter-area paths are paths to destinations in other OSPF areas.\n    These\
    \ are discovered through the examination of received summary\n    link advertisements.\
    \  AS external paths are paths to destinations\n    external to the AS.  These\
    \ are detected through the examination of\n    received AS external link advertisements.\n\
    Cost\n    The link state cost of the path to the destination.  For all paths\n\
    \    except type 2 external paths this describes the entire path's cost.\n   \
    \ For Type 2 external paths, this field describes the cost of the\n    portion\
    \ of the path internal to the AS.  This cost is calculated as\n    the sum of\
    \ the costs of the path's constituent links.\nType 2 cost\n    Only valid for\
    \ type 2 external paths.  For these paths, this field\n    indicates the cost\
    \ of the path's external portion.  This cost has\n    been advertised by an AS\
    \ boundary router, and is the most\n    significant part of the total path cost.\
    \  For example, an external\n    type 2 path with type 2 cost of 5 is always preferred\
    \ over a path\n    with type 2 cost of 10, regardless of the cost of the two paths'\n\
    \    internal components.\nLink State Origin\n    Valid only for intra-area paths,\
    \ this field indicates the link state\n    advertisement (router links or network\
    \ links) that directly\n    references the destination.  For example, if the destination\
    \ is a\n    transit network, this is the transit network's network links\n   \
    \ advertisement.  If the destination is a stub network, this is the\n    router\
    \ links advertisement for the attached router.  The\n    advertisement is discovered\
    \ during the shortest-path tree\n    calculation (see Section 16.1).  Multiple\
    \ advertisements may\n    reference the destination, however a tie-breaking scheme\
    \ always\n    reduces the choice to a single advertisement.\n    This field is\
    \ for informational purposes only.  The advertisement\n    could be used as a\
    \ root for an SPF calculation when building a\n    reverse path forwarding tree.\
    \  This is beyond the scope of this\n    specification.\nWhen multiple paths of\
    \ equal path-type and cost exist to a destination\n(called elsewhere \"equal-cost\"\
    \ paths), they are stored in a single\nrouting table entry.  Each one of the \"\
    equal-cost\" paths is\ndistinguished by the following fields:\nNext hop\n    The\
    \ outgoing router interface to use when forwarding traffic to the\n    destination.\
    \  On multi-access networks, the next hop also includes\n    the IP address of\
    \ the next router (if any) in the path towards the\n    destination.  This next\
    \ router will always be one of the adjacent\n    neighbors.\nAdvertising router\n\
    \    Valid only for inter-area and AS external paths.  This field\n    indicates\
    \ the Router ID of the router advertising the summary link\n    or AS external\
    \ link that led to this path.\n11.1 Routing table lookup\nWhen an IP data packet\
    \ is received, an OSPF router finds the routing\ntable entry that best matches\
    \ the packet's destination. This routing\ntable entry then provides the outgoing\
    \ interface and next hop router to\nuse in forwarding the packet. This section\
    \ describes the process of\nfinding the best matching routing table entry. The\
    \ process consists of a\nnumber of steps, wherein the collection of routing table\
    \ entries is\nprogressively pruned. In the end, the single routing table entry\n\
    remaining is the called best match.\nNote that the steps described below may fail\
    \ to produce a best match\nrouting table entry (i.e., all existing routing table\
    \ entries are pruned\nfor some reason or another). In this case, the packet's\
    \ IP destination\nis considered unreachable. Instead of being forwarded, the packet\
    \ should\nbe dropped and an ICMP destination unreachable message should be\nreturned\
    \ to the packet's source.\n(1) Select the complete set of \"matching\" routing\
    \ table entries from the\n    routing table.  Each routing table entry describes\
    \ a (set of)\n    path(s) to a range of IP addresses. If the data packet's IP\n\
    \    destination falls into an entry's range of IP addresses, the routing\n  \
    \  table entry is called a match. (It is quite likely that multiple\n    entries\
    \ will match the data packet.  For example, a default route\n    will match all\
    \ packets.)\n(2) Suppose that the packet's IP destination falls into one of the\n\
    \    router's configured area address ranges (see Section 3.5), and that\n   \
    \ the particular area address range is active. This means that there\n    are\
    \ one or more reachable (by intra-area paths) networks contained\n    in the area\
    \ address range. The packet's IP destination is then\n    required to belong to\
    \ one of these constituent networks. For this\n    reason, only matching routing\
    \ table entries with path-type of\n    intra-area are considered (all others are\
    \ pruned). If no such\n    matching entries exist, the destination is unreachable\
    \ (see above).\n    Otherwise, skip to step 4.\n(3) Reduce the set of matching\
    \ entries to those having the most\n    preferential path-type (see Section 11).\
    \ OSPF has a four level\n    hierarchy of paths. Intra-area paths are the most\
    \ preferred,\n    followed in order by inter-area, Type 1 external and Type 2\
    \ external\n    paths.\n(4) Select the remaining routing table entry that provides\
    \ the longest\n    (most specific) match. Another way of saying this is to choose\
    \ the\n    remaining entry that specifies the narrowest range of IP\n    addresses.[10]\
    \ For example, the entry for the address/mask pair of\n    (128.185.1.0, 0xffffff00)\
    \ is more specific than an entry for the\n    pair (128.185.0.0, 0xffff0000).\
    \ The default route is the least\n    specific match, since it matches all destinations.\n\
    (5) At this point, there may still be multiple routing table entries\n    remaining.\
    \ Each routing entry will specify the same range of IP\n    addresses, but a different\
    \ IP Type of Service. Select the routing\n    table entry whose TOS value matches\
    \ the TOS found in the packet\n    header. If there is no routing table entry\
    \ for this TOS, select the\n    routing table entry for TOS 0. In other words,\
    \ packets requesting\n    TOS X are routed along the TOS 0 path if a TOS X path\
    \ does not\n    exist.\n11.2 Sample routing table, without areas\nConsider the\
    \ Autonomous System pictured in Figure 2.  No OSPF areas have\nbeen configured.\
    \  A single metric is shown per outbound interface,\nindicating that routes will\
    \ not vary based on TOS.  The calculation\nrouter RT6's routing table proceeds\
    \ as described in Section 2.1.  The\nresulting routing table is shown in Table\
    \ 12.  Destination types are\nabbreviated: Network as \"N\", area border router\
    \ as \"BR\" and AS boundary\nrouter as \"ASBR\".\nThere are no instances of multiple\
    \ equal-cost shortest paths in this\nexample.  Also, since there are no areas,\
    \ there are no inter-area paths.\nRouters RT5 and RT7 are AS boundary routers.\
    \  Intra-area routes have\nbeen calculated to routers RT5 and RT7.  This allows\
    \ external routes to\nbe calculated to the destinations advertised by RT5 and\
    \ RT7 (i.e.,\nnetworks N12, N13, N14 and N15).  It is assumed all AS external\n\
    advertisements originated by RT5 and RT7 are advertising type 1 external\nmetrics.\
    \  This results in type 1 external paths being calculated to\ndestinations N12-N15.\n\
    11.3 Sample routing table, with areas\nConsider the previous example, this time\
    \ split into OSPF areas.  An OSPF\narea configuration is pictured in Figure 6.\
    \  Router RT4's routing table\nwill be described for this area configuration.\
    \  Router RT4 has a\nconnection to Area 1 and a backbone connection.  This causes\
    \ Router RT4\nto view the AS as the concatenation of the two graphs shown in Figures\
    \ 7\nand 8.  The resulting routing table is displayed in Table 13.\nAgain, routers\
    \ RT5 and RT7 are AS boundary routers.  Routers RT3, RT4,\nRT7, RT10 and RT11\
    \ are area border routers.  Note that there are two\nrouting entries (in this\
    \ case having identical paths) for router RT7, in\nits dual capacities as an area\
    \ border router and an AS boundary router.\nNote also that there are two routing\
    \ entries for the area border router\nRT3, since it has two areas in common with\
    \ RT4 (Area 1 and the\nbackbone).\nBackbone paths have been calculated to all\
    \ area border routers (BR).\nThese are used when determining the inter-area routes.\
    \  Note that all of\nType   Dest   Area   Path  Type        Cost   Next Hop(s)\
    \   Adv. Router(s)\n__________________________________________________________________________\n\
    N      N1     0      intra-area        10     RT3           *\nN      N2     0\
    \      intra-area        10     RT3           *\nN      N3     0      intra-area\
    \        7      RT3           *\nN      N4     0      intra-area        8    \
    \  RT3           *\nN      Ib     0      intra-area        7      *          \
    \   *\nN      Ia     0      intra-area        12     RT10          *\nN      N6\
    \     0      intra-area        8      RT10          *\nN      N7     0      intra-area\
    \        12     RT10          *\nN      N8     0      intra-area        10   \
    \  RT10          *\nN      N9     0      intra-area        11     RT10       \
    \   *\nN      N10    0      intra-area        13     RT10          *\nN      N11\
    \    0      intra-area        14     RT10          *\nN      H1     0      intra-area\
    \        21     RT10          *\nASBR   RT5    0      intra-area        6    \
    \  RT5           *\nASBR   RT7    0      intra-area        8      RT10       \
    \   *\n__________________________________________________________________________\n\
    N      N12    *      type 1 external   10     RT10          RT7\nN      N13  \
    \  *      type 1 external   14     RT5           RT5\nN      N14    *      type\
    \ 1 external   14     RT5           RT5\nN      N15    *      type 1 external\
    \   17     RT10          RT7\n   Table 12: The routing table for Router RT6 (no\
    \ configured areas).\nthe inter-area routes are associated with the backbone;\
    \ this is always\nthe case when the router is itself an area border router.  Routing\n\
    information is condensed at area boundaries.  In this example, we assume\nthat\
    \ Area 3 has been defined so that networks N9-N11 and the host route\nto H1 are\
    \ all condensed to a single route when advertised to the\nbackbone (by router\
    \ RT11).  Note that the cost of this route is the\nminimum of the set of costs\
    \ to its individual components.\nThere is a virtual link configured between routers\
    \ RT10 and RT11.\nWithout this configured virtual link, RT11 would be unable to\
    \ advertise\na route for networks N9-N11 and host H1 into the backbone, and there\n\
    would not be an entry for these networks in router RT4's routing table.\nIn this\
    \ example there are two equal-cost paths to network N12.  However,\nthey both\
    \ use the same next hop (Router RT5).\nRouter RT4's routing table would improve\
    \ (i.e., some of the paths in the\nrouting table would become shorter) if an additional\
    \ virtual link were\nconfigured between router RT4 and router RT3.  The new virtual\
    \ link\nwould itself be associated with the first entry for area border router\n\
    RT3 in Table 13 (an intra-area path through Area 1).  This would yield a\ncost\
    \ of 1 for the virtual link.  The routing table entries changes that\nwould be\
    \ caused by the addition of this virtual link are shown in Table\n14.\n12. Link\
    \ State Advertisements\nEach router in the Autonomous System originates one or\
    \ more link state\nadvertisements.  There are five distinct types of link state\n\
    advertisements, which are described in Section 4.3.  The collection of\nlink state\
    \ advertisements forms the link state or topological database.\nEach separate\
    \ type of advertisement has a separate function.  Router\nlinks and network links\
    \ advertisements describe how an area's routers\nand networks are interconnected.\
    \  Summary link advertisements provide a\nway of condensing an area's routing\
    \ information.  AS external\nadvertisements provide a way of transparently advertising\
    \ externally-\nderived routing information throughout the Autonomous System.\n\
    Each link state advertisement begins with a standard 20-byte header.\nThis link\
    \ state header is discussed below.\nType   Dest        Area   Path  Type     \
    \   Cost   Next Hop(s)   Adv. Router(s)\n_______________________________________________________________________________\n\
    N      N1          1      intra-area        4      RT1           *\nN      N2\
    \          1      intra-area        4      RT2           *\nN      N3        \
    \  1      intra-area        1      *             *\nN      N4          1     \
    \ intra-area        3      RT3           *\nBR     RT3         1      intra-area\
    \        1      *             *\n_______________________________________________________________________________\n\
    N      Ib          0      intra-area        22     RT5           *\nN      Ia\
    \          0      intra-area        27     RT5           *\nBR     RT3       \
    \  0      intra-area        21     RT5           *\nBR     RT7         0     \
    \ intra-area        14     RT5           *\nBR     RT10        0      intra-area\
    \        22     RT5           *\nBR     RT11        0      intra-area        25\
    \     RT5           *\nASBR   RT5         0      intra-area        8      *  \
    \           *\nASBR   RT7         0      intra-area        14     RT5        \
    \   *\n_______________________________________________________________________________\n\
    N      N6          0      inter-area        15     RT5           RT7\nN      N7\
    \          0      inter-area        19     RT5           RT7\nN      N8      \
    \    0      inter-area        18     RT5           RT7\nN      N9-N11,H1   0 \
    \     inter-area        26     RT5           RT11\n_______________________________________________________________________________\n\
    N      N12         *      type 1 external   16     RT5           RT5,RT7\nN  \
    \    N13         *      type 1 external   16     RT5           RT5\nN      N14\
    \         *      type 1 external   16     RT5           RT5\nN      N15      \
    \   *      type 1 external   23     RT5           RT7\n     Table 13: Router RT4's\
    \ routing table in the presence of areas.\nType   Dest        Area   Path  Type\
    \   Cost   Next Hop(s)   Adv. Router(s)\n__________________________________________________________________________\n\
    N      Ib          0      intra-area   16     RT3           *\nN      Ia     \
    \     0      intra-area   21     RT3           *\nBR     RT3         0      intra-area\
    \   1      *             *\nBR     RT10        0      intra-area   16     RT3\
    \           *\nBR     RT11        0      intra-area   19     RT3           *\n\
    __________________________________________________________________________\nN\
    \      N9-N11,H1   0      inter-area   20     RT3           RT11\n      Table\
    \ 14: Changes resulting from an additional virtual link.\n12.1 The Link State\
    \ Header\nThe link state header contains the LS type, Link State ID and\nAdvertising\
    \ Router fields.  The combination of these three fields\nuniquely identifies the\
    \ link state advertisement.\nThere may be several instances of an advertisement\
    \ present in the\nAutonomous System, all at the same time.  It must then be determined\n\
    which instance is more recent.  This determination is made be examining\nthe LS\
    \ sequence, LS checksum and LS age fields.  These fields are also\ncontained in\
    \ the 20-byte link state header.\nSeveral of the OSPF packet types list link state\
    \ advertisements.  When\nthe instance is not important, an advertisement is referred\
    \ to by its LS\ntype, Link State ID and Advertising Router (see Link State Request\n\
    Packets).  Otherwise, the LS sequence number, LS age and LS checksum\nfields must\
    \ also be referenced.\nA detailed explanation of the fields contained in the link\
    \ state header\nfollows.\n12.1.1 LS age\nThis field is the age of the link state\
    \ advertisement in seconds.  It\nshould be processed as an unsigned 16-bit integer.\
    \  It is set to 0 when\nthe link state advertisement is originated.  It must be\
    \ incremented by\nInfTransDelay on every hop of the flooding procedure.  Link\
    \ state\nadvertisements are also aged as they are held in each router's database.\n\
    The age of a link state advertisement is never incremented past MaxAge.\nAdvertisements\
    \ having age MaxAge are not used in the routing table\ncalculation.  When an advertisement's\
    \ age first reaches MaxAge, it is\nreflooded.  A link state advertisement of age\
    \ MaxAge is finally flushed\nfrom the database when it is no longer contained\
    \ on any neighbor Link\nstate retransmission lists.  This indicates that it has\
    \ been\nacknowledged by all adjacent neighbors.  For more information on the\n\
    aging of link state advertisements, consult Section 14.\nAges are examined when\
    \ a router receives two instances of a link state\nadvertisement, both having\
    \ identical sequence numbers and checksums.  An\ninstance of age MaxAge is then\
    \ always accepted as most recent; this\nallows old advertisements to be flushed\
    \ quickly from the routing domain.\nOtherwise, if the ages differ by more than\
    \ MaxAgeDiff, the instance\nhaving the smaller age is accepted as most recent.[11]\
    \ See Section 13.1\nfor more details.\n12.1.2 Options\nThe options field in the\
    \ link state header indicates which optional\ncapabilities are associated with\
    \ the advertisement.  OSPF's optional\ncapabilities are described in Section 4.5.\
    \  There are currently two\noptional capabilities defined; they are represented\
    \ by the T-bit and E-\nbit found in the options field.  The rest of the options\
    \ field should be\nset to zero.\nThe E-bit represents OSPF's external routing\
    \ capability.  This bit\nshould be set in all advertisements associated with the\
    \ backbone, and\nall advertisements associated with non-stub areas (see Section\
    \ 3.6).  It\nshould also be set in all AS external advertisements.  It should\
    \ be\nreset in all router links, network links and summary link advertisements\n\
    associated with a stub area.  For all link state advertisements, the\nsetting\
    \ of the E-bit is for informational purposes only; it does not\naffect the routing\
    \ table calculation.\nThe T-bit represents OSPF's TOS routing capability.  This\
    \ bit should be\nset in a router links advertisement if and only if the router\
    \ is capable\nof calculating separate routes for each IP TOS (see Section 2.4).\
    \  The\nT-bit should always be set in network links advertisements.  It should\n\
    be set in summary link and AS external link advertisements if and only\nif the\
    \ advertisement describes paths for all TOS values, instead of just\nthe TOS 0\
    \ path.  Note that, with the T-bit set, there may still be only\na single metric\
    \ in the advertisement (the TOS 0 metric).  This would\nmean that paths for non-zero\
    \ TOS exist, but are equivalent to the TOS 0\npath.  A link state advertisement's\
    \ T-bit is examined when calculating\nthe routing table's non-zero TOS paths (see\
    \ Section 16.9).\n12.1.3 LS type\nThe LS type field dictates the format and function\
    \ of the link state\nadvertisement.  Advertisements of different types have different\
    \ names\n(e.g., router links or network links).  All advertisement types, except\n\
    the AS external link advertisements (LS type = 5), are flooded\nthroughout a single\
    \ area only.  AS external link advertisements are\nflooded throughout the entire\
    \ Autonomous System, excluding stub areas\n(see Section 3.6).  Each separate advertisement\
    \ type is briefly\ndescribed below in Table 15.\n           LS Type   Advertisement\
    \ description\n           __________________________________________________\n\
    \           1         These are the router links\n                     advertisements.\
    \ They describe the\n           LS Type   Advertisement description\n        \
    \   __________________________________________________\n                     collected\
    \ states of the router's\n                     interfaces. For more information,\n\
    \                     consult Section 12.4.1.\n           __________________________________________________\n\
    \           2         These are the network links\n                     advertisements.\
    \ They describe the set\n                     of routers attached to the network.\
    \ For\n                     more information, consult\n                     Section\
    \ 12.4.2.\n           __________________________________________________\n   \
    \        3 or 4    These are the summary link\n                     advertisements.\
    \ They describe\n                     inter-area routes, and enable the\n    \
    \                 condensation of routing information at\n                   \
    \  area borders. Originated by area border\n                     routers, the\
    \ Type 3 advertisements\n                     describe routes to networks while\
    \ the\n                     Type 4 advertisements describe routes to\n       \
    \              AS boundary routers.\n           __________________________________________________\n\
    \           5         These are the AS external link\n                     advertisements.\
    \ Originated by AS\n                     boundary routers, they describe routes\n\
    \                     to destinations external to the\n                     Autonomous\
    \ System. A default route for\n                     the Autonomous System can\
    \ also be\n                     described by an AS external link\n           \
    \          advertisement.\n               Table 15: OSPF link state advertisements.\n\
    12.1.4 Link State ID\nThis field identifies the piece of the routing domain that\
    \ is being\ndescribed by the advertisement.  Depending on the advertisement's\
    \ LS\ntype, the Link State ID takes on the values listed in Table 16.\n   LS Type\
    \   Link State ID\n   ______________________________________________________________________\n\
    \   1         The originating router's Router ID.\n   2         The IP interface\
    \ address of the network's Designated Router.\n   3         The destination network's\
    \ IP address.\n   4         The Router ID of the described AS boundary router.\n\
    \   5         The destination network's IP address.\n                Table 16:\
    \ The advertisement's Link State ID.\nWhen the link state advertisement is describing\
    \ a network, the Link\nState ID is either the network's IP address (as in type\
    \ 3 summary link\nadvertisements and in AS external link advertisements) or the\
    \ network's\nIP address is easily derivable from the Link State ID (note that\
    \ masking\na network links advertisement's Link State ID with the network's subnet\n\
    mask yields the network's IP address).  When the link state\nadvertisement is\
    \ describing a router, the Link State ID is always the\ndescribed router's OSPF\
    \ Router ID.\nWhen an AS external advertisement (LS Type = 5) is describing a\
    \ default\nroute, its Link State ID is set to DefaultDestination (0.0.0.0).\n\
    12.1.5 Advertising Router\nThis field specifies the OSPF Router ID of the advertisement's\n\
    originator.  For router links advertisements, this field is identical to\nthe\
    \ Link State ID field.  Network link advertisements are originated by\nthe network's\
    \ Designated Router.  Summary link advertisements are\noriginated by area border\
    \ routers.  Finally, AS external link\nadvertisements are originated by AS boundary\
    \ routers.\n12.1.6 LS sequence number\nThe sequence number field is a signed 32-bit\
    \ integer.  It is used to\ndetect old and duplicate link state advertisements.\
    \  The space of\nsequence numbers is linearly ordered.  The larger the sequence\
    \ number\n(when compared as signed 32-bit integers) the more recent the\nadvertisement.\
    \  To describe to sequence number space more precisely, let\nN refer in the discussion\
    \ below to the constant 2**31.\nThe sequence number -N (0x80000000) is reserved\
    \ (and unused).  This\nleaves -N + 1 (0x80000001) as the smallest (and therefore\
    \ oldest)\nsequence number.  A router uses this sequence number the first time\
    \ it\noriginates any link state advertisement.  Afterwards, the\nadvertisement's\
    \ sequence number is incremented each time the router\noriginates a new instance\
    \ of the advertisement.  When an attempt is made\nto increment the sequence number\
    \ past the maximum value of of N - 1\n(0x7fffffff), the current instance of the\
    \ advertisement must first be\nflushed from the routing domain.  This is done\
    \ by prematurely aging the\nadvertisement (see Section 14.1) and reflooding it.\
    \  As soon as this\nflood has been acknowledged by all adjacent neighbors, a new\
    \ instance\ncan be originated with sequence number of -N + 1 (0x80000001).\nThe\
    \ router may be forced to promote the sequence number of one of its\nadvertisements\
    \ when a more recent instance of the advertisement is\nunexpectedly received during\
    \ the flooding process.  This should be a\nrare event.  This may indicate that\
    \ an out-of-date advertisement,\noriginated by the router itself before its last\
    \ restart/reload, still\nexists in the Autonomous System.  For more information\
    \ see Section 13.4.\n,uh \"12.1.7 LS checksum\"\nThis field is the checksum of\
    \ the complete contents of the\nadvertisement, excepting the age field.  The age\
    \ field is excepted so\nthat an advertisement's age can be incremented without\
    \ updating the\nchecksum.  The checksum used is the same that is used for ISO\n\
    connectionless datagrams; it is commonly referred to as the Fletcher\nchecksum.\
    \  It is documented in Annex C of [RFC 994].  The link state\nheader also contains\
    \ the length of the advertisement in bytes;\nsubtracting the size of the age field\
    \ (two bytes) yields the amount of\ndata to checksum.\nThe checksum is used to\
    \ detect data corruption of an advertisement.\nThis corruption can occur while\
    \ an advertisement is being flooded, or\nwhile it is being held in a router's\
    \ memory.  The LS checksum field\ncannot take on the value of zero; the occurrence\
    \ of such a value should\nbe considered a checksum failure.  In other words, calculation\
    \ of the\nchecksum is not optional.\nThe checksum of a link state advertisement\
    \ is verified in two cases: a)\nwhen it is received in a Link State Update Packet\
    \ and b) at times during\nthe aging of the link state database.  The detection\
    \ of a checksum\nfailure leads to separate actions in each case.  See Sections\
    \ 13 and 14\nfor more details.\nWhenever the LS sequence number field indicates\
    \ that two instances of an\nadvertisement are the same, the LS checksum field\
    \ is examined.  If there\nis a difference, the instance with the larger checksum\
    \ is considered to\nbe most recent.[12] See Section 13.1 for more details.\n12.2\
    \ The link state database\nA router has a separate link state database for every\
    \ area to which it\nbelongs.  The link state database has been referred to elsewhere\
    \ in the\ntext as the topological database.  All routers belonging to the same\n\
    area have identical topological databases for the area.\nThe databases for each\
    \ individual area are always dealt with separately.\nThe shortest path calculation\
    \ is performed separately for each area (see\nSection 16).  Components of the\
    \ area topological database are flooded\nthroughout the area only.  Finally, when\
    \ an adjacency (belonging to Area\nA) is being brought up, only the database for\
    \ Area A is synchronized\nbetween the two routers.\nThe area database is composed\
    \ of router links advertisements, network\nlinks advertisements, and summary link\
    \ advertisements (all listed in the\narea data structure).  In addition, external\
    \ routes (AS external\nadvertisements) are included in all non-stub area databases\
    \ (see Section\n3.6).\nAn implementation of OSPF must be able to access individual\
    \ pieces of an\narea database.  This lookup function is based on an advertisement's\
    \ LS\ntype, Link State ID and Advertising Router.[13] There will be a single\n\
    instance (the most up-to-date) of each link state advertisement in the\ndatabase.\
    \  The database lookup function is invoked during the link state\nflooding procedure\
    \ (Section 13) and the routing table calculation\n(Section 16).  In addition,\
    \ using this lookup function the router can\ndetermine whether it has itself ever\
    \ originated a particular link state\nadvertisement, and if so, with what LS sequence\
    \ number.\nA link state advertisement is added to a router's database when either\n\
    a) it is received during the flooding process (Section 13) or b) it is\noriginated\
    \ by the router itself (Section 12.4).  A link state\nadvertisement is deleted\
    \ from a router's database when either a) it has\nbeen overwritten by a newer\
    \ instance during the flooding process\n(Section 13) or b) the router originates\
    \ a newer instance of one of its\nself-originated advertisements (Section 12.4)\
    \ or c) the advertisement\nages out and is flushed from the routing domain (Section\
    \ 14).  Whenever\na link state advertisement is deleted from the database it must\
    \ also be\nremoved from all neighbors' Link state retransmission lists (see Section\n\
    10).\n12.3 Representation of TOS\nAll OSPF link state advertisements (with the\
    \ exception of network links\nadvertisements) specify metrics.  In router links\
    \ advertisements, the\nmetrics indicate the costs of the described interfaces.\
    \  In summary link\nand AS external link advertisements, the metric indicates\
    \ the cost of\nthe described path.  In all of these advertisements, a separate\
    \ metric\ncan be specified for each IP TOS.  TOS is encoded in an OSPF link state\n\
    advertisement as the following mapping of the Delay (D), Throughput (T)\nand Reliability\
    \ (R) flags found in the IP packet header's TOS field (see\n[RFC 791]).\n    \
    \                     OSPF encoding   D   T   R\n                         _________________________\n\
    \                         0               0   0   0\n                        \
    \ 4               0   0   1\n                         8               0   1  \
    \ 0\n                         12              0   1   1\n                    \
    \     16              1   0   0\n                         20              1  \
    \ 0   1\n                         24              1   1   0\n                \
    \         28              1   1   1\n                    Table 17: Representing\
    \ TOS in OSPF.\nEach OSPF link state advertisement must specify the TOS 0 metric.\
    \  Other\nTOS metrics, if they appear, must appear in order of increasing TOS\n\
    encoding.  For example, the TOS 8 (high throughput) metric must always\nappear\
    \ before the TOS 16 (low delay) metric when both are specified.  If\na metric\
    \ for some non-zero TOS is not specified, its cost defaults to\nthe cost for TOS\
    \ 0, unless the T-bit is reset in the advertisement's\noptions field (see Section\
    \ 12.1.2 for more details).\nNote that if more TOS types are defined in a future\
    \ IP architecture,\nOSPF's TOS encoding can be extended in a straightforward manner.\n\
    12.4 Originating link state advertisements\nA router may originate many types\
    \ of link state advertisements.  A\nrouter originates a router links advertisement\
    \ for each area to which it\nbelongs.  If the router is also the Designated Router\
    \ for any of its\nattached networks, it will originate a network links advertisement\
    \ for\nthat network.\nArea border routers originate a single summary links advertisement\
    \ for\neach known inter-area destination.  AS boundary routers originate a\nsingle\
    \ AS external links advertisement for each known AS external\ndestination.  Destinations\
    \ are advertised one at a time so that the\nchange in any single route can be\
    \ flooded without reflooding the entire\ncollection of routes.  During the flooding\
    \ procedure, many link state\nadvertisements can be carried by a single Link State\
    \ Update packet.\nAs an example, consider router RT4 in Figure 6.  It is an area\
    \ border\nrouter, having a connection to Area 1 and the backbone.  Router RT4\n\
    originates 5 distinct link state advertisements into the backbone (one\nrouter\
    \ links, and one summary link for each of the networks N1-N4).\nRouter RT4 will\
    \ also originate 8 distinct link state advertisements into\nArea 1 (one router\
    \ links and seven summary link advertisements as\npictured in Figure 7).  If RT4\
    \ has been selected as Designated Router\nfor network N3, it will also originate\
    \ a network links advertisement for\nN3 into Area 1.\nIn this same figure, router\
    \ RT5 will be originating 3 distinct AS\nexternal link advertisements (one for\
    \ each of the networks N12-N14).\nThese will be flooded throughout the entire\
    \ AS, assuming that none of\nthe areas have been configured as stubs.  However,\
    \ if area 3 has been\nconfigured as a stub area, the external advertisements for\
    \ networks\nN12-N14 will not be flooded into area 3 (see Section 3.6).  Instead,\n\
    router RT11 would originate a default summary link advertisement that\nwould be\
    \ flooded throughout area 3 (see Section 12.4.3).  This instructs\nall of area\
    \ 3's internal routers to send their AS external traffic to\nRT11.\nWhenever a\
    \ new instance of a link state advertisement is originated, its\nLS sequence number\
    \ is incremented, its LS age is set to 0, its LS\nchecksum is calculated, and\
    \ the advertisement is added to the link state\ndatabase and flooded out the appropriate\
    \ interfaces.  See Section 13.2\nfor details concerning the installation of the\
    \ advertisement into the\nlink state database.  See Section 13.3 for details concerning\
    \ the\nflooding of newly originated advertisements.\nThe eight events that cause\
    \ a new instance of a link state advertisement\nto be originated are:\n(1) The\
    \ LS refresh timer firing.  There is a LS refresh timer for each\n    link state\
    \ advertisement that the router has originated.  The LS\n    refresh timer is\
    \ an interval timer, with length LSRefreshTimer.  The\n    LS refresh timer guarantees\
    \ periodic originations regardless of any\n    other events that cause new instances.\
    \  This periodic updating of\n    link state advertisements adds robustness to\
    \ the link state\n    algorithm.  Link state advertisements that solely describe\n\
    \    unreachable destinations should not be refreshed, but should instead\n  \
    \  be flushed from the routing domain (see Section 14.1).\nWhen whatever is being\
    \ described by a link state advertisement changes,\na new advertisement is originated.\
    \  Two instances of the same link state\nadvertisement may not be originated within\
    \ the time period\nMinLSInterval.  This may require that the generation of the\
    \ next\ninstance to be delayed by up to MinLSInterval.  The following changes\n\
    may cause a router to originate a new instance of an advertisement.\nThese changes\
    \ should cause new originations only if the contents of the\nnew advertisement\
    \ would be different.\n(2) An interface's state changes (see Section 9.1).  This\
    \ may mean that\n    it is necessary to produce a new instance of the router links\n\
    \    advertisement.\n(3) An attached network's Designated Router changes.  A new\
    \ router links\n    advertisement should be originated.  Also, if the router itself\
    \ is\n    now the Designated Router, a new network links advertisement should\n\
    \    be produced.\n(4) One of the neighboring routers changes to/from the FULL\
    \ state.  This\n    may mean that it is necessary to produce a new instance of\
    \ the\n    router links advertisement.  Also, if the router is itself the\n  \
    \  Designated Router for the attached network, a new network links\n    advertisement\
    \ should be produced.\nThe next three events concern area border routers only.\n\
    (5) An intra-area route has been added/deleted/modified in the routing\n    table.\
    \  This may cause a new instance of a summary links\n    advertisement (for this\
    \ route) to be originated in each attached\n    area (this includes the backbone).\n\
    (6) An inter-area route has been added/deleted/modified in the routing\n    table.\
    \  This may cause a new instance of a summary links\n    advertisement (for this\
    \ route) to be originated in each attached\n    area (but NEVER for the backbone).\n\
    (7) The router becomes newly attached to an area.  The router must then\n    originate\
    \ summary link advertisements into the newly attached area\n    for all pertinent\
    \ intra-area and inter-area routes in its routing\n    table.  See Section 12.4.3\
    \ for more details.\nThe last event concerns AS boundary routers only.\n(8) An\
    \ external route gained through direct experience with an external\n    routing\
    \ protocol (like EGP) changes.  This will cause the AS\n    boundary router to\
    \ originate a new instance of an external links\n    advertisement.\nThe construction\
    \ of each type of the link state advertisement is\nexplained below.  In general,\
    \ these sections describe the contents of\nthe advertisement body (i.e., the part\
    \ coming after the 20-byte\nadvertisement header).  For information concerning\
    \ the building of the\nlink state advertisement header, see Section 12.1.\n12.4.1\
    \ Router links\nA router originates a router links advertisement for each area\
    \ that it\nbelongs to.  Such an advertisement describes the collected states of\
    \ the\nrouter's links to the area.  The advertisement is flooded throughout the\n\
    particular area, and no further.\nThe format of a router links advertisement is\
    \ shown in Appendix A\n(Section A.4.2).  The first 20 bytes of the advertisement\
    \ consist of the\ngeneric link state header that was discussed in Section 12.1.\
    \  Router\nlinks advertisements have LS type = 1.  The router indicates whether\
    \ it\nis willing to calculate separate routes for each IP TOS by setting (or\n\
    resetting) the T-bit of the link state advertisement's Options field.\nA router\
    \ also indicates whether it is an area border router, or an AS\nboundary router,\
    \ by setting the appropriate bits in its router links\nadvertisements.  This enables\
    \ paths to those types of routers to be\nsaved in the routing table, for later\
    \ processing of summary link\nadvertisements and AS external link advertisements.\n\
    The router links advertisement then describes the router's working\nconnections\
    \ (links) to the area.  Each link is typed according to the\n               _________________________________________\n\
    \                (Figure not included in text version.)\n               Figure\
    \ 15: Area 1 with IP addresses shown\n                 Figure 16: Forwarding address\
    \ example\n               _________________________________________\nkind of attached\
    \ network.  Each link is also labelled with its Link ID.\nThis ID gives a name\
    \ to the entity that is on the other end of the link.\nTable 18 summarizes the\
    \ values used for the type and Link ID fields.\nLink type   Description      \
    \         Link ID\n____________________________________________________________________________\n\
    1           Point-to-point link       Neighbor Router ID\n2           Link to\
    \ transit network   Interface address of Designated Router\n3           Link to\
    \ stub network      IP network number\n4           Virtual link              Neighbor\
    \ Router ID\n       Table 18: Link descriptions in the router links advertisement.\n\
    In addition, the Link Data field is specified for each link.  This field\ngives\
    \ 32 bits of extra information for the link.  For links to routers\nand transit\
    \ networks, this field specifies the IP interface address of\nthe associated router\
    \ interface (this is needed by the routing table\ncalculation, see Section 16.3).\
    \  For links to stub networks, this field\nspecifies the network's IP address\
    \ mask.\nFinally, the cost of using the link for output (possibly specifying a\n\
    different cost for each type of service) is specified.  The output cost\nof a\
    \ link is configurable.  It must always be non-zero.\nTo further describe the\
    \ process of building the list of link records,\nsuppose a router wishes to build\
    \ router links advertisement for an Area\nA.  The router examines its collection\
    \ of interface data structures.\nFor each interface, the following steps are taken:\n\
    o   If the attached network does not belong to Area A, no links are\n    added\
    \ to the advertisement, and the next interface should be\n    examined.\no   Else,\
    \ if the state of the interface is Down, no links are added.\no   Else, if the\
    \ state of the interface is Point-to-Point, then add\n    links according to the\
    \ following:\n    -   If the neighboring router is fully adjacent, add a Type\
    \ 1 link\n        (point-to-point) if this is an interface to a point-to-point\n\
    \        network, or add a type 4 link (virtual link) if this is a\n        virtual\
    \ link.  The Link ID should be set to the Router ID of the\n        neighboring\
    \ router, and the Link Data should specify the\n        interface IP address.\n\
    \    -   If this is a numbered point-to-point network (i.e, not a virtual\n  \
    \      link and not an unnumbered point-to-point network) and the\n        neighboring\
    \ router's IP address is known, add a Type 3 link\n        (stub network) whose\
    \ Link ID is the neighbor's IP address, whose\n        Link Data is the mask 0xffffffff\
    \ indicating a host route, and\n        whose cost is the interface's configured\
    \ output cost.\no   Else if the state of the interface is Loopback, add a Type\
    \ 3 link\n    (stub network) as long as this is not an interface to an unnumbered\n\
    \    serial line.  The Link ID should be set to the IP interface address,\n  \
    \  the Link Data set to the mask 0xffffffff (indicating a host route),\n    and\
    \ the cost set to 0.\no   Else if the state of the interface is Waiting, add a\
    \ Type 3 link\n    (stub network) whose Link ID is the IP network number of the\n\
    \    attached network and whose Link Data is the attached network's\n    address\
    \ mask.\no   Else, there has been a Designated Router selected for the attached\n\
    \    network.  If the router is fully adjacent to the Designated Router,\n   \
    \ or if the router itself is Designated Router and is fully adjacent\n    to at\
    \ least one other router, add a single Type 2 link (transit\n    network) whose\
    \ whose link ID is the IP interface address of the\n    attached network's Designated\
    \ Router (which may be the router\n    itself) and whose Link Data is the interface\
    \ IP address.  Otherwise,\n    add a link as if the interface state were Waiting\
    \ (see above).\nUnless otherwise specified, the cost of each link generated by\
    \ the above\nprocedure is equal to the output cost of the associated interface.\
    \  Note\nthat in the case of serial lines, multiple links may be generated by\
    \ a\nsingle interface.\nAfter consideration of all the router interfaces, host\
    \ links are added\nto the advertisement by examining the list of attached hosts.\
    \  A host\nroute is represented as a Type 3 link (stub network) whose link ID\
    \ is\nthe host's IP address and whose Link Data is the mask of all ones\n(0xffffffff).\n\
    As an example, consider the router links advertisements generated by\nrouter RT3,\
    \ as pictured in Figure 6.  The area containing router RT3\n(Area 1) has been\
    \ redrawn, with actual network addresses, in Figure 15.\nAssume that the last\
    \ byte of all of RT3's interface addresses is 3,\ngiving it the interface addresses\
    \ 192.1.1.3 and 192.1.4.3, and that the\nother routers have similar addressing\
    \ schemes.  In addition, assume that\nall links are functional, and that Router\
    \ IDs are assigned as the\nsmallest IP interface address.\nRT3 originates two\
    \ router links advertisements, one for Area 1 and one\nfor the backbone.  Assume\
    \ that router RT4 has been selected as the\nDesignated router for network 192.1.1.0.\
    \  RT3's router links\nadvertisement for Area 1 is then shown below.  It indicates\
    \ that RT3 has\ntwo connections to Area 1, the first a link to the transit network\n\
    192.1.1.0 and the second a link to the stub network 192.1.4.0.  Note\nthat the\
    \ transit network is identified by the IP interface of its\nDesignated Router\
    \ (i.e., the Link ID = 192.1.1.4 which is the Designated\nRouter RT4's IP interface\
    \ to 192.1.1.0).  Note also that RT3 has\nindicated that it is capable of calculating\
    \ separate routes based on IP\nTOS, through setting the T-bit in the Options field.\
    \  It has also\nindicated that it is an area border router.\n       ; RT3's router\
    \ links advertisement for Area 1\n       LS age = 0                     ;always\
    \ true on origination\n       Options = (T-bit|E-bit)        ;TOS-capable\n  \
    \     LS type = 1                    ;indicates router links\n       Link State\
    \ ID = 192.1.1.3      ;RT3's Router ID\n       Advertising Router = 192.1.1.3\
    \ ;RT3's Router ID\n       bit E = 0                      ;not an AS boundary\
    \ router\n       bit B = 1                      ;RT3 is an area border router\n\
    \       #links = 2\n               Link ID = 192.1.1.4    ;IP address of Designated\
    \ Router\n               Link Data = 192.1.1.3  ;RT3's IP interface to net\n \
    \              Type = 2               ;connects to transit network\n         \
    \      # other metrics = 0\n               TOS 0 metric = 1\n               Link\
    \ ID = 192.1.4.0    ;IP Network number\n               Link Data = 0xffffff00\
    \ ;Network mask\n               Type = 3               ;connects to stub network\n\
    \               # other metrics = 0\n               TOS 0 metric = 2\nNext RT3's\
    \ router links advertisement for the backbone is shown.  It\nindicates that RT3\
    \ has a single attachment to the backbone.  This\nattachment is via an unnumbered\
    \ point-to-point link to router RT6.  RT3\nhas again indicated that it is TOS-capable,\
    \ and that it is an area\nborder router.\n       ; RT3's router links advertisement\
    \ for the backbone\n       LS age = 0                     ;always true on origination\n\
    \       Options = (T-bit|E-bit)        ;TOS-capable\n       LS type = 1      \
    \              ;indicates router links\n       Link State ID = 192.1.1.3     \
    \ ;RT3's router ID\n       Advertising Router = 192.1.1.3 ;RT3's router ID\n \
    \      bit E = 0                      ;not an AS boundary router\n       bit B\
    \ = 1                      ;RT3 is an area border router\n       #links = 1\n\
    \               Link ID = 18.10.0.6    ;Neighbor's Router ID\n               Link\
    \ Data = 0.0.0.0    ;Interface to unnumbered SL\n               Type = 1     \
    \          ;connects to router\n               # other metrics = 0\n         \
    \      TOS 0 metric = 8\nEven though router RT3 has indicated that it is TOS-capable\
    \ in the above\nexamples, only a single metric (the TOS 0 metric) has been specified\
    \ for\neach interface.  Different metrics can be specified for each TOS.  The\n\
    encoding of TOS in OSPF link state advertisements is described in\nSection 12.3.\n\
    As an example, suppose the point-to-point link between routers RT3 and\nRT6 in\
    \ Figure 15 is a satellite link.  The AS administrator may want to\nencourage\
    \ the use of the line for high bandwidth traffic.  This would be\ndone by setting\
    \ the metric artificially low for that TOS.  Router RT3\nwould then originate\
    \ the following router links advertisement for the\nbackbone (IP TOS 8 = high\
    \ bandwidth):\n       ; RT3's router links advertisement for the backbone\n  \
    \     LS age = 0                  ;always true on origination\n       Options\
    \ = (T-bit|E-bit)     ;TOS-capable\n       LS type = 1                 ;indicates\
    \ router links\n       Link State ID = 192.1.1.3   ;RT3's Router ID\n       Advertising\
    \ Router = 192.1.1.3\n       bit E = 0                   ;not an AS boundary router\n\
    \       bit B = 1                   ;RT3 is an area border router\n       #links\
    \ = 1\n               Link ID = 18.10.0.6 ; Neighbor's Router ID\n           \
    \    Link Data = 0.0.0.0 ;Interface to unnumbered SL\n               Type = 1\
    \            ;connects to router\n               # other metrics = 1\n       \
    \        TOS 0 metric = 8\n                       TOS = 8     ;High bandwidth\n\
    \                       metric = 1  ;traffic preferred\n12.4.2 Network links\n\
    A network links advertisement is generated for every transit multi-\naccess network.\
    \  (A transit network is a network having two or more\nattached routers).  The\
    \ network links advertisement describes all the\nrouters that are attached to\
    \ the network.\nThe Designated Router for the network originates the advertisement.\
    \  The\nDesignated Router originates the advertisement only if it is fully\nadjacent\
    \ to at least one other router on the network.  The network links\nadvertisement\
    \ is flooded throughout the area that contains the transit\nnetwork, and no further.\
    \  The networks links advertisement lists those\nrouters that are fully adjacent\
    \ to the Designated Router; each fully\nadjacent router is identified by its OSPF\
    \ Router ID.  The Designated\nRouter includes itself in this list.\nThe Link State\
    \ ID for a network links advertisement is the IP interface\naddress of the Designated\
    \ Router.  This value, masked by the network's\naddress mask (which is also contained\
    \ in the network links\nadvertisement) yields the network's IP address.\nA router\
    \ that has formerly been the Designated Router for a network, but\nis no longer,\
    \ should flush the network links advertisement that it had\npreviously originated.\
    \  This advertisement is no longer used in the\nrouting table calculation.  It\
    \ is flushed by prematurely incrementing\nthe advertisement's age to MaxAge and\
    \ reflooding (see Section 14.1).\nAs an example of a network links advertisement,\
    \ again consider the area\nconfiguration in Figure 6.  Network links advertisements\
    \ are originated\nfor network N3 in Area 1, networks N6 and N8 in Area 2, and\
    \ network N9\nin Area 3.  Assuming that router RT4 has been selected as the Designated\n\
    Router for network N3, the following network links advertisement is\ngenerated\
    \ by RT4 on behalf of network N3 (see Figure 15 for the address\nassignments):\n\
    \       ; network links advertisement for network N3\n       LS age = 0      \
    \               ;always true on origination\n       Options = (T-bit|E-bit)  \
    \      ;TOS-capable\n       LS type = 2                    ;indicates network\
    \ links\n       Link State ID = 192.1.1.4      ;IP address of Designated Router\n\
    \       Advertising Router = 192.1.1.4 ;RT4's Router ID\n       Network Mask =\
    \ 0xffffff00\n               Attached Router = 192.1.1.4    ;Router ID\n     \
    \          Attached Router = 192.1.1.1    ;Router ID\n               Attached\
    \ Router = 192.1.1.2    ;Router ID\n               Attached Router = 192.1.1.3\
    \    ;Router ID\n12.4.3 Summary links\nEach summary link advertisement describes\
    \ a route to a single\ndestination.  Summary link advertisements are flooded throughout\
    \ a\nsingle area only.  The destination described is one that is external to\n\
    the area, yet still belonging to the Autonomous System.\nThe DefaultDestination\
    \ can also be specified in summary link\nadvertisements.  This is used when implementing\
    \ OSPF's stub area\nfunctionality (see Section 3.6).  In a stub area, instead\
    \ of importing\nexternal routes each area border router originates a \"default\
    \ summary\nlink\" (Link State ID = DefaultDestination) into the area.\nSummary\
    \ link advertisements are originated by area border routers.  The\nprecise summary\
    \ routes to advertise into an area are determined by\nexamining the routing table\
    \ structure (see Section 11).  Only intra-area\nroutes are advertised into the\
    \ backbone.  Both intra-area and inter-area\nroutes are advertised into the other\
    \ areas.\nTo determine which routes to advertise into an attached Area A, each\n\
    routing table entry is processed as follows:\no   Only Destination types of network\
    \ and AS boundary router are\n    advertised in summary link advertisements. \
    \ If the routing table\n    entry's Destination type is area border router, examine\
    \ the next\n    routing table entry.\no   AS external routes are never advertised\
    \ in summary link\n    advertisements.  If the routing table entry has Path-type\
    \ type 1\n    external or type 2 external, examine the next routing table entry.\n\
    o   Else, if the area associated with this set of paths is the Area A\n    itself,\
    \ do not generate a summary link advertisement for the\n    route.[14]\no   Else,\
    \ if the destination of this route is an AS boundary router,\n    generate a Type\
    \ 4 link state advertisement for the destination, with\n    Link State ID equal\
    \ to the AS boundary router's ID and metric equal\n    to the routing table entry's\
    \ cost.  These advertisements should not\n    be generated if area A has been\
    \ configured as a stub area.\no   Else, the Destination type is network.  If this\
    \ is an inter-area\n    route, generate a Type 3 advertisement for the destination,\
    \ with\n    Link State ID equal to the network's address and metric equal to the\n\
    \    routing table cost.\no   The one remaining case is an intra-area route to\
    \ a network.  This\n    means that the network is contained in one of the router's\
    \ directly\n    attached areas.  In general, this information must be condensed\n\
    \    before appearing in summary link advertisements.  Remember that an\n    area\
    \ has been defined as a list of address ranges, each range\n    consisting of\
    \ an [address,mask] pair.  A single Type 3 advertisement\n    must be made for\
    \ each range, with Link State ID equal to the range's\n    address and cost equal\
    \ to the smallest cost of any of the component\n    networks.\n    If virtual\
    \ links are being used to provide/increase connectivity of\n    the backbone,\
    \ routing information concerning the backbone networks\n    should not be condensed\
    \ before being summarized into the virtual\n    links' transit areas.  In other\
    \ words, the backbone ranges should be\n    ignored when originating summary links\
    \ into these areas.  The\n    existence of virtual links can be determined during\
    \ the shortest\n    path calculation for the backbone (see Section 16.1).\nIn\
    \ addition, if area A has been configured as a stub area and the router\nis an\
    \ area border router, it should advertise a default summary link\ninto Area A.\
    \  The Link State ID for the advertisement should be set to\nDefaultDestination,\
    \ and the metric set to the (per-area) configurable\nparameter StubDefaultCost.\n\
    If a router advertises a summary advertisement for a destination which\nthen becomes\
    \ unreachable, the router must then flush the advertisement\nfrom the routing\
    \ domain by setting its age to MaxAge and reflooding (see\nSection 14.1).  Also,\
    \ if the destination is still reachable, yet can no\nlonger be advertised according\
    \ to the above procedure (e.g., it is now\nan inter-area route, when it used to\
    \ be an intra-area route associated\nwith some non-backbone area; it would thus\
    \ no longer be advertisable to\nthe backbone), the advertisement should also be\
    \ flushed from the routing\ndomain.\nFor an example of summary link advertisements,\
    \ consider again the area\nconfiguration in Figure 6.  Routers RT3, RT4, RT7,\
    \ RT10 and RT11 are all\narea border routers, and therefore are originating summary\
    \ links\nadvertisements.  Consider in particular router RT4.  Its routing table\n\
    was calculated as the example in Section 11.3.  RT4 originates summary\nlink advertisements\
    \ into both the backbone and Area 1.  Into the\nbackbone, router RT4 originates\
    \ separate advertisements for each of the\nnetworks N1-N4.  Into Area 1, router\
    \ RT4 originates separate\nadvertisements for networks N6-N8 and the AS boundary\
    \ routers RT5,RT7.\nIt also condenses host routes Ia and Ib into a single summary\n\
    advertisement.  Finally, the routes to networks N9,N10,N11 and host H9\nare advertised\
    \ by a single summary link.  This condensation was\noriginally performed by the\
    \ router RT11.\nThese advertisements are illustrated graphically in Figures 7\
    \ and 8.\nTwo of the summary link advertisements originated by router RT4 follow.\n\
    The actual IP addresses for the networks and routers in question have\nbeen assigned\
    \ in Figure 15.\n       ; summary link advertisement for network N1,\n       ;\
    \ originated by router RT4 into the backbone\n       LS age = 0              \
    \    ;always true on origination\n       Options = (T-bit|E-bit)     ;TOS-capable\n\
    \       LS type = 3                 ;indicates summary link to IP net\n      \
    \ Link State ID = 192.1.2.0   ;N1's IP network number\n       Advertising Router\
    \ = 192.1.1.4       ;RT4's ID\n               TOS = 0\n               metric =\
    \ 4\n       ; summary link advertisement for AS boundary router RT7\n       ;\
    \ originated by router RT4 into Area 1\n       LS age = 0                  ;always\
    \ true on origination\n       Options = (T-bit|E-bit)     ;TOS-capable\n     \
    \  LS type = 4                 ;indicates summary link to ASBR\n       Link State\
    \ ID = router RT7's ID\n       Advertising Router = 192.1.1.4       ;RT4's ID\n\
    \               TOS = 0\n               metric = 14\nSummary link advertisements\
    \ pertain to a single destination (IP network\nor AS boundary router).  However,\
    \ for a single destination there may be\nseparate sets of paths, and therefore\
    \ separate routing table entries,\nfor each Type of Service.  All these entries\
    \ must be considered when\nbuilding the summary link advertisement for the destination;\
    \ a single\nadvertisement must specify the separate costs (if they exist) for\
    \ each\nTOS.  The encoding of TOS in OSPF link state advertisements is described\n\
    in Section 12.3.\nClearing the T-bit in the Options field of a summary link advertisement\n\
    indicates that there is a TOS 0 path to the destination, but no paths\nfor non-zero\
    \ TOS.  This can happen when non-TOS capable routers exist in\nthe routing domain\
    \ (see Section 2.4).\n12.4.4 AS external links\nAS external link advertisements\
    \ describe routes to destinations external\nto the Autonomous System.  Most AS\
    \ external link advertisements describe\nroutes to specific external destinations.\
    \  However, a default route for\nthe Autonomous System can be described in an\
    \ AS external advertisement\nby setting the advertisement's Link State ID to DefaultDestination\n\
    (0.0.0.0).  AS external link advertisements are originated by AS\nboundary routers.\
    \  An AS boundary router originates a single AS external\nlink advertisement for\
    \ each external route that it has learned, either\nthrough another routing protocol\
    \ (such as EGP), or through configuration\ninformation.\nIn general, AS external\
    \ link advertisements are the only type of link\nstate advertisements that are\
    \ flooded throughout the entire Autonomous\nSystem; all other types of link state\
    \ advertisements are specific to a\nsingle area.  However, AS external advertisements\
    \ are not flooded\ninto/throughout stub areas (see Section 3.6).  This enables\
    \ a reduction\nin link state database size for routers internal to stub areas.\n\
    The metric that is advertised for an external route can be one of two\ntypes.\
    \  Type 1 metrics are comparable to the link state metric.  Type 2\nmetrics are\
    \ assumed to be larger than the cost of any intra-AS path.  As\nwith summary link\
    \ advertisements, if separate paths exist based on TOS,\nseparate TOS costs can\
    \ be included in the AS external link\nadvertisement.  The encoding of TOS in\
    \ OSPF link state advertisements is\ndescribed in Section 12.3.  If the T-bit\
    \ of the advertisement's Options\nfield is clear, no non-zero TOS paths to the\
    \ destination exist.\nIf a router advertises an AS external link advertisement\
    \ for a\ndestination which then becomes unreachable, the router must then flush\n\
    the advertisement from the routing domain by setting its age to MaxAge\nand reflooding\
    \ (see Section 14.1).\nFor an example of AS external link advertisements, consider\
    \ once again\nthe AS pictured in Figure 6.  There are two AS boundary routers:\
    \ RT5 and\nRT7.  Router RT5 originates three external link advertisements, for\n\
    networks N12-N14.  Router RT7 originates two external link\nadvertisements, for\
    \ networks N12 and N15.  Assume that RT7 has learned\nits route to N12 via EGP,\
    \ and that it wishes to advertise a Type 2\nmetric to the AS.  RT7 would then\
    \ originate the following advertisement\nfor N12:\n       ; AS external link advertisement\
    \ for network N12,\n       ; originated by router RT7\n       LS age = 0     \
    \             ;always true on origination\n       Options = (T-bit|E-bit)    \
    \ ;TOS-capable\n       LS type = 5                 ;indicates AS external link\n\
    \       Link State ID = N12's IP network number\n       Advertising Router = Router\
    \ RT7's ID\n               bit E = 1           ;Type 2 metric\n              \
    \ TOS = 0\n               metric = 2\n               Forwarding address = 0.0.0.0\n\
    In the above example, the forwarding address field has been set to\n0.0.0.0, indicating\
    \ that packets for the external destination should be\nforwarded to the advertising\
    \ OSPF router (RT7).  This is not always\ndesirable.  Consider the example pictured\
    \ in Figure 16.  There are three\nOSPF routers (RTA, RTB and RTC) connected to\
    \ a common network.  Only one\nof these routers, RTA, is exchanging EGP information\
    \ with the non-OSPF\nrouter RTX.  RTA must then originate AS external link state\n\
    advertisements for those destinations it has learned from RTX.  By using\nthe\
    \ AS external advertisement's forwarding address field, RTA can\nspecify that\
    \ packets for these destinations be forwarded directly to\nRTX.  Without this\
    \ feature, routers RTB and RTC would take an extra hop\nto get to these destinations.\n\
    Note that when the forwarding address field is non-zero, it should point\nto a\
    \ router belonging to another Autonomous System.\nA forwarding address can also\
    \ be specified for the default route.  For\nexample, in figure 16 RTA may want\
    \ to specify that all externally-\ndestined packets should by default be forwarded\
    \ to its EGP peer RTX.\nThe resulting AS external link advertisement is pictured\
    \ below.  Note\nthat the Link State ID is set to DefaultDestination.\n       ;\
    \ Default route, originated by router RTA\n       ; Packets forwarded through\
    \ RTX\n       LS age = 0                  ;always true on origination\n      \
    \ Options = (T-bit|E-bit)     ;TOS-capable\n       LS type = 5               \
    \  ;indicates AS external link\n       Link State ID = DefaultDestination  ; default\
    \ route\n       Advertising Router = Router RTA's ID\n               bit E = 1\
    \           ;Type 2 metric\n               TOS = 0\n               metric = 1\n\
    \               Forwarding address = RTX's IP address\nIn figure 16, suppose instead\
    \ that both RTA and RTB exchange EGP\ninformation with RTX.  In this case, RTA\
    \ and RTB would originate the\nsame set of external advertisements.  These advertisements,\
    \ if they\nspecify the same metric, would be functionally equivalent since they\n\
    would specify the same destination and forwarding address (RTX).  This\nleads\
    \ to a clear duplication of effort.  If only one of RTA or RTB\noriginated the\
    \ set of external advertisements, the routing would remain\nthe same, and the\
    \ size of the link state database would decrease.\nHowever, it must be unambiguously\
    \ defined as to which router originates\nthe advertisements (otherwise neither\
    \ may, or the identity of the\noriginator may oscillate).  The following rule\
    \ is thereby established:\nif two routers, both reachable from one another, originate\
    \ functionally\nequivalent AS external advertisements (i.e., same destination,\
    \ cost and\nnon-zero forwarding address), then the advertisement originated by\
    \ the\nrouter having the highest OSPF Router ID is used.  The router having the\n\
    lower OSPF Router ID can then flush its advertisement.  Flushing a link\nstate\
    \ advertisement is discussed in Section 14.1.\n13. The Flooding Procedure\nLink\
    \ State Update packets provide the mechanism for flooding link state\nadvertisements.\
    \  A Link State Update packet may contain several distinct\nadvertisements, and\
    \ floods each advertisement one hop further from its\npoint of origination.  To\
    \ make the flooding procedure reliable, each\nadvertisement must be acknowledged\
    \ separately.  Acknowledgments are\ntransmitted in Link State Acknowledgment packets.\
    \  Many separate\nacknowledgments can be grouped together into a single packet.\n\
    The flooding procedure starts when a Link State Update packet has been\nreceived.\
    \  Many consistency checks have been made on the received packet\nbefore being\
    \ handed to the flooding procedure (see Section 8.2).  In\nparticular, the Link\
    \ State Update packet has been associated with a\nparticular neighbor, and a particular\
    \ area.  If the neighbor is in a\nlesser state than Exchange, the packet should\
    \ be dropped without further\nprocessing.\nAll types of link state advertisements,\
    \ other than AS external links,\nare associated with a specific area.  However,\
    \ link state advertisements\ndo not contain an area field.  A link state advertisement's\
    \ area must be\ndeduced from the Link State Update packet header.\nFor each link\
    \ state advertisement contained in the packet, the following\nsteps are taken:\n\
    (1) Validate the advertisement's link state checksum.  If the checksum\n    turns\
    \ out to be invalid, discard the advertisement and get the next\n    one from\
    \ the Link State Update packet.\n(2) Examine the link state advertisement's LS\
    \ type.  If the LS type is\n    unknown, discard the advertisement and get the\
    \ next one from the\n    Link State Update Packet.  This specification defines\
    \ LS Types 1-5\n    (see Section 4.3).\n(3) Else if this is a AS external advertisement\
    \ (LS type = 5), and the\n    area has been configured as a stub area, discard\
    \ the advertisement\n    and get the next one from the Link State Update Packet.\
    \  AS external\n    advertisements are not flooded into/throughout stub areas\
    \ (see\n    Section 3.6).\n(4) Else if the advertisement's age is equal to MaxAge,\
    \ and there is\n    currently no instance of the advertisement in the router's\
    \ link\n    state database, then take the following actions:\n    (a) Acknowledge\
    \ the receipt of the advertisement by sending a Link\n        State Acknowledgment\
    \ packet back to the sending neighbor (see\n        Section 13.5).\n    (b) Purge\
    \ all outstanding requests for equal or previous instances\n        of the advertisement\
    \ from the sending neighbor's Link State\n        Request list (see Section 10).\n\
    \    (c) If the sending neighbor is in state Exchange or in state\n        Loading,\
    \ then install the MaxAge advertisement in the link state\n        database. \
    \ Otherwise, simply discard the advertisement.  In\n        either case, examine\
    \ the next advertisement (if any) listed in\n        the Link State Update packet.\n\
    (5) Otherwise, find the instance of this advertisement that is currently\n   \
    \ contained in the router's link state database.  If there is no\n    database\
    \ copy, or the received advertisement is more recent than the\n    database copy\
    \ (see Section 13.1 below for the determination of which\n    advertisement is\
    \ more recent) the following steps must be performed:\n    (a) If there is already\
    \ a database copy, and if the database copy\n        was installed less than MinLSInterval\
    \ seconds ago, discard the\n        new advertisement (without acknowledging it)\
    \ and examine the\n        next advertisement (if any) listed in the Link State\
    \ Update\n        packet.\n    (b) Otherwise immediately flood the new advertisement\
    \ out some\n        subset of the router's interfaces (see Section 13.3).  In\
    \ some\n        cases (e.g., the state of the receiving interface is DR and the\n\
    \        advertisement was received from a router other than the Backup\n    \
    \    DR) the advertisement will be flooded back out the receiving\n        interface.\
    \  This occurrence should be noted for later use by the\n        acknowledgment\
    \ process (Section 13.5).\n    (c) Remove the current database copy from all neighbors'\
    \ Link state\n        retransmission lists.\n    (d) Install the new advertisement\
    \ in the link state database\n        (replacing the current database copy). \
    \ This may cause the\n        routing table calculation to be scheduled.  In addition,\n\
    \        timestamp the new advertisement with the current time (i.e., the\n  \
    \      time it was received).  The flooding procedure cannot overwrite\n     \
    \   the newly installed advertisement until MinLSInterval seconds\n        have\
    \ elapsed.  The advertisement installation process is\n        discussed further\
    \ in Section 13.2.\n    (e) Possibly acknowledge the receipt of the advertisement\
    \ by sending\n        a Link State Acknowledgment packet back out the receiving\n\
    \        interface.  This is explained below in Section 13.5.\n    (f) If this\
    \ new link state advertisement indicates that it was\n        originated by this\
    \ router itself, the router must advance the\n        advertisement's link state\
    \ sequence number, and issue a new\n        instance of the advertisement (see\
    \ Section 13.4).\n(6) Else, if there is an instance of the advertisement on the\
    \ sending\n    neighbor's Link state request list, an error has occurred in the\n\
    \    Database Description process.  In this case, restart the Database\n    Description\
    \ process by generating the neighbor event BadLSReq for\n    the sending neighbor\
    \ and stop processing the Link State Update\n    packet.\n(7) Else, if the received\
    \ advertisement is the same instance as the\n    database copy (i.e., neither\
    \ one is more recent) the following two\n    steps should be performed:\n    (a)\
    \ If the advertisement is listed in the Link state retransmission\n        list\
    \ for the receiving adjacency, the router itself is expecting\n        an acknowledgment\
    \ for this advertisement.  The router should\n        treat the received advertisement\
    \ as an acknowledgment, by\n        removing the advertisement from the Link state\
    \ retransmission\n        list.  This is termed an \"implied acknowledgment\"\
    .  Its\n        occurrence should be noted for later use by the acknowledgment\n\
    \        process (Section 13.5).\n    (b) Possibly acknowledge the receipt of\
    \ the advertisement by sending\n        a Link State Acknowledgment packet back\
    \ out the receiving\n        interface.  This is explained below in Section 13.5.\n\
    (8) Else, the database copy is more recent.  Note an unusual event to\n    network\
    \ management, discard the advertisement and process the next\n    link state advertisement\
    \ contained in the packet.\n13.1 Determining which link state is newer\nWhen a\
    \ router encounters two instances of a link state advertisement, it\nmust determine\
    \ which is more recent.  This occurred above when comparing\na received advertisement\
    \ to the database copy.  This comparison must\nalso be done during the database\
    \ exchange procedure which occurs during\nadjacency bring-up.\nA link state advertisement\
    \ is identified by its LS type, Link State ID\nand Advertising Router.  For two\
    \ instances of the same advertisement,\nthe LS sequence number, LS age, and LS\
    \ checksum fields are used to\ndetermine which instance is more recent:\no   The\
    \ advertisement having the newer LS sequence number is more\n    recent.  See\
    \ Section 12.1.6 for an explanation of the LS sequence\n    number space.  If\
    \ both instances have the same LS sequence number,\n    then:\no   If the two\
    \ instances have different LS checksums, then the instance\n    having the larger\
    \ LS checksum (when considered as a 16-bit unsigned\n    integer) is considered\
    \ more recent.\no   Else, if only one of the instances is of age MaxAge, the instance\
    \ of\n    age MaxAge is considered to be more recent.\no   Else, if the ages of\
    \ the two instances differ by more than\n    MaxAgeDiff, the instance having the\
    \ smaller (younger) age is\n    considered to be more recent.\no   Else, the two\
    \ instances are considered to be identical.\n13.2 Installing link state advertisements\
    \ in the database\nInstalling a new link state advertisement in the database,\
    \ either as the\nresult of flooding or a newly self originated advertisement,\
    \ may cause\nthe routing table structure to be recalculated.  The contents of\
    \ the new\nadvertisement should be compared to the old instance, if present. \
    \ If\nthere is no difference, there is no need to recalculate the routing\ntable.\
    \  (Note that even if the contents are the same, the LS checksum\nwill probably\
    \ be different, since the checksum covers the LS sequence\nnumber.)\nIf the contents\
    \ are different, the following pieces of the routing table\nmust be recalculated,\
    \ depending on the LS type field:\nRouter links, network links\n    The entire\
    \ routing table must be recalculated, starting with the\n    shortest path calculations\
    \ for each area (not just the area whose\n    topological database has changed).\
    \  The reason that the shortest\n    path calculation cannot be restricted to\
    \ the single changed area has\n    to do with the fact that AS boundary routers\
    \ may belong to multiple\n    areas.  A change in the area currently providing\
    \ the best route may\n    force the router to use an intra-area route provided\
    \ by a different\n    area.[15]\nSummary link\n    The best route to the destination\
    \ described by the summary link\n    advertisement must be re-examined (see Section\
    \ 16.5).  If this\n    destination is an AS boundary router, it may also be necessary\
    \ to\n    re-examine all the AS external link advertisements.\nAS external link\n\
    \    The best route to the destination described by the AS external link\n   \
    \ advertisement must be re-examined (see Section 16.6).\nAlso, any old instance\
    \ of the advertisement must be removed from the\ndatabase when the new advertisement\
    \ is installed.  This old instance\nmust also be removed from all neighbors' Link\
    \ state retransmission lists\n(see Section 10).\n13.3 Next step in the flooding\
    \ procedure\nWhen a new (and more recent) advertisement has been received, it\
    \ must be\nflooded out some set of the router's interfaces.  This section describes\n\
    the second part of flooding procedure (the first part being the\nprocessing that\
    \ occurred in Section 13), namely, selecting the outgoing\ninterfaces and adding\
    \ the advertisement to the appropriate neighbors'\nLink state retransmission lists.\
    \  Also included in this part of the\nflooding procedure is the maintenance of\
    \ the neighbors' Link state\nrequest lists.\nThis section is equally applicable\
    \ to the flooding of an advertisement\nthat the router itself has just originated\
    \ (see Section 12.4).  For\nthese advertisements, this section provides the entirety\
    \ of the flooding\nprocedure (i.e., the processing of Section 13 is not performed,\
    \ since,\nfor example, the advertisement has not been received from a neighbor\
    \ and\ntherefore does not need to be acknowledged).\nDepending upon the advertisement's\
    \ LS type, the advertisement can be\nflooded out only certain interfaces.  These\
    \ interfaces, defined by the\nfollowing, are called the eligible interfaces:\n\
    AS external links (LS Type = 5)\n    AS external links are flooded throughout\
    \ the entire AS, with the\n    exception of stub areas (see Section 3.6).  The\
    \ eligible interfaces\n    are all the router's interfaces, excluding virtual\
    \ links and those\n    interfaces attaching to stub areas.\nAll other types\n\
    \    All other types are specific to a single area (Area A).  The\n    eligible\
    \ interfaces are all those interfaces attaching to the Area\n    A.  If Area A\
    \ is the backbone, this includes all the virtual links.\nLink state databases\
    \ must remain synchronized over all adjacencies\nassociated with the above eligible\
    \ interfaces.  This is accomplished by\nexecuting the following steps on each\
    \ eligible interface.  It should be\nnoted that this procedure may decide not\
    \ to flood a link state\nadvertisement out a particular interface, if there is\
    \ a high probability\nthat the attached neighbors have already received the advertisement.\n\
    However, in these cases the flooding procedure must be absolutely sure\nthat the\
    \ neighbors eventually do receive the advertisement, so the\nadvertisement is\
    \ still added to each adjacency's Link state\nretransmission list.  For each eligible\
    \ interface:\n(1) Each of the neighbors attached to this interface are examined,\
    \ to\n    determine whether they must receive the new advertisement.  The\n  \
    \  following steps are executed for each neighbor:\n    (a) If the neighbor is\
    \ in a lesser state than Exchange, it does not\n        participate in flooding,\
    \ and the next neighbor should be\n        examined.\n    (b) Else, if the adjacency\
    \ is not yet full (neighbor state is\n        Exchange or Loading), examine the\
    \ Link state request list\n        associated with this adjacency.  If there is\
    \ an instance of the\n        new advertisement on the list, it indicates that\
    \ the neighboring\n        router has an instance of the advertisement already.\
    \  Compare\n        the new advertisement to the neighbor's copy:\n        o \
    \  If the new advertisement is less recent, then try the next\n            neighbor.\n\
    \        o   If the two copies are the same instance, then delete the\n      \
    \      advertisement from the Link state request list, and try the\n         \
    \   next neighbor.[16]\n        o   Else, the new advertisement is more recent.\
    \  Delete the\n            advertisement from the Link state request list.\n \
    \   (c) If the new advertisement was received from this neighbor, try\n      \
    \  the next neighbor.\n    (d) At this point we are not positive that the new\
    \ neighbor has an\n        up-to-date instance of this new advertisement.  Add\
    \ the new\n        advertisement to the Link state retransmission list for the\n\
    \        adjacency.  This ensures that the flooding procedure is\n        reliable;\
    \ the advertisement will be retransmitted at intervals\n        until an acknowledgment\
    \ is seen from the neighbor.\n(2) The router must now decide whether to flood\
    \ the new link state\n    advertisement out this interface.  If in the previous\
    \ step, the link\n    state advertisement was NOT added to any of the Link state\n\
    \    retransmission lists, there is no need to flood the advertisement\n    and\
    \ the next interface should be examined.\n(3) If the new advertisement was received\
    \ on this interface, and it was\n    received from either the Designated Router\
    \ or the Backup Designated\n    Router, chances are all the neighbors have received\
    \ the\n    advertisement already.  Therefore, examine the next interface.\n(4)\
    \ If the new advertisement was received on this interface, and the\n    interface\
    \ state is Backup (i.e., the router itself is the Backup\n    Designated Router),\
    \ examine the next interface.  The Designated\n    Router will do the flooding\
    \ on this interface.  If the Designated\n    Router fails, this router will end\
    \ up retransmitting the updates.\n(5) If this step is reached, the advertisement\
    \ must be flooded out the\n    interface.  Send a Link State Update packet (with\
    \ the new\n    advertisement as contents) out the interface.  The advertisement's\n\
    \    LS age must be incremented by InfTransDelay (which must be > 0) when\n  \
    \  copied into the outgoing packet (until the LS age field reaches its\n    maximum\
    \ value of MaxAge).\n    On broadcast networks, the Link State Update packets\
    \ are multicast.\n    The destination IP address specified for the Link State\
    \ Update\n    Packet depends on the state of the interface.  If the interface\n\
    \    state is DR or Backup, the address AllSPFRouters should be used.\n    Otherwise,\
    \ the address AllDRouters should be used.\n    On non-broadcast, multi-access\
    \ networks, separate Link State Update\n    packets must be sent, as unicasts,\
    \ to each adjacent neighbor (i.e.,\n    those in state Exchange or greater). \
    \ The destination IP addresses\n    for these packets are the neighbors' IP addresses.\n\
    13.4 Receiving self-originated link state\nIt is a common occurrence to receive\
    \ a self-originated link state\nadvertisement via the flooding procedure.  If\
    \ the advertisement received\nis a newer instance than the last instance that\
    \ the router actually\noriginated, the router must take special action.\nThe reception\
    \ of such an advertisement indicates that there are link\nstate advertisements\
    \ in the routing domain that were originated before\nthe last time the router\
    \ was restarted.  In this case, the router must\nadvance the sequence number for\
    \ the advertisement one past the received\nsequence number, and originate a new\
    \ instance of the advertisement.\nNote also that if the type of the advertisement\
    \ is Summary link or AS\nexternal link, the router may no longer have an (advertisable)\
    \ route to\nthe destination.  In this case, the advertisement should be flushed\
    \ from\nthe routing domain by incrementing the advertisement's LS age to MaxAge\n\
    and reflooding (see Section 14.1).\n13.5 Sending Link State Acknowledgment packets\n\
    Each newly received link state advertisement must be acknowledged.  This\nis usually\
    \ done by sending Link State Acknowledgment packets.  However,\nacknowledgments\
    \ can also be accomplished implicitly by sending Link\nState Update packets (see\
    \ step 7a of Section 13).\nMany acknowledgments may be grouped together into a\
    \ single Link State\nAcknowledgment packet.  Such a packet is sent back out the\
    \ interface\nthat has received the advertisements.  The packet can be sent in\
    \ one of\ntwo ways: delayed and sent on an interval timer, or sent directly (as\
    \ a\nunicast) to a particular neighbor.  The particular acknowledgment\nstrategy\
    \ used depends on the circumstances surrounding the receipt of\nthe advertisement.\n\
    Sending delayed acknowledgments accomplishes several things: it\nfacilitates the\
    \ packaging of multiple acknowledgments in a single\npacket; it enables a single\
    \ packet to indicate acknowledgments to\nseveral neighbors at once (through multicasting);\
    \ and it randomizes the\nacknowledgment packets sent by the various routers attached\
    \ to a multi-\naccess network.  The fixed interval between a router's delayed\n\
    transmissions must be short (less than RxmtInterval) or needless\nretransmissions\
    \ will ensue.\nDirect acknowledgments are sent to a particular neighbor in response\
    \ to\nthe receipt of duplicate link state advertisements.  These\nacknowledgments\
    \ are sent as unicasts, and are sent immediately when the\nduplicate is received.\n\
    The precise procedure for sending Link State Acknowledgment packets is\ndescribed\
    \ in Table 19.  The circumstances surrounding the receipt of the\nadvertisement\
    \ are listed in the left column.  The acknowledgment action\nthen taken is listed\
    \ in one of the two right columns.  This action\ndepends on the state of the concerned\
    \ interface; interfaces in state\nBackup behave differently from interfaces in\
    \ all other states.\n                                     Action taken in state\n\
    \     Circumstances          Backup               All other states\n     ______________________________________________________________\n\
    \                                     Action taken in state\n     Circumstances\
    \          Backup               All other states\n     ______________________________________________________________\n\
    Advertisement  has     No  acknowledgment   No  acknowledgment\nbeen  flooded\
    \ back     sent.                sent.\nout receiving  in-\nterface  (see Sec-\n\
    tion 13, step 5b).\n______________________________________________________________\n\
    Advertisement   is     Delayed       ack-   Delayed       ack-\nmore  recent \
    \ than     nowledgment   sent   nowledgment sent.\ndatabase copy, but     if \
    \  advertisement\nwas   not  flooded     received  from DR,\nback out receiving\
    \     otherwise do noth-\ninterface              ing\n______________________________________________________________\n\
    Advertisement is a     Delayed       ack-   No  acknowledgment\nduplicate, and\
    \ was     nowledgment   sent   sent.\ntreated as an  im-     if   advertisement\n\
    plied  acknowledg-     received  from DR,\nment (see  Section     otherwise do\
    \ noth-\n13, step 7a).          ing\n______________________________________________________________\n\
    Advertisement is a     Direct acknowledg-   Direct acknowledg-\nduplicate, and\
    \ was     ment sent.           ment sent.\nnot treated as  an\nimplied       ack-\n\
    nowledgment.\n______________________________________________________________\n\
    Advertisement's age    Direct acknowledg-   Direct acknowledg-\nis equal to MaxAge,\
    \    ment sent.           ment sent.\nand there is no\ncurrent instance of\nthe\
    \ advertisement in\nthe link state\ndatabase (see\nSection 13, step 4).\n    \
    \         Table 19: Sending link state acknowledgements.\nDelayed acknowledgments\
    \ must be delivered to all adjacent routers\nassociated with the interface.  On\
    \ broadcast networks, this is\naccomplished by sending the delayed Link State\
    \ Acknowledgment packets as\nmulticasts.  The Destination IP address used depends\
    \ on the state of the\ninterface.  If the state is DR or Backup, the destination\
    \ AllSPFRouters\nis used.  In other states, the destination AllDRouters is used.\
    \  On\nnon-broadcast networks, delayed acks must be unicast separately over\n\
    each adjacency (neighbor whose state is >= Exchange).\nThe reasoning behind sending\
    \ the above packets as multicasts is best\nexplained by an example.  Consider\
    \ the network configuration depicted in\nFigure 15.  Suppose RT4 has been elected\
    \ as DR, and RT3 as Backup for\nthe network N3.  When router RT4 floods a new\
    \ advertisement to network\nN3, it is received by routers RT1, RT2, and RT3. \
    \ These routers will not\nflood the advertisement back onto net N3, but they still\
    \ must ensure\nthat their topological databases remain synchronized with their\
    \ adjacent\nneighbors.  So RT1, RT2, and RT4 are waiting to see an acknowledgment\n\
    from RT3.  Likewise, RT4 and RT3 are both waiting to see acknowledgments\nfrom\
    \ RT1 and RT2.  This is best achieved by sending the acknowledgments\nas multicasts.\n\
    The reason that the acknowledgment logic for Backup DRs is slightly\ndifferent\
    \ is because they perform differently during the flooding of\nlink state advertisements\
    \ (see Section 13.3, step 4).\n13.6 Retransmitting link state advertisements\n\
    Advertisements flooded out an adjacency are placed on the adjacency's\nLink state\
    \ retransmission list.  In order to ensure that flooding is\nreliable, these advertisements\
    \ are retransmitted until they are\nacknowledged.  The length of time between\
    \ retransmissions is a\nconfigurable per-interface value, RxmtInterval.  If this\
    \ is set too low\nfor an interface, needless retransmissions will ensue.  If the\
    \ value is\nset too high, the speed of the flooding, in the face of lost packets,\n\
    may be affected.\nSeveral retransmitted advertisements may fit into a single Link\
    \ State\nUpdate packet.  When advertisements are to be retransmitted, only the\n\
    number fitting in a single Link State Update packet should be\ntransmitted.  Another\
    \ packet of retransmissions can be sent when some of\nthe advertisements are acknowledged,\
    \ or on the next firing of the\nretransmission timer.\nLink State Update Packets\
    \ carrying retransmissions are always sent as\nunicasts (directly to the physical\
    \ address of the neighbor).  They are\nnever sent as multicasts.  Each advertisement's\
    \ LS age must be\nincremented by InfTransDelay (which must be > 0) when copied\
    \ into the\noutgoing packet (until the LS age field reaches its maximum value\
    \ of\nMaxAge).\nIf the adjacent router goes down, retransmissions may occur until\
    \ the\nadjacency is destroyed by OSPF's Hello Protocol.  When the adjacency is\n\
    destroyed, the Link state retransmission list is cleared.\n13.7 Receiving link\
    \ state acknowledgments\nMany consistency checks have been made on a received\
    \ Link State\nAcknowledgment packet before it is handed to the flooding procedure.\
    \  In\nparticular, it has been associated with a particular neighbor.  If this\n\
    neighbor is in a lesser state than Exchange, the packet is discarded.\nOtherwise,\
    \ for each acknowledgment in the packet, the following steps\nare performed:\n\
    o   Does the advertisement acknowledged have an instance on the Link\n    state\
    \ retransmission list for the neighbor?  If not, examine the\n    next acknowledgment.\
    \  Otherwise:\no   If the acknowledgment is for the same instance that is contained\
    \ on\n    the list, remove the item from the list and examine the next\n    acknowledgment.\
    \  Otherwise:\no   Log the questionable acknowledgment, and examine the next one.\n\
    14. Aging The Link State Database\nEach link state advertisement has an age field.\
    \  The age is expressed in\nseconds.  An advertisement's age field is incremented\
    \ while it is\ncontained in a router's database.  Also, when copied into a Link\
    \ State\nUpdate Packet for flooding out a particular interface, the\nadvertisement's\
    \ age is incremented by InfTransDelay.\nAn advertisement's age is never incremented\
    \ past the value MaxAge.\nAdvertisements having age MaxAge are not used in the\
    \ routing table\ncalculation.  As a router ages its link state database, an\n\
    advertisement's age may reach MaxAge.[17] At this time, the router must\nattempt\
    \ to flush the advertisement from the routing domain.  This is\ndone simply by\
    \ reflooding the MaxAge advertisement just as if it was a\nnewly originated advertisement\
    \ (see Section 13.3).\nWhen a Database summary list for a newly adjacent neighbor\
    \ is formed,\nany MaxAge advertisements present in the link state database are\
    \ added\nto the neighbor's Link state retransmission list instead of the\nneighbor's\
    \ Database summary list.  See Section 10.3 for more details.\nA MaxAge advertisement\
    \ is removed entirely from the router's link state\ndatabase when a) it is no\
    \ longer contained on any neighbor Link state\nretransmission lists and b) none\
    \ of the router's neighbors are in states\nExchange or Loading.\nWhen, in the\
    \ process of aging the link state database, an\nadvertisement's age hits a multiple\
    \ of CheckAge, its checksum should be\nverified.  If the checksum is incorrect,\
    \ a program or memory error has\nbeen detected, and at the very least the router\
    \ itself should be\nrestarted.\n14.1 Premature aging of advertisements\nA link\
    \ state advertisement can be flushed from the routing domain by\nsetting its age\
    \ to MaxAge and reflooding the advertisement.  This\nprocedure follows the same\
    \ course as flushing an advertisement whose age\nhas naturally reached the value\
    \ MaxAge (see Section 14).  In particular,\nthe MaxAge advertisement is removed\
    \ from the router's link state\ndatabase as soon as a) it is no longer contained\
    \ on any neighbor Link\nstate retransmission lists and b) none of the router's\
    \ neighbors are in\nstates Exchange or Loading.  We call the setting of an advertisement's\n\
    age to MaxAge premature aging.\nPremature aging is used when it is time for a\
    \ self-originated\nadvertisement's sequence number field to wrap.  At this point,\
    \ the\ncurrent advertisement instance (having LS sequence number of 0x7fffffff)\n\
    must be prematurely aged and flushed from the routing domain before a\nnew instance\
    \ with sequence number 0x80000001 can be originated.  See\nSection 12.1.6 for\
    \ more information.\nPremature aging can also be used when, for example, one of\
    \ the router's\npreviously advertised external routes is no longer reachable.\
    \  In this\ncircumstance, the router can flush its external advertisement from\
    \ the\nrouting domain via premature aging.  This procedure is preferable to the\n\
    alternative, which is to originate a new advertisement for the\ndestination specifying\
    \ a metric of LSInfinity.\nA router may only prematurely age its own (self-originated)\
    \ link state\nadvertisements.  These are the link state advertisements having\
    \ the\nrouter's own OSPF Router ID in the Advertising Router field.\n15. Virtual\
    \ Links\nThe single backbone area (Area ID = 0) cannot be disconnected, or some\n\
    areas of the Autonomous System will become unreachable.  To\nestablish/maintain\
    \ connectivity of the backbone, virtual links can be\nconfigured through non-backbone\
    \ areas.  Virtual links serve to connect\nseparate components of the backbone.\
    \  The two endpoints of a virtual\nlink are area border routers.  The virtual\
    \ link must be configured in\nboth routers.  The configuration information in\
    \ each router consists of\nthe other virtual endpoint (the other area border router),\
    \ and the non-\nbackbone area the two routers have in common (called the transit\
    \ area).\nVirtual links cannot be configured through stub areas (see Section 3.6).\n\
    The virtual link is treated as if it were an unnumbered point-to-point\nnetwork\
    \ (belonging to the backbone) joining the two area border routers.\nAn attempt\
    \ is made to establish an adjacency over the virtual link.\nWhen this adjacency\
    \ is established, the virtual link will be included in\nbackbone router links\
    \ advertisements, and OSPF packets pertaining to the\nbackbone area will flow\
    \ over the adjacency.  Such an adjacency has been\nreferred to as a \"virtual\
    \ adjacency\".\nIn each endpoint router, the cost and viability of the virtual\
    \ link is\ndiscovered by examining the routing table entry for the other endpoint\n\
    router.  (The entry's associated area must be the configured transit\narea). \
    \ Actually, there may be a separate routing table entry for each\nType of Service.\
    \  These are called the virtual link's corresponding\nrouting table entries. \
    \ The Interface Up event occurs for a virtual link\nwhen its corresponding TOS\
    \ 0 routing table entry becomes reachable.\nConversely, the Interface Down event\
    \ occurs when its TOS 0 routing table\nentry becomes unreachable.[18] In other\
    \ words, the virtual link's\nviability is determined by the existence of an intra-area\
    \ path, through\nthe transit area, between the two endpoints.  The other details\n\
    concerning virtual links are as follows:\no   AS external links are NEVER flooded\
    \ over virtual adjacencies.  This\n    would be duplication of effort, since the\
    \ same AS external links are\n    already flooded throughout the virtual link's\
    \ transit area.  For\n    this same reason, AS external link advertisements are\
    \ not summarized\n    over virtual adjacencies during the database exchange process.\n\
    o   The cost of a virtual link is NOT configured.  It is defined to be\n    the\
    \ cost of the intra-area path between the two defining area border\n    routers.\
    \  This cost appears in the virtual link's corresponding\n    routing table entry.\
    \  When the cost of a virtual link changes, a new\n    router links advertisement\
    \ should be originated for the backbone\n    area.\no   Just as the virtual link's\
    \ cost and viability are determined by the\n    routing table build process (through\
    \ construction of the routing\n    table entry for the other endpoint), so are\
    \ the IP interface address\n    for the virtual interface and the virtual neighbor's\
    \ IP address.\n    These are used when sending protocol packets over the virtual\
    \ link.\no   In each endpoint's router links advertisement for the backbone, the\n\
    \    virtual link is represented as a link having link type 4, Link ID\n    set\
    \ to the virtual neighbor's OSPF Router ID and Link Data set to\n    the virtual\
    \ interface's IP address.  See Section 12.4.1 for more\n    information.  Also,\
    \ it may be the case that there is a TOS 0 path,\n    but no non-zero TOS paths\
    \ to the other endpoint router.  In this\n    case, non-zero TOS costs must be\
    \ set to LSInfinity in the router\n    links advertisement.\no   When virtual\
    \ links are configured for the backbone, information\n    concerning backbone\
    \ networks should not be condensed before being\n    summarized for the transit\
    \ areas.  In other words, each backbone\n    network should be advertised in a\
    \ separate summary link\n    advertisement, regardless of the backbone's configured\
    \ area address\n    ranges.  See Section 12.4.3 for more information.\no   The\
    \ time between link state retransmissions, RxmtInterval, is\n    configured for\
    \ a virtual link.  This should be well over the\n    expected round-trip delay\
    \ between the two routers.  This may be hard\n    to estimate for a virtual link.\
    \  It is better to err on the side of\n    making it too large.\n16. Calculation\
    \ Of The Routing Table\nThis section details the OSPF routing table calculation.\
    \  Using its\nattached areas' link state databases as input, a router runs the\n\
    following algorithm, building its routing table step by step.  At each\nstep,\
    \ the router must access individual pieces of the link state\ndatabases (e.g.,\
    \ a router links advertisement originated by a certain\nrouter).  This access\
    \ is performed by the lookup function discussed in\nSection 12.2.  The lookup\
    \ process may return a link state advertisement\nwhose LS age is equal to MaxAge.\
    \  Such an advertisement should not be\nused in the routing table calculation,\
    \ and is treated just as if the\nlookup process had failed.\nThe OSPF routing\
    \ table's organization is explained in Section 11.  Two\nexamples of the routing\
    \ table build process are presented in Sections\n11.2 and 11.3.  This process\
    \ can be broken into the following steps:\n(1) The present routing table is invalidated.\
    \  The routing table is\n    built again from scratch.  The old routing table\
    \ is saved so that\n    changes in routing table entries can be identified.\n\
    (2) The intra-area routes are calculated by building the shortest path\n    tree\
    \ for each attached area.  In particular, all routing table\n    entries whose\
    \ Destination type is \"area border router\" are\n    calculated in this step.\
    \  This step is described in two parts.  At\n    first the tree is constructed\
    \ by only considering those links\n    between routers and transit networks. \
    \ Then the stub networks are\n    incorporated into the tree.\n(3) The inter-area\
    \ routes are calculated, through examination of summary\n    link advertisements.\
    \  If the router is attached to multiple areas\n    (i.e., it is an area border\
    \ router), only backbone summary link\n    advertisements are examined.\n(4) For\
    \ those routing entries whose next hop is over a virtual link, a\n    real (physical)\
    \ next hop is calculated.  The real next hop will be\n    on one of the router's\
    \ directly attached networks.  This step only\n    concerns routers having configured\
    \ virtual links.\n(5) Routes to external destinations are calculated, through\
    \ examination\n    of AS external link advertisements.  The location of the AS\
    \ boundary\n    routers (which originate the AS external link advertisements)\
    \ has\n    been determined in steps 2-4.\nSteps 2-5 are explained in further detail\
    \ below.  The explanations\ndescribe the calculations for TOS 0 only.  It may\
    \ also be necessary to\nperform each step (separately) for each of the non-zero\
    \ TOS values.[19]\nFor more information concerning the building of non-zero TOS\
    \ routes see\nSection 16.9.\nChanges made to routing table entries as a result\
    \ of these calculations\ncan cause the OSPF protocol to take further actions.\
    \  For example, a\nchange to an intra-area route will cause an area border router\
    \ to\noriginate new summary link advertisements (see Section 12.4).  See\nSection\
    \ 16.7 for a complete list of the OSPF protocol actions resulting\nfrom routing\
    \ table table changes.\n16.1 Calculating the shortest-path tree for an area\n\
    This calculation yields the set of intra-area routes associated with an\narea\
    \ (called hereafter Area A).  A router calculates the shortest-path\ntree using\
    \ itself as the root.[20] The formation of the shortest path\ntree is done here\
    \ in two stages.  In the first stage, only links between\nrouters and transit\
    \ networks are considered.  Using the Dijkstra\nalgorithm, a tree is formed from\
    \ this subset of the link state database.\nIn the second stage, leaves are added\
    \ to the tree by considering the\nlinks to stub networks.\nThe procedure will\
    \ be explained using the graph terminology that was\nintroduced in Section 2.\
    \  The area's link state database is represented\nas a directed graph.  The graph's\
    \ vertices are routers, transit networks\nand stub networks.  The first stage\
    \ of the procedure concerns only the\ntransit vertices (routers and transit networks)\
    \ and their connecting\nlinks.  Throughout the shortest path calculation, the\
    \ following data is\nalso associated with each transit vertex:\nVertex (node)\
    \ ID\n    A 32-bit number uniquely identifying the vertex.  For router\n    vertices\
    \ this is the OSPF Router ID.  For network vertices, this is\n    the IP address\
    \ of the network's Designated Router.\nA link state advertisement\n    Each transit\
    \ vertex has an associated link state advertisement.  For\n    router vertices,\
    \ this is a router links advertisement.  For transit\n    networks, this is a\
    \ network links advertisement (which is actually\n    originated by the network's\
    \ Designated Router).  In any case, the\n    advertisement's Link State ID is\
    \ always equal to the above Vertex\n    ID.\nList of next hops\n    The list of\
    \ next hops for the current shortest paths from the root\n    to this vertex.\
    \  There can be multiple shortest paths due to the\n    equal-cost multipath capability.\
    \  Each next hop indicates the\n    outgoing router interface to use when forwarding\
    \ traffic to the\n    destination.  On multi-access networks, the next hop also\
    \ includes\n    the IP address of the next router (if any) in the path towards\
    \ the\n    destination.\nDistance from root\n    The link state cost of the current\
    \ shortest path(s) from the root to\n    the vertex.  The link state cost of a\
    \ path is calculated as the sum\n    of the costs of the path's constituent links\
    \ (as advertised in\n    router links and network links advertisements).  One\
    \ path is said to\n    be \"shorter\" than another if it has a smaller link state\
    \ cost.\nThe first stage of the procedure can now be summarized as follows.  At\n\
    each iteration of the algorithm, there is a list of candidate vertices.\nThe shortest\
    \ paths from the root to these vertices have not\n(necessarily) been found.  The\
    \ candidate vertex closest to the root is\nadded to the shortest-path tree, removed\
    \ from the candidate list, and\nits adjacent vertices are examined for possible\
    \ addition to/modification\nof the candidate list.  The algorithm then iterates\
    \ again.  It\nterminates when the candidate list becomes empty.\nThe following\
    \ steps describe the first stage in detail.  Remember that\nwe are computing the\
    \ shortest path tree for Area A.  All references to\nlink state database lookup\
    \ below are from Area A's database.\n(1) Initialize the algorithm's data structures.\
    \  Clear the list of\n    candidate vertices.  Initialize the shortest-path tree\
    \ to only the\n    root (which is the router doing the calculation).\n(2) Call\
    \ the vertex just added to the tree vertex V.  Examine the link\n    state advertisement\
    \ associated with vertex V.  This is a lookup in\n    the area link state database\
    \ based on the Vertex ID.  Each link\n    described by the advertisement gives\
    \ the cost to an adjacent vertex.\n    For each described link, (say it joins\
    \ vertex V to vertex W):\n    (a) If this is a link to a stub network, examine\
    \ the next link in\n        V's advertisement.  Links to stub networks will be\
    \ considered in\n        the second stage of the shortest path calculation.\n\
    \    (b) Otherwise, W is a transit vertex (router or transit network).\n     \
    \   Look up the vertex W's link state advertisement (router links or\n       \
    \ network links) in Area A's link state database.  If the\n        advertisement\
    \ does not exist, or its age is equal to MaxAge, or\n        it does not have\
    \ a link back to vertex V, examine the next link\n        in V's advertisement.\
    \  Both ends of a link must advertise the\n        link before it will be used\
    \ for data traffic.[21]\n    (c) If vertex W is already on the shortest-path tree,\
    \ examine the\n        next link in the advertisement.\n    (d) If the cost of\
    \ the link (from V to W) is LSInfinity, the link\n        should not be used for\
    \ data traffic.  In this case, examine the\n        next link in the advertisement.\n\
    \    (e) Calculate the link state cost D of the resulting path from the\n    \
    \    root to vertex W.  D is equal to the sum of the link state cost\n       \
    \ of the (already calculated) shortest path to vertex V and the\n        advertised\
    \ cost of the link between vertices V and W.  If D is:\n        o   Greater than\
    \ the value that already appears for vertex W on\n            the candidate list,\
    \ then examine the next link.\n        o   Equal to the value that appears for\
    \ vertex W on the the\n            candidate list, calculate the set of next hops\
    \ that result\n            from using the advertised link.  Input to this calculation\n\
    \            is the destination (W), and its parent (V).  This\n            calculation\
    \ is shown in Section 16.1.1.  This set of hops\n            should be added to\
    \ the next hop values that appear for W on\n            the candidate list.\n\
    \        o   Less than the value that appears for vertex W on the the\n      \
    \      candidate list, or if W does not yet appear on the candidate\n        \
    \    list, then set the entry for W on the candidate list to\n            indicate\
    \ a distance of D from the root.  Also calculate the\n            list of next\
    \ hops that result from using the advertised\n            link, setting the next\
    \ hop values for W accordingly.  The\n            next hop calculation is described\
    \ in Section 16.1.1; it\n            takes as input the destination (W) and its\
    \ parent (V).\n(3) If at this step the candidate list is empty, the shortest-path\
    \ tree\n    (of transit vertices) has been completely built and this stage of\n\
    \    the algorithm terminates.  Otherwise, choose the vertex belonging to\n  \
    \  the candidate list that is closest to the root, and add it to the\n    shortest-path\
    \ tree (removing it from the candidate list in the\n    process).\n(4) Possibly\
    \ modify the routing table.  For those routing table entries\n    modified, the\
    \ associated area will be set to Area A, the path type\n    will be set to intra-area,\
    \ and the cost will be set to the newly\n    discovered shortest path's calculated\
    \ distance.\n    If the newly added vertex is an area border router, a routing\
    \ table\n    entry is added whose destination type is \"area border router\".\
    \  The\n    Options field found in the associated router links advertisement is\n\
    \    copied into the routing table entry's Optional capabilities field.\n    If\
    \ the newly added vertex is an AS boundary router, the routing\n    table entry\
    \ of type \"AS boundary router\" for the destination is\n    located.  Since routers\
    \ can belong to more than one area, it is\n    possible that several sets of intra-area\
    \ paths exist to the AS\n    boundary router, each set using a different area.\
    \  However, the AS\n    boundary router's routing table entry must indicate a\
    \ set of paths\n    which utilize a single area.  The area leading to the routing\
    \ table\n    entry is selected as follows: A set of intra-area paths having no\n\
    \    virtual next hops is always preferred over a set of intra-area paths\n  \
    \  in which some virtual next hops appear[22] ; all other things being\n    equal\
    \ the set of paths having lower cost is preferred.  Note that\n    whenever an\
    \ AS boundary router's routing table entry is\n    added/modified, the Options\
    \ found in the associated router links\n    advertisement is copied into the routing\
    \ table entry's Optional\n    capabilities field.\n    If the newly added vertex\
    \ is a transit network, the routing table\n    entry for the network is located.\
    \  The entry's destination ID is the\n    IP network number, which can be obtained\
    \ by masking the Vertex ID\n    (Link State ID) with its associated subnet mask\
    \ (found in the\n    associated network links advertisement).  If the routing\
    \ table entry\n    already exists (i.e., there is already an intra-area route\
    \ to the\n    destination installed in the routing table), multiple vertices have\n\
    \    mapped to the same IP network.  For example, this can occur when a\n    new\
    \ Designated Router is being established.  In this case, the\n    current routing\
    \ table entry should be overwritten if and only if the\n    newly found path is\
    \ just as short and the current routing table\n    entry's Link State Origin has\
    \ a smaller Link State ID than the newly\n    added vertex' link state advertisement.\n\
    \    If there is no routing table entry for the network (the usual case),\n  \
    \  a routing table entry for the IP network should be added.  The\n    routing\
    \ table entry's Link State origin should be set to the newly\n    added vertex'\
    \ link state advertisement.\n(5) Iterate the algorithm by returning to Step 2.\n\
    The stub networks are added to the tree in the procedure's second stage.\nIn this\
    \ stage, all router vertices are again examined.  Those that have\nbeen determined\
    \ to be unreachable in the above first phase are\ndiscarded.  For each reachable\
    \ router vertex (call it V), the associated\nrouter links advertisement is found\
    \ in the link state database.  Each\nstub network link appearing in the advertisement\
    \ is then examined, and\nthe following steps are executed:\n(1) If the cost of\
    \ the stub network link is LSInfinity, the link should\n    not be used for data\
    \ traffic.  In this case, go on to examine the\n    next stub network link in\
    \ the advertisement.\n(2) Otherwise, Calculate the distance D of stub network\
    \ from the root.\n    D is equal to the distance from the root to the router vertex\n\
    \    (calculated in stage 1), plus the stub network link's advertised\n    cost.\
    \  Compare this distance to the current best cost to the stub\n    network.  This\
    \ is done by looking up the network's current routing\n    table entry.  If the\
    \ calculated distance D is larger, go on to\n    examine the next stub network\
    \ link in the advertisement.\n(3) If this step is reached, the stub network's\
    \ routing table entry must\n    be updated.  Calculate the set of next hops that\
    \ would result from\n    using the stub network link.  This calculation is shown\
    \ in Section\n    16.1.1; input to this calculation is the destination (the stub\n\
    \    network) and the parent vertex (the router vertex).  If the distance\n  \
    \  D is the same as the current routing table cost, simply add this set\n    of\
    \ next hops to the routing table entry's list of next hops.  In\n    this case,\
    \ the routing table already has a Link State origin.  If\n    this Link State\
    \ origin is a router links advertisement whose Link\n    State ID is smaller than\
    \ V's Router ID, reset the Link State origin\n    to V's router links advertisement.\n\
    \    Otherwise D is smaller than the routing table cost.  Overwrite the\n    current\
    \ routing table entry by setting the routing table entry's\n    cost to D, and\
    \ by setting the entry's list of next hops to the newly\n    calculated set. \
    \ Set the routing table entry's Link State origin to\n    V's router links advertisement.\
    \  Then go on to examine the next stub\n    network link.\nFor all routing table\
    \ entries added/modified in the second stage, the\nassociated area will be set\
    \ to Area A and the path type will be set to\nintra-area.  When the list of reachable\
    \ router links is exhausted, the\nsecond stage is completed.  At this time, all\
    \ intra-area routes\nassociated with Area A have been determined.\nThe specification\
    \ does not require that the above two stage method be\nused to calculate the shortest\
    \ path tree.  However, if another algorithm\nis used, an identical tree must be\
    \ produced.  For this reason, it is\nimportant to note that links between transit\
    \ vertices must be\nbidirectional in ordered to be included in the above tree.\
    \  It should\nalso be mentioned that algorithms exist for incrementally updating\
    \ the\nshortest-path tree (see [BBN]).\n16.1.1 The next hop calculation\nThis\
    \ section explains how to calculate the current set of next hops to\nuse for a\
    \ destination.  Each next hop consists of the outgoing interface\nto use in forwarding\
    \ packets to the destination together with the next\nhop router (if any).  The\
    \ next hop calculation is invoked each time a\nshorter path to the destination\
    \ is discovered.  This can happen in\neither stage of the shortest-path tree calculation\
    \ (see Section 16.1).\nIn stage 1 of the shortest-path tree calculation a shorter\
    \ path is found\nas the destination is added to the candidate list, or when the\n\
    destination's entry on the candidate list is modified (Step 2e of Stage\n1). \
    \ In stage 2 a shorter path is discovered each time the destination's\nrouting\
    \ table entry is modified (Step 3 of Stage 2).\nThe set of next hops to use for\
    \ the destination may be recalculated\nseveral times during the shortest-path\
    \ tree calculation, as shorter and\nshorter paths are discovered.  In the end,\
    \ the destination's routing\ntable entry will always reflect the next hops resulting\
    \ from the\nabsolute shortest path(s).\nInput to the next hop calculation is a)\
    \ the destination and b) its\nparent in the current shortest path between the\
    \ root (the calculating\nrouter) and the destination.  The parent is always a\
    \ transit vertex\n(i.e., always a router or a transit network).\nIf there is at\
    \ least one intervening router in the current shortest path\nbetween the destination\
    \ and the root, the destination simply inherits\nthe set of next hops from the\
    \ parent.  Otherwise, there are two cases.\nIn the first case, the parent vertex\
    \ is the root (the calculating router\nitself).  This means that the destination\
    \ is either a directly connected\nnetwork or directly connected router.  The next\
    \ hop in this case is\nsimply the OSPF interface connecting to the network/router;\
    \ no next hop\nrouter is required.\nIn the second case, the destination is a router,\
    \ and its parent vertex\nis a network.  The list of next hops is then determined\
    \ by examining the\ndestination's router links advertisement.  For each link in\
    \ the\nadvertisement that points back to the parent network, the link's Link\n\
    Data field provides the IP address of a next hop router.  The outgoing\ninterface\
    \ to use can then be derived from the next hop IP address (or it\ncan be inherited\
    \ from the parent network).\n16.2 Calculating the inter-area routes\nThe inter-area\
    \ routes are calculated by examining summary link\nadvertisements.  If the router\
    \ has active attachments to multiple areas,\nonly backbone summary link advertisements\
    \ are examined.  Routers\nattached to a single area examine that area's summary\
    \ links.  In either\ncase, the summary links examined below are all part of a\
    \ single area's\nlink state database (call it Area A).\nSummary link advertisements\
    \ are originated by the area border routers.\nEach summary link advertisement\
    \ in Area A is considered in turn.\nRemember that the destination described by\
    \ a summary link advertisement\nis either a network (type 3 summary link advertisements)\
    \ or an AS\nboundary router (type 4 summary link advertisements).  For each summary\n\
    link advertisement:\n(1) If the cost specified by the advertisement is LSInfinity,\
    \ then\n    examine the next advertisement.\n(2) If the advertisement was originated\
    \ by the calculating router\n    itself, examine the next advertisement.\n(3)\
    \ If the collection of destinations described by the summary link\n    falls into\
    \ one of the router's configured area address ranges (see\n    Section 3.5) and\
    \ the particular area address range is active, the\n    summary link should be\
    \ ignored.  Active means that there are one or\n    more reachable (by intra-area\
    \ paths) networks contained in the area\n    range.  In this case, all addresses\
    \ in the area range are assumed to\n    be either reachable via intra-area paths,\
    \ or else to be unreachable\n    by any other means.\n(4) Else, call the destination\
    \ described by the advertisement N, and the\n    area border originating the advertisement\
    \ BR.  Look up the routing\n    table entry for BR having A as its associated\
    \ area.  If no such\n    entry exists for router BR (i.e., BR is unreachable in\
    \ Area A), do\n    nothing with this advertisement and consider the next in the\
    \ list.\n    Else, this advertisement describes an inter-area path to destination\n\
    \    N, whose cost is the distance to BR plus the cost specified in the\n    advertisement.\
    \  Call the cost of this inter-area path IAC.\n(5) Next, look up the routing table\
    \ entry for the destination N.  (The\n    entry's Destination type is either Network\
    \ or AS boundary router.)\n    If no entry exists for N or if the entry's path\
    \ type is \"AS\n    external\", install the inter-area path to N, with associated\
    \ area A,\n    cost IAC, next hop equal to the list of next hops to router BR,\
    \ and\n    advertising router equal to BR.\n(6) Else, if the paths present in\
    \ the table are intra-area paths, do\n    nothing with the advertisement (intra-area\
    \ paths are always\n    preferred).\n(7) Else, the paths present in the routing\
    \ table are also inter-area\n    paths.  Install the new path through BR if it\
    \ is cheaper, overriding\n    the paths in the routing table.  Otherwise, if the\
    \ new path is the\n    same cost, add it to the list of paths that appear in the\
    \ routing\n    table entry.\n16.3 Resolving virtual next hops\nThis step is only\
    \ necessary in area-border routers having configured\nvirtual links.  In these\
    \ routers, some of the routing table entries may\nhave virtual next hops.  That\
    \ is, one or more of the next hops installed\nin Sections 16.1 and 16.2 may be\
    \ over a virtual link.  However, when\nforwarding data traffic to a destination,\
    \ the next hops must always be\non a directly attached network.\nIn this section,\
    \ each virtual next hop is replaced by a real next hop.\nIn the process a new\
    \ routing table distance is calculated that may be\nsmaller than the previously\
    \ calculated distance.  In this case, the list\nof next hops is pruned so that\
    \ only those giving rise to the new\nshortest distance are included, and the routing\
    \ table entry's distance\nis updated accordingly.\n                 ______________________________________\n\
    \                 (Figure not included in text version.)\n                 Figure\
    \ 17: Resolving virtual next hops\n                 ______________________________________\n\
    This resolution of virtual next hops is done only for Destination types\nNetwork\
    \ or AS Boundary router.  Suppose that one of a routing table\nentry's next hops\
    \ is a virtual link.  This is determined by the\nfollowing combination: the routing\
    \ table entry's path type is either\nintra-area or inter-area, the area associated\
    \ with the routing table\nentry must be the backbone, yet the next hop belongs\
    \ to a different area\n(the virtual link's transit area).\nLet N be the above\
    \ entry's destination, and A the virtual link's transit\narea.  The real next\
    \ hop (and new distance) is calculated as follows.\nLet D be a distance counter,\
    \ and set the real next hop NH to null.\nThen, look up all the summary link advertisements\
    \ for N in area A's\ndatabase, performing the following steps for each advertisement:[23]\n\
    (1) Call the border router that originated the advertisement BR.  If\n    there\
    \ is no routing table entry for BR having A as associated area\n    (i.e., BR\
    \ is unreachable through Area A), examine the next\n    advertisement.\n(2) Else,\
    \ let X be the distance to BR via Area A.  If the cost\n    advertised by BR (call\
    \ it Y) to the destination is LSInfinity,\n    examine the next summary link advertisement.\
    \  Else, the cost to\n    destination N through area border router BR is X+Y.\n\
    (3) If next hop NH is null or X+Y is smaller is smaller than D, set D to\n   \
    \ X+Y and set the next hop NH to the next hop specified in router BR's\n    routing\
    \ table entry.\nAt this point, the real next hop NH should be set, and the distance\
    \ D\ncalculated should be less than or equal to the cost originally specified\n\
    in destination N's routing table entry.  This same calculation should be\ndone\
    \ for all of N's virtual next hops, and then N's new cost set to the\nminimum\
    \ calculated distance, with the its new set of next hops that\ncombination of\
    \ non-virtual and recalculated next hops that correspond to\nthis (possibly same\
    \ as original) distance.\nThe resolving of virtual next hops may produce unexpected\
    \ results.\nAfter the virtual next hops are resolved, traffic that was originally\n\
    scheduled to go over the virtual link may instead take a different path\nthrough\
    \ the virtual link's transit area.  In other words, virtual links\nallow transit\
    \ traffic to be forwarded through an area, but do not\ndictate the precise path\
    \ that the traffic will take.\nAs an example, consider the Autonomous System pictured\
    \ in Figure 17.\nThere is a single non-backbone area (Area 1) that physically\
    \ divides the\nbackbone into two separate pieces.  To maintain connectivity of\
    \ the\nbackbone, a virtual link has been configured between routers RT1 and\n\
    RT4.  On the right side of the figure, network N1 belongs to the\nbackbone.  The\
    \ dotted lines indicate that there is a much shorter\nintra-area backbone path\
    \ between router RT5 and network N1 (cost 20)\nthan there is between router RT4\
    \ and network N1 (cost 100).  Both router\nRT4 and router RT5 will inject summary\
    \ link advertisements for network\nN1 into Area 1.\nAfter the shortest-path tree\
    \ has been calculated for the backbone,\nrouter RT1 (one end of the virtual link)\
    \ will have selected router RT4\nas the virtual next hop for all data traffic\
    \ destined for network N1.\nHowever, since router RT5 is so much closer to network\
    \ N1, all routers\ninternal to Area 1 (e.g., routers RT2 and RT3) will forward\
    \ their\nnetwork N1 traffic towards router RT5, instead of RT4.  And indeed,\n\
    after resolving the virtual next hop by the above calculation, router\nRT1 will\
    \ also forward network N1 traffic towards RT5.  So, in this\nexample the virtual\
    \ link enables network N1 traffic to be forwarded\nthrough the transit Area 1,\
    \ but the actual path the data traffic takes\ndoes not follow the virtual link.\n\
    16.4 Calculating AS external routes\nAS external routes are calculated by examining\
    \ AS external link\nadvertisements.  Each of the AS external link advertisements\
    \ is\nconsidered in turn.  Most AS external advertisements describe routes to\n\
    specific IP destinations.  An AS external advertisement can also\ndescribe a default\
    \ route for the Autonomous System (destination =\nDefaultDestination).  For each\
    \ AS external link advertisement:\n(1) If the cost specified by the advertisement\
    \ is LSInfinity, then\n    examine the next advertisement.\n(2) If the advertisement\
    \ was originated by the calculating router\n    itself, examine the next advertisement.\n\
    (3) Call the destination described by the advertisement N.  Look up the\n    routing\
    \ table entry for the AS boundary router (ASBR) that\n    originated the advertisement.\
    \  If no entry exists for router ASBR\n    (i.e., ASBR is unreachable), do nothing\
    \ with this advertisement and\n    consider the next in the list.\n    Else, this\
    \ advertisement describes an AS external path to\n    destination N.  Examine\
    \ the forwarding address specified in the\n    external advertisement.  This indicates\
    \ the IP address to which\n    packets for the destination should be forwarded.\
    \  If forwarding\n    address is set to 0.0.0.0, packets should be sent to the\
    \ ASBR\n    itself.  Otherwise, look up the forwarding address in the routing\n\
    \    table.[24] An intra-area or inter-area path must exist to the\n    forwarding\
    \ address.  If no such path exists, do nothing with the\n    advertisement and\
    \ consider the next in the list.\n    Call the routing table distance to the forwarding\
    \ address X (when\n    the forwarding address is set to 0.0.0.0, this is the distance\
    \ to\n    the ASBR itself), and the cost specified in the advertisement Y.  X\n\
    \    is in terms of the link state metric, and Y is a Type 1 or 2\n    external\
    \ metric.\n(4) Next, look up the routing table entry for the destination N.  If\
    \ no\n    entry exists for N, install the AS external path to N, with next hop\n\
    \    equal to the list of next hops to the forwarding address, and\n    advertising\
    \ router equal to ASBR.  If the external metric type is 1,\n    then the path-type\
    \ is set to type 1 external and the cost is equal\n    to X+Y.  If the external\
    \ metric type is 2, the the path-type is set\n    to type 2 external, the link\
    \ state component of the route's cost is\n    X, and the Type 2 cost is Y.\n(5)\
    \ Else, if the paths present in the table are not type 1 or type 2\n    external\
    \ paths, do nothing (AS external paths have the lowest\n    priority).\n(6) Otherwise,\
    \ compare the cost of this new AS external path to the ones\n    present in the\
    \ table.  Type 1 external paths are always shorter than\n    Type 2 external paths.\
    \  Type 1 external paths are compared by\n    looking at the sum of the distance\
    \ to the forwarding address and the\n    advertised Type 1 metric (X+Y).  Type\
    \ 2 external paths are compared\n    by looking at the advertised Type 2 metrics,\
    \ and then if necessary,\n    the distance to the forwarding addresses.\n    If\
    \ the new path is shorter, it replaces the present paths in the\n    routing table\
    \ entry.  If the new path is the same cost, it is added\n    to the routing table\
    \ entry's list of paths.\n16.5 Incremental updates --- summary links\nWhen a new\
    \ summary link advertisement is received, it is not necessary\nto recalculate\
    \ the entire routing table.  Call the destination described\nby the summary link\
    \ advertisement N, and let A be the area to which the\nadvertisement belongs.\n\
    Look up the routing table entry for N.  If the next hop to N is a\nvirtual link\
    \ through Area A (this means that the entry's associated area\nis the backbone,\
    \ and the listed next hop does not belong to the\nbackbone, but instead belongs\
    \ to Area A), the real next hop must again\nbe resolved.  This means running the\
    \ algorithm in Section 16.3 for\ndestination N only.\nElse, if there is an intra-area\
    \ route to destination N nothing need be\ndone (intra-area routes always take\
    \ precedence).  Otherwise, if Area A\nis the router's sole attached area, or Area\
    \ A is the backbone, the\nprocedure in Section 16.2 will have to be performed,\
    \ but only for those\nsummary link advertisements whose destination is N.  Before\
    \ this\nprocedure is performed, the present routing table entry for N should be\n\
    invalidated (but kept for comparison purposes).  If this procedure leads\nto a\
    \ virtual next hop, the algorithm in Section 16.3 will again have to\nbe performed\
    \ in order to calculate the real next hop.\nIf N's routing table entry changes,\
    \ and N is an AS boundary router, the\nAS external links will have to be reexamined\
    \ (Section 16.4).\n16.6 Incremental updates --- AS external links\nWhen a new\
    \ AS external link advertisement is received, it is not\nnecessary to recalculate\
    \ the entire routing table.  Call the destination\ndescribed by the AS external\
    \ link advertisement N.  If there is already\nan intra-area or inter-area route\
    \ to the destination, no recalculation\nis necessary (these routes take precedence).\n\
    Otherwise, the procedure in Section 16.4 will have to be performed, but\nonly\
    \ for those AS external link advertisements whose destination is N.\nBefore this\
    \ procedure is performed, the present routing table entry for\nN should be invalidated.\n\
    16.7 Events generated as a result of routing table changes\nChanges to routing\
    \ table entries sometimes cause the OSPF area border\nrouters to take additional\
    \ actions.  These routers need to act on the\nfollowing routing table changes:\n\
    o   The cost or path type of a routing table entry has changed.  If the\n    destination\
    \ described by this entry is a Network or AS boundary\n    router, and this is\
    \ not simply a change of AS external routes, new\n    summary link advertisements\
    \ may have to be generated (potentially\n    one for each attached area, including\
    \ the backbone).  See Section\n    12.4.3 for more information.  If a previously\
    \ advertised entry has\n    been deleted, or is no longer advertisable to a particular\
    \ area, the\n    advertisement must be flushed from the routing domain by setting\
    \ its\n    age to MaxAge and reflooding (see Section 14.1).\no   A routing table\
    \ entry associated with a configured virtual link has\n    changed.  The destination\
    \ of such a routing table entry is an area\n    border router.  The change indicates\
    \ a modification to the virtual\n    link's cost or viability.\n    If the entry\
    \ indicates that the area border router is newly\n    reachable (via TOS 0), the\
    \ corresponding virtual link is now\n    operational.  An Interface Up event should\
    \ be generated for the\n    virtual link, which will cause a virtual adjacency\
    \ to begin to form\n    (see Section 10.3).  At this time the virtual interface's\
    \ IP address\n    and the virtual neighbor's IP address are also calculated.\n\
    \    If the entry indicates that the area border router is no longer\n    reachable\
    \ (via TOS 0), the virtual link and its associated adjacency\n    should be destroyed.\
    \  This means an Interface Down event should be\n    generated for the associated\
    \ virtual link.\n    If the cost of the entry has changed, and there is a fully\n\
    \    established virtual adjacency, a new router links advertisement for\n   \
    \ the backbone must be originated.  This in turn may cause further\n    routing\
    \ table changes.\n16.8 Equal-cost multipath\nThe OSPF protocol maintains multiple\
    \ equal-cost routes to all\ndestinations.  This can be seen in the steps used\
    \ above to calculate the\nrouting table, and in the definition of the routing\
    \ table structure.\nEach one of the multiple routes will be of the same type (intra-area,\n\
    inter-area, type 1 external or type 2 external), cost, and will have the\nsame\
    \ associated area.  However, each route specifies a separate next hop\nand advertising\
    \ router.\nThere is no requirement that a router running OSPF keep track of all\n\
    possible equal-cost routes to a destination.  An implementation may\nchoose to\
    \ keep only a fixed number of routes to any given destination.\nThis does not\
    \ affect any of the algorithms presented in this\nspecification.\n16.9 Building\
    \ the non-zero-TOS portion of the routing table\nThe OSPF protocol can calculate\
    \ a different set of routes for each IP\nTOS (see Section 2.4).  Support for TOS-based\
    \ routing is optional.\nTOS-capable and non-TOS-capable routers can be mixed in\
    \ an OSPF routing\ndomain.  Routers not supporting TOS calculate only the TOS\
    \ 0 route to\neach destination.  These routes are then used to forward all data\n\
    traffic, regardless of the TOS indications in the data packet's IP\nheader.  A\
    \ router that does not support TOS indicates this fact to the\nother OSPF routers\
    \ by clearing the T-bit in the Options field of its\nrouter links advertisement.\n\
    The above sections detailing the routing table calculations handle the\nTOS 0\
    \ case only.  In general, for routers supporting TOS-based routing,\neach piece\
    \ of the routing table calculation must be rerun separately for\nthe non-zero\
    \ TOS values.  When calculating routes for TOS X, only TOS X\nmetrics can be used.\
    \  Any link state advertisement may specify a\nseparate cost for each TOS (a cost\
    \ for TOS 0 must always be specified).\nThe encoding of TOS in OSPF link state\
    \ advertisements is described in\nSection 12.3.\nAn advertisement can specify\
    \ that it is restricted to TOS 0 (i.e., non-\nzero TOS is not handled) by clearing\
    \ the T-bit in the link state\nadvertisement's Option field.  Such advertisements\
    \ are not used when\ncalculating routes for non-zero TOS.  For this reason, it\
    \ is possible\nthat a destination is unreachable for some non-zero TOS.  In this\
    \ case,\nthe TOS 0 path is used when forwarding packets (see Section 11.1).\n\
    The following lists the modifications needed when running the routing\ntable calculation\
    \ for a non-zero TOS value (called TOS X).  In general,\nrouters and advertisements\
    \ that do not support TOS are omitted from the\ncalculation.\nCalculating the\
    \ shortest-path tree (Section  16.1).\n    Routers that do not support TOS-based\
    \ routing should be omitted from\n    the shortest-path tree calculation.  These\
    \ routers are identified as\n    those having the T-bit reset in their router\
    \ links advertisements.\n    Such routers should never be added to the Dijktra\
    \ algorithm's\n    candidate list, nor should their router links advertisements\
    \ be\n    examined when adding the stub networks to the tree.\nCalculating the\
    \ inter-area routes (Section  16.2).\n    Inter-area paths are the concatenation\
    \ of a path to an area border\n    router with a summary link.  When calculating\
    \ TOS X routes, both\n    path components must also specify TOS X.  In other words,\
    \ only TOS X\n    paths to the area border router are examined, and the area border\n\
    \    router must be advertising a TOS X route to the destination.  Note\n    that\
    \ this means that summary link advertisements having the T-bit\n    reset in their\
    \ Options field are not considered.\nResolving virtual next hops (Section 16.3).\n\
    \    This calculation again considers the concatenation of a path to an\n    area\
    \ border router with a summary link.  As with inter-area routes,\n    only TOS\
    \ X paths to the area border router are examined, and the\n    area border router\
    \ must be advertising a TOS X route to the\n    destination.\nCalculating AS external\
    \ routes (Section 16.4).\n    This calculation considers the concatenation of\
    \ a path to a\n    forwarding address with an AS external link.  Only TOS X paths\
    \ to\n    the forwarding address are examined, and the AS boundary router must\n\
    \    be advertising a TOS X route to the destination.  Note that this\n    means\
    \ that AS external link advertisements having the T-bit reset in\n    their Options\
    \ field are not considered.\n    In addition, the advertising AS boundary router\
    \ must also be\n    reachable for its advertisements to be considered (see Section\n\
    \    16.4).  However, if the advertising router and the forwarding\n    address\
    \ are not one in the same, the advertising router need only be\n    reachable\
    \ via TOS 0.\n    [1]The graph's vertices represent either routers, transit networks,\n\
    \    or stub networks.  Since routers may belong to multiple areas, it is\n  \
    \  not possible to color the graph's vertices.\n    [2]It is possible for all\
    \ of a router's interfaces to be unnumbered\n    point-to-point links.  In this\
    \ case, an IP address must be assigned\n    to the router.  This address will\
    \ then be advertised in the router's\n    router links advertisement as a host\
    \ route.\n    [3]Note that in these cases both interfaces, the non-virtual and\
    \ the\n    virtual, would have the same IP address.\n    [4]Note that no host\
    \ route is generated for, and no IP packets can\n    be addressed to, interfaces\
    \ to unnumbered point-to-point networks.\n    This is regardless of such an interface's\
    \ state.\n    [5]It is instructive to see what happens when the Designated Router\n\
    \    for the network crashes.  Call the Designated Router for the network\n  \
    \  RT1, and the the Backup Designated Router RT2.  If router RT1\n    crashes\
    \ (or maybe its interface to the network dies), the other\n    routers on the\
    \ network will detect RT1's absence within\n    RouterDeadInterval seconds.  All\
    \ routers may not detect this at\n    precisely the same time; the routers that\
    \ detect RT1's absence\n    before RT2 does will, for a time, select RT2 to be\
    \ both Designated\n    Router and Backup Designated Router.  When RT2 detects\
    \ that RT1 is\n    gone it will move itself to Designated Router.  At this time,\
    \ the\n    remaining router having highest Router Priority will be selected as\n\
    \    Backup Designated Router.\n    [6]On point-to-point networks, the lower level\
    \ protocols indicate\n    whether the neighbor is up and running.  Likewise, existence\
    \ of the\n    neighbor on virtual links is indicated by the routing table\n  \
    \  calculation.  However, in both these cases, the Hello Protocol is\n    still\
    \ used.  This ensures that communication between the neighbors\n    is bidirectional,\
    \ and that each of the neighbors has a functioning\n    routing protocol layer.\n\
    \    [7]When the identity of the Designated Router is changing, it may be\n  \
    \  quite common for a neighbor in this state to send the router a\n    Database\
    \ Description packet; this means that there is some momentary\n    disagreement\
    \ on the Designated Router's identity.\n    [8]Note that it is possible for a\
    \ router to resynchronize any of its\n    fully established adjacencies by setting\
    \ the adjacency's state back\n    to ExStart.  This will cause the other end of\
    \ the adjacency to\n    process a Seq Number Mismatch event, and therefore to\
    \ also go back\n    to ExStart state.\n    [9]The address space of IP networks\
    \ and the address space of OSPF\n    Router IDs may overlap.  That is, a network\
    \ may have an IP address\n    which is identical (when considered as a 32-bit\
    \ number) to some\n    router's Router ID.\n    [10]It is assumed that, for two\
    \ different address ranges matching\n    the destination, one range is more specific\
    \ than the other. Non-\n    contiguous subnet masks can be configured to violate\
    \ this\n    assumption. Such subnet mask configurations cannot be handled by the\n\
    \    OSPF protocol.\n    [11]MaxAgeDiff is an architectural constant.  It indicates\
    \ the\n    maximum dispersion of ages, in seconds, that can occur for a single\n\
    \    link state instance as it is flooded throughout the routing domain.\n   \
    \ If two advertisements differ by more than this, they are assumed to\n    be\
    \ different instances of the same advertisement.  This can occur\n    when a router\
    \ restarts and loses track of its previous sequence\n    number.  See Section\
    \ 13.4 for more details.\n    [12]When two advertisements have different checksums,\
    \ they are\n    assumed to be separate instances.  This can occur when a router\n\
    \    restarts, and loses track of its previous sequence number.  In this\n   \
    \ case, since the two advertisements have the same sequence number, it\n    is\
    \ not possible to determine which link state is actually newer.  If\n    the wrong\
    \ advertisement is accepted as newer, the originating router\n    will originate\
    \ another instance.  See Section 13.4 for further\n    details.\n    [13]There\
    \ is one instance where a lookup must be done based on\n    partial information.\
    \  This is during the routing table calculation,\n    when a network links advertisement\
    \ must be found based solely on its\n    Link State ID.  The lookup in this case\
    \ is still well defined, since\n    no two network advertisements can have the\
    \ same Link State ID.\n    [14]This clause covers the case: Inter-area routes\
    \ are not\n    summarized to the backbone.  This is because inter-area routes\
    \ are\n    always associated with the backbone area.\n    [15]By keeping more\
    \ information in the routing table, it is possible\n    for an implementation\
    \ to recalculate the shortest path tree only for\n    a single area.  In fact,\
    \ there are incremental algorithms that allow\n    an implementation to recalculate\
    \ only a portion of the shortest path\n    tree [BBN].  These algorithms are beyond\
    \ the scope of this\n    specification.\n    [16]This is how the Link state request\
    \ list is emptied, which\n    eventually causes the neighbor state to transition\
    \ to Full.  See\n    Section 10.9 for more details.\n    [17]It should be a relatively\
    \ rare occurrence for an advertisement's\n    age to reach MaxAge.  Usually, the\
    \ advertisement will be replaced by\n    a more recent instance before it ages\
    \ out.\n    [18]Only the TOS 0 routes are important here.  This is because all\n\
    \    routing protocol packets are sent with TOS= 0.  See Appendix A.\n    [19]It\
    \ may be the case that paths to certain destinations do not\n    vary based on\
    \ TOS.  For these destinations, the routing calculation\n    need not be repeated\
    \ for each TOS value.  In addition, there need\n    only be a single routing table\
    \ entry for these destinations (instead\n    of a separate entry for each TOS\
    \ value).\n    [20]Strictly speaking, because of equal-cost multipath, the\n \
    \   algorithm does not create a tree.  We continue to use the \"tree\"\n    terminology\
    \ because that is what occurs most often in the existing\n    literature.\n  \
    \  [21]This means that before data traffic will flow between a pair of\n    neighboring\
    \ routers, their link state databases must be\n    synchronized.  Before synchronization\
    \ (neighbor state < Full), a\n    router will not include the connection to its\
    \ neighbor in its link\n    state advertisements.\n    [22]As a result of this\
    \ clause, when a virtual link exists between\n    the calculating router and an\
    \ AS boundary router, the intra-area\n    path through the virtual link's transit\
    \ area is always preferred\n    over the virtual link itself.\n    [23]Note the\
    \ similarity between this procedure and the calculation\n    of inter-area routes\
    \ by a router internal to Area A.\n    [24]When the forwarding address is non-zero,\
    \ it should point to a\n    router belonging to another Autonomous System.  See\
    \ Section 12.4.4\n    for more details.\nReferences\n[BBN]       McQuillan, J.M.,\
    \ Richer, I.  and Rosen, E.C.  ARPANET\n            Routing Algorithm Improvements.\
    \  BBN Technical Report 3803,\n            April 1978.\n[DEC]       Digital Equipment\
    \ Corporation.  Information processing\n            systems -- Data communications\
    \ -- Intermediate System to\n            Intermediate System Intra-Domain Routing\
    \ Protocol.  October\n            1987.\n[McQuillan] McQuillan, J.  et.al.  The\
    \ New Routing Algorithm for the\n            Arpanet.  IEEE Transactions on Communications,\
    \ May 1980.\n[Perlman]   Perlman, Radia.  Fault-Tolerant Broadcast of Routing\n\
    \            Information.  Computer Networks, Dec.  1983.\n[RFC 791]   Postel,\
    \ Jon.  Internet Protocol.  September 1981\n[RFC 944]   ANSI X3S3.3 86-60.  Final\
    \ Text of DIS 8473, Protocol for\n            Providing the Connectionless-mode\
    \ Network Service.  March\n            1986.\n[RFC 1060]  Reynolds, J.  and Postel,\
    \ J.  Assigned Numbers.  March 1990.\n[RFC 1112]  Deering, S.E.  Host extensions\
    \ for IP multicasting.  May\n            1988.\n[RFC 1131]  Moy, J.  The OSPF\
    \ Specification.  October 1989.\n[RS-85-153] Leiner, Dr.  Barry M., et.al.  The\
    \ DARPA Internet Protocol\n            Suite.  DDN Protocol Handbook, April 1985.\n\
    A. OSPF data formats\nThis appendix describes the format of OSPF protocol packets\
    \ and OSPF\nlink state advertisements.  The OSPF protocol runs directly over the\
    \ IP\nnetwork layer.  Before any data formats are described, the details of\n\
    the OSPF encapsulation are explained.\nNext the OSPF options field is described.\
    \  This field describes various\ncapabilities that may or may not be supported\
    \ by pieces of the OSPF\nrouting domain.  It is contained both in OSPF protocol\
    \ packets and in\nOSPF link state advertisements.\nOSPF packet formats are detailed\
    \ in Section A.3.  A description of OSPF\nlink state advertisements appears in\
    \ Section A.4.\nA.1 Encapsulation of OSPF packets\nOSPF runs directly over the\
    \ Internet Protocol's network layer.  OSPF\npackets are therefore encapsulated\
    \ solely by IP and local network\nheaders.\nOSPF does not define a way to fragment\
    \ its protocol packets, and depends\non IP fragmentation when transmitting packets\
    \ larger than the network\nMTU.  The OSPF packet types that are likely to be large\
    \ (Database\nDescription Packets, Link State Request, Link State Update, and Link\n\
    State Acknowledgment packets) can usually be split into several separate\nprotocol\
    \ packets, without loss of functionality.  This is recommended;\nIP fragmentation\
    \ should be avoided whenever possible.  Using this\nreasoning, an attempt should\
    \ be made to limit the sizes of packets sent\nover virtual links to 576 bytes.\
    \  However, if necessary, the length of\nOSPF packets can be up to 65,535 bytes\
    \ (including the IP header).\nThe other important features of OSPF's IP encapsulation\
    \ are:\no   Use of IP multicast.  Some OSPF messages are multicast, when sent\n\
    \    over multi-access networks.  Two distinct IP multicast addresses are\n  \
    \  used.  Packets destined to these multicast addresses should never be\n    forwarded.\
    \  Such packets are meant to travel a single hop only.  To\n    ensure that these\
    \ packets will not travel multiple hops, their IP\n    TTL must be set to 1.\n\
    \    AllSPFRouters\n        This multicast address has been assigned the value\
    \ 224.0.0.5.\n        All routers running OSPF should be prepared to receive packets\n\
    \        sent to this address.  Hello packets are always sent to this\n      \
    \  destination.  Also, certain protocol packets are sent to this\n        address\
    \ during the flooding procedure.\n    AllDRouters\n        This multicast address\
    \ has been assigned the value 224.0.0.6.\n        Both the Designated Router and\
    \ Backup Designated Router must be\n        prepared to receive packets destined\
    \ to this address.  Certain\n        packets are sent to this address during the\
    \ flooding procedure.\no   OSPF is IP protocol number 89.  This number has been\
    \ registered with\n    the Network Information Center.  IP protocol number assignments\
    \ are\n    documented in [RFC 1060].\no   Routing protocol packets are sent with\
    \ IP TOS of 0.  The OSPF\n    protocol supports TOS-based routing.  Routes to\
    \ any particular\n    destination may vary based on TOS.  However, all OSPF routing\n\
    \    protocol packets are sent with the DTR bits in the IP header's TOS\n    field\
    \ (see [RFC 791]) set to 0.\no   Routing protocol packets are sent with IP precedence\
    \ set to\n    Internetwork Control.  OSPF protocol packets should be given\n \
    \   precedence over regular IP data traffic, in both sending and\n    receiving.\
    \  Setting the IP precedence field in the IP header to\n    Internetwork Control\
    \ [RFC 791] may help implement this objective.\nA.2 The options field\nThe OSPF\
    \ options field is present in OSPF Hello packets, Database\nDescription packets\
    \ and all link state advertisements.  The options\nfield enables OSPF routers\
    \ to support (or not support) optional\ncapabilities, and to communicate their\
    \ capability level to other OSPF\nrouters.  Through this mechanism routers of\
    \ differing capabilities can\nbe mixed within an OSPF routing domain.\nWhen used\
    \ in Hello packets, the options field allows a router to reject\na neighbor because\
    \ of a capability mismatch.  Alternatively, when\ncapabilities are exchanged in\
    \ Database Description packets a router can\nchoose not to forward certain LSA\
    \ types to a neighbor because of its\nreduced functionality.  Lastly, listing\
    \ capabilities in LSAs allows\nrouters to route traffic around reduced functionality\
    \ routers, by\nexcluding them from parts of the routing table calculation.\nTwo\
    \ capabilities are currently defined.  For each capability, the effect\nof the\
    \ capability's appearance (or lack of appearance) in Hello packets,\nDatabase\
    \ Description packets and link state advertisements is specified\nbelow.  For\
    \ example, the external routing capability (below called the\nE-bit) has meaning\
    \ only in OSPF Hello Packets.  Routers should reset\n(i.e.  clear) the unassigned\
    \ part of the capability field when sending\nHello packets or Database Description\
    \ packets and when originating link\nstate advertisements.\nAdditional capabilities\
    \ may be assigned in the future.  Routers\nencountering unrecognized capabilities\
    \ in received Hello Packets,\nDatabase Description packets or link state advertisements\
    \ should ignore\nthe capability and process the packet/advertisement normally.\n\
    \                           +-+-+-+-+-+-+-+-+\n                           | |\
    \ | | | | |E|T|\n                           +-+-+-+-+-+-+-+-+\n              \
    \             The options field\nT-bit\n    This describes the router's TOS capability.\
    \  If the T-bit is reset,\n    then the router supports only a single TOS (TOS\
    \ 0).  Such a router\n    is also said to be incapable of TOS-routing.  The absence\
    \ of the T-\n    bit in a router links advertisement causes the router to be skipped\n\
    \    when building a non-zero TOS shortest-path tree (see Section 16.9).\n   \
    \ In other words, routers incapable of TOS routing will be avoided as\n    much\
    \ as possible when forwarding data traffic requesting a non-zero\n    TOS.  The\
    \ absence of the T-bit in a summary link advertisement or an\n    AS external\
    \ link advertisement indicates that the advertisement is\n    describing a TOS\
    \ 0 route only (and not routes for non-zero TOS).\nE-bit\n    AS external link\
    \ advertisements are not flooded into/through OSPF\n    stub areas (see Section\
    \ 3.6).  The E-bit ensures that all members of\n    a stub area agree on that\
    \ area's configuration.  The E-bit is\n    meaningful only in OSPF Hello packets.\
    \  When the E-bit is reset in\n    the Hello packet sent out a particular interface,\
    \ it means that the\n    router will neither send nor receive AS external link\
    \ state\n    advertisements on that interface (in other words, the interface\n\
    \    connects to a stub area).  Two routers will not become neighbors\n    unless\
    \ they agree on the state of the E-bit.\nA.3 OSPF Packet Formats\nThere are five\
    \ distinct OSPF packet types.  All OSPF packet types begin\nwith a standard 24\
    \ byte header.  This header is described first.  Each\npacket type is then described\
    \ in a succeeding section.  In these\nsections each packet's division into fields\
    \ is displayed, and then the\nfield definitions are enumerated.\nAll OSPF packet\
    \ types (other than the OSPF Hello packets) deal with\nlists of link state advertisements.\
    \  For example, Link State Update\npackets implement the flooding of advertisements\
    \ throughout the OSPF\nrouting domain.  Because of this, OSPF protocol packets\
    \ cannot be parsed\nunless the format of link state advertisements is also understood.\
    \  The\nformat of Link state advertisements is described in Section A.4.\nThe\
    \ receive processing of OSPF packets is detailed in Section 8.2.  The\nsending\
    \ of OSPF packets is explained in Section 8.1.\nA.3.1 The OSPF packet header\n\
    Every OSPF packet starts with a common 24 byte header.  This header\ncontains\
    \ all the necessary information to determine whether the packet\nshould be accepted\
    \ for further processing.  This determination is\ndescribed in Section 8.2 of\
    \ the specification.\n    0                   1                   2          \
    \         3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |   Version #   |     Type      |         Packet length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Router ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Area ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Checksum            |             Autype            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    Version #\n    The OSPF version number.  This specification documents version\
    \ 2 of\n    the protocol.\nType\n    The OSPF packet types are as follows.  The\
    \ format of each of these\n    packet types is described in a succeeding section.\n\
    \                        Type   Description\n                        ________________________________\n\
    \                        1      Hello\n                        2      Database\
    \ Description\n                        3      Link State Request\n           \
    \             4      Link State Update\n                        5      Link State\
    \ Acknowledgment\nPacket length\n    The length of the protocol packet in bytes.\
    \  This length includes\n    the standard OSPF header.\nRouter ID\n    The Router\
    \ ID of the packet's source.  In OSPF, the source and\n    destination of a routing\
    \ protocol packet are the two ends of an\n    (potential) adjacency.\nArea ID\n\
    \    A 32 bit number identifying the area that this packet belongs to.\n    All\
    \ OSPF packets are associated with a single area.  Most travel a\n    single hop\
    \ only.  Packets travelling over a virtual link are\n    labelled with the backbone\
    \ area ID of 0.\nChecksum\n    The standard IP checksum of the entire contents\
    \ of the packet,\n    excluding the 64-bit authentication field.  This checksum\
    \ is\n    calculated as the 16-bit one's complement of the one's complement\n\
    \    sum of all the 16-bit words in the packet, excepting the\n    authentication\
    \ field.  If the packet's length is not an integral\n    number of 16-bit words,\
    \ the packet is padded with a byte of zero\n    before checksumming.\nAuType\n\
    \    Identifies the authentication scheme to be used for the packet.\n    Authentication\
    \ is discussed in Appendix E of the specification.\n    Consult Appendix E for\
    \ a list of the currently defined\n    authentication types.\nAuthentication\n\
    \    A 64-bit field for use by the authentication scheme.\nA.3.2 The Hello packet\n\
    Hello packets are OSPF packet type 1.  These packets are sent\nperiodically on\
    \ all interfaces (including virtual links) in order to\nestablish and maintain\
    \ neighbor relationships.  In addition, Hellos are\nmulticast on those physical\
    \ networks having a multicast or broadcast\ncapability, enabling dynamic discovery\
    \ of neighboring routers.\nAll routers connected to a common network must agree\
    \ on certain\nparameters (network mask, hello and dead intervals).  These parameters\n\
    are included in Hello packets, so that differences can inhibit the\nforming of\
    \ neighbor relationships.  A detailed explanation of the\nreceive processing for\
    \ Hello packets is presented in Section 10.5.  The\nsending of Hello packets is\
    \ covered in Section 9.5.\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version #   |       1       |         Packet length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Router ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Area ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Checksum            |             Autype            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Network Mask                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         HelloInt              |    Options    |    Rtr Pri    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           DeadInt                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Designated Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Backup Designated Router                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Neighbor                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nNetwork\
    \ mask\n    The network mask associated with this interface.  For example, if\n\
    \    the interface is to a class B network whose third byte is used for\n    subnetting,\
    \ the network mask is 0xffffff00.\nOptions\n    The optional capabilities supported\
    \ by the router, as documented in\n    Section A.2.\nHelloInt\n    The number\
    \ of seconds between this router's Hello packets.\nRtr Pri\n    This router's\
    \ Router Priority.  Used in (Backup) Designated Router\n    election.  If set\
    \ to 0, the router will be ineligible to become\n    (Backup) Designated Router.\n\
    Deadint\n    The number of seconds before declaring a silent router down.\nDesignated\
    \ Router\n    The identity of the Designated Router for this network, in the view\n\
    \    of the advertising router.  The Designated Router is identified here\n  \
    \  by its IP interface address on the network.  Set to 0 if there is no\n    Designated\
    \ Router.\nBackup Designated Router\n    The identity of the Backup Designated\
    \ Router for this network, in\n    the view of the advertising router.  The Backup\
    \ Designated Router is\n    identified here by its IP interface address on the\
    \ network.  Set to\n    0 if there is no backup Designated Router.\nNeighbor\n\
    \    The Router IDs of each router from whom valid Hello packets have\n    been\
    \ seen recently on the network.  Recently means in the last\n    DeadInt seconds.\n\
    A.3.3 The Database Description packet\nDatabase Description packets are OSPF packet\
    \ type 2.  These packets are\nexchanged when an adjacency is being initialized.\
    \  They describe the\ncontents of the topological database.  Multiple packets\
    \ may be used to\ndescribe the database.  For this purpose a poll-response procedure\
    \ is\nused.  One of the routers is designated to be master, the other a slave.\n\
    The master sends Database Description packets (polls) which are\nacknowledged\
    \ by Database Description packets sent by the slave\n(responses).  The responses\
    \ are linked to the polls via the packets'\nsequence numbers.\nThe format of the\
    \ Database Description packet is very similar to both\nthe Link State Request\
    \ and Link State Acknowledgment packets.  The main\npart of all three is a list\
    \ of items, each item describing a piece of\nthe topological database.  The sending\
    \ of Database Description Packets\nis documented in Section 10.8.  The reception\
    \ of Database Description\npackets is documented in Section 10.6.\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version #   |       2       |         Packet length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Router ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Area ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Checksum            |             Autype            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |       0       |    Options    |0|0|0|0|0|I|M|MS\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     DD sequence number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                                                            -+\n   |        \
    \                     A                                 |\n   +-             \
    \    Link State Advertisement                    -+\n   |                    \
    \       Header                              |\n   +-                         \
    \                                    -+\n   |                                \
    \                               |\n   +-                                     \
    \                        -+\n   |                                            \
    \                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\n0   These\
    \ fields are reserved.  They must be 0.\nOptions\n    The optional capabilities\
    \ supported by the router, as documented in\n    Section A.2.\nI-bit\n    The\
    \ Init bit.  When set to 1, this packet is the first in the\n    sequence of database\
    \ descriptions.\nM-bit\n    The More bit.  When set to 1, it indicates that more\
    \ database\n    descriptions are to follow.\nMS-bit\n    The Master/Slave bit.\
    \  When set to 1, it indicates that the router\n    is the master during the database\
    \ exchange process.  Otherwise, the\n    router is the slave.\nDD sequence number\n\
    \    Used to sequence the collection of database description packets.\n    The\
    \ initial value (indicated by the Init bit being set) should be\n    unique. \
    \ The sequence number then increments until the complete\n    database description\
    \ has been sent.\nThe rest of the packet consists of a (possibly partial) list\
    \ of the\ntopological database's pieces.  Each link state advertisement in the\n\
    database is described by its link state header.  The link state header\nis documented\
    \ in Section A.4.1.  It contains all the information\nrequired to uniquely identify\
    \ both the advertisement and the\nadvertisement's current instance.\nA.3.4 The\
    \ Link State Request packet\nLink State Request packets are OSPF packet type 3.\
    \  After exchanging\nDatabase Description packets with a neighboring router, a\
    \ router may\nfind that parts of its topological database are out of date.  The\
    \ Link\nState Request packet is used to request the pieces of the neighbor's\n\
    database that are more up to date.  Multiple Link State Request packets\nmay need\
    \ to be used.  The sending of Link State Request packets is the\nlast step in\
    \ bringing up an adjacency.\nA router that sends a Link State Request packet has\
    \ in mind the precise\ninstance of the database pieces it is requesting (defined\
    \ by LS sequence\nnumber, LS checksum, and LS age).  It may receive even more\
    \ recent\ninstances in response.\nThe sending of Link State Request packets is\
    \ documented in Section 10.9.\nThe reception of Link State Request packets is\
    \ documented in Section\n10.7.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version #   |       3       |         Packet length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Router ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Area ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Checksum            |             Autype            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          LS type                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Link State ID                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Advertising Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nEach advertisement\
    \ requested is specified by its LS type, Link State ID,\nand Advertising Router.\
    \  This uniquely identifies the advertisement, but\nnot its instance.  Link State\
    \ Request packets are understood to be\nrequests for the most recent instance\
    \ (whatever that might be).\nA.3.5 The Link State Update packet\nLink State Update\
    \ packets are OSPF packet type 4.  These packets\nimplement the flooding of link\
    \ state advertisements.  Each Link State\nUpdate packet carries a collection of\
    \ link state advertisements one hop\nfurther from its origin.  Several link state\
    \ advertisements may be\nincluded in a single packet.\nLink State Update packets\
    \ are multicast on those physical networks that\nsupport multicast/broadcast.\
    \  In order to make the flooding procedure\nreliable, flooded advertisements are\
    \ acknowledged in Link State\nAcknowledgment packets.  If retransmission of certain\
    \ advertisements is\nnecessary, the retransmitted advertisements are always carried\
    \ by\nunicast Link State Update packets.  For more information on the reliable\n\
    flooding of link state advertisements, consult Section 13.\n    0            \
    \       1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version #   |       4       |         Packet length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Router ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Area ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Checksum            |             Autype            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      # advertisements                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                                                           +-+\n   |        \
    \          Link state advertisements                    |\n   +-             \
    \                                               +-+\n   |                    \
    \          ...                              |\n# advertisements\n    The number\
    \ of link state advertisements included in this update.\nThe body of the Link\
    \ State Update packet consists of a list of link\nstate advertisements.  Each\
    \ advertisement begins with a common 20 byte\nheader, the link state advertisement\
    \ header.  This header is described\nin Section A.4.1.  Otherwise, the format\
    \ of each of the five types of\nlink state advertisements is different.  Their\
    \ formats are described in\nSection A.4.\nA.3.6 The Link State Acknowledgment\
    \ packet\nLink State Acknowledgment Packets are OSPF packet type 5.  To make the\n\
    flooding of link state advertisements reliable, flooded advertisements\nare explicitly\
    \ acknowledged.  This acknowledgment is accomplished\nthrough the sending and\
    \ receiving of Link State Acknowledgment packets.\nMultiple link state advertisements\
    \ can be acknowledged in a single\npacket.\nDepending on the state of the sending\
    \ interface and the source of the\nadvertisements being acknowledged, a Link State\
    \ Acknowledgment packet is\nsent either to the multicast address AllSPFRouters,\
    \ to the multicast\naddress AllDRouters, or as a unicast.  The sending of Link\
    \ State\nAcknowledgement packets is documented in Section 13.5.  The reception\
    \ of\nLink State Acknowledgement packets is documented in Section 13.7.\nThe format\
    \ of this packet is similar to that of the Data Description\npacket.  The body\
    \ of both packets is simply a list of link state\nadvertisement headers.\n   \
    \ 0                   1                   2                   3\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version #   |       5       |         Packet length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Router ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Area ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Checksum            |             Autype            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Authentication                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                                                            -+\n   |        \
    \                     A                                 |\n   +-             \
    \    Link State Advertisement                    -+\n   |                    \
    \       Header                              |\n   +-                         \
    \                                    -+\n   |                                \
    \                               |\n   +-                                     \
    \                        -+\n   |                                            \
    \                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nEach acknowledged\
    \ link state advertisement is described by its link\nstate header.  The link state\
    \ header is documented in Section A.4.1.  It\ncontains all the information required\
    \ to uniquely identify both the\nadvertisement and the advertisement's current\
    \ instance.\nA.4 Link state advertisement formats\nThere are five distinct types\
    \ of link state advertisements.  Each link\nstate advertisement begins with a\
    \ standard 20-byte link state header.\nThis header is explained in Section A.4.1.\
    \  Succeeding sections then\ndiagram the separate link state advertisement types.\n\
    Each link state advertisement describes a piece of the OSPF routing\ndomain. \
    \ Every router originates a router links advertisement.  In\naddition, whenever\
    \ the router is elected Designated Router, it\noriginates a network links advertisement.\
    \  Other types of link state\nadvertisements may also be originated (see Section\
    \ 12.4).  All link\nstate advertisements are then flooded throughout the OSPF\
    \ routing\ndomain.  The flooding algorithm is reliable, ensuring that all routers\n\
    have the same collection of link state advertisements.  (See Section 13\nfor more\
    \ information concerning the flooding algorithm).  This\ncollection of advertisements\
    \ is called the link state (or topological)\ndatabase.\nFrom the link state database,\
    \ each router constructs a shortest path\ntree with itself as root.  This yields\
    \ a routing table (see Section 11).\nFor the details of the routing table build\
    \ process, see Section 16.\nA.4.1 The Link State Advertisement header\nAll link\
    \ state advertisements begin with a common 20 byte header.  This\nheader contains\
    \ enough information to uniquely identify the\nadvertisement (LS type, Link State\
    \ ID, and Advertising Router).\nMultiple instances of the link state advertisement\
    \ may exist in the\nrouting domain at the same time.  It is then necessary to\
    \ determine\nwhich instance is more recent.  This is accomplished by examining\
    \ the LS\nage, LS sequence number and LS checksum fields that are also contained\n\
    in the link state advertisement header.\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            LS age             |    Options    |    LS type    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Link State ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Advertising Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     LS sequence number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         LS checksum           |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    LS age\n    The time in seconds since the link state advertisement was\n    originated.\n\
    Options\n    The optional capabilities supported by the described portion of the\n\
    \    routing domain.  OSPF's optional capabilities are documented in\n    Section\
    \ A.2.\nLS type\n    The type of the link state advertisement.  Each link state\
    \ type has\n    a separate advertisement format.  The link state types are as\n\
    \    follows (see Section 12.1.3 for further explanation):\n                 \
    \     LS Type   Description\n                      ___________________________________\n\
    \                      1         Router links\n                      2       \
    \  Network links\n                      3         Summary link (IP network)\n\
    \                      4         Summary link (ASBR)\n                      5\
    \         AS external link\nLink State ID\n    This field identifies the portion\
    \ of the internet environment that\n    is being described by the advertisement.\
    \  The contents of this field\n    depend on the advertisement's LS type.  For\
    \ example, in network\n    links advertisements the Link State ID is set to the\
    \ IP interface\n    address of the network's Designated Router (from which the\
    \ network's\n    IP address can be derived).  The Link State ID is further discussed\n\
    \    in Section 12.1.4.\nAdvertising Router\n    The Router ID of the router that\
    \ originated the link state\n    advertisement.  For example, in network links\
    \ advertisements this\n    field is set to the Router ID of the network's Designated\
    \ Router.\nLS sequence number\n    Detects old or duplicate link state advertisements.\
    \  Successive\n    instances of a link state advertisement are given successive\
    \ LS\n    sequence numbers.  See Section 12.1.6 for more details.\nLS checksum\n\
    \    The Fletcher checksum of the complete contents of the link state\n    advertisement.\
    \  See Section 12.1.7 for more details.\nlength\n    The length in bytes of the\
    \ link state advertisement.  This includes\n    the 20 byte link state header.\n\
    A.4.2 Router links advertisements\nRouter links advertisements are the Type 1\
    \ link state advertisements.\nEach router in an area originates a router links\
    \ advertisement.  The\nadvertisement describes the state and cost of the router's\
    \ links (or\ninterfaces) to the area.  All of the router's links to the area must\
    \ be\ndescribed in a single router links advertisement.  For details\nconcerning\
    \ the construction of router links advertisements, see Section\n12.4.1.\nIn router\
    \ links advertisements, the Link State ID field is set to the\nrouter's OSPF Router\
    \ ID.  The T-bit is set in the advertisement's Option\nfield if and only if the\
    \ router is able to calculate a separate set of\nroutes for each IP TOS.  Router\
    \ links advertisements are flooded\nthroughout a single area only.\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            LS age             |     Options   |       1       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Link State ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Advertising Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     LS sequence number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         LS checksum           |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0    |E|B|        0      |            # links            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Link ID                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Link Data                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     # TOS     |        TOS 0 metric           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      TOS      |        0      |            metric             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      TOS      |        0      |            metric             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Link ID                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Link Data                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nbit E\n\
    \    When set, the router is an AS boundary router (E is for external)\nbit B\n\
    \    When set, the router is an area border router (B is for border)\n# links\n\
    \    The number of router links described by this advertisement.  This\n    must\
    \ be the total collection of router links to the area.\nThe following fields are\
    \ used to describe each router link.  Each router\nlink is typed (see the below\
    \ Type field).  The type field indicates the\nkind of link being described.  It\
    \ may be a link to a transit network, to\nanother router or to a stub network.\
    \  The values of all the other fields\ndescribing a router link depend on the\
    \ link's type.  For example, each\nlink has an associated 32-bit data field. \
    \ For links to stub networks\nthis field specifies the network's IP address mask.\
    \  For the other link\ntypes the Link Data specifies the router's associated IP\
    \ interface\naddress.\nType\n    A quick description of the router link.  One\
    \ of the following.  Note\n    that host routes are classified as links to stub\
    \ networks whose\n    network mask is 0xffffffff.\n               Type   Description\n\
    \               __________________________________________________\n         \
    \      1      Point-to-point connection to another router\n               2  \
    \    Connection to a transit network\n               3      Connection to a stub\
    \ network\n               4      Virtual link\nLink ID\n    Identifies the object\
    \ that this router link connects to.  Value\n    depends on the link's type. \
    \ When connecting to an object that also\n    originates a link state advertisement\
    \ (i.e., another router or a\n    transit network) the Link ID is equal to the\
    \ other advertisement's\n    Link State ID.  This provides the key for looking\
    \ up said\n    advertisement in the link state database.  See Section 12.2 for\
    \ more\n    details.\n                     Type   Link ID\n                  \
    \   ______________________________________\n                     1      Neighboring\
    \ router's ID\n                     2      IP address of Designated Router\n \
    \                    3      IP network/subnet number\n                     4 \
    \     Neighboring router's ID\nLink Data\n    Contents again depend on the link's\
    \ Type field.  For connections to\n    stub network, it specifies the network\
    \ mask.  For the other link\n    types it specifies the router's associated IP\
    \ interface address.\n    This latter piece of information is needed during the\
    \ routing table\n    build process, when calculating the IP address of the next\
    \ hop.  See\n    Section 16.1.1 for more details.\n#metrics\n    The number of\
    \ different TOS metrics given for this link, not\n    counting the required metric\
    \ for TOS 0.  For example, if no\n    additional TOS metrics are given, this field\
    \ should be set to 0.\nTOS 0 metric\n    The cost of using this router link for\
    \ TOS 0.\nFor each link, separate metrics may be specified for each Type of\n\
    Service (TOS).  The metric for TOS 0 must always be included, and was\ndiscussed\
    \ above.  Metrics for non-zero TOS are described below.  The\nencoding of TOS\
    \ in OSPF link state advertisements is described in\nSection 12.3.  Note that\
    \ the cost for non-zero TOS values that are not\nspecified defaults to the TOS\
    \ 0 cost.  Metrics must be listed in order\nof increasing TOS encoding.  For example,\
    \ the metric for TOS 16 must\nalways follow the metric for TOS 8 when both are\
    \ specified.\nTOS IP type of service that this metric refers to.  The encoding\
    \ of TOS\n    in OSPF link state advertisements is described in Section 12.3.\n\
    metric\n    The cost of using this outbound router link, for traffic of the\n\
    \    specified TOS.\nA.4.3 Network links advertisements\nNetwork links advertisements\
    \ are the Type 2 link state advertisements.\nA network links advertisement is\
    \ originated for each transit network in\nthe area.  A transit network is a multi-access\
    \ network that has more\nthan one attached router.  The network links advertisement\
    \ is originated\nby the network's Designated Router.  The advertisement describes\
    \ all\nrouters attached to the network, including the Designated Router itself.\n\
    The advertisement's Link State ID field lists the IP interface address\nof the\
    \ Designated Router.\nThe distance from the network to all attached routers is\
    \ zero, for all\ntypes of service.  This is why the TOS and metric fields need\
    \ not be\nspecified in the network links advertisement.  For details concerning\n\
    the construction of network links advertisements, see Section 12.4.2.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            LS age             |      Options  |      2        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Link State ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Advertising Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     LS sequence number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         LS checksum           |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Network Mask                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Attached Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nNetwork\
    \ Mask\n    The IP address mask for the network.  For example, a class A network\n\
    \    would have the mask 0xff000000.\nAttached Router\n    The Router IDs of each\
    \ of the routers attached to the network.\n    Actually, only those routers that\
    \ are fully adjacent to the\n    Designated Router are listed.  The Designated\
    \ Router includes itself\n    in this list.  The number of routers included can\
    \ be deduced from\n    the link state advertisement's length field.\nA.4.4 Summary\
    \ link advertisements\nSummary link advertisements are the Type 3 and 4 link state\n\
    advertisements.  These advertisements are originated by area border\nrouters.\
    \  A separate summary link advertisement is made for each\ndestination (known\
    \ to the router) which belongs to the AS, yet is\noutside the area.  For details\
    \ concerning the construction of summary\nlink advertisements, see Section 12.4.3.\n\
    Type 3 link state advertisements are used when the destination is an IP\nnetwork.\
    \  In this case the advertisement's Link State ID field is an IP\nnetwork number.\
    \  When the destination is an AS boundary router, a Type 4\nadvertisement is used,\
    \ and the Link State ID field is the AS boundary\nrouter's OSPF Router ID.  (To\
    \ see why it is necessary to advertise the\nlocation of each ASBR, consult Section\
    \ 16.4.)  Other than the difference\nin the Link State ID field, the format of\
    \ Type 3 and 4 link state\nadvertisements is identical.\nFor stub areas, type\
    \ 3 summary link advertisements can also be used to\ndescribe a (per-area) default\
    \ route.  Default summary routes are used in\nstub areas instead of flooding a\
    \ complete set of external routes.  When\ndescribing a default summary route,\
    \ the advertisement's Link State ID is\nalways set to DefaultDestination (0.0.0.0)\
    \ and the Network Mask is set\nto 0.0.0.0.\nSeparate costs may be advertised for\
    \ each IP Type of Service.  The\nencoding of TOS in OSPF link state advertisements\
    \ is described in\nSection 12.3.  Note that the cost for TOS 0 must be included,\
    \ and is\nalways listed first.  If the T-bit is reset in the advertisement's\n\
    Option field, only a route for TOS 0 is described by the advertisement.\nOtherwise,\
    \ routes for the other TOS values are also described; if a cost\nfor a certain\
    \ TOS is not included, its cost defaults to that specified\nfor TOS 0.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            LS age             |     Options   |    3 or 4     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Link State ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Advertising Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     LS sequence number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         LS checksum           |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Network Mask                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     TOS       |                  metric                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nNetwork\
    \ Mask\n    For Type 3 link state advertisements, this indicates the\n    destination's\
    \ IP network mask.  For example, when advertising the\n    location of a class\
    \ A network the value 0xff000000 would be used.\n    This field is not meaningful\
    \ and must be zero for Type 4 link state\n    advertisements.\nFor each specified\
    \ type of service, the following fields are defined.\nThe number of TOS routes\
    \ included can be calculated from the link state\nadvertisement's length field.\
    \  Values for TOS 0 must be specified; they\nare listed first.  Other values must\
    \ be listed in order of increasing\nTOS encoding.  For example, the cost for TOS\
    \ 16 must always follow the\ncost for TOS 8 when both are specified.\nTOS The\
    \ Type of Service that the following cost concerns.  The encoding\n    of TOS\
    \ in OSPF link state advertisements is described in Section\n    12.3.\nmetric\n\
    \    The cost of this route.  Expressed in the same units as the\n    interface\
    \ costs in the router links advertisements.\nA.4.5 AS external link advertisements\n\
    AS external link advertisements are the Type 5 link state\nadvertisements.  These\
    \ advertisements are originated by AS boundary\nrouters.  A separate advertisement\
    \ is made for each destination (known\nto the router) which is external to the\
    \ AS.  For details concerning the\nconstruction of AS external link advertisements,\
    \ see Section 12.4.3.\nAS external link advertisements usually describe a particular\
    \ external\ndestination.  For these advertisements the Link State ID field specifies\n\
    an IP network number.  AS external link advertisements are also used to\ndescribe\
    \ a default route.  Default routes are used when no specific\nroute exists to\
    \ the destination.  When describing a default route, the\nLink State ID is always\
    \ set to DefaultDestination (0.0.0.0) and the\nNetwork Mask is set to 0.0.0.0.\n\
    Separate costs may be advertised for each IP Type of Service.  The\nencoding of\
    \ TOS in OSPF link state advertisements is described in\nSection 12.3.  Note that\
    \ the cost for TOS 0 must be included, and is\nalways listed first.  If the T-bit\
    \ is reset in the advertisement's\nOption field, only a route for TOS 0 is described\
    \ by the advertisement.\nOtherwise, routes for the other TOS values are also described;\
    \ if a cost\nfor a certain TOS is not included, its cost defaults to that specified\n\
    for TOS 0.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            LS age             |     Options   |      5        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Link State ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Advertising Router                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     LS sequence number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         LS checksum           |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Network Mask                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |E|    TOS      |                  metric                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Forwarding address                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      External Route Tag                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              ...                              |\nNetwork\
    \ Mask\n    The IP network mask for the advertised destination.  For example,\n\
    \    when advertising a class A network the mask 0xff000000 would be\n    used.\n\
    For each specified type of service, the following fields are defined.\nThe number\
    \ of TOS routes included can be calculated from the link state\nadvertisement's\
    \ length field.  Values for TOS 0 must be specified; they\nare listed first. \
    \ Other values must be listed in order of increasing\nTOS encoding.  For example,\
    \ the cost for TOS 16 must always follow the\ncost for TOS 8 when both are specified.\n\
    bit E\n    The type of external metric.  If bit E is set, the metric specified\n\
    \    is a Type 2 external metric.  This means the metric is considered\n    larger\
    \ than any link state path.  If bit E is zero, the specified\n    metric is a\
    \ Type 1 external metric.  This means that is is\n    comparable directly (without\
    \ translation) to the link state metric.\nForwarding address\n    Data traffic\
    \ for the advertised destination will be forwarded to\n    this address.  If the\
    \ Forwarding address is set to 0.0.0.0, data\n    traffic will be forwarded instead\
    \ to the advertisement's originator\n    (i.e., the responsible AS boundary router).\n\
    TOS The Type of Service that the following cost concerns.  The encoding\n    of\
    \ TOS in OSPF link state advertisements is described in Section\n    12.3.\nmetric\n\
    \    The cost of this route.  Interpretation depends on the external type\n  \
    \  indication (bit E above).\nExternal Route Tag\n    A 32-bit field attached\
    \ to each external route.  This is not used by\n    the OSPF protocol itself.\
    \  It may be used to communicate information\n    between AS boundary routers;\
    \ the precise nature of such information\n    is outside the scope of this specification.\n\
    B. Architectural Constants\nSeveral OSPF protocol parameters have fixed architectural\
    \ values.  These\nparameters have been referred to in the text by names such as\n\
    LSRefreshTimer.  The same naming convention is used for the configurable\nprotocol\
    \ parameters.  They are defined in appendix C.\nThe name of each architectural\
    \ constant follows, together with its value\nand a short description of its function.\n\
    LSRefreshTime\n    The maximum time between distinct originations of any particular\n\
    \    link state advertisement.  For each link state advertisement that a\n   \
    \ router originates, an interval timer should be set to this value.\n    Firing\
    \ of this timer causes a new instance of the link state\n    advertisement to\
    \ be originated.  The value of LSRefreshTime is set\n    to 30 minutes.\nMinLSInterval\n\
    \    The minimum time between distinct originations of any particular\n    link\
    \ state advertisement.  The value of MinLSInterval is set to 5\n    seconds.\n\
    MaxAge\n    The maximum age that a link state advertisement can attain.  When\
    \ an\n    advertisement's age reaches MaxAge, it is reflooded.  It is then\n \
    \   removed from the database as soon as this flood is acknowledged,\n    i.e.,\
    \ as soon as it has been removed from all neighbor Link state\n    retransmission\
    \ lists.  Advertisements having age MaxAge are not used\n    in the routing table\
    \ calculation.  The value of MaxAge must be\n    greater than LSRefreshTime. \
    \ The value of MaxAge is set to 1 hour.\nCheckAge\n    When the age of a link\
    \ state advertisement (that is contained in the\n    link state database) hits\
    \ a multiple of CheckAge, the\n    advertisement's checksum is verified.  An incorrect\
    \ checksum at this\n    time indicates a serious error.  The value of CheckAge\
    \ is set to 5\n    minutes.\nMaxAgeDiff\n    The maximum time dispersion that\
    \ can occur, as a link state\n    advertisement is flooded throughout the AS.\
    \  Most of this time is\n    accounted for by the link state advertisements sitting\
    \ on router\n    output queues (and therefore not aging) during the flooding process.\n\
    \    The value of MaxAgeDiff is set to 15 minutes.\nLSInfinity\n    The link state\
    \ metric value indicating that the destination is\n    unreachable.  It is defined\
    \ to be the binary value of all ones.  It\n    depends on the size of the metric\
    \ field, which is 16 bits in router\n    links advertisements, and 24 bits in\
    \ both summary and AS external\n    links advertisements.\nDefaultDestination\n\
    \    The Destination ID that indicates the default route.  This route is\n   \
    \ used when no other matching routing table entry can be found.  The\n    default\
    \ destination can only be advertised in AS external link\n    advertisements and\
    \ in type 3 summary link advertisements for stub\n    areas.  Its value is the\
    \ IP address 0.0.0.0.\nC. Configurable Constants\nThe OSPF protocol has quite\
    \ a few configurable parameters.  These\nparameters are listed below.  They are\
    \ grouped into general functional\ncategories (area parameters, interface parameters,\
    \ etc.).  Sample values\nare given for some of the parameters.\nSome parameter\
    \ settings need to be consistent among groups of routers.\nFor example, all routers\
    \ in an area must agree on that area's\nparameters, and all routers attached to\
    \ a network must agree on that\nnetwork's IP network number and mask.\nSome parameters\
    \ may be determined by router algorithms outside of this\nspecification (e.g.,\
    \ the address of a host connected to the router via a\nSLIP line).  From OSPF's\
    \ point of view, these items are still\nconfigurable.\nC.1 Global parameters\n\
    In general, a separate copy of the OSPF protocol is run for each area.\nBecause\
    \ of this, most configuration parameters are defined on a per-area\nbasis.  The\
    \ few global configuration parameters are listed below.\nRouter ID\n    This is\
    \ a 32-bit number that uniquely identifies the router in the\n    Autonomous System.\
    \  One algorithm for Router ID assignment is to\n    choose the largest or smallest\
    \ IP address assigned to the router.\n    If a router's OSPF Router ID is changed,\
    \ the router's OSPF software\n    should be restarted before the new Router ID\
    \ takes effect.\nTOS capability\n    This item indicates whether the router will\
    \ calculate separate\n    routes based on TOS.  For more information, see Sections\
    \ 4.5 and\n    16.9.\nC.2 Area parameters\nAll routers belonging to an area must\
    \ agree on that area's\nconfiguration.  Disagreements between two routers will\
    \ lead to an\ninability for adjacencies to form between them, with a resulting\n\
    hindrance to the flow of routing protocol traffic.  The following items\nmust\
    \ be configured for an area:\nArea ID\n    This is a 32-bit number that identifies\
    \ the area.  The Area ID of 0\n    is reserved for the backbone.  If the area\
    \ represents a subnetted\n    network, the IP network number of the subnetted\
    \ network may be used\n    for the area ID.\nList of address ranges\n    An OSPF\
    \ area is defined as a list of [IP address, mask] pairs.  Each\n    pair describes\
    \ a range of IP addresses.  Networks and hosts are\n    assigned to an area depending\
    \ on whether their addresses fall into\n    one of the area's defining address\
    \ ranges.  Routers are viewed as\n    belonging to multiple areas, depending on\
    \ their attached networks'\n    area membership.  Routing information is condensed\
    \ at area\n    boundaries.  External to the area, a single route is advertised\
    \ for\n    each address range.\n    As an example, suppose an IP subnetted network\
    \ is to be its own OSPF\n    area.  The area would be configured as a single address\
    \ range, whose\n    IP address is the address of the subnetted network, and whose\
    \ mask\n    is the natural class A, B, or C internet mask.  A single route would\n\
    \    be advertised external to the area, describing the entire subnetted\n   \
    \ network.\nAuthentication type\n    Each  area  can  be  configured  for  a \
    \ separate  type  of\n    authentication.    See Appendix  E  for  a  discussion\
    \  of  the\n    defined authentication  types.\nExternal routing capability\n\
    \    Whether AS external advertisements will be flooded into/throughout\n    the\
    \ area.  If AS external advertisements are excluded from the area,\n    the area\
    \ is called a \"stub\".  Internal to stub areas, routing to\n    external destinations\
    \ will be based solely on a default summary\n    route.  The backbone cannot be\
    \ configured as a stub area.  Also,\n    virtual links cannot be configured through\
    \ stub areas.  For more\n    information, see Section 3.6.\nStubDefaultCost\n\
    \    If the area has been configured as a stub area, and the router\n    itself\
    \ is an area border router, then the StubDefaultCost indicates\n    the cost of\
    \ the default summary link that the router should\n    advertise into the area.\
    \  There can be a separate cost configured\n    for each IP TOS.  See Section\
    \ 12.4.3 for more information.\nC.3 Router interface parameters\nSome of the configurable\
    \ router interface parameters (such as IP\ninterface address and subnet mask)\
    \ actually imply properties of the\nattached networks, and therefore must be consistent\
    \ across all the\nrouters attached to that network.  The parameters that must\
    \ be\nconfigured for a router interface are:\nIP interface address\n    The IP\
    \ protocol address for this interface.  This uniquely\n    identifies the router\
    \ over the entire internet.  An IP address is\n    not required on serial lines.\
    \  Such a serial line is called\n    \"unnumbered\".\nIP interface mask\n    This\
    \  denotes  the  portion  of  the  IP  interface  address  that\n    identifies\
    \  the  attached  network.   This  is  often  referred  to\n    as  the subnet\
    \  mask.\nInterface output cost(s)\n    The cost of sending a packet on the interface,\
    \ expressed in the link\n    state metric.  This is advertised as the link cost\
    \ for this\n    interface in the router's router links advertisement.  There may\
    \ be\n    a separate cost for each IP Type of Service.  The interface output\n\
    \    cost(s) must always be greater than 0.\nRxmtInterval\n    The number of seconds\
    \ between link state advertisement\n    retransmissions, for adjacencies belonging\
    \ to this interface.  Also\n    used when retransmitting Database Description\
    \ and Link State Request\n    Packets.  This should be well over the expected\
    \ round-trip delay\n    between any two routers on the attached network.  The\
    \ setting of\n    this value should be conservative or needless retransmissions\
    \ will\n    result.  It will need to be larger on low speed serial lines and\n\
    \    virtual links.  Sample value for a local area network: 5 seconds.\nInfTransDelay\n\
    \    The estimated number of seconds it takes to transmit a Link State\n    Update\
    \ Packet over this interface.  Link state advertisements\n    contained in the\
    \ update packet must have their age incremented by\n    this amount before transmission.\
    \  This value should take into\n    account the transmission and propagation delays\
    \ for the interface.\n    It must be greater than 0.  Sample value for a local\
    \ area network: 1\n    second.\nRouter Priority\n    An 8-bit unsigned integer.\
    \  When two routers attached to a network\n    both attempt to become Designated\
    \ Router, the one with the highest\n    Router Priority takes precedence.  If\
    \ there is still a tie, the\n    router with the highest Router ID takes precedence.\
    \  A router whose\n    Router Priority is set to 0 is ineligible to become Designated\n\
    \    Router on the attached network.  Router Priority is only configured\n   \
    \ for interfaces to multi-access networks.\nHelloInterval\n    The length of time,\
    \ in seconds, between the Hello packets that the\n    router sends on the interface.\
    \  This value is advertised in the\n    router's Hello packets.  It must be the\
    \ same for all routers\n    attached to a common network.  The smaller the hello\
    \ interval, the\n    faster topological changes will be detected, but more routing\n\
    \    traffic will ensue.  Sample value for a X.25 PDN network: 30\n    seconds.\
    \  Sample value for a local area network: 10 seconds.\nRouterDeadInterval\n  \
    \  The number of seconds that a router's Hellos have not been seen\n    before\
    \ its neighbors declare the router down.  This is also\n    advertised in the\
    \ router's Hello Packets in the DeadInt field.  This\n    should be some multiple\
    \ of the HelloInterval (say 4).  This value\n    again must be the same for all\
    \ routers attached to a common network.\nAuthentication key\n    This configured\
    \ data allows the authentication procedure to generate\n    and/or verify the\
    \ authentication field in the OSPF header.  For\n    example, if the authentication\
    \ type indicates simple password, the\n    authentication key would be a 64-bit\
    \ password.  This key would be\n    inserted directly into the OSPF header when\
    \ originating routing\n    protocol packets.  There could be a separate password\
    \ for each\n    network.\nC.4 Virtual link parameters\nVirtual links are used\
    \ to restore/increase connectivity of the backbone.\nVirtual links may be configured\
    \ between any pair of area border routers\nhaving interfaces to a common (non-backbone)\
    \ area.  The virtual link\nappears as an unnumbered point-to-point link in the\
    \ graph for the\nbackbone.  The virtual link must be configured in both of the\
    \ area\nborder routers.\nA virtual link appears in router links advertisements\
    \ (for the backbone)\nas if it were a separate router interface to the backbone.\
    \  As such, it\nhas all of the parameters associated with a router interface (see\n\
    Section C.3).  Although a virtual link acts like an unnumbered point-\nto-point\
    \ link, it does have an associated IP interface address.  This\naddress is used\
    \ as the IP source in protocol packets it sends along the\nvirtual link, and is\
    \ set dynamically during the routing table build\nprocess.  Interface output cost\
    \ is also set dynamically on virtual links\nto be the cost of the intra-area path\
    \ between the two routers.  The\nparameter RxmtInterval must be configured, and\
    \ should be well over the\nexpected round-trip delay between the two routers.\
    \  This may be hard to\nestimate for a virtual link.  It is better to err on the\
    \ side of making\nit too large.  Router Priority is not used on virtual links.\n\
    A virtual link is defined by the following two configurable parameters:\nthe Router\
    \ ID of the virtual link's other endpoint, and the (non-\nbackbone) area through\
    \ which the virtual link runs (referred to as the\nvirtual link's transit area).\
    \  Virtual links cannot be configured\nthrough stub areas.\nC.5 Non-broadcast,\
    \ multi-access network parameters\nOSPF treats a non-broadcast, multi-access network\
    \ much like it treats a\nbroadcast network.  Since there many be many routers\
    \ attached to the\nnetwork, a Designated Router is selected for the network. \
    \ This\nDesignated Router then originates a networks links advertisement, which\n\
    lists all routers attached to the non-broadcast network.\nHowever, due to the\
    \ lack of broadcast capabilities, it is necessary to\nuse configuration parameters\
    \ in the Designated Router selection.  These\nparameters need only be configured\
    \ in those routers that are themselves\neligible to become Designated Router (i.e.,\
    \ those router's whose DR\nPriority for the network is non-zero):\nList of all\
    \ other attached routers\n    The list of all other routers attached to the non-broadcast\
    \ network.\n    Each router is listed by its IP interface address on the network.\n\
    \    Also, for each router listed, that router's eligibility to become\n    Designated\
    \ Router must be defined.  When an interface to a non-\n    broadcast network\
    \ comes up, the router sends Hello packets only to\n    those neighbors eligible\
    \ to become Designated Router, until the\n    identity of the Designated Router\
    \ is discovered.\nPollInterval\n    If a neighboring router has become inactive\
    \ (hellos have not been\n    seen for RouterDeadInterval seconds), it may still\
    \ be necessary to\n    send Hellos to the dead neighbor.  These Hellos will be\
    \ sent at the\n    reduced rate PollInterval, which should be much larger than\n\
    \    HelloInterval.  Sample value for a PDN X.25 network: 2 minutes.\nC.6 Host\
    \ route parameters\nHost routes are advertised in network links advertisements\
    \ as stub\nnetworks with mask 0xffffffff.  They indicate either router interfaces\n\
    to point-to-point networks, looped router interfaces, or IP hosts that\nare directly\
    \ connected to the router (e.g., via a SLIP line).  For each\nhost directly connected\
    \ to the router, the following items must be\nconfigured:\nHost IP address\n \
    \   The IP address of the host.\nCost of link to host\n    The cost of sending\
    \ a packet to the host, in terms of the link state\n    metric.  There may be\
    \ multiple costs configured, one for each IP\n    TOS.  However, since the host\
    \ probably has only a single connection\n    to the internet, the actual configured\
    \ cost(s) in many cases is\n    unimportant (i.e., will have no effect on routing).\n\
    D. Required Statistics\nAn OSPF implementation must provide a minimum set of statistics\n\
    indicating the operational state of the protocol.  These statistics must\nbe accessible\
    \ to the user; this will probably be accomplished through\nsome sort of network\
    \ management interface.\nIt is hoped that these statistics will aid in the debugging\
    \ of the\nimplementation, and in the analysis of the protocol's performance.\n\
    The statistics can be broken into two broad categories.  The first\nconsists of\
    \ what we will call logging messages.  These are messages\nproduced in real time,\
    \ with generally a single message produced as the\nresult of a single protocol\
    \ event.  Such messages are also commonly\nreferred to as traps.\nThe second category\
    \ will be referred to as cumulative statistics.  These\nare counters whose value\
    \ have collected over time, such as the count of\nlink state retransmissions over\
    \ the last hour.  Also falling into this\ncategory are dumps of the various routing\
    \ data structures.\nD.1 Logging messages\nA logging message should be produced\
    \ on every significant protocol\nevent.  The major events are listed below.  Most\
    \ of these events\nindicate a topological change in the routing domain.  However,\
    \ some\nnumber of logging messages can be expected even when the routing domain\n\
    remains intact for long periods of time.  For example, link state\noriginations\
    \ will still happen due to the link state refresh timer\nfiring.\nAny of the messages\
    \ that refer to link state advertisements should print\nthe area associated with\
    \ the advertisement.  There is no area associated\nwith AS external link advertisements.\n\
    The following list of logging messages indicate topological changes in\nthe routing\
    \ domain:\nT1  The state of a router interface changes.  Interface state changes\n\
    \    are documented in Section 9.3.  In general, they will cause new link\n  \
    \  state advertisements to be originated.  The logging message produced\n    should\
    \ include the interface's IP address (or other name), interface\n    type (virtual\
    \ link, etc.)  and old and new state values (as\n    documented in Section 9.1).\n\
    T2  The state of a neighbor changes.  Neighbor state changes are\n    documented\
    \ in Section 10.3.  The logging message produced should\n    include the neighbor\
    \ IP address, and old and new state values.\nT3  The (Backup) Designated Router\
    \ has changed on one of the attached\n    networks.  See Section 9.4.  The logging\
    \ message produced should\n    include the network IP address, and the old and\
    \ new (Backup)\n    Designated Routers.\nT4  The router is originating a new instance\
    \ of a link state\n    advertisement.  The logging message produced should indicate\
    \ the LS\n    type, Link State ID and Advertising Router associated with the\n\
    \    advertisement (see Section 12.4).\nT5  The router has received a new instance\
    \ of a link state\n    advertisement.  The router receives these in Link State\
    \ Update\n    packets.  This will cause recalculation of the routing table.  The\n\
    \    logging message produced should indicate the advertisement's LS\n    type,\
    \ Link State ID and Advertising Router.  The message should also\n    include\
    \ the neighbor from whom the advertisement was received.\nT6  An entry in the\
    \ routing table has changed (see Section 11).  The\n    logging message produced\
    \ should indicate the Destination type,\n    Destination ID, and the old and new\
    \ paths to the destination.\nThe following logging messages may indicate that\
    \ there is a network\nconfiguration error:\nC1  A received OSPF packet is rejected\
    \ due to errors in its IP/OSPF\n    header.  The reasons for rejection are documented\
    \ in Section 8.2.\n    They include OSPF checksum failure, authentication failure,\
    \ and\n    inability to match the source with an active OSPF neighbor.  The\n\
    \    logging message produced should include the IP source and\n    destination\
    \ addresses, the router ID in the OSPF header, and the\n    reason for the rejection.\n\
    C2  An incoming Hello packet is rejected due to mismatches between the\n    Hello's\
    \ parameters and those configured for the receiving interface\n    (see Section\
    \ 10.5).  This indicates a configuration problem on the\n    attached network.\
    \  The logging message should include the Hello's\n    source, the receiving interface,\
    \ and the non-matching parameters.\nC3  An incoming Database Description packet,\
    \ Link State Request Packet,\n    Link State Acknowledgment Packet or Link State\
    \ Update packet is\n    rejected due to the source neighbor being in the wrong\
    \ state (see\n    Sections 10.6, 10.7, 13.7 , and 13 respectively).  This can\
    \ be\n    normal when the identity of the network's Designated Router changes,\n\
    \    causing momentary disagreements over the validity of adjacencies.\n    The\
    \ logging message should include the source neighbor, its state,\n    and the\
    \ packet's type.\nC4  A Database Description packet has been retransmitted.  This\
    \ may mean\n    that the value of RxmtInterval that has been configured for the\n\
    \    associated interface is too small.  The logging message should\n    include\
    \ the neighbor to whom the packet is being sent.\nThe following messages can be\
    \ caused by packet transmission errors, or\nsoftware errors in an OSPF implementation:\n\
    E1  The checksum in a received link state advertisement is incorrect.\n    The\
    \ advertisement is discarded (see Section 13).  The logging\n    message should\
    \ include the advertisement's LS type, Link State ID\n    and Advertising Router\
    \ (which may be incorrect).  The message should\n    also include the neighbor\
    \ from whom the advertisement was received.\nE2  During the aging process, it\
    \ is discovered that one of the link\n    state advertisements in the database\
    \ has an incorrect checksum.\n    This indicates memory corruption or a software\
    \ error in the router\n    itself.  The router should be dumped and restarted.\n\
    The following messages are an indication that a router has restarted,\nlosing\
    \ track of its previous LS sequence number.  Should these messages\ncontinue,\
    \ it may indicate the presence of duplicate Router IDs:\nR1  Two link state advertisements\
    \ have been seen, whose LS type, Link\n    State ID, Advertising Router and LS\
    \ sequence number are the same,\n    yet with differing LS checksums.  These are\
    \ considered to be\n    different instances of the same advertisement.  The instance\
    \ with\n    the larger checksum is accepted as more recent (see Section 12.1.7,\n\
    \    13.1).  The logging message should include the LS type, Link State\n    ID,\
    \ Advertising Router, LS sequence number and the two differing\n    checksums.\n\
    R2  Two link state advertisements have been seen, whose LS type, Link\n    State\
    \ ID, Advertising Router, LS sequence number and LS checksum are\n    the same,\
    \ yet can be distinguished by their LS age fields.  This\n    means that one of\
    \ the advertisement's LS age is MaxAge, or the two\n    LS age fields differ by\
    \ more than MaxAgeDiff.  The logging message\n    should include the LS type,\
    \ Link State ID, Advertising Router, LS\n    sequence number and the two differing\
    \ ages.\nR3  The router has received an instance of one of its self-originated\n\
    \    advertisements, that is considered to be more recent.  This forces\n    the\
    \ router to originate a new advertisement (see Section 13.4).  The\n    logging\
    \ message should include the advertisement's LS type, Link\n    State ID, and\
    \ Advertising Router along with the neighbor from whom\n    the advertisement\
    \ was received.\nR4  An acknowledgment has been received for an instance of an\n\
    \    advertisement that is not currently contained in the router's\n    database\
    \ (see Section 13.7).  The logging message should detail the\n    instance being\
    \ acknowledged and the database copy (if any), along\n    with the neighbor from\
    \ whom the acknowledgment was received.\nR5  An advertisement has been received\
    \ through the flooding procedure\n    that is LESS recent the the router's current\
    \ database copy (see\n    Section 13).  The logging message should include the\
    \ received\n    advertisement's LS type, Link State ID, Advertising Router, LS\n\
    \    sequence number, LS age and LS checksum.  Also, the message should\n    display\
    \ the neighbor from whom the advertisement was received.\nThe following messages\
    \ are indication of normal, yet infrequent protocol\nevents.  These messages will\
    \ help in the interpretation of some of the\nabove messages:\nN1  The Link state\
    \ refresh timer has fired for one of the router's\n    self-originated advertisements\
    \ (see Section 12.4).  A new instance\n    of the advertisement must be originated.\
    \  The message should include\n    the advertisement's LS type, Link State ID\
    \ and Advertising Router.\nN2  One of the advertisements in the router's link\
    \ state database has\n    aged to MaxAge (see Section 14).  At this point, the\
    \ advertisement\n    is no longer included in the routing table calculation, and\
    \ is\n    reflooded.  The message should list the advertisement's LS type,\n \
    \   Link State ID and Advertising Router.\nN3  An advertisement of age MaxAge\
    \ has been flushed from the router's\n    database.  This occurs after the advertisement\
    \ has been acknowledged\n    by all adjacent neighbors.  The message should list\
    \ the\n    advertisement's LS type, Link State ID and Advertising Router.\nD.2\
    \ Cumulative statistics\nThese statistics display collections of the routing data\
    \ structures.\nThey should be able to be obtained interactively, through some\
    \ kind of\nnetwork management facility.\nAll the following statistics displays,\
    \ with the exception of the area\nlist, routing table and the AS external links,\
    \ are specific to a single\narea.  As noted in Section 4, most OSPF protocol mechanisms\
    \ work on each\narea separately.\nThe following statistics displays should be\
    \ available:\n(1) A list of all the areas attached to the router, along with the\n\
    \    authentication type to use for the area, the number of router\n    interfaces\
    \ attaching to the area, and the total number of nets and\n    routers belonging\
    \ to the area.\n    For example, consider the router RT3 pictured in Figure 15.\
    \  It has\n    interfaces to two separate areas, Area 1 and the backbone (Area\
    \ 0).\n    Table 20 then indicates that the backbone is using a simple password\n\
    \    for authentication, and that Area 1 is not using any authentication.\n  \
    \  The number of nets includes IP networks, subnets, and hosts (this is\n    the\
    \ reason for 2 backbone nets -- they are the host routes\n    corresponding to\
    \ the serial line between backbone routers RT6 and\n    RT10).\n             \
    \    Area ID   # ifcs   AuType   # nets   # routers\n                 ______________________________________________\n\
    \                 0         1        1        2        7\n                 1 \
    \        2        0        4        4\n                      Table 20: Sample\
    \ OSPF area display.\n(2) A list of all the router's interfaces to an area, along\
    \ with their\n    addresses, output cost, current state, the (Backup) Designated\n\
    \    Router for the attached network, and the number of neighbors\n    currently\
    \ associated with the interface.  Some number of these\n    neighbors will have\
    \ become adjacent, the number of these is noted in\n    the display also.\n  \
    \  Again consider router RT3 in Figure 15.  Table 21 below indicates\n    that\
    \ RT4 has been selected as Designated Router for network N3, and\n    router RT1\
    \ has been selected as Backup.  Adjacencies have been\n    established to both\
    \ of these routers.  There are no routers besides\n    RT3 attached to network\
    \ N4, so it becomes DR, yet still advertises\n    the network as a stub in its\
    \ router links advertisements.\n   Ifc IP address   state      cost   DR     \
    \     Backup      # nbrs   # adjs\n   __________________________________________________________________________\n\
    \   192.1.1.3        DR other   1      192.1.1.4   192.1.1.1   3        2\n  \
    \ 192.1.4.3        DR         2      192.1.4.3   none        0        0\n    \
    \                Table 21: Sample OSPF interface display.\n(3) The list of neighbors\
    \ associated with a particular interface.  Each\n    neighbor's IP address, router\
    \ ID, state, and the length of the three\n    link state advertisement queues\
    \ (see Section 10) to the neighbor is\n    displayed.\n    Suppose router RT4\
    \ is the Designated Router for network N3, and\n    router RT1 is the Backup Designated\
    \ router.  Suppose also that the\n    adjacency between router RT3 and RT1 has\
    \ not yet fully formed.  The\n    display of router RT3's neighbors (associated\
    \ with its interface to\n    network N3) may then look like Table 22.  The display\
    \ indicates that\n    RT3 and RT1 are still in the database exchange procedure,\
    \ Router RT3\n    has more Database Description packets to send to RT1, and RT1\
    \ has at\n    least one link state advertisement that RT3 doesn't.  Also, there\
    \ is\n    a single link state advertisement that has been flooded, but not\n \
    \   acknowledged, to each neighbor that participates in the flooding\n    procedure\
    \ (state >= Exchng).  (In the following examples we assume\n    that a router's\
    \ Router ID is assigned to be its smallest IP\n    interface address).\n  Nbr\
    \ IP address   Router ID   state    LS rxmt len   DB summ len   LS req len\n \
    \ ____________________________________________________________________________\n\
    \  192.1.1.1        192.1.1.1   Exchng   1             10            1\n  192.1.1.2\
    \        192.1.1.2   2-Way    0             0             0\n  192.1.1.4     \
    \   192.1.1.4   Full     1             0             0\n                    Table\
    \ 22: Sample OSPF neighbor display.\n(4) A list of the area's link state database.\
    \  This is the same in all\n    of the routers attached to the area.  It is composed\
    \ of that area's\n    router links, network links, and summary links advertisements.\n\
    \    Also, the AS external link advertisements are a part of all the\n    areas'\
    \ databases.\n    The link state database for Area 1 in Figure 15 might look like\n\
    \    Table 23 (compare this with Figure 7).  Assume the the Designated\n    Router\
    \ for network N3 is router RT4, as above.  Both routers RT3 and\n    RT4 are originating\
    \ summary link advertisements into Area 1, since\n    they are area border routers.\
    \  Routers RT5 and RT7 are AS external\n    routers.  Their location must be described\
    \ in summary links\n    advertisements.  Also, their AS external link advertisements\
    \ are\n    flooded throughout the entire AS.\n    Router RT3 can locate its self-originated\
    \ advertisements by looking\n    for its own router ID (192.1.1.3) in advertisements'\
    \ Advertising\n    Router fields.\n    The LS sequence number, LS age, and LS\
    \ checksum fields indicate the\n    advertisement's instance.  Their values are\
    \ stored in the\n    advertisement's link state header; we have not bothered to\
    \ make up\n    values for the example.\nLS type   Link State ID   Advertising\
    \ Router   LS seq no   LS age   LS checksum\n_______________________________________________________________________________\n\
    1         192.1.1.1       192.1.1.1            *           *        *\n1     \
    \    192.1.1.2       192.1.1.2            *           *        *\n1         192.1.1.3\
    \       192.1.1.3            *           *        *\n1         192.1.1.4     \
    \  192.1.1.4            *           *        *\n_______________________________________________________________________________\n\
    2         192.1.1.4       192.1.1.4            *           *        *\n_______________________________________________________________________________\n\
    3         Ia,Ib           192.1.1.3            *           *        *\n3     \
    \    N6              192.1.1.3            *           *        *\n3         N7\
    \              192.1.1.3            *           *        *\n3         N8     \
    \         192.1.1.3            *           *        *\n3         N9-N11,H1   \
    \    192.1.1.3            *           *        *\n3         Ia,Ib           192.1.1.4\
    \            *           *        *\n3         N6              192.1.1.4     \
    \       *           *        *\n3         N7              192.1.1.4          \
    \  *           *        *\n3         N8              192.1.1.4            *  \
    \         *        *\n3         N9-N11,H1       192.1.1.4            *       \
    \    *        *\n4         RT5             192.1.1.3            *           *\
    \        *\n4         RT7             192.1.1.3            *           *     \
    \   *\n4         RT5             192.1.1.4            *           *        *\n\
    4         RT7             192.1.1.4            *           *        *\n_______________________________________________________________________________\n\
    4         N12             RT5's ID             *           *        *\n4     \
    \    N13             RT5's ID             *           *        *\n4         N14\
    \             RT5's ID             *           *        *\n4         N12     \
    \        RT7's ID             *           *        *\nLS type   Link State ID\
    \   Advertising Router   LS seq no   LS age   LS checksum\n_______________________________________________________________________________\n\
    4         N15             RT7's ID             *           *        *\n      \
    \       Table 23: Sample OSPF link state database display.\n(5) The contents of\
    \ any particular link state advertisement.  For\n    example, a listing of the\
    \ router links advertisement for Area 1,\n    with LS type = 1 and Link State\
    \ ID = 192.1.1.3 is shown in Section\n    12.4.1.\n(6) A listing of the entire\
    \ routing table.  Several examples are shown\n    in Section 11.  The routing\
    \ table is calculated from the combined\n    databases of each attached area (see\
    \ Section 16).  It may be\n    desirable to sort the routing table by Type of\
    \ Service, or by\n    destination, or a combination of the two.\nE. Authentication\n\
    All OSPF protocol exchanges are authenticated.  The OSPF packet header\n(see Section\
    \ A.3.1) includes an authentication type field, and 64-bits\nof data for use by\
    \ the appropriate authentication scheme (determined by\nthe type field).\nThe\
    \ authentication type is configurable on a per-area basis.  Additional\nauthentication\
    \ data is configurable on a per-interface basis.  For\nexample, if an area uses\
    \ a simple password scheme for authentication, a\nseparate password may be configured\
    \ for each network contained in the\narea.\nAuthentication types 0 and 1 are defined\
    \ by this specification.  All\nother authentication types are reserved for definition\
    \ by the IANA\n(iana@ISI.EDU).  The current list of authentication types is described\n\
    below in Table 24.\n      AuType       Description\n      _______________________________________________________________\n\
    \      0            No authentication\n      1            Simple password\n  \
    \    All others   Reserved for assignment by the IANA (iana@ISI.EDU)\n       \
    \             Table 24: OSPF authentication types.\nE.1 Autype 0 -- No authentication\n\
    Use of this authentication type means that routing exchanges in the area\nare\
    \ not authenticated.  The 64-bit field in the OSPF header can contain\nanything;\
    \ it is not examined on packet reception.\nE.2 Autype 1 -- Simple password\nUsing\
    \ this authentication type, a 64-bit field is configured on a per-\nnetwork basis.\
    \  All packets sent on a particular network must have this\nconfigured value in\
    \ their OSPF header 64-bit authentication field.  This\nessentially serves as\
    \ a \"clear\" 64-bit password.\nThis guards against routers inadvertently coming\
    \ up in the area.  They\nmust first be configured with their attached networks'\
    \ passwords before\nthey can join the routing domain.\nF. Version 1 differences\n\
    This section documents the changes between OSPF version 1 and OSPF\nversion 2.\
    \  The impetus for these changes derives from comments received\non RFC 1131 and\
    \ recent field experience with the OSPF protocol.\nUnfortunately, the changes\
    \ are not backward-compatible.  For that\nreason, OSPF version 1 will not interoperate\
    \ with OSPF version 2.\nHowever, the changes are small in scope and should not\
    \ greatly affect\nany existing implementations.  In addition, some of the proposed\
    \ changes\nshould enable future protocol additions to be made in a backward-\n\
    compatible manner (see Section F.4).\nF.1 Protocol Enhancements\nThe following\
    \ enhancements were made to the OSPF protocol.\nF.1.1 Stub area support\nIn many\
    \ Autonomous Systems, the majority of the OSPF link state database\nconsists of\
    \ AS external advertisements.  In these Autonomous Systems,\nsome OSPF areas may\
    \ be organized in such a way that external\nadvertisements can be safely ignored,\
    \ enabling a reduction of the area's\ndatabase size.  This applies to OSPF areas\
    \ where there is only a single\nexit/entry that is used by all externally addressed\
    \ packets, or to cases\nwhere some sub-optimality of external routing is acceptable.\n\
    Therefore, an OSPF area configuration option has been added (see\nSections 3.6\
    \ and C.2) allowing the import of external advertisements to\nbe disabled for\
    \ an area.  When this option is enabled, no AS external\nadvertisements will be\
    \ flooded into the area (Sections 13, 13.3 and\n10.3).  Instead, within the area\
    \ all data traffic to external\ndestinations will follow a (per-area) default\
    \ route.  These areas are\ncalled \"stub\" areas.\nTo implement this, all area\
    \ border routers attached to stub areas will\noriginate a default summary link\
    \ advertisement for the area (Section\n12.4.3).  This will direct all internal\
    \ routers to an area border router\nwhen forwarding externally addressed packets.\
    \  In addition, to ensure\nthat stub areas are configured consistently, an Options\
    \ field has been\nadded to OSPF Hello packets (Sections A.2 and A.3.2).  A bit\
    \ is reset in\nthe Options field indicating that the attached area is a stub area\n\
    (Section 9.5).  A router will not accept a neighbor's hellos unless they\nboth\
    \ agree on the area's ability to process AS external advertisements\n(Section\
    \ 10.5).  In this way, a system administrator will be able to\ndiscover incorrectly\
    \ configured routers, and data traffic will be routed\naround them (in order to\
    \ avoid potential looping situations) until their\nconfiguration can be repaired.\n\
    F.1.2 Optional TOS support\nIn OSPF there is conceptually a separate routing table\
    \ for each TOS; the\ncalculations detailed in steps 1-5 of Section 16 must be\
    \ done separately\nfor each TOS.  (Note however that link and summary costs need\
    \ not be\nspecified separately for each TOS; costs for unspecified TOS values\n\
    default to the cost of TOS 0).\nIn version 1 of the OSPF specification, all OSPF\
    \ routers were required\nto route based on TOS.  However, producing a separate\
    \ routing table for\neach TOS may prove costly, both in terms of memory and processor\n\
    resources.  For this reason, version 2 allows the system administrator\nto configure\
    \ routers to calculate/use only a single routing table (the\nTOS 0 table).  When\
    \ this is done, some traffic may take non-optimal\nroutes.  But all packets will\
    \ still be delivered, and routing will\nremain loop free (see Section 2.4).\n\
    In order to avoid routing loops, a router (router X) using a single\ntable must\
    \ communicate this information to its peers.  This is done by\nresetting the new\
    \ TOS-capable bit in the router X's router links\nadvertisement (Section 12.4.1).\
    \  Then, when its peers perform the\nDijkstra calculation (Section 16.1) for non-zero\
    \ TOS values, they will\nomit router X from the calculation.  In effect, an attempt\
    \ will be made\nto bypass router X when forwarding non-zero TOS traffic.  Summary\
    \ link\nand AS external link advertisements can also indicate their non-\navailability\
    \ for non-zero TOS traffic (Sections 12.4.3 and 12.4.4).\nThe result may be that\
    \ no route can be found for some non-zero value of\nTOS.  When this happens, the\
    \ packet is routed along the TOS 0 route\ninstead (Section 11.1).\nIt is still\
    \ mandatory for all OSPF implementations to be able to\nconstruct separate routing\
    \ tables for each TOS value, if desired by the\nsystem administrator.\nF.1.3 Preventing\
    \ external extra-hops\nIn some cases, version 1 of the OSPF specification will\
    \ introduce\nextra-hops when calculating routes to external destinations.  This\
    \ is\nbecause it is implicit in the format of AS external advertisements that\n\
    packets should be forwarded through the advertising router.  However,\nconsider\
    \ the situation where multiple OSPF routers share a LAN with an\nexternal router\
    \ (call it router Y) , and only one OSPF router (call it\nrouter X) exchanges\
    \ routing information with Y.  The OSPF routers on the\nLAN other than X will\
    \ forward packets destined for Y and beyond through\nX, generating an extra hop\
    \ (see Section 2.2).\nTo fix this, a new field has been added to AS external advertisements.\n\
    This field (called the forwarding address) will indicate the router\naddress to\
    \ which packets should be forwarded (Section 12.4.4).  In the\nabove example,\
    \ router X will put Y's IP address into this field.  If the\nfield is 0, packets\
    \ are (as before) forwarded to the originator of the\nadvertisement.  A different\
    \ forwarding address can be specified for each\nTOS value.\nWhenever possible,\
    \ this new field should be set to 0.  This is because\nsetting it to an actual\
    \ router address incurs additional cost during the\nrouting table build process\
    \ (Section 16.4).\nBesides preventing extra-hops, there are two other applications\
    \ for this\nfield.  The first is for use by \"route servers\".  Using the forwarding\n\
    address, a router in the middle of the Autonomous System can gather\nexternal\
    \ routing information and originate AS external advertisements\nthat specify the\
    \ correct exit route to use for each external destination\n(Section 2.2).\nThe\
    \ other application possibly enables the reduction of the number of AS\nexternal\
    \ advertisements that need be imported.  Suppose in the example\nat the beginning\
    \ of this section that there are two routers (X and Z)\nexchanging EGP information\
    \ with the non-OSPF router Y.  It is then\nlikely that both X and Z will originate\
    \ the same set of external routes.\nTwo AS external advertisements that specify\
    \ the same (non-zero)\nforwarding address, destination and cost are obviously\
    \ functionally\nequivalent, regardless of their originators (advertising routers).\
    \  The\nOSPF specification dictates that the advertisement originated by the\n\
    router with the largest Router ID will always be used.  This allows the\nother\
    \ router to flush its equivalent advertisement (Section 12.4.4).\nF.2 Corrected\
    \ problems\nThe following problems in OSPF version 1 have been corrected in version\n\
    2.\nF.2.1 LS sequence number space changes\nThe LS sequence number space has been\
    \ changed from version 1's lollipop\nshape to a linear sequence space (Section\
    \ 12.1.6).  Sequence numbers\nwill now be compared as signed 32-bit integers.\
    \  Link state\nadvertisements having larger sequence numbers will be considered\
    \ more\nrecent.  The sequence number space will still begin at (-N+1) (where N\
    \ =\n2**31).  The value of -N remains reserved.  The LS sequence number of\nsuccessive\
    \ instances of an advertisement will continue to be incremented\nuntil it reaches\
    \ the maximum possible value: N-1.  At this point, when a\nnew instance of the\
    \ advertisement must be originated (due either to\ntopological change of the expiration\
    \ of the LS refresh timer) the\ncurrent instance must first be \"prematurely aged\"\
    .\nThere will be a new section discussing premature aging (Section 14.1).\nThis\
    \ is a method for flushing a link state advertisement from the\nrouting domain:\
    \ the advertisement's age is set to MaxAge and\nadvertisement is reflooded just\
    \ as if it were a newly received\nadvertisement.  As soon as the new flooding\
    \ is acknowledged by all of\nthe router's adjacent neighbors, the advertisement\
    \ is flushed from the\ndatabase.\nPremature aging can also be used when, for example,\
    \ a previously\nadvertised external route is no longer reachable.  In this circumstance,\n\
    premature aging is preferable to the alternative, which is to originate\na new\
    \ advertisement for the destination specifying a metric of\nLSInfinity.\nA router\
    \ may only prematurely age its own (self-originated) link state\nadvertisements.\
    \  These are the link state advertisements having the\nrouter's own OSPF router\
    \ ID in the Advertising Router field.\nF.2.2 Flooding of unexpected MaxAge advertisements\n\
    Version 1 of the OSPF omitted the handling of a special case in the\nflooding\
    \ procedure: the reception of a MaxAge advertisement that has no\ndatabase instance.\
    \  A paragraph has been added to Section 13 to deal\nwith this occurrence.  Without\
    \ this paragraph, retransmissions of MaxAge\nadvertisements could possibly delay\
    \ their being flushed from the routing\ndomain.\nF.2.3 Virtual links and address\
    \ ranges\nWhen summarizing information into a virtual link's transit area, version\n\
    2 of the OSPF specification prohibits the collapsing of multiple\nbackbone IP\
    \ networks/subnets into a single summary link.  This\nrestriction has been added\
    \ to deal with certain anomalous OSPF area\nconfigurations.  See Sections 15 and\
    \ 12.4.3 for more information.\nF.2.4 Routing table lookup explained\nWhen forwarding\
    \ an IP data packet, a router looks up the packet's IP\ndestination in the routing\
    \ table.  This determines the packet's next\nhop.  A new section (Section 11.1)\
    \ has been added describing the routing\ntable lookup (instead of just specifying\
    \ a \"best match\").  This section\nclarifies OSPF's four level routing hierarchy\
    \ (i.e., intra-area, inter-\narea, external type 1 and external type 2 routes).\
    \  It also specifies\nthe effect of TOS on routing.\nF.2.5 Sending Link State\
    \ Request packets\nOSPF Version 2 eases the restrictions on the sending of Link\
    \ State\nRequest packets.  Link State Request packets can now be sent to a\nneighboring\
    \ router before a complete set of Database Description packets\nhave been exchanged.\
    \  This enables a more efficient use of a router's\nmemory resources; an OSPF\
    \ version 2 implementation may limit the size of\nthe neighbor Link state request\
    \ lists.  See Sections 10.9, 10.7 and 10.3\nfor more details.\nF.2.6 Changes to\
    \ the Database description process\nThe specification has been modified to ensure\
    \ that, when two routers are\nsynchronizing their databases during the Database\
    \ Description process,\nnone of the component link state advertisements can have\
    \ their sequence\nnumbers decrease.  A link state advertisement's sequence number\n\
    decreases when it is flushed from the routing domain via premature-\naging, and\
    \ then reoriginated with the smallest sequence number\n0x80000001 (see Section\
    \ 14.1).  So the specification now dictates that\nan advertisement cannot be flushed\
    \ from a router's database until both\na) it no longer appears on any neighbor\
    \ Link State Retransmission lists\nand b) none of the router's neighbors are in\
    \ states Exchange or Loading.\nSee Sections 13 (step 4c) and 14.1 for more details.\n\
    In addition, a new step has been added to the flooding procedure\n(Section 13)\
    \ in order to make the Database Description process more\nrobust.  This step detects\
    \ when a neighbor lists one instance of an\nadvertisement in its Database Description\
    \ packets, but responds to Link\nState Request packets by sending another (earlier)\
    \ instance.  This\nbehavior now causes the event BadLSReq to be generated, which\
    \ restarts\nthe Database Description process with the neighbor.  In OSPF version\
    \ 1,\nthe neighbor event BadLSReq erroneously did not restart the Database\nDescription\
    \ process.\nF.2.7 Receiving OSPF Hello packets\nThe section detailing the receive\
    \ processing of OSPF Hello packets\n(Section 10.5) has been modified to include\
    \ the generation of the\nneighbor Backup Seen event.  In addition, the section\
    \ detailing the\nDesignated Router election algorithm (Section 9.4) has been modified\
    \ to\ninclude the algorithm's initial state.\nF.2.8 Network mask defined for default\
    \ route\nThe network mask for the default route, when it appears as the\ndestination\
    \ in either an AS external link advertisement or in a summary\nlink advertisement,\
    \ has been set to 0.0.0.0.  See Sections A.4.4 and\nA.4.5 for more details.\n\
    F.2.9 Rate limit imposed on flooding\nWhen an advertisement is installed in the\
    \ link state database, it is\ntimestamped.  The flooding procedure is then not\
    \ allowed to install a\nnew instance of the advertisement until MinLSInterval\
    \ seconds have\nelapsed.  This enforces a rate limit on the flooding procedure;\
    \ a new\ninstance can be flooded only once every MinLSInterval seconds.  This\n\
    guards against routers that disregard the limit on self-originated\nadvertisements\
    \ (already present in OSPF version 1) of one origination\nevery MinLSInterval\
    \ seconds.  For more information, see Section 13.\nF.3 Packet format changes\n\
    The following changes have been made to the format of OSPF packets and\nlink state\
    \ advertisements.  Some of these changes were required to\nsupport the added functionality\
    \ listed above.  Other changes were made\nto further simplify the parsing of OSPF\
    \ packets.\nF.3.1 Adding a Capability bitfield\nTo support the new \"stub area\"\
    \ and \"optional TOS\" features, a bitfield\nlisting protocol capabilities has\
    \ been added to the Hello packet,\nDatabase Description packet and all link state\
    \ advertisements.  When\nused in Hello packets, this allows a router to reject\
    \ a neighbor because\nof a capability mismatch.  Alternatively, when capabilities\
    \ are\nexchanged in Database Description packets a router can choose not to\n\
    forward certain link state advertisements to a neighbor because of its\nreduced\
    \ functionality.  Lastly, listing capabilities in link state\nadvertisements allows\
    \ routers to route traffic around reduced\nfunctionality router, by excluding\
    \ them from parts of the routing table\ncalculation.  See Section A.2 for more\
    \ details.\nF.3.2 Packet simplification\nTo simplify the format of Database Description\
    \ packets and Link State\nAcknowledgment packets, their description of link state\
    \ advertisements\nhas been modified.  Each advertisement is now be described by\
    \ its 20-\nbyte link state header (see Section A.4).  This does not consume any\n\
    additional space in the packets.  The one additional piece of\ninformation that\
    \ will be present is the LS length.  However, this field\nneed not be used when\
    \ processing the Database Description and Link State\nAcknowledgment packets.\n\
    F.3.3 Adding forwarding addresses to AS external advertisements\nAs discussed\
    \ in Section F.1.3, a forwarding address field has been added\nto the AS external\
    \ advertisement.\nF.3.4 Labelling of virtual links\nVirtual links will be labelled\
    \ as such in router links advertisements.\nThis separates virtual links from unnumbered\
    \ point-to-point links,\nallowing all backbone routers to discover whether any\
    \ virtual links are\nin use.  See Section 12.4.1 for more details.\nF.3.5 TOS\
    \ costs ordered\nWhen a link state advertisement specifies a separate cost depending\
    \ on\nTOS, these costs must be ordered by increasing TOS value.  For example,\n\
    the cost for TOS 16 must always follow the cost for TOS 8.\nF.3.6 OSPF's TOS encoding\
    \ redefined\nThe way that OSPF encodes TOS in its link state advertisements has\
    \ been\nredefined in version 2. OSPF's encoding of the Delay (D), Throughput (T)\n\
    and Reliability (R) TOS flags defined by [RFC 791] is described in\nSection 12.3.\n\
    F.4 Backward-compatibility provisions\nAdditional functionality will probably\
    \ be added to OSPF in the future.\nOne example of this is a multicast routing\
    \ capability, which is\ncurrently under development.  In order to be able to add\
    \ such features\nin a backward-compatible manner, the following provisions have\
    \ been made\nin the OSPF specification.\nNew capabilities will probably involve\
    \ the introduction of new link\nstate advertisements.  If a router receives a\
    \ link state advertisement\nof unknown type during the flooding procedure, the\
    \ advertisement is\nsimply ignored (Section 13.  The router should not attempt\
    \ to further\nflood the advertisement, nor acknowledge it.  The advertisement\
    \ should\nnot be installed into the link state database.  If the router receives\n\
    an advertisement of unknown type during the Database Description\nprocess, this\
    \ is an error (see Sections 10.6 and 10.3).  The Database\nDescription process\
    \ is then restarted.\nThere is also an Options field in both the Hello packets,\
    \ Database\nDescription packets and the link state advertisement headers.\nUnrecognized\
    \ capabilities found in these places should be ignored, and\nshould not affect\
    \ the normal processing of protocol packets/link state\nadvertisements (see Sections\
    \ 10.5 and 10.6).  Routers will originate\ntheir Hello packets, Database Description\
    \ packets and link state\nadvertisements with unrecognized capabilities set to\
    \ 0 (see Sections\n9.5, 10.8 and 12.1.2).\nSecurity Considerations\nAll OSPF protocol\
    \ exchanges are authenticated. This is accomplished\nthrough authentication fields\
    \ contained in the OSPF packet header. For\nmore information, see Sections 8.1,\
    \ 8.2, and Appendix E.\nAuthor's Address\nJohn Moy\nProteon, Inc.\n2 Technology\
    \ Drive\nWestborough, MA 01581\nPhone: (508) 898-2800\nEMail: jmoy@proteon.com\n"
