- title: __initial_text__
  contents:
  - '            TCP SYN Flooding Attacks and Common Mitigations

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes TCP SYN flooding attacks, which have been\n\
    \   well-known to the community for several years.  Various\n   countermeasures\
    \ against these attacks, and the trade-offs of each,\n   are described.  This\
    \ document archives explanations of the attack and\n   common defense techniques\
    \ for the benefit of TCP implementers and\n   administrators of TCP servers or\
    \ networks, but does not make any\n   standards-level recommendations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Attack Description . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n     2.1.  History  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     2.2.  Theory of Operation  . . . . . . . . . . . . . . . .\
    \ . . .  3\n   3.  Common Defenses  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n     3.1.  Filtering  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     3.2.  Increasing Backlog . . . . . . . . . . . . . . . . . . . .\
    \  7\n     3.3.  Reducing SYN-RECEIVED Timer  . . . . . . . . . . . . . . .  7\n\
    \     3.4.  Recycling the Oldest Half-Open TCB . . . . . . . . . . . .  7\n  \
    \   3.5.  SYN Cache  . . . . . . . . . . . . . . . . . . . . . . . .  8\n    \
    \ 3.6.  SYN Cookies  . . . . . . . . . . . . . . . . . . . . . . .  8\n     3.7.\
    \  Hybrid Approaches  . . . . . . . . . . . . . . . . . . . . 10\n     3.8.  Firewalls\
    \ and Proxies  . . . . . . . . . . . . . . . . . . 10\n   4.  Analysis . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 11\n   5.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 13\n   6.  Acknowledgements . . . . .\
    \ . . . . . . . . . . . . . . . . . . 13\n   7.  Informative References . . .\
    \ . . . . . . . . . . . . . . . . . 13\n   Appendix A.  SYN Cookies Description\
    \ . . . . . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SYN flooding attack is a denial-of-service method affecting\
    \ hosts\n   that run TCP server processes.  The attack takes advantage of the\n\
    \   state retention TCP performs for some time after receiving a SYN\n   segment\
    \ to a port that has been put into the LISTEN state.  The basic\n   idea is to\
    \ exploit this behavior by causing a host to retain enough\n   state for bogus\
    \ half-connections that there are no resources left to\n   establish new legitimate\
    \ connections.\n   This SYN flooding attack has been well-known to the community\
    \ for\n   many years, and has been observed in the wild by network operators\n\
    \   and end hosts.  A number of methods have been developed and deployed\n   to\
    \ make SYN flooding less effective.  Despite the notoriety of the\n   attack,\
    \ and the widely available countermeasures, the RFC series only\n   documented\
    \ the vulnerability as an example motivation for ingress\n   filtering [RFC2827],\
    \ and has not suggested any mitigation techniques\n   for TCP implementations.\
    \  This document addresses both points, but\n   does not define any standards.\
    \  Formal specifications and\n   requirements of defense mechanisms are outside\
    \ the scope of this\n   document.  Many defenses only impact an end host's implementation\n\
    \   without changing interoperability.  These may not require\n   standardization,\
    \ but their side-effects should at least be well\n   understood.\n   This document\
    \ intentionally focuses on SYN flooding attacks from an\n   individual end host\
    \ or application's perspective, as a means to deny\n   service to that specific\
    \ entity.  High packet-rate attacks that\n   target the network's packet-processing\
    \ capability and capacity have\n   been observed operationally.  Since such attacks\
    \ target the network,\n   and not a TCP implementation, they are out of scope\
    \ for this\n   document, whether or not they happen to use TCP SYN segments as\
    \ part\n   of the attack, as the nature of the packets used is irrelevant in\n\
    \   comparison to the packet-rate in such attacks.\n   The majority of this document\
    \ consists of three sections.  Section 2\n   explains the SYN flooding attack\
    \ in greater detail.  Several common\n   mitigation techniques are described in\
    \ Section 3.  An analysis and\n   discussion of these techniques and their use\
    \ is presented in\n   Section 4.  Further information on SYN cookies is contained\
    \ in\n   Appendix A.\n"
- title: 2.  Attack Description
  contents:
  - "2.  Attack Description\n   This section describes both the history and the technical\
    \ basis of\n   the SYN flooding attack.\n"
- title: 2.1.  History
  contents:
  - "2.1.  History\n   The TCP SYN flooding weakness was discovered as early as 1994\
    \ by Bill\n   Cheswick and Steve Bellovin [B96].  They included, and then removed,\n\
    \   a paragraph on the attack in their book \"Firewalls and Internet\n   Security:\
    \ Repelling the Wily Hacker\" [CB94].  Unfortunately, no\n   countermeasures were\
    \ developed within the next two years.\n   The SYN flooding attack was first publicized\
    \ in 1996, with the\n   release of a description and exploit tool in Phrack Magazine\n\
    \   [P48-13].  Aside from some minor inaccuracies, this article is of\n   high\
    \ enough quality to be useful, and code from the article was\n   widely distributed\
    \ and used.\n   By September of 1996, SYN flooding attacks had been observed in\
    \ the\n   wild.  Particularly, an attack against one ISP's mail servers caused\n\
    \   well-publicized outages.  CERT quickly released an advisory on the\n   attack\
    \ [CA-96.21].  SYN flooding was particularly serious in\n   comparison to other\
    \ known denial-of-service attacks at the time.\n   Rather than relying on the\
    \ common brute-force tactic of simply\n   exhausting the network's resources,\
    \ SYN flooding targets end-host\n   resources, which require fewer packets to\
    \ deplete.\n   The community quickly developed many widely differing techniques\
    \ for\n   preventing or limiting the impact of SYN flooding attacks.  Many of\n\
    \   these have been deployed to varying degrees on the Internet, in both\n   end\
    \ hosts and intervening routers.  Some of these techniques have\n   become important\
    \ pieces of the TCP implementations in certain\n   operating systems, although\
    \ some significantly diverge from the TCP\n   specification and none of these\
    \ techniques have yet been standardized\n   or sanctioned by the IETF process.\n"
- title: 2.2.  Theory of Operation
  contents:
  - "2.2.  Theory of Operation\n   As described in RFC 793, a TCP implementation may\
    \ allow the LISTEN\n   state to be entered with either all, some, or none of the\
    \ pair of IP\n   addresses and port numbers specified by the application.  In\
    \ many\n   common applications like web servers, none of the remote host's\n \
    \  information is pre-known or preconfigured, so that a connection can\n   be\
    \ established with any client whose details are unknown to the\n   server ahead\
    \ of time.  This type of \"unbound\" LISTEN is the target of\n   SYN flooding\
    \ attacks due to the way it is typically implemented by\n   operating systems.\n\
    \   For success, the SYN flooding attack relies on the victim host TCP\n   implementation's\
    \ behavior.  In particular, it assumes that the victim\n   allocates state for\
    \ every TCP SYN segment when it is received, and\n   that there is a limit on\
    \ the amount of such state than can be kept at\n   any time.  The current base\
    \ TCP specification, RFC 793 [RFC0793],\n   describes the standard processing\
    \ of incoming SYN segments.  RFC 793\n   describes the concept of a Transmission\
    \ Control Block (TCB) data\n   structure to store all the state information for\
    \ an individual\n   connection.  In practice, operating systems may implement\
    \ this\n   concept rather differently, but the key is that each TCP connection\n\
    \   requires some memory space.\n   Per RFC 793, when a SYN is received for a\
    \ local TCP port where a\n   connection is in the LISTEN state, then the state\
    \ transitions to SYN-\n   RECEIVED, and some of the TCB is initialized with information\
    \ from\n   the header fields of the received SYN segment.  In practice, many\n\
    \   operating systems do not alter the TCB in LISTEN, but instead make a\n   copy\
    \ of the TCB and perform the state transition and update on the\n   copy.  This\
    \ is done so that the local TCP port may be shared amongst\n   several distinct\
    \ connections.  This TCB-copying behavior is not\n   actually essential for this\
    \ purpose, but influences the way in which\n   applications that wish to handle\
    \ multiple simultaneous connections\n   through a single TCP port are written.\
    \  The crucial result of this\n   behavior is that, instead of updating already-allocated\
    \ memory, new\n   (or unused) memory must be devoted to the copied TCB.\n   As\
    \ an example, in the Linux 2.6.10 networking code, a \"sock\"\n   structure is\
    \ used to implement the TCB concept.  By examination, this\n   structure takes\
    \ over 1300 bytes to store in memory.  In other systems\n   that implement less-complex\
    \ TCP algorithms and options, the overhead\n   may be less, although it typically\
    \ exceeds 280 bytes [SKK+97].\n   To protect host memory from being exhausted\
    \ by connection requests,\n   the number of TCB structures that can be resident\
    \ at any time is\n   usually limited by operating system kernels.  Systems vary\
    \ on whether\n   limits are globally applied or local to a particular port number.\n\
    \   There is also variation on whether the limits apply to fully\n   established\
    \ connections as well as those in SYN-RECEIVED.  Commonly,\n   systems implement\
    \ a parameter to the typical listen() system call\n   that allows the application\
    \ to suggest a value for this limit, called\n   the backlog.  When the backlog\
    \ limit is reached, then either incoming\n   SYN segments are ignored, or uncompleted\
    \ connections in the backlog\n   are replaced.  The concept of using a backlog\
    \ is not described in the\n   standards documents, so the failure behavior when\
    \ the backlog is\n   reached might differ between stacks (for instance, TCP RSTs\
    \ might be\n   generated).  The exact failure behavior will determine whether\n\
    \   initiating hosts continue to retransmit SYN segments over time, or\n   quickly\
    \ cease.  These differences in implementation are acceptable\n   since they only\
    \ affect the behavior of the local stack when its\n   resources are constrained,\
    \ and do not cause interoperability\n   problems.\n   The SYN flooding attack\
    \ does not attempt to overload the network's\n   resources or the end host's memory,\
    \ but merely attempts to exhaust\n   the backlog of half-open connections associated\
    \ with a port number.\n   The goal is to send a quick barrage of SYN segments\
    \ from IP addresses\n   (often spoofed) that will not generate replies to the\
    \ SYN-ACKs that\n   are produced.  By keeping the backlog full of bogus half-opened\n\
    \   connections, legitimate requests will be rejected.  Three important\n   attack\
    \ parameters for success are the size of the barrage, the\n   frequency with which\
    \ barrages are generated, and the means of\n   selecting IP addresses to spoof.\n\
    \   Barrage Size\n      To be effective, the size of the barrage must be made\
    \ large enough\n      to reach the backlog.  Ideally, the barrage size is no larger\
    \ than\n      the backlog, minimizing the volume of traffic the attacker must\n\
    \      source.  Typical default backlog values vary from a half-dozen to\n   \
    \   several dozen, so the attack might be tailored to the particular\n      value\
    \ determined by the victim host and application.  On machines\n      intended\
    \ to be servers, especially for a high volume of traffic,\n      the backlogs\
    \ are often administratively configured to higher\n      values.\n   Barrage Frequency\n\
    \      To limit the lifetime of half-opened connection state, TCP\n      implementations\
    \ commonly reclaim memory from half-opened\n      connections if they do not become\
    \ fully opened after some time\n      period.  For instance, a timer of 75 seconds\
    \ [SKK+97] might be set\n      when the first SYN-ACK is sent, and on expiration\
    \ cause SYN-ACK\n      retransmissions to cease and the TCB to be released.  The\
    \ TCP\n      specifications do not include this behavior of giving up on\n   \
    \   connection establishment after an arbitrary time.  Some purists\n      have\
    \ expressed that the TCP implementation should continue\n      retransmitting\
    \ SYN and SYN-ACK segments without artificial bounds\n      (but with exponential\
    \ backoff to some conservative rate) until the\n      application gives up.  Despite\
    \ this, common operating systems\n      today do implement some artificial limit\
    \ on half-open TCB\n      lifetime.  For instance, backing off and stopping after\
    \ a total of\n      511 seconds can be observed in 4.4 BSD-Lite [Ste95], and is\
    \ still\n      practiced in some operating systems derived from this code.\n \
    \     To remain effective, a SYN flooding attack needs to send new\n      barrages\
    \ of bogus connection requests as soon as the TCBs from the\n      previous barrage\
    \ begin to be reclaimed.  The frequency of barrages\n      are tailored to the\
    \ victim TCP implementation's TCB reclamation\n      timer.  Frequencies higher\
    \ than needed source more packets,\n      potentially drawing more attention,\
    \ and frequencies that are too\n      low will allow windows of time where legitimate\
    \ connections can be\n      established.\n   IP Address Selection\n      For an\
    \ effective attack, it is important that the spoofed IP\n      addresses be unresponsive\
    \ to the SYN-ACK segments that the victim\n      will generate.  If addresses\
    \ of normal connected hosts are used,\n      then those hosts will send the victim\
    \ a TCP reset segment that\n      will immediately free the corresponding TCB\
    \ and allow room in the\n      backlog for legitimate connections to be made.\
    \  The code\n      distributed in the original Phrack article used a single source\n\
    \      address for all spoofed SYN segments.  This makes the attack\n      segments\
    \ somewhat easier to identify and filter.  A strong\n      attacker will have\
    \ a list of unresponsive and unrelated addresses\n      that it chooses spoofed\
    \ source addresses from.\n   It is important to note that this attack is directed\
    \ at particular\n   listening applications on a host, and not the host itself\
    \ or the\n   network.  The attack also attempts to prevent only the establishment\n\
    \   of new incoming connections to the victim port, and does not impact\n   outgoing\
    \ connection requests, nor previously established connections\n   to the victim\
    \ port.\n   In practice, an attacker might choose not to use spoofed IP\n   addresses,\
    \ but instead to use a multitude of hosts to initiate a SYN\n   flooding attack.\
    \  For instance, a collection of compromised hosts\n   under the attacker's control\
    \ (i.e., a \"botnet\") could be used.  In\n   this case, each host utilized in\
    \ the attack would have to suppress\n   its operating system's native response\
    \ to the SYN-ACKs coming from\n   the target.  It is also possible for the attack\
    \ TCP segments to\n   arrive in a more continuous fashion than the \"barrage\"\
    \ terminology\n   used here suggests; as long as the rate of new SYNs exceeds\
    \ the rate\n   at which TCBs are reaped, the attack will be successful.\n"
- title: 3.  Common Defenses
  contents:
  - "3.  Common Defenses\n   This section discusses a number of defense techniques\
    \ that are known\n   to the community, many of which are available in off-the-shelf\n\
    \   products.\n"
- title: 3.1.  Filtering
  contents:
  - "3.1.  Filtering\n   Since in the absence of an army of controlled hosts, the\
    \ ability to\n   send packets with spoofed source IP addresses is required for\
    \ this\n   attack to work, removing an attacker's ability to send spoofed IP\n\
    \   packets is an effective solution that requires no modifications to\n   TCP.\
    \  The filtering techniques described in RFCs 2827, 3013, and 3704\n   represent\
    \ the best current practices for packet filtering based on IP\n   addresses [RFC2827][RFC3013][RFC3704].\
    \  While perfectly effective,\n   end hosts should not rely on filtering policies\
    \ to prevent attacks\n   from spoofed segments, as global deployment of filters\
    \ is neither\n   guaranteed nor likely.  An attacker with the ability to use a\
    \ group\n   of compromised hosts or to rapidly change between different access\n\
    \   providers will also make filtering an impotent solution.\n"
- title: 3.2.  Increasing Backlog
  contents:
  - "3.2.  Increasing Backlog\n   An obvious attempt at a defense is for end hosts\
    \ to use a larger\n   backlog.  Lemon has shown that in FreeBSD 4.4, this tactic\
    \ has some\n   serious negative aspects as the size of the backlog grows [Lem02].\n\
    \   The implementation has not been designed to scale past backlogs of a\n   few\
    \ hundred, and the data structures and search algorithms that it\n   uses are\
    \ inefficient with larger backlogs.  It is reasonable to\n   assume that other\
    \ TCP implementations have similar design factors\n   that limit their performance\
    \ with large backlogs, and there seems to\n   be no compelling reason why stacks\
    \ should be re-engineered to support\n   extremely large backlogs, since other\
    \ solutions are available.\n   However, experiments with large backlogs using\
    \ efficient data\n   structures and search algorithms have not been conducted,\
    \ to our\n   knowledge.\n"
- title: 3.3.  Reducing SYN-RECEIVED Timer
  contents:
  - "3.3.  Reducing SYN-RECEIVED Timer\n   Another quickly implementable defense is\
    \ shortening the timeout\n   period between receiving a SYN and reaping the created\
    \ TCB for lack\n   of progress.  Decreasing the timer that limits the lifetime\
    \ of TCBs\n   in SYN-RECEIVED is also flawed.  While a shorter timer will keep\n\
    \   bogus connection attempts from persisting for as long in the backlog,\n  \
    \ and thus free up space for legitimate connections sooner, it can\n   prevent\
    \ some fraction of legitimate connections from becoming fully\n   established.\
    \  This tactic is also ineffective because it only\n   requires the attacker to\
    \ increase the barrage frequency by a linearly\n   proportional amount.  This\
    \ timer reduction is sometimes implemented\n   as a response to crossing some\
    \ threshold in the backlog occupancy, or\n   some rate of SYN reception.\n"
- title: 3.4.  Recycling the Oldest Half-Open TCB
  contents:
  - "3.4.  Recycling the Oldest Half-Open TCB\n   Once the entire backlog is exhausted,\
    \ some implementations allow\n   incoming SYNs to overwrite the oldest half-open\
    \ TCB entry.  This\n   works under the assumption that legitimate connections\
    \ can be fully\n   established in less time than the backlog can be filled by\
    \ incoming\n   attack SYNs.  This can fail when the attacking packet rate is high\n\
    \   and/or the backlog size is small, and is not a robust defense.\n"
- title: 3.5.  SYN Cache
  contents:
  - "3.5.  SYN Cache\n   The SYN cache, best described by Lemon [Lem02], is based\
    \ on\n   minimizing the amount of state that a SYN allocates, i.e., not\n   immediately\
    \ allocating a full TCB.  The full state allocation is\n   delayed until the connection\
    \ has been fully established.  Hosts\n   implementing a SYN cache have some secret\
    \ bits that they select from\n   the incoming SYN segments.  The secret bits are\
    \ hashed along with the\n   IP addresses and TCP ports of a segment, and the hash\
    \ value\n   determines the location in a global hash table where the incomplete\n\
    \   TCB is stored.  There is a bucket limit for each hash value, and when\n  \
    \ this limit is reached, the oldest entry is dropped.\n   The SYN cache technique\
    \ is effective because the secret bits prevent\n   an attacker from being able\
    \ to target specific hash values for\n   overflowing the bucket limit, and it\
    \ bounds both the CPU time and\n   memory requirements.  Lemon's evaluation of\
    \ the SYN cache shows that\n   even under conditions where a SYN flooding attack\
    \ is not being\n   performed, due to the modified processing path, connection\n\
    \   establishment is slightly more expedient.  Under active attack, SYN\n   cache\
    \ performance was observed to approximately linearly shift the\n   distribution\
    \ of times to establish legitimate connections to about\n   15% longer than when\
    \ not under attack [Lem02].\n   If data accompanies the SYN segment, then this\
    \ data is not\n   acknowledged or stored by the receiver, and will require\n \
    \  retransmission.  This does not affect the reliability of TCP's data\n   transfer\
    \ service, but it does affect its performance to some small\n   extent.  SYNs\
    \ carrying data are used by the T/TCP extensions\n   [RFC1644].  While T/TCP is\
    \ implemented in a number of popular\n   operating systems [GN00], it currently\
    \ seems to be rarely used.\n   Measurements at one site's border router [All07]\
    \ logged 2,545,785 SYN\n   segments (not SYN-ACKs), of which 36 carried the T/TCP\
    \ CCNEW option\n   (or 0.001%).  These came from 26 unique hosts, and no other\
    \ T/TCP\n   options were seen. 2,287 SYN segments with data were seen (or 0.09%\n\
    \   of all SYN segments), all of which had exactly 24 bytes of data.\n   These\
    \ observations indicate that issues with SYN caches and data on\n   SYN segments\
    \ may not be significant in deployment.\n"
- title: 3.6.  SYN Cookies
  contents:
  - "3.6.  SYN Cookies\n   SYN cookies go a step further and allocate no state at\
    \ all for\n   connections in SYN-RECEIVED.  Instead, they encode most of the state\n\
    \   (and all of the strictly required) state that they would normally\n   keep\
    \ into the sequence number transmitted on the SYN-ACK.  If the SYN\n   was not\
    \ spoofed, then the acknowledgement number (along with several\n   other fields)\
    \ in the ACK that completes the handshake can be used to\n   reconstruct the state\
    \ to be put into the TCB.  To date, one of the\n   best references on SYN cookies\
    \ can be found on Dan Bernstein's web\n   site [cr.yp.to].  This technique exploits\
    \ the long-understood low\n   entropy in TCP header fields [RFC1144][RFC4413].\
    \  In Appendix A, we\n   describe the SYN cookie technique, to avoid the possibility\
    \ that the\n   web page will become unavailable.\n   The exact mechanism for encoding\
    \ state into the SYN-ACK sequence\n   number can be implementation dependent.\
    \  A common consideration is\n   that to prevent replay, some time-dependent random\
    \ bits must be\n   embedded in the sequence number.  One technique used 7 bits\
    \ for these\n   bits and 25 bits for the other data [Lem02].  One way to encode\
    \ these\n   bits has been to XOR the initial sequence number received with a\n\
    \   truncated cryptographic hash of the IP address and TCP port number\n   pairs,\
    \ and secret bits.  In practice, this hash has been generated\n   using MD5 [RFC1321].\
    \  Any similar one-way hash could be used instead\n   without impacting interoperability\
    \ since the hash value is checked by\n   the same host who generates it.\n   The\
    \ problem with SYN cookies is that commonly implemented schemes are\n   incompatible\
    \ with some TCP options, if the cookie generation scheme\n   does not consider\
    \ them.  For example, an encoding of the Maximum\n   Segment Size (MSS) advertised\
    \ on the SYN has been accommodated by\n   using 2 sequence number bits to represent\
    \ 4 predefined common MSS\n   values.  Similar techniques would be required for\
    \ some other TCP\n   options, while negotiated use of other TCP options can be\
    \ detected\n   implicitly.  A timestamp on the ACK, as an example, indicates that\n\
    \   Timestamp use was successfully negotiated on the SYN and SYN-ACK,\n   while\
    \ the reception of a Selective Acknowledgement (SACK) option at\n   some point\
    \ during the connection implies that SACK was negotiated.\n   Note that SACK blocks\
    \ should normally not be sent by a host using TCP\n   cookies unless they are\
    \ first received.  For the common\n   unidirectional data flow in many TCP connections,\
    \ this can be a\n   problem, as it limits SACK usage.  For this reason, SYN cookies\n\
    \   typically are not used by default on systems that implement them, and\n  \
    \ are only enabled either under high-stress conditions indicative of an\n   attack,\
    \ or via administrative action.\n   Recently, a new SYN cookie technique developed\
    \ for release in FreeBSD\n   7.0 leverages the bits of the Timestamp option in\
    \ addition to the\n   sequence number bits for encoding state.  Since the Timestamp\
    \ value\n   is echoed back in the Timestamp Echo field of the ACK packet, any\n\
    \   state stored in the Timestamp option can be restored similarly to the\n  \
    \ way that it is from the sequence number / acknowledgement in a basic\n   SYN\
    \ cookie.  Using the Timestamp bits, it is possible to explicitly\n   store state\
    \ bits for things like send and receive window scales,\n   SACK-allowed, and TCP-MD5-enabled,\
    \ for which there is no room in a\n   typical SYN cookie.  This use of Timestamps\
    \ to improve the\n   compromises inherent in SYN cookies is unique to the FreeBSD\n\
    \   implementation, to our knowledge.  A limitation is that the technique\n  \
    \ can only be used if the SYN itself contains a Timestamp option, but\n   this\
    \ option seems to be widely implemented today, and hosts that\n   support window\
    \ scaling and SACK typically support timestamps as well.\n   Similarly to SYN\
    \ caches, SYN cookies do not handle application data\n   piggybacked on the SYN\
    \ segment.\n   Another problem with SYN cookies is for applications where the\
    \ first\n   application data is sent by the passive host.  If this host is\n \
    \  handling a large number of connections, then packet loss may be\n   likely.\
    \  When a handshake-completing ACK from the initiator is lost,\n   the passive\
    \ side's application layer never is notified of the\n   connection's existence\
    \ and never sends data, even though the\n   initiator thinks that the connection\
    \ has been successfully\n   established.  An example application where the first\
    \ application-\n   layer data is sent by the passive side is SMTP, if implemented\n\
    \   according to RFC 2821, where a \"service ready\" message is sent by the\n\
    \   passive side after the TCP handshake is completed.\n   Although SYN cookie\
    \ implementations exist and are deployed, the use\n   of SYN cookies is often\
    \ disabled in default configurations, so it is\n   unclear how much operational\
    \ experience actually exists with them or\n   if using them opens up new vulnerabilities.\
    \  Anecdotes of incidents\n   where SYN cookies have been used on typical web\
    \ servers seem to\n   indicate that the added processing burden of computing MD5\
    \ sums for\n   every SYN packet received is not significant in comparison to the\n\
    \   loss of application availability when undefended.  For some\n   computationally\
    \ constrained mobile or embedded devices, this\n   situation might be different.\n"
- title: 3.7.  Hybrid Approaches
  contents:
  - "3.7.  Hybrid Approaches\n   The SYN cache and SYN cookie techniques can be combined.\
    \  For\n   example, in the event that the cache becomes full, then SYN cookies\n\
    \   can be sent instead of purging cache entries upon the arrival of new\n   SYNs.\
    \  Such hybrid approaches may provide a strong combination of the\n   positive\
    \ aspects of each approach.  Lemon has demonstrated the\n   utility of this hybrid\
    \ [Lem02].\n"
- title: 3.8.  Firewalls and Proxies
  contents:
  - "3.8.  Firewalls and Proxies\n   Firewall-based tactics may also be used to defend\
    \ end hosts from SYN\n   flooding attacks.  The basic concept is to offload the\
    \ connection\n   establishment procedures onto a firewall that screens connection\n\
    \   attempts until they are completed and then proxies them back to\n   protected\
    \ end hosts.  This moves the problem away from end hosts to\n   become the firewall's\
    \ or proxy's problem, and may introduce other\n   problems related to altering\
    \ TCP's expected end-to-end semantics.  A\n   common tactic used in these firewall\
    \ and proxy products is to\n   implement one of the end host based techniques\
    \ discussed above, and\n   screen incoming SYNs from the protected network until\
    \ the connection\n   is fully established.  This is accomplished by spoofing the\
    \ source\n   addresses of several packets to the initiator and listener at various\n\
    \   stages of the handshake [Eddy06].\n"
- title: 4.  Analysis
  contents:
  - "4.  Analysis\n   Several of the defenses discussed in the previous section rely\
    \ on\n   changes to behavior inside the network; via router filtering,\n   firewalls,\
    \ and proxies.  These may be highly effective, and often\n   require no modification\
    \ or configuration of end-host software.  Given\n   the mobile nature and dynamic\
    \ connectivity of many end hosts, it is\n   optimistic for TCP implementers to\
    \ assume the presence of such\n   protective devices.  TCP implementers should\
    \ provide some means of\n   defense to SYN flooding attacks in end-host implementations.\n\
    \   Among end-host modifications, the SYN cache and SYN cookie approaches\n  \
    \ seem to be the only viable techniques discovered to date.  Increasing\n   the\
    \ backlog and reducing the SYN-RECEIVED timer are measurably\n   problematic.\
    \  The SYN cache implies a higher memory footprint than\n   SYN cookies; however,\
    \ SYN cookies may not be fully compatible with\n   some TCP options, and may hamper\
    \ development of future TCP extensions\n   that require state.  For these reasons,\
    \ SYN cookies should not be\n   enabled by default on systems that provide them.\
    \  SYN caches do not\n   have the same negative implications and may be enabled\
    \ as a default\n   mode of processing.\n   In October of 1996, Dave Borman implemented\
    \ a SYN cache at BSDi for\n   BSD/OS, which was given to the community with no\
    \ restrictions.  This\n   code seems to be the basis for the SYN cache implementations\
    \ adopted\n   later in other BSD variants.  The cache was used when the backlog\n\
    \   became full, rather than by default, as we have described.  A note to\n  \
    \ the tcp-impl mailing list explains that this code does not retransmit\n   SYN-ACKs\
    \ [B97].  More recent implementations have chosen to reverse\n   this decision\
    \ and retransmit SYN-ACKs.  It is known that loss of SYN-\n   ACK packets is not\
    \ uncommon [SD01] and can severely slow the\n   performance of connections when\
    \ initial retransmission timers for\n   SYNs are overly conservative (as in some\
    \ operating systems) or\n   retransmitted SYNs are lost.  Furthermore, if a SYN\
    \ flooding attacker\n   has a high sending rate, loss of retransmitted SYNs is\
    \ likely, so if\n   SYN-ACKs are not retransmitted, the chance of efficiently\n\
    \   establishing legitimate connections is reduced.\n   In 1997, NetBSD incorporated\
    \ a modified version of Borman's code.\n   Two notable differences from the original\
    \ code stem from the decision\n   to use the cache by default (for all connections).\
    \  This implied the\n   need to perform retransmissions for SYN-ACKs, and to use\
    \ larger\n   structures to keep more complete data.  The original structure was\
    \ 32\n   bytes long for IPv4 connections and 56 bytes with IPv6 support, while\n\
    \   the current FreeBSD structure is 196 bytes long.  As previously\n   cited,\
    \ Lemon implemented the SYN cache and cookie techniques in\n   FreeBSD 4.4 [Lem02].\
    \  Lemon notes that a SYN cache structure took up\n   160 bytes compared to 736\
    \ for the full TCB (now 196 bytes for the\n   cache structure).  We have examined\
    \ the OpenBSD 3.6 code and\n   determined that it includes a similar SYN cache.\n\
    \   Linux 2.6.5 code, also by examination, contains a SYN cookie\n   implementation\
    \ that encodes 8 MSS values, and does not use SYN\n   cookies by default.  This\
    \ functionality has been present in the Linux\n   kernel for several years previous\
    \ to 2.6.5.\n   When a SYN cache and/or SYN cookies are implemented with IPv6,\
    \ the\n   IPv6 flow label value used on the SYN-ACK should be consistent with\n\
    \   the flow label used for the rest of the packets within that flow.\n   There\
    \ have been implementation bugs that caused random flow labels to\n   be used\
    \ in SYN-ACKs generated by SYN cache and SYN cookie code\n   [MM05].\n   Beginning\
    \ with Windows 2000, Microsoft's Windows operating systems\n   have had a \"TCP\
    \ SYN attack protection\" feature, which can be toggled\n   on or off in the registry.\
    \  This defaulted to off, until Windows 2003\n   SP1, in which it is on by default.\
    \  With this feature enabled, when\n   the number of half-open connections and\
    \ half-open connections with\n   retransmitted SYN-ACKs exceeds configurable thresholds,\
    \ then the\n   number of times that SYN-ACKs are retransmitted before giving up\
    \ is\n   reduced, and the \"Route Cache Entry\" creation is delayed, which\n \
    \  prevents some features (e.g., window scaling) from being used\n   [win2k3-wp].\n\
    \   Several vendors of commercial firewall products sell devices that can\n  \
    \ mitigate SYN flooding's effects on end hosts by proxying connections.\n   Discovery\
    \ and exploitation of the SYN flooding vulnerability in TCP's\n   design provided\
    \ a valuable lesson for protocol designers.  The Stream\n   Control Transmission\
    \ Protocol [RFC2960], which was designed more\n   recently, incorporated a 4-way\
    \ handshake with a stateless cookie-\n   based component for the listening end.\
    \  In this way, the passive-\n   opening side has better evidence that the initiator\
    \ really exists at\n   the given address before it allocates any state.  The Host\
    \ Identity\n   Protocol base exchange [MNJH07] is similarly designed as a 4-way\n\
    \   handshake, but also involves a puzzle sent to the initiator that must\n  \
    \ be solved before any state is reserved by the responder.  The general\n   concept\
    \ of designing statelessness into protocol setup to avoid\n   denial-of-service\
    \ attacks has been discussed by Aura and Nikander\n   [AN97].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The SYN flooding attack on TCP has been described\
    \ in numerous other\n   publications, and the details and code needed to perform\
    \ the attack\n   have been easily available for years.  Describing the attack\
    \ in this\n   document does not pose any danger of further publicizing this\n\
    \   weakness in unmodified TCP stacks.  Several widely deployed operating\n  \
    \ systems implement the mitigation techniques that this document\n   discusses\
    \ for defeating SYN flooding attacks.  In at least some\n   cases, these operating\
    \ systems do not enable these countermeasures by\n   default; however, the mechanisms\
    \ for defeating SYN flooding are well\n   deployed, and easily enabled by end-users.\
    \  The publication of this\n   document should not influence the number of SYN\
    \ flooding attacks\n   observed, and might increase the robustness of the Internet\
    \ to such\n   attacks by encouraging use of the commonly available mitigations.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   A conversation with Ted Faber was the impetus for writing\
    \ this\n   document.  Comments and suggestions from Joe Touch, Dave Borman,\n\
    \   Fernando Gont, Jean-Baptiste Marchand, Christian Huitema, Caitlin\n   Bestler,\
    \ Pekka Savola, Andre Oppermann, Alfred Hoenes, Mark Allman,\n   Lars Eggert,\
    \ Pasi Eronen, Warren Kumari, David Malone, Ron Bonica,\n   and Lisa Dusseault\
    \ were useful in strengthening this document.  The\n   original work on TCP SYN\
    \ cookies presented in Appendix A is due to\n   D.J. Bernstein.\n   Work on this\
    \ document was performed at NASA's Glenn Research Center.\n   Funding was partially\
    \ provided by a combination of NASA's Advanced\n   Communications, Navigation,\
    \ and Surveillance Architectures and System\n   Technologies (ACAST) project,\
    \ the Sensis Corporation, NASA's Space\n   Communications Architecture Working\
    \ Group, and NASA's Earth Science\n   Technology Office.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [AN97]       Aura, T. and P. Nikander, \"Stateless\
    \ Connections\",\n                Proceedings of the First International Conference\
    \ on\n                Information and Communication Security, 1997.\n   [All07]\
    \      Allman, M., \"personal communication\", February 2007.\n   [B96]      \
    \  Bennahum, D., \"PANIX ATTACK\", MEME 2.12, October 1996,\n                <http://memex.org/meme2-12.html>.\n\
    \   [B97]        Borman, D., \"Re: SYN/RST cookies (was Re: a quick\n        \
    \        clarification...)\", IETF tcp-impl mailing list,\n                June\
    \ 1997.\n   [CA-96.21]   CERT, \"CERT Advisory CA-1996-21 TCP SYN Flooding and\
    \ IP\n                Spoofing Attacks\", September 1996.\n   [CB94]       Cheswick,\
    \ W. and S. Bellovin, \"Firewalls and Internet\n                Security\", ISBN:\
    \ 0201633574, January 1994.\n   [Eddy06]     Eddy, W., \"Defenses Against TCP\
    \ SYN Flooding Attacks\",\n                Cisco Internet Protocol Journal Volume\
    \ 8, Number 4,\n                December 2006.\n   [GN00]       Griffin, M. and\
    \ J. Nelson, \"T/TCP: TCP for\n                Transactions\", Linux Journal,\
    \ February 2000.\n   [Lem02]      Lemon, J., \"Resisting SYN Flood DoS Attacks\
    \ with a SYN\n                Cache\", BSDCON 2002, February 2002.\n   [MM05]\
    \       McGann, O. and D. Malone, \"Flow Label Filtering\n                Feasibility\"\
    , European Conference on Computer Network\n                Defense 2005, December\
    \ 2005.\n   [MNJH07]     Moskowitz, R., Nikander, P., Jokela, P., and T.\n   \
    \             Henderson, \"Host Identity Protocol\", Work in Progress,\n     \
    \           June 2007.\n   [P48-13]     daemon9, route, and infinity, \"Project\
    \ Neptune\", Phrack\n                Magazine, Volume 7, Issue 48, File 13 of\
    \ 18, July 1996.\n   [RFC0793]    Postel, J., \"Transmission Control Protocol\"\
    , STD 7,\n                RFC 793, September 1981.\n   [RFC1144]    Jacobson,\
    \ V., \"Compressing TCP/IP headers for low-speed\n                serial links\"\
    , RFC 1144, February 1990.\n   [RFC1321]    Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\",\n                RFC 1321, April 1992.\n   [RFC1644]    Braden,\
    \ B., \"T/TCP -- TCP Extensions for Transactions\n                Functional Specification\"\
    , RFC 1644, July 1994.\n   [RFC2827]    Ferguson, P. and D. Senie, \"Network Ingress\
    \ Filtering:\n                Defeating Denial of Service Attacks which employ\
    \ IP\n                Source Address Spoofing\", BCP 38, RFC 2827, May 2000.\n\
    \   [RFC2960]    Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n           \
    \     Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\n                Zhang,\
    \ L., and V. Paxson, \"Stream Control Transmission\n                Protocol\"\
    , RFC 2960, October 2000.\n   [RFC3013]    Killalea, T., \"Recommended Internet\
    \ Service Provider\n                Security Services and Procedures\", BCP 46,\
    \ RFC 3013,\n                November 2000.\n   [RFC3704]    Baker, F. and P.\
    \ Savola, \"Ingress Filtering for\n                Multihomed Networks\", BCP\
    \ 84, RFC 3704, March 2004.\n   [RFC4413]    West, M. and S. McCann, \"TCP/IP\
    \ Field Behavior\",\n                RFC 4413, March 2006.\n   [SD01]       Seddigh,\
    \ N. and M. Devetsikiotis, \"Studies of TCP's\n                Retransmission\
    \ Timeout Mechanism\", Proceedings of the\n                2001 IEEE International\
    \ Conference on Communications\n                (ICC 2001), volume 6, pages 1834-1840,\
    \ June 2001.\n   [SKK+97]     Schuba, C., Krsul, I., Kuhn, M., Spafford, E., Sundaram,\n\
    \                A., and D. Zamboni, \"Analysis of a Denial of Service\n     \
    \           Attack on TCP\", Proceedings of the 1997 IEEE Symposium\n        \
    \        on Security and Privacy 1997.\n   [Ste95]      Stevens, W. and G. Wright,\
    \ \"TCP/IP Illustrated, Volume\n                2: The Implementation\", January\
    \ 1995.\n   [cr.yp.to]   Bernstein, D., \"SYN cookies\", visited in December 2005,\n\
    \                <http://cr.yp.to/syncookies.html>.\n   [win2k3-wp]  Microsoft\
    \ Corporation, \"Microsoft Windows Server 2003\n                TCP/IP Implementation\
    \ Details\", White Paper, July 2005.\n"
- title: Appendix A.  SYN Cookies Description
  contents:
  - "Appendix A.  SYN Cookies Description\n   This information is taken from Bernstein's\
    \ web page on SYN cookies\n   [cr.yp.to].  This is a rewriting of the technical\
    \ information on that\n   web page and not a full replacement.  There are other\
    \ slightly\n   different ways of implementing the SYN cookie concept than the\
    \ exact\n   means described here, although the basic idea of encoding data into\n\
    \   the SYN-ACK sequence number is constant.\n   A SYN cookie is an initial sequence\
    \ number sent in the SYN-ACK, that\n   is chosen based on the connection initiator's\
    \ initial sequence\n   number, MSS, a time counter, and the relevant addresses\
    \ and port\n   numbers.  The actual bits comprising the SYN cookie are chosen\
    \ to be\n   the bitwise difference (exclusive-or) between the SYN's sequence\n\
    \   number and a 32 bit quantity computed so that the top five bits come\n   from\
    \ a 32-bit counter value modulo 32, where the counter increases\n   every 64 seconds,\
    \ the next 3 bits encode a usable MSS near to the one\n   in the SYN, and the\
    \ bottom 24 bits are a server-selected secret\n   function of pair of IP addresses,\
    \ the pair of port numbers, and the\n   32-bit counter used for the first 5 bits.\
    \  This means of selecting an\n   initial sequence number for use in the SYN-ACK\
    \ complies with the rule\n   that TCP sequence numbers increase slowly.\n   When\
    \ a connection in LISTEN receives a SYN segment, it can generate a\n   SYN cookie\
    \ and send it in the sequence number of a SYN-ACK, without\n   allocating any\
    \ other state.  If an ACK comes back, the difference\n   between the acknowledged\
    \ sequence number and the sequence number of\n   the ACK segment can be checked\
    \ against recent values of the counter\n   and the secret function's output given\
    \ those counter values and the\n   IP addresses and port numbers in the ACK segment.\
    \  If there is a\n   match, the connection can be accepted, since it is statistically\
    \ very\n   likely that the other side received the SYN cookie and did not simply\n\
    \   guess a valid cookie value.  If there is not a match, the connection\n   can\
    \ be rejected under the heuristic that it is probably not in\n   response to a\
    \ recently sent SYN-ACK.\n   With SYN cookies enabled, a host will be able to\
    \ remain responsive\n   even when under a SYN flooding attack.  The largest price\
    \ to be paid\n   for using SYN cookies is in the disabling of the window scaling\n\
    \   option, which disables high performance.\n   Bernstein's web page [cr.yp.to]\
    \ contains more information about the\n   initial conceptualization and implementation\
    \ of SYN cookies, and\n   archives of emails documenting this history.  It also\
    \ lists some\n   false negative claims that have been made about SYN cookies,\
    \ and\n   discusses reducing the vulnerability of SYN cookie implementations to\n\
    \   blind connection forgery by an attacker guessing valid cookies.\n   The best\
    \ description of the exact SYN cookie algorithms is in a part\n   of an email\
    \ from Bernstein, that is archived on the web site (notice\n   it does not set\
    \ the top five bits from the counter modulo 32, as the\n   previous description\
    \ did, but instead uses 29 bits from the second\n   MD5 operation and 3 bits for\
    \ the index into the MSS table;\n   establishing the secret values is also not\
    \ discussed).  The remainder\n   of this section is excerpted from Bernstein's\
    \ email [cr.yp.to]:\n      Here's what an implementation would involve:\n    \
    \     Maintain two (constant) secret keys, sec1 and sec2.\n         Maintain a\
    \ (constant) sorted table of 8 common MSS values,\n         msstab[8].\n     \
    \    Keep track of a \"last overflow time\".\n         Maintain a counter that\
    \ increases slowly over time and never\n         repeats, such as \"number of\
    \ seconds since 1970, shifted right 6\n         bits\".\n         When a SYN comes\
    \ in from (saddr,sport) to (daddr,dport) with\n         ISN x, find the largest\
    \ i for which msstab[i] <= the incoming\n         MSS.  Compute\n            z\
    \ = MD5(sec1,saddr,sport,daddr,dport,sec1)\n               + x\n             \
    \  + (counter << 24)\n               + (MD5(sec2,counter,saddr,sport,daddr,dport,sec2)\
    \ % (1 <<\n               24))\n         and then\n            y = (i << 29) +\
    \ (z % (1 << 29))\n         Create a TCB as usual, with y as our ISN.  Send back\
    \ a SYNACK.\n         Exception: _If_ we're out of memory for TCBs, set the \"\
    last\n         overflow time\" to the current time.  Send the SYNACK anyway,\n\
    \         with all fancy options turned off.\n         When an ACK comes back,\
    \ follow this procedure to find a TCB:\n         (1)  Look for a (saddr,sport,daddr,dport)\
    \ TCB.  If it's there,\n              done.\n         (2)  If the \"last overflow\
    \ time\" is earlier than a few minutes\n              ago, give up.\n        \
    \ (3)  Figure out whether our alleged ISN makes sense.  This\n              means\
    \ recomputing y as above, for each of the counters\n              that could have\
    \ been used in the last few minutes (say,\n              the last four counters),\
    \ and seeing whether any of the y's\n              match the ISN in the bottom\
    \ 29 bits.  If none of them do,\n              give up.\n         (4)  Create\
    \ a new TCB.  The top three bits of our ISN give a\n              usable MSS.\
    \  Turn off all fancy options.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Wesley M. Eddy\n   Verizon Federal Network Systems\n   NASA\
    \ Glenn Research Center\n   21000 Brookpark Rd, MS 54-5\n   Cleveland, OH  44135\n\
    \   Phone: 216-433-6682\n   EMail: weddy@grc.nasa.gov\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
