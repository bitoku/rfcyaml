- title: __initial_text__
  contents:
  - '     Differentiated Services (Diffserv) and Real-Time Communication

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the interaction between Differentiated Services\n\
    \   (Diffserv) network quality-of-service (QoS) functionality and real-\n   time\
    \ network communication, including communication based on the\n   Real-time Transport\
    \ Protocol (RTP).  Diffserv is based on network\n   nodes applying different forwarding\
    \ treatments to packets whose IP\n   headers are marked with different Diffserv\
    \ Codepoints (DSCPs).\n   WebRTC applications, as well as some conferencing applications,\
    \ have\n   begun using the Session Description Protocol (SDP) bundle negotiation\n\
    \   mechanism to send multiple traffic streams with different QoS\n   requirements\
    \ using the same network 5-tuple.  The results of using\n   multiple DSCPs to\
    \ obtain different QoS treatments within a single\n   network 5-tuple have transport\
    \ protocol interactions, particularly\n   with congestion control functionality\
    \ (e.g., reordering).  In\n   addition, DSCP markings may be changed or removed\
    \ between the traffic\n   source and destination.  This memo covers the implications\
    \ of these\n   Diffserv aspects for real-time network communication, including\n\
    \   WebRTC.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7657.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Real-Time Communications  . . . . . . . . . . . . . .\
    \ . . . .   3\n     2.1.  RTP Background  . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     2.2.  RTP Multiplexing  . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   3.  Differentiated Services (Diffserv)  . . . . . . . . . . . .\
    \ .   7\n     3.1.  Diffserv Per-Hop Behaviors (PHBs) . . . . . . . . . . . .\
    \  10\n     3.2.  Traffic Classifiers and DSCP Remarking  . . . . . . . . .  10\n\
    \   4.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  12\n  \
    \ 5.  Diffserv Interactions . . . . . . . . . . . . . . . . . . . .  13\n    \
    \ 5.1.  Diffserv, Reordering, and Transport Protocols . . . . . .  13\n     5.2.\
    \  Diffserv, Reordering, and Real-Time Communication . . . .  15\n     5.3.  Drop\
    \ Precedence and Transport Protocols . . . . . . . . .  16\n     5.4.  Diffserv\
    \ and RTCP . . . . . . . . . . . . . . . . . . . .  17\n   6.  Guidelines  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  18\n   7.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  19\n   8.  References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  20\n     8.1.  Normative References  .\
    \ . . . . . . . . . . . . . . . . .  20\n     8.2.  Informative References  .\
    \ . . . . . . . . . . . . . . . .  22\n   Acknowledgements  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  26\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo describes the interactions between Differentiated\
    \ Services\n   (Diffserv) network quality-of-service (QoS) functionality [RFC2475]\n\
    \   and real-time network communication, including communication based on\n  \
    \ the Real-time Transport Protocol (RTP) [RFC3550].  Diffserv is based\n   on\
    \ network nodes applying different forwarding treatments to packets\n   whose\
    \ IP headers are marked with different Diffserv Codepoints\n   (DSCPs) [RFC2474].\
    \  In the past, distinct RTP streams have been sent\n   over different transport-level\
    \ flows, sometimes multiplexed with the\n   RTP Control Protocol (RTCP).  WebRTC\
    \ applications, as well as some\n   conferencing applications, are now using the\
    \ Session Description\n   Protocol (SDP) [RFC4566] bundle negotiation mechanism\
    \ [SDP-BUNDLE] to\n   send multiple traffic streams with different QoS requirements\
    \ using\n   the same network 5-tuple.  The results of using multiple DSCPs to\n\
    \   obtain different QoS treatments within a single network 5-tuple have\n   transport\
    \ protocol interactions, particularly with congestion control\n   functionality\
    \ (e.g., reordering).  In addition, DSCP markings may be\n   changed or removed\
    \ between the traffic source and destination.  This\n   memo covers the implications\
    \ of these Diffserv aspects for real-time\n   network communication, including\
    \ WebRTC traffic [WEBRTC-OVERVIEW].\n   The memo is organized as follows.  Background\
    \ is provided in\n   Section 2 on real-time communications and Section 3 on Differentiated\n\
    \   Services.  Section 4 describes some examples of Diffserv usage with\n   real-time\
    \ communications.  Section 5 explains how use of Diffserv\n   features interacts\
    \ with both transport and real-time communications\n   protocols and Section 6\
    \ provides guidance on Diffserv feature usage\n   to control undesired interactions.\
    \  Security considerations are\n   discussed in Section 7.\n"
- title: 2.  Real-Time Communications
  contents:
  - "2.  Real-Time Communications\n   Real-time communications enables communication\
    \ in real time over an\n   IP network using voice, video, text, content sharing,\
    \ etc.  It is\n   possible to use more than one of these modes concurrently to\
    \ provide\n   a rich communication experience.\n   A simple example of real-time\
    \ communications is a voice call placed\n   over the Internet where an audio stream\
    \ is transmitted in each\n   direction between two users.  A more complex example\
    \ is an immersive\n   videoconferencing system that has multiple video screens,\
    \ multiple\n   cameras, multiple microphones, and some means of sharing content.\n\
    \   For such complex systems, there may be multiple media and non-media\n   streams\
    \ transmitted via a single IP address and port or via multiple\n   IP addresses\
    \ and ports.\n"
- title: 2.1.  RTP Background
  contents:
  - "2.1.  RTP Background\n   The most common protocol used for real-time media is\
    \ RTP [RFC3550].\n   RTP defines a common encapsulation format and handling rules\
    \ for\n   real-time data transmitted over the Internet.  Unfortunately, RTP\n\
    \   terminology usage has been inconsistent.  For example, RFC 7656\n   [RFC7656]\
    \ on RTP terminology observes that:\n      RTP [RFC3550] uses media stream, audio\
    \ stream, video stream, and a\n      stream of (RTP) packets interchangeably,\
    \ which are all RTP\n      streams.\n   Terminology in this memo is based on that\
    \ RTP terminology document\n   with the following terms being of particular importance\
    \ (see that\n   terminology document for full definitions):\n   Source Stream:\
    \  A reference clock synchronized, time progressing,\n      digital media stream.\n\
    \   RTP Stream:  A stream of RTP packets containing media data, which may\n  \
    \    be source data or redundant data.  The RTP stream is identified by\n    \
    \  an RTP synchronization source (SSRC) belonging to a particular RTP\n      session.\
    \  An RTP stream may be a secured RTP stream when RTP-based\n      security is\
    \ used.\n   In addition, this memo follows [RFC3550] in using the term \"SSRC\"\
    \ to\n   designate both the identifier of an RTP stream and the entity that\n\
    \   sends that RTP stream.\n   Media encoding and packetization of a source stream\
    \ results in a\n   source RTP stream plus zero or more redundancy RTP streams\
    \ that\n   provide resilience against loss of packets from the source RTP stream\n\
    \   [RFC7656].  Redundancy information may also be carried in the same\n   RTP\
    \ stream as the encoded source stream, e.g., see Section 7.2 of\n   [RFC5109].\
    \  With most applications, a single media type (e.g., audio)\n   is transmitted\
    \ within a single RTP session.  However, it is possible\n   to transmit multiple,\
    \ distinct source streams over the same RTP\n   session as one or more individual\
    \ RTP streams.  This is referred to\n   as RTP multiplexing.  In addition, an\
    \ RTP stream may contain multiple\n   source streams, e.g., components or programs\
    \ in an MPEG Transport\n   Stream [H.221].\n   The number of source streams and\
    \ RTP streams in an overall real-time\n   interaction can be surprisingly large.\
    \  In addition to a voice source\n   stream and a video source stream, there could\
    \ be separate source\n   streams for each of the cameras or microphones on a videoconferencing\n\
    \   system.  As noted above, there might also be separate redundancy RTP\n   streams\
    \ that provide protection to a source RTP stream, using\n   techniques such as\
    \ forward error correction.  Another example is\n   simulcast transmission, where\
    \ a video source stream can be\n   transmitted as high resolution and low resolution\
    \ RTP streams at the\n   same time.  In this case, a media processing function\
    \ might choose to\n   send one or both RTP streams onward to a receiver based\
    \ on bandwidth\n   availability or who the active speaker is in a multipoint conference.\n\
    \   Lastly, a transmitter might send the same media content concurrently\n   as\
    \ two RTP streams using different encodings (e.g., video encoded as\n   VP8 [RFC6386]\
    \ in parallel with H.264 [H.264]) to allow a media\n   processing function to\
    \ select a media encoding that best matches the\n   capabilities of the receiver.\n\
    \   For the WebRTC protocol suite [WEBRTC-TRANSPORTS], an individual\n   source\
    \ stream is a MediaStreamTrack, and a MediaStream contains one\n   or more MediaStreamTracks\
    \ [W3C.WD-mediacapture-streams-20130903].  A\n   MediaStreamTrack is transmitted\
    \ as a source RTP stream plus zero or\n   more redundant RTP streams, so a MediaStream\
    \ that consists of one\n   MediaStreamTrack is transmitted as a single source\
    \ RTP stream plus\n   zero or more redundant RTP streams.  For more information\
    \ on use of\n   RTP in WebRTC, see [RTP-USAGE].\n   RTP is usually carried over\
    \ a datagram protocol, such as UDP\n   [RFC768], UDP-Lite [RFC3828], or the Datagram\
    \ Congestion Control\n   Protocol (DCCP) [RFC4340]; UDP is most commonly used,\
    \ but a non-\n   datagram protocol (e.g., TCP [RFC793]) may also be used.  Transport\n\
    \   protocols other than UDP or UDP-Lite may also be used to transmit\n   real-time\
    \ data or near-real-time data.  For example, the Stream\n   Control Transmission\
    \ Protocol (SCTP) [RFC4960] can be utilized to\n   carry application-sharing or\
    \ whiteboarding information as part of an\n   overall interaction that includes\
    \ real-time media.  These additional\n   transport protocols can be multiplexed\
    \ with an RTP session via UDP\n   encapsulation, thereby using a single pair of\
    \ UDP ports.\n   The WebRTC protocol suite encompasses a number of forms of\n\
    \   multiplexing:\n   1.  Individual source streams are carried in one or more\
    \ individual\n       RTP streams.  These RTP streams can be multiplexed onto a\
    \ single\n       transport-layer flow or sent as separate transport-layer flows.\n\
    \       This memo only considers the case where the RTP streams are to be\n  \
    \     multiplexed onto a single transport-layer flow, forming a single\n     \
    \  RTP session as described in [RFC3550];\n   2.  RTCP (see [RFC3550]) may be\
    \ multiplexed onto the same transport-\n       layer flow as the RTP streams with\
    \ which it is associated, as\n       described in [RFC5761], or it may be sent\
    \ on a separate\n       transport-layer flow;\n   3.  An RTP session could be\
    \ multiplexed with a single SCTP\n       association over Datagram Transport Layer\
    \ Security (DTLS) and\n       with both Session Traversal Utilities for NAT (STUN)\
    \ [RFC5389]\n       and TURN [RFC5766] traffic into a single transport-layer flow\
    \ as\n       described in [RFC5764] with the updates in [SRTP-DTLS].  The STUN\n\
    \       [RFC5389] and Traversal Using Relays around NAT (TURN) [RFC5766]\n   \
    \    protocols provide NAT/FW (Network Address Translator / Firewall)\n      \
    \ traversal and port mapping.\n   The resulting transport-layer flow is identified\
    \ by a network\n   5-tuple, i.e., a combination of two IP addresses (source and\n\
    \   destination), two ports (source and destination), and the transport\n   protocol\
    \ used (e.g., UDP).  SDP bundle negotiation restrictions\n   [SDP-BUNDLE] limit\
    \ WebRTC to using at most a single DTLS session per\n   network 5-tuple.  In contrast\
    \ to WebRTC use of a single SCTP\n   association with DTLS, multiple SCTP associations\
    \ can be directly\n   multiplexed over a single UDP 5-tuple as specified in [RFC6951].\n\
    \   The STUN and TURN protocols were originally designed to use UDP as a\n   transport;\
    \ however, TURN has been extended to use TCP as a transport\n   for situations\
    \ in which UDP does not work [RFC6062].  When TURN\n   selects use of TCP, the\
    \ entire real-time communications session is\n   carried over a single TCP connection\
    \ (i.e., 5-tuple).\n   For IPv6, addition of the flow label [RFC6437] to network\
    \ 5-tuples\n   results in network 6-tuples (or 7-tuples for bidirectional flows),\n\
    \   but in practice, use of a flow label is unlikely to result in a\n   finer-grain\
    \ traffic subset than the corresponding network 5-tuple\n   (e.g., the flow label\
    \ is likely to represent the combination of two\n   ports with use of the UDP\
    \ protocol).  For that reason, discussion in\n   this document focuses on UDP\
    \ 5-tuples.\n"
- title: 2.2.  RTP Multiplexing
  contents:
  - "2.2.  RTP Multiplexing\n   Section 2.1 explains how source streams can be multiplexed\
    \ in a\n   single RTP session, which can in turn be multiplexed over UDP with\n\
    \   packets generated by other transport protocols.  This section\n   provides\
    \ background on why this level of multiplexing is desirable.\n   The rationale\
    \ in this section applies both to multiplexing of source\n   streams in a single\
    \ RTP session and multiplexing of an RTP session\n   with traffic from other transport\
    \ protocols via UDP encapsulation.\n   Multiplexing reduces the number of ports\
    \ utilized for real-time and\n   related communication in an overall interaction.\
    \  While a single\n   endpoint might have plenty of ports available for communication,\
    \ this\n   traffic often traverses points in the network that are constrained\
    \ on\n   the number of available ports or whose performance degrades as the\n\
    \   number of ports in use increases.  A good example is a NAT/FW device\n   sitting\
    \ at the network edge.  As the number of simultaneous protocol\n   sessions increases,\
    \ so does the burden placed on these devices to\n   provide port mapping.\n  \
    \ Another reason for multiplexing is to help reduce the time required\n   to establish\
    \ bidirectional communication.  Since any two\n   communicating users might be\
    \ situated behind different NAT/FW\n   devices, it is necessary to employ techniques\
    \ like STUN and TURN\n   along with Interactive Connectivity Establishment (ICE)\
    \ [RFC5245] to\n   get traffic to flow between the two devices [WEBRTC-TRANSPORTS].\n\
    \   Performing the tasks required by these protocols takes time,\n   especially\
    \ when multiple protocol sessions are involved.  While tasks\n   for different\
    \ sessions can be performed in parallel, it is\n   nonetheless necessary for applications\
    \ to wait for all sessions to be\n   opened before communication between two users\
    \ can begin.  Reducing\n   the number of STUN/ICE/TURN steps reduces the likelihood\
    \ of loss of a\n   packet for one of these protocols; any such loss adds delay\
    \ to\n   setting up a communication session.  Further, reducing the number of\n\
    \   STUN/ICE/TURN tasks places a lower burden on the STUN and TURN\n   servers.\n\
    \   Multiplexing may reduce the complexity and resulting load on an\n   endpoint.\
    \  A single instance of STUN/ICE/TURN is simpler to execute\n   and manage than\
    \ multiple instances STUN/ICE/TURN operations happening\n   in parallel, as the\
    \ latter require synchronization and create more\n   complex failure situations\
    \ that have to be cleaned up by additional\n   code.\n"
- title: 3.  Differentiated Services (Diffserv)
  contents:
  - "3.  Differentiated Services (Diffserv)\n   The Diffserv architecture [RFC2475][RFC4594]\
    \ is intended to enable\n   scalable service discrimination in the Internet without\
    \ requiring\n   each node in the network to store per-flow state and participate\
    \ in\n   per-flow signaling.  The services may be end to end or within a\n   network;\
    \ they include both those that can satisfy quantitative\n   performance requirements\
    \ (e.g., peak bandwidth) and those based on\n   relative performance (e.g., \"\
    class\" differentiation).  Services can\n   be constructed by a combination of\
    \ well-defined building blocks\n   deployed in network nodes that:\n   o  classify\
    \ traffic and set bits in an IP header field at network\n      boundaries or hosts,\n\
    \   o  use those bits to determine how packets are forwarded by the nodes\n  \
    \    inside the network, and\n   o  condition the marked packets at network boundaries\
    \ in accordance\n      with the requirements or rules of each service.\n   Traffic\
    \ conditioning may include changing the DSCP in a packet\n   (remarking it), delaying\
    \ the packet (as a consequence of traffic\n   shaping), or dropping the packet\
    \ (as a consequence of traffic\n   policing).\n   A network node that supports\
    \ Diffserv includes a classifier that\n   selects packets based on the value of\
    \ the DS field in IP headers (the\n   Diffserv codepoint or DSCP), along with\
    \ buffer management and packet\n   scheduling mechanisms capable of delivering\
    \ the specific packet\n   forwarding treatment indicated by the DS field value.\
    \  Setting of the\n   DS field and fine-grain conditioning of marked packets need\
    \ only be\n   performed at network boundaries; internal network nodes operate\
    \ on\n   traffic aggregates that share a DS field value, or in some cases, a\n\
    \   small set of related values.\n   The Diffserv architecture [RFC2475] maintains\
    \ distinctions among:\n   o  the QoS service provided to a traffic aggregate,\n\
    \   o  the conditioning functions and per-hop behaviors (PHBs) used to\n     \
    \ realize services,\n   o  the DSCP in the IP header used to mark packets to select\
    \ a per-hop\n      behavior, and\n   o  the particular implementation mechanisms\
    \ that realize a per-hop\n      behavior.\n   This memo focuses on PHBs and the\
    \ usage of DSCPs to obtain those\n   behaviors.  In a network node's forwarding\
    \ path, the DSCP is used to\n   map a packet to a particular forwarding treatment,\
    \ or to a per-hop\n   behavior (PHB) that specifies the forwarding treatment.\n\
    \   The specification of a PHB describes the externally observable\n   forwarding\
    \ behavior of a network node for network traffic marked with\n   a DSCP that selects\
    \ that PHB.  In this context, \"forwarding behavior\"\n   is a general concept\
    \ - for example, if only one DSCP is used for all\n   traffic on a link, the observable\
    \ forwarding behavior (e.g., loss,\n   delay, jitter) will often depend only on\
    \ the loading of the link.  To\n   obtain useful behavioral differentiation, multiple\
    \ traffic subsets\n   are marked with different DSCPs for different PHBs for which\
    \ node\n   resources such as buffer space and bandwidth are allocated.  PHBs\n\
    \   provide the framework for a Diffserv network node to allocate\n   resources\
    \ to traffic subsets, with network-scope Differentiated\n   Services constructed\
    \ on top of this basic hop-by-hop resource\n   allocation mechanism.\n   The codepoints\
    \ (DSCPs) may be chosen from a small set of fixed values\n   (the class selector\
    \ codepoints), from a set of recommended values\n   defined in PHB specifications,\
    \ or from values that have purely local\n   meanings to a specific network that\
    \ supports Diffserv; in general,\n   packets may be forwarded across multiple\
    \ such networks between source\n   and destination.\n   The mandatory DSCPs are\
    \ the class selector codepoints as specified in\n   [RFC2474].  The class selector\
    \ codepoints (CS0-CS7) extend the\n   deprecated concept of IP Precedence in the\
    \ IPv4 header; three bits\n   are added, so that the class selector DSCPs are\
    \ of the form 'xxx000'.\n   The all-zero DSCP ('000000' or CS0) is always assigned\
    \ to a Default\n   PHB that provides best-effort forwarding behavior, and the\
    \ remaining\n   class selector codepoints are intended to provide relatively better\n\
    \   per-hop-forwarding behavior in increasing numerical order, but:\n   o  A network\
    \ endpoint cannot rely upon different class selector\n      codepoints providing\
    \ Differentiated Services via assignment to\n      different PHBs, as adjacent\
    \ class selector codepoints may use the\n      same pool of resources on each\
    \ network node in some networks.\n      This generalizes to ranges of class selector\
    \ codepoints, but with\n      limits -- for example, CS6 and CS7 are often used\
    \ for network\n      control (e.g., routing) traffic [RFC4594] and hence are likely\
    \ to\n      provide better forwarding behavior under network load to\n      prioritize\
    \ network recovery from disruptions.  There is no\n      effective way for a network\
    \ endpoint to determine which PHBs are\n      selected by the class selector codepoints\
    \ on a specific network,\n      let alone end to end.\n   o  CS1 ('001000') was\
    \ subsequently designated as the recommended\n      codepoint for the Lower Effort\
    \ (LE) PHB [RFC3662].  An LE service\n      forwards traffic with \"lower\" priority\
    \ than best effort and can be\n      \"starved\" by best-effort and other \"higher\"\
    \ priority traffic.  Not\n      all networks offer an LE service, hence traffic\
    \ marked with the\n      CS1 DSCP may not receive lower effort forwarding; such\
    \ traffic may\n      be forwarded with a different PHB (e.g., the Default PHB),\n\
    \      remarked to another DSCP (e.g., CS0) and forwarded accordingly, or\n  \
    \    dropped.  A network endpoint cannot rely upon the presence of an\n      LE\
    \ service that is selected by the CS1 DSCP on a specific network,\n      let alone\
    \ end to end.  Packets marked with the CS1 DSCP may be\n      forwarded with best-effort\
    \ service or another \"higher\" priority\n      service; see [RFC2474].  See [RFC3662]\
    \ for further discussion of\n      the LE PHB and service.\n"
- title: 3.1.  Diffserv Per-Hop Behaviors (PHBs)
  contents:
  - "3.1.  Diffserv Per-Hop Behaviors (PHBs)\n   Although Differentiated Services\
    \ is a general architecture that may\n   be used to implement a variety of services,\
    \ three fundamental\n   forwarding behaviors (PHBs) have been defined and characterized\
    \ for\n   general use.  These are:\n   1.  Default Forwarding (DF) for elastic\
    \ traffic [RFC2474].  The\n       Default PHB is always selected by the all-zero\
    \ DSCP and provides\n       best-effort forwarding.\n   2.  Assured Forwarding\
    \ (AF) [RFC2597] to provide Differentiated\n       Service to elastic traffic.\
    \  Each instance of the AF behavior\n       consists of three PHBs that differ\
    \ only in drop precedence, e.g.,\n       AF11, AF12, and AF13; such a set of three\
    \ AF PHBs is referred to\n       as an AF class, e.g., AF1x.  There are four defined\
    \ AF classes,\n       AF1x through AF4x, with higher numbered classes intended\
    \ to\n       receive better forwarding treatment than lower numbered classes.\n\
    \       Use of multiple PHBs from a single AF class (e.g., AF1x) does not\n  \
    \     enable network traffic reordering within a single network\n       5-tuple,\
    \ although such reordering may occur for other transient\n       reasons (e.g.,\
    \ routing changes or ECMP rebalancing).\n   3.  Expedited Forwarding (EF) [RFC3246]\
    \ intended for inelastic\n       traffic.  Beyond the basic EF PHB, the VOICE-ADMIT\
    \ PHB [RFC5865]\n       is an admission-controlled variant of the EF PHB.  Both\
    \ of these\n       PHBs are based on preconfigured limited forwarding capacity;\n\
    \       traffic in excess of that capacity is expected to be dropped.\n"
- title: 3.2.  Traffic Classifiers and DSCP Remarking
  contents:
  - "3.2.  Traffic Classifiers and DSCP Remarking\n   DSCP markings are not end to\
    \ end in general.  Each network can make\n   its own decisions about what PHBs\
    \ to use and which DSCP maps to each\n   PHB.  While every PHB specification includes\
    \ a recommended DSCP, and\n   RFC 4594 [RFC4594] recommends their end-to-end usage,\
    \ there is no\n   requirement that every network support any PHBs (aside from\
    \ the\n   Default PHB for best-effort forwarding) or use any specific DSCPs,\n\
    \   with the exception of the support requirements for the class selector\n  \
    \ codepoints (see RFC 2474 [RFC2474]).  When Diffserv is used, the edge\n   or\
    \ boundary nodes of a network are responsible for ensuring that all\n   traffic\
    \ entering that network conforms to that network's policies for\n   DSCP and PHB\
    \ usage, and such nodes may change DSCP markings on\n   traffic to achieve that\
    \ result.  As a result, DSCP remarking is\n   possible at any network boundary,\
    \ including the first network node\n   that traffic sent by a host encounters.\
    \  Remarking is also possible\n   within a network, e.g., for traffic shaping.\n\
    \   DSCP remarking is part of traffic conditioning; the traffic\n   conditioning\
    \ functionality applied to packets at a network node is\n   determined by a traffic\
    \ classifier [RFC2475].  Edge nodes of a\n   Diffserv network classify traffic\
    \ based on selected packet header\n   fields; typical implementations do not look\
    \ beyond the traffic's\n   network 5-tuple in the IP and transport protocol headers\
    \ (e.g., for\n   SCTP or RTP encapsulated in UDP, header-based classification\
    \ is\n   unlikely to look beyond the outer UDP header).  As a result, when\n \
    \  multiple DSCPs are used for traffic that shares a network 5-tuple,\n   remarking\
    \ at a network boundary may result in all of the traffic\n   being forwarded with\
    \ a single DSCP, thereby removing any\n   differentiation within the network 5-tuple\
    \ downstream of the\n   remarking location.  Network nodes within a Diffserv network\n\
    \   generally classify traffic based solely on DSCPs, but may perform\n   finer-grain\
    \ traffic conditioning similar to that performed by edge\n   nodes.\n   So, for\
    \ two arbitrary network endpoints, there can be no assurance\n   that the DSCP\
    \ set at the source endpoint will be preserved and\n   presented at the destination\
    \ endpoint.  Rather, it is quite likely\n   that the DSCP will be set to zero\
    \ (e.g., at the boundary of a network\n   operator that distrusts or does not\
    \ use the DSCP field) or to a value\n   deemed suitable by an ingress classifier\
    \ for whatever network 5-tuple\n   it carries.\n   In addition, remarking may\
    \ remove application-level distinctions in\n   forwarding behavior - e.g., if\
    \ multiple PHBs within an AF class are\n   used to distinguish different types\
    \ of frames within a video RTP\n   stream, token-bucket-based remarkers operating\
    \ in color-blind mode\n   (see [RFC2697] and [RFC2698] for examples) may remark\
    \ solely based on\n   flow rate and burst behavior, removing the drop precedence\n\
    \   distinctions specified by the source.\n   Backbone and other carrier networks\
    \ may employ a small number of\n   DSCPs (e.g., less than half a dozen) to manage\
    \ a small number of\n   traffic aggregates; hosts that use a larger number of\
    \ DSCPs can\n   expect to find that much of their intended differentiation is\
    \ removed\n   by such networks.  Better results may be achieved when DSCPs are\
    \ used\n   to spread traffic among a smaller number of Diffserv-based traffic\n\
    \   subsets or aggregates; see [DIFFSERV-INTERCON] for one proposal.\n   This\
    \ is of particular importance for MPLS-based networks due to the\n   limited size\
    \ of the Traffic Class (TC) field in an MPLS label\n   [RFC5462] that is used\
    \ to carry Diffserv information and the use of\n   that TC field for other purposes,\
    \ e.g., Explicit Congestion\n   Notification (ECN) [RFC5129].  For further discussion\
    \ on use of\n   Diffserv with MPLS, see [RFC3270] and [RFC5127].\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   For real-time communications, one might want to mark the audio\n\
    \   packets using EF and the video packets as AF41.  However, a video\n   conference\
    \ receiving the audio packets significantly ahead of the\n   video is not useful\
    \ because lip sync is necessary between audio and\n   video.  It may still be\
    \ desirable to send audio with a PHB that\n   provides better service, because\
    \ more reliable arrival of audio helps\n   assure smooth audio rendering, which\
    \ is often more important than\n   fully faithful video rendering.  There are\
    \ also limits, as some\n   devices have difficulties in synchronizing voice and\
    \ video when\n   packets that need to be rendered together arrive at significantly\n\
    \   different times.  It makes more sense to use different PHBs when the\n   audio\
    \ and video source streams do not share a strict timing\n   relationship.  For\
    \ example, video content may be shared within a\n   video conference via playback,\
    \ perhaps of an unedited video clip that\n   is intended to become part of a television\
    \ advertisement.  Such\n   content sharing video does not need precise synchronization\
    \ with\n   video conference audio, and could use a different PHB, as content\n\
    \   sharing video is more tolerant to jitter, loss, and delay.\n   Within a layered\
    \ video RTP stream, ordering of frame communication is\n   preferred, but importance\
    \ of frame types varies, making use of PHBs\n   with different drop precedences\
    \ appropriate.  For example, I-frames\n   that contain an entire image are usually\
    \ more important than P-frames\n   that contain only changes from the previous\
    \ image because loss of a\n   P-frame (or part thereof) can be recovered (at the\
    \ latest) via the\n   next I-frame, whereas loss of an I-frame (or part thereof)\
    \ may cause\n   rendering problems for all of the P-frames that depend on the\
    \ missing\n   I-frame.  For this reason, it is appropriate to mark I-frame packets\n\
    \   with a PHB that has lower drop precedence than the PHB used for\n   P-frames,\
    \ as long as the PHBs preserve ordering among frames (e.g.,\n   are in a single\
    \ AF class) - AF41 for I-frames and AF43 for P-frames\n   is one possibility.\
    \  Additional spatial and temporal layers beyond\n   the base video layer could\
    \ also be marked with higher drop precedence\n   than the base video layer, as\
    \ their loss reduces video quality, but\n   does not disrupt video rendering.\n\
    \   Additional RTP streams in a real-time communication interaction could\n  \
    \ be marked with CS0 and carried as best-effort traffic.  One example\n   is real-time\
    \ text transmitted as specified in RFC 4103 [RFC4103].\n   Best-effort forwarding\
    \ suffices because such real-time text has loose\n   timing requirements; RFC\
    \ 4103 recommends sending text in chunks every\n   300 ms.  Such text is technically\
    \ real-time, but does not need a PHB\n   promising better service than best effort,\
    \ in contrast to audio or\n   video.\n   A WebRTC application may use one or more\
    \ RTP streams, as discussed\n   above.  In addition, it may use an SCTP-based\
    \ data channel\n   [DATA-CHAN] whose QoS treatment depends on the nature of the\n\
    \   application.  For example, best-effort treatment of data channels is\n   likely\
    \ to suffice for messaging, shared white board, and guided\n   browsing applications,\
    \ whereas latency-sensitive games might desire\n   better QoS for their data channels.\n"
- title: 5.  Diffserv Interactions
  contents:
  - '5.  Diffserv Interactions

    '
- title: 5.1.  Diffserv, Reordering, and Transport Protocols
  contents:
  - "5.1.  Diffserv, Reordering, and Transport Protocols\n   Transport protocols provide\
    \ data communication behaviors beyond those\n   possible at the IP layer.  An\
    \ important example is that TCP [RFC793]\n   provides reliable in-order delivery\
    \ of data with congestion control.\n   SCTP [RFC4960] provides additional properties\
    \ such as preservation of\n   message boundaries, and the ability to avoid head-of-line\
    \ blocking\n   that may occur with TCP.\n   In contrast, UDP [RFC768] is a basic\
    \ unreliable datagram protocol\n   that provides port-based multiplexing and demultiplexing\
    \ on top of\n   IP.  Two other unreliable datagram protocols are UDP-Lite [RFC3828],\n\
    \   a variant of UDP that may deliver partially corrupt payloads when\n   errors\
    \ occur, and DCCP [RFC4340], which provides a range of\n   congestion control\
    \ modes for its unreliable datagram service.\n   Transport protocols that provide\
    \ reliable delivery (e.g., TCP, SCTP)\n   are sensitive to network reordering\
    \ of traffic.  When a protocol that\n   provides reliable delivery receives a\
    \ packet other than the next\n   expected packet, the protocol usually assumes\
    \ that the expected\n   packet has been lost and updates the peer, which often\
    \ causes a\n   retransmission.  In addition, congestion control functionality\
    \ in\n   transport protocols (including DCCP) usually infers congestion when\n\
    \   packets are lost.  This creates additional sensitivity to significant\n  \
    \ network packet reordering, as such reordering may be (mis)interpreted\n   as\
    \ loss of the out-of-order packets, causing a congestion control\n   response.\n\
    \   This sensitivity to reordering remains even when ECN [RFC3168] is in\n   use,\
    \ as ECN receivers are required to treat missing packets as\n   potential indications\
    \ of congestion, because:\n   o  Severe congestion may cause ECN-capable network\
    \ nodes to drop\n      packets, and\n   o  ECN traffic may be forwarded by network\
    \ nodes that do not support\n      ECN and hence drop packets to indicate congestion.\n\
    \   Congestion control is an important aspect of the Internet\n   architecture;\
    \ see [RFC2914] for further discussion.\n   In general, marking packets with different\
    \ DSCPs results in different\n   PHBs being applied at nodes in the network, making\
    \ reordering very\n   likely due to use of different pools of forwarding resources\
    \ for each\n   PHB.  This should not be done within a single network 5-tuple for\n\
    \   current transport protocols, with the important exceptions of UDP and\n  \
    \ UDP-Lite.\n   When PHBs that enable reordering are mixed within a single network\n\
    \   5-tuple, the effect is to mix QoS-based traffic classes within the\n   scope\
    \ of a single transport protocol connection or association.  As\n   these QoS-based\
    \ traffic classes receive different network QoS\n   treatments, they use different\
    \ pools of network resources and hence\n   may exhibit different levels of congestion.\
    \  The result for\n   congestion-controlled protocols is that a separate instance\
    \ of\n   congestion control functionality is needed per QoS-based traffic\n  \
    \ class.  Current transport protocols support only a single instance of\n   congestion\
    \ control functionality for an entire connection or\n   association; extending\
    \ that support to multiple instances would add\n   significant protocol complexity.\
    \  Traffic in different QoS-based\n   classes may use different paths through\
    \ the network; this complicates\n   path integrity checking in connection- or\
    \ association-based\n   protocols, as those paths may fail independently.\n  \
    \ The primary example where usage of multiple PHBs does not enable\n   reordering\
    \ within a single network 5-tuple is use of PHBs from a\n   single AF class (e.g.,\
    \ AF1x).  Traffic reordering within the scope of\n   a network 5-tuple that uses\
    \ a single PHB or AF class may occur for\n   other transient reasons (e.g., routing\
    \ changes or ECMP rebalancing).\n   Reordering also affects other forms of congestion\
    \ control, such as\n   techniques for RTP congestion control that were under development\n\
    \   when this memo was published; see [RMCAT-CC] for requirements.  These\n  \
    \ techniques prefer use of a common (coupled) congestion controller for\n   RTP\
    \ streams between the same endpoints to reduce packet loss and\n   delay by reducing\
    \ competition for resources at any shared bottleneck.\n   Shared bottlenecks can\
    \ be detected via techniques such as correlation\n   of one-way delay measurements\
    \ across RTP streams.  An alternate\n   approach is to assume that the set of\
    \ packets on a single network\n   5-tuple marked with DSCPs that do not enable\
    \ reordering will utilize\n   a common network path and common forwarding resources\
    \ at each network\n   node.  Under that assumption, any bottleneck encountered\
    \ by such\n   packets is shared among all of them, making it safe to use a common\n\
    \   (coupled) congestion controller (see [COUPLED-CC]).  This is not a\n   safe\
    \ assumption when the packets involved are marked with DSCP values\n   that enable\
    \ reordering because a bottleneck may not be shared among\n   all such packets\
    \ (e.g., when the DSCP values result in use of\n   different queues at a network\
    \ node, but only one queue is a\n   bottleneck).\n   UDP and UDP-Lite are not\
    \ sensitive to reordering in the network,\n   because they do not provide reliable\
    \ delivery or congestion control.\n   On the other hand, when used to encapsulate\
    \ other protocols (e.g., as\n   UDP is used by WebRTC; see Section 2.1), the reordering\n\
    \   considerations for the encapsulated protocols apply.  For the\n   specific\
    \ usage of UDP by WebRTC, every encapsulated protocol (i.e.,\n   RTP, SCTP, and\
    \ TCP) is sensitive to reordering as further discussed\n   in this memo.  In addition,\
    \ [RFC5405] provides general guidelines for\n   use of UDP (and UDP-Lite); the\
    \ congestion control guidelines in that\n   document apply to protocols encapsulated\
    \ in UDP (or UDP-Lite).\n"
- title: 5.2.  Diffserv, Reordering, and Real-Time Communication
  contents:
  - "5.2.  Diffserv, Reordering, and Real-Time Communication\n   Real-time communications\
    \ are also sensitive to network reordering of\n   packets.  Such reordering may\
    \ lead to unneeded retransmission and\n   spurious retransmission control signals\
    \ (such as NACK) in reliable\n   delivery protocols (see Section 5.1).  The degree\
    \ of sensitivity\n   depends on protocol or stream timers, in contrast to reliable\n\
    \   delivery protocols that usually react to all reordering.\n   Receiver jitter\
    \ buffers have important roles in the effect of\n   reordering on real-time communications:\n\
    \   o  Minor packet reordering that is contained within a jitter buffer\n    \
    \  usually has no effect on rendering of the received RTP stream\n      because\
    \ packets that arrive out of order are retrieved in order\n      from the jitter\
    \ buffer for rendering.\n   o  Packet reordering that exceeds the capacity of\
    \ a jitter buffer can\n      cause user-perceptible quality problems (e.g., glitches,\
    \ noise)\n      for delay-sensitive communication, such as interactive\n     \
    \ conversations for which small jitter buffers are necessary to\n      preserve\
    \ human perceptions of real-time interaction.  Interactive\n      real-time communication\
    \ implementations often discard data that is\n      sufficiently late so that\
    \ it cannot be rendered in source stream\n      order, making retransmission counterproductive.\
    \  For this reason,\n      implementations of interactive real-time communication\
    \ often do\n      not use retransmission.\n   o  In contrast, replay of recorded\
    \ media can tolerate significantly\n      longer delays than interactive conversations,\
    \ so replay is likely\n      to use larger jitter buffers than interactive conversations.\n\
    \      These larger jitter buffers increase the tolerance of replay to\n     \
    \ reordering by comparison to interactive conversations.  The size\n      of the\
    \ jitter buffer imposes an upper bound on replay tolerance to\n      reordering\
    \ but does enable retransmission to be used when the\n      jitter buffer is significantly\
    \ larger than the amount of data that\n      can be expected to arrive during\
    \ the round-trip latency for\n      retransmission.\n   Network packet reordering\
    \ has no effective upper bound and can exceed\n   the size of any reasonable jitter\
    \ buffer.  In practice, the size of\n   jitter buffers for replay is limited by\
    \ external factors such as the\n   amount of time that a human is willing to wait\
    \ for replay to start.\n"
- title: 5.3.  Drop Precedence and Transport Protocols
  contents:
  - "5.3.  Drop Precedence and Transport Protocols\n   Packets within the same network\
    \ 5-tuple that use PHBs within a single\n   AF class can be expected to draw upon\
    \ the same forwarding resources\n   on network nodes (e.g., use the same router\
    \ queue), and hence use of\n   multiple drop precedences within an AF class is\
    \ not expected to cause\n   latency variation.  When PHBs within a single AF class\
    \ are mixed\n   within a flow, the resulting overall likelihood that packets will\
    \ be\n   dropped from that flow is a mix of the drop likelihoods of the PHBs\n\
    \   involved.\n   There are situations in which drop precedences should not be\
    \ mixed.\n   A simple example is that there is little value in mixing drop\n \
    \  precedences within a TCP connection, because TCP's ordered delivery\n   behavior\
    \ results in any drop requiring the receiver to wait for the\n   dropped packet\
    \ to be retransmitted.  Any resulting delay depends on\n   the RTT and not the\
    \ packet that was dropped.  Hence a single DSCP\n   should be used for all packets\
    \ in a TCP connection.\n   As a consequence, when TCP is selected for NAT/FW traversal\
    \ (e.g., by\n   TURN), a single DSCP should be used for all traffic on that TCP\n\
    \   connection.  An additional reason for this recommendation is that\n   packetization\
    \ for STUN/ICE/TURN occurs before passing the resulting\n   packets to TCP; TCP\
    \ resegmentation may result in a different\n   packetization on the wire, breaking\
    \ any association between DSCPs and\n   specific data to which they are intended\
    \ to apply.\n   SCTP [RFC4960] differs from TCP in a number of ways, including\
    \ the\n   ability to deliver messages in an order that differs from the order\n\
    \   in which they were sent and support for unreliable streams.  However,\n  \
    \ SCTP performs congestion control and retransmission across the entire\n   association,\
    \ and not on a per-stream basis.  Although there may be\n   advantages to using\
    \ multiple drop precedence across SCTP streams or\n   within an SCTP stream that\
    \ does not use reliable ordered delivery,\n   there is no practical operational\
    \ experience in doing so (e.g., the\n   SCTP sockets API [RFC6458] does not support\
    \ use of more than one DSCP\n   for an SCTP association).  As a consequence, the\
    \ impacts on SCTP\n   protocol and implementation behavior are unknown and difficult\
    \ to\n   predict.  Hence a single DSCP should be used for all packets in an\n\
    \   SCTP association, independent of the number or nature of streams in\n   that\
    \ association.  Similar reasoning applies to a DCCP connection; a\n   single DSCP\
    \ should be used because the scope of congestion control is\n   the connection\
    \ and there is no operational experience with using more\n   than one DSCP.  This\
    \ recommendation may be revised in the future if\n   experiments, analysis, and\
    \ operational experience provide compelling\n   reasons to change it.\n   Guidance\
    \ on transport protocol design and implementation to provide\n   support for use\
    \ of multiple PHBs and DSCPs in a transport protocol\n   connection (e.g., DCCP)\
    \ or transport protocol association (e.g.,\n   SCTP) is out of scope for this\
    \ memo.\n"
- title: 5.4.  Diffserv and RTCP
  contents:
  - "5.4.  Diffserv and RTCP\n   RTCP [RFC3550] is used with RTP to monitor quality\
    \ of service and\n   convey information about RTP session participants.  A sender\
    \ of RTCP\n   packets that also sends RTP packets (i.e., originates an RTP stream)\n\
    \   should use the same DSCP marking for both types of packets.  If an\n   RTCP\
    \ sender doesn't send any RTP packets, it should mark its RTCP\n   packets with\
    \ the DSCP that it would use if it did send RTP packets\n   with media similar\
    \ to the RTP traffic that it receives.  If the RTCP\n   sender uses or would use\
    \ multiple DSCPs that differ only in drop\n   precedence for RTP, then it should\
    \ use the DSCP with the least\n   likelihood of drop for RTCP to increase the\
    \ likelihood of RTCP packet\n   delivery.\n   If the SDP bundle extension [SDP-BUNDLE]\
    \ is used to negotiate sending\n   multiple types of media in a single RTP session,\
    \ then receivers will\n   send separate RTCP reports for each type of media, using\
    \ a separate\n   SSRC for each media type; each RTCP report should be marked with\
    \ the\n   DSCP corresponding to the type of media handled by the reporting\n \
    \  SSRC.\n   This guidance may result in different DSCP markings for RTP streams\n\
    \   and RTCP receiver reports about those RTP streams.  The resulting\n   variation\
    \ in network QoS treatment by traffic direction is necessary\n   to obtain representative\
    \ round-trip time (RTT) estimates that\n   correspond to the media path RTT, which\
    \ may differ from the transport\n   protocol RTT.  RTCP receiver reports may be\
    \ relatively infrequent,\n   and hence the resulting RTT estimates are of limited\
    \ utility for\n   transport protocol congestion control (although those RTT estimates\n\
    \   have other important uses; see [RFC3550]).  For this reason, it is\n   important\
    \ that RTCP receiver reports sent by an SSRC receive the same\n   network QoS\
    \ treatment as the RTP stream being sent by that SSRC.\n"
- title: 6.  Guidelines
  contents:
  - "6.  Guidelines\n   The only use of multiple standardized PHBs and DSCPs that\
    \ does not\n   enable network reordering among packets marked with different DSCPs\n\
    \   is use of PHBs within a single AF class.  All other uses of multiple\n   PHBs\
    \ and/or the class selector DSCPs enable network reordering of\n   packets that\
    \ are marked with different DSCPs.  Based on this and the\n   foregoing discussion,\
    \ the guidelines in this section apply to use of\n   Diffserv with real-time communications.\n\
    \   Applications and other traffic sources (including RTP SSRCs):\n   o  Should\
    \ limit use of DSCPs within a single RTP stream to those\n      whose corresponding\
    \ PHBs do not enable packet reordering.  If this\n      is not done, significant\
    \ network reordering may overwhelm\n      implementation assumptions about reordering\
    \ limits, e.g., jitter\n      buffer size, causing poor user experiences (see\
    \ Section 5.2).\n      This guideline applies to all of the RTP streams that are\
    \ within\n      the scope of a common (coupled) congestion controller when that\n\
    \      controller does not use per-RTP-stream measurements for bottleneck\n  \
    \    detection.\n   o  Should use a single DSCP for RTCP packets, which should\
    \ be a DSCP\n      used for RTP packets that are or would be sent by that SSRC\
    \ (see\n      Section 5.4).\n   o  Should use a single DSCP for all packets within\
    \ a reliable\n      transport protocol session (e.g., TCP connection, SCTP\n \
    \     association) or DCCP connection (see Sections 5.1 and 5.3).  For\n     \
    \ SCTP, this requirement applies across the entire SCTP association,\n      and\
    \ not just to individual streams within an association.  When\n      TURN selects\
    \ TCP for NAT/FW traversal, this guideline applies to\n      all traffic multiplexed\
    \ onto that TCP connection, in contrast to\n      use of UDP for NAT/FW traversal.\n\
    \   o  May use different DSCPs whose corresponding PHBs enable reordering\n  \
    \    within a single UDP or UDP-Lite 5-tuple, subject to the above\n      constraints.\
    \  The service differentiation provided by such usage\n      is unreliable, as\
    \ it may be removed or changed by DSCP remarking\n      at network boundaries\
    \ as described in Section 3.2 above.\n   o  Cannot rely on end-to-end preservation\
    \ of DSCPs as network node\n      remarking can change DSCPs and remove drop precedence\
    \ distinctions\n      (see Section 3.2).  For example, if a source uses drop precedence\n\
    \      distinctions within an AF class to identify different types of\n      video\
    \ frames, using those DSCP values at the receiver to identify\n      frame type\
    \ is inherently unreliable.\n   o  Should limit use of the CS1 codepoint to traffic\
    \ for which best\n      effort forwarding is acceptable, as network support for\
    \ use of CS1\n      to select a \"less than best-effort\" PHB is inconsistent.\
    \  Further,\n      some networks may treat CS1 as providing \"better than best-effort\"\
    \n      forwarding behavior.\n   There is no guidance in this memo on how network\
    \ operators should\n   differentiate traffic.  Networks may support all of the\
    \ PHBs\n   discussed herein, classify EF and AFxx traffic identically, or even\n\
    \   remark all traffic to best effort at some ingress points.\n   Nonetheless,\
    \ it is useful for applications and other traffic sources\n   to provide finer\
    \ granularity DSCP marking on packets for the benefit\n   of networks that offer\
    \ QoS service differentiation.  A specific\n   example is that traffic originating\
    \ from a browser may benefit from\n   QoS service differentiation in within-building\
    \ and residential access\n   networks, even if the DSCP marking is subsequently\
    \ removed or\n   simplified.  This is because such networks and the boundaries\
    \ between\n   them are likely traffic bottleneck locations (e.g., due to customer\n\
    \   aggregation onto common links and/or speed differences among links\n   used\
    \ by the same traffic).\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations for all of the technologies\
    \ discussed in\n   this memo apply; in particular, see the security considerations\
    \ for\n   RTP in [RFC3550] and Diffserv in [RFC2474] and [RFC2475].\n   Multiplexing\
    \ of multiple protocols onto a single UDP 5-tuple via\n   encapsulation has implications\
    \ for network functionality that\n   monitors or inspects individual protocol\
    \ flows, e.g., firewalls and\n   traffic monitoring systems.  When implementations\
    \ of such\n   functionality lack visibility into encapsulated traffic (likely\
    \ for\n   many current implementations), it may be difficult or impossible to\n\
    \   apply network security policy and associated controls at a finer\n   granularity\
    \ than the overall UDP 5-tuple.\n   Use of multiple DSCPs that enable reordering\
    \ within an overall real-\n   time communication interaction enlarges the set\
    \ of network forwarding\n   resources used by that interaction, thereby increasing\
    \ exposure to\n   resource depletion or failure, independent of whether the underlying\n\
    \   cause is benign or malicious.  This represents an increase in the\n   effective\
    \ attack surface of the interaction and is a consideration in\n   selecting an\
    \ appropriate degree of QoS differentiation among the\n   components of the real-time\
    \ communication interaction.  See\n   Section 3.3.2.1 of [RFC6274] for related\
    \ discussion of DSCP security\n   considerations.\n   Use of multiple DSCPs to\
    \ provide differentiated QoS service may\n   reveal information about the encrypted\
    \ traffic to which different\n   service levels are provided.  For example, DSCP-based\
    \ identification\n   of RTP streams combined with packet frequency and packet\
    \ size could\n   reveal the type or nature of the encrypted source streams.  The\
    \ IP\n   header used for forwarding has to be unencrypted for obvious reasons,\n\
    \   and the DSCP likewise has to be unencrypted to enable different IP\n   forwarding\
    \ behaviors to be applied to different packets.  The nature\n   of encrypted traffic\
    \ components can be disguised via encrypted dummy\n   data padding and encrypted\
    \ dummy packets, e.g., see the discussion of\n   traffic flow confidentiality\
    \ in [RFC4303].  Encrypted dummy packets\n   could even be added in a fashion\
    \ that an observer of the overall\n   encrypted traffic might mistake for another\
    \ encrypted RTP stream.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC768]   Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              DOI 10.17487/RFC0768, August 1980,\n        \
    \      <http://www.rfc-editor.org/info/rfc768>.\n   [RFC793]   Postel, J., \"\
    Transmission Control Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793,\
    \ September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n  \
    \ [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,\n              \"\
    Definition of the Differentiated Services Field (DS\n              Field) in the\
    \ IPv4 and IPv6 Headers\", RFC 2474,\n              DOI 10.17487/RFC2474, December\
    \ 1998,\n              <http://www.rfc-editor.org/info/rfc2474>.\n   [RFC2475]\
    \  Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.,\n              and\
    \ W. Weiss, \"An Architecture for Differentiated\n              Services\", RFC\
    \ 2475, DOI 10.17487/RFC2475, December 1998,\n              <http://www.rfc-editor.org/info/rfc2475>.\n\
    \   [RFC2597]  Heinanen, J., Baker, F., Weiss, W., and J. Wroclawski,\n      \
    \        \"Assured Forwarding PHB Group\", RFC 2597,\n              DOI 10.17487/RFC2597,\
    \ June 1999,\n              <http://www.rfc-editor.org/info/rfc2597>.\n   [RFC3246]\
    \  Davie, B., Charny, A., Bennet, J., Benson, K., Le Boudec,\n              J.,\
    \ Courtney, W., Davari, S., Firoiu, V., and D.\n              Stiliadis, \"An\
    \ Expedited Forwarding PHB (Per-Hop\n              Behavior)\", RFC 3246, DOI\
    \ 10.17487/RFC3246, March 2002,\n              <http://www.rfc-editor.org/info/rfc3246>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC3662]  Bless, R., Nichols, K., and K. Wehrle, \"A Lower Effort\n     \
    \         Per-Domain Behavior (PDB) for Differentiated Services\",\n         \
    \     RFC 3662, DOI 10.17487/RFC3662, December 2003,\n              <http://www.rfc-editor.org/info/rfc3662>.\n\
    \   [RFC3828]  Larzon, L-A., Degermark, M., Pink, S., Jonsson, L-E., Ed.,\n  \
    \            and G. Fairhurst, Ed., \"The Lightweight User Datagram\n        \
    \      Protocol (UDP-Lite)\", RFC 3828, DOI 10.17487/RFC3828, July\n         \
    \     2004, <http://www.rfc-editor.org/info/rfc3828>.\n   [RFC4340]  Kohler, E.,\
    \ Handley, M., and S. Floyd, \"Datagram\n              Congestion Control Protocol\
    \ (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340, March 2006,\n     \
    \         <http://www.rfc-editor.org/info/rfc4340>.\n   [RFC4960]  Stewart, R.,\
    \ Ed., \"Stream Control Transmission Protocol\",\n              RFC 4960, DOI\
    \ 10.17487/RFC4960, September 2007,\n              <http://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC5405]  Eggert, L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n \
    \             for Application Designers\", BCP 145, RFC 5405,\n              DOI\
    \ 10.17487/RFC5405, November 2008,\n              <http://www.rfc-editor.org/info/rfc5405>.\n\
    \   [RFC5865]  Baker, F., Polk, J., and M. Dolly, \"A Differentiated\n       \
    \       Services Code Point (DSCP) for Capacity-Admitted Traffic\",\n        \
    \      RFC 5865, DOI 10.17487/RFC5865, May 2010,\n              <http://www.rfc-editor.org/info/rfc5865>.\n\
    \   [RFC6951]  Tuexen, M. and R. Stewart, \"UDP Encapsulation of Stream\n    \
    \          Control Transmission Protocol (SCTP) Packets for End-Host\n       \
    \       to End-Host Communication\", RFC 6951,\n              DOI 10.17487/RFC6951,\
    \ May 2013,\n              <http://www.rfc-editor.org/info/rfc6951>.\n   [RFC7656]\
    \  Lennox, J., Gross, K., Nandakumar, S., Salgueiro, G., and\n              B.\
    \ Burman, Ed., \"A Taxonomy of Semantics and Mechanisms\n              for the\
    \ Real-Time Transport Protocol (RTP) Sources\",\n              RFC 7656, DOI 10.17487/RFC7656,\
    \ November 2015,\n              <http://www.rfc-editor.org/info/rfc7656>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [COUPLED-CC]\n              Welzl, M., Islam,\
    \ S., and S. Gjessing, \"Coupled congestion\n              control for RTP media\"\
    , Work in Progress,\n              draft-welzl-rmcat-coupled-cc-05, June 2015.\n\
    \   [DATA-CHAN]\n              Jesup, R., Loreto, S., and M. Tuexen, \"WebRTC\
    \ Data\n              Channels\", Work in Progress, draft-ietf-rtcweb-data-\n\
    \              channel-13, January 2015.\n   [DIFFSERV-INTERCON]\n           \
    \   Geib, R., Ed. and D. Black, \"Diffserv interconnection\n              classes\
    \ and practice\", Work in Progress, draft-ietf-tsvwg-\n              diffserv-intercon-03,\
    \ October 2015.\n   [H.221]    ITU-T, \"Frame structure for a 64 to 1920 kbit/s\
    \ channel in\n              audiovisual teleservices\", Recommendation H.221,\
    \ March\n              2009.\n   [H.264]    ITU-T, \"Advanced video coding for\
    \ generic audiovisual\n              services\", Recommendation H.264, February\
    \ 2014.\n   [RFC2697]  Heinanen, J. and R. Guerin, \"A Single Rate Three Color\n\
    \              Marker\", RFC 2697, DOI 10.17487/RFC2697, September 1999,\n   \
    \           <http://www.rfc-editor.org/info/rfc2697>.\n   [RFC2698]  Heinanen,\
    \ J. and R. Guerin, \"A Two Rate Three Color\n              Marker\", RFC 2698,\
    \ DOI 10.17487/RFC2698, September 1999,\n              <http://www.rfc-editor.org/info/rfc2698>.\n\
    \   [RFC2914]  Floyd, S., \"Congestion Control Principles\", BCP 41,\n       \
    \       RFC 2914, DOI 10.17487/RFC2914, September 2000,\n              <http://www.rfc-editor.org/info/rfc2914>.\n\
    \   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n   \
    \           of Explicit Congestion Notification (ECN) to IP\",\n             \
    \ RFC 3168, DOI 10.17487/RFC3168, September 2001,\n              <http://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3270]  Le Faucheur, F., Wu, L., Davie, B., Davari, S., Vaananen,\n   \
    \           P., Krishnan, R., Cheval, P., and J. Heinanen, \"Multi-\n        \
    \      Protocol Label Switching (MPLS) Support of Differentiated\n           \
    \   Services\", RFC 3270, DOI 10.17487/RFC3270, May 2002,\n              <http://www.rfc-editor.org/info/rfc3270>.\n\
    \   [RFC4103]  Hellstrom, G. and P. Jones, \"RTP Payload for Text\n          \
    \    Conversation\", RFC 4103, DOI 10.17487/RFC4103, June 2005,\n            \
    \  <http://www.rfc-editor.org/info/rfc4103>.\n   [RFC4303]  Kent, S., \"IP Encapsulating\
    \ Security Payload (ESP)\",\n              RFC 4303, DOI 10.17487/RFC4303, December\
    \ 2005,\n              <http://www.rfc-editor.org/info/rfc4303>.\n   [RFC4566]\
    \  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n              July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n\
    \   [RFC4594]  Babiarz, J., Chan, K., and F. Baker, \"Configuration\n        \
    \      Guidelines for DiffServ Service Classes\", RFC 4594,\n              DOI\
    \ 10.17487/RFC4594, August 2006,\n              <http://www.rfc-editor.org/info/rfc4594>.\n\
    \   [RFC5109]  Li, A., Ed., \"RTP Payload Format for Generic Forward Error\n \
    \             Correction\", RFC 5109, DOI 10.17487/RFC5109, December\n       \
    \       2007, <http://www.rfc-editor.org/info/rfc5109>.\n   [RFC5127]  Chan, K.,\
    \ Babiarz, J., and F. Baker, \"Aggregation of\n              Diffserv Service\
    \ Classes\", RFC 5127, DOI 10.17487/RFC5127,\n              February 2008, <http://www.rfc-editor.org/info/rfc5127>.\n\
    \   [RFC5129]  Davie, B., Briscoe, B., and J. Tay, \"Explicit Congestion\n   \
    \           Marking in MPLS\", RFC 5129, DOI 10.17487/RFC5129, January\n     \
    \         2008, <http://www.rfc-editor.org/info/rfc5129>.\n   [RFC5245]  Rosenberg,\
    \ J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol\
    \ for Network Address Translator (NAT)\n              Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n              DOI 10.17487/RFC5245, April 2010,\n  \
    \            <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5389]  Rosenberg,\
    \ J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session Traversal\
    \ Utilities for NAT (STUN)\", RFC 5389,\n              DOI 10.17487/RFC5389, October\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n   [RFC5462]\
    \  Andersson, L. and R. Asati, \"Multiprotocol Label Switching\n             \
    \ (MPLS) Label Stack Entry: \"EXP\" Field Renamed to \"Traffic\n             \
    \ Class\" Field\", RFC 5462, DOI 10.17487/RFC5462, February\n              2009,\
    \ <http://www.rfc-editor.org/info/rfc5462>.\n   [RFC5761]  Perkins, C. and M.\
    \ Westerlund, \"Multiplexing RTP Data and\n              Control Packets on a\
    \ Single Port\", RFC 5761,\n              DOI 10.17487/RFC5761, April 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5761>.\n   [RFC5764]  McGrew,\
    \ D. and E. Rescorla, \"Datagram Transport Layer\n              Security (DTLS)\
    \ Extension to Establish Keys for the Secure\n              Real-time Transport\
    \ Protocol (SRTP)\", RFC 5764,\n              DOI 10.17487/RFC5764, May 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5764>.\n   [RFC5766]  Mahy,\
    \ R., Matthews, P., and J. Rosenberg, \"Traversal Using\n              Relays\
    \ around NAT (TURN): Relay Extensions to Session\n              Traversal Utilities\
    \ for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766, April 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5766>.\n   [RFC6062]  Perreault,\
    \ S., Ed. and J. Rosenberg, \"Traversal Using\n              Relays around NAT\
    \ (TURN) Extensions for TCP Allocations\",\n              RFC 6062, DOI 10.17487/RFC6062,\
    \ November 2010,\n              <http://www.rfc-editor.org/info/rfc6062>.\n  \
    \ [RFC6274]  Gont, F., \"Security Assessment of the Internet Protocol\n      \
    \        Version 4\", RFC 6274, DOI 10.17487/RFC6274, July 2011,\n           \
    \   <http://www.rfc-editor.org/info/rfc6274>.\n   [RFC6386]  Bankoski, J., Koleszar,\
    \ J., Quillio, L., Salonen, J.,\n              Wilkins, P., and Y. Xu, \"VP8 Data\
    \ Format and Decoding\n              Guide\", RFC 6386, DOI 10.17487/RFC6386,\
    \ November 2011,\n              <http://www.rfc-editor.org/info/rfc6386>.\n  \
    \ [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme,\n       \
    \       \"IPv6 Flow Label Specification\", RFC 6437,\n              DOI 10.17487/RFC6437,\
    \ November 2011,\n              <http://www.rfc-editor.org/info/rfc6437>.\n  \
    \ [RFC6458]  Stewart, R., Tuexen, M., Poon, K., Lei, P., and V.\n            \
    \  Yasevich, \"Sockets API Extensions for the Stream Control\n              Transmission\
    \ Protocol (SCTP)\", RFC 6458,\n              DOI 10.17487/RFC6458, December 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6458>.\n   [RMCAT-CC] Jesup,\
    \ R. and Z. Sarker, \"Congestion Control Requirements\n              for Interactive\
    \ Real-Time Media\", Work in Progress,\n              draft-ietf-rmcat-cc-requirements-09,\
    \ December 2014.\n   [RTP-USAGE]\n              Perkins, C., Westerlund, M., and\
    \ J. Ott, \"Web Real-Time\n              Communication (WebRTC): Media Transport\
    \ and Use of RTP\",\n              Work in Progress, draft-ietf-rtcweb-rtp-usage-25,\
    \ June\n              2015.\n   [SDP-BUNDLE]\n              Holmberg, C., Alvestrand,\
    \ H., and C. Jennings,\n              \"Negotiating Media Multiplexing Using the\
    \ Session\n              Description Protocol (SDP)\", Work in Progress, draft-ietf-\n\
    \              mmusic-sdp-bundle-negotiation-23, July 2015.\n   [SRTP-DTLS]\n\
    \              Petit-Huguenin, M. and G. Salgueiro, \"Multiplexing Scheme\n  \
    \            Updates for Secure Real-time Transport Protocol (SRTP)\n        \
    \      Extension for Datagram Transport Layer Security (DTLS)\",\n           \
    \   Work in Progress, draft-petithuguenin-avtcore-rfc5764-mux-\n             \
    \ fixes-02, March 2015.\n   [W3C.WD-mediacapture-streams-20130903]\n         \
    \     Burnett, D., Bergkvist, A., Jennings, C., and A.\n              Narayanan,\
    \ \"Media Capture and Streams\", World Wide Web\n              Consortium Recommendation\
    \ WD-mediacapture-streams-\n              20130903, September 2013, <http://www.w3.org/TR/2013/\n\
    \              WD-mediacapture-streams-20130903>.\n   [WEBRTC-OVERVIEW]\n    \
    \          Alvestrand, H., \"Overview: Real Time Protocols for\n             \
    \ Browser-based Applications\", Work in Progress,\n              draft-ietf-rtcweb-overview-14,\
    \ June 2015.\n   [WEBRTC-TRANSPORTS]\n              Alvestrand, H., \"Transports\
    \ for WebRTC\", Work in\n              Progress, draft-ietf-rtcweb-transports-10,\
    \ October 2015.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This memo is the result of many conversations that have\
    \ occurred\n   within the DART working group and other working groups in the RAI\
    \ and\n   Transport areas.  Many thanks to Aamer Akhter, Harald Alvestrand,\n\
    \   Fred Baker, Richard Barnes, Erin Bournival, Ben Campbell, Brian\n   Carpenter,\
    \ Spencer Dawkins, Keith Drage, Gorry Fairhurst, Ruediger\n   Geib, Cullen Jennings,\
    \ Jonathan Lennox, Karen Nielsen, Colin Perkins,\n   James Polk, Robert Sparks,\
    \ Tina Tsou, Michael Welzl, Dan York, and\n   the DART WG participants for their\
    \ reviews and comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Black (editor)\n   EMC\n   176 South Street\n  \
    \ Hopkinton, MA  01748\n   United States\n   Phone: +1 508 293-7953\n   Email:\
    \ david.black@emc.com\n   Paul Jones\n   Cisco\n   7025 Kit Creek Road\n   Research\
    \ Triangle Park, NC  27502\n   United States\n   Phone: +1 919 476 2048\n   Email:\
    \ paulej@packetizer.com\n"
