Abstract This document formally documents an existing public key file format in use for exchanging public keys between different Secure Shell (SSH) implementations.
In addition, this document defines a standard textual representation for SSH public key fingerprints.
The SSH protocol supports the use of public/private key pairs in order to perform authentication based on public key cryptography.
However, in order to use public key authentication in the SSH protocol, public keys must first be exchanged between client and server.
This document formally describes an existing public key file format that can be used with any of the common existing file transfer mechanisms in order to exchange public keys.
The SSH protocol also uses public/private key pairs to authenticate the server.
In this scenario, it is important to verify that the public key provided by the server is indeed the server's public key.
This document describes a mechanism for creating a short text string that uniquely represents a particular public key, called fingerprinting.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
In order to implement public key authentication, SSH implementations must share public key files between the client and the server in order to interoperate.
A key file is a text file, containing a sequence of lines.
Each line in the file MUST NOT be longer than 72 8 bit bytes excluding line termination characters.
Line Termination Characters Implementations SHOULD generate public key files using their system's local text file representation.
In the event that public key files are not transferred as text files, implementations SHOULD be prepared to read files using any of the common line termination sequence, <CR>, <LF>, or <CR><LF>. 3.2.
The first line of a conforming key file MUST be a begin marker, which is the literal text:
The last line of a conforming key file MUST be an end marker, which is the literal text:
The key file header section consists of multiple RFC822 style header fields.
The Header tag MUST NOT be more than 64 8 bit bytes and is case  insensitive.
The Header value MUST NOT be more than 1024 8 bit bytes.
Each line in the header MUST NOT be more than 72 8 bit bytes.
The Header tag MUST be encoded in US ASCII.
The Header value MUST be encoded in UTF 8 [RFC3629].
The space of header tags is managed as described in Section 5.
Compliant implementations MUST ignore headers with unrecognized header tags.
Implementations SHOULD preserve such unrecognized headers when manipulating the key file.
This field is used to store the login name that the key was generated under.
For example: Subject: user 3.3.2.
The comment header contains a user specified comment.
The comment SHOULD be displayed when using the key.
It is suggested that this field default to user@hostname for the user and machine used to generate the key.
some existing implementations fail if these quotation marks are omitted.
Compliant implementations MUST function correctly if the quotation marks are omitted.
Implementations MAY include the quotation marks.
If the first and last characters of the Header value are matching quotation marks, implementations SHOULD remove them before using the value.
Private Use Headers Headers with header tags beginning with "x " are reserved for private use.
The body of a public key file is the base64 encoded ([RFC2045])
public key data as specified by [RFC4253]
, Section 6.6: string    certificate or public key format identifier byte[n]
As with all other lines, each line in the body MUST NOT be longer than 72 8 bit bytes excluding line termination characters.
Differences with RFC 1421 PEM Formats Implementers should take care to notice that while the format is superficially similar to those specified by PEM [RFC1421] and OpenPGP [RFC2440], it is not identical; most notably:  The other specifications use different BEGIN/END delimiters (five dashes, no space rather than four dashes and a space).
There is no blank line before the start of the base64 encoded contents.
There is no Cyclic Redundancy Check (CRC) at the end of the base64 encoded block.
Header continuation uses a backslash at the end of the continued line rather than whitespace at the start of the next line.
The following are some examples of public key files that are compliant (note that the examples all wrap before 72 bytes to meet IETF document requirements; however, they are still compliant.)
KEY   Comment: "1024 bit RSA, converted from OpenSSH by me@example.com"
x command: /home/me/bin/lock in guest.sh AAAAB3NzaC1yc2EAAAABIwAAAIEA1on8gxCGJJWSRT4uOrR13mUaUk0hRf4RzxSZ1zRb
: This is my public key for use on \ servers which I don't like.
AAAAB3NzaC1kc3MAAACBAPY8ZOHY2yFSJA6XYC9HRwNHxaehvx5wOJ0rzZdzoSOXxbET W6ToHv8D1UJ/z zHo9Fiko5XybZnDIaBDHtblQ Yp7StxyltHnXF1YLfKD1G4T6JYrdH YI14Om1eg9e4NnCRleaqoZPF3UGfZia6bXrGTQf3gJq2e7Yisk/gF 1VAAAAFQDb8D5c
vwHWTZDPfX0D2s9Rd7NBvQAAAIEAlN92 Bb7D4KLYk3IwRbXblwXdkPggA4pfdtW9vGf J0/RHd NjB4eo1D 0dix6tXwYGN7PKS5R
DSA Public Key for use with MyIsp AAAAB3NzaC1kc3MAAACBAPY8ZOHY2yFSJA6XYC9HRwNHxaehvx5wOJ0rzZdzoSOXxbET W6ToHv8D1UJ/z zHo9Fiko5XybZnDIaBDHtblQ Yp7StxyltHnXF1YLfKD1G4T6JYrdH YI14Om1eg9e4NnCRleaqoZPF3UGfZia6bXrGTQf3gJq2e7Yisk/gF 1VAAAAFQDb8D5c
vwHWTZDPfX0D2s9Rd7NBvQAAAIEAlN92 Bb7D4KLYk3IwRbXblwXdkPggA4pfdtW9vGf J0/RHd NjB4eo1D 0dix6tXwYGN7PKS5R
: me Comment: 1024 bit rsa, created by me@example.com Mon Jan 15 \ 08:31:24
The security of the SSH protocols relies on the verification of public host keys.
Since public keys tend to be very large, it is difficult for a human to verify an entire host key.
Even with a Public Key Infrastructure (PKI) in place, it is useful to have a standard for exchanging short fingerprints of public keys.
This section formally describes the method of generating public key fingerprints that is in common use in the SSH community.
The fingerprint of a public key consists of the output of the MD5 message digest algorithm [RFC1321].
The input to the algorithm is the public key data as specified by [RFC4253].
(This is the same data that is base64 encoded to form the body of the public key file.)
The output of the algorithm is presented to the user as a sequence of 16 octets printed as hexadecimal with lowercase letters and separated by colons.
IANA Considerations Section 3.3 defines a new namespace of "Header tags".
These are US ASCII strings of maximum length 64 characters and are case insensitive.
IANA has created and maintains a registry of these header tags.
The registry maps each header tag to a reference defining the header.
The initial contents of the registry are as follows:
subject defined in Section 3.3.1 comment defined in Section 3.3.2 Header tags beginning with "x " are reserved for private use, as defined in [RFC2434].
All other allocations are to be made by IETF consensus, as defined in [RFC2434].
The file format described by this document provides no mechanism to verify the integrity or otherwise detect tampering with the data stored in such files.
Given the potential of adversarial tampering with this data, system specific measures (e.g., Access Control Lists, UNIX permissions, other Discretionary and/or Mandatory Access Controls) SHOULD be used to protect these files.
Also, if the contents of these files are transferred it SHOULD be done over a trusted channel.
The header data allowed by this file format could contain an unlimited range of information.
While in many environments the information conveyed by this header data may be considered innocuous public information, it may constitute a channel through which information about a user, a key, or its use may be disclosed intentionally or otherwise
The presence and use of this header data SHOULD be reviewed by sites that deploy this file format.
The public key fingerprint method presented here relies on the MD5 one way hash function, which is known to have certain weaknesses regarding its collision resistance; however, the particular use made of MD5 here depends solely on its 2nd preimage resistance, not on its collision resistance.
MD5 is used here for historical reasons.
