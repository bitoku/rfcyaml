- contents:
  - '        Explicit Congestion Notification (ECN) for RTP over UDP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo specifies how Explicit Congestion Notification (ECN) can
    be\n   used with the Real-time Transport Protocol (RTP) running over UDP,\n   using
    the RTP Control Protocol (RTCP) as a feedback mechanism.  It\n   defines a new
    RTCP Extended Report (XR) block for periodic ECN\n   feedback, a new RTCP transport
    feedback message for timely reporting\n   of congestion events, and a Session
    Traversal Utilities for NAT\n   (STUN) extension used in the optional initialisation
    method using\n   Interactive Connectivity Establishment (ICE).  Signalling and\n
    \  procedures for negotiation of capabilities and initialisation methods\n   are
    also defined.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6679.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Conventions, Definitions, and Acronyms ..........................5\n   3.
    Discussion, Requirements, and Design Rationale ..................6\n      3.1.
    Requirements ...............................................8\n      3.2. Applicability
    ..............................................8\n      3.3. Interoperability ..........................................12\n
    \  4. Overview of Use of ECN with RTP/UDP/IP .........................13\n   5.
    RTCP Extensions for ECN Feedback ...............................16\n      5.1.
    RTP/AVPF Transport-Layer ECN Feedback Packet ..............16\n      5.2. RTCP
    XR Report Block for ECN Summary Information ..........19\n   6. SDP Signalling
    Extensions for ECN ..............................21\n      6.1. Signalling ECN
    Capability Using SDP .......................21\n      6.2. RTCP ECN Feedback SDP
    Parameter ...........................26\n      6.3. XR Block ECN SDP Parameter
    ................................26\n      6.4. ICE Parameter to Signal ECN Capability
    ....................27\n   7. Use of ECN with RTP/UDP/IP .....................................27\n
    \     7.1. Negotiation of ECN Capability .............................27\n      7.2.
    Initiation of ECN Use in an RTP Session ...................28\n      7.3. Ongoing
    Use of ECN within an RTP Session ..................35\n      7.4. Detecting Failures
    ........................................38\n   8. Processing ECN in RTP Translators
    and Mixers ...................42\n      8.1. Transport Translators .....................................42\n
    \     8.2. Fragmentation and Reassembly in Translators ...............43\n      8.3.
    Generating RTCP ECN Feedback in Media Transcoders .........45\n      8.4. Generating
    RTCP ECN Feedback in Mixers ....................46\n   9. Implementation Considerations
    ..................................47\n   10. IANA Considerations ...........................................47\n
    \     10.1. SDP Attribute Registration ...............................47\n      10.2.
    RTP/AVPF Transport-Layer Feedback Message ................47\n      10.3. RTCP
    Feedback SDP Parameter ..............................48\n      10.4. RTCP XR Report
    Blocks ....................................48\n      10.5. RTCP XR SDP Parameter
    ....................................48\n      10.6. STUN Attribute ...........................................48\n
    \     10.7. ICE Option ...............................................48\n   11.
    Security Considerations .......................................48\n   12. Examples
    of SDP Signalling ....................................51\n      12.1. Basic SDP
    Offer/Answer ...................................52\n      12.2. Declarative Multicast
    SDP ................................54\n   13. Acknowledgments ...............................................54\n
    \  14. References ....................................................55\n      14.1.
    Normative References .....................................55\n      14.2. Informative
    References ...................................56\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo outlines how Explicit Congestion Notification
    (ECN)\n   [RFC3168] can be used for Real-time Transport Protocol (RTP)\n   [RFC3550]
    flows running over UDP/IP that use the RTP Control Protocol\n   (RTCP) as a feedback
    mechanism.  The solution consists of feedback of\n   ECN congestion experienced
    markings to the sender using RTCP,\n   verification of ECN functionality end-to-end,
    and procedures for how\n   to initiate ECN usage.  Since the initiation process
    has some\n   dependencies on the signalling mechanism used to establish the RTP\n
    \  session, a specification for signalling mechanisms using the Session\n   Description
    Protocol (SDP) [RFC4566] is included.\n   ECN can be used to minimise the impact
    of congestion on real-time\n   multimedia traffic.  The use of ECN provides a
    way for the network to\n   send congestion control signals to the media transport
    without having\n   to impair the media.  Unlike packet loss, ECN signals unambiguously\n
    \  indicate congestion to the transport as quickly as feedback delays\n   allow
    and without confusing congestion with losses that might have\n   occurred for
    other reasons such as transmission errors, packet-size\n   errors, routing errors,
    badly implemented middleboxes, policy\n   violations, and so forth.\n   The introduction
    of ECN into the Internet requires changes to both\n   the network and transport
    layers.  At the network layer, IP\n   forwarding has to be updated to allow routers
    to mark packets, rather\n   than discarding them in times of congestion [RFC3168].
    \ In addition,\n   transport protocols have to be modified to inform the sender
    that\n   ECN-marked packets are being received, so it can respond to the\n   congestion.
    \ The Transmission Control Protocol (TCP) [RFC3168],\n   Stream Control Transmission
    Protocol (SCTP) [RFC4960], and Datagram\n   Congestion Control Protocol (DCCP)
    [RFC4340] have been updated to\n   support ECN, but to date, there is no specification
    describing how\n   UDP-based transports, such as RTP [RFC3550], can use ECN.  This
    is\n   due to the lack of feedback mechanisms in UDP.  Instead, the\n   signalling
    control protocol on top of UDP needs to provide that\n   feedback.  For RTP, that
    feedback is provided by RTCP.\n   The remainder of this memo is structured as
    follows.  We start by\n   describing the conventions, definitions, and acronyms
    used in this\n   memo in Section 2 and the design rationale and applicability
    in\n   Section 3.  Section 4 gives an overview of how ECN is used with RTP\n   over
    UDP.  RTCP extensions for ECN feedback are defined in Section 5\n   and SDP signalling
    extensions in Section 6.  The details of how ECN\n   is used with RTP over UDP
    are defined in Section 7.  In Section 8, we\n   describe how ECN is handled in
    RTP translators and mixers.  Section 9\n   discusses some implementation considerations;
    Section 10 lists IANA\n   considerations; and Section 11 discusses security considerations.\n
    \  Finally, Section 12 provides some examples of SDP signalling for ECN\n   feedback\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions, Definitions, and Acronyms\n   The key words \"MUST\", \"MUST
    NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
    \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document
    are to be interpreted as described in RFC\n   2119 [RFC2119].\n   Definitions
    and Abbreviations:\n   Sender:  A sender of RTP packets carrying an encoded media
    stream.\n      The sender can change how the media transmission is performed by\n
    \     varying the media coding or packetisation.  It is one endpoint of\n      the
    ECN control loop.\n   Receiver:  A receiver of RTP packets with the intention
    to consume\n      the media stream.  It sends RTCP feedback on the received stream.\n
    \     It is the other endpoint of the ECN control loop.\n   ECN-Capable Host:
    \ A sender or receiver of a media stream that is\n      capable of setting and/or
    processing ECN marks.\n   ECN-Capable Transport (ECT):  A transport flow where
    both sender and\n      receiver are ECN-capable hosts.  Packets sent by an ECN-capable\n
    \     transport will be marked as ECT(0) or ECT(1) on transmission.  See\n      [RFC3168]
    for the definition of the ECT(0) and ECT(1) marks.\n   ECN-CE:  ECN Congestion
    Experienced mark (see [RFC3168]).\n   ECN-Capable Packets:  Packets with ECN mark
    set to either ECT(0),\n      ECT(1), or ECN-CE.\n   Not-ECT packets:  Packets
    that are not sent by an ECN-capable\n      transport and are not ECN-CE marked.\n
    \  ECN-Capable Queue:  A queue that supports ECN-CE marking of ECN-\n      capable
    packets to indicate congestion.\n   ECN-Blocking Middlebox:  A middlebox that
    discards ECN-capable\n      packets.\n   ECN-Reverting Middlebox:  A middlebox
    that changes ECN-capable\n      packets to not-ECT packets by removing the ECN
    mark.\n   Note that RTP mixers or translators that operate in such a manner\n
    \  that they terminate or split the ECN control loop will take on the\n   role
    of receivers or senders.  This is further discussed in\n   Section 3.2.\n"
  title: 2.  Conventions, Definitions, and Acronyms
- contents:
  - "3.  Discussion, Requirements, and Design Rationale\n   ECN has been specified
    for use with TCP [RFC3168], SCTP [RFC4960],\n   and DCCP [RFC4340] transports.
    \ These are all unicast protocols that\n   negotiate the use of ECN during the
    initial connection establishment\n   handshake (supporting incremental deployment
    and checking if ECN-\n   marked packets pass all middleboxes on the path).  ECN-CE
    marks are\n   immediately echoed back to the sender by the receiving endpoint
    using\n   an additional bit in feedback messages, and the sender then\n   interprets
    the mark as equivalent to a packet loss for congestion\n   control purposes.\n
    \  If RTP is run over TCP, SCTP, or DCCP, it can use the native ECN\n   support
    provided by those protocols.  This memo does not concern\n   itself further with
    these use cases.  However, RTP is more commonly\n   run over UDP.  This combination
    does not currently support ECN, and\n   we observe that it has significant differences
    from the other\n   transport protocols for which ECN has been specified.  These
    include:\n   Signalling:  RTP relies on separate signalling protocols to negotiate\n
    \     parameters before a session can be created and doesn't include an\n      in-band
    handshake or negotiation at session setup time (i.e.,\n      there is no equivalent
    to the TCP three-way handshake in RTP).\n   Feedback:  RTP does not explicitly
    acknowledge receipt of datagrams.\n      Instead, the RTP Control Protocol (RTCP)
    provides reception\n      quality feedback, and other back channel communication,
    for RTP\n      sessions.  The feedback interval is generally on the order of\n
    \     seconds, rather than once per network round-trip time (RTT)\n      (although
    the RTP Audio-Visual Profile with Feedback (RTP/AVPF)\n      profile [RFC4585]
    allows more rapid feedback in most cases).  RTCP\n      is also very much oriented
    around counting packets, which makes\n      byte-counting congestion algorithms
    difficult to utilise.\n   Congestion Response:  While it is possible to adapt
    the transmission\n      of many audio/visual streams in response to network congestion,\n
    \     and such adaptation is required by [RFC3550], the dynamics of the\n      congestion
    response may be quite different to that of TCP or other\n      transport protocols.\n
    \  Middleboxes:  The RTP framework explicitly supports the concept of\n      mixers
    and translators, which are middleboxes that are involved in\n      media transport
    functions.\n   Multicast:  RTP is explicitly a group communication protocol and
    was\n      designed from the start to support IP multicast (primarily Any-\n      Source
    Multicast (ASM) [RFC1112], although a recent extension\n      supports Source-Specific
    Multicast (SSM) [RFC3569] with unicast\n      feedback [RFC5760]).\n   Application
    Awareness:  When ECN support is provided within the\n      transport protocol,
    the ability of the application to react to\n      congestion is limited, since
    it has little visibility into the\n      transport layer.  By adding support of
    ECN to RTP using RTCP\n      feedback, the application is made aware of congestion,
    allowing a\n      wider range of reactions in response to that congestion\n      indication.\n
    \  Counting vs. Detecting Congestion:  TCP, and the protocols derived\n      from
    it, are mainly designed to respond in the same way whether\n      they experience
    a burst of congestion indications within one RTT\n      or just a single congestion
    indication, whereas real-time\n      applications may be concerned with the amount
    of congestion\n      experienced and whether it is distributed smoothly or in
    bursts.\n      When feedback of ECN was added to TCP [RFC3168], the receiver was\n
    \     designed to flip the echo congestion experienced (ECE) flag to 1\n      for
    a whole RTT then flop it back to zero.  ECN feedback in RTCP,\n      however,
    will need to report a count of how much congestion has\n      been experienced
    within an RTCP reporting period, irrespective of\n      round-trip times.\n   These
    differences significantly alter the shape of ECN support in RTP\n   over UDP compared
    to ECN support in TCP, SCTP, and DCCP but do not\n   invalidate the need for ECN
    support.\n   ECN support is more important for RTP sessions than, for instance,
    is\n   the case for many applications over TCP.  This is because the impact\n
    \  of packet loss in real-time audio-visual media flows is highly\n   visible
    to users.  For TCP-based applications, however, TCP will\n   retransmit lost packets,
    and while extra delay is incurred by having\n   packets dropped rather than ECN-CE
    marked, the loss is repaired.\n   Effective ECN support for RTP flows running
    over UDP will allow real-\n   time audio-visual applications to respond to the
    onset of congestion\n   before routers are forced to drop packets, allowing those\n
    \  applications to control how they reduce their transmission rate and\n   hence
    media quality, rather than responding to and trying to conceal\n   the effects
    of unpredictable packet loss.  Furthermore, widespread\n   deployment for ECN
    and active queue management in routers, should it\n   occur, can potentially reduce
    unnecessary queuing delays in routers,\n   lowering the round-trip time and benefiting
    interactive applications\n   of RTP, such as voice telephony.\n"
  - contents:
    - "3.1.  Requirements\n   Considering ECN, transport protocols supporting ECN,
      and RTP-based\n   applications, one can create a set of requirements that must
      be\n   satisfied to at least some degree if ECN is to be used by RTP over\n
      \  UDP.\n   o  REQ 1: A mechanism must exist to negotiate and initiate the use
      of\n      ECN for RTP/UDP/IP sessions so that an RTP sender will not send\n
      \     packets with ECT in the IP header unless it knows that all\n      potential
      receivers will understand any ECN-CE indications they\n      might receive.\n
      \  o  REQ 2: A mechanism must exist to feed back the reception of any\n      packets
      that are ECN-CE marked to the packet sender.\n   o  REQ 3: The provided mechanism
      should minimise the possibility of\n      cheating (either by the sender or
      receiver).\n   o  REQ 4: Some detection and fallback mechanism should exist
      to avoid\n      loss of communication due to the attempted usage of ECN in case
      an\n      intermediate node clears ECT or drops packets that are ECT marked.\n
      \  o  REQ 5: Negotiation of ECN should not significantly increase the\n      time
      taken to negotiate and set up the RTP session (an extra RTT\n      before the
      media can flow is unlikely to be acceptable for some\n      use cases).\n   o
      \ REQ 6: Negotiation of ECN should not cause media clipping at the\n      start
      of a session.\n   The following sections describe how these requirements can
      be met for\n   RTP over UDP.\n"
    title: 3.1.  Requirements
  - contents:
    - "3.2.  Applicability\n   The use of ECN with RTP over UDP is dependent on negotiation
      of ECN\n   capability between the sender and receiver(s) and validation of ECN\n
      \  support in all elements on the network path(s) traversed.  RTP is\n   used
      in a heterogeneous range of network environments and topologies,\n   with different
      signalling protocols.  The mechanisms defined here\n   make it possible to verify
      support for ECN in each of these\n   environments, irrespective of the topology.\n
      \  Due to the need for each RTP sender that intends to use ECN with RTP\n   to
      track all participants in the RTP session, the sub-sampling of the\n   group
      membership as specified by \"Sampling of the Group Membership in\n   RTP\" [RFC2762]
      MUST NOT be used.\n   The use of ECN is further dependent on a capability of
      the RTP media\n   flow to react to congestion signalled by ECN-marked packets.\n
      \  Depending on the application, media codec, and network topology, this\n   adaptation
      can occur in various forms and at various nodes.  As an\n   example, the sender
      can change the media encoding, the receiver can\n   change the subscription
      to a layered encoding, or either reaction can\n   be accomplished by a transcoding
      middlebox.  [RFC5117] identifies\n   seven topologies in which RTP sessions
      may be configured and which\n   may affect the ability to use ECN:\n   Topo-Point-to-Point:
      \ This utilises standard unicast flows.  ECN may\n      be used with RTP in
      this topology in an analogous manner to its\n      use with other unicast transport
      protocols, with RTCP conveying\n      ECN feedback messages.\n   Topo-Multicast:
      \ This is either an Any-Source Multicast (ASM) group\n      [RFC3569] with potentially
      several active senders and multicast\n      RTCP feedback or a Source-Specific
      Multicast (SSM) group [RFC4607]\n      with a single distribution source and
      unicast RTCP feedback from\n      receivers.  RTCP is designed to scale to large
      group sizes while\n      avoiding feedback implosion (see Section 6.2 of [RFC3550],\n
      \     [RFC4585], and [RFC5760]) and can be used by a sender to determine\n      if
      all its receivers, and the network paths to those receivers,\n      support
      ECN (see Section 7.2).  It is somewhat more difficult to\n      determine if
      all network paths from all senders to all receivers\n      support ECN.  Accordingly,
      we allow ECN to be used by an RTP\n      sender using multicast UDP provided
      the sender has verified that\n      the paths to all its known receivers support
      ECN, irrespective of\n      whether the paths from other senders to their receivers
      support\n      ECN (\"all its known receivers\" are all the synchronisation
      sources\n      (SSRCs) from which the RTP sender has received RTP or RTCP in
      the\n      last five reporting intervals, i.e., they have not timed out).\n
      \     Note that group membership may change during the lifetime of a\n      multicast
      RTP session, potentially introducing new receivers that\n      are not ECN capable
      or have a path that doesn't support ECN.\n      Senders must use the mechanisms
      described in Section 7.4 to check\n      that all receivers, and the network
      paths traversed to reach those\n      receivers, continue to support ECN, and
      they need to fallback to\n      non-ECN use if any receivers join that do not.\n
      \     SSM groups that use unicast RTCP feedback [RFC5760] do need a few\n      extra
      considerations.  This topology can have multiple media\n      senders that provide
      traffic to the distribution source (DS) and\n      are separated from the DS.
      \ There can also be multiple feedback\n      targets.  The requirement for using
      ECN for RTP in this topology\n      is that the media sender must be provided
      the feedback from the\n      receivers.  It may be in aggregated form from the
      feedback\n      targets.  We will not mention this SSM use case in the below
      text\n      specifically, but when actions are required by the media source,\n
      \     they also apply to the case of SSM where the RTCP feedback goes to\n      the
      feedback target.\n      The mechanisms defined in this memo support multicast
      groups but\n      are known to be conservative and don't scale to large groups.\n
      \     This is primarily because we require all members of the group to\n      demonstrate
      that they can make use of ECN before the sender is\n      allowed to send ECN-marked
      packets, since allowing some non-ECN-\n      capable receivers causes fairness
      issues when the bottleneck link\n      is shared by ECN and non-ECN flows that
      we have not (yet) been\n      able to satisfactorily address.  The rules regarding
      Determination\n      of ECN Support in Section 7.2.1 may be relaxed in a future
      version\n      of this specification to improve scaling once these issues have\n
      \     been resolved.\n   Topo-Translator:  An RTP translator is an RTP-level
      middlebox that is\n      invisible to the other participants in the RTP session
      (although\n      it is usually visible in the associated signalling session).\n
      \     There are two types of RTP translators: those that do not modify\n      the
      media stream and are concerned with transport parameters, for\n      example,
      a multicast to unicast gateway; and those that do modify\n      the media stream,
      for example, transcoding between different media\n      codecs.  A single RTP
      session traverses the translator, and the\n      translator must rewrite RTCP
      messages passing through it to match\n      the changes it makes to the RTP
      data packets.  A legacy, ECN-\n      unaware, RTP translator is expected to
      ignore the ECN bits on\n      received packets and to set the ECN bits to not-ECT
      when sending\n      packets, thus causing ECN negotiation on the path containing
      the\n      translator to fail (any new RTP translator that does not wish to\n
      \     support ECN may do so similarly).  An ECN-aware RTP translator may\n      act
      in one of three ways:\n      *  If the translator does not modify the media
      stream, it should\n         copy the ECN bits unchanged from the incoming to
      the outgoing\n         datagrams, unless it is overloaded and experiencing congestion,\n
      \        in which case it may mark the outgoing datagrams with an ECN-CE\n         mark.
      \ Such a translator passes RTCP feedback unchanged.  See\n         Section 8.1.\n
      \     *  If the translator modifies the media stream to combine or split\n         RTP
      packets but does not otherwise transcode the media, it must\n         manage
      the ECN bits in a way analogous to that described in\n         Section 5.3 of
      [RFC3168].  See Section 8.2 for details.\n      *  If the translator is a media
      transcoder, or otherwise modifies\n         the content of the media stream,
      the output RTP media stream\n         may have radically different characteristics
      than the input RTP\n         media stream.  Each side of the translator must
      then be\n         considered as a separate transport connection, with its own
      ECN\n         processing.  This requires the translator to interpose itself\n
      \        into the ECN negotiation process, effectively splitting the\n         connection
      into two parts with their own negotiation.  Once\n         negotiation has been
      completed, the translator must generate\n         RTCP ECN feedback back to
      the source based on its own reception\n         and must respond to RTCP ECN
      feedback received from the\n         receiver(s) (see Section 8.3).\n      It
      is recognised that ECN and RTCP processing in an RTP translator\n      that
      modifies the media stream is non-trivial.\n   Topo-Mixer:  A mixer is an RTP-level
      middlebox that aggregates\n      multiple RTP streams, mixing them together
      to generate a new RTP\n      stream.  The mixer is visible to the other participants
      in the RTP\n      session and is also usually visible in the associated signalling\n
      \     session.  The RTP flows on each side of the mixer are treated\n      independently
      for ECN purposes, with the mixer generating its own\n      RTCP ECN feedback
      and responding to ECN feedback for data it\n      sends.  Since unicast transport
      between the mixer and any endpoint\n      are treated independently, it would
      seem reasonable to allow the\n      transport on one side of the mixer to use
      ECN, while the transport\n      on the other side of the mixer is not ECN capable,
      if this is\n      desired.  See Section 8.4 for details on how mixers should
      process\n      ECN.\n   Topo-Video-switch-MCU:  A video-switching Multipoint
      Control Unit\n      (MCU) receives several RTP flows, but forwards only one
      of those\n      flows onwards to the other participants at a time.  The flow
      that\n      is forwarded changes during the session, often based on voice\n
      \     activity.  Since only a subset of the RTP packets generated by a\n      sender
      are forwarded to the receivers, a video-switching MCU can\n      break ECN negotiation
      (the success of the ECN negotiation may\n      depend on the voice activity
      of the participant at the instant the\n      negotiation takes place - shout
      if you want ECN).  It also breaks\n      congestion feedback and response, since
      RTP packets are dropped by\n      the MCU depending on voice activity rather
      than network\n      congestion.  This topology is widely used in legacy products
      but\n      is NOT RECOMMENDED for new implementations and SHALL NOT be used\n
      \     with ECN.\n   Topo-RTCP-terminating-MCU:  In this scenario, each participant
      runs\n      an RTP point-to-point session between itself and the MCU.  Each
      of\n      these sessions is treated independently for the purposes of ECN\n
      \     and RTCP feedback, potentially with some using ECN and some not.\n   Topo-Asymmetric:
      \ It is theoretically possible to build a middlebox\n      that is a combination
      of an RTP mixer in one direction and an RTP\n      translator in the other.
      \ To quote [RFC5117], \"This topology is so\n      problematic and it is so
      easy to get the RTCP processing wrong,\n      that it is NOT RECOMMENDED to
      implement this topology\".\n   These topologies may be combined within a single
      RTP session.\n   The ECN mechanism defined in this memo is applicable to both
      sender-\n   and receiver-controlled congestion algorithms.  The mechanism ensures\n
      \  that both senders and receivers will know about ECN-CE markings and\n   any
      packet losses.  Thus, the actual decision point for the\n   congestion control
      is not relevant.  This is a great benefit as the\n   rate of an RTP session
      can be varied in a number of ways, for\n   example, a unicast media sender might
      use TCP Friendly Rate Control\n   (TFRC) [RFC5348] or some other algorithm,
      while a multicast session\n   could use a sender-based scheme adapting to the
      lowest common\n   supported rate or a receiver-driven mechanism using layered
      coding to\n   support more heterogeneous paths.\n   To ensure timely feedback
      of ECN-CE-marked packets when needed, this\n   mechanism requires support for
      the RTP/AVPF profile [RFC4585] or any\n   of its derivatives, such as RTP/SAVPF
      [RFC5124].  The standard RTP/\n   AVP profile [RFC3551] does not allow any early
      or immediate\n   transmission of RTCP feedback and has a minimal RTCP interval
      whose\n   default value (5 seconds) is many times the normal RTT between sender\n
      \  and receiver.\n"
    title: 3.2.  Applicability
  - contents:
    - "3.3.  Interoperability\n   To ensure interoperability for this specification,
      there is need for\n   at least one common initialisation method for all implementations.\n
      \  Since initialisation using RTP and RTCP (Section 7.2.1) is the one\n   method
      that works in all cases, although it is not optimal for all\n   uses, it is
      selected as the mandatory-to-implement initialisation\n   method.  This method
      requires both the RTCP XR extension and the ECN\n   feedback format, which require
      the RTP/AVPF profile to ensure timely\n   feedback.\n   When one considers all
      the uses of ECN for RTP, it is clear that\n   congestion control mechanisms
      exist that are receiver driven only\n   (Section 7.3.3).  These congestion control
      mechanisms do not require\n   timely feedback of congestion events to the sender.
      \ If such a\n   congestion control mechanism is combined with an initialisation\n
      \  method that also doesn't require timely feedback using RTCP, like the\n   leap-of-faith
      method (Section 7.2.3) or the ICE-based method\n   (Section 7.2.2), then neither
      the ECN feedback format nor the RTP/\n   AVPF profile would appear to be needed.
      \ However, fault detection can\n   be greatly improved by using receiver-side
      detection (Section 7.4.1)\n   and early reporting of such cases using the ECN
      feedback mechanism.\n   For interoperability, we mandate the implementation
      of the RTP/AVPF\n   profile, with both RTCP extensions and the necessary signalling
      to\n   support a common operations mode.  This specification recommends the\n
      \  use of RTP/AVPF in all cases as negotiation of the common\n   interoperability
      point requires RTP/AVPF, mixed negotiation of RTP/\n   AVP and RTP/AVPF depending
      on other SDP attributes in the same media\n   block is difficult, and the fact
      that fault detection can be improved\n   when using RTP/AVPF.\n   The use of
      the ECN feedback format is also recommended, but cases\n   exist where its use
      is not required because timely feedback is not\n   needed.  These will be explicitly
      noted using the phrase \"no timely\n   feedback required\" and generally occur
      in combination with receiver-\n   driven congestion control and with the leap-of-faith
      and ICE-based\n   initialisation methods.  We also note that any receiver-driven\n
      \  congestion control solution that still requires RTCP for signalling\n   of
      any adaptation information to the sender will still require RTP/\n   AVPF for
      timeliness.\n"
    title: 3.3.  Interoperability
  title: 3.  Discussion, Requirements, and Design Rationale
- contents:
  - "4.  Overview of Use of ECN with RTP/UDP/IP\n   The solution for using ECN with
    RTP over UDP/IP consists of four\n   different pieces that together make the solution
    work:\n   1.  Negotiation of the capability to use ECN with RTP/UDP/IP\n   2.
    \ Initiation and initial verification of ECN-capable transport\n   3.  Ongoing
    use of ECN within an RTP session\n   4.  Handling of dynamic behaviour through
    failure detection,\n       verification, and fallback\n   Before an RTP session
    can be created, a signalling protocol is used\n   to negotiate or at least configure
    session parameters (see\n   Section 7.1).  In some topologies, the signalling
    protocol can also\n   be used to discover the other participants.  One of the
    parameters\n   that must be agreed is the capability of a participant to support\n
    \  ECN.  Note that all participants having the capability of supporting\n   ECN
    does not necessarily imply that ECN is usable in an RTP session,\n   since there
    may be middleboxes on the path between the participants\n   that don't pass ECN-marked
    packets (for example, a firewall that\n   blocks traffic with the ECN bits set).
    \ This document defines the\n   information that needs to be negotiated and provides
    a mapping to SDP\n   for use in both declarative and offer/answer contexts.\n
    \  When a sender joins a session for which all participants claim to\n   support
    ECN, it needs to verify that the ECN support is usable.\n   There are three ways
    in which this verification can be done:\n   o  The sender may generate a (small)
    subset of its RTP data packets\n      with the ECN field of the IP header set
    to ECT(0) or ECT(1).  Each\n      receiver will then send an RTCP feedback packet
    indicating the\n      reception of the ECT-marked RTP packets.  Upon reception
    of this\n      feedback from each receiver it knows of, the sender can consider\n
    \     ECN functional for its traffic.  Each sender does this\n      verification
    independently.  When a new receiver joins an existing\n      RTP session, it will
    send RTCP reports in the usual manner.  If\n      those RTCP reports include ECN
    information, verification will have\n      succeeded, and sources can continue
    to send ECT packets.  If not,\n      verification fails, and each sender MUST
    stop using ECN (see\n      Section 7.2.1 for details).\n   o  Alternatively, ECN
    support can be verified during an initial end-\n      to-end STUN exchange (for
    example, as part of ICE connection\n      establishment).  After having verified
    connectivity without ECN\n      capability, an extra STUN exchange, this time
    with the ECN field\n      set to ECT(0) or ECT(1), is performed on the candidate
    path that\n      is about to be used.  If successful, the path's capability to\n
    \     convey ECN-marked packets is verified.  A new STUN attribute is\n      defined
    to convey feedback that the ECT-marked STUN request was\n      received (see Section
    7.2.2), along with an ICE signalling option\n      (Section 6.4) to indicate that
    the check is to be performed.\n   o  Thirdly, the sender may make a leap of faith
    that ECN will work.\n      This is only recommended for applications that know
    they are\n      running in controlled environments where ECN functionality has\n
    \     been verified through other means.  In this mode, it is assumed\n      that
    ECN works, and the system reacts to failure indicators if the\n      assumption
    proved wrong.  The use of this method relies on a high\n      confidence that
    ECN operation will be successful or an application\n      where failure is not
    serious.  The impact on the network and other\n      users must be considered
    when making a leap of faith, so there are\n      limitations on when this method
    is allowed (see Section 7.2.3).\n   The first mechanism, using RTP with RTCP feedback,
    has the advantage\n   of working for all RTP sessions, but the disadvantages of
    potential\n   clipping if ECN-marked RTP packets are discarded by middleboxes
    and\n   slow verification of ECN support.  The STUN-based mechanism is faster\n
    \  to verify ECN support but only works in those scenarios supported by\n   end-to-end
    STUN, such as within an ICE exchange.  The third one, leap\n   of faith, has the
    advantage of avoiding additional tests or\n   complexities and enabling ECN usage
    from the first media packet.  The\n   downside is that if the end-to-end path
    contains middleboxes that do\n   not pass ECN, the impact on the application can
    be severe: in the\n   worst case, all media could be lost if a middlebox that
    discards ECN-\n   marked packets is present.  A less severe effect, but still
    requiring\n   reaction, is the presence of a middlebox that re-marks ECT-marked\n
    \  packets to not-ECT, possibly marking packets with an ECN-CE mark as\n   not-ECT.
    \ This could result in increased levels of congestion due to\n   non-responsiveness
    and impact media quality as applications end up\n   relying on packet loss as
    an indication of congestion.\n   Once ECN support has been verified (or assumed)
    to work for all\n   receivers, a sender marks all its RTP packets as ECT packets,
    while\n   receivers rapidly feed back reports on any ECN-CE marks to the sender\n
    \  using RTCP in RTP/AVPF immediate or early feedback mode, unless no\n   timely
    feedback is required.  Each feedback report indicates the\n   receipt of new ECN-CE
    marks since the last ECN feedback packet and\n   also counts the total number
    of ECN-CE-marked packets as a cumulative\n   sum.  This is the mechanism to provide
    the fastest possible feedback\n   to senders about ECN-CE marks.  On receipt of
    an ECN-CE-marked\n   packet, the system must react to congestion as if packet
    loss has\n   been reported.  Section 7.3 describes the ongoing use of ECN within\n
    \  an RTP session.\n   This rapid feedback is not optimised for reliability, so
    another\n   mechanism, RTCP XR ECN Summary Reports, is used to ensure more\n   reliable,
    but less timely, reporting of the ECN information.  The ECN\n   Summary Report
    contains the same information as the ECN feedback\n   format, only packed differently
    for better efficiency with reports\n   for many sources.  It is sent in a compound
    RTCP packet, along with\n   regular RTCP reception reports.  By using cumulative
    counters for\n   observed ECN-CE, ECT, not-ECT, packet duplication, and packet
    loss,\n   the sender can determine what events have happened since the last\n
    \  report, independently of any RTCP packets having been lost.\n   RTCP reports
    MUST NOT be ECT marked, since ECT-marked traffic may be\n   dropped if the path
    is not ECN compliant.  RTCP is used to provide\n   feedback about what has been
    transmitted and what ECN markings that\n   are received, so it is important that
    it is received in cases when\n   ECT-marked traffic is not getting through.\n
    \  There are numerous reasons why the path the RTP packets take from the\n   sender
    to the receiver may change, e.g., mobility and link failure\n   followed by re-routing
    around it.  Such an event may result in the\n   packet being sent through a node
    that is ECN non-compliant, thus\n   re-marking or dropping packets with ECT set.
    \ To prevent this from\n   impacting the application for longer than necessary,
    the operation of\n   ECN is constantly monitored by all senders (Section 7.4).
    \ Both the\n   RTCP XR ECN Summary Reports and the ECN feedback packets allow
    the\n   sender to compare the number of ECT(0), ECT(1), and not-ECT-marked\n   packets
    received with the number that were sent, while also reporting\n   ECN-CE-marked
    and lost packets.  If these numbers do not agree, it\n   can be inferred that
    the path does not reliably pass ECN-marked\n   packets.  A sender detecting a
    possible ECN non-compliance issue\n   should then stop sending ECT-marked packets
    to determine if that\n   allows the packets to be correctly delivered.  If the
    issues can be\n   connected to ECN, then ECN usage is suspended.\n"
  title: 4.  Overview of Use of ECN with RTP/UDP/IP
- contents:
  - "5.  RTCP Extensions for ECN Feedback\n   This memo defines two new RTCP extensions:
    one RTP/AVPF [RFC4585]\n   transport-layer feedback format for reporting urgent
    ECN information\n   and one RTCP XR [RFC3611] ECN Summary Report block type for
    regular\n   reporting of the ECN marking information.\n"
  - contents:
    - "5.1.  RTP/AVPF Transport-Layer ECN Feedback Packet\n   This RTP/AVPF transport-layer
      feedback format is intended for use in\n   RTP/AVPF early or immediate feedback
      modes when information needs to\n   urgently reach the sender.  Thus, its main
      use is to report reception\n   of an ECN-CE-marked RTP packet so that the sender
      may perform\n   congestion control or to speed up the initiation procedures
      by\n   rapidly reporting that the path can support ECN-marked traffic.  The\n
      \  feedback format is also defined with reduced-size RTCP [RFC5506] in\n   mind,
      where RTCP feedback packets may be sent without accompanying\n   Sender or Receiver
      Reports that would contain the extended highest\n   sequence number and the
      accumulated number of packet losses.  Both\n   are important for ECN to verify
      functionality and keep track of when\n   CE marking does occur.\n   The RTP/AVPF
      transport-layer feedback packet starts with the common\n   header defined by
      the RTP/AVPF profile [RFC4585], which is reproduced\n   in Figure 1.  The FMT
      field takes the value 8 to indicate that the\n   Feedback Control Information
      (FCI) contains an ECN Feedback Report,\n   as defined in Figure 2.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|  FMT=8  |  PT=RTPFB=205 |          length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  SSRC of packet sender                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  SSRC of media source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  :            Feedback Control Information (FCI)                 :\n   :                                                               :\n
      \      Figure 1: RTP/AVPF Common Packet Format for Feedback Messages\n    0
      \                  1                   2                   3\n    0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Extended Highest Sequence Number                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | ECT (0) Counter                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | ECT (1) Counter                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | ECN-CE Counter                | not-ECT Counter               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Lost Packets Counter          | Duplication Counter           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  Figure 2: ECN Feedback Report Format\n   The ECN Feedback
      Report contains the following fields:\n   Extended Highest Sequence Number:
      \ The 32-bit extended highest\n      sequence number received, as defined by
      [RFC3550].  Indicates the\n      highest RTP sequence number to which this report
      relates.\n   ECT(0) Counter:  The 32-bit cumulative number of RTP packets with\n
      \     ECT(0) received from this SSRC.\n   ECT(1) Counter:  The 32-bit cumulative
      number of RTP packets with\n      ECT(1) received from this SSRC.\n   ECN-CE
      Counter:  The cumulative number of RTP packets received from\n      this SSRC
      since the receiver joined the RTP session that were\n      ECN-CE marked, including
      ECN-CE marks in any duplicate packets.\n      The receiver should keep track
      of this value using a local\n      representation that is at least 32 bits and
      only include the 16\n      bits with least significance.  In other words, the
      field will wrap\n      if more than 65535 ECN-CE-marked packets have been received.\n
      \  not-ECT Counter:  The cumulative number of RTP packets received from\n      this
      SSRC since the receiver joined the RTP session that had an\n      ECN field
      value of not-ECT.  The receiver should keep track of\n      this value using
      a local representation that is at least 32 bits\n      and only include the
      16 bits with least significance.  In other\n      words, the field will wrap
      if more than 65535 not-ECT packets have\n      been received.\n   Lost Packets
      Counter:  The cumulative number of RTP packets that the\n      receiver expected
      to receive minus the number of packets it\n      actually received that are
      not a duplicate of an already received\n      packet, from this SSRC since the
      receiver joined the RTP session.\n      Note that packets that arrive late are
      not counted as lost.  The\n      receiver should keep track of this value using
      a local\n      representation that is at least 32 bits and only include the
      16\n      bits with least significance.  In other words, the field will wrap\n
      \     if more than 65535 packets are lost.\n   Duplication Counter:  The cumulative
      number of RTP packets received\n      that are a duplicate of an already received
      packet from this SSRC\n      since the receiver joined the RTP session.  The
      receiver should\n      keep track of this value using a local representation
      that is at\n      least 32 bits and only include the 16 bits with least\n      significance.
      \ In other words, the field will wrap if more than\n      65535 duplicate packets
      have been received.\n   All fields in the ECN Feedback Report are unsigned integers
      in\n   network byte order.  Each ECN Feedback Report corresponds to a single\n
      \  RTP source (SSRC).  Multiple sources can be reported by including\n   multiple
      ECN Feedback Report packets in an compound RTCP packet.\n   The counters SHALL
      be initiated to 0 for each new SSRC received.\n   This enables detection of
      ECN-CE marks or packet loss on the initial\n   report from a specific participant.\n
      \  The use of at least 32-bit counters allows even extremely high packet\n   volume
      applications to not have wrapping of counters within any\n   timescale close
      to the RTCP reporting intervals.  However, 32 bits\n   are not sufficiently
      large to disregard the fact that wrappings may\n   happen during the lifetime
      of a long-lived RTP session, and\n   implementations need to be written to handle
      wrapping of the\n   counters.  It is recommended that implementations use local\n
      \  representation of these counters that are longer than 32 bits to\n   enable
      easy handling of wraps.\n   There is a difference in packet duplication reports
      between the\n   packet loss counter that is defined in the Receiver Report Block\n
      \  [RFC3550] and that defined here.  To avoid holding state for what RTP\n   sequence
      numbers have been received, [RFC3550] specifies that one can\n   count packet
      loss by counting the number of received packets and\n   comparing that to the
      number of packets expected.  As a result, a\n   packet duplication can hide
      a packet loss.  However, when populating\n   the ECN Feedback Report, a receiver
      needs to track the sequence\n   numbers actually received and count duplicates
      and packet loss\n   separately to provide a more reliable indication.  Reordering
      may,\n   however, still result in packet loss being reported in one report and\n
      \  then removed in the next.\n   The ECN-CE counter is robust for packet duplication.
      \ Adding each\n   received ECN-CE-marked packet to the counter is not an issue;
      in\n   fact, it is required to ensure complete tracking of the ECN state.\n
      \  If one of the clones was ECN-CE marked, that is still an indication\n   of
      congestion.  Packet duplication has a potential impact on the ECN\n   verification,
      and there is thus a need to count the duplicates.\n"
    title: 5.1.  RTP/AVPF Transport-Layer ECN Feedback Packet
  - contents:
    - "5.2.  RTCP XR Report Block for ECN Summary Information\n   This unilateral
      XR report block combined with RTCP SR or RR report\n   blocks carries the same
      information as the ECN Feedback Report and is\n   based on the same underlying
      information.  However, the ECN Feedback\n   Report is intended to report an
      ECN-CE mark as soon as possible,\n   while this extended report is for the regular
      RTCP reporting and\n   continuous verification of the ECN functionality end-to-end.\n
      \  The ECN Summary Report block consists of one RTCP XR report block\n   header,
      shown in Figure 3 followed by one or more ECN Summary Report\n   data blocks,
      as defined in Figure 4.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     BT=13     | Reserved      |         Block Length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                     Figure 3: RTCP XR Report Header\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | SSRC of Media Sender                                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | ECT (0) Counter                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | ECT (1) Counter                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | ECN-CE Counter                | not-ECT Counter               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Lost Packets Counter          | Duplication Counter           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                  Figure 4: RTCP XR ECN Summary Report\n   The RTCP XR ECN
      Summary Report contains the following fields:\n   BT:  Block Type identifying
      the ECN Summary Report block.  Value is\n      13.\n   Reserved:  All bits SHALL
      be set to 0 on transmission and ignored on\n      reception.\n   Block Length:
      \ The length of this XR report block, including the\n      header, in 32-bit
      words minus one.  Used to indicate the number of\n      ECN Summary Report data
      blocks present in the ECN Summary Report.\n      This length will be 5*n, where
      n is the number of ECN Summary\n      Report blocks, since blocks are a fixed
      size.  The block length\n      MAY be zero if there is nothing to report.  Receivers
      MUST discard\n      reports where the block length is not a multiple of five,
      since\n      these cannot be valid.\n   SSRC of Media Sender:  The SSRC identifying
      the media sender this\n      report is for.\n   ECT(0) Counter:  as in Section
      5.1.\n   ECT(1) Counter:  as in Section 5.1.\n   ECN-CE Counter:  as in Section
      5.1.\n   not-ECT Counter:  as in Section 5.1.\n   Lost Packets Counter:  as
      in Section 5.1.\n   Duplication Counter:  as in Section 5.1.\n   The extended
      highest sequence number counter for each SSRC is not\n   present in an RTCP
      XR report, in contrast to the feedback version.\n   The reason is that this
      summary report will rely on the information\n   sent in the Sender Report (SR)
      or Receiver Report (RR) blocks part of\n   the same RTCP compound packet.  The
      extended highest sequence number\n   is available from the SR or RR.\n   All
      the SSRCs that are present in the SR or RR SHOULD also be\n   included in the
      RTCP XR ECN Summary Report.  In cases where the\n   number of senders are so
      large that the combination of SR/RR and the\n   ECN summary for all the senders
      exceed the MTU, then only a subset of\n   the senders SHOULD be included so
      that the reports for the subset\n   fits within the MTU.  The subsets SHOULD
      be selected round-robin\n   across multiple intervals so that all sources are
      periodically\n   reported.  In case there are no SSRCs that currently are counted
      as\n   senders in the session, the report block SHALL still be sent with no\n
      \  report block entry and a zero report block length to continuously\n   indicate
      to the other participants the receiver capability to report\n   ECN information.\n"
    title: 5.2.  RTCP XR Report Block for ECN Summary Information
  title: 5.  RTCP Extensions for ECN Feedback
- contents:
  - "6.  SDP Signalling Extensions for ECN\n   This section defines a number of SDP
    signalling extensions used in\n   the negotiation of the ECN for RTP support when
    using SDP.  This\n   includes one SDP attribute \"a=ecn-capable-rtp:\" that negotiates
    the\n   actual operation of ECN for RTP.  Two SDP signalling parameters are\n
    \  defined to indicate the use of the RTCP XR ECN summary block and the\n   RTP/AVPF
    feedback format for ECN.  One ICE option SDP representation\n   is also defined.\n"
  - contents:
    - "6.1.  Signalling ECN Capability Using SDP\n   One new SDP attribute, \"a=ecn-capable-rtp:\",
      is defined.  This is a\n   media-level attribute and MUST NOT be used at the
      session level.  It\n   is not subject to the character set chosen.  The aim
      of this\n   signalling is to indicate the capability of the sender and receivers\n
      \  to support ECN, and to negotiate the method of ECN initiation to be\n   used
      in the session.  The attribute takes a list of initiation\n   methods, ordered
      in decreasing preference.  The defined values for\n   the initiation method
      are:\n   rtp:  Using RTP and RTCP as defined in Section 7.2.1.\n   ice:  Using
      STUN within ICE as defined in Section 7.2.2.\n   leap:  Using the leap-of-faith
      method as defined in Section 7.2.3.\n   Further methods may be specified in
      the future, so unknown methods\n   MUST be ignored upon reception.\n   In addition,
      a number of OPTIONAL parameters may be included in the\n   \"a=ecn-capable-rtp:\"
      attribute as follows:\n   mode:  This parameter signals the endpoint's capability
      to set and\n      read ECN marks in UDP packets.  An examination of various\n
      \     operating systems has shown that end-system support for ECN\n      marking
      of UDP packets may be symmetric or asymmetric.  By this,\n      we mean that
      some systems may allow endpoints to set the ECN bits\n      in an outgoing UDP
      packet but not read them, while others may\n      allow applications to read
      the ECN bits but not set them.  This\n      either/or case may produce an asymmetric
      support for ECN and thus\n      should be conveyed in the SDP signalling.  The
      \"mode=setread\"\n      state is the ideal condition where an endpoint can both
      set and\n      read ECN bits in UDP packets.  The \"mode=setonly\" state indicates\n
      \     that an endpoint can set the ECT bit but cannot read the ECN bits\n      from
      received UDP packets to determine if upstream congestion\n      occurred.  The
      \"mode=readonly\" state indicates that the endpoint\n      can read the ECN
      bits to determine if congestion has occurred for\n      incoming packets, but
      it cannot set the ECT bits in outgoing UDP\n      packets.  When the \"mode=\"
      parameter is omitted, it is assumed\n      that the node has \"setread\" capabilities.
      \ This option can provide\n      for an early indication that ECN cannot be
      used in a session.\n      This would be the case when both the offerer and answerer
      set the\n      \"mode=\" parameter to \"setonly\" or both set it to \"readonly\".\n
      \  ect:  This parameter makes it possible to express the preferred ECT\n      marking.
      \ This is either \"random\", \"0\", or \"1\", with \"0\" being\n      implied
      if not specified.  The \"ect\" parameter describes a\n      receiver preference
      and is useful in the case where the receiver\n      knows it is behind a link
      using IP header compression, the\n      efficiency of which would be seriously
      disrupted if it were to\n      receive packets with randomly chosen ECT marks.
      \ It is RECOMMENDED\n      that ECT(0) marking be used.\n   The ABNF [RFC5234]
      grammar for the \"a=ecn-capable-rtp:\" attribute is\n   shown in Figure 5.\n
      \     ecn-attribute  = \"a=ecn-capable-rtp:\" SP init-list [SP parm-list]\n
      \     init-list      = init-value *(\",\" init-value)\n      init-value     =
      \"rtp\" / \"ice\" / \"leap\" / init-ext\n      init-ext       = token\n      parm-list
      \     = parm-value *(\";\" SP parm-value)\n      parm-value     = mode / ect
      / parm-ext\n      mode           = \"mode=\" (\"setonly\" / \"setread\" / \"readonly\")\n
      \     ect            = \"ect=\" (\"0\" / \"1\" / \"random\")\n      parm-ext
      \      = parm-name \"=\" parm-value-ext\n      parm-name      = token\n      parm-value-ext
      = token / quoted-string\n      quoted-string = ( DQUOTE *qdtext DQUOTE )\n      qdtext
      = %x20-21 / %x23-5B / %x5D-7E / quoted-pair / UTF8-NONASCII\n         ; No DQUOTE
      and no \"\\\"\n      quoted-pair = \"\\\\\" / ( \"\\\" DQUOTE )\n      UTF8-NONASCII
      = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4\n      ; external references:\n        ;
      token from RFC 4566\n        ; SP and DQUOTE from RFC 5234\n        ; UTF8-1,
      UTF8-2, UTF8-3, and UTF8-4 from RFC 3629\n       Figure 5: ABNF Grammar for
      the \"a=ecn-capable-rtp:\" Attribute\n   Note the above quoted string construct
      has an escaping mechanism for\n   strings containing \".  This uses \\ (backslash)
      as an escaping\n   mechanism, i.e., a \" is replaced by \\\" (backslash double
      quote) and\n   any \\ (backslash) is replaced by \\\\ (backslash backslash)
      when put\n   into the double quotes as defined by the above syntax.  The string
      in\n   a quoted string is UTF-8 [RFC3629].\n"
    - contents:
      - "6.1.1.  Use of \"a=ecn-capable-rtp:\" with the Offer/Answer Model\n   When
        SDP is used with the offer/answer model [RFC3264], the party\n   generating
        the SDP offer MUST insert an \"a=ecn-capable-rtp:\"\n   attribute into the
        media section of the SDP offer of each RTP session\n   for which it wishes
        to use ECN.  The attribute includes one or more\n   ECN initiation methods
        in a comma-separated list in decreasing order\n   of preference, with any
        number of optional parameters following.  The\n   answering party compares
        the list of initiation methods in the offer\n   with those it supports in
        order of preference.  If there is a match\n   and if the receiver wishes to
        attempt to use ECN in the session, it\n   includes an \"a=ecn-capable-rtp:\"
        attribute containing its single\n   preferred choice of initiation method,
        and any optional parameters,\n   in the media sections of the answer.  If
        there is no matching\n   initiation method capability, or if the receiver
        does not wish to\n   attempt to use ECN in the session, it does not include
        an \"a=ecn--\n   capable-rtp:\" attribute in its answer.  If the attribute
        is removed\n   in the answer, then ECN MUST NOT be used in any direction for
        that\n   media flow.  If there are initialisation methods that are unknown,\n
        \  they MUST be ignored on reception and MUST NOT be included in an\n   answer.\n
        \  The endpoints' capability to set and read ECN marks, as expressed by\n
        \  the optional \"mode=\" parameter, determines whether ECN support can be\n
        \  negotiated for flows in one or both directions:\n   o  If the \"mode=setonly\"
        parameter is present in the \"a=ecn-capable-\n      rtp:\" attribute of the
        offer and the answering party is also\n      \"mode=setonly\", then there
        is no common ECN capability, and the\n      answer MUST NOT include the \"a=ecn-capable-rtp:\"
        attribute.\n      Otherwise, if the offer is \"mode=setonly\", then ECN may
        only be\n      initiated in the direction from the offering party to the\n
        \     answering party.\n   o  If the \"mode=readonly\" parameter is present
        in the \"a=ecn-capable-\n      rtp:\" attribute of the offer and the answering
        party is\n      \"mode=readonly\", then there is no common ECN capability,
        and the\n      answer MUST NOT include the \"a=ecn-capable-rtp:\" attribute.\n
        \     Otherwise, if the offer is \"mode=readonly\", then ECN may only be\n
        \     initiated in the direction from the answering party to the\n      offering
        party.\n   o  If the \"mode=setread\" parameter is present in the \"a=ecn-capable-\n
        \     rtp:\" attribute of the offer and the answering party is \"setonly\",\n
        \     then ECN may only be initiated in the direction from the answering\n
        \     party to the offering party.  If the offering party is\n      \"mode=setread\"
        but the answering party is \"mode=readonly\", then\n      ECN may only be
        initiated in the direction from the offering party\n      to the answering
        party.  If both offer and answer are\n      \"mode=setread\", then ECN may
        be initiated in both directions.\n      Note that \"mode=setread\" is implied
        by the absence of a \"mode=\"\n      parameter in the offer or the answer.\n
        \  o  An offer that does not include a \"mode=\" parameter MUST be treated\n
        \     as if a \"mode=setread\" parameter had been included.\n   In an RTP
        session using multicast and ECN, participants that intend\n   to send RTP
        packets SHOULD support setting ECT marks in RTP packets\n   (i.e., should
        be \"mode=setonly\" or \"mode=setread\").  Participants\n   receiving data
        need the capability to read ECN marks on incoming\n   packets.  It is important
        that receivers can read ECN marks\n   (\"mode=readonly\" or \"mode=setread\"),
        since otherwise no sender in the\n   multicast session would be able to enable
        ECN.  Accordingly,\n   receivers that are \"mode=setonly\" SHOULD NOT join
        multicast RTP\n   sessions that use ECN.  If session participants that are
        not aware of\n   the ECN for RTP signalling are invited to a multicast session
        and\n   simply ignore the signalling attribute, the other party in the offer/\n
        \  answer exchange SHOULD terminate the SDP dialogue so that the\n   participant
        leaves the session.\n   The \"ect=\" parameter in the \"a=ecn-capable-rtp:\"
        attribute is set\n   independently in the offer and the answer.  Its value
        in the offer\n   indicates a preference for the sending behaviour of the answering\n
        \  party, and its value in the answer indicates a sending preference for\n
        \  the behaviour of the offering party.  It will be the sender's choice\n
        \  to honour the receiver's preference for what to receive or not.  In\n   multicast
        sessions, all senders SHOULD set the ECT marks using the\n   value declared
        in the \"ect=\" parameter.\n   Unknown optional parameters MUST be ignored
        on reception and MUST NOT\n   be included in the answer.  That way, a new
        parameter may be\n   introduced and verified as supported by the other endpoint
        by having\n   the endpoint include it in any answer.\n"
      title: 6.1.1.  Use of "a=ecn-capable-rtp:" with the Offer/Answer Model
    - contents:
      - "6.1.2.  Use of \"a=ecn-capable-rtp:\" with Declarative SDP\n   When SDP is
        used in a declarative manner, for example, in a multicast\n   session using
        the Session Announcement Protocol (SAP) [RFC2974],\n   negotiation of session
        description parameters is not possible.  The\n   \"a=ecn-capable-rtp:\" attribute
        MAY be added to the session\n   description to indicate that the sender will
        use ECN in the RTP\n   session.  The attribute MUST include a single method
        of initiation.\n   Participants MUST NOT join such a session unless they have
        the\n   capability to receive ECN-marked UDP packets, implement the method
        of\n   initiation, and generate RTCP ECN feedback.  The mode parameter MAY\n
        \  also be included in declarative usage, to indicate the minimal\n   capability
        is required by the consumer of the SDP.  So, for example,\n   in an SSM session,
        the participants configured with a particular SDP\n   will all be in a media
        receive-only mode; thus, \"mode=readonly\" may\n   be used as the receiver
        only needs to be able to report on the ECN\n   markings.  In ASM sessions,
        using \"mode=readonly\" is also reasonable,\n   unless all senders are required
        to attempt to use ECN for their\n   outgoing RTP data traffic, in which case
        the mode needs to be set to\n   \"setread\".\n"
      title: 6.1.2.  Use of "a=ecn-capable-rtp:" with Declarative SDP
    - contents:
      - "6.1.3.  General Use of the \"a=ecn-capable-rtp:\" Attribute\n   The \"a=ecn-capable-rtp:\"
        attribute MAY be used with RTP media\n   sessions using UDP/IP transport.
        \ It MUST NOT be used for RTP\n   sessions using TCP, SCTP, or DCCP transport
        or for non-RTP sessions.\n   As described in Section 7.3.3, RTP sessions using
        ECN require rapid\n   RTCP ECN feedback, unless timely feedback is not required
        due to a\n   receiver-driven congestion control.  To ensure that the sender
        can\n   react to ECN-CE-marked packets, timely feedback is usually required.\n
        \  Thus, the use of the Extended RTP Profile for RTCP-Based Feedback\n   (RTP/AVPF)
        [RFC4585] or another profile that inherits RTP/AVPF's\n   signalling rules
        MUST be signalled unless timely feedback is not\n   required.  If timely feedback
        is not required, it is still\n   RECOMMENDED to use RTP/AVPF.  The signalling
        of an RTP/AVPF-based\n   profile is likely to be required even if the preferred
        method of\n   initialisation and the congestion control do not require timely\n
        \  feedback, as the common interoperable method is likely to be\n   signalled
        or the improved fault reaction is desired.\n"
      title: 6.1.3.  General Use of the "a=ecn-capable-rtp:" Attribute
    title: 6.1.  Signalling ECN Capability Using SDP
  - contents:
    - "6.2.  RTCP ECN Feedback SDP Parameter\n   A new \"nack\" feedback parameter
      \"ecn\" is defined to indicate the\n   usage of the RTCP ECN feedback packet
      format (Section 5.1).  The ABNF\n   [RFC5234] definition of the SDP parameter
      extension is:\n   rtcp-fb-nack-param  =  <See Section 4.2 of [RFC4585]>\n   rtcp-fb-nack-param
      \ =/ ecn-fb-par\n   ecn-fb-par          =  SP \"ecn\"\n   The offer/answer rules
      for these SDP feedback parameters are\n   specified in the RTP/AVPF profile
      [RFC4585].\n"
    title: 6.2.  RTCP ECN Feedback SDP Parameter
  - contents:
    - "6.3.  XR Block ECN SDP Parameter\n   A new unilateral RTCP XR block for ECN
      summary information is\n   specified; thus, the XR block SDP signalling also
      needs to be\n   extended with a parameter.  This is done in the same way as
      for the\n   other XR blocks.  The XR block SDP attribute as defined in Section\n
      \  5.1 of the RTCP XR specification [RFC3611] is defined to be\n   extensible.
      \ As no parameter values are needed for this ECN summary\n   block, this parameter
      extension consists of a simple parameter name\n   used to indicate support and
      intent to use the XR block.\n   xr-format       =  <See Section 5.1 of [RFC3611]>\n
      \  xr-format       =/ ecn-summary-par\n   ecn-summary-par =  \"ecn-sum\"\n   For
      SDP declarative and offer/answer usage, see the RTCP XR\n   specification [RFC3611]
      and its description of how to handle\n   unilateral parameters.\n"
    title: 6.3.  XR Block ECN SDP Parameter
  - contents:
    - "6.4.  ICE Parameter to Signal ECN Capability\n   One new ICE [RFC5245] option,
      \"rtp+ecn\", is defined.  This is used\n   with the SDP session level \"a=ice-options\"
      attribute in an SDP offer\n   to indicate that the initiator of the ICE exchange
      has the capability\n   to support ECN for RTP-over-UDP flows (via \"a=ice-options:
      rtp+ecn\").\n   The answering party includes this same attribute at the session
      level\n   in the SDP answer if it also has the capability and removes the\n
      \  attribute if it does not wish to use ECN or doesn't have the\n   capability
      to use ECN.  If the ICE initiation method (Section 7.2.2)\n   is actually going
      to be used, it is also needs to be explicitly\n   negotiated using the \"a=ecn-capable-rtp:\"
      attribute.  This ICE option\n   SHALL be included when the ICE initiation method
      is offered or\n   declared in the SDP.\n      Note: This signalling mechanism
      is not strictly needed as long as\n      the STUN ECN testing capability is
      used within the context of this\n      document.  It may, however, be useful
      if the ECN verification\n      capability is used in additional contexts.\n"
    title: 6.4.  ICE Parameter to Signal ECN Capability
  title: 6.  SDP Signalling Extensions for ECN
- contents:
  - "7.  Use of ECN with RTP/UDP/IP\n   In the detailed specification of the behaviour
    below, the different\n   functions in the general case will first be discussed.
    \ In case\n   special considerations are needed for middleboxes, multicast usage,\n
    \  etc., those will be specially discussed in related subsections.\n"
  - contents:
    - "7.1.  Negotiation of ECN Capability\n   The first stage of ECN negotiation
      for RTP over UDP is to signal the\n   capability to use ECN.  An RTP system
      that supports ECN and uses SDP\n   for its signalling MUST implement the SDP
      extension to signal ECN\n   capability as described in Section 6.1, the RTCP
      ECN feedback SDP\n   parameter defined in Section 6.2, and the XR Block ECN
      SDP parameter\n   defined in Section 6.3.  It MAY also implement alternative
      ECN\n   capability negotiation schemes, such as the ICE extension described\n
      \  in Section 6.4.  Other signalling systems will need to define\n   signalling
      parameters corresponding to those defined for SDP.\n   The \"ecn-capable-rtp:\"
      SDP attribute MUST be used when employing ECN\n   for RTP according to this
      specification in systems using SDP.  As the\n   RTCP XR ECN Summary Report is
      required independently of the\n   initialisation method or congestion control
      scheme, the \"rtcp-xr\"\n   attribute with the \"ecn-sum\" parameter MUST also
      be used.  The\n   \"rtcp-fb\" attribute with the \"nack\" parameter \"ecn\"
      MUST be used\n   whenever the initialisation method or a congestion control
      algorithm\n   requires timely sender-side knowledge of received CE markings.
      \ If\n   the congestion control scheme requires additional signalling, this\n
      \  should be indicated as appropriate.\n"
    title: 7.1.  Negotiation of ECN Capability
  - contents:
    - "7.2.  Initiation of ECN Use in an RTP Session\n   Once the sender and the receiver(s)
      have agreed that they have the\n   capability to use ECN within a session, they
      may attempt to initiate\n   ECN use.  All session participants connected over
      the same transport\n   MUST use the same initiation method.  RTP mixers or translators
      can\n   use different initiation methods to different participants that are\n
      \  connected over different underlying transports.  The mixer or\n   translator
      will need to do individual signalling with each\n   participant to ensure it
      is consistent with the ECN support in those\n   cases where it does not function
      as one endpoint for the ECN control\n   loop.\n   At the start of the RTP session,
      when the first few packets with ECT\n   are sent, it is important to verify
      that IP packets with ECN field\n   values of ECT or ECN-CE will reach their
      destination(s).  There is\n   some risk that the use of ECN will result in either
      reset of the ECN\n   field or loss of all packets with ECT or ECN-CE markings.
      \ If the\n   path between the sender and the receivers exhibits either of these\n
      \  behaviours, the sender needs to stop using ECN immediately to protect\n   both
      the network and the application.\n   The RTP senders and receivers SHALL NOT
      ECT mark their RTCP traffic\n   at any time.  This is to ensure that packet
      loss due to ECN marking\n   will not effect the RTCP traffic and the necessary
      feedback\n   information it carries.\n   An RTP system that supports ECN MUST
      implement the initiation of ECN\n   using in-band RTP and RTCP described in
      Section 7.2.1.  It MAY also\n   implement other mechanisms to initiate ECN support,
      for example, the\n   STUN-based mechanism described in Section 7.2.2, or use
      the leap-of-\n   faith option if the session supports the limitations provided
      in\n   Section 7.2.3.  If support for both in-band and out-of-band\n   mechanisms
      is signalled, the sender when negotiating SHOULD offer\n   detection of ECT
      using STUN with ICE with higher priority than\n   detection of ECT using RTP
      and RTCP.\n   No matter how ECN usage is initiated, the sender MUST continually\n
      \  monitor the ability of the network, and all its receivers, to support\n   ECN,
      following the mechanisms described in Section 7.4.  This is\n   necessary because
      path changes or changes in the receiver population\n   may invalidate the ability
      of the system to use ECN.\n"
    - contents:
      - "7.2.1.  Detection of ECT Using RTP and RTCP\n   The ECN initiation phase
        using RTP and RTCP to detect if the network\n   path supports ECN comprises
        three stages.  First, the RTP sender\n   generates some small fraction of
        its traffic with ECT marks to act as\n   a probe for ECN support.  Then, on
        receipt of these ECT-marked\n   packets, the receivers send RTCP ECN feedback
        packets and RTCP ECN\n   Summary Reports to inform the sender that their path
        supports ECN.\n   Finally, the RTP sender makes the decision to use ECN or
        not, based\n   on whether the paths to all RTP receivers have been verified
        to\n   support ECN.\n   Generating ECN Probe Packets:  During the ECN initiation
        phase, an\n      RTP sender SHALL mark a small fraction of its RTP traffic
        as ECT,\n      while leaving the reminder of the packets unmarked.  The main\n
        \     reason for only marking some packets is to maintain usable media\n      delivery
        during the ECN initiation phase in those cases where ECN\n      is not supported
        by the network path.  A secondary reason to send\n      some not-ECT packets
        is to ensure that the receivers will send\n      RTCP reports on this sender,
        even if all ECT-marked packets are\n      lost in transit.  The not-ECT packets
        also provide a baseline to\n      compare performance parameters against.
        \ Another reason for only\n      probing with a small number of packets is
        to reduce the risk that\n      significant numbers of congestion markings
        might be lost if ECT is\n      cleared to not-ECT by an ECN-reverting Middlebox.
        \ Then, any\n      resulting lack of congestion response is likely to have
        little\n      damaging effect on others.  An RTP sender is RECOMMENDED to
        send a\n      minimum of two packets with ECT markings per RTCP reporting\n
        \     interval.  In case a random ECT pattern is intended to be used, at\n
        \     least one packet with ECT(0) and one with ECT(1) should be sent\n      per
        reporting interval; in case a single ECT marking is to be\n      used, only
        that ECT value SHOULD be sent.  The RTP sender SHALL\n      continue to send
        some ECT-marked traffic as long as the ECN\n      initiation phase continues.
        \ The sender SHOULD NOT mark all RTP\n      packets as ECT during the ECN
        initiation phase.\n      This memo does not mandate which RTP packets are
        marked with ECT\n      during the ECN initiation phase.  An implementation
        should insert\n      ECT marks in RTP packets in a way that minimises the
        impact on\n      media quality if those packets are lost.  The choice of packets
        to\n      mark is very media dependent.  For audio formats, it would make\n
        \     sense for the sender to mark comfort noise packets or similar.\n      For
        video formats, packets containing P- or B-frames (rather than\n      I-frames)
        would be an appropriate choice.  No matter which RTP\n      packets are marked,
        those packets MUST NOT be sent in duplicate,\n      with and without ECT,
        since the RTP sequence number is used to\n      identify packets that are
        received with ECN markings.\n   Generating RTCP ECN Feedback:  If ECN capability
        has been negotiated\n      in an RTP session, the receivers in the session
        MUST listen for\n      ECT or ECN-CE-marked RTP packets and generate RTCP
        ECN feedback\n      packets (Section 5.1) to mark their receipt.  An immediate
        or\n      early (depending on the RTP/AVPF mode) ECN feedback packet SHOULD\n
        \     be generated on receipt of the first ECT- or ECN-CE-marked packet\n
        \     from a sender that has not previously sent any ECT traffic.  Each\n
        \     regular RTCP report MUST also contain an ECN Summary Report\n      (Section
        5.2).  Reception of subsequent ECN-CE-marked packets MUST\n      result in
        additional early or immediate ECN feedback packets being\n      sent unless
        no timely feedback is required.\n   Determination of ECN Support:  RTP is
        a group communication protocol,\n      where members can join and leave the
        group at any time.  This\n      complicates the ECN initiation phase, since
        the sender must wait\n      until it believes the group membership has stabilised
        before it\n      can determine if the paths to all receivers support ECN (group\n
        \     membership changes after the ECN initiation phase has completed\n      are
        discussed in Section 7.3).\n      An RTP sender shall consider the group membership
        to be stable\n      after it has been in the session and sending ECT-marked
        probe\n      packets for at least three RTCP reporting intervals (i.e., after\n
        \     sending its third regularly scheduled RTCP packet) and when a\n      complete
        RTCP reporting interval has passed without changes to the\n      group membership.
        \ ECN initiation is considered successful when\n      the group membership
        is stable and all known participants have\n      sent one or more RTCP ECN
        feedback packets or RTCP XR ECN Summary\n      Reports indicating correct
        receipt of the ECT-marked RTP packets\n      generated by the sender.\n      As
        an optimisation, if an RTP sender is initiating ECN usage\n      towards a
        unicast address, then it MAY treat the ECN initiation as\n      provisionally
        successful if it receives an RTCP ECN Feedback\n      Report or an RTCP XR
        ECN Summary Report indicating successful\n      receipt of the ECT-marked
        packets, with no negative indications,\n      from a single RTP receiver (where
        a single RTP receiver is\n      considered as all SSRCs used by a single RTCP
        CNAME).  After\n      declaring provisional success, the sender MAY generate
        ECT-marked\n      packets as described in Section 7.3, provided it continues
        to\n      monitor the RTCP reports for a period of three RTCP reporting\n
        \     intervals from the time the ECN initiation started, to check if\n      there
        are any other participants in the session.  Thus, as long as\n      any additional
        SSRC that report on the ECN usage are using the\n      same RTCP CNAME as
        the previous reports and they are all\n      indicating functional ECN, the
        sender may continue.  If other\n      participants are detected, i.e., other
        RTCP CNAMEs, the sender\n      MUST fallback to only ECT-marking a small fraction
        of its RTP\n      packets, while it determines if ECN can be supported following
        the\n      full procedure described above.  Different RTCP CNAMEs received\n
        \     over a unicast transport may occur when using translators in a\n      multi-party
        RTP session (e.g., when using a centralised conference\n      bridge).\n         Note:
        The above optimisation supports peer-to-peer unicast\n         transport with
        several SSRCs multiplexed onto the same flow\n         (e.g., a single participant
        with two video cameras or SSRC\n         multiplexed RTP retransmission [RFC4588]).
        \ It is desirable to\n         be able to rapidly negotiate ECN support for
        such a session,\n         but the optimisation above can fail if there are\n
        \        implementations that use the same CNAME for different parts of\n
        \        a distributed implementation that have different transport\n         characteristics
        (e.g., if a single logical endpoint is split\n         across multiple hosts).\n
        \     ECN initiation is considered to have failed at the instant the\n      initiating
        RTP sender received an RTCP packet that doesn't contain\n      an RTCP ECN
        Feedback Report or ECN Summary Report from any RTP\n      session participant
        that has an RTCP RR with an extended RTP\n      sequence number field that
        indicates that it should have received\n      multiple (>3) ECT-marked RTP
        packets.  This can be due to failure\n      to support the ECN feedback format
        by the receiver or some\n      middlebox or the loss of all ECT-marked packets.
        \ Both indicate a\n      lack of ECN support.\n   If the ECN negotiation succeeds,
        this indicates that the path can\n   pass some ECN-marked traffic and that
        the receivers support ECN\n   feedback.  This does not necessarily imply that
        the path can robustly\n   convey ECN feedback; Section 7.3 describes the ongoing
        monitoring\n   that must be performed to ensure the path continues to robustly\n
        \  support ECN.\n   When a sender or receiver detects ECN failures on paths,
        they should\n   log these to enable follow up and statistics gathering regarding\n
        \  broken paths.  The logging mechanism used is implementation\n   dependent.\n"
      title: 7.2.1.  Detection of ECT Using RTP and RTCP
    - contents:
      - "7.2.2.  Detection of ECT Using STUN with ICE\n   This section describes an
        OPTIONAL method that can be used to avoid\n   media impact and also ensure
        an ECN-capable path prior to media\n   transmission.  This method is considered
        in the context where the\n   session participants are using ICE [RFC5245]
        to find working\n   connectivity.  We need to use ICE rather than STUN only,
        as the\n   verification needs to happen from the media sender to the address
        and\n   port on which the receiver is listening.\n   Note that this method
        is only applicable to sessions when the remote\n   destinations are unicast
        addresses.  In addition, transport\n   translators that do not terminate the
        ECN control loop and may\n   distribute received packets to more than one
        other receiver must\n   either disallow this method (and use the RTP/RTCP
        method instead) or\n   implement additional handling as discussed below.  This
        is because\n   the ICE initialisation method verifies the underlying transport
        to\n   one particular address and port.  If the receiver at that address and\n
        \  port intends to use the received packets in a multi-point session,\n   then
        the tested capabilities and the actual session behaviour are not\n   matched.\n
        \  To minimise the impact of setup delay, and to prioritise the fact\n   that
        one has working connectivity rather than necessarily finding the\n   best
        ECN-capable network path, this procedure is applied after having\n   performed
        a successful connectivity check for a candidate, which is\n   nominated for
        usage.  At that point, an additional connectivity check\n   is performed,
        sending the \"ECN-CHECK\" attribute in a STUN packet that\n   is ECT marked.
        \ On reception of the packet, a STUN server supporting\n   this extension
        will note the received ECN field value and send a\n   STUN/UDP/IP packet in
        reply with the ECN field set to not-ECT and an\n   ECN-CHECK attribute included.
        \ A STUN server that doesn't understand\n   the extension, or is incapable
        of reading the ECN values on incoming\n   STUN packets, should follow the
        rule in the STUN specification for\n   unknown comprehension-optional attributes
        and ignore the attribute,\n   resulting in the sender receiving a STUN response
        without the ECN-\n   CHECK STUN attribute.\n   The ECN STUN checks can be
        lost on the path, for example, due to the\n   ECT marking but also due to
        various other non ECN-related reasons\n   causing packet loss.  The goal is
        to detect when the ECT markings are\n   rewritten or if it is the ECT marking
        that causes packet loss so that\n   the path can be determined as not-ECT.
        \ Other reasons for packet loss\n   should not result in a failure to verify
        the path as ECT.  Therefore,\n   a number of retransmissions should be attempted.
        \ But, the sender of\n   ECN STUN checks will also have to set a criteria
        for when it gives up\n   testing for ECN capability on the path.  Since the
        ICE agent has\n   successfully verified the path, an RTT measurement for this
        path can\n   be performed.  To have a high probability of successfully verifying\n
        \  the path, it is RECOMMENDED that the client retransmit the ECN STUN\n   check
        at least 4 times.  The transmission for that flow is stopped\n   when an ECN-CHECK
        STUN response has been received, which doesn't\n   indicate a retransmission
        of the request due to a temporary error, or\n   the maximum number of retransmissions
        has been sent.  The ICE agent\n   is recommended to give up on the ECN verification
        MAX(1.5*RTT, 20 ms)\n   after the last ECN STUN check was sent.\n   The transmission
        of the ECT-marked STUN connectivity checks\n   containing the ECN-CHECK attribute
        can be done prior as well in\n   parallel to actual media transmission.  Both
        cases are supported,\n   where the main difference is how aggressively the
        transmission of the\n   STUN checks are done.  The reason for this is to avoid
        adding\n   additional startup delay until media can flow.  If media is required\n
        \  immediately after nomination has occurred, the STUN checks SHALL be\n   done
        in parallel.  If the application does not require media\n   transmission immediately,
        the verification of ECT SHOULD start using\n   the aggressive mode.  At any
        point in the process until ECT has been\n   verified or found to not work,
        media transmission MAY be started, and\n   the ICE agent SHALL transition
        from the aggressive mode to the\n   parallel mode.\n   The aggressive mode
        uses an interval between the retransmissions\n   based on the Ta timer as
        defined in Section 16.1 for RTP Media\n   Streams in ICE [RFC5245].  The number
        of ECN STUN checks needing to\n   be sent will depend on the number of ECN-capable
        flows (N) that is to\n   be established.  The interval between each transmission
        of an ECN-\n   CHECK packet MUST be Ta.  In other words, for a given flow
        being\n   verified for ECT, the retransmission timeout (RTO) is set to Ta*N.\n
        \  The parallel mode uses transmission intervals in order to prevent the\n
        \  ECT verification checks from increasing the total bitrate more than\n   10%.
        \ As ICE's regular transmission schedule is mimicking a common\n   voice call
        in amount, to meet that goal for most media flows, setting\n   the retransmission
        interval to Ta*N*k where k=10 fulfills that goal.\n   Thus, the default behaviour
        SHALL be to use k=10 when in parallel\n   mode.  In cases where the bitrate
        of the STUN connectivity checks can\n   be determined, they MAY be sent with
        smaller values of k, but k MUST\n   NOT be smaller than 1, as long as the
        total bitrate for the\n   connectivity checks are less than 10% of the used
        media bitrate.  The\n   RTP media packets being sent in parallel mode SHALL
        NOT be ECT marked\n   prior to verification of the path as ECT.\n   The STUN
        ECN-CHECK attribute contains one field and a flag, as shown\n   in Figure
        6.  The flag indicates whether the echo field contains a\n   valid value or
        not.  The field is the ECN echo field and, when valid,\n   contains the two
        ECN bits from the packet it echoes back.  The ECN-\n   CHECK attribute is
        a comprehension optional attribute.\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         Type                  |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |           Reserved                                      |ECF|V|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 6: ECN-CHECK STUN Attribute\n   V: Valid (1 bit)
        ECN Echo value field is valid when set to 1 and\n      invalid when set 0.\n
        \  ECF:  ECN Echo value field (2 bits) contains the ECN field value of\n      the
        STUN packet it echoes back when the field is valid.  If\n      invalid, the
        content is arbitrary.\n   Reserved:  Reserved bits (29 bits) SHALL be set
        to 0 on transmission\n      and SHALL be ignored on reception.\n   This attribute
        MAY be included in any STUN request to request the ECN\n   field to be echoed
        back.  In STUN requests, the V bit SHALL be set to\n   0.  A compliant STUN
        server receiving a request with the ECN-CHECK\n   attribute SHALL read the
        ECN field value of the IP/UDP packet in\n   which the request was received.
        \ Upon forming the response, the\n   server SHALL include the ECN-CHECK attribute
        setting the V bit to\n   valid and include the read value of the ECN field
        into the ECF field.\n   If the STUN responder was unable to ascertain, due
        to temporary\n   errors, the ECN value of the STUN request, it SHALL set the
        V bit in\n   the response to 0.  The STUN client may retry immediately.\n
        \  The ICE-based initialisation method does require some special\n   consideration
        when used by a translator.  This is especially for\n   transport translators
        and translators that fragment or reassemble\n   packets, since they do not
        separate the ECN control loops between the\n   endpoints and the translator.
        \ When using ICE-based initiation, such\n   a translator must ensure that
        any participants joining an RTP session\n   for which ECN has been negotiated
        are successfully verified in the\n   direction from the translator to the
        joining participant.\n   Alternatively, it must correctly handle remarking
        of ECT RTP packets\n   towards that participant.  When a new participant joins
        the session,\n   the translator will perform a check towards the new participant.
        \ If\n   that is successfully completed, the ECT properties of the session
        are\n   maintained for the other senders in the session.  If the check fails,\n
        \  then the existing senders will now see a participant that fails to\n   receive
        ECT.  Thus, the failure detection in those senders will\n   eventually detect
        this.  However, to avoid misusing the network on\n   the path from the translator
        to the new participant, the translator\n   SHALL remark the traffic intended
        to be forwarded from ECT to not-\n   ECT.  Any packets intended to be forwarded
        that are ECN-CE marked\n   SHALL be discarded and not sent.  In cases where
        the path from a new\n   participant to the translator fails the ECT check,
        then only that\n   sender will not contribute any ECT-marked traffic towards
        the\n   translator.\n"
      title: 7.2.2.  Detection of ECT Using STUN with ICE
    - contents:
      - "7.2.3.  Leap-of-Faith ECT Initiation Method\n   This method for initiating
        ECN usage is a leap of faith that assumes\n   that ECN will work on the used
        path(s).  The method is to go directly\n   to \"ongoing use of ECN\" as defined
        in Section 7.3.  Thus, all RTP\n   packets MAY be marked as ECT, and the failure
        detection MUST be used\n   to detect any case when the assumption that the
        path is ECT capable\n   is wrong.  This method is only recommended for controlled\n
        \  environments where the whole path(s) between sender and receiver(s)\n   has
        been built and verified to be ECT.\n   If the sender marks all packets as
        ECT while transmitting on a path\n   that contains an ECN-blocking middlebox,
        then receivers downstream of\n   that middlebox will not receive any RTP data
        packets from the sender\n   and hence will not consider it to be an active
        RTP SSRC.  The sender\n   can detect this and revert to sending packets without
        ECT marks,\n   since RTCP SR/RR packets from such receivers will either not
        include\n   a report for the sender's SSRC or will report that no packets
        have\n   been received, but this takes at least one RTCP reporting interval.\n
        \  It should be noted that a receiver might generate its first RTCP\n   packet
        immediately on joining a unicast session, or very shortly\n   after joining
        an RTP/AVPF session, before it has had chance to\n   receive any data packets.
        \ A sender that receives an RTCP SR/RR\n   packet indicating lack of reception
        by a receiver SHOULD therefore\n   wait for a second RTCP report from that
        receiver to be sure that the\n   lack of reception is due to ECT-marking.
        \ Since this recovery process\n   can take several tens of seconds, during
        which time the RTP session\n   is unusable for media, it is NOT RECOMMENDED
        that the leap-of-faith\n   ECT initiation method be used in environments where
        ECN-blocking\n   middleboxes are likely to be present.\n"
      title: 7.2.3.  Leap-of-Faith ECT Initiation Method
    title: 7.2.  Initiation of ECN Use in an RTP Session
  - contents:
    - "7.3.  Ongoing Use of ECN within an RTP Session\n   Once ECN has been successfully
      initiated for an RTP sender, that\n   sender begins sending all RTP data packets
      as ECT-marked, and its\n   receivers send ECN feedback information via RTCP
      packets.  This\n   section describes procedures for sending ECT-marked data,
      providing\n   ECN feedback information via RTCP, and responding to ECN feedback\n
      \  information.\n"
    - contents:
      - "7.3.1.  Transmission of ECT-Marked RTP Packets\n   After a sender has successfully
        initiated ECN use, it SHOULD mark all\n   the RTP data packets it sends as
        ECT.  The sender SHOULD mark packets\n   as ECT(0) unless the receiver expresses
        a preference for ECT(1) or\n   for a random ECT value using the \"ect\" parameter
        in the \"a=ecn--\n   capable-rtp:\" attribute.\n   The sender SHALL NOT include
        ECT marks on outgoing RTCP packets and\n   SHOULD NOT include ECT marks on
        any other outgoing control messages\n   (e.g., STUN [RFC5389] packets, Datagram
        Transport Layer Security\n   (DTLS) [RFC6347] handshake packets, or ZRTP [RFC6189]
        control\n   packets) that are multiplexed on the same UDP port.  For control\n
        \  packets there might be exceptions, like the STUN-based ECN-CHECK\n   defined
        in Section 7.2.2.\n"
      title: 7.3.1.  Transmission of ECT-Marked RTP Packets
    - contents:
      - "7.3.2.  Reporting ECN Feedback via RTCP\n   An RTP receiver that receives
        a packet with an ECN-CE mark, or that\n   detects a packet loss, MUST schedule
        the transmission of an RTCP ECN\n   feedback packet as soon as possible (subject
        to the constraints of\n   [RFC4585] and [RFC3550]) to report this back to
        the sender unless no\n   timely feedback is required.  The feedback RTCP packet
        SHALL consist\n   of at least one ECN feedback packet (Section 5.1) reporting
        on the\n   packets received since the last ECN feedback packet and will contain\n
        \  (at least) an RTCP SR/RR packet and an SDES packet, unless reduced-\n   size
        RTCP [RFC5506] is used.  The RTP/AVPF profile in early or\n   immediate feedback
        mode SHOULD be used where possible, to reduce the\n   interval before feedback
        can be sent.  To reduce the size of the\n   feedback message, reduced-size
        RTCP [RFC5506] MAY be used if\n   supported by the endpoints.  Both RTP/AVPF
        and reduced-size RTCP MUST\n   be negotiated in the session setup signalling
        before they can be\n   used.\n   Every time a regular compound RTCP packet
        is to be transmitted, an\n   ECN-capable RTP receiver MUST include an RTCP
        XR ECN Summary Report\n   as described in Section 5.2 as part of the compound
        packet.\n   The multicast feedback implosion problem, which occurs when many\n
        \  receivers simultaneously send feedback to a single sender, must be\n   considered.
        \ The RTP/AVPF transmission rules will limit the amount of\n   feedback that
        can be sent, avoiding the implosion problem but also\n   delaying feedback
        by varying degrees from nothing up to a full RTCP\n   reporting interval.
        \ As a result, the full extent of a congestion\n   situation may take some
        time to reach the sender, although some\n   feedback should arrive in a reasonably
        timely manner, allowing the\n   sender to react on a single or a few reports.\n"
      title: 7.3.2.  Reporting ECN Feedback via RTCP
    - contents:
      - "7.3.3.  Response to Congestion Notifications\n   The reception of RTP packets
        with ECN-CE marks in the IP header is a\n   notification that congestion is
        being experienced.  The default\n   reaction on the reception of these ECN-CE-marked
        packets MUST be to\n   provide the congestion control algorithm with a congestion\n
        \  notification that triggers the algorithm to react as if packet loss\n   had
        occurred.  There should be no difference in congestion response\n   if ECN-CE
        marks or packet drops are detected.\n   Other reactions to ECN-CE may be specified
        in the future, following\n   IETF Review.  Detailed designs of such alternative
        reactions MUST be\n   specified in a Standards Track RFC and be reviewed to
        ensure they are\n   safe for deployment under any restrictions specified.
        \ A potential\n   example for an alternative reaction could be emergency communications\n
        \  (such as that generated by first responders, as opposed to the\n   general
        public) in networks where the user has been authorised.  A\n   more detailed
        description of these other reactions, as well as the\n   types of congestion
        control algorithms used by end-nodes, is outside\n   the scope of this document.\n
        \  Depending on the media format, type of session, and RTP topology\n   used,
        there are several different types of congestion control that\n   can be used:\n
        \  Sender-Driven Congestion Control:  The sender is responsible for\n      adapting
        the transmitted bitrate in response to RTCP ECN feedback.\n      When the
        sender receives the ECN feedback data, it feeds this\n      information into
        its congestion control or bitrate adaptation\n      mechanism so that it can
        react as if packet loss was reported.\n      The congestion control algorithm
        to be used is not specified here,\n      although TFRC [RFC5348] is one example
        that might be used.\n   Receiver-Driven Congestion Control:  In a receiver-driven
        congestion\n      control mechanism, the receivers can react to the ECN-CE
        marks\n      themselves without providing ECN-CE feedback to the sender.  This\n
        \     may allow faster response than sender-driven congestion control in\n
        \     some circumstances and also scale to large number of receivers and\n
        \     multicast usage.  One example of receiver-driven congestion\n      control
        is implemented by providing the content in a layered way,\n      with each
        layer providing improved media quality but also\n      increased bandwidth
        usage.  The receiver locally monitors the\n      ECN-CE marks on received
        packets to check if it experiences\n      congestion with the current number
        of layers.  If congestion is\n      experienced, the receiver drops one layer,
        thus reducing the\n      resource consumption on the path towards itself.
        \ For example, if\n      a layered media encoding scheme such as H.264 Scalable
        Video\n      Coding (SVC) is used, the receiver may change its layer\n      subscription
        and so reduce the bitrate it receives.  The receiver\n      MUST still send
        an RTCP XR ECN Summary to the sender, even if it\n      can adapt without
        contact with the sender, so that the sender can\n      determine if ECN is
        supported on the network path.  The timeliness\n      of RTCP feedback is
        less of a concern with receiver-driven\n      congestion control, and regular
        RTCP reporting of ECN summary\n      information is sufficient (without using
        RTP/AVPF immediate or\n      early feedback).\n   Hybrid:  There might be
        mechanisms that utilise both some receiver\n      behaviours and some sender-side
        monitoring, thus requiring both\n      feedback of congestion events to the
        sender and taking receiver\n      decisions and possible signalling to the
        sender.  In this case,\n      the congestion control algorithm needs to use
        the signalling to\n      indicate which features of ECN for RTP are required.\n
        \  Responding to congestion indication in the case of multicast traffic\n
        \  is a more complex problem than for unicast traffic.  The fundamental\n
        \  problem is diverse paths, i.e., when different receivers don't see\n   the
        same path and thus have different bottlenecks, so the receivers\n   may get
        ECN-CE-marked packets due to congestion at different points\n   in the network.
        \ This is problematic for sender-driven congestion\n   control, since when
        receivers are heterogeneous in regards to\n   capacity, the sender is limited
        to transmitting at the rate the\n   slowest receiver can support.  This often
        becomes a significant\n   limitation as group size grows.  Also, as group
        size increases, the\n   frequency of reports from each receiver decreases,
        which further\n   reduces the responsiveness of the mechanism.  Receiver-driven\n
        \  congestion control has the advantage that each receiver can choose\n   the
        appropriate rate for its network path, rather than all receivers\n   having
        to settle for the lowest common rate.\n   We note that ECN support is not
        a silver bullet to improving\n   performance.  The use of ECN gives the chance
        to respond to\n   congestion before packets are dropped in the network, improving
        the\n   user experience by allowing the RTP application to control how the\n
        \  quality is reduced.  An application that ignores ECN Congestion\n   Experienced
        feedback is not immune to congestion: the network will\n   eventually begin
        to discard packets if traffic doesn't respond.  To\n   avoid packet loss,
        it is in the best interest of an application to\n   respond to ECN congestion
        feedback promptly.\n"
      title: 7.3.3.  Response to Congestion Notifications
    title: 7.3.  Ongoing Use of ECN within an RTP Session
  - contents:
    - "7.4.  Detecting Failures\n   Senders and receivers can deliberately ignore
      ECN-CE and thus get a\n   benefit over behaving flows (cheating).  The ECN nonce
      [RFC3540] is\n   an addition to TCP that attempts to solve this issue as long
      as the\n   sender acts on behalf of the network.  The assumption that senders\n
      \  act on behalf of the network may be false due to the nature of peer-\n   to-peer
      use of RTP.  Still, a significant portion of RTP senders are\n   infrastructure
      devices (for example, streaming media servers) that do\n   have an interest
      in protecting both service quality and the network.\n   Even though there may
      be cases where the nonce may be applicable for\n   RTP, it is not included in
      this specification.  This is because a\n   receiver interested in cheating would
      simply claim to not support the\n   nonce, or even ECN itself.  It is, however,
      worth mentioning that, as\n   real-time media is commonly sensitive to increased
      delay and packet\n   loss, it will be in the interest of both the media sender
      and\n   receivers to minimise the number and duration of any congestion\n   events
      as they will adversely affect media quality.\n   RTP sessions can also suffer
      from path changes resulting in a non-\n   ECN-compliant node becoming part of
      the path.  That node may perform\n   either of two actions that has an effect
      on the ECN and application\n   functionality.  The gravest is if the node drops
      packets with the ECN\n   field set to ECT(0), ECT(1), or ECN-CE.  This can be
      detected by the\n   receiver when it receives an RTCP SR packet indicating that
      a sender\n   has sent a number of packets that it has not received.  The sender\n
      \  may also detect such a middlebox based on the receiver's RTCP RR\n   packet,
      when the extended sequence number is not advanced due to the\n   failure to
      receive packets.  If the packet loss is less than 100%,\n   then packet loss
      reporting in either the ECN feedback information or\n   RTCP RR will indicate
      the situation.  The other action is to re-mark\n   a packet from ECT or ECN-CE
      to not-ECT.  That has less dire results;\n   however, it should be detected
      so that ECN usage can be suspended to\n   prevent misusing the network.\n   The
      RTCP XR ECN summary packet and the ECN feedback packet allow the\n   sender
      to compare the number of ECT-marked packets of different types\n   received
      with the number it actually sent.  The number of ECT packets\n   received, plus
      the number of ECN-CE-marked and lost packets, should\n   correspond to the number
      of sent ECT-marked packets plus the number\n   of received duplicates.  If these
      numbers don't agree, there are two\n   likely reasons: a translator changing
      the stream or not carrying the\n   ECN markings forward or some node re-marking
      the packets.  In both\n   cases, the usage of ECN is broken on the path.  By
      tracking all the\n   different possible ECN field values, a sender can quickly
      detect if\n   some non-compliant behaviour is happening on the path.\n   Thus,
      packet losses and non-matching ECN field value statistics are\n   possible indications
      of issues with using ECN over the path.  The\n   next section defines both sender
      and receiver reactions to these\n   cases.\n"
    - contents:
      - "7.4.1.  Fallback Mechanisms\n   Upon the detection of a potential failure,
        both the sender and the\n   receiver can react to mitigate the situation.\n
        \  A receiver that detects a packet loss burst MAY schedule an early\n   feedback
        packet that includes at least the RTCP RR and the ECN\n   feedback message
        to report this to the sender.  This will speed up\n   the detection of the
        loss at the sender, thus triggering sender-side\n   mitigation.\n   A sender
        that detects high packet loss rates for ECT-marked packets\n   SHOULD immediately
        switch to sending packets as not-ECT to determine\n   if the losses are potentially
        due to the ECT markings.  If the losses\n   disappear when the ECT-marking
        is discontinued, the RTP sender should\n   go back to initiation procedures
        to attempt to verify the apparent\n   loss of ECN capability of the used path.
        \ If a re-initiation fails,\n   then two possible actions exist:\n   1.  Periodically
        retry the ECN initiation to detect if a path change\n       occurs to a path
        that is ECN capable.\n   2.  Renegotiate the session to disable ECN support.
        \ This is a choice\n       that is suitable if the impact of ECT probing on
        the media\n       quality is noticeable.  If multiple initiations have been\n
        \      successful, but the following full usage of ECN has resulted in\n       the
        fallback procedures, then disabling of the ECN support is\n       RECOMMENDED.\n
        \  We foresee the possibility of flapping ECN capability due to several\n
        \  reasons: video-switching MCU or similar middleboxes that select to\n   deliver
        media from the sender only intermittently; load-balancing\n   devices that
        may in worst case result in some packets taking a\n   different network path
        than the others; mobility solutions that\n   switch the underlying network
        path in a transparent way for the\n   sender or receiver; and membership changes
        in a multicast group.  It\n   is, however, appropriate to mention that there
        are also issues such\n   as re-routing of traffic due to a flappy route table
        or excessive\n   reordering and other issues that are not directly ECN related
        but\n   nevertheless may cause problems for ECN.\n"
      title: 7.4.1.  Fallback Mechanisms
    - contents:
      - "7.4.2.  Interpretation of ECN Summary Information\n   This section contains
        discussion on how the ECN Summary Report\n   information can be used to detect
        various types of ECN path issues.\n   We first review the information the
        RTCP reports provide on a per-\n   source (SSRC) basis:\n   ECN-CE Counter:
        \ The number of RTP packets received so far in the\n      session with an
        ECN field set to CE.\n   ECT (0/1) Counters:  The number of RTP packets received
        so far in the\n      session with an ECN field set to ECT (0) and ECT (1)
        respectively.\n   not-ECT Counter:  The number of RTP packets received so
        far in the\n      session with an ECN field set to not-ECT.\n   Lost Packets
        Counter:  The number of RTP packets that where expected\n      based on sequence
        numbers but never received.\n   Duplication Counter:  The number of received
        RTP packets that are\n      duplicates of already received ones.\n   Extended
        Highest Sequence number:  The highest sequence number seen\n      when sending
        this report, but with additional bits, to handle\n      disambiguation when
        wrapping the RTP sequence number field.\n   The counters will be initialised
        to zero to provide values for the\n   RTP stream sender from the first report.
        \ After the first report, the\n   changes between the last received report
        and the previous report are\n   determined by simply taking the values of
        the latest minus the\n   previous, taking wrapping into account.  This definition
        is also\n   robust to packet losses, since if one report is missing, the\n
        \  reporting interval becomes longer, but is otherwise equally valid.\n   In
        a perfect world, the number of not-ECT packets received should be\n   equal
        to the number sent minus the Lost Packets Counter, and the sum\n   of the
        ECT(0), ECT(1), and ECN-CE counters should be equal to the\n   number of ECT-marked
        packet sent.  Two issues may cause a mismatch in\n   these statistics: severe
        network congestion or unresponsive\n   congestion control might cause some
        ECT-marked packets to be lost,\n   and packet duplication might result in
        some packets being received\n   and counted in the statistics multiple times
        (potentially with a\n   different ECN-mark on each copy of the duplicate).\n
        \  The rate of packet duplication is tracked, allowing one to take the\n   duplication
        into account.  The value of the ECN field for duplicates\n   will also be
        counted, and when comparing the figures, one needs to\n   take into account
        in the calculation that some fraction of packet\n   duplicates are not-ECT
        and some are ECT.  Thus, when only sending\n   not-ECT, the number of sent
        packets plus reported duplicates equals\n   the number of received not-ECT.
        \ When sending only ECT, the number of\n   sent ECT packets plus duplicates
        will equal ECT(0), ECT(1), ECN-CE,\n   and packet loss.  When sending a mix
        of not-ECT and ECT, there is an\n   uncertainty if any duplicate or packet
        loss was an not-ECT or ECT.\n   If the packet duplication is completely independent
        of the usage of\n   ECN, then the fraction of packet duplicates should be
        in relation to\n   the number of not-ECT vs. ECT packets sent during the period
        of\n   comparison.  This relation does not hold for packet loss, where\n   higher
        rates of packet loss for not-ECT is expected than for ECT\n   traffic.\n   Detecting
        clearing of ECN field: If the ratio between ECT and not-ECT\n   transmitted
        in the reports has become all not-ECT, or has\n   substantially changed towards
        not-ECT, then this is clearly an\n   indication that the path results in clearing
        of the ECT field.\n   Dropping of ECT packets: To determine if the packet-drop
        ratio is\n   different between not-ECT and ECT-marked transmission requires
        a mix\n   of transmitted traffic.  The sender should compare if the delivery\n
        \  percentage (delivered/transmitted) between ECT and not-ECT is\n   significantly
        different.  Care must be taken if the number of packets\n   is low in either
        of the categories.  One must also take into account\n   the level of CE marking.
        \ A CE-marked packet would have been dropped\n   unless it was ECT marked.
        \ Thus, the packet loss level for not-ECT\n   should be approximately equal
        to the loss rate for ECT when counting\n   the CE-marked packets as lost ones.
        \ A sender performing this\n   calculation needs to ensure that the difference
        is statistically\n   significant.\n   If erroneous behaviour is detected,
        it should be logged to enable\n   follow up and statistics gathering.\n"
      title: 7.4.2.  Interpretation of ECN Summary Information
    title: 7.4.  Detecting Failures
  title: 7.  Use of ECN with RTP/UDP/IP
- contents:
  - "8.  Processing ECN in RTP Translators and Mixers\n   RTP translators and mixers
    that support ECN for RTP are required to\n   process and potentially modify or
    generate ECN marking in RTP\n   packets.  They also need to process and potentially
    modify or\n   generate RTCP ECN feedback packets for the translated and/or mixed\n
    \  streams.  This includes both downstream RTCP reports generated by the\n   media
    sender and also reports generated by the receivers, flowing\n   upstream back
    towards the sender.\n"
  - contents:
    - "8.1.  Transport Translators\n   Some translators only perform transport-level
      translations, such as\n   copying packets from one address domain, like from
      unicast to\n   multicast.  They may also perform relaying like copying an incoming\n
      \  packet to a number of unicast receivers.  This section details the\n   ECN-related
      actions for RTP and RTCP.\n   For RTP data packets, the translator, which does
      not modify the media\n   stream, SHOULD copy the ECN bits unchanged from the
      incoming to the\n   outgoing datagrams, unless the translator itself is overloaded
      and\n   experiencing congestion, in which case it may mark the outgoing\n   datagrams
      with an ECN-CE mark.\n   A transport translator does not modify RTCP packets.
      \ However, it\n   MUST perform the corresponding transport translation of the
      RTCP\n   packets as it does with RTP packets being sent from the same source/\n
      \  endpoint.\n"
    title: 8.1.  Transport Translators
  - contents:
    - "8.2.  Fragmentation and Reassembly in Translators\n   An RTP translator may
      fragment or reassemble RTP data packets without\n   changing the media encoding
      and without reference to the congestion\n   state of the networks it bridges.
      \ An example of this might be to\n   combine packets of a voice-over-IP stream
      coded with one 20 ms frame\n   per RTP packet into new RTP packets with two
      20 ms frames per packet,\n   thereby reducing the header overhead and thus stream
      bandwidth, at\n   the expense of an increase in latency.  If multiple data packets
      are\n   re-encoded into one, or vice versa, the RTP translator MUST assign\n
      \  new sequence numbers to the outgoing packets.  Losses in the incoming\n   RTP
      packet stream may also induce corresponding gaps in the outgoing\n   RTP sequence
      numbers.  An RTP translator MUST rewrite RTCP packets to\n   make the corresponding
      changes to their sequence numbers and to\n   reflect the impact of the fragmentation
      or reassembly.  This section\n   describes how that rewriting is to be done
      for RTCP ECN feedback\n   packets.  Section 7.2 of [RFC3550] describes general
      procedures for\n   other RTCP packet types.\n   The processing of arriving RTP
      packets for this case is as follows.\n   If an ECN-marked packet is split into
      two, then both the outgoing\n   packets MUST be ECN marked identically to the
      original; if several\n   ECN-marked packets are combined into one, the outgoing
      packet MUST be\n   either ECN-CE marked or dropped if any of the incoming packets
      are\n   ECN-CE marked.  If the outgoing combined packet is not ECN-CE marked,\n
      \  then it MUST be ECT marked if any of the incoming packets were ECT\n   marked.\n
      \  RTCP ECN feedback packets (Section 5.1) contain seven fields that are\n   rewritten
      in an RTP translator that fragments or reassembles packets:\n   the extended
      highest sequence number, the duplication counter, the\n   Lost Packets Counter,
      the ECN-CE counter, and not-ECT counter, the\n   ECT(0) counter, and the ECT(1)
      counter.  The RTCP XR report block for\n   ECN summary information (Section
      5.2) includes all of these fields\n   except the extended highest sequence number,
      which is present in the\n   report block in an SR or RR packet.  The procedures
      for rewriting\n   these fields are the same for both the RTCP ECN feedback packet
      and\n   the RTCP XR ECN summary packet.\n   When receiving an RTCP ECN feedback
      packet for the translated stream,\n   an RTP translator first determines the
      range of packets to which the\n   report corresponds.  The extended highest
      sequence number in the RTCP\n   ECN feedback packet (or in the RTCP SR/RR packet
      contained within the\n   compound packet, in the case of RTCP XR ECN Summary
      Reports)\n   specifies the end sequence number of the range.  For the first
      RTCP\n   ECN feedback packet received, the initial extended sequence number
      of\n   the range may be determined by subtracting the sum of the Lost\n   Packets
      Counter, the ECN-CE counter, the not-ECT counter, the ECT(0)\n   counter and
      the ECT(1) counter minus the duplication counter, from\n   the extended highest
      sequence number.  For subsequent RTCP ECN\n   feedback packets, the starting
      sequence number may be determined as\n   being one after the extended highest
      sequence number of the previous\n   RTCP ECN feedback packet received from the
      same SSRC.  These values\n   are in the sequence number space of the translated
      packets.\n   Based on its knowledge of the translation process, the translator\n
      \  determines the sequence number range for the corresponding original,\n   pre-translation,
      packets.  The extended highest sequence number in\n   the RTCP ECN feedback
      packet is rewritten to match the final sequence\n   number in the pre-translation
      sequence number range.\n   The translator then determines the ratio, R, of the
      number of packets\n   in the translated sequence number space (numTrans) to
      the number of\n   packets in the pre-translation sequence number space (numOrig)
      such\n   that R = numTrans / numOrig.  The counter values in the RTCP ECN\n
      \  Feedback Report are then scaled by dividing each of them by R.  For\n   example,
      if the translation process combines two RTP packets into\n   one, then numOrig
      will be twice numTrans, giving R=0.5, and the\n   counters in the translated
      RTCP ECN feedback packet will be twice\n   those in the original.\n   The ratio,
      R, may have a value that leads to non-integer multiples of\n   the counters
      when translating the RTCP packet.  For example, a Voice\n   over IP (VoIP) translator
      that combines two adjacent RTP packets into\n   one if they contain active speech
      data, but passes comfort noise\n   packets unchanged, would have an R value
      of between 0.5 and 1.0\n   depending on the amount of active speech.  Since
      the counter values\n   in the translated RTCP report are integer values, rounding
      will be\n   necessary in this case.\n   When rounding counter values in the
      translated RTCP packet, the\n   translator should try to ensure that they sum
      to the number of RTP\n   packets in the pre-translation sequence number space
      (numOrig).  The\n   translator should also try to ensure that no non-zero counter
      is\n   rounded to a zero value, unless the pre-translated values are zero,\n
      \  since that will lose information that a particular type of event has\n   occurred.
      \ It is recognised that it may be impossible to satisfy both\n   of these constraints;
      in such cases, it is better to ensure that no\n   non-zero counter is mapped
      to a zero value, since this preserves\n   congestion adaptation and helps the
      RTCP-based ECN initiation\n   process.\n   One should be aware of the impact
      this type of translator has on the\n   measurement of packet duplication.  A
      translator performing\n   aggregation and most likely also an fragmenting translator
      will\n   suppress any duplication happening prior to itself.  Thus, the\n   reports
      and what is being scaled will only represent packet\n   duplication happening
      from the translator to the receiver reporting\n   on the flow.\n   It should
      be noted that scaling the RTCP counter values in this way\n   is meaningful
      only on the assumption that the level of congestion in\n   the network is related
      to the number of packets being sent.  This is\n   likely to be a reasonable
      assumption in the type of environment where\n   RTP translators that fragment
      or reassemble packets are deployed, as\n   their entire purpose is to change
      the number of packets being sent to\n   adapt to known limitations of the network,
      but is not necessarily\n   valid in general.\n   The rewritten RTCP ECN Feedback
      Report is sent from the other side of\n   the translator to that from which
      it arrived (as part of a compound\n   RTCP packet containing other translated
      RTCP packets, where\n   appropriate).\n"
    title: 8.2.  Fragmentation and Reassembly in Translators
  - contents:
    - "8.3.  Generating RTCP ECN Feedback in Media Transcoders\n   An RTP translator
      that acts as a media transcoder cannot directly\n   forward RTCP packets corresponding
      to the transcoded stream, since\n   those packets will relate to the non-transcoded
      stream and will not\n   be useful in relation to the transcoded RTP flow.  Such
      a transcoder\n   will need to interpose itself into the RTCP flow, acting as
      a proxy\n   for the receiver to generate RTCP feedback in the direction of the\n
      \  sender relating to the pre-transcoded stream and acting in place of\n   the
      sender to generate RTCP relating to the transcoded stream to be\n   sent towards
      the receiver.  This section describes how this proxying\n   is to be done for
      RTCP ECN feedback packets.  Section 7.2 of\n   [RFC3550] describes general procedures
      for other RTCP packet types.\n   An RTP translator acting as a media transcoder
      in this manner does\n   not have its own SSRC and hence is not visible to other
      entities at\n   the RTP layer.  RTCP ECN feedback packets and RTCP XR report
      blocks\n   for ECN summary information that are received from downstream relate\n
      \  to the translated stream and so must be processed by the translator\n   as
      if they were the original media source.  These reports drive the\n   congestion
      control loop and media adaptation between the translator\n   and the downstream
      receiver.  If there are multiple downstream\n   receivers, a logically separate
      transcoder instance must be used for\n   each receiver and must process RTCP
      ECN Feedback and Summary Reports\n   independently of the other transcoder instances.
      \ An RTP translator\n   acting as a media transcoder in this manner MUST NOT
      forward RTCP ECN\n   feedback packets or RTCP XR ECN Summary Reports from downstream\n
      \  receivers in the upstream direction.\n   An RTP translator acting as a media
      transcoder will generate RTCP\n   reports upstream towards the original media
      sender, based on the\n   reception quality of the original media stream at the
      translator.\n   The translator will run a separate congestion control loop and
      media\n   adaptation between itself and the media sender for each of its\n   downstream
      receivers and must generate RTCP ECN feedback packets and\n   RTCP XR ECN Summary
      Reports for that congestion control loop using\n   the SSRC of that downstream
      receiver.\n"
    title: 8.3.  Generating RTCP ECN Feedback in Media Transcoders
  - contents:
    - "8.4.  Generating RTCP ECN Feedback in Mixers\n   An RTP mixer terminates one-or-more
      RTP flows, combines them into a\n   single outgoing media stream, and transmits
      that new stream as a\n   separate RTP flow.  A mixer has its own SSRC and is
      visible to other\n   participants in the session at the RTP layer.\n   An ECN-aware
      RTP mixer must generate RTCP ECN feedback packets and\n   RTCP XR report blocks
      for ECN summary information relating to the RTP\n   flows it terminates, in
      exactly the same way it would if it were an\n   RTP receiver.  These reports
      form part of the congestion control loop\n   between the mixer and the media
      senders generating the streams it is\n   mixing.  A separate control loop runs
      between each sender and the\n   mixer.\n   An ECN-aware RTP mixer will negotiate
      and initiate the use of ECN on\n   the mixed RTP flows it generates and will
      accept and process RTCP ECN\n   Feedback Reports and RTCP XR report blocks for
      ECN relating to those\n   mixed flows as if it were a standard media sender.
      \ A congestion\n   control loop runs between the mixer and its receivers, driven
      in part\n   by the ECN reports received.\n   An RTP mixer MUST NOT forward RTCP
      ECN feedback packets or RTCP XR\n   ECN Summary Reports from downstream receivers
      in the upstream\n   direction.\n"
    title: 8.4.  Generating RTCP ECN Feedback in Mixers
  title: 8.  Processing ECN in RTP Translators and Mixers
- contents:
  - "9.  Implementation Considerations\n   To allow the use of ECN with RTP over UDP,
    an RTP implementation\n   desiring to support receiving ECN-controlled media streams
    must\n   support reading the value of the ECT bits on received UDP datagrams,\n
    \  and an RTP implementation desiring to support sending ECN-controlled\n   media
    streams must support setting the ECT bits in outgoing UDP\n   datagrams.  The
    standard Berkeley sockets API pre-dates the\n   specification of ECN and does
    not provide the functionality that is\n   required for this mechanism to be used
    with UDP flows, making this\n   specification difficult to implement portably.\n"
  title: 9.  Implementation Considerations
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  SDP Attribute Registration\n   Following the guidelines in [RFC4566],
      the IANA has registered one\n   new media-level SDP attribute:\n   o  Contact
      name, email address and telephone number: Authors of RFC\n      6679\n   o  Attribute-name:
      ecn-capable-rtp\n   o  Type of attribute: media-level\n   o  Subject to charset:
      no\n   This attribute defines the ability to negotiate the use of ECT (ECN-\n
      \  capable transport) for RTP flows running over UDP/IP.  This attribute\n   is
      put in the SDP offer if the offering party wishes to receive an\n   ECT flow.
      \ The answering party then includes the attribute in the\n   answer if it wishes
      to receive an ECT flow.  If the answerer does not\n   include the attribute,
      then ECT MUST be disabled in both directions.\n"
    title: 10.1.  SDP Attribute Registration
  - contents:
    - "10.2.  RTP/AVPF Transport-Layer Feedback Message\n   The IANA has registered
      one new RTP/AVPF Transport-Layer Feedback\n   Message in the table of FMT values
      for RTPFB Payload Types [RFC4585]\n   as defined in Section 5.1:\n      Name:
      \         RTCP-ECN-FB\n      Long name:     RTCP ECN Feedback\n      Value:
      \        8\n      Reference:     RFC 6679\n"
    title: 10.2.  RTP/AVPF Transport-Layer Feedback Message
  - contents:
    - "10.3.  RTCP Feedback SDP Parameter\n   The IANA has registered one new SDP
      \"rtcp-fb\" attribute \"nack\"\n   parameter \"ecn\" in the SDP (\"ack\" and
      \"nack\" Attribute Values)\n   registry.\n      Value name:     ecn\n      Long
      name:      Explicit Congestion Notification\n      Usable with:    nack\n      Reference:
      \     RFC 6679\n"
    title: 10.3.  RTCP Feedback SDP Parameter
  - contents:
    - "10.4.  RTCP XR Report Blocks\n   The IANA has registered one new RTCP XR Block
      Type as defined in\n   Section 5.2:\n      Block Type: 13\n      Name:       ECN
      Summary Report\n      Reference:  RFC 6679\n"
    title: 10.4.  RTCP XR Report Blocks
  - contents:
    - "10.5.  RTCP XR SDP Parameter\n   The IANA has registered one new RTCP XR SDP
      Parameter \"ecn-sum\" in\n   the \"RTCP XR SDP Parameters\" registry.\n      Parameter
      name      XR block (block type and name)\n      --------------      ------------------------------------\n
      \     ecn-sum             13  ECN Summary Report\n"
    title: 10.5.  RTCP XR SDP Parameter
  - contents:
    - "10.6.  STUN Attribute\n   A new STUN [RFC5389] attribute in the comprehension-optional
      range\n   under IETF Review (0x8000-0xFFFF) has been assigned to the ECN-CHECK\n
      \  STUN attribute (0x802D) defined in Section 7.2.2.  The STUN attribute\n   registry
      can currently be found at:\n   http://www.iana.org/assignments/stun-parameters.\n"
    title: 10.6.  STUN Attribute
  - contents:
    - "10.7.  ICE Option\n   A new ICE option \"rtp+ecn\" has been registered in the
      \"ICE Options\"\n   registry created by [RFC6336].\n"
    title: 10.7.  ICE Option
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   The use of ECN with RTP over UDP as specified
    in this document has\n   the following known security issues that need to be considered.\n
    \  External threats to the RTP and RTCP traffic:\n   Denial of Service affecting
    RTCP:  An attacker that can modify the\n      traffic between the media sender
    and a receiver can achieve either\n      of two things: 1) report a lot of packets
    as being congestion\n      experience marked, thus forcing the sender into a congestion\n
    \     response; or 2) ensure that the sender disables the usage of ECN\n      by
    reporting failures to receive ECN by changing the counter\n      fields.  This
    can also be accomplished by injecting false RTCP\n      packets to the media sender.
    \ Reporting a lot of ECN-CE-marked\n      traffic is likely the more efficient
    denial-of-service tool as\n      that may likely force the application to use
    the lowest possible\n      bitrates.  The prevention against an external threat
    is to\n      integrity protect the RTCP feedback information and authenticate\n
    \     the sender.\n   Information leakage:  The ECN feedback mechanism exposes
    the\n      receiver's perceived packet loss and the packets it considers to\n
    \     be ECN-CE marked.  This is mostly not considered sensitive\n      information.
    \ If it is considered sensitive, the RTCP feedback\n      should be encrypted.\n
    \  Changing the ECN bits:  An on-path attacker that sees the RTP packet\n      flow
    from sender to receiver and who has the capability to change\n      the packets
    can rewrite ECT into ECN-CE, thus leading to erroneous\n      congestion response
    in the sender or receiver.  This denial of\n      service against the media quality
    in the RTP session is impossible\n      for an endpoint to protect itself against.
    \ Only network\n      infrastructure nodes can detect this illicit re-marking.
    \ It will\n      be mitigated by turning off ECN; however, if the attacker can\n
    \     modify its response to drop packets, the same vulnerability exist.\n   Denial
    of Service affecting the session setup signalling:  If an\n      attacker can
    modify the session signalling, it can prevent the\n      usage of ECN by removing
    the signalling attributes used to\n      indicate that the initiator is capable
    and willing to use ECN with\n      RTP/UDP.  This attack can be prevented by authentication
    and\n      integrity protection of the signalling.  We do note that any\n      attacker
    that can modify the signalling has more interesting\n      attacks they can perform
    than prevent the usage of ECN, like\n      inserting itself as a middleman in
    the media flows enabling wire-\n      tapping also for an off-path attacker.\n
    \  Threats that exist from misbehaving senders or receivers:\n   Receivers cheating:
    \ A receiver may attempt to cheat and fail to\n      report reception of ECN-CE-marked
    packets.  The benefit for a\n      receiver cheating in its reporting would be
    to get an unfair\n      bitrate share across the resource bottleneck.  It is far
    from\n      certain that a receiver would be able to get a significant larger\n
    \     share of the resources.  That assumes a high enough level of\n      aggregation
    that there are flows to acquire shares from.  The risk\n      of cheating is that
    failure to react to congestion results in\n      packet loss and increased path
    delay.\n   Receivers misbehaving:  A receiver may prevent the usage of ECN in
    an\n      RTP session by reporting itself as non-ECN capable, forcing the\n      sender
    to turn off usage of ECN.  In a point-to-point scenario,\n      there is little
    incentive to do this as it will only affect the\n      receiver, thus failing
    to utilise an optimisation.  For multi-\n      party sessions, some motivation
    exists for why a receiver would\n      misbehave as it can prevent the other receivers
    from using ECN.\n      As an insider into the session, it is difficult to determine
    if a\n      receiver is misbehaving or simply incapable, making it basically\n
    \     impossible in the incremental deployment phase of ECN for RTP\n      usage
    to determine this.  If additional information about the\n      receivers and the
    network is known, it might be possible to deduce\n      that a receiver is misbehaving.
    \ If it can be determined that a\n      receiver is misbehaving, the only response
    is to exclude it from\n      the RTP session and ensure that it no longer has
    any valid\n      security context to affect the session.\n   Misbehaving senders:
    \ The enabling of ECN gives the media packets a\n      higher degree of probability
    to reach the receiver compared to\n      not-ECT-marked ones on an ECN-capable
    path.  However, this is no\n      magic bullet, and failure to react to congestion
    will most likely\n      only slightly delay a network buffer over-run, in which
    its\n      session also will experience packet loss and increased delay.\n      There
    is some possibility that the media sender's traffic will\n      push other traffic
    out of the way without being affected too\n      negatively.  However, we do note
    that a media sender still needs\n      to implement congestion control functions
    to prevent the media\n      from being badly affected by congestion events.  Thus,
    the\n      misbehaving sender is getting an unfair share.  This can only be\n
    \     detected and potentially prevented by network monitoring and\n      administrative
    entities.  See Section 7 of [RFC3168] for more\n      discussion of this issue.\n
    \  We note that the endpoint security functions needed to prevent an\n   external
    attacker from interfering with the signalling are source\n   authentication and
    integrity protection.  To prevent information\n   leakage from the feedback packets,
    encryption of the RTCP is also\n   needed.  For RTP, multiple possible solutions
    exist depending on the\n   application context.  Secure RTP (SRTP) [RFC3711] does
    satisfy the\n   requirement to protect this mechanism.  Note, however, that when\n
    \  using SRTP in group communication scenarios, different parties might\n   share
    the same security context; in this case, the authentication\n   mechanism only
    shows that one of those parties is involved, not\n   necessarily which one.  IPsec
    [RFC4301] and DTLS [RFC6347] can also\n   provide the necessary security functions.\n
    \  The signalling protocols used to initiate an RTP session also need to\n   be
    source authenticated and integrity protected to prevent an\n   external attacker
    from modifying any signalling.  An appropriate\n   mechanism to protect the used
    signalling needs to be used.  For SIP/\n   SDP, ideally Secure MIME (S/MIME) [RFC5751]
    would be used.  However,\n   with the limited deployment, a minimal mitigation
    strategy is to\n   require use of SIPS (SIP over TLS) [RFC3261] [RFC5630] to at
    least\n   accomplish hop-by-hop protection.\n   We do note that certain mitigation
    methods will require network\n   functions.\n"
  title: 11.  Security Considerations
- contents:
  - "12.  Examples of SDP Signalling\n   This section contains a few different examples
    of the signalling\n   mechanism defined in this specification in an SDP context.
    \ If there\n   are discrepancies between these examples and the specification
    text,\n   the specification text is definitive.\n"
  - contents:
    - "12.1.  Basic SDP Offer/Answer\n   This example is a basic offer/answer SDP
      exchange, assumed done by\n   SIP (not shown).  The intention is to establish
      a basic audio session\n   point-to-point between two users.\n   The Offer:\n
      \     v=0\n      o=jdoe 3502844782 3502844782 IN IP4 10.0.1.4\n      s=VoIP
      call\n      i=SDP offer for VoIP call with ICE and ECN for RTP\n      b=AS:128\n
      \     b=RR:2000\n      b=RS:2500\n      a=ice-pwd:YH75Fviy6338Vbrhrlp8Yh\n      a=ice-ufrag:9uB6\n
      \     a=ice-options:rtp+ecn\n      t=0 0\n      m=audio 45664 RTP/AVPF 97 98
      99\n      c=IN IP4 192.0.2.3\n      a=rtpmap:97 G719/48000/1\n      a=fmtp:97
      maxred=160\n      a=rtpmap:98 AMR-WB/16000/1\n      a=fmtp:98 octet-align=1;
      mode-change-capability=2\n      a=rtpmap:99 PCMA/8000/1\n      a=maxptime:160\n
      \     a=ptime:20\n      a=ecn-capable-rtp: ice rtp ect=0 mode=setread\n      a=rtcp-fb:*
      nack ecn\n      a=rtcp-fb:* trr-int 1000\n      a=rtcp-xr:ecn-sum\n      a=rtcp-rsize\n
      \     a=candidate:1 1 UDP 2130706431 10.0.1.4 8998 typ host\n      a=candidate:2
      1 UDP 1694498815 192.0.2.3 45664 typ srflx raddr\n         10.0.1.4 rport 8998\n
      \  This SDP offer presents a single media stream with 3 media payload\n   types.
      \ It proposes to use ECN with RTP, with the ICE-based\n   initialisation being
      preferred over the RTP/RTCP one.  Leap of faith\n   is not suggested to be used.
      \ The offerer is capable of both setting\n   and reading the ECN bits.  In addition,
      the use of both the RTCP ECN\n   feedback packet and the RTCP XR ECN Summary
      Report are supported.\n   ICE is also proposed with two candidates.  It also
      supports reduced-\n   size RTCP and can use it.\n   The Answer:\n      v=0\n
      \     o=jdoe 3502844783 3502844783 IN IP4 198.51.100.235\n      s=VoIP call\n
      \     i=SDP offer for VoIP call with ICE and ECN for RTP\n      b=AS:128\n      b=RR:2000\n
      \     b=RS:2500\n      a=ice-pwd:asd88fgpdd777uzjYhagZg\n      a=ice-ufrag:8hhY\n
      \     a=ice-options:rtp+ecn\n      t=0 0\n      m=audio 53879 RTP/AVPF 97 99\n
      \     c=IN IP4 198.51.100.235\n      a=rtpmap:97 G719/48000/1\n      a=fmtp:97
      maxred=160\n      a=rtpmap:99 PCMA/8000/1\n      a=maxptime:160\n      a=ptime:20\n
      \     a=ecn-capable-rtp: ice ect=0 mode=readonly\n      a=rtcp-fb:* nack ecn\n
      \     a=rtcp-fb:* trr-int 1000\n      a=rtcp-xr:ecn-sum\n      a=candidate:1
      1 UDP 2130706431 198.51.100.235 53879 typ host\n   The answer confirms that
      only one media stream will be used.  One RTP\n   payload type was removed.  ECN
      capability was confirmed, and the\n   initialisation method will be ICE.  However,
      the answerer is only\n   capable of reading the ECN bits, which means that ECN
      can only be\n   used for RTP flowing from the offerer to the answerer.  ECT
      always\n   set to 0 will be used in both directions.  Both the RTCP ECN feedback\n
      \  packet and the RTCP XR ECN Summary Report will be used.  Reduced-size\n   RTCP
      will not be used as the answerer has not indicated support for\n   it in the
      answer.\n"
    title: 12.1.  Basic SDP Offer/Answer
  - contents:
    - "12.2.  Declarative Multicast SDP\n   The session below describes an Any-Source
      Multicast using a session\n   with a single media stream.\n      v=0\n      o=jdoe
      3502844782 3502844782 IN IP4 198.51.100.235\n      s=Multicast SDP session using
      ECN for RTP\n      i=Multicasted audio chat using ECN for RTP\n      b=AS:128\n
      \     t=3502892703 3502910700\n      m=audio 56144 RTP/AVPF 97\n      c=IN IP4
      233.252.0.212/127\n      a=rtpmap:97 g719/48000/1\n      a=fmtp:97 maxred=160\n
      \     a=maxptime:160\n      a=ptime:20\n      a=ecn-capable-rtp: rtp mode=readonly;
      ect=0\n      a=rtcp-fb:* nack ecn\n      a=rtcp-fb:* trr-int 1500\n      a=rtcp-xr:ecn-sum\n
      \  This is a declarative SDP example and indicates required\n   functionality
      in the consumer of the SDP.  The initialisation method\n   required is the RTP/RTCP-based
      one, indicated by the \"a=ecn-capable-\n   rtp: rtp ...\" line.  Receivers are
      required to be able to read ECN\n   marks (\"mode=readonly\"), and the ECT value
      is recommended to be set\n   to 0 always (\"ect=0\").  The ECN usage in this
      session requires both\n   ECN feedback and RTCP XR ECN Summary Reports, and
      their use is\n   indicated through the \"a=rtcp-fb:\" and \"a=rtcp-xr:ecn-sum\"
      lines.\n"
    title: 12.2.  Declarative Multicast SDP
  title: 12.  Examples of SDP Signalling
- contents:
  - "13.  Acknowledgments\n   The authors wish to thank the following individuals
    for their reviews\n   and comments: Thomas Belling, Bob Briscoe, Roni Even, Kevin
    P.\n   Flemming, Tomas Frankkila, Christian Groves, Christer Holmgren,\n   Cullen
    Jennings, Tom Van Caenegem, Simo Veikkolainen, Bill Ver Steeg,\n   Dan Wing, Qin
    Wu, and Lei Zhu.\n"
  title: 13.  Acknowledgments
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n
      \             of Explicit Congestion Notification (ECN) to IP\",\n              RFC
      3168, September 2001.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick,
      R., and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n
      \             Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3611]  Friedman,
      T., Caceres, R., and A. Clark, \"RTP Control\n              Protocol Extended
      Reports (RTCP XR)\", RFC 3611,\n              November 2003.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,
      RFC 3629, November 2003.\n   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins,
      \"SDP: Session\n              Description Protocol\", RFC 4566, July 2006.\n
      \  [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5245]  Rosenberg, J., \"Interactive
      Connectivity Establishment\n              (ICE): A Protocol for Network Address
      Translator (NAT)\n              Traversal for Offer/Answer Protocols\", RFC
      5245,\n              April 2010.\n   [RFC5348]  Floyd, S., Handley, M., Padhye,
      J., and J. Widmer, \"TCP\n              Friendly Rate Control (TFRC): Protocol
      Specification\",\n              RFC 5348, September 2008.\n   [RFC5389]  Rosenberg,
      J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session Traversal
      Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n   [RFC6336]
      \ Westerlund, M. and C. Perkins, \"IANA Registry for\n              Interactive
      Connectivity Establishment (ICE) Options\",\n              RFC 6336, July 2011.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [RFC1112]  Deering, S., \"Host extensions
      for IP multicasting\", STD 5,\n              RFC 1112, August 1989.\n   [RFC2762]
      \ Rosenberg, J. and H. Schulzrinne, \"Sampling of the Group\n              Membership
      in RTP\", RFC 2762, February 2000.\n   [RFC2974]  Handley, M., Perkins, C.,
      and E. Whelan, \"Session\n              Announcement Protocol\", RFC 2974, October
      2000.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
      \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n
      \  [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with
      Session Description Protocol (SDP)\", RFC 3264,\n              June 2002.\n
      \  [RFC3540]  Spring, N., Wetherall, D., and D. Ely, \"Robust Explicit\n              Congestion
      Notification (ECN) Signaling with Nonces\",\n              RFC 3540, June 2003.\n
      \  [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n              Video
      Conferences with Minimal Control\", STD 65, RFC 3551,\n              July 2003.\n
      \  [RFC3569]  Bhattacharyya, S., \"An Overview of Source-Specific\n              Multicast
      (SSM)\", RFC 3569, July 2003.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund,
      M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time Transport
      Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4301]  Kent,
      S. and K. Seo, \"Security Architecture for the\n              Internet Protocol\",
      RFC 4301, December 2005.\n   [RFC4340]  Kohler, E., Handley, M., and S. Floyd,
      \"Datagram\n              Congestion Control Protocol (DCCP)\", RFC 4340, March
      2006.\n   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n
      \             \"Extended RTP Profile for Real-time Transport Control\n              Protocol
      (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585,\n              July 2006.\n   [RFC4588]
      \ Rey, J., Leon, D., Miyazaki, A., Varsa, V., and R.\n              Hakenberg,
      \"RTP Retransmission Payload Format\", RFC 4588,\n              July 2006.\n
      \  [RFC4607]  Holbrook, H. and B. Cain, \"Source-Specific Multicast for\n              IP\",
      RFC 4607, August 2006.\n   [RFC4960]  Stewart, R., \"Stream Control Transmission
      Protocol\",\n              RFC 4960, September 2007.\n   [RFC5117]  Westerlund,
      M. and S. Wenger, \"RTP Topologies\", RFC 5117,\n              January 2008.\n
      \  [RFC5124]  Ott, J. and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time
      Transport Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\",
      RFC 5124, February 2008.\n   [RFC5506]  Johansson, I. and M. Westerlund, \"Support
      for Reduced-Size\n              Real-Time Transport Control Protocol (RTCP):
      Opportunities\n              and Consequences\", RFC 5506, April 2009.\n   [RFC5630]
      \ Audet, F., \"The Use of the SIPS URI Scheme in the Session\n              Initiation
      Protocol (SIP)\", RFC 5630, October 2009.\n   [RFC5751]  Ramsdell, B. and S.
      Turner, \"Secure/Multipurpose Internet\n              Mail Extensions (S/MIME)
      Version 3.2 Message\n              Specification\", RFC 5751, January 2010.\n
      \  [RFC5760]  Ott, J., Chesterfield, J., and E. Schooler, \"RTP Control\n              Protocol
      (RTCP) Extensions for Single-Source Multicast\n              Sessions with Unicast
      Feedback\", RFC 5760, February 2010.\n   [RFC6189]  Zimmermann, P., Johnston,
      A., and J. Callas, \"ZRTP: Media\n              Path Key Agreement for Unicast
      Secure RTP\", RFC 6189,\n              April 2011.\n   [RFC6347]  Rescorla,
      E. and N. Modadugu, \"Datagram Transport Layer\n              Security Version
      1.2\", RFC 6347, January 2012.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Authors' Addresses\n   Magnus Westerlund\n   Ericsson\n   Farogatan 6\n   SE-164
    80 Kista\n   Sweden\n   Phone: +46 10 714 82 87\n   EMail: magnus.westerlund@ericsson.com\n
    \  Ingemar Johansson\n   Ericsson\n   Laboratoriegrand 11\n   SE-971 28 Lulea\n
    \  Sweden\n   Phone: +46 73 0783289\n   EMail: ingemar.s.johansson@ericsson.com\n
    \  Colin Perkins\n   University of Glasgow\n   School of Computing Science\n   Glasgow
    \ G12 8QQ\n   United Kingdom\n   EMail: csp@csperkins.org\n   Piers O'Hanlon\n
    \  University of Oxford\n   Oxford Internet Institute\n   1 St Giles\n   Oxford
    \ OX1 3JS\n   United Kingdom\n   EMail: piers.ohanlon@oii.ox.ac.uk\n   Ken Carlberg\n
    \  G11\n   1600 Clarendon Blvd\n   Arlington, VA\n   USA\n   EMail: carlberg@g11.org.uk\n"
  title: Authors' Addresses
