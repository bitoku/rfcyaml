- title: __initial_text__
  contents:
  - '        PCMAIL: A Distributed Mail System for Personal Computers

    '
- title: 1. Status of this Document
  contents:
  - "1. Status of this Document\n   This document is a preliminary discussion of the\
    \ design of a\n   personal-computer-based distributed mail system.  It is published\
    \ for\n   discussion and comment, and does not constitute a standard.  As the\n\
    \   proposal may change, implementation of this document is not advised.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   Pcmail is a distributed mail system that provides mail service\
    \ to an\n   arbitrary number of users, each of which owns one or more personal\n\
    \   computers (PCs).  The system is divided into two halves.  The first\n   consists\
    \ of a single entity called the \"repository\".  The repository\n   is a storage\
    \ center for incoming mail.  Mail for a Pcmail user can\n   arrive externally\
    \ from the Internet or internally from other\n   repository users.  The repository\
    \ also maintains a stable copy of\n   each user's mail state (this will hereafter\
    \ be referred to as the\n   user's \"global mail state\").  The repository is\
    \ therefore typically a\n   computer with a large amount of disk storage.\n  \
    \ The second half of Pcmail consists of one or more \"clients\". Each\n   Pcmail\
    \ user may have an arbitrary number of clients, which are\n   typically PCs. \
    \ The clients provide a user with a friendly means of\n   accessing the user's\
    \ global mail state over a network. In order to\n   make the interaction between\
    \ the repository and a user's clients more\n   efficient, each client maintains\
    \ a local copy of its user's global\n   mail state, called the \"local mail state\"\
    . Since clients are PCs,\n   they may not always have access to a network (and\
    \ therefore to the\n   global mail state in the repository).  This means that\
    \ the local and\n   global mail states may not be identical all the time, making\n\
    \   synchronization between local and global mail states necessary.\n   Clients\
    \ communicate with the repository via the Distributed Mail\n   System Protocol\
    \ (DMSP); the specification for this protocol appears\n   in appendix A. The repository\
    \ is therefore a DMSP server in addition\n   to a mail end-site and storage facility.\
    \  DMSP provides a complete\n   set of mail manipulation operations (\"send a\
    \ message\", \"delete a\n   message\", \"print a message\", etc.).  DMSP also\
    \ provides special\n   operations to allow easy synchronization between a user's\
    \ global mail\n   state and his clients' local mail states.  Particular attention\
    \ has\n   been paid to the way in which DMSP operations act on a user's mail\n\
    \   state.  All DMSP operations are atomic (that is, they are guaranteed\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   either to succeed completely, or fail completely).  A client can be\n\
    \   abruptly disconnected from the repository without leaving\n   inconsistent\
    \ or damaged mail states.\n   Pcmail is a mail system for PCs.  Its design has\
    \ therefore been\n   heavily influenced by several characteristics unique to PCs.\
    \ First,\n   PCs are relatively inexpensive.  This means that people may own more\n\
    \   than one PC, perhaps putting one in an office and one at home.\n   Second,\
    \ PCs are portable.  Most PCs can be packed up and moved in the\n   back seat\
    \ of an automobile, and a few are truly portable--about the\n   size of a briefcase--and\
    \ battery-powered.  Finally, PCs are\n   resource-poor.  A typical PC has a small\
    \ amount (typically less than\n   one megabyte) of main memory and little in the\
    \ way of mass storage\n   (floppy-disk drives that can access perhaps 360 kilobytes\
    \ of data).\n   Because PCs are relatively inexpensive and people may own more\
    \ than\n   one, Pcmail has been designed to allow users multiple access points\n\
    \   to their mail state.  Each Pcmail user can have several client PCs,\n   each\
    \ of which can access the user's mail by communicating with the\n   repository\
    \ over a network.  The client PCs all maintain local copies\n   of the user's\
    \ global mail state, and synchronize the local and global\n   states using DMSP.\n\
    \   It is possible, even likely, that many PCs will only infrequently be\n   connected\
    \ to a network (and thus be able to communicate with the\n   repository).  The\
    \ Pcmail design therefore allows two modes of\n   communication between repository\
    \ and client. \"Interactive mode\" is\n   used when the client PC is always connected\
    \ to the network.  Any\n   changes to the client's local mail state are immediately\
    \ also made to\n   the repository's global mail state, and any incoming mail is\n\
    \   immediately transmitted from repository to client.  \"Batch mode\" is\n  \
    \ used by clients that have infrequent access to the repository.  Users\n   manipulate\
    \ the client's local mail state, queueing the changes as\n   \"actions\".  When\
    \ next connected to the repository, the actions are\n   transmitted, and the client's\
    \ local mail state is synchronized with\n   the repository's global mail state.\n\
    \   Finally, the Pcmail design minimizes the effect of using a\n   resource-poor\
    \ PC as a client.  Mail messages are split into two\n   parts:  a \"descriptor\"\
    \ and a \"body\".  The descriptor is a capsule\n   message summary whose length\
    \ (typically about 100 bytes) is\n   independent of the actual message length.\
    \  The body is the actual\n   message text, including an RFC-822 standard message\
    \ header. While the\n   client may not have enough storage to hold a complete\
    \ set of\n   messages, it can always hold a complete set of descriptors, thus\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   providing the user with at least a summary of his mail state.\n  \
    \ Message bodies can be pulled over from the repository as client\n   storage\
    \ becomes available.\n   The remainder of this document is broken up into the\
    \ following\n   sections: first, there is a detailed description of the repository\n\
    \   architecture.  This is followed by a description of DMSP, its\n   operations,\
    \ and motivation for its design.  A third section describes\n   client architecture.\
    \  Another section describes a typical DMSP\n   session between the repository\
    \ and a client.  The final section\n   discusses the current Pcmail implementation.\n"
- title: 3. Repository Architecture
  contents:
  - "3. Repository Architecture\n   A machine running repository code is typically\
    \ a medium-to-large size\n   computer with a large amount of disk storage.  It\
    \ must also be a\n   permanent network site, since client PCs communicate with\
    \ the\n   repository over a network, and rely on the repository's being\n   available\
    \ at any time.\n   The repository must perform several tasks.  First, and most\n\
    \   importantly, the repository must efficiently manage a potentially\n   large\
    \ number of users and their mail states.  Mail must be reliably\n   stored in\
    \ a manner that makes it easy for multiple clients to access\n   the global mail\
    \ state and synchronize their local mail states with\n   the global state.  Second,\
    \ the repository must be able to communicate\n   efficiently with its clients.\
    \  The protocol used to communicate\n   between repository and client must be\
    \ reliable and must provide\n   operations that (1) allow typical mail manipulation,\
    \ and (2) support\n   Pcmail's distributed nature by allowing efficient synchronization\n\
    \   between local and global mail states.  Third, the repository must be\n   able\
    \ to process mail from sources outside the repository's own user\n   community\
    \ (a primary outside source is the Internet).  Internet mail\n   will arrive with\
    \ a NIC RFC-822 standard message header; the recipient\n   names in the message\
    \ must be properly translated from the RFC-822\n   namespace into the repository's\
    \ namespace.\n   3.1. Management of user mail state\n      Pcmail divides the\
    \ world into a community of users.  Each user is\n      referred to by a user\
    \ object.  A user object consists of a unique\n      name, a password (which the\
    \ user's clients use to authenticate\n      themselves to the repository before\
    \ manipulating a global mail\n      state), a list of \"client objects\" describing\
    \ those clients\n      belonging to the user, and a list of \"mailbox objects\"\
    .\n      A client object consists of a unique name and a status.  A user\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      has one client object for every client he owns; a client cannot\n\
    \      communicate with the repository unless it has a corresponding\n      client\
    \ object in a user's client list.  Client objects therefore\n      serve as a\
    \ means of identifying valid clients to the repository.\n      Client objects\
    \ also allow the repository to manage local and\n      global mail state synchronization;\
    \ the repository associates with\n      every global state change a list of client\
    \ objects corresponding\n      to those clients which have not recorded the global\
    \ change\n      locally.\n      A client's status is either \"active\" or \"inactive\"\
    .  The\n      repository defines inactive clients as those clients which have\n\
    \      not connected to the repository within a set time period (one week\n  \
    \    in the current Pcmail implementation).  When an inactive client\n      does\
    \ connect to the repository, the repository notifies the client\n      that it\
    \ has been \"reset\".  The repository resets a client by\n      marking all messages\
    \ in the user's mail state as having changed\n      since the client last logged\
    \ in.  When the client next\n      synchronizes with the repository, it will receive\
    \ a complete copy\n      of the repository's global mail state.  A forced reset\
    \ is\n      performed on the assumption that enough global state changes occur\n\
    \      in a week that the client would spend too much time performing an\n   \
    \   ordinary local state-global state synchronization.\n      Messages are stored\
    \ in mailboxes.  Users can have an arbitrary\n      number of mailboxes, which\
    \ serve both to store and to categorize\n      messages.  Since there can be any\
    \ number of mailboxes, messages\n      can be categorized to an arbitrarily fine\
    \ degree.  A mailbox\n      object both names a mailbox and describes its contents.\
    \ Mailboxes\n      are identified by a unique name; their contents are described\
    \ by\n      three numeric values.  The first is the total number of messages\n\
    \      in the mailbox, the second is the total number of unseen messages\n   \
    \   (messages that have never been seen by the user via any client) in\n     \
    \ the mailbox, and the third is the next available message unique\n      identifier\
    \ (UID).  This information is stored in the mailbox\n      object to allow clients\
    \ to get a summary of a mailbox's contents\n      without having to read all the\
    \ messages within the mailbox.\n      Associated with each mailbox are an arbitrary\
    \ number of message\n      objects.  Each message is broken into two parts--a\
    \ \"descriptor\",\n      which contains a summary of useful information about\
    \ the message,\n      and a \"body\", which is the message text itself, including\
    \ NIC\n      RFC-822 message header.  Each message is assigned a monotonically\n\
    \      increasing UID based on the owning mailbox's next available UID.\n    \
    \  Each mailbox has its own set of UIDs which, together with the\n      mailbox\
    \ name and user name, uniquely identify the message within\n      the repository.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      A descriptor holds the following information: the message UID,\
    \ the\n      message size in bytes and lines, four \"useful\" message header\n\
    \      fields (the \"date:\", \"to:\", \"from:\", and \"subject:\" fields), and\n\
    \      two groups of eight flags each.  The first group of flags is\n      system\
    \ defined.  These flags mark whether the message has never\n      been seen, whether\
    \ it has been deleted, whether it is a forwarded\n      message, and whether the\
    \ message has been expunged. The remaining\n      four flags are reserved for\
    \ future use.  The second group of flags\n      is user defined.  The repository\
    \ never examines these flags\n      internally; instead they can be used by application\
    \ programs\n      running on the clients.  Descriptors serve as an efficient means\n\
    \      for clients to get message information without having to waste\n      time\
    \ retrieving the message from the repository.\n   3.2. Repository-to-RFC-822 name\
    \ translation\n      \"Address objects\" provide the repository with a means for\n\
    \      translating the RFC-822-style mail addresses in Internet messages\n   \
    \   into repository names.  The repository provides its own namespace\n      for\
    \ message identification.  Any message is uniquely identified by\n      the triple\
    \ (user-name, mailbox-name, message-UID).  Any mailbox is\n      uniquely identified\
    \ by the pair (user-name, mailbox-name).  Thus\n      to send a message between\
    \ two repository users, a user would\n      address the message to (user-name,\
    \ mailbox-name).  The repository\n      would deliver the message to the named\
    \ user and mailbox, and\n      assign it a UID based on the requested mailbox's\
    \ next available\n      UID.\n      In order to translate between RFC-822-style\
    \ mail addresses and\n      repository names, the repository maintains a list\
    \ of address\n      objects.  Each address object is an association between an\n\
    \      RFC-822-style address and a (user-name, mailbox-name) pair.  When\n   \
    \   mail arrives from the Internet, the repository can use the address\n     \
    \ object list to translate the recipients into (user-name,\n      mailbox-name)\
    \ pairs and route the message correctly.\n"
- title: '4. Communication Between Repository and Client: DMSP'
  contents:
  - "4. Communication Between Repository and Client: DMSP\n   The Distributed Mail\
    \ System Protocol (DMSP) is a block-stream\n   protocol that defines and manipulates\
    \ the objects mentioned in the\n   previous section.  It has been designed to\
    \ work with Pcmail's\n   single-repository/multiple-client model of the world.\
    \  In addition to\n   providing typical mail manipulation functions, DMSP provides\n\
    \   functions that allow easy synchronization of global and local mail\n   states.\n\
    \   DMSP is implemented on top of the Unified Stream Protocol (USP),\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   specified in MIT-LCS Technical Memo 255.  USP provides a reliable\n\
    \   virtual circuit block-stream connection between two machines.  USP\n   defines\
    \ a basic set of data types (\"strings\", \"integers\", \"booleans\",\n   etc.).\
    \  Instances of these data types are grouped in an\n   application-defined order\
    \ to form USP blocks.  Each USP block is\n   defined by a numeric \"block type\"\
    ; a USP application can thus\n   interpret a block's contents based on knowledge\
    \ of the block's type.\n   DMSP consists of a set of operations, each of which\
    \ is comprised of\n   one or more different USP blocks that are sent between repository\
    \ and\n   client.\n   A DMSP session proceeds as follows: a client begins the\
    \ session with\n   the repository by opening a USP connection to the repository's\n\
    \   machine.  The client then authenticates both itself and its user to\n   the\
    \ repository with a \"login\" operation.  If the authentication is\n   successful,\
    \ the user performs an arbitrary number of DMSP operations\n   before ending the\
    \ session with a \"logout\" operation (at which time\n   the connection is closed\
    \ by the repository).\n   Because DMSP can manipulate a pair of mail states (local\
    \ and global)\n   at once, it is extremely important that all DMSP operations\
    \ are\n   atomic.  Failure of any DMSP operation must leave both states in a\n\
    \   consistent, known state.  For this reason, a DMSP operation is\n   defined\
    \ to have failed unless an explicit acknowledgement is received\n   by the operation\
    \ initiator.  This acknowledgement can take one of two\n   basic forms, based\
    \ on two broad categories that all DMSP operations\n   fall into.  First, an operation\
    \ can be a request to perform some mail\n   state modification, in which case\
    \ the repository will acknowledge the\n   request with either an \"ok\" or a \"\
    failure\" (in which case the reason\n   for the failure is also returned).  Second,\
    \ an operation can be a\n   request for information, in which case the request\
    \ is acknowledged by\n   the repository's providing the information to the client.\
    \  Operations\n   such as \"delete a message\" fall into the first category; operations\n\
    \   like \"send a list of mailboxes\" fall into the second category.\n   Following\
    \ are a list of DMSP operations by object type, their block\n   types and arguments,\
    \ and their expected acknowledgement block types.\n   Each DMSP block has a different\
    \ number; the first digit of each block\n   type defines the object being manipulated:\
    \ Operations numbered 5xx\n   are general, operations numbered 6xx are user operations,\
    \ operations\n   numbered 7xx are client operations, operations numbered 8xx are\n\
    \   mailbox and address operations, and operations numbered 11xx are\n   message\
    \ operations.\n   Blocks marked \"=>\" flow from client to repository; blocks\
    \ marked \"<=\"\n   flow from repository to client.  If more than one block can\
    \ be sent,\n   the choices are delimited by \"or\" (\"|\") characters.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   For clarity, each block type is put in a human-\n   understandable\
    \ form.  The block number is followed by an operation\n   name; this name is never\
    \ transmitted as part of a USP block.  Block\n   arguments are identified by name\
    \ and type, and enclosed in square\n   brackets.  \"Record\" data types are described\
    \ by a list of\n   \"field-name:field-type\" pairs contained in square brackets.\
    \  \"Choice\"\n   data types are described by a list of \"tag:tag-name\" pairs\
    \ contained\n   in square brackets.  USP data types are abbreviated as follows:\n\
    \   Primitive data types:\n      - string: str\n      - cardinal: card\n     \
    \ - long-cardinal: Lcard\n      - integer: int\n      - long-integer: Lint\n \
    \     - boolean: bool\n   Compound data types:\n      - sequence: SEQ\n      -\
    \ array: AR\n      - record: REC\n      - choice: CH\n   4.1. General operations\n\
    \      The first group of DMSP operations perform general functions that\n   \
    \   operate on no one particular class of object.  DMSP has six\n      general\
    \ operations, which provide the following services:\n      If either a client\
    \ or the repository thinks the other is\n      malfunctioning, they can send an\
    \ \"abort-request\".  An\n      abort-request is never acknowledged; after the\
    \ request is sent,\n      the sender immediately closes the USP connection and\
    \ returns\n      control to its application.\n         => 503 (abort-request)\
    \ [why:str]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      DMSP provides a limited remote debugging facility via the\n   \
    \   \"start-debug\" and \"end-debug\" operations.  When a client sends a\n   \
    \   \"start-debug\" request, the repository enables its idea of\n      remote-debugging.\
    \  The exact definition of remote debugging is\n      implementation dependent;\
    \ the current repository implementation\n      simply writes debugging information\
    \ to a special file.  The\n      \"end-debug\" request disables remote debugging.\n\
    \         => 504 (start-debug) []\n         <= 500 (ok) [] |\n            501\
    \ (failure) [why:str]\n         or\n         => 505 (end-debug) []\n         <=\
    \ 500 (ok) []\n      In order to prevent protocol version skew between clients\
    \ and the\n      repository, DMSP provides a \"send-version\" operation.  The\
    \ client\n      supplies its DMSP version number as an argument; the operation\n\
    \      succeeds if the supplied version number matches the repository's\n    \
    \  DMSP version number.  It fails if the two version numbers do not\n      match.\n\
    \         => 506 (send-version) [version-number:card]\n         <= 500 (ok) []\
    \ |\n            501 (failure) [why:str]\n      DMSP also provides clients with\
    \ the ability to send an arbitrary\n      text message to the repository.  The\
    \ \"log-message\" operation takes\n      as an argument a string of arbitrary\
    \ length; the repository\n      accepts the string; what is done with the string\
    \ is\n      implementation-dependent.\n         => 507 log-message[message:str]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str]\n      Finally,\
    \ users can send mail to other users via the \"send-message\"\n      operation.\
    \  The message must have an Internet-style header as\n      defined by NIC RFC-822.\
    \  The repository takes the message and\n      distributes it to the mailboxes\
    \ specified on the \"to:\", \"cc:\", and\n      \"bcc:\" fields of the message\
    \ header.  If one or more of the\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      mailboxes exists outside the repository's user community, the\n\
    \      repository is responsible for handing the message to a local SMTP\n   \
    \   server.\n      An OK block is sent from the repository only if the entire\
    \ message\n      was successfully transmitted.  If the message was destined for\
    \ the\n      Internet, the send-message operation is successful if the message\n\
    \      was successfully transmitted to the local SMTP server.\n         => 508\
    \ (send-message) [message:SEQ[str]]\n         <= 500 (ok) [] |\n            501\
    \ (failure) [why:str]\n   4.2. User operations\n      The next series of DMSP\
    \ operations manipulates user objects. The\n      most common of these operations\
    \ are \"login\" and \"logout\".  A\n      client must perform a login operation\
    \ before being able to access\n      a user's mail state.  A DMSP login block\
    \ contains five items: (1)\n      the user's name, (2) the user's password, (3)\
    \ the name of the\n      client performing the login, (4) a flag telling the repository\
    \ to\n      create a client object for the client if one does not exist, and\n\
    \      (5) a flag set to TRUE if the client wishes to operate in \"batch\n   \
    \   mode\" and FALSE if the client wishes to operate in \"interactive\"\n    \
    \  mode.  The flag value allows the repository to tune internal\n      parameters\
    \ for either mode of operation.\n      The repository can return either an OK\
    \ block (indicating\n      successful authentication), a FAILURE block (indicating\
    \ failed\n      authentication), or a FORCE-RESET block.  This last is sent if\
    \ the\n      client logging in has been marked as \"inactive\" by the repository\n\
    \      (clients are marked inactive if they have not connected to the\n      repository\
    \ in over a week).  The FORCE-RESET block indicates that\n      the client should\
    \ erase its local mail state and pull over a\n      complete version of the repository's\
    \ mail state. This is done on\n      the assumption that so many mail state changes\
    \ have been made in a\n      week that it would be inefficient to perform a normal\n\
    \      synchronization.\n         => 600 (login) [user:str, password:str, client:str,\n\
    \                         create-client-object?:bool,\n                      \
    \   batch-mode-flag:bool]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str] |\n            705 (force-client-reset) []\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      When a client is finished interacting with the repository, it\n\
    \      performs a logout operation.  This allows the repository to\n      perform\
    \ any necessary cleanup before closing the USP connection.\n         => 601 (logout)\
    \ []\n         <= 500 (ok) []\n      DMSP also provides \"add-user\" and \"remove-user\"\
    \ operations, which\n      allow system administrators to remotely add new users\
    \ to, and\n      remove users from, the repository.  These operations are\n  \
    \    privileged; the repository authenticates the user requesting the\n      operation\
    \ before performing an add-user or remove-user operation.\n      Both operations\
    \ require the name of the user to be added or\n      removed; the add-user operation\
    \ also requires a default password\n      to assign the new user.\n         =>\
    \ 602 (add-user) [user:str, password:str]\n         <= 500 (ok) [] |\n       \
    \     501 (failure) [why:str]\n         => 603 (remove-user) [user:str]\n    \
    \     <= 500 (ok) [] |\n            501 (failure) [why:str]\n      A user can\
    \ change his password via the \"set-password\" operation.\n      The operation\
    \ works much the same as the UNIX change-password\n      operation, taking as\
    \ arguments the user's current password and a\n      desired new password.  If\
    \ the current password given matches the\n      user's current password, the user's\
    \ current password is changed to\n      the new password given.\n         => 604\
    \ (set-password) [old-password:str,\n                                new-password:str]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   4.3. Client operations\n      DMSP provides four operations to manipulate\
    \ client objects. The\n      first, \"list-clients\", tells the repository to\
    \ send the user's\n      client list to the requesting client.  The list takes\
    \ the form of\n      a series of (name, status pairs).\n         => 700 (list-clients)\
    \ []\n         <= 701 (client-list) [client-list:SEQ[\n                      \
    \         REC[name:str, status:card]]]\n      The \"add-client\" operation allows\
    \ a user to add a client object to\n      his list of client objects.  Although\
    \ the login operation\n      duplicates this functionality via the \"create-this-client?\"\
    \ flag,\n      the add-client operation is a useful means of creating a number\
    \ of\n      new client objects while logged into the repository via an\n     \
    \ existing client.  The add-client operation requires the name of\n      the client\
    \ to add.\n         => 702 (add-client) [client:str]\n         <= 500 (ok) []\
    \ |\n            501 (failure) [why:str]\n      The most common failure mode for\
    \ this operation is an attempt to\n      add a client that already exists.\n \
    \     The \"remove-client\" operation removes an existing client object\n    \
    \  from a user's client list.  The client being removed can be the\n      client\
    \ requesting the operation.  The remove-client operation\n      requires the name\
    \ of the client to remove.\n         => 703 (remove-client) [client:str]\n   \
    \      <= 500 (ok) [] |\n            501 (failure) [why:str]\n      The most common\
    \ failure mode here is an attempt to remove a\n      non-existent client.  This\
    \ is a typical failure mode for any DMSP\n      operation which operates on a\
    \ named object.\n      The last client operation, \"reset-client\", causes the\
    \ repository\n      to mark all messages in the user's mail state as having changed\n\
    \      since the client last logged in.  When a client next synchronizes\n   \
    \   with the repository, it will end up receiving a complete copy of\n      the\
    \ repository's global mail state.  This is useful for two\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      reasons.  First, a client's local mail state could easily become\n\
    \      lost or damaged, especially if it is stored on a floppy disk.\n      Second,\
    \ if a client has been marked as inactive by the repository,\n      the reset-client\
    \ operation provides a fast way of resynchronizing\n      with the repository,\
    \ assuming that so many differences exist\n      between the local and global\
    \ mail states that a normal\n      synchronization would take far too much time.\n\
    \         => 704 (reset-client) [client:str]\n         <= 500 (ok) [] |\n    \
    \        501 (failure) [why:str]\n   4.4. Mailbox operations\n      DMSP supports\
    \ five operations that manipulate mailbox objects.\n      First, \"list-mailboxes\"\
    \ has the repository send to the requesting\n      client information on each\
    \ mailbox.  This information consists of\n      the mailbox name, total message\
    \ count, unseen message count, and\n      \"next available UID\".  This operation\
    \ is useful in synchronizing\n      local and global mail states, since it allows\
    \ a client to compare\n      the user's global mailbox list with a client's local\
    \ mailbox list.\n      The list of mailboxes also provides a quick summary of\
    \ each\n      mailbox's contents without having the contents present.\n      \
    \   => 800 (list-mailboxes) []\n         <= 801 (mailbox-list) [mailbox-list:SEQ[\n\
    \                                REC[mailbox:str,\n                          \
    \          next-UID:Lcard,\n                                    num-msgs:card,\n\
    \                                    num-unseen-msgs:card]]]\n      The \"add-mailbox\"\
    \ has the repository create a new mailbox and\n      attach it to the user's list\
    \ of mailboxes.  An address object\n      binding the (user-name, mailbox-name)\
    \ pair to an RFC-822-style\n      address is automatically created and placed\
    \ in the repository's\n      list of address objects.  This allows mail coming\
    \ from the\n      Internet to be correctly routed to the new mailbox.\n      \
    \   => 802 (add-mailbox) [mailbox:str]\n         <= 500 (ok) [] |\n          \
    \  501 (failure) [why:str]\n      \"Remove-mailbox\" removes a mailbox from the\
    \ user's list of\n      mailboxes.  All messages within the mailbox are also deleted\
    \ and\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      permanently removed from the system.  Any address objects binding\n\
    \      the mailbox name to RFC-822-style mailbox addresses are also\n      removed\
    \ from the system.\n         => 803 (remove-mailbox) [mailbox:str]\n         <=\
    \ 500 (ok) [] |\n            501 (failure) [why:str]\n      DMSP also has an \"\
    expunge-mailbox\" operation.  Any message can be\n      deleted and \"undeleted\"\
    \ at will.  Deletions are made permanent by\n      performing an expunge-mailbox\
    \ operation.  The expunge operation\n      causes the repository to look through\
    \ a named mailbox, removing\n      from the system any messages marked \"deleted\"\
    .\n         => 808 expunge-mailbox[mailbox:str]\n         <= 500 (ok) [] |\n \
    \           501 (failure) [why:str]\n      Finally, \"reset-mailbox\" causes the\
    \ repository to mark all the\n      messages in a named mailbox as having changed\
    \ since the current\n      client last logged in.  When the client next synchronizes\
    \ with the\n      repository, it will receive a complete copy of the named mailbox's\n\
    \      mail state.  This operation is merely a more specific version of\n    \
    \  the reset-client operation (which allows the client to pull over a\n      complete\
    \ copy of the user's global mail state).  Its primary use\n      is for mailboxes\
    \ whose contents have accidentally been destroyed\n      locally.\n         =>\
    \ 809 (reset-mailbox) [mailbox:str]\n         <= 500 (ok) [] |\n            501\
    \ (failure) [why:str]\n   4.5. Address operations\n      DMSP provides three operations\
    \ that allow users to manipulate\n      address objects.  First, the \"list-address\"\
    \ operation returns a\n      list of address objects associated with a particular\
    \ (user-name,\n      mailbox-name) pair.\n         => 804 (list-addresses) [mailbox:str]\n\
    \         <= 501 (failure) [why:str] |\n            805 (address-list) [address-list:SEQ[str]]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      The \"add-address\" operation adds a new address object that\n\
    \      associates a (user-name, mailbox-name) pair with a given\n      RFC-822-style\
    \ mailbox address.\n         => 806 (add-address) [mailbox:str,\n            \
    \                   RFC-822-mail-address:str]\n         <= 500 (ok) [] |\n   \
    \         501 (failure) [why:str]\n      Finally, the \"remove-address\" operation\
    \ destroys the address\n      object binding the given RFC-822-style mail address\
    \ and the given\n      (user-name, mailbox-name) pair.\n         => 807 (remove-address)\
    \ [mailbox:str,\n                                  RFC-822-mail-address:str]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str]\n   4.6. Message\
    \ operations\n      The most commonly-manipulated Pcmail objects are messages;\
    \ DMSP\n      therefore provides special message operations to allow efficient\n\
    \      synchronization, as well as a set of operations to perform\n      standard\
    \ message-manipulation functions.  In the following\n      paragraphs, the terms\
    \ \"message\" and \"descriptor\" will be used\n      interchangeably.\n      A\
    \ client can request a particular message's flag values with the\n      \"get-descriptor-flags\"\
    \ operation.  The repository sends over an\n      array of boolean values, eight\
    \ of which are system defined, and\n      eight of which are user defined and\
    \ ignored by the repository.\n         => 1100 (get-descriptor-flags) [mailbox:str,\n\
    \                                         uid:Lcard]\n         <= 1101 (descriptor-flags)\
    \ [flags:SEQ[bool]] |\n            501 (failure) [why:str]\n      A user may request\
    \ a series of descriptors with the\n      \"get-descriptors\" operation.  The\
    \ series is identified by a pair\n      of message UIDs, representing the lower\
    \ and upper bounds of the\n      list.  Since UIDs are defined to be monotonically\
    \ increasing\n      numbers, a pair of UIDs is sufficient to completely identify\
    \ the\n      series of descriptors.  The repository returns a sequence of\n  \
    \    \"choices\".  Elements of the sequence can either be descriptors, in\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      which case the choice is tagged as a descriptor, or they can be\n\
    \      notification that the requested message has been expunged\n      subsequent\
    \ to the client's last connection to the repository.\n         => 1102 (get-descriptors)\
    \ [mailbox:str,\n                                    low-UID:Lcard,\n        \
    \                            high-UID:Lcard]\n         <= 501 (failure) [why:str]\
    \ |\n            1103 (descriptor-list) [descriptor-list:SEQ[ CH[\n          \
    \                          expunged[uid:Lcard]\n                             \
    \       descriptor[REC[UID:Lcard,\n                                          \
    \         flags:SEQ[bool],\n                                                 \
    \  from-field:str,\n                                                   to-field:str,\n\
    \                                                   date-field:str,\n        \
    \                                           subject-field:str,\n             \
    \                                      num-bytes:Lcard,\n                    \
    \                               num-lines:Lcard]\n                           \
    \                     ]]]]\n      The \"get-changed-descriptors\" operation is\
    \ intended for use during\n      state synchronization.  Whenever a descriptor\
    \ changes state (is\n      deleted, for example), the repository notes those clients\
    \ which\n      have not yet recorded the change locally. Get-changed-descriptors\n\
    \      has the repository send to the client a given number of\n      descriptors\
    \ which have changed since the client's last\n      synchronization.  The list\
    \ sent begins with the earliest-changed\n      descriptor.\n         => 1105 (get-changed-descriptors)\
    \ [mailbox:str,\n                                            max-to-send:card]\n\
    \         <= 501 (failure) why:str] |\n            1103 (descriptor-list) [descriptor-list:SEQ[\n\
    \                  CH[\n                    expunged[uid:Lcard]\n            \
    \        descriptor[REC[UID:Lcard,\n                                   flags:SEQ[bool],\n\
    \                                   from-field:str,\n                        \
    \           to-field:str,\n                                   date-field:str,\n\
    \                                   subject-field:str,\n                     \
    \              num-bytes:Lcard,\n                                   num-lines:Lcard]\n\
    \                                ]]]]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      Once the changed descriptors have been looked at, a user will want\n\
    \      to inform the repository that the current client has recorded the\n   \
    \   change locally.  The \"reset-changed-descriptors\" causes the\n      repository\
    \ to mark as \"seen by current client\" a given number of\n      changed descriptors,\
    \ starting with the changed descriptor with\n      lowest UID.\n         => 1106\
    \ (reset-changed-descriptors) [\n                  mailbox:str,\n            \
    \      number-to-reset:card]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str]\n      Message bodies are transmitted from repository to user with\
    \ the\n      \"get-message-text\" operation.  The separation of \"get-descriptors\"\
    \n      and \"get-message-text\" operations allows clients with small\n      amounts\
    \ of disk storage to obtain a small message summary (via\n      \"get-descriptors\"\
    \ or \"get-changed-descriptors\") without having to\n      pull over the entire\
    \ message.\n         => 1107 (get-message-text)[mailbox:str,\n               \
    \                     uid:Lcard]\n         <= 501 (failure) [why:str] |\n    \
    \        1110 (message) [message:SEQ[str]]\n      Frequently, a message may be\
    \ too large for some clients to store\n      locally.  Users can still look at\
    \ the message contents via the\n      \"print-message\" operation.  This operation\
    \ has the repository send\n      a copy of the message to a named printer.  The\
    \ printer name need\n      only have meaning to the particular repository implementation;\n\
    \      DMSP transmits the name only as a means of identification.\n         =>\
    \ 1108 (print-message) [mailbox:str,\n                                  uid:Lcard,\n\
    \                                  printer-name:str]\n         <= 500 (ok) []\
    \ |\n            501 (failure) [why:str]\n      The user can set and clear any\
    \ of the 16 descriptor flags with the\n      \"set-flag\" operation.  The desired\
    \ flag is set or cleared\n      according to the operation arguments.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n         => 1109 (set-flag) [mailbox:str,\n                         \
    \    uid:Lcard,\n                             flag-number:card,\n            \
    \                 flag-setting:bool]\n         <= 500 (ok) [] |\n            501\
    \ (failure) [why:str]\n      Copying of one message into another mailbox is accomplished\
    \ via\n      the \"copy-message\" operation.\n         => 1111 (copy-message)\
    \ [source-mailbox:str,\n                                 target-mailbox:str,\n\
    \                                 source-uid:Lcard]\n         <= 500 (ok) [] |\n\
    \            501 (failure) [why:str]\n"
- title: 5. Client Architecture
  contents:
  - "5. Client Architecture\n   Clients are typically PCs; Pcmail's architecture must\
    \ therefore take\n   into account several characteristics common to PCs.  First,\
    \ PCs are\n   cheap, therefore a user may well have more than one.  Second, they\n\
    \   are portable, therefore they are not expected to be constantly tied\n   into\
    \ a network.  Finally, they are resource-poor, so they are not\n   expected to\
    \ be able to store a significant amount of state\n   information locally.  The\
    \ following subsections describe the\n   particular parts of Pcmail's client architecture\
    \ that address these\n   three characteristics.\n   5.1. Multiple clients\n  \
    \    The fact that Pcmail users may own more than one PC forms the\n      rationalization\
    \ for the multiple client model that Pcmail uses.  A\n      Pcmail user may have\
    \ a PC client at home, a PC at an office, and\n      maybe even a third portable\
    \ PC.  Each client maintains a separate\n      copy of the user's mail state,\
    \ hence Pcmail's distributed nature.\n      The notion of separate clients allows\
    \ Pcmail users to access mail\n      state from several different locations.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   5.2. Synchronization\n      Since PCs are fairly portable, the likelihood\
    \ of a PC's being\n      always connected to a network is relatively small.  This\
    \ is\n      another reason for each client's maintaining a local copy of a\n \
    \     user's mail state.  The user can then manipulate the local mail\n      state\
    \ while not connected to the network (and the repository).\n      This immediately\
    \ brings up the problem of synchronization between\n      local and global mail\
    \ states.  The repository is continually in a\n      position to receive global\
    \ mail state updates, either in the form\n      of incoming mail, or in the form\
    \ of changes from other clients. A\n      client that is not always connected\
    \ to the net cannot immediately\n      receive the global changes.  In addition,\
    \ the client's user can\n      make his own changes on the local mail state.\n\
    \      Pcmail's architecture permits efficient synchronization between\n     \
    \ client local mail states and the repository's global mail state.\n      Each\
    \ client is identified in the repository by a client object\n      attached to\
    \ the user.  This object forms the basis for\n      synchronization between local\
    \ and global mail states.  Some of the\n      less common state changes include\
    \ the adding and deleting of user\n      mailboxes and the adding and deleting\
    \ of address objects.\n      Synchronization of these changes is performed via\
    \ DMSP list\n      operations, which allow clients to compare their local versions\
    \ of\n      mailbox and address object lists with the repository's global\n  \
    \    version and make any appropriate changes.  The majority of\n      possible\
    \ changes to a user's mail state are in the form of changed\n      descriptors.\
    \  Since most users will have a large number of\n      messages, and message states\
    \ will change relatively often, special\n      attention needs to be paid to message\
    \ synchronization.\n      An existing descriptor can be changed in one of two\
    \ ways: first,\n      one of its sixteen flags values can be changed (this encompasses\n\
    \      reading an unseen message, deleting a message, and expunging a\n      message).\
    \  The second way to change a descriptor is via the\n      arrival of incoming\
    \ mail or the copying of a message from one\n      mailbox to another.  Both result\
    \ in a new message being added to a\n      mailbox.\n      In both the above cases,\
    \ synchronization is required between the\n      repository and every client that\
    \ has not previously noted a\n      change.  To keep track of which clients have\
    \ noticed a global mail\n      state change and changed their local states accordingly,\
    \ each\n      descriptor has associated with it a (potentially empty) \"update\n\
    \      list\" of client objects.  The list identifies those clients which\n  \
    \    have not yet recorded a change to that descriptor's state.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      When a client connects to the repository, it executes a DMSP\n\
    \      \"get-changed-descriptors\" operation.  This causes the repository\n  \
    \    to return a list of all descriptor objects that have the\n      requesting\
    \ client on their update list.  As the client receives\n      the changed descriptors,\
    \ it can store them locally, thus updating\n      the local mail state.  After\
    \ a changed descriptor has been\n      recorded, the client uses the DMSP \"reset-descriptors\"\
    \ operation\n      to remove itself from the descriptor's update list.  That\n\
    \      descriptor will now not be sent to the client unless (1) it is\n      explicitly\
    \ requested, or (2) it changes again.\n      In this manner, a client can run\
    \ through its user's mailboxes,\n      getting all changed descriptors, incorporating\
    \ them into the local\n      mail state, and marking the change as recorded.\n\
    \   5.3. Batch operation versus interactive operation\n      Because of the portable\
    \ nature of most PCs, they may not always be\n      connected to the repository.\
    \  Since each client maintains a local\n      mail state, Pcmail users can manipulate\
    \ the local state while not\n      connected to the repository.  This is known\
    \ as \"batch\" operation,\n      since all changes are recorded by the client\
    \ and made to the\n      repository's global state in a batch, when the client\
    \ next\n      connects to the repository.  Interactive operation occurs when a\n\
    \      client is always connected to the repository.  In interactive\n      mode,\
    \ changes made to the local mail state are immediately\n      propagated to the\
    \ global state via DMSP operations.\n      In batch mode, interaction between\
    \ client and repository takes the\n      following form:  the client connects\
    \ to the repository and sends\n      over all the changes made by the user to\
    \ the local mail state.\n      The repository changes its global mail state accordingly.\
    \ When all\n      changes have been processed, the client begins synchronization,\
    \ to\n      incorporate newly-arrived mail, as well as mail state changes by\n\
    \      other clients, into the local state.\n      In interactive mode, since\
    \ local changes are immediately\n      propagated to the repository, the first\
    \ part of batch-type\n      operation is eliminated.  The synchronization process\
    \ also\n      changes; interactive clients can periodically poll the repository\n\
    \      for a list of changes, synchronizing a small amount at a time.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   5.4. Message summaries\n      Since PCs are assumed to have little\
    \ in the way of disk storage, a\n      given client may never have enough room\
    \ for a complete local copy\n      of a user's global mail state.  This means\
    \ that Pcmail's client\n      architecture must allow user's to obtain a clear\
    \ picture of their\n      mail state without having all their messages present.\n\
    \      Descriptors provide message information without taking up large\n     \
    \ amounts of storage.  Each descriptor contains a summary of\n      information\
    \ on a message.  This information includes the message\n      UID, its length\
    \ in bytes and lines, its status (encoded in the\n      eight system-defined and\
    \ eight user-defined flags), and portions\n      of its RFC-822 header (the \"\
    to:\", \"from:\", \"subject:\" and \"date:\"\n      fields).  All of this information\
    \ can be encoded in a small\n      (around 100 bytes) data structure whose length\
    \ is independent of\n      the size of the message it describes.\n      Any client\
    \ should be able to store a complete list of message\n      descriptors with little\
    \ problem.  This allows a user to get a\n      complete picture of his mail state\
    \ without having all his messages\n      present locally.  Short messages can\
    \ reside on the client, along\n      with the descriptors, and long messages can\
    \ either be printed via\n      the DMSP print-message operation, or specially\
    \ pulled over via the\n      fetch-message-text operation.\n"
- title: 6. Typical Client-Repository Interaction
  contents:
  - "6. Typical Client-Repository Interaction\n   The following example describes\
    \ a typical communication session\n   between the repository and a client.  The\
    \ client is one of three\n   belonging to user \"Fred\".  Its name is \"office-client\"\
    , and since\n   Fred uses the client regularly to access his mail, the client\
    \ is\n   marked as \"active\".  Fred has two mailboxes: \"main\" is where all\
    \ of\n   his current mail is stored; \"archive\" is where messages of lasting\n\
    \   importance are kept.  The example will run through a simple\n   synchronization\
    \ operation followed by a series of typical mail state\n   manipulations.  Typically,\
    \ the synchronization will be performed by\n   an application program that connects\
    \ to the repository, logs in,\n   synchronizes, and logs out.\n   For the example,\
    \ all DMSP operations will be shown in a user-readable\n   format.  In reality,\
    \ the operations would be sent as a stream of USP\n   blocks consisting of a block-type\
    \ number followed by a stream of\n   bytes representing the block's arguments.\
    \ Both the block name and its\n   number are included for convenience.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   In order to access his global mail state, the client software must\n\
    \   authenticate Fred to the repository; this is done via the DMSP login\n   operation:\n\
    \      600 (login) [\"fred\", \"ajyr63ywg\", \"office-client\",\n            \
    \       FALSE, FALSE]\n   This tells the repository that Fred is logging in via\n\
    \   \"office-client\", and that \"office-client\" is identified by an\n   existing\
    \ client object attached to Fred's user object.  The second\n   login block argument\
    \ in an encrypted version of Fred's password.  The\n   final argument tells the\
    \ repository that Fred's client is not\n   operating in batch mode but rather\
    \ in interactive mode.\n   Fred's authentication checks out, so the repository\
    \ logs him in,\n   acknowledging the login request with an OK block.\n   Now that\
    \ Fred is logged in, he wants to bring\n   \"office-client\"'s local mail state\
    \ up to date.  To do this, the\n   client program asks for an up-to-date list\
    \ of mailboxes:\n      800 (list-mailboxes) []\n   The repository replies with:\n\
    \      801 (mailbox-list) [[\"main\", 10, 1, 253],\n                         \
    \ [\"archive\", 100, 0, 101]]\n   This tells the client that there are two mailboxes,\
    \ \"main\" and\n   \"archive\".  \"Main\" has 10 messages, one of which is unseen.\
    \ The next\n   incoming message will be assigned a UID of 253. \"Archive\", on\
    \ the\n   other hand, has 100 message, none of which are unseen.  The next\n \
    \  message sent to \"archive\" will be assigned the UID 101.  There are no\n \
    \  new mailboxes in the list (if there were, the client program would\n   create\
    \ them.  On the other hand, if some mailboxes in the client's\n   local list were\
    \ not in the repository's list, the program would\n   assume them deleted by another\
    \ client and delete them locally as\n   well).\n   To synchronize the client need\
    \ only look at each mailbox's contents\n   to see if (1) any new mail has arrived,\
    \ or (2) if Fred changed any\n   messages on one of his other two clients subsequent\
    \ to\n   \"office-client\"'s last connection to the repository.\n   The client\
    \ asks for any changed descriptors via the\n   \"get-changed-descriptors\" operation.\
    \  It requests at most ten changed\n   descriptors since storage is very tight\
    \ on \"office-client\".\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      1105 (get-changed-descriptors) [\"main\", 10]\n   The repository\
    \ responds with:\n      1103 (descriptor-list) [[descriptor[\n               \
    \                6,\n                               [T T F F F F F F F F F F F\
    \ F F F],\n                               \"Fred@borax\",\n                  \
    \             \"Joe@fab\",\n                               \"Wed, 23 Jan 86 11:11\
    \ EST\",\n                               \"tomorrow's meeting\",\n           \
    \                    621,\n                               10]]\n             \
    \                 [descriptor[\n                               10,\n         \
    \                      [F T F F F F F F F F F F F F F F],\n                  \
    \             \"Fred\",\n                               \"Freds-secretary\",\n\
    \                               \"Fri, 25 Jan 86 11:11 EST\",\n              \
    \                 \"Monthly progress report\",\n                             \
    \  13211,\n                               350]]\n                           ]\n\
    \   The first descriptor in the list is one which Fred deleted on another\n  \
    \ client yesterday.  \"Office-client\" marks the local version of the\n   message\
    \ as deleted.  The second descriptor in the list is a new one.\n   \"Office-client\"\
    \ adds the descriptor to its local list.  Since both\n   changes have now been\
    \ recorded locally, the descriptors can be reset:\n      1106 (reset-descriptors)\
    \ [\"main\", 2]\n   The repository clears each descriptor's update vector bit\n\
    \   corresponding to \"office-client\"'s client object.  \"Main\" has now\n  \
    \ been synchronized.  The client now turns to Fred's \"archive\" mailbox\n   and\
    \ asks for the first ten changed descriptors.\n      1105 (get-changed-descriptors)\
    \ [\"archive\", 10]\n   The repository responds with\n      1103 (descriptor-list)\
    \ []\n   The zero-length list tells \"office-client\" that no descriptors have\n\
    \   been changed in \"archive\" since its last synchronization.  No new\n   synchronization\
    \ needs to be performed.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   Fred's client is now ready to pull over the new message so Fred can\n\
    \   read it.  The message is 320 lines long; there might not be\n   sufficient\
    \ storage on \"office-client\" to hold the new message. The\n   client tries anyway:\n\
    \      1107 (fetch-message-text) [\"main\", 10]\n   The repository begins transmitting\
    \ the message:\n      1110 (message) [\"From: Fred's-secretary\",\n          \
    \            \"To: Fred\",\n                      \"Subject: Monthly progress\
    \ report\",\n                      \"Date: Fri, 25 Jan 86 11:11 EST\",\n     \
    \                 \"\",\n                      \"Dear Fred,\",\n             \
    \         \"Here is this month's progress report\",\n                      ...\n\
    \                      ]\n   Halfway through the message transmission, \"office-client\"\
    \ runs out of\n   disk space.  Because all DMSP operations are defined to be atomic,\n\
    \   the portion of the message already transmitted is destroyed locally\n   and\
    \ the operation fails.  \"Office-client\" informs Fred that the\n   message cannot\
    \ be pulled over because of a lack of disk space.  The\n   synchronization process\
    \ is now finished and Fred's client logs out.\n      601 (logout) []\n   The repository\
    \ does any housecleaning it needs to do, acknowledges\n   the logout request,\
    \ and closes the USP connection.\n"
- title: 7. A Current Pcmail Implementation
  contents:
  - "7. A Current Pcmail Implementation\n   The following section briefly describes\
    \ a current implementation of\n   Pcmail that services a small community of users.\
    \  The Pcmail\n   repository runs under UNIX on a DEC VAX-750 connected to the\n\
    \   Internet.  The clients are IBM PCs, XTs, and ATs.  The network\n   software\
    \ that communicates with the repository allows only\n   \"batch-mode\" operation.\
    \  Users make local state changes, which are\n   queued until the client connects\
    \ to the repository.  At that time,\n   the changes are performed and the local\
    \ and global states\n   synchronized.  The client then disconnects from the repository.\n\
    \   Users access and modify their local mail state via a user interface\n   program.\
    \  The program uses windows and a full-screen mode of\n   operation.  Users are\
    \ given a rich variety of commands to operate on\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   individual messages as well as mailboxes.  The interface allows use\n\
    \   of any text editor to compose messages, and adds features of its own\n   to\
    \ make RFC-822-style header composition easier.\n   Synchronization and the processing\
    \ of queued changes is performed by\n   a separate program, which the user runs\
    \ whenever he wishes.  The\n   program takes any actions queued while operating\
    \ the user interface,\n   and converts them into DMSP operations.  All queued\
    \ changes are made\n   before any synchronization is performed.\n   The limitation\
    \ of client operation to batch mode was made for the\n   following reasons: first,\
    \ the implementation is slanted toward use of\n   portable computers as clients.\
    \  These computers are rarely connected\n   to the network, making interactive\
    \ mode unnecessary.  Those clients\n   that are constantly connected to the network\
    \ run slightly less\n   efficiently than they could (since users must make changes\
    \ locally\n   and then run the action-processing/synchronization program, rather\n\
    \   than simply making changes interactively).\n   Another important reason for\
    \ limiting operation to batch mode is that\n   it allows a very simple locking\
    \ scheme to prevent problems raised by\n   concurrent state updates.  A user may\
    \ have several clients; it is\n   therefore likely that the repository could get\
    \ into a variety of\n   inconsistent states as different clients try to change\
    \ the\n   repository's global mail state at the same time.  To prevent these\n\
    \   inconsistencies, a user's mail state is locked as soon as a client\n   connects\
    \ to the repository.  The lock is released when the client\n   disconnects from\
    \ the repository. This locking scheme is simple to\n   implement, but makes interactive-mode\
    \ operation very cumbersome: if a\n   user remains constantly connected to the\
    \ network (i.e. in interactive\n   mode), the repository would be unavailable\
    \ to any of the user's other\n   clients for an unacceptable length of time.\n"
- title: 8. Conclusions
  contents:
  - "8. Conclusions\n   Pcmail is now used by a small community of people at the MIT\n\
    \   Laboratory for Computer Science.  The repository design works well,\n   providing\
    \ a fairly efficient means of storing and maintaining mail\n   state for several\
    \ users.  Members of another research group at LCS\n   are currently working on\
    \ a replicated, scaleable version of the\n   repository designed to support a\
    \ very large community of users with\n   high availability.  This repository also\
    \ uses DMSP and has\n   successfully communicated with clients that use the current\n\
    \   repository implementation.  DMSP therefore seems to be useable over\n   several\
    \ flavors of repository design. The clients, being PCs, are\n   unfortunately\
    \ very limited in the way of resources, making local mail\n   state manipulation\
    \ difficult at times.  Synchronization is also\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   relatively time consuming due to the low performance of the PCs. \
    \ The\n   \"batch-mode\" of client operation is very useful for portable\n   computers\
    \ that spend a large percentage of their time unplugged and\n   away from a network.\
    \ It is somewhat less useful for the majority of\n   the clients, which are always\
    \ connected to the network and could make\n   good use of an \"interactive-mode\"\
    \ state manipulation.\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - 'PCMAIL

    '
- title: I. DMSP Protocol Specification
  contents:
  - "I. DMSP Protocol Specification\n   Following is a list of DMSP block types and\
    \ DMSP operations by object\n   type.  Again, \"=>\" marks blocks flowing from\
    \ client to repository;\n   \"<=\" marks blocks flowing from repository to client.\n\
    \      General operations:\n         => or <= 503 (abort-request) [why:str]\n\
    \         (no acknowledgement)\n         => 504 (start-debug) []\n         <=\
    \ 500 (ok) [] |\n            501 (failure) [why:str]\n         => 505 (end-debug)\
    \ []\n         <= 500 (ok) []\n         => 506 (send-version) [version:card]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str]\n         => 507\
    \ (log-message) [message:str]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str]\n         => 508 (send-message) [message:seq[str]]\n         <= 500\
    \ (ok) [] |\n            501 (failure) [why:str]\n      User operations:\n   \
    \      => 600 (login) [name:str, password:str,\n                         client:str,\
    \ create-client-object?:bool\n                         batch-mode-flag:bool]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str] |\n          \
    \  705 (force-client-reset) []\n         => 601 (logout) []\n         <= 500 (ok)\
    \ []\n         => 602 (add-user) [name:str, password:str]\n         <= 500 (ok)\
    \ [] |\n            501 (failure) [why:str]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n         => 603 (remove-user) [user:str]\n         <= 500 (ok) [] |\n\
    \            501 (failure) [why:str]\n         => 604 (set-password) [old:str,\
    \ new:str]\n         <= 500 (ok) [] |\n            501 (failure) [why:str]\n \
    \     Client operations:\n         => 700 (list-clients) []\n         <= 701 (client-list)\
    \ [client-list:seq[\n                               rec[name:str], status:card]]\n\
    \         => 702 (add-client) [client:str]\n         <= 500 (ok) [] |\n      \
    \      501 (failure) [why:str]\n         => 703 (remove-client) [client:str]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str]\n         => 704\
    \ (reset-client) [client:str]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str]\n      Mailbox operations:\n         => 800 (list-mailboxes) []\n\
    \         <= 801 (mailbox-list) [mailbox-list:seq[\n                         \
    \       rec[mailbox:str,\n                                    next-uid:lcard,\n\
    \                                    num-msgs:card,\n                        \
    \            num-unseen-msgs:card]]]\n         => 802 (add-mailbox) [mailbox:str]\n\
    \         <= 500 (ok) [] |\n            501 (failure) [why:str]\n         => 803\
    \ (remove-mailbox) [mailbox:str]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str]\n         => 808 (expunge-mailbox) [mailbox:str]\n         <= 500\
    \ (ok) [] |\n            501 (failure) [why:str]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n         => 809 (reset-mailbox) [mailbox:str]\n         <= 500 (ok) []\
    \ |\n            501 (failure) [why:str]\n      Address operations:\n        \
    \ => 804 (list-addresses) [mailbox:str]\n         <= 501 (failure) [why:str] |\n\
    \            805 (address-list) [address-list:seq[str]]\n         => 806 (add-address)\
    \ [mailbox:str, address:str]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str]\n         => 807 (remove-address) [mailbox:str, address:str]\n   \
    \      <= 500 (ok) [] |\n            501 (failure) [why:str]\n      Message operations:\n\
    \         => 1100 (get-descriptor-flags) [mailbox:str, uid:lcard]\n         <=\
    \ 1101 (descriptor-flags) [flags:seq[bool]] |\n            501 (failure) [why:str]\n\
    \         => 1102 (get-descriptors) [mailbox:str,\n                          \
    \          low-uid:lcard,\n                                    high-uid:lcard]\n\
    \         <= 501 (failure) [why:str] |\n            1103 (descriptor-list) [descriptor-list:seq[\n\
    \                   ch[\n                     expunged[uid:lcard],\n         \
    \            descriptor[rec[uid:lcard,\n                                    flags:seq[bool],\n\
    \                                    from-field:str,\n                       \
    \             to-field:str,\n                                    date-field:str,\n\
    \                                    subject-field:str,\n                    \
    \                nun-bytes:lcard,\n                                    num-lines:lcard]\n\
    \                          ]]]]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n         => 1105 (get-changed-descriptors) [mailbox:str,\n          \
    \                                  max-to-send:card]\n         <= 501 (failure)\
    \ [why:str] |\n            1103 (descriptor-list) [descriptor-list:seq[\n    \
    \               ch[\n                     expunged[uid:lcard],\n             \
    \        descriptor[rec[uid:lcard,\n                                    flags:seq[bool],\n\
    \                                    from-field:str,\n                       \
    \             to-field:str,\n                                    date-field:str,\n\
    \                                    subject-field:str,\n                    \
    \                num-bytes:lcard,\n                                    num-lines:lcard]\n\
    \                         ]]]]\n         => 1106 (reset-changed-descriptors) [\n\
    \                         mailbox:str,\n                         start-uid:lcard,\n\
    \                         end-uid:lcard]\n         <= 500 (ok) [] |\n        \
    \    501 (failure) [why:str]\n         => 1107 (get-message-text) [mailbox:str,\n\
    \                                     uid:lcard]\n         <= 501 (failure) [why:str]\
    \ |\n            1110 (message) [message:seq[str]]\n         => 1108 (print-message)\
    \ [mailbox:str,\n                                  uid:lcard,\n              \
    \                    printer-name:str]\n         <= 500 (ok) [] |\n          \
    \  501 (failure) [why:str]\n         => 1109 (set-flag) [mailbox:str,\n      \
    \                       uid:lcard,\n                             flag-number:card,\n\
    \                             flag-setting:bool]\n         <= 500 (ok) [] |\n\
    \            501 (failure) [why:str]\n         => 1111 copy-message[source-mailbox:str,\n\
    \                              target-mailbox:str,\n                         \
    \     source-uid:lcard]\n         <= 500 (ok) [] |\n            501 (failure)\
    \ [why:str]\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n   DMSP block types by number\n      General block types\n         ok\
    \                        500\n         failure                   501\n       \
    \  abort-request             503\n         start-debug               504\n   \
    \      end-debug                 505\n         send-version              506\n\
    \         log-message               507\n         send-message              508\n\
    \      User operation block types\n         login                     600\n  \
    \       logout                    601\n         add-user                  602\n\
    \         remove-user               603\n         set-password              604\n\
    \      Client operation block types\n         list-clients              700\n\
    \         client-list               701\n         add-clien                 702\n\
    \         remove-client             703\n         reset-client              704\n\
    \         force-client-reset        705\n      Mailbox operation block types\n\
    \         list-mailboxes            800\n         mailbox-list              801\n\
    \         add-mailbox               802\n         remove-mailbox            803\n\
    \         expunge-mailbox           808\n         reset-mailbox             809\n"
- title: RFC 984                                                         May 1986
  contents:
  - 'RFC 984                                                         May 1986

    '
- title: PCMAIL
  contents:
  - "PCMAIL\n      Address operation block types\n         list-addresses        \
    \    804\n         address-list              805\n         add-address       \
    \        806\n         remove-address            807\n      Message operation\
    \ block types\n         get-descriptor-flags      1100\n         descriptor-flags\
    \          1101\n         get-descriptors           1102\n         descriptor-list\
    \           1103\n         get-changed-descriptors   1105\n         reset-changed-descriptors\
    \ 1106\n         get-message-text          1107\n         print-message      \
    \       1108\n         set-flag                  1109\n         message      \
    \             1110\n         copy-message              1111\n"
