- title: __initial_text__
  contents:
  - '       Requirements for an IPsec Certificate Management Profile

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This informational document describes and identifies the requirements\n\
    \   for transactions to handle Public Key Certificate (PKC) lifecycle\n   transactions\
    \ between Internet Protocol Security (IPsec) Virtual\n   Private Network (VPN)\
    \ Systems using Internet Key Exchange (IKE)\n   (versions 1 and 2) and Public\
    \ Key Infrastructure (PKI) Systems.\n   These requirements are designed to meet\
    \ the needs of enterprise-scale\n   IPsec VPN deployments.  It is intended that\
    \ a standards track profile\n   of a management protocol will be created to address\
    \ many of these\n   requirements.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Scope ......................................................5\n  \
    \    1.2. Non-Goals ..................................................6\n    \
    \  1.3. Definitions ................................................6\n      1.4.\
    \ Requirements Terminology ...................................8\n   2. Architecture\
    \ ....................................................9\n      2.1. VPN System\
    \ .................................................9\n           2.1.1. IPsec\
    \ Peer(s) .......................................9\n           2.1.2. VPN Administration\
    \ Function (Admin) .................9\n      2.2. PKI System ................................................10\n\
    \      2.3. VPN-PKI Interaction .......................................11\n  \
    \ 3. Requirements ...................................................13\n    \
    \  3.1. General Requirements ......................................13\n      \
    \     3.1.1. One Protocol .......................................13\n        \
    \   3.1.2. Secure Transactions ................................13\n          \
    \ 3.1.3. Admin Availability .................................13\n           3.1.4.\
    \ PKI Availability ...................................14\n           3.1.5. End-User\
    \ Transparency ..............................14\n           3.1.6. PKC Profile\
    \ for PKI Interaction ....................14\n                  3.1.6.1. Identity\
    \ ..................................15\n                  3.1.6.2. Key Usage .................................15\n\
    \                  3.1.6.3. Extended Key Usage ........................15\n  \
    \                3.1.6.4. Revocation Information Location ...........15\n    \
    \       3.1.7. Error Handling .....................................15\n      3.2.\
    \ Authorization .............................................15\n           3.2.1.\
    \ One Protocol .......................................15\n           3.2.2. Bulk\
    \ Authorization .................................16\n           3.2.3. Authorization\
    \ Scenario .............................16\n           3.2.4. Authorization Request\
    \ ..............................17\n                  3.2.4.1. Specifying Fields\
    \ within the PKC ..........17\n                  3.2.4.2. Authorizations for Rekey,\
    \ Renewal,\n                           and Update ................................18\n\
    \                  3.2.4.3. Other Authorization Elements ..............18\n  \
    \                3.2.4.4. Cancel Capability .........................19\n    \
    \       3.2.5. Authorization Response .............................19\n      \
    \            3.2.5.1. Error Handling for Authorization ..........20\n      3.3.\
    \ Generation ................................................20\n           3.3.1.\
    \ Generation Method 1: IPsec Peer Generates Key Pair,\n                  Constructs\
    \ PKC Request, and Signs PKC Request ......21\n           3.3.2. Generation Method\
    \ 2: IPsec Peer Generates Key Pair,\n                  Admin Constructs PKS Request,\
    \ Admin Signs PKC\n                  Request ............................................22\n\
    \           3.3.3. Generation Method 3: Admin Generates Key Pair,\n          \
    \        Constructs PKC Request, and Signs PKC Request ......23\n           3.3.4.\
    \ Method 4: PKI Generates Key Pair ...................24\n           3.3.5. Error\
    \ Handling for Generation ......................25\n      3.4. Enrollment ................................................25\n\
    \           3.4.1. One Protocol .......................................25\n  \
    \         3.4.2. On-line Protocol ...................................25\n    \
    \       3.4.3. Single Connection with Immediate Response ..........25\n      \
    \     3.4.4. Manual Approval Option .............................25\n        \
    \   3.4.5. Enrollment Method 1: Peer Enrolls to PKI Directly ..26\n          \
    \ 3.4.6. Enrollment Method 2a: Peer Enrolls through Admin ...27\n           3.4.7.\
    \ Enrollment Method 2b: Peer Enrolls through Admin ...28\n           3.4.8. Enrollment\
    \ Method 3a: Admin Authorizes and\n                  Enrolls Directly to PKI ............................30\n\
    \           3.4.9. Enrollment Method 3b: Admin Requests and PKI\n            \
    \      Generates and Sends PKC ............................31\n           3.4.10.\
    \ Confirmation Handshake ............................32\n           3.4.11. Error\
    \ Handling for Enrollment .....................33\n      3.5. Lifecycle .................................................34\n\
    \           3.5.1. One Protocol .......................................34\n  \
    \         3.5.2. PKC Rekeys, Renewals, and Updates ..................35\n    \
    \              3.5.2.1. Rekey Request .............................36\n      \
    \            3.5.2.2. Renew Request .............................36\n        \
    \          3.5.2.3. Update Request ............................37\n          \
    \        3.5.2.4. Error Handling for Rekey, Renewal,\n                       \
    \    and Update ................................38\n                  3.5.2.5.\
    \ Confirmation Handshakes ...................38\n           3.5.3. Revocation\
    \ .........................................38\n      3.6. Repositories ..............................................39\n\
    \           3.6.1. Lookups ............................................39\n  \
    \         3.6.2. Error Handling for Repository Lookups ..............40\n    \
    \  3.7. Trust .....................................................40\n      \
    \     3.7.1. Trust Anchor PKC Acquisition .......................40\n        \
    \   3.7.2. Certification Path Validation ......................41\n          \
    \ 3.7.3. Revocation Checking and Status Information .........41\n           3.7.4.\
    \ Error Handling in Revocation Checking and\n                  Certificate Path\
    \ Validation ........................42\n   4. Security Considerations ........................................42\n\
    \   5. References .....................................................43\n  \
    \    5.1. Normative References ......................................43\n    \
    \  5.2. Informative References ....................................43\n   6. Acknowledgements\
    \ ...............................................43\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes and identifies the requirements\
    \ for\n   transactions to handle PKC lifecycle transactions between [IPsec] VPN\n\
    \   Systems using IKE ([IKEv1] and [IKEv2]) and PKI Systems.  This\n   document\
    \ contains requirements for a transaction-based approach.\n   Other models are\
    \ conceivable, for example, a directory-centric\n   approach, but their requirements\
    \ are beyond the scope of this\n   document.\n   This document enumerates requirements\
    \ for Public Key Certificate\n   (PKC) lifecycle transactions between different\
    \ VPN System and PKI\n   System products in order to better enable large scale,\
    \ PKI-enabled\n   IPsec deployments with a common set of transactions.  Requirements\n\
    \   for both the IPsec and the PKI products are discussed.  The\n   requirements\
    \ are carefully designed to achieve security without\n   compromising ease of\
    \ management and deployment, even where the\n   deployment involves tens of thousands\
    \ of IPsec users and devices.\n   The requirements address transactions for the\
    \ entire PKC lifecycle\n   for PKI-enabled VPN System: authorization (of PKC issuance),\n\
    \   generation (public-private key pair and PKC request), enrollment (PKC\n  \
    \ request, PKC response, and confirmation), maintenance (rekey, renew,\n   update,\
    \ revoke, and confirm), and repository lookups.  These\n   transactions enable\
    \ a VPN Operator to:\n     - Use a VPN Administration function (Admin), which\
    \ is introduced in\n       this document, to manage PKC authorization and possibly\
    \ act as\n       the sole interface for the VPN System and the PKI System.\n \
    \    - Authorize individual or batches of PKC issuances based on a pre-\n    \
    \   agreed template (i.e., both types of authorization requests refer\n      \
    \ to the pre-agreed template).  These authorizations can occur\n       either\
    \ prior to the enrollment or in the same transaction as the\n       enrollment.\n\
    \     - Provision PKI-based user or machine identity to IPsec Peers, on a\n  \
    \     large scale.\n     - Set the corresponding gateway or client authorization\
    \ policy for\n       remote access and site-to-site connections.\n     - Establish\
    \ policies for automatic PKC rekeys, renewals, and\n       updates.\n     - Ensure\
    \ timely revocation information is available for PKCs used\n       in IKE exchanges.\n\
    \   These requirements are intended to be used to profile a certificate\n   management\
    \ protocol that the VPN System will use to communicate with\n   the PKI System.\
    \  Note that this profile will be in another document.\n   The certificate management\
    \ profile will also clarify and constrain\n   existing PKIX (PKI for X.509 Certificates)\
    \ and IPsec standards to\n   limit the complexity of deployment.  Some requirements\
    \ may require\n   either a new protocol, or changes or extensions to an existing\n\
    \   protocol.\n   The desired outcome of the requirements and profile documents\
    \ is that\n   both IPsec and PKI vendors create interoperable products to enable\n\
    \   large-scale IPsec System deployments, and do so as quickly as\n   possible.\
    \  For example, a VPN Operator should be able to use any\n   conforming IPsec\
    \ implementation (VPN Administration or IPsec Peer) of\n   the certificate management\
    \ profile with any conforming PKI vendor's\n   implementation to perform the VPN\
    \ rollout and management.\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   The document addresses requirements on transactions between the\
    \ VPN\n   Systems and the PKI Systems and between the VPN Administration and\n\
    \   IPsec Peers.  The requirements strive to meet eighty percent of the\n   market\
    \ needs for large-scale deployments (i.e., VPNs including\n   hundreds or thousands\
    \ of managed VPN gateways or VPN remote access\n   clients).  Environments will\
    \ understandably exist in which large-\n   scale deployment tools are desired,\
    \ but local security policy\n   stringency will not allow for the use of such\
    \ commercial tools.  The\n   solution will possibly miss the needs of the highest\
    \ ten percent of\n   stringency and the lowest ten percent of convenience requirements.\n\
    \   Use cases will be considered or rejected based upon this eighty\n   percent\
    \ rule.  The needs of small deployments are a stated non-goal;\n   however, service\
    \ providers employing the scoped solution and applying\n   it to many smaller\
    \ deployments in aggregate may address them.\n   Gateway-to-gateway access and\
    \ end-user remote access (to a gateway)\n   are both covered.  End-to-end communications\
    \ are not necessarily\n   excluded, but are intentionally not a focus.\n   Only\
    \ VPN-PKI transactions that ease and enable scalable PKI-enabled\n   IPsec deployments\
    \ are addressed.\n"
- title: 1.2.  Non-Goals
  contents:
  - "1.2.  Non-Goals\n   The scenario for PKC cross-certification will not be addressed.\n\
    \   The protocol specification for the VPN-PKI interactions will not be\n   addressed.\n\
    \   The protocol specification for the VPN Administrator to Peer\n   transactions\
    \ will not be addressed.  These interactions are\n   considered vendor proprietary.\
    \  These interactions may be\n   standardized later to enable interoperability\
    \ between VPN\n   Administration function stations and IPsec Peers from different\n\
    \   vendors, but are far beyond the scope of this current effort, and\n   will\
    \ be described as opaque transactions in this document.\n   The protocol specification\
    \ for Registration Authority - Certificate\n   Authority (RA-CA), CA-Repository,\
    \ and RA-Repository interactions will\n   not be addressed.\n"
- title: 1.3.  Definitions
  contents:
  - "1.3.  Definitions\n   VPN System\n   The VPN System is comprised of the VPN Administration\
    \ function\n   (defined below), the IPsec Peers, and the communication mechanism\n\
    \   between the VPN Administration and the IPsec Peers.  VPN System is\n   defined\
    \ in more detail in Section 2.1.\n   PKI System\n   The PKI System, or simply\
    \ PKI, is the set of functions needed to\n   authorize, issue, and manage PKCs.\
    \  PKI System is defined in more\n   detail in Section 2.2.\n   (VPN) Operator\n\
    \   The Operator is the person or group of people that define security\n   policy\
    \ and configure the VPN System to enforce that policy, with the\n   VPN Administration\
    \ function.\n   IPsec Peer (Gateway or Client)\n   For the purposes of this document,\
    \ an IPsec Peer, or simply \"Peer\",\n   is any VPN System component that communicates\
    \ IKE and IPsec to\n   another Peer in order to create an IPsec Security Association\
    \ for\n   communications.  It can be either a traditional security gateway\n \
    \  (with two network interfaces, one for the protected network and one\n   for\
    \ the unprotected network) or an IPsec client (with a single\n   network interface).\
    \  In both cases, the Peer can pass traffic with no\n   IPsec protection, and\
    \ can add IPsec protection to chosen traffic\n   streams.  See Section 2.1.1 for\
    \ more details.\n   (VPN) Admin\n   The Admin is the VPN System function that\
    \ interacts with the PKI\n   System to establish PKC provisioning for the VPN\
    \ connections.  See\n   Section 2.1.2 for more details.\n   End Entity\n   An\
    \ end entity is the entity or subject that is identified in a PKC.\n   The end\
    \ entity is the one entity that will finally use a private key\n   associated\
    \ with a PKC to digitally sign data.  In this document, an\n   IPsec Peer is certainly\
    \ an end entity, but the VPN Admin can also\n   constitute an end entity.  Note\
    \ that end entities can have different\n   PKCs for different purposes (e.g.,\
    \ signature vs. key exchange,\n   Admin-functions vs. Peer-functions).\n   PKC\
    \ Rekey\n   The routine procedure for replacement of a PKC with a new PKC with\
    \ a\n   new public key for the same subject name.  A rekey process can rely\n\
    \   on the existing key pair to bootstrap authentication for the new\n   enrollment.\n\
    \   PKC Renewal\n   The acquisition of a new PKC with the same public key due\
    \ to the\n   expiration of an existing PKC.  Renewal occurs prior to the\n   expiration\
    \ of the existing PKC to avoid any connection outages.  A\n   renewal process\
    \ can rely on the existing key pair to bootstrap\n   authentication for the new\
    \ enrollment.\n   PKC Update\n   A special case of a renewal-like occurrence where\
    \ a PKC needs to be\n   changed prior to expiration due to some change in its\
    \ subject's\n   information.  Examples might include change in the address, telephone\n\
    \   number, or name change due to marriage of the end entity.  An update\n   process\
    \ can rely on the existing key pair to bootstrap authentication\n   for the new\
    \ enrollment.\n   Registration Authority (RA)\n   An optional entity in a PKI\
    \ System given responsibility for\n   performing some of the administrative tasks\
    \ necessary in the\n   registration of end entities, such as confirming the subject's\n\
    \   identity and verifying that the subject has possession of the private\n  \
    \ key associated with the public key requested for a PKC.\n   Certificate Authority\
    \ (CA)\n   An authority in a PKI System that is trusted by one or more users to\n\
    \   create and sign PKCs.  It is important to note that the CA is\n   responsible\
    \ for the PKCs during their whole lifetime, not just for\n   issuing them.\n \
    \  Repository\n   An Internet-accessible server in a PKI System that stores and\
    \ makes\n   available for retrieval PKCs and Certificate Revocation Lists (CRLs).\n\
    \   Root CA/Trust Anchor\n   A CA that is directly trusted by an end entity; that\
    \ is, securely\n   acquiring the value of a Root CA public key requires some out-of-band\n\
    \   step(s).  This term is not meant to imply that a Root CA is\n   necessarily\
    \ at the top of any hierarchy, simply that the CA in\n   question is trusted directly.\n\
    \   Certificate Revocation List (CRL)\n   A CRL is a CA-signed, timestamped list\
    \ identifying revoked PKCs and\n   made freely available in a repository.  Peers\
    \ retrieve the CRL to\n   verify that a PKC being presented to them as the identity\
    \ in an IKE\n   transaction has not been revoked.\n   CRL Distribution Point (CDP)\n\
    \   The CDP is a PKC extension that identifies the location from which\n   end\
    \ entities should retrieve CRLs to check status information.\n   Authority Info\
    \ Access (AIA)\n   The AIA is a PKC extension that indicates how to access CA\n\
    \   information and services for the issuer of the PKC in which the\n   extension\
    \ appears.  Information and services may include on-line\n   validation services\
    \ and Certificate Policy (CP) data.\n"
- title: 1.4.  Requirements Terminology
  contents:
  - "1.4.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [MUSTSHOULD].\n"
- title: 2.  Architecture
  contents:
  - "2.  Architecture\n   This section describes the overall architecture for a PKI-supported\n\
    \   IPsec VPN deployment.  First, an explanation of the VPN System is\n   presented.\
    \  Second, key points about the PKI System are stated.\n   Third, the VPN-PKI\
    \ architecture is presented.\n"
- title: 2.1.  VPN System
  contents:
  - "2.1.  VPN System\n   The VPN System consists of the IPsec Peers and the VPN Administration\n\
    \   function, as depicted in Figure 1.\n            +---------------------------------------------------+\n\
    \            |                                                   |\n         \
    \   |                      +----------+                 |\n            |     \
    \                 |   VPN    |                 |\n            |          +---------->|\
    \  Admin   |<-------+        |\n            |          |           | Function\
    \ |        |        |\n            |          |           +----------+       \
    \ |        |\n            |          v                               v       \
    \ |\n            |  +---------+                         +---------+  |\n     \
    \       |  |  IPsec  |                         |  IPsec  |  |\n            | \
    \ |  Peer 1 |<=======================>|  Peer 2 |  |\n            |  +---------+\
    \                         +---------+  |\n            |                      \
    \                             |\n            |                     VPN System\
    \                    |\n            +---------------------------------------------------+\n\
    \                             Figure 1: VPN System\n"
- title: 2.1.1.  IPsec Peer(s)
  contents:
  - "2.1.1.  IPsec Peer(s)\n   The Peers are two entities between which establishment\
    \ of an IPsec\n   Security Association is required.  Two Peers are shown in Figure\
    \ 1,\n   but implementations can support an actual number in the hundreds or\n\
    \   thousands.  The Peers can be gateway-to-gateway, remote-access-host-\n   to-gateway,\
    \ or a mix of both.  The Peers authenticate themselves in\n   the IKE negotiation\
    \ using digital signatures generated with PKCs from\n   a PKI System.\n"
- title: 2.1.2.  VPN Administration Function (Admin)
  contents:
  - "2.1.2.  VPN Administration Function (Admin)\n   This document defines the notion\
    \ of a VPN Administration function,\n   hereafter referred to as Admin, and gives\
    \ the Admin great\n   responsibility within the VPN System.  The Admin is a centralized\n\
    \   function used by the Operator to interact with the PKI System to\n   establish\
    \ PKI policy (e.g., algorithms, key lengths, lifecycle\n   options, and PKC fields)\
    \ for groups of IPsec Peers.  The Admin also\n   authorizes PKC issuance and can\
    \ act as the Peer's PKI System\n   interface, which allows the Admin to perform\
    \ many RA-like functions.\n   It is important to note that, within this document,\
    \ the Admin is\n   neither a device nor a person; rather, it is a function.  Every\n\
    \   large-scale VPN deployment will contain the Admin function.  The\n   function\
    \ can be performed on a stand-alone workstation, on a gateway,\n   or on an administration\
    \ software component.  The Admin function can\n   also be one and the same as\
    \ the gateway, client device, or software.\n   They are represented in the architectural\
    \ diagram as different\n   functions, but they need not be different physical\
    \ entities.  As\n   such, the Admin's architecture and the means by which it interacts\n\
    \   with the participating IPsec Peers will vary widely from\n   implementation\
    \ to implementation.  However, some basic functions of\n   the Admin are assumed.\n\
    \     - It, and not the PKI, will define the Certificate Policy (CP)\n       [FRAME]\
    \ for use in a VPN System.  The PKC's characteristics and\n       contents are\
    \ a function of the CP.  In VPN Systems, the Operator\n       chooses to strengthen\
    \ the VPN by using PKI; PKI is a bolt-on to\n       the VPN System.  The Operator\
    \ will configure local security\n       policy in part through the Admin and its\
    \ authorized PKI-enabled\n       Peers.\n     - It will interact directly with\
    \ the PKI System to initiate\n       authorization for end entity PKCs by sending\
    \ the parameters and\n       contents for individual PKCs or batches of PKCs based\
    \ on a pre-\n       agreed template (i.e., both types of authorization requests\
    \ refer\n       to the pre-agreed template).  Templates will be agreed in an\n\
    \       out-of-band mechanism by the VPN Operator and the PKI Operator.\n    \
    \   It will receive back from the PKI a unique tuple of authorization\n      \
    \ identifiers and one-time authorization tokens that will authorize\n       Peers\
    \ to request a PKC.\n     - It will deliver instructions to the IPsec Peers, and\
    \ the Peers\n       will carry out those instructions (e.g., Admin passes Peer\n\
    \       information necessary to generate keys and PKC request).\n"
- title: 2.2.  PKI System
  contents:
  - "2.2.  PKI System\n   The PKI System, as depicted in Figure 2, can be set up and\
    \ operated\n   by the Operator (in-house), be provided by third party PKI providers\n\
    \   to which connectivity is available at the time of provisioning\n   (managed\
    \ PKI service), or be integrated with the VPN product.\n               +---------------------------------------------+\n\
    \               |        +-------------------------+          |\n            \
    \   |        v                         |          |\n               |   +--------------+\
    \               v          |\n               |   |  Repository  |    +----+  \
    \ +----+       |\n               |   | Certs & CRLs |<-> | CA |<->| RA |     \
    \  |\n               |   +--------------+    +----+   +----+       |\n       \
    \        |                                             |\n               +---------------------------------------------+\n\
    \                              Figure 2: PKI System\n   This framework assumes\
    \ that all components of the VPN obtain PKCs\n   from a single PKI community.\
    \  An IPsec Peer can accept a PKC from a\n   Peer that is from a CA outside of\
    \ the PKI community, but the auto\n   provision and life cycle management for\
    \ such a PKC or its trust\n   anchor PKC fall out of scope.\n   The PKI System\
    \ contains a mechanism for handling Admin's\n   authorization requests and PKC\
    \ enrollments.  This mechanism is\n   referred to as the Registration Authority\
    \ (RA).  The PKI System\n   contains a Repository for Peers to retrieve each other's\
    \ PKCs and\n   revocation information.  Last, the PKI System contains the core\n\
    \   function of a CA that uses a public and private key pair and signs\n   PKCs.\n"
- title: 2.3.  VPN-PKI Interaction
  contents:
  - "2.3.  VPN-PKI Interaction\n   The interaction between the VPN System and the\
    \ PKI System is the key\n   focus of this requirements document, as shown in Figure\
    \ 3.\n   Therefore, it is sensible to consider the steps necessary to set up,\n\
    \   use, and manage PKCs for one Peer to establish an association with\n   another\
    \ Peer.\n          +-----------------------------------------------+\n       \
    \   |                  PKI System                   |\n          |           \
    \                                    |\n          |   +--------------+       \
    \                     |\n          |   |  Repository  |     +----+    +----+ \
    \      |\n          |   | Certs & CRLs |     | CA |    | RA |       |\n      \
    \    |   +--------------+     +----+    +----+       |\n          |          \
    \                                     |\n          +-----------------------------------------------+\n\
    \               ^                  ^                   ^\n               |[G]\
    \               |[A]                |[G]\n               |[E]               |[G]\
    \                |[E]\n               |[L]               |[E]                |[L]\n\
    \               |[R]               |[R]                |[R]\n               |\
    \                  |[L]                |\n         +-----+------------------+-------------------+-------+\n\
    \         |     |                  v                   |       |\n         | \
    \    |             +----------+             |       |\n         |     | [G][E][L][R]|\
    \   VPN    |[G][E][L][R] |       |\n         |     | +---------->|  Admin   |<----------+\
    \ |       |\n         |     | |           | Function |           | |       |\n\
    \         |     | |           +----------+           | |       |\n         | \
    \    v v                                  v v       |\n         |  +---------+\
    \                          +---------+  |\n         |  |  IPsec  |          [I]\
    \             |  IPsec  |  |\n         |  |  Peer 1 |<========================>|\
    \  Peer 2 |  |\n         |  +---------+                          +---------+ \
    \ |\n         |                                                    |\n       \
    \  |                     VPN System                     |\n         +----------------------------------------------------+\n\
    \   [A] = Authorization: PKC issuance\n   [G] = Generation: Public key, private\
    \ key, and PKC request\n   [E] = Enrollment: Sending PKC request, verifying PKC\
    \ response, and\n         confirming PKC response\n   [I] = IKE and IPsec communication\n\
    \   [L] = Lifecycle: Rekey, renewal, update, revocation, and confirmation\n  \
    \ [R] = Repository: Posting and lookups\n        Figure 3.  Architectural Framework\
    \ for VPN-PKI Interaction\n   Requirements for each of the interactions, [A],\
    \ [G], [E], [L], and\n   [R], are addressed in Sections 3.2 through 3.6.  However,\
    \ only\n   requirements for [A], [E], [L], and [R] will be addressed by the\n\
    \   certificate management profile.  Requirements for [I] transactions\n   are\
    \ beyond the scope of this document.  Additionally, the act of\n   certification\
    \ (i.e., binding the public key to the name) is performed\n   at the CA and is\
    \ not shown in the figure.\n"
- title: 3.  Requirements
  contents:
  - '3.  Requirements

    '
- title: 3.1.  General Requirements
  contents:
  - '3.1.  General Requirements

    '
- title: 3.1.1.  One Protocol
  contents:
  - "3.1.1.  One Protocol\n   The target profile, to be based on this requirements\
    \ document, MUST\n   call for ONE PROTOCOL or ONE USE PROFILE for each main element\
    \ of the\n   [A], [E], [L], and [R] interactions.  In order to reduce complexity\n\
    \   and improve interoperability, having multiple competing protocols or\n   profiles\
    \ to solve the same requirement should be avoided whenever\n   possible.\n   Meeting\
    \ some of the requirements may necessitate the creation of a\n   new protocol\
    \ or new extension for an existing protocol; however, the\n   latter is much preferred.\n"
- title: 3.1.2.  Secure Transactions
  contents:
  - "3.1.2.  Secure Transactions\n   The target certificate management profile MUST\
    \ specify the [A], [E],\n   [L], and [R] transactions between VPN and PKI Systems.\
    \  To support\n   these transactions, the Admin and PKI MUST exchange policy details,\n\
    \   identities, and keys.  As such, the method of communication for [A],\n   [E],\
    \ and [L] transactions MUST be secured in a manner that ensures\n   privacy, authentication,\
    \ and message data integrity.  The\n   communication method MUST require that\
    \ mutual trust be established\n   between the PKI and the Admin (see Section 3.7.1).\
    \  [R] transactions\n   do not require authentication or message data integrity\
    \ because the\n   responses (i.e., PKCs and CRLs) are already digitally signed.\n\
    \   Whether [R] transactions require privacy is determined by the local\n   security\
    \ policy.\n   The target certificate management profile will not specify [G]\n\
    \   transactions.  However, these transactions MUST be secured in a\n   manner\
    \ that ensures privacy, authentication, and message data\n   integrity because\
    \ these transactions are the basis for the other\n   transactions.\n"
- title: 3.1.3.  Admin Availability
  contents:
  - "3.1.3.  Admin Availability\n   The Admin MUST be reachable by the Peers.  Most\
    \ implementations will\n   meet this requirement by ensuring Peers can connect\
    \ to the Admin from\n   anywhere on the network or Internet.  However, communication\
    \ between\n   the Admin and Peers can be \"off-line\".  It can, in some environments,\n\
    \   be \"moving media\" (i.e., the configuration or data is loaded on to a\n \
    \  floppy disk or other media and physically moved to the IPsec Peers).\n   Likewise,\
    \ it can be entered directly on the IPsec Peer via a User\n   Interface (UI).\
    \  In this case, the Admin function is co-located on\n   the Peer device itself.\
    \  Most requirements and scenarios in this\n   document assume on-line availability\
    \ of the Admin for the life of the\n   VPN System.\n"
- title: 3.1.4.  PKI Availability
  contents:
  - "3.1.4.  PKI Availability\n   Availability is REQUIRED initially for authorization\
    \ transactions\n   between the PKI and Admin.  Further availability is required\
    \ in most\n   cases, but the extent of this availability is a decision point for\n\
    \   the Operator.  Most requirements and scenarios in this document\n   assume\
    \ on-line availability of the PKI for the life of the VPN\n   System.\n   Off-line\
    \ interaction between the VPN and PKI Systems (i.e., where\n   physical media\
    \ is used as the transport method) is beyond the scope\n   of this document.\n"
- title: 3.1.5.  End-User Transparency
  contents:
  - "3.1.5.  End-User Transparency\n   PKI interactions are to be transparent to the\
    \ user.  Users SHOULD NOT\n   even be aware that PKI is in use.  First time connections\
    \ SHOULD\n   consist of no more than a prompt for some identification and pass\n\
    \   phrase, and a status bar notifying the user that setup is in\n   progress.\n"
- title: 3.1.6.  PKC Profile for PKI Interaction
  contents:
  - "3.1.6.  PKC Profile for PKI Interaction\n   A PKC used for identity in VPN-PKI\
    \ transactions MUST include all the\n   [CERTPROFILE] mandatory fields.  It MUST\
    \ also contain contents\n   necessary to support path validation and certificate\
    \ status checking.\n   It is preferable that the PKC profiles for IPsec transactions\n\
    \   [IKECERTPROFILE] and VPN-PKI transactions (in the certificate\n   management\
    \ profile) are the same so that one PKC could be used for\n   both transaction\
    \ sets.  If the profiles are inconsistent, then\n   different PKCs (and perhaps\
    \ different processing requirements) might\n   be required.  However, the authors\
    \ urge that progress continue on\n   other aspects of this standardization effort\
    \ regardless of the status\n   of efforts to achieve PKC profile consensus.\n"
- title: 3.1.6.1.  Identity
  contents:
  - "3.1.6.1.  Identity\n   PKCs MUST support identifying (i.e., naming) Peers and\
    \ Admins.  The\n   following name forms MUST be supported:\n     - Fully-Qualified\
    \ Domain Name (FQDN)\n     - RFC 822 (also called USER FQDN)\n     - IPv4 Address\n\
    \     - IPv6 Address\n"
- title: 3.1.6.2.  Key Usage
  contents:
  - "3.1.6.2.  Key Usage\n   PKCs MUST support indicating the purposes for which the\
    \ key (i.e.,\n   digital signature) can be used.  Further, PKCs MUST always indicate\n\
    \   that relying parties (i.e., Peers) need to understand the indication.\n"
- title: 3.1.6.3.  Extended Key Usage
  contents:
  - "3.1.6.3.  Extended Key Usage\n   Extended Key Usage (EKU) indications are not\
    \ required.  The presence\n   or lack of an EKU MUST NOT cause an implementation\
    \ to fail an IKE\n   connection.\n"
- title: 3.1.6.4.  Revocation Information Location
  contents:
  - "3.1.6.4.  Revocation Information Location\n   PKCs MUST indicate the location\
    \ of CRL such that any Peer who holds\n   the PKC locally will know exactly where\
    \ to go and how to request the\n   CRL.\n"
- title: 3.1.7.  Error Handling
  contents:
  - "3.1.7.  Error Handling\n   The protocol for the VPN-PKI transactions MUST specify\
    \ error handling\n   for each transaction.  Thorough error condition descriptions\
    \ and\n   handling instructions will greatly aid interoperability efforts\n  \
    \ between the PKI and VPN System products.\n"
- title: 3.2.  Authorization
  contents:
  - "3.2.  Authorization\n   This section refers to the [A] elements labeled in Figure\
    \ 3.\n"
- title: 3.2.1.  One Protocol
  contents:
  - "3.2.1.  One Protocol\n   One protocol MUST be specified for the Admin to PKI\
    \ (RA/CA)\n   interactions.  This protocol MUST support privacy, authorization,\n\
    \   authentication, and integrity.  PKCs for authorization of the Admin\n   can\
    \ be initialized through an out-of-band mechanism.\n   The transport used to carry\
    \ the authorization SHOULD be reliable\n   (TCP).\n   The protocol SHOULD be as\
    \ lightweight as possible.\n"
- title: 3.2.2.  Bulk Authorization
  contents:
  - "3.2.2.  Bulk Authorization\n   Bulk authorization MUST be supported by the certificate\
    \ management\n   profile.  Bulk authorization occurs when the Admin requests of\
    \ the\n   PKI that authorization be established for several different subjects\n\
    \   with almost the same contents.  A minimum of one value (more is also\n   acceptable)\
    \ differs per subject.  Because the authorizations may\n   occur before any keys\
    \ have been generated, the only way to ensure\n   unique authorization identifiers\
    \ are issued is to have at least one\n   value differ per subject.\n   Authorization\
    \ can occur prior to a PKC enrollment request, or the\n   authorization and the\
    \ PKC enrollment request can be presented to the\n   PKI at the same time.  Both\
    \ of these authorization scenarios MUST be\n   supported.\n   A bulk authorization\
    \ SHOULD occur in one single connection to the PKI\n   (RA/CA), with the number\
    \ of subjects being one or greater.\n   Implementations SHOULD be able to handle\
    \ one thousand subjects in a\n   batch authorization.\n"
- title: 3.2.3  Authorization Scenario
  contents:
  - "3.2.3  Authorization Scenario\n   The authorization scenario for VPN-PKI transactions\
    \ involves a two-\n   step process: an authorization request and an authorization\
    \ response.\n   Figure 4 shows the salient interactions to perform authorization\n\
    \   transactions.\n       +--------------+     +-----------------------+\n   \
    \    |  Repository  |     |         CA/RA         |\n       +--------------+ \
    \    +-----------------------+\n                                        ^\n  \
    \                                      | 1\n                                 \
    \     2 |\n                                        v\n                       \
    \              +-------+\n                                     | Admin |\n   \
    \                                  +-------+\n                +--------------------+\
    \          +--------+\n                |       IPsec        |          | IPsec\
    \  |\n                |      Peer 1        |          | Peer 2 |\n           \
    \     +--------------------+          +--------+\n                  Figure 4.\
    \  Authorization Transactions\n   1) Authorization Request [A].  Admin sends a\
    \ list of identities and\n      PKC contents for the PKI System to authorize enrollment.\
    \  See\n      Section 3.2.4.\n   2) Authorization Response [A].  The PKI returns\
    \ a list of unique\n      authorization identifiers and one-time authorization\
    \ tokens to be\n      used for the enrollment of each PKC (1).  Response may indicate\n\
    \      success, failure, or errors for any particular authorization.  See\n  \
    \    Section 3.2.5.\n"
- title: 3.2.4.  Authorization Request
  contents:
  - '3.2.4.  Authorization Request

    '
- title: 3.2.4.1.  Specifying Fields within the PKC
  contents:
  - "3.2.4.1.  Specifying Fields within the PKC\n   The Admin authorizes individual\
    \ PKCs or batches of PKC issuances\n   based on a pre-agreed template.  This template\
    \ is agreed by the VPN\n   Operator and PKI Operator and is referred to in each\
    \ authorization\n   request.  This allows the authorization requests to include\
    \ the\n   minimal amount of information necessary to support a VPN System.\n \
    \  The Admin can send the PKI System the set of PKC contents that it\n   wants\
    \ the PKI to issue to a group of IPsec Peers.  In other words, it\n   tells the\
    \ PKI System, \"if you see a PKC request that looks like this,\n   from this person,\
    \ process it and issue the PKC.\"\n   Requirements for PKC fields used in IPsec\
    \ transactions are specified\n   in [IKECERTPROFILE].\n   Requirements for PKC\
    \ fields used in VPN-PKI transactions are\n   specified in Section 3.1.6.\n"
- title: 3.2.4.2.  Authorizations for Rekey, Renewal, and Update
  contents:
  - "3.2.4.2.  Authorizations for Rekey, Renewal, and Update\n   When the VPN Operator\
    \ and PKI Operator pre-agree on a template, they\n   MUST also agree on the local\
    \ policy regarding PKC renewal and PKC\n   update.  These are:\n     - Admin MUST\
    \ specify if automatic renewals are allowed, that is,\n       the Admin authorizes\
    \ the PKI to process a future renewal for the\n       specified Peer PKC.\n  \
    \   - Admin MUST specify if PKC update is allowed, that is, the Admin\n      \
    \ authorizes the PKI to accept a future request for a new PKC with\n       changes\
    \ to non-key-related fields.\n       If a PKC renewal is authorized, the Admin\
    \ MUST further specify:\n     - Who can renew, that is, can only the Admin send\
    \ a renewal request\n       or can the Peer send a request directly to the PKI,\
    \ or either.\n     - How long before the PKC expiration date the PKI will accept\
    \ and\n       process a renewal (i.e., N% of validity period, or the UTC time\n\
    \       after which renewal is permitted).\n   If a PKC update is authorized,\
    \ the Admin MUST further specify:\n     - The aspects of non-key-related fields\
    \ that are changeable.\n     - The entity that can send the PKC Update request,\
    \ that is, only\n       the Admin, only the Peer, or either.\n     - How long\
    \ before the PKC expiration date the PKI will accept and\n       process an update\
    \ (i.e., N% of validity period, or the UTC time\n       after which update is\
    \ permitted).\n   A new authorization by the Admin is REQUIRED for PKC rekey.\
    \  No\n   parameters of prior authorizations need be considered.\n"
- title: 3.2.4.3.  Other Authorization Elements
  contents:
  - "3.2.4.3.  Other Authorization Elements\n   The Admin MUST have the ability to\
    \ specify the format for the\n   authorization ID and one-time authorization token.\
    \  The one-time\n   authorization token SHOULD be unique per authorization ID.\
    \  The more\n   randomness that can be achieved in the relationship between an\n\
    \   authorization ID and its one-time authorization token, the better.\n   The\
    \ one-time authorization token MUST be in UTF-8 format to avoid\n   incompatibilities\
    \ that may occur due to international characters.  It\n   MUST support normalization\
    \ as in [CERTPROFILE].  The Admin MUST have\n   the ability to constrain the UTF-8\
    \ character set.\n   There MUST be an option to specify a validation period for\
    \ the\n   authorization ID and its one-time authorization token.  If such a\n\
    \   validation period is set, any PKC requests using the authorization ID\n  \
    \ and one-time authorization token that arrive at the PKI outside of\n   the validation\
    \ period MUST be dropped, and the event logged.\n   The Protocol SHOULD consider\
    \ what happens when Admin-requested\n   information conflicts with PKI settings\
    \ such that the Admin request\n   cannot be issued as requested (e.g., Admin requests\
    \ validation period\n   = 3 weeks and CA is configured to only allow validation\
    \ periods = 1\n   week).  Proper conflict handling MUST be specified.\n"
- title: 3.2.4.4.  Cancel Capability
  contents:
  - "3.2.4.4.  Cancel Capability\n   Either the Admin or the Peer can send a cancel\
    \ authorization message\n   to PKI.  The canceling entity MUST provide the authorization\
    \ ID and\n   one-time authorization token in order to cancel the authorization.\n\
    \   At that point, the authorization will be erased from the PKI, and a\n   log\
    \ entry of the event written.\n   After the cancellation has been verified (a\
    \ Cancel, Cancel ACK, ACK\n   type of a process is REQUIRED to cover a lost connections\
    \ scenario),\n   the PKI will accept a new authorization request with the exact\
    \ same\n   contents as the canceled one, except that the identifier MUST be new.\n\
    \   The PKI MUST NOT process duplicate authorization requests.\n   Note that if\
    \ the PKI has already issued a PKC associated with an\n   authorization, then\
    \ cancellation of the authorization is not possible\n   and the authorization\
    \ request SHOULD be refused by the PKI.  Once a\n   PKC has been issued it MUST\
    \ be revoked in accordance with Section\n   3.6.\n"
- title: 3.2.5.  Authorization Response
  contents:
  - "3.2.5.  Authorization Response\n   If the authorization request is acceptable,\
    \ the PKI will respond to\n   the Admin with a unique authorization identifier\
    \ per subject\n   authorization requested and a one-time authorization token per\n\
    \   authorization ID.  See Section 3.2.4.3 for additional authorization\n   ID\
    \ and one-time authorization token requirements.\n   The PKI can alter parameters\
    \ of the authorization request submitted\n   by the Admin.  In that event, the\
    \ PKI MUST return all the contents of\n   the authorization request (as modified)\
    \ to the Admin with the\n   confirmation of authorization success.  This will\
    \ allow the Admin to\n   perform an \"operational test\" to verify that the issued\
    \ PKCs will\n   meet its requirements.  If the Admin determines that the modified\n\
    \   parameters are unacceptable, then the authorization should be\n   cancelled\
    \ in accordance with Section 3.2.4.4.\n   After receiving a bulk authorization\
    \ request from the Admin, the PKI\n   MUST be able to reply YES to those individual\
    \ PKC authorizations that\n   it has satisfied and NO or FAILED for those requests\
    \ that cannot be\n   satisfied, along with sufficient reason or error codes.\n\
    \   A method is REQUIRED to identify if there is a change in PKI settings\n  \
    \ between the time the authorization is granted and the PKC request\n   occurs,\
    \ and what to do about the discrepancy.\n"
- title: 3.2.5.1.  Error Handling for Authorization
  contents:
  - "3.2.5.1.  Error Handling for Authorization\n   Thorough error condition descriptions\
    \ and handling instructions MUST\n   be provided to the Admin for each transaction\
    \ in the authorization\n   process.  Providing such error codes will greatly aid\n\
    \   interoperability efforts between the PKI and IPsec products.\n"
- title: 3.3.  Generation
  contents:
  - "3.3.  Generation\n   This section refers to the [G] elements labeled in Figure\
    \ 3.\n   Once the PKI System has responded with authorization identifiers and\n\
    \   authorization tokens (see Section 3.2), and this information is\n   received\
    \ at the Admin, the next step is to generate public and\n   private key pairs\
    \ and to construct PKC requests using those key\n   pairs.  The key generations\
    \ can occur at one of three places,\n   depending on local requirements: at the\
    \ IPsec Peer, at the Admin, or\n   at the PKI.  The PKC request can come from\
    \ either the IPsec Peer, a\n   combination of the Peer and the Admin, or not at\
    \ all.\n"
- title: '3.3.1.  Generation Method 1: IPsec Peer Generates Key Pair, Constructs'
  contents:
  - "3.3.1.  Generation Method 1: IPsec Peer Generates Key Pair, Constructs\n    \
    \    PKC Request, and Signs PKC Request\n   This option will be used most often\
    \ in the field.  This is the most\n   secure method for keying, as the keys are\
    \ generated on the end entity\n   and the private key never leaves the end entity.\
    \  However, it is the\n   most computationally intensive for the Peer, as it must\
    \ be \"ASN.1\n   aware\" to support generating and digitally signing the PKC request.\n\
    \       +--------------+     +-----------------------+\n       |  Repository \
    \ |     |         CA/RA         |\n       +--------------+     +-----------------------+\n\
    \                                     +-------+\n                            \
    \ +------>| Admin |\n                             |       +-------+\n        \
    \                     |\n                             | 1\n                  \
    \           V\n                +--------------------+          +--------+\n  \
    \            2 |       IPsec        |          | IPsec  |\n                | \
    \     Peer 1        |          | Peer 2 |\n                +--------------------+\
    \          +--------+\n                  Figure 5.  Generation Interactions:\n\
    \      IPsec Peer Generates Key Pair and Constructs PKC Request\n   1) Opaque\
    \ transaction [G].  Admin sends authorization identifier,\n      one-time authorization\
    \ token, and any other parameters needed by\n      the Peer to generate the PKC\
    \ request, including key type and size.\n   2) Generation [G].  Peer receives\
    \ authorization identifier, one-time\n      authorization token, and any parameters.\
    \  Peer generates key pair\n      and constructs PKC request.\n   Steps prior\
    \ to these can be found in Section 3.2.  The next step,\n   enrollment, can occur\
    \ either directly between the Peer and PKI (see\n   Section 3.4.5) or through\
    \ the Admin (see Section 3.4.6).\n"
- title: '3.3.2.  Generation Method 2: IPsec Peer Generates Key Pair, Admin'
  contents:
  - "3.3.2.  Generation Method 2: IPsec Peer Generates Key Pair, Admin\n        Constructs\
    \ PKC Request, Admin Signs PKC Request\n   This option also supports IPsec Peer\
    \ generation of a key pair, but\n   removes the requirement for the Peer to be\
    \ ASN.1 aware because it\n   does not have to construct or digitally sign the\
    \ PKC request.  The\n   drawback is that the key pair does need to be provided\
    \ to the Admin.\n   In the most probable cases where the Admin function is remotely\n\
    \   located from the peer, this means that the private key will leave the\n  \
    \ cryptographic boundary of the peer, which is a significant security\n   trade-off\
    \ consideration.  Whenever possible, it is always better to\n   have private keys\
    \ generated and never leave the cryptographic\n   boundary of the generating system.\n\
    \       +--------------+     +-----------------------+\n       |  Repository \
    \ |     |         CA/RA         |\n       +--------------+     +-----------------------+\n\
    \                                   3 +-------+\n                            \
    \ +------>| Admin | 4\n                             |       +-------+\n      \
    \                       |\n                             | 1\n                \
    \             V\n                +--------------------+          +--------+\n\
    \              2 |       IPsec        |          | IPsec  |\n                |\
    \      Peer 1        |          | Peer 2 |\n                +--------------------+\
    \          +--------+\n                  Figure 6.  Generation Interactions:\n\
    \      IPsec Peer Generates Key Pair, Admin Constructs PKC Request\n   1) Opaque\
    \ transaction [G].  Admin sends command to Peer to generate\n      key pair, based\
    \ on parameters provided in the command.\n   2) Generation [G].  Peer generates\
    \ key pair.\n   3) Opaque transaction [G].  Peer returns key pair to Admin.\n\
    \   4) Generation [G].  Admin constructs and digitally signs PKC request.\n  \
    \ Steps prior to these can be found in Section 3.2.  The next step,\n   enrollment,\
    \ occurs through the Admin (see Section 3.4.7).\n"
- title: '3.3.3.  Generation Method 3: Admin Generates Key Pair, Constructs PKC'
  contents:
  - "3.3.3.  Generation Method 3: Admin Generates Key Pair, Constructs PKC\n     \
    \   Request, and Signs PKC Request\n   This option exists for deployments where\
    \ Peers cannot generate their\n   own key pairs.  Some examples are for PDAs and\
    \ handsets where to\n   generate an RSA key would be operationally impossible\
    \ due to\n   processing and battery constraints.  Another case covers key recovery\n\
    \   requirements, where the same PKCs are used for other functions in\n   addition\
    \ to IPsec, and key recovery is required (e.g., local data\n   encryption), therefore\
    \ key escrow is needed from the Peer.  If key\n   escrow is performed then the\
    \ exact requirements and procedures for it\n   are beyond the scope of this document.\n\
    \       +--------------+     +-----------------------+\n       |  Repository \
    \ |     |         CA/RA         |\n       +--------------+     +-----------------------+\n\
    \                                     +-------+\n                            \
    \         | Admin | 1\n                                     +-------+\n      \
    \          +--------------------+          +--------+\n                |     \
    \  IPsec        |          | IPsec  |\n                |      Peer 1        |\
    \          | Peer 2 |\n                +--------------------+          +--------+\n\
    \                  Figure 7.  Generation Interactions:\n         Admin Generates\
    \ Key Pair and Constructs PKC Request\n   1) Generation [G].  Admin generates\
    \ key pair, constructs PKC request,\n      and digitally signs PKC request.\n\
    \   Steps prior to these can be found in Section 3.2.  The next step,\n   enrollment,\
    \ occurs through the Admin (see Section 3.4.8).\n   Note that separate authorizations\
    \ steps are still of value even\n   though the Admin is also performing the key\
    \ generation.  The PKC\n   template, Subject fields, SubjectAltName fields, and\
    \ more are part of\n   the request, and must be communicated in some way from\
    \ the Admin to\n   the PKI.  Instead of creating a new mechanism, the authorization\n\
    \   schema can be reused.  This also allows for the feature of role-based\n  \
    \ administration, where Operator 1 is the only one allowed to have the\n   Admin\
    \ function pre-authorize PKCs, but Operator 2 is the one doing\n   batch enrollments\
    \ and VPN device configurations.\n"
- title: '3.3.4.  Method 4: PKI Generates Key Pair'
  contents:
  - "3.3.4.  Method 4: PKI Generates Key Pair\n   This option exists for deployments\
    \ where end entities cannot generate\n   their own key pairs and the Admin function\
    \ is a minimal\n   implementation.  The PKI and Admin pre-agree to have the PKI\
    \ generate\n   key pairs and PKCs.  This is, in all likelihood, the easiest way\
    \ to\n   deploy PKCs, though it sacrifices some security since both the CA and\n\
    \   the Admin have access to the private key.  However, in cases where\n   key\
    \ escrow is required, this may be acceptable.  The Admin\n   effectively acts\
    \ as a proxy for the Peer in the PKC enrollment\n   process.\n       +--------------+\
    \     +-----------------------+\n       |  Repository  |     |         CA/RA \
    \        | 1\n       +--------------+     +-----------------------+\n        \
    \                             +-------+\n                                    \
    \ | Admin |\n                                     +-------+\n                +--------------------+\
    \          +--------+\n                |       IPsec        |          | IPsec\
    \  |\n                |      Peer 1        |          | Peer 2 |\n           \
    \     +--------------------+          +--------+\n                  Figure 8.\
    \  Generation Interactions:\n      IPsec Peer Generates Key Pair, Admin Constructs\
    \ PKC Request\n   1) Generation [G] The PKI generates the key pair.\n   Steps\
    \ prior to these can be found in Section 3.2.  The next step,\n   enrollment,\
    \ occurs through the Admin (see Section 3.4.9).\n"
- title: 3.3.5.  Error Handling for Generation
  contents:
  - "3.3.5.  Error Handling for Generation\n   Thorough error condition descriptions\
    \ and handling instructions MUST\n   be provided for each transaction in the key\
    \ generation and PKC\n   request construction process.  Providing such error codes\
    \ will\n   greatly aid interoperability efforts between the PKI and IPsec\n  \
    \ products.\n   Error conditions MUST be communicated to the Admin regardless\
    \ of who\n   generated the key or PKC request.\n"
- title: 3.4.  Enrollment
  contents:
  - "3.4.  Enrollment\n   This section refers to the [E] elements labeled in Figure\
    \ 3.\n   Regardless of where the keys were generated and the PKC request\n   constructed,\
    \ an enrollment process will need to occur to request that\n   the PKI issue a\
    \ PKC and the corresponding PKC be returned.\n   The protocol MUST be exactly\
    \ the same regardless of whether the\n   enrollment occurs from the Peer to the\
    \ PKI or from the Admin to the\n   PKI.\n"
- title: 3.4.1.  One Protocol
  contents:
  - "3.4.1.  One Protocol\n   One protocol MUST be specified for enrollment requests,\
    \ responses,\n   and confirmations.\n"
- title: 3.4.2.  On-line Protocol
  contents:
  - "3.4.2.  On-line Protocol\n   The protocol MUST support enrollment that occurs\
    \ over the Internet\n   and without the need for manual intervention.\n"
- title: 3.4.3.  Single Connection with Immediate Response
  contents:
  - "3.4.3.  Single Connection with Immediate Response\n   Enrollment requests and\
    \ responses MUST be able to occur in one on-\n   line connection between the Admin\
    \ on behalf of the Peer or the Peer\n   itself and the PKI (RA/CA).\n"
- title: 3.4.4.  Manual Approval Option
  contents:
  - "3.4.4.  Manual Approval Option\n   Manual approval of PKC enrollments is too\
    \ time consuming for large\n   scale implementations, and is therefore not required.\n"
- title: '3.4.5.  Enrollment Method 1: Peer Enrolls to PKI Directly'
  contents:
  - "3.4.5.  Enrollment Method 1: Peer Enrolls to PKI Directly\n   In this case, the\
    \ IPsec Peer only communicates with the PKI after\n   being commanded to do so\
    \ by the Admin.  This enrollment mode is\n   depicted in Figure 9 and the letters\
    \ in the following description\n   refer to Figure 3.  Prior authorization (Section\
    \ 3.2) and generation\n   (Section 3.3.1) steps are not shown.\n   Most IPsec\
    \ Systems have enough CPU power to generate a public and\n   private key pair\
    \ of sufficient strength for secure IPsec.  In this\n   case, the end entity needs\
    \ to prove to the PKI that it has such a key\n   pair; this is normally done by\
    \ the PKI sending the end entity a\n   nonce, which the end entity signs and returns\
    \ to the Admin along with\n   the end entity's public key.\n       +--------------+\
    \     +-----------------------+\n       |  Repository  |     |         CA/RA \
    \        |\n       +--------------+     +-----------------------+\n          \
    \                     ^\n                           1,3 |\n                  \
    \             |\n                               |\n                          \
    \     |     +-------+\n                               |     | Admin |\n      \
    \                         |     +-------+\n                               |\n\
    \                           2,4 |\n                               v\n        \
    \        +--------------------+          +--------+\n                |       IPsec\
    \        |          | IPsec  |\n                |      Peer 1        |       \
    \   | Peer 2 |\n                +--------------------+          +--------+\n \
    \                 Figure 9.  VPN-PKI Interaction Steps:\n                IPsec\
    \ Peer Generates Keys and PKC Request,\n                         Enrolls Directly\
    \ with PKI\n   1) Enrollment Request [E].  The IPsec Peer sends PKC requests to\
    \ the\n      PKI, providing the generated public key.\n   2) Enrollment Response\
    \ [E].  The PKI responds to the enrollment\n      request, providing either the\
    \ new PKC that was generated or a\n      suitable error indication.\n   3) Enrollment\
    \ Confirmation [E].  Peer positively acknowledges receipt\n      of new PKC back\
    \ to the Admin.\n   4) Enrollment Confirmation Receipt [E].  PKI sends enrollment\n\
    \      confirmation receipt back to the Peer.\n"
- title: '3.4.6  Enrollment Method 2a: Peer Enrolls through Admin'
  contents:
  - "3.4.6  Enrollment Method 2a: Peer Enrolls through Admin\n   In this case, the\
    \ IPsec Peer has generated the key pair and the PKC\n   request, but does not\
    \ enroll directly to the PKI System.  Instead, it\n   automatically sends its\
    \ request to the Admin, and the Admin redirects\n   the enrollment to the PKI\
    \ System.  The PKI System does not care where\n   the enrollment comes from, as\
    \ long as it is a valid enrollment.  Once\n   the Admin receives the PKC response,\
    \ it automatically forwards it to\n   the IPsec Peer.\n   Most IPsec Systems have\
    \ enough CPU power to generate a public and\n   private key pair of sufficient\
    \ strength for secure IPsec.  In this\n   case, the end entity needs to prove\
    \ to the Admin that it has such a\n   key pair; this is normally done by the Admin\
    \ sending the end entity a\n   nonce, which the end entity signs and returns to\
    \ the Admin along with\n   the end entity's public key.\n   This enrollment mode\
    \ is depicted in Figure 10 and the letters in the\n   following description refer\
    \ to Figure 3.  Prior authorization\n   (Section 3.2) and generation (Section\
    \ 3.3.1) steps are not shown.\n       +--------------+     +-----------------------+\n\
    \       |  Repository  |     |         CA/RA         |\n       +--------------+\
    \     +-----------------------+\n                                        ^ 2,6\n\
    \                                        |\n                                 \
    \       |\n                                        v 3,7\n                   \
    \             1,5  +-------+\n                                  +> | Admin |\n\
    \                                  |  +-------+\n                            \
    \      |\n                                  |\n                              4,8\
    \ v\n                +--------------------+          +--------+\n            \
    \    |       IPsec        |          | IPsec  |\n                |      Peer 1\
    \        |          | Peer 2 |\n                +--------------------+       \
    \   +--------+\n                  Figure 10.  VPN-PKI Interaction Steps:\n   \
    \             IPsec Peer Generates Keys and PKC Request,\n                   \
    \      Enrolls Through Admin\n   1) Opaque Transaction [E].  The IPsec Peer requests\
    \ a PKC from the\n      Admin, providing the generated public key.\n   2) Enrollment\
    \ Request [E].  The Admin forwards the enrollment request\n      to the PKI.\n\
    \   3) Enrollment Response [E].  The PKI responds to the enrollment\n      request,\
    \ providing either the new PKC that was generated or a\n      suitable error indication.\n\
    \   4) Opaque Transaction [E].  The Admin forwards the enrollment\n      response\
    \ back to the IPsec Peer.\n   5) Opaque Transaction [E].  Peer positively acknowledges\
    \ receipt of\n      new PKC back to the Admin.\n   6) Enrollment Confirmation\
    \ [E].  Admin forwards enrollment\n      confirmation back to the PKI.\n   7)\
    \ Enrollment Confirmation Receipt [E].  PKI sends enrollment\n      confirmation\
    \ receipt back to the Admin.\n   8) Opaque Transaction [E].  Admin forwards PKI's\
    \ enrollment\n      confirmation receipt back to the Peer.\n"
- title: '3.4.7.  Enrollment Method 2b: Peer Enrolls through Admin'
  contents:
  - "3.4.7.  Enrollment Method 2b: Peer Enrolls through Admin\n   In this case, the\
    \ IPsec Peer has generated the key pair, but the PKC\n   request is constructed\
    \ and signed by the Admin.  The PKI System does\n   not care where the enrollment\
    \ comes from, as long as it is a valid\n   enrollment.  Once the Admin retrieves\
    \ the PKC, it then automatically\n   forwards it to the IPsec Peer along with\
    \ the key pair.\n   Some IPsec Systems do not have enough CPU power to generate\
    \ a public\n   and private key pair of sufficient strength for secure IPsec. \
    \ In\n   this case, the Admin needs to prove to the PKI that it has such a key\n\
    \   pair; this is normally done by the PKI sending the Admin a nonce,\n   which\
    \ the Admin signs and returns to the PKI along with the end\n   entity's public\
    \ key.  A drawback to this case is that the private key\n   will eventually be\
    \ sent over the wire (though hopefully securely so)\n   from Admin to the IPsec\
    \ Peer; whenever possible, it is preferred to\n   keep a key within its cryptographic\
    \ boundary of origin.  Failing to\n   do so opens the system to risk of the private\
    \ keys being sniffed and\n   discerned.\n   This enrollment mode is depicted in\
    \ Figure 11 and the letters in the\n   following description refer to Figure 3.\
    \  Prior authorization\n   (Section 3.2) and generation (Section 3.3.2) steps\
    \ are not shown.\n       +--------------+     +-----------------------+\n    \
    \   |  Repository  |     |         CA/RA         |\n       +--------------+  \
    \   +-----------------------+\n                                        ^ 1,5\n\
    \                                        |\n                                 \
    \       |\n                                        v 2,6\n                   \
    \               4  +-------+\n                                  +->| Admin |\n\
    \                                  |  +-------+\n                            \
    \      |\n                                  |\n                              3,7\
    \ v\n                +--------------------+          +--------+\n            \
    \    |       IPsec        |          | IPsec  |\n                |      Peer 1\
    \        |          | Peer 2 |\n                +--------------------+       \
    \   +--------+\n                  Figure 11.  VPN-PKI Interaction Steps:\n   \
    \        IPsec Peer Generates Keys, Admin Constructs and\n               Signs\
    \ PKC Request, Enrolls through Admin\n   1) Enrollment Request [E].  The Admin\
    \ requests a PKC from the PKI,\n      providing the generated public key.\n  \
    \ 2) Enrollment Response [E].  The PKI responds to the enrollment\n      request,\
    \ providing either the new PKC that was generated or a\n      suitable error indication.\n\
    \   3) Opaque Transaction [E].  The Admin forwards the enrollment\n      response\
    \ back to the IPsec Peer.\n   4) Opaque Transaction [E].  Peer positively acknowledges\
    \ receipt of\n      new PKC back to the Admin.\n   5) Enrollment Confirmation\
    \ [E].  Admin forwards enrollment\n      confirmation back to the PKI.\n   6)\
    \ Enrollment Confirmation Receipt [E].  PKI sends enrollment\n      confirmation\
    \ receipt back to the Admin.\n   7) Opaque Transaction [E].  Admin forwards PKI's\
    \ enrollment\n      confirmation receipt back to the Peer.\n"
- title: '3.4.8.  Enrollment Method 3a: Admin Authorizes and Enrolls Directly to'
  contents:
  - "3.4.8.  Enrollment Method 3a: Admin Authorizes and Enrolls Directly to\n    \
    \    PKI\n   In this case, the Admin generates the key pair, PKC request, and\n\
    \   digitally signs the PKC request.  The PKI System does not care where\n   the\
    \ enrollment comes from, as long as it is a valid enrollment.  Once\n   the Admin\
    \ retrieves the PKC, it then automatically forwards it to the\n   IPsec Peer along\
    \ with the key pair.\n   Some IPsec Systems do not have enough CPU power to generate\
    \ a public\n   and private key pair of sufficient strength for secure IPsec. \
    \ In\n   this case, the Admin needs to prove to the PKI that it has such a key\n\
    \   pair; this is normally done by the PKI sending the Admin a nonce,\n   which\
    \ the Admin signs and returns to the PKI along with the end\n   entity's public\
    \ key.  A drawback to this case is that the private key\n   will eventually be\
    \ sent over the wire (though hopefully securely so)\n   from Admin to the IPsec\
    \ Peer; whenever possible, it is preferred to\n   keep a key within its cryptographic\
    \ boundary of origin.  Failing to\n   do so opens the system to risk of the private\
    \ keys being sniffed and\n   discerned.\n   This enrollment mode is depicted in\
    \ Figure 12 and the letters in the\n   following description refer to Figure 3.\
    \  Prior authorization\n   (Section 3.2) and generation (Section 3.3.3) steps\
    \ are not shown.\n       +--------------+     +-----------------------+\n    \
    \   |  Repository  |     |         CA/RA         |\n       +--------------+  \
    \   +-----------------------+\n                                        ^ 1,5\n\
    \                                        |\n                                 \
    \       |\n                                        v 2,6\n                   \
    \               4  +-------+\n                                  +->| Admin |\n\
    \                                  |  +-------+\n                            \
    \      |\n                                  |\n                              3,7\
    \ v\n                +--------------------+          +--------+\n            \
    \    |       IPsec        |          | IPsec  |\n                |      Peer 1\
    \        |          | Peer 2 |\n                +--------------------+       \
    \   +--------+\n                  Figure 12.  VPN-PKI Interaction Steps:\n   \
    \     Admin Generates Keys and PKC Request, and Enrolls Directly\n           \
    \                   with PKI\n   1) Enrollment Request [E].  The Admin requests\
    \ a PKC from the PKI,\n      providing the generated public key.\n   2) Enrollment\
    \ Response [E].  The PKI responds to the enrollment\n      request, providing\
    \ either the new PKC that was generated or a\n      suitable error indication.\n\
    \   3) Opaque Transaction [E].  The Admin forwards the enrollment\n      response\
    \ back to the IPsec Peer, along with the keys.\n   4) Opaque Transaction [E].\
    \  Peer positively acknowledges receipt of\n      new PKC back to the Admin.\n\
    \   5) Enrollment Confirmation [E].  Admin forwards enrollment\n      confirmation\
    \ back to the PKI.\n   6) Enrollment Confirmation Receipt [E].  PKI sends enrollment\n\
    \      confirmation receipt back to the Admin.\n   7) Opaque Transaction [E].\
    \  Admin forwards PKI's enrollment\n      confirmation receipt back to the Peer.\n"
- title: '3.4.9.  Enrollment Method 3b: Admin Requests and PKI Generates and'
  contents:
  - "3.4.9.  Enrollment Method 3b: Admin Requests and PKI Generates and\n        Sends\
    \ PKC\n   In this instance, the PKI and Admin have previously agreed to have\n\
    \   the PKI generate keys and certificates when the PKI receives an\n   authorization\
    \ request.  The PKI returns to the IPsec Peer through the\n   Admin, the final\
    \ product of a key pair and PKC.  Again, the mechanism\n   for the Peer to Admin\
    \ communication is opaque.\n   A drawback to this case is that the private key\
    \ will eventually be\n   sent over the wire (though hopefully securely so) from\
    \ Admin to the\n   IPsec Peer; whenever possible, it is preferred to keep a key\
    \ within\n   its cryptographic boundary of origin.  Failing to do so opens the\n\
    \   system to risk of the private keys being sniffed and discerned.\n   This enrollment\
    \ mode is depicted in Figure 13 and the letters in the\n   following description\
    \ refer to Figure 3.  Prior authorization\n   (Section 3.2) and generation (Section\
    \ 3.3.4) steps are not shown.\n       +--------------+     +-----------------------+\n\
    \       |  Repository  |     |         CA/RA         |\n       +--------------+\
    \     +-----------------------+\n                                        ^ 4\n\
    \                                        |\n                                 \
    \       |\n                                        v 1,5\n                   \
    \               3  +-------+\n                                  +->| Admin |\n\
    \                                  |  +-------+\n                            \
    \      |\n                                  |\n                              2,6\
    \ v\n                +--------------------+        +--------+\n              \
    \  |       IPsec        |        | IPsec  |\n                |      Peer 1   \
    \     |        | Peer 2 |\n                +--------------------+        +--------+\n\
    \                  Figure 13.  VPN-PKI Interaction Steps:\n               PKI\
    \ Generates Keys, PKC Request, and Enrolls\n                             Directly\
    \ with PKI\n   1) Enrollment Response [E].  The PKI responds to the authorization\n\
    \      request sent, providing either the new PKC and public-private key\n   \
    \   pair that were generated or a suitable error indication.\n   2) Opaque Transaction\
    \ [E].  The Admin forwards the enrollment\n      response back to the IPsec Peer,\
    \ along with the keys.\n   3) Opaque Transaction [E].  Peer positively acknowledge\
    \ receipt of\n      new PKC back to the Admin.\n   4) Enrollment Confirmation\
    \ [E].  Admin forwards enrollment\n      confirmation back to the PKI.\n   5)\
    \ Enrollment Confirmation Receipt [E].  PKI sends enrollment\n      confirmation\
    \ receipt back to the Admin.\n   6) Opaque Transaction [E].  Admin forwards PKI's\
    \ enrollment\n      confirmation receipt back to the Peer.\n"
- title: 3.4.10.  Confirmation Handshake
  contents:
  - "3.4.10.  Confirmation Handshake\n   Any time a new PKC is issued by the PKI,\
    \ a confirmation of PKC\n   receipt MUST be sent back to the PKI by the Peer or\
    \ the Admin\n   (forwarding the Peer's confirmation).\n   Operationally, the Peer\
    \ MUST send a confirmation to the PKI verifying\n   that it has received the PKC,\
    \ loaded it, and can use it effectively\n   in an IKE exchange.  This requirement\
    \ exists so that:\n     - The PKI does not publish the new PKC in the repository\
    \ for others\n       until that PKC is able to be used effectively by the Peer,\
    \ and\n     - A revocation may be invoked if the PKC is not received and\n   \
    \    operational within an allowable window of time.\n   To assert such proof,\
    \ the Peer MUST sign a portion of data with the\n   new key.  The result MUST\
    \ be sent to the PKI.  The entity that\n   actually sends the result to the PKI\
    \ MAY be either the Peer (sending\n   it directly to the PKI) or Admin (the Peer\
    \ would send it to Admin,\n   and Admin can, in turn, send it to the PKI).\n \
    \  The Admin MUST acknowledge the successful receipt of the\n   confirmation,\
    \ thus signaling to the Peer that it may proceed using\n   this PKC in IKE connections.\
    \  The PKI MUST complete all the\n   processing necessary to enable the Peer's\
    \ operational use of the new\n   PKC (for example, writing the PKC to the repository)\
    \ before sending\n   the confirmation acknowledgement.  The Peer MUST NOT begin\
    \ using the\n   PKC until the PKI's confirmation acknowledgement has been received.\n"
- title: 3.4.11.  Error Handling for Enrollment
  contents:
  - "3.4.11.  Error Handling for Enrollment\n   Thorough error condition descriptions\
    \ and handling instructions are\n   REQUIRED for each transaction in the enrollment\
    \ process.  Providing\n   such error codes will greatly aid interoperability efforts\
    \ between\n   the PKI and IPsec products.\n   The profile will clarify what happens\
    \ if the request and retrieval\n   fails for some reason.  The following cases\
    \ MUST be covered:\n     - Admin or Peer cannot send the request.\n     - Admin\
    \ or Peer sent the request, but the PKI did not receive the\n       request.\n\
    \     - PKI received the request, but could not read it effectively.\n     - PKI\
    \ received and read the request, but some contents of the\n       request violated\
    \ the PKI's configured policy such that the PKI\n       was unable to generate\
    \ the PKC.\n     - The PKI System generated the PKC, but could not send it.\n\
    \     - The PKI sent the PKC, but the requestor (Admin or Peer) did not\n    \
    \   receive it.\n     - The Requestor (Admin or Peer) received the PKC, but could\
    \ not\n       process it due to incorrect contents, or other PKC-construction-\n\
    \       related problem.\n     - The Requestor failed trying to generate the confirmation.\n\
    \     - The Requestor failed trying to send the confirmation.\n     - The Requestor\
    \ sent the confirmation, but the PKI did not receive\n       it.\n     - The PKI\
    \ received the confirmation but could not process it.\n   In each case the following\
    \ questions MUST be addressed:\n     - What does Peer do?\n     - What does Admin\
    \ do?\n     - What does PKI do?\n     - Is Authorization used?\n   If a failure\
    \ occurs after the PKI sends the PKC and before the Peer\n   receives it, then\
    \ the Peer MUST re-request with the same\n   authorization ID and one-time authorization\
    \ token.  The PKI, seeing\n   the authorization ID and authorization token, MUST\
    \ send the PKC\n   again.\n   Enrollment errors MUST be sent to the Admin regardless\
    \ of the entity\n   that generated the enrollment request.\n"
- title: 3.5.  Lifecycle
  contents:
  - "3.5.  Lifecycle\n   This section refers to the [L] elements labeled in Figure\
    \ 3.\n   Once the PKI has issued a PKC for the end entity Peer, the Peer MUST\n\
    \   be able to either contact the PKI directly or through the Admin for\n   any\
    \ subsequent rekeys, renewals, updates, or revocations.  The PKI\n   MUST support\
    \ either case for renewals, updates, and revocations.\n   Rekeys are Admin initiated;\
    \ therefore, Peer initiated rekeys MUST be\n   transferred via the Admin.\n"
- title: 3.5.1.  One Protocol
  contents:
  - "3.5.1.  One Protocol\n   One protocol MUST be specified for rekey, renew, and\
    \ update requests,\n   responses, and confirmations.  It MUST be the same protocol\
    \ as is\n   specified in Section 3.4.\n   Revocation requests MAY use the same\
    \ protocol as rekey, renew, and\n   update operations.  Revocation requests MAY\
    \ also occur via email,\n   telephone, Instant Messaging, etc.\n"
- title: 3.5.2.  PKC Rekeys, Renewals, and Updates
  contents:
  - "3.5.2.  PKC Rekeys, Renewals, and Updates\n   Rekeys, renewals, and updates are\
    \ variants of a PKC enrollment\n   request scenario with unique operational and\
    \ management requirements.\n     - A PKC rekey replaces an end entity's PKC with\
    \ a new PKC that has\n       a new public key for the same SubjectName and SubjectAltName\n\
    \       contents before the end entity's currently held PKC expires.\n     - A\
    \ PKC renewal replaces an end entity's PKC with the same public\n       key for\
    \ the same SubjectName and SubjectAlternativeName contents\n       as an existing\
    \ PKC before that PKC expires.\n     - A PKC update is defined as a new PKC issuance\
    \ with the same\n       public key for an altered SubjectName or SubjectAlternativeName\n\
    \       before expiration of the end entity's current PKC.\n   When sending rekey,\
    \ renew, or update requests, the entire contents of\n   the PKC request needs\
    \ to be sent to the PKI, not just the changed\n   elements.\n   The rekey, renew,\
    \ and update requests MUST be signed by the private\n   key of the old PKC.  This\
    \ will allow the PKI to verify the identity\n   of the requestor, and ensure that\
    \ an attacker does not submit a\n   request and receive a PKC with another end\
    \ entity's identity.\n   Whether or not a new key is used for the new PKC in a\
    \ renew or update\n   scenario is a matter of local security policy, and MUST\
    \ be specified\n   by the Admin to the PKI in the original authorization request.\n\
    \   Reusing the same key is permitted, but not encouraged.  If a new key\n   is\
    \ used, the update or renew request must be signed by both the old\n   key --\
    \ to prove the right to make the request -- and the new key --\n   to use for\
    \ the new PKC.\n   The new PKC resulting from a rekey, renew, or update will be\n\
    \   retrieved in-band, using the same mechanism as a new PKC request.\n   For\
    \ the duration of time after a rekey, renew, or update has been\n   processed\
    \ and before PKI has received confirmation of the Peer's\n   successful receipt\
    \ of the new PKC, both PKCs (the old and the new)\n   for the end entity will\
    \ be valid.  This will allow the Peer to\n   continue with uninterrupted IKE connections\
    \ with the previous PKC\n   while the rekey, renewal, or update process occurs.\n\
    \   After the rekey, renewal, or update occurs, the question now exists\n   for\
    \ the PKI of what to do about the old PKC.  If the old PKC is to be\n   made unusable,\
    \ the PKI will need to add it to the revocation list,\n   removed from the repository;\
    \ however this should only occur once all\n   connections that used the old PKC\
    \ have expired.  The decision about\n   if the old PKC should be made unusable\
    \ is determined by local policy.\n   Either the PKI or the Admin MUST specify\
    \ this parameter during the\n   authorization phase.  In this case, the PKI or\
    \ the Admin MUST also\n   specify the length of time from when the PKI receives\
    \ the end entity\n   Peer's confirmation (of receipt of the PKC) until when the\
    \ old PKC is\n   made unusable.\n   In the case where the new keys were generated\
    \ for a renew or update\n   request and for rekey requests, once the Peer receives\
    \ the\n   confirmation acknowledgement from the PKI, it is good practice for\n\
    \   the old key pair to be destroyed as soon as possible.  Deletion can\n   occur\
    \ once all connections that used the old PKC have expired.\n   If a PKC has been\
    \ revoked, it MUST NOT be allowed a rekey, renewal,\n   or update.\n   Should\
    \ the PKC expire without rekey, renewal, or update, an entirely\n   new request\
    \ MUST be made.\n"
- title: 3.5.2.1.  Rekey Request
  contents:
  - "3.5.2.1.  Rekey Request\n   Admins manage rekeys to ensure uninterrupted use\
    \ of the VPN by Peers\n   with new keys.  Rekeys can occur automatically if the\
    \ Admin is\n   configured to initiate a new authorization for the rekey.\n   Scenarios\
    \ for rekey are omitted as they use the same scenarios used\n   in the original\
    \ PKC enrollment from Sections 3.2, 3.3, and 3.4.\n"
- title: 3.5.2.2.  Renew Request
  contents:
  - "3.5.2.2.  Renew Request\n   Admins manage renewals to ensure uninterrupted use\
    \ of the VPN by\n   Peers with the same key pair.\n   At the time of authorization,\
    \ certain details about renewal\n   acceptance will be conveyed by the Admin to\
    \ the PKI, as stated in\n   Section 3.2.4.2.  The renewal request MUST match the\
    \ conditions that\n   were specified in the original authorization for:\n    \
    \ - Keys: New, existing, or either.\n     - Requestor: End entity Peer, Admin,\
    \ or either.\n     - Period: How soon before PKC expiry.\n     - Time: Length\
    \ of time before making the old PKC unusable.\n   If any of these conditions are\
    \ not met, the PKI must reject the\n   renewal and log the event.\n   Scenarios\
    \ for renewal are omitted as they use the same scenarios used\n   in the original\
    \ PKC enrollment from Sections 3.2, 3.3, and 3.4.\n"
- title: 3.5.2.3.  Update Request
  contents:
  - "3.5.2.3.  Update Request\n   An update to the contents of a PKC will be necessary\
    \ when details\n   about an end entity Peer's identity change, but the Operator\
    \ does not\n   want to generate a new PKC from scratch, requiring a whole new\n\
    \   authorization.  For example, a gateway device may be moved from one\n   site\
    \ to another.  Its IPv4 Address will change in the SubjectAltName\n   extension,\
    \ but all other information could stay the same.  Another\n   example is an end\
    \ user who gets married and changes the last name or\n   moves from one department\
    \ to another.  In either case, only one field\n   (the Surname or Organizational\
    \ Unit (OU) in the DN) need change.\n   An update differs from a rekey or a renewal\
    \ in a few ways:\n     - A new key is not necessary\n     - The timing of the\
    \ update event is not predictable, as is the case\n       with a scheduled rekey\
    \ or renewal.\n     - The update request may occur at any time during a PKC's\
    \ period of\n       validity.\n     - Once the update is completed, and the new\
    \ PKC is confirmed, the\n       old PKC should cease to be usable, as its contents\
    \ no longer\n       accurately describe the subject.\n   At the time of authorization,\
    \ certain details about update acceptance\n   can be conveyed by the Admin to\
    \ the PKI, as stated in Section\n   3.2.4.2.  The update request MUST match the\
    \ conditions that were\n   specified in the original authorization for:\n    \
    \ - Keys: new, existing, or either.\n     - Requestor: End entity Peer, Admin,\
    \ or either.\n     - The fields in the Subject and SubjectAltName that are changeable.\n\
    \     - Time: Length of time before making the old PKC unusable.\n   If any of\
    \ these conditions are not met, the PKI MUST reject the\n   update and log the\
    \ event.\n   If an update authorization was not made at the time of original\n\
    \   authorization, one can be made from Admin to the PKI at any time\n   during\
    \ the PKC's valid life.  When such an update is desired, Admin\n   must notify\
    \ the PKI System that an update is authorized for the end\n   entity and must\
    \ specify the new contents.  Admin then initiates the\n   update request with\
    \ the given contents in whichever mechanism the VPN\n   System employs (direct\
    \ from end entity to PKI, from end entity\n   through Admin, or directly from\
    \ Admin).\n   Scenarios for update are omitted as they use the same scenarios\
    \ used\n   in the original PKC enrollment from Sections 3.2, 3.3, and 3.4.\n"
- title: 3.5.2.4.  Error Handling for Rekey, Renewal, and Update
  contents:
  - "3.5.2.4.  Error Handling for Rekey, Renewal, and Update\n   Thorough error condition\
    \ descriptions and handling instructions are\n   required for each transaction\
    \ in the rekey, renewal, or update\n   process.  Providing such error codes will\
    \ greatly aid\n   interoperability efforts between the PKI and IPsec products.\n"
- title: 3.5.2.5.  Confirmation Handshakes
  contents:
  - "3.5.2.5.  Confirmation Handshakes\n   The confirmation handshake requirements\
    \ are the same as in Sections\n   3.2, 3.3, and 3.4 except that depending on the\
    \ Administrative policy\n   the PKI MUST also issue a revocation on the original\
    \ PKC before\n   sending the confirmation response.\n"
- title: 3.5.3.  Revocation
  contents:
  - "3.5.3.  Revocation\n   The Peer MUST be able to initiate revocation for its own\
    \ PKC.  In\n   this case the revocation request MUST be signed by the Peer's current\n\
    \   key pair for the PKC it wishes to revoke.  Whether the actual\n   revocation\
    \ request transaction occurs directly with the PKI or is\n   first sent to Admin\
    \ (who proxies or forwards the request to the PKI)\n   is a matter of implementation.\n\
    \   The Admin MUST be able to initiate revocation for any PKC issued\n   under\
    \ a template it controls.  The Admin will identify itself to the\n   PKI by use\
    \ of its own PKC; it MUST sign any revocation request to the\n   PKI with the\
    \ private key from its own PKC.  The PKI MUST have the\n   ability to configure\
    \ Admin(s) with revocation authority, as\n   identified by its PKC.  Any PKC authorizations\
    \ must specify if said\n   PKC may be revoked by the Admin (see Section 3.2.3.2\
    \ for more\n   details).\n   The profile MUST identify the one protocol or transaction\
    \ within a\n   protocol to be used for both Peer and Admin initiated revocations.\n\
    \   The profile MUST identify the size of CRL the client will be prepared\n  \
    \ to support.\n   Below are guidelines for revocation in specific transactions:\n\
    \     - AFTER RENEW, BEFORE EXPIRATION: The PKI MUST be responsible for\n    \
    \   the PKC revocation during a renew transaction.  PKI MUST revoke\n       the\
    \ PKC after receiving the confirm notification from the Peer,\n       and before\
    \ sending the confirm-ack to the Peer.  The Peer MUST\n       NOT revoke its own\
    \ PKC in this case.\n     - AFTER UPDATE, BEFORE EXPIRATION: The PKI MUST be responsible\
    \ for\n       the PKC revocation during an update transaction.  PKI MUST revoke\n\
    \       the PKC after receiving the confirm notification from the Peer,\n    \
    \   and before sending the confirm-ack to the Peer.  The Peer MUST\n       NOT\
    \ revoke its own PKC in this case.\n"
- title: 3.6.  Repositories
  contents:
  - "3.6.  Repositories\n   This section refers to the [R] elements labeled in Figure\
    \ 3.\n"
- title: 3.6.1.  Lookups
  contents:
  - "3.6.1.  Lookups\n   The PKI System SHOULD be built so that lookups resolve directly\
    \ and\n   completely at the URL indicated in a CDP or AIA.  The PKI SHOULD be\n\
    \   built such that URL contents do not contain referrals to other hosts\n   or\
    \ URLs, as such referral lookups will increase the time to complete\n   the IKE\
    \ negotiation, and can cause implementations to timeout.\n   CDP MUST be flagged\
    \ as required in the authorization request.  The\n   method MUST also be specified:\
    \ the HTTP method MUST be method; the\n   Lightweight Directory Access Protocol\
    \ (LDAP) method MAY be supported.\n   The complete hierarchical PKC chain (except\
    \ the trust anchor) MUST be\n   able to be searched in their respective repositories.\
    \  The\n   information to accomplish these searches MUST be adequately\n   communicated\
    \ in the PKCs sent during the IKE transaction.\n   All PKCs must be retrievable\
    \ through a single protocol.  The final\n   specification will identify one protocol\
    \ as a \"MUST\", others MAY be\n   listed as \"OPTIONAL\".\n   The general requirements\
    \ for the retrieval protocol include:\n     - The protocol can be easily firewalled\
    \ (including Network Address\n       Translation (NAT) or Port Address Translation\
    \ (PAT)).\n     - The protocol can easily perform some query against a remote\n\
    \       repository on a specific ID element that was given to it in a\n      \
    \ standard PKC field.\n   Other considerations include:\n     - Relative speed\n\
    \     - Relative ease of administration\n     - Scalability\n   Intermediate PKCs\
    \ will be needed for the case of re-keying of the CA,\n   or a PKI System where\
    \ multiple CAs exist.\n   PKCs MAY have extendedKeyusage to help identify the\
    \ proper PKC for\n   IPsec, though the default behavior is to not use them (see\
    \ 3.1.5.3).\n   IPsec Peers MUST be able to resolve Internet domain names and\
    \ support\n   the mandatory repository access protocol at the time of starting\
    \ up\n   so they can perform the PKC lookups.\n   IPsec Peers should cache PKCs\
    \ to reduce latency in setting up Phase\n   1.  Note that this is an operational\
    \ issue, not an interoperability\n   issue.\n   The use case for accomplishing\
    \ lookups when PKCs are not sent in IKE\n   is a stated non-goal of the profile\
    \ at this time.\n"
- title: 3.6.2.  Error Handling for Repository Lookups
  contents:
  - "3.6.2.  Error Handling for Repository Lookups\n   Thorough error condition descriptions\
    \ and handling instructions are\n   required for each transaction in the repository\
    \ lookup process.\n   Providing such error codes will greatly aid interoperability\
    \ efforts\n   between the PKI and IPsec products.\n"
- title: 3.7.  Trust
  contents:
  - '3.7.  Trust

    '
- title: 3.7.1.  Trust Anchor PKC Acquisition
  contents:
  - "3.7.1.  Trust Anchor PKC Acquisition\n   The root PKC MUST arrive on the Peer\
    \ via one of two methods:\n   (a) Peer can get the root PKC via its secure communication\
    \ with\n       Admin.  This requires the Peer to know less about interaction\n\
    \       with the PKI.\n   (b) Admin can command Peer to retrieve the root cert\
    \ directly from\n       the PKI.  How retrieval of the root cert takes place is\
    \ beyond\n       the scope of this document, but is assumed to occur via an\n\
    \       unauthenticated but confidential enrollment protocol.\n"
- title: 3.7.2.  Certification Path Validation
  contents:
  - "3.7.2.  Certification Path Validation\n   The IPsec Peer MUST perform identity\
    \ verification based on the fields\n   of the PKC and parameters applicable to\
    \ the VPN Security Association.\n   The fields of the PKC used for verification\
    \ MAY include either the\n   X.500 Distinguished Name (DN) within the Subject\
    \ Name, or a specific\n   field within the Extension SubjectAltName (per [DOI]\
    \ 4.6.2.1\n   Identification Type Values).  Usage descriptions for each follow.\n\
    \   The Peers or a Simple Certificate Validation Protocol (SCVP) server\n   MUST\
    \ validate the certification path, as per RFC 3280.  The contents\n   necessary\
    \ in the PKC to allow this will be enumerated in the profile\n   document.\n \
    \  The Peer MAY have the ability to construct the certification path\n   itself;\
    \ however, Admin MUST be able to supply Peers with the trust\n   anchor and any\
    \ chaining PKCs necessary.  The Admin MAY ensure the\n   template uses the AIA\
    \ extension in PKCs as a means of facilitating\n   path validation.\n   DNS MUST\
    \ be supported by the Peers in order to support resolving URLs\n   present in\
    \ CDPs and AIA extensions.\n"
- title: 3.7.3.  Revocation Checking and Status Information
  contents:
  - "3.7.3.  Revocation Checking and Status Information\n   The PKI System MUST provide\
    \ a mechanism whereby Peers can check the\n   revocation status of PKCs that are\
    \ presented to it for IKE identity.\n   The mechanism should allow for access\
    \ to extremely fresh revocation\n   information.  CRLs have been chosen as the\
    \ mechanism for\n   communicating this information.  Operators are RECOMMENDED\
    \ to refresh\n   CRLs as often as logistically possible.\n   A single mandatory\
    \ protocol mechanism for performing CRL lookups MUST\n   be specified by the final\
    \ specification.\n   All PKCs used in IKE MUST have cRLDistributionPoint and\n\
    \   authorityInfoAccess fields populated with valid URLs.  This will\n   allow\
    \ all recipients of the PKC to know immediately how revocation is\n   to be accomplished,\
    \ and where to find the revocation information.\n   The AIA is needed in an environment\
    \ where multiple layers of CAs\n   exist and for the case of a CA key roll-over.\n\
    \   IPsec Systems have an OPTION to turn off revocation checking.  Such\n   may\
    \ be desired when the two Peers are communicating over a network\n   without access\
    \ to the CRL service, such as at a trade show, in a lab,\n   or in a demo environment.\
    \  If revocation checking is OFF, the\n   implementation MUST proceed to use the\
    \ PKC as valid identity in the\n   exchange and need not perform any check.\n\
    \   If the revocation of a PKC is used as the only means of deactivation\n   of\
    \ access authorization for the Peer (or user), then the speed of\n   deactivation\
    \ will be as rapid as the refresh rate of the CRL issued\n   and published by\
    \ the PKI.  If more immediate deactivation of access\n   is required than the\
    \ CRL refreshing can provide, then another\n   mechanism for authorization that\
    \ provides more immediate access\n   deactivation should be layered into the VPN\
    \ deployment.  Such a\n   second mechanism is out of the scope of this profile.\
    \  (Examples are\n   Xauth, L2TP's authentication, etc.)\n"
- title: 3.7.4.  Error Handling in Revocation Checking and Certificate Path
  contents:
  - "3.7.4.  Error Handling in Revocation Checking and Certificate Path\n        Validation\n\
    \   Thorough error condition descriptions and handling instructions are\n   required\
    \ for each transaction in the revocation checking and path\n   validation process.\
    \  Providing such error codes will greatly aid\n   interoperability efforts between\
    \ the PKI and IPsec products.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This requirements document does not specify a\
    \ concrete solution, and\n   as such has no system-related security considerations\
    \ per se.\n   However, the intent of the PKI4IPSEC WG was to profile and use\n\
    \   concrete protocols for certificate management (e.g., Cryptographic\n   Message\
    \ Syntax (CMS), Certificate Management over CMS (CMC),\n   Certificate Request\
    \ Message Format (CRMF)).  The individual security\n   considerations of these\
    \ protocols should be carefully considered in\n   the profiling effort.\n   In\
    \ addition, this document allows significant flexibility in the\n   allocation\
    \ of functions between the roles of Peer and Admin.  This\n   functional allocation\
    \ is crucial both to achieving successful\n   deployment, and to maintaining the\
    \ integrity of the PKI enrollment\n   and management processes.  However, much\
    \ of the responsibility for\n   this allocation necessarily falls to product implementers\
    \ and system\n   operators through the selection of applicable use cases and\n\
    \   development of security policy constraints.  These factors must be\n   carefully\
    \ considered to ensure the security of PKI4IPSEC certificate\n   management.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [MUSTSHOULD]     Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [CERTPROFILE]    Housley, R., Polk, W., Ford,\
    \ W., and D. Solo,\n                    \"Internet X.509 Public Key Infrastructure\n\
    \                    Certificate and Certificate Revocation List (CRL)\n     \
    \               Profile\", RFC 3280, April 2002.\n   [DOI]            Piper, D.,\
    \ \"The Internet IP Security Domain of\n                    Interpretation for\
    \ ISAKMP\", RFC 2407, November 1998.\n   [FRAME]          Chokhani, S., Ford,\
    \ W., Sabett, R., Merrill, C., and\n                    S. Wu, \"Internet X.509\
    \ Public Key Infrastructure\n                    Certificate Policy and Certification\
    \ Practices\n                    Framework\", RFC 3647, November 2003.\n   [IKECERTPROFILE]\
    \ Korver, B., \"The Internet IP Security PKI Profile of\n                    IKEv1/ISAKMP,\
    \ IKEv2, and PKIX\", Work in Progress,\n                    February 2007.\n \
    \  [IKEv1]          Harkins, D. and D. Carrel, \"The Internet Key\n          \
    \          Exchange (IKE)\", RFC 2409, November 1998.\n   [IKEv2]          Kaufman,\
    \ C., \"Internet Key Exchange (IKEv2)\n                    Protocol\", RFC 4306,\
    \ December 2005.\n   [IPsec]          Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                    Internet Protocol\", RFC 4301, December 2005.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This RFC is substantially based on a prior document\
    \ developed by\n   Project Dploy.  The principle editor of that document was Gregory\
    \ M.\n   Lebovitz (NetScreen/Juniper).  Contributing authors included\n   Lebovitz,\
    \ Paul Hoffman (VPN Consortium), Hank Mauldin (Cisco\n   Systems), and Jussi Kukkonen\
    \ (SSH Communications Security).\n   Substantial editorial contributions were\
    \ made by Leo Pluswick (ICSA),\n   Tim Polk (NIST), Chris Wells (SafeNet), Thomas\
    \ Hardjono (VeriSign),\n   Carlisle Adams (Entrust), and Michael Shieh (NetScreen/Juniper).\n\
    \   Once brought to the IETF's PKI4IPSEC WG, the following people made\n   substantial\
    \ contributions: Jim Schaad and Stefan Santesson.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Chris Bonatti\n   IECA, Inc.\n   EMail: Bonattic@ieca.com\n\
    \   Sean Turner\n   IECA, Inc.\n   EMail: Turners@ieca.com\n   Gregory M. Lebovitz\n\
    \   Juniper\n   EMail: gregory.ietf@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
