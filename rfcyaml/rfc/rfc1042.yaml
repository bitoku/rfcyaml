- contents:
  - ' A Standard for the Transmission of IP Datagrams over IEEE 802 Networks

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies a standard method of encapsulating
    the Internet\n   Protocol (IP) [1] datagrams and Address Resolution Protocol (ARP)
    [2]\n   requests and replies on IEEE 802 Networks.  This RFC specifies a\n   protocol
    standard for the Internet community.  Distribution of this\n   memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Acknowledgment\n   This memo would not exist with out the very significant contributions\n
    \  of Drew Perkins of Carnegie Mellon University, Jacob Rekhter of the\n   T.J.
    Watson Research Center, IBM Corporation, and Joseph Cimmino of\n   the University
    of Maryland.\n"
  title: Acknowledgment
- contents:
  - "Introduction\n   The goal of this specification is to allow compatible and\n
    \  interoperable implementations for transmitting IP datagrams and ARP\n   requests
    and replies.  To achieve this it may be necessary in a few\n   cases to limit
    the use that IP and ARP make of the capabilities of a\n   particular IEEE 802
    standard.\n   The IEEE 802 specifications define a family of standards for Local\n
    \  Area Networks (LANs) that deal with the Physical and Data Link Layers\n   as
    defined by the ISO Open System Interconnection Reference Model\n   (ISO/OSI).
    \ Several Physical Layer standards (802.3, 802.4, and\n   802.5) [3,4,5] and one
    Data Link Layer Standard (802.2) [6] have been\n   defined.  The IEEE Physical
    Layer standards specify the ISO/OSI\n   Physical Layer and the Media Access Control
    Sublayer of the ISO/OSI\n   Data Link Layer.  The 802.2 Data Link Layer standard
    specifies the\n   Logical Link Control Sublayer of the ISO/OSI Data Link Layer.\n
    \  This memo describes the use of IP and ARP on the three types of\n   networks.
    \ At this time, it is not necessary that the use of IP and\n   ARP be consistent
    across all three types of networks, only that it be\n   consistent within each
    type.  This may change in the future as new\n   IEEE 802 standards are defined
    and the existing standards are revised\n   allowing for interoperability at the
    Data Link Layer.\n   It is the goal of this memo to specify enough about the use
    of IP and\n   ARP on each type of network to ensure that:\n      (1) all equipment
    using IP or ARP on 802.3 networks will\n      interoperate,\n      (2) all equipment
    using IP or ARP on 802.4 networks will\n      interoperate,\n      (3) all equipment
    using IP or ARP on 802.5 networks will\n      interoperate.\n   Of course, the
    goal of IP is interoperability between computers\n   attached to different networks,
    when those networks are\n   interconnected via an IP gateway [8].  The use of
    IEEE 802.1\n   compatible Transparent Bridges to allow interoperability across\n
    \  different networks is not fully described pending completion of that\n   standard.\n"
  title: Introduction
- contents:
  - "Description\n   IEEE 802 networks may be used as IP networks of any class (A,
    B, or\n   C).  These systems use two Link Service Access Point (LSAP) fields of\n
    \  the LLC header in much the same way the ARPANET uses the \"link\"\n   field.
    \ Further, there is an extension of the LLC header called the\n   Sub-Network
    Access Protocol (SNAP).\n   IP datagrams are sent on IEEE 802 networks encapsulated
    within the\n   802.2 LLC and SNAP data link layers, and the 802.3, 802.4, or 802.5\n
    \  physical networks layers.  The SNAP is used with an Organization Code\n   indicating
    that the following 16 bits specify the EtherType code (as\n   listed in Assigned
    Numbers [7]).\n   Normally, all communication is performed using 802.2 type 1\n
    \  communication.  Consenting systems on the same IEEE 802 network may\n   use
    802.2 type 2 communication after verifying that it is supported\n   by both nodes.
    \ This is accomplished using the 802.2 XID mechanism.\n   However, type 1 communication
    is the recommended method at this time\n   and must be supported by all implementations.
    \ The rest of this\n   specification assumes the use of type 1 communication.\n
    \  The IEEE 802 networks may have 16-bit or 48-bit physical addresses.\n   This
    specification allows the use of either size of address within a\n   given IEEE
    802 network.\n   Note that the 802.3 standard specifies a transmission rate of
    from 1\n   to 20 megabit/second, the 802.4 standard specifies 1, 5, and 10\n   megabit/second,
    and the 802.5 standard specifies 1 and 4\n   megabit/second.  The typical transmission
    rates used are 10\n   megabit/second for 802.3, 10 megabit/second for 802.4, and
    4\n   megabit/second for 802.5.  However, this specification for the\n   transmission
    of IP Datagrams does not depend on the transmission\n   rate.\n"
  title: Description
- contents:
  - "Header Format\n                                                                  Header\n
    \  ...--------+--------+--------+\n              MAC Header        |                        802.{3/4/5}
    MAC\n   ...--------+--------+--------+\n   +--------+--------+--------+\n   |
    DSAP=K1| SSAP=K1| Control|                                802.2 LLC\n   +--------+--------+--------+\n
    \  +--------+--------+---------+--------+--------+\n   |Protocol Id or Org Code
    =K2|    EtherType    |            802.2 SNAP\n   +--------+--------+---------+--------+--------+\n
    \  The total length of the LLC Header and the SNAP header is 8-octets,\n   making
    the 802.2 protocol overhead come out on an nice boundary.\n   The K1 value is
    170 (decimal).\n   The K2 value is 0 (zero).\n   The control value is 3 (Unnumbered
    Information).\n"
  title: Header Format
- contents:
  - "Address Mappings\n   The mapping of 32-bit Internet addresses to 16-bit or 48-bit
    IEEE 802\n   addresses must be done via the dynamic discovery procedure of the\n
    \  Address Resolution Protocol (ARP) [2].\n   Internet addresses are assigned
    arbitrarily on Internet networks.\n   Each host's implementation must know its
    own Internet address and\n   respond to Address Resolution requests appropriately.
    \ It must also\n   use ARP to translate Internet addresses to IEEE 802 addresses
    when\n   needed.\n   The ARP Details\n      The ARP protocol has several fields
    that parameterize its use in\n      any specific context [2].  These fields are:\n
    \        hrd     16 - bits       The Hardware Type Code\n         pro     16 -
    bits       The Protocol Type Code\n         hln      8 - bits       Octets in
    each hardware address\n         pln      8 - bits       Octets in each protocol
    address\n         op      16 - bits       Operation Code\n      The hardware type
    code assigned for the IEEE 802 networks (of all\n      kinds) is 6 (see [7] page
    16).\n      The protocol type code for IP is 2048 (see [7] page 14).\n      The
    hardware address length is 2 for 16-bit IEEE 802 addresses, or\n      6 for 48-bit
    IEEE 802 addresses.\n      The protocol address length (for IP) is 4.\n      The
    operation code is 1 for request and 2 for reply.\n"
  title: Address Mappings
- contents:
  - "Broadcast Address\n   The broadcast Internet address (the address on that network
    with a\n   host part of all binary ones) should be mapped to the broadcast IEEE\n
    \  802 address (of all binary ones) (see [8] page 14).\n"
  title: Broadcast Address
- contents:
  - "Trailer Formats\n   Some versions of Unix 4.x bsd use a different encapsulation
    method in\n   order to get better network performance with the VAX virtual memory\n
    \  architecture.  Consenting systems on the same IEEE 802 network may\n   use
    this format between themselves.  Details of the trailer\n   encapsulation method
    may be found in [9].  However, all hosts must be\n   able to communicate using
    the standard (non-trailer) method.\n"
  title: Trailer Formats
- contents:
  - "Byte Order\n   As described in Appendix B of the Internet Protocol specification\n
    \  [1], the IP datagram is transmitted over IEEE 802 networks as a\n   series
    of 8-bit bytes.  This byte transmission order has been called\n   \"big-endian\"
    [11].\n"
  title: Byte Order
- contents:
  - "Maximum Transmission Unit\n   The Maximum Transmission Unit (MTU) differs on
    the different types of\n   IEEE 802 networks.  In the following there are comments
    on the MTU\n   for each type of IEEE 802 network.  However, on any particular\n
    \  network all hosts must use the same MTU.  In the following, the terms\n   \"maximum
    packet size\" and \"maximum transmission unit\" are equivalent.\n"
  title: Maximum Transmission Unit
- contents:
  - "Frame Format and MAC Level Issues\n   For all hardware types\n      IP datagrams
    and ARP requests and replies are transmitted in\n      standard 802.2 LLC Type
    1 Unnumbered Information format, control\n      code 3, with the DSAP and the
    SSAP fields of the 802.2 header set\n      to 170, the assigned global SAP value
    for SNAP [6].  The 24-bit\n      Organization Code in the SNAP is zero, and the
    remaining 16 bits\n      are the EtherType from Assigned Numbers [7] (IP = 2048,
    ARP =\n      2054).\n      IEEE 802 packets may have a minimum size restriction.
    \ When\n      necessary, the data field should be padded (with octets of zero)\n
    \     to meet the IEEE 802 minimum frame size requirements.  This\n      padding
    is not part of the IP datagram and is not included in the\n      total length
    field of the IP header.\n      For compatibility (and common sense) the minimum
    packet size used\n      with IP datagrams is 28 octets, which is 20 (minimum IP
    header) +\n      8 (LLC+SNAP header) = 28 octets (not including the MAC header).\n
    \     The minimum packet size used with ARP is 24 octets, which is 20\n      (ARP
    with 2 octet hardware addresses and 4 octet protocol\n      addresses) + 8 (LLC+SNAP
    header) = 24 octets (not including the\n      MAC header).\n      In typical situations,
    the packet size used with ARP is 32 octets,\n      which is 28 (ARP with 6 octet
    hardware addresses and 4 octet\n      protocol addresses) + 8 (LLC+SNAP header)
    = 32 octets (not\n      including the MAC header).\n      IEEE 802 packets may
    have a maximum size restriction.\n      Implementations are encouraged to support
    full-length packets.\n      For compatibility purposes, the maximum packet size
    used with IP\n      datagrams or ARP requests and replies must be consistent on
    a\n      particular network.\n      Gateway implementations must be prepared to
    accept full-length\n      packets and fragment them when necessary.\n      Host
    implementations should be prepared to accept full-length\n      packets, however
    hosts must not send datagrams longer than 576\n      octets unless they have explicit
    knowledge that the destination is\n      prepared to accept them.  A host may
    communicate its size\n      preference in TCP based applications via the TCP Maximum
    Segment\n      Size option [10].\n      Datagrams on IEEE 802 networks may be
    longer than the general\n      Internet default maximum packet size of 576 octets.
    \ Hosts\n      connected to an IEEE 802 network should keep this in mind when\n
    \     sending datagrams to hosts not on the same IEEE 802 network.  It\n      may
    be appropriate to send smaller datagrams to avoid unnecessary\n      fragmentation
    at intermediate gateways.  Please see [10] for\n      further information.\n      IEEE
    802.2 Details\n         While not necessary for supporting IP and ARP, all\n         implementations
    are required to support IEEE 802.2 standard\n         Class I service.  This requires
    supporting Unnumbered\n         Information (UI) Commands, eXchange IDentification
    (XID)\n         Commands and Responses, and TEST link (TEST) Commands and\n         Responses.\n
    \        When either an XID or a TEST command is received a response\n         must
    be returned; with the Destination and Source addresses,\n         and the DSAP
    and SSAP swapped.\n         When responding to an XID or a TEST command the sense
    of the\n         poll/final bit must be preserved.  That is, a command received\n
    \        with the poll/final bit reset must have the response returned\n         with
    the poll/final bit reset and vice versa.\n         The XID command or response
    has an LLC control field value of\n         175 (decimal) if poll is off or 191
    (decimal) if poll is on.\n         (See Appendix on Numbers.)\n         The TEST
    command or response has an LLC control field value of\n         227 (decimal)
    if poll is off or 243 (decimal) if poll is on.\n         (See Appendix on Numbers.)\n
    \        A command frame is identified with high order bit of the SSAP\n         address
    reset.  Response frames have high order bit of the SSAP\n         address set
    to one.\n         XID response frames should include an 802.2 XID Information\n
    \        field of 129.1.0 indicating Class I (connectionless) service.\n         (type
    1).\n         TEST response frames should echo the information field received\n
    \        in the corresponding TEST command frame.\n   For IEEE 802.3\n      A
    particular implementation of an IEEE 802.3 Physical Layer is\n      denoted using
    a three field notation.  The three fields are data\n      rate in megabit/second,
    medium type, and maximum segment length in\n      hundreds of meters.  One combination
    of of 802.3 parameters is\n      10BASE5 which specifies a 10 megabit/second transmission
    rate,\n      baseband medium, and 500 meter segments.  This correspondes to the\n
    \     specifications of the familiar \"Ethernet\" network.\n      The MAC header
    contains 6 (2) octets of source address, 6 (2)\n      octets of destination address,
    and 2 octets of length.  The MAC\n      trailer contains 4 octets of Frame Check
    Sequence (FCS), for a\n      total of 18 (10) octets.\n      IEEE 802.3 networks
    have a minimum packet size that depends on the\n      transmission rate.  For
    type 10BASE5 802.3 networks the minimum\n      packet size is 64 octets.\n      IEEE
    802.3 networks have a maximum packet size which depends on\n      the transmission
    rate.  For type 10BASE5 802.3 networks the\n      maximum packet size is 1518
    octets including all octets between\n      the destination address and the FCS
    inclusive.\n      This allows 1518 - 18 (MAC header+trailer) - 8 (LLC+SNAP header)
    =\n      1492 for the IP datagram (including the IP header).  Note that\n      1492
    is not equal to 1500 which is the MTU for Ethernet networks.\n   For IEEE 802.4\n
    \     The MAC header contains 1 octet of frame control, 6 (2) octets of\n      source
    address, and 6 (2) octets of destination address.  The MAC\n      trailer contains
    4 octets of Frame Check Sequence (FCS), for a\n      total of 17 (9) octets.\n
    \     IEEE 802.4 networks have no minimum packet size.\n      IEEE 802.4 networks
    have a maximum packet size of 8191 octets\n      including all octets between
    the frame control and the FCS\n      inclusive.\n      This allows 8191 - 17 (MAC
    header+trailer) - 8 (LLC+SNAP header) =\n      8166 for the IP datagram (including
    the IP header).\n   For IEEE 802.5\n      The current standard for token ring's,
    IEEE 802.5-1985, specifies\n      the operation of single ring networks.  However,
    most\n      implementations of 802.5 have added extensions for multi-ring\n      networks
    using source-routing of packets at the MAC layer.  There\n      is now a Draft
    Addendum to IEEE 802.5, \"Enhancement for Multi-Ring\n      Networks\" which attempts
    to standardize these extensions.\n      Unfortunately, the most recent draft (November
    10, 1987) is still\n      rapidly evolving.  More importantly, it differs significantly
    from\n      the existing implementations.  Therefore, the existing\n      implementations
    of 802.5 [13] are described but no attempt is made\n      to specify any future
    standard.\n      The MAC header contains 1 octet of access control, 1 octet of\n
    \     frame control, 6 (2) octets of source address, 6 (2) octets of\n      destination
    address, and (for multi-ring networks) 0 to 18 octets\n      of Routing Information
    Field (RIF).  The MAC trailer contains 4\n      octets of FCS, for a total of
    18 (10) to 36 (28) octets.  There is\n      one additional octet of frame status
    after the FCS.\n      Multi-Ring Extension Details\n         The presence of a
    Routing Information Field is indicated by the\n         Most Significant Bit (MSB)
    of the source address, called the\n         Routing Information Indicator (RII).
    \ If the RII equals zero, a\n         RIF is not present.  If the RII equals 1,
    the RIF is present.\n         Although the RII is indicated in the source address,
    it is not\n         part of a stations MAC layer address.  In particular, the
    MSB\n         of a destination address is the individual/group address\n         indicator,
    and if set will cause such frames to be interpreted\n         as multicasts.  Implementations
    should be careful to reset the\n         RII to zero before passing source addresses
    to other protocol\n         layers which may be confused by their presence.\n
    \        The RIF consists of a two-octet Routing Control (RC) field\n         followed
    by 0 to 8 two-octet Route-Designator (RD) fields.  The\n         RC for all-routes
    broadcast frames is formatted as follows:\n                         0                   1\n
    \                        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n                        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                       |  B  |   LTH   |D|  LF |   r   |\n                        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                      Note that each tick mark represents one bit position.\n
    \           B - Broadcast Indicators: 3 bits\n               The Broadcast Indicators
    are used to indicate the routing\n               desired for a particular frame.
    \ A frame may be routed\n               through a single specified route, through
    every distinct\n               non-repeating route in a multi-ring network, or
    through a\n               single route determined by a spanning tree algorithm
    such\n               that the frame appears on every ring exactly once.  The\n
    \              values which may be used at this time are (in binary):\n                  000
    - Non-broadcast (specific route)\n                  100 - All-routes broadcast
    (global broadcast)\n                  110 - Single-route broadcast (limited broadcast)\n
    \              All other values are reserved for future use.\n            LTH
    - Length: 5 bits\n               The Length bits are used to indicate the length
    or the RI\n               field, including the RC and RD fields.  Only even values\n
    \              between 2 and 30 inclusive are allowed.\n            D - Direction
    Bit: 1 bit\n               The D bit specifies the order of the RD fields.  If
    D\n               equals 1, the routing-designator fields are specified in\n               reverse
    order.\n            LF - Largest Frame: 3 bits\n               The LF bits specify
    the maximum MTU supported by all\n               bridges along a specific route.
    \ All multi-ring broadcast\n               frames should be transmitted with a
    value at least as\n               large as the supported MTU.  The values used
    are:\n                       LF (binary)   MAC MTU      IP MTU\n                           000
    \         552         508\n                           001         1064        1020\n
    \                          010         2088        2044\n                           011
    \        4136        4092\n                           100         8232        8188\n
    \              All other values are reserved for future use.\n               The
    receiver should compare the LF received with the MTU.\n               If the LF
    is greater than or equal to the MTU then no\n               action is taken; however,
    if the LF is less than the MTU\n               the frame is rejected.\n                  There
    are actually three possible actions if LF < MTU.\n                  First is the
    one required for this specification\n                  (reject the frame).  Second
    is to reduce the MTU for\n                  all hosts to equal the LF.  And, third
    is to keep a\n                  separate MTU per communicating host based on the\n
    \                 received LFs.\n            r - reserved: 4 bits\n               These
    bits are reserved for future use and must be set to\n               0 by the transmitter
    and ignored by the receiver.\n         It is not necessary for an implementation
    to interpret\n         routing-designators.  Their format is left unspecified.\n
    \        Routing-designators should be transmitted exactly as received.\n      IEEE
    802.5 networks have no minimum packet size.\n      IEEE 802.5 networks have a
    maximum packet size based on the\n      maximum time a node may hold the token.
    \ This time depends on many\n      factors including the data signalling rate
    and the number of nodes\n      on the ring.  The determination of maximum packet
    size becomes\n      even more complex when multi-ring networks with bridges are\n
    \     considered.\n      Given a token-holding time of 9 milliseconds and a 4\n
    \     megabit/second ring, the maximum packet size possible is 4508\n      octets
    including all octets between the access control and the FCS\n      inclusive.\n
    \     This allows 4508 - 36 (MAC header+trailer with 18 octet RIF) - 8\n      (LLC+SNAP
    header) = 4464 for the IP datagram (including the IP\n      header).\n      However,
    some current implementations are known to limit packets\n      to 2046 octets
    (allowing 2002 octets for IP).  It is recommended\n      that all implementations
    support IP packets of at least 2002\n      octets.\n      By convention, source
    routing bridges used in multi-ring 802.5\n      networks will not support packets
    larger than 8232 octets.  With a\n      MAC header+trailer of 36 octets and the
    LLC+SNAP header of 8\n      octets, the IP datagram (including IP header) may
    not exceed 8188\n      octets.\n      A source routing bridge linking two rings
    may be configured to\n      limit the size of packets forwarded to 552 octets,
    with a MAC\n      header+trailer of 36 octets and the LLC+SNAP of 8 octets, the
    IP\n      datagram (including the IP header) may be limited to 508 octets.\n      This
    is less that the default IP MTU of 576 octets, and may cause\n      significant
    performance problems due to excessive datagram\n      fragmentation.  An implementation
    is not required to support an\n      MTU of less than 576 octets, although it
    is suggest that the MTU\n      be a user-configurable parameter to allow for it.\n
    \     IEEE 802.5 networks support three different types of broadcasts.\n      All-Stations
    broadcasts are sent with no RIF or with the Broadcast\n      Indicators set to
    0 and no Routing Designators, and are copied\n      once by all stations on the
    local ring.  All-Routes broadcasts are\n      sent with the corresponding Broadcast
    Indicators and result in\n      multiple copies equal to the number of distinct
    non-repeating\n      routes a packet may follow to a particular ring.  Single-Route\n
    \     broadcasts result in exactly one copy of a frame being received by\n      all
    stations on the multi-ring network.\n      The dynamic address discovery procedure
    is to broadcast an ARP\n      request.  To limit the number of all rings broadcasts
    to a\n      minimum, it is desirable (though not required) that an ARP request\n
    \     first be sent as an all-stations broadcast, without a Routing\n      Information
    Field (RIF).  If the all-stations (local ring)\n      broadcast is not supported
    or if the all-stations broadcast is\n      unsuccessful after some reasonable
    time has elapsed, then send the\n      ARP request as an all-routes or single-route
    broadcast with an\n      empty RIF (no routing designators).  An all-routes broadcast
    is\n      preferable since it yields an amount of fault tolerance.  In an\n      environment
    with multiple redundant bridges, all-routes broadcast\n      allows operation
    in spite of spanning-tree bridge failures.\n      However, single-route broadcasts
    may be used if IP and ARP must\n      use the same broadcast method.\n      When
    an ARP request or reply is received, all implementations are\n      required to
    understand frames with no RIF (local ring) and frames\n      with an empty RIF
    (also from the local ring).  If the\n      implementation supports multi-ring
    source routing, then a non-\n      empty RIF is stored for future transmissions
    to the host\n      originating the ARP request or reply.  If source routing is
    not\n      supported them all packets with non-empty RIFs should be\n      gracefully
    ignored.  This policy will allow all implementations in\n      a single ring environment,
    to interoperate, whether or not they\n      support the multi-ring extensions.\n
    \     It is possible that when sending an ARP request via an all-routes\n      broadcast
    that multiple copies of the request will arrive at the\n      destination as a
    result of the request being forwarded by several\n      bridges.  However, these
    \"copies\" will have taken different routes\n      so the contents of the RIF
    will differ.  An implementation of ARP\n      in this context must determine which
    of these \"copies\" to use and\n      to ignore the others.  There are three obvious
    and legal\n      strategies: (1) take the first and ignore the rest (that is,
    once\n      you have an entry in the ARP cache don't change it), (2) take the\n
    \     last, (that is, always up date the ARP cache with the latest ARP\n      message),
    or (3) take the one with the shortest path, (that is,\n      replace the ARP cache
    information with the latest ARP message data\n      if it is a shorter route).
    \ Since there is no problem of\n      incompatibility for interworking of different
    implementations if\n      different strategies are chosen, the choice is up to
    each\n      implementor.  The recipient of the ARP request must send an ARP\n
    \     reply as a point to point message using the RIF information.\n      The
    RIF information should be kept distinct from the ARP table.\n      That is, there
    is, in principle, the ARP table to map from IP\n      addresses to 802 48-bit
    addresses, and the RIF table to map from\n      those to 802.5 source routes,
    if necessary.  In practical\n      implementations it may be convenient to store
    the ARP and RIF\n      information together.\n         Storing the information
    together may speed up access to the\n         information when it is used.  On
    the other hand, in a\n         generalized implementation for all types of 802
    networks a\n         significant amount of memory might be wasted in an ARP cache
    if\n         space for the RIF information were always reserved.\n      IP broadcasts
    (datagrams with a IP broadcast address) must be sent\n      as 802.5 single-route
    broadcasts.  Unlike ARP, all-routes\n      broadcasts are not desirable for IP.
    \ Receiving multiple copies of\n      IP broadcasts would have undesirable effects
    on many protocols\n      using IP.  As with ARP, when an IP packet is received,
    all\n      implementations are required to understand frames with no RIF and\n
    \     frames with an empty RIF.\n      Since current interface hardware allows
    only one group address,\n      and since the functional addresses are not globally
    unique, IP and\n      ARP do not use either of these features.  Further, in the
    IBM\n      style 802.5 networks there are only 31 functional addresses\n      available
    for user definition.\n      IP precedence should not be mapped to 802.5 priority.
    \ All IP and\n      ARP packets should be sent at the default 802.5 priority.
    \ The\n      default priority is 3.\n      After packet transmission, 802.5 provides
    frame not copied and\n      address not recognized indicators.  Implementations
    may use these\n      indicators to provide some amount of error detection and\n
    \     correction.  If the frame not copied bit is set but the address\n      not
    recognized bit is reset, receiver congestion has occurred.  It\n      is suggested,
    though not required, that hosts should retransmit\n      the offending packet
    a small number of times (4) or until\n      congestion no longer occurs.  If the
    address not recognized bit is\n      set, an implementation has 3 options: (1)
    ignore the error and\n      throw the packet away, (2) return an ICMP destination
    unreachable\n      message to the source, or (3) delete the ARP entry which was
    used\n      to send this packet and send a new ARP request to the destination\n
    \     address.  The latter option is the preferred approach since it\n      will
    allow graceful recovery from first hop bridge and router\n      failures and changed
    hardware addresses.\n"
  title: Frame Format and MAC Level Issues
- contents:
  - "Interoperation with Ethernet\n   It is possible to use the Ethernet link level
    protocol [12] on the\n   same physical cable with the IEEE 802.3 link level protocol.
    \ A\n   computer interfaced to a physical cable used in this way could\n   potentially
    read both Ethernet and 802.3 packets from the network.\n   If a computer does
    read both types of packets, it must keep track of\n   which link protocol was
    used with each other computer on the network\n   and use the proper link protocol
    when sending packets.\n   One should note that in such an environment, link level
    broadcast\n   packets will not reach all the computers attached to the network,
    but\n   only those using the link level protocol used for the broadcast.\n   Since
    it must be assumed that most computers will read and send using\n   only one type
    of link protocol, it is recommended that if such an\n   environment (a network
    with both link protocols) is necessary, an IP\n   gateway be used as if there
    were two distinct networks.\n   Note that the MTU for the Ethernet allows a 1500
    octet IP datagram,\n   with the MTU for the 802.3 network allows only a 1492 octet
    IP\n   datagram.\n"
  title: Interoperation with Ethernet
- contents:
  - "Appendix on Numbers\n   The IEEE likes to specify numbers in bit transmission
    order, or bit-\n   wise little-endian order.  The Internet protocols are documented
    in\n   byte-wise big-endian order.  This may cause some confusion about the\n
    \  proper values to use for numbers.  Here are the conversions for some\n   numbers
    of interest.\n   Number          IEEE    IEEE            Internet        Internet\n
    \                  HEX     Binary          Binary          Decimal\n   UI Op Code
    \     C0      11000000        00000011          3\n   SAP for SNAP    55      01010101
    \       10101010        170\n   XID             F5      11110101        10101111
    \       175\n   XID             FD      11111101        10111111        191\n
    \  TEST            C7      11000111        11100011        227\n   TEST            CF
    \     11001111        11110011        243\n   Info            818000                                  129.1.0\n"
  title: Appendix on Numbers
- contents:
  - "References\n   [1]   Postel, J., \"Internet Protocol\", RFC-791, USC/Information\n
    \        Sciences Institute, September 1981.\n   [2]   Plummer, D., \"An Ethernet
    Address Resolution Protocol - or -\n         Converting Network Protocol Addresses
    to 48.bit Ethernet\n         Address for Transmission on Ethernet Hardware\",
    RFC-826, MIT,\n         November 1982.\n   [3]   IEEE, \"IEEE Standards for Local
    Area Networks: Carrier Sense\n         Multiple Access with Collision Detection
    (CSMA/CD) Access\n         Method and Physical Layer Specifications\", IEEE, New
    York, New\n         York, 1985.\n   [4]   IEEE, \"IEEE Standards for Local Area
    Networks: Token-Passing\n         Bus Access Method and Physical Layer Specification\",
    IEEE, New\n         York, New York, 1985.\n   [5]   IEEE, \"IEEE Standards for
    Local Area Networks: Token Ring\n         Access Method and Physical Layer Specifications\",
    IEEE, New\n         York, New York, 1985.\n   [6]   IEEE, \"IEEE Standards for
    Local Area Networks: Logical Link\n         Control\", IEEE, New York, New York,
    1985.\n   [7]   Reynolds, J.K., and J. Postel, \"Assigned Numbers\", RFC-1010,\n
    \        USC/Information Sciences Institute, May 1987.\n   [8]   Braden, R., and
    J. Postel, \"Requirements for Internet\n         Gateways\", RFC-1009, USC/Information
    Sciences Institute, June\n         1987.\n   [9]   Leffler, S., and M. Karels,
    \"Trailer Encapsulations\", RFC-893,\n         University of California at Berkeley,
    April 1984.\n   [10]  Postel, J., \"The TCP Maximum Segment Size Option and Related\n
    \        Topics\", RFC-879, USC/Information Sciences Institute, November\n         1983.\n
    \  [11]  Cohen, D., \"On Holy Wars and a Plea for Peace\", Computer, IEEE,\n         October
    1981.\n   [12]  D-I-X, \"The Ethernet - A Local Area Network: Data Link Layer\n
    \        and Physical Layer Specifications\", Digital, Intel, and Xerox,\n         November
    1982.\n   [13]  IBM, \"Token-Ring Network Architecture Reference\", Second\n         Edition,
    SC30-3374-01, August 1987.\n"
  title: References
