Abstract This document describes a file format suitable for describing directory information or modifications made to directory information.
The file format, known as LDIF, for LDAP Data Interchange Format, is typically used to import and export directory information between LDAP based directory servers, or to describe a set of changes which are to be applied to a directory.
There are a number of situations where a common interchange format is desirable.
For example, one might wish to export a copy of the contents of a directory server to a file, move that file to a different machine, and import the contents into a second directory server.
Additionally, by using a well defined interchange format, development of data import tools from legacy systems is facilitated.
A fairly simple set of tools written in awk or perl can, for example, convert a database of personnel information into an LDIF file.
This file can then be imported into a directory server, regardless of the internal database representation the target directory server uses.
The LDIF format was originally developed and used in the University of Michigan LDAP implementation.
The first use of LDIF was in describing directory entries.
Later, the format was expanded to allow representation of changes to directory entries.
Relationship to the application/directory MIME content type:
The application/directory MIME content type [1] is a general framework and format for conveying directory information, and is independent of any particular directory service.
The LDIF format is a simpler format which is perhaps easier to create, and may also be used, as noted, to describe a set of changes to be applied to a directory.
The key words "MUST", "MUST NOT", "MAY", "SHOULD", and "SHOULD NOT" used in this document are to be interpreted as described in [7].
Definition of the LDAP Data Interchange Format
The LDIF format is used to convey directory information, or a description of a set of changes made to directory entries.
An LDIF file consists of a series of records separated by line separators.
A record consists of a sequence of lines describing a directory entry, or a sequence of lines describing a set of changes to a directory entry.
An LDIF file specifies a set of directory entries, or a set of changes to be applied to directory entries, but not both.
There is a one to one correlation between LDAP operations that modify the directory (add, delete, modify, and modrdn), and the types of changerecords described below ("add", "delete", "modify", and "modrdn" or "moddn").
This correspondence is intentional, and permits a straightforward translation from LDIF changerecords to protocol operations.
Formal Syntax Definition of LDIF
The following definition uses the augmented Backus Naur Form specified in RFC 2234 [2].
; (See Note 6, below)
FILL base64 distinguishedName) SEP) change
[SAFE INIT CHAR  SAFE CHAR]
Notes on LDIF Syntax 1)
For the LDIF format described in this document, the version number MUST be "1".
If the version number is absent, implementations MAY choose to interpret the contents as an older LDIF file format, supported by the University of Michigan ldap 3.3 implementation [8].
Any non empty line, including comment lines, in an LDIF file MAY be folded by inserting a line separator (SEP) and a SPACE.
Folding MUST NOT occur before the first character of the line.
In other words, folding a line into two lines, the first of which is empty, is not permitted.
Any line that begins with a single space MUST be treated as a continuation of the previous (non empty) line.
When joining folded lines, exactly one space character at the beginning of each continued line must be discarded.
Implementations SHOULD NOT fold lines in the middle of a multi byte UTF 8 character.
Any dn or rdn that contains characters other than those defined as "SAFE UTF8 CHAR", or begins with a character other than those defined as "SAFE INIT UTF8 CHAR", above, MUST be base 64 encoded.
Other values MAY be base 64 encoded.
Any value that contains characters other than those defined as "SAFE CHAR", or begins with a character other than those defined as "SAFE INIT CHAR",
above, MUST be base 64 encoded.
Other values MAY be base 64 encoded.
For example, "seeAlso:" followed by a newline represents a zero length "seeAlso" attribute value.
It is also permissible for the value referred to by a URL to be of zero length.
When a URL is specified in an attrval spec, the following conventions apply: a
) Implementations SHOULD support the file:// URL format.
The contents of the referenced file are to be included verbatim in the interpreted output of the LDIF file.
Implementations MAY support other URL formats.
The semantics associated with each supported URL will be documented in an associated Applicability Statement.
Distinguished names, relative distinguished names, and attribute values of DirectoryString syntax MUST be valid UTF 8 strings.
Implementations that read LDIF MAY interpret files in which these entities are stored in some other character set encoding, but implementations MUST NOT generate LDIF content which does not contain valid UTF 8 data.
Values or distinguished names that end with SPACE SHOULD be base 64 encoded.
When controls are included in an LDIF file, implementations MAY choose to ignore some or all of them.
This may be necessary if the changes described in the LDIF file are being sent on an LDAPv2 connection (LDAPv2 does not support controls), or the particular controls are not supported by the remote server.
If the criticality of a control is "true", then the implementation MUST either include the control, or MUST NOT send the operation to a remote server.
When an attrval spec, distinguishedName, or rdn is base64  encoded, the encoding rules specified in [5] are used with the following exceptions:  a)
The requirement that base64 output streams must be represented as lines of no more than 76 characters is removed.
Lines in LDIF files may only be folded according to the folding rules described in note 2, above.
Base64 strings in [5] may contain characters other than those defined in BASE64 CHAR, and are ignored.
LDIF does not permit any extraneous characters, other than those used for line folding.
Examples of LDAP Data Interchange Format Example 1:
An simple LDAP file with two entries version: 1 dn: cn Barbara Jensen, ou Product Development,
dc airius, dc com objectclass:
Jensen uid: bjensen telephonenumber:  1 408 555 1212 description: A big sailing fan.
cn Bjorn Jensen, ou Accounting
, dc airius, dc com objectclass:
1 408 555 1212 Example 2:
A file containing an entry with a folded attribute value version: 1 dn:cn Barbara Jensen, ou Product Development, dc airius, dc com objectclass:
Jensen uid:bjensen telephonenumber: 1 408 555 1212 description
:Babs is a big sailing fan, and travels extensively in sea rch of perfect sailing conditions.
Product Manager, Rod and Reel Division Example 3: A file containing a base 64 encoded value version: 1 dn: cn Gern Jensen, ou Product Testing, dc airius, dc com objectclass:
408 555 1212 description:: V2hhdCBhIGNhcmVmdWwgcmVhZGVyIHlvdSBhcmUhICBUaGlzIHZhbHVl IGlzIGJhc2UtNjQtZW5jb2RlZCBiZWNhdXNlIGl0IGhhcyBhIGNvbnRyb2wgY2hhcmFjdG
A file containing an entries with UTF 8 encoded attribute values, including language tags.
Comments indicate the contents of UTF 8 encoded attributes and distinguished names.
# dn:: ou <JapaneseOU>,o Airius objectclass: top objectclass: organizationalUnit ou::
5Za25qWt6YOo # ou:: <JapaneseOU> ou;lang
ja:: 5Za25qWt6YOo # ou;lang ja::
dWlkPXJvZ2FzYXdhcmEsb3U95Za25qWt6YOoLG89QWlyaXVz # dn:: uid <uid>,ou <JapaneseOU>,o Airius userpassword: {SHA}O3HSv1MusyL4kTjP HKI5uxuNoM  objectclass: top objectclass: person objectclass:
# title;lang ja:: <JapaneseTitle> preferredlanguage:
ja givenname:: 44Ot44OJ44OL44O8 # givenname:: <JapaneseGivenname> sn:: 5bCP56yg5Y6f # sn:: <JapaneseSn
cn:: 5bCP56yg5Y6fIOODreODieODi ODvA  # cn:: <JapaneseCn
# title:: <JapaneseTitle> givenname;lang ja;phonetic:: 44KN44Gp44Gr44O8 # givenname;lang
ja;phonetic:: <JapaneseGivenname in phonetic representation kana
> sn;lang ja;phonetic:: 44GK44GM44GV44KP44KJ # sn;lang ja;phonetic:: <JapaneseSn in phonetic representation
> cn;lang ja;phonetic:: 44GK44GM44GV44KP44KJIOOCjeOBqeOBq ODvA
# cn;lang ja;phonetic:: <JapaneseCn in phonetic representation kana
> title;lang ja;phonetic:: 44GI44GE44GO44KH44GG44G2IOOBtuOBoeOCh OBhg
Sales, Director Example 5: A file containing a reference to an external file version: 1 dn:
cn Horatio Jensen, ou Product Testing,
dc airius, dc com objectclass:
file:///usr/local/directory/photos/hjensen.jpg Example 6: A file containing a series of change records and comments version: 1 # Add a new entry dn: cn Fiona Jensen, ou Marketing
, dc airius, dc com changetype:
cn Robert Jensen, ou Marketing
, dc airius, dc com changetype:
# Modify an entry's relative distinguished name dn: cn Paul Jensen, ou Product Development, dc airius, dc com changetype:
1 # Rename an entry and move all of its children to a new location in # the directory tree (only implemented by LDAPv3 servers).
ou PD Accountants, ou Product Development, dc airius, dc com changetype:
ou Product Development Accountants deleteoldrdn: 0 newsuperior:
ou Accounting, dc airius, dc com
an entry: add an additional value to the postaladdress # attribute, completely delete the description attribute, replace # the telephonenumber attribute with two values, and delete a specific # value from the facsimiletelephonenumber attribute dn:
cn Paula Jensen, ou Product Development, dc airius, dc com changetype:
postaladdress postaladdress: 123 Anystreet $ Sunnyvale, CA $ 94086
1 408 555 5678 delete:
facsimiletelephonenumber facsimiletelephonenumber:  1 408 555 9876
an entry: replace the postaladdress attribute with an empty # set of values (which will cause the attribute to be removed), and # delete the entire description attribute.
Note that the first will # always succeed, while the second will only succeed if at least # one value for the description attribute is present.
cn Ingrid Jensen, ou Product Support, dc airius, dc com changetype:
description Example 7: An LDIF file containing a change record with a control version: 1 # Delete an entry.
The operation will attach the LDAPv3 # Tree Delete Control defined in [9].
The criticality # field is "true" and the controlValue field is # absent, as required by [9].
, dc airius, dc com control:
1.2.840.113556.1.4.805 true changetype: delete Security Considerations Given typical directory applications, an LDIF file is likely to contain sensitive personal data.
Appropriate measures should be taken to protect the privacy of those persons whose data is contained in an LDIF file.
A "trojan" LDIF file could name a file with sensitive contents and cause it to be included in a directory entry, which a hostile entity could read via LDAP.
LDIF does not provide any method for carrying authentication information with an LDIF file.
Users of LDIF files must take care to verify the integrity of an LDIF file received from an external source.
