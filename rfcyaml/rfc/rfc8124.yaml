- contents:
  - "                 The Session Description Protocol (SDP)\n                   WebSocket
    Connection URI Attribute\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The WebSocket protocol enables bidirectional real-time communication\n
    \  between clients and servers in web-based applications.  This document\n   specifies
    extensions to Session Description Protocol (SDP) for\n   application protocols
    using WebSocket as a transport.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8124.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology .....................................................3\n   3.
    SDP Considerations ..............................................3\n      3.1.
    General ....................................................3\n      3.2. \"websocket-uri\"
    SDP Attribute ..............................4\n      3.3. \"websocket-uri\" Multiplexing
    Considerations ................4\n   4. SDP Offer/Answer Procedures .....................................5\n
    \     4.1. General ....................................................5\n      4.2.
    Generating the Initial Offer ...............................5\n      4.3. Generating
    the Answer ......................................6\n      4.4. Offerer Processing
    of the Answer ...........................7\n      4.5. Modifying the Session ......................................7\n
    \     4.6. Offerless INVITE Scenarios .................................8\n   5.
    Procedures at WebSocket Client ..................................8\n   6. Security
    Considerations .........................................9\n   7. IANA Considerations
    .............................................9\n      7.1. Registration of the
    \"websocket-uri\" SDP Media Attribute ....9\n   8. References .....................................................10\n
    \     8.1. Normative References ......................................10\n      8.2.
    Informative References ....................................10\n   Acknowledgements
    ..................................................12\n   Authors' Addresses ................................................12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The WebSocket protocol [RFC6455] enables bidirectional message\n
    \  exchange between clients and servers on top of a persistent TCP\n   connection
    (optionally secured with Transport Layer Security (TLS)\n   [RFC5246]).  The initial
    protocol handshake makes use of Hypertext\n   Transfer Protocol (HTTP) [RFC7230]
    semantics, allowing the WebSocket\n   protocol to reuse existing HTTP infrastructure.\n
    \  Modern web browsers include a WebSocket client stack compliant with\n   the
    WebSocket API [WS-API] as specified by the W3C.  It is expected\n   that other
    client applications (e.g., those running on personal\n   computers, mobile devices,
    etc.) will also make a WebSocket client\n   stack available.  Several specifications
    have been written that\n   define how different applications can use a WebSocket
    subprotocol as\n   a reliable transport mechanism.\n   For example, [RFC7118]
    defines a WebSocket subprotocol as a reliable\n   transport mechanism between
    Session Initiation Protocol\n   (SIP)[RFC3261] entities to enable use of SIP in
    web-oriented\n   deployments.  Additionally, [RFC7977] defines a new WebSocket\n
    \  subprotocol as a reliable transport mechanism between Message Session\n   Relay
    Protocol (MSRP) clients and relays.  [RFC7395] defines a\n   WebSocket subprotocol
    for the Extensible Messaging and Presence\n   Protocol (XMPP).  Similarly, [BFCP-WEBSOCKET]
    defines a WebSocket\n   subprotocol as a reliable transport mechanism between
    Binary Floor\n   Control Protocol (BFCP) [BFCP] entities to enable usage of BFCP
    in\n   new scenarios.\n   When a WebSocket subprotocol is used as a transport
    mechanism between\n   a server and client, there needs to be a way to indicate
    the\n   connection URI from the server to the WebSocket client.  For\n   applications
    that use Session Description Protocol (SDP) [RFC4566] to\n   negotiate, the connection
    URI can be indicated by means of an SDP\n   attribute.  This specification defines
    new SDP attributes to indicate\n   the connection URI for the WebSocket client.
    \ Applications that use\n   SDP for negotiation and WebSocket as a transport protocol
    can use\n   this specification to advertise the WebSocket client connection URI.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - '3.  SDP Considerations

    '
  - contents:
    - "3.1.  General\n   Applications that use the SDP Offer/Answer mechanism [RFC3264]
      for\n   negotiating media and also use WebSocket or secure WebSocket as a\n
      \  transport protocol MAY indicate the connection URI for the WebSocket\n   client
      via a new SDP \"a=\" media-level attribute defined in\n   Section 3.2.\n"
    title: 3.1.  General
  - contents:
    - "3.2.  \"websocket-uri\" SDP Attribute\n   This section defines a new SDP media-level
      attribute, \"websocket-\n   uri\", which can appear in any of the media sections.\n
      \  Example:\n      a=websocket-uri:wss://example.com/chat\n   Where \"wss://example.com/chat\"
      is the ws-URI defined in Section 3 of\n   [RFC6455].\n   When the \"websocket-uri\"
      attribute is present in the media section of\n   the SDP, the IP address in
      \"c=\" line SHALL be ignored and the full\n   URI SHALL be used instead to open
      the WebSocket connection.  The\n   clients MUST ensure that they use the URI
      to open the WebSocket\n   connection and ignore the IP address in the \"c=\"
      line and the port in\n   the \"m=\" line.\n"
    title: 3.2.  "websocket-uri" SDP Attribute
  - contents:
    - "3.3.  \"websocket-uri\" Multiplexing Considerations\n   Multiplexing characteristics
      of SDP attributes are described in\n   [SDP-MUX].  Various SDP attribute multiplexing
      categories are\n   introduced there.\n   o  The multiplexing category of the
      \"a=websocket-uri\" attribute is\n      CAUTION.\n   There are no multiplexing
      rules specified for the \"websocket-uri\" SDP\n   media-level attribute.  Additionally,
      the specification of\n   multiplexing rules for the \"websocket-uri\" attribute
      is outside the\n   scope of this document.\n   While it is technically possible
      to bundle WebSocket, there are a\n   variety of reasons that make it impractical;
      thus, it is considered\n   unlikely to be used in practice.  Therefore, the
      \"websocket-uri\" SDP\n   media-level attribute defined in Section 3.2 for using
      WebSocket as a\n   transport protocol is not likely to be used with SDP bundle
      and is\n   consequently categorized as CAUTION for multiplexing.\n   If future
      extensions define how to bundle WebSocket, then\n   multiplexing rules for the
      \"a=websocket-uri\" attribute need to be\n   defined as well, for instance,
      in an extension of this SDP based\n   WebSocket negotiation specification.\n"
    title: 3.3.  "websocket-uri" Multiplexing Considerations
  title: 3.  SDP Considerations
- contents:
  - '4.  SDP Offer/Answer Procedures

    '
  - contents:
    - "4.1.  General\n   An endpoint (i.e., both the offerer and the answerer) that
      wishes to\n   negotiate WebSocket as transport protocol MUST indicate that it\n
      \  wishes to use WebSocket or secure WebSocket in the \"proto\" field of\n   the
      \"m=\" line.  Furthermore, the server side, which could be either\n   the offerer
      or answerer, MUST add an \"a=websocket-uri\" attribute in\n   the media section
      whose value can be either \"ws-URI\" or \"wss-URI\", as\n   defined in Section
      3 of [RFC6455], depending on whether it wishes to\n   use WebSocket or secure
      WebSocket.  This new attribute MUST follow\n   the syntax defined in Section
      3.  The procedures in this section\n   apply to an \"m=\" line associated with
      any media stream that uses\n   WebSocket or secure WebSocket as transport.\n
      \  Both offerer or answerer can initiate a WebSocket connection.  It is\n   expected
      that, based on the topology (for example, if the client is\n   behind NAT and
      server is on global IP address), the offerer and\n   answerer applications decide
      on who will initiate the WebSocket\n   connection and appropriately set the
      \"setup\" attribute in SDP\n   following the procedures of [RFC4145].\n"
    title: 4.1.  General
  - contents:
    - "4.2.  Generating the Initial Offer\n   In order to negotiate WebSocket as a
      transport, an SDP offerer MUST\n   indicate that it wishes to use it in the
      \"proto\" field of the \"m=\"\n   line.  For example, to negotiate BFCP-over-WebSocket,
      the \"proto\"\n   value in the \"m=\" line is TCP/WSS/BFCP if WebSocket is over
      TLS;\n   else, it is TCP/WS/BFCP, as specified in [BFCP-WEBSOCKET].\n   The
      offerer SHOULD assign the SDP \"setup\" attribute with a value of\n   \"active\"
      (the offerer will be the initiator of the outgoing TCP\n   connection) or \"passive\"
      if the offerer wishes to be a receiver of an\n   incoming connection.  The offerer
      MUST NOT assign an SDP \"setup\"\n   attribute with a \"holdconn\" value.  The
      offerer MUST follow the\n   procedures described in [RFC4145]  while using the
      \"setup\" attribute.\n   If the \"setup\" attribute has a value of \"passive\",
      it MUST have a URI\n   in the \"a=websocket-uri\" attribute.\n   The following
      is an example of an \"m=\" line for a BFCP connection:\n   Offer (browser):\n
      \  m=application 9 TCP/WSS/BFCP *\n   a=setup:active\n   a=connection:new\n
      \  a=floorctrl:c-only\n   m=audio 55000 RTP/AVP 0\n   m=video 55002 RTP/AVP
      31\n   In the above example, the client is intending to set up the TLS/TCP\n
      \  connection; hence, the port is set to a value of 9, which is the\n   discard
      port.\n"
    title: 4.2.  Generating the Initial Offer
  - contents:
    - "4.3.  Generating the Answer\n   If the answerer accepts the offered WebSocket
      transport connection,\n   in the associated SDP answer, the answerer MUST assign
      an SDP \"setup\"\n   attribute with a value of either \"active\" or \"passive\",
      according to\n   the procedures in [RFC4145].  The answerer MUST NOT assign
      an SDP\n   \"setup\" attribute with a value of \"holdconn\".\n   If the answerer
      assigns an SDP \"setup\" attribute with a value of\n   \"active\", the answerer
      MUST initiate the WebSocket connection\n   handshake by acting as client on
      the negotiated media stream, towards\n   the URI specified in the \"a=websocket-uri\"
      SDP attribute using the\n   procedures described in Section 4 of [RFC6455].\n
      \  If the answerer assigns an SDP \"setup\" attribute with a value of\n   \"passive\",
      then it MUST have a value of \"ws-URI\" or \"wss-URI\", as\n   defined in Section
      3 of [RFC6455] in an \"a=websocket-uri\" SDP\n   attribute, depending on whether
      the application uses WebSocket or\n   secure WebSocket.  This attribute MUST
      follow the syntax defined in\n   Section 3.\n   The following example shows
      a case where the server responds with a\n   BFCP media stream over a WebSocket
      connection running TLS.  It shows\n   an answer \"m=\" line for the BFCP connection.
      \ In this example, since\n   WebSocket is running over TLS, the server answers
      back with an\n   \"a=websocket-uri\" attribute in the media section of SDP having
      a\n   \"wss-URI\" connection URI:\n   Answer (server):\n   m=application 50000
      TCP/WSS/BFCP *\n   a=setup:passive\n   a=connection:new\n   a=websocket-uri:wss://bfcp-ws.example.com?token=3170449312\n
      \  a=floorctrl:s-only\n   a=confid:4321\n   a=userid:1234\n   a=floorid:1 m-stream:10\n
      \  a=floorid:2 m-stream:11\n   m=audio 50002 RTP/AVP 0\n   a=label:10\n   m=video
      50004 RTP/AVP 31\n   a=label:11\n"
    title: 4.3.  Generating the Answer
  - contents:
    - "4.4.  Offerer Processing of the Answer\n   When the offerer receives an SDP
      answer, if the offerer ends up\n   initiating the TCP connection, then it MUST
      follow the procedures in\n   Section 5.\n"
    title: 4.4.  Offerer Processing of the Answer
  - contents:
    - "4.5.  Modifying the Session\n   Once an offer/answer exchange has been completed,
      either endpoint MAY\n   send a new offer in order to modify the session.  The
      endpoints can\n   reuse the existing WebSocket connection by adding an\n   \"a=connection:existing\"
      attribute in the media section of the SDP\n   following the rules mentioned
      in [RFC4145], if the \"websocket-uri\"\n   SDP value and the transport parameters
      indicated by each endpoint are\n   unchanged.  Otherwise, following the rules
      for the initial offer/\n   answer exchange, the endpoints can negotiate and
      create a new\n   WebSocket connection on top of TLS/TCP or TCP.\n"
    title: 4.5.  Modifying the Session
  - contents:
    - "4.6.  Offerless INVITE Scenarios\n   In some scenarios, an endpoint (e.g.,
      a browser) originating the call\n   (a User Agent Client or UAC) can send an
      offerless INVITE to the\n   server.  The server will generate an offer in response
      to the INVITE.\n   In such cases, the server MUST send an offer with the \"setup\"\n
      \  attribute with a value of \"passive\" so as to accept incoming\n   connection
      and MUST include an \"a=websocket-uri\" attribute in the\n   media section whose
      value MUST be either \"ws-URI\" or \"wss-URI\",\n   depending on whether the
      server wishes to use WebSocket or secure\n   WebSocket.  The SDP offer sent
      by the server will look like the\n   example in Section 4.3.\n"
    title: 4.6.  Offerless INVITE Scenarios
  title: 4.  SDP Offer/Answer Procedures
- contents:
  - "5.  Procedures at WebSocket Client\n   The WebSocket client MUST always initiate
    the outgoing TCP\n   connection; hence, the SDP \"setup\" attribute MUST always
    be \"active\"\n   for the WebSocket client in its SDP offer/answer.  In the example\n
    \  below, the WebSocket client is the offerer; hence, it assigns a\n   \"setup\"
    attribute with a value of \"active\".\n   The WebSocket server is a server on
    the Internet; hence, it MUST\n   always assign an SDP \"setup\" attribute with
    a value of \"passive\".\n   This also avoids the need to use Interactive Connectivity\n
    \  Establishment (ICE) between WebSocket client and WebSocket server, as\n   the
    connection model here would be a typical client-to-server web\n   connection.\n
    \  Once the offer/answer is complete, the client MUST initiate the\n   WebSocket
    connection handshake by sending a GET message on the\n   negotiated media stream,
    towards the URI specified in an\n   \"a=websocket-uri\" attribute, as per the
    procedures described in\n   [RFC6455].  When no port is passed in the \"a=websocket-uri\"\n
    \  attribute, the default port (80 or 443) is used depending on whether\n   the
    value was \"ws-URI\" or \"wss-URI\".\n"
  title: 5.  Procedures at WebSocket Client
- contents:
  - "6.  Security Considerations\n   An attacker may attempt to add, modify, or remove
    an\n   \"a=websocket-uri\" attribute from a session description.  This could\n
    \  result in an application behaving undesirably.  Consequently, it is\n   RECOMMENDED
    that integrity protection be applied to the SDP session\n   descriptions.  For
    session descriptions carried in SIP [RFC3261],\n   S/MIME is available to provide
    such end-to-end integrity protection.\n   As described in Section 10 of [RFC6455],
    application signalling\n   traffic being transported over WebSocket MUST support
    secure\n   WebSocket and SHOULD employ it when communicating with their peers.\n
    \  The WebSocket clients have to initiate the TCP connection to the\n   WebSocket
    server identified by the Fully Qualified Domain Name (FQDN)\n   in an \"a=websocket-uri\"
    attribute.  Further, as with any other web\n   connection, the clients will verify
    the server's certificate.  The\n   WebSocket client MUST follow the procedures
    in [RFC7525] (including\n   host name verification as per Section 6.1 in [RFC7525])
    while setting\n   up a TLS connection with a WebSocket server.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  Registration of the \"websocket-uri\" SDP Media Attribute\n   This document
      defines a new SDP media-level attribute \"websocket-uri\"\n   in Section 3.2;
      IANA has registered the following SDP att-field under\n   the \"Session Description
      Protocol (SDP) Parameters\" registry as\n   follows:\n   +---------------------+---------------------------------------------+\n
      \  | Attribute name:     | websocket-uri                               |\n   |
      Long-form attribute | WebSocket Connection URI                    |\n   | name:
      \              |                                             |\n   | Type of
      attribute:  | media                                       |\n   | Mux category:
      \      | CAUTION                                     |\n   | Charset Dependent:
      \ | No                                          |\n   | Purpose:            |
      The \"websocket-uri\" attribute is intended   |\n   |                     |
      to be used as a connection URI for opening  |\n   |                     | the
      WebSocket connection.                   |\n   | Appropriate values: | A ws-URI
      \ or wss-URI, as defined in Section |\n   |                     | 3 of [RFC6455]
      \                             |\n   | Contact name:       | Gonzalo Salgueiro
      \                          |\n   | Contact email:      | gsalguei@cisco.com
      \                         |\n   | Reference:          | RFC 8124                                    |\n
      \  +---------------------+---------------------------------------------+\n"
    title: 7.1.  Registration of the "websocket-uri" SDP Media Attribute
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4145]  Yon, D. and G. Camarillo, \"TCP-Based Media Transport in\n              the
      Session Description Protocol (SDP)\", RFC 4145,\n              DOI 10.17487/RFC4145,
      September 2005,\n              <http://www.rfc-editor.org/info/rfc4145>.\n   [RFC6455]
      \ Fette, I. and A. Melnikov, \"The WebSocket Protocol\",\n              RFC
      6455, DOI 10.17487/RFC6455, December 2011,\n              <http://www.rfc-editor.org/info/rfc6455>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [BFCP]     Camarillo, G., Drage, K., Kristensen,
      T., Ott, J., and C.\n              Eckel, \"The Binary Floor Control Protocol
      (BFCP)\", Work in\n              Progress, draft-ietf-bfcpbis-rfc4582bis-16,
      November 2015.\n   [BFCP-WEBSOCKET]\n              Pascual, V., Roman, A., Cazeaux,
      S., Salgueiro, G., and R.\n              R, \"The WebSocket Protocol as a Transport
      for the Binary\n              Floor Control Protocol (BFCP)\", Work in Progress,\n
      \             draft-ietf-bfcpbis-bfcp-websocket-15, February 2017.\n   [RFC3261]
      \ Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,
      June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3264]
      \ Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with
      Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,
      June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n   [RFC4566]
      \ Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n              July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC7118]
      \ Baz Castillo, I., Millan Villegas, J., and V. Pascual,\n              \"The
      WebSocket Protocol as a Transport for the Session\n              Initiation
      Protocol (SIP)\", RFC 7118,\n              DOI 10.17487/RFC7118, January 2014,\n
      \             <http://www.rfc-editor.org/info/rfc7118>.\n   [RFC7230]  Fielding,
      R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):
      Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7395]
      \ Stout, L., Ed., Moffitt, J., and E. Cestari, \"An\n              Extensible
      Messaging and Presence Protocol (XMPP)\n              Subprotocol for WebSocket\",
      RFC 7395,\n              DOI 10.17487/RFC7395, October 2014,\n              <http://www.rfc-editor.org/info/rfc7395>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7977]
      \ Dunkley, P., Llewellyn, G., Pascual, V., Salgueiro, G.,\n              and
      R. Ravindranath, \"The WebSocket Protocol as a\n              Transport for
      the Message Session Relay Protocol (MSRP)\",\n              RFC 7977, DOI 10.17487/RFC7977,
      September 2016,\n              <http://www.rfc-editor.org/info/rfc7977>.\n   [SDP-MUX]
      \ Nandakumar, S., \"A Framework for SDP Attributes when\n              Multiplexing\",
      Work in Progress, draft-ietf-mmusic-sdp-\n              mux-attributes-16, December
      2016.\n   [WS-API]   Hickson, I., Ed., \"The WebSocket API\", W3C\n              Candidate
      Recommendation, September 2012,\n              <https://www.w3.org/TR/2012/CR-websockets-20120920/>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   Thanks to Christer Holmberg for raising the need for a BFCP-\n
    \  independent SDP attribute for WebSocket Connection URI.\n   The authors wish
    to acknowledge Paul Kyzivat, Suhas Nandakumar,\n   Christer Holmberg, Charles
    Eckel, Dan Wing, Alissa Cooper, and Joel\n   Halpern for their invaluable suggestions
    and review comments.\n   Thanks to Mirja Kuehlewind, Alexey Melnikov, Ben Campbell,
    and\n   Kathleen Moriarty for their comments and feedback during IESG\n   reviews.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Ram Mohan Ravindranath\n   Cisco Systems, Inc.\n   Cessna
    Business Park,\n   Kadabeesanahalli Village, Varthur Hobli,\n   Sarjapur-Marathahalli
    Outer Ring Road\n   Bangalore, Karnataka  560103\n   India\n   Email: rmohanr@cisco.com\n
    \  Gonzalo Salgueiro\n   Cisco Systems, Inc.\n   7200-12 Kit Creek Road\n   Research
    Triangle Park, NC  27709\n   United States of America\n   Email: gsalguei@cisco.com\n"
  title: Authors' Addresses
