- title: __initial_text__
  contents:
  - '                  LISP Canonical Address Format (LCAF)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a canonical address format encoding used in\n\
    \   Locator/ID Separation Protocol (LISP) control messages and in the\n   encoding\
    \ of lookup keys for the LISP Mapping Database System.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8060.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \    2.1. Requirements Language ......................................5\n    \
    \  2.2. Definition of Terms ........................................5\n   3. LISP\
    \ Canonical Address Format Encodings .........................6\n   4. LISP Canonical\
    \ Address Applications .............................8\n      4.1. Segmentation\
    \ Using LISP ....................................8\n      4.2. Carrying AS Numbers\
    \ in the Mapping Database ................9\n      4.3. Assigning Geo-Coordinates\
    \ to Locator Addresses ............10\n      4.4. NAT Traversal Scenarios ...................................11\n\
    \      4.5. Multicast Group Membership Information ....................13\n  \
    \    4.6. Traffic Engineering Using Re-encapsulating Tunnels ........15\n    \
    \  4.7. Storing Security Data in the Mapping Database .............16\n      4.8.\
    \ Source/Destination 2-Tuple Lookups ........................17\n      4.9. Replication\
    \ List Entries for Multicast Forwarding .........18\n      4.10. Applications\
    \ for AFI List LCAF Type ......................19\n           4.10.1. Binding\
    \ IPv4 and IPv6 Addresses ...................19\n           4.10.2. Layer 2 VPNs\
    \ ......................................20\n           4.10.3. ASCII Names in\
    \ the Mapping Database ...............21\n           4.10.4. Using Recursive LISP\
    \ Canonical Address Encodings ..22\n           4.10.5. Compatibility Mode Use\
    \ Case .......................23\n   5. Experimental LISP Canonical Address Applications\
    \ ...............24\n      5.1. Convey Application-Specific Data ..........................24\n\
    \      5.2. Generic Database Mapping Lookups ..........................25\n  \
    \    5.3. PETR Admission Control Functionality ......................26\n    \
    \  5.4. Data Model Encoding .......................................27\n      5.5.\
    \ Encoding Key/Value Address Pairs ..........................28\n      5.6. Multiple\
    \ Data-Planes ......................................29\n   6. Security Considerations\
    \ ........................................31\n   7. IANA Considerations ............................................31\n\
    \   8. References .....................................................32\n  \
    \    8.1. Normative References ......................................32\n    \
    \  8.2. Informative References ....................................33\n   Acknowledgments\
    \ ...................................................35\n   Authors' Addresses\
    \ ................................................36\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The LISP architecture and protocol [RFC6830] introduces\
    \ two new\n   numbering spaces: Endpoint Identifiers (EIDs) and Routing Locators\n\
    \   (RLOCs).  To provide flexibility for current and future applications,\n  \
    \ these values can be encoded in LISP control messages using a general\n   syntax\
    \ that includes Address Family Identifier (AFI), length, and\n   value fields.\n\
    \   Currently defined AFIs include IPv4 and IPv6 addresses, which are\n   formatted\
    \ according to code-points assigned in the \"Address Family\n   Numbers\" registry\
    \ [AFN] as follows:\n   IPv4-Encoded Address:\n    0                   1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            AFI = 1            |       IPv4 Address ...        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     ...  IPv4 Address         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   IPv6-Encoded Address:\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            AFI = 2            |       IPv6 Address ...        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     ...  IPv6 Address  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     ...  IPv6 Address  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     ...  IPv6 Address  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     ...  IPv6 Address         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This document describes the currently defined AFIs that LISP uses\n   along\
    \ with their encodings and introduces the LISP Canonical Address\n   Format (LCAF)\
    \ that can be used to define the LISP-specific encodings\n   for arbitrary AFI\
    \ values.\n   Specific detailed uses for the LCAF Types defined in this document\n\
    \   can be found in the use-case documents that implement them.  The same\n  \
    \ LCAF Type may be used by more than one use-case document.  As an\n   Experimental\
    \ specification, this work is, by definition, incomplete.\n   The LCAF Types defined\
    \ in this document are to support\n   experimentation and are intended for cautious\
    \ use in self-contained\n   environments in support of the corresponding use-case\
    \ documents.\n   This document provides assignment for an initial set of approved\
    \ LCAF\n   Types (registered with IANA) and additional unapproved LCAF Types\n\
    \   [RFC6830].  The unapproved LCAF encodings are defined to support\n   further\
    \ study and experimentation.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.2.  Definition of Terms
  contents:
  - "2.2.  Definition of Terms\n   Address Family Identifier (AFI):  a term used to\
    \ describe an address\n      encoding in a packet.  Address families are defined\
    \ for IPv4 and\n      IPv6.  See [AFN] and [RFC3232] for details.  The reserved\
    \ AFI\n      value of 0 is used in this specification to indicate an\n      unspecified\
    \ encoded address where the length of the address is 0\n      bytes following\
    \ the 16-bit AFI value of 0.\n   Unspecified Address Format:\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            AFI = 0            |      <no address follows>\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Endpoint ID (EID):  a 32-bit (for IPv4) or 128-bit (for IPv6) value\n    \
    \  used in the source and destination address fields of the first\n      (most\
    \ inner) LISP header of a packet.  The host obtains a\n      destination EID the\
    \ same way it obtains a destination address\n      today, for example, through\
    \ a DNS lookup or SIP exchange.  The\n      source EID is obtained via existing\
    \ mechanisms used to set a\n      host's \"local\" IP address.  An EID is allocated\
    \ to a host from an\n      EID-prefix block associated with the site where the\
    \ host is\n      located.  An EID can be used by a host to refer to other hosts.\n\
    \   Routing Locator (RLOC):  the IPv4 or IPv6 address of an Egress Tunnel\n  \
    \    Router (ETR).  It is the output of an EID-to-RLOC mapping lookup.\n     \
    \ An EID maps to one or more RLOCs.  Typically, RLOCs are numbered\n      from\
    \ topologically aggregatable blocks that are assigned to a site\n      at each\
    \ point to which it attaches to the global Internet; where\n      the topology\
    \ is defined by the connectivity of provider networks,\n      RLOCs can be thought\
    \ of as Provider-Assigned (PA) addresses.\n      Multiple RLOCs can be assigned\
    \ to the same ETR device or to\n      multiple ETR devices at a site.\n"
- title: 3.  LISP Canonical Address Format Encodings
  contents:
  - "3.  LISP Canonical Address Format Encodings\n   IANA has assigned AFI value 16387\
    \ (0x4003) to the LISP Canonical\n   Address Format (LCAF).  This specification\
    \ defines the encoding\n   format of the LISP Canonical Address (LCA).  This section\
    \ defines all\n   Types for which an initial allocation in the LISP-LCAF registry\
    \ is\n   requested.  See Section 7 for the complete list of such Types.\n   The\
    \ AFI definitions in [AFN] only allocate code-points for the AFI\n   value itself.\
    \  The length of the address or entity that follows is\n   not defined and is\
    \ implied based on conventional experience.  When\n   LISP uses LCAF definitions\
    \ from this document, the AFI-based address\n   lengths are specified in this\
    \ document.  When new LCAF definitions\n   are defined in other use-case documents,\
    \ the AFI-based address\n   lengths for any new AFI-encoded addresses are specified\
    \ in those\n   documents.\n   The first 6 bytes of a LISP Canonical Address are\
    \ followed by a\n   variable number of fields of variable length:\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type       |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             . . .                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Rsvd1/Rsvd2:  these 8-bit fields are reserved for future use and MUST\n  \
    \    be transmitted as 0 and ignored on receipt.\n   Flags:  this 8-bit field\
    \ is for future definition and use.  For now,\n      set to zero on transmission\
    \ and ignored on receipt.\n   Type:  this 8-bit field is specific to the LISP\
    \ Canonical Address\n      Format encodings.  Both approved and unapproved values\
    \ are listed\n      below.  Unapproved values are indicated; see Section 5 for\
    \ more\n      details.\n   Type 0:  Null Body\n   Type 1:  AFI List\n   Type 2:\
    \  Instance ID\n   Type 3:  AS Number\n   Type 4:  Application Data (unapproved;\
    \ see Section 5)\n   Type 5:  Geo-Coordinates\n   Type 6:  Opaque Key (unapproved;\
    \ see Section 5)\n   Type 7:  NAT-Traversal\n   Type 8:  Nonce Locator (unapproved;\
    \ see Section 5)\n   Type 9:  Multicast Info\n   Type 10:  Explicit Locator Path\n\
    \   Type 11:  Security Key\n   Type 12:  Source/Dest Key\n   Type 13:  Replication\
    \ List Entry\n   Type 14:  JSON Data Model (unapproved; see Section 5)\n   Type\
    \ 15:  Key/Value Address Pair (unapproved; see Section 5)\n   Type 16:  Encapsulation\
    \ Format (unapproved; see Section 5)\n   Length:  this 16-bit field is in units\
    \ of bytes and covers all of the\n      LISP Canonical Address payload, starting\
    \ and including the byte\n      after the Length field.  When including the AFI,\
    \ an LCAF-encoded\n      address will have a minimum length of 8 bytes when the\
    \ Length\n      field is 0.  The 8 bytes include the AFI, Flags, Type, Rsvd1,\n\
    \      Rsvd2, and Length fields.  When the AFI is not next to an encoded\n   \
    \   address in a control message, the encoded address will have a\n      minimum\
    \ length of 6 bytes when the Length field is 0.  The 6 bytes\n      include the\
    \ Flags, Type, Rsvd1, Rsvd2, and Length fields.\n   [RFC6830] states RLOC-records\
    \ based on an IP address are sorted when\n   encoded in control messages, so the\
    \ locator-set has consistent order\n   across all xTRs for a given EID.  The sort\
    \ order is based on sort-key\n   {afi, RLOC-address}.  When an RLOC based on an\
    \ IP address is LCAF\n   encoded, the sort-key is {afi, LCAF-Type}.  Therefore,\
    \ when a\n   locator-set has a mix of AFI records and LCAF records, they are\n\
    \   ordered from smallest to largest AFI value.\n"
- title: 4.  LISP Canonical Address Applications
  contents:
  - "4.  LISP Canonical Address Applications\n   The following sections define the\
    \ LCAF for the currently approved\n   initial set of Type values.\n"
- title: 4.1.  Segmentation Using LISP
  contents:
  - "4.1.  Segmentation Using LISP\n   When multiple organizations inside of a LISP\
    \ site are using private\n   addresses [RFC1918] as EID prefixes, their address\
    \ spaces must remain\n   segregated due to possible address duplication.  An Instance\
    \ ID in\n   the address encoding can aid in making the entire AFI-based address\n\
    \   unique.\n   Another use for the Instance ID LISP Canonical Address Format\
    \ is when\n   creating multiple segmented VPNs inside of a LISP site where keeping\n\
    \   EID-prefix-based subnets is desirable.\n   Instance ID LISP Canonical Address\
    \ Format:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 2    | IID mask-len  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Instance ID                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |         Address  ...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   IID mask-len:  if the AFI is set to 0, then this format is not\n      encoding\
    \ an extended EID prefix, but rather an Instance ID range\n      where the 'IID\
    \ mask-len' indicates the number of high-order bits\n      used in the Instance\
    \ ID field for the range.  The low-order bits\n      of the Instance ID field\
    \ must be 0.\n   Length:  length in bytes starting and including the byte after\
    \ this\n      Length field.\n   Instance ID:  the low-order 24 bits that can go\
    \ into a LISP data\n      header when the I bit is set.  See [RFC6830] for details.\
    \  The\n      reason for the length difference is so that the maximum number of\n\
    \      instances supported per mapping system is 2^32, while conserving\n    \
    \  space in the LISP data header.  This comes at the expense of\n      limiting\
    \ the maximum number of instances per xTR to 2^24.  If an\n      xTR is configured\
    \ with multiple Instance IDs where the value in\n      the high-order 8 bits is\
    \ the same, then the low-order 24 bits MUST\n      be unique.\n   AFI = x:  x\
    \ can be any AFI value from [AFN].\n   This LISP Canonical Address Type can be\
    \ used to encode either EID or\n   RLOC addresses.\n   Usage: When used as a lookup\
    \ key, the EID is regarded as an extended-\n   EID in the mapping system.  This\
    \ encoding is used in EID-records in\n   Map-Request, Map-Reply, Map-Register,\
    \ and Map-Notify messages.  When\n   LISP Delegated Database Tree (LISP-DDT) [LISP-DDT]\
    \ is used as the\n   mapping system mechanism, extended EIDs are used in Map-Referral\n\
    \   messages.\n"
- title: 4.2.  Carrying AS Numbers in the Mapping Database
  contents:
  - "4.2.  Carrying AS Numbers in the Mapping Database\n   When an Autonomous System\
    \ (AS) number is stored in the LISP Mapping\n   Database System for either policy\
    \ or documentation reasons, it can be\n   encoded in a LISP Canonical Address.\n\
    \   AS Number LISP Canonical Address Format:\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 3    |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           AS Number                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |         Address  ...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   AS Number:  the 32-bit AS number of the autonomous system\
    \ that has\n      been assigned to either the EID or RLOC that follows.\n   AFI\
    \ = x:  x can be any AFI value from [AFN].\n   The AS Number LCAF Type can be\
    \ used to encode either EID or RLOC\n   addresses.  The former is used to describe\
    \ the LISP-ALT AS number the\n   EID prefix for the site is being carried for.\
    \  The latter is used to\n   describe the AS that is carrying RLOC based prefixes\
    \ in the\n   underlying routing system.\n   Usage: This encoding can be used in\
    \ EID-records or RLOC-records in\n   Map-Request, Map-Reply, Map-Register, and\
    \ Map-Notify messages.  When\n   LISP-DDT [LISP-DDT] is used as the mapping system\
    \ mechanism, extended\n   EIDs are used in Map-Referral messages.\n"
- title: 4.3.  Assigning Geo-Coordinates to Locator Addresses
  contents:
  - "4.3.  Assigning Geo-Coordinates to Locator Addresses\n   If an ETR desires to\
    \ send a Map-Reply describing the Geo-Coordinates\n   for each locator in its\
    \ locator-set, it can use the Geo-Coordinates\n   LCAF Type to convey physical\
    \ location information.\n   Coordinates are specified using the WGS 84 (World\
    \ Geodetic System\n   1984) reference coordinate system [WGS-84].\n   Geo-Coordinates\
    \ LISP Canonical Address Format:\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 5    |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |N|     Latitude Degrees        |    Minutes    |    Seconds    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |E|     Longitude Degrees       |    Minutes    |    Seconds    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Altitude                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |         Address  ...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   N: When set to 1 means north; otherwise, south.\n   Latitude\
    \ Degrees:  Valid values range from 0 to 90 degrees above or\n      below the\
    \ equator (northern or southern hemisphere, respectively).\n   Latitude Minutes:\
    \  Valid values range from 0 to 59.\n   Latitude Seconds:  Valid values range\
    \ from 0 to 59.\n   E: When set to 1 means east; otherwise, west.\n   Longitude\
    \ Degrees:  Valid values are from 0 to 180 degrees right or\n      left of the\
    \ Prime Meridian.\n   Longitude Minutes:  Valid values range from 0 to 59.\n \
    \  Longitude Seconds:  Valid values range from 0 to 59.\n   Altitude:  Height\
    \ relative to sea level in meters.  This is a two's\n      complement signed integer\
    \ meaning that the altitude could be below\n      sea level.  A value of 0x7fffffff\
    \ indicates no Altitude value is\n      encoded.\n   AFI = x:  x can be any AFI\
    \ value from [AFN].\n   The Geo-Coordinates LCAF Type can be used to encode either\
    \ EID or\n   RLOC addresses.  When used for EID encodings, you can determine the\n\
    \   physical location of an EID along with the topological location by\n   observing\
    \ the locator-set.\n   Usage: This encoding can be used in EID-records or RLOC-records\
    \ in\n   Map-Request, Map-Reply, Map-Register, and Map-Notify messages.  When\n\
    \   LISP-DDT [LISP-DDT] is used as the mapping system mechanism, extended\n  \
    \ EIDs are used in Map-Referral messages.\n   The use of the Geo-Coordinates LCAF\
    \ encoding raises privacy issues as\n   location information is privacy sensitive,\
    \ and possibly unexpectedly\n   privacy-sensitive information may be conveyed,\
    \ e.g., if the location\n   information corresponds to a router located in a person's\
    \ home.\n   Therefore, this encoding should not be used unless needed for\n  \
    \ operation of a LISP deployment.  Before electing to utilize this\n   encoding,\
    \ care should be taken to ensure the appropriate policies are\n   being used by\
    \ the EID for controlling the conveyed information.\n"
- title: 4.4.  NAT Traversal Scenarios
  contents:
  - "4.4.  NAT Traversal Scenarios\n   When a LISP system is conveying global-address\
    \ and mapped-port\n   information when traversing through a NAT device, the NAT-Traversal\n\
    \   LCAF Type is used.  See [NAT-LISP] for details.\n   NAT-Traversal Canonical\
    \ Address Format:\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 7    |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       MS UDP Port Number      |      ETR UDP Port Number      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |  Global ETR RLOC Address  ... |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |       MS RLOC Address  ...    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          | Private ETR RLOC Address  ... |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |      RTR RLOC Address 1 ...   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |      RTR RLOC Address k ...   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   MS UDP Port Number:  this is the UDP port number of the Map-Server\n\
    \      and is set to 4342.\n   ETR UDP Port Number:  this is the port number returned\
    \ to a LISP\n      system that was copied from the source port from a packet that\
    \ has\n      flowed through a NAT device.\n   AFI = x:  x can be any AFI value\
    \ from [AFN].\n   Global ETR RLOC Address:  this is an address known to be globally\n\
    \      unique built by NAT-traversal functionality in a LISP router.\n   MS RLOC\
    \ Address:  this is the address of the Map-Server used in the\n      destination\
    \ RLOC of a packet that has flowed through a NAT device.\n   Private ETR RLOC\
    \ Address:  this is an address known to be a private\n      address inserted in\
    \ this LCAF by a LISP router that resides on the\n      private side of a NAT\
    \ device.\n   RTR RLOC Address:  this is an encapsulation address used by an\n\
    \      Ingress Tunnel Router (ITR) or Proxy Ingress Tunnel Router (PITR)\n   \
    \   that resides behind a NAT device.  This address is known to have\n      state\
    \ in a NAT device so packets can flow from it to the LISP ETR\n      behind the\
    \ NAT.  There can be one or more NAT Re-encapsulating\n      Tunnel Router (RTR)\
    \ [NAT-LISP] addresses supplied in these set of\n      fields.  The number of\
    \ RTRs encoded is determined by parsing each\n      field.  When there are no\
    \ RTRs supplied, the RTR fields can be\n      omitted and reflected by the LCAF\
    \ length field or an AFI of 0 can\n      be used to indicate zero RTRs encoded.\n\
    \   Usage: This encoding can be used in Info-Request and Info-Reply\n   messages.\
    \  The mapping system does not store this information.  The\n   information is\
    \ used by an xTR and Map-Server to convey private and\n   public address information\
    \ when traversing NAT and firewall devices.\n   Care should be taken to protect\
    \ privacy against the adverse use of a\n   Global or Private ETR RLOC Address\
    \ by ensuring policy controls are\n   used during EID registrations that use this\
    \ LCAF Type in RLOC-\n   records.  Refer to the use-case documents for additional\
    \ information.\n"
- title: 4.5.  Multicast Group Membership Information
  contents:
  - "4.5.  Multicast Group Membership Information\n   Multicast group information\
    \ can be published in the mapping database.\n   So a lookup on a group address\
    \ EID can return a replication list of\n   RLOC group addresses or RLOC unicast\
    \ addresses.  The intent of this\n   type of unicast replication is to deliver\
    \ packets to multiple ETRs at\n   receiver LISP multicast sites.  The locator-set\
    \ encoding for this\n   EID-record Type can be a list of ETRs when they each register\
    \ with\n   \"Merge Semantics\".  The encoding can be a typical AFI-encoded locator\n\
    \   address.  When an RTR list is being registered (with multiple levels\n   according\
    \ to [LISP-RE]), the Replication List Entry LCAF Type is used\n   for locator\
    \ encoding.\n   This LCAF encoding can be used to send broadcast packets to all\n\
    \   members of a subnet when an EID is away from its home subnet\n   location.\n\
    \   Multicast Info Canonical Address Format:\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 9    |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Instance ID                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Reserved           | Source MaskLen| Group MaskLen |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |   Source/Subnet Address  ...  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |       Group Address  ...      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Reserved:  must be set to zero and ignored on receipt.\n\
    \   Instance ID:  the low-order 24 bits that can go into a LISP data\n      header\
    \ when the I bit is set.  See [RFC6830] for details.  The use\n      of the Instance\
    \ ID in this LCAF Type is to associate a multicast\n      forwarding entry for\
    \ a given VPN.  The Instance ID describes the\n      VPN and is registered to\
    \ the mapping database system as a 3-tuple\n      of (Instance ID, S-prefix, G-prefix).\n\
    \   Source MaskLen:  the mask length of the source prefix that follows.\n    \
    \  The length is the number of high-order mask bits set.\n   Group MaskLen:  the\
    \ mask length of the group prefix that follows.\n      The length is the number\
    \ of high-order mask bits set.\n   AFI = x:  x can be any AFI value from [AFN].\
    \  When a specific address\n      family has a multicast address semantic, this\
    \ field must be either\n      a group address or a broadcast address.\n   Source/Subnet\
    \ Address:  the source address or prefix for encoding an\n      (S,G) multicast\
    \ entry.\n   Group Address:  the group address or group prefix for encoding (S,G)\n\
    \      or (*,G) multicast entries.\n   Usage: This encoding can be used in EID-records\
    \ in Map-Request, Map-\n   Reply, Map-Register, and Map-Notify messages.  When\
    \ LISP-DDT\n   [LISP-DDT] is used as the mapping system mechanism, extended EIDs\
    \ are\n   used in Map-Referral messages.\n"
- title: 4.6.  Traffic Engineering Using Re-encapsulating Tunnels
  contents:
  - "4.6.  Traffic Engineering Using Re-encapsulating Tunnels\n   For a given EID\
    \ lookup into the mapping database, this LCAF can be\n   returned to provide a\
    \ list of locators in an explicit\n   re-encapsulation path.  See [LISP-TE] for\
    \ details.\n   Explicit Locator Path (ELP) Canonical Address Format:\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 10   |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Rsvd3         |L|P|S|           AFI = x             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Reencap Hop 1  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Rsvd3         |L|P|S|           AFI = x             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Reencap Hop k  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Rsvd3:  this field is reserved for future use and MUST be\
    \ transmitted\n      as 0 and ignored on receipt.\n   Lookup bit (L):  this is\
    \ the Lookup bit used to indicate to the user\n      of the ELP not to use this\
    \ address for encapsulation but to look\n      it up in the mapping database system\
    \ to obtain an encapsulating\n      RLOC address.\n   RLOC Probe bit (P):  this\
    \ is the RLOC Probe bit that means the\n      Reencap Hop allows RLOC-probe messages\
    \ to be sent to it.  When the\n      R bit is set to 0, RLOC-probes must not be\
    \ sent.  When a Reencap\n      Hop is an anycast address then multiple physical\
    \ Reencap Hops are\n      using the same RLOC address.  In this case, RLOC-probes\
    \ are not\n      needed because when the closest RLOC address is not reachable,\n\
    \      another RLOC address can be reachable.\n   Strict bit (S):  this is the\
    \ Strict bit, which means the associated\n      Reencap Hop is required to be\
    \ used.  If this bit is 0, the\n      re-encapsulator can skip this Reencap Hop\
    \ and go to the next one\n      in the list.\n   AFI = x:  x can be any AFI value\
    \ from [AFN].  When a specific AFI has\n      its own encoding of a multicast\
    \ address, this field must be either\n      a group address or a broadcast address.\n\
    \   Usage: This encoding can be used in RLOC-records in Map-Request, Map-\n  \
    \ Reply, Map-Register, and Map-Notify messages.  This encoding does not\n   need\
    \ to be understood by the mapping system for mapping database\n   lookups, since\
    \ this LCAF Type is not a lookup key.\n"
- title: 4.7.  Storing Security Data in the Mapping Database
  contents:
  - "4.7.  Storing Security Data in the Mapping Database\n   When a locator in a locator-set\
    \ has a security key associated with\n   it, this LCAF will be used to encode\
    \ key material.  See [LISP-DDT]\n   for details.\n   Security Key Canonical Address\
    \ Format:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 11   |      Rsvd2    |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Key Count   |      Rsvd3    | Key Algorithm |   Rsvd4     |R|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Key Length          |       Key Material ...        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        ... Key Material                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |       Locator Address ...     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Key Count:  the Key Count field declares the number of Key\
    \ sections\n      included in this LCAF.  A Key section is made up of Key Length\
    \ and\n      Key Material fields.\n   Rsvd3:  this field is reserved for future\
    \ use and MUST be transmitted\n      as 0 and ignored on receipt.\n   Key Algorithm:\
    \  the Key Algorithm field identifies the key's\n      cryptographic algorithm\
    \ and specifies the format of the Public Key\n      field.  Refer to the [LISP-DDT]\
    \ and [RFC8061] use cases for\n      definitions of this field.\n   Rsvd4:  this\
    \ field is reserved for future use and MUST be transmitted\n      as 0 and ignored\
    \ on receipt.\n   R bit:  this is the Revoke bit and, if set, it specifies that\
    \ this\n      key is being revoked.\n   Key Length:  this field determines the\
    \ length in bytes of the Key\n      Material field.\n   Key Material:  the Key\
    \ Material field stores the key material.  The\n      format of the key material\
    \ stored depends on the Key Algorithm\n      field.\n   AFI = x:  x can be any\
    \ AFI value from [AFN].  This is the locator\n      address that owns the encoded\
    \ security key.\n   Usage: This encoding can be used in EID-records or RLOC-records\
    \ in\n   Map-Request, Map-Reply, Map-Register, and Map-Notify messages.  When\n\
    \   LISP-DDT [LISP-DDT] is used as the mapping system mechanism, extended\n  \
    \ EIDs are used in Map-Referral messages.\n"
- title: 4.8.  Source/Destination 2-Tuple Lookups
  contents:
  - "4.8.  Source/Destination 2-Tuple Lookups\n   When both a source and destination\
    \ address of a flow need\n   consideration for different locator-sets, this 2-tuple\
    \ key is used in\n   EID fields in LISP control messages.  When the Source/Dest\
    \ key is\n   registered to the mapping database, it can be encoded as a source-\n\
    \   prefix and destination-prefix.  When the Source/Dest is used as a key\n  \
    \ for a mapping database lookup, the source and destination come from a\n   data\
    \ packet.\n   Source/Dest Key Canonical Address Format:\n    0               \
    \    1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 12   |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Reserved           |   Source-ML   |    Dest-ML    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |         Source-Prefix ...     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = y          |     Destination-Prefix ...    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Reserved:  must be set to zero and ignored on receipt.\n\
    \   Source-ML:  the mask length of the source prefix that follows.  The\n    \
    \  length is the number of high-order mask bits set.\n   Dest-ML:  the mask length\
    \ of the destination prefix that follows.\n      The length is the number of high-order\
    \ mask bits set.\n   AFI = x:  x can be any AFI value from [AFN].\n   AFI = y:\
    \  y can be any AFI value from [AFN].  When a specific address\n      family has\
    \ a multicast address semantic, this field must be either\n      a group address\
    \ or a broadcast address.\n   Usage: This encoding can be used in EID-records\
    \ in Map-Request, Map-\n   Reply, Map-Register, and Map-Notify messages.  When\
    \ LISP-DDT\n   [LISP-DDT] is used as the mapping system mechanism, extended EIDs\
    \ are\n   used in Map-Referral messages.  Refer to [LISP-TE] for usage details\n\
    \   of this LCAF Type.\n"
- title: 4.9.  Replication List Entries for Multicast Forwarding
  contents:
  - "4.9.  Replication List Entries for Multicast Forwarding\n   The Replication List\
    \ Entry LCAF Type is an encoding for a locator\n   being used for unicast replication\
    \ according to the specification in\n   [LISP-RE].  This locator encoding is pointed\
    \ to by a Multicast Info\n   LCAF Type and is registered by Re-encapsulating Tunnel\
    \ Routers (RTRs)\n   that are participating in an overlay distribution tree. \
    \ Each RTR\n   will register its locator address and its configured level in the\n\
    \   distribution tree.\n   Replication List Entry Canonical Address Format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 13   |    Rsvd2      |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Rsvd3            |     Rsvd4     |  Level Value  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |           RTR/ETR #1 ...      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Rsvd3            |     Rsvd4     |  Level Value  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |           RTR/ETR  #n ...     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Rsvd3/Rsvd4:  must be set to zero and ignored on receipt.\n\
    \   Level Value:  this value is associated with the level within the\n      overlay\
    \ distribution tree hierarchy where the RTR resides.  The\n      level numbers\
    \ are ordered from lowest value being close to the ITR\n      (meaning that ITRs\
    \ replicate to level-0 RTRs) and higher levels\n      are further downstream on\
    \ the distribution tree closer to ETRs of\n      multicast receiver sites.\n \
    \  AFI = x:  x can be any AFI value from [AFN].  A specific AFI has its\n    \
    \  own encoding of either a unicast or multicast locator address.\n      For efficiency\
    \ reasons, all RTR/ETR entries for the same level\n      should be combined by\
    \ a Map-Server to avoid searching through the\n      entire multilevel list of\
    \ locator entries in a Map-Reply message.\n   Usage: This encoding can be used\
    \ in RLOC-records in Map-Request, Map-\n   Reply, Map-Register, and Map-Notify\
    \ messages.\n"
- title: 4.10.  Applications for AFI List LCAF Type
  contents:
  - '4.10.  Applications for AFI List LCAF Type

    '
- title: 4.10.1.  Binding IPv4 and IPv6 Addresses
  contents:
  - "4.10.1.  Binding IPv4 and IPv6 Addresses\n   When header translation between\
    \ IPv4 and IPv6 is desirable, a LISP\n   Canonical Address can use the AFI List\
    \ LCAF Type to carry a variable\n   number of AFIs in one LCAF AFI.\n   Address\
    \ Binding LISP Canonical Address Format:\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 1    |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            AFI = 1            |       IPv4 Address ...        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     ...  IPv4 Address         |            AFI = 2            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          IPv6 Address ...                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     ...  IPv6 Address  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     ...  IPv6 Address  ...                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     ...  IPv6 Address                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   This type of address format can be included in a Map-Request\
    \ when the\n   address is being used as an EID, but the LISP Mapping Database\
    \ System\n   lookup destination can use only the IPv4 address.  This is so a\n\
    \   Mapping Database Service Transport System, such as LISP-ALT\n   [RFC6836],\
    \ can use the Map-Request destination address to route the\n   control message\
    \ to the desired LISP site.\n   Usage: This encoding can be used in EID-records\
    \ or RLOC-records in\n   Map-Request, Map-Reply, Map-Register, and Map-Notify\
    \ messages.  See\n   the other subsections in this section for specific use cases.\n"
- title: 4.10.2.  Layer 2 VPNs
  contents:
  - "4.10.2.  Layer 2 VPNs\n   When Media Access Control (MAC) addresses are stored\
    \ in the LISP\n   Mapping Database System, the AFI List LCAF Type can be used\
    \ to carry\n   AFI 6.\n   MAC Address LISP Canonical Address Format:\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 1    |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             AFI = 6           |    Layer 2 MAC Address  ...   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    ... Layer 2 MAC Address                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   This address format can be used to connect Layer 2 domains\
    \ together\n   using LISP over an IPv4 or IPv6 core network to create a Layer\
    \ 2 VPN.\n   In this use case, a MAC address is being used as an EID, and the\n\
    \   locator-set that this EID maps to can be an IPv4 or IPv6 RLOC, or\n   even\
    \ another MAC address being used as an RLOC.  See [EID-MOBILITY]\n   for how Layer\
    \ 2 VPNs operate when doing EID mobility.\n   Care should be taken to protect\
    \ privacy against the adverse use of a\n   Layer 2 MAC address by ensuring policy\
    \ controls are used during EID\n   registrations that use AFI=6 encodings in RLOC-records.\
    \  Refer to the\n   use-case documents for additional information.\n"
- title: 4.10.3.  ASCII Names in the Mapping Database
  contents:
  - "4.10.3.  ASCII Names in the Mapping Database\n   If DNS names [RFC1035] or URIs\
    \ [RFC3986] are stored in the LISP\n   Mapping Database System, the AFI List LCAF\
    \ Type can be used to carry\n   an ASCII string.\n   ASCII LISP Canonical Address\
    \ Format:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 1    |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             AFI = 17          |      DNS Name or URI  ...     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   An example for using DNS names is when an ETR registers a\
    \ mapping\n   with an EID-record encoded as (AFI=1, 10.0.0.0/8) with an RLOC-record\n\
    \   (AFI=17, \"router.abc.com\").\n"
- title: 4.10.4.  Using Recursive LISP Canonical Address Encodings
  contents:
  - "4.10.4.  Using Recursive LISP Canonical Address Encodings\n   When any combination\
    \ of above is desirable, the AFI List LCAF Type\n   value can be used to carry\
    \ within the LCAF AFI another LCAF AFI (for\n   example, Application-Specific\
    \ Data in Section 5.1).\n   Recursive LISP Canonical Address Format:\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 1    |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 4    |     Rsvd2     |            Length2            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   IP TOS, IPv6 TC or Flow Label               |    Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Local Port (lower-range)   |    Local Port (upper-range)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Remote Port (lower-range)   |   Remote Port (upper-range)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            AFI = 1            |       IPv4 Address ...        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     ...  IPv4 Address         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Length2:  length in bytes starting and including the byte\
    \ after this\n      Length2 field.\n   This format could be used by a Mapping\
    \ Database Service Transport\n   System, such as LISP-ALT [RFC6836], where the\
    \ AFI=1 IPv4 address is\n   used as an EID and placed in the Map-Request destination\
    \ address by\n   the sending LISP system.  The ALT system can deliver the Map-Request\n\
    \   to the LISP destination site independent of the Application Data LCAF\n  \
    \ Type AFI payload values.  When this AFI is processed by the\n   destination\
    \ LISP site, it can return different locator-sets based on\n   the type of application\
    \ or level of service that is being requested.\n"
- title: 4.10.5.  Compatibility Mode Use Case
  contents:
  - "4.10.5.  Compatibility Mode Use Case\n   A LISP system should use the AFI List\
    \ LCAF Type format when sending\n   to LISP systems that do not support a particular\
    \ LCAF Type used to\n   encode locators.  This allows the receiving system to\
    \ be able to\n   parse a locator address for encapsulation purposes.  The list\
    \ of AFIs\n   in an AFI List LCAF Type has no semantic ordering and a receiver\n\
    \   should parse each AFI element no matter what the ordering.\n   Compatibility\
    \ Mode Address Format:\n    0                   1                   2        \
    \           3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 1    |     Rsvd2     |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 5    |     Rsvd2     |           Length2             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |N|     Latitude Degrees        |    Minutes    |    Seconds    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |E|     Longitude Degrees       |    Minutes    |    Seconds    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Altitude                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = 0          |           AFI = 1             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          IPv4 Address                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Length2:  length in bytes starting and including the byte\
    \ after this\n      Length2 field.\n   If a system does not recognized the Geo-Coordinates\
    \ LCAF Type that is\n   accompanying a locator address, an encoder can include\
    \ the Geo-\n   Coordinates LCAF Type embedded in an AFI List LCAF Type where the\
    \ AFI\n   in the Geo-Coordinates LCAF Type is set to 0 and the AFI encoded next\n\
    \   in the list is encoded with a valid AFI value to identify the locator\n  \
    \ address.\n   A LISP system is required to support the AFI List LCAF Type to\
    \ use\n   this procedure.  It would skip over 10 bytes of the Geo-Coordinates\n\
    \   LCAF Type to get to the locator address encoding (an IPv4 locator\n   address).\
    \  A LISP system that does support the Geo-Coordinates LCAF\n   Type can support\
    \ parsing the locator address within the Geo-\n   Coordinates LCAF Type encoding\
    \ or in the locator encoding that\n   follows in the AFI List LCAF Type.\n"
- title: 5.  Experimental LISP Canonical Address Applications
  contents:
  - "5.  Experimental LISP Canonical Address Applications\n   The following sections\
    \ describe experimental LCAF encodings.  These\n   LCAF Types are not approved\
    \ (i.e., not registered with IANA).  The\n   inclusion of these encodings in this\
    \ document is in support of\n   further study and experimentation to determine\
    \ whether these\n   encodings are functional, if there is a demand for these use\
    \ cases,\n   and to better understand deployment considerations.  As noted\n \
    \  previously, these LCAF Types are restricted to cautious use in self-\n   contained\
    \ environments in support of the corresponding use-case\n   documents.\n"
- title: 5.1.  Convey Application-Specific Data
  contents:
  - "5.1.  Convey Application-Specific Data\n   When a locator-set needs to be conveyed\
    \ based on the type of\n   application or the Per-Hop Behavior (PHB) of a packet,\
    \ the\n   Application Data LCAF Type can be used.\n   Application Data LISP Canonical\
    \ Address Format:\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 4    |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       IP TOS, IPv6 TC, or Flow Label          |    Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Local Port (lower-range)   |    Local Port (upper-range)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Remote Port (lower-range)   |   Remote Port (upper-range)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |         Address  ...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   IP TOS, IPv6 TC, or Flow Label:  this field stores the 8-bit\
    \ IPv4 TOS\n      field used in an IPv4 header, the 8-bit IPv6 Traffic Class or\
    \ Flow\n      Label used in an IPv6 header.\n   Local Port/Remote Port Ranges:\
    \  these fields are from the TCP, UDP,\n      or Stream Control Transmission Protocol\
    \ (SCTP) transport header.\n      A range can be specified by using a lower value\
    \ and an upper\n      value.  When a single port is encoded, the lower and upper\
    \ value\n      fields are the same.\n   AFI = x:  x can be any AFI value from\
    \ [AFN].\n   The Application Data LCAF Type is used for an EID encoding when an\n\
    \   ITR wants a locator-set for a specific application.  When used for an\n  \
    \ RLOC encoding, the ETR is supplying a locator-set for each specific\n   application\
    \ is has been configured to advertise.\n   Usage: This encoding can be used in\
    \ EID-records in Map-Request, Map-\n   Reply, Map-Register, and Map-Notify messages.\
    \  When LISP-DDT\n   [LISP-DDT] is used as the mapping system mechanism, extended\
    \ EIDs are\n   used in Map-Referral messages.  This LCAF Type is used as a lookup\n\
    \   key to the mapping system that can return a longest-match or exact-\n   match\
    \ entry.\n"
- title: 5.2.  Generic Database Mapping Lookups
  contents:
  - "5.2.  Generic Database Mapping Lookups\n   When the LISP Mapping Database System\
    \ holds information accessed by a\n   generic formatted key (where the key is\
    \ not the usual IPv4 or IPv6\n   address), an opaque key may be desirable.\n \
    \  Opaque Key LISP Canonical Address Format:\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 6    |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Key Field Num |      Key Wildcard Fields      |   Key . . .   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       . . . Key                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Key Field Num:  the value of this field is the number of\
    \ \"Key\" sub-\n      fields minus 1, the Key field can be broken up into.  So,\
    \ if this\n      field has a value of 0, there is one sub-field in the \"Key\"\
    .  The\n      width of the sub-fields are fixed length.  So, for a key size of\
    \ 8\n      bytes, with a Key Field Num of 3, four sub-fields of 2 bytes each\n\
    \      in length are allowed.  Allowing for a reasonable number of 16\n      sub-field\
    \ separators, valid values range from 0 to 15.\n   Key Wildcard Fields:  describes\
    \ which fields in the key are not used\n      as part of the key lookup.  This\
    \ wildcard encoding is a bitfield.\n      Each bit is a don't-care bit for a corresponding\
    \ field in the key.\n      Bit 0 (the low-order bit) in this bitfield corresponds\
    \ the first\n      field, the low-order field in the key, bit 1 the second field,\
    \ and\n      so on.  When a bit is set in the bitfield, it is a don't-care bit\n\
    \      and should not be considered as part of the database lookup.  When\n  \
    \    the entire 16 bits are set to 0, then all bits of the key are used\n    \
    \  for the database lookup.\n   Key:  the variable length key used to do a LISP\
    \ Mapping Database\n      System lookup.  The length of the key is the value n\
    \ (as shown\n      above).\n   Usage: This is an experimental Type where the usage\
    \ has not yet been\n   defined.\n"
- title: 5.3.  PETR Admission Control Functionality
  contents:
  - "5.3.  PETR Admission Control Functionality\n   When a public Proxy Egress Tunnel\
    \ Router (PETR) device wants to\n   verify who is encapsulating to it, it can\
    \ check for a specific nonce\n   value in the LISP-encapsulated packet.  To convey\
    \ the nonce to\n   admitted ITRs or PITRs, this LCAF is used in a Map-Register\
    \ or Map-\n   Reply locator-record.\n   Nonce Locator Canonical Address Format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 8    |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Reserved    |                  Nonce                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |         Address  ...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Reserved:  must be set to zero and ignored on receipt.\n\
    \   Nonce:  a nonce value returned by an ETR in a Map-Reply locator-\n      record\
    \ to be used by an ITR or PITR when encapsulating to the\n      locator address\
    \ encoded in the AFI field of this LCAF Type.  This\n      nonce value is inserted\
    \ in the nonce field in the LISP header\n      encapsulation.\n   AFI = x:  x\
    \ can be any AFI value from [AFN].\n   Usage: This is an experimental Type where\
    \ the usage has not yet been\n   defined.\n"
- title: 5.4.  Data Model Encoding
  contents:
  - "5.4.  Data Model Encoding\n   This Type allows a JSON data model to be encoded\
    \ as either an EID or\n   an RLOC.\n   JSON Data Model Type Address Format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 14   |    Rsvd2    |B|            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           JSON length         | JSON binary/text encoding ... |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |       Optional Address ...    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   B bit:  indicates that the JSON field is binary encoded according\
    \ to\n      [JSON-BINARY] when the bit is set to 1.  Otherwise, the encoding\n\
    \      is based on text encoding according to [RFC7159].\n   JSON length:  length\
    \ in octets of the following JSON binary/text\n      encoding field.\n   JSON\
    \ binary/text encoding:  a variable-length field that contains\n      either binary\
    \ or text encodings.\n   AFI = x:  x can be any AFI value from [AFN].  A specific\
    \ AFI has its\n      own encoding of either a unicast or multicast locator address.\n\
    \      All RTR/ETR entries for the same level should be combined by a\n      Map-Server\
    \ to avoid searching through the entire multilevel list\n      of locator entries\
    \ in a Map-Reply message.\n   Usage: This is an experimental Type where the usage\
    \ has not yet been\n   defined.  An example mapping is an EID-record encoded as\
    \ a\n   distinguished-name \"cpe-router\" and an RLOC-record encoded as a JSON\n\
    \   string \"{ \"router-address\" : \"1.1.1.1\", \"router-mask\" : \"8\" }\".\n"
- title: 5.5.  Encoding Key/Value Address Pairs
  contents:
  - "5.5.  Encoding Key/Value Address Pairs\n   The Key/Value pair is, for example,\
    \ useful for attaching attributes\n   to other elements of LISP packets, such\
    \ as EIDs or RLOCs.  When\n   attaching attributes to EIDs or RLOCs, it's necessary\
    \ to distinguish\n   between the element that should be used as EID or RLOC and,\
    \ hence, as\n   the key for lookups and additional attributes.  This is especially\n\
    \   the case when the difference cannot be determined from the Types of\n   the\
    \ elements, such as when two IP addresses are being used.\n   Key/Value Address\
    \ Pair Address Format:\n    0                   1                   2        \
    \           3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 15   |     Rsvd2     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |       Address as Key ...      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = y          |       Address as Value ...    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   AFI = x:  x is the \"Address as Key\" AFI that can have any\
    \ value from\n      [AFN].  A specific AFI has its own encoding of either a unicast\
    \ or\n      a multicast locator address.  All RTR/ETR entries for the same\n \
    \     level should be combined by a Map-Server to avoid searching\n      through\
    \ the entire multilevel list of locator entries in a Map-\n      Reply message.\n\
    \   Address as Key:  AFI-encoded address that will be attached with the\n    \
    \  attributes encoded in \"Address as Value\", which follows this\n      field.\n\
    \   AFI = y:  y is the \"Address of Value\" AFI that can have any value\n    \
    \  from [AFN].  A specific AFI has its own encoding of either a\n      unicast\
    \ or a multicast locator address.  All RTR/ETR entries for\n      the same level\
    \ should be combined by a Map-Server to avoid\n      searching through the entire\
    \ multilevel list of locator entries in\n      a Map-Reply message.\n   Address\
    \ as Value:  AFI-encoded address that will be the attribute\n      address that\
    \ goes along with \"Address as Key\" which precedes this\n      field.\n   Usage:\
    \ This is an experimental Type where the usage has not yet been\n   defined.\n"
- title: 5.6.  Multiple Data-Planes
  contents:
  - "5.6.  Multiple Data-Planes\n   Overlays are becoming popular in many parts of\
    \ the network, which has\n   created an explosion of data-plane encapsulation\
    \ headers.  Since the\n   LISP mapping system can hold many types of address formats,\
    \ it can\n   represent the encapsulation format supported by an RLOC as well.\n\
    \   When an encapsulator receives a Map-Reply with an Encapsulation\n   Format\
    \ LCAF Type encoded in an RLOC-record, it can select an\n   encapsulation format,\
    \ that it can support, from any of the\n   encapsulation protocols that have the\
    \ bit set to 1 in this LCAF Type.\n   Encapsulation Format Address Format:\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           AFI = 16387         |     Rsvd1     |     Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 16   |     Rsvd2     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Reserved-for-Future-Encapsulations       |U|G|N|v|V|l|L|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              AFI = x          |          Address ...          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Length:  length in bytes starting and including the byte after this\n    \
    \  Length field.\n   Reserved-for-Future-Encapsulations:  must be set to zero\
    \ and ignored\n      on receipt.  This field will get bits allocated to future\n\
    \      encapsulations, as they are created.\n   U: The RLOCs listed in the AFI-encoded\
    \ addresses in the next longword\n      can accept Generic UDP Encapsulation (GUE)\
    \ using destination UDP\n      port 6080 [GUE].\n   G: The RLOCs listed in the\
    \ AFI-encoded addresses in the next longword\n      can accept Geneve encapsulation\
    \ using destination UDP port 6081\n      [GENEVE].\n   N: The RLOCs listed in\
    \ the AFI-encoded addresses in the next longword\n      can accept NV-GRE (Network\
    \ Virtualization - Generic Routing\n      Encapsulation) using IPv4/IPv6 protocol\
    \ number 47 [RFC7637].\n   v: The RLOCs listed in the AFI-encoded addresses in\
    \ the next longword\n      can accept VXLAN-GPE (Generic Protocol Extension) encapsulation\n\
    \      using destination UDP port 4790 [GPE-VXLAN].\n   V: The RLOCs listed in\
    \ the AFI-encoded addresses in the next longword\n      can accept Virtual eXtensible\
    \ Local Area Network (VXLAN)\n      encapsulation using destination UDP port 4789\
    \ [RFC7348].\n   l: The RLOCs listed in the AFI-encoded addresses in the next\
    \ longword\n      can accept Layer 2 LISP encapsulation using destination UDP\
    \ port\n      8472 [LISP-L2].\n   L: The RLOCs listed in the AFI-encoded addresses\
    \ in the next longword\n      can accept Layer 3 LISP encapsulation using destination\
    \ UDP port\n      4341 [RFC6830].\n   Usage: This encoding can be used in RLOC-records\
    \ in Map-Request, Map-\n   Reply, Map-Register, and Map-Notify messages.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document is classified as Experimental.\
    \  The LCAF encodings\n   defined in this document are intended to be used with\
    \ their\n   corresponding use cases and in self-contained environments.  Users\n\
    \   should carefully consider how the [LISP-SEC] threat model applies to\n   their\
    \ particular use case.\n   The use of the Geo-Coordinates LCAF Type may raise\
    \ physical privacy\n   issues.  Care should be taken when configuring the mapping\
    \ system to\n   use specific policy parameters so geolocation information is not\n\
    \   returned gratuitously.  It is recommended that any documents that\n   specify\
    \ the use of the Geo-Coordinates LCAF Type should consider the\n   applicability\
    \ of RFC 6280 (BCP 160) [RFC6280] for location-based\n   privacy protection.\n\
    \   Additional privacy concerns have arisen since publication of BCP 160,\n  \
    \ and future work on LISP should examine potential threats beyond BCP\n   160\
    \ and address improving privacy and security for LISP deployments.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document defines a canonical address format\
    \ encoding used in\n   LISP control messages and in the encoding of lookup keys\
    \ for the LISP\n   Mapping Database System.  Such an address format is based on\
    \ a fixed\n   AFI (16387) and a LISP LCAF Type field.\n   The LISP LCAF Type field\
    \ is an 8-bit field specific to the LISP\n   Canonical Address Format encodings.\
    \  IANA has created a new registry\n   (as outlined in [RFC5226]) titled \"LISP\
    \ Canonical Address Format\n   (LCAF) Types\".  Initial values for the \"LISP\
    \ Canonical Address Format\n   (LCAF) Types\" registry are given below.  Future\
    \ assignments are to be\n   made using the Specification Required policy [RFC5226].\
    \  Assignments\n   consist of a LISP LCAF Type Name and its associated value:\n\
    \              +-------+------------------------+-----------+\n              |\
    \ Value | LISP LCAF Type Name    | Reference |\n              +-------+------------------------+-----------+\n\
    \              | 0     | Null Body              | Section 3 |\n              |\
    \ 1     | AFI List               | Section 3 |\n              | 2     | Instance\
    \ ID            | Section 3 |\n              | 3     | AS Number             \
    \ | Section 3 |\n              | 5     | Geo-Coordinates        | Section 3 |\n\
    \              | 7     | NAT-Traversal          | Section 3 |\n              |\
    \ 9     | Multicast Info         | Section 3 |\n              | 10    | Explicit\
    \ Locator Path  | Section 3 |\n              | 11    | Security Key          \
    \ | Section 3 |\n              | 12    | Source/Dest Key        | Section 3 |\n\
    \              | 13    | Replication List Entry | Section 3 |\n              +-------+------------------------+-----------+\n\
    \                      Table 1: Initial Values in the\n           \"LISP Canonical\
    \ Address Format (LCAF) Types\" Registry\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names - implementation\
    \ and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC1918]\
    \  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and\
    \ E. Lear, \"Address Allocation for Private Internets\",\n              BCP 5,\
    \ RFC 1918, DOI 10.17487/RFC1918, February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3232]\
    \  Reynolds, J., Ed., \"Assigned Numbers: RFC 1700 is Replaced\n             \
    \ by an On-line Database\", RFC 3232, DOI 10.17487/RFC3232,\n              January\
    \ 2002, <http://www.rfc-editor.org/info/rfc3232>.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,\
    \ May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC6280]\
    \  Barnes, R., Lepinski, M., Cooper, A., Morris, J.,\n              Tschofenig,\
    \ H., and H. Schulzrinne, \"An Architecture for\n              Location and Location\
    \ Privacy in Internet Applications\",\n              BCP 160, RFC 6280, DOI 10.17487/RFC6280,\
    \ July 2011,\n              <http://www.rfc-editor.org/info/rfc6280>.\n   [RFC6830]\
    \  Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"The\n              Locator/ID\
    \ Separation Protocol (LISP)\", RFC 6830,\n              DOI 10.17487/RFC6830,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6830>.\n   [RFC6836]\
    \  Fuller, V., Farinacci, D., Meyer, D., and D. Lewis,\n              \"Locator/ID\
    \ Separation Protocol Alternative Logical\n              Topology (LISP+ALT)\"\
    , RFC 6836, DOI 10.17487/RFC6836,\n              January 2013, <http://www.rfc-editor.org/info/rfc6836>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n  \
    \            2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7348]  Mahalingam,\
    \ M., Dutt, D., Duda, K., Agarwal, P., Kreeger,\n              L., Sridhar, T.,\
    \ Bursell, M., and C. Wright, \"Virtual\n              eXtensible Local Area Network\
    \ (VXLAN): A Framework for\n              Overlaying Virtualized Layer 2 Networks\
    \ over Layer 3\n              Networks\", RFC 7348, DOI 10.17487/RFC7348, August\
    \ 2014,\n              <http://www.rfc-editor.org/info/rfc7348>.\n   [RFC7637]\
    \  Garg, P., Ed. and Y. Wang, Ed., \"NVGRE: Network\n              Virtualization\
    \ Using Generic Routing Encapsulation\",\n              RFC 7637, DOI 10.17487/RFC7637,\
    \ September 2015,\n              <http://www.rfc-editor.org/info/rfc7637>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AFN]      IANA, \"Address Family Numbers\"\
    ,\n              <http://www.iana.org/assignments/address-family-numbers/>.\n\
    \   [EID-MOBILITY]\n              Portoles-Comeras, M., Ashtaputre, V., Moreno,\
    \ V., Maino,\n              F., and D. Farinacci, \"LISP L2/L3 EID Mobility Using\
    \ a\n              Unified Control Plane\", Work in Progress,\n              draft-portoles-lisp-eid-mobility-01,\
    \ October 2016.\n   [GENEVE]   Gross, J., Ganga, I., and T. Sridhar, \"Geneve:\
    \ Generic\n              Network Virtualization Encapsulation\", Work in Progress,\n\
    \              draft-ietf-nvo3-geneve-03, September 2016.\n   [GPE-VXLAN]\n  \
    \            Maino, F., Kreeger, L., and U. Elzur, \"Generic Protocol\n      \
    \        Extension for VXLAN\", Work in Progress,\n              draft-ietf-nvo3-vxlan-gpe-03,\
    \ October 2016.\n   [GUE]      Herbert, T., Yong, L., and O. Zia, \"Generic UDP\n\
    \              Encapsulation\", Work in Progress, draft-ietf-nvo3-gue-05,\n  \
    \            October 2016.\n   [JSON-BINARY]\n              \"Universal Binary\
    \ JSON Specification\",\n              <http://ubjson.org>.\n   [LISP-DDT] Fuller,\
    \ V., Lewis, D., Ermagan, V., Jain, A., and A.\n              Smirnov, \"LISP\
    \ Delegated Database Tree\", Work in\n              Progress, draft-ietf-lisp-ddt-09,\
    \ January 2017.\n   [LISP-L2]  Smith, M., Dutt, D., Farinacci, D., and F. Maino,\
    \ \"Layer 2\n              (L2) LISP Encapsulation Format\", Work in Progress,\n\
    \              draft-smith-lisp-layer2-03, September 2013.\n   [LISP-RE]  Coras,\
    \ F., Cabellos-Aparicio, A., Domingo-Pascual, J.,\n              Maino, F., and\
    \ D. Farinacci, \"LISP Replication\n              Engineering\", Work in Progress,\n\
    \              draft-coras-lisp-re-08, November 2015.\n   [LISP-SEC] Maino, F.,\
    \ Ermagan, V., Cabellos, A., and D. Saucez,\n              \"LISP-Security (LISP-SEC)\"\
    , Work in Progress,\n              draft-ietf-lisp-sec-12, November 2016.\n  \
    \ [LISP-TE]  Farinacci, D., Kowal, M., and P. Lahiri, \"LISP Traffic\n       \
    \       Engineering Use-Cases\", Work in Progress,\n              draft-farinacci-lisp-te-11,\
    \ September 2016.\n   [NAT-LISP] Ermagan, V., Farinacci, D., Lewis, D., Skriver,\
    \ J., Maino,\n              F., and C. White, \"NAT traversal for LISP\", Work\
    \ in\n              Progress, draft-ermagan-lisp-nat-traversal-11, August\n  \
    \            2016.\n   [RFC8061]  Farinacci, D. and B. Weis, \"Locator/ID Separation\
    \ Protocol\n              (LISP) Data-Plane Confidentiality\", RFC 8061,\n   \
    \           DOI 10.17487/RFC8061, February 2017,\n              <http://www.rfc-editor.org/info/rfc8061>.\n\
    \   [WGS-84]   National Imagery and Mapping Agency, \"Department of\n        \
    \      Defense World Geodetic System 1984\", NIMA TR8350.2,\n              January\
    \ 2000, <http://earth-info.nga.mil/GandG/\n              publications/tr8350.2/wgs84fin.pdf>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Vince Fuller, Gregg Schudel,\
    \ Jesper\n   Skriver, Luigi Iannone, Isidor Kouvelas, and Sander Steffann for\n\
    \   their technical and editorial commentary.\n   The authors would like to thank\
    \ Victor Moreno for discussions that\n   led to the definition of the Multicast\
    \ Info LCAF Type.\n   The authors would like to thank Parantap Lahiri and Michael\
    \ Kowal for\n   discussions that led to the definition of the Explicit Locator\
    \ Path\n   (ELP) LCAF Type.\n   The authors would like to thank Fabio Maino and\
    \ Vina Ermagan for\n   discussions that led to the definition of the Security\
    \ Key LCAF Type.\n   The authors would like to thank Albert Cabellos-Aparicio\
    \ and Florin\n   Coras for discussions that led to the definition of the Replication\n\
    \   List Entry LCAF Type.\n   Thanks goes to Michiel Blokzijl and Alberto Rodriguez-Natal\
    \ for\n   suggesting new LCAF Types.\n   Thanks also goes to Terry Manderson for\
    \ assistance obtaining a LISP\n   AFI value from IANA.\n   And finally, the authors\
    \ thank Stephen Farrell (Security Area\n   Director) and Deborah Brungard (Routing\
    \ Area Director) for their\n   suggested text to get the document through IESG\
    \ review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dino Farinacci\n   lispers.net\n   San Jose, CA\n   United\
    \ States of America\n   Email: farinacci@gmail.com\n   Dave Meyer\n   Brocade\n\
    \   San Jose, CA\n   United States of America\n   Email: dmm@1-4-5.net\n   Job\
    \ Snijders\n   NTT Communications\n   Theodorus Majofskistraat 100\n   Amsterdam\
    \  1065 SZ\n   The Netherlands\n   Email: job@ntt.net\n"
