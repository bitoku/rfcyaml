- title: __initial_text__
  contents:
  - "       Reducing Redundancy in IP Flow Information Export (IPFIX)\n          \
    \        and Packet Sampling (PSAMP) Reports\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a bandwidth saving method for exporting\
    \ Flow\n   or packet information using the IP Flow Information eXport (IPFIX)\n\
    \   protocol.  As the Packet Sampling (PSAMP) protocol is based on IPFIX,\n  \
    \ these considerations are valid for PSAMP exports as well.\n   This method works\
    \ by separating information common to several Flow\n   Records from information\
    \ specific to an individual Flow Record.\n   Common Flow information is exported\
    \ only once in a Data Record\n   defined by an Options Template, while the rest\
    \ of the specific Flow\n   information is associated with the common information\
    \ via a unique\n   identifier.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. IPFIX Documents Overview ...................................3\n  \
    \    1.2. PSAMP Documents Overview ...................................4\n   2.\
    \ Terminology .....................................................4\n      2.1.\
    \ Terminology Summary Table ..................................5\n      2.2. IPFIX\
    \ Flows versus PSAMP Packets ...........................5\n   3. Specifications\
    \ for Bandwidth-Saving Information Export ..........5\n      3.1. Problem Statement\
    \ and High-Level Solution ..................6\n      3.2. Data Reduction Technique\
    \ ...................................7\n   4. Transport Protocol Choice .......................................8\n\
    \      4.1. PR-SCTP ....................................................9\n  \
    \    4.2. UDP ........................................................9\n    \
    \  4.3. TCP ........................................................9\n   5. commonPropertiesID\
    \ Management ...................................9\n   6. The Collecting Process\
    \ Side ....................................10\n      6.1. UDP .......................................................11\n\
    \      6.2. TCP .......................................................12\n  \
    \ 7. Advanced Techniques ............................................12\n    \
    \  7.1. Multiple Data Reduction ...................................12\n      7.2.\
    \ Cascading Common Properties ...............................15\n   8. Export\
    \ and Evaluation Considerations ...........................15\n      8.1. Transport\
    \ Protocol Choice .................................16\n      8.2. Reduced Size\
    \ Encoding .....................................16\n      8.3. Efficiency Gain\
    \ ...........................................16\n   9. Security Considerations\
    \ ........................................17\n   10. Acknowledgments ...............................................17\n\
    \   11. References ....................................................17\n  \
    \    11.1. Normative References .....................................17\n    \
    \  11.2. Informative References ...................................18\n   Appendix\
    \ A. Examples ..............................................19\n      A.1. Per-Flow\
    \ Data Reduction ...................................19\n      A.2. Per-Packet\
    \ Data Reduction .................................23\n      A.3. Common Properties\
    \ Withdrawal Message ......................26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPFIX working group has specified a protocol to export\
    \ IP Flow\n   information [RFC5101].  This protocol is designed to export\n  \
    \ information about IP traffic Flows and related measurement data,\n   where a\
    \ Flow is defined by a set of key attributes (e.g., source and\n   destination\
    \ IP address, source and destination port, etc.).  However,\n   thanks to its\
    \ template mechanism, the IPFIX protocol can export any\n   type of information,\
    \ as long as the Information Element is specified\n   in the IPFIX information\
    \ model [RFC5101] or registered with IANA.\n   Regardless of the fields' contents,\
    \ Flow Records with common\n   properties export the same fields in every single\
    \ Data Record.  These\n   common properties may represent values common to a collection\
    \ of\n   Flows or packets, or values that are invariant over time.  Note that\n\
    \   the common properties don't represent the list of Flow Keys, which\n   are\
    \ used to define a Flow definition; however, the common properties\n   may contain\
    \ some of the Flow Keys.  The reduction of redundant data\n   from the export\
    \ stream can result in a significant reduction of the\n   transferred data.\n\
    \   This document specifies a way to export these invariant or common\n   properties\
    \ only once, while the rest of the Flow-specific properties\n   are exported in\
    \ regular Data Records.  Unique common properties\n   identifiers are used to\
    \ link Data Records and the common attributes.\n   The proposed method is applicable\
    \ to IPFIX Flow and to PSAMP per-\n   packet information, without any changes\
    \ to both the IPFIX and PSAMP\n   protocol specifications.\n"
- title: 1.1.  IPFIX Documents Overview
  contents:
  - "1.1.  IPFIX Documents Overview\n   The IPFIX protocol [RFC5101] provides network\
    \ administrators with\n   access to IP Flow information.  The architecture for\
    \ the export of\n   measured IP Flow information out of an IPFIX exporting process\
    \ to a\n   collecting process is defined in the IPFIX Architecture [RFC5470],\n\
    \   per the requirements defined in RFC 3917 [RFC3917].  The IPFIX\n   Architecture\
    \ [RFC5470] specifies how IPFIX Data Records and templates\n   are carried via\
    \ a congestion-aware transport protocol from IPFIX\n   exporting processes to\
    \ IPFIX collecting processes.  IPFIX has a\n   formal description of IPFIX Information\
    \ Elements, their names, types,\n   and additional semantic information, as specified\
    \ in the IPFIX\n   information model [RFC5102].  Finally, the IPFIX applicability\n\
    \   statement [RFC5472] describes what type of applications can use the\n   IPFIX\
    \ protocol and how they can use the information provided.  It\n   furthermore\
    \ shows how the IPFIX framework relates to other\n   architectures and frameworks.\n"
- title: 1.2.  PSAMP Documents Overview
  contents:
  - "1.2.  PSAMP Documents Overview\n   The document \"A Framework for Packet Selection\
    \ and Reporting\"\n   [RFC5474] describes the PSAMP framework for network elements\
    \ to\n   select subsets of packets by statistical and other methods, and to\n\
    \   export a stream of reports on the selected packets to a collector.\n   The\
    \ set of packet selection techniques (sampling, filtering, and\n   hashing) supported\
    \ by PSAMP is described in \"Sampling and Filtering\n   Techniques for IP Packet\
    \ Selection\" [RFC5475].  The PSAMP protocol\n   [RFC5476] specifies the export\
    \ of packet information from a PSAMP\n   exporting process to a PSAMP collecting\
    \ process.  Like IPFIX, PSAMP\n   has a formal description of its Information\
    \ Elements, their names,\n   types, and additional semantic information.  The\
    \ PSAMP information\n   model is defined in [RFC5477].  Finally, [PSAMP-MIB] describes\
    \ the\n   PSAMP Management Information Base.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   IPFIX-specific terminology used in this document is defined\
    \ in\n   Section 2 of the IPFIX protocol specification [RFC5101] and Section 3\n\
    \   of the PSAMP protocol specification [RFC5476].  As in [RFC5101] and\n   [RFC5476],\
    \ these IPFIX-specific terms have the first letter of a word\n   capitalized when\
    \ used in this document.\n   In addition, the following new terms are defined\
    \ in this document:\n   commonPropertiesID:  The commonPropertiesID is an identifier\
    \ of a set\n      of common properties that is locally unique per Observation\
    \ Domain\n      and Transport Session.  Typically, this Information Element is\n\
    \      used to link to information reported in separate Data Records.\n      See\
    \ the IPFIX information model [RFC5102] for the Information\n      Element definition.\n\
    \   Common Properties:  Common Properties are a collection of one or more\n  \
    \    attributes shared by a set of different Flow Records.  Each set of\n    \
    \  Common Properties is uniquely identifiable by means of a\n      commonPropertiesID.\n\
    \   Specific Properties:  Specific Properties are a collection of one or\n   \
    \   more attributes reported in a Flow Record that are not included in\n     \
    \ the Common Properties defined for that Flow Record.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in RFC 2119 [RFC2119].\n"
- title: 2.1.  Terminology Summary Table
  contents:
  - "2.1.  Terminology Summary Table\n   +------------------+---------------------------------------------+\n\
    \   |                  |                 Contents                    |\n   | \
    \                 +--------------------+------------------------+\n   |      \
    \ Set        |      Template      |         Record         |\n   +------------------+--------------------+------------------------+\n\
    \   |     Data Set     |          /         |     Data Record(s)     |\n   +------------------+--------------------+------------------------+\n\
    \   |   Template Set   | Template Record(s) |           /            |\n   +------------------+--------------------+------------------------+\n\
    \   | Options Template | Options Template   |           /            |\n   | \
    \      Set        | Record(s)          |                        |\n   +------------------+--------------------+------------------------+\n\
    \                         Terminology Summary Table\n   A Data Set is composed\
    \ of Data Record(s).  No Template Record is\n   included.  A Template Record or\
    \ an Options Template Record defines\n   the Data Record.\n   A Template Set contains\
    \ only Template Record(s).\n   An Options Template Set contains only Options Template\
    \ Record(s).\n"
- title: 2.2.  IPFIX Flows versus PSAMP Packets
  contents:
  - "2.2.  IPFIX Flows versus PSAMP Packets\n   As described in the PSAMP protocol\
    \ specification [RFC5476], the major\n   difference between IPFIX and PSAMP is\
    \ that the IPFIX protocol exports\n   Flow Records while the PSAMP protocol exports\
    \ Packet Records.  From a\n   pure export point of view, IPFIX will not distinguish\
    \ a Flow Record\n   composed of several packets aggregated together from a Flow\
    \ Record\n   composed of a single packet.  So, the PSAMP export can be seen as\
    \ a\n   special IPFIX Flow Record containing information about a single\n   packet.\n\
    \   For this document's clarity, the term Flow Record represents a\n   generic\
    \ term expressing an IPFIX Flow Record or a PSAMP Packet\n   Record, as foreseen\
    \ by its definition.  However, when appropriate, a\n   clear distinction between\
    \ Flow Record or Packet Record will be made.\n"
- title: 3.  Specifications for Bandwidth-Saving Information Export
  contents:
  - "3.  Specifications for Bandwidth-Saving Information Export\n   Several Flow Records\
    \ often share a set of Common Properties.\n   Repeating the information about\
    \ these Common Properties for every\n   Flow Record introduces a huge amount of\
    \ redundancy.  This document\n   proposes a method to reduce this redundancy.\n\
    \   The PSAMP specifications are used for the export of per-packet\n   information,\
    \ exporting the specific observed packet in an IPFIX Flow\n   Record.  This can\
    \ be considered as a special Flow Record case,\n   composed of a single packet.\
    \  Therefore, the method described in this\n   document is also applicable to\
    \ per-packet data reduction, e.g., for\n   export of One-Way Delay (OWD) measurements\
    \ (see Appendix), trajectory\n   sampling, etc.\n"
- title: 3.1.  Problem Statement and High-Level Solution
  contents:
  - "3.1.  Problem Statement and High-Level Solution\n   Consider a set of properties\
    \ \"A\", e.g., common sourceAddressA and\n   sourcePortA, equivalent for each\
    \ Flow Record exported.  Figure 1\n   shows how this information is repeated with\
    \ classical IPFIX Flow\n   Records, expressing the waste of bandwidth to export\
    \ redundant\n   information.\n   +----------------+-------------+---------------------------+\n\
    \   | sourceAddressA | sourcePortA |     <Flow1 information>   |\n   +----------------+-------------+---------------------------+\n\
    \   | sourceAddressA | sourcePortA |     <Flow2 information>   |\n   +----------------+-------------+---------------------------+\n\
    \   | sourceAddressA | sourcePortA |     <Flow3 information>   |\n   +----------------+-------------+---------------------------+\n\
    \   | sourceAddressA | sourcePortA |     <Flow4 information>   |\n   +----------------+-------------+---------------------------+\n\
    \   |      ...       |     ...     |            ...            |\n   +----------------+-------------+---------------------------+\n\
    \        Figure 1: Common and Specific Properties Exported Together\n   Figure\
    \ 2 shows how this information is exported when applying the\n   specifications\
    \ of this document.  The Common Properties are separated\n   from the Specific\
    \ Properties for each Flow Record.  The Common\n   Properties would be exported\
    \ only once in a specific Data Record\n   (defined by an Options Template), while\
    \ each Flow Record contains a\n   pointer to the Common Properties A, along with\
    \ its Flow-specific\n   information.  In order to maintain the relationship between\
    \ these\n   sets of properties, we introduce indices (in this case, the index\
    \ for\n   properties A) for the Common Properties that are unique for all\n  \
    \ Common Properties entries within an Observation Domain.  The purpose\n   of\
    \ the indices is to serve as a \"key\" identifying \"rows\" of the\n   Common\
    \ Properties table.  The rows are then referenced by the\n   Specific Properties\
    \ by using the appropriate value for the Common\n   Properties identifier.\n \
    \  +------------------------+-----------------+-------------+\n   | index for\
    \ properties A | sourceAddressA  | sourcePortA |\n   +------------------------+-----------------+-------------+\n\
    \   |          ...           |      ...        |     ...     |\n   +------------------------+-----------------+-------------+\n\
    \   +------------------------+---------------------------+\n   | index for properties\
    \ A |     <Flow1 information>   |\n   +------------------------+---------------------------+\n\
    \   | index for properties A |     <Flow2 information>   |\n   +------------------------+---------------------------+\n\
    \   | index for properties A |     <Flow3 information>   |\n   +------------------------+---------------------------+\n\
    \   | index for properties A |     <Flow4 information>   |\n   +------------------------+---------------------------+\n\
    \       Figure 2: Common and Specific Properties Exported Separately\n   This\
    \ unique export of the Common Properties results in a decrease of\n   the bandwidth\
    \ requirements for the path between the Exporter and the\n   Collector.\n"
- title: 3.2.  Data Reduction Technique
  contents:
  - "3.2.  Data Reduction Technique\n   The IPFIX protocol [RFC5101] is Template based.\
    \  Templates define how\n   data should be exported, describing data fields together\
    \ with their\n   type and meaning.  IPFIX specifies two types of Templates: the\n\
    \   Template Record and the Options Template Record.  The difference\n   between\
    \ the two is that the Options Template Record includes the\n   notion of scope,\
    \ defining how to scope the applicability of the Data\n   Record.  The scope,\
    \ which is only available in the Options Template\n   Record, gives the context\
    \ of the reported Information Elements in the\n   Data Records.  The Template\
    \ Records and Options Template Records are\n   necessary to decode the Data Records.\
    \  Indeed, by only looking at the\n   Data Records themselves, it is impossible\
    \ to distinguish a Data\n   Record defined by Template Record from a Data Record\
    \ defined by an\n   Options Template Record.  To export information more efficiently,\n\
    \   this specification proposes to group Flow Records by their common\n   properties.\
    \  We define Common Properties as a collection of\n   attributes shared by a set\
    \ of different Flow Records.\n   An implementation using the proposed specification\
    \ MUST follow the\n   IPFIX transport protocol specifications defined in the IPFIX\
    \ protocol\n   [RFC5101].\n   As explained in Figure 3, the information is split\
    \ into two parts,\n   using two different Data Records.  Common Properties MUST\
    \ be exported\n   via Data Records defined by an Options Template Record.  Like\n\
    \   Template Records, they MUST be sent only once per SCTP association or\n  \
    \ TCP connection, and MUST be sent reliably via SCTP if SCTP is the\n   transport\
    \ protocol.  These properties represent values common to\n   several Flow Records\
    \ (e.g., IP source and destination address).  The\n   Common Properties Data Records\
    \ MUST be sent prior to the\n   corresponding Specific Properties Data Records.\
    \  The Data Records\n   reporting Specific Properties MUST be associated with\
    \ the Data\n   Records reporting the Common Properties using a unique identifier\
    \ for\n   the Common Properties, the commonPropertiesID Information Element\n\
    \   [RFC5102].  The commonPropertiesID Information Element MUST be\n   included\
    \ in the scope of the Options Template Record, and also\n   included in the associated\
    \ Template Record.\n   +---------------------------+     +---------------------+\n\
    \   | Common Properties         |     | Specific Properties |  Template\n   |\
    \ Options Template Record   |     | Template Record     |  Definition\n   |  \
    \                         |     |                     |\n   | scope: commonPropertiesID\
    \ |     | commonPropertiesID  |\n   | Common Properties         |     | Specific\
    \ Properties |\n   +------------+--------------+     +----------+----------+\n\
    \   .............|...............................|.......................\n  \
    \              |                               |\n   +------------v-------------+\
    \      +----------v----------+\n   | Common Properties        |      | Specific\
    \ Properties |+  Exported\n   | Data Record              |------> Data Records\
    \        ||  Data\n   +--------------------------+      +---------------------+|\
    \  Records\n                                      +---------------------+\n  \
    \        Figure 3: Template Record and Data Record Dependencies\n   From the IPFIX\
    \ protocol, there are no differences between the per-\n   Flow or per-packet data\
    \ reduction, except maybe the terminology where\n   the Specific Properties could\
    \ be called packet Specific Properties in\n   the previous figure.\n"
- title: 4.  Transport Protocol Choice
  contents:
  - "4.  Transport Protocol Choice\n   This document follows the IPFIX transport protocol\
    \ specifications\n   defined in the IPFIX protocol [RFC5101].  However, depending\
    \ on the\n   transport protocol choice, this document imposes some additional\n\
    \   constraints.  If Partial Reliable Stream Control Transmission\n   Protocol\
    \ (PR-SCTP) [RFC3758] is selected as the IPFIX protocol, the\n   following PR-SCTP\
    \ subsection specifications MUST be respected.  If\n   UDP is selected as the\
    \ IPFIX protocol, the following UDP subsection\n   specifications MUST be respected.\
    \  If TCP is selected as the IPFIX\n   protocol, the following TCP subsection\
    \ specifications MUST be\n   respected.\n"
- title: 4.1.  PR-SCTP
  contents:
  - "4.1.  PR-SCTP\n   The active Common Properties MUST be sent after the SCTP association\n\
    \   establishment and before the corresponding Specific Properties Data\n   Records.\
    \  In the case of SCTP association re-establishment, all\n   active Common Properties\
    \ MUST be resent before the corresponding\n   Specific Properties Data Records.\n\
    \   The Common Properties Data Records MUST be sent reliably.\n"
- title: 4.2.  UDP
  contents:
  - "4.2.  UDP\n   Common Properties Data Records MUST be resent on a regular basis.\n\
    \   The periodicity MUST be configurable.  The default value for the\n   frequency\
    \ of Common Properties transmission (refresh timeout) is 10\n   minutes.\n   The\
    \ Exporting Process SHOULD transmit the Common Properties\n   definition in advance\
    \ of any Data Record that uses these Common\n   Properties to help ensure that\
    \ the Collector has the Common\n   Properties definition before receiving the\
    \ first associated Data\n   Record.\n   If a commonPropertiesID is not used anymore,\
    \ the Exporting Process\n   stops resending the related Common Properties Data\
    \ Record.  The old\n   commonPropertiesID MUST NOT be used until its lifetime\
    \ (see\n   Section 6.1) has expired.\n"
- title: 4.3.  TCP
  contents:
  - "4.3.  TCP\n   Common Properties MUST be sent after the TCP connection\n   establishment,\
    \ and before the corresponding Specific Properties Data\n   Records.  In the case\
    \ of TCP connection re-establishment, all active\n   Common Properties MUST be\
    \ resent before the corresponding Specific\n   Properties Data Records.\n"
- title: 5.  commonPropertiesID Management
  contents:
  - "5.  commonPropertiesID Management\n   The commonPropertiesID is an identifier\
    \ of a set of common properties\n   that is locally unique per Observation Domain\
    \ and Transport Session.\n   The Exporting Process MUST manage the commonPropertiesIDs\
    \ allocations\n   for its Observation Domains and Transport Session.  Different\n\
    \   Observation Domains from the same Exporter MAY use the same\n   commonPropertiesID\
    \ value to refer to different sets of Common\n   Properties.\n   The commonPropertiesID\
    \ values MAY be assigned sequentially, but it is\n   NOT REQUIRED.  Particular\
    \ commonPropertiesID ranges or values MAY\n   have explicit meanings for the IPFIX\
    \ Device.  For example,\n   commonPropertiesID values may be assigned based on\
    \ the result of a\n   hash function, etc.\n   Using a 64-bit commonPropertiesID\
    \ Information Element allows the\n   export of 2**64 active sets of Common Properties,\
    \ per Observation\n   Domain and per Transport Session.\n   commonPropertiesIDs\
    \ that are not used anymore SHOULD be withdrawn.\n   The Common Properties Withdrawal\
    \ message is a Data Record defined by\n   an Options Template consisting of only\
    \ one scope field -- namely, the\n   commonPropertiesID (with a type of 137 [RFC5102])\
    \ and no non-scope\n   fields.\n   0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 3            |      Length = 14 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID N           |       Field Count = 1         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Scope Field count = 1    |0|  commonPropertiesID = 137   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Scope 1 Field Length = 8     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 4: Common Properties Withdrawal Message\n   If UDP is selected\
    \ as the transport protocol, the Common Properties\n   Withdrawal messages MUST\
    \ NOT be used, as this method is inefficient\n   due to the unreliable nature\
    \ of UDP.\n"
- title: 6.  The Collecting Process Side
  contents:
  - "6.  The Collecting Process Side\n   This section describes the Collecting Process\
    \ when using SCTP and PR-\n   SCTP as the transport protocol.  Any necessary changes\
    \ to the\n   Collecting Process, specifically related to TCP or UDP transport\n\
    \   protocols, are specified in the subsections.\n   The Collecting Process MUST\
    \ store the commonPropertiesID information\n   for the duration of the association\
    \ so that it can interpret the\n   corresponding Data Records that are received\
    \ in subsequent Data Sets.\n   The Collecting Process can either store the Data\
    \ Records as they\n   arrive, without reconstructing the initial Flow Record,\
    \ or\n   reconstruct the initial Flow Record.  In the former case, there might\n\
    \   be less storage capacity required at the Collector side.  In the\n   latter\
    \ case, the Collector job is more complex and time-consuming due\n   to the higher\
    \ resource demand for record processing in real time.\n   If the Collecting Process\
    \ has received the Specific Properties Data\n   Record before the associated Common\
    \ Properties Data Record, the\n   Collecting Process SHOULD store the Specific\
    \ Properties Data Record\n   and await the retransmission or out-of-order arrival\
    \ of the Common\n   Properties Data Record.\n   commonPropertiesIDs are unique\
    \ per SCTP association and per\n   Observation Domain.  If the Collecting Process\
    \ receives an Options\n   Template Record with a scope containing a commonPropertiesID\
    \ that has\n   already been received but that has not previously been withdrawn\n\
    \   (i.e., a commonPropertiesID from the same Exporter Observation Domain\n  \
    \ received on the SCTP association), then the Collecting Process MUST\n   shut\
    \ down the association.\n   When an SCTP association is closed, the Collecting\
    \ Process MUST\n   discard all commonPropertiesIDs received over that association\
    \ and\n   stop decoding IPFIX Messages that use those commonPropertiesIDs.\n \
    \  If a Collecting Process receives a Common Properties Withdrawal\n   message,\
    \ the Collecting Process MUST delete the corresponding Common\n   Properties associated\
    \ with the specific SCTP association and specific\n   Observation Domain, and\
    \ stop interpreting Data Records referring to\n   those Common Properties.  The\
    \ receipt of Data Records referring to\n   Common Properties that have been withdrawn\
    \ MUST be ignored and SHOULD\n   be logged by the Collecting Process.\n   If the\
    \ Collecting Process receives a Common Properties Withdrawal\n   message for Common\
    \ Properties that it has not received before on this\n   SCTP association, it\
    \ MUST reset the SCTP association and discard the\n   IPFIX Message, and it SHOULD\
    \ log the error as it does for malformed\n   IPFIX Messages.\n"
- title: 6.1.  UDP
  contents:
  - "6.1.  UDP\n   The Collecting Process MUST associate a lifetime with each Common\n\
    \   Property received via UDP.  Common Properties not refreshed by the\n   Exporting\
    \ Process within the lifetime are expired at the Collecting\n   Process.\n   If\
    \ the Common Properties are not refreshed before that lifetime has\n   expired,\
    \ the Collecting Process MUST discard the corresponding\n   definition of the\
    \ commonPropertiesID and any current and future\n   associated Data Records. \
    \ In this case, an alarm MUST be logged.\n   The Collecting Process MUST NOT decode\
    \ any further Data Records that\n   are associated with the expired Common Properties.\
    \  If a Common\n   Property is refreshed with a definition that differs from the\n\
    \   previous definition, the Collecting Process SHOULD log a warning and\n   replace\
    \ the previously received Common Property with the new one.\n   The Common Property\
    \ lifetime at the Collecting Process MUST be at\n   least 3 times higher than\
    \ the refresh timeout of the Template used to\n   export the Common Property definition,\
    \ configured on the Exporting\n   Process.\n   The Collecting Process SHOULD accept\
    \ Data Records without the\n   associated Common Properties required to decode\
    \ the Data Record.  If\n   the Common Properties have not been received at the\
    \ time Data Records\n   are received, the Collecting Process SHOULD store the\
    \ Data Records\n   for a short period of time and decode them after the Common\n\
    \   Properties definitions are received.  The short period of time MUST\n   be\
    \ lower than the lifetime of definitions associated with identifiers\n   considered\
    \ unique within the UDP session.\n"
- title: 6.2.  TCP
  contents:
  - "6.2.  TCP\n   When the TCP connection is reset, either gracefully or abnormally,\n\
    \   the Collecting Processes MUST delete all commonPropertiesID values\n   and\
    \ associated Common Properties data corresponding to that\n   connection.\n  \
    \ If a Collection Process receives a Common Properties Withdrawal\n   message,\
    \ the Collection Process MUST expire the related Common\n   Properties data.\n"
- title: 7.  Advanced Techniques
  contents:
  - '7.  Advanced Techniques

    '
- title: 7.1.  Multiple Data Reduction
  contents:
  - "7.1.  Multiple Data Reduction\n   A Flow Record can refer to one or more Common\
    \ Properties sets; the\n   use of multiple Common Properties can lead to more\
    \ efficient exports.\n   When sets of Common Properties are identified in the\
    \ data, it may be\n   found that there is more than one set of non-overlapping\
    \ properties.\n   Note that in the case of multiple Common Properties in one Data\n\
    \   Record, the different sets of Common Properties MUST be disjoint\n   (i.e.,\
    \ MUST NOT have Information Elements in common) to avoid\n   potential collisions.\n\
    \   Consider a set of properties \"A\", e.g., common sourceAddressA and\n   sourcePortA,\
    \ and another set of properties \"B\", e.g.,\n   destinationAddressB and destinationPortB.\
    \  Figure 5 shows how this\n   information is repeated with classical IPFIX export\
    \ in several Flow\n   Records.\n   +--------+--------+---------+---------+---------------------+\n\
    \   |srcAddrA|srcPortA|destAddrB|destPortB| <Flow1 information> |\n   +--------+--------+---------+---------+---------------------+\n\
    \   |srcAddrA|srcPortA|destAddrC|destPortC| <Flow2 information> |\n   +--------+--------+---------+---------+---------------------+\n\
    \   |srcAddrD|srcPortD|destAddrB|destPortB| <Flow3 information> |\n   +--------+--------+---------+---------+---------------------+\n\
    \   |srcAddrD|srcPortD|destAddrC|destPortC| <Flow4 information> |\n   +--------+--------+---------+---------+---------------------+\n\
    \   |   ...  |   ...  |   ...   |   ...   |        ...          |\n   +--------+--------+---------+---------+---------------------+\n\
    \        Figure 5: Common and Specific Properties Exported Together\n   Besides\
    \ A and B, other sets of Properties might be repeated as well\n   (e.g., Properties\
    \ C and D in the figure above).\n   We can separate the Common Properties into\
    \ properties A composed of\n   sourceAddressA and sourcePortA, properties D composed\
    \ of\n   sourceAddressD and sourcePortD, properties B composed of\n   destinationAddressB\
    \ and destinationPortB, and properties C composed\n   of destinationAddressC and\
    \ destinationPortC.  These four records can\n   be expanded to four combinations\
    \ of Data Records to reduce redundancy\n   without the need to define four complete\
    \ sets of Common Properties\n   (see the figure below).  The more Common Properties\
    \ sets that are\n   defined, the more combinations that are available.\n   +-------------------+-----------------+-------------+\n\
    \   | index for prop. A | sourceAddressA  | sourcePortA |\n   +-------------------+-----------------+-------------+\n\
    \   | index for prop. D | sourceAddressD  | sourcePortD |\n   +-------------------+-----------------+-------------+\n\
    \   +-------------------+---------------------+------------------+\n   | index\
    \ for prop. B | destinationAddressB | destinationPortB |\n   +-------------------+---------------------+------------------+\n\
    \   | index for prop. C | destinationAddressC | destinationPortC |\n   +-------------------+---------------------+------------------+\n\
    \   +------------------+------------------+-----------------------+\n   |index\
    \ for prop. A |index for prop. B |  <Flow1 information>  |\n   +------------------+------------------+-----------------------+\n\
    \   |index for prop. A |index for prop. C |  <Flow2 information>  |\n   +------------------+------------------+-----------------------+\n\
    \   |index for prop. D |index for prop. B |  <Flow3 information>  |\n   +------------------+------------------+-----------------------+\n\
    \   |index for prop. D |index for prop. C |  <Flow4 information>  |\n   +------------------+------------------+-----------------------+\n\
    \     Figure 6: Multiple Common (above) and Specific Properties (below)\n    \
    \                        Exported Separately\n   The advantage of the multiple\
    \ Common Properties is that the objective\n   of reducing the bandwidth is met\
    \ while the number of indices is kept\n   to a minimum.  Defining an extra index\
    \ for all records would not save\n   bandwidth in the case of Figure 5 and is\
    \ generally a less efficient\n   solution.\n   If a set of Flow Records share\
    \ multiple sets of Common Properties,\n   multiple commonPropertiesID instances\
    \ MAY be used to increase export\n   efficiency even further, as displayed in\
    \ Figure 7.\n   +--------------------------- +     +---------------------+\n \
    \  | Common Properties          |     | Specific Properties | Template\n   | Options\
    \ Template Record    |     | Template Record     | Definition\n   |          \
    \                  |     |                     |\n   | Scope: commonPropertiesID1\
    \ |     | commonPropertiesID1 |\n   | Scope: commonPropertiesID2 |     | commonPropertiesID2\
    \ |\n   | Common Properties          |     | Specific Properties |\n   +------------+---------------+\
    \     +---------+-----------+\n   .............|...............................|.......................\n\
    \                |                               |\n   +------------v-------------+\
    \      +----------v----------+\n   | Common Properties        |      | Specific\
    \ Properties |+  Exported\n   | Data Record              |------> Data Records\
    \        ||  Data\n   +------------------------- +      +---------------------+|\
    \  Records\n                                      +---------------------+\n  \
    \                   Figure 7: Multiple Data Reduction\n"
- title: 7.2.  Cascading Common Properties
  contents:
  - "7.2.  Cascading Common Properties\n   An Exporting Process MUST NOT export any\
    \ set of Common Properties\n   that contains, either directly or via other cascaded\
    \ Common\n   Properties, references to itself in its own definition (i.e., a\n\
    \   circular definition).  When the Collecting Process receives Common\n   Properties\
    \ that reference other Common Properties, it MUST resolve\n   the references to\
    \ Common Properties.  If the Common Properties aren't\n   available at the time\
    \ Data Records are received, the Collecting\n   Process SHOULD store the Data\
    \ Records for a short period of time and\n   decode them after the Common Properties\
    \ are received.\n   If the Collecting Process could not decode a cascading Common\n\
    \   Properties definition because the referenced Common Properties are\n   not\
    \ available before the short period of time, then the Collecting\n   Process SHOULD\
    \ log the error.\n   If the Collecting Process could not decode a cascading Common\n\
    \   Properties definition because it detects a circular definition, then\n   the\
    \ Collecting Process SHOULD log the error.\n   Information Element ordering MUST\
    \ be preserved when creating and\n   expanding Common Properties.\n"
- title: 8.  Export and Evaluation Considerations
  contents:
  - "8.  Export and Evaluation Considerations\n   The objective of the method specified\
    \ in this document is the\n   reduction in the amount of measurement data that\
    \ has to be\n   transferred from the Exporter to the Collector.  Note that the\n\
    \   efficiency of this method may vary, as discussed in this section.  In\n  \
    \ addition, there might be less storage capacity required at the\n   Collector\
    \ side if the Collector decides to store the Data Records as\n   they arrive,\
    \ without reconstructing the initial Flow Record.\n   On the other hand, this\
    \ method requires additional resources on both\n   the Exporter and the Collector.\
    \  The Exporter has to manage Common\n   Properties information and to assign\
    \ commonPropertiesID values.  The\n   Collector has to process records described\
    \ by two templates instead\n   of just one.  Additional effort is also required\
    \ when post processing\n   the measurement data, in order to correlate Flow Records\
    \ with Common\n   Properties information.\n"
- title: 8.1.  Transport Protocol Choice
  contents:
  - "8.1.  Transport Protocol Choice\n   The proposed method is most effective using\
    \ a reliable transport\n   protocol for the transfer of the Common Properties.\
    \  Therefore, the\n   use of PR-SCTP with full reliability or TCP is recommended\
    \ for the\n   transmission of IPFIX Messages containing Common Properties.  Note\n\
    \   that use of UDP is less efficient for the transmission of Common\n   Properties,\
    \ as they have to be resent regularly.\n"
- title: 8.2.  Reduced Size Encoding
  contents:
  - "8.2.  Reduced Size Encoding\n   The transfer of the commonPropertiesIDs originates\
    \ some overhead and\n   might even increase the amount of exported data if the\
    \ length of the\n   commonPropertiesID field is not shorter than the length of\
    \ the\n   replaced fields.\n   In cases where the range of the commonPropertiesID\
    \ can be restricted,\n   it is RECOMMENDED to apply reduced size encoding to the\n\
    \   commonPropertiesID to achieve a further gain in bandwidth efficiency.\n"
- title: 8.3.  Efficiency Gain
  contents:
  - "8.3.  Efficiency Gain\n   While the goal of this specification is to reduce the\
    \ bandwidth, the\n   efficiency might be limited.  Indeed, the efficiency gain\
    \ is based on\n   the abundance of redundant information in Flows and would be\
    \ directly\n   proportional to the reuse of the defined commonPropertiesID values,\n\
    \   with a theoretical limit where all the Data Records would use a\n   single\
    \ commonPropertiesID.  In other words, the more we reuse a\n   commonPropertiesID\
    \ value, the better the efficiency gain.  While the\n   Exporting Process can\
    \ evaluate the direct gain for the Flow Records\n   to be exported, it cannot\
    \ predict whether future Flow Records would\n   contain the information specified\
    \ by active commonPropertiesID\n   values.  This implies that the efficiency factor\
    \ of this\n   specification is higher for specific applications where filtering\
    \ is\n   involved, such as one-way delay or trajectory sampling.\n   Note that\
    \ this technique might even lead to an increase in bandwidth\n   usage under certain\
    \ conditions.  Taking into account the overhead of\n   exporting the commonPropertiesID\
    \ values, if the commonPropertiesID\n   values are not used in future Data Records,\
    \ this technique would\n   actually increase the export bandwidth.  A typical\
    \ case would be the\n   assignments of Common Properties based on past observed\
    \ traffic,\n   hoping that future Flows would contain the same characteristics.\n\
    \   The efficiency gain depends also on the difference between the length\n  \
    \ of the replaced fields and the length of the commonPropertiesID.  The\n   shorter\
    \ the length of the commonPropertiesID is (with respect to the\n   total length\
    \ of the Common Properties fields), the bigger the gain\n   is.\n   The example\
    \ in Appendix A.2 below uses IPFIX to export measurement\n   data for each received\
    \ packet.  In that case, for a Flow of 1000\n   packets, the amount of data can\
    \ be decreased more than 26 percent.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The same security considerations as for the IPFIX\
    \ protocol [RFC5101]\n   apply.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors would like to thank Guido Pohl for initiating\
    \ this work\n   and for his contribution to early versions of this document. \
    \ Thanks\n   also to Andrew Johnson, Gehrard Muenz, Brian Trammell, and Paul\n\
    \   Aitken for their comments and feedback.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5101]    Claise, B., \"Specification of the IP Flow Information\n\
    \                Export (IPFIX) Protocol for the Exchange of IP Traffic\n    \
    \            Flow Information\", RFC 5101, January 2008.\n   [RFC5102]    Quittek,\
    \ J., Bryant, S., Claise, B., Aitken, P., and J.\n                Meyer, \"Information\
    \ Model for IP Flow Information\n                Export\", RFC 5102, January 2008.\n\
    \   [RFC5476]    Claise, B., Ed., \"Packet Sampling (PSAMP) Protocol\n       \
    \         Specifications\", RFC 5476, March 2009.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [PSAMP-MIB]  Dietz, T., Ed. and B. Claise,\
    \ \"Definitions of Managed\n                Objects for Packet Sampling\", Work\
    \ in Progress,\n                June 2006.\n   [RFC3550]    Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n                Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n                Applications\", STD 64, RFC 3550, July 2003.\n\
    \   [RFC3758]    Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.\n     \
    \           Conrad, \"Stream Control Transmission Protocol (SCTP)\n          \
    \      Partial Reliability Extension\", RFC 3758, May 2004.\n   [RFC3917]    Quittek,\
    \ J., Zseby, T., Claise, B., and S. Zander,\n                \"Requirements for\
    \ IP Flow Information Export (IPFIX)\",\n                RFC 3917, October 2004.\n\
    \   [RFC4960]    Stewart, R., \"Stream Control Transmission Protocol\",\n    \
    \            RFC 4960, September 2007.\n   [RFC5470]    Sadasivan, G., Brownlee,\
    \ N., Claise, B., and J. Quittek,\n                \"Architecture for IP Flow\
    \ Information Export\", RFC 5470,\n                March 2009.\n   [RFC5472] \
    \   Zseby, T., Boschi, E., Brownlee, N., and B. Claise, \"IP\n               \
    \ Flow Information Export (IPFIX) Applicability\",\n                RFC 5472,\
    \ March 2009.\n   [RFC5474]    Duffield, N., Ed., \"A Framework for Packet Selection\
    \ and\n                Reporting\", RFC 5474, March 2009.\n   [RFC5475]    Zseby,\
    \ T., Molina, M., Duffield, N., Niccolini, S., and\n                F. Raspall,\
    \ \"Sampling and Filtering Techniques for IP\n                Packet Selection\"\
    , RFC 5475, March 2009.\n   [RFC5477]    Dietz, T., Claise, B., Aitken, P., Dressler,\
    \ F., and G.\n                Carle, \"Information Model for Packet Sampling Exports\"\
    ,\n                RFC 5477, March 2009.\n"
- title: Appendix A.  Examples
  contents:
  - 'Appendix A.  Examples

    '
- title: A.1.  Per-Flow Data Reduction
  contents:
  - "A.1.  Per-Flow Data Reduction\n   In this section, we show how Flow information\
    \ can be exported\n   efficiently using the method described in this document.\
    \  Let's\n   suppose we have to periodically export data about two IPv6 Flows.\n\
    \   In this example, we report the following information:\n   Flow|        dstIPv6Address\
    \                 | dst- |nPkts|nBytes\n       |                             \
    \          | Port |     |\n   ----------------------------------------------------------------\n\
    \    A  |2001:DB8:80AD:5800:0058:0800:2023:1D71 |  80  | 30  |  6000\n       |\
    \                                       |      |     |\n    A  |2001:DB8:80AD:5800:0058:0800:2023:1D71\
    \ |  80  | 50  |  9500\n       |                                       |     \
    \ |     |\n    B  |2001:DB8:80AD:5800:0058:00AA:00B7:AF2B | 1932 | 60  |  8000\n\
    \       |                                       |      |     |\n    A  |2001:DB8:80AD:5800:0058:0800:2023:1D71\
    \ |  80  | 40  |  6500\n       |                                       |     \
    \ |     |\n    A  |2001:DB8:80AD:5800:0058:0800:2023:1D71 |  80  | 60  |  9500\n\
    \       |                                       |      |     |\n    B  |2001:DB8:80AD:5800:0058:00AA:00B7:AF2B\
    \ | 1932 | 54  |  7600\n                    Figure 8: Flow Information Example\n\
    \   The Common Properties in this case are the destination IPv6 address\n   and\
    \ the destination port.  We first define an Options Template that\n   contains\
    \ the following Information Elements:\n   o  Scope: commonPropertiesID in [RFC5102],\
    \ with a type of 137 and a\n      length of 8 octets.\n   o  The destination IPv6\
    \ address: destinationIPv6Address in [RFC5102],\n      with a type of 28 and a\
    \ length of 16 octets.\n   o  The destination port: destinationTransportPort in\
    \ [RFC5102], with\n      a type of 11, and a length of 2 octets.\n   Figure 9\
    \ shows the Options Template defining the Common Properties\n   with commonPropertiesID\
    \ as scope:\n     0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 3            |      Length = 24 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID = 257       |       Field Count = 3         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Scope Field count = 1    |0|  commonPropertiesID = 137   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Scope 1 Field Length = 8     |0|  destinationIPv6Address = 28|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 16        |0|destinationTransportPort = 11|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 2         |        (Padding)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 9: Common Properties Options Template\n   The Specific\
    \ Properties Template consists of the information not\n   contained in the Options\
    \ Templates, i.e., Flow-specific information;\n   in this case, the number of\
    \ packets and the number of bytes to be\n   reported.  Additionally, this Template\
    \ contains the\n   commonPropertiesID.  In Data Records, the value of this field\
    \ will\n   contain one of the unique indices of the Option Records exported\n\
    \   before.  It contains the following Information Elements (see also\n   Figure\
    \ 10):\n   o  commonPropertiesID with a length of 8 octets.\n   o  The number\
    \ of packets of the Flow: inPacketDeltaCount in\n      [RFC5102], with a length\
    \ of 4 octets.\n   o  The number of octets of the Flow: inOctetDeltaCount in [RFC5102],\n\
    \      with a length of 4 octets.\n     0                   1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 2            |      Length = 20 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID = 258       |       Field Count = 3         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|  commonPropertiesID = 137   |       Field Length = 8        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    inPacketDeltaCount = 2   |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    inOctetDeltaCount = 1    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 10: Specific Properties Template\n   Considering the\
    \ data shown at the beginning of this example, the\n   following two Data Records\
    \ will be exported:\n   Common-      |           dstAddress                  \
    \  | dst-\n   PropertiesID |                                         | Port\n\
    \   -------------+-----------------------------------------+-------\n       101\
    \      | 2001:DB8:80AD:5800:0058:0800:2023:1D71  |  80\n                |    \
    \                                     |\n       102      | 2001:DB8:80AD:5800:0058:00AA:00B7:AF2B\
    \  | 1932\n                                 Figure 11\n   The Data Records reporting\
    \ the Common Properties will look like:\n   0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 257          |      Length = 60 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                            101                             -+\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                                                            -+\n   |        \
    \                                                       |\n   +-           2001:DB8:80AD:5800:0058:0800:2023:1D71\
    \            -+\n   |                                                        \
    \       |\n   +-                                                             -+\n\
    \   |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            80                 |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\
    \                             -+\n   |                              102      \
    \                        |\n   +-                             -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                              -+\n   |                                      \
    \                         |\n   +-                                           \
    \                  -+\n   |            2001:DB8:80AD:5800:0058:00AA:00B7:AF2B\
    \             |\n   +-                                                       \
    \      -+\n   |                                                              \
    \ |\n   +-                             -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |          1932                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 12: Data Records reporting Common Properties\n   The Data\
    \ Records will in turn be:\n   commonPropertiesID  |  inPacketDeltaCount  | inOctetDeltaCount\n\
    \   ---------------------------------------------------------------\n        \
    \   101         |          30          |       6000\n           101         |\
    \          50          |       9500\n           102         |          60    \
    \      |       8000\n           101         |          40          |       6500\n\
    \           101         |          60          |       9500\n           102  \
    \       |          54          |       7600\n                                \
    \ Figure 13\n   Figure 14 shows the first Data Record listed in the table:\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Set ID = 258         |          Length = 16          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                            101                             -+\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               30              |             6000              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 14: Data Record reporting Common Properties\n"
- title: A.2.  Per-Packet Data Reduction
  contents:
  - "A.2.  Per-Packet Data Reduction\n   An example of the per-packet data reduction\
    \ is the measurement of\n   One-Way Delay (OWD), where the exact same specific\
    \ packet must be\n   observed at the source and destination of the path to be\
    \ measured.\n   The OWD is computed by subtracting the time of observation of\
    \ the\n   same packet at the two end-points with synchronized clocks.  As the\n\
    \   OWD is measured for a specific application on which a Service Level\n   Agreement\
    \ (SLA) is bound, this translates into the observation of\n   multiple packets\
    \ with Specific Properties.  In order to match the\n   identical packet at both\
    \ Observation Points, a series of packets with\n   a set of properties (for example,\
    \ all the packets of a specific\n   source and destination IP addresses, of a\
    \ specific Diffserv codepoint\n   (DSCP) value, and of a specific destination\
    \ transport port) must be\n   observed at both ends of the measurements.  This\
    \ implies that the\n   source and destination must export a series of Flow Records\
    \ composed\n   of two types of information: some common information for all packets,\n\
    \   and some unique information about each packet in order to generate a\n   unique\
    \ identifier for each packet passing this Observation Point (for\n   example,\
    \ a hash value on the invariant fields of the packet).  So,\n   the source and\
    \ destination composing the measurement's end-points can\n   individually and\
    \ independently apply the redundancy technique\n   described in this document\
    \ in order to save some bandwidth for their\n   respective Flow Records exports.\n\
    \   The Templates required for exporting measurement data of this kind\n   are\
    \ illustrated in the figures below.  Figure 15 shows the Options\n   Template\
    \ containing the information concerning Flows using the\n   commonPropertiesID\
    \ as scope.  In the Common Properties Template, we\n   export the following Information\
    \ Elements:\n   o  The source IPv4 Address: sourceIPv4Address in [RFC5102], with\
    \ a\n      type of 8 and a length of 4 octets.\n   o  The destination IPv4 Address:\
    \ destinationIPv4Address in [RFC5102],\n      with a type of 12 and a length of\
    \ 4 octets.\n   o  The Class of Service field: ClassOfServiceIPv4 in [RFC5102],\
    \ with\n      a type of 5 and a length of 1 octet.\n   o  The Protocol Identifier:\
    \ protocolIdentifier in [RFC5102], with a\n      type of 4 and a length of 1 octet.\n\
    \   o  The source port: sourceTransportPort in [RFC5102], with a type of\n   \
    \   7 and a length of 2 octets.\n   o  The destination port: destinationTransportPort\
    \ in [RFC5102], with\n      a type of 11 and a length of 2 octets.\n   The commonPropertiesID\
    \ Information Element is used as the Scope\n   Field.\n     0                \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 3            |      Length = 40 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID = 256       |       Field Count = 7         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Scope Field count = 1    |0|  commonPropertiesID = 137   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Scope 1 Field Length = 4     |0|    sourceIPv4Address = 8    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 4         |0| destinationIPv4Address = 12 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 4         |0|  classOfServiceIPv4 = 5     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 1         |0|  protocolIdentifier = 4     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 1         |0|  transportSourcePort = 7    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 2         |0|transportDestinationPort = 11|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Field Length = 2         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 15: Example Flow Properties Template\n   For passive OWD\
    \ measurement, the Packet Properties Template or\n   Specific Properties Template\
    \ consists of at least the timestamp and\n   packet ID.  Additionally, this template\
    \ contains a commonPropertiesID\n   field to associate the packet with a Flow.\n\
    \   Figure 16 displays the template with the packet properties.  In this\n   example,\
    \ we export the following Information Elements:\n   o  commonPropertiesID.  In\
    \ this case, reduced size encoding is used,\n      and the Information Element\
    \ is declared with a length of 4 octets\n      instead of 8.\n   o  The packet\
    \ timestamp: observationTimeMilliseconds in the PSAMP\n      information model\
    \ [RFC5477], with a type of 323 and a length of 8\n      octets.\n   o  digestHashValue\
    \ in the PSAMP information model [RFC5477], with a\n      type of 326 and a length\
    \ of 8 octets.\n   o  The packet length: ipTotalLength in the IPFIX information\
    \ model\n      [RFC5102], with a type of 224 and a length of 8 octets.\n     \
    \ 0                   1                   2                   3\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         Set ID = 2            |      Length = 36 octets       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Template ID = 257       |       Field Count = 4         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |0|  commonPropertiesID = 137   |       Field Length = 4        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |0| observationTimeMillis.= 323 |       Field Length = 8        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |0|    digestHashValue = 326    |       Field Length = 8        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |0|    ipTotalLength = 224      |       Field Length = 8        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 16: Example Packet Properties Template\n   At the collection\
    \ point, packet records from the two measurement\n   points are gathered and correlated\
    \ by means of the packet ID.  The\n   resulting delay Data Records are exported\
    \ in a similar manner as the\n   packet data.  One-Way Delay data is associated\
    \ with Flow information\n   by the commonPropertiesID field.  The OWD properties\
    \ contain the\n   Packet Pair ID (which is the packet ID of the two contributing\
    \ packet\n   records), the timestamp of the packet passing the reference monitor\n\
    \   point in order to reconstruct a time series, the calculated delay\n   value,\
    \ and the commonPropertiesID.\n   In this example, using IPFIX to export the measurement\
    \ data for each\n   received packet, 38 bytes have to be transferred (sourceAddressV4=4,\n\
    \   destinationAddressV4=4, classOfServiceV4=1, protocolIdentifier=1,\n   sourceTransportPort=2,\
    \ destinationTransportPort=2,\n   observationTimeMilliseconds=8, digestHashValue=8,\
    \ ipTotalLength=8).\n   Without considering the IPFIX protocol overhead, a Flow\
    \ of 1000\n   packets produces 38000 bytes of measurement data.  Using the proposed\n\
    \   optimization, each packet produces an export of only 28 bytes\n   (observationTimeMilliseconds=8,\
    \ digestHashValue=8, ipTotalLength=8,\n   commonPropertiesID=4).  The export of\
    \ the Flow information produces\n   18 bytes (sourceAddressV4=4, destinationAddressV4=4,\n\
    \   classOfServiceV4=1, protocolIdentifier=1, sourceTransportPort=2,\n   destinationTransportPort=2,\
    \ commonPropertiesID=4).  For a Flow of\n   1000 packets, this sums to 28018 bytes.\
    \  This is a decrease of more\n   than 26 percent.\n"
- title: A.3.  Common Properties Withdrawal Message
  contents:
  - "A.3.  Common Properties Withdrawal Message\n   This section shows an example\
    \ commonPropertiesID Withdrawal message.\n   Figure 17 depicts the Options Template\
    \ Record with the\n   commonPropertiesID as unique scope field, and no non-scope\
    \ fields.\n     0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 3            |      Length = 14 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID 259         |       Field Count = 1         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Scope Field count = 1    |0|  commonPropertiesID 137     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Scope 1 Field Length = 8     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 17: Example Common Properties Withdrawal Template\n   Figure\
    \ 18 shows the Option Data Record withdrawing commonPropertiesID\n   N:\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 259          |      Length = 12 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +- \
    \                             N                              -+\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 18: Record Withdrawing commonPropertiesID N\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Elisa Boschi\n   Hitachi Europe\n   c/o ETH Zurich\n \
    \  Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n   Phone: +41 44 6327057\n\
    \   EMail: elisa.boschi@hitachi-eu.com\n   Lutz Mark\n   Fraunhofer IFAM\n   Wiener\
    \ Str. 12\n   28359 Bremen\n   Germany\n   Phone: +49 421 2246206\n   EMail: lutz.mark@ifam.fraunhofer.de\n\
    \   Benoit Claise\n   Cisco Systems, Inc.\n   De Kleetlaan 6a b1\n   Diegem  1813\n\
    \   Belgium\n   Phone: +32 2 704 5622\n   EMail: bclaise@cisco.com\n"
