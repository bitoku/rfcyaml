- title: __initial_text__
  contents:
  - '                Sampling of the Group Membership in RTP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   In large multicast groups, the size of the group membership table\n\
    \   maintained by RTP (Real Time Transport Protocol) participants may\n   become\
    \ unwieldy, particularly for embedded devices with limited\n   memory and processing\
    \ power. This document discusses mechanisms for\n   sampling of this group membership\
    \ table in order to reduce the memory\n   requirements. Several mechanisms are\
    \ proposed, and the performance of\n   each is considered.\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   RTP, the Real Time Transport Protocol [1], mandates that RTCP\
    \ packets\n   be transmitted from each participant with a period roughly\n   proportional\
    \ to the group size. The group size is obtained by storing\n   a table, containing\
    \ an entry for each unique SSRC seen in RTP and\n   RTCP packets. As members leave\
    \ or time out, entries are deleted, and\n   as new members join, entries are added.\
    \ The table is thus highly\n   dynamic.\n   For large multicast sessions, such\
    \ as an mbone broadcast or IP-based\n   TV distribution, group sizes can be extremely\
    \ large, on the order of\n   hundreds of thousands to millions of participants.\
    \ In these\n   environments, RTCP may not always be used, and thus the group\n\
    \   membership table isn't needed. However, it is highly desirable for\n   RTP\
    \ to scale well for groups with one member to groups with one\n   million members,\
    \ without human intervention to \"turn off\" RTCP when\n   it's no longer appropriate.\
    \ This means that the same tools and\n   systems can be used for both small conferences\
    \ and TV broadcasts in a\n   smooth, scalable fashion.\n   Previous work [2] has\
    \ identified three major scalability problems\n   with RTP. These are:\n   1.\
    \ Congestion due to floods of RTCP packets in highly dynamic groups;\n   2. Large\
    \ delays between receipt of RTCP packets from a single user;\n   3. Large size\
    \ of the group membership table.\n   The reconsideration algorithm [2] helps to\
    \ alleviate the first of\n   these. This document addresses the third, that of\
    \ large group size\n   tables.\n   Storage of an SSRC table with one million members,\
    \ for example,\n   requires at least four megabytes. As a result, embedded devices\
    \ with\n   small memory capacity may have difficulty under these conditions. \
    \ To\n   solve this problem, SSRC sampling has been proposed. SSRC sampling\n\
    \   uses statistical sampling to obtain a stochastic estimate of the\n   group\
    \ membership. There are many issues that arise when this is done.\n   This document\
    \ reviews these issues and discusses the mechanisms which\n   can be applied by\
    \ implementors. In particular, it focuses on three\n   methods for adapting the\
    \ sampling probability as the group membership\n   varies. It is important to\
    \ note that the IETF has been notified of\n   intellectual property rights claimed\
    \ in regard to some or all of the\n   specification contained in this document,\
    \ and in particular to one of\n   the three mechanisms: the binning algorithm\
    \ described below. For more\n   information consult the online list of claimed\
    \ rights. The two other\n   approaches presented are inferior to the binning algorithm,\
    \ but are\n   included as they are believed to be unencumbered by IPR.\n"
- title: 2 Basic Operation
  contents:
  - "2 Basic Operation\n   The basic idea behind SSRC sampling is simple. Each participant\n\
    \   maintains a key K of 32 bits, and a mask M of 32 bits. Assume that m\n   of\
    \ the bits in the mask are 1, and the remainder are zero. When an\n   RTCP packet\
    \ arrives with some SSRC S, rather than placing it in the\n   table, it is first\
    \ sampled. The sampling is performed by ANDing the\n   key and the mask, and also\
    \ ANDing the SSRC and the mask. The\n   resulting values are compared. If equal,\
    \ the SSRC is stored in the\n   table. If not equal, the SSRC is rejected, and\
    \ the packet is treated\n   as if it has never been received.\n   The key can\
    \ be anything, but is usually derived from the SSRC of the\n   user who is performing\
    \ the sampling.\n   This sampling process can be described mathematically as:\n\
    \   D = (K*M == S*M)\n   Where the * operator denotes AND and the == operator\
    \ denotes a test\n   for equality. D represents the sampling decision.\n   According\
    \ to the RTP specification, the SSRC's used by session\n   participants are chosen\
    \ randomly. If the distribution is also\n   uniform, it is easy to see that the\
    \ above filtering will cause 1 out\n   of 2**m SSRC's to be placed in the table,\
    \ where m is the number of\n   bits in the mask, M, which are one. Thus, the sampling\
    \ probability p\n   is 2**-m.\n   Then, to obtain an actual group size estimate,\
    \ L, the number of\n   entries in the table N is multiplied by 2**m:\n   L = N\
    \ * 2**m\n   Care must be taken when choosing which bits to set to 1 in the mask.\n\
    \   Although the RTP specification mandates randomly chosen SSRC, there\n   are\
    \ many known implementations which do not conform to this. In\n   particular,\
    \ the ITU H.323 [3] series of recommendations allows the\n   central control element,\
    \ the gatekeeper, to assign the least\n   significant 8 bits of the SSRC, while\
    \ the most significant are\n   randomly chosen by RTP participants.\n   The safest\
    \ way to handle this problem is to first hash the SSRC using\n   a cryptographically\
    \ secure hash, such as MD5 [4], and then choose 32\n   of the bits in the result\
    \ as the SSRC used in the above computation.\n   This provides much better randomness,\
    \ and doesn't require detailed\n   knowledge about how various implementations\
    \ actually set the SSRC.\n"
- title: 2.1 Performance
  contents:
  - "2.1 Performance\n   The estimate is more accurate as the value of m decreases,\
    \ less\n   accurate as it increases. This can be demonstrated analytically. If\n\
    \   the actual group size is G, the ratio of the standard deviation to\n   mean\
    \ of the estimate L (coefficient of variation) is:\n   sqrt((2**m - 1)/G)\n  \
    \ This equation can be used as a guide for selecting the thresholds for\n   when\
    \ to change the sampling factor, as discussed below. For example,\n   if the target\
    \ is a 1% standard deviation to mean, the sampling\n   probability p=2**-m should\
    \ be no smaller than .5 when there are ten\n   thousand group members. More generally,\
    \ to achieve a desired standard\n   deviation to mean ratio of T, the sampling\
    \ probability should be no\n   less than:\n   p > 1 / (1 + G*(T**2))\n"
- title: 3 Increasing the Sampling Probability
  contents:
  - "3 Increasing the Sampling Probability\n   The above simple sampling procedure\
    \ would work fine if the group size\n   was static. However, it is not. A participant\
    \ joining an RTP session\n   will initially see just one participant (themselves).\
    \ As packets are\n   received, the group size as seen by that participant will\
    \ increase.\n   To handle this, the sampling probability must be made dynamic,\
    \ and\n   will need to increase and decrease as group sizes vary.\n   The procedure\
    \ for increasing the sampling probability is easy. A\n   participant starts with\
    \ a mask with m=0. Under these conditions,\n   every received SSRC will be stored\
    \ in the table, so there is\n   effectively no sampling. At some point, the value\
    \ of m is increased\n   by one. This implies that approximately half of the SSRC\
    \ already in\n   the table will no longer match the key under the masking operation.\n\
    \   In order to maintain a correct estimate, these SSRC must be discarded\n  \
    \ from the table. New SSRC are only added if they match the key under\n   the\
    \ new mask.\n   The decision about when to increase the number of bits in the\
    \ mask is\n   also simple. Let's say an RTP participant has a memory with enough\n\
    \   capacity to store C entries in the table. The best estimate of the\n   group\
    \ is obtained by the largest sampling probability. This also\n   means that the\
    \ best estimate is obtained the fuller the table is. A\n   reasonable approach\
    \ is therefore to increase the number of bits in\n   the mask just as the table\
    \ fills to C. This will generally cause its\n   contents to be reduced by half\
    \ on average. Once the table fills\n   again, the number of bits in the mask is\
    \ further increased.\n"
- title: 4 Reducing the Sampling Probability
  contents:
  - "4 Reducing the Sampling Probability\n   If the group size begins to decrease,\
    \ it may be necessary to reduce\n   the number of one bits in the mask. Not doing\
    \ so will result in\n   extremely poor estimates of the group size. Unfortunately,\
    \ reducing\n   the number of bits in the mask is more difficult than increasing\n\
    \   them.\n   When the number of bits in the mask increases, the user compensates\n\
    \   by removing those SSRC which no longer match. When the number of bits\n  \
    \ decreases, the user should theoretically add back those users whose\n   SSRC\
    \ now match. However, these SSRC are not known, since the whole\n   point of sampling\
    \ was to not have to remember them. Therefore, if the\n   number of bits in the\
    \ mask is just reduced without any changes in the\n   membership table, the group\
    \ estimate will instantly drop by exactly\n   half.\n   To compensate for this,\
    \ some kind of algorithm is needed. Two\n   approaches are presented here: a corrective-factor\
    \ solution, and a\n   binning solution. The binning solution is simpler to understand\
    \ and\n   performs better. However, we include a discussion of the corrective-\n\
    \   factor solution for completeness and comparison, and also because it\n   is\
    \ believed to be unencumbered by IPR.\n"
- title: 4.1 Corrective Factors
  contents:
  - "4.1 Corrective Factors\n   The idea with the corrective factors is to take one\
    \ of two\n   approaches. In the first, a corrective factor is added to the group\n\
    \   size estimate, and in the second, the group size estimate is\n   multiplied\
    \ by a corrective factor. In both cases, the purpose is to\n   compensate for\
    \ the change in sample mask. The corrective factors\n   should decay as the \"\
    fudged\" members are eventually learned about and\n   actually placed in the membership\
    \ list.\n   The additive factor starts at the difference between the group size\n\
    \   estimate before and after the number of bits in the mask is reduced,\n   and\
    \ decays to 0 (this is not always half the group size estimate, as\n   the corrective\
    \ factors can be compounded, see below). The\n   multiplicative corrective factor\
    \ starts at 2, and gradually decays to\n   one. Both factors decay over a time\
    \ of cL(ts-), where c is the\n   average RTCP packet size divided by the RTCP\
    \ bandwidth for receivers,\n   and L(ts-) is the group size estimate just before\
    \ the change in the\n   number of bits in the mask at time ts. The reason for\
    \ this constant\n   is as follows. In the case where the actual group membership\
    \ has not\n   changed, those members which were forgotten will still be sending\n\
    \   RTCP packets. The amount of time it will take to hear an RTCP packet\n   from\
    \ each of them is the average RTCP interval, which is cL(ts-).\n   Therefore,\
    \ by cL(ts-) seconds after the change in the mask, those\n   users who were fudged\
    \ by the corrective factor should have sent a\n   packet and thus appear in the\
    \ table. We chose to decay both functions\n   linearly. This is because the rate\
    \ of arrival of RTCP packets is\n   linear.\n   What happens if the number of\
    \ bits in the mask is reduced once again\n   before the previous corrective factor\
    \ has expired? In that case, we\n   compound the factors by using yet another\
    \ one. Let fi() represent the\n   ith additive correction function, and gi() the\
    \ ith multiplicative\n   correction function. If ts is the time when the number\
    \ of bits in the\n   mask is reduced, we can describe the additive correction\
    \ factor as:\n            / 0                                  ,   t < ts\n  \
    \          |                   ts + cL(ts-) - t\n  fi(t)  =  |( L(ts-) - L(ts+))\
    \ ---------------- ,   ts < t < ts+cL(ts-)\n            |                    \
    \    cL(ts-)\n            | 0                                  ,   t > ts + cL(ts-)\n\
    \            \\\n  and the multiplicative factor as:\n            /  1       \
    \               , t < ts\n            |\n            |  ts + 2cL(ts-) - t\n  gi(t)\
    \     |  -----------------      , ts < t < ts + cL(ts-)\n            |       cL(ts-)\n\
    \            |\n            \\  1                      , t > ts + cL(ts-)\n  \
    \ Note that in these equations, L(t) denotes the group size estimate\n   obtained\
    \ including the corrective factors except for the new factor.\n   ts- is the time\
    \ right before the reduction in the number of bits, and\n   ts+ the time after.\
    \ As a result, L(ts-) represents the group size\n   estimate before the reduction,\
    \ and L(ts+) the estimate right after,\n   but not including the new factor.\n\
    \   Finally, the actual group size estimate L(t) is given by:\n          -----\n\
    \          \\\n   L(t) = /      fi(t) + N*(2**m)\n          -----\n          \
    \  i\n   for the additive factor, and:\n          ------\n           |  |\n  \
    \         |  |\n   L(t)=   |  |  N*(2**m)*gi(t)\n   for the multiplicative factor.\n\
    \   Simulations showed that both algorithms performed equally well, but\n   both\
    \ tended to seriously underestimate the group size when the group\n   membership\
    \ was rapidly declining [5]. This is demonstrated in the\n   performance data\
    \ below.\n   As an example, consider computation of the additive factor. The group\n\
    \   size is 1000, c is 1 second, and m is two. With a mask of this size,\n   a\
    \ participant will, on average, observe 250 (N = 250) users. At t=0,\n   the user\
    \ decides to reduce the number of bits in the mask to 1. As a\n   result, L(0-)\
    \ is 1000, and L(0+) is 500. The additive factor\n   therefore starts at 500,\
    \ and decays to zero at time ts + cL(ts-) =\n   1000. At time 500, lets assume\
    \ N has increased to 375 (this will, on\n   average, be the case if the actual\
    \ group size has not changed). At\n   time 500, the additive factor is 250. This\
    \ is added to 2**m times N,\n   which is 750, resulting in a group size estimate\
    \ of 1000. Now, the\n   user decides to reduce the number of bits in the mask\
    \ again, so that\n   m=0. Another additive factor is computed. This factor starts\
    \ at\n   L(ts-) (which is 1000), minus L(ts+). L(ts+) is computed without the\n\
    \   new factor; it is the first additive factor at this time (250) plus\n   2**m\
    \ (1) times N (375). This is 625. As a result, the new additive\n   factor starts\
    \ at 1000 - 625 (375), and decays to 0 in 1000 seconds.\n"
- title: 4.2 Binning Algorithm
  contents:
  - "4.2 Binning Algorithm\n   In order to more correctly estimate the group size\
    \ even when it is\n   rapidly decreasing, a binning algorithm can be used. The\
    \ algorithm\n   works as follows. There are 32 bins, same as the number of bits\
    \ in\n   the sample mask. When an RTCP packet from a new user arrives whose\n\
    \   SSRC matches the key under the masking operation, it is placed in the\n  \
    \ mth bin (where m is the number of ones in the mask) otherwise it is\n   discarded.\n\
    \   When the number of bits in the mask is to be increased, those members\n  \
    \ in the bin who still match after the new mask are moved into the next\n   higher\
    \ bin. Those who don't match are discarded. When the number of\n   bits in the\
    \ mask is to be decreased, nothing is done. Users in the\n   various bins stay\
    \ where they are. However, when an RTCP packet for a\n   user shows up, and the\
    \ user is in a bin with a higher value than the\n   current number of bits in\
    \ the mask, it is moved into the bin\n   corresponding to the current number of\
    \ bits in the mask. Finally, the\n   group size estimate L(t) is obtained by:\n\
    \           31\n          ----\n          \\\n   L(t) = /    B(i) * 2**i\n   \
    \       ----\n           i=0\n   Where B(i) are the number of users in the ith\
    \ bin.\n   The algorithm works by basically keeping the old estimate when the\n\
    \   number of bits in the mask drops. As users arrive, they are gradually\n  \
    \ moved into the lower bin, reducing the amount that the higher bin\n   contributes\
    \ to the total estimate. However, the old estimate is still\n   updated in the\
    \ sense that users which timeout are removed from the\n   higher bin, and users\
    \ who send BYE packets are also removed from the\n   higher bin. This allows the\
    \ older estimate to still adapt, while\n   gradually phasing it out. It is this\
    \ adaptation which makes it\n   perform much better than the corrective algorithms.\
    \ The algorithm is\n   also extremely simple.\n"
- title: 4.3 Comparison
  contents:
  - "4.3 Comparison\n   The algorithms are all compared via simulation in Table 1.\
    \ In the\n   simulation, 10,001 users join a group at t=0. At t=10,000, 5000 of\n\
    \   them leave. At t=20,000, another 5000 leave. All implement an SSRC\n   sampling\
    \ algorithm, unconditional forward reconsideration and BYE\n   reconsideration.\
    \ The table depicts the group size estimate from time\n   20,000 to time 25,000\
    \ as seen by the single user present throughout\n   the entire session. In the\
    \ simulation, a memory size of 1000 SSRC was\n   assumed. The performance without\
    \ sampling, and with sampling with the\n   additive, multiplicative, and bin-based\
    \ correction are depicted.\n   As the table shows, the bin based algorithm performs\
    \ particularly\n   well at capturing the group size estimate towards the tail\
    \ end of the\n   simulation.\n   Time    No Sampling     Binned  Additive  Multiplicative\n\
    \   ----    -----------     ------  --------  --------------\n   20000   5001\
    \            5024    5024      5024\n   20250   4379            4352    4352 \
    \     4352\n   20500   3881            3888    3900      3853\n   20750   3420\
    \            3456    3508      3272\n   21000   3018            2992    3100 \
    \     2701\n   21250   2677            2592    2724      2225\n   21500   2322\
    \            2272    2389      1783\n   21750   2034            2096    2125 \
    \     1414\n   22000   1756            1760    1795      1007\n   22250   1476\
    \            1472    1459      582\n   22500   1243            1232    1135  \
    \    230\n   22750   1047            1040    807       80\n   23000   856    \
    \         864     468       59\n   23250   683             704     106       44\n\
    \   23500   535             512     32        32\n   23750   401             369\
    \     24        24\n   24000   290             257     17        17\n   24250\
    \   198             177     13        13\n   24500   119             129     11\
    \        11\n   24750   59              65      8         8\n   25000   18   \
    \           1       2         2\n"
- title: 4.4 Sender Sampling
  contents:
  - "4.4 Sender Sampling\n   Care must be taken in handling senders when using SSRC\
    \ sampling.\n   Since the number of senders is generally small, and they contribute\n\
    \   significantly to the computation of the RTCP interval, sampling\n   should\
    \ not be applied to them. However, they must be kept in a\n   separate table,\
    \ and not be \"counted\" as part of the general group\n   membership. If they\
    \ are counted as part of the general group\n   membership, and are not sampled,\
    \ the group size estimate will be\n   inflated to overemphasize the senders.\n\
    \   This is easily demonstrated analytically. Let Ns be the number of\n   senders,\
    \ and Nr be the number of receivers. The membership table will\n   contain all\
    \ Ns senders and (1/2)**m of the receivers. The total group\n   size estimate\
    \ in the current memo is obtained by 2**m times the\n   number of entries in the\
    \ table. Therefore, the group size estimate\n   becomes:\n   L(t) = (2**m) Ns\
    \ + Nr\n   which exponentially weights the senders.\n   This is easily compensated\
    \ for in the binning algorithm. A sender is\n   always placed in the 0th bin.\
    \ When a sender becomes a receiver, it is\n   moved into the bin corresponding\
    \ to the current value of m, if its\n   SSRC matches the key under the masked\
    \ comparison operation.\n"
- title: 5 Security Considerations
  contents:
  - "5 Security Considerations\n   The use of SSRC sampling does not appear to introduce\
    \ any additional\n   security considerations beyond those described in [1]. In\
    \ fact, SSRC\n   sampling, as described above, can help somewhat in reducing the\n\
    \   effect of certain attacks.\n   RTP, when used without authentication of RTCP\
    \ packets, is susceptible\n   to a spoofing attack. Attackers can inject many\
    \ RTCP packets into the\n   group, each with a different SSRC. This will cause\
    \ RTP participants\n   to believe the group membership is much higher than it\
    \ actually is.\n   The result is that each participant will end up transmitting\
    \ RTCP\n   packets very infrequently, if ever. When SSRC sampling is used, the\n\
    \   problem can be amplified if a participant is not applying a hash to\n   the\
    \ SSRC before matching them against their key. This is because an\n   attacker\
    \ can send many packets, each with different SSRC, that match\n   the key. This\
    \ would cause the group size to inflate exponentially.\n   However, with a random\
    \ hash applied, an attacker cannot guess those\n   SSRC which will match against\
    \ the key. In fact, an attacker will have\n   to send 2**m different SSRC before\
    \ finding one that matches, on\n   average. Of course, the effect of a match causes\
    \ an increase of group\n   membership by 2**m. But, the use of sampling means\
    \ that an attacker\n   will have to send many packets before an effect can be\
    \ observed.\n"
- title: 6 Acknowledgements
  contents:
  - "6 Acknowledgements\n   The authors wish to thank Bill Fenner and Vern Paxson\
    \ for their\n   comments.\n"
- title: 7 Bibliography
  contents:
  - "7 Bibliography\n   [1] Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\
    \ \"RTP:\n       a transport protocol for real-time applications\", RFC 1889,\n\
    \       January 1996.\n   [2] J. Rosenberg and H. Schulzrinne, \"Timer reconsideration\
    \ for\n       enhanced RTP scalability\", IEEE Infocom, (San Francisco,\n    \
    \   California), March/April 1998.\n   [3] International Telecommunication Union,\
    \ \"Visual telephone systems\n       and equipment for local area networks which\
    \ provide a non-\n       guaranteed quality of service,\" Recommendation H.323,\n\
    \       Telecommunication Standardization Sector of ITU, Geneva,\n       Switzerland,\
    \ May 1996.\n   [4] Rivest, R., \"The MD5 message-digest algorithm\", RFC 1321,\
    \ April\n       1992.\n   [5] Rosenberg, J., \"Protocols and Algorithms for Supporting\n\
    \       Distributed Internet Telephony,\" PhD Thesis, Columbia University,\n \
    \      Dec. 1999.  Work in Progress.\n"
- title: 8 Authors' Addresses
  contents:
  - "8 Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   200 Executive\
    \ Drive\n   West Orange, NJ 07052\n   USA\n   EMail: jdrosen@dynamicsoft.com\n\
    \   Henning Schulzrinne\n   Columbia University\n   M/S 0401\n   1214 Amsterdam\
    \ Ave.\n   New York, NY 10027-7003\n   USA\n   EMail: schulzrinne@cs.columbia.edu\n"
- title: 9 Full Copyright Statement
  contents:
  - "9 Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
