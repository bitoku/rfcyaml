- contents:
  - '           JSON Web Signature (JWS) Unencoded Payload Option

    '
  title: __initial_text__
- contents:
  - "Abstract\n   JSON Web Signature (JWS) represents the payload of a JWS as a\n
    \  base64url-encoded value and uses this value in the JWS Signature\n   computation.
    \ While this enables arbitrary payloads to be integrity\n   protected, some have
    described use cases in which the base64url\n   encoding is unnecessary and/or
    an impediment to adoption, especially\n   when the payload is large and/or detached.
    \ This specification\n   defines a means of accommodating these use cases by defining
    an\n   option to change the JWS Signing Input computation to not base64url-\n
    \  encode the payload.  This option is intended to broaden the set of\n   use
    cases for which the use of JWS is a good fit.\n   This specification updates RFC
    7519 by stating that JSON Web Tokens\n   (JWTs) MUST NOT use the unencoded payload
    option defined by this\n   specification.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7797.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   4\n   3.  The \"b64\" Header Parameter  . . . . . . . . . . . . . . . . .
    \  4\n   4.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n
    \    4.1.  Example with Header Parameters {\"alg\":\"HS256\"}  . . . . .   6\n
    \    4.2.  Example with Header Parameters\n           {\"alg\":\"HS256\",\"b64\":false,\"crit\":[\"b64\"]}
    \ . . . . . . .   7\n   5.  Unencoded Payload Content Restrictions  . . . . .
    . . . . . .   7\n     5.1.  Unencoded Detached Payload  . . . . . . . . . . .
    . . . .   8\n     5.2.  Unencoded JWS Compact Serialization Payload . . . . .
    . .   8\n     5.3.  Unencoded JWS JSON Serialization Payload  . . . . . . . .
    \  8\n   6.  Using \"crit\" with \"b64\" . . . . . . . . . . . . . . . . . . .
    \  9\n   7.  Intended Use by Applications  . . . . . . . . . . . . . . . .   9\n
    \  8.  Security Considerations . . . . . . . . . . . . . . . . . . .   9\n   9.
    \ IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10\n     9.1.
    \ JSON Web Signature and Encryption Header Parameter\n           Registration
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n       9.1.1.  Registry Contents
    . . . . . . . . . . . . . . . . . .  10\n   10. References  . . . . . . . . .
    . . . . . . . . . . . . . . . .  10\n     10.1.  Normative References . . . .
    . . . . . . . . . . . . . .  10\n     10.2.  Informative References . . . . .
    . . . . . . . . . . . .  11\n   Acknowledgements  . . . . . . . . . . . . . .
    . . . . . . . . . .  11\n   Author's Address  . . . . . . . . . . . . . . . .
    . . . . . . . .  11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The \"JSON Web Signature (JWS)\" [JWS] specification defines
    the JWS\n   Signing Input as the input to the digital signature or Message\n   Authentication
    Code (MAC) computation, with the value\n   ASCII(BASE64URL(UTF8(JWS Protected
    Header)) || '.' || BASE64URL(JWS\n   Payload)).  While this works well in practice
    for many use cases,\n   including those accommodating arbitrary payload values,
    other use\n   cases have been described in which base64url-encoding the payload
    is\n   unnecessary and/or an impediment to adoption, particularly when the\n   payload
    is large and/or detached.\n   This specification introduces a new JWS Header Parameter
    value that\n   generalizes the JWS Signing Input computation in a manner that
    makes\n   base64url-encoding the payload selectable and optional.  The primary\n
    \  set of use cases where this enhancement may be helpful are those in\n   which
    the payload may be very large and where means are already in\n   place to enable
    the payload to be communicated between the parties\n   without modifications.
    \ Appendix F of [JWS] describes how to\n   represent JWSs with detached content,
    which would typically be used\n   for these use cases.\n   The advantages of not
    having to base64url-encode a large payload are\n   that allocation of the additional
    storage to hold the base64url-\n   encoded form is avoided and the base64url-encoding
    computation never\n   has to be performed.  In summary, this option can help avoid\n
    \  unnecessary copying and transformations of the potentially large\n   payload,
    resulting in sometimes significant space and time\n   improvements for deployments.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   \"Key words for use in RFCs to Indicate Requirement Levels\"
      [RFC2119].\n   The interpretation should only be applied when the terms appear
      in\n   all capital letters.\n   BASE64URL(OCTETS) denotes the base64url encoding
      of OCTETS, per\n   Section 2 of [JWS].\n   UTF8(STRING) denotes the octets of
      the UTF-8 [RFC3629] representation\n   of STRING, where STRING is a sequence
      of zero or more Unicode\n   [UNICODE] characters.\n   ASCII(STRING) denotes
      the octets of the ASCII [RFC20] representation\n   of STRING, where STRING is
      a sequence of zero or more ASCII\n   characters.\n   The concatenation of two
      values A and B is denoted as A || B.\n"
    title: 1.1.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This specification uses the same terminology as the \"JSON
    Web\n   Signature\" [JWS] and \"JSON Web Algorithms\" [JWA] specifications.\n"
  title: 2.  Terminology
- contents:
  - "3.  The \"b64\" Header Parameter\n   This Header Parameter modifies the JWS Payload
    representation and the\n   JWS Signing Input computation in the following way:\n
    \  b64\n      The \"b64\" (base64url-encode payload) Header Parameter determines\n
    \     whether the payload is represented in the JWS and the JWS Signing\n      Input
    as ASCII(BASE64URL(JWS Payload)) or as the JWS Payload value\n      itself with
    no encoding performed.  When the \"b64\" value is\n      \"false\", the payload
    is represented simply as the JWS Payload\n      value; otherwise, it is represented
    as ASCII(BASE64URL(JWS\n      Payload)).  The \"b64\" value is a JSON boolean,
    with a default\n      value of \"true\".  When used, this Header Parameter MUST
    be\n      integrity protected; therefore, it MUST occur only within the JWS\n
    \     Protected Header.  Use of this Header Parameter is OPTIONAL.  If\n      the
    JWS has multiple signatures and/or MACs, the \"b64\" Header\n      Parameter value
    MUST be the same for all of them.  Note that\n      unless the payload is detached,
    many payload values would cause\n      errors parsing the resulting JWSs, as described
    in Section 5.\n   The following table shows the JWS Signing Input computation,\n
    \  depending upon the value of this parameter:\n   +-------+-----------------------------------------------------------+\n
    \  | \"b64\" | JWS Signing Input Formula                                 |\n   +-------+-----------------------------------------------------------+\n
    \  | true  | ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' ||     |\n   |
    \      | BASE64URL(JWS Payload))                                   |\n   |       |
    \                                                          |\n   | false | ASCII(BASE64URL(UTF8(JWS
    Protected Header)) || '.') ||    |\n   |       | JWS Payload                                               |\n
    \  +-------+-----------------------------------------------------------+\n"
  title: 3.  The "b64" Header Parameter
- contents:
  - "4.  Examples\n   This section gives examples of JWSs showing the difference that
    using\n   the \"b64\" Header Parameter makes.  The examples all use the JWS\n
    \  Payload value [36, 46, 48, 50].  This octet sequence represents the\n   ASCII
    characters \"$.02\"; its base64url-encoded representation is\n   \"JC4wMg\".\n
    \  The following table shows a set of Header Parameter values without\n   using
    a false \"b64\" Header Parameter value and a set using it, with\n   the resulting
    JWS Signing Input values represented as ASCII\n   characters:\n   +-----------------------------+-------------------------------------+\n
    \  | JWS Protected Header        | JWS Signing Input Value             |\n   +-----------------------------+-------------------------------------+\n
    \  | {\"alg\":\"HS256\"}             | eyJhbGciOiJIUzI1NiJ9.JC4wMg         |\n
    \  |                             |                                     |\n   |
    {\"alg\":\"HS256\",\"b64\":false, | eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2U |\n   |
    \"crit\":[\"b64\"]}             | sImNyaXQiOlsiYjY0Il19.$.02          |\n   +-----------------------------+-------------------------------------+\n
    \  These examples use the Hash-based Message Authentication Code (HMAC)\n   key
    from Appendix A.1 of [JWS], which is represented below as a JSON\n   Web Key [JWK]
    (with line breaks within values for display purposes\n   only):\n     {\n      \"kty\":\"oct\",\n
    \     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75\n           aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n
    \    }\n   The rest of this section shows complete representations for the two\n
    \  JWSs above.\n"
  - contents:
    - "4.1.  Example with Header Parameters {\"alg\":\"HS256\"}\n   The complete JWS
      representation for this example using the JWS\n   Compact Serialization and
      a non-detached payload (with line breaks\n   for display purposes only) is:\n
      \    eyJhbGciOiJIUzI1NiJ9\n     .\n     JC4wMg\n     .\n     5mvfOroL-g7HyqJoozehmsaqmvTYGEq5jTI1gVvoEoQ\n
      \  Note that this JWS uses only features defined by [JWS] and does not\n   use
      the new \"b64\" Header Parameter.  It is the \"control\" so that\n   differences
      when it is used can be easily seen.\n   The equivalent representation for this
      example using the flattened\n   JWS JSON Serialization is:\n     {\n      \"protected\":\n
      \      \"eyJhbGciOiJIUzI1NiJ9\",\n      \"payload\":\n       \"JC4wMg\",\n      \"signature\":\n
      \      \"5mvfOroL-g7HyqJoozehmsaqmvTYGEq5jTI1gVvoEoQ\"\n     }\n"
    title: 4.1.  Example with Header Parameters {"alg":"HS256"}
  - contents:
    - "4.2.  Example with Header Parameters\n      {\"alg\":\"HS256\",\"b64\":false,\"crit\":[\"b64\"]}\n
      \  The complete JWS representation for this example using the JWS\n   Compact
      Serialization and a detached payload (with line breaks for\n   display purposes
      only) is:\n     eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19\n     .\n
      \    .\n     A5dxf2s96_n5FLueVuW1Z_vh161FwXZC4YLPff6dmDY\n   Note that the payload
      \"$.02\" cannot be represented in this JWS in its\n   unencoded form because
      it contains a period ('.') character, which\n   would cause parsing problems.
      \ This JWS is therefore shown with a\n   detached payload.\n   The complete
      JWS representation for this example using the flattened\n   JWS JSON Serialization
      and a non-detached payload is:\n     {\n      \"protected\":\n       \"eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19\",\n
      \     \"payload\":\n       \"$.02\",\n      \"signature\":\n       \"A5dxf2s96_n5FLueVuW1Z_vh161FwXZC4YLPff6dmDY\"\n
      \    }\n   If using a detached payload with the JWS JSON Serialization, the\n
      \  \"payload\" element would be omitted.\n"
    title: 4.2.  Example with Header Parameters
  title: 4.  Examples
- contents:
  - "5.  Unencoded Payload Content Restrictions\n   When the \"b64\" value is \"false\",
    different restrictions on the\n   payload contents apply, depending upon the circumstances,
    as\n   described in this section.  The restrictions prevent the use of\n   payload
    values that would cause errors parsing the resulting JWSs.\n   Note that because
    the character sets that can be used for unencoded\n   non-detached payloads differ
    between the two serializations, some\n   JWSs using a \"b64\" value of \"false\"
    cannot be syntactically converted\n   between the JWS JSON Serialization and the
    JWS Compact Serialization.\n   See Section 8 for security considerations on using
    unencoded\n   payloads.\n"
  - contents:
    - "5.1.  Unencoded Detached Payload\n   Appendix F of [JWS] describes how to represent
      JWSs with detached\n   content.  A detached payload can contain any octet sequence\n
      \  representable by the application.  The payload value will not cause\n   problems
      parsing the JWS, since it is not represented as part of the\n   JWS.  If an
      application uses a content encoding when representing the\n   payload, then
      it MUST specify whether the signature or MAC is\n   performed over the content-encoded
      representation or over the\n   unencoded content.\n"
    title: 5.1.  Unencoded Detached Payload
  - contents:
    - "5.2.  Unencoded JWS Compact Serialization Payload\n   When using the JWS Compact
      Serialization, unencoded non-detached\n   payloads using period ('.') characters
      would cause parsing errors;\n   such payloads MUST NOT be used with the JWS
      Compact Serialization.\n   Similarly, if a JWS using the JWS Compact Serialization
      and a\n   non-detached payload is to be transmitted in a context that requires\n
      \  URL-safe characters, then the application MUST ensure that the\n   payload
      contains only the URL-safe characters 'a'-'z', 'A'-'Z',\n   '0'-'9', dash ('-'),
      underscore ('_'), and tilde ('~').  The payload\n   value is the ASCII representation
      of the characters in the payload\n   string.  The ASCII space character and
      all printable ASCII characters\n   other than period ('.') (those characters
      in the ranges %x20-2D and\n   %x2F-7E) MAY be included in a non-detached payload
      using the JWS\n   Compact Serialization, provided that the application can transmit
      the\n   resulting JWS without modification.\n   No meaning or special semantics
      are attached to any characters in the\n   payload.  For instance, the percent
      ('%') character represents itself\n   and is not used by JWS objects for percent-encoding
      [RFC3986].\n   Applications, of course, are free to utilize content-encoding
      rules\n   of their choosing, provided that the encoded representations utilize\n
      \  only allowed payload characters.\n"
    title: 5.2.  Unencoded JWS Compact Serialization Payload
  - contents:
    - "5.3.  Unencoded JWS JSON Serialization Payload\n   When using the JWS JSON
      Serialization, unencoded non-detached\n   payloads must consist of the octets
      of the UTF-8 encoding of a\n   sequence of Unicode code points that are representable
      in a JSON\n   string.  The payload value is determined after performing any
      JSON\n   string escape processing, per Section 8.3 of RFC 7159 [RFC7159], and\n
      \  then UTF-8-encoding the resulting Unicode code points.  This means,\n   for
      instance, that these payloads represented as JSON strings are\n   equivalent
      (\"$.02\", \"\\u0024.02\").  Unassigned Unicode code point\n   values MUST NOT
      be used to represent the payload.\n"
    title: 5.3.  Unencoded JWS JSON Serialization Payload
  title: 5.  Unencoded Payload Content Restrictions
- contents:
  - "6.  Using \"crit\" with \"b64\"\n   The \"crit\" Header Parameter MUST be included
    with \"b64\" in its set of\n   values when using the \"b64\" Header Parameter
    to cause implementations\n   not implementing \"b64\" to reject the JWS (instead
    of it being\n   misinterpreted).\n"
  title: 6.  Using "crit" with "b64"
- contents:
  - "7.  Intended Use by Applications\n   Application profiles should specify whether
    \"b64\" with a \"false\"\n   value is to be used by the application in each application
    context or\n   not, with it then being consistently applied in each application\n
    \  context.  For instance, an application that uses detached payloads\n   might
    specify that \"b64\" with a \"false\" value always be used.  It is\n   NOT RECOMMENDED
    that this parameter value be dynamically varied with\n   different payloads in
    the same application context.\n   While it is legal to use \"b64\" with a \"true\"
    value, it is RECOMMENDED\n   that \"b64\" simply be omitted in this case, since
    it would be\n   selecting the behavior already specified in [JWS].\n   For interoperability
    reasons, JSON Web Tokens [JWT] MUST NOT use\n   \"b64\" with a \"false\" value.\n"
  title: 7.  Intended Use by Applications
- contents:
  - "8.  Security Considerations\n   [JWS] base64url-encodes the JWS Payload to restrict
    the set of\n   characters used to represent it so that the representation does
    not\n   contain characters used for delimiters in JWS representations.  Those\n
    \  delimiters are the period ('.') character for the JWS Compact\n   Serialization
    and the double-quote ('\"') character for the JWS JSON\n   Serialization.  When
    the \"b64\" (base64url-encode payload) value is\n   \"false\", these properties
    are lost.  It then becomes the\n   responsibility of the application to ensure
    that payloads only\n   contain characters that will not cause parsing problems
    for the\n   serialization used, as described in Section 5.  The application also\n
    \  incurs the responsibility to ensure that the payload will not be\n   modified
    during transmission.\n   Note that if a JWS were to be created with a \"b64\"
    value of \"false\"\n   without including the \"crit\" Header Parameter with \"b64\"
    in its set\n   of values and it were to be received by an implementation not\n
    \  supporting the \"b64\" Header Parameter, then the signature or MAC\n   would
    still verify but the recipient would believe that the intended\n   JWS Payload
    value is the base64url decoding of the payload value\n   received, rather than
    the payload value received itself.  For\n   example, if the payload value received
    were \"NDA1\", an implementation\n   not supporting this extension would interpret
    the intended payload as\n   being the base64url decoding of this value, which
    is \"405\".\n   Requiring the use of the \"crit\" Header Parameter with \"b64\"
    in the\n   set of values prevents this misinterpretation.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  IANA Considerations

    '
  - contents:
    - "9.1.  JSON Web Signature and Encryption Header Parameter Registration\n   This
      specification registers the \"b64\" Header Parameter defined in\n   Section
      3 in the IANA \"JSON Web Signature and Encryption Header\n   Parameters\" registry
      [IANA.JOSE] established by [JWS].\n"
    - contents:
      - "9.1.1.  Registry Contents\n   o  Header Parameter Name: \"b64\"\n   o  Header
        Parameter Description: Base64url-Encode Payload\n   o  Header Parameter Usage
        Location(s): JWS\n   o  Change Controller: IESG\n   o  Specification Document(s):
        Section 3 of RFC 7797\n"
      title: 9.1.1.  Registry Contents
    title: 9.1.  JSON Web Signature and Encryption Header Parameter Registration
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [IANA.JOSE]\n              IANA, \"JSON Object
      Signing and Encryption (JOSE)\",\n              <http://www.iana.org/assignments/jose>.\n
      \  [JWA]      Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n              DOI
      10.17487/RFC7518, May 2015,\n              <http://www.rfc-editor.org/info/rfc7518>.\n
      \  [JWS]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015, <http://www.rfc-editor.org/info/rfc7515>.\n
      \  [JWT]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <http://www.rfc-editor.org/info/rfc7519>.\n
      \  [RFC20]    Cerf, V., \"ASCII format for Network Interchange\", STD 80,\n
      \             RFC 20, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,
      RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n
      \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n
      \             2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [UNICODE]
      \ The Unicode Consortium, \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [JWK]      Jones, M., \"JSON Web Key (JWK)\",
      RFC 7517,\n              DOI 10.17487/RFC7517, May 2015,\n              <http://www.rfc-editor.org/info/rfc7517>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Acknowledgements\n   Anders Rundgren, Richard Barnes, Phillip Hallam-Baker, Jim
    Schaad,\n   Matt Miller, Martin Thomson, and others have all made the case for\n
    \  being able to use a representation of the payload that is not\n   base64url
    encoded in contexts in which it safe to do so.\n   Thanks to Sergey Beryozkin,
    Stephen Farrell, Benjamin Kaduk, James\n   Manger, Kathleen Moriarty, Axel Nennker,
    Anders Rundgren, Nat\n   Sakimura, Jim Schaad, Robert Sparks, and Matias Woloski
    for their\n   reviews of the specification, and thanks to Vladimir Dzhuvinov for\n
    \  verifying the examples.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n
    \  URI:   http://self-issued.info/\n"
  title: Author's Address
