- contents:
  - "                       Collection Synchronization\n         for Web Distributed
    Authoring and Versioning (WebDAV)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines an extension to Web Distributed Authoring\n
    \  and Versioning (WebDAV) that allows efficient synchronization of the\n   contents
    of a WebDAV collection.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6578.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  4\n   2.  Conventions Used in This Document  . . . . . . . . . .
    . . . .  4\n   3.  WebDAV Synchronization . . . . . . . . . . . . . . . . . .
    . .  5\n     3.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 5\n     3.2.  DAV:sync-collection Report . . . . . . . . . . . . . . . .  6\n
    \    3.3.  Depth Behavior . . . . . . . . . . . . . . . . . . . . . .  8\n     3.4.
    \ Types of Changes Reported on Initial Synchronization . . .  9\n     3.5.  Types
    of Changes Reported on Subsequent\n           Synchronizations . . . . . . . .
    . . . . . . . . . . . . . 10\n       3.5.1.  Changed Member . . . . . . . . .
    . . . . . . . . . . . 10\n       3.5.2.  Removed Member . . . . . . . . . . .
    . . . . . . . . . 10\n     3.6.  Truncation of Results  . . . . . . . . . . .
    . . . . . . . 11\n     3.7.  Limiting Results . . . . . . . . . . . . . . . .
    . . . . . 12\n     3.8.  Example: Initial DAV:sync-collection Report  . . . .
    . . . 12\n     3.9.  Example: DAV:sync-collection Report with Token . . . . .
    . 14\n     3.10. Example: Initial DAV:sync-collection Report with\n           Truncation
    . . . . . . . . . . . . . . . . . . . . . . . . 16\n     3.11. Example: Initial
    DAV:sync-collection Report with Limit . . 17\n     3.12. Example: DAV:sync-collection
    Report with Unsupported\n           Limit  . . . . . . . . . . . . . . . . . .
    . . . . . . . . 18\n     3.13. Example: DAV:sync-level Set to Infinite, Initial\n
    \          DAV:sync-collection Report . . . . . . . . . . . . . . . . 19\n   4.
    \ DAV:sync-token Property  . . . . . . . . . . . . . . . . . . . 22\n   5.  DAV:sync-token
    Use with If Header  . . . . . . . . . . . . . . 22\n     5.1.  Example: If Precondition
    with PUT  . . . . . . . . . . . . 22\n     5.2.  Example: If Precondition with
    MKCOL  . . . . . . . . . . . 23\n   6.  XML Element Definitions  . . . . . . .
    . . . . . . . . . . . . 24\n     6.1.  DAV:sync-collection XML Element  . . .
    . . . . . . . . . . 24\n     6.2.  DAV:sync-token XML Element . . . . . . . .
    . . . . . . . . 24\n     6.3.  DAV:sync-level XML Element . . . . . . . . . .
    . . . . . . 24\n     6.4.  DAV:multistatus XML Element  . . . . . . . . . . .
    . . . . 25\n   7.  Security Considerations  . . . . . . . . . . . . . . . . .
    . . 25\n   8.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . .
    25\n   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n
    \    9.1.  Normative References . . . . . . . . . . . . . . . . . . . 25\n     9.2.
    \ Informative References . . . . . . . . . . . . . . . . . . 26\n   Appendix A.
    \ Backwards-Compatible Handling of Depth  . . . . . . . 27\n   Appendix B.  Example
    of a Client Synchronization Approach  . . . . 27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   WebDAV [RFC4918] defines the concept of 'collections', which
    are\n   hierarchical groupings of WebDAV resources on an HTTP [RFC2616]\n   server.
    \ Collections can be of arbitrary size and depth (i.e.,\n   collections within
    collections).  WebDAV clients that cache resource\n   content need a way to synchronize
    that data with the server (i.e.,\n   detect what has changed and update their
    cache).  Currently, this can\n   be done using a WebDAV PROPFIND request on a
    collection to list all\n   members of a collection along with their DAV:getetag
    property values,\n   which allows the client to determine which were changed,
    added, or\n   deleted.  However, this does not scale well to large collections,
    as\n   the XML response to the PROPFIND request will grow with the\n   collection
    size.\n   This specification defines a new WebDAV report that results in the\n
    \  server returning to the client only information about those member\n   URLs
    that were added or deleted, or whose mapped resources were\n   changed, since
    a previous execution of the report on the collection.\n   Additionally, a new
    property is added to collection resources that is\n   used to convey a \"synchronization
    token\" that is guaranteed to change\n   when the collection's member URLs or
    their mapped resources have\n   changed.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n   This document uses XML DTD fragments ([W3C.REC-xml-20081126],
    Section\n   3.2) as a purely notational convention.  WebDAV request and response\n
    \  bodies cannot be validated by a DTD due to the specific extensibility\n   rules
    defined in Section 17 of [RFC4918] and due to the fact that all\n   XML elements
    defined by this specification use the XML namespace name\n   \"DAV:\".  In particular:\n
    \  1.  Element names use the \"DAV:\" namespace.\n   2.  Element ordering is irrelevant
    unless explicitly stated\n       otherwise.\n   3.  Extension elements (elements
    not already defined as valid child\n       elements) may be added anywhere, except
    when explicitly stated\n       otherwise.\n   4.  Extension attributes (attributes
    not already defined as valid for\n       this element) may be added anywhere,
    except when explicitly\n       stated otherwise.\n   When an XML element type
    in the \"DAV:\" namespace is referenced in\n   this document outside of the context
    of an XML fragment, the string\n   \"DAV:\" will be prefixed to the element type.\n
    \  This document inherits, and sometimes extends, DTD productions from\n   Section
    14 of [RFC4918].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - '3.  WebDAV Synchronization

    '
  - contents:
    - "3.1.  Overview\n   One way to synchronize data between two entities is to use
      some form\n   of synchronization token.  The token defines the state of the
      data\n   being synchronized at a particular point in time.  It can then be\n
      \  used to determine what has changed between one point in time and\n   another.\n
      \  This specification defines a new WebDAV report that is used to enable\n   client-server
      collection synchronization based on such a token.\n   In order to synchronize
      the contents of a collection between a server\n   and client, the server provides
      the client with a synchronization\n   token each time the synchronization report
      is executed.  That token\n   represents the state of the data being synchronized
      at that point in\n   time.  The client can then present that same token back
      to the server\n   at some later time, and the server will return only those
      items that\n   are new, have changed, or were deleted since that token was\n
      \  generated.  The server also returns a new token representing the new\n   state
      at the time the report was run.\n   Typically, the first time a client connects
      to the server it will\n   need to be informed of the entire state of the collection
      (i.e., a\n   full list of all member URLs that are currently in the collection).\n
      \  That is done by the client sending an empty token value to the\n   server.
      \ This indicates to the server that a full listing is\n   required.\n   As an
      alternative, the client might choose to do its first\n   synchronization using
      some other mechanism on the collection (e.g.,\n   some other form of batch resource
      information retrieval such as\n   PROPFIND, SEARCH [RFC5323], or specialized
      REPORTs such as those\n   defined in CalDAV [RFC4791] and CardDAV [RFC6352])
      and ask for the\n   DAV:sync-token property to be returned.  This property (defined
      in\n   Section 4) contains the same token that can be used later to issue a\n
      \  DAV:sync-collection report.\n   In some cases, a server might only wish to
      maintain a limited amount\n   of history about changes to a collection.  In
      that situation, it will\n   return an error to the client when the client presents
      a token that\n   is \"out of date\".  At that point, the client has to fall
      back to\n   synchronizing the entire collection by re-running the report request\n
      \  using an empty token value.\n   Typically, a client will use the synchronization
      report to retrieve\n   the list of changes and will follow that with requests
      to retrieve\n   the content of changed resources.  It is possible that additional\n
      \  changes to the collection could occur between the time of the\n   synchronization
      report and resource content retrieval, which could\n   result in an inconsistent
      view of the collection.  When clients use\n   this method of synchronization,
      they need to be aware that such\n   additional changes could occur and track
      them, e.g., by differences\n   between the ETag values returned in the synchronization
      report and\n   those returned when actually fetching resource content, by using\n
      \  conditional requests as described in Section 5, or by repeating the\n   synchronization
      process until no changes are returned.\n"
    title: 3.1.  Overview
  - contents:
    - "3.2.  DAV:sync-collection Report\n   If the DAV:sync-collection report is implemented
      by a WebDAV server,\n   then the server MUST list the report in the\n   \"DAV:supported-report-set\"
      property on any collection that supports\n   synchronization.\n   To implement
      the behavior for this report, a server needs to keep\n   track of changes to
      any member URLs and their mapped resources in a\n   collection (as defined in
      Section 3 of [RFC4918]).  This includes\n   noting the addition of new member
      URLs, the changes to the mapped\n   resources of existing member URLs, and the
      removal of member URLs.\n   The server will track each change and provide a
      synchronization\n   \"token\" to the client that describes the state of the
      server at a\n   specific point in time.  This \"token\" is returned as part
      of the\n   response to the \"sync-collection\" report.  Clients include the
      last\n   token they got from the server in the next \"sync-collection\" report\n
      \  that they execute, and the server provides the changes from the\n   previous
      state (represented by the token) to the current state\n   (represented by the
      new token returned).\n   The synchronization token itself MUST be treated as
      an \"opaque\"\n   string by the client, i.e., the actual string data has no
      specific\n   meaning or syntax.  However, the token MUST be a valid URI to allow\n
      \  its use in an If precondition request header (see Section 5).  For\n   example,
      a simple implementation of such a token could be a numeric\n   counter that
      counts each change as it occurs and relates that change\n   to the specific
      object that changed.  The numeric value could be\n   appended to a \"base\"
      URI to form the valid sync-token.\n   Marshalling:\n      The request-URI MUST
      identify a collection.  The request body MUST\n      be a DAV:sync-collection
      XML element (see Section 6.1), which MUST\n      contain one DAV:sync-token
      XML element, one DAV:sync-level\n      element, and one DAV:prop XML element,
      and MAY contain a DAV:limit\n      XML element.\n      This report is only defined
      when the Depth header has value \"0\";\n      other values result in a 400 (Bad
      Request) error response.  Note\n      that [RFC3253], Section 3.6, states that
      if the Depth header is\n      not present, it defaults to a value of \"0\".\n
      \     The response body for a successful request MUST be a\n      DAV:multistatus
      XML element, which MUST contain one DAV:sync-token\n      element in addition
      to one DAV:response element for each member\n      URL that was added, has had
      its mapped resource changed, or was\n      deleted since the last synchronization
      operation as specified by\n      the DAV:sync-token provided in the request.
      \ A given member URL\n      MUST appear only once in the response.  In the case
      where multiple\n      member URLs of the request-URI are mapped to the same
      resource, if\n      the resource is changed, each member URL MUST be returned
      in the\n      response.\n      The content of each DAV:response element differs
      depending on how\n      the member was altered:\n         For members that have
      changed (i.e., are new or have had their\n         mapped resource modified),
      the DAV:response MUST contain at\n         least one DAV:propstat element and
      MUST NOT contain any\n         DAV:status element.\n         For members that
      have been removed, the DAV:response MUST\n         contain one DAV:status with
      a value set to '404 Not Found' and\n         MUST NOT contain any DAV:propstat
      element.\n         For members that are collections and are unable to support
      the\n         DAV:sync-collection report, the DAV:response MUST contain one\n
      \        DAV:status with a value set to '403 Forbidden', a DAV:error\n         containing
      DAV:supported-report or DAV:sync-traversal-supported\n         (see Section
      3.3 for which is appropriate) and MUST NOT contain\n         any DAV:propstat
      element.\n      The conditions under which each type of change can occur are\n
      \     further described in Section 3.5.\n   Preconditions:\n      (DAV:valid-sync-token):
      The DAV:sync-token element value MUST be a\n      valid token previously returned
      by the server for the collection\n      targeted by the request-URI.  Servers
      might need to invalidate\n      tokens previously returned to clients.  Doing
      so will cause the\n      clients to fall back to doing full synchronization
      using the\n      report, though that will not require clients to download resources\n
      \     that are already cached and have not changed.  Even so, servers\n      MUST
      limit themselves to invalidating tokens only when absolutely\n      necessary.
      \ Specific reasons include:\n      *  Servers might be unable to maintain all
      of the change data for\n         a collection due to storage or performance
      reasons, e.g.,\n         servers might only be able to maintain up to 3 weeks
      worth of\n         changes to a collection, or only up to 10,000 total changes,
      or\n         not wish to maintain changes for a deleted collection.\n      *
      \ Change to server implementation: servers might be upgraded to a\n         new
      implementation that tracks the history in a different\n         manner, and
      thus previous synchronization history is no longer\n         valid.\n   Postconditions:\n
      \     (DAV:number-of-matches-within-limits): The number of changes\n      reported
      in the response must fall within the client-specified\n      limit.  This condition
      might be triggered if a client requests a\n      limit on the number of responses
      (as per Section 3.7), but the\n      server is unable to truncate the result
      set at or below that\n      limit.\n"
    title: 3.2.  DAV:sync-collection Report
  - contents:
    - "3.3.  Depth Behavior\n   Servers MUST support only Depth:0 behavior with the\n
      \  DAV:sync-collection report, i.e., the report targets only the\n   collection
      being synchronized in a single request.  However, clients\n   do need to \"scope\"
      the synchronization to different levels within\n   that collection -- specifically,
      immediate children (level \"1\") and\n   all children at any depth (level \"infinite\").
      \ To specify which level\n   to use, clients MUST include a DAV:sync-level XML
      element in the\n   request.\n   o  When the client specifies the DAV:sync-level
      XML element with a\n      value of \"1\", only appropriate internal member URLs
      (immediate\n      children) of the collection specified as the request-URI are\n
      \     reported.\n   o  When the client specifies the DAV:sync-level XML element
      with a\n      value of \"infinite\", all appropriate member URLs of the collection\n
      \     specified as the request-URI are reported, provided child\n      collections
      themselves also support the DAV:sync-collection\n      report.\n   o  DAV:sync-token
      values returned by the server are not specific to\n      the value of the DAV:sync-level
      XML element used in the request.\n      As such, clients MAY use a DAV:sync-token
      value from a request\n      with one DAV:sync-level XML element value for a
      similar request\n      with a different DAV:sync-level XML element value; however,
      the\n      utility of this is limited.\n   Note that when a server supports
      a DAV:sync-level XML element with a\n   value of \"infinite\", it might not
      be possible to synchronize some\n   child collections within the collection
      targeted by the report.  When\n   this occurs, the server MUST include a DAV:response
      element for the\n   child collection with status 403 (Forbidden).  The 403 response
      MUST\n   be sent once, when the collection is first reported to the client.\n
      \  In addition, the server MUST include a DAV:error element in the\n   DAV:response
      element, indicating one of two possible causes for this:\n      The DAV:sync-collection
      report is not supported at all on the\n      child collection.  The DAV:error
      element MUST contain the\n      DAV:supported-report element.\n      The server
      is unwilling to report results for the child collection\n      when a DAV:sync-collection
      report with the DAV:sync-level XML\n      element set to \"infinite\" is executed
      on a parent resource.  This\n      might happen when, for example, the synchronization
      state of the\n      collection resource is controlled by another subsystem.
      \ In such\n      cases clients can perform the DAV:sync-collection report directly\n
      \     on the child collection instead.  The DAV:error element MUST\n      contain
      the DAV:sync-traversal-supported element.\n"
    title: 3.3.  Depth Behavior
  - contents:
    - "3.4.  Types of Changes Reported on Initial Synchronization\n   When the DAV:sync-collection
      request contains an empty DAV:sync-token\n   element, the server MUST return
      all member URLs of the collection\n   (taking account of the DAV:sync-level
      XML element value as per\n   Section 3.3, and optional truncation of the result
      set as per\n   Section 3.6) and it MUST NOT return any removed member URLs.
      \ All\n   types of member (collection or non-collection) MUST be reported.\n"
    title: 3.4.  Types of Changes Reported on Initial Synchronization
  - contents:
    - "3.5.  Types of Changes Reported on Subsequent Synchronizations\n   When the
      DAV:sync-collection request contains a valid value for the\n   DAV:sync-token
      element, two types of member URL state changes can be\n   returned (changed
      or removed).  This section defines what triggers\n   each of these to be returned.
      \ It also clarifies the case where a\n   member URL might have undergone multiple
      changes between two\n   synchronization report requests.  In all cases, the
      DAV:sync-level\n   XML element value (as per Section 3.3) and optional truncation
      of the\n   result set (as per Section 3.6) are taken into account by the server.\n"
    - contents:
      - "3.5.1.  Changed Member\n   A member URL MUST be reported as changed if it
        has been newly mapped\n   as a member of the target collection since the request
        sync-token was\n   generated (e.g., when a new resource has been created as
        a child of\n   the collection).  For example, this includes member URLs that
        have\n   been newly mapped as the result of a COPY, MOVE, BIND [RFC5842],
        or\n   REBIND [RFC5842] request.  All types of member URL (collection or\n
        \  non-collection) MUST be reported.\n   In the case where a mapping between
        a member URL and the target\n   collection was removed, then a new mapping
        with the same URI was\n   created, the member URL MUST be reported as changed
        and MUST NOT be\n   reported as removed.\n   A member URL MUST be reported
        as changed if its mapped resource's\n   entity tag value (defined in Section
        3.11 of [RFC2616]) has changed\n   since the request sync-token was generated.\n
        \  A member URL MAY be reported as changed if the user issuing the\n   request
        was granted access to this member URL, due to access control\n   changes.\n
        \  Collection member URLs MUST be returned as changed if they are mapped\n
        \  to an underlying resource (i.e., entity body) and if the entity tag\n   associated
        with that resource changes.  There is no guarantee that\n   changes to members
        of a collection will result in a change in any\n   entity tag of that collection,
        so clients cannot rely on a series of\n   reports using the DAV:sync-level
        XML element value set to \"1\" at\n   multiple levels to track all changes
        within a collection.  Instead, a\n   DAV:sync-level XML element with a value
        of \"infinite\" has to be used.\n"
      title: 3.5.1.  Changed Member
    - contents:
      - "3.5.2.  Removed Member\n   A member MUST be reported as removed if its mapping
        under the target\n   collection has been removed since the request sync-token
        was\n   generated, and it has not been remapped since it was removed.  For\n
        \  example, this includes members that have been unmapped as the result\n
        \  of a MOVE, UNBIND [RFC5842], or REBIND [RFC5842] operation.  This\n   also
        includes collection members that have been removed, including\n   ones that
        themselves do not support the DAV:sync-collection report.\n   If a member
        was added (and its mapped resource possibly modified),\n   then removed between
        two synchronization report requests, it MUST be\n   reported as removed.  This
        ensures that a client that adds a member\n   is informed of the removal of
        the member, if the removal occurs\n   before the client has had a chance to
        execute a synchronization\n   report.\n   A member MAY be reported as removed
        if the user issuing the request\n   no longer has access to this member, due
        to access control changes.\n   For a report with the DAV:sync-level XML element
        value set to\n   \"infinite\", where a collection is removed, the server MUST
        NOT report\n   the removal of any members of the removed collection.  Clients
        MUST\n   assume that if a collection is reported as being removed, then all\n
        \  members of that collection have also been removed.\n"
      title: 3.5.2.  Removed Member
    title: 3.5.  Types of Changes Reported on Subsequent Synchronizations
  - contents:
    - "3.6.  Truncation of Results\n   A server MAY limit the number of member URLs
      in a response, for\n   example, to limit the amount of work expended in processing
      a\n   request, or as the result of an explicit limit set by the client.  If\n
      \  the result set is truncated, the response MUST use status code 207\n   (Multi-Status),
      return a DAV:multistatus response body, and indicate\n   a status of 507 (Insufficient
      Storage) for the request-URI.  That\n   DAV:response element SHOULD include
      a DAV:error element with the\n   DAV:number-of-matches-within-limits precondition,
      as defined in\n   [RFC3744] (Section 9.2).  DAV:response elements for all the
      changes\n   being reported are also included.\n   When truncation occurs, the
      DAV:sync-token value returned in the\n   response MUST represent the correct
      state for the partial set of\n   changes returned.  That allows the client to
      use the returned\n   DAV:sync-token to fetch the next set of changes.  In this
      way, the\n   client can effectively \"page\" through the entire set of changes
      in a\n   consistent manner.\n   Clients MUST handle the 507 status on the request-URI
      in the response\n   to the report.\n   For example, consider a server that records
      changes using a strictly\n   increasing integer to represent a \"revision number\"
      and uses that\n   quantity as the DAV:sync-token value (appropriately encoded
      as a\n   URI).  Assume the last DAV:sync-token used by the client was\n   \"http://example.com/sync/10\",
      and since then 15 additional changes to\n   different resources have occurred.
      \ If the client executes a\n   DAV:sync-collection request with a DAV:sync-token
      of\n   \"http://example.com/sync/10\", without a limit, the server would\n   return
      15 DAV:response elements and a DAV:sync-token with value\n   \"http://example.com/sync/25\".
      \ But if the server chooses to limit\n   responses to at most 10 changes, then
      it would return only 10\n   DAV:response elements and a DAV:sync-token with
      value\n   \"http://example.com/sync/20\", together with an additional\n   DAV:response
      element for the request-URI with a status code of 507.\n   Subsequently, the
      client can reissue the request with the\n   DAV:sync-token value returned from
      the server and fetch the remaining\n   5 changes.\n"
    title: 3.6.  Truncation of Results
  - contents:
    - "3.7.  Limiting Results\n   A client can limit the number of results returned
      by the server\n   through use of the DAV:limit element ([RFC5323], Section 5.17)
      in the\n   request body.  This is useful when clients have limited space or\n
      \  bandwidth for the results.  If a server is unable to truncate the\n   result
      at or below the requested number, then it MUST fail the\n   request with a DAV:number-of-matches-within-limits
      postcondition\n   error.  When the results can be correctly limited by the server,
      the\n   server MUST follow the rules above for indicating a result set\n   truncation
      to the client.\n"
    title: 3.7.  Limiting Results
  - contents:
    - "3.8.  Example: Initial DAV:sync-collection Report\n   In this example, the
      client is making its first synchronization\n   request to the server, so the
      DAV:sync-token element in the request\n   is empty.  It also asks for the DAV:getetag
      property and for a\n   proprietary property.  The server responds with the items
      currently\n   in the targeted collection.  The current synchronization token
      is\n   also returned.\n   >> Request <<\n   REPORT /home/cyrusdaboo/ HTTP/1.1\n
      \  Host: webdav.example.com\n   Depth: 0\n   Content-Type: text/xml; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:sync-collection
      xmlns:D=\"DAV:\">\n     <D:sync-token/>\n     <D:sync-level>1</D:sync-level>\n
      \    <D:prop xmlns:R=\"urn:ns.example.com:boxschema\">\n       <D:getetag/>\n
      \      <R:bigbox/>\n     </D:prop>\n   </D:sync-collection>\n   >> Response
      <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus
      xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/test.doc</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00001-abcd1\"</D:getetag>\n
      \          <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\">\n             <R:BoxType>Box
      type A</R:BoxType>\n           </R:bigbox>\n         </D:prop>\n         <D:status>HTTP/1.1
      200 OK</D:status>\n       </D:propstat>\n     </D:response>\n     <D:response>\n
      \      <D:href\n   >http://webdav.example.com/home/cyrusdaboo/vcard.vcf</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00002-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \      <D:propstat>\n         <D:prop>\n           <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\"/>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/calendar.ics</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00003-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \      <D:propstat>\n         <D:prop>\n           <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\"/>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:sync-token>http://example.com/ns/sync/1234</D:sync-token>\n
      \  </D:multistatus>\n"
    title: '3.8.  Example: Initial DAV:sync-collection Report'
  - contents:
    - "3.9.  Example: DAV:sync-collection Report with Token\n   In this example, the
      client is making a synchronization request to\n   the server and is using the
      DAV:sync-token element returned from the\n   last report it ran on this collection.
      \ The server responds, listing\n   the items that have been added, changed,
      or removed.  The (new)\n   current synchronization token is also returned.\n
      \  >> Request <<\n   REPORT /home/cyrusdaboo/ HTTP/1.1\n   Host: webdav.example.com\n
      \  Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml
      version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:sync-collection xmlns:D=\"DAV:\">\n
      \    <D:sync-token>http://example.com/ns/sync/1234</D:sync-token>\n     <D:sync-level>1</D:sync-level>\n
      \    <D:prop xmlns:R=\"urn:ns.example.com:boxschema\">\n       <D:getetag/>\n
      \      <R:bigbox/>\n     </D:prop>\n   </D:sync-collection>\n   >> Response
      <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus
      xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/file.xml</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00004-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \      <D:propstat>\n         <D:prop>\n           <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\"/>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/vcard.vcf</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00002-abcd2\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \      <D:propstat>\n         <D:prop>\n           <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\"/>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/test.doc</D:href>\n
      \      <D:status>HTTP/1.1 404 Not Found</D:status>\n     </D:response>\n     <D:sync-token>http://example.com/ns/sync/1238</D:sync-token>\n
      \  </D:multistatus>\n"
    title: '3.9.  Example: DAV:sync-collection Report with Token'
  - contents:
    - "3.10.  Example: Initial DAV:sync-collection Report with Truncation\n   In this
      example, the client is making its first synchronization\n   request to the server,
      so the DAV:sync-token element in the request\n   is empty.  It also asks for
      the DAV:getetag property.  The server\n   responds with the items currently
      in the targeted collection but\n   truncated at two items.  The synchronization
      token for the truncated\n   result set is returned.\n   >> Request <<\n   REPORT
      /home/cyrusdaboo/ HTTP/1.1\n   Host: webdav.example.com\n   Depth: 0\n   Content-Type:
      text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\"
      encoding=\"utf-8\" ?>\n   <D:sync-collection xmlns:D=\"DAV:\">\n     <D:sync-token/>\n
      \    <D:sync-level>1</D:sync-level>\n     <D:prop>\n       <D:getetag/>\n     </D:prop>\n
      \  </D:sync-collection>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type:
      text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\"
      encoding=\"utf-8\" ?>\n   <D:multistatus xmlns:D=\"DAV:\">\n     <D:response>\n
      \      <D:href\n   >http://webdav.example.com/home/cyrusdaboo/test.doc</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00001-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/vcard.vcf</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00002-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/</D:href>\n
      \      <D:status>HTTP/1.1 507 Insufficient Storage</D:status>\n       <D:error><D:number-of-matches-within-limits/></D:error>\n
      \    </D:response>\n     <D:sync-token>http://example.com/ns/sync/1233</D:sync-token>\n
      \  </D:multistatus>\n"
    title: '3.10.  Example: Initial DAV:sync-collection Report with Truncation'
  - contents:
    - "3.11.  Example: Initial DAV:sync-collection Report with Limit\n   In this example,
      the client is making its first synchronization\n   request to the server, so
      the DAV:sync-token element in the request\n   is empty.  It requests a limit
      of 1 for the responses returned by the\n   server.  It also asks for the DAV:getetag
      property.  The server\n   responds with the items currently in the targeted
      collection, but\n   truncated at one item.  The synchronization token for the
      truncated\n   result set is returned.\n   >> Request <<\n   REPORT /home/cyrusdaboo/
      HTTP/1.1\n   Host: webdav.example.com\n   Depth: 0\n   Content-Type: text/xml;
      charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\"
      ?>\n   <D:sync-collection xmlns:D=\"DAV:\">\n     <D:sync-token/>\n     <D:sync-level>1</D:sync-level>\n
      \    <D:limit>\n       <D:nresults>1</D:nresults>\n     </D:limit>\n     <D:prop>\n
      \      <D:getetag/>\n     </D:prop>\n   </D:sync-collection>\n   >> Response
      <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus
      xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/test.doc</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00001-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href\n   >http://webdav.example.com/home/cyrusdaboo/</D:href>\n
      \      <D:status>HTTP/1.1 507 Insufficient Storage</D:status>\n       <D:error><D:number-of-matches-within-limits/></D:error>\n
      \    </D:response>\n     <D:sync-token>http://example.com/ns/sync/1232</D:sync-token>\n
      \  </D:multistatus>\n"
    title: '3.11.  Example: Initial DAV:sync-collection Report with Limit'
  - contents:
    - "3.12.  Example: DAV:sync-collection Report with Unsupported Limit\n   In this
      example, the client is making a synchronization request to\n   the server with
      a valid DAV:sync-token element value.  It requests a\n   limit of 100 for the
      responses returned by the server.  It also asks\n   for the DAV:getetag property.
      \ The server is unable to limit the\n   results to the maximum specified by
      the client, so it responds with a\n   507 status code and appropriate postcondition
      error code.\n   >> Request <<\n   REPORT /home/cyrusdaboo/ HTTP/1.1\n   Host:
      webdav.example.com\n   Depth: 0\n   Content-Type: text/xml; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:sync-collection
      xmlns:D=\"DAV:\">\n     <D:sync-token>http://example.com/ns/sync/1232</D:sync-token>\n
      \    <D:sync-level>1</D:sync-level>\n     <D:limit>\n       <D:nresults>100</D:nresults>\n
      \    </D:limit>\n     <D:prop>\n       <D:getetag/>\n     </D:prop>\n   </D:sync-collection>\n
      \  >> Response <<\n   HTTP/1.1 507 Insufficient Storage\n   Content-Type: text/xml;
      charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\"
      ?>\n   <D:error xmlns:D=\"DAV:\">\n     <D:number-of-matches-within-limits/>\n
      \  </D:error>\n"
    title: '3.12.  Example: DAV:sync-collection Report with Unsupported Limit'
  - contents:
    - "3.13.  Example: DAV:sync-level Set to Infinite, Initial\n       DAV:sync-collection
      Report\n   In this example, the client is making its first synchronization\n
      \  request to the server, so the DAV:sync-token element in the request\n   is
      empty, and it is using DAV:sync-level set to \"infinite\".  It also\n   asks
      for the DAV:getetag property and for a proprietary property.\n   The server
      responds with the items currently in the targeted\n   collection.  The current
      synchronization token is also returned.\n   The collection /home/cyrusdaboo/collection1/
      exists and has one child\n   resource that is also reported.  The collection
      /home/cyrusdaboo/\n   collection2/ exists but has no child resources.  The collection\n
      \  /home/cyrusdaboo/shared/ is returned with a 403 status indicating\n   that
      a collection exists, but it is unable to report on changes\n   within it in
      the scope of the current DAV:sync-level \"infinite\"\n   report.  Instead, the
      client can try a DAV:sync-collection report\n   directly on the collection URI.\n
      \  >> Request <<\n   REPORT /home/cyrusdaboo/ HTTP/1.1\n   Host: webdav.example.com\n
      \  Depth: 0\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:
      xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:sync-collection
      xmlns:D=\"DAV:\">\n     <D:sync-token/>\n     <D:sync-level>infinite</D:sync-level>\n
      \    <D:prop xmlns:R=\"urn:ns.example.com:boxschema\">\n       <D:getetag/>\n
      \      <R:bigbox/>\n     </D:prop>\n   </D:sync-collection>\n   >> Response
      <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus
      xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>/home/cyrusdaboo/collection1/</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00001-abcd1\"</D:getetag>\n
      \          <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\">\n             <R:BoxType>Box
      type A</R:BoxType>\n           </R:bigbox>\n         </D:prop>\n         <D:status>HTTP/1.1
      200 OK</D:status>\n       </D:propstat>\n     </D:response>\n     <D:response>\n
      \      <D:href>/home/cyrusdaboo/collection1/test.doc</D:href>\n       <D:propstat>\n
      \        <D:prop>\n           <D:getetag>\"00001-abcd1\"</D:getetag>\n           <R:bigbox
      xmlns:R=\"urn:ns.example.com:boxschema\">\n             <R:BoxType>Box type
      A</R:BoxType>\n           </R:bigbox>\n         </D:prop>\n         <D:status>HTTP/1.1
      200 OK</D:status>\n       </D:propstat>\n     </D:response>\n     <D:response>\n
      \      <D:href>/home/cyrusdaboo/collection2/</D:href>\n       <D:propstat>\n
      \        <D:prop>\n           <D:getetag/>\n         </D:prop>\n         <D:status>HTTP/1.1
      404 Not Found</D:status>\n       </D:propstat>\n       <D:propstat>\n         <D:prop>\n
      \          <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\"/>\n         </D:prop>\n
      \        <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href>/home/cyrusdaboo/calendar.ics</D:href>\n
      \      <D:propstat>\n         <D:prop>\n           <D:getetag>\"00003-abcd1\"</D:getetag>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n
      \      <D:propstat>\n         <D:prop>\n           <R:bigbox xmlns:R=\"urn:ns.example.com:boxschema\"/>\n
      \        </D:prop>\n         <D:status>HTTP/1.1 404 Not Found</D:status>\n       </D:propstat>\n
      \    </D:response>\n     <D:response>\n       <D:href>/home/cyrusdaboo/shared/</D:href>\n
      \      <D:status>HTTP/1.1 403 Forbidden</D:status>\n       <D:error><D:sync-traversal-supported/></D:error>\n
      \    </D:response>\n     <D:sync-token>http://example.com/ns/sync/1234</D:sync-token>\n
      \  </D:multistatus>\n"
    title: '3.13.  Example: DAV:sync-level Set to Infinite, Initial'
  title: 3.  WebDAV Synchronization
- contents:
  - "4.  DAV:sync-token Property\n   Name:  sync-token\n   Namespace:  DAV:\n   Purpose:
    \ Contains the value of the synchronization token as it would\n      be returned
    by a DAV:sync-collection report.\n   Value:  Any valid URI.\n   Protected:  MUST
    be protected because this value is created and\n      controlled by the server.\n
    \  COPY/MOVE behavior:  This property value is dependent on the final\n      state
    of the destination resource, not the value of the property\n      on the source
    resource.\n   Description:  The DAV:sync-token property MUST be defined on all\n
    \     resources that support the DAV:sync-collection report.  It\n      contains
    the value of the synchronization token as it would be\n      returned by a DAV:sync-collection
    report on that resource at the\n      same point in time.  It SHOULD NOT be returned
    by a PROPFIND\n      DAV:allprop request (as defined in Section 14.2 of [RFC4918]).\n
    \  Definition:\n   <!ELEMENT sync-token #PCDATA>\n   <!-- Text MUST be a valid
    URI -->\n"
  title: 4.  DAV:sync-token Property
- contents:
  - "5.  DAV:sync-token Use with If Header\n   WebDAV provides an If precondition
    header that allows for \"state\n   tokens\" to be used as preconditions on HTTP
    requests (as defined in\n   Section 10.4 of [RFC4918]).  This specification allows
    the\n   DAV:sync-token value to be used as one such token in an If header.\n   By
    using this, clients can ensure requests only complete when there\n   have been
    no changes to the content of a collection, by virtue of an\n   unchanged DAV:sync-token
    value.  Servers MUST support use of\n   DAV:sync-token values in If request headers.\n"
  - contents:
    - "5.1.  Example: If Precondition with PUT\n   In this example, the client has
      already used the DAV:sync-collection\n   report to synchronize the collection
      /home/cyrusdaboo/collection/.\n   Now it wants to add a new resource to the
      collection, but only if\n   there have been no other changes since the last
      synchronization.\n   Note that because the DAV:sync-token is defined on the
      collection and\n   not on the resource targeted by the request, the If header
      value\n   needs to use the \"Resource_Tag\" construct for the header syntax
      to\n   correctly identify that the supplied state token refers to the\n   collection
      resource.\n   >> Request <<\n   PUT /home/cyrusdaboo/collection/newresource.txt
      HTTP/1.1\n   Host: webdav.example.com\n   If: </home/cyrusdaboo/collection/>\n
      \    (<http://example.com/ns/sync/12345>)\n   Content-Type: text/plain; charset=\"utf-8\"\n
      \  Content-Length: xxxx\n   Some content here...\n   >> Response <<\n   HTTP/1.1
      201 Created\n"
    title: '5.1.  Example: If Precondition with PUT'
  - contents:
    - "5.2.  Example: If Precondition with MKCOL\n   In this example, the client has
      already used the DAV:sync-collection\n   report to synchronize the collection
      /home/cyrusdaboo/collection/.\n   Now, it wants to add a new collection to the
      collection, but only if\n   there have been no other changes since the last
      synchronization.\n   Note that because the DAV:sync-token is defined on the
      collection and\n   not on the resource targeted by the request, the If header
      value\n   needs to use the \"Resource_Tag\" construct for the header syntax
      to\n   correctly identify that the supplied state token refers to the\n   collection
      resource.  In this case, the request fails as another\n   change has occurred
      to the collection corresponding to the supplied\n   DAV:sync-token.\n   >> Request
      <<\n   MKCOL /home/cyrusdaboo/collection/child/ HTTP/1.1\n   Host: webdav.example.com\n
      \  If: </home/cyrusdaboo/collection/>\n     (<http://example.com/ns/sync/12346>)\n
      \  >> Response <<\n   HTTP/1.1 412 Precondition Failed\n"
    title: '5.2.  Example: If Precondition with MKCOL'
  title: 5.  DAV:sync-token Use with If Header
- contents:
  - '6.  XML Element Definitions

    '
  - contents:
    - "6.1.  DAV:sync-collection XML Element\n   Name:  sync-collection\n   Namespace:
      \ DAV:\n   Purpose:  WebDAV report used to synchronize data between client and\n
      \     server.\n   Description:  See Section 3.\n   <!ELEMENT sync-collection
      (sync-token, sync-level, limit?, prop)>\n   <!-- DAV:limit defined in RFC 5323,
      Section 5.17 -->\n   <!-- DAV:prop defined in RFC 4918, Section 14.18 -->\n"
    title: 6.1.  DAV:sync-collection XML Element
  - contents:
    - "6.2.  DAV:sync-token XML Element\n   Name:  sync-token\n   Namespace:  DAV:\n
      \  Purpose:  The synchronization token provided by the server and\n      returned
      by the client.\n   Description:  See Section 3.\n   <!ELEMENT sync-token CDATA>\n
      \  <!-- Text MUST be a URI -->\n"
    title: 6.2.  DAV:sync-token XML Element
  - contents:
    - "6.3.  DAV:sync-level XML Element\n   Name:  sync-level\n   Namespace:  DAV:\n
      \  Purpose:  Indicates the \"scope\" of the synchronization report\n      request.\n
      \  Description:  See Section 3.3.\n   <!ELEMENT sync-level CDATA>\n   <!-- Text
      MUST be either \"1\" or \"infinite\" -->\n"
    title: 6.3.  DAV:sync-level XML Element
  - contents:
    - "6.4.  DAV:multistatus XML Element\n   Name:  multistatus\n   Namespace:  DAV:\n
      \  Purpose:  Extends the DAV:multistatus element to include\n      synchronization
      details.\n   Description:  See Section 3.\n   <!ELEMENT multistatus (response*,
      responsedescription?,\n                          sync-token?) >\n   <!-- DAV:multistatus
      originally defined in RFC 4918, Section 14.16\n        but overridden here to
      add the DAV:sync-token element -->\n   <!-- DAV:response defined in RFC 4918,
      Section 14.24 -->\n   <!-- DAV:responsedescription defined in RFC 4918, Section
      14.25 -->\n"
    title: 6.4.  DAV:multistatus XML Element
  title: 6.  XML Element Definitions
- contents:
  - "7.  Security Considerations\n   This extension does not introduce any new security
    concerns beyond\n   those already described in HTTP and WebDAV.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgments\n   The following individuals contributed their ideas and
    support for\n   writing this specification: Bernard Desruisseaux, Werner Donne,
    Mike\n   Douglass, Ciny Joy, Andrew McMillan, Julian Reschke, and Wilfredo\n   Sanchez.
    \ We would like to thank the Calendaring and Scheduling\n   Consortium for facilitating
    interoperability testing for early\n   implementations of this specification.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3253]  Clemm, G., Amsden, J., Ellison,
      T., Kaler, C., and J.\n              Whitehead, \"Versioning Extensions to WebDAV\n
      \             (Web Distributed Authoring and Versioning)\", RFC 3253,\n              March
      2002.\n   [RFC3744]  Clemm, G., Reschke, J., Sedlar, E., and J. Whitehead, \"Web\n
      \             Distributed Authoring and Versioning (WebDAV)\n              Access
      Control Protocol\", RFC 3744, May 2004.\n   [RFC4918]  Dusseault, L., \"HTTP
      Extensions for Web Distributed\n              Authoring and Versioning (WebDAV)\",
      RFC 4918, June 2007.\n   [RFC5323]  Reschke, J., Reddy, S., Davis, J., and A.
      Babich, \"Web\n              Distributed Authoring and Versioning (WebDAV) SEARCH\",\n
      \             RFC 5323, November 2008.\n   [W3C.REC-xml-20081126]\n              Sperberg-McQueen,
      C., Yergeau, F., Paoli, J., Maler, E.,\n              and T. Bray, \"Extensible
      Markup Language (XML) 1.0 (Fifth\n              Edition)\", World Wide Web Consortium\n
      \             Recommendation REC-xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC4791]  Daboo, C., Desruisseaux, B., and
      L. Dusseault,\n              \"Calendaring Extensions to WebDAV (CalDAV)\",
      RFC 4791,\n              March 2007.\n   [RFC5842]  Clemm, G., Crawford, J.,
      Reschke, J., and J. Whitehead,\n              \"Binding Extensions to Web Distributed
      Authoring and\n              Versioning (WebDAV)\", RFC 5842, April 2010.\n
      \  [RFC6352]  Daboo, C., \"CardDAV: vCard Extensions to Web Distributed\n              Authoring
      and Versioning (WebDAV)\", RFC 6352, August 2011.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Backwards-Compatible Handling of Depth\n   In prior draft versions
    of this specification, the Depth request\n   header was used instead of the DAV:sync-level
    element to indicate the\n   \"scope\" of the synchronization request.  Servers
    that wish to be\n   backwards compatible with clients conforming to the older\n
    \  specification should do the following: if a DAV:sync-level element is\n   not
    present in the request body, use the Depth header value as the\n   equivalent
    value for the missing DAV:sync-level element.\n"
  title: Appendix A.  Backwards-Compatible Handling of Depth
- contents:
  - "Appendix B.  Example of a Client Synchronization Approach\n   This appendix gives
    an example of how a client might accomplish\n   collection synchronization using
    the WebDAV sync report defined in\n   this specification.  Note that this is provided
    purely as an example,\n   and is not meant to be treated as a normative \"algorithm\"
    for client\n   synchronization.\n   This example assumes a WebDAV client interacting
    with a WebDAV server\n   supporting the sync report.  The client keeps a local
    cache of\n   resources in a targeted collection, \"/collection/\".  Local changes\n
    \  are assumed to not occur.  The client is only tracking changes to the\n   immediate
    children of the collection resource.\n      ** Initial State **\n      The client
    starts out with an empty local cache.\n      The client starts out with no DAV:sync-token
    stored for\n      \"/collection/\".\n      ** Initial Synchronization **\n      The
    client issues a sync report request to the server with an\n      empty DAV:sync-token
    element, and DAV:sync-level set to \"1\".  The\n      request asks for the server
    to return the DAV:getetag WebDAV\n      property for each resource it reports.\n
    \     The server returns a response containing the list of current\n      resources
    (with their associated DAV:getetag properties) as well\n      as a new DAV:sync-token
    value.\n      The client associates the new DAV:sync-token value with the\n      collection.\n
    \     For each reported resource, the client creates a set of (resource\n      path,
    DAV:getetag) tuples.\n      For each tuple, the client issues an HTTP GET request
    to the\n      server to retrieve its content, and updates the (resource path,\n
    \     DAV:getetag) entry in its local cache for that resource with the\n      ETag
    response header value returned in the GET request.\n      ** Routine Synchronization
    **\n      The client issues a sync report request to the server with the\n      DAV:sync-token
    set to the current cached value from the last sync,\n      and DAV:sync-level
    set to \"1\".  The request asks for the server to\n      return the DAV:getetag
    WebDAV property for each resource it\n      reports.\n      The server returns
    a response containing the list of changes as\n      well as a new DAV:sync-token
    value.\n      The client associates the new DAV:sync-token value with the\n      collection.\n
    \       * Process Removed Resources *\n      For each resource reported with a
    404 response status, the client\n      removes the corresponding resource from
    its local cache.\n        * Process Resources *\n      For each remaining reported
    resource, the client creates a new set\n      of (resource path, DAV:getetag)
    tuples.\n      The client then determines which resources are in the new set but\n
    \     not in the current cache, and which resources are in the new set\n      and
    the current cache but have a different DAV:getetag value.  For\n      each of
    those, the client issues an HTTP GET request to the server\n      to retrieve
    the resource content, and updates the (resource path,\n      DAV:getetag) entry
    in its local cache for that resource with the\n      ETag response header value
    returned in the GET request.\n"
  title: Appendix B.  Example of a Client Synchronization Approach
- contents:
  - "Authors' Addresses\n   Cyrus Daboo\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino,
    CA  95014\n   USA\n   EMail: cyrus@daboo.name\n   URI:   http://www.apple.com/\n
    \  Arnaud Quillaud\n   Oracle Corporation\n   180, Avenue de l'Europe\n   Saint
    Ismier cedex  38334\n   France\n   EMail: arnaud.quillaud@oracle.com\n   URI:
    \  http://www.oracle.com/\n"
  title: Authors' Addresses
