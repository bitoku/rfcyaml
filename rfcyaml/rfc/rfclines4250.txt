Abstract This document defines the instructions to the IANA and the initial state of the IANA assigned numbers for the Secure Shell (SSH) protocol.
It is intended only for the initialization of the IANA registries referenced in the set of SSH documents.
This document does not define any new protocols.
It is intended only to create the initial state of the IANA databases for the SSH protocol and also contains instructions for future assignments.
Except for one HISTORIC algorithm generally regarded as obsolete, this document does not define any new protocols or number ranges not already defined in: [SSH ARCH], [SSH TRANS], [SSH USERAUTH], [SSH CONNECT].
The major original contributors of this set of documents have been: Tatu Ylonen, Tero Kivinen, Timo J. Rinne, Sami Lehtinen (all of SSH Communications Security Corp), and Markku Juhani O. Saarinen (University of Jyvaskyla).
Darren Moffat was the original editor of this set of documents and also made very substantial contributions.
Many people contributed to the development of this document over the years.
People who should be acknowledged include Mats Andersson, Ben Harris, Bill Sommerfeld, Brent McClure, Niels Moller, Damien Miller, Derek Fawcus, Frank Cusack, Heikki Nousiainen, Jakob Schlyter, Jeff Van Dyke, Jeffrey Altman, Jeffrey Hutzelman, Jon Bright, Joseph Galbraith, Ken Hornstein, Markus Friedl, Martin Forssen, Nicolas Williams, Niels Provos, Perry Metzger, Peter Gutmann, Simon Josefsson, Simon Tatham, Wei Dai, Denis Bider, der Mouse, and Tadayoshi Kohno.
Listing their names here does not mean that they endorse this document, but that they have contributed to it.
Conventions Used in This Document 3.1.
All documents related to the SSH protocols shall use the keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "
SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" to describe requirements.
These keywords are to be interpreted as described in [RFC2119].
The keywords "PRIVATE USE", "HIERARCHICAL ALLOCATION", "FIRST COME FIRST SERVED", "EXPERT REVIEW", "SPECIFICATION REQUIRED", "IESG APPROVAL", "IETF CONSENSUS", and "STANDARDS ACTION" that appear in this document when used to describe namespace allocation are to be interpreted as described in [RFC2434].
These designations are repeated in this document for clarity.
PRIVATE USE For private or local use
only, with the type and purpose defined by the local site.
No attempt is made to prevent multiple sites from using the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments and assignments are not generally useful for interoperability.
HIERARCHICAL ALLOCATION Delegated managers can assign values provided they have been given control over that part of the name space.
IANA controls the higher levels of the namespace according to one of the other policies.
FIRST COME FIRST SERVED Anyone can obtain an assigned number, so long as they provide a point of contact and a brief description of what the value would be used for.
For numbers, the exact value is generally assigned by the IANA; with names, specific names are usually requested.
EXPERT REVIEW approval by a Designated Expert is required.
SPECIFICATION REQUIRED Values and their meaning must be documented in an RFC or other permanent and readily available reference, in sufficient detail so that interoperability between independent implementations is possible.
IESG APPROVAL New assignments must be approved by the IESG, but there is no requirement that the request be documented in an RFC (though the IESG has discretion to request documents or other supporting materials on a case by case basis).
IETF CONSENSUS New values are assigned through the IETF consensus process.
Specifically, new assignments are made via RFCs approved by the IESG.
Typically, the IESG will seek input on prospective assignments from appropriate persons (e.g., a relevant Working Group if one exists).
STANDARDS ACTION Values are assigned only for Standards Track RFCs approved by the IESG.
3.3.  Protocol Fields and Values Protocol fields and possible values to fill them are defined in this set of documents.
Protocol fields will be defined in the message definitions.
As an example, SSH MSG CHANNEL DATA is defined as follows.
SSH MSG CHANNEL DATA uint32    recipient channel string    data Throughout these documents
, when the fields are referenced, they will appear within single quotes.
When values to fill those fields are referenced, they will appear within double quotes.
Using the above example, possible values for 'data' are "foo" and "bar".
This entire document is the IANA considerations for the SSH protocol, as defined in [SSH ARCH], [SSH TRANS], [SSH USERAUTH], [SSH CONNECT].
This section contains conventions used in naming the namespaces, the initial state of the registry, and instructions for future assignments.
The Message Number is a byte value that describes the payload of a packet.
Conventions Protocol packets have message numbers in the range 1 to 255.
These numbers are allocated as follows: Transport layer protocol: 1 to 19    Transport layer generic (e.g., disconnect, ignore, debug, etc.)
20 to 29   Algorithm negotiation 30 to 49
Key exchange method specific (numbers can be reused for different authentication methods)
User authentication protocol: 50 to 59   User authentication generic 60 to 79   User authentication method specific (numbers can be reused for different authentication methods)
Connection protocol: 80 to 89   Connection protocol generic 90 to 127
Channel related messages Reserved for client protocols: 128 to 191 Reserved Local extensions: 192 to 255 Local extensions 4.1.2.
The following table identifies the initial assignments of the Message ID values.
SSH MSG CHANNEL OPEN FAILURE
Requests for assignments of new message numbers in the range of 1 to 29, 50 to 59, and 80 to 127 MUST be done through the STANDARDS ACTION method, as described in [RFC2434].
The meanings of message numbers in the range of 30 to 49 are specific to the key exchange method in use, and their meaning will be specified by the definition of that method.
The meanings of message numbers in the range of 60 to 79 are specific to the user authentication method in use, and their meaning will be specified by the definition of that method.
Requests for assignments of new message numbers in the range of 128 to 191 MUST be done through the IETF CONSENSUS method, as described in [RFC2434].
The IANA will not control the message numbers in the range of 192 through 255.
This range will be left for PRIVATE USE.
Disconnection Messages Reason Codes and Descriptions
The Disconnection Message 'reason code' is a uint32 value.
The associated Disconnection Message 'description' is a human readable message that describes the disconnect reason.
Conventions Protocol packets containing the SSH MSG DISCONNECT message MUST have Disconnection Message 'reason code' values in the range of 0x00000001 to 0xFFFFFFFF.
These are described in [SSH TRANS].
The following table identifies the initial assignments of the SSH MSG DISCONNECT 'description' and 'reason code' values.
HOST NOT ALLOWED TO CONNECT
12 SSH DISCONNECT AUTH CANCELLED
NO MORE AUTH METHODS AVAILABLE
Disconnection Message 'reason code' values MUST be assigned sequentially.
Requests for assignments of new Disconnection Message 'reason code' values, and their associated Disconnection Message 'description' text, in the range of 0x00000010 through 0xFDFFFFFF, MUST be done through the IETF CONSENSUS method, as described in [RFC2434].
The IANA will not assign Disconnection Message 'reason code' values in the range of 0xFE000000 through 0xFFFFFFFF.
Disconnection Message 'reason code' values in that range are left for PRIVATE USE, as described in [RFC2434].
Channel Connection Failure Reason Codes and Descriptions
The Channel Connection Failure 'reason code' is a uint32 value.
The associated Channel Connection Failure 'description' text is a human  readable message that describes the channel connection failure reason.
This is described in [SSH CONNECT].
Conventions Protocol packets containing the SSH MSG CHANNEL OPEN FAILURE message MUST have Channel Connection Failure 'reason code' values in the range of 0x00000001 to 0xFFFFFFFF.
The initial assignments for the 'reason code' values and 'description' values are given in the table below.
Note that the values for the 'reason code' are given in decimal format for readability, but they are actually uint32 values.
Future Assignments Channel Connection Failure 'reason code' values MUST be assigned sequentially.
Requests for assignments of new Channel Connection Failure 'reason code' values, and their associated Channel Connection Failure 'description string', in the range of 0x00000005 to 0xFDFFFFFF MUST be done through the IETF CONSENSUS method, as described in [RFC2434].
The IANA will not assign Channel Connection Failure 'reason code' values in the range of 0xFE000000 to 0xFFFFFFFF.
Channel Connection Failure 'reason code' values in that range are left for PRIVATE USE, as described in [RFC2434].
Notes about the PRIVATE USE Range
While it is understood that the IANA will have no control over the range of 0xFE000000 to 0xFFFFFFFF, this range will be split in two parts and administered by the following conventions.
The range of 0xFE000000 to 0xFEFFFFFF is to be used in conjunction with locally assigned channels.
For example, if a channel is proposed with a 'channel type' of "example session@example.com" but fails, then the server will respond with either a 'reason code' assigned by the IANA (as listed above and in the range of 0x00000001 to 0xFDFFFFFF), or with a locally assigned value in the range of 0xFE000000 to 0xFEFFFFFF.
Naturally, if the server does not understand the proposed 'channel type', even if it is a locally defined 'channel type', then the 'reason code' MUST be 0x00000003, as described above.
If the server does understand the 'channel type', but the channel still fails to open, then the server SHOULD respond with a locally assigned 'reason code' value that is consistent with the proposed local 'channel type'.
It is assumed that practitioners will first attempt to use the IANA  assigned 'reason code' values and then document their locally assigned 'reason code' values.
There are no restrictions or suggestions for the range starting with 0xFF.
No interoperability is expected for anything used in this range.
Essentially, it is for experimentation.
Extended Channel Data Transfer data type code and Data
The Extended Channel Data Transfer 'data type code' is a uint32 value.
The associated Extended Channel Data Transfer 'data' is a human readable message that describes the type of data allowed to be transferred in the channel.
Conventions Protocol packets containing the SSH MSG CHANNEL EXTENDED DATA message MUST have Extended Channel Data Transfer 'data type code' values in the range of 0x00000001 to 0xFFFFFFFF.
This is described in [SSH CONNECT].
The initial assignments for the 'data type code' values and 'data' values are given in the table below.
Note that the value for the 'data type code' is given in decimal format for readability, but the values are actually uint32 values.
Extended Channel Data Transfer 'data type code' values MUST be assigned sequentially.
Requests for assignments of new Extended Channel Data Transfer 'data type code' values, and their associated Extended Channel Data Transfer 'data' strings, in the range of 0x00000002 to 0xFDFFFFFF, MUST be done through the IETF CONSENSUS method, as described in [RFC2434].
The IANA will not assign Extended Channel Data Transfer 'data type code' values in the range of 0xFE000000 to 0xFFFFFFFF.
Extended Channel Data Transfer 'data type code' values in that range are left for PRIVATE USE, as described in [RFC2434].
Pseudo Terminal Encoded Terminal Modes SSH MSG CHANNEL REQUEST messages with a "pty req" string MUST contain 'encoded terminal modes'.
The 'encoded terminal modes' value is a byte stream of opcode argument pairs.
Conventions Protocol packets containing the SSH MSG CHANNEL REQUEST message with a "pty req" string MUST contain an 'encoded terminal modes' value.
The opcode values consist of a single byte and are in the range of 1 to 255.
Opcodes 1 to 159 have a uint32 argument.
Opcodes 160 to 255 are not yet defined.
The following table identifies the initial assignments of the opcode values that are used in the 'encoded terminal modes' value.
Similarly for the other characters.
Not all of these characters are supported on all systems.
The quit character (sends SIGQUIT signal on POSIX systems).
Additional end of line character.
Continues paused output (normally control Q).
18    VDISCARD    Toggles the flushing of terminal output.
The parameter SHOULD be 0 if this flag is FALSE, and 1 if it is TRUE.
Strip 8th bit off characters.
Any char will restart after stop.
even if ECHO is off.
Newline performs a carriage return (output).
128 TTY OP ISPEED  Specifies the input baud rate in bits per second.
129 TTY OP OSPEED  Specifies the output baud rate in bits per second.
Requests for assignments of new opcodes and their associated arguments MUST be done through the IETF CONSENSUS method, as described in [RFC2434].
In the following sections, the values for the name spaces are textual.
The conventions and instructions to the IANA for future assignments are given in this section.
The initial assignments are given in their respective sections.
Names are case sensitive, and MUST NOT be longer than 64 characters.
A provision is made here for locally extensible names.
The IANA will not register, and will not control, names with the at sign in them.
Names with the at sign in them will have the format of "name@domainname" (without the double quotes) where the part preceding the at sign is the name.
They MUST have only a single at sign in them.
The part following the at sign MUST be a valid, fully qualified internet domain name [RFC1034] controlled by the person or organization defining the name.
Names are case sensitive, and MUST NOT be longer than 64 characters.
It is up to each domain how it manages its local namespace.
It has been noted that these names resemble STD 11 [RFC0822] email addresses.
This is purely coincidental and has nothing to do with STD 11 [RFC0822].
An example of a locally defined name is "ourcipher cbc@example.com" (without the double quotes).
Future Assignments of Names Requests for assignments of new names MUST be done through the IETF CONSENSUS method, as described in [RFC2434].
The 'service name' is used to describe a protocol layer.
The following table lists the initial assignments of the 'service name' values.
The Authentication Method Name is used to describe an authentication method for the "ssh userauth" service [SSH USERAUTH].
The following table identifies the initial assignments of the Authentication Method Names.
The following table lists the initial assignments to the Connection Protocol Type and Request names.
The following table lists the initial assignments of the Connection Protocol Channel Types.
[SSH CONNECT, Section 6.1] x11
[SSH CONNECT, Section 7.2] 4.9.2.
Connection Protocol Global Request Names
The following table lists the initial assignments of the Connection Protocol Global Request Names.
[SSH CONNECT, Section 7.1] cancel tcpip forward
[SSH CONNECT, Section 7.1] 4.9.3.
Connection Protocol Channel Request Names
The following table lists the initial assignments of the Connection Protocol Channel Request Names.
Initial Assignment of Signal Names
The following table lists the initial assignments of the Signal Names.
There are no initial assignments of the Connection Protocol Subsystem Names.
The name "diffie hellman group1 sha1" is used for a key exchange method using an Oakley group, as defined in [RFC2409].
SSH maintains its own group identifier space, which is logically distinct from Oakley [RFC2412] and IKE; however, for one additional group, the Working Group adopted the number assigned by [RFC3526], using "diffie hellman group14 sha1" for the name of the second defined group.
Implementations should treat these names as opaque identifiers and should not assume any relationship between the groups used by SSH and the groups defined for IKE.
The following table identifies the initial assignments of the key exchange methods.
[SSH TRANS, Section 8.2] 4.11.
The following table identifies the initial assignment of the Encryption Algorithm Names.
[SSH TRANS, Section 6.3] twofish cbc
See page 4 of [FIPS 46 3
The following table identifies the initial assignments of the MAC Algorithm Names.
[SSH TRANS, Section 6.4] hmac sha1 96
The following table identifies the initial assignments of the Public Key Algorithm names.
[SSH TRANS, Section 6.6] pgp sign rsa
The following table identifies the initial assignments of the Compression Algorithm names.
This protocol provides a secure encrypted channel over an insecure network.
Full security considerations for this protocol are provided in [SSH ARCH].
Trademark Notice "ssh" is a registered trademark in the United States and/or other countries.
