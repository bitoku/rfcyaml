- title: __initial_text__
  contents:
  - '          Understanding Apple''s Back to My Mac (BTMM) Service

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the implementation of Apple Inc.'s Back\
    \ to My\n   Mac (BTMM) service.  BTMM provides network connectivity between\n\
    \   devices so that a user can perform file sharing and screen sharing\n   among\
    \ multiple computers at home, at work, or on the road.  The\n   implementation\
    \ of BTMM addresses the issues of single sign-on\n   authentication, secure data\
    \ communication, service discovery, and\n   end-to-end connectivity in the face\
    \ of Network Address Translators\n   (NATs) and mobility of devices.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6281.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  An Overview of Back to My Mac  . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Encoding Host Information in DNS Resource Records  . .\
    \ . . . .  5\n   4.  NAT Traversal  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n     4.1.  Introduction to NAT-PMP  . . . . . . . . . . . . . . .\
    \ . .  6\n     4.2.  Requesting/Removing a Port Mapping . . . . . . . . . . .\
    \ .  7\n     4.3.  Obtaining NAT Box's Public IP Address  . . . . . . . . . .\
    \  7\n     4.4.  Unsupported Scenarios  . . . . . . . . . . . . . . . . . .  8\n\
    \   5.  Handling IP Address or Port Changes  . . . . . . . . . . . . .  8\n  \
    \   5.1.  Updating Local Interfaces and Tunnels  . . . . . . . . . .  8\n    \
    \ 5.2.  Dynamically Updating Reachability Information  . . . . . .  8\n     5.3.\
    \  Getting Up-to-Date DNS Resource Records without Polling  .  9\n   6.  IPv6\
    \ ULA as Host ID  . . . . . . . . . . . . . . . . . . . . . 11\n     6.1.  The\
    \ Need for a Host Identifier . . . . . . . . . . . . . . 11\n     6.2.  What to\
    \ Use as Host Identifiers  . . . . . . . . . . . . . 11\n     6.3.  IPv6 ULA Configuration\
    \ . . . . . . . . . . . . . . . . . . 11\n   7.  Securing Communication . . .\
    \ . . . . . . . . . . . . . . . . . 12\n     7.1.  Authentication for Connecting\
    \ to Remote Host . . . . . . . 12\n     7.2.  Authentication for DNS Exchanges\
    \ . . . . . . . . . . . . . 12\n     7.3.  IPsec for Secure End-to-End Data Communication\
    \ . . . . . . 13\n   8.  Security Considerations  . . . . . . . . . . . . . .\
    \ . . . . . 14\n   9.  References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 14\n     9.1.  Normative Reference  . . . . . . . . . . . . . . . .\
    \ . . . 14\n     9.2.  Informative References . . . . . . . . . . . . . . . .\
    \ . . 15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Apple Inc.'s Back to My Mac (BTMM) service was first shipped\
    \ with MAC\n   OS X 10.5 release in October 2007; since then, it has been widely\n\
    \   used.  BTMM provides an integrated solution to host mobility support,\n  \
    \ NAT traversal, and secure end-to-end data delivery through a\n   combination\
    \ of several existing protocols and software tools instead\n   of designing new\
    \ protocols.  Note that we generally refer to Network\n   Address Port Translation\
    \ (NAPT) as NAT in this document.  This\n   document describes the implementation\
    \ of BTMM and describes how BTMM\n   works in MAC OS X version 10.5.x; BTMM continues\
    \ to evolve over time.\n   BTMM provides secure transport connections among a\
    \ set of devices\n   that may be located over a dynamic and heterogeneous network\n\
    \   environment.  Independent from whether a user is traveling and\n   accessing\
    \ the Internet via airport WiFi or staying at home behind a\n   NAT, BTMM allows\
    \ the user to connect to any Mac hosts with a click,\n   after which the user\
    \ can share files with remote computers or control\n   the remote host through\
    \ screen sharing.  When a user changes\n   locations and thus also changes the\
    \ IP address of his computer (e.g.,\n   roaming around with a laptop and receiving\
    \ dynamically allocated IP\n   address), BTMM provides a means for the roaming\
    \ host to update its\n   reachability information to keep it reachable by the\
    \ user's other Mac\n   devices.  BTMM maintains end-to-end transport connections\
    \ in the face\n   of host IP address changes through the use of unique host\n\
    \   identifiers.  It also provides a means to reach devices behind a NAT.\n  \
    \ BTMM achieves the above functions mainly by integrating a set of\n   existing\
    \ protocols and software tools.  It uses DNS-based Service\n   Discovery [DNS-SD]\
    \ to announce host reachability information, dynamic\n   DNS update [RFC2136]\
    \ to refresh the DNS resource records (RRs) when a\n   host detects network changes,\
    \ and DNS Long-Lived Queries (LLQs)\n   [DNS-LLQ] to notify hosts immediately\
    \ when the answers to their\n   earlier DNS queries have changed.  BTMM uses the\
    \ IPv6 Unique Local\n   Address (ULA) [RFC4193] as the host identifier and employs\
    \ the NAT\n   Port Mapping Protocol (PMP) [NAT-PMP] to assist NAT traversal. \
    \ It\n   uses Kerberos [RFC4120] for end-to-end authentication and uses IPsec\n\
    \   [RFC4301] to secure data communications between two end hosts.\n"
- title: 2.  An Overview of Back to My Mac
  contents:
  - "2.  An Overview of Back to My Mac\n   To keep an established TCP connection running\
    \ while either of the two\n   end hosts may change its IP address requires that\
    \ the connection use\n   unique and stable identifiers that do not change with\
    \ the addresses,\n   and that a mapping service exists between these stable identifiers\n\
    \   and dynamically changing IP addresses.  BTMM uses DNS to provide this\n  \
    \ mapping service.  Figure 1 provides a sketch of the basic components\n   in\
    \ the BTMM implementation.\n           DDNS update    +--------+  DDNS update\n\
    \         +--------------->|        |<-------+\n         |                |  DNS\
    \   |        |\n         |      LLQ       |        | LLQ    |\n         |    +---------->|\
    \        |<----+  |\n         |    |           |        |     |  |\n         |\
    \    |           +--------+     |  |\n         |    |                        \
    \  |  |            +----------+\n         |    V                      +---+--+----+\
    \       |          |\n       +-+-------+                   |           +-------|\
    \          |\n       |Endhost N|     Tunnel        |    NAT    +------>|Endhost\
    \ M |\n       |         |<=====================================>|          |\n\
    \       +---------+                   |           |       |          |\n     \
    \                                +-----------+       +----------+\n          \
    \                       Figure 1\n   Apple Inc. operates a DNS domain called members.me.com\
    \ and provides\n   DNS name resolution services for all the subdomains underneath.\n\
    \   Every BTMM user is assigned a DNS subdomain under members.me.com,\n   e.g.,\
    \ alice.members.me.com.  The user then assigns a DNS name for\n   each of her\
    \ computers, e.g., myMacPro.alice.members.me.com.  The\n   reachability information\
    \ of each of the user's hosts is encoded in\n   DNS resource records and published\
    \ in the DNS.  For example, if the\n   host myMacPro.alice.members.me.com has\
    \ a public IPv4 address P, P\n   represents the reachability information to the\
    \ host.  On the other\n   hand, if the host is behind a NAT, its reachability\
    \ information is\n   composed of the public IP address of the NAT box and the\
    \ port number\n   opened on the NAT to reach the internal host.  In this case,\
    \ both the\n   public IP address of the NAT box and the port number are encoded\
    \ into\n   DNS using DNS SRV records [RFC2782], as we explain in the next\n  \
    \ section.  When a user logs in from a host M, M starts updating the\n   DNS server\
    \ about its reachability information.  If the user has\n   multiple hosts, M also\
    \ sets up LLQs with the DNS server for her other\n   hosts, so that the DNS server\
    \ can push any reachability changes of\n   these other hosts to M immediately.\n\
    \   To obtain a unique identifier for each host, BTMM automatically\n   generates\
    \ an IPv6 ULA for each host as its identifier at machine boot\n   time.  This\
    \ design choice allows BTMM to reuse all the existing code\n   of applications\
    \ and protocols that already support IPv6.  To ensure\n   end-to-end data security,\
    \ BTMM leverages the existing IPsec to\n   protect the communications and Kerberos\
    \ to perform end-to-end\n   authentication.\n   BTMM provides an IPv6 socket interface\
    \ to user applications.  It then\n   wraps the IPv6 packets with IPsec Encapsulating\
    \ Security Payload\n   (ESP) [RFC4303] and encapsulates the packets in a UDP/IP\
    \ tunnel, as\n   illustrated in Figure 2.  Note that this is the case even when\
    \ both\n   ends have public IPv4 addresses.\n    +-------------+------------+------------+---------------+\n\
    \    | IPv4 Header | UDP Header | IPsec ESP  | IPv6 Packet   |\n    +-------------+------------+------------+---------------+\n\
    \                                 Figure 2\n   The following sections describe\
    \ each of the basic components in BTMM.\n   Since this document is intended to\
    \ be an informal description of the\n   BTMM implementation, it does not include\
    \ all the details (e.g.,\n   packet format, error code, etc) of each component.\n"
- title: 3.  Encoding Host Information in DNS Resource Records
  contents:
  - "3.  Encoding Host Information in DNS Resource Records\n   For each host, BTMM\
    \ encodes into DNS both the host identifier and its\n   current location information.\
    \  BTMM stores the host identifier (IPv6\n   ULA) in a DNS AAAA RR and uses a\
    \ DNS SRV RR [RFC2782] to represent\n   the host's current location information.\
    \  For hosts behind a NAT box,\n   the use of a DNS SRV RR allows BTMM to store\
    \ both the public IP\n   address of the NAT box and also the port opened for the\
    \ host.\n   The SRV RR consists of eight fields: _Service._Proto.Name, Time to\n\
    \   Live (TTL), Class, Type, Priority, Weight, Port, and Target.  BTMM\n   uses\
    \ SRV RRs in the following way.\n   Service is the symbolic name of the desired\
    \ service.  In the BTMM\n   case, the service is named \"autotunnel\", which means\
    \ that the\n   information contained in the SRV RR is used by BTMM to automatically\n\
    \   set up a tunnel between two end hosts.\n   Proto is the symbolic name of the\
    \ desired protocol.  In this\n   document, the protocol is \"_udp\".  BTMM uses\
    \ \"_udp\" to tunnel packets\n   between the two ends to achieve NAT traversal.\n\
    \   Name is the domain this RR refers to.  When a user subscribes to BTMM\n  \
    \ service with the username \"alice\", a domain name\n   \"alice.members.me.com\"\
    \ is assigned to her.  The user assigns a name,\n   such as \"myMacPro\", to each\
    \ host that is appended to the assigned\n   domain name.  Hence, the first part\
    \ of the SRV record would look like\n   this: \"_autotunnel._udp.myMacPro.alice.members.me.com\"\
    .\n   Priority and Weight are set to zero, since there is only one instance\n\
    \   that provides autotunnel service for each name in BTMM.\n   Port is the port\
    \ opened on the target host of the service.  In BTMM,\n   most likely it is the\
    \ external port a NAT opened for the host behind\n   it.  Knowing the port number\
    \ is the basic requirement for NAT\n   traversal via UDP encapsulation.  If the\
    \ host is not behind a NAT,\n   the port opened on the host for autotunnel service\
    \ is placed here.\n   Target is the canonical hostname of the host that provides\
    \ the\n   service.  In BTMM, it refers to a name constructed by appending the\n\
    \   user's domain name to an autotunnel label, which identifies the host\n   and\
    \ is not generally user-visible.  The autotunnel label is created\n   by concatenating\
    \ \"AutoTunnel\" with the IEEE EUI-64 identifier [EUI64]\n   of the primary network\
    \ interface.  Hence, an example for the Target\n   field would look like this:\
    \ AutoTunnel-00-22-69-FF-FE-8E-34-\n   2A.alice.members.me.com.  After obtaining\
    \ the SRV RR, the remote host\n   can query the A RR for the Target and get the\
    \ external tunnel address\n   for the BTMM client during the NAT Traversal.\n"
- title: 4.  NAT Traversal
  contents:
  - "4.  NAT Traversal\n   BTMM's NAT traversal function requires NAT router devices\
    \ to support\n   NAT-PMP or the Universal Plug and Play (UPnP) Internet Gateway\
    \ Device\n   (IGD).  NAT-PMP is the alternative introduced by Apple Inc. to the\n\
    \   more common IGD Standardized Device Control Protocol [IGD] as\n   published\
    \ in the UPnP Forum.  Both NAT-PMP and IGD require the NAT\n   devices to be able\
    \ to open a port for inbound traffic to some host\n   behind it and to inform\
    \ the host about its public IP address.  The\n   differences between IGD and NAT-PMP\
    \ can be found in [NAT-PMP].  This\n   section focuses on NAT-PMP.\n"
- title: 4.1.  Introduction to NAT-PMP
  contents:
  - "4.1.  Introduction to NAT-PMP\n   NAT-PMP is a protocol that is designed specifically\
    \ to handle the NAT\n   traversal without manual configuration.  When a host determines\
    \ that\n   its primary IPv4 address is in one of the private IP address ranges\n\
    \   defined in \"Address Allocation for Private Internets\" [RFC1918], it\n  \
    \ invokes NAT-PMP to communicate with the NAT gateway to request the\n   creation\
    \ of inbound mappings on demand.  Having created a NAT mapping\n   to allow inbound\
    \ traffic, the client host then publishes its NAT\n   box's public IP address\
    \ and external port number in a DNS server.\n   A host sends its Port Mapping\
    \ Protocol request to the default\n   gateway, which means that by default, this\
    \ protocol is designed for\n   small home networks where the host's default gateway\
    \ is the NAT\n   router.  If the host finds that NAT-PMP or UPnP IGD is not available\n\
    \   on its network, it would proceed under the assumption that the\n   network\
    \ is a public network.\n"
- title: 4.2.  Requesting/Removing a Port Mapping
  contents:
  - "4.2.  Requesting/Removing a Port Mapping\n   To request a port mapping, the client\
    \ host sends its request packet\n   via UDP to port 5351 of its configured gateway\
    \ address and waits 250\n   ms for a response [NAT-PMP].  If no response is received\
    \ after 250\n   ms, the host repeats the process with exponential back-off.\n\
    \   While requesting the port mapping, the host can specify the desired\n   external\
    \ port (e.g., the port that is identical to the internal port\n   opened on the\
    \ host), but the NAT device is not obliged to allocate\n   the desired one.  If\
    \ such a port is not available, the NAT device\n   responds with another port.\
    \  The primary reason for allowing the host\n   to request a specific port is\
    \ to help recovery from a NAT device\n   crash by allowing the host to request\
    \ the same port number used\n   before the crash.  This simple mechanism allows\
    \ the end hosts\n   (instead of the NAT box) to keep the mapping states, which\
    \ turns hard\n   state in the network into soft state, and enables automatic recovery\n\
    \   whenever possible.\n   The default port-mapping lifetime is 3600 seconds.\
    \  The host tries to\n   renew the mapping every 1800 seconds.  The renewal message\
    \ sent by\n   the client host, whether for the purpose of extending the lease\
    \ or\n   recreating mappings after the NAT device reboots, is the same as the\n\
    \   message requesting a port mapping.\n   A mapping may be removed in a variety\
    \ of ways.  If a client host\n   fails to renew a mapping, the mapping is automatically\
    \ deleted when\n   its lifetime expires.  If the client host's DHCP address lease\n\
    \   expires, the NAT device also automatically deletes the mapping.  A\n   client\
    \ host can also send an explicit packet to request the deletion\n   of a mapping\
    \ that is no longer needed.\n"
- title: 4.3.  Obtaining NAT Box's Public IP Address
  contents:
  - "4.3.  Obtaining NAT Box's Public IP Address\n   To determine the public IP address\
    \ of the NAT, the client host also\n   sends the query packet to port 5351 of\
    \ the configured gateway\n   address.  The NAT device responds with a packet containing\
    \ the public\n   IP address of NAT.\n   In case the public IP address of the NAT\
    \ changes, the NAT gateway\n   sends a gratuitous response to the link-local multicast\
    \ address\n   224.0.0.1, port 5350 to notify the clients about the new IP address,\n\
    \   and the host can then update its DNS SRV record to reflect its new\n   reachability\
    \ as we describe in the next section.\n"
- title: 4.4.  Unsupported Scenarios
  contents:
  - "4.4.  Unsupported Scenarios\n   There are a number of situations where NAT-PMP\
    \ (and consequently\n   BTMM) does not work.\n"
- title: 4.4.1.  NAT behind NAT
  contents:
  - "4.4.1.  NAT behind NAT\n   Some people's primary IP address assigned by their\
    \ ISPs may itself be\n   a NAT address.  In addition, some people may have a public\
    \ IP\n   address, but may put their hosts (perhaps unknowingly) behind\n   multiple\
    \ nested NAT boxes.  NAT traversal cannot be achieved with\n   NAT-PMP in such\
    \ situations.\n"
- title: 4.4.2.  NATs and Routed Private Networks
  contents:
  - "4.4.2.  NATs and Routed Private Networks\n   In some cases, a site may run multiple\
    \ subnets in the private network\n   behind a NAT gateway.  Such subnetting breaks\
    \ the assumption of NAT-\n   PMP protocol because a host's default router is not\
    \ necessarily the\n   device performing NAT.\n"
- title: 5.  Handling IP Address or Port Changes
  contents:
  - "5.  Handling IP Address or Port Changes\n   This section describes how BTMM handles\
    \ IP address or port number\n   changes, so that the hosts of the same user can\
    \ find each other and\n   keep ongoing TCP connections even after the changes\
    \ happen at one or\n   both ends.\n"
- title: 5.1.  Updating Local Interfaces and Tunnels
  contents:
  - "5.1.  Updating Local Interfaces and Tunnels\n   After a BTMM client receives\
    \ the notification about the network\n   changes, it updates the list of active\
    \ interfaces.  Then, the client\n   sends requests to the NAT device (if it is\
    \ behind a NAT) in order to\n   create a port mapping and obtain the new public\
    \ IP address.\n   Next, the BTMM client makes changes to the local autotunnel\n\
    \   interface, i.e., configures the IPv6 interface for the inner address\n   of\
    \ the tunnel.  If there are established tunnels, it scans to find\n   those whose\
    \ local inner/outer addresses have been changed since the\n   tunnel was set up,\
    \ and then puts in the current addresses.\n   With all these done, the BTMM client\
    \ publishes the changes to DNS.\n"
- title: 5.2.  Dynamically Updating Reachability Information
  contents:
  - "5.2.  Dynamically Updating Reachability Information\n   The mobile nature of\
    \ BTMM clients implies that dynamic DNS updates\n   are required if the location\
    \ information of hosts are to be published\n   via DNS.\n   However, a mobile\
    \ host may have dynamically updated an RR but the\n   updated value has not been\
    \ propagated to the authoritative DNS\n   server, leaving stale RRs in the server.\
    \  Hence, Dynamic DNS Update\n   Leases (DDULs) [DDUL] are employed by BTMM to\
    \ minimize the chances of\n   stale RRs.  Note that DDUL controls the lifetime\
    \ of dynamically\n   updated RRs at the authoritative DNS servers, while the RRs'\
    \ TTL\n   values control the cache lifetime at caching resolvers.\n   In case\
    \ of network changes, the RRs of a host are updated immediately\n   after local\
    \ interfaces are properly configured, and after the port\n   mapping and the public\
    \ IP address of the NAT are obtained.  Usually\n   there are 4 types of RRs involved:\
    \ a AAAA RR for updating the new\n   host identifier of the host (possibly the\
    \ same as the old one); an\n   SRV RR for updating the autotunnel service information,\
    \ which\n   includes the new external port; an A RR for updating the new public\n\
    \   IP address; and a TXT RR for describing the autotunnel device\n   information.\
    \  The name for the SRV RR is discussed in Section 3, and\n   the names for the\
    \ A, AAAA, and TXT RRs are specified in the Target\n   field of the SRV RR.  The\
    \ host then constructs and sends an SRV query\n   for the dynamic DNS server to\
    \ which it should send updates.\n   Following our example for alice, it queries\
    \ the SRV RR for _dns-\n   update-tls._udp.alice.members.me.com.  Then, the updates\
    \ are sent to\n   the dynamic DNS server returned in the Target field of query\n\
    \   response.\n   In addition, periodic refreshes are also required by the DDUL\
    \ even in\n   the absence of any network changes.  The update requests contain\
    \ a\n   signed 32-bit integer indicating the lease life in seconds.  To\n   reduce\
    \ network and server load, a minimum lease of 30 minutes is\n   required.  On\
    \ the other hand, to avoid stale information, a lease\n   longer than 2 hours\
    \ is not allowed in BTMM.  The typical length is 90\n   minutes.  The client host\
    \ refreshes the RRs before the lease expires\n   to prevent them from being deleted\
    \ by the server.\n"
- title: 5.3.  Getting Up-to-Date DNS Resource Records without Polling
  contents:
  - "5.3.  Getting Up-to-Date DNS Resource Records without Polling\n   In dynamic\
    \ environments, changes to DNS information can often be\n   frequent.  However,\
    \ since a DNS query only retrieves the RR value\n   available at that instance\
    \ in time, one must continue to query DNS to\n   learn the latest changes.  This\
    \ solution presents the dilemma of\n   choosing a low polling rate that leaves\
    \ the client with stale\n   information or choosing a high polling rate that would\
    \ have an\n   adverse impact on the network and server.\n   To let the hosts that\
    \ care about particular DNS RRs learn the changes\n   quickly and efficiently,\
    \ BTMM uses DNS Long-Lived Queries (LLQs)\n   [DNS-LLQ] to let the DNS server\
    \ notify the client host once any\n   changes are made to the concerned DNS data.\n\
    \   To obtain the LLQ server information, the client issues an SRV query.\n  \
    \ So alice's host issues a query for\n   _dns-llq-tls._udp.alice.members.me.com\
    \ and obtains the server that\n   provides LLQ service.  LLQs are initiated by\
    \ a client and are\n   completed via a four-way handshake: Initial Request, Challenge,\n\
    \   Challenge Response, and ACK + Answers.  During the Challenge phase,\n   the\
    \ DNS server provides a unique identifier for the request, and the\n   client\
    \ is required to echo this identifier in the Challenge Response\n   phase.  This\
    \ handshake provides resilience to packet loss,\n   demonstrates client reachability,\
    \ and reduces denial-of-service\n   attack opportunities.\n   LLQ lease is negotiated\
    \ during the handshake.  In BTMM, the minimum\n   lease is 15 minutes, and the\
    \ maximum lease is 2 hours.  Leases are\n   refreshed before they expire.\n  \
    \ When a change (\"event\") occurs to a name server's domain, the server\n   checks\
    \ if the new or deleted RRs answer any LLQs.  If so, the RRs are\n   sent to the\
    \ LLQ issuers in the form of a gratuitous DNS response.\n   The client acknowledges\
    \ the reception of the notification; otherwise,\n   the server resends the response.\
    \  If a total of 3 transmissions (with\n   exponential backoff) fail, the client\
    \ is considered unreachable, and\n   the LLQ is deleted.\n   A BTMM client then\
    \ updates its tunnels according to the query\n   answers.  The callback function\
    \ for automatically updating tunnels is\n   depicted Figure 3.\n             \
    \             1:  Push Updated AAAA RR       +------------+\n                \
    \   <-----------------------------------  |            |\n                   \
    \    2: Query for autotunnel SRV RR    |            |\n       +--------+  ----------------------------------->\
    \  |            |\n       |        |        3: Reply Updated SRV RR         |\
    \ DNS server |\n       | client |  <-----------------------------------  |   \
    \         |\n       |        |      4: Query for Target in SRV RR     |      \
    \      |\n       +--------+  ----------------------------------->  |         \
    \   |\n                       5: Reply Updated A RR of Target   |            |\n\
    \                   <-----------------------------------  |            |\n   \
    \                                                      +------------+\n      In\
    \ Step 1: Client learns the inner IP address of the tunnel.\n      In Step 3:\
    \ Client learns the port opened for UDP NAT traversal.\n      In Step 5: Client\
    \ learns the public IP address of the remote NAT,\n                 i.e., the\
    \ outer IP address of the tunnel.\n                                 Figure 3\n"
- title: 6.  IPv6 ULA as Host ID
  contents:
  - '6.  IPv6 ULA as Host ID

    '
- title: 6.1.  The Need for a Host Identifier
  contents:
  - "6.1.  The Need for a Host Identifier\n   BTMM needs to assign a topology-independent\
    \ identifier to each client\n   host for the following reasons.  First, two end\
    \ hosts may wish to\n   have the established TCP connections survive network changes.\n\
    \   Second, sometimes one needs a constant identifier to be associated\n   with\
    \ a key so that the Security Association can survive the location\n   changes.\n\
    \   The above needs for a host identifier impose very little constraint\n   on\
    \ the properties of the identifier.  In particular, one notes that\n   this identifier\
    \ does not need to be a permanent one as long as its\n   lifetime is no shorter\
    \ than the lifetime of any TCP connection or any\n   Security Association that\
    \ runs on the host.\n"
- title: 6.2.  What to Use as Host Identifiers
  contents:
  - "6.2.  What to Use as Host Identifiers\n   Much effort has been put into the development\
    \ of host identifiers.\n   Possible candidates for host identifiers include DNS\
    \ name and Host\n   Identity Tag (HIT) in the Host Identity Protocol (HIP) [RFC4423].\n\
    \   However, because the current protocol stack used IP as identifiers in\n  \
    \ TCP, other transport protocols, and some applications, if one does\n   not wish\
    \ to rewrite all the transport protocol and application code,\n   then DNS is\
    \ ruled out as infeasible because DNS names have variable\n   lengths.\n   For\
    \ HIP, although publickey-based HIT has the same length as an IPv6\n   address,\
    \ we still lack a secure way to retrieve the public keys.\n   Under this condition,\
    \ using HIT would not bring us much benefit.\n   BTMM chooses to use IPv6 ULA\
    \ as the host identifier so that all the\n   existing IPv6 code can be used directly.\
    \  Since the identifier does\n   not need to stay constant over machine shutdown\
    \ or crashes, each host\n   creates an IPv6 ULA at boot time.  Furthermore, since\
    \ a host does not\n   leak this ULA to the network, it would not cause any problem\
    \ to the\n   routing system.\n"
- title: 6.3.  IPv6 ULA Configuration
  contents:
  - "6.3.  IPv6 ULA Configuration\n   In BTMM, IPv6 ULA is advertised to be used in\
    \ the autotunnel service\n   of the host.  Thus, the IPv6 address needs to be\
    \ configured before\n   BTMM starts its service.\n   When the machine boots up,\
    \ the IPv6 address for autotunnel service is\n   initialized as zeros, and the\
    \ autotunnel interface is marked as\n   inactive.  During the process when BTMM\
    \ updates the interfaces list\n   (which is performed every time the network changes),\
    \ BTMM would\n   randomly generate an IPv6 ULA according to [RFC4193] if the IPv6\n\
    \   address is found uninitialized.  The first octet of the ULA is set to\n  \
    \ be \"0xFD\", and the following 7 octets are randomly selected from\n   0~255.\
    \  Finally, the EUI-64 identifier fills up the remaining 8\n   octets.  Since\
    \ there are 56 random bits plus a theoretically unique\n   EUI-64 identifier,\
    \ it is unlikely for an IPv6 ULA collision between\n   any two hosts of the same\
    \ subscriber to occur.\n   This locally generated ULA remains unchanged when the\
    \ machine is on,\n   despite its location changes.  Hence, the user can fully\
    \ enjoy the\n   benefits brought by topology-independent host identifiers.  After\
    \ the\n   machine is turned off, this particular ULA is no longer kept.\n"
- title: 7.  Securing Communication
  contents:
  - "7.  Securing Communication\n   BTMM users often have to fetch their personal\
    \ data via a network they\n   don't trust (or they do not know whether or not\
    \ it's trustworthy).\n   Hence, it is important for BTMM to have an effective\
    \ means to secure\n   the communications.\n"
- title: 7.1.  Authentication for Connecting to Remote Host
  contents:
  - "7.1.  Authentication for Connecting to Remote Host\n   Kerberos is a \"single\
    \ sign on\" technology and has been supported in\n   Apple's products since MAC\
    \ OS X 10.5.  Each Mac OS X client maintains\n   a local Key Distribution Center\
    \ (KDC) for the use of Bonjour and\n   peer-to-peer security.\n   When the user\
    \ first signs in to MobileMe on a host, it automatically\n   receives a digital\
    \ certificate and private key for \"Back to My Mac\n   Encryption Certificate\"\
    \ from KDC.  When the user connects to another\n   system using BTMM, authentication\
    \ is performed using the Public Key\n   Cryptography for Initial Authentication\
    \ in Kerberos (PKINIT) protocol\n   [RFC4556] with that certificate.  After that,\
    \ the user is granted a\n   \"ticket\" that permits it to continue to use the\
    \ services on the\n   remote host without re-authenticating until the ticket expires\
    \ (a\n   ticket usually has a 10-hour lifetime).\n"
- title: 7.2.  Authentication for DNS Exchanges
  contents:
  - "7.2.  Authentication for DNS Exchanges\n   BTMM uses Transaction SIGnature (TSIG)\
    \ to authenticate the user when\n   dynamic DNS update is performed [RFC2845].\
    \  Also, to protect the\n   subscriber's privacy, LLQ is required to contain TSIG.\
    \  This\n   authentication mechanism is based on the shared secret key, which\
    \ in\n   BTMM's case is derived from the subscriber's MobileMe account\n   password.\n\
    \   Every time a DNS request/response is going to be issued, a TSIG RR is\n  \
    \ dynamically computed with the HMAC-MD5 [RFC2104] message digest\n   algorithm\
    \ (and the TSIG RR will be discarded once its has been used).\n   Inside the TSIG\
    \ RR, the name of the shared secret key in the domain\n   name syntax is included,\
    \ so the receiver knows which key to use (this\n   is especially useful if the\
    \ receiver is the DNS server).  This TSIG\n   RR is appended to the additional\
    \ data section before the message is\n   sent out.  The receiver of the message\
    \ verifies the TSIG RR and\n   proceeds only if the TSIG is valid.\n   Besides,\
    \ the DNS messages are also protected by TLS [RFC5246] to\n   prevent eavesdropping.\n"
- title: 7.3.  IPsec for Secure End-to-End Data Communication
  contents:
  - '7.3.  IPsec for Secure End-to-End Data Communication

    '
- title: 7.3.1.  Internet Key Exchange
  contents:
  - "7.3.1.  Internet Key Exchange\n   Before the Security Association can be established\
    \ between two end\n   hosts, the Internet Key Exchange (IKE) [RFC5996] process\
    \ needs to be\n   accomplished.\n   BTMM calls Racoon [Racoon], the IKE daemon,\
    \ to do the key exchange,\n   after which the key is put into the Security Association\
    \ Database\n   (SAD).  The exchange mode is set to be aggressive so that it will\
    \ not\n   take too long, and it uses a pre-shared key to do the user\n   authentication.\
    \  The subscriber's Fully Qualified Domain Name (FQDN)\n   is used as both identifier\
    \ and pre-shared key during the IKE process.\n"
- title: '7.3.2.  Discussion: End-to-End Encryption'
  contents:
  - "7.3.2.  Discussion: End-to-End Encryption\n   When it comes time to set up Security\
    \ Associations between two BTMM\n   clients, we have two choices: put the other\
    \ host's IPv4 address in\n   the destination address field or put it in the IPv6\
    \ address of the\n   remote end.\n   If the IPv4 address (which is the public\
    \ address of a NAT) is chosen\n   to associate with a Security Association, that\
    \ means we set up a\n   Security Association between one end host and the NAT\
    \ of the other\n   host.  The IPv6 packet would then be wrapped by the UDP header\
    \ and\n   then get encrypted by ESP.  After the encrypted packet arrives at the\n\
    \   NAT, the NAT device decrypts the packet and sends it to the\n   destination\
    \ according to the port mapping.  Although this approach\n   seems viable, there\
    \ are 3 drawbacks:\n   o  First, the encryption is not really end-to-end, i.e.,\
    \ only the\n      path between one end host and the NAT device of the other end\
    \ is\n      protected.  The rest of the path, from the NAT device to the other\n\
    \      BTMM client, is unprotected and vulnerable to attacks.  If the NAT\n  \
    \    device is not trustworthy, the communication is at high risk.\n      Even\
    \ if the NAT device is trustworthy (e.g., the user owns the\n      NAT), it is\
    \ not uncommon for the NAT to communicate with the host\n      through a broadcast\
    \ channel, which provides opportunities for an\n      eavesdropper to sniff the\
    \ sensitive data (consider the unlocked\n      \"free\" WiFi access near your\
    \ neighborhood).\n   o  Second, quite a few BTMM clients are on the move very\
    \ often.\n      Every time they change their attachment points to the Internet,\n\
    \      they will get different IPv4 addresses.  As a result, the\n      previously\
    \ established Security Associations become obsoleted, and\n      the two end hosts\
    \ need to re-establish them again.  This is a\n      waste of time and resources.\n\
    \   o  Third, this approach assumes that the NAT device is able and\n      willing\
    \ to do the IPsec ESP for the host behind it, which is not\n      always the case.\n\
    \   Consequently, BTMM decides to put the IPv6 ULA into the destination\n   field\
    \ of IPsec Security Associations.  In this way, the end-to-end\n   path between\
    \ the hosts is fully protected, and the Security\n   Associations survive the\
    \ network changes since the IPv6 ULA remains\n   the same even if the BTMM client\
    \ changes its location.  Furthermore,\n   the encryption is transparent to the\
    \ NAT device, which means the NAT\n   device is not required to interfere with\
    \ the IPsec protection.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The BTMM implementation utilizes existing security\
    \ protocols to\n   address the end-to-end security considerations.  It uses Kerberos\n\
    \   [RFC4120] for end-to-end authentication and uses IPsec [RFC4301] to\n   secure\
    \ data communications between two end hosts.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative Reference
  contents:
  - "9.1.  Normative Reference\n   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC: Keyed-\n              Hashing for Message Authentication\", RFC 2104,\n\
    \              February 1997.\n   [RFC2136]  Vixie, P., Thomson, S., Rekhter,\
    \ Y., and J. Bound,\n              \"Dynamic Updates in the Domain Name System\
    \ (DNS UPDATE)\",\n              RFC 2136, April 1997.\n   [RFC2782]  Gulbrandsen,\
    \ A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n              February 2000.\n   [RFC2845]\
    \  Vixie, P., Gudmundsson, O., Eastlake, D., and B.\n              Wellington,\
    \ \"Secret Key Transaction Authentication for DNS\n              (TSIG)\", RFC\
    \ 2845, May 2000.\n   [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn,\
    \ \"The\n              Kerberos Network Authentication Service (V5)\", RFC 4120,\n\
    \              July 2005.\n   [RFC4193]  Hinden, R. and B. Haberman, \"Unique\
    \ Local IPv6 Unicast\n              Addresses\", RFC 4193, October 2005.\n   [RFC4301]\
    \  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet\
    \ Protocol\", RFC 4301, December 2005.\n   [RFC4303]  Kent, S., \"IP Encapsulating\
    \ Security Payload (ESP)\",\n              RFC 4303, December 2005.\n   [RFC4556]\
    \  Zhu, L. and B. Tung, \"Public Key Cryptography for Initial\n              Authentication\
    \ in Kerberos (PKINIT)\", RFC 4556, June 2006.\n   [RFC5246]  Dierks, T. and E.\
    \ Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version\
    \ 1.2\", RFC 5246, August 2008.\n   [RFC5996]  Kaufman, C., Hoffman, P., Nir,\
    \ Y., and P. Eronen,\n              \"Internet Key Exchange Protocol Version 2\
    \ (IKEv2)\",\n              RFC 5996, September 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DDUL]     Sekar, K., \"Dynamic DNS Update Leases\"\
    , Work in Progress,\n              August 2006.\n   [DNS-LLQ]  Sekar, K., \"DNS\
    \ Long-Lived Queries\", Work in Progess,\n              August 2006.\n   [DNS-SD]\
    \   Cheshire, S. and M. Krochmal, \"DNS-Based Service\n              Discovery\"\
    , Work in Progress, February 2011.\n   [EUI64]    \"Guidelines for 64-bit Global\
    \ Identifier (EUI-64)\",\n              <http://standards.ieee.org/regauth/oui/tutorials/\n\
    \              EUI64.html>.\n   [IGD]      \"Internet Gateway Device (IGD) Standard\
    \ Device Control\n              Protocol\", <http://www.upnp.org>.\n   [NAT-PMP]\
    \  Cheshire, S., \"NAT Port Mapping Protocol (NAT-PMP)\", Work\n             \
    \ in Progress, April 2008.\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg,\
    \ D., Groot, G., and\n              E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC4423]  Moskowitz,\
    \ R. and P. Nikander, \"Host Identity Protocol\n              (HIP) Architecture\"\
    , RFC 4423, May 2006.\n   [Racoon]   \"Racoon\", <http://ipsec-tools.sourceforge.net>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stuart Cheshire\n   Apple Inc.\n   1 Infinite Loop\n \
    \  Cupertino, CA  95014\n   USA\n   Phone: +1 408 974 3207\n   EMail: cheshire@apple.com\n\
    \   Zhenkai Zhu\n   UCLA\n   4805 Boelter Hall, UCLA\n   Los Angeles, CA  90095\n\
    \   USA\n   Phone: +1 310 993 7128\n   EMail: zhenkai@cs.ucla.edu\n   Ryuji Wakikawa\n\
    \   Toyota ITC\n   465 Bernardo Avenue\n   Mountain View, CA  94043\n   USA\n\
    \   EMail: ryuji.wakikawa@gmail.com\n   Lixia Zhang\n   UCLA\n   3713 Boelter\
    \ Hall, UCLA\n   Los Angeles, CA  90095\n   USA\n   Phone: +1 310 825 2695\n \
    \  EMail: lixia@cs.ucla.edu\n"
