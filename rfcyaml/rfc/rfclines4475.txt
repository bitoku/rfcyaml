Abstract This informational document gives examples of Session Initiation Protocol (SIP) test messages designed to exercise and "torture" a SIP implementation.
This document is informational and is NOT NORMATIVE on any aspect of SIP.
This document contains test messages based on the current version (2.0) of the Session Initiation Protocol as, defined in [RFC3261].
Some messages exercise SIP's use of the Session Description Protocol (SDP), as described in [RFC3264].
These messages were developed and refined at the SIPIt interoperability test events.
The test messages are organized into several sections.
Some stress only a SIP parser, and others stress both the parser and the application above it.
Some messages are valid, and some are not.
Each example clearly calls out what makes any invalid messages incorrect.
This document does not attempt to catalog every way to make an invalid message, nor does it attempt to be comprehensive in exploring unusual, but valid, messages.
Instead, it tries to focus on areas that have caused interoperability problems or that have particularly unfavorable characteristics if they are handled improperly.
This document is a seed for a test plan, not a test plan in itself.
The messages are presented in the text using a set of markup conventions to avoid ambiguity and meet Internet Draft layout requirements.
To resolve any remaining ambiguity, a bit accurate version of each message is encapsulated in an appendix.
This document contains many example SIP messages.
Although SIP is a text based protocol, many of these examples cannot be unambiguously rendered without additional markup due to the constraints placed on the formatting of RFCs.
This document defines and uses the markup defined in this section to remove that ambiguity.
This markup uses the start and end tag conventions of XML but does not define any XML document type.
The appendix contains an encoded binary form of all the messages and the algorithm needed to decode them into files.
Several of these examples contain unfolded lines longer than 72 characters.
These are captured between <allOneLine/> tags.
The single unfolded line is reconstructed by directly concatenating all lines appearing between the tags (discarding any line feeds or carriage returns).
There will be no whitespace at the end of lines.
Any whitespace appearing at a fold point will appear at the beginning of a line.
The following represent the same string of bits: Header name: first value, reallylongsecondvalue, third value <allOneLine
first value, reallylongsecondvalue , third value </allOneLine> <allOneLine
Header name: first value, reallylong second value, third value
Note that this is NOT SIP header line folding, where different strings of bits have equivalent meaning.
Non printable Characters Several examples contain binary message bodies or header field values containing non ascii range UTF 8 encoded characters.
These are rendered here as a pair of hexadecimal digits per octet between <hex/> tags.
This rendering applies even inside quoted strings.
The following represent the same string of bits:
Header name: value one Header name: value<hex>206F6E</hex>e
The following is a Subject header field containing the euro symbol:
Several examples contain very large data values created with repeating bit strings.
Those will be rendered here using <repeat count some integer>value</repeat
As with <hex>, this rendering applies even inside quoted strings.
For example, the value "abcabcabc" can be rendered as <repeat count
A display name of "1000000 bottles of beer" could be rendered as To: "1<repeat count 6><hex>30</hex></repeat> bottles of beer" <sip:beer.example.com> A Max Forwards header field with a value of one google will be rendered here as Max Forwards:
This short, relatively human readable message contains:  line folding all over.
LWS between colons, semicolons, header field values, and other fields.
both comma separated and separately listed header field values.
a mix of short and long form for the same header field name.
an unknown header field with a value that would be syntactically invalid if it were defined in terms of generic param.
unusual header field name character case.
unknown parameters of a known header field.
a uri parameter with no value.
a header parameter with no value.
integer fields (Max Forwards and CSeq) with leading zeros.
All elements should treat this as a well formed request.
The UnknownHeaderWithUnusualValue header field deserves special attention.
If this header field were defined in terms of comma  separated values with semicolon separated parameters (as would many of the existing defined header fields), this would be invalid.
However, since the receiving element does not know the definition of the syntax for this field, it must parse it as a header value.
Proxies would forward this header field unchanged.
Endpoints would ignore the header field.
> v:  SIP  / 2.0
c IN IP4 192.0.2.4 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.1.2.
Wide Range of Valid Characters
This message exercises a wider range of characters in several key syntactic elements than implementations usually see.
In particular, note the following:  The Method contains non alpha characters from token.
Note that % is not an escape character for this field.
A method of IN%56ITE is an unknown method.
It is not the same as a method of INVITE.
The Request URI contains unusual, but legal, characters.
A branch parameter contains all non alphanum characters from token.
The To header field value's quoted string contains quoted pair expansions, including a quoted NULL character.
The name part of name addr in the From header field value contains multiple tokens (instead of a quoted string) with all non alphanum characters from the token production rule.
That value also has an unknown header parameter whose name contains the non alphanum token characters and whose value is a non ascii range
The tag parameter on this value contains the non alphanum token characters.
The Call ID header field value contains the non alphanum characters from word.
It is only an escape character in productions matching the rule "escaped".
" does not start a quoted string.
They are not required to appear in balanced pairs.
There is an unknown header field (matching extension header) with non alphanum token characters in its name and a UTF8 NONASCII value.
If this unusual URI has been defined at a proxy, the proxy will forward this request normally.
Otherwise, a proxy will generate a 404.
Endpoints will generate a 501 listing the methods they understand in an Allow header field.
Message Details : intmeth <allOneLine
To: "BEL:\<hex>07</hex> NUL:\<hex>00</hex> DEL:\<hex>7F</hex>" <sip:1 unusual.
From: token1~` token2'   token3 %!.
> Call ID: intmeth.word%ZK !.
`.%indeed'~ Max Forwards: 255 <allOneLine
> Content Length: 0 3.1.1.3.
Valid Use of the % Escaping Mechanism
This INVITE exercises the % HEX HEX escaping mechanism in several places.
The request is syntactically valid.
Interesting features include the following:  The request URI has sips:user@example.com embedded in its userpart.
What that might mean to example.net is beyond the scope of this document.
The From and To URIs have escaped characters in their userparts.
The Contact URI has escaped characters in the URI parameters.
Note that the "name" uri parameter has a value of "value%41", which is NOT equivalent to "valueA".
Per [RFC3986], unescaping URI components is never performed recursively.
A parser must accept this as a well formed message.
The application using the message must treat the % HEX HEX expansions as equivalent to the character being encoded.
The application must not try to interpret % as an escape character in those places where % HEX HEX ("escaped" in the grammar) is not a valid part of the construction.
In [RFC3261], "escaped" only occurs in the expansions of SIP URI, SIPS URI, and Reason Phrase.
I%20have%20spaces@example.net>;tag 938 Max Forwards: 87 i: esc01.239409asdfakjkn23onasd0
UDP host5.example.net;branch z9hG4bKkdjuw C: application/sdp Contact:
> Content Length: 150 v 0 o mhandley 29739 7272939 IN
c IN IP4 192.0.2.1 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31
This register request contains several URIs with nulls in the userpart.
The message is well formed parsers must accept this message.
Implementations must take special care when unescaping the Address of Record (AOR) in this request so as to not prematurely shorten the username.
This request registers two distinct contact URIs.
Message Details : escnull REGISTER sip:
From: sip:null %00 null@example.com;tag 839923423
Max Forwards: 70 Call ID:
UDP host5.example.com;branch z9hG4bKkdjuw Contact: <sip:%00@host5.example.com> Contact: <sip:%00%00@host5.example.com
When It Is Not an Escape
In most of the places % can appear in a SIP message, it is not an escape character.
This can surprise the unwary implementor.
The following well formed request has these properties:
The request method is unknown.
It is NOT equivalent to REGISTER.
The display name portion of the To and From header fields is "%Z%45".
Note that this is not the same as %ZE.
This message has two Contact header field values, not three.
> is a C%6Fntact header field value.
A parser should accept this message as well formed.
A proxy would forward or reject the message depending on what the Request URI meant to it.
An endpoint would reject this message with a 501.
29344 RE%47IST%45R Max Forwards: 70 Contact: <sip:alias1@host1.example.com
Message with No LWS between Display Name and < This OPTIONS request is not valid per the grammar in RFC 3261 since there is no LWS between the token in the display name and < in the From header field value.
This has been identified as a specification bug that will be removed when RFC 3261 is revised.
Elements should accept this request as well formed.
caller@example.com>;tag 323 Max Forwards: 70 Call ID: lwsdisp.1234abcd@funky.example.com CSeq:
Long Values in Header Fields
request contains header fields with many values and values that are very long.
The To header field has a long display name, and long uri parameter names and values.
From header field has long header parameter names and values, in particular, a very long tag.
The Call ID is one long token.
longreq INVITE sip:user@example.com SIP/2.0 <allOneLine
To: "I have a user name of <repeat count 10
>extreme</repeat> proportion" <sip:user@example.com:6000; unknownparam1 very<repeat count 20
> shortvalue; very<repeat count 25
F: sip: <repeat count 5>amazinglylongcallername</repeat>@example.net ;tag 12<repeat count 50>982</repeat>424 ;unknownheaderparam<repeat count
> Call ID: longreq.one<repeat count 20
> Unknown <repeat count 20
> Name: unknown <repeat count 20
>long</repeat> value; unknown <repeat count 20
SIP/2.0/TCP sip20.example.com v  : SIP/2.0
192.0.2.5; branch very<repeat count 50>long</repeat
> Content Type: application/sdp l:
150 v 0 o mhandley 29739 7272939
c IN IP4 192.0.2.1 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31
Extra Trailing Octets in a UDP Datagram
This message contains a single SIP REGISTER request, which ostensibly arrived over UDP in a single datagram.
The packet contains extra octets after the body (which in this case has zero length).
The extra octets happen to look like a SIP INVITE request, but (per section 18.3 of [RFC3261]) they are just spurious noise that must be ignored.
A SIP element receiving this datagram would handle the REGISTER request normally and ignore the extra bits that look like an INVITE request.
If the element is a proxy choosing to forward the REGISTER, the INVITE octets would not appear in the forwarded request.
/UDP 192.0.2.125;branch z9hG4bKkdjuw23492 Content Length: 0 INVITE
sip:caller@example.net;tag 141334 Max Forwards: 8 Call ID: dblreq.0ha0isnda977644900765@192.0.2.15 CSeq: 8 INVITE
UDP 192.0.2.15;branch z9hG4bKkdjuw380234 Content Type: application/sdp Content Length: 150 v 0 o mhandley 29739 7272939 IN IP4
m audio 49217 RTP/AVP 0 12 m  video 3227 RTP/AVP 31
Semicolon Separated Parameters in URI User Part
This request has a semicolon separated parameter contained in the "user" part of the Request URI (whose value contains an escaped @ symbol).
Receiving elements will accept this as a well formed message.
The Request URI will parse so that the user part is "user;par u@example.net".
CSeq: 8 OPTIONS Accept: application/sdp, application/
pkcs7 mime, multipart/mixed, multipart/signed, message/sip, message/sipfrag
Varied and Unknown Transport Types
This request contains Via header field values with all known transport types and exercises the transport extension mechanism.
Parsers must accept this message as well formed.
Elements receiving this message would process it exactly as if the 2nd and subsequent header field values specified UDP (or other transport).
sip:user@example.com From: <sip:caller@example.com>;tag 323 Max Forwards: 70 Call ID:
This MESSAGE request contains two body parts.
The second part is binary encoded and contains null (0x00) characters.
Receivers must take care to frame the received message properly.
Parsers must accept this message as well formed, even if the application above the parser does not support multipart/signed.
Additional examples of multipart/mime messages, in particular S/MIME messages, are available in the security call flow examples document [SIP SEC].
rport </allOneLine> Max Forwards: 70 Route:
2fb0dcc9 Call ID: 3d9485ad0c49859b@Zmx1ZmZ5LW1hYy0xNi5sb2NhbA.. CSeq:
1 MESSAGE Content Transfer Encoding: binary Content Type: multipart/mixed;boundary 7a9cbec02ceef655
Sat, 15 Oct 2005 04:44:56
Content Length: 553  7a9cbec02ceef655 Content Type: text/plain Content Transfer Encoding: binary
Content Type: application/octet stream Content Transfer Encoding: binary <hex> 3082015206092A86
3027060355040B132053697069742054 65737420436572746966696361746520 417574686F7269747902080195007102 330113300706052B0E03021A300D0609 2A864886F70D01010105000481808EF4
FFAE3CBD2BFF1675DDD5648E593DD647 28F26220F7E941749E330D9A15EDABDB 93D10C42102E7B7289D29CC0C9AE2EFB C7C0CFF9172F3B027E4FC027E1546DE4 B6AA3ABB3E66CCCB5DD6C64B8383149C B8E6FF182D944FE57B65BC99D005 </hex
This 200 response contains a reason phrase other than "OK".
UTF8 NONASCII / UTF8 CONT / SP / HTAB)
This particular response contains unreserved and non ascii UTF 8 characters.
This response is well formed.
A parser must accept this message.
Message Details : unreason <allOneLine
user@example.edu;tag 2229 Content Length: 154 Content Type: application/sdp Contact:
IN IP4 192.0.2.198 s   c IN IP4 192.0.2.198 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.1.13.
This well formed response contains no reason phrase.
A parser must accept this message.
The space character after the reason code is required.
If it were not present, this message could be rejected as invalid (a liberal receiver would accept it anyway).
user@example.edu>;tag 902jndnke3 Content Length: 0 Contact: <sip:user@host105.example.com
This section contains several invalid messages reflecting errors seen at interoperability events and exploring important edge conditions that can be induced through malformed messages.
This section does not attempt to be a comprehensive list of all types of invalid messages.
The Via header field of this request contains additional semicolons and commas without parameters or values.
The Contact header field contains additional semicolons without parameters.
This message is syntactically invalid.
An element receiving this request should respond with a 400 Bad Request error.
caller@example.net;tag 134161461246 Max Forwards: 7 Call ID: badinv01.0ha0isndaksdjasdf3234nas CSeq: 8 INVITE
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.2.
Content Length Larger Than Message
This is a request message with a Content Length that is larger than the actual length of the body.
When sent over UDP (as this message ostensibly was), the receiving element should respond with a 400 Bad Request error.
If this message arrived over a stream based transport, such as TCP, there's not much the receiving party could do but wait for more data on the stream and close the connection if none is forthcoming within a reasonable period of time.
23523 Content Type: application/sdp Content Length:
9999 v 0 o mhandley 29739 7272939 IN IP4 192.0.2.155 s
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.3.
This request has a negative value for Content Length.
An element receiving this message should respond with an error.
This request appeared over UDP, so the remainder of the datagram can simply be discarded.
If a request like this arrives over TCP, the framing error is not recoverable, and the connection should be closed.
The same behavior is appropriate for messages that arrive without a numeric value in the Content Length header field, such as the following:
Content Length: five Implementors should take extra precautions if the technique they choose for converting this ascii field into an integral form can return a negative value.
In particular, the result must not be used as a counter or array index.
<sip:caller@example53.example.net> Content Type: application/sdp Content Length:  999 v 0 o mhandley 29739 7272939 IN IP4 192.0.2.53 s   c IN IP4
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31
Request Scalar Fields with Overlarge Values
This request contains several scalar header field values outside their legal range.
The CSeq sequence number is >2  32 1.
The Max Forwards value is >255.
The Expires value is >2  32 1.
The Contact expires parameter value is >2  32 1.
An element receiving this request should respond with a 400 Bad Request due to the CSeq error.
If only the Max Forwards field were in error, the element could choose to process the request as if the field were absent.
If only the expiry values were in error, the element could treat them as if they contained the default values for expiration (3600 in this case).
Other scalar request fields that may contain aberrant values include, but are not limited to, the Contact q value, the Timestamp value, and the Via ttl parameter.
user@example.com>;tag 239232jh3 CSeq: 36893488147419103232 REGISTER Call ID:
> Contact: <sip:user@host129.example.com> ;expires 280297596632815 Content Length: 0 3.1.2.5.
Response Scalar Fields with Overlarge Values
This response contains several scalar header field values outside their legal range.
The CSeq sequence number is >2  32 1.
The Retry After field is unreasonably large (note that RFC 3261 does not define a legal range for this field).
The Warning field has a warning value with more than 3 digits.
An element receiving this response will simply discard it.
Message Details : scalarlg SIP/2.0
SIP/2.0/TCP host129.example.com ;branch z9hG4bKzzxdiwo34sw ;received 192.0.2.129 </allOneLine> To
949302838503028349304023988 Warning: 1812 overture "
In Progress" Content Length: 0 3.1.2.6.
Unterminated Quoted String in Display Name
This is a request with an unterminated quote in the display name of the To field.
An element receiving this request should return a 400 Bad Request error.
An element could attempt to infer a terminating quote and accept the message.
Such an element needs to take care that it makes a reasonable inference when it encounters To: "Mr J. User <sip:j.user@example.com
Message Details : quotbal INVITE sip:user@example.com
To: "Mr. J. User <sip:j.user@example.com
caller@example.net;tag 93334 Max Forwards: 10 Call ID: quotbal.aksdj Contact: <sip:caller@host59.example.net> CSeq:
Content Type: application/sdp Content Length: 152 v 0 o mhandley 29739 7272939 IN IP4
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31
It is reasonable always to reject a request with this error with a 400 Bad Request.
Elements attempting to be liberal with what they accept may choose to ignore the brackets.
If the element forwards the request, it must not include the brackets in the messages it sends.
Message Details : ltgtruri INVITE
sip:caller@example.net;tag 39291 Max Forwards: 23 Call ID: ltgtruri.1@192.0.2.5 CSeq: 1 INVITE
<sip:caller@host5.example.net> Content Type: application/sdp Content Length: 159 v 0 o mhandley 29739 7272939 IN IP4
IP4 192.0.2.5 t 3149328700 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.8.
Malformed SIP Request URI (embedded LWS)
This INVITE has illegal LWS within the Request URI.
An element receiving this request should respond with a 400 Bad Request.
An element could attempt to ignore the embedded LWS for those schemes (like SIP) where doing so would not introduce ambiguity.
: lwsruri INVITE sip:user@example.com; lr SIP/2.0
user@example.com;tag 3xfe 9921883 z9f From:
caller@example.net;tag 231413434 Max Forwards: 5 Call ID: lwsruri.asdfasdoeoi2323 asdfwrn23
z9hG4bKkdjuw2395 Contact: <sip:caller@host1.example.net> Content Type: application/sdp Content Length:
159 v 0 o mhandley 29739 7272939
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31
Multiple SP Separating Request Line Elements
This INVITE has illegal multiple SP characters between elements of the start line.
It is acceptable to reject this request as malformed.
An element that is liberal in what it accepts may ignore these extra SP characters when processing the request.
If the element forwards the request, it must not include these extra SP characters in the messages it sends.
caller@example.net;tag 8814 Call ID: lwsstart.dfknq234oi243099adsdfnawe3@example.com CSeq:
/UDP host1.example.com;branch z9hG4bKkdjuw3923 Contact: <sip:caller@host1.example.net> Content Type: application/sdp Content Length:
150 v 0 o mhandley 29739 7272939
c IN IP4 192.0.2.1 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.10.
SP Characters at End of Request Line
This OPTIONS request contains SP characters between the SIP Version field and the CRLF terminating the Request Line.
It is acceptable to reject this request as malformed.
An element that is liberal in what it accepts may ignore these extra SP characters when processing the request.
If the element forwards the request, it must not include these extra SP characters in the messages it sends.
trws.oicu34958239neffasdhr2345r Accept: application/sdp CSeq: 238923 OPTIONS Max Forwards: 70 Content Length: 0 3.1.2.11.
Escaped Headers in SIP Request URI
This INVITE is malformed, as the SIP Request URI contains escaped headers.
It is acceptable for an element to reject this request with a 400 Bad Request.
An element could choose to be liberal in what it accepts and ignore the escaped headers.
If the element is a proxy, the escaped headers must not appear in the Request URI of the forwarded request (and most certainly must not be translated into the actual header of the forwarded request).
/UDP host of the hour.example.com;branch z9hG4bKkdjuw Content Type: application/sdp Content Length: 150 v 0 o mhandley 29739 7272939 IN IP4
c IN IP4 192.0.2.1 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.12.
Invalid Time Zone in Date Header Field
This INVITE is invalid, as it contains a non GMT time zone in the SIP Date header field.
It is acceptable to reject this request as malformed (though an element shouldn't do that unless the contents of the Date header field were actually important to its processing).
An element wishing to be liberal in what it accepts could ignore this value altogether if it wasn't going to use the Date header field anyway.
Otherwise, it could attempt to interpret this date and adjust it to GMT.
RFC 3261 explicitly defines the only acceptable time zone designation as "GMT".
"UT", while synonymous with GMT per [RFC2822], is not valid.
"UTC" and "UCT" are also invalid.
caller@example.net;tag 2234923 Max Forwards: 70 Call ID:
Fri, 01 Jan 2010 16:00:00
> Content Type: application/sdp Content Length: 150 v 0 o mhandley 29739 7272939 IN IP4
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.13.
Failure to Enclose name addr URI in <
This REGISTER request is malformed.
It is reasonable for an element receiving this request to respond with a 400 Bad Request.
An element choosing to be liberal in what it accepts could infer the angle brackets since there is no ambiguity in this example.
In general, that won't be possible.
user@example.com;tag 998332 Max Forwards: 70 Call ID: regbadct.k345asrl3fdbv@10.0.0.1 CSeq:
sip:user@example.com?Route %3Csip:sip.example.com%3E l: 0 3.1.2.14.
This request is malformed, since the addr spec in the To header field contains spaces.
Parsers receiving this request must not break.
It is reasonable to reject this request with a 400 Bad Request response.
Elements attempting to be liberal may ignore the spaces.
UDP host4.example.com:5060;branch z9hG4bKkdju43234 Max Forwards: 70
To: "Watson, Thomas" < sip:t.watson@example.org > Call ID:
3923239 OPTIONS l: 0 3.1.2.15.
Non token Characters in Display Name
This OPTIONS request is malformed, since the display names in the To and From header fields contain non token characters but are unquoted.
It is reasonable always to reject this kind of error with a 400 Bad Request response.
An element may attempt to be liberal in what it receives and infer the missing quotes.
If this element were a proxy, it must not propagate the error into the request it forwards.
As a consequence, if the fields are covered by a signature, there's not much point in trying to be liberal the message should simply be rejected.
Message Details : baddn OPTIONS sip:t.watson@example.org
To an element implementing [RFC3261], this request is malformed due to its high version number.
The element should respond to the request with a 505 Version Not Supported error.
T. Watson <sip:t.watson@example.org> Call ID:
This request has mismatching values for the method in the start line and the CSeq header field.
Any element receiving this request will respond with a 400 Bad Request.
sip:caller@example.net;tag 34525 Max Forwards: 6 Call ID: mismatch01.dj0234sxdfl3 CSeq:
Unknown Method with CSeq Method Mismatch
This message has an unknown method in the start line, and a CSeq method tag that does not match.
Any element receiving this response should respond with a 501 Not Implemented.
A 400 Bad Request is also acceptable, but choosing a 501 (particularly at proxies) has better future proof characteristics.
sip:caller@example.net;tag 34525 Max Forwards: 6 Call ID:
: 8 INVITE Contact: <sip:caller@host.example.net>
/UDP host.example.net;branch z9hG4bKkdjuw Content Type: application/sdp
138 v 0 o mhandley 29739 7272939
IN IP4 192.0.2.1 m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.1.2.19.
This response has a response code larger than 699.
An element receiving this response should simply drop it.
Message Details : bigcode SIP/2.0 4294967301 better not break the receiver
user@example.edu>;tag 902jndnke3 Content Length: 0 Contact: <sip:user@host105.example.com
This section contains tests that exercise an implementation's parser and transaction layer logic.
This request indicates support for RFC 3261 style transaction identifiers by providing the z9hG4bK prefix to the branch parameter, but it provides no identifier.
A parser must not break when receiving this message.
An element receiving this request could reject the request with a 400 Response (preferably statelessly, as other requests from the source are likely also to have a malformed branch parameter), or it could fall back to the RFC 2543 style transaction identifier.
application/sdp Call ID: badbranch.sadonfo23i420jv0as0derf3j3n CSeq: 8 OPTIONS l: 0 3.3.
This section contains tests that exercise an implementation's parser and application layer logic.
This request contains no Call ID, From, or To header fields.
An element receiving this message must not break because of the missing information.
Ideally, it will respond with a 400 Bad Request error.
152 v 0 o mhandley 29739 7272939
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31
Request URI with Unknown Scheme
This OPTIONS contains an unknown URI scheme in the Request URI.
A parser must accept this as a well formed SIP request.
An element receiving this request will reject it with a 416 Unsupported URI Scheme response.
Some early implementations attempt to look at the contents of the To header field to determine how to route this kind of request.
Despite the fact that the To header field and the Request URI frequently look alike in simplistic first hop messages, the To header field contains no routing information.
caller@example.net;tag 384 Max Forwards: 3 Call ID: unkscm.nasdfasser0q239nwsdfasdkl34 CSeq: 3923423 OPTIONS
z9hG4bKkdjuw39234 Content Length: 0 3.3.3.
Request URI with Known but Atypical Scheme
This OPTIONS contains an Request URI with an IANA registered scheme that does not commonly appear in Request URIs of SIP requests.
A parser must accept this as a well formed SIP request.
If an element will never accept this scheme as meaningful in a Request URI, it is appropriate to treat it as unknown and return a 416 Unsupported URI Scheme response.
If the element might accept some URIs with this scheme, then a 404 Not Found is appropriate for those URIs it doesn't accept.
Message Details : novelsc OPTIONS
caller@example.net;tag 384 Max Forwards: 3 Call ID: novelsc.asdfasser0q239nwsdfasdkl34 CSeq:
z9hG4bKkdjuw39234 Content Length: 0 3.3.4.
Unknown URI Schemes in Header Fields
This message contains registered schemes in the To, From, and Contact header fields of a request.
The message is syntactically valid.
Parsers must not fail when receiving this message.
Proxies should treat this message as they would any other request for this URI.
A registrar would reject this request with a 400 Bad Request response, since the To: header field is required to contain a SIP or SIPS URI as an AOR.
Proxy Require and Require This request tests proper implementation of SIP's Proxy Require and Require extension mechanisms.
Any element receiving this request will respond with a 420 Bad Extension response, containing an Unsupported header field listing these features from either the Require or Proxy Require header field, depending on the role in which the element is responding.
caller@example.net;tag 242etr Max Forwards: 6 Call ID:
noProxiesSupportThis, norDoAnyProxiesSupportThis CSeq: 8 OPTIONS
SIP/2.0/TLS fold and staple.example.com;branch z9hG4bKkdjuw Content Length: 0
This INVITE request contains a body of unknown type.
A parser must not fail when receiving it.
A proxy receiving this request would process it just as it would any other INVITE.
An endpoint receiving this request would reject it with a 415 Unsupported Media Type error.
sip:caller@example.net;tag 8392034 Max Forwards: 70 Call ID: invut.0ha0isndaksdjadsfij34n23d CSeq:
SIP/2.0/UDP somehost.example.com;branch z9hG4bKkdjuw Content Type:
40 <audio> <pcmu port "
This REGISTER request contains an Authorization header field with an unknown scheme.
The request is well formed.
A parser must not fail when receiving it.
A proxy will treat this request as it would any other REGISTER.
If it forwards the request, it will include this Authorization header field unmodified in the forwarded messages.
A registrar that does not care about challenge response authentication will simply ignore the Authorization header field, processing this registration as if the field were not present.
A registrar that does care about challenge response authentication will reject this request with a 401, issuing a new challenge with a scheme it understands.
Endpoints choosing not to act as registrars will simply reject the request.
sip:j.user@example.com;tag 87321hj23128 Max Forwards: 8 Call ID: regaut01.0ha0isndaksdj
NoOneKnowsThisScheme opaque data here Content Length:0 3.3.8.
Multiple Values in Single Value Required Fields
The message contains a request with multiple Call ID, To, From, Max  Forwards, and CSeq values.
An element receiving this request must not break.
An element receiving this request would respond with a 400 Bad Request error.
Message Details : multi01 INVITE sip:user@company.com
UDP 192.0.2.25;branch z9hG4bKkdjuw Max Forwards: 70 CSeq: 5 INVITE Call ID:
caller@example.net;tag 2923420123 Content Type: application/sdp
Max Forwards: 5 v 0 o mhandley 29739 7272939 IN IP4 192.0.2.25 s
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.3.9.
Multiple conflicting Content Length header field values appear in this request.
From a framing perspective, this situation is equivalent to an invalid Content Length value (or no value at all).
An element receiving this message should respond with an error.
This request appeared over UDP, so the remainder of the datagram can simply be discarded.
If a request like this arrives over TCP, the framing error is not recoverable, and the connection should be closed.
15932 OPTIONS Content Length: 13 Max Forwards: 60 Content Length: 5 Content Type:
There's no way to know how many octets are supposed to be here.
200 OK Response with Broadcast Via Header Field Value
This message is a response with a 2nd Via header field value's sent  by containing 255.255.255.255.
The message is well formed; parsers must not fail when receiving it.
Per [RFC3261], an endpoint receiving this message should simply discard it.
If a proxy followed normal response processing rules blindly, it would forward this response to the broadcast address.
To protect against this as an avenue of attack, proxies should drop such responses.
Message Details : bcast SIP/2.0 200
z9hG4bK1saber23 Call ID: bcast.0384840201234ksdfak3j2erwedfsASdf CSeq:
user@example.edu;tag 2229 Content Length: 154 Content Type: application/sdp Contact:
<sip:user@host28.example.com> v 0 o mhandley 29739 7272939 IN IP4 192.0.2.198 s   c IN IP4 192.0.2.198 t 0 0
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31
This is a legal SIP request with the Max Forwards header field value set to zero.
A proxy should not forward the request and should respond 483 (Too Many Hops).
An endpoint should process the request as if the Max  Forwards field value were still positive.
caller@example.net;tag 3ghsd41 Call ID: zeromf.jfasdlfnm2o2l43r5u0asdfas CSeq:
Max Forwards: 0 Content Length: 0 3.3.12.
REGISTER with a Contact Header Parameter
This register request contains a contact where the 'unknownparam' parameter must be interpreted as a contact param and not a url param.
The response must not include "unknownparam" as a url parameter for this binding.
Likewise, "unknownparam" must not appear as a url parameter in any binding during subsequent fetches.
Behavior is the same, of course, for any known contact param parameter names.
saturn.example.com:5060;branch z9hG4bKkdjuw Max Forwards: 70 From:
cparam01.70710@saturn.example.com CSeq: 2 REGISTER Contact
: sip: 19725552222@gw1.example.net;unknownparam l: 0 3.3.13.
REGISTER with a url parameter This register request contains a contact where the URI has an unknown parameter.
The register should succeed, and a subsequent retrieval of the registration must include "unknownparam" as a url parameter.
Behavior is the same, of course, for any known url parameter names.
saturn.example.com:5060;branch z9hG4bKkdjuw Max Forwards: 70 From:
To: sip:watson@example.com Call ID: cparam02.70710@saturn.example.com CSeq: 3 REGISTER Contact:
REGISTER with a URL Escaped Header
This register request contains a contact where the URI has an escaped header.
The register should succeed, and a subsequent retrieval of the registration must include the escaped Route header in the contact URI for this binding.
user@example.com;tag 8 Max Forwards: 70 Call ID:
/UDP host5.example.com;branch z9hG4bKkdjuw M: <sip:user@example.com?Route %3Csip:sip.example.com%3E
This request indicates that the response must contain a body in an unknown type.
In particular, since the Accept header field does not contain application/sdp, the response may not contain an SDP body.
The recipient of this request could respond with a 406 Not Acceptable, with a Warning/399 indicating that a response cannot be formulated in the formats offered in the Accept header field.
It is also appropriate to respond with a 400 Bad Request, since all SIP User Agents (UAs) supporting INVITE are required to support application/sdp.
Message Details : sdp01 INVITE
sip:caller@example.net;tag 234 Max Forwards: 5 Call ID:
sdp01.ndaksdj9342dasdd Accept: text/nobodyKnowsThis CSeq: 8 INVITE
z9hG4bKkdjuw Content Length: 150 Content Type: application/sdp v 0 o mhandley 29739 7272939 IN IP4
m audio 49217 RTP/AVP 0
12 m video 3227 RTP/AVP 31 a rtpmap:31 LPC 3.4.
This is a legal message per RFC 2543 (and several bis versions) that should be accepted by RFC 3261 elements that want to maintain backwards compatibility.
There is no branch parameter at all on the Via header field value.
There is no From tag.
There is no explicit Content Length.
(The body is assumed to be all octets in the datagram after the null line.)
There is no Max Forwards header field.
Message Details : inv2543 INVITE
From: <sip: 13035551111@ift.client.example.net;user phone> Record Route:
16505552222@ss1.example.net;user phone Call ID: inv2543.1717@ift.client.example.com CSeq:
56 INVITE Content Type: application/sdp v 0 o mhandley 29739 7272939 IN IP4
0 m audio 49217 RTP/AVP 0 4.
This document presents NON NORMATIVE examples of SIP session establishment.
The security considerations in [RFC3261] apply.
Parsers must carefully consider edge conditions and malicious input as part of their design.
Attacks on many Internet systems use crafted input to cause implementations to behave in undesirable ways.
Many of the messages in this document are designed to stress a parser implementation at points traditionally used for such attacks.
However, this document does not attempt to be comprehensive.
It should be considered a seed to stimulate thinking and planning, not simply a set of tests to be passed.
Appendix A.  Bit Exact Archive of Each Test Message
The following text block is an encoded, gzip compressed TAR archive of files that represent each of the example messages discussed in Section 3.
; Figure 58 Alternatively, the base 64 encoded block can be edited by hand to remove document structure lines and fed as input to any base 64 decoding utility.
71g76xu8SBIY2L1PuEcBS9Drb4AC5 9m0HAIgdfk5QZEhZENK2tN0UghC00DCrptU0vZN8YqLDrT6D45R/MStH5B m  v9Zlf8cylEleTiZhwNlHsXJ/LlDCf3iJzAnpBYNm yMNf4nICkbtv ltP5r
3Hn5R85OXxHCJPZ800xVtxCkN O/0zOP P5DD wzT M/L4D305M2iZQeuMCALYFUSqqF6YkSWHzMgwDu08 2p1
/GVGmtvKMKPk  gE22dce1sZ3p6w2cnrlHyVvF1DZxrIZd6jF2FzvD wdSevCvQQQrWNUqPUVh Pmsy0Dd3mhYS7R2IdCRWbJYbLJkGRKZtVE2H1YX1JugvDBwDCIEyoz1wTGIE NYiCRJEL9kjssMWe4AE2dOwIfkowlBC8MJO9FCGFfnlYmDR6TOQRohDhkccf
M4JCCBJkgTalihppmToVPB7C vo2Qr1smWSRTbU r0SBivcCDq1jRK5moYZV1S44TjjO3o5AzAlZCbTr IJkvafrAU2f QVZkOOu M1BTJGU7hu/
dXc/z9lSrWmT6439i7fvntfnwYZ q7ni3EX2 ypZTnb8M7 yVtze2hFuX5PKVxvXVa Duna1r98rXdpW1Sm6TvLFTXdsqmls7 SL5wcS4noO3du5XS
b9nf MG77//1dzP/ 1fv//1Pfm5 4cTDm /P/utG7d/
oRxSspqctp4H 7F2G9bjtFZI3Gj9RdiXZlpN2tZNVbFLHlCjJ9Pf/ x 29nu2wtS4DvXvQBu/ Dx5SKVSu
6/19r98/ReN/6RV /82zf VZMwfKdU4HAdZesMR UohVntW4LdzRpF9E mfuy4Z/JE7c596xgnDczDv4UjgrIHPe1Pfy
/DcKFUlpCCbDWHTZMsLimMTBdr7aQQrPYdCNqelYNoQQ Mx8iiPsCGpqLtYSEUNvJBxcv72Xy/4kYjvlQdseflgKslf9NWsb/Zo3/m8X/ kt1Mx8S1ozCCpnk6NK6rAX8T2QAZVPI6G2AT D8mW8Z/Ssr4b5Fa/78l/n/A 8kCe8raSXWnLIXaLzrl0P4ogYShJkv1lYr9CzDJWp7CWqv/980mfcTdiXqNc
MM Xj48rUolXBiMahm43skJqYV6sXZAEwhMWXX7XSwlaFsbj2AsZxjdLE3Ls lXlCcOj2tRSsxx0aiQz4dLvxH0bLMsrxH0oArOn/hv0/02DKhr1H3b4biIbH RbegNGXdvtPe3Dnh8Ai1799bvxwdIIQUgQVnakcRMMOGf5Ty /d8AZ1GUBvt
dkc/w E2OjjY21O/B2t5l664qm6W7rTUYYCy8PWPxAwCEnWfjm42P sAz0Pd qf1h2oZ9tiepwfABAh0chpwEwO4KUJF9fXqHADIQyoQCJxgObITABz/fYn1F 9SfIE
TzMQnJyKTCirE29xVM e5QYFZ69a/V4AitCULYd4Lr0Rz3qUY/PfPwLcaRGXQDwAAA    END MESSAGE ARCHIVE
