- title: __initial_text__
  contents:
  - '                         Entity MIB using SMIv2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ..............................................\
    \    2\n   2. The SNMP Network Management Framework .....................    2\n\
    \   2.1 Object Definitions .......................................    2\n   3.\
    \ Overview ..................................................    3\n   3.1 Terms\
    \ ....................................................    4\n   3.2 Relationship\
    \ to Community Strings ........................    5\n   3.3 Relationship to Proxy\
    \ Mechanisms .........................    5\n   3.4 Relationship to a Chassis\
    \ MIB ............................    5\n   3.5 Relationship to the Interfaces\
    \ MIB .......................    6\n   3.6 Relationship to the Other MIBs ...........................\
    \    6\n   3.7 Relationship to Naming Scopes ............................    6\n\
    \   3.8 Multiple Instances of the Entity MIB .....................    7\n   3.9\
    \ Re-Configuration of Entities .............................    7\n   3.10 MIB\
    \ Structure ...........................................    7\n   3.10.1 entityPhysical\
    \ Group ..................................    8\n   3.10.2 entityLogical Group\
    \ ...................................    8\n   3.10.3 entityMapping Group ...................................\
    \    8\n   3.10.4 entityGeneral Group ...................................    9\n\
    \   3.10.5 entityNotifications Group .............................    9\n   3.11\
    \ Multiple Agents .........................................    9\n   4. Definitions\
    \ ...............................................   10\n   5. Usage Examples ............................................\
    \   26\n   5.1 Router/Bridge ............................................   26\n\
    \   5.2 Repeaters ................................................   30\n   6.\
    \ Acknowledgements ..........................................   33\n   7. References\
    \ ................................................   34\n   8. Security Considerations\
    \ ...................................   35\n   9. Authors' Addresses ........................................\
    \   35\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information\
    \ Base (MIB)\n   for use with network management protocols in the Internet community.\n\
    \   In particular, it describes managed objects used for managing\n   multiple\
    \ logical and physical entities managed by a single SNMP\n   agent.\n"
- title: 2.  The SNMP Network Management Framework
  contents:
  - "2.  The SNMP Network Management Framework\n   The SNMP Network Management Framework\
    \ presently consists of three\n   major components.  They are:\n   o    the SMI,\
    \ described in RFC 1902 [1], - the mechanisms used for\n        describing and\
    \ naming objects for the purpose of management.\n   o    the MIB-II, STD 17, RFC\
    \ 1213 [2], - the core set of managed\n        objects for the Internet suite\
    \ of protocols.\n   o    the protocol, RFC 1157 [6] and/or RFC 1905 [4], - the\
    \ protocol\n        for accessing managed information.\n   Textual conventions\
    \ are defined in RFC 1903 [3], and conformance\n   statements are defined in RFC\
    \ 1904 [5].\n   The Framework permits new objects to be defined for the purpose\
    \ of\n   experimentation and evaluation.\n   This memo specifies a MIB module\
    \ that is compliant to the SNMPv2 SMI.\n   A semantically identical MIB conforming\
    \ to the SNMPv1 SMI can be\n   produced through the appropriate translation.\n"
- title: 2.1.  Object Definitions
  contents:
  - "2.1.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n \
    \  defined in the SMI.  In particular, each object type is named by an\n   OBJECT\
    \ IDENTIFIER, an administratively assigned name.  The object\n   type together\
    \ with an object instance serves to uniquely identify a\n   specific instantiation\
    \ of the object.  For human convenience, we\n   often use a textual string, termed\
    \ the descriptor, to refer to the\n   object type.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   There is a need for a standardized way of representing a single\
    \ agent\n   which supports multiple instances of one MIB.  This is presently true\n\
    \   for at least 3 standard MIBs, and is likely to become true for more\n   and\
    \ more MIBs as time passes.  For example:\n      - multiple instances of a bridge\
    \ supported within a single\n        device having a single agent;\n      - multiple\
    \ repeaters supported by a single agent;\n      - multiple OSPF backbone areas,\
    \ each one operating as part\n        of its own Autonomous System, and each identified\
    \ by the\n        same area-id (e.g., 0.0.0.0), supported inside a single\n  \
    \      router with one agent.\n   The fact that it is a single agent in each of\
    \ these cases implies\n   there is some relationship which binds all of these\
    \ entities\n   together.  Effectively, there is some \"overall\" physical entity\
    \ which\n   houses the sum of the things managed by that one agent, i.e., there\n\
    \   are multiple \"logical\" entities within a single physical entity.\n   Sometimes,\
    \ the overall physical entity contains multiple (smaller)\n   physical entities\
    \ and each logical entity is associated with a\n   particular physical entity.\
    \  Sometimes, the overall physical entity\n   is a \"compound\" of multiple physical\
    \ entities (e.g., a stack of\n   stackable hubs).\n   What is needed is a way\
    \ to determine exactly what logical entities\n   are managed by the agent (either\
    \ by SNMPv1 or SNMPv2), and thereby to\n   be able to communicate with the agent\
    \ about a particular logical\n   entity.  When different logical entities are\
    \ associated with\n   different physical entities within the overall physical\
    \ entity, it is\n   also useful to be able to use this information to distinguish\
    \ between\n   logical entities.\n   In these situations, there is no need for\
    \ varbinds for multiple\n   logical entities to be referenced in the same SNMP\
    \ message (although\n   that might be useful in the future).  Rather, it is sufficient,\
    \ and\n   in some situations preferable, to have the context/community in the\n\
    \   message identify the logical entity to which the varbinds apply.\n"
- title: 3.1.  Terms
  contents:
  - "3.1.  Terms\n   Some new terms are used throughout this document:\n   - Naming\
    \ Scope\n     A \"naming scope\" represents the set of information that may be\n\
    \     potentially accessed through a single SNMP operation. All instances\n  \
    \   within the naming scope share the same unique identifier space. For\n    \
    \ SNMPv1, a naming scope is identified by the value of the associated\n     'entLogicalCommunity'\
    \ instance.\n   - Multi-Scoped Object\n     A MIB object, for which identical\
    \ instance values identify\n     different managed information in different naming\
    \ scopes, is called\n     a \"multi-scoped\" MIB object.\n   - Single-Scoped Object\n\
    \     A MIB object, for which identical instance values identify the same\n  \
    \   managed information in different naming scopes, is called a\n     \"single-scoped\"\
    \ MIB object.\n   - Logical Entity\n     A managed system contains one or more\
    \ logical entities, each\n     represented by at most one instantiation of each\
    \ of a particular\n     set of MIB objects. A set of management functions is associated\n\
    \     with each logical entity. Examples of logical entities include\n     routers,\
    \ bridges, print-servers, etc.\n   - Physical Entity\n     A \"physical entity\"\
    \ or \"physical component\" represents an\n     identifiable physical resource\
    \ within a managed system. Zero or\n     more logical entities may utilize a physical\
    \ resource at any given\n     time. It is an implementation-specific manner as\
    \ to which physical\n     components are represented by an agent in the EntPhysicalTable.\n\
    \     Typically, physical resources (e.g. communications ports,\n     backplanes,\
    \ sensors, daughter-cards, power supplies, the overall\n     chassis) which can\
    \ be managed via functions associated with one or\n     more logical entities\
    \ are included in the MIB.\n   - Containment Tree\n     Each physical component\
    \ may optionally be modeled as 'contained'\n     within another physical component.\
    \ A \"containment-tree\" is the\n     conceptual sequence of entPhysicalIndex\
    \ values which uniquely\n     specifies the exact physical location of a physical\
    \ component\n     within the managed system. It is generated by 'following and\n\
    \     recording' each 'entPhysicalContainedIn' instance 'up the tree\n     towards\
    \ the root', until a value of zero indicating no further\n     containment is\
    \ found.\n     Note that chassis slots, which are capable of accepting one or\
    \ more\n     module types from one or more vendors, are modeled as containers\
    \ in\n     this MIB. The value of entPhysicalContainedIn for a particular\n  \
    \   'module' entity (entPhysicalClass value of 'module(9)') must be\n     equal\
    \ to an entPhysicalIndex that represents the parent 'container'\n     entity (associated\
    \ entPhysicalClass value of ('container(5)'). An\n     agent must represent both\
    \ empty and full containers in the\n     entPhysicalTable.\n"
- title: 3.2.  Relationship to Community Strings
  contents:
  - "3.2.  Relationship to Community Strings\n   For community-based SNMP, distinguishing\
    \ between different logical\n   entities is one (but not the only) purpose of\
    \ the community string\n   [6].  This is accommodated by representing each community\
    \ string as a\n   logical entity.\n   Note that different logical entities may\
    \ share the same naming scope\n   (and therefore the same values of entLogicalCommunity).\
    \ This is\n   possible, providing they have no need for the same instance of a\
    \ MIB\n   object to represent different managed information.\n"
- title: 3.3.  Relationship to Proxy Mechanisms
  contents:
  - "3.3.  Relationship to Proxy Mechanisms\n   The Entity MIB is designed to allow\
    \ functional component discovery.\n   The administrative relationships between\
    \ different logical entities\n   are not visible in any Entity MIB tables. An\
    \ NMS cannot determine\n   whether MIB instances in different naming scopes are\
    \ realized locally\n   or remotely (e.g. via some proxy mechanism) by examining\
    \ any\n   particular Entity MIB objects.\n   The management of administrative\
    \ framework functions is not an\n   explicit goal of the Entity MIB WG at this\
    \ time. This new area of\n   functionality may be revisited after some operational\
    \ experience with\n   the Entity MIB is gained.\n   Note that a network administrator\
    \ will likely be able to associate\n   community strings with naming scopes with\
    \ proprietary mechanisms, as\n   a matter of configuration. There are no mechanisms\
    \ for managing\n   naming scopes defined in this MIB.\n"
- title: 3.4.  Relationship to a Chassis MIB
  contents:
  - "3.4.  Relationship to a Chassis MIB\n   Some readers may recall that a previous\
    \ IETF working group attempted\n   to define a Chassis MIB.  No consensus was\
    \ reached by that working\n   group, possibly because its scope was too broad.\
    \  As such, it is not\n   the purpose of this MIB to be a \"Chassis MIB replacement\"\
    , nor is it\n   within the scope of this MIB to contain all the information which\n\
    \   might be necessary to manage a \"chassis\".  On the other hand, the\n   entities\
    \ represented by an implementation of this MIB might well be\n   contained in\
    \ a chassis.\n"
- title: 3.5.  Relationship to the Interfaces MIB
  contents:
  - "3.5.  Relationship to the Interfaces MIB\n   The Entity MIB contains a mapping\
    \ table identifying physical\n   components that have 'external values' (e.g.\
    \ ifIndex) associated with\n   them within a given naming scope.  This table can\
    \ be used to identify\n   the physical location of each interface in the ifTable\
    \ [7]. Since\n   ifIndex values in different contexts are not related to one another,\n\
    \   the interface to physical component associations are relative to the\n   same\
    \ logical entity within the agent.\n   The Entity MIB also contains an 'entPhysicalName'\
    \ object, which\n   approximates the semantics of the ifName object from the Interfaces\n\
    \   MIB [7] for all types of physical components.\n"
- title: 3.6.  Relationship to the Other MIBs
  contents:
  - "3.6.  Relationship to the Other MIBs\n   The Entity MIB contains a mapping table\
    \ identifying physical\n   components that have identifiers from other standard\
    \ MIBs associated\n   with them.  For example, this table can be used along with\
    \ the\n   physical mapping table to identify the physical location of each\n \
    \  repeater port in the rptrPortTable, or each interface in the ifTable.\n"
- title: 3.7.  Relationship to Naming Scopes
  contents:
  - "3.7.  Relationship to Naming Scopes\n   There is some question as to which MIB\
    \ objects may be returned within\n   a given naming scope. MIB objects which are\
    \ not multi-scoped within a\n   managed system are likely to ignore context information\
    \ in\n   implementation. In such a case, it is likely such objects will be\n \
    \  returned in all naming scopes (e.g. not just the 'main' naming\n   scope).\n\
    \   For example, a community string used to access the management\n   information\
    \ for logical device 'bridge2' may allow access to all the\n   non-bridge related\
    \ objects in the 'main' naming scope, as well as a\n   second instance of the\
    \ Bridge MIB.\n   It is an implementation-specific matter as to the isolation\
    \ of\n   single-scoped MIB objects by the agent. An agent may wish to limit\n\
    \   the objects returned in a particular naming scope to just the multi-\n   scoped\
    \ objects in that naming scope (e.g. system group and the Bridge\n   MIB).  In\
    \ this case, all single-scoped management information would\n   belong to a common\
    \ naming scope (e.g. 'main'), which itself may\n   contain some multi-scoped objects\
    \ (e.g. system group).\n"
- title: 3.8.  Multiple Instances of the Entity MIB
  contents:
  - "3.8.  Multiple Instances of the Entity MIB\n   It is possible that more than\
    \ one agent exists in a managed system,\n   and in such cases, multiple instances\
    \ of the Entity MIB (representing\n   the same managed objects) may be available\
    \ to an NMS.\n   In order to reduce complexity for agent implementation, multiple\n\
    \   instances of the Entity MIB are not required to be equivalent or even\n  \
    \ consistent. An NMS may be able to 'align' instances returned by\n   different\
    \ agents by examining the columns of each table, but vendor-\n   specific identifiers\
    \ and (especially) index values are likely to be\n   different. Each agent may\
    \ be managing different subsets of the entire\n   chassis as well.\n   When all\
    \ of a physically-modular device is represented by a single\n   agent, the entry\
    \ for which entPhysicalContainedIn has the value zero\n   would likely have 'chassis'\
    \ as the value of its entPhysicalClass;\n   alternatively, for an agent on a module\
    \ where the agent represents\n   only the physical entities on that module (not\
    \ those on other\n   modules), the entry for which entPhysicalContainedIn has\
    \ the value\n   zero would likely have 'module' as the value of its entPhysicalClass.\n\
    \   An agent implementation of the entLogicalTable is not required to\n   contain\
    \ information about logical entities managed primarily by other\n   agents. That\
    \ is, the entLogicalTAddress and entLogicalTDomain objects\n   in the entLogicalTable\
    \ are provided to support an historical\n   multiplexing mechanism, not to identify\
    \ other SNMP agents.\n   Note that the Entity MIB is a single-scoped MIB, in the\
    \ event an\n   agent represents the MIB in different naming scopes.\n"
- title: 3.9.  Re-Configuration of Entities
  contents:
  - "3.9.  Re-Configuration of Entities\n   All the MIB objects defined in this MIB\
    \ have at most a read-only\n   MAX-ACCESS clause, i.e., none are write-able. \
    \ This is a conscious\n   decision by the working group to limit this MIB's scope.\
    \  It is\n   possible that this restriction could be lifted after implementation\n\
    \   experience, by means of additional tables (using the AUGMENTS clause)\n  \
    \ for configuration and extended entity information.\n"
- title: 3.10.  MIB Structure
  contents:
  - "3.10.  MIB Structure\n   The Entity MIB contains five conformance groups:\n \
    \    - entityPhysical group\n        Describes the physical entities managed by\
    \ a single agent.\n     - entityLogical group\n        Describes the logical entities\
    \ managed by a single agent.\n     - entityMapping group\n        Describes the\
    \ associations between the physical entities,\n        logical entities, interfaces,\
    \ and non-interface ports managed\n        by a single agent.\n     -entityGeneral\
    \ group\n        Describes general system attributes shared by potentially\n \
    \       all types of entities managed by a single agent.\n     -entityNotifications\
    \ group\n        Contains status indication notifications.\n"
- title: 3.10.1.  entityPhysical Group
  contents:
  - "3.10.1.  entityPhysical Group\n   This group contains a single table to identify\
    \ physical system\n   components, called the entPhysicalTable.\n   The entPhysicalTable\
    \ contains one row per physical entity, and must\n   always contains at least\
    \ one row for an \"overall\" physical entity.\n   Each row is indexed by an arbitrary,\
    \ small integer, and contains a\n   description and type of the physical entity.\
    \  It also optionally\n   contains the index number of another entPhysicalEntry\
    \ indicating a\n   containment relationship between the two.\n"
- title: 3.10.2.  entityLogical Group
  contents:
  - "3.10.2.  entityLogical Group\n   This group contains a single table to identify\
    \ logical entities,\n   called the entLogicalTable.\n   The entLogicalTable contains\
    \ one row per logical entity.  Each row is\n   indexed by an arbitrary, small\
    \ integer and contains a name,\n   description, and type of the logical entity.\
    \ It also contains\n   information to allow SNMPv1 or SNMPv2C [9] access to the\
    \ MIB\n   information for the logical entity.\n"
- title: 3.10.3.  entityMapping Group
  contents:
  - "3.10.3.  entityMapping Group\n   This group contains a three tables to identify\
    \ associations between\n   different system components.\n   The entLPMappingTable\
    \ contains mappings between entLogicalIndex\n   values (logical entities) and\
    \ entPhysicalIndex values (the physical\n   components supporting that entity).\
    \ A logical entity can map to more\n   than one physical component, and more than\
    \ one logical entity can map\n   to (share) the same physical component.\n   The\
    \ entAliasMappingTable contains mappings between entLogicalIndex,\n   entPhysicalIndex\
    \ pairs and 'alias' object identifier values.  This\n   allows resources managed\
    \ with other MIBs (e.g. repeater ports, bridge\n   ports, physical and logical\
    \ interfaces) to be identified in the\n   physical entity hierarchy. Note that\
    \ each alias identifier is only\n   relevant in a particular naming scope.\n \
    \  The entPhysicalContainsTable contains simple mappings between\n   'entPhysicalContainedIn'\
    \ values for each container/containee\n   relationship in the managed system.\
    \ The indexing of this table allows\n   an NMS to quickly discover the 'entPhysicalIndex'\
    \ values for all\n   children of a given physical entity.\n"
- title: 3.10.4.  entityGeneral Group
  contents:
  - "3.10.4.  entityGeneral Group\n   This group contains general information relating\
    \ to the other object\n   groups.\n   At this time, the entGeneral group contains\
    \ a single scalar object\n   (entLastChangeTime), which represents the value of\
    \ sysUptime when any\n   part of the system configuration last changed.\n"
- title: 3.10.5.  entityNotifications Group
  contents:
  - "3.10.5.  entityNotifications Group\n   This group contains notification definitions\
    \ relating to the overall\n   status of the Entity MIB instantiation.\n"
- title: 3.11.  Multiple Agents
  contents:
  - "3.11.  Multiple Agents\n   Even though a primary motivation for this MIB is to\
    \ represent the\n   multiple logical entities supported by a single agent, it\
    \ is also\n   possible to use it to represent multiple logical entities supported\n\
    \   by multiple agents (in the same \"overall\" physical entity).  Indeed,\n \
    \  it is implicit in the SNMP architecture, that the number of agents is\n   transparent\
    \ to a network management station.\n   However, there is no agreement at this\
    \ time as to the degree of\n   cooperation which should be expected for agent\
    \ implementations.\n   Therefore, multiple agents within the same managed system\
    \ are free to\n   implement the Entity MIB independently.  (Refer the section\
    \ on\n   \"Multiple Instances of the Entity MIB\" for more details).\n"
- title: 4.  Definitions
  contents:
  - '4.  Definitions

    '
- title: ENTITY-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'ENTITY-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE,\n    mib-2, NOTIFICATION-TYPE\n  \
    \      FROM SNMPv2-SMI\n    TDomain, TAddress, DisplayString, TEXTUAL-CONVENTION,\n\
    \    AutonomousType, RowPointer, TimeStamp\n        FROM SNMPv2-TC\n    MODULE-COMPLIANCE,\
    \ OBJECT-GROUP\n        FROM SNMPv2-CONF;\n"
- title: entityMIB MODULE-IDENTITY
  contents:
  - "entityMIB MODULE-IDENTITY\n    LAST-UPDATED \"9605160000Z\"\n    ORGANIZATION\
    \ \"IETF ENTMIB Working Group\"\n    CONTACT-INFO\n            \"        WG E-mail:\
    \ entmib@cisco.com\n                     Subscribe: majordomo@cisco.com\n    \
    \                            msg body: subscribe entmib\n                    \
    \ Keith McCloghrie\n                     ENTMIB Working Group Chair\n        \
    \             Cisco Systems Inc.\n                     170 West Tasman Drive\n\
    \                     San Jose, CA 95134\n                     408-526-5260\n\
    \                     kzm@cisco.com\n                     Andy Bierman\n     \
    \                ENTMIB Working Group Editor\n                     Cisco Systems\
    \ Inc.\n                     170 West Tasman Drive\n                     San Jose,\
    \ CA 95134\n                     408-527-3711\n                     abierman@cisco.com\"\
    \n    DESCRIPTION\n            \"The MIB module for representing multiple logical\n\
    \            entities supported by a single SNMP agent.\"\n    ::= { mib-2 47\
    \ }\n"
- title: entityMIBObjects OBJECT IDENTIFIER ::= { entityMIB 1 }
  contents:
  - 'entityMIBObjects OBJECT IDENTIFIER ::= { entityMIB 1 }

    '
- title: -- MIB contains four groups
  contents:
  - '-- MIB contains four groups

    '
- title: entityPhysical OBJECT IDENTIFIER ::= { entityMIBObjects 1 }
  contents:
  - 'entityPhysical OBJECT IDENTIFIER ::= { entityMIBObjects 1 }

    '
- title: entityLogical  OBJECT IDENTIFIER ::= { entityMIBObjects 2 }
  contents:
  - 'entityLogical  OBJECT IDENTIFIER ::= { entityMIBObjects 2 }

    '
- title: entityMapping  OBJECT IDENTIFIER ::= { entityMIBObjects 3 }
  contents:
  - 'entityMapping  OBJECT IDENTIFIER ::= { entityMIBObjects 3 }

    '
- title: entityGeneral  OBJECT IDENTIFIER ::= { entityMIBObjects 4 }
  contents:
  - 'entityGeneral  OBJECT IDENTIFIER ::= { entityMIBObjects 4 }

    '
- title: -- Textual Conventions
  contents:
  - '-- Textual Conventions

    '
- title: PhysicalIndex ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalIndex ::= TEXTUAL-CONVENTION\n    STATUS          current\n    DESCRIPTION\n\
    \            \"An arbitrary value which uniquely identifies the physical\n   \
    \         entity.  The value is a small positive integer; index values\n     \
    \       for different physical entities are not necessarily\n            contiguous.\"\
    \n    SYNTAX          INTEGER (1..2147483647)\n"
- title: PhysicalClass ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalClass ::= TEXTUAL-CONVENTION\n    STATUS          current\n    DESCRIPTION\n\
    \            \"An enumerated value which provides an indication of the\n     \
    \       general hardware type of a particular physical entity.\"\n    SYNTAX \
    \     INTEGER  {\n        other(1),\n        unknown(2),\n        chassis(3),\n\
    \        backplane(4),\n        container(5),   -- e.g. slot or daughter-card\
    \ holder\n        powerSupply(6),\n        fan(7),\n        sensor(8),\n     \
    \   module(9),      -- e.g. plug-in card or daughter-card\n        port(10)\n\
    \    }\n"
- title: --           The Physical Entity Table
  contents:
  - '--           The Physical Entity Table

    '
- title: entPhysicalTable OBJECT-TYPE
  contents:
  - "entPhysicalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntPhysicalEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains one row per physical entity.  There is\n    \
    \        always at least one row for an 'overall' physical entity.\"\n    ::=\
    \ { entityPhysical 1 }\n"
- title: entPhysicalEntry       OBJECT-TYPE
  contents:
  - "entPhysicalEntry       OBJECT-TYPE\n    SYNTAX      EntPhysicalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular physical entity.\n            Each entry provides objects\
    \ (entPhysicalDescr,\n            entPhysicalVendorType, and entPhysicalClass)\
    \ to help an NMS\n            identify and characterize the entry, and objects\n\
    \            (entPhysicalContainedIn and entPhysicalParentRelPos) to help\n  \
    \          an NMS relate the particular entry to other entries in this\n     \
    \       table.\"\n    INDEX   { entPhysicalIndex }\n    ::= { entPhysicalTable\
    \ 1 }\n"
- title: EntPhysicalEntry ::= SEQUENCE {
  contents:
  - "EntPhysicalEntry ::= SEQUENCE {\n      entPhysicalIndex          PhysicalIndex,\n\
    \      entPhysicalDescr          DisplayString,\n      entPhysicalVendorType \
    \    AutonomousType,\n      entPhysicalContainedIn    INTEGER,\n      entPhysicalClass\
    \          PhysicalClass,\n      entPhysicalParentRelPos   INTEGER,\n      entPhysicalName\
    \           DisplayString\n"
- title: '}'
  contents:
  - '}

    '
- title: entPhysicalIndex    OBJECT-TYPE
  contents:
  - "entPhysicalIndex    OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ index for this entry.\"\n    ::= { entPhysicalEntry 1 }\n"
- title: entPhysicalDescr OBJECT-TYPE
  contents:
  - "entPhysicalDescr OBJECT-TYPE\n    SYNTAX      DisplayString\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n            \"A textual\
    \ description of physical entity.  This object\n            should contain a string\
    \ which identifies the manufacturer's\n            name for the physical entity,\
    \ and should be set to a\n            distinct value for each version or model\
    \ of the physical\n            entity. \"\n    ::= { entPhysicalEntry 2 }\n"
- title: entPhysicalVendorType OBJECT-TYPE
  contents:
  - "entPhysicalVendorType OBJECT-TYPE\n    SYNTAX      AutonomousType\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"An indication\
    \ of the vendor-specific hardware type of the\n            physical entity. Note\
    \ that this is different from the\n            definition of MIB-II's sysObjectID.\n\
    \            An agent should set this object to a enterprise-specific\n      \
    \      registration identifier value indicating the specific\n            equipment\
    \ type in detail.  The associated instance of\n            entPhysicalClass is\
    \ used to indicate the general type of\n            hardware device.\n       \
    \     If no vendor-specific registration identifier exists for\n            this\
    \ physical entity, or the value is unknown by this agent,\n            then the\
    \ value { 0 0 } is returned.\"\n    ::= { entPhysicalEntry 3 }\n"
- title: entPhysicalContainedIn OBJECT-TYPE
  contents:
  - "entPhysicalContainedIn OBJECT-TYPE\n    SYNTAX      INTEGER (0..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"The value of entPhysicalIndex for the physical entity which\n        \
    \    'contains' this physical entity.  A value of zero indicates\n           \
    \ this physical entity is not contained in any other physical\n            entity.\
    \  Note that the set of 'containment' relationships\n            define a strict\
    \ hierarchy; that is, recursion is not\n            allowed.\"\n    ::= { entPhysicalEntry\
    \ 4 }\n"
- title: entPhysicalClass OBJECT-TYPE
  contents:
  - "entPhysicalClass OBJECT-TYPE\n    SYNTAX      PhysicalClass\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n            \"An indication\
    \ of the general hardware type of the physical\n            entity.\n        \
    \    An agent should set this object to the standard enumeration\n           \
    \ value which most accurately indicates the general class of\n            the\
    \ physical entity, or the primary class if there is more\n            than one.\n\
    \            If no appropriate standard registration identifier exists\n     \
    \       for this physical entity, then the value 'other(1)' is\n            returned.\
    \ If the value is unknown by this agent, then the\n            value 'unknown(2)'\
    \ is returned.\"\n    ::= { entPhysicalEntry 5 }\n"
- title: entPhysicalParentRelPos OBJECT-TYPE
  contents:
  - "entPhysicalParentRelPos OBJECT-TYPE\n    SYNTAX      INTEGER (-1..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"An indication of the relative position of this 'child'\n            component\
    \ among all its 'sibling' components. Sibling\n            components are defined\
    \ as entPhysicalEntries which share the\n            same instance values of each\
    \ of the entPhysicalContainedIn\n            and entPhysicalClass objects.\n \
    \           An NMS can use this object to identify the relative ordering\n   \
    \         for all sibling components of a particular parent\n            (identified\
    \ by the entPhysicalContainedIn instance in each\n            sibling entry).\n\
    \            This value should match any external labeling of the\n          \
    \  physical component if possible. For example, for a module\n            labeled\
    \ as 'card #3', entPhysicalParentRelPos should have\n            the value '3'.\n\
    \            If the physical position of this component does not match\n     \
    \       any external numbering or clearly visible ordering, then\n           \
    \ user documentation or other external reference material\n            should\
    \ be used to determine the parent-relative position. If\n            this is not\
    \ possible, then the the agent should assign a\n            consistent (but possibly\
    \ arbitrary) ordering to a given set\n            of 'sibling' components, perhaps\
    \ based on internal\n            representation of the components.\n         \
    \   If the agent cannot determine the parent-relative position\n            for\
    \ some reason, or if the associated value of\n            entPhysicalContainedIn\
    \ is '0', then the value '-1' is\n            returned. Otherwise a non-negative\
    \ integer is returned,\n            indicating the parent-relative position of\
    \ this physical\n            entity.\n            Parent-relative ordering normally\
    \ starts from '1' and\n            continues to 'N', where 'N' represents the\
    \ highest\n            positioned child entity.  However, if the physical entities\n\
    \            (e.g. slots) are labeled from a starting position of zero,\n    \
    \        then the first sibling should be associated with a\n            entPhysicalParentRelPos\
    \ value of '0'.  Note that this\n            ordering may be sparse or dense,\
    \ depending on agent\n            implementation.\n            The actual values\
    \ returned are not globally meaningful, as\n            each 'parent' component\
    \ may use different numbering\n            algorithms. The ordering is only meaningful\
    \ among siblings\n            of the same parent component.\n            The agent\
    \ should retain parent-relative position values\n            across reboots, either\
    \ through algorithmic assignment or use\n            of non-volatile storage.\"\
    \n    ::= { entPhysicalEntry 6 }\n"
- title: entPhysicalName OBJECT-TYPE
  contents:
  - "entPhysicalName OBJECT-TYPE\n    SYNTAX      DisplayString\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The textual name of the\
    \ physical entity.  The value of this\n            object should be the name of\
    \ the component as assigned by\n            the local device and should be suitable\
    \ for use in commands\n            entered at the device's `console'.  This might\
    \ be a text\n            name, such as `console' or a simple component number\
    \ (e.g.\n            port or module number), such as `1', depending on the\n \
    \           physical component naming syntax of the device.\n            If there\
    \ is no local name, or this object is otherwise not\n            applicable, then\
    \ this object contains a zero-length string.\n            Note that the value\
    \ of entPhysicalName for two physical\n            entities will be the same in\
    \ the event that the console\n            interface does not distinguish between\
    \ them, e.g., slot-1\n            and the card in slot-1.\"\n    ::= { entPhysicalEntry\
    \ 7 }\n"
- title: --           The Logical Entity Table
  contents:
  - '--           The Logical Entity Table

    '
- title: entLogicalTable OBJECT-TYPE
  contents:
  - "entLogicalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntLogicalEntry\n  \
    \  MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n    \
    \        \"This table contains one row per logical entity.  At least\n       \
    \     one entry must exist.\"\n    ::= { entityLogical 1 }\n"
- title: entLogicalEntry       OBJECT-TYPE
  contents:
  - "entLogicalEntry       OBJECT-TYPE\n    SYNTAX      EntLogicalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular logical entity.  Entities\n            may be managed by\
    \ this agent or other SNMP agents (possibly)\n            in the same chassis.\"\
    \n    INDEX       { entLogicalIndex }\n    ::= { entLogicalTable 1 }\n"
- title: EntLogicalEntry ::= SEQUENCE {
  contents:
  - "EntLogicalEntry ::= SEQUENCE {\n      entLogicalIndex            INTEGER,\n \
    \     entLogicalDescr            DisplayString,\n      entLogicalType        \
    \     AutonomousType,\n      entLogicalCommunity        OCTET STRING,\n      entLogicalTAddress\
    \         TAddress,\n      entLogicalTDomain          TDomain\n"
- title: '}'
  contents:
  - '}

    '
- title: entLogicalIndex OBJECT-TYPE
  contents:
  - "entLogicalIndex OBJECT-TYPE\n    SYNTAX      INTEGER (1..2147483647)\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ value of this object uniquely identifies the logical\n            entity. The\
    \ value is a small positive integer; index values\n            for different logical\
    \ entities are are not necessarily\n            contiguous.\"\n    ::= { entLogicalEntry\
    \ 1 }\n"
- title: entLogicalDescr OBJECT-TYPE
  contents:
  - "entLogicalDescr OBJECT-TYPE\n    SYNTAX      DisplayString\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"A textual description\
    \ of the logical entity.  This object\n            should contain a string which\
    \ identifies the manufacturer's\n            name for the logical entity, and\
    \ should be set to a distinct\n            value for each version of the logical\
    \ entity. \"\n    ::= { entLogicalEntry 2 }\n"
- title: entLogicalType OBJECT-TYPE
  contents:
  - "entLogicalType OBJECT-TYPE\n    SYNTAX      AutonomousType\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"An indication of the\
    \ type of logical entity.  This will\n            typically be the OBJECT IDENTIFIER\
    \ name of the node in the\n            SMI's naming hierarchy which represents\
    \ the major MIB\n            module, or the majority of the MIB modules, supported\
    \ by the\n            logical entity.  For example:\n               a logical\
    \ entity of a regular host/router -> mib-2\n               a logical entity of\
    \ a 802.1d bridge -> dot1dBridge\n               a logical entity of a 802.3 repeater\
    \ -> snmpDot3RptrMgmt\n            If an appropriate node in the SMI's naming\
    \ hierarchy cannot\n            be identified, the value 'mib-2' should be used.\"\
    \n    ::= { entLogicalEntry 3 }\n"
- title: entLogicalCommunity OBJECT-TYPE
  contents:
  - "entLogicalCommunity OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (1..255))\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"An SNMPv1 or SNMPv2C community-string which can be used to\n         \
    \   access detailed management information for this logical\n            entity.\
    \  The agent should allow read access with this\n            community string\
    \ (to an appropriate subset of all managed\n            objects) and may also\
    \ choose to return a community string\n            based on the privileges of\
    \ the request used to read this\n            object.  Note that an agent may choose\
    \ to return a community\n            string with read-only privileges, even if\
    \ this object is\n            accessed with a read-write community string. However,\
    \ the\n            agent must take care not to return a community string which\n\
    \            allows more privileges than the community string used to\n      \
    \      access this object.\n            A compliant SNMP agent may wish to conserve\
    \ naming scopes by\n            representing multiple logical entities in a single\
    \ 'main'\n            naming scope.  This is possible when the logical entities\n\
    \            represented by the same value of entLogicalCommunity have no\n  \
    \          object instances in common.  For example, 'bridge1' and\n         \
    \   'repeater1' may be part of the main naming scope, but at\n            least\
    \ one additional community string is needed to represent\n            'bridge2'\
    \ and 'repeater2'.\n            Logical entities 'bridge1' and 'repeater1' would\
    \ be\n            represented by sysOREntries associated with the 'main'\n   \
    \         naming scope.\n            For agents not accessible via SNMPv1 or SNMPv2C,\
    \ the value\n            of this object is the empty-string.\"\n    ::= { entLogicalEntry\
    \ 4 }\n"
- title: entLogicalTAddress OBJECT-TYPE
  contents:
  - "entLogicalTAddress OBJECT-TYPE\n    SYNTAX      TAddress\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The transport service\
    \ address by which the logical entity\n            receives network management\
    \ traffic, formatted according to\n            the corresponding value of entLogicalTDomain.\n\
    \            For snmpUDPDomain, a TAddress is 6 octets long, the initial\n   \
    \         4 octets containing the IP-address in network-byte order and\n     \
    \       the last 2 containing the UDP port in network-byte order.\n          \
    \  Consult 'Transport Mappings for Version 2 of the Simple\n            Network\
    \ Management Protocol' (RFC 1906 [8]) for further\n            information on\
    \ snmpUDPDomain.\"\n    ::= { entLogicalEntry 5 }\n"
- title: entLogicalTDomain OBJECT-TYPE
  contents:
  - "entLogicalTDomain OBJECT-TYPE\n    SYNTAX      TDomain\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"Indicates the kind of\
    \ transport service by which the\n            logical entity receives network\
    \ management traffic.\n            Possible values for this object are presently\
    \ found in the\n            Transport Mappings for SNMPv2 document (RFC 1906 [8]).\"\
    \n    ::= { entLogicalEntry 6 }\n"
- title: entLPMappingTable OBJECT-TYPE
  contents:
  - "entLPMappingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntLPMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains zero or more rows of logical entity to\n    \
    \        physical equipment associations. For each logical entity\n          \
    \  known by this agent, there are zero or more mappings to the\n            physical\
    \ resources which are used to realize that logical\n            entity.\n    \
    \        An agent should limit the number and nature of entries in\n         \
    \   this table such that only meaningful and non-redundant\n            information\
    \ is returned. For example, in a system which\n            contains a single power\
    \ supply, mappings between logical\n            entities and the power supply\
    \ are not useful and should not\n            be included.\n            Also, only\
    \ the most appropriate physical component which is\n            closest to the\
    \ root of a particular containment tree should\n            be identified in an\
    \ entLPMapping entry.\n            For example, suppose a bridge is realized on\
    \ a particular\n            module, and all ports on that module are ports on\
    \ this\n            bridge. A mapping between the bridge and the module would\
    \ be\n            useful, but additional mappings between the bridge and each\n\
    \            of the ports on that module would be redundant (since the\n     \
    \       entPhysicalContainedIn hierarchy can provide the same\n            information).\
    \ If, on the other hand, more than one bridge\n            was utilizing ports\
    \ on this module, then mappings between\n            each bridge and the ports\
    \ it used would be appropriate.\n            Also, in the case of a single backplane\
    \ repeater, a mapping\n            for the backplane to the single repeater entity\
    \ is not\n            necessary.\"\n    ::= { entityMapping 1 }\n"
- title: entLPMappingEntry       OBJECT-TYPE
  contents:
  - "entLPMappingEntry       OBJECT-TYPE\n    SYNTAX      EntLPMappingEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular logical entity to physical\n            equipment association.\
    \ Note that the nature of the\n            association is not specifically identified\
    \ in this entry. It\n            is expected that sufficient information exists\
    \ in the MIBs\n            used to manage a particular logical entity to infer\
    \ how\n            physical component information is utilized.\"\n    INDEX  \
    \     { entLogicalIndex, entLPPhysicalIndex }\n    ::= { entLPMappingTable 1 }\n"
- title: EntLPMappingEntry ::= SEQUENCE {
  contents:
  - "EntLPMappingEntry ::= SEQUENCE {\n      entLPPhysicalIndex         PhysicalIndex\n"
- title: '}'
  contents:
  - '}

    '
- title: entLPPhysicalIndex OBJECT-TYPE
  contents:
  - "entLPPhysicalIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of this object identifies the index value of a\n            particular entPhysicalEntry\
    \ associated with the indicated\n            entLogicalEntity.\"\n    ::= { entLPMappingEntry\
    \ 1 }\n"
- title: -- logical entity/component to alias table
  contents:
  - '-- logical entity/component to alias table

    '
- title: entAliasMappingTable OBJECT-TYPE
  contents:
  - "entAliasMappingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntAliasMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains zero or more rows, representing\n           \
    \ mappings of logical entity and physical component to\n            external MIB\
    \ identifiers.  Each physical port in the system\n            may be associated\
    \ with a mapping to an external identifier,\n            which itself is associated\
    \ with a particular logical\n            entity's naming scope. A 'wildcard' mechanism\
    \ is provided to\n            indicate that an identifier is associated with more\
    \ than one\n            logical entity.\"\n    ::= { entityMapping 2 }\n"
- title: entAliasMappingEntry       OBJECT-TYPE
  contents:
  - "entAliasMappingEntry       OBJECT-TYPE\n    SYNTAX      EntAliasMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"Information about a particular physical equipment, logical\n    \
    \        entity to external identifier binding. Each logical\n            entity/physical\
    \ component pair may be associated with one\n            alias mapping.  The logical\
    \ entity index may also be used as\n            a 'wildcard' (refer to the entAliasLogicalIndexOrZero\
    \ object\n            DESCRIPTION clause for details.)\n            Note that\
    \ only entPhysicalIndex values which represent\n            physical ports (i.e.\
    \ associated entPhysicalClass value is\n            'port(10)') are permitted\
    \ to exist in this table.\"\n    INDEX { entPhysicalIndex, entAliasLogicalIndexOrZero\
    \ }\n    ::= { entAliasMappingTable 1 }\n"
- title: EntAliasMappingEntry ::= SEQUENCE {
  contents:
  - "EntAliasMappingEntry ::= SEQUENCE {\n      entAliasLogicalIndexOrZero       \
    \ INTEGER,\n      entAliasMappingIdentifier         RowPointer\n"
- title: '}'
  contents:
  - '}

    '
- title: entAliasLogicalIndexOrZero OBJECT-TYPE
  contents:
  - "entAliasLogicalIndexOrZero OBJECT-TYPE\n    SYNTAX      INTEGER (0..2147483647)\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"The value of this object uniquely identifies the logical\n      \
    \      entity which defines the naming scope for the associated\n            instance\
    \ of the 'entAliasMappingIdentifier' object.\n            If this object has a\
    \ non-zero value, then it identifies the\n            logical entity named by\
    \ the same value of entLogicalIndex.\n            If this object has a value of\
    \ zero, then the mapping between\n            the physical component and the alias\
    \ identifier for this\n            entAliasMapping entry is associated with all\
    \ unspecified\n            logical entities. That is, a value of zero (the default\n\
    \            mapping) identifies any logical entity which does not have\n    \
    \        an explicit entry in this table for a particular\n            entPhysicalIndex/entAliasMappingIdentifier\
    \ pair.\n            For example, to indicate that a particular interface (e.g.\n\
    \            physical component 33) is identified by the same value of\n     \
    \       ifIndex for all logical entities, the following instance\n           \
    \ might exist:\n                    entAliasMappingIdentifier.33.0 = ifIndex.5\n\
    \            In the event an entPhysicalEntry is associated differently\n    \
    \        for some logical entities, additional entAliasMapping\n            entries\
    \ may exist, e.g.:\n                    entAliasMappingIdentifier.33.0 = ifIndex.6\n\
    \                    entAliasMappingIdentifier.33.4 =  ifIndex.1\n           \
    \         entAliasMappingIdentifier.33.5 =  ifIndex.1\n                    entAliasMappingIdentifier.33.10\
    \ = ifIndex.12\n            Note that entries with non-zero entAliasLogicalIndexOrZero\n\
    \            index values have precedence over any zero-indexed entry. In\n  \
    \          this example, all logical entities except 4, 5, and 10,\n         \
    \   associate physical entity 33 with ifIndex.6.\"\n    ::= { entAliasMappingEntry\
    \ 1 }\n"
- title: entAliasMappingIdentifier OBJECT-TYPE
  contents:
  - "entAliasMappingIdentifier OBJECT-TYPE\n    SYNTAX      RowPointer\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of this object identifies a particular conceptual\n            row associated\
    \ with the indicated entPhysicalIndex and\n            entLogicalIndex pair.\n\
    \            Since only physical ports are modeled in this table, only\n     \
    \       entries which represent interfaces or ports are allowed.  If\n       \
    \     an ifEntry exists on behalf of a particular physical port,\n           \
    \ then this object should identify the associated 'ifEntry'.\n            For\
    \ repeater ports, the appropriate row in the\n            'rptrPortGroupTable'\
    \ should be identified instead.\n            For example, suppose a physical port\
    \ was represented by\n            entPhysicalEntry.3, entLogicalEntry.15 existed\
    \ for a\n            repeater, and entLogicalEntry.22 existed for a bridge.  Then\n\
    \            there might be two related instances of\n            entAliasMappingIdentifier:\n\
    \               entAliasMappingIdentifier.3.15 == rptrPortGroupIndex.5.2\n   \
    \            entAliasMappingIdentifier.3.22 == ifIndex.17\n            It is possible\
    \ that other mappings (besides interfaces and\n            repeater ports) may\
    \ be defined in the future, as required.\n            Bridge ports are identified\
    \ by examining the Bridge MIB and\n            appropriate ifEntries associated\
    \ with each 'dot1dBasePort',\n            and are thus not represented in this\
    \ table.\"\n    ::= { entAliasMappingEntry 2 }\n"
- title: -- physical mapping table
  contents:
  - '-- physical mapping table

    '
- title: entPhysicalContainsTable OBJECT-TYPE
  contents:
  - "entPhysicalContainsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntPhysicalContainsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"A table which exposes the container/containee relationships\n   \
    \         between physical entities. This table provides equivalent\n        \
    \    information found by constructing the virtual containment\n            tree\
    \ for a given entPhysicalTable but in a more direct\n            format.\"\n \
    \   ::= { entityMapping 3 }\n"
- title: entPhysicalContainsEntry OBJECT-TYPE
  contents:
  - "entPhysicalContainsEntry OBJECT-TYPE\n    SYNTAX      EntPhysicalContainsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"A single container/containee relationship.\"\n    INDEX       { entPhysicalIndex,\
    \ entPhysicalChildIndex }\n    ::= { entPhysicalContainsTable 1 }\n"
- title: EntPhysicalContainsEntry ::= SEQUENCE {
  contents:
  - "EntPhysicalContainsEntry ::= SEQUENCE {\n      entPhysicalChildIndex     PhysicalIndex\n"
- title: '}'
  contents:
  - '}

    '
- title: entPhysicalChildIndex OBJECT-TYPE
  contents:
  - "entPhysicalChildIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of entPhysicalIndex for the contained physical\n            entity.\"\n    ::=\
    \ { entPhysicalContainsEntry 1 }\n"
- title: -- last change time stamp for the whole MIB
  contents:
  - '-- last change time stamp for the whole MIB

    '
- title: entLastChangeTime OBJECT-TYPE
  contents:
  - "entLastChangeTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The value of sysUpTime\
    \ at the time any of these events\n            occur:\n                * a conceptual\
    \ row is created or deleted in any\n                  of these tables:\n     \
    \               - entPhysicalTable\n                    - entLogicalTable\n  \
    \                  - entLPMappingTable\n                    - entAliasMappingTable\n\
    \                    - entPhysicalContainsTable\n                * any instance\
    \ in the following list of objects\n                  changes value:\n       \
    \             - entPhysicalDescr\n                    - entPhysicalVendorType\n\
    \                    - entPhysicalContainedIn\n                    - entPhysicalClass\n\
    \                    - entPhysicalParentRelPos\n                    - entPhysicalName\n\
    \                    - entLogicalDescr\n                    - entLogicalType\n\
    \                    - entLogicalCommunity\n                    - entLogicalTAddress\n\
    \                    - entLogicalTDomain\n                    - entAliasMappingIdentifier\
    \ \"\n    ::= { entityGeneral 1 }\n"
- title: -- Entity MIB Trap Definitions
  contents:
  - '-- Entity MIB Trap Definitions

    '
- title: entityMIBTraps      OBJECT IDENTIFIER ::= { entityMIB 2 }
  contents:
  - 'entityMIBTraps      OBJECT IDENTIFIER ::= { entityMIB 2 }

    '
- title: entityMIBTrapPrefix OBJECT IDENTIFIER ::= { entityMIBTraps 0 }
  contents:
  - 'entityMIBTrapPrefix OBJECT IDENTIFIER ::= { entityMIBTraps 0 }

    '
- title: entConfigChange NOTIFICATION-TYPE
  contents:
  - "entConfigChange NOTIFICATION-TYPE\n    STATUS             current\n    DESCRIPTION\n\
    \            \"An entConfigChange trap is sent when the value of\n           \
    \ entLastChangeTime changes. It can be utilized by an NMS to\n            trigger\
    \ logical/physical entity table maintenance polls.\n            An agent must\
    \ not generate more than one entConfigChange\n            'trap-event' in a five\
    \ second period, where a 'trap-event'\n            is the transmission of a single\
    \ trap PDU to a list of trap\n            destinations.  If additional configuration\
    \ changes occur\n            within the five second 'throttling' period, then\
    \ these\n            trap-events should be suppressed by the agent. An NMS should\n\
    \            periodically check the value of entLastChangeTime to detect\n   \
    \         any missed entConfigChange trap-events, e.g. due to\n            throttling\
    \ or transmission loss.\"\n   ::= { entityMIBTrapPrefix 1 }\n"
- title: -- conformance information
  contents:
  - '-- conformance information

    '
- title: entityConformance OBJECT IDENTIFIER ::= { entityMIB 3 }
  contents:
  - 'entityConformance OBJECT IDENTIFIER ::= { entityMIB 3 }

    '
- title: entityCompliances OBJECT IDENTIFIER ::= { entityConformance 1 }
  contents:
  - 'entityCompliances OBJECT IDENTIFIER ::= { entityConformance 1 }

    '
- title: entityGroups      OBJECT IDENTIFIER ::= { entityConformance 2 }
  contents:
  - 'entityGroups      OBJECT IDENTIFIER ::= { entityConformance 2 }

    '
- title: -- compliance statements
  contents:
  - '-- compliance statements

    '
- title: entityCompliance MODULE-COMPLIANCE
  contents:
  - "entityCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n  \
    \          \"The compliance statement for SNMP entities which implement\n    \
    \        the Entity MIB.\"\n    MODULE  -- this module\n        MANDATORY-GROUPS\
    \ { entityPhysicalGroup,\n                           entityLogicalGroup,\n   \
    \                        entityMappingGroup,\n                           entityGeneralGroup,\n\
    \                           entityNotificationsGroup }\n    ::= { entityCompliances\
    \ 1 }\n"
- title: -- MIB groupings
  contents:
  - '-- MIB groupings

    '
- title: entityPhysicalGroup    OBJECT-GROUP
  contents:
  - "entityPhysicalGroup    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalDescr,\n\
    \              entPhysicalVendorType,\n              entPhysicalContainedIn,\n\
    \              entPhysicalClass,\n              entPhysicalParentRelPos,\n   \
    \           entPhysicalName\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects which are used to represent\n       \
    \     physical system components, for which a single agent\n            provides\
    \ management information.\"\n    ::= { entityGroups 1 }\n"
- title: entityLogicalGroup    OBJECT-GROUP
  contents:
  - "entityLogicalGroup    OBJECT-GROUP\n    OBJECTS {\n              entLogicalDescr,\n\
    \              entLogicalType,\n              entLogicalCommunity,\n         \
    \     entLogicalTAddress,\n              entLogicalTDomain\n            }\n  \
    \  STATUS  current\n    DESCRIPTION\n            \"The collection of objects which\
    \ are used to represent the\n            list of logical entities for which a\
    \ single agent provides\n            management information.\"\n    ::= { entityGroups\
    \ 2 }\n"
- title: entityMappingGroup    OBJECT-GROUP
  contents:
  - "entityMappingGroup    OBJECT-GROUP\n    OBJECTS {\n              entLPPhysicalIndex,\n\
    \              entAliasMappingIdentifier,\n              entPhysicalChildIndex\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects which are used to represent the\n            associations between\
    \ multiple logical entities, physical\n            components, interfaces, and\
    \ port identifiers for which a\n            single agent provides management information.\"\
    \n    ::= { entityGroups 3 }\n"
- title: entityGeneralGroup    OBJECT-GROUP
  contents:
  - "entityGeneralGroup    OBJECT-GROUP\n    OBJECTS {\n              entLastChangeTime\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects which are used to represent\n            general entity information\
    \ for which a single agent provides\n            management information.\"\n \
    \   ::= { entityGroups 4 }\n"
- title: entityNotificationsGroup NOTIFICATION-GROUP
  contents:
  - "entityNotificationsGroup NOTIFICATION-GROUP\n    NOTIFICATIONS { entConfigChange\
    \ }\n    STATUS        current\n    DESCRIPTION\n            \"The collection\
    \ of notifications used to indicate Entity MIB\n            data consistency and\
    \ general status information.\"\n    ::= { entityGroups 5 }\n"
- title: END
  contents:
  - 'END

    '
- title: 5.  Usage Examples
  contents:
  - "5.  Usage Examples\n   The following sections iterate the instance values for\
    \ two example\n   networking devices. These examples are kept simple to make them\
    \ more\n   understandable. Auxiliary components, such as fans, sensors, empty\n\
    \   slots, and sub-modules are not shown, but might be modeled in real\n   implementations.\n"
- title: 5.1.  Router/Bridge
  contents:
  - "5.1.  Router/Bridge\n   A router containing two slots.  Each slot contains a\
    \ 3 port\n   router/bridge module. Each port is represented in the ifTable.  There\n\
    \   are two logical instances of OSPF running and two logical bridges:\n  Physical\
    \ entities -- entPhysicalTable:\n    1 Field-replaceable physical chassis:\n \
    \     entPhysicalDescr.1 ==             \"Acme Chassis Model 100\"\n      entPhysicalVendorType.1\
    \  ==       acmeProducts.chassisTypes.1\n      entPhysicalContainedIn.1 ==   \
    \    0\n      entPhysicalClass.1 ==             chassis(3)\n      entPhysicalParentRelPos.1\
    \ ==      0\n      entPhysicalName.1 ==              '100-A'\n    2 slots within\
    \ the chassis:\n      entPhysicalDescr.2 ==             \"Acme Chassis Slot Type\
    \ AA\"\n      entPhysicalVendorType.2  ==       acmeProducts.slotTypes.1\n   \
    \   entPhysicalContainedIn.2 ==       1\n      entPhysicalClass.2 ==         \
    \    container(5)\n      entPhysicalParentRelPos.2 ==      1\n      entPhysicalName.2\
    \ ==              'S1'\n      entPhysicalDescr.3 ==             \"Acme Chassis\
    \ Slot Type AA\"\n      entPhysicalVendorType.3  ==       acmeProducts.slotTypes.1\n\
    \      entPhysicalContainedIn.3 ==       1\n      entPhysicalClass.3 ==      \
    \       container(5)\n      entPhysicalParentRelPos.3 ==      2\n      entPhysicalName.3\
    \ ==              'S2'\n    2 Field-replaceable modules:\n    Slot 1 contains\
    \ a module with 3 ports:\n      entPhysicalDescr.4 ==             \"Acme Router-100\"\
    \n      entPhysicalVendorType.4  ==       acmeProducts.moduleTypes.14\n      entPhysicalContainedIn.4\
    \ ==       2\n      entPhysicalClass.4 ==             module(9)\n      entPhysicalParentRelPos.4\
    \ ==      1\n      entPhysicalName.4 ==              'M1'\n      entPhysicalDescr.5\
    \ ==             \"Acme Ethernet-100 Port Rev G\"\n      entPhysicalVendorType.5\
    \  ==       acmeProducts.portTypes.2\n      entPhysicalContainedIn.5 ==      \
    \ 4\n      entPhysicalClass.5 ==             port(10)\n      entPhysicalParentRelPos.5\
    \ ==      1\n      entPhysicalName.5 ==              'P1'\n      entPhysicalDescr.6\
    \ ==             \"Acme Ethernet-100 Port Rev G\"\n      entPhysicalVendorType.6\
    \  ==       acmeProducts.portTypes.2\n      entPhysicalContainedIn.6 ==      \
    \ 4\n      entPhysicalClass.6 ==             port(10)\n      entPhysicalParentRelPos.6\
    \ ==      2\n      entPhysicalName.6 ==              'P2'\n      entPhysicalDescr.7\
    \ ==             \"Acme Router-100 F-Port: Rev B\"\n      entPhysicalVendorType.7\
    \  ==       acmeProducts.portTypes.3\n      entPhysicalContainedIn.7 ==      \
    \ 4\n      entPhysicalClass.7 ==             port(10)\n      entPhysicalParentRelPos.7\
    \ ==      3\n      entPhysicalName.7 ==              'P3'\n   Slot 2 contains\
    \ another 3-port module:\n      entPhysicalDescr.8 ==             \"Acme Router-100\
    \ Comm Module: Rev C\"\n      entPhysicalVendorType.8  ==       acmeProducts.moduleTypes.15\n\
    \      entPhysicalContainedIn.8 ==       3\n      entPhysicalClass.8 ==      \
    \       module(9)\n      entPhysicalParentRelPos.8 ==      1\n      entPhysicalName.8\
    \ ==              'M2'\n      entPhysicalDescr.9 ==             \"Acme Fddi-100\
    \ Port Rev CC\"\n      entPhysicalVendorType.9 ==        acmeProducts.portTypes.5\n\
    \      entPhysicalContainedIn.9 ==       8\n      entPhysicalClass.9 ==      \
    \       port(10)\n      entPhysicalParentRelPos.9 ==      1\n      entPhysicalName.9\
    \ ==              'FDDI Primary'\n      entPhysicalDescr.10 ==            \"Acme\
    \ Ethernet-100 Port Rev G\"\n      entPhysicalVendorType.10 ==       acmeProducts.portTypes.2\n\
    \      entPhysicalContainedIn.10 ==      8\n      entPhysicalClass.10 ==     \
    \       port(10)\n      entPhysicalParentRelPos.10 ==     2\n      entPhysicalName.10\
    \ ==             'Ethernet A'\n      entPhysicalDescr.11 ==            \"Acme\
    \ Ethernet-100 Port Rev G\"\n      entPhysicalVendorType.11 ==       acmeProducts.portTypes.2\n\
    \      entPhysicalContainedIn.11 ==      8\n      entPhysicalClass.11 ==     \
    \       port(10)\n      entPhysicalParentRelPos.11 ==     3\n      entPhysicalName.11\
    \ ==             'Ethernet B'\n   Logical entities -- entLogicalTable\n    2 OSPF\
    \ instances:\n      entLogicalDescr.1 ==            \"Acme OSPF v1.1\"\n     \
    \ entLogicalType.1 ==             ospf\n      entLogicalCommunity.1 ==       \
    \ \"public-ospf1\"\n      entLogicalTAddress.1 ==         124.125.126.127:161\n\
    \      entLogicalTDomain.1 ==          snmpUDPDomain\n      entLogicalDescr.2\
    \ ==            \"Acme OSPF v1.1\"\n      entLogicalType.2 ==             ospf\n\
    \      entLogicalCommunity.2 ==        \"public-ospf2\"\n      entLogicalTAddress.2\
    \ ==         124.125.126.127:161\n      entLogicalTDomain.2 ==          snmpUDPDomain\n\
    \    2 logical bridges:\n      entLogicalDescr.3 ==            \"Acme Bridge v2.1.1\"\
    \n      entLogicalType.3  ==            dod1dBridge\n      entLogicalCommunity.3\
    \ ==        \"public-bridge1\"\n      entLogicalTAddress.3 ==         124.125.126.127:161\n\
    \      entLogicalTDomain.3 ==          snmpUDPDomain\n      entLogicalDescr.4\
    \ ==            \"Acme Bridge v2.1.1\"\n      entLogicalType.4 ==            \
    \ dod1dBridge\n      entLogicalCommunity.4 ==        \"public-bridge2\"\n    \
    \  entLogicalTAddress.4 ==         124.125.126.127:161\n      entLogicalTDomain.4\
    \ ==          snmpUDPDomain\n"
- title: 'Logical to Physical Mappings:'
  contents:
  - "Logical to Physical Mappings:\n  1st OSPF instance: uses module 1-port 1\n  \
    \    entLPPhysicalIndex.1.5 ==         5\n  2nd OSPF instance: uses module 2-port\
    \ 1\n      entLPPhysicalIndex.2.9 ==         9\n  1st bridge group: uses module\
    \ 1, all ports\n  [ed. -- Note that these mappings are included in the table since\n\
    \  another logical entity (1st OSPF) utilizes one of the\n  ports. If this were\
    \ not the case, then a single mapping\n  to the module (e.g. entLPPhysicalIndex.3.4)\
    \ would be\n  present instead. ]\n      entLPPhysicalIndex.3.5 ==         5\n\
    \      entLPPhysicalIndex.3.6 ==         6\n      entLPPhysicalIndex.3.7 ==  \
    \       7\n  2nd bridge group: uses module 2, all ports\n      entLPPhysicalIndex.4.9\
    \  ==        9\n      entLPPhysicalIndex.4.10 ==        10\n      entLPPhysicalIndex.4.11\
    \ ==        11\n"
- title: 'Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:'
  contents:
  - "Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:\n  Example\
    \ 1: ifIndex values are global to all logical entities\n      entAliasMappingIdentifier.5.0\
    \   ==        ifIndex.1\n      entAliasMappingIdentifier.6.0   ==        ifIndex.2\n\
    \      entAliasMappingIdentifier.7.0   ==        ifIndex.3\n      entAliasMappingIdentifier.9.0\
    \   ==        ifIndex.4\n      entAliasMappingIdentifier.10.0  ==        ifIndex.5\n\
    \      entAliasMappingIdentifier.11.0  ==        ifIndex.6\n  Example 2: ifIndex\
    \ values are not shared by all logical entities\n      entAliasMappingIdentifier.5.0\
    \   ==        ifIndex.1\n      entAliasMappingIdentifier.5.3   ==        ifIndex.101\n\
    \      entAliasMappingIdentifier.6.0   ==        ifIndex.2\n      entAliasMappingIdentifier.6.3\
    \   ==        ifIndex.102\n      entAliasMappingIdentifier.7.0   ==        ifIndex.3\n\
    \      entAliasMappingIdentifier.7.3   ==        ifIndex.103\n      entAliasMappingIdentifier.9.0\
    \   ==        ifIndex.4\n      entAliasMappingIdentifier.9.3   ==        ifIndex.204\n\
    \      entAliasMappingIdentifier.10.0  ==        ifIndex.5\n      entAliasMappingIdentifier.10.3\
    \  ==        ifIndex.205\n      entAliasMappingIdentifier.11.0  ==        ifIndex.6\n\
    \      entAliasMappingIdentifier.11.3  ==        ifIndex.206\n"
- title: Physical Containment Tree -- entPhysicalContainsTable
  contents:
  - "Physical Containment Tree -- entPhysicalContainsTable\n  chassis has two containers:\n\
    \      entPhysicalChildIndex.1.2 = 2\n      entPhysicalChildIndex.1.3 = 3\n  container\
    \ 1 has a module:\n      entPhysicalChildIndex.2.4 = 4\n  container 2 has a module:\n\
    \      entPhysicalChildIndex.3.8 = 8\n  module 1 has 3 ports:\n      entPhysicalChildIndex.4.5\
    \ = 5\n      entPhysicalChildIndex.4.6 = 6\n      entPhysicalChildIndex.4.7 =\
    \ 7\n  module 2 has 3 ports:\n      entPhysicalChildIndex.8.9 = 9\n      entPhysicalChildIndex.8.10\
    \ = 10\n      entPhysicalChildIndex.1.11 = 11\n"
- title: 5.2.  Repeaters
  contents:
  - "5.2.  Repeaters\n   A 3-slot Hub with 2 backplane ethernet segments.  Slot three\
    \ is\n   empty, and the remaining slots contain ethernet repeater modules.\n \
    \  [ed. -- Note that a replacement for the current Repeater MIB (RFC\n   1516)\
    \ is likely to emerge soon, and it will no longer be necessary to\n   access repeater\
    \ MIB data in different naming scopes.]\n"
- title: 'Physical entities -- entPhysicalTable:'
  contents:
  - "Physical entities -- entPhysicalTable:\n   1 Field-replaceable physical chassis:\n\
    \      entPhysicalDescr.1 ==          \"Acme Chassis Model 110\"\n      entPhysicalVendorType.1\
    \ ==     acmeProducts.chassisTypes.2\n      entPhysicalContainedIn.1 ==    0\n\
    \      entPhysicalClass.1 ==          chassis(3)\n      entPhysicalParentRelPos.1\
    \ ==   0\n      entPhysicalName.1 ==           '110-B'\n   2 Chassis Ethernet\
    \ Backplanes:\n      entPhysicalDescr.2 ==          \"Acme Ethernet Backplane\
    \ Type A\"\n      entPhysicalVendorType.2 ==     acmeProducts.backplaneTypes.1\n\
    \      entPhysicalContainedIn.2 ==    1\n      entPhysicalClass.2 ==         \
    \ backplane(4)\n      entPhysicalParentRelPos.2 ==   1\n      entPhysicalName.2\
    \ ==           'B1'\n      entPhysicalDescr.3 ==          \"Acme Ethernet Backplane\
    \ Type A\"\n      entPhysicalVendorType.3  ==    acmeProducts.backplaneTypes.1\n\
    \      entPhysicalContainedIn.3 ==    1\n      entPhysicalClass.3 ==         \
    \ backplane(4)\n      entPhysicalParentRelPos.3 ==   2\n      entPhysicalName.3\
    \ ==           'B2'\n   3 slots within the chassis:\n      entPhysicalDescr.4\
    \ ==          \"Acme Hub Slot Type RB\"\n      entPhysicalVendorType.4  ==   \
    \ acmeProducts.slotTypes.5\n      entPhysicalContainedIn.4 ==    1\n      entPhysicalClass.4\
    \ ==          container(5)\n      entPhysicalParentRelPos.4 ==   1\n      entPhysicalName.4\
    \ ==           'Slot 1'\n      entPhysicalDescr.5 ==          \"Acme Hub Slot\
    \ Type RB\"\n      entPhysicalVendorType.5  ==    acmeProducts.slotTypes.5\n \
    \     entPhysicalContainedIn.5 ==    1\n      entPhysicalClass.5 ==          container(5)\n\
    \      entPhysicalParentRelPos.5 ==   2\n      entPhysicalName.5 ==          \
    \ 'Slot 2'\n      entPhysicalDescr.6 ==          \"Acme Hub Slot Type RB\"\n \
    \     entPhysicalVendorType.6  ==    acmeProducts.slotTypes.5\n      entPhysicalContainedIn.6\
    \ ==    1\n      entPhysicalClass.6 ==          container(5)\n      entPhysicalParentRelPos.6\
    \ ==   3\n      entPhysicalName.6 ==           'Slot 3'\n   Slot 1 contains a\
    \ plug-in module with 4 10-BaseT ports:\n      entPhysicalDescr.7  ==        \
    \ \"Acme 10Base-T Module 114 Rev A\"\n      entPhysicalVendorType.7   ==   acmeProducts.moduleTypes.32\n\
    \      entPhysicalContainedIn.7  ==   4\n      entPhysicalClass.7 ==         \
    \ module(9)\n      entPhysicalParentRelPos.7 ==   1\n      entPhysicalName.7 ==\
    \           'M1'\n      entPhysicalDescr.8  ==         \"Acme 10Base-T Port RB\
    \ Rev A\"\n      entPhysicalVendorType.8   ==   acmeProducts.portTypes.10\n  \
    \    entPhysicalContainedIn.8  ==   7\n      entPhysicalClass.8 ==          port(10)\n\
    \      entPhysicalParentRelPos.8 ==   1\n      entPhysicalName.8 ==          \
    \ 'Ethernet-A'\n      entPhysicalDescr.9  ==         \"Acme 10Base-T Port RB Rev\
    \ A\"\n      entPhysicalVendorType.9   ==   acmeProducts.portTypes.10\n      entPhysicalContainedIn.9\
    \  ==   7\n      entPhysicalClass.9 ==          port(10)\n      entPhysicalParentRelPos.9\
    \ ==   2\n      entPhysicalName.9 ==           'Ethernet-B'\n      entPhysicalDescr.10\
    \ ==         \"Acme 10Base-T Port RB Rev B\"\n      entPhysicalVendorType.10 \
    \ ==   acmeProducts.portTypes.10\n      entPhysicalContainedIn.10 ==   7\n   \
    \   entPhysicalClass.10 ==         port(10)\n      entPhysicalParentRelPos.10\
    \ ==  3\n      entPhysicalName.10 ==          'Ethernet-C'\n      entPhysicalDescr.11\
    \ ==         \"Acme 10Base-T Port RB Rev B\"\n      entPhysicalVendorType.11 \
    \ ==   acmeProducts.portTypes.10\n      entPhysicalContainedIn.11 ==   7\n   \
    \   entPhysicalClass.11 ==         port(10)\n      entPhysicalParentRelPos.11\
    \ ==  4\n      entPhysicalName.11 ==          'Ethernet-D'\n   Slot 2 contains\
    \ another ethernet module with 2 ports.\n      entPhysicalDescr.12 ==        \
    \ \"Acme 10Base-T Module Model 4 Rev A\"\n      entPhysicalVendorType.12 ==  \
    \  acmeProducts.moduleTypes.30\n      entPhysicalContainedIn.12 =    5\n     \
    \ entPhysicalClass.12 ==         module(9)\n      entPhysicalParentRelPos.12 ==\
    \  1\n      entPhysicalName.12 ==          'M2'\n      entPhysicalDescr.13 ==\
    \         \"Acme 802.3 AUI Port Rev A\"\n      entPhysicalVendorType.13  ==  \
    \ acmeProducts.portTypes.11\n      entPhysicalContainedIn.13 ==   12\n      entPhysicalClass.13\
    \ ==         port(10)\n      entPhysicalParentRelPos.13 ==  1\n      entPhysicalName.13\
    \ ==          'AUI'\n      entPhysicalDescr.14 ==         \"Acme 10Base-T Port\
    \ RD Rev B\"\n      entPhysicalVendorType.14  ==   acmeProducts.portTypes.14\n\
    \      entPhysicalContainedIn.14 ==   12\n      entPhysicalClass.14 ==       \
    \  port(10)\n      entPhysicalParentRelPos.14 ==  2\n      entPhysicalName.14\
    \ ==          'E2'\n"
- title: Logical entities -- entLogicalTable
  contents:
  - "Logical entities -- entLogicalTable\n   Repeater 1--comprised of any ports attached\
    \ to backplane 1\n      entLogicalDescr.1 ==         \"Acme repeater v3.1\"\n\
    \      entLogicalType.1  ==         snmpDot3RptrMgt\n      entLogicalCommunity.1\
    \        \"public-repeater1\"\n      entLogicalTAddress.1 ==      124.125.126.127:161\n\
    \      entLogicalTDomain.1 ==       snmpUDPDomain\n   Repeater 2--comprised of\
    \ any ports attached to backplane 2:\n      entLogicalDescr.2 ==         \"Acme\
    \ repeater v3.1\"\n      entLogicalType.2  ==         snmpDot3RptrMgt\n      entLogicalCommunity.2\
    \ ==     \"public-repeater2\"\n      entLogicalTAddress.2 ==      124.125.126.127:161\n\
    \      entLogicalTDomain.2 ==       snmpUDPDomain\n"
- title: 'Logical to Physical Mappings -- entLPMappingTable:'
  contents:
  - "Logical to Physical Mappings -- entLPMappingTable:\n  repeater1 uses backplane\
    \ 1, slot 1-ports 1 & 2, slot 2-port 1\n  [ed. -- Note that a mapping to the module\
    \ is not included,\n   since in this example represents a port-switchable hub.\n\
    \   Even though all ports on the module could belong to the\n   same repeater\
    \ as a matter of configuration, the LP port\n   mappings should not be replaced\
    \ dynamically with a single\n   mapping for the module (e.g. entLPPhysicalIndex.1.7).\n\
    \   If all ports on the module shared a single backplane connection,\n   then\
    \ a single mapping for the module would be more appropriate. ]\n     entLPPhysicalIndex.1.2\
    \ ==          2\n     entLPPhysicalIndex.1.8 ==          8\n     entLPPhysicalIndex.1.9\
    \ ==          9\n     entLPPhysicalIndex.1.13 ==         13\n  repeater2 uses\
    \ backplane 2, slot 1-ports 3 & 4, slot 2-port 2\n      entLPPhysicalIndex.2.3\
    \ ==         3\n      entLPPhysicalIndex.2.10 ==        10\n      entLPPhysicalIndex.2.11\
    \ ==        11\n      entLPPhysicalIndex.2.14 ==        14\n"
- title: 'Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:'
  contents:
  - "Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:\n  Repeater\
    \ Port Identifier values are shared by both repeaters:\n      entAliasMappingIdentifier.8.0\
    \ ==  rptrPortGroupIndex.1.1\n      entAliasMappingIdentifier.9.0 ==  rptrPortGroupIndex.1.2\n\
    \      entAliasMappingIdentifier.10.0 == rptrPortGroupIndex.1.3\n      entAliasMappingIdentifier.11.0\
    \ == rptrPortGroupIndex.1.4\n      entAliasMappingIdentifier.13.0 == rptrPortGroupIndex.2.1\n\
    \      entAliasMappingIdentifier.14.0 == rptrPortGroupIndex.2.2\n"
- title: Physical Containment Tree -- entPhysicalContainsTable
  contents:
  - "Physical Containment Tree -- entPhysicalContainsTable\n  chassis has two backplanes\
    \ and three containers:\n      entPhysicalChildIndex.1.2 = 2\n      entPhysicalChildIndex.1.3\
    \ = 3\n      entPhysicalChildIndex.1.4 = 4\n      entPhysicalChildIndex.1.5 =\
    \ 5\n      entPhysicalChildIndex.1.6 = 6\n  container 1 has a module:\n      entPhysicalChildIndex.4.7\
    \ = 7\n  container 2 has a module\n      entPhysicalChildIndex.5.12 = 12\n  [ed.\
    \ - in this example, container 3 is empty.]\n  module 1 has 4 ports:\n      entPhysicalChildIndex.7.8\
    \ = 8\n      entPhysicalChildIndex.7.9 = 9\n      entPhysicalChildIndex.7.10 =\
    \ 10\n      entPhysicalChildIndex.7.11 = 11\n  module 2 has 2 ports:\n      entPhysicalChildIndex.12.13\
    \ = 13\n      entPhysicalChildIndex.12.14 = 14\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document was produced by the IETF Entity MIB Working\
    \ Group.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: '[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Structure of Management Information for version 2\n     of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC 1902,\n     January 1996.\n"
- title: '[2]  McCloghrie, K., and M. Rose, Editors, "Management Information Base'
  contents:
  - "[2]  McCloghrie, K., and M. Rose, Editors, \"Management Information Base\n  \
    \   for Network Management of TCP/IP-based internets: MIB-II\", STD 17,\n    \
    \ RFC 1213, Hughes LAN Systems, Performance Systems International,\n     March\
    \ 1991.\n"
- title: '[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Textual Conventions for version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1903, January 1996.\n"
- title: '[4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Protocol Operations for version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1905, January 1996.\n"
- title: '[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Conformance Statements for version 2 of the Simple\n     Network Management\
    \ Protocol (SNMPv2)\", RFC 1904, January 1996.\n"
- title: '[6]  Case, J., M. Fedor, M. Schoffstall, J. Davin, "Simple Network'
  contents:
  - "[6]  Case, J., M. Fedor, M. Schoffstall, J. Davin, \"Simple Network\n     Management\
    \ Protocol\", RFC 1157, SNMP Research, Performance Systems\n     International,\
    \ MIT Laboratory for Computer Science, May 1990.\n"
- title: '[7]  McCloghrie, K., and Kastenholtz, F., "Interfaces Group Evolution",'
  contents:
  - "[7]  McCloghrie, K., and Kastenholtz, F., \"Interfaces Group Evolution\",\n \
    \    RFC 1573, Hughes LAN Systems, FTP Software, January 1994.\n"
- title: '[8]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[8]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Transport Mappings for version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1906, January 1996.\n"
- title: '[9]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[9]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Introduction to Community-based SNMPv2\", RFC 1901,\n     January 1996.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In order to implement this MIB, an agent must\
    \ make certain management\n   information available about various logical and\
    \ physical entities\n   within a managed system, which may be considered sensitive\
    \ in some\n   network environments.\n   Therefore, a network administrator may\
    \ wish to employ instance-level\n   access control, and configure the Entity MIB\
    \ access (i.e., community\n   strings in SNMPv1 and SNMPv2C), such that certain\
    \ instances within\n   this MIB (e.g., entLogicalCommunity, or entire entLogicalEntries,\n\
    \   entPhysicalEntries, and associated mapping table entries), are\n   excluded\
    \ from particular MIB views.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA 95134\n   Phone: 408-526-5260\n   EMail: kzm@cisco.com\n\
    \   Andy Bierman\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose,\
    \ CA 95134\n   Phone: 408-527-3711\n   EMail: abierman@cisco.com\n"
