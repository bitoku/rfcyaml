- contents:
  - "    Label Switched Path (LSP) Ping and Traceroute Multipath Support\n              for
    Link Aggregation Group (LAG) Interfaces\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines extensions to the MPLS Label Switched Path\n
    \  (LSP) Ping and Traceroute mechanisms as specified in RFC 8029.  The\n   extensions
    allow the MPLS LSP Ping and Traceroute mechanisms to\n   discover and exercise
    specific paths of Layer 2 (L2) Equal-Cost\n   Multipath (ECMP) over Link Aggregation
    Group (LAG) interfaces.\n   Additionally, a mechanism is defined to enable the
    determination of\n   the capabilities supported by a Label Switching Router (LSR).\n
    \  This document updates RFC 8029.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8611.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Background  . . . . . . . . . . . . . . . . . . . .
    . . .   3\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   4\n     1.3.  Requirements Language . . . . . . . . . . . . . . . . . .   4\n
    \  2.  Overview of Solution  . . . . . . . . . . . . . . . . . . . .   4\n   3.
    \ LSR Capability Discovery  . . . . . . . . . . . . . . . . . .   6\n     3.1.
    \ Initiator LSR Procedures  . . . . . . . . . . . . . . . .   7\n     3.2.  Responder
    LSR Procedures  . . . . . . . . . . . . . . . .   7\n   4.  Mechanism to Discover
    L2 ECMP . . . . . . . . . . . . . . . .   7\n     4.1.  Initiator LSR Procedures
    \ . . . . . . . . . . . . . . . .   7\n     4.2.  Responder LSR Procedures  .
    . . . . . . . . . . . . . . .   8\n     4.3.  Additional Initiator LSR Procedures
    . . . . . . . . . . .  10\n   5.  Mechanism to Validate L2 ECMP Traversal . .
    . . . . . . . . .  11\n     5.1.  Incoming LAG Member Links Verification  . .
    . . . . . . .  11\n       5.1.1.  Initiator LSR Procedures  . . . . . . . . .
    . . . . .  11\n       5.1.2.  Responder LSR Procedures  . . . . . . . . . . .
    . . .  12\n       5.1.3.  Additional Initiator LSR Procedures . . . . . . . .
    .  12\n     5.2.  Individual End-to-End Path Verification . . . . . . . . .  14\n
    \  6.  LSR Capability TLV  . . . . . . . . . . . . . . . . . . . . .  14\n   7.
    \ LAG Description Indicator Flag: G . . . . . . . . . . . . . .  15\n   8.  Local
    Interface Index Sub-TLV . . . . . . . . . . . . . . . .  16\n   9.  Remote Interface
    Index Sub-TLV  . . . . . . . . . . . . . . .  17\n   10. Detailed Interface and
    Label Stack TLV  . . . . . . . . . . .  17\n     10.1.  Sub-TLVs . . . . . . .
    . . . . . . . . . . . . . . . . .  19\n       10.1.1.  Incoming Label Stack Sub-TLV
    . . . . . . . . . . . .  19\n       10.1.2.  Incoming Interface Index Sub-TLV
    . . . . . . . . . .  20\n   11. Rate-Limiting on Echo Request/Reply Messages  .
    . . . . . . .  21\n   12. Security Considerations . . . . . . . . . . . . . .
    . . . . .  21\n   13. IANA Considerations . . . . . . . . . . . . . . . . . .
    . . .  22\n     13.1.  LSR Capability TLV . . . . . . . . . . . . . . . . . .
    .  22\n       13.1.1.  LSR Capability Flags . . . . . . . . . . . . . . . .  22\n
    \    13.2.  Local Interface Index Sub-TLV  . . . . . . . . . . . . .  22\n       13.2.1.
    \ Interface Index Flags  . . . . . . . . . . . . . . .  22\n     13.3.  Remote
    Interface Index Sub-TLV . . . . . . . . . . . . .  23\n     13.4.  Detailed Interface
    and Label Stack TLV . . . . . . . . .  23\n       13.4.1.  Sub-TLVs for TLV Type
    6  . . . . . . . . . . . . . .  23\n       13.4.2.  Interface and Label Stack
    Address Types  . . . . . .  25\n     13.5.  DS Flags . . . . . . . . . . . . .
    . . . . . . . . . . .  25\n   14. References  . . . . . . . . . . . . . . . .
    . . . . . . . . .  25\n     14.1.  Normative References . . . . . . . . . . .
    . . . . . . .  25\n     14.2.  Informative References . . . . . . . . . . . .
    . . . . .  26\n   Appendix A.  LAG with Intermediate L2 Switch Issues . . . .
    . . .  27\n     A.1.  Equal Numbers of LAG Members  . . . . . . . . . . . . .
    .  27\n     A.2.  Deviating Numbers of LAG Members  . . . . . . . . . . . .  27\n
    \    A.3.  LAG Only on Right . . . . . . . . . . . . . . . . . . . .  27\n     A.4.
    \ LAG Only on Left  . . . . . . . . . . . . . . . . . . . .  28\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  28\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  29\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Background\n   The MPLS Label Switched Path (LSP) Ping and Traceroute
      mechanisms\n   [RFC8029] are powerful tools designed to diagnose all available\n
      \  Layer 3 (L3) paths of LSPs, including diagnostic coverage of L3\n   Equal-Cost
      Multipath (ECMP).  In many MPLS networks, Link Aggregation\n   Groups (LAGs),
      as defined in [IEEE802.1AX], provide Layer 2 (L2) ECMP\n   and are often used
      for various reasons.  MPLS LSP Ping and Traceroute\n   tools were not designed
      to discover and exercise specific paths of L2\n   ECMP.  This produces a limitation
      for the following scenario when an\n   LSP traverses a LAG:\n   o  Label switching
      over some member links of the LAG is successful,\n      but fails over other
      member links of the LAG.\n   o  MPLS echo request for the LSP over the LAG is
      load-balanced on one\n      of the member links that is label switching successfully.\n
      \  With the above scenario, MPLS LSP Ping and Traceroute will not be\n   able
      to detect the label-switching failure of the problematic member\n   link(s)
      of the LAG.  In other words, lack of L2 ECMP diagnostic\n   coverage can produce
      an outcome where MPLS LSP Ping and Traceroute\n   can be blind to label-switching
      failures over a problematic LAG\n   interface.  It is, thus, desirable to extend
      the MPLS LSP Ping and\n   Traceroute to have deterministic diagnostic coverage
      of LAG\n   interfaces.\n   The work toward a solution to this problem was motivated
      by issues\n   encountered in live networks.\n"
    title: 1.1.  Background
  - contents:
    - "1.2.  Terminology\n   The following acronyms/terms are used in this document:\n
      \  o  MPLS - Multiprotocol Label Switching.\n   o  LSP - Label Switched Path.\n
      \  o  LSR - Label Switching Router.\n   o  ECMP - Equal-Cost Multipath.\n   o
      \ LAG - Link Aggregation Group.\n   o  Initiator LSR - The LSR that sends the
      MPLS echo request message.\n   o  Responder LSR - The LSR that receives the
      MPLS echo request\n      message and sends the MPLS echo reply message.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.3.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Overview of Solution\n   This document defines a new TLV to discover the
    capabilities of a\n   responder LSR and extensions for use with the MPLS LSP Ping
    and\n   Traceroute mechanisms to describe Multipath Information for\n   individual
    LAG member links, thus allowing MPLS LSP Ping and\n   Traceroute to discover and
    exercise specific paths of L2 ECMP over\n   LAG interfaces.  The reader is expected
    to be familiar with the\n   Downstream Detailed Mapping TLV (DDMAP) described
    in Section 3.4 of\n   [RFC8029].\n   The solution consists of the MPLS echo request
    containing a DDMAP TLV\n   and the new LSR Capability TLV to indicate that separate
    load-\n   balancing information for each L2 next hop over LAG is desired in the\n
    \  MPLS echo reply.  The responder LSR places the same LSR Capability\n   TLV
    in the MPLS echo reply to provide acknowledgement back to the\n   initiator LSR.
    \ It also adds, for each downstream LAG member, load-\n   balancing information
    (i.e., multipath information and interface\n   index).  This mechanism is applicable
    to all types of LSPs that can\n   traverse LAG interfaces.  Many LAGs are built
    from peer-to-peer\n   links, with router X and router X+1 having direct connectivity
    and\n   the same number of LAG members.  It is possible to build LAGs\n   asymmetrically
    by using Ethernet switches between two routers.\n   Appendix A lists some use
    cases for which the mechanisms defined in\n   this document may not be applicable.
    \ Note that the mechanisms\n   described in this document do not impose any changes
    to scenarios\n   where an LSP is pinned down to a particular LAG member (i.e.,
    the LAG\n   is not treated as one logical interface by the LSP).\n   The following
    figure and description provide an example of an LDP\n   network.\n     <-----
    LDP Network ----->\n             +-------+\n             |       |\n     A-------B=======C-------E\n
    \            |               |\n             +-------D-------+\n     ---- Non-LAG\n
    \    ==== LAG comprising of two member links\n                       Figure 1:
    Example LDP Network\n   When node A is initiating LSP Traceroute to node E, node
    B will\n   return to node A load-balancing information for the following\n   entries:\n
    \  1.  Downstream C over Non-LAG (upper path).\n   2.  First Downstream C over
    LAG (middle path).\n   3.  Second Downstream C over LAG (middle path).\n   4.
    \ Downstream D over Non-LAG (lower path).\n   This document defines:\n   o  in
    Section 3, a mechanism to discover capabilities of responder\n      LSRs;\n   o
    \ in Section 4, a mechanism to discover L2 ECMP information;\n   o  in Section
    5, a mechanism to validate L2 ECMP traversal;\n   o  in Section 6, the LSR Capability
    TLV;\n   o  in Section 7, the LAG Description Indicator flag;\n   o  in Section
    8, the Local Interface Index Sub-TLV;\n   o  in Section 9, the Remote Interface
    Index Sub-TLV; and\n   o  in Section 10, the Detailed Interface and Label Stack
    TLV.\n"
  title: 2.  Overview of Solution
- contents:
  - "3.  LSR Capability Discovery\n   The MPLS Ping operates by an initiator LSR sending
    an MPLS echo\n   request message and receiving back a corresponding MPLS echo
    reply\n   message from a responder LSR.  The MPLS Traceroute operates in a\n   similar
    way except the initiator LSR potentially sends multiple MPLS\n   echo request
    messages with incrementing TTL values.\n   There have been many extensions to
    the MPLS Ping and Traceroute\n   mechanisms over the years.  Thus, it is often
    useful, and sometimes\n   necessary, for the initiator LSR to deterministically
    disambiguate\n   the differences between:\n   o  The responder LSR sent the MPLS
    echo reply message with contents C\n      because it has feature X, Y, and Z implemented.\n
    \  o  The responder LSR sent the MPLS echo reply message with contents C\n      because
    it has a subset of features X, Y, and Z (i.e., not all of\n      them) implemented.\n
    \  o  The responder LSR sent the MPLS echo reply message with contents C\n      because
    it does not have features X, Y, or Z implemented.\n   To allow the initiator LSR
    to disambiguate the above differences,\n   this document defines the LSR Capability
    TLV (described in\n   Section 6).  When the initiator LSR wishes to discover the\n
    \  capabilities of the responder LSR, the initiator LSR includes the LSR\n   Capability
    TLV in the MPLS echo request message.  When the responder\n   LSR receives an
    MPLS echo request message with the LSR Capability TLV\n   included, if it knows
    the LSR Capability TLV, then it MUST include\n   the LSR Capability TLV in the
    MPLS echo reply message with the LSR\n   Capability TLV describing the features
    and extensions supported by\n   the local LSR.  Otherwise, an MPLS echo reply
    must be sent back to\n   the initiator LSR with the return code set to \"One or
    more of the\n   TLVs was not understood\", according to the rules defined in Section
    3\n   of [RFC8029].  Then, the initiator LSR can send another MPLS echo\n   request
    without including the LSR Capability TLV.\n   It is RECOMMENDED that implementations
    supporting the LAG multipath\n   extensions defined in this document include the
    LSR Capability TLV in\n   MPLS echo request messages.\n"
  - contents:
    - "3.1.  Initiator LSR Procedures\n   If an initiator LSR does not know what capabilities
      a responder LSR\n   can support, it can send an MPLS echo request message and
      carry the\n   LSR Capability TLV to the responder to discover the capabilities
      that\n   the responder LSR can support.\n"
    title: 3.1.  Initiator LSR Procedures
  - contents:
    - "3.2.  Responder LSR Procedures\n   When a responder LSR receives an MPLS echo
      request message that\n   carries the LSR Capability TLV, the following procedures
      are used:\n   If the responder knows how to process the LSR Capability TLV,
      the\n   following procedures are used:\n   o  The responder LSR MUST include
      the LSR Capability TLV in the MPLS\n      echo reply message.\n   o  If the
      responder LSR understands the LAG Description Indicator\n      flag:\n      *
      \ Set the Downstream LAG Info Accommodation flag if the responder\n         LSR
      is capable of describing the outgoing LAG member links\n         separately;
      otherwise, clear the Downstream LAG Info\n         Accommodation flag.\n      *
      \ Set the Upstream LAG Info Accommodation flag if the responder\n         LSR
      is capable of describing the incoming LAG member links\n         separately;
      otherwise, clear the Upstream LAG Info\n         Accommodation flag.\n"
    title: 3.2.  Responder LSR Procedures
  title: 3.  LSR Capability Discovery
- contents:
  - '4.  Mechanism to Discover L2 ECMP

    '
  - contents:
    - "4.1.  Initiator LSR Procedures\n   Through LSR Capability Discovery as defined
      in Section 3, the\n   initiator LSR can understand whether the responder LSR
      can describe\n   incoming/outgoing LAG member links separately in the DDMAP
      TLV.\n   Once the initiator LSR knows that a responder can support this\n   mechanism,
      then it sends an MPLS echo request carrying a DDMAP TLV\n   with the LAG Description
      Indicator flag (G) set to the responder LSR.\n   The LAG Description Indicator
      flag (G) indicates that separate load-\n   balancing information for each L2
      next hop over a LAG is desired in\n   the MPLS echo reply.  The new LAG Description
      Indicator flag is\n   described in Section 7.\n"
    title: 4.1.  Initiator LSR Procedures
  - contents:
    - "4.2.  Responder LSR Procedures\n   When a responder LSR receives an MPLS echo
      request message with the\n   LAG Description Indicator flag set in the DDMAP
      TLV, if the responder\n   LSR understands the LAG Description Indicator flag
      and is capable of\n   describing outgoing LAG member links separately, the following\n
      \  procedures are used, regardless of whether or not the outgoing\n   interfaces
      include LAG interfaces:\n   o  For each downstream interface that is a LAG interface:\n
      \     *  The responder LSR MUST include a DDMAP TLV when sending the\n         MPLS
      echo reply.  There is a single DDMAP TLV for the LAG\n         interface, with
      member links described using sub-TLVs.\n      *  The responder LSR MUST set
      the LAG Description Indicator flag\n         in the DS Flags field of the DDMAP
      TLV.\n      *  In the DDMAP TLV, the Local Interface Index Sub-TLV, Remote\n
      \        Interface Index Sub-TLV, and Multipath Data Sub-TLV are used to\n         describe
      each LAG member link.  All other fields of the DDMAP\n         TLV are used
      to describe the LAG interface.\n      *  For each LAG member link of the LAG
      interface:\n         +  The responder LSR MUST add a Local Interface Index Sub-TLV\n
      \           (described in Section 8) with the LAG Member Link Indicator\n            flag
      set in the Interface Index Flags field.  It describes\n            the interface
      index of this outgoing LAG member link (the\n            local interface index
      is assigned by the local LSR).\n         +  The responder LSR MAY add a Remote
      Interface Index Sub-TLV\n            (described in Section 9) with the LAG Member
      Link Indicator\n            flag set in the Interface Index Flags field.  It
      describes\n            the interface index of the incoming LAG member link on
      the\n            downstream LSR (this interface index is assigned by the\n            downstream
      LSR).  How the local LSR obtains the interface\n            index of the LAG
      member link on the downstream LSR is\n            outside the scope of this
      document.\n         +  The responder LSR MUST add a Multipath Data Sub-TLV for
      this\n            LAG member link, if the received DDMAP TLV requested\n            multipath
      information.\n   Based on the procedures described above, every LAG member link
      will\n   have a Local Interface Index Sub-TLV and a Multipath Data Sub-TLV\n
      \  entry in the DDMAP TLV.  The order of the sub-TLVs in the DDMAP TLV\n   for
      a LAG member link MUST be Local Interface Index Sub-TLV\n   immediately followed
      by Multipath Data Sub-TLV, except as follows.  A\n   LAG member link MAY also
      have a corresponding Remote Interface Index\n   Sub-TLV.  When a Local Interface
      Index Sub-TLV, a Remote Interface\n   Index Sub-TLV, and a Multipath Data Sub-TLV
      are placed in the DDMAP\n   TLV to describe a LAG member link, they MUST be
      placed in the order\n   of Local Interface Index Sub-TLV, Remote Interface Index
      Sub-TLV, and\n   Multipath Data Sub-TLV.  The blocks of Local Interface Index,
      Remote\n   Interface Index (optional), and Multipath Data Sub-TLVs for each\n
      \  member link MUST appear adjacent to each other and be in order of\n   increasing
      local interface index.\n   A responder LSR possessing a LAG interface with two
      member links\n   would send the following DDMAP for this LAG interface:\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    ~  DDMAP fields describing LAG interface (DS Flags with G set)  ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Local Interface Index Sub-TLV of LAG member link #1           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Remote Interface Index Sub-TLV of LAG member link #1          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Multipath Data Sub-TLV LAG member link #1                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Local Interface Index Sub-TLV of LAG member link #2           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Remote Interface Index Sub-TLV of LAG member link #2          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Multipath Data Sub-TLV LAG member link #2                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                       Label Stack Sub-TLV                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              Figure 2: Example of DDMAP in MPLS Echo Reply\n   When none of
      the received multipath information maps to a particular\n   LAG member link,
      then the responder LSR MUST still place the Local\n   Interface Index Sub-TLV
      and the Multipath Data Sub-TLV for that LAG\n   member link in the DDMAP TLV.
      \ The value of the Multipath Length\n   field of the Multipath Data Sub-TLV
      is set to zero.\n"
    title: 4.2.  Responder LSR Procedures
  - contents:
    - "4.3.  Additional Initiator LSR Procedures\n   The procedures in Section 4.2
      allow an initiator LSR to:\n   o  Identify whether or not the responder LSR
      can describe outgoing\n      LAG member links separately, by looking at the
      LSR Capability TLV.\n   o  Utilize the value of the LAG Description Indicator
      flag in DS\n      Flags to identify whether each received DDMAP TLV describes
      a LAG\n      interface or a non-LAG interface.\n   o  Obtain multipath information
      that is expected to traverse the\n      specific LAG member link described by
      the corresponding interface\n      index.\n   When an initiator LSR receives
      a DDMAP containing LAG member\n   information from a downstream LSR with TTL=n,
      then the subsequent\n   DDMAP sent by the initiator LSR to the downstream LSR
      with TTL=n+1\n   through a particular LAG member link MUST be updated according
      to the\n   following procedures:\n   o  The Local Interface Index Sub-TLVs MUST
      be removed in the sending\n      DDMAP.\n   o  If the Remote Interface Index
      Sub-TLVs were present and the\n      initiator LSR is traversing over a specific
      LAG member link, then\n      the Remote Interface Index Sub-TLV corresponding
      to the LAG member\n      link being traversed SHOULD be included in the sending
      DDMAP.  All\n      other Remote Interface Index Sub-TLVs MUST be removed from
      the\n      sending DDMAP.\n   o  The Multipath Data Sub-TLVs MUST be updated
      to include just one\n      Multipath Data Sub-TLV.  The initiator LSR MAY just
      keep the\n      Multipath Data Sub-TLV corresponding to the LAG member link
      being\n      traversed or combine the Multipath Data Sub-TLVs for all LAG\n
      \     member links into a single Multipath Data Sub-TLV when diagnosing\n      further
      downstream LSRs.\n   o  All other fields of the DDMAP are to comply with procedures\n
      \     described in [RFC8029].\n   Figure 3 is an example that shows how to use
      the DDMAP TLV to send a\n   notification about which member link (link #1 in
      the example) will be\n   chosen to send the MPLS echo request message to the
      next downstream\n   LSR:\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    ~  DDMAP fields describing LAG interface (DS Flags with G set)  ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |[OPTIONAL] Remote Interface Index Sub-TLV of LAG member link #1|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |             Multipath Data Sub-TLV LAG member link #1         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                       Label Stack Sub-TLV                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Figure 3: Example of DDMAP in MPLS Echo Request\n"
    title: 4.3.  Additional Initiator LSR Procedures
  title: 4.  Mechanism to Discover L2 ECMP
- contents:
  - "5.  Mechanism to Validate L2 ECMP Traversal\n   Section 4 defines the responder
    LSR procedures to construct a DDMAP\n   for a downstream LAG.  The Remote Interface
    Index Sub-TLV that\n   describes the incoming LAG member links of the downstream
    LSR is\n   optional, because this information from the downstream LSR is often\n
    \  not available on the responder LSR.  In such case, the traversal of\n   LAG
    member links can be validated with procedures described in\n   Section 5.1.  If
    LSRs can provide the Remote Interface Index Sub-\n   TLVs, then the validation
    procedures described in Section 5.2 can be\n   used.\n"
  - contents:
    - "5.1.  Incoming LAG Member Links Verification\n   Without downstream LSRs returning
      Remote Interface Index Sub-TLVs in\n   the DDMAP, validation of the LAG member
      link traversal requires that\n   the initiator LSR traverses all available LAG
      member links and takes\n   the results through additional logic.  This section
      provides the\n   mechanism for the initiator LSR to obtain additional information
      from\n   the downstream LSRs and describes the additional logic in the\n   initiator
      LSR to validate the L2 ECMP traversal.\n"
    - contents:
      - "5.1.1.  Initiator LSR Procedures\n   An MPLS echo request carrying a DDMAP
        TLV with the Interface and\n   Label Stack Object Request flag and LAG Description
        Indicator flag\n   set is sent to indicate the request for Detailed Interface
        and Label\n   Stack TLV with additional LAG member link information (i.e.,\n
        \  interface index) in the MPLS echo reply.\n"
      title: 5.1.1.  Initiator LSR Procedures
    - contents:
      - "5.1.2.  Responder LSR Procedures\n   When it receives an echo request with
        the LAG Description Indicator\n   flag set, a responder LSR that understands
        that flag and is capable\n   of describing the incoming LAG member link SHOULD
        use the following\n   procedures, regardless of whether or not the incoming
        interface was a\n   LAG interface:\n   o  When the I flag (Interface and Label
        Stack Object Request flag) of\n      the DDMAP TLV in the received MPLS echo
        request is set:\n      *  The responder LSR MUST add the Detailed Interface
        and Label\n         Stack TLV (described in Section 10) in the MPLS echo reply.\n
        \     *  If the incoming interface is a LAG, the responder LSR MUST add\n
        \        the Incoming Interface Index Sub-TLV (described in\n         Section
        10.1.2) in the Detailed Interface and Label Stack TLV.\n         The LAG Member
        Link Indicator flag MUST be set in the Interface\n         Index Flags field,
        and the Interface Index field set to the LAG\n         member link that received
        the MPLS echo request.\n   These procedures allow the initiator LSR to utilize
        the Incoming\n   Interface Index Sub-TLV in the Detailed Interface and the
        Label Stack\n   TLV to derive, if the incoming interface is a LAG, the identity
        of\n   the incoming LAG member.\n"
      title: 5.1.2.  Responder LSR Procedures
    - contents:
      - "5.1.3.  Additional Initiator LSR Procedures\n   Along with procedures described
        in Section 4, the procedures\n   described in this section will allow an initiator
        LSR to know:\n   o  The expected load-balance information of every LAG member
        link, at\n      LSR with TTL=n.\n   o  With specific entropy, the expected
        interface index of the\n      outgoing LAG member link at TTL=n.\n   o  With
        specific entropy, the interface index of the incoming LAG\n      member link
        at TTL=n+1.\n   Depending on the LAG traffic division algorithm, the messages
        may or\n   may not traverse different member links.  The expectation is that\n
        \  there's a relationship between the interface index of the outgoing\n   LAG
        member link at TTL=n and the interface index of the incoming LAG\n   member
        link at TTL=n+1 for all entropies examined.  In other words,\n   the messages
        with a set of entropies that load-balances to outgoing\n   LAG member link
        X at TTL=n should all reach the next hop on the same\n   incoming LAG member
        link Y at TTL=n+1.\n   With additional logic, the initiator LSR can perform
        the following\n   checks in a scenario where it (a) knows that there is a
        LAG that has\n   two LAG members, between TTL=n and TTL=n+1, and (b) has the
        multipath\n   information to traverse the two LAG member links.\n   The initiator
        LSR sends two MPLS echo request messages to traverse\n   the two LAG member
        links at TTL=n+1:\n   o  Success case:\n      *  One MPLS echo request message
        reaches TTL=n+1 on LAG member\n         link 1.\n      *  The other MPLS echo
        request message reaches TTL=n+1 on LAG\n         member link 2.\n      The
        two MPLS echo request messages sent by the initiator LSR reach\n      the
        immediate downstream LSR from two different LAG member links.\n   o  Error
        case:\n      *  One MPLS echo request message reaches TTL=n+1 on LAG member\n
        \        link 1.\n      *  The other MPLS echo request message also reaches
        TTL=n+1 on LAG\n         member link 1.\n      *  One or both MPLS echo request
        messages cannot reach the\n         immediate downstream LSR on whichever
        link.\n      One or two MPLS echo request messages sent by the initiator LSR\n
        \     cannot reach the immediate downstream LSR, or the two MPLS echo\n      request
        messages reach at the immediate downstream LSR from the\n      same LAG member
        link.\n   Note that the procedures defined above will provide a deterministic\n
        \  result for LAG interfaces that are back-to-back connected between\n   LSRs
        (i.e., no L2 switch in between).  If there is an L2 switch\n   between the
        LSR at TTL=n and the LSR at TTL=n+1, there is no\n   guarantee that every
        incoming interface at TTL=n+1 can be traversed,\n   even when traversing every
        outgoing LAG member link at TTL=n.  Issues\n   resulting from LAG with an
        L2 switch in between are further described\n   in Appendix A.  LAG provisioning
        models in operator networks should\n   be considered when analyzing the output
        of LSP Traceroute that is\n   exercising L2 ECMPs.\n"
      title: 5.1.3.  Additional Initiator LSR Procedures
    title: 5.1.  Incoming LAG Member Links Verification
  - contents:
    - "5.2.  Individual End-to-End Path Verification\n   When the Remote Interface
      Index Sub-TLVs are available from an LSR\n   with TTL=n, then the validation
      of LAG member link traversal can be\n   performed by the downstream LSR of TTL=n+1.
      \ The initiator LSR\n   follows the procedures described in Section 4.3.\n   The
      DDMAP validation procedures for the downstream responder LSR are\n   then updated
      to include the comparison of the incoming LAG member\n   link to the interface
      index described in the Remote Interface Index\n   Sub-TLV in the DDMAP TLV.
      \ Failure of this comparison results in the\n   return code being set to \"Downstream
      Mapping Mismatch (5)\".\n"
    title: 5.2.  Individual End-to-End Path Verification
  title: 5.  Mechanism to Validate L2 ECMP Traversal
- contents:
  - "6.  LSR Capability TLV\n   This document defines a new TLV that is referred to
    as the LSR\n   Capability TLV.  It MAY be included in the MPLS echo request message\n
    \  and the MPLS echo reply message.  An MPLS echo request message and an\n   MPLS
    echo reply message MUST NOT include more than one LSR Capability\n   TLV.  The
    presence of an LSR Capability TLV in an MPLS echo request\n   message is a request
    that a responder LSR includes an LSR Capability\n   TLV in the MPLS echo reply
    message, with the LSR Capability TLV\n   describing features and extensions that
    the responder LSR supports.\n   The format of the LSR Capability TLV is as below:\n
    \  LSR Capability TLV Type is 4.  Length is 4.  The LSR Capability TLV\n   has
    the following format:\n      0                   1                   2                   3\n
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |             Type              |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                      LSR Capability Flags                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                      Figure 4: LSR Capability TLV\n   Where:\n      The Type
    field is 2 octets in length, and the value is 4.\n      The Length field is 2
    octets in length, and the value is 4.\n      The LSR Capability Flags field is
    4 octets in length; this\n      document defines the following flags:\n      0
    \                  1                   2                   3\n      0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                 Reserved (Must Be Zero)                   |U|D|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     This document defines two flags.  The unallocated flags MUST be\n      set
    to zero when sending and ignored on receipt.  Both the U and\n      the D flag
    MUST be cleared in the MPLS echo request message when\n      sending and ignored
    on receipt.  Zero, one, or both of the flags\n      (U and D) MAY be set in the
    MPLS echo reply message.\n      Flag  Name and Meaning\n      ----  ----------------\n
    \        U  Upstream LAG Info Accommodation\n            An LSR sets this flag
    when the LSR is capable of describing\n            a LAG member link in the Incoming
    Interface Index Sub-TLV\n            in the Detailed Interface and Label Stack
    TLV.\n         D  Downstream LAG Info Accommodation\n            An LSR sets this
    flag when the LSR is capable of describing\n            LAG member links in the
    Local Interface Index Sub-TLV and\n            the Multipath Data Sub-TLV in the
    Downstream Detailed\n            Mapping TLV.\n"
  title: 6.  LSR Capability TLV
- contents:
  - "7.  LAG Description Indicator Flag: G\n   This document defines a new flag, the
    G flag (LAG Description\n   Indicator), in the DS Flags field of the DDMAP TLV.\n
    \  The G flag in the MPLS echo request message indicates the request for\n   detailed
    LAG information from the responder LSR.  In the MPLS echo\n   reply message, the
    G flag MUST be set if the DDMAP TLV describes a\n   LAG interface.  It MUST be
    cleared otherwise.\n   The G flag is defined as below:\n      The Bit Number is
    3.\n       0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-+\n      | MBZ |G|E|L|I|N|\n
    \     +-+-+-+-+-+-+-+-+\n   Flag  Name and Meaning\n   ----  ----------------\n
    \     G  LAG Description Indicator\n         When this flag is set in the MPLS
    echo request, the responder\n         LSR is requested to respond with detailed
    LAG information.\n         When this flag is set in the MPLS echo reply, the corresponding\n
    \        DDMAP TLV describes a LAG interface.\n"
  title: '7.  LAG Description Indicator Flag: G'
- contents:
  - "8.  Local Interface Index Sub-TLV\n   The Local Interface Index Sub-TLV describes
    the interface index\n   assigned by the local LSR to an egress interface.  One
    or more Local\n   Interface Index sub-TLVs MAY appear in a DDMAP TLV.\n   The
    format of the Local Interface Index Sub-TLV is below:\n      0                   1
    \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |             Type              |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                     Local Interface Index                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                 Figure 5: Local Interface Index Sub-TLV\n   Where:\n   o  The
    Type field is 2 octets in length, and the value is 4.\n   o  The Length field
    is 2 octets in length, and the value is 4.\n   o  The Local Interface Index field
    is 4 octets in length; it is an\n      interface index assigned by a local LSR
    to an egress interface.\n      It's normally an unsigned integer and in network
    byte order.\n"
  title: 8.  Local Interface Index Sub-TLV
- contents:
  - "9.  Remote Interface Index Sub-TLV\n   The Remote Interface Index Sub-TLV is
    an optional TLV; it describes\n   the interface index assigned by a downstream
    LSR to an ingress\n   interface.  One or more Remote Interface Index sub-TLVs
    MAY appear in\n   a DDMAP TLV.\n   The format of the Remote Interface Index Sub-TLV
    is below:\n      0                   1                   2                   3\n
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |             Type              |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                    Remote Interface Index                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                Figure 6: Remote Interface Index Sub-TLV\n   Where:\n   o  The
    Type field is 2 octets in length, and the value is 5.\n   o  The Length field
    is 2 octets in length, and the value is 4.\n   o  The Remote Interface Index field
    is 4 octets in length; it is an\n      interface index assigned by a downstream
    LSR to an ingress\n      interface.  It's normally an unsigned integer and in
    network byte\n      order.\n"
  title: 9.  Remote Interface Index Sub-TLV
- contents:
  - "10.  Detailed Interface and Label Stack TLV\n   The Detailed Interface and Label
    Stack TLV MAY be included in an MPLS\n   echo reply message to report the interface
    on which the MPLS echo\n   request message was received and the label stack that
    was on the\n   packet when it was received.  A responder LSR MUST NOT insert more\n
    \  than one instance of this TLV into the MPLS echo reply message.  This\n   TLV
    allows the initiator LSR to obtain the exact interface and label\n   stack information
    as it appears at the responder LSR.\n   Detailed Interface and Label Stack TLV
    Type is 6.  Length is K + Sub-\n   TLV Length (sum of Sub-TLVs).  K is the sum
    of all fields of this TLV\n   prior to the list of Sub-TLVs, but the length of
    K depends on the\n   Address Type.  Details of this information is described below.
    \ The\n   Detailed Interface and Label Stack TLV has the following format:\n      0
    \                  1                   2                   3\n      0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |             Type              |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | Address Type  |             Reserved (Must Be Zero)           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                   IP Address (4 or 16 octets)                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                   Interface (4 or 16 octets)                  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    .                                                               .\n     .
    \                     List of Sub-TLVs                         .\n     .                                                               .\n
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n             Figure
    7: Detailed Interface and Label Stack TLV\n   The Detailed Interface and Label
    Stack TLV format is derived from the\n   Interface and Label Stack TLV format
    (from [RFC8029]).  Two changes\n   are introduced.  The first is that the label
    stack is converted into\n   a sub-TLV.  The second is that a new sub-TLV is added
    to describe an\n   interface index.  The other fields of the Detailed Interface
    and\n   Label Stack TLV have the same use and meaning as in [RFC8029].  A\n   summary
    of these fields is as below:\n      Address Type\n         The Address Type indicates
    if the interface is numbered or\n         unnumbered.  It also determines the
    length of the IP Address\n         and Interface fields.  The resulting total
    length of the\n         initial part of the TLV is listed as \"K Octets\".  The
    Address\n         Type is set to one of the following values:\n            Type
    #        Address Type           K Octets\n            ------        ------------
    \          --------\n                 1        IPv4 Numbered                16\n
    \                2        IPv4 Unnumbered              16\n                 3
    \       IPv6 Numbered                40\n                 4        IPv6 Unnumbered
    \             28\n      IP Address and Interface\n         IPv4 addresses and
    interface indices are encoded in 4 octets;\n         IPv6 addresses are encoded
    in 16 octets.\n         If the interface upon which the echo request message was\n
    \        received is numbered, then the Address Type MUST be set to IPv4\n         Numbered
    or IPv6 Numbered, the IP Address MUST be set to either\n         the LSR's Router
    ID or the interface address, and the Interface\n         MUST be set to the interface
    address.\n         If the interface is unnumbered, the Address Type MUST be either\n
    \        IPv4 Unnumbered or IPv6 Unnumbered, the IP Address MUST be the\n         LSR's
    Router ID, and the Interface MUST be set to the index\n         assigned to the
    interface.\n         Note: Usage of IPv6 Unnumbered has the same issue as [RFC8029],\n
    \        which is described in Section 3.4.2 of [RFC7439].  A solution\n         should
    be considered and applied to both [RFC8029] and this\n         document.\n"
  - contents:
    - "10.1.  Sub-TLVs\n   This section defines the sub-TLVs that MAY be included
      as part of the\n   Detailed Interface and Label Stack TLV.  Two sub-TLVs are
      defined:\n           Sub-Type    Sub-TLV Name\n           ---------   ------------\n
      \            1         Incoming Label Stack\n             2         Incoming
      Interface Index\n"
    - contents:
      - "10.1.1.  Incoming Label Stack Sub-TLV\n   The Incoming Label Stack Sub-TLV
        contains the label stack as received\n   by an LSR.  If any TTL values have
        been changed by this LSR, they\n   SHOULD be restored.\n   Incoming Label
        Stack Sub-TLV Type is 1.  Length is variable, and its\n   format is as below:\n
        \     0                   1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |             Type              |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                 Label                 | TC  |S|      TTL      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    .                                                               .\n     .
        \                                                              .\n     .                                                               .\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                Label                 | TC  |S|      TTL      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                 Figure 8: Incoming Label Stack Sub-TLV\n"
      title: 10.1.1.  Incoming Label Stack Sub-TLV
    - contents:
      - "10.1.2.  Incoming Interface Index Sub-TLV\n   The Incoming Interface Index
        Sub-TLV MAY be included in a Detailed\n   Interface and Label Stack TLV.  The
        Incoming Interface Index Sub-TLV\n   describes the index assigned by a local
        LSR to the interface that\n   received the MPLS echo request message.\n   Incoming
        Interface Index Sub-TLV Type is 2.  Length is 8, and its\n   format is as
        below:\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |             Type              |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |    Interface Index Flags      |       Reserved (Must Be Zero) |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                   Incoming Interface Index                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 9: Incoming Interface Index Sub-TLV\n   Interface Index
        Flags\n      The Interface Index Flags field is a bit vector with following\n
        \     format.\n      0                   1\n      0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |   Reserved (Must Be
        Zero)   |M|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      One flag is defined:
        M.  The remaining flags MUST be set to zero\n      when sending and ignored
        on receipt.\n     Flag  Name and Meaning\n     ----  ----------------\n        M
        \ LAG Member Link Indicator\n           When this flag is set, the interface
        index described in this\n           sub-TLV is a member of a LAG.\n   Incoming
        Interface Index\n      An Index assigned by the LSR to this interface.  It's
        normally an\n      unsigned integer and in network byte order.\n"
      title: 10.1.2.  Incoming Interface Index Sub-TLV
    title: 10.1.  Sub-TLVs
  title: 10.  Detailed Interface and Label Stack TLV
- contents:
  - "11.  Rate-Limiting on Echo Request/Reply Messages\n   An LSP may be over several
    LAGs.  Each LAG may have many member\n   links.  To exercise all the links, many
    echo request/reply messages\n   will be sent in a short period.  It's possible
    that those messages\n   may traverse a common path as a burst.  Under some circumstances,\n
    \  this might cause congestion at the common path.  To avoid potential\n   congestion,
    it is RECOMMENDED that implementations randomly delay the\n   echo request and
    reply messages at the initiator LSRs and responder\n   LSRs.  Rate-limiting of
    ping traffic is further specified in\n   Section 5 of [RFC8029] and Section 4.1
    of [RFC6425], which apply to\n   this document as well.\n"
  title: 11.  Rate-Limiting on Echo Request/Reply Messages
- contents:
  - "12.  Security Considerations\n   This document extends the LSP Traceroute mechanism
    [RFC8029] to\n   discover and exercise L2 ECMP paths to determine problematic
    member\n   link(s) of a LAG.  These on-demand diagnostic mechanisms are used by\n
    \  an operator within an MPLS control domain.\n   [RFC8029] reviews the possible
    attacks and approaches to mitigate\n   possible threats when using these mechanisms.\n
    \  To prevent leakage of vital information to untrusted users, a\n   responder
    LSR MUST only accept MPLS echo request messages from\n   designated trusted sources
    via filtering the source IP address field\n   of received MPLS echo request messages.
    \ As noted in [RFC8029],\n   spoofing attacks only have a small window of opportunity.
    \ If an\n   intermediate node hijacks these messages (i.e., causes non-delivery),\n
    \  the use of these mechanisms will determine the data plane is not\n   working
    as it should.  Hijacking of a responder node such that it\n   provides a legitimate
    reply would involve compromising the node\n   itself and the MPLS control domain.
    \ [RFC5920] provides additional\n   MPLS network-wide operation recommendations
    to avoid attacks.  Please\n   note that source IP address filtering provides only
    a weak form of\n   access control and is not, in general, a reliable security
    mechanism.\n   Nonetheless, it is required here in the absence of any more robust\n
    \  mechanisms that might be used.\n"
  title: 12.  Security Considerations
- contents:
  - '13.  IANA Considerations

    '
  - contents:
    - "13.1.  LSR Capability TLV\n   IANA has assigned value 4 (from the range 0-16383)
      for the LSR\n   Capability TLV from the \"TLVs\" registry under the \"Multiprotocol\n
      \  Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\"\n   registry
      [IANA-MPLS-LSP-PING].\n     Type    TLV Name                                    Reference\n
      \    -----   --------                                    ---------\n       4
      \    LSR Capability                              RFC 8611\n"
    - contents:
      - "13.1.1.  LSR Capability Flags\n   IANA has created a new \"LSR Capability
        Flags\" registry.  The initial\n   contents are as follows:\n     Value   Meaning
        \                                    Reference\n     -----   -------                                     ---------\n
        \      31    D: Downstream LAG Info Accommodation        RFC 8611\n       30
        \   U: Upstream LAG Info Accommodation          RFC 8611\n     0-29    Unassigned\n
        \  Assignments of LSR Capability Flags are via Standards Action\n   [RFC8126].\n"
      title: 13.1.1.  LSR Capability Flags
    title: 13.1.  LSR Capability TLV
  - contents:
    - "13.2.  Local Interface Index Sub-TLV\n   IANA has assigned value 4 (from the
      range 0-16383) for the Local\n   Interface Index Sub-TLV from the \"Sub-TLVs
      for TLV Type 20\"\n   subregistry of the \"TLVs\" registry in the \"Multiprotocol
      Label\n   Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\"\n   registry
      [IANA-MPLS-LSP-PING].\n     Sub-Type   Sub-TLV Name                             Reference\n
      \    --------   ------------                             ---------\n        4
      \      Local Interface Index                    RFC 8611\n"
    - contents:
      - "13.2.1.  Interface Index Flags\n   IANA has created a new \"Interface Index
        Flags\" registry.  The initial\n   contents are as follows:\n    Bit Number
        Name                                      Reference\n    ---------- --------------------------------
        \         ---------\n         15    M: LAG Member Link Indicator              RFC
        8611\n       0-14    Unassigned\n   Assignments of Interface Index Flags are
        via Standards Action\n   [RFC8126].\n   Note that this registry is used by
        the Interface Index Flags field of\n   the following sub-TLVs:\n   o  The
        Local Interface Index Sub-TLV, which may be present in the\n      Downstream
        Detailed Mapping TLV.\n   o  The Remote Interface Index Sub-TLV, which may
        be present in the\n      Downstream Detailed Mapping TLV.\n   o  The Incoming
        Interface Index Sub-TLV, which may be present in the\n      Detailed Interface
        and Label Stack TLV.\n"
      title: 13.2.1.  Interface Index Flags
    title: 13.2.  Local Interface Index Sub-TLV
  - contents:
    - "13.3.  Remote Interface Index Sub-TLV\n   IANA has assigned value 5 (from the
      range 0-16383) for the Remote\n   Interface Index Sub-TLV from the \"Sub-TLVs
      for TLV Type 20\"\n   subregistry of the \"TLVs\" registry in the \"Multiprotocol
      Label\n   Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\"\n   registry
      [IANA-MPLS-LSP-PING].\n     Sub-Type   Sub-TLV Name                             Reference\n
      \    --------   ------------                             ---------\n       5
      \       Remote Interface Index                   RFC 8611\n"
    title: 13.3.  Remote Interface Index Sub-TLV
  - contents:
    - "13.4.  Detailed Interface and Label Stack TLV\n   IANA has assigned value 6
      (from the range 0-16383) for the Detailed\n   Interface and Label Stack TLV
      from the \"TLVs\" registry in the\n   \"Multiprotocol Label Switching (MPLS)
      Label Switched Paths (LSPs)\n   Ping Parameters\" registry [IANA-MPLS-LSP-PING].\n
      \    Type    TLV Name                                    Reference\n     -----
      \  --------                                    ---------\n       6     Detailed
      Interface and Label Stack          RFC 8611\n"
    - contents:
      - "13.4.1.  Sub-TLVs for TLV Type 6\n   RFC 8029 changed the registration procedures
        for TLV and sub-TLV\n   registries for LSP Ping.\n   IANA has created a new
        \"Sub-TLVs for TLV Type 6\" subregistry under\n   the \"TLVs\" registry of
        the \"Multiprotocol Label Switching (MPLS)\n   Label Switched Paths (LSPs)
        Ping Parameters\" registry\n   [IANA-MPLS-LSP-PING].\n   This registry conforms
        with RFC 8029.\n   The registration procedures for this sub-TLV registry are:\n
        \  Range        Registration Procedure   Note\n   -----        ----------------------
        \  -----\n   0-16383      Standards Action         This range is for mandatory\n
        \                                        TLVs or for optional TLVs that\n
        \                                        require an error message if\n                                         not
        recognized.\n   16384-31743  RFC Required             This range is for mandatory\n
        \                                        TLVs or for optional TLVs that\n
        \                                        require an error message if\n                                         not
        recognized.\n   31744-32767  Private Use              Not to be assigned\n
        \  32768-49161  Standards Action         This range is for optional TLVs\n
        \                                        that can be silently dropped if\n
        \                                        not recognized.\n   49162-64511  RFC
        Required             This range is for optional TLVs\n                                         that
        can be silently dropped if\n                                         not recognized.\n
        \  64512-65535  Private Use              Not to be assigned\n   The initial
        allocations for this registry are:\n   Sub-Type     Sub-TLV Name             Reference
        Comment\n   --------     ------------             --------- -------\n   0
        \           Reserved                 RFC 8611\n   1            Incoming Label
        Stack     RFC 8611\n   2            Incoming Interface Index RFC 8611\n   3-31743
        \     Unassigned\n   31744-32767                           RFC 8611  Reserved
        for\n                                                   Private Use\n   32768-64511
        \ Unassigned\n   64512-65535                           RFC 8611  Reserved
        for\n                                                   Private Use\n   Note:
        IETF does not prescribe how the Private Use sub-TLVs are\n   handled; however,
        if a packet containing a sub-TLV from a Private Use\n   ranges is received
        by an LSR that does not recognize the sub-TLV, an\n   error message MAY be
        returned if the sub-TLV is from the range\n   31744-32767, and the packet
        SHOULD be silently dropped if it is from\n   the range 64511-65535.\n"
      title: 13.4.1.  Sub-TLVs for TLV Type 6
    - contents:
      - "13.4.2.  Interface and Label Stack Address Types\n   The Detailed Interface
        and Label Stack TLV shares the Interface and\n   Label Stack Address Types
        with the Interface and Label Stack TLV.  To\n   reflect this, IANA has updated
        the name of the registry from\n   \"Interface and Label Stack Address Types\"
        to \"Interface and Label\n   Stack and Detailed Interface and Label Stack
        Address Types\".\n"
      title: 13.4.2.  Interface and Label Stack Address Types
    title: 13.4.  Detailed Interface and Label Stack TLV
  - contents:
    - "13.5.  DS Flags\n   IANA has assigned a new bit number from the \"DS Flags\"
      subregistry of\n   the \"Multiprotocol Label Switching (MPLS) Label Switched
      Paths (LSPs)\n   Ping Parameters\" registry [IANA-MPLS-LSP-PING].\n   Note:
      the \"DS Flags\" subregistry was created by [RFC8029].\n    Bit number Name
      \                                       Reference\n    ---------- ----------------------------------------
      \   ---------\n         3     G: LAG Description Indicator                RFC
      8611\n"
    title: 13.5.  DS Flags
  title: 13.  IANA Considerations
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC8029]  Kompella, K., Swallow, G., Pignataro, C., Ed., Kumar, N.,\n              Aldrin,
      S., and M. Chen, \"Detecting Multiprotocol Label\n              Switched (MPLS)
      Data-Plane Failures\", RFC 8029,\n              DOI 10.17487/RFC8029, March
      2017,\n              <https://www.rfc-editor.org/info/rfc8029>.\n   [RFC8126]
      \ Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [IANA-MPLS-LSP-PING]\n              IANA,
      \"Multiprotocol Label Switching (MPLS) Label Switched\n              Paths (LSPs)
      Ping Parameters\",\n              <https://www.iana.org/assignments/\n              mpls-lsp-ping-parameters/>.\n
      \  [IEEE802.1AX]\n              IEEE, \"IEEE Standard for Local and metropolitan
      area\n              networks - Link Aggregation\", IEEE Std. 802.1AX.\n   [RFC5920]
      \ Fang, L., Ed., \"Security Framework for MPLS and GMPLS\n              Networks\",
      RFC 5920, DOI 10.17487/RFC5920, July 2010,\n              <https://www.rfc-editor.org/info/rfc5920>.\n
      \  [RFC6425]  Saxena, S., Ed., Swallow, G., Ali, Z., Farrel, A.,\n              Yasukawa,
      S., and T. Nadeau, \"Detecting Data-Plane\n              Failures in Point-to-Multipoint
      MPLS - Extensions to LSP\n              Ping\", RFC 6425, DOI 10.17487/RFC6425,
      November 2011,\n              <https://www.rfc-editor.org/info/rfc6425>.\n   [RFC7439]
      \ George, W., Ed. and C. Pignataro, Ed., \"Gap Analysis for\n              Operating
      IPv6-Only MPLS Networks\", RFC 7439,\n              DOI 10.17487/RFC7439, January
      2015,\n              <https://www.rfc-editor.org/info/rfc7439>.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A.  LAG with Intermediate L2 Switch Issues\n   Several flavors of provisioning
    models that use a \"LAG with L2\n   switch\" and the corresponding MPLS data-plane
    ECMP traversal\n   validation issues are described in this appendix.\n"
  - contents:
    - "A.1.  Equal Numbers of LAG Members\n   R1 ==== S1 ==== R2\n   The issue with
      this LAG provisioning model is that packets traversing\n   a LAG member from
      Router 1 (R1) to intermediate L2 switch (S1) can\n   get load-balanced by S1
      towards Router 2 (R2).  Therefore, MPLS echo\n   request messages traversing
      a specific LAG member from R1 to S1 can\n   actually reach R2 via any of the
      LAG members, and the sender of the\n   MPLS echo request messages has no knowledge
      of this nor any way to\n   control this traversal.  In the worst case, MPLS
      echo request\n   messages with specific entropies will exercise every LAG member
      link\n   from R1 to S1 and can all reach R2 via the same LAG member link.\n
      \  Thus, it is impossible for the MPLS echo request sender to verify\n   that
      packets intended to traverse a specific LAG member link from R1\n   to S1 did
      actually traverse that LAG member link and to\n   deterministically exercise
      \"receive\" processing of every LAG member\n   link on R2.  (Note: As far as
      we can tell, there's not a better\n   option than \"try a bunch of entropy labels
      and see what responses you\n   can get back\", and that's the same remedy in
      all the described\n   topologies.)\n"
    title: A.1.  Equal Numbers of LAG Members
  - contents:
    - "A.2.  Deviating Numbers of LAG Members\n              ____\n   R1 ==== S1 ====
      R2\n   There are deviating numbers of LAG members on the two sides of the L2\n
      \  switch.  The issue with this LAG provisioning model is the same as\n   with
      the previous model: the sender of MPLS echo request messages has\n   no knowledge
      of the L2 load-balancing algorithm nor entropy values to\n   control the traversal.\n"
    title: A.2.  Deviating Numbers of LAG Members
  - contents:
    - "A.3.  LAG Only on Right\n   R1 ---- S1 ==== R2\n   The issue with this LAG
      provisioning model is that there is no way\n   for an MPLS echo request sender
      to deterministically exercise both\n   LAG member links from S1 to R2.  And
      without such, \"receive\"\n   processing of R2 on each LAG member cannot be
      verified.\n"
    title: A.3.  LAG Only on Right
  - contents:
    - "A.4.  LAG Only on Left\n   R1 ==== S1 ---- R2\n   The MPLS echo request sender
      has knowledge of how to traverse both\n   LAG members from R1 to S1.  However,
      both types of packets will\n   terminate on the non-LAG interface at R2.  It
      becomes impossible for\n   the MPLS echo request sender to know that MPLS echo
      request messages\n   intended to traverse a specific LAG member from R1 to S1
      did indeed\n   traverse that LAG member.\n"
    title: A.4.  LAG Only on Left
  title: Appendix A.  LAG with Intermediate L2 Switch Issues
- contents:
  - "Acknowledgements\n   The authors would like to thank Nagendra Kumar and Sam Aldrin
    for\n   providing useful comments and suggestions.  The authors would like to\n
    \  thank Loa Andersson for performing a detailed review and providing a\n   number
    of comments.\n   The authors also would like to extend sincere thanks to the MPLS
    RT\n   review members who took the time to review and provide comments.  The\n
    \  members are Eric Osborne, Mach Chen, and Yimin Shen.  The suggestion\n   by
    Mach Chen to generalize and create the LSR Capability TLV was\n   tremendously
    helpful for this document and likely for future\n   documents extending the MPLS
    LSP Ping and Traceroute mechanisms.  The\n   suggestion by Yimin Shen to create
    two separate validation procedures\n   had a big impact on the contents of this
    document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Nobo Akiya\n   Big Switch Networks\n   Email: nobo.akiya.dev@gmail.com\n
    \  George Swallow\n   Southend Technical Center\n   Email: swallow.ietf@gmail.com\n
    \  Stephane Litkowski\n   Orange\n   Email: stephane.litkowski@orange.com\n   Bruno
    Decraene\n   Orange\n   Email: bruno.decraene@orange.com\n   John E. Drake\n   Juniper
    Networks\n   Email: jdrake@juniper.net\n   Mach(Guoyi) Chen\n   Huawei\n   Email:
    mach.chen@huawei.com\n"
  title: Authors' Addresses
