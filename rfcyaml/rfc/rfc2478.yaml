- title: __initial_text__
  contents:
  - '         The Simple and Protected GSS-API Negotiation Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 1.  ABSTRACT
  contents:
  - "1.  ABSTRACT\n   This document specifies a Security Negotiation Mechanism for\
    \ the\n   Generic Security Service Application Program Interface (GSS-API)\n \
    \  which is described in [1].\n   The GSS-API provides a generic interface which\
    \ can be layered atop\n   different security mechanisms such that if communicating\
    \ peers\n   acquire GSS-API credentials for the same security mechanism, then\
    \ a\n   security context may be established between them (subject to policy).\n\
    \   However, GSS-API doesn't prescribe the method by which GSS-API peers\n   can\
    \ establish whether they have a common security mechanism.\n   The Simple and\
    \ Protected GSS-API Negotiation Mechanism defined here\n   is a pseudo-security\
    \ mechanism, represented by the object identifier\n   iso.org.dod.internet.security.mechanism.snego\
    \ (1.3.6.1.5.5.2) which\n   enables GSS-API peers to determine in-band whether\
    \ their credentials\n   share common GSS-API security mechanism(s), and if so,\
    \ to invoke\n   normal security context establishment for a selected common security\n\
    \   mechanism. This is most useful for applications that are based on\n   GSS-API\
    \ implementations which support multiple security mechanisms.\n   This allows\
    \ to negotiate different security mechanisms, different\n   options within a given\
    \ security mechanism or different options from\n   several security mechanisms.\n\
    \   Once the common security mechanism is identified, the security\n   mechanism\
    \ may also negotiate mechanism-specific options during its\n   context establishment.\
    \ This will be inside the mechanism tokens, and\n   invisible to the SPNEGO protocol.\n\
    \   The simple and protected GSS-API mechanism negotiation is based on\n   the\
    \ following negotiation model : the initiator proposes one security\n   mechanism\
    \ or an ordered list of security mechanisms, the target\n   either accepts the\
    \ proposed security mechanism, or chooses one from\n   an offered set, or rejects\
    \ the proposed value(s). The target then\n   informs the initiator of its choice.\n\
    \   In its basic form this protocol requires an extra-round trip. Network\n  \
    \ connection setup is a critical performance characteristic of any\n   network\
    \ infrastructure and extra round trips over WAN links, packet\n   radio networks,\
    \ etc. really make a difference. In order to avoid such\n   an extra round trip\
    \ the initial security token of the preferred\n   mechanism for the initiator\
    \ may be embedded in the initial token. If\n   the target preferred mechanism\
    \ matches the initiator's preferred\n   mechanism, no additional round trips are\
    \ incurred by using the\n   negotiation protocol.\n   The simple and protected\
    \ GSS-API mechanism negotiation provides a\n   technique to protect the negotiation\
    \ that must be used when the\n   underlying mechanism selected by the target is\
    \ capable of integrity\n   protection.\n   When all the mechanisms proposed by\
    \ the initiator support integrity\n   protection or when the selected mechanism\
    \ supports integrity\n   protection, then the negotiation mechanism becomes protected\
    \ since\n   this guarantees that the appropriate mechanism supported by both\n\
    \   peers has been selected.\n   The Simple and Protected GSS-API Negotiation\
    \ Mechanism uses the\n   concepts developed in the GSS-API specification [1].\
    \ The negotiation\n   data is encapsulated in context-level tokens. Therefore,\
    \ callers of\n   the GSS-API do not need to be aware of the existence of the\n\
    \   negotiation tokens but only of the new pseudo-security mechanism. A\n   failure\
    \ in the negotiation phase causes a major status code to be\n   returned: GSS_S_BAD_MECH.\n"
- title: 2.  NEGOTIATION MODEL
  contents:
  - '2.  NEGOTIATION MODEL

    '
- title: 2.1.  Negotiation description
  contents:
  - "2.1.  Negotiation description\n   The model for security mechanism negotiation\
    \ reuses a subset of the\n   concepts specified in [2].\n   Each OID represents\
    \ one GSS-API mechanism or one variant of it.\n    -  When one security mechanism\
    \ is proposed by the initiator, it\n       represents the only security mechanism\
    \ supported or selected\n       (when the additional APIs defined in the Annex\
    \ A are used) by the\n       initiator.\n    -  When several security mechanisms\
    \ are proposed by the initiator,\n       they represent a set of security mechanisms\
    \ supported or selected\n       (when the additional APIs defined in the Annex\
    \ A are used) by the\n       initiator.\n   The first negotiation token sent by\
    \ the initiator contains an ordered\n   list of mechanisms, a set of options (e.g.\
    \ deleg, replay, conf flags)\n   that should be supported by the selected mechanism\
    \ and optionally the\n   initial security token for the desired mechanism of the\
    \ initiator\n   (i.e. the first of the list).\n   The first negotiation token\
    \ sent by the target contains the result of\n   the negotiation (accept_completed,\
    \ accept_incomplete or reject) and,\n   in case of accept, the agreed security\
    \ mechanism. It may also include\n   the response to the initial security token\
    \ from the initiator, when\n   the first proposed mechanism of the initiator has\
    \ been selected. When\n   the first mechanism is acceptable to the target,it should\
    \ respond to\n   the initial security token for the desired mechanism of the initiator\n\
    \   when it is present. However, if this is not possible, the target can\n   simply\
    \ ignore it and omit the responseToken from the first reply.\n   Implementations\
    \ that can piggyback the initial token will be rewarded\n   by faster connection\
    \ setup.\n   In case of a successful negotiation, the security mechanism\n   represents\
    \ the value suitable for the target, and picked up from the\n   list offered by\
    \ the initiator.  The policy by which the target\n   chooses a mechanism is an\
    \ implementation-specific local matter.  In\n   the absence of other policy, the\
    \ target should chose the first\n   mechanism in the list for which valid credentials\
    \ are available.\n   Once a mechanism has been selected, the tokens specific to\
    \ the\n   selected mechanism are carried within the negotiation tokens (in the\n\
    \   mechToken for the initiator and in the responseToken for the target).\n"
- title: 2.2.  Negotiation procedure
  contents:
  - "2.2.  Negotiation procedure\n   The negotiation procedure is summarised as follows:\n\
    \   (a) the GSS-API initiator invokes GSS_Init_sec_context as normal, but\n  \
    \     requests (either explicitly, with the negotiation mechanism, or\n      \
    \ through accepting a default, when the default is the negotiation\n       mechanism)\
    \ that the Simple and Protected GSS-API Negotiation\n       Mechanism be used;\n\
    \   (b) the initiator GSS-API implementation emits a negotiation token\n     \
    \  containing a list of supported security mechanisms for the\n       credentials\
    \ used for this context establishment, and optionally\n       an initial security\
    \ token for the first mechanism from that list\n       (i.e. the preferred mechanism),\
    \ and indicates\n       GSS_S_CONTINUE_NEEDED status;\n   (c) The GSS-API initiator\
    \ sends the token to the target application;\n   (d) The GSS-API target deposits\
    \ the token through invoking\n       GSS_Accept_sec_context. The target GSS-API\
    \ implementation emits a\n       negotiation token containing which if any of\
    \ the proposed\n       mechanisms it supports (or has selected).\n   If the mechanism\
    \ selected by the target matches the preferred\n   mechanism identified by the\
    \ initiator and the initiator provides a\n   mechToken, the negotiation token\
    \ response may contain also an initial\n   security token from that mechanism.\n\
    \   If the preferred mechanism is accepted, GSS_Accept_sec_context()\n   indicates\
    \ GSS_S_COMPLETE when unilateral or mutual authentication has\n   been performed\
    \ and involves a single token in either direction.\n   If a proposed mechanism\
    \ is accepted, and it was not the preferred\n   mechanism, or if the first negotiation\
    \ token sent by the initiator\n   did not included a mechToken, then the negotiation\
    \ token response\n   sent by the target may contain also a response token from\
    \ that\n   mechanism which transmits mechanism-specific information (e.g. to\n\
    \   transmit a certificate). The initiator may ignore such an initial\n   token\
    \ if it is not prepared to process it.\n   If a proposed mechanism other than\
    \ the preferred mechanism is\n   accepted, or the preferred mechanism is accepted\
    \ but involves\n   multiple exchanges (e.g. challenge-response authentication),\
    \ then\n   GSS_Accept_sec_context() indicates GSS_S_CONTINUE_NEEDED status.\n\
    \   If the proposed mechanism(s) are rejected, GSS_Accept_sec_context()\n   indicates\
    \ GSS_S_BAD_MECH status. The security context initialisation\n   has failed.\n\
    \   (e) The GSS-API target returns the token to the initiator\n       application;\n\
    \   (f) The GSS-API initiator deposits the token through invoking\n       GSS_Init_sec_context.\n\
    \   GSS_Init_sec_context() may then indicate GSS_S_CONTINUE_NEEDED,\n   GSS_S_COMPLETE\
    \ or GSS_S_BAD_MECH status.\n      The GSS_S_BAD_MECH status is returned when\
    \ the negotiation token\n      carries a reject result or when the negotiation\
    \ token carries an\n      accept result and the mechanism selected by the target\
    \ is not\n      included in the initial list sent by the initiator.\n      The\
    \ GSS_S_BAD_MIC status is returned when the selected mechanism\n      supports\
    \ a MIC token but the MIC computed over the list of\n      mechanisms sent by\
    \ the initiator is missing or incorrect.\n      If the negotiation token carries\
    \ a reject result, the context\n      establishment is impossible. For example,\
    \ a rejection will occur\n      if the target doesn't support the initiator's\
    \ proposed mechanism\n      type(s). Upon failure of the mechanism negotiation\
    \ procedure, the\n      mech_type output parameter value is the negotiation mechanism\n\
    \      type.\n      The GSS_S_CONTINUE_NEEDED status is returned when the negotiation\n\
    \      token carries an accept result and further tokens must be\n      transferred\
    \ in order to complete context establishment for the\n      selected mechanism.\
    \ In that case GSS_Init_sec_context() returns an\n      initial context token\
    \ as output_token (with the selected\n      mechanism's context token encapsulated\
    \ within that output_token).\n      The initiator then sends the output_token\
    \ to the target. The\n      security context initialisation is then continued\
    \ according to the\n      standard GSS-API conventions for the selected mechanism,\
    \ where the\n      tokens of the selected mechanism are encapsulated until the\n\
    \      GSS_S_COMPLETE is returned for both the initiator and the target.\n   \
    \   When GSS_S_CONTINUE_NEEDED is returned, the mech_type output\n      parameter\
    \ is not yet valid.\n      When GSS_S_COMPLETE is returned, the mech_type output\
    \ parameter\n      indicates the selected mechanism. When the final negotiation\
    \ token\n      does not contain a MIC, the initiator GSS-API implementation must\n\
    \      check the returned/selected mechanism is on the originally\n      submitted\
    \ list of mechanisms and also verify that the selected\n      mechanism is not\
    \ able to support a MIC. When the final negotiation\n      token contains a MIC\
    \ over the initial mechanisms list sent by the\n      initiator, the MIC must\
    \ be verified.\n   Note that the *_req_flag input parameters for context establishment\n\
    \   are relative to the selected mechanism, as are the *_state output\n   parameters.\
    \ i.e., these parameters are not applicable to the\n   negotiation process per\
    \ se.\n   The initiator GSS-API calling application may need to know when the\n\
    \   negotiation exchanges were protected or not. For this, when\n   GSS_S_COMPLETE\
    \ is returned, it can simply test the integ_avail flag.\n   When this flag is\
    \ set it indicates that the negotiation was\n   protected.\n   On receipt of a\
    \ negotiation token on the target side, a GSS-API\n   implementation that does\
    \ not support negotiation would indicate the\n   GSS_S_BAD_MECH status as if a\
    \ particular basic security mechanism had\n   been requested but was not supported.\n\
    \   When GSS_Acquire_cred is invoked with the negotiation mechanism as\n   desired_mechs,\
    \ an implementation-specific default credential is used\n   to carry on the negotiation.\
    \ A set of mechanisms as specified locally\n   by the system administrator is\
    \ then available for negotiation. If\n   there is a desire for the caller to make\
    \ its own choice, then an\n   additional API has to be used (see Appendix A).\n"
- title: 3.  DATA ELEMENTS
  contents:
  - '3.  DATA ELEMENTS

    '
- title: 3.1.  Mechanism Type
  contents:
  - "3.1.  Mechanism Type\n   MechType::= OBJECT IDENTIFIER\n   mechType\n       \
    \ Each security mechanism is as defined in [1].\n"
- title: 3.2.  Negotiation Tokens
  contents:
  - "3.2.  Negotiation Tokens\n   The syntax of the negotiation tokens follows the\
    \ InitialContextToken\n   syntax defined in [1]. The security mechanism of the\
    \ initial\n   negotiation token is identified by the Object Identifier\n   iso.org.dod.internet.security.mechanism.snego\
    \ (1.3.6.1.5.5.2).\n"
- title: 3.2.1. Syntax
  contents:
  - "3.2.1. Syntax\n   This section specifies the syntax of the corresponding\n  \
    \ \"innerContextToken\" field for the first token and subsequent\n   negotiation\
    \ tokens. During the mechanism negociation, the\n   \"innerContextToken\" field\
    \ contains the ASN.1 structure\n   \"NegociationToken\" given below, encoded using\
    \ the DER encoding\n   conventions.\n"
- title: NegotiationToken ::= CHOICE {
  contents:
  - "NegotiationToken ::= CHOICE {\n                              negTokenInit  [0]\
    \  NegTokenInit,\n                              negTokenTarg  [1]  NegTokenTarg\
    \ }\n"
- title: MechTypeList ::= SEQUENCE OF MechType
  contents:
  - 'MechTypeList ::= SEQUENCE OF MechType

    '
- title: NegTokenInit ::= SEQUENCE {
  contents:
  - "NegTokenInit ::= SEQUENCE {\n                            mechTypes       [0]\
    \ MechTypeList  OPTIONAL,\n                            reqFlags        [1] ContextFlags\
    \  OPTIONAL,\n                            mechToken       [2] OCTET STRING  OPTIONAL,\n\
    \                            mechListMIC     [3] OCTET STRING  OPTIONAL\n    \
    \                     }\n"
- title: ContextFlags ::= BIT STRING {
  contents:
  - "ContextFlags ::= BIT STRING {\n        delegFlag       (0),\n        mutualFlag\
    \      (1),\n        replayFlag      (2),\n        sequenceFlag    (3),\n    \
    \    anonFlag        (4),\n        confFlag        (5),\n        integFlag   \
    \    (6)\n"
- title: '}'
  contents:
  - '}

    '
- title: negTokenInit
  contents:
  - "negTokenInit\n     Negotiation token sent by the initiator to the target, which\n\
    \     contains, for the first token sent, one or more security mechanisms\n  \
    \   supported by the initiator (as indicated in the field mechTypes)\n     and\
    \ the service options (reqFlags) that are requested to establish\n     the context.\
    \ The context flags should be filled in from the\n     req_flags parameter of\
    \ init_sec_context().\n     The mechToken field is optional for the first token\
    \ sent that all\n     target implementations would not have to support. However\
    \ for those\n     targets that do support piggybacking the initial mechToken,\
    \ an\n     optimistic negotiation response is possible. Otherwise the\n     mechToken\
    \ is used to carry the tokens specific to the mechanism\n     selected.\n    \
    \ The mechListMIC is an optional field. In the case that the chosen\n     mechanism\
    \ supports integrity, the initiator may optionally include\n     a mechListMIC\
    \ which is the result of a GetMIC of the MechTypes in\n     the initial NegTokenInit\
    \ and return GSS_S_COMPLETE.\n     When the chosen mechanism uses an odd number\
    \ of messages, the final\n     mechanism token will be sent from the initiator\
    \ to the acceptor. In\n     this case, there is a tradeoff between using the optimal\
    \ number of\n     messages, or using an additional message from the acceptor to\
    \ the\n     initiator in order to give the initiator assurance that no\n     modification\
    \ of the initiator's mechanism list occurred. The\n     implementation can choose\
    \ which tradeoff to make (see section 4.2.2\n     for further details for the\
    \ processing of that field).\n"
- title: NegTokenTarg ::= SEQUENCE {
  contents:
  - "NegTokenTarg ::= SEQUENCE {\n    negResult      [0] ENUMERATED {\n          \
    \                  accept_completed    (0),\n                            accept_incomplete\
    \   (1),\n                            reject              (2) }          OPTIONAL,\n\
    \    supportedMech  [1] MechType                                OPTIONAL,\n  \
    \  responseToken  [2] OCTET STRING                            OPTIONAL,\n    mechListMIC\
    \    [3] OCTET STRING                            OPTIONAL\n"
- title: '}'
  contents:
  - '}

    '
- title: negTokenTarg
  contents:
  - "negTokenTarg\n     Negotiation token returned by the target to the initiator\
    \ which\n     contains, for the first token returned, a global negotiation result\n\
    \     and the security mechanism selected (if any).\n"
- title: negResult
  contents:
  - "negResult\n     The result accept_completed indicates that a context has been\n\
    \     successfully established, while the result accept_incomplete\n     indicates\
    \ that additional token exchanges are needed.\n          Note: For the case where\
    \ (a) a single-token context setup is\n          used and (b) the preferred mechanism\
    \ does not support the\n          integrity facility which would cause a mechListMIC\
    \ to be\n          generated and enclosed, this feature allows to make a\n   \
    \       difference between a mechToken sent by the initiator but not\n       \
    \   processed by the target (accept_incomplete) and a mechToken\n          sent\
    \ by the initiator and processed by the target\n          (accept_completed).\n\
    \     For those targets that support piggybacking the initial mechToken,\n   \
    \  an optimistic negotiation response is possible and includes in that\n     case\
    \ a responseToken which may continue the authentication exchange\n     (e.g. when\
    \ mutual authentication has been requested or when\n     unilateral authentication\
    \ requires several round trips). Otherwise\n     the responseToken is used to\
    \ carry the tokens specific to the\n     mechanism selected. For subsequent tokens\
    \ (if any) returned by the\n     target, negResult, and supportedMech are not\
    \ present.\n     For the last token returned by the target, the mechListMIC, when\n\
    \     present, is a MIC computed over the MechTypes using the selected\n     mechanism.\n"
- title: negResult
  contents:
  - "negResult\n     Result of the negotiation exchange, specified by the target.\n\
    \     This can be either :\n          accept_completed\n               The target\
    \ accepts the preferred security mechanism,\n                and the context is\
    \ established for the target or,\n          accept_incomplete\n              \
    \ The target accepts one of the proposed security\n               mechanisms and\
    \ further exchanges are necessary, or,\n          reject\n               The target\
    \ rejects all the proposed security\n               mechanisms.\n"
- title: supportedMech
  contents:
  - "supportedMech\n     This field has to be present when negResult is \"accept_completed\"\
    \n     or \"accept_incomplete\". It is a choice from the mechanisms offered\n\
    \     by the initiator.\n"
- title: responseToken
  contents:
  - "responseToken\n     This field may be used either to transmit the response to\
    \ the\n     mechToken when sent by the initiator and when the first mechanism\n\
    \     from the list has been selected by the target or to carry the\n     tokens\
    \ specific to the selected security mechanism.\n"
- title: mechListMIC
  contents:
  - "mechListMIC\n     If the selected mechanism is capable of integrity protection,\
    \ this\n     field must be present in the last message of the negotiation,\n \
    \    (i.e., when the underlying mechanism returns a non-empty token and\n    \
    \ a major status of GSS_S_COMPLETE); it contains the result of a\n     GetMIC\
    \ of the MechTypes field in the initial NegTokenInit.  It\n     allows to verify\
    \ that the list initially sent by the initiator has\n     been received unmodified\
    \ by the target.\n"
- title: 3.2.2. Processing of mechListMIC.
  contents:
  - "3.2.2. Processing of mechListMIC.\n   If the mechanism selected by the negotiation\
    \ does not support\n   integrity, then no mechListMIC is included, otherwise a\
    \ mechListMIC\n   must be used and validated as indicated below.\n   If the mechanism\
    \ supports integrity and uses an even number of\n   messages, then the target\
    \ must compute a MIC as described above, and\n   send this in the final NegTokenTarg\
    \ along with the final mechToken.\n   The initiator when receiving the last token\
    \ must require that the\n   mechListMIC field be present and valid. In the absence\
    \ of a valid\n   mechListMIC, the negotiation must fail as if the last context\n\
    \   establishment token was invalid.\n   In the case that the chosen mechanism\
    \ supports integrity and uses an\n   odd number of messages, the final mechanism\
    \ token will be sent from\n   the initiator to the target. In this case, there\
    \ is a tradeoff\n   between using the optimal number of messages, or using an\
    \ additional\n   message from the target to the initiator in order to give the\n\
    \   initiator assurance that no modification of the initiator's mechanism\n  \
    \ list occurred. The implementation can choose which tradeoff to make.\n   When\
    \ generating the final NegTokenInit message, the NegTokenInit may\n   optionally\
    \ include a mechListMIC which is the result of a GetMIC of\n   the MechTypes in\
    \ the initial NegTokenInit and return GSS_S_COMPLETE.\n   The target must check\
    \ the presence of the MIC computed over the\n   mechList sent in the initial NegTokenInit.\
    \ Three cases may then be\n   considered:\n      1) If the mechListMIC is present\
    \ and correct, then\n         GSS_S_COMPLETE is returned to the target with no\
    \ token; the\n         context is established by the target.\n      2) If the\
    \ mechListMIC is present but invalid, then the context\n         establishment\
    \ must fail.  An error major status code is\n         returned to the target.\n\
    \      3) If the mechListMIC is not included in the final NegTokenInit,\n    \
    \     then GSS_S_COMPLETE must be returned to the target with a\n         token.\
    \ This token must be a NegTokenTarg, with a MIC included\n         as described\
    \ above, and no responseToken.  The application will\n         then send this\
    \ token back to the initiator, which must verify\n         that the mechListMIC\
    \ field is present and valid.\n         Note: If the MIC was originally sent by\
    \ the initiator, but\n                thenafter deleted by an attacker, the target\
    \ will send\n                back a token according to the description above,\
    \ but the\n                initiator will be unable to process that returned token\n\
    \                and the context establishment must then fail.\n"
- title: '4.  EXAMPLES : SECURITY MECHANISM NEGOTIATION'
  contents:
  - "4.  EXAMPLES : SECURITY MECHANISM NEGOTIATION\n   Here are some examples of security\
    \ mechanism negotiation between an\n   initiator (I) and a target (T).\n"
- title: 4.1.  Initial steps
  contents:
  - "4.1.  Initial steps\n   (I) supports two security mechanism types (GSS-MECH1\
    \ and GSS-MECH2).\n   (I) invokes GSS_Init_sec_context() with :\n   Input\n  \
    \   mech_type = OID for negotiation mechanism or NULL, if the\n     negotiation\
    \ mechanism is the default mechanism.\n   Output\n     major_status = GSS_S_CONTINUE_NEEDED\n\
    \     output_token = negTokenInit\n   The negotiation token (negTokenInit) contains\
    \ two security mechanisms\n   with :\n     mechType = GSS-MECH1 or\n     mechType\
    \ = GSS-MECH2\n   (I) sends to (T) the negotiation token.\n"
- title: 4.2  Successful negotiation steps
  contents:
  - "4.2  Successful negotiation steps\n   (T) supports GSS-MECH2\n   (T) receives\
    \ the negotiation token (negTokenInit) from (I)\n   (T) invokes GSS_Accept_sec_context()\
    \ with :\n   Input\n        input_token = negTokenInit\n   Output\n        major_status\
    \ = GSS_S_CONTINUE_NEEDED\n        output_token = negTokenTarg\n   The negotiation\
    \ token (negTokenTarg) contains :\n        negResult = accept (the negotiation\
    \ result)\n        supportedMech : mechType = GSS-MECH2\n   (T) returns the negotiation\
    \ token (negTokenTarg) to (I)\n   (I) invokes GSS_Init_sec_context() with :\n\
    \   Input\n        input_token = negTokenTarg\n   Output\n        major_status\
    \ = GSS_S_COMPLETE\n        output_token = initialContextToken (initial context\
    \ token\n                                            for GSS-MECH2)\n        mech_type\
    \ = GSS-MECH2\n   The subsequent steps are security mechanism specific, and work\
    \ as\n   specified in [1].  The output tokens from the security mechanism are\n\
    \   encapsulated in a NegTokenTarg message (with the supportedMech field\n   omitted,\
    \ and the mechListMIC included with the last token).\n"
- title: 4.3.  Failed negotiation steps
  contents:
  - "4.3.  Failed negotiation steps\n   (T) supports GSS-MECH3.\n   (T) receives the\
    \ negotiation token (negTokenInit) from (I)\n   (T) invokes GSS_Accept_sec_context()\
    \ with :\n   Input\n        input_token = negTokenInit\n   Output\n        major_status\
    \ = GSS_S_BAD_MECH\n        output_token = negTokenTarg\n   The negotiation token\
    \ (negTokenTarg) contains :\n        negResult = reject (the negotiation result)\n\
    \   (T) returns the negotiation token (negTokenTarg) to (I)\n   (I) invokes GSS_Init_sec_context()\
    \ with :\n   Input\n        input_token = negTokenTarg\n   Output\n        major_status\
    \ = GSS_S_BAD_MECH\n   The security context establishment has failed.\n"
- title: 4.4 Successful Negotiation with preferred mechanism info
  contents:
  - "4.4 Successful Negotiation with preferred mechanism info\n   (I) supports two\
    \ security mechanism types (GSS-MECH1 and GSS-MECH2).\n   (I) invokes GSS_Init_sec_context()\
    \ with :\n   Input\n        mech_type = OID for negotiation mechanism or NULL,\
    \ if the\n        negotiation mechanism is the default mechanism.\n   Output\n\
    \        major_status = GSS_S_CONTINUE_NEEDED\n        output_token = negTokenInit\n\
    \   The negotiation token (negTokenInit) contains two security mechanisms\n  \
    \ with :\n        mechType = GSS-MECH1 or\n        mechType = GSS-MECH2\n    \
    \    mechToken = output_token from GSS_Init_sec_context\n       ( first mechType)\
    \ as described in [1]\n   (I) sends to (T) the negotiation token.\n   (T) supports\
    \ GSS-MECH1.\n   (T) receives the negotiation token (negTokenInit) from (I)\n\
    \   (T) invokes GSS_Accept_sec_context() with :\n   Input\n        input_token\
    \ = negTokenInit\n   Output\n        major_status = GSS_S_CONTINUE_NEEDED\n  \
    \      output_token = negTokenTarg\n   The negotiation token (negTokenTarg) contains\
    \ :\n        negResult = accept (the negotiation result)\n        supportedMech\
    \ : mechType = GSS-MECH1\n        mechToken = output_token from\n            \
    \             GSS_Accept_sec_context(mechToken )\n   (T) returns the negotiation\
    \ token (negTokenTarg) to (I)\n   (I) invokes GSS_Init_sec_context() with :\n\
    \   Input\n        input_token = negTokenTarg\n   Output\n        major_status\
    \ = GSS_S_COMPLETE or GSS_S_CONTINUE_NEEDED as needed\n        output_token =\
    \ ContextToken (initial or subsequent context token\n                       for\
    \ GSS-MECH1)\n        mech_type = GSS-MECH1\n   Specific implementations of the\
    \ protocol can support the optimistic\n   negotiation by completing the security\
    \ context establishment using the\n   agreed upon mechanism as described in [1].\
    \  As described above in\n   section 5.2, the output tokens from the security\
    \ mechanisms are\n   encapsulated in a NegTokenTarg message (with the negResult\
    \ and\n   supportedMech fields omitted, and the mechListMIC included with the\n\
    \   last token).\n"
- title: 5.  SECURITY CONSIDERATIONS
  contents:
  - "5.  SECURITY CONSIDERATIONS\n   When the mechanism selected by the target from\
    \ the list supplied by\n   the initiator supports integrity protection, then the\
    \ negotiation is\n   protected.\n   When one of the mechanisms proposed by the\
    \ initiator does not support\n   integrity protection, then the negotiation is\
    \ exposed to all threats\n   a non secured service is exposed. In particular,\
    \ an active attacker\n   can force to use a security mechanism which is not the\
    \ common\n   preferred one (when multiple security mechanisms are shared between\n\
    \   peers) but which is acceptable anyway to the target.\n   In any case, the\
    \ communicating peers may be exposed to the denial of\n   service threat.\n"
- title: 6.  ACKNOWLEDGMENTS
  contents:
  - "6.  ACKNOWLEDGMENTS\n   Acknowledgments are due to Stephen Farrell of SSE, Marc\
    \ Horowitz of\n   Stonecast, John Linn of RSA Laboratories, Piers McMahon of Platinum\n\
    \   Technology, Tom Parker of ICL and Doug Rosenthal of EINet, for\n   reviewing\
    \ earlier versions of this document and for providing useful\n   inputs. Acknowledgments\
    \ are also due to Peter Brundrett of Microsoft\n   for his proposal for an optimistic\
    \ negotiation, and for Bill\n   Sommerfeld of Epilogue Technology for his proposal\
    \ for protecting the\n   negotiation.\n"
- title: APPENDIX A
  contents:
  - "APPENDIX A\n   GSS-API NEGOTIATION SUPPORT API\n   In order to provide to a GSS-API\
    \ caller (either the initiator or the\n   target or both) the ability to choose\
    \ among the set of supported\n   mechanisms a reduced set of mechanisms for negotiation,\
    \ two\n   additional APIs are defined:\n   GSS_Get_neg_mechs() indicates the set\
    \ of security mechanisms\n   available on the local system to the caller for negotiation.\n\
    \   GSS_Set_neg_mechs() specifies the set of security mechanisms to be\n   used\
    \ on the local system by the caller for negotiation.\n"
- title: A.1.  GSS_Set_neg_mechs call
  contents:
  - "A.1.  GSS_Set_neg_mechs call\n   Input:\n        cred_handle          CREDENTIAL\
    \ HANDLE\n                             - NULL specifies default credentials\n\
    \        mech_set             SET OF OBJECT IDENTIFIER\n   Outputs:\n        major_status\
    \ INTEGER,\n        minor_status INTEGER,\n   Return major_status codes :\n  \
    \   GSS_S_COMPLETE indicates that the set of security mechanisms\n     available\
    \ for negotiation has been set to mech_set. GSS_S_FAILURE\n     indicates that\
    \ the requested operation could not be performed for\n     reasons unspecified\
    \ at the GSS-API level.\n   Allows callers to specify the set of security mechanisms\
    \ that may be\n   negotiated with the credential identified by cred_handle. This\
    \ call\n   is intended for support of specialised callers who need to restrict\n\
    \   the set of negotiable security mechanisms from the set of all\n   security\
    \ mechanisms available to the caller (based on available\n   credentials). Note\
    \ that if more than one mechanism is specified in\n   mech_set, the order in which\
    \ those mechanisms are specified implies a\n   relative mechanism preference for\
    \ the target.\n"
- title: A.2.  GSS_Get_neg_mechs call
  contents:
  - "A.2.  GSS_Get_neg_mechs call\n   Input:\n        cred_handle    CREDENTIAL HANDLE\n\
    \                       - NULL specifies default credentials\n   Outputs:\n  \
    \      major_status INTEGER,\n        minor_status INTEGER,\n        mech_set\
    \     SET OF OBJECT IDENTIFIER\n   Return major_status codes :\n        GSS_S_COMPLETE\
    \ indicates that the set of security mechanisms\n        available for negotiation\
    \ has been returned in\n        mech_option_set.\n        GSS_S_FAILURE indicates\
    \ that the requested operation could not\n        be performed for reasons unspecified\
    \ at the GSS-API level.\n   Allows callers to determine the set of security mechanisms\
    \ available\n   for negotiation with the credential identified by cred_handle.\
    \ This\n   call is intended for support of specialised callers who need to\n \
    \  reduce the set of negotiable security mechanisms from the set of\n   supported\
    \ security mechanisms available to the caller (based on\n   available credentials).\n\
    \   Note: The GSS_Indicate_mechs() function indicates the full set of\n   mechanism\
    \ types available on the local system. Since this call has no\n   input parameter,\
    \ the returned set is not necessarily available for\n   all credentials.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1] Linn, J., \"Generic Security Service Application Program\n\
    \       Interface\", RFC 2078, January 1997.\n   [2] Standard ECMA-206, \"Association\
    \ Context Management including\n       Security Context Management\", December\
    \ 1993.  Available on\n       http://www.ecma.ch\n"
- title: AUTHORS' ADDRESSES
  contents:
  - "AUTHORS' ADDRESSES\n   Eric Baize\n   Bull - 300 Concord Road\n   Billerica,\
    \ MA 01821 - USA\n   Phone: +1 978 294 61 37\n   Fax: +1 978 294 61 09\n   EMail:\
    \ Eric.Baize@bull.com\n   Denis Pinkas\n   Bull\n   Rue Jean-Jaures\n   BP 68\n\
    \   78340 Les Clayes-sous-Bois - FRANCE\n   Phone: +33 1 30 80 34 87\n   Fax:\
    \ +33 1 30 80 33 21\n   EMail: Denis.Pinkas@bull.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
