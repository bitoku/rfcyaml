- contents:
  - '    Generalized Mobile Ad Hoc Network (MANET) Packet/Message Format

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies a packet format capable of carrying multiple\n
    \  messages that may be used by mobile ad hoc network routing protocols.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Notation and Terminology ........................................4\n      2.1.
    Notation ...................................................4\n           2.1.1.
    Elements ............................................4\n           2.1.2. Variables
    ...........................................5\n      2.2. Terminology ................................................5\n
    \  3. Applicability Statement .........................................6\n   4.
    Protocol Overview and Functioning ...............................7\n   5. Syntactical
    Specification .......................................7\n      5.1. Packets ....................................................8\n
    \     5.2. Messages ...................................................9\n      5.3.
    Address Blocks ............................................11\n      5.4. TLVs
    and TLV Blocks .......................................14\n           5.4.1. TLVs
    ...............................................14\n           5.4.2. TLV Usage
    ..........................................17\n      5.5. Malformed Elements ........................................18\n
    \  6. IANA Considerations ............................................18\n      6.1.
    Expert Review: Evaluation Guidelines ......................18\n      6.2. Message
    Types .............................................20\n           6.2.1. Message-Type-Specific
    TLV Registry Creation ........20\n      6.3. Packet TLV Types ..........................................21\n
    \          6.3.1. Packet TLV Type Extension Registry Creation ........21\n      6.4.
    Message TLV Types .........................................21\n           6.4.1.
    Message TLV Type Extension Registry Creation .......22\n      6.5. Address Block
    TLV Types ...................................22\n           6.5.1. Address Block
    TLV Type Extension Registry\n                  Creation ...........................................23\n
    \  7. Security Considerations ........................................23\n      7.1.
    Authentication and Integrity Suggestions ..................23\n      7.2. Confidentiality
    Suggestions ...............................24\n   8. Contributors ...................................................25\n
    \  9. Acknowledgments ................................................25\n   10.
    References ....................................................26\n      10.1.
    Normative References .....................................26\n      10.2. Informative
    References ...................................27\n   Appendix A. Multiplexing
    and Demultiplexing .......................28\n   Appendix B. Intended Usage ........................................28\n
    \  Appendix C. Examples ..............................................30\n      C.1.
    Address Block Examples ....................................30\n      C.2. TLV
    Examples ..............................................32\n   Appendix D. Illustrations
    .........................................34\n      D.1. Packet ....................................................34\n
    \     D.2. Message ...................................................38\n      D.3.
    Message Body ..............................................44\n      D.4. Address
    Block .............................................45\n      D.5. TLV Block .................................................52\n
    \     D.6. TLV .......................................................53\n   Appendix
    E. Complete Example ......................................57\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the syntax of a packet format designed
    for\n   carrying multiple routing protocol messages for information exchange\n
    \  between MANET (Mobile Ad hoc NETwork) routers.  Messages consist of a\n   Message
    Header, which is designed for control of message\n   dissemination, and a Message
    Body, which contains protocol\n   information.  Only the syntax of the packet
    and messages is\n   specified.\n   This document specifies:\n   o  A packet format,
    allowing zero or more messages to be contained\n      within a single transmission.
    \ A packet with zero messages may be\n      sent in case the only information
    to exchange is contained in the\n      Packet Header.\n   o  A message format,
    where a message is composed of a Message Header\n      and a Message Body.\n   o
    \ A Message Header format, which contains information that may be\n      sufficient
    to allow a protocol using this specification to make\n      processing and forwarding
    decisions.\n   o  A Message Body format, containing attributes associated with
    the\n      message or the originator of the message, as well as blocks of\n      addresses,
    or address prefixes, with associated attributes.\n   o  An Address Block format,
    where an Address Block represents sets of\n      addresses, or address prefixes,
    in a compact form with aggregated\n      addresses.\n   o  A generalized type-length-value
    (TLV) format representing\n      attributes.  Each TLV can be associated with
    a packet, a message,\n      or one or more addresses or address prefixes in a
    single Address\n      Block.  Multiple TLVs can be included, each associated with
    a\n      packet, a message, and the same, different, or overlapping sets of\n
    \     addresses or address prefixes.\n   The specification has been explicitly
    designed with the following\n   properties, listed in no particular order, in
    mind:\n   Parsing logic -  The notation used in this specification facilitates\n
    \     generic, protocol-independent parsing logic.\n   Extensibility -  Packets
    and messages defined by a protocol using\n      this specification are extensible
    by defining new messages and new\n      TLVs.  Protocols using this specification
    will be able to\n      correctly identify and skip such new messages and TLVs,
    while\n      correctly parsing the remainder of the packet and message.\n   Efficiency
    -  When reported addresses share common bit sequences\n      (e.g., address prefixes
    or IPv6 interface identifiers), the\n      Address Block representation allows
    for a compact representation.\n      Compact Message Headers are ensured through
    permitting inclusion\n      of only required Message Header elements.  The multi-message\n
    \     packet structure allows a reduction in the number of transmitted\n      octets
    and in the number of transmitted packets.  The structure of\n      packet and
    message encoding allows parsing, verifying, and\n      identifying individual
    elements in a single pass.\n   Separation of forwarding and processing -  A protocol
    using this\n      specification can be designed such that duplicate detection
    and\n      controlled-scope message forwarding decisions can be made using\n      information
    contained in the Message Header, without processing\n      the Message Body.\n"
  title: 1.  Introduction
- contents:
  - "2.  Notation and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   [RFC2119].\n   Additionally, this document uses the notation
    in Section 2.1 and the\n   terminology in Section 2.2.\n"
  - contents:
    - "2.1.  Notation\n   The following notations, for elements and variables, are
      used in this\n   document.\n   This format uses network byte order (most significant
      octet first)\n   for all fields.  The most significant bit in an octet is numbered
      bit\n   0, and the least significant bit of an octet is numbered bit 7\n   [Stevens].\n"
    - contents:
      - "2.1.1.  Elements\n   This specification defines elements.  An element is
        a group of any\n   number of consecutive bits that together form a syntactic
        entity\n   represented using the notation <element>.  Each element in this\n
        \  document is defined as either:\n   o  a specifically sized field of bits
        OR\n   o  a composite element, composed of other <element>s.\n   A composite
        element is defined as follows:\n       <element> := specification\n   where,
        on the right hand side following :=, specification is\n   represented using
        the regular expression syntax defined in\n   [SingleUNIX].  Only the following
        notation is used:\n   <element1><element2> -  Indicates that <element1> is
        immediately\n      followed by <element2>.\n   (<element1><element2>) -  Indicates
        a grouping of the elements\n      enclosed by the parentheses.\n   ? -  Zero
        or one occurrences of the preceding element or group.\n   * -  Zero or more
        occurrences of the preceding element or group.\n"
      title: 2.1.1.  Elements
    - contents:
      - "2.1.2.  Variables\n   Variables are introduced into the specification solely
        as a means to\n   clarify the description.  The following two notations are
        used:\n   <foo> -  If <foo> is an unsigned integer field, then <foo> is also\n
        \     used to represent the value of that field.\n   bar -  A variable, usually
        obtained through calculations based on the\n      value(s) of element(s).\n"
      title: 2.1.2.  Variables
    title: 2.1.  Notation
  - contents:
    - "2.2.  Terminology\n   This document uses the following terminology:\n   Packet
      -  The top level entity in this specification.  A packet\n      contains a Packet
      Header and zero or more messages.\n   Message -  The fundamental entity carrying
      protocol information, in\n      the form of address objects and TLVs.\n   Address
      -  A number of octets that make up an address of the length\n      indicated
      by the encapsulating Message Header.  The meaning of an\n      address is defined
      by the protocol using this specification.\n   Address Prefix -  An address plus
      a prefix length, with the prefix\n      length being a number of address bits
      measured from the left/most\n      significant end of the address.\n   Address
      Object -  Either an address, or an address prefix, as\n      specified in an
      Address Block in this specification.\n   TLV -  A type-length-value structure.
      \ This is a generic way in which\n      an attribute can be represented and
      correctly parsed without the\n      parser having to understand the attribute.\n"
    title: 2.2.  Terminology
  title: 2.  Notation and Terminology
- contents:
  - "3.  Applicability Statement\n   This specification describes a generic packet
    format, designed for\n   use by MANET routing protocols.  The specification has
    been inspired\n   by and extended from that used by the OLSR (Optimized Link State\n
    \  Routing) protocol [RFC3626].\n   MANETs are, commonly though not exclusively,
    characterized as being\n   able to run over wireless network interfaces of limited
    to moderate\n   capacity.  MANETs are therefore less tolerant of wasted transmitted\n
    \  octets than are most wired networks.  This specification thus\n   represents
    a tradeoff between sometimes competing attributes,\n   specifically efficiency,
    extensibility, and ease of use.\n   Efficiency is supported by reducing packet
    size and by allowing\n   multiple disjoint messages in a single packet.  Reduced
    packet size\n   is primarily supported by address aggregation, optional Packet
    Header\n   and Message Header fields, and optional fields in Address Blocks and\n
    \  TLVs.  Supporting multi-message packets allows a reduction in the\n   number
    of packets, each of which can incur significant bandwidth\n   costs from transport,
    network, and lower layers.\n   This specification provides both external and internal
    extensibility.\n   External extensibility is supported by the ability to add Packet
    TLVs\n   and to define new Message Types.  Internal extensibility is supported\n
    \  by the ability to add Message TLVs and Address Block TLVs to existing\n   messages.
    \ Protocols can define new TLV Types, and hence the contents\n   of their Value
    fields, and new Message Types (see Section 6.1).\n   Protocols can also reuse
    TLV Type definitions from other protocols\n   that also use this specification.\n
    \  This specification aims at being sufficiently expressive and flexible\n   to
    be able to accommodate different classes of MANET routing\n   protocols (e.g.,
    proactive, reactive, and hybrid routing protocols)\n   as well as extensions thereto.
    \ Having a common packet and message\n   format, and a common way of representing
    IP addresses and associated\n   attributes, allows generic parsing code to be
    developed, regardless\n   of the algorithm used by the routing protocol.\n   All
    addresses within a message are assumed to be of the same size,\n   specified in
    the Message Header.  In the case of mixed IPv6 and IPv4\n   addresses, IPv4 addresses
    can be represented as IPv4-mapped IPv6\n   addresses as specified in [RFC4291].\n
    \  The messages defined by this specification are designed to carry\n   MANET
    routing protocol signaling between MANET routers.  This\n   specification includes
    elements that can support scope-limited\n   flooding, as well as being usable
    for point-to-point delivery of\n   MANET routing protocol signaling in a multi-hop
    network.  Packets may\n   be unicast or multicast and may use any appropriate
    transport\n   protocol or none.\n   A MANET routing protocol using the message
    format defined by this\n   specification can constrain the syntax (for example,
    requiring a\n   specific set of Message Header fields) that the protocol will
    employ.\n   Protocols with such restrictions need not be able to parse all\n   possible
    message structures as defined by this document but must be\n   coherent in message
    generation and reception of messages that they\n   define.  If a protocol specifies
    which elements are included, then\n   direct indexing of the appropriate fields
    is possible, dependent on\n   the syntax restrictions imposed by the protocol.
    \ Such protocols may\n   have more limited extensibility.\n"
  title: 3.  Applicability Statement
- contents:
  - "4.  Protocol Overview and Functioning\n   This specification does not describe
    a protocol.  It describes a\n   packet format, which may be used by any mobile
    ad hoc network routing\n   protocol.\n"
  title: 4.  Protocol Overview and Functioning
- contents:
  - "5.  Syntactical Specification\n   This section normatively provides the syntactical
    specification of a\n   packet, represented by the element <packet> and the elements
    from\n   which it is composed.  The specification is given using the notation\n
    \  in Section 2.1.\n   Graphical illustrations of the layout of specified elements
    are given\n   in Appendix D, a graphical illustration of a complete example (a\n
    \  packet including a message with Address Blocks and TLVs) is given in\n   Appendix
    E.\n   This format uses network byte order, as indicated in Section 2.1.\n"
  - contents:
    - "5.1.  Packets\n   <packet> is defined by:\n       <packet> := <pkt-header>\n
      \                  <message>*\n   where <message> is as defined in Section 5.2.
      \ Successful parsing is\n   terminated when all octets of the packet (as defined
      by the datagram\n   containing the packet) are used.\n   <pkt-header> is defined
      by:\n       <pkt-header> := <version>\n                       <pkt-flags>\n
      \                      <pkt-seq-num>?\n                       <tlv-block>?\n
      \  where:\n   <version>  is a 4-bit unsigned integer field and specifies the\n
      \     version of the specification on which the packet and the contained\n      messages
      are constructed.  This document specifies version 0.\n   <pkt-flags>  is a 4-bit
      field, specifying the interpretation of the\n      remainder of the Packet Header:\n
      \     bit 0 (phasseqnum):  If cleared ('0'), then <pkt-seq-num> is not\n         included
      in the <pkt-header>.  If set ('1'), then <pkt-seq-num>\n         is included
      in the <pkt-header>.\n      bit 1 (phastlv):  If cleared ('0'), then <tlv-block>
      is not\n         included in the <pkt-header>.  If set ('1'), then <tlv-block>\n
      \        is included in the <pkt-header>.\n      bits 2-3:  Are RESERVED and
      SHOULD each be cleared ('0') on\n         transmission and SHOULD be ignored
      on reception.\n   <pkt-seq-num>  is omitted if the phasseqnum flag is cleared
      ('0');\n      otherwise, is a 16-bit unsigned integer field, specifying a Packet\n
      \     Sequence Number.\n   <tlv-block>  is omitted if the phastlv flag is cleared
      ('0') and is\n      otherwise as defined in Section 5.4.\n   It is assumed that
      the network layer is able to deliver the exact\n   payload length, thus avoiding
      having to carry the packet length in\n   the packet.\n"
    title: 5.1.  Packets
  - contents:
    - "5.2.  Messages\n   Packets may, in addition to the Packet Header, contain one
      or more\n   messages.  Messages contain:\n   o  A Message Header.\n   o  A Message
      TLV Block that contains zero or more TLVs, associated\n      with the whole
      message.\n   o  Zero or more Address Blocks, each containing one or more address\n
      \     objects.\n   o  An Address Block TLV Block, containing zero or more TLVs
      and\n      following each Address Block, through which addresses can be\n      associated
      with additional attributes.\n   <message> is defined by:\n       <message>    :=
      <msg-header>\n                       <tlv-block>\n                       (<addr-block><tlv-block>)*\n
      \      <msg-header> := <msg-type>\n                       <msg-flags>\n                       <msg-addr-length>\n
      \                      <msg-size>\n                       <msg-orig-addr>?\n
      \                      <msg-hop-limit>?\n                       <msg-hop-count>?\n
      \                      <msg-seq-num>?\n   where:\n   <tlv-block>  is as defined
      in Section 5.4.\n   <addr-block>  is as defined in Section 5.3.\n   <msg-type>
      \ is an 8-bit unsigned integer field, specifying the type\n      of the message.\n
      \  <msg-flags>  is a 4-bit field, specifying the interpretation of the\n      remainder
      of the Message Header:\n      bit 0 (mhasorig):  If cleared ('0'), then <msg-orig-addr>
      is not\n         included in the <msg-header>.  If set ('1'), then <msg-orig-\n
      \        addr> is included in the <msg-header>.\n      bit 1 (mhashoplimit):
      \ If cleared ('0'), then <msg-hop-limit> is\n         not included in the <msg-header>.
      \ If set ('1'), then <msg-hop-\n         limit> is included in the <msg-header>.\n
      \     bit 2 (mhashopcount):  If cleared ('0'), then <msg-hop-count> is\n         not
      included in the <msg-header>.  If set ('1'), then <msg-hop-\n         count>
      is included in the <msg-header>.\n      bit 3 (mhasseqnum):  If cleared ('0'),
      then <msg-seq-num> is not\n         included in the <msg-header>.  If set ('1'),
      then <msg-seq-num>\n         is included in the <msg-header>.\n   <msg-addr-length>
      \ is a 4-bit unsigned integer field, encoding the\n      length of all addresses
      included in this message (<msg-orig-addr>\n      as well as each address included
      in Address Blocks as defined in\n      Section 5.3), as follows:\n         <msg-addr-length>
      = the length of an address in octets - 1\n      <msg-addr-length> is thus 3
      for IPv4 addresses, or 15 for IPv6\n      addresses.\n   address-length is a
      variable whose value is the length of an address\n      in octets and is calculated
      as follows:\n         address-length = <msg-addr-length> + 1\n   <msg-size>
      \ is a 16-bit unsigned integer field, specifying the number\n      of octets
      that make up the <message>, including the <msg-header>.\n   <msg-orig-addr>
      \ is omitted if the mhasorig flag is cleared ('0');\n      otherwise, is an
      identifier with length equal to address-length\n      that can serve to uniquely
      identify the MANET router that\n      originated the message.\n   <msg-hop-limit>
      \ is omitted if the mhashoplimit flag is cleared\n      ('0'); otherwise, is
      an 8-bit unsigned integer field that can\n      contain the maximum number of
      hops that the message should be\n      further transmitted.\n   <msg-hop-count>
      \ is omitted if the mhashopcount flag is cleared\n      ('0'); otherwise, is
      an 8-bit unsigned integer field that can\n      contain the number of hops that
      the message has traveled.\n   <msg-seq-num>  is omitted if the mhasseqnum flag
      is cleared ('0');\n      otherwise, is a 16-bit unsigned integer field that
      can contain a\n      sequence number, generated by the message's originator
      MANET\n      router.\n"
    title: 5.2.  Messages
  - contents:
    - "5.3.  Address Blocks\n   An Address Block can specify one or more addresses,
      all of which will\n   be address-length octets long, as specified using the
      <msg-addr-\n   length> in the <msg-header> of the message containing the Address\n
      \  Block.  An Address Block can also specify prefix lengths that can be\n   applied
      to all addresses in the Address Block, if appropriate.  This\n   allows an Address
      Block to specify either addresses or address\n   prefixes.  A protocol may specify
      that an address with a maximum\n   prefix length (equal to the address length
      in bits, i.e., 8 *\n   address-length) is considered to be an address, rather
      than an\n   address prefix, thus allowing an Address Block to contain a mixture\n
      \  of addresses and address prefixes.  The common term \"address object\"\n
      \  is used in this specification to cover both of these; note that an\n   address
      object in an Address Block always includes the prefix length,\n   if present.\n
      \  An address is specified as a sequence of address-length octets of the\n   form
      Head:Mid:Tail.  There are no semantics associated with Head,\n   Mid, or Tail;
      this representation is solely to allow aggregation of\n   addresses, which often
      have common parts (e.g., common prefixes or\n   multiple IPv6 addresses on the
      same interface).  An Address Block\n   contains an ordered set of addresses
      all sharing the same Head and\n   the same Tail, but having individual Mids.
      \ Independently, Head and\n   Tail may be empty, allowing for representation
      of address objects\n   that do not have common Heads or common Tails.  Detailed
      examples of\n   Address Blocks are included in Appendix C.1.\n   An Address
      Block can specify address prefixes:\n   o  with a single prefix length for all
      address prefixes OR\n   o  with a prefix length for each address prefix.\n   <address-block>
      is defined by:\n       <address-block> := <num-addr>\n                          <addr-flags>\n
      \                         (<head-length><head>?)?\n                          (<tail-length><tail>?)?\n
      \                         <mid>*\n                          <prefix-length>*\n
      \  where:\n   <num-addr>  is an 8-bit unsigned integer field containing the
      number\n      of addresses represented in the Address Block, which MUST NOT
      be\n      zero.\n   <addr-flags>  is an 8-bit field specifying the interpretation
      of the\n      remainder of the Address Block:\n      bit 0 (ahashead):  If cleared
      ('0'), then <head-length> and <head>\n         are not included in the <address-block>.
      \ If set ('1'), then\n         <head-length> is included in the <address-block>,
      and <head> is\n         included in the <address-block> unless <head-length>
      is zero.\n      bit 1 (ahasfulltail) and bit 2 (ahaszerotail):  Are interpreted\n
      \        according to Table 1.  A combination not shown in that table\n         MUST
      NOT be used.\n      bit 3 (ahassingleprelen) and bit 4 (ahasmultiprelen):  Are\n
      \        interpreted according to Table 2.  A combination not shown in\n         that
      table MUST NOT be used.\n      bits 5-7:  Are RESERVED and SHOULD each be cleared
      ('0') on\n         transmission and SHOULD be ignored on reception.\n   +--------------+--------------+---------------+---------------------+\n
      \  | ahasfulltail | ahaszerotail | <tail-length> |        <tail>       |\n   +--------------+--------------+---------------+---------------------+\n
      \  |       0      |       0      |  not included |     not included    |\n   |
      \      1      |       0      |    included   |   included unless   |\n   |              |
      \             |               |   <tail-length> is  |\n   |              |              |
      \              |         zero        |\n   |       0      |       1      |    included
      \  |     not included    |\n   +--------------+--------------+---------------+---------------------+\n
      \   Table 1: Interpretation of the ahasfulltail and ahaszerotail flags\n   +------------+-----------+------------------+-----------------------+\n
      \  | ahassingle | ahasmulti |     number of    |  prefix length of the |\n   |
      \  prelen   |   prelen  |  <prefix-length> |  nth address prefix,  |\n   |            |
      \          |      fields      |        in bits        |\n   +------------+-----------+------------------+-----------------------+\n
      \  |      0     |     0     |         0        |   8 * address-length  |\n   |
      \     1     |     0     |         1        |    <prefix-length>    |\n   |      0
      \    |     1     |    <num-addr>    |  nth <prefix-length>  |\n   +------------+-----------+------------------+-----------------------+\n
      \                     Table 2: Interpretation of the\n                ahassingleprelen
      and ahasmultiprelen flags\n   <head-length>  if present, is an 8-bit unsigned
      integer field that\n      contains the number of octets in the Head of all of
      the addresses\n      in the Address Block, i.e., each <head> element included
      is <head-\n      length> octets long.\n   head-length is a variable, defined
      to equal <head-length>, if\n      present, or 0 otherwise.\n   <head>  is omitted
      if head-length is equal to 0; otherwise, it is a\n      field of the head-length
      leftmost octets common to all the\n      addresses in the Address Block.\n   <tail-length>
      \ if present, is an 8-bit unsigned integer field that\n      contains the number
      of octets in the Tail of all of the addresses\n      in the Address Block, i.e.,
      each <tail> element included is <tail-\n      length> octets long.\n   tail-length
      is a variable, defined to equal <tail-length>, if\n      present, or 0 otherwise.\n
      \  <tail>  is omitted if tail-length is equal to 0, or if the\n      ahaszerotail
      flag is set ('1'); otherwise, it is a field of the\n      tail-length rightmost
      octets common to all the addresses in the\n      Address Block.  If the ahaszerotail
      flag is set ('1'), then the\n      tail-length rightmost octets of all the addresses
      in the Address\n      Block are 0.\n   mid-length is a variable that MUST be
      non-negative, defined by:\n         mid-length := address-length - head-length
      - tail-length\n      i.e., each <mid> element included is mid-length octets
      long.\n   <mid>  is omitted if mid-length is equal to 0; otherwise, each <mid>\n
      \     is a field of length mid-length octets, representing the Mid of\n      the
      corresponding address in the Address Block.  When not omitted,\n      an Address
      Block contains exactly <num-addr> <mid> fields.\n   <prefix-length>  is an 8-bit
      unsigned integer field containing the\n      length, in bits, of an address
      prefix.  If the ahassingleprelen\n      flag is set ('1'), then a single <prefix-length>
      field is included\n      that contains the prefix length of all addresses in
      the Address\n      Block.  If the ahasmultiprelen flag is set ('1'), then <num-addr>\n
      \     <prefix-length> fields are included, each of which contains the\n      prefix
      length of the corresponding address prefix in the Address\n      Block (in the
      same order).  Otherwise, no <prefix-length> fields\n      are present; each
      address object can be considered to have a\n      prefix length equal to 8 *
      address-length bits.  The Address Block\n      is malformed if any <prefix-length>
      element has a value greater\n      than 8 * address-length.\n"
    title: 5.3.  Address Blocks
  - contents:
    - "5.4.  TLVs and TLV Blocks\n   A TLV allows the association of an arbitrary
      attribute with a message\n   or a packet, or with a single address or a contiguous
      set of\n   addresses in an Address Block.  The attribute (value) is made up
      from\n   an integer number of consecutive octets.  Different attributes have\n
      \  different types; attributes that are unknown when parsing can be\n   skipped.\n
      \  TLVs are grouped in TLV Blocks, with all TLVs within a TLV Block\n   associating
      attributes with either the packet (for the TLV Block in\n   the Packet Header),
      the message (for the TLV Block immediately\n   following the Message Header),
      or to addresses in the immediately\n   preceding Address Block.  Individual
      TLVs in a TLV Block immediately\n   following an Address Block can associate
      attributes to a single\n   address, a range of addresses, or all addresses in
      that Address\n   Block.  When associating an attribute with more than one address,
      a\n   TLV can include one value for all addresses or one value per address.\n
      \  Detailed examples of TLVs are included in Appendix C.2.\n   A TLV Block is
      defined by:\n       <tlv-block> := <tlvs-length>\n                      <tlv>*\n
      \  where:\n   <tlvs-length>  is a 16-bit unsigned integer field that contains
      the\n      total number of octets in all of the immediately following <tlv>\n
      \     elements (<tlvs-length> not included).\n   <tlv>  is as defined in Section
      5.4.1.\n"
    - contents:
      - "5.4.1.  TLVs\n   There are three kinds of TLV, each represented by an element
        <tlv>:\n   o  A Packet TLV, included in the Packet TLV Block in a Packet Header.\n
        \  o  A Message TLV, included in the Message TLV Block in a message,\n      before
        any Address Blocks.\n   o  An Address Block TLV, included in an Address Block
        TLV Block\n      following an Address Block.  An Address Block TLV applies
        to:\n      *  all address objects in the Address Block, OR\n      *  any continuous
        sequence of address objects in the Address\n         Block, OR\n      *  a
        single address object in the Address Block.\n   <tlv> is defined by:\n       <tlv>
        := <tlv-type>\n                <tlv-flags>\n                <tlv-type-ext>?\n
        \               (<index-start><index-stop>?)?\n                (<length><value>?)?\n
        \  where:\n   <tlv-type>  is an 8-bit unsigned integer field, specifying the
        type\n      of the TLV, specific to the TLV kind (i.e., Packet TLV, Message\n
        \     TLV, or Address Block TLV).\n   <tlv-flags>  is an 8-bit field specifying
        the interpretation of the\n      remainder of the TLV:\n      bit 0 (thastypeext):
        \ If cleared ('0'), then <tlv-type-ext> is not\n         included in the <tlv>.
        \ If set ('1'), then <tlv-type-ext> is\n         included in the <tlv>.\n
        \     bit 1 (thassingleindex) and bit 2 (thasmultiindex):  Are\n         interpreted
        according to Table 3.  A combination not shown in\n         that table MUST
        NOT be used.  Both of these flags MUST be\n         cleared ('0') in Packet
        TLVs and Message TLVs.\n      bit 3 (thasvalue) and bit 4 (thasextlen):  Are
        interpreted\n         according to Table 4.  A combination not shown in that
        table\n         MUST NOT be used.\n      bit 5 (tismultivalue):  This flag
        serves to specify how the\n         <value> field is interpreted, as specified
        below.  This flag\n         MUST be cleared ('0') in Packet TLVs and Message
        TLVs, if the\n         thasmultiindex flag is cleared ('0'), or if the thasvalue
        flag\n         is cleared ('0').\n      bits 6-7:  Are RESERVED and SHOULD
        each be cleared ('0') on\n         transmission and SHOULD be ignored on reception.\n
        \   +-----------------+----------------+---------------+--------------+\n
        \   | thassingleindex | thasmultiindex | <index-start> | <index-stop> |\n
        \   +-----------------+----------------+---------------+--------------+\n
        \   |        0        |        0       |  not included | not included |\n
        \   |        1        |        0       |    included   | not included |\n
        \   |        0        |        1       |    included   |   included   |\n
        \   +-----------------+----------------+---------------+--------------+\n
        \                     Table 3: Interpretation of the\n                 thassingleindex
        and thasmultiindex flags\n   +-----------+------------+--------------+---------------------------+\n
        \  | thasvalue | thasextlen |   <length>   |          <value>          |\n
        \  +-----------+------------+--------------+---------------------------+\n
        \  |     0     |      0     | not included |        not included       |\n
        \  |     1     |      0     |    8 bits    |  included unless <length> |\n
        \  |           |            |              |          is zero          |\n
        \  |     1     |      1     |    16 bits   |  included unless <length> |\n
        \  |           |            |              |          is zero          |\n
        \  +-----------+------------+--------------+---------------------------+\n
        \      Table 4: Interpretation of the thasvalue and thasextlen flags\n   <tlv-type-ext>
        \ is an 8-bit unsigned integer field, specifying an\n      extension of the
        TLV Type, specific to the TLV Type and kind\n      (i.e., Packet TLV, Message
        TLV, or Address Block TLV).\n   tlv-type-ext is a variable, defined to equal
        <tlv-type-ext>, if\n      present, or 0 otherwise.\n   tlv-fulltype is a variable,
        defined by:\n         tlv-fulltype := 256 * <tlv-type> + tlv-type-ext\n   <index-start>
        and <index-stop>  when present, in an Address Block TLV\n      only, are each
        an 8-bit unsigned integer field.\n   index-start and index-stop are variables,
        defined according to\n      Table 5.  The variable end-index is defined as
        follows:\n      *  For Message TLVs and Packet TLVs:\n            end-index
        := 0\n      *  For Address Block TLVs:\n            end-index := <num-addr>
        - 1\n      An Address Block TLV applies to the address objects from position\n
        \     index-start to position index-stop (inclusive) in the Address\n      Block,
        where the first address object has position zero.\n   +-----------------+----------------+----------------+---------------+\n
        \  | thassingleindex | thasmultiindex | index-start := | index-stop := |\n
        \  +-----------------+----------------+----------------+---------------+\n
        \  |        0        |        0       |        0       |   end-index   |\n
        \  |        1        |        0       |  <index-start> | <index-start> |\n
        \  |        0        |        1       |  <index-start> |  <index-stop> |\n
        \  +-----------------+----------------+----------------+---------------+\n
        \                     Table 5: Interpretation of the\n                 thassingleindex
        and thasmultiindex flags\n   number-values is a variable, defined by:\n         number-values
        := index-stop - index-start + 1\n   <length>  is omitted or is an 8-bit or
        16-bit unsigned integer field\n      according to Table 4.  If the tismultivalue
        flag is set ('1'),\n      then <length> MUST be an integral multiple of number-values,
        and\n      the variable single-length is defined by:\n         single-length
        := <length> / number-values\n      If the tismultivalue flag is cleared ('0'),
        then the variable\n      single-length is defined by:\n         single-length
        := <length>\n   <value>  if present (see Table 4), is a field of length <length>\n
        \     octets.  In an Address Block TLV, <value> is associated with the\n      address
        objects from positions index-start to index-stop,\n      inclusive.  If the
        tismultivalue flag is cleared ('0'), then the\n      whole of this field is
        associated with each of the indicated\n      address objects.  If the tismultivalue
        flag is set ('1'), then\n      this field is divided equally into number-values
        fields, each of\n      length single-length octets, and these are associated,
        in order,\n      with the indicated address objects.\n"
      title: 5.4.1.  TLVs
    - contents:
      - "5.4.2.  TLV Usage\n   A TLV associates an attribute with a packet, a message,
        or one or\n   more consecutive address objects in an Address Block.  The\n
        \  interpretation and processing of this attribute, and the relationship\n
        \  (including order of processing) between different attributes\n   associated
        with the same entity MUST be defined by any protocol that\n   uses this specification.\n
        \  Any protocol using this specification MUST define appropriate\n   behaviors
        if this associated information is inconsistent, in\n   particular if two TLVs
        of the same type but with different values\n   apply to the same entity (packet,
        message, or address) but this is\n   not meaningful.  The protocol MUST also
        specify an appropriate\n   processing order for TLVs associated with a given
        entity.\n"
      title: 5.4.2.  TLV Usage
    title: 5.4.  TLVs and TLV Blocks
  - contents:
    - "5.5.  Malformed Elements\n   An element is malformed if it cannot be parsed
      according to its\n   syntactical specification (including if there are insufficient
      octets\n   available).  If the malformed element is in the Packet Header, then\n
      \  the packet MUST be silently discarded, and contained messages MUST\n   NOT
      be processed and MUST NOT be forwarded.  If the malformed element\n   is contained
      in a message (i.e., is in the Message TLV Block, an\n   Address Block, or an
      Address Block TLV Block), then that message MUST\n   be silently discarded;
      it MUST NOT be processed and MUST NOT be\n   forwarded.\n"
    title: 5.5.  Malformed Elements
  title: 5.  Syntactical Specification
- contents:
  - "6.  IANA Considerations\n   This document introduces four namespaces that have
    been registered:\n   Message Types, Packet TLV Types, Message TLV Types, and Address
    Block\n   TLV Types.  This section specifies IANA registries for these\n   namespaces
    and provides guidance to the Internet Assigned Numbers\n   Authority regarding
    registrations in these namespaces.\n   The following terms are used with the meanings
    defined in [BCP26]:\n   \"Namespace\", \"Assigned Value\", \"Registration\", \"Unassigned\",\n
    \  \"Reserved\", \"Hierarchical Allocation\", and \"Designated Expert\".\n   The
    following policies are used with the meanings defined in [BCP26]:\n   \"Private
    Use\", \"Expert Review\", and \"Standards Action\".\n"
  - contents:
    - "6.1.  Expert Review: Evaluation Guidelines\n   For registration requests where
      an Expert Review is required, the\n   Designated Expert SHOULD take the following
      general recommendations\n   into consideration:\n   o  The purpose of these
      registries is to support Standard and\n      Experimental MANET routing and
      related protocols and extensions to\n      these protocols.\n   o  The intention
      is that all registrations will be accompanied by a\n      published RFC.\n   o
      \ In order to allow for registration prior to the RFC being approved\n      for
      publication, the Designated Expert can approve the\n      registration once
      it seems clear that an RFC is expected to be\n      published.\n   o  The Designated
      Expert will post a request to the MANET WG mailing\n      list, or to a successor
      thereto as designated by the Area\n      Director, for comments and reviews.
      \ This request will include a\n      reference to the Internet-Draft requesting
      the registration.\n   o  Before a period of 30 days has passed, the Designated
      Expert will\n      either approve or deny the registration request and publish
      a note\n      of the decision to the MANET WG mailing list or its successor,
      as\n      well as inform IANA and the IESG.  A denial note MUST be justified\n
      \     by an explanation and, in cases where it is possible, suggestions\n      as
      to how the request can be modified so as to become acceptable\n      SHOULD
      be provided.\n   For the registry for Message Types, the following guidelines
      apply:\n   o  Registration of a Message Type implies creation of two registries\n
      \     for Message-Type-specific Message TLVs and Message-Type-specific\n      Address
      Block TLVs.  The document that requests the registration\n      of the Message
      Type MUST indicate how these Message-Type-specific\n      TLV Types are to be
      allocated, from any options in [BCP26], and\n      any initial allocations.
      \ The Designated Expert SHOULD take the\n      allocation policies specified
      for these registries into\n      consideration in reviewing the Message Type
      allocation request.\n   For the registries for Packet TLV Types, Message TLV
      Types, and\n   Address Block TLV Types, the following guidelines apply:\n   o
      \ These are Hierarchical Allocations, i.e., allocation of a type\n      creates
      a registry for the extended types corresponding to that\n      type.  The document
      that requests the registration of the type\n      MUST indicate how these extended
      types are to be allocated, from\n      any options in [BCP26], and any initial
      allocations.  Normally\n      this allocation should also undergo Expert Review,
      but with the\n      possible allocation of some type extensions as Reserved,\n
      \     Experimental, and/or Private.\n   o  The request for a TLV Type MUST include
      the specification of the\n      permitted size, syntax of any internal structure,
      and meaning, of\n      the Value field (if any) of the TLV.\n   For the registries
      for Message TLV Types and Address Block TLV Types,\n   the following additional
      guidelines apply:\n   o  TLV Type values 0-127 are common for all Message Types.
      \ TLVs that\n      receive registrations from the 0-127 interval SHOULD be modular
      in\n      design to allow reuse among protocols.\n   o  TLV Type values 128-223
      are Message-Type-specific TLV Type values,\n      relevant only in the context
      of the containing Message Type.\n      Registration of TLV Type values within
      the 128-223 interval\n      requires that a registry in the 128-223 interval
      exists for a\n      specific Message Type value (see Section 6.2.1), and registrations\n
      \     are made in accordance with the allocation policies specified for\n      these
      Message-Type-specific registries.  Message-Type-specific TLV\n      Types SHOULD
      be registered for TLVs that the Designated Expert\n      deems too Message-Type-specific
      for registration of a 0-127 value.\n      Multiple different TLV definitions
      MAY be assigned the same TLV\n      Type value within the 128-223 interval,
      given that they are\n      associated with different Message-Type-specific TLV
      Type\n      registries.  Where possible, existing global TLV definitions and\n
      \     modular global TLV definitions for registration in the 0-127 range\n      SHOULD
      be used.\n"
    title: '6.1.  Expert Review: Evaluation Guidelines'
  - contents:
    - "6.2.  Message Types\n   A new registry for Message Types has been created,
      with initial\n   assignments and allocation policies as specified in Table 6.\n
      \              +---------+-------------+-------------------+\n               |
      \  Type  | Description | Allocation Policy |\n               +---------+-------------+-------------------+\n
      \              |  0-223  | Unassigned  | Expert Review     |\n               |
      224-255 | Unassigned  | Experimental Use  |\n               +---------+-------------+-------------------+\n
      \                         Table 6: Message Types\n"
    - contents:
      - "6.2.1.  Message-Type-Specific TLV Registry Creation\n   When a Message Type
        is registered, then registries MUST be specified\n   for both Message-Type-specific
        Message TLVs (Table 8) and Message-\n   Type-specific Address Block TLVs (Table
        10).  A document that creates\n   a Message-Type-specific TLV registry MUST
        also specify the mechanism\n   by which Message-Type-specific TLV Types are
        allocated, from among\n   those in [BCP26].\n"
      title: 6.2.1.  Message-Type-Specific TLV Registry Creation
    title: 6.2.  Message Types
  - contents:
    - "6.3.  Packet TLV Types\n   A new registry for Packet TLV Types has been created,
      with initial\n   assignments and allocation policies as specified in Table 7.\n
      \              +---------+-------------+-------------------+\n               |
      \  Type  | Description | Allocation Policy |\n               +---------+-------------+-------------------+\n
      \              |  0-223  | Unassigned  | Expert Review     |\n               |
      224-255 | Unassigned  | Experimental Use  |\n               +---------+-------------+-------------------+\n
      \                        Table 7: Packet TLV Types\n"
    - contents:
      - "6.3.1.  Packet TLV Type Extension Registry Creation\n   When a Packet TLV
        Type is registered, then a new registry for type\n   extensions of that type
        must be created.  A document that defines a\n   Packet TLV Type MUST also
        specify the mechanism by which its type\n   extensions are allocated, from
        among those in [BCP26].\n"
      title: 6.3.1.  Packet TLV Type Extension Registry Creation
    title: 6.3.  Packet TLV Types
  - contents:
    - "6.4.  Message TLV Types\n   A new registry for Message-Type-independent Message
      TLV Types has\n   been created, with initial assignments and allocation policies
      as\n   specified in Table 8.\n        +---------+-----------------------+-----------------------+\n
      \       |   Type  | Description           | Allocation Policy     |\n        +---------+-----------------------+-----------------------+\n
      \       |  0-127  | Unassigned            | Expert Review         |\n        |
      128-223 | Message-Type-specific | Reserved, see Table 9 |\n        | 224-255
      | Unassigned            | Experimental Use      |\n        +---------+-----------------------+-----------------------+\n
      \                       Table 8: Message TLV Types\n   Message TLV Types 128-223
      are reserved for Message-Type-specific\n   Message TLVs, for which a new registry
      is created with the\n   registration of a Message Type, and with initial assignments
      and\n   allocation policies as specified in Table 9.\n       +---------+-----------------------------+-------------------+\n
      \      |   Type  | Description                 | Allocation Policy |\n       +---------+-----------------------------+-------------------+\n
      \      |  0-127  | Common to all Message Types | Reserved          |\n       |
      128-223 | Message-Type-specific       | See Below         |\n       | 224-255
      | Common to all Message Types | Reserved          |\n       +---------+-----------------------------+-------------------+\n
      \            Table 9: Message-Type-specific Message TLV Types\n   Allocation
      policies for Message-Type-specific Message TLV Types MUST\n   be specified when
      creating the registry associated with the\n   containing Message Type, see Section
      6.2.1.\n"
    - contents:
      - "6.4.1.  Message TLV Type Extension Registry Creation\n   If a Message TLV
        Type is registered, then a new registry for type\n   extensions of that type
        must be created.  A document that defines a\n   Message TLV Type MUST also
        specify the mechanism by which its type\n   extensions are allocated, from
        among those in [BCP26].\n"
      title: 6.4.1.  Message TLV Type Extension Registry Creation
    title: 6.4.  Message TLV Types
  - contents:
    - "6.5.  Address Block TLV Types\n   A new registry for Message-Type-independent
      Address Block TLV Types\n   has been created, with initial assignments and allocation
      policies as\n   specified in Table 10.\n       +---------+-----------------------+------------------------+\n
      \      |   Type  | Description           | Allocation Policy      |\n       +---------+-----------------------+------------------------+\n
      \      |  0-127  | Unassigned            | Expert Review          |\n       |
      128-223 | Message-Type-specific | Reserved, see Table 11 |\n       | 224-255
      | Unassigned            | Experimental Use       |\n       +---------+-----------------------+------------------------+\n
      \                    Table 10: Address Block TLV Types\n   Address Block TLV
      Types 128-223 are reserved for Message-Type-\n   specific Address Block TLVs,
      for which a new registry is created with\n   the registration of a Message Type,
      and with initial assignments and\n   allocation policies as specified in Table
      11.\n       +---------+-----------------------------+-------------------+\n
      \      |   Type  | Description                 | Allocation Policy |\n       +---------+-----------------------------+-------------------+\n
      \      |  0-127  | Common to all Message Types | Reserved          |\n       |
      128-223 | Message-Type-specific       | See Below         |\n       | 224-255
      | Common to all Message Types | Reserved          |\n       +---------+-----------------------------+-------------------+\n
      \         Table 11: Message-Type-specific Address Block TLV Types\n   Allocation
      policies for Message-Type-specific Address Block TLV Types\n   MUST be specified
      when creating the registry associated with the\n   containing Message Type,
      see Section 6.2.1.\n"
    - contents:
      - "6.5.1.  Address Block TLV Type Extension Registry Creation\n   When an Address
        Block TLV Type is registered, then a new registry for\n   type extensions
        of that type must be created.  A document that\n   defines a Message TLV Type
        MUST also specify the mechanism by which\n   its type extensions are allocated,
        from among those in [BCP26].\n"
      title: 6.5.1.  Address Block TLV Type Extension Registry Creation
    title: 6.5.  Address Block TLV Types
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   This specification does not describe a protocol;
    it describes a\n   packet format.  As such, it does not specify any security\n
    \  considerations; these are matters for a protocol using this\n   specification.
    \ However, some security mechanisms are enabled by this\n   specification and
    may form part of a protocol using this\n   specification.  Mechanisms that may
    form part of an authentication\n   and integrity approach in a protocol using
    this specification are\n   described in Section 7.1.  Mechanisms that may form
    part of a\n   confidentiality approach in a protocol using this specification
    are\n   described in Section 7.2.  There is, however, no requirement that a\n
    \  protocol using this specification should use either.\n"
  - contents:
    - "7.1.  Authentication and Integrity Suggestions\n   The authentication and integrity
      suggestions made here are based on\n   the intended usage in Appendix B, specifically
      that:\n   o  Messages are designed to be carriers of protocol information and\n
      \     MAY, at each hop, be forwarded and/or processed by the protocol\n      using
      this specification.\n   o  Packets are designed to carry a number of messages
      between\n      neighboring MANET routers in a single transmission and over a\n
      \     single logical hop.\n   Consequently:\n   o  For forwarded messages where
      the message is unchanged by\n      forwarding MANET routers, end-to-end authentication
      and integrity\n      MAY be implemented, between MANET routers with an existing\n
      \     security association, by including a suitable Message TLV\n      containing
      a cryptographic signature in the message.  Since <msg-\n      hop-count> and
      <msg-hop-limit> are the only fields that should be\n      modified when such
      a message is forwarded in this manner, this\n      signature can be calculated
      based on the entire message, including\n      the Message Header, with the <msg-hop-count>
      and <msg-hop-limit>\n      fields set to 0, if present.\n   o  Hop-by-hop packet
      level authentication and integrity MAY be\n      implemented, between MANET
      routers with an existing security\n      association, by including a suitable
      Packet TLV containing a\n      cryptographic signature to the packet.  Since
      packets are received\n      as transmitted, this signature can be calculated
      based on the\n      entire packet or on parts thereof as appropriate.\n"
    title: 7.1.  Authentication and Integrity Suggestions
  - contents:
    - "7.2.  Confidentiality Suggestions\n   This specification does not explicitly
      enable protecting packet/\n   message confidentiality.  Such confidentiality
      would normally, when\n   required, be provided hop-by-hop, either by link-layer
      mechanisms or\n   at the IP layer using [RFC4301], and would apply to a packet
      only.\n   It is possible, however, for a protocol using this specification to\n
      \  protect the confidentiality of information included in a Packet,\n   Message,
      or Address Block TLV by specifying that the Value field of\n   that TLV Type
      be encrypted, as well as specifying the encryption\n   mechanism.\n   In an
      extreme case, all information can be encrypted by defining\n   either:\n   o
      \ A packet, consisting of only a Packet Header (with no messages)\n      and
      containing a Packet TLV, where the Packet TLV Type indicates\n      that its
      Value field contains one or more encrypted messages.\n      Upon receipt, and
      once this Packet TLV is successfully decrypted,\n      these messages may then
      be parsed according to this specification\n      and processed according to
      the protocol using this specification.\n   o  A message, consisting of only
      a Message Header and a single\n      Message TLV, where the Message TLV Type
      indicates that its Value\n      field contains an encrypted version of the message's
      remaining\n      Message TLVs, Address Blocks, and Address Block TLVs.  Upon\n
      \     receipt, and once this Message TLV is successfully decrypted, the\n      complete
      message may then be parsed according to this\n      specification and processed
      according to the protocol using this\n      specification.\n   In either case,
      the protocol MUST define the encrypted TLV Type, as\n   well as the format of
      the encrypted data block contained in the Value\n   field of the TLV.\n"
    title: 7.2.  Confidentiality Suggestions
  title: 7.  Security Considerations
- contents:
  - "8.  Contributors\n   This specification is the result of the joint efforts of
    the\n   following contributors from the OLSRv2 Design Team, listed\n   alphabetically:\n
    \  o  Cedric Adjih, INRIA, France, <Cedric.Adjih@inria.fr>\n   o  Emmanuel Baccelli,
    INRIA, France, <Emmanuel.Baccelli@inria.fr>\n   o  Thomas Heide Clausen, LIX,
    Ecole Polytechnique, France,\n      <T.Clausen@computer.org>\n   o  Justin W.
    Dean, NRL, USA, <jdean@itd.nrl.navy.mil>\n   o  Christopher Dearlove, BAE Systems,
    UK,\n      <chris.dearlove@baesystems.com>\n   o  Satoh Hiroki, Hitachi SDL, Japan,
    <hiroki.satoh.yj@hitachi.com>\n   o  Philippe Jacquet, INRIA, France, <Philippe.Jacquet@inria.fr>\n
    \  o  Monden Kazuya, Hitachi SDL, Japan, <kazuya.monden.vw@hitachi.com>\n"
  title: 8.  Contributors
- contents:
  - "9.  Acknowledgments\n   The authors would like to acknowledge the team behind
    OLSR [RFC3626],\n   including Anis Laouiti (INT, France), Pascale Minet, Laurent
    Viennot\n   (both at INRIA, France), and Amir Qayyum (Center for Advanced\n   Research
    in Engineering, Pakistan) for their contributions.  Elwyn\n   Davies (Folly Consulting,
    UK), Lars Eggert (Nokia, Finland), Chris\n   Newman (Sun Microsystems, USA), Tim
    Polk (NIST, USA), and Magnus\n   Westerlund (Ericsson, Sweden) all provided detailed
    reviews and\n   insightful comments.\n   The authors would like to gratefully
    acknowledge the following people\n   for intense technical discussions, early
    reviews, and comments on the\n   specification and its components (listed alphabetically):\n
    \  o  Brian Adamson (NRL)\n   o  Teco Boot (Infinity Networks)\n   o  Florent
    Brunneau (LIX)\n   o  Ian Chakeres (CenGen)\n   o  Alan Cullen (BAE Systems)\n
    \  o  Ulrich Herberg (LIX)\n   o  Joe Macker (NRL)\n   o  Yasunori Owada (Niigata
    University)\n   o  Charlie E. Perkins (WiChorus)\n   o  Henning Rogge (FGAN)\n
    \  o  Andreas Schjonhaug (LIX)\n   and the entire IETF MANET working group.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for
      use in RFCs to Indicate\n                 Requirement Levels\", RFC 2119, BCP
      14, March 1997.\n   [RFC4291]     Hinden, R. and S. Deering, \"IP Version 6
      Addressing\n                 Architecture\", RFC 4291, February 2006.\n   [BCP26]
      \      Narten, T. and H. Alvestrand, \"Guidelines for Writing\n                 an
      IANA Considerations Section in RFCs\", BCP 26,\n                 RFC 5226, May
      2008.\n   [SingleUNIX]  IEEE Std 1003.1, The Open Group, and ISO/IEC JTC\n                 1/SC22/WG15,
      \"Single UNIX Specification, Version 3,\n                 2004 Edition\", April
      2004.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC3626]     Clausen, T. and P. Jacquet,
      \"The Optimized Link State\n                 Routing Protocol\", RFC 3626, October
      2003.\n   [RFC4301]     Kent, S. and K. Seo, \"Security Architecture for the\n
      \                Internet Protocol\", RFC 4301, December 2005.\n   [Stevens]
      \    Stevens, W., \"TCP/IP Illustrated Volume 1 - The\n                 Protocols\",
      1994.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Multiplexing and Demultiplexing\n   The packet and message format
    specified in this document is designed\n   to allow zero or more messages to be
    contained within a single\n   packet.  Such messages may be from the same or different
    protocols.\n   Thus, a multiplexing and demultiplexing process MUST be present.\n
    \  Multiplexing messages on a given MANET router into a single packet,\n   rather
    than having each message generate its own packet, reduces the\n   total number
    of octets and the number of packets transmitted by that\n   MANET router.\n   The
    multiplexing and demultiplexing process running on a given UDP\n   port or IP
    protocol number, and its associated protocols, MUST:\n   o  For each Message Type,
    a protocol -- unless specified otherwise,\n      the one making the IANA reservation
    for that Message Type -- MUST\n      be designated as the \"owner\" of that Message
    Type.\n   o  The Packet Header fields, including the Packet TLV Block, are used\n
    \     by the multiplexing and demultiplexing process, which MAY make\n      such
    information available for use in its protocol instances.\n   o  The <pkt-seq-num>
    field, if present, contains a sequence number\n      that is incremented by 1
    for each packet generated by a node.  The\n      sequence number after 65535 is
    0.  In other words, the sequence\n      number \"wraps\" in the usual way.\n   o
    \ Incoming messages MUST be either silently discarded or MUST be\n      delivered
    to the instance of the protocol that owns the associated\n      Message Type.
    \ Incoming messages SHOULD NOT be delivered to any\n      other protocol instances
    and SHOULD NOT be delivered to more than\n      one protocol instance.\n   o  Outgoing
    messages of a given type MUST be generated only by the\n      protocol instance
    that owns that Message Type and be delivered to\n      the multiplexing and demultiplexing
    process.\n   o  If two protocols both wish to use the same Message Type, then
    this\n      interaction SHOULD be specified by the protocol that is the\n      designated
    owner of that Message Type.\n"
  title: Appendix A.  Multiplexing and Demultiplexing
- contents:
  - "Appendix B.  Intended Usage\n   This appendix describes the intended usage of
    Message Header fields,\n   including their content and use.  Alternative uses
    of this\n   specification are permitted.\n   The message format specified in this
    document is designed to carry\n   MANET routing protocol signaling between MANET
    routers and to support\n   scope-limited flooding as well as point-to-point delivery.\n
    \  Messages are designed to be able to be forwarded over one or more\n   logical
    hops, in a new packet for each logical hop.  Each logical hop\n   may consist
    of one or more IP hops.\n   Specifically, scope-limited flooding is supported
    for messages when:\n   o  The <msg-orig-addr> field, if present, contains the
    unique\n      identifier of the MANET router that originated the message.\n   o
    \ The <msg-seq-num> field, if present, contains a sequence number\n      that
    starts at 0 when the first message of a given type is\n      generated by the
    originator node, and that is incremented by 1 for\n      each message generated
    of that type.  The sequence number after\n      65535 is 0.  In other words, the
    sequence number \"wraps\" in the\n      usual way.\n   o  If the <msg-orig-addr>
    and <msg-seq-num> fields are both present,\n      then the Message Header provides
    for duplicate suppression, using\n      the identifier consisting of the message's
    <msg-orig-addr>, <msg-\n      seq-num>, and <msg-type>.  These serve to uniquely
    identify the\n      message in the MANET within the time period until <msg-seq-num>
    is\n      repeated, i.e., wraps around to a matching value.\n   o  <msg-hop-limit>
    field, if present, contains the number of hops on\n      which the packet is allowed
    to travel before being discarded by a\n      MANET router.  The <msg-hop-limit>
    is set by the message\n      originator and is used to prevent messages from endlessly\n
    \     circulating in a MANET.  When forwarding a message, a MANET router\n      should
    decrease the <msg-hop-limit> by 1, and the message should\n      be discarded
    when <msg-hop-limit> reaches 0.\n   o  <msg-hop-count> field, if present, contains
    the number of hops on\n      which the packet has traveled across the MANET.  The
    <msg-hop-\n      count> is set to 0 by the message originator and is used to\n
    \     prevent messages from endlessly circulating in a MANET.  When\n      forwarding
    a message, a MANET router should increase <msg-hop-\n      count> by 1 and should
    discard the message when <msg-hop-count>\n      reaches 255.\n   o  If the <msg-hop-limit>
    and <msg-hop-count> fields are both\n      present, then the Message Header provides
    the information to make\n      forwarding decisions for scope-limited flooding.
    \ This may be by\n      any appropriate flooding mechanism specified by a protocol
    using\n      this specification.\n"
  title: Appendix B.  Intended Usage
- contents:
  - "Appendix C.  Examples\n   This appendix contains some examples of parts of this
    specification.\n"
  - contents:
    - "C.1.  Address Block Examples\n   The following examples illustrate how some
      combinations of addresses\n   may be efficiently included in Address Blocks.
      \ These examples are\n   for IPv4, with address-length equal to 4. a, b, c,
      etc. represent\n   distinct, non-zero octet values.\n   Note that it is permissible
      to use a less efficient representation,\n   in particular one in which the ahashead
      and ahasfulltail flags are\n   cleared ('0'), and hence head-length = 0, tail-length
      = 0, mid-length\n   = address-length, and (with no address prefixes) the Address
      Block\n   consists of the number of addresses, <addr-flags> with value 0, and
      a\n   list of the unaggregated addresses.  This is the most efficient way\n
      \  to represent a single address, and the only way to represent, for\n   example,
      a.b.c.d and e.f.g.h in one Address Block.\n   Examples:\n   o  To include a.b.c.d,
      a.b.e.f, and a.b.g.h:\n      *  head-length = 2;\n      *  tail-length = 0;\n
      \     *  mid-length = 2;\n      *  <addr-flags> has ahashead set (value 128);\n
      \     *  <tail-length> and <tail> are omitted.\n      The Address Block is then
      3 128 2 a b c d e f g h (11 octets).\n   o  To include a.b.c.g and d.e.f.g:\n
      \     *  head-length = 0;\n      *  tail-length = 1;\n      *  mid-length =
      3;\n      *  <addr-flags> has ahasfulltail set (value 64);\n      *  <head-length>
      and <head> are omitted.\n      The Address Block is then 2 64 1 g a b c d e
      f (10 octets).\n   o  To include a.b.d.e and a.c.d.e:\n      *  head-length
      = 1;\n      *  tail-length = 2;\n      *  mid-length = 1;\n      *  <addr-flags>
      has ahashead and ahasfulltail set (value 192).\n      The Address Block is then
      2 192 1 a 2 d e b c (9 octets).\n   o  To include a.b.0.0, a.c.0.0, and a.d.0.0:\n
      \     *  head-length = 1;\n      *  tail-length = 2;\n      *  mid-length =
      1;\n      *  <addr-flags> has ahashead and ahaszerotail set (value 160);\n      *
      \ <tail> is omitted.\n      The Address Block is then 3 160 1 a 2 b c d (8 octets).\n
      \  o  To include a.b.0.0 and c.d.0.0:\n      *  head-length = 0;\n      *  tail-length
      = 2;\n      *  mid-length = 2;\n      *  <addr-flags> has ahaszerotail set (value
      32);\n      *  <head> and <tail> are omitted.\n      The Address Block is then
      2 32 2 a b c d (7 octets).\n   o  To include a.b.0.0/n and c.d.0.0/n:\n      *
      \ head-length = 0;\n      *  tail-length = 2;\n      *  mid-length = 2;\n      *
      \ <addr-flags> has ahaszerotail and ahassingleprelen set (value\n         48);\n
      \     *  <head> and <tail> are omitted.\n      The Address Block is then 2 48
      2 a b c d n (8 octets).\n   o  To include a.b.0.0/n and c.d.0.0/m:\n      *
      \ head-length = 0;\n      *  tail-length = 2;\n      *  mid-length = 2;\n      *
      \ <addr-flags> has ahaszerotail and ahasmultiprelen set (value\n         40);\n
      \     *  <head> and <tail> are omitted.\n      The Address Block is then 2 40
      2 a b c d n m (9 octets).\n"
    title: C.1.  Address Block Examples
  - contents:
    - "C.2.  TLV Examples\n   Assume the definition of an Address Block TLV with type
      EXAMPLE1 (and\n   no type extension) that has single octet values per address.
      \ There\n   are a number of ways in which values a, a, b, and c may be associated\n
      \  with the four addresses in the preceding Address Block, where c is a\n   default
      value that can be omitted.\n   Examples:\n   o  Using one multivalue TLV to
      cover all of the addresses:\n      *  <tlv-flags> has thasvalue and tismultivalue
      set (value 20);\n      *  <index-start> and <index-stop> are omitted;\n      *
      \ <length> = 4 (single-length = 1).\n      *  The TLV is then EXAMPLE1 20 4
      a a b c (7 octets).\n   o  Using one multivalue TLV and omitting the last address:\n
      \     *  <tlv-flags> has thasmultiindex, thasvalue, and tismultivalue\n         set
      (value 52);\n      *  <index-start> = 0;\n      *  <index-stop> = 2;\n      *
      \ <length> = 3 (single-length = 1).\n      *  The TLV is then EXAMPLE1 52 0
      2 3 a a b (8 octets).\n   o  Using two single value TLVs and omitting the last
      address.  First:\n      *  <tlv-flags> has thasmultiindex and thasvalue set
      (value 48);\n      *  <index-start> = 0;\n      *  <index-stop> = 1;\n      *
      \ <length> = 1;\n      *  <value> = a.\n      *  The TLV is then EXAMPLE1 48
      0 1 1 a (6 octets).\n      Second:\n      *  <tlv-flags> has thassingleindex
      and thasvalue set (value 80);\n      *  <index-start> = 2;\n      *  <index-stop>
      is omitted;\n      *  <length> = 1;\n      *  <value> = b.\n      *  The TLV
      is then EXAMPLE1 80 2 1 b (5 octets).\n      Total length of TLVs is 11 octets.\n
      \  In this case, the first of these is the most efficient.  In other\n   cases,
      patterns such as the others may be preferred.  Regardless of\n   efficiency,
      any of these may be used.\n   Assume the definition of an Address Block TLV
      with type EXAMPLE2 (and\n   no type extension) that has no value and that is
      to be associated\n   with the second and third addresses in an Address Block.
      \ This can be\n   indicated with a single TLV:\n   o  <tlv-flags> has thasmultiindex
      set (value 32);\n   o  <index-start> = 1;\n   o  <index-stop> = 2;\n   o  <length>
      and <value> are omitted.\n   o  The TLV is then EXAMPLE2 32 1 2 (4 octets).\n
      \  Assume the definition of a Message TLV with type EXAMPLE3 (and no\n   type
      extension) that can take a Value field of any length.  For such\n   a TLV with
      8 octets of data (a to h):\n   o  <tlv-flags> has thasvalue set (value 16);\n
      \  o  <index-start> and <index-stop> are omitted;\n   o  <length> = 8.\n   o
      \ The TLV is then EXAMPLE3 16 8 a b c d e f g h (11 octets).\n   If, in this
      example, the number of data octets were 256 or greater,\n   then <tlv-flags>
      would also have thasextlen set and have value 24.\n   The length would require
      two octets (most significant first).  The\n   TLV length would be 4 + N octets,
      where N is the number of data\n   octets (it can be 3 + N octets if N is 255
      or less).\n"
    title: C.2.  TLV Examples
  title: Appendix C.  Examples
- contents:
  - "Appendix D.  Illustrations\n   This informative appendix illustrates the elements
    that are\n   normatively specified in Section 5.\n   Bits labeled Rsv should be
    cleared ('0').  Bits labeled M may be\n   cleared ('0') or set ('1').\n"
  - contents:
    - "D.1.  Packet\n   This section illustrates possible options for the <packet>
      element.\n   These are differentiated by the flags field in the first octet.
      \ The\n   packet may include any number (zero or more) of messages.  The number\n
      \  of messages is determined from when the packet is exhausted, given\n   the
      packet length from the network layer.\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|0|0|0|0|0|Rsv|                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                            Message
      \                           |\n     |                                                               |\n
      \    |                                               +-+-+-+-+-+-+-+-+\n     |
      \                                              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                            Message                            |\n     |
      \                                              +-+-+-+-+-+-+-+-+\n     |                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|0|0|0|1|0|Rsv|    Packet Sequence Number     |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                            Message                            |\n     |
      \                                                              |\n     |                                               +-+-+-+-+-+-+-+-+\n
      \    |                                               |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                            Message                            |\n     |
      \                                              +-+-+-+-+-+-+-+-+\n     |                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|0|0|0|0|1|Rsv|                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                                                               |\n
      \    |                       Packet TLV Block                        |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                            Message
      \                           |\n     |                                                               |\n
      \    |                                               +-+-+-+-+-+-+-+-+\n     |
      \                                              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                            Message                            |\n     |
      \                                              +-+-+-+-+-+-+-+-+\n     |                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |0|0|0|0|1|1|Rsv|    Packet Sequence Number     |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                       Packet TLV Block                        |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                            Message                            |\n     |
      \                                                              |\n     |                                               +-+-+-+-+-+-+-+-+\n
      \    |                                               |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                            Message                            |\n     |
      \                                              +-+-+-+-+-+-+-+-+\n     |                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: D.1.  Packet
  - contents:
    - "D.2.  Message\n   This section illustrates possible options for the <message>
      element.\n   These are differentiated by their second (flags) octet.  The length\n
      \  of the Message Body is determined using the Message Size field, which\n   is
      the combined length of all the fields shown.  The field labeled\n   MAL defines
      the length of all addresses (including the Originator\n   Address, if present,
      and all addresses in Address Blocks) in octets,\n   as one more than the value
      in the field.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|0|0|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                        Message Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|0|0|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                        Message Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|1|0|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                         Message
      Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|1|0|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                         Message
      Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|0|1|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Count   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                         Message
      Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|0|1|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Count   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                         Message
      Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|1|1|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |   Hop Count   |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|1|1|0|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |   Hop Count   |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|0|0|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Message Sequence Number    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|0|0|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Message Sequence Number    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|1|0|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |    Message Sequence Number    |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|1|0|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |    Message Sequence Number    |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|0|1|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Count   |    Message Sequence Number    |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|0|1|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Count   |    Message Sequence Number    |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                         Message Body                          |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |0|1|1|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |   Hop Count   |    Message Sequence Number    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                        Message Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  |1|1|1|1|  MAL  |         Message Size          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                      Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |   Hop Count   |    Message Sequence Number    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                        Message Body                          |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: D.2.  Message
  - contents:
    - "D.3.  Message Body\n   This section illustrates the format of a Message Body
      (the <message>\n   element excluding its initial <msg-header> element).  The
      Message\n   Body includes one Message TLV Block (containing zero or more TLVs)\n
      \  and may include any number (zero or more) of Address Block and\n   Address
      Block TLV Block pairs.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                      Message TLV Block                       |\n     |                                               +-+-+-+-+-+-+-+-+\n
      \    |                                               |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                         Address Block                         |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                    Address
      Block TLV Block                    |\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                                               +-+-+-+-+-+-+-+-+\n
      \    |                                               |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                         Address Block                         |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                    Address Block TLV Block                    |\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: D.3.  Message Body
  - contents:
    - "D.4.  Address Block\n   This section illustrates possible options for the <addr-block>\n
      \  element.  These are differentiated by their second (flags) octet.\n   The
      number of Mid elements is equal to the number of addresses\n   (except when
      mid-length is zero, when there are no Mid elements).\n   Where a variable number
      of prefix length fields is shown, their\n   number is equal to the number of
      addresses.\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|0|0|0|0| Rsv |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Mid (cont)           |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Mid (cont)           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|0|0|0|0| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |              Mid              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|1|0|0|0| Rsv |  Tail Length  |     Tail      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Tail (cont)  |              Mid              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|1|0|0|0| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |  Tail Length  |             Tail              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              Mid              |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|0|1|0|0| Rsv |  Tail Length  |      Mid      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Mid (cont)   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|0|1|0|0| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |  Tail Length  |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \             Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|0|0|1|0| Rsv |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Mid (cont)           |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Mid (cont)           | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|0|0|1|0| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |              Mid              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|1|0|1|0| Rsv |  Tail Length  |     Tail      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Tail (cont)  |              Mid              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|1|0|1|0| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |  Tail Length  |             Tail              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              Mid              |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Prefix Length |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|0|1|1|0| Rsv |  Tail Length  |      Mid      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Mid (cont)   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|0|1|1|0| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |  Tail Length  |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \             Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|0|0|0|1| Rsv |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Mid (cont)           |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |          Mid (cont)           | Prefix Length |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|0|0|0|1| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |              Mid              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|1|0|0|1| Rsv |  Tail Length  |     Tail      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Tail (cont)  |              Mid              |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|1|0|0|1| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |  Tail Length  |             Tail              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              Mid              |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                               |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Prefix Length |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     :                              ...
      \                             :\n     |                                               +-+-+-+-+-+-+-+-+\n
      \    |                                               | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |0|0|1|0|1| Rsv |  Tail Length  |      Mid      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Mid (cont)   |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |              Mid              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Number Addrs  |1|0|1|0|1| Rsv |  Head Length  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |  Tail Length  |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \             Mid              | Prefix Length |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    :                              ...                              :\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               | Prefix Length |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: D.4.  Address Block
  - contents:
    - "D.5.  TLV Block\n   This section illustrates the format of a <tlv-block> element.
      \ There\n   may be any number (zero or more) of TLVs, with total length of the\n
      \  TLVs (in octets) equal to the Length field.\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |            Length             |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                              TLV                              |\n     |
      \                                              +-+-+-+-+-+-+-+-+\n     |                                               |
      \              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |\n
      \    |                                                               |\n     :
      \                             ...                              :\n     |                                                               |\n
      \    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \                              |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                              TLV                              |\n     |
      \                                              +-+-+-+-+-+-+-+-+\n     |                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: D.5.  TLV Block
  - contents:
    - "D.6.  TLV\n   This section illustrates possible options for the <tlv> element.\n
      \  These are differentiated by their second (flags) octet.  If there are\n   no
      Index fields, then this may be a Packet TLV, Message TLV, or\n   Address Block
      TLV; if there are one or two Index fields, then this\n   must be an Address
      Block TLV.  The Length field gives the length of\n   the Value field (in octets).\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|0|0|0|0|0|Rsv|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|0|0|0|0|0|Rsv|   Type Ext    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|1|0|0|0|0|Rsv|  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|1|0|0|0|0|Rsv|   Type Ext    |  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|0|1|0|0|0|Rsv|  Index Start  |  Index Stop   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|0|1|0|0|0|Rsv|   Type Ext    |  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Index Stop   |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|0|0|1|0|M|Rsv|    Length     |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                             Value                             |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|0|0|1|0|M|Rsv|   Type Ext    |    Length     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                            Value                             |\n     |                                                               |\n
      \    |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \              |\n     +-+-+-+-+-+-+-+-+\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|1|0|1|0|0|Rsv|  Index Start  |    Length     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                            Value                             |\n     |                                                               |\n
      \    |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \              |\n     +-+-+-+-+-+-+-+-+\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|1|0|1|0|0|Rsv|   Type Ext    |  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Length     |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                             Value
      \                            |\n     |                                                               |\n
      \    |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \              |\n     +-+-+-+-+-+-+-+-+\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|0|1|1|0|M|Rsv|  Index Start  |  Index Stop   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Length     |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                             Value
      \                            |\n     |                                                               |\n
      \    |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \              |\n     +-+-+-+-+-+-+-+-+\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|0|1|1|0|M|Rsv|   Type Ext    |  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Index Stop   |    Length     |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                             Value                             |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|0|0|0|1|M|Rsv|            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     |
      \                            Value                             |\n     |                                                               |\n
      \    |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \              |\n     +-+-+-+-+-+-+-+-+\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|0|0|1|1|M|Rsv|   Type Ext    |    Length     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Length (cont) |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                             Value
      \                            |\n     |                                                               |\n
      \    |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
      \              |\n     +-+-+-+-+-+-+-+-+\n      0                   1                   2
      \                  3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|1|0|1|1|0|Rsv|  Index Start  |    Length     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Length (cont) |                                               |\n     +-+-+-+-+-+-+-+-+
      \                                              |\n     |                                                               |\n
      \    |                             Value                             |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|1|0|1|1|0|Rsv|   Type Ext    |  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |            Length             |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                             Value                             |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |0|0|1|1|1|M|Rsv|  Index Start  |  Index Stop   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |            Length             |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n     |                                                               |\n
      \    |                             Value                             |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |1|0|1|1|1|M|Rsv|   Type Ext    |  Index Start  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Index Stop   |            Length             |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \              |\n     |                                                               |\n
      \    |                             Value                             |\n     |
      \                                                              |\n     |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |               |\n     +-+-+-+-+-+-+-+-+\n"
    title: D.6.  TLV
  title: Appendix D.  Illustrations
- contents:
  - "Appendix E.  Complete Example\n   The following example packet is included with
    the intent to exemplify\n   how Packet Headers and Message Headers are constructed,
    and how\n   addresses and attributes are encoded using Address Blocks and TLV\n
    \  Blocks.  This example is specifically not constructed to exhibit\n   maximum
    message or packet size reduction.\n   The Packet Header has the phasseqnum flag
    of its flags field set\n   (value 8), and hence has a Packet Sequence Number,
    but no Packet TLV\n   Block.\n   The packet contains a single message with length
    54 octets.  This\n   message has the mhasorig, mhashoplimit, mhashopcount, and
    mhasseqnum\n   flags of its four-bit flags field set (value 15), and hence includes\n
    \  an Originator Address, a Hop Limit, a Hop Count, and a Message\n   Sequence
    Number (which is type independent).  Its four-bit Message\n   Address Length field
    has value 3, and hence addresses in the message\n   have length four octets, here
    being IPv4 addresses.  The message has\n   a Message TLV Block with content length
    9 octets, containing a single\n   Message TLV.  This TLV has the thasvalue flag
    of its flags octet set\n   (value 16), and hence contains a Value field, with
    preceding Value\n   Length 6 octets.  The message then has two Address Blocks,
    each with\n   a following Address Block TLV Block.\n   The first Address Block
    contains 2 address prefixes.  It has the\n   ahaszerotail and ahassingleprelen
    flags of its flags octet set (value\n   48), and hence has no Head (head-length
    is zero octets).  It has a\n   tail-length of 2 octets, hence mid-length is two
    octets.  The two\n   Tail octets of each address are not included (since ahaszerotail
    is\n   set) and have value zero.  The Address Block has a single prefix\n   length.
    \ The following Address Block TLV Block is empty (content\n   length 0 octets).\n
    \  The second Address Block contains 3 addresses.  It has the ahashead\n   flag
    of its flags octet set (value 128), has head-length 2 octets,\n   and no Tail
    (tail-length is zero octets); hence, mid-length is two\n   octets.  It is followed
    by an Address Block TLV Block, with content\n   length 9 octets, containing two
    Address Block TLVs.  The first of\n   these TLVs has the thasvalue flag of its
    flags octet set (value 16),\n   and has a single value of length 2 octets, which
    applies to all of\n   the addresses in the Address Block.  The second of these
    TLVs has the\n   thasmultiindex flag of its flags octet set (value 32), and hence
    has\n   no Value Length or Value fields.  It has two Index fields (Index\n   Start
    and Index Stop), which indicate those addresses this TLV\n   applies to (inclusive
    range, counting from zero).\n      0                   1                   2                   3\n
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 1 0 0 0|    Packet Sequence Number     | Message Type  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |1 1 1 1 0 0 1 1|0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0|   Orig Addr   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |           Originator Address (cont)           |   Hop Limit   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |   Hop Count   |    Message Sequence Number    |0 0 0 0 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 1 0 0 1|   TLV Type    |0 0 0 1 0 0 0 0|0 0 0 0 0 1 1 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                             Value                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |         Value (cont)          |0 0 0 0 0 0 1 0|0 0 1 1 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 0 1 0|              Mid              |      Mid      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |  Mid (cont)   | Prefix Length |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 0 0 1 1|1 0 0 0 0 0 0 0|0 0 0 0 0 0 1 0|     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |  Head (cont)  |              Mid              |      Mid      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |  Mid (cont)   |              Mid              |0 0 0 0 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |0 0 0 0 1 0 0 1|   TLV Type    |0 0 0 1 0 0 0 0|0 0 0 0 0 0 1 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |             Value             |   TLV Type    |0 0 1 0 0 0 0 0|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |  Index Start  |  Index Stop   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
  title: Appendix E.  Complete Example
- contents:
  - "Authors' Addresses\n   Thomas Heide Clausen\n   LIX, Ecole Polytechnique\n   Phone:
    +33 6 6058 9349\n   EMail: T.Clausen@computer.org\n   URI:   http://www.thomasclausen.org/\n
    \  Christopher M. Dearlove\n   BAE Systems ATC\n   Phone: +44 1245 242194\n   EMail:
    chris.dearlove@baesystems.com\n   URI:   http://www.baesystems.com/\n   Justin
    W. Dean\n   Naval Research Laboratory\n   Phone: +1 202 767 3397\n   EMail: jdean@itd.nrl.navy.mil\n
    \  URI:   http://pf.itd.nrl.navy.mil/\n   Cedric Adjih\n   INRIA Rocquencourt\n
    \  Phone: +33 1 3963 5215\n   EMail: Cedric.Adjih@inria.fr\n   URI:   http://menetou.inria.fr/~adjih/\n"
  title: Authors' Addresses
