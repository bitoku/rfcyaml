- contents:
  - '                   RTP Retransmission Payload Format

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   RTP retransmission is an effective packet loss recovery technique
    for\n   real-time applications with relaxed delay bounds.  This document\n   describes
    an RTP payload format for performing retransmissions.\n   Retransmitted RTP packets
    are sent in a separate stream from the\n   original RTP stream.  It is assumed
    that feedback from receivers to\n   senders is available.  In particular, it is
    assumed that Real-time\n   Transport Control Protocol (RTCP) feedback as defined
    in the extended\n   RTP profile for RTCP-based feedback (denoted RTP/AVPF) is
    available\n   in this memo.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Requirements and Design Rationale for a Retransmission Scheme ...4\n      3.1.
    Multiplexing Scheme Choice .................................6\n   4. Retransmission
    Payload Format ...................................7\n   5. Association of Retransmission
    and Original Streams ..............9\n      5.1. Retransmission Session Sharing
    .............................9\n      5.2. CNAME Use ..................................................9\n
    \     5.3. Association at the Receiver ................................9\n   6.
    Use with the Extended RTP Profile for RTCP-based Feedback ......11\n      6.1.
    RTCP at the Sender ........................................11\n      6.2. RTCP
    Receiver Reports .....................................11\n      6.3. Retransmission
    Requests ...................................12\n      6.4. Timing Rules ..............................................13\n
    \  7. Congestion Control .............................................13\n   8.
    Retransmission Payload Format MIME Type Registration ...........15\n      8.1.
    Introduction ..............................................15\n      8.2. Registration
    of audio/rtx .................................16\n      8.3. Registration of video/rtx
    .................................17\n      8.4. Registration of text/rtx ..................................18\n
    \     8.5. Registration of application/rtx ...........................19\n      8.6.
    Mapping to SDP ............................................20\n      8.7. SDP
    Description with Session-Multiplexing .................20\n      8.8. SDP Description
    with SSRC-Multiplexing ....................21\n   9. RTSP Considerations ............................................22\n
    \     9.1. RTSP Control with SSRC-Multiplexing .......................22\n      9.2.
    RTSP Control with Session-Multiplexing ....................22\n      9.3. RTSP
    Control of the Retransmission Stream .................23\n      9.4. Cache Control
    .............................................23\n   10. Implementation Examples
    .......................................23\n      10.1. A Minimal Receiver Implementation
    Example ................24\n      10.2. Retransmission of Layered Encoded Media
    in Multicast .....25\n   11. IANA Considerations ...........................................26\n
    \  12. Security Considerations .......................................26\n   13.
    Acknowledgements ..............................................27\n   14. References
    ....................................................27\n      14.1. Normative
    References .....................................27\n      14.2. Informative References
    ...................................28\n   Appendix A. How to Control the Number
    of Rtxs. per Packet .........29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Packet losses between an RTP sender and receiver may significantly\n
    \  degrade the quality of the received media.  Several techniques, such\n   as
    forward error correction (FEC), retransmissions, or interleaving,\n   may be considered
    to increase packet loss resiliency.  RFC 2354 [8]\n   discusses the different
    options.\n   When choosing a repair technique for a particular application, the\n
    \  tolerable latency of the application has to be taken into account.\n   In the
    case of multimedia conferencing, the end-to-end delay has to\n   be at most a
    few hundred milliseconds in order to guarantee\n   interactivity, which usually
    excludes the use of retransmission.\n   With sufficient latency, the efficiency
    of the repair scheme can be\n   increased.  The sender may use the receiver feedback
    in order to\n   react to losses before their playout time at the receiver.\n   In
    the case of multimedia streaming, the user can tolerate an initial\n   latency
    as part of the session set-up and thus an end-to-end delay of\n   several seconds
    may be acceptable.  RTP retransmission as defined in\n   this document is targeted
    at such applications.\n   Furthermore, the RTP retransmission method defined herein
    is\n   applicable to unicast and (small) multicast groups.  The present\n   document
    defines a payload format for retransmitted RTP packets and\n   provides protocol
    rules for the sender and the receiver involved in\n   retransmissions.\n   This
    retransmission payload format was designed for use with the\n   extended RTP profile
    for RTCP-based feedback, AVPF [1].  It may also\n   be used with other RTP profiles
    defined in the future.\n   The AVPF profile allows for more frequent feedback
    and for early\n   feedback.  It defines a general-purpose feedback message, i.e.,
    NACK,\n   as well as codec and application-specific feedback messages.  See [1]\n
    \  for details.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The following terms are used in this document:\n   CSRC:
    contributing source.  See [3].\n   Original packet: an RTP packet that carries
    user data sent for the\n   first time by an RTP sender.\n   Original stream: the
    RTP stream of original packets.\n   Retransmission packet: an RTP packet that
    is to be used by the\n   receiver instead of a lost original packet.  Such a retransmission\n
    \  packet is said to be associated with the original RTP packet.\n   Retransmission
    request: a means by which an RTP receiver is able to\n   request that the RTP
    sender should send a retransmission packet for a\n   given original packet.  Usually,
    an RTCP NACK packet as specified in\n   [1] is used as retransmission request
    for lost packets.\n   Retransmission stream: the stream of retransmission packets\n
    \  associated with an original stream.\n   Session-multiplexing: scheme by which
    the original stream and the\n   associated retransmission stream are sent into
    two different RTP\n   sessions.\n   SSRC: synchronization source.  See [3].\n
    \  SSRC-multiplexing: scheme by which the original stream and the\n   retransmission
    stream are sent in the same RTP session with different\n   SSRC values.\n   The
    key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in RFC 2119 [2].\n"
  title: 2.  Terminology
- contents:
  - "3.  Requirements and Design Rationale for a Retransmission Scheme\n   The use
    of retransmissions in RTP as a repair method for streaming\n   media is appropriate
    in those scenarios with relaxed delay bounds and\n   where full reliability is
    not a requirement.  More specifically, RTP\n   retransmission allows one to trade
    off reliability vs. delay; i.e.,\n   the endpoints may give up retransmitting
    a lost packet after a given\n   buffering time has elapsed.  Unlike TCP, there
    is thus no head-of-\n   line blocking caused by RTP retransmissions.  The implementer
    should\n   be aware that in cases where full reliability is required or higher\n
    \  delay and jitter can be tolerated, TCP or other transport options\n   should
    be considered.\n   The RTP retransmission scheme defined in this document is designed
    to\n   fulfill the following set of requirements:\n   1. It must not break general
    RTP and RTCP mechanisms.\n   2. It must be suitable for unicast and small multicast
    groups.\n   3. It must work with mixers and translators.\n   4. It must work with
    all known payload types.\n   5. It must not prevent the use of multiple payload
    types in a\n      session.\n   6. In order to support the largest variety of payload
    formats, the\n      RTP receiver must be able to derive how many and which RTP
    packets\n      were lost as a result of a gap in received RTP sequence numbers.\n
    \     This requirement is referred to as sequence number preservation.\n      Without
    such a requirement, it would be impossible to use\n      retransmission with payload
    formats, such as conversational text\n      [9] or most audio/video streaming
    applications, that use the RTP\n      sequence number to detect lost packets.\n
    \  When designing a solution for RTP retransmission, several approaches\n   may
    be considered for the multiplexing of the original RTP packets\n   and the retransmitted
    RTP packets.\n   One approach may be to retransmit the RTP packet with its original\n
    \  sequence number and send original and retransmission packets in the\n   same
    RTP stream.  The retransmission packet would then be identical\n   to the original
    RTP packet, i.e., the same header (and thus same\n   sequence number) and the
    same payload.  However, such an approach is\n   not acceptable because it would
    corrupt the RTCP statistics.  As a\n   consequence, requirement 1 would not be
    met.  Correct RTCP statistics\n   require that for every RTP packet within the
    RTP stream, the sequence\n   number be increased by one.\n   Another approach
    may be to multiplex original RTP packets and\n   retransmission packets in the
    same RTP stream using different payload\n   type values.  With such an approach,
    the original packets and the\n   retransmission packets would share the same sequence
    number space.\n   As a result, the RTP receiver would not be able to infer how
    many and\n   which original packets (which sequence numbers) were lost.\n   In
    other words, this approach does not satisfy the sequence number\n   preservation
    requirement (requirement 6).  This in turn implies that\n   requirement 4 would
    not be met.  Interoperability with mixers and\n   translators would also be more
    difficult if they did not understand\n   this new retransmission payload type
    in a sender RTP stream.  For\n   these reasons, a solution based on payload type
    multiplexing of\n   original packets and retransmission packets in the same RTP
    stream is\n   excluded.\n   Finally, the original and retransmission packets may
    be sent in two\n   separate streams.  These two streams may be multiplexed either
    by\n   sending them in two different sessions , i.e., session-multiplexing,\n
    \  or in the same session using different SSRC values, i.e., SSRC-\n   multiplexing.
    \ Since original and retransmission packets carry media\n   of the same type,
    the objections in Section 5.2 of RTP [3] to RTP\n   multiplexing do not apply
    in this case.\n   Mixers and translators may process the original stream and simply\n
    \  discard the retransmission stream if they are unable to utilise it.\n   On
    the other hand, sending the original and retransmission packets in\n   two separate
    streams does not alone satisfy requirements 1 and 6.\n   For this purpose, this
    document includes the original sequence number\n   in the retransmitted packets.\n
    \  In this manner, using two separate streams satisfies all the\n   requirements
    listed in this section.\n"
  - contents:
    - "3.1.  Multiplexing Scheme Choice\n   Session-multiplexing and SSRC-multiplexing
      have different pros and\n   cons:\n   Session-multiplexing is based on sending
      the retransmission stream in\n   a different RTP session (as defined in RTP
      [3]) from that of the\n   original stream; i.e., the original and retransmission
      streams are\n   sent to different network addresses and/or port numbers.  Having
      a\n   separate session allows more flexibility.  In multicast, using two\n   separate
      sessions for the original and the retransmission streams\n   allows a receiver
      to choose whether or not to subscribe to the RTP\n   session carrying the retransmission
      stream.  The original session may\n   also be single-source multicast while
      separate unicast sessions are\n   used to convey retransmissions to each of
      the receivers, which as a\n   result will receive only the retransmission packets
      they request.\n   The use of separate sessions also facilitates differential
      treatment\n   by the network and may simplify processing in mixers, translators,\n
      \  and packet caches.\n   With SSRC-multiplexing, a single session is needed
      for the original\n   and the retransmission streams.  This allows streaming
      servers and\n   middleware that are involved in a high number of concurrent
      sessions\n   to minimise their port usage.\n   This retransmission payload format
      allows both session-multiplexing\n   and SSRC-multiplexing for unicast sessions.
      \ From an implementation\n   point of view, there is little difference between
      the two approaches.\n   Hence, in order to maximise interoperability, both multiplexing\n
      \  approaches SHOULD be supported by senders and receivers.  For\n   multicast
      sessions, session-multiplexing MUST be used because the\n   association of the
      original stream and the retransmission stream is\n   problematic if SSRC-multiplexing
      is used with multicast sessions(see\n   Section 5.3 for motivation).\n"
    title: 3.1.  Multiplexing Scheme Choice
  title: 3.  Requirements and Design Rationale for a Retransmission Scheme
- contents:
  - "4.  Retransmission Payload Format\n   The format of a retransmission packet is
    shown below:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                         RTP Header                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |            OSN                |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    \                              |\n   |                  Original RTP Packet Payload
    \                 |\n   |                                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The RTP
    header usage is as follows:\n   In the case of session-multiplexing, the same
    SSRC value MUST be used\n   for the original stream and the retransmission stream.
    \ In the case\n   of an SSRC collision in either the original session or the\n
    \  retransmission session, the RTP specification requires that an RTCP\n   BYE
    packet MUST be sent in the session where the collision happened.\n   In addition,
    an RTCP BYE packet MUST also be sent for the associated\n   stream in its own
    session.  After a new SSRC identifier is obtained,\n   the SSRC of both streams
    MUST be set to this value.\n   In the case of SSRC-multiplexing, two different
    SSRC values MUST be\n   used for the original stream and the retransmission stream
    as\n   required by RTP.  If an SSRC collision is detected for either the\n   original
    stream or the retransmission stream, the RTP specification\n   requires that an
    RTCP BYE packet MUST be sent for this stream.  An\n   RTCP BYE packet MUST NOT
    be sent for the associated stream.\n   Therefore, only the stream that experienced
    SSRC collision MUST\n   choose a new SSRC value.  Refer to Section 5.3 for the
    implications\n   on the original stream and retransmission stream SSRC association
    at\n   the receiver.\n   For either multiplexing scheme, the sequence number has
    the standard\n   definition; i.e., it MUST be one higher than the sequence number
    of\n   the preceding packet sent in the retransmission stream.\n   The retransmission
    packet timestamp MUST be set to the original\n   timestamp, i.e., to the timestamp
    of the original packet.  As a\n   consequence, the initial RTP timestamp for the
    first packet of the\n   retransmission stream is not random but equal to the original\n
    \  timestamp of the first packet that is retransmitted.  See the\n   Security
    Considerations section in this document for security\n   implications.\n   Implementers
    have to be aware that the RTCP jitter value for the\n   retransmission stream
    does not reflect the actual network jitter\n   since there could be little correlation
    between the time a packet is\n   retransmitted and its original timestamp.\n   The
    payload type is dynamic.  If multiple payload types using\n   retransmission are
    present in the original stream, then for each of\n   these, a dynamic payload
    type MUST be mapped to the retransmission\n   payload format.  See Section 8.1
    for the specification of how the\n   mapping between original and retransmission
    payload types is done\n   with Session Description Protocol (SDP).\n   As the
    retransmission packet timestamp carries the original media\n   timestamp, the
    timestamp clockrate used by the retransmission payload\n   type MUST be the same
    as the one used by the associated original\n   payload type.  Therefore, if an
    RTP stream carries payload types of\n   different clockrates, this will also be
    the case for the associated\n   retransmission stream.  Note that an RTP stream
    does not usually\n   carry payload types of different clockrates.\n   The payload
    of the RTP retransmission packet comprises the\n   retransmission payload header
    followed by the payload of the original\n   RTP packet.  The length of the retransmission
    payload header is 2\n   octets.  This payload header contains only one field,
    OSN (original\n   sequence number), which MUST be set to the sequence number of
    the\n   associated original RTP packet.  The original RTP packet payload,\n   including
    any possible payload headers specific to the original\n   payload type, MUST be
    placed right after the retransmission payload\n   header.\n   For payload formats
    that support encoding at multiple rates, instead\n   of retransmitting the same
    payload as the original RTP packet the\n   sender MAY retransmit the same data
    encoded at a lower rate.  This\n   aims at limiting the bandwidth usage of the
    retransmission stream.\n   When doing so, the sender MUST ensure that the receiver
    will still be\n   able to decode the payload of the already sent original packets
    that\n   might have been encoded based on the payload of the lost original\n   packet.
    \ In addition, if the sender chooses to retransmit at a lower\n   rate, the values
    in the payload header of the original RTP packet may\n   no longer apply to the
    retransmission packet and may need to be\n   modified in the retransmission packet
    to reflect the change in rate.\n   The sender SHOULD trade off the decrease in
    bandwidth usage with the\n   decrease in quality caused by resending at a lower
    rate.\n   If the original RTP header carried any profile-specific extensions,\n
    \  the retransmission packet SHOULD include the same extensions\n   immediately
    following the fixed RTP header as expected by\n   applications running under this
    profile.  In this case, the\n   retransmission payload header MUST be placed after
    the profile-\n   specific extensions.\n   If the original RTP header carried an
    RTP header extension, the\n   retransmission packet SHOULD carry the same header
    extension.  This\n   header extension MUST be placed right after the fixed RTP
    header, as\n   specified in RTP [3].  In this case, the retransmission payload\n
    \  header MUST be placed after the header extension.\n   If the original RTP packet
    contained RTP padding, that padding MUST\n   be removed before constructing the
    retransmission packet.  If padding\n   of the retransmission packet is needed,
    padding MUST be performed as\n   with any RTP packets and the padding bit MUST
    be set.\n   The marker bit (M), the CSRC count (CC), and the CSRC list of the\n
    \  original RTP header MUST be copied \"as is\" into the RTP header of the\n   retransmission
    packet.\n"
  title: 4.  Retransmission Payload Format
- contents:
  - '5.  Association of Retransmission and Original Streams

    '
  - contents:
    - "5.1.  Retransmission Session Sharing\n   In the case of session-multiplexing,
      a retransmission session MUST\n   map to exactly one original session; i.e.,
      the same retransmission\n   session cannot be used for different original sessions.\n
      \  If retransmission session sharing were allowed, it would be a problem\n   for
      receivers, since they would receive retransmissions for original\n   sessions
      they might not have joined.  For example, a receiver wishing\n   to receive
      only audio would receive also retransmitted video packets\n   if an audio and
      video session shared the same retransmission session.\n"
    title: 5.1.  Retransmission Session Sharing
  - contents:
    - "5.2.  CNAME Use\n   In both the session-multiplexing and the SSRC-multiplexing
      cases, a\n   sender MUST use the same RTCP CNAME [3] for an original stream
      and\n   its associated retransmission stream.\n"
    title: 5.2.  CNAME Use
  - contents:
    - "5.3.  Association at the Receiver\n   A receiver receiving multiple original
      and retransmission streams\n   needs to associate each retransmission stream
      with its original\n   stream.  The association is done differently depending
      on whether\n   session-multiplexing or SSRC-multiplexing is used.\n   If session-multiplexing
      is used, the receiver associates the two\n   streams having the same SSRC in
      the two sessions.  Note that the\n   payload type field cannot be used to perform
      the association as\n   several media streams may have the same payload type
      value.  The two\n   sessions are themselves associated out-of-band.  See Section
      8 for\n   how the grouping of the two sessions is done with SDP.\n   If SSRC-multiplexing
      is used, the receiver should first of all look\n   for two streams that have
      the same CNAME in the session.  In some\n   cases, the CNAME may not be enough
      to determine the association as\n   multiple original streams in the same session
      may share the same\n   CNAME.  For example, there can be in the same video session
      multiple\n   video streams mapping to different SSRCs and still using the same\n
      \  CNAME and possibly the same payload type (PT) values.  Each (or some)\n   of
      these streams may have an associated retransmission stream.\n   In this case,
      in order to find out the association between original\n   and retransmission
      streams having the same CNAME, the receiver SHOULD\n   behave as follows.\n
      \  The association can generally be resolved when the receiver receives\n   a
      retransmission packet matching a retransmission request that had\n   been sent
      earlier.  Upon reception of a retransmission packet whose\n   original sequence
      number has been previously requested, the receiver\n   can derive that the SSRC
      of the retransmission packet is associated\n   to the sender SSRC from which
      the packet was requested.\n   However, this mechanism might fail if there are
      two outstanding\n   requests for the same packet sequence number in two different\n
      \  original streams of the session.  Note that since the initial packet\n   sequence
      numbers are random, the probability of having two\n   outstanding requests for
      the same packet sequence number would be\n   very small.  Nevertheless, in order
      to avoid ambiguity in the unicast\n   case, the receiver MUST NOT have two outstanding
      requests for the\n   same packet sequence number in two different original streams
      before\n   the association is resolved.  In multicast, this ambiguity cannot
      be\n   completely avoided, because another receiver may have requested the\n
      \  same sequence number from another stream.  Therefore, SSRC-\n   multiplexing
      MUST NOT be used in multicast sessions.\n   If the receiver discovers that two
      senders are using the same SSRC or\n   if it receives an RTCP BYE packet, it
      MUST stop requesting\n   retransmissions for that SSRC.  Upon reception of original
      RTP\n   packets with a new SSRC, the receiver MUST perform the SSRC\n   association
      again as described in this section.\n"
    title: 5.3.  Association at the Receiver
  title: 5.  Association of Retransmission and Original Streams
- contents:
  - "6.  Use with the Extended RTP Profile for RTCP-based Feedback\n   This section
    gives general hints for the usage of this payload format\n   with the extended
    RTP profile for RTCP-based feedback, denoted AVPF\n   [1].  Note that the general
    RTCP send and receive rules and the RTCP\n   packet format as specified in RTP
    apply, except for the changes that\n   the AVPF profile introduces.  In short,
    the AVPF profile relaxes the\n   RTCP timing rules and specifies additional general-purpose
    RTCP\n   feedback messages.  See [1] for details.\n"
  - contents:
    - "6.1.  RTCP at the Sender\n   In the case of session-multiplexing, Sender Report
      (SR) packets for\n   the original stream are sent in the original session and
      SR packets\n   for the retransmission stream are sent in the retransmission
      session\n   according to the rules of RTP.\n   In the case of SSRC-multiplexing,
      SR packets for both original and\n   retransmission streams are sent in the
      same session according to the\n   rules of RTP.  The original and retransmission
      streams are seen, as\n   far as the RTCP bandwidth calculation is concerned,
      as independent\n   senders belonging to the same RTP session and are thus equally\n
      \  sharing the RTCP bandwidth assigned to senders.\n   Note that in both cases,
      session- and SSRC-multiplexing, BYE packets\n   MUST still be sent for both
      streams as specified in RTP.  In other\n   words, it is not enough to send BYE
      packets for the original stream\n   only.\n"
    title: 6.1.  RTCP at the Sender
  - contents:
    - "6.2.  RTCP Receiver Reports\n   In the case of session-multiplexing, the receiver
      will send report\n   blocks for the original stream and the retransmission stream
      in\n   separate Receiver Report (RR) packets belonging to separate RTP\n   sessions.
      \ RR packets reporting on the original stream are sent in\n   the original RTP
      session while RR packets reporting on the\n   retransmission stream are sent
      in the retransmission session.  The\n   RTCP bandwidth for these two sessions
      may be chosen independently\n   (e.g., through RTCP bandwidth modifiers [4]).\n
      \  In the case of SSRC-multiplexing, the receiver sends report blocks\n   for
      the original and the retransmission streams in the same RR packet\n   since
      there is a single session.\n"
    title: 6.2.  RTCP Receiver Reports
  - contents:
    - "6.3.  Retransmission Requests\n   The NACK feedback message format defined
      in the AVPF profile SHOULD\n   be used by receivers to send retransmission requests.
      \ Whether or not\n   a receiver chooses to request a packet is an implementation
      issue.\n   An actual receiver implementation should take into account such\n
      \  factors as the tolerable application delay, the network environment,\n   and
      the media type.\n   The receiver should generally assess whether the retransmitted
      packet\n   would still be useful at the time it is received.  The timestamp
      of\n   the missing packet can be estimated from the timestamps of packets\n
      \  preceding and/or following the sequence number gap caused by the\n   missing
      packet in the original stream.  In most cases, some form of\n   linear estimate
      of the timestamp is good enough.\n   Furthermore, a receiver should compute
      an estimate of the round-trip\n   time (RTT) to the sender.  This can be done,
      for example, by\n   measuring the retransmission delay to receive a retransmission
      packet\n   after a NACK has been sent for that packet.  This estimate may also\n
      \  be obtained from past observations, RTCP report round-trip time if\n   available,
      or any other means.  A standard mechanism for the receiver\n   to estimate the
      RTT is specified in \"RTP Control Protocol Extended\n   Reports (RTCP XR)\"
      [11].\n   The receiver should not send a retransmission request as soon as it\n
      \  detects a missing sequence number but should add some extra delay to\n   compensate
      for packet reordering.  This extra delay may, for example,\n   be based on past
      observations of the experienced packet reordering.\n   It should be noted that,
      in environments where packet reordering is\n   rare or does not take place,
      e.g., if the underlying datalink layer\n   affords ordered delivery, the delay
      may be extremely low or even take\n   the value zero.  In such cases, an appropriate
      \"reorder delay\"\n   algorithm may not actually be timer based, but packet
      based.  For\n   example, if n number of packets are received after a gap is
      detected,\n   then it may be assumed that the packet was truly lost rather than
      out\n   of order.  This may turn out to be far easier to code on some\n   platforms
      as a very short fixed FIFO packet buffer as opposed to the\n   timer-based mechanism.\n
      \  To increase the robustness to the loss of a NACK or of a\n   retransmission
      packet, a receiver may send a new NACK for the same\n   packet.  This is referred
      to as multiple retransmissions.  Before\n   sending a new NACK for a missing
      packet, the receiver should rely on\n   a timer to be reasonably sure that the
      previous retransmission\n   attempt has failed and so avoid unnecessary retransmissions.
      \ The\n   timer value shall be based on the observed round-trip time.  A static\n
      \  or an adaptive value MAY be used.  For example, an adaptive timer\n   could
      be one that changes its value with every new request for the\n   same packet.
      \ This document does not provide any guidelines as to how\n   this adaptive
      value should be calculated because no experiments have\n   been done to find
      this out.\n   NACKs MUST be sent only for the original RTP stream.  Otherwise,
      if a\n   receiver wanted to perform multiple retransmissions by sending a NACK\n
      \  in the retransmission stream, it would not be able to know the\n   original
      sequence number and a timestamp estimation of the packet it\n   requests.\n
      \  Appendix A gives some guidelines as to how to control the number of\n   retransmissions.\n"
    title: 6.3.  Retransmission Requests
  - contents:
    - "6.4.  Timing Rules\n   The NACK feedback message may be sent in a regular full
      compound RTCP\n   packet or in an early RTCP packet, as per AVPF [1].  Sending
      a NACK\n   in an early packet allows reacting more quickly to a given packet\n
      \  loss.  However, in that case if a new packet loss occurs right after\n   the
      early RTCP packet was sent, the receiver will then have to wait\n   for the
      next regular RTCP compound packet after the early packet.\n   Sending NACKs
      only in regular RTCP compound decreases the maximum\n   delay between detecting
      an original packet loss and being able to\n   send a NACK for that packet.  Implementers
      should consider the\n   possible implications of this fact for the application
      being used.\n   Furthermore, receivers may make use of the minimum interval
      between\n   regular RTCP compound packets.  This interval can be used to keep\n
      \  regular receiver reporting down to a minimum, while still allowing\n   receivers
      to send early RTCP packets during periods requiring more\n   frequent feedback,
      e.g., times of higher packet loss rate.  Note that\n   although RTCP packets
      may be suppressed because they do not contain\n   NACKs, the same RTCP bandwidth
      as if they were sent needs to be\n   available.  See AVPF [1] for details on
      the use of the minimum\n   interval.\n"
    title: 6.4.  Timing Rules
  title: 6.  Use with the Extended RTP Profile for RTCP-based Feedback
- contents:
  - "7.  Congestion Control\n   RTP retransmission poses a risk of increasing network
    congestion.  In\n   a best-effort environment, packet loss is caused by congestion.\n
    \  Reacting to loss by retransmission of older data without decreasing\n   the
    rate of the original stream would thus further increase\n   congestion.  Implementations
    SHOULD follow the recommendations below\n   in order to use retransmission.\n
    \  The RTP profile under which the retransmission scheme is used defines\n   an
    appropriate congestion control mechanism in different\n   environments.  Following
    the rules under the profile, an RTP\n   application can determine its acceptable
    bitrate and packet rate in\n   order to be fair to other TCP or RTP flows.\n   If
    an RTP application uses retransmission, the acceptable packet rate\n   and bitrate
    include both the original and retransmitted data.  This\n   guarantees that an
    application using retransmission achieves the same\n   fairness as one that does
    not.  Such a rule would translate in\n   practice into the following actions:\n
    \  If enhanced service is used, it should be made sure that the total\n   bitrate
    and packet rate do not exceed that of the requested service.\n   It should be
    further monitored that the requested services are\n   actually delivered.  In
    a best-effort environment, the sender SHOULD\n   NOT send retransmission packets
    without reducing the packet rate and\n   bitrate of the original stream (for example,
    by encoding the data at\n   a lower rate).\n   In addition, the sender MAY selectively
    retransmit only the packets\n   that it deems important and ignore NACK messages
    for other packets in\n   order to limit the bitrate.\n   These congestion control
    mechanisms should keep the packet loss rate\n   within acceptable parameters.
    \ In the context of congestion control,\n   packet loss is considered acceptable
    if a TCP flow across the same\n   network path and experiencing the same network
    conditions would\n   achieve, on a reasonable timescale, an average throughput
    that is not\n   less than the one the RTP flow achieves.  If congestion is not
    kept\n   under control, then retransmission SHOULD NOT be used.\n   Retransmissions
    MAY still be sent in some cases, e.g., in wireless\n   links where packet losses
    are not caused by congestion, if the server\n   (or the client that makes the
    retransmission request) estimates that\n   a particular packet or frame is important
    to continue play out, or if\n   an RTSP PAUSE has been issued to allow the buffer
    to fill up (RTSP\n   PAUSE does not affect the sending of retransmissions).\n
    \  Finally, it may further be necessary to adapt the transmission rate\n   (or
    the number of layers subscribed for a layered multicast session),\n   or to arrange
    for the receiver to leave the session.\n"
  title: 7.  Congestion Control
- contents:
  - '8.  Retransmission Payload Format MIME Type Registration

    '
  - contents:
    - "8.1.  Introduction\n   The following MIME subtype name and parameters are introduced
      in this\n   document: \"rtx\", \"rtx-time\", and \"apt\".\n   The binding used
      for the retransmission stream to the payload type\n   number is indicated by
      an rtpmap attribute.  The MIME subtype name\n   used in the binding is \"rtx\".\n
      \  The \"apt\" (associated payload type) parameter MUST be used to map the\n
      \  retransmission payload type to the associated original stream payload\n   type.
      \ If multiple original payload types are used, then multiple\n   \"apt\" parameters
      MUST be included to map each original payload type\n   to a different retransmission
      payload type.\n   An OPTIONAL payload-format-specific parameter, \"rtx-time\",
      indicates\n   the maximum time a sender will keep an original RTP packet in
      its\n   buffers available for retransmission.  This time starts with the\n   first
      transmission of the packet.\n   The syntax is as follows:\n      a=fmtp:<number>
      apt=<apt-value>;rtx-time=<rtx-time-val>\n   where\n      <number>: indicates
      the dynamic payload type number assigned to\n      the retransmission payload
      format in an rtpmap attribute.\n      <apt-value>: is the value of the original
      stream payload type to\n      which this retransmission stream payload type
      is associated.\n      <rtx-time-val>: specifies the time in milliseconds (measured
      from\n      the time a packet was first sent) that a sender keeps an RTP\n      packet
      in its buffers available for retransmission.  The absence\n      of the rtx-time
      parameter for a retransmission stream means that\n      the maximum retransmission
      time is not defined, but MAY be\n      negotiated by other means.\n"
    title: 8.1.  Introduction
  - contents:
    - "8.2.  Registration of audio/rtx\n   MIME type: audio\n   MIME subtype: rtx\n
      \  Required parameters:\n      rate: the RTP timestamp clockrate is equal to
      the RTP timestamp\n      clockrate of the media that is retransmitted.\n      apt:
      associated payload type.  The value of this parameter is the\n      payload
      type of the associated original stream.\n   Optional parameters:\n      rtx-time:
      indicates the time in milliseconds (measured from the\n      time a packet was
      first sent) that the sender keeps an RTP packet\n      in its buffers available
      for retransmission.\n   Encoding considerations: this type is only defined for
      transfer via\n   RTP.\n   Security considerations: see Section 12 of RFC 4588\n
      \  Interoperability considerations: none\n   Published specification: RFC 4588\n
      \  Applications which use this media type: multimedia streaming\n   applications\n
      \  Additional information: none\n   Person & email address to contact for further
      information:\n   jose.rey@eu.panasonic.com\n   davidleon123@yahoo.com\n   avt@ietf.org\n
      \  Intended usage: COMMON\n   Authors:\n   Jose Rey\n   David Leon\n   Change
      controller:\n   IETF AVT WG delegated from the IESG\n"
    title: 8.2.  Registration of audio/rtx
  - contents:
    - "8.3.  Registration of video/rtx\n   MIME type: video\n   MIME subtype: rtx\n
      \  Required parameters:\n      rate: the RTP timestamp clockrate is equal to
      the RTP timestamp\n      clockrate of the media that is retransmitted.\n      apt:
      associated payload type.  The value of this parameter is the\n      payload
      type of the associated original stream.\n   Optional parameters:\n      rtx-time:
      indicates the time in milliseconds (measured from the\n      time a packet was
      first sent) that the sender keeps an RTP packet\n      in its buffers available
      for retransmission.\n   Encoding considerations: this type is only defined for
      transfer via\n   RTP.\n   Security considerations: see Section 12 of RFC 4588\n
      \  Interoperability considerations: none\n   Published specification: RFC 4588\n
      \  Applications which use this media type: multimedia streaming\n   applications\n
      \  Additional information: none\n   Person & email address to contact for further
      information:\n   jose.rey@eu.panasonic.com\n   davidleon123@yahoo.com\n   avt@ietf.org\n
      \  Intended usage: COMMON\n   Authors:\n   Jose Rey\n   David Leon\n   Change
      controller:\n   IETF AVT WG delegated from the IESG\n"
    title: 8.3.  Registration of video/rtx
  - contents:
    - "8.4.  Registration of text/rtx\n   MIME type: text\n   MIME subtype: rtx\n
      \  Required parameters:\n      rate: the RTP timestamp clockrate is equal to
      the RTP timestamp\n      clockrate of the media that is retransmitted.\n      apt:
      associated payload type.  The value of this parameter is the\n      payload
      type of the associated original stream.\n   Optional parameters:\n      rtx-time:
      indicates the time in milliseconds (measured from the\n      time a packet was
      first sent) that the sender keeps an RTP packet\n      in its buffers available
      for retransmission.\n   Encoding considerations: this type is only defined for
      transfer via\n   RTP.\n   Security considerations: see Section 12 of RFC 4588\n
      \  Interoperability considerations: none\n   Published specification: RFC 4588\n
      \  Applications which use this media type: multimedia streaming\n   applications\n
      \  Additional information: none\n   Person & email address to contact for further
      information:\n   jose.rey@eu.panasonic.com\n   davidleon123@yahoo.com\n   avt@ietf.org\n
      \  Intended usage: COMMON\n   Authors:\n   Jose Rey\n   David Leon\n   Change
      controller:\n   IETF AVT WG delegated from the IESG\n"
    title: 8.4.  Registration of text/rtx
  - contents:
    - "8.5.  Registration of application/rtx\n   MIME type: application\n   MIME subtype:
      rtx\n   Required parameters:\n      rate: the RTP timestamp clockrate is equal
      to the RTP timestamp\n      clockrate of the media that is retransmitted.\n
      \     apt: associated payload type.  The value of this parameter is the\n      payload
      type of the associated original stream.\n   Optional parameters:\n      rtx-time:
      indicates the time in milliseconds (measured from the\n      time a packet was
      first sent) that the sender keeps an RTP packet\n      in its buffers available
      for retransmission.\n   Encoding considerations: this type is only defined for
      transfer via\n   RTP.\n   Security considerations: see Section 12 of RFC 4588\n
      \  Interoperability considerations: none\n   Published specification: RFC 4588\n
      \  Applications which use this media type: multimedia streaming\n   applications\n
      \  Additional information: none\n   Person & email address to contact for further
      information:\n   jose.rey@eu.panasonic.com\n   davidleon123@yahoo.com\n   avt@ietf.org\n
      \  Intended usage: COMMON\n   Authors:\n   Jose Rey\n   David Leon\n   Change
      controller:\n   IETF AVT WG delegated from the IESG\n"
    title: 8.5.  Registration of application/rtx
  - contents:
    - "8.6.  Mapping to SDP\n   The information carried in the MIME media type specification
      has a\n   specific mapping to fields in SDP [5], which is commonly used to\n
      \  describe RTP sessions.  When SDP is used to specify retransmissions\n   for
      an RTP stream, the mapping is done as follows:\n   -  The MIME types (\"video\"),
      (\"audio\"), (\"text\"), and (\"application\")\n      go in the SDP \"m=\" as
      the media name.\n   -  The MIME subtype (\"rtx\") goes in SDP \"a=rtpmap\" as
      the encoding\n      name.  The RTP clockrate in \"a=rtpmap\" MUST be that of
      the\n      retransmission payload type.  See Section 4 for details on this.\n
      \  -  The AVPF profile-specific parameters \"ack\" and \"nack\" go in SDP\n
      \     \"a=rtcp-fb\".  Several SDP \"a=rtcp-fb\" are used for several types\n
      \     of feedback.  See the AVPF profile [1] for details.\n   -  The retransmission
      payload-format-specific parameters \"apt\" and\n      \"rtx-time\" go in the
      SDP \"a=fmtp\" as a semicolon-separated list of\n      parameter=value pairs.\n
      \  -  Any remaining parameters go in the SDP \"a=fmtp\" attribute by\n      copying
      them directly from the MIME media type string as a\n      semicolon-separated
      list of parameter=value pairs.\n   In the following sections, some example SDP
      descriptions are\n   presented.  In some of these examples, long lines are folded
      to meet\n   the column width constraints of this document; the backslash (\"\\\")
      at\n   the end of a line and the carriage return that follows it should be\n
      \  ignored.\n"
    title: 8.6.  Mapping to SDP
  - contents:
    - "8.7.  SDP Description with Session-Multiplexing\n   In the case of session-multiplexing,
      the SDP description contains one\n   media specification \"m\" line per RTP
      session.  The SDP MUST provide\n   the grouping of the original and associated
      retransmission sessions'\n   \"m\" lines, using the Flow Identification (FID)
      semantics defined in\n   RFC 3388 [6].\n   The following example specifies two
      original, AMR and MPEG-4, streams\n   on ports 49170 and 49174 and their corresponding
      retransmission\n   streams on ports 49172 and 49176, respectively:\n   v=0\n
      \  o=mascha 2980675221 2980675778 IN IP4 host.example.net\n   c=IN IP4 192.0.2.0\n
      \  a=group:FID 1 2\n   a=group:FID 3 4\n   m=audio 49170 RTP/AVPF 96\n   a=rtpmap:96
      AMR/8000\n   a=fmtp:96 octet-align=1\n   a=rtcp-fb:96 nack\n   a=mid:1\n   m=audio
      49172 RTP/AVPF 97\n   a=rtpmap:97 rtx/8000\n   a=fmtp:97 apt=96;rtx-time=3000\n
      \  a=mid:2\n   m=video 49174 RTP/AVPF 98\n   a=rtpmap:98 MP4V-ES/90000\n   a=rtcp-fb:98
      nack\n   a=fmtp:98 profile-level-id=8;config=01010000012000884006682C209\\\n
      \  0A21F\n   a=mid:3\n   m=video 49176 RTP/AVPF 99\n   a=rtpmap:99 rtx/90000\n
      \  a=fmtp:99 apt=98;rtx-time=3000\n   a=mid:4\n   A special case of the SDP
      description is a description that contains\n   only one original session \"m\"
      line and one retransmission session \"m\"\n   line, the grouping is then obvious
      and FID semantics MAY be omitted\n   in this special case only.\n   This is
      illustrated in the following example, which is an SDP\n   description for a
      single original MPEG-4 stream and its corresponding\n   retransmission session:\n
      \  v=0\n   o=mascha 2980675221 2980675778 IN IP4 host.example.net\n   c=IN IP4
      192.0.2.0\n   m=video 49170 RTP/AVPF 96\n   a=rtpmap:96 MP4V-ES/90000\n   a=rtcp-fb:96
      nack\n   a=fmtp:96 profile-level-id=8;config=01010000012000884006682C209\\\n
      \  0A21F\n   m=video 49172 RTP/AVPF 97\n   a=rtpmap:97 rtx/90000\n   a=fmtp:97
      apt=96;rtx-time=3000\n"
    title: 8.7.  SDP Description with Session-Multiplexing
  - contents:
    - "8.8.  SDP Description with SSRC-Multiplexing\n   The following is an example
      of an SDP description for an RTP video\n   session using SSRC-multiplexing with
      similar parameters as in the\n   single-session example above:\n   v=0\n   o=mascha
      2980675221 2980675778 IN IP4 host.example.net\n   c=IN IP4 192.0.2.0\n   m=video
      49170 RTP/AVPF 96 97\n   a=rtpmap:96 MP4V-ES/90000\n   a=rtcp-fb:96 nack\n   a=fmtp:96
      profile-level-id=8;config=01010000012000884006682C209\\\n   0A21F\n   a=rtpmap:97
      rtx/90000\n   a=fmtp:97 apt=96;rtx-time=3000\n"
    title: 8.8.  SDP Description with SSRC-Multiplexing
  title: 8.  Retransmission Payload Format MIME Type Registration
- contents:
  - "9.  RTSP Considerations\n   The Real Time Streaming Protocol (RTSP), RFC 2326
    [7], is an\n   application-level protocol for control over the delivery of data
    with\n   real-time properties.  This section looks at the issues involved in\n
    \  controlling RTP sessions that use retransmissions.\n"
  - contents:
    - "9.1.  RTSP Control with SSRC-Multiplexing\n   In the case of SSRC-multiplexing,
      the \"m\" line includes both original\n   and retransmission payload types and
      has a single RTSP \"control\"\n   attribute.  The receiver uses the \"m\" line
      to request SETUP and\n   TEARDOWN of the whole media session.  The RTP profile
      contained in\n   the Transport header MUST be the AVPF profile or another suitable\n
      \  profile allowing extended feedback.  If the SSRC value is included in\n   the
      SETUP response's Transport header, it MUST be that of the\n   original stream.\n
      \  In order to control the sending of the session original media stream,\n   the
      receiver sends as usual PLAY and PAUSE requests to the sender for\n   the session.
      \ The RTP-info header that is used to set RTP-specific\n   parameters in the
      PLAY response MUST be set according to the RTP\n   information of the original
      stream.\n   When the receiver starts receiving the original stream, it can then\n
      \  request retransmission through RTCP NACKs without additional RTSP\n   signalling.\n"
    title: 9.1.  RTSP Control with SSRC-Multiplexing
  - contents:
    - "9.2.  RTSP Control with Session-Multiplexing\n   In the case of session-multiplexing,
      each SDP \"m\" line has an RTSP\n   \"control\" attribute.  Hence, when retransmission
      is used, both the\n   original session and the retransmission have their own
      \"control\"\n   attributes.  The receiver can associate the original session
      and the\n   retransmission session through the FID semantics as specified in\n
      \  Section 8.\n   The original and the retransmission streams are set up and
      torn down\n   separately through their respective media \"control\" attribute.
      \ The\n   RTP profile contained in the Transport header MUST be the AVPF\n   profile
      or another suitable profile allowing extended feedback for\n   both the original
      and the retransmission sessions.\n   The RTSP presentation SHOULD support aggregate
      control and SHOULD\n   contain a session-level RTSP URL.  The receiver SHOULD
      use aggregate\n   control for an original session and its associated retransmission\n
      \  session.  Otherwise, there would need to be two different 'session-\n   id'
      values, i.e., different values for the original and\n   retransmission sessions,
      and the sender would not know how to\n   associate them.\n   The session-level
      \"control\" attribute is then used as usual to\n   control the playing of the
      original stream.  When the receiver starts\n   receiving the original stream,
      it can then request retransmissions\n   through RTCP without additional RTSP
      signalling.\n"
    title: 9.2.  RTSP Control with Session-Multiplexing
  - contents:
    - "9.3.  RTSP Control of the Retransmission Stream\n   Because of the nature of
      retransmissions, the sending of\n   retransmission packets SHOULD NOT be controlled
      through RTSP PLAY and\n   PAUSE requests.  The PLAY and PAUSE requests SHOULD
      NOT affect the\n   retransmission stream.  Retransmission packets are sent upon
      receiver\n   requests in the original RTCP stream, regardless of the state.\n"
    title: 9.3.  RTSP Control of the Retransmission Stream
  - contents:
    - "9.4.  Cache Control\n   Retransmission streams SHOULD NOT be cached.\n   In
      the case of session-multiplexing, the \"Cache-Control\" header\n   SHOULD be
      set to \"no-cache\" for the retransmission stream.\n   In the case of SSRC-multiplexing,
      RTSP cannot specify independent\n   caching for the retransmission stream, because
      there is a single \"m\"\n   line in SDP.  Therefore, the implementer should
      take this fact into\n   account when deciding whether or not to cache an SSRC-multiplexed\n
      \  session.\n"
    title: 9.4.  Cache Control
  title: 9.  RTSP Considerations
- contents:
  - "10.  Implementation Examples\n   This document mandates only the sender and receiver
    behaviours that\n   are necessary for interoperability.  In addition, certain
    algorithms,\n   such as rate control or buffer management when targeted at specific\n
    \  environments, may enhance the retransmission efficiency.\n   This section gives
    an overview of different implementation options\n   allowed within this specification.\n
    \  The first example describes a minimal receiver implementation.  With\n   this
    implementation, it is possible to retransmit lost RTP packets,\n   detect efficiently
    the loss of retransmissions, and perform multiple\n   retransmissions, if needed.
    \ Most of the necessary processing is done\n   at the server.\n   The second example
    shows how retransmissions may be used in (small)\n   multicast groups in conjunction
    with layered encoding.  It\n   illustrates that retransmissions and layered encoding
    may be\n   complementary techniques.\n"
  - contents:
    - "10.1.  A Minimal Receiver Implementation Example\n   This section gives an
      example of an implementation supporting\n   multiple retransmissions.  The sender
      transmits the original data in\n   RTP packets using the MPEG-4 video RTP payload
      format.  It is assumed\n   that NACK feedback messages are used, as per [1].
      \ An SDP description\n   example with SSRC-multiplexing is given below:\n   v=0\n
      \  o=mascha 2980675221 2980675778 IN IP4 host.example.net\n   c=IN IP4 192.0.2.0\n
      \  m=video 49170 RTP/AVPF 96 97\n   a=rtpmap:96 MP4V-ES/90000\n   a=rtcp-fb:96
      nack\n   a=rtpmap:97 rtx/90000\n   a=fmtp:97 apt=96;rtx-time=3000\n   The format-specific
      parameter \"rtx-time\" indicates that the server\n   will buffer the sent packets
      in a retransmission buffer for 3.0\n   seconds, after which the packets are
      deleted from the retransmission\n   buffer and will never be sent again.\n   In
      this implementation example, the required RTP receiver processing\n   to handle
      retransmission is kept to a minimum.  The receiver detects\n   packet loss from
      the gaps observed in the received sequence numbers.\n   It signals lost packets
      to the sender through NACKs as defined in the\n   AVPF profile [1].  The receiver
      should take into account the\n   signalled sender retransmission buffer length
      in order to dimension\n   its own reception buffer.  It should also derive from
      the buffer\n   length the maximum number of times the retransmission of a packet
      can\n   be requested.\n   The sender should retransmit the packets selectively;
      i.e., it should\n   choose whether to retransmit a requested packet depending
      on the\n   packet importance, the observed Quality of Service (QoS), and\n   congestion
      state of the network connection to the receiver.\n   Obviously, the sender processing
      increases with the number of\n   receivers as state information and processing
      load must be allocated\n   to each receiver.\n"
    title: 10.1.  A Minimal Receiver Implementation Example
  - contents:
    - "10.2.  Retransmission of Layered Encoded Media in Multicast\n   This section
      shows how to combine retransmissions with layered\n   encoding in multicast
      sessions.  Note that the retransmission\n   framework is offered only for small
      multicast applications.  Refer to\n   RFC 2887 [10] for a discussion of the
      problems of NACK implosion,\n   severe congestion caused by feedback traffic,
      in large-group reliable\n   multicast applications.\n   Packets of different
      importance are sent in different RTP sessions.\n   The retransmission streams
      corresponding to the different layers can\n   themselves be seen as different
      retransmission layers.  The relative\n   importance of the different retransmission
      streams should reflect the\n   relative importance of the different original
      streams.\n   In multicast, SSRC-multiplexing of the original and retransmission\n
      \  streams is not allowed as per Section 5.3 of this document.  For this\n   reason,
      the retransmission stream(s) MUST be sent in different RTP\n   session(s) using
      session-multiplexing.\n   An SDP description example of multicast retransmissions
      for layered\n   encoded media is given below:\n   m=video 8000 RTP/AVPF 98\n
      \  c=IN IP4 224.2.1.0/127/3\n   a=rtpmap:98 MP4V-ES/90000\n   a=rtcp-fb:98 nack\n
      \  m=video 8000 RTP/AVPF 99\n   c=IN IP4 224.2.1.3/127/3\n   a=rtpmap:99 rtx/90000\n
      \  a=fmtp:99 apt=98;rtx-time=3000\n   The server and the receiver may implement
      the retransmission methods\n   illustrated in the previous examples.  In addition,
      they may choose\n   to request and retransmit a lost packet depending on the
      layer it\n   belongs to.\n"
    title: 10.2.  Retransmission of Layered Encoded Media in Multicast
  title: 10.  Implementation Examples
- contents:
  - "11.  IANA Considerations\n   A new MIME subtype name, \"rtx\", has been registered
    for four\n   different media types, as follows: \"video\", \"audio\", \"text\"
    and\n   \"application\".  An additional REQUIRED parameter, \"apt\", and an\n
    \  OPTIONAL parameter, \"rtx-time\", are defined.  See Section 8 for\n   details.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the general security considerations discussed
    in RTP\n   [3], Section 9.\n   In common streaming scenarios message authentication,
    data integrity,\n   replay protection, and confidentiality are desired.\n   The
    absence of authentication may enable man-in-the-middle and replay\n   attacks,
    which can be very harmful for RTP retransmission.  For\n   example: tampered RTCP
    packets may trigger inappropriate\n   retransmissions that effectively reduce
    the actual bitrate share\n   allocated to the original data stream, tampered RTP
    retransmission\n   packets could cause the client's decoder to crash, and tampered\n
    \  retransmission requests may invalidate the SSRC association mechanism\n   described
    in Section 5 of this document.  On the other hand, replayed\n   packets could
    lead to false reordering and RTT measurements (required\n   for the retransmission
    request strategy) and may cause the receiver\n   buffer to overflow.\n   Furthermore,
    in order to ensure confidentiality of the data, the\n   original payload data
    needs to be encrypted.  There is actually no\n   need to encrypt the 2-byte retransmission
    payload header since it\n   does not provide any hints about the data content.\n
    \  Furthermore, it is RECOMMENDED that the cryptography mechanisms used\n   for
    this payload format provide protection against known plaintext\n   attacks.  RTP
    recommends that the initial RTP timestamp SHOULD be\n   random to secure the stream
    against known plaintext attacks.  This\n   payload format does not follow this
    recommendation as the initial\n   timestamp will be the media timestamp of the
    first retransmitted\n   packet.  However, since the initial timestamp of the original
    stream\n   is itself random, if the original stream is encrypted, the first\n
    \  retransmitted packet timestamp would also be random to an attacker.\n   Therefore,
    confidentiality would not be compromised.\n   If cryptography is used to provide
    security services on the original\n   stream, then the same services, with equivalent
    cryptographic\n   strength, MUST be provided on the retransmission stream.  The
    use of\n   the same key for the retransmitted stream and the original stream may\n
    \  lead to security problems, e.g., two-time pads.  Refer to Section 9.1\n   of
    the Secure Real-Time Transport Protocol (SRTP) [12] for a\n   discussion the implications
    of two-time pads and how to avoid them.\n   At the time of writing this document,
    SRTP does not provide all the\n   security services mentioned.  There are, at
    least, two reasons for\n   this: 1) the occurrence of two-time pads and 2) the
    fact that this\n   payload format typically works under the RTP/AVPF profile whereas\n
    \  SRTP only supports RTP/AVP.  An adapted variant of SRTP shall solve\n   these
    shortcomings in the future.\n   Congestion control considerations with the use
    of retransmission are\n   dealt with in Section 7 of this document.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Acknowledgements\n   We would like to express our gratitude to Carsten Burmeister
    for his\n   participation in the development of this document.  Our thanks also\n
    \  go to Koichi Hata, Colin Perkins, Stephen Casner, Magnus Westerlund,\n   Go
    Hori, and Rahul Agarwal for their helpful comments.\n"
  title: 13.  Acknowledgements
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [1]  Ott, J., Wenger, S., Sato, N., Burmeister,
      C., and J. Rey,\n        \"Extended RTP profile for Real-time Transport Control
      Protocol\n        (RTCP)-Based feedback\", RFC 4585, July 2006.\n   [2]  Bradner,
      S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP
      14, RFC 2119, March 1997.\n   [3]  Schulzrinne, H., Casner, S., Frederick, R.,
      and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\",
      STD 64,\n        RFC 3550, July 2003.\n   [4]  Casner, S., \"Session Description
      Protocol (SDP) Bandwidth\n        Modifiers for RTP Control Protocol (RTCP)
      Bandwidth\", RFC 3556,\n        July 2003.\n   [5]  Handley, M. and V. Jacobson,
      \"SDP: Session Description\n        Protocol\", RFC 2327, April 1998.\n   [6]
      \ Camarillo, G., Eriksson, G., Holler, J., and H. Schulzrinne,\n        \"Grouping
      of Media Lines in the Session Description Protocol\n        (SDP)\", RFC 3388,
      December 2002.\n   [7]  Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time
      Streaming\n        Protocol (RTSP)\", RFC 2326, April 1998.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [8]  Perkins, C. and O. Hodson, \"Options
      for Repair of Streaming\n        Media\", RFC 2354, June 1998.\n   [9]  Hellstrom,
      G. and P. Jones, \"RTP Payload for Text Conversation\",\n        RFC 4103, June
      2005.\n   [10] Handley, M., Floyd, S., Whetten, B., Kermode, R., Vicisano, L.,\n
      \       and M. Luby, \"The Reliable Multicast Design Space for Bulk Data\n        Transfer\",
      RFC 2887, August 2000.\n   [11] Friedman, T., Caceres, R., and A. Clark, \"RTP
      Control Protocol\n        Extended Reports (RTCP XR)\", RFC 3611, November 2003.\n
      \  [12] Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n        Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\", RFC\n        3711, March
      2004.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A.  How to Control the Number of Rtxs. per Packet\n   Finding out the
    number of retransmissions (rtxs.) per packet for\n   achieving the best possible
    transmission is a difficult task.  Of\n   course, the absolute minimum should
    be one (1); otherwise, do not use\n   this payload format.  Moreover, as of date
    of publication, the\n   authors were not aware of any studies on the number of\n
    \  retransmissions per packet that should be used for best performance.\n   To
    help implementers and researchers on this item, this section\n   describes an
    estimate of the buffering time required for achieving a\n   given number of retransmissions.
    \ Once this time has been calculated,\n   it can be communicated to the client
    via SDP parameter \"rtx-time\", as\n   defined in this document.\n"
  - contents:
    - "A.1.  Scenario and Assumptions\n   * Streaming scenario with relaxed delay
      bounds.  Client and server\n     are provided with buffering space as indicated
      by the parameter\n     \"rtx-time\" in SDP.\n   * RTP AVPF profile used with
      SSRC-multiplexing retransmission scheme:\n     1 SSRC for original packets,
      1 for retransmission packets.\n   * Default RTCP bandwidth share for SRs and
      RRs, i.e., SR+RR = 0.05.\n     We have senders (2) and receivers (1).  Receivers
      and senders get\n     equally 1/3 of the RTCP bandwidth share because the proportion
      of\n     senders is greater than 1/4 of session members.\n   * avg-rtcp-size
      is approximated by 120 bytes.  This is a rounded-up\n     average of 2 SRs,
      one for each SSRC, containing 40/8/28/32 bytes\n     for IPv6/UDP/SR/SDES with
      CNAME, thus making 105 bytes each; and a\n     RR with 40/8/64/32 bytes for
      IPv6/UDP/2*RR/SDES, making 157 bytes.\n     Since senders and receivers share
      the RTCP bandwidth equally, then\n     avg-rtcp-size = (157+105+105)/3 = 117.3
      ~= 120 bytes.  The\n     important characteristic of this value is that it is
      something over\n     100 bytes, which seems to be a representative figure for
      typical\n     configurations.\n   * The profile used is AVPF [1] and Generic
      NACKs are used for\n     requesting retransmissions.  This adds 16 bytes of
      overhead for 1\n     NACK and 4 bytes more for every additional NACK Feedback
      Control\n     Information (FCI) field.\n   * We assume a worst-case scenario
      in which each packet exhausts its\n     corresponding number of available retransmissions,
      N, before it is\n     received.  This means that if a packet is requested for\n
      \    retransmission a maximum of 2 times, the corresponding generic NACK\n     report
      block requesting that particular packet is sent in two\n     consecutive RTCP
      compounds; likewise, if it is requested for\n     retransmission 10 times, then
      the generic NACK is sent 10 times.\n     This assumption makes the RTCP packet
      size approximately constant\n     after N*RTCP intervals (seconds), namely,
      to avg-rtcp-size = 120 +\n     (receiver-RTCP-bw-share)*(12 + 4*N).  In our
      case, the receiver\n     RTCP bandwidth share is 1/3; thus, avg-rtcp-size =
      124 + 4*N/3.\n   * Two delay parameters are difficult to approximate and may
      be\n     implementation dependent.  Therefore, we list them here explicitly\n
      \    without assigning them a particular value: one is the packet loss\n     detection
      time (T2), and the other is feedback processing and\n     queuing time for retransmissions
      (T5).  Implementers shall assign\n     appropriate values to these two parameters.\n
      \  Graphically, we have the following:\n         Sender\n       +-+---------------------------------^-----\\-----------------\n
      \       \\ \\                               /       \\\n         \\ \\                             |
      \        |\n   SN=0   \\ \\ SN=1                       /         \\  RTX(SN=0)\n
      \          \\ \\                          /           \\\n            X \\                        /
      \            \\\n               `.                     /               \\\n
      \                \\                   /                 \\\n                  \\
      \                |                   |\n                   \\                /
      \                  \\    ......\n                    \\              /                     \\\n
      \      -------------V----D--------/-----------------------V--------\n              T1
      \     T2    T3         T4    T5     T1   ........\n        Receiver\n   Legend:\n
      \  =======\n   DL: downlink (client->server)\n   UL: uplink (server->client)\n
      \  Time unit is seconds, s.\n   Bitrate unit is bits per second, bps.\n   DL
      transmission time:            T1 = physical-delay-DL +\n      tx-delay-DL(=avg-pkt-size/DL-bitrate)
      + interarrival-delay-jitter\n   Time to detect packet loss:      T2 = pkt-loss-detect-time\n
      \  Time to report packet loss:      T3 = time-to-next-rtcp-report\n   UL transmission
      time:            T4 = physical-delay-UL +\n      transmission-delay-UL + interarrival-delay-jitter\n
      \  Retransmissions processing time: T5 = feedback-processing-time +\n      rtx-queuing-time\n"
    title: A.1.  Scenario and Assumptions
  - contents:
    - "A.2.  Goal\n   To find an estimate of the buffering time, T(), that a streaming\n
      \  server shall use in order to enable a given number of retransmissions\n   for
      each packet, N.  This time is approximately equal at the server\n   and at the
      client, if one considers that the client starts buffering\n   T1 seconds later.\n"
    title: A.2.  Goal
  - contents:
    - "A.3.  Solution\n   First, we find the value of the estimate for 1 retransmission,\n
      \  T(1)=T:\n      T = T1 + T2 + T3 + T4 + T5\n   Since T1 + T4 ~= RTT,\n      T
      = RTT + T2 + T3 + T5\n   The worst case for T3 would be that we assume that
      reporting has to\n   wait a whole RTCP interval and that the maximum randomization
      factor\n   of 1.5 is applied.  Therefore, after applying the subsequent\n   compensation
      to avoid traffic bursts (see Appendix A.7 of RTP [3]),\n   we have that T3 =
      1.5/1.21828*RTCP-Interval.  Thus,\n      T = RTT + 1.2312*RTCP-Interval + T2
      + T5\n   On the other hand, RTCP-Interval = avg-rtcp-size*8*(senders +\n   receivers)/(RR+RS).
      \ In this scenario: sender + receivers = 3; RR+RS\n   is the receiver report
      plus sender report bandwidth share, in this\n   case, equal to the default 5%
      of session bandwidth, bw.  We assume an\n   average RTCP packet size, avg-rtcp-size
      = 120 bytes.  Thus:\n      T = RTT + 1.2312*avg-rtcp-size*8*3/(0.05*bw) + T2
      + T5\n   for 1 retransmission.\n   For enabling N retransmissions, the available
      buffering time in a\n   streaming server or client is approximately:\n      T(N)
      = N*(RTT+1.2312*avg-rtcp-size*8*3/(0.05*bw) + T2 + T5)\n   where, as per above,\n
      \     avg-rtcp-size = 120 + (receiver-RTCP-bw-share)*(12 + 4*N)\n                    =
      120 + (1/3)*(12 + 4*N)\n                    = 124 + 4*N/3.\n"
    title: A.3.  Solution
  - contents:
    - "A.4.  Numbers\n   If we ignore the effect of T2 and T5, i.e., assume that all
      losses\n   are detected immediately and that there is no additional delay due
      to\n   feedback processing or retransmission queuing, we have the following\n
      \  buffering times for different values of N:\n   RTCP w/ several Generic NACKs;
      variable packet size = 124 + 4*N/3\n   bytes\n   |============|=====|======================================|\n
      \  |  RTP BW    | RTT |            N value                   |\n   |============|=====|
      \  1      2       5       7       10  |\n                      |======================================|\n
      \  64000         0,05   1,21    2,44    6,28    8,97    13,18\n   128000        0,05
      \  0,63    1,27    3,27    4,66    6,84\n   256000        0,05   0,34    0,68
      \   1,76    2,50    3,67\n   512000        0,05   0,19    0,39    1,00    1,43
      \   2,09\n   1024000       0,05   0,12    0,25    0,63    0,89    1,29\n   5000000
      \      0,05   0,06    0,13    0,33    0,46    0,66\n   10000000      0,05   0,06
      \   0,11    0,29    0,41    0,58\n   64000         0,2    1,36    2,74    7,03
      \   10,02   14,68\n   128000        0,2    0,78    1,57    4,02    5,71    8,34\n
      \  256000        0,2    0,49    0,98    2,51    3,55    5,17\n   512000        0,2
      \   0,34    0,69    1,75    2,48    3,59\n   1024000       0,2    0,27    0,55
      \   1,38    1,94    2,79\n   5000000       0,2    0,21    0,43    1,08    1,51
      \   2,16\n   10000000      0,2    0,21    0,41    1,04    1,46    2,08\n   64000
      \        1      2,16    4,34    11,03   15,62   22,68\n   128000        1      1,58
      \   3,17    8,02    11,31   16,34\n   256000        1      1,29    2,58    6,51
      \   9,15    13,17\n   512000        1      1,14    2,29    5,75    8,08    11,59\n
      \  1024000       1      1,07    2,15    5,38    7,54    10,79\n   5000000       1
      \     1,01    2,03    5,08    7,11    10,16\n   10000000      1      1,01    2,01
      \   5,04    7,06    10,08\n   To quantify the error of not taking the Generic
      NACKS into account,\n   we can do the same numbers, but ignoring the Generic
      NACK\n   contribution, avg-rtcp-size ~= 120 bytes.  As we see from below, this\n
      \  may result in a buffer estimation error of 1-1.5 seconds (5-10%) for\n   lower
      bandwidth values and higher number of retransmissions.  This\n   effect is low
      in this case.  Nevertheless, it should be carefully\n   evaluated for the particular
      scenario; that is why the formula\n   includes it.\n   RTCP w/o Generic NACK,
      fixed packet size ~= 120 bytes\n   |============|=====|======================================|\n
      \  |  RTP BW    | RTT |            N value                   |\n   |============|=====|
      \  1      2       5       7       10  |\n                      |======================================|\n
      \  64000         0,05   1,16    2,32    5,79    8,11    11,58\n   128000        0,05
      \  0,60    1,21    3,02    4,23    6,04\n   256000        0,05   0,33    0,65
      \   1,64    2,29    3,27\n   512000        0,05   0,19    0,38    0,94    1,32
      \   1,89\n   1024000       0,05   0,12    0,24    0,60    0,83    1,19\n   5000000
      \      0,05   0,06    0,13    0,32    0,45    0,64\n   10000000      0,05   0,06
      \   0,11    0,29    0,40    0,57\n   64000         0,2    1,31    2,62    6,54
      \   9,16    13,08\n   128000        0,2    0,75    1,51    3,77    5,28    7,54\n
      \  256000        0,2    0,48    0,95    2,39    3,34    4,77\n   512000        0,2
      \   0,34    0,68    1,69    2,37    3,39\n   1024000       0,2    0,27    0,54
      \   1,35    1,88    2,69\n   5000000       0,2    0,21    0,43    1,07    1,50
      \   2,14\n   10000000      0,2    0,21    0,41    1,04    1,45    2,07\n   64000
      \        1      2,11    4,22    10,54   14,76   21,08\n   128000        1      1,55
      \   3,11    7,77    10,88   15,54\n   256000        1      1,28    2,55    6,39
      \   8,94    12,77\n   512000        1      1,14    2,28    5,69    7,97    11,39\n
      \  1024000       1      1,07    2,14    5,35    7,48    10,69\n   5000000       1
      \     1,01    2,03    5,07    7,10    10,14\n   10000000      1      1,01    2,01
      \   5,04    7,05    10,07\n"
    title: A.4.  Numbers
  title: Appendix A.  How to Control the Number of Rtxs. per Packet
- contents:
  - "Authors' Addresses\n   Jose Rey\n   Panasonic R&D Center Germany GmbH\n   Monzastr.
    4c\n   D-63225 Langen, Germany\n   Phone: +49-6103-766-134\n   Fax:   +49-6103-766-166\n
    \  EMail: jose.rey@eu.panasonic.com\n   David Leon\n   Consultant\n   EMail: davidleon123@yahoo.com\n
    \  Akihiro Miyazaki\n   Matsushita Electric Industrial Co., Ltd\n   1006, Kadoma,
    Kadoma City, Osaka, Japan\n   Phone: +81-6-6900-9172\n   Fax:   +81-6-6900-9173\n
    \  EMail: miyazaki.akihiro@jp.panasonic.com\n   Viktor Varsa\n   Nokia Research
    Center\n   6000 Connection Drive\n   Irving, TX. USA\n   Phone:  1-972-374-1861\n
    \  EMail: viktor.varsa@nokia.com\n   Rolf Hakenberg\n   Panasonic R&D Center Germany
    GmbH\n   Monzastr. 4c\n   D-63225 Langen, Germany\n   Phone: +49-6103-766-162\n
    \  Fax:   +49-6103-766-166\n   EMail: rolf.hakenberg@eu.panasonic.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
