- contents:
  - '          Protocol Extensions for Header Compression over MPLS

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This specification defines how to use Multi-Protocol Label Switching\n
    \  (MPLS) to route Header-Compressed (HC) packets over an MPLS label\n   switched
    path.  HC can significantly reduce packet-header overhead\n   and, in combination
    with MPLS, can also increases bandwidth\n   efficiency and processing scalability
    in terms of the maximum number\n   of simultaneous compressed flows that use HC
    at each router).  Here\n   we define how MPLS pseudowires are used to transport
    the HC context\n   and control messages between the ingress and egress MPLS label\n
    \  switching routers.  This is defined for a specific set of existing HC\n   mechanisms
    that might be used, for example, to support voice over IP.\n   This specification
    also describes extension mechanisms to allow\n   support for future, as yet to
    be defined, HC protocols.  In this\n   specification, each HC protocol operates
    independently over a single\n   pseudowire instance, very much as it would over
    a single point-to-\n   point link.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Header Compression over MPLS Protocol Overview ..................6\n   4. Protocol
    Specifications ........................................11\n      4.1. MPLS Pseudowire
    Setup and Signaling .......................13\n      4.2. Header Compression Scheme
    Setup, Negotiation, and\n           Signaling .................................................14\n
    \          4.2.1. Configuration Option Format [RFC3544] ..............15\n           4.2.2.
    RTP-Compression Suboption [RFC3544] ................17\n           4.2.3. Enhanced
    RTP-Compression Suboption [RFC3544] .......18\n           4.2.4. Negotiating Header
    Compression for Only TCP\n                  or Only Non-TCP Packets [RFC3544]
    ..................19\n           4.2.5. Configuration Option Format [RFC3241]
    ..............20\n           4.2.6. PROFILES Suboption [RFC3241] .......................21\n
    \     4.3. Encapsulation of Header Compressed Packets ................22\n      4.4.
    Packet Reordering .........................................23\n   5. HC Pseudowire
    Setup Example ....................................24\n   6. Security Considerations
    ........................................29\n   7. Acknowledgements ...............................................29\n
    \  8. IANA Considerations ............................................29\n   9.
    Normative References ...........................................30\n   10. Informative
    References ........................................31\n   11. Contributors ..................................................33\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Voice over IP (VoIP) typically uses the encapsulation\n
    \  voice/RTP/UDP/IP.  When MPLS labels [RFC3031] are added, this becomes\n   voice/RTP/UDP/IP/MPLS-labels.
    \ MPLS VPNs (e.g., [RFC4364]) use label\n   stacking, and in the simplest case
    of IPv4 the total packet header is\n   at least 48 bytes, while the voice payload
    is often no more than 30\n   bytes, for example.  When IPv6 is used, the relative
    size of the\n   header in comparison to the payload is even greater.  The interest
    in\n   header compression (HC) is to exploit the possibility of\n   significantly
    reducing the overhead through various compression\n   mechanisms, such as with
    enhanced compressed RTP (ECRTP) [RFC3545]\n   and robust header compression (ROHC)
    [RFC3095, RFC3095bis, RFC4815],\n   and also to increase scalability of HC.  MPLS
    is used to route HC\n   packets over an MPLS label switched path (LSP) without\n
    \  compression/decompression cycles at each router.  Such an HC over\n   MPLS
    capability can increase bandwidth efficiency as well as the\n   processing scalability
    of the maximum number of simultaneous\n   compressed flows that use HC at each
    router.  Goals and requirements\n   for HC over MPLS are discussed in [RFC4247].
    \ The solution using MPLS\n   pseudowire (PW) technology put forth in this document
    has been\n   designed to address these goals and requirements.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  Context: the state associated with a flow subject to IP header\n   compression.
    \ While the exact nature of the context is specific to a\n   particular HC protocol
    (CRTP, ECRTP, ROHC, etc.), this state\n   typically includes:\n      - the values
    of all of the fields in all of the headers (IP, UDP,\n        TCP, RTP, Encapsulating
    Security Payload (ESP), etc.) that the\n        particular header compression
    protocol operates on for the last\n        packet of the flow sent (by the compressor)
    or received (by the\n        decompressor).\n      - the change in the value of
    some of the fields in the IP, UDP,\n        TCP, etc. headers between the last
    two consecutive sent packets\n        (compressor) or received packets (decompressor)
    of the flow.\n        Some of the fields in the header change by a constant amount\n
    \       between subsequent packets in the flow most of the time.  Saving\n        the
    changes in these fields from packet to packet allows\n        verification that
    a constant rate of change is taking place, and\n        to take appropriate action
    when a deviation from the normal\n        changes are encountered.\n   For most
    HC protocols, a copy of the context of each compressed flow\n   is maintained
    at both the compressor and the decompressor.\n   compressed Real-time Transport
    Protocol (CRTP): a particular HC\n   protocol described in [RFC2508].\n   Context
    ID (CID): a small number, typically 8 or 16 bits, used to\n   identify a particular
    flow, and the context associated with the flow.\n   Most HC protocols in essence
    work by sending the CID across the link\n   in place of the full header, along
    with any unexpected changes in the\n   values in the various fields of the headers.\n
    \  Enhanced Compressed Real-time Protocol (ECRTP): a particular HC\n   protocol
    described in [RFC3545].\n   Forwarding Equivalence Class (FEC): a group of packets
    that are\n   forwarded in the same manner (e.g., over the same LSP, with the same\n
    \  forwarding treatment)\n   Header Compression scheme (HC scheme):  a particular
    method of\n   performing HC and its associated protocol.  Multiple methods of
    HC\n   have been defined, including Robust Header Compression (ROHC\n   [RFC3095,
    RFC3095bis]), compressed RTP (CRTP, [RFC2508]), enhanced\n   CRTP (ECRTP, [RFC3545]),
    and IP Header Compression (IPHC, [RFC2507]).\n   This document explicitly supports
    all of the HC schemes listed above,\n   and is intended to be extensible to others
    that may be developed.\n   Header Compression channel (HC channel): a session
    established\n   between a header compressor and a header decompressor using a
    single\n   HC scheme, over which multiple individual flows may be compressed.\n
    \  From this perspective, every PPP link over which HC is operating\n   defines
    a single HC channel, and based on this specification, every\n   HC PW defines
    a single HC channel.  HC PWs are bi-directional, which\n   means that a unidirectional
    leg of the PW is set up in each\n   direction.  One leg of the bi-directional
    PW may be set up to carry\n   only compression feedback, not header compressed
    traffic.  An HC\n   channel should not be confused with the individual traffic
    flows that\n   may be compressed using a single Context ID.  Each HC channel manages\n
    \  a set of unique CIDs.\n   IP Header Compression (IPHC): a particular HC protocol
    described in\n   [RFC2507]\n   Label: a short fixed length physically contiguous
    identifier that is\n   used to identify a FEC, usually of local significance\n
    \  Label Stack: an ordered set of labels\n   Label Switched Path (LSP): the path
    through one or more LSRs at one\n   level of the hierarchy followed by a packet
    in a particular\n   forwarding equivalence class (FEC)\n   Label Switching Router
    (LSR): an MPLS node that is capable of\n   forwarding native L3 packets\n   MPLS
    domain: a contiguous set of nodes that operate MPLS routing and\n   forwarding
    and which are also in one Routing or Administrative Domain\n   MPLS label: a label
    that is carried in a packet header, and that\n   represents the packet's FEC\n
    \  MPLS node: a node that is running MPLS.  An MPLS node will be aware\n   of
    MPLS control protocols, will operate one or more L3 routing\n   protocols, and
    will be capable of forwarding packets based on labels.\n   An MPLS node may also
    optionally be capable of forwarding native L3\n   packets.\n   Multiprotocol Label
    Switching (MPLS): an IETF working group and the\n   effort associated with the
    working group, including the technology\n   (signaling, encapsulation, etc.) itself\n
    \  Packet Switched Network (PSN): Within the context of Pseudowire PWE3,\n   this
    is a network using IP or MPLS as the mechanism for packet\n   forwarding.\n   Protocol
    Data Unit (PDU): the unit of data output to, or received\n   from, the network
    by a protocol layer.\n   Pseudowire (PW): a mechanism that carries the essential
    elements of\n   an emulated service from one provider edge router to one or more\n
    \  other provider edge routers over a PSN\n   Pseudowire Emulation Edge to Edge
    (PWE3): a mechanism that emulates\n   the essential attributes of service (such
    as a T1 leased line or\n   Frame Relay) over a PSN\n   Pseudowire PDU (PW-PDU):
    a PDU sent on the PW that contains all of\n   the data and control information
    necessary to emulate the desired\n   service\n   PSN Tunnel: a tunnel across a
    PSN, inside which one or more PWs can\n   be carried\n   PSN Tunnel Signaling:
    a protocol used to set up, maintain, and tear\n   down the underlying PSN tunnel\n
    \  PW Demultiplexer: data-plane method of identifying a PW terminating\n   at
    a provider edge router\n   Real Time Transport Protocol (RTP): a protocol for
    end-to-end network\n   transport for applications transmitting real-time data,
    such as audio\n   or video [RFC3550].\n   Robust Header Compression (ROHC): a
    particular HC protocol consisting\n   of a framework [RFC3095bis] and a number
    of profiles for different\n   protocols, e.g., for RTP, UDP, ESP [RFC3095], and
    IP [RFC3843]\n   Tunnel: a method of transparently carrying information over a
    network\n"
  title: 2.  Terminology
- contents:
  - "3.  Header Compression over MPLS Protocol Overview\n   To implement HC over MPLS,
    after the ingress router applies the HC\n   algorithm to the IP packet, the compressed
    packet is forwarded on an\n   MPLS LSP using MPLS labels, and then the egress
    router restores the\n   uncompressed header.  Any of a number of HC algorithms/protocols
    can\n   be used.  These algorithms have generally been designed for operation\n
    \  over a single point-to-point link-layer hop.  MPLS PWs [RFC3985],\n   which
    are used to provide emulation of many point-to-point link layer\n   services (such
    as frame relay permanent virtual circuits (PVCs) and\n   ATM PVCs) are used here
    to provide emulation of a single, point-to-\n   point link layer hop over which
    HC traffic may be transported.\n   Figure 1 illustrates an HC over MPLS channel
    established on an LSP\n   that traverses several LSRs, from R1/HC --> R2 --> R3
    --> R4/HD,\n   where R1/HC is the ingress router performing HC, and R4/HD is the\n
    \  egress router performing header decompression (HD).  This example\n   assumes
    that the packet flow being compressed has RTP/UDP/IP headers\n   and is using
    a HC scheme such as ROHC, CRTP, or ECRTP.  Compression\n   of the RTP/UDP/IP header
    is performed at R1/HC, and the compressed\n   packets are routed using MPLS labels
    from R1/HC to R2, to R3, and\n   finally to R4/HD, without further decompression/recompression
    cycles.\n   The RTP/UDP/IP header is decompressed at R4/HD and can be forwarded\n
    \  to other routers, as needed.  This example assumes that the\n   application
    is VoIP and that the HC algorithm operates on the RTP,\n   UDP, and IP headers
    of the VoIP flows.  This is an extremely common\n   application of HC, but need
    not be the only one.  The HC algorithms\n   supported by the protocol extensions
    specified in this document may\n   operate on TCP or IPsec ESP headers as well.\n
    \                     |\n                      | data (e.g., voice)/RTP/UDP/IP/link
    layer\n                      V\n                    _____\n                   |
    \    |\n                   |R1/HC| Header Compression (HC) Performed\n                   |_____|\n
    \                     |\n                      | data (e.g., voice)/compressed-header/MPLS-labels\n
    \                     V\n                    _____\n                   |     |\n
    \                  | R2  | Label Switching\n                   |_____| (no compression/decompression)\n
    \                     |\n                      | data (e.g., voice)/compressed-header/MPLS-labels\n
    \                     V\n                    _____\n                   |     |\n
    \                  | R3  | Label Switching\n                   |_____| (no compression/decompression)\n
    \                     |\n                      | data (e.g., voice)/compressed-header/MPLS-labels\n
    \                     V\n                    _____\n                   |     |\n
    \                  |R4/HD| Header Decompression (HD) Performed\n                   |_____|\n
    \                     |\n                      | data (e.g., voice)/RTP/UDP/IP/link
    layer\n                      V\n      Figure 1: Example of HC over MPLS over Routers
    R1 --> R4\n   In the example scenario, HC therefore takes place between R1 and
    R4,\n   and the MPLS LSP transports data/compressed-header/MPLS-labels\n   instead
    of data/RTP/UDP/IP/MPLS-labels, often saving more than 90% of\n   the RTP/UDP/IP
    overhead.  Typically there are two MPLS labels (8\n   octets) and a link-layer
    HC control parameter (2 octets).  The MPLS\n   label stack and link-layer headers
    are not compressed.  Therefore, HC\n   over MPLS can significantly reduce the
    header overhead through\n   compression mechanisms.\n   HC reduces the IP/UDP/RTP
    headers to 2-4 bytes for most packets.\n   Half of the reduction in header size
    comes from the observation that\n   half of the bytes in the IP/UDP/RTP headers
    remain constant over the\n   life of the flow.  After sending the uncompressed
    header template\n   once, these fields may be removed from the compressed headers
    that\n   follow.  The remaining compression comes from the observation that\n
    \  although several fields change in every packet, the difference from\n   packet
    to packet is often constant or at least limited, and therefore\n   the second-order
    difference is zero.\n   The compressor and decompressor both maintain a context
    for each\n   compressed flow.  The context is the session state shared between
    the\n   compressor and decompressor.  The details of what is included in the\n
    \  context may vary between HC schemes.  The context at the compressor\n   would
    typically include the uncompressed headers of the last packet\n   sent on the
    flow, and some measure of the differences in selected\n   header field values
    between the last packet transmitted and the\n   packet(s) transmitted just before
    it.  The context at the\n   decompressor would include similar information about
    received\n   packets.  With this information, all that must be communicated across\n
    \  the wire is an indication of which flow a packet is associated with\n   (the
    CID), and some compact encoding of the second order differences\n   (i.e., the
    harder to predict differences) between packets.\n   MPLS PWs [RFC3985] are used
    to transport the HC packets between the\n   ingress and egress MPLS LSRs.  Each
    PW acts like a logical point-to-\n   point link between the compressor and the
    decompressor.  Each PW\n   supports a single HC channel, which, from the perspective
    of the HC\n   scheme operation, is similar to a single PPP link or a single frame\n
    \  relay PVC.  One exception to this general model is that PWs carry\n   only
    packets with compressed headers, and do not share the PW with\n   uncompressed
    packets.\n   The PW architecture specifies the use of a label stack with at least\n
    \  2 levels.  The label at the bottom of the stack is called the PW\n   label.
    \ The PW label acts as an identifier for a particular PW.  With\n   HC PWs, the
    compressor adds the label at the bottom of the stack and\n   the decompressor
    removes this label.  No LSRs between the compressor\n   and decompressor inspect
    or modify this label.  Labels higher in the\n   stack are called the packet switch
    network (PSN) labels, and are used\n   to forward the packet through the MPLS
    network as described in\n   [RFC3031].  The decompressor uses the incoming MPLS
    PW label (the\n   label at the bottom of the stack), along with the CID to locate
    the\n   proper decompression context.  Standard HC methods (e.g., ECRTP,\n   ROHC,
    etc.) are used to determine the contexts.  The CIDs are\n   assigned by the HC
    as normal, and there would be no problem if\n   duplicate CIDs are received at
    the HD for different PWs, which\n   support different compressed channels.  For
    example, if two different\n   compressors, HCa and HCb, both assign the same CID
    to each of 2\n   separate flows destined to decompressor HDc, HDc can still\n
    \  differentiate the flows and locate the proper decompression context\n   for
    each, because the tuples <PWlabel-HCa, CID> and <PWlabel-HCb,\n   CID> are still
    unique.\n   In addition to the PW label and PSN label(s), HC over MPLS packets\n
    \  also carry a HC control parameter.  The HC control parameter contains\n   both
    a packet type field and a packet length field.  The packet type\n   field is needed
    because each HC scheme supported by this\n   specification defines multiple packet
    types, for example, \"full\n   header\" packets, which are used to initialize
    and/or re-synchronize\n   the context between compressor and decompressor, vs.
    normal HC\n   packets.  And most of the HC schemes require that the underlying
    link\n   layer protocols provide the differentiation between packet types.\n   Similarly,
    one of the assumptions that is part of most of the HC\n   schemes is that the
    packet length fields in the RTP/UDP/IP, etc.\n   headers need not be explicitly
    sent across the network, because the\n   IP datagram length can be implicitly
    determined from the lower\n   layers.  This specification assumes that, with one
    exception, the\n   length of an HC IP datagram can be determined from the link
    layers of\n   the packets transmitted across the MPLS network.  The exception
    is\n   for packets that traverse an Ethernet link.  Ethernet requires\n   padding
    for packets whose payload size is less than 46 bytes in\n   length.  So the HC
    control parameter contains a length field of 6\n   bits to encode the lengths
    of any HC packets less than 64 bytes in\n   length.\n   HC PWs are set up by the
    PW signaling protocol [RFC4447].  [RFC4447]\n   actually defines a set of extensions
    to the MPLS label distribution\n   protocol (LDP) [RFC3036].  As defined in [RFC4447],
    LDP signaling to\n   set up, tear down, and manage PWs is performed directly between
    the\n   PW endpoints, in this case, the compressor and the decompressor.  PW\n
    \  signaling is used only to set up the PW label at the bottom of the\n   stack,
    and is used independently of any other signaling that may be\n   used to set up
    PSN labels.  So, for example, in Figure 1, LDP PW\n   signaling would be performed
    directly between R1/HC and R4/HD.\n   Router R2 and R3 would not participate in
    PW signaling.\n   [RFC4447] provides extensions to LDP for PWs, and this document\n
    \  provides further extensions specific to HC.  Since PWs provide a\n   logical
    point-to-point connection over which HC can be run, the\n   extensions specified
    in this document reuse elements of the protocols\n   used to negotiate HC over
    the Point-to-Point Protocol [RFC1661].\n   [RFC3241] specifies how ROHC is used
    over PPP and [RFC3544] specifies\n   how several other HC schemes (CRTP, ECRTP,
    IPHC) are used over PPP.\n   Both of these RFCs provide configuration options
    for negotiating HC\n   over PPP.  The formats of these configuration options are
    reused here\n   for setting up HC over PWs.  When used in the PPP environment,
    these\n   configuration options are used as extensions to PPP's IP Control\n   Protocol
    [RFC1332] and the detailed PPP options negotiations process\n   described in [RFC1661].
    \ This is necessary because a PPP link may\n   support multiple protocols, each
    with its own addressing scheme and\n   options.  Achieving interoperability requires
    a negotiation process\n   so that the nodes at each end of the link can agree
    on a set of\n   protocols and options that both support.  However, a single HC
    PW\n   supports only HC traffic using a single HC scheme.  So while the\n   formats
    of configuration options from [RFC3241] and [RFC3544] are\n   reused here, the
    detailed PPP negotiation process is not.  Instead,\n   these options are reused
    here just as descriptors (TLVs in the\n   specific terminology of LDP and [RFC4447])
    of basic parameters of an\n   HC PW.  These parameters are further described in
    Section 4.  The HC\n   configuration parameters are initially generated by the
    decompressor\n   and describe what the decompressor is prepared to receive.\n
    \  Most HC schemes use a feedback mechanism which requires bi-\n   directional
    flow of HC packets, even if the flow of compressed IP\n   packets is in one direction
    only.  The basic signaling process of\n   [RFC4447] sets up unidirectional PWs,
    and must be repeated in each\n   direction in order to set up the bi-directional
    flow needed for HC.\n   Figure 1 illustrates an example data flow set up from
    R1/HC --> R2\n   --> R3 --> R4/HD, where R1/HC is the ingress router where header\n
    \  compression is performed, and R4/HD is the egress router where header\n   decompression
    is done.  Each router functions as an LSR and supports\n   signaling of LSP/PWs.
    \ See Section 5 for a detailed example of how\n   the flow depicted in Figure
    1 is established.\n   All the HC schemes used here are built so that if an uncompressible\n
    \  packet is seen, it should just be sent uncompressed.  For some types\n   of
    compression (e.g., IPHC-TCP), a non-compressed path is required.\n   For IPHC-TCP
    compression, uncompressible packets occur for every TCP\n   flow.  Another way
    that this kind of issue can occur is if MAX_HEADER\n   is configured lower than
    the longest header, in which case,\n   compression might not be possible in some
    cases.\n   The uncompressed packets associated with HC flows (e.g., uncompressed\n
    \  IPHC-TCP packets) can be sent through the same MPLS tunnel along with\n   all
    other non-HC (non-PW) IP packets.  MPLS tunnels can transport\n   many types of
    packets simultaneously, including non-PW IP packets,\n   layer 3 VPN packets,
    and PW (e.g., HC flow) packets.  In the\n   specification, we assume that there
    is a path for uncompressed\n   traffic, and it is a compressor decision as to
    what would or would\n   not go in the HC-PW.\n"
  title: 3.  Header Compression over MPLS Protocol Overview
- contents:
  - "4.  Protocol Specifications\n   Figure 2 illustrates the PW stack reference model
    to support PW\n   emulated services.\n   +-------------+                                +-------------+\n
    \  |  Layer2     |                                |  Layer2     |\n   |  Emulated
    \  |                                |  Emulated   |\n   |  Services   |         Emulated
    Service       |  Services   |\n   |             |<==============================>|
    \            |\n   +-------------+                                +-------------+\n
    \  |     HC      |           Pseudowire           |     HD      |\n   |Demultiplexer|<==============================>|Demultiplexer|\n
    \  +-------------+                                +-------------+\n   |    PSN
    \     |            PSN Tunnel          |    PSN      |\n   |   MPLS      |<==============================>|
    \  MPLS      |\n   +-------------+                                +-------------+\n
    \  |  Physical   |                                |  Physical   |\n   +-----+-------+
    \                               +-----+-------+\n             Figure 2: Pseudowire
    Protocol Stack Reference Model\n   Each HC-HD compressed channel is mapped to
    a single PW and associated\n   with 2 PW labels, one in each direction.  A single
    PW label MUST be\n   used for many HC flows (could be 100's or 1000's) rather
    than\n   assigning a different PW label to each flow.  The latter approach\n   would
    involve a complex mechanism for PW label assignment, freeing up\n   of labels
    after a flow terminates, etc., for potentially 1000's of\n   simultaneous HC flows.
    \ On the other hand, the mechanism for CID\n   assignment, freeing up, etc., is
    in place and there is no need to\n   duplicate it with PW assignment/deassignment
    for individual HC flows.\n   Multiple PWs SHOULD be established in case different
    quality of\n   service (QoS) requirements are needed for different compressed\n
    \  streams.  The QoS received by the flow would be determined by the EXP\n   bit
    marking in the PW label.  Normally, all RTP packets would get the\n   same EXP
    marking [RFC3270], equivalent to expedited forwarding (EF)\n   treatment [RFC3246]
    in Diffserv.  However, the protocol specified in\n   this document applies to
    several different types of streams, not just\n   RTP streams, and QoS treatment
    other than EF may be required for\n   those streams.\n   Figure 3 shows the HC
    over MPLS protocol stack (with uncompressed\n   header):\n   Media stream\n   RTP\n
    \  UDP\n   IP\n   HC control parameter\n   MPLS label stack (at least 2 labels
    for this application)\n   Link layer under MPLS (PPP, PoS, Ethernet)\n   Physical
    layer (SONET/SDH, fiber, copper)\n                                                        +--------------+\n
    \                                                       | Media stream |\n                                                        +--------------+\n
    \                                                       \\_______ ______/\n                                                2-4
    octets      V\n                                                 +------+--------------+\n
    \                        Compressed /RTP/UDP/IP/ |header|              |\n                                                 +------+--------------+\n
    \                                                \\__________ __________/\n                                          2
    octets          V\n                                          +------+---------------------+\n
    \                    HC Control Parameter |header|                     |\n                                          +------+---------------------+\n
    \                                         \\______________ _____________/\n                                   8
    octets              V\n                                   +------+----------------------------+\n
    \                      MPLS Labels |header|                            |\n                                   +------+----------------------------+\n
    \                                  \\_________________ _________________/\n                                                     V\n
    \                           +------------------------------------------+\n      Link
    Layer under MPLS |                                          |\n                            +------------------------------------------+\n
    \                           \\____________________ _____________________/\n                                                 V\n
    \                    +-------------------------------------------------+\n      Physical
    Layer |                                                 |\n                     +-------------------------------------------------+\n
    \    Figure 3: Header Compression over MPLS Media Stream Transport\n   The HC
    control parameter MUST be used to identify the packet types\n   for the HC scheme
    in use.  The MPLS labels technically define two\n   layers: the PW identifier
    and the MPLS tunnel identifier.  The PW\n   label MUST be used as the demultiplexer
    field by the HD, where the PW\n   label appears at the bottom label of an MPLS
    label stack.  The LSR\n   that will be performing decompression MUST ensure that
    the label it\n   distributes (e.g., via LDP) for a channel is unique.  There can
    also\n   be other MPLS labels, for example, to identify an MPLS VPN.  The\n   IP/UDP/RTP
    headers are compressed before transmission, leaving the\n   rest of the stack
    alone, as shown in Figure 3.\n"
  - contents:
    - "4.1.  MPLS Pseudowire Setup and Signaling\n   PWs MUST be set up in advance
      for the transport of media streams\n   using [RFC4447] control messages exchanged
      by the HC-HD endpoints.\n   Furthermore, a PW type MUST be used to indicate
      the HC scheme being\n   used on the PW.  [RFC4447] specifies the MPLS label
      distribution\n   protocol (LDP) [RFC3036] extensions to set up and maintain
      the PWs,\n   and defines new LDP objects to identify and signal attributes of
      PWs.\n   Any acceptable method of MPLS label distribution MAY be used for\n
      \  distributing the MPLS tunnel label [RFC3031].  These methods include\n   LDP
      [RFC3036], RSVP-TE [RFC3209], or configuration.\n   To assign and distribute
      the PW labels, an LDP session MUST be set up\n   between the PW endpoints using
      the extended discovery mechanism\n   described in [RFC3036].  The PW label bindings
      are distributed using\n   the LDP downstream unsolicited mode described in [RFC3036].
      \ An LDP\n   label mapping message contains a FEC object, a label object, and\n
      \  possible other optional objects.  The FEC object indicates the\n   meaning
      of the label, identifies the PW type, and identifies the PW\n   that the PW
      label is bound to.  See [RFC4447] for further explanation\n   of PW signaling.\n
      \  This specification defines new PW type values to be carried within\n   the
      FEC object to identify HC PWs for each HC scheme.  The PW type is\n   a 15-bit
      parameter assigned by IANA, as specified in the [RFC4446]\n   registry, and
      MUST be used to indicate the HC scheme being used on\n   the PW.  IANA has set
      aside the following PW type values for\n   assignment according to the registry
      specified in RFC 4446, Section\n   3.2:\n   PW type Description                                 Reference\n
      \  =============================================================\n   0x001A
      \ ROHC Transport Header-compressed Packets    [RFC3095bis]\n   0x001B  ECRTP
      Transport Header-compressed Packets   [RFC3545]\n   0x001C  IPHC Transport Header-compressed
      Packets    [RFC2507]\n   0x001D  CRTP Transport Header-compressed Packets    [RFC2508]\n
      \  The HC control parameter enables distinguishing between various\n   packets
      types (e.g., uncompressed, UDP compressed, RTP compressed,\n   context-state,
      etc.).  However, the HC control parameter indications\n   are not unique across
      HC schemes, and therefore the PW type value\n   allows the HC scheme to be identified.\n"
    title: 4.1.  MPLS Pseudowire Setup and Signaling
  - contents:
    - "4.2.  Header Compression Scheme Setup, Negotiation, and Signaling\n   As described
      in the previous section, the HC PW MUST be used for\n   compressed packets only,
      which is configured at PW setup.  If a flow\n   is not compressed, it MUST NOT
      be placed on the HC PW.  HC PWs MUST\n   be bi-directional, which means that
      a unidirectional leg of the PW\n   MUST be set up in each direction.  One leg
      of the bi-directional PW\n   MAY be set up to carry only compression feedback,
      not header\n   compressed traffic.  The same PW type MUST be used for PW signaling\n
      \  in both directions.\n   HC scheme parameters MAY be manually configured,
      but if so, manual\n   configuration MUST be done in both directions.  If HC
      scheme\n   parameters are signaled, the Interface Parameters Sub-TLV MUST be\n
      \  used on any unidirectional legs of a PW that will carry HC traffic.\n   For
      a unidirectional leg of a PW that will carry only compression\n   feedback,
      the components of the Interface Parameters Sub-TLV\n   described below are not
      relevant and MUST NOT be used.\n   The PW HC approach relies on the PW/MPLS
      layer to convey HC channel\n   configuration information.  The Interface Parameters
      Sub-TLV [IANA,\n   RFC4447] must be used to signal HC channel setup and specify
      HC\n   parameters.  That is, the configuration options specified in\n   [RFC3241,
      RFC3544] are reused in this specification to specify PW-\n   specific parameters,
      and to configure the HC and HD ports at the\n   edges of the PW so that they
      have the necessary capabilities to\n   interoperate with each other.\n   Pseudowire
      Interface Parameter Sub-TLV type values are specified in\n   [RFC4446].  IANA
      has set aside the following Pseudowire Interface\n   Parameter Sub-TLV type
      values according to the registry specified in\n   RFC 4446, Section 3.3:\n   Parameter
      \ ID Length        Description                   Reference\n   ---------  ---------------
      \ ----------------------------  ---------\n   0x0D       up to 256 bytes  ROHC
      over MPLS configuration  RFC 4901\n                                RFC 3241\n
      \  0x0F       up to 256 bytes  CRTP/ECRTP/IPHC HC over MPLS  RFC 4901\n                                configuration
      RFC 3544\n   TLVs identified in [RFC3241] and [RFC3544] MUST be encapsulated
      in\n   the PW Interface Parameters Sub-TLV and used to negotiate header\n   compression
      session setup and parameter negotiation for their\n   respective protocols.
      \ The TLVs supported in this manner MUST include\n   the following:\n   o  Configuration
      Option Format, RTP-Compression Suboption, Enhanced\n      RTP-Compression Suboption,
      TCP/non-TCP Compression Suboptions, as\n      specified in [RFC3544]\n   o  Configuration
      Option Format, PROFILES Suboption, as specified in\n      [RFC3241]\n   These
      TLVs are now specified in the following sections.\n"
    - contents:
      - "4.2.1.  Configuration Option Format [RFC3544]\n   Both the network control
        protocol for IPv4, IPCP [RFC1332] and the\n   IPv6 Network Control Protocol
        (NCP), IPV6CP [RFC2472] may be used to\n   negotiate IP HC parameters for
        their respective controlled protocols.\n   The format of the configuration
        option is the same for both IPCP and\n   IPV6CP.  This configuration option
        MUST be included for ECRTP, CRTP\n   and IPHC PW types and MUST NOT be included
        for ROHC PW types.  A\n   decompressor MUST reject this option (if misconfigured)
        for ROHC PW\n   types and send an explicit error message to the compressor
        [RFC3544].\n   Description\n      This NCP configuration option is used to
        negotiate parameters for\n      IP HC.  Successful negotiation of parameters
        enables the use of\n      Protocol Identifiers FULL_HEADER, COMPRESSED_TCP,\n
        \     COMPRESSED_TCP_NODELTA, COMPRESSED_NON_TCP, and CONTEXT_STATE as\n      specified
        in [RFC2507].  The option format is summarized below.\n      The fields are
        transmitted from left to right.\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |     Type      |    Length     |    IP-Compression-Protocol    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           TCP_SPACE           |         NON_TCP_SPACE         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |         F_MAX_PERIOD          |          F_MAX_TIME           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |           MAX_HEADER          |          suboptions...        |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Type\n         2\n      Length\n         >= 14\n         The length
        may be increased if the presence of additional\n         parameters is indicated
        by additional suboptions.\n      IP-Compression-Protocol\n         0061 (hex)\n
        \     TCP_SPACE\n         The TCP_SPACE field is two octets and indicates
        the maximum\n         value of a context identifier in the space of context\n
        \        identifiers allocated for TCP.\n            Suggested value: 15\n
        \        TCP_SPACE must be at least 0 and at most 255 (the value 0\n         implies
        having one context).  This field is not used for CRTP\n         (PW type 0x001B)
        and ECRTP (PW type 0x001B) PWs.  For these PW\n         types, it should be
        set to its suggested value by the sender\n         and ignored by the receiver.\n
        \     NON_TCP_SPACE\n         The NON_TCP_SPACE field is two octets and indicates
        the maximum\n         value of a context identifier in the space of context\n
        \        identifiers allocated for non-TCP.  These context identifiers\n         are
        carried in COMPRESSED_NON_TCP, COMPRESSED_UDP and\n         COMPRESSED_RTP
        packet headers.\n            Suggested value: 15\n         NON_TCP_SPACE must
        be at least 0 and at most 65535 (the value 0\n         implies having one
        context).\n      F_MAX_PERIOD\n         Maximum interval between full headers.
        \ No more than\n         F_MAX_PERIOD COMPRESSED_NON_TCP headers may be sent
        between\n         FULL_HEADER headers.\n            Suggested value: 256\n
        \        A value of zero implies infinity, i.e., there is no limit to\n         the
        number of consecutive COMPRESSED_NON_TCP headers.  This\n         field is
        not used for CRTP (PW type 0x001B) and ECRTP (PW type\n         0x001B) PWs.
        \ For these PW types, it should be set to its\n         suggested value by
        the sender and ignored by the receiver.\n      F_MAX_TIME\n         Maximum
        time interval between full headers.  COMPRESSED_NON_TCP\n         headers
        may not be sent more than F_MAX_TIME seconds after\n         sending the last
        FULL_HEADER header.\n         Suggested value: 5 seconds\n         A value
        of zero implies infinity.  This field is not used for\n         CRTP (PW type
        0x001B) and ECRTP (PW type 0x001B) PWs.  For\n         these PW types, it
        should be set to its suggested value by the\n         sender and ignored by
        the receiver.\n      MAX_HEADER\n         The largest header size in octets
        that may be compressed.\n         Suggested value: 168 octets\n         The
        value of MAX_HEADER should be large enough so that at least\n         the
        outer network layer header can be compressed.  To increase\n         compression
        efficiency MAX_HEADER should be set to a value\n         large enough to cover
        common combinations of network and\n         transport layer headers.\n      suboptions\n
        \        The suboptions field consists of zero or more suboptions.  Each\n
        \        suboption consists of a type field, a length field and zero or\n
        \        more parameter octets, as defined by the suboption type.  The\n         value
        of the length field indicates the length of the suboption\n         in its
        entirety, including the lengths of the type and length\n         fields.\n
        \      0                   1                   2\n       0 1 2 3 4 5 6 7 8
        9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |     Type      |    Length     |  Parameters...|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 4.2.1.  Configuration Option Format [RFC3544]
    - contents:
      - "4.2.2.  RTP-Compression Suboption [RFC3544]\n   The RTP-Compression suboption
        is included in the NCP IP-Compression-\n   Protocol option for IPHC if IP/UDP/RTP
        compression is to be enabled.\n   This suboption MUST be included for CRTP
        PWs (0x001C) and MUST NOT be\n   included for other PW types.\n   Inclusion
        of the RTP-Compression suboption enables use of additional\n   Protocol Identifiers
        COMPRESSED_RTP and COMPRESSED_UDP along with\n   additional forms of CONTEXT_STATE
        as specified in [RFC2508].\n   Description\n      Enables the use of Protocol
        Identifiers COMPRESSED_RTP,\n      COMPRESSED_UDP, and CONTEXT_STATE as specified
        in [RFC2508].\n          0                   1\n          0 1 2 3 4 5 6 7
        8 9 0 1 2 3 4 5\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         |     Type
        \     |    Length     |\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         Type\n
        \           1\n         Length\n            2\n"
      title: 4.2.2.  RTP-Compression Suboption [RFC3544]
    - contents:
      - "4.2.3.  Enhanced RTP-Compression Suboption [RFC3544]\n   To use the enhanced
        RTP HC defined in [RFC3545], a new suboption 2 is\n   added.  Suboption 2
        is negotiated instead of, not in addition to,\n   suboption 1.  This suboption
        MUST be included for ECRTP PWs (0x001B)\n   and MUST NOT be included for other
        PW types.\n   Note that suboption 1 refers to the RTP-Compression Suboption,
        as\n   specified in Section 4.2.2, and suboption 2 refers to the Enhanced\n
        \  RTP-Compression Suboption, as specified in Section 4.2.3.  These\n   suboptions
        MUST NOT occur together.  If they do (e.g., if\n   misconfigured), a decompressor
        MUST reject this option and send an\n   explicit error message to the compressor
        [RFC3544].\n   Description\n      Enables the use of Protocol Identifiers
        COMPRESSED_RTP and\n      CONTEXT_STATE as specified in [RFC2508].  In addition,
        it enables\n      the use of [RFC3545] compliant compression including the
        use of\n      Protocol Identifier COMPRESSED_UDP with additional flags and
        use\n      of the C flag with the FULL_HEADER Protocol Identifier to indicate\n
        \     use of HDRCKSUM with COMPRESSED_RTP and COMPRESSED_UDP packets.\n          0
        \                  1\n          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \        |     Type      |    Length     |\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Type\n         2\n      Length\n         2\n"
      title: 4.2.3.  Enhanced RTP-Compression Suboption [RFC3544]
    - contents:
      - "4.2.4.  Negotiating Header Compression for Only TCP or Only Non-TCP\n        Packets
        [RFC3544]\n   In [RFC3544] it was not possible to negotiate only TCP HC or
        only\n   non-TCP HC because a value of 0 in the TCP_SPACE or the NON_TCP_SPACE\n
        \  fields actually means that 1 context is negotiated.\n   A new suboption
        3 is added to allow specifying that the number of\n   contexts for TCP_SPACE
        or NON_TCP_SPACE is zero, disabling use of the\n   corresponding compression.
        \ This suboption MUST be included for IPHC\n   PWs (0x001C) and MUST NOT be
        included for other PW types.\n   Description\n      Enable HC for only TCP
        or only non-TCP packets.\n       0                   1                   2\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |     Type      |    Length     |   Parameter   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Type\n         3\n      Length\n         3\n      Parameter\n         The
        parameter is 1 byte with one of the following values:\n         1 = the number
        of contexts for TCP_SPACE is 0\n         2 = the number of contexts for NON_TCP_SPACE
        is 0\n   This suboption overrides the values that were previously assigned
        to\n   TCP_SPACE and NON_TCP_SPACE in the IP HC option.\n   If suboption 3
        is included multiple times with parameter 1 and 2,\n   compression is disabled
        for all packets.\n"
      title: 4.2.4.  Negotiating Header Compression for Only TCP or Only Non-TCP
    - contents:
      - "4.2.5.  Configuration Option Format [RFC3241]\n   Both the network control
        protocol for IPv4, IPCP [RFC1332] and the\n   IPv6 NCP, IPV6CP [RFC2472] may
        be used to negotiate IP HC parameters\n   for their respective controlled
        protocols.  The format of the\n   configuration option is the same for both
        IPCP and IPV6CP.  This\n   configuration option MUST be included for ROHC
        PW types and MUST NOT\n   be included for ECRTP, CRTP, and IPHC PW types.
        \ A decompressor MUST\n   reject this option (if misconfigured) for ECRTP,
        CRTP, and IPHC PW\n   types, and send an explicit error message to the compressor\n
        \  [RFC3544].\n   Description\n      This NCP configuration option is used
        to negotiate parameters for\n      ROHC.  The option format is summarized
        below.  The fields are\n      transmitted from left to right.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |    Length     |    IP-Compression-Protocol    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |            MAX_CID            |             MRRU              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |           MAX_HEADER          |          suboptions...        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Type\n      2\n   Length\n      >= 10\n      The length may be increased
        if the presence of additional\n      parameters is indicated by additional
        suboptions.\n   IP-Compression-Protocol\n      0003 (hex)\n   MAX_CID\n      The
        MAX_CID field is two octets and indicates the maximum value of\n      a context
        identifier.\n      Suggested value: 15\n      MAX_CID must be at least 0 and
        at most 16383 (The value 0 implies\n      having one context).\n   MRRU\n
        \     The MRRU field is two octets and indicates the maximum\n      reconstructed
        reception unit (see [RFC3095bis], Section 5.1.2).\n      Suggested value:
        0\n   MAX_HEADER\n      The largest header size in octets that may be compressed.\n
        \           Suggested value: 168 octets\n      The value of MAX_HEADER should
        be large enough so that at least\n      the outer network layer header can
        be compressed.  To increase\n      compression efficiency MAX_HEADER should
        be set to a value large\n      enough to cover common combinations of network
        and transport layer\n      headers.\n      NOTE: The four ROHC profiles defined
        in RFC 3095 do not provide\n      for a MAX_HEADER parameter.  The parameter
        MAX_HEADER defined by\n      this document is therefore without consequence
        in these profiles\n      because the maximum compressible header size is unspecified.\n
        \     Other profiles (e.g., ones based on RFC 2507) can make use of the\n
        \     parameter by explicitly referencing it.\n   suboptions\n      The suboptions
        field consists of zero or more suboptions.  Each\n      suboption consists
        of a type field, a length field, and zero or\n      more parameter octets,
        as defined by the suboption type.  The\n      value of the length field indicates
        the length of the suboption in\n      its entirety, including the lengths
        of the type and length fields.\n             0                   1                   2\n
        \            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           |     Type      |    Length     |  Parameters...|\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 4.2.5.  Configuration Option Format [RFC3241]
    - contents:
      - "4.2.6.  PROFILES Suboption [RFC3241]\n   The set of profiles to be enabled
        is subject to negotiation.  Most\n   initial implementations of ROHC implement
        profiles 0x0000 to 0x0003.\n   This option MUST be supplied.\n   Description\n
        \     Define the set of profiles supported by the decompressor.\n             0
        \                  1                   2\n             0 1 2 3 4 5 6 7 8 9
        0 1 2 3 4 5 6 7 8 9 0 1 2 3\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \           |     Type      |    Length     |  Profiles...  |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Type\n         1\n      Length\n         2n+2\n      Value\n         n
        octet-pairs in ascending order, each octet-pair specifying a\n         ROHC
        profile supported.\n   HC flow identification is being done now in many ways.
        \ Since there\n   are multiple possible approaches to the problem, no specific
        method\n   is specified in this document.\n"
      title: 4.2.6.  PROFILES Suboption [RFC3241]
    title: 4.2.  Header Compression Scheme Setup, Negotiation, and Signaling
  - contents:
    - "4.3.  Encapsulation of Header Compressed Packets\n   The HC control parameter
      is used to identify the packet types for\n   IPHC [RFC2507], CRTP [RFC2508],
      and ECRTP [RFC3545], as shown in\n   Figure 4:\n                                    1\n
      \               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              |0 0 0 0|Pkt Typ|  Length   |Res|\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                Figure 4: HC Control Parameter\n   where:\n   \"Packet Type\"
      encoding:\n   0: ROHC Small-CIDs\n   1: ROHC Large-CIDs\n   2: FULL_HEADER\n
      \  3: COMPRESSED_TCP\n   4: COMPRESSED_TCP_NODELTA\n   5: COMPRESSED_NON_TCP\n
      \  6: COMPRESSED_RTP_8\n   7: COMPRESSED_RTP_16\n   8: COMPRESSED_UDP_8\n   9:
      COMPRESSED_UDP_16\n   10: CONTEXT_STATE\n   11-15: Not yet assigned.  (See Section
      8, \"IANA Considerations\",\n          for discussion of the registration rules.)\n
      \  As discussed in [ECMP-AVOID], since this MPLS payload type is not IP,\n   the
      first nibble is set to 0000 to avoid being mistaken for IP.  This\n   is also
      consistent with the encoding of the PW MPLS control word\n   (PWMCW) described
      in [RFC4385]; however, the HC control parameter is\n   not intended to be a
      PWMCW.\n   Note that ROHC [RFC3095, RFC3095bis] provides its own packet type\n
      \  within the protocol; however, the HC control parameter MUST still be\n   used
      to avoid the problems identified above.  Since the \"Packet Type\"\n   will
      be there anyway, it is used to indicate ROHC CID size, in the\n   same way as
      with PPP.\n   The HC control parameter length field is ONLY used for short packets\n
      \  because padding may be appended by the Ethernet Data Link Layer.  If\n   the
      length is greater than or equal to 64 octets, the length field\n   MUST be set
      to zero.  If the MPLS payload is less than 64 bytes, then\n   the length field
      MUST be set to the length of the PW payload plus the\n   length of the HC control
      parameter.  Note that the last 2 bits in the\n   HC control parameter are reserved.\n"
    title: 4.3.  Encapsulation of Header Compressed Packets
  - contents:
    - "4.4.  Packet Reordering\n   Packet reordering for ROHC is discussed in [RFC4224],
      which is a\n   useful source of information.  In case of lossy links and other\n
      \  reasons for reordering, implementation adaptations are needed to\n   allow
      all the schemes to be used in this case.  Although CRTP is\n   viewed as having
      risks for a number of PW environments due to\n   reordering and loss, it is
      still the protocol of choice in many\n   cases.  CRTP was designed for reliable
      point to point links with\n   short delays.  It does not perform well over links
      with a high rate\n   of packet loss, packet reordering, and long delays.  In
      such cases,\n   ECRTP [RFC3545] may be considered to increase robustness to
      both\n   packet loss and misordering between the compressor and the\n   decompressor.
      \ This is achieved by repeating updates and sending of\n   absolute (uncompressed)
      values in addition to delta values for\n   selected context parameters.  IPHC
      should use TCP_NODELTA, ECRTP\n   should send absolute values, ROHC should be
      adapted as discussed in\n   [RFC4224].  An evaluation and simulation of ECRTP
      and ROHC reordering\n   is given in [REORDER-EVAL].\n"
    title: 4.4.  Packet Reordering
  title: 4.  Protocol Specifications
- contents:
  - "5.  HC Pseudowire Setup Example\n   This example will trace the setup of an MPLS
    PW supporting bi-\n   directional ECRTP [RFC3545] traffic.  The example assumes
    the\n   topology shown in Figure 1.  The PW will be set up between LSRs R1/HC\n
    \  and R4/HD.  LSRs R2 and R3 have no direct involvement in the\n   signaling
    for this PW, other than to transport the signaling traffic.\n   For this example,
    it is assumed that R1/HC has already obtained the\n   IP address of R4/HD used
    for LDP signaling, and vice versa, that both\n   R1/HC and R4/HD have been configured
    with the same 32-bit PW ID, as\n   described in Section 5.2 of [RFC4447], and
    that R1/HC has been\n   configured to initiate the LDP discovery process.  Furthermore,
    we\n   assume that R1/HC has been configured to receive a maximum of 200\n   simultaneous
    ECRTP flows from R4/HD, and R4/HD has been configured to\n   receive a maximum
    of 255 ECRTP flows from R1/HC.\n   Assuming that there is no existing LDP session
    between R1/HC and\n   R4/HD, the PW signaling must start by setting up an LDP
    session\n   between them.  As described earlier in this document, LDP extended\n
    \  discovery is used between HC over MPLS LSRs.  Since R1/HC has been\n   configured
    to initiate extended discovery, it will send LDP Targeted\n   Hello messages to
    R4/HD's IP address at UDP port 646.  The Targeted\n   Hello messages sent by R1/HC
    will have the \"R\" bit set in the Common\n   Hello Parameters TLV, requesting
    R4/HD to send Targeted Hello\n   messages back to R1/HC.  Since R4/HD has been
    configured to set up an\n   HC PW with R1/HD, R4/HD will do as requested and send
    LDP Targeted\n   Hello messages as unicast UDP packets to UDP port 646 of R1/HC's
    IP\n   address.\n   When R1/HC receives a Targeted Hello message from R4/HD, it
    may begin\n   establishing an LDP session to R4/HD.  It starts this by initiating
    a\n   TCP connection on port 646 to R4/HD's signaling IP address.  After\n   successful
    TCP connection establishment, R1/HC sends an LDP\n   Initialization message to
    R4/HD with the following characteristics:\n   When R1/HC receives a Targeted Hello
    message from R4/HD, it may begin\n   establishing an LDP session to R4/HD.  The
    procedure described in\n   Section 2.5.2 of [RFC3036] is used to determine which
    LSR is the\n   active LSR and which is the passive LSR.  Assume that R1/HC has
    the\n   numerically higher IP address and therefore takes the active role.\n   R1/HC
    starts by initiating a TCP connection on port 646 to R4/HD's\n   signaling IP
    address.  After successful TCP connection establishment,\n   R1/HC sends an LDP
    Initialization message to R4/HD with the following\n   characteristics:\n   o
    Common Session Parameters TLV:\n     - A bit = 0 (Downstream Unsolicited Mode)\n
    \    - D bit = 0 (Loop Detection Disabled)\n     - PVLim = 0 (required when D
    bit = 0)\n     - Receive LDP identifier (taken from R4/HD's Hello message)\n       >
    4 octets LSR identifier (typically an IP address with IPv4)\n       > 2 octet
    Label space identifier (typically 0)\n   o No Optional Parameters TLV\n   Following
    the LDP session initialization state machine of Section\n   2.5.4 of [RFC3036],
    R4/HD would send a similar Initialization message\n   to R1/HD.  The primary difference
    would be that R4/HD would use the\n   LDP identifier it received in R1/HC's Hello
    message(s) as the Receive\n   LDP identifier.  Assuming that all other fields
    in the Common Session\n   Parameters TLV were acceptable to both sides, R1/HC
    would send an LDP\n   Keepalive message to R4/HD, R4/HD would send a LDP Keepalive
    message\n   to R1/HC, and the LDP session would become operational.\n   At this
    point, either R1/HC or R4/HD may send LDP Label Mapping\n   messages to configure
    the PW.  The Label Mapping message sent by a\n   particular router advertises
    the label that should be used at the\n   bottom of the MPLS label stack for all
    packets sent to that router\n   and associated with the particular PW.  The Label
    Mapping message\n   sent from R1/HC to R4/HD would have the following characteristics:\n
    \  o FEC TLV\n     - FEC Element type 0x80 (PWid FEC Element, as defined in [RFC4447]\n
    \    - Control Parameter bit = 1 (Control Parameter present)\n     - PW type =
    0x001B (ECRTP [RFC3545])\n     - Group ID as chosen by R1/HC\n     - PW ID = the
    configured value for this PW, which must be the same\n       as that sent in the
    Label Mapping message by R4/HD\n     - Interface Parameter Sub-TLVs\n       >
    Interface MTU sub-TLV (Type 0x01)\n       > CRTP/ECRTP/IPHC HC over MPLS configuration
    sub-TLV (Type 0x0F)\n         + Type = 2 (From RFC 3544)\n         + Length =
    16\n         + TCP_SPACE = Don't Care (leave at suggested value = 15)\n         +
    NON_TCP_SPACE = 200 (configured on R1)\n         + F_MAX_PERIOD = Don't Care (leave
    at suggested value = 256)\n         + F_MAX_TIME = Don't Care (leave at suggested
    value = 5\n           seconds)\n         + MAX_HEADER = 168 (Suggested Value)\n
    \        + Enhanced RTP-Compression Suboption\n           & Type = 2\n           &
    Length = 2\n   o Label TLV - contains label selected by R1, Lr1\n   o No Optional
    Parameters\n   The Label Mapping message sent from R4/HD to R1/HC would be almost\n
    \  identical to the one sent in the opposite direction, with the\n   following
    exceptions:\n   o R4/HD could select a different Group ID\n   o The Value of NON_TCP_SPACE
    in the CRTP/ECRTP/IPHC HC over MPLS\n     configuration sub-TLV would be 255 instead
    of 200, as configured\n     on R4/HD\n   o R4/HD would choose its own value for
    the Label TLV, Lr4\n   As soon as either R1/HC or R4/HD has both transmitted and
    received\n   Label Mapping Messages with the same PW Type and PW ID, that HC\n
    \  endpoint considers the PW established.  R1/HC could send ECRTP\n   packets
    using the label it received in the Label Mapping Message from\n   R4/HD, Lr4,
    and could identify received ECRTP packets by the label it\n   had sent to R4/HD,
    Lr1.  And vice versa.\n   In this case, assume that R1/HC has an IPv4 RTP flow
    to send to R4/HD\n   that it wishes to compress using the ECRTP PW just set up.
    \ The RTP\n   flow is G.729 media with 20 bytes of payload in each RTP packet.
    \ In\n   this particular case, the IPv4 identifier changes by a small constant\n
    \  value between consecutive packets in the stream.  In the RTP layer of\n   the
    flow, the Contributing Source Identifiers count is 0.  R1/HC\n   decides to use
    8-bit Context Identifiers for the compressed flow.\n   Also, R1/HC determines
    that compression in this particular flow\n   should be able to recover from the
    loss of 2 consecutive packets\n   without requiring re-synchronization of the
    context (i.e., the \"N\"\n   value from [RFC3545] is 2).\n   The first 3 (N +
    1) packets of this flow would be sent as FULL_HEADER\n   packets.  The MPLS and
    PW headers at the beginning of these packets\n   would be formatted as follows:\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Label                  | Exp |S|       TTL     |\n   |                  XX
    \                  |  XX |0|        XX     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Label                  | Exp |S|       TTL     |\n   |                 Lr4
    \                  |  XX |1|        >0     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       |Pkt Typ|  Length   |Res|\n   |0 0 0 0|   2   |     62    |0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \              ^\n               |\n                -- 2 == FULL_HEADER\n        where
    XX signifies either\n        a. value determined by the MPLS routing layer\n        b.
    don't care\n   Immediately following the above header would come the FULL_HEADER\n
    \  packet as defined in [RFC3545], which basically consists of the\n   IP/UDP/RTP
    header, with the IP and UDP length field replaced by\n   values encoding the CID,
    sequence number, and \"generation\", as\n   defined in [RFC3545].  The length
    field value of 62 comprises:\n   o 2 bytes of HC control parameter (included in
    the above diagram)\n   o 20 bytes of the IP header portion of the RFC 3545 FULL_HEADER\n
    \  o 8 bytes of the UDP header portion of the RFC 3545 FULL_HEADER\n   o 12 bytes
    of the RTP header portion of the RFC 3545 FULL_HEADER\n   o 20 bytes of G.729
    payload\n   The next 3 RTP packets from this flow would be sent as\n   COMPRESSED_UDP_8,
    to establish the absolute and delta values of the\n   IPv4 identifier and RTP
    timestamp fields.  These packets would use\n   the same ECRTP CID as the previous
    3 FULL_HEADER packets.  The MPLS\n   and PW headers at the beginning of these
    packets would be formatted\n   as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Label                  | Exp |S|       TTL     |\n   |                  XX
    \                  |  XX |0|        XX     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Label                  | Exp |S|       TTL     |\n   |                 Lr4
    \                  |  XX |1|        >0     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       |Pkt Typ|  Length   |Res|\n   |0 0 0 0|   8   |     36    |0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \              ^\n               |\n                -- 8 == COMPRESSED_UDP_8\n
    \  There is no change in the MPLS label stack between the FULL_HEADER\n   packets
    and the COMPRESSED_UDP packets.  The HC control parameter\n   changes to reflect
    another ECRTP packet type following the control\n   parameter, and a change of
    packet length.  The length changes because\n   the new packet type more compactly
    encodes the headers.  The length\n   field value of 36 comprises:\n   o 2 bytes
    of HC control parameter (included in the above diagram)\n   o 1 byte of CID\n
    \  o 2 bytes of COMPRESSED_UDP fields that are not octet-aligned:\n     - 4 bits
    of COMPRESSED_UDP flags\n     - 4 bits of sequence number\n     - 5 bits of COMPRESSED
    UDP extension flags\n     - 3 bits MUST_BE_ZERO\n   o 2 bytes of UDP checksum
    or HDRCKSUM\n   o 1 byte of delta IPv4 ID\n   o 2 bytes of delta RTP timestamp
    (changes by 160 in this case,\n       differential encoding will encode as 2 bytes)\n
    \  o 2 bytes of absolute IPv4 ID\n   o 4 bytes of absolute RTP timestamp\n   o
    20 bytes of G.729 payload\n   After the context for the IPv4 ID and RTP timestamp
    is initialized.\n   Subsequent packets on this flow, at least until the end of
    the talk\n   spurt or until there is some other unexpected change in the\n   IP/UDP/RTP
    headers, may be sent as COMPRESSED_RTP_8 packets.  Again,\n   the same MPLS stack
    would be used for these packets, and the same\n   value of the CID would be used
    in this case as for the packets\n   described above.  The MPLS and PW headers
    at the beginning of these\n   packets would be formatted as follows:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Label                  | Exp |S|       TTL     |\n   |                  XX
    \                  |  XX |0|        XX     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Label                  | Exp |S|       TTL     |\n   |                 Lr4
    \                  |  XX |1|        >0     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       |Pkt Typ|  Length   |Res|\n   |0 0 0 0|   6   |     26    |0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \              ^\n               |\n                -- 6 == COMPRESSED_RTP_8\n
    \  The HC control parameter again changes to reflect another ECRTP\n   packet
    type following the control parameter, and shorter length\n   associated with an
    even more compact encoding of headers.  The length\n   field value of 26 comprises:\n
    \  o 2 bytes of HC control parameter (included in the above diagram)\n   o 1 byte
    of CID\n   o 1 byte COMPRESSED_UDP fields that are not octet-aligned:\n     -
    4 bits of COMPRESSED_RTP flags\n     - 4 bits of sequence number\n   o 2 bytes
    of UDP checksum or HDRCKSUM\n   o 20 bytes of G.729 payload\n   Additional flows
    in the same direction may be compressed using the\n   same basic encapsulation,
    including the same PW label.  The CID that\n   is part of the HC protocol is used
    to differentiate flows.  For\n   traffic in the opposite direction, the primary
    change would be the PW\n   label, Lr4, used in the example above would be replaced
    by the label\n   Lr1 that R1/HC provides to R4/HD.\n"
  title: 5.  HC Pseudowire Setup Example
- contents:
  - "6.  Security Considerations\n   MPLS PW security considerations in general are
    discussed in [RFC3985]\n   and [RFC4447], and those considerations also apply
    to this document.\n   This document specifies an encapsulation and not the protocols
    that\n   may be used to carry the encapsulated packets across the PSN, or the\n
    \  protocols being encapsulated.  Each such protocol may have its own\n   set
    of security issues, but those issues are not affected by the\n   encapsulations
    specified herein.\n   The security considerations of the supported HC protocols
    [RFC2507,\n   RFC2508, RFC3095, RFC3095bis, RFC3545] all apply to this document
    as\n   well.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgements\n   The authors appreciate valuable inputs and suggestions
    from Loa\n   Andersson, Scott Brim, Stewart Bryant, Spencer Dawkins, Adrian\n
    \  Farrel, Victoria Fineberg, Eric Gray, Allison Mankin, Luca Martini,\n   Colin
    Perkins, Kristofer Sandlund, Yaakov Stein, George Swallow, Mark\n   Townsley,
    Curtis Villamizar, and Magnus Westerlund.\n"
  title: 7.  Acknowledgements
- contents:
  - "8.  IANA Considerations\n   As discussed in Section 4.1, PW type values have
    been assigned by\n   IANA, as follows:\n   0x001A  ROHC Transport Header-compressed
    Packets    [RFC3095bis]\n   0x001B  ECRTP Transport Header-compressed Packets
    \  [RFC3545]\n   0x001C  IPHC Transport Header-compressed Packets    [RFC2507]\n
    \  0x001D  CRTP Transport Header-compressed Packets    [RFC2508]\n   Procedures
    for registering new PW type values are given in [RFC4446].\n   As discussed in
    Section 4.2, Pseudowire Interface Parameter Sub-TLV\n   type values have been
    specified by IANA, as follows:\n   Parameter  ID Length        Description                   Reference\n
    \  ---------  ---------------  ----------------------------  ---------\n   0x0D
    \      up to 256 bytes  ROHC over MPLS configuration  RFC 4901\n                               RFC
    3241\n   0x0F       up to 256 bytes  CRTP/ECRTP/IPHC HC over MPLS  RFC 4901\n
    \                              configuration RFC 3544\n   As discussed in Section
    4.3, IANA has defined a new registry, \"Header\n   Compression Over MPLS HC Control
    Parameter Packet Type\".  This is a\n   four-bit value.  Packet Types 0 through
    10 are defined in Section 4.3\n   of this document.  Packet Types 11 to 15 are
    to be assigned by IANA\n   using the \"Expert Review\" policy defined in [RFC2434].\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use
    in RFCs to Indicate\n                  Requirement Levels\", RFC 2119, March 1997.\n
    \  [RFC3031]      Rosen, E., Viswanathan, A., and R. Callon,\n                  \"Multiprotocol
    Label Switching Architecture\", RFC\n                  3031, January 2001.\n   [RFC3036]
    \     Andersson, L., Doolan, P., Feldman, N., Fredette, A.,\n                  and
    B. Thomas, \"LDP Specification\", RFC 3036, January\n                  2001.\n
    \  [RFC3241]      Bormann, C., \"Robust Header Compression (ROHC) over\n                  PPP\",
    RFC 3241, April 2002.\n   [RFC3544]      Engan, M., Casner, S., Bormann, C., and
    T. Koren, \"IP\n                  Header Compression over PPP\", RFC 3544, July
    2003.\n   [RFC4447]      Martini, L., Ed., Rosen, E., El-Aawar, N., Smith, T.,\n
    \                 and G. Heron, \"Pseudowire Setup and Maintenance Using\n                  the
    Label Distribution Protocol (LDP)\", RFC 4447,\n                  April 2006.\n"
  title: 9.  Normative References
- contents:
  - "10.  Informative References\n   [ECMP-AVOID]   Swallow, G., Bryant, S., and L.
    Andersson, \"Avoiding\n                  Equal Cost Multipath Treatment in MPLS
    Networks\", Work\n                  in Progress, February 2007.\n   [REORDER-EVAL]
    Knutsson, C., \"Evaluation and Implementation of Header\n                  Compression
    Algorithm ECRTP\", http://epubl.luth.se/\n                  1402-1617/2004/286/LTU-EX-04286-SE.pdf.\n
    \  [RFC1332]      McGregor, G., \"The PPP Internet Protocol Control\n                  Protocol
    (IPCP)\", RFC 1332, May 1992.\n   [RFC1661]      Simpson, W., Ed., \"The Point-to-Point
    Protocol (PPP)\",\n                  STD 51, RFC 1661, July 1994.\n   [RFC2434]
    \     Narten, T. and H. Alvestrand, \"Guidelines for Writing\n                  an
    IANA Considerations Section in RFCs\", BCP 26, RFC\n                  2434, October
    1998.\n   [RFC2472]      Haskin, D. and E. Allen, \"IP Version 6 over PPP\", RFC\n
    \                 2472, December 1998.\n   [RFC2507]      Degermark, M., Nordgren,
    B., and S. Pink, \"IP Header\n                  Compression\", RFC 2507, February
    1999.\n   [RFC2508]      Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP\n
    \                 Headers for Low-Speed Serial Links\", RFC 2508,\n                  February
    1999.\n   [RFC3095]      Bormann, C., et al., \"RObust Header Compression\n                  (ROHC):
    \ Framework and four profiles: RTP, UDP, ESP,\n                  and uncompressed\",
    RFC 3095, July 2001.\n   [RFC3095bis]   Jonsson, L-E. Pelletier, G., and K. Sandlund,
    \"The\n                  RObust Header Compression (ROHC) Framework\", Work in\n
    \                 Progress, November 2006.\n   [RFC3209]      Awduche, D., et
    al., \"RSVP-TE: Extensions to RSVP for\n                  LSP Tunnels,\" RFC 3209,
    December 2001.\n   [RFC3544]      Koren, T., et al., \"IP Header Compression over
    PPP,\"\n                  RFC 3544, July 2003.\n   [RFC3545]      Koren, T., et
    al., \"Compressing IP/UDP/RTP Headers on\n                  Links with High Delay,
    Packet Loss, and Reordering,\"\n                  RFC 3545, July 2003.\n   [RFC3246]
    \     Davie, B., et al., \"An Expedited Forwarding PHB (Per-\n                  Hop
    Behavior),\" RFC 3246, March 2002.\n   [RFC3270]      Le Faucheur, F., et al.,
    \"Multi-Protocol Label\n                  Switching (MPLS) Support of Differentiated
    Services,\"\n                  RFC 3270, May 2002.\n   [RFC3550]      Schulzrinne,
    H., et al., \"RTP: A Transport Protocol\n                  for Real-Time Applications,\"
    RFC 3550, July 2003.\n   [RFC3843]      Jonsson, L-E. and G. Pelletier, \"RObust
    Header\n                  Compression (ROHC): A Compression Profile for IP\",
    RFC\n                  3843, June 2004.\n   [RFC3985]      Bryant, S., Pate, P.,
    \"Pseudo Wire Emulation Edge-to-\n                  Edge (PWE3) Architecture,\"
    RFC 3985, March 2005.\n   [RFC4224]      Pelletier, G., et al., \"RObust Header
    Compression\n                  (ROHC): ROHC over Channels that can Reorder Packets,\"\n
    \                 RFC 4224, January 2006.\n   [RFC4247]      Ash, G., Goode, B.,
    Hand, J., \"Requirements for Header\n                  Compression over MPLS\",
    RFC 4247, November 2005.\n   [RFC4364]      Rosen, E., Rekhter, Y., \"BGP/MPLS
    IP Virtual Private\n                  Networks (VPN)s\", RFC 4364, February 2006.\n
    \  [RFC4385]      Bryant, S., et al., \"Pseudowire Emulation Edge-to-Edge\n                  (PWE3)
    Control Word for Use over an MPLS PSN,\" RFC\n                  4385, February
    2006.\n   [RFC4446]      Martini, L., et al., \"IANA Allocations for Pseudo Wire\n
    \                 Edge To Edge Emulation (PWE3),\" RFC 4446, April 2006.\n   [RFC4815]
    \     Jonsson, L-E., Sandlund, K., Pelletier, G., and P.\n                  Kremer,
    \"RObust Header Compression (ROHC): Corrections\n                  and Clarifications
    to RFC 3095\", RFC 4815, February\n                  2007.\n"
  title: 10.  Informative References
- contents:
  - "11.  Contributors\n   Besides the editors listed below, the following people
    contributed to\n   the document:\n   Bur Goode\n   AT&T\n   Phone: +1 203-341-8705\n
    \  EMail: bgoode@att.com\n   Lars-Erik Jonsson\n   Optand 737\n   SE-831 92 Ostersund,
    Sweden\n   Phone: +46 70 365 20 58\n   EMail: lars-erik@lejonsson.com\n   Raymond
    Zhang\n   Infonet Services Corporation\n   2160 E. Grand Ave. El Segundo, CA 90025
    USA\n   EMail: zhangr@bt.infonet.com\n"
  title: 11.  Contributors
- contents:
  - "Editors' Addresses\n   Jerry Ash\n   AT&T\n   Email: gash5107@yahoo.com\n   Jim
    Hand\n   AT&T\n   Room MT A2-1A03\n   200 Laurel Avenue\n   Middletown, NJ 07748,
    USA\n   Phone: +1 732-420-3017\n   EMail: jameshand@att.com\n   Andrew G. Malis\n
    \  Verizon Communications\n   40 Sylvan Road\n   Waltham, MA  02451 USA\n   EMail:
    andrew.g.malis@verizon.com\n"
  title: Editors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
