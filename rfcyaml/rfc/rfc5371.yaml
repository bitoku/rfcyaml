- contents:
  - '             RTP Payload Format for JPEG 2000 Video Streams

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This memo describes an RTP payload format for the ISO/IEC\n   International
    Standard 15444-1 | ITU-T Rec. T.800, better known as\n   JPEG 2000.  JPEG 2000
    features are considered in the design of this\n   payload format.  JPEG 2000 is
    a truly scalable compression technology\n   allowing applications to encode once
    and decode many different ways.\n   The JPEG 2000 video stream is formed by extending
    from a single image\n   to a series of JPEG 2000 images.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Conventions Used in This Document  . . . . . . . .
    . . . .  6\n   2.  JPEG 2000 Video Features . . . . . . . . . . . . . . . . .
    . .  6\n   3.  Payload Design . . . . . . . . . . . . . . . . . . . . . . . .
    \ 6\n   4.  Payload Format . . . . . . . . . . . . . . . . . . . . . . . .  7\n
    \    4.1.  RTP Fixed Header Usage . . . . . . . . . . . . . . . . . .  7\n     4.2.
    \ RTP Payload Header Format  . . . . . . . . . . . . . . . .  8\n   5.  RTP Packetization
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n   6.  Media Type Registration
    \ . . . . . . . . . . . . . . . . . . . 11\n   7.  SDP Parameters . . . . . .
    . . . . . . . . . . . . . . . . . . 14\n     7.1.  SDP Mapping  . . . . . . .
    . . . . . . . . . . . . . . . . 14\n     7.2.  Usage with the SDP Offer/Answer
    Model  . . . . . . . . . . 15\n       7.2.1.  Examples . . . . . . . . . . . .
    . . . . . . . . . . . 16\n       7.2.2.  Examples: Non-90kHz Timestamp  . . .
    . . . . . . . . . 16\n   8.  IANA Considerations  . . . . . . . . . . . . . .
    . . . . . . . 17\n   9.  Security Considerations  . . . . . . . . . . . . . .
    . . . . . 17\n   10. Congestion Control . . . . . . . . . . . . . . . . . . .
    . . . 18\n   11. References . . . . . . . . . . . . . . . . . . . . . . . . .
    . 19\n     11.1. Normative References . . . . . . . . . . . . . . . . . . . 19\n
    \    11.2. Informative References . . . . . . . . . . . . . . . . . . 19\n   Appendix
    A.  Informative Appendix  . . . . . . . . . . . . . . . . 21\n     A.1.  Recommended
    Practices  . . . . . . . . . . . . . . . . . . 21\n     A.2.  Sample Headers in
    Detail . . . . . . . . . . . . . . . . . 22\n       A.2.1.  Sample 1: Progressive
    Image with Single Tile, 3500\n               Bytes (i.e., thumbnail)  . . . .
    . . . . . . . . . . . 22\n       A.2.2.  Sample 2: Image with 4 Tiles . . . .
    . . . . . . . . . 24\n       A.2.3.  Sample 3: Packing Multiple Tiles in Single\n
    \              Payload, Fragmented Header . . . . . . . . . . . . . . 25\n       A.2.4.
    \ Sample 4: Interlace Image, Single Tile . . . . . . . . 27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies a payload format for JPEG 2000 video
    streams\n   over the Real-time Transport Protocol (RTP).  JPEG 2000 is an ISO/IEC\n
    \  International Standard and ITU-T Recommendation (ISO/IEC\n   International
    Standard 15444-1 | ITU-T Rec. T.800) developed for\n   next-generation, still-image
    compression.  JPEG stands for the Joint\n   Photographers Experts Group, an international
    group made of academia\n   and industry to develop image compression standards.
    \ JPEG 2000 basic\n   compression technology is defined in detail in ISO JPEG
    2000 Part 1:\n   Core Coding System [JPEG2000Pt_1], with motion defined in ISO
    JPEG\n   2000 Part 3: Motion JPEG 2000 [JPEG2000Pt_3].\n   Part 3 of the JPEG
    2000 standard defines Motion JPEG 2000\n   [JPEG2000Pt_3].  However, Motion JPEG
    2000 defines a file format, not\n   a transmission format for the network.  This
    document specifies a\n   transmission format for the network for a series of JPEG
    2000 images.\n   JPEG 2000 supports many powerful features [JPEG2000Pt_1]\n   [JPEG2000Pt_3]
    that are not supported in the current JPEG standard,\n   such as:\n   o  Higher
    compression efficiency than JPEG with less visual\n      distortion especially
    at extreme compression ratios.\n   o  A single codestream that offers both lossy
    and lossless\n      compression.\n   o  Better error resiliency than JPEG.\n   o
    \ Progressive transmission by pixel accuracy (Signal-to-Noise Ratio\n      (SNR)
    scalability) and resolution (resolution scalability).\n   o  Random codestream
    access and processing.\n   The JPEG 2000 algorithm is briefly explained.  Figure
    1 shows a block\n   diagram of the JPEG 2000 encoding method.\n                                                    +-----+\n
    \                                                   | ROI |\n                                                    +-----+\n
    \                                                      |\n                                                       V\n
    \                 +----------+   +----------+   +------------+\n                  |DC,
    comp. |   | Wavelet  |   |            |\n   Raw Image  ==> |transform-|==>|transform-|==>|Quantization|==+\n
    \                 |  ation   |   |  ation   |   |            |  |\n                  +----------+
    \  +----------+   +------------+  |\n                                                                |\n
    \                +-----------+   +----------+   +------------+  |\n                 |
    \          |   |          |   |            |  |\n    JPEG 2000 <==| Data      |<==|
    Rate     |<==| EBCOT      |<=+\n    codestream   | Ordering  |   | Control  |
    \  |            |\n                 +-----------+   +----------+   +------------+\n
    \            Figure 1: Block diagram of the JPEG 2000 encoder\n   The image is
    first transformed into wavelet coefficients.  The image\n   is sampled into various
    levels, vertically and horizontally, from\n   high frequencies (which contain
    sharp details) to low frequencies\n   (which contain smooth areas).  Quantization
    is performed on the\n   coefficients within each sub-band.\n   After quantization,
    code blocks are formed from within the precincts\n   within the tiles.  (Precincts
    are a finer separation than tiles, and\n   code blocks are the smallest separation
    of the image data.)  EBCOT\n   coding (Embedded Block Coding Optimized for Truncation)
    is performed\n   within each code block and arithmetically encoded by bit plane.
    \ Rate\n   control is performed to achieve the highest quality image for a\n   specified
    rate.\n   As a result, for a given tile, data units called JPEG 2000 packets\n
    \  are generated, which contain data from a specific layer, specific\n   component,
    specific resolution, or specific precinct, depending on\n   the data ordering.\n
    \  Finally, the JPEG 2000 packets are interleaved according to the\n   progression
    along four axes: layer, resolution, component, and\n   precinct.  A JPEG 2000
    header is added to become a fully compliant\n   JPEG 2000 codestream.\n   To decompress
    a JPEG 2000 codestream, one would follow the reverse\n   order of the encoding
    order, without the rate control.\n   It is outside the scope of this document
    to further describe in\n   detail this procedure.  Please refer to various JPEG
    2000 related\n   texts for further details [JPEG2000Pt_1].\n   Figure 2 shows
    a JPEG 2000 codestream in detail.  A JPEG 2000\n   codestream is structured from
    the main header, beginning with the SOC\n   (Start Of Codestream) marker, one
    or more tiles, and the EOC (End Of\n   Codestream) marker to indicate the end
    of the codestream.  Each tile\n   consists of a tile-part header that starts with
    the SOT (Start of\n   Tile) marker and ends with a SOD (Start of Data) marker,
    and\n   bitstream (a series of JPEG 2000 packets).\n           +--  +------------+\n
    \    Main  |    |    SOC     |  Required as the first marker\n     header|    +------------+\n
    \          |    |    main    |  Main header marker segments\n           +--  +------------+\n
    \          |    |    SOT     |  Required at the beginning of each\n     Tile-
    |    +------------+    tile-part header\n     part  |    |   T0,TP0   |  Tile
    0, tile-part 0 header marker\n     header|    +------------+    segments\n           |
    \   |    SOD     |  Required at the end of each tile-part\n           +--  +------------+
    \   header\n                | bitstream  |  Tile-part bitstream\n           +--
    \ +------------+\n           |    |    SOT     |\n     Tile- |    +------------+\n
    \    part  |    |   T1,TP0   |\n     header|    +------------+\n           |    |
    \   SOD     |\n           +--  +------------+\n                | bit stream |\n
    \               +------------+\n                      .\n                      .\n
    \                     .\n                +------------+\n                |    EOC
    \    |  Required as the last marker in the\n                +------------+  codestream\n
    \        Figure 2: Basic construction of the JPEG 2000 codestream\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in RFC 2119 [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  JPEG 2000 Video Features\n   JPEG 2000 video streams are formed as a continuous
    series of JPEG\n   2000 still images.  Previously described features of JPEG 2000
    may be\n   used effectively in streaming applications for a JPEG 2000 video.  A\n
    \  JPEG 2000 video stream has the following qualities:\n   o  At low bit rates,
    the SNR is improved dramatically over JPEG and\n      Motion JPEG.\n   o  This
    is a full intra-frame format -- each frame is independently\n      compressed
    -- and therefore has a low encoding and decoding delay.\n   o  JPEG 2000 has flexible
    and accurate rate control.\n   o  This is suitable for traffic control and congestion
    control during\n      network transmission.\n   o  JPEG 2000 can provide its own
    codestream error resilience markers\n      to aid in codestream recovery outside
    of this specification.\n"
  title: 2.  JPEG 2000 Video Features
- contents:
  - "3.  Payload Design\n   To design a payload format that maximizes JPEG 2000 features,
    the\n   following are taken into consideration:\n   o  Provisions for packet loss:\n
    \     On the Internet, 5% packet loss is common and this percentage may\n      vary
    up to 20% or more.  To split JPEG 2000 video streams into RTP\n      packets,
    efficient packetization of the codestream is required to\n      minimize problems
    in decoding due to missing packets.  If the main\n      header is lost, the image
    cannot be decoded.\n   o  JPEG 2000 Scalability\n      JPEG 2000 has powerful
    scalability features and markers in the\n      payload header to indicate the
    specific meaning of the payload,\n      such as:\n      *  Special markers for
    the headers, fragments of headers, etc.\n      *  Tile numbering for association
    of packets.\n      *  Since this is primarily for video applications, special
    markers\n         are used to indicate format (i.e., interlace odd/even fields).\n
    \     *  Priority importance of the packet using methods described in\n         RFC
    5372 [RFC5372].\n      *  Main header recovery using methods described in RFC
    5372\n         [RFC5372].\n      Additional usage of the payload header is described
    in RFC 5372\n      [RFC5372].\n"
  title: 3.  Payload Design
- contents:
  - '4.  Payload Format

    '
  - contents:
    - "4.1.  RTP Fixed Header Usage\n   For each RTP packet, the RTP fixed header
      is followed by the JPEG\n   2000 RTP payload header, which is followed by the
      payload, a piece of\n   a JPEG 2000 codestream, which is usually a JPEG 2000
      packet.\n   The RTP header fields that have a meaning specific to a JPEG 2000\n
      \  video stream are described as follows:\n   Marker bit (M):  The marker bit
      of the RTP fixed header MUST be set\n      to 1 for the last RTP packet of a
      video frame; otherwise, it MUST\n      be 0.  When transmission is performed
      by multiple RTP sessions,\n      this bit is 1 in the last packet of the frame
      in each session.\n   Payload type (PT):  The payload type is dynamically assigned
      by means\n      outside the scope of this document.  A payload type in the dynamic\n
      \     range shall be chosen by means of an out-of-band signaling\n      protocol
      (i.e., Real Time Streaming Protocol (RTSP), SIP, etc.).\n   Timestamp:  Timestamp
      indicates the presentation time of the frame\n      contained in the RTP packet.
      \ The same timestamp value MUST appear\n      in each RTP packet carrying a
      fragment of a given frame.  When a\n      JPEG 2000 image is in interlace format,
      the odd field and the\n      corresponding even field MUST have the same timestamp
      value.\n      Following the RTP specification [RFC3550], the initial value of\n
      \     the timestamp should be randomly chosen.\n      As for the clock rate,
      senders and receivers MUST support the\n      90kHz RTP timestamp rate, and
      MAY support other rates.  RTP\n      timestamp rates below 1000 Hz SHOULD NOT
      be used because they will\n      result in insufficient resolution for RTP Control
      Protocol (RTCP)\n      measurements based on the RTP timestamp, such as the
      interarrival\n      jitter.  The clock rate MUST be negotiated at the start
      of the\n      session.  When using the Session Description Protocol (SDP), it\n
      \     MUST be expressed using the \"rtpmap\" attributes.  If a non-90kHz\n      clock
      rate is to be used, it is RECOMMENDED to present not only a\n      preferable
      clock rate but also 90kHz clock rate with a different\n      RTP payload type.\n"
    title: 4.1.  RTP Fixed Header Usage
  - contents:
    - "4.2.  RTP Payload Header Format\n   The RTP payload header format for JPEG
      2000 video stream is as\n   follows:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |tp |MHF|mh_id|T|     priority  |           tile number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |reserved       |             fragment offset                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \            Figure 3: RTP payload header format for JPEG 2000\n   tp (type):
      2 bits\n      This field indicates how a JPEG 2000 image is scanned (progressive\n
      \     or interlace).\n         0: The payload is progressively scanned.\n         1:
      The payload is part of an odd field of an interlaced video\n         frame.
      \ The height specified in the JPEG 2000 main header is\n         half of the
      height of the entire displayed image.  In a\n         receiver, an odd field
      should be de-interlaced with the even\n         field following it so that lines
      from each image are displayed\n         alternately.\n         2: The payload
      is part of an even field of an interlaced video\n         signal.\n   MHF (Main
      Header Flag): 2 bits\n      MHF indicates whether a main header or packet of
      a main header is\n      in the RTP packet.\n       If there is no header, MHF
      has a value of 0.  If there is just a\n       part of a fragmented header, MHF
      has a value of 1.  If there is\n      the last part of a fragmented header,
      MHF has value of 2.  If the\n             whole header is in the packet, MHF
      has a value of 3.\n             +-----------+----------------------------------+\n
      \            | MHF Value | Description                      |\n             +-----------+----------------------------------+\n
      \            |     0     | no main header in the payload    |\n             |
      \    1     | piece of fragmented header       |\n             |     2     |
      last part of a fragmented header |\n             |     3     | a whole main
      header              |\n             +-----------+----------------------------------+\n
      \                         Table 1: MHF Usage Values\n   mh_id (Main Header Identification):
      3 bits\n      Main header identification value.  This is used for JPEG 2000
      main\n      header recovery.\n      For implementations following only this
      specification, the sender\n      SHOULD set this value to 0 and the receiver
      SHOULD ignore this\n      field on processing.\n   T (Tile field invalidation
      flag): 1 bit\n      The T bit indicates whether the tile number field is valid
      or\n      invalid.  A sender MUST set the T bit to 1 when invalid and 0 when\n
      \     valid.\n      There are two cases where the tile number field is invalid:\n
      \     *  When an RTP packet holds only the main header.  A sender cannot\n         set
      any number in the tile number field, as no JPEG 2000 tile-\n         part bitstream
      is included in the RTP packet.\n      *  Multiple tile-parts are packed together
      in a single payload.\n         If there are multiple tiles packed into a single
      payload, there\n         is no meaning to assign a number to the tile number
      field.\n   priority: 8 bits\n      The priority field indicates the importance
      of the JPEG 2000\n      packet included in the payload.  Typically, a higher
      priority\n      value is set in the packets containing JPEG 2000 packets that\n
      \     contain the lower sub-bands.\n      For implementations following only
      this specification, the sender\n      SHOULD set this value to 255 and the receiver
      SHOULD ignore this\n      field on processing.\n   tile number: 16 bits\n      This
      field shows the tile number of the payload.  This field is\n      only valid
      when the T bit is 0.  If the T bit is set to 1, the\n      receiver MUST ignore
      this field.\n   R (Reserved): 8 bits\n      This bit is reserved for future
      use.  Senders MUST set this to 0.\n      Receivers MUST ignore this field.\n
      \  fragment offset: 24 bits\n      This value MUST be set to the byte offset
      of the current payload\n      in relation to the very beginning of each JPEG
      2000 codestream\n      (JPEG 2000 frame).\n      Byte offsets are calculated
      from the start of each JPEG 2000\n      codestream up to the current position
      where the current payload\n      would fit into the complete JPEG 2000 codestream.\n
      \     To perform scalable video delivery by using multiple RTP sessions,\n      the
      offset value from the first byte of the same frame is set for\n      fragment
      offset.  It is then possible to deliver layered video\n      using multiple
      RTP sessions; the fragment offset might not start\n      from 0 in some RTP
      sessions even if the packet is the first one\n      received in the RTP session.\n"
    title: 4.2.  RTP Payload Header Format
  title: 4.  Payload Format
- contents:
  - "5.  RTP Packetization\n   The sender must packetize the JPEG 2000 appropriately
    according to\n   initial media type parameters and/or details from SDP offer/answer\n
    \  parameters.\n   A \"packetization unit\" is defined as either a JPEG 2000 main
    header,\n   a tile-part header, or a JPEG 2000 packet.\n   First, a sender divides
    the JPEG 2000 codestream into packetization\n   units by parsing the codestream
    or by getting information from the\n   encoder, and packs the packetization units
    into RTP packets.  A\n   sender can put an arbitrary number of packetization units
    into an RTP\n   packet, but it MUST preserve the codestream order.  An example
    of\n   this kind of RTP packet format is shown in Figure 4:\n   +------+-------+---------------+---------------+\n
    \  |RTP   |payload| packetization | packetization |\n   |header|header | unit
    \         | unit          |\n   +------+-------+---------------+---------------+\n
    \         Figure 4: An example with multiple packetization units\n   If a packetization
    unit with headers (IP header, RTP header, and\n   payload header) is larger than
    the MTU size, it MAY be fragmented.\n   To pack a fragmented packetization unit,
    the fragmented unit MUST NOT\n   be packed with the succeeding packetization unit
    within the same RTP\n   packet.  An example of this kind of RTP packet format
    is shown in\n   Figure 5:\n   +------+-------+-------------------------------------------------+\n
    \  |RTP   |payload| packetization unit fragment                     |\n   |header|header
    |                                                 |\n   +------+-------+-------------------------------------------------+\n
    \  +------+-------+-------------------------------------------------+\n   |RTP
    \  |payload| packetization unit fragment                     |\n   |header|header
    |                                                 |\n   +------+-------+-------------------------------------------------+\n
    \             .\n              .\n              .\n   +------+-------+------------------------------------+\n
    \  |RTP   |payload| end of packetization unit fragment |\n   |header|header |
    \                                   |\n   +------+-------+------------------------------------+\n
    \        Figure 5: An example with a fragmented packetization unit\n"
  title: 5.  RTP Packetization
- contents:
  - "6.  Media Type Registration\n   This registration uses the template defined in
    [RFC4288] and follows\n   [RFC4855].\n   Type name: video\n   Subtype name: jpeg2000\n
    \  Required parameters:\n      rate:  The RTP timestamp clock rate.  The default
    rate is 90000,\n         but other rates MAY be specified.  Rates below 1000 Hz
    SHOULD\n         NOT be used.\n      sampling:  A list of values specifying the
    color space of the\n         payload data.\n         Acceptable values:\n            RGB:
    \ standard Red, Green, Blue color space.\n            BGR:  standard Blue, Green,
    Red color space.\n            RGBA:  standard Red, Green, Blue, Alpha color space.\n
    \           BGRA:  standard Blue, Green, Red, Alpha color space.\n            YCbCr-4:4:4:
    \ standard YCbCr color space; no subsampling.\n            YCbCr-4:2:2:  standard
    YCbCr color space; Cb and Cr are\n               subsampled horizontally by 1/2.\n
    \           YCbCr-4:2:0:  standard YCbCr color space; Cb and Cr are\n               subsampled
    horizontally and vertically by 1/2.\n            YCbCr-4:1:1:  standard YCbCr
    color space; Cb and Cr are\n               subsampled vertically by 1/4.\n            GRAYSCALE:
    \ basically, a single component image of just\n               multilevels of grey.\n
    \           EXTENSION VALUE:  Additional color samplings can be\n               registered
    with the current listing of registered color\n               samplings at: Color
    Sampling Registration Authority.\n               Please refer to RTP Format for
    Uncompressed Video\n               [RFC4175].\n   Optional parameters:\n      interlace:
    \ Interlace scanning.  If the payload is in interlace\n         format, the acceptable
    value is \"1\"; otherwise, the value\n         should be \"0\".  Each complete
    image forms, vertically, half the\n         display.  The tp value MUST properly
    specify the field the\n         image represents: odd(tp=1) or even(tp=2).  If
    this option is\n         not present, the payload MUST be in progressive format
    and the\n         tp MUST be set to 0.\n      width:  A parameter describing the
    maximum width of the video\n         stream.  This parameter MUST appear when
    height is present.\n         Acceptable values: -- an integer value between 0
    --\n         4,294,967,295.\n      height:  A parameter describing the maximum
    height of the video\n         stream.  This parameter MUST appear when width is
    present.\n         Acceptable values: -- an integer value between 0 --\n         4,294,967,295.\n
    \  The receiver MUST ignore any unspecified parameters.\n   Encoding considerations:\n
    \     This media type is framed and binary, see Section 4.8 of\n      [RFC4288].\n
    \  Security considerations: See Section 9 of this document.\n   Interoperability
    considerations:\n      The JPEG 2000 video stream is a sequence of JPEG 2000 still\n
    \     images.  An implementation compliant with [JPEG2000Pt_1] can\n      decode
    and attempt to display the encoded JPEG 2000 video stream.\n   Published specification:
    ISO/IEC 15444-1 | ITU-T Rec. T.800\n   Applications that use this media type:\n
    \     video streaming and communication\n   Person and email address to contact
    for further information:\n      Eisaburo Itakura, Satoshi Futemma, Andrew Leung\n
    \     Email: itakura@sm.sony.co.jp, satosi-f@sm.sony.co.jp,\n      andrew@ualberta.net\n
    \  Intended usage: COMMON\n   Restrictions on Usage:\n      This media type depends
    on RTP framing, and hence is only defined\n      for the transfer via RTP [RFC3550].
    \ Transport within other\n      framing protocols is not defined at the time.\n
    \  Author/Change Controller:\n      Author:\n         Eisaburo Itakura, Satoshi
    Futemma, Andrew Leung\n         Email: itakura@sm.sony.co.jp, satosi-f@sm.sony.co.jp,\n
    \        andrew@ualberta.net\n      Change controller:\n         IETF Audio/Video
    Transport Working Group delegated from the\n         IESG.\n"
  title: 6.  Media Type Registration
- contents:
  - '7.  SDP Parameters

    '
  - contents:
    - "7.1.  SDP Mapping\n   The media type video/jpeg2000 string is mapped to fields
      in the\n   Session Description Protocol (SDP) [RFC4566] as follows:\n   o  The
      media name in the \"m=\" line of SDP MUST be video.\n   o  The encoding name
      in the \"a=rtpmap\" line of SDP MUST be jpeg2000\n      (the subtype).\n   o
      \ The clock rate in the \"a=rtpmap\" line is set according to the\n      \"rate\"
      parameter.  Senders that wish to use a non-90kHz rate\n      SHOULD also offer
      the same stream using a 90kHz timestamp rate\n      with a different RTP payload
      type, allowing graceful fallback to\n      90kHz for compatibility.\n   o  The
      REQUIRED parameter, \"sampling\", MUST be included in the\n      \"a=fmtp\"
      line of SDP.\n   o  The OPTIONAL parameters, if presented, MUST be included
      in the\n      \"a=fmtp\" line of SDP.\n   These parameters are expressed as
      a media type string, in the form of\n   a semicolon separated list of parameter=value
      pairs.\n   Therefore, an example of media representation in SDP using typical\n
      \  parameters is as follows:\n      m=video 49170/2 RTP/AVP 98\n      a=rtpmap:98
      jpeg2000/90000\n      a=fmtp:98 sampling=YCbCr-4:2:0;width=128;height=128\n
      \  An example for using non-90kHz timestamp is as follows:\n      m=video 49170/2
      RTP/AVP 98 99\n      a=rtpmap:98 jpeg2000/27000000\n      a=rtpmap:99 jpeg2000/90000\n
      \     a=fmtp:98 sampling=YCbCr-4:2:0;width=128;height=128\n      a=fmtp:99 sampling=YCbCr-4:2:0;width=128;height=128\n"
    title: 7.1.  SDP Mapping
  - contents:
    - "7.2.  Usage with the SDP Offer/Answer Model\n   When offering JPEG 2000 over
      RTP using SDP in an Offer/Answer model\n   [RFC3264], the following rules and
      limitations apply:\n   o  All parameters MUST have an acceptable value for the
      parameter.\n   o  All parameters MUST correspond to the parameters of the payload.\n
      \  o  The parameter \"sampling\" with an acceptable answer MUST appear in\n
      \     the offer and in the answer if accepted by the receiver.  The\n      receiver
      SHOULD do its best to handle the received codestream in\n      the color space
      offered.  If the receiver cannot handle the\n      offered color space for whatever
      reason, it should reply with its\n      preferred color space in the answer
      and gracefully end the\n      session.  Senders do not need to conform to the
      color space in the\n      answer, but they should take note that the session
      ended due to\n      color sampling issues.\n   o  For optional parameter \"interlace\",
      if this option is used, it\n      MUST appear in the offer and, if accepted,
      it SHOULD appear in the\n      answer.  Receivers should do their best to handle
      interlace or\n      progressive codestreams but, if for some reason, receivers
      cannot\n      accommodate, receivers should reply with preferred settings in
      the\n      answer, then gracefully end the session.  Senders do not need to\n
      \     adjust settings upon this answer, but they should take note that\n      the
      session ended due to interlace or progressive issues.\n   o  For optional parameters
      \"width\" and \"height\", the following\n      applies:\n      *  if \"width\"
      appears in the offer or answer, \"height\" MUST be\n         present.\n      *
      \ if \"height\" appears in the offer or answer, \"width\" MUST be\n         present.\n
      \  o  Width and height should appear in the offer as the maximum\n      dimensions
      the sender can offer.  In the answer, it SHOULD\n      represent the maximum
      the receiver can accommodate.  If there is a\n      difference between the offer
      and answer, the sender should re-\n      offer a new width and height and appropriately
      scale down the\n      codestream for the receiver.\n   o  In a multicast environment,
      [RFC1112] receivers should do their\n      best to conform to parameters in
      the offer from the sender.\n      Senders should use recommended settings in
      multicast environments\n      and take note of answers.  For width and height,
      the sender should\n      accommodate to the lowest values it receives from all
      answers.\n   o  Any unknown options in the offer should be ignored and deleted\n
      \     from the answer.\n"
    - contents:
      - "7.2.1.  Examples\n   Example offer/answer exchanges are provided.\n   Alice
        offers YCbCr 4:2:2 color space, interlace image with 720-pixel\n   width and
        480-pixel height as below:\n      v=0\n      o=alice 2890844526 2890844526
        IN IP4 host.example\n      s=\n      c=IN IP4 host.example\n      t=0 0\n
        \     m=video 49170 RTP/AVP 98\n      a=rtpmap:98 jpeg2000/90000\n      a=fmtp:98
        sampling=YCbCr-4:2:2; interlace=1; width=720;height=480\n   Bob accepts YCbCr-4:2:2
        color space, interlace image and replies:\n      v=0\n      o=bob 2890844730
        2890844731 IN IP4 host.example\n      s=\n      c=IN IP4 host.example\n      t=0
        0\n      m=video 49920 RTP/AVP 98\n      a=rtpmap:98 jpeg2000/90000\n      a=fmtp:98
        sampling=YCbCr-4:2:2; interlace=1; width=720;height=480\n"
      title: 7.2.1.  Examples
    - contents:
      - "7.2.2.  Examples: Non-90kHz Timestamp\n   Example offer/answer exchanges,
        where an offerer wishes to use non-\n   90kHz timestamp, are provided.\n   Alice
        offers an RTP payload type with 27MHz clock rate as well as\n   with 90kHz
        clock rate, and each payload type includes: YCbCr 4:2:2\n   color space, interlace
        image, 720-pixel width and 480-pixel height.\n   She puts 27MHz clock rate
        attributes prior to 90kHz because she wants\n   to use 27 MHz rather than
        90kHz.\n      v=0\n      o=alice 2890844526 2890844526 IN IP4 host.example\n
        \     s=\n      c=IN IP4 host.example\n      t=0 0\n      m=video 49170 RTP/AVP
        98 99\n      a=rtpmap:98 jpeg2000/27000000\n      a=rtpmap:99 jpeg2000/90000\n
        \     a=fmtp:98 sampling=YCbCr-4:2:2; interlace=1; width=720;height=480\n
        \     a=fmtp:99 sampling=YCbCr-4:2:2; interlace=1; width=720;height=480\n
        \  If Bob can accept 27MHz clock rate, he replies as below:\n      v=0\n      o=bob
        2890844730 2890844731 IN IP4 host.example\n      s=\n      c=IN IP4 host.example\n
        \     t=0 0\n      m=video 49920 RTP/AVP 98\n      a=rtpmap:98 jpeg2000/27000000\n
        \     a=fmtp:98 sampling=YCbCr-4:2:2; interlace=1; width=720;height=480\n
        \  If Bob doesn't accept 27MHz clock rate, he replies as below:\n      v=0\n
        \     o=bob 2890844730 2890844731 IN IP4 host.example\n      s=\n      c=IN
        IP4 host.example\n      t=0 0\n      m=video 49920 RTP/AVP 99\n      a=rtpmap:99
        jpeg2000/90000\n      a=fmtp:99 sampling=YCbCr-4:2:2; interlace=1; width=720;height=480\n"
      title: '7.2.2.  Examples: Non-90kHz Timestamp'
    title: 7.2.  Usage with the SDP Offer/Answer Model
  title: 7.  SDP Parameters
- contents:
  - "8.  IANA Considerations\n   A new media subtype (video/jpeg2000) has been registered
    by IANA.\n   For details, see Section 6 of this document.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [RFC3550], and in any applicable RTP profile.  The
    main\n   security considerations for the RTP packet carrying the RTP payload\n
    \  format defined within this memo are confidentiality, integrity, and\n   source
    authenticity.  Confidentiality is achieved by encryption of\n   the RTP payload.
    \ Integrity of the RTP packets is through the use of\n   suitable cryptographic
    integrity protection mechanism.  A\n   cryptographic system may also allow the
    authentication of the source\n   of the payload.  A suitable security mechanism
    for this RTP payload\n   format should provide confidentiality, integrity protection,
    and at\n   least a source authentication method capable of determining whether\n
    \  or not an RTP packet is from a member of the RTP session.\n   Note that the
    appropriate mechanism to provide security to RTP and\n   payloads following this
    memo may vary.  It is dependent on the\n   application, the transport, and the
    signaling protocol employed.\n   Therefore, a single mechanism is not sufficient,
    although if\n   suitable, the usage of SRTP [RFC3711] is recommended.  Other\n
    \  mechanism that may be used are IPsec [RFC4301] and Transport Layer\n   Security
    (TLS) [RFC5246] (RTP over TCP), but other alternatives may\n   also exist.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Congestion Control\n   If Quality of Service (QoS) enhanced service is used,
    RTP receivers\n   SHOULD monitor packet loss to ensure that the service that was\n
    \  requested is actually being delivered.  If it is not, then they\n   SHOULD
    assume that they are receiving best-effort service and behave\n   accordingly.\n
    \  If best-effort service is being used, users of this payload format\n   MUST
    monitor packet loss to ensure that the packet loss rate is\n   within acceptable
    parameters.  Packet loss is considered acceptable\n   if a TCP flow across the
    same network path, experiencing the same\n   network conditions, would achieve
    an average throughput, measured on\n   a reasonable timescale, that is not less
    than the RTP flow is\n   achieving.  This condition can be satisfied by implementing\n
    \  congestion control mechanisms to adapt the transmission rate (or the\n   number
    of layers subscribed for a layered multicast session), or by\n   arranging for
    a receiver to leave the session if the loss rate is\n   unacceptably high.\n"
  title: 10.  Congestion Control
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [JPEG2000Pt_1]  ISO/IEC JTC1/SC29, ISO/IEC
      15444-1 | ITU-T Rec.\n                   T.800, \"Information Technology - JPEG
      2000 Image\n                   Coding System - Part 1: Core Coding System\",\n
      \                  December 2000.\n   [RFC2119]       Bradner, S., \"Key words
      for use in RFCs to Indicate\n                   Requirement Levels\", BCP 14,
      RFC 2119, March 1997.\n   [RFC3550]       Schulzrinne, H., Casner, S., Frederick,
      R., and V.\n                   Jacobson, \"RTP: A Transport Protocol for Real-Time\n
      \                  Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3711]
      \      Baugher, M., McGrew, D., Naslund, M., Carrara, E.,\n                   and
      K. Norrman, \"The Secure Real-time Transport\n                   Protocol (SRTP)\",
      RFC 3711, March 2004.\n   [RFC4288]       Freed, N. and J. Klensin, \"Media
      Type Specifications\n                   and Registration Procedures\", BCP 13,
      RFC 4288,\n                   December 2005.\n   [RFC4855]       Casner, S.,
      \"Media Type Registration of RTP Payload\n                   Formats\", RFC
      4855, February 2007.\n   [RFC4566]       Handley, M., Jacobson, V., and C. Perkins,
      \"SDP:\n                   Session Description Protocol\", RFC 4566, July 2006.\n
      \  [RFC3264]       Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer\n                   Model
      with Session Description Protocol (SDP)\",\n                   RFC 3264, June
      2002.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [JPEG2000Pt_3]  ISO/IEC JTC1/SC29, ISO/IEC
      15444-1 | ITU-T Rec.\n                   T.800, \"Information Technology - JPEG
      2000 Image\n                   Coding System -  Part 3: Motion JPEG 2000\",\n
      \                  July 2002.\n   [RFC5372]       Leung, A., Futemma, S., and
      E. Itakura, \"Payload\n                   Format for JPEG 2000 Video: Extensions
      for\n                   Scalability and Main  Header Recovery\", RFC 5372,\n
      \                  October 2008.\n   [RFC4301]       Kent, S. and K. Seo, \"Security
      Architecture for the\n                   Internet Protocol\", RFC 4301, December
      2005.\n   [RFC5246]       Dierks, T. and E. Rescorla, \"The Transport Layer\n
      \                  Security (TLS) Protocol Version 1.2\", RFC 5246,\n                   August
      2008.\n   [RFC4175]       Gharai, L. and C. Perkins, \"RTP Payload Format for\n
      \                  Uncompressed Video\", RFC 4175, September 2005.\n   [RFC1112]
      \      Deering, S., \"Host extensions for IP multicasting\",\n                   STD
      5, RFC 1112, August 1989.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - 'Appendix A.  Informative Appendix

    '
  - contents:
    - "A.1.  Recommended Practices\n   As the JPEG 2000 coding standard is highly
      flexible, many different\n   but compliant data streams may be produced and
      still be compliant\n   JPEG 2000 codestreams.\n   The following is a set of
      recommendations set forth from our\n   experience in developing JPEG 2000 and
      this payload specification.\n   Implementations of this standard must handle
      all possibilities\n   mentioned in this specification.  The following is a listing
      of items\n   an implementation may optimize.\n   Error Resilience Markers:  The
      use of error resilience markers in the\n      JPEG 2000 data stream is highly
      recommended in all situations.\n      Error recovery with these markers is helpful
      to the decoder and\n      saves external resources (e.g., markers such as RESET,
      RESTART,\n      and ERTERM).\n   YCbCr Color Space:  The YCbCr color space provides
      the greatest\n      amount of compression in color with respect to the human
      visual\n      system.  When used with JPEG 2000, this color space can provide\n
      \     excellent visual results at low bit rates.\n   Progression Ordering:  JPEG
      2000 offers many different ways to order\n      the final code stream to optimize
      the transfer with the\n      presentation.  We have found that the most useful
      codestream\n      ordering is layer progression and resolution progression ordering.\n
      \  Tiling and Packets:  JPEG 2000 packets are formed regardless of the\n      encoding
      method.  The encoder has little control over the size of\n      these JPEG 2000
      packets as they may be large or small.\n      Tiling splits the image into smaller
      areas and each is encoded\n      separately.  With tiles, the JPEG 2000 packet
      sizes are also\n      reduced.  When using tiling, almost all JPEG 2000 packet
      sizes are\n      an acceptable size for transmission (i.e., smaller than the
      MTU\n      size of most networks).\n   Sender Processing:  There are no limitations
      as to how the sender\n      should pack the payload.  In general, the sender
      should pack\n      headers separately from the rest of the codestream to make
      header\n      recovery simple.  Payloads should generally begin with a Start
      of\n      Packet (SOP) marker and end with an End of Packet Header (EPH)\n      marker
      for easier decoder processing.\n"
    title: A.1.  Recommended Practices
  - contents:
    - "A.2.  Sample Headers in Detail\n   This section has various sample headers
      in various configurations for\n   reference.\n   For reference, the payload
      header is as follows:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |tp |MHF|mh_id|T|     priority  |           tile number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |reserved       |             fragment offset                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                   Figure 6: JPEG 2000 Payload Header\n"
    - contents:
      - "A.2.1.  Sample 1: Progressive Image with Single Tile, 3500 Bytes (i.e.,\n
        \       thumbnail)\n   First Packet: This packet will have the whole main
        header 210 bytes\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 3 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF4F FF51 002F 000 ....                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 7: Header Sample 1-1 (First Packet)\n   Second Packet:
        This packet will have a tile header and the first tile\n   part LLband 1500
        bytes\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 3 |  0  |0|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0000 0000 2DB3 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 8: Header Sample 1-2 (Second Packet)\n   Third Packet:
        This packet will have the next part in the tile, no\n   tile header 1500 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     1710                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |E841 4526 4556 9850 C2EA ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 9: Header Sample 1-3 (Third Packet)\n   Fourth Packet:
        Last packet for the image 290 bytes\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     3210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |A55D 8B73 3B25 25C7 B9EB ...                          2FBE B153|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 10: Header Sample 1-4 (4th Packet)\n"
      title: 'A.2.1.  Sample 1: Progressive Image with Single Tile, 3500 Bytes (i.e.,'
    - contents:
      - "A.2.2.  Sample 2: Image with 4 Tiles\n   First Packet: This packet will have
        the whole main header. 210 bytes\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 3 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF4F FF51 002F 000 ...                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 11: Header Sample 2-1 (First Packet)\n   Second Packet:
        This packet will have a first tile part (tile 0) 1400\n   bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0000 0000 0578 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \              Figure 12: Header Sample 2-2 (Second Packet)\n   Third Packet:
        This packet will have a second tile part (tile 1) 1423\n   bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               1               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     1610                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0001 0000 058F 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 13: Header Sample 2-3 (Third Packet)\n   Fourth Packet:
        This packet will have a third tile part (tile 2) 1355\n   bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               2               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     3033                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0002 0000 054B 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 14: Header Sample 2-4 (4th Packet)\n   Fifth Packet:
        This packet will have a fourth tile part (tile 3) 1290\n   bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               3               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     4388                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0003 0000 050A 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 15: Header Sample 2-5 (5th Packet)\n"
      title: 'A.2.2.  Sample 2: Image with 4 Tiles'
    - contents:
      - "A.2.3.  Sample 3: Packing Multiple Tiles in Single Payload, Fragmented\n
        \       Header\n   First Packet: This packet will have the first part of the
        main header\n   110 bytes\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 1 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF4F FF51 002F 000 ...                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 16: Header Sample 3-1 (First Packet)\n   Second Packet:
        This packet has the second part of the header 1400\n   bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 2 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                      110                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF64 00FF ...                                                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \              Figure 17: Header Sample 3-2 (Second Packet)\n   Third Packet:
        This packet has two tiles, tile 0 and tile 1 1400 bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     1510                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0000 0000 02BC 0001 FF93 ...                         |\n   //
        \                                                            //\n   |FF90
        000A 0001 0000 02BC 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 18: Header Sample 3-3 (Third Packet)\n   Fourth Packet:
        This packet has one tile, tile 2 1395 bytes\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 0 | 0 |  0  |0|      255      |               2               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     2910                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0002 0000 0573 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 19: Header Sample 3-4 (4th Packet)\n"
      title: 'A.2.3.  Sample 3: Packing Multiple Tiles in Single Payload, Fragmented'
    - contents:
      - "A.2.4.  Sample 4: Interlace Image, Single Tile\n   First packet: This packet
        will have the whole main header for the odd\n   field 210 bytes\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 1 | 3 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF4F FF51 002F 000 ...                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 20: Header Sample 4-1 (First Packet)\n   Second packet:
        This packet will have the first part of the odd\n   field's tile 1400 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 1 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0000 0000 0578  0001 FF93 ...                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \              Figure 21: Header Sample 4-2 (Second Packet)\n   Third packet:
        This packet will have the second part of the odd\n   field's tile 1400 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 1 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     1610                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |7F04 E708 27D9 D11D 22CB ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 22: Header Sample 4-3 (Third Packet)\n   Fourth packet:
        This packet will have the third part of the odd\n   field's tile 1300 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 1 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     3010                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |98BD EC9B 2826 DC62 D4AB ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 23: Header Sample 4-4 (4th Packet)\n   Fifth packet:
        This packet will have the whole main header for the\n   even field 210 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 2 | 3 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF4F FF51 002F 000 ...                                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 24: Header Sample 4-5 (5th Packet)\n   Sixth packet:
        This packet will have the first part of the even\n   field's tile 1400 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 2 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |FF90 000A 0000 0000 0578  0001 FF93 ...                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 25: Header Sample 4-6 (6th Packet)\n   Seventh packet:
        This packet will have the second part of the even\n   field's tile 1400 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 2 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     1610                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |626C 42F0 166B 6BD0 F8E1 ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 26: Header Sample 4-7 (7th Packet)\n   Eighth packet:
        This packet will have the third part of the even\n   field's tile 1300 bytes\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | 2 | 0 |  0  |1|      255      |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |       0       |                     3010                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |8114 41D5 18AB 4A1B ...                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                Figure 27: Header Sample 4-8 (8th Packet)\n"
      title: 'A.2.4.  Sample 4: Interlace Image, Single Tile'
    title: A.2.  Sample Headers in Detail
  title: Appendix A.  Informative Appendix
- contents:
  - "Authors' Addresses\n   Satoshi Futemma\n   Sony Corporation\n   1-7-1 Konan\n
    \  Minato-ku\n   Tokyo  108-0075\n   Japan\n   Phone: +81 3 6748-2111\n   EMail:
    satosi-f@sm.sony.co.jp\n   URI:   http://www.sony.net/\n   Eisaburo Itakura\n
    \  Sony Corporation\n   1-7-1 Konan\n   Minato-ku\n   Tokyo  108-0075\n   Japan\n
    \  Phone: +81 3 6748-2111\n   EMail: itakura@sm.sony.co.jp\n   URI:   http://www.sony.net/\n
    \  Andrew Leung\n   Sony Corporation\n   EMail: andrew@ualberta.net\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
