- title: __initial_text__
  contents:
  - '        Socket Interface Extensions for Multicast Source Filters

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Group Management Protocol (IGMPv3) for IPv4 and the\n\
    \   Multicast Listener Discovery (MLDv2) for IPv6 add the capability for\n   applications\
    \ to express source filters on multicast group\n   memberships, which allows receiver\
    \ applications to determine the set\n   of senders (sources) from which to accept\
    \ multicast traffic.  This\n   capability also simplifies support of one-to-many\
    \ type multicast\n   applications.\n   This document specifies new socket options\
    \ and functions to manage\n   source filters for IP Multicast group memberships.\
    \  It also defines\n   the socket structures to provide input and output arguments\
    \ to these\n   new application program interfaces (APIs).  These extensions are\n\
    \   designed to provide access to the source filtering features, while\n   introducing\
    \ a minimum of change into the system and providing\n   complete compatibility\
    \ for existing multicast applications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Design Considerations. . . . . . . . . . . . . . . .\
    \ . . . . .  3\n       2.1 What Needs to be Added . . . . . . . . . . . . . .\
    \ . . . .  4\n       2.2 Data Types . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       2.3 Headers. . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n       2.4 Structures . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  4\n   3. Overview of APIs. . . . . . . . . . . . . . . . . . . . . . . .\
    \  5\n   4. IPv4 Multicast Source Filter APIs . . . . . . . . . . . . . . .  6\n\
    \      4.1 Basic (Delta-based) API for IPv4. . . . . . . . . . . . . .  6\n  \
    \         4.1.1 IPv4 Any-Source Multicast API. . . . . . . . . . . .  7\n    \
    \       4.1.2 IPv4 Source-Specific Multicast API . . . . . . . . .  7\n      \
    \     4.1.3 Error Codes. . . . . . . . . . . . . . . . . . . . .  8\n      4.2\
    \ Advanced (Full-state) API for IPv4. . . . . . . . . . . . .  8\n           4.2.1\
    \ Set Source Filter. . . . . . . . . . . . . . . . . .  8\n           4.2.2 Get\
    \ Source Filter. . . . . . . . . . . . . . . . . .  9\n   5: Protocol-Independent\
    \ Multicast Source Filter APIs . . . . . . . 10\n      5.1 Basic (Delta-based)\
    \ API . . . . . . . . . . . . . . . . . . 10\n           5.1.1 Any-Source Multicast\
    \ API . . . . . . . . . . . . . . 11\n           5.1.2 Source-Specific Multicast\
    \ API. . . . . . . . . . . . 11\n      5.2 Advanced (Full-state) API . . . . .\
    \ . . . . . . . . . . . . 11\n           5.2.1 Set Source Filter. . . . . . .\
    \ . . . . . . . . . . . 11\n           5.2.2 Get Source Filter. . . . . . . .\
    \ . . . . . . . . . . 12\n   6.  Security Considerations. . . . . . . . . . .\
    \ . . . . . . . . . 13\n   7.  Acknowledgments. . . . . . . . . . . . . . . .\
    \ . . . . . . . . 13\n   8.  Appendix A: Use of ioctl() for full-state operations\
    \ . . . . . 14\n       8.1. IPv4 Options. . . . . . . . . . . . . . . . . . .\
    \ . . . . 14\n       8.2. Protocol-Independent Options. . . . . . . . . . . .\
    \ . . . 15\n   9.  Normative References . . . . . . . . . . . . . . . . . . .\
    \ . . 16\n   10. Informative References . . . . . . . . . . . . . . . . . . .\
    \ . 16\n   11. Authors' Addresses . . . . . . . . . . . . . . . . . . . . . .\
    \ 17\n   12. Full Copyright Statement . . . . . . . . . . . . . . . . . . . 18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The de facto standard application program interface (API)\
    \ for TCP/IP\n   applications is the \"sockets\" interface.  Although this API\
    \ was\n   developed for Unix in the early 1980s it has also been implemented on\n\
    \   a wide variety of non-Unix systems.  TCP/IP applications written\n   using\
    \ the sockets API have in the past enjoyed a high degree of\n   portability and\
    \ we would like the same portability with applications\n   that employ multicast\
    \ source filters.  Changes are required to the\n   sockets API to support such\
    \ filtering and this memo describes these\n   changes.\n   This document specifies\
    \ new socket options and functions to manage\n   source filters for IP Multicast\
    \ group memberships.  It also defines\n   the socket structures to provide input\
    \ and output arguments to these\n   new APIs.  These extensions are designed to\
    \ provide access to the\n   source filtering features required by applications,\
    \ while introducing\n   a minimum of change into the system and providing complete\n\
    \   compatibility for existing multicast applications.\n   Furthermore, RFC 3493\
    \ [1] defines socket interface extensions for\n   IPv6, including protocol-independent\
    \ functions for most operations.\n   However, while it defines join and leave\
    \ functions for IPv6, it does\n   not provide protocol-independent versions of\
    \ these operations.  Such\n   functions will be described in this document.\n\
    \   The reader should note that this document is for informational\n   purposes\
    \ only, and that the official standard specification of the\n   sockets API is\
    \ [2].\n"
- title: 2.  Design Considerations
  contents:
  - "2.  Design Considerations\n   There are a number of important considerations\
    \ in designing changes\n   to this well-worn API:\n      o  The API changes should\
    \ provide both source and binary\n         compatibility for programs written\
    \ to the original API.  That\n         is, existing program binaries should continue\
    \ to operate when\n         run on a system supporting the new API.  In addition,\
    \ existing\n         applications that are re-compiled and run on a system\n \
    \        supporting the new API should continue to operate.  Simply put,\n   \
    \      the API changes for multicast receivers that specify source\n         filters\
    \ should not break existing programs.\n      o  The changes to the API should\
    \ be as small as possible in order\n         to simplify the task of converting\
    \ existing multicast receiver\n         applications to use source filters.\n\
    \      o  Applications should be able to detect when the new source\n        \
    \ filter APIs are unavailable (e.g., calls fail with the ENOTSUPP\n         error)\
    \ and react gracefully (e.g., revert to old non-source-\n         filter API or\
    \ display a meaningful error message to the user).\n      o  Lack of type-safety\
    \ in an API is a bad thing which should be\n         avoided when possible.\n\
    \   Several implementations exist that use ioctl() for a portion of the\n   functionality\
    \ described herein, and for historical purposes, the\n   ioctl API is documented\
    \ in Appendix A.  The preferred API, however,\n   includes new functions.  The\
    \ reasons for adding new functions are:\n      o  New functions provide type-safety,\
    \ unlike ioctl, getsockopt,\n         and setsockopt.\n      o  A new function\
    \ can be written as a wrapper over an ioctl,\n         getsockopt, or setsockopt\
    \ call, if necessary.  Hence, it\n         provides more freedom as to how the\
    \ functionality is\n         implemented in an operating system.  For example,\
    \ a new\n         function might be implemented as an inline function in an\n\
    \         include file, or a function exported from a user-mode library\n    \
    \     which internally uses some mechanism to exchange information\n         with\
    \ the kernel, or be implemented directly in the kernel.\n      o  At least one\
    \ operation defined herein needs to be able to both\n         pass information\
    \ to the TCP/IP stack, as well as retrieve\n         information from it.  In\
    \ some implementations this is\n         problematic without either changing getsockopt\
    \ or using ioctl.\n         Using new functions avoids the need to change such\n\
    \         implementations.\n"
- title: 2.1.  What Needs to be Added
  contents:
  - "2.1.  What Needs to be Added\n   The current IP Multicast APIs allow a receiver\
    \ application to specify\n   the group address (destination) and (optionally)\
    \ the local interface.\n   These existing APIs need not change (and cannot, to\
    \ retain binary\n   compatibility).  Hence, what is needed are new source filter\
    \ APIs\n   that provide the same functionality and also allow receiver multicast\n\
    \   applications to:\n      o  Specify zero or more unicast (source) address(es)\
    \ in a source\n         filter.\n      o  Determine whether the source filter\
    \ describes an inclusive or\n         exclusive list of sources.\n   The new API\
    \ design must enable this functionality for both IPv4 and\n   IPv6.\n"
- title: 2.2.  Data Types
  contents:
  - "2.2.  Data Types\n   The data types of the structure elements given in this memo\
    \ are\n   intended to be examples, not absolute requirements.  Whenever\n   possible,\
    \ data types from POSIX 1003.1g [2] are used: uintN_t means\n   an unsigned integer\
    \ of exactly N bits (e.g., uint32_t).\n"
- title: 2.3.  Headers
  contents:
  - "2.3.  Headers\n   When function prototypes and structures are shown, we show\
    \ the\n   headers that must be #included to cause that item to be defined.\n"
- title: 2.4.  Structures
  contents:
  - "2.4.  Structures\n   When structures are described, the members shown are the\
    \ ones that\n   must appear in an implementation.  Additional, nonstandard members\n\
    \   may also be defined by an implementation.  As an additional\n   precaution,\
    \ nonstandard members could be verified by Feature Test\n   Macros as described\
    \ in [2].  (Such Feature Test Macros are not\n   defined by this RFC.)\n   The\
    \ ordering shown for the members of a structure is the recommended\n   ordering,\
    \ given alignment considerations of multibyte members, but an\n   implementation\
    \ may order the members differently.\n"
- title: 3.  Overview of APIs
  contents:
  - "3.  Overview of APIs\n   There are a number of different APIs described in this\
    \ document that\n   are appropriate for a number of different application types\
    \ and IP\n   versions.  Before providing detailed descriptions, this section\n\
    \   provides a \"taxonomy\" with a brief description of each.\n   There are two\
    \ categories of source-filter APIs, both of which are\n   designed to allow multicast\
    \ receiver applications to designate the\n   unicast address(es) of sender(s)\
    \ along with the multicast group\n   (destination address) to receive.\n     \
    \ o  Basic (Delta-based): Some applications desire the simplicity of\n       \
    \  a delta-based API in which each function call specifies a\n         single\
    \ source address which should be added to or removed from\n         the existing\
    \ filter for a given multicast group address on\n         which to listen.  Such\
    \ applications typically fall into either\n         of two categories:\n     \
    \    +  Any-Source Multicast: By default, all sources are accepted.\n        \
    \    Individual sources may be turned off and back on as needed\n            over\
    \ time.  This is also known as \"exclude\" mode, since the\n            source\
    \ filter contains a list of excluded sources.\n         +  Source-Specific Multicast:\
    \ Only sources in a given list are\n            allowed.  The list may change\
    \ over time.  This is also known\n            as \"include\" mode, since the source\
    \ filter contains a list\n            of included sources.\n            This API\
    \ would be used, for example, by \"single-source\"\n            applications such\
    \ as audio/video broadcasting.  It would\n            also be used for logical\
    \ multi-source sessions where each\n            source independently allocates\
    \ its own Source-Specific\n            Multicast group address.\n      o  Advanced\
    \ (Full-state): This API allows an application to define\n         a complete\
    \ source-filter comprised of zero or more source\n         addresses, and replace\
    \ the previous filter with a new one.\n         Applications which require the\
    \ ability to switch between filter\n         modes without leaving a group must\
    \ use a full-state API (i.e.,\n         to change the semantics of the source\
    \ filter from inclusive to\n         exclusive, or vice versa).\n         Applications\
    \ which use a large source list for a given group\n         address should also\
    \ use the full-state API, since filter\n         changes can be done atomically\
    \ in a single operation.\n   The above types of APIs exist in IPv4-specific variants\
    \ as well as\n   with protocol-independent variants.  One might ask why the protocol-\n\
    \   independent APIs cannot accommodate IPv4 applications as well as\n   IPv6.\
    \  Since any IPv4 application requires modification to use\n   multicast source\
    \ filters anyway, it might seem like a good\n   opportunity to create IPv6-compatible\
    \ source code.\n   The primary reasons for extending an IPv4-specific API are:\n\
    \      o  To minimize changes needed in existing IPv4 multicast\n         application\
    \ source code to add source filter support.\n      o  To avoid overloading APIs\
    \ to accommodate the differences\n         between IPv4 interface addresses (e.g.,\
    \ in the ip_mreq\n         structure) and interface indices.\n"
- title: 4.  IPv4 Multicast Source Filter APIs
  contents:
  - "4.  IPv4 Multicast Source Filter APIs\n   Version 3 of the Internet Group Management\
    \ Protocol (IGMPv3) [3] and\n   version 2 of the Multicast Listener Discovery\
    \ (MLDv2) protocol [4]\n   provide the ability to communicate source filter information\
    \ to the\n   router and hence avoid pulling down data from unwanted sources onto\n\
    \   the local link.  However, source filters may be implemented by the\n   operating\
    \ system regardless of whether the routers support IGMPv3 or\n   MLDv2, so when\
    \ the source-filter API is available, applications can\n   always benefit from\
    \ using it.\n"
- title: 4.1.  Basic (Delta-based) API for IPv4
  contents:
  - "4.1.  Basic (Delta-based) API for IPv4\n   The reception of multicast packets\
    \ is controlled by the setsockopt()\n   options summarized below.  An error of\
    \ EOPNOTSUPP is returned if\n   these options are used with getsockopt().\n  \
    \ The following structures are used by both the Any-Source Multicast\n   and the\
    \ Source-Specific Multicast API:\n   #include <netinet/in.h>\n   struct ip_mreq\
    \ {\n      struct in_addr imr_multiaddr;  /* IP address of group */\n      struct\
    \ in_addr imr_interface;  /* IP address of interface */\n   };\n   struct ip_mreq_source\
    \ {\n      struct in_addr imr_multiaddr;  /* IP address of group */\n      struct\
    \ in_addr imr_sourceaddr; /* IP address of source */\n      struct in_addr imr_interface;\
    \  /* IP address of interface */\n   };\n"
- title: 4.1.1.  IPv4 Any-Source Multicast API
  contents:
  - "4.1.1.  IPv4 Any-Source Multicast API\n   The following socket options are defined\
    \ in <netinet/in.h> for\n   applications in the Any-Source Multicast category:\n\
    \   Socket option             Argument type\n   IP_ADD_MEMBERSHIP         struct\
    \ ip_mreq\n   IP_BLOCK_SOURCE           struct ip_mreq_source\n   IP_UNBLOCK_SOURCE\
    \         struct ip_mreq_source\n   IP_DROP_MEMBERSHIP        struct ip_mreq\n\
    \   IP_ADD_MEMBERSHIP and IP_DROP_MEMBERSHIP are already implemented on\n   most\
    \ operating systems, and are used to join and leave an any-source\n   group.\n\
    \   IP_BLOCK_SOURCE can be used to block data from a given source to a\n   given\
    \ group (e.g., if the user \"mutes\" that source), and\n   IP_UNBLOCK_SOURCE can\
    \ be used to undo this (e.g., if the user then\n   \"unmutes\" the source).\n"
- title: 4.1.2.  IPv4 Source-Specific Multicast API
  contents:
  - "4.1.2.  IPv4 Source-Specific Multicast API\n   The following socket options are\
    \ available for applications in the\n   Source-Specific category:\n   Socket option\
    \             Argument type\n   IP_ADD_SOURCE_MEMBERSHIP  struct ip_mreq_source\n\
    \   IP_DROP_SOURCE_MEMBERSHIP struct ip_mreq_source\n   IP_DROP_MEMBERSHIP   \
    \     struct ip_mreq\n   IP_ADD_SOURCE_MEMBERSHIP and IP_DROP_SOURCE_MEMBERSHIP\
    \ are used to\n   join and leave a source-specific group.\n   IP_DROP_MEMBERSHIP\
    \ is supported, as a convenience, to drop all\n   sources which have been joined\
    \ for a particular group and interface.\n   The operations are the same as if\
    \ the socket had been closed.\n"
- title: 4.1.3.  Error Codes
  contents:
  - "4.1.3.  Error Codes\n   When the option would be legal on the group, but an address\
    \ is\n   invalid (e.g., when trying to block a source that is already blocked\n\
    \   by the socket, or when trying to drop an unjoined group) the error\n   generated\
    \ is EADDRNOTAVAIL.\n   When the option itself is not legal on the group (i.e.,\
    \ when trying a\n   Source-Specific option on a group after doing IP_ADD_MEMBERSHIP,\
    \ or\n   when trying an Any-Source option without doing IP_ADD_MEMBERSHIP) the\n\
    \   error generated is EINVAL.\n   When any of these options are used with getsockopt(),\
    \ the error\n   generated is EOPNOTSUPP.\n   Finally, if the implementation imposes\
    \ a limit on the maximum number\n   of sources in a source filter, ENOBUFS is\
    \ generated when an operation\n   would exceed the maximum.\n"
- title: 4.2.  Advanced (Full-state) API for IPv4
  contents:
  - "4.2.  Advanced (Full-state) API for IPv4\n   Several implementations exist that\
    \ use ioctl() for this API, and for\n   historical purposes, the ioctl() API is\
    \ documented in Appendix A.\n   The preferred API uses the new functions described\
    \ below.\n"
- title: 4.2.1.  Set Source Filter
  contents:
  - "4.2.1.  Set Source Filter\n     #include <netinet/in.h>\n     int setipv4sourcefilter(int\
    \ s, struct in_addr interface,\n                             struct in_addr group,\
    \ uint32_t fmode,\n                             uint32_t numsrc, struct in_addr\
    \ *slist);\n   On success the value 0 is returned, and on failure, the value -1\
    \ is\n   returned and errno is set accordingly.\n   The s argument identifies\
    \ the socket.\n   The interface argument holds the local IP address of the interface.\n\
    \   The group argument holds the IP multicast address of the group.\n   The fmode\
    \ argument identifies the filter mode.  The value of this\n   field must be either\
    \ MCAST_INCLUDE or MCAST_EXCLUDE, which are\n   likewise defined in <netinet/in.h>.\n\
    \   The numsrc argument holds the number of source addresses in the slist\n  \
    \ array.\n   The slist argument points to an array of IP addresses of sources\
    \ to\n   include or exclude depending on the filter mode.\n   If the implementation\
    \ imposes a limit on the maximum number of\n   sources in a source filter, ENOBUFS\
    \ is generated when the operation\n   would exceed the maximum.\n"
- title: 4.2.2.  Get Source Filter
  contents:
  - "4.2.2.  Get Source Filter\n     #include <netinet/in.h>\n     int getipv4sourcefilter(int\
    \ s, struct in_addr interface,\n                             struct in_addr group,\
    \ uint32_t *fmode,\n                             uint32_t *numsrc, struct in_addr\
    \ *slist);\n   On success the value 0 is returned, and on failure, the value -1\
    \ is\n   returned and errno is set accordingly.\n   The s argument identifies\
    \ the socket.\n   The interface argument holds the local IP address of the interface.\n\
    \   The group argument holds the IP multicast address of the group.\n   The fmode\
    \ argument points to an integer that will contain the filter\n   mode on a successful\
    \ return.  The value of this field will be either\n   MCAST_INCLUDE or MCAST_EXCLUDE,\
    \ which are likewise defined in\n   <netinet/in.h>.\n   On input, the numsrc argument\
    \ holds the number of source addresses\n   that will fit in the slist array. \
    \ On output, the numsrc argument\n   will hold the total number of sources in\
    \ the filter.\n   The slist argument points to buffer into which an array of IP\n\
    \   addresses of included or excluded (depending on the filter mode)\n   sources\
    \ will be written.  If numsrc was 0 on input, a NULL pointer\n   may be supplied.\n\
    \   If the application does not know the size of the source list\n   beforehand,\
    \ it can make a reasonable guess (e.g., 0), and if upon\n   completion, numsrc\
    \ holds a larger value, the operation can be\n   repeated with a large enough\
    \ buffer.\n   That is, on return, numsrc is always updated to be the total number\n\
    \   of sources in the filter, while slist will hold as many source\n   addresses\
    \ as fit, up to the minimum of the array size passed in as\n   the original numsrc\
    \ value and the total number of sources in the\n   filter.\n"
- title: 5.  Protocol-Independent Multicast Source Filter APIs
  contents:
  - "5.  Protocol-Independent Multicast Source Filter APIs\n   Protocol-independent\
    \ functions are provided for join and leave\n   operations so that an application\
    \ may pass a sockaddr_storage\n   structure obtained from calls such as getaddrinfo()\
    \ [1] as the group\n   to join.  For example, an application can resolve a DNS\
    \ name (e.g.,\n   NTP.MCAST.NET) to a multicast address which may be either IPv4\
    \ or\n   IPv6, and may easily join and leave the group.\n"
- title: 5.1.  Basic (Delta-based) API
  contents:
  - "5.1.  Basic (Delta-based) API\n   The reception of multicast packets is controlled\
    \ by the setsockopt()\n   options summarized below.  An error of EOPNOTSUPP is\
    \ returned if\n   these options are used with getsockopt().\n   The following\
    \ structures are used by both the Any-Source Multicast\n   and the Source-Specific\
    \ Multicast API:  #include <netinet/in.h>\n   struct group_req {\n      uint32_t\
    \                gr_interface; /* interface index */\n      struct sockaddr_storage\
    \ gr_group;     /* group address */\n   };\n   struct group_source_req {\n   \
    \   uint32_t                gsr_interface; /* interface index */\n      struct\
    \ sockaddr_storage gsr_group;     /* group address */\n      struct sockaddr_storage\
    \ gsr_source;    /* source address */\n   };\n   The sockaddr_storage structure\
    \ is defined in RFC 3493 [1] to be large\n   enough to hold either IPv4 or IPv6\
    \ address information.\n   The rules for generating errors are the same as those\
    \ given in\n   Section 5.1.3.\n"
- title: 5.1.1.  Any-Source Multicast API
  contents:
  - "5.1.1.  Any-Source Multicast API\n   Socket option               Argument type\n\
    \   MCAST_JOIN_GROUP            struct group_req\n   MCAST_BLOCK_SOURCE      \
    \    struct group_source_req\n   MCAST_UNBLOCK_SOURCE        struct group_source_req\n\
    \   MCAST_LEAVE_GROUP           struct group_req\n   MCAST_JOIN_GROUP and MCAST_LEAVE_GROUP\
    \ are used to join and leave an\n   any-source group.\n   MCAST_BLOCK_SOURCE can\
    \ be used to block data from a given source to a\n   given group (e.g., if the\
    \ user \"mutes\" that source), and\n   MCAST_UNBLOCK_SOURCE can be used to undo\
    \ this (e.g., if the user then\n   \"unmutes\" the source).\n"
- title: 5.1.2.  Source-Specific Multicast API
  contents:
  - "5.1.2.  Source-Specific Multicast API\n   Socket option               Argument\
    \ type\n   MCAST_JOIN_SOURCE_GROUP     struct group_source_req\n   MCAST_LEAVE_SOURCE_GROUP\
    \    struct group_source_req\n   MCAST_LEAVE_GROUP           struct group_req\n\
    \   MCAST_JOIN_SOURCE_GROUP and MCAST_LEAVE_SOURCE_GROUP are used to join\n  \
    \ and leave a source-specific group.\n   MCAST_LEAVE_GROUP is supported, as a\
    \ convenience, to drop all sources\n   which have been joined for a particular\
    \ group and interface.  The\n   operations are the same as if the socket had been\
    \ closed.\n"
- title: 5.2.  Advanced (Full-state) API
  contents:
  - "5.2.  Advanced (Full-state) API\n   Implementations may exist that use ioctl()\
    \ for this API, and for\n   historical purposes, the ioctl() API is documented\
    \ in Appendix A.\n   The preferred API uses the new functions described below.\n"
- title: 5.2.1.  Set Source Filter
  contents:
  - "5.2.1.  Set Source Filter\n     #include <netinet/in.h>\n     int setsourcefilter(int\
    \ s, uint32_t interface,\n                         struct sockaddr *group, socklen_t\
    \ grouplen,\n                         uint32_t fmode, uint_t numsrc,\n       \
    \                  struct sockaddr_storage *slist);\n   On success the value 0\
    \ is returned, and on failure, the value -1 is\n   returned and errno is set accordingly.\n\
    \   The s argument identifies the socket.\n   The interface argument holds the\
    \ interface index of the interface.\n   The group argument points to either a\
    \ sockaddr_in structure (for\n   IPv4) or a sockaddr_in6 structure (for IPv6)\
    \ that holds the IP\n   multicast address of the group.\n   The grouplen argument\
    \ gives the length of the sockaddr_in or\n   sockaddr_in6 structure.\n   The fmode\
    \ argument identifies the filter mode.  The value of this\n   field must be either\
    \ MCAST_INCLUDE or MCAST_EXCLUDE, which are\n   likewise defined in <netinet/in.h>.\n\
    \   The numsrc argument holds the number of source addresses in the slist\n  \
    \ array.\n   The slist argument points to an array of IP addresses of sources\
    \ to\n   include or exclude depending on the filter mode.\n   If the implementation\
    \ imposes a limit on the maximum number of\n   sources in a source filter, ENOBUFS\
    \ is generated when the operation\n   would exceed the maximum.\n"
- title: 5.2.2.  Get Source Filter
  contents:
  - "5.2.2.  Get Source Filter\n     #include <netinet/in.h>\n     int getsourcefilter(int\
    \ s, uint32_t interface,\n                         struct sockaddr *group, socklen_t\
    \ grouplen,\n                         uint32_t fmode, uint_t *numsrc,\n      \
    \                   struct sockaddr_storage *slist);\n   On success the value\
    \ 0 is returned, and on failure, the value -1 is\n   returned and errno is set\
    \ accordingly.\n   The s argument identifies the socket.\n   The interface argument\
    \ holds the local IP address of the interface.\n   The group argument points to\
    \ either a sockaddr_in structure (for\n   IPv4) or a sockaddr_in6 structure (for\
    \ IPv6) that holds the IP\n   multicast address of the group.\n   The fmode argument\
    \ points to an integer that will contain the filter\n   mode on a successful return.\
    \  The value of this field will be either\n   MCAST_INCLUDE or MCAST_EXCLUDE,\
    \ which are likewise defined in\n   <netinet/in.h>.\n   On input, the numsrc argument\
    \ holds the number of source addresses\n   that will fit in the slist array. \
    \ On output, the numsrc argument\n   will hold the total number of sources in\
    \ the filter.\n   The slist argument points to buffer into which an array of IP\n\
    \   addresses of included or excluded (depending on the filter mode)\n   sources\
    \ will be written.  If numsrc was 0 on input, a NULL pointer\n   may be supplied.\n\
    \   If the application does not know the size of the source list\n   beforehand,\
    \ it can make a reasonable guess (e.g., 0), and if upon\n   completion, numsrc\
    \ holds a larger value, the operation can be\n   repeated with a large enough\
    \ buffer.\n   That is, on return, numsrc is always updated to be the total number\n\
    \   of sources in the filter, while slist will hold as many source\n   addresses\
    \ as fit, up to the minimum of the array size passed in as\n   the original numsrc\
    \ value and the total number of sources in the\n   filter.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Although source filtering can help to combat\
    \ denial-of-service\n   attacks, source filtering alone is not a complete solution,\
    \ since it\n   does not provide protection against spoofing the source address\
    \ to be\n   an allowed source.  Multicast routing protocols which use reverse-\n\
    \   path forwarding based on the source address, however, do provide some\n  \
    \ natural protection against spoofing the source address, since if a\n   router\
    \ receives a packet on an interface other than the one toward\n   the \"real\"\
    \ source, it will drop the packet.  However, this still does\n   not provide any\
    \ guarantee of protection.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This document was updated based on feedback from the\
    \ IETF's IDMR and\n   MAGMA Working Groups, and the Austin Group.  Wilbert de\
    \ Graaf also\n   provided many helpful comments.\n"
- title: '8.  Appendix A: Use of ioctl() for full-state operations'
  contents:
  - "8.  Appendix A: Use of ioctl() for full-state operations\n   The API defined\
    \ here is historic, but is documented here for\n   informational purposes since\
    \ it is implemented by multiple platforms.\n   The new functions defined earlier\
    \ in this document should now be used\n   instead.\n   Retrieving the source filter\
    \ for a given group cannot be done with\n   getsockopt() on some existing platforms,\
    \ since the group and\n   interface must be passed down in order to retrieve the\
    \ correct\n   filter, and getsockopt only supports an output buffer.  This can,\n\
    \   however, be done with an ioctl(), and hence for symmetry, both gets\n   and\
    \ sets are done with an ioctl.\n"
- title: 8.1.  IPv4 Options
  contents:
  - "8.1.  IPv4 Options\n   The following are defined in <sys/sockio.h>:\n      o\
    \  ioctl() SIOCGIPMSFILTER: to retrieve the list of source\n         addresses\
    \ that comprise the source filter along with the\n         current filter mode.\n\
    \      o  ioctl() SIOCSIPMSFILTER: to set or modify the source filter\n      \
    \   content (e.g., unicast source address list) or mode (exclude or\n        \
    \ include).\n"
- title: Ioctl option                  Argument type
  contents:
  - 'Ioctl option                  Argument type

    '
- title: SIOCGIPMSFILTER               struct ip_msfilter
  contents:
  - 'SIOCGIPMSFILTER               struct ip_msfilter

    '
- title: SIOCSIPMSFILTER               struct ip_msfilter
  contents:
  - 'SIOCSIPMSFILTER               struct ip_msfilter

    '
- title: struct ip_msfilter {
  contents:
  - "struct ip_msfilter {\n   struct in_addr imsf_multiaddr;  /* IP multicast address\
    \ of group */\n   struct in_addr imsf_interface;  /* local IP address of interface\
    \ */\n   uint32_t       imsf_fmode;      /* filter mode */\n   uint32_t      \
    \ imsf_numsrc;     /* number of sources in src_list */\n   struct in_addr imsf_slist[1];\
    \   /* start of source list */\n"
- title: '};'
  contents:
  - '};

    '
- title: '#define IP_MSFILTER_SIZE(numsrc) \'
  contents:
  - "#define IP_MSFILTER_SIZE(numsrc) \\\n   (sizeof(struct ip_msfilter) - sizeof(struct\
    \ in_addr) \\\n   + (numsrc) * sizeof(struct in_addr))\n   The imsf_fmode mode\
    \ is a 32-bit integer that identifies the filter\n   mode.  The value of this\
    \ field must be either MCAST_INCLUDE or\n   MCAST_EXCLUDE, which are likewise\
    \ defined in <netinet/in.h>.\n   The structure length pointed to must be at least\
    \ IP_MSFILTER_SIZE(0)\n   bytes long, and the imsf_numsrc parameter should be\
    \ set so that\n   IP_MSFILTER_SIZE(imsf_numsrc) indicates the buffer length.\n\
    \   If the implementation imposes a limit on the maximum number of\n   sources\
    \ in a source filter, ENOBUFS is generated when a set operation\n   would exceed\
    \ the maximum.\n   The result of a get operation (SIOCGIPMSFILTER) will be that\
    \ the\n   imsf_multiaddr and imsf_interface fields will be unchanged, while\n\
    \   imsf_fmode, imsf_numsrc, and as many source addresses as fit will be\n   filled\
    \ into the application's buffer.\n   If the application does not know the size\
    \ of the source list\n   beforehand, it can make a reasonable guess (e.g., 0),\
    \ and if upon\n   completion, the imsf_numsrc field holds a larger value, the\
    \ operation\n   can be repeated with a large enough buffer.\n   That is, on return\
    \ from SIOCGIPMSFILTER, imsf_numsrc is always\n   updated to be the total number\
    \ of sources in the filter, while\n   imsf_slist will hold as many source addresses\
    \ as fit, up to the\n   minimum of the array size passed in as the original imsf_numsrc\
    \ value\n   and the total number of sources in the filter.\n"
- title: 8.2.  Protocol-Independent Options
  contents:
  - "8.2.  Protocol-Independent Options\n   The following are defined in <sys/sockio.h>:\n\
    \      o  ioctl() SIOCGMSFILTER: to retrieve the list of source addresses\n  \
    \       that comprise the source filter along with the current filter\n      \
    \   mode.\n      o  ioctl() SIOCSMSFILTER: to set or modify the source filter\n\
    \         content (e.g., unicast source address list) or mode (exclude or\n  \
    \       include).\n   Ioctl option                 Argument type\n   SIOCGMSFILTER\
    \                struct group_filter\n   SIOCSMSFILTER                struct group_filter\n\
    \   struct group_filter {\n      uint32_t                gf_interface; /* interface\
    \ index */\n      struct sockaddr_storage gf_group;     /* multicast address */\n\
    \      uint32_t                gf_fmode;     /* filter mode */\n      uint32_t\
    \                gf_numsrc;    /* number of sources */\n      struct sockaddr_storage\
    \ gf_slist[1];  /* source address */\n   };\n   #define GROUP_FILTER_SIZE(numsrc)\
    \ \\\n      (sizeof(struct group_filter) - sizeof(struct sockaddr_storage) \\\n\
    \      + (numsrc) * sizeof(struct sockaddr_storage))\n   The imf_numsrc field\
    \ is used in the same way as described for\n   imsf_numsrc above.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [1]  Gilligan, R., Thomson, S., Bound, J., McCann,\
    \ J. and W.\n        Stevens, \"Basic Socket Interface Extensions for IPv6\",\
    \ RFC 3493,\n        February 2003.\n   [2]  IEEE Std. 1003.1-2001 Standard for\
    \ Information Technology --\n        Portable Operating System Interface (POSIX).\
    \  Open Group\n        Technical Standard: Base Specifications, Issue 6, December\
    \ 2001.\n        ISO/IEC 9945:2002.  http://www.opengroup.org/austin\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [3]  Cain, B., Deering, S., Kouvelas, I., Fenner,\
    \ B. and A.\n        Thyagarajan, \"Internet Group Management Protocol, Version\
    \ 3\",\n        RFC 3376, October 2002.\n   [4]  Vida, R. and L. Costa, \"Multicast\
    \ Listener Discovery Version 2\n        (MLDv2) for IPv6\", Work in Progress,\
    \ December 2003.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Dave Thaler\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052-6399\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n\
    \   Bill Fenner\n   75 Willow Road\n   Menlo Park, CA  94025\n   Phone: +1 650\
    \ 867 6073\n   EMail: fenner@research.att.com\n   Bob Quinn\n   IP Multicast Initiative\
    \ (IPMI)\n   Stardust.com\n   1901 S. Bascom Ave. #333\n   Campbell, CA 95008\n\
    \   Phone: +1 408 879 8080\n   EMail: rcq@ipmulticast.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
