- title: __initial_text__
  contents:
  - '          Providing Integrated Services over Low-bitrate Links

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an architecture for providing integrated\n\
    \   services over low-bitrate links, such as modem lines, ISDN B-\n   channels,\
    \ and sub-T1 links.  It covers only the lower parts of the\n   Internet Multimedia\
    \ Conferencing Architecture [1]; additional\n   components required for application\
    \ services such as Internet\n   Telephony (e.g., a session initiation protocol)\
    \ are outside the scope\n   of this document.  The main components of the architecture\
    \ are: a\n   real-time encapsulation format for asynchronous and synchronous low-\n\
    \   bitrate links, a header compression architecture optimized for real-\n   time\
    \ flows, elements of negotiation protocols used between routers\n   (or between\
    \ hosts and routers), and announcement protocols used by\n   applications to allow\
    \ this negotiation to take place.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   As an extension to the \"best-effort\" services the Internet\
    \ is well-\n   known for, additional types of services (\"integrated services\"\
    ) that\n   support the transport of real-time multimedia information are being\n\
    \   developed for, and deployed in the Internet.  Important elements of\n   this\
    \ development are:\n   -  parameters for forwarding mechanisms that are appropriate\
    \ for\n      real-time information [11, 12],\n   -  a setup protocol that allows\
    \ establishing special forwarding\n      treatment for real-time information flows\
    \ (RSVP [4]),\n   -  a transport protocol for real-time information (RTP/RTCP\
    \ [6]).\n   In addition to these elements at the network and transport levels\
    \ of\n   the Internet Multimedia Conferencing Architecture [1], further\n   components\
    \ are required to define application services such as\n   Internet Telephony,\
    \ e.g., protocols for session initiation and\n   control.  These components are\
    \ outside the scope of this document.\n   Up to now, the newly developed services\
    \ could not (or only very\n   inefficiently) be used over forwarding paths that\
    \ include low-bitrate\n   links such as 14.4, 33.6, and 56 kbit/s modems, 56 and\
    \ 64 kbit/s ISDN\n   B-channels, or even sub-T1 links.  The encapsulation formats\
    \ used on\n   these links are not appropriate for the simultaneous transport of\n\
    \   arbitrary data and real-time information that has to meet stringent\n   delay\
    \ requirements.  Transmission of a 1500 byte packet on a 28.8\n   kbit/s modem\
    \ link makes this link unavailable for the transmission of\n   real-time information\
    \ for about 400 ms.  This adds a worst-case delay\n   that causes real-time applications\
    \ to operate with round-trip delays\n   on the order of at least a second -- unacceptable\
    \ for real-time\n   conversation.  In addition, the header overhead associated\
    \ with the\n   protocol stacks used is prohibitive on low-bitrate links, where\n\
    \   compression down to a few dozen bytes per real-time information\n   packet\
    \ is often desirable.  E.g., the overhead of at least 44\n   (4+20+8+12) bytes\
    \ for HDLC/PPP, IP, UDP, and RTP completely\n   overshadows typical audio payloads\
    \ such as the 19.75 bytes needed for\n   a G.723.1 ACELP audio frame -- a 14.4\
    \ kbit/s link is completely\n   consumed by this header overhead alone at 40 real-time\
    \ frames per\n   second total (i.e., at 25 ms packetization delay for one stream\
    \ or 50\n   ms for two streams, with no space left for data, yet).  While the\n\
    \   header overhead can be reduced by combining several real-time\n   information\
    \ frames into one packet, this increases the delay incurred\n   while filling\
    \ that packet and further detracts from the goal of\n   real-time transfer of\
    \ multi-media information over the Internet.\n   This document describes an approach\
    \ for addressing these problems.\n   The main components of the architecture are:\n\
    \   -  a real-time encapsulation format for asynchronous and synchronous\n   \
    \   low-bitrate links,\n   -  a header compression architecture optimized for\
    \ real-time flows,\n   -  elements of negotiation protocols used between routers\
    \ (or between\n      hosts and routers), and\n   -  announcement protocols used\
    \ by applications to allow this\n      negotiation to take place.\n"
- title: 2.  Design Considerations
  contents:
  - "2.  Design Considerations\n   The main design goal for an architecture that addresses\
    \ real-time\n   multimedia flows over low-bitrate links is that of minimizing\
    \ the\n   end-to-end delay.  More specifically, the worst case delay (after\n\
    \   removing possible outliers, which are equivalent to packet losses\n   from\
    \ an application point of view) is what determines the playout\n   points selected\
    \ by the applications and thus the delay actually\n   perceived by the user.\n\
    \   In addition, any such architecture should obviously undertake every\n   attempt\
    \ to maximize the bandwidth actually available to media data;\n   overheads must\
    \ be minimized.\n   An important component of the integrated services architecture\
    \ is the\n   provision of reservations for real-time flows.  One of the problems\n\
    \   that systems on low-bitrate links (routers or hosts) face when\n   performing\
    \ admission control for such reservations is that they must\n   translate the\
    \ bandwidth requested in the reservation to the one\n   actually consumed on the\
    \ link.  Methods such as data compression\n   and/or header compression can reduce\
    \ the requirements on the link,\n   but admission control can only make use of\
    \ the reduced requirements\n   in its calculations if it has enough information\
    \ about the data\n   stream to know how effective the compression will be.  One\
    \ goal of\n   the architecture therefore is to provide the integrated services\n\
    \   admission control with this information.  A beneficial side effect\n   may\
    \ be to allow the systems to perform better compression than would\n   be possible\
    \ without this information.  This may make it worthwhile to\n   provide this information\
    \ even when it is not intended to make a\n   reservation for a real-time flow.\n"
- title: 3.  The Need for a Concerted Approach
  contents:
  - "3.  The Need for a Concerted Approach\n   Many technical approaches come to mind\
    \ for addressing these problems,\n   in particular a new form of low-delay encapsulation\
    \ to address delay\n   and header compression methods to address overhead.  This\
    \ section\n   shows that these techniques should be combined to solve the problem.\n"
- title: 3.1.  Real-Time Encapsulation
  contents:
  - "3.1.  Real-Time Encapsulation\n   The purpose of defining a real-time link-layer\
    \ encapsulation protocol\n   is to be able to introduce newly arrived real-time\
    \ packets into the\n   link-layer data stream without having to wait for the currently\n\
    \   transmitted (possibly large) packet to end.  Obviously, a real-time\n   encapsulation\
    \ must be part of any complete solution as the problem of\n   delays induced by\
    \ large frames on the link can only be solved on this\n   layer.\n   To be able\
    \ to switch to a real-time packet quickly in an interface\n   driver, it is first\
    \ necessary to identify packets that belong to\n   real-time flows.  This can\
    \ be done using a heuristic approach (e.g.,\n   favor the transmission of highly\
    \ periodic flows of small packets\n   transported in IP/UDP, or use the IP precedence\
    \ fields in a specific\n   way defined within an organization).  Preferably, one\
    \ also could make\n   use of a protocol defined for identifying flows that require\
    \ special\n   treatment, i.e. RSVP.  Of the two service types defined for use\
    \ with\n   RSVP now, the guaranteed service will only be available in certain\n\
    \   environments; for this and various other reasons, the service type\n   chosen\
    \ for many adaptive audio/video applications will most likely be\n   the controlled-load\
    \ service.  Controlled-load does not provide\n   control parameters for target\
    \ delay; thus it does not unambiguously\n   identify those packet streams that\
    \ would benefit most from being\n   transported in a real-time encapsulation format.\
    \  This calls for a\n   way to provide additional parameters in integrated services\
    \ flow\n   setup protocols to control the real-time encapsulation.\n   Real-time\
    \ encapsulation is not sufficient on its own, however: Even\n   if the relevant\
    \ flows can be appropriately identified for real-time\n   treatment, most applications\
    \ simply cannot operate properly on low-\n   bitrate links with the header overhead\
    \ implied by the combination of\n   HDLC/PPP, IP, UDP, and RTP, i.e. they absolutely\
    \ require header\n   compression.\n"
- title: 3.2.  Header Compression
  contents:
  - "3.2.  Header Compression\n   Header compression can be performed in a variety\
    \ of elements and at a\n   variety of levels in the protocol architecture.  As\
    \ many vendors of\n   Internet Telephony products for PCs ship applications, the\
    \ approach\n   that is most obvious to them is to reduce overhead by performing\n\
    \   header compression at the application level, i.e. above transport\n   protocols\
    \ such as UDP (or actually by using a non-standard,\n   efficiently coded header\
    \ in the first place).\n   Generally, header compression operates by installing\
    \ state at both\n   ends of a path that allows the receiving end to reconstruct\n\
    \   information omitted at the sending end.  Many good techniques for\n   header\
    \ compression (RFC 1144, [2]) operate on the assumption that the\n   path will\
    \ not reorder the frames generated.  This assumption does not\n   hold for end-to-end\
    \ compression; therefore additional overhead is\n   required for resequencing\
    \ state changes and for compressed packets\n   making use of these state changes.\n\
    \   Assume that a very good application level header compression solution\n  \
    \ for RTP flows could be able to save 11 out of the 12 bytes of an RTP\n   header\
    \ [3].  Even this perfect solution only reduces the total header\n   overhead\
    \ by 1/4.  It would have to be deployed in all applications,\n   even those that\
    \ operate on systems that are attached to higher-\n   bitrate links.\n   Because\
    \ of this limited effectiveness, the AVT group that is\n   responsible for RTP\
    \ within the IETF has decided to not further pursue\n   application level header\
    \ compression.\n   For router and IP stack vendors, the obvious approach is to\
    \ define\n   header compression that can be negotiated between peer routers.\n\
    \   Advanced header compression techniques now being defined in the IETF\n   [2]\
    \ certainly can relieve the link from significant parts of the\n   IP/UDP overhead\
    \ (i.e., most of 28 of the 44 bytes mentioned above).\n   One of the design principles\
    \ of the new IP header compression\n   developed in conjunction with IPv6 is that\
    \ it stops at layers the\n   semantics of which cannot be inferred from information\
    \ in lower layer\n   (outer) headers.  Therefore, this header compression technique\
    \ alone\n   cannot compress the data that is contained within UDP packets.\n \
    \  Any additional header compression technique runs into a problem: If\n   it\
    \ assumes specific application semantics (i.e., those of RTP and a\n   payload\
    \ data format) based on heuristics, it runs the risk of being\n   triggered falsely\
    \ and (e.g. in case of packet loss) reconstructing\n   packets that are catastrophically\
    \ incorrect for the application\n   actually being used.  A header compression\
    \ technique that can be\n   operated based on heuristics but does not cause incorrect\n\
    \   decompression even if the heuristics failed is described in [7]; a\n   companion\
    \ document describes the mapping of this technique to PPP\n   [10].\n   With all\
    \ of these techniques, the total IP/UDP/RTP header overhead\n   for an audio stream\
    \ can be reduced to two bytes per packet.  This\n   technology need only be deployed\
    \ at bottleneck links; high-speed\n   links can transfer the real-time streams\
    \ without routers or switches\n   expending CPU cycles to perform header compression.\n"
- title: 4.  Principles of Real-Time Encapsulation for Low-Bitrate Links
  contents:
  - "4.  Principles of Real-Time Encapsulation for Low-Bitrate Links\n   The main\
    \ design goal for a real-time encapsulation is to minimize the\n   delay incurred\
    \ by real-time packets that become available for sending\n   while a long data\
    \ packet is being sent.  To achieve this, the\n   encapsulation must be able to\
    \ either abort or suspend the transfer of\n   the long data packet.  As an additional\
    \ goal is to minimize the\n   overhead required for the transmission of packets\
    \ from periodic\n   flows, this strongly argues for being able to suspend a packet,\
    \ i.e.\n   segment it into parts between which the real-time packets can be\n\
    \   transferred.\n"
- title: 4.1.  Using existing IP fragmentation
  contents:
  - "4.1.  Using existing IP fragmentation\n   Transmitting only part of a packet,\
    \ to allow higher-priority traffic\n   to intervene and then resuming its transmission\
    \ later on, is a kind\n   of fragmentation.  Fragmentation is an existing functionality\
    \ of the\n   IP layer: An IPv4 header already contains fields that allow a large\n\
    \   IP datagram to be fragmented into small parts.  A sender's \"real-time\n \
    \  PPP\" implementation might simply indicate a small MTU to its IP stack\n  \
    \ and thus cause all larger datagrams to be fragmented down to a size\n   that\
    \ allows the access delay goals to be met (this assumes that the\n   IP stack\
    \ is able to priority-tag fragments, or that the PPP\n   implementation is able\
    \ to correlate the fragments to the initial one\n   that carries the information\
    \ relevant for prioritizing, or that only\n   initial fragments can be high-priority).\
    \  (Also, a PPP implementation\n   can negotiate down the MTU of its peer, causing\
    \ the peer to fragment\n   to a small size, which might be considered a crude\
    \ form of\n   negotiating an access delay goal with the peer system -- if that\n\
    \   system supports priority queueing at the fragment level.)\n   Unfortunately,\
    \ a full, 20 byte IP header is needed for each fragment\n   (larger when IP options\
    \ are used).  This limits the minimum size of\n   fragments that can be used without\
    \ too much overhead.  (Also, the\n   size of non-final fragments must be a multiple\
    \ of 8 bytes, further\n   limiting the choice.)  With path MTU discovery, IP level\n\
    \   fragmentation causes TCP implementations to use small MSSs -- this\n   further\
    \ increases the per-packet overhead to 40 bytes per fragment.\n   In any case,\
    \ fragmentation at the IP level persists on the path\n   further down to the datagram\
    \ receiver, increasing the transmission\n   overheads and router load throughout\
    \ the network.  With its high\n   overhead and the adverse effect on the Internet,\
    \ IP level\n   fragmentation can only be a stop-gap mechanism when no other\n\
    \   fragmentation protocol is available in the peer implementation.\n"
- title: 4.2.  Link-Layer Mechanisms
  contents:
  - "4.2.  Link-Layer Mechanisms\n   Cell-oriented multiplexing techniques such as\
    \ ATM that introduce\n   regular points where cells from a different packet can\
    \ be\n   interpolated are too inefficient for low-bitrate links; also, they\n\
    \   are not supported by chips used to support the link layer in low-\n   bitrate\
    \ routers and host interfaces.\n   Instead, the real-time encapsulation should\
    \ as far as possible make\n   use of the capabilities of the chips that have been\
    \ deployed.  On\n   synchronous lines, these chips support HDLC framing; on asynchronous\n\
    \   lines, an asynchronous variant of HDLC that usually is implemented in\n  \
    \ software is being used.  Both variants of HDLC provide a delimiting\n   mechanism\
    \ to indicate the end of a frame over the link.  The obvious\n   solution to the\
    \ segmentation problem is to combine this mechanism\n   with an indication of\
    \ whether the delimiter terminates or suspends\n   the current packet.\n   This\
    \ indication could be in an octet appended to each frame\n   information field;\
    \ however, seven out of eight bits of the octet\n   would be wasted.  Instead,\
    \ the bit could be carried at the start of\n   the next frame in conjunction with\
    \ multiplexing information (PPP\n   protocol identifier etc.) that will be required\
    \ here anyway.  Since\n   the real-time flows will in general be periodic, this\
    \ multiplexing\n   information could convey (part of) the compressed form of the\
    \ header\n   for the packet.  If packets from the real-time flow generally are\
    \ of\n   constant length (or have a defined maximum length that is often\n   used),\
    \ the continuation of the suspended packet could be immediately\n   attached to\
    \ it, without expending a further frame delimiter, i.e.,\n   the interpolation\
    \ of the real-time packet would then have zero\n   overhead.  Since packets from\
    \ low-delay real-time flows generally\n   will not require the ability to be further\
    \ suspended, the\n   continuation bit could be reserved for the non-real-time\
    \ packet\n   stream.\n   One real-time encapsulation format with these (and other)\
    \ functions\n   is described in ITU-T H.223 [13], the multiplex used by the H.324\n\
    \   modem-based videophone standard [14].  It was investigated whether\n   compatibility\
    \ could be achieved with this specification, which will\n   be used in future\
    \ videophone-enabled (H.324 capable) modems.\n   However, since the multiplexing\
    \ capabilities of H.223 are limited to\n   15 schedules (definitions of sequences\
    \ of packet types that can be\n   identified in a multiplex header), for general\
    \ Internet usage a\n   superset or a more general encapsulation would have been\
    \ required.\n   Also, a PPP-style negotiation protocol was needed instead of using\n\
    \   (and necessarily extending) ITU-T H.245 [15] for setting the\n   parameters\
    \ of the multiplex.  In the PPP context, the interactions\n   with the encapsulations\
    \ for data compression and link layer\n   encryption needed to be defined (including\
    \ operation in the presence\n   of padding).  But most important, H.223 requires\
    \ synchronous HDLC\n   chips that can be configured to send frames without an\
    \ attached CRC,\n   which is not possible with all chips deployed in commercially\n\
    \   available routers; so complete compatibility was unachievable.\n   Instead\
    \ of adopting H.223, it was decided to pursue an approach that\n   is oriented\
    \ towards compatibility both with existing hardware and\n   existing software\
    \ (in particular PPP) implementations.  The next\n   subsection groups these implementations\
    \ according to their\n   capabilities.\n"
- title: 4.3.  Implementation models
  contents:
  - "4.3.  Implementation models\n   This section introduces a number of terms for\
    \ types of\n   implementations that are likely to emerge.  It is important to\
    \ have\n   these different implementation models in mind as there is no single\n\
    \   approach that fits all models best.\n"
- title: 4.3.1.  Sender types
  contents:
  - "4.3.1.  Sender types\n   There are two fundamental approaches to real-time transmission\
    \ on\n   low-bitrate links:\n   Sender type 1\n      The PPP real-time framing\
    \ implementation is able to control the\n      transmission of each byte being\
    \ transmitted with some known,\n      bounded delay (e.g., due to FIFOs).  For\
    \ example, this is\n      generally true of PC host implementations, which directly\
    \ access\n      serial interface chips byte by byte or by filling a very small\n\
    \      FIFO.  For type 1 senders, a suspend/resume type approach will be\n   \
    \   typically used: When a long frame is to be sent, the attempt is to\n     \
    \ send it undivided; only if higher priority packets come up during\n      the\
    \ transmission will the lower-priority long frame be suspended\n      and later\
    \ resumed.  This approach allows the minimum variation in\n      access delay\
    \ for high-priority packets; also, fragmentation\n      overhead is only incurred\
    \ when actually needed.\n   Sender type 2\n      With type 2 senders, the interface\
    \ between the PPP real-time\n      framing implementation and the transmission\
    \ hardware is not in\n      terms of streams of bytes, but in terms of frames,\
    \ e.g., in the\n      form of multiple (prioritized) send queues directly supported\
    \ by\n      hardware.  This is often true of router systems for synchronous\n\
    \      links, in particular those that have to support a large number of\n   \
    \   low-bitrate links.  As type 2 senders have no way to suspend a\n      frame\
    \ once it has been handed down for transmission, they\n      typically will use\
    \ a queues-of-fragments approach, where long\n      packets are always split into\
    \ units that are small enough to\n      maintain the access delay goals for higher-priority\
    \ traffic.\n      There is a trade-off between the variation in access delay\n\
    \      resulting from a large fragment size and the overhead that is\n      incurred\
    \ for every long packet by choosing a small fragment size.\n"
- title: 4.3.2.  Receiver types
  contents:
  - "4.3.2.  Receiver types\n   Although the actual work of formulating transmission\
    \ streams for\n   real-time applications is performed at the sender, the ability\
    \ of the\n   receiver to immediately make use of the information received depends\n\
    \   on its characteristics:\n   Receiver type 1\n      Type 1 receivers have full\
    \ control over the stream of bytes\n      received within PPP frames, i.e., bytes\
    \ received are available\n      immediately to the PPP real-time framing implementation\
    \ (with some\n      known, bounded delay e.g. due to FIFOs etc.).\n   Receiver\
    \ type 2\n      With type 2 receivers, the PPP real-time framing implementation\n\
    \      only gets hold of a frame when it has been received completely,\n     \
    \ i.e., the final flag has been processed (typically by some HDLC\n      chip\
    \ that directly fills a memory buffer).\n"
- title: 4.4.  Conclusion
  contents:
  - "4.4.  Conclusion\n   As a result of the diversity in capabilities of current\n\
    \   implementations, there are now two specifications for real-time\n   encapsulation:\
    \ One, the multi-class extension to the PPP multi-link\n   protocol, is providing\
    \ the solution for the queues-of-fragments\n   approach by extending the single-stream\
    \ PPP multi-link protocol by\n   multiple classes [8].  The other encapsulation,\
    \ PPP in a real-time\n   oriented HDLC-like framing, builds on this specification\
    \ end extends\n   it by a way to dynamically delimit multiple fragments within\
    \ one HDLC\n   frame [9], providing the solution for the suspend/resume type\n\
    \   approach.\n"
- title: 5.  Principles of Header Compression for Real-Time Flows
  contents:
  - "5.  Principles of Header Compression for Real-Time Flows\n   A good baseline\
    \ for a discussion about header compression is in the\n   new IP header compression\
    \ specification that was designed in\n   conjunction with the development of IPv6\
    \ [2].  The techniques used\n   there can reduce the 28 bytes of IPv4/UDP header\
    \ to about 6 bytes\n   (depending on the number of concurrent streams); with the\
    \ remaining 4\n   bytes of HDLC/PPP overhead and 12 bytes for RTP the total header\n\
    \   overhead can be about halved but still exceeds the size of a G.723.1\n   ACELP\
    \ frame.  Note that, in contrast to IP header compression, the\n   environment\
    \ discussed here assumes the existence of a full-duplex PPP\n   link and thus\
    \ can rely on negotiation where IP header compression\n   requires repeated transmission\
    \ of the same information.  (The use of\n   the architecture of the present document\
    \ with link layer multicasting\n   has not yet been examined.)\n   Additional\
    \ design effort was required for RTP header compression.\n   Applying the concepts\
    \ of IP header compression, of the (at least) 12\n   bytes in an RTP header, 7\
    \ bytes (timestamp, sequence, and marker bit)\n   would qualify as RANDOM; DELTA\
    \ encoding cannot generally be used\n   without further information since the\
    \ lower layer header does not\n   unambiguously identify the semantics and there\
    \ is no TCP checksum\n   that can be relied on to detect incorrect decompression.\
    \  Only a more\n   semantics-oriented approach can provide better compression\
    \ (just as\n   RFC 1144 can provide very good compression of TCP headers by making\n\
    \   use of semantic knowledge of TCP and its checksumming method).\n   For RTP\
    \ packets, differential encoding of the sequence number and\n   timestamps is\
    \ an efficient approach for certain cases of payload data\n   formats.  E.g.,\
    \ speech flows generally have sequence numbers and\n   timestamp fields that increase\
    \ by 1 and by the frame size in\n   timestamp units, resp.; the CRTP (compressed\
    \ RTP) specification makes\n   use of this relationship by encoding these fields\
    \ only when the\n   second order difference is non-zero [7].\n"
- title: 6.  Announcement Protocols Used by Applications
  contents:
  - "6.  Announcement Protocols Used by Applications\n   As argued, the compressor\
    \ can operate best if it can make use of\n   information that clearly identifies\
    \ real-time streams and provides\n   information about the payload data format\
    \ in use.\n   If these systems are routers, this consent must be installed as\n\
    \   router state; if these systems are hosts, it must be known to their\n   networking\
    \ kernels.  Sources of real-time information flows are\n   already describing\
    \ characteristics of these flows to their kernels\n   and to the routers in the\
    \ form of TSpecs in RSVP PATH messages [4].\n   Since these messages make use\
    \ of the router alert option, they are\n   seen by all routers on the path; path\
    \ state about the packet stream\n   is normally installed at each of these routers\
    \ that implement RSVP.\n   Additional RSVP objects could be defined that are included\
    \ in PATH\n   messages by those applications that desire good performance over\
    \ low-\n   bitrate links; these objects would be coded to be ignored by routers\n\
    \   that are not interested in them (class number 11bbbbbb as defined in\n   [4],\
    \ section 3.10).\n   Note that the path state is available in the routers even\
    \ when no\n   reservation is made; this allows informed compression of best-effort\n\
    \   traffic.  It is not quite clear, though, how path state could be torn\n  \
    \ down quickly when a source ceases to transmit.\n"
- title: 7.  Elements of Hop-By-Hop Negotiation Protocols
  contents:
  - "7.  Elements of Hop-By-Hop Negotiation Protocols\n   The IP header compression\
    \ specification attempts to account for\n   simplex and multicast links by providing\
    \ information about the\n   compressed streams only in the forward direction.\
    \  E.g., a full\n   IP/UDP header must be sent after F_MAX_TIME (currently 3 seconds),\n\
    \   which is a negligible total overhead (e.g. one full header every 150\n   G.723.1\
    \ packets), but must be considered carefully in scheduling the\n   real-time transmissions.\
    \  Both simplex and multicast links are not\n   prevailing in the low-bitrate\
    \ environment (although multicast\n   functionality may become more important\
    \ with wireless systems); in\n   this document, we therefore assume full-duplex\
    \ capability.\n   As compression techniques will improve, a negotiation between\
    \ the two\n   peers on the link would provide the best flexibility in\n   implementation\
    \ complexity and potential for extensibility.  The peer\n   routers/hosts can\
    \ decide which real-time packet streams are to be\n   compressed, which header\
    \ fields are not to be sent at all, which\n   multiplexing information should\
    \ be used on the link, and how the\n   remaining header fields should be encoded.\
    \  PPP, a well-tried suite\n   of negotiation protocols, is already used on most\
    \ of the low-bitrate\n   links and seems to provide the obvious approach.  Cooperation\
    \ from\n   PPP is also needed to negotiate the use of real-time encapsulations\n\
    \   between systems that are not configured to automatically do so.\n   Therefore,\
    \ PPP options that can be negotiated at the link setup (LCP)\n   phase are included\
    \ in [8], [9], and [10].\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Header compression protocols that make use of\
    \ assumptions about\n   application protocols need to be carefully analyzed whether\
    \ it is\n   possible to subvert other applications by maliciously or\n   inadvertently\
    \ enabling their use.\n   It is generally not possible to do significant hop-by-hop\
    \ header\n   compression on encrypted streams.  With certain security policies,\
    \ it\n   may be possible to run an encrypted tunnel to a network access server\n\
    \   that does header compression on the decapsulated packets and sends\n   them\
    \ over an encrypted link encapsulation; see also the short mention\n   of interactions\
    \ between real-time encapsulation and encryption in\n   section 4 above.  If the\
    \ security requirements permit, a special RTP\n   payload data format that encrypts\
    \ only the data may preferably be\n   used.\n"
- title: 9.  References
  contents:
  - "9.  References\n    [1]  Handley, M., Crowcroft, J., Bormann, C. and J. Ott,\
    \ \"The\n         Internet Multimedia Conferencing Architecture\", Work in\n \
    \        Progress.\n    [2]  Degermark, M., Nordgren, B. and S. Pink, \"IP Header\n\
    \         Compression\", RFC 2507, February 1999.\n    [3]  Scott Petrack, Ed\
    \ Ellesson, \"Framework for C/RTP: Compressed\n         RTP Using Adaptive Differential\
    \ Header Compression\",\n         contribution to the mailing list rem-conf@es.net,\
    \ February\n         1996.\n    [4]  Braden, R., Zhang, L., Berson, S., Herzog,\
    \ S. and S. Jamin,\n         \"Resource ReSerVation Protocol (RSVP) -- Version\
    \ 1 Functional\n         Specification\", RFC 2205, September 1997.\n    [5] \
    \ Sklower, K., Lloyd, B., McGregor, G., Carr, D. and T.\n         Coradetti, \"\
    The PPP Multilink Protocol (MP)\", RFC 1990, August\n         1996.\n    [6] \
    \ Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\n         \"RTP:\
    \ A Transport Protocol for Real-Time Applications\", RFC\n         1889, January\
    \ 1996.\n    [7]  Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP Headers\
    \ for\n         Low-Speed Serial Links\", RFC 2508, February 1999.\n    [8]  Bormann,\
    \ C., \"The Multi-Class Extension to Multi-Link PPP\", RFC\n         2686, September\
    \ 1999.\n    [9]  Bormann, C., \"PPP in a Real-time Oriented HDLC-like Framing\"\
    ,\n         RFC 2687, September 1999.\n   [10]  Engan, M., Casner, S. and C. Bormann,\
    \ \"IP Header Compression\n         over PPP\", RFC 2509, February 1999.\n   [11]\
    \  Wroclawski, J.,   \"Specification of the Controlled-Load Network\n        \
    \ Element Service\", RFC 2211, September 1997.\n   [12]  Shenker, S., Partridge,\
    \ C. and R. Guerin.  \"Specification of\n         Guaranteed Quality of Service\"\
    , RFC 2212, September 1997.\n   [13]  ITU-T Recommendation H.223, \"Multiplexing\
    \ protocol for low bit\n         rate multimedia communication\", International\
    \ Telecommunication\n         Union, Telecommunication Standardization Sector\
    \ (ITU-T), March\n         1996.\n   [14]  ITU-T Recommendation H.324, \"Terminal\
    \ for low bit rate\n         multimedia communication\", International Telecommunication\n\
    \         Union, Telecommunication Standardization Sector (ITU-T), March\n   \
    \      1996.\n   [15]  ITU-T Recommendation H.245, \"Control protocol for multimedia\n\
    \         communication\", International Telecommunication Union,\n         Telecommunication\
    \ Standardization Sector (ITU-T), March 1996.\n"
- title: 10.  Author's Address
  contents:
  - "10.  Author's Address\n   Carsten Bormann\n   Universitaet Bremen FB3 TZI\n \
    \  Postfach 330440\n   D-28334 Bremen, GERMANY\n   Phone: +49.421.218-7024\n \
    \  Fax:   +49.421.218-7000\n   EMail: cabo@tzi.org\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Much of the early discussion that led to this document was\
    \ done with\n   Scott Petrack and Cary Fitzgerald.  Steve Casner, Mikael Degermark,\n\
    \   Steve Jackowski, Dave Oran, the other members of the ISSLL subgroup\n   on\
    \ low bitrate links (ISSLOW), and in particular the ISSLL WG co-\n   chairs Eric\
    \ Crawley and John Wroclawski have helped in making this\n   architecture a reality.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
