- title: __initial_text__
  contents:
  - '                           IPv6 Tunnel Broker

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The IPv6 global Internet as of today uses a lot of tunnels over\
    \ the\n   existing IPv4 infrastructure.  Those tunnels are difficult to\n   configure\
    \ and maintain in a large scale environment.  The 6bone has\n   proven that large\
    \ sites and Internet Service Providers (ISPs) can do\n   it, but this process\
    \ is too complex for the isolated end user who\n   already has an IPv4 connection\
    \ and would like to enter the IPv6\n   world.  The motivation for the development\
    \ of the tunnel broker model\n   is to help early IPv6 adopters to hook up to\
    \ an existing IPv6 network\n   (e.g., the 6bone) and to get stable, permanent\
    \ IPv6 addresses and DNS\n   names.  The concept of the tunnel broker was first\
    \ presented at\n   Orlando's IETF in December 1998.  Two implementations were\n\
    \   demonstrated during the Grenoble IPng & NGtrans interim meeting in\n   February\
    \ 1999.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The growth of IPv6 networks started mainly using the transport\n\
    \   facilities offered by the current Internet.  This led to the\n   development\
    \ of several techniques to manage IPv6 over IPv4 tunnels.\n   At present most\
    \ of the 6bone network is built using manually\n   configured tunnels over the\
    \ Internet.  The main drawback of this\n   approach is the overwhelming management\
    \ load for network\n   administrators, who have to perform extensive manual configuration\n\
    \   for each tunnel.  Several attempts to reduce this management overhead\n  \
    \ have already been proposed and each of them presents interesting\n   advantages\
    \ but also solves different problems than the Tunnel Broker,\n   or poses drawbacks\
    \ not present in the Tunnel Broker:\n      -  the use of automatic tunnels with\
    \ IPv4 compatible addresses [1]\n         is a simple mechanism to establish early\
    \ IPv6 connectivity\n         among isolated dual-stack hosts and/or routers.\
    \  The problem\n         with this approach is that it does not solve the address\n\
    \         exhaustion problem of IPv4.  Also there is a great fear to\n       \
    \  include the complete IPv4 routing table into the IPv6 world\n         because\
    \ this would worsen the routing table size problem\n         multiplying it by\
    \ 5;\n      -  6over4 [2] is a site local transition mechanism based on the\n\
    \         use of IPv4 multicast as a virtual link layer.  It does not\n      \
    \   solve the problem of connecting an isolated user to the global\n         IPv6\
    \ Internet;\n      -  6to4 [3] has been designed to allow isolated IPv6 domains,\n\
    \         attached to a wide area network with no native IPv6 support\n      \
    \   (e.g., the IPv4 Internet), to communicate with other such IPv6\n         domains\
    \ with minimal manual configuration.  The idea is to\n         embed IPv4 tunnel\
    \ addresses into the IPv6 prefixes so that any\n         domain border router\
    \ can automatically discover tunnel\n         endpoints for outbound IPv6 traffic.\n\
    \   The Tunnel Broker idea is an alternative approach based on the\n   provision\
    \ of dedicated servers, called Tunnel Brokers, to\n   automatically manage tunnel\
    \ requests coming from the users.  This\n   approach is expected to be useful\
    \ to stimulate the growth of IPv6\n   interconnected hosts and to allow early\
    \ IPv6 network providers to\n   provide easy access to their IPv6 networks.\n\
    \   The main difference between the Tunnel Broker and the 6to4 mechanisms\n  \
    \ is that the they serve a different segment of the IPv6 community:\n      - \
    \ the Tunnel Broker fits well for small isolated IPv6 sites, and\n         especially\
    \ isolated IPv6 hosts on the IPv4 Internet, that want\n         to easily connect\
    \ to an existing IPv6 network;\n      -  the 6to4 approach has been designed to\
    \ allow isolated IPv6\n         sites to easily connect together without having\
    \ to wait for\n         their IPv4 ISPs to deliver native IPv6 services.  This\
    \ is very\n         well suited for extranet and virtual private networks.  Using\n\
    \         6to4 relays, 6to4 sites can also reach sites on the IPv6\n         Internet.\n\
    \   In addition, the Tunnel Broker approach allows IPv6 ISPs to easily\n   perform\
    \ access control on the users enforcing their own policies on\n   network resources\
    \ utilization.\n   This document is intended to present a framework describing\
    \ the\n   guidelines for the provision of a Tunnel Broker service within the\n\
    \   Internet.  It does not specify any protocol but details the general\n   architecture\
    \ of the proposed approach.  It also outlines a set of\n   viable alternatives\
    \ for implementing it.  Section 2 provides an\n   overall description of the Tunnel\
    \ Broker model; Section 3 reports\n   known limitations to the model; Section\
    \ 4 briefly outlines other\n   possible applications of the Tunnel Broker approach;\
    \ Section 5\n   addresses security issues.\n"
- title: 2. Tunnel Broker Model
  contents:
  - "2. Tunnel Broker Model\n   Tunnel brokers can be seen as virtual IPv6 ISPs, providing\
    \ IPv6\n   connectivity to users already connected to the IPv4 Internet.  In the\n\
    \   emerging IPv6 Internet it is expected that many tunnel brokers will\n   be\
    \ available so that the user will just have to pick one.  The list\n   of the\
    \ tunnel brokers should be referenced on a \"well known\" web page\n   (e.g. \
    \ on http://www.ipv6.org) to allow users to choose the \"closest\"\n   one, the\
    \ \"cheapest\" one, or any other one.\n   The tunnel broker model is based on\
    \ the set of functional elements\n   depicted in figure 1.\n                 \
    \                           +------+\n                                       \
    \    /|tunnel|\n                                          / |server|\n       \
    \                                  /  |      |\n                             \
    \           /   +------+\n              +----------+     +------+/    +------+\n\
    \              |dual-stack|     |tunnel|     |tunnel|\n              |   node\
    \   |<--->|broker|<--->|server|\n              |  (user)  |     |      |     |\
    \      |\n              +----------+     +------+\\    +------+\n            \
    \                      |     \\   +------+\n            tunnel end-point     \
    \ v      \\  |tunnel|\n                  /\\            +---+     \\ |server|\n\
    \                  ||            |DNS|      \\|      |\n                  || \
    \           +---+       +------+\n                  ||\n                  || \
    \                   tunnel end-point\n                  ||                   \
    \        /\\\n                  ||                           ||\n            \
    \      |+---------------------------+|\n                  +-----------------------------+\n\
    \                       IPv6 over IPv4 tunnel\n                 Figure 1: the\
    \ Tunnel Broker model\n"
- title: 2.1 Tunnel Broker (TB)
  contents:
  - "2.1 Tunnel Broker (TB)\n   The TB is the place where the user connects to register\
    \ and activate\n   tunnels.  The TB manages tunnel creation, modification and\
    \ deletion\n   on behalf of the user.\n   For scalability reasons the tunnel broker\
    \ can share the load of\n   network side tunnel end-points among several tunnel\
    \ servers.  It\n   sends configuration orders to the relevant tunnel server whenever\
    \ a\n   tunnel has to be created, modified or deleted.  The TB may also\n   register\
    \ the user IPv6 address and name in the DNS.\n   A TB must be IPv4 addressable.\
    \  It may also be IPv6 addressable, but\n   this is not mandatory.  Communications\
    \ between the broker and the\n   servers can take place either with IPv4 or IPv6.\n"
- title: 2.2 Tunnel server (TS)
  contents:
  - "2.2 Tunnel server (TS)\n   A TS is a dual-stack (IPv4 & IPv6) router connected\
    \ to the global\n   Internet.  Upon receipt of a configuration order coming from\
    \ the TB,\n   it creates, modifies or deletes the server side of each tunnel.\
    \  It\n   may also maintain usage statistics for every active tunnel.\n"
- title: 2.3 Using the Tunnel Broker
  contents:
  - "2.3 Using the Tunnel Broker\n   The client of the Tunnel Broker service is a\
    \ dual-stack IPv6 node\n   (host or router) connected to the IPv4 Internet.  Approaching\
    \ the TB,\n   the client should be asked first of all to provide its identity\
    \ and\n   credentials so that proper user authentication, authorization and\n\
    \   (optionally) accounting can be carried out (e.g., relying on existing\n  \
    \ AAA facilities such as RADIUS).  This means that the client and the\n   TB have\
    \ to share a pre-configured or automatically established\n   security association\
    \ to be used to prevent unauthorized use of the\n   service.  With this respect\
    \ the TB can be seen as an access-control\n   server for IPv4 interconnected IPv6\
    \ users.\n   Once the client has been authorized to access the service, it should\n\
    \   provide at least the following information:\n      -  the IPv4 address of\
    \ the client side of the tunnel;\n      -  a name to be used for the registration\
    \ in the DNS of the global\n         IPv6 address assigned to the client side\
    \ of the tunnel;\n      -  the client function (i.e., standalone host or router).\n\
    \   Moreover, if the client machine is an IPv6 router willing to provide\n   connectivity\
    \ to several IPv6 hosts, the client should be asked also\n   to provide some information\
    \ about the amount of IPv6 addresses\n   required.  This allows the TB to allocate\
    \ the client an IPv6 prefix\n   that fits its needs instead of a single IPv6 address.\n\
    \   The TB manages the client requests as follows:\n      -  it first designates\
    \ (e.g., according to some load sharing\n         criteria defined by the TB administrator)\
    \ a Tunnel Server to be\n         used as the actual tunnel end-point at the network\
    \ side;\n      -  it chooses the IPv6 prefix to be allocated to the client; the\n\
    \         prefix length can be anything between 0 and 128, most common\n     \
    \    values being 48 (site prefix), 64 (subnet prefix) or 128 (host\n        \
    \ prefix);\n      -  it fixes a lifetime for the tunnel;\n      -  it automatically\
    \ registers in the DNS the global IPv6 addresses\n         assigned to the tunnel\
    \ end-points;\n      -  it configures the server side of the tunnel;\n      -\
    \  it notifies the relevant configuration information to the\n         client,\
    \ including tunnel parameters and DNS names.\n   After the above configuration\
    \ steps have been carried out (including\n   the configuration of the client),\
    \ the IPv6 over IPv4 tunnel between\n   the client host/router and the selected\
    \ TS is up and working, thus\n   allowing the tunnel broker user to get access\
    \ to the 6bone or any\n   other IPv6 network the TS is connected to.\n"
- title: 2.4 IPv6 address assignment
  contents:
  - "2.4 IPv6 address assignment\n   The IPv6 addresses assigned to both sides of\
    \ each tunnel must be\n   global IPv6 addresses belonging to the IPv6 addressing\
    \ space managed\n   by the TB.\n   The lifetime of these IPv6 addresses should\
    \ be relatively long and\n   potentially longer than the lifetime of the IPv4\
    \ connection of the\n   user.  This is to allow the client to get semipermanent\
    \ IPv6\n   addresses and associated DNS names even though it is connected to the\n\
    \   Internet via a dial-up link and gets dynamically assigned IPv4\n   addresses\
    \ through DHCP.\n"
- title: 2.5 Tunnel management
  contents:
  - "2.5 Tunnel management\n   Active tunnels consume precious resources on the tunnel\
    \ servers in\n   terms of memory and processing time.  For this reason it is advisable\n\
    \   to keep the number of unused tunnels as small as possible deploying a\n  \
    \ well designed tunnel management mechanism.\n   Each IPv6 over IPv4 tunnel created\
    \ by the TB should at least be\n   assigned a lifetime and removed after its expiration\
    \ unless an\n   explicit lifetime extension request is submitted by the client.\n\
    \   Obviously this is not an optimal solution especially for users\n   accessing\
    \ the Internet through short-lived and dynamically addressed\n   IPv4 connections\
    \ (e.g., dial-up links).  In this case a newly\n   established tunnel is likely\
    \ to be used just for a short time and\n   then never again, in that every time\
    \ the user reconnects he gets a\n   new IPv4 address and is therefore obliged\
    \ either to set-up a new\n   tunnel or to update the configuration of the previous\
    \ one.  In such a\n   situation a more effective tunnel management may be achieved\
    \ by\n   having the TS periodically deliver to the TB IPv6 traffic and\n   reachability\
    \ statistics for every active tunnel.  In this way, the TB\n   can enforce a tunnel\
    \ deletion after a period of inactivity without\n   waiting for the expiration\
    \ of the related lifetime which can be\n   relatively longer (e.g., several days).\n\
    \   Another solution may be to implement some kind of tunnel management\n   protocol\
    \ or keep-alive mechanism between the client and the TS (or\n   between the client\
    \ and the TB) so that each tunnel can be immediately\n   released after the user\
    \ disconnects (e.g., removing his tunnel end-\n   point or tearing down his IPv4\
    \ connection to the Internet).  The\n   drawback of this policy mechanism is that\
    \ it also requires a software\n   upgrade on the client machine in order to add\
    \ support for the ad-hoc\n   keep-alive mechanism described above.\n   Moreover,\
    \ keeping track of the tunnel configuration even after the\n   user has disconnected\
    \ from the IPv4 Internet may be worth the extra\n   cost.  In this way, in fact,\
    \ when the user reconnects to the\n   Internet, possibly using a different IPv4\
    \ address, he could just\n   restart the tunnel by getting in touch with the TB\
    \ again.  The TB\n   could then order a TS to re-create the tunnel using the new\
    \ IPv4\n   address of the client but reusing the previously allocated IPv6\n \
    \  addresses.  That way, the client could preserve a nearly permanent\n   (static)\
    \ IPv6 address even though its IPv4 address is dynamic.  It\n   could also preserve\
    \ the associated DNS name.\n"
- title: 2.6 Interactions between client, TB, TS and DNS
  contents:
  - "2.6 Interactions between client, TB, TS and DNS\n   As previously stated, the\
    \ definition of a specific set of protocols\n   and procedures to be used for\
    \ the communication among the various\n   entities in the Tunnel Broker architecture\
    \ is outside of the scope of\n   the present framework document.  Nevertheless,\
    \ in the reminder of\n   this section some viable technical alternatives to support\
    \ client-TB,\n   TB-TS and TB-DNS interactions are briefly described in order\
    \ to help\n   future implementation efforts or standardization initiatives.\n\
    \   The interaction between the TB and the user could be based on http.\n   For\
    \ example the user could provide the relevant configuration\n   information (i.e.,\
    \ the IPv4 address of the client side of the tunnel,\n   etc.) by just filling\
    \ up some forms on a Web server running on the\n   TB.  As a result the server\
    \ could respond with an html page stating\n   that the server end-point of the\
    \ tunnel is configured and displaying\n   all the relevant tunnel information.\n\
    \   After that, the most trivial approach would be to leave the user to\n   configure\
    \ the client end-point of the tunnel on his own.  However, it\n   should be highly\
    \ valuable to support a mechanism to automate this\n   procedure as much as possible.\n\
    \   Several options may be envisaged to assist the Tunnel Broker user in\n   the\
    \ configuration of his dual-stack equipment.  The simplest option\n   is that\
    \ the TB could just prepare personalized activation and de-\n   activation scripts\
    \ to be run off-line on the client machine to\n   achieve easy set-up of the client\
    \ side tunnel end-point.  This\n   solution is clearly the easiest to implement\
    \ and operate in that it\n   does not require any software extension on the client\
    \ machine.\n   However, it raises several security concerns because it may be\n\
    \   difficult for the user to verify that previously downloaded scripts\n   do\
    \ not perform illegal or dangerous operations once executed.\n   The above described\
    \ security issues could be elegantly overcome by\n   defining a new MIME (Multipurpose\
    \ Internet Mail Extension) content-\n   type (e.g., application/tunnel) [4,5]\
    \ to be used by the TB to deliver\n   the tunnel parameters to the client.  In\
    \ this case, there must be a\n   dedicated agent running on the client to process\
    \ this information and\n   actually set-up the tunnel end-point on behalf of the\
    \ user.  This is\n   a very attractive approach which is worth envisaging.  In\
    \ particular,\n   the definition of the new content-type might be the subject\
    \ of a\n   future ad-hoc document.\n   Several options are available also to achieve\
    \ proper interaction\n   between the broker and the Tunnel Servers.  For example\
    \ a set of\n   simple RSH commands over IPsec could be used for this purpose.\n\
    \   Another alternative could be to use SNMP or to adopt any other\n   network\
    \ management solution.\n   Finally, the Dynamic DNS Update protocol [6] should\
    \ be used for\n   automatic DNS update (i.e., to add or delete AAAA, A6 and PTR\
    \ records\n   from the DNS zone reserved for Tunnel Broker users) controlled by\
    \ the\n   TB.  A simple alternative would be for the TB to use a small set of\n\
    \   RSH commands to dynamically update the direct and inverse databases\n   on\
    \ the authoritative DNS server for the Tunnel Broker users zone\n   (e.g.  broker.isp-name.com).\n"
- title: 2.7 Open issues
  contents:
  - "2.7 Open issues\n   Real usage of the TB service may require the introduction\
    \ of\n   accounting/billing functions.\n"
- title: 3. Known limitations
  contents:
  - "3. Known limitations\n   This mechanism may not work if the user is using private\
    \ IPv4\n   addresses behind a NAT box.\n"
- title: 4. Use of the tunnel broker concept in other areas
  contents:
  - "4. Use of the tunnel broker concept in other areas\n   The Tunnel Broker approach\
    \ might be efficiently exploited also to\n   automatically set-up and manage any\
    \ other kind of tunnel, such as a\n   multicast tunnel (e.g., used to interconnect\
    \ multicast islands within\n   the unicast Internet) or an IPsec tunnel.\n   Moreover,\
    \ the idea of deploying a dedicated access-control server,\n   like the TB, to\
    \ securely authorize and assist users that want to gain\n   access to an IPv6\
    \ network might prove useful also to enhance other\n   transition mechanisms.\
    \  For example it would be possible to exploit a\n   similar approach within the\
    \ 6to4 model to achieve easy relay\n   discovery.  This would make life easier\
    \ for early 6to4 adopters but\n   would also allow the ISPs to better control\
    \ the usage of their 6to4\n   relay facilities (e.g., setting up appropriate usage\
    \ policies).\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   All the interactions between the functional elements\
    \ of the proposed\n   architecture need to be secured:\n      -  the interaction\
    \ between the client and TB;\n      -  the interaction between the TB and the\
    \ Tunnel Server;\n      -  the interaction between the TB and the DNS.\n   The\
    \ security techniques adopted for each of the required interactions\n   is dependent\
    \ on the implementation choices.\n   For the client-TB interaction, the usage\
    \ of http allows the\n   exploitation of widely adopted security features, such\
    \ as SSL (Secure\n   Socket Layer) [7], to encrypt data sent to and downloaded\
    \ from the\n   web server.  This also makes it possible to rely on a simple\n\
    \   \"username\" and \"password\" authentication procedure and on existing\n \
    \  AAA facilities (e.g., RADIUS) to enforce access-control.\n   For the TB-TS\
    \ interaction secure SNMP could be adopted [8,9,10].  If\n   the dynamic DNS update\
    \ procedure is used for the TB-DNS interaction,\n   the security issues are the\
    \ same as discussed in [11].  Otherwise, if\n   a simpler approach based on RSH\
    \ commands is used, standard IPsec\n   mechanisms can be applied [12].\n   Furthermore,\
    \ if the configuration of the client is achieved running\n   scripts provided\
    \ by the TB, these scripts must be executed with\n   enough privileges to manage\
    \ network interfaces, such as an\n   administrator/root role.  This can be dangerous\
    \ and should be\n   considered only for early implementations of the Tunnel Broker\n\
    \   approach.  Transferring tunnel configuration parameters in a MIME\n   type\
    \ over https is a more secure approach.\n   In addition a loss of confidentiality\
    \ may occur whenever a dial-up\n   user disconnects from the Internet without\
    \ tearing down the tunnel\n   previously established through the TB.  In fact,\
    \ the TS keeps\n   tunneling the IPv6 traffic addressed to that user to his old\
    \ IPv4\n   address regardless of the fact that in the meanwhile that IPv4\n  \
    \ address could have been dynamically assigned to another subscriber of\n   the\
    \ same dial-up ISP.  This problem could be solved by implementing\n   on every\
    \ tunnel the keep-alive mechanism outlined in section 2.5 thus\n   allowing the\
    \ TB to immediately stop IPv6 traffic forwarding towards\n   disconnected users.\n\
    \   Finally TBs must implement protections against denial of service\n   attacks\
    \ which may occur whenever a malicious user exhausts all the\n   resources available\
    \ on the tunnels server by asking for a lot of\n   tunnels to be established altogether.\
    \  A possible protection against\n   this attack could be achieved by administratively\
    \ limiting the number\n   of tunnels that a single user is allowed to set-up at\
    \ the same time.\n"
- title: 6. Acknowledgments
  contents:
  - "6. Acknowledgments\n   Some of the ideas refining the tunnel broker model came\
    \ from\n   discussion with Perry Metzger and Marc Blanchet.\n"
- title: 7. References
  contents:
  - "7. References\n   [1]  Gilligan, R. and E. Nordmark, \"Transition Mechanisms\
    \ for IPv6\n        Hosts and Routers\", RFC 1933, April 1996.\n   [2]  Carpenter,\
    \ B. and C. Jung, \"Transmission of IPv6 over IPv4\n        Domains without Explicit\
    \ Tunnels\", RFC 2529, March 1999.\n   [3]  Carpenter, B. and K. Moore, \"Connection\
    \ of IPv6 Domains via IPv4\n        Clouds without Explicit Tunnels\", Work in\
    \ Progress.\n   [4]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n\
    \        Extensions (MIME) Part One: Format of Internet Message Bodies,\n    \
    \    RFC 2045, November 1996.\n   [5]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part Two: Media Types\", RFC 2046,\
    \ November\n        1996.\n   [6]  Vixie, P., Editor, Thomson, T., Rekhter, Y.\
    \ and J. Bound,\n        \"Dynamic Updates in the Domain Name System (DNS UPDATE)\"\
    , RFC\n        2136, April 1997.\n   [7]  Guttman, E., Leong, L. and G. Malkin,\
    \ \"Users' Security\n        Handbook\", FYI 34, RFC 2504, February 1999.\n  \
    \ [8]  Wijnen, B., Harrington, D. and R. Presuhn, \"An Architecture for\n    \
    \    Describing SNMP Management Frameworks\", RFC 2571, April 1999.\n   [9]  Blumenthal,\
    \ U. and B. Wijnen, \"User-based Security Model (USM)\n        for version 3 of\
    \ the Simple Network Management Protocol\n        (SNMPv3)\", RFC 2574, April\
    \ 1999.\n   [10] Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based Access\n\
    \        Control Model (VACM) for the Simple Network Management Protocol\n   \
    \     (SNMP)\", RFC 2575, April 1999.\n   [11] Eastlake, D., \"Secure Domain Name\
    \ System Dynamic Update\", RFC\n        2137, April 1997.\n   [12] Kent, S. and\
    \ R. Atkinson, \"Security Architecture for the\n        Internet Protocol\", RFC\
    \ 2401, November 1998.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Alain Durand\n   SUN Microsystems, Inc\n   901 San\
    \ Antonio Road\n   MPK17-202\n   Palo Alto, CA 94303-4900\n   USA\n   Phone: +1\
    \ 650 786 7503\n   EMail: Alain.Durand@sun.com\n   Paolo Fasano S.p.A.\n   CSELT\
    \ S.p.A.\n   Switching and Network Services - Networking\n   via G. Reiss Romoli,\
    \ 274\n   10148 TORINO\n   Italy\n   Phone: +39 011 2285071\n   EMail: paolo.fasano@cselt.it\n\
    \   Ivano Guardini\n   CSELT S.p.A.\n   Switching and Network Services - Networking\n\
    \   via G. Reiss Romoli, 274\n   10148 TORINO\n   Italy\n   Phone: +39 011 2285424\n\
    \   EMail: ivano.guardini@cselt.it\n   Domenico Lento\n   TIM\n   Business Unit\
    \ Project Management\n   via Orsini, 9\n   90100 Palermo\n   Italy\n   Phone:\
    \ +39 091 7583243\n   EMail: dlento@mail.tim.it\n"
- title: 9. Full Copyright Statement
  contents:
  - "9. Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
