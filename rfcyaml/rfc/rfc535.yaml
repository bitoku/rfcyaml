- title: __initial_text__
  contents:
  - "                    Comments on File Access Protocol\n   A file access protocol\
    \ (FAP) of the sort proposed by John Day in RFC\n   520 is a good idea.  The following\
    \ comments suggest improvements\n   (mostly additions) to the protocol described\
    \ in RFC 520.\n   1.  (Philosophical comment)  The intent of both FTP and FAP\
    \ is to\n       make it possible for a user to remotely access files.  In effect,\n\
    \       FTP provides means for a user to have (parts of) file activity of\n  \
    \     the sort typically initiated at the command language level\n       \"slaved\"\
    \ across the network to the site where the file resides.\n       In a similar\
    \ way the intent of FAP is to provide a mechanism\n       which allows activity\
    \ of the sort typically initiated by programs\n       at the operating system\
    \ or monitor level to be \"slaved\" across\n       the network to the site where\
    \ the file resides.  The OPEN, CLOS,\n       SETP, etc.  commands of FAP can be\
    \ viewed as attempts to define\n       \"generic\" file system monitor calls.\
    \  The suggestions made below\n       are further attempts to make features typically\
    \ available to\n       local users also available to remote users via FAP.\n \
    \  2.  The OPEN command should allow for a third OPEN mode called A for\n    \
    \   append.  In terms of its action with respect to a file and file\n       pointer,\
    \ the command\n          OPEN A FOO\n       would be equivalent to the sequence:\n\
    \          OPEN W FOO\n          SETP E\n       The difference would be with respect\
    \ to access control.  Many\n       systems allow a user to control separately\
    \ write and append\n       access to a file (e.g., on TENEX a user usually sets\
    \ the\n       protection on his MESSAGE.TXT file such that anyone can append to\n\
    \       it but only he can write it).  For such systems the append OPEN\n    \
    \   would succeed in many cases in which the write OPEN would fail.\n       The\
    \ principle here is that FAP (to as large as degree as is\n       practical) should\
    \ allow remote users to access files in the same\n       way as local users may.\n\
    \   3.  The protocol as proposed allows for the creation of non-\n       sequential\
    \ files but provides no convenient way for remotely\n       accessing them after\
    \ they are created.  For example if sent to a\n       TENEX server, the sequence:\n\
    \               OPEN W FOO     //byte size assumed = 36\n               SETP B\n\
    \               WRITE 512\n               SETP 1024\n               WRITE 512\n\
    \               CLOS\n       would create a file FOO with two pages (on TENEX\
    \ a page = 512 36\n       bit words).  The two pages would be page #0 and page\
    \ #2; because\n       page #1 does not exist the file is said to have a \"hole\"\
    \ in it.\n       Access to FOO via FAP would be difficult unless the remote user\n\
    \       knew its (page) structure prior to access.  To support remote\n      \
    \ access to files such as FOO, FAP should have means for a user to\n       determine\
    \ a file's structure.  Consider a value-returning command\n       that returns\
    \ the value the file pointer should be set to in order\n       to point to the\
    \ first byte of the next used page (block or\n       record) beyond the current\
    \ position of the file pointer.  With\n       such a command, call it FNUB (Find\
    \ Next Used Block), the\n       following sequence could be used to retrieve a\
    \ holey file such as\n       FOO:\n               OPEN R FILE\n              \
    \ SETP B\n       a:      FNUB               //let x=the value returned\n     \
    \          if x=null\n                  then CLOS\n                  else ( SETP\
    \ x\n                         READ 512   //page size=512\n                   \
    \      goto a )\n       This presumes that the remote user knows the block (page)\
    \ size so\n       that he can properly access the file.  One can imagine files\n\
    \       having blocks of variable size; perhaps FNUB should return two\n     \
    \  values: the file pointer position of the next block and the size\n       of\
    \ that block in bytes.\n   4.  FAP should provide means for a remote user to acquire\
    \ certain\n       status and \"descriptor\" information about a given file.  The\n\
    \       following is a (non-exhaustive) list of information which would\n    \
    \   be useful to a user remotely accessing TENEX files:\n         - user's access\
    \ to file; can he read, write, execute or append\n           the file?\n     \
    \    - size information; byte size used in last write access (OPEN\n         \
    \  W) of the file; file size in bytes (of that size).\n         - file access\
    \ dates; date of create, last read, last write.\n         - on TENEX a user can\
    \ specify different access control for\n           different pages within the\
    \ same file; a remote user should be\n           able to acquire such access control\
    \ information about files\n           (and be able to specify such access control\
    \ when he creates\n           them).\n   5.  There are many applications in which\
    \ a remote user would like to\n       access several files simultaneously in much\
    \ the same way as a\n       local user can.  FAP as proposed can not support such\
    \ multiple\n       file access (of course, the user always has the option of going\n\
    \       through an ICP to establish another connection with the server).\n   \
    \    FAP can be extended in a simple way to support multiple file\n       access\
    \ by including the notion of a \"file handle\" which is used\n       to specify\
    \ which file a given FAP command refers to.  When the\n       user does:\n   \
    \            OPEN R FOO\n       the server's response would include a handle for\
    \ FOO which the\n       user would use in subsequent references to FOO.  The handle\n\
    \       returned would be a string of the server's choice; it might be\n     \
    \  the file's name (FOO), a small integer, etc.  Use of a (server\n       chosen)\
    \ file handle rather than the complete file name enables\n       the server to\
    \ respond to FAP commands without incurring the\n       overhead of re-parsing\
    \ the file name for each command.  To\n       illustrate, consider the following\
    \ sequence which opens a file\n       for reading and one for writing, reads 3\
    \ bytes from the first\n       file as data, computes using the data and writes\
    \ a 2 byte result\n       to the second file:\n               OPEN R FOO   //server\
    \ returns FH as handle\n               OPEN W MOO   //server returns MH as handle\n\
    \               READ 3 FH    //user reads data\n               //User does some\
    \ computation on the 3 bytes\n               WRIT 2  MH   //user writes the result\n\
    \               CLOS MH\n               CLOS FH\n       Reasonable defaults could\
    \ be provided with handles: e.g., a FAP\n       command without a handle refers\
    \ to the same file as the previous\n       command; etc.  (The association of\
    \ a handle with a file is\n       probably better achieved via a separate FAP\
    \ command rather than\n       as a side effect of the OPEN command; e.g.,\n  \
    \             HNDL FOO   )\n   6.  It is important to take local transformations\
    \ into account (page\n       3 of RFC 520).  However, it is equally important\
    \ to allow a\n       remote user to suppress local transformations, if he wishes,\
    \ so\n       that he can access the file as it is stored.  This would enable a\n\
    \       program that manipulates a file to work equally well whether the\n   \
    \    file is local (and accessed \"directly\" via system calls) or\n       remote\
    \ (and accessed \"indirectly\" via system calls that are\n       \"trapped\" and\
    \ transformed into FAP commands which are sent to the\n       remote site).\n\
    \       [ This RFC was put into machine readable form for entry ]\n       [ into\
    \ the online RFC archives by Alex McKenzie with    ]\n       [ support from GTE,\
    \ formerly BBN Corp.            10/99 ]\n"
