- contents:
  - "  Definitions of Managed Objects for Common Open Policy Service (COPS)\n                            Protocol
    Clients\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in TCP/IP based internets.\n   In
    particular it defines objects for managing a client of the Common\n   Open Policy
    Service (COPS) protocol.\n   This memo includes a MIB module in a manner that
    is compliant to the\n   SMIv2 [V2SMI].\n"
  title: Abstract
- contents:
  - "1.  The SNMP Management Framework\n   The SNMP Management Framework presently
    consists of five major\n   components:\n      o  An overall architecture, described
    in an Architecture for\n         Describing SNMP Management Frameworks [ARCH].\n
    \     o  Mechanisms for describing and naming objects and events for the\n         purpose
    of management.  The first version of this Structure of\n         Management Information
    (SMI) is called SMIv1 and described in\n         STD 16, RFC 1155 [V1SMI], STD
    16, RFC 1212 [V1CONCISE] and RFC\n         1215 [V1TRAPS].  The second version,
    called SMIv2, is described\n         in STD 58, RFC 2578 [V2SMI], STD 58, RFC
    2579 [V2TC] and STD\n         58, RFC 2580 [V2CONFORM].\n      o  Message protocols
    for transferring management information.  The\n         first version of the SNMP
    message protocol is called SNMPv1 and\n         described in STD 15, RFC 1157
    [V1PROTO].  A second version of\n         the SNMP message protocol, which is
    not an Internet standards\n         track protocol, is called SNMPv2c and described
    in RFC 1901\n         [V2COMMUNITY] and RFC 1906 [V2TRANS].  The third version
    of the\n         message protocol is called SNMPv3 and described in RFC1906\n
    \        [V2TRANS], Message Processing and Dispatching [V3MPC] and\n         User-based
    Security Model [V3USM].\n      o  Protocol operations for accessing management
    information.  The\n         first set of protocol operations and associated PDU
    formats is\n         described in STD 15, RFC 1157 [V1PROTO].  A second set of\n
    \        protocol operations and associated PDU formats is described in\n         RFC
    1905 [V2PROTO].\n      o  A set of fundamental applications described in SNMPv3\n
    \        Applications [V3APPS] and the view-based access control\n         mechanism
    described in View-based Access Control Model\n         [V3VACM].\n   A more detailed
    introduction to the current SNMP Management Framework\n   can be found in RFC
    2570 [V3INTRO].\n   Managed objects are accessed via a virtual information store,
    termed\n   the Management Information Base or MIB.  Objects in the MIB are\n   defined
    using the mechanisms defined in the SMI.\n   This memo specifies a MIB module
    that is compliant to the SMIv2.  A\n   MIB conforming to the SMIv1 can be produced
    through the appropriate\n   translations.  The resulting translated MIB must be
    semantically\n   equivalent, except where objects or events are omitted because
    no\n   translation is possible (use of Counter64).  Some machine readable\n   information
    in SMIv2 will be converted into textual descriptions in\n   SMIv1 during the translation
    process.  However, this loss of machine\n   readable information is not considered
    to change the semantics of the\n   MIB.\n"
  title: 1.  The SNMP Management Framework
- contents:
  - "2.  Overview\n   The COPS protocol [COPS] is a client-server protocol intended
    for the\n   communication of policy requests and decisions between a Policy\n
    \  Enforcement Point (PEP) and a Policy Decision Point (PDP).  The PEP\n   acts
    as a COPS client in this scenario.  The model for policy out-\n   sourcing, of
    which the COPS protocol provides one part, is described\n   in [FRAMEWORK].\n"
  - contents:
    - "2.1.  Scope\n   This MIB is intended to provide management of the important
      features\n   of a COPS protocol client module. It does not provide management
      for\n   a COPS server - this is outside the scope of the current memo.  It\n
      \  provides for monitoring of status and protocol statistics, as well as\n   for
      configuration of the client, in particular for telling it where\n   to locate
      its servers.  Other mechanisms for achieving this function\n   without SNMP
      configuration might include use of the Service Location\n   Protocol [SRVLOC]
      although this is outside the scope of this memo and\n   are not specified by
      the COPS protocol itself.\n   This MIB also does not provide management of specific
      COPS client-\n   types e.g., for use with the RSVP protocol [RSVP][COPSRSVP].\n"
    title: 2.1.  Scope
  title: 2.  Overview
- contents:
  - "3.  Structure of COPS Client MIB\n   Objects in this MIB are arranged into groups.
    \ Each group is\n   organized as a set of related objects. The overall structure
    is\n   described below.\n"
  - contents:
    - "3.1.  copsClientCapabilitiesGroup\n   This group contains objects that represent
      COPS protocol capabilities\n   implemented by this COPS client.\n"
    title: 3.1.  copsClientCapabilitiesGroup
  - contents:
    - "3.2.  copsClientStatusGroup\n   This group contains objects that indicate the
      current status of\n   connection(s) to COPS servers, including per-server protocol\n
      \  statistics.  It maintains last-known statistics for all of the\n   servers
      with which the client has ever been connected since agent\n   restart.\n"
    title: 3.2.  copsClientStatusGroup
  - contents:
    - "3.3.  copsConfigGroup\n   This group contains objects that allow for configuration
      of COPS\n   server addresses and the order to which connections should be\n
      \  attempted.  It contains a table of per-server objects as well as\n   scalars
      for configuration of the retry algorithm to be used by a\n   client to obtain
      a connection to an appropriate server.\n"
    title: 3.3.  copsConfigGroup
  - contents:
    - "3.4.  Textual Conventions\n   The datatypes CopsClientState, CopsServerEntryType,
      CopsErrorCode,\n   CopsTcpPort and CopsAuthType are used as textual conventions
      in this\n   document.  These textual conventions have NO effect on either the\n
      \  syntax nor the semantics of any managed object.  Objects defined\n   using
      these conventions are always encoded by means of the rules that\n   define their
      primitive type.  Hence, no changes to the SMI or the\n   SNMP are necessary
      to accommodate these textual conventions which are\n   adopted merely for the
      convenience of readers.\n"
    title: 3.4.  Textual Conventions
  - contents:
    - '3.5.  Relationship to Other MIBs

      '
    - contents:
      - "3.5.1.  Relationship to the 'system' group\n   This MIB contains definitions
        for a single COPS protocol client\n   represented by a single SNMP agent and
        instance of the MIB-2 system\n   group [MIB2].  It does not address the case
        of multiple co-located\n   COPS protocol clients.\n"
      title: 3.5.1.  Relationship to the 'system' group
    title: 3.5.  Relationship to Other MIBs
  title: 3.  Structure of COPS Client MIB
- contents:
  - '4.  Definitions for COPS Client MIB

    '
  - 'COPS-CLIENT-MIB DEFINITIONS ::= BEGIN

    '
  - '-- -------------------------------------------------------------

    '
  - '-- -------------------------------------------------------------

    '
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, Counter32, Integer32,\n    Unsigned32,
    mib-2\n        FROM SNMPv2-SMI\n    TimeStamp, TimeInterval, RowStatus, TEXTUAL-CONVENTION\n
    \       FROM SNMPv2-TC\n    MODULE-COMPLIANCE, OBJECT-GROUP\n        FROM SNMPv2-CONF\n
    \   InetAddressType, InetAddress\n        FROM INET-ADDRESS-MIB;\n"
  - '--    REFERENCE

    '
  - '--        "The COPS (Common Open Policy Service) Protocol RFC 2748

    '
  - "copsClientMIB MODULE-IDENTITY\n    LAST-UPDATED \"200009280000Z\"\n    ORGANIZATION
    \"IETF RSVP Admission Policy Working Group\"\n    CONTACT-INFO\n        \"       Andrew
    Smith (WG co-chair)\n         Phone: +1 408 579 2821\n         Email: ah_smith@pacbell.net\n
    \               Mark Stevens (WG co-chair)\n         Phone: +1 978 287 9102\n
    \        Email: markstevens@lucent.com\n         Editor: Andrew Smith\n         Phone:
    +1 408 579 2821\n         Email: ah_smith@pacbell.net\n         Editor: David
    Partain\n         Phone: +46 13 28 41 44\n         Email: David.Partain@ericsson.com\n
    \        Editor: John Seligson\n         Phone: +1 408 495 2992\n         Email:
    jseligso@nortelnetworks.com\"\n    DESCRIPTION\n        \"The COPS Client MIB
    module\"\n    REVISION    \"200009280000Z\"\n    DESCRIPTION \"This version published
    as RFC 2940\"\n    ::= { mib-2 89 }\n"
  - 'copsClientMIBObjects OBJECT IDENTIFIER ::= { copsClientMIB 1 }

    '
  - '-- -------------------------------------------------------------

    '
  - '-- Textual Conventions

    '
  - '-- -------------------------------------------------------------

    '
  - "CopsClientState ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
    \       \"A value indicating the state of a COPS client.\"\n    SYNTAX      INTEGER
    {\n            copsClientInvalid(1),      -- default state.\n            copsClientTcpconnected(2),
    -- TCP connection up but COPS\n                                       -- not yet
    open.\n            copsClientAuthenticating(3), -- TCP connection up but still\n
    \                                        -- authenticating.\n            copsClientSecAccepted(4),
    \ -- connection authenticated.\n            copsClientAccepted(5),     -- COPS
    server accepted client.\n            copsClientTimingout(6)     -- Keepalive timer
    has expired,\n                                       -- client is in process of\n
    \                                      -- tearing down connection.\n    }\n"
  - "CopsServerEntryType ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
    \       \"A value indicating how a COPS server entry came into existence.\"\n
    \   SYNTAX      INTEGER {\n            copsServerStatic(1),        -- configured
    by manager\n            copsServerRedirect(2)       -- notified by COPS server\n
    \   }\n"
  - "CopsErrorCode ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
    \       \"A value describing a COPS protocol error. Codes are identical\n         to
    those used by the COPS protocol itself.\"\n    SYNTAX      INTEGER {\n            errorOther(0),
    \            -- none of the below\n            errorBadHandle(1),\n            errorInvalidHandleReference(2),\n
    \           errorBadMessageFormat(3),\n            errorUnableToProcess(4),\n
    \           errorMandatoryClientSiMissing(5),\n            errorUnsupportedClientType(6),\n
    \           errorMandatoryCopsObjectMissing(7),\n            errorClientFailure(8),\n
    \           errorCommunicationFailure(9),\n            errorUnspecified(10),        --
    client-type specific subcode\n            errorShuttingDown(11),\n            errorRedirectToPreferredServer(12),\n
    \           errorUnknownCopsObject(13),\n            errorAuthenticationFailure(14),\n
    \           errorAuthenticationMissing(15)\n    }\n"
  - '--  REFERENCE

    '
  - '--      "RFC 2748 section 2.2.8"

    '
  - "CopsTcpPort ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
    \       \"A value indicating a TCP protocol port number.\"\n    SYNTAX      INTEGER
    (0..65535)\n"
  - "CopsAuthType ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n
    \       \"A value indicating a type of security authentication mechanism.\"\n
    \   SYNTAX      INTEGER {\n        authNone(0),\n        authOther(1),\n        authIpSecAh(2),\n
    \       authIpSecEsp(3),\n        authTls(4),\n        authCopsIntegrity(5)\n
    \   }\n"
  - '-- -------------------------------------------------------------

    '
  - "copsClientCapabilitiesGroup OBJECT IDENTIFIER\n                            ::=
    { copsClientMIBObjects 1 }\n"
  - '-- -------------------------------------------------------------

    '
  - '--

    '
  - '-- Capabilities of the COPS client to connect to a COPS server:

    '
  - '--

    '
  - "copsClientCapabilities OBJECT-TYPE\n    SYNTAX      BITS {\n        copsClientVersion1(0),
    \    -- supports version1 of COPS protocol\n        copsClientAuthIpSecAh(1) ,
    -- supports IP-SEC Authentication\n        copsClientAuthIpSecEsp(2), -- supports
    IP-SEC Encryption\n        copsClientAuthTls(3),      -- supports Transport-Layer
    Security\n        copsClientAuthInteg(4)     -- supports COPS Integrity\n    }\n
    \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"A
    list of the optional capabilities that this COPS client\n        supports.\"\n
    \   ::= { copsClientCapabilitiesGroup 1 }\n"
  - '-- -------------------------------------------------------------

    '
  - 'copsClientStatusGroup OBJECT IDENTIFIER ::= { copsClientMIBObjects 2 }

    '
  - '-- -------------------------------------------------------------

    '
  - '--

    '
  - '-- Current status of COPS server connections, all read-only.

    '
  - '--

    '
  - "copsClientServerCurrentTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF CopsClientServerCurrentEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A
    table of information regarding COPS servers as seen from the\n        point of
    view of a COPS client. This table contains entries\n        for both statically-configured
    and dynamically-learned servers\n        (from a PDP Redirect operation). One
    entry exists in this table\n        for each COPS Client-Type served by the COPS
    server. In addition,\n        an entry will exist with copsClientServerClientType
    0 (zero)\n        representing information about the underlying connection itself:\n
    \       this is consistent with the COPS specification which reserves\n        this
    value for this purpose.\"\n    ::= { copsClientStatusGroup 1 }\n"
  - "copsClientServerCurrentEntry OBJECT-TYPE\n    SYNTAX      CopsClientServerCurrentEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A
    set of information regarding a single COPS server serving\n        a single COPS
    Client-Type from the point of view of a COPS\n        client.\"\n    INDEX { copsClientServerAddressType,
    copsClientServerAddress,\n            copsClientServerClientType }\n    ::= {
    copsClientServerCurrentTable 1 }\n"
  - "CopsClientServerCurrentEntry ::=\n    SEQUENCE {\n        copsClientServerAddressType
    \        InetAddressType,\n        copsClientServerAddress             InetAddress,\n
    \       copsClientServerClientType          INTEGER,\n        copsClientServerTcpPort
    \            CopsTcpPort,\n        copsClientServerType                CopsServerEntryType,\n
    \       copsClientServerAuthType            CopsAuthType,\n        copsClientServerLastConnAttempt
    \    TimeStamp,\n        copsClientState                     CopsClientState,\n
    \       copsClientServerKeepaliveTime       TimeInterval,\n        copsClientServerAccountingTime
    \     TimeInterval,\n        copsClientInPkts                    Counter32,\n
    \       copsClientOutPkts                   Counter32,\n        copsClientInErrs
    \                   Counter32,\n        copsClientLastError                 CopsErrorCode,\n
    \       copsClientTcpConnectAttempts        Counter32,\n        copsClientTcpConnectFailures
    \       Counter32,\n        copsClientOpenAttempts              Counter32,\n        copsClientOpenFailures
    \             Counter32,\n        copsClientErrUnsupportClienttype    Counter32,\n
    \       copsClientErrUnsupportedVersion     Counter32,\n        copsClientErrLengthMismatch
    \        Counter32,\n        copsClientErrUnknownOpcode          Counter32,\n
    \       copsClientErrUnknownCnum            Counter32,\n        copsClientErrBadCtype
    \              Counter32,\n        copsClientErrBadSends               Counter32,\n
    \       copsClientErrWrongObjects           Counter32,\n        copsClientErrWrongOpcode
    \           Counter32,\n        copsClientKaTimedoutClients         Counter32,\n
    \       copsClientErrAuthFailures           Counter32,\n        copsClientErrAuthMissing
    \           Counter32\n    }\n"
  - "copsClientServerAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS
    \ not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The type
    of address in copsClientServerAddress.\"\n    ::= { copsClientServerCurrentEntry
    1 }\n"
  - "copsClientServerAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS
    \ not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The IPv4,
    IPv6 or DNS address of a COPS Server. Note that,\n        since this is an index
    to the table, the DNS name must be\n        short enough to fit into the maximum
    length of indices allowed\n        by the management protocol in use.\"\n    REFERENCE\n
    \       \"RFC 2748 section 2.3\"\n    ::= { copsClientServerCurrentEntry 2 }\n"
  - "copsClientServerClientType OBJECT-TYPE\n    SYNTAX      INTEGER (0..65535)\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The
    COPS protocol Client-Type for which this entry\n        applies. Multiple Client-Types
    can be served by a single\n        COPS server. The value 0 (zero) indicates that
    this\n        entry contains information about the underlying connection\n        itself.\"\n
    \   REFERENCE\n        \"RFC 2748 section 6, IANA\"\n    ::= { copsClientServerCurrentEntry
    3 }\n"
  - "copsClientServerTcpPort OBJECT-TYPE\n    SYNTAX      CopsTcpPort\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"The TCP port
    number on the COPS server to which the\n        client should connect/is connected.\"\n
    \   ::= { copsClientServerCurrentEntry 4 }\n"
  - "copsClientServerType OBJECT-TYPE\n    SYNTAX      CopsServerEntryType\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"Indicator of
    the source of this COPS server information.\n        COPS servers may be configured
    by network management\n        into copsClientServerConfigTable and appear in
    this entry\n        with type copsServerStatic(1). Alternatively, the may be\n
    \       notified from another COPS server by means of the COPS\n        PDP-Redirect
    mechanism and appear as copsServerRedirect(2).\"\n    ::= { copsClientServerCurrentEntry
    5 }\n"
  - "copsClientServerAuthType OBJECT-TYPE\n    SYNTAX      CopsAuthType\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"Indicator of
    the current security mode in use between\n        client and this COPS server.\"\n
    \   ::= { copsClientServerCurrentEntry 6 }\n"
  - "copsClientServerLastConnAttempt OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"Timestamp of
    the last time that this client attempted to\n        connect to this COPS server.\"\n
    \   ::= { copsClientServerCurrentEntry 7 }\n"
  - "copsClientState  OBJECT-TYPE\n    SYNTAX      CopsClientState\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"The state of
    the connection and COPS protocol with respect\n        to this COPS server.\"\n
    \   ::= { copsClientServerCurrentEntry 8 }\n"
  - "copsClientServerKeepaliveTime OBJECT-TYPE\n    SYNTAX      TimeInterval\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"The value of
    the COPS protocol Keepalive timeout, in\n        centiseconds, currently in use
    by this client, as\n        specified by this COPS server in the Client-Accept
    operation.\n        A value of zero indicates no keepalive activity is expected.\"\n
    \   REFERENCE\n        \"RFC 2748 section 3.7, 4.4\"\n    ::= { copsClientServerCurrentEntry
    9 }\n"
  - "copsClientServerAccountingTime   OBJECT-TYPE\n    SYNTAX      TimeInterval\n
    \   MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The
    value of the COPS protocol Accounting timeout, in\n        centiseconds, currently
    in use by this client, as specified\n        by the COPS server in the Client-Accept
    operation. A value\n        of zero indicates no accounting activity is to be
    performed.\"\n    REFERENCE\n        \"RFC 2748 section 3.7\"\n    ::= { copsClientServerCurrentEntry
    10 }\n"
  - "copsClientInPkts OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS  read-only\n
    \   STATUS      current\n    DESCRIPTION\n        \"A count of the total number
    of COPS messages that this client\n        has received from this COPS server
    marked for this Client-Type.\n        This value is cumulative since agent restart
    and is not zeroed\n        on new connections.\"\n    ::= { copsClientServerCurrentEntry
    11 }\n"
  - "copsClientOutPkts OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS  read-only\n
    \   STATUS      current\n    DESCRIPTION\n        \"A count of the total number
    of COPS messages that this client\n        has sent to this COPS server marked
    for this Client-Type. This\n        value is cumulative since agent restart and
    is not zeroed on new\n        connections.\"\n    ::= { copsClientServerCurrentEntry
    12 }\n"
  - "copsClientInErrs OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS  read-only\n
    \   STATUS      current\n    DESCRIPTION\n        \"A count of the total number
    of COPS messages that this client\n        has received from this COPS server
    marked for this Client-Type\n        that contained errors in syntax. This value
    is cumulative since\n        agent restart and is not zeroed on new connections.\"\n
    \   ::= { copsClientServerCurrentEntry 13 }\n"
  - "copsClientLastError OBJECT-TYPE\n    SYNTAX      CopsErrorCode\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"The code contained
    in the last COPS protocol Error Object\n        received by this client from this
    COPS server marked for this\n        Client-Type. This value is not zeroed on
    COPS Client-Open\n        operations.\"\n    REFERENCE\n        \"RFC 2748 section
    2.2.8\"\n    ::= { copsClientServerCurrentEntry 14 }\n"
  - "copsClientTcpConnectAttempts OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    number of times that this COPS client has tried\n        (successfully or otherwise)
    to open an TCP connection to a COPS\n        server. This value is cumulative
    \ since agent restart and is not\n        zeroed on new connections. This value
    is not incremented for\n        entries representing a non-zero Client-Type.\"\n
    \   ::= { copsClientServerCurrentEntry 15 }\n"
  - "copsClientTcpConnectFailures OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    number of times that this COPS client has failed\n        to open an TCP connection
    to a COPS server. This value is\n        cumulative since agent restart and is
    not zeroed on new\n        connections. This value is not incremented for\n        entries
    representing a non-zero Client-Type.\"\n    ::= { copsClientServerCurrentEntry
    16 }\n"
  - "copsClientOpenAttempts OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    number of times that this COPS client has tried\n        to perform a COPS Client-Open
    to a COPS server for this\n        Client-Type. This value is cumulative since
    agent restart and is\n        not zeroed on new connections.\"\n    ::= { copsClientServerCurrentEntry
    17 }\n"
  - "copsClientOpenFailures OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    number of times that this COPS client has failed\n        to perform a COPS Client-Open
    to a COPS server for this\n        Client-Type. This value is cumulative since
    agent restart and is\n        not zeroed on new connections.\"\n    ::= { copsClientServerCurrentEntry
    18 }\n"
  - "copsClientErrUnsupportClienttype OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers that referred to Client-Types\n        that are unsupported by this client.
    This value is cumulative\n        since agent restart and is not zeroed on new
    connections. This\n        value is not incremented for entries representing a
    non-zero\n        Client-Type.\"\n    ::= { copsClientServerCurrentEntry 19 }\n"
  - "copsClientErrUnsupportedVersion OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers marked for this Client-Type that\n        had a COPS protocol Version
    number that is unsupported by this\n        client. This value is cumulative since
    agent restart and is not\n        zeroed on new connections.\"\n    ::= { copsClientServerCurrentEntry
    20 }\n"
  - "copsClientErrLengthMismatch OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers marked for this Client-Type that\n        had a COPS protocol Message
    Length that did not match the actual\n        received message. This value is
    cumulative since agent restart\n        and is not zeroed on new connections.\"\n
    \   ::= { copsClientServerCurrentEntry 21 }\n"
  - "copsClientErrUnknownOpcode OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers marked for this Client-Type that\n        had a COPS protocol Op Code
    that was unrecognised by this\n        client. This value is cumulative since
    agent restart and is not\n        zeroed on new connections.\"\n    ::= { copsClientServerCurrentEntry
    22 }\n"
  - "copsClientErrUnknownCnum OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers marked for this Client-Type that\n        contained a COPS protocol object
    C-Num that was unrecognised by\n        this client. This value is cumulative
    since agent restart and is\n        not zeroed on new connections.\"\n    ::=
    { copsClientServerCurrentEntry 23 }\n"
  - "copsClientErrBadCtype OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS  read-only\n
    \   STATUS      current\n    DESCRIPTION\n        \"A count of the total number
    of COPS messages that this client\n        has received from COPS servers marked
    for this Client-Type that\n        contained a COPS protocol object C-Type that
    was not defined for\n        the C-Nums known by this client. This value is cumulative
    since\n        agent restart and is not zeroed on new connections.\"\n    ::=
    { copsClientServerCurrentEntry 24 }\n"
  - "copsClientErrBadSends OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS  read-only\n
    \   STATUS      current\n    DESCRIPTION\n        \"A count of the total number
    of COPS messages that this client\n        attempted to send to COPS servers marked
    for this Client-Type\n        that resulted in a transmit error. This value is
    cumulative\n        since agent restart and is not zeroed on new connections.\"\n
    \   ::= { copsClientServerCurrentEntry 25 }\n"
  - "copsClientErrWrongObjects OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers marked for this Client-Type that\n        did not contain a permitted
    set of COPS protocol objects. This\n        value is cumulative since agent restart
    and is not zeroed on new\n        connections.\"\n    ::= { copsClientServerCurrentEntry
    26 }\n"
  - "copsClientErrWrongOpcode OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of COPS messages that this client\n        has received from COPS
    servers marked for this Client-Type that\n        had a COPS protocol Op Code
    that should not have been sent to a\n        COPS client e.g. Open-Requests. This
    value is cumulative since\n        agent restart and is not zeroed on new connections.\"\n
    \   ::= { copsClientServerCurrentEntry 27 }\n"
  - "copsClientKaTimedoutClients OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of times that this client has\n        been shut down for this Client-Type
    by COPS servers that had\n        detected a COPS protocol Keepalive timeout.
    This value is\n        cumulative since agent restart and is not zeroed on new\n
    \       connections.\"\n    ::= { copsClientServerCurrentEntry 28 }\n"
  - "copsClientErrAuthFailures OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of times that this client has\n        received a COPS message marked
    for this Client-Type which\n        could not be authenticated using the authentication
    mechanism\n        used by this client.\"\n    ::= { copsClientServerCurrentEntry
    29 }\n"
  - "copsClientErrAuthMissing OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS      current\n    DESCRIPTION\n        \"A count of the
    total number of times that this client has\n        received a COPS message marked
    for this Client-Type which did not\n        contain authentication information.\"\n
    \   ::= { copsClientServerCurrentEntry 30 }\n"
  - '-- -------------------------------------------------------------

    '
  - 'copsClientConfigGroup OBJECT IDENTIFIER ::= { copsClientMIBObjects 3 }

    '
  - '-- -------------------------------------------------------------

    '
  - "copsClientServerConfigTable OBJECT-TYPE\n     SYNTAX      SEQUENCE OF CopsClientServerConfigEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Table
    of possible COPS servers to try to connect to in order\n        of copsClientServerConfigPriority.
    There may be multiple\n        entries in this table for the same server and client-type
    which\n        specify different security mechanisms: these mechanisms will\n
    \       be attempted by the client in the priority order given. Note\n        that
    a server learned by means of PDPRedirect always takes\n        priority over any
    of these configured entries.\"\n    ::= { copsClientConfigGroup 1 }\n"
  - "copsClientServerConfigEntry OBJECT-TYPE\n    SYNTAX      CopsClientServerConfigEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A
    set of configuration information regarding a single\n        COPS server from
    the point of view of a COPS client.\"\n    INDEX { copsClientServerConfigAddrType,\n
    \           copsClientServerConfigAddress,\n            copsClientServerConfigClientType,\n
    \           copsClientServerConfigAuthType }\n    ::= { copsClientServerConfigTable
    1 }\n"
  - "CopsClientServerConfigEntry ::=\n    SEQUENCE {\n        copsClientServerConfigAddrType
    \     InetAddressType,\n        copsClientServerConfigAddress       InetAddress,\n
    \       copsClientServerConfigClientType    INTEGER,\n        copsClientServerConfigAuthType
    \     CopsAuthType,\n        copsClientServerConfigTcpPort       CopsTcpPort,\n
    \       copsClientServerConfigPriority      Integer32,\n        copsClientServerConfigRowStatus
    \    RowStatus\n    }\n"
  - "copsClientServerConfigAddrType OBJECT-TYPE\n    SYNTAX      InetAddressType\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The
    type of address in copsClientServerConfigAddress.\"\n    ::= { copsClientServerConfigEntry
    1 }\n"
  - "copsClientServerConfigAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS
    \ not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The IPv4,
    IPv6 or DNS address of a COPS Server. Note that,\n        since this is an index
    to the table, the DNS name must be\n        short enough to fit into the maximum
    length of indices allowed\n        by the management protocol in use.\"\n    REFERENCE\n
    \       \"RFC 2748 section 2.3\"\n    ::= { copsClientServerConfigEntry 2 }\n"
  - "copsClientServerConfigClientType OBJECT-TYPE\n    SYNTAX      INTEGER (0..65535)\n
    \   MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The
    COPS protocol Client-Type for which this entry\n        applies and for which
    this COPS server is capable\n        of serving. Multiple Client-Types can be
    served by a\n        single COPS server.\"\n    REFERENCE\n        \"RFC 2748
    section 6, IANA\"\n    ::= { copsClientServerConfigEntry 3 }\n"
  - "copsClientServerConfigAuthType OBJECT-TYPE\n    SYNTAX      CopsAuthType\n    MAX-ACCESS
    \ not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The type
    of authentication mechanism for this COPS client\n        to request when negotiating
    security at the start of a\n        connection to a COPS server.\"\n    REFERENCE\n
    \       \"RFC 2748 section 4.\"\n    ::= { copsClientServerConfigEntry 4 }\n"
  - "copsClientServerConfigTcpPort OBJECT-TYPE\n    SYNTAX      CopsTcpPort\n    MAX-ACCESS
    \ read-create\n    STATUS      current\n    DESCRIPTION\n        \"The TCP port
    number on the COPS server to which the\n        client should connect.\"\n    ::=
    { copsClientServerConfigEntry 5 }\n"
  - "copsClientServerConfigPriority OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS
    \ read-create\n    STATUS      current\n    DESCRIPTION\n        \"The priority
    of this entry relative to other entries.\n        COPS client will attempt to
    contact COPS servers for the\n        appropriate Client-Type. Higher numbers
    are tried first. The\n        order to be used amongst server entries with the
    same priority\n        is undefined. COPS servers that are notified to the client
    using\n        the COPS protocol PDP-Redirect mechanism are always used in\n        preference
    to any entries in this table.\"\n    ::= { copsClientServerConfigEntry 6 }\n"
  - "copsClientServerConfigRowStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS
    \ read-create\n    STATUS      current\n    DESCRIPTION\n        \"State of this
    entry in the table.\"\n    ::= { copsClientServerConfigEntry 7 }\n"
  - "copsClientServerConfigRetryAlgrm OBJECT-TYPE\n    SYNTAX      INTEGER {\n                    other(1),\n
    \                   sequential(2),\n                    roundRobin(3)\n                }\n
    \   MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n        \"The
    algorithm by which the client should retry when it\n         fails to connect
    to a COPS server.\"\n    DEFVAL { sequential }\n    ::= { copsClientConfigGroup
    2 }\n"
  - "copsClientServerConfigRetryCount OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS
    \ read-write\n    STATUS      current\n    DESCRIPTION\n        \"A retry count
    for use by the retry algorithm.  Each retry\n         algorithm needs to specify
    how it uses this value.\n         For the 'sequential(2)' algorithm, this value
    is the\n         number of times the client should retry to connect\n         to
    one COPS server before moving on to another.\n         For the 'roundRobin(3)'
    algorithm, this value is not used.\"\n    DEFVAL { 1 }\n    ::= { copsClientConfigGroup
    3 }\n"
  - "copsClientServerConfigRetryIntvl OBJECT-TYPE\n    SYNTAX      TimeInterval\n
    \   UNITS       \"centi-seconds\"\n    MAX-ACCESS  read-write\n    STATUS      current\n
    \   DESCRIPTION\n        \"A retry interval for use by the retry algorithm.  Each
    retry\n         algorithm needs to specify how it uses this value.\n         For
    the 'sequential(2)' algorithm, this value is the time to\n         wait between
    retries of a connection to the same COPS server.\n         For the 'roundRobin(3)'
    algorithm, the client always attempts\n         to connect to each Server in turn,
    until one succeeds or they\n         all fail; if they all fail, then the client
    waits for the value\n         of this interval before restarting the algorithm.\"\n
    \   DEFVAL { 1000 }\n    ::= { copsClientConfigGroup 4 }\n"
  - '-- -------------------------------------------------------------

    '
  - '-- Conformance Information

    '
  - '-- -------------------------------------------------------------

    '
  - 'copsClientConformance OBJECT IDENTIFIER ::= { copsClientMIB 2 }

    '
  - 'copsClientGroups OBJECT IDENTIFIER ::= { copsClientConformance 1 }

    '
  - 'copsClientCompliances OBJECT IDENTIFIER ::= { copsClientConformance 2 }

    '
  - '-- -------------------------------------------------------------

    '
  - '-- units of conformance

    '
  - '-- -------------------------------------------------------------

    '
  - "copsDeviceStatusGroup OBJECT-GROUP\n    OBJECTS {\n        copsClientCapabilities,\n
    \       copsClientServerTcpPort, copsClientServerType,\n        copsClientServerAuthType,
    copsClientServerLastConnAttempt,\n        copsClientState, copsClientServerKeepaliveTime,\n
    \       copsClientServerAccountingTime, copsClientInPkts,\n        copsClientOutPkts,
    copsClientInErrs, copsClientLastError,\n        copsClientTcpConnectAttempts,
    copsClientTcpConnectFailures,\n        copsClientOpenAttempts, copsClientOpenFailures,\n
    \       copsClientErrUnsupportClienttype,\n        copsClientErrUnsupportedVersion,
    copsClientErrLengthMismatch,\n        copsClientErrUnknownOpcode, copsClientErrUnknownCnum,\n
    \       copsClientErrBadCtype, copsClientErrBadSends,\n        copsClientErrWrongObjects,
    copsClientErrWrongOpcode,\n        copsClientKaTimedoutClients, copsClientErrAuthFailures,\n
    \       copsClientErrAuthMissing\n    }\n    STATUS      current\n    DESCRIPTION\n
    \       \"A collection of objects for monitoring the status of\n        connections
    to COPS servers and statistics for a COPS client.\"\n    ::= { copsClientGroups
    1 }\n"
  - "copsDeviceConfigGroup OBJECT-GROUP\n    OBJECTS {\n        copsClientServerConfigTcpPort,
    copsClientServerConfigPriority,\n        copsClientServerConfigRowStatus,\n        copsClientServerConfigRetryAlgrm,\n
    \       copsClientServerConfigRetryCount,\n        copsClientServerConfigRetryIntvl\n
    \   }\n    STATUS      current\n    DESCRIPTION\n        \"A collection of objects
    for configuring COPS server\n        information.\"\n    ::= { copsClientGroups
    2 }\n"
  - '-- -------------------------------------------------------------

    '
  - '-- compliance statements

    '
  - '-- -------------------------------------------------------------

    '
  - "copsClientCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n
    \       \"The compliance statement for device support of\n        management of
    the COPS client.\"\n    MODULE\n        MANDATORY-GROUPS {\n            copsDeviceStatusGroup,
    copsDeviceConfigGroup\n        }\n        OBJECT      copsClientServerConfigTcpPort\n
    \       MIN-ACCESS  read-only\n        DESCRIPTION\n            \"Write access
    is required only if the device supports the\n            configuration of COPS
    server information.\"\n        OBJECT      copsClientServerConfigPriority\n        MIN-ACCESS
    \ read-only\n        DESCRIPTION\n            \"Write access is required only
    if the device supports the\n            configuration of COPS server information.\"\n
    \       OBJECT      copsClientServerConfigRowStatus\n        MIN-ACCESS  read-only\n
    \       DESCRIPTION\n            \"Write access is required only if the device
    supports the\n            configuration of COPS server information.\"\n        OBJECT
    \     copsClientServerConfigRetryAlgrm\n        MIN-ACCESS  read-only\n        DESCRIPTION\n
    \           \"Write access is required only if the device supports the\n            configuration
    of COPS server information.\"\n        OBJECT      copsClientServerConfigRetryCount\n
    \       MIN-ACCESS  read-only\n        DESCRIPTION\n            \"Write access
    is required only if the device supports the\n            configuration of COPS
    server information.\"\n        OBJECT      copsClientServerConfigRetryIntvl\n
    \       MIN-ACCESS  read-only\n        DESCRIPTION\n            \"Write access
    is required only if the device supports the\n            configuration of COPS
    server information.\"\n       ::= { copsClientCompliances 1 }\n"
  - 'END

    '
  title: 4.  Definitions for COPS Client MIB
- contents:
  - "5.  Acknowledgments\n   This document describes instrumentation for the client
    side of the\n   COPS protocol which was defined by the RSVP Admission Policy (rap)\n
    \  Working Group, now known as the Resource Allocation Protocol (rap)\n   Working
    Group.\n"
  title: 5.  Acknowledgments
- contents:
  - "6.  Security Considerations\n   There are a number of management objects defined
    in this MIB that\n   have a MAX-ACCESS clause of read-create.  Such objects may
    be\n   considered sensitive or vulnerable in some network environments.  The\n
    \  support for SET operations in a non-secure environment without proper\n   protection
    can have a negative effect on network operations.\n   SNMPv1 by itself is not
    a secure environment.  Even if the network\n   itself is secure (for example by
    using IPSec), even then, there is no\n   control as to who on the secure network
    is allowed to access and\n   GET/SET (read/change/create/delete) the objects in
    this MIB.\n   It is recommended that the implementers consider the security\n
    \  features as provided by the SNMPv3 framework.  Specifically, the use\n   of
    the User-based Security Model [USM] and the View-based Access\n   Control Model
    [VACM] is recommended.\n   It is then a customer/user responsibility to ensure
    that the SNMP\n   entity giving access to an instance of this MIB, is properly\n
    \  configured to give access to the objects only to those principals\n   (users)
    that have legitimate rights to indeed GET or SET\n   (change/create/delete) them.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  References\n   [ARCH]        Harrington, D., Presuhn, R. and B. Wijnen, \"An\n
    \                Architecture for Describing SNMP Management\n                 Frameworks\",
    RFC 2571, April 1999.\n   [V1PROTO]     Case, J., Fedor, M., Schoffstall, M. and
    J. Davin,\n                 \"Simple Network Management Protocol\", STD 15, RFC
    1157,\n                 May 1990.\n   [V1SMI]       Rose, M. and K. McCloghrie,
    \"Structure and\n                 Identification of Management Information for
    TCP/IP-\n                 based Internets\", STD 16, RFC 1155, May 1990.\n   [V1CONCISE]
    \  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\",\n                 STD
    16, RFC 1212, March 1991.\n   [V1TRAPS]     Rose, M., \"A Convention for Defining
    Traps for use with\n                 the SNMP\", RFC 1215, March 1991.\n   [V2SMI]
    \      McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\n                 J.,
    Rose, M. and S. Waldbusser, \"Structure of\n                 Management Information
    Version 2 (SMIv2)\", STD 58, RFC\n                 2578, April 1999.\n   [V2TC]
    \       McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\n                 J.,
    Rose, M. and S. Waldbusser, \"Textual Conventions\n                 for SMIv2\",
    STD 58, RFC 2579, April 1999.\n   [V2CONFORM]   McCloghrie, K., Perkins, D., Schoenwaelder,
    J., Case,\n                 J., Rose, M. and S. Waldbusser, \"Conformance Statements\n
    \                for SMIv2\", STD 58, RFC 2580, April 1999.\n   [V2COMMUNITY]
    Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n                 \"Introduction
    to Community-based SNMPv2\", RFC 1901,\n                 January 1996.\n   [V2TRANS]
    \    Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n                 \"Transport
    Mappings for Version 2 of the Simple Network\n                 Management Protocol
    (SNMPv2)\", RFC 1906, January 1996.\n   [V2PROTO]     Case, J., McCloghrie, K.,
    Rose, M. and S. Waldbusser,\n                 \"Protocol Operations for Version
    2 of the Simple\n                 Network Management Protocol (SNMPv2)\", RFC
    1905,\n                 January 1996.\n   [V3INTRO]     Case, J., Mundy, R., Partain,
    D. and B. Stewart,\n                 \"Introduction to Version 3 of the Internet-standard\n
    \                Network Management Framework\", RFC 2570, April 1999.\n   [V3MPC]
    \      Case, J., Harrington D., Presuhn R. and B. Wijnen,\n                 \"Message
    Processing and Dispatching for the Simple\n                 Network Management
    Protocol (SNMP)\", RFC 2572, April\n                 1999.\n   [V3USM]       Blumenthal,
    U. and B. Wijnen, \"The User-Based Security\n                 Model (USM) for
    Version 3 of the Simple Network\n                 Management Protocol (SNMPv3)\",
    RFC 2574, April 1999.\n   [V3APPS]      Levi, D., Meyer, P. and B. Stewart, \"SNMP\n
    \                Applications\", RFC 2573, April 1999.\n   [V3VACM]      Wijnen,
    B., Presuhn, R. and K. McCloghrie, \"View-based\n                 Access Control
    Model for the Simple Network Management\n                 Protocol (SNMP)\", RFC
    2575, April 1999.\n   [MIB2]        McCloghrie K. and M. Rose, \"Management Information
    Base\n                 for Network Management of TCP/IP-based internets\", STD\n
    \                17, RFC 1213, March 1991.\n   [FRAMEWORK]   Yavatkar, R., Pendarakis,
    D. and Guerin, R., \"A\n                 Framework for Policy-based Admission
    Control\", RFC\n                 2753, January 2000.\n   [COPS]        Boyle,
    J., Cohen, R., Durham, D., Herzog, S., Rajan, R.\n                 and A. Sastry,
    \"The COPS (Common Open Policy Service)\n                 Protocol\", RFC 2748,
    January 2000.\n   [RSVP]        Braden, R. ed., Zhang, L., Berson, S., Herzog,
    S. and\n                 S.  Jamin, \"Resource ReSerVation Protocol (RSVP)\n                 Version
    1 - Functional Specification\", RFC 2205,\n                 September 1997.\n
    \  [COPSRSVP]    Boyle, J., Cohen, R., Durham, D., Herzog, S., Rajan, R.\n                 and
    A. Sastry, \"COPS Usage for RSVP\", RFC 2749, January\n                 2000.\n
    \  [SRVLOC]      Guttman, E., Perkins, C., Veizades, J. and M. Day,\n                 \"Service
    Location Protocol, Version 2\", RFC 2608, June\n                 1999.\n   [ADDRESSMIB]
    \ Daniele, M., Haberman, B., Routhier, S. and J.\n                 Schoenwaelder,
    \"Textual Conventions for Internet\n                 Network Addresses\", RFC
    2851, June 2000.\n   [PROCESS]     Bradner, S., \"The Internet Standards Process
    --\n                 Revision 3\", BCP 9, RFC 2026, October 1996.\n"
  title: 7.  References
- contents:
  - "8.  Authors' Addresses\n   Andrew Smith\n   Fax:  +1 415 345 1827\n   Email:
    ah_smith@pacbell.net\n   David Partain\n   Ericsson Radio Systems\n   Research
    and Innovation\n   P.O. Box 1248\n   SE-581 12 Linkoping\n   Sweden\n   Phone:
    +46 13 28 41 44\n   EMail: David.Partain@ericsson.com\n   John Seligson\n   Nortel
    Networks, Inc.\n   4401 Great America Parkway\n   Santa Clara, CA 95054\n   USA\n
    \  Phone: +1 408 495 2992\n   EMail: jseligso@nortelnetworks.com\n"
  title: 8.  Authors' Addresses
- contents:
  - "9.  Notices\n   The IETF takes no position regarding the validity or scope of
    any\n   intellectual property or other rights that might be claimed to\n   pertain
    to the implementation or use of the technology described in\n   this document
    or the extent to which any license under such rights\n   might or might not be
    available; neither does it represent that it\n   has made any effort to identify
    any such rights.  Information on the\n   IETF's procedures with respect to rights
    in standards-track and\n   standards-related documentation can be found in BCP-11.
    \ Copies of\n   claims of rights made available for publication and any assurances
    of\n   licenses to be made available, or the result of an attempt made to\n   obtain
    a general license or permission for the use of such\n   proprietary rights by
    implementors or users of this specification can\n   be obtained from the IETF
    Secretariat.\n   The IETF invites any interested party to bring to its attention
    any\n   copyrights, patents or patent applications, or other proprietary\n   rights
    which may cover technology that may be required to practice\n   this standard.
    \ Please address the information to the IETF Executive\n   Director.\n"
  title: 9.  Notices
- contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 10.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
