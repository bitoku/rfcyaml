- contents:
  - '          Secret Key Transaction Authentication for DNS (TSIG)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This protocol allows for transaction level authentication using\n
    \  shared secrets and one way hashing.  It can be used to authenticate\n   dynamic
    updates as coming from an approved client, or to authenticate\n   responses as
    coming from an approved recursive name server.\n   No provision has been made
    here for distributing the shared secrets;\n   it is expected that a network administrator
    will statically configure\n   name servers and clients using some out of band
    mechanism such as\n   sneaker-net until a secure automated mechanism for key distribution\n
    \  is available.\n"
  title: Abstract
- contents:
  - "1 - Introduction\n   1.1. The Domain Name System (DNS) [RFC1034, RFC1035] is
    a replicated\n   hierarchical distributed database system that provides information\n
    \  fundamental to Internet operations, such as name <=> address\n   translation
    and mail handling information.  DNS has recently been\n   extended [RFC2535] to
    provide for data origin authentication, and\n   public key distribution, all based
    on public key cryptography and\n   public key based digital signatures.  To be
    practical, this form of\n   security generally requires extensive local caching
    of keys and\n   tracing of authentication through multiple keys and signatures
    to a\n   pre-trusted locally configured key.\n   1.2. One difficulty with the
    [RFC2535] scheme is that common DNS\n   implementations include simple \"stub\"
    resolvers which do not have\n   caches.  Such resolvers typically rely on a caching
    DNS server on\n   another host.  It is impractical for these stub resolvers to
    perform\n   general [RFC2535] authentication and they would naturally depend on\n
    \  their caching DNS server to perform such services for them.  To do so\n   securely
    requires secure communication of queries and responses.\n   [RFC2535] provides
    public key transaction signatures to support this,\n   but such signatures are
    very expensive computationally to generate.\n   In general, these require the
    same complex public key logic that is\n   impractical for stubs.  This document
    specifies use of a message\n   authentication code (MAC), specifically HMAC-MD5
    (a keyed hash\n   function), to provide an efficient means of point-to-point\n
    \  authentication and integrity checking for transactions.\n   1.3. A second area
    where use of straight [RFC2535] public key based\n   mechanisms may be impractical
    is authenticating dynamic update\n   [RFC2136] requests.  [RFC2535] provides for
    request signatures but\n   with [RFC2535] they, like transaction signatures, require\n
    \  computationally expensive public key cryptography and complex\n   authentication
    logic.  Secure Domain Name System Dynamic Update\n   ([RFC2137]) describes how
    different keys are used in dynamically\n   updated zones.  This document's secret
    key based MACs can be used to\n   authenticate DNS update requests as well as
    transaction responses,\n   providing a lightweight alternative to the protocol
    described by\n   [RFC2137].\n   1.4. A further use of this mechanism is to protect
    zone transfers.\n   In this case the data covered would be the whole zone transfer\n
    \  including any glue records sent.  The protocol described by [RFC2535]\n   does
    not protect glue records and unsigned records unless SIG(0)\n   (transaction signature)
    is used.\n   1.5. The authentication mechanism proposed in this document uses\n
    \  shared secret keys to establish a trust relationship between two\n   entities.
    \ Such keys must be protected in a fashion similar to\n   private keys, lest a
    third party masquerade as one of the intended\n   parties (forge MACs).  There
    is an urgent need to provide simple and\n   efficient authentication between clients
    and local servers and this\n   proposal addresses that need.  This proposal is
    unsuitable for\n   general server to server authentication for servers which speak
    with\n   many other servers, since key management would become unwieldy with\n
    \  the number of shared keys going up quadratically.  But it is suitable\n   for
    many resolvers on hosts that only talk to a few recursive\n   servers.\n   1.6.
    A server acting as an indirect caching resolver -- a \"forwarder\"\n   in common
    usage -- might use transaction-based authentication when\n   communicating with
    its small number of preconfigured \"upstream\"\n   servers.  Other uses of DNS
    secret key authentication and possible\n   systems for automatic secret key distribution
    may be proposed in\n   separate future documents.\n   1.7. New Assigned Numbers\n
    \     RRTYPE = TSIG (250)\n      ERROR = 0..15 (a DNS RCODE)\n      ERROR = 16
    (BADSIG)\n      ERROR = 17 (BADKEY)\n      ERROR = 18 (BADTIME)\n   1.8. The key
    words \"MUST\", \"REQUIRED\", \"SHOULD\", \"RECOMMENDED\",  and\n   \"MAY\" in
    this document are to be interpreted as described in [RFC\n   2119].\n"
  title: 1 - Introduction
- contents:
  - "2 - TSIG RR Format\n   2.1 TSIG RR Type\n   To provide secret key authentication,
    we use a new RR type whose\n   mnemonic is TSIG and whose type code is 250.  TSIG
    is a meta-RR and\n   MUST not be cached.  TSIG RRs are used for authentication
    between DNS\n   entities that have established a shared secret key.  TSIG RRs
    are\n   dynamically computed to cover a particular DNS transaction and are\n   not
    DNS RRs in the usual sense.\n   2.2 TSIG Calculation\n   As the TSIG RRs are related
    to one DNS request/response, there is no\n   value in storing or retransmitting
    them, thus the TSIG RR is\n   discarded once it has been used to authenticate
    a DNS message.  The\n   only message digest algorithm specified in this document
    is \"HMAC-\n   MD5\" (see [RFC1321], [RFC2104]).  The \"HMAC-MD5\" algorithm is\n
    \  mandatory to implement for interoperability.  Other algorithms can be\n   specified
    at a later date.  Names and definitions of new algorithms\n   MUST be registered
    with IANA.  All multi-octet integers in the TSIG\n   record are sent in network
    byte order (see [RFC1035 2.3.2]).\n   2.3. Record Format\n    NAME The name of
    the key used in domain name syntax.  The name\n         should reflect the names
    of the hosts and uniquely identify\n         the key among a set of keys these
    two hosts may share at any\n         given time.  If hosts A.site.example and
    B.example.net share a\n         key, possibilities for the key name include\n
    \        <id>.A.site.example, <id>.B.example.net, and\n         <id>.A.site.example.B.example.net.
    \ It should be possible for\n         more than one key to be in simultaneous
    use among a set of\n         interacting hosts.  The name only needs to be meaningful
    to\n         the communicating hosts but a meaningful mnemonic name as\n         above
    is strongly recommended.\n         The name may be used as a local index to the
    key involved and\n         it is recommended that it be globally unique.  Where
    a key is\n         just shared between two hosts, its name actually only need\n
    \        only be meaningful to them but it is recommended that the key\n         name
    be mnemonic and incorporate the resolver and server host\n         names in that
    order.\n    TYPE TSIG (250: Transaction SIGnature)\n    CLASS ANY\n    TTL  0\n
    \   RdLen (variable)\n    RDATA\n      Field Name       Data Type      Notes\n
    \     --------------------------------------------------------------\n      Algorithm
    Name   domain-name    Name of the algorithm\n                                      in
    domain name syntax.\n      Time Signed      u_int48_t      seconds since 1-Jan-70
    UTC.\n      Fudge            u_int16_t      seconds of error permitted\n                                      in
    Time Signed.\n      MAC Size         u_int16_t      number of octets in MAC.\n
    \     MAC              octet stream   defined by Algorithm Name.\n      Original
    ID      u_int16_t      original message ID\n      Error            u_int16_t      expanded
    RCODE covering\n                                      TSIG processing.\n      Other
    Len        u_int16_t      length, in octets, of\n                                      Other
    Data.\n      Other Data       octet stream   empty unless Error == BADTIME\n   2.4.
    Example\n      NAME   HOST.EXAMPLE.\n      TYPE   TSIG\n      CLASS  ANY\n      TTL
    \   0\n      RdLen  as appropriate\n      RDATA\n         Field Name       Contents\n
    \        -------------------------------------\n         Algorithm Name   SAMPLE-ALG.EXAMPLE.\n
    \        Time Signed      853804800\n         Fudge            300\n         MAC
    Size         as appropriate\n         MAC              as appropriate\n         Original
    ID      as appropriate\n         Error            0 (NOERROR)\n         Other
    Len        0\n         Other Data       empty\n"
  title: 2 - TSIG RR Format
- contents:
  - "3 - Protocol Operation\n   3.1. Effects of adding TSIG to outgoing message\n
    \  Once the outgoing message has been constructed, the keyed message\n   digest
    operation can be performed.  The resulting message digest will\n   then be stored
    in a TSIG which is appended to the additional data\n   section (the ARCOUNT is
    incremented to reflect this).  If the TSIG\n   record cannot be added without
    causing the message to be truncated,\n   the server MUST alter the response so
    that a TSIG can be included.\n   This response consists of only the question and
    a TSIG record, and\n   has the TC bit set and RCODE 0 (NOERROR).  The client SHOULD
    at this\n   point retry the request using TCP (per [RFC1035 4.2.2]).\n   3.2.
    TSIG processing on incoming messages\n   If an incoming message contains a TSIG
    record, it MUST be the last\n   record in the additional section.  Multiple TSIG
    records are not\n   allowed.  If a TSIG record is present in any other position,
    the\n   packet is dropped and a response with RCODE 1 (FORMERR) MUST be\n   returned.
    \ Upon receipt of a message with a correctly placed TSIG RR,\n   the TSIG RR is
    copied to a safe location, removed from the DNS\n   Message, and decremented out
    of the DNS message header's ARCOUNT.  At\n   this point the keyed message digest
    operation is performed.  If the\n   algorithm name or key name is unknown to the
    recipient, or if the\n   message digests do not match, the whole DNS message MUST
    be\n   discarded.  If the message is a query, a response with RCODE 9\n   (NOTAUTH)
    MUST be sent back to the originator with TSIG ERROR 17\n   (BADKEY) or TSIG ERROR
    16 (BADSIG).  If no key is available to sign\n   this message it MUST be sent
    unsigned (MAC size == 0 and empty MAC).\n   A message to the system operations
    log SHOULD be generated, to warn\n   the operations staff of a possible security
    incident in progress.\n   Care should be taken to ensure that logging of this
    type of event\n   does not open the system to a denial of service attack.\n   3.3.
    Time values used in TSIG calculations\n   The data digested includes the two timer
    values in the TSIG header in\n   order to defend against replay attacks.  If this
    were not done, an\n   attacker could replay old messages but update the \"Time
    Signed\" and\n   \"Fudge\" fields to make the message look new.  This data is
    named\n   \"TSIG Timers\", and for the purpose of digest calculation they are\n
    \  invoked in their \"on the wire\" format, in the following order: first\n   Time
    Signed, then Fudge.  For example:\n"
  - 'Field Name    Value       Wire Format         Meaning

    '
  - '----------------------------------------------------------------------

    '
  - 'Time Signed   853804800   00 00 32 e4 07 00   Tue Jan 21 00:00:00 1997

    '
  - "Fudge         300         01 2C               5 minutes\n   3.4. TSIG Variables
    and Coverage\n   When generating or verifying the contents of a TSIG record, the\n
    \  following data are digested, in network byte order or wire format, as\n   appropriate:\n
    \  3.4.1. DNS Message\n   A whole and complete DNS message in wire format, before
    the TSIG RR\n   has been added to the additional data section and before the DNS\n
    \  Message Header's ARCOUNT field has been incremented to contain the\n   TSIG
    RR.  If the message ID differs from the original message ID, the\n   original
    message ID is substituted for the message ID.  This could\n   happen when forwarding
    a dynamic update request, for example.\n   3.4.2. TSIG Variables\n"
  - 'Source       Field Name       Notes

    '
  - '-----------------------------------------------------------------------

    '
  - 'TSIG RR      NAME             Key name, in canonical wire format

    '
  - 'TSIG RR      CLASS            (Always ANY in the current specification)

    '
  - 'TSIG RR      TTL              (Always 0 in the current specification)

    '
  - 'TSIG RDATA   Algorithm Name   in canonical wire format

    '
  - 'TSIG RDATA   Time Signed      in network byte order

    '
  - 'TSIG RDATA   Fudge            in network byte order

    '
  - 'TSIG RDATA   Error            in network byte order

    '
  - 'TSIG RDATA   Other Len        in network byte order

    '
  - "TSIG RDATA   Other Data       exactly as transmitted\n   The RR RDLEN and RDATA
    MAC Length are not included in the hash since\n   they are not guaranteed to be
    knowable before the MAC is generated.\n   The Original ID field is not included
    in this section, as it has\n   already been substituted for the message ID in
    the DNS header and\n   hashed.\n   For each label type, there must be a defined
    \"Canonical wire format\"\n   that specifies how to express a label in an unambiguous
    way.  For\n   label type 00, this is defined in [RFC2535], for label type 01,
    this\n   is defined in [RFC2673].  The use of label types other than 00 and 01\n
    \  is not defined for this specification.\n   3.4.3. Request MAC\n   When generating
    the MAC to be included in a response, the request MAC\n   must be included in
    the digest.  The request's MAC is digested in\n   wire format, including the following
    fields:\n   Field        Type           Description\n   ---------------------------------------------------\n
    \  MAC Length   u_int16_t      in network byte order\n   MAC Data     octet stream
    \  exactly as transmitted\n   3.5. Padding\n   Digested components are fed into
    the hashing function as a continuous\n   octet stream with no interfield padding.\n"
  title: 3 - Protocol Operation
- contents:
  - "4 - Protocol Details\n   4.1. TSIG generation on requests\n   Client performs
    the message digest operation and appends a TSIG\n   record to the additional data
    section and transmits the request to\n   the server.  The client MUST store the
    message digest from the\n   request while awaiting an answer.  The digest components
    for a\n   request are:\n      DNS Message (request)\n      TSIG Variables (request)\n
    \  Note that some older name servers will not accept requests with a\n   nonempty
    additional data section.  Clients SHOULD only attempt signed\n   transactions
    with servers who are known to support TSIG and share\n   some secret key with
    the client -- so, this is not a problem in\n   practice.\n   4.2. TSIG on Answers\n
    \  When a server has generated a response to a signed request, it signs\n   the
    response using the same algorithm and key.  The server MUST not\n   generate a
    signed response to an unsigned request.  The digest\n   components are:\n      Request
    MAC\n      DNS Message (response)\n      TSIG Variables (response)\n   4.3. TSIG
    on TSIG Error returns\n   When a server detects an error relating to the key or
    MAC, the server\n   SHOULD send back an unsigned error message (MAC size == 0
    and empty\n   MAC).  If an error is detected relating to the TSIG validity period,\n
    \  the server SHOULD send back a signed error message.  The digest\n   components
    are:\n      Request MAC (if the request MAC validated)\n      DNS Message (response)\n
    \     TSIG Variables (response)\n   The reason that the request is not included
    in this digest in some\n   cases is to make it possible for the client to verify
    the error.  If\n   the error is not a TSIG error the response MUST be generated
    as\n   specified in [4.2].\n   4.4. TSIG on TCP connection\n   A DNS TCP session
    can include multiple DNS envelopes.  This is, for\n   example, commonly used by
    zone transfer.  Using TSIG on such a\n   connection can protect the connection
    from hijacking and provide data\n   integrity.  The TSIG MUST be included on the
    first and last DNS\n   envelopes.  It can be optionally placed on any intermediary\n
    \  envelopes.  It is expensive to include it on every envelopes, but it\n   MUST
    be placed on at least every 100'th envelope.  The first envelope\n   is processed
    as a standard answer, and subsequent messages have the\n   following digest components:\n
    \     Prior Digest (running)\n      DNS Messages (any unsigned messages since
    the last TSIG)\n      TSIG Timers (current message)\n   This allows the client
    to rapidly detect when the session has been\n   altered; at which point it can
    close the connection and retry.  If a\n   client TSIG verification fails, the
    client MUST close the connection.\n   If the client does not receive TSIG records
    frequently enough (as\n   specified above) it SHOULD assume the connection has
    been hijacked\n   and it SHOULD close the connection.  The client SHOULD treat
    this the\n   same way as they would any other interrupted transfer (although the\n
    \  exact behavior is not specified).\n   4.5. Server TSIG checks\n   Upon receipt
    of a message, server will check if there is a TSIG RR.\n   If one exists, the
    server is REQUIRED to return a TSIG RR in the\n   response.  The server MUST perform
    the following checks in the\n   following order, check KEY, check TIME values,
    check MAC.\n   4.5.1. KEY check and error handling\n   If a non-forwarding server
    does not recognize the key used by the\n   client, the server MUST generate an
    error response with RCODE 9\n   (NOTAUTH) and TSIG ERROR 17 (BADKEY).  This response
    MUST be unsigned\n   as specified in [4.3].  The server SHOULD log the error.\n
    \  4.5.2. TIME check and error handling\n   If the server time is outside the
    time interval specified by the\n   request (which is: Time Signed, plus/minus
    Fudge), the server MUST\n   generate an error response with RCODE 9 (NOTAUTH)
    and TSIG ERROR 18\n   (BADTIME).  The server SHOULD also cache the most recent
    time signed\n   value in a message generated by a key, and SHOULD return BADTIME
    if a\n   message received later has an earlier time signed value.  A response\n
    \  indicating a BADTIME error MUST be signed by the same key as the\n   request.
    \ It MUST include the client's current time in the time\n   signed field, the
    server's current time (a u_int48_t) in the other\n   data field, and 6 in the
    other data length field.  This is done so\n   that the client can verify a message
    with a BADTIME error without the\n   verification failing due to another BADTIME
    error.  The data signed\n   is specified in [4.3].  The server SHOULD log the
    error.\n   4.5.3. MAC check and error handling\n   If a TSIG fails to verify,
    the server MUST generate an error response\n   as specified in [4.3] with RCODE
    9 (NOTAUTH) and TSIG ERROR 16\n   (BADSIG).  This response MUST be unsigned as
    specified in [4.3].  The\n   server SHOULD log the error.\n   4.6. Client processing
    of answer\n   When a client receives a response from a server and expects to see
    a\n   TSIG, it first checks if the TSIG RR is present in the response.\n   Otherwise,
    the response is treated as having a format error and\n   discarded.  The client
    then extracts the TSIG, adjusts the ARCOUNT,\n   and calculates the keyed digest
    in the same way as the server.  If\n   the TSIG does not validate, that response
    MUST be discarded, unless\n   the RCODE is 9 (NOTAUTH), in which case the client
    SHOULD attempt to\n   verify the response as if it were a TSIG Error response,
    as specified\n   in [4.3].  A message containing an unsigned TSIG record or a
    TSIG\n   record which fails verification SHOULD not be considered an\n   acceptable
    response; the client SHOULD log an error and continue to\n   wait for a signed
    response until the request times out.\n   4.6.1. Key error handling\n   If an
    RCODE on a response is 9 (NOTAUTH), and the response TSIG\n   validates, and the
    TSIG key is different from the key used on the\n   request, then this is a KEY
    error.  The client MAY retry the request\n   using the key specified by the server.
    \ This should never occur, as a\n   server MUST NOT sign a response with a different
    key than signed the\n   request.\n   4.6.2. Time error handling\n   If the response
    RCODE is 9 (NOTAUTH) and the TSIG ERROR is 18\n   (BADTIME), or the current time
    does not fall in the range specified\n   in the TSIG record, then this is a TIME
    error.  This is an indication\n   that the client and server clocks are not synchronized.
    \ In this case\n   the client SHOULD log the event.  DNS resolvers MUST NOT adjust
    any\n   clocks in the client based on BADTIME errors, but the server's time\n
    \  in the other data field SHOULD be logged.\n   4.6.3. MAC error handling\n   If
    the response RCODE is 9 (NOTAUTH) and TSIG ERROR is 16 (BADSIG),\n   this is a
    MAC error, and client MAY retry the request with a new\n   request ID but it would
    be better to try a different shared key if\n   one is available.  Client SHOULD
    keep track of how many MAC errors\n   are associated with each key.  Clients SHOULD
    log this event.\n   4.7. Special considerations for forwarding servers\n   A server
    acting as a forwarding server of a DNS message SHOULD check\n   for the existence
    of a TSIG record.  If the name on the TSIG is not\n   of a secret that the server
    shares with the originator the server\n   MUST forward the message unchanged including
    the TSIG.  If the name\n   of the TSIG is of a key this server shares with the
    originator, it\n   MUST process the TSIG.  If the TSIG passes all checks, the
    forwarding\n   server MUST, if possible, include a TSIG of his own, to the\n   destination
    or the next forwarder.  If no transaction security is\n   available to the destination
    and the response has the AD flag (see\n   [RFC2535]), the forwarder MUST unset
    the AD flag before adding the\n   TSIG to the answer.\n"
  title: 4 - Protocol Details
- contents:
  - "5 - Shared Secrets\n   5.1. Secret keys are very sensitive information and all
    available\n   steps should be taken to protect them on every host on which they
    are\n   stored.  Generally such hosts need to be physically protected.  If\n   they
    are multi-user machines, great care should be taken that\n   unprivileged users
    have no access to keying material.  Resolvers\n   often run unprivileged, which
    means all users of a host would be able\n   to see whatever configuration data
    is used by the resolver.\n   5.2. A name server usually runs privileged, which
    means its\n   configuration data need not be visible to all users of the host.
    \ For\n   this reason, a host that implements transaction-based authentication\n
    \  should probably be configured with a \"stub resolver\" and a local\n   caching
    and forwarding name server.  This presents a special problem\n   for [RFC2136]
    which otherwise depends on clients to communicate only\n   with a zone's authoritative
    name servers.\n   5.3. Use of strong random shared secrets is essential to the
    security\n   of TSIG.  See [RFC1750] for a discussion of this issue.  The secret\n
    \  should be at least as long as the keyed message digest, i.e. 16 bytes\n   for
    HMAC-MD5 or 20 bytes for HMAC-SHA1.\n"
  title: 5 - Shared Secrets
- contents:
  - "6 - Security Considerations\n   6.1. The approach specified here is computationally
    much less\n   expensive than the signatures specified in [RFC2535].  As long as
    the\n   shared secret key is not compromised, strong authentication is\n   provided
    for the last hop from a local name server to the user\n   resolver.\n   6.2. Secret
    keys should be changed periodically.  If the client host\n   has been compromised,
    the server should suspend the use of all\n   secrets known to that client.  If
    possible, secrets should be stored\n   in encrypted form.  Secrets should never
    be transmitted in the clear\n   over any network.  This document does not address
    the issue on how to\n   distribute secrets. Secrets should never be shared by
    more than two\n   entities.\n   6.3. This mechanism does not authenticate source
    data, only its\n   transmission between two parties who share some secret.  The
    original\n   source data can come from a compromised zone master or can be\n   corrupted
    during transit from an authentic zone master to some\n   \"caching forwarder.\"
    \ However, if the server is faithfully performing\n   the full [RFC2535] security
    checks, then only security checked data\n   will be available to the client.\n
    \  6.4. A fudge value that is too large may leave the server open to\n   replay
    attacks.  A fudge value that is too small may cause failures\n   if machines are
    not time synchronized or there are unexpected network\n   delays.  The recommended
    value in most situation is 300 seconds.\n"
  title: 6 - Security Considerations
- contents:
  - "7 - IANA Considerations\n   IANA is expected to create and maintain a registry
    of algorithm names\n   to be used as \"Algorithm Names\" as defined in Section
    2.3.  The\n   initial value should be \"HMAC-MD5.SIG-ALG.REG.INT\".  Algorithm
    names\n   are text strings encoded using the syntax of a domain name.  There is\n
    \  no structure required other than names for different algorithms must\n   be
    unique when compared as DNS names, i.e., comparison is case\n   insensitive.  Note
    that the initial value mentioned above is not a\n   domain name, and therefore
    need not be a registered name within the\n   DNS.  New algorithms are assigned
    using the IETF Consensus policy\n   defined in RFC 2434. The algorithm name HMAC-MD5.SIG-ALG.REG.INT\n
    \  looks like a FQDN for historical reasons; future algorithm names are\n   expected
    to be simple (i.e., single-component) names.\n   IANA is expected to create and
    maintain a registry of \"TSIG Error\n   values\" to be used for \"Error\" values
    as defined in section 2.3.\n   Initial values should be those defined in section
    1.7.  New TSIG\n   error codes for the TSIG error field are assigned using the
    IETF\n   Consensus policy defined in RFC 2434.\n"
  title: 7 - IANA Considerations
- contents:
  - "8 - References\n   [RFC1034]  Mockapetris, P., \"Domain Names - Concepts and
    Facilities\",\n              STD 13, RFC 1034, November 1987.\n   [RFC1035]  Mockapetris,
    P., \"Domain Names - Implementation and\n              Specification\", STD 13,
    RFC 1034, November 1987.\n   [RFC1321]  Rivest, R., \"The MD5 Message-Digest Algorithm\",
    RFC 1321,\n              April 1992.\n   [RFC1750]  Eastlake, D., Crocker, S.
    and J. Schiller, \"Randomness\n              Recommendations for Security\", RFC
    1750, December 1995.\n   [RFC2104]  Krawczyk, H., Bellare, M. and R. Canetti,
    \"HMAC-MD5:\n              Keyed-MD5 for Message Authentication\", RFC 2104, February\n
    \             1997.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to
    Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [RFC2136]  Vixie, P., Thomson, S., Rekhter, Y. and J. Bound \"Dynamic\n              Updates
    in the Domain Name System\", RFC 2136, April 1997.\n   [RFC2137]  Eastlake 3rd,
    D., \"Secure Domain Name System Dynamic\n              Update\", RFC 2137, April
    1997.\n   [RFC2535]  Eastlake, D., \"Domain Name System Security Extensions\",\n
    \             RFC 2535, March 1999.\n   [RFC2673]  Crawford, M., \"Binary Labels
    in the Domain Name System\",\n              RFC 2673, August 1999.\n"
  title: 8 - References
- contents:
  - "9 - Authors' Addresses\n   Paul Vixie\n   Internet Software Consortium\n   950
    Charter Street\n   Redwood City, CA 94063\n   Phone: +1 650 779 7001\n   EMail:
    vixie@isc.org\n   Olafur Gudmundsson\n   NAI Labs\n   3060 Washington Road, Route
    97\n   Glenwood, MD 21738\n   Phone: +1 443 259 2389\n   EMail: ogud@tislabs.com\n
    \  Donald E. Eastlake 3rd\n   Motorola\n   140 Forest Avenue\n   Hudson, MA 01749
    USA\n   Phone: +1 508 261 5434\n   EMail: dee3@torque.pothole.com\n   Brian Wellington\n
    \  Nominum, Inc.\n   950 Charter Street\n   Redwood City, CA 94063\n   Phone:
    +1 650 779 6022\n   EMail: Brian.Wellington@nominum.com\n"
  title: 9 - Authors' Addresses
- contents:
  - "10  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 10  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
