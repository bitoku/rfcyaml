- contents:
  - '  Algorithm Implementation Requirements and Usage Guidance for DNSSEC

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The DNSSEC protocol makes use of various cryptographic algorithms
    in\n   order to provide authentication of DNS data and proof of\n   nonexistence.
    \ To ensure interoperability between DNS resolvers and\n   DNS authoritative servers,
    it is necessary to specify a set of\n   algorithm implementation requirements
    and usage guidelines to ensure\n   that there is at least one algorithm that all
    implementations\n   support.  This document defines the current algorithm implementation\n
    \  requirements and usage guidance for DNSSEC.  This document obsoletes\n   RFC
    6944.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8624.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Updating Algorithm Implementation Requirements and Usage\n
    \          Guidance  . . . . . . . . . . . . . . . . . . . . . . . .   3\n     1.2.
    \ Updating Algorithm Requirement Levels . . . . . . . . . .   3\n     1.3.  Document
    Audience . . . . . . . . . . . . . . . . . . . .   4\n   2.  Conventions Used
    in This Document . . . . . . . . . . . . . .   4\n   3.  Algorithm Selection .
    . . . . . . . . . . . . . . . . . . . .   5\n     3.1.  DNSKEY Algorithms . .
    . . . . . . . . . . . . . . . . . .   5\n     3.2.  DNSKEY Algorithm Recommendation
    . . . . . . . . . . . . .   6\n     3.3.  DS and CDS Algorithms . . . . . . .
    . . . . . . . . . . .   7\n     3.4.  DS and CDS Algorithm Recommendation . .
    . . . . . . . . .   7\n   4.  Security Considerations . . . . . . . . . . . .
    . . . . . . .   8\n   5.  Operational Considerations  . . . . . . . . . . . .
    . . . . .   8\n   6.  IANA Considerations . . . . . . . . . . . . . . . . . .
    . . .   8\n   7.  References  . . . . . . . . . . . . . . . . . . . . . . . .
    .   9\n     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   9\n
    \    7.2.  Informative References  . . . . . . . . . . . . . . . . .  10\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  11\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The DNSSEC signing algorithms are defined by various RFCs,
    including\n   [RFC4034], [RFC5155], [RFC5702], [RFC5933], [RFC6605], and [RFC8080].\n
    \  DNSSEC is used to provide authentication of data.  To ensure\n   interoperability,
    a set of \"mandatory-to-implement\" DNSKEY algorithms\n   are defined.  This document
    obsoletes [RFC6944].\n"
  - contents:
    - "1.1.  Updating Algorithm Implementation Requirements and Usage Guidance\n   The
      field of cryptography evolves continuously.  New, stronger\n   algorithms appear,
      and existing algorithms are found to be less\n   secure than originally thought.
      \ Attacks previously thought to be\n   computationally infeasible become more
      accessible as the available\n   computational resources increase.  Therefore,
      algorithm\n   implementation requirements and usage guidance need to be updated\n
      \  from time to time to reflect the new reality.  The choices for\n   algorithms
      must be conservative to minimize the risk of algorithm\n   compromise.\n"
    title: 1.1.  Updating Algorithm Implementation Requirements and Usage Guidance
  - contents:
    - "1.2.  Updating Algorithm Requirement Levels\n   The mandatory-to-implement
      algorithm of tomorrow should already be\n   available in most implementations
      of DNSSEC by the time it is made\n   mandatory.  This document attempts to identify
      and introduce those\n   algorithms for future mandatory-to-implement status.
      \ There is no\n   guarantee that algorithms in use today will become mandatory
      in the\n   future.  Published algorithms are continuously subjected to\n   cryptographic
      attack and may become too weak or even be completely\n   broken before this
      document is updated.\n   This document only provides recommendations with respect
      to\n   mandatory-to-implement algorithms or algorithms so weak that they\n   cannot
      be recommended.  Any algorithm listed in the [DNSKEY-IANA] and\n   [DS-IANA]
      registries that are not mentioned in this document MAY be\n   implemented.  For
      clarification and consistency, an algorithm will be\n   specified as MAY in
      this document only when it has been downgraded\n   from a MUST or a RECOMMENDED
      to a MAY.\n   Although this document's primary purpose is to update algorithm\n
      \  recommendations to keep DNSSEC authentication secure over time, it\n   also
      aims to do so in such a way that DNSSEC implementations remain\n   interoperable.
      \ DNSSEC interoperability is addressed by an\n   incremental introduction or
      deprecation of algorithms.\n   [RFC2119] considers the term SHOULD equivalent
      to RECOMMENDED, and\n   SHOULD NOT equivalent to NOT RECOMMENDED.  The authors
      of this\n   document have chosen to use the terms RECOMMENDED and NOT\n   RECOMMENDED,
      as this more clearly expresses the intent to\n   implementers.\n   It is expected
      that deprecation of an algorithm will be performed\n   gradually in a series
      of updates to this document.  This provides\n   time for various implementations
      to update their implemented\n   algorithms while remaining interoperable.  Unless
      there are strong\n   security reasons, an algorithm is expected to be downgraded
      from MUST\n   to NOT RECOMMENDED or MAY, instead of to MUST NOT.  Similarly,
      an\n   algorithm that has not been mentioned as mandatory-to-implement is\n
      \  expected to be introduced with a RECOMMENDED instead of a MUST.\n   Since
      the effect of using an unknown DNSKEY algorithm is that the\n   zone is treated
      as insecure, it is recommended that algorithms\n   downgraded to NOT RECOMMENDED
      or lower not be used by authoritative\n   nameservers and DNSSEC signers to
      create new DNSKEYs.  This will\n   allow for deprecated algorithms to become
      less and less common over\n   time.  Once an algorithm has reached a sufficiently
      low level of\n   deployment, it can be marked as MUST NOT so that recursive
      resolvers\n   can remove support for validating it.\n   Recursive nameservers
      are encouraged to retain support for all\n   algorithms not marked as MUST NOT.\n"
    title: 1.2.  Updating Algorithm Requirement Levels
  - contents:
    - "1.3.  Document Audience\n   The recommendations of this document mostly target
      DNSSEC\n   implementers, as implementations need to meet both high security\n
      \  expectations as well as high interoperability between various vendors\n   and
      with different versions.  Interoperability requires a smooth\n   transition
      to more secure algorithms.  This perspective may differ\n   from that of a user
      who wishes to deploy and configure DNSSEC with\n   only the safest algorithm.
      \ On the other hand, the comments and\n   recommendations in this document are
      also expected to be useful for\n   such users.\n"
    title: 1.3.  Document Audience
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
    interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,
    they appear in all\n   capitals, as shown here.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - '3.  Algorithm Selection

    '
  - contents:
    - "3.1.  DNSKEY Algorithms\n   The following table lists the implementation recommendations
      for\n   DNSKEY algorithms [DNSKEY-IANA].\n   +--------+--------------------+-----------------+-------------------+\n
      \  | Number | Mnemonics          | DNSSEC Signing  | DNSSEC Validation |\n   +--------+--------------------+-----------------+-------------------+\n
      \  | 1      | RSAMD5             | MUST NOT        | MUST NOT          |\n   |
      3      | DSA                | MUST NOT        | MUST NOT          |\n   | 5
      \     | RSASHA1            | NOT RECOMMENDED | MUST              |\n   | 6      |
      DSA-NSEC3-SHA1     | MUST NOT        | MUST NOT          |\n   | 7      | RSASHA1-NSEC3-SHA1
      | NOT RECOMMENDED | MUST              |\n   | 8      | RSASHA256          |
      MUST            | MUST              |\n   | 10     | RSASHA512          | NOT
      RECOMMENDED | MUST              |\n   | 12     | ECC-GOST           | MUST NOT
      \       | MAY               |\n   | 13     | ECDSAP256SHA256    | MUST            |
      MUST              |\n   | 14     | ECDSAP384SHA384    | MAY             | RECOMMENDED
      \      |\n   | 15     | ED25519            | RECOMMENDED     | RECOMMENDED       |\n
      \  | 16     | ED448              | MAY             | RECOMMENDED       |\n   +--------+--------------------+-----------------+-------------------+\n
      \  RSAMD5 is not widely deployed, and there is an industry-wide trend to\n   deprecate
      MD5 usage.\n   RSASHA1 and RSASHA1-NSEC3-SHA1 are widely deployed, although
      the\n   zones deploying it are recommended to switch to ECDSAP256SHA256 as\n
      \  there is an industry-wide trend to move to elliptic curve\n   cryptography.
      \ RSASHA1 does not support NSEC3.  RSASHA1-NSEC3-SHA1\n   can be used with or
      without NSEC3.\n   DSA and DSA-NSEC3-SHA1 are not widely deployed and are vulnerable
      to\n   private key compromise when generating signatures using a weak or\n   compromised
      random number generator.\n   RSASHA256 is widely used and considered strong.
      \ It has been the\n   default algorithm for a number of years and is now slowly
      being\n   replaced with ECDSAP256SHA256 due to its shorter key and signature\n
      \  size, resulting in smaller DNS packets.\n   RSASHA512 is NOT RECOMMENDED
      for DNSSEC signing because it has not\n   seen wide deployment, but there are
      some deployments; hence, DNSSEC\n   validation MUST implement RSASHA512 to ensure
      interoperability.\n   There is no significant difference in cryptographic strength
      between\n   RSASHA512 and RSASHA256; therefore, use of RSASHA512 is discouraged\n
      \  as it will only make deprecation of older algorithms harder.  People\n   who
      wish to use a cryptographically stronger algorithm should switch\n   to elliptic
      curve cryptography algorithms.\n   ECC-GOST (GOST R 34.10-2001) has been superseded
      by GOST R 34.10-2012\n   in [RFC7091].  GOST R 34.10-2012 hasn't been standardized
      for use in\n   DNSSEC.\n   ECDSAP256SHA256 provides more cryptographic strength
      with a shorter\n   signature length than either RSASHA256 or RSASHA512.  ECDSAP256SHA256\n
      \  has been widely deployed; therefore, it is now at MUST level for both\n   validation
      and signing.  It is RECOMMENDED to use the deterministic\n   digital signature
      generation procedure of the Elliptic Curve Digital\n   Signature Algorithm (ECDSA),
      specified in [RFC6979], when\n   implementing ECDSAP256SHA256 (and ECDSAP384SHA384).\n
      \  ECDSAP384SHA384 shares the same properties as ECDSAP256SHA256 but\n   offers
      a modest security advantage over ECDSAP256SHA256 (192 bits of\n   strength versus
      128 bits).  For most DNSSEC applications,\n   ECDSAP256SHA256 should be satisfactory
      and robust for the foreseeable\n   future and is therefore recommended for signing.
      \ While it is\n   unlikely for a DNSSEC use case requiring 192-bit security
      strength to\n   arise, ECDSA384SHA384 is provided for such applications, and
      it MAY\n   be used for signing in these cases.\n   ED25519 and ED448 use the
      Edwards-curve Digital Security Algorithm\n   (EdDSA).  There are three main
      advantages of EdDSA: it does not\n   require the use of a unique random number
      for each signature, there\n   are no padding or truncation issues as with ECDSA,
      and it is more\n   resilient to side-channel attacks.  Furthermore, EdDSA cryptography\n
      \  is less prone to implementation errors ([RFC8032], [RFC8080]).  It is\n   expected
      that ED25519 will become the future RECOMMENDED default\n   algorithm once there's
      enough support for this algorithm in the\n   deployed DNSSEC validators.\n"
    title: 3.1.  DNSKEY Algorithms
  - contents:
    - "3.2.  DNSKEY Algorithm Recommendation\n   Due to the industry-wide trend towards
      elliptic curve cryptography,\n   ECDSAP256SHA256 is the RECOMMENDED DNSKEY algorithm
      for use by new\n   DNSSEC deployments, and users of RSA-based algorithms SHOULD
      upgrade\n   to ECDSAP256SHA256.\n"
    title: 3.2.  DNSKEY Algorithm Recommendation
  - contents:
    - "3.3.  DS and CDS Algorithms\n   The following table lists the recommendations
      for Delegation Signer\n   Digest Algorithms [DS-IANA].  These recommendations
      also apply to the\n   Child Delegation Signer (CDS) RRTYPE as specified in [RFC7344].\n
      \  +--------+-----------------+-------------------+-------------------+\n   |
      Number | Mnemonics       | DNSSEC Delegation | DNSSEC Validation |\n   +--------+-----------------+-------------------+-------------------+\n
      \  | 0      | NULL (CDS only) | MUST NOT [*]      | MUST NOT [*]      |\n   |
      1      | SHA-1           | MUST NOT          | MUST              |\n   | 2      |
      SHA-256         | MUST              | MUST              |\n   | 3      | GOST
      R 34.11-94 | MUST NOT          | MAY               |\n   | 4      | SHA-384
      \        | MAY               | RECOMMENDED       |\n   +--------+-----------------+-------------------+-------------------+\n
      \  [*] - This is a special type of CDS record signaling removal of DS at\n                         the
      parent in [RFC8078].\n   NULL is a special case; see [RFC8078].\n   SHA-1 is
      still widely used for Delegation Signer (DS) records, so\n   validators MUST
      implement validation, but it MUST NOT be used to\n   generate new DS and CDS
      records (see \"Operational Considerations\" for\n   caveats when upgrading from
      the SHA-1 to SHA-256 DS algorithm.)\n   SHA-256 is widely used and considered
      strong.\n   GOST R 34.11-94 has been superseded by GOST R 34.11-2012 in\n   [RFC6986].
      \ GOST R 34.11-2012 has not been standardized for use in\n   DNSSEC.\n   SHA-384
      shares the same properties as SHA-256 but offers a modest\n   security advantage
      over SHA-256 (384 bits of strength versus 256\n   bits).  For most applications
      of DNSSEC, SHA-256 should be\n   satisfactory and robust for the foreseeable
      future and is therefore\n   recommended for DS and CDS records.  While it is
      unlikely for a\n   DNSSEC use case requiring 384-bit security strength to arise,
      SHA-384\n   is provided for such applications, and it MAY be used for generating\n
      \  DS and CDS records in these cases.\n"
    title: 3.3.  DS and CDS Algorithms
  - contents:
    - "3.4.  DS and CDS Algorithm Recommendation\n   An operational recommendation
      for new and existing deployments:\n   SHA-256 is the RECOMMENDED DS and CDS
      algorithm.\n"
    title: 3.4.  DS and CDS Algorithm Recommendation
  title: 3.  Algorithm Selection
- contents:
  - "4.  Security Considerations\n   The security of cryptographic systems depends
    on both the strength of\n   the cryptographic algorithms chosen and the strength
    of the keys used\n   with those algorithms.  The security also depends on the
    engineering\n   of the protocol used by the system to ensure that there are no
    non-\n   cryptographic ways to bypass the security of the overall system.\n   This
    document concerns itself with the selection of cryptographic\n   algorithms for
    use in DNSSEC, specifically with the selection of\n   \"mandatory-to-implement\"
    algorithms.  The algorithms identified in\n   this document as MUST or RECOMMENDED
    to implement are not known to be\n   broken (in the cryptographic sense) at the
    current time, and\n   cryptographic research so far leads us to believe that they
    are\n   likely to remain secure into the foreseeable future.  However, this\n
    \  isn't necessarily forever, and it is expected that new revisions of\n   this
    document will be issued from time to time to reflect the current\n   best practices
    in this area.\n   Retiring an algorithm too soon would result in a zone (signed
    with a\n   retired algorithm) being downgraded to the equivalent of an unsigned\n
    \  zone.  Therefore, algorithm deprecation must be done very slowly and\n   only
    after careful consideration and measurement of its use.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  Operational Considerations\n   DNSKEY algorithm rollover in a live zone is
    a complex process.  See\n   [RFC6781] and [RFC7583] for guidelines on how to perform
    algorithm\n   rollovers.\n   DS algorithm rollover in a live zone is also a complex
    process.\n   Upgrading an algorithm at the same time as rolling a new Key Signing\n
    \  Key (KSK) will lead to DNSSEC validation failures.  Administrators\n   MUST
    complete the process of the DS algorithm upgrade before starting\n   a rollover
    process for a new KSK.\n"
  title: 5.  Operational Considerations
- contents:
  - "6.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Resource Records for the DNS Security Extensions\",\n              RFC 4034,
      DOI 10.17487/RFC4034, March 2005,\n              <https://www.rfc-editor.org/info/rfc4034>.\n
      \  [RFC5155]  Laurie, B., Sisson, G., Arends, R., and D. Blacka, \"DNS\n              Security
      (DNSSEC) Hashed Authenticated Denial of\n              Existence\", RFC 5155,
      DOI 10.17487/RFC5155, March 2008,\n              <https://www.rfc-editor.org/info/rfc5155>.\n
      \  [RFC5702]  Jansen, J., \"Use of SHA-2 Algorithms with RSA in DNSKEY\n              and
      RRSIG Resource Records for DNSSEC\", RFC 5702,\n              DOI 10.17487/RFC5702,
      October 2009,\n              <https://www.rfc-editor.org/info/rfc5702>.\n   [RFC6605]
      \ Hoffman, P. and W. Wijngaards, \"Elliptic Curve Digital\n              Signature
      Algorithm (DSA) for DNSSEC\", RFC 6605,\n              DOI 10.17487/RFC6605,
      April 2012,\n              <https://www.rfc-editor.org/info/rfc6605>.\n   [RFC6979]
      \ Pornin, T., \"Deterministic Usage of the Digital Signature\n              Algorithm
      (DSA) and Elliptic Curve Digital Signature\n              Algorithm (ECDSA)\",
      RFC 6979, DOI 10.17487/RFC6979, August\n              2013, <https://www.rfc-editor.org/info/rfc6979>.\n
      \  [RFC6986]  Dolmatov, V., Ed. and A. Degtyarev, \"GOST R 34.11-2012:\n              Hash
      Function\", RFC 6986, DOI 10.17487/RFC6986, August\n              2013, <https://www.rfc-editor.org/info/rfc6986>.\n
      \  [RFC7344]  Kumari, W., Gudmundsson, O., and G. Barwood, \"Automating\n              DNSSEC
      Delegation Trust Maintenance\", RFC 7344,\n              DOI 10.17487/RFC7344,
      September 2014,\n              <https://www.rfc-editor.org/info/rfc7344>.\n
      \  [RFC8032]  Josefsson, S. and I. Liusvaara, \"Edwards-Curve Digital\n              Signature
      Algorithm (EdDSA)\", RFC 8032,\n              DOI 10.17487/RFC8032, January
      2017,\n              <https://www.rfc-editor.org/info/rfc8032>.\n   [RFC8078]
      \ Gudmundsson, O. and P. Wouters, \"Managing DS Records from\n              the
      Parent via CDS/CDNSKEY\", RFC 8078,\n              DOI 10.17487/RFC8078, March
      2017,\n              <https://www.rfc-editor.org/info/rfc8078>.\n   [RFC8080]
      \ Sury, O. and R. Edmonds, \"Edwards-Curve Digital Security\n              Algorithm
      (EdDSA) for DNSSEC\", RFC 8080,\n              DOI 10.17487/RFC8080, February
      2017,\n              <https://www.rfc-editor.org/info/rfc8080>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC5933]  Dolmatov, V., Ed., Chuprina, A.,
      and I. Ustinov, \"Use of\n              GOST Signature Algorithms in DNSKEY
      and RRSIG Resource\n              Records for DNSSEC\", RFC 5933, DOI 10.17487/RFC5933,
      July\n              2010, <https://www.rfc-editor.org/info/rfc5933>.\n   [RFC6781]
      \ Kolkman, O., Mekking, W., and R. Gieben, \"DNSSEC\n              Operational
      Practices, Version 2\", RFC 6781,\n              DOI 10.17487/RFC6781, December
      2012,\n              <https://www.rfc-editor.org/info/rfc6781>.\n   [RFC6944]
      \ Rose, S., \"Applicability Statement: DNS Security (DNSSEC)\n              DNSKEY
      Algorithm Implementation Status\", RFC 6944,\n              DOI 10.17487/RFC6944,
      April 2013,\n              <https://www.rfc-editor.org/info/rfc6944>.\n   [RFC7091]
      \ Dolmatov, V., Ed. and A. Degtyarev, \"GOST R 34.10-2012:\n              Digital
      Signature Algorithm\", RFC 7091,\n              DOI 10.17487/RFC7091, December
      2013,\n              <https://www.rfc-editor.org/info/rfc7091>.\n   [RFC7583]
      \ Morris, S., Ihren, J., Dickinson, J., and W. Mekking,\n              \"DNSSEC
      Key Rollover Timing Considerations\", RFC 7583,\n              DOI 10.17487/RFC7583,
      October 2015,\n              <https://www.rfc-editor.org/info/rfc7583>.\n   [DNSKEY-IANA]\n
      \             IANA, \"Domain Name System Security (DNSSEC) Algorithm\n              Numbers\",\n
      \             <http://www.iana.org/assignments/dns-sec-alg-numbers>.\n   [DS-IANA]
      \ IANA, \"Delegation Signer (DS) Resource Record (RR) Type\n              Digest
      Algorithms\",\n              <http://www.iana.org/assignments/ds-rr-types>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   This document borrows text from RFC 4307 by Jeffrey I. Schiller
    of\n   the Massachusetts Institute of Technology (MIT) and RFC 8247 by Yoav\n
    \  Nir, Tero Kivinen, Paul Wouters, and Daniel Migault.  Much of the\n   original
    text has been copied verbatim.\n   We wish to thank Michael Sinatra, Roland van
    Rijswijk-Deij, Olafur\n   Gudmundsson, Paul Hoffman, Evan Hunt, and Peter Yee
    for their\n   feedback.\n   Kudos to Roy Arends for bringing the DS rollover issue
    to light.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Paul Wouters\n   Red Hat\n   Canada\n   Email: pwouters@redhat.com\n
    \  Ondrej Sury\n   Internet Systems Consortium\n   Czech Republic\n   Email: ondrej@isc.org\n"
  title: Authors' Addresses
