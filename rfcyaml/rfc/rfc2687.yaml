- contents:
  - '             PPP in a Real-time Oriented HDLC-like Framing

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   A companion document describes an architecture for providing\n   integrated
    services over low-bitrate links, such as modem lines, ISDN\n   B-channels, and
    sub-T1 links [1].  The main components of the\n   architecture are: a real-time
    encapsulation format for asynchronous\n   and synchronous low-bitrate links, a
    header compression architecture\n   optimized for real-time flows, elements of
    negotiation protocols used\n   between routers (or between hosts and routers),
    and announcement\n   protocols used by applications to allow this negotiation
    to take\n   place.\n   This document proposes the suspend/resume-oriented solution
    for the\n   real-time encapsulation format part of the architecture.  The general\n
    \  approach is to start from the PPP Multilink fragmentation protocol\n   [2]
    and its multi-class extension [5] and add suspend/resume in a way\n   that is
    as compatible to existing hard- and firmware as possible.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   As an extension to the \"best-effort\" services the Internet
    is well-\n   known for, additional types of services (\"integrated services\")
    that\n   support the transport of real-time multimedia information are being\n
    \  developed for, and deployed in the Internet.\n   The present document defines
    the suspend/resume-oriented solution for\n   the real-time encapsulation format
    part of the architecture.  As\n   described in more detail in the architecture
    document, a real-time\n   encapsulation format is required as, e.g., a 1500 byte
    packet on a\n   28.8 kbit/s modem link makes this link unavailable for the\n   transmission
    of real-time information for about 400 ms.  This adds a\n   worst-case delay that
    causes real-time applications to operate with\n   round-trip delays on the order
    of at least a second -- unacceptable\n   for real-time conversation.\n   A true
    suspend/resume-oriented approach can only be implemented on a\n   type-1 sender
    [1], but provides the best possible delay performance\n   to this type of senders.
    \ The format defined in this document may\n   also be of interest to certain type-2-senders
    that want to exploit\n   the better bit-efficiency of this format as compared
    to [5].  The\n   format was designed so that it can be implemented by both type-1
    and\n   type-2 receivers.\n"
  - contents:
    - "1.1.  Specification Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [8].\n"
    title: 1.1.  Specification Language
  title: 1.  Introduction
- contents:
  - "2.  Requirements\n   The requirements for this document are similar to those
    listed in\n   [5].\n   A suspend/resume-oriented solution can provide better worst-case\n
    \  latency than the pre-fragmenting-oriented solution defined in [5].\n   Also,
    as this solution requires a new encapsulation scheme, there is\n   an opportunity
    to provide a slightly more efficient format.\n   Predictability, robustness, and
    cooperation with PPP and existing\n   hard- and firmware installations are as
    important with suspend/resume\n   as with pre-fragmenting.  A good suspend/resume
    solution achieves\n   good performance even with type-2 receivers [1] and is able
    to work\n   with PPP hardware such as async-to-sync converters.\n   Finally, a
    partial non-requirement: While the format defined in this\n   draft is based on
    the PPP multilink protocol ([2], also abbreviated\n   as MP), operation over multiple
    links is in many cases not required.\n"
  title: 2.  Requirements
- contents:
  - "3.  General Approach\n   As in [5], the general approach is to start out from
    PPP multilink\n   and add multiple classes to obtain multiple levels of suspension.\n
    \  However, in contrast to [5], more significant changes are required to\n   be
    able to suspend the transmission of a packet at any point and\n   inject a higher
    priority packet.\n   The applicability of the multilink header for suspend/resume
    type\n   implementations is limited, as the \"end\" bit is in the multilink\n
    \  header, which is the wrong place for suspend/resume operation.  To\n   make
    a big packet suspendable, it must be sent with the \"end\" bit\n   off, and (unless
    the packet was suspended a small number of bytes\n   before its end) an empty
    fragment has to be sent afterwards to\n   \"close\" the packet.  The minimum overhead
    for sending a suspendable\n   packet thus is twice the multilink header size (six
    bytes, including\n   a compressed multilink protocol field) plus one PPP framing
    (three\n   bytes).  Each suspension costs another six bytes (not counting the\n
    \  overhead of the framing for the intervening packet).\n   Also, the existing
    multi-link header is relatively large; as the\n   frequency of small high-priority
    packets increases, the overhead\n   becomes significant.\n   The general approach
    of this document is to start from PPP Multilink\n   with classes and provide a
    number of extensions to add functionality\n   and reduce the overhead of using
    PPP Multilink for real-time\n   transmission.\n   This document introduces two
    new features:\n   1)   A compact fragment format and header, and\n   2)   a real-time
    frame format.\n"
  title: 3.  General Approach
- contents:
  - "4.  The Compact Fragment Format\n   This section describes an optional multilink
    fragment format that is\n   more optimized towards single-link operation and frequent
    suspension\n   (type 1 senders)/a small fragment size (type 2 senders), with\n
    \  optional support for multiple links.\n   When operating over a single link,
    the Multilink sequence number is\n   used only for loss detection.  Even a 12-bit
    sequence number clearly\n   is larger than required for this application on most
    kinds of links.\n   We therefore define the following compact multilink header
    format\n   option with a three-bit sequence number.\n   As, with a compact header,
    there is little need for sending packets\n   outside the multilink, we can provide
    an additional compression\n   mechanism for this format: the MP protocol identifier
    is not sent\n   with the compact fragment header.  This obviously requires prior\n
    \  negotiation (similar to the way address and control field compression\n   are
    negotiated), as well as a method for avoiding the bit combination\n   0xFF (the
    first octet in an LCP frame before any LCP options have\n   been negotiated),
    as the start of a new LCP negotiation could\n   otherwise not be reliably detected.\n
    \                 Figure 1:  Compact Fragment Format\n                    0   1
    \  2   3   4   5   6   7\n                  +---+---+---+---+---+---+---+---+\n
    \                 | R |  sequence |   class   | 1 |\n                  +---+---+---+---+---+---+---+---+\n
    \                 |            data               |\n                  :                               :\n
    \                 +---+---+---+---+---+---+---+---+\n   Having the least significant
    bit always be 1 helps with HDLC chips\n   that operate specially on least significant
    bits in HDLC addresses.\n   (Initial bytes with the least significant bit set
    to zero are used\n   for the extended compact fragment format, see next section.)\n
    \  The R bit is the inverted equivalent of the B bit in the other\n   multilink
    fragment formats, i.e. R = 1 means that this fragment\n   resumes a packet previous
    fragments of which have been sent already.\n   The following trick avoids the
    case of a header byte of 0xFF (which\n   would mean R=1, sequence=7, and class=7):
    If the class field is set\n   to 7, the R bit MUST never be set to one.  I.e.,
    class 7 frames by\n   design cannot be suspended/resumed.  (This is also the reason
    the\n   sense of the B bit is inverted to an R bit in the compact fragment\n   format
    -- class 7 would be useless otherwise, as a new packet could\n   never be begun.)\n
    \  As the sequence number is not particularly useful with the class\n   field
    set to 7, it is used to distinguish eight more classes -- for\n   some minor additional
    complexity, the applicability of prefix elision\n   is significantly increased
    by providing more classes with possibly\n   different elided prefixes.\n   For
    purposes of prefix elision, the actual class number of a fragment\n   is computed
    as follows:\n   -  If the class field is 0 to 6, the class number is 0 to 6,\n
    \  -  if the class field is 7 and the sequence field is 0 to 7, the\n      class
    number is 7 to 14.\n   As a result of this scheme, the classes 0 to 6 can be used
    for\n   suspendable packets, and classes 7 to 14 (where the class field is 7\n
    \  and the R bit must always be off) can be used for non-suspendable\n   high-priority
    classes, e.g., eight highly compressed voice streams.\n"
  title: 4.  The Compact Fragment Format
- contents:
  - "5.  The Extended Compact Fragment Format\n   For operation over multiple links,
    a three-bit sequence number will\n   rarely be sufficient.  Therefore, we define
    an optional extended\n   compact fragment format.  The option, when negotiated,
    allows both\n   the basic compact fragment format and the extended compact fragment\n
    \  format to be used; each fragment indicates which format it is in.\n               Figure
    1:  Extended Compact Fragment Format\n                     0   1   2   3   4   5
    \  6   7\n                   +---+---+---+---+---+---+---+---+\n                   |
    R |  seq LSB  |   class   | 0 |\n                   +---+---+---+---+---+---+---+---+\n
    \                  |      sequence -- MSB      | 1 |\n                   +---+---+---+---+---+---+---+---+\n
    \                  |            data               |\n                   :                               :\n
    \                  +---+---+---+---+---+---+---+---+\n   In the extended compact
    fragment format, the sequence number is\n   composed of three least significant
    bits from the first octet of the\n   fragment header and seven most significant
    bits from the second\n   octet.  (Again, the least significant bit of the second
    octet is\n   always set to one for compatibility with certain HDLC chips.)\n   For
    prefix elision purposes, fragments with a class field of 7 can\n   use the basic
    format to indicate classes 7 to 14 and the extended\n   format to indicate classes
    7 to 1030.  Different classes may use\n   different formats concurrently without
    problems.  (This allows some\n   classes to be spread over a multi-link and other
    classes to be\n   confined to a single link with greater efficiency.)  For class
    fields\n   0 to 6, i.e. suspendable classes, one of the two compact fragment\n
    \  formats SHOULD be used consistently within each class.\n   If the use of the
    extended compact fragment format has been\n   negotiated, receivers MAY keep 10-bit
    sequence numbers for all\n   classes to facilitate senders switching formats in
    a class.  When a\n   sender starts sending basic format fragments in a class that
    was\n   using extended format fragments, the 3-bit sequence number can be\n   taken
    as a modulo-8 version of the 10-bit sequence number, and no\n   discontinuity
    need result.  In the inverse case, if a 10-bit sequence\n   number has been kept
    throughout by the receiver (and no major slips\n   of the sequence number have
    occurred), no discontinuity will result,\n   although this cannot be guaranteed
    in the presence of errors.\n   (Discontinuity, in this context, means that a receiver
    has to\n   resynchronize sequence numbers by discarding fragments until a\n   fragment
    with R=0 has been seen.)\n"
  title: 5.  The Extended Compact Fragment Format
- contents:
  - "6.  Real-Time Frame Format\n   This section defines how fragments with compact
    fragment headers are\n   mapped into real-time frames.  This format has been designed
    to\n   retain the overall HDLC based format of frames, so that existing\n   synchronous
    HDLC chips and async to sync converters can be used on\n   the link.  Note that
    if the design could be optimized for async only\n   operation, more design alternatives
    would be available [4]; with the\n   advent of V.80 style modems, asynchronous
    communications is likely to\n   decrease in importance, though.\n   The compact
    fragment format provides a compact rendition of the PPP\n   multilink header with
    classes and a reduced sequence number space.\n   However, it does not encode the
    E-bit of the PPP multilink header,\n   which indicates whether the fragment at
    hand is the last fragment of\n   a packet.\n   For a solution where packets can
    be suspended at any point in time,\n   the E-bit needs to be encoded near the
    end of each fragment.  The\n   real-time frame format, to ensure maximum compatibility
    with type 2\n   receivers, encodes the E-bit in the following way: Any normal
    frame\n   ending also ends the current fragment with E implicitly set to one.\n
    \  This ensures that packets that are ready for delivery to the upper\n   layers
    immediately trigger a receive interrupt even at type-2\n   receivers.\n   Fragments
    of packets that are to be suspended are terminated within\n   the HDLC frame by
    a special \"fragment suspend escape\" byte (FSE).\n   The overall structure of
    the HDLC frame does not change; the\n   detection and handling of FSE bytes is
    done at a layer above HDLC\n   framing.\n   The suspend/resume format with FSE
    detection is an alternative to\n   address/control field compression (ACFC, LCP
    option 8).  It does not\n   apply to frames that start with 0xFF, the standard
    PPP-in-HDLC\n   address field; these frames are handled as defined in [6] and
    [7].\n   (This provision ensures that attempts to renegotiate LCP do not cause\n
    \  ambiguities.)\n   For frames that do not start with 0xFF, suspend/resume processing\n
    \  performs a scan of every HDLC frame received.  The FCS of the HDLC\n   frame
    is checked and stripped.  Compact fragment format headers (both\n   basic and
    extended) are handled without further FSE processing.\n   (Note that, as the FSE
    byte was chosen such that it never occurs in\n   compact fragment format headers,
    this does not require any specific\n   code.)\n   Within the remaining bytes of
    the HDLC frame (\"data part\"), an FSE\n   byte is used to indicate the end of
    the current fragment, with an E\n   bit implicitly cleared.  All fragments up
    to the last FSE are\n   considered suspended (E = 0); the final fragment is terminated
    (E =\n   1), or, if it is empty, ignored (i.e., the data part of an HDLC frame\n
    \  can end in an FSE to indicate that the last fragment has E = 0).\n   Each fragment
    begins with a normal header, so the structure of a\n   frame could be:\n                Figure
    2:  Example frame with FSE delimiter\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n
    \  | R |  sequence |   class   | 1 |\n   +---+---+---+---+---+---+---+---+\n   |
    \           data               |\n   :                               :\n   +---+---+---+---+---+---+---+---+\n
    \  +              FSE              + previous fragment implicitly E = 0\n   +---+---+---+---+---+---+---+---+\n
    \  | R |  sequence |   class   | 1 |\n   +---+---+---+---+---+---+---+---+\n   |
    \           data               |\n   :                               :\n   +---+---+---+---+---+---+---+---+\n
    \  |             Frame             | previous fragment implicitly E = 1\n   |
    \             CRC              |\n   +---+---+---+---+---+---+---+---+\n   The
    value chosen for FSE is 0xDE (this is a relatively unlikely byte\n   to occur
    in today's data streams, it does not trigger octet stuffing\n   and triggers bit
    stuffing only for 1/8 of the possible preceding\n   bytes).\n   The remaining
    problem is that of data transparency.  In the scheme\n   described so far, an
    FSE is always followed by a compact fragment\n   header.  In these headers, the
    combination of a class field set to 7\n   with R=1 is reserved.  Data transparency
    is achieved by making the\n   occurrence of an FSE byte followed by one of 0x8F,
    0x9F, ... to 0xFF\n   special.\n            Figure 3:  Data transparency with
    FSE bytes present\n           0   1   2   3   4   5   6   7\n          +---+---+---+---+---+---+---+---+\n
    \         | R |  sequence |   class   | 1 |\n          +---+---+---+---+---+---+---+---+\n
    \         |            data               |\n          :                               :\n
    \         +---+---+---+---+---+---+---+---+\n          +              FSE              +
    fragment NOT terminated\n          +---+---+---+---+---+---+---+---+\n          |
    R | S | T | U | 1 | 1 | 1 | 1 | R always is 1\n          +---+---+---+---+---+---+---+---+\n
    \         |            data               | fragment continues\n          :                               :\n
    \  In a combination of FSE/0xnF (where n is the first four-bit field in\n   the
    second byte, RSTU in Figure 3), the n field gives a sequence of\n   four bits
    indicating where in the received data stream FSE bytes,\n   which cannot simply
    be transmitted in the data stream, are to be\n   added by the receiver:\n"
  - '0x8F: insert one FSE, back to data

    '
  - '0x9F: insert one FSE, copy two data bytes, insert one FSE, back to data

    '
  - '0xAF: insert one FSE, copy one data byte, insert one FSE, back to data

    '
  - "0xBF: insert one FSE, copy one data byte, insert two FSE bytes, back\n      to
    data\n"
  - '0xCF: insert two FSE bytes, back to data

    '
  - "0xDF: insert two FSE bytes, copy one data byte, insert one FSE, back\n      to
    data\n"
  - '0xEF: insert three FSE bytes, back to data

    '
  - "0xFF: insert four FSE bytes, back to data\n   The data bytes following the FSE/0xnF
    combinations and corresponding\n   to the zero bits in the N field may not be
    FSE bytes.\n   This scheme limits the worst case expansion factor by FSE processing\n
    \  to about 25 %.  Also, it is designed such that a single data stream\n   can
    either trigger worst-case expansion by octet stuffing (or by bit\n   stuffing)
    or worst-case FSE processing, but never both.  Figure 4\n   illustrates the scheme
    in a few examples; FSE/0xnF pairs are written\n   in lower case.\n                 Figure
    4:  Data transparency examples\n            Data stream                     FSE-stuffed
    stream\n            DD DE DF E0                     DD de 8f DF E0\n            01
    DE 02 DE 03                  01 de af 02 03\n            DE DA DE DE DB                  de
    bf DA DB\n            DE DE DE DE DE DA               de ff de 8f DA\n   In summary,
    the real-time frame format is a HDLC-like frame delimited\n   by flags and containing
    a final FCS as defined in [7], but without\n   address and control fields, containing
    as data a sequence of FSE-\n   stuffed fragments in compact fragment format, delimited
    by FSE bytes.\n   As a special case, the final FSE may occur as the last byte
    of the\n   data content (i.e. immediately before the FCS bytes) of the HDLC-like\n
    \  frame, to indicate that the last fragment in the frame is suspended\n   and
    no final fragment is in the frame (e.g., because the desirable\n   maximum size
    of the frame has been reached).\n"
  title: 6.  Real-Time Frame Format
- contents:
  - '7.  Implementation notes

    '
  - contents:
    - "7.1.  MRU Issues\n   The LCP parameter MRU defines the maximum size of the
      packets sent on\n   the link.  Async-to-sync converters that are monitoring
      the LCP\n   negotiations on the link may interpret the MRU value as the maximum\n
      \  HDLC frame size to be expected.\n   Implementations of this specification
      should preferably negotiate a\n   sufficiently large MRU to cover the worst-case
      25 % increase in frame\n   size plus the increase caused by suspended fragments.
      \ If that is not\n   possible, the HDLC frame size should be limited by monitoring
      the\n   HDLC frame sizes and possibly suspending the current fragment by\n   sending
      an FSE with an empty final fragment (FSE immediately followed\n   by the end
      of the information field, i.e. by CRC bytes and a flag) to\n   be able to continue
      in a new HDLC frame.  This strategy also helps\n   minimizing the impact of
      lengthening the HDLC frame on the safety of\n   the 16-bit FCS at the end of
      the HDLC frame.\n"
    title: 7.1.  MRU Issues
  - contents:
    - "7.2.  Implementing octet-stuffing and FSE processing in one automaton\n   The
      simplest way to add real-time framing to an implementation may be\n   to perform
      HDLC processing as usual and then, on the result, to\n   perform FSE processing.
      \ A more advanced implementation may want to\n   combine the two levels of escape
      character processing.  Note,\n   however, that FSE processing needs to wait
      until two bytes from the\n   HDLC frame are available and followed by a third
      to ensure that the\n   bytes are not the final HDLC FCS bytes, which are not
      subject to FSE\n   processing.  I.e., on the reception of normal data byte,
      look for an\n   FSE in the second-to-previous byte, and, on the reception of
      a\n   frame-end, look for an FSE as the last data byte.\n"
    title: 7.2.  Implementing octet-stuffing and FSE processing in one automaton
  title: 7.  Implementation notes
- contents:
  - "8.  Negotiable options\n   The following options are already defined by MP [2]:\n
    \  o    Multilink Maximum Received Reconstructed Unit\n   o    Multilink Short
    Sequence Number Header Format\n   o    Endpoint Discriminator\n   The following
    options are already defined by MCML [5]:\n   o    Multilink Header Format\n   o
    \   Prefix Elision\n   This document defines two new code points for the Multilink
    Header\n   Format option.\n"
  - contents:
    - "8.1.  Multilink header format option\n   The multilink header format option
      is defined in [5].  A summary of\n   the Multilink Header Format Option format
      is shown below.  The fields\n   are transmitted from left to right.\n           Figure
      5:  Multilink header format option\n     0                   1                   2
      \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |   Type = 27   |  Length = 4   |     Code      | # Susp Clses  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   As defined in [5], this LCP option advises the peer that the\n    implementation
      wishes to receive fragments with a format given by\n    the code number, with
      the maximum number of suspendable classes (see\n    below) given.  This specification
      defines two additional values for\n    Code, in addition to those defined in
      [5]:\n   -  Code = 11: basic and extended compact real-time fragment format\n
      \     with classes, in FSE-encoded HDLC frame\n   -  Code = 15: basic compact
      real-time fragment format with classes,\n      in FSE-encoded HDLC frame\n   An
      implementation MUST NOT request a combination of both LCP\n   Address-and-Control-Field-Compression
      (ACFC) and the code values 11\n   or 15 for this option.\n   The number of suspendable
      classes negotiated for the compact real-\n   time fragment format only limits
      the use of class numbers that allow\n   suspending.  As class numbers of 7 and
      higher do not require\n   additional reassembly space, they are not subject
      to the class number\n   limit negotiated.\n"
    title: 8.1.  Multilink header format option
  title: 8.  Negotiable options
- contents:
  - "9.  Security Considerations\n   Operation of this protocol is believed to be
    no more and no less\n   secure than operation of the PPP multilink protocol [2].
    \ Operation\n   with a small sequence number range increases the likelihood that\n
    \  fragments from different packets could be incorrectly reassembled\n   into
    one packet.  While most such packets will be discarded by the\n   receiver because
    of higher-layer checksum failures or other\n   inconsistencies, there is an increase
    in likelihood that contents of\n   packets destined for one host could be delivered
    to another host.\n   Links that carry packets where this raises security considerations\n
    \  SHOULD use the extended sequence number range for multi-fragment\n   packets.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  References\n   [1]  Bormann, C., \"Providing Integrated Services over Low-bitrate\n
    \       Links\", RFC 2689, September 1999.\n   [2]  Sklower, K., Lloyd, B., McGregor,
    G., Carr, D. and  T.\n        Coradetti, \"The PPP Multilink Protocol (MP)\",
    RFC 1990, August\n        1996.\n   [3]  Simpson, W., \"PPP in Frame Relay\",
    RFC 1973, June 1996.\n   [4]  Andrades, R. and F. Burg, \"QOSPPP Framing Extensions
    to PPP\",\n        Work in Progress.\n   [5]  Bormann, C., \"The Multi-Class Extension
    to Multi-Link PPP\", RFC\n        2686, September 1999.\n   [6]  Simpson, W.,
    Editor, \"The Point-to-Point Protocol (PPP)\", STD\n        51, RFC 1661, July
    1994.\n   [7]  Simpson, W., Editor, \"PPP in HDLC-like Framing\", STD 51, RFC\n
    \       1662, July 1994.\n   [8]  Bradner, S., \"Key words for use in RFCs to
    Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
  title: 10.  References
- contents:
  - "11.  Author's Address\n   Carsten Bormann\n   Universitaet Bremen FB3 TZI\n   Postfach
    330440\n   D-28334 Bremen, GERMANY\n   Phone: +49.421.218-7024\n   Fax:   +49.421.218-7000\n
    \  EMail: cabo@tzi.org\n"
  title: 11.  Author's Address
- contents:
  - "Acknowledgements\n   The participants in a lunch BOF at the Montreal IETF 1996
    gave useful\n   input on the design tradeoffs in various environments.  Richard\n
    \  Andrades, Fred Burg, and Murali Aravamudan insisted that there should\n   be
    a suspend/resume solution in addition to the pre-fragmenting one\n   defined in
    [5].  The members of the ISSLL subgroup on low bitrate\n   links (ISSLOW) have
    helped in coming up with a set of requirements\n   that shaped this solution.\n"
  title: Acknowledgements
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
