- title: __initial_text__
  contents:
  - "references: RFC 542                                        Jim White (SRI-ARC)\n\
    obsoletes: RFC 607                                                   Feb  1974\n\
    \              Comments on the File Transfer Protocol\nThis document replaces\
    \ RFC 607, which was inadvertently released\nwhile still in rough draft form.\
    \ It would be appreciated if RFC 607\nwere disregarded, and this document considered\
    \ the accurate statement\nof the authors' opinions.\nThere are several aspects\
    \ of the File Transfer Protocol of RFC\n542 that constitute serious drawbacks.\
    \ Some of these are quite basic\nin nature, and imply substantial design changes;\
    \ these will be\ndiscussed in a later RFC. Others could be remedied with very\
    \ little\neffort, and this should be done as soon as possible.\nFollowing is a\
    \ list of those problems that can be easily solved,\ntogether with their proposed\
    \ solutions:\n1. Once a server has been set to the state where he is \"passive\"\
    \nwith regard to establishment of data connections, there is no\nconvenient way\
    \ for the user to make him \"active\" again. The\n\"REIN\" command accomplishes\
    \ this, but affects more than just the\ndesired active/passive state. SOLUTION:\
    \ define a new command,\nwith a command verb of \"ACTV\", to mean that the server\
    \ is to issue\na CONNECT rather than a LISTEN on the data socket. If the server\n\
    is already \"active\", the command is a no op. \"ACTV\" is to have\nthe same reply\
    \ codes as \"PASV\".\n2. Design of an FTP server or user would be simpler if all\n\
    command verbs were the same length. While it is certainly\npossible to handle\
    \ varying length verbs, fixed length string\nmanipulation is in general easier\
    \ to write and faster to run than\nvarying length string manipulation, and it\
    \ would seem that nothing\nis to be gained in this application by allowing varying\
    \ length\nstrings. SOLUTION: replace the only three-letter verb, \"BYE\",\nwith\
    \ a four-letter one, such as \"QUIT\", and constrain future\ncommand verbs to\
    \ be four letters long.\n3. The order of the handshaking elements following a\
    \ file transfer\ncommand is left unspecified. After sending a STOR command, for\n\
    example, a user process has no way of knowing which to wait for\nfirst, the \"\
    250 FILE TRANSFER STARTED\" reply, or establishment of\nthe data connection. SOLUTION:\
    \ specify that the server is to\nsend a \"250\" reply before attempting to establish\
    \ the data\nconnection. If it is desired to check if the user is logged in,\n\
    if the file exists, or if the user is to be allowed access to the\nfile, these\
    \ checks must be made before any reply is sent. The\ntext of the \"250\" reply\
    \ would perhaps be more appropriate as \"250\nOPENING DATA CONNECTION\", since\
    \ it comes before actual data\ntransfer begins. If the server wishes to send an\
    \ error reply in\nthe event that the data connection cannot be opened, it is to\
    \ be\nsent in lieu of the \"252 TRANSFER COMPLETE\" reply.\n4. Some hosts currently\
    \ send an error reply on receipt of a\ncommand that is unimplemented because it\
    \ is hot needed (e.g.,\n\"ACCT\" or \"ALLO\"). Even though the text of the reply\
    \ indicates\nthat the command has been ignored, it is obviously impossible for\n\
    a user process to know that there is no real \"error\". SOLUTION:\nrequire that\
    \ any server that does not support a particular command\nbecause it is not needed\
    \ in that system must return the success\nreply for that command.\n5. There is\
    \ no specified maximum length of a TELNET command line,\nTELNET reply line, user\
    \ name, password, account, or pathname. It\nis true that every system implementing\
    \ an FTP server likely has\ndifferent maxima for its own parameters, but it is\
    \ inconvenient,\nat least in some systems, for the writer of an FTP user (which\n\
    must converse with many FTP servers) to construct an indefinite\nlength buffer.\
    \ Similar difficulties confront the writer of a\nserver FTP. SOLUTION: specify\
    \ a maximum length for TELNET\ncommand lines, TELNET replies, user names, passwords,\
    \ account\nnumbers, and pathnames. This is to be done after conducting a\nPoll\
    \ of serving sites concerning their individual maxima. If\nNetwork mail is to\
    \ be included in FTP, the mail text, if sent over\nthe TELNET connection, is to\
    \ be subject to the same line length\nmaximum.\n6. The notion of allowing continuation\
    \ lines to start with\narbitrary text solves a minor problem for a few server\
    \ FTP\nimplementors at the expense of creating a major problem for all\nuser FTP\
    \ implementors. The logic needed to decode a multi-line\nreply is unnecessarily\
    \ complex, and made an order of magnitude\nmore so by the fact that multi-line\
    \ replies arc allowed to be\nnested. SOLUTION: assign a unique (numeric) reply\
    \ code, such as\n\"009\", to be used on all lines of a multi-line reply after\
    \ the\nfirst. The reply code used for this purpose must begin with \"0\"\n(it\
    \ cannot be three blanks, for example), so that it will appear\nas extraneous\
    \ to a user process by virtue of the already existing\nrules concerning reply\
    \ code groupings.\n7. If it is the case that the above solution to (6) is not\n\
    accepted, the fact that the maximum allowed level of nesting is\nleft unspecified\
    \ creates a hardship for implementors of user FTPs.\nThis hardship is somewhat\
    \ easily solved on a machine that has\nhardware stacks, but not so for other machines.\
    \ SOLUTION: either\ndisallow nested replies (preferred), or specify a maximum\
    \ level of\nnesting of multi-line replies.\n8. The prose descriptions of the meanings\
    \ of the various reply\ncodes are in several cases unclear or ambiguous. For example,\
    \ the\ncode \"020\" is explained only as \"announcing FTP\". It is given as\n\
    a reply that can be issued when a server cannot accept input\nimmediately after\
    \ an ICP, but its exact meaning is not obvious.\nAlso. the code \"331\" is said\
    \ to mean \"ENTER ACCOUNT (if required\nas part of login sequence)\", but is listed\
    \ as a possible success\nreply for most of the commands. The explanation indicates\
    \ that it\nis only valid in the login sequence, but the command-reply\ncorrespondence\
    \ table implies that it also means, \"I can't do that\nwithout an account\". SOLUTION:\
    \ an expanded effort should be made\nby those who originated the reply codes to\
    \ define them more\ncompletely.\nA major complaint about the protocol concerns\
    \ the fact that the\nwriter of an FTP user process must handle a considerable\
    \ number of\nspecial cases merely to determine Whether or not the last command\n\
    sent was successful. It is admitted that the protocol is\nwell-defined in all\
    \ the following areas, but it is important to\nrealize that the characteristic\
    \ \"well-defined\" is necessary, but hot\nsufficient; for many reasons, it is\
    \ very desirable to employ the\nsimplest mechanism that satisfies all the needs.\
    \ Following is a list\nof those drawbacks that unduly complicate the flow chart\
    \ of an FTP\nuser process:\n9. Different commands have different success reply\
    \ codes. A\nsuccessful \"USER\" command, for example, returns a \"230\", whereas\
    \ a\nsuccessful \"BYTE\" command returns a \"200\". The stated concept\nthat the\
    \ first digit would carry this information does not apply,\nas \"100\" means success\
    \ for \"STAT\", and \"200\" means success for\n\"SOCK\". SOLUTION: specify that\
    \ any command must return a reply\ncode beginning with some unique digit, such\
    \ as \"2\", if successful,\nand anything other than that digit if not successful.\
    \ For\nexample this includes changing the success reply for STAT,\nPerhaps to\
    \ \"200\".\n10. Some commands have multiple possible success reply codes,\ne.g.,\
    \ \"USER\" and \"REIN\". It is undesirable for ah FTP user to be\nrequired to\
    \ keep a list of reply codes for each command, all of\nwhich mean \"command accepted,\
    \ continue\". Again, the stated\nconcept concerning the first digit fails, as\
    \ \"230\" and \"330\" are\nin truth both acknowledgments to a successful \"USER\"\
    \ command.\nSOLUTION: same as for (9) above. The desire to communicate more\n\
    specific information than simply \"yes\" or \"no\", such as the\ndifficulty that\
    \ some servers do not need all the login parameters,\nmay be solved by having,\
    \ for example, \"230\" mean \"PASSWORD\nACCEPTED, YOU ARE NOW LOGGED IN\", and\
    \ \"237\" mean \"PASSWORD\nACCEPTED, ACCOUNT NOW NEEDED\". Given the solution\
    \ to (4) above, a\nuser process becomes much less interested in the difference\n\
    between \"YOU ARE NOW LOGGED IN\" and \"ACCOUNT NOW NEEDED\". The\nimportant point\
    \ is that the idea of \"command accepted\" is conveyed\nby the initial \"2, and\
    \ that finer gradations of meaning can be\ndeduced by the user process, if desired.\n\
    11. The meanings of the various connection greeting reply codes\nare somewhat\
    \ inconsistent. \"300 connection greeting, awaiting\ninput\", if intended as a\
    \ positive acknowledgments to the ICP,\nshould be a 200-series reply, or if intended\
    \ to be purely\ninformative, a 000-series reply. If the former, then clearly \"\
    020\nexpected delay\" is the corresponding negative acknowledgments, and\nshould\
    \ be a 400-series reply. It is however unlikely that\nnotification of an expected\
    \ delay would be of importance to a user\nProcess without knowledge of the length\
    \ of the delay. SOLUTION.:\nchange \"300 connection greeting\" to a 000-series\
    \ reply, perhaps\n\"011\" (preferred), or change \"300 connection greeting\" to\
    \ a\n200-series reply, perhaps \"211\", and \"020 expected delay\" to a\n400-series\
    \ reply, perhaps \"411\".\nIn addition to the above mentioned weaknesses in the\
    \ protocol,\nthe following is believed to be a typographical error:\n12. Reply\
    \ code \"332 LOGIN PLEASE\" is not listed anywhere in the\ncommand-reply correspondence\
    \ table. It Would seem that this would\nbe a more-information-needed (success)\
    \ reply for all those\ncommands which require the user to be logged in. It should\
    \ also\nbe stressed that the \"332\" code is to be used for this purpose, as\n\
    many servers currently use other codes, such as \"451\" and \"504\",\nto mean\
    \ \"LOGIN PLEASE\".\n"
