- title: __initial_text__
  contents:
  - "                      The TCP Maximum Segment Size\n                        \
    \   and Related Topics\n"
- title: This memo discusses the TCP Maximum Segment Size Option and related
  contents:
  - 'This memo discusses the TCP Maximum Segment Size Option and related

    '
- title: topics.  The purposes is to clarify some aspects of TCP and its
  contents:
  - 'topics.  The purposes is to clarify some aspects of TCP and its

    '
- title: interaction with IP.  This memo is a clarification to the TCP
  contents:
  - 'interaction with IP.  This memo is a clarification to the TCP

    '
- title: specification, and contains information that may be considered as
  contents:
  - 'specification, and contains information that may be considered as

    '
- title: '"advice to implementers".'
  contents:
  - '"advice to implementers".

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo discusses the TCP Maximum Segment Size and its\
    \ relation to\n   the IP Maximum Datagram Size.  TCP is specified in reference\
    \ [1].  IP\n   is specified in references [2,3].\n   This discussion is necessary\
    \ because the current specification of\n   this TCP option is ambiguous.\n   Much\
    \ of the difficulty with understanding these sizes and their\n   relationship\
    \ has been due to the variable size of the IP and TCP\n   headers.\n   There have\
    \ been some assumptions made about using other than the\n   default size for datagrams\
    \ with some unfortunate results.\n      HOSTS MUST NOT SEND DATAGRAMS LARGER THAN\
    \ 576 OCTETS UNLESS THEY\n      HAVE SPECIFIC KNOWLEDGE THAT THE DESTINATION HOST\
    \ IS PREPARED TO\n      ACCEPT LARGER DATAGRAMS.\n         This is a long established\
    \ rule.\n   To resolve the ambiguity in the TCP Maximum Segment Size option\n\
    \   definition the following rule is established:\n      THE TCP MAXIMUM SEGMENT\
    \ SIZE IS THE IP MAXIMUM DATAGRAM SIZE MINUS\n      FORTY.\n         The default\
    \ IP Maximum Datagram Size is 576.\n         The default TCP Maximum Segment Size\
    \ is 536.\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n"
- title: 2.  The IP Maximum Datagram Size
  contents:
  - "2.  The IP Maximum Datagram Size\n   Hosts are not required to reassemble infinitely\
    \ large IP datagrams.\n   The maximum size datagram that all hosts are required\
    \ to accept or\n   reassemble from fragments is 576 octets.  The maximum size\
    \ reassembly\n   buffer every host must have is 576 octets.  Hosts are allowed\
    \ to\n   accept larger datagrams and assemble fragments into larger datagrams,\n\
    \   hosts may have buffers as large as they please.\n   Hosts must not send datagrams\
    \ larger than 576 octets unless they have\n   specific knowledge that the destination\
    \ host is prepared to accept\n   larger datagrams.\n"
- title: 3.  The TCP Maximum Segment Size Option
  contents:
  - "3.  The TCP Maximum Segment Size Option\n   TCP provides an option that may be\
    \ used at the time a connection is\n   established (only) to indicate the maximum\
    \ size TCP segment that can\n   be accepted on that connection.  This Maximum\
    \ Segment Size (MSS)\n   announcement (often mistakenly called a negotiation)\
    \ is sent from the\n   data receiver to the data sender and says \"I can accept\
    \ TCP segments\n   up to size X\". The size (X) may be larger or smaller than\
    \ the\n   default.  The MSS can be used completely independently in each\n   direction\
    \ of data flow.  The result may be quite different maximum\n   sizes in the two\
    \ directions.\n   The MSS counts only data octets in the segment, it does not\
    \ count the\n   TCP header or the IP header.\n   A footnote:  The MSS value counts\
    \ only data octets, thus it does not\n   count the TCP SYN and FIN control bits\
    \ even though SYN and FIN do\n   consume TCP sequence numbers.\n"
- title: 4.  The Relationship of TCP Segments and IP Datagrams
  contents:
  - "4.  The Relationship of TCP Segments and IP Datagrams\n   TCP segment are transmitted\
    \ as the data in IP datagrams.  The\n   correspondence between TCP segments and\
    \ IP datagrams must be one to\n   one.  This is because TCP expects to find exactly\
    \ one complete TCP\n   segment in each block of data turned over to it by IP,\
    \ and IP must\n   turn over a block of data for each datagram received (or completely\n\
    \   reassembled).\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n"
- title: 5.  Layering and Modularity
  contents:
  - "5.  Layering and Modularity\n   TCP is an end to end reliable data stream protocol\
    \ with error\n   control, flow control, etc.  TCP remembers many things about\
    \ the\n   state of a connection.\n   IP is a one shot datagram protocol.  IP has\
    \ no memory of the\n   datagrams transmitted.  It is not appropriate for IP to\
    \ keep any\n   information about the maximum datagram size a particular destination\n\
    \   host might be capable of accepting.\n   TCP and IP are distinct layers in\
    \ the protocol architecture, and are\n   often implemented in distinct program\
    \ modules.\n   Some people seem to think that there must be no communication between\n\
    \   protocol layers or program modules.  There must be communication\n   between\
    \ layers and modules, but it should be carefully specified and\n   controlled.\
    \  One problem in understanding the correct view of\n   communication between\
    \ protocol layers or program modules in general,\n   or between TCP and IP in\
    \ particular is that the documents on\n   protocols are not very clear about it.\
    \  This is often because the\n   documents are about the protocol exchanges between\
    \ machines, not the\n   program architecture within a machine, and the desire\
    \ to allow many\n   program architectures with different organization of tasks\
    \ into\n   modules.\n"
- title: 6.  IP Information Requirements
  contents:
  - "6.  IP Information Requirements\n   There is no general requirement that IP keep\
    \ information on a per\n   host basis.\n   IP must make a decision about which\
    \ directly attached network address\n   to send each datagram to.  This is simply\
    \ mapping an IP address into\n   a directly attached network address.\n   There\
    \ are two cases to consider:  the destination is on the same\n   network, and\
    \ the destination is on a different network.\n      Same Network\n         For\
    \ some networks the the directly attached network address can\n         be computed\
    \ from the IP address for destination hosts on the\n         directly attached\
    \ network.\n         For other networks the mapping must be done by table look\
    \ up\n         (however the table is initialized and maintained, for\n       \
    \  example, [4]).\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n  \
    \    Different Network\n         The IP address must be mapped to the directly\
    \ attached network\n         address of a gateway.  For networks with one gateway\
    \ to the\n         rest of the Internet the host need only determine and remember\n\
    \         the gateway address and use it for sending all datagrams to\n      \
    \   other networks.\n         For networks with multiple gateways to the rest\
    \ of the\n         Internet, the host must decide which gateway to use for each\n\
    \         datagram sent.  It need only check the destination network of\n    \
    \     the IP address and keep information on which gateway to use for\n      \
    \   each network.\n   The IP does, in some cases, keep per host routing information\
    \ for\n   other hosts on the directly attached network.  The IP does, in some\n\
    \   cases, keep per network routing information.\n   A Special Case\n      There\
    \ are two ICMP messages that convey information about\n      particular hosts.\
    \  These are subtypes of the Destination\n      Unreachable and the Redirect ICMP\
    \ messages.  These messages are\n      expected only in very unusual circumstances.\
    \  To make effective\n      use of these messages the receiving host would have\
    \ to keep\n      information about the specific hosts reported on.  Because these\n\
    \      messages are quite rare it is strongly recommended that this be\n     \
    \ done through an exception mechanism rather than having the IP keep\n      per\
    \ host tables for all hosts.\n"
- title: 7.  The Relationship between IP Datagram and TCP Segment Sizes
  contents:
  - "7.  The Relationship between IP Datagram and TCP Segment Sizes\n   The relationship\
    \ between the value of the maximum IP datagram size\n   and the maximum TCP segment\
    \ size is obscure.  The problem is that\n   both the IP header and the TCP header\
    \ may vary in length.  The TCP\n   Maximum Segment Size option (MSS) is defined\
    \ to specify the maximum\n   number of data octets in a TCP segment exclusive\
    \ of TCP (or IP)\n   header.\n   To notify the data sender of the largest TCP\
    \ segment it is possible\n   to receive the calculation of the MSS value to send\
    \ is:\n      MSS = MTU - sizeof(TCPHDR) - sizeof(IPHDR)\n   On receipt of the\
    \ MSS option the calculation of the size of segment\n   that can be sent is:\n\
    \      SndMaxSegSiz = MIN((MTU - sizeof(TCPHDR) - sizeof(IPHDR)), MSS)\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n  \
    \ where MSS is the value in the option, and MTU is the Maximum\n   Transmission\
    \ Unit (or the maximum packet size) allowed on the\n   directly attached network.\n\
    \   This begs the question, though.  What value should be used for the\n   \"\
    sizeof(TCPHDR)\" and for the \"sizeof(IPHDR)\"?\n   There are three reasonable\
    \ positions to take: the conservative, the\n   moderate, and the liberal.\n  \
    \ The conservative or pessimistic position assumes the worst -- that\n   both\
    \ the IP header and the TCP header are maximum size, that is, 60\n   octets each.\n\
    \      MSS = MTU - 60 - 60 = MTU - 120\n      If MTU is 576 then MSS = 456\n \
    \  The moderate position assumes the that the IP is maximum size (60\n   octets)\
    \ and the TCP header is minimum size (20 octets), because there\n   are no TCP\
    \ header options currently defined that would normally be\n   sent at the same\
    \ time as data segments.\n      MSS = MTU - 60 - 20 = MTU - 80\n      If MTU is\
    \ 576 then MSS = 496\n   The liberal or optimistic position assumes the best --\
    \ that both the\n   IP header and the TCP header are minimum size, that is, 20\
    \ octets\n   each.\n      MSS = MTU - 20 - 20 = MTU - 40\n      If MTU is 576\
    \ then MSS = 536\n      If nothing is said about MSS, the data sender may cram\
    \ as much as\n      possible into a 576 octet datagram, and if the datagram has\n\
    \      minimum headers (which is most likely), the result will be 536\n      data\
    \ octets in the TCP segment.  The rule relating MSS to the\n      maximum datagram\
    \ size ought to be consistent with this.\n   A practical point is raised in favor\
    \ of the liberal position too.\n   Since the use of minimum IP and TCP headers\
    \ is very likely in the\n   very large percentage of cases, it seems wasteful\
    \ to limit the TCP\n   segment data to so much less than could be transmitted\
    \ at once,\n   especially since it is less that 512 octets.\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n  \
    \    For comparison:  536/576 is 93% data, 496/576 is 86% data, 456/576\n    \
    \  is 79% data.\n"
- title: 8.  Maximum Packet Size
  contents:
  - "8.  Maximum Packet Size\n   Each network has some maximum packet size, or maximum\
    \ transmission\n   unit (MTU).  Ultimately there is some limit imposed by the\n\
    \   technology, but often the limit is an engineering choice or even an\n   administrative\
    \ choice.  Different installations of the same network\n   product do not have\
    \ to use the same maximum packet size.  Even within\n   one installation not all\
    \ host must use the same packet size (this way\n   lies madness, though).\n  \
    \ Some IP implementers have assumed that all hosts on the directly\n   attached\
    \ network will be the same or at least run the same\n   implementation.  This\
    \ is a dangerous assumption.  It has often\n   developed that after a small homogeneous\
    \ set of host have become\n   operational additional hosts of different types\
    \ are introduced into\n   the environment.  And it has often developed that it\
    \ is desired to\n   use a copy of the implementation in a different inhomogeneous\n\
    \   environment.\n   Designers of gateways should be prepared for the fact that\
    \ successful\n   gateways will be copied and used in other situation and\n   installations.\
    \  Gateways must be prepared to accept datagrams as\n   large as can be sent in\
    \ the maximum packets of the directly attached\n   networks.  Gateway implementations\
    \ should be easily configured for\n   installation in different circumstances.\n\
    \   A footnote:  The MTUs of some popular networks (note that the actual\n   limit\
    \ in some installations may be set lower by administrative\n   policy):\n    \
    \  ARPANET, MILNET = 1007\n      Ethernet (10Mb) = 1500\n      Proteon PRONET\
    \  = 2046\n"
- title: 9.  Source Fragmentation
  contents:
  - "9.  Source Fragmentation\n   A source host would not normally create datagram\
    \ fragments.  Under\n   normal circumstances datagram fragments only arise when\
    \ a gateway\n   must send a datagram into a network with a smaller maximum packet\n\
    \   size than the datagram.  In this case the gateway must fragment the\n   datagram\
    \ (unless it is marked \"don't fragment\" in which case it is\n   discarded, with\
    \ the option of sending an ICMP message to the source\n   reporting the problem).\n\
    \   It might be desirable for the source host to send datagram fragments\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n  \
    \ if the maximum segment size (default or negotiated) allowed by the\n   data\
    \ receiver were larger than the maximum packet size allowed by the\n   directly\
    \ attached network.  However, such datagram fragments must not\n   combine to\
    \ a size larger than allowed by the destination host.\n      For example, if the\
    \ receiving TCP announced that it would accept\n      segments up to 5000 octets\
    \ (in cooperation with the receiving IP)\n      then the sending TCP could give\
    \ such a large segment to the\n      sending IP provided the sending IP would\
    \ send it in datagram\n      fragments that fit in the packets of the directly\
    \ attached\n      network.\n   There are some conditions where source host fragmentation\
    \ would be\n   necessary.\n      If the host is attached to a network with a small\
    \ packet size (for\n      example 256 octets), and it supports an application\
    \ defined to\n      send fixed sized messages larger than that packet size (for\n\
    \      example TFTP [5]).\n      If the host receives ICMP Echo messages with\
    \ data it is required\n      to send an ICMP Echo-Reply message with the same\
    \ data.  If the\n      amount of data in the Echo were larger than the packet\
    \ size of the\n      directly attached network the following steps might be required:\n\
    \      (1) receive the fragments, (2) reassemble the datagram, (3)\n      interpret\
    \ the Echo, (4) create an Echo-Reply, (5) fragment it, and\n      (6) send the\
    \ fragments.\n"
- title: 10. Gateway Fragmentation
  contents:
  - "10. Gateway Fragmentation\n   Gateways must be prepared to do fragmentation.\
    \  It is not an optional\n   feature for a gateway.\n   Gateways have no information\
    \ about the size of datagrams destination\n   hosts are prepared to accept.  It\
    \ would be inappropriate for gateways\n   to attempt to keep such information.\n\
    \   Gateways must be prepared to accept the largest datagrams that are\n   allowed\
    \ on each of the directly attached networks, even if it is\n   larger than 576\
    \ octets.\n   Gateways must be prepared to fragment datagrams to fit into the\n\
    \   packets of the next network, even if it smaller than 576 octets.\n   If a\
    \ source host thought to take advantage of the local network's\n   ability to\
    \ carry larger datagrams but doesn't have the slightest idea\n   if the destination\
    \ host can accept larger than default datagrams and\n   expects the gateway to\
    \ fragment the datagram into default size\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n  \
    \ fragments, then the source host is misguided.  If indeed, the\n   destination\
    \ host can't accept larger than default datagrams, it\n   probably can't reassemble\
    \ them either. If the gateway either passes\n   on the large datagram whole or\
    \ fragments into default size fragments\n   the destination will not accept it.\
    \  Thus, this mode of behavior by\n   source hosts must be outlawed.\n   A larger\
    \ than default datagram can only arrive at a gateway because\n   the source host\
    \ knows that the destination host can handle such large\n   datagrams (probably\
    \ because the destination host announced it to the\n   source host in an TCP MSS\
    \ option).  Thus, the gateway should pass on\n   this large datagram in one piece\
    \ or in the largest fragments that fit\n   into the next network.\n   An interesting\
    \ footnote is that even though the gateways may know\n   about know the 576 rule,\
    \ it is irrelevant to them.\n"
- title: 11. Inter-Layer Communication
  contents:
  - "11. Inter-Layer Communication\n   The Network Driver (ND) or interface should\
    \ know the Maximum\n   Transmission Unit (MTU) of the directly attached network.\n\
    \   The IP should ask the Network Driver for the Maximum Transmission\n   Unit.\n\
    \   The TCP should ask the IP for the Maximum Datagram Data Size (MDDS).\n   This\
    \ is the MTU minus the IP header length (MDDS = MTU - IPHdrLen).\n   When opening\
    \ a connection TCP can send an MSS option with the value\n   equal MDDS - TCPHdrLen.\n\
    \   TCP should determine the Maximum Segment Data Size (MSDS) from either\n  \
    \ the default or the received value of the MSS option.\n   TCP should determine\
    \ if source fragmentation is possible (by asking\n   the IP) and desirable.\n\
    \      If so TCP may hand to IP segments (including the TCP header) up to\n  \
    \    MSDS + TCPHdrLen.\n      If not TCP may hand to IP segments (including the\
    \ TCP header) up\n      to the lesser of (MSDS + TCPHdrLen) and MDDS.\n   IP checks\
    \ the length of data passed to it by TCP.  If the length is\n   less than or equal\
    \ MDDS, IP attached the IP header and hands it to\n   the ND.  Otherwise the IP\
    \ must do source fragmentation.\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n"
- title: 12. What is the Default MSS ?
  contents:
  - "12. What is the Default MSS ?\n   Another way of asking this question is \"What\
    \ transmitted value for\n   MSS has exactly the same effect of not transmitting\
    \ the option at\n   all?\".\n   In terms of the previous section:\n      The default\
    \ assumption is that the Maximum Transmission Unit is\n      576 octets.\n   \
    \      MTU = 576\n      The Maximum Datagram Data Size (MDDS) is the MTU minus\
    \ the IP\n      header length.\n         MDDS = MTU - IPHdrLen = 576 - 20 = 556\n\
    \      When opening a connection TCP can send an MSS option with the\n      value\
    \ equal MDDS - TCPHdrLen.\n         MSS = MDDS - TCPHdrLen = 556 - 20 = 536\n\
    \      TCP should determine the Maximum Segment Data Size (MSDS) from\n      either\
    \ the default or the received value of the MSS option.\n         Default MSS =\
    \ 536, then MSDS = 536\n      TCP should determine if source fragmentation is\
    \ possible and\n      desirable.\n         If so TCP may hand to IP segments (including\
    \ the TCP header) up\n         to MSDS + TCPHdrLen (536 + 20 = 556).\n       \
    \  If not TCP may hand to IP segments (including the TCP header)\n         up\
    \ to the lesser of (MSDS + TCPHdrLen (536 + 20 = 556)) and\n         MDDS (556).\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n"
- title: 13. The Truth
  contents:
  - "13. The Truth\n   The rule relating the maximum IP datagram size and the maximum\
    \ TCP\n   segment size is:\n      TCP Maximum Segment Size = IP Maximum Datagram\
    \ Size - 40\n   The rule must match the default case.\n      If the TCP Maximum\
    \ Segment Size option is not transmitted then the\n      data sender is allowed\
    \ to send IP datagrams of maximum size (576)\n      with a minimum IP header (20)\
    \ and a minimum TCP header (20) and\n      thereby be able to stuff 536 octets\
    \ of data into each TCP segment.\n   The definition of the MSS option can be stated:\n\
    \      The maximum number of data octets that may be received by the\n      sender\
    \ of this TCP option in TCP segments with no TCP header\n      options transmitted\
    \ in IP datagrams with no IP header options.\n"
- title: 14. The Consequences
  contents:
  - "14. The Consequences\n   When TCP is used in a situation when either the IP or\
    \ TCP headers are\n   not minimum and yet the maximum IP datagram that can be\
    \ received\n   remains 576 octets then the TCP Maximum Segment Size option must\
    \ be\n   used to reduce the limit on data octets allowed in a TCP segment.\n \
    \     For example, if the IP Security option (11 octets) were in use and\n   \
    \   the IP maximum datagram size remained at 576 octets, then the TCP\n      should\
    \ send the MSS with a value of 525 (536-11).\n"
- title: RFC 879                                                    November 1983
  contents:
  - 'RFC 879                                                    November 1983

    '
- title: TCP Maximum Segment Size
  contents:
  - "TCP Maximum Segment Size                                                \n"
- title: 15. References
  contents:
  - "15. References\n   [1]  Postel, J., ed., \"Transmission Control Protocol - DARPA\
    \ Internet\n        Program Protocol Specification\", RFC 793, USC/Information\n\
    \        Sciences Institute, September 1981.\n   [2]  Postel, J., ed., \"Internet\
    \ Protocol - DARPA Internet Program\n        Protocol Specification\", RFC 791,\
    \ USC/Information Sciences\n        Institute, September 1981.\n   [3]  Postel,\
    \ J., \"Internet Control Message Protocol - DARPA Internet\n        Program Protocol\
    \ Specification\", RFC 792, USC/Information\n        Sciences Institute, September\
    \ 1981.\n   [4]  Plummer, D., \"An Ethernet Address Resolution Protocol or\n \
    \       Converting Network Protocol Addresses to 48-bit Ethernet\n        Addresses\
    \ for Transmission on Ethernet Hardware\", RFC 826,\n        MIT/LCS, November\
    \ 1982.\n   [5]  Sollins, K., \"The TFTP Protocol (Revision 2)\", RFC 783, MIT/LCS,\n\
    \        June 1981.\n"
