- title: __initial_text__
  contents:
  - '      Using the IPv6 Flow Label for Load Balancing in Server Farms

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes how the currently specified IPv6 flow label\n\
    \   can be used to enhance layer 3/4 (L3/4) load distribution and\n   balancing\
    \ for large server farms.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7098.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Summary of Flow Label Specification . . . . . . . . .\
    \ . . . .   2\n   3.  Summary of Server Farm Load-Balancing Techniques  . . .\
    \ . . .   4\n   4.  Applying the Flow Label to Layer 3/4 Load Balancing . . .\
    \ . .   8\n   5.  Security Considerations . . . . . . . . . . . . . . . . . .\
    \ .  10\n   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .\
    \  11\n   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12\n\
    \     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  12\n  \
    \   7.2.  Informative References  . . . . . . . . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPv6 flow label has been redefined [RFC6437] and is\
    \ now a\n   recommended IPv6 node requirement [RFC6434].  Its use for load\n \
    \  sharing in multipath routing has been specified [RFC6438].  Another\n   scenario\
    \ in which the flow label could be used is in load\n   distribution for large\
    \ server farms.  Load distribution is a slightly\n   more general term than load\
    \ balancing, but the latter is more\n   commonly used.  In the context of a server\
    \ farm, both terms refer to\n   mechanisms that distribute the workload of a server\
    \ farm among\n   different servers in order to optimize performance.  Server load\n\
    \   balancing commonly applies to HTTP traffic, but most of the\n   techniques\
    \ described would apply to other upper-layer applications as\n   well.  This document\
    \ starts with brief introductions to the flow\n   label and to server load-balancing\
    \ techniques, and then describes how\n   the flow label can be used to enhance\
    \ load balancers operating on IP\n   packets and TCP sessions, commonly known\
    \ as layer 3/4 load balancers.\n   The motivation for this approach is to improve\
    \ the performance of\n   most types of layer 3/4 load balancers, especially for\
    \ traffic\n   including multiple IPv6 extension headers and in particular for\n\
    \   fragmented packets.  Fragmented packets, often the result of\n   customers\
    \ reaching the load balancer via a VPN with a limited MTU,\n   are a common performance\
    \ problem.\n"
- title: 2.  Summary of Flow Label Specification
  contents:
  - "2.  Summary of Flow Label Specification\n   The IPv6 flow label [RFC6437] is\
    \ a 20-bit field included in every\n   IPv6 header [RFC2460].  It is recommended\
    \ to be supported in all IPv6\n   nodes by [RFC6434].  There is additional background\
    \ material in\n   [RFC6436] and [RFC6294].  According to its definition, the flow\
    \ label\n   should be set to a constant value for a given traffic flow (such as\n\
    \   an HTTP connection), and that value will belong to a uniform\n   statistical\
    \ distribution, making it potentially valuable for load-\n   balancing purposes.\n\
    \   Any device that has access to the IPv6 header has access to the flow\n   label,\
    \ and it is at a fixed position in every IPv6 packet.  In\n   contrast, transport-layer\
    \ information, such as the port numbers, is\n   not always in a fixed position,\
    \ since it follows any IPv6 extension\n   headers that may be present.  In fact,\
    \ the logic of finding the\n   transport header is always more complex for IPv6\
    \ than for IPv4, due\n   to the absence of an Internet Header Length field in\
    \ IPv6.\n   Additionally, if packets are fragmented, the flow label will be\n\
    \   present in all fragments, but the transport header will only be in\n   one\
    \ packet.  Therefore, within the lifetime of a given transport-\n   layer connection,\
    \ the flow label can be a more convenient \"handle\"\n   than the port number\
    \ for identifying that particular connection.\n   According to RFC 6437, source\
    \ hosts should set the flow label;\n   however, if they do not (i.e., its value\
    \ is zero), forwarding nodes\n   (such as the first-hop router) may set it instead.\
    \  In both cases,\n   the flow label value must be constant for a given transport\
    \ session,\n   normally identified by the IPv6 and Transport header 5-tuple. \
    \ By\n   default, the flow label value should be calculated by a stateless\n \
    \  algorithm.  The resulting value should form part of a statistically\n   uniform\
    \ distribution, regardless of which node sets it.\n   It is recognized that at\
    \ the time of writing, very few traffic flows\n   include a non-zero flow label\
    \ value.  The mechanism described below\n   is one that can be added to existing\
    \ load-balancing mechanisms, so\n   that it will become effective as more and\
    \ more flows contain a non-\n   zero label.  Even if the flow label is chosen\
    \ from an imperfectly\n   uniform distribution, it will nevertheless increase\
    \ the information\n   entropy of the IPv6 header as a whole.  This allows for\
    \ progressive\n   introduction of load balancing based on the flow label.\n  \
    \ If the recommendations in Section 3 of RFC 6437 are followed for\n   traffic\
    \ from a given source accessing a well-known TCP port at a\n   given destination,\
    \ the flow label can act as a substitute for the\n   port numbers as far as a\
    \ load balancer is concerned, and it can be\n   found at a fixed position in the\
    \ layer 3 header even if extension\n   headers are present.\n   The flow label\
    \ is defined as an end-to-end component of the IPv6\n   header, but there are\
    \ three qualifications to this:\n   1.  Until the IPv6 flow label specification\
    \ in RFC 6437 is widely\n       implemented as recommended by RFC 6434, the flow\
    \ label will often\n       be set to the default value of zero.\n   2.  Because\
    \ of the recommendation to use a stateless algorithm to\n       calculate the\
    \ label, there is a low (but non-zero) probability\n       that two simultaneous\
    \ flows from the same source to the same\n       destination have the same flow\
    \ label value despite having\n       different transport-protocol port numbers.\n\
    \   3.  The Flow Label field is in an unprotected part of the IPv6\n       header,\
    \ which means that intentional or unintentional changes to\n       its value cannot\
    \ be easily detected by a receiver.\n   The first two points are addressed below\
    \ in Section 4 and the third\n   in Section 5.\n"
- title: 3.  Summary of Server Farm Load-Balancing Techniques
  contents:
  - "3.  Summary of Server Farm Load-Balancing Techniques\n   Load balancing for server\
    \ farms is achieved by a variety of methods,\n   often used in combination [Tarreau].\
    \  This section gives a general\n   overview of common methods, although the flow\
    \ label is not relevant\n   to all of them.  The actual load-balancing algorithm\
    \ (the choice of\n   which server to use for a new client session) is irrelevant\
    \ to this\n   discussion.  We give examples for HTTP, but analogous techniques\
    \ may\n   be used for other application protocols.\n   o  The simplest method\
    \ is using the DNS to return different server\n      addresses for a single name\
    \ such as www.example.com to different\n      users.  This is typically done by\
    \ rotating the order in which\n      different addresses within the server site\
    \ are listed by the\n      relevant authoritative DNS server, on the assumption\
    \ that the\n      client will pick the first one.  Routing may be configured such\n\
    \      that the different addresses are handled by different ingress\n      routers.\
    \  Several variants of this load-balancing mechanism exist,\n      such as expecting\
    \ some clients to use all the advertised addresses\n      when multiple connections\
    \ are involved, or directing the traffic\n      to multiple sites, also known\
    \ as global load balancing.  None of\n      these mechanisms are in the scope\
    \ of this document, and the\n      proposal in this document does not affect their\
    \ usability nor aim\n      to replace them, so they will not be discussed further.\n\
    \   o  Another method, for HTTP servers, is to operate a layer 7 reverse\n   \
    \   proxy in front of the server farm.  The reverse proxy will present\n     \
    \ a single IP address to the world, communicated to clients by a\n      single\
    \ AAAA record.  For each new client session (an incoming TCP\n      connection\
    \ and HTTP request), it will pick a particular server and\n      proxy the session\
    \ to it.  The act of proxying should be more\n      efficient and less resource-intensive\
    \ than the act of serving the\n      required content.  The proxy must retain\
    \ TCP state and proxy state\n      for the duration of the session.  This TCP\
    \ state could,\n      potentially, include the incoming flow label value.\n  \
    \ o  A component of some load-balancing systems is an SSL reverse proxy\n    \
    \  farm.  The individual SSL proxies handle all cryptographic aspects\n      and\
    \ exchange unencrypted HTTP with the actual servers.  Thus, from\n      the load-balancing\
    \ point of view, this really looks just like a\n      server farm, except that\
    \ it's specialized for HTTPS.  Each proxy\n      will retain SSL and TCP and maybe\
    \ HTTP state for the duration of\n      the session, and the TCP state could potentially\
    \ include the flow\n      label.\n   o  Finally the \"front end\" of many load-balancing\
    \ systems is a layer\n      3/4 load balancer.  While it can be a dedicated device,\
    \ it is also\n      a standard function of some network switches or routers (e.g.\n\
    \      using Equal-Cost Multipath Routing (ECMP) [RFC2991]).  In this\n      case,\
    \ it is the layer 3/4 load balancer whose IP address is\n      published as the\
    \ primary AAAA record for the service.  All client\n      sessions will pass through\
    \ this device.  Depending on the specific\n      scenario, the balancer will assign\
    \ new sessions among the actual\n      application servers, across an SSL proxy\
    \ farm, or among a set of\n      layer 7 proxies.  In all cases, the layer 3/4\
    \ load balancer has to\n      classify incoming packets very quickly and choose\
    \ the target\n      server or proxy so as to ensure persistence.  'Persistence'\
    \ is\n      defined as the guarantee that a given client session will run to\n\
    \      completion on a single server.  The layer 3/4 load balancer\n      therefore\
    \ needs to inspect each incoming packet to classify it.\n      There are two common\
    \ types of layer 3/4 load balancers, the\n      totally stateless ones which only\
    \ act on single packets, generally\n      involving a per-packet hashing of easy-to-find\
    \ information such as\n      the source address and/or port into a server number,\
    \ and the\n      stateful ones that take the routing decision on the very first\n\
    \      packets of a session and maintain the same direction for all\n      packets\
    \ belonging to the same session.  Clearly, both types of\n      layer 3/4 balancers\
    \ could inspect and make use of the flow label\n      value.\n      Our focus\
    \ is on how the balancer identifies a particular flow.\n      For clarity, note\
    \ that two aspects of layer 3/4 load balancers are\n      not affected by use\
    \ of the flow label to identify sessions:\n      1.  Balancers use various techniques\
    \ to redirect traffic to a\n          specific target server.\n          +  All\
    \ servers are configured with the same IP address, they\n             are all\
    \ on the same LAN, and the load balancer sends\n             directly to their\
    \ individual MAC addresses.  In this case,\n             return packets from the\
    \ server to the client are sent back\n             without passing through the\
    \ balancer, a technique known as\n             direct server return, but we are\
    \ not concerned here with\n             the return packets.\n          +  All\
    \ servers are configured with the same IP address,\n             treated locally\
    \ as an anycast address by layer 3 ECMP\n             routing.\n          +  Each\
    \ server has its own IP address, and the balancer uses\n             an IP-in-IP\
    \ tunnel to reach it.\n          +  Each server has its own IP address, and the\
    \ balancer\n             performs NAPT (Network Address and Port Translation)\
    \ to\n             deliver the client's packets to that address.\n          +\
    \  The choice between these methods is not affected by use of\n             the\
    \ flow label.\n      2.  A layer 3/4 balancer must correctly handle Path MTU Discovery\n\
    \          by forwarding relevant ICMPv6 packets in both directions.\n       \
    \   This too is not directly affected by use of the flow label.\n          It\
    \ should be noted that there may be difficulty correlating an\n          ICMPv6\
    \ \"Packet too big\" response with the session it refers\n          to, but that\
    \ is out of the scope of the present document.\n   The following diagram, inspired\
    \ by [Tarreau], shows a layout with\n   various methods in use together.  (Below,\
    \ \"ASIC\" stands for\n   \"Application-Specific Integrated Circuit\".)\n    \
    \    ___________________________________________\n       (                   \
    \                        )\n       (          Clients in the Internet        \
    \  )\n       (___________________________________________)\n              |  \
    \                          |\n         ------------ DNS-based      ------------\n\
    \         | Ingress  | load splitting | Ingress  |\n         | router   | affects\
    \        | router   |\n         ------------ routing        ------------\n   \
    \        ___|____________________________|___\n                |             \
    \           |\n                |                        |\n                | \
    \                       |\n           ------------             ------------\n\
    \           | L3/4 ASIC|             | L3/4 ASIC|\n           | balancer |   \
    \          | balancer |\n           ------------             ------------\n  \
    \              |          load          |\n                |        spreading\
    \       |\n      __________|________________________|___________\n          |\
    \              |            |          |\n    ------------   ------------   --------\
    \   --------\n    |HTTP proxy|...|HTTP proxy|   | SSL  |...| SSL  |\n    | balancer\
    \ |   | balancer |   | proxy|   | proxy|\n    ------------   ------------   --------\
    \   --------\n      ____|_____________|_____________|_________|_____\n       \
    \ |          |          |          |          |\n    --------   --------   --------\
    \   --------   --------\n    |HTTP  |   |HTTP  |   |HTTP  |   |HTTP  |   |HTTP\
    \  |\n    |server|   |server|   |server|   |server|   |server|\n    -------- \
    \  --------   --------   --------   --------\n   From the previous paragraphs,\
    \ we can identify several points in this\n   diagram where the flow label might\
    \ be relevant:\n   1.  Layer 3/4 load balancers.\n   2.  SSL proxies.\n   3. \
    \ HTTP proxies.\n   However, usage by the proxies seems unlikely to affect performance,\n\
    \   because they must in any case process the application-layer header,\n   so\
    \ in this document we focus only on layer 3/4 balancers.\n"
- title: 4.  Applying the Flow Label to Layer 3/4 Load Balancing
  contents:
  - "4.  Applying the Flow Label to Layer 3/4 Load Balancing\n   The suggested model\
    \ for using the flow label to enhance an layer 3/4\n   load-balancing mechanism\
    \ is as follows:\n   o  We are only concerned with IPv6 traffic in which the flow\
    \ label\n      value has been set according to [RFC6437].  If the flow label of\n\
    \      an incoming packet is zero, load balancers will continue to use\n     \
    \ the transport header in the traditional way.  As the use of the\n      flow\
    \ label becomes more prevalent according to RFC 6434, load\n      balancers, and\
    \ therefore users, will reap a growing performance\n      benefit.\n   o  If the\
    \ flow label of an incoming packet is non-zero, layer 3/4\n      load balancers\
    \ can use the 2-tuple {source address, flow label} as\n      the session key for\
    \ whatever load distribution algorithm they\n      support.  Alternatively, they\
    \ might use the 3-tuple {dest address,\n      source address, flow label}, especially\
    \ if the server farm\n      supports multiple server IP addresses, but using the\
    \ 3-tuple will\n      be significantly quicker than searching for the transport\
    \ port\n      numbers later in the packet.  Moreover, the transport-layer\n  \
    \    information such as the source port is not repeated in fragments,\n     \
    \ which generally prevents stateless load balancers from supporting\n      fragmented\
    \ traffic since they generally cannot reassemble\n      fragments.\n      A stateless\
    \ layer 3/4 load balancer would simply apply a hash\n      algorithm to the 2-tuple\
    \ or 3-tuple on all packets in order to\n      select the same target server consistently\
    \ for a given flow.\n      Needless to say, the hash algorithm has to be well\
    \ chosen for its\n      purpose, but this problem is common to several forms of\
    \ stateless\n      load balancing.  The discussion in [RFC6438] applies.\n   \
    \   A stateful layer 3/4 load balancer would apply its usual load\n      distribution\
    \ algorithm to the first packet of a session, and store\n      the {tuple, server}\
    \ association in a table so that subsequent\n      packets belonging to the same\
    \ session are forwarded to the same\n      server.  Thus, for all subsequent packets\
    \ of the session, it can\n      ignore all IPv6 extension headers, which should\
    \ lead to a\n      performance benefit.  Whether this benefit is valuable will\
    \ depend\n      on engineering details of the specific load balancer.\n      Note\
    \ that such a balancer will not identify new transport sessions\n      from the\
    \ same source that use the same flow label; they will be\n      delivered to the\
    \ same server.  This is like the behavior of\n      existing hash-based layer\
    \ 4 balancers that always send similarly\n      hashed packets to the same destination.\
    \  However, a global state\n      table in a flow label balancer cannot be shared\
    \ between multiple\n      services if these services rely on transport-layer information,\n\
    \      since the goal of using the flow label is to avoid looking up that\n  \
    \    information.\n      A related issue is that the balancer will not detect\
    \ FIN/ACK\n      sequences at the end of sessions.  Therefore, it will rely on\n\
    \      inactivity timers to delete session state.  However, all existing\n   \
    \   balancers must maintain such timers to deal with hung sessions,\n      and\
    \ the practical impact on memory utilization is unlikely to be\n      significant.\n\
    \   o  Layer 3/4 balancers that redirect the incoming packets by NAPT are\n  \
    \    not expected to obtain any saving of time by using the flow label,\n    \
    \  because they have no choice but to follow the extension header\n      chain\
    \ in order to locate and modify the port number and transport\n      checksum.\
    \  The same would apply to balancers that perform TCP\n      state tracking for\
    \ any reason.\n   o  Note that correct handling of ICMPv6 for Path MTU Discovery\n\
    \      requires the layer 3/4 balancer to keep state for the client\n      source\
    \ address, independently of either the port numbers or the\n      flow label.\n\
    \   o  SSL and HTTP proxies, if present, should forward the flow label\n     \
    \ value towards the server.  This usually has no performance\n      benefit, but\
    \ it is consistent with the general model for the flow\n      label described\
    \ in RFC 6437.\n   It should be noted that the performance benefit, if any, depends\n\
    \   entirely on engineering trade-offs in the design of the layer 3/4\n   balancer.\
    \  An extra test is needed to check if the label is non-zero,\n   but if there\
    \ is a non-zero label, all logic for handling extension\n   headers can be skipped\
    \ except for the first packet of a new flow.\n   Since the identifying state to\
    \ be stored is only the tuple and the\n   server identifier, storage requirements\
    \ will be reduced.\n   Additionally, the method will work for fragmented traffic\
    \ and for\n   flows where the transport information is missing (unknown transport\n\
    \   protocol) or obfuscated (e.g., IPsec).  Traffic reaching the load\n   balancer\
    \ via a VPN is particularly prone to the fragmentation issue,\n   due to MTU size\
    \ issues.  For some load-balancer designs, these are\n   very significant advantages.\n\
    \   In the unlikely event of two simultaneous flows from the same source\n   address\
    \ having the same flow label value, the two flows would end up\n   assigned to\
    \ the same server, where they would be distinguished as\n   normal by their port\
    \ numbers.  There are approximately one million\n   possible flow label values,\
    \ and if the rules for flow label\n   generation [RFC6437] are followed, this\
    \ would be a statistically rare\n   event, and would not damage the overall load-balancing\
    \ effect.\n   Moreover, with a million possible label values, it is very likely\n\
    \   that there will be many more flow label values than servers at most\n   sites,\
    \ so it is already expected that multiple flow label values will\n   end up on\
    \ the same server for a given client IP address.\n   In the case that many thousands\
    \ of clients are hidden behind the same\n   large-scale NAPT with a single shared\
    \ IP address, the assumption of\n   low probability of conflicts might become\
    \ incorrect, unless flow\n   label values are random enough to avoid following\
    \ similar sequences\n   for all clients.  This is not expected to be a factor\
    \ for IPv6\n   anyway, since there is no need to implement large-scale NAPT with\n\
    \   address sharing [RFC4864].  The probability of conflicts is low for\n   sites\
    \ that implement network prefix translation [RFC6296], since this\n   technique\
    \ provides a different address for each client.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security aspects of the flow label are discussed\
    \ in [RFC6437].  As\n   noted there, a malicious source or man-in-the-middle could\
    \ disturb\n   load balancing by manipulating flow labels.  This risk already exists\n\
    \   today where the source address and port are used as a hashing key in\n   layer\
    \ 3/4 load balancers, as well as where a persistence cookie is\n   used in HTTP\
    \ to designate a server.  It even exists on layer 3\n   components that only rely\
    \ on the source address to select a\n   destination, making them more DDoS-prone.\
    \  Nevertheless, all these\n   methods are currently used because the benefits\
    \ for load balancing\n   and persistence hugely outweigh the risks.  The flow\
    \ label does not\n   significantly alter this situation.\n   Specifically, the\
    \ IPv6 flow label specification [RFC6437] states that\n   \"stateless classifiers\
    \ should not use the flow label alone to control\n   load distribution, and stateful\
    \ classifiers should include explicit\n   methods to detect and ignore suspect\
    \ flow label values.\"  The former\n   point is answered by also using the source\
    \ address.  The latter point\n   is more complex.  If the risk is considered serious,\
    \ the site ingress\n   router or the layer 3/4 balancer should use a suitable\
    \ heuristic to\n   verify incoming flows with non-zero flow label values.  If\
    \ a flow\n   from a given source address and port number does not have a constant\n\
    \   flow label value, it is suspect and should be dropped.  This would\n   deal\
    \ with both intentional and accidental changes to the flow label.\n   A malicious\
    \ source or man-in-the-middle could generate a flow in\n   which the flow label\
    \ is constant but the transport port numbers in\n   some packets are invalid.\
    \  Such packets, if load-balanced only on the\n   basis of the flow label, could\
    \ reach the target server and create a\n   single-source DoS attack on its TCP\
    \ engine.\n   RFC 6437 notes in its Security Considerations that if the covert\n\
    \   channel risk is considered significant, a firewall might rewrite non-\n  \
    \ zero flow labels.  As long as this is done as described in RFC 6437,\n   it\
    \ will not invalidate the mechanisms described above.\n   The flow label may be\
    \ of use in protecting against DDoS attacks\n   against servers.  As noted in\
    \ RFC 6437, a source should generate flow\n   label values that are hard to predict,\
    \ most likely by including a\n   secret nonce in the hash used to generate each\
    \ label.  The attacker\n   does not know the nonce and therefore has no way to\
    \ invent flow\n   labels that will all target the same server, even with knowledge\
    \ of\n   both the hash algorithm and the load-balancing algorithm.  Still, it\n\
    \   is important to understand that it is always trivial to force a load\n   balancer\
    \ to stick to the same server during an attack, so the\n   security of the whole\
    \ solution must not rely on the unpredictability\n   of the flow label values\
    \ alone, but should include defensive measures\n   like most load balancers already\
    \ have against abnormal use of source\n   addresses or session cookies.\n   New\
    \ flows are assigned to a server according to any of the usual\n   algorithms\
    \ available on the load balancer (e.g., least connections,\n   round robin, etc.).\
    \  The association between the 2-tuple {source\n   address, flow label} and the\
    \ server is stored in a table (often\n   called stick table) so that future traffic\
    \ from the same source using\n   the same flow label can be sent to the same server.\
    \  This method is\n   more robust against a loss of server and also makes it harder\
    \ for an\n   attacker to target a specific server, because the association between\n\
    \   a flow label value and a server is not known externally.\n   In the case that\
    \ a stateless hash function is used to assign client\n   packets to specific servers,\
    \ it may be advisable to use a\n   cryptographic hash function of some kind, to\
    \ ensure that an attacker\n   cannot predict the behavior of the load balancer.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Valuable comments and contributions were made by Fred\
    \ Baker, Olivier\n   Bonaventure, Ben Campbell, Lorenzo Colitti, Linda Dunbar,\
    \ Donald\n   Eastlake, Joel Jaeggli, Gurudeep Kamat, Warren Kumari, Julia\n  \
    \ Renouard, Julius Volz, and others.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n              (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC6434]  Jankiewicz, E., Loughney, J., and T. Narten, \"IPv6 Node\n\
    \              Requirements\", RFC 6434, December 2011.\n   [RFC6437]  Amante,\
    \ S., Carpenter, B., Jiang, S., and J. Rajahalme,\n              \"IPv6 Flow Label\
    \ Specification\", RFC 6437, November 2011.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC2991]  Thaler, D. and C. Hopps, \"Multipath\
    \ Issues in Unicast and\n              Multicast Next-Hop Selection\", RFC 2991,\
    \ November 2000.\n   [RFC4864]  Van de Velde, G., Hain, T., Droms, R., Carpenter,\
    \ B., and\n              E. Klein, \"Local Network Protection for IPv6\", RFC\
    \ 4864,\n              May 2007.\n   [RFC6294]  Hu, Q. and B. Carpenter, \"Survey\
    \ of Proposed Use Cases for\n              the IPv6 Flow Label\", RFC 6294, June\
    \ 2011.\n   [RFC6296]  Wasserman, M. and F. Baker, \"IPv6-to-IPv6 Network Prefix\n\
    \              Translation\", RFC 6296, June 2011.\n   [RFC6436]  Amante, S.,\
    \ Carpenter, B., and S. Jiang, \"Rationale for\n              Update to the IPv6\
    \ Flow Label Specification\", RFC 6436,\n              November 2011.\n   [RFC6438]\
    \  Carpenter, B. and S. Amante, \"Using the IPv6 Flow Label\n              for\
    \ Equal Cost Multipath Routing and Link Aggregation in\n              Tunnels\"\
    , RFC 6438, November 2011.\n   [Tarreau]  Tarreau, W., \"Making applications scalable\
    \ with load\n              balancing\", 2006, <http://1wt.eu/articles/2006_lb/>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Carpenter\n   Department of Computer Science\n \
    \  University of Auckland\n   PB 92019\n   Auckland  1142\n   New Zealand\n  \
    \ EMail: brian.e.carpenter@gmail.com\n   Sheng Jiang\n   Huawei Technologies Co.,\
    \ Ltd\n   Q14, Huawei Campus\n   No.156 Beiqing Road\n   Hai-Dian District, Beijing\
    \  100095\n   P.R. China\n   EMail: jiangsheng@huawei.com\n   Willy Tarreau\n\
    \   HAProxy Technologies, Inc.\n   R&D Network Products\n   3 rue du petit Robinson\n\
    \   78350 Jouy-en-Josas\n   France\n   EMail: willy@haproxy.com\n"
