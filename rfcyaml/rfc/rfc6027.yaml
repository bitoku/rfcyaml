- title: __initial_text__
  contents:
  - '                    IPsec Cluster Problem Statement

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the terminology, problem statement, and\n\
    \   requirements for implementing Internet Key Exchange (IKE) and IPsec\n   on\
    \ clusters.  It also describes gaps in existing standards and their\n   implementation\
    \ that need to be filled in order to allow peers to\n   interoperate with clusters\
    \ from different vendors.  Agreed upon\n   terminology, problem statement, and\
    \ requirements will allow IETF\n   working groups to consider development of IPsec/IKEv2\
    \ mechanisms to\n   simplify cluster implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6027.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Terminology .....................................................3\n   3.\
    \ The Problem Statement ...........................................5\n      3.1.\
    \ Scope ......................................................5\n      3.2. A\
    \ Lot of Long-Lived State ..................................6\n      3.3. IKE\
    \ Counters ...............................................6\n      3.4. Outbound\
    \ SA Counters .......................................6\n      3.5. Inbound SA\
    \ Counters ........................................7\n      3.6. Missing Synch\
    \ Messages .....................................8\n      3.7. Simultaneous Use\
    \ of IKE and IPsec SAs by Different\n           Members ....................................................8\n\
    \           3.7.1. Outbound SAs Using Counter Modes ....................9\n  \
    \    3.8. Different IP Addresses for IKE and IPsec ..................10\n    \
    \  3.9. Allocation of SPIs ........................................10\n   4. Security\
    \ Considerations ........................................10\n   5. Acknowledgements\
    \ ...............................................11\n   6. References .....................................................11\n\
    \      6.1. Normative References ......................................11\n  \
    \    6.2. Informative References ....................................11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IKEv2, as described in [RFC5996], and IPsec, as described\
    \ in\n   [RFC4301] and others, allows deployment of VPNs between different\n \
    \  sites as well as from VPN clients to protected networks.\n   As VPNs become\
    \ increasingly important to the organizations deploying\n   them, there is a demand\
    \ to make IPsec solutions more scalable and\n   less prone to down time, by using\
    \ more than one physical gateway to\n   either share the load or back each other\
    \ up, forming a \"cluster\" (see\n   Section 2).  Similar demands have been made\
    \ in the past for other\n   critical pieces of an organization's infrastructure,\
    \ such as DHCP and\n   DNS servers, Web servers, databases, and others.\n   IKE\
    \ and IPsec are, in particular, less friendly to clustering than\n   these other\
    \ protocols, because they store more state, and that state\n   is more volatile.\
    \  Section 2 defines terminology for use in this\n   document and in the envisioned\
    \ solution documents.\n   In general, deploying IKE and IPsec in a cluster requires\
    \ such a\n   large amount of information to be synchronized among the members\
    \ of\n   the cluster that it becomes impractical.  Alternatively, if less\n  \
    \ information is synchronized, failover would mean a prolonged and\n   intensive\
    \ recovery phase, which negates the scalability and\n   availability promises\
    \ of using clusters.  In Section 3, we will\n   describe this in more detail.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   \"Single Gateway\" is an implementation of IKE and IPsec\
    \ enforcing a\n   certain policy, as described in [RFC4301].\n   \"Cluster\" is\
    \ a set of two or more gateways, implementing the same\n   security policy, and\
    \ protecting the same domain.  Clusters exist to\n   provide both high availability\
    \ through redundancy and scalability\n   through load sharing.\n   \"Member\"\
    \ is one gateway in a cluster.\n   \"Availability\" is a measure of a system's\
    \ ability to perform the\n   service for which it was designed.  It is measured\
    \ as the percentage\n   of time a service is available from the time it is supposed\
    \ to be\n   available.  Colloquially, availability is sometimes expressed in\n\
    \   \"nines\" rather than percentage, with 3 \"nines\" meaning 99.9%\n   availability,\
    \ 4 \"nines\" meaning 99.99% availability, etc.\n   \"High Availability\" is a\
    \ property of a system, not a configuration\n   type.  A system is said to have\
    \ high availability if its expected\n   down time is low.  High availability can\
    \ be achieved in various ways,\n   one of which is clustering.  All the clusters\
    \ described in this\n   document achieve high availability.  What \"high\" means\
    \ depends on the\n   application, but usually is 4 to 6 \"nines\" (at most 0.5-50\
    \ minutes of\n   down time per year in a system that is supposed to be available\
    \ all\n   the time.\n   \"Fault Tolerance\" is a property related to high availability,\
    \ where a\n   system maintains service availability, even when a specified set\
    \ of\n   fault conditions occur.  In clusters, we expect the system to\n   maintain\
    \ service availability, when one or more of the cluster\n   members fails.\n \
    \  \"Completely Transparent Cluster\" is a cluster where the occurrence of\n \
    \  a fault is never visible to the peers.\n   \"Partially Transparent Cluster\"\
    \ is a cluster where the occurrence of\n   a fault may be visible to the peers.\n\
    \   \"Hot Standby Cluster\", or \"HS Cluster\" is a cluster where only one of\n\
    \   the members is active at any one time.  This member is also referred\n   to\
    \ as the \"active\" member, whereas the other(s) are referred to as\n   \"standbys\"\
    .  The Virtual Router Redundancy Protocol (VRRP)\n   ([RFC5798]) is one method\
    \ of building such a cluster.\n   \"Load Sharing Cluster\", or \"LS Cluster\"\
    \ is a cluster where more than\n   one of the members may be active at the same\
    \ time.  The term \"load\n   balancing\" is also common, but it implies that the\
    \ load is actually\n   balanced between the members, and this is not a requirement.\n\
    \   \"Failover\" is the event where one member takes over some load from\n   some\
    \ other member.  In a hot standby cluster, this happens when a\n   standby member\
    \ becomes active due to a failure of the former active\n   member, or because\
    \ of an administrator command.  In a load sharing\n   cluster, this usually happens\
    \ because of a failure of one of the\n   members, but certain load-balancing technologies\
    \ may allow a\n   particular load (such as all the flows associated with a particular\n\
    \   child Security Association (SA)) to move from one member to another\n   to\
    \ even out the load, even without any failures.\n   \"Tight Cluster\" is a cluster\
    \ where all the members share an IP\n   address.  This could be accomplished using\
    \ configured interfaces with\n   specialized protocols or hardware, such as VRRP,\
    \ or through the use\n   of multicast addresses, but in any case, peers need only\
    \ be\n   configured with one IP address in the Peer Authentication Database.\n\
    \   \"Loose Cluster\" is a cluster where each member has a different IP\n   address.\
    \  Peers find the correct member using some method such as DNS\n   queries or\
    \ the IKEv2 redirect mechanism ([RFC5685]).  In some cases,\n   a member's IP\
    \ address(es) may be allocated to another member at\n   failover.\n   \"Synch\
    \ Channel\" is a communications channel among the cluster\n   members, which is\
    \ used to transfer state information.  The synch\n   channel may or may not be\
    \ IP based, may or may not be encrypted, and\n   may work over short or long distances.\
    \  The security and physical\n   characteristics of this channel are out of scope\
    \ for this document,\n   but it is a requirement that its use be minimized for\
    \ scalability.\n"
- title: 3.  The Problem Statement
  contents:
  - "3.  The Problem Statement\n   This section starts by scoping the problem, and\
    \ goes on to list each\n   of the issues encountered while setting up a cluster\
    \ of IPsec VPN\n   gateways.\n"
- title: 3.1.  Scope
  contents:
  - "3.1.  Scope\n   This document will make no attempt to describe the problems in\n\
    \   setting up a generic cluster.  It describes only problems related to\n   the\
    \ IKE/IPsec protocols.\n   The problem of synchronizing the policy between cluster\
    \ members is\n   out of scope, as this is an administrative issue that is not\n\
    \   particular to either clusters or to IPsec.\n   The interesting scenario here\
    \ is VPN, whether inter-domain or remote\n   access.  Host-to-host transport mode\
    \ is not expected to benefit from\n   this work.\n   We do not describe in full\
    \ the problems of the communication channel\n   between cluster members (the Synch\
    \ Channel), nor do we intend to\n   specify anything in this space later.  Specifically,\
    \ mixed-vendor\n   clusters are out of scope.\n   The problem statement anticipates\
    \ possible protocol-level solutions\n   between IKE/IPsec peers in order to improve\
    \ the availability and/or\n   performance of VPN clusters.  One vendor's IPsec\
    \ endpoint should be\n   able to work, optimally, with another vendor's cluster.\n"
- title: 3.2.  A Lot of Long-Lived State
  contents:
  - "3.2.  A Lot of Long-Lived State\n   IKE and IPsec have a lot of long-lived state:\n\
    \   o  IKE SAs last for minutes, hours, or days, and carry keys and other\n  \
    \    information.  Some gateways may carry thousands to hundreds of\n      thousands\
    \ of IKE SAs.\n   o  IPsec SAs last for minutes or hours, and carry keys, selectors,\n\
    \      and other information.  Some gateways may carry hundreds of\n      thousands\
    \ of such IPsec SAs.\n   o  SPD (Security Policy Database) cache entries.  While\
    \ the SPD is\n      unchanging, the SPD cache changes on the fly due to narrowing.\n\
    \      Entries last at least as long as the SAD (Security Association\n      Database)\
    \ entries, but tend to last even longer than that.\n   A naive implementation\
    \ of a cluster would have no synchronized state,\n   and a failover would produce\
    \ an effect similar to that of a rebooted\n   gateway.  [RFC5723] describes how\
    \ new IKE and IPsec SAs can be\n   recreated in such a case.\n"
- title: 3.3.  IKE Counters
  contents:
  - "3.3.  IKE Counters\n   We can overcome the first problem described in Section\
    \ 3.2, by\n   synchronizing states -- whenever an SA is created, we can synch\
    \ this\n   new state to all other members.  However, those states are not only\n\
    \   long lived, they are also ever changing.\n   IKE has message counters.  A\
    \ peer MUST NOT process message n until\n   after it has processed message n-1.\
    \  Skipping message IDs is not\n   allowed.  So a newly active member needs to\
    \ know the last message IDs\n   both received and transmitted.\n   One possible\
    \ solution is to synchronize information about the IKE\n   message counters after\
    \ every IKE exchange.  This way, the newly\n   active member knows what messages\
    \ it is allowed to process, and what\n   message IDs to use on IKE requests, so\
    \ that peers process them.  This\n   solution may be appropriate in some cases,\
    \ but may be too onerous in\n   systems with a lot of SAs.  It also has the drawback\
    \ that it never\n   recovers from the missing synch message problem, which is\
    \ described\n   in Section 3.6.\n"
- title: 3.4.  Outbound SA Counters
  contents:
  - "3.4.  Outbound SA Counters\n   The Encapsulating Security Payload (ESP) and Authentication\
    \ Header\n   (AH) have an optional anti-replay feature, where every protected\n\
    \   packet carries a counter number.  Repeating counter numbers is\n   considered\
    \ an attack, so the newly active member MUST NOT use a\n   replay counter number\
    \ that has already been used.  The peer will drop\n   those packets as duplicates\
    \ and/or warn of an attack.\n   Though it may be feasible to synchronize the IKE\
    \ message counters, it\n   is almost never feasible to synchronize the IPsec packet\
    \ counters for\n   every IPsec packet transmitted.  So we have to assume that\
    \ at least\n   for IPsec, the replay counter will not be up to date on the newly\n\
    \   active member, and the newly active member may repeat a counter.\n   A possible\
    \ solution is to synch replay counter information, not for\n   each packet emitted,\
    \ but only at regular intervals, say, every 10,000\n   packets or every 0.5 seconds.\
    \  After a failover, the newly active\n   member advances the counters for outbound\
    \ IPsec SAs by 10,000\n   packets.  To the peer, this looks like up to 10,000\
    \ packets were\n   lost, but this should be acceptable, as neither ESP nor AH\
    \ guarantee\n   reliable delivery.\n"
- title: 3.5.  Inbound SA Counters
  contents:
  - "3.5.  Inbound SA Counters\n   An even tougher issue is the synchronization of\
    \ packet counters for\n   inbound IPsec SAs.  If a packet arrives at a newly active\
    \ member,\n   there is no way to determine whether or not this packet is a replay.\n\
    \   The periodic synch does not solve this problem at all, because\n   suppose\
    \ we synchronize every 10,000 packets, and the last synch\n   before the failover\
    \ had the counter at 170,000.  It is probable,\n   though not certain, that packet\
    \ number 180,000 has not yet been\n   processed, but if packet 175,000 arrives\
    \ at the newly active member,\n   it has no way of determining whether or not\
    \ that packet has already\n   been processed.  The synchronization does prevent\
    \ the processing of\n   really old packets, such as those with counter number\
    \ 165,000.\n   Ignoring all counters below 180,000 won't work either, because\
    \ that's\n   up to 10,000 dropped packets, which may be very noticeable.\n   The\
    \ easiest solution is to learn the replay counter from the incoming\n   traffic.\
    \  This is allowed by the standards, because replay counter\n   verification is\
    \ an optional feature (see Section 3.2 in [RFC4301]).\n   The case can even be\
    \ made that it is relatively secure, because non-\n   attack traffic will reset\
    \ the counters to what they should be, so an\n   attacker faces the dual challenge\
    \ of a very narrow window for attack,\n   and the need to time the attack to a\
    \ failover event.  Unless the\n   attacker can actually cause the failover, this\
    \ would be very\n   difficult.  It should be noted, though, that although this\
    \ solution\n   is acceptable as far as RFC 4301 goes, it is a matter of policy\n\
    \   whether this is acceptable.\n   Another possible solution to the inbound IPsec\
    \ SA problem is to rekey\n   all child SAs following a failover.  This may or\
    \ may not be feasible\n   depending on the implementation and the configuration.\n"
- title: 3.6.  Missing Synch Messages
  contents:
  - "3.6.  Missing Synch Messages\n   The synch channel is very likely not to be infallible.\
    \  Before\n   failover is detected, some synchronization messages may have been\n\
    \   missed.  For example, the active member may have created a new child\n   SA\
    \ using message n.  The new information (entry in the SAD and update\n   to counters\
    \ of the IKE SA) is sent on the synch channel.  Still, with\n   every possible\
    \ technology, the update may be missed before the\n   failover.\n   This is a\
    \ bad situation, because the IKE SA is doomed.  The newly\n   active member has\
    \ two problems:\n   o  It does not have the new IPsec SA pair.  It will drop all\
    \ incoming\n      packets protected with such an SA.  This could be fixed by sending\n\
    \      some DELETEs and INVALID_SPI notifications, if it wasn't for the\n    \
    \  other problem.\n   o  The counters for the IKE SA show that only request n-1\
    \ has been\n      sent.  The next request will get the message ID n, but that\
    \ will\n      be rejected by the peer.  After a sufficient number of\n      retransmissions\
    \ and rejections, the whole IKE SA with all\n      associated IPsec SAs will get\
    \ dropped.\n   The above scenario may be rare enough that it is acceptable that\
    \ on a\n   configuration with thousands of IKE SAs, a few will need to be\n  \
    \ recreated from scratch or using session resumption techniques.\n   However,\
    \ detecting this may take a long time (several minutes) and\n   this negates the\
    \ goal of creating a cluster in the first place.\n"
- title: 3.7.  Simultaneous Use of IKE and IPsec SAs by Different Members
  contents:
  - "3.7.  Simultaneous Use of IKE and IPsec SAs by Different Members\n   For load\
    \ sharing clusters, all active members may need to use the\n   same SAs, both\
    \ IKE and IPsec.  This is an even greater problem than\n   in the case of hot\
    \ standby clusters, because consecutive packets may\n   need to be sent by different\
    \ members to the same peer gateway.\n   The solution to the IKE SA issue is up\
    \ to the implementation.  It's\n   possible to create some locking mechanism over\
    \ the synch channel, or\n   else have one member \"own\" the IKE SA and manage\
    \ the child SAs for\n   all other members.  For IPsec, solutions fall into two\
    \ broad\n   categories.\n   The first is the \"sticky\" category, where all communications\
    \ with a\n   single peer, or all communications involving a certain SPD cache\n\
    \   entry go through a single peer.  In this case, all packets that match\n  \
    \ any particular SA go through the same member, so no synchronization\n   of the\
    \ replay counter needs to be done.  Inbound processing is a\n   \"sticky\" issue\
    \ (no pun intended), because the packets have to be\n   processed by the correct\
    \ member based on peer and the Security\n   Parameter Index (SPI), and most load\
    \ balancers will not be able to\n   match the SPIs to the correct member, unless\
    \ stickiness extends to\n   all traffic with a particular peer.  Another disadvantage\
    \ of sticky\n   solutions is that the load tends to not distribute evenly, especially\n\
    \   if one SA covers a significant portion of IPsec traffic.\n   The second is\
    \ the \"duplicate\" category, where the child SA is\n   duplicated for each pair\
    \ of IPsec SAs for each active member.\n   Different packets for the same peer\
    \ go through different members, and\n   get protected using different SAs with\
    \ the same selectors and\n   matching the same entries in the SPD cache.  This\
    \ has some\n   shortcomings:\n   o  It requires multiple parallel SAs, for which\
    \ the peer has no use.\n      Section 2.8 of [RFC5996] specifically allows this,\
    \ but some\n      implementation might have a policy against long-term maintenance\n\
    \      of redundant SAs.\n   o  Different packets that belong to the same flow\
    \ may be protected by\n      different SAs, which may seem \"weird\" to the peer\
    \ gateway,\n      especially if it is integrated with some deep-inspection\n \
    \     middleware such as a firewall.  It is not known whether this will\n    \
    \  cause problems with current gateways.  It is also impossible to\n      mandate\
    \ against this, because the definition of \"flow\" varies from\n      one implementation\
    \ to another.\n   o  Reply packets may arrive with an IPsec SA that is not \"\
    matched\" to\n      the one used for the outgoing packets.  Also, they might arrive\
    \ at\n      a different member.  This problem is beyond the scope of this\n  \
    \    document and should be solved by the application, perhaps by\n      forwarding\
    \ misdirected packets to the correct gateway for deep\n      inspection.\n"
- title: 3.7.1.  Outbound SAs Using Counter Modes
  contents:
  - "3.7.1.  Outbound SAs Using Counter Modes\n   For SAs involving counter mode ciphers\
    \ such as Counter Mode (CTR)\n   ([RFC3686]) or Galois/Counter Mode (GCM) ([RFC4106])\
    \ there is yet\n   another complication.  The initial vector for such modes MUST\
    \ NOT be\n   repeated, and senders use methods such as counters or linear feedback\n\
    \   shift registers (LFSRs) to ensure this.  For an SA shared between\n   more\
    \ than one active member, or even failing over from one member to\n   another,\
    \ the cluster members need to make sure that they do not\n   generate the same\
    \ initial vector.  See [COUNTER_MODES] for a\n   discussion of this problem in\
    \ another context.\n"
- title: 3.8.  Different IP Addresses for IKE and IPsec
  contents:
  - "3.8.  Different IP Addresses for IKE and IPsec\n   In many implementations there\
    \ are separate IP addresses for the\n   cluster, and for each member.  While the\
    \ packets protected by tunnel\n   mode child SAs are encapsulated in IP headers\
    \ with the cluster IP\n   address, the IKE packets originate from a specific member,\
    \ and carry\n   that member's IP address.  This may be done so that IPsec traffic\n\
    \   bypasses the load balancer for greater scalability.  For the peer,\n   this\
    \ looks weird, as the usual thing is for the IPsec packets to come\n   from the\
    \ same IP address as the IKE packets.  Unmodified peers may\n   drop such packets.\n\
    \   One obvious solution is to use some fancy capability of the IKE host\n   to\
    \ change things so that IKE packets also come out of the cluster IP\n   address.\
    \  This can be achieved through NAT or through assigning\n   multiple addresses\
    \ to interfaces.  This is not, however, possible for\n   all implementations,\
    \ and will not reduce load on the balancer.\n   [ARORA] discusses this problem\
    \ in greater depth, and proposes another\n   solution, that does involve protocol\
    \ changes.\n"
- title: 3.9.  Allocation of SPIs
  contents:
  - "3.9.  Allocation of SPIs\n   The SPI associated with each child SA, and with\
    \ each IKE SA, MUST be\n   unique relative to the peer of the SA.  Thus, in the\
    \ context of a\n   cluster, each cluster member MUST generate SPIs in a fashion\
    \ that\n   avoids collisions (with other cluster members) for these SPI values.\n\
    \   The means by which cluster members achieve this requirement is a\n   local\
    \ matter, outside the scope of this document.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Implementations running on clusters MUST be as\
    \ secure as\n   implementations running on single gateways.  In other words, no\n\
    \   extension or interpretation used to allow operation in a cluster may\n   facilitate\
    \ attacks that are not possible for single gateways.\n   Moreover, thought must\
    \ be given to the synching requirements of any\n   protocol extension to make\
    \ sure that it does not create an\n   opportunity for denial-of-service attacks\
    \ on the cluster.\n   As mentioned in Section 3.5, allowing an inbound child SA\
    \ to failover\n   to another member has the effect of disabling replay counter\n\
    \   protection for a short time.  Though the threat is arguably low, it\n   is\
    \ a policy decision whether this is acceptable.\n   Section 3.7 describes the\
    \ problem of the two directions of a flow\n   being protected by two SAs that\
    \ are not part of a matched pair or\n   that are not even being processed by the\
    \ same cluster member.  This\n   is not a security problem as far as IPsec is\
    \ concerned because IPsec\n   has policy at the IP, protocol and port level only.\
    \  However, many\n   IPsec implementations are integrated with stateful firewalls,\
    \ which\n   need to see both sides of a flow.  Such implementations may have to\n\
    \   forward packets to other members for the firewall to properly inspect\n  \
    \ the traffic.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document is the collective work, and includes contribution\
    \ from\n   many people who participate in the IPsecME working group.\n   The editor\
    \ would particularly like to acknowledge the extensive\n   contribution of the\
    \ following people (in alphabetical order):\n   Jitender Arora, Jean-Michel Combes,\
    \ Dan Harkins, David Harrington,\n   Steve Kent, Tero Kivinen, Alexey Melnikov,\
    \ Yaron Sheffer, Melinda\n   Shore, and Rodney Van Meter.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture for the\n\
    \              Internet Protocol\", RFC 4301, December 2005.\n   [RFC5996]  Kaufman,\
    \ C., Hoffman, P., Nir, Y., and P. Eronen,\n              \"Internet Key Exchange\
    \ Protocol Version 2 (IKEv2)\",\n              September 2010.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [ARORA]    Arora, J. and P. Kumar, \"Alternate\
    \ Tunnel Addresses for\n              IKEv2\", Work in Progress, April 2010.\n\
    \   [COUNTER_MODES]\n              McGrew, D. and B. Weis, \"Using Counter Modes\
    \ with\n              Encapsulating Security Payload (ESP) and Authentication\n\
    \              Header (AH) to Protect Group Traffic\", Work in Progress,\n   \
    \           March 2010.\n   [RFC3686]  Housley, R., \"Using Advanced Encryption\
    \ Standard (AES)\n              Counter Mode\", RFC 3686, January 2009.\n   [RFC4106]\
    \  Viega, J. and D. McGrew, \"The Use of Galois/Counter Mode\n              (GCM)\
    \ in IPsec Encapsulating Security Payload (ESP)\",\n              RFC 4106, June\
    \ 2005.\n   [RFC5685]  Devarapalli, V. and K. Weniger, \"Redirect Mechanism for\n\
    \              IKEv2\", RFC 5685, November 2009.\n   [RFC5723]  Sheffer, Y. and\
    \ H. Tschofenig, \"IKEv2 Session Resumption\",\n              RFC 5723, January\
    \ 2010.\n   [RFC5798]  Nadas, S., \"Virtual Router Redundancy Protocol (VRRP)\"\
    ,\n              RFC 5798, March 2010.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Yoav Nir\n   Check Point Software Technologies Ltd.\n  \
    \ 5 Hasolelim st.\n   Tel Aviv  67897\n   Israel\n   EMail: ynir@checkpoint.com\n"
