- title: __initial_text__
  contents:
  - '                 Traffic Flow Measurement: Architecture

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a general framework for describing network\n\
    \   traffic flows, presents an architecture for traffic flow measurement\n   and\
    \ reporting, discusses how this relates to an overall network\n   traffic flow\
    \ architecture and indicates how it can be used within the\n   Internet.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  Statement of Purpose and Scope                     \
    \              3\n      1.1  Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2  Traffic Flow Measurement Architecture                  \
    \          5\n      2.1  Meters and Traffic Flows . . . . . . . . . . . . . .\
    \ . . .  5\n      2.2  Interaction Between METER and METER READER . . . . . .\
    \ . .  7\n      2.3  Interaction Between MANAGER and METER  . . . . . . . . .\
    \ .  7\n      2.4  Interaction Between MANAGER and METER READER . . . . . . .\
    \  8\n      2.5  Multiple METERs or METER READERs . . . . . . . . . . . . .  9\n\
    \      2.6  Interaction Between MANAGERs (MANAGER - MANAGER) . . . . . 10\n  \
    \    2.7  METER READERs and APPLICATIONs . . . . . . . . . . . . . . 10\n   3\
    \  Traffic Flows and Reporting Granularity                         10\n      3.1\
    \  Flows and their Attributes . . . . . . . . . . . . . . . . 10\n      3.2  Granularity\
    \ of Flow Measurements . . . . . . . . . . . . . 13\n      3.3  Rolling Counters,\
    \ Timestamps, Report-in-One-Bucket-Only  . 15\n   4  Meters                  \
    \                                        17\n      4.1  Meter Structure  . . .\
    \ . . . . . . . . . . . . . . . . . . 17\n      4.2  Flow Table . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 19\n      4.3  Packet Handling, Packet Matching\
    \ . . . . . . . . . . . . . 20\n      4.4  Rules and Rule Sets  . . . . . . .\
    \ . . . . . . . . . . . . 23\n      4.5  Maintaining the Flow Table . . . . .\
    \ . . . . . . . . . . . 28\n      4.6  Handling Increasing Traffic Levels . .\
    \ . . . . . . . . . . 29\n   5  Meter Readers                                \
    \                   30\n      5.1  Identifying Flows in Flow Records  . . . .\
    \ . . . . . . . . 30\n      5.2  Usage Records, Flow Data Files . . . . . . .\
    \ . . . . . . . 30\n      5.3  Meter to Meter Reader:  Usage Record Transmission\
    \  . . . . 31\n   6  Managers                                                \
    \        32\n      6.1  Between Manager and Meter:  Control Functions  . . . .\
    \ . . 32\n      6.2  Between Manager and Meter Reader:  Control Functions . .\
    \ . 33\n      6.3  Exception Conditions . . . . . . . . . . . . . . . . . . .\
    \ 35\n      6.4  Standard Rule Sets . . . . . . . . . . . . . . . . . . . . 36\n\
    \   7  Security Considerations                                         36\n  \
    \    7.1  Threat Analysis  . . . . . . . . . . . . . . . . . . . . . 36\n    \
    \  7.2  Countermeasures  . . . . . . . . . . . . . . . . . . . . . 37\n   8  IANA\
    \ Considerations                                             39\n      8.1  PME\
    \ Opcodes  . . . . . . . . . . . . . . . . . . . . . . . 39\n      8.2  RTFM Attributes\
    \  . . . . . . . . . . . . . . . . . . . . . 39\n   9  APPENDICES            \
    \                                          41\n      Appendix A: Network Characterisation\
    \  . . . . . . . . . . . . . 41\n      Appendix B: Recommended Traffic Flow Measurement\
    \ Capabilities . 42\n      Appendix C: List of Defined Flow Attributes . . . .\
    \ . . . . . . 43\n      Appendix D: List of Meter Control Variables . . . . .\
    \ . . . . . 44\n      Appendix E: Changes Introduced Since RFC 2063 . . . . .\
    \ . . . . 45\n   10 Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 45\n   11 References  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 46\n   12 Authors' Addresses  . . . . . . . . . . . . . . . . . . . . .\
    \ . 47\n   13 Full Copyright Statement  . . . . . . . . . . . . . . . . . . .\
    \ 48\n"
- title: 1  Statement of Purpose and Scope
  contents:
  - '1  Statement of Purpose and Scope

    '
- title: 1.1  Introduction
  contents:
  - "1.1  Introduction\n   This document describes an architecture for traffic flow\
    \ measurement\n   and reporting for data networks which has the following\n  \
    \ characteristics:\n     - The traffic flow model can be consistently applied\
    \ to any\n       protocol, using address attributes in any combination at the\n\
    \       'adjacent' (see below), network and transport layers of the\n       networking\
    \ stack.\n     - Traffic flow attributes are defined in such a way that they are\n\
    \       valid for multiple networking protocol stacks, and that traffic\n    \
    \   flow measurement implementations are useful in multi-protocol\n       environments.\n\
    \     - Users may specify their traffic flow measurement requirements by\n   \
    \    writing 'rule sets', allowing them to collect the flow data they\n      \
    \ need while ignoring other traffic.\n     - The data reduction effort to produce\
    \ requested traffic flow\n       information is placed as near as possible to\
    \ the network\n       measurement point.  This minimises the volume of data to\
    \ be\n       obtained (and transmitted across the network for storage), and\n\
    \       reduces the amount of processing required in traffic flow\n       analysis\
    \ applications.\n   'Adjacent' (as used above) is a layer-neutral term for the\
    \ next layer\n   down in a particular instantiation of protocol layering. Although\n\
    \   'adjacent' will usually imply the link layer (MAC addresses), it does\n  \
    \ not implicitly advocate or dismiss any particular form of tunnelling\n   or\
    \ layering.\n   The architecture specifies common metrics for measuring traffic\n\
    \   flows.  By using the same metrics, traffic flow data can be exchanged\n  \
    \ and compared across multiple platforms.  Such data is useful for:\n     - Understanding\
    \ the behaviour of existing networks,\n     - Planning for network development\
    \ and expansion,\n     - Quantification of network performance,\n     - Verifying\
    \ the quality of network service, and\n     - Attribution of network usage to\
    \ users.\n   The traffic flow measurement architecture is deliberately structured\n\
    \   using address attributes which are defined in a consistent way at the\n  \
    \ Adjacent, Network and Transport layers of the networking stack,\n   allowing\
    \ specific implementations of the architecture to be used\n   effectively in multi-protocol\
    \ environments.  Within this document the\n   term 'usage data' is used as a generic\
    \ term for the data obtained\n   using the traffic flow measurement architecture.\n\
    \   In principle one might define address attributes for higher layers,\n   but\
    \ it would be very difficult to do this in a general way.  However,\n   if an\
    \ RTFM traffic meter were implemented within an application\n   server (where\
    \ it had direct access to application-specific usage\n   information), it would\
    \ be possible to use the rest of the RTFM\n   architecture to collect application-specific\
    \ information.  Use of the\n   same model for both network- and application-level\
    \ measurement in\n   this way could simplify the development of generic analysis\n\
    \   applications which process and/or correlate both traffic and usage\n   information.\
    \  Experimental work in this area is described in the RTFM\n   'New Attributes'\
    \ document [RTFM-NEW].\n   This document is not a protocol specification.  It\
    \ specifies and\n   structures the information that a traffic flow measurement\
    \ system\n   needs to collect, describes requirements that such a system must\n\
    \   meet, and outlines tradeoffs which may be made by an implementor.\n   For\
    \ performance reasons, it may be desirable to use traffic\n   information gathered\
    \ through traffic flow measurement in lieu of\n   network statistics obtained\
    \ in other ways.  Although the\n   quantification of network performance is not\
    \ the primary purpose of\n   this architecture, the measured traffic flow data\
    \ may be used as an\n   indication of network performance.\n   A cost recovery\
    \ structure decides \"who pays for what.\" The major\n   issue here is how to\
    \ construct a tariff (who gets billed, how much,\n   for which things, based on\
    \ what information, etc).  Tariff issues\n   include fairness, predictability\
    \ (how well can subscribers forecast\n   their network charges), practicality\
    \ (of gathering the data and\n   administering the tariff), incentives (e.g. encouraging\
    \ off-peak\n   use), and cost recovery goals (100% recovery, subsidisation, profit\n\
    \   making).  Issues such as these are not covered here.\n   Background information\
    \ explaining why this approach was selected is\n   provided by the 'Internet Accounting\
    \ Background' RFC [ACT-BKG].\n"
- title: 2  Traffic Flow Measurement Architecture
  contents:
  - "2  Traffic Flow Measurement Architecture\n   A traffic flow measurement system\
    \ is used by Network Operations\n   personnel to aid in managing and developing\
    \ a network.  It provides a\n   tool for measuring and understanding the network's\
    \ traffic flows.\n   This information is useful for many purposes, as mentioned\
    \ in section\n   1 (above).\n   The following sections outline a model for traffic\
    \ flow measurement,\n   which draws from working drafts of the OSI accounting\
    \ model [OSI-\n   ACT].\n"
- title: 2.1  Meters and Traffic Flows
  contents:
  - "2.1  Meters and Traffic Flows\n   At the heart of the traffic measurement model\
    \ are network entities\n   called traffic METERS.  Meters observe packets as they\
    \ pass by a\n   single point on their way through the network and classify them\
    \ into\n   certain groups.  For each such group a meter will accumulate certain\n\
    \   attributes, for example the numbers of packets and bytes observed for\n  \
    \ the group.  These METERED TRAFFIC GROUPS may correspond to a user, a\n   host\
    \ system, a network, a group of networks, a particular transport\n   address (e.g.\
    \ an IP port number), any combination of the above, etc,\n   depending on the\
    \ meter's configuration.\n   We assume that routers or traffic monitors throughout\
    \ a network are\n   instrumented with meters to measure traffic.  Issues surrounding\
    \ the\n   choice of meter placement are discussed in the 'Internet Accounting\n\
    \   Background' RFC [ACT-BKG]. An important aspect of meters is that they\n  \
    \ provide a way of succinctly aggregating traffic information.\n   For the purpose\
    \ of traffic flow measurement we define the concept of\n   a TRAFFIC FLOW, which\
    \ is like an artificial logical equivalent to a\n   call or connection.  A flow\
    \ is a portion of traffic, delimited by a\n   start and stop time, that belongs\
    \ to one of the metered traffic\n   groups mentioned above.  Attribute values\
    \ (source/destination\n   addresses, packet counts, byte counts, etc.)  associated\
    \ with a flow\n   are aggregate quantities reflecting events which take place\
    \ in the\n   DURATION between the start and stop times.  The start time of a flow\n\
    \   is fixed for a given flow; the stop time may increase with the age of\n  \
    \ the flow.\n   For connectionless network protocols such as IP there is by\n\
    \   definition no way to tell whether a packet with a particular\n   source/destination\
    \ combination is part of a stream of packets or not\n   - each packet is completely\
    \ independent.  A traffic meter has, as\n   part of its configuration, a set of\
    \ 'rules' which specify the flows\n   of interest, in terms of the values of their\
    \ attributes.  It derives\n   attribute values from each observed packet, and\
    \ uses these to decide\n   which flow they belong to.  Classifying packets into\
    \ 'flows' in this\n   way provides an economical and practical way to measure\
    \ network\n   traffic and subdivide it into well-defined groups.\n   Usage information\
    \ which is not derivable from traffic flows may also\n   be of interest.  For\
    \ example, an application may wish to record\n   accesses to various different\
    \ information resources or a host may\n   wish to record the username (subscriber\
    \ id) for a particular network\n   session.  Provision is made in the traffic\
    \ flow architecture to do\n   this.  In the future the measurement model may be\
    \ extended to gather\n   such information from applications and hosts so as to\
    \ provide values\n   for higher-layer flow attributes.\n   As well as FLOWS and\
    \ METERS, the traffic flow measurement model\n   includes MANAGERS, METER READERS\
    \ and ANALYSIS APPLICATIONS, which are\n   explained in following sections.  The\
    \ relationships between them are\n   shown by the diagram below.  Numbers on the\
    \ diagram refer to sections\n   in this document.\n                      MANAGER\n\
    \                     /       \\\n                2.3 /         \\ 2.4\n     \
    \              /           \\\n                  /             \\            \
    \          ANALYSIS\n              METER  <----->  METER READER  <----->   APPLICATION\n\
    \                       2.2                    2.7\n     - MANAGER: A traffic\
    \ measurement manager is an application which\n       configures 'meter' entities\
    \ and controls 'meter reader' entities.\n       It sends configuration commands\
    \ to the meters, and supervises the\n       proper operation of each meter and\
    \ meter reader.  It may well be\n       convenient to combine the functions of\
    \ meter reader and manager\n       within a single network entity.\n     - METER:\
    \ Meters are placed at measurement points determined by\n       Network Operations\
    \ personnel.  Each meter selectively records\n       network activity as directed\
    \ by its configuration settings.  It\n       can also aggregate, transform and\
    \ further process the recorded\n       activity before the data is stored.  The\
    \ processed and stored\n       results are called the 'usage data'.\n     - METER\
    \ READER: A meter reader transports usage data from meters so\n       that it\
    \ is available to analysis applications.\n     - ANALYSIS APPLICATION: An analysis\
    \ application processes the\n       usage data so as to provide information and\
    \ reports which are\n       useful for network engineering and management purposes.\
    \  Examples\n       include:\n         - TRAFFIC FLOW MATRICES, showing the total\
    \ flow rates for many\n           of the possible paths within an internet.\n\
    \         - FLOW RATE FREQUENCY DISTRIBUTIONS, summarizing flow rates\n      \
    \     over a period of time.\n         - USAGE DATA showing the total traffic\
    \ volumes sent and\n           received by particular hosts.\n   The operation\
    \ of the traffic measurement system as a whole is best\n   understood by considering\
    \ the interactions between its components.\n   These are described in the following\
    \ sections.\n"
- title: 2.2  Interaction Between METER and METER READER
  contents:
  - "2.2  Interaction Between METER and METER READER\n   The information which travels\
    \ along this path is the usage data\n   itself.  A meter holds usage data in an\
    \ array of flow data records\n   known as the FLOW TABLE.  A meter reader may\
    \ collect the data in any\n   suitable manner.  For example it might upload a\
    \ copy of the whole\n   flow table using a file transfer protocol, or read the\
    \ records in the\n   current flow set one at a time using a suitable data transfer\n\
    \   protocol.  Note that the meter reader need not read complete flow\n   data\
    \ records, a subset of their attribute values may well be\n   sufficient.\n  \
    \ A meter reader may collect usage data from one or more meters.  Data\n   may\
    \ be collected from the meters at any time.  There is no\n   requirement for collections\
    \ to be synchronized in any way.\n"
- title: 2.3  Interaction Between MANAGER and METER
  contents:
  - "2.3  Interaction Between MANAGER and METER\n   A manager is responsible for configuring\
    \ and controlling one or more\n   meters.  Each meter's configuration includes\
    \ information such as:\n     - Flow specifications, e.g. which traffic flows are\
    \ to be measured,\n       how they are to be aggregated, and any data the meter\
    \ is required\n       to compute for each flow being measured.\n     - Meter control\
    \ parameters, e.g. the 'inactivity' time for flows\n       (if no packets belonging\
    \ to a flow are seen for this time the\n       flow is considered to have ended,\
    \ i.e. to have become idle).\n     - Sampling behaviour.  Normally every packet\
    \ will be observed.  It\n       may sometimes be necessary to use sampling techniques\
    \ so as to\n       observe only some of the packets (see following note).\n  \
    \ A note about sampling: Current experience with the measurement\n   architecture\
    \ shows that a carefully-designed and implemented meter\n   compresses the data\
    \ sufficiently well that in normal LANs and WANs of\n   today sampling is seldom,\
    \ if ever, needed.  For this reason sampling\n   algorithms are not prescribed\
    \ by the architecture.  If sampling is\n   needed, e.g. for metering a very-high-speed\
    \ network with fine-grained\n   flows, the sampling technique should be carefully\
    \ chosen so as not to\n   bias the results.  For a good introduction to this topic\
    \ see the IPPM\n   Working Group's RFC \"Framework for IP Performance Metrics\"\
    \ [IPPM-\n   FRM].\n   A meter may run several rule sets concurrently on behalf\
    \ of one or\n   more managers, and any manager may download a set of flow\n  \
    \ specifications (i.e. a 'rule set') to a meter.  Control parameters\n   which\
    \ apply to an individual rule set should be set by the manager\n   after it downloads\
    \ that rule set.\n   One manager should be designated as the 'master' for a meter.\n\
    \   Parameters such as sampling behaviour, which affect the overall\n   operation\
    \ of the meter, should only be set by the master manager.\n"
- title: 2.4  Interaction Between MANAGER and METER READER
  contents:
  - "2.4  Interaction Between MANAGER and METER READER\n   A manager is responsible\
    \ for configuring and controlling one or more\n   meter readers.  A meter reader\
    \ may only be controlled by a single\n   manager.  A meter reader needs to know\
    \ at least the following for\n   every meter it is collecting usage data from:\n\
    \     - The meter's unique identity, i.e. its network name or address.\n     -\
    \ How often usage data is to be collected from the meter.\n     - Which flow records\
    \ are to be collected (e.g. all flows, flows for\n       a particular rule set,\
    \ flows which have been active since a given\n       time, etc.).\n     - Which\
    \ attribute values are to be collected for the required flow\n       records (e.g.\
    \ all attributes, or a small subset of them)\n   Since redundant reporting may\
    \ be used in order to increase the\n   reliability of usage data, exchanges among\
    \ multiple entities must be\n   considered as well.  These are discussed below.\n"
- title: 2.5  Multiple METERs or METER READERs
  contents:
  - "2.5  Multiple METERs or METER READERs\n                    -- METER READER A\
    \ --\n                   /         |          \\\n                  /        \
    \  |           \\\n          =====METER 1     METER 2=====METER 3    METER 4=====\n\
    \                              \\          |           /\n                   \
    \            \\         |          /\n                                -- METER\
    \ READER B --\n   Several uniquely identified meters may report to one or more\
    \ meter\n   readers.  The diagram above gives an example of how multiple meters\n\
    \   and meter readers could be used.\n   In the diagram above meter 1 is read\
    \ by meter reader A, and meter 4\n   is read by meter reader B. Meters 1 and 4\
    \ have no redundancy; if\n   either meter fails, usage data for their network\
    \ segments will be\n   lost.\n   Meters 2 and 3, however, measure traffic on the\
    \ same network segment.\n   One of them may fail leaving the other collecting\
    \ the segment's usage\n   data.  Meters 2 and 3 are read by meter reader A and\
    \ by meter reader\n   B.  If one meter reader fails, the other will continue collecting\n\
    \   usage data from both meters.\n   The architecture does not require multiple\
    \ meter readers to be\n   synchronized.  In the situation above meter readers\
    \ A and B could\n   both collect usage data at the same intervals, but not necesarily\
    \ at\n   the same times.  Note that because collections are asynchronous it is\n\
    \   unlikely that usage records from two different meter readers will\n   agree\
    \ exactly.\n   If identical usage records were required from a single meter, a\n\
    \   manager could achieve this using two identical copies of a ruleset in\n  \
    \ that meter.  Let's call them RS1 and RS2, and assume that RS1 is\n   running.\
    \  When a collection is to be made the manager switches the\n   meter from RS1\
    \ to RS2, and directs the meter reader(s) to read flow\n   data for RS1 from the\
    \ meter.  For the next collection the manager\n   switches back to RS1, and so\
    \ on.  Note, however, that it is not\n   possible to get identical usage records\
    \ from more than one meter,\n   since there is no way for a manager to switch\
    \ rulesets in more than\n   one meter at the same time.\n   If there is only one\
    \ meter reader and it fails, the meters continue\n   to run.  When the meter reader\
    \ is restarted it can collect all of the\n   accumulated flow data.  Should this\
    \ happen, time resolution will be\n   lost (because of the missed collections)\
    \ but overall traffic flow\n   information will not.  The only exception to this\
    \ would occur if the\n   traffic volume was sufficient to 'roll over' counters\
    \ for some flows\n   during the failure; this is addressed in the section on 'Rolling\n\
    \   Counters'.\n"
- title: 2.6  Interaction Between MANAGERs (MANAGER - MANAGER)
  contents:
  - "2.6  Interaction Between MANAGERs (MANAGER - MANAGER)\n   Synchronization between\
    \ multiple management systems is the province\n   of network management protocols.\
    \  This traffic flow measurement\n   architecture specifies only the network management\
    \ controls necessary\n   to perform the traffic flow measurement function and\
    \ does not address\n   the more global issues of simultaneous or interleaved (possibly\n\
    \   conflicting) commands from multiple network management stations or\n   the\
    \ process of transferring control from one network management\n   station to another.\n"
- title: 2.7  METER READERs and APPLICATIONs
  contents:
  - "2.7  METER READERs and APPLICATIONs\n   Once a collection of usage data has been\
    \ assembled by a meter reader\n   it can be processed by an analysis application.\
    \  Details of analysis\n   applications - such as the reports they produce and\
    \ the data they\n   require - are outside the scope of this architecture.\n  \
    \ It should be noted, however, that analysis applications will often\n   require\
    \ considerable amounts of input data.  An important part of\n   running a traffic\
    \ flow measurement system is the storage and regular\n   reduction of flow data\
    \ so as to produce daily, weekly or monthly\n   summary files for further analysis.\
    \  Again, details of such data\n   handling are outside the scope of this architecture.\n"
- title: 3  Traffic Flows and Reporting Granularity
  contents:
  - "3  Traffic Flows and Reporting Granularity\n   A flow was defined in section\
    \ 2.1 above in abstract terms as follows:\n       \"A TRAFFIC FLOW is an artifical\
    \ logical equivalent to a call or\n       connection, belonging to a (user-specieied)\
    \ METERED TRAFFIC\n       GROUP.\"\n   In practical terms, a flow is a stream\
    \ of packets observed by the\n   meter as they pass across a network between two\
    \ end points (or from a\n   single end point), which have been summarized by a\
    \ traffic meter for\n   analysis purposes.\n"
- title: 3.1  Flows and their Attributes
  contents:
  - "3.1  Flows and their Attributes\n   Every traffic meter maintains a table of\
    \ 'flow records' for flows\n   seen by the meter.  A flow record holds the values\
    \ of the ATTRIBUTES\n   of interest for its flow.  These attributes might include:\n\
    \     - ADDRESSES for the flow's source and destination.  These comprise\n   \
    \    the protocol type, the source and destination addresses at\n       various\
    \ network layers (extracted from the packet header), and\n       the number of\
    \ the interface on which the packet was observed.\n     - First and last TIMES\
    \ when packets were seen for this flow, i.e.\n       the 'creation' and 'last\
    \ activity' times for the flow.\n     - COUNTS for 'forward' (source to destination)\
    \ and 'backward'\n       (destination to source) components (e.g. packets and\
    \ bytes) of\n       the flow's traffic.  The specifying of 'source' and 'destination'\n\
    \       for flows is discussed in the section on packet matching below.\n    \
    \ - OTHER attributes, e.g. the index of the flow's record in the flow\n      \
    \ table and the rule set number for the rules which the meter was\n       running\
    \ while the flow was observed.  The values of these\n       attributes provide\
    \ a way of distinguishing flows observed by a\n       meter at different times.\n\
    \   The attributes listed in this document (Appendix C) provide a basic\n   (i.e.\
    \ useful minimum) set; IANA considerations for allocating new\n   attributes are\
    \ set out in section 8 below.\n   A flow's METERED TRAFFIC GROUP is specified\
    \ by the values of its\n   ADDRESS attributes.  For example, if a flow's address\
    \ attributes were\n   specified as \"source address = IP address 10.1.0.1, destination\n\
    \   address = IP address 26.1.0.1\" then only IP packets from 10.1.0.1 to\n  \
    \ 26.1.0.1 and back would be counted in that flow.  If a flow's address\n   attributes\
    \ specified only that \"source address = IP address\n   10.1.0.1,\" then all IP\
    \ packets from and to 10.1.0.1 would be counted\n   in that flow.\n   The addresses\
    \ specifying a flow's address attributes may include one\n   or more of the following\
    \ types:\n     - The INTERFACE NUMBER for the flow, i.e. the interface on which\n\
    \       the meter measured the traffic.  Together with a unique address\n    \
    \   for the meter this uniquely identifies a particular physical-\n       level\
    \ port.\n     - The ADJACENT ADDRESS, i.e. the address in the the next layer down\n\
    \       from the peer address in a particular instantiation of protocol\n    \
    \   layering.  Although 'adjacent' will usually imply the link layer,\n      \
    \ it does not implicitly advocate or dismiss any particular form of\n       tunnelling\
    \ or layering.\n       For example, if flow measurement is being performed using\
    \ IP as\n       the network layer on an Ethernet LAN [802-3], an adjacent address\n\
    \       will normally be a six-octet Media Access Control (MAC) address.\n   \
    \    For a host connected to the same LAN segment as the meter the\n       adjacent\
    \ address will be the MAC address of that host.  For hosts\n       on other LAN\
    \ segments it will be the MAC address of the adjacent\n       (upstream or downstream)\
    \ router carrying the traffic flow.\n     - The PEER ADDRESS, which identifies\
    \ the source or destination of\n       the packet for the network layer (n) at\
    \ which traffic measurement\n       is being performed.  The form of a peer address\
    \ will depend on\n       the network-layer protocol in use, and the measurement\
    \ network\n       layer (n).\n     - The TRANSPORT ADDRESS, which identifies the\
    \ source or destination\n       port for the packet, i.e. its (n+1) layer address.\
    \  For example,\n       if flow measurement is being performed at the IP layer\
    \ a\n       transport address is a two-octet UDP or TCP port number.\n   The four\
    \ definitions above specify addresses for each of the four\n   lowest layers of\
    \ the OSI reference model, i.e. Physical layer, Link\n   layer, Network layer\
    \ and Transport layer.  A FLOW RECORD stores both\n   the VALUE for each of its\
    \ addresses (as described above) and a MASK\n   specifying which bits of the address\
    \ value are being used and which\n   are ignored.  Note that if address bits are\
    \ being ignored the meter\n   will set them to zero, however their actual values\
    \ are undefined.\n   One of the key features of the traffic measurement architecture\
    \ is\n   that attributes have essentially the same meaning for different\n   protocols,\
    \ so that analysis applications can use the same reporting\n   formats for all\
    \ protocols.  This is straightforward for peer\n   addresses; although the form\
    \ of addresses differs for the various\n   protocols, the meaning of a 'peer address'\
    \ remains the same.  It\n   becomes harder to maintain this correspondence at\
    \ higher layers - for\n   example, at the Network layer IP, Novell IPX and AppleTalk\
    \ all use\n   port numbers as a 'transport address', but CLNP and DECnet have\
    \ no\n   notion of ports.\n   Reporting by adjacent intermediate sources and destinations\
    \ or simply\n   by meter interface (most useful when the meter is embedded in\
    \ a\n   router) supports hierarchical Internet reporting schemes as described\n\
    \   in the 'Internet Accounting Background' RFC [ACT-BKG]. That is, it\n   allows\
    \ backbone and regional networks to measure usage to just the\n   next lower level\
    \ of granularity (i.e. to the regional and\n   stub/enterprise levels, respectively),\
    \ with the final breakdown\n   according to end user (e.g. to source IP address)\
    \ performed by the\n   stub/enterprise networks.\n   In cases where network addresses\
    \ are dynamically allocated (e.g.\n   dial-in subscribers), further subscriber\
    \ identification will be\n   necessary if flows are to ascribed to individual\
    \ users.  Provision is\n   made to further specify the metered traffic group through\
    \ the use of\n   an optional SUBSCRIBER ID as part of the flow id.  A subscriber\
    \ ID\n   may be associated with a particular flow either through the current\n\
    \   rule set or by unspecified means within a meter.  At this time a\n   subscriber\
    \ ID is an arbitrary text string; later versions of the\n   architecture may specify\
    \ details of its contents.\n"
- title: 3.2  Granularity of Flow Measurements
  contents:
  - "3.2  Granularity of Flow Measurements\n   GRANULARITY is the 'control knob' by\
    \ which an application and/or the\n   meter can trade off the overhead associated\
    \ with performing usage\n   reporting against its level of detail.  A coarser\
    \ granularity means a\n   greater level of aggregation; finer granularity means\
    \ a greater level\n   of detail.  Thus, the number of flows measured (and stored)\
    \ at a\n   meter can be regulated by changing the granularity of their\n   attributes.\
    \  Flows are like an adjustable pipe - many fine-\n   granularity streams can\
    \ carry the data with each stream measured\n   individually, or data can be bundled\
    \ in one coarse-granularity pipe.\n   Time granularity may be controlled by varying\
    \ the reporting interval,\n   i.e. the time between meter readings.\n   Flow granularity\
    \ is controlled by adjusting the level of detail for\n   the following:\n    \
    \ - The metered traffic group (address attributes, discussed above).\n     - The\
    \ categorisation of packets (other attributes, discussed\n       below).\n   \
    \  - The lifetime/duration of flows (the reporting interval needs to\n       be\
    \ short enough to measure them with sufficient precision).\n   The set of rules\
    \ controlling the determination of each packet's\n   metered traffic group is\
    \ known as the meter's CURRENT RULE SET.  As\n   will be shown, the meter's current\
    \ rule set forms an integral part of\n   the reported information, i.e. the recorded\
    \ usage information cannot\n   be properly interpreted without a definition of\
    \ the rules used to\n   collect that information.\n   Settings for these granularity\
    \ factors may vary from meter to meter.\n   They are determined by the meter's\
    \ current rule set, so they will\n   change if network Operations personnel reconfigure\
    \ the meter to use a\n   new rule set.  It is expected that the collection rules\
    \ will change\n   rather infrequently; nonetheless, the rule set in effect at\
    \ any time\n   must be identifiable via a RULE SET NUMBER. Granularity of metered\n\
    \   traffic groups is further specified by additional ATTRIBUTES. These\n   attributes\
    \ include:\n     - Attributes which record information derived from other attribute\n\
    \       values.  Six of these are defined (SourceClass, DestClass,\n       FlowClass,\
    \ SourceKind, DestKind, FlowKind), and their meaning is\n       determined by\
    \ the meter's rule set.  For example, one could have\n       a subroutine in the\
    \ rule set which determined whether a source or\n       destination peer address\
    \ was a member of an arbitrary list of\n       networks, and set SourceClass/DestClass\
    \ to one if the source/dest\n       peer address was in the list or to zero otherwise.\n\
    \     - Administratively specified attributes such as Quality of Service\n   \
    \    and Priority, etc.  These are not defined at this time.\n   Settings for\
    \ these granularity factors may vary from meter to meter.\n   They are determined\
    \ by the meter's current rule set, so they will\n   change if Network Operations\
    \ personnel reconfigure the meter to use a\n   new rule set.\n   A rule set can\
    \ aggregate groups of addresses in two ways.  The\n   simplest is to use a mask\
    \ in a single rule to test for an address\n   within a masked group.  The other\
    \ way is to use a sequence of rules\n   to test for an arbitrary group of (masked)\
    \ address values, then use a\n   PushRuleTo rule to set a derived attribute (e.g.\
    \ FlowKind) to\n   indicate the flow's group.\n   The LIFETIME of a flow is the\
    \ time interval which began when the\n   meter observed the first packet belonging\
    \ to the flow and ended when\n   it saw the last packet.  Flow lifetimes are very\
    \ variable, but many -\n   if not most - are rather short.  A meter cannot measure\
    \ lifetimes\n   directly; instead a meter reader collects usage data for flows\
    \ which\n   have been active since the last collection, and an analysis\n   application\
    \ may compare the data from each collection so as to\n   determine when each flow\
    \ actually stopped.\n   The meter does, however, need to reclaim memory (i.e.\
    \ records in the\n   flow table) being held by idle flows.  The meter configuration\n\
    \   includes a variable called InactivityTimeout, which specifies the\n   minimum\
    \ time a meter must wait before recovering the flow's record.\n   In addition,\
    \ before recovering a flow record the meter should be sure\n   that the flow's\
    \ data has been collected by all meter readers which\n   registered to collect\
    \ it.  These two wait conditions are desired\n   goals for the meter; they are\
    \ not difficult to achieve in normal\n   usage, however the meter cannot guarantee\
    \ to fulfil them absolutely.\n   These 'lifetime' issues are considered further\
    \ in the section on\n   meter readers (below).  A complete list of the attributes\
    \ currently\n   defined is given in Appendix C later in this document.\n"
- title: 3.3  Rolling Counters, Timestamps, Report-in-One-Bucket-Only
  contents:
  - "3.3  Rolling Counters, Timestamps, Report-in-One-Bucket-Only\n   Once a usage\
    \ record is sent, the decision needs to be made whether to\n   clear any existing\
    \ flow records or to maintain them and add to their\n   counts when recording\
    \ subsequent traffic on the same flow.  The\n   second method, called rolling\
    \ counters, is recommended and has\n   several advantages.  Its primary advantage\
    \ is that it provides\n   greater reliability - the system can now often survive\
    \ the loss of\n   some usage records, such as might occur if a meter reader failed\
    \ and\n   later restarted.  The next usage record will very often contain yet\n\
    \   another reading of many of the same flow buckets which were in the\n   lost\
    \ usage record.  The 'continuity' of data provided by rolling\n   counters can\
    \ also supply information used for \"sanity\" checks on the\n   data itself, to\
    \ guard against errors in calculations.\n   The use of rolling counters does introduce\
    \ a new problem: how to\n   distinguish a follow-on flow record from a new flow\
    \ record.  Consider\n   the following example.\n                         CONTINUING\
    \ FLOW        OLD FLOW, then NEW FLOW\n                         start time = 1\
    \            start time = 1\n   Usage record N:       flow count = 2000      flow\
    \ count = 2000 (done)\n                         start time = 1            start\
    \ time = 5\n   Usage record N+1:     flow count = 3000      new flow count = 1000\n\
    \   Total count:                 3000                    3000\n   In the continuing\
    \ flow case, the same flow was reported when its\n   count was 2000, and again\
    \ at 3000: the total count to date is 3000.\n   In the OLD/NEW case, the old flow\
    \ had a count of 2000.  Its record\n   was then stopped (perhaps because of temporary\
    \ idleness), but then\n   more traffic with the same characteristics arrived so\
    \ a new flow\n   record was started and it quickly reached a count of 1000.  The\
    \ total\n   flow count from both the old and new records is 3000.\n   The flow\
    \ START TIMESTAMP attribute is sufficient to resolve this. In\n   the example\
    \ above, the CONTINUING FLOW flow record in the second\n   usage record has an\
    \ old FLOW START timestamp, while the NEW FLOW\n   contains a recent FLOW START\
    \ timestamp.  A flow which has sporadic\n   bursts of activity interspersed with\
    \ long periods of inactivity will\n   produce a sequence of flow activity records,\
    \ each with the same set\n   of address attributes, but with increasing FLOW START\
    \ times.\n   Each packet is counted in at most one flow for each running ruleset,\n\
    \   so as to avoid multiple counting of a single packet.  The record of a\n  \
    \ single flow is informally called a \"bucket.\"  If multiple, sometimes\n   overlapping,\
    \ records of usage information are required (aggregate,\n   individual, etc),\
    \ the network manager should collect the counts in\n   sufficiently detailed granularity\
    \ so that aggregate and combination\n   counts can be reconstructed in post-processing\
    \ of the raw usage data.\n   Alternatively, multiple rulesets could be used to\
    \ collect data at\n   different granularities.\n   For example, consider a meter\
    \ from which it is required to record\n   both 'total packets coming in interface\
    \ #1' and 'total packets\n   arriving from any interface sourced by IP address\
    \ = a.b.c.d', using a\n   single rule set.  Although a bucket can be declared\
    \ for each case, it\n   is not clear how to handle a packet which satisfies both\
    \ criteria.\n   It must only be counted once.  By default it will be counted in\
    \ the\n   first bucket for which it qualifies, and not in the other bucket.\n\
    \   Further, it is not possible to reconstruct this information by post-\n   processing.\
    \  The solution in this case is to define not two, but\n   THREE buckets, each\
    \ one collecting a unique combination of the two\n   criteria:\n           Bucket\
    \ 1:  Packets which came in interface 1,\n                      AND were sourced\
    \ by IP address a.b.c.d\n           Bucket 2:  Packets which came in interface\
    \ 1,\n                      AND were NOT sourced by IP address a.b.c.d\n     \
    \      Bucket 3:  Packets which did NOT come in interface 1,\n               \
    \       AND were sourced by IP address a.b.c.d\n          (Bucket 4:  Packets\
    \ which did NOT come in interface 1,\n                      AND were NOT sourced\
    \ by IP address a.b.c.d)\n   The desired information can now be reconstructed\
    \ by post-processing.\n   \"Total packets coming in interface 1\" can be found\
    \ by adding buckets\n   1 & 2, and \"Total packets sourced by IP address a.b.c.d\"\
    \ can be found\n   by adding buckets 1 & 3.  Note that in this case bucket 4 is\
    \ not\n   explicitly required since its information is not of interest, but it\n\
    \   is supplied here in parentheses for completeness.\n   Alternatively, the above\
    \ could be achieved by running two rule sets\n   (A and B), as follows:\n    \
    \       Bucket 1:  Packets which came in interface 1;\n                      counted\
    \ by rule set A.\n           Bucket 2:  Packets which were sourced by IP address\
    \ a.b.c.d;\n                      counted by rule set B.\n"
- title: 4  Meters
  contents:
  - "4  Meters\n   A traffic flow meter is a device for collecting data about traffic\n\
    \   flows at a given point within a network; we will call this the\n   METERING\
    \ POINT.  The header of every packet passing the network\n   metering point is\
    \ offered to the traffic meter program.\n   A meter could be implemented in various\
    \ ways, including:\n     - A dedicated small host, connected to a broadcast LAN\
    \ (so that it\n       can see all packets as they pass by) and running a traffic\
    \ meter\n       program.  The metering point is the LAN segment to which the\n\
    \       meter is attached.\n     - A multiprocessing system with one or more network\
    \ interfaces,\n       with drivers enabling a traffic meter program to see packets.\
    \  In\n       this case the system provides multiple metering points - traffic\n\
    \       flows on any subset of its network interfaces can be measured.\n     -\
    \ A packet-forwarding device such as a router or switch.  This is\n       similar\
    \ to (b) except that every received packet should also be\n       forwarded, usually\
    \ on a different interface.\n"
- title: 4.1  Meter Structure
  contents:
  - "4.1  Meter Structure\n   An outline of the meter's structure is given in the\
    \ following\n   diagram:\n   Briefly, the meter works as follows:\n     - Incoming\
    \ packet headers arrive at the top left of the diagram and\n       are passed\
    \ to the PACKET PROCESSOR.\n     - The packet processor passes them to the Packet\
    \ Matching Engine\n       (PME) where they are classified.\n     - The PME is\
    \ a Virtual Machine running a pattern matching program\n       contained in the\
    \ CURRENT RULE SET.  It is invoked by the Packet\n       Processor, executes the\
    \ rules in the current rule set as\n       described in section 4.3 below, and\
    \ returns instructions on what\n       to do with the packet.\n     - Some packets\
    \ are classified as 'to be ignored'.  They are\n       discarded by the Packet\
    \ Processor.\n     - Other packets are matched by the PME, which returns a FLOW\
    \ KEY\n       describing the flow to which the packet belongs.\n     - The flow\
    \ key is used to locate the flow's entry in the FLOW\n       TABLE; a new entry\
    \ is created when a flow is first seen.  The\n       entry's data fields (e.g.\
    \ packet and byte counters) are updated.\n     - A meter reader may collect data\
    \ from the flow table at any time.\n       It may use the 'collect' index to locate\
    \ the flows to be\n       collected within the flow table.\n                 \
    \  packet                     +------------------+\n                   header\
    \                     | Current Rule Set |\n                     |           \
    \             +--------+---------+\n                     |                   \
    \              |\n                     |                                 |\n \
    \            +-------*--------+    'match key'  +------*-------+\n           \
    \  |    Packet      |---------------->|    Packet    |\n             |   Processor\
    \    |                 |   Matching   |\n             |                |<----------------|\
    \    Engine    |\n             +--+----------+--+  'flow key'     +--------------+\n\
    \                |          |\n                |          |\n         Ignore *\
    \          | Count (via 'flow key')\n                           |\n          \
    \              +--*--------------+\n                        | 'Search' index \
    \ |\n                        +--------+--------+\n                           \
    \      |\n                        +--------*--------+\n                      \
    \  |                 |\n                        |   Flow Table    |\n        \
    \                |                 |\n                        +--------+--------+\n\
    \                                 |\n                        +--------*--------+\n\
    \                        | 'Collect' index |\n                        +--------+--------+\n\
    \                                 |\n                                 *\n    \
    \                        Meter Reader\n   The discussion above assumes that a\
    \ meter will only be running a\n   single rule set.  A meter may, however, run\
    \ several rule sets\n   concurrently.  To do this the meter maintains a table\
    \ of current\n   rulesets.  The packet processor matches each packet against every\n\
    \   current ruleset, producing a single flow table containing flows from\n   all\
    \ the rule sets.  One way to implement this is to use the Rule Set\n   Number\
    \ attribute in each flow as part of the flow key.\n   A packet may only be counted\
    \ once in a rule set (as explained in\n   section 3.3 above), but it may be counted\
    \ in any of the current\n   rulesets.  The overall effect of doing this is somewhat\
    \ similar to\n   running several independent meters, one for each rule set.\n"
- title: 4.2  Flow Table
  contents:
  - "4.2  Flow Table\n   Every traffic meter maintains 'flow table', i.e. a table\
    \ of TRAFFIC\n   FLOW RECORDS for flows seen by the meter.  Details of how the\
    \ flow\n   table is maintained are given in section 4.5 below.  A flow record\n\
    \   contains attribute values for its flow, including:\n     - Addresses for the\
    \ flow's source and destination.  These include\n       addresses and masks for\
    \ various network layers (extracted from\n       the packet header), and the identity\
    \ of the interface on which\n       the packet was observed.\n     - First and\
    \ last times when packets were seen for this flow.\n     - Counts for 'forward'\
    \ (source to destination) and 'backward'\n       (destination to source) components\
    \ of the flow's traffic.\n     - Other attributes, e.g. state of the flow record\
    \ (discussed\n       below).\n   The state of a flow record may be:\n     - INACTIVE:\
    \ The flow record is not being used by the meter.\n     - CURRENT: The record\
    \ is in use and describes a flow which belongs\n       to the 'current flow set',\
    \ i.e. the set of flows recently seen by\n       the meter.\n     - IDLE: The\
    \ record is in use and the flow which it describes is\n       part of the current\
    \ flow set.  In addition, no packets belonging\n       to this flow have been\
    \ seen for a period specified by the meter's\n       InactivityTime variable.\n"
- title: 4.3  Packet Handling, Packet Matching
  contents:
  - "4.3  Packet Handling, Packet Matching\n   Each packet header received by the\
    \ traffic meter program is processed\n   as follows:\n     - Extract attribute\
    \ values from the packet header and use them to\n       create a MATCH KEY for\
    \ the packet.\n     - Match the packet's key against the current rule set, as\
    \ explained\n       in detail below.\n   The rule set specifies whether the packet\
    \ is to be counted or\n   ignored.  If it is to be counted the matching process\
    \ produces a FLOW\n   KEY for the flow to which the packet belongs.  This flow\
    \ key is used\n   to find the flow's record in the flow table; if a record does\
    \ not yet\n   exist for this flow, a new flow record may be created.  The data\
    \ for\n   the matching flow record can then be updated.\n   For example, the rule\
    \ set could specify that packets to or from any\n   host in IP network 130.216\
    \ are to be counted.  It could also specify\n   that flow records are to be created\
    \ for every pair of 24-bit (Class\n   C) subnets within network 130.216.\n   Each\
    \ packet's match key is passed to the meter's PATTERN MATCHING\n   ENGINE (PME)\
    \ for matching.  The PME is a Virtual Machine which uses a\n   set of instructions\
    \ called RULES, i.e. a RULE SET is a program for\n   the PME. A packet's match\
    \ key contains source (S) and destination (D)\n   interface identities, address\
    \ values and masks.\n   If measured flows were unidirectional, i.e. only counted\
    \ packets\n   travelling in one direction, the matching process would be simple.\n\
    \   The PME would be called once to match the packet.  Any flow key\n   produced\
    \ by a successful match would be used to find the flow's\n   record in the flow\
    \ table, and that flow's counters would be updated.\n   Flows are, however, bidirectional,\
    \ reflecting the forward and reverse\n   packets of a protocol interchange or\
    \ 'session'.  Maintaining two sets\n   of counters in the meter's flow record\
    \ makes the resulting flow data\n   much simpler to handle, since analysis programs\
    \ do not have to gather\n   together the 'forward' and 'reverse' components of\
    \ sessions.\n   Implementing bi-directional flows is, of course, more difficult\
    \ for\n   the meter, since it must decide whether a packet is a 'forward'\n  \
    \ packet or a 'reverse' one.  To make this decision the meter will\n   often need\
    \ to invoke the PME twice, once for each possible packet\n   direction.\n   The\
    \ diagram below describes the algorithm used by the traffic meter\n   to process\
    \ each packet.  Flow through the diagram is from left to\n   right and top to\
    \ bottom, i.e. from the top left corner to the bottom\n   right corner.  S indicates\
    \ the flow's source address (i.e. its set of\n   source address attribute values)\
    \ from the packet header, and D\n   indicates its destination address.\n   There\
    \ are several cases to consider.  These are:\n     - The packet is recognised\
    \ as one which is TO BE IGNORED.\n     - The packet would MATCH IN EITHER DIRECTION.\
    \  One situation in\n       which this could happen would be a rule set which\
    \ matches flows\n       within network X (Source = X, Dest = X) but specifies\
    \ that flows\n       are to be created for each subnet within network X, say subnets\
    \ y\n       and z.  If, for example a packet is seen for y->z, the meter must\n\
    \       check that flow z->y is not already current before creating y->z.\n  \
    \   - The packet MATCHES IN ONE DIRECTION ONLY.  If its flow is already\n    \
    \   current, its forward or reverse counters are incremented.\n       Otherwise\
    \ it is added to the flow table and then counted.\n                   Ignore\n\
    \   --- match(S->D) -------------------------------------------------+\n     \
    \   | Suc   | NoMatch                                           |\n        | \
    \      |          Ignore                                   |\n        |      match(D->S)\
    \ -----------------------------------------+\n        |       | Suc   | NoMatch\
    \                                   |\n        |       |       |             \
    \                              |\n        |       |       +-------------------------------------------+\n\
    \        |       |                                                   |\n     \
    \   |       |             Suc                                   |\n        | \
    \     current(D->S) ---------- count(D->S,r) --------------+\n        |      \
    \ | Fail                                              |\n        |       |   \
    \                                                |\n        |      create(D->S)\
    \ ----------- count(D->S,r) --------------+\n        |                       \
    \                                    |\n        |             Suc            \
    \                               |\n       current(S->D) ------------------ count(S->D,f)\
    \ --------------+\n        | Fail                                            \
    \          |\n        |             Suc                                      \
    \     |\n       current(D->S) ------------------ count(D->S,r) --------------+\n\
    \        | Fail                                                      |\n     \
    \   |                                                           |\n       create(S->D)\
    \ ------------------- count(S->D,f) --------------+\n                        \
    \                                            |\n                             \
    \                                       *\n   The algorithm uses four functions,\
    \ as follows:\n   match(A->B) implements the PME.  It uses the meter's current\
    \ rule set\n      to match the attribute values in the packet's match key.  A->B\n\
    \      means that the assumed source address is A and destination address\n  \
    \    B, i.e. that the packet was travelling from A to B.  match()\n      returns\
    \ one of three results:\n   'Ignore' means that the packet was matched but this\
    \ flow is not to be\n           counted.\n   'NoMatch' means that the packet did\
    \ not match.  It might, however\n           match with its direction reversed,\
    \ i.e. from B to A.\n   'Suc' means that the packet did match, i.e. it belongs\
    \ to a flow\n           which is to be counted.\n   current(A->B) succeeds if\
    \ the flow A-to-B is current - i.e. has a\n      record in the flow table whose\
    \ state is Current - and fails\n      otherwise.\n   create(A->B) adds the flow\
    \ A-to-B to the flow table, setting the\n      value for attributes - such as\
    \ addresses - which remain constant,\n      and zeroing the flow's counters.\n\
    \   count(A->B,f) increments the 'forward' counters for flow A-to-B.\n   count(A->B,r)\
    \ increments the 'reverse' counters for flow A-to-B.\n      'Forward' here means\
    \ the counters for packets travelling from A to\n      B.  Note that count(A->B,f)\
    \ is identical to count(B->A,r).\n   When writing rule sets one must remember\
    \ that the meter will normally\n   try to match each packet in the reverse direction\
    \ if the forward\n   match does not succeed.  It is particularly important that\
    \ the rule\n   set does not contain inconsistencies which will upset this process.\n\
    \   Consider, for example, a rule set which counts packets from source\n   network\
    \ A to destination network B, but which ignores packets from\n   source network\
    \ B.  This is an obvious example of an inconsistent rule\n   set, since packets\
    \ from network B should be counted as reverse\n   packets for the A-to-B flow.\n\
    \   This problem could be avoided by devising a language for specifying\n   rule\
    \ files and writing a compiler for it, thus making it much easier\n   to produce\
    \ correct rule sets.  An example of such a language is\n   described in the 'SRL'\
    \ document [RTFM-SRL]. Another approach would be\n   to write a 'rule set consistency\
    \ checker' program, which could detect\n   problems in hand-written rule sets.\n\
    \   Normally, the best way to avoid these problems is to write rule sets\n   which\
    \ only classify flows in the forward direction, and rely on the\n   meter to handle\
    \ reverse-travelling packets.\n   Occasionally there can be situations when a\
    \ rule set needs to know\n   the direction in which a packet is being matched.\
    \  Consider, for\n   example, a rule set which wants to save some attribute values\
    \ (source\n   and destination addresses perhaps) for any 'unusual' packets.  The\n\
    \   rule set will contain a sequence of tests for all the 'usual' source\n   addresses,\
    \ follwed by a rule which will execute a 'NoMatch' action.\n   If the match fails\
    \ in the S->D direction, the NoMatch action will\n   cause it to be retried. \
    \ If it fails in the D->S direction, the\n   packet can be counted as an 'unusual'\
    \ packet.\n   To count such an 'unusual' packet we need to know the matching\n\
    \   direction: the MatchingStoD attribute provides this.  To use it, one\n   follows\
    \ the source address tests with a rule which tests whether the\n   matching direction\
    \ is S->D (MatchingStoD value is 1).  If so, a\n   'NoMatch' action is executed.\
    \  Otherwise, the packet has failed to\n   match in both directions; we can save\
    \ whatever attribute values are\n   of interest and count the 'unusual' packet.\n"
- title: 4.4  Rules and Rule Sets
  contents:
  - "4.4  Rules and Rule Sets\n   A rule set is an array of rules.  Rule sets are\
    \ held within a meter\n   as entries in an array of rule sets.\n   Rule set 1\
    \ (the first entry in the rule set table) is built-in to the\n   meter and cannot\
    \ be changed.  It is run when the meter is started up,\n   and provides a very\
    \ coarse reporting granularity; it is mainly useful\n   for verifying that the\
    \ meter is running, before a 'useful' rule set\n   is downloaded to it.\n   A\
    \ meter also maintains an array of 'tasks', which specify what rule\n   sets the\
    \ meter is running.  Each task has a 'current' rule set (the\n   one which it\
    \ normally uses), and a 'standby' rule set (which will be\n   used when the overall\
    \ traffic level is unusually high).  If a task is\n   instructed to use rule set\
    \ 0, it will cease measuring; all packets\n   will be ignored until another (non-zero)\
    \ rule set is made current.\n   Each rule in a rule set is an instruction for\
    \ the Packet Matching\n   Engine, i.e. it is an instruction for a Virtual Machine.\
    \  PME\n   instructions have five component fields, forming two logical groups\n\
    \   as follows:\n      +-------- test ---------+    +---- action -----+\n    \
    \  attribute & mask = value:    opcode,  parameter;\n   The test group allows\
    \ PME to test the value of an attribute.  This is\n   done by ANDing the attribute\
    \ value with the mask and comparing the\n   result with the value field.  Note\
    \ that there is no explicit\n   provision to test a range, although this can be\
    \ done where the range\n   can be covered by a mask, e.g. attribute value less\
    \ than 2048.\n   The PME maintains a Boolean indicator called the 'test indicator',\n\
    \   which determines whether or not a rule's test is performed.  The test\n  \
    \ indicator is initially set (true).\n   The action group specifies what action\
    \ may be performed when the rule\n   is executed.  Opcodes contain two flags:\
    \ 'goto' and 'test', as\n   detailed in the table below.  Execution begins with\
    \ rule 1, the first\n   in the rule set.  It proceeds as follows:\n      If the\
    \ test indicator is true:\n         Perform the test, i.e. AND the attribute value\
    \ with the\n            mask and compare it with the value.\n         If these\
    \ are equal the test has succeeded; perform the\n            rule's action (below).\n\
    \         If the test fails execute the next rule in the rule set.\n         If\
    \ there are no more rules in the rule set, return from the\n            match()\
    \ function indicating NoMatch.\n      If the test indicator is false, or the test\
    \ (above) succeeded:\n         Set the test indicator to this opcode's test flag\
    \ value.\n         Determine the next rule to execute.\n            If the opcode\
    \ has its goto flag set, its parameter value\n               specifies the number\
    \ of the next rule.\n            Opcodes which don't have their goto flags set\
    \ either\n               determine the next rule in special ways (Return),\n \
    \              or they terminate execution (Ignore, NoMatch, Count,\n        \
    \       CountPkt).\n         Perform the action.\n   The PME maintains two 'history'\
    \ data structures.  The first, the\n   'return' stack, simply records the index\
    \ (i.e. 1-origin rule number)\n   of each Gosub rule as it is executed; Return\
    \ rules pop their Gosub\n   rule index.  Note that when the Ignore, NoMatch, Count\
    \ and CountPkt\n   actions are performed, PME execution is terminated regardless\
    \ of\n   whether the PME is executing a subroutine ('return' stack is non-\n \
    \  empty) or not.\n   The second data structure, the 'pattern' queue, is used\
    \ to save\n   information for later use in building a flow key.  A flow key is\n\
    \   built by zeroing all its attribute values, then copying attribute\n   number,\
    \ mask and value information from the pattern queue in the\n   order it was enqueued.\n\
    \   An attribute number identifies the attribute actually used in a test.\n  \
    \ It will usually be the rule's attribute field, unless the attribute\n   is a\
    \ 'meter variable'.  Details of meter variables are given after\n   the table\
    \ of opcode actions below.\n   The opcodes are:\n            opcode         goto\
    \    test\n         1  Ignore           0       -\n         2  NoMatch       \
    \   0       -\n         3  Count            0       -\n         4  CountPkt  \
    \       0       -\n         5  Return           0       0\n         6  Gosub \
    \           1       1\n         7  GosubAct         1       0\n         8  Assign\
    \           1       1\n         9  AssignAct        1       0\n        10  Goto\
    \             1       1\n        11  GotoAct          1       0\n        12  PushRuleTo\
    \       1       1\n        13  PushRuleToAct    1       0\n        14  PushPktTo\
    \        1       1\n        15  PushPktToAct     1       0\n        16  PopTo\
    \            1       1\n        17  PopToAct         1       0\n   The actions\
    \ they perform are:\n   Ignore:         Stop matching, return from the match()\
    \ function\n                   indicating that the packet is to be ignored.\n\
    \   NoMatch:        Stop matching, return from the match() function\n        \
    \           indicating failure.\n   Count:          Stop matching.  Save this\
    \ rule's attribute number,\n                   mask and value in the PME's pattern\
    \ queue, then\n                   construct a flow key for the flow to which this\n\
    \                   packet belongs.  Return from the match() function\n      \
    \             indicating success.  The meter will use the flow\n             \
    \      key to search for the flow record for this\n                   packet's\
    \ flow.\n   CountPkt:       As for Count, except that the masked value from\n\
    \                   the packet header (as it would have been used in\n       \
    \            the rule's test) is saved in the PME's pattern\n                \
    \   queue instead of the rule's value.\n   Gosub:          Call a rule-matching\
    \ subroutine.  Push the current\n                   rule number on the PME's return\
    \ stack, set the\n                   test indicator then goto the specified rule.\n\
    \   GosubAct:       Same as Gosub, except that the test indicator is\n       \
    \            cleared before going to the specified rule.\n   Return:         Return\
    \ from a rule-matching subroutine.  Pop the\n                   number of the\
    \ calling gosub rule from the PME's\n                   'return' stack and add\
    \ this rule's parameter value\n                   to it to determine the 'target'\
    \ rule.  Clear the\n                   test indicator then goto the target rule.\n\
    \                   A subroutine call appears in a rule set as a Gosub\n     \
    \              rule followed by a small group of following rules.\n          \
    \         Since a Return action clears the test flag, the\n                  \
    \ action of one of these 'following' rules will be\n                   executed;\
    \ this allows the subroutine to return a\n                   result (in addition\
    \ to any information it may save\n                   in the PME's pattern queue).\n\
    \   Assign:         Set the attribute specified in this rule to the\n        \
    \           parameter value specified for this rule.  Set the\n              \
    \     test indicator then goto the specified rule.\n   AssignAct:      Same as\
    \ Assign, except that the test indicator\n                   is cleared before\
    \ going to the specified rule.\n   Goto:           Set the test indicator then\
    \ goto the\n                   specified rule.\n   GotoAct:        Clear the test\
    \ indicator then goto the specified\n                   rule.\n   PushRuleTo:\
    \     Save this rule's attribute number, mask and value\n                   in\
    \ the PME's pattern queue. Set the test\n                   indicator then goto\
    \ the specified rule.\n   PushRuleToAct:  Same as PushRuleTo, except that the\
    \ test indicator\n                   is cleared before going to the specified\
    \ rule.\n                   PushRuleTo actions may be used to save the value\n\
    \                   and mask used in a test, or (if the test is not\n        \
    \           performed) to save an arbitrary value and mask.\n   PushPktTo:   \
    \   Save this rule's attribute number, mask, and the\n                   masked\
    \ value from the packet header (as it would\n                   have been used\
    \ in the rule's test), in the PME's\n                   pattern queue.  Set the\
    \ test indicator then goto\n                   the specified rule.\n   PushPktToAct:\
    \   Same as PushPktTo, except that the test indicator\n                   is cleared\
    \ before going to the specified rule.\n                   PushPktTo actions may\
    \ be used to save a value from\n                   the packet header using a specified\
    \ mask.  The\n                   simplest way to program this is to use a zero\
    \ value\n                   for the PushPktTo rule's value field, and to\n   \
    \                GoToAct to the PushPktTo rule (so that it's test is\n       \
    \            not executed).\n   PopTo:          Delete the most recent item from\
    \ the pattern\n                   queue, so as to remove the information saved\
    \ by\n                   an earlier 'push' action.  Set the test indicator\n \
    \                  then goto the specified rule.\n   PopToAct:       Same as PopTo,\
    \ except that the test indicator\n                   is cleared before going to\
    \ the specified rule.\n   As well as the attributes applying directly to packets\
    \ (such as\n   SourcePeerAddress, DestTransAddress, etc.)  the PME implements\n\
    \   several further attribtes.  These are:\n      Null:           Tests performed\
    \ on the Null attribute always\n                      succeed.\n      MatchingStoD:\
    \   Indicates whether the PME is matching the packet\n                      with\
    \ its addresses in 'wire order' or with its\n                      addresses reversed.\
    \  MatchingStoD's value is 1 if\n                      the addresses are in wire\
    \ order (StoD), and zero\n                      otherwise.\n      v1 .. v5:  \
    \     v1, v2, v3, v4 and v5 are 'meter variables'.  They\n                   \
    \   provide a way to pass parameters into rule-\n                      matching\
    \ subroutines.  Each may hold the number of\n                      a normal attribute;\
    \ its value is set by an Assign\n                      action.  When a meter variable\
    \ appears as the\n                      attribute of a rule, its value specifies\
    \ the\n                      actual attribute to be tested. For example, if v1\n\
    \                      had been assigned SourcePeerAddress as its value,\n   \
    \                   a rule with v1 as its attribute would actually\n         \
    \             test SourcePeerAddress.\n      SourceClass, DestClass, FlowClass,\n\
    \      SourceKind, DestKind, FlowKind:\n                      These six attributes\
    \ may be set by executing\n                      PushRuleTo actions.  They allow\
    \ the PME to save\n                      (in flow records) information which has\
    \ been built\n                      up during matching.  Their values may be tested\
    \ in\n                      rules; this allows one to set them early in a rule\n\
    \                      set, and test them later.\n   The opcodes detailed above\
    \ (with their above 'goto' and 'test'\n   values) form a minimum set, but one\
    \ which has proved very effective\n   in current meter implementations.  From\
    \ time to time it may be useful\n   to add further opcodes; IANA considerations\
    \ for allocating these are\n   set out in section 8 below.\n"
- title: 4.5  Maintaining the Flow Table
  contents:
  - "4.5  Maintaining the Flow Table\n   The flow table may be thought of as a 1-origin\
    \ array of flow records.\n   (A particular implementation may, of course, use\
    \ whatever data\n   structure is most suitable).  When the meter starts up there\
    \ are no\n   known flows; all the flow records are in the 'inactive' state.\n\
    \   Each time a packet is matched for a flow which is not in a current\n   flow\
    \ set a flow record is created for it; the state of such a record\n   is\n   'current'.\
    \  When selecting a record for the new flow the meter\n   searches the flow table\
    \ for an 'inactive' record.  If no inactive\n   records are available it will\
    \ search for an 'idle' one instead.  Note\n   that there is no particular significance\
    \ in the ordering of records\n   within the flow table.\n   A meter's memory management\
    \ routines should aim to minimise the time\n   spent finding flow records for\
    \ new flows, so as to minimise the setup\n   overhead associated with each new\
    \ flow.\n   Flow data may be collected by a 'meter reader' at any time.  There\
    \ is\n   no requirement for collections to be synchronized.  The reader may\n\
    \   collect the data in any suitable manner, for example it could upload\n   a\
    \ copy of the whole flow table using a file transfer protocol, or it\n   could\
    \ read the records in the current flow set row by row using a\n   suitable data\
    \ transfer protocol.\n   The meter keeps information about collections, in particular\
    \ it\n   maintains ReaderLastTime variables which remember the time the last\n\
    \   collection was made by each reader.  A second variable,\n   InactivityTime,\
    \ specifies the minimum time the meter will wait before\n   considering that a\
    \ flow is idle.\n   The meter must recover records used for idle flows, if only\
    \ to\n   prevent it running out of flow records.  Recovered flow records are\n\
    \   returned to the 'inactive' state.  A variety of recovery strategies\n   are\
    \ possible, including the following:\n   One possible recovery strategy is to\
    \ recover idle flow records as\n   soon as possible after their data has been\
    \ collected by all readers\n   which have registered to do so.  To implement this\
    \ the meter could\n   run a background process which scans the flow table looking\
    \ for '\n   current' flows whose 'last packet' time is earlier than the meter's\n\
    \   LastCollectTime.\n   Another recovery strategy is to leave idle flows alone\
    \ as long as\n   possible, which would be acceptable if one was only interested\
    \ in\n   measuring total traffic volumes.  It could be implemented by having\n\
    \   the meter search for collected idle flows only when it ran low on '\n   inactive'\
    \ flow records.\n   One further factor a meter should consider before recovering\
    \ a flow\n   is the number of meter readers which have collected the flow's data.\n\
    \   If there are multiple meter readers operating, each reader should\n   collect\
    \ a flow's data before its memory is recovered.\n   Of course a meter reader may\
    \ fail, so the meter cannot wait forever\n   for it.  Instead the meter must keep\
    \ a table of active meter readers,\n   with a timeout specified for each.  If\
    \ a meter reader fails to\n   collect flow data within its timeout interval, the\
    \ meter should\n   delete that reader from the meter's active meter reader table.\n"
- title: 4.6  Handling Increasing Traffic Levels
  contents:
  - "4.6  Handling Increasing Traffic Levels\n   Under normal conditions the meter\
    \ reader specifies which set of usage\n   records it wants to collect, and the\
    \ meter provides them.  If,\n   however, memory usage rises above the high-water\
    \ mark the meter\n   should switch to a STANDBY RULE SET so as to decrease the\
    \ rate at\n   which new flows are created.\n   When the manager, usually as part\
    \ of a regular poll, becomes aware\n   that the meter is using its standby rule\
    \ set, it could decrease the\n   interval between collections.  This would shorten\
    \ the time that flows\n   sit in memory waiting to be collected, allowing the\
    \ meter to free\n   flow memory faster.\n   The meter could also increase its\
    \ efforts to recover flow memory so\n   as to reduce the number of idle flows\
    \ in memory.  When the situation\n   returns to normal, the manager may request\
    \ the meter to switch back\n   to its normal rule set.\n"
- title: 5  Meter Readers
  contents:
  - "5  Meter Readers\n   Usage data is accumulated by a meter (e.g. in a router)\
    \ as memory\n   permits.  It is collected at regular reporting intervals by meter\n\
    \   readers, as specified by a manager.  The collected data is recorded\n   in\
    \ stable storage as a FLOW DATA FILE, as a sequence of USAGE\n   RECORDS.\n  \
    \ The following sections describe the contents of usage records and\n   flow data\
    \ files.  Note, however, that at this stage the details of\n   such records and\
    \ files is not specified in the architecture.\n   Specifying a common format for\
    \ them would be a worthwhile future\n   development.\n"
- title: 5.1  Identifying Flows in Flow Records
  contents:
  - "5.1  Identifying Flows in Flow Records\n   Once a packet has been classified\
    \ and is ready to be counted, an\n   appropriate flow data record must already\
    \ exist in the flow table;\n   otherwise one must be created.  The flow record\
    \ has a flexible format\n   where unnecessary identification attributes may be\
    \ omitted.  The\n   determination of which attributes of the flow record to use,\
    \ and of\n   what values to put in them, is specified by the current rule set.\n\
    \   Note that the combination of start time, rule set number and flow\n   subscript\
    \ (row number in the flow table) provide a unique flow\n   identifier, regardless\
    \ of the values of its other attributes.\n   The current rule set may specify\
    \ additional information, e.g. a\n   computed attribute value such as FlowKind,\
    \ which is to be placed in\n   the attribute section of the usage record.  That\
    \ is, if a particular\n   flow is matched by the rule set, then the corresponding\
    \ flow record\n   should be marked not only with the qualifying identification\n\
    \   attributes, but also with the additional information.  Using this\n   feature,\
    \ several flows may each carry the same FlowKind value, so\n   that the resulting\
    \ usage records can be used in post-processing or\n   between meter reader and\
    \ meter as a criterion for collection.\n"
- title: 5.2  Usage Records, Flow Data Files
  contents:
  - "5.2  Usage Records, Flow Data Files\n   The collected usage data will be stored\
    \ in flow data files on the\n   meter reader, one file for each meter.  As well\
    \ as containing the\n   measured usage data, flow data files must contain information\n\
    \   uniquely identifiying the meter from which it was collected.\n   A USAGE RECORD\
    \ contains the descriptions of and values for one or\n   more flows.  Quantities\
    \ are counted in terms of number of packets and\n   number of bytes per flow.\
    \  Other quantities, e.g. short-term flow\n   rates, may be added later; work\
    \ on such extensions is described in\n   the RTFM 'New Attributes' document [RTFM-NEW].\n\
    \   Each usage record contains the metered traffic group identifier of\n   the\
    \ meter (a set of network addresses), a time stamp and a list of\n   reported\
    \ flows (FLOW DATA RECORDS). A meter reader will build up a\n   file of usage\
    \ records by regularly collecting flow data from a meter,\n   using this data\
    \ to build usage records and concatenating them to the\n   tail of a file.  Such\
    \ a file is called a FLOW DATA FILE.\n   A usage record contains the following\
    \ information in some form:\n   +-------------------------------------------------------------------+\n\
    \   |    RECORD IDENTIFIERS:                                            |\n  \
    \ |      Meter Id (& digital signature if required)                   |\n   |\
    \      Timestamp                                                    |\n   |  \
    \    Collection Rules ID                                          |\n   +-------------------------------------------------------------------+\n\
    \   |    FLOW IDENTIFIERS:            |    COUNTERS                     |\n  \
    \ |      Address List               |       Packet Count              |\n   |\
    \      Subscriber ID (Optional)   |       Byte Count                |\n   |  \
    \    Attributes (Optional)      |    Flow Start/Stop Time         |\n   +-------------------------------------------------------------------+\n"
- title: '5.3  Meter to Meter Reader:  Usage Record Transmission'
  contents:
  - "5.3  Meter to Meter Reader:  Usage Record Transmission\n   The usage record contents\
    \ are the raison d'etre of the system.  The\n   accuracy, reliability, and security\
    \ of transmission are the primary\n   concerns of the meter/meter reader exchange.\
    \  Since errors may occur\n   on networks, and Internet packets may be dropped,\
    \ some mechanism for\n   ensuring that the usage information is transmitted intact\
    \ is needed.\n   Flow data is moved from meter to meter reader via a series of\n\
    \   protocol exchanges between them.  This may be carried out in various\n   ways,\
    \ moving individual attribute values, complete flows, or the\n   entire flow table\
    \ (i.e. all the active and idle flows).  One possible\n   method of achieving\
    \ this transfer is to use SNMP; the 'Traffic Flow\n   Measurement:  Meter MIB'\
    \ RFC [RTFM-MIB] gives details.  Note that\n   this is simply one example; the\
    \ transfer of flow data from meter to\n   meter reader is not specified in this\
    \ document.\n   The reliability of the data transfer method under light, normal,\
    \ and\n   extreme network loads should be understood before selecting among\n\
    \   collection methods.\n   In normal operation the meter will be running a rule\
    \ file which\n   provides the required degree of flow reporting granularity, and\
    \ the\n   meter reader(s) will collect the flow data often enough to allow the\n\
    \   meter's garbage collection mechanism to maintain a stable level of\n   memory\
    \ usage.\n   In the worst case traffic may increase to the point where the meter\n\
    \   is in danger of running completely out of flow memory.  The meter\n   implementor\
    \ must decide how to handle this, for example by switching\n   to a default (extremely\
    \ coarse granularity) rule set, by sending a\n   trap message to the manager,\
    \ or by attempting to dump flow data to\n   the meter reader.\n   Users of the\
    \ Traffic Flow Measurement system should analyse their\n   requirements carefully\
    \ and assess for themselves whether it is more\n   important to attempt to collect\
    \ flow data at normal granularity\n   (increasing the collection frequency as\
    \ needed to keep up with\n   traffic volumes), or to accept flow data with a coarser\
    \ granularity.\n   Similarly, it may be acceptable to lose flow data for a short\
    \ time in\n   return for being sure that the meter keeps running properly, i.e.\
    \ is\n   not overwhelmed by rising traffic levels.\n"
- title: 6   Managers
  contents:
  - "6   Managers\n   A manager configures meters and controls meter readers.  It\
    \ does this\n   via the interactions described below.\n"
- title: '6.1  Between Manager and Meter:  Control Functions'
  contents:
  - "6.1  Between Manager and Meter:  Control Functions\n     - DOWNLOAD RULE SET:\
    \ A meter may hold an array of rule sets.  One\n       of these, the 'default'\
    \ rule set, is built in to the meter and\n       cannot be changed; this is a\
    \ diagnostic feature, ensuring that\n       when a meter starts up it will be\
    \ running a known ruleset.\n       All other rule sets must be downloaded by the\
    \ manager.  A manager\n       may use any suitable protocol exchange to achieve\
    \ this, for\n       example an FTP file transfer or a series of SNMP SETs, one\
    \ for\n       each row of the rule set.\n     - SPECIFY METER TASK: Once the rule\
    \ sets have been downloaded, the\n       manager must instruct the meter which\
    \ rule sets will be the\n       'current' and 'standby' ones for each task the\
    \ meter is to\n       perform.\n     - SET HIGH WATER MARK: A percentage of the\
    \ flow table capacity,\n       used by the meter to determine when to switch to\
    \ its standby rule\n       set (so as to increase the granularity of the flows\
    \ and conserve\n       the meter's flow memory).  Once this has happened, the\
    \ manager\n       may also change the polling frequency or the meter's control\n\
    \       parameters (so as to increase the rate at which the meter can\n      \
    \ recover memory from idle flows).  The meter has a separate high\n       water\
    \ mark value for each task it is currently running.\n       If the high traffic\
    \ levels persist, the meter's normal rule set\n       may have to be rewritten\
    \ to permanently reduce the reporting\n       granularity.\n     - SET FLOW TERMINATION\
    \ PARAMETERS: The meter should have the good\n       sense in situations where\
    \ lack of resources may cause data loss\n       to purge flow records from its\
    \ tables.  Such records may include:\n        - Flows that have already been reported\
    \ to all registered meter\n          readers, and show no activity since the last\
    \ report,\n        - Oldest flows, or\n        - Flows with the smallest number\
    \ of observed packets.\n     - SET INACTIVITY TIMEOUT: This is a time in seconds\
    \ since the last\n       packet was seen for a flow.  Flow records may be reclaimed\
    \ if\n       they have been idle for at least this amount of time, and have\n\
    \       been collected in accordance with the current collection\n       criteria.\n\
    \   It might be useful if a manager could set the FLOW TERMINATION\n   PARAMETERS\
    \ to different values for different tasks.  Current meter\n   implementations\
    \ have only single ('whole meter') values for these\n   parameters, and experience\
    \ to date suggests that this provides an\n   adequate degree of control for the\
    \ tasks.\n"
- title: '6.2  Between Manager and Meter Reader:  Control Functions'
  contents:
  - "6.2  Between Manager and Meter Reader:  Control Functions\n   Because there are\
    \ a number of parameters that must be set for traffic\n   flow measurement to\
    \ function properly, and viable settings may change\n   as a result of network\
    \ traffic characteristics, it is desirable to\n   have dynamic network management\
    \ as opposed to static meter\n   configurations.  Many of these operations have\
    \ to do with space\n   tradeoffs - if memory at the meter is exhausted, either\
    \ the\n   collection interval must be decreased or a coarser granularity of\n\
    \   aggregation must be used to reduce the number of active flows.\n   Increasing\
    \ the collection interval effectively stores data in the\n   meter; usage data\
    \ in transit is limited by the effective bandwidth of\n   the virtual link between\
    \ the meter and the meter reader, and since\n   these limited network resources\
    \ are usually also used to carry user\n   data (the purpose of the network), the\
    \ level of traffic flow\n   measurement traffic should be kept to an affordable\
    \ fraction of the\n   bandwidth.  (\"Affordable\" is a policy decision made by\
    \ the Network\n   Operations personnel).  At any rate, it must be understood that\
    \ the\n   operations below do not represent the setting of independent\n   variables;\
    \ on the contrary, each of the values set has a direct and\n   measurable effect\
    \ on the behaviour of the other variables.\n   Network management operations follow:\n\
    \     - MANAGER and METER READER IDENTIFICATION: The manager should\n       ensure\
    \ that meters are read by the correct set of meter readers,\n       and take steps\
    \ to prevent unauthorised access to usage\n       information.  The meter readers\
    \ so identified should be prepared\n       to poll if necessary and accept data\
    \ from the appropriate meters.\n       Alternate meter readers may be identified\
    \ in case both the\n       primary manager and the primary meter reader are unavailable.\n\
    \       Similarly, alternate managers may be identified.\n     - REPORTING INTERVAL\
    \ CONTROL: The usual reporting interval should\n       be selected to cope with\
    \ normal traffic patterns.  However, it\n       may be possible for a meter to\
    \ exhaust its memory during traffic\n       spikes even with a correctly set reporting\
    \ interval.  Some\n       mechanism should be available for the meter to tell\
    \ the manager\n       that it is in danger of exhausting its memory (by declaring\
    \ a '\n       high water' condition), and for the manager to arbitrate (by\n \
    \      decreasing the polling interval, letting nature take its course,\n    \
    \   or by telling the meter to ask for help sooner next time).\n     - GRANULARITY\
    \ CONTROL: Granularity control is a catch-all for all\n       the parameters that\
    \ can be tuned and traded to optimise the\n       system's ability to reliably\
    \ measure and store information on all\n       the traffic (or as close to all\
    \ the traffic as an administration\n       requires).  Granularity:\n        \
    \  - Controls the amount of address information identifying each\n           \
    \ flow, and\n          - Determines the number of buckets into which user traffic\n\
    \            will be lumped together.\n       Since granularity is controlled\
    \ by the meter's current rule set,\n       the manager can only change it by requesting\
    \ the meter to switch\n       to a different rule set.  The new rule set could\
    \ be downloaded\n       when required, or it could have been downloaded as part\
    \ of the\n       meter's initial configuration.\n     - FLOW LIFETIME CONTROL:\
    \ Flow termination parameters include\n       timeout parameters for obsoleting\
    \ inactive flows and removing\n       them from tables, and maximum flow lifetimes.\
    \  This is\n       intertwined with reporting interval and granularity, and must\
    \ be\n       set in accordance with the other parameters.\n"
- title: 6.3  Exception Conditions
  contents:
  - "6.3  Exception Conditions\n   Exception conditions must be handled, particularly\
    \ occasions when the\n   meter runs out of space for flow data.  Since - to prevent\
    \ an active\n   task from counting any packet twice - packets can only be counted\
    \ in\n   a single flow, discarding records will result in the loss of\n   information.\
    \  The mechanisms to deal with this are as follows:\n     - METER OUTAGES: In\
    \ case of impending meter outages (controlled\n       restarts, etc.) the meter\
    \ could send a trap to the manager.  The\n       manager could then request one\
    \ or more meter readers to pick up\n       the data from the meter.\n       Following\
    \ an uncontrolled meter outage such as a power failure,\n       the meter could\
    \ send a trap to the manager indicating that it has\n       restarted.  The manager\
    \ could then download the meter's correct\n       rule set and advise the meter\
    \ reader(s) that the meter is running\n       again.  Alternatively, the meter\
    \ reader may discover from its\n       regular poll that a meter has failed and\
    \ restarted.  It could\n       then advise the manager of this, instead of relying\
    \ on a trap\n       from the meter.\n     - METER READER OUTAGES: If the collection\
    \ system is down or\n       isolated, the meter should try to inform the manager\
    \ of its\n       failure to communicate with the collection system.  Usage data\
    \ is\n       maintained in the flows' rolling counters, and can be recovered\n\
    \       when the meter reader is restarted.\n     - MANAGER OUTAGES: If the manager\
    \ fails for any reason, the meter\n       should continue measuring and the meter\
    \ reader(s) should keep\n       gathering usage records.\n     - BUFFER PROBLEMS:\
    \ The network manager may realise that there is a\n       'low memory' condition\
    \ in the meter.  This can usually be\n       attributed to the interaction between\
    \ the following controls:\n        - The reporting interval is too infrequent,\
    \ or\n        - The reporting granularity is too fine.\n       Either of these\
    \ may be exacerbated by low throughput or bandwidth\n       of circuits carrying\
    \ the usage data.  The manager may change any\n       of these parameters in response\
    \ to the meter (or meter reader's)\n       plea for help.\n"
- title: 6.4  Standard Rule Sets
  contents:
  - "6.4  Standard Rule Sets\n   Although the rule table is a flexible tool, it can\
    \ also become very\n   complex.  It may be helpful to develop some rule sets for\
    \ common\n   applications:\n     - PROTOCOL TYPE: The meter records packets by\
    \ protocol type.  This\n       will be the default rule table for Traffic Flow\
    \ Meters.\n     - ADJACENT SYSTEMS: The meter records packets by the MAC address\
    \ of\n       the Adjacent Systems (neighbouring originator or next-hop).\n   \
    \    (Variants on this table are \"report source\" or \"report sink\"\n      \
    \ only.)  This strategy might be used by a regional or backbone\n       network\
    \ which wants to know how much aggregate traffic flows to\n       or from its\
    \ subscriber networks.\n     - END SYSTEMS: The meter records packets by the IP\
    \ address pair\n       contained in the packet.  (Variants on this table are \"\
    report\n       source\" or \"report sink\" only.)  This strategy might be used\
    \ by\n       an End System network to get detailed host traffic matrix usage\n\
    \       data.\n     - TRANSPORT TYPE: The meter records packets by transport address;\n\
    \       for IP packets this provides usage information for the various IP\n  \
    \     services.\n     - HYBRID SYSTEMS: Combinations of the above, e.g. for one\
    \ interface\n       report End Systems, for another interface report Adjacent\n\
    \       Systems.  This strategy might be used by an enterprise network to\n  \
    \     learn detail about local usage and use an aggregate count for the\n    \
    \   shared regional network.\n"
- title: 7  Security Considerations
  contents:
  - '7  Security Considerations

    '
- title: 7.1  Threat Analysis
  contents:
  - "7.1  Threat Analysis\n   A traffic flow measurement system may be subject to\
    \ the following\n       kinds of attacks:\n     - ATTEMPTS TO DISABLE A TRAFFIC\
    \ METER: An attacker may attempt to\n       disrupt traffic measurement so as\
    \ to prevent users being charged\n       for network usage.  For example, a network\
    \ probe sending packets\n       to a large number of destination and transport\
    \ addresses could\n       produce a sudden rise in the number of flows in a meter's\
    \ flow\n       table, thus forcing it to use its coarser standby rule set.\n \
    \    - UNAUTHORIZED USE OF SYSTEM RESOURCES: An attacker may wish to\n       gain\
    \ advantage or cause mischief (e.g. denial of service) by\n       subverting any\
    \ of the system elements - meters, meter readers or\n       managers.\n     -\
    \ UNAUTHORIZED DISCLOSURE OF DATA: Any data that is sensitive to\n       disclosure\
    \ can be read through active or passive attacks unless\n       it is suitably\
    \ protected.  Usage data may or may not be of this\n       type.  Control messages,\
    \ traps, etc. are not likely to be\n       considered sensitive to disclosure.\n\
    \     - UNAUTHORIZED ALTERATION, REPLACEMENT OR DESTRUCTION OF DATA:\n       Similarly,\
    \ any data whose integrity is sensitive can be altered,\n       replaced/injected\
    \ or deleted through active or passive attacks\n       unless it is suitably protected.\
    \  Attackers may modify message\n       streams to falsify usage data or interfere\
    \ with the proper\n       operation of the traffic flow measurement system.  Therefore,\
    \ all\n       messages, both those containing usage data and those containing\n\
    \       control data, should be considered vulnerable to such attacks.\n"
- title: 7.2  Countermeasures
  contents:
  - "7.2  Countermeasures\n   The following countermeasures are recommended to address\
    \ the possible\n   threats enumerated above:\n     - ATTEMPTS TO DISABLE A TRAFFIC\
    \ METER can't be completely\n       countered.  In practice, flow data records\
    \ from network security\n       attacks have proved very useful in determining\
    \ what happened.\n       The most effective approach is first to configure the\
    \ meter so\n       that it has three or more times as much flow memory as it needs\n\
    \       in normal operation, and second to collect the flow data fairly\n    \
    \   frequently so as to minimise the time needed to recover flow\n       memory\
    \ after such an attack.\n     - UNAUTHORIZED USE OF SYSTEM RESOURCES is countered\
    \ through the use\n       of authentication and access control services.\n   \
    \  - UNAUTHORIZED DISCLOSURE OF DATA is countered through the use of a\n     \
    \  confidentiality (encryption) service.\n     - UNAUTHORIZED ALTERATION, REPLACEMENT\
    \ OR DESTRUCTION OF DATA is\n       countered through the use of an integrity\
    \ service.\n   A Traffic Measurement system must address all of these concerns.\n\
    \   Since a high degree of protection is required, the use of strong\n   cryptographic\
    \ methodologies is recommended.  The security\n   requirements for communication\
    \ between pairs of traffic measurmement\n   system elements are summarized in\
    \ the table below.  It is assumed\n   that meters do not communicate with other\
    \ meters, and that meter\n   readers do not communicate directly with other meter\
    \ readers (if\n   synchronization is required, it is handled by the manager, see\n\
    \   Section 2.5).  Each entry in the table indicates which kinds of\n   security\
    \ services are required.  Basically, the requirements are as\n   follows:\n  \
    \         Security Service Requirements for RTFM elements\n  +------------------------------------------------------------------+\n\
    \  | from\\to |    meter     | meter reader | application |  manager   |\n  |---------+--------------+--------------+-------------+------------|\n\
    \  | meter   |     N/A      |  authent     |     N/A     |  authent   |\n  | \
    \        |              |  acc ctrl    |             |  acc ctrl  |\n  |     \
    \    |              |  integrity   |             |            |\n  |         |\
    \              |  confid **   |             |            |\n  |---------+--------------+--------------+-------------+------------|\n\
    \  | meter   |   authent    |     N/A      |  authent    |  authent   |\n  | reader\
    \  |   acc ctrl   |              |  acc ctrl   |  acc ctrl  |\n  |         | \
    \             |              |  integrity  |            |\n  |         |     \
    \         |              |  confid **  |            |\n  |---------+--------------+--------------+-------------+------------|\n\
    \  | appl    |     N/A      |  authent     |             |            |\n  | \
    \        |              |  acc ctrl    |     ##      |    ##      |\n  |---------+--------------+--------------+-------------+------------|\n\
    \  | manager |  authent     |  authent     |     ##      |  authent   |\n  | \
    \        |  acc ctrl    |  acc ctrl    |             |  acc ctrl  |\n  |     \
    \    |  integrity   |  integrity   |             |  integrity |\n  +------------------------------------------------------------------+\n\
    \     N/A = Not Applicable    ** = optional    ## = outside RTFM scope\n     -\
    \ When any two elements intercommunicate they should mutually\n       authenticate\
    \ themselves to one another.  This is indicated by '\n       authent' in the table.\
    \  Once authentication is complete, an\n       element should check that the requested\
    \ type of access is\n       allowed; this is indicated on the table by 'acc ctrl'.\n\
    \     - Whenever there is a transfer of information its integrity should\n   \
    \    be protected.\n     - Whenever there is a transfer of usage data it should\
    \ be possible\n       to ensure its confidentiality if it is deemed sensitive\
    \ to\n       disclosure.  This is indicated by 'confid' in the table.\n   Security\
    \ protocols are not specified in this document.  The system\n   elements' management\
    \ and collection protocols are responsible for\n   providing sufficient data integrity,\
    \ confidentiality, authentication\n   and access control services.\n"
- title: 8  IANA Considerations
  contents:
  - "8  IANA Considerations\n   The RTFM Architecture, as set out in this document,\
    \ has two sets of\n   assigned numbers.  Considerations for assigning them are\
    \ discussed in\n   this section, using the example policies as set out in the\n\
    \   \"Guidelines for IANA Considerations\" document [IANA-RFC].\n"
- title: 8.1  PME Opcodes
  contents:
  - "8.1  PME Opcodes\n   The Pattern Matching Engine (PME) is a virtual machine,\
    \ executing\n   RTFM rules as its instructions.  The PME opcodes appear in the\n\
    \   'action' field of an RTFM rule.  The current list of opcodes, and\n   their\
    \ values for the PME's 'goto' and 'test' flags, are set out in\n   section 4.4\
    \ above (\"Rules and Rulesets).\n   The PME opcodes are pivotal to the RTFM architecture,\
    \ since they must\n   be implemented in every RTFM meter.  Any new opcodes must\
    \ therefore\n   be allocated through an IETF Consensus action [IANA-RFC].\n  \
    \ Opcodes are simply non-negative integers, but new opcodes should be\n   allocated\
    \ sequentially so as to keep the total opcode range as small\n   as possible.\n"
- title: 8.2  RTFM Attributes
  contents:
  - "8.2  RTFM Attributes\n   Attribute numbers in the range of 0-511 are globally\
    \ unique and are\n   allocated according to an IETF Consensus action [IANA-RFC].\
    \ Appendix\n   C of this document allocates a basic (i.e. useful minimum) set\
    \ of\n   attribtes; they are assigned numbers in the range 0 to 63.  The RTFM\n\
    \   working group is working on an extended set of attributes, which will\n  \
    \ have numbers in the range 64 to 127.\n   Vendor-specific attribute numbers are\
    \ in the range 512-1023, and will\n   be allocated using the First Come FIrst\
    \ Served policy [IANA-RFC].\n   Vendors requiring attribute numbers should submit\
    \ a request to IANA\n   giving the attribute names: IANA will allocate them the\
    \ next\n   available numbers.\n   Attribute numbers 1024 and higher are Reserved\
    \ for Private Use\n   [IANA-RFC]. Implementors wishing to experiment with further\
    \ new\n   attributes should use attribute numbers in this range.\n   Attribute\
    \ numbers are simply non-negative integers.  When writing\n   specifications for\
    \ attributes, implementors must give sufficient\n   detail for the new attributes\
    \ to be easily added to the RTFM Meter\n   MIB [RTFM-MIB]. In particular, they\
    \ must indicate whether the new\n   attributes may be:\n    - tested in an IF\
    \ statement\n    - saved by a SAVE statement or set by a STORE statement\n   \
    \ - read from an RTFM meter\n   (IF, SAVE and STORE are statements in the SRL\
    \ Ruleset Language\n   [RTFM-SRL]).\n"
- title: 9  APPENDICES
  contents:
  - '9  APPENDICES

    '
- title: '9.1  Appendix A: Network Characterisation'
  contents:
  - "9.1  Appendix A: Network Characterisation\n   Internet users have extraordinarily\
    \ diverse requirements.  Networks\n   differ in size, speed, throughput, and processing\
    \ power, among other\n   factors.  There is a range of traffic flow measurement\
    \ capabilities\n   and requirements.  For traffic flow measurement purposes, the\n\
    \   Internet may be viewed as a continuum which changes in character as\n   traffic\
    \ passes through the following representative levels:\n           International\
    \                    |\n           Backbones/National        ---------------\n\
    \                                    /               \\\n           Regional/MidLevel\
    \     ----------   ----------\n                                /     \\    \\\
    \ /    /     \\\n           Stub/Enterprise     ---   ---   ---   ----   ----\n\
    \                               |||   |||   |||   ||||   ||||\n           End-Systems/Hosts\
    \   xxx   xxx   xxx   xxxx   xxxx\n   Note that mesh architectures can also be\
    \ built out of these\n   components, and that these are merely descriptive terms.\
    \  The nature\n   of a single network may encompass any or all of the descriptions\n\
    \   below, although some networks can be clearly identified as a single\n   type.\n\
    \   BACKBONE networks are typically bulk carriers that connect other\n   networks.\
    \  Individual hosts (with the exception of network management\n   devices and\
    \ backbone service hosts) typically are not directly\n   connected to backbones.\n\
    \   REGIONAL networks are closely related to backbones, and differ only\n   in\
    \ size, the number of networks connected via each port, and\n   geographical coverage.\
    \  Regionals may have directly connected hosts,\n   acting as hybrid backbone/stub\
    \ networks.  A regional network is a\n   SUBSCRIBER to the backbone.\n   STUB/ENTERPRISE\
    \ networks connect hosts and local area networks.\n   STUB/ENTERPRISE networks\
    \ are SUBSCRIBERS to regional and backbone\n   networks.\n   END SYSTEMS, colloquially\
    \ HOSTS, are SUBSCRIBERS to any of the above\n   networks.\n   Providing a uniform\
    \ identification of the SUBSCRIBER in finer\n   granularity than that of end-system,\
    \ (e.g. user/account), is beyond\n   the scope of the current architecture, although\
    \ an optional attribute\n   in the traffic flow measurement record may carry system-specific\n\
    \   'user identification' labels so that meters can implement proprietary\n  \
    \ or non-standard schemes for the attribution of network traffic to\n   responsible\
    \ parties.\n"
- title: '9.2  Appendix B: Recommended Traffic Flow Measurement Capabilities'
  contents:
  - "9.2  Appendix B: Recommended Traffic Flow Measurement Capabilities\n   Initial\
    \ recommended traffic flow measurement conventions are outlined\n   here according\
    \ to the following Internet building blocks.  It is\n   important to understand\
    \ what complexity reporting introduces at each\n   network level.  Whereas the\
    \ hierarchy is described top-down in the\n   previous section, reporting requirements\
    \ are more easily addressed\n   bottom-up.\n            End-Systems\n        \
    \    Stub Networks\n            Enterprise Networks\n            Regional Networks\n\
    \            Backbone Networks\n   END-SYSTEMS are currently responsible for allocating\
    \ network usage to\n   end-users, if this capability is desired.  From the Internet\
    \ Protocol\n   perspective, end-systems are the finest granularity that can be\n\
    \   identified without protocol modifications.  Even if a meter violated\n   protocol\
    \ boundaries and tracked higher-level protocols, not all\n   packets could be\
    \ correctly allocated by user, and the definition of\n   user itself varies widely\
    \ from operating system to operating system\n   (e.g. how to trace network usage\
    \ back to users from shared\n   processes).\n   STUB and ENTERPRISE networks will\
    \ usually collect traffic data either\n   by end-system network address or network\
    \ address pair if detailed\n   reporting is required in the local area network.\
    \  If no local\n   reporting is required, they may record usage information in\
    \ the exit\n   router to track external traffic only.  (These are the only networks\n\
    \   which routinely use attributes to perform reporting at granularities\n   finer\
    \ than end-system or intermediate-system network address.)\n   REGIONAL networks\
    \ are intermediate networks.  In some cases,\n   subscribers will be enterprise\
    \ networks, in which case the\n   intermediate system network address is sufficient\
    \ to identify the\n   regional's immediate subscriber.  In other cases, individual\
    \ hosts or\n   a disjoint group of hosts may constitute a subscriber.  Then end-\n\
    \   system network address pairs need to be tracked for those\n   subscribers.\
    \  When the source may be an aggregate entity (such as a\n   network, or adjacent\
    \ router representing traffic from a world of\n   hosts beyond) and the destination\
    \ is a singular entity (or vice\n   versa), the meter is said to be operating\
    \ as a HYBRID system.\n   At the regional level, if the overhead is tolerable\
    \ it may be\n   advantageous to report usage both by intermediate system network\n\
    \   address (e.g. adjacent router address) and by end-system network\n   address\
    \ or end-system network address pair.\n   BACKBONE networks are the highest level\
    \ networks operating at higher\n   link speeds and traffic levels.  The high volume\
    \ of traffic will in\n   most cases preclude detailed traffic flow measurement.\
    \  Backbone\n   networks will usually account for traffic by adjacent routers'\n\
    \   network addresses.\n"
- title: '9.3  Appendix C: List of Defined Flow Attributes'
  contents:
  - "9.3  Appendix C: List of Defined Flow Attributes\n   This Appendix provides a\
    \ checklist of the attributes defined to date;\n   others will be added later\
    \ as the Traffic Measurement Architecture is\n   further developed.\n   Note that\
    \ this table gives only a very brief summary.  The Meter MIB\n   [RTFM-MIB] provides\
    \ the definitive specification of attributes and\n   their allowed values.  The\
    \ MIB variables which represent flow\n   attributes have 'flowData' prepended\
    \ to their names to indicate that\n   they belong to the MIB's flowData table.\n\
    \       0  Null\n       4  SourceInterface        Integer     Source Address\n\
    \       5  SourceAdjacentType     Integer\n       6  SourceAdjacentAddress  String\n\
    \       7  SourceAdjacentMask     String\n       8  SourcePeerType         Integer\n\
    \       9  SourcePeerAddress      String\n      10  SourcePeerMask         String\n\
    \      11  SourceTransType        Integer\n      12  SourceTransAddress     String\n\
    \      13  SourceTransMask        String\n      14  DestInterface          Integer\
    \     Destination Address\n      15  DestAdjacentType       Integer\n      16\
    \  DestAdjacentAddress    String\n      17  DestAdjacentMask       String\n  \
    \    18  DestPeerType           Integer\n      19  DestPeerAddress        String\n\
    \      20  DestPeerMask           String\n      21  DestTransType          Integer\n\
    \      22  DestTransAddress       String\n      23  DestTransMask          String\n\
    \      26  RuleSet                Integer     Meter attribute\n      27  ToOctets\
    \               Integer     Source-to-Dest counters\n      28  ToPDUs        \
    \         Integer\n      29  FromOctets             Integer     Dest-to-Source\
    \ counters\n      30  FromPDUs               Integer\n      31  FirstTime    \
    \          Timestamp   Activity times\n      32  LastActiveTime         Timestamp\n\
    \      33  SourceSubscriberID     String      Session attributes\n      34  DestSubscriberID\
    \       String\n      35  SessionID              String\n      36  SourceClass\
    \            Integer     'Computed' attributes\n      37  DestClass          \
    \    Integer\n      38  FlowClass              Integer\n      39  SourceKind \
    \            Integer\n      40  DestKind               Integer\n      41  FlowKind\
    \               Integer\n      50  MatchingStoD           Integer     PME variable\n\
    \      51  v1                     Integer     Meter Variables\n      52  v2  \
    \                   Integer\n      53  v3                     Integer\n      54\
    \  v4                     Integer\n      55  v5                     Integer\n\
    \      65\n      ..  'Extended' attributes (to be defined by the RTFM working\
    \ group)\n     127\n"
- title: '9.4  Appendix D: List of Meter Control Variables'
  contents:
  - "9.4  Appendix D: List of Meter Control Variables\n      Meter variables:\n  \
    \       Flood Mark                    Percentage\n         Inactivity Timeout\
    \ (seconds)  Integer\n      'per task' variables:\n         Current Rule Set Number\
    \       Integer\n         Standby Rule Set Number       Integer\n         High\
    \ Water Mark               Percentage\n      'per reader' variables:\n       \
    \  Reader Last Time              Timestamp\n"
- title: '9.5  Appendix E: Changes Introduced Since RFC 2063'
  contents:
  - "9.5  Appendix E: Changes Introduced Since RFC 2063\n   The first version of the\
    \ Traffic Flow Measurement Architecture was\n   published as RFC 2063 in January\
    \ 1997.  The most significant changes\n   made since then are summarised below.\n\
    \     - A Traffic Meter can now run multiple rule sets concurrently.\n       This\
    \ makes a meter much more useful, and required only minimal\n       changes to\
    \ the architecture.\n     - 'NoMatch' replaces 'Fail' as an action.  This name\
    \ was agreed to\n       at the Working Group 1996 meeting in Montreal; it better\n\
    \       indicates that although a particular match has failed, it may be\n   \
    \    tried again with the packet's addresses reversed.\n     - The 'MatchingStoD'\
    \ attribute has been added.  This is a Packet\n       Matching Engine (PME) attribute\
    \ indicating that addresses are\n       being matched in StoD (i.e. 'wire') order.\
    \  It can be used to\n       perform different actions when the match is retried,\
    \ thereby\n       simplifying some kinds of rule sets.  It was discussed and agreed\n\
    \       to at the San Jose meeting in 1996.\n     - Computed attributes (Class\
    \ and Kind) may now be tested within a\n       rule set.  This lifts an unneccessary\
    \ earlier restriction.\n     - The list of attribute numbers has been extended\
    \ to define ranges\n       for 'basic' attributes (in this document) and 'extended'\n\
    \       attributes (currently being developed by the RTFM Working Group).\n  \
    \   - The 'Security Considerations' section has been completely\n       rewritten.\
    \  It provides an evaluation of traffic measurement\n       security risks and\
    \ their countermeasures.\n"
- title: 10  Acknowledgments
  contents:
  - "10  Acknowledgments\n       An initial draft of this document was produced under\
    \ the auspices\n       of the IETF's Internet Accounting Working Group with assistance\n\
    \       from SNMP, RMON and SAAG working groups.  Particular thanks are\n    \
    \   due to Stephen Stibler (IBM Research) for his patient and careful\n      \
    \ comments during the preparation of this memo.\n"
- title: 11  References
  contents:
  - "11  References\n   [802-3]    IEEE 802.3/ISO 8802-3 Information Processing Systems\
    \ -\n              Local Area Networks - Part 3: Carrier sense multiple\n    \
    \          access with collision detection (CSMA/CD) access method\n         \
    \     and physical layer specifications, 2nd edition, September\n            \
    \  21, 1990.\n   [ACT-BKG]  Mills, C., Hirsch, G. and G. Ruth, \"Internet Accounting\n\
    \              Background\", RFC 1272, November 1991.\n   [IANA-RFC] Alvestrand,\
    \ H. and T. Narten, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 2434,\n              October 1998.\n   [IPPM-FRM]\
    \ Paxson, V., Almes, G., Mahdavi, J. and M. Mathis,\n              \"Framework\
    \ for IP Performance Metrics\", RFC 2330, May\n              1998.\n   [OSI-ACT]\
    \  International Standards Organisation (ISO), \"Management\n              Framework\"\
    , Part 4 of Information Processing Systems Open\n              Systems Interconnection\
    \ Basic Reference Model, ISO 7498-4,\n              1994.\n   [RTFM-MIB] Brownlee,\
    \ N., \"Traffic Flow Measurement: Meter MIB\", RFC\n              2720, October\
    \ 1999.\n   [RTFM-NEW] Handelman, S., Stibler, S., Brownlee, N. and G. Ruth,\n\
    \              \"RTFM: New Attributes for Traffic Flow Measurment\", RFC\n   \
    \           2724, October 1999.\n   [RTFM-SRL] Brownlee, N., \"SRL: A Language\
    \ for Describing Traffic\n              Flows and Specifying Actions for Flow\
    \ Groups\", RFC 2723,\n              October 1999.\n"
- title: 12  Authors' Addresses
  contents:
  - "12  Authors' Addresses\n   Nevil Brownlee\n   Information Technology Systems\
    \ & Services\n   The University of Auckland\n   Private Bag 92-019\n   Auckland,\
    \ New Zealand\n   Phone: +64 9 373 7599 x8941\n   EMail: n.brownlee@auckland.ac.nz\n\
    \   Cyndi Mills\n   GTE Laboratories, Inc\n   40 Sylvan Rd.\n   Waltham, MA 02451,\
    \ U.S.A.\n   Phone: +1 781 466 4278\n   EMail: cmills@gte.com\n   Greg Ruth\n\
    \   GTE Internetworking\n   3 Van de Graaff Drive\n   P.O. Box 3073\n   Burlington,\
    \ MA 01803, U.S.A.\n   Phone: +1 781 262 4831\n   EMail: gruth@bbn.com\n"
- title: 13  Full Copyright Statement
  contents:
  - "13  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
