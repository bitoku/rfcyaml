- title: __initial_text__
  contents:
  - '                  Internet Relay Chat: Client Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: 'IESG NOTE:'
  contents:
  - "IESG NOTE:\n   The IRC protocol itself enables several possibilities of transferring\n\
    \   data between clients, and just like with other transfer mechanisms\n   like\
    \ email, the receiver of the data has to be careful about how the\n   data is\
    \ handled. For more information on security issues with the IRC\n   protocol,\
    \ see for example http://www.irchelp.org/irchelp/security/.\n"
- title: Abstract
  contents:
  - "Abstract\n   The IRC (Internet Relay Chat) protocol is for use with text based\n\
    \   conferencing; the simplest client being any socket program capable of\n  \
    \ connecting to the server.\n   This document defines the Client Protocol, and\
    \ assumes that the\n   reader is familiar with the IRC Architecture [IRC-ARCH].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Labels .....................................................\
    \   3\n      1.1  Servers ................................................   3\n\
    \      1.2  Clients ................................................   3\n   \
    \      1.2.1  Users .............................................   4\n      \
    \      1.2.1.1  Operators ....................................   4\n         1.2.2\
    \  Services ..........................................   4\n      1.3  Channels\
    \ ...............................................   4\n   2.  The IRC Client Specification\
    \ ...............................   5\n      2.1  Overview ...............................................\
    \   5\n      2.2  Character codes ........................................   5\n\
    \      2.3  Messages ...............................................   5\n   \
    \      2.3.1  Message format in Augmented BNF ...................   6\n      2.4\
    \  Numeric replies ........................................   8\n      2.5  Wildcard\
    \ expressions ...................................   9\n   3.  Message Details\
    \ ............................................   9\n      3.1  Connection Registration\
    \ ................................  10\n         3.1.1  Password message ..................................\
    \  10\n         3.1.2  Nick message ......................................  10\n\
    \         3.1.3  User message ......................................  11\n   \
    \      3.1.4  Oper message ......................................  12\n      \
    \   3.1.5  User mode message .................................  12\n         3.1.6\
    \  Service message ...................................  13\n         3.1.7  Quit\
    \ ..............................................  14\n         3.1.8  Squit .............................................\
    \  15\n      3.2  Channel operations .....................................  15\n\
    \         3.2.1  Join message ......................................  16\n   \
    \      3.2.2  Part message ......................................  17\n      \
    \   3.2.3  Channel mode message ..............................  18\n         3.2.4\
    \  Topic message .....................................  19\n         3.2.5  Names\
    \ message .....................................  20\n         3.2.6  List message\
    \ ......................................  21\n         3.2.7  Invite message ....................................\
    \  21\n         3.2.8  Kick command ......................................  22\n\
    \      3.3  Sending messages .......................................  23\n   \
    \      3.3.1  Private messages ..................................  23\n      \
    \   3.3.2  Notice ............................................  24\n      3.4\
    \  Server queries and commands ............................  25\n         3.4.1\
    \  Motd message ......................................  25\n         3.4.2  Lusers\
    \ message ....................................  25\n         3.4.3  Version message\
    \ ...................................  26\n         3.4.4  Stats message .....................................\
    \  26\n         3.4.5  Links message .....................................  27\n\
    \         3.4.6  Time message ......................................  28\n   \
    \      3.4.7  Connect message ...................................  28\n      \
    \   3.4.8  Trace message .....................................  29\n         3.4.9\
    \  Admin command .....................................  30\n         3.4.10 Info\
    \ command ......................................  31\n      3.5  Service Query\
    \ and Commands .............................  31\n         3.5.1  Servlist message\
    \ ..................................  31\n         3.5.2  Squery ............................................\
    \  32\n      3.6  User based queries .....................................  32\n\
    \         3.6.1  Who query .........................................  32\n   \
    \      3.6.2  Whois query .......................................  33\n      \
    \   3.6.3  Whowas ............................................  34\n      3.7\
    \  Miscellaneous messages .................................  34\n         3.7.1\
    \  Kill message ......................................  35\n         3.7.2  Ping\
    \ message ......................................  36\n         3.7.3  Pong message\
    \ ......................................  37\n         3.7.4  Error .............................................\
    \  37\n   4.  Optional features ..........................................  38\n\
    \      4.1  Away ...................................................  38\n   \
    \   4.2  Rehash message .........................................  39\n      4.3\
    \  Die message ............................................  39\n      4.4  Restart\
    \ message ........................................  40\n      4.5  Summon message\
    \ .........................................  40\n      4.6  Users ..................................................\
    \  41\n      4.7  Operwall message .......................................  41\n\
    \      4.8  Userhost message .......................................  42\n   \
    \   4.9  Ison message ...........................................  42\n   5. \
    \ Replies ....................................................  43\n      5.1\
    \  Command responses ......................................  43\n      5.2  Error\
    \ Replies ..........................................  53\n      5.3  Reserved\
    \ numerics ......................................  59\n   6.  Current implementations\
    \ ....................................  60\n   7.  Current problems ...........................................\
    \  60\n      7.1  Nicknames ..............................................  60\n\
    \      7.2  Limitation of wildcards ................................  61\n   \
    \   7.3  Security considerations ................................  61\n   8. \
    \ Current support and availability ...........................  61\n   9.  Acknowledgements\
    \ ...........................................  61\n   10.  References ................................................\
    \  62\n   11.  Author's Address ..........................................  62\n\
    \   12.  Full Copyright Statement ..................................  63\n"
- title: 1. Labels
  contents:
  - "1. Labels\n   This section defines the identifiers used for the various components\n\
    \   of the IRC protocol.\n"
- title: 1.1 Servers
  contents:
  - "1.1 Servers\n   Servers are uniquely identified by their name, which has a maximum\n\
    \   length of sixty three (63) characters.  See the protocol grammar\n   rules\
    \ (section 2.3.1) for what may and may not be used in a server\n   name.\n"
- title: 1.2 Clients
  contents:
  - "1.2 Clients\n   For each client all servers MUST have the following information:\
    \ a\n   netwide unique identifier (whose format depends on the type of\n   client)\
    \ and the server which introduced the client.\n"
- title: 1.2.1 Users
  contents:
  - "1.2.1 Users\n   Each user is distinguished from other users by a unique nickname\n\
    \   having a maximum length of nine (9) characters.  See the protocol\n   grammar\
    \ rules (section 2.3.1) for what may and may not be used in a\n   nickname.\n\
    \   While the maximum length is limited to nine characters, clients\n   SHOULD\
    \ accept longer strings as they may become used in future\n   evolutions of the\
    \ protocol.\n"
- title: 1.2.1.1 Operators
  contents:
  - "1.2.1.1 Operators\n   To allow a reasonable amount of order to be kept within\
    \ the IRC\n   network, a special class of users (operators) is allowed to perform\n\
    \   general maintenance functions on the network.  Although the powers\n   granted\
    \ to an operator can be considered as 'dangerous', they are\n   nonetheless often\
    \ necessary.  Operators SHOULD be able to perform\n   basic network tasks such\
    \ as disconnecting and reconnecting servers as\n   needed.  In recognition of\
    \ this need, the protocol discussed herein\n   provides for operators only to\
    \ be able to perform such functions.\n   See sections 3.1.8 (SQUIT) and 3.4.7\
    \ (CONNECT).\n   A more controversial power of operators is the ability to remove\
    \ a\n   user from the connected network by 'force', i.e., operators are able\n\
    \   to close the connection between any client and server.  The\n   justification\
    \ for this is very delicate since its abuse is both\n   destructive and annoying,\
    \ and its benefits close to inexistent.  For\n   further details on this type\
    \ of action, see section 3.7.1 (KILL).\n"
- title: 1.2.2 Services
  contents:
  - "1.2.2 Services\n   Each service is distinguished from other services by a service\
    \ name\n   composed of a nickname and a server name.  As for users, the nickname\n\
    \   has a maximum length of nine (9) characters.  See the protocol\n   grammar\
    \ rules (section 2.3.1) for what may and may not be used in a\n   nickname.\n"
- title: 1.3 Channels
  contents:
  - "1.3 Channels\n   Channels names are strings (beginning with a '&', '#', '+' or\
    \ '!'\n   character) of length up to fifty (50) characters.  Apart from the\n\
    \   requirement that the first character is either '&', '#', '+' or '!',\n   the\
    \ only restriction on a channel name is that it SHALL NOT contain\n   any spaces\
    \ (' '), a control G (^G or ASCII 7), a comma (',').  Space\n   is used as parameter\
    \ separator and command is used as a list item\n   separator by the protocol).\
    \  A colon (':') can also be used as a\n   delimiter for the channel mask.  Channel\
    \ names are case insensitive.\n   See the protocol grammar rules (section 2.3.1)\
    \ for the exact syntax\n   of a channel name.\n   Each prefix characterizes a\
    \ different channel type.  The definition\n   of the channel types is not relevant\
    \ to the client-server protocol\n   and thus it is beyond the scope of this document.\
    \  More details can\n   be found in \"Internet Relay Chat: Channel Management\"\
    \ [IRC-CHAN].\n"
- title: 2. The IRC Client Specification
  contents:
  - '2. The IRC Client Specification

    '
- title: 2.1 Overview
  contents:
  - "2.1 Overview\n   The protocol as described herein is for use only with client\
    \ to\n   server connections when the client registers as a user.\n"
- title: 2.2 Character codes
  contents:
  - "2.2 Character codes\n   No specific character set is specified. The protocol\
    \ is based on a\n   set of codes which are composed of eight (8) bits, making\
    \ up an\n   octet.  Each message may be composed of any number of these octets;\n\
    \   however, some octet values are used for control codes, which act as\n   message\
    \ delimiters.\n   Regardless of being an 8-bit protocol, the delimiters and keywords\n\
    \   are such that protocol is mostly usable from US-ASCII terminal and a\n   telnet\
    \ connection.\n   Because of IRC's Scandinavian origin, the characters {}|^ are\n\
    \   considered to be the lower case equivalents of the characters []\\~,\n   respectively.\
    \ This is a critical issue when determining the\n   equivalence of two nicknames\
    \ or channel names.\n"
- title: 2.3 Messages
  contents:
  - "2.3 Messages\n   Servers and clients send each other messages, which may or may\
    \ not\n   generate a reply.  If the message contains a valid command, as\n   described\
    \ in later sections, the client should expect a reply as\n   specified but it\
    \ is not advised to wait forever for the reply; client\n   to server and server\
    \ to server communication is essentially\n   asynchronous by nature.\n   Each\
    \ IRC message may consist of up to three main parts: the prefix\n   (OPTIONAL),\
    \ the command, and the command parameters (maximum of\n   fifteen (15)).  The\
    \ prefix, command, and all parameters are separated\n   by one ASCII space character\
    \ (0x20) each.\n   The presence of a prefix is indicated with a single leading\
    \ ASCII\n   colon character (':', 0x3b), which MUST be the first character of\
    \ the\n   message itself.  There MUST be NO gap (whitespace) between the colon\n\
    \   and the prefix.  The prefix is used by servers to indicate the true\n   origin\
    \ of the message.  If the prefix is missing from the message, it\n   is assumed\
    \ to have originated from the connection from which it was\n   received from.\
    \  Clients SHOULD NOT use a prefix when sending a\n   message; if they use one,\
    \ the only valid prefix is the registered\n   nickname associated with the client.\n\
    \   The command MUST either be a valid IRC command or a three (3) digit\n   number\
    \ represented in ASCII text.\n   IRC messages are always lines of characters terminated\
    \ with a CR-LF\n   (Carriage Return - Line Feed) pair, and these messages SHALL\
    \ NOT\n   exceed 512 characters in length, counting all characters including\n\
    \   the trailing CR-LF. Thus, there are 510 characters maximum allowed\n   for\
    \ the command and its parameters.  There is no provision for\n   continuation\
    \ of message lines.  See section 6 for more details about\n   current implementations.\n"
- title: 2.3.1 Message format in Augmented BNF
  contents:
  - "2.3.1 Message format in Augmented BNF\n   The protocol messages must be extracted\
    \ from the contiguous stream of\n   octets.  The current solution is to designate\
    \ two characters, CR and\n   LF, as message separators.  Empty messages are silently\
    \ ignored,\n   which permits use of the sequence CR-LF between messages without\n\
    \   extra problems.\n   The extracted message is parsed into the components <prefix>,\n\
    \   <command> and list of parameters (<params>).\n    The Augmented BNF representation\
    \ for this is:\n    message    =  [ \":\" prefix SPACE ] command [ params ] crlf\n\
    \    prefix     =  servername / ( nickname [ [ \"!\" user ] \"@\" host ] )\n \
    \   command    =  1*letter / 3digit\n    params     =  *14( SPACE middle ) [ SPACE\
    \ \":\" trailing ]\n               =/ 14( SPACE middle ) [ SPACE [ \":\" ] trailing\
    \ ]\n    nospcrlfcl =  %x01-09 / %x0B-0C / %x0E-1F / %x21-39 / %x3B-FF\n     \
    \               ; any octet except NUL, CR, LF, \" \" and \":\"\n    middle  \
    \   =  nospcrlfcl *( \":\" / nospcrlfcl )\n    trailing   =  *( \":\" / \" \"\
    \ / nospcrlfcl )\n    SPACE      =  %x20        ; space character\n    crlf  \
    \     =  %x0D %x0A   ; \"carriage return\" \"linefeed\"\n   NOTES:\n      1) After\
    \ extracting the parameter list, all parameters are equal\n         whether matched\
    \ by <middle> or <trailing>. <trailing> is just a\n         syntactic trick to\
    \ allow SPACE within the parameter.\n      2) The NUL (%x00) character is not\
    \ special in message framing, and\n         basically could end up inside a parameter,\
    \ but it would cause\n         extra complexities in normal C string handling.\
    \ Therefore, NUL\n         is not allowed within messages.\n   Most protocol messages\
    \ specify additional semantics and syntax for\n   the extracted parameter strings\
    \ dictated by their position in the\n   list.  For example, many server commands\
    \ will assume that the first\n   parameter after the command is the list of targets,\
    \ which can be\n   described with:\n  target     =  nickname / server\n  msgtarget\
    \  =  msgto *( \",\" msgto )\n  msgto      =  channel / ( user [ \"%\" host ]\
    \ \"@\" servername )\n  msgto      =/ ( user \"%\" host ) / targetmask\n  msgto\
    \      =/ nickname / ( nickname \"!\" user \"@\" host )\n  channel    =  ( \"\
    #\" / \"+\" / ( \"!\" channelid ) / \"&\" ) chanstring\n                [ \":\"\
    \ chanstring ]\n  servername =  hostname\n  host       =  hostname / hostaddr\n\
    \  hostname   =  shortname *( \".\" shortname )\n  shortname  =  ( letter / digit\
    \ ) *( letter / digit / \"-\" )\n                *( letter / digit )\n       \
    \           ; as specified in RFC 1123 [HNAME]\n  hostaddr   =  ip4addr / ip6addr\n\
    \  ip4addr    =  1*3digit \".\" 1*3digit \".\" 1*3digit \".\" 1*3digit\n  ip6addr\
    \    =  1*hexdigit 7( \":\" 1*hexdigit )\n  ip6addr    =/ \"0:0:0:0:0:\" ( \"\
    0\" / \"FFFF\" ) \":\" ip4addr\n  nickname   =  ( letter / special ) *8( letter\
    \ / digit / special / \"-\" )\n  targetmask =  ( \"$\" / \"#\" ) mask\n      \
    \            ; see details on allowed masks in section 3.3.1\n  chanstring = \
    \ %x01-07 / %x08-09 / %x0B-0C / %x0E-1F / %x21-2B\n  chanstring =/ %x2D-39 / %x3B-FF\n\
    \                  ; any octet except NUL, BELL, CR, LF, \" \", \",\" and \":\"\
    \n  channelid  = 5( %x41-5A / digit )   ; 5( A-Z / 0-9 )\n  Other parameter syntaxes\
    \ are:\n  user       =  1*( %x01-09 / %x0B-0C / %x0E-1F / %x21-3F / %x41-FF )\n\
    \                  ; any octet except NUL, CR, LF, \" \" and \"@\"\n  key    \
    \    =  1*23( %x01-05 / %x07-08 / %x0C / %x0E-1F / %x21-7F )\n               \
    \   ; any 7-bit US_ASCII character,\n                  ; except NUL, CR, LF, FF,\
    \ h/v TABs, and \" \"\n  letter     =  %x41-5A / %x61-7A       ; A-Z / a-z\n \
    \ digit      =  %x30-39                 ; 0-9\n  hexdigit   =  digit / \"A\" /\
    \ \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n  special    =  %x5B-60 / %x7B-7D\n \
    \                  ; \"[\", \"]\", \"\\\", \"`\", \"_\", \"^\", \"{\", \"|\",\
    \ \"}\"\n  NOTES:\n      1) The <hostaddr> syntax is given here for the sole purpose\
    \ of\n         indicating the format to follow for IP addresses.  This\n     \
    \    reflects the fact that the only available implementations of\n         this\
    \ protocol uses TCP/IP as underlying network protocol but is\n         not meant\
    \ to prevent other protocols to be used.\n      2) <hostname> has a maximum length\
    \ of 63 characters.  This is a\n         limitation of the protocol as internet\
    \ hostnames (in\n         particular) can be longer.  Such restriction is necessary\n\
    \         because IRC messages are limited to 512 characters in length.\n    \
    \     Clients connecting from a host which name is longer than 63\n         characters\
    \ are registered using the host (numeric) address\n         instead of the host\
    \ name.\n      3) Some parameters used in the following sections of this\n   \
    \      documents are not defined here as there is nothing specific\n         about\
    \ them besides the name that is used for convenience.\n         These parameters\
    \ follow the general syntax defined for\n         <params>.\n"
- title: 2.4 Numeric replies
  contents:
  - "2.4 Numeric replies\n   Most of the messages sent to the server generate a reply\
    \ of some\n   sort.  The most common reply is the numeric reply, used for both\n\
    \   errors and normal replies.  The numeric reply MUST be sent as one\n   message\
    \ consisting of the sender prefix, the three-digit numeric, and\n   the target\
    \ of the reply.  A numeric reply is not allowed to originate\n   from a client.\
    \ In all other respects, a numeric reply is just like a\n   normal message, except\
    \ that the keyword is made up of 3 numeric\n   digits rather than a string of\
    \ letters.  A list of different replies\n   is supplied in section 5 (Replies).\n"
- title: 2.5 Wildcard expressions
  contents:
  - "2.5 Wildcard expressions\n   When wildcards are allowed in a string, it is referred\
    \ as a \"mask\".\n   For string matching purposes, the protocol allows the use\
    \ of two\n   special characters: '?' (%x3F) to match one and only one character,\n\
    \   and '*' (%x2A) to match any number of any characters.  These two\n   characters\
    \ can be escaped using the character '\\' (%x5C).\n   The Augmented BNF syntax\
    \ for this is:\n    mask       =  *( nowild / noesc wildone / noesc wildmany )\n\
    \    wildone    =  %x3F\n    wildmany   =  %x2A\n    nowild     =  %x01-29 / %x2B-3E\
    \ / %x40-FF\n                    ; any octet except NUL, \"*\", \"?\"\n    noesc\
    \      =  %x01-5B / %x5D-FF\n                    ; any octet except NUL and \"\
    \\\"\n    matchone   =  %x01-FF\n                    ; matches wildone\n    matchmany\
    \  =  *matchone\n                    ; matches wildmany\n   Examples:\n   a?c\
    \         ; Matches any string of 3 characters in length starting\n          \
    \     with \"a\" and ending with \"c\"\n   a*c         ; Matches any string of\
    \ at least 2 characters in length\n               starting with \"a\" and ending\
    \ with \"c\"\n"
- title: 3. Message Details
  contents:
  - "3. Message Details\n   On the following pages there are descriptions of each\
    \ message\n   recognized by the IRC server and client.  All commands described\
    \ in\n   this section MUST be implemented by any server for this protocol.\n \
    \  Where the reply ERR_NOSUCHSERVER is returned, it means that the\n   target\
    \ of the message could not be found.  The server MUST NOT send\n   any other replies\
    \ after this error for that command.\n   The server to which a client is connected\
    \ is required to parse the\n   complete message, and return any appropriate errors.\n\
    \   If multiple parameters is presented, then each MUST be checked for\n   validity\
    \ and appropriate responses MUST be sent back to the client.\n   In the case of\
    \ incorrect messages which use parameter lists with\n   comma as an item separator,\
    \ a reply MUST be sent for each item.\n"
- title: 3.1 Connection Registration
  contents:
  - "3.1 Connection Registration\n   The commands described here are used to register\
    \ a connection with an\n   IRC server as a user as well as to correctly disconnect.\n\
    \   A \"PASS\" command is not required for a client connection to be\n   registered,\
    \ but it MUST precede the latter of the NICK/USER\n   combination (for a user\
    \ connection) or the SERVICE command (for a\n   service connection). The RECOMMENDED\
    \ order for a client to register\n   is as follows:\n                        \
    \   1. Pass message\n           2. Nick message                 2. Service message\n\
    \           3. User message\n   Upon success, the client will receive an RPL_WELCOME\
    \ (for users) or\n   RPL_YOURESERVICE (for services) message indicating that the\n\
    \   connection is now registered and known the to the entire IRC network.\n  \
    \ The reply message MUST contain the full client identifier upon which\n   it\
    \ was registered.\n"
- title: 3.1.1 Password message
  contents:
  - "3.1.1 Password message\n      Command: PASS\n   Parameters: <password>\n   The\
    \ PASS command is used to set a 'connection password'.  The\n   optional password\
    \ can and MUST be set before any attempt to register\n   the connection is made.\
    \  Currently this requires that user send a\n   PASS command before sending the\
    \ NICK/USER combination.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS \
    \             ERR_ALREADYREGISTRED\n   Example:\n           PASS secretpasswordhere\n"
- title: 3.1.2 Nick message
  contents:
  - "3.1.2 Nick message\n      Command: NICK\n   Parameters: <nickname>\n   NICK command\
    \ is used to give user a nickname or change the existing\n   one.\n   Numeric\
    \ Replies:\n           ERR_NONICKNAMEGIVEN             ERR_ERRONEUSNICKNAME\n\
    \           ERR_NICKNAMEINUSE               ERR_NICKCOLLISION\n           ERR_UNAVAILRESOURCE\
    \             ERR_RESTRICTED\n   Examples:\n   NICK Wiz                ; Introducing\
    \ new nick \"Wiz\" if session is\n                           still unregistered,\
    \ or user changing his\n                           nickname to \"Wiz\"\n   :WiZ!jto@tolsun.oulu.fi\
    \ NICK Kilroy\n                           ; Server telling that WiZ changed his\n\
    \                           nickname to Kilroy.\n"
- title: 3.1.3 User message
  contents:
  - "3.1.3 User message\n      Command: USER\n   Parameters: <user> <mode> <unused>\
    \ <realname>\n   The USER command is used at the beginning of connection to specify\n\
    \   the username, hostname and realname of a new user.\n   The <mode> parameter\
    \ should be a numeric, and can be used to\n   automatically set user modes when\
    \ registering with the server.  This\n   parameter is a bitmask, with only 2 bits\
    \ having any signification: if\n   the bit 2 is set, the user mode 'w' will be\
    \ set and if the bit 3 is\n   set, the user mode 'i' will be set.  (See Section\
    \ 3.1.5 \"User\n   Modes\").\n   The <realname> may contain space characters.\n\
    \   Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_ALREADYREGISTRED\n\
    \   Example:\n   USER guest 0 * :Ronnie Reagan   ; User registering themselves\
    \ with a\n                                   username of \"guest\" and real name\n\
    \                                   \"Ronnie Reagan\".\n   USER guest 8 * :Ronnie\
    \ Reagan   ; User registering themselves with a\n                            \
    \       username of \"guest\" and real name\n                                \
    \   \"Ronnie Reagan\", and asking to be set\n                                \
    \   invisible.\n"
- title: 3.1.4 Oper message
  contents:
  - "3.1.4 Oper message\n      Command: OPER\n   Parameters: <name> <password>\n \
    \  A normal user uses the OPER command to obtain operator privileges.\n   The\
    \ combination of <name> and <password> are REQUIRED to gain\n   Operator privileges.\
    \  Upon success, the user will receive a MODE\n   message (see section 3.1.5)\
    \ indicating the new user modes.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS\
    \              RPL_YOUREOPER\n           ERR_NOOPERHOST                  ERR_PASSWDMISMATCH\n\
    \   Example:\n   OPER foo bar                    ; Attempt to register as an operator\n\
    \                                   using a username of \"foo\" and \"bar\"\n\
    \                                   as the password.\n"
- title: 3.1.5 User mode message
  contents:
  - "3.1.5 User mode message\n      Command: MODE\n   Parameters: <nickname>\n   \
    \            *( ( \"+\" / \"-\" ) *( \"i\" / \"w\" / \"o\" / \"O\" / \"r\" ) )\n\
    \   The user MODE's are typically changes which affect either how the\n   client\
    \ is seen by others or what 'extra' messages the client is sent.\n   A user MODE\
    \ command MUST only be accepted if both the sender of the\n   message and the\
    \ nickname given as a parameter are both the same.  If\n   no other parameter\
    \ is given, then the server will return the current\n   settings for the nick.\n\
    \      The available modes are as follows:\n           a - user is flagged as\
    \ away;\n           i - marks a users as invisible;\n           w - user receives\
    \ wallops;\n           r - restricted user connection;\n           o - operator\
    \ flag;\n           O - local operator flag;\n           s - marks a user for\
    \ receipt of server notices.\n   Additional modes may be available later on.\n\
    \   The flag 'a' SHALL NOT be toggled by the user using the MODE command,\n  \
    \ instead use of the AWAY command is REQUIRED.\n   If a user attempts to make\
    \ themselves an operator using the \"+o\" or\n   \"+O\" flag, the attempt SHOULD\
    \ be ignored as users could bypass the\n   authentication mechanisms of the OPER\
    \ command.  There is no\n   restriction, however, on anyone `deopping' themselves\
    \ (using \"-o\" or\n   \"-O\").\n   On the other hand, if a user attempts to make\
    \ themselves unrestricted\n   using the \"-r\" flag, the attempt SHOULD be ignored.\
    \  There is no\n   restriction, however, on anyone `deopping' themselves (using\
    \ \"+r\").\n   This flag is typically set by the server upon connection for\n\
    \   administrative reasons.  While the restrictions imposed are left up\n   to\
    \ the implementation, it is typical that a restricted user not be\n   allowed\
    \ to change nicknames, nor make use of the channel operator\n   status on channels.\n\
    \   The flag 's' is obsolete but MAY still be used.\n   Numeric Replies:\n   \
    \        ERR_NEEDMOREPARAMS              ERR_USERSDONTMATCH\n           ERR_UMODEUNKNOWNFLAG\
    \            RPL_UMODEIS\n   Examples:\n   MODE WiZ -w                     ; Command\
    \ by WiZ to turn off\n                                   reception of WALLOPS\
    \ messages.\n   MODE Angel +i                   ; Command from Angel to make herself\n\
    \                                   invisible.\n   MODE WiZ -o               \
    \      ; WiZ 'deopping' (removing operator\n                                 \
    \  status).\n"
- title: 3.1.6 Service message
  contents:
  - "3.1.6 Service message\n      Command: SERVICE\n   Parameters: <nickname> <reserved>\
    \ <distribution> <type>\n               <reserved> <info>\n   The SERVICE command\
    \ to register a new service.  Command parameters\n   specify the service nickname,\
    \ distribution, type and info of a new\n   service.\n   The <distribution> parameter\
    \ is used to specify the visibility of a\n   service.  The service may only be\
    \ known to servers which have a name\n   matching the distribution.  For a matching\
    \ server to have knowledge\n   of the service, the network path between that server\
    \ and the server\n   on which the service is connected MUST be composed of servers\
    \ which\n   names all match the mask.\n   The <type> parameter is currently reserved\
    \ for future usage.\n   Numeric Replies:\n           ERR_ALREADYREGISTRED    \
    \        ERR_NEEDMOREPARAMS\n           ERR_ERRONEUSNICKNAME\n           RPL_YOURESERVICE\
    \                RPL_YOURHOST\n           RPL_MYINFO\n   Example:\n   SERVICE\
    \ dict * *.fr 0 0 :French Dictionary ; Service registering\n                 \
    \                  itself with a name of \"dict\".  This\n                   \
    \                service will only be available on\n                         \
    \          servers which name matches \"*.fr\".\n"
- title: 3.1.7 Quit
  contents:
  - "3.1.7 Quit\n      Command: QUIT\n   Parameters: [ <Quit Message> ]\n   A client\
    \ session is terminated with a quit message.  The server\n   acknowledges this\
    \ by sending an ERROR message to the client.\n   Numeric Replies:\n          \
    \ None.\n   Example:\n   QUIT :Gone to have lunch        ; Preferred message format.\n\
    \   :syrk!kalt@millennium.stealth.net QUIT :Gone to have lunch ; User\n      \
    \                             syrk has quit IRC to have lunch.\n"
- title: 3.1.8 Squit
  contents:
  - "3.1.8 Squit\n      Command: SQUIT\n   Parameters: <server> <comment>\n   The\
    \ SQUIT command is available only to operators.  It is used to\n   disconnect\
    \ server links.  Also servers can generate SQUIT messages on\n   error conditions.\
    \  A SQUIT message may also target a remote server\n   connection.  In this case,\
    \ the SQUIT message will simply be sent to\n   the remote server without affecting\
    \ the servers in between the\n   operator and the remote server.\n   The <comment>\
    \ SHOULD be supplied by all operators who execute a SQUIT\n   for a remote server.\
    \  The server ordered to disconnect its peer\n   generates a WALLOPS message with\
    \ <comment> included, so that other\n   users may be aware of the reason of this\
    \ action.\n   Numeric replies:\n           ERR_NOPRIVILEGES                ERR_NOSUCHSERVER\n\
    \           ERR_NEEDMOREPARAMS\n   Examples:\n   SQUIT tolsun.oulu.fi :Bad Link\
    \ ?  ; Command to uplink of the server\n                                   tolson.oulu.fi\
    \ to terminate its\n                                   connection with comment\
    \ \"Bad Link\".\n   :Trillian SQUIT cm22.eng.umd.edu :Server out of control ;\
    \ Command\n                                   from Trillian from to disconnect\n\
    \                                   \"cm22.eng.umd.edu\" from the net with\n \
    \                                  comment \"Server out of control\".\n"
- title: 3.2 Channel operations
  contents:
  - "3.2 Channel operations\n   This group of messages is concerned with manipulating\
    \ channels, their\n   properties (channel modes), and their contents (typically\
    \ users).\n   For this reason, these messages SHALL NOT be made available to\n\
    \   services.\n   All of these messages are requests which will or will not be\
    \ granted\n   by the server.  The server MUST send a reply informing the user\n\
    \   whether the request was granted, denied or generated an error.  When\n   the\
    \ server grants the request, the message is typically sent back\n   (eventually\
    \ reformatted) to the user with the prefix set to the user\n   itself.\n   The\
    \ rules governing how channels are managed are enforced by the\n   servers.  These\
    \ rules are beyond the scope of this document.  More\n   details are found in\
    \ \"Internet Relay Chat: Channel Management\" [IRC-\n   CHAN].\n"
- title: 3.2.1 Join message
  contents:
  - "3.2.1 Join message\n      Command: JOIN\n   Parameters: ( <channel> *( \",\"\
    \ <channel> ) [ <key> *( \",\" <key> ) ] )\n               / \"0\"\n   The JOIN\
    \ command is used by a user to request to start listening to\n   the specific\
    \ channel.  Servers MUST be able to parse arguments in the\n   form of a list\
    \ of target, but SHOULD NOT use lists when sending JOIN\n   messages to clients.\n\
    \   Once a user has joined a channel, he receives information about\n   all commands\
    \ his server receives affecting the channel.  This\n   includes JOIN, MODE, KICK,\
    \ PART, QUIT and of course PRIVMSG/NOTICE.\n   This allows channel members to\
    \ keep track of the other channel\n   members, as well as channel modes.\n   If\
    \ a JOIN is successful, the user receives a JOIN message as\n   confirmation and\
    \ is then sent the channel's topic (using RPL_TOPIC) and\n   the list of users\
    \ who are on the channel (using RPL_NAMREPLY), which\n   MUST include the user\
    \ joining.\n   Note that this message accepts a special argument (\"0\"), which\
    \ is\n   a special request to leave all channels the user is currently a member\n\
    \   of.  The server will process this message as if the user had sent\n   a PART\
    \ command (See Section 3.2.2) for each channel he is a member\n   of.\n   Numeric\
    \ Replies:\n           ERR_NEEDMOREPARAMS              ERR_BANNEDFROMCHAN\n  \
    \         ERR_INVITEONLYCHAN              ERR_BADCHANNELKEY\n           ERR_CHANNELISFULL\
    \               ERR_BADCHANMASK\n           ERR_NOSUCHCHANNEL               ERR_TOOMANYCHANNELS\n\
    \           ERR_TOOMANYTARGETS              ERR_UNAVAILRESOURCE\n           RPL_TOPIC\n\
    \   Examples:\n   JOIN #foobar                    ; Command to join channel #foobar.\n\
    \   JOIN &foo fubar                 ; Command to join channel &foo using\n   \
    \                                key \"fubar\".\n   JOIN #foo,&bar fubar     \
    \       ; Command to join channel #foo using\n                               \
    \    key \"fubar\" and &bar using no key.\n   JOIN #foo,#bar fubar,foobar    \
    \ ; Command to join channel #foo using\n                                   key\
    \ \"fubar\", and channel #bar using\n                                   key \"\
    foobar\".\n   JOIN #foo,#bar                  ; Command to join channels #foo\
    \ and\n                                   #bar.\n   JOIN 0                   \
    \       ; Leave all currently joined\n                                   channels.\n\
    \   :WiZ!jto@tolsun.oulu.fi JOIN #Twilight_zone ; JOIN message from WiZ\n    \
    \                               on channel #Twilight_zone\n"
- title: 3.2.2 Part message
  contents:
  - "3.2.2 Part message\n      Command: PART\n   Parameters: <channel> *( \",\" <channel>\
    \ ) [ <Part Message> ]\n   The PART command causes the user sending the message\
    \ to be removed\n   from the list of active members for all given channels listed\
    \ in the\n   parameter string.  If a \"Part Message\" is given, this will be sent\n\
    \   instead of the default message, the nickname.  This request is always\n  \
    \ granted by the server.\n   Servers MUST be able to parse arguments in the form\
    \ of a list of\n   target, but SHOULD NOT use lists when sending PART messages\
    \ to\n   clients.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS        \
    \      ERR_NOSUCHCHANNEL\n           ERR_NOTONCHANNEL\n   Examples:\n   PART #twilight_zone\
    \             ; Command to leave channel\n                                   \"\
    #twilight_zone\"\n   PART #oz-ops,&group5            ; Command to leave both channels\n\
    \                                   \"&group5\" and \"#oz-ops\".\n   :WiZ!jto@tolsun.oulu.fi\
    \ PART #playzone :I lost\n                                   ; User WiZ leaving\
    \ channel\n                                   \"#playzone\" with the message \"\
    I\n                                   lost\".\n"
- title: 3.2.3 Channel mode message
  contents:
  - "3.2.3 Channel mode message\n      Command: MODE\n   Parameters: <channel> *(\
    \ ( \"-\" / \"+\" ) *<modes> *<modeparams> )\n   The MODE command is provided\
    \ so that users may query and change the\n   characteristics of a channel.  For\
    \ more details on available modes\n   and their uses, see \"Internet Relay Chat:\
    \ Channel Management\" [IRC-\n   CHAN].  Note that there is a maximum limit of\
    \ three (3) changes per\n   command for modes that take a parameter.\n   Numeric\
    \ Replies:\n           ERR_NEEDMOREPARAMS              ERR_KEYSET\n          \
    \ ERR_NOCHANMODES                 ERR_CHANOPRIVSNEEDED\n           ERR_USERNOTINCHANNEL\
    \            ERR_UNKNOWNMODE\n           RPL_CHANNELMODEIS\n           RPL_BANLIST\
    \                     RPL_ENDOFBANLIST\n           RPL_EXCEPTLIST            \
    \      RPL_ENDOFEXCEPTLIST\n           RPL_INVITELIST                  RPL_ENDOFINVITELIST\n\
    \           RPL_UNIQOPIS\n   The following examples are given to help understanding\
    \ the syntax of\n   the MODE command, but refer to modes defined in \"Internet\
    \ Relay Chat:\n   Channel Management\" [IRC-CHAN].\n   Examples:\n   MODE #Finnish\
    \ +imI *!*@*.fi     ; Command to make #Finnish channel\n                     \
    \              moderated and 'invite-only' with user\n                       \
    \            with a hostname matching *.fi\n                                 \
    \  automatically invited.\n   MODE #Finnish +o Kilroy         ; Command to give\
    \ 'chanop' privileges\n                                   to Kilroy on channel\
    \ #Finnish.\n   MODE #Finnish +v Wiz            ; Command to allow WiZ to speak\
    \ on\n                                   #Finnish.\n   MODE #Fins -s         \
    \          ; Command to remove 'secret' flag\n                               \
    \    from channel #Fins.\n   MODE #42 +k oulu                ; Command to set\
    \ the channel key to\n                                   \"oulu\".\n   MODE #42\
    \ -k oulu                ; Command to remove the \"oulu\"\n                  \
    \                 channel key on channel \"#42\".\n   MODE #eu-opers +l 10   \
    \         ; Command to set the limit for the\n                               \
    \    number of users on channel\n                                   \"#eu-opers\"\
    \ to 10.\n   :WiZ!jto@tolsun.oulu.fi MODE #eu-opers -l\n                     \
    \              ; User \"WiZ\" removing the limit for\n                       \
    \            the number of users on channel \"#eu-\n                         \
    \          opers\".\n   MODE &oulu +b                   ; Command to list ban\
    \ masks set for\n                                   the channel \"&oulu\".\n \
    \  MODE &oulu +b *!*@*             ; Command to prevent all users from\n     \
    \                              joining.\n   MODE &oulu +b *!*@*.edu +e *!*@*.bu.edu\n\
    \                                   ; Command to prevent any user from a\n   \
    \                                hostname matching *.edu from joining,\n     \
    \                              except if matching *.bu.edu\n   MODE #bu +be *!*@*.edu\
    \ *!*@*.bu.edu\n                                   ; Comment to prevent any user\
    \ from a\n                                   hostname matching *.edu from joining,\n\
    \                                   except if matching *.bu.edu\n   MODE #meditation\
    \ e              ; Command to list exception masks set\n                     \
    \              for the channel \"#meditation\".\n   MODE #meditation I       \
    \       ; Command to list invitations masks\n                                \
    \   set for the channel \"#meditation\".\n   MODE !12345ircd O               ;\
    \ Command to ask who the channel\n                                   creator for\
    \ \"!12345ircd\" is\n"
- title: 3.2.4 Topic message
  contents:
  - "3.2.4 Topic message\n      Command: TOPIC\n   Parameters: <channel> [ <topic>\
    \ ]\n   The TOPIC command is used to change or view the topic of a channel.\n\
    \   The topic for channel <channel> is returned if there is no <topic>\n   given.\
    \  If the <topic> parameter is present, the topic for that\n   channel will be\
    \ changed, if this action is allowed for the user\n   requesting it.  If the <topic>\
    \ parameter is an empty string, the\n   topic for that channel will be removed.\n\
    \   Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_NOTONCHANNEL\n\
    \           RPL_NOTOPIC                     RPL_TOPIC\n           ERR_CHANOPRIVSNEEDED\
    \            ERR_NOCHANMODES\n   Examples:\n   :WiZ!jto@tolsun.oulu.fi TOPIC #test\
    \ :New topic ; User Wiz setting the\n                                   topic.\n\
    \   TOPIC #test :another topic      ; Command to set the topic on #test\n    \
    \                               to \"another topic\".\n   TOPIC #test :      \
    \             ; Command to clear the topic on\n                              \
    \     #test.\n   TOPIC #test                     ; Command to check the topic\
    \ for\n                                   #test.\n"
- title: 3.2.5 Names message
  contents:
  - "3.2.5 Names message\n      Command: NAMES\n   Parameters: [ <channel> *( \",\"\
    \ <channel> ) [ <target> ] ]\n   By using the NAMES command, a user can list all\
    \ nicknames that are\n   visible to him. For more details on what is visible and\
    \ what is not,\n   see \"Internet Relay Chat: Channel Management\" [IRC-CHAN].\
    \  The\n   <channel> parameter specifies which channel(s) to return information\n\
    \   about.  There is no error reply for bad channel names.\n   If no <channel>\
    \ parameter is given, a list of all channels and their\n   occupants is returned.\
    \  At the end of this list, a list of users who\n   are visible but either not\
    \ on any channel or not on a visible channel\n   are listed as being on `channel'\
    \ \"*\".\n   If the <target> parameter is specified, the request is forwarded\
    \ to\n   that server which will generate the reply.\n   Wildcards are allowed\
    \ in the <target> parameter.\n   Numerics:\n           ERR_TOOMANYMATCHES    \
    \          ERR_NOSUCHSERVER\n           RPL_NAMREPLY                    RPL_ENDOFNAMES\n\
    \   Examples:\n   NAMES #twilight_zone,#42        ; Command to list visible users\
    \ on\n                                   #twilight_zone and #42\n   NAMES    \
    \                       ; Command to list all visible\n                      \
    \             channels and users\n"
- title: 3.2.6 List message
  contents:
  - "3.2.6 List message\n      Command: LIST\n   Parameters: [ <channel> *( \",\"\
    \ <channel> ) [ <target> ] ]\n   The list command is used to list channels and\
    \ their topics.  If the\n   <channel> parameter is used, only the status of that\
    \ channel is\n   displayed.\n   If the <target> parameter is specified, the request\
    \ is forwarded to\n   that server which will generate the reply.\n   Wildcards\
    \ are allowed in the <target> parameter.\n   Numeric Replies:\n           ERR_TOOMANYMATCHES\
    \              ERR_NOSUCHSERVER\n           RPL_LIST                        RPL_LISTEND\n\
    \   Examples:\n   LIST                            ; Command to list all channels.\n\
    \   LIST #twilight_zone,#42         ; Command to list channels\n             \
    \                      #twilight_zone and #42\n"
- title: 3.2.7 Invite message
  contents:
  - "3.2.7 Invite message\n      Command: INVITE\n   Parameters: <nickname> <channel>\n\
    \   The INVITE command is used to invite a user to a channel.  The\n   parameter\
    \ <nickname> is the nickname of the person to be invited to\n   the target channel\
    \ <channel>.  There is no requirement that the\n   channel the target user is\
    \ being invited to must exist or be a valid\n   channel.  However, if the channel\
    \ exists, only members of the channel\n   are allowed to invite other users. \
    \ When the channel has invite-only\n   flag set, only channel operators may issue\
    \ INVITE command.\n   Only the user inviting and the user being invited will receive\n\
    \   notification of the invitation.  Other channel members are not\n   notified.\
    \  (This is unlike the MODE changes, and is occasionally the\n   source of trouble\
    \ for users.)\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS            \
    \  ERR_NOSUCHNICK\n           ERR_NOTONCHANNEL                ERR_USERONCHANNEL\n\
    \           ERR_CHANOPRIVSNEEDED\n           RPL_INVITING                    RPL_AWAY\n\
    \   Examples:\n   :Angel!wings@irc.org INVITE Wiz #Dust\n                    \
    \               ; Message to WiZ when he has been\n                          \
    \         invited by user Angel to channel\n                                 \
    \  #Dust\n   INVITE Wiz #Twilight_Zone       ; Command to invite WiZ to\n    \
    \                               #Twilight_zone\n"
- title: 3.2.8 Kick command
  contents:
  - "3.2.8 Kick command\n      Command: KICK\n   Parameters: <channel> *( \",\" <channel>\
    \ ) <user> *( \",\" <user> )\n               [<comment>]\n   The KICK command\
    \ can be used to request the forced removal of a user\n   from a channel.  It\
    \ causes the <user> to PART from the <channel> by\n   force.  For the message\
    \ to be syntactically correct, there MUST be\n   either one channel parameter\
    \ and multiple user parameter, or as many\n   channel parameters as there are\
    \ user parameters.  If a \"comment\" is\n   given, this will be sent instead of\
    \ the default message, the nickname\n   of the user issuing the KICK.\n   The\
    \ server MUST NOT send KICK messages with multiple channels or\n   users to clients.\
    \  This is necessarily to maintain backward\n   compatibility with old client\
    \ software.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_NOSUCHCHANNEL\n\
    \           ERR_BADCHANMASK                 ERR_CHANOPRIVSNEEDED\n           ERR_USERNOTINCHANNEL\
    \            ERR_NOTONCHANNEL\n   Examples:\n   KICK &Melbourne Matthew      \
    \   ; Command to kick Matthew from\n                                   &Melbourne\n\
    \   KICK #Finnish John :Speaking English\n                                   ;\
    \ Command to kick John from #Finnish\n                                   using\
    \ \"Speaking English\" as the\n                                   reason (comment).\n\
    \   :WiZ!jto@tolsun.oulu.fi KICK #Finnish John\n                             \
    \      ; KICK message on channel #Finnish\n                                  \
    \ from WiZ to remove John from channel\n"
- title: 3.3 Sending messages
  contents:
  - "3.3 Sending messages\n   The main purpose of the IRC protocol is to provide a\
    \ base for clients\n   to communicate with each other.  PRIVMSG, NOTICE and SQUERY\n\
    \   (described in Section 3.5 on Service Query and Commands) are the only\n  \
    \ messages available which actually perform delivery of a text message\n   from\
    \ one client to another - the rest just make it possible and try\n   to ensure\
    \ it happens in a reliable and structured manner.\n"
- title: 3.3.1 Private messages
  contents:
  - "3.3.1 Private messages\n      Command: PRIVMSG\n   Parameters: <msgtarget> <text\
    \ to be sent>\n   PRIVMSG is used to send private messages between users, as well\
    \ as to\n   send messages to channels.  <msgtarget> is usually the nickname of\n\
    \   the recipient of the message, or a channel name.\n   The <msgtarget> parameter\
    \ may also be a host mask (#<mask>) or server\n   mask ($<mask>).  In both cases\
    \ the server will only send the PRIVMSG\n   to those who have a server or host\
    \ matching the mask.  The mask MUST\n   have at least 1 (one) \".\" in it and\
    \ no wildcards following the last\n   \".\".  This requirement exists to prevent\
    \ people sending messages to\n   \"#*\" or \"$*\", which would broadcast to all\
    \ users.  Wildcards are the\n   '*' and '?'  characters.  This extension to the\
    \ PRIVMSG command is\n   only available to operators.\n   Numeric Replies:\n \
    \          ERR_NORECIPIENT                 ERR_NOTEXTTOSEND\n           ERR_CANNOTSENDTOCHAN\
    \            ERR_NOTOPLEVEL\n           ERR_WILDTOPLEVEL                ERR_TOOMANYTARGETS\n\
    \           ERR_NOSUCHNICK\n           RPL_AWAY\n   Examples:\n   :Angel!wings@irc.org\
    \ PRIVMSG Wiz :Are you receiving this message ?\n                            \
    \       ; Message from Angel to Wiz.\n   PRIVMSG Angel :yes I'm receiving it !\n\
    \                                   ; Command to send a message to Angel.\n  \
    \ PRIVMSG jto@tolsun.oulu.fi :Hello !\n                                   ; Command\
    \ to send a message to a user\n                                   on server tolsun.oulu.fi\
    \ with\n                                   username of \"jto\".\n   PRIVMSG kalt%millennium.stealth.net@irc.stealth.net\
    \ :Are you a frog?\n                                   ; Message to a user on\
    \ server\n                                   irc.stealth.net with username of\n\
    \                                   \"kalt\", and connected from the host\n  \
    \                                 millennium.stealth.net.\n   PRIVMSG kalt%millennium.stealth.net\
    \ :Do you like cheese?\n                                   ; Message to a user\
    \ on the local\n                                   server with username of \"\
    kalt\", and\n                                   connected from the host\n    \
    \                               millennium.stealth.net.\n   PRIVMSG Wiz!jto@tolsun.oulu.fi\
    \ :Hello !\n                                   ; Message to the user with nickname\n\
    \                                   Wiz who is connected from the host\n     \
    \                              tolsun.oulu.fi and has the username\n         \
    \                          \"jto\".\n   PRIVMSG $*.fi :Server tolsun.oulu.fi rebooting.\n\
    \                                   ; Message to everyone on a server\n      \
    \                             which has a name matching *.fi.\n   PRIVMSG #*.edu\
    \ :NSFNet is undergoing work, expect interruptions\n                         \
    \          ; Message to all users who come from\n                            \
    \       a host which has a name matching\n                                   *.edu.\n"
- title: 3.3.2 Notice
  contents:
  - "3.3.2 Notice\n      Command: NOTICE\n   Parameters: <msgtarget> <text>\n   The\
    \ NOTICE command is used similarly to PRIVMSG.  The difference\n   between NOTICE\
    \ and PRIVMSG is that automatic replies MUST NEVER be\n   sent in response to\
    \ a NOTICE message.  This rule applies to servers\n   too - they MUST NOT send\
    \ any error reply back to the client on\n   receipt of a notice.  The object of\
    \ this rule is to avoid loops\n   between clients automatically sending something\
    \ in response to\n   something it received.\n   This command is available to services\
    \ as well as users.\n   This is typically used by services, and automatons (clients\
    \ with\n   either an AI or other interactive program controlling their actions).\n\
    \   See PRIVMSG for more details on replies and examples.\n"
- title: 3.4 Server queries and commands
  contents:
  - "3.4 Server queries and commands\n   The server query group of commands has been\
    \ designed to return\n   information about any server which is connected to the\
    \ network.\n   In these queries, where a parameter appears as <target>, wildcard\n\
    \   masks are usually valid.  For each parameter, however, only one query\n  \
    \ and set of replies is to be generated.  In most cases, if a nickname\n   is\
    \ given, it will mean the server to which the user is connected.\n   These messages\
    \ typically have little value for services, it is\n   therefore RECOMMENDED to\
    \ forbid services from using them.\n"
- title: 3.4.1 Motd message
  contents:
  - "3.4.1 Motd message\n      Command: MOTD\n   Parameters: [ <target> ]\n   The\
    \ MOTD command is used to get the \"Message Of The Day\" of the given\n   server,\
    \ or current server if <target> is omitted.\n   Wildcards are allowed in the <target>\
    \ parameter.\n   Numeric Replies:\n           RPL_MOTDSTART                  \
    \ RPL_MOTD\n           RPL_ENDOFMOTD                   ERR_NOMOTD\n"
- title: 3.4.2 Lusers message
  contents:
  - "3.4.2 Lusers message\n      Command: LUSERS\n   Parameters: [ <mask> [ <target>\
    \ ] ]\n   The LUSERS command is used to get statistics about the size of the\n\
    \   IRC network.  If no parameter is given, the reply will be about the\n   whole\
    \ net.  If a <mask> is specified, then the reply will only\n   concern the part\
    \ of the network formed by the servers matching the\n   mask.  Finally, if the\
    \ <target> parameter is specified, the request\n   is forwarded to that server\
    \ which will generate the reply.\n   Wildcards are allowed in the <target> parameter.\n\
    \   Numeric Replies:\n           RPL_LUSERCLIENT                 RPL_LUSEROP\n\
    \           RPL_LUSERUNKOWN                 RPL_LUSERCHANNELS\n           RPL_LUSERME\
    \                     ERR_NOSUCHSERVER\n"
- title: 3.4.3 Version message
  contents:
  - "3.4.3 Version message\n      Command: VERSION\n   Parameters: [ <target> ]\n\
    \   The VERSION command is used to query the version of the server\n   program.\
    \  An optional parameter <target> is used to query the version\n   of the server\
    \ program which a client is not directly connected to.\n   Wildcards are allowed\
    \ in the <target> parameter.\n   Numeric Replies:\n           ERR_NOSUCHSERVER\
    \                RPL_VERSION\n   Examples:\n   VERSION tolsun.oulu.fi        \
    \  ; Command to check the version of\n                                   server\
    \ \"tolsun.oulu.fi\".\n"
- title: 3.4.4 Stats message
  contents:
  - "3.4.4 Stats message\n      Command: STATS\n   Parameters: [ <query> [ <target>\
    \ ] ]\n   The stats command is used to query statistics of certain server.  If\n\
    \   <query> parameter is omitted, only the end of stats reply is sent\n   back.\n\
    \   A query may be given for any single letter which is only checked by\n   the\
    \ destination server and is otherwise passed on by intermediate\n   servers, ignored\
    \ and unaltered.\n   Wildcards are allowed in the <target> parameter.\n   Except\
    \ for the ones below, the list of valid queries is\n   implementation dependent.\
    \  The standard queries below SHOULD be\n   supported by the server:\n       \
    \     l - returns a list of the server's connections, showing how\n          \
    \      long each connection has been established and the\n                traffic\
    \ over that connection in Kbytes and messages for\n                each direction;\n\
    \            m - returns the usage count for each of commands supported\n    \
    \            by the server; commands for which the usage count is\n          \
    \      zero MAY be omitted;\n            o - returns a list of configured privileged\
    \ users,\n                operators;\n            u - returns a string showing\
    \ how long the server has been\n                up.\n   It is also RECOMMENDED\
    \ that client and server access configuration be\n   published this way.\n   Numeric\
    \ Replies:\n           ERR_NOSUCHSERVER\n           RPL_STATSLINKINFO        \
    \        RPL_STATSUPTIME\n           RPL_STATSCOMMANDS                RPL_STATSOLINE\n\
    \           RPL_ENDOFSTATS\n   Examples:\n   STATS m                         ;\
    \ Command to check the command usage\n                                   for the\
    \ server you are connected to\n"
- title: 3.4.5 Links message
  contents:
  - "3.4.5 Links message\n      Command: LINKS\n   Parameters: [ [ <remote server>\
    \ ] <server mask> ]\n   With LINKS, a user can list all servernames, which are\
    \ known by the\n   server answering the query.  The returned list of servers MUST\
    \ match\n   the mask, or if no mask is given, the full list is returned.\n   If\
    \ <remote server> is given in addition to <server mask>, the LINKS\n   command\
    \ is forwarded to the first server found that matches that name\n   (if any),\
    \ and that server is then required to answer the query.\n   Numeric Replies:\n\
    \           ERR_NOSUCHSERVER\n           RPL_LINKS                        RPL_ENDOFLINKS\n\
    \   Examples:\n   LINKS *.au                      ; Command to list all servers\
    \ which\n                                   have a name that matches *.au;\n \
    \  LINKS *.edu *.bu.edu            ; Command to list servers matching\n      \
    \                             *.bu.edu as seen by the first server\n         \
    \                          matching *.edu.\n"
- title: 3.4.6 Time message
  contents:
  - "3.4.6 Time message\n      Command: TIME\n   Parameters: [ <target> ]\n   The\
    \ time command is used to query local time from the specified\n   server. If the\
    \ <target> parameter is not given, the server receiving\n   the command must reply\
    \ to the query.\n   Wildcards are allowed in the <target> parameter.\n   Numeric\
    \ Replies:\n           ERR_NOSUCHSERVER              RPL_TIME\n   Examples:\n\
    \   TIME tolsun.oulu.fi             ; check the time on the server\n         \
    \                          \"tolson.oulu.fi\"\n"
- title: 3.4.7 Connect message
  contents:
  - "3.4.7 Connect message\n      Command: CONNECT\n   Parameters: <target server>\
    \ <port> [ <remote server> ]\n   The CONNECT command can be used to request a\
    \ server to try to\n   establish a new connection to another server immediately.\
    \  CONNECT is\n   a privileged command and SHOULD be available only to IRC Operators.\n\
    \   If a <remote server> is given and its mask doesn't match name of the\n   parsing\
    \ server, the CONNECT attempt is sent to the first match of\n   remote server.\
    \ Otherwise the CONNECT attempt is made by the server\n   processing the request.\n\
    \   The server receiving a remote CONNECT command SHOULD generate a\n   WALLOPS\
    \ message describing the source and target of the request.\n   Numeric Replies:\n\
    \           ERR_NOSUCHSERVER              ERR_NOPRIVILEGES\n           ERR_NEEDMOREPARAMS\n\
    \   Examples:\n   CONNECT tolsun.oulu.fi 6667     ; Command to attempt to connect\
    \ local\n                                   server to tolsun.oulu.fi on port 6667\n"
- title: 3.4.8 Trace message
  contents:
  - "3.4.8 Trace message\n      Command: TRACE\n   Parameters: [ <target> ]\n   TRACE\
    \ command is used to find the route to specific server and\n   information about\
    \ its peers.  Each server that processes this command\n   MUST report to the sender\
    \ about it.  The replies from pass-through\n   links form a chain, which shows\
    \ route to destination.  After sending\n   this reply back, the query MUST be\
    \ sent to the next server until\n   given <target> server is reached.\n   TRACE\
    \ command is used to find the route to specific server.  Each\n   server that\
    \ processes this message MUST tell the sender about it by\n   sending a reply\
    \ indicating it is a pass-through link, forming a chain\n   of replies.  After\
    \ sending this reply back, it MUST then send the\n   TRACE message to the next\
    \ server until given server is reached.  If\n   the <target> parameter is omitted,\
    \ it is RECOMMENDED that TRACE\n   command sends a message to the sender telling\
    \ which servers the local\n   server has direct connection to.\n   If the destination\
    \ given by <target> is an actual server, the\n   destination server is REQUIRED\
    \ to report all servers, services and\n   operators which are connected to it;\
    \ if the command was issued by an\n   operator, the server MAY also report all\
    \ users which are connected to\n   it.  If the destination given by <target> is\
    \ a nickname, then only a\n   reply for that nickname is given.  If the <target>\
    \ parameter is\n   omitted, it is RECOMMENDED that the TRACE command is parsed\
    \ as\n   targeted to the processing server.\n   Wildcards are allowed in the <target>\
    \ parameter.\n   Numeric Replies:\n           ERR_NOSUCHSERVER\n      If the TRACE\
    \ message is destined for another server, all\n      intermediate servers must\
    \ return a RPL_TRACELINK reply to indicate\n      that the TRACE passed through\
    \ it and where it is going next.\n           RPL_TRACELINK\n      A TRACE reply\
    \ may be composed of any number of the following\n      numeric replies.\n   \
    \        RPL_TRACECONNECTING           RPL_TRACEHANDSHAKE\n           RPL_TRACEUNKNOWN\
    \              RPL_TRACEOPERATOR\n           RPL_TRACEUSER                 RPL_TRACESERVER\n\
    \           RPL_TRACESERVICE              RPL_TRACENEWTYPE\n           RPL_TRACECLASS\
    \                RPL_TRACELOG\n           RPL_TRACEEND\n   Examples:\n   TRACE\
    \ *.oulu.fi                 ; TRACE to a server matching\n                   \
    \                *.oulu.fi\n"
- title: 3.4.9 Admin command
  contents:
  - "3.4.9 Admin command\n      Command: ADMIN\n   Parameters: [ <target> ]\n   The\
    \ admin command is used to find information about the administrator\n   of the\
    \ given server, or current server if <target> parameter is\n   omitted.  Each\
    \ server MUST have the ability to forward ADMIN messages\n   to other servers.\n\
    \   Wildcards are allowed in the <target> parameter.\n   Numeric Replies:\n  \
    \         ERR_NOSUCHSERVER\n           RPL_ADMINME                   RPL_ADMINLOC1\n\
    \           RPL_ADMINLOC2                 RPL_ADMINEMAIL\n   Examples:\n   ADMIN\
    \ tolsun.oulu.fi            ; request an ADMIN reply from\n                  \
    \                 tolsun.oulu.fi\n   ADMIN syrk                      ; ADMIN request\
    \ for the server to\n                                   which the user syrk is\
    \ connected\n"
- title: 3.4.10 Info command
  contents:
  - "3.4.10 Info command\n      Command: INFO\n   Parameters: [ <target> ]\n   The\
    \ INFO command is REQUIRED to return information describing the\n   server: its\
    \ version, when it was compiled, the patchlevel, when it\n   was started, and\
    \ any other miscellaneous information which may be\n   considered to be relevant.\n\
    \   Wildcards are allowed in the <target> parameter.\n   Numeric Replies:\n  \
    \         ERR_NOSUCHSERVER\n           RPL_INFO                      RPL_ENDOFINFO\n\
    \   Examples:\n   INFO csd.bu.edu                 ; request an INFO reply from\n\
    \                                   csd.bu.edu\n   INFO Angel                \
    \      ; request info from the server that\n                                 \
    \  Angel is connected to.\n"
- title: 3.5 Service Query and Commands
  contents:
  - "3.5 Service Query and Commands\n   The service query group of commands has been\
    \ designed to return\n   information about any service which is connected to the\
    \ network.\n"
- title: 3.5.1 Servlist message
  contents:
  - "3.5.1 Servlist message\n      Command: SERVLIST\n   Parameters: [ <mask> [ <type>\
    \ ] ]\n   The SERVLIST command is used to list services currently connected to\n\
    \   the network and visible to the user issuing the command.  The\n   optional\
    \ parameters may be used to restrict the result of the query\n   (to matching\
    \ services names, and services type).\n   Numeric Replies:\n           RPL_SERVLIST\
    \                  RPL_SERVLISTEND\n"
- title: 3.5.2 Squery
  contents:
  - "3.5.2 Squery\n      Command: SQUERY\n   Parameters: <servicename> <text>\n  \
    \ The SQUERY command is used similarly to PRIVMSG.  The only difference\n   is\
    \ that the recipient MUST be a service.  This is the only way for a\n   text message\
    \ to be delivered to a service.\n   See PRIVMSG for more details on replies and\
    \ example.\n   Examples:\n   SQUERY irchelp :HELP privmsg\n                  \
    \                 ; Message to the service with\n                            \
    \       nickname irchelp.\n   SQUERY dict@irc.fr :fr2en blaireau\n           \
    \                        ; Message to the service with name\n                \
    \                   dict@irc.fr.\n"
- title: 3.6 User based queries
  contents:
  - "3.6 User based queries\n   User queries are a group of commands which are primarily\
    \ concerned\n   with finding details on a particular user or group users.  When\
    \ using\n   wildcards with any of these commands, if they match, they will only\n\
    \   return information on users who are 'visible' to you.  The visibility\n  \
    \ of a user is determined as a combination of the user's mode and the\n   common\
    \ set of channels you are both on.\n   Although services SHOULD NOT be using this\
    \ class of message, they are\n   allowed to.\n"
- title: 3.6.1 Who query
  contents:
  - "3.6.1 Who query\n      Command: WHO\n   Parameters: [ <mask> [ \"o\" ] ]\n  \
    \ The WHO command is used by a client to generate a query which returns\n   a\
    \ list of information which 'matches' the <mask> parameter given by\n   the client.\
    \  In the absence of the <mask> parameter, all visible\n   (users who aren't invisible\
    \ (user mode +i) and who don't have a\n   common channel with the requesting client)\
    \ are listed.  The same\n   result can be achieved by using a <mask> of \"0\"\
    \ or any wildcard which\n   will end up matching every visible user.\n   The <mask>\
    \ passed to WHO is matched against users' host, server, real\n   name and nickname\
    \ if the channel <mask> cannot be found.\n   If the \"o\" parameter is passed\
    \ only operators are returned according\n   to the <mask> supplied.\n   Numeric\
    \ Replies:\n           ERR_NOSUCHSERVER\n           RPL_WHOREPLY             \
    \     RPL_ENDOFWHO\n   Examples:\n   WHO *.fi                        ; Command\
    \ to list all users who match\n                                   against \"*.fi\"\
    .\n   WHO jto* o                      ; Command to list all users with a\n   \
    \                                match against \"jto*\" if they are an\n     \
    \                              operator.\n"
- title: 3.6.2 Whois query
  contents:
  - "3.6.2 Whois query\n      Command: WHOIS\n   Parameters: [ <target> ] <mask> *(\
    \ \",\" <mask> )\n   This command is used to query information about particular\
    \ user.\n   The server will answer this command with several numeric messages\n\
    \   indicating different statuses of each user which matches the mask (if\n  \
    \ you are entitled to see them).  If no wildcard is present in the\n   <mask>,\
    \ any information about that nick which you are allowed to see\n   is presented.\n\
    \   If the <target> parameter is specified, it sends the query to a\n   specific\
    \ server.  It is useful if you want to know how long the user\n   in question\
    \ has been idle as only local server (i.e., the server the\n   user is directly\
    \ connected to) knows that information, while\n   everything else is globally\
    \ known.\n   Wildcards are allowed in the <target> parameter.\n   Numeric Replies:\n\
    \           ERR_NOSUCHSERVER              ERR_NONICKNAMEGIVEN\n           RPL_WHOISUSER\
    \                 RPL_WHOISCHANNELS\n           RPL_WHOISCHANNELS            \
    \ RPL_WHOISSERVER\n           RPL_AWAY                      RPL_WHOISOPERATOR\n\
    \           RPL_WHOISIDLE                 ERR_NOSUCHNICK\n           RPL_ENDOFWHOIS\n\
    \   Examples:\n   WHOIS wiz                       ; return available user information\n\
    \                                   about nick WiZ\n   WHOIS eff.org trillian\
    \          ; ask server eff.org for user\n                                   information\
    \  about trillian\n"
- title: 3.6.3 Whowas
  contents:
  - "3.6.3 Whowas\n      Command: WHOWAS\n   Parameters: <nickname> *( \",\" <nickname>\
    \ ) [ <count> [ <target> ] ]\n   Whowas asks for information about a nickname\
    \ which no longer exists.\n   This may either be due to a nickname change or the\
    \ user leaving IRC.\n   In response to this query, the server searches through\
    \ its nickname\n   history, looking for any nicks which are lexically the same\
    \ (no wild\n   card matching here).  The history is searched backward, returning\
    \ the\n   most recent entry first.  If there are multiple entries, up to\n   <count>\
    \ replies will be returned (or all of them if no <count>\n   parameter is given).\
    \  If a non-positive number is passed as being\n   <count>, then a full search\
    \ is done.\n   Wildcards are allowed in the <target> parameter.\n   Numeric Replies:\n\
    \           ERR_NONICKNAMEGIVEN           ERR_WASNOSUCHNICK\n           RPL_WHOWASUSER\
    \                RPL_WHOISSERVER\n           RPL_ENDOFWHOWAS\n   Examples:\n \
    \  WHOWAS Wiz                      ; return all information in the nick\n    \
    \                               history about nick \"WiZ\";\n   WHOWAS Mermaid\
    \ 9                ; return at most, the 9 most recent\n                     \
    \              entries in the nick history for\n                             \
    \      \"Mermaid\";\n   WHOWAS Trillian 1 *.edu         ; return the most recent\
    \ history for\n                                   \"Trillian\" from the first\
    \ server\n                                   found to match \"*.edu\".\n"
- title: 3.7 Miscellaneous messages
  contents:
  - "3.7 Miscellaneous messages\n   Messages in this category do not fit into any\
    \ of the above categories\n   but are nonetheless still a part of and REQUIRED\
    \ by the protocol.\n"
- title: 3.7.1 Kill message
  contents:
  - "3.7.1 Kill message\n      Command: KILL\n   Parameters: <nickname> <comment>\n\
    \   The KILL command is used to cause a client-server connection to be\n   closed\
    \ by the server which has the actual connection.  Servers\n   generate KILL messages\
    \ on nickname collisions.  It MAY also be\n   available available to users who\
    \ have the operator status.\n   Clients which have automatic reconnect algorithms\
    \ effectively make\n   this command useless since the disconnection is only brief.\
    \  It does\n   however break the flow of data and can be used to stop large amounts\n\
    \   of 'flooding' from abusive users or accidents.  Abusive users usually\n  \
    \ don't care as they will reconnect promptly and resume their abusive\n   behaviour.\
    \  To prevent this command from being abused, any user may\n   elect to receive\
    \ KILL messages generated for others to keep an 'eye'\n   on would be trouble\
    \ spots.\n   In an arena where nicknames are REQUIRED to be globally unique at\
    \ all\n   times, KILL messages are sent whenever 'duplicates' are detected\n \
    \  (that is an attempt to register two users with the same nickname) in\n   the\
    \ hope that both of them will disappear and only 1 reappear.\n   When a client\
    \ is removed as the result of a KILL message, the server\n   SHOULD add the nickname\
    \ to the list of unavailable nicknames in an\n   attempt to avoid clients to reuse\
    \ this name immediately which is\n   usually the pattern of abusive behaviour\
    \ often leading to useless\n   \"KILL loops\".  See the \"IRC Server Protocol\"\
    \ document [IRC-SERVER]\n   for more information on this procedure.\n   The comment\
    \ given MUST reflect the actual reason for the KILL.  For\n   server-generated\
    \ KILLs it usually is made up of details concerning\n   the origins of the two\
    \ conflicting nicknames.  For users it is left\n   up to them to provide an adequate\
    \ reason to satisfy others who see\n   it.  To prevent/discourage fake KILLs from\
    \ being generated to hide\n   the identify of the KILLer, the comment also shows\
    \ a 'kill-path'\n   which is updated by each server it passes through, each prepending\n\
    \   its name to the path.\n   Numeric Replies:\n           ERR_NOPRIVILEGES  \
    \            ERR_NEEDMOREPARAMS\n           ERR_NOSUCHNICK                ERR_CANTKILLSERVER\n\
    \   NOTE:\n   It is RECOMMENDED that only Operators be allowed to kill other users\n\
    \   with KILL command.  This command has been the subject of many\n   controversies\
    \ over the years, and along with the above\n   recommendation, it is also widely\
    \ recognized that not even operators\n   should be allowed to kill users on remote\
    \ servers.\n"
- title: 3.7.2 Ping message
  contents:
  - "3.7.2 Ping message\n      Command: PING\n   Parameters: <server1> [ <server2>\
    \ ]\n   The PING command is used to test the presence of an active client or\n\
    \   server at the other end of the connection.  Servers send a PING\n   message\
    \ at regular intervals if no other activity detected coming\n   from a connection.\
    \  If a connection fails to respond to a PING\n   message within a set amount\
    \ of time, that connection is closed.  A\n   PING message MAY be sent even if\
    \ the connection is active.\n   When a PING message is received, the appropriate\
    \ PONG message MUST be\n   sent as reply to <server1> (server which sent the PING\
    \ message out)\n   as soon as possible.  If the <server2> parameter is specified,\
    \ it\n   represents the target of the ping, and the message gets forwarded\n \
    \  there.\n   Numeric Replies:\n           ERR_NOORIGIN                  ERR_NOSUCHSERVER\n\
    \   Examples:\n   PING tolsun.oulu.fi             ; Command to send a PING message\
    \ to\n                                   server\n   PING WiZ tolsun.oulu.fi  \
    \       ; Command from WiZ to send a PING\n                                  \
    \ message to server \"tolsun.oulu.fi\"\n   PING :irc.funet.fi              ; Ping\
    \ message sent by server\n                                   \"irc.funet.fi\"\n"
- title: 3.7.3 Pong message
  contents:
  - "3.7.3 Pong message\n      Command: PONG\n   Parameters: <server> [ <server2>\
    \ ]\n   PONG message is a reply to ping message.  If parameter <server2> is\n\
    \   given, this message MUST be forwarded to given target.  The <server>\n   parameter\
    \ is the name of the entity who has responded to PING message\n   and generated\
    \ this message.\n   Numeric Replies:\n           ERR_NOORIGIN                \
    \  ERR_NOSUCHSERVER\n   Example:\n   PONG csd.bu.edu tolsun.oulu.fi  ; PONG message\
    \ from csd.bu.edu to\n                                   tolsun.oulu.fi\n"
- title: 3.7.4 Error
  contents:
  - "3.7.4 Error\n      Command: ERROR\n   Parameters: <error message>\n   The ERROR\
    \ command is for use by servers when reporting a serious or\n   fatal error to\
    \ its peers.  It may also be sent from one server to\n   another but MUST NOT\
    \ be accepted from any normal unknown clients.\n   Only an ERROR message SHOULD\
    \ be used for reporting errors which occur\n   with a server-to-server link. \
    \ An ERROR message is sent to the server\n   at the other end (which reports it\
    \ to appropriate local users and\n   logs) and to appropriate local users and\
    \ logs.  It is not to be\n   passed onto any other servers by a server if it is\
    \ received from a\n   server.\n   The ERROR message is also used before terminating\
    \ a client\n   connection.\n   When a server sends a received ERROR message to\
    \ its operators, the\n   message SHOULD be encapsulated inside a NOTICE message,\
    \ indicating\n   that the client was not responsible for the error.\n   Numerics:\n\
    \           None.\n   Examples:\n   ERROR :Server *.fi already exists ; ERROR\
    \ message to the other server\n                                   which caused\
    \ this error.\n   NOTICE WiZ :ERROR from csd.bu.edu -- Server *.fi already exists\n\
    \                                   ; Same ERROR message as above but\n      \
    \                             sent to user WiZ on the other server.\n"
- title: 4. Optional features
  contents:
  - "4. Optional features\n   This section describes OPTIONAL messages.  They are\
    \ not required in a\n   working server implementation of the protocol described\
    \ herein.  In\n   the absence of the feature, an error reply message MUST be generated\n\
    \   or an unknown command error.  If the message is destined for another\n   server\
    \ to answer then it MUST be passed on (elementary parsing\n   REQUIRED) The allocated\
    \ numerics for this are listed with the\n   messages below.\n   From this section,\
    \ only the USERHOST and ISON messages are available\n   to services.\n"
- title: 4.1 Away
  contents:
  - "4.1 Away\n      Command: AWAY\n   Parameters: [ <text> ]\n   With the AWAY command,\
    \ clients can set an automatic reply string for\n   any PRIVMSG commands directed\
    \ at them (not to a channel they are on).\n   The server sends an automatic reply\
    \ to the client sending the PRIVMSG\n   command.  The only replying server is\
    \ the one to which the sending\n   client is connected to.\n   The AWAY command\
    \ is used either with one parameter, to set an AWAY\n   message, or with no parameters,\
    \ to remove the AWAY message.\n   Because of its high cost (memory and bandwidth\
    \ wise), the AWAY\n   message SHOULD only be used for client-server communication.\
    \  A\n   server MAY choose to silently ignore AWAY messages received from\n  \
    \ other servers.  To update the away status of a client across servers,\n   the\
    \ user mode 'a' SHOULD be used instead.  (See Section 3.1.5)\n   Numeric Replies:\n\
    \           RPL_UNAWAY                    RPL_NOWAWAY\n   Example:\n   AWAY :Gone\
    \ to lunch.  Back in 5 ; Command to set away message to\n                    \
    \               \"Gone to lunch.  Back in 5\".\n"
- title: 4.2 Rehash message
  contents:
  - "4.2 Rehash message\n      Command: REHASH\n   Parameters: None\n   The rehash\
    \ command is an administrative command which can be used by\n   an operator to\
    \ force the server to re-read and process its\n   configuration file.\n   Numeric\
    \ Replies:\n           RPL_REHASHING                 ERR_NOPRIVILEGES\n   Example:\n\
    \   REHASH                          ; message from user with operator\n      \
    \                             status to server asking it to reread\n         \
    \                          its configuration file.\n"
- title: 4.3 Die message
  contents:
  - "4.3 Die message\n      Command: DIE\n   Parameters: None\n   An operator can\
    \ use the DIE command to shutdown the server.  This\n   message is optional since\
    \ it may be viewed as a risk to allow\n   arbitrary people to connect to a server\
    \ as an operator and execute\n   this command.\n   The DIE command MUST always\
    \ be fully processed by the server to which\n   the sending client is connected\
    \ and MUST NOT be passed onto other\n   connected servers.\n   Numeric Replies:\n\
    \           ERR_NOPRIVILEGES\n   Example:\n   DIE                            \
    \ ; no parameters required.\n"
- title: 4.4 Restart message
  contents:
  - "4.4 Restart message\n      Command: RESTART\n   Parameters: None\n   An operator\
    \ can use the restart command to force the server to\n   restart itself.  This\
    \ message is optional since it may be viewed as a\n   risk to allow arbitrary\
    \ people to connect to a server as an operator\n   and execute this command, causing\
    \ (at least) a disruption to service.\n   The RESTART command MUST always be fully\
    \ processed by the server to\n   which the sending client is connected and MUST\
    \ NOT be passed onto\n   other connected servers.\n   Numeric Replies:\n     \
    \      ERR_NOPRIVILEGES\n   Example:\n   RESTART                         ; no\
    \ parameters required.\n"
- title: 4.5 Summon message
  contents:
  - "4.5 Summon message\n      Command: SUMMON\n   Parameters: <user> [ <target> [\
    \ <channel> ] ]\n   The SUMMON command can be used to give users who are on a\
    \ host\n   running an IRC server a message asking them to please join IRC.  This\n\
    \   message is only sent if the target server (a) has SUMMON enabled, (b)\n  \
    \ the user is logged in and (c) the server process can write to the\n   user's\
    \ tty (or similar).\n   If no <server> parameter is given it tries to summon <user>\
    \ from the\n   server the client is connected to is assumed as the target.\n \
    \  If summon is not enabled in a server, it MUST return the\n   ERR_SUMMONDISABLED\
    \ numeric.\n   Numeric Replies:\n           ERR_NORECIPIENT               ERR_FILEERROR\n\
    \           ERR_NOLOGIN                   ERR_NOSUCHSERVER\n           ERR_SUMMONDISABLED\
    \            RPL_SUMMONING\n   Examples:\n   SUMMON jto                      ;\
    \ summon user jto on the server's\n                                   host\n \
    \  SUMMON jto tolsun.oulu.fi       ; summon user jto on the host which a\n   \
    \                                server named \"tolsun.oulu.fi\" is\n        \
    \                           running.\n"
- title: 4.6 Users
  contents:
  - "4.6 Users\n      Command: USERS\n   Parameters: [ <target> ]\n   The USERS command\
    \ returns a list of users logged into the server in a\n   format similar to the\
    \ UNIX commands who(1), rusers(1) and finger(1).\n   If disabled, the correct\
    \ numeric MUST be returned to indicate this.\n   Because of the security implications\
    \ of such a command, it SHOULD be\n   disabled by default in server implementations.\
    \  Enabling it SHOULD\n   require recompiling the server or some equivalent change\
    \ rather than\n   simply toggling an option and restarting the server.  The procedure\n\
    \   to enable this command SHOULD also include suitable large comments.\n   Numeric\
    \ Replies:\n           ERR_NOSUCHSERVER              ERR_FILEERROR\n         \
    \  RPL_USERSSTART                RPL_USERS\n           RPL_NOUSERS           \
    \        RPL_ENDOFUSERS\n           ERR_USERSDISABLED\n   Disabled Reply:\n  \
    \         ERR_USERSDISABLED\n   Example:\n   USERS eff.org                   ;\
    \ request a list of users logged in\n                                   on server\
    \ eff.org\n"
- title: 4.7 Operwall message
  contents:
  - "4.7 Operwall message\n      Command: WALLOPS\n   Parameters: <Text to be sent>\n\
    \   The WALLOPS command is used to send a message to all currently\n   connected\
    \ users who have set the 'w' user mode for themselves.  (See\n   Section 3.1.5\
    \ \"User modes\").\n   After implementing WALLOPS as a user command it was found\
    \ that it was\n   often and commonly abused as a means of sending a message to\
    \ a lot of\n   people.  Due to this, it is RECOMMENDED that the implementation\
    \ of\n   WALLOPS allows and recognizes only servers as the originators of\n  \
    \ WALLOPS.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS\n   Example:\n\
    \   :csd.bu.edu WALLOPS :Connect '*.uiuc.edu 6667' from Joshua ; WALLOPS\n   \
    \                                message from csd.bu.edu announcing a\n      \
    \                             CONNECT message it received from\n             \
    \                      Joshua and acted upon.\n"
- title: 4.8 Userhost message
  contents:
  - "4.8 Userhost message\n      Command: USERHOST\n   Parameters: <nickname> *( SPACE\
    \ <nickname> )\n   The USERHOST command takes a list of up to 5 nicknames, each\n\
    \   separated by a space character and returns a list of information\n   about\
    \ each nickname that it found.  The returned list has each reply\n   separated\
    \ by a space.\n   Numeric Replies:\n           RPL_USERHOST                  ERR_NEEDMOREPARAMS\n\
    \   Example:\n   USERHOST Wiz Michael syrk       ; USERHOST request for information\
    \ on\n                                   nicks \"Wiz\", \"Michael\", and \"syrk\"\
    \n   :ircd.stealth.net 302 yournick :syrk=+syrk@millennium.stealth.net\n     \
    \                              ; Reply for user syrk\n"
- title: 4.9 Ison message
  contents:
  - "4.9 Ison message\n      Command: ISON\n   Parameters: <nickname> *( SPACE <nickname>\
    \ )\n   The ISON command was implemented to provide a quick and efficient\n  \
    \ means to get a response about whether a given nickname was currently\n   on\
    \ IRC. ISON only takes one (1) type of parameter: a space-separated\n   list of\
    \ nicks.  For each nickname in the list that is present, the\n   server adds that\
    \ to its reply string.  Thus the reply string may\n   return empty (none of the\
    \ given nicks are present), an exact copy of\n   the parameter string (all of\
    \ them present) or any other subset of the\n   set of nicks given in the parameter.\
    \  The only limit on the number of\n   nicks that may be checked is that the combined\
    \ length MUST NOT be too\n   large as to cause the server to chop it off so it\
    \ fits in 512\n   characters.\n   ISON is only processed by the server local to\
    \ the client sending the\n   command and thus not passed onto other servers for\
    \ further\n   processing.\n   Numeric Replies:\n           RPL_ISON          \
    \            ERR_NEEDMOREPARAMS\n   Example:\n   ISON phone trillian WiZ jarlek\
    \ Avalon Angel Monstah syrk\n                                   ; Sample ISON\
    \ request for 7 nicks.\n"
- title: 5. Replies
  contents:
  - "5. Replies\n   The following is a list of numeric replies which are generated\
    \ in\n   response to the commands given above.  Each numeric is given with its\n\
    \   number, name and reply string.\n"
- title: 5.1 Command responses
  contents:
  - "5.1 Command responses\n   Numerics in the range from 001 to 099 are used for\
    \ client-server\n   connections only and should never travel between servers.\
    \  Replies\n   generated in the response to commands are found in the range from\
    \ 200\n   to 399.\n       001    RPL_WELCOME\n              \"Welcome to the Internet\
    \ Relay Network\n               <nick>!<user>@<host>\"\n       002    RPL_YOURHOST\n\
    \              \"Your host is <servername>, running version <ver>\"\n       003\
    \    RPL_CREATED\n              \"This server was created <date>\"\n       004\
    \    RPL_MYINFO\n              \"<servername> <version> <available user modes>\n\
    \               <available channel modes>\"\n         - The server sends Replies\
    \ 001 to 004 to a user upon\n           successful registration.\n       005 \
    \   RPL_BOUNCE\n              \"Try server <server name>, port <port number>\"\
    \n         - Sent by the server to a user to suggest an alternative\n        \
    \   server.  This is often used when the connection is\n           refused because\
    \ the server is already full.\n       302    RPL_USERHOST\n              \":*1<reply>\
    \ *( \" \" <reply> )\"\n         - Reply format used by USERHOST to list replies\
    \ to\n           the query list.  The reply string is composed as\n          \
    \ follows:\n           reply = nickname [ \"*\" ] \"=\" ( \"+\" / \"-\" ) hostname\n\
    \           The '*' indicates whether the client has registered\n           as\
    \ an Operator.  The '-' or '+' characters represent\n           whether the client\
    \ has set an AWAY message or not\n           respectively.\n       303    RPL_ISON\n\
    \              \":*1<nick> *( \" \" <nick> )\"\n         - Reply format used by\
    \ ISON to list replies to the\n           query list.\n       301    RPL_AWAY\n\
    \              \"<nick> :<away message>\"\n       305    RPL_UNAWAY\n        \
    \      \":You are no longer marked as being away\"\n       306    RPL_NOWAWAY\n\
    \              \":You have been marked as being away\"\n         - These replies\
    \ are used with the AWAY command (if\n           allowed).  RPL_AWAY is sent to\
    \ any client sending a\n           PRIVMSG to a client which is away.  RPL_AWAY\
    \ is only\n           sent by the server to which the client is connected.\n \
    \          Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the\n           client\
    \ removes and sets an AWAY message.\n       311    RPL_WHOISUSER\n           \
    \   \"<nick> <user> <host> * :<real name>\"\n       312    RPL_WHOISSERVER\n \
    \             \"<nick> <server> :<server info>\"\n       313    RPL_WHOISOPERATOR\n\
    \              \"<nick> :is an IRC operator\"\n       317    RPL_WHOISIDLE\n \
    \             \"<nick> <integer> :seconds idle\"\n       318    RPL_ENDOFWHOIS\n\
    \              \"<nick> :End of WHOIS list\"\n       319    RPL_WHOISCHANNELS\n\
    \              \"<nick> :*( ( \"@\" / \"+\" ) <channel> \" \" )\"\n         -\
    \ Replies 311 - 313, 317 - 319 are all replies\n           generated in response\
    \ to a WHOIS message.  Given that\n           there are enough parameters present,\
    \ the answering\n           server MUST either formulate a reply out of the above\n\
    \           numerics (if the query nick is found) or return an\n           error\
    \ reply.  The '*' in RPL_WHOISUSER is there as\n           the literal character\
    \ and not as a wild card.  For\n           each reply set, only RPL_WHOISCHANNELS\
    \ may appear\n           more than once (for long lists of channel names).\n \
    \          The '@' and '+' characters next to the channel name\n           indicate\
    \ whether a client is a channel operator or\n           has been granted permission\
    \ to speak on a moderated\n           channel.  The RPL_ENDOFWHOIS reply is used\
    \ to mark\n           the end of processing a WHOIS message.\n       314    RPL_WHOWASUSER\n\
    \              \"<nick> <user> <host> * :<real name>\"\n       369    RPL_ENDOFWHOWAS\n\
    \              \"<nick> :End of WHOWAS\"\n         - When replying to a WHOWAS\
    \ message, a server MUST use\n           the replies RPL_WHOWASUSER, RPL_WHOISSERVER\
    \ or\n           ERR_WASNOSUCHNICK for each nickname in the presented\n      \
    \     list.  At the end of all reply batches, there MUST\n           be RPL_ENDOFWHOWAS\
    \ (even if there was only one reply\n           and it was an error).\n      \
    \ 321    RPL_LISTSTART\n              Obsolete. Not used.\n       322    RPL_LIST\n\
    \              \"<channel> <# visible> :<topic>\"\n       323    RPL_LISTEND\n\
    \              \":End of LIST\"\n         - Replies RPL_LIST, RPL_LISTEND mark\
    \ the actual replies\n           with data and end of the server's response to\
    \ a LIST\n           command.  If there are no channels available to return,\n\
    \           only the end reply MUST be sent.\n       325    RPL_UNIQOPIS\n   \
    \           \"<channel> <nickname>\"\n       324    RPL_CHANNELMODEIS\n      \
    \        \"<channel> <mode> <mode params>\"\n       331    RPL_NOTOPIC\n     \
    \         \"<channel> :No topic is set\"\n       332    RPL_TOPIC\n          \
    \    \"<channel> :<topic>\"\n         - When sending a TOPIC message to determine\
    \ the\n           channel topic, one of two replies is sent.  If\n           the\
    \ topic is set, RPL_TOPIC is sent back else\n           RPL_NOTOPIC.\n       341\
    \    RPL_INVITING\n              \"<channel> <nick>\"\n         - Returned by\
    \ the server to indicate that the\n           attempted INVITE message was successful\
    \ and is\n           being passed onto the end client.\n       342    RPL_SUMMONING\n\
    \              \"<user> :Summoning user to IRC\"\n         - Returned by a server\
    \ answering a SUMMON message to\n           indicate that it is summoning that\
    \ user.\n       346    RPL_INVITELIST\n              \"<channel> <invitemask>\"\
    \n       347    RPL_ENDOFINVITELIST\n              \"<channel> :End of channel\
    \ invite list\"\n         - When listing the 'invitations masks' for a given channel,\n\
    \           a server is required to send the list back using the\n           RPL_INVITELIST\
    \ and RPL_ENDOFINVITELIST messages.  A\n           separate RPL_INVITELIST is\
    \ sent for each active mask.\n           After the masks have been listed (or\
    \ if none present) a\n           RPL_ENDOFINVITELIST MUST be sent.\n       348\
    \    RPL_EXCEPTLIST\n              \"<channel> <exceptionmask>\"\n       349 \
    \   RPL_ENDOFEXCEPTLIST\n              \"<channel> :End of channel exception list\"\
    \n         - When listing the 'exception masks' for a given channel,\n       \
    \    a server is required to send the list back using the\n           RPL_EXCEPTLIST\
    \ and RPL_ENDOFEXCEPTLIST messages.  A\n           separate RPL_EXCEPTLIST is\
    \ sent for each active mask.\n           After the masks have been listed (or\
    \ if none present)\n           a RPL_ENDOFEXCEPTLIST MUST be sent.\n       351\
    \    RPL_VERSION\n              \"<version>.<debuglevel> <server> :<comments>\"\
    \n         - Reply by the server showing its version details.\n           The\
    \ <version> is the version of the software being\n           used (including any\
    \ patchlevel revisions) and the\n           <debuglevel> is used to indicate if\
    \ the server is\n           running in \"debug mode\".\n           The \"comments\"\
    \ field may contain any comments about\n           the version or further version\
    \ details.\n       352    RPL_WHOREPLY\n              \"<channel> <user> <host>\
    \ <server> <nick>\n              ( \"H\" / \"G\" > [\"*\"] [ ( \"@\" / \"+\" )\
    \ ]\n              :<hopcount> <real name>\"\n       315    RPL_ENDOFWHO\n   \
    \           \"<name> :End of WHO list\"\n         - The RPL_WHOREPLY and RPL_ENDOFWHO\
    \ pair are used\n           to answer a WHO message.  The RPL_WHOREPLY is only\n\
    \           sent if there is an appropriate match to the WHO\n           query.\
    \  If there is a list of parameters supplied\n           with a WHO message, a\
    \ RPL_ENDOFWHO MUST be sent\n           after processing each list item with <name>\
    \ being\n           the item.\n       353    RPL_NAMREPLY\n              \"( \"\
    =\" / \"*\" / \"@\" ) <channel>\n               :[ \"@\" / \"+\" ] <nick> *( \"\
    \ \" [ \"@\" / \"+\" ] <nick> )\n         - \"@\" is used for secret channels,\
    \ \"*\" for private\n           channels, and \"=\" for others (public channels).\n\
    \       366    RPL_ENDOFNAMES\n              \"<channel> :End of NAMES list\"\n\
    \         - To reply to a NAMES message, a reply pair consisting\n           of\
    \ RPL_NAMREPLY and RPL_ENDOFNAMES is sent by the\n           server back to the\
    \ client.  If there is no channel\n           found as in the query, then only\
    \ RPL_ENDOFNAMES is\n           returned.  The exception to this is when a NAMES\n\
    \           message is sent with no parameters and all visible\n           channels\
    \ and contents are sent back in a series of\n           RPL_NAMEREPLY messages\
    \ with a RPL_ENDOFNAMES to mark\n           the end.\n       364    RPL_LINKS\n\
    \              \"<mask> <server> :<hopcount> <server info>\"\n       365    RPL_ENDOFLINKS\n\
    \              \"<mask> :End of LINKS list\"\n         - In replying to the LINKS\
    \ message, a server MUST send\n           replies back using the RPL_LINKS numeric\
    \ and mark the\n           end of the list using an RPL_ENDOFLINKS reply.\n  \
    \     367    RPL_BANLIST\n              \"<channel> <banmask>\"\n       368  \
    \  RPL_ENDOFBANLIST\n              \"<channel> :End of channel ban list\"\n  \
    \       - When listing the active 'bans' for a given channel,\n           a server\
    \ is required to send the list back using the\n           RPL_BANLIST and RPL_ENDOFBANLIST\
    \ messages.  A separate\n           RPL_BANLIST is sent for each active banmask.\
    \  After the\n           banmasks have been listed (or if none present) a\n  \
    \         RPL_ENDOFBANLIST MUST be sent.\n       371    RPL_INFO\n           \
    \   \":<string>\"\n       374    RPL_ENDOFINFO\n              \":End of INFO list\"\
    \n         - A server responding to an INFO message is required to\n         \
    \  send all its 'info' in a series of RPL_INFO messages\n           with a RPL_ENDOFINFO\
    \ reply to indicate the end of the\n           replies.\n       375    RPL_MOTDSTART\n\
    \              \":- <server> Message of the day - \"\n       372    RPL_MOTD\n\
    \              \":- <text>\"\n       376    RPL_ENDOFMOTD\n              \":End\
    \ of MOTD command\"\n         - When responding to the MOTD message and the MOTD\
    \ file\n           is found, the file is displayed line by line, with\n      \
    \     each line no longer than 80 characters, using\n           RPL_MOTD format\
    \ replies.  These MUST be surrounded\n           by a RPL_MOTDSTART (before the\
    \ RPL_MOTDs) and an\n           RPL_ENDOFMOTD (after).\n       381    RPL_YOUREOPER\n\
    \              \":You are now an IRC operator\"\n         - RPL_YOUREOPER is sent\
    \ back to a client which has\n           just successfully issued an OPER message\
    \ and gained\n           operator status.\n       382    RPL_REHASHING\n     \
    \         \"<config file> :Rehashing\"\n         - If the REHASH option is used\
    \ and an operator sends\n           a REHASH message, an RPL_REHASHING is sent\
    \ back to\n           the operator.\n       383    RPL_YOURESERVICE\n        \
    \      \"You are service <servicename>\"\n         - Sent by the server to a service\
    \ upon successful\n           registration.\n       391    RPL_TIME\n        \
    \      \"<server> :<string showing server's local time>\"\n         - When replying\
    \ to the TIME message, a server MUST send\n           the reply using the RPL_TIME\
    \ format above.  The string\n           showing the time need only contain the\
    \ correct day and\n           time there.  There is no further requirement for\
    \ the\n           time string.\n       392    RPL_USERSSTART\n              \"\
    :UserID   Terminal  Host\"\n       393    RPL_USERS\n              \":<username>\
    \ <ttyline> <hostname>\"\n       394    RPL_ENDOFUSERS\n              \":End of\
    \ users\"\n       395    RPL_NOUSERS\n              \":Nobody logged in\"\n  \
    \       - If the USERS message is handled by a server, the\n           replies\
    \ RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and\n           RPL_NOUSERS are used.\
    \  RPL_USERSSTART MUST be sent\n           first, following by either a sequence\
    \ of RPL_USERS\n           or a single RPL_NOUSER.  Following this is\n      \
    \     RPL_ENDOFUSERS.\n       200    RPL_TRACELINK\n              \"Link <version\
    \ & debug level> <destination>\n               <next server> V<protocol version>\n\
    \               <link uptime in seconds> <backstream sendq>\n               <upstream\
    \ sendq>\"\n       201    RPL_TRACECONNECTING\n              \"Try. <class> <server>\"\
    \n       202    RPL_TRACEHANDSHAKE\n              \"H.S. <class> <server>\"\n\
    \       203    RPL_TRACEUNKNOWN\n              \"???? <class> [<client IP address\
    \ in dot form>]\"\n       204    RPL_TRACEOPERATOR\n              \"Oper <class>\
    \ <nick>\"\n       205    RPL_TRACEUSER\n              \"User <class> <nick>\"\
    \n       206    RPL_TRACESERVER\n              \"Serv <class> <int>S <int>C <server>\n\
    \               <nick!user|*!*>@<host|server> V<protocol version>\"\n       207\
    \    RPL_TRACESERVICE\n              \"Service <class> <name> <type> <active type>\"\
    \n       208    RPL_TRACENEWTYPE\n              \"<newtype> 0 <client name>\"\n\
    \       209    RPL_TRACECLASS\n              \"Class <class> <count>\"\n     \
    \  210    RPL_TRACERECONNECT\n              Unused.\n       261    RPL_TRACELOG\n\
    \              \"File <logfile> <debug level>\"\n       262    RPL_TRACEEND\n\
    \              \"<server name> <version & debug level> :End of TRACE\"\n     \
    \    - The RPL_TRACE* are all returned by the server in\n           response to\
    \ the TRACE message.  How many are\n           returned is dependent on the TRACE\
    \ message and\n           whether it was sent by an operator or not.  There\n\
    \           is no predefined order for which occurs first.\n           Replies\
    \ RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and\n           RPL_TRACEHANDSHAKE are\
    \ all used for connections\n           which have not been fully established and\
    \ are either\n           unknown, still attempting to connect or in the\n    \
    \       process of completing the 'server handshake'.\n           RPL_TRACELINK\
    \ is sent by any server which handles\n           a TRACE message and has to pass\
    \ it on to another\n           server.  The list of RPL_TRACELINKs sent in\n \
    \          response to a TRACE command traversing the IRC\n           network\
    \ should reflect the actual connectivity of\n           the servers themselves\
    \ along that path.\n           RPL_TRACENEWTYPE is to be used for any connection\n\
    \           which does not fit in the other categories but is\n           being\
    \ displayed anyway.\n           RPL_TRACEEND is sent to indicate the end of the\
    \ list.\n       211    RPL_STATSLINKINFO\n              \"<linkname> <sendq> <sent\
    \ messages>\n               <sent Kbytes> <received messages>\n              \
    \ <received Kbytes> <time open>\"\n         - reports statistics on a connection.\
    \  <linkname>\n           identifies the particular connection, <sendq> is\n \
    \          the amount of data that is queued and waiting to be\n           sent\
    \ <sent messages> the number of messages sent,\n           and <sent Kbytes> the\
    \ amount of data sent, in\n           Kbytes. <received messages> and <received\
    \ Kbytes>\n           are the equivalent of <sent messages> and <sent\n      \
    \     Kbytes> for received data, respectively.  <time\n           open> indicates\
    \ how long ago the connection was\n           opened, in seconds.\n       212\
    \    RPL_STATSCOMMANDS\n              \"<command> <count> <byte count> <remote\
    \ count>\"\n         - reports statistics on commands usage.\n       219    RPL_ENDOFSTATS\n\
    \              \"<stats letter> :End of STATS report\"\n       242    RPL_STATSUPTIME\n\
    \              \":Server Up %d days %d:%02d:%02d\"\n         - reports the server\
    \ uptime.\n       243    RPL_STATSOLINE\n              \"O <hostmask> * <name>\"\
    \n         - reports the allowed hosts from where user may become IRC\n      \
    \     operators.\n       221    RPL_UMODEIS\n              \"<user mode string>\"\
    \n         - To answer a query about a client's own mode,\n           RPL_UMODEIS\
    \ is sent back.\n       234    RPL_SERVLIST\n              \"<name> <server> <mask>\
    \ <type> <hopcount> <info>\"\n       235    RPL_SERVLISTEND\n              \"\
    <mask> <type> :End of service listing\"\n         - When listing services in reply\
    \ to a SERVLIST message,\n           a server is required to send the list back\
    \ using the\n           RPL_SERVLIST and RPL_SERVLISTEND messages.  A separate\n\
    \           RPL_SERVLIST is sent for each service.  After the\n           services\
    \ have been listed (or if none present) a\n           RPL_SERVLISTEND MUST be\
    \ sent.\n       251    RPL_LUSERCLIENT\n              \":There are <integer> users\
    \ and <integer>\n               services on <integer> servers\"\n       252  \
    \  RPL_LUSEROP\n              \"<integer> :operator(s) online\"\n       253  \
    \  RPL_LUSERUNKNOWN\n              \"<integer> :unknown connection(s)\"\n    \
    \   254    RPL_LUSERCHANNELS\n              \"<integer> :channels formed\"\n \
    \      255    RPL_LUSERME\n              \":I have <integer> clients and <integer>\n\
    \                servers\"\n         - In processing an LUSERS message, the server\n\
    \           sends a set of replies from RPL_LUSERCLIENT,\n           RPL_LUSEROP,\
    \ RPL_USERUNKNOWN,\n           RPL_LUSERCHANNELS and RPL_LUSERME.  When\n    \
    \       replying, a server MUST send back\n           RPL_LUSERCLIENT and RPL_LUSERME.\
    \  The other\n           replies are only sent back if a non-zero count\n    \
    \       is found for them.\n       256    RPL_ADMINME\n              \"<server>\
    \ :Administrative info\"\n       257    RPL_ADMINLOC1\n              \":<admin\
    \ info>\"\n       258    RPL_ADMINLOC2\n              \":<admin info>\"\n    \
    \   259    RPL_ADMINEMAIL\n              \":<admin info>\"\n         - When replying\
    \ to an ADMIN message, a server\n           is expected to use replies RPL_ADMINME\n\
    \           through to RPL_ADMINEMAIL and provide a text\n           message with\
    \ each.  For RPL_ADMINLOC1 a\n           description of what city, state and country\n\
    \           the server is in is expected, followed by\n           details of the\
    \ institution (RPL_ADMINLOC2)\n           and finally the administrative contact\
    \ for the\n           server (an email address here is REQUIRED)\n           in\
    \ RPL_ADMINEMAIL.\n       263    RPL_TRYAGAIN\n              \"<command> :Please\
    \ wait a while and try again.\"\n         - When a server drops a command without\
    \ processing it,\n           it MUST use the reply RPL_TRYAGAIN to inform the\n\
    \           originating client.\n"
- title: 5.2 Error Replies
  contents:
  - "5.2 Error Replies\n       Error replies are found in the range from 400 to 599.\n\
    \       401    ERR_NOSUCHNICK\n              \"<nickname> :No such nick/channel\"\
    \n          - Used to indicate the nickname parameter supplied to a\n        \
    \    command is currently unused.\n       402    ERR_NOSUCHSERVER\n          \
    \    \"<server name> :No such server\"\n         - Used to indicate the server\
    \ name given currently\n           does not exist.\n       403    ERR_NOSUCHCHANNEL\n\
    \              \"<channel name> :No such channel\"\n         - Used to indicate\
    \ the given channel name is invalid.\n       404    ERR_CANNOTSENDTOCHAN\n   \
    \           \"<channel name> :Cannot send to channel\"\n         - Sent to a user\
    \ who is either (a) not on a channel\n           which is mode +n or (b) not a\
    \ chanop (or mode +v) on\n           a channel which has mode +m set or where\
    \ the user is\n           banned and is trying to send a PRIVMSG message to\n\
    \           that channel.\n       405    ERR_TOOMANYCHANNELS\n              \"\
    <channel name> :You have joined too many channels\"\n         - Sent to a user\
    \ when they have joined the maximum\n           number of allowed channels and\
    \ they try to join\n           another channel.\n       406    ERR_WASNOSUCHNICK\n\
    \              \"<nickname> :There was no such nickname\"\n         - Returned\
    \ by WHOWAS to indicate there is no history\n           information for that nickname.\n\
    \       407    ERR_TOOMANYTARGETS\n              \"<target> :<error code> recipients.\
    \ <abort message>\"\n         - Returned to a client which is attempting to send\
    \ a\n           PRIVMSG/NOTICE using the user@host destination format\n      \
    \     and for a user@host which has several occurrences.\n         - Returned\
    \ to a client which trying to send a\n           PRIVMSG/NOTICE to too many recipients.\n\
    \         - Returned to a client which is attempting to JOIN a safe\n        \
    \   channel using the shortname when there are more than one\n           such\
    \ channel.\n       408    ERR_NOSUCHSERVICE\n              \"<service name> :No\
    \ such service\"\n         - Returned to a client which is attempting to send\
    \ a SQUERY\n           to a service which does not exist.\n       409    ERR_NOORIGIN\n\
    \              \":No origin specified\"\n         - PING or PONG message missing\
    \ the originator parameter.\n       411    ERR_NORECIPIENT\n              \":No\
    \ recipient given (<command>)\"\n       412    ERR_NOTEXTTOSEND\n            \
    \  \":No text to send\"\n       413    ERR_NOTOPLEVEL\n              \"<mask>\
    \ :No toplevel domain specified\"\n       414    ERR_WILDTOPLEVEL\n          \
    \    \"<mask> :Wildcard in toplevel domain\"\n       415    ERR_BADMASK\n    \
    \          \"<mask> :Bad Server/host mask\"\n         - 412 - 415 are returned\
    \ by PRIVMSG to indicate that\n           the message wasn't delivered for some\
    \ reason.\n           ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that\n  \
    \         are returned when an invalid use of\n           \"PRIVMSG $<server>\"\
    \ or \"PRIVMSG #<host>\" is attempted.\n       421    ERR_UNKNOWNCOMMAND\n   \
    \           \"<command> :Unknown command\"\n         - Returned to a registered\
    \ client to indicate that the\n           command sent is unknown by the server.\n\
    \       422    ERR_NOMOTD\n              \":MOTD File is missing\"\n         -\
    \ Server's MOTD file could not be opened by the server.\n       423    ERR_NOADMININFO\n\
    \              \"<server> :No administrative info available\"\n         - Returned\
    \ by a server in response to an ADMIN message\n           when there is an error\
    \ in finding the appropriate\n           information.\n       424    ERR_FILEERROR\n\
    \              \":File error doing <file op> on <file>\"\n         - Generic error\
    \ message used to report a failed file\n           operation during the processing\
    \ of a message.\n       431    ERR_NONICKNAMEGIVEN\n              \":No nickname\
    \ given\"\n         - Returned when a nickname parameter expected for a\n    \
    \       command and isn't found.\n       432    ERR_ERRONEUSNICKNAME\n       \
    \       \"<nick> :Erroneous nickname\"\n         - Returned after receiving a\
    \ NICK message which contains\n           characters which do not fall in the\
    \ defined set.  See\n           section 2.3.1 for details on valid nicknames.\n\
    \       433    ERR_NICKNAMEINUSE\n              \"<nick> :Nickname is already\
    \ in use\"\n         - Returned when a NICK message is processed that results\n\
    \           in an attempt to change to a currently existing\n           nickname.\n\
    \       436    ERR_NICKCOLLISION\n              \"<nick> :Nickname collision KILL\
    \ from <user>@<host>\"\n         - Returned by a server to a client when it detects\
    \ a\n           nickname collision (registered of a NICK that\n           already\
    \ exists by another server).\n       437    ERR_UNAVAILRESOURCE\n            \
    \  \"<nick/channel> :Nick/channel is temporarily unavailable\"\n         - Returned\
    \ by a server to a user trying to join a channel\n           currently blocked\
    \ by the channel delay mechanism.\n         - Returned by a server to a user trying\
    \ to change nickname\n           when the desired nickname is blocked by the nick\
    \ delay\n           mechanism.\n       441    ERR_USERNOTINCHANNEL\n         \
    \     \"<nick> <channel> :They aren't on that channel\"\n         - Returned by\
    \ the server to indicate that the target\n           user of the command is not\
    \ on the given channel.\n       442    ERR_NOTONCHANNEL\n              \"<channel>\
    \ :You're not on that channel\"\n         - Returned by the server whenever a\
    \ client tries to\n           perform a channel affecting command for which the\n\
    \           client isn't a member.\n       443    ERR_USERONCHANNEL\n        \
    \      \"<user> <channel> :is already on channel\"\n         - Returned when a\
    \ client tries to invite a user to a\n           channel they are already on.\n\
    \       444    ERR_NOLOGIN\n              \"<user> :User not logged in\"\n   \
    \      - Returned by the summon after a SUMMON command for a\n           user\
    \ was unable to be performed since they were not\n           logged in.\n    \
    \   445    ERR_SUMMONDISABLED\n              \":SUMMON has been disabled\"\n \
    \        - Returned as a response to the SUMMON command.  MUST be\n          \
    \ returned by any server which doesn't implement it.\n       446    ERR_USERSDISABLED\n\
    \              \":USERS has been disabled\"\n         - Returned as a response\
    \ to the USERS command.  MUST be\n           returned by any server which does\
    \ not implement it.\n       451    ERR_NOTREGISTERED\n              \":You have\
    \ not registered\"\n         - Returned by the server to indicate that the client\n\
    \           MUST be registered before the server will allow it\n           to\
    \ be parsed in detail.\n       461    ERR_NEEDMOREPARAMS\n              \"<command>\
    \ :Not enough parameters\"\n         - Returned by the server by numerous commands\
    \ to\n           indicate to the client that it didn't supply enough\n       \
    \    parameters.\n       462    ERR_ALREADYREGISTRED\n              \":Unauthorized\
    \ command (already registered)\"\n         - Returned by the server to any link\
    \ which tries to\n           change part of the registered details (such as\n\
    \           password or user details from second USER message).\n       463  \
    \  ERR_NOPERMFORHOST\n              \":Your host isn't among the privileged\"\n\
    \         - Returned to a client which attempts to register with\n           a\
    \ server which does not been setup to allow\n           connections from the host\
    \ the attempted connection\n           is tried.\n       464    ERR_PASSWDMISMATCH\n\
    \              \":Password incorrect\"\n         - Returned to indicate a failed\
    \ attempt at registering\n           a connection for which a password was required\
    \ and\n           was either not given or incorrect.\n       465    ERR_YOUREBANNEDCREEP\n\
    \              \":You are banned from this server\"\n         - Returned after\
    \ an attempt to connect and register\n           yourself with a server which\
    \ has been setup to\n           explicitly deny connections to you.\n       466\
    \    ERR_YOUWILLBEBANNED\n         - Sent by a server to a user to inform that\
    \ access to the\n           server will soon be denied.\n       467    ERR_KEYSET\n\
    \              \"<channel> :Channel key already set\"\n       471    ERR_CHANNELISFULL\n\
    \              \"<channel> :Cannot join channel (+l)\"\n       472    ERR_UNKNOWNMODE\n\
    \              \"<char> :is unknown mode char to me for <channel>\"\n       473\
    \    ERR_INVITEONLYCHAN\n              \"<channel> :Cannot join channel (+i)\"\
    \n       474    ERR_BANNEDFROMCHAN\n              \"<channel> :Cannot join channel\
    \ (+b)\"\n       475    ERR_BADCHANNELKEY\n              \"<channel> :Cannot join\
    \ channel (+k)\"\n       476    ERR_BADCHANMASK\n              \"<channel> :Bad\
    \ Channel Mask\"\n       477    ERR_NOCHANMODES\n              \"<channel> :Channel\
    \ doesn't support modes\"\n       478    ERR_BANLISTFULL\n              \"<channel>\
    \ <char> :Channel list is full\"\n       481    ERR_NOPRIVILEGES\n           \
    \   \":Permission Denied- You're not an IRC operator\"\n         - Any command\
    \ requiring operator privileges to operate\n           MUST return this error\
    \ to indicate the attempt was\n           unsuccessful.\n       482    ERR_CHANOPRIVSNEEDED\n\
    \              \"<channel> :You're not channel operator\"\n         - Any command\
    \ requiring 'chanop' privileges (such as\n           MODE messages) MUST return\
    \ this error if the client\n           making the attempt is not a chanop on the\
    \ specified\n           channel.\n       483    ERR_CANTKILLSERVER\n         \
    \     \":You can't kill a server!\"\n         - Any attempts to use the KILL command\
    \ on a server\n           are to be refused and this error returned directly\n\
    \           to the client.\n       484    ERR_RESTRICTED\n              \":Your\
    \ connection is restricted!\"\n         - Sent by the server to a user upon connection\
    \ to indicate\n           the restricted nature of the connection (user mode \"\
    +r\").\n       485    ERR_UNIQOPPRIVSNEEDED\n              \":You're not the original\
    \ channel operator\"\n         - Any MODE requiring \"channel creator\" privileges\
    \ MUST\n           return this error if the client making the attempt is not\n\
    \           a chanop on the specified channel.\n       491    ERR_NOOPERHOST\n\
    \              \":No O-lines for your host\"\n         - If a client sends an\
    \ OPER message and the server has\n           not been configured to allow connections\
    \ from the\n           client's host as an operator, this error MUST be\n    \
    \       returned.\n       501    ERR_UMODEUNKNOWNFLAG\n              \":Unknown\
    \ MODE flag\"\n         - Returned by the server to indicate that a MODE\n   \
    \        message was sent with a nickname parameter and that\n           the a\
    \ mode flag sent was not recognized.\n       502    ERR_USERSDONTMATCH\n     \
    \         \":Cannot change mode for other users\"\n         - Error sent to any\
    \ user trying to view or change the\n           user mode for a user other than\
    \ themselves.\n"
- title: 5.3 Reserved numerics
  contents:
  - "5.3 Reserved numerics\n   These numerics are not described above since they fall\
    \ into one of\n   the following categories:\n   1. no longer in use;\n   2. reserved\
    \ for future planned use;\n   3. in current use but are part of a non-generic\
    \ 'feature' of\n      the current IRC server.\n            231    RPL_SERVICEINFO\
    \     232  RPL_ENDOFSERVICES\n            233    RPL_SERVICE\n            300\
    \    RPL_NONE            316  RPL_WHOISCHANOP\n            361    RPL_KILLDONE\
    \        362  RPL_CLOSING\n            363    RPL_CLOSEEND        373  RPL_INFOSTART\n\
    \            384    RPL_MYPORTIS\n            213    RPL_STATSCLINE      214 \
    \ RPL_STATSNLINE\n            215    RPL_STATSILINE      216  RPL_STATSKLINE\n\
    \            217    RPL_STATSQLINE      218  RPL_STATSYLINE\n            240 \
    \   RPL_STATSVLINE      241  RPL_STATSLLINE\n            244    RPL_STATSHLINE\
    \      244  RPL_STATSSLINE\n            246    RPL_STATSPING       247  RPL_STATSBLINE\n\
    \            250    RPL_STATSDLINE\n            492    ERR_NOSERVICEHOST\n"
- title: 6. Current implementations
  contents:
  - "6. Current implementations\n   The IRC software, version 2.10 is the only complete\
    \ implementation of\n   the IRC protocol (client and server).  Because of the\
    \ small amount of\n   changes in the client protocol since the publication of\
    \ RFC 1459\n   [IRC], implementations that follow it are likely to be compliant\
    \ with\n   this protocol or to require a small amount of changes to reach\n  \
    \ compliance.\n"
- title: 7. Current problems
  contents:
  - "7. Current problems\n   There are a number of recognized problems with the IRC\
    \ Client\n   Protocol, and more generally with the IRC Server Protocol.  In order\n\
    \   to preserve backward compatibility with old clients, this protocol\n   has\
    \ almost not evolved since the publication of RFC 1459 [IRC].\n"
- title: 7.1 Nicknames
  contents:
  - "7.1 Nicknames\n   The idea of the nickname on IRC is very convenient for users\
    \ to use\n   when talking to each other outside of a channel, but there is only\
    \ a\n   finite nickname space and being what they are, it's not uncommon for\n\
    \   several people to want to use the same nick.  If a nickname is chosen\n  \
    \ by two people using this protocol, either one will not succeed or\n   both will\
    \ removed by use of a server KILL (See Section 3.7.1).\n"
- title: 7.2 Limitation of wildcards
  contents:
  - "7.2 Limitation of wildcards\n   There is no way to escape the escape character\
    \ \"\\\" (%x5C).  While\n   this isn't usually a problem, it makes it impossible\
    \ to form a mask\n   with a backslash character (\"\\\") preceding a wildcard.\n"
- title: 7.3 Security considerations
  contents:
  - "7.3 Security considerations\n   Security issues related to this protocol are\
    \ discussed in the \"IRC\n   Server Protocol\" [IRC-SERVER] as they are mostly\
    \ an issue for the\n   server side of the connection.\n"
- title: 8. Current support and availability
  contents:
  - "8. Current support and availability\n        Mailing lists for IRC related discussion:\n\
    \          General discussion: ircd-users@irc.org\n          Protocol development:\
    \ ircd-dev@irc.org\n        Software implementations:\n          ftp://ftp.irc.org/irc/server\n\
    \          ftp://ftp.funet.fi/pub/unix/irc\n          ftp://ftp.irc.org/irc/clients\n\
    \        Newsgroup: alt.irc\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   Parts of this document were copied from the RFC 1459\
    \ [IRC] which\n   first formally documented the IRC Protocol.  It has also benefited\n\
    \   from many rounds of review and comments.  In particular, the\n   following\
    \ people have made significant contributions to this\n   document:\n   Matthew\
    \ Green, Michael Neumayer, Volker Paulsen, Kurt Roeckx, Vesa\n   Ruokonen, Magnus\
    \ Tjernstrom, Stefan Zehl.\n"
- title: 10. References
  contents:
  - "10. References\n   [KEYWORDS]   Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [ABNF]\
    \       Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n             \
    \   Specifications: ABNF\", RFC 2234, November 1997.\n   [HNAME]      Braden,\
    \ R., \"Requirements for Internet Hosts --\n                Application and Support\"\
    , STD 3, RFC 1123, October 1989.\n   [IRC]        Oikarinen, J. & D. Reed, \"\
    Internet Relay Chat Protocol\",\n                RFC 1459, May 1993.\n   [IRC-ARCH]\
    \   Kalt, C., \"Internet Relay Chat: Architecture\", RFC 2810,\n             \
    \   April 2000.\n   [IRC-CHAN]   Kalt, C., \"Internet Relay Chat: Channel Management\"\
    , RFC\n                2811, April 2000.\n   [IRC-SERVER] Kalt, C., \"Internet\
    \ Relay Chat: Server Protocol\", RFC\n                2813, April 2000.\n"
- title: 11. Author's Address
  contents:
  - "11. Author's Address\n   Christophe Kalt\n   99 Teaneck Rd, Apt #117\n   Ridgefield\
    \ Park, NJ 07660\n   USA\n   EMail: kalt@stealth.net\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
