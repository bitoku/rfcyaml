- contents:
  - '                        TCP User Timeout Option

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The TCP user timeout controls how long transmitted data may remain\n
    \  unacknowledged before a connection is forcefully closed.  It is a\n   local,
    per-connection parameter.  This document specifies a new TCP\n   option -- the
    TCP User Timeout Option -- that allows one end of a TCP\n   connection to advertise
    its current user timeout value.  This\n   information provides advice to the other
    end of the TCP connection to\n   adapt its user timeout accordingly.  Increasing
    the user timeouts on\n   both ends of a TCP connection allows it to survive extended
    periods\n   without end-to-end connectivity.  Decreasing the user timeouts allows\n
    \  busy servers to explicitly notify their clients that they will\n   maintain
    the connection state only for a short time without\n   connectivity.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Conventions .....................................................3\n   3.
    Operation .......................................................4\n      3.1.
    Changing the Local User Timeout ............................5\n      3.2. UTO
    Option Reliability .....................................8\n      3.3. Option Format
    ..............................................8\n      3.4. Reserved Option Values
    .....................................9\n   4. Interoperability Issues .........................................9\n
    \     4.1. Middleboxes ................................................9\n      4.2.
    TCP Keep-Alives ...........................................10\n   5. Programming
    and Manageability Considerations ...................10\n   6. Security Considerations
    ........................................10\n   7. IANA Considerations ............................................12\n
    \  8. Acknowledgments ................................................12\n   9.
    References .....................................................12\n      9.1.
    Normative References ......................................12\n      9.2. Informative
    References ....................................13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Transmission Control Protocol (TCP) specification [RFC0793]\n
    \  defines a local, per-connection \"user timeout\" parameter that\n   specifies
    the maximum amount of time that transmitted data may remain\n   unacknowledged
    before TCP will forcefully close the corresponding\n   connection.  Applications
    can set and change this parameter with OPEN\n   and SEND calls.  If an end-to-end
    connectivity disruption lasts\n   longer than the user timeout, a sender will
    receive no\n   acknowledgments for any transmission attempt, including keep-alives,\n
    \  and it will close the TCP connection when the user timeout occurs.\n   This
    document specifies a new TCP option -- the TCP User Timeout\n   Option (UTO) --
    that allows one end of a TCP connection to advertise\n   its current user timeout
    value.  This information provides advice to\n   the other end of the connection
    to adapt its user timeout\n   accordingly.  That is, TCP remains free to disregard
    the advice\n   provided by the UTO option if local policies suggest it to be\n
    \  appropriate.\n   Increasing the user timeouts on both ends of a TCP connection
    allows\n   it to survive extended periods without end-to-end connectivity.\n   Decreasing
    the user timeouts allows busy servers to explicitly notify\n   their clients that
    they will maintain the connection state only for a\n   short time without connectivity.\n
    \  In the absence of an application-specified user timeout, the TCP\n   specification
    [RFC0793] defines a default user timeout of 5 minutes.\n   The Host Requirements
    RFC [RFC1122] refines this definition by\n   introducing two thresholds, R1 and
    R2 (R2 > R1), that control the\n   number of retransmission attempts for a single
    segment.  It suggests\n   that TCP should notify applications when R1 is reached
    for a segment,\n   and close the connection when R2 is reached.  [RFC1122] also
    defines\n   the recommended values for R1 (3 retransmissions) and R2 (100\n   seconds),
    noting that R2 for SYN segments should be at least 3\n   minutes.  Instead of
    a single user timeout, some TCP implementations\n   offer finer-grained policies.
    \ For example, Solaris supports\n   different timeouts depending on whether a
    TCP connection is in the\n   SYN-SENT, SYN-RECEIVED, or ESTABLISHED state [SOLARIS].\n
    \  Although some TCP implementations allow applications to set their\n   local
    user timeout, TCP has no in-protocol mechanism to signal\n   changes to the local
    user timeout to the other end of a connection.\n   This causes local changes to
    be ineffective in allowing a connection\n   to survive extended periods without
    connectivity, because the other\n   end will still close the connection after
    its user timeout expires.\n   The ability to inform the other end of a connection
    about the local\n   user timeout can improve TCP operation in scenarios that are\n
    \  currently not well supported.  One example of such a scenario is\n   mobile
    hosts that change network attachment points.  Such hosts,\n   maybe using Mobile
    IP [RFC3344], HIP [RFC4423], or transport-layer\n   mobility mechanisms [TCP_MOB],
    are only intermittently connected to\n   the Internet.  In between connected periods,
    mobile hosts may\n   experience periods without end-to-end connectivity.  Other
    factors\n   that can cause transient connectivity disruptions are high levels
    of\n   congestion or link or routing failures inside the network.  In these\n
    \  scenarios, a host may not know exactly when or for how long\n   connectivity
    disruptions will occur, but it might be able to\n   determine an increased likelihood
    for such events based on past\n   mobility patterns and thus benefit from using
    longer user timeouts.\n   In other scenarios, the time and duration of a connectivity\n
    \  disruption may even be predictable.  For example, a node in space\n   might
    experience connectivity disruptions due to line-of-sight\n   blocking by planetary
    bodies.  The timing of these events may be\n   computable from orbital mechanics.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Conventions
- contents:
  - "3.  Operation\n   Use of the TCP User Timeout Option can be either enabled on
    a per-\n   connection basis, e.g., through an API option, or controlled by a\n
    \  system-wide setting.  TCP maintains four per-connection state\n   variables
    to control the operation of the UTO option, three of which\n   (ADV_UTO, ENABLED,
    and CHANGEABLE) are new:\n   USER_TIMEOUT\n      TCP's USER TIMEOUT parameter,
    as specified in [RFC0793].\n   ADV_UTO\n      UTO option advertised to the remote
    TCP peer.  This is an\n      application-specified value, and may be specified
    on a system-wide\n      basis.  If unspecified, it defaults to the default system-wide\n
    \     USER TIMEOUT.\n   ENABLED (Boolean)\n      Flag that controls whether the
    UTO option is enabled for a\n      connection.  This flag applies to both sending
    and receiving.\n      Defaults to false.\n   CHANGEABLE (Boolean)\n      Flag
    that controls whether USER_TIMEOUT (TCP's USER TIMEOUT\n      parameter) may be
    changed based on an UTO option received from the\n      other end of the connection.
    \ Defaults to true and becomes false\n      when an application explicitly sets
    USER_TIMEOUT.\n   Note that an exchange of UTO options between both ends of a\n
    \  connection is not a binding negotiation.  Transmission of a UTO\n   option
    is a suggestion that the other end consider adapting its user\n   timeout.  This
    adaptation only happens if the other end of the\n   connection has explicitly
    allowed it (both ENABLED and CHANGEABLE are\n   true).\n   Before opening a connection,
    an application that wishes to use the\n   UTO option enables its use by setting
    ENABLED to true.  It may choose\n   an appropriate local UTO by explicitly setting
    ADV_UTO; otherwise,\n   UTO is set to the default USER TIMEOUT value.  Finally,
    the\n   application should determine whether it will allow the local USER\n   TIMEOUT
    to change based on received UTO options from the other end of\n   a connection.
    \ The default is to allow this for connections that do\n   not have specific user
    timeout concerns.  If an application\n   explicitly sets the USER_TIMEOUT, CHANGEABLE
    MUST become false in\n   order to prevent UTO options (from the other end) from
    overriding\n   local application requests.  Alternatively, applications can set
    or\n   clear CHANGEABLE directly through API calls.\n   Performing these steps
    before an active or passive open causes UTO\n   options to be exchanged in the
    SYN and SYN-ACK packets and is a\n   reliable way to initially exchange, and potentially
    adapt to, UTO\n   values.  TCP implementations MAY provide system-wide default
    settings\n   for the ENABLED, ADV_UTO and CHANGEABLE connection parameters.\n
    \  In addition to exchanging UTO options in the SYN segments, a\n   connection
    that has enabled UTO options SHOULD include a UTO option\n   in the first packet
    that does not have the SYN flag set.  This helps\n   to minimize the amount of
    state information TCP must keep for\n   connections in non-synchronized states.
    \ Also, it is particularly\n   useful when mechanisms such as \"SYN cookies\"
    [RFC4987] are\n   implemented, allowing a newly-established TCP connection to
    benefit\n   from the information advertised by the UTO option, even if the UTO\n
    \  contained in the initial SYN segment was not recorded.\n   A host that supports
    the UTO option SHOULD include one in the next\n   possible outgoing segment whenever
    it starts using a new user timeout\n   for the connection.  This allows the other
    end of the connection to\n   adapt its local user timeout accordingly.  A TCP
    implementation that\n   does not support the UTO option MUST silently ignore it
    [RFC1122],\n   thus ensuring interoperability.\n   Hosts MUST impose upper and
    lower limits on the user timeouts they\n   use for a connection.  Section 3.1
    discusses user timeout limits and\n   potentially problematic effects of some
    user timeout settings.\n   Finally, it is worth noting that TCP's option space
    is limited to 40\n   bytes.  As a result, if other TCP options are in use, they
    may\n   already consume all the available TCP option space, thus preventing\n
    \  the use of the UTO option specified in this document.  Therefore, TCP\n   option
    space issues should be considered before enabling the UTO\n   option.\n"
  - contents:
    - "3.1.  Changing the Local User Timeout\n   When a host receives a TCP User Timeout
      Option, it must decide\n   whether to change the local user timeout of the corresponding\n
      \  connection.  If the CHANGEABLE flag is false, USER_TIMEOUT MUST NOT\n   be
      changed, regardless of the received UTO option.  Without this\n   restriction,
      the UTO option would modify TCP semantics, because an\n   application-requested
      USER TIMEOUT could be overridden by peer\n   requests.  In this case TCP SHOULD,
      however, notify the application\n   about the user timeout value received from
      the other end system.\n   In general, unless the application on the local host
      has requested a\n   specific USER TIMEOUT for the connection, CHANGEABLE will
      be true and\n   hosts SHOULD adjust the local TCP USER TIMEOUT (USER_TIMEOUT)
      in\n   response to receiving a UTO option, as described in the remainder of\n
      \  this section.\n   The UTO option specifies the user timeout in seconds or
      minutes,\n   rather than in number of retransmissions or round-trip times (RTTs).\n
      \  Thus, the UTO option allows hosts to exchange user timeout values\n   from
      1 second to over 9 hours at a granularity of seconds, and from 1\n   minute
      to over 22 days at a granularity of minutes.\n   Very short USER TIMEOUT values
      can affect TCP transmissions over\n   high-delay paths.  If the user timeout
      occurs before an\n   acknowledgment for an outstanding segment arrives, possibly
      due to\n   packet loss, the connection closes.  Many TCP implementations default\n
      \  to USER TIMEOUT values of a few minutes.  Although the UTO option\n   allows
      suggestion of short timeouts, applications advertising them\n   should consider
      these effects.\n   Long USER TIMEOUT values allow hosts to tolerate extended
      periods\n   without end-to-end connectivity.  However, they also require hosts
      to\n   maintain the TCP state information associated with connections for\n
      \  long periods of time.  Section 6 discusses the security implications\n   of
      long timeout values.\n   To protect against these effects, implementations MUST
      impose limits\n   on the user timeout values they accept and use.  The remainder
      of\n   this section describes a RECOMMENDED scheme to limit TCP's USER\n   TIMEOUT
      based on upper and lower limits.\n   Under the RECOMMENDED scheme, and when
      CHANGEABLE is true, each end\n   SHOULD compute the local USER TIMEOUT for a
      connection according to\n   this formula:\n   USER_TIMEOUT = min(U_LIMIT, max(ADV_UTO,
      REMOTE_UTO, L_LIMIT))\n   Each field is to be interpreted as follows:\n   USER_TIMEOUT\n
      \     USER TIMEOUT value to be adopted by the local TCP for this\n      connection.\n
      \  U_LIMIT\n      Current upper limit imposed on the user timeout of a connection
      by\n      the local host.\n   ADV_UTO\n      User timeout advertised to the
      remote TCP peer in a TCP User\n      Timeout Option.\n   REMOTE_UTO\n      Last
      user timeout value received from the other end in a TCP User\n      Timeout
      Option.\n   L_LIMIT\n      Current lower limit imposed on the user timeout of
      a connection by\n      the local host.\n   The RECOMMENDED formula results in
      the maximum of the two advertised\n   values, adjusted for the configured upper
      and lower limits, to be\n   adopted for the user timeout of the connection on
      both ends.  The\n   rationale is that choosing the maximum of the two values
      will let the\n   connection survive longer periods without end-to-end connectivity.\n
      \  If the end that announced the lower of the two user timeout values\n   did
      so in order to reduce the amount of TCP state information that\n   must be kept
      on the host, it can close or abort the connection\n   whenever it wants.\n   It
      must be noted that the two endpoints of the connection will not\n   necessarily
      adopt the same user timeout.\n   Enforcing a lower limit (L_LIMIT) prevents
      connections from closing\n   due to transient network conditions, including
      temporary congestion,\n   mobility hand-offs, and routing instabilities.\n   An
      upper limit (U_LIMIT) can reduce the effect of resource exhaustion\n   attacks.
      \ Section 6 discusses the details of these attacks.\n   Note that these limits
      MAY be specified as system-wide constants or\n   at other granularities, such
      as on per-host, per-user, per-outgoing-\n   interface, or even per-connection
      basis.  Furthermore, these limits\n   need not be static.  For example, they
      MAY be a function of system\n   resource utilization or attack status and could
      be dynamically\n   adapted.\n   The Host Requirements RFC [RFC1122] does not
      impose any limits on the\n   length of the user timeout.  However, it recommends
      a time interval\n   of at least 100 seconds.  Consequently, the lower limit
      (L_LIMIT)\n   SHOULD be set to at least 100 seconds when following the RECOMMENDED\n
      \  scheme described in this section.  Adopting a user timeout smaller\n   than
      the current retransmission timeout (RTO) for the connection\n   would likely
      cause the connection to be aborted unnecessarily.\n   Therefore, the lower limit
      (L_LIMIT) MUST be larger than the current\n   retransmission timeout (RTO) for
      the connection.  It is worth noting\n   that an upper limit may be imposed on
      the RTO, provided it is at\n   least 60 seconds [RFC2988].\n"
    title: 3.1.  Changing the Local User Timeout
  - contents:
    - "3.2.  UTO Option Reliability\n   The TCP User Timeout Option is an advisory
      TCP option that does not\n   change processing of subsequent segments.  Unlike
      other TCP options,\n   it need not be exchanged reliably.  Consequently, the
      specification\n   does not define a reliability handshake for UTO option exchanges.\n
      \  When a segment that carries a UTO option is lost, the other end will\n   simply
      not have the opportunity to update its local USER TIMEOUT.\n   Implementations
      MAY implement local mechanisms to improve delivery\n   reliability, such as
      retransmitting a UTO option when they retransmit\n   a segment that originally
      carried it, or \"attaching\" the option to a\n   byte in the stream and retransmitting
      the option whenever that byte\n   or its ACK are retransmitted.\n   It is important
      to note that although these mechanisms can improve\n   transmission reliability
      for the UTO option, they do not guarantee\n   delivery (a three-way handshake
      would be required for this).\n   Consequently, implementations MUST NOT assume
      that UTO options are\n   transmitted reliably.\n"
    title: 3.2.  UTO Option Reliability
  - contents:
    - "3.3.  Option Format\n   Sending a TCP User Timeout Option informs the other
      end of the\n   connection of the current local user timeout and suggests that
      the\n   other end adapt its user timeout accordingly.  The user timeout value\n
      \  included in a UTO option contains the ADV_UTO value that is expected\n   to
      be adopted for the TCP's USER TIMEOUT parameter during the\n   synchronized
      states of a connection (ESTABLISHED, FIN-WAIT-1, FIN-\n   WAIT-2, CLOSE-WAIT,
      CLOSING, or LAST-ACK).  Connections in other\n   states MUST use the default
      timeout values defined in [RFC0793] and\n   [RFC1122].\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Kind = 28   |   Length = 4  |G|        User Timeout         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  (One tick mark represents one bit.)\n              Figure 1: Format of the
      TCP User Timeout Option\n   Figure 1 shows the format of the TCP User Timeout
      Option.  It\n   contains these fields:\n   Kind (8 bits)\n      This MUST be
      28, i.e., the TCP option number [RFC0793] that has\n      been assigned by IANA
      (see Section 7).\n   Length (8 bits)\n      Length of the TCP option in octets
      [RFC0793]; its value MUST be 4.\n   Granularity (1 bit)\n      Granularity bit,
      indicating the granularity of the \"User Timeout\"\n      field.  When set (G
      = 1), the time interval in the \"User Timeout\"\n      field MUST be interpreted
      as minutes.  Otherwise (G = 0), the time\n      interval in the \"User Timeout\"
      field MUST be interpreted as\n      seconds.\n   User Timeout (15 bits)\n      Specifies
      the user timeout suggestion for this connection.  It\n      MUST be interpreted
      as a 15-bit unsigned integer.  The granularity\n      of the timeout (minutes
      or seconds) depends on the \"G\" field.\n"
    title: 3.3.  Option Format
  - contents:
    - "3.4.  Reserved Option Values\n   A TCP User Timeout Option with a \"User Timeout\"
      field of zero and a\n   \"Granularity\" bit of either minutes (1) or seconds
      (0) is reserved\n   for future use.  Current TCP implementations MUST NOT send
      it and\n   MUST ignore it upon reception.\n"
    title: 3.4.  Reserved Option Values
  title: 3.  Operation
- contents:
  - "4.  Interoperability Issues\n   This section discusses interoperability issues
    related to introducing\n   the TCP User Timeout Option.\n"
  - contents:
    - "4.1.  Middleboxes\n   A TCP implementation that does not support the TCP User
      Timeout\n   Option MUST silently ignore it [RFC1122], thus ensuring\n   interoperability.
      \ In a study of the effects of middleboxes on\n   transport protocols, Medina
      et al. have shown that the vast majority\n   of modern TCP stacks correctly
      handle unknown TCP options [MEDINA].\n   In this study, 3% of connections failed
      when an unknown TCP option\n   appeared in the middle of a connection.  Because
      the number of\n   failures caused by unknown options is small and they are a
      result of\n   incorrectly implemented TCP stacks that violate existing requirements\n
      \  to ignore unknown options, they do not warrant special measures.\n   Thus,
      this document does not define a mechanism to negotiate support\n   of the TCP
      User Timeout Option during the three-way handshake.\n   Implementations may
      want to exchange UTO options on the very first\n   data segments after the three-way
      handshake to determine if such a\n   middlebox exists on the path.  When segments
      carrying UTO options are\n   persistently lost, an implementation should turn
      off the use of UTO\n   for the connection.  When the connection itself is reset,
      an\n   implementation may be able to transparently re-establish another\n   connection
      instance that does not use UTO before any application data\n   has been successfully
      exchanged.\n   Stateful firewalls usually time out connection state after a
      period\n   of inactivity.  If such a firewall exists along the path, it may\n
      \  close or abort connections regardless of the use of the TCP User\n   Timeout
      Option.  In the future, such firewalls may learn to parse the\n   TCP User Timeout
      Option in unencrypted TCP segments and adapt\n   connection state management
      accordingly.\n"
    title: 4.1.  Middleboxes
  - contents:
    - "4.2.  TCP Keep-Alives\n   Some TCP implementations, such as those in BSD systems,
      use a\n   different abort policy for TCP keep-alives than for user data.  Thus,\n
      \  the TCP keep-alive mechanism might abort a connection that would\n   otherwise
      have survived the transient period without connectivity.\n   Therefore, if a
      connection that enables keep-alives is also using the\n   TCP User Timeout Option,
      then the keep-alive timer MUST be set to a\n   value larger than that of the
      adopted USER TIMEOUT.\n"
    title: 4.2.  TCP Keep-Alives
  title: 4.  Interoperability Issues
- contents:
  - "5.  Programming and Manageability Considerations\n   The IETF specification for
    TCP [RFC0793] includes a simple, abstract\n   application programming interface
    (API).  Similarly, the API for the\n   UTO extension in Section 3 is kept abstract.
    \ TCP implementations,\n   however, usually provide more complex and feature-rich
    APIs.  The\n   \"socket\" API that originated with BSD Unix and is now standardized
    by\n   POSIX is one such example [POSIX].  It is expected that TCP\n   implementations
    that choose to include the UTO extension will extend\n   their API to allow applications
    to use and configure its parameters.\n   The MIB objects defined in [RFC4022]
    and [RFC4898] allow management\n   of TCP connections.  It is expected that revisions
    to these documents\n   will include definitions of objects for managing the UTO
    extension\n   defined in this document.\n"
  title: 5.  Programming and Manageability Considerations
- contents:
  - "6.  Security Considerations\n   Lengthening user timeouts has obvious security
    implications.\n   Flooding attacks cause denial of service by forcing servers
    to commit\n   resources for maintaining the state of throw-away connections.\n
    \  However, TCP implementations do not become more vulnerable to simple\n   SYN
    flooding by implementing the TCP User Timeout Option, because\n   user timeouts
    exchanged during the handshake only affect the\n   synchronized states (ESTABLISHED,
    FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT,\n   CLOSING, LAST-ACK), which simple SYN floods
    never reach.\n   However, when an attacker completes the three-way handshakes
    of its\n   throw-away connections, it can amplify the effects of resource\n   exhaustion
    attacks because the attacked server must maintain the\n   connection state associated
    with the throw-away connections for\n   longer durations.  Because connection
    state is kept longer, lower-\n   frequency attack traffic, which may be more difficult
    to detect, can\n   already exacerbate resource exhaustion.\n   Several approaches
    can help mitigate this issue.  First,\n   implementations can require prior peer
    authentication, e.g., using\n   IPsec [RFC4301] or TCP-MD5 [RFC2385], before accepting
    long user\n   timeouts for the peer's connections.  (Implementors that decide
    to\n   use TCP-MD5 for this purpose are encouraged to monitor the\n   development
    of TCP-AO [AUTH_OPT], its designated successor, and\n   update their implementation
    when it is published as an RFC.)  A\n   similar approach is for a host to start
    accepting long user timeouts\n   for an established connection only after in-band
    authentication has\n   occurred, for example, after a TLS handshake across the
    connection\n   has succeeded [RFC5246].  Although these are arguably the most\n
    \  complete solutions, they depend on external mechanisms to establish a\n   trust
    relationship.\n   A second alternative that does not depend on external mechanisms\n
    \  would introduce a per-peer limit on the number of connections that\n   may
    use increased user timeouts.  Several variants of this approach\n   are possible,
    such as fixed limits or shortening accepted user\n   timeouts with a rising number
    of connections.  Although this\n   alternative does not eliminate resource exhaustion
    attacks from a\n   single peer, it can limit their effects.  Reducing the number
    of\n   high-UTO connections a server supports in the face of an attack turns\n
    \  that attack into a denial-of-service attack against the service of\n   high-UTO
    connections.\n   Per-peer limits cannot protect against distributed denial-of-service\n
    \  attacks, where multiple clients coordinate a resource exhaustion\n   attack
    that uses long user timeouts.  To protect against such\n   attacks, TCP implementations
    could reduce the duration of accepted\n   user timeouts with increasing resource
    utilization.\n   TCP implementations under attack may be forced to shed load by\n
    \  resetting established connections.  Some load-shedding heuristics,\n   such
    as resetting connections with long idle times first, can\n   negatively affect
    service for intermittently connected, trusted peers\n   that have suggested long
    user timeouts.  On the other hand, resetting\n   connections to untrusted peers
    that use long user timeouts may be\n   effective.  In general, using the peers'
    level of trust as a\n   parameter during the load-shedding decision process may
    be useful.\n   Note that if TCP needs to close or abort connections with a long
    TCP\n   User Timeout Option to shed load, these connections are still no\n   worse
    off than without the option.\n   Finally, upper and lower limits on user timeouts,
    discussed in\n   Section 3.1, can be an effective tool to limit the impact of
    these\n   sorts of attacks.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This section is to be interpreted according to [RFC5226].\n
    \  This document does not define any new namespaces.  IANA has allocated\n   a
    new 8-bit TCP option number (28) for the UTO option from the \"TCP\n   Option
    Kind Numbers\" registry maintained at http://www.iana.org.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   The following people have improved this document through
    thoughtful\n   suggestions: Mark Allman, Caitlin Bestler, David Borman, Bob Braden,\n
    \  Scott Brim, Marcus Brunner, Wesley Eddy, Gorry Fairhurst, Abolade\n   Gbadegesin,
    Ted Faber, Guillermo Gont, Tom Henderson, Joseph Ishac,\n   Jeremy Harris, Alfred
    Hoenes, Phil Karn, Michael Kerrisk, Dan Krejsa,\n   Jamshid Mahdavi, Kostas Pentikousis,
    Juergen Quittek, Anantha\n   Ramaiah, Joe Touch, Stefan Schmid, Simon Schuetz,
    Tim Shepard, and\n   Martin Stiemerling.\n   Lars Eggert is partly funded by [TRILOGY],
    a research project\n   supported by the European Commission under its Seventh
    Framework\n   Program.\n   Fernando Gont wishes to thank Secretaria de Extension
    Universitaria\n   at Universidad Tecnologica Nacional and Universidad Tecnologica\n
    \  Nacional/Facultad Regional Haedo for supporting him in this work.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC0793]   Postel, J., \"Transmission Control
      Protocol\", STD 7,\n               RFC 793, September 1981.\n   [RFC1122]   Braden,
      R., \"Requirements for Internet Hosts -\n               Communication Layers\",
      STD 3, RFC 1122, October 1989.\n   [RFC2119]   Bradner, S., \"Key words for
      use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC5226]   Narten, T. and H. Alvestrand, \"Guidelines for Writing
      an\n               IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n
      \              May 2008.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [AUTH_OPT]  Touch, J., Mankin, A., and R.
      Bonica, \"The TCP\n               Authentication Option\", Work in Progress,
      November 2008.\n   [MEDINA]    Medina, A., Allman, M., and S. Floyd, \"Measuring\n
      \              Interactions Between Transport Protocols and\n               Middleboxes\",
      Proc. 4th ACM SIGCOMM/USENIX Conference on\n               Internet Measurement,
      October 2004.\n   [POSIX]     IEEE Std. 1003.1-2001, \"Standard for Information\n
      \              Technology - Portable Operating System Interface\n               (POSIX)\",
      Open Group Technical Standard: Base\n               Specifications Issue 6,
      ISO/IEC 9945:2002, December 2001.\n   [RFC2385]   Heffernan, A., \"Protection
      of BGP Sessions via the TCP\n               MD5 Signature Option\", RFC 2385,
      August 1998.\n   [RFC2988]   Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n
      \              Timer\", RFC 2988, November 2000.\n   [RFC3344]   Perkins, C.,
      \"IP Mobility Support for IPv4\", RFC 3344,\n               August 2002.\n   [RFC4022]
      \  Raghunarayan, R., \"Management Information Base for the\n               Transmission
      Control Protocol (TCP)\", RFC 4022,\n               March 2005.\n   [RFC4301]
      \  Kent, S. and K. Seo, \"Security Architecture for the\n               Internet
      Protocol\", RFC 4301, December 2005.\n   [RFC4423]   Moskowitz, R. and P. Nikander,
      \"Host Identity Protocol\n               (HIP) Architecture\", RFC 4423, May
      2006.\n   [RFC4898]   Mathis, M., Heffner, J., and R. Raghunarayan, \"TCP\n
      \              Extended Statistics MIB\", RFC 4898, May 2007.\n   [RFC4987]
      \  Eddy, W., \"TCP SYN Flooding Attacks and Common\n               Mitigations\",
      RFC 4987, August 2007.\n   [RFC5246]   Dierks, T. and E. Rescorla, \"The Transport
      Layer Security\n               (TLS) Protocol Version 1.2\", RFC 5246, August
      2008.\n   [SOLARIS]   Sun Microsystems, \"Solaris Tunable Parameters Reference\n
      \              Manual\", Part No. 806-7009-10, 2002.\n   [TCP_MOB]   Eddy, W.,
      \"Mobility Support For TCP\", Work in Progress,\n               April 2004.\n
      \  [TRILOGY]   \"Trilogy Project\", <http://www.trilogy-project.org/>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Lars Eggert\n   Nokia Research Center\n   P.O. Box 407\n
    \  Nokia Group  00045\n   Finland\n   Phone: +358 50 48 24461\n   EMail: lars.eggert@nokia.com\n
    \  URI:   http://research.nokia.com/people/lars_eggert/\n   Fernando Gont\n   Universidad
    Tecnologica Nacional / Facultad Regional Haedo\n   Evaristo Carriego 2644\n   Haedo,
    Provincia de Buenos Aires  1706\n   Argentina\n   Phone: +54 11 4650 8472\n   EMail:
    fernando@gont.com.ar\n   URI:   http://www.gont.com.ar/\n"
  title: Authors' Addresses
