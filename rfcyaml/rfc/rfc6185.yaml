- contents:
  - "                         RTP Payload Format for\n        H.264 Reduced-Complexity
    Decoding Operation (RCDO) Video\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an RTP payload format for the Reduced-\n
    \  Complexity Decoding Operation (RCDO) for H.264 Baseline profile\n   bitstreams,
    as specified in ITU-T Recommendation H.241.  RCDO reduces\n   the decoding cost
    and resource consumption of the video processing.\n   The RCDO RTP payload format
    is based on the H.264 RTP payload format.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6185.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Conventions Used in This Document  . . . . . . . . . .
    . . . .  3\n   3.  Media Format Background  . . . . . . . . . . . . . . . . .
    . .  3\n   4.  Payload Format . . . . . . . . . . . . . . . . . . . . . . . .
    \ 3\n   5.  Congestion Control Considerations  . . . . . . . . . . . . . .  3\n
    \  6.  Payload Format Parameters  . . . . . . . . . . . . . . . . . .  3\n     6.1.
    \ Media Type Definition  . . . . . . . . . . . . . . . . . .  4\n   7.  Mapping
    to SDP . . . . . . . . . . . . . . . . . . . . . . . . 19\n     7.1.  Offer/Answer
    Considerations  . . . . . . . . . . . . . . . 20\n     7.2.  Declarative SDP Considerations
    . . . . . . . . . . . . . . 20\n   8.  IANA Considerations  . . . . . . . . .
    . . . . . . . . . . . . 20\n   9.  Security Considerations  . . . . . . . . .
    . . . . . . . . . . 20\n   10. Acknowledgements . . . . . . . . . . . . . . .
    . . . . . . . . 21\n   11. References . . . . . . . . . . . . . . . . . . . .
    . . . . . . 21\n     11.1. Normative References . . . . . . . . . . . . . . .
    . . . . 21\n     11.2. Informative References . . . . . . . . . . . . . . . .
    . . 21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   ITU-T Recommendation H.241 [3] specifies a Reduced-Complexity\n
    \  Decoding Operation (RCDO) for use with H.264 [2] Baseline profile\n   bitstreams.
    \ It also specifies a bitstream constraint associated with\n   RCDO and a mechanism
    for signaling RCDO within the bitstream.  The\n   RCDO signaling indicates that
    the bitstream conforms to the bitstream\n   constraint and that the decoder shall
    apply the RCDO decoding process\n   to the bitstream.\n   RCDO for H.264 offers
    a solution to support higher resolutions at the\n   same high frame rates used
    in current implementations.  This is\n   achieved by reducing the processing requirements
    and thus reducing\n   the decoding cost/resource consumption of the video processing.\n
    \  This document defines media type parameters and allows use in systems\n   based
    on the Session Description Protocol (SDP) [8] for signaling.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [4].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Media Format Background\n   The Reduced-Complexity Decoding Operation (RCDO)
    for H.264 Baseline\n   profile bitstreams is specified in Annex B of H.241 [3].
    \ RCDO is\n   specified as a separate H.264 mode and is distinct from any profile\n
    \  defined in H.264.  An RCDO bitstream obeys all the constraints of the\n   Baseline
    profile.\n   The media format is based on the H.264 RTP payload format as\n   specified
    in RFC 6184 [1].  Therefore, RFC 6184 constitutes the basis\n   for this document
    and is referred to several times.\n   In order to signal H.264 additional modes,
    Table 8-13 of H.241 [3]\n   specifies an AdditionalModesSupported parameter.  Currently,
    the only\n   additional mode defined is RCDO.\n      Informative note: Other additional
    modes may be defined in the\n      future.  H.264 additional modes may or may
    not be distinct from\n      the profiles in H.264.\n   A separate media subtype,
    named H264-RCDO, is defined to ensure\n   backward compatibility with deployed
    implementations of H.264.\n"
  title: 3.  Media Format Background
- contents:
  - "4.  Payload Format\n   The payload format defined in Section 5 of RFC 6184 [1]
    SHALL be\n   used.  This includes the RTP header usage and the payload format
    in\n   RFC 6184.  Examples of typical RTP packets can be found in RFC 6184.\n"
  title: 4.  Payload Format
- contents:
  - "5.  Congestion Control Considerations\n   Congestion control for RTP SHALL be
    used in accordance with RFC 3550\n   [6] and with any applicable RTP profile,
    e.g., RFC 3551 [7].  If\n   best-effort service is being used, users of this payload
    format SHALL\n   monitor packet loss to ensure that the packet loss rate is within\n
    \  acceptable parameters.\n"
  title: 5.  Congestion Control Considerations
- contents:
  - "6.  Payload Format Parameters\n   This RTP payload format is identified using
    the H264-RCDO media\n   subtype, which is registered in accordance with RFC 4855
    [10], and\n   using the template of RFC 4288 [13].\n"
  - contents:
    - "6.1.  Media Type Definition\n      Informative note: The media subtype definition
      for H264-RCDO is\n      based on the definition of the H264 media subtype as
      specified in\n      Section 8.1 of RFC 6184 [1].  Except for the profile-level-id\n
      \     parameter, for which new semantics are specified below, the\n      optional
      parameters are copied from RFC 6184 [1] in order to\n      provide a complete,
      self-contained media subtype registration to\n      IANA.  The references are
      updated to match the numbering used in\n      this document.\n   The media subtype
      for RCDO for H.264 has been allocated from the IETF\n   tree.\n   Type name:
      video\n   Subtype name: H264-RCDO\n   Required parameters:\n   rate:  Indicates
      the RTP timestamp clock rate.  The rate value MUST\n      be 90000.\n   Optional
      parameters:\n   profile-level-id:  A base16 RFC 4648 [9] (hexadecimal) representation\n
      \     of the following three bytes in the sequence parameter set NAL\n      unit
      is specified in H.264 [2]: 1) profile_idc, 2) a byte herein\n      referred
      to as profile-iop, composed of the values of\n      constraint_set0_flag, constraint_set1_flag,
      constraint_set2_flag,\n      constraint_set3_flag, constraint_set4_flag, constraint_set5_flag,\n
      \     and reserved_zero_2bits in bit-significance order, starting from\n      the
      most-significant bit, and 3) level_idc.  Note that\n      reserved_zero_2bits
      is required to be equal to 0 in H.264 [2], but\n      other values for it may
      be specified in the future by ITU-T or\n      ISO/IEC.\n      The profile-level-id
      parameter indicates the default sub-profile\n      (i.e., the subset of coding
      tools that may have been used to\n      generate the stream or that the receiver
      supports) and the default\n      level of the stream or the receiver supports.\n
      \     RCDO is distinct from any profile; this implies that the profile\n      value
      0 (no profile) and the profile_idc byte of the profile-\n      level-id parameter
      are equal to 0.  An RCDO bitstream MUST obey\n      all the constraints of the
      Baseline profile.  Therefore, only\n      constraint_set0_flag is equal to 1
      in the profile-iop part of the\n      profile-level-id parameter; the remaining
      bits are set to 0.\n      If the profile-level-id parameter is used to indicate
      properties\n      of a NAL unit stream, it indicates that, to decode the stream,
      the\n      minimum subset of coding tools a decoder has to support is the\n
      \     default sub-profile, and the lowest level the decoder has to\n      support
      is the default level.\n      If the profile-level-id parameter is used for capability
      exchange\n      or session setup, it indicates the subset of coding tools, which\n
      \     is equal to the default sub-profile, that the codec supports for\n      both
      receiving and sending.  If max-recv-level is not present, the\n      default
      level from profile-level-id indicates the highest level\n      the codec wishes
      to support.  If max-recv-level is present, it\n      indicates the highest level
      the codec supports for receiving.  For\n      either receiving or sending, all
      levels that are lower than the\n      highest level supported MUST also be supported.\n
      \     For example, if a codec supports level 1.3, the profile-level-id\n      becomes
      00800d, in which 00 indicates the \"no profile\" value, 80\n      indicates
      the constraints of the Baseline profile, and 0d\n      indicates level 1.3.
      \ When level 2.1 is supported, the profile-\n      level-id becomes 008015.\n
      \     If no profile-level-id is present, level 1 (i.e., equivalent to\n      profile-level-id
      00800a) MUST be implied.\n         Informative note: The definitions of the
      remaining optional\n         parameters below are copied verbatim from Section
      8.1 of RFC\n         6184 [1].  Only the references are updated to match the\n
      \        numbering used in this document.\n   max-recv-level:  This parameter
      MAY be used to indicate the highest\n      level a receiver supports when the
      highest level is higher than\n      the default level (the level indicated by
      profile-level-id).  The\n      value of max-recv-level is a base16 (hexadecimal)
      representation\n      of the two bytes after the syntax element profile_idc
      in the\n      sequence parameter set NAL unit specified in H.264 [2]: profile-\n
      \     iop (as defined above) and level_idc.  If the level_idc byte of\n      max-recv-level
      is equal to 11 and bit 4 of the profile-iop byte of\n      max-recv-level is
      equal to 1 or if the level_idc byte of max-recv-\n      level is equal to 9
      and bit 4 of the profile-iop byte of max-recv-\n      level is equal to 0, the
      highest level the receiver supports is\n      Level 1b.  Otherwise, the highest
      level the receiver supports is\n      equal to the level_idc byte of max-recv-level
      divided by 10.\n      max-recv-level MUST NOT be present if the highest level
      the\n      receiver supports is not higher than the default level.\n   max-mbps,
      max-smbps, max-fs, max-cpb, max-dpb, and max-br:  These\n      parameters MAY
      be used to signal the capabilities of a receiver\n      implementation.  These
      parameters MUST NOT be used for any other\n      purpose.  The highest level
      conveyed in the value of the profile-\n      level-id parameter or the max-recv-level
      parameter MUST be such\n      that the receiver is fully capable of supporting.
      max-mbps, max-\n      smbps, max-fs, max-cpb, max-dpb, and max-br MAY be used
      to\n      indicate capabilities of the receiver that extend the required\n      capabilities
      of the signaled highest level, as specified below.\n      When more than one
      parameter from the set (max-mbps, max-smbps,\n      max-fs, max-cpb, max-dpb,
      max-br) is present, the receiver MUST\n      support all signaled capabilities
      simultaneously.  For example, if\n      both max-mbps and max-br are present,
      the signaled highest level\n      with the extension of both the frame rate
      and bitrate is\n      supported.  That is, the receiver is able to decode NAL
      unit\n      streams in which the macroblock processing rate is up to max-mbps\n
      \     (inclusive), the bitrate is up to max-br (inclusive), the coded\n      picture
      buffer size is derived as specified in the semantics of\n      the max-br parameter
      below, and the other properties comply with\n      the highest level specified
      in the value of the profile-level-id\n      parameter or the max-recv-level
      parameter.\n      If a receiver can support all the properties of Level A, the\n
      \     highest level specified in the value of the profile-level-id\n      parameter
      or the max-recv-level parameter MUST be Level A (i.e.,\n      MUST NOT be lower
      than Level A).  In other words, a receiver MUST\n      NOT signal values of
      max-mbps, max-fs, max-cpb, max-dpb, and\n      max-br that taken together meet
      the requirements of a higher level\n      compared to the highest level specified
      in the value of the\n      profile-level-id parameter or the max-recv-level
      parameter.\n         Informative note: When the OPTIONAL media type parameters
      are\n         used to signal the properties of a NAL unit stream, max-mbps,\n
      \        max-smbps, max-fs, max-cpb, max-dpb, and max-br are not\n         present,
      and the value of profile-level-id must always be such\n         that the NAL
      unit stream complies fully with the specified\n         profile and level.\n
      \  max-mbps:  The value of max-mbps is an integer indicating the maximum\n      macroblock
      processing rate in units of macroblocks per second.\n      The max-mbps parameter
      signals that the receiver is capable of\n      decoding video at a higher rate
      than is required by the signaled\n      highest level conveyed in the value
      of the profile-level-id\n      parameter or the max-recv-level parameter.  When
      max-mbps is\n      signaled, the receiver MUST be able to decode NAL unit streams\n
      \     that conform to the signaled highest level, with the exception\n      that
      the MaxMBPS value in Table A-1 of H.264 [2] for the signaled\n      highest
      level is replaced with the value of max-mbps.  The value\n      of max-mbps
      MUST be greater than or equal to the value of MaxMBPS\n      given in Table
      A-1 of H.264 [2] for the highest level.  Senders\n      MAY use this knowledge
      to send pictures of a given size at a\n      higher picture rate than is indicated
      in the signaled highest\n      level.\n   max-smbps:  The value of max-smbps
      is an integer indicating the\n      maximum static macroblock processing rate
      in units of static\n      macroblocks per second, under the hypothetical assumption
      that all\n      macroblocks are static macroblocks.  When max-smbps is signaled,\n
      \     the MaxMBPS value in Table A-1 of H.264 [2] should be replaced\n      with
      the result of the following computation:\n      o If the parameter max-mbps
      is signaled, set a variable\n        MaxMacroblocksPerSecond to the value of
      max-mbps.  Otherwise,\n        set MaxMacroblocksPerSecond equal to the value
      of MaxMBPS in\n        Table A-1 of H.264 [2] for the signaled highest level
      conveyed\n        in the value of the profile-level-id parameter or the\n        max-recv-level
      parameter.\n      o Set a variable P_non-static to the proportion of non-static\n
      \       macroblocks in picture n.\n      o Set a variable P_static to the proportion
      of static macroblocks\n        in picture n.\n      o The value of MaxMBPS in
      Table A-1 of H.264 [2] should be\n        considered by the encoder to be equal
      to:\n         MaxMacroblocksPerSecond * max-smbps / (P_non-static * max-smbps\n
      \        + P_static * MaxMacroblocksPerSecond)\n      The encoder should recompute
      this value for each picture.  The\n      value of max-smbps MUST be greater
      than or equal to the value of\n      MaxMBPS given explicitly as the value of
      the max-mbps parameter or\n      implicitly in Table A-1 of H.264 [2] for the
      signaled highest\n      level.  Senders MAY use this knowledge to send pictures
      of a given\n      size at a higher picture rate than is indicated in the signaled\n
      \     highest level.\n   max-fs:  The value of max-fs is an integer indicating
      the maximum\n      frame size in units of macroblocks.  The max-fs parameter
      signals\n      that the receiver is capable of decoding larger picture sizes
      than\n      are required by the signaled highest level conveyed in the value\n
      \     of the profile-level-id parameter or the max-recv-level parameter.\n      When
      max-fs is signaled, the receiver MUST be able to decode NAL\n      unit streams
      that conform to the signaled highest level, with the\n      exception that the
      MaxFS value in Table A-1 of H.264 [2] for the\n      signaled highest level
      is replaced with the value of max-fs.  The\n      value of max-fs MUST be greater
      than or equal to the value of\n      MaxFS given in Table A-1 of H.264 [2] for
      the highest level.\n      Senders MAY use this knowledge to send larger pictures
      at a\n      proportionally lower frame rate than is indicated in the signaled\n
      \     highest level.\n   max-cpb:  The value of max-cpb is an integer indicating
      the maximum\n      coded picture buffer size in units of 1000 bits for the VCL
      HRD\n      parameters and in units of 1200 bits for the NAL HRD parameters.\n
      \     Note that this parameter does not use units of cpbBrVclFactor and\n      cpbBrNALFactor
      (see Table A-1 of H.264 [2]).  The max-cpb\n      parameter signals that the
      receiver has more memory than the\n      minimum amount of coded picture buffer
      memory required by the\n      signaled highest level conveyed in the value of
      the\n      profile-level-id parameter or the max-recv-level parameter.  When\n
      \     max-cpb is signaled, the receiver MUST be able to decode NAL unit\n      streams
      that conform to the signaled highest level, with the\n      exception that the
      MaxCPB value in Table A-1 of H.264 [2] for the\n      signaled highest level
      is replaced with the value of max-cpb\n      (after taking cpbBrVclFactor and
      cpbBrNALFactor into consideration\n      when needed).  The value of max-cpb
      (after taking cpbBrVclFactor\n      and cpbBrNALFactor into consideration when
      needed) MUST be greater\n      than or equal to the value of MaxCPB given in
      Table A-1 of H.264\n      [2] for the highest level.  Senders MAY use this knowledge
      to\n      construct coded video streams with greater variation of bitrate\n
      \     than can be achieved with the MaxCPB value in Table A-1 of H.264\n      [2].\n
      \        Informative note: The coded picture buffer is used in the\n         hypothetical
      reference decoder (Annex C of H.264).  The use of\n         the hypothetical
      reference decoder is recommended in H.264\n         encoders to verify that
      the produced bitstream conforms to the\n         standard and to control the
      output bitrate.  Thus, the coded\n         picture buffer is conceptually independent
      of any other\n         potential buffers in the receiver, including de-interleaving\n
      \        and de-jitter buffers.  The coded picture buffer need not be\n         implemented
      in decoders as specified in Annex C of H.264, but\n         rather standard-compliant
      decoders can have any buffering\n         arrangements provided that they can
      decode standard-compliant\n         bitstreams.  Thus, in practice, the input
      buffer for a video\n         decoder can be integrated with de-interleaving
      and de-jitter\n         buffers of the receiver.\n   max-dpb:  The value of
      max-dpb is an integer indicating the maximum\n      decoded picture buffer size
      in units of 8/3 macroblocks.  The max-\n      dpb parameter signals that the
      receiver has more memory than the\n      minimum amount of decoded picture buffer
      memory required by the\n      signaled highest level conveyed in the value of
      the\n      profile-level-id parameter or the max-recv-level parameter.  When\n
      \     max-dpb is signaled, the receiver MUST be able to decode NAL unit\n      streams
      that conform to the signaled highest level, with the\n      exception that the
      MaxDpbMbs value in Table A-1 of H.264 [2] for\n      the signaled highest level
      is replaced with the value of max-dpb *\n      3 / 8.  Consequently, a receiver
      that signals max-dpb MUST be\n      capable of storing the following number
      of decoded frames,\n      complementary field pairs, and non-paired fields in
      its decoded\n      picture buffer:\n         Min(max-dpb * 3 / 8 / ( PicWidthInMbs
      * FrameHeightInMbs), 16)\n      Wherein PicWidthInMbs and FrameHeightInMbs are
      defined in H.264\n      [2].\n      The value of max-dpb MUST be greater than
      or equal to the value of\n      MaxDpbMbs * 3 / 8, wherein the value of MaxDpbMbs
      is given in\n      Table A-1 of H.264 [2] for the highest level.  Senders MAY
      use\n      this knowledge to construct coded video streams with improved\n      compression.\n
      \        Informative note: This parameter was added primarily to\n         complement
      a similar codepoint in the ITU-T Recommendation\n         H.245, so as to facilitate
      signaling gateway designs.  The\n         decoded picture buffer stores reconstructed
      samples.  There is\n         no relationship between the size of the decoded
      picture buffer\n         and the buffers used in RTP, especially de-interleaving
      and\n         de-jitter buffers.\n         Informative note: In RFC 3984, which
      is obsoleted by RFC 6184,\n         the unit of this parameter was 1024 bytes.
      \ The unit has been\n         changed to 8/3 macroblocks in this document.  The
      reason for\n         this change was due to the changes from the 2003 version
      of the\n         H.264 specification referenced by RFC 3984 to the 2010 version\n
      \        of the H.264 specification referenced by this document,\n         particularly
      the changes to Table A-1 in the H.264\n         specification due to addition
      of color formats and bit depths\n         not supported earlier.  The changed
      semantics of this parameter\n         keeps backward compatibility to RFC 3984
      and supports all\n         profiles defined in the 2010 version of the H.264\n
      \        specification.\n   max-br:  The value of max-br is an integer indicating
      the maximum\n      video bitrate in units of 1000 bits per second for the VCL
      HRD\n      parameters and in units of 1200 bits per second for the NAL HRD\n
      \     parameters.  Note that this parameter does not use units of\n      cpbBrVclFactor
      and cpbBrNALFactor (see Table A-1 of H.264 [2]).\n      The max-br parameter
      signals that the video decoder of the\n      receiver is capable of decoding
      video at a higher bitrate than is\n      required by the signaled highest level
      conveyed in the value of\n      the profile-level-id parameter or the max-recv-level
      parameter.\n      When max-br is signaled, the video codec of the receiver MUST
      be\n      able to decode NAL unit streams that conform to the signaled\n      highest
      level, with the following exceptions in the limits\n      specified by the highest
      level:\n      o The value of max-br (after taking cpbBrVclFactor and\n        cpbBrNALFactor
      into consideration when needed) replaces the\n        MaxBR value in Table A-1
      of H.264 [2] for the highest level.\n      o When the max-cpb parameter is not
      present, the result of the\n        following formula replaces the value of
      MaxCPB in Table A-1 of\n        H.264 [2]: (MaxCPB of the signaled level) *
      max-br / (MaxBR of\n        the signaled highest level).\n      For example,
      if a receiver signals capability for Main profile\n      Level 1.2 with max-br
      equal to 1550, this indicates a maximum\n      video bitrate of 1550 kbits/sec
      for VCL HRD parameters, a maximum\n      video bitrate of 1860 kbits/sec for
      NAL HRD parameters, and a CPB\n      size of 4036458 bits (1550000 / 384000
      * 1000 * 1000).\n      The value of max-br (after taking cpbBrVclFactor and\n
      \     cpbBrNALFactor into consideration when needed) MUST be greater\n      than
      or equal to the value MaxBR given in Table A-1 of H.264 [2]\n      for the signaled
      highest level.\n      Senders MAY use this knowledge to send higher bitrate
      video as\n      allowed in the level definition of Annex A of H.264 to achieve\n
      \     improved video quality.\n         Informative note: This parameter was
      added primarily to\n         complement a similar codepoint in the ITU-T Recommendation\n
      \        H.245, so as to facilitate signaling gateway designs.  The\n         assumption
      that the network is capable of handling such\n         bitrates at any given
      time cannot be made from the value of\n         this parameter.  In particular,
      no conclusion can be drawn that\n         the signaled bitrate is possible under
      congestion control\n         constraints.\n   redundant-pic-cap:  This parameter
      signals the capabilities of a\n      receiver implementation.  When equal to
      0, the parameter indicates\n      that the receiver makes no attempt to use
      redundant coded pictures\n      to correct incorrectly decoded primary coded
      pictures.  When equal\n      to 0, the receiver is not capable of using redundant
      slices;\n      therefore, a sender SHOULD avoid sending redundant slices to
      save\n      bandwidth.  When equal to 1, the receiver is capable of decoding\n
      \     any such redundant slice that covers a corrupted area in a primary\n      decoded
      picture (at least partly), and therefore a sender MAY send\n      redundant
      slices.  When the parameter is not present, a value of 0\n      MUST be used
      for redundant-pic-cap.  When present, the value of\n      redundant-pic-cap
      MUST be either 0 or 1.\n      When the profile-level-id parameter is present
      in the same\n      signaling as the redundant-pic-cap parameter and the profile\n
      \     indicated in profile-level-id is such that it disallows the use of\n      redundant
      coded pictures (e.g., Main profile), the value of\n      redundant-pic-cap MUST
      be equal to 0.  When a receiver indicates\n      redundant-pic-cap equal to
      0, the received stream SHOULD NOT\n      contain redundant coded pictures.\n
      \        Informative note: Even if redundant-pic-cap is equal to 0, the\n         decoder
      is able to ignore redundant codec pictures provided\n         that the decoder
      supports a profile (Baseline, Extended) in\n         which redundant coded pictures
      are allowed.\n         Informative note: Even if redundant-pic-cap is equal
      to 1, the\n         receiver may also choose other error concealment strategies
      to\n         replace or complement decoding of redundant slices.\n   sprop-parameter-sets:
      \ This parameter MAY be used to convey any\n      sequence and picture parameter
      set NAL units (herein referred to\n      as the initial parameter set NAL units)
      that can be placed in the\n      NAL unit stream to precede any other NAL units
      in decoding order.\n      The parameter MUST NOT be used to indicate codec capability
      in any\n      capability exchange procedure.  The value of the parameter is
      a\n      comma-separated (',') list of base64 RFC 4648 [9] representations\n
      \     of parameter set NAL units as specified in Sections 7.3.2.1 and\n      7.3.2.2
      of H.264 [2].  Note that the number of bytes in a\n      parameter set NAL unit
      is typically less than 10, but a picture\n      parameter set NAL unit can contain
      several hundred bytes.\n         Informative note: When several payload types
      are offered in the\n         SDP Offer/Answer model, each with its own sprop-parameter-sets\n
      \        parameter, the receiver cannot assume that those parameter sets\n         do
      not use conflicting storage locations (i.e., identical\n         values of parameter
      set identifiers).  Therefore, a receiver\n         should buffer all sprop-parameter-sets
      and make them available\n         to the decoder instance that decodes a certain
      payload type.\n      The sprop-parameter-sets parameter MUST only contain parameter\n
      \     sets that are conforming to the profile-level-id, i.e., the subset\n      of
      coding tools indicated by any of the parameter sets MUST be\n      equal to
      the default sub-profile, and the level indicated by any\n      of the parameter
      sets MUST be equal to the default level.\n   sprop-level-parameter-sets:  This
      parameter MAY be used to convey any\n      sequence and picture parameter set
      NAL units (herein referred to\n      as the initial parameter set NAL units)
      that can be placed in the\n      NAL unit stream to precede any other NAL units
      in decoding order\n      and that are associated with one or more levels different
      than the\n      default level.  The parameter MUST NOT be used to indicate codec\n
      \     capability in any capability exchange procedure.\n      The sprop-level-parameter-sets
      parameter contains parameter sets\n      for one or more levels that are different
      than the default level.\n      All parameter sets associated with one level
      are clustered and\n      prefixed with a three-byte field that has the same
      syntax as\n      profile-level-id.  This enables the receiver to install the\n
      \     parameter sets for one level and discard the rest.  The three-byte\n      field
      is named PLId, and all parameter sets associated with one\n      level are named
      PSL, which has the same syntax as sprop-parameter-\n      sets.  Parameter sets
      for each level are represented in the form\n      of PLId:PSL, i.e., PLId followed
      by a colon (':') and the base64\n      RFC 4648 [9] representation of the initial
      parameter set NAL units\n      for the level.  Each pair of PLId:PSLs is also
      separated by a\n      colon.  Note that a PSL can contain multiple parameter
      sets for\n      that level, separated with commas (',').\n      The subset of
      coding tools indicated by each PLId field MUST be\n      equal to the default
      sub-profile, and the level indicated by each\n      PLId field MUST be different
      than the default level.  All sequence\n      parameter sets contained in each
      PSL MUST have the three bytes\n      from profile_idc to level_idc, inclusive,
      equal to the preceding\n      PLId.\n         Informative note: This parameter
      allows for efficient level\n         downgrade or upgrade in SDP Offer/Answer
      and out-of-band\n         transport of parameter sets simultaneously.\n   use-level-src-parameter-sets:
      \ This parameter MAY be used to indicate\n      a receiver capability.  The
      value MAY be equal to either 0 or 1.\n      When the parameter is not present,
      the value MUST be inferred to\n      be equal to 0.  The value 0 indicates that
      the receiver does not\n      understand the sprop-level-parameter-sets parameter,
      does not\n      understand the \"fmtp\" source attribute as specified in Section
      6.3\n      of RFC 5576 [14], will ignore sprop-level-parameter-sets when\n      present,
      and will ignore sprop-parameter-sets when conveyed using\n      the \"fmtp\"
      source attribute.  The value 1 indicates that the\n      receiver understands
      the sprop-level-parameter-sets parameter,\n      understands the \"fmtp\" source
      attribute as specified in Section\n      6.3 of RFC 5576 [14], and is capable
      of using parameter sets\n      contained in the sprop-level-parameter-sets or
      contained in the\n      sprop-parameter-sets that is conveyed using the \"fmtp\"
      source\n      attribute.\n         Informative note: An RFC 3984 receiver does
      not understand\n         sprop-level-parameter-sets, use-level-src-parameter-sets,
      or\n         the \"fmtp\" source attribute as specified in Section 6.3 of RFC\n
      \        5576 [14].  Therefore, during SDP Offer/Answer, an RFC 3984\n         receiver
      as the answerer will simply ignore sprop-level-\n         parameter-sets when
      present in an offer and sprop-parameter-\n         sets conveyed using the \"fmtp\"
      source attribute, as specified\n         in Section 6.3 of RFC 5576 [14].  Assume
      that the offered\n         payload type was accepted at a level lower than the
      default\n         level.  If the offered payload type included sprop-level-\n
      \        parameter-sets or included sprop-parameter-sets conveyed using\n         the
      \"fmtp\" source attribute and if the offerer sees that the\n         answerer
      has not included use-level-src-parameter-sets equal to\n         1 in the answer,
      the offerer knows that in-band transport of\n         parameter sets is needed.\n
      \  in-band-parameter-sets:  This parameter MAY be used to indicate a\n      receiver
      capability.  The value MAY be equal to either 0 or 1.\n      The value 1 indicates
      that the receiver discards out-of-band\n      parameter sets in sprop-parameter-sets
      and sprop-level-parameter-\n      sets; therefore, the sender MUST transmit
      all parameter sets in-\n      band.  The value 0 indicates that the receiver
      utilizes out-of-\n      band parameter sets included in sprop-parameter-sets
      and/or sprop-\n      level-parameter-sets.  However, in this case, the sender
      MAY still\n      choose to send parameter sets in-band.  When in-band-parameter-\n
      \     sets is equal to 1, use-level-src-parameter-sets MUST NOT be\n      present
      or MUST be equal to 0.  When the parameter is not present,\n      this receiver
      capability is not specified, and therefore the\n      sender MAY send out-of-band
      parameter sets only, it MAY send in-\n      band-parameter-sets only, or it
      MAY send both.\n   level-asymmetry-allowed:  This parameter MAY be used in SDP
      Offer/\n      Answer to indicate whether level asymmetry, i.e., sending media\n
      \     encoded at a different level in the offerer-to-answerer direction\n      than
      the level in the answerer-to-offerer direction, is allowed.\n      The value
      MAY be equal to either 0 or 1.  When the parameter is\n      not present, the
      value MUST be inferred to be equal to 0.  The\n      value 1 in both the offer
      and the answer indicates that level\n      asymmetry is allowed.  The value
      of 0 in either the offer or the\n      answer indicates that level asymmetry
      is not allowed.\n      If level-asymmetry-allowed is equal to 0 (or not present)
      in\n      either the offer or the answer, level asymmetry is not allowed.\n
      \     In this case, the level to use in the direction from the offerer\n      to
      the answerer MUST be the same as the level to use in the\n      opposite direction.\n
      \  packetization-mode:  This parameter signals the properties of an RTP\n      payload
      type or the capabilities of a receiver implementation.\n      Only a single
      configuration point can be indicated; thus, when\n      capabilities to support
      more than one packetization-mode are\n      declared, multiple configuration
      points (RTP payload types) must\n      be used.\n      When the value of packetization-mode
      is equal to 0 or\n      packetization-mode is not present, the single NAL mode
      MUST be\n      used.  This mode is in use in standards using ITU-T Recommendation\n
      \     H.241 [3] (see Section 12.1).  When the value of packetization-\n      mode
      is equal to 1, the non-interleaved mode MUST be used.  When\n      the value
      of packetization-mode is equal to 2, the interleaved\n      mode MUST be used.
      \ The value of packetization-mode MUST be an\n      integer in the range of
      0 to 2, inclusive.\n   sprop-interleaving-depth:  This parameter MUST NOT be
      present when\n      packetization-mode is not present or the value of packetization-\n
      \     mode is equal to 0 or 1.  This parameter MUST be present when the\n      value
      of packetization-mode is equal to 2.\n      This parameter signals the properties
      of an RTP packet stream.  It\n      specifies the maximum number of VCL NAL
      units that precede any VCL\n      NAL unit in the RTP packet stream in transmission
      order and that\n      follow the VCL NAL unit in decoding order.  Consequently,
      it is\n      guaranteed that receivers can reconstruct NAL unit decoding order\n
      \     when the buffer size for NAL unit decoding order recovery is at\n      least
      the value of sprop-interleaving-depth + 1 in terms of VCL\n      NAL units.\n
      \     The value of sprop-interleaving-depth MUST be an integer in the\n      range
      of 0 to 32767, inclusive.\n   sprop-deint-buf-req:  This parameter MUST NOT
      be present when\n      packetization-mode is not present or the value of packetization-\n
      \     mode is equal to 0 or 1.  It MUST be present when the value of\n      packetization-mode
      is equal to 2.\n      sprop-deint-buf-req signals the required size of the\n
      \     de-interleaving buffer for the RTP packet stream.  The value of\n      the
      parameter MUST be greater than or equal to the maximum buffer\n      occupancy
      (in units of bytes) required in such a de-interleaving\n      buffer that is
      specified in Section 7.2 of RFC 6184 [1].  It is\n      guaranteed that receivers
      can perform the de-interleaving of\n      interleaved NAL units into NAL unit
      decoding order, when the\n      de-interleaving buffer size is at least the
      value of\n      sprop-deint-buf-req in terms of bytes.\n      The value of sprop-deint-buf-req
      MUST be an integer in the range\n      of 0 to 4294967295, inclusive.\n         Informative
      note: sprop-deint-buf-req indicates the required\n         size of the de-interleaving
      buffer only.  When network jitter\n         can occur, an appropriately sized
      jitter buffer has to be\n         provisioned for as well.\n   deint-buf-cap:
      \ This parameter signals the capabilities of a receiver\n      implementation
      and indicates the amount of de-interleaving buffer\n      space in units of
      bytes that the receiver has available for\n      reconstructing the NAL unit
      decoding order.  A receiver is able to\n      handle any stream for which the
      value of the sprop-deint-buf-req\n      parameter is smaller than or equal to
      this parameter.\n      If the parameter is not present, then a value of 0 MUST
      be used\n      for deint-buf-cap.  The value of deint-buf-cap MUST be an integer\n
      \     in the range of 0 to 4294967295, inclusive.\n         Informative note:
      deint-buf-cap indicates the maximum possible\n         size of the de-interleaving
      buffer of the receiver only.  When\n         network jitter can occur, an appropriately
      sized jitter buffer\n         has to be provisioned for as well.\n   sprop-init-buf-time:
      \ This parameter MAY be used to signal the\n      properties of an RTP packet
      stream.  The parameter MUST NOT be\n      present if the value of packetization-mode
      is equal to 0 or 1.\n      The parameter signals the initial buffering time
      that a receiver\n      MUST wait before starting decoding to recover the NAL
      unit\n      decoding order from the transmission order.  The parameter is the\n
      \     maximum value of (decoding time of the NAL unit - transmission\n      time
      of a NAL unit), assuming reliable and instantaneous\n      transmission, the
      same timeline for transmission and decoding, and\n      commencement of decoding
      when the first packet arrives.\n      An example of specifying the value of
      sprop-init-buf-time follows.\n      A NAL unit stream is sent in the following
      interleaved order, in\n      which the value corresponds to the decoding time
      and the\n      transmission order is from left to right:\n         0 2 1 3 5
      4 6 8 7 ...\n      Assuming a steady transmission rate of NAL units, the transmission\n
      \     times are:\n         0 1 2 3 4 5 6 7 8 ...\n      Subtracting the decoding
      time from the transmission time column-\n      wise results in the following
      series:\n         0 -1 1 0 -1 1 0 -1 1 ...\n      Thus, in terms of intervals
      of NAL unit transmission times, the\n      value of sprop-init-buf-time in this
      example is 1.  The parameter\n      is coded as a non-negative base10 integer
      representation in clock\n      ticks of a 90-kHz clock.  If the parameter is
      not present, then no\n      initial buffering time value is defined.  Otherwise,
      the value of\n      sprop-init-buf-time MUST be an integer in the range of 0
      to\n      4294967295, inclusive.\n      In addition to the signaled sprop-init-buf-time,
      receivers SHOULD\n      take into account the transmission delay jitter buffering,\n
      \     including buffering for the delay jitter caused by mixers,\n      translators,
      gateways, proxies, traffic-shapers, and other network\n      elements.\n   sprop-max-don-diff:
      \ This parameter MAY be used to signal the\n      properties of an RTP packet
      stream.  It MUST NOT be used to signal\n      transmitter, receiver, or codec
      capabilities.  The parameter MUST\n      NOT be present if the value of packetization-mode
      is equal to 0 or\n      1. sprop-max-don-diff is an integer in the range of
      0 to 32767,\n      inclusive.  If sprop-max-don-diff is not present, the value
      of the\n      parameter is unspecified. sprop-max-don-diff is calculated as\n
      \     follows:\n         sprop-max-don-diff = max{AbsDON(i) - AbsDON(j)}, for
      any i and\n         any j>i,\n      where i and j indicate the index of the
      NAL unit in the\n      transmission order and AbsDON denotes a decoding order
      number of\n      the NAL unit that does not wrap around to 0 after 65535.  In
      other\n      words, AbsDON is calculated as follows: let m and n be consecutive\n
      \     NAL units in transmission order.  For the very first NAL unit in\n      transmission
      order (whose index is 0), AbsDON(0) = DON(0).  For\n      other NAL units, AbsDON
      is calculated as follows:\n      If DON(m) == DON(n), AbsDON(n) = AbsDON(m)\n
      \     If (DON(m) < DON(n) and DON(n) - DON(m) < 32768),\n      AbsDON(n) = AbsDON(m)
      + DON(n) - DON(m)\n      If (DON(m) > DON(n) and DON(m) - DON(n) >= 32768),\n
      \     AbsDON(n) = AbsDON(m) + 65536 - DON(m) + DON(n)\n      If (DON(m) < DON(n)
      and DON(n) - DON(m) >= 32768),\n      AbsDON(n) = AbsDON(m) - (DON(m) + 65536
      - DON(n))\n      If (DON(m) > DON(n) and DON(m) - DON(n) < 32768),\n      AbsDON(n)
      = AbsDON(m) - (DON(m) - DON(n))\n      where DON(i) is the decoding order number
      of the NAL unit having\n      index i in the transmission order.  The decoding
      order number is\n      specified in Section 5.5 of RFC 6184 [1].\n         Informative
      note: Receivers may use sprop-max-don-diff to\n         trigger which NAL units
      in the receiver buffer can be passed to\n         the decoder.\n   max-rcmd-nalu-size:
      \ This parameter MAY be used to signal the\n      capabilities of a receiver.
      \ The parameter MUST NOT be used for\n      any other purposes.  The value of
      the parameter indicates the\n      largest NALU size in bytes that the receiver
      can handle\n      efficiently.  The parameter value is a recommendation, not
      a\n      strict upper boundary.  The sender MAY create larger NALUs but\n      must
      be aware that the handling of these may come at a higher cost\n      than NALUs
      conforming to the limitation.\n      The value of max-rcmd-nalu-size MUST be
      an integer in the range of\n      0 to 4294967295, inclusive.  If this parameter
      is not specified,\n      no known limitation to the NALU size exists.  Senders
      still have\n      to consider the MTU size available between the sender and
      the\n      receiver and SHOULD run MTU discovery for this purpose.\n      This
      parameter is motivated by, for example, an IP to H.223 video\n      telephony
      gateway, where NALUs smaller than the H.223 transport\n      data unit will
      be more efficient.  A gateway may terminate IP;\n      thus, MTU discovery will
      normally not work beyond the gateway.\n         Informative note: Setting this
      parameter to a lower than\n         necessary value may have a negative impact.\n
      \  sar-understood:  This parameter MAY be used to indicate a receiver\n      capability
      and nothing else.  The parameter indicates the maximum\n      value of aspect_ratio_idc
      (specified in H.264 [2]) smaller than\n      255 that the receiver understands.
      \ Table E-1 of H.264 [2]\n      specifies aspect_ratio_idc equal to 0 as \"unspecified\";
      1 to 16,\n      inclusive, as specific Sample Aspect Ratios (SARs); 17 to 254,\n
      \     inclusive, as \"reserved\"; and 255 as the Extended SAR, for which\n      SAR
      width and SAR height are explicitly signaled.  Therefore, a\n      receiver
      with a decoder according to H.264 [2] understands\n      aspect_ratio_idc in
      the range of 1 to 16, inclusive, and\n      aspect_ratio_idc equal to 255, in
      the sense that the receiver\n      knows exactly what the SAR is.  For such
      a receiver, the value of\n      sar-understood is 16.  In the future, if Table
      E-1 of H.264 [2] is\n      extended, e.g., such that the SAR for aspect_ratio_idc
      equal to 17\n      is specified, then for a receiver with a decoder that understands\n
      \     the extension, the value of sar-understood is 17.  For a receiver\n      with
      a decoder according to the 2003 version of H.264 [2], the\n      value of sar-understood
      is 13, as the minimum reserved\n      aspect_ratio_idc therein is 14.\n      When
      sar-understood is not present, the value MUST be inferred to\n      be equal
      to 13.\n   sar-supported:  This parameter MAY be used to indicate a receiver\n
      \     capability and nothing else.  The value of this parameter is an\n      integer
      in the range of 1 to sar-understood, inclusive, equal to\n      255.  The value
      of sar-supported equal to N smaller than 255\n      indicates that the receiver
      supports all the SARs corresponding to\n      H.264 aspect_ratio_idc values
      (see Table E-1 of H.264 [2]) in the\n      range from 1 to N, inclusive, without
      geometric distortion.  The\n      value of sar-supported equal to 255 indicates
      that the receiver\n      supports all sample aspect ratios that are expressible
      using two\n      16-bit integer values as the numerator and denominator, i.e.,\n
      \     those that are expressible using the H.264 aspect_ratio_idc value\n      of
      255 (Extended_SAR, see Table E-1 of H.264 [2]), without\n      geometric distortion.\n
      \     H.264-compliant encoders SHOULD NOT send an aspect_ratio_idc equal\n      to
      0 or an aspect_ratio_idc larger than sar-understood and smaller\n      than
      255.  H.264-compliant encoders SHOULD send an\n      aspect_ratio_idc that the
      receiver is able to display without\n      geometrical distortion.  However,
      H.264-compliant encoders MAY\n      choose to send pictures using any SAR.\n
      \     Note that the actual sample aspect ratio or extended sample aspect\n      ratio,
      when present, of the stream is conveyed in the Video\n      Usability Information
      (VUI) part of the sequence parameter set.\n   Encoding considerations:  This
      type is only defined for transfer via\n      RTP (RFC 3550) and is framed and
      binary (see Section 4.8 in RFC\n      4288).\n   Security considerations:  See
      Section 9 of RFC 6185.\n   Interoperability considerations:  None\n   Published
      specification:  RFC 6185 and its reference section\n   Applications that use
      this media type:  Video streaming and\n      conferencing applications\n   Additional
      information:  None\n      Magic number(s):\n      File extension(s):\n      Macintosh
      file type code(s):\n   Person & email address to contact for further information:\n
      \     Tom Kristensen <tom.kristensen@tandberg.com>, <tomkri@ifi.uio.no>\n   Intended
      usage:  COMMON\n   Restrictions on usage:  This type depends on RTP framing;
      hence, it\n      is only defined for transfer via RTP (see RFC 3550).  Transport\n
      \     within other framing protocols is not defined at this time.\n   Author:
      \ Tom Kristensen\n   Change controller:  IETF Audio/Video Transport Working
      Group\n      delegated from the IESG\n"
    title: 6.1.  Media Type Definition
  title: 6.  Payload Format Parameters
- contents:
  - "7.  Mapping to SDP\n   The mapping of the above defined payload format media
    subtype and its\n   parameters SHALL be done according to Section 3 of RFC 4855
    [10].\n   An example of the \"fmtp\" attribute in the media representation of
    a\n   level 2.2 bitstream is as follows:\n      a=fmtp:97 profile-level-id=008016\n"
  - contents:
    - "7.1.  Offer/Answer Considerations\n   When H264-RCDO is offered over RTP using
      SDP in an Offer/Answer model\n   [5] for unicast and multicast usage, the limitations
      and rules\n   described in Section 8.2.2 of RFC 6184 [1] apply.  Note that the\n
      \  profile_idc byte of the H264-RCDO profile-level-id parameter can only\n   take
      the value of 0 (no profile).\n   For interoperability with systems not supporting
      H264-RCDO, it is\n   RECOMMENDED to offer the H264 media subtype as well.  As
      specified in\n   RFC 3264 [5], listing the payload number for H264-RCDO before
      H264 in\n   the format list on the \"m=\" line signals that H264-RCDO is preferred\n
      \  over H264.  Following is an example where this scheme is applied:\n      m=video
      5555 RTP/AVP 97 98\n      a=rtpmap:97 H264-RCDO/90000\n      a=fmtp:97 profile-level-id=008016;max-mbps=42000;max-smbps=323500\n
      \     a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=428016;max-mbps=35000;max-smbps=323500\n"
    title: 7.1.  Offer/Answer Considerations
  - contents:
    - "7.2.  Declarative SDP Considerations\n   When H264-RCDO over RTP is offered
      with SDP in a declarative style,\n   as in the Real Time Streaming Protocol
      (RTSP) [11] or the Session\n   Announcement Protocol (SAP) [12], the considerations
      in Section 8.2.3\n   of RFC 6184 [1] apply.  Note that the profile_idc byte
      of the H264-\n   RCDO profile-level-id parameter can only take the value of
      0 (no\n   profile).\n"
    title: 7.2.  Declarative SDP Considerations
  title: 7.  Mapping to SDP
- contents:
  - "8.  IANA Considerations\n   IANA has registered H264-RCDO as specified in Section
    6.1.  The media\n   subtype has also been added to the IANA registry for \"RTP
    Payload\n   Format MIME types\" (http://www.iana.org).\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [6] and in any applicable RTP profile.  Refer also
    to\n   the security considerations of the RTP Payload Format for H.264 Video\n
    \  specification in RFC 6184 [1].  No additional security considerations\n   are
    introduced by this specification.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgements\n   The authors would like to acknowledge Gisle Bjoentegaard
    and Arild\n   Fuldseth for their technical contribution to the specification.
    \ In\n   the final phases, Roni Even did a helpful review.\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [1]   Wang, Y., Even, R., Kristensen, T., and
      R. Jesup, \"RTP Payload\n         Format for H.264 Video\", RFC 6184, May 2011.\n
      \  [2]   International Telecommunications Union, \"Advanced video coding\n         for
      generic audiovisual services\", ITU-T Recommendation H.264,\n         March
      2010.\n   [3]   International Telecommunications Union, \"Extended video\n         procedures
      and control signals for H.300-series terminals\",\n         ITU-T Recommendation
      H.241, May 2006.\n   [4]   Bradner, S., \"Key words for use in RFCs to Indicate
      Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n   [5]   Rosenberg,
      J. and H. Schulzrinne, \"An Offer/Answer Model with\n         Session Description
      Protocol (SDP)\", RFC 3264, June 2002.\n   [6]   Schulzrinne, H., Casner, S.,
      Frederick, R., and V. Jacobson,\n         \"RTP: A Transport Protocol for Real-Time
      Applications\", STD 64,\n         RFC 3550, July 2003.\n   [7]   Schulzrinne,
      H. and S. Casner, \"RTP Profile for Audio and Video\n         Conferences with
      Minimal Control\", STD 65, RFC 3551, July 2003.\n   [8]   Handley, M., Jacobson,
      V., and C. Perkins, \"SDP: Session\n         Description Protocol\", RFC 4566,
      July 2006.\n   [9]   Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\",\n
      \        RFC 4648, October 2006.\n   [10]  Casner, S., \"Media Type Registration
      of RTP Payload Formats\",\n         RFC 4855, February 2007.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [11]  Schulzrinne, H., Rao, A., and R. Lanphier,
      \"Real Time Streaming\n         Protocol (RTSP)\", RFC 2326, April 1998.\n   [12]
      \ Handley, M., Perkins, C., and E. Whelan, \"Session Announcement\n         Protocol\",
      RFC 2974, October 2000.\n   [13]  Freed, N. and J. Klensin, \"Media Type Specifications
      and\n         Registration Procedures\", BCP 13, RFC 4288, December 2005.\n
      \  [14]  Lennox, J., Ott, J., and T. Schierl, \"Source-Specific Media\n         Attributes
      in the Session Description Protocol (SDP)\",\n         RFC 5576, June 2009.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Tom Kristensen\n   TANDBERG\n   Philip Pedersens vei 22\n
    \  N-1366 Lysaker\n   Norway\n   Phone: +47 67125125\n   EMail: tom.kristensen@tandberg.com,
    tomkri@ifi.uio.no\n   URI:   http://www.tandberg.com\n   Patrick Luthi\n   TANDBERG\n
    \  Philip Pedersens vei 22\n   N-1366 Lysaker\n   Norway\n   EMail: patrick.luthi@tandberg.com\n
    \  URI:   http://www.tandberg.com\n"
  title: Authors' Addresses
