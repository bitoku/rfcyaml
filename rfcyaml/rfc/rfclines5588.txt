Abstract This document defines a new function for the Generic Security Service Application Program Interface (GSS API), which allows applications to store delegated (and other) credentials in the implicit GSS API credential store.
This is needed for GSS API applications to use delegated credentials as they would use other credentials.
The GSS API [RFC2743] clearly assumes that credentials exist in an implicit store whence they can be acquired using GSS Acquire cred() and GSS Add cred() or through use of the default credential.
Multiple credential stores may exist on a given host, but only one store may be accessed by GSS Acquire cred() and GSS Add cred() at any given time.
This assumption can be seen in Sections 1.1.1.2 and 1.1.1.3 of [RFC2743] as well as in Section 3.5 of [RFC2744].
Applications may be able to change the credential store from which credentials can be acquired, either by changing user contexts (where the applications have the privilege to do so) or by other means (where a user may have multiple credential stores).
Some GSS API acceptor applications always change user contexts, after accepting a GSS API security context and making appropriate authorization checks, to the user context corresponding to the initiator principal name or to a context requested by the initiator.
The means by which credential stores are managed are generally beyond the scope of the GSS API.
In the case of delegated credential handles however, such credentials do not exist in the acceptor's credential store or in the credential stores of the user contexts to which the acceptor application might change.
The GSS API provides no mechanism by which delegated credential handles can be made available for acquisition through GSS Acquire cred()/GSS Add cred().
The GSS API also does not provide any credential import/export interfaces like the GSS API context import/export interfaces.
This limitation is particularly onerous on Unix systems where a call to exec() to replace the process image obliterates any delegated credentials handle that may exist in that process.
In order to make delegated credentials generally as useful as credentials that can be acquired with GSS Acquire cred() and GSS Add cred(), a primitive is needed that allows storing of credentials in the implicit credential store.
We call this primitive "GSS Store cred()".
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
() Inputs:  input cred handle CREDENTIAL HANDLE,   credential to store
; MUST NOT be GSS C NO CREDENTIAL.
INITIATE AND ACCEPT, 1 INITIATE ONLY, 2 ACCEPT ONLY.
desired mech element OBJECT IDENTIFIER,   if GSS C NULL OID, then store all the elements of the input cred handle, otherwise, store only the element of the corresponding mechanism.
overwrite cred BOOLEAN,   if TRUE, replace any credential for the same principal in the credential store.
default cred BOOLEAN   advisory input; if TRUE, make the stored credential available as the default credential (for acquisition with GSS C NO NAME as the desired name or for use as GSS C NO CREDENTIAL).
mech elements stored SET OF OBJECT IDENTIFIER,   the set of mechanism OIDs for which credential elements were successfully stored.
cred usage stored INTEGER   like cred usage, but indicates what kind of credential was stored (useful when the cred usage input parameter is set to INITIATE AND ACCEPT).
GSS S COMPLETE indicates that the credentials were successfully stored.
GSS S CREDENTIALS EXPIRED indicates that the input credentials had expired or expired before they could be stored.
NO CRED indicates that no input credentials were given.
GSS S UNAVAILABLE indicates that the credential store is not available.
GSS S DUPLICATE ELEMENT indicates that an element of the input credential could not be stored because a credential for the same principal exists in the current credential store and the overwrite cred input argument was FALSE.
GSS S FAILURE indicates that the credential could not be stored for some other reason.
The minor status code may provide more information if a non GSS C NULL OID desired mech element was given.
GSS Store cred() is used to store, in the current credential store, a given credential that has either been acquired from a different credential store or been accepted as a delegated credential.
Specific mechanism elements of a credential can be stored one at a time by specifying a non GSS C NULL OID mechanism OID as the desired mech element input argument; in which case, the minor status output SHOULD have a mechanism specific value when the major status is not GSS S COMPLETE.
The initiator, acceptor, or both usages of the input credential may be stored as per the cred usage input argument.
The credential elements that were actually stored, when the major status is GSS S COMPLETE, are indicated through the cred usage stored and mech elements stored function outputs.
If credentials already exist in the current store for the principal of the input cred handle, then those credentials are not replaced with the input credentials unless the overwrite cred input argument is TRUE.
In the GSS API, the default credential can be used by using GSS C NO CREDENTIAL or a CREDENTIAL handle acquired by calling GSS Acquire cred() or GSS Add cred() with the desired name input set to GSS C NO NAME.
If the default cred input argument is TRUE, and the input credential can be successfully stored, then the input credential SHOULD be stored as the default credential (see above).
If the current credential store has no default credential (see above), then the implementation MAY make the stored credentials available as the default credential regardless of the value of the default cred input argument.
The C Bindings for GSS Store cred() make use of types from and are designed based on the style of the GSS APIv2 C Bindings [RFC2744].
The two boolean arguments, 'overwrite cred' and 'default cred', are typed as OM uint32; 0 corresponds to FALSE, non zero values correspond to TRUE.
The intended usage of GSS Store cred() is to make delegated credentials available to child processes of GSS API acceptor applications.
<"requested username" is a username derived from the   initiator name or explicitly requested by the initiator   application.
this may mean calling setuid() and   it may or may not also mean setting/
unsetting such   environment variables as
/ if (change user context(requested username))
Security Considerations Acceptor applications MUST only store delegated credentials into appropriate credential stores and only after proper authorization of the authenticated initiator principal to the requested service(s).
Acceptor applications that have no use for delegated credentials MUST release them
(such acceptor applications that use the GSS API C  Bindings may simply provide a NULL value for the delegated cred handle argument to gss accept sec context()).
