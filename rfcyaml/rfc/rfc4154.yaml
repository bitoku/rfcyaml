- title: __initial_text__
  contents:
  - '   Voucher Trading System Application Programming Interface (VTS-API)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document is not a candidate for any level of Internet Standard.\n\
    \   This document specifies the Voucher Trading System Application\n   Programming\
    \ Interface (VTS-API), which assumes that the VTS plug-in\n   is trusted by its\
    \ user.  The application making calls to VTS-API\n   ought to authenticate the\
    \ VTS plug-in and securely bind the plug-in\n   with the VTS provider information\
    \ specified in the Voucher Component.\n   However, this document does not specify\
    \ an approach to application\n   authentication.  The VTS-API should not be used\
    \ without being\n   augmented by an application authentication mechanism.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Voucher Trading System Application\n\
    \   Programming Interface (VTS-API).  The VTS-API allows a wallet or\n   other\
    \ application to issue, transfer, and redeem vouchers in a\n   uniform manner\
    \ independent of the VTS implementation.  The VTS is a\n   system for securely\
    \ transferring vouchers; e.g., coupons, tickets,\n   loyalty points, and gift\
    \ certificates.  This process is often\n   necessary in the course of payment\
    \ and/or delivery transactions.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction .................................................\
    \  3\n   2.  Processing Model .............................................  4\n\
    \   3.  Design Overview ..............................................  6\n  \
    \ 4.  Concepts .....................................................  6\n   5.\
    \  Interface Definitions ........................................  8\n       5.1.\
    \ VTSManager ..............................................  8\n            5.1.1.\
    \ getParticipantRepository .........................  8\n            5.1.2. getVoucherComponentRepository\
    \ ....................  8\n       5.2. ParticipantRepository ...................................\
    \  9\n            5.2.1. lookup ...........................................  9\n\
    \       5.3. Participant .............................................  9\n  \
    \          5.3.1. getIdentifier .................................... 10\n    \
    \        5.3.2. getVTSAgent ...................................... 10\n      \
    \ 5.4. VTSAgent ................................................ 10\n        \
    \    5.4.1. login ............................................ 11\n          \
    \  5.4.2. logout ........................................... 12\n            5.4.3.\
    \ prepare .......................................... 12\n            5.4.4. issue\
    \ ............................................ 13\n            5.4.5. transfer\
    \ ......................................... 14\n            5.4.6. consume ..........................................\
    \ 15\n            5.4.7. present .......................................... 16\n\
    \            5.4.8. cancel ........................................... 17\n  \
    \          5.4.9. resume ........................................... 18\n    \
    \        5.4.10. create .......................................... 18\n      \
    \      5.4.11. delete .......................................... 19\n        \
    \    5.4.12. getContents ..................................... 19\n          \
    \  5.4.13. getSessions ..................................... 19\n            5.4.14.\
    \ getLog .......................................... 20\n            5.4.15. addReceptionListener\
    \ ............................ 20\n            5.4.16. removeReceptionListener\
    \ ......................... 21\n       5.5. Session .................................................\
    \ 21\n            5.5.1. getIdentifier .................................... 21\n\
    \            5.5.2. getVoucher ....................................... 22\n  \
    \          5.5.3. getSender ........................................ 22\n    \
    \        5.5.4. getReceiver ...................................... 22\n      \
    \      5.5.5. isPrepared ....................................... 22\n        \
    \    5.5.6. isActivated ...................................... 23\n          \
    \  5.5.7. isSuspended ...................................... 23\n            5.5.8.\
    \ isCompleted ...................................... 23\n       5.6. Voucher .................................................\
    \ 23\n            5.6.1. getIssuer ........................................ 23\n\
    \            5.6.2. getPromise ....................................... 24\n  \
    \          5.6.3. getCount ......................................... 24\n    \
    \   5.7. VoucherComponentRepository .............................. 24\n      \
    \      5.7.1. register ......................................... 24\n       5.8.\
    \ VoucherComponent ........................................ 25\n            5.8.1.\
    \ getIdentifier .................................... 25\n            5.8.2. getDocument\
    \ ...................................... 26\n       5.9. ReceptionListener .......................................\
    \ 26\n            5.9.1. arrive ........................................... 26\n\
    \       5.10. Exceptions ............................................. 27\n  \
    \ 6.  Example Code ................................................. 28\n   7.\
    \  Security Considerations ...................................... 29\n   8.  Acknowledgements\
    \ ............................................. 30\n   9.  Normative References\
    \ ......................................... 30\n   10. Informative References\
    \ ....................................... 30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the Voucher Trading System Application\n\
    \   Programming Interface (VTS-API).  The motivation and background of\n   the\
    \ Voucher Trading System (VTS) are described in Requirements for\n   Generic Voucher\
    \ Trading [VTS].\n   A voucher is a logical entity that represents a certain right,\
    \ and it\n   is logically managed by the VTS.  A voucher is generated by the\n\
    \   issuer, traded among users, and finally collected using VTS.  The\n   terminology\
    \ and model of the VTS are also described in [VTS].\n   VTSes can be implemented\
    \ in different ways, such as a centralized\n   VTS, which uses a centralized online\
    \ server to store and manage all\n   vouchers, or a distributed VTS, which uses\
    \ per-user smartcards to\n   maintain the vouchers owned by each user.  However,\
    \ the VTS-API\n   allows a caller application to issue, transfer, and redeem vouchers\n\
    \   in a uniform manner independent of the VTS implementation.  Several\n   attempts\
    \ have been made to provide a generic payment API.  Java\n   Commerce Client [JCC]\
    \ and Generic Payment Service Framework [GPSF],\n   for example, introduce a modular\
    \ wallet architecture that permits\n   diverse types of payment modules to be\
    \ added as plug-ins and supports\n   both check-like/cash-like payment models.\
    \  This document is inspired\n   by these approaches but its scope is limited\
    \ to the VTS model, in\n   which the cash-like payment model is assumed and vouchers\
    \ are\n   directly or indirectly transferred between the sender (transferor)\n\
    \   and receiver (transferee) via the VTS.  This document is not intended\n  \
    \ to support API for SET, e-check, or other payment schemes that do not\n   fit\
    \ the VTS model.\n   Unlike the APIs provided in JCC and GPSF, which are designed\
    \ to\n   transfer only monetary values, this API enables the transfer of a\n \
    \  wide range of values through the use of XML-based Generic Voucher\n   Language\
    \ [GVL].  The monetary meaning of the voucher is interpreted\n   by the upper\
    \ application layer using the information described in the\n   language.  This\
    \ approach makes it possible to provide a simpler API\n   in the voucher-transfer\
    \ layer and enhances runtime efficiency.  The\n   API specification in this document\
    \ is described in the Java language\n   syntax.  Bindings for other programming\
    \ languages may be completed in\n   a future version of this document or in separate\
    \ related\n   specifications.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119]\n"
- title: 2.  Processing Model
  contents:
  - "2.  Processing Model\n   This section provides the processing model in which\
    \ the VTS-API is\n   used.  A part of the text in this section has been taken\
    \ from the\n   Generic Voucher Language specification [GVL].\n   There are several\
    \ ways to implement VTS.  For discount coupons or\n   event tickets, for example,\
    \ a smartcard-based distributed offline VTS\n   is often preferred, whereas for\
    \ bonds or securities, a centralized\n   online VTS is preferred.  While distributed\
    \ VTSes would utilize\n   public (asymmetric) key-based or shared (symmetric)\
    \ key-based\n   cryptographic challenge-and-response protocols to trade vouchers\n\
    \   securely, centralized VTSes would utilize transactions that rewrite\n   ownerships\
    \ of vouchers on their database.  Therefore, it is\n   impractical to define standard\
    \ protocols for issuing, transferring,\n   or redeeming vouchers at this time.\n\
    \   To provide implementation flexibility, this document assumes a\n   modular\
    \ wallet architecture that allows multiple VTSes to be added as\n   plug-ins.\
    \  In this architecture, instead of specifying a standard\n   voucher transfer\
    \ protocol, two specifications, Voucher Component and\n   VTS-API, are standardized\
    \ (Figure 1).\n   Sender wallet/Issuing system      Receiver wallet/Collecting\
    \ system\n   +---------------------------+       +---------------------------+\n\
    \   |                           |       |                           |\n   |  |\
    \                    Voucher Component                    |  |\n   |  |      \
    \    (Specifies VTS Provider and Promise)           |  |\n   |  |-------------------------------------------------------->|\
    \  |\n   |  |                        |       |                        |  |\n \
    \  |  |         Intention to receive and payment (option)       |  |\n   |  |<-\
    \ - - - - - - - - - - - - - - - - - - - - - - - - - - - |  |\n   |  |        \
    \                |       |                        |  |\n   |  |              \
    \          |       |                        |  |\n   |  | Issue/transfer/  VTS\
    \   |       |   VTS      Register    |  |\n   |  | redeem request   plug-in  \
    \     |   plug-in  Listener(*1)|  |\n   |  |------------------>|    |       |\
    \    |<------------------|  |\n   |  | (VTS API)         |<- - - - - - - ->| \
    \        (VTS API) |  |\n   |  |                   | VTS-specific    |       \
    \            |  |\n   |  |                   | protocol if VTS |             \
    \      |  |\n   |  |                   | is distributed  |                   |\
    \  |\n   |  |  Result           |<- - - - - - - ->|       Notify(*2)  |  |\n \
    \  |  |<------------------|    |       |    |------------------>|  |\n   +---------------------------+\
    \       +---------------------------+\n   (*1) Registration is optional.  Note\
    \ also that the VTS plug-ins are\n        usually pre-registered when the wallet\
    \ or collecting system\n        is started.\n   (*2) If a listener is registered.\n\
    \              Figure 1. Wallet architecture with VTS plug-ins\n   In this architecture,\
    \ a VTS provides a logical view of vouchers\n   called a Valid Voucher Set (VVS),\
    \ which is a set that includes the\n   vouchers <I,P,H> managed by the VTS [VTS].\
    \  A user's wallet can\n   access (e.g., view, transfer, and redeem) the subset\
    \ of the VVS that\n   includes a set of vouchers owned by the user by interacting\
    \ with the\n   VTS plug-in via the VTS-API.  Likewise, an issuing system can issue\
    \ a\n   voucher and add it to the VVS, and a collecting system can be\n   notified\
    \ of the redemption of vouchers via the VTS-API.\n   After a sender and a receiver\
    \ agree on what vouchers are to be traded\n   and which VTS is to be used, the\
    \ issuing system or wallet system\n   requests the corresponding VTS plug-in to\
    \ permit the issue, transfer,\n   or redemption transactions to be performed via\
    \ the VTS-API.  The VTS\n   then logically rewrites the ownership of the vouchers\
    \ on the VVS\n   using the VTS-specific protocol.  Since the VTS is responsible\
    \ for\n   preventing illegal acts on vouchers like forgery or reproduction, as\n\
    \   required in [VTS], the protocol would include a cryptographic\n   challenge-and-response\
    \ (in a distributed VTS) or a transactional\n   database manipulation with adequate\
    \ access controls (in a centralized\n   VTS).  Finally, a completion event is\
    \ sent to the wallet systems or\n   issuing/collecting systems.\n   This document\
    \ describes the VTS-API specification.  See [GVL] for the\n   Voucher Component\
    \ specification that gives the syntax and semantics\n   for describing and interpreting\
    \ the meaning of vouchers.\n"
- title: 3.  Design Overview
  contents:
  - "3.  Design Overview\n   We have adopted the following approach to specify the\
    \ VTS-API.\n      1) Provide an abstract and uniform API that encapsulates the\
    \ VTS\n         implementation.  For example, a common API is provided for both\n\
    \         centralized and distributed VTSes.  Issuers and application\n      \
    \   developers have more freedom in VTS selection.\n      2) To provide an abstract\
    \ and uniform API, this document\n         introduces an interface called VTSAgent\
    \ that is associated with\n         a holder and provides methods to manipulate\
    \ vouchers held by\n         its holder.  Vouchers are accessed through the methods\
    \ provided\n         by the VTSAgent.\n      3) Use existing standards for the\
    \ VTS branding mechanism\n         (negotiation).  This document assumes that\
    \ the VTS to be used\n         for sending a voucher has settled the VTS-APIs\
    \ are called.\n         Negotiation can be done within the upper application layer\n\
    \         using other standards (e.g., [IOTP] or [ECML]), if necessary.\n    \
    \  4) Support only the push-type voucher transfer interface, in which\n      \
    \   the voucher transfer session is initiated by the transferor\n         side.\
    \  A pull-type voucher transfer interface can be\n         implemented on top\
    \ of the push-type VTS interface at the\n         application level.\n"
- title: 4.  Concepts
  contents:
  - "4.  Concepts\n   The VTS-API consists of the following interfaces.  A VTS is\
    \ required\n   to implement all of the interfaces except ReceptionListener, which\
    \ is\n   intended to be implemented by wallets or other applications that use\n\
    \   VTS.\n      VTSManager\n         Provides the starting point for using a VTS\
    \ plug-in.  All of\n         the objects needed to manipulate vouchers can be\
    \ directly or\n         indirectly acquired via the VTSManager.  A VTSManager\
    \ maintains\n         the two repositories: a ParticipantRepository and a\n  \
    \       VoucherComponentRepository, both of which are described below.\n     \
    \ ParticipantRepository\n         Provides the access points of participants that\
    \ are to be\n         trading partners.  A ParticipantRepository maintains\n \
    \        Participants and acts as an \"address book\" of trading partners.\n \
    \     Participant\n         Represents a participant (such as an issuer, a holder,\
    \ or a\n         collector).  A Participant interface knows how to obtain the\n\
    \         corresponding VTSAgent described below.\n      VTSAgent (extends Participant)\n\
    \         Provides the access point of vouchers in the Valid Voucher Set\n   \
    \      (VVS) that is logically managed by the VTS.  A VTSAgent\n         provides\
    \ a means of manipulating vouchers held by its holder\n         according to basic\
    \ trading methods; i.e., issue, transfer,\n         consume, and present.  Before\
    \ calling trading methods, the\n         application must create a Session, which\
    \ is described below.\n      Session\n         Represents the logical connection\
    \ established by the trade.  A\n         Session has references to two Participant\
    \ interfaces; i.e.,\n         those of the sender and the receiver.  After trading\
    \ methods\n         are called using a Session, the Session holds a reference\
    \ to\n         the Vouchers to be traded.\n      Voucher\n         Represents\
    \ one or more vouchers in which all of the issuer and\n         promise parts\
    \ of the vouchers are the same.  A Voucher holds\n         references to the Participant\
    \ interface who issued the voucher\n         (issuer) and to a VoucherComponent\
    \ (promise), which is\n         described below.\n      VoucherComponent\n   \
    \      Represents a Voucher Component, described in [GVL].  It defines\n     \
    \    the promise part of the voucher.\n      VoucherComponentRepository\n    \
    \     Provides the access points of VoucherComponents.  A\n         VoucherComponentRepository\
    \ maintains VoucherComponents and acts\n         as a \"voucher type book\" managed\
    \ by the VTS.  This document\n         assumes that a set of VoucherComponents\
    \ has been acquired and\n         stored in this repository.  Delivery of VoucherComponents\
    \ is\n         beyond the scope of this document.  It may be delivered within\n\
    \         the VTS from the trading partners or manually acquired from a\n    \
    \     trusted third party (see Section 3 of [GVL]).\n      ReceptionListener\n\
    \         Provides a listener function with regard to the receipt of a\n     \
    \    voucher by a VTSAgent to wallets or other applications that\n         implement\
    \ this interface.  (This interface may not be\n         implemented as part of\
    \ the VTS.)\n"
- title: 5.  Interface Definitions
  contents:
  - "5.  Interface Definitions\n   The interfaces defined in this document reside\
    \ in the package named\n   \"org.ietf.vts\".  Wallets or other applications that\
    \ use this API,\n   should import this package as \"import org.ietf.vts.*;\".\n"
- title: 5.1.  VTSManager
  contents:
  - "5.1.  VTSManager\n   public interface VTSManager\n      Provides the starting\
    \ point for using a VTS plug-in.\n      All of the objects needed to manipulate\
    \ vouchers can be directly\n      or indirectly acquired via a VTSManager so that\
    \ wallets or other\n      applications can make the VTS available by instantiating\
    \ an object\n      implementing this interface.\n      A class that implements\
    \ the VTSManager interface must have a\n      public default constructor (a constructor\
    \ without any parameters).\n      The VTS provides a name for such a constructor\
    \ so that the\n      implementation class can bootstrap the interface.\n"
- title: 5.1.1.  getParticipantRepository
  contents:
  - "5.1.1.  getParticipantRepository\n   public ParticipantRepository getParticipantRepository()\n\
    \      Returns a repository that maintains Participants.\n   Returns:\n      the\
    \ ParticipantRepository of the VTS, or null if no\n      ParticipantRepository\
    \ is available.\n"
- title: 5.1.2.  getVoucherComponentRepository
  contents:
  - "5.1.2.  getVoucherComponentRepository\n   public VoucherComponentRepository getVoucherComponentRepository()\n\
    \      Returns a repository that maintains VoucherComponents.\n   Returns:\n \
    \     the VoucherComponentRepository of the VTS, or null if no\n      VoucherComponentRepository\
    \ is available.\n"
- title: 5.2.  ParticipantRepository
  contents:
  - "5.2.  ParticipantRepository\n   public interface ParticipantRepository\n    \
    \  Provides the access points of Participants.  A\n      ParticipantRepository\
    \ maintains Participants and acts as an\n      \"address book\" of trading partners.\n\
    \      The object implementing this interface maintains Participants (or\n   \
    \   holds a reference to an object maintaining Participants), which\n      are\
    \ to be trading partners.\n      The implementation of a ParticipantRepository\
    \ may be either (an\n      adaptor to) \"yellow pages\", which is a network-wide\
    \ directory\n      service like LDAP, or \"pocket address book\", which maintains\
    \ only\n      personal acquaintances.\n"
- title: 5.2.1.  lookup
  contents:
  - "5.2.1.  lookup\n   public Participant lookup(String id)\n      Retrieves the\
    \ participant that has the specified id.\n   Returns:\n      the participant associated\
    \ with the specified id, or null if the\n      id is null or the corresponding\
    \ participant cannot be found.\n"
- title: 5.3.  Participant
  contents:
  - "5.3.  Participant\n   public interface Participant\n      Represents the participants\
    \ (such as issuers, holders, and\n      collectors).\n      This interface is\
    \ used as a representation of the trade partners\n      and issuers of vouchers.\
    \  Anyone can retrieve objects that\n      implement Participants from the participant\
    \ repository.\n"
- title: 5.3.1.  getIdentifier
  contents:
  - "5.3.1.  getIdentifier\n   public String getIdentifier()\n      Returns the identifier\
    \ of the participant.  Each participant must\n      have a unique identifier.\n\
    \      The identifier can be used for looking up and retrieving the\n      participant\
    \ via the ParticipantRepository.\n      The format of the identifier is implementation-specific.\n\
    \   Returns:\n      the identifier string of the participant.\n"
- title: 5.3.2.  getVTSAgent
  contents:
  - "5.3.2.  getVTSAgent\n   VTSAgent getVTSAgent()\n      Returns a VTSAgent, whose\
    \ identifier is the same as the identifier\n      of the participant.\n   Returns:\n\
    \      an object that implements the VTSAgent.\n"
- title: 5.4.  VTSAgent
  contents:
  - "5.4.  VTSAgent\n   public interface VTSAgent extends Participant\n      Represents\
    \ contact points to access vouchers in a Valid Voucher\n      Set (VVS) that is\
    \ managed by the VTS.\n      Each VTSAgent is associated with a holder and provides\
    \ a means for\n      managing vouchers owned by the holder.  The holder must be\n\
    \      authenticated using the login() method before being called by any\n   \
    \   other method, otherwise, a VTSSecurityException will be issued.\n      Before\
    \ any trading method is called, e.g., issue(), transfer(),\n      consume(), and\
    \ present(), the application must establish a session\n      by the prepare()\
    \ method.\n      Due to network failure, sessions may often be suspended when\
    \ the\n      voucher is sent via a network.  The suspended sessions can be\n \
    \     restarted by the resume() method.  Details on the state management\n   \
    \   of a session are described in Section 5.5.\n      Some VTSAgents may not have\
    \ all of the trading methods; a voucher\n      collecting system doesn't require\
    \ its VTSAgent to provide a method\n      for issuing or creating vouchers.  A\
    \ VTSAgent returns a\n      FeatureNotAvailableException when an unsupported method\
    \ is\n      invoked.\n"
- title: 5.4.1.  login
  contents:
  - "5.4.1.  login\n   public void login(String passphrase)\n          throws VTSException\n\
    \      Authenticates the VTSAgent.  The passphrase is specified if the\n     \
    \ VTS requires it for authentication, otherwise it must be null.\n      Nothing\
    \ is performed if the VTSAgent has already been logged-in.\n      The authentication\
    \ scheme is implementation-specific.  Examples of\n      the implementation are\
    \ as follows:\n      1) Vouchers are managed on a remote centralized server\n\
    \         (centralized VTS), which requires a password to login.  In this\n  \
    \       case, the application may prompt the user to input the password\n    \
    \     and the password can be given to the VTSAgent through this\n         method.\
    \  For further information, see the Implementation Notes\n         below.\n  \
    \    2) Vouchers are managed on a remote centralized server\n         (centralized\
    \ VTS), which requires challenge-and-response\n         authentication using smartcards\
    \ held by users.  In this case,\n         the passphrase may be null because access\
    \ to the smartcard can\n         be done without contacting the application or\
    \ user (i.e., the\n         VTSAgent receives the challenge from the server, sends\
    \ the\n         challenge to the smartcard (within the VTS), and returns the\n\
    \         response from the smartcard to the server).  Note that a PIN to\n  \
    \       unlock the smartcard may be given through this method,\n         depending\
    \ on the implementation.\n      3) Each user holds their own smartcard in which\
    \ their own vouchers\n         are stored (distributed VTS).  In this case, the\
    \ passphrase may\n         be null because no authentication is required.  Note\
    \ that a PIN\n         to unlock the smartcard may be given, though this depends\
    \ on\n         the implementation.\n      Implementation Notes:\n         A VTS\
    \ is responsible for providing secure ways for users to\n         login().  It\
    \ is strongly recommended that secure communication\n         channels such as\
    \ [TLS] be used if secret or private information\n         is sent via networks.\
    \  Fake server attacks, including the so-\n         called MITM (man-in-the-middle),\
    \ must be considered as well.\n   Throws:\n      VTSSecurityException - if authentication\
    \ fails.\n"
- title: 5.4.2.  logout
  contents:
  - "5.4.2.  logout\n   public void logout()\n          throws VTSException\n    \
    \  Voids the authentication performed by the login() method.\n      After this\
    \ method is called, calling any other method (except\n      login()) will cause\
    \ a VTSSecurityException.\n      The VTSAgent can login again by the login() method.\n\
    \   Throws:\n      VTSSecurityException - if the VTSAgent is not authenticated\n\
    \      correctly.\n"
- title: 5.4.3.  prepare
  contents:
  - "5.4.3.  prepare\n   public Session prepare(Participant receiver)\n          throws\
    \ VTSException\n      Establishes a session that is required for trading vouchers.\
    \  The\n      trading partner who receives the vouchers is specified as the\n\
    \      receiver.  The vouchers to be traded will be specified later (when\n  \
    \    a trading method is called).\n      The establishment of a session is implementation-specific.\
    \  A\n      centralized VTS implementation may start a transaction, while a\n\
    \      distributed VTS implementation may get the challenge needed to\n      create\
    \ an authentic response from the receiver in the following\n      trading method.\n\
    \      If the VTSAgent does not have the ability to establish a session\n    \
    \  with the specified receiver (permanent error), the VTSAgent throws\n      an\
    \ InvalidParticipantExeption.  If the VTSAgent cannot establish a\n      session\
    \ due to network failure (transient error), the VTSAgent\n      throws a CannotProceedException.\n\
    \   Parameters:\n      receiver - the trading partner who receives vouchers.\n\
    \   Returns:\n      an established session whose state is \"prepared\" (see Section\n\
    \      5.5).\n   Throws:\n      CannotProceedException - if the preparation of\
    \ the session is\n         aborted (e.g., network failures).\n      FeatureNotAvailableException\
    \ - if the VTSAgent does not provide\n         any trading methods.\n      InvalidParticipantException\
    \ - if the specified participant is\n         invalid.\n      VTSSecurityException\
    \ - if the VTSAgent cannot be authenticated\n         correctly.\n"
- title: 5.4.4.  issue
  contents:
  - "5.4.4.  issue\n   public void issue(Session session,\n                     VoucherComponent\
    \ promise,\n                     java.lang.Number num)\n          throws VTSException\n\
    \      Issues vouchers.  This method creates the specified number of\n      vouchers\
    \ <this, promise, receiver> and adds them to the VVS.  If\n      the VTS is distributed,\
    \ this method would create a \"response\" that\n      corresponds to the challenge\
    \ received in the prepare() method and\n      send it to the receiver.  Note that\
    \ the receiver is specified when\n      prepare() is called.  Nothing is performed\
    \ if the specified number\n      is 0.\n      The session MUST be \"prepared\"\
    \ when calling this method.  The\n      state of the session will be \"activated\"\
    \ when the vouchers are\n      created, and it will be \"completed\" when the\
    \ transaction is\n      successfully completed or \"suspended\" if the transaction\
    \ is\n      interrupted abnormally (e.g., network failures).\n   Parameters:\n\
    \      session - the session used by the issue transaction.\n      promise - the\
    \ promise part of the voucher.\n      num - the number of vouchers to be issued.\n\
    \   Throws:\n      CannotProceedException - if the transaction cannot be successfully\n\
    \         completed.\n      FeatureNotAvailableException - if the VTSAgent does\
    \ not provide a\n         means of issuing vouchers.\n      InvalidStateException\
    \ - if the session is not \"prepared\".\n      VTSSecurityException - if the VTSAgent\
    \ cannot be authenticated\n         correctly.\n"
- title: 5.4.5.  transfer
  contents:
  - "5.4.5.  transfer\n   public void transfer(Session session,\n                \
    \        Participant issuer,\n                        VoucherComponent promise,\n\
    \                        java.lang.Number num)\n          throws VTSException\n\
    \      Transfers vouchers.  This method rewrites the specified number of\n   \
    \   vouchers <issuer, promise, this> to <issuer, promise, receiver> in\n     \
    \ the VVS; i.e., deletes the vouchers from the sender and stores\n      them for\
    \ the receiver.  Similar to issue(), this method would\n      create and send\
    \ the response to the receiver if the VTS is\n      distributed.  The VTSAgent\
    \ must have sufficient vouchers in the\n      VVS.  Nothing is performed if the\
    \ specified number is 0.\n      The session MUST be \"prepared\" when calling\
    \ this method.  The\n      state of the session will be \"activated\" when the\
    \ voucher are\n      retrieved from the sender, and it will be \"completed\" when\
    \ the\n      transaction is successfully completed or \"suspended\" if the\n \
    \     transaction is interrupted abnormally (e.g., network failures).\n      If\
    \ null is specified for the issuer parameter, it indicates \"any\n      issuer\"\
    .  This method selects vouchers to be transferred from the\n      set of vouchers\
    \ returned by the getContents(null, promise).\n   Parameters:\n      session -\
    \ the session used by the transfer transaction.\n      issuer - the issuer part\
    \ of the voucher, or null.\n      promise - the promise part of the voucher.\n\
    \      num - the number of vouchers to be transferred.\n   Throws:\n      CannotProceedException\
    \ - if the transaction cannot be successfully\n         completed.\n      FeatureNotAvailableException\
    \ - if the VTSAgent does not provide a\n         means of transferring vouchers.\n\
    \      InsufficientVoucherException - if the VTSAgent does not have a\n      \
    \   sufficient number of vouchers to transfer.\n      InvalidStateException -\
    \ if the session is not \"prepared\".\n      VTSSecurityException - if the VTSAgent\
    \ cannot be authenticated\n         correctly.\n"
- title: 5.4.6.  consume
  contents:
  - "5.4.6.  consume\n   public void consume(Session session,\n                  \
    \     Participant issuer,\n                       VoucherComponent promise,\n\
    \                       java.lang.Number num)\n          throws VTSException\n\
    \      Consumes vouchers.  This method deletes the specified number of\n     \
    \ vouchers <issuer, promise, this> from the VVS and notifies the\n      receiver\
    \ of the deletion.  Similar to issue() and transfer(), the\n      response would\
    \ be created and sent to the receiver if the VTS is\n      distributed so that\
    \ the receiver can obtain proof of the deletion.\n      The VTSAgent must have\
    \ a sufficient number of vouchers in the VVS.\n      Nothing is performed if the\
    \ specified number is 0.\n      The session MUST be \"prepared\" when this method\
    \ is called.  The\n      state of the session will be \"activated\" when the vouchers\
    \ are\n      deleted, and it will be \"completed\" when the transaction is\n \
    \     successfully completed or \"suspended\" if the transaction is\n      interrupted\
    \ abnormally (e.g., network failures).\n      If null is specified for the issuer\
    \ parameter, it indicates \"any\n      issuer\".  This method selects vouchers\
    \ to be consumed from the set\n      of vouchers returned by the getContents(null,\
    \ promise).\n   Parameters:\n      session - the session used by the consume transaction.\n\
    \      issuer - the issuer part of the voucher, or null.\n      promise - the\
    \ promise part of the voucher.\n      num - the number of vouchers to be consumed.\n\
    \   Throws:\n      CannotProceedException - if the transaction cannot be successfully\n\
    \         completed.\n      FeatureNotAvailableException - if the VTSAgent does\
    \ not provide a\n         means of consuming vouchers.\n      InsufficientVoucherException\
    \ - if the VTSAgent does not have a\n         sufficient number of vouchers to\
    \ consume.\n      InvalidStateException - if the session is not \"prepared\".\n\
    \      VTSSecurityException - if the VTSAgent cannot be authenticated\n      \
    \   correctly.\n"
- title: 5.4.7.  present
  contents:
  - "5.4.7.  present\n   public void present(Session session,\n                  \
    \     Participant issuer,\n                       VoucherComponent promise,\n\
    \                       java.lang.Number num)\n          throws VTSException\n\
    \      Presents vouchers.  This method shows that the sender has the\n      specified\
    \ number of vouchers <issuer, promise, this> in the VVS to\n      the receiver\
    \ of the session; no modification is performed to the\n      VVS.  However, the\
    \ response would be sent to the receiver as well\n      as consume() in order\
    \ to prove that the VTS has been distributed.\n      The VTSAgent must have a\
    \ sufficient number of vouchers in the VVS.\n      Nothing is performed if the\
    \ specified number is 0.\n      The session MUST be \"prepared\" when this method\
    \ is called.  The\n      state of the session will be \"activated\" when the vouchers\
    \ are\n      retrieved, and it will be \"completed\" when the transaction is\n\
    \      successfully completed or \"suspended\" if the transaction is\n      interrupted\
    \ abnormally (e.g., by network failures).\n      If null is specified for the\
    \ issuer parameter, it indicates \"any\n      issuer\".  This method selects vouchers\
    \ to be presented from the\n      set of vouchers returned by the getContents(null,\
    \ promise).\n   Parameters:\n      session - the session used by the present transaction.\n\
    \      issuer - the issuer part of the voucher, or null.\n      promise - the\
    \ promise part of the voucher.\n      num - the number of the voucher to be presented.\n\
    \   Throws:\n      CannotProceedException - if the transaction cannot be successfully\n\
    \         completed.\n      InsufficientVoucherException - if the VTSAgent does\
    \ not have a\n         sufficient number of vouchers to present.\n      InvalidStateException\
    \ - if the session is not \"prepared\".\n      FeatureNotAvailableException -\
    \ if the VTSAgent does not provide a\n         means of presenting vouchers.\n\
    \      VTSSecurityException - if the VTSAgent cannot be authenticated\n      \
    \   correctly.\n"
- title: 5.4.8.  cancel
  contents:
  - "5.4.8.  cancel\n   public void cancel(Session session)\n          throws VTSException\n\
    \      Releases the session.  \"Prepared\" sessions MUST be canceled.  An\n  \
    \    implementation MAY be permitted to cancel \"activated\" or\n      \"suspended\"\
    \ sessions.\n   Throws:\n      InvalidStateException - if the state of the session\
    \ cannot be\n         canceled.\n      VTSSecurityException - if the VTSAgent\
    \ cannot be authenticated\n         correctly.\n"
- title: 5.4.9.  resume
  contents:
  - "5.4.9.  resume\n   public void resume(Session session)\n          throws VTSException\n\
    \      Restarts the session.  Only \"suspended\" sessions can be resumed.\n  \
    \    The state of the session will be re-\"activated\" immediately, and\n    \
    \  it will be \"completed\" when the transaction is successfully\n      completed\
    \ or \"suspended\" again if the transaction is interrupted\n      abnormally (e.g.,\
    \ network failures).\n   Throws:\n      CannotProceedException - if the transaction\
    \ cannot be successfully\n         completed.\n      InvalidStateException - if\
    \ the session is not \"suspended\".\n      VTSSecurityException - if the VTSAgent\
    \ cannot be authenticated\n         correctly.\n"
- title: 5.4.10.  create
  contents:
  - "5.4.10.  create\n   public void create(VoucherComponent promise, java.lang.Number\
    \ num)\n          throws VTSException\n      Creates vouchers where the issuer\
    \ is the VTSAgent itself.  This\n      method creates the specified number of\
    \ vouchers <this, promise,\n      this> and adds them to the VVS.  Nothing is\
    \ performed if the\n      specified number is 0.\n   Throws:\n      FeatureNotAvailableException\
    \ - if the VTSAgent does not provide a\n         means of creating vouchers.\n\
    \      VTSSecurityException - if the VTSAgent cannot be authenticated\n      \
    \   correctly.\n"
- title: 5.4.11.  delete
  contents:
  - "5.4.11.  delete\n   public void delete(Participant issuer, VoucherComponent promise,\n\
    \                      java.lang.Number num)\n          throws VTSException\n\
    \      Deletes vouchers.  This method deletes the specified number of\n      vouchers\
    \ <issuer, promise, this> from the VVS.  The VTSAgent must\n      have sufficient\
    \ vouchers in the VVS.  Nothing is performed if the\n      specified number is\
    \ 0.\n   Throws:\n      InsufficientVoucherException - if the VTSAgent does not\
    \ have a\n         sufficient number of vouchers to delete.\n      VTSSecurityException\
    \ - if the VTSAgent cannot be authenticated\n         correctly.\n"
- title: 5.4.12.  getContents
  contents:
  - "5.4.12.  getContents\n   public java.util.Set getContents(Participant issuer,\n\
    \                                    VoucherComponent promise)\n          throws\
    \ VTSException\n      Returns the set of vouchers whose issuer and promise both\
    \ match\n      the issuer and promise specified in the parameters.\n      If null\
    \ is specified for the issuer or promise parameter, it\n      indicates \"any\
    \ issuer\" or \"any promise\", respectively.  If null is\n      specified for\
    \ both parameters, this method selects all vouchers\n      owned by the holder\
    \ from the VVS.\n   Returns:\n      the set of vouchers held by the holder of\
    \ the VTSAgent.\n   Throws:\n      VTSSecurityException - if the VTSAgent cannot\
    \ be authenticated\n         correctly.\n"
- title: 5.4.13.  getSessions
  contents:
  - "5.4.13.  getSessions\n   public java.util.Set getSessions()\n          throws\
    \ VTSException\n      Returns a set of incomplete sessions prepared by the VTSAgent.\n\
    \   Returns:\n      the set of sessions prepared by the VTSAgent that are not\
    \ yet\n      completed.\n   Throws:\n      VTSSecurityException - if the VTSAgent\
    \ cannot be authenticated\n         correctly.\n"
- title: 5.4.14.  getLog
  contents:
  - "5.4.14.  getLog\n   public java.util.Set getLog()\n          throws VTSException\n\
    \      Returns a set of completed sessions prepared or received by the\n     \
    \ VTSAgent.  This set represents the trading log of the VTSAgent.  A\n      VTS\
    \ may delete an old log eventually, so that the entire log may\n      not be returned;\
    \ the amount of the log kept by the VTSAgent is\n      implementation-specific.\n\
    \   Returns:\n      the set of completed sessions prepared or received by the\n\
    \      VTSAgent.\n   Throws:\n      VTSSecurityException - if the VTSAgent cannot\
    \ be authenticated\n         correctly.\n"
- title: 5.4.15.  addReceptionListener
  contents:
  - "5.4.15.  addReceptionListener\n   public void addReceptionListener(ReceptionListener\
    \ l)\n          throws VTSException\n      Adds a ReceptionListener to the listener\
    \ list.\n      After a ReceptionListener l is registered by this method,\n   \
    \   l.arrive() will be called whenever the VTSAgent receives a\n      voucher.\n\
    \      Nothing is performed if the specified listener is null.\n   Throws:\n \
    \     VTSSecurityException - if the VTSAgent cannot be authenticated\n       \
    \  correctly.\n"
- title: 5.4.16.  removeReceptionListener
  contents:
  - "5.4.16.  removeReceptionListener\n   public void removeReceptionListener(ReceptionListener\
    \ l)\n          throws VTSException\n      Removes a ReceptionListener from the\
    \ listener list.\n      Nothing is performed when the specified listener is null\
    \ or not\n      registered.\n   Throws:\n      VTSSecurityException - if the VTSAgent\
    \ cannot be authenticated\n         correctly.\n"
- title: 5.5.  Session
  contents:
  - "5.5.  Session\n   public interface Session\n      Represents the logical connection\
    \ established by the trade.\n      Sessions are established by VTSAgent#prepare().\n\
    \      A session has four states: prepared, activated, suspended, and\n      completed.\
    \  The initial state of a session is \"prepared\", and the\n      session will\
    \ be \"activated\" immediately when any of the trading\n      methods of VTSAgent\
    \ is called.  The \"activated\" session will be\n      \"completed\" after the\
    \ trading method is successfully completed.\n      If the trading method fails\
    \ transiently (e.g., network failure),\n      the session will be \"suspended\"\
    .  Suspended sessions can be re-\n      \"activated\" and restarted by calling\
    \ VTSAgent#resume().\n      A completed session may disappear from the VTSAgent;\
    \ the session\n      will be collected by the GC unless other objects keep its\n\
    \      reference.\n"
- title: 5.5.1.  getIdentifier
  contents:
  - "5.5.1.  getIdentifier\n   public String getIdentifier()\n      Returns the identifier\
    \ of the session.  The generation scheme of\n      the identifier is implementation-specific.\
    \  An implementation may\n      use a transaction ID as the identifier of the\
    \ session.\n   Returns:\n      the string of the identifier of the session.\n"
- title: 5.5.2.  getVoucher
  contents:
  - "5.5.2.  getVoucher\n   public Voucher getVoucher()\n      Returns the voucher\
    \ to be traded using the session, or returns\n      null if the session has not\
    \ been activated.\n   Returns:\n      the voucher to be traded, or null if the\
    \ state of the session is\n      \"prepared\".\n"
- title: 5.5.3.  getSender
  contents:
  - "5.5.3.  getSender\n   public Participant getSender()\n      Returns the sender\
    \ of the session (i.e., the creator who prepared\n      the session).\n   Returns:\n\
    \      the sender of the session.\n"
- title: 5.5.4.  getReceiver
  contents:
  - "5.5.4.  getReceiver\n   public Participant getReceiver()\n      Returns the receiver\
    \ of the session (i.e., the participant\n      specified when preparing the session\
    \ (by the VTSAgent#prepare()\n      method)).\n   Returns:\n      the receiver\
    \ of the session.\n"
- title: 5.5.5.  isPrepared
  contents:
  - "5.5.5.  isPrepared\n   public boolean isPrepared()\n      Verifies if the session\
    \ is \"prepared\".\n   Returns:\n      true if the session is in the \"prepared\"\
    \ state, otherwise, false.\n"
- title: 5.5.6.  isActivated
  contents:
  - "5.5.6.  isActivated\n   public boolean isActivated()\n      Verifies if the session\
    \ is \"activated\".\n   Returns:\n      true if the session is in the \"activated\"\
    \ state, otherwise, false.\n"
- title: 5.5.7.  isSuspended
  contents:
  - "5.5.7.  isSuspended\n   public boolean isSuspended()\n      Verifies if the session\
    \ is \"suspended\".\n   Returns:\n      true if the session is in the \"suspended\"\
    \ state, otherwise, false.\n"
- title: 5.5.8.  isCompleted
  contents:
  - "5.5.8.  isCompleted\n   public boolean isCompleted()\n      Verifies if the session\
    \ is \"completed\".\n   Returns:\n      true if the session is in the \"completed\"\
    \ state, otherwise, false.\n"
- title: 5.6.  Voucher
  contents:
  - "5.6.  Voucher\n   public interface Voucher\n      Represents voucher(s) described\
    \ in [VTS].  An object implementing\n      this interface can represent more than\
    \ one voucher if all of the\n      issuer part and the promise part of the vouchers\
    \ are the same.\n"
- title: 5.6.1.  getIssuer
  contents:
  - "5.6.1.  getIssuer\n   public Participant getIssuer()\n      Returns the issuer\
    \ part of the voucher(s).\n   Returns:\n      the participant who issued the voucher(s).\n"
- title: 5.6.2.  getPromise
  contents:
  - "5.6.2.  getPromise\n   public VoucherComponent getPromise()\n      Returns the\
    \ promise part of the voucher(s).\n   Returns:\n      the voucher component that\
    \ defines the promise of the voucher.\n"
- title: 5.6.3.  getCount
  contents:
  - "5.6.3.  getCount\n   public java.lang.Number getCount()\n      Returns the number\
    \ of the voucher(s).\n   Returns:\n      the positive (>0) number of the voucher(s).\n"
- title: 5.7.  VoucherComponentRepository
  contents:
  - "5.7.  VoucherComponentRepository\n   public interface VoucherComponentRepository\n\
    \      Maintains VoucherComponents.\n      An object implementing VoucherComponentRepository\
    \ provides a means\n      of retrieving the voucher components that are the promises\
    \ of\n      vouchers in the VVS.\n      Before issuing a voucher, the promise\
    \ of the voucher must be\n      registered with this repository.  The repository\
    \ can be\n      implemented as either a network-wide directory service or personal\n\
    \      storage like the ParticipantRepository.\n"
- title: 5.7.1.  register
  contents:
  - "5.7.1.  register\n   public VoucherComponent register(org.w3c.dom.Document document)\n\
    \      Creates a voucher component associated with the specified DOM\n      object\
    \ and registers the voucher component with the repository.\n      A voucher component\
    \ of the voucher to be issued must be registered\n      using this method.\n \
    \     Nothing is performed (and the method returns null) if the\n      specified\
    \ document is null or the syntax of the document does not\n      conform to the\
    \ VTS.\n      The method returns the registered voucher component if the\n   \
    \   specified DOM object has been already registered (no new voucher\n      component\
    \ is created in this case).\n   Returns:\n      a registered voucher component\
    \ associated with the specified\n      document, or null if the document is null\
    \ or has wrong syntax.\n"
- title: 5.8.  VoucherComponent
  contents:
  - "5.8.  VoucherComponent\n   public interface VoucherComponent\n      Represents\
    \ the voucher component that defines the promise of the\n      voucher.\n    \
    \  Each VoucherComponent object has its own unique identifier and is\n      associated\
    \ with an XML document that describes the promise made by\n      the issuer of\
    \ the voucher (e.g., goods or services can be claimed\n      in exchange for redeeming\
    \ the voucher).\n      This interface can be implemented as sort of a \"smart\
    \ pointer\" to\n      the XML document.  An implementation may have a reference\
    \ to a\n      voucher component repository instead of the voucher component, and\n\
    \      it may retrieve the document dynamically from the repository when\n   \
    \   the getDocument() method is called.\n"
- title: 5.8.1.  getIdentifier
  contents:
  - "5.8.1.  getIdentifier\n   public String getIdentifier()\n      Returns the identifier\
    \ of the voucher component.  Each voucher\n      component must have a unique\
    \ identifier.  The identifier may be\n      used to check for equivalence of voucher\
    \ components.\n      The format of the identifier is implementation-specific,\
    \ however,\n      it is RECOMMENDED that the hash value of the voucher component\
    \ in\n      the identifier be included to assure uniqueness.  For generating\n\
    \      the hash value, it is desirable to use a secure hash function\n      (e.g.,\
    \ [SHA-1]) and to apply a canonicalization function (e.g.,\n      [EXC-C14N])\
    \ before applying the hash function to minimize the\n      impact of insignificant\
    \ format changes to the voucher component,\n      (e.g., line breaks or character\
    \ encoding).\n   Returns:\n      the identifier string of the voucher component.\n"
- title: 5.8.2.  getDocument
  contents:
  - "5.8.2.  getDocument\n   public org.w3c.dom.Document getDocument()\n      Returns\
    \ a Document Object Model [DOM] representation of the\n      document associated\
    \ with the voucher component by the\n      VoucherComponentRepository#register()\
    \ method.\n      The DOM object to be returned may be retrieved from a\n     \
    \ VoucherComponentRepository on demand, instead of the\n      VoucherComponent\
    \ always keeping a reference to the DOM object.\n      The VTS must guarantee\
    \ that the getDocument method will eventually\n      return the DOM object, provided\
    \ that the voucher associated with\n      the corresponding voucher component\
    \ exists in the VVS.\n   Returns:\n      a DOM representation of the document\
    \ associated with the voucher\n      component.\n   Throws:\n      DocumentNotFoundException\
    \ - if the associated DOM object cannot be\n         retrieved.\n"
- title: 5.9.  ReceptionListener
  contents:
  - "5.9.  ReceptionListener\n   public interface ReceptionListener extends java.util.EventListener\n\
    \      Provides a listener interface with a notification that a VTSAgent\n   \
    \   has received a voucher.\n      When a voucher arrives at the VTSAgent, the\
    \ VTSAgent invokes the\n      arrive() method of each registered ReceptionListener.\n\
    \      ReceptionListeners can obtain a Session object, which contains\n      information\
    \ about the received voucher and the sender of the\n      voucher.\n      This\
    \ interface is intended to provide a means of notifying a\n      wallet that \"\
    You have new vouchers\", so that this interface may be\n      implemented by wallets\
    \ or other applications that use VTS.\n"
- title: 5.9.1.  arrive
  contents:
  - "5.9.1.  arrive\n   public void arrive(Session session)\n      Provides notification\
    \ of the arrival of a voucher.\n      After the listener is registered to a VTSAgent\
    \ (by the\n      VTSAgent#addReceptionListener() method), the VTSAgent invokes\
    \ this\n      method whenever it receives a voucher.\n      The specified session\
    \ is equivalent to the session used by the\n      sender to trade the voucher.\
    \  The state of the session is\n      \"completed\" when this method is called.\n"
- title: 5.10.  Exceptions
  contents:
  - "5.10.  Exceptions\n      java.lang.Exception\n        +-- VTSException\n    \
    \        +-- CannotProceedException\n            +-- DocumentNotFoundException\n\
    \            +-- FeatureNotAvailableException\n            +-- InsufficientVoucherException\n\
    \            +-- InvalidParticipantException\n            +-- InvalidStateException\n\
    \            +-- VTSSecurityException\n   VTSException\n      This is the superclass\
    \ of all exceptions thrown by the methods in\n      the interfaces that construct\
    \ the VTS-API.\n   CannotProceedException\n      This exception is thrown when\
    \ a trading is interrupted by network\n      failures or other errors.\n   DocumentNotFoundException\n\
    \      This exception is thrown when the document associated with a\n      voucher\
    \ component cannot be found.\n   FeatureNotAvailableException\n      This exception\
    \ is thrown when the invoked method is not supported.\n   InsufficientVoucherException\n\
    \      This exception is thrown when the number of the voucher is less\n     \
    \ than the number specified for trading.\n   InvalidParticipantException\n   \
    \   This exception is thrown when the specified participant cannot be\n      located.\n\
    \   InvalidStateException\n      This exception is thrown when the state of the\
    \ session is invalid\n      and the operation cannot proceed.\n   VTSSecurityException\n\
    \      This exception is thrown when authentication fails, or when a\n      method\
    \ that requires authentication in advance is called without\n      authentication.\n"
- title: 6.  Example Code
  contents:
  - "6.  Example Code\n   // Issue a voucher\n   VTSManager vts = new FooVTSManager();\n\
    \   ParticipantRepository addrBook = vts.getParticipantRepository();\n   VoucherComponentRepository\
    \ vcr = vts.getVoucherComponentRepository();\n   Participant you = addrBook.lookup(\"\
    http://example.org/foo\");\n     // looks up a trading partner identified as\n\
    \     // \"http://example.org/foo\".\n   VTSAgent me = addrBook.lookup(\"myName\"\
    ).getVTSAgent();\n     // a short-cut name may be used if VTS implementation allows.\n\
    \   VoucherComponent promise = vcr.register(anXMLVoucherDocument);\n     // registers\
    \ a voucher component that corresponds to the voucher\n     // to be issued.\n\
    \   try {\n     me.login();\n       // sets up the issuer's smartcard (assuming\
    \ distributed VTS).\n     s = me.prepare(you);\n       // receives a challenge\
    \ from the partner.\n     me.issue(s, promise, 1);\n       // sends a voucher\
    \ using the received challenge.\n     me.logout();\n   } catch (VTSException e)\
    \ {\n       // if an error (e.g., a network trouble) occurs...\n     System.err.println(\"\
    Sorry.\");\n     e.printStackTrace();\n       // this example simply prints a\
    \ stack trace, but a real wallet\n       // may prompt the user to retry (or cancel).\n\
    \   }\n   // Transfer all my vouchers\n   VTSManager vts = new FooVTSManager();\n\
    \   ParticipantRepository addrBook = vts.getParticipantRepository();\n   Participant\
    \ you = addrBook.lookup(\"8f42 5aab ffff cafe babe...\");\n     // some VTS implementations\
    \ would use a hash value of a public key\n     // (aka fingerprint) as an identifier\
    \ of a participant.\n   VTSAgent me = addrBook.lookup(\"myName\").getVTSAgent();\n\
    \   try {\n     me.login();\n     Iterator i = me.getContents(null, null).iterator();\n\
    \     while (i.hasNext()) {\n       Voucher v = (Voucher) i.next();\n       s\
    \ = me.prepare(you);\n       me.transfer(s, v.getIssuer(), v.getPromise(), v.getCount());\n\
    \     }\n     me.logout();\n   } catch (VTSException e) {\n     System.err.println(\"\
    Sorry.\");\n     e.printStackTrace();\n   }\n   // Register an incoming voucher\
    \ notifier (biff)\n   VTSManager vts = new FooVTSManager();\n   ParticipantRepository\
    \ addrBook = vts.getParticipantRepository();\n   VTSAgent me = addrBook.lookup(\"\
    myName\").getVTSAgent();\n   ReceptionListener listener = new ReceptionListener()\
    \ {\n     public void arrive(Session s) {\n       System.out.println(\"You got\
    \ a new voucher.\");\n     }\n   };\n   try {\n     me.login();\n     me.addReceptionListener(listener);\n\
    \     me.logout();\n   } catch (VTSException e) {\n     System.err.println(\"\
    Sorry.\");\n     e.printStackTrace();\n   }\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security is very important for trading vouchers.\
    \  VTS implementations\n   are responsible for preventing illegal acts upon vouchers\
    \ (as\n   described in [VTS]), as well as preventing malicious access from\n \
    \  invalid users and fake server attacks, including man-in-the-middle\n   attacks.\n\
    \   The means to achieve the above requirements are not specified in this\n  \
    \ document because they depend on VTS implementation.  However,\n   securing communication\
    \ channels (e.g., using TLS) between client VTS\n   plug-ins and the central server\
    \ in a centralized VTS (as described in\n   5.4.1 login()), and applying cryptographic\
    \ challenge-and-response\n   techniques in a distributed VTS are likely to be\
    \ helpful and are\n   strongly recommended to implement a secure VTS.\n   This\
    \ document assumes that the VTS plug-in is trusted by its user.\n   The caller\
    \ application of a VTS should authenticate the VTS plug-in\n   and bind it securely\
    \ using the VTS Provider information specified in\n   the Voucher Component. \
    \ This document, however, does not specify any\n   application authentication\
    \ scheme and it is assumed to be specified\n   by other related standards.  Until\
    \ various VTS systems are deployed,\n   it is enough to manually check and install\
    \ VTS plug-ins like other\n   download applications.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The following persons, in alphabetic order, contributed\
    \ substantially\n   to the material herein:\n      Donald Eastlake 3rd\n     \
    \ Iguchi Makoto\n      Yoshitaka Nakamura\n      Ryuji Shoda\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [DOM]      V. Apparao, S. Byrne, M. Champion, S.\
    \ Isaacs, I. Jacobs,\n              A. Le Hors, G. Nicol, J. Robie, R. Sutor,\
    \ C. Wilson, and\n              L. Wood.  \"Document Object Model (DOM) Level\
    \ 1\n              Specification\", W3C Recommendation, October 1998,\n      \
    \        <http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/>\n   [GVL]     \
    \ Fujimura, K. and M. Terada, \"XML Voucher: Generic Voucher\n              Language\"\
    , RFC 4153, September 2005.\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [ECML]     Eastlake 3rd, D., \"Electronic Commerce\
    \ Modeling Language\n              (ECML) Version 2 Specification\", RFC 4112,\
    \ June 2005.\n   [EXC-C14N] J. Boyer, D. Eastlake, and J. Reagle, \"Exclusive\
    \ XML\n              Canonicalization Version 1.0\", W3C Recommendation, July\n\
    \              2002, <http://www.w3.org/TR/2002/REC-xml-exc-c14n-\n          \
    \    20020718/>\n   [GPSF]     G. Lacoste, B. Pfitzmann, M. Steiner, and M. Waidner\n\
    \              (Eds.), \"SEMPER - Secure Electronic Marketplace for\n        \
    \      Europe,\" LNCS 1854, Springer-Verlag, 2000.\n   [IOTP]     Burdett, D.,\
    \ \"Internet Open Trading Protocol - IOTP\n              Version 1.0\", RFC 2801,\
    \ April 2000.\n   [JCC]      T. Goldstein, \"The Gateway Security Model in the\
    \ Java\n              Electronic Commerce Framework\", Proc. of Financial\n  \
    \            Cryptography '97, 1997.\n   [SHA-1]    Department of Commerce/National\
    \ Institute of Standards and\n              Technology, \"FIPS PUB 180-1. Secure\
    \ Hash Standard. U.S.\",\n              <http://csrc.nist.gov/publications/fips/fips180-2/\n\
    \              fips180-2withchangenotice.pdf>\n   [TLS]      Dierks, T. and C.\
    \ Allen, \"The TLS Protocol Version 1.0\",\n              RFC 2246, January 1999.\n\
    \   [VTS]      Fujimura, K. and D. Eastlake, \"Requirements and Design for\n \
    \             Voucher Trading System (VTS)\", RFC 3506, March 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Masayuki Terada\n   NTT DoCoMo, Inc.\n   3-5 Hikari-no-oka,\
    \ Yokosuka-shi, Kanagawa, 239-8536 JAPAN\n   Phone: +81-(0)46-840-3809\n   Fax:\
    \   +81-(0)46-840-3705\n   EMail: te@rex.yrp.nttdocomo.co.jp\n   Ko Fujimura\n\
    \   NTT Corporation\n   1-1 Hikari-no-oka, Yokosuka-shi, Kanagawa, 239-0847 JAPAN\n\
    \   Phone: +81-(0)46-859-3053\n   Fax:   +81-(0)46-859-1730\n   EMail: fujimura.ko@lab.ntt.co.jp\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
