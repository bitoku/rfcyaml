Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes objects managing SNMP agents that use the Agent Extensibility (AgentX) Protocol.
This memo specifies a MIB module in a manner that is both compliant to the SMIv2, and semantically identical to the peer SMIv1 definitions.
The SNMP Management Framework presently consists of five major components:  An overall architecture, described in RFC 2571 [1].
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215 [4].
The second version, called SMIv2, is described in STD 58, RFC 2578 [5], STD 58, RFC 2579 [6] and STD 58, RFC 2580 [7].
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157 [8].
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901 [9] and RFC 1906 [10].
The third version of the message protocol is called SNMPv3 and described in RFC 1906 [10], RFC 2572 [11] and RFC 2574 [12].
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [8].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [13].
A set of fundamental applications described in RFC 2573 [14] and the view based access control mechanism described in RFC 2575 [15].
A more detailed introduction to the current SNMP Management Framework can be found in RFC 2570 [16].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
The SNMP Agent Extensibility Protocol (AgentX) is a protocol used to distribute the implementation of an SNMP agent amongst a single "master agent" and multiple "subagents".
See [17] for details about the AgentX protocol.
The goals of the AgentX MIB are:  List the set of subagent connections that currently have logical sessions open with the master agent.
Identify each subagent connection transport address and type.
Identify each subagent session vendor, AgentX protocol version, and other characteristics.
Identify the set of MIB objects each session implements, the context in which the objects are registered, and the priority of the registration.
Determine protocol operational parameters such as the timeout interval for responses from a session and the priority at which a session registers a particular MIB region.
Allow (but do not require) managers to explicitly close subagent sessions with the master agent.
This MIB is organized into four groups.
The agentxGeneral group provides information describing the master agent's AgentX support, including the protocol version supported.
The agentxConnection group provides information describing the current set of connections capable of carrying AgentX sessions.
The agentxSession group provides information describing the current set of AgentX sessions.
The agentxRegistration group provides information describing the current set of registrations.
Three tables form the heart of this mib.
These are the connection, session, and registration tables.
Entries in the registration table exist in a many to one relationship with entries in the session table.
This relationship is expressed through the two common indices, agentxSessionIndex and agentxConnIndex.
Entries in the registration table also exist in a many to one relationship with entries in the connection table.
This relationship is expressed through the common index, agentxConnIndex.
Entries in the session table exist in a many to one relationship with entries in the connection table.
This relationship is expressed through the common index, agentxConnIndex.
mib 2 FROM SNMPv2 SMI
MIB MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2
CONF TEXTUAL CONVENTION, TimeStamp, TruthValue, TDomain FROM SNMPv2 TC; agentxMIB MODULE IDENTITY LAST UPDATED "200001100000Z"
Midnight 10 January 2000 ORGANIZATION "AgentX Working Group" CONTACT INFO "
FTP repository:  ftp://ftp.peer.com/pub/agentx http://www.ietf.org/html.charters/agentx charter.html Chair:
Bob Natale ACE COMM Corporation Email:
WG editor:  Mark Ellison Ellison Software Consulting,
Co author:  Lauren Heintz Cisco Systems,
"This is the MIB module for the SNMP Agent Extensibility Protocol (AgentX).
This MIB module will be implemented by the master agent. "
10 January 2000 DESCRIPTION "
Initial version published as RFC 2742."
"Denotes a transport service address.
This is identical to the TAddress textual convention (SNMPv2 SMI) except that zero length values are permitted. "
"The default length of time, in seconds, that the master agent should allow to elapse after dispatching a message to a session before it regards the subagent as not responding.
This is a system wide value that may override the timeout value associated with a particular session (agentxSessionTimeout) or a particular registered MIB region (agentxRegTimeout).
If the associated value of agentxSessionTimeout and agentxRegTimeout are zero, or impractical in accordance with implementation specific procedure of the master agent, the value represented by this object will be the effective timeout value for the master agent to await a response to a dispatch from a given subagent. "
The AgentX protocol version supported by this master agent.
The current protocol version is 1.
Note that the master agent must also allow interaction with earlier version subagents. "
"The agentxConnectionTable tracks all current AgentX transport connections.
There may be zero, one, or more AgentX sessions carried on a given AgentX connection. "
An agentxConnectionEntry contains information describing a single AgentX transport connection.
A connection may be used to support zero or more AgentX sessions.
An entry is created when a new transport connection is established, and is destroyed when the transport connection is terminated.
agentxConnTransportDomain  TDomain, agentxConnTransportAddress AgentxTAddress } agentxConnIndex
Values of this index should not be re used.
The value assigned to a given transport connection is constant for the lifetime of that connection. "
The value of sysUpTime when this connection was established and, therefore, its value when this entry was added to the table. "
The transport protocol in use for this connection to the subagent. "
The transport address of the remote (subagent) end of this connection to the master agent.
This object may be zero length for unix domain sockets (and possibly other types of transport addresses) since the subagent need not bind a filename to its local socket. "
A table of AgentX subagent sessions currently in effect. "
current DESCRIPTION "Information about a single open session between the AgentX master agent and a subagent is contained in this entry.
An entry is created when a new session is successfully established and is destroyed either when the subagent transport connection has terminated or when the subagent session is closed.
A unique index for the subagent session.
It is the same as h.sessionID defined in the agentx header.
Note that if a subagent's session with the master agent is closed for any reason its index should not be re used.
A value of zero(0) is specifically allowed in order to be compatible with the definition of h.sessionId. "
"This is taken from the o.id field of the agentx Open PDU.
This attribute will report a value of '0.0' for subagents not supporting the notion of an AgentX session object identifier. "
"A textual description of the session.
This is analogous to sysDescr defined in the SNMPv2 MIB in RFC 1907 [19] and is taken from the o.descr field of the agentx Open PDU.
This attribute will report a zero length string value for subagents not supporting the notion of a session description. "
"The version of the AgentX protocol supported by the session.
This must be less than or equal to the value of agentxMasterAgentXVer. "
The length of time, in seconds, that a master agent should allow to elapse after dispatching a message to this session before it regards the subagent as not responding.
This value is taken from the o.timeout field of the agentx Open PDU.
This is a session specific value that may be overridden by values associated with the specific registered MIB regions (see agentxRegTimeout).
A value of zero(0) indicates that the master agent's default timeout value should be used (see agentxDefaultTimeout). "
The value of sysUpTime when the last row creation or deletion occurred in the agentxRegistrationTable. "
A table of registered regions. "
"Contains information for a single registered region.
An entry is created when a session  successfully registers a region and is destroyed for any of three reasons: this region is unregistered by the session, the session is closed, or the subagent connection is closed.
current DESCRIPTION "agentxRegIndex uniquely identifies a registration entry.
This value is constant for the lifetime of an entry. "
"The context in which the session supports the objects in this region.
A zero length context indicates the default context. "
"The starting OBJECT IDENTIFIER of this registration entry.
The session identified by agentxSessionIndex implements objects starting at this value (inclusive).
Note that this value could identify an object type, an object instance, or a partial object instance. "
agentxRegRangeSubId is used to specify the range.
This is taken from r.region subid in the registration PDU.
If the value of this object is zero, no range is specified.
If it is non zero, it identifies the `nth' sub identifier in r.region for which this entry's agentxRegUpperBound value is substituted in the OID for purposes of defining the region's upper bound. "
agentxRegUpperBound represents the upper bound sub identifier in a registration.
This is taken from the r.upper bound in the registration PDU.
If agentxRegRangeSubid (r.region subid) is zero, this value is also zero and is not used to define an upper bound for this registration. "
{ agentxRegistrationEntry 5 } agentxRegPriority OBJECT
Lower values have higher priority.
This value is taken from r.priority in the register PDU.
Sessions should use the value of 127 for r.priority if a default value is desired. "
"The timeout value, in seconds, for responses to requests associated with this registered MIB region.
A value of zero(0) indicates the default value (indicated by by agentxSessionTimeout or agentxDefaultTimeout) is to be used.
This value is taken from the r.timeout field of the agentx Register PDU. "
"The value of agentxRegInstance is `true' for registrations for which the INSTANCE REGISTRATION was set, and is `false' for all other registrations. "
"The compliance statement for SNMP entities that implement the AgentX protocol.
Note that a compliant agent can implement all objects in this MIB module as read only.
MANDATORY GROUPS  { agentxMIBGroup }
OBJECT agentxSessionAdminStatus MIN ACCESS read only DESCRIPTION
"Write access is not required. "
OBJECT GROUP OBJECTS { agentxDefaultTimeout, agentxMasterAgentXVer, agentxConnTableLastChange, agentxConnOpenTime, agentxConnTransportDomain, agentxConnTransportAddress, agentxSessionTableLastChange, agentxSessionTimeout, agentxSessionObjectID, agentxSessionDescr, agentxSessionAdminStatus, agentxSessionOpenTime, agentxSessionAgentXVer, agentxRegistrationTableLastChange,
There is a single management object defined in this MIB that has a MAX ACCESS clause of read write.
This object may be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
There is a single managed object in this MIB that may contain sensitive information.
Setting agentxSessionAdminStatus to an inappropriate value can effectively prevent access to management information, or provide access to inappropriate information.
It is thus important to control even GET access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
Not all versions of SNMP provide features for such a secure environment.
by itself is not a secure environment.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB.
It is recommended that the implementers consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model RFC 2574 [12] and the View based Access Control Model RFC 2575
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
Authors' and Editor's Addresses Lauren Heintz Cisco Systems 1450
Smitha Gudur Independent Consultant EMail:
sgudur@hotmail.com Mark Ellison (WG editor) Ellison Software Consulting, Inc. 38
Salem Road Atkinso, NH 03811
