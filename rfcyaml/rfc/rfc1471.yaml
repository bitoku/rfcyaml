- contents:
  - "                 The Definitions of Managed Objects for\n                      the
    Link Control Protocol of\n                      the Point-to-Point Protocol\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for
    the Internet\n   community, and requests discussion and suggestions for improvements.\n
    \  Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"
    for the standardization state and status of this protocol.\n   Distribution of
    this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in TCP/IP-based internets.\n   In
    particular, it describes managed objects used for managing the\n   Link Control
    Protocol and Link Quality Monitoring on subnetwork\n   interfaces that use the
    family of Point-to-Point Protocols [8, 9, 10,\n   11, & 12].\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. The Network Management Framework ......................
    \   2\n   2. Objects ...............................................    2\n   2.1
    Format of Definitions ................................    2\n   3. Overview ..............................................
    \   2\n   3.1 Object Selection Criteria ............................    2\n   3.2
    Structure of the PPP .................................    3\n   3.3 MIB Groups
    ...........................................    4\n   3.4 Relationship to Interface
    and Interface Extensions\n       Groups ...............................................
    \   5\n   4. Definitions ...........................................    6\n   4.1
    PPP Link Group .......................................    7\n   4.2 PPP LQR Group
    ........................................   16\n   4.3 PPP LQR Extensions Group
    .............................   21\n   4.4 PPP Tests ............................................
    \  22\n   4.4.1 PPP Echo Test ......................................   22\n   4.4.2
    PPP Discard Test ...................................   23\n   5. Acknowledgements
    ......................................   23\n   6. Security Considerations ...............................
    \  23\n   7. References ............................................   24\n   8.
    Author's Address ......................................   25\n"
  title: Table of Contents
- contents:
  - "1.  The Network Management Framework\n   The Internet-standard Network Management
    Framework consists of three\n   components.  They are:\n      STD 16/RFC 1155
    which defines the SMI, the mechanisms used for\n      describing and naming objects
    for the purpose of management.  STD\n      16/RFC 1212 defines a more concise
    description mechanism, which is\n      wholly consistent with the SMI.\n      STD
    17/RFC 1213 which defines MIB-II, the core set of managed\n      objects for the
    Internet suite of protocols.\n      STD 15/RFC 1157 which defines the SNMP, the
    protocol used for\n      network access to managed objects.\n   The Framework
    permits new objects to be defined for the purpose of\n   experimentation and evaluation.\n"
  title: 1.  The Network Management Framework
- contents:
  - "2.  Objects\n   Managed objects are accessed via a virtual information store,
    termed\n   the Management Information Base or MIB.  Objects in the MIB are\n   defined
    using the subset of Abstract Syntax Notation One (ASN.1) [3]\n   defined in the
    SMI.  In particular, each object type is named by an\n   OBJECT IDENTIFIER, an
    administratively assigned name.  The object\n   type together with an object instance
    serves to uniquely identify a\n   specific instantiation of the object.  For human
    convenience, we\n   often use a textual string, termed the descriptor, to refer
    to the\n   object type.\n"
  - contents:
    - "2.1.  Format of Definitions\n   Section 4 contains the specification of all
      object types contained in\n   this MIB module.  The object types are defined
      using the conventions\n   defined in the SMI, as amended by the extensions specified
      in [5,6].\n"
    title: 2.1.  Format of Definitions
  title: 2.  Objects
- contents:
  - '3.  Overview

    '
  - contents:
    - "3.1.  Object Selection Criteria\n   To be consistent with IAB directives and
      good engineering practice,\n   an explicit attempt was made to keep this MIB
      as simple as possible.\n   This was accomplished by applying the following criteria
      to objects\n   proposed for inclusion:\n      (1)  Require objects be essential
      for either fault or\n           configuration management.  In particular, objects
      for\n           which the sole purpose was to debug implementations were\n           explicitly
      excluded from the MIB.\n      (2)  Consider evidence of current use and/or utility.\n
      \     (3)  Limit the total number of objects.\n      (4)  Exclude objects which
      are simply derivable from others in\n           this or other MIBs.\n"
    title: 3.1.  Object Selection Criteria
  - contents:
    - "3.2.  Structure of the PPP\n   This section describes the basic model of PPP
      used in developing the\n   PPP MIB. This information should be useful to the
      implementor in\n   understanding some of the basic design decisions of the MIB.\n
      \  The PPP is not one single protocol but a large family of protocols.\n   Each
      of these is, in itself, a fairly complex protocol.  The PPP\n   protocols may
      be divided into three rough categories:\n   Control Protocols\n      The Control
      Protocols are used to control the operation of the\n      PPP. The Control Protocols
      include the Link Control Protocol\n      (LCP), the Password Authentication
      Protocol (PAP), the Link\n      Quality Report (LQR), and the Challenge Handshake
      Authentication\n      Protocol (CHAP).\n   Network Protocols\n      The Network
      Protocols are used to move the network traffic over\n      the PPP interface.
      \ A Network Protocol encapsulates the datagrams\n      of a specific higher-layer
      protocol that is using the PPP as a\n      data link.  Note that within the
      context of PPP, the term \"Network\n      Protocol\" does not imply an OSI Layer-3
      protocol; for instance,\n      there is a Bridging network protocol.\n   Network
      Control Protocols (NCPs)\n      The NCPs are used to control the operation of
      the Network\n      Protocols. Generally, each Network Protocol has its own Network\n
      \     Control Protocol; thus, the IP Network Protocol has its IP Control\n      Protocol,
      the Bridging Network Protocol has its Bridging Network\n      Control Protocol
      and so on.\n   This document specifies the objects used in managing one of these\n
      \  protocols, namely the Link Control Protocol and Link Quality\n   Monitoring
      Protocol.\n"
    title: 3.2.  Structure of the PPP
  - contents:
    - "3.3.  MIB Groups\n   Objects in this MIB are arranged into several MIB groups.
      \ Each group\n   is organized as a set of related objects.\n   These groups
      are the basic unit of conformance: if the semantics of a\n   group are applicable
      to an implementation then all objects in the\n   group must be implemented.\n
      \  The PPP MIB is organized into several MIB Groups, including, but not\n   limited
      to, the following groups:\n          o The PPP Link Group\n          o The PPP
      LQR Group\n          o The PPP LQR Extensions Group\n          o The PPP IP
      Group\n          o The PPP Bridge Group\n          o The PPP Security Group\n
      \  This document specifies the following groups:\n   The PPP Link Group\n      This
      group represents the lowest \"level\" of the PPP protocol.\n      This group
      contains two tables, one containing status information\n      and the other
      configuration information.  The configuration table\n      is split off of the
      status so that it may be placed in a separate\n      MIB View for security purposes.\n
      \     Implementation of this group is mandatory for all PPP\n      implementations.\n
      \  The PPP LQR Group\n      This group provides the basic MIB variables that
      apply to the PPP\n      LQR Protocol.  This group provides MIB access to the
      information\n      required for LQR processing. This group contains two tables,
      one\n      containing status information and the other configuration\n      information.
      \ The configuration table is split off of the status\n      so that it may be
      placed in a separate MIB View for security\n      purposes.\n      Implementation
      of the PPP LQR Group is mandatory for all PPP\n      implementations that implement
      LQR.\n   The PPP LQR Extensions Group\n      The PPP LQR Extensions group contains
      the most recently received\n      LQR packet, as well as the \"save\" fields
      that are \"logically\n      appended\" [12] to received LQR packets.  This is
      done in order to\n      facilitate external implementations of the Link Quality
      Monitoring\n      policies.\n      It is not practical to examine the relevant
      MIB objects which are\n      used to generate LQR packets since LQR policies
      may require\n      synchronization of the values of all data used to determine
      Link\n      Quality; i.e., the values of the relevant counters must all be\n
      \     taken at the same instant in time.  Thus, by recording the last\n      received
      LQR packet, a synchronized record of the relevant data is\n      available.\n
      \     As this information may not be efficiently maintained on all PPP\n      implementations,
      implementation of this group is optional.\n"
    title: 3.3.  MIB Groups
  - contents:
    - "3.4.  Relationship to Interface and Interface Extensions\n      Groups\n   The
      PPP Mib is a medium-specific extension to the standard MIB-2\n   interface group
      [2] and to the Interface Extensions MIB [7].  This\n   section discusses certain
      components of these groups when the\n   interface is a PPP interface.\n   The
      PPP interface represents a single interface in the sense used in\n   [2] and
      thus has a single entry in the ifTable.\n   Furthermore, the PPP interface may
      be operating over a lower layer\n   hardware interface (such as an RS-232 port).
      \ It is important to\n   capture the relationship between the PPP interface
      and the lower-\n   layer interface over which it operates.  This MIB presumes
      that the\n   lower-layer interface has an ifEntry associated with it.  The lower-\n
      \  layer ifEntry is identified via the pppLinkStatusPhysicalIndex\n   object,
      which contains the value of ifIndex for the lower-layer\n   ifEntry.\n   For
      example, suppose that you run PPP over a RS-232 port.  This would\n   use two
      entries in the ifTable.  Let's suppose that entry number 123\n   is for the
      PPP \"interface\" and entry number 987 is for the RS-232\n   port.  So, ifSpecific.123
      would contain the ppp OBJECT IDENTIFIER,\n   pppLinkStatusPhysicalIndex.123
      would contain 987, and ifSpecific.987\n   would contain the rs_232 OBJECT IDENTIFIER
      (or whatever it is).\n   All PPP packets are defined in [8] as being broadcast
      packets.  Thus,\n   the packets are counted as non-unicast packets in the ifTable\n
      \  (ifInNUcastPkts and ifOutNUCastPkts) and as broadcasts in the\n   ifExtnsTable
      (ifExtnsBroadcastsReceivedOks and\n   ifExtnsBroadcastsTransmittedOks).\n   ifSpecific\n
      \     Contains the OBJECT IDENTIFIER ppp.\n   ifAdminStatus\n      Setting this
      object to up will inject an administrative open event\n      into the LCP's
      finite state machine.  Setting this object to down\n      will inject an administrative
      close event into the LCP's finite\n      state machine.\n      The use of the
      testing value is beyond the scope of this document.\n   ifOperStatus\n      Represents
      the state of the LCP Finite State Machine.  If the\n      Finite State Machine
      is in the Opened state then the value of\n      ifOperStatus is up, otherwise
      the value of ifOperStatus is down.\n      The meaning of the testing value is
      beyond the scope of this\n      document.\n   Per the SNMP Protocol Specification
      [13], the linkUp and linkDown\n   traps apply to the PPP Protocol entity.  When
      the LCP's Finite State\n   Machine attains the Opened state, a linkUp trap should
      be sent. When\n   the Finite State Machine leaves the Opened state, a linkDown
      trap\n   should be sent.\n   Some tests for the link are defined in this document.
      \ Execution of\n   these tests does not place the link's ifOperStatus in the
      testing\n   state as these tests do not prevent normal data transmission from\n
      \  occuring over the link.\n"
    title: 3.4.  Relationship to Interface and Interface Extensions
  title: 3.  Overview
- contents:
  - "4.  Definitions\n          PPP-LCP-MIB DEFINITIONS ::= BEGIN\n          IMPORTS\n
    \              Counter\n                    FROM RFC1155-SMI\n               ifIndex,
    transmission\n                    FROM RFC1213-MIB\n               OBJECT-TYPE\n
    \                   FROM RFC-1212;\n               --  PPP MIB\n               ppp
    \ OBJECT IDENTIFIER ::= { transmission 23 }\n               pppLcp OBJECT IDENTIFIER
    ::= { ppp 1 }\n               -- The individual groups within the PPP-LCP-MIB\n
    \              pppLink      OBJECT IDENTIFIER ::= { pppLcp 1 }\n               pppLqr
    \      OBJECT IDENTIFIER ::= { pppLcp 2 }\n               pppTests     OBJECT
    IDENTIFIER ::= { pppLcp 3 }\n          -- 4.1.  PPP Link Group\n          --\n
    \         -- The PPP Link Group. Implementation of this\n          -- group is
    mandatory for all PPP entities.\n          --\n          -- The following object
    reflect the values of the option\n          -- parameters used in the PPP Link
    Control Protocol\n          --   pppLinkStatusLocalMRU\n          --   pppLinkStatusRemoteMRU\n
    \         --   pppLinkStatusLocalToPeerACCMap\n          --   pppLinkStatusPeerToLocalACCMap\n
    \         --   pppLinkStatusLocalToRemoteProtocolCompression\n          --   pppLinkStatusRemoteToLocalProtocolCompression\n
    \         --   pppLinkStatusLocalToRemoteACCompression\n          --   pppLinkStatusRemoteToLocalACCompression\n
    \         --   pppLinkStatusTransmitFcsSize\n          --   pppLinkStatusReceiveFcsSize\n
    \         --\n          -- These values are not available until after the PPP
    Option\n          -- negotiation has completed, which is indicated by the link\n
    \         -- reaching the open state (i.e., ifOperStatus is set to\n          --
    up).\n          --\n          -- Therefore, when ifOperStatus is not up\n          --
    the contents of these objects is undefined. The value\n          -- returned when
    accessing the objects is an implementation\n          -- dependent issue.\n          pppLinkStatusTable
    \  OBJECT-TYPE\n               SYNTAX    SEQUENCE OF PppLinkStatusEntry\n               ACCESS
    \   not-accessible\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"A table containing PPP-link specific variables\n                         for
    this PPP implementation.\"\n               ::= { pppLink 1 }\n          pppLinkStatusEntry
    \  OBJECT-TYPE\n               SYNTAX    PppLinkStatusEntry\n               ACCESS
    \   not-accessible\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"Management information about a particular PPP\n                         Link.\"\n
    \              INDEX     { ifIndex }\n               ::= { pppLinkStatusTable
    1 }\n          PppLinkStatusEntry ::= SEQUENCE {\n               pppLinkStatusPhysicalIndex\n
    \                   INTEGER,\n               pppLinkStatusBadAddresses\n                    Counter,\n
    \              pppLinkStatusBadControls\n                    Counter,\n               pppLinkStatusPacketTooLongs\n
    \                   Counter,\n               pppLinkStatusBadFCSs\n                    Counter,\n
    \              pppLinkStatusLocalMRU\n                    INTEGER,\n               pppLinkStatusRemoteMRU\n
    \                   INTEGER,\n               pppLinkStatusLocalToPeerACCMap\n
    \                   OCTET STRING,\n               pppLinkStatusPeerToLocalACCMap\n
    \                   OCTET STRING,\n               pppLinkStatusLocalToRemoteProtocolCompression\n
    \                   INTEGER,\n               pppLinkStatusRemoteToLocalProtocolCompression\n
    \                   INTEGER,\n               pppLinkStatusLocalToRemoteACCompression\n
    \                   INTEGER,\n               pppLinkStatusRemoteToLocalACCompression\n
    \                   INTEGER,\n               pppLinkStatusTransmitFcsSize\n                    INTEGER,\n
    \              pppLinkStatusReceiveFcsSize\n                    INTEGER\n               }\n
    \         pppLinkStatusPhysicalIndex   OBJECT-TYPE\n               SYNTAX    INTEGER(0..2147483647)\n
    \              ACCESS    read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The value of ifIndex that identifies the\n                         lower-level
    interface over which this PPP Link\n                         is operating. This
    interface would usually be\n                         an HDLC or RS-232 type of
    interface. If there\n                         is no lower-layer interface element,
    or there\n                         is no ifEntry for the element, or the element\n
    \                        can not be identified, then the value of this\n                         object
    is 0.  For example, suppose that PPP is\n                         operating over
    a serial port. This would use\n                         two entries in the ifTable.
    The PPP could be\n                         running over `interface' number 123
    and the\n                         serial port could be running over `interface'\n
    \                        number 987.  Therefore, ifSpecific.123 would\n                         contain
    the OBJECT IDENTIFIER ppp\n                         pppLinkStatusPhysicalIndex.123
    would contain\n                         987, and ifSpecific.987 would contain
    the\n                         OBJECT IDENTIFIER for the serial-port's media-\n
    \                        specific MIB.\"\n               ::= { pppLinkStatusEntry
    1 }\n          pppLinkStatusBadAddresses   OBJECT-TYPE\n               SYNTAX
    \   Counter\n               ACCESS    read-only\n               STATUS    mandatory\n
    \              DESCRIPTION\n                         \"The number of packets received
    with an\n                         incorrect Address Field. This counter is a\n
    \                        component of the ifInErrors variable that is\n                         associated
    with the interface that represents\n                         this PPP Link.\"\n
    \              REFERENCE\n                         \"Section 3.1, Address Field,
    of RFC1331.\"\n               ::= { pppLinkStatusEntry 2 }\n          pppLinkStatusBadControls
    \  OBJECT-TYPE\n               SYNTAX    Counter\n               ACCESS    read-only\n
    \              STATUS    mandatory\n               DESCRIPTION\n                         \"The
    number of packets received on this link\n                         with an incorrect
    Control Field. This counter\n                         is a component of the ifInErrors
    variable that\n                         is associated with the interface that\n
    \                        represents this PPP Link.\"\n               REFERENCE\n
    \                        \"Section 3.1, Control Field, of RFC1331.\"\n               ::=
    { pppLinkStatusEntry 3 }\n          pppLinkStatusPacketTooLongs   OBJECT-TYPE\n
    \              SYNTAX    Counter\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The number
    of received packets that have been\n                         discarded because
    their length exceeded the\n                         MRU. This counter is a component
    of the\n                         ifInErrors variable that is associated with the\n
    \                        interface that represents this PPP Link. NOTE,\n                         packets
    which are longer than the MRU but which\n                         are successfully
    received and processed are NOT\n                         included in this count.\"\n
    \              ::= { pppLinkStatusEntry 4 }\n          pppLinkStatusBadFCSs   OBJECT-TYPE\n
    \              SYNTAX    Counter\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The number
    of received packets that have been\n                         discarded due to
    having an incorrect FCS. This\n                         counter is a component
    of the ifInErrors\n                         variable that is associated with the
    interface\n                         that represents this PPP Link.\"\n               ::=
    { pppLinkStatusEntry 5 }\n          pppLinkStatusLocalMRU   OBJECT-TYPE\n               SYNTAX
    \   INTEGER(1..2147483648)\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The current
    value of the MRU for the local PPP\n                         Entity. This value
    is the MRU that the remote\n                         entity is using when sending
    packets to the\n                         local PPP entity. The value of this object
    is\n                         meaningful only when the link has reached the\n                         open
    state (ifOperStatus is up).\"\n               ::= { pppLinkStatusEntry 6 }\n          pppLinkStatusRemoteMRU
    \  OBJECT-TYPE\n               SYNTAX    INTEGER(1..2147483648)\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The current value of the MRU for the remote\n                         PPP
    Entity. This value is the MRU that the\n                         local entity
    is using when sending packets to\n                         the remote PPP entity.
    The value of this object\n                         is meaningful only when the
    link has reached\n                         the open state (ifOperStatus is up).\"\n
    \              ::= { pppLinkStatusEntry 7 }\n          pppLinkStatusLocalToPeerACCMap
    \  OBJECT-TYPE\n               SYNTAX    OCTET STRING (SIZE (4))\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The current value of the ACC Map used for\n                         sending
    packets from the local PPP entity to\n                         the remote PPP
    entity. The value of this object\n                         is meaningful only
    when the link has reached\n                         the open state (ifOperStatus
    is up).\"\n               ::= { pppLinkStatusEntry 8 }\n          pppLinkStatusPeerToLocalACCMap
    \  OBJECT-TYPE\n               SYNTAX    OCTET STRING (SIZE (4))\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The ACC Map used by the remote PPP entity when\n                         transmitting
    packets to the local PPP entity.\n                         The value of this object
    is meaningful only\n                         when the link has reached the open
    state\n                         (ifOperStatus is up).\"\n               ::= {
    pppLinkStatusEntry 9 }\n          pppLinkStatusLocalToRemoteProtocolCompression\n
    \              OBJECT-TYPE\n               SYNTAX    INTEGER {\n                         enabled(1),\n
    \                        disabled(2)\n                    }\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"Indicates whether the local PPP entity will\n                         use
    Protocol Compression when transmitting\n                         packets to the
    remote PPP entity. The value of\n                         this object is meaningful
    only when the link\n                         has reached the open state (ifOperStatus
    is\n                         up).\"\n               ::= { pppLinkStatusEntry 10
    }\n          pppLinkStatusRemoteToLocalProtocolCompression\n               OBJECT-TYPE\n
    \              SYNTAX    INTEGER {\n                         enabled(1),\n                         disabled(2)\n
    \                   }\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"Indicates
    whether the remote PPP entity will\n                         use Protocol Compression
    when transmitting\n                         packets to the local PPP entity. The
    value of\n                         this object is meaningful only when the link\n
    \                        has reached the open state (ifOperStatus is\n                         up).\"\n
    \              ::= { pppLinkStatusEntry 11 }\n          pppLinkStatusLocalToRemoteACCompression
    \  OBJECT-TYPE\n               SYNTAX    INTEGER {\n                         enabled(1),\n
    \                        disabled(2)\n                    }\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"Indicates whether the local PPP entity will\n                         use
    Address and Control Compression when\n                         transmitting packets
    to the remote PPP entity.\n                         The value of this object is
    meaningful only\n                         when the link has reached the open state\n
    \                        (ifOperStatus is up).\"\n               ::= { pppLinkStatusEntry
    12 }\n          pppLinkStatusRemoteToLocalACCompression   OBJECT-TYPE\n               SYNTAX
    \   INTEGER {\n                         enabled(1),\n                         disabled(2)\n
    \                   }\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"Indicates
    whether the remote PPP entity will\n                         use Address and Control
    Compression when\n                         transmitting packets to the local PPP
    entity.\n                         The value of this object is meaningful only\n
    \                        when the link has reached the open state\n                         (ifOperStatus
    is up).\"\n               ::= { pppLinkStatusEntry 13 }\n          pppLinkStatusTransmitFcsSize
    \  OBJECT-TYPE\n               SYNTAX    INTEGER (0..128)\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The size of the Frame Check Sequence (FCS) in\n                         bits
    that the local node will generate when\n                         sending packets
    to the remote node. The value\n                         of this object is meaningful
    only when the link\n                         has reached the open state (ifOperStatus
    is\n                         up).\"\n               ::= { pppLinkStatusEntry 14
    }\n          pppLinkStatusReceiveFcsSize   OBJECT-TYPE\n               SYNTAX
    \   INTEGER (0..128)\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The size
    of the Frame Check Sequence (FCS) in\n                         bits that the remote
    node will generate when\n                         sending packets to the local
    node. The value of\n                         this object is meaningful only when
    the link\n                         has reached the open state (ifOperStatus is\n
    \                        up).\"\n               ::= { pppLinkStatusEntry 15 }\n
    \         pppLinkConfigTable   OBJECT-TYPE\n               SYNTAX    SEQUENCE
    OF PppLinkConfigEntry\n               ACCESS    not-accessible\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"A table
    containing the LCP configuration\n                         parameters for this
    PPP Link. These variables\n                         represent the initial configuration
    of the PPP\n                         Link. The actual values of the parameters
    may\n                         be changed when the link is brought up via the\n
    \                        LCP options negotiation mechanism.\"\n               ::=
    { pppLink 2 }\n          pppLinkConfigEntry   OBJECT-TYPE\n               SYNTAX
    \   PppLinkConfigEntry\n               ACCESS    not-accessible\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"Configuration
    information about a particular\n                         PPP Link.\"\n               INDEX
    \    { ifIndex }\n               ::= { pppLinkConfigTable 1 }\n          PppLinkConfigEntry
    ::= SEQUENCE {\n               pppLinkConfigInitialMRU\n                    INTEGER,\n
    \              pppLinkConfigReceiveACCMap\n                    OCTET STRING,\n
    \              pppLinkConfigTransmitACCMap\n                    OCTET STRING,\n
    \              pppLinkConfigMagicNumber\n                    INTEGER,\n               pppLinkConfigFcsSize\n
    \                   INTEGER\n               }\n          pppLinkConfigInitialMRU
    \  OBJECT-TYPE\n               SYNTAX    INTEGER(0..2147483647)\n               ACCESS
    \   read-write\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The initial Maximum Receive Unit (MRU) that\n                         the
    local PPP entity will advertise to the\n                         remote entity.
    If the value of this variable is\n                         0 then the local PPP
    entity will not advertise\n                         any MRU to the remote entity
    and the default\n                         MRU will be assumed. Changing this object
    will\n                         have effect when the link is next restarted.\"\n
    \              REFERENCE\n                         \"Section 7.2, Maximum Receive
    Unit of RFC1331.\"\n               DEFVAL    { 1500 }\n               ::= { pppLinkConfigEntry
    1 }\n          pppLinkConfigReceiveACCMap   OBJECT-TYPE\n               SYNTAX
    \   OCTET STRING (SIZE (4))\n               ACCESS    read-write\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The Asynchronous-Control-Character-Map
    (ACC)\n                         that the local PPP entity requires for use on\n
    \                        its receive side. In effect, this is the ACC\n                         Map
    that is required in order to ensure that\n                         the local modem
    will successfully receive all\n                         characters. The actual
    ACC map used on the\n                         receive side of the link will be
    a combination\n                         of the local node's pppLinkConfigReceiveACCMap\n
    \                        and the remote node's\n                         pppLinkConfigTransmitACCMap.
    Changing this\n                         object will have effect when the link
    is next\n                         restarted.\"\n               REFERENCE\n                         \"Section
    7.3, page 4, Async-Control-Character-\n                         Map of RFC1331.\"\n
    \              DEFVAL    { 'ffffffff'h }\n               ::= { pppLinkConfigEntry
    2 }\n          pppLinkConfigTransmitACCMap   OBJECT-TYPE\n               SYNTAX
    \   OCTET STRING (SIZE (4))\n               ACCESS    read-write\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The Asynchronous-Control-Character-Map
    (ACC)\n                         that the local PPP entity requires for use on\n
    \                        its transmit side. In effect, this is the ACC\n                         Map
    that is required in order to ensure that\n                         all characters
    can be successfully transmitted\n                         through the local modem.
    \ The actual ACC map\n                         used on the transmit side of the
    link will be a\n                         combination of the local node's\n                         pppLinkConfigTransmitACCMap
    and the remote\n                         node's pppLinkConfigReceiveACCMap. Changing\n
    \                        this object will have effect when the link is\n                         next
    restarted.\"\n               REFERENCE\n                         \"Section 7.3,
    page 4, Async-Control-Character-\n                         Map of RFC1331.\"\n
    \              DEFVAL    { 'ffffffff'h }\n               ::= { pppLinkConfigEntry
    3 }\n          pppLinkConfigMagicNumber   OBJECT-TYPE\n               SYNTAX    INTEGER
    {false (1), true (2)}\n               ACCESS    read-write\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"If true(2)
    then the local node will attempt to\n                         perform Magic Number
    negotiation with the\n                         remote node. If false(1) then this
    negotiation\n                         is not performed. In any event, the local
    node\n                         will comply with any magic number negotiations\n
    \                        attempted by the remote node, per the PPP\n                         specification.
    Changing this object will have\n                         effect when the link
    is next restarted.\"\n               REFERENCE\n                         \"Section
    7.6, Magic Number, of RFC1331.\"\n               DEFVAL    { false }\n               ::=
    { pppLinkConfigEntry 4 }\n          pppLinkConfigFcsSize   OBJECT-TYPE\n               SYNTAX
    \   INTEGER (0..128)\n               ACCESS    read-write\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The size
    of the FCS, in bits, the local node\n                         will attempt to
    negotiate for use with the\n                         remote node. Regardless of
    the value of this\n                         object, the local node will comply
    with any FCS\n                         size negotiations initiated by the remote
    node,\n                         per the PPP specification. Changing this object\n
    \                        will have effect when the link is next\n                         restarted.\"\n
    \              DEFVAL    { 16 }\n               ::= { pppLinkConfigEntry 5 }\n
    \         -- 4.2.  PPP LQR Group\n               --\n               -- The PPP
    LQR Group.\n               -- Implementation of this group is mandatory for all\n
    \              -- PPP implementations that implement LQR.\n               --\n
    \         pppLqrTable   OBJECT-TYPE\n               SYNTAX    SEQUENCE OF PppLqrEntry\n
    \              ACCESS    not-accessible\n               STATUS    mandatory\n
    \              DESCRIPTION\n                         \"Table containing the LQR
    parameters and\n                         statistics for the local PPP entity.\"\n
    \              ::= { pppLqr 1 }\n          pppLqrEntry   OBJECT-TYPE\n               SYNTAX
    \   PppLqrEntry\n               ACCESS    not-accessible\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"LQR information
    for a particular PPP link. A\n                         PPP link will have an entry
    in this table if\n                         and only if LQR Quality Monitoring
    has been\n                         successfully negotiated for said link.\"\n
    \              INDEX     { ifIndex }\n               ::= { pppLqrTable 1 }\n          PppLqrEntry
    ::= SEQUENCE {\n               pppLqrQuality\n                    INTEGER,\n               pppLqrInGoodOctets\n
    \                   Counter,\n               pppLqrLocalPeriod\n                    INTEGER,\n
    \              pppLqrRemotePeriod\n                    INTEGER,\n               pppLqrOutLQRs\n
    \                   Counter,\n               pppLqrInLQRs\n                    Counter\n
    \         }\n          pppLqrQuality   OBJECT-TYPE\n               SYNTAX    INTEGER
    {\n                         good(1),\n                         bad(2),\n                         not-determined(3)\n
    \                   }\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The current
    quality of the link as declared by\n                         the local PPP entity's
    Link-Quality Management\n                         modules. No effort is made to
    define good or\n                         bad, nor the policy used to determine
    it. The\n                         not-determined value indicates that the entity\n
    \                        does not actually evaluate the link's quality.\n                         This
    value is used to disambiguate the\n                         `determined to be
    good' case from the `no\n                         determination made and presumed
    to be good'\n                         case.\"\n               ::= { pppLqrEntry
    1 }\n          pppLqrInGoodOctets   OBJECT-TYPE\n               SYNTAX    Counter\n
    \              ACCESS    read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"The LQR InGoodOctets counter for this link.\"\n               REFERENCE\n
    \                        \"Section 2.2, Counters, of RFC1333.\"\n               ::=
    { pppLqrEntry 2 }\n          pppLqrLocalPeriod   OBJECT-TYPE\n               SYNTAX
    \   INTEGER(1..2147483648)\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The LQR
    reporting period, in hundredths of a\n                         second that is
    in effect for the local PPP\n                         entity.\"\n               REFERENCE\n
    \                        \"Section 2.5, Configuration Option Format, of\n                         RFC1333.\"\n
    \              ::= { pppLqrEntry 3 }\n          pppLqrRemotePeriod   OBJECT-TYPE\n
    \              SYNTAX    INTEGER(1..2147483648)\n               ACCESS    read-only\n
    \              STATUS    mandatory\n               DESCRIPTION\n                         \"The
    LQR reporting period, in hundredths of a\n                         second, that
    is in effect for the remote PPP\n                         entity.\"\n               REFERENCE\n
    \                        \"Section 2.5, Configuration Option Format, of\n                         RFC1333.\"\n
    \              ::= { pppLqrEntry 4 }\n          pppLqrOutLQRs   OBJECT-TYPE\n
    \              SYNTAX    Counter\n               ACCESS    read-only\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The value
    of the OutLQRs counter on the local\n                         node for the link
    identified by ifIndex.\"\n               REFERENCE\n                         \"Section
    2.2, Counters, of RFC1333.\"\n               ::= { pppLqrEntry 5 }\n          pppLqrInLQRs
    \  OBJECT-TYPE\n               SYNTAX    Counter\n               ACCESS    read-only\n
    \              STATUS    mandatory\n               DESCRIPTION\n                         \"The
    value of the InLQRs counter on the local\n                         node for the
    link identified by ifIndex.\"\n               REFERENCE\n                         \"Section
    2.2, Counters, of RFC1333.\"\n               ::= { pppLqrEntry 6 }\n          --\n
    \         -- The PPP LQR Configuration table.\n          --\n          pppLqrConfigTable
    \  OBJECT-TYPE\n               SYNTAX    SEQUENCE OF PppLqrConfigEntry\n               ACCESS
    \   not-accessible\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"Table containing the LQR Configuration\n                         parameters
    for the local PPP entity.\"\n               ::= { pppLqr 2 }\n          pppLqrConfigEntry
    \  OBJECT-TYPE\n               SYNTAX    PppLqrConfigEntry\n               ACCESS
    \   not-accessible\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"LQR configuration information for a particular\n                         PPP
    link.\"\n               INDEX     { ifIndex }\n               ::= { pppLqrConfigTable
    1 }\n          PppLqrConfigEntry ::= SEQUENCE {\n               pppLqrConfigPeriod\n
    \                   INTEGER,\n               pppLqrConfigStatus\n                    INTEGER\n
    \         }\n          pppLqrConfigPeriod   OBJECT-TYPE\n               SYNTAX
    \   INTEGER(0..2147483647)\n               ACCESS    read-write\n               STATUS
    \   mandatory\n               DESCRIPTION\n                         \"The LQR
    Reporting Period that the local PPP\n                         entity will attempt
    to negotiate with the\n                         remote entity, in units of hundredths
    of a\n                         second. Changing this object will have effect\n
    \                        when the link is next restarted.\"\n               REFERENCE\n
    \                        \"Section 2.5, Configuration Option Format, of\n                         RFC1333.\"\n
    \              DEFVAL    { 0 }\n               ::= { pppLqrConfigEntry 1 }\n          pppLqrConfigStatus
    \  OBJECT-TYPE\n               SYNTAX    INTEGER {disabled (1), enabled (2)}\n
    \              ACCESS    read-write\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"If enabled(2) then the local node will attempt\n                         to
    perform LQR negotiation with the remote\n                         node. If disabled(1)
    then this negotiation is\n                         not performed. In any event,
    the local node\n                         will comply with any magic number negotiations\n
    \                        attempted by the remote node, per the PPP\n                         specification.
    Changing this object will have\n                         effect when the link
    is next restarted.\n                         Setting this object to the value
    disabled(1)\n                         has the effect of invalidating the\n                         corresponding
    entry in the pppLqrConfigTable\n                         object. It is an implementation-specific
    matter\n                         as to whether the agent removes an invalidated\n
    \                        entry from the table. Accordingly, management\n                         stations
    must be prepared to receive tabular\n                         information from
    agents that corresponds to\n                         entries not currently in
    use.\"\n               REFERENCE\n                         \"Section 7.6, Magic
    Number, of RFC1331.\"\n               DEFVAL    { enabled }\n               ::=
    { pppLqrConfigEntry 2 }\n          -- 4.3.  PPP LQR Extensions Group\n          --\n
    \         -- The PPP LQR Extensions Group.\n          -- Implementation of this
    group is optional.\n          --\n          -- The intent of this group is to
    allow external\n          -- implementation of the policy mechanisms that\n          --
    are used to declare a link to be \"bad\" or not.\n          --\n          -- It
    is not practical to examine the MIB objects\n          -- which are used to generate
    LQR packets since\n          -- LQR policies tend to require synchronization of\n
    \         -- the values of all data used to determine Link\n          -- Quality;
    i.e. the values of the relevant counters\n          -- must all be taken at the
    same instant in time.\n          --\n          pppLqrExtnsTable   OBJECT-TYPE\n
    \              SYNTAX    SEQUENCE OF PppLqrExtnsEntry\n               ACCESS    not-accessible\n
    \              STATUS    mandatory\n               DESCRIPTION\n                         \"Table
    containing additional LQR information\n                         for the local
    PPP entity.\"\n               ::= { pppLqr 3 }\n          pppLqrExtnsEntry   OBJECT-TYPE\n
    \              SYNTAX    PppLqrExtnsEntry\n               ACCESS    not-accessible\n
    \              STATUS    mandatory\n               DESCRIPTION\n                         \"Extended
    LQR information for a particular PPP\n                         link. Assuming
    that this group has been\n                         implemented, a PPP link will
    have an entry in\n                         this table if and only if LQR Quality\n
    \                        Monitoring has been successfully negotiated for\n                         said
    link.\"\n               INDEX     { ifIndex }\n               ::= { pppLqrExtnsTable
    1 }\n          PppLqrExtnsEntry ::= SEQUENCE {\n               pppLqrExtnsLastReceivedLqrPacket\n
    \                   OCTET STRING(SIZE(68))\n          }\n          pppLqrExtnsLastReceivedLqrPacket
    \  OBJECT-TYPE\n               SYNTAX    OCTET STRING(SIZE(68))\n               ACCESS
    \   read-only\n               STATUS    mandatory\n               DESCRIPTION\n
    \                        \"This object contains the most recently\n                         received
    LQR packet.  The format of the packet\n                         is as described
    in the LQM Protocol\n                         specificiation. All fields of the
    packet,\n                         including the `save' fields, are stored in this\n
    \                        object.\n                         The LQR packet is stored
    in network byte order.\n                         The LAP-B and PPP headers are
    not stored in\n                         this object; the first four octets of
    this\n                         variable contain the Magic-Number field, the\n
    \                        second four octets contain the LastOutLQRs\n                         field
    and so on. The last four octets of this\n                         object contain
    the SaveInOctets field of the\n                         LQR packet.\"\n               REFERENCE\n
    \                        \"Section 2.6, Packet Format, of RFC1333\"\n               ::=
    { pppLqrExtnsEntry 1 }\n          -- 4.4.  PPP Tests\n          -- The extensions
    to the interface table in RFC1229 define a\n          -- table through which the
    network manager can instruct the\n          -- managed object to perform various
    tests of the interface. This\n          -- is the ifExtnsTestTable.\n          --
    The PPP MIB defines two such tests.\n          -- 4.4.1.  PPP Echo Test\n          --
    The PPP Echo Test is defined as\n               pppEchoTest    OBJECT IDENTIFIER
    ::= { pppTests 1 }\n          -- Invoking this test causes a PPP Echo Packet to
    be sent on the\n          -- line. ifExtnsTestResult returns success(2) if the
    echo\n          -- response came back properly. It returns failed(7) if the\n
    \         -- response did not properly return. The definition of \"proper\"\n
    \         -- in this context is left to the discretion of the implementor.\n          --
    4.4.2.  PPP Discard Test\n          -- The PPP Discard Test is defined as\n               pppDiscardTest
    OBJECT IDENTIFIER ::= { pppTests 2 }\n          -- Invoking this test causes a
    PPP Discard Packet to be sent on\n          -- the line. ifExtnsTestResult returns
    success(2) if the discard\n          -- packet was successfully transmitted and
    failed(7) if an error\n          -- was detected on transmission. The definition
    of \"transmission\n          -- error\" in this context is left to the discretion
    of the\n          -- implementor.\n          END\n"
  title: 4.  Definitions
- contents:
  - "5.  Acknowledgements\n   This document was produced by the PPP working group.
    \ In addition to\n   the working group, the author wishes to thank the following\n
    \  individuals for their comments and contributions:\n          Bill Simpson --
    Daydreamer\n          Glenn McGregor -- Merit\n          Jesse Walker -- DEC\n
    \         Chris Gunner -- DEC\n"
  title: 5.  Acknowledgements
- contents:
  - "6.  Security Considerations\n   The PPP MIB affords the network operator the
    ability to configure and\n   control the PPP links of a particular system.  This
    represents a\n   security risk.\n   These risks are addressed in the following
    manners:\n      (1)  All variables which represent a significant security risk\n
    \          are placed in separate, optional, MIB Groups. As the MIB\n           Group
    is the quantum of implementation within a MIB, the\n           implementor of
    the MIB may elect not to implement these\n           groups.\n      (2)  The implementor
    may choose to implement the variables\n           which present a security risk
    so that they may not be\n           written, i.e., the variables are READ-ONLY.
    This method\n           still presents a security risk, and is not recommended,\n
    \          in that the variables, specifically the PPP\n           Authentication
    Protocols' variables, may be easily read.\n      (3)  Using SNMPv2, the operator
    can place the variables into\n           MIB views which are protected in that
    the parties which\n           have access to those MIB views use authentication
    and\n           privacy protocols, or the operator may elect to make\n           these
    views not accessible to any party.  In order to\n           facilitate this placement,
    all security-related variables\n           are placed in separate MIB Tables.
    This eases the\n           identification of the necessary MIB View Subtree.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  References\n   [1] Rose M., and K. McCloghrie, \"Structure and Identification
    of\n       Management Information for TCP/IP-based internets\", STD 16, RFC\n
    \      1155, Performance Systems International, Hughes LAN Systems, May\n       1990.\n
    \  [2] McCloghrie K., and M. Rose, Editors, \"Management Information Base\n       for
    Network Management of TCP/IP-based internets\", STD 17, RFC\n       1213, Performance
    Systems International, March 1991.\n   [3] Information processing systems - Open
    Systems Interconnection -\n       Specification of Abstract Syntax Notation One
    (ASN.1),\n       International Organization for Standardization, International\n
    \      Standard 8824, December 1987.\n   [4]  Information processing systems -
    Open Systems Interconnection -\n       Specification of Basic Encoding Rules for
    Abstract Notation One\n       (ASN.1), International Organization for Standardization,\n
    \      International Standard 8825, December 1987.\n   [5] Rose, M., and K. McCloghrie,
    Editors, \"Concise MIB Definitions\",\n       STD 16, RFC 1212, Performance Systems
    International, Hughes LAN\n       Systems, March 1991.\n   [6] Rose, M., Editor,
    \"A Convention for Defining Traps for use with\n       the SNMP\", RFC 1215, Performance
    Systems International, March\n       1991.\n   [7] McCloghrie, K., \"Extensions
    to the Generic-Interface MIB\", RFC\n       1229, Hughes LAN Systems, Inc., May
    1991.\n   [8] Simpson, W., \"The Point-to-Point Protocol for the Transmission
    of\n       Multi-protocol Datagrams over Point-to-Point Links, RFC 1331,\n       Daydreamer,
    May 1992.\n   [9] McGregor, G., \"The PPP Internet Protocol Control Protocol\",
    RFC\n       1332, Merit, May 1992.\n  [10] Baker, F., \"Point-to-Point Protocol
    Extensions for Bridging\", RFC\n       1220, ACC, April 1991.\n  [11] Lloyd, B.,
    and W. Simpson, \"PPP Authentication Protocols\", RFC\n       1334, L&A, Daydreamer,
    October 1992.\n  [12] Simpson, W., \"PPP Link Quality Monitoring\", RFC 1333,
    Daydreamer,\n       May 1992.\n  [13] Case, J., Fedor, M., Schoffstall, M., and
    J. Davin, \"Simple\n       Network Management Protocol\", STD 15, RFC 1157, SNMP
    Research,\n       Performance Systems International, Performance Systems\n       International,
    MIT Laboratory for Computer Science, May 1990.\n"
  title: 7.  References
- contents:
  - "8.  Author's Address\n   Frank Kastenholz\n   FTP Software, Inc.\n   2 High Street\n
    \  North Andover, Mass 01845 USA\n   Phone: (508) 685-4000\n   EMail: kasten@ftp.com\n"
  title: 8.  Author's Address
