- contents:
  - '                     Routing Policy System Security

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The RIPE database specifications and RPSL language define languages\n
    \  used as the basis for representing information in a routing policy\n   system.
    \ A repository for routing policy system information is known\n   as a routing
    registry.  A routing registry provides a means of\n   exchanging information needed
    to address many issues of importance to\n   the operation of the Internet.  The
    implementation and deployment of\n   a routing policy system must maintain some
    degree of integrity to be\n   of any operational use.  This document addresses
    the need to assure\n   integrity of the data by providing an authentication and\n
    \  authorization model.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1  Overview  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   2  Background  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 3\n   3  Implicit Policy Assumptions . . . . . . . . . . . . . . . .  5\n   4
    \ Scope of Security Coverage  . . . . . . . . . . . . . . . .  5\n   5  Organization
    of this Document   . . . . . . . . . . . . . .  6\n   6  Goals and Requirements
    \ . . . . . . . . . . . . . . . . . .  6\n   7  Data Representation . . . . .
    . . . . . . . . . . . . . . . 10\n   8  Authentication Model  . . . . . . . .
    . . . . . . . . . . . 10\n   9  Authorization Model . . . . . . . . . . . . .
    . . . . . . . 12\n     9.1   Maintainer Objects . . . . . . . . . . . . . . .
    . . . 12\n     9.2   as-block and aut-num objects . . . . . . . . . . . . . 13\n
    \    9.3   inetnum objects  . . . . . . . . . . . . . . . . . . . 13\n     9.4
    \  route objects  . . . . . . . . . . . . . . . . . . . . 14\n     9.5   reclaim
    and no-reclaim attributes  . . . . . . . . . . 14\n     9.6   Other Objects  .
    . . . . . . . . . . . . . . . . . . . 15\n     9.7   Objects with AS Hierarchical
    Names . . . . . . . . . . 16\n     9.8   Query Processing . . . . . . . . . .
    . . . . . . . . . 16\n     9.9   Adding to the Database . . . . . . . . . . .
    . . . . . 17\n     9.10  Modifying or Deleting Database Objects . . . . . . .
    . 19\n   10  Data Format Summaries  . . . . . . . . . . . . . . . . . . 20\n     10.1
    \ Changes to the RIPE/RPSL Schema  . . . . . . . . . . . 20\n   Appendicies\n
    \  A  Core and Non-Core Functionality . . . . . . . . . . . . . . 23\n   B  Examples
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 23\n   C  Technical Discussion
    \ . . . . . . . . . . . . . . . . . . . 26\n     C.1   Relaxing requirements for
    ease of registry   . . . . . 27\n     C.2   The address lending issue  . . . .
    . . . . . . . . . . 28\n     C.3   Dealing with non-conformant or questionable
    older\n           data . . . . . . . . . . . . . . . . . . . . . . . . . 29\n
    \  D  Common Operational Cases  . . . . . . . . . . . . . . . . . 30\n     D.1
    \  simple hierarchical address allocation and route\n           allocation . .
    . . . . . . . . . . . . . . . . . . . . 31\n     D.2   aggregation and multihomed
    more specific routes  . . . 32\n     D.3   provider independent addresses and
    multiple origin\n           AS . . . . . . . . . . . . . . . . . . . . . . . .
    . . 32\n     D.4   change in Internet service provider  . . . . . . . . . 32\n
    \    D.5   renumbering grace periods  . . . . . . . . . . . . . . 32\n   E  Deployment
    Considerations . . . . . . . . . . . . . . . . . 33\n   F  Route Object Authorization
    Pseudocode . . . . . . . . . . . 35\n   Acknowledgments  . . . . . . . . . . .
    . . . . . . . . . . . . 37\n   Intellectual Property Notice . . . . . . . . .
    . . . . . . . . 38\n   References . . . . . . . . . . . . . . . . . . . . . .
    . . . . 38\n   Security Considerations  . . . . . . . . . . . . . . . . . . .
    40\n   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 40\n   Full
    Copyright Statement   . . . . . . . . . . . . . . . . . . 41\n"
  title: Table of Contents
- contents:
  - "1  Overview\n   The Internet Routing Registry (IRR) has evolved to meet a need
    for\n   Internet-wide coordination.  This need was described in RFC-1787, an\n
    \  informational RFC prepared on behalf of the IAB [14].  The following\n   summary
    appears in Section 7 of RFC-1787.\n      While ensuring Internet-wide coordination
    may be more and more\n      difficult, as the Internet continues to grow, stability
    and\n      consistency of the Internet-wide routing could significantly\n      benefit
    if the information about routing requirements of various\n      organizations
    could be shared across organizational boundaries.\n      Such information could
    be used in a wide variety of situations\n      ranging from troubleshooting to
    detecting and eliminating\n      conflicting routing requirements.  The scale
    of the Internet\n      implies that the information should be distributed.  Work
    is\n      currently underway to establish depositories of this information\n      (Routing
    Registries), as well as to develop tools that analyze, as\n      well as utilize
    this information.\n   A routing registry must maintain some degree of integrity
    to be of\n   any use.  The degree of integrity required depends on the usage of\n
    \  the routing policy system.\n   An initial intended usage of routing policy
    systems such as the RIPE\n   database had been in an advisory capacity, documenting
    the intended\n   routing policies for the purpose of debugging.  In this role
    a very\n   weak form of authentication was deemed sufficient.\n   The IRR is increasingly
    used for purposes that have a stronger\n   requirement for data integrity and
    security.  This document addresses\n   issues of data integrity and security that
    is consistent with the\n   usage of the IRR and which avoids compromising data
    integrity and\n   security even if the IRR is distributed among less trusted\n
    \  repositories.\n"
  title: 1  Overview
- contents:
  - "2  Background\n   An early routing policy system used in the NSFNET, the policy
    routing\n   database (PRDB), provided a means of determining who was authorized\n
    \  to announce specific prefixes to the NSFNET backbone.  The need for a\n   policy
    database was recognized as far back as 1989 [6, 4].  By 1991\n   the database
    was in place [5].  Authentication was accomplished by\n   requiring confirmation
    and was a manually intensive process.  This\n   solved the problem for the NSFNET,
    but was oriented toward holding\n   the routing policy of a single organization.\n
    \  The problem since has become more difficult.  New requirements have\n   emerged.\n
    \  1. There is a need to represent the routing policies of many\n      organizations.\n
    \  2. CIDR and overlapping prefixes and the increasing complexity of\n      routing
    policies and the needs of aggregation have introduced new\n      requirements.\n
    \  3. There is a need to assure integrity of the data and delegate\n      authority
    for the data representing specifically allocated\n      resources to multiple
    persons or organizations.\n   4. There is a need to assure integrity of the data
    and distribute the\n      storage of data subsets to multiple repositories.\n
    \  The RIPE effort specificly focused on the first issue and needs of\n   the
    European community.  Its predecessor, the PRDB, addressed the\n   needs of a single
    organization, the NSF. The RIPE database formats as\n   described in [2] were
    the basis of the original IRR.\n   Routing protocols themselves provide no assurance
    that the\n   origination of a route is legitimate and can actually reach the\n
    \  stated destination.  The nature of CIDR allows more specific prefixes\n   to
    override less specific prefixes [9, 15, 8].  Even with signed\n   route origination,
    there is no way to determine if a more specific\n   prefix is legitimate and should
    override a less specific route\n   announcement without a means of determining
    who is authorized to\n   announce specific prefixes.  Failing to do so places
    no assurance of\n   integrity of global routing information and leaves an opportunity
    for\n   a very effective form of denial of service attack.\n   The Routing Policy
    System Language (RPSL) [1, 13] was a fairly\n   substantial evolutionary step
    in the data representation which was\n   largely targeted at addressing the second
    group of needs.  The PRDB\n   accommodated CIDR in 1993 [12] and the RIPE database
    accommodated the\n   entry of CIDR prefixes from inception, but RPSL provides
    many needed\n   improvements including explicit support for aggregation.\n   This
    document addresses the third group of needs identified above.\n   While the current
    implementation supporting weak authentication\n   doesn't guarantee integrity
    of the data, it does provide extensive\n   mechanisms to make sure that all involved
    parties get notified when a\n   change is made to the database, whether the change
    was malicious or\n   intended.  This provides inadequate protection against additions.\n
    \  Since the software is increasingly used to configure the major parts\n   of
    the Internet infrastructure, it is not considered to be adequate\n   anymore to
    know about and have the ability roll back unintended\n   changes.  Therefore,
    more active security mechanisms need to be\n   developed to prevent such problems
    before they happen.\n   A separate document will be needed to address the fourth
    group of\n   needs.\n"
  title: 2  Background
- contents:
  - "3  Implicit Policy Assumptions\n   The authorization model encodes certain policies
    for allocation of\n   address numbers, AS numbers, and for the announcement of
    routes.\n   Implicit to the authorization model is a very limited number of\n
    \  policy assumptions.\n   1. Address numbers are allocated hierarchically.  The
    IANA delegates\n      portions of the address space to the regional registries\n
    \     (currently ARIN, APNIC and RIPE), which in turn delegate address\n      space
    to their members, who can assign addresses to their\n      customers.\n   2. AS
    numbers are allocated either singly or in small blocks by\n      registries.  Registries
    are allocated blocks of AS numbers,\n      thereby making the allocation hierarchical.\n
    \  3. Routes should only be announced with the consent of the holder of\n      the
    origin AS number of the announcement and with the consent of\n      the holder
    of the address space.\n   4. AS numbers and IP address registries may be different
    entities\n      from routing registries.\n   For subsets of any of these three
    allocation spaces, network\n   addresses, AS numbers, and routes, these restrictions
    may be loosened\n   or disabled by specifying a very weak authorization method
    or an\n   authentication method of \"none\".  However, even when no\n   authentication
    mechanism is used, all involved parties can be\n   notified about the changes
    that occurred through use of the existing\n   \"notify\" attribute.\n"
  title: 3  Implicit Policy Assumptions
- contents:
  - "4  Scope of Security Coverage\n   This document is intended only to provide an
    authentication and\n   authorization model to insure the integrity of the policy
    data in a\n   registry.  Only authetication and authorization of additions,\n
    \  deletions, and changes to the database are within the scope of this\n   document.
    \ Authentication and authorization of database queries is\n   explicitly out of
    scope.  Mutual authentication of queries, that is\n   authenticating both the
    origin of the query and the repository from\n   which query results are obtained,
    is also out of scope.\n"
  title: 4  Scope of Security Coverage
- contents:
  - "5  Organization of this Document\n   Familiarity with RIPE-181 [2] and RPSL [1]
    is assumed throughout this\n   document.  Goals are described in Section 6.  Section
    7 through\n   Section 9 provide descriptions of the changes and discussion.\n
    \  Section 10 provides a concise summary of data formats and semantics.\n   Appendix
    C through Appendix E provide additional technical\n   discussion, examples, and
    deployment considerations.\n      Goals and Requirements Section 6 provides a
    more detailed\n      description of the issues and identifies specific problems
    that\n      need to be solved, some of which require a degree of cooperation\n
    \     in the Internet community.\n      Data Representation Section 7 provides
    some characteristics of\n      RPSL and formats for external representations of
    information.\n      Authentication Model Section 8 describes current practice,\n
    \     proposes additional authentication methods, and describes the\n      extension
    mechanism if additional methods are needed in the\n      future.\n      Authorization
    Model Section 9 describes the means of determining\n      whether a transaction
    contains the authorization needed to add,\n      modify, or delete specific data
    objects, based on stated\n      authentication requirements in related data objects.\n
    \     Data Format Summaries Section 10 provides a concise reference to\n      the
    data formats and steps in transaction processing.\n      Technical Discussion
    Section C contains some discussion of\n      technical tradeoffs.\n      Common
    Operational Cases Section D provides some examples drawn\n      from past operational
    experience with the IRR.\n      Deployment Considerations Section E describes
    some deployment\n      issues and discusses possible means of resolution.\n"
  title: 5  Organization of this Document
- contents:
  - "6  Goals and Requirements\n   The Internet is an open network.  This openness
    and the large scale\n   of the Internet can present operational problems.  Technical\n
    \  weaknesses that allow misconfiguration or errant operation in part of\n   the
    network to propagate globally or which provide potentials for\n   simple denial
    of service attacks should be eliminated to the extent\n   that it is practical.
    \ The integrity of routing information is\n   critical in assuring that traffic
    goes where it is supposed to.\n   An accidental misconfiguration can direct traffic
    toward routers that\n   cannot reach a destination for which they are advertising\n
    \  reachability.  This is commonly caused by misconfigured static routes\n   though
    there are numerous other potential causes.  Static routes are\n   often used to
    provide constant apparent reachability to single homed\n   destinations.  Some
    of the largest ISPs literally have thousands of\n   static routes in their networks.
    \ These are often entered manually by\n   operators.  Mistyping can divert traffic
    from a completely unrelated\n   destination to a router with no actual reachability
    to the advertised\n   destination.  This can happen and does happen somewhat regularly.
    \ In\n   addition, implementation bugs or severe misconfigurations that result\n
    \  in the loss of BGP AS path information or alteration of prefix length\n   can
    result in the advertisement of large sets of routes.  Though\n   considerably
    more rare, on a few occasions where this has occurred\n   the results were catastrophic.\n
    \  Where there is the potential for an accidental misconfiguration in a\n   remote
    part of the Internet affecting the global Internet there is\n   also the potential
    for malice.  For example, it has been demonstrated\n   by accident that multiple
    hour outages at a major institution can be\n   caused by a laptop and a dial account
    if proper precautions are not\n   taken.  The dial account need not be with the
    same provider used by\n   the major institution.\n   The potential for error is
    increased by the CIDR preference for more\n   specific routes [8].  If an institution
    advertises a single route of\n   a given length and a distant router advertises
    a more specific route\n   covering critical hosts, the more specific route, if
    accepted at all,\n   is preferred regardless of administrative weighting or any
    routing\n   protocol attributes.\n   There is a need to provide some form of checks
    on whether a route\n   advertisement is valid.  Today checks are typically made
    against the\n   border AS advertising the route.  This prevents accepting routes
    from\n   the set of border AS that could not legitimately advertise the route.\n
    \  Theses checks rely on the use of information registered in the IRR to\n   generate
    lists of prefixes that could be advertised by a specific\n   border AS. Checks
    can also be made against the origin AS. If policy\n   information were sufficiently
    populated, checks could be made against\n   the entire AS path, but this is not
    yet feasible.\n   The use of a routing registry can also make it more difficult
    for\n   prefixes to be used without authorization such as unallocated\n   prefixes
    or prefixes allocated to another party.\n   In summary, some of the problems being
    addressed are:\n   o  Localizing the impact of accidental misconfiguration made
    by\n      Internet Providers to that provider's networks only.\n   o  Eliminating
    the potential for an Internet provider's customer to\n      use malicious misconfiguration
    of routing as a denial of service\n      attack if the provider route filters
    their customers.  Localizing\n      the denial of service to that Internet provider
    only if the\n      immediate Internet service provider does not route filter their\n
    \     customers but other providers route filter the route exchange at\n      the
    interprovider peering.\n   o  Eliminating the unauthorized use of address space.\n
    \  If the data within a routing registry is critical, then the ability\n   to
    change the data must be controlled.  Centralized authorities can\n   provide control
    but centralization can lead to scaling problems (and\n   is politically distasteful).\n
    \  Address allocation and name allocation is already delegated.  Since\n   delegation
    can be to outside registries it is at least somewhat\n   distributed [11].  Autonomous
    System (AS) numbers are allocated by\n   the same authorities.  It makes sense
    to delegate the routing number\n   space in a manner similar to the address allocation
    and AS number\n   allocation.  The need for this delegation of authority to numerous\n
    \  registries increases the difficulty of maintaining the integrity of\n   the
    body of information as a whole.\n   As a first step, the database can be somewhat
    centrally administered\n   with authority granted to many parties to change the
    information.\n   This is the case with the current IRR. There are a very small
    number\n   of well trusted repositories and a very large number of parties\n   authorized
    to make changes.  Control must be exercised over who can\n   make changes and
    what changes they can make.  The distinction of who\n   vs what separates authentication
    from authorization.\n   o  Authentication is the means to determine who is attempting
    to make\n      a change.\n   o  Authorization is the determination of whether
    a transaction\n      passing a specific authentication check is allowed to perform
    a\n      given operation.\n   Different portions of the database will require
    different methods of\n   authentication.  Some applications will require authentication
    based\n   on strong encryption.  In other cases software supporting strong\n   encryption
    may not be necessary or may not be legally available.  For\n   this reason multiple
    authentication methods must be supported,\n   selected on a per object basis through
    the specification of\n   authentication methods in the maintainer object \"auth\"
    attribute.\n   The authentication methods may range from very weak data integrity\n
    \  checks to cryptographicly strong signatures.  The authorization model\n   must
    sure that the use of weak integrity checks in parts of the\n   database does not
    compromise the overall integrity of the database.\n   Additional requirements
    are placed on the authorization model if the\n   database is widely distributed
    with delegations made to parties that\n   may not be trustworthy or whose security
    practices may be lacking.\n   This problem must be addressed in the authorization
    model in order to\n   enable later evolution to a more distributed routing registry.\n
    \  Autonomous system numbers can be delegated in blocks and subdelegated\n   as
    needed and then individual AS numbers assigned.  Address\n   allocation is a simple
    numeric hierarchy.  Route allocation is\n   somewhat more complicated.  The key
    attributes in a route object (key\n   with regard to making it unique) contain
    both an address prefix and\n   an AS number, known as the origin AS. The addition
    of a route object\n   must be validated against the authorization criteria for
    both the AS\n   and the address prefix.  Route objects may exist for the same
    prefix\n   with multiple origin AS values due to a common multihoming practice\n
    \  that does not require a unique origin AS. There is often no\n   correlation
    between the origin AS of a prefix and the origin AS of\n   overlapping more specific
    prefixes.\n   There are numerous operational cases that must be accommodated.
    \ Some\n   of the more common are listed below.  These are explored in greater\n
    \  detail in Appendix D with discussion of technical tradeoffs in\n   Appendix
    C.\n   o  simple hierarchical address allocation and route allocation\n   o  aggregation
    and multihomed more specific routes\n   o  provider independent addresses and
    multiple origin AS\n   o  changing Internet service providers\n   o  renumbering
    grace periods\n   The authorization model must accommodate a variety of policies\n
    \  regarding the allocation of address space and cannot mandate the use\n   of
    any one model.  There is no standardization of address allocation\n   policies
    though guidelines do exist [11, 16].  Whether authorization\n   allows the recovery
    of address space must be selectable on a per\n   object basis and may differ in
    parts of the database.  This issue is\n   discussed further in Appendix C.\n"
  title: 6  Goals and Requirements
- contents:
  - "7  Data Representation\n   RPSL provides a complete description of the contents
    of a routing\n   repository [1].  Many RPSL data objects remain unchanged from
    the\n   RIPE specifications and RPSL references the RIPE-181 specification as\n
    \  recorded in RFC-1786 [2].  RPSL provides external data\n   representation.
    \ Data may be stored differently internal to a routing\n   registry.\n   Some
    database object types or database attributes must be added to\n   RPSL to record
    the delegation of authority and to improve the\n   authentication and authorization
    mechanisms.  These additions are\n   very few and are described in Section 8 and
    Section 9.\n   Some form of encapsulation must be used to exchange data.  The\n
    \  defacto encapsulation has been the one which the RIPE tools accept, a\n   plain
    text file or plain text in the body of an RFC-822 formatted\n   mail message with
    information needed for authentication derived from\n   the mail headers or the
    body of the message.  Merit has slightly\n   modified this using the PGP signed
    portion of a plain text file or\n   PGP signed portion of the body of a mail message.
    \ These very simple\n   forms of encapsulation are suitable for the initial submission
    of a\n   database transaction.\n   The encapsulation of registry transaction submissions,
    registry\n   queries and registry responses and exchanges between registries is\n
    \  outside the scope of this document.  The encapsulation of registry\n   transaction
    submissions and exchanges between registries is outside\n   the scope of this
    document.\n"
  title: 7  Data Representation
- contents:
  - "8  Authentication Model\n   The maintainer objects serve as a container to hold
    authentication\n   filters.  A reference to a maintainer within another object
    defines\n   authorization to perform operations on the object or on a set of\n
    \  related objects.  The maintainer is typically referenced by name in\n   mnt-by
    attributes of objects.  Further details on the use of\n   maintainers are provided
    in Section 9.1.\n   The maintainer contains one or more \"auth\" attributes.  Each
    \"auth\"\n   attribute begins with a keyword identifying the authentication method\n
    \  followed by the authentication information needed to enforce that\n   method.
    \ The PGPKEY method is slightly syntactically different in\n   that the method
    PGPKEY is a substring.\n   Authentication methods currently supported include
    the following.\n   Note that pgp-from is being replaced by the pgpkey (see Section
    10\n   and [18]).\n   mail-from  This is a very weak authentication check and
    is\n      discouraged.  The authentication information is a regular\n      expression
    over ASCII characters.  The maintainer is authenticated\n      if the from or
    reply-to fields in RFC-822 mail headers are matched\n      by this regular expression.
    \ Since mail forgery is quite easy,\n      this is a very weak form of authentication.\n
    \  crypt-pw  This is another weak form of authentication.  The\n      authentication
    information is a fixed encrypted password in UNIX\n      crypt format.  The maintainer
    is authenticated if the transaction\n      contains the clear text password of
    the maintainer.  Since the\n      password is in clear text in transactions, it
    can be captured by\n      snooping.  Since the encrypted form of the password
    is exposed, it\n      is subject to password guessing attacks.\n   pgp-from  This
    format is being replaced by the \"pgpkey\" so that the\n      public key certificate
    will be available to remote repositories.\n      This is Merit's PGP extension.
    \ The authentication information is\n      a signature identity pointing to an
    external public key ring.  The\n      maintainer is authenticated if the transaction
    (currently PGP\n      signed portion of a mail message) is signed by the corresponding\n
    \     private key.\n   pgpkey  This keyword takes the form \"PGPKEY-hhhhhhhh\",
    where\n      \"hhhhhhhh\" is the hex representation of the four byte id of the\n
    \     PGP public key used for authentication.  The public key\n      certificate
    is stored in a separate object as described in [18].\n   Repositories may elect
    to disallow the addition of \"auth\" attributes\n   specifying weaker forms of
    authentication and/or disallow their use\n   in local transaction submissions.
    \ Repositories are encouraged to\n   disallow the addition of \"auth\" attributes
    with the deprecated \"pgp-\n   from\" method.\n   Any digital signature technique
    can in principle be used for\n   authentication.  Transactions should be signed
    using multiple digital\n   signature techniques to allow repositories or mirrors
    that only use a\n   subset of the techniques to verify at least one of the signatures.\n
    \  The selection of digital signature techniques is not within the scope\n   of
    this document.\n"
  title: 8  Authentication Model
- contents:
  - "9  Authorization Model\n   The authorization model must accommodate the requirements
    outlined in\n   Section 6.  A key feature of the authorization model is the\n
    \  recognition that authorization for the addition of certain types of\n   data
    objects must be derived from related data objects.\n   With multiple repositories,
    objects not found in RPSL are needed to\n   control AS delegations and new attributes
    are needed in existing\n   objects to control subdelegation.  The definition of
    RPSL objects\n   used to implement a distrubuted routing registry system is not
    within\n   the scope of this document.\n"
  - contents:
    - "9.1  Maintainer Objects\n   The maintainer objects serve as a container to
      hold authentication\n   filters.  The authentication methods are described in
      Section 8.  The\n   maintainer can be referenced by name in other objects, most
      notably\n   in the mnt-by attributes of those objects.\n   Maintainers themselves
      contain mnt-by attributes.  In some cases the\n   mnt-by in a maintainer will
      reference the maintainer itself.  In this\n   case, authorization to modify
      the maintainer is provided to a\n   (usually very limited) set of identities.
      \ A good practice is to\n   create a maintainer containing a long list of identities
      authorized\n   to make specific types of changes but have the maintainer's mnt-by\n
      \  attribute reference a far more restrictive maintainer more tightly\n   controlling
      changes to the maintainer object itself.\n   The mnt-by attribute is mandatory
      in all objects.  Some data already\n   exists without mnt-by attributes.  A
      missing mnt-by attribute is\n   interpreted as the absence of any control over
      changes.  This is\n   highly inadvisable and most repositories will no longer
      allow this.\n   An additional maintainer reference can occur through a new attribute,\n
      \  \"mnt-routes\", and is used in aut-num, inetnum and route objects.  The\n
      \  \"mnt-routes\" attribute is an extension to RPSL and is described in\n   detail
      in Section 10.\n   A mnt-routes attribute in an aut-num object allows addition
      of route\n   objects with that AS number as the origin to the maintainers listed.\n
      \  A mnt-routes attribute in an inetnum object allows addition of route\n   objects
      with exact matching or more specific prefixes.  A mnt-routes\n   attribute in
      a route object allows addition of route objects with\n   exact matching or more
      specific prefixes.  A mnt-routes attribute\n   does not allow changes to the
      aut-num, inetnum, or route object where\n   it appears.  A mnt-routes may optionally
      be constrained to only apply\n   to a subset of more specific routes.\n   Where
      \"mnt-routes\" or \"mnt-lower\" are applicable, any maintainer\n   referenced
      in the \"mnt-by\" still apply.  The set of applicable\n   maintainers for whatever
      check is being made is the union of the\n   \"mnt-routes\" or \"mnt-lower\"
      and the \"mnt-by\".  For example, when\n   authorizing a route object software
      would look at \"mnt-routes\", if it\n   does not exist, look at \"mnt-lower\",
      if that does not exist look at\n   \"mnt-by\".\n"
    title: 9.1  Maintainer Objects
  - contents:
    - "9.2  as-block and aut-num objects\n   An \"as-block\" object is needed to delegate
      a range of AS numbers to a\n   given repository.  This is needed for authorization
      and it is needed\n   to avoid having to make an exhaustive search of all repositories
      to\n   find a specific AS. This search would not be an issue now but would\n
      \  be if a more distributed routing repository is used.  Distributed\n   registry
      issues are not within the scope of this document.\n   The \"as-block\" object
      also makes it possible to separate AS number\n   allocation from registration
      of AS routing policy.\n      as-block:        AS1321 - AS1335\n   The \"aut-num\"
      describes the routing policy for an AS and is critical\n   for router configuration
      of that AS and for analysis performed by\n   another AS. For the purpose of
      this document it is sufficient to\n   consider the aut-num solely as a place
      holder identifying the\n   existence of an AS and providing a means to associate
      authorization\n   with that AS when adding \"route\" objects.\n   The \"as-block\"
      object is proposed here solely as a means of recording\n   the delegation of
      blocks of AS numbers to alternate registries and in\n   doing so providing a
      means to direct queries and a means to support\n   hierarchical authorization
      across multiple repositories.\n"
    title: 9.2  as-block and aut-num objects
  - contents:
    - "9.3  inetnum objects\n   The \"inetnum\" exists to support address allocation.
      \ For external\n   number registries, such as those using \"[r]whoisd[++]\"
      the \"inet-num\"\n   can serve as a secondary record that is added when an address\n
      \  allocation is made in the authoritative database.  Such records could\n   be
      added by a address registry such as ARIN as a courtesy to the\n   corresponding
      routing registry.\n      inetnum:        193.0.0.0 - 193.0.0.255\n      source:
      \        IANA\n"
    title: 9.3  inetnum objects
  - contents:
    - "9.4  route objects\n   Currently there are a quite few route objects in more
      than one\n   registry.  Quite a few are registered with an origin AS for which\n
      \  they have never been announced.  There is a legitimate reason to be\n   in
      more than one origin AS.\n   The \"route\" object is used to record routes which
      may appear in the\n   global routing table.  Explicit support for aggregation
      is provided.\n   Route objects exist both for the configuration of routing information\n
      \  filters used to isolate incidents of erroneous route announcements\n   (Section
      6) and to support network problem diagnosis.\n"
    title: 9.4  route objects
  - contents:
    - "9.5  reclaim and no-reclaim attributes\n   A reclaim attribute is needed in
      as-block, inetnum and route objects.\n   The reclaim attribute allows a control
      to be retained over more\n   specific AS, IP address or route space by allowing
      modify and delete\n   privileges regardless of the mnt-by in the object itself.\n
      \  The reclaim attribute provides the means to enforce address lending.\n   It
      allows cleanup in cases where entities cease to exist or as a last\n   presort
      means to correct errors such as parties locking themselves\n   out of access
      to their own objects.  To specify all more specific\n   objects the reclaim
      attribute value should be \"ALL\". To allow finer\n   control a set of prefixes
      can be specified.\n   A no-reclaim attribute can be used to provide explicit
      exceptions.  A\n   reclaim attribute can only be added to an existing object
      if the\n   addition of the reclaim attribute does not remove autonomy of\n   existing
      more specific objects that are covered by the new reclaim\n   attribute.\n   1.
      A reclaim attribute can be added to an existing object if there\n      are no
      existing exact matches or more specific objects overlapped\n      by the new
      reclaim attribute, or\n   2. if the submitter is listed in the maintainer pointed
      to by the\n      mnt-by of the objects which are overlapped, or\n   3. if any
      overlapped object is listed in a no-reclaim attribute in\n      the object where
      the reclaim is being added.\n   Similarly, a submitter may delete a no-reclaim
      attribute from an\n   object only when that submitter is the only maintainer
      listed in the\n   mnt-by attributes of any overlapped objects.  If the submitter
      is not\n   listed in any of the maintainers pointed to by the mnt-by attributes\n
      \  for one or more overlapped object, then the submitter is not\n   permitted
      to delete the no-reclaim attribute.\n   If neither a reclaim or no-reclaim attribute
      is present, then more\n   specific objects of a given object cannot be modified
      by the\n   maintainer of the less specified object unless the maintainer is
      also\n   listed as a maintainer in the more specific object.  However, the\n
      \  addition of a new route or inetnum object must pass authentication of\n   the
      largest less specific prefix as part of the authentication check\n   described
      in Section 9.9.\n   See Section 10 for a full description of the reclaim and
      no-reclaim\n   attributes.\n"
    title: 9.5  reclaim and no-reclaim attributes
  - contents:
    - "9.6  Other Objects\n   Many of the RPSL ancillary objects have no natural hierarchy
      the way\n   AS numbers, Internet addresses and routes do have a numeric\n   hierarchy.
      \ Some examples are \"maintainers\", \"people\" and \"role\"\n   objects.  For
      these objects, lack of any hierarchy leads to two\n   problems.\n   1. There
      is no hierarchy that can be exploited to direct queries to\n      alternate
      registries.  At some point the query strategy of\n      searching all known
      registries becomes impractical.\n   2. There is no hierarchy on which authorizations
      of additions can be\n      based.\n   The first problem can be addressed by
      considering the name space for\n   each of the ancillary objects to be unique
      only within the local\n   database and to use explicit references to an external
      repository\n   where needed.  To specify an external repository reference, the\n
      \  object key is preceded by the name of the repository and the\n   delimiter
      \"::\".  For example a NIC handle may take the form\n   \"RIPE::CO19\".  Currently
      there is a desire to keep NIC handles unique\n   so the naming convention of
      appending a dash and the repository name\n   is used.  Prepending the repository
      name provides the unique name\n   space since an object in the RIPE database
      referencing \"CO19\" would\n   be interpreted as \"RIPE::CO19\" by default,
      but it would still be\n   possible to query or reference \"IANA::CO19\".  There
      is no possibility\n   of accidentally forgetting to adhere to the conventions
      when making\n   an addition and the existing objects are accommodated, including\n
      \  cases where name conflicts have already occurred.\n   The second problem
      can be partially addressed by using a referral\n   system for the addition of
      maintainers and requiring that any other\n   object be submitted by a registered
      maintainer or by IANA.  The\n   referral system would allow any existing maintainer
      to add another\n   maintainer.  This can be used in parallel with the addition
      of other\n   object types to support the maintenance of those objects.  For\n
      \  example, when adding a subdomain to the \"domain\" hierarchy (in the\n   RIPE
      repository where domains are also handled), even when adding a\n   new domain
      to a relatively flat domain such as \"com\", there is\n   already a maintainer
      for the existing domain.  The existing\n   maintainer can add the maintainer
      that will be needed for the new\n   domain in addition to adding the new domain
      and giving the new\n   maintainer the right to modify it.\n   An organization
      gaining a presence on the Internet for the first time\n   would be given a maintainer.
      \ This maintainer may list a small number\n   of very trusted employees that
      are authorized to modify the\n   maintainer itself.  The organization itself
      can then add another\n   maintainer listing a larger set of employees but listing
      the more\n   restrictive maintainer in the mnt-by attributes of the maintainers\n
      \  themselves.  The organization can then add people and role objects as\n   needed
      and any other objects as needed and as authorization permits.\n"
    title: 9.6  Other Objects
  - contents:
    - "9.7  Objects with AS Hierarchical Names\n   Many RPSL objects do not have a
      natural hierarchy of their own but\n   allow hierarchical names.  Some examples
      are the object types \"as-\n   set\" and \"route-set\".  An as-set may have
      a name corresponding to no\n   naming hierarchy such as \"AS-Foo\" or it may
      have a hierarchical name\n   of the form \"AS1:AS-Bar\".\n   When a hierarchical
      name is not used, authorization for objects such\n   as \"as-set\" and \"route-set\"
      correspond to the rules for objects with\n   no hierarchy described in Section
      9.6.\n   If hierarchical names are used, then the addition of an object must\n
      \  be authorized by the aut-num whose key is named by everything to the\n   left
      of the rightmost colon in the name of the object being added.\n   Authorization
      is determined by first using the mnt-lower maintainer\n   reference, or if absent,
      using the mnt-by reference.\n"
    title: 9.7  Objects with AS Hierarchical Names
  - contents:
    - "9.8  Query Processing\n   A query may have to span multiple repositories.  All
      queries should\n   be directed toward a local repository which may mirror the
      root\n   repository and others.  Currently each IRR repository mirrors all\n
      \  other repositories.  In this way, the query may be answered by the\n   local
      repository but draw data from others.\n   The mechanism below when applied to
      multiple repositories assumes the\n   existence of an attribute for traversal
      of the repositories.  The\n   definition of this attribute is considered a distributed
      registry\n   issue and is out of scope of this document.\n   For object types
      that have a natural hierarchy, such as aut-num,\n   inet-num, and route, the
      search begins at the root database and\n   follows the hierarchy.  For objects
      types that have no natural\n   hierarchy, such as maintainer, person, and role
      objects, the search\n   is confined to a default database unless a database
      is specified.\n   The default database is the same database as an object from
      which a\n   reference is made if the query is launched through the need to follow\n
      \  a reference. Otherwise the default is generally the local database or\n   a
      default set by the repository.  The default can be specified in the\n   query
      itself as described in Section 9.7.\n   In the absense of attributes to traverse
      multiple registries a search\n   of all repositories is needed.  With such attributes
      the search would\n   proceed as follows.  In searching for an AS, the delegation
      attribute\n   in AS blocks can be consulted, moving the search to data from
      other\n   repositories.  Eventually the AS is either found or the search fails.\n
      \  The search for an inetnum is similar.  Less specific inetnums may\n   refer
      the search to other databases.  Eventually the most specific\n   inetnum is
      found and its status (assigned or not assigned) can be\n   determined.  The
      definition of attributes for traversal of\n   repositories is considered a distrbiuted
      registry issue and is not\n   within the scope of this document.\n   The search
      for a route in the presence of attributes for the\n   traversal of multiple
      registries is similar except the search may\n   branch to more than one repository.
      \ The most specific route in one\n   repository may be more specific than the
      most specific in another.\n   In looking for a route object it makes sense to
      return the most\n   specific route that is not more specific than the query
      requests\n   regardless of which repository that route is in rather than return\n
      \  one route from each repository that contains a less specific overlap.\n"
    title: 9.8  Query Processing
  - contents:
    - "9.9  Adding to the Database\n   The mechanism below when applied to multiple
      repositories assumes the\n   existence of an attribute for traversal of the
      repositories.  The\n   definition of this attribute is considered a distributed
      registry\n   issue and is out of scope of this document.\n   The root repository
      must be initially populated at some epoch with a\n   few entries.  An initial
      maintainer is needed to add more\n   maintainers.  The referral-by attribute
      can be set to refer to itself\n   in this special case (Section 10 describes
      the referral-by).  When\n   adding an inetnum or a route object an existing
      exact match or a less\n   specific overlap must exist.  A route object may be
      added based on an\n   exact match or a less specific inetnum.  The root repository
      must be\n   initially populated with the allocation of an inetnum covering the\n
      \  prefix 0/0, indicating that some address allocation authority exists.\n   Similarly
      an initial as-block is needed covering the full AS number\n   range.\n   When
      adding an object with no natural hierarchy, the search for an\n   existing object
      follows the procedure outlined in Section 9.8.\n   When adding an aut-num (an
      AS), the same procedure used in a query is\n   used to determine the appropriate
      repository for the addition and to\n   determine which maintainer applies.  The
      sequence of AS-block objects\n   and repository delegations is followed.  If
      the aut-num does not\n   exist, then the submission must match the authentication
      specified in\n   the maintainer for the most specific AS-block in order to be
      added.\n   The procedure for adding an inetnum is similar.  The sequence of\n
      \  inet-num blocks is followed until the most specific is found.  The\n   submission
      must match the authentication specified in the maintainer\n   for the most specific
      inetnum overlapping the addition.\n   Adding a route object is somewhat more
      complicated.  The route object\n   submission must satisfy two authentication
      criteria.  It must match\n   the authentication specified in the aut-num and
      the authentication\n   specified in either a route object or if no applicable
      route object\n   is found, then an inetnum.\n   An addition is submitted with
      an AS number and prefix as its key.  If\n   the object already exists, then
      the submission is treated as a modify\n   (see Section 9.10).  If the aut-num
      does not exist on a route add,\n   then the addition is rejected (see Section
      C for further discussion\n   of tradeoffs).  If the aut-num exists then the
      submission is checked\n   against the applicable maintainer.  A search is then
      done for the\n   prefix first looking for an exact match.  If the search for
      an exact\n   match fails, a search is made for the longest prefix match that
      is\n   less specific than the prefix specified.  If this search succeeds it\n
      \  will return one or more route objects.  The submission must match an\n   applicable
      maintainer in at least one of these route objects for the\n   addition to succeed.
      \ If the search for a route object fails, then a\n   search is performed for
      an inetnum that exactly matches the prefix or\n   for the most specific inetnum
      that is less specific than the route\n   object submission.  The search for
      an inetnum should never fail but\n   it may return an unallocated or reserved
      range.  The inetnum status\n   must be \"allocated\" and the submission must
      match the maintainer.\n   Having found the AS and either a route object or inetnum,
      the\n   authorization is taken from these two objects.  The applicable\n   maintainer
      object is any referenced by the mnt-routes attributes.  If\n   one or more mnt-routes
      attributes are present in an object, the mnt-\n   by attributes are not considered.
      \ In the absence of a mnt-routes\n   attribute in a given object, the mnt-by
      attributes are used for that\n   object.  The authentication must match one
      of the authorizations in\n   each of the two objects.\n   If the addition of
      a route object or inetnum contains a reclaim\n   attribute, then any more specific
      objects of the same type must be\n   examined.  The reclaim attribute can only
      be added if there are no\n   more specific overlaps or if the authentication
      on the addition is\n   present in the authorization of a less specific object
      that already\n   has a reclaim attribute covering the prefix range, or if the\n
      \  authentication on the addition is authorized for the modification of\n   all
      existing more specific prefixes covered by the addition.\n"
    title: 9.9  Adding to the Database
  - contents:
    - "9.10  Modifying or Deleting Database Objects\n   When modifying or deleting
      any existing object a search for the\n   object is performed as described in
      Section 9.8.  If the submission\n   matches an applicable maintainer for the
      object, then the operation\n   can proceed.  An applicable maintainer for a
      modification is any\n   maintainer referenced by the mnt-by attribute in the
      object.  For\n   route and inet-num objects an applicable maintainer may be
      listed in\n   a less specific object with a reclaim attribute.\n   If the submission
      is for a route object, a search is done for all\n   less specific route objects
      and inetnums.  If the submission is for\n   an inetnum, a search is done for
      all less specific inetnums.  If the\n   submission fails the authorization in
      the object itself but matches\n   the reclaim attribute in any of the less specific
      objects, then the\n   operation can proceed.  Section C contains discussion
      of the\n   rationale behind the use of the reclaim attribute.\n   A modification
      to an inetnum object that adds a reclaim attribute or\n   removes a no-reclaim
      attribute must be checked against all existing\n   inetnums that are more specific.
      \ The same check of the reclaim\n   attribute that is made during addition must
      be made when a reclaim\n   attribute is added by a modification (see Section
      9.9).\n   A deletion is considered a special case of the modify operation.  The\n
      \  deleted object may remain in the database with a \"deleted\" attribute\n
      \  in which case the mnt-by can still be consulted to remove the\n   \"deleted\"
      attribute.\n"
    title: 9.10  Modifying or Deleting Database Objects
  title: 9  Authorization Model
- contents:
  - "10  Data Format Summaries\n   RIPE-181 [2] and RPSL [1] data is represented externally
    as ASCII\n   text.  Objects consist of a set of attributes.  Attributes are name\n
    \  value pairs.  A single attribute is represented as a single line with\n   the
    name followed by a colon followed by whitespace characters\n   (space, tab, or
    line continuation) and followed by the value.  Within\n   a value all whitespace
    is equivalent to a single space.  Line\n   continuation is supported by a backslash
    at the end of a line or the\n   following line beginning with whitespace.  When
    transferred,\n   externally attributes are generally broken into shorter lines
    using\n   line continuation though this is not a requirement.  An object is\n
    \  externally represented as a series of attributes.  Objects are\n   separated
    by blank lines.\n   There are about 80 attribute types in the current RIPE schema
    and\n   about 15 object types.  Some of the attributes are mandatory in\n   certain
    objects.  Some attributes may appear multiple times.  One or\n   more attributes
    may form a key.  Some attributes or sets of\n   attributes may be required to
    be unique across all repositories.\n   Some of the attributes may reference a
    key field in an object type\n   and may be required to be a valid reference.  Some
    attributes may be\n   used in inverse lookups.\n   A review of the entire RIPE
    or RPSL schema would be too lengthy to\n   include here.  Only the differences
    in the schema are described.\n"
  - contents:
    - "10.1  Changes to the RIPE/RPSL Schema\n   One new object type and several attributes
      are added to the RIPE/RPSL\n   schema.  There are significant changes to the
      rules which determine\n   if the addition of an object is authorized.\n   The
      new object type is listed below.  The first attribute listed is\n   the key
      attribute and also serves as the name of the object type.\n   as-block        key
      \ mandatory  single    unique\n   descr                optional   multiple\n
      \  remarks              optional   multiple\n   admin-c              mandatory
      \ multiple\n   tech-c               mandatory  multiple\n   notify               optional
      \  multiple\n   mnt-by               mandatory  multiple\n   changed              mandatory
      \ multiple\n   source               mandatory  single\n   In the above object
      type only the key attribute \"as-block\" is new:\n   as-block  This attribute
      provides the AS number range for an \"as-\n      block\" object.  The format
      is two AS numbers including the sub-\n      string \"AS\" separated by a \"-\"
      delimiter and optional whitespace\n      before and after the delimiter.\n   In
      order to support stronger authentication, the following keywords\n   are added
      to the \"auth\" attribute:\n   pgp-from  The remainder of the attribute gives
      the string identifying\n      a PGP identity whose public key is held in an
      external keyring.\n      The use of this method is deprecated in favor of the
      \"pgpkey\"\n      method.\n   pgpkey  See [18].\n   In order to disable authentication
      and give permission to anyone, the\n   authentication method \"none\" is added.
      \ It has no arguments.\n   An additional change is the \"auth\" attribute is
      allowed to exist in a\n   \"person\" or \"role\" object.  The \"auth\" method
      \"role\" or \"person\" can\n   be used to refer to a role or person object and
      take the \"auth\"\n   fields from those objects.  Care must be taken in implementations
      to\n   detect circular references and terminate expansion or the references\n
      \  already visited.\n   A few attributes are added to the schema.  These are:\n
      \  mnt-routes  The mnt-routes attribute may appear in an aut-num, inet-\n      num,
      or route object.  This attribute references a maintainer\n      object which
      is used in determining authorization for the addition\n      of route objects.
      \ After the reference to the maintainer, an\n      optional list of prefix ranges
      (as defined in RPSL) inside of\n      curly braces or the keyword \"ANY\" may
      follow.  The default, when\n      no additional set items are specified is \"ANY\"
      or all more\n      specifics.  The mnt-routes attribute is optional and multiple.\n
      \     See usage details in Section 9.1.\n   mnt-lower  The mnt-lower attribute
      may appear in an inetnum, route,\n      as-block or aut-num object.  This attribute
      references a\n      maintainer object.  When used in an inetnum or route object
      the\n      effect is the same as a \"mnt-routes\" but applies only to prefixes\n
      \     more specific than the prefix of the object in which it is\n      contained.
      \ In an as block object, mnt-lower allows addition of\n      more specific as-block
      objects or aut-num objects.  In an aut-num\n      object the mnt-lower attribute
      specifies a maintainer that can be\n      used to add objects with hierarchical
      names as described in\n      Section 9.7.\n   reclaim  The reclaim attribute
      may appear in as-block, aut-num,\n      inet-num, or route objects.  Any object
      of the same type below in\n      the hierarchy may be modified or deleted by
      the maintainer of the\n      object containing a reclaim attribute.  The value
      of the attribute\n      is a set or range of objects of the same type where
      the syntax of\n      the set or range is as defined in RPSL. See Section 9.5
      for\n      restrictions on adding reclaim attributes.\n   no-reclaim  The no-reclaim
      attribute is used with the reclaim\n      attribute.  The no-reclaim attribute
      negates any reclaim attribute\n      it overlaps.  See Section 9.5 for restrictions
      on deleting no-\n      reclaim attributes.\n   referral-by  This attribute is
      required in the maintainer object.  It\n      may never be altered after the
      addition of the maintainer.  This\n      attribute refers to the maintainer
      that created this maintainer.\n      It may be multiple if more than one signature
      appeared on the\n      transaction creating the object.\n   auth-override  An
      auth-override attribute can be added, deleted, or\n      changed by a transaction
      submitted by maintainer listed in the\n      referral-by.  An auth-override
      can only be added to a maintainer\n      if that maintainer has been inactive
      for the prior 60 days.  The\n      auth-override attribute itself contains only
      the date when the\n      attribute will go into effect which must be at least
      60 days from\n      the current date unless there is already authorization to
      modify\n      the maintainer.  After the date in the auth-override is reached,\n
      \     those identified by the maintainer in the referral-by have\n      authorization
      to modify the maintainer.  This attribute exists as\n      a means to clean
      up should the holder of a maintainer become\n      unresponsive and can only
      take effect if that maintainer does not\n      remove the auth-override in response
      to the automatic notification\n      that occurs on changes.\n   The existing
      \"mnt-by\" attribute references the \"maintainer\" object\n   type.  The \"mnt-by\"
      attribute is now mandatory in all object types.\n   A new maintainer may be
      added by any existing maintainer.  The\n   \"referral-by\" attribute is now
      mandatory in the \"maintainer\" object\n   to keep a record of which maintainer
      made the addition and can never\n   be changed.  Maintainers cannot be deleted
      as long as they are\n   referenced by a \"referral-by\" attribute elsewhere.\n"
    - "A  Core and Non-Core Functionality\n   Most of the objects and attributes described
      in this document are\n   essential to the authorization framework.  These are
      referred to as\n   being part of the \"core\" functionality.  A few attributes
      listed here\n   are considered \"non-core\".\n   The \"reclaim\" and \"no-reclaim\"
      attributes are a convenience to\n   support flexibility in the implementation
      of address lending.\n   The \"auth-override\" attribute is a convenience to
      facilitate recovery\n   in an environment where repository data is redistributed
      in any way.\n   The \"referal-by\" attribute is a \"core\" feature.  An individual\n
      \  registry may express its sutonomy by creating a self-referencing\n   maintainer,
      one whose \"referal-by\" points to itslef.  Other\n   registries can decide
      on a case by case basis whether to consider\n   such an entry valid.  A registry
      may only allow the \"referal-by\" to\n   refer to a specific maintainer under
      the control of the registry.\n   This further restriction is an issue that is
      purely local to the\n   registry.\n"
    - "B  Examples\n   The examples below leave out some required attributes that
      are not\n   needed to illustrate the use of the objects and attributes described\n
      \  in this document.  Missing are admin-c, tech-c, changed, source.\n   Also
      missing are attributes such as mnt-nfy, whose use are a good\n   practice but
      are not strictly required.\n   To do anything at all a maintainer is needed.
      \ At some epoch a a\n   single maintainer is populated in one repository and
      that maintianer\n   has a referal-by pointing to itself.  All others referal-by\n
      \  references can be traced back to that maintainer.  At the epoch the\n   as-block
      AS0- AS65535 and the inetnum 0.0.0.0-255.255.255.255 are\n   also allocated.
      \ Other ancilliary object may also be needed to\n   bootstrap.\n      mntner:
      \       ROOT-MAINTAINER\n      auth:          pgpkey-12345678\n      mnt-by:
      \       ROOT-MAINTAINER\n      referal-by:    ROOT-MAINTAINER\n   This root
      maintainer might add a top level maintainer for some\n   organization.\n      mntner:
      \       WIZARDS\n      descr:         High level Technical Folks\n      auth:
      \         pgpkey-23456789\n      auth:          pgpkey-3456789a\n      mnt-by:
      \       WIZARDS\n      referal-by:    ROOT-MAINTAINER\n   That maintainer might
      add another who have more limited capabilities.\n      mntner:        MORTALS\n
      \     descr:         Maintain day to day operations\n      auth:          pgpkey-456789ab\n
      \     auth:          pgpkey-56789abc\n      auth:          pgpkey-6789abcd\n
      \     mnt-by:        WIZARDS\n      referal-by:    WIZARDS\n   Note that the
      WIZARDS can change their own maintainer object and the\n   MORTALS maintainer
      object but MORTALS cannot.\n   At some point an as-block is allocated and broken
      down.  In the\n   example below, private number space is used.\n      as-block:
      \     AS65500-AS65510\n      mnt-by:        SOME-REGISTRY\n      mnt-lower:
      \    WIZARDS\n      Note that a registry has control over the object that they
      have\n      created representing the allocation, but have given the party to\n
      \     which the allocation was made the ability to create more specific\n      objects.
      Below this as-block, an aut-num is added.  Note that\n      import and export
      are normally required for a aut-num but are not\n      shown here.\n      aut-num:
      \      AS65501\n      mnt-by:        WIZARDS\n      mnt-lower:     MORTALS\n
      \  In aut-num above the WIZARDS maintainer can modify the aut-num\n   itself.
      \ The MORTALS maintainer can add route objects using this AS\n   as the origin
      if they also have authorization for the IP number space\n   in a less specific
      route or inetnum.\n   We also need an inetnum allocation.  In this example the
      inetnum is\n   allocated to a completely different organization.  Again attributes\n
      \  are omited which would normally be needed in an inetnum.\n      inetnum:
      \      192.168.144.0-192.168.151.255\n      mnt-by:        SOME-REGISTRY\n      mnt-lower:
      \    ISP\n      reclaim:       ALL\n   The maintainer ISP can add more specific
      inetnums or routes with this\n   address space.  Note that the registry has
      declared their ability to\n   reclaim the address space.\n   If ISP wished to
      reclaim all allocations but some suballocation of\n   theirs resisted, we might
      get something like the following in which\n   they will reclaim only the top
      half of an allocation (possibly if it\n   remains unused).\n      inetnum:       192.168.144.0-192.168.147.255\n
      \     mnt-by:        ISP\n      mnt-lower:     EBG-COM\n      reclaim:       192.168.146/23+\n
      \  If we assume that the maintainer EBG-COM and the maintainer MORTALS\n   want
      to add a route object, one way to do it is for both parties to\n   sign.  If
      EBG-COM for some reason couldn't aggregate an allocate a\n   single top level
      route (which is inexcusable these days) or there was\n   a preference for some
      reason to avoid the joint signature approach on\n   a submission either party
      could give the other permission to make the\n   addition.  A mnt-routes could
      be added to the aut-num or a mnt-lower\n   could be added to an inetnum.\n      aut-num:
      \      AS65501\n      mnt-by:        WIZARDS\n      mnt-lower:     MORTALS\n
      \     mnt-routes:    EBG-COM {192.168.144/23}\n   With this change to the aut-num
      the maintainer EBG-COM could add a\n   route with origin AS65501, but only with
      a limited address range.\n      route:         192.168.144/24\n      origin:
      \       AS65501\n      descr:         These boneheads don't aggregate\n      mnt-by:
      \       EBG-COM\n      mnt-by:        FICTION::MORTALS\n   Note that while the
      maintainer EBG-COM added the object they allowed\n   the maintainer MORTALS
      the ability to modify it.\n   If an object ended up in another repository, a
      single maintainer\n   could still be used.  In the example above the notation\n
      \  FICTION::MORTALS indicates that the route object is in a different\n   repository
      and rather than duplicate the maintainer, a reference is\n   made to the repository
      in which the MORTALS object resides.\n   In the example below, a pair of route-sets
      are added and hierarchical\n   names are used.\n      route-set:     AS65501:Customers\n
      \     mnt-by:        WIZARDS\n      mnt-lower:     MORTALS\n      route-set:
      \    AS65501:Customers:EBG-COM\n      mnt-by:        MORTALS\n      mnt-lower:
      \    EBG-COM\n   Suppose in the 192.168.144/24 object above, only the EBG-COM\n
      \  maintainer is listed.  If EBG-COM goes bankrupt, no longer needs\n   address
      space, and stops responding, it could be difficult to delete\n   this object.
      \ The maintainer listed in the EBG-COM referral-by\n   attribute could be contacted.
      \ They could add a auth-override\n   attribute to the EBG-COM object.  Later
      they could modify the EBG-COM\n   object and then any objects with EBG-COM in
      the mnt-by.\n      mntner:        EBG-COM\n      mnt-by:        EBG-COM\n      auth-override:
      19990401\n   The examples above stray significantly from realism.  They do provide\n
      \  simple illustrations of the usage of the objects type and attributes\n   described
      in this document and hopefully in doing some are of some\n   value.\n"
    - "C  Technical Discussion\n   A few design tradeoffs exist.  Some of these tradeoffs,
      the selected\n   solution, and the alternatives are discussed here.  Some of
      the\n   issues are listed below.\n   1. Whether to err on the side of permissiveness
      and weaken\n      authorization controls or risk the possibility of erecting\n
      \     barriers to registering information.\n   2. Whether to support enforcible
      address lending or provide the\n      smaller or end user with ultimate control
      over the registration of\n      the prefixes they are using.\n   3. What to
      do with older objects that either don't conform to newer\n      requirements
      regarding minimum authorization, authentication, and\n      accountability,
      or are of questionable validity.\n"
    title: 10.1  Changes to the RIPE/RPSL Schema
  - contents:
    - "C.1  Relaxing requirements for ease of registry\n   If the requirement that
      an aut-num exists is relaxed, then it is\n   possible for anyone to make use
      of an unassigned AS number or make\n   use of an assigned AS number for which
      the aut-num has not been\n   entered.  Placing requirements on the entry of
      aut-num presumes\n   cooperation of the Internet address allocation authority
      (if separate\n   from the routing registry).  The address allocation authority
      must be\n   willing to field requests to populate skeleton aut-nums from the\n
      \  party for which the allocation has been made.  These aut-num must\n   include
      a reference to a maintainer.  A request to the address\n   allocation authority
      must therefore include a reference to an\n   existing maintainer.\n   The ability
      to add route objects is also tied to the existence of\n   less specific route
      objects or inetnums.  The Internet address\n   allocation authority (if separate
      from the routing registry) must\n   also be willing to field requests to add
      inetnum records for the\n   party already allocated the address space.\n   The
      Internet address allocation authority should also add inetnums\n   and aut-nums
      for new allocations.  In order to do so, a maintainer\n   must exist.  If a
      party is going to connect to the Internet, they can\n   get a maintainer by
      making a request to the Internet service provider\n   they will be connecting
      to.  Once they have a maintainer they can\n   make a request for address space
      or an AS number.  The maintainer can\n   contain a public key for a cryptographicly
      strong authorization\n   method or could contain a \"crypt-key\" or \"mail-to\"
      authorization\n   check if that is considered adequate by the registering party.\n
      \  Furthermore an address allocation authority should verify that the\n   request
      for an AS number or for address space matches the\n   authorization criteria
      in the maintainer.\n   Currently only the registries themselves may add maintainers.
      \ This\n   becomes a problem for the registry, particularly in verifying public\n
      \  keys.  This requirement is relaxed by allowing existing maintainers\n   to
      add maintainers.  Unfortunately the accountability trail does not\n   exist
      for existing maintainers.  The requirement then should be\n   relaxed such that
      existing maintainers may remain but only existing\n   maintainers that have
      a \"referral-by\" attribute can add maintainers.\n   The \"referral-by\" cannot
      be modified.  This requirement can be\n   relaxed slightly so that a \"referral-by\"
      can be added to a maintainer\n   by an existing maintainer with a \"referral-by\".
      \ This will allow the\n   accountability trail to be added to existing maintainers
      and these\n   maintainers can then add new maintainers.\n   Verifying that a
      party is who they claim to be on initial addition,\n   is one of the problems
      that currently falls upon the AS number and\n   address registry.  This problem
      is reduced by allowing existing\n   maintainers to add maintainers.  This may
      actually make it easier to\n   get maintainers and therefore easier to register.
      \ The number\n   authority still must verify that the AS or address space is
      actually\n   needed by the party making a request.\n   Authorization checks
      made during the addition of route objects that\n   refer to AS objects and inetnums
      strongly rely on the cooperation of\n   the Internet address allocation authorities.
      \ The number authorities\n   must register as-blocks, aut-nums, or inetnums
      as AS numbers or\n   address space is allocated.  If only a subset of the number\n
      \  authorities cooperate, then either an inetnum or as-block can be\n   created
      covering the space that registry allocates and essentially\n   requiring null
      allocation (for example a \"crypt-pw\" authentication\n   where the password
      is given in the remarks in the object or its\n   maintainer) or those obtaining
      addresses from that number authority\n   will have trouble registering in the
      routing registry.  The\n   authorization model supports either option, though
      it would be\n   preferable if the number authorities cooperated and the issue
      never\n   surfaced in practice.\n   The maintainer requirements can be relaxed
      slightly for existing\n   maintainers making it easier to register.  Relaxing
      requirements on\n   other objects may defeat the authorization model, hence
      is not an\n   option.\n"
    title: C.1  Relaxing requirements for ease of registry
  - contents:
    - "C.2  The address lending issue\n   The issue of whether lending contracts should
      be enforcible is an\n   issue of who should ultimately be able to exercise control
      over\n   allocations of address space.  The routing registry would be wise to\n
      \  stay as neutral as possible with regard to disputes between third\n   parties.
      \ The \"reclaim\" and \"no-reclaim\" are designed to allow either\n   outcome
      to the decision as to whether the holder of a less specific\n   inetnum or route
      object can exercise control over suballocations in\n   the registry.  The routing
      registry itself must decide whether to\n   retain control themselves and if
      so, should very clearly state under\n   what conditions the registry would intervene.
      \ A registry could even\n   go to the extreme of stating that they will intervene
      in such a\n   dispute only after the dispute has been resolved in court and
      a court\n   order has been issued.\n   When an allocation is made by a registry,
      the registry should keep a\n   \"reclaim\" attribute in the less specific object
      and make a strong\n   policy statement that the reclaim privilege will not be
      used except\n   under very clearly defined special circumstances (which at the
      very\n   minimum would include a court order).  If the allocation is further\n
      \  subdivided the party subdividing the allocation and the party\n   accepting
      the suballocation must decide whether a \"reclaim\" can be\n   kept by the holder
      of the less specific allocation or whether a \"no-\n   reclaim\" must be added
      transferring control to the holder of the more\n   specific.  The registry is
      not involved in that decision.  Different\n   pairs of third parties may reach
      different decisions regarding the\n   \"reclaim\" and any contractual restrictions
      on its use that may be\n   expressed outside of the registry in the form of
      a legal contract and\n   ultimately resolved by the courts in the event of a
      bitter dispute.\n   By retaining \"reclaim\" rights the registry retains the
      ability to\n   abide by a court order.  This may only truly become an issue
      in a\n   distributed registry environment where registries will be rechecking\n
      \  the authorization of transactions made elsewhere and may fail to\n   process
      the attempt of another registry to abide by a court order by\n   overriding
      normal authorization to change the registry contents if a\n   reclaim is not
      present.\n"
    title: C.2  The address lending issue
  - contents:
    - "C.3  Dealing with non-conformant or questionable older data\n   Some of the
      newer requirements include requiring that all objects\n   reference a maintainer
      object responsible for the integrity of the\n   object and requiring accountability
      for the creation of maintainers\n   to be recorded in the maintainer objects
      so that accountability can\n   be traced back from an unresponsive maintainer.
      \ In the event that\n   contact information is absent or incorrect from objects
      and there is\n   any question regarding the validity of the objects, the maintainer\n
      \  can be contacted.  If the maintainer is unresponsive, the maintainer\n   that
      authorized the addition of that maintainer can be contacted to\n   either update
      the contact information on the maintainer or confirm\n   that the entity no
      longer exists or is no longer actively using the\n   Internet or the registry.\n
      \  Many route objects exist for which there are no maintainers and for\n   which
      inetnum and AS objects do not exist.  Some contain the now\n   obsoleted guardian
      attribute rather than a mnt-by.\n   It is not practical to unconditionally purge
      old data that does not\n   have maintainers or does not conform to the authorization
      hierarchy.\n   New additions must be required to conform to the new requirements\n
      \  (otherwise the requirements are meaningless).  New requirements can\n   be
      phased in by requiring modifications to conform to the new\n   requirements.\n
      \  A great deal of questionable data exists in the current registry.\n   The
      requirement that all objects have maintainers and the\n   requirements for improved
      accountability in the maintainers\n   themselves may make it easier to determine
      contact information even\n   where the objects are not updated to reflect contact
      information\n   changes.\n   It is not unreasonable to require valid contact
      information on\n   existing data.  A great deal of data appears to be unused,
      such as\n   route objects for which no announcement has been seen in many months\n
      \  or years.  An attempt should be made to contact the listed contacts\n   in
      the object, in the maintainer if there is one, then up the\n   maintainer referral-by
      chain if there is one, and using the number\n   registry or origin AS contact
      information if there is no maintainer\n   accountability trail to follow.  Experience
      so far indicates that the\n   vast majority of deletions identified by comparing
      registered\n   prefixes against route dumps will be positively confirmed (allowing\n
      \  the deletion) or there will be no response due to invalid contact\n   information
      (in many cases the IRR contact information points to\n   nsfnet-admin@merit.edu).\n
      \  By allowing the registry to modify (or delete) any objects which are\n   disconnected
      from the maintainer accountability trail, cleanup can be\n   made possible (though
      mail header forging could in many cases have\n   the same effect it is preferable
      to record the fact that the registry\n   itself made the cleanup).  Similarly,
      a mechanism may be needed in\n   the future to allow the maintainer in the referral-by
      to override\n   maintainer privileges in a referred maintainer if all contacts
      have\n   become unresponsive for a maintainer.  The referral-by maintainer is\n
      \  allowed to add an \"auth-override\" attribute which becomes usable as\n   an
      \"auth\" within 60 days from the time of addition.  The maintainer\n   themselves
      would be notified of the change and could remove the\n   \"auth-override\" attribute
      before it becomes effective and inquire as\n   to why it was added and correct
      whatever problem existed.  This can\n   be supported immediately or added later
      if needed.\n"
    - "D  Common Operational Cases\n   In principle, address allocation and route
      allocation should be\n   hierarchical with the hierarchy corresponding to the
      physical\n   topology.  In practice, this is often not the case for numerous\n
      \  reasons.  The primary reasons are the topology is not strictly tree\n   structured
      and the topology can change.  More specificly:\n   1. The Internet topology
      is not strictly tree structured.\n      o  At the top level the network more
      closely resembles a\n         moderately dense mesh.\n      o  Near the bottom
      level many attachments to the Internet are\n         multi-homed to more than
      one Internet provider.\n   2. The Internet topology can and does change.\n      o
      \ Many attachments switch providers to obtain better service or\n         terms.\n
      \     o  Service providers may modify adjacencies to obtain better\n         transit
      service or terms.\n      o  Service providers may disappear completely scattering\n
      \        attachments or they may merge.\n   Renumbering is viewed as a practical
      means to maintain a strict\n   numeric hierarchy [16].  It is also acknowledged
      that renumbering\n   IPv4 networks can be difficult [16, 3, 17].  We examine
      first the\n   simple case where hierarchy still exists.  We then examine the\n
      \  operational cases where either initial topology is not tree\n   structured
      or cases where topology changes.\n"
    title: C.3  Dealing with non-conformant or questionable older data
  - contents:
    - "D.1  simple hierarchical address allocation and route allocation\n   This is
      the simplest case.  Large ranges of inetnums are assigned to\n   address registries.
      \ These registries in turn assign smaller ranges\n   for direct use or to topologically
      large entities where allocations\n   according to topology can reduce the amount
      of routing information\n   needed (promote better route aggregation).\n   AS
      objects are allocated as topology dictates the need for additional\n   AS [10].
      \ Route objects can be registered by those with authorization\n   given by the
      AS and by the address owner.  This is never an issue\n   where the maintainer
      of the AS and the inetnum are the same.  Where\n   they differ, either the provider
      can give permission to add route\n   objects for their AS, or the party allocated
      the address space can\n   give the provider permission to add route objects
      for their address\n   space, or both parties can sign the transaction.  Permission
      is\n   provided by adding to maintainer attributes.\n"
    title: D.1  simple hierarchical address allocation and route allocation
  - contents:
    - "D.2  aggregation and multihomed more specific routes\n   Aggregation is normally
      not a problem if a provider is aggregating\n   address space allocated to the
      provider and then suballocated\n   internally and/or to customers.  In fact,
      the provider would be\n   expected to do so.  This is not a problem even if
      the route object\n   for the aggregation is added after the more specific route
      objects\n   since only less specific objects are considered.\n   Aggregation
      is potentially a problem if a provider or a set of\n   providers plan to aggregate
      address space that was never explicitly\n   allocated as a block to those providers
      but rather remains the\n   allocation of a address registry.  These large aggregations
      can be\n   expected to be uncommon, but relatively easily dealt with.\n   Superaggregates
      of this type will generally be formed by\n   topologically close entities who
      have also managed to draw adjacent\n   address allocations.  In effect, the
      registry must give permission to\n   form such a superaggregate by either giving
      permission to do so in\n   the mnt-routes of an inetnum or by signing the submission
      along with\n   the other parties.\n"
    title: D.2  aggregation and multihomed more specific routes
  - contents:
    - "D.3  provider independent addresses and multiple origin AS\n   Provider independent
      addresses and multihoming arrangement using\n   multiple origin AS present a
      similar problem to multihoming.  The\n   maintainer of the address space and
      the maintainer of the AS is not\n   the same.  Permission can be granted using
      mnt-routes or multiple\n   signatures can appear on the submission.\n"
    title: D.3  provider independent addresses and multiple origin AS
  - contents:
    - "D.4  change in Internet service provider\n   A change in Internet service providers
      is similar to multihoming.  A\n   minor difference is that the AS for the more
      specific route will be\n   the AS of the new provider rather than the AS of
      the multihomed\n   customer.  Permission can be granted using mnt-routes or
      multiple\n   signatures can appear on the submission.\n"
    title: D.4  change in Internet service provider
  - contents:
    - "D.5  renumbering grace periods\n   Renumbering grace periods allow a provider
      who wants to keep an\n   address allocation intact to allow a customer who has
      chosen to go to\n   another provider to renumber their network gradually and
      then return\n   the address space after renumbering is completed.  The issue
      of\n   whether to require immediate renumbering or offer renumbering grace\n
      \  periods and how long they should be or whether they should be\n   indefinite
      has been topic of bitter disputes.  The authorization\n   model can support
      no renumbering grace period, a finite renumbering\n   grace period, or an indefinite
      renumbering grace period.  The\n   \"reclaim\" attribute described in Section
      9.1 provides a means to end\n   the grace period.\n"
    title: D.5  renumbering grace periods
  title: 10  Data Format Summaries
- contents:
  - "E  Deployment Considerations\n   This section describes deployment considerations.
    \ The intention is\n   to raise issues and discuss approaches rather than to provide
    a\n   deployment plan.\n   The use of routing registries is not yet universally
    accepted.  There\n   still remain Internet providers who see no reason to provide
    the\n   added assurance of accurate routing information described in Section\n
    \  6.  More accurately, these benefits are viewed as being insufficient\n   to
    justify the cost.  This has been largely caused an inability of a\n   very major
    router vendor up until recently to handle prefix lists of\n   the size needed
    to specify routing policy on a per prefix basis.\n   Another reason cited is that
    filtering on a prefix basis in an\n   environment where routing registry information
    is incomplete or\n   inaccurate can interfere with connectivity.\n   There clearly
    is a critical mass issue with regard to the use of\n   routing registries.  A
    minority of providers use the existing IRR to\n   filter on a per prefix basis.
    \ Another minority of providers do not\n   support the IRR and generally fail
    to register prefixes until\n   connectivity problems are reported.  The majority
    of providers\n   register prefixes but do not implement strict prefix filtering.\n
    \  Deploying new authentication mechanisms has no adverse consequences.\n   This
    has been proven with Merit's deployment of PGP.\n   In deploying new authorization
    mechanisms, a major issue is dealing\n   with existing data of very questionable
    origin.  A very large number\n   of route objects refer to prefixes that have
    not been announced for\n   many years.  Other route objects refer to prefixes
    that are no longer\n   announced with the origin AS that they are registered with
    (some were\n   incorrectly registered to start with).  There are many causes for\n
    \  this.\n   1. During the transition from the NSFNET PRDB to the RADB a large\n
    \     number of prefixes were registered with an origin AS corresponding\n      to
    the border AS at which the NSFNET had once heard the route\n      announcements.
    \ The PRDB did not support origin AS, so border AS\n      was used.  Many of these
    routes were no longer in use at the time\n      and are now routed with a submitter
    listed as \"nsfnet-\n      admin@merit.edu\".\n   2. As CIDR was deployed, aggregates
    replaced previously separately\n      announced more specific prefixes.  The route
    objects for the more\n      specific prefixes were never withdrawn from the routing\n
    \     registries.\n   3. Some prefixes are simply no longer in use.  Some networks
    have\n      been renumbered.  Some network no longer exist.  Often the routing\n
    \     registry information is not withdrawn.\n   4. As provider AS adjacencies
    changed and as end customers switched\n      providers often the actual origin
    AS changed.  This was often not\n      reflected by a change in the routing registry.\n
    \  Inaccuracies will continue to occur due to the reasons above, except\n   the
    first.  The hierarchical authorization provides greater\n   accountability.  In
    the event that the contacts for specific objects\n   become unresponsive traversal
    up the authorization hierarchy should\n   help identify the parties having previous
    provided authorization.\n   These contacts may still have sufficient authorization
    to perform the\n   necessary cleanup.  This issue is discussed in Section C.\n
    \  A great deal of information is currently missing in the IRR. Quite a\n   few
    AS have no aut-num.  Quite a lot of data has no maintainer and\n   the vast majority
    of maintainers use only the weakest of\n   authentication methods.  Very little
    can be done by the registries to\n   correct this.  The defaults in the cases
    of missing objects needed\n   for authorization has to be to make no authentication
    checks at all.\n   The transition can be staged as follows:\n   1. Add and make
    use of stronger authorization models.\n   2. Make schema modifications necessary
    to support delegations.\n   3. Add delegation attributes needed for query traversal.\n
    \  4. Base query traversal on delegations rather than a search of all\n      known
    registries.\n   5. Obtain the cooperation of the address registries for the purpose\n
    \     of populating the \"inetnum\" entries on an ongoing basis.\n   6. Add hierarchical
    authorization support for critical object types,\n      \"aut-num\", \"inetnum\"
    and \"route\".\n   7. Add the requirement that database object either be in use
    or have\n      valid contact information and if queries are made by the registry\n
    \     a response from a contact indicating that the object serves a\n      purpose
    if it is not clear what its use is.\n   8. Begin to purge data which is clearly
    not in use and for which\n      there is no valid contact information or no response
    from the\n      contacts.\n   Deployment of hierarchical authorization requires
    cooperation among\n   the existing routing registries.  New code will have to
    be deployed.\n   In some cases minimal development resources are available and\n
    \  substantial inertia exists due to the reliance on the current\n   repository
    and the need to avoid disruption.\n   If hierarchical authorization of route objects
    depends on the\n   existence of address registration information, minimal cooperation
    of\n   the currently separate address registries is required.  The extent of\n
    \  the cooperation amounts to sending cryptographically signed\n   transactions
    from the address registry to the number registry as\n   address allocations are
    made or providing equivalent access to new\n   address allocations.\n   Currently
    most registries return query results from all of the known\n   repositories using
    their mirrored copies.  Cross registry\n   authorizations are not yet implemented.
    \ Minimal schema changes have\n   to be made to support the ability to delegate
    objects for which there\n   is an authorization hierarchy and to support queries
    and references\n   to other repositories.  In the case of AS delegations, \"as-block\"\n
    \  need to be created solely for the purpose of traversal.\n"
  title: E  Deployment Considerations
- contents:
  - "F  Route Object Authorization Pseudocode\n   The following list provides a brief
    review of basic concepts.\n   1. The route object submission must satisfy two
    authentication\n      criteria.  It must match the authentication specified in
    the aut-\n      num and the authentication specified in either a route object
    or\n      if no applicable route object is found, then an inetnum.\n   2. When
    checking for prefix authorization, an exact route object\n      prefix match is
    checked for first.  If there is not an exact match\n      then a longest prefix
    match that is less specific than the prefix\n      is searched for.  If the route
    prefix search fails, then a search\n      is performed for an inetnum that exactly
    matches the prefix or for\n      the most specific inetnum that is less specific
    than the route\n      object submission.\n      The search for an inetnum should
    never fail but it may return an\n      unallocated or reserved range.  The inetnum
    status must be\n      \"allocated\" and the submission must pass it's maintainer\n
    \     authorization in order to get authorization from an inetnum.  So\n      an
    unallocated or reserved range inetnum will cause the route\n      object submission
    to fail.\n   3. A route object must pass authorization from both the referenced\n
    \     aut-num object and the route or inetnum object.  Authorization\n      shall
    be tested using the maintainer(s) referenced in the \"mnt-\n      routes\" attribute(s)
    first.  If that check fails, the \"mnt-lower\"\n      attributes are checked.
    \ If that check fails the \"mnt-by\"\n      attributes are used for the authorization
    check.\n   4. The \"reclaim\" attribute can appear in inetnum, route and as-block\n
    \     objects and provides a means to support address lending. \"reclaim\"\n      gives
    authorization over more specific objects, regardless of the\n      \"mnt-by\"
    in the object.  The value of a \"reclaim\" attribute can be\n      a list or set
    of objects to provide finer grain control.\n      The \"reclaim\" attribute is
    important to this discussion since it\n      affects prefix/origin authentication
    when a new route object is\n      submitted.\n      The \"no-reclaim\" attribute
    is used to provide explicit exceptions.\n   The following pseudocode outlines
    the algorithm used to check for\n   proper authorization of a route object submission.\n
    \   Case #1.  Route object add\n              (ie, no exact prefix/origin match
    exists).\n    /* first check the aut-num authorization */\n    if ( the referenced
    aut-num object does not exist or\n         the aut-num authorization fails )\n
    \     authorization fails\n    /* next we check for prefix authorization */\n
    \   if ( a less specific route(s) with the longest prefix is found ) [\n      if
    ( authorization does not pass for at least one of the less\n           specific
    route(s) )\n        authorization fails\n    /* now check for a \"reclaim\" attr
    */\n      if ( the object has a \"reclaim\" attribute ) [\n        if ( no more-specifics
    exist\n             OR a less specific exists which passes\n                authorization
    and has a \"reclaim\" attribute\n             OR all more specifics routess pass
    modify authorization )\n          authorization passes\n        else\n          authorization
    fails\n      ] else\n        authorization passes\n    ]\n    /* there are no
    less specific routes to check for prefix\n       authentication, so we need to
    try and get authorization from an\n       inetnum object */\n    if ( ( an inetnum
    is found that is an exact match\n           OR is less specific and it's status
    is \"allocated\" )\n         AND a maintainer referenced by the inetnum\n             passes
    authorization )\n      authorization succeeds\n    /* if there is no inetnum or
    route object then then\n       authorization fails.  This should never happen
    if\n       the DB is initialized properly. */\n    authorization fails.\n    Case
    #2.  Route object modify/delete\n              (ie, exact prefix/origin match
    exists).\n    if ( the mnt-by passes authorization )\n      authorization succeeds\n
    \   /* if the authorization did not pass from the matched object,\n       we can
    still get authorization from a less specific route if it\n       has a \"reclaim\"
    attribute and we pass authorization */\n    if ( a less specific route or inetnum
    object passes authorization\n         AND has a \"reclaim\" attribute applicable
    to\n             the object to be modified )\n      authorization succeeds\n    else\n
    \     authorization fails\n"
  title: F  Route Object Authorization Pseudocode
- contents:
  - "Acknowledgments\n   This document draws ideas from numerous discussions and contributions\n
    \  of the IETF Routing Policy System Work Group and RIPE Routing Work\n   Group.
    \ Earlier drafts of this document listed Carol Orange as a co-\n   author.  Carol
    Orange made contributions to this document while at\n   RIPE.\n   Gerald Winters
    provided the pseudocode in an email message to the\n   RIPE dbsec mailing list
    that was the basis of the pseudocode found in\n   appendix F.  Susan Harris provided
    comments and numerous editorial\n   corrections.\n"
  title: Acknowledgments
- contents:
  - "Intellectual Property Notice\n   The IETF takes no position regarding the validity
    or scope of any\n   intellectual property or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; neither does it represent that it\n   has made any effort to
    identify any such rights.  Information on the\n   IETF's procedures with respect
    to rights in standards-track and\n   standards-related documentation can be found
    in BCP-11.  Copies of\n   claims of rights made available for publication and
    any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: Intellectual Property Notice
- contents:
  - "References\n    [1]  Alaettinoglu, C., Bates, T., Gerich, E., Karrenberg, D.,
    Meyer,\n         D., Terpstra M. and C. Villamizar, \"Routing Policy\n         Specification
    Language (RPSL)\", RFC 2280, January 1998.\n    [2]  Bates, T., Gerich, E., Joncheray,
    L., Jouanigot, J-M.,\n         Karrenberg, D., Terpstra, M. and J. Yu, \"Representation
    of IP\n         Routing Policies in a Routing Registry (ripe-81++)\", RFC 1786,\n
    \        March 1995.\n    [3]  Berkowitz, H., \"Router Renumbering Guide\", RFC
    2072, January\n         1997.\n    [4]  Braun, H-W., \"Models of policy based
    routing\", RFC 1104, June\n         1989.\n    [5]  Braun, H-W. and Y. Rekhter,
    \"Advancing the NSFNET routing\n         architecture\", RFC 1222, May 1991.\n
    \   [6]  Clark, D., \"Policy routing in Internet protocols\", RFC 1102,\n         May
    1989.\n    [7]  Crocker, D., \"Standard for the format of ARPA Internet text\n
    \        messages\", STD 11, RFC 822, August 1982.\n    [8]  Fuller, V., Li, T.,
    Yu, J. and K. Varadhan, \"Classless Inter-\n         Domain Routing (CIDR): an
    Address Assignment and Aggregation\n         Strategy\", RFC 1519, September 1993.\n
    \   [9]  Internet Engineering Steering Group and R. Hinden,\n         \"Applicability
    Statement for the Implementation of Classless\n         Inter-Domain Routing (CIDR)\",
    RFC 1517, September 1993.\n   [10]  Hawkinson, J. and T. Bates, \"Guidelines for
    creation,\n         selection, and registration of an Autonomous System (AS)\",
    RFC\n         1930, March 1996.\n   [11]  Hubbard, K., Kosters, M., Conrad, D.,
    Karrenberg, D. and J.\n         Postel, \"Internet Registry IP Allocation Guidelines\",
    BCP 12,\n         RFC 2050, November 1996.\n   [12]  Knopper, M.  and S. Richardson,
    \"Aggregation Support in the\n         NSFNET Policy-Based Routing Database\",
    RFC 1482, June 1993.\n   [13]  Meyer, D., Prior, M., Alaettinoglu, C., Schmitz,
    J. and Carol\n         Orange, \"Using RPSL in Practice\", RFC 2650, August 1999.\n
    \  [14]  Rekhter, Y., \"Routing in a Multi-provider Internet\", RFC 1787,\n         April
    1995.\n   [15]  Rekhter Y. and T. Li, \"An Architecture for IP Address\n         Allocation
    with CIDR\", RFC 1518, September 1993.\n   [16]  Rekhter Y. and T. Li, \"Implications
    of Various Address\n         Allocation Policies for Internet Routing\", RFC 2008,
    October\n         1996.\n   [17]  Rekhter, Y., Lothberg, P., Hinden, R., Deering,
    S. and J.\n         Postel, \"An IPv6 Provider-Based Unicast Address Format\",
    RFC\n         2073, January 1997.\n   [18]  Zsako, J., \"PGP Authentication for
    RIPE Database Updates\", RFC\n         2726, December 1999.\n"
  title: References
- contents:
  - "Security Considerations\n   This document primarily addresses authorization rules
    for making\n   additions, deletions, and changes to routing policy information\n
    \  repositories.  The authentication of these transactions through\n   strong
    cryptographic means are addressed by [18], referenced\n   thorughout this document.
    \ The authorization rules are designed such\n   that the integrity of any transaction
    can be verified independently\n   by any party mirroring a repository to insure
    that rules are adhered\n   to.  To accomplish this the mirror must contain data
    already known to\n   be properly authorized.  In other words, the mirror must
    be complete\n   and authentication and authorization checks must be made continuously\n
    \  as changes to the repository are recieved and processed in order.\n   Authentication
    alone does not provide a complete security model.\n   Current practice specifies
    authorization for deletions and changes\n   only, not for additions.  The authorization
    rules provide here\n   complete the security model for additions, deletions, and
    changes by\n   very explicitly defining rules for addition and clarifying procedures\n
    \  for handling exception cases such as organizations which have ceased\n   to
    exist and therefore become entirely unresponsive.\n   Authentication and authorization
    of queries is explicitly stated to\n   be out of scope of this document.\n"
  title: Security Considerations
- contents:
  - "Authors' Addresses\n   Curtis Villamizar\n   Avici Systems\n   EMail: curtis@avici.com\n
    \  Cengiz Alaettinoglu\n   ISI\n   EMail: cengiz@ISI.EDU\n   David M. Meyer\n
    \  Cisco\n   EMail: dmm@cisco.com\n   Sandy Murphy\n   Trusted Information Systems\n
    \  EMail: sandy@tis.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
