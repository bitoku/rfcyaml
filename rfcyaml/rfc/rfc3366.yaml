- title: __initial_text__
  contents:
  - '    Advice to link designers on link Automatic Repeat reQuest (ARQ)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides advice to the designers of digital\n   communication\
    \ equipment and link-layer protocols employing link-layer\n   Automatic Repeat\
    \ reQuest (ARQ) techniques.  This document presumes\n   that the designers wish\
    \ to support Internet protocols, but may be\n   unfamiliar with the architecture\
    \ of the Internet and with the\n   implications of their design choices for the\
    \ performance and\n   efficiency of Internet traffic carried over their links.\n\
    \   ARQ is described in a general way that includes its use over a wide\n   range\
    \ of underlying physical media, including cellular wireless,\n   wireless LANs,\
    \ RF links, and other types of channel.  This document\n   also describes issues\
    \ relevant to supporting IP traffic over\n   physical-layer channels where performance\
    \ varies, and where link ARQ\n   is likely to be used.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction. . . . . . . . . . . . . . . . . . .\
    \ . . . . . .2\n   1.1   Link ARQ. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .4\n   1.2   Causes of Packet Loss on a Link . . . . . . . . . . . . .\
    \ . .5\n   1.3   Why Use ARQ?. . . . . . . . . . . . . . . . . . . . . . . . .6\n\
    \   1.4   Commonly-used ARQ Techniques. . . . . . . . . . . . . . . . .7\n   1.4.1\
    \ Stop-and-wait ARQ . . . . . . . . . . . . . . . . . . . . . .7\n   1.4.2 Sliding-Window\
    \ ARQ. . . . . . . . . . . . . . . . . . . . . .7\n   1.5   Causes of Delay Across\
    \ a Link . . . . . . . . . . . . . . . .8\n   2.    ARQ Persistence . . . . .\
    \ . . . . . . . . . . . . . . . . . 10\n   2.1   Perfectly-Persistent (Reliable)\
    \ ARQ Protocols . . . . . . . 10\n   2.2   High-Persistence (Highly-Reliable)\
    \ ARQ Protocols. . . . . . 12\n   2.3   Low-Persistence (Partially-Reliable) ARQ\
    \ Protocols. . . . . 13\n   2.4   Choosing Your Persistency . . . . . . . . .\
    \ . . . . . . . . 13\n   2.5   Impact of Link Outages. . . . . . . . . . . . .\
    \ . . . . . . 14\n   3.    Treatment of Packets and Flows. . . . . . . . . . .\
    \ . . . . 15\n   3.1   Packet Ordering . . . . . . . . . . . . . . . . . . . .\
    \ . . 15\n   3.2   Using Link ARQ to Support Multiple Flows. . . . . . . . . .\
    \ 16\n   3.3   Differentiation of Link Service Classes . . . . . . . . . . 17\n\
    \   4.    Conclusions . . . . . . . . . . . . . . . . . . . . . . . . 19\n   5.\
    \    Security Considerations . . . . . . . . . . . . . . . . . . 21\n   6.   \
    \ IANA Considerations . . . . . . . . . . . . . . . . . . . . 21\n   7.    Acknowledgements.\
    \ . . . . . . . . . . . . . . . . . . . . . 22\n   8.    References. . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 22\n   8.1   Normative References. . .\
    \ . . . . . . . . . . . . . . . . . 22\n   8.2   Informative References. . . .\
    \ . . . . . . . . . . . . . . . 23\n   9.    Authors' Addresses. . . . . . . .\
    \ . . . . . . . . . . . . . 26\n   10.   Full Copyright Statement. . . . . . .\
    \ . . . . . . . . . . . 27\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   IP, the Internet Protocol [RFC791], forms the core protocol\
    \ of the\n   global Internet and defines a simple \"connectionless\" packet-switched\n\
    \   network.  Over the years, Internet traffic using IP has been carried\n   over\
    \ a wide variety of links, of vastly different capacities, delays\n   and loss\
    \ characteristics.  In the future, IP traffic can be expected\n   to continue\
    \ to be carried over a very wide variety of new and\n   existing link designs,\
    \ again of varied characteristics.\n   A companion document [DRAFTKARN02] describes\
    \ the general issues\n   associated with link design.  This document should be\
    \ read in\n   conjunction with that and with other documents produced by the\n\
    \   Performance Implications of Link Characteristics (PILC) IETF\n   workgroup\
    \ [RFC3135, RFC3155].\n   This document is intended for three distinct groups\
    \ of readers:\n   a. Link designers wishing to configure (or tune) a link for\
    \ the IP\n      traffic that it will carry, using standard link-layer mechanisms\n\
    \      such as the ISO High-level Data Link Control (HDLC) [ISO4335a] or\n   \
    \   its derivatives.\n   b. Link implementers who may wish to design new link\
    \ mechanisms that\n      perform well for IP traffic.\n   c. The community of\
    \ people using or developing TCP, UDP and related\n      protocols, who may wish\
    \ to be aware of the ways in which links\n      can operate.\n   The primary audiences\
    \ are intended to be groups (a) and (b).  Group\n   (c) should not need to be\
    \ aware of the exact details of an ARQ scheme\n   across a single link, and should\
    \ not have to consider such details\n   for protocol implementations; much of\
    \ the Internet runs across links\n   that do not use any form of ARQ.  However,\
    \ the TCP/IP community does\n   need to be aware that the IP protocol operates\
    \ over a diverse range\n   of underlying subnetworks.  This document may help\
    \ to raise that\n   awareness.\n   Perfect reliability is not a requirement for\
    \ IP networks, nor is it a\n   requirement for links [DRAFTKARN02].  IP networks\
    \ may discard packets\n   due to a variety of reasons entirely unrelated to channel\
    \ errors,\n   including lack of queuing space, congestion management, faults,\
    \ and\n   route changes.  It has long been widely understood that perfect\n  \
    \ end-to-end reliability can be ensured only at, or above, the\n   transport layer\
    \ [SALT81].\n   Some familiarity with TCP, the Transmission Control Protocol [RFC793,\n\
    \   STE94], is presumed here.  TCP provides a reliable byte-stream\n   transport\
    \ service, building upon the best-effort datagram delivery\n   service provided\
    \ by the Internet Protocol.  TCP achieves this by\n   dividing data into TCP segments,\
    \ and transporting these segments in\n   IP packets.  TCP guarantees that a TCP\
    \ session will retransmit the\n   TCP segments contained in any data packets that\
    \ are lost along the\n   Internet path between endhosts.  TCP normally performs\
    \ retransmission\n   using its Fast Retransmit procedure, but if the loss fails\
    \ to be\n   detected (or retransmission is unsuccessful), TCP falls back to a\n\
    \   Retransmission Time Out (RTO) retransmission using a timer [RFC2581,\n   RFC2988].\
    \  (Link protocols also implement timers to verify integrity\n   of the link,\
    \ and to assist link ARQ.)  TCP also copes with any\n   duplication or reordering\
    \ introduced by the IP network.  There are a\n   number of variants of TCP, with\
    \ differing levels of sophistication in\n   their procedures for handling loss\
    \ recovery and congestion avoidance.\n   Far from being static, the TCP protocol\
    \ is itself subject to ongoing\n   gradual refinement and evolution, e.g., [RFC2488,\
    \ RFC2760].\n   Internet networks may reasonably be expected to carry traffic\
    \ from a\n   wide and evolving range of applications.  Not all applications\n\
    \   require or benefit from using the reliable service provided by TCP.\n   In\
    \ the Internet, these applications are carried by alternate\n   transport protocols,\
    \ such as the User Datagram Protocol (UDP)\n   [RFC768].\n"
- title: 1.1 Link ARQ
  contents:
  - "1.1 Link ARQ\n   At the link layer, ARQ operates on blocks of data, known as\
    \ frames,\n   and attempts to deliver frames from the link sender to the link\n\
    \   receiver over a channel.  The channel provides the physical-layer\n   connection\
    \ over which the link protocol operates.  In its simplest\n   form, a channel\
    \ may be a direct physical-layer connection between the\n   two link nodes (e.g.,\
    \ across a length of cable or over a wireless\n   medium).  ARQ may also be used\
    \ edge-to-edge across a subnetwork,\n   where the path includes more than one\
    \ physical-layer medium.  Frames\n   often have a small fixed or maximum size\
    \ for convenience of\n   processing by Medium-Access Control (MAC) and link protocols.\
    \  This\n   contrasts with the variable lengths of IP datagrams, or 'packets'.\
    \  A\n   link-layer frame may contain all, or part of, one or more IP packets.\n\
    \   A link ARQ mechanism relies on an integrity check for each frame\n   (e.g.,\
    \ strong link-layer CRC [DRAFTKARN02]) to detect channel errors,\n   and uses\
    \ a retransmission process to retransmit lost (i.e., missing\n   or corrupted)\
    \ frames.\n   Links may be full-duplex (allowing two-way communication over\n\
    \   separate forward and reverse channels), half-duplex (where two-way\n   communication\
    \ uses a shared forward and reverse channel, e.g., IrDA,\n   IEEE 802.11) or simplex\
    \ (where a single channel permits communication\n   in only one direction).\n\
    \   ARQ requires both a forward and return path, and therefore link ARQ\n   may\
    \ be used over links that employ full- or half-duplex links.  When\n   a channel\
    \ is shared between two or more link nodes, a link MAC\n   protocol is required\
    \ to ensure all nodes requiring transmission can\n   gain access to the shared\
    \ channel.  Such schemes may add to the delay\n   (jitter) associated with transmission\
    \ of packet data and ARQ control\n   frames.\n   When using ARQ over a link where\
    \ the probability of frame loss is\n   related to the frame size, there is an\
    \ optimal frame size for any\n   specific target channel error rate.  To allow\
    \ for efficient use of\n   the channel, this maximum link frame size may be considerably\
    \ lower\n   than the maximum IP datagram size specified by the IP Maximum\n  \
    \ Transmission Unit (MTU).  Each frame will then contain only a\n   fraction of\
    \ an IP packet, and transparent implicit fragmentation of\n   the IP datagram\
    \ is used [DRAFTKARN02].  A smaller frame size\n   introduces more frame header\
    \ overhead per payload byte transported.\n   Explicit network-layer IP fragmentation\
    \ is undesirable for a variety\n   of reasons, and should be avoided [KEN87, DRAFTKARN02].\
    \  Its use can\n   be minimized with use of Path MTU discovery [RFC1191, RFC1435,\n\
    \   RFC1981].\n   Another way to reduce the frame loss rate (or reduce transmit\
    \ signal\n   power for the same rate of frame loss) is to use coding, e.g.,\n\
    \   Forward Error Correction (FEC) [LIN93].\n   FEC is commonly included in the\
    \ physical-layer design of wireless\n   links and may be used simultaneously with\
    \ link ARQ.  FEC schemes\n   which combine modulation and coding also exist, and\
    \ may also be\n   adaptive.  Hybrid ARQ [LIN93] combines adaptive FEC with link\
    \ ARQ\n   procedures to reduce the probability of loss of retransmitted frames.\n\
    \   Interleaving may also be used to reduce the probability of frame loss\n  \
    \ by dispersing the occurrence of errors more widely in the channel to\n   improve\
    \ error recovery; this adds further delay to the channel's\n   existing propagation\
    \ delay.\n   The document does not consider the use of link ARQ to support a\n\
    \   broadcast or multicast service within a subnetwork, where a link may\n   send\
    \ a single packet to more than one recipient using a single link\n   transmit\
    \ operation.  Although such schemes are supported in some\n   subnetworks, they\
    \ raise a number of additional issues not examined\n   here.\n   Links supporting\
    \ stateful reservation-based quality of service (QoS)\n   according to the Integrated\
    \ Services (intserv) model are also not\n   explicitly discussed.\n"
- title: 1.2 Causes of Packet Loss on a Link
  contents:
  - "1.2 Causes of Packet Loss on a Link\n   Not all packets sent to a link are necessarily\
    \ received successfully\n   by the receiver at the other end of the link.  There\
    \ are a number of\n   possible causes of packet loss.  These may occur as frames\
    \ travel\n   across a link, and include:\n   a. Loss due to channel noise, often\
    \ characterised by random frame\n      loss.  Channel noise may also result from\
    \ other traffic degrading\n      channel conditions.\n   b. Frame loss due to\
    \ channel interference.  This interference can\n      be random, structured, and\
    \ in some cases even periodic.\n   c. A link outage, a period during which the\
    \ link loses all or\n      virtually all frames, until the link is restored. \
    \ This is a\n      common characteristic of some types of link, e.g., mobile cellular\n\
    \      radio.\n   Other forms of packet loss are not related to channel conditions,\n\
    \   but include:\n   i.   Loss of a frame transmitted in a shared channel where\
    \ a\n        contention-aware MAC protocol is used (e.g., due to collision).\n\
    \        Here, many protocols require that retransmission is deferred to\n   \
    \     promote stability of the shared channel (i.e., prevent excessive\n     \
    \   channel contention).  This is discussed further in section 1.5.\n   ii.  Packet\
    \ discards due to congestion.  Queues will eventually\n        overflow as the\
    \ arrival rate of new packets to send continues to\n        exceed the outgoing\
    \ packet transmission rate over the link.\n   iii. Loss due to implementation\
    \ errors, including hardware faults\n        and software errors.  This is recognised\
    \ as a common cause of\n        packet corruption detected in the endhosts [STONE00].\n\
    \   The rate of loss and patterns of loss experienced are functions of\n   the\
    \ design of the physical and link layers.  These vary significantly\n   across\
    \ different link configurations.  The performance of a specific\n   implementation\
    \ may also vary considerably across the same link\n   configuration when operated\
    \ over different types of channel.\n"
- title: 1.3 Why Use ARQ?
  contents:
  - "1.3 Why Use ARQ?\n   Reasons that encourage considering the use of ARQ include:\n\
    \   a. ARQ across a single link has a faster control loop than TCP's\n      acknowledgement\
    \ control loop, which takes place over the longer\n      end-to-end path over\
    \ which TCP must operate.  It is therefore\n      possible for ARQ to provide\
    \ more rapid retransmission of TCP\n      segments lost on the link, at least\
    \ for a reasonable number of\n      retries [RFC3155, SALT81].\n   b. Link ARQ\
    \ can operate on individual frames, using implicit\n      transparent link fragmentation\
    \ [DRAFTKARN02].  Frames may be\n      much smaller than IP packets, and repetition\
    \ of smaller frames\n      containing lost or errored parts of an IP packet may\
    \ improve the\n      efficiency of the ARQ process and the efficiency of the link.\n\
    \   A link ARQ procedure may be able to use local knowledge that is not\n   available\
    \ to endhosts, to optimise delivery performance for the\n   current link conditions.\
    \  This information can include information\n   about the state of the link and\
    \ channel, e.g., knowledge of the\n   current available transmission rate, the\
    \ prevailing error\n   environment, or available transmit power in wireless links.\n"
- title: 1.4 Commonly-used ARQ Techniques
  contents:
  - "1.4 Commonly-used ARQ Techniques\n   A link ARQ protocol uses a link protocol\
    \ mechanism to allow the\n   sender to detect lost or corrupted frames and to\
    \ schedule\n   retransmission.  Detection of frame loss may be via a link protocol\n\
    \   timer, by detecting missing positive link acknowledgement frames, by\n   receiving\
    \ explicit negative acknowledgement frames and/or by polling\n   the link receiver\
    \ status.\n   Whatever mechanisms are chosen, there are two easily-described\n\
    \   categories of ARQ retransmission process that are widely used:\n"
- title: 1.4.1 Stop-And-Wait ARQ
  contents:
  - "1.4.1 Stop-And-Wait ARQ\n   A sender using stop-and-wait ARQ (sometimes known\
    \ as 'Idle ARQ'\n   [LIN93]) transmits a single frame and then waits for an\n\
    \   acknowledgement from the receiver for that frame.  The sender then\n   either\
    \ continues transmission with the next frame, or repeats\n   transmission of the\
    \ same frame if the acknowledgement indicates that\n   the original frame was\
    \ lost or corrupted.\n   Stop-and-wait ARQ is simple, if inefficient, for protocol\
    \ designers\n   to implement, and therefore popular, e.g., tftp [RFC1350] at the\n\
    \   transport layer.  However, when stop-and-wait ARQ is used in the link\n  \
    \ layer, it is well-suited only to links with low bandwidth-delay\n   products.\
    \  This technique is not discussed further in this document.\n"
- title: 1.4.2 Sliding-Window ARQ
  contents:
  - "1.4.2 Sliding-Window ARQ\n   A protocol using sliding-window link ARQ [LIN93]\
    \ numbers every frame\n   with a unique sequence number, according to a modulus.\
    \  The modulus\n   defines the numbering base for frame sequence numbers, and\
    \ the size\n   of the sequence space.  The largest sequence number value is viewed\n\
    \   by the link protocol as contiguous with the first (0), since the\n   numbering\
    \ space wraps around.\n   TCP is itself a sliding-window protocol at the transport\
    \ layer\n   [STE94], so similarities between a link-interface-to-link-interface\n\
    \   protocol and end-to-end TCP may be recognisable.  A sliding-window\n   link\
    \ protocol is much more complex in implementation than the simpler\n   stop-and-wait\
    \ protocol described in the previous section,\n   particularly if per-flow ordering\
    \ is preserved.\n   At any time the link sender may have a number of frames outstanding\n\
    \   and awaiting acknowledgement, up to the space available in its\n   transmission\
    \ window.  A sufficiently-large link sender window\n   (equivalent to or greater\
    \ than the number of frames sent, or larger\n   than the bandwidth*delay product\
    \ capacity of the link) permits\n   continuous transmission of new frames.  A\
    \ smaller link sender window\n   causes the sender to pause transmission of new\
    \ frames until a timeout\n   or a control frame, such as an acknowledgement, is\
    \ received.  When\n   frames are lost, a larger window, i.e., more than the link's\n\
    \   bandwidth*delay product, is needed to allow continuous operation\n   while\
    \ frame retransmission takes place.\n   The modulus numbering space determines\
    \ the size of the frame header\n   sequence number field.  This sequence space\
    \ needs to be larger than\n   the link window size and, if using selective repeat\
    \ ARQ, larger than\n   twice the link window size.  For continuous operation,\
    \ the sequence\n   space should be larger than the product of the link capacity\
    \ and the\n   link ARQ persistence (discussed in section 2), so that in-flight\n\
    \   frames can be identified uniquely.\n   As with TCP, which provides sliding-window\
    \ delivery across an entire\n   end-to-end path rather than across a single link,\
    \ there are a large\n   number of variations on the basic sliding-window implementation,\
    \ with\n   increased complexity and sophistication to make them suitable for\n\
    \   various conditions.  Selective Repeat (SR), also known as Selective\n   Reject\
    \ (SREJ), and Go-Back-N, also known as Reject (REJ), are\n   examples of ARQ techniques\
    \ using protocols implementing sliding\n   window ARQ.\n"
- title: 1.5 Causes of Delay Across a Link
  contents:
  - "1.5 Causes of Delay Across a Link\n   Links and link protocols contribute to\
    \ the total path delay\n   experienced between communicating applications on endhosts.\
    \  Delay\n   has a number of causes, including:\n   a. Input packet queuing and\
    \ frame buffering at the link head before\n      transmission over the channel.\n\
    \   b. Retransmission back-off, an additional delay introduced for\n      retransmissions\
    \ by some MAC schemes when operating over a shared\n      channel to prevent excessive\
    \ contention.  A high level of\n      contention may otherwise arise, if, for\
    \ example, a set of link\n      receivers all retransmitted immediately after\
    \ a collision on a\n      busy shared channel.  Link ARQ protocols designed for\
    \ shared\n      channels may select a backoff delay, which increases with the\n\
    \      number of attempts taken to retransmit a frame; analogies can be\n    \
    \  drawn with end-to-end TCP congestion avoidance at the transport\n      layer\
    \ [RFC2581].  In contrast, a link over a dedicated channel\n      (which has capacity\
    \ pre-allocated to the link) may send a\n      retransmission at the earliest\
    \ possible time.\n   c. Waiting for access to the allocated channel when the channel\
    \ is\n      shared.  There may be processing or protocol-induced delay\n     \
    \ before transmission takes place [FER99, PAR00].\n   d. Frame serialisation and\
    \ transmission processing.  These are\n      functions of frame size and the transmission\
    \ speed of the link.\n   e. Physical-layer propagation time, limited by the speed\
    \ of\n      transmission of the signal in the physical medium of the\n      channel.\n\
    \   f. Per-frame processing, including the cost of QoS scheduling,\n      encryption,\
    \ FEC and interleaving.  FEC and interleaving also add\n      substantial delay\
    \ and, in some cases, additional jitter.  Hybrid\n      link ARQ schemes [LIN93],\
    \ in particular, may incur significant\n      receiver processing delay.\n   g.\
    \ Packet processing, including buffering frame contents at the\n      link receiver\
    \ for packet reassembly, before onward transmission\n      of the packet.\n  \
    \ When link ARQ is used, steps (b), (c), (d), (e), and (f) may be\n   repeated\
    \ a number of times, every time that retransmission of a frame\n   occurs, increasing\
    \ overall delay for the packet carried in part by\n   the frame.  Adaptive ARQ\
    \ schemes (e.g., hybrid ARQ using adaptive FEC\n   codes) may also incur extra\
    \ per-frame processing for retransmitted\n   frames.\n   It is important to understand\
    \ that applications and transport\n   protocols at the endhosts are unaware of\
    \ the individual delays\n   contributed by each link in the path, and only see\
    \ the overall path\n   delay.  Application performance is therefore determined\
    \ by the\n   cumulative delay of the entire end-to-end Internet path.  This path\n\
    \   may include an arbitrary or even a widely-fluctuating number of\n   links,\
    \ where any link may or may not use ARQ.  As a result, it is not\n   possible\
    \ to state fixed limits on the acceptable delay that a link\n   can add to a path;\
    \ other links in the path will add an unknown delay.\n"
- title: 2. ARQ Persistence
  contents:
  - "2. ARQ Persistence\n   ARQ protocols may be characterised by their persistency.\
    \  Persistence\n   is the willingness of the protocol to retransmit lost frames\
    \ to\n   ensure reliable delivery of traffic across the link.\n   A link's retransmission\
    \ persistency defines how long the link is\n   allowed to delay a packet, in an\
    \ attempt to transmit all the frames\n   carrying the packet and its content over\
    \ the link, before giving up\n   and discarding the packet.  This persistency\
    \ can normally be measured\n   in milliseconds, but may, if the link propagation\
    \ delay is specified,\n   be expressed in terms of the maximum number of link\
    \ retransmission\n   attempts permitted.  The latter does not always map onto\
    \ an exact\n   time limit, for the reasons discussed in section 1.5.\n   An example\
    \ of a reliable link protocol that is perfectly persistent\n   is the ISO HDLC\
    \ protocol in the Asynchronous Balanced Mode (ABM)\n   [ISO4335a].\n   A protocol\
    \ that only retransmits a number of times before giving up\n   is less persistent,\
    \ e.g., Ethernet [FER99], IEEE 802.11, or GSM RLP\n   [RFC2757].  Here, lower\
    \ persistence also ensures stability and fair\n   sharing of a shared channel,\
    \ even when many senders are attempting\n   retransmissions.\n   TCP, STCP [RFC2960]\
    \ and a number of applications using UDP (e.g.,\n   tftp) implement their own\
    \ end-to-end reliable delivery mechanisms.\n   Many TCP and UDP applications,\
    \ e.g., streaming multimedia, benefit\n   from timely delivery from lower layers\
    \ with sufficient reliability,\n   rather than perfect reliability with increased\
    \ link delays.\n"
- title: 2.1 Perfectly-Persistent (Reliable) ARQ Protocols
  contents:
  - "2.1 Perfectly-Persistent (Reliable) ARQ Protocols\n   A perfectly-persistent\
    \ ARQ protocol is one that attempts to provide a\n   reliable service, i.e., in-order\
    \ delivery of packets to the other end\n   of the link, with no missing packets\
    \ and no duplicate packets.  The\n   perfectly-persistent ARQ protocol will repeat\
    \ a lost or corrupted\n   frame an indefinite (and potentially infinite) number\
    \ of times until\n   the frame is successfully received.\n   If traffic is going\
    \ no further than across one link, and losses do\n   not occur within the endhosts,\
    \ perfect persistence ensures\n   reliability between the two link ends without\
    \ requiring any\n   higher-layer protocols.  This reliability can become\n   counterproductive\
    \ for traffic traversing multiple links, as it\n   duplicates and interacts with\
    \ functionality in protocol mechanisms at\n   higher layers [SALT81].\n   Arguments\
    \ against the use of perfect persistence for IP traffic\n   include:\n   a. Variable\
    \ link delay; the impact of ARQ introduces a degree of\n      jitter, a function\
    \ of the physical-layer delay and frame\n      serialisation and transmission\
    \ times (discussed in section 1.5),\n      to all flows sharing a link performing\
    \ frame retransmission.\n   b. Perfect persistence does not provide a clear upper\
    \ bound on the\n      maximum retransmission delay for the link.  Significant\
    \ changes\n      in path delay caused by excessive link retransmissions may lead\n\
    \      to timeouts of TCP retransmission timers, although a high\n      variance\
    \ in link delay and the resulting overall path delay may\n      also cause a large\
    \ TCP RTO value to be selected [LUD99b, PAR00].\n      This will alter TCP throughput,\
    \ decreasing overall performance,\n      but, in mitigation, it can also decrease\
    \ the occurrence of\n      timeouts due to continued packet loss.\n   c. Applications\
    \ needing perfectly-reliable delivery can implement a\n      form of perfectly-persistent\
    \ ARQ themselves, or use a reliable\n      transport protocol within the endhosts.\
    \  Implementing perfect\n      persistence at each link along the path between\
    \ the endhosts is\n      redundant, but cannot ensure the same reliability as\
    \ end-to-end\n      transport [SALT81].\n   d. Link ARQ should not adversely delay\
    \ the flow of end-to-end\n      control information.  As an example, the ARQ retransmission\
    \ of\n      data for one or more flows should not excessively extend the\n   \
    \   protocol control loops.  Excessive delay of duplicate TCP\n      acknowledgements\
    \ (dupacks [STE94, BAL97]), SACK, or Explicit\n      Congestion Notification (ECN)\
    \ indicators will reduce the\n      responsiveness of TCP flows to congestion\
    \ events.  Similar\n      issues exist for TCP-Friendly Rate Control (TFRC), where\n\
    \      equation-based congestion control is used with UDP [DRAFTHAN01].\n   Perfectly-persistent\
    \ link protocols that perform unlimited ARQ, i.e.,\n   that continue to retransmit\
    \ frames indefinitely until the frames are\n   successfully received, are seldom\
    \ found in real implementations.\n   Most practical link protocols give up retransmission\
    \ at some point,\n   but do not necessarily do so with the intention of bounding\
    \ the ARQ\n   retransmission persistence.  A protocol may, for instance, terminate\n\
    \   retransmission after a link connection failure, e.g., after no frames\n  \
    \ have been successfully received within a pre-configured timer period.\n   The\
    \ number of times a protocol retransmits a specific frame (or the\n   maximum\
    \ number of retransmissions) therefore becomes a function of\n   many different\
    \ parameters (ARQ procedure, link timer values, and\n   procedure for link monitoring),\
    \ rather than being pre-configured.\n   Another common feature of this type of\
    \ behaviour is that some\n   protocol implementers presume that, after a link\
    \ failure, packets\n   queued to be sent over the link are no longer significant\
    \ and can be\n   discarded when giving up ARQ retransmission.\n   Examples of\
    \ ARQ protocols that are perfectly persistent include\n   ISO/ITU-T LAP-B [ISO7776]\
    \ and ISO HDLC in the Asynchronously Balanced\n   Mode (ABM) [ISO4335a], e.g.,\
    \ using Multiple Selective Reject (MSREJ\n   [ISO4335b]).  These protocols will\
    \ retransmit a frame an unlimited\n   number of times until receipt of the frame\
    \ is acknowledged.\n"
- title: 2.2 High-Persistence (Highly-Reliable) ARQ Protocols
  contents:
  - "2.2 High-Persistence (Highly-Reliable) ARQ Protocols\n   High-persistence ARQ\
    \ protocols limit the number of times (or number\n   of attempts) that ARQ may\
    \ retransmit a particular frame before the\n   sender gives up on retransmission\
    \ of the missing frame and moves on\n   to forwarding subsequent buffered in-sequence\
    \ frames.  Ceasing\n   retransmission of a frame does not imply a lack of link\
    \ connectivity\n   and does not cause a link protocol state change.\n   It has\
    \ been recommended that a single IP packet should never be\n   delayed by the\
    \ network for more than the Maximum Segment Lifetime\n   (MSL) of 120 seconds\
    \ defined for TCP [RFC1122].  It is, however,\n   difficult in practice to bound\
    \ the maximum path delay of an Internet\n   path.  One case where segment (packet)\
    \ lifetime may be significant is\n   where alternate paths of different delays\
    \ exist between endhosts and\n   route flapping or flow-unaware traffic engineering\
    \ is used.  Some TCP\n   packets may follow a short path, while others follow\
    \ a much longer\n   path, e.g., using persistent ARQ over a link outage.\n   Failure\
    \ to limit the maximum packet lifetime can result in TCP\n   sequence numbers\
    \ wrapping at high transmission rates, where old data\n   segments may be confused\
    \ with newer segments if the sequence number\n   space has been exhausted and\
    \ reused in the interim.  Some TCP\n   implementations use the Round Trip Timestamp\
    \ Measurement (RTTM)\n   option in TCP packets to remove this ambiguity, using\
    \ the Protection\n   Against Wrapped Sequence number (PAWS) algorithm [RFC1323].\n\
    \   In practice, the MSL is usually very large compared to the typical\n   TCP\
    \ RTO.  The calculation of TCP RTO is based on estimated round-trip\n   path delay\
    \ [RFC2988].  If the number of link retransmissions causes a\n   path delay larger\
    \ than the value of RTO, the TCP retransmission timer\n   can expire, leading\
    \ to a timeout and retransmission of a segment\n   (packet) by the TCP sender.\n\
    \   Although high persistency may benefit bulk flows, the additional\n   delay\
    \ (and variations in delay) that it introduces may be highly\n   undesirable for\
    \ other types of flows.  Being able to treat flows\n   separately, with different\
    \ classes of link service, is useful, and is\n   discussed in section 3.\n   Examples\
    \ of high-persistence ARQ protocols include [BHA97, ECK98,\n   LUD99a, MEY99].\n"
- title: 2.3 Low-Persistence (Partially-Reliable) ARQ Protocols
  contents:
  - "2.3 Low-Persistence (Partially-Reliable) ARQ Protocols\n   The characteristics\
    \ of a link using a low-persistence ARQ protocol\n   may be summarised as:\n \
    \  a. The link is not perfectly reliable and does not provide an\n      absolute\
    \ guarantee of delivery, i.e., the transmitter will\n      discard some frames\
    \ as it 'gives up' before receiving an\n      acknowledgement of successful transmission\
    \ across the link.\n   b. There is a lowered limit on the maximum added delay\
    \ that IP\n      packets will experience when travelling across the link\n   \
    \   (typically lower than the TCP path RTO).  This reduces\n      interaction\
    \ with TCP timers or with UDP-based error-control\n      schemes.\n   c. The link\
    \ offers a low bound for the time that retransmission for\n      any one frame\
    \ can block completed transmission and assembly of\n      other correctly and\
    \ completely-received IP packets whose\n      transmission was begun before the\
    \ missing frame was sent.\n      Limiting delay avoids aggravating contention\
    \ or interaction\n      between different packet flows (see also section 3.2).\n\
    \   Examples of low-persistence ARQ protocols include [SAM96, WARD95,\n   CHE00].\n"
- title: 2.4 Choosing Your Persistency
  contents:
  - "2.4 Choosing Your Persistency\n   The TCP Maximum RTO is an upper limit on the\
    \ maximum time that TCP\n   will wait until it performs a retransmission.  Most\
    \ TCP\n   implementations will generally have a TCP RTO of at least several\n\
    \   times the path delay.\n   Setting a lower link persistency (e.g., of the order\
    \ 2-5\n   retransmission attempts) reduces potential interaction with the TCP\n\
    \   RTO timer, and may therefore reduce the probability of duplicate\n   copies\
    \ of the same packet being present in the link transmit buffer\n   under some\
    \ patterns of loss.\n   A link using a physical layer with a low propagation delay\
    \ may allow\n   tens of retransmission attempts to deliver a single frame, and\
    \ still\n   satisfy a bound for (b) in section 2.3.  In this case, a low delay\
    \ is\n   defined as being where the total packet transmission time across the\n\
    \   link is much less than 100 ms (a common value for the granularity of\n   the\
    \ internal TCP system timer).\n   A packet may traverse a number of successive\
    \ links on its total end-\n   to-end path.  This is therefore an argument for\
    \ much lower\n   persistency on any individual link, as delay due to persistency\
    \ is\n   accumulated along the path taken by each packet.\n   Some implementers\
    \ have chosen a lower persistence, falling back on\n   the judgement of TCP or\
    \ of a UDP application to retransmit any\n   packets that are not recovered by\
    \ the link ARQ protocol.\n"
- title: 2.5 Impact of Link Outages
  contents:
  - "2.5 Impact of Link Outages\n   Links experiencing persistent loss, where many\
    \ consecutive frames are\n   corrupted over an extended time, may also need to\
    \ be considered.\n   Examples of channel behaviour leading to link outages include\
    \ fading,\n   roaming, and some forms of interference.  During the loss event,\n\
    \   there is an increased probability that a retransmission request may\n   be\
    \ corrupted, and/or an increased probability that a retransmitted\n   frame will\
    \ also be lost.  This type of loss event is often known as a\n   \"transient outage\"\
    .\n   If the transient outage extends for longer than the TCP RTO, the TCP\n \
    \  sender will also perform transport-layer retransmission.  At the same\n   time,\
    \ the TCP sender will reduce its congestion window (cwnd) to 1\n   segment (packet),\
    \ recalculate its RTO, and wait for an ACK packet.\n   If no acknowledgement is\
    \ received, TCP will retransmit again, up to a\n   retry limit.  TCP only determines\
    \ that the outage is over (i.e., that\n   path capacity is restored) by receipt\
    \ of an ACK.  If link ARQ\n   protocol persistency causes a link in the path to\
    \ discard the ACK,\n   the TCP sender must wait for the next RTO retransmission\
    \ and its ACK\n   to learn that the link is restored.  This can be many seconds\
    \ after\n   the end of the transient outage.\n   When a link layer is able to\
    \ differentiate a set of link service\n   classes (see section 3.3), a link ARQ\
    \ persistency longer than the\n   largest link loss event may benefit a TCP session.\
    \  This would allow\n   TCP to rapidly restore transmission without the need to\
    \ wait for a\n   retransmission time out, generally improving TCP performance\
    \ in the\n   face of transient outages.  Implementation of such schemes remains\
    \ a\n   research issue.\n   When an outage occurs for a sender sharing a common\
    \ channel with\n   other nodes, uncontrolled high persistence can continue to\
    \ consume\n   transmission resources for the duration of the outage.  This may\
    \ be\n   undesirable, since it reduces the capacity available for other nodes\n\
    \   sharing the channel, which do not necessarily experience the same\n   outage.\
    \  These nodes could otherwise use the channel for more\n   productive transfers.\
    \  The persistence is often limited by another\n   controlling mechanism in such\
    \ cases.  To counter such contention\n   effects, ARQ protocols may delay retransmission\
    \ requests, or defer\n   the retransmission of requested frames until the outage\
    \ ends for the\n   sender.\n   An alternate suggested approach for a link layer\
    \ that is able to\n   identify separate flows is to use low link persistency (section\
    \ 2.3)\n   along with a higher-layer mechanism, for example one that attempts\
    \ to\n   deliver one packet (or whole TCP segment) per TCP flow after a loss\n\
    \   event [DRAFTKARN02].  This is intended to ensure that TCP\n   transmission\
    \ is restored rapidly.  Algorithms to implement this\n   remain an area of research.\n"
- title: 3. Treatment of Packets and Flows
  contents:
  - '3. Treatment of Packets and Flows

    '
- title: 3.1 Packet Ordering
  contents:
  - "3.1 Packet Ordering\n   A common debate is whether a link should be allowed to\
    \ forward\n   packets in an order different from that in which they were originally\n\
    \   received at its transmit interface.\n   IP networks are not required to deliver\
    \ all IP packets in order,\n   although in most cases networks do deliver IP packets\
    \ in their\n   original transmission order.  Routers supporting class-based queuing\n\
    \   do reorder received packets, by reordering packets in different\n   flows,\
    \ but these usually retain per-flow ordering.\n   Policy-based queuing, allowing\
    \ fairer access to the link, may also\n   reorder packets.  There is still much\
    \ debate on optimal algorithms,\n   and on optimal queue sizes for particular\
    \ link speeds.  This,\n   however, is not related to the use of link ARQ and applies\
    \ to any\n   (potential) bottleneck router.\n   Although small amounts of reordering\
    \ are common in IP networks\n   [BEN00], significant reordering within a flow\
    \ is undesirable as it\n   can have a number of effects:\n   a. Reordering will\
    \ increase packet jitter for real-time\n      applications.  This may lead to\
    \ application data loss if a small\n      play-out buffer is used by the receiving\
    \ application.\n   b. Reordering will interleave arrival of TCP segments, leading\
    \ to\n      generation of duplicate ACKs (dupacks), leading to assumptions\n \
    \     of loss.  Reception of an ACK followed by a sequence of three\n      identical\
    \ dupacks causes the TCP sender to trigger fast\n      retransmission and recovery,\
    \ a form of congestion avoidance,\n      since TCP always presumes that packet\
    \ loss is due to congestion\n      [RFC2581, STE94].  This reduces TCP throughput\
    \ efficiency as far\n      as the application is concerned, although it should\
    \ not impact\n      data integrity.\n   In addition, reordering may negatively\
    \ impact processing by some\n   existing poorly-implemented TCP/IP stacks, by\
    \ leading to unwanted\n   side-effects in poorly-implemented IP fragment reassembly\
    \ code,\n   poorly-implemented IP demultiplexing (filter) code, or in\n   poorly-implemented\
    \ UDP applications.\n   Ordering effects must also be considered when breaking\
    \ the end-to-end\n   paradigm and evaluating transport-layer relays such as split-TCP\n\
    \   implementations or Protocol Enhancing Proxies [RFC3135].\n   As with total\
    \ path delay, TCP and UDP flows are impacted by the\n   cumulative effect of reordering\
    \ along the entire path.  Link protocol\n   designers must not assume that their\
    \ link is the only link\n   undertaking packet reordering, as some level of reordering\
    \ may be\n   introduced by other links along the same path, or by router\n   processing\
    \ within the network [BEN00].  Ideally, the link protocol\n   should not contribute\
    \ to reordering within a flow, or at least ensure\n   that it does not significantly\
    \ increase the level of reordering\n   within the flow.  To achieve this, buffering\
    \ is required at the link\n   receiver.  The total amount of buffering required\
    \ is a function of\n   the link's bandwidth*delay product and the level of ARQ\
    \ persistency,\n   and is bounded by the link window size.\n   A number of experimental\
    \ ARQ protocols have allowed out-of-order\n   delivery [BAL95, SAM96, WARD95].\n"
- title: 3.2 Using Link ARQ to Support Multiple Flows
  contents:
  - "3.2 Using Link ARQ to Support Multiple Flows\n   Most links can be expected to\
    \ carry more than one IP flow at a time.\n   Some high-capacity links are expected\
    \ to carry a very large number of\n   simultaneous flows, often from and to a\
    \ large number of different\n   endhosts.  With use of multiple applications at\
    \ an endhost, multiple\n   flows can be considered the norm rather than the exception,\
    \ even for\n   last-hop links.\n   When packets from several flows are simultaneously\
    \ in transit within\n   a link ARQ protocol, ARQ may cause a number of additional\
    \ effects:\n   a. ARQ introduces variable delay (jitter) to a TCP flow sharing\
    \ a\n      link with another flow experiencing loss.  This additional\n      delay,\
    \ introduced by the need for a link to provide in-sequence\n      delivery of\
    \ packets, may adversely impact other applications\n      sharing the link, and\
    \ can increase the duration of the initial\n      slow-start period for TCP flows\
    \ for these applications.  This is\n      significant for short-lived TCP flows\
    \ (e.g., those used by\n      HTTP/1.0 and earlier), which spend most of their\
    \ lives in\n      slow-start.\n   b. ARQ introduces jitter to UDP flows that share\
    \ a link with\n      another flow experiencing loss.  An end-to-end protocol may\
    \ not\n      require reliable delivery for its flows, particularly if it is\n\
    \      supporting a delay-sensitive application.\n   c. High-persistence ARQ may\
    \ delay packets long enough to cause the\n      premature timeout of another TCP\
    \ flow's RTO timer, although\n      modern TCP implementations should not experience\
    \ this since\n      their computed RTO values should leave a sufficient margin\
    \ over\n      path RTTs to cope with reasonable amounts of jitter.\n   Reordering\
    \ of packets belonging to different flows may be desirable\n   [LUD99b, CHE00]\
    \ to achieve fair sharing of the link between\n   established bulk-data transfer\
    \ sessions and sessions that transmit\n   less data, but would benefit from lower\
    \ link transit delay.\n   Preserving ordering within each individual flow, to\
    \ avoid the effects\n   of reordering described earlier in section 3.1, is worthwhile.\n"
- title: 3.3 Differentiation of Link Service Classes
  contents:
  - "3.3 Differentiation of Link Service Classes\n   High ARQ persistency is generally\
    \ considered unsuitable for many\n   applications using UDP, where reliable delivery\
    \ is not always\n   required and where it may introduce unacceptable jitter, but\
    \ may\n   benefit bulk data transfers under certain link conditions.  A scheme\n\
    \   that differentiates packet flows into two or more classes, to provide\n  \
    \ a different service to each class, is therefore desirable.\n   Observation of\
    \ flow behaviour can tell you which flows are controlled\n   and congestion-sensitive,\
    \ or uncontrolled and not, so that you can\n   treat them differently and ensure\
    \ fairness.  However, this cannot\n   tell you whether a flow is intended as reliable\
    \ or unreliable by its\n   application, or what the application requires for best\
    \ operation.\n   Supporting different link services for different classes of flows\n\
    \   therefore requires that the link is able to distinguish the different\n  \
    \ flows from each other.  This generally needs an explicit indication\n   of the\
    \ class associated with each flow.\n   Some potential schemes for indicating the\
    \ class of a packet include:\n   a. Using the Type of Service (ToS) bits in the\
    \ IP header [RFC791].\n      The IETF has replaced these globally-defined bits,\
    \ which were\n      not widely used, with the differentiated services model\n\
    \      (diffserv [RFC2475, RFC3260]).  In diffserv, each packet carries a\n  \
    \    Differentiated Service Code Point (DSCP), which indicates which\n      one\
    \ of a set of diffserv classes the flow belongs to.  Each\n      router maps the\
    \ DSCP value of a received IP packet to one of a\n      set of Per Hop Behaviours\
    \ (PHBs) as the packet is processed\n      within the network.  Diffserv uses\
    \ include policy-based routing,\n      class-based queuing, and support for other\
    \ QoS metrics,\n      including IP packet priority, delay, reliability, and cost.\n\
    \   b. Inspecting the network packet header and viewing the IP protocol\n    \
    \  type [RFC791] to gain an idea of the transport protocol used and\n      thus\
    \ guess its needs.  This is not possible when carrying an\n      encrypted payload,\
    \ e.g., using the IP security extensions (IPSec)\n      with Encapsulation Security\
    \ Payload (ESP) [RFC2406] payload\n      encryption.\n   c. By inspecting the\
    \ transport packet header information to view\n      the TCP or UDP headers and\
    \ port numbers (e.g., [PAR00, BAL95]).\n      This is not possible when using\
    \ payload encryption, e.g., IPSec\n      with ESP payload encryption [RFC2406],\
    \ and incurs processing\n      overhead for each packet sent over the link.\n\
    \   There are, however, some drawbacks to these schemes:\n   i.   The ToS/Differentiated\
    \ Services Code Point (DSCP) values\n        [RFC2475] may not be set reliably,\
    \ and may be overwritten by\n        intermediate routers along the packet's path.\
    \  These values may\n        be set by an ISP, and do not necessarily indicate\
    \ the level of\n        reliability required by the end application.  The link\
    \ must be\n        configured with knowledge of the local meaning of the values.\n\
    \   ii.  Tunnelling of traffic (e.g., GRE, MPLS, L2TP, IP-in-IP\n        encapsulation)\
    \ can aggregate flows of different transport\n        classes, complicating individual\
    \ flow classification with\n        schemes (b) and (c) and incurring further\
    \ header processing if\n        tunnel contents are inspected.\n   iii. Use of\
    \ the TCP/UDP port number makes assumptions about\n        application behaviour\
    \ and requirements.  New applications or\n        protocols can invalidate these\
    \ assumptions, as can the use of\n        e.g., Network Address Port Translation,\
    \ where port numbers are\n        remapped [RFC3022].\n   iv.  In IPv6, the entire\
    \ IPv6 header must be parsed to locate the\n        transport layer protocol,\
    \ adding complexity to header\n        inspection.  Again, this assumes that IPSec\
    \ payload encryption\n        is not used.\n   Despite the difficulties in providing\
    \ a framework for accurate flow\n   identification, approach (a) may be beneficial,\
    \ and is preferable to\n   adding optimisations that are triggered by inspecting\
    \ the contents of\n   specific IP packets.  Some such optimisations are discussed\
    \ in detail\n   in [LUD99b].\n   Flow management is desirable; clear flow identification\
    \ increases the\n   number of tools available for the link designer, and permits\
    \ more\n   complex ARQ strategies that may otherwise make misassumptions about\n\
    \   traffic requirements and behaviour when flow identification is not\n   done.\n\
    \   Links that are unable to distinguish clearly and safely between\n   delay-sensitive\
    \ flows, e.g., real-time multimedia, DNS queries or\n   telnet, and delay-insensitive\
    \ flows, e.g., bulk ftp transfers or\n   reliable multicast file transfer, cannot\
    \ separate link service\n   classes safely.  All flows should therefore experience\
    \ the same link\n   behaviour.\n   In general, if separation of flows according\
    \ to class is not\n   practicable, a low persistency is best for link ARQ.\n"
- title: 4. Conclusions
  contents:
  - "4. Conclusions\n   A number of techniques may be used by link protocol designers\
    \ to\n   counter the effects of channel errors or loss. One of these\n   techniques\
    \ is Automatic Repeat ReQuest, ARQ, which has been and\n   continues to be used\
    \ on links that carry IP traffic.  An ARQ protocol\n   retransmits link frames\
    \ that have been corrupted during transmission\n   across a channel.  Link ARQ\
    \ may significantly improve the probability\n   of successful transmission of\
    \ IP packets over links prone to\n   occasional frame loss.\n   A lower rate of\
    \ packet loss generally benefits transport protocols\n   and endhost applications.\
    \  Applications using TCP generally benefit\n   from Internet paths with little\
    \ or no loss and low round trip path\n   delay.  This reduces impact on applications,\
    \ allows more rapid growth\n   of TCP's congestion window during slow start, and\
    \ ensures prompt\n   reaction to end-to-end protocol exchanges (e.g., retransmission,\n\
    \   congestion indications).  Applications using other transport\n   protocols,\
    \ e.g., UDP or SCTP, also benefit from low loss and timely\n   delivery.\n   A\
    \ side-effect of link ARQ is that link transit delay is increased\n   when frames\
    \ are retransmitted.  At low error rates, many of the\n   details of ARQ, such\
    \ as degree of persistence or any resulting\n   out-of-order delivery, become\
    \ unimportant.  Most frame losses will be\n   resolved in one or two retransmission\
    \ attempts, and this is generally\n   unlikely to cause significant impact to\
    \ e.g., TCP.  However, on\n   shared high-delay links, the impact of ARQ on other\
    \ UDP or TCP flows\n   may lead to unwanted jitter.\n   Where error rates are\
    \ highly variable, high link ARQ persistence may\n   provide good performance\
    \ for a single TCP flow.  However,\n   interactions between flows can arise when\
    \ many flows share capacity\n   on the same link.  A link ARQ procedure that provides\
    \ flow management\n   will be beneficial.  Lower ARQ persistence may also have\
    \ merit, and\n   is preferable for applications using UDP.  The reasoning here\
    \ is that\n   the link can perform useful work forwarding some complete packets,\n\
    \   and that blocking all flows by retransmitting the frames of a single\n   packet\
    \ with high persistence is undesirable.\n   During a link outage, interactions\
    \ between ARQ and multiple flows are\n   less significant; the ARQ protocol is\
    \ likely to be equally\n   unsuccessful in retransmitting frames for all flows.\
    \  High\n   persistence may benefit TCP flows, by enabling prompt recovery once\n\
    \   the channel is restored.\n   Low ARQ persistence is particularly useful where\
    \ it is difficult or\n   impossible to classify traffic flows, and hence treat\
    \ each flow\n   independently, and where the link capacity can accommodate a large\n\
    \   number of simultaneous flows.\n   Link ARQ designers should consider the implications\
    \ of their design\n   on the wider Internet.  Effects such as increased transit\
    \ delay,\n   jitter, and re-ordering are cumulative when performed on multiple\n\
    \   links along an Internet path.  It is therefore very hard to say how\n   many\
    \ ARQ links may exist in series along an arbitrary Internet path\n   between endhosts,\
    \ especially as the path taken and its links may\n   change over time.\n   In\
    \ summary, when links cannot classify traffic flows and treat them\n   separately,\
    \ low persistence is generally desirable; preserving packet\n   ordering is generally\
    \ desirable.  Extremely high persistence and\n   perfect persistence are generally\
    \ undesirable; highly-persistent ARQ\n   is a bad idea unless flow classification\
    \ and detailed and accurate\n   knowledge of flow requirements make it possible\
    \ to deploy high\n   persistency where it will be beneficial.\n   There is currently\
    \ insufficient experience to recommend a specific\n   ARQ scheme for any class\
    \ of link.  It is also important to realize\n   that link ARQ is just one method\
    \ of error recovery, and that other\n   complementary physical-layer techniques\
    \ may be used instead of, or\n   together with, ARQ to improve overall link throughput\
    \ for IP traffic.\n   The choice of potential schemes includes adapting the data\
    \ rate,\n   adapting the signal bandwidth, adapting the transmission power,\n\
    \   adaptive modulation, adaptive information redundancy / forward error\n   control,\
    \ and interleaving.  All of these schemes can be used to\n   improve the received\
    \ signal energy per bit, and hence reduce error,\n   frame loss and resulting\
    \ packet loss rates given specific channel\n   conditions.\n   There is a need\
    \ for more research to more clearly identify the\n   importance of and trade-offs\
    \ between the above issues over various\n   types of link and over various types\
    \ of channels.  It would be useful\n   if researchers and implementers clearly\
    \ indicated the loss model,\n   link capacity and characteristics, link and end-to-end\
    \ path delays,\n   details of TCP, and the number (and details) of flows sharing\
    \ a link\n   when describing their experiences.  In each case, it is recommended\n\
    \   that specific details of the link characteristics and mechanisms also\n  \
    \ be considered; solutions vary with conditions.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   No security implications have been identified\
    \ as directly impacting\n   IP traffic.  However, an unreliable link service may\
    \ adversely impact\n   some existing link-layer key management distribution protocols\
    \ if\n   link encryption is also used over the link.\n   Denial-of-service attacks\
    \ exploiting the behaviour of the link\n   protocol, e.g., using knowledge of\
    \ its retransmission behaviour and\n   propagation delay to cause a particular\
    \ form of jamming, may be\n   specific to an individual link scenario.\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   No assignments from the IANA are required.\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   Much of what is described here has been developed from\
    \ a summary of a\n   subset of the discussions on the archived IETF PILC mailing\
    \ list.  We\n   thank the contributors to PILC for vigorous debate.\n   In particular,\
    \ the authors would like to thank Spencer Dawkins, Aaron\n   Falk, Dan Grossman,\
    \ Merkourios Karaliopoulos, Gary Kenward, Reiner\n   Ludwig and Jean Tourrilhes\
    \ for their detailed comments.\n"
- title: 8. References
  contents:
  - "8. References\n   References of the form RFCnnnn are Internet Request for Comments\n\
    \   (RFC) documents available online at http://www.rfc-editor.org/.\n"
- title: 8.1 Normative References
  contents:
  - "8.1 Normative References\n   [RFC768]      Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n                 August 1980.\n   [RFC791]      Postel, J.,\
    \ \"Internet Protocol\", STD 5, RFC 791,\n                 September 1981.\n \
    \  [RFC793]      Postel, J., \"Transmission Control Protocol\", RFC 793,\n   \
    \              September 1981.\n   [RFC1122]     Braden, R., Ed., \"Requirements\
    \ for Internet Hosts --\n                 Communication Layers\", STD 3, RFC 1122,\
    \ October 1989.\n   [RFC2406]     Kent, S. and R. Atkinson, \"IP Encapsulating\
    \ Security\n                 Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2475]\
    \     Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.\n              \
    \   and W. Weiss, \"An Architecture for Differentiated\n                 Services\"\
    , RFC 2475, December 1998.\n   [RFC2581]     Allman, M., Paxson, V. and W. Stevens,\
    \ \"TCP Congestion\n                 Control\", RFC 2581, April 1999.\n   [RFC2988]\
    \     Paxson, V. and M. Allman, \"Computing TCP's\n                 Retransmission\
    \ Timer\", RFC 2988, November 2000.\n   [RFC3135]     Border, J., Kojo, M., Griner,\
    \ J., Montenegro, G. and Z.\n                 Shelby, \"Performance Enhancing\
    \ Proxies Intended to\n                 Mitigate Link-Related Degradations\",\
    \ RFC 3135, June\n                 2001.\n   [RFC3260]     Grossman, D., \"New\
    \ Terminology and Clarifications for\n                 Diffserv\", RFC 3260, April\
    \ 2002.\n"
- title: 8.2 Informative References
  contents:
  - "8.2 Informative References\n   [BAL95]       Balakrishnan, H., Seshan, S. and\
    \ R. H. Katz,\n                 \"Improving Reliable Transport and Handoff Performance\n\
    \                 in Cellular Wireless Networks\", ACM MOBICOM, Berkeley,\n  \
    \               1995.\n   [BAL97]       Balakrishnan, H., Padmanabhan, V. N.,\
    \ Seshan, S. and\n                 R. H. Katz, \"A Comparison of Mechanisms for\
    \ Improving\n                 TCP Performance over Wireless Links\", IEEE/ACM\n\
    \                 Transactions on Networking, 5(6), pp. 756-759, 1997.\n   [BEN00]\
    \       Bennett, J. C., Partridge, C. and N. Schectman, \"Packet\n           \
    \      Reordering is Not Pathological Network Behaviour\",\n                 IEEE/ACM\
    \ Transactions on Networking, 7(6), pp. 789-798,\n                 2000.\n   [BHA97]\
    \       Bhagwat, P., Bhattacharya, P., Krishna A. and S. K.\n                \
    \ Tripathi, \"Using channel state dependent packet\n                 scheduling\
    \ to improve TCP throughput over wireless\n                 LANs\", ACM/Baltzer\
    \ Wireless Networks Journal, (3)1,\n                 1997.\n   [CHE00]       Cheng,\
    \ H. S., G. Fairhurst et al., \"An Efficient\n                 Partial Retransmission\
    \ ARQ Strategy with Error Codes\n                 by Feedback Channel\", IEE Proceedings\
    \ - Communications,\n                 (147)5, pp. 263-268, 2000.\n   [DRAFTKARN02]\
    \ Karn, P., Ed., \"Advice for Internet Subnetwork\n                 Designers\"\
    , Work in Progress.\n   [DRAFTHAN01]  Handley, M., Floyd, S. and J. Widmer, \"\
    TCP Friendly\n                 Rate Control (TFRC): Protocol Specification\",\
    \ Work in\n                 Progress.\n   [ECK98]       Eckhardt, D. A. and P.\
    \ Steenkiste, \"Improving Wireless\n                 LAN Performance via Adaptive\
    \ Local Error Control\",\n                 IEEE ICNP, 1998.\n   [FER99]      \
    \ Ferrero, A., \"The Eternal Ethernet\", Addison-Wesley,\n                 1999.\n\
    \   [ISO4335a]    HDLC Procedures: Specification for Consolidation of\n      \
    \           Elements of Procedures, ISO 4335 and AD/1,\n                 International\
    \ Standardization Organization, 1985.\n   [ISO4335b]    HDLC Procedures: Elements\
    \ of Procedures, Amendment 4:\n                 Multi-Selective Reject Option,\
    \ ISO 4335/4,\n                 International Standards Organization, 1991.\n\
    \   [ISO7776]     Specification for X.25 LAPB-Compatible DTE Data Link\n     \
    \            Procedures, ISO 4335/4, International Standards\n               \
    \  Organization, 1985.\n   [KEN87]       Kent, C. A. and J. C. Mogul, \"Fragmentation\n\
    \                 Considered Harmful\", Proceedings of ACM SIGCOMM 1987,\n   \
    \              ACM Computer Communications Review, 17(5), pp. 390-401,\n     \
    \            1987.\n   [LIN93]       Lin, S. and D. Costello, \"Error Control\
    \ Coding:\n                 Fundamentals and Applications\", Prentice Hall, 1993.\n\
    \   [LUD99a]      Ludwig, R., Rathonyi, B., Konrad, A., Oden, K., and A.\n   \
    \              Joseph, \"Multi-Layer Tracing of TCP over a Reliable\n        \
    \         Wireless Link\", ACM SIGMETRICS, pp. 144-154, 1999.\n   [LUD99b]   \
    \   Ludwig, R., Konrad, A., Joseph, A. and R. H. Katz,\n                 \"Optimizing\
    \ the End-to-End Performance of Reliable\n                 Flows over Wireless\
    \ Links\", ACM MobiCOM, 1999.\n   [MEY99]       Meyer, M., \"TCP Performance over\
    \ GPRS\", IEEE Wireless\n                 Communications and Networking Conference,\
    \ 1999.\n   [PAR00]       Parsa, C. and J. J. Garcia-Luna-Aceves, \"Improving\
    \ TCP\n                 Performance over Wireless Networks at the Link Layer\"\
    ,\n                 ACM Mobile Networks and Applications Journal, (5)1,\n    \
    \             pp. 57-71, 2000.\n   [RFC1191]     Mogul, J. and S. Deering, \"\
    Path MTU Discovery\", RFC\n                 1191, November 1990.\n   [RFC1323]\
    \     Jacobson, V., Braden, R. and D. Borman, \"TCP Extensions\n             \
    \    for High Performance\", RFC 1323, May 1992.\n   [RFC1350]     Sollins, K.,\
    \ \"The TFTP Protocol (Revision 2)\", STD 33,\n                 RFC 1350, July\
    \ 1992.\n   [RFC1435]     Knowles, S., \"IESG Advice from Experience with Path\
    \ MTU\n                 Discovery\", RFC 1435, March 1993.\n   [RFC1981]     McCann,\
    \ J., Deering, S. and J. Mogul, \"Path MTU\n                 Discovery for IP\
    \ version 6\", RFC 1981, August 1996.\n   [RFC2488]     Allman, M., Glover, D.\
    \ and L. Sanchez, \"Enhancing TCP\n                 Over Satellite Channels using\
    \ Standard Mechanisms\",\n                 BCP 28, RFC 2488, January 1999.\n \
    \  [RFC2757]     Montenegro, G., Dawkins, S., Kojo, M., Magret V. and\n      \
    \           N. Vaidya, \"Long Thin Networks\", RFC 2757, January\n           \
    \      2000.\n   [RFC2760]     Allman, M., Dawkins, S., Glover, D., Griner, J.,\n\
    \                 Tran, D., Henderson, T., Heidemann, J., Touch, J.,\n       \
    \          Kruse, H., Ostermann, S., Scott K. and J. Semke\n                 \"\
    Ongoing TCP Research Related to Satellites\",\n                 RFC 2760, February\
    \ 2000.\n   [RFC2960]     Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n  \
    \               Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\n       \
    \          Zhang, L. and V. Paxson, \"Stream Control Transmission\n          \
    \       Protocol\", RFC 2960, October 2000.\n   [RFC3022]     Srisuresh, P. and\
    \ K. Egevang, \"Traditional IP Network\n                 Address Translator (Traditional\
    \ NAT)\", RFC 3022,\n                 January 2001.\n   [RFC3155]     Dawkins,\
    \ S., Montenegro, G., Kojo, M., Magret, V. and\n                 N. Vaidya, \"\
    End-to-end Performance Implications of\n                 Links with Errors\",\
    \ BCP 50, RFC 3155, August 2001.\n   [SALT81]      Saltzer, J. H., Reed, D. P.\
    \ and D. Clark, \"End-to-End\n                 Arguments in System Design\", Second\
    \ International\n                 Conference on Distributed Computing Systems,\
    \ pp.\n                 509-512, 1981.  Published with minor changes in ACM\n\
    \                 Transactions in Computer Systems (2)4, pp. 277-288,\n      \
    \           1984.\n   [SAM96]       Samaraweera, N. and G. Fairhurst, \"Robust\
    \ Data Link\n                 Protocols for Connection-less Service over Satellite\n\
    \                 Links\", International Journal of Satellite\n              \
    \   Communications, 14(5), pp. 427-437, 1996.\n   [SAM98]       Samaraweera, N.\
    \ and G. Fairhurst, \"Reinforcement of\n                 TCP/IP Error Recovery\
    \ for Wireless Communications\",\n                 ACM Computer Communications\
    \ Review, 28(2), pp. 30-38,\n                 1998.\n   [STE94]       Stevens,\
    \ W. R., \"TCP/IP Illustrated, Volume 1\",\n                 Addison-Wesley, 1994.\n\
    \   [STONE00]     Stone, J. and C. Partridge, \"When the CRC and TCP\n       \
    \          Checksum Disagree\", Proceedings of SIGCOMM 2000, ACM\n           \
    \      Computer Communications Review 30(4), pp. 309-321,\n                 September\
    \ 2000.\n   [WARD95]      Ward, C., et al., \"A Data Link Control Protocol for\
    \ LEO\n                 Satellite Networks Providing a Reliable Datagram\n   \
    \              Service\", IEEE/ACM Transactions on Networking, 3(1),\n       \
    \          1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Godred Fairhurst\n   Department of Engineering\n   University\
    \ of Aberdeen\n   Aberdeen AB24 3UE\n   United Kingdom\n   EMail: gorry@erg.abdn.ac.uk\n\
    \   http://www.erg.abdn.ac.uk/users/gorry/\n   Lloyd Wood\n   Cisco Systems Ltd\n\
    \   4 The Square\n   Stockley Park\n   Uxbridge UB11 1BY\n   United Kingdom\n\
    \   EMail: lwood@cisco.com\n   http://www.ee.surrey.ac.uk/Personal/L.Wood/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
