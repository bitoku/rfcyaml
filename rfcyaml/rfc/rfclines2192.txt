Abstract IMAP [IMAP4] is a rich protocol for accessing remote message stores.
It provides an ideal mechanism for accessing public mailing list archives as well as private and shared message stores.
This document defines a URL scheme for referencing objects on an IMAP server.
Conventions used in this document The key words "MUST", "MUST NOT", "SHOULD", "
SHOULD NOT", and "MAY" in this document are to be interpreted as defined in "Key words for use in RFCs to Indicate Requirement Levels" [KEYWORDS].
The IMAP URL scheme is used to designate IMAP servers, mailboxes, messages, MIME bodies [MIME], and search programs on Internet hosts accessible using the IMAP protocol.
The IMAP URL follows the common Internet scheme syntax as defined in RFC 1738 [BASIC URL] except that clear text passwords are not permitted.
If :<port> is omitted, the port defaults to 143.
An IMAP URL takes one of the following forms: imap://<iserver>/
imap://<iserver>/<enc list mailbox>;TYPE <list type
The first form is used to refer to an IMAP server, the second form refers to a list of mailboxes, the third form refers to the contents of a mailbox or a set of messages resulting from a search, and the final form refers to a specific message or message part.
Note that the syntax here is informal.
The authoritative formal syntax for IMAP URLs is defined in section 11.
IMAP User Name and Authentication Mechanism
A user name and/or authentication mechanism may be supplied.
They are used in the "LOGIN" or "AUTHENTICATE" commands after making the connection to the IMAP server.
If no user name or authentication mechanism is supplied, the user name "anonymous" is used with the "LOGIN" command and the password is supplied as the Internet e mail address of the end user accessing the resource.
If the URL doesn't supply a user name, the program interpreting the IMAP URL SHOULD request one from the user if necessary.
An authentication mechanism can be expressed by adding ";AUTH <enc auth type>" to the end of the user name.
When such an <enc auth type> is indicated, the client SHOULD request appropriate credentials from that mechanism and use the "AUTHENTICATE" command instead of the "LOGIN" command.
If no user name is specified, one SHOULD be obtained from the mechanism or requested from the user as appropriate.
The string ";AUTH  " indicates that the client SHOULD select an appropriate authentication mechanism.
It MAY use any mechanism listed in the CAPABILITY command or use an out of band security service resulting in a PREAUTH connection.
If no user name is specified and no appropriate authentication mechanisms are available, the client SHOULD fall back to anonymous login as described above.
This allows a URL which grants read write access to authorized users, and read only anonymous access to other users.
If a user name is included with no authentication mechanism, then ";AUTH  " is assumed.
Since URLs can easily come from untrusted sources, care must be taken when resolving a URL which requires or requests any sort of authentication.
If authentication credentials are supplied to the wrong server, it may compromise the security of the user's account.
The program resolving the URL should make sure it meets at least one of the following criteria in this case: (1)
The URL comes from a trusted source, such as a referral server which the client has validated and trusts according to site policy.
Note that user entry of the URL may or may not count as a trusted source, depending on the experience level of the user and site policy.
Explicit local site policy permits the client to connect to the server in the URL.
For example, if the client knows the site domain name, site policy may dictate that any hostname ending in that domain is trusted.
The user confirms that connecting to that domain name with the specified credentials and/or mechanism is permitted.
A mechanism is used which validates the server before passing potentially compromising client credentials.
An authentication mechanism is used which will not reveal information to the server which could be used to compromise future connections.
URLs which do not include a user name must be treated with extra care, since they are more likely to compromise the user's primary account.
A URL containing ";AUTH  " must also be treated with extra care since it might fall back on a weaker security mechanism.
Finally, clients are discouraged from using a plain text password as a fallback with ";
AUTH  " unless the connection has strong encryption (e.g. a key length of greater than 56 bits).
A program interpreting IMAP URLs MAY cache open connections to an IMAP server for later re use.
If a URL contains a user name, only connections authenticated as that user may be re used.
If a URL does not contain a user name or authentication mechanism, then only an anonymous connection may be re used.
If a URL contains an authentication mechanism without a user name,
then any non  anonymous connection may be re used.
An IMAP URL referring to an IMAP server has the following form: imap://<iserver>/
A program interpreting this URL would issue the standard set of commands it uses to present a view of the contents of an IMAP server.
This is likely to be semanticly equivalent to one of the following URLs:
The program interpreting this URL SHOULD use the LSUB form if it supports mailbox subscriptions.
An IMAP URL referring to a list of mailboxes has the following form: imap://<iserver>/<enc list mailbox>;TYPE <list type
The <list type> may be either "LIST" or "LSUB", and is case insensitive.
The field ";TYPE <list type>" MUST be included.
The <enc list mailbox> is any argument suitable for the list mailbox field of the IMAP [IMAP4] LIST or LSUB commands.
they MUST be encoded as described in RFC 1738 [BASIC URL].
An IMAP URL referring to a list of messages has the following form:
The <enc mailbox> field is used as the argument to the IMAP4 "SELECT" command.
they MUST be encoded as described in RFC 1738 [BASIC URL].
The [uidvalidity] field is optional.
If it is present, it MUST be the argument to the IMAP4 UIDVALIDITY status response at the time the URL was created.
This SHOULD be used by the program interpreting the IMAP URL to determine if the URL is stale.
The [?<enc search>] field is optional.
If it is not present, the contents of the mailbox SHOULD be presented by the program interpreting the URL.
A specific message or message part
An IMAP URL referring to a specific message or message part has the following form:
The <enc mailbox> and [uidvalidity] are as defined above.
If [uidvalidity] is present in this form, it SHOULD be used by the program interpreting the URL to determine if the URL is stale.
The <iuid> refers to an IMAP4 message UID, and SHOULD be used as the <set> argument to the IMAP4 "UID FETCH" command.
The [isection] field is optional.
If not present, the URL refers to the entire Internet message as returned by the IMAP command "UID FETCH <uid
If present, the URL refers to the object returned by a "UID FETCH <uid
The type of the object may be determined with a "UID FETCH <uid> BODYSTRUCTURE" command and locating the appropriate part in the resulting BODYSTRUCTURE.
Note that unsafe characters in [isection] MUST be encoded as described in [BASIC URL].
Relative IMAP URLs Relative IMAP URLs are permitted and are resolved according to the rules defined in RFC 1808 [REL URL] with one exception.
In IMAP URLs, parameters are treated as part of the normal path with respect to relative URL resolution.
This is believed to be the behavior of the installed base and is likely to be documented in a future revision of the relative URL specification.
The following observations are also important: The <iauth> grammar element is considered part of the user name for purposes of resolving relative IMAP URLs.
This means that unless a new login/server specification is included in the relative URL, the authentication mechanism is inherited from a base IMAP URL.
IMAP4 permits the use of any hierarchy delimiter in mailbox names.
Relative URLs may be used on mailboxes which use other delimiters, but in that case, the entire mailbox name MUST be specified in the relative URL or inherited as a whole from the base URL.
The base URL for a list of mailboxes or messages which was referred to by an IMAP URL is always the referring IMAP URL itself.
The base URL for a message or message part which was referred to by an IMAP URL may be more complicated to determine.
The program interpreting the relative URL will have to check the headers of the MIME entity and any enclosing MIME entities in order to locate the "Content Base" and "Content Location" headers.
These headers are used to determine the base URL as defined in [HTTP].
For example, if the referring IMAP URL contains a "/;SECTION 1.2" parameter, then the MIME headers for section 1.2, for section 1, and for the enclosing message itself SHOULD be checked in that order for "Content Base" or "Content Location" headers.
Multinational Considerations IMAP4 [IMAP4] section 5.1.3 includes a convention for encoding non US ASCII characters in IMAP mailbox names.
Because this convention is private to IMAP, it is necessary to convert IMAP's encoding to one that can be more easily interpreted by a URL display program.
For this reason, IMAP's modified UTF
7 encoding for mailboxes MUST be converted to UTF 8 [UTF8].
Since 8 bit characters are not permitted in URLs, the UTF 8 characters are encoded as required by the URL specification [BASIC URL].
Sample code is included in Appendix A to demonstrate this conversion.
The following examples demonstrate how an IMAP4 client program might translate various IMAP4 URLs into a series of IMAP4 commands.
Commands sent from the client to the server are prefixed with "C:", and responses sent from the server to the client are prefixed with "S:".
> Results in the following client commands: <connect to minbari.org, port 143
A002 SELECT gray council <client verifies the UIDVALIDITY matches>
A003 UID FETCH 20 BODY.PEEK
;type list> Results in the following client commands: <client requests password from user
<connect to minbari.org imap server, activate strong encryption
A001 LOGIN MICHAEL zipper C:
> Results in the following client commands: <connect to psicorp.org, port 143
/&U,BTFw  <commands the client uses for viewing the contents of a mailbox
<imap://;AUTH KERBEROS V4@minbari.org/gray council/;uid 20/ ;section 1.2> Results in the following client commands: <connect to minbari.org, port 143
A001 AUTHENTICATE KERBEROS V4 <authentication exchange
gray council C: A003 UID FETCH 20 BODY.PEEK[1.2]
If the following relative URL is located in that body part: <;section 1.4>
This could result in the following client commands:
(BODY.PEEK[1.2.MIME] BODY.PEEK[1.MIME] BODY.PEEK[HEADER.FIELDS (Content Base Content Location)])
<Client looks for Content Base or Content Location headers in result.
If no such headers, then it does the following
A005 UID FETCH 20 BODY.PEEK[1.4]
> Could result in the following:
<connect to minbari.org, port 143
CAPABILITY IMAP4rev1 AUTH GSSAPI S:
A002 OK user lennier authenticated C: A003 SELECT "gray council"
A004 SEARCH SUBJECT shadows S:
SEARCH 8 10 13 14
A004 OK SEARCH completed C:
: In this final example, the client has implementation dependent choices.
The authentication mechanism could be anything, including PREAUTH.
And the final FETCH command could fetch more or less information about the messages, depending on what it wishes to display to the user.
Security Considerations Security considerations discussed in the IMAP specification [IMAP4] and the URL specification [BASIC URL] are relevant.
Security considerations related to authenticated URLs are discussed in section 3 of this document.
Many email clients store the plain text password for later use after logging into an IMAP server.
Such clients MUST NOT use a stored password in response to an IMAP URL without explicit permission from the user to supply that password to the specified host name.
ABNF for IMAP URL scheme
This uses ABNF as defined in RFC 822 [IMAIL].
Terminals from the BNF for IMAP [IMAP4] and URLs [BASIC URL] are also used.
Strings are not case sensitive and free insertion of linear white space is not permitted.
hex encoded UTF 8 which is more appropriate for URLs.
This code has not been rigorously tested nor does it necessarily behave reasonably with invalid input, but it should serve as a useful example.
This code just converts the mailbox portion of the URL and does not deal with parameters, query or server components of the URL.
can be slightly denser than UTF 8
8 octets UTF 7 becomes 9 octets
/  hex encode if necessary
/ bitbuf   0; bitcount   0; ucs4   0; while ((c   base64[(unsigned char)  src]) !
/ if (bitcount >  16) { bitcount    16; utf16
bitcount : bitbuf) & 0xffff; /
convert UTF16 to UCS4  /
i   1; } else if (ucs4 <  0x7ffUL) { utf8[0]   0xc0
(ucs4 >> 6); utf8[1]   0x80
; i   2; } else if (ucs4 <  0xffffUL) { utf8[0]
((ucs4 >> 6) & 0x3f); utf8[2]   0x80
; i   3; } else { utf8[0]   0xf0
(ucs4 >> 18); utf8[1]   0x80
((ucs4 >> 12) & 0x3f); utf8[2]   0x80
((ucs4 >> 6) & 0x3f); utf8[3]   0x80
in modified UTF 7 encoding  /
; utf8total   0; bitstogo   0;
/ utf8total   0; do { if (ucs4 >  UTF16BASE) { ucs4    UTF16BASE; bitbuf
(bitbuf >> bitstogo) : bitbuf) & 0x3F]
