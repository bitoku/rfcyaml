- title: __initial_text__
  contents:
  - "               Network Address Translator (NAT)-Friendly\n                  \
    \   Application Design Guidelines\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document discusses those things that application designers\
    \ might\n   wish to consider when designing new protocols.  While many common\n\
    \   Internet applications will operate cleanly in the presence of Network\n  \
    \ Address Translators, others suffer from a variety of problems when\n   crossing\
    \ these devices.  Guidelines are presented herein to help\n   ensure new protocols\
    \ and applications will, to the extent possible,\n   be compatible with NAT (Network\
    \ Address Translation).\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Other documents that describe Network Address Translation\
    \ (NAT)\n   discuss the Terminology and Considerations [RFC2663] and Protocol\n\
    \   Issues [RFC3022], [RFC3027] or discuss the implications of NAT\n   [RFC2993].\
    \  All of those relate to various issues with the NAT\n   mechanism, effects on\
    \ protocols and effects upon general Internet\n   architecture.\n   It is the\
    \ focus of this document to provide recommendations to\n   authors of new protocols\
    \ about the effects to consider when designing\n   new protocols such that special\
    \ handling is not required at NAT\n   gateway points.\n   When a protocol is unable\
    \ to pass cleanly through a NAT, the use of\n   an Application Level Gateway (ALG)\
    \ may still permit operation of the\n   protocol.  Depending on the encoding used\
    \ in a protocol, an ALG may\n   be difficult or easy to construct, though in some\
    \ cases it may not be\n   possible at all.  While adjunct to NAT, the formulation\
    \ of protocols\n   that cannot directly operate through NAT should be considered\
    \ such\n   that the ALG design may be simple and automated.  ALGs typically\n\
    \   operate inside small routers along with the NAT component.  Ideally,\n   the\
    \ ALG should be simple and not require excessive computation or\n   state storage.\n\
    \   Many of the same issues in application design that create issues for\n   NAT\
    \ (and thus can require ALG support) are also issues for firewalls.\n   An application\
    \ designer would do well to keep this in mind, as any\n   protocol that does require\
    \ special handling by NAT or firewall\n   products will be more difficult to deploy\
    \ than those that require no\n   special handling.\n"
- title: 2. Discussion
  contents:
  - "2. Discussion\n   Network Address Translation presents a challenge to some existing\n\
    \   applications.  In many cases, it should be possible for developers of\n  \
    \ new applications to avoid problems if they understand the issues.\n   This document\
    \ aims to provide the application designer with\n   information on what things\
    \ they can do and what to avoid when trying\n   to build applications that are\
    \ able to function across NAT.\n   The proliferation of NAT, especially in homes\
    \ and small offices\n   cannot be dismissed.  The marketing of these technologies\
    \ to homes\n   and small businesses is often focused on a single-computer\n  \
    \ environment, and thus providers only give out a single IP address to\n   each\
    \ user.  NAT has become a popular choice for connecting more than\n   a single\
    \ system per location.\n   Clearly the most common problem associated with NAT\
    \ implementations\n   is the passing of addressing data between stations.  Where\
    \ possible,\n   applications should find alternatives to such schemes.  Studying\
    \ a\n   few existing protocols will serve to highlight the different\n   approaches\
    \ possible.\n   Two common forms of Traditional NAT exist.  With Basic NAT, only\
    \ the\n   IP addresses of packets are altered by the NAT implementation.  Many\n\
    \   applications will operate correctly with Basic NAT.  The other common\n  \
    \ form is Network Address Port Translation.  With NAPT, both the IP\n   addresses\
    \ and the source and destination ports (for TCP and UDP) are\n   potentially altered\
    \ by the gateway.  As such, applications passing\n   only port number information\
    \ will work with Basic NAT, but not with\n   NAPT.\n   Application designers should\
    \ strive for compatibility with NAPT, as\n   this form of NAT is the most widely\
    \ deployed.  This is also the form\n   of NAT that will likely see the greatest\
    \ penetration in homes and\n   small offices.  Not all applications lend themselves\
    \ to the\n   architectural model imposed by NAPT.\n"
- title: 3. Recommendations and Examples
  contents:
  - "3. Recommendations and Examples\n   Application designers who work within the\
    \ constraints of NAT, and who\n   do not rely on the presence of ALGs will generally\
    \ find the easier\n   acceptance in user communities where NAT is common.  When\
    \ designing a\n   new application or service, the requirement for an ALG will\
    \ limit\n   deployment until the required additional code is incorporated into\n\
    \   the many devices which implement NAT.\n   Each of the areas called out below\
    \ are examples of issues to consider\n   when building an application.  This list\
    \ is likely not comprehensive,\n   but does cover a number of important issues\
    \ and considerations.\n"
- title: 3.1 Issues and Recommendations affecting all types of Network Address
  contents:
  - "3.1 Issues and Recommendations affecting all types of Network Address\n    Translators\n"
- title: 3.1.1. Peer-to-Peer Applications Limitations
  contents:
  - "3.1.1. Peer-to-Peer Applications Limitations\n   Peer to peer applications are\
    \ problematic in a NAT world.  Client-\n   server applications are more generally\
    \ workable.  Peer-to-peer\n   applications rely on each peer being reachable as\
    \ a server (i.e.,\n   bound to a listening port, and able to accept connections)\
    \ for the\n   other to connect to.  With NAPT, there are likely many machines\n\
    \   behind one address.  With other types of NAT such as Basic NAT with\n   Static\
    \ Address Assignment (providing one-to-one mappings), there is a\n   greater chance\
    \ of making such applications work.\n   Some implementations of NAT can be made\
    \ to function for UDP-based\n   peer-to-peer applications.  This capability is\
    \ dependent on the\n   methodology used to implement the UDP sessions in the NAT\
    \ device.  If\n   the NAT device tracks the tuple (private address, private port,\n\
    \   public port) then it is possible for an outbound UDP packet to\n   establish\
    \ a channel by which incoming traffic can flow from a source\n   other than that\
    \ originally contacted by the system.  The source IP\n   address is NOT used in\
    \ this case to match incoming packets to UDP\n   sessions, allowing any source\
    \ address using the UDP port number to be\n   translated.\n   NAT devices which\
    \ track source and destination IP addresses, in\n   addition to port numbers,\
    \ will not permit third-party packets.  NAT\n   is often implemented in conjunction\
    \ along with stateful-inspection\n   firewall functionality.  As such the latter\
    \ implementation of UDP\n   association tracking would be considered more secure.\n\
    \   NAT/Firewall device implementations could be constructed to have a\n   software\
    \ switch within them, permitting the consumer the ability to\n   select whether\
    \ they want the greater security, or greater ability to\n   run peer-to-peer applications.\n"
- title: 3.1.2. Applications Requiring End-to-End IPSec Will Fail
  contents:
  - "3.1.2. Applications Requiring End-to-End IPSec Will Fail\n   Use of IPSec for\
    \ end-to-end security will not function in the\n   presence of a NAT implementation.\
    \  Application designers may want to\n   explore the use of Transport Layer Security\
    \ (TLS) [RFC2246] as a\n   transport mode that will traverse NAT cleanly.  See\
    \ [RFC2709] for\n   additional discussion on combining NAT with Tunnel-mode IPSec\n\
    \   security on the same device.\n"
- title: 3.1.3. Use DNS Names, Not IP Addresses In Payload
  contents:
  - "3.1.3. Use DNS Names, Not IP Addresses In Payload\n   Applications should, where\
    \ possible, use fully qualified domain names\n   rather than IP addresses when\
    \ referring to IP endpoints.  When\n   endpoints are across a NAT gateway, private\
    \ addresses must not be\n   allowed to leak to the other endpoint.  An example\
    \ of where this can\n   happen today is with the HTTP and HTML protocols.  It\
    \ is possible for\n   web pages to be specified with numeric IP addresses, rather\
    \ than with\n   names, for example http://192.168.1.10/index.html could be used\
    \ as a\n   URL, but would likely create a problem if this address is on a server\n\
    \   located behind a NAT gateway.  Users outside the gateway would not be\n  \
    \ able to reach the address 192.168.1.10, and so would not see the\n   page.\n\
    \   Further exacerbating the problem is the possibility of duplicate\n   addresses\
    \ between realms.  If a server offers a link with a private\n   address space\
    \ IP address embedded within it, such as 192.168.1.10,\n   the page referenced\
    \ may resolve to a system on the local network the\n   browser is on, but would\
    \ be a completely different server.  The\n   resulting confusion to end-users\
    \ would be significant.  Sessions\n   involving multiple NAT implementations would\
    \ be exceptionally\n   vulnerable to address reuse issues of this sort.\n"
- title: 3.1.4. Multicast Considerations
  contents:
  - "3.1.4. Multicast Considerations\n   Not all NAT devices implement multicast routing\
    \ protocols.\n   Application designers should verify whether the devices in the\n\
    \   networks where their applications will be deployed are able to\n   process\
    \ multicast traffic if their applications rely on that\n   capability.\n"
- title: 3.1.5. Retention Of Address Mapping
  contents:
  - "3.1.5. Retention Of Address Mapping\n   With the exception of statically configured\
    \ NAT bindings,\n   applications should not assume address mapping will be maintained\n\
    \   from one session (association between machines, for whatever protocol\n  \
    \ for a period of time) to another.  An example of this is RSVP, which\n   forms\
    \ one connection to reserve the resources, then the actual\n   session for which\
    \ resources were reserved is started.  The sessions\n   do not necessarily overlap.\
    \  There is no guarantee that the NAT\n   implementation will keep the binding\
    \ association.  As such,\n   applications that rely on subsequent sessions being\
    \ mapped to the\n   same host IP address may not function without an ALG.\n  \
    \ Another consideration is the number of addressing realms.  It is\n   entirely\
    \ possible to have multiple levels of NAT implementations\n   between the two\
    \ end points involved.  As such, one must think about\n   the lifetime of such\
    \ mappings at all such levels.\n   Load balancers and other devices may use a\
    \ single IP address and port\n   to map to multiple actual end points.  Many products\
    \ implement\n   variations on this theme, sometimes using NAT, sometimes using\
    \ other\n   technologies.  The lack of guarantee of mapping is important to\n\
    \   understand, since the mapping to one actual system to another may not\n  \
    \ survive across such intermediate boxes.\n   Don't assume systems know their\
    \ own IP addresses.  A system behind a\n   NAT may be reachable via a particular\
    \ IP address, but that address\n   may not be recognized by the system itself.\
    \  Consider the case of\n   Static, one-to-one mapping using Basic NAT.  A server\
    \ in this context\n   will have an IP address from the private realm, and may\
    \ not know the\n   public address which maps to it.  Similarly, some such systems\
    \ may\n   not know their own DNS names, while others may.  This is largely\n \
    \  dependent on the configuration of the servers and the network within\n   the\
    \ private realm.\n"
- title: 3.2 Recommendations for NAPT
  contents:
  - "3.2 Recommendations for NAPT\n   As many of the issues specifically address NAPT\
    \ issues, this section\n   will group these issues.  NAPT is the most common form\
    \ of NAT in\n   actual deployment in routers, especially in smaller offices and\
    \ home\n   offices.\n"
- title: 3.2.1 IP Addresses Specific To A Realm
  contents:
  - "3.2.1 IP Addresses Specific To A Realm\n   Avoid the use of IP address and port\
    \ number information within the\n   payload of packets.  While in some cases ALGs\
    \ will permit such\n   protocols to function, this presupposes every NAT device\
    \ can be\n   updated in a timely fashion to support a new protocol.  Since this\
    \ is\n   unlikely, application writers are urged to avoid placing addressing\n\
    \   information in payloads all together.\n   In addition to avoiding addresses\
    \ and port numbers within packet\n   payloads, it is important to avoid assumptions\
    \ of (address, port)\n   tuples are unique beyond the scope of the present session.\
    \  Load\n   balancing devices implementing NAT may, for example, map subsequent\n\
    \   sessions to other systems in the private realm.\n"
- title: 3.2.2 Avoid Session Bundles
  contents:
  - "3.2.2 Avoid Session Bundles\n   Independent sessions, such as used by POP or\
    \ SMTP, are preferred to\n   protocols that attempt to manage a bundle of related\
    \ sessions, such\n   as FTP.  The term \"session\" here is used to refer to any\
    \ association\n   between end systems, and may be using any transport protocol\
    \ or\n   combination of protocols (UDP, TCP, SCTP).\n   In the FTP protocol, port\
    \ information is passed over one TCP\n   connection and is used to construct a\
    \ second TCP connection for\n   passing the actual data.  Use of a separate connection\
    \ to transfer\n   the file data makes determination of file end quite simple,\
    \ however\n   other schemes could be envisioned which could use a single\n   connection.\n\
    \   The HTTP protocol, for example, uses a header and content length\n   approach\
    \ to passing data.  In this model, all data is transferred\n   over the single\
    \ TCP connection, with the header portion indicating\n   the length of the data\
    \ to follow.  HTTP has evolved to allow multiple\n   objects to be passed on a\
    \ single connection (thereby cutting the\n   connection establishment overhead).\
    \  Clearly a new file transfer\n   function could be built that would perform\
    \ most of the functions of\n   FTP without the need for additional TCP connections.\n\
    \   The goal is to keep to single connections where possible.  This keeps\n  \
    \ us from needing to pass addressing information of any sort across the\n   network.\
    \  However, multiplexing traffic over a single connection can\n   create problems\
    \ as well.\n"
- title: 3.2.3. Session Bundles Originate From Same End
  contents:
  - "3.2.3. Session Bundles Originate From Same End\n   Origination of connections\
    \ is an important consideration.  Where\n   possible, the client should originate\
    \ all connections.  The FTP\n   protocol is the most obvious example, where by\
    \ default the server\n   opens the data connection to a port on the client (the\
    \ client having\n   specified the port number via a PORT command over the control\
    \ TCP\n   session).\n   As pointed out in [RFC1579], the use of the passive open\
    \ option in\n   FTP (PASV) remedies this situation as the client is responsible\
    \ for\n   opening the connection in this case.  With client-opened connections,\n\
    \   the standard functions of NAPT will process the request as it would\n   any\
    \ other simple TCP connection, and so an ALG is not required.\n   In cases where\
    \ session bundles are unavoidable, each session in the\n   bundle should originate\
    \ from the same end station.\n"
- title: 3.2.4. Choice of Transport Protocol
  contents:
  - "3.2.4. Choice of Transport Protocol\n   NAPT gateways must track which sessions\
    \ are alive, and flush old\n   sessions.  TCP has clear advantages in this area,\
    \ since there are\n   specific beginning and end of session indicators in the\
    \ packets (SYN\n   and FIN packets).  While UDP works for some types of applications\n\
    \   with NAT, there can be issues when that data is infrequent.  Since\n   there\
    \ is no clean way to know when an end station has finished using\n   a UDP session,\
    \ NAT implementations use timeouts to guess when a UDP\n   session completes.\
    \  If an application doesn't send data for a long\n   period of time, the NAT\
    \ translation may time out.\n   NAT implementations also use timers to guess when\
    \ TCP sessions have\n   disappeared.  While TCP sessions should disappear only\
    \ after FIN\n   packets are exchanged, it is possible that such packets may never\n\
    \   come, for example if both end stations die.  As such, the NAT\n   implementation\
    \ must use a timer for cleaning up its resources.\n   NAT implementers in many\
    \ cases provide several timeouts, one for live\n   TCP sessions, one for TCP sessions\
    \ on which a FIN has been seen, and\n   one for UDP sessions.  It is best when\
    \ such flexibility is provided,\n   but some implementations appear to apply a\
    \ single timer to all\n   traffic.\n   Protocols other than TCP and UDP can work\
    \ with Traditional NAT in\n   many cases, provided they are not carrying addressing\
    \ information.\n   For NAPT implementations use of any protocols other than TCP\
    \ and UDP\n   will be problematic unless or until such protocols are programmed\n\
    \   into the implementations.\n   It's important to note that NAPT deployments\
    \ are based on the\n   assumption of a client-server application model, with the\
    \ clients in\n   the private realm.\n"
- title: 3.2.5. IP Fragmentation
  contents:
  - "3.2.5. IP Fragmentation\n   Applications should attempt to avoid fragmentation\
    \ when packets pass\n   over NAPT devices.  While not always practical or possible,\
    \ there are\n   failures that can occur with NAPT.  Specifically, if two stations\
    \ in\n   the private realm pick matching fragmentation identifiers, and talk\n\
    \   to the same remote host, it may be impossible to determine which\n   fragments\
    \ belong to which session.  A clever NAPT implementation\n   could track fragmentation\
    \ identifiers and map those into a unique\n   space, though it is not clear how\
    \ many do so.\n   Ideally, applications should limit packet size, use Path MTU\n\
    \   Discovery or both.  Unfortunately, at least some firewall/NAT devices\n  \
    \ block Path MTU Discovery, apparently believing all ICMP packets are\n   evil.\n\
    \   Some implementations of NAT may implement fragment reassembly prior\n   to\
    \ Forwarding, however many do not.  Application designers are\n   advised to design\
    \ assuming the devices do not reassemble fragments.\n"
- title: 3.3 Issues and recommendations for Basic NAT
  contents:
  - "3.3 Issues and recommendations for Basic NAT\n   If only Basic NAT implementations\
    \ are involved, not NAPT, then many\n   of the issues above do not apply.  This\
    \ is not to say that this form\n   of NAT is better or worse than NAPT.  Application\
    \ designers may think\n   they could just specify users must use Basic NAT, and\
    \ many\n   application issues would go away.  This is unrealistic, however, as\n\
    \   many users have no real alternative to NAPT due to the way their\n   providers\
    \ sell service.\n   Many of the issues raised earlier still apply to Basic NAT,\
    \ and many\n   protocols will not function correctly without assistance.\n"
- title: 3.3.1. Use IP and TCP/UDP Headers Alone
  contents:
  - "3.3.1. Use IP and TCP/UDP Headers Alone\n   Applications that use only the information\
    \ in the IP and TCP or UDP\n   headers for communication (in other words, do not\
    \ pass any additional\n   addressing information in the payload of the packets),\
    \ are clearly\n   easier to support in a NAT environment.  Where possible, applications\n\
    \   designers should try to limit themselves in this area.\n   This comes back\
    \ to the same recommendation made for NAPT, that being\n   to use a single connection\
    \ whenever possible.\n   The X windowing system, for example, uses fixed port\
    \ numbers to\n   address X servers.  With X, the server (display) is addressed\
    \ via\n   ports 6000 through 6000 + n.  These map to hostname:0 through\n   hostname:n\
    \ server displays.  Since only the address and port are\n   used, the NAT administrator\
    \ could map these ports to one or more\n   private addresses, yielding a functioning\
    \ solution.\n   The X example, in the case of NAPT, requires configuration of\
    \ the NAT\n   implementation.  This results in the ability for no more than one\n\
    \   station inside the NAT gateway to use such a protocol.  This approach\n  \
    \ to the problem is thus OK for NAT but not recommended for NAPT\n   environments.\n"
- title: 3.3.2. Avoid Addressing In Payload
  contents:
  - "3.3.2. Avoid Addressing In Payload\n   As with NAPT, transporting IP address\
    \ and/or port number information\n   in the payload is likely to cause trouble.\
    \  As stated earlier, load\n   balancers and similar platforms may well map the\
    \ same IP address and\n   port number to a completely different system.  Thus\
    \ it is problematic\n   to assume an address or port number which is valid in\
    \ the realm on\n   one side of a NAT is valid on the other side.\n"
- title: 3.4 Bi-directional NAT
  contents:
  - "3.4 Bi-directional NAT\n   Bi-directional NAT makes use of DNS mapping of names\
    \ to point\n   sessions originating outside the private realm to servers in the\n\
    \   private realm.  Through use of a DNS-ALG [RFC2694], lookups are\n   performed\
    \ to find the proper host and packets are sent to that host.\n   Requirements\
    \ for applications are the same as for Basic NAT.\n   Addresses are mapped one-to-one\
    \ to servers.  Unlike Traditional NAT\n   devices, Bi-directional NAT devices\
    \ (in conjunction with DNS-ALG) are\n   amenable to peer-to-peer applications.\n"
- title: 3.5 Twice NAT
  contents:
  - "3.5 Twice NAT\n   Twice NAT is address translation where both source and destination\
    \ IP\n   addresses are modified due to addressing conflicts between two\n   private\
    \ realms.  Two bi-directional NAT boxes connected together\n   would essentially\
    \ perform the same task, though a common address\n   space that is not otherwise\
    \ used by either private realm would be\n   required.\n   Requirements for applications\
    \ to work in the Twice NAT environment\n   are the same as for Basic NAT.  Addresses\
    \ are mapped one to one.\n"
- title: 3.6 Multi-homed NAT
  contents:
  - "3.6 Multi-homed NAT\n   Multi-homed NAT is the use of multiple NAT implementations\
    \ to provide\n   redundancy.  The multiple implementations share configuration\n\
    \   information so that sessions might continue in the event of a fail-\n   over.\
    \  Unless the multiple implementations share the same external\n   addresses,\
    \ sessions will have to restart regardless.\n   Requirements for multi-homed NAT\
    \ are the same as for Basic NAT or\n   NAPT, depending on how the multi-homed\
    \ NAT is implemented and\n   configured.\n"
- title: 3.7 Realm Specific IP (RSIP)
  contents:
  - "3.7 Realm Specific IP (RSIP)\n   Realm Specific IP is described in [RFC2663]\
    \ and defined in [RSIP] and\n   related documents.  Clients within a private realm\
    \ using RSIP are\n   aware of the delineation between private and public, and\
    \ access a\n   server to allocate address (and optionally port) information for\
    \ use\n   in conversing with hosts in the public realm.  By doing this, clients\n\
    \   create packets that need not be altered by the RSIP server on their\n   way\
    \ to the remote host.  This technique can permit IPSec to function,\n   and potentially\
    \ makes any application function as if there were no\n   special processing involved\
    \ at all.\n   RSIP uses a view of the world in which there are only two realms,\
    \ the\n   private and public.  This isn't always the case.  Situations with\n\
    \   multiple levels of NAT implementations are growing.  For example,\n   some\
    \ ISPs are handing out [RFC1918] addresses to their dialup users,\n   rather than\
    \ obtaining real addresses.  Any user of such an ISP who\n   also uses a NAT implementation\
    \ will see two levels of NAT, and the\n   advantages of RSIP will have been wasted.\n"
- title: 3.8 Performance Implications of Address Translation Implementations
  contents:
  - "3.8 Performance Implications of Address Translation Implementations\n   Resource\
    \ utilization on the NAT gateway should be considered.  An\n   application that\
    \ opens and closes many TCP connections, for example,\n   will use up more resources\
    \ on the NAT router than an application\n   performing all transfers over a single\
    \ TCP connection.  HTTP 1.0\n   opened a connection for each object on a web page,\
    \ whereas HTTP 1.1\n   permits the TCP session to be held open for additional\
    \ objects that\n   may need to be transferred.  Clearly the latter imposes a lower\n\
    \   overhead on the NAT gateway, as it is only maintaining state on a\n   single\
    \ connection instead of multiple connections.\n   New session establishment will\
    \ typically remain a software function\n   even in implementations where the packet-by-packet\
    \ translation work\n   is handled by hardware forwarding engines.  While high-performance\n\
    \   NAT boxes may be built, protocols that open many sessions instead of\n   multiplexing\
    \ will be slower than those that do not.\n   Applications with different types\
    \ of data, such as interactive\n   conferencing, require separate streams for\
    \ the different types of\n   data.  In such cases the protocol needs of each stream\
    \ must be\n   optimized.  While the goal of multiplexing over a single session\
    \ is\n   preferred, clearly there are cases where this is impractical.\n   The\
    \ latency of NAT translation overhead is implementation dependent.\n   On a per-packet\
    \ basis, for established sessions only the source or\n   destination IP address\
    \ is replaced, the source or destination port\n   (for NAPT) and the checksums\
    \ for IP, and TCP or UDP are recalculated.\n   The functionality can be efficiently\
    \ implemented in hardware or\n   software.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Network Address Translators have implications\
    \ for IPSec, as noted\n   above.  When application developers are considering\
    \ whether their\n   applications function with NAT implementations, care should\
    \ be given\n   to selection of security methodology.  Transport Layer Security\
    \ (TLS)\n   [RFC2246] operates across translation boundaries.  End-to-end IPSec\n\
    \   will prove problematic in many cases.\n"
- title: 5. References
  contents:
  - "5. References\n   [RFC1579]   Bellovin, S., \"Firewall Friendly FTP\", RFC 1579,\
    \ February\n               1994.\n   [RFC2246]   Dierks, T. and C. Allen, \"The\
    \ TLS Protocol Version 1.0\",\n               RFC 2246, January 1999.\n   [RFC2993]\
    \   Hain, T., \"Architectural Implications of NAT\", RFC 2993,\n             \
    \  November 2000.\n   [RFC3027]   Holdrege, M. and P. Srisuresh, \"Protocol Complications\n\
    \               with the IP Network Address Translator (NAT)\", RFC 3027,\n  \
    \             January 2001.\n   [RFC2663]   Srisuresh, P. and M. Holdrege, \"\
    IP Network Address\n               Translator (NAT) Terminology and Considerations\"\
    , RFC\n               2663, August 1999.\n   [RFC2709]   Srisuresh, P., \"Security\
    \ Model with Tunnel-mode IPsec for\n               NAT Domains\", RFC 2709, October\
    \ 1999.\n   [RFC3102]   Borella, M., Lo, J., Grabelsky, D. and G. Montenegro,\n\
    \               \"Realm Specific IP: Framework\", RFC 3102, October 2001.\n  \
    \ [RFC3022]   Srisuresh, P. and K. Egevang, \"Traditional IP Network\n       \
    \        Address Translator (Traditional NAT)\", RFC 3022, January\n         \
    \      2001.\n   [RFC2694]   Srisuresh, P., Tsirtsis, G., Akkiraju, P. and A.\n\
    \               Heffernan, \"DNS extensions to Network Address Translators\n \
    \              (DNS_ALG)\", RFC 2694, September 1999.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   I'd like to thank Pyda Srisuresh for his invaluable input\
    \ and\n   feedback, and Keith Moore for his extensive comments.\n"
- title: 7. Author's Address
  contents:
  - "7. Author's Address\n   Daniel Senie\n   Amaranth Networks Inc.\n   324 Still\
    \ River Road\n   Bolton, MA 01740\n   Phone: (978) 779-6813\n   EMail: dts@senie.com\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
