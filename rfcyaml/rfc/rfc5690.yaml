- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          S. Floyd
  contents:
  - "Independent Submission                                          S. Floyd\n  \
    \          Adding Acknowledgement Congestion Control to TCP\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a possible congestion control mechanism\
    \ for\n   acknowledgement (ACKs) traffic in TCP.  The document specifies an\n\
    \   end-to-end acknowledgement congestion control mechanism for TCP that\n   uses\
    \ participation from both TCP hosts: the TCP data sender and the\n   TCP data\
    \ receiver.  The TCP data sender detects lost or Explicit\n   Congestion Notification\
    \ (ECN)-marked ACK packets, and tells the TCP\n   data receiver the ACK Ratio\
    \ R to use to respond to the congestion on\n   the reverse path from the data\
    \ receiver to the data sender.  The TCP\n   data receiver sends roughly one ACK\
    \ packet for every R data packets\n   received.  This mechanism is based on the\
    \ acknowledgement congestion\n   control in the Datagram Congestion Control Protocol's\
    \ (DCCP's)\n   Congestion Control Identifier (CCID) 2.  This acknowledgement\n\
    \   congestion control mechanism is being specified for further\n   evaluation\
    \ by the network community.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5690.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The content of this RFC was at one time considered by the IETF,\
    \ and\n   therefore it may resemble a current IETF work in progress or a\n   published\
    \ IETF work.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions and Terminology .....................................4\n  \
    \ 3. Overview ........................................................4\n   4.\
    \ Acknowledgement Congestion Control ..............................6\n      4.1.\
    \ The ACK Congestion Control Permitted Option ................6\n      4.2. The\
    \ TCP ACK Ratio Option ...................................7\n      4.3. The Receiver:\
    \ Implementing the ACK Ratio ...................7\n      4.4. The Sender: Determining\
    \ Lost or Marked ACK Packets .........8\n           4.4.1. The Sender: Detecting\
    \ Lost ACK Packets\n                  after a Congestion Event ...........................10\n\
    \      4.5. The Sender: Adjusting the ACK Ratio .......................10\n  \
    \         4.5.1. Possible Addition: Decreasing the ACK Ratio\n               \
    \   after a Congestion Window Decrease .................12\n      4.6. The Receiver:\
    \ Sending ACKs for Out-of-Order Data\n           Segments ..................................................12\n\
    \      4.7. The Sender: Response to ACK Packets .......................13\n  \
    \    4.8. Possible Addition: Receiver Bounds on the ACK Ratio .......15\n   5.\
    \ Possible Complications .........................................15\n      5.1.\
    \ Possible Complication: Delayed Acknowledgements ...........15\n      5.2. Possible\
    \ Complication: Duplicate Acknowledgements .........15\n      5.3. Possible Complication:\
    \ Two-Way Traffic ....................16\n      5.4. Possible Complication: Reordering\
    \ of ACK Packets ..........16\n      5.5. Possible Complication: Abrupt Changes\
    \ in the ACK Path .....17\n      5.6. Possible Complication: Corruption .........................17\n\
    \      5.7. Possible Complication: ACKs That Don't Contribute\n           to Congestion\
    \ .............................................17\n      5.8. Possible Complication:\
    \ TCP Implementations that\n           Skip ACK Packets ..........................................20\n\
    \      5.9. Possible Complication: Router or Middlebox-Based\n           ACK Mechanisms\
    \ ............................................21\n      5.10. Possible Complication:\
    \ Data-Limited Senders ..............21\n      5.11. Other Issues .............................................22\n\
    \   6. Evaluating ACK Congestion Control ..............................22\n  \
    \    6.1. Contention in Wireless Links or in Non-Switched Ethernet ..22\n    \
    \  6.2. Keep-Alive and Other Special ACK Packets ..................22\n   7. Measurements\
    \ of ACK Traffic and Congestion .....................23\n   8. Acknowledgement\
    \ Congestion Control in DCCP's CCID 2 ............23\n   9. Security Considerations\
    \ ........................................24\n   10. IANA Considerations ...........................................25\n\
    \   11. Conclusions ...................................................26\n  \
    \ 12. Acknowledgements ..............................................26\n   Appendix\
    \ A. Related Work ..........................................27\n      A.1. ECN-Only\
    \ Mechanisms .......................................28\n      A.2. Receiver-Only\
    \ Mechanisms ..................................28\n      A.3. Middlebox-Based\
    \ Mechanisms ................................29\n   Appendix B. Design Considerations\
    \ .................................29\n      B.1. The TCP ACK Ratio Option, or\
    \ an AckNow Bit in\n           Data Packets? .............................................29\n\
    \   Normative References ..............................................30\n  \
    \ Informative References ............................................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a congestion control mechanism for\n\
    \   acknowledgements (ACKs) to TCP.  This mechanism is based on the\n   acknowledgement\
    \ congestion control in DCCP's CCID 2 ([RFC4340],\n   [RFC4341]), which is a successor\
    \ to the TCP acknowledgement\n   congestion control mechanism proposed by Balakrishnan,\
    \ et al. in\n   [BPK97].\n   In this document we use the terminology of senders\
    \ and receivers,\n   with the sender sending data traffic and the receiver sending\n\
    \   acknowledgement traffic in response.  In CCID 2's acknowledgement\n   congestion\
    \ control, specified in Section 6.1 of [RFC4341], the\n   receiver uses an ACK\
    \ Ratio R reported to it by the sender, sending\n   roughly one ACK packet for\
    \ every R data packets received.  The CCID 2\n   sender keeps the acknowledgement\
    \ rate roughly TCP-friendly by\n   monitoring the acknowledgement stream for lost\
    \ and marked ACK packets\n   and modifying the ACK Ratio accordingly.  For every\
    \ round-trip time\n   (RTT) containing an ACK congestion event (that is, a lost\
    \ or marked\n   ACK packet), the sender halves the acknowledgement rate by doubling\n\
    \   the ACK Ratio; for every RTT containing no ACK congestion event, the\n   sender\
    \ additively increases the acknowledgement rate through gradual\n   decreases\
    \ in the ACK Ratio.\n   The goal of this document is to explore a similar congestion\
    \ control\n   mechanism for acknowledgement traffic for TCP.  The assumption is\n\
    \   that in some environments with congestion on the reverse path,\n   reducing\
    \ the sending rate for ACK traffic traversing the congested\n   path can help\
    \ to reduce the congestion itself.  For those\n   environments where the reverse\
    \ path is congested but where TCP ACK\n   traffic does not appreciably contribute\
    \ to that aggregate congestion,\n   the goal is for TCP's ACK congestion control\
    \ to have a minimal\n   negative effect on the performance of the TCP connection.\n\
    \   Adding acknowledgement congestion control as an option in TCP would\n   require\
    \ the following:\n   * An agreement from the TCP hosts on the use of ACK congestion\n\
    \     control.  For the mechanism specified in this document, the TCP\n     hosts\
    \ would use a new TCP option, the ACK Congestion Control\n     Permitted option.\n\
    \   * A mechanism for the TCP sender to detect lost and ECN-marked pure\n    \
    \ acknowledgement packets.\n   * A mechanism for adjusting the ACK Ratio.  The\
    \ TCP sender would\n     adjust the ACK Ratio as specified in Section 6.1.2 of\
    \ [RFC4341].\n   * A method for the TCP sender to inform the TCP receiver of a\
    \ new\n     value for the ACK Ratio.  For the mechanism specified in this\n  \
    \   document, the TCP sender would use a new TCP option, the ACK Ratio\n     option.\n"
- title: 2.  Conventions and Terminology
  contents:
  - "2.  Conventions and Terminology\n   MSS refers to the Maximum Segment Size.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\"\
    \ in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   This section gives an overview of acknowledgement congestion\
    \ control\n   for TCP.\n        ---------------------------------------------------------------\n\
    \        TCP Host A                Router                     TCP Host B\n   \
    \     (data sender)                                   (data receiver)\n      \
    \  ----------                ------                     ----------\n         \
    \                                <--- SYN with AckCC Permitted.\n        SYN/ACK\
    \ with AckCC Permitted --->\n                                  . . .\n       \
    \ Data packets --->\n                                                    <---\
    \ one ACK packet\n                                             for every two data\
    \ packets\n                                  . . .\n        Sender detects a lost\
    \ ACK packet.\n        Data packet with an ACK Ratio option of 4 --->\n      \
    \                                              <--- one ACK packet\n         \
    \                           for at most every four data packets\n            \
    \                      . . .\n        Sender detects a period with no lost ACK\
    \ packets.\n        Data packet with an ACK Ratio option of 3 --->\n         \
    \                                           <--- one ACK packet\n            \
    \                       for at most every three data packets\n        ---------------------------------------------------------------\n\
    \               Figure 1: Acknowledgement Congestion Control,\n     Host B as\
    \ the Connection Initiator, for a Connection without ECN\n   Figure 1 gives an\
    \ example of acknowledgement congestion control\n   (AckCC) with TCP Host B as\
    \ the connection initiator.\n   During connection initiation, TCP host B sends\
    \ an ACK Congestion\n   Control Permitted option on its SYN or SYN/ACK packet.\
    \  This allows\n   TCP host A (now called the sender) to send instructions to\
    \ TCP host B\n   (now called the receiver) about the ACK Ratio to use in responding\
    \ to\n   data packets.\n   Also during connection initiation, TCP host A sends\
    \ an ACK Congestion\n   Control Permitted option on its SYN or SYN/ACK packet.\
    \  In\n   combination with TCP host B's sending of an ACK Congestion Control\n\
    \   Permitted option, and with the negotiation of ECN-Capability as\n   specified\
    \ in [RFC3168], this would allow TCP host B to send its ACK\n   packets as ECN-Capable.\n\
    \   The TCP receiver starts with an ACK Ratio of two, generally sending\n   one\
    \ ACK packet for every two data packets received.\n   The TCP sender detects a\
    \ lost or ECN-marked ACK packet from the TCP\n   receiver and sends an ACK Ratio\
    \ option of four to the receiver.  The\n   TCP receiver changes to an ACK Ratio\
    \ of four, sending one ACK packet\n   for at most four data packets.  The TCP\
    \ sender uses Appropriate Byte\n   Counting and rate-based pacing in responding\
    \ to these ACK packets.\n   The TCP sender detects a period with no lost ACK packets\
    \ and sends an\n   ACK Ratio option of three to the TCP receiver.  The TCP receiver\n\
    \   changes back to an ACK Ratio of three, sending one ACK packet for at\n   most\
    \ three data packets.\n"
- title: 4.  Acknowledgement Congestion Control
  contents:
  - "4.  Acknowledgement Congestion Control\n   The goal of the mechanism proposed\
    \ in this document is to control\n   pure ACK traffic on the path from the TCP\
    \ data receiver to the TCP\n   data sender.  Note that the approach outlined here\
    \ is an end-to-end\n   one (as is the approach followed by DCCP's CCID 2 [RFC4341]),\
    \ but it\n   may also take advantage of explicit congestion information from the\n\
    \   network, conveyed by ECN [RFC3168], if available.  The ECN\n   specification\
    \ ([RFC3168], see Section 6.1.4) prohibits a TCP receiver\n   from setting the\
    \ ECT(0) or ECT(1) codepoints in IP packets carrying\n   pure ACKs, but *only*\
    \ as long as the receiver does *not* implement\n   any form of ACK congestion\
    \ control.  Unlike some of the related work\n   cited in the appendix, in this\
    \ document we are proposing an end-to-\n   end ACK congestion control mechanism\
    \ that controls congestion on the\n   reverse path (the path followed by the ACK\
    \ traffic) by detecting and\n   responding to either marked or dropped ACK packets.\n"
- title: 4.1.  The ACK Congestion Control Permitted Option
  contents:
  - "4.1.  The ACK Congestion Control Permitted Option\n   The TCP end-points would\
    \ negotiate the use of ACK congestion control\n   (AckCC) with a TCP option: the\
    \ ACK Congestion Control Permitted\n   option.  The option number would be allocated\
    \ by IANA.\n   The ACK Congestion Control Permitted option can only be sent on\n\
    \   packets that have the SYN bit set.  If TCP end-point A receives an\n   ACK\
    \ Congestion Control Permitted option from TCP end-point B, then\n   the TCP end-points\
    \ may use ACK congestion control on the pure\n   acknowledgements sent from B\
    \ to A.  This means that TCP end-point A\n   may send ACK Ratio values to TCP\
    \ end-point B, for TCP end-point B to\n   use on pure acknowledgement packets.\
    \  Equivalently, if TCP end-point\n   A *does not* receive an ACK Congestion Control\
    \ Permitted option from\n   TCP end-point B, then TCP end-point A knows not to\
    \ waste its time\n   detecting lost ACK packets and adjusting and sending the\
    \ ACK Ratio\n   values.\n   If TCP end-point B receives an ACK Congestion Control\
    \ Permitted\n   option from TCP end-point A, then the TCP end-points may use ACK\n\
    \   congestion control on the pure acknowledgements sent from A to B.\n   If TCP\
    \ end-point B receives an ACK Congestion Control Permitted\n   option from TCP\
    \ end-point A and also sent an ACK Congestion Control\n   Permitted option to\
    \ TCP end-point A, and if ECN-Capability has been\n   negotiated, then TCP end-point\
    \ B can send its pure ACK packets as\n   ECN-Capable.\n          TCP ACK Congestion\
    \ Control Permitted Option:\n          Kind: TBD1\n          +-----------+-----------+\n\
    \          | Kind=TBD1 |  Length=2 |\n          +-----------+-----------+\n  \
    \ When ACK congestion control is used, the default initial ACK Ratio is\n   two,\
    \ with the receiver acknowledging at least every other data\n   packet.\n"
- title: 4.2.  The TCP ACK Ratio Option
  contents:
  - "4.2.  The TCP ACK Ratio Option\n   The sender uses an ACK Ratio TCP option to\
    \ communicate the ACK Ratio\n   value from the sender to the receiver.\n     \
    \     TCP ACK Ratio Option:\n          Kind: TBD2\n          +-----------+-----------+-----------+\n\
    \          | Kind=TBD2 |  Length=3 | ACK Ratio |\n          +-----------+-----------+-----------+\n\
    \   The ACK Ratio option is only sent on data packets.  Because TCP uses\n   reliable\
    \ delivery for data packets, the TCP sender can tell if the\n   TCP receiver has\
    \ received an ACK Ratio option.\n"
- title: '4.3.  The Receiver: Implementing the ACK Ratio'
  contents:
  - "4.3.  The Receiver: Implementing the ACK Ratio\n   With an ACK Ratio of R, the\
    \ receiver should send one pure ACK for\n   every R newly received data packets\
    \ unless the delayed ACK timer\n   expires first.  A receiver could simply maintain\
    \ a counter that\n   increments by one for each new data packet received, and\
    \ send an ACK\n   packet when the counter reaches R.  The receiver would reset\
    \ the\n   counter to zero whenever a pure or piggybacked ACK is sent.\n   If the\
    \ receiver has buffer limitations, the receiver might have to\n   acknowledge\
    \ K packets, for some K less than the current ACK Ratio R.\n   In this case, the\
    \ sender could observe from the acknowledgements that\n   the receiver is acknowledging\
    \ less than R packets.\n   It is possible for there to be lost or marked ACK packets\
    \ when there\n   haven't yet been any lost or marked data packets.  Thus, the\
    \ sender\n   could increase the ACK Ratio R even during the initial slow-start.\n\
    \   [RFC5681] recommends that the receiver SHOULD acknowledge out-of-\n   order\
    \ data packets immediately, sending an immediate duplicate ACK\n   when it receives\
    \ a data segment above a gap in the sequence space,\n   and sending an immediate\
    \ ACK when it receives a data segment that\n   fills in all or part of a gap in\
    \ the sequence space.\n   When ACK congestion control is being used and the ACK\
    \ Ratio is at\n   most two, the TCP receiver acknowledges each out-of-order data\
    \ packet\n   immediately.  For an ACK Ratio greater than two, Section 4.6\n  \
    \ specifies in detail the receiver's behavior for sending ACKs for out-\n   of-order\
    \ data packets.\n"
- title: '4.4.  The Sender: Determining Lost or Marked ACK Packets'
  contents:
  - "4.4.  The Sender: Determining Lost or Marked ACK Packets\n   The TCP data sender\
    \ uses its knowledge of the ACK Ratio in use by the\n   receiver to infer when\
    \ an ACK packet has been lost.\n   Because the TCP sender knows the ACK Ratio\
    \ R in use by the receiver,\n   the TCP sender knows that in the absence of dropped\
    \ or reordered\n   acknowledgement packets, each new acknowledgement received\
    \ will\n   acknowledge at most R additional data packets.  Thus, if the sender\n\
    \   receives an acknowledgement acknowledging more than R data packets,\n   and\
    \ does not receive a subsequent acknowledgement acknowledging a\n   strict subset\
    \ (with a smaller cumulative acknowledgement, or with the\n   same cumulative\
    \ acknowledgement but a strict subset of data\n   acknowledged in selective acknowledgement\
    \ (SACK) blocks), then the\n   sender can infer that an ACK packet has been dropped.\
    \  The use of\n   SACK options in ACK packets would help the sender in detecting\
    \ lost\n   ACK packets.\n   Similarly, the TCP sender knows that in the absence\
    \ of dropped or\n   delayed data packets from the sender, and in the absence of\
    \ delayed\n   acknowledgements due to a timer expiring at the receiver, each new\n\
    \   pure acknowledgement received will acknowledge at least R additional\n   data\
    \ packets.  In terms of ACK congestion control, the TCP sender\n   does not have\
    \ to take any actions when it receives an acknowledgement\n   acknowledging less\
    \ than R additional packets.\n   Out-of-order data packets:\n      If the ACK\
    \ Ratio is at most two, then the TCP receiver sends a\n      duplicate acknowledgement\
    \ (DupACK) for every out-of-order data\n      packet.  In this case, the TCP sender\
    \ should be able to detect\n      lost DupACK packets by counting the number of\
    \ DupACKs that arrive\n      between the beginning of the loss event and the arrival\
    \ of the\n      first full or partial ACK, and comparing this number with the\n\
    \      number of DupACKs that should have arrived (based on the number of\n  \
    \    packets being ACKed by the full or partial ACK).  Simulations\n      and/or\
    \ experiments will be needed to determine whether, in\n      practice, it works\
    \ for the TCP sender to assess lost ACK packets\n      during loss events, for\
    \ an ACK Ratio of at most two.\n      If the ACK Ratio is greater than two, the\
    \ TCP receiver does not\n      send a DupACK for every out-of-order data packet,\
    \ as specified in\n      Section 4.6.  For simplicity, the TCP sender does not\
    \ attempt to\n      detect lost ACK packets during loss events involving forward-path\n\
    \      data traffic.  That is, as soon as the sender infers a packet loss\n  \
    \    for a forward-path data packet, it stops detection of ACK loss on\n     \
    \ the reverse path.  The sender waits until a new cumulative\n      acknowledgement\
    \ is received that covers the retransmitted data,\n      and then restarts detection\
    \ of ACK loss for reverse-path traffic.\n   Detecting lost ACK packets after changes\
    \ in the ACK Ratio:\n      In detecting lost ACK packets, the sender relies on\
    \ its knowledge\n      of the ACK Ratio used by the receiver.  But when the sender\
    \ makes\n      a change in the ACK Ratio and then receives ACK packets, how does\n\
    \      the sender know whether the receiver was using the new or the old\n   \
    \   ACK Ratio when it sent those ACK packets?  As specified in the\n      next\
    \ section, the sender can make only one of two possible changes\n      to the\
    \ ACK Ratio within one round-trip time.  The sender can\n      decrease the ACK\
    \ Ratio by one, from R to R-1, or the sender can\n      double the ACK Ratio,\
    \ increasing it from R to 2R.  But, in\n      detecting lost ACK packets after\
    \ an increase in the ACK Ratio, the\n      sender needs to know whether the receiver\
    \ was using the old ACK\n      Ratio R or the new ACK Ratio 2R.\n      The sender\
    \ sends ACK Ratio options only on data packets, and these\n      data packets\
    \ are acknowledged by the receiver.  One possibility\n      would be for the sender\
    \ to save the sequence number of the last\n      data packet that contained an\
    \ ACK Ratio option and to remember\n      whether that ACK Ratio option was for\
    \ an increase or a decrease in\n      the ACK Ratio.  Then, if the sender receives\
    \ an ACK packet\n      acknowledging the saved sequence number, the sender knows\
    \ that the\n      receiver has begun using the new ACK Ratio.\n      It *might*\
    \ be sufficient for the sender just to save the\n      information of whether\
    \ the last change in the ACK Ratio was an\n      increase or a decrease, without\
    \ saving the sequence number\n      associated with the last ACK Ratio option.\
    \  In this way, if the\n      sender recently increased the ACK Ratio from R to\
    \ 2R, the sender\n      could be more cautious in detecting lost ACK packets.\
    \  Another\n      possibility would be that, after sending an ACK Ratio option,\
    \ the\n      sender waits until that data has been ACKed, with the new ACK\n \
    \     Ratio in use by the receiver, before resuming the detection of\n      lost\
    \ ACK packets.  However, we do not explore either of these\n      approaches in\
    \ more detail in this document.\n"
- title: '4.4.1.  The Sender: Detecting Lost ACK Packets after a Congestion Event'
  contents:
  - "4.4.1.  The Sender: Detecting Lost ACK Packets after a Congestion Event\n   After\
    \ a sender's retransmit timeout or fast retransmit, the sender\n   might retransmit\
    \ a number of data packets dropped from a single\n   window of data.  In particular,\
    \ during a loss recovery period (from\n   the sender's detection of the congestion\
    \ event up until the sender\n   receives an acknowledgement of all data packets\
    \ transmitted before\n   the loss recovery period began), retransmitted data packets\
    \ can fill\n   holes in the receiver's sequence space, resulting in irregular\
    \ jumps\n   in the cumulative acknowledgement field in ACK packets from the\n\
    \   receiver.  These jumps in the cumulative acknowledgement field make\n   it\
    \ difficult for the sender to reliably detect lost ACK packets\n   during a loss\
    \ recovery period.\n   Because of this uneven progress of the cumulative acknowledgement\n\
    \   field during a loss recovery period, the sender should not attempt to\n  \
    \ detect lost ACK packets during a loss recovery period.  As a\n   consequence,\
    \ the sender will not increase the ACK Ratio in response\n   to ACK packets that\
    \ are lost during a loss recovery period.\n"
- title: '4.5.  The Sender: Adjusting the ACK Ratio'
  contents:
  - "4.5.  The Sender: Adjusting the ACK Ratio\n   The TCP sender will adjust the\
    \ ACK Ratio as specified in Section\n   6.1.2 of [RFC4341], as follows.\n   The\
    \ ACK Ratio always meets the following three constraints.\n   (1) The ACK Ratio\
    \ is an integer.\n   (2) The minimum ACK sending rate: The ACK Ratio does not\
    \ exceed\n       max(2, cwnd/(K*MSS)), rounded up, for K=2.  As a result, the\
    \ TCP\n       receiver generally sends at least two ACKs in response to a\n  \
    \     window of at least four full-sized segments.\n   (3) If the congestion window\
    \ is at least as large as four full-sized\n       segments, then the ACK Ratio\
    \ is at least two.  In other words, an\n       ACK Ratio of one is only allowed\
    \ when the congestion window is at\n       most three full-sized segments.\n \
    \  The sender changes the ACK Ratio within those constraints as follows.\n   For\
    \ each congestion window of data with lost or marked ACK packets,\n   the ACK\
    \ Ratio R is doubled; for each cwnd/(MSS*(R^2 - R)) consecutive\n   congestion\
    \ windows of data with no lost or marked ACK packets, the\n   ACK Ratio is decreased\
    \ by 1.  (See Appendix A of RFC 4341 for the\n   derivation.  Note that Appendix\
    \ A of RFC 4341 assumes a congestion\n   window W in packets, while we use cwnd\
    \ in bytes.)  As stated in the\n   previous section, when the ACK Ratio is greater\
    \ than two, the sender\n   does not attempt to detect lost ACK packets during\
    \ loss events for\n   forward-path traffic.\n   For a constant congestion window,\
    \ these modifications to the ACK\n   Ratio give an ACK sending rate that is roughly\
    \ TCP-friendly.  Of\n   course, cwnd usually varies over time; the dynamics will\
    \ be rather\n   complex, but roughly TCP friendly.  We recommend that the sender\n\
    \   determines when to decrease the ACK Ratio by one (i.e., by\n   calculating\
    \ the number of in-order data packets to count) right after\n   an ACK loss event.\n\
    \   The frequency of ACK Ratio negotiations:\n      The sender need not keep the\
    \ ACK Ratio completely up to date.  For\n      instance, it may rate-limit ACK\
    \ Ratio renegotiations to once every\n      four or five round-trip times, or\
    \ to once every second or two.\n      The sender should not attempt to change\
    \ the ACK Ratio more than\n      once per round-trip time.  In particular, before\
    \ sending a packet\n      with a new value for the ACK Ratio, the sender should\
    \ verify that\n      the receiver has acknowledged a data packet containing an\
    \ ACK\n      Ratio option for the old value of the ACK Ratio.  Additionally,\n\
    \      the sender may enforce a minimum ACK Ratio of two, or it may set\n    \
    \  the ACK Ratio to one for half-connections with persistent\n      congestion\
    \ windows of 1 or 2 packets.\n   The minimum ACK sending rate:\n      From rule\
    \ (2) above, the TCP receiver always sends at least K=2\n      ACKs for a window\
    \ of data, even in the face of very heavy\n      congestion on the reverse path.\
    \  We would note, however, that if\n      congestion is sufficiently heavy, all\
    \ the ACK packets are dropped,\n      and then the sender falls back on an exponentially\
    \ backed-off\n      timeout.  Thus, if congestion is sufficiently heavy on the\
    \ reverse\n      path, then the sender reduces its sending rate on the forward\n\
    \      path, which reduces the rate on the reverse path as well.  One\n      possibility\
    \ would be to use a higher minimum ACK-sending rate,\n      adding a constant\
    \ upper bound on the ACK Ratio.  That is, if the\n      ACK Ratio also had an\
    \ upper bound of J, independent of cwnd, then\n      the receiver would always\
    \ send at least one ACK for every J data\n      packets, regardless of the level\
    \ of congestion on the reverse\n      path.\n"
- title: '4.5.1.  Possible Addition:  Decreasing the ACK Ratio after a Congestion'
  contents:
  - "4.5.1.  Possible Addition:  Decreasing the ACK Ratio after a Congestion\n   \
    \     Window Decrease\n   After a lost or ECN-marked data packet, the data sender\
    \ halves the\n   congestion window, thus halving the sending rate for data packets,\n\
    \   while making no change to the ACK Ratio R.  As a result, after a\n   congestion\
    \ event involving a data packet, the sending rate for ACK\n   packets on the return\
    \ path is also halved.  If the congestion event\n   was a lost or ECN-marked data\
    \ packet, this was due to congestion on\n   the forward path, which may have been\
    \ unrelated to conditions on the\n   reverse path.  Thus, it has been suggested\
    \ that the sender could\n   decrease the ACK Ratio R when it halves the congestion\
    \ window;  in\n   this case, the halving of the sending rate for data packets\
    \ would not\n   be accompanied by a halving of the sending rate for ACK packets\
    \ also.\n   However, there are a few cases where a congestion event involving\n\
    \   data packets could in fact have been caused by congestion on the\n   reverse\
    \ path.  As one example, the path could include a congested\n   multiaccess link\
    \ where forward-path and reverse-path traffic can\n   interfere with each other.\
    \  Thus, in this case it might be desirable\n   if a congestion event resulted\
    \ in a reduction in the sending rate of\n   ACK packets as well as of data packets.\n\
    \   As a second example of a congestion event involving congestion of the\n  \
    \ reverse path, a congestion event could be caused not by a dropped or\n   ECN-marked\
    \ data packet, but by a window of dropped ACK packets,\n   resulting in a retransmit\
    \ timeout at the data sender.  After a\n   retransmit timeout, the TCP sender\
    \ will slow-start, reducing the\n   congestion window to the initial window and\
    \ setting the ACK Ratio to\n   at most two.\n   Until further investigation, the\
    \ sender will not decrease the ACK\n   Ratio as a result of a congestion event\
    \ involving a data packet.\n"
- title: '4.6.  The Receiver: Sending ACKs for Out-of-Order Data Segments'
  contents:
  - "4.6.  The Receiver: Sending ACKs for Out-of-Order Data Segments\n   RFC 5681\
    \ says that \"a TCP receiver SHOULD send an immediate duplicate\n   ACK when an\
    \ out-of-order segment arrives\".  After three duplicate\n   ACKs are received,\
    \ the TCP sender infers a packet loss and implements\n   fast retransmit and fast\
    \ recovery, retransmitting the missing packet.\n   When the ACK Ratio is at most\
    \ two, the TCP receiver should still send\n   an immediate duplicate ACK when\
    \ an out-of-order segment arrives.\n   In general, when the ACK Ratio is greater\
    \ than two, the TCP receiver\n   still should send an immediate duplicate ACK\
    \ for each of the first\n   three out-of-order segments that arrive in a reordering\
    \ event.  (We\n   define a reordering event at the receiver as beginning when\
    \ an out-\n   of-order segment arrives, and ending when the receiver holds no\
    \ more\n   out-of-order segments.)  However, when the ACK Ratio is greater than\n\
    \   two, after the first three duplicate ACKs have been sent, the TCP\n   receiver\
    \ should perform ACK congestion control on the remaining ACKs\n   to be sent during\
    \ the current reordering event.  That is, after the\n   first three duplicate\
    \ ACKs have been sent, the TCP receiver should\n   return to sending an ACK for\
    \ every R segments, instead of sending an\n   ACK for every out-of-order segment\
    \ in that reordering event.  (We\n   note that the fast recovery procedure of\
    \ the TCP sender might have to\n   be modified to take this change into account.)\
    \  In addition, a\n   receiver must not withhold an ACK for more than 500 ms.\n\
    \   We note that in an environment with systematic reordering in the data\n  \
    \ path (e.g., every set of K data packets arrives in inverted order,\n   for some\
    \ value of K), the guideline above could result in the\n   receiver sending an\
    \ ACK for every data packet, regardless of the ACK\n   Ratio.  In such an environment\
    \ with persistent reordering, the\n   receiver may decide not to send an immediate\
    \ duplicate ACK for each\n   of the first three out-of-order segments that arrive\
    \ in a reordering\n   event.  We leave the investigation of mechanisms for effective\
    \ ACK\n   congestion control in environments with systematic reordering for\n\
    \   future work.\n"
- title: '4.7.  The Sender: Response to ACK Packets'
  contents:
  - "4.7.  The Sender: Response to ACK Packets\n   The use of a large ACK Ratio can\
    \ generate line-rate data bursts at a\n   TCP sender.  When the ACK Ratio is greater\
    \ than two, the TCP sender\n   should use some form of burst mitigation or rate-based\
    \ pacing for\n   sending data packets in response to a single acknowledgement.\
    \  The\n   use of rate-based pacing will be limited by the timer granularity at\n\
    \   the TCP sender.\n   We note that the interaction of ACK congestion control\
    \ and burst\n   mitigation schemes needs further study.\n   Byte counting at the\
    \ sender:\n      In addition to the impact of a large ACK Ratio on the burstiness\n\
    \      of the TCP sender's sending rate, a large ACK Ratio can also\n      affect\
    \ the data-sending rate by slowing down the increase of the\n      congestion\
    \ window cwnd.  As specified in RFC 5681, in slow-start\n      the TCP sender\
    \ increases cwnd by one full-sized segment for each\n      new ACK received (in\
    \ this context, a \"new ACK\" is an ACK that\n      acknowledges new data).  RFC\
    \ 5681 also specifies that in\n      congestion avoidance, the TCP sender increases\
    \ cwnd by roughly\n      1/cwnd full-sized segments for each ACK received, resulting\
    \ in an\n      increase in cwnd of roughly one full-sized segment per round-trip\n\
    \      time.  In this case, the use of a large ACK Ratio would slow down\n   \
    \   the increase of the sender's congestion window.\n      RFC 5681 notes that\
    \ during congestion avoidance, it is also\n      acceptable to count the number\
    \ of bytes acknowledged by new ACKs\n      and to increase cwnd based on the number\
    \ of bytes acknowledged,\n      rather than on the number of new ACKs received.\
    \  Thus, the sender\n      should use this form of byte counting with acknowledgement\n\
    \      congestion control, so that the acknowledgement congestion control\n  \
    \    doesn't slow down the window increases for the data traffic sent\n      by\
    \ the sender.  Because rate-based pacing should be used with\n      acknowledgement\
    \ congestion control, as recommended earlier in this\n      section, the TCP sender\
    \ may increase the congestion window by more\n      than two MSS for each ACK.\n\
    \      We note that for Appropriate Byte Counting (ABC) as specified in\n    \
    \  [RFC3465], during slow-start the sender is allowed to increase the\n      congestion\
    \ window by at most two MSS for each ACK.  It has not yet\n      been determined\
    \ whether, with acknowledgement congestion control,\n      the TCP sender could\
    \ use ABC during slow-start.  If ABC is used\n      with acknowledgement congestion\
    \ control, then when the TCP sender\n      is in slow-start and the ACK Ratio\
    \ is greater than two, the TCP\n      sender may increase the congestion window\
    \ by more that two MSS in\n      response to a single ACK.  Section 4.2 of [LL07]\
    \ explores some of\n      the issues with the use of ABC for TCP connections with\
    \ a fixed\n      ACK Ratio greater than two.\n   Inferring lost data packets:\n\
    \      As cited earlier, RFC 5681 infers that a packet has been lost\n      after\
    \ it receives three duplicate acknowledgements.  Because ACK\n      congestion\
    \ control is only used when there is congestion on the\n      reverse path, after\
    \ a packet loss, one or more of the three\n      duplicate ACKs sent by the receiver\
    \ could be lost on the reverse\n      path, and the receiver might wait until\
    \ it has received R more\n      out-of-order segments before sending the next\
    \ duplicate ACK.  All\n      this could slow down fast recovery and fast retransmit\
    \ quite a\n      bit.  The use of SACK can help reduce the potential delay in\n\
    \      detecting a lost packet.  With SACK, a TCP sender can use the\n      information\
    \ in the SACK option to detect when the receiver has\n      received at least\
    \ three out-of-order data packets and to initiate\n      fast retransmit and fast\
    \ recovery in this case, even if the TCP\n      sender has not yet received three\
    \ duplicate ACKs.\n"
- title: '4.8.  Possible Addition: Receiver Bounds on the ACK Ratio'
  contents:
  - "4.8.  Possible Addition: Receiver Bounds on the ACK Ratio\n   It has been suggested\
    \ that in some environments, the TCP receiver\n   might want to set lower bounds\
    \ on the ACK Ratio.  For example, the\n   TCP receiver might know from configuration\
    \ or from past experience\n   that the bandwidth on the return path is limited,\
    \ and might want to\n   set a lower bound (greater than two) on the ACK Ratio\
    \ R.  If this is\n   included, this would require a TCP option from the TCP receiver\
    \ to\n   the TCP sender, reporting the lower bound on the ACK Ratio.  Care\n \
    \  would also be needed so that the lower bound on the ACK Ratio was\n   only\
    \ in effect when the TCP sender's congestion window was\n   sufficiently high.\n"
- title: 5.  Possible Complications
  contents:
  - '5.  Possible Complications

    '
- title: '5.1.  Possible Complication: Delayed Acknowledgements'
  contents:
  - "5.1.  Possible Complication: Delayed Acknowledgements\n   The receiver could\
    \ send a delayed acknowledgement acknowledging a\n   single packet, even when\
    \ the ACK Ratio is two or more.\n   This should not cause false positives (when\
    \ the TCP sender infers a\n   loss when no loss happened).  The TCP sender only\
    \ infers that a pure\n   ACK packet has been lost when no data packet has been\
    \ lost and an ACK\n   packet arrives acknowledging more than R new packets.\n\
    \   Delayed acknowledgements could, however, cause false negatives, with\n   the\
    \ TCP sender unable to detect the loss of an ACK packet sent as a\n   delayed\
    \ acknowledgement.  False negatives seem acceptable; this would\n   result in\
    \ approximate ACK congestion control, which would be better\n   than no ACK congestion\
    \ control at all.  In particular, when this form\n   of false negative occurs,\
    \ it is because the receiver is sending\n   acknowledgements at such a low rate\
    \ that it is sending delayed\n   acknowledgements, rather than acknowledging at\
    \ least R data packets\n   with each acknowledgement.\n"
- title: '5.2.  Possible Complication: Duplicate Acknowledgements'
  contents:
  - "5.2.  Possible Complication: Duplicate Acknowledgements\n   As discussed in Section\
    \ 4.3, RFC 5681 states that \"a TCP receiver\n   SHOULD send an immediate duplicate\
    \ ACK when an out-of-order segment\n   arrives\", and that \"a TCP receiver SHOULD\
    \ send an immediate ACK when\n   the incoming segment fills in all or part of\
    \ a gap in the sequence\n   space\" [RFC5681].  When ACK congestion control is\
    \ used, the TCP\n   receiver instead uses the guidelines from Section 4.6 to govern\
    \ the\n   sending of duplicate ACKs.  More work would be useful to evaluate the\n\
    \   advantages and disadvantages of this approach in terms of the\n   potential\
    \ delay in triggering fast retransmit, and to explore\n   alternate possibilities.\n"
- title: '5.3.  Possible Complication: Two-Way Traffic'
  contents:
  - "5.3.  Possible Complication: Two-Way Traffic\n   In a TCP connection with two-way\
    \ traffic, the receiver could send\n   some pure ACK packets and some acknowledgements\
    \ piggybacked on data\n   packets.  The receiver would still follow the rule of\
    \ only sending a\n   pure ACK packet when there is a need for a delayed ACK or\
    \ when there\n   are R new data packets to acknowledge.\n   In a connection with\
    \ two-way traffic, the TCP sender would not always\n   be able to infer when a\
    \ pure ACK packet had been lost.  For example,\n   the receiver could send a pure\
    \ ACK packet acknowledging packet K and,\n   soon afterwards, the receiver could\
    \ send a newly generated data\n   packet for the reverse-path flow also acknowledging\
    \ packet K.  The\n   pure ACK packet could be dropped in the network, and the\
    \ sender would\n   not be able to detect this drop.\n   Fortunately, there are\
    \ limitations to the potential problems caused\n   by undetected ACK losses in\
    \ two-way traffic.  The sender will only\n   fail to detect the loss of a pure\
    \ ACK packet if the ACK packet was\n   followed by a data packet with the same\
    \ acknowledgement number.  If\n   the reverse-path traffic for the connection\
    \ is dominated by data\n   traffic, then the congestion control for the data traffic\
    \ is more\n   important than the congestion control for the pure ACK traffic.\
    \  If\n   the reverse-path traffic is dominated by pure ACK traffic, then the\n\
    \   sender would detect any losses of pure ACK packets followed by other\n   pure\
    \ ACK packets, and this would include most of the pure ACK packets\n   for that\
    \ connection.  Thus, the sender's failure to detect the loss\n   of a pure ACK\
    \ packet followed by a data packet with the same\n   acknowledgement number would\
    \ not disable acknowledgement congestion\n   control for a TCP connection with\
    \ two-way traffic.\n"
- title: '5.4.  Possible Complication: Reordering of ACK Packets'
  contents:
  - "5.4.  Possible Complication: Reordering of ACK Packets\n   It is possible for\
    \ ACK packets to be reordered on the reverse path.\n   The TCP sender could either\
    \ use a parallel mechanism to the DupACK\n   threshold to infer when an ACK packet\
    \ has been lost, as with TCP, or,\n   more robustly, the TCP sender could wait\
    \ an entire round-trip time\n   before inferring that an ACK packet has been lost\
    \ [RFC4653].\n"
- title: '5.5.  Possible Complication: Abrupt Changes in the ACK Path'
  contents:
  - "5.5.  Possible Complication: Abrupt Changes in the ACK Path\n   What happens\
    \ when there are abrupt changes in the reverse path, such\n   as from vertical\
    \ handovers?  Can there be any problems that would be\n   worse than those experienced\
    \ by a TCP connection that is not using\n   ACK congestion control?\n"
- title: '5.6.  Possible Complication: Corruption'
  contents:
  - "5.6.  Possible Complication: Corruption\n   As with data packets, it is possible\
    \ for ACK packets to be dropped in\n   the network due to corruption rather than\
    \ congestion.  The current\n   assumption of ACK congestion control is that all\
    \ losses should be\n   taken as indications of congestion.  If there is ever some\
    \ better\n   mechanism for identifying and responding to corrupted TCP data\n\
    \   packets, the same solution hopefully would apply to corrupted ACK\n   packets\
    \ as well.\n   One problem with the interaction of packet corruption and congestion\n\
    \   control, for both data and ACK packets, is that it is not always\n   obvious\
    \ when the packet corruption is related to congestion and when\n   the packet\
    \ corruption is independent of the level of congestion on\n   the corrupting link.\
    \  In environments where packet corruption exists\n   and is independent of the\
    \ level of congestion on the corrupting link,\n   applying ACK congestion control\
    \ would only make the connection more\n   sensitive to ACK packet corruption by\
    \ reducing the number of ACKs\n   that are sent.\n"
- title: '5.7.  Possible Complication: ACKs that Don''t Contribute to Congestion'
  contents:
  - "5.7.  Possible Complication: ACKs that Don't Contribute to Congestion\n   It\
    \ is possible for the ACK packets in a TCP connection to traverse a\n   congested\
    \ path where ACK packets are dropped but where the ACK\n   packets themselves\
    \ don't significantly contribute to the congestion\n   on the path.  In scenarios\
    \ where ACK packets are dropped but where\n   ACK traffic doesn't make a significant\
    \ contribution of the congestion\n   on the path, the use of ACK congestion control\
    \ would not contribute\n   to reducing the aggregate congestion on the path. \
    \ In this case, one\n   goal is to minimize the negative impact of ACK congestion\
    \ control on\n   the overall performance of the TCP connection.\n       J TCP\
    \ conns.            link L ->           J TCP conns.\n         data ->      |---|\
    \                 |---|   <- ACKs\n      <-------------> |   |               \
    \  |   | <------------->\n                      |   | <-------------> |   |\n\
    \      <-------------> |   |                 |   | <------------->\n       K TCP\
    \ conns.   |---|                 |---|  K TCP conns.\n        ACKs ->        \
    \       <- link L1            <- data\n     Figure 2. A Scenario with J Forward\
    \ and K Reverse TCP Connections\n   To explore the relative contribution of ACK\
    \ traffic on congestion, it\n   is useful to consider a simple scenario with a\
    \ congested\n   unidirectional link L carrying data traffic from J TCP connections\n\
    \   (the forward TCP connections) and ACK traffic from K TCP connections\n   (the\
    \ reverse TCP connections).  We assume that all TCP connections\n   have the same\
    \ round-trip time R and the same data packet size S of\n   1500 bytes.  We further\
    \ assume that all of the forward TCP\n   connections have the same data packet\
    \ drop rate p and the same\n   congestion window W, and that all of the reverse\
    \ TCP connections have\n   the same congestion window W1 and the same ACK packet\
    \ drop rate p1.\n   (The packet drop rate for data packets is defined as the fraction\
    \ of\n   arriving data packets that are dropped; similarly, the packet drop\n\
    \   rate for ACK packets is the fraction of arriving ACK packets that are\n  \
    \ dropped.)  The J TCP connections each use a bandwidth on link L of\n   1500*W/R\
    \ bytes per second, and the K TCP connections, without ACK\n   congestion control,\
    \ each use a bandwidth on link L of 40*(W1/2)/R\n   bytes per second.  This gives\
    \ a ratio of 75*(J/K)*(W/W1) for TCP data\n   bandwidth to TCP ACK bandwidth on\
    \ link L.  The ratio J/K is the ratio\n   between the number of forward and reverse\
    \ TCP connections on link L,\n   and could have a wide range of values (e.g.,\
    \ large for an access link\n   from a web server, and small for an access link\
    \ to a web server).\n   For this scenario, the ratio W/W1 is largely a function\
    \ of the\n   different levels of congestion on the forward and reverse paths.\n\
    \   To explore the possibilities, we will consider some of the range of\n   congestion\
    \ control mechanisms for the congested link.  First, we\n   consider scenarios\
    \ where the limitation on the congested path is in\n   the link bandwidth in bytes\
    \ per second.\n   Cases (1), (2), (3), (5), and (7) below represent the best scenarios\n\
    \   for ACK congestion control, where the fraction of packet drops for\n   TCP\
    \ ACK packets roughly matches the TCP ACK packets' contribution to\n   congestion.\
    \  (In several of these cases this is, at best, a rough\n   match because the\
    \ data packets are a factor in the bandwidth and in\n   the queue limitations,\
    \ while the TCP ACK packets are only a factor in\n   the queue limitations.) \
    \ Cases (4) and (8) below represent\n   problematic scenarios where the fraction\
    \ of packet drops for TCP ACK\n   packets is much higher than the TCP ACK packets'\
    \ contribution to\n   congestion (in terms of taking space in a congested queue,\
    \ using\n   scarce CPU cycles at the congested router, or using scarce\n   bandwidth).\
    \  Case (6) below represents scenarios where ACK congestion\n   control would\
    \ not be effective because it would not be invoked.  In\n   the scenarios in case\
    \ (6), the fraction of packet drops for TCP ACK\n   packets would be much smaller\
    \ than the TCP ACK packets' contribution\n   to congestion.\n   (1) The Drop-Tail\
    \ queue for link L is measured in packets.  In this\n       case, the congested\
    \ queue can accommodate N packets (regardless\n       of packet size), there is\
    \ a limitation of both bandwidth in bytes\n       per second and also in queue\
    \ space in packets, and large data\n       packets and small TCP ACK packets should\
    \ see similar packet drop\n       rates.  Although TCP ACK packets most likely\
    \ aren't a major\n       factor in the bandwidth limitation, they can be a significant\n\
    \       contribution to the limitation of queue space.  So, while the\n      \
    \ packet drop rate for ACK packets could be high in times of\n       congestion,\
    \ the ACK packets are contributing to that congestion\n       somewhat by using\
    \ scarce buffer space.\n   (2) The Drop-Tail queue is measured in bytes.  In this\
    \ case, the\n       congested queue can accommodate M bytes of packets, and TCP\
    \ ACK\n       packets don't make a significant contribution to either the\n  \
    \     bandwidth limitation or to the limitation in queue space.  It is\n     \
    \  also the case that, in this scenario, even if there is heavy\n       congestion,\
    \ the packet drop rate for TCP ACK packets should be\n       small (because small\
    \ ACK packets can often find space on the\n       congested queue when large data\
    \ packets can't find space).  In\n       this case, ACK congestion control should\
    \ not present any\n       problems; the TCP ACK packets aren't contributing significantly\n\
    \       to congestion and aren't experiencing significant packet drop\n      \
    \ rates.\n   (3) The RED queue is in packet mode and is measured in packets. \
    \ This\n       is similar to case (1) above.  Because the queue is measured in\n\
    \       packets, small TCP ACK packets contribute to the limitation in\n     \
    \  queue space but not to the limitation in link bandwidth.  Because\n       the\
    \ queue is in packet mode, large data packets and small TCP ACK\n       packets\
    \ should see similar packet drop rates.\n   (4) The RED queue is in packet mode\
    \ but is measured in bytes.\n       Because the queue is measured in bytes, small\
    \ TCP ACK packets\n       don't contribute significantly to either the limitation\
    \ in queue\n       space or to the limitation in link bandwidth.  Because the\
    \ queue\n       is in packet mode, large data packets and small TCP ACK packets\n\
    \       should see similar packet drop rates.  If it existed, this case\n    \
    \   would be problematic, because the TCP ACK packets would not be\n       contributing\
    \ significantly to the congestion but they would see a\n       similar packet\
    \ drop rate as the large data packets that are\n       contributing to congestion.\n\
    \   (5) The RED queue is in byte mode and is measured in bytes.  This is\n   \
    \    similar to case (2) above.  Because the queue is measured in\n       bytes,\
    \ small TCP ACK packets don't contribute significantly to\n       either the limitation\
    \ in queue space or to the limitation in link\n       bandwidth.  At the same\
    \ time, because the queue is in byte mode,\n       small TCP ACK packets see much\
    \ smaller packet drop rates than\n       those of large data packets.\n   (6)\
    \ The RED queue is in byte mode but is measured in packets.\n       Because the\
    \ queue is measured in packets, small TCP ACK packets\n       contribute to the\
    \ limitation in queue space but not to the\n       limitation in link bandwidth.\
    \  Because the queue is in byte mode,\n       small TCP ACK packets see much smaller\
    \ packet drop rates than\n       those of large data packets.  If this case existed,\
    \ TCP ACK\n       packets would contribute somewhat to congestion but would see\
    \ a\n       much smaller packet drop rate than that of large data packets.\n \
    \  Next, we consider scenarios where the limitation on the congested\n   link\
    \ is in CPU cycles at the router in packets per second, not in\n   bandwidth in\
    \ bytes per second.\n   (7) The CPU load imposed by TCP ACK packets is similar\
    \ to the load\n       imposed by other packets (e.g., TCP data packets).  ACK\n\
    \       congestion control would be useful in this scenario, particularly\n  \
    \     if TCP ACK packets saw the same packet drop rates as TCP data\n       packets.\n\
    \   (8) The CPU load imposed by TCP ACK packets is much less than the\n      \
    \ load imposed by other packets (e.g., TCP data packets).  If TCP\n       ACK\
    \ packets saw a smaller packet drop rate than TCP data packets,\n       then the\
    \ TCP ACK packet drop rate would roughly match the TCP ACK\n       packets' contribution\
    \ to congestion, and this would be good.  If\n       TCP ACK packets saw the same\
    \ packet drop rate as TCP data\n       packets, this case would be problematic,\
    \ because the TCP ACK\n       packets would not be contributing significantly\
    \ to the\n       congestion, but they would see a similar packet drop rate as\
    \ the\n       large data packets that are contributing to congestion.\n"
- title: '5.8.  Possible Complication: TCP Implementations that Skip ACK Packets'
  contents:
  - "5.8.  Possible Complication: TCP Implementations that Skip ACK Packets\n   It\
    \ has been reported in IETF meetings that current TCP\n   implementations do not\
    \ always acknowledge at least every other data\n   packet, as required by the\
    \ TCP specifications.  In particular, it has\n   been reported that if a TCP receiver\
    \ receives many data packets in a\n   burst, before it is able to send an acknowledgement,\
    \ then it might\n   send a single acknowledgement for the burst of packets.  We\
    \ note that\n   such a behavior would cause complications for a TCP connection\
    \ that\n   used ACK congestion control, as the sender would not be able to\n \
    \  determine when an ACK packet had been dropped in the network or when\n   the\
    \ packet had been skipped by the receiver because it was processing\n   a burst\
    \ of data packet arrivals.\n   One possibility for addressing this problem would\
    \ be for TCP\n   receivers using ACK congestion control to be required to send\
    \ an\n   acknowledgement for each R packets, for ACK Ratio R.  In this case,\n\
    \   if the receiver received a large burst of data packets back-to-back,\n   the\
    \ receiver would be required to send a responding burst of ACK\n   packets, one\
    \ for each set of R data packets.\n   A second possibility for addressing this\
    \ problem would be to define a\n   TCP option or flag that the TCP receiver could\
    \ use when sending an\n   ACK packet to inform the sender that the TCP receiver\
    \ `skipped' some\n   ACK packets, so that the sender should not infer ACK loss\
    \ if some\n   previous ACK packets seem to be missing.\n   Future work will explore\
    \ the costs and benefits of these two\n   approaches.\n"
- title: '5.9.  Possible Complication: Router or Middlebox-Based ACK Mechanisms'
  contents:
  - "5.9.  Possible Complication: Router or Middlebox-Based ACK Mechanisms\n   One\
    \ possible complication would be the interaction of ACK congestion\n   control\
    \ with router-based or middlebox-based ACK mechanisms, such as\n   ACK filtering\
    \ along the reverse path ([BPK97], [WWCM99], [BA03],\n   [KLS07]).  We are not\
    \ aware of the deployment of ACK filtering in the\n   Internet, but any testing\
    \ of ACK congestion control would have to\n   look for interactions with any middlebox-based\
    \ mechanisms regarding\n   ACK packets.  In particular, we would consider interactions\
    \ of ACK\n   congestion control with the possible deployment of ACK filtering\
    \ on\n   satellite links, cable modems, or the like.\n"
- title: '5.10.  Possible Complication: Data-Limited Senders'
  contents:
  - "5.10.  Possible Complication: Data-Limited Senders\n   The mechanism for adjusting\
    \ the ACK Ratio is designed with the goal\n   of having the TCP receiver send\
    \ at least two ACKs in response to each\n   window of at least four full-sized\
    \ data packets.  However, with ACK\n   congestion control in combination with\
    \ a data-limited sender, it is\n   possible for the sender to send at least four\
    \ full-sized data packets\n   in a round-trip time, with the receiver sending\
    \ less than two ACKs in\n   response.\n   As an example, consider a connection\
    \ where the sender's congestion\n   window W is greater than four and the ACK\
    \ Ratio R is at its maximum\n   value of W/2.  If the sender becomes data-limited\
    \ and sends less than\n   W data packets in a round-trip time, then the receiver\
    \ can send less\n   than two ACK packets in response.  This behavior makes the\
    \ connection\n   more sensitive to the loss of an occasional ACK packet.\n   Of\
    \ course, there is still the safety mechanism of the receiver\n   sending an ACK\
    \ packet when the delayed ACK timer expires.  However,\n   more work would be\
    \ useful to explore the conflicting goals of a\n   congestion-controlled ACK flow\
    \ and a timely ACK response to the\n   sender for the specific case of a connection\
    \ with a data-limited\n   sender and a congested ACK path.\n"
- title: 5.11.  Other Issues
  contents:
  - "5.11.  Other Issues\n   Are there any problems caused by the combination of two-way\
    \ traffic\n   and reordering?  Or other issues that have not yet been addressed?\n"
- title: 6.  Evaluating ACK Congestion Control
  contents:
  - "6.  Evaluating ACK Congestion Control\n   Evaluating ACK congestion control will\
    \ have two components: (1)\n   evaluating the effects of ACK congestion control\
    \ on an individual TCP\n   connection, and (2) evaluating the effects of ACK congestion\
    \ control\n   on aggregate traffic (including the effects of ACK congestion control\n\
    \   on the aggregate congestion of the path).\n   The first part, evaluating ACK\
    \ congestion control on the performance\n   of an individual TCP connection, will\
    \ have to examine those scenarios\n   where ACK congestion control might help\
    \ the performance of a TCP\n   connection and those scenarios where the use of\
    \ ACK congestion\n   control might cause problems.\n   The second part, evaluating\
    \ the effects of ACK congestion control on\n   aggregate traffic, should consider\
    \ scenarios where the use of ACK\n   congestion control helps all of the connections\
    \ sharing a path by\n   reducing the aggregate congestion on the path.  This part\
    \ should also\n   see if there are scenarios where ACK congestion control causes\n\
    \   problems by increasing the burstiness of aggregate traffic or by\n   otherwise\
    \ changing traffic dynamics.\n"
- title: 6.1.  Contention in Wireless Links or in Non-Switched Ethernet
  contents:
  - "6.1.  Contention in Wireless Links or in Non-Switched Ethernet\n   One possible\
    \ benefit of ACK congestion control is that it could\n   reduce contention in\
    \ wireless links, shared Ethernet, or other\n   environments with contention between\
    \ forward-path and reverse-path\n   traffic ([AJ03], [KIA07]).  At the same time,\
    \ contention on the\n   shared medium won't necessarily result in dropped ACK\
    \ packets, and\n   therefore wouldn't necessarily be detected by ACK congestion\
    \ control.\n"
- title: 6.2.  Keep-Alive and Other Special ACK Packets
  contents:
  - "6.2.  Keep-Alive and Other Special ACK Packets\n   Some TCP hosts send keep-alive\
    \ packets when no data or ACK packets\n   have been received over a long period\
    \ of time [KEEP-ALIVE].  This\n   keep-alive mechanism is not addressed in TCP\
    \ specifications.\n   However, such keep-alive packets, if used, should not interact\
    \ with\n   ACK congestion control one way or another.  For ACK congestion\n  \
    \ control, the ACK Ratio is set small enough to allow the receiver to\n   generally\
    \ send at least two ACKs for a window of data.  In addition,\n   the receiver\
    \ uses a delayed ACK timer with the ACK Ratio, always\n   sending an acknowledgement\
    \ if the delayed ACK timer expires.  Thus,\n   ACK congestion control will never\
    \ cause the receiver to delay\n   indefinitely in sending an acknowledgement for\
    \ a received data\n   packet.\n   Some TCP implementations send pure ACK packets\
    \ as window probes, to\n   solicit an ACK packet from the other end with current\
    \ window\n   information.  Such ACK packets will generally be orthogonal to the\n\
    \   ACK congestion control specified in this document.\n   TCP receivers also\
    \ can send pure ACK packets as window update packets\n   announcing a new value\
    \ for the receive window, even when the\n   acknowledgement number and SACK options\
    \ in the ACK packet are not\n   new.  The receiver may send window update packets\
    \ even if the ACK\n   congestion control mechanism would say that it is not time\
    \ yet to\n   send a pure ACK.  The sender will not necessarily be able to detect\n\
    \   the loss of a window update ACK packet.\n"
- title: 7.  Measurements of ACK Traffic and Congestion
  contents:
  - "7.  Measurements of ACK Traffic and Congestion\n   There are a number of studies\
    \ about the traffic composition on\n   various links in the Internet, reporting\
    \ the fraction of bandwidth\n   used by TCP data and by TCP ACK traffic [Studies].\n\
    \   Are there any studies that show the relative packet drop rates for\n   TCP\
    \ data and ACK traffic, for particular links or for particular TCP\n   connections?\n\
    \   Are there any studies of congested links that show the fraction of\n   traffic\
    \ on the congested link, or in the congested queue, that\n   consist of TCP ACK\
    \ packets?\n"
- title: 8.  Acknowledgement Congestion Control in DCCP's CCID 2
  contents:
  - "8.  Acknowledgement Congestion Control in DCCP's CCID 2\n   In the transport\
    \ protocol DCCP [RFC4340], the congestion control\n   mechanism for the CCID 2\
    \ profile is based on that of TCP.  This\n   section briefly discusses some of\
    \ the issues that have been addressed\n   in the acknowledgement congestion control\
    \ already standardized in\n   CCID 2 [RFC4341].\n   Rate-based pacing:\n     \
    \ For CCID 2, RFC 4341 says that \"senders MAY use a form of rate-\n      based\
    \ pacing when sending multiple data packets liberated by a\n      single ACK packet,\
    \ rather than sending all liberated data packets\n      in a single burst.\" \
    \ However, rate-based pacing is not required in\n      CCID 2.\n   Increasing\
    \ the congestion window:\n      For CCID 2, RFC 4341 says that \"when cwnd < ssthresh,\
    \ meaning that\n      the sender is in slow-start, the congestion window is increased\
    \ by\n      one packet for every two newly acknowledged data packets with ACK\n\
    \      Vector State 0 (not ECN-marked), up to a maximum of ACK Ratio/2\n     \
    \ packets per acknowledgement.  This is a modified form of\n      Appropriate\
    \ Byte Counting [RFC3465] that is consistent with TCP's\n      current standard\
    \ (which does not include byte counting), but\n      allows CCID 2 to increase\
    \ as aggressively as TCP when CCID 2's ACK\n      Ratio is greater than the default\
    \ value of two.  When cwnd >=\n      ssthresh, the congestion window is increased\
    \ by one packet for\n      every window of data acknowledged without lost or marked\
    \ packets.\"\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   What are the sender's incentives to cheat on\
    \ ACK congestion control?\n   What are the receiver's incentives to cheat?  What\
    \ are the avenues\n   open for cheating?\n   As long as ACK congestion control\
    \ is optional, neither host can be\n   forced to use ACK congestion control if\
    \ it doesn't want to.  So ACK\n   congestion control will only be used if the\
    \ sender or receiver have\n   some chance of receiving some benefit.\n   As long\
    \ as ACK congestion control is optional for TCP, there is\n   little incentive\
    \ for the TCP end nodes to cheat on non-ECN-based ACK\n   congestion control.\
    \  There is nothing now that requires TCP hosts to\n   use congestion control\
    \ in response to dropped ACK packets.\n   What avenues for cheating are opened\
    \ by the use of ECN-Capable ACK\n   packets?  If the end nodes can use ECN to\
    \ have ACK packets marked\n   rather than dropped, and if the end nodes can then\
    \ avoid the use of\n   ACK congestion control that goes along with the use of\
    \ ECN on ACK\n   packets, then the end nodes could have an incentive to cheat.\n\
    \   Senders could cheat by not instructing the receiver to use a higher\n   ACK\
    \ Ratio; the receiver would have a hard time detecting this\n   cheating.  Receivers\
    \ could cheat by not using the ACK Ratio they were\n   instructed to use, but\
    \ senders could easily detect this cheating.\n   However, receivers could also\
    \ cheat by not using ACK congestion\n   control and still sending ACK packets\
    \ as ECN-Capable, so ACK\n   congestion control is not a necessary component for\
    \ receivers to\n   cheat about sending ECN-Capable ACK packets.  One question\
    \ would be\n   whether there is any way for receivers to cheat about sending ECN-\n\
    \   Capable ACK packets and not using appropriate ACK congestion control\n   without\
    \ this cheating being easily detected by the sender.\n   What about the ability\
    \ of routers or middleboxes to detect TCP\n   receivers that cheat by inappropriately\
    \ sending ACK packets as ECN-\n   Capable?  The router will only know if the receiver\
    \ is authorized to\n   send ACK packets as ECN-Capable if the router can see traffic\
    \ on both\n   the forward and reverse paths and monitored both the SYN and SYN/ACK\n\
    \   packets (and was able to read the TCP options in the packet headers).\n  \
    \ If ACK congestion control has been negotiated, the router will only\n   know\
    \ if ACK congestion control is being used correctly by the\n   receiver if it\
    \ can monitor the ACK Ratio options sent from the sender\n   to the receiver.\
    \  If ACK congestion control is being used, the router\n   will not necessarily\
    \ be able to tell if ACK congestion control is\n   being used correctly by the\
    \ sender, because drops of ACK packets\n   might be occurring after the ACK packets\
    \ have left the router.\n   However, if the router sees the ACK Ratio options\
    \ sent from the\n   sender, the router will be able to tell if the sender is correctly\n\
    \   accounting for those ACK packets that are dropped or ECN-marked on\n   the\
    \ path from the receiver to the router.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   No IANA action is needed at this time.  If this\
    \ document was advanced\n   as Experimental or Proposed Standard, then IANA would\
    \ allocate the\n   option numbers for the two TCP options, the ACK Congestion\
    \ Control\n   Permitted option, and the ACK Ratio option.  In such a case, the\n\
    \   following two lines would be added to the TCP Option Numbers registry\n  \
    \ (maintained by IANA -- http://www.iana.org):\n        Kind   Length   Meaning\
    \                             Reference\n        ----   ------   ---------------------------------\
    \   -----------\n        TBD1       2    ACK Congestion Control Permitted    [RFCXXXX]\n\
    \        TBD2       3    ACK Ratio                           [RFCXXXX]\n   In\
    \ the absence of TCP option numbers allocated by IANA, experimenters\n   may use\
    \ the TCP Option Numbers set aside for Experimentation in RFC\n   4727 [RFC4727].\
    \  As stressed in Section 1 of RFC 3692 [RFC3692], the\n   TCP Option Numbers\
    \ in the experimental range are intended for\n   experimentation and testing and\
    \ not for wide or general deployments;\n   these option numbers could be in use\
    \ by other experimentors for other\n   purposes.\n"
- title: 11.  Conclusions
  contents:
  - "11.  Conclusions\n   This document specifies a congestion control mechanism for\n\
    \   acknowledgement (ACKs) traffic for TCP and discusses the possible\n   complications.\
    \  We are deferring a recommendation on the use of this\n   mechanism for TCP\
    \ until it has been evaluated more fully.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   Many thanks for feedback from Mark Allman, Armando\
    \ Caro, Alfred\n   Hoenes, Ilpoo Jarvinen, Sara Landstrom, Anantha Ramaiah, and\
    \ Michael\n   Welzl, and for contributed text from Michael Welzl.\n"
- title: Appendix A.  Related Work
  contents:
  - "Appendix A.  Related Work\n   There exist several papers dealing with controlling\
    \ congestion in the\n   reverse path of a TCP connection, especially in the context\
    \ of\n   networks with bandwidth asymmetry.  Some of these proposals require\n\
    \   explicit support from routers or middleboxes, whereas others are\n   \"pure\"\
    \ end-to-end schemes.\n   RFC 3449 [RFC3449] discusses TCP performance problems\
    \ that arise in\n   TCP connections over asymmetric paths.  Section 3 of RFC 3449\n\
    \   describes in detail how congestion on the ACK path can affect overall\n  \
    \ TCP performance.  RFC 3449 also outlines a number of proposed\n   mitigations,\
    \ including ACK congestion control.  The experimental ACK\n   congestion control\
    \ mechanism discussed in that RFC relies on ECN,\n   with the TCP sender detecting\
    \ congestion on the ACK path from ECN-\n   marked packets.  RFC 3449 also discusses\
    \ two receiver-based\n   mechanisms, the Window Prediction Mechanism (WPM) [CLP98]\
    \ and\n   Acknowledgement based on Cwnd Estimation (ACE) [MJW00], for using a\n\
    \   dynamic ACK Ratio.  RFC 3449 also considers link- and network-layer\n   techniques\
    \ that address congestion on the upstream path.  These\n   include header compression\
    \ as well as bandwidth management techniques\n   for the upstream link, including\
    \ ACK filtering and ACK\n   reconstruction.\n   RFC 3135 [RFC3135], \"Performance\
    \ Enhancing Proxies Intended to\n   Mitigate Link-Related Degradations\", surveys\
    \ a range of Performance\n   Enhancing Proxies used to improve TCP behavior, including\
    \ proxies for\n   ACK filtering and reconstruction.  RFC 2760 [RFC2760], \"Ongoing\
    \ TCP\n   Research Related to Satellites\", discusses both ACK congestion\n  \
    \ control and ACK filtering and reconstruction, with detailed\n   descriptions\
    \ of the mechanisms proposed by Balakrishnan, et al. in\n   [BPK97].\n   Landstrom,\
    \ et al. in [LL07] explore a mechanism where the receiver\n   sends only four\
    \ acknowledgements per window of data, along with the\n   sender using a form\
    \ of Appropriate Byte Counting.  In addition, the\n   receiver reverts to a lower\
    \ acknowledgement frequency after a\n   timeout, to avoid unnecessary retransmit\
    \ timeouts.  One conclusion of\n   the paper is that pacing at the sender introduces\
    \ an additional delay\n   and might not be necessary.  A key result of the paper\
    \ is that, with\n   the use of some form of byte counting at the sender, it is\
    \ possible\n   for TCP to use a lower acknowledgement frequency than that of delayed\n\
    \   acknowledgements.\n"
- title: A.1.  ECN-Only Mechanisms
  contents:
  - "A.1.  ECN-Only Mechanisms\n   Balakrishnan, et al. in [BPK97] describe the use\
    \ of ECN to detect\n   congestion in the return path, in order to reduce the sending\
    \ rate of\n   ACKs.  The use of a RED queue in the reverse path allows for marking\n\
    \   of ACK packets.  The sender echoes back ECN congestion marks to the\n   receiver.\
    \  The receiver keeps an ACK Ratio d (called the \"delayed-ACK\n   factor\"),\
    \ specifying the number of data segments that have to be\n   received before the\
    \ receiver sends a new ACK.  The ACK Ratio d is\n   managed using multiplicative-increase,\
    \ additive-decrease; upon\n   reception of a congestion mark, the receiver doubles\
    \ the value of d\n   (hence dividing the ACK sending rate by two).  The ACK Ratio\n\
    \   decreases linearly for each RTT in which no ECN-marked ACKs are\n   received.\
    \  Multiple congestion marks received in an RTT are treated\n   as a single congestion\
    \ event, i.e., d can be doubled at most once per\n   RTT.  The TCP timestamp option\
    \ is used to keep track of the RTT\n   values.\n"
- title: A.2.  Receiver-Only Mechanisms
  contents:
  - "A.2.  Receiver-Only Mechanisms\n   In [MJW00], Tam Ming-Chit, et al. propose\
    \ a receiver-based method for\n   calculating an \"appropriate\" number of ACKs\
    \ per congestion window\n   (cwnd) of data, in order to alleviate congestion on\
    \ the reverse path.\n   The sender's cwnd is estimated at the receiver by counting\
    \ the number\n   of received packets per RTT (which also has to be estimated by\
    \ the\n   receiver).  From this estimate, a simple algorithm is used to compute\n\
    \   the number of ACKs to be sent per cwnd.  The algorithm enforces a\n   lower\
    \ bound on the number of ACKs per cwnd, aiming at minimizing the\n   probability\
    \ of timeout at the sender due to ACK loss.  Similarly, the\n   ACK Ratio is upper-bounded\
    \ so as to avoid excessive ACK delay.\n   Blandford, et al. [BGG+07] propose an\
    \ end-to-end, receiver-oriented\n   scheme called \"smartacking\".  The algorithm\
    \ is based upon the\n   receiver's monitoring the inter-segment arrival time for\
    \ data packets\n   and adapting the ACK sending rate in response.  When the bottleneck\n\
    \   link is underutilized, ACKs are sent frequently (up to one ACK per\n   received\
    \ segment) to promote fast growth of the congestion window.\n   On the other hand,\
    \ when the bottleneck is close to full utilization,\n   the algorithm tries to\
    \ reduce control traffic overhead and slow\n   congestion window growth by generating\
    \ ACKs at the minimum rate\n   needed to keep the data pipe full.\n   Reducing\
    \ the number of ACKs (or, equivalently, increasing the amount\n   of bytes acknowledged\
    \ by each ACK) can increase the burstiness of the\n   TCP sender.  Hence, any\
    \ mechanism as those cited above should be\n   coupled with a burst mitigation\
    \ technique, such as rate-based pacing,\n   that paces the sending of data segments\
    \ ([AB05], [ASA00], [BPK97]).\n"
- title: A.3.  Middlebox-Based Mechanisms
  contents:
  - "A.3.  Middlebox-Based Mechanisms\n   ACK filtering (AF) [BPK97] from Balakrishnan,\
    \ et al. is a router-\n   based technique that tries to reduce the number of ACKs\
    \ sent over the\n   congested return link.  With AF, an arriving ACK may replace\n\
    \   preceding, older ACKs at the bottleneck queue.  An aggressive\n   replacement\
    \ policy might guarantee that at most one ACK per\n   connection is waiting in\
    \ the queue, alleviating congestion.  However,\n   as in other proposals, care\
    \ must be taken to avoid sender timeouts in\n   case the (too few) ACKs resulting\
    \ from the filtering get lost.  The\n   idea of filtering ACKs has been extended\
    \ in [YMH03] to deal with SACK\n   information.\n   Aweya, et al. [AOM02] present\
    \ a middlebox-based approach for\n   mitigating data packet bursts and for controlling\
    \ the uplink ACK\n   congestion.  The main idea is to perform pacing on ACK segments\
    \ on an\n   edge device close to the sender, so as to control the ACK arrival\n\
    \   rate at the sender.\n"
- title: Appendix B.  Design Considerations
  contents:
  - 'Appendix B.  Design Considerations

    '
- title: B.1.  The TCP ACK Ratio Option or an AckNow Bit in Data Packets?
  contents:
  - "B.1.  The TCP ACK Ratio Option or an AckNow Bit in Data Packets?\n   In the ACK\
    \ congestion control mechanism specified in this document,\n   the sender uses\
    \ the TCP ACK Ratio option to tell the receiver the ACK\n   Ratio to use.  An\
    \ alternate approach to the TCP ACK Ratio option\n   could be for the sender to\
    \ use an AckNow bit in the TCP header of\n   data packets, telling the receiver\
    \ to acknowledge this data packet.\n   In the discussion below, we call these\
    \ two approaches the TCP ACK\n   Ratio option approach and the AckNow approach.\n\
    \   An advantage of an AckNow approach is that it would require less\n   state\
    \ from the receiver; the receiver would not need to maintain a\n   variable for\
    \ the current ACK Ratio and would not need to keep track\n   of the number of\
    \ data packets un-ACKed to date.\n   However, a disadvantage of the AckNow approach\
    \ is that the sender\n   does not know when packets will be reordered, delayed,\
    \ or dropped on\n   the path to the receiver.  In particular, the sender does\
    \ not have\n   control over whether a data packet with the AckNow bit set is\n\
    \   reordered, delayed, or dropped in the network.  For this reason, we\n   have\
    \ chosen the approach of the sender determining the ACK Ratio that\n   should\
    \ be used and sending the ACK Ratio to the receiver, rather than\n   the sender\
    \ telling the receiver exactly which data packets to\n   acknowledge.\n   An additional\
    \ disadvantage of the AckNow approach is that it would\n   add complications and\
    \ difficulties for the default cases of the\n   receiver using an ACK Ratio of\
    \ one or two, as is done in the absence\n   of ACK congestion control.\n   For\
    \ these reasons, we have specified that the sender determines the\n   ACK Ratio\
    \ to use and tells the receiver, rather than the sender\n   setting an AckNow\
    \ bit in the TCP Header of selected data packets.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC2119]    Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC3465]    Allman, M., \"TCP Congestion Control with Appropriate\n     \
    \           Byte Counting (ABC)\", RFC 3465, February 2003.\n   [RFC3692]    Narten,\
    \ T., \"Assigning Experimental and Testing Numbers\n                Considered\
    \ Useful\", BCP 82, RFC 3692, January 2004.\n   [RFC4340]    Kohler, E., Handley,\
    \ M., and S. Floyd, \"Datagram\n                Congestion Control Protocol (DCCP)\"\
    , RFC 4340, March\n                2006.\n   [RFC4341]    Floyd, S. and E. Kohler,\
    \ \"Profile for Datagram\n                Congestion Control Protocol (DCCP) Congestion\
    \ Control ID\n                2: TCP-like Congestion Control\", RFC 4341, March\
    \ 2006.\n   [RFC4727]    Fenner, B., \"Experimental Values In IPv4, IPv6, ICMPv4,\n\
    \                ICMPv6, UDP, and TCP Headers\", RFC 4727, November 2006.\n  \
    \ [RFC5681]    Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n    \
    \            Control\", RFC 5681, September 2009.\n"
- title: Informative References
  contents:
  - "Informative References\n   [RFC2760]    Allman, M., Ed., Dawkins, S., Glover,\
    \ D., Griner, J.,\n                Tran, D., Henderson, T., Heidemann, J., Touch,\
    \ J.,\n                Kruse, H., Ostermann, S., Scott, K., and J. Semke,\n  \
    \              \"Ongoing TCP Research Related to Satellites\", RFC 2760,\n   \
    \             February 2000.\n   [RFC3135]    Border, J., Kojo, M., Griner, J.,\
    \ Montenegro, G., and Z.\n                Shelby, \"Performance Enhancing Proxies\
    \ Intended to\n                Mitigate Link-Related Degradations\", RFC 3135,\
    \ June\n                2001.\n   [RFC3168]    Ramakrishnan, K., Floyd, S., and\
    \ D. Black, \"The Addition\n                of Explicit Congestion Notification\
    \ (ECN) to IP\", RFC\n                3168, September 2001.\n   [RFC3449]    Balakrishnan,\
    \ H., Padmanabhan, V., Fairhurst, G., and M.\n                Sooriyabandara,\
    \ \"TCP Performance Implications of Network\n                Path Asymmetry\"\
    , BCP 69, RFC 3449, December 2002.\n   [RFC4653]    Bhandarkar, S., Reddy, A.,\
    \ Allman, M., and E. Blanton,\n                \"Improving the Robustness of TCP\
    \ to Non-Congestion\n                Events\", RFC 4653, August 2006.\n   [ASA00]\
    \      Aggarwal, A., Savage, S., and T. Anderson,\n                \"Understanding\
    \ the Performance of TCP Pacing\", INFOCOM\n                (3), pp. 1157-1165,\
    \ 2000.\n   [AB05]       Allman, M., and E. Blanton, \"Notes on Burst Mitigation\n\
    \                for Transport Protocols\", SIGCOMM, Computer\n              \
    \  Communications Review, 35(2):5360, 2005.\n   [AJ03]       Altman, E., and T.\
    \ Jimenez, \"Novel Delayed ACK\n                Techniques for Improving TCP Performance\
    \ in Multihop\n                Wireless Networks\", Proc. of the Personal Wireless\n\
    \                Communications, 2003.\n   [AOM02]      Aweya, J., Ouellette,\
    \ M., and D. Y. Montuno, \"A Self-\n                regulating TCP Acknowledgement\
    \ (ack) Pacing Scheme\",\n                International Journal of Network Management,\n\
    \                12(3):145163, 2002.\n   [BA03]       Barakat, C., and E. Altman,\
    \ \"On ACK Filtering on a Slow\n                Reverse Channel\", International\
    \ Journal of Satellite\n                Communications and Networking, V.21 N.3,\
    \ 2003.\n   [BPK97]      Balakrishnan, H., Padmanabhan, V., and Katz, R., \"The\n\
    \                Effects of Asymmetry on TCP Performance\", Third ACM/IEEE\n \
    \               Mobicom Conference, September 1997.\n   [BGG+07]     Blandford,\
    \ D.K., Goldman, S.A., Gorinsky, S., Zhou, Y.,\n                and D.R. Dooly,\
    \ \"Smartacking: Improving TCP Performance\n                from the Receiving\
    \ End\", Journal of Internet\n                Engineering, 1(1), 2007.\n   [CLP98]\
    \      Calveras, A., Linares, J., and J. Paradells, \"Window\n               \
    \ Prediction Mechanism for Improving TCP in Wireless\n                Asymmetric\
    \ Links\". Proc. IEEE Global Communications\n                Conference (GLOBECOM),\
    \ Sydney Australia, pp. 533-538,\n                November 1998.\n   [KIA07] \
    \     Keceli, F., Inan, I., and E. Ayanoglu, \"TCP ACK\n                Congestion\
    \ Control and Filtering for Fairness Provision\n                in the Uplink\
    \ of IEEE 802.11 Infrastructure Basic\n                Service Set\", Proc. IEEE\
    \ ICC 2007, June 2007.\n   [KEEP-ALIVE] Busatto, F., \"TCP Keepalive HOWTO\",\
    \ May 2007,\n                http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/index.html.\n\
    \   [KLS07]      Kim, H., Lee, H., and S. Shin, \"On the Cross-Layer\n       \
    \         Impact of TCP ACK Thinning on IEEE 802.11 Wireless MAC\n           \
    \     Dynamics\", IEICE Transactions on Communications, 2007.\n   [LL07]     \
    \  Landstrom, S., and Larzon, L.A., \"Reducing the TCP\n                Acknowledgement\
    \ Frequency\", SIGCOMM, Computer\n                Communications Review, July\
    \ 2007.\n   [MJW00]      Ming-Chit, I.T., Jinsong, D., and W. Wang, \"Improving\n\
    \                TCP Performance Over Asymmetric Networks\", SIGCOMM,\n      \
    \          Computer Communications Review (CCR), Vol.30, No.3,\n             \
    \   2000.\n   [Studies]    Floyd, S., \"Measurement Studies of End-to-End Congestion\n\
    \                Control in the Internet\",\n                http://www.icir.org/floyd/ccmeasure.html.\n\
    \   [WWCM99]     Wu, H., Wu, J., Cheng, S., and J. Ma, \"ACK Filtering on\n  \
    \              Bandwidth Asymmetry Networks\", IEEE Communications,\n        \
    \        1999.\n   [YMH03]      Yu, L., Minhua, Y., and Z. Huimin, \"The Improvement\
    \ of\n                TCP Performance in Bandwidth Asymmetric Network\", IEEE\n\
    \                PIMRC, 1:482-486, September 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sally Floyd\n   ICSI Center for Internet Research\n  \
    \ 1947 Center Street, Suite 600\n   Berkeley, CA 94704\n   USA\n   EMail: floyd@icir.org\n\
    \   Andres Arcia\n   Networking, Security & Multimedia (RSM)      Universidad\
    \ de Los Andes\n   TELECOM Bretagne                             Facultad de Ingenieria\n\
    \   Rue de la Chataigneraie, CS 17607            Nucleo La Hechicera\n   35576\
    \ Cesson Sevigne Cedex                   Merida, Merida 5101\n   France      \
    \                                 Venezuela\n   EMail: ae.arcia@telecom-bretagne.eu\
    \          EMail: amoret@ula.ve\n                                            \
    \    URI:  http://www.ula.ve\n   David Ros\n   Networking, Security & Multimedia\
    \ (RSM) Dpt.\n   TELECOM Bretagne\n   Rue de la Chataigneraie, CS 17607\n   35576\
    \ Cesson Sevigne Cedex\n   France\n   EMail: David.Ros@telecom-bretagne.eu\n \
    \  Janardhan R. Iyengar\n   Math and Computer Science\n   Franklin & Marshall\
    \ College\n   P. O. Box 3003\n   Lancaster, PA 17604-3003\n   USA\n   EMail: jiyengar@fandm.edu\n"
