- title: __initial_text__
  contents:
  - '       Requirements for Separation of IP Control and Forwarding

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document introduces the Forwarding and Control Element\n  \
    \ Separation (ForCES) architecture and defines a set of associated\n   terminology.\
    \  This document also defines a set of architectural,\n   modeling, and protocol\
    \ requirements to logically separate the control\n   and data forwarding planes\
    \ of an IP (IPv4, IPv6, etc.) networking\n   device.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Definitions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3.  Architecture. . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Architectural Requirements. . . . . . . . . . . . . . . .\
    \ . .   5\n   5.  FE Model Requirements . . . . . . . . . . . . . . . . . . .\
    \ .   7\n       5.1.  Types of Logical Functions. . . . . . . . . . . . . . .\
    \   8\n       5.2.  Variations of Logical Functions . . . . . . . . . . . .  \
    \ 8\n       5.3.  Ordering of Logical Functions . . . . . . . . . . . . .   8\n\
    \       5.4.  Flexibility . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \     5.5   Minimal Set of Logical Functions. . . . . . . . . . . .   9\n   6.\
    \  ForCES Protocol Requirements. . . . . . . . . . . . . . . . .  10\n   7.  References.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  14\n       7.1.  Normative\
    \ References. . . . . . . . . . . . . . . . . .  14\n       7.2.  Informative\
    \ References. . . . . . . . . . . . . . . . .  15\n   8.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  15\n   9.  Authors' Addresses & Acknowledgments.\
    \ . . . . . . . . . . . .  15\n   10. Editors' Contact Information. . . . . .\
    \ . . . . . . . . . . .  17\n   11. Full Copyright Statement. . . . . . . . .\
    \ . . . . . . . . . .  18\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   An IP network element is composed of numerous logically separate\n\
    \   entities that cooperate to provide a given functionality (such as a\n   routing\
    \ or IP switching) and yet appear as a normal integrated\n   network element to\
    \ external entities.  Two primary types of network\n   element components exist:\
    \ control-plane components and forwarding-\n   plane components.  In general,\
    \ forwarding-plane components are ASIC,\n   network-processor, or general-purpose\
    \ processor-based devices that\n   handle all data path operations.  Conversely,\
    \ control-plane\n   components are typically based on general-purpose processors\
    \ that\n   provide control functionality such as the processing of routing or\n\
    \   signaling protocols.  A standard set of mechanisms for connecting\n   these\
    \ components provides increased scalability and allows the\n   control and forwarding\
    \ planes to evolve independently, thus promoting\n   faster innovation.\n   For\
    \ the purpose of illustration, let us consider the architecture of\n   a router\
    \ to illustrate the concept of separate control and forwarding\n   planes.  The\
    \ architecture of a router is composed of two main parts.\n   These components,\
    \ while inter-related, perform functions that are\n   largely independent of each\
    \ other.  At the bottom is the forwarding\n   path that operates in the data-forwarding\
    \ plane and is responsible\n   for per-packet processing and forwarding.  Above\
    \ the forwarding plane\n   is the network operating system that is responsible\
    \ for operations in\n   the control plane.  In the case of a router or switch,\
    \ the network\n   operating system runs routing, signaling and control protocols\
    \ (e.g.,\n   RIP, OSPF and RSVP) and dictates the forwarding behavior by\n   manipulating\
    \ forwarding tables, per-flow QoS tables and access\n   control lists.  Typically,\
    \ the architecture of these devices combines\n   all of this functionality into\
    \ a single functional whole with respect\n   to external entities.\n"
- title: 2. Definitions
  contents:
  - "2. Definitions\n   Addressable Entity (AE) - A physical device that is directly\n\
    \   addressable given some interconnect technology.  For example, on IP\n   networks,\
    \ it is a device to which we can communicate using an IP\n   address; and on a\
    \ switch fabric, it is a device to which we can\n   communicate using a switch\
    \ fabric port number.\n   Physical Forwarding Element (PFE) - An AE that includes\
    \ hardware used\n   to provide per-packet processing and handling.  This hardware\
    \ may\n   consist of (but is not limited to) network processors, ASIC's, line\n\
    \   cards with multiple chips or stand alone box with general-purpose\n   processors.\n\
    \   Physical Control Element (PCE) - An AE that includes hardware used to\n  \
    \ provide control functionality.  This hardware typically includes a\n   general-purpose\
    \ processor.\n   Forwarding Element (FE) - A logical entity that implements the\
    \ ForCES\n   protocol.  FEs use the underlying hardware to provide per-packet\n\
    \   processing and handling as directed/controlled by a CE via the ForCES\n  \
    \ protocol.  FEs may happen to be a single blade(or PFE), a partition\n   of a\
    \ PFE or multiple PFEs.\n   Control Element (CE) - A logical entity that implements\
    \ the ForCES\n   protocol and uses it to instruct one or more FEs how to process\n\
    \   packets.  CEs handle functionality such as the execution of control\n   and\
    \ signaling protocols.  CEs may consist of PCE partitions or whole\n   PCEs.\n\
    \   Pre-association Phase - The period of time during which a FE Manager\n   (see\
    \ below) and a CE Manager (see below) are determining which FE and\n   CE should\
    \ be part of the same network element.  Any partitioning of\n   PFEs and PCEs\
    \ occurs during this phase.\n   Post-association Phase - The period of time during\
    \ which a FE does\n   know which CE is to control it and vice versa, including\
    \ the time\n   during which the CE and FE are establishing communication with\
    \ one\n   another.\n   ForCES Protocol - While there may be multiple protocols\
    \ used within\n   the overall ForCES architecture, the term \"ForCES protocol\"\
    \ refers\n   only to the ForCES post-association phase protocol (see below).\n\
    \   ForCES Post-Association Phase Protocol - The protocol used for post-\n   association\
    \ phase communication between CEs and FEs.  This protocol\n   does not apply to\
    \ CE-to-CE communication, FE-to-FE communication, or\n   to communication between\
    \ FE and CE managers.  The ForCES protocol is\n   a master-slave protocol in which\
    \ FEs are slaves and CEs are masters.\n   This protocol includes both the management\
    \ of the communication\n   channel (e.g., connection establishment, heartbeats)\
    \ and the control\n   messages themselves.  This protocol could be a single protocol\
    \ or\n   could consist of multiple protocols working together.\n   FE Model -\
    \ A model that describes the logical processing functions of\n   a FE.\n   FE\
    \ Manager - A logical entity that operates in the pre-association\n   phase and\
    \ is responsible for determining to which CE(s) a FE should\n   communicate. \
    \ This process is called CE discovery and may involve the\n   FE manager learning\
    \ the capabilities of available CEs.  A FE manager\n   may use anything from a\
    \ static configuration to a pre-association\n   phase protocol (see below) to\
    \ determine which CE to use.  However,\n   this pre-association phase protocol\
    \ is currently out of scope.  Being\n   a logical entity, a FE manager might be\
    \ physically combined with any\n   of the other logical entities mentioned in\
    \ this section.\n   CE Manager - A logical entity that operates in the pre-association\n\
    \   phase and is responsible for determining to which FE(s) a CE should\n   communicate.\
    \  This process is called FE discovery and may involve the\n   CE manager learning\
    \ the capabilities of available FEs.  A CE manager\n   may use anything from a\
    \ static configuration to a pre-association\n   phase protocol (see below) to\
    \ determine which FE to use.  Again, this\n   pre-association phase protocol is\
    \ currently out of scope.  Being a\n   logical entity, a CE manager might be physically\
    \ combined with any of\n   the other logical entities mentioned in this section.\n\
    \   Pre-association Phase Protocol - A protocol between FE managers and\n   CE\
    \ managers that is used to determine which CEs or FEs to use.  A\n   pre-association\
    \ phase protocol may include a CE and/or FE capability\n   discovery mechanism.\
    \  Note that this capability discovery process is\n   wholly separate from (and\
    \ does not replace) what is used within the\n   ForCES protocol (see Section 6,\
    \ requirement #1).  However, the two\n   capability discovery mechanisms may utilize\
    \ the same FE model (see\n   Section 5).  Pre-association phase protocols are\
    \ not discussed\n   further in this document.\n   ForCES Network Element (NE)\
    \ - An entity composed of one or more CEs\n   and one or more FEs.  To entities\
    \ outside a NE, the NE represents a\n   single point of management.  Similarly,\
    \ a NE usually hides its\n   internal organization from external entities.\n \
    \  ForCES Protocol Element - A FE or CE.\n   High Touch Capability - This term\
    \ will be used to apply to the\n   capabilities found in some forwarders to take\
    \ action on the contents\n   or headers of a packet based on content other than\
    \ what is found in\n   the IP header.  Examples of these capabilities include\
    \ NAT-PT,\n   firewall, and L7 content recognition.\n"
- title: 3. Architecture
  contents:
  - "3. Architecture\n   The chief components of a NE architecture are the CE, the\
    \ FE, and the\n   interconnect protocol.  The CE is responsible for operations\
    \ such as\n   signaling and control protocol processing and the implementation\
    \ of\n   management protocols.  Based on the information acquired through\n  \
    \ control processing, the CE(s) dictates the packet-forwarding behavior\n   of\
    \ the FE(s) via the interconnect protocol.  For example, the CE\n   might control\
    \ a FE by manipulating its forwarding tables, the state\n   of its interfaces,\
    \ or by adding or removing a NAT binding.\n   The FE operates in the forwarding\
    \ plane and is responsible for per-\n   packet processing and handling.  By allowing\
    \ the control and\n   forwarding planes to evolve independently, different types\
    \ of FEs can\n   be developed - some general purpose and others more specialized.\n\
    \   Some functions that FEs could perform include layer 3 forwarding,\n   metering,\
    \ shaping, firewall, NAT, encapsulation (e.g., tunneling),\n   decapsulation,\
    \ encryption, accounting, etc.  Nearly all combinations\n   of these functions\
    \ may be present in practical FEs.\n   Below is a diagram illustrating an example\
    \ NE composed of a CE and\n   two FEs.  Both FEs and CE require minimal configuration\
    \ as part of\n   the pre-configuration process and this may be done by FE Manager\
    \ and\n   CE Manager respectively.  Apart from this, there is no defined role\n\
    \   for FE Manager and CE Manager.  These components are out of scope of\n   the\
    \ architecture and requirements for the ForCES protocol, which only\n   involves\
    \ CEs and FEs.\n         --------------------------------\n         | NE     \
    \                      |\n         |        -------------         |\n        \
    \ |        |    CE     |         |\n         |        -------------         |\n\
    \         |          /        \\          |\n         |         /          \\\
    \         |\n         |        /            \\        |\n         |       /  \
    \            \\       |\n         |  -----------     ----------- |\n         |\
    \  |   FE    |     |    FE   | |\n         |  -----------     ----------- |\n\
    \         |    | | | |         | | | |   |\n         |    | | | |         | |\
    \ | |   |\n         |    | | | |         | | | |   |\n         |    | | | |  \
    \       | | | |   |\n         --------------------------------\n             \
    \ | | | |         | | | |\n              | | | |         | | | |\n"
- title: 4. Architectural Requirements
  contents:
  - "4. Architectural Requirements\n   The following are the architectural requirements:\n\
    \   1) CEs and FEs MUST be able to connect by a variety of interconnect\n   technologies.\
    \  Examples of interconnect technologies used in current\n   architectures include\
    \ Ethernet, bus backplanes, and ATM (cell)\n   fabrics.  FEs MAY be connected\
    \ to each other via a different\n   technology than that used for CE/FE communication.\n\
    \   2) FEs MUST support a minimal set of capabilities necessary for\n   establishing\
    \ network connectivity (e.g., interface discovery, port\n   up/down functions).\
    \  Beyond this minimal set, the ForCES architecture\n   MUST NOT restrict the\
    \ types or numbers of capabilities that FEs may\n   contain.\n   3) Packets MUST\
    \ be able to arrive at the NE by one FE and leave the\n   NE via a different FE.\n\
    \   4) A NE MUST support the appearance of a single functional device.\n   For\
    \ example, in a router, the TTL of the packet should be decremented\n   only once\
    \ as it traverses the NE regardless of how many FEs through\n   which it passes.\
    \  However, external entities (e.g., FE managers and\n   CE managers) MAY have\
    \ direct access to individual ForCES protocol\n   elements for providing information\
    \ to transition them from the pre-\n   association to post-association phase.\n\
    \   5) The architecture MUST provide a way to prevent unauthorized ForCES\n  \
    \ protocol elements from joining a NE.  (For more protocol details,\n   refer\
    \ to section 6 requirement #2)\n   6) A FE MUST be able to asynchronously inform\
    \ the CE of a failure or\n   increase/decrease in available resources or capabilities\
    \ on the FE.\n   Thus, the FE MUST support error monitoring and reporting. (Since\n\
    \   there is not a strict 1-to-1 mapping between FEs and PFEs, it is\n   possible\
    \ for the relationship between a FE and its physical resources\n   to change over\
    \ time).  For example, the number of physical ports or\n   the amount of memory\
    \ allocated to a FE may vary over time. The CE\n   needs to be informed of such\
    \ changes so that it can control the FE in\n   an accurate way.\n   7) The architecture\
    \ MUST support mechanisms for CE redundancy or CE\n   failover.  This includes\
    \ the ability for CEs and FEs to determine\n   when there is a loss of association\
    \ between them, ability to restore\n   association and efficient state (re)synchronization\
    \ mechanisms.  This\n   also includes the ability to preset the actions an FE\
    \ will take in\n   reaction to loss of association to its CE e.g., whether the\
    \ FE will\n   continue to forward packets or whether it will halt operations.\n\
    \   8) FEs MUST be able to redirect control packets (such as RIP, OSPF\n   messages)\
    \ addressed to their interfaces to the CE.  They MUST also\n   redirect other\
    \ relevant packets (e.g., such as those with Router\n   Alert Option set) to their\
    \ CE.  The CEs MUST be able to configure the\n   packet redirection information/filters\
    \ on the FEs.  The CEs MUST also\n   be able to create packets and have its FEs\
    \ deliver them.\n   9) Any proposed ForCES architectures MUST explain how that\n\
    \   architecture supports all of the router functions as defined in\n   [RFC1812].\
    \  IPv4 Forwarding functions such IP header validation,\n   performing longest\
    \ prefix match algorithm, TTL decrement, Checksum\n   calculation, generation\
    \ of ICMP error messages, etc defined in RFC\n   1812 should be explained.\n \
    \  10) In a ForCES NE, the CE(s) MUST be able to learn the topology by\n   which\
    \ the FEs in the NE are connected.\n   11) The ForCES NE architecture MUST be\
    \ capable of supporting (i.e.,\n   must scale to) at least hundreds of FEs and\
    \ tens of thousands of\n   ports.\n   12) The ForCES architecture MUST allow FEs\
    \ AND CEs to join and leave\n   NEs dynamically.\n   13) The ForCES NE architecture\
    \ MUST support multiple CEs and FEs.\n   However, coordination between CEs is\
    \ out of scope of ForCES.\n   14) For pre-association phase setup, monitoring,\
    \ configuration\n   issues, it MAY be useful to use standard management mechanisms\
    \ for\n   CEs and FEs.  The ForCES architecture and requirements do not\n   preclude\
    \ this.  In general, for post-association phase, most\n   management tasks SHOULD\
    \ be done through interaction with the CE.  In\n   certain conditions (e.g., CE/FE\
    \ disconnection), it may be useful to\n   allow management tools (e.g., SNMP)\
    \ to be used to diagnose and repair\n   problems.  The following guidelines MUST\
    \ be observed:\n   1. The ability for a management tool (e.g., SNMP) to be used\
    \ to read\n      (but not change) the state of FE SHOULD NOT be precluded.\n \
    \  2. It MUST NOT be possible for management tools (e.g., SNMP, etc) to\n    \
    \  change the state of a FE in a manner that affects overall NE\n      behavior\
    \ without the CE being notified.\n"
- title: 5. FE Model Requirements
  contents:
  - "5. FE Model Requirements\n   The variety of FE functionality that the ForCES\
    \ architecture allows\n   poses a potential problem for CEs.  In order for a CE\
    \ to effectively\n   control a FE, the CE must understand how the FE processes\
    \ packets. We\n   therefore REQUIRE that a FE model be created that can express\
    \ the\n   logical packet processing capabilities of a FE.  This model will be\n\
    \   used in the ForCES protocol to describe FE capabilities (see Section\n   6,\
    \ requirement #1).  The FE model MUST define both a capability model\n   and a\
    \ state model, which expresses the current configuration of the\n   device.  The\
    \ FE model MUST also support multiple FEs in the NE\n   architecture.\n"
- title: 5.1. Types of Logical Functions
  contents:
  - "5.1. Types of Logical Functions\n   The FE model MUST express what logical functions\
    \ can be applied to\n   packets as they pass through a FE. Logical functions are\
    \ the packet\n   processing functions that are applied to the packets as they\
    \ are\n   forwarded through a FE.  Examples of logical functions are layer 3\n\
    \   forwarding, firewall, NAT, and shaping. Section 5.5 defines the\n   minimal\
    \ set of logical functions that the FE Model MUST support.\n"
- title: 5.2. Variations of Logical Functions
  contents:
  - "5.2. Variations of Logical Functions\n   The FE model MUST be capable of supporting/allowing\
    \ variations in the\n   way logical functions are implemented on a FE.  For example,\
    \ on a\n   certain FE the forwarding logical function might have information\n\
    \   about both the next hop IP address and the next hop MAC address,\n   while\
    \ on another FE these might be implemented as separate logical\n   functions.\
    \  Another example would be NAT functionality that can have\n   several flavors\
    \ such as Traditional/Outbound NAT, Bi-directional NAT,\n   Twice NAT,  and Multihomed\
    \ NAT [RFC2663].  The model must be flexible\n   enough to allow such variations\
    \ in functions.\n"
- title: 5.3. Ordering of Logical Functions
  contents:
  - "5.3. Ordering of Logical Functions\n   The model MUST be capable of describing\
    \ the order in which these\n   logical functions are applied in a FE.  The ordering\
    \ of logical\n   functions is important in many cases.  For example, a NAT function\n\
    \   may change a packet's source or destination IP address.  Any number\n   of\
    \ other logical functions (e.g., layer 3 forwarding, ingress/egress\n   firewall,\
    \ shaping, and accounting) may make use of the source or\n   destination IP address\
    \ when making decisions.  The CE needs to know\n   whether to configure these\
    \ logical functions with the pre-NAT or\n   post-NAT IP address.  Furthermore,\
    \ the model MUST be capable of\n   expressing multiple instances of the same logical\
    \ function in a FE's\n   processing path.  Using NAT again as an example, one\
    \ NAT function is\n   typically performed before the forwarding decision (packets\
    \ arriving\n   externally have their public addresses replaced with private\n\
    \   addresses) and one NAT function is performed after the forwarding\n   decision\
    \ (for packets exiting the domain, their private addresses are\n   replaced by\
    \ public ones).\n"
- title: 5.4. Flexibility
  contents:
  - "5.4. Flexibility\n   Finally, the FE model SHOULD provide a flexible infrastructure\
    \ in\n   which new logical functions and new classification, action, and\n   parameterization\
    \ data can be easily added.  In addition, the FE model\n   MUST be capable of\
    \ describing the types of statistics gathered by\n   each logical function.\n"
- title: 5.5. Minimal Set of Logical Functions
  contents:
  - "5.5. Minimal Set of Logical Functions\n   The rest of this section defines a\
    \ minimal set of logical functions\n   that any FE model MUST support.  This minimal\
    \ set DOES NOT imply that\n   all FEs must provide this functionality.  Instead,\
    \ these requirements\n   only specify that the model must be capable of expressing\
    \ the\n   capabilities that FEs may choose to provide.\n   1) Port Functions\n\
    \   The FE model MUST be capable of expressing the number of ports on the\n  \
    \ device, the static attributes of each port (e.g., port type, link\n   speed),\
    \ and the configurable attributes of each port (e.g., IP\n   address, administrative\
    \ status).\n   2) Forwarding Functions\n   The FE model MUST be capable of expressing\
    \ the data that can be used\n   by the forwarding function to make a forwarding\
    \ decision.  Support\n   for IPv4 and IPv6 unicast and multicast forwarding functions\
    \ MUST be\n   provided by the model.\n   3) QoS Functions\n   The FE model MUST\
    \ allow a FE to express its QoS capabilities in terms\n   of, e.g., metering,\
    \ policing, shaping, and queuing functions. The FE\n   model MUST be capable of\
    \ expressing the use of these functions to\n   provide IntServ or DiffServ functionality\
    \ as described in [RFC2211],\n   [RFC2212], [RFC2215], [RFC2475], and [RFC3290].\n\
    \   4) Generic Filtering Functions\n   The FE model MUST be capable of expressing\
    \ complex sets of filtering\n   functions.  The model MUST be able to express\
    \ the existence of these\n   functions at arbitrary points in the sequence of\
    \ a FE's packet\n   processing functions.  The FE model MUST be capable of expressing\
    \ a\n   wide range of classification abilities from single fields (e.g.,\n   destination\
    \ address) to arbitrary n-tuples.  Similarly, the FE model\n   MUST be capable\
    \ of expressing what actions these filtering functions\n   can perform on packets\
    \ that the classifier matches.\n   5) Vendor-Specific Functions\n   The FE model\
    \ SHOULD be extensible so that new, currently unknown FE\n   functionality can\
    \ be expressed.  The FE Model SHOULD NOT be extended\n   to express standard/common\
    \ functions in a proprietary manner.  This\n   would NOT be ForCES compliant.\n\
    \   6) High-Touch Functions\n   The FE model MUST be capable of expressing the\
    \ encapsulation and\n   tunneling capabilities of a FE.  The FE model MUST support\
    \ functions\n   that mark the class of service that a packet should receive (i.e.,\n\
    \   IPv4 header TOS octet or the IPv6 Traffic Class octet).  The FE model\n  \
    \ MAY support other high touch functions (e.g., NAT, ALG).\n   7) Security Functions\n\
    \   The FE model MUST be capable of expressing the types of encryption\n   that\
    \ may be applied to packets in the forwarding path.\n   8) Off-loaded Functions\n\
    \   Per-packet processing can leave state in the FE, so that logical\n   functions\
    \ executed during packet processing can perform in a\n   consistent manner (for\
    \ instance, each packet may update the state of\n   the token bucket occupancy\
    \ of a give policer).  In addition, the FE\n   Model MUST allow logical functions\
    \ to execute asynchronously from\n   packet processing, according to a certain\
    \ finite-state machine, in\n   order to perform functions that are, for instance,\
    \ off-loaded from\n   the CE to the FE.  The FE model MUST be capable of expressing\
    \ these\n   asynchronous functions.  Examples of such functions include the\n\
    \   finite-state machine execution required by TCP termination or OSPF\n   Hello\
    \ processing, triggered not only by packet events, but by timer\n   events as\
    \ well.  This Does NOT mean off-loading of any piece of code\n   to an FE, just\
    \ that the FE Model should be able to express existing\n   Off-loaded functions\
    \ on an FE.\n   9) IPFLOW/PSAMP Functions\n   Several applications such as, Usage-based\
    \ Accounting, Traffic\n   engineering, require flow-based IP traffic measurements\
    \ from Network\n   Elements. [IPFLOW] defines architecture for IP traffic flow\n\
    \   monitoring, measuring and exporting.  The FE model SHOULD be able to\n   express\
    \ metering functions and flow accounting needed for exporting\n   IP traffic flow\
    \ information.  Similarly to support measurement-based\n   applications, [PSAMP]\
    \ describes a framework to define a standard set\n   of capabilities for network\
    \ elements to sample subsets of packets by\n   statistical and other methods.\
    \  The FE model SHOULD be able to\n   express statistical packet filtering functions\
    \ and packet information\n   needed for supporting packet sampling applications.\n"
- title: 6. ForCES Protocol Requirements
  contents:
  - "6. ForCES Protocol Requirements\n   This section specifies some of the requirements\
    \ that the ForCES\n   protocol MUST meet.\n   1) Configuration of Modeled Elements\n\
    \   The ForCES protocol MUST allow the CEs to determine the capabilities\n   of\
    \ each FE.  These capabilities SHALL be expressed using the FE model\n   whose\
    \ requirements are defined in Section 5.  Furthermore, the\n   protocol MUST provide\
    \ a means for the CEs to control all the FE\n   capabilities that are discovered\
    \ through the FE model.  The protocol\n   MUST be able to add/remove classification/action\
    \ entries, set/delete\n   parameters, query statistics, and register for and receive\
    \ events.\n   2) Support for Secure Communication\n      a) FE configuration will\
    \ contain information critical to the\n         functioning of a network (e.g.,\
    \ IP Forwarding Tables).  As\n         such, it MUST be possible to ensure the\
    \ integrity of all ForCES\n         protocol messages and protect against man-in-the-middle\n\
    \         attacks.\n      b) FE configuration information may also contain information\n\
    \         derived from business relationships (e.g., service level\n         agreements).\
    \  Because of the confidential nature of the\n         information, it MUST be\
    \ possible to secure (make private) all\n         ForCES protocol messages.\n\
    \      c) In order to ensure that authorized CEs and FEs are\n         participating\
    \ in a NE and defend against CE or FE impersonation\n         attacks, the ForCES\
    \ architecture MUST select a means of\n         authentication for CEs and FEs.\n\
    \      d) In some deployments ForCES is expected to be deployed between\n    \
    \     CEs and FEs connected to each other inside a box over a\n         backplane,\
    \ where physical security of the box ensures that\n         man-in-the-middle,\
    \ snooping, and impersonation attacks are not\n         possible.  In such scenarios\
    \ the ForCES architecture MAY rely\n         on the physical security of the box\
    \ to defend against these\n         attacks and protocol mechanisms May be turned\
    \ off.\n      e) In the case when CEs and FEs are connected over a network,\n\
    \         security mechanisms MUST be specified or selected that protect\n   \
    \      the ForCES protocol against such attacks.  Any security\n         solution\
    \ used for ForCES MUST specify how it deals with such\n         attacks.\n   3)\
    \ Scalability\n   The ForCES protocol MUST be capable of supporting (i.e., must\
    \ scale\n   to) at least hundreds of FEs and tens of thousands of ports.  For\n\
    \   example, the ForCES protocol field sizes corresponding to FE or port\n   numbers\
    \ SHALL be large enough to support the minimum required\n   numbers.  This requirement\
    \ does not relate to the performance of a NE\n   as the number of FEs or ports\
    \ in the NE grows.\n   4) Multihop\n   When the CEs and FEs are separated beyond\
    \ a single L3 routing hop,\n   the ForCES protocol will make use of an existing\
    \ RFC2914 compliant L4\n   protocol with adequate reliability, security and congestion\
    \ control\n   (e.g., TCP, SCTP) for transport purposes.\n   5) Message Priority\n\
    \   The ForCES protocol MUST provide a means to express the protocol\n   message\
    \ priorities.\n   6) Reliability\n      a) The ForCES protocol will be used to\
    \ transport information that\n         requires varying levels of reliability.\
    \  By strict or robust\n         reliability in this requirement we mean, no losses,\
    \ no\n         corruption, no re-ordering of information being transported and\n\
    \         delivery in a timely fashion.\n      b) Some information or payloads,\
    \ such as redirected packets or\n         packet sampling, may not require robust\
    \ reliability (can\n         tolerate some degree of losses).  For information\
    \ of this sort,\n         ForCES MUST NOT be restricted to strict reliability.\n\
    \      c) Payloads such as configuration information, e.g., ACLs, FIB\n      \
    \   entries, or FE capability information (described in section 6,\n         (1))\
    \ are mission critical and must be delivered in a robust\n         reliable fashion.\
    \  Thus, for information of this sort, ForCES\n         MUST either provide built-in\
    \ protocol mechanisms or use a\n         reliable transport protocol for achieving\
    \ robust/strict\n         reliability.\n      d) Some information or payloads,\
    \ such as heartbeat packets that\n         may be used to detect loss of association\
    \ between CE and FEs\n         (see section 6, (8)), may prefer timeliness over\
    \ reliable\n         delivery.  For information of this sort, ForCES MUST NOT\
    \ be\n         restricted to strict reliability.\n      e) When ForCES is carried\
    \ over multi-hop IP networks, it is a\n         requirement that ForCES MUST use\
    \ a [RFC2914]-compliant\n         transport protocol.\n      f) In cases where\
    \ ForCES is not running over an IP network such as\n         an Ethernet or cell\
    \ fabric between CE and FE, then reliability\n         still MUST be provided\
    \ when carrying critical information of\n         the types specified in (c) above,\
    \ either by the underlying\n         link/network/transport layers or by built-in\
    \ protocol\n         mechanisms.\n   7) Interconnect Independence\n   The ForCES\
    \ protocol MUST support a variety of interconnect\n   technologies. (refer to\
    \ section 4, requirement #1)\n   8) CE redundancy or CE failover\n   The ForCES\
    \ protocol MUST support mechanisms for CE redundancy or CE\n   failover.  This\
    \ includes the ability for CEs and FEs to determine\n   when there is a loss of\
    \ association between them, ability to restore\n   association and efficient state\
    \ (re)synchronization mechanisms.  This\n   also includes the ability to preset\
    \ the actions an FE will take in\n   reaction to loss of association to its CE,\
    \ e.g., whether the FE will\n   continue to forward packets or whether it will\
    \ halt operations.\n   (refer to section 4, requirement #7)\n   9) Packet Redirection/Mirroring\n\
    \      a) The ForCES protocol MUST define a way to redirect packets from\n   \
    \      the FE to the CE and vice-versa.  Packet redirection terminates\n     \
    \    any further processing of the redirected packet at the FE.\n      b) The\
    \ ForCES protocol MUST define a way to mirror packets from\n         the FE to\
    \ the CE.  Mirroring allows the packet duplicated by\n         the FE at the mirroring\
    \ point to be sent to the CE while the\n         original packet continues to\
    \ be processed by the FE.\n   Examples of packets that may be redirected or mirrored\
    \ include\n   control packets (such as RIP, OSPF messages) addressed to the\n\
    \   interfaces or any other relevant packets (such as those with Router\n   Alert\
    \ Option set).  The ForCES protocol MUST also define a way for\n   the CE to configure\
    \ the behavior of a) and b) (above), to specify\n   which packets are affected\
    \ by each.\n   10) Topology Exchange\n   The ForCES protocol or information carried\
    \ in the ForCES protocol\n   MUST allow those FEs which have inter-FE topology\
    \ information to\n   provide that information to the CE(s).\n   11) Dynamic Association\n\
    \   The ForCES protocol MUST allow CEs and FEs to join and leave a NE\n   dynamically.\
    \ (refer to section 4, requirement #12)\n   12) Command Bundling\n   The ForCES\
    \ protocol MUST be able to group an ordered set of commands\n   to a FE.  Each\
    \ such group of commands SHOULD be sent to the FE in as\n   few messages as possible.\
    \  Furthermore, the protocol MUST support the\n   ability to specify if a command\
    \ group MUST have all-or-nothing\n   semantics.\n   13) Asynchronous Event Notification\n\
    \   The ForCES protocol MUST be able to asynchronously notify the CE of\n   events\
    \ on the FE such as failures or change in available resources or\n   capabilities.\
    \ (refer to section 4, requirement #6)\n   14) Query Statistics\n   The ForCES\
    \ protocol MUST provide a means for the CE to be able to\n   query statistics\
    \ (monitor performance) from the FE.\n   15) Protection against Denial of Service\
    \ Attacks (based on CPU\n   overload or queue overflow)\n   Systems utilizing\
    \ the ForCES protocol can be attacked using denial of\n   service attacks based\
    \ on CPU overload or queue overflow. The ForCES\n   protocol could be exploited\
    \ by such attacks to cause the CE to become\n   unable to control the FE or appropriately\
    \ communicate with other\n   routers and systems.  The ForCES protocol MUST therefore\
    \ provide\n   mechanisms for controlling FE capabilities that can be used to\n\
    \   protect against such attacks.  FE capabilities that MUST be\n   manipulated\
    \ via ForCES include the ability to install classifiers and\n   filters to detect\
    \ and drop attack packets, as well as to be able to\n   install rate limiters\
    \ that limit the rate of packets which appear to\n   be valid but may be part\
    \ of an attack (e.g., bogus BGP packets).\n"
- title: 7. References
  contents:
  - '7. References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC3290]  Bernet, Y., Blake, S., Grossman, D.\
    \ and A. Smith, \"An\n              Informal Management Model for DiffServ Routers\"\
    , RFC 3290,\n              May 2002.\n   [RFC1812]  Baker, F., \"Requirements\
    \ for IP Version 4 Routers\", RFC\n              1812, June 1995.\n   [RFC2211]\
    \  Wroclawski, J., \"Specification of the Controlled-Load\n              Network\
    \ Element Service\", RFC 2211, September 1997.\n   [RFC2212]  Shenker, S., Partridge,\
    \ C. and R. Guerin, \"Specification\n              of Guaranteed Quality of Service\"\
    , RFC 2212, September\n              1997.\n   [RFC2215]  Shenker, S. and J. Wroclawski,\
    \ \"General Characterization\n              Parameters for Integrated Service\
    \ Network Elements\", RFC\n              2215, September 1997.\n   [RFC2475] \
    \ Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.\n              and W.\
    \ Weisss, \"An Architecture for Differentiated\n              Service\", RFC 2475,\
    \ December 1998.\n   [RFC2914]  Floyd, S., \"Congestion Control Principles\",\
    \ BCP 14, RFC\n              2914, September 2000.\n   [RFC2663]  Srisuresh, P.\
    \ and M. Holdrege, \"IP Network Address\n              Translator (NAT) Terminology\
    \ and Considerations\", RFC\n              2663, August 1999.\n"
- title: 7.2. Informative References
  contents:
  - "7.2. Informative References\n   [RFC3532]  Anderson, T. and J. Buerkle, \"Requirements\
    \ for the Dynamic\n              Partitioning of Switching Elements\", RFC 3532,\
    \ May 2003.\n   [IPFLOW]   Quittek, et al., \"Requirements for IP Flow Information\n\
    \              Export\", Work in Progress, February 2003.\n   [PSAMP]    Duffield,\
    \ et al., \"A Framework for Passive Packet\n              Measurement \", Work\
    \ in Progress, March 2003.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   See architecture requirement #5 and protocol requirement\
    \ #2.\n"
- title: 9. Authors' Addresses & Acknowledgments
  contents:
  - "9. Authors' Addresses & Acknowledgments\n   This document was written by the\
    \ ForCES Requirements design team:\n   Todd A. Anderson (Editor)\n   Ed Bowen\n\
    \   IBM Zurich Research Laboratory\n   Saumerstrasse 4\n   CH-8803 Rueschlikon\
    \ Switzerland\n   Phone: +41 1 724 83 68\n   EMail: edbowen@us.ibm.com\n   Ram\
    \ Dantu\n   Department of Computer Science\n   University of North Texas,\n  \
    \ Denton, Texas, 76203\n   Phone: 940 565 2822\n   EMail: rdantu@unt.edu\n   Avri\
    \ Doria\n   ETRI\n   161 Gajeong-dong, Yuseong-gu\n   Deajeon 305-350 Korea\n\
    \   EMail: avri@acm.org\n   Ram Gopal\n   Nokia Research Center\n   5, Wayside\
    \ Road,\n   Burlington, MA 01803\n   Phone: 1-781-993-3685\n   EMail: ram.gopal@nokia.com\n\
    \   Jamal Hadi Salim\n   Znyx Networks\n   Ottawa, Ontario\n   Canada\n   EMail:\
    \ hadi@znyx.com\n   Hormuzd Khosravi (Editor)\n   Muneyb Minhazuddin\n   Avaya\
    \ Inc.\n   123, Epping road,\n   North Ryde, NSW 2113, Australia\n   Phone: +61\
    \ 2 9352 8620\n   EMail: muneyb@avaya.com\n   Margaret Wasserman\n   Nokia Research\
    \ Center\n   5 Wayside Road\n   Burlington, MA 01803\n   Phone: +1 781 993 3858\n\
    \   EMail: margaret.wasserman@nokia.com\n   The authors would like to thank Vip\
    \ Sharma and Lily Yang for their\n   valuable contributions.\n"
- title: 10.  Editors' Contact Information
  contents:
  - "10.  Editors' Contact Information\n   Hormuzd Khosravi\n   Intel\n   2111 NE\
    \ 25th Avenue\n   Hillsboro, OR 97124 USA\n   Phone: +1 503 264 0334\n   EMail:\
    \ hormuzd.m.khosravi@intel.com\n   Todd A. Anderson\n   Intel\n   2111 NE 25th\
    \ Avenue\n   Hillsboro, OR 97124 USA\n   Phone: +1 503 712 1760\n   EMail: todd.a.anderson@intel.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
