- title: __initial_text__
  contents:
  - '                  NAT Behavioral Requirements for TCP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a set of requirements for NATs that handle\
    \ TCP\n   that would allow many applications, such as peer-to-peer applications\n\
    \   and online games to work consistently.  Developing NATs that meet\n   this\
    \ set of requirements will greatly increase the likelihood that\n   these applications\
    \ will function properly.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Applicability Statement  . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  TCP Connection Initiation  . . . . . . . . . . . . . . .\
    \ . . .  4\n     4.1.  Address and Port Mapping Behavior  . . . . . . . . . .\
    \ . .  5\n     4.2.  Internally Initiated Connections . . . . . . . . . . . .\
    \ .  5\n     4.3.  Externally Initiated Connections . . . . . . . . . . . . .\
    \  7\n   5.  NAT Session Refresh  . . . . . . . . . . . . . . . . . . . . . 10\n\
    \   6.  Application Level Gateways . . . . . . . . . . . . . . . . . . 12\n  \
    \ 7.  Other Requirements Applicable to TCP . . . . . . . . . . . . . 12\n    \
    \ 7.1.  Port Assignment  . . . . . . . . . . . . . . . . . . . . . 12\n     7.2.\
    \  Hairpinning Behavior . . . . . . . . . . . . . . . . . . . 13\n     7.3.  ICMP\
    \ Responses to TCP Packets  . . . . . . . . . . . . . . 13\n   8.  Requirements\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 14\n   9.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 16\n   10. Acknowledgments  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 17\n   11. References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 18\n     11.1. Normative References . . .\
    \ . . . . . . . . . . . . . . . . 18\n     11.2. Informational References . .\
    \ . . . . . . . . . . . . . . . 18\n"
- title: 1.  Applicability Statement
  contents:
  - "1.  Applicability Statement\n   This document is adjunct to [BEHAVE-UDP], which\
    \ defines many terms\n   relating to NATs, lays out general requirements for all\
    \ NATs, and\n   sets requirements for NATs that handle IP and unicast UDP traffic.\n\
    \   The purpose of this document is to set requirements for NATs that\n   handle\
    \ TCP traffic.\n   The requirements of this specification apply to traditional\
    \ NATs as\n   described in [RFC2663].\n   This document only covers the TCP aspects\
    \ of NAT traversal.\n   Middlebox behavior that is not necessary for network address\n\
    \   translation of TCP is out of scope.  Packet inspection above the TCP\n   layer\
    \ and firewalls are out of scope except for Application Level\n   Gateway (ALG)\
    \ behavior that may interfere with NAT traversal.\n   Application and OS aspects\
    \ of TCP NAT traversal are out of scope.\n   Signaling-based approaches to NAT\
    \ traversal, such as Middlebox\n   Communication (MIDCOM) and Universal Plug and\
    \ Play (UPnP), that\n   directly control the NAT are out of scope.  Finally, TCP\
    \ connections\n   intended for the NAT (e.g., an HTTP or Secure Shell Protocol\
    \ (SSH)\n   management interface) and TCP connections initiated by the NAT (e.g.,\n\
    \   reliable syslog client) are out of scope.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   Network Address Translators (NATs) hinder connectivity in\n\
    \   applications where sessions may be initiated to internal hosts.\n   Readers\
    \ may refer to [RFC3022] for detailed information on\n   traditional NATs.  [BEHAVE-UDP]\
    \ lays out the terminology and\n   requirements for NATs in the context of IP\
    \ and UDP.  This document\n   supplements these by setting requirements for NATs\
    \ that handle TCP\n   traffic.  All definitions and requirements in [BEHAVE-UDP]\
    \ are\n   inherited here.\n   [RFC4614] chronicles the evolution of TCP from the\
    \ original\n   definition [RFC0793] to present-day implementations.  While much\
    \ has\n   changed in TCP with regards to congestion control and flow control,\n\
    \   security, and support for high-bandwidth networks, the process of\n   initiating\
    \ a connection (i.e., the 3-way handshake or simultaneous-\n   open) has changed\
    \ little.  It is the process of connection initiation\n   that NATs affect the\
    \ most.  Experimental approaches such as T/TCP\n   [RFC1644] have proposed alternate\
    \ connection initiation approaches,\n   but have been found to be complex and\
    \ susceptible to denial-of-\n   service attacks.  Modern operating systems and\
    \ NATs consequently\n   primarily support the 3-way handshake and simultaneous-open\
    \ modes of\n   connection initiation as described in [RFC0793].\n   Recently,\
    \ many techniques have been devised to make peer-to-peer TCP\n   applications\
    \ work across NATs.  [STUNT], [NATBLASTER], and [P2PNAT]\n   describe Unilateral\
    \ Self-Address Fixing (UNSAF) mechanisms that allow\n   peer-to-peer applications\
    \ to establish TCP through NATs.  These\n   approaches require only endpoint applications\
    \ to be modified and work\n   with standards compliant OS stacks.  The approaches,\
    \ however, depend\n   on specific NAT behavior that is usually, but not always,\
    \ supported\n   by NATs (see [TCPTRAV] and [P2PNAT] for details).  Consequently,\
    \ a\n   complete TCP NAT traversal solution is sometimes forced to rely on\n \
    \  public TCP relays to traverse NATs that do not cooperate.  This\n   document\
    \ defines requirements that ensure that TCP NAT traversal\n   approaches are not\
    \ forced to use data relays.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   \"NAT\" in this specification includes both \"Basic NAT\" and \"Network\n\
    \   Address/Port Translator (NAPT)\" [RFC2663].  The term \"NAT Session\" is\n\
    \   adapted from [NAT-MIB] and is defined as follows.\n   NAT Session - A NAT\
    \ session is an association between a TCP session\n   as seen in the internal\
    \ realm and a TCP session as seen in the\n   external realm, by virtue of NAT\
    \ translation.  The NAT session will\n   provide the translation glue between\
    \ the two session representations.\n   This document uses the term \"TCP connection\"\
    \ (or just \"connection\")\n   to refer to individual TCP flows identified by\
    \ the 4-tuple (source\n   and destination IP address and TCP port) and the initial\
    \ sequence\n   numbers (ISN).\n   This document uses the term \"address and port\
    \ mapping\" (or just\n   \"mapping\") as defined in [BEHAVE-UDP] to refer to state\
    \ at the NAT\n   necessary for network address and port translation of TCP\n \
    \  connections.  This document also uses the terms \"Endpoint-Independent\n  \
    \ Mapping\", \"Address-Dependent Mapping\", \"Address and Port-Dependent\n   Mapping\"\
    , \"filtering behavior\", \"Endpoint-Independent Filtering\",\n   \"Address-Dependent\
    \ Filtering\", \"Address and Port-Dependent\n   Filtering\", \"Port assignment\"\
    , \"Port overloading\", \"hairpinning\", and\n   \"External source IP address\
    \ and port\" as defined in [BEHAVE-UDP].\n"
- title: 4.  TCP Connection Initiation
  contents:
  - "4.  TCP Connection Initiation\n   This section describes various NAT behaviors\
    \ applicable to TCP\n   connection initiation.\n"
- title: 4.1.  Address and Port Mapping Behavior
  contents:
  - "4.1.  Address and Port Mapping Behavior\n   A NAT uses a mapping to translate\
    \ packets for each TCP connection.  A\n   mapping is dynamically allocated for\
    \ connections initiated from the\n   internal side, and potentially reused for\
    \ certain subsequent\n   connections.  NAT behavior regarding when a mapping can\
    \ be reused\n   differs for different NATs as described in [BEHAVE-UDP].\n   Consider\
    \ an internal IP address and TCP port (X:x) that initiates a\n   TCP connection\
    \ to an external (Y1:y1) tuple.  Let the mapping\n   allocated by the NAT for\
    \ this connection be (X1':x1').  Shortly\n   thereafter, the endpoint initiates\
    \ a connection from the same (X:x)\n   to an external address (Y2:y2) and gets\
    \ the mapping (X2':x2') on the\n   NAT.  As per [BEHAVE-UDP], if (X1':x1') equals\
    \ (X2':x2') for all\n   values of (Y2:y2), then the NAT is defined to have \"\
    Endpoint-\n   Independent Mapping\" behavior.  If (X1':x1') equals (X2':x2') only\n\
    \   when Y2 equals Y1, then the NAT is defined to have \"Address-Dependent\n \
    \  Mapping\" behavior.  If (X1':x1') equals (X2':x2') only when (Y2:y2)\n   equals\
    \ (Y1:y1), possible only for consecutive connections to the same\n   external\
    \ address shortly after the first is terminated and if the NAT\n   retains state\
    \ for connections in TIME_WAIT state, then the NAT is\n   defined to have \"Address\
    \ and Port-Dependent Mapping\" behavior.  This\n   document introduces one additional\
    \ behavior where (X1':x1') never\n   equals (X2':x2'), that is, for each connection\
    \ a new mapping is\n   allocated; in such a case, the NAT is defined to have \"\
    Connection-\n   Dependent Mapping\" behavior.\n   REQ-1:  A NAT MUST have an \"\
    Endpoint-Independent Mapping\" behavior\n      for TCP.\n   Justification:  REQ-1\
    \ is necessary for UNSAF methods to work.\n      Endpoint-Independent Mapping\
    \ behavior allows peer-to-peer\n      applications to learn and advertise the\
    \ external IP address and\n      port allocated to an internal endpoint such that\
    \ external peers\n      can contact it (subject to the NAT's security policy).\
    \  The\n      security policy of a NAT is independent of its mapping behavior\n\
    \      and is discussed later in Section 4.3.  Having Endpoint-\n      Independent\
    \ Mapping behavior allows peer-to-peer applications to\n      work consistently\
    \ without compromising the security benefits of\n      the NAT.\n"
- title: 4.2.  Internally Initiated Connections
  contents:
  - "4.2.  Internally Initiated Connections\n   An internal endpoint initiates a TCP\
    \ connection through a NAT by\n   sending a SYN packet.  The NAT allocates (or\
    \ reuses) a mapping for\n   the connection, as described in the previous section.\
    \  The mapping\n   defines the external IP address and port used for translation\
    \ of all\n   packets for that connection.  In particular, for client-server\n\
    \   applications where an internal client initiates the connection to an\n   external\
    \ server, the mapping is used to translate the outbound SYN,\n   the resulting\
    \ inbound SYN-ACK response, the subsequent outbound ACK,\n   and other packets\
    \ for the connection.  This method of connection\n   initiation corresponds to\
    \ the 3-way handshake (defined in [RFC0793])\n   and is supported by all NATs.\n\
    \   Peer-to-peer applications use an alternate method of connection\n   initiation\
    \ termed simultaneous-open (Fig. 8, [RFC0793]) to traverse\n   NATs.  In the simultaneous-open\
    \ mode of operation, both peers send\n   SYN packets for the same TCP connection.\
    \  The SYN packets cross in\n   the network.  Upon receiving the other end's SYN\
    \ packet, each end\n   responds with a SYN-ACK packet, which also cross in the\
    \ network.  The\n   connection is considered established once the SYN-ACKs are\
    \ received.\n   From the perspective of the NAT, the internal host's SYN packet\
    \ is\n   met by an inbound SYN packet for the same connection (as opposed to a\n\
    \   SYN-ACK packet during a 3-way handshake).  Subsequent to this\n   exchange,\
    \ both an outbound and an inbound SYN-ACK are seen for the\n   connection.  Some\
    \ NATs erroneously block the inbound SYN for the\n   connection in progress. \
    \ Some NATs block or incorrectly translate the\n   outbound SYN-ACK.  Such behavior\
    \ breaks TCP simultaneous-open and\n   prevents peer-to-peer applications from\
    \ functioning correctly behind\n   a NAT.\n   In order to provide network address\
    \ translation service for TCP, it\n   is necessary for a NAT to correctly receive,\
    \ translate, and forward\n   all packets for a connection that conform to valid\
    \ transitions of the\n   TCP State-Machine (Fig. 6, [RFC0793]).\n   REQ-2:  A\
    \ NAT MUST support all valid sequences of TCP packets\n      (defined in [RFC0793])\
    \ for connections initiated both internally\n      as well as externally when\
    \ the connection is permitted by the NAT.\n      In particular:\n      a) In addition\
    \ to handling the TCP 3-way handshake mode of\n         connection initiation,\
    \ A NAT MUST handle the TCP simultaneous-\n         open mode of connection initiation.\n\
    \   Justification:  The intent of this requirement is to allow standards\n   \
    \   compliant TCP stacks to traverse NATs no matter what path the\n      stacks\
    \ take through the TCP state-machine and no matter which end\n      initiates\
    \ the connection as long as the connection is permitted by\n      the filtering\
    \ policy of the NAT (filtering policy is described in\n      the following section).\n\
    \      a) In addition to TCP packets for a 3-way handshake, A NAT must be\n  \
    \       prepared to accept an inbound SYN and an outbound SYN-ACK for\n      \
    \   an internally initiated connection in order to support\n         simultaneous-open.\n"
- title: 4.3.  Externally Initiated Connections
  contents:
  - "4.3.  Externally Initiated Connections\n   The NAT allocates a mapping for the\
    \ first connection initiated by an\n   internal endpoint to an external endpoint.\
    \  In some scenarios, the\n   NAT's policy may allow this mapping to be reused\
    \ for connections\n   initiated from the external side to the internal endpoint.\
    \  Consider\n   as before an internal IP address and port (X:x) that is assigned\
    \ (or\n   reuses) a mapping (X1':x1') when it initiates a connection to an\n \
    \  external (Y1:y1).  An external endpoint (Y2:y2) attempts to initiate\n   a\
    \ connection with the internal endpoint by sending a SYN to\n   (X1':x1').  A\
    \ NAT can choose to either allow the connection to be\n   established, or to disallow\
    \ the connection.  If the NAT chooses to\n   allow the connection, it translates\
    \ the inbound SYN and routes it to\n   (X:x) as per the existing mapping.  It\
    \ also translates the SYN-ACK\n   generated by (X:x) in response and routes it\
    \ to (Y2:y2), and so on.\n   Alternately, the NAT can disallow the connection\
    \ by filtering the\n   inbound SYN.\n   A NAT may allow an existing mapping to\
    \ be reused by an externally\n   initiated connection if its security policy permits.\
    \  Several\n   different policies are possible as described in [BEHAVE-UDP]. \
    \ If a\n   NAT allows the connection initiation from all (Y2:y2), then it is\n\
    \   defined to have \"Endpoint-Independent Filtering\" behavior.  If the\n   NAT\
    \ allows connection initiations only when Y2 equals Y1, then the\n   NAT is defined\
    \ to have \"Address-Dependent Filtering\" behavior.  If\n   the NAT allows connection\
    \ initiations only when (Y2:y2) equals\n   (Y1:y1), then the NAT is defined to\
    \ have \"Address and Port-Dependent\n   Filtering\" behavior (possible only shortly\
    \ after the first connection\n   has been terminated but the mapping is still\
    \ active).  One additional\n   filtering behavior defined in this document is\
    \ when the NAT does not\n   allow any connection initiations from the external\
    \ side; in such\n   cases, the NAT is defined to have \"Connection-Dependent Filtering\"\
    \n   behavior.  The difference between \"Address and Port-Dependent\n   Filtering\"\
    \ and \"Connection-Dependent Filtering\" behavior is that the\n   former permits\
    \ an inbound SYN during the TIME_WAIT state of the first\n   connection to initiate\
    \ a new connection while the latter does not.\n   REQ-3:  If application transparency\
    \ is most important, it is\n      RECOMMENDED that a NAT have an \"Endpoint-Independent\
    \ Filtering\"\n      behavior for TCP.  If a more stringent filtering behavior\
    \ is most\n      important, it is RECOMMENDED that a NAT have an \"Address-Dependent\n\
    \      Filtering\" behavior.\n      a) The filtering behavior MAY be an option\
    \ configurable by the\n         administrator of the NAT.\n      b) The filtering\
    \ behavior for TCP MAY be independent of the\n         filtering behavior for\
    \ UDP.\n   Justification:  The intent of this requirement is to allow peer-to-\n\
    \      peer applications that do not always initiate connections from the\n  \
    \    internal side of the NAT to continue to work in the presence of\n      NATs.\
    \  This behavior also allows applications behind a BEHAVE\n      compliant NAT\
    \ to inter-operate with remote endpoints that are\n      behind non-BEHAVE compliant\
    \ (legacy) NATs.  If the remote\n      endpoint's NAT does not have Endpoint-Independent\
    \ Mapping behavior\n      but has only one external IP address, then an application\
    \ can\n      still traverse the combination of the two NATs if the local NAT\n\
    \      has Address-Dependent Filtering.  Section 9 contains a detailed\n     \
    \ discussion on the security implications of this requirement.\n   If the inbound\
    \ SYN packet is filtered, either because a corresponding\n   mapping does not\
    \ exist or because of the NAT's filtering behavior, a\n   NAT has two basic choices:\
    \ to ignore the packet silently, or to\n   signal an error to the sender.  Signaling\
    \ an error through ICMP\n   messages allows the sender to quickly detect that\
    \ the SYN did not\n   reach the intended destination.  Silently dropping the packet,\
    \ on the\n   other hand, allows applications to perform simultaneous-open more\n\
    \   reliably.\n   Silently dropping the SYN aids simultaneous-open as follows.\n\
    \   Consider that the application is attempting a simultaneous-open and\n   the\
    \ outbound SYN from the internal endpoint has not yet crossed the\n   NAT (due\
    \ to network congestion or clock skew between the two\n   endpoints); this outbound\
    \ SYN would otherwise have created the\n   necessary mapping at the NAT to allow\
    \ translation of the inbound SYN.\n   Since the outbound SYN did not reach the\
    \ NAT in time, the inbound SYN\n   cannot be processed.  If a NAT responds to\
    \ the premature inbound SYN\n   with an error message that forces the external\
    \ endpoint to abandon\n   the connection attempt, it hinders applications performing\
    \ a TCP\n   simultaneous-open.  If instead the NAT silently ignores the inbound\n\
    \   SYN, the external endpoint retransmits the SYN after a TCP timeout.\n   In\
    \ the meantime, the NAT creates the mapping in response to the\n   (delayed) outbound\
    \ SYN such that the retransmitted inbound SYN can be\n   routed and simultaneous-open\
    \ can succeed.  The downside to this\n   behavior is that in the event the inbound\
    \ SYN is erroneous, the\n   remote side does not learn of the error until after\
    \ several TCP\n   timeouts.\n   NAT support for simultaneous-open as well as quickly\
    \ signaling errors\n   are both important for applications.  Unfortunately, there\
    \ is no way\n   for a NAT to signal an error without forcing the endpoint to abort\
    \ a\n   potential simultaneous-open: TCP RST and ICMP Port Unreachable\n   packets\
    \ require the endpoint to abort the attempt while the ICMP Host\n   and Network\
    \ Unreachable errors may adversely affect other connections\n   to the same host\
    \ or network [RFC1122].\n   In addition, when an unsolicited SYN is received by\
    \ the NAT, the NAT\n   may not know whether the application is attempting a simultaneous-\n\
    \   open (and that it should therefore silently drop the SYN) or whether\n   the\
    \ SYN is in error (and that it should notify the sender).\n   REQ-4:  A NAT MUST\
    \ NOT respond to an unsolicited inbound SYN packet\n      for at least 6 seconds\
    \ after the packet is received.  If during\n      this interval the NAT receives\
    \ and translates an outbound SYN for\n      the connection the NAT MUST silently\
    \ drop the original unsolicited\n      inbound SYN packet.  Otherwise, the NAT\
    \ SHOULD send an ICMP Port\n      Unreachable error (Type 3, Code 3) for the original\
    \ SYN, unless\n      REQ-4a applies.\n      a) The NAT MUST silently drop the\
    \ original SYN packet if sending a\n         response violates the security policy\
    \ of the NAT.\n   Justification:  The intent of this requirement is to allow\n\
    \      simultaneous-open to work reliably in the presence of NATs as well\n  \
    \    as to quickly signal an error in case the unsolicited SYN is in\n      error.\
    \  As of writing this memo, it is not possible to achieve\n      both; the requirement\
    \ therefore represents a compromise.  The NAT\n      should tolerate some delay\
    \ in the outbound SYN for a TCP\n      simultaneous-open, which may be due to\
    \ network congestion or loose\n      synchronization between the endpoints.  If\
    \ the unsolicited SYN is\n      not part of a simultaneous-open attempt and is\
    \ in error, the NAT\n      should endeavor to signal the error in accordance with\
    \ [RFC1122].\n      a) There may, however, be reasons for the NAT to rate-limit\
    \ or\n         omit such error notifications, for example, in the case of an\n\
    \         attack.  Silently dropping the SYN packet when under attack\n      \
    \   allows simultaneous-open to work without consuming any extra\n         network\
    \ bandwidth or revealing the presence of the NAT to\n         attackers.  Section\
    \ 9 mentions the security considerations for\n         this requirement.\n   For\
    \ NATs that combine NAT functionality with end-host functionality\n   (e.g., an\
    \ end-host that also serves as a NAT for other hosts behind\n   it), REQ-4 above\
    \ applies only to SYNs intended for the NAT'ed hosts\n   and not to SYNs intended\
    \ for the NAT itself.  One way to determine\n   whether the inbound SYN is intended\
    \ for a NAT'ed host is to allocate\n   NAT mappings from one port range, and allocate\
    \ ports for local\n   endpoints from a different non-overlapping port range. \
    \ More dynamic\n   implementations can be imagined.\n"
- title: 5.  NAT Session Refresh
  contents:
  - "5.  NAT Session Refresh\n   A NAT maintains state associated with in-progress\
    \ and established\n   connections.  Because of this, a NAT is susceptible to a\
    \ resource-\n   exhaustion attack whereby an attacker (or virus) on the internal\
    \ side\n   attempts to cause the NAT to create more state than for which it has\n\
    \   resources.  To prevent such an attack, a NAT needs to abandon\n   sessions\
    \ in order to free the state resources.\n   A common method that is applicable\
    \ only to TCP is to preferentially\n   abandon sessions for crashed endpoints,\
    \ followed by closed TCP\n   connections and partially open connections.  A NAT\
    \ can check if an\n   endpoint for a session has crashed by sending a TCP keep-alive\
    \ packet\n   and receiving a TCP RST packet in response.  If the NAT cannot\n\
    \   determine whether the endpoint is active, it should not abandon the\n   session\
    \ until the TCP connection has been idle for some time.  Note\n   that an established\
    \ TCP connection can stay idle (but live)\n   indefinitely; hence, there is no\
    \ fixed value for an idle-timeout that\n   accommodates all applications.  However,\
    \ a large idle-timeout\n   motivated by recommendations in [RFC1122] can reduce\
    \ the chances of\n   abandoning a live session.\n   A TCP connection passes through\
    \ three phases: partially open,\n   established, and closing.  During the partially\
    \ open phase, endpoints\n   synchronize initial sequence numbers.  The phase is\
    \ initiated by the\n   first SYN for the connection and extends until both endpoints\
    \ have\n   sent a packet with the ACK flag set (TCP states: SYN_SENT and\n   SYN_RCVD).\
    \  ACKs in both directions mark the beginning of the\n   established phase where\
    \ application data can be exchanged\n   indefinitely (TCP states: ESTABLISHED,\
    \ FIN_WAIT_1, FIN_WAIT_2, and\n   CLOSE_WAIT).  The closing phase begins when\
    \ both endpoints have\n   terminated their half of the connection by sending a\
    \ FIN packet.\n   Once FIN packets are seen in both directions, application data\
    \ can no\n   longer be exchanged, but the stacks still need to ensure that the\
    \ FIN\n   packets are received (TCP states: CLOSING and LAST_ACK).\n   TCP connections\
    \ can stay in established phase indefinitely without\n   exchanging any packets.\
    \  Some end-hosts can be configured to send\n   keep-alive packets on such idle\
    \ connections; by default, such keep-\n   alive packets are sent every 2 hours\
    \ if enabled [RFC1122].\n   Consequently, a NAT that waits for slightly over 2\
    \ hours can detect\n   idle connections with keep-alive packets being sent at\
    \ the default\n   rate.  TCP connections in the partially open or closing phases,\
    \ on\n   the other hand, can stay idle for at most 4 minutes while waiting for\n\
    \   in-flight packets to be delivered [RFC1122].\n   The \"established connection\
    \ idle-timeout\" for a NAT is defined as the\n   minimum time a TCP connection\
    \ in the established phase must remain\n   idle before the NAT considers the associated\
    \ session a candidate for\n   removal.  The \"transitory connection idle-timeout\"\
    \ for a NAT is\n   defined as the minimum time a TCP connection in the partially\
    \ open or\n   closing phases must remain idle before the NAT considers the\n \
    \  associated session a candidate for removal.  TCP connections in the\n   TIME_WAIT\
    \ state are not affected by the \"transitory connection idle-\n   timeout\".\n\
    \   REQ-5:  If a NAT cannot determine whether the endpoints of a TCP\n      connection\
    \ are active, it MAY abandon the session if it has been\n      idle for some time.\
    \  In such cases, the value of the \"established\n      connection idle-timeout\"\
    \ MUST NOT be less than 2 hours 4 minutes.\n      The value of the \"transitory\
    \ connection idle-timeout\" MUST NOT be\n      less than 4 minutes.\n      a)\
    \ The value of the NAT idle-timeouts MAY be configurable.\n   Justification: \
    \ The intent of this requirement is to minimize the\n      cases where a NAT abandons\
    \ session state for a live connection.\n      While some NATs may choose to abandon\
    \ sessions reactively in\n      response to new connection initiations (allowing\
    \ idle connections\n      to stay up indefinitely in the absence of new initiations),\
    \ other\n      NATs may choose to proactively reap idle sessions.  In cases where\n\
    \      the NAT cannot actively determine if the connection is alive, this\n  \
    \    requirement ensures that applications can send keep-alive packets\n     \
    \ at the default rate (every 2 hours) such that the NAT can\n      passively determine\
    \ that the connection is alive.  The additional\n      4 minutes allows time for\
    \ in-flight packets to cross the NAT.\n   NAT behavior for handling RST packets,\
    \ or connections in TIME_WAIT\n   state is left unspecified.  A NAT MAY hold state\
    \ for a connection in\n   TIME_WAIT state to accommodate retransmissions of the\
    \ last ACK.\n   However, since the TIME_WAIT state is commonly encountered by\n\
    \   internal endpoints properly closing the TCP connection, holding state\n  \
    \ for a closed connection may limit the throughput of connections\n   through\
    \ a NAT with limited resources.  [RFC1337] describes hazards\n   associated with\
    \ TIME_WAIT assassination.\n   The handling of non-SYN packets for connections\
    \ for which there is no\n   active mapping is left unspecified.  Such packets\
    \ may be received if\n   the NAT silently abandons a live connection, or abandons\
    \ a connection\n   in TIME_WAIT state before the 4 minute TIME_WAIT period expires.\
    \  The\n   decision to either silently drop such packets or to respond with a\n\
    \   TCP RST packet is left up to the implementation.\n   NAT behavior for notifying\
    \ endpoints when abandoning live connections\n   is left unspecified.  When a\
    \ NAT abandons a live connection, for\n   example due to a timeout expiring, the\
    \ NAT MAY either send TCP RST\n   packets to the endpoints or MAY silently abandon\
    \ the connection.\n   Sending a RST notification allows endpoint applications\
    \ to recover\n   more quickly; however, notifying the endpoints may not always\
    \ be\n   possible if, for example, session state is lost due to a power\n   failure.\n"
- title: 6.  Application Level Gateways
  contents:
  - "6.  Application Level Gateways\n   Application Level Gateways (ALGs) in certain\
    \ NATs modify IP addresses\n   and TCP ports embedded inside application protocols.\
    \  Such ALGs may\n   interfere with UNSAF methods or protocols that try to be\
    \ NAT-aware\n   and must therefore be used with extreme caution.\n   REQ-6:  If\
    \ a NAT includes ALGs that affect TCP, it is RECOMMENDED\n      that all of those\
    \ ALGs (except for FTP [RFC0959]) be disabled by\n      default.\n   Justification:\
    \  The intent of this requirement is to prevent ALGs\n      from interfering with\
    \ UNSAF methods.  The default state of an FTP\n      ALG is left unspecified because\
    \ of legacy concerns: as of writing\n      this memo, a large fraction of legacy\
    \ FTP clients do not enable\n      passive (PASV) mode by default and require\
    \ an ALG to traverse\n      NATs.\n"
- title: 7.  Other Requirements Applicable to TCP
  contents:
  - "7.  Other Requirements Applicable to TCP\n   A list of general and UDP-specific\
    \ NAT behavioral requirements are\n   described in [BEHAVE-UDP].  A list of ICMP-specific\
    \ NAT behavioral\n   requirements are described in [BEHAVE-ICMP].  The requirements\
    \ listed\n   below reiterate the requirements from these two documents that\n\
    \   directly affect TCP.  The following requirements do not relax any\n   requirements\
    \ in [BEHAVE-UDP] or [BEHAVE-ICMP].\n"
- title: 7.1.  Port Assignment
  contents:
  - "7.1.  Port Assignment\n   NATs that allow different internal endpoints to simultaneously\
    \ use\n   the same mapping are defined in [BEHAVE-UDP] to have a \"Port\n   assignment\"\
    \ behavior of \"Port overloading\".  Such behavior is\n   undesirable, as it prevents\
    \ two internal endpoints sharing the same\n   mapping from establishing simultaneous\
    \ connections to a common\n   external endpoint.\n   REQ-7:  A NAT MUST NOT have\
    \ a \"Port assignment\" behavior of \"Port\n      overloading\" for TCP.\n   Justification:\
    \  This requirement allows two applications on the\n      internal side of the\
    \ NAT to consistently communicate with the same\n      destination.\n   NAT behavior\
    \ for preserving the source TCP port range for connections\n   is left unspecified.\
    \  Some applications expect the source TCP port to\n   be in the well-known range\
    \ (TCP ports from 0 to 1023).  The \"r\"\n   series of commands (rsh, rcp, rlogin,\
    \ etc.) are an example.  NATs\n   that preserve the range from which the source\
    \ port is picked allow\n   such applications to function properly through the\
    \ NAT; however, by\n   doing so the NAT may compromise the security of the application\
    \ in\n   certain situations; applications that depend only on the IP address\n\
    \   and source TCP port range for security (the \"r\" commands, for\n   example)\
    \ cannot distinguish between an attacker and a legitimate user\n   behind the\
    \ same NAT.\n"
- title: 7.2.  Hairpinning Behavior
  contents:
  - "7.2.  Hairpinning Behavior\n   NATs that forward packets originating from an\
    \ internal address,\n   destined for an external address that matches the active\
    \ mapping for\n   an internal address, back to that internal address are defined\
    \ in\n   [BEHAVE-UDP] as supporting \"hairpinning\".  If the NAT presents the\n\
    \   hairpinned packet with an external source IP address and port (i.e.,\n   the\
    \ mapped source address and port of the originating internal\n   endpoint), then\
    \ it is defined to have \"External source IP address and\n   port\" for hairpinning.\
    \  Hairpinning is necessary to allow two\n   internal endpoints (known to each\
    \ other only by their external mapped\n   addresses) to communicate with each\
    \ other.  \"External source IP\n   address and port\" behavior for hairpinning\
    \ avoids confusing\n   implementations that expect the external source IP address\
    \ and port.\n   REQ-8:  A NAT MUST support \"hairpinning\" for TCP.\n      a)\
    \ A NAT's hairpinning behavior MUST be of type \"External source\n         IP\
    \ address and port\".\n   Justification:  This requirement allows two applications\
    \ behind the\n      same NAT that are trying to communicate with each other using\n\
    \      their external addresses.\n      a) Using the external source address and\
    \ port for the hairpinned\n         packet is necessary for applications that\
    \ do not expect to\n         receive a packet from a different address than the\
    \ external\n         address they are trying to communicate with.\n"
- title: 7.3.  ICMP Responses to TCP Packets
  contents:
  - "7.3.  ICMP Responses to TCP Packets\n   Several TCP mechanisms depend on the\
    \ reception of ICMP error messages\n   triggered by the transmission of TCP segments.\
    \  One such mechanism is\n   path MTU discovery [RFC1191], which is required for\
    \ the correct\n   operation of TCP.  The current path MTU discovery mechanism\
    \ requires\n   the sender of TCP segments to be notified of ICMP \"Datagram Too\
    \ Big\"\n   responses.\n   REQ-9:  If a NAT translates TCP, it SHOULD translate\
    \ ICMP Destination\n      Unreachable (Type 3) messages.\n   Justification:  Translating\
    \ ICMP Destination Unreachable messages,\n      particularly the \"Fragmentation\
    \ Needed and Don't Fragment was Set\"\n      (Type 3, Code 4) message avoids communication\
    \ failures (\"black\n      holes\" [RFC2923]).  Furthermore, TCP's connection\
    \ establishment\n      and maintenance mechanisms also behave much more efficiently\
    \ when\n      ICMP Destination Unreachable messages arrive in response to\n  \
    \    outgoing TCP segments.\n   REQ-10:  Receipt of any sort of ICMP message MUST\
    \ NOT terminate the\n      NAT mapping or TCP connection for which the ICMP was\
    \ generated.\n   Justification:  This is necessary for reliably performing TCP\n\
    \      simultaneous-open where a remote NAT may temporarily signal an\n      ICMP\
    \ error.\n"
- title: 8.  Requirements
  contents:
  - "8.  Requirements\n   A NAT that supports all of the mandatory requirements of\
    \ this\n   specification (i.e., the \"MUST\") and is compliant with [BEHAVE-UDP],\n\
    \   is \"compliant with this specification\".  A NAT that supports all of\n  \
    \ the requirements of this specification (i.e., included the\n   \"RECOMMENDED\"\
    ) and is fully compliant with [BEHAVE-UDP] is \"fully\n   compliant with all the\
    \ mandatory and recommended requirements of this\n   specification\".\n   REQ-1:\
    \  A NAT MUST have an \"Endpoint-Independent Mapping\" behavior\n      for TCP.\n\
    \   REQ-2:  A NAT MUST support all valid sequences of TCP packets\n      (defined\
    \ in [RFC0793]) for connections initiated both internally\n      as well as externally\
    \ when the connection is permitted by the NAT.\n      In particular:\n      a)\
    \ In addition to handling the TCP 3-way handshake mode of\n         connection\
    \ initiation, A NAT MUST handle the TCP simultaneous-\n         open mode of connection\
    \ initiation.\n   REQ-3:  If application transparency is most important, it is\n\
    \      RECOMMENDED that a NAT have an \"Endpoint-Independent Filtering\"\n   \
    \   behavior for TCP.  If a more stringent filtering behavior is most\n      important,\
    \ it is RECOMMENDED that a NAT have an \"Address-Dependent\n      Filtering\"\
    \ behavior.\n      a) The filtering behavior MAY be an option configurable by\
    \ the\n         administrator of the NAT.\n      b) The filtering behavior for\
    \ TCP MAY be independent of the\n         filtering behavior for UDP.\n   REQ-4:\
    \  A NAT MUST NOT respond to an unsolicited inbound SYN packet\n      for at least\
    \ 6 seconds after the packet is received.  If during\n      this interval the\
    \ NAT receives and translates an outbound SYN for\n      the connection the NAT\
    \ MUST silently drop the original unsolicited\n      inbound SYN packet.  Otherwise,\
    \ the NAT SHOULD send an ICMP Port\n      Unreachable error (Type 3, Code 3) for\
    \ the original SYN, unless\n      REQ-4a applies.\n      a) The NAT MUST silently\
    \ drop the original SYN packet if sending a\n         response violates the security\
    \ policy of the NAT.\n   REQ-5:  If a NAT cannot determine whether the endpoints\
    \ of a TCP\n      connection are active, it MAY abandon the session if it has\
    \ been\n      idle for some time.  In such cases, the value of the \"established\n\
    \      connection idle-timeout\" MUST NOT be less than 2 hours 4 minutes.\n  \
    \    The value of the \"transitory connection idle-timeout\" MUST NOT be\n   \
    \   less than 4 minutes.\n      a) The value of the NAT idle-timeouts MAY be configurable.\n\
    \   REQ-6:  If a NAT includes ALGs that affect TCP, it is RECOMMENDED\n      that\
    \ all of those ALGs (except for FTP [RFC0959]) be disabled by\n      default.\n\
    \   The following requirements reiterate requirements from [BEHAVE-UDP]\n   or\
    \ [BEHAVE-ICMP] that directly affect TCP.  This document does not\n   relax any\
    \ requirements in [BEHAVE-UDP] or [BEHAVE-ICMP].\n   REQ-7:  A NAT MUST NOT have\
    \ a \"Port assignment\" behavior of \"Port\n      overloading\" for TCP.\n   REQ-8:\
    \  A NAT MUST support \"hairpinning\" for TCP.\n      a) A NAT's hairpinning behavior\
    \ MUST be of type \"External source\n         IP address and port\".\n   REQ-9:\
    \  If a NAT translates TCP, it SHOULD translate ICMP Destination\n      Unreachable\
    \ (Type 3) messages.\n   REQ-10:  Receipt of any sort of ICMP message MUST NOT\
    \ terminate the\n      NAT mapping or TCP connection for which the ICMP was generated.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   [BEHAVE-UDP] discusses security considerations\
    \ for NATs that handle\n   IP and unicast UDP traffic.  Security concerns specific\
    \ to handling\n   TCP packets are discussed in this section.\n   Security considerations\
    \ for REQ-1:  This requirement does not\n      introduce any TCP-specific security\
    \ concerns.\n   Security considerations for REQ-2:  This requirement does not\n\
    \      introduce any TCP-specific security concerns.  Simultaneous-open\n    \
    \  and other transitions in the TCP state machine are by-design and\n      necessary\
    \ for TCP to work correctly in all scenarios.  Further,\n      this requirement\
    \ only affects connections already in progress as\n      authorized by the NAT\
    \ in accordance with its policy.\n   Security considerations for REQ-3:  The security\
    \ provided by the NAT\n      is governed by its filtering behavior as addressed\
    \ in\n      [BEHAVE-UDP].  Connection-Dependent Filtering behavior is most\n \
    \     secure from a firewall perspective, but severely restricts\n      connection\
    \ initiations through a NAT.  Endpoint-Independent\n      Filtering behavior,\
    \ which is most transparent to applications,\n      requires an attacker to guess\
    \ the IP address and port of an active\n      mapping in order to get his packet\
    \ to an internal host.  Address-\n      Dependent Filtering, on the other hand,\
    \ is less transparent than\n      Endpoint-Independent Filtering but more transparent\
    \ than\n      Connection-Dependent Filtering; it is more secure than Endpoint-\n\
    \      Independent Filtering as it requires an attacker to additionally\n    \
    \  guess the address of the external endpoint for a NAT session\n      associated\
    \ with the mapping and be able to receive packets\n      addressed to the same.\
    \  While this protects against most attackers\n      on the Internet, it does\
    \ not necessarily protect against attacks\n      that originate from behind a\
    \ remote NAT with a single IP address\n      that is also translating a legitimate\
    \ connection to the victim.\n   Security considerations for REQ-4:  This document\
    \ recommends that a\n      NAT respond to unsolicited inbound SYN packets with\
    \ an ICMP error\n      delayed by a few seconds.  Doing so may reveal the presence\
    \ of a\n      NAT to an external attacker.  Silently dropping the SYN makes it\n\
    \      harder to diagnose network problems and forces applications to\n      wait\
    \ for the TCP stack to finish several retransmissions before\n      reporting\
    \ an error.  An implementer must therefore understand and\n      carefully weigh\
    \ the effects of not sending an ICMP error or rate-\n      limiting such ICMP\
    \ errors to a very small number.\n   Security considerations for REQ-5:  This\
    \ document recommends that a\n      NAT that passively monitors TCP state keep\
    \ idle sessions alive for\n      at least 2 hours 4 minutes or 4 minutes depending\
    \ on the state of\n      the connection.  If a NAT is under attack, it may attempt\
    \ to\n      actively determine the liveliness of a TCP connection or let the\n\
    \      NAT administrator configure more conservative timeouts.\n   Security considerations\
    \ for REQ-6:  This requirement does not\n      introduce any TCP-specific security\
    \ concerns.\n   Security considerations for REQ-7:  This requirement does not\n\
    \      introduce any TCP-specific security concerns.\n   Security considerations\
    \ for REQ-8:  This requirement does not\n      introduce any TCP-specific security\
    \ concerns.\n   Security considerations for REQ-9:  This requirement does not\n\
    \      introduce any TCP-specific security concerns.\n   Security considerations\
    \ for REQ-10:  This requirement does not\n      introduce any TCP-specific security\
    \ concerns.\n   NAT implementations that modify TCP sequence numbers (e.g., for\n\
    \   privacy reasons or for ALG support) must ensure that TCP packets with\n  \
    \ Selective Acknowledgement (SACK) notifications [RFC2018] are properly\n   handled.\n\
    \   NAT implementations that modify local state based on TCP flags in\n   packets\
    \ must ensure that out-of-window TCP packets are properly\n   handled.  [RFC4953]\
    \ summarizes and discusses a variety of solutions\n   designed to prevent attackers\
    \ from affecting TCP connections.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   Joe Touch contributed the mechanism for handling unsolicited\
    \ inbound\n   SYNs.  Thanks to Mark Allman, Francois Audet, Lars Eggert, Paul\n\
    \   Francis, Fernando Gont, Sam Hartman, Paul Hoffman, Dave Hudson,\n   Cullen\
    \ Jennings, Philip Matthews, Tom Petch, Magnus Westerlund, and\n   Dan Wing for\
    \ their many contributions, comments, and suggestions.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [BEHAVE-UDP]   Audet, F. and C. Jennings, \"\
    Network Address\n                  Translation (NAT) Behavioral Requirements for\
    \ Unicast\n                  UDP\", BCP 127, RFC 4787, January 2007.\n   [RFC0793]\
    \      Postel, J., \"Transmission Control Protocol\", STD 7,\n               \
    \   RFC 793, September 1981.\n   [RFC0959]      Postel, J. and J. Reynolds, \"\
    File Transfer Protocol\",\n                  STD 9, RFC 959, October 1985.\n \
    \  [RFC1122]      Braden, R., \"Requirements for Internet Hosts -\n          \
    \        Communication Layers\", STD 3, RFC 1122, October 1989.\n   [RFC1191]\
    \      Mogul, J. and S. Deering, \"Path MTU discovery\",\n                  RFC\
    \ 1191, November 1990.\n   [RFC2119]      Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: 11.2.  Informational References
  contents:
  - "11.2.  Informational References\n   [BEHAVE-ICMP]  Srisuresh, P., Ford, B., Sivakumar,\
    \ S., and S. Guha,\n                  \"NAT Behavioral Requirements for ICMP protocol\"\
    , Work\n                  in Progress, June 2008.\n   [NAT-MIB]      Rohit, R.,\
    \ Srisuresh, P., Raghunarayan, R., Pai, N.,\n                  and C. Wang, \"\
    Definitions of Managed Objects for\n                  Network Address Translators\
    \ (NAT)\", RFC 4008,\n                  March 2005.\n   [NATBLASTER]   Biggadike,\
    \ A., Ferullo, D., Wilson, G., and A. Perrig,\n                  \"NATBLASTER:\
    \ Establishing TCP connections between\n                  hosts behind NATs\"\
    , Proceedings of the ACM SIGCOMM\n                  Asia Workshop (Beijing, China),\
    \ April 2005.\n   [P2PNAT]       Ford, B., Srisuresh, P., and D. Kegel, \"Peer-to-peer\n\
    \                  communication across network address translators\",\n     \
    \             Proceedings of the USENIX Annual Technical\n                  Conference\
    \ (Anaheim, CA), April 2005.\n   [RFC1337]      Braden, B., \"TIME-WAIT Assassination\
    \ Hazards in TCP\",\n                  RFC 1337, May 1992.\n   [RFC1644]     \
    \ Braden, B., \"T/TCP -- TCP Extensions for Transactions\n                  Functional\
    \ Specification\", RFC 1644, July 1994.\n   [RFC2018]      Mathis, M., Mahdavi,\
    \ J., Floyd, S., and A. Romanow,\n                  \"TCP Selective Acknowledgment\
    \ Options\", RFC 2018,\n                  October 1996.\n   [RFC2663]      Srisuresh,\
    \ P. and M. Holdrege, \"IP Network Address\n                  Translator (NAT)\
    \ Terminology and Considerations\",\n                  RFC 2663, August 1999.\n\
    \   [RFC2923]      Lahey, K., \"TCP Problems with Path MTU Discovery\",\n    \
    \              RFC 2923, September 2000.\n   [RFC3022]      Srisuresh, P. and\
    \ K. Egevang, \"Traditional IP Network\n                  Address Translator (Traditional\
    \ NAT)\", RFC 3022,\n                  January 2001.\n   [RFC4614]      Duke,\
    \ M., Braden, R., Eddy, W., and E. Blanton, \"A\n                  Roadmap for\
    \ Transmission Control Protocol (TCP)\n                  Specification Documents\"\
    , RFC 4614, September 2006.\n   [RFC4953]      Touch, J., \"Defending TCP Against\
    \ Spoofing Attacks\",\n                  RFC 4953, July 2007.\n   [STUNT]    \
    \    Guha, S. and P. Francis, \"NUTSS: A SIP based approach\n                \
    \  to UDP and TCP connectivity\", Proceedings of the ACM\n                  SIGCOMM\
    \ Workshop on Future Directions in Network\n                  Architecture (Portland,\
    \ OR), August 2004.\n   [TCPTRAV]      Guha, S. and P. Francis, \"Characterization\
    \ and\n                  Measurement of TCP Traversal through NATs and\n     \
    \             Firewalls\", Proceedings of the Internet Measurement\n         \
    \         Conference (Berkeley, CA), October 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Saikat Guha (editor)\n   Cornell University\n   331 Upson\
    \ Hall\n   Ithaca, NY  14853\n   US\n   Phone: +1 607 255 1008\n   EMail: saikat@cs.cornell.edu\n\
    \   Kaushik Biswas\n   Cisco Systems, Inc.\n   170 West Tasman Dr.\n   San Jose,\
    \ CA  95134\n   US\n   Phone: +1 408 525 5134\n   EMail: kbiswas@cisco.com\n \
    \  Bryan Ford\n   Max Planck Institute for Software Systems\n   Campus Building\
    \ E1 4\n   D-66123 Saarbruecken\n   Germany\n   Phone: +49-681-9325657\n   EMail:\
    \ baford@mpi-sws.org\n   Senthil Sivakumar\n   Cisco Systems, Inc.\n   7100-8\
    \ Kit Creek Road\n   PO Box 14987\n   Research Triangle Park, NC  27709-4987\n\
    \   US\n   Phone: +1 919 392 5158\n   EMail: ssenthil@cisco.com\n   Pyda Srisuresh\n\
    \   Kazeon Systems, Inc.\n   1161 San Antonio Rd.\n   Mountain View, CA  94043\n\
    \   US\n   Phone: +1 408 836 4773\n   EMail: srisuresh@yahoo.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
