- contents:
  - '            Returning Values from Forms: multipart/form-data

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines the multipart/form-data media type, which\n
    \  can be used by a wide variety of applications and transported by a\n   wide
    variety of protocols as a way of returning a set of values as\n   the result of
    a user filling out a form.  This document obsoletes\n   RFC 2388.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7578.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Percent-Encoding Option . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Advice for Forms and Form Processing  . . . . . . . . . . .
    .   3\n   4.  Definition of multipart/form-data . . . . . . . . . . . . . .   4\n
    \    4.1.  \"Boundary\" Parameter of multipart/form-data . . . . . . .   4\n     4.2.
    \ Content-Disposition Header Field for Each Part  . . . . .   4\n     4.3.  Multiple
    Files for One Form Field . . . . . . . . . . . .   5\n     4.4.  Content-Type
    Header Field for Each Part . . . . . . . . .   5\n     4.5.  The Charset Parameter
    for \"text/plain\" Form Data  . . . .   5\n     4.6.  The _charset_ Field for
    Default Charset . . . . . . . . .   6\n     4.7.  Content-Transfer-Encoding Deprecated
    \ . . . . . . . . . .   6\n     4.8.  Other \"Content-\" Header Fields  . . .
    . . . . . . . . . .   7\n   5.  Operability Considerations  . . . . . . . . .
    . . . . . . . .   7\n     5.1.  Non-ASCII Field Names and Values  . . . . . .
    . . . . . .   7\n       5.1.1.  Avoid Non-ASCII Field Names . . . . . . . . .
    . . . .   7\n       5.1.2.  Interpreting Forms and Creating multipart/form-data\n
    \              Data  . . . . . . . . . . . . . . . . . . . . . . . .   7\n       5.1.3.
    \ Parsing and Interpreting Form Data  . . . . . . . . .   8\n     5.2.  Ordered
    Fields and Duplicated Field Names . . . . . . . .   8\n     5.3.  Interoperability
    with Web Applications  . . . . . . . . .   8\n     5.4.  Correlating Form Data
    with the Original Form  . . . . . .   9\n   6.  IANA Considerations . . . . .
    . . . . . . . . . . . . . . . .   9\n   7.  Security Considerations . . . . .
    . . . . . . . . . . . . . .   9\n   8.  Media Type Registration for multipart/form-data
    . . . . . . .  10\n   9.  References  . . . . . . . . . . . . . . . . . . . .
    . . . . .  11\n     9.1.  Normative References  . . . . . . . . . . . . . . .
    . . .  11\n     9.2.  Informative References  . . . . . . . . . . . . . . . .
    .  12\n   Appendix A.  Changes from RFC 2388  . . . . . . . . . . . . . . .  14\n
    \  Appendix B.  Alternatives . . . . . . . . . . . . . . . . . . . .  14\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  15\n   Author's Address  .
    . . . . . . . . . . . . . . . . . . . . . . .  15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In many applications, it is possible for a user to be presented
    with\n   a form.  The user will fill out the form, including information that\n
    \  is typed, generated by user input, or included from files that the\n   user
    has selected.  When the form is filled out, the data from the\n   form is sent
    from the user to the receiving application.\n   The definition of multipart/form-data
    is derived from one of those\n   applications, originally set out in [RFC1867]
    and subsequently\n   incorporated into HTML 3.2 [W3C.REC-html32-19970114], where
    forms are\n   expressed in HTML, and the form data is sent via HTTP or electronic\n
    \  mail.  This representation is widely implemented in numerous web\n   browsers
    and web servers.\n   However, multipart/form-data is also used for forms that
    are\n   presented using representations other than HTML (spreadsheets, PDF,\n
    \  etc.) and for transport using means other than electronic mail or\n   HTTP;
    it is used in distributed applications that do not involve\n   forms at all or
    do not have users filling out the form.  For this\n   reason, this document defines
    a general syntax and semantics\n   independent of the application for which it
    is used, with specific\n   rules for web applications noted in context.\n   The
    key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in BCP 14, RFC 2119\n   [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Percent-Encoding Option\n   Within this specification, \"percent-encoding\"
    (as defined in\n   [RFC3986]) is offered as a possible way of encoding characters
    in\n   file names that are otherwise disallowed, including non-ASCII\n   characters,
    spaces, control characters, and so forth.  The encoding\n   is created replacing
    each non-ASCII or disallowed character with a\n   sequence, where each byte of
    the UTF-8 encoding of the character is\n   represented by a percent-sign (%) followed
    by the (case-insensitive)\n   hexadecimal of that byte.\n"
  title: 2.  Percent-Encoding Option
- contents:
  - "3.  Advice for Forms and Form Processing\n   The representation and interpretation
    of forms and the nature of form\n   processing is not specified by this document.
    \ However, for forms and\n   form processing that result in the generation of
    multipart/form-data,\n   some suggestions are included.\n   In a form, there is
    generally a sequence of fields, where each field\n   is expected to be supplied
    with a value, e.g., by a user who fills\n   out the form.  Each field has a name.
    \ After a form has been filled\n   out and the form's data is \"submitted\", the
    form processing results\n   in a set of values for each field -- the \"form data\".\n
    \  In forms that work with multipart/form-data, field names could be\n   arbitrary
    Unicode strings; however, restricting field names to ASCII\n   will help avoid
    some interoperability issues (see Section 5.1).\n   Within a given form, ensuring
    field names are unique is also helpful.\n   Some fields may have default values
    or presupplied values in the form\n   itself.  Fields with presupplied values
    might be hidden or invisible;\n   this allows using generic processing for form
    data from a variety of\n   actual forms.\n"
  title: 3.  Advice for Forms and Form Processing
- contents:
  - "4.  Definition of multipart/form-data\n   The media type multipart/form-data
    follows the model of multipart\n   MIME data streams as specified in Section 5.1
    of [RFC2046]; changes\n   are noted in this document.\n   A multipart/form-data
    body contains a series of parts separated by a\n   boundary.\n"
  - contents:
    - "4.1.  \"Boundary\" Parameter of multipart/form-data\n   As with other multipart
      types, the parts are delimited with a\n   boundary delimiter, constructed using
      CRLF, \"--\", and the value of\n   the \"boundary\" parameter.  The boundary
      is supplied as a \"boundary\"\n   parameter to the multipart/form-data type.
      \ As noted in Section 5.1\n   of [RFC2046], the boundary delimiter MUST NOT
      appear inside any of\n   the encapsulated parts, and it is often necessary to
      enclose the\n   \"boundary\" parameter values in quotes in the Content-Type
      header\n   field.\n"
    title: 4.1.  "Boundary" Parameter of multipart/form-data
  - contents:
    - "4.2.  Content-Disposition Header Field for Each Part\n   Each part MUST contain
      a Content-Disposition header field [RFC2183]\n   where the disposition type
      is \"form-data\".  The Content-Disposition\n   header field MUST also contain
      an additional parameter of \"name\"; the\n   value of the \"name\" parameter
      is the original field name from the\n   form (possibly encoded; see Section
      5.1).  For example, a part might\n   contain a header field such as the following,
      with the body of the\n   part containing the form data of the \"user\" field:\n
      \          Content-Disposition: form-data; name=\"user\"\n   For form data that
      represents the content of a file, a name for the\n   file SHOULD be supplied
      as well, by using a \"filename\" parameter of\n   the Content-Disposition header
      field.  The file name isn't mandatory\n   for cases where the file name isn't
      available or is meaningless or\n   private; this might result, for example,
      when selection or drag-and-\n   drop is used or when the form data content is
      streamed directly from\n   a device.\n   If a \"filename\" parameter is supplied,
      the requirements of\n   Section 2.3 of [RFC2183] for the \"receiving MUA\" (i.e.,
      the receiving\n   Mail User Agent) apply to receivers of multipart/form-data
      as well:\n   do not use the file name blindly, check and possibly change to
      match\n   local file system conventions if applicable, and do not use directory\n
      \  path information that may be present.\n   In most multipart types, the MIME
      header fields in each part are\n   restricted to US-ASCII; for compatibility
      with those systems, file\n   names normally visible to users MAY be encoded
      using the percent-\n   encoding method in Section 2, following how a \"file:\"
      URI\n   [URI-SCHEME] might be encoded.\n   NOTE: The encoding method described
      in [RFC5987], which would add a\n   \"filename*\" parameter to the Content-Disposition
      header field, MUST\n   NOT be used.\n   Some commonly deployed systems use multipart/form-data
      with file\n   names directly encoded including octets outside the US-ASCII range.\n
      \  The encoding used for the file names is typically UTF-8, although\n   HTML
      forms will use the charset associated with the form.\n"
    title: 4.2.  Content-Disposition Header Field for Each Part
  - contents:
    - "4.3.  Multiple Files for One Form Field\n   The form data for a form field
      might include multiple files.\n   [RFC2388] suggested that multiple files for
      a single form field be\n   transmitted using a nested \"multipart/mixed\" part.
      \ This usage is\n   deprecated.\n   To match widely deployed implementations,
      multiple files MUST be sent\n   by supplying each file in a separate part but
      all with the same\n   \"name\" parameter.\n   Receiving applications intended
      for wide applicability (e.g.,\n   multipart/form-data parsing libraries) SHOULD
      also support the older\n   method of supplying multiple files.\n"
    title: 4.3.  Multiple Files for One Form Field
  - contents:
    - "4.4.  Content-Type Header Field for Each Part\n   Each part MAY have an (optional)
      \"Content-Type\" header field, which\n   defaults to \"text/plain\".  If the
      contents of a file are to be sent,\n   the file data SHOULD be labeled with
      an appropriate media type, if\n   known, or \"application/octet-stream\".\n"
    title: 4.4.  Content-Type Header Field for Each Part
  - contents:
    - "4.5.  The Charset Parameter for \"text/plain\" Form Data\n   In the case where
      the form data is text, the charset parameter for\n   the \"text/plain\" Content-Type
      MAY be used to indicate the character\n   encoding used in that part.  For example,
      a form with a text field in\n   which a user typed \"Joe owes <eu>100\", where
      <eu> is the Euro symbol,\n   might have form data returned as:\n       --AaB03x\n
      \      content-disposition: form-data; name=\"field1\"\n       content-type:
      text/plain;charset=UTF-8\n       content-transfer-encoding: quoted-printable\n
      \      Joe owes =E2=82=AC100.\n       --AaB03x\n   In practice, many widely
      deployed implementations do not supply a\n   charset parameter in each part,
      but rather, they rely on the notion\n   of a \"default charset\" for a multipart/form-data
      instance.\n   Subsequent sections will explain how the default charset is\n
      \  established.\n"
    title: 4.5.  The Charset Parameter for "text/plain" Form Data
  - contents:
    - "4.6.  The _charset_ Field for Default Charset\n   Some form-processing applications
      (including HTML) have the\n   convention that the value of a form entry with
      entry name \"_charset_\"\n   and type \"hidden\" is automatically set when the
      form is opened; the\n   value is used as the default charset of text field values
      (see form-\n   charset in Section 5.1.2).  In such cases, the value of the default\n
      \  charset for each \"text/plain\" part without a charset parameter is the\n
      \  supplied value.  For example:\n       --AaB03x\n       content-disposition:
      form-data; name=\"_charset_\"\n       iso-8859-1\n       --AaB03x--\n       content-disposition:
      form-data; name=\"field1\"\n       ...text encoded in iso-8859-1 ...\n       AaB03x--\n"
    title: 4.6.  The _charset_ Field for Default Charset
  - contents:
    - "4.7.  Content-Transfer-Encoding Deprecated\n   Previously, it was recommended
      that senders use a Content-Transfer-\n   Encoding encoding (such as \"quoted-printable\")
      for each non-ASCII\n   part of a multipart/form-data body because that would
      allow use in\n   transports that only support a \"7bit\" encoding.  This use
      is\n   deprecated for use in contexts that support binary data such as HTTP.\n
      \  Senders SHOULD NOT generate any parts with a Content-Transfer-\n   Encoding
      header field.\n   Currently, no deployed implementations that send such bodies
      have\n   been discovered.\n"
    title: 4.7.  Content-Transfer-Encoding Deprecated
  - contents:
    - "4.8.  Other \"Content-\" Header Fields\n   The multipart/form-data media type
      does not support any MIME header\n   fields in parts other than Content-Type,
      Content-Disposition, and (in\n   limited circumstances) Content-Transfer-Encoding.
      \ Other header\n   fields MUST NOT be included and MUST be ignored.\n"
    title: 4.8.  Other "Content-" Header Fields
  title: 4.  Definition of multipart/form-data
- contents:
  - '5.  Operability Considerations

    '
  - contents:
    - "5.1.  Non-ASCII Field Names and Values\n   Normally, MIME header fields in
      multipart bodies are required to\n   consist only of 7-bit data in the US-ASCII
      character set.  While\n   [RFC2388] suggested that non-ASCII field names be
      encoded according\n   to the method in [RFC2047], this practice doesn't seem
      to have been\n   followed widely.\n   This specification makes three sets of
      recommendations for three\n   different states of workflow.\n"
    - contents:
      - "5.1.1.  Avoid Non-ASCII Field Names\n   For broadest interoperability with
        existing deployed software, those\n   creating forms SHOULD avoid non-ASCII
        field names.  This should not\n   be a burden because, in general, the field
        names are not visible to\n   users.  The field names in the underlying need
        not match what the\n   user sees on the screen.\n   If non-ASCII field names
        are unavoidable, form or application\n   creators SHOULD use UTF-8 uniformly.
        \ This will minimize\n   interoperability problems.\n"
      title: 5.1.1.  Avoid Non-ASCII Field Names
    - contents:
      - "5.1.2.  Interpreting Forms and Creating multipart/form-data Data\n   Some
        applications of this specification will supply a character\n   encoding to
        be used for interpretation of the multipart/form-data\n   body.  In particular,
        HTML 5 [W3C.REC-html5-20141028] uses\n   o  the content of a \"_charset_\"
        field, if there is one;\n   o  the value of an accept-charset attribute of
        the <form> element, if\n      there is one;\n   o  the character encoding
        of the document containing the form, if it\n      is US-ASCII compatible;\n
        \  o  otherwise, UTF-8.\n   Call this value the form-charset.  Any text, whether
        field name,\n   field value, or (\"text/plain\") form data that uses characters
        outside\n   the ASCII range MAY be represented directly encoded in the form-\n
        \  charset.\n"
      title: 5.1.2.  Interpreting Forms and Creating multipart/form-data Data
    - contents:
      - "5.1.3.  Parsing and Interpreting Form Data\n   While this specification provides
        guidance for the creation of\n   multipart/form-data, parsers and interpreters
        should be aware of the\n   variety of implementations.  File systems differ
        as to whether and\n   how they normalize Unicode names, for example.  The
        matching of form\n   elements to form-data parts may rely on a fuzzier match.
        \ In\n   particular, some multipart/form-data generators might have followed\n
        \  the previous advice of [RFC2388] and used the \"encoded-word\" method\n
        \  of encoding non-ASCII values, as described in [RFC2047]:\n      encoded-word
        = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n   Others have
        been known to follow [RFC2231], to send unencoded UTF-8,\n   or even to send
        strings encoded in the form-charset.\n   For this reason, interpreting multipart/form-data
        (even from\n   conforming generators) may require knowing the charset used
        in form\n   encoding in cases where the _charset_ field value or a charset\n
        \  parameter of a \"text/plain\" Content-Type header field is not\n   supplied.\n"
      title: 5.1.3.  Parsing and Interpreting Form Data
    title: 5.1.  Non-ASCII Field Names and Values
  - contents:
    - "5.2.  Ordered Fields and Duplicated Field Names\n   Form processors given forms
      with a well-defined ordering SHOULD send\n   back results in order.  (Note that
      there are some forms that do not\n   define a natural order.)  Intermediaries
      MUST NOT reorder the\n   results.  Form parts with identical field names MUST
      NOT be\n   coalesced.\n"
    title: 5.2.  Ordered Fields and Duplicated Field Names
  - contents:
    - "5.3.  Interoperability with Web Applications\n   Many web applications use
      the \"application/x-www-form-urlencoded\"\n   method for returning data from
      forms.  This format is quite compact,\n   for example:\n      name=Xavier+Xantico&verdict=Yes&colour=Blue&happy=sad&Utf%F6r=Send\n
      \  However, there is no opportunity to label the enclosed data with a\n   content
      type, apply a charset, or use other encoding mechanisms.\n   Many form-interpreting
      programs (primarily web browsers) now\n   implement and generate multipart/form-data,
      but a receiving\n   application might also need to support the\n   \"application/x-www-form-urlencoded\"
      format.\n"
    title: 5.3.  Interoperability with Web Applications
  - contents:
    - "5.4.  Correlating Form Data with the Original Form\n   This specification provides
      no specific mechanism by which multipart/\n   form-data can be associated with
      the form that caused it to be\n   transmitted.  This separation is intentional;
      many different forms\n   might be used for transmitting the same data.  In practice,\n
      \  applications may supply a specific form processing resource (in HTML,\n   the
      ACTION attribute in a FORM tag) for each different form.\n   Alternatively,
      data about the form might be encoded in a \"hidden\n   field\" (a field that
      is part of the form but that has a fixed value\n   to be transmitted back to
      the form-data processor).\n"
    title: 5.4.  Correlating Form Data with the Original Form
  title: 5.  Operability Considerations
- contents:
  - "6.  IANA Considerations\n   The media type registration of multipart/form-data
    has been updated\n   to point to this document, using the template in Section
    8.  In\n   addition, the registrations of the \"name\" parameter and the \"form-\n
    \  data\" value in the \"Content Disposition Values and Parameters\"\n   registry
    have been updated to both point to this document.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   All form-processing software should treat user
    supplied form-data\n   with sensitivity, as it often contains confidential or
    personally\n   identifying information.  There is widespread use of form \"auto-fill\"\n
    \  features in web browsers; these might be used to trick users to\n   unknowingly
    send confidential information when completing otherwise\n   innocuous tasks.  multipart/form-data
    does not supply any features\n   for checking integrity, ensuring confidentiality,
    avoiding user\n   confusion, or other security features; those concerns must be\n
    \  addressed by the form-filling and form-data-interpreting\n   applications.\n
    \  Applications that receive forms and process them must be careful not\n   to
    supply data back to the requesting form-processing site that was\n   not intended
    to be sent.\n   It is important when interpreting the filename of the Content-\n
    \  Disposition header field to not inadvertently overwrite files in the\n   recipient's
    file space.\n   User applications that request form information from users must
    be\n   careful not to cause a user to send information to the requestor or a\n
    \  third party unwillingly or unwittingly.  For example, a form might\n   request
    that spam information be sent to an unintended third party or\n   private information
    be sent to someone that the user might not\n   actually intend.  While this is
    primarily an issue for the\n   representation and interpretation of forms themselves
    (rather than\n   the data representation of the form data), the transportation
    of\n   private information must be done in a way that does not expose it to\n
    \  unwanted prying.\n   With the introduction of form-data that can reasonably
    send back the\n   content of files from a user's file space, the possibility arises\n
    \  that a user might be sent an automated script that fills out a form\n   and
    then sends one of the user's local files to another address.\n   Thus, additional
    caution is required when executing automated\n   scripting where form-data might
    include a user's files.\n   Files sent via multipart/form-data may contain arbitrary
    executable\n   content, and precautions against malicious content are necessary.\n
    \  The considerations of Sections 2.3 and 5 of [RFC2183], with respect\n   to
    the \"filename\" parameter of the Content-Disposition header field,\n   also apply
    to its usage here.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Media Type Registration for multipart/form-data\n   This section is the media
    type registration using the template from\n   [RFC6838].\n   Type name:  multipart\n
    \  Subtype name:  form-data\n   Required parameters:  boundary\n   Optional parameters:
    \ none\n   Encoding considerations:  Common use is BINARY.\n      In limited use
    (or transports that restrict the encoding to 7bit\n      or 8bit), each part is
    encoded separately using Content-Transfer-\n      Encoding; see Section 4.7.\n
    \  Security considerations:  See Section 7 of this document.\n   Interoperability
    considerations:  This document makes several\n      recommendations for interoperability
    with deployed\n      implementations, including Section 4.7.\n   Published specification:
    \ This document.\n   Applications that use this media type:  Numerous web browsers,\n
    \     servers, and web applications.\n   Fragment identifier considerations:  None;
    fragment identifiers are\n      not defined for this type.\n   Additional information:\n
    \  Additional information:\n         Deprecated alias names for this type: N/A\n
    \        Magic number(s): N/A\n         File extension(s): N/A\n         Macintosh
    file type code(s): N/A\n   Person & email address to contact for further information:
    \ Author of\n      this document.\n   Intended usage:  COMMON\n   Restrictions
    on usage:  none\n   Author:  Author of this document.\n   Change controller:  IETF\n
    \  Provisional registration:  N/A\n"
  title: 8.  Media Type Registration for multipart/form-data
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose
      Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC
      2046,\n              DOI 10.17487/RFC2046, November 1996,\n              <http://www.rfc-editor.org/info/rfc2046>.\n
      \  [RFC2047]  Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n              Part
      Three: Message Header Extensions for Non-ASCII Text\",\n              RFC 2047,
      DOI 10.17487/RFC2047, November 1996,\n              <http://www.rfc-editor.org/info/rfc2047>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2183]  Troost,
      R., Dorner, S., and K. Moore, Ed., \"Communicating\n              Presentation
      Information in Internet Messages: The\n              Content-Disposition Header
      Field\", RFC 2183,\n              DOI 10.17487/RFC2183, August 1997,\n              <http://www.rfc-editor.org/info/rfc2183>.\n
      \  [RFC2231]  Freed, N. and K. Moore, \"MIME Parameter Value and Encoded\n              Word
      Extensions: Character Sets, Languages, and\n              Continuations\", RFC
      2231, DOI 10.17487/RFC2231, November\n              1997, <http://www.rfc-editor.org/info/rfc2231>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC1867]  Nebel, E. and L. Masinter, \"Form-based
      File Upload in\n              HTML\", RFC 1867, DOI 10.17487/RFC1867, November
      1995,\n              <http://www.rfc-editor.org/info/rfc1867>.\n   [RFC2388]
      \ Masinter, L., \"Returning Values from Forms: multipart/\n              form-data\",
      RFC 2388, DOI 10.17487/RFC2388, August 1998,\n              <http://www.rfc-editor.org/info/rfc2388>.\n
      \  [RFC5987]  Reschke, J., \"Character Set and Language Encoding for\n              Hypertext
      Transfer Protocol (HTTP) Header Field\n              Parameters\", RFC 5987,
      DOI 10.17487/RFC5987, August 2010,\n              <http://www.rfc-editor.org/info/rfc5987>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n   [URI-SCHEME]\n
      \             Kerwin, M., \"The file URI Scheme\", Work in Progress,\n              draft-ietf-appsawg-file-scheme-02,
      May 2015.\n   [W3C.REC-html32-19970114]\n              Raggett, D., \"HTML 3.2
      Reference Specification\", W3C\n              Recommendation REC-html32-19970114,
      January 1997,\n              <http://www.w3.org/TR/REC-html32-19970114>.\n   [W3C.REC-html5-20141028]\n
      \             Hickson, I., Berjon, R., Faulkner, S., Leithead, T.,\n              Navara,
      E., O'Connor, E., and S. Pfeiffer, \"HTML5\", W3C\n              Recommendation
      REC-html5-20141028, October 2014,\n              <http://www.w3.org/TR/2014/REC-html5-20141028>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Changes from RFC 2388\n   The handling of non-ASCII field names
    has changed -- the method\n   described in RFC 2047 is no longer recommended;
    instead, it is\n   suggested that senders send UTF-8 field names directly and
    that file\n   names be sent directly in the form-charset.\n   The handling of
    multiple files submitted as the result of a single\n   form field (e.g., HTML's
    <input type=file multiple> element) results\n   in each file having its own top-level
    part with the same name\n   parameter; the method of using a nested \"multipart/mixed\"
    from\n   [RFC2388] is no longer recommended for creators and is not required\n
    \  for receivers as there are no known implementations of senders.\n   The _charset_
    convention and use of an explicit \"form-data\" charset\n   is documented; also,
    \"boundary\" is now a required parameter in\n   Content-Type.\n   The relationship
    of the ordering of fields within a form and the\n   ordering of returned values
    within multipart/form-data was not\n   defined before, nor was the handling of
    the case where a form has\n   multiple fields with the same name.\n   Various
    editorial changes were made; they include removing the\n   obsolete discussion
    of alternatives from the appendix, updating the\n   references, and moving the
    outline of form processing into the\n   introduction.\n"
  title: Appendix A.  Changes from RFC 2388
- contents:
  - "Appendix B.  Alternatives\n   There are numerous alternative ways in which form
    data can be\n   encoded; many are listed in Section 5.2 of [RFC2388].  The multipart/\n
    \  form-data encoding is verbose, especially if there are many fields\n   with
    short values.  In most use cases, this overhead isn't\n   significant.\n   More
    problematic are the differences introduced when implementors\n   opted to not
    follow [RFC2388] when encoding non-ASCII field names\n   (perhaps because \"may\"
    should have been \"MUST\").  As a result,\n   parsers need to be more complex
    for matching against the possible\n   outputs of various encoding methods.\n"
  title: Appendix B.  Alternatives
- contents:
  - "Acknowledgements\n   Many thanks to the those who reviewed this document -- Alexey\n
    \  Melnikov, Salvatore Loreto, Chris Lonvick, Kathleen Moriarty, Barry\n   Leiba,
    Julian Reschke, Tom Petch, Ned Freed, Cedric Brancourt, as\n   well as others,
    including Ian Hickson, who requested it be produced\n   in the first place.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Larry Masinter\n   Adobe\n   Email: masinter@adobe.com\n
    \  URI:   http://larry.masinter.net\n"
  title: Author's Address
