- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                             S. Jiang
  contents:
  - "Internet Research Task Force (IRTF)                             S. Jiang\n  \
    \           General Gap Analysis for Autonomic Networking\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a problem statement and general gap analysis\n\
    \   for an IP-based Autonomic Network that is mainly based on distributed\n  \
    \ network devices.  The document provides background by reviewing the\n   current\
    \ status of autonomic aspects of IP networks and the extent to\n   which current\
    \ network management depends on centralization and human\n   administrators. \
    \ Finally, the document outlines the general features\n   that are missing from\
    \ current network abilities and are needed in the\n   ideal Autonomic Network\
    \ concept.\n   This document is a product of the IRTF's Network Management Research\n\
    \   Group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Network\n   Management Research Group of the Internet Research Task Force\
    \ (IRTF).\n   Documents approved for publication by the IRSG are not a candidate\n\
    \   for any level of Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7576.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Automatic and Autonomic Aspects of Current IP Networks \
    \ . . .   3\n     3.1.  IP Address Management and DNS . . . . . . . . . . . .\
    \ . .   3\n     3.2.  Routing . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n     3.3.  Configuration of Default Router in a Host . . . . . . . .\
    \   5\n     3.4.  Hostname Lookup . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n     3.5.  User Authentication and Accounting  . . . . . . . . . . .   6\n\
    \     3.6.  Security  . . . . . . . . . . . . . . . . . . . . . . . .   6\n  \
    \   3.7.  State Synchronization . . . . . . . . . . . . . . . . . .   7\n   4.\
    \  Current Non-autonomic Behaviors . . . . . . . . . . . . . . .   7\n     4.1.\
    \  Building a New Network  . . . . . . . . . . . . . . . . .   7\n     4.2.  Network\
    \ Maintenance and Management  . . . . . . . . . . .   8\n     4.3.  Security Setup\
    \  . . . . . . . . . . . . . . . . . . . . .   9\n     4.4.  Troubleshooting and\
    \ Recovery  . . . . . . . . . . . . . .   9\n   5.  Features Needed by Autonomic\
    \ Networks . . . . . . . . . . . .  10\n     5.1.  More Coordination among Devices\
    \ or Network Partitions . .  11\n     5.2.  Reusable Common Components  . . .\
    \ . . . . . . . . . . . .  11\n     5.3.  Secure Control Plane  . . . . . . .\
    \ . . . . . . . . . . .  12\n     5.4.  Less Configuration  . . . . . . . . .\
    \ . . . . . . . . . .  12\n     5.5.  Forecasting and Dry Runs  . . . . . . .\
    \ . . . . . . . . .  13\n     5.6.  Benefit from Knowledge  . . . . . . . . .\
    \ . . . . . . . .  13\n   6.  Security Considerations . . . . . . . . . . . .\
    \ . . . . . . .  14\n   7.  Informative References  . . . . . . . . . . . . .\
    \ . . . . . .  14\n   Acknowledgements  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  17\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The general goals and relevant definitions for Autonomic\
    \ Networking\n   are discussed in [RFC7575].  In summary, the fundamental goal\
    \ of an\n   Autonomic Network is self-management, including self-configuration,\n\
    \   self-optimization, self-healing, and self-protection.  Whereas\n   interior\
    \ gateway routing protocols such as OSPF and IS-IS largely\n   exhibit these properties,\
    \ most other aspects of networking require\n   top-down configuration, often involving\
    \ human administrators and a\n   considerable degree of centralization.  In essence,\
    \ Autonomic\n   Networking is putting all network configurations onto the same\n\
    \   footing as routing, limiting manual or database-driven configuration\n   to\
    \ an essential minimum.  It should be noted that this is highly\n   unlikely to\
    \ eliminate the need for human administrators, because many\n   of their essential\
    \ tasks will remain.  The idea is to eliminate\n   tedious and error-prone tasks,\
    \ for example, manual calculations,\n   cross-checking between two different configuration\
    \ files, or tedious\n   data entry.  Higher-level operational tasks, and complex\n\
    \   troubleshooting, will remain to be done by humans.\n   This document represents\
    \ the consensus of the IRTF's Network\n   Management Research Group (NMRG).  It\
    \ first provides background by\n   identifying examples of partial autonomic behavior\
    \ in the Internet\n   and by describing important areas of non-autonomic behavior.\
    \  Based\n   on these observations, it then describes missing general mechanisms\n\
    \   that would allow autonomic behaviors to be added throughout the\n   Internet.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The terminology defined in [RFC7575] is used in this document.\n"
- title: 3.  Automatic and Autonomic Aspects of Current IP Networks
  contents:
  - "3.  Automatic and Autonomic Aspects of Current IP Networks\n   This section discusses\
    \ the history and current status of automatic or\n   autonomic operations in various\
    \ aspects of network configuration, in\n   order to establish a baseline for the\
    \ gap analysis.  In particular,\n   routing protocols already contain elements\
    \ of autonomic processes,\n   such as information exchange and state synchronization.\n"
- title: 3.1.  IP Address Management and DNS
  contents:
  - "3.1.  IP Address Management and DNS\n   For many years, there was no alternative\
    \ to completely manual and\n   static management of IP addresses and their prefixes.\
    \  Once a site\n   had received an IPv4 address assignment (usually a Class C\
    \ /24 or\n   Class B /16, and rarely a Class A /8), it was a matter of paper-and-\n\
    \   pencil design of the subnet plan (if relevant) and the addressing\n   plan\
    \ itself.  Subnet prefixes were manually configured into routers,\n   and /32\
    \ addresses were assigned administratively to individual host\n   computers and\
    \ configured manually by system administrators.  Records\n   were typically kept\
    \ in a plain text file or a simple spreadsheet.\n   Clearly, this method was clumsy\
    \ and error-prone as soon as a site had\n   more than a few tens of hosts, but\
    \ it had to be used until DHCP\n   [RFC2131] became a viable solution during the\
    \ second half of the\n   1990s.  DHCP made it possible to avoid manual configuration\
    \ of\n   individual hosts (except, in many deployments, for a small number of\n\
    \   servers configured with static addresses).  Even so, prefixes had to\n   be\
    \ manually assigned to subnets and their routers, and DHCP servers\n   had to\
    \ be configured accordingly.\n   In terms of management, there is a linkage between\
    \ IP address\n   management and DNS management, because DNS mappings typically\
    \ need to\n   be appropriately synchronized with IP address assignments.  At\n\
    \   roughly the same time as DHCP came into widespread use, it became\n   very\
    \ laborious to manually maintain DNS source files in step with IP\n   address\
    \ assignments.  Because of reverse DNS lookup, it also became\n   necessary to\
    \ synthesize DNS names even for hosts that only played the\n   role of clients.\
    \  Therefore, it became necessary to synchronize DHCP\n   server tables with forward\
    \ and reverse DNS.  For this reason, IP\n   address management tools emerged,\
    \ as discussed for the case of\n   renumbering in [RFC7010].  These are, however,\
    \ centralized solutions\n   that do not exhibit autonomic properties as defined\
    \ in [RFC7575].\n   A related issue is prefix delegation, especially in IPv6 when\
    \ more\n   than one prefix may be delegated to the same physical subnet.  DHCPv6\n\
    \   Prefix Delegation [RFC3633] is a useful solution, but it requires\n   specific\
    \ configuration so cannot be considered autonomic.  How this\n   topic is to be\
    \ handled in home networks is still in discussion\n   [Pfister].  Still further\
    \ away is autonomic assignment and delegation\n   of routable IPv4 subnet prefixes.\n\
    \   An IPv6 network needs several aspects of host address assignments to\n   be\
    \ configured.  The network might use stateless address\n   autoconfiguration [RFC4862]\
    \ or DHCPv6 [RFC3315] in stateless or\n   stateful modes, and there are various\
    \ alternative forms of Interface\n   Identifier [RFC7136].\n   Another feature\
    \ is the possibility of Dynamic DNS Update [RFC2136].\n   With appropriate security,\
    \ this is an automatic approach, where no\n   human intervention is required to\
    \ create the DNS records for a host\n   after it acquires a new address.  However,\
    \ there are coexistence\n   issues with a traditional DNS setup, as described\
    \ in [RFC7010].\n"
- title: 3.2.  Routing
  contents:
  - "3.2.  Routing\n   Since a very early stage, it has been a goal that Internet\
    \ routing\n   should be self-healing when there is a failure of some kind in the\n\
    \   routing system (i.e., a link or a router goes wrong).  Also, the\n   problem\
    \ of finding optimal routes through a network was identified\n   many years ago\
    \ as a problem in mathematical graph theory, for which\n   well known algorithms\
    \ were discovered (the Dijkstra and Bellman-Ford\n   algorithms).  Thus, routing\
    \ protocols became largely autonomic from\n   the start, as it was clear that\
    \ manual configuration of routing\n   tables for a large network was impractical.\n\
    \   IGP routers do need some initial configuration data to start up the\n   autonomic\
    \ routing protocol.  Also, BGP-4 routers need detailed static\n   configuration\
    \ of routing policy data.\n"
- title: 3.3.  Configuration of Default Router in a Host
  contents:
  - "3.3.  Configuration of Default Router in a Host\n   Originally, the configuration\
    \ of a default router in a host was a\n   manual operation.  Since the deployment\
    \ of DHCP, this has been\n   automatic as far as most IPv4 hosts are concerned,\
    \ but the DHCP\n   server must be appropriately configured.  In simple environments\
    \ such\n   as a home network, the DHCP server resides in the same box as the\n\
    \   default router, so this configuration is also automatic.  In more\n   complex\
    \ environments, where an independent DHCP server or a local\n   DHCP relay is\
    \ used, DHCP configuration is more complex and not\n   automatic.\n   In IPv6\
    \ networks, the default router is provided by Router\n   Advertisement messages\
    \ [RFC4861] from the router itself, and all IPv6\n   hosts make use of it.  The\
    \ router may also provide more complex Route\n   Information Options.  The process\
    \ is essentially autonomic as far as\n   all IPv6 hosts are concerned, and DHCPv6\
    \ is not involved.  However,\n   there are still open issues when more than one\
    \ prefix is in use on a\n   subnet, and more than one first-hop router may be\
    \ available as a\n   result (see, for example, [RFC6418]).\n"
- title: 3.4.  Hostname Lookup
  contents:
  - "3.4.  Hostname Lookup\n   Originally, hostnames were looked up in a static table,\
    \ often\n   referred to as \"hosts.txt\" from its traditional file name.  When\
    \ the\n   DNS was deployed during the 1980s, all hosts needed DNS resolver code\n\
    \   and needed to be configured with the IP addresses (not the names) of\n   suitable\
    \ DNS servers.  Like the default router, these were originally\n   manually configured.\
    \  Today, they are provided automatically via DHCP\n   or DHCPv6 [RFC3315].  For\
    \ IPv6 end systems, there is also a way for\n   them to be provided automatically\
    \ via a Router Advertisement option.\n   However, the DHCP or DHCPv6 server, or\
    \ the IPv6 router, needs to be\n   configured with the appropriate DNS server\
    \ addresses.  Additionally,\n   some networks deploy Multicast DNS [RFC6762] locally\
    \ to provide\n   additional automation of the name space.\n"
- title: 3.5.  User Authentication and Accounting
  contents:
  - "3.5.  User Authentication and Accounting\n   Originally, user authentication\
    \ and accounting was mainly based on\n   physical connectivity and the degree\
    \ of trust that follows from\n   direct connectivity.  Network operators charged\
    \ based on the setup of\n   dedicated physical links with users.  Automated user\
    \ authentication\n   was introduced by the Point-to-Point Protocol [RFC1661],\
    \ [RFC1994]\n   and RADIUS protocol [RFC2865] [RFC2866] in the early 1990s.  As\
    \ long\n   as a user completes online authentication through the RADIUS\n   protocol,\
    \ the accounting for that user starts on the corresponding\n   Authentication,\
    \ Authorization, and Accounting (AAA) server\n   automatically.  This mechanism\
    \ enables business models with charging\n   based on the amount of traffic or\
    \ time.  However, user authentication\n   information continues to be manually\
    \ managed by network\n   administrators.  It also becomes complex in the case\
    \ of mobile users\n   who roam between operators, since prior relationships between\
    \ the\n   operators are needed.\n"
- title: 3.6.  Security
  contents:
  - "3.6.  Security\n   Security has many aspects that need configuration and are\
    \ therefore\n   candidates to become autonomic.  On the other hand, it is essential\n\
    \   that a network's central policy be applied strictly for all security\n   configurations.\
    \  As a result, security has largely been based on\n   centrally imposed configurations.\n\
    \   Many aspects of security depend on policy, for example, password\n   rules,\
    \ privacy rules, firewall rulesets, intrusion detection and\n   prevention settings,\
    \ VPN configurations, and the choice of\n   cryptographic algorithms.  Policies\
    \ are, by definition, human made\n   and will therefore also persist in an autonomic\
    \ environment.\n   However, policies are becoming more high-level, abstracting\n\
    \   addressing, for example, and focusing on the user or application.\n   The\
    \ methods to manage, distribute, and apply policy and to monitor\n   compliance\
    \ and violations could be autonomic.\n   Today, many security mechanisms show\
    \ some autonomic properties.  For\n   example user authentication via IEEE 802.1x\
    \ allows automatic mapping\n   of users after authentication into logical contexts\
    \ (typically\n   VLANs).  While today configuration is still very important, the\n\
    \   overall mechanism displays signs of self-adaption to changing\n   situations.\n\
    \   BGP Flowspec [RFC5575] allows a partially autonomic threat-defense\n   mechanism,\
    \ where threats are identified, the flow information is\n   automatically distributed,\
    \ and counter-actions can be applied.\n   Today, typically a human operator is\
    \ still in the loop to check\n   correctness, but over time such mechanisms can\
    \ become more autonomic.\n   Negotiation capabilities, present in many security\
    \ protocols, also\n   display simple autonomic behaviors.  In this case, a security\
    \ policy\n   about algorithm strength can be configured into servers but will\n\
    \   propagate automatically to clients.\n"
- title: 3.7.  State Synchronization
  contents:
  - "3.7.  State Synchronization\n   Another area where autonomic processes between\
    \ peers are involved is\n   state synchronization.  In this case, several devices\
    \ start out with\n   inconsistent state and go through a peer-to-peer procedure\
    \ after\n   which their states are consistent.  Many autonomic or automatic\n\
    \   processes include some degree of implicit state synchronization.\n   Network\
    \ time synchronization [RFC5905] is a well-established explicit\n   example, guaranteeing\
    \ that a participating node's clock state is\n   synchronized with reliable time\
    \ servers within a defined margin of\n   error, without any overall point of control\
    \ of the synchronization\n   process.\n"
- title: 4.  Current Non-autonomic Behaviors
  contents:
  - "4.  Current Non-autonomic Behaviors\n   In current networks, many operations\
    \ are still heavily dependent on\n   human intelligence and decision, or on centralized\
    \ top-down network\n   management systems.  These operations are the targets of\
    \ Autonomic\n   Networking technologies.  The ultimate goal of Autonomic Networking\n\
    \   is to replace human and automated operations by autonomic functions,\n   so\
    \ that the networks can run independently without depending on a\n   human or\
    \ Network Management System (NMS) for routine details, while\n   maintaining central\
    \ control where required.  Of course, there would\n   still be the absolute minimum\
    \ of human input required, particularly\n   during the network-building stage,\
    \ emergencies, and difficult\n   troubleshooting.\n   This section analyzes the\
    \ existing human and central dependencies in\n   typical networks and suggests\
    \ cases where they could, in principle,\n   be replaced by autonomic behaviors.\n"
- title: 4.1.  Building a New Network
  contents:
  - "4.1.  Building a New Network\n   Building a network requires the operator to\
    \ analyze the requirements\n   of the new network, design a deployment architecture\
    \ and topology,\n   decide device locations and capacities, set up hardware, design\n\
    \   network services, choose and enable required protocols, configure\n   each\
    \ device and each protocol, set up central user authentication and\n   accounting\
    \ policies and databases, design and deploy security\n   mechanisms, etc.\n  \
    \ Overall, these jobs are quite complex work that cannot become fully\n   autonomic\
    \ in the foreseeable future.  However, part of these jobs may\n   be able to become\
    \ autonomic, such as detailed device and protocol\n   configurations and database\
    \ population.  The initial network\n   management policies/behaviors may also\
    \ be transplanted from other\n   networks and automatically localized.\n"
- title: 4.2.  Network Maintenance and Management
  contents:
  - "4.2.  Network Maintenance and Management\n   Network maintenance and management\
    \ are very different for ISP\n   networks and enterprise networks.  ISP networks\
    \ have to change much\n   more frequently than enterprise networks, given the\
    \ fact that ISP\n   networks have to serve a large number of customers who have\
    \ very\n   diversified requirements.  The current rigid model is that network\n\
    \   administrators design a limited number of services for customers to\n   order.\
    \  New requirements of network services may not be able to be\n   met quickly\
    \ by human management.  Given a real-time request, the\n   response must be autonomic,\
    \ in order to be flexible and quickly\n   deployed.  However, behind the interface,\
    \ describing abstracted\n   network information and user authorization management\
    \ may have to\n   depend on human intelligence from network administrators in\
    \ the\n   foreseeable future.  User identification integration/consolidation\n\
    \   among networks or network services is another challenge for Autonomic\n  \
    \ Network access.  Currently, many end users have to manually manage\n   their\
    \ user accounts and authentication information when they switch\n   among networks\
    \ or network services.\n   Classical network maintenance and management mainly\
    \ handle the\n   configuration of network devices.  Tools have been developed\
    \ to\n   enable remote management and make such management easier.  However,\n\
    \   the decision about each configuration detail depends either on human\n   intelligence\
    \ or rigid templates.  Therefore, these are the sources of\n   all network configuration\
    \ errors -- the human was wrong, the template\n   was wrong, or both were wrong.\
    \  This is also a barrier to increasing\n   the utility of network resources,\
    \ because the human managers cannot\n   respond quickly enough to network events,\
    \ such as traffic bursts,\n   that were not foreseen in the template.  For example,\
    \ currently, a\n   light load is often assumed in network design because there\
    \ is no\n   mechanism to properly handle a sudden traffic flood.  It is therefore\n\
    \   common to avoid performance collapses caused by traffic overload by\n   configuring\
    \ idle resources, with an overprovisioning ratio of at\n   least 2 being normal\
    \ [Xiao02].\n   There are grounds for concern that the introduction of new, more\n\
    \   flexible, methods of network configuration, typified by Software-\n   Defined\
    \ Networking (SDN), will only make the management problem more\n   complex unless\
    \ the details are managed automatically or\n   autonomically.  There is no doubt\
    \ that SDN creates both the necessity\n   and the opportunity for automation of\
    \ configuration management, e.g.,\n   [Kim13].  This topic is discussed from a\
    \ service provider viewpoint\n   in [RFC7149].\n   Autonomic decision processes\
    \ for configuration would enable dynamic\n   management of network resources (by\
    \ managing resource-relevant\n   configuration).  Self-adapting network configuration\
    \ would adjust the\n   network into the best possible situation; this would prevent\n\
    \   configuration errors from having lasting impact.\n"
- title: 4.3.  Security Setup
  contents:
  - "4.3.  Security Setup\n   Setting up security for a network generally requires\
    \ very detailed\n   human intervention or relies entirely on default configurations\
    \ that\n   may be too strict or too risky for the particular situation of the\n\
    \   network.  While some aspects of security are intrinsically top-down\n   in\
    \ nature (e.g., broadcasting a specific security policy to all\n   hosts), others\
    \ could be self-managed within the network.\n   In an Autonomic Network, where\
    \ nodes within a domain have a mutually\n   verifiable domain identity, security\
    \ processes could run entirely\n   automatically.  Nodes could identify each other\
    \ securely, negotiating\n   required security settings and even shared keys if\
    \ needed.  The\n   locations of the trust anchors (certificate authority, registration\n\
    \   authority), certificate revocation lists, policy server, etc., can be\n  \
    \ found by service discovery.  Transactions such as a download of a\n   certificate\
    \ revocation list can be authenticated via a common trust\n   anchor.  Policy\
    \ distribution can also be entirely automated and\n   secured via a common trust\
    \ anchor.\n   These concepts lead to a network where the intrinsic security is\n\
    \   automatic and applied by default, i.e., a \"self-protecting\" network.\n \
    \  For further discussion, see [Behringer].\n"
- title: 4.4.  Troubleshooting and Recovery
  contents:
  - "4.4.  Troubleshooting and Recovery\n   Current networks suffer difficulties in\
    \ locating the cause of network\n   failures.  Although network devices may issue\
    \ many warnings while\n   running, most of them are not sufficiently precise to\
    \ be identified\n   as errors.  Some of them are early warnings that would not\
    \ develop\n   into real errors.  Others are, in effect, random noise.  During\
    \ a\n   major failure, many different devices will issue multiple warnings\n \
    \  within a short time, causing overload for the NMS and the operators.\n   However,\
    \ for many scenarios, human experience is still vital to\n   identify real issues\
    \ and locate them.  This situation may be improved\n   by automatically associating\
    \ warnings from multiple network devices\n   together.  Also, introducing automated\
    \ learning techniques (comparing\n   current warnings with historical relationships\
    \ between warnings and\n   actual faults) could increase the possibility and success\
    \ rate of\n   Autonomic Network diagnoses and troubleshooting.\n   Depending on\
    \ the network errors, some of them (particularly hardware\n   failures) may always\
    \ require human intervention.  However, Autonomic\n   Network management behavior\
    \ may help to reduce the impact of errors,\n   for example, by switching traffic\
    \ flows around.  Today, this is\n   usually manual (except for classical routing\
    \ updates).  Fixing\n   software failures and configuration errors currently depends\
    \ on\n   humans and may even involve rolling back software versions and\n   rebooting\
    \ hardware.  Such problems could be autonomically corrected\n   if there were\
    \ diagnostics and recovery functions defined in advance\n   for them.  This would\
    \ fulfill the concept of self-healing.\n   Another possible autonomic function\
    \ is predicting device failures or\n   overloads before they occur.  A device\
    \ could predict its own failure\n   and warn its neighbors, or a device could\
    \ predict its neighbor's\n   failure.  In either case, an Autonomic Network could\
    \ respond as if\n   the failure had already occurred by routing around the problem\
    \ and\n   reporting the failure, with no disturbance to users.  The criteria\n\
    \   for predicting failure could be temperature, battery status, bit\n   error\
    \ rates, etc.  The criteria for predicting overload could be\n   increasing load\
    \ factor, latency, jitter, congestion loss, etc.\n"
- title: 5.  Features Needed by Autonomic Networks
  contents:
  - "5.  Features Needed by Autonomic Networks\n   There are innumerable properties\
    \ of network devices and end systems\n   that today need to be configured either\
    \ manually, by scripting, or by\n   using a management protocol such as the Network\
    \ Configuration\n   Protocol (NETCONF) [RFC6241].  In an Autonomic Network, all\
    \ of these\n   would need to either have satisfactory default values or be\n \
    \  configured automatically.  Some examples are parameters for tunnels\n   of\
    \ various kinds, flows (in an SDN context), quality of service,\n   service function\
    \ chaining, energy management, system identification,\n   and NTP configuration,\
    \ but the list is endless.\n   The task of Autonomic Networking is to incrementally\
    \ build up\n   individual autonomic processes that could progressively be combined\n\
    \   to respond to every type of network event.  Building on the preceding\n  \
    \ background information, and on the reference model in [RFC7575], this\n   section\
    \ outlines the gaps and missing features in general terms and,\n   in some cases,\
    \ mentions general design principles that should apply.\n"
- title: 5.1.  More Coordination among Devices or Network Partitions
  contents:
  - "5.1.  More Coordination among Devices or Network Partitions\n   Network services\
    \ are dependent on a number of devices and parameters\n   to be in place in a\
    \ certain order.  For example, after a power\n   failure, a coordinated sequence\
    \ of \"return to normal\" operations is\n   desirable (e.g., switches and routers\
    \ first, DNS servers second,\n   etc.).  Today, the correct sequence of events\
    \ is either known only by\n   a human administrator or automated in a central\
    \ script.  In a truly\n   Autonomic Network, elements should understand their\
    \ dependencies and\n   be able to resolve them locally.\n   In order to make right\
    \ or good decisions autonomically, the network\n   devices need to know more information\
    \ than just reachability\n   (routing) information from the relevant or neighbor\
    \ devices.  Devices\n   must be able to derive, for themselves, the dependencies\
    \ between such\n   information and configurations.\n   There are therefore increased\
    \ requirements for horizontal information\n   exchange in the networks.  Particularly,\
    \ three types of interaction\n   among peer network devices are needed for autonomic\
    \ decisions:\n   discovery (to find neighbors and peers), synchronization (to\
    \ agree on\n   network status), and negotiation (when things need to be changed).\n\
    \   Thus, there is a need for reusable discovery, synchronization, and\n   negotiation\
    \ mechanisms that would support the discovery of many\n   different types of device,\
    \ the synchronization of many types of\n   parameter, and the negotiation of many\
    \ different types of objective.\n"
- title: 5.2.  Reusable Common Components
  contents:
  - "5.2.  Reusable Common Components\n   Elements of autonomic functions already\
    \ exist today, within many\n   different protocols.  However, all such functions\
    \ have their own\n   discovery, transport, messaging, and security mechanisms\
    \ as well as\n   non-autonomic management interfaces.  Each protocol has its own\n\
    \   version of the above-mentioned functions to serve specific and narrow\n  \
    \ purposes.  It is often difficult to extend an existing protocol to\n   serve\
    \ different purposes.  Therefore, in order to provide the\n   reusable discovery,\
    \ synchronization, and negotiation mechanisms\n   mentioned above, it is desirable\
    \ to develop a set of reusable common\n   protocol components for Autonomic Networking.\
    \  These components\n   should be:\n   o  Able to identify other devices, users,\
    \ and processes securely.\n   o  Able to automatically secure operations, based\
    \ on the above\n      identity scheme.\n   o  Able to manage any type of information\
    \ and information flows.\n   o  Able to discover peer devices and services for\
    \ various Autonomic\n      Service Agents (or autonomic functions).\n   o  Able\
    \ to support closed-loop operations when needed to provide\n      self-managing\
    \ functions involving more than one device.\n   o  Separable from the specific\
    \ Autonomic Service Agents (or autonomic\n      functions).\n   o  Reusable by\
    \ other autonomic functions.\n"
- title: 5.3.  Secure Control Plane
  contents:
  - "5.3.  Secure Control Plane\n   The common components will, in effect, act as\
    \ a control plane for\n   autonomic operations.  This control plane might be implemented\
    \ in-\n   band as functions of the target network, in an overlay network, or\n\
    \   even out-of-band in a separate network.  Autonomic operations will be\n  \
    \ capable of changing how the network operates and allocating resources\n   without\
    \ human intervention or knowledge, so it is essential that they\n   are secure.\
    \  Therefore, the control plane must be designed to be\n   secure against forged\
    \ autonomic operations and man-in-the middle\n   attacks and as secure as reasonably\
    \ possible against denial-of-\n   service attacks.  It must be decided whether\
    \ the control plane needs\n   to be resistant to unwanted monitoring, i.e., whether\
    \ encryption is\n   required.\n"
- title: 5.4.  Less Configuration
  contents:
  - "5.4.  Less Configuration\n   Many existing protocols have been defined to be\
    \ as flexible as\n   possible.  Consequently, these protocols need numerous initial\n\
    \   configurations to start operations.  There are choices and options\n   that\
    \ are irrelevant in any particular case, some of which target\n   corner cases.\
    \  Furthermore, in protocols that have existed for years,\n   some design considerations\
    \ are no longer relevant, since the\n   underlying hardware technologies have\
    \ evolved meanwhile.  To\n   appreciate the scale of this problem, consider that\
    \ more than 160\n   DHCP options have been defined for IPv4.  Even sample router\n\
    \   configuration files readily available online contain more than 200\n   lines\
    \ of commands.  There is therefore considerable scope for\n   simplifying the\
    \ operational tools for configuration of common\n   protocols, even if the underlying\
    \ protocols themselves cannot be\n   simplified.\n   From another perspective,\
    \ the deep reason why human decisions are\n   often needed mainly results from\
    \ the lack of information.  When a\n   device can collect enough information horizontally\
    \ from other\n   devices, it should be able to decide many parameters by itself,\n\
    \   instead of receiving them from top-down configuration.\n   It is desired that\
    \ top-down management is reduced in Autonomic\n   Networking.  Ideally, only the\
    \ abstract Intent is needed from the\n   human administrators.  Neither users\
    \ nor administrators should need\n   to create and maintain detailed policies\
    \ and profiles; if they are\n   needed, they should be built autonomically.  The\
    \ local parameters\n   should be decided by distributed Autonomic Nodes themselves,\
    \ either\n   from historic knowledge, analytics of current conditions, closed\n\
    \   logical decision loops, or a combination of all.\n"
- title: 5.5.  Forecasting and Dry Runs
  contents:
  - "5.5.  Forecasting and Dry Runs\n   In a conventional network, there is no mechanism\
    \ for trying something\n   out safely, which means that configuration changes\
    \ have to be\n   designed in the abstract and their probable effects have to be\n\
    \   estimated theoretically.  In principle, an alternative to this would\n   be\
    \ to test the changes on a complete and realistic network simulator.\n   However,\
    \ this is a practical impossibility for a large network that\n   is constantly\
    \ changing, even if an accurate simulation could be\n   performed.  There is therefore\
    \ a risk that applying changes to a\n   running network will cause a failure of\
    \ some kind.  An autonomic\n   network could fill this gap by supporting a closed\
    \ loop \"dry run\"\n   mode in which each configuration change could be tested\
    \ out\n   dynamically in the control plane without actually affecting the data\n\
    \   plane.  If the results are satisfactory, the change could be made\n   live\
    \ on the running network.  If there is a consistency problem such\n   as overcommitment\
    \ of resources or incompatibility with another\n   configuration setting, the\
    \ change could be rolled back dynamically\n   with no impact on traffic or users.\n"
- title: 5.6.  Benefit from Knowledge
  contents:
  - "5.6.  Benefit from Knowledge\n   The more knowledge and experience we have, the\
    \ better decisions we\n   can make.  It is the same for networks and network management.\
    \  When\n   one component in the network lacks knowledge that affects what it\n\
    \   should do, and another component has that knowledge, we usually rely\n   on\
    \ a human operator or a centralized management tool to convey the\n   knowledge.\n\
    \   Up to now, the only available network knowledge is usually the\n   current\
    \ network status inside a given device or relevant current\n   status from other\
    \ devices.\n   However, historic knowledge is very helpful to make correct\n \
    \  decisions, in particular, to reduce network oscillation or to manage\n   network\
    \ resources over time.  Transplantable knowledge from other\n   networks can be\
    \ helpful to initially set up a new network or new\n   network devices.  Knowledge\
    \ of relationships between network events\n   and network configuration may help\
    \ a network to decide the best\n   parameters according to real performance feedback.\n\
    \   In addition to such historic knowledge, powerful data analytics of\n   current\
    \ network conditions may also be a valuable source of knowledge\n   that can be\
    \ exploited directly by Autonomic Nodes.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document is focused on what is missing to\
    \ allow autonomic\n   network configuration, including security settings, of course.\n\
    \   Therefore, it does not itself create any new security issues.  It is\n   worth\
    \ underlining that autonomic technology must be designed with\n   strong security\
    \ properties from the start, since a network with\n   vulnerable autonomic functions\
    \ would be at great risk.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [Behringer]\n              Behringer, M., Pritikin,\
    \ M., and S. Bjarnason, \"Making The\n              Internet Secure By Default\"\
    , Work in Progress,\n              draft-behringer-default-secure-00, January\
    \ 2014.\n   [Kim13]    Kim, H. and N. Feamster, \"Improving Network Management\n\
    \              with Software Defined Networking\", IEEE Communications\n     \
    \         Magazine, pages 114-119, February 2013.\n   [Pfister]  Pfister, P.,\
    \ Paterson, B., and J. Arkko, \"Distributed\n              Prefix Assignment Algorithm\"\
    , Work in Progress,\n              draft-ietf-homenet-prefix-assignment-07, June\
    \ 2015.\n   [RFC1661]  Simpson, W., Ed., \"The Point-to-Point Protocol (PPP)\"\
    ,\n              STD 51, RFC 1661, DOI 10.17487/RFC1661, July 1994,\n        \
    \      <http://www.rfc-editor.org/info/rfc1661>.\n   [RFC1994]  Simpson, W., \"\
    PPP Challenge Handshake Authentication\n              Protocol (CHAP)\", RFC 1994,\
    \ DOI 10.17487/RFC1994, August\n              1996, <http://www.rfc-editor.org/info/rfc1994>.\n\
    \   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n         \
    \     RFC 2131, DOI 10.17487/RFC2131, March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n\
    \   [RFC2136]  Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n     \
    \         \"Dynamic Updates in the Domain Name System (DNS UPDATE)\",\n      \
    \        RFC 2136, DOI 10.17487/RFC2136, April 1997,\n              <http://www.rfc-editor.org/info/rfc2136>.\n\
    \   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n        \
    \      \"Remote Authentication Dial In User Service (RADIUS)\",\n            \
    \  RFC 2865, DOI 10.17487/RFC2865, June 2000,\n              <http://www.rfc-editor.org/info/rfc2865>.\n\
    \   [RFC2866]  Rigney, C., \"RADIUS Accounting\", RFC 2866,\n              DOI\
    \ 10.17487/RFC2866, June 2000,\n              <http://www.rfc-editor.org/info/rfc2866>.\n\
    \   [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n    \
    \          C., and M. Carney, \"Dynamic Host Configuration Protocol\n        \
    \      for IPv6 (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n           \
    \   2003, <http://www.rfc-editor.org/info/rfc3315>.\n   [RFC3633]  Troan, O. and\
    \ R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host Configuration\
    \ Protocol (DHCP) version 6\", RFC 3633,\n              DOI 10.17487/RFC3633,\
    \ December 2003,\n              <http://www.rfc-editor.org/info/rfc3633>.\n  \
    \ [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n        \
    \      \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n           \
    \   DOI 10.17487/RFC4861, September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n\
    \   [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n    \
    \          Address Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862,\
    \ September 2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n \
    \  [RFC5575]  Marques, P., Sheth, N., Raszuk, R., Greene, B., Mauch, J.,\n   \
    \           and D. McPherson, \"Dissemination of Flow Specification\n        \
    \      Rules\", RFC 5575, DOI 10.17487/RFC5575, August 2009,\n              <http://www.rfc-editor.org/info/rfc5575>.\n\
    \   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n      \
    \        \"Network Time Protocol Version 4: Protocol and Algorithms\n        \
    \      Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010,\n         \
    \     <http://www.rfc-editor.org/info/rfc5905>.\n   [RFC6241]  Enns, R., Ed.,\
    \ Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and A. Bierman, Ed.,\
    \ \"Network Configuration Protocol\n              (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241,\
    \ June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n   [RFC6418]\
    \  Blanchet, M. and P. Seite, \"Multiple Interfaces and\n              Provisioning\
    \ Domains Problem Statement\", RFC 6418,\n              DOI 10.17487/RFC6418,\
    \ November 2011,\n              <http://www.rfc-editor.org/info/rfc6418>.\n  \
    \ [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n    \
    \          DOI 10.17487/RFC6762, February 2013,\n              <http://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC7010]  Liu, B., Jiang, S., Carpenter, B., Venaas, S., and W.\n       \
    \       George, \"IPv6 Site Renumbering Gap Analysis\", RFC 7010,\n          \
    \    DOI 10.17487/RFC7010, September 2013,\n              <http://www.rfc-editor.org/info/rfc7010>.\n\
    \   [RFC7136]  Carpenter, B. and S. Jiang, \"Significance of IPv6\n          \
    \    Interface Identifiers\", RFC 7136, DOI 10.17487/RFC7136,\n              February\
    \ 2014, <http://www.rfc-editor.org/info/rfc7136>.\n   [RFC7149]  Boucadair, M.\
    \ and C. Jacquenet, \"Software-Defined\n              Networking: A Perspective\
    \ from within a Service Provider\n              Environment\", RFC 7149, DOI 10.17487/RFC7149,\
    \ March 2014,\n              <http://www.rfc-editor.org/info/rfc7149>.\n   [RFC7575]\
    \  Behringer, M., Pritikin, M., Bjarnason, S., Clemm, A.,\n              Carpenter,\
    \ B., Jiang, S., and L. Ciavaglia, \"Autonomic\n              Networking: Definitions\
    \ and Design Goals\", RFC 7575,\n              DOI 10.17487/RFC7575, June 2015,\n\
    \              <http://www.rfc-editor.org/info/rfc7575>.\n   [Xiao02]   Xiao,\
    \ X., Telkamp, T., Fineberg, V., Chen, C., and L. Ni,\n              \"A Practical\
    \ Approach for Providing QoS in the Internet\n              Backbone\", IEEE Communications\
    \ Magazine, pages 56-62,\n              December 2002.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge the valuable comments\
    \ made by\n   participants in the IRTF Network Management Research Group.  Reviews\n\
    \   by Kevin Fall and Rene Struik were especially helpful.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sheng Jiang\n   Huawei Technologies Co., Ltd\n   Q14,\
    \ Huawei Campus, No.156 Beiqing Road\n   Hai-Dian District, Beijing, 100095\n\
    \   China\n   EMail: jiangsheng@huawei.com\n   Brian Carpenter\n   Department\
    \ of Computer Science\n   University of Auckland\n   PB 92019\n   Auckland  1142\n\
    \   New Zealand\n   EMail: brian.e.carpenter@gmail.com\n   Michael H. Behringer\n\
    \   Cisco Systems\n   Building D, 45 Allee des Ormes\n   Mougins 06250\n   France\n\
    \   EMail: mbehring@cisco.com\n"
