- contents:
  - '                   DNS Zone Transfer Protocol (AXFR)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The standard means within the Domain Name System protocol for\n
    \  maintaining coherence among a zone's authoritative name servers\n   consists
    of three mechanisms.  Authoritative Transfer (AXFR) is one\n   of the mechanisms
    and is defined in RFC 1034 and RFC 1035.\n   The definition of AXFR has proven
    insufficient in detail, thereby\n   forcing implementations intended to be compliant
    to make assumptions,\n   impeding interoperability.  Yet today we have a satisfactory
    set of\n   implementations that do interoperate.  This document is a new\n   definition
    of AXFR -- new in the sense that it records an accurate\n   definition of an interoperable
    AXFR mechanism.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5936.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Definition of Terms ........................................4\n      1.2.
    Scope ......................................................5\n      1.3. Context
    ....................................................5\n      1.4. Coverage and
    Relationship to Original AXFR Specification ...5\n   2. AXFR Messages ...................................................6\n
    \     2.1. AXFR Query .................................................8\n           2.1.1.
    Header Values .......................................8\n           2.1.2. Question
    Section ...................................10\n           2.1.3. Answer Section
    .....................................10\n           2.1.4. Authority Section ..................................10\n
    \          2.1.5. Additional Section .................................10\n      2.2.
    AXFR Response .............................................11\n           2.2.1.
    Header Values ......................................12\n           2.2.2. Question
    Section ...................................14\n           2.2.3. Answer Section
    .....................................14\n           2.2.4. Authority Section ..................................14\n
    \          2.2.5. Additional Section .................................14\n      2.3.
    TCP Connection Aborts .....................................15\n   3. Zone Contents
    ..................................................15\n      3.1. Records to Include
    ........................................15\n      3.2. Delegation Records ........................................16\n
    \     3.3. Glue Records ..............................................18\n      3.4.
    Name Compression ..........................................19\n      3.5. Occluded
    Names ............................................19\n   4. Transport ......................................................20\n
    \     4.1. TCP .......................................................20\n           4.1.1.
    AXFR Client TCP ....................................21\n           4.1.2. AXFR
    Server TCP ....................................22\n      4.2. UDP .......................................................22\n
    \  5. Authorization ..................................................22\n   6.
    Zone Integrity .................................................23\n   7. Backwards
    Compatibility ........................................24\n      7.1. Server ....................................................24\n
    \     7.2. Client ....................................................25\n   8.
    Security Considerations ........................................25\n   9. IANA
    Considerations ............................................25\n   10. Internationalization
    Considerations ...........................25\n   11. Acknowledgments ...............................................25\n
    \  12. References ....................................................26\n      12.1.
    Normative References .....................................26\n      12.2. Informative
    References ...................................28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Domain Name System standard facilities for maintaining
    coherent\n   servers for a zone consist of three elements.  Authoritative Transfer\n
    \  (AXFR) is defined in \"Domain Names - Concepts and Facilities\"\n   [RFC1034]
    (referred to in this document as RFC 1034) and \"Domain\n   Names - Implementation
    and Specification\" [RFC1035] (henceforth RFC\n   1035).  Incremental Zone Transfer
    (IXFR) is defined in \"Incremental\n   Zone Transfer in DNS\" [RFC1995].  A mechanism
    for prompt notification\n   of zone changes (NOTIFY) is defined in \"A Mechanism
    for Prompt\n   Notification of Zone Changes (DNS NOTIFY)\" [RFC1996].  The goal
    of\n   these mechanisms is to enable a set of DNS name servers to remain\n   coherently
    authoritative for a given zone.\n   This document re-specifies the AXFR mechanism
    as it is deployed in\n   the Internet at large, hopefully with the precision expected
    from\n   modern Internet Standards, and thereby updates RFC 1034 and RFC 1035.\n"
  - contents:
    - "1.1.  Definition of Terms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      \"Key words for use in\n   RFCs to Indicate Requirement Levels\" [BCP14].\n
      \  Use of \"newer\"/\"new\" and \"older\"/\"old\" DNS refers to implementations\n
      \  written after and prior to the publication of this document.\n   \"General-purpose
      DNS implementation\" refers to DNS software developed\n   for widespread use.
      \ This includes resolvers and servers freely\n   accessible as libraries and
      standalone processes.  This also includes\n   proprietary implementations used
      only in support of DNS service\n   offerings.\n   \"Turnkey DNS implementation\"
      refers to custom-made, single-use\n   implementations of DNS.  Such implementations
      consist of software\n   that employs the DNS protocol message format yet does
      not conform to\n   the entire range of DNS functionality.\n   The terms \"AXFR
      session\", \"AXFR server\", and \"AXFR client\" will be\n   introduced in the
      first paragraph of Section 2, after some more\n   context has been established.\n"
    title: 1.1.  Definition of Terms
  - contents:
    - "1.2.  Scope\n   In general terms, authoritative name servers for a given zone
      can use\n   various means to achieve coherency of the zone contents they serve.\n
      \  For example, there are DNS implementations that assemble answers from\n   data
      stored in relational databases (as opposed to master files),\n   relying on
      the database's non-DNS means to synchronize the database\n   instances.  Some
      of these non-DNS solutions interoperate in some\n   fashion.  However, AXFR,
      IXFR, and NOTIFY are the only protocol-\n   defined in-band mechanisms to provide
      coherence of a set of name\n   servers, and they are the only mechanisms specified
      by the IETF.\n   This document does not cover incoherent DNS situations.  There
      are\n   applications of the DNS in which servers for a zone are designed to\n
      \  be incoherent.  For these configurations, a coherency mechanism as\n   described
      here would be unsuitable.\n   A DNS implementation is not required to support
      AXFR, IXFR, and\n   NOTIFY, but it should have some means for maintaining name
      server\n   coherency.  A general-purpose DNS implementation will likely support\n
      \  AXFR (and in the same vein IXFR and NOTIFY), but turnkey DNS\n   implementations
      may exist without AXFR.\n"
    title: 1.2.  Scope
  - contents:
    - "1.3.  Context\n   Besides describing the mechanisms themselves, there is the
      context in\n   which they operate to consider.  In the initial specifications
      of\n   AXFR (and IXFR and NOTIFY), little consideration was given to\n   security
      and privacy issues.  Since the original definition of AXFR,\n   new opinions
      have appeared on the access to an entire zone's\n   contents.  In this document,
      the basic mechanisms will be discussed\n   separately from the permission to
      use these mechanisms.\n"
    title: 1.3.  Context
  - contents:
    - "1.4.  Coverage and Relationship to Original AXFR Specification\n   This document
      concentrates on just the definition of AXFR.  Any\n   effort to update the specification
      of the IXFR or NOTIFY mechanisms\n   is left to different documents.\n   The
      original \"specification\" of the AXFR sub-protocol is scattered\n   through
      RFC 1034 and RFC 1035.  Section 2.2 of RFC 1035 (on page 5)\n   depicts the
      scenario for which AXFR has been designed.  Section 4.3.5\n   of RFC 1034 describes
      the zone synchronization strategies in general\n   and rules for the invocation
      of a full zone transfer via AXFR; the\n   fifth paragraph of that section contains
      a very short sketch of the\n   AXFR protocol; Section 5.5 of RFC 2181 has corrected
      a significant\n   flaw in that specification.  Section 3.2.3 of RFC 1035 has
      assigned\n   the code point for the AXFR QTYPE (see Section 2.1.2 below for
      more\n   details).  Section 4.2 of RFC 1035 discusses how the DNS uses the\n
      \  transport layer and briefly explains why UDP transport is deemed\n   inappropriate
      for AXFR; the last paragraph of Section 4.2.2 gives\n   details regarding TCP
      connection management for AXFR.  Finally, the\n   second paragraph of Section
      6.3 in RFC 1035 mandates server behavior\n   when zone data changes occur during
      an ongoing zone transfer using\n   AXFR.\n   This document will update the specification
      of AXFR.  To this end, it\n   fully specifies the record formats and processing
      rules for AXFR,\n   largely expanding on paragraph 5 of Section 4.3.5 of RFC
      1034, and it\n   details the transport considerations for AXFR, thus amending
      Section\n   4.2.2 of RFC 1035.  Furthermore, it discusses backward-compatibility\n
      \  issues and provides policy/management considerations, as well as\n   specific
      security considerations for AXFR.  The goal of this document\n   is to define
      AXFR as it is understood by the DNS community to exist\n   today.\n"
    title: 1.4.  Coverage and Relationship to Original AXFR Specification
  title: 1.  Introduction
- contents:
  - "2.  AXFR Messages\n   An AXFR session consists of an AXFR query message and the
    sequence of\n   AXFR response messages returned for it.  In this document, the
    AXFR\n   client is the sender of the AXFR query, and the AXFR server is the\n
    \  responder.  (Use of terms such as master, slave, primary, and\n   secondary
    are not important for defining AXFR.)  The use of the word\n   \"session\" without
    qualification refers to an AXFR session.\n   An important aspect to keep in mind
    is that the definition of AXFR is\n   restricted to TCP [RFC0793] (see Section
    4 for details).  The design\n   of the AXFR process has certain inherent features
    that are not easily\n   ported to UDP [RFC0768].\n   The basic format of an AXFR
    message is the DNS message as defined in\n   Section 4 (\"MESSAGES\") of RFC 1035
    [RFC1035], updated by the\n   following documents.\n   o  The \"Basic\" DNS specification:\n
    \     -  \"A Mechanism for Prompt Notification of Zone Changes\n          (DNS
    NOTIFY)\" [RFC1996]\n      -  \"Dynamic Updates in the Domain Name System (DNS
    UPDATE)\"\n          [RFC2136]\n      -  \"Clarifications to the DNS Specification\"
    [RFC2181]\n      -  \"Extension Mechanisms for DNS (EDNS0)\" [RFC2671]\n      -
    \ \"Secret Key Transaction Authentication for DNS (TSIG)\"\n          [RFC2845]\n
    \     -  \"Secret Key Establishment for DNS (TKEY RR)\" [RFC2930]\n      -  \"Obsoleting
    IQUERY\" [RFC3425]\n      -  \"Handling of Unknown DNS Resource Record (RR) Types\"\n
    \         [RFC3597]\n      -  \"HMAC SHA (Hashed Message Authentication Code,
    Secure Hash\n          Algorithm) TSIG Algorithm Identifiers\" [RFC4635]\n      -
    \ \"Domain Name System (DNS) IANA Considerations\" [RFC5395]\n   o  Further additions
    related to the DNS Security Extensions (DNSSEC),\n      defined in these base
    documents:\n      -  \"DNS Security Introduction and Requirements\" [RFC4033]\n
    \     -  \"Resource Records for the DNS Security Extensions\"\n          [RFC4034]\n
    \     -  \"Protocol Modifications for the DNS Security Extensions\"\n          [RFC4035]\n
    \     -  \"Use of SHA-256 in DNSSEC Delegation Signer (DS) Resource\n          Records
    (RRs)\" [RFC4509]\n      -  \"DNS Security (DNSSEC) Hashed Authenticated Denial
    of\n          Existence\" [RFC5155]\n      -  \"Use of SHA-2 Algorithms with RSA
    in DNSKEY and RRSIG\n          Resource Records for DNSSEC\" [RFC5702]\n      -
    \ \"Clarifications and Implementation Notes for DNSSECbis\"\n          [DNSSEC-U]\n
    \  These documents contain information about the syntax and semantics of\n   DNS
    messages.  They do not interfere with AXFR but are also helpful\n   in understanding
    what will be carried via AXFR.\n   For convenience, the synopsis of the DNS message
    header from\n   [RFC5395] (and the IANA registry for DNS Parameters [DNSVALS])
    is\n   reproduced here informally:\n             0  1  2  3  4  5  6  7  8  9
    10 11 12 13 14 15\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \          |                      ID                       |\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \          |QR|   OpCode  |AA|TC|RD|RA| Z|AD|CD|   RCODE   |\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \          |                QDCOUNT/ZOCOUNT                |\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \          |                ANCOUNT/PRCOUNT                |\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \          |                NSCOUNT/UPCOUNT                |\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \          |                    ARCOUNT                    |\n           +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n
    \  This document makes use of the field names as they appear in this\n   diagram.
    \ The names of sections in the body of DNS messages are\n   capitalized in this
    document for clarity, e.g., \"Additional section\".\n   The DNS message size limit
    from [RFC1035] for DNS over UDP (and its\n   extension via the EDNS0 mechanism
    specified in [RFC2671]) is not\n   relevant for AXFR, as explained in Section
    4.  The upper limit on the\n   permissible size of a DNS message over TCP is only
    restricted by the\n   TCP framing defined in Section 4.2.2 of RFC 1035, which
    specifies a\n   two-octet message length field, understood to be unsigned, and
    thus\n   causing a limit of 65535 octets.  This limit is not changed by EDNS0.\n
    \  Note that the TC (truncation) bit is never set by an AXFR server nor\n   considered/read
    by an AXFR client.\n"
  - contents:
    - "2.1.  AXFR Query\n   An AXFR query is sent by a client whenever there is a
      reason to ask.\n   This might be because of scheduled or triggered zone maintenance\n
      \  activities (see Section 4.3.5 of RFC 1034 and DNS NOTIFY [RFC1996],\n   respectively)
      or as a result of a command line request, say for\n   debugging.\n"
    - contents:
      - "2.1.1.  Header Values\n   These are the DNS message header values for an
        AXFR query.\n      ID          Selected by client; see Note a)\n      QR          MUST
        be 0 (Query)\n      OPCODE      MUST be 0 (Standard Query)\n      Flags:\n
        \        AA       \"n/a\" -- see Note b)\n         TC       \"n/a\" -- see
        Note b)\n         RD       \"n/a\" -- see Note b)\n         RA       \"n/a\"
        -- see Note b)\n         Z        \"mbz\" -- see Note c)\n         AD       \"n/a\"
        -- see Note b)\n         CD       \"n/a\" -- see Note b)\n      RCODE       MUST
        be 0 (No error)\n      QDCOUNT     Number of entries in Question section;
        \  MUST be 1\n      ANCOUNT     Number of entries in Answer section;     MUST
        be 0\n      NSCOUNT     Number of entries in Authority section;  MUST be 0\n
        \     ARCOUNT     Number of entries in Additional section -- see Note d)\n
        \  Notes:\n   a) Set to any value that the client is not already using with
        the\n      same server.  There is no specific means for selecting the value\n
        \     in this field.  (Recall that AXFR is done only via TCP connections\n
        \     -- see Section 4, \"Transport\".)\n      A server MUST reply using messages
        that use the same message ID to\n      allow a client to have multiple queries
        outstanding concurrently\n      over the same TCP connection -- see Note a)
        in Section 2.2.1 for\n      more details.\n   b) \"n/a\" -- The value in this
        field has no meaning in the context of\n      AXFR query messages.  For the
        client, it is RECOMMENDED that the\n      value be zero.  The server MUST
        ignore this value.\n   c) \"mbz\" -- The client MUST set this bit to 0; the
        server MUST ignore\n      it.\n   d) The client MUST set this field to the
        number of resource records\n      it places into the Additional section.  In
        the absence of explicit\n      specification of new RRs to be carried in the
        Additional section\n      of AXFR queries, the value MAY be 0, 1, or 2.  See
        Section 2.1.5,\n      \"Additional Section\", for details on the currently
        applicable RRs.\n"
      title: 2.1.1.  Header Values
    - contents:
      - "2.1.2.  Question Section\n   The Question section of the AXFR query MUST
        conform to Section 4.1.2\n   of RFC 1035, and contain a single resource record
        with the following\n   values:\n      QNAME       the name of the zone requested\n
        \     QTYPE       AXFR (= 252), the pseudo-RR type for zone transfer\n                  [DNSVALS]\n
        \     QCLASS      the class of the zone requested [DNSVALS]\n"
      title: 2.1.2.  Question Section
    - contents:
      - "2.1.3.  Answer Section\n   The Answer section MUST be empty.\n"
      title: 2.1.3.  Answer Section
    - contents:
      - "2.1.4.  Authority Section\n   The Authority section MUST be empty.\n"
      title: 2.1.4.  Authority Section
    - contents:
      - "2.1.5.  Additional Section\n   Currently, two kinds of resource records are
        defined that can appear\n   in the Additional section of AXFR queries and
        responses: EDNS and DNS\n   transaction security.  Future specifications defining
        RRs that can be\n   carried in the Additional section of normal DNS transactions
        need to\n   explicitly describe their use with AXFR, should that be desired.\n
        \  The client MAY include one OPT resource record [RFC2671].  If the\n   server
        does not support EDNS0, the client MUST send this section\n   without an OPT
        resource record if there is a retry.  However, the\n   protocol does not define
        an explicit indication that the server does\n   not support EDNS0; that needs
        to be inferred by the client.  Often,\n   the server will return a FormErr(1)
        that might be related to the OPT\n   resource record.  Note that, at the time
        of this writing, only the\n   EXTENDED-RCODE field of the OPT RR is meaningful
        in the context of\n   AXFR; future specifications of EDNS flags and/or EDNS
        options must\n   describe their usage in the context of AXFR, if applicable.\n
        \  The client MAY include one transaction integrity and authentication\n   resource
        record, currently a choice of TSIG [RFC2845] or SIG(0)\n   [RFC2931].  If
        the server has indicated that it does not recognize\n   the resource record,
        and that the error is indeed caused by the\n   resource record, the client
        probably should not try again.  Removing\n   the security data in the face
        of an obstacle ought to only be done\n   with full awareness of the implication
        of doing so.\n   In general, if an AXFR client is aware that an AXFR server
        does not\n   support a particular mechanism, the client SHOULD NOT attempt
        to\n   engage the server using the mechanism (or engage the server at all).\n
        \  A client could become aware of a server's abilities via a\n   configuration
        setting or via some other (as yet) undefined means.\n   The range of permissible
        resource records that MAY appear in the\n   Additional section might change
        over time.  If either a change to an\n   existing resource record (like the
        OPT RR for EDNS) is made or a new\n   Additional section record is created,
        the new definitions ought to\n   include a discussion on the applicability
        and impact upon AXFR.\n   Future resource records residing in the Additional
        section might have\n   an effect that is orthogonal to AXFR, and so can ride
        through the\n   session as opaque data.  In this case, a \"wise\" implementation
        ought\n   to be able to pass these records through without disruption.\n"
      title: 2.1.5.  Additional Section
    title: 2.1.  AXFR Query
  - contents:
    - "2.2.  AXFR Response\n   The AXFR response will consist of one or more messages.
      \ The special\n   case of a server closing the TCP connection without sending
      an AXFR\n   response is covered in Section 2.3.\n   An AXFR response that is
      transferring the zone's contents will\n   consist of a series (which could be
      a series of length 1) of DNS\n   messages.  In such a series, the first message
      MUST begin with the\n   SOA resource record of the zone, and the last message
      MUST conclude\n   with the same SOA resource record.  Intermediate messages
      MUST NOT\n   contain the SOA resource record.  The AXFR server MUST copy the\n
      \  Question section from the corresponding AXFR query message into the\n   first
      response message's Question section.  For subsequent messages,\n   it MAY do
      the same or leave the Question section empty.\n   The AXFR protocol treats the
      zone contents as an unordered collection\n   (or to use the mathematical term,
      a \"set\") of RRs.  Except for the\n   requirement that the transfer must begin
      and end with the SOA RR,\n   there is no requirement to send the RRs in any
      particular order or\n   grouped into response messages in any particular way.
      \ Although\n   servers typically do attempt to send related RRs (such as the
      RRs\n   forming an RRset, and the RRsets of a name) as a contiguous group or,\n
      \  when message space allows, in the same response message, they are not\n   required
      to do so, and clients MUST accept any ordering and grouping\n   of the non-SOA
      RRs.  Each RR SHOULD be transmitted only once, and\n   AXFR clients MUST ignore
      any duplicate RRs received.\n   Each AXFR response message SHOULD contain a
      sufficient number of RRs\n   to reasonably amortize the per-message overhead,
      up to the largest\n   number that will fit within a DNS message (taking the
      required\n   content of the other sections into account, as described below).\n
      \  Some old AXFR clients expect each response message to contain only a\n   single
      RR.  To interoperate with such clients, the server MAY\n   restrict response
      messages to a single RR.  As there is no standard\n   way to automatically detect
      such clients, this typically requires\n   manual configuration at the server.\n
      \  To indicate an error in an AXFR response, the AXFR server sends a\n   single
      DNS message when the error condition is detected, with the\n   response code
      set to the appropriate value for the condition\n   encountered.  Such a message
      terminates the AXFR session; it MUST\n   contain a copy of the Question section
      from the AXFR query in its\n   Question section, but the inclusion of the terminating
      SOA resource\n   record is not necessary.\n   An AXFR server may send a number
      of AXFR response messages free of an\n   error condition before it sends the
      message indicating an error.\n"
    - contents:
      - "2.2.1.  Header Values\n   These are the DNS message header values for AXFR
        responses.\n      ID          MUST be copied from request -- see Note a)\n
        \     QR          MUST be 1 (Response)\n      OPCODE      MUST be 0 (Standard
        Query)\n      Flags:\n         AA       normally 1 -- see Note b)\n         TC
        \      MUST be 0 (Not truncated)\n         RD       RECOMMENDED: copy request's
        value; MAY be set to 0\n         RA       SHOULD be 0 -- see Note c)\n         Z
        \       \"mbz\" -- see Note d)\n         AD       \"mbz\" -- see Note d)\n
        \        CD       \"mbz\" -- see Note d)\n      RCODE       See Note e)\n
        \     QDCOUNT     MUST be 1 in the first message;\n                  MUST
        be 0 or 1 in all following messages;\n                  MUST be 1 if RCODE
        indicates an error\n      ANCOUNT     See Note f)\n      NSCOUNT     MUST
        be 0\n      ARCOUNT     See Note g)\n   Notes:\n   a) Because some old implementations
        behave differently than is now\n      desired, the requirement on this field
        is stated in detail.  New\n      DNS servers MUST set this field to the value
        of the AXFR query ID\n      in each AXFR response message for the session.
        \ AXFR clients MUST\n      be able to manage sessions resulting from the issuance
        of multiple\n      outstanding queries, whether AXFR queries or other DNS
        queries.  A\n      client SHOULD discard responses that do not correspond
        (via the\n      message ID) to any outstanding queries.\n      Unless the
        client is sure that the server will consistently set\n      the ID field to
        the query's ID, the client is NOT RECOMMENDED to\n      issue any other queries
        until the end of the zone transfer.  A\n      client MAY become aware of a
        server's abilities via a\n      configuration setting.\n   b) If the RCODE
        is 0 (no error), then the AA bit MUST be 1.  For any\n      other value of
        RCODE, the AA bit MUST be set according to the\n      rules for that error
        code.  If in doubt, it is RECOMMENDED that it\n      be set to 1.  It is RECOMMENDED
        that the value be ignored by the\n      AXFR client.\n   c) It is RECOMMENDED
        that the server set the value to 0; the client\n      MUST ignore this value.\n
        \     The server MAY set this value according to the local policy\n      regarding
        recursive service, but doing so might confuse the\n      interpretation of
        the response, as AXFR cannot be retrieved\n      recursively.  A client MAY
        note the server's policy regarding\n      recursive service from this value,
        but SHOULD NOT conclude that\n      the AXFR response was obtained recursively,
        even if the RD bit was\n      1 in the query.\n   d) \"mbz\" -- The server
        MUST set this bit to 0; the client MUST ignore\n      it.\n   e) In the absence
        of an error, the server MUST set the value of this\n      field to NoError(0).
        \ If a server is not authoritative for the\n      queried zone, the server
        SHOULD set the value to NotAuth(9).\n      (Reminder: Consult the appropriate
        IANA registry [DNSVALS].)  If a\n      client receives any other value in
        response, it MUST act according\n      to the error.  For example, a malformed
        AXFR query or the presence\n      of an OPT resource record sent to an old
        server will result in a\n      FormErr(1) value.  This value is not set as
        part of the AXFR-\n      specific response processing.  The same is true for
        other values\n      indicating an error.\n   f) The count of answer records
        MUST equal the number of resource\n      records in the AXFR Answer section.
        \ When a server is aware that a\n      client will only accept response messages
        with a single resource\n      record, then the value MUST be 1.  A server
        MAY be made aware of a\n      client's limitations via configuration data.\n
        \  g) The server MUST set this field to the number of resource records\n      it
        places into the Additional section.  In the absence of explicit\n      specification
        of new RRs to be carried in the Additional section\n      of AXFR response
        messages, the value MAY be 0, 1, or 2.  See\n      Section 2.1.5 above for
        details on the currently applicable RRs\n      and Section 2.2.5 for additional
        considerations specific to AXFR\n      servers.\n"
      title: 2.2.1.  Header Values
    - contents:
      - "2.2.2.  Question Section\n   In the first response message, this section
        MUST be copied from the\n   query.  In subsequent messages, this section MAY
        be copied from the\n   query, or it MAY be empty.  However, in an error response
        message\n   (see Section 2.2), this section MUST be copied as well.  The content\n
        \  of this section MAY be used to determine the context of the message,\n
        \  that is, the name of the zone being transferred.\n"
      title: 2.2.2.  Question Section
    - contents:
      - "2.2.3.  Answer Section\n   The Answer section MUST be populated with the
        zone contents.  See\n   Section 3 below on encoding zone contents.\n"
      title: 2.2.3.  Answer Section
    - contents:
      - "2.2.4.  Authority Section\n   The Authority section MUST be empty.\n"
      title: 2.2.4.  Authority Section
    - contents:
      - "2.2.5.  Additional Section\n   The contents of this section MUST follow the
        guidelines for the OPT,\n   TSIG, and SIG(0) RRs, or whatever other future
        record is possible\n   here.  The contents of Section 2.1.5 apply analogously
        as well.\n   The following considerations specifically apply to AXFR responses:\n
        \  If the client has supplied an EDNS OPT RR in the AXFR query and if\n   the
        server supports EDNS as well, it SHOULD include one OPT RR in the\n   first
        response message and MAY do so in subsequent response messages\n   (see Section
        2.2); the specifications of EDNS options to be carried\n   in the OPT RR may
        impose stronger requirements.\n   If the client has supplied a transaction
        security resource record\n   (currently a choice of TSIG and SIG(0)) and the
        server supports the\n   method chosen by the client, it MUST place the corresponding
        resource\n   record into the AXFR response message(s), according to the rules\n
        \  specified for that method.\n"
      title: 2.2.5.  Additional Section
    title: 2.2.  AXFR Response
  - contents:
    - "2.3.  TCP Connection Aborts\n   If an AXFR client sends a query on a TCP connection
      and the\n   connection is closed at any point, the AXFR client MUST consider
      the\n   AXFR session terminated.  The message ID MAY be used again on a new\n
      \  connection, even if the question and AXFR server are the same.\n   Facing
      a dropped connection, a client SHOULD try to make some\n   determination as
      to whether the connection closure was the result of\n   network activity or
      due to a decision by the AXFR server.  This\n   determination is not an exact
      science.  It is up to the AXFR client\n   to react, but the implemented reaction
      SHOULD NOT be either an\n   endless cycle of retries or an increasing (in frequency)
      retry rate.\n   An AXFR server implementer should take into consideration the
      dilemma\n   described above when a connection is closed with an outstanding
      query\n   in the pipeline.  For this reason, a server ought to reserve this\n
      \  course of action for situations in which it believes beyond a doubt\n   that
      the AXFR client is attempting abusive behavior.\n"
    title: 2.3.  TCP Connection Aborts
  title: 2.  AXFR Messages
- contents:
  - "3.  Zone Contents\n   The objective of the AXFR session is to request and transfer
    the\n   contents of a zone, in order to permit the AXFR client to faithfully\n
    \  reconstruct the zone as it exists at the primary server for the given\n   zone
    serial number.  The word \"exists\" here designates the externally\n   visible
    behavior, i.e., the zone content that is being served (handed\n   out to clients)
    -- not its persistent representation in a zone file\n   or database used by the
    server -- and that for consistency should be\n   served subsequently by the AXFR
    client in an identical manner.\n   Over time the definition of a zone has evolved
    from denoting a static\n   set of records to also cover a dynamically updated
    set of records,\n   and then a potentially continually regenerated set of records
    (e.g.,\n   RRs synthesized \"on the fly\" from rule sets or database lookup\n
    \  results in other forms than RR format) as well.\n"
  - contents:
    - "3.1.  Records to Include\n   In the Answer section of AXFR response messages,
      the resource records\n   within a zone for the given serial number MUST appear.
      \ The\n   definition of what belongs in a zone is described in RFC 1034,\n   Section
      4.2, \"How the database is divided into zones\" (in particular\n   Section 4.2.1,
      \"Technical considerations\"), and it has been clarified\n   in Section 6 of
      RFC 2181.\n   Zones for which it is impractical to list the entire zone for
      a\n   serial number are not suitable for AXFR retrieval.  A typical (but\n   not
      limiting) description of such a zone is a zone consisting of\n   responses generated
      via other database lookups and/or computed based\n   upon ever-changing data.\n"
    title: 3.1.  Records to Include
  - contents:
    - "3.2.  Delegation Records\n   In Section 4.2.1 of RFC 1034, this text appears
      (keep in mind that\n   the \"should\" in the quotation predates [BCP14], cf.
      Section 1.1):\n      The RRs that describe cuts ... should be exactly the same
      as the\n      corresponding RRs in the top node of the subzone.\n   There has
      been some controversy over this statement and the impact on\n   which NS resource
      records are included in a zone transfer.\n   The phrase \"that describe cuts\"
      is a reference to the NS set and\n   applicable glue records.  It does not mean
      that the cut point and\n   apex resource records are identical.  For example,
      the SOA resource\n   record is only found at the apex.  The discussion here
      is restricted\n   to just the NS resource record set and glue, as these \"describe\n
      \  cuts\".\n   DNSSEC resource records have special specifications regarding
      their\n   occurrence at a zone cut and the apex of a zone.  This was first\n
      \  described in Sections 5.3 ff. and 6.2 of RFC 2181 (for the initial\n   specification
      of DNSSEC), which parts of RFC 2181 now in fact are\n   historical.  The current
      DNSSEC core document set (see second bullet\n   in Section 2 above) gives the
      full details for DNSSEC(bis) resource\n   record placement, and Section 3.1.5
      of RFC 4035 normatively specifies\n   their treatment during AXFR; the alternate
      NSEC3 resource record\n   defined later in RFC 5155 behaves identically to the
      NSEC RR, for the\n   purpose of AXFR.\n   Informally:\n   o  The DS RRSet only
      occurs at the parental side of a zone cut and is\n      authoritative data in
      the parent zone, not the secure child zone.\n   o  The DNSKEY RRSet only occurs
      at the apex of a signed zone and is\n      part of the authoritative data of
      the zone it serves.\n   o  Independent RRSIG RRSets occur at the signed parent
      side of a zone\n      cut and at the apex of a signed zone; they are authoritative
      data\n      in the respective zone; simple queries for RRSIG resource records\n
      \     may return both RRSets at once if the same server is authoritative\n      for
      the parent zone and the child zone (Section 3.1.5 of RFC 4035\n      describes
      how to distinguish these RRs); this seeming ambiguity\n      does not occur
      for AXFR, since each such RRSIG RRset belongs to a\n      single zone.\n   o
      \ Different NSEC [RFC4034] (or NSEC3 [RFC5155]) resource records\n      equally
      may occur at the parental side of a zone cut and at the\n      apex of a zone;
      each such resource record belongs to exactly one\n      of these zones and is
      to be included in the AXFR of that zone.\n   One issue is that in operations
      there are times when the NS resource\n   records for a zone might be different
      at a cut point in the parent\n   and at the apex of a zone.  Sometimes this
      is the result of an error,\n   and sometimes it is part of an ongoing change
      in name servers.  The\n   DNS protocol is robust enough to overcome inconsistencies
      up to (but\n   not including) there being no parent-indicated NS resource record\n
      \  referencing a server that is able to serve the child zone.  This\n   robustness
      is one quality that has fueled the success of the DNS.\n   Still, the inconsistency
      is an error state, and steps need to be\n   taken to make it apparent (if it
      is unplanned).\n   Another issue is that the AXFR server could be authoritative
      for a\n   different set of zones than the AXFR client.  It is possible that
      the\n   AXFR server be authoritative for both halves of an inconsistent cut\n
      \  point and that the AXFR client is authoritative for just the parent\n   side
      of the cut point.\n   When facing a situation in which a cut point's NS resource
      records do\n   not match the authoritative set, the question arises whether
      an AXFR\n   server responds with the NS resource record set that is in the zone\n
      \  being transferred or the one that is at the authoritative location.\n   The
      AXFR response MUST contain the cut point NS resource record set\n   registered
      with the zone whether it agrees with the authoritative set\n   or not.  \"Registered
      with\" can be widely interpreted to include data\n   residing in the zone file
      of the zone for the particular serial\n   number (in zone file environments)
      or as any data configured to be in\n   the zone (database), statically or dynamically.\n
      \  The reasons for this requirement are:\n   1) The AXFR server might not be
      able to determine that there is an\n      inconsistency given local data; hence,
      requiring consistency would\n      mean a lot more needed work and even network
      retrieval of data.\n      An authoritative server ought not be required to perform
      any\n      queries.\n   2) By transferring the inconsistent NS resource records
      from a server\n      that is authoritative for both the cut point and the apex
      to a\n      client that is not authoritative for both, the error is exposed.\n
      \     For example, an authorized administrator can manually request the\n      AXFR
      and inspect the results to see the inconsistent records.  (A\n      server authoritative
      for both halves would otherwise always answer\n      from the more authoritative
      set, concealing the error.)\n   3) The inconsistent NS resource record set might
      indicate a problem\n      in a registration database.\n   4) This requirement
      is necessary to ensure that retrieving a given\n      (zone, serial) pair by
      AXFR yields the exact same set of resource\n      records, no matter which of
      the zone's authoritative servers is\n      chosen as the source of the transfer.\n
      \  If an AXFR server were allowed to respond with the authoritative NS\n   RRset
      of a child zone instead of a parent-side NS RRset in the zone\n   being transferred,
      the set of records returned could vary depending\n   on whether or not the server
      happened to be authoritative for the\n   child zone as well.\n   The property
      that a given (zone, serial) pair corresponds to a\n   single, well-defined set
      of records is necessary for the correct\n   operation of incremental transfer
      protocols such as IXFR [RFC1995].\n   For example, a client may retrieve a zone
      by AXFR from one server,\n   and then apply an incremental change obtained by
      IXFR from a\n   different server.  If the two servers have different ideas of
      the\n   zone contents, the client can end up attempting to incrementally add\n
      \  records that already exist or to delete records that do not exist.\n"
    title: 3.2.  Delegation Records
  - contents:
    - "3.3.  Glue Records\n   As quoted in the previous section, Section 4.2.1 of
      RFC 1034 provides\n   guidance and rationale for the inclusion of glue records
      as part of\n   an AXFR response.  And, as also argued in the previous section
      of\n   this document, even when there is an inconsistency between the\n   address
      in a glue record and the authoritative copy of the name\n   server's address,
      the glue resource record that is registered as part\n   of the zone for that
      serial number is to be included.\n   This applies to glue records for any address
      family [IANA-AF].\n   The AXFR response MUST contain the appropriate glue records
      as\n   registered with the zone.  The interpretation of \"registered with\"
      in\n   the previous section applies here.  Inconsistent glue records are an\n
      \  operational matter.\n"
    title: 3.3.  Glue Records
  - contents:
    - "3.4.  Name Compression\n   Compression of names in DNS messages is described
      in RFC 1035,\n   Section 4.1.4, \"Message compression\".  The issue highlighted
      here\n   relates to a comment made in RFC 1034, Section 3.1, \"Name space\n
      \  specifications and terminology\", which says:\n      When you receive a domain
      name or label, you should preserve its\n      case.\n   (\"Should\" in the quote
      predates [BCP14].)\n   Since the primary objective of AXFR is to enable the
      client to serve\n   the same zone content as the server, unlike such normal
      DNS responses\n   that are expected to preserve the case in the query, the actual
      zone\n   transfer needs to retain the case of the labels in the zone content.\n
      \  Hence, name compression in an AXFR message SHOULD be performed in a\n   case-preserving
      manner, unlike how it is done for \"normal\" DNS\n   responses.  That is, although
      when comparing a domain name for\n   matching, \"a\" equals \"A\", when comparing
      for the purposes of message\n   compression for AXFR, \"a\" is not equal to
      \"A\".  Note that this is not\n   the usual definition of name comparison in
      the DNS protocol and\n   represents a new understanding of the requirement on
      AXFR servers.\n   Rules governing name compression of RDATA in an AXFR message
      MUST\n   abide by the specification in \"Handling of Unknown DNS Resource\n
      \  Record (RR) Types\" [RFC3597], specifically, Section 4 on \"Domain Name\n
      \  Compression\".\n"
    title: 3.4.  Name Compression
  - contents:
    - "3.5.  Occluded Names\n   Dynamic Update [RFC2136] operations, and in particular
      their\n   interaction with DNAME [RFC2672], can have a side effect of occluding\n
      \  names in a zone.  The addition of a delegation point via dynamic\n   update
      will render all subordinate domain names to be in a limbo,\n   still part of
      the zone but not available to the lookup process.  The\n   addition of a DNAME
      resource record has the same impact.  The\n   subordinate names are said to
      be \"occluded\".\n   Occluded names MUST be included in AXFR responses.  An
      AXFR client\n   MUST be able to identify and handle occluded names.  The rationale\n
      \  for this action is based on a speedy recovery if the dynamic update\n   operation
      was in error and is to be undone.\n"
    title: 3.5.  Occluded Names
  title: 3.  Zone Contents
- contents:
  - "4.  Transport\n   AXFR sessions are currently restricted to TCP by Section 4.3.5
    of RFC\n   1034, which states:\n      Because accuracy is essential, TCP or some
    other reliable protocol\n      must be used for AXFR requests.\n   The restriction
    to TCP is also mentioned in Section 6.1.3.2 of\n   \"Requirements for Internet
    Hosts - Application and Support\"\n   [RFC1123].\n   The most common scenario
    is for an AXFR client to open a TCP\n   connection to the AXFR server, send an
    AXFR query, receive the AXFR\n   response, and then close the connection.  But
    variations of that most\n   simple scenario are legitimate and likely: in particular,
    sending a\n   query for the zone's SOA resource record first over the same TCP\n
    \  connection, and reusing an existing TCP connection for other queries.\n   Therefore,
    the assumption that a TCP connection is dedicated to a\n   single AXFR session
    is incorrect.  This wrong assumption has led to\n   implementation choices that
    prevent either multiple concurrent zone\n   transfers or the use of an open connection
    for other queries.\n   Since the early days of the DNS, operators who have sets
    of name\n   servers that are authoritative for a common set of zones have found\n
    \  it desirable to be able to have multiple concurrent zone transfers in\n   progress;
    this way, a name server does not have to wait for one zone\n   transfer to complete
    before the next can begin.  RFC 1035 did not\n   exclude this possibility, but
    legacy implementations failed to\n   support this functionality efficiently, over
    a single TCP connection.\n   The remaining presence of such legacy implementations
    makes it\n   necessary that new general-purpose client implementations still\n
    \  provide options for graceful fallback to the old behavior in their\n   support
    of concurrent DNS transactions and AXFR sessions on a single\n   TCP connection.\n"
  - contents:
    - "4.1.  TCP\n   In the original definition, there arguably is an implicit assumption\n
      \  (probably unintentional) that a TCP connection is used for one and\n   only
      one AXFR session.  This is evidenced in the lack of an explicit\n   requirement
      to copy the Question section and/or the message ID into\n   responses, no explicit
      ordering information within the AXFR response\n   messages, and the lack of
      an explicit notice indicating that a zone\n   transfer continues in the next
      message.\n   The guidance given below is intended to enable better performance
      of\n   the AXFR exchange as well as provide guidelines on interactions with\n
      \  older software.  Better performance includes being able to multiplex\n   DNS
      message exchanges including zone transfer sessions.  Guidelines\n   for interacting
      with older software are generally applicable to new\n   AXFR clients.  In the
      reverse situation -- older AXFR client and\n   newer AXFR server -- the server
      ought to operate within the\n   specification for an older server.\n"
    - contents:
      - "4.1.1.  AXFR Client TCP\n   An AXFR client MAY request a connection to an
        AXFR server for any\n   reason.  An AXFR client SHOULD close the connection
        when there is no\n   apparent need to use the connection for some time period.
        \ The AXFR\n   server ought not have to maintain idle connections; the burden
        of\n   connection closure ought to be on the client.  \"Apparent need\" for\n
        \  the connection is a judgment for the AXFR client and the DNS client.\n
        \  If the connection is used for multiple sessions, or if it is known\n   that
        sessions will be coming, or if there is other query/response\n   traffic anticipated
        or currently on the open connection, then there\n   is \"apparent need\".\n
        \  An AXFR client can cancel the delivery of a zone only by closing the\n
        \  connection.  However, this action will also cancel all other\n   outstanding
        activity using the connection.  There is no other\n   mechanism by which an
        AXFR response can be cancelled.\n   When a TCP connection is closed remotely
        (relative to the client),\n   whether by the AXFR server or due to a network
        event, the AXFR client\n   MUST cancel all outstanding sessions and non-AXFR
        transactions.\n   Recovery from this situation is not straightforward.  If
        the\n   disruption was a spurious event, attempting to restart the connection\n
        \  would be proper.  If the disruption was caused by a failure that\n   proved
        to be persistent, the AXFR client would be wise not to spend\n   too many
        resources trying to rebuild the connection.  Finally, if the\n   connection
        was dropped because of a policy at the AXFR server (as can\n   be the case
        with older AXFR servers), the AXFR client would be wise\n   not to retry the
        connection.  Unfortunately, knowing which of the\n   three cases above (momentary
        disruption, failure, policy) applies is\n   not possible with certainty, and
        can only be assessed by heuristics.\n   This exemplifies the general complications
        for clients in connection-\n   oriented protocols not receiving meaningful
        error responses.\n   An AXFR client MAY use an already opened TCP connection
        to start an\n   AXFR session.  Using an existing open connection is RECOMMENDED
        over\n   opening a new connection.  (Non-AXFR session traffic can also use
        an\n   open connection.)  If in doing so the AXFR client realizes that the\n
        \  responses cannot be properly differentiated (lack of matching query\n   IDs,
        for example) or the connection is terminated for a remote\n   reason, then
        the AXFR client SHOULD NOT attempt to reuse an open\n   connection with the
        specific AXFR server until the AXFR server is\n   updated (which is, of course,
        not an event captured in the DNS\n   protocol).\n"
      title: 4.1.1.  AXFR Client TCP
    - contents:
      - "4.1.2.  AXFR Server TCP\n   An AXFR server MUST be able to handle multiple
        AXFR sessions on a\n   single TCP connection, as well as to handle other query/response\n
        \  transactions over it.\n   If a TCP connection is closed remotely, the AXFR
        server MUST cancel\n   all AXFR sessions in place.  No retry activity is necessary;
        that is\n   initiated by the AXFR client.\n   Local policy MAY dictate that
        a TCP connection is to be closed.  Such\n   an action SHOULD be in reaction
        to limits such as those placed on the\n   number of outstanding open connections.
        \ Closing a connection in\n   response to a suspected security event SHOULD
        be done only in extreme\n   cases, when the server is certain the action is
        warranted.  An\n   isolated request for a zone not on the AXFR server SHOULD
        receive a\n   response with the appropriate response code and not see the\n
        \  connection broken.\n"
      title: 4.1.2.  AXFR Server TCP
    title: 4.1.  TCP
  - contents:
    - "4.2.  UDP\n   With the addition of EDNS0 and applications that require many
      small\n   zones, such as in web hosting and some ENUM scenarios, AXFR sessions\n
      \  on UDP would now seem desirable.  However, there are still some\n   aspects
      of AXFR sessions that are not easily translated to UDP.\n   Therefore, this
      document does not update RFC 1035 in this respect:\n   AXFR sessions over UDP
      transport are not defined.\n"
    title: 4.2.  UDP
  title: 4.  Transport
- contents:
  - "5.  Authorization\n   A zone administrator has the option to restrict AXFR access
    to a\n   zone.  This was not envisioned in the original design of the DNS but\n
    \  has emerged as a requirement as the DNS has evolved.  Restrictions on\n   AXFR
    could be for various reasons including a desire (or in some\n   instances, having
    a legal requirement) to keep the bulk version of\n   the zone concealed or to
    prevent the servers from handling the load\n   incurred in serving AXFR.  It has
    been argued that these reasons are\n   questionable, but this document, driven
    by the desire to leverage the\n   interoperable practice that has evolved since
    RFC 1035, acknowledges\n   the factual requirement to provide mechanisms to restrict
    AXFR.\n   A DNS implementation SHOULD provide means to restrict AXFR sessions\n
    \  to specific clients.\n   An implementation SHOULD allow access to be granted
    to Internet\n   Protocol addresses and ranges, regardless of whether a source
    address\n   could be spoofed.  Combining this with techniques such as Virtual\n
    \  Private Networks (VPNs) [RFC2764] or Virtual LANs has proven to be\n   effective.\n
    \  A general-purpose implementation is RECOMMENDED to implement access\n   controls
    based upon \"Secret Key Transaction Authentication for DNS\n   (TSIG)\" [RFC2845]
    and/or \"DNS Request and Transaction Signatures\n   ( SIG(0)s )\" [RFC2931].\n
    \  A general-purpose implementation SHOULD allow access to be open to\n   all
    AXFR requests.  That is, an operator ought to be able to allow\n   any AXFR query
    to be granted.\n   A general-purpose implementation SHOULD NOT have a default
    policy for\n   AXFR requests to be \"open to all\".  For example, a default could
    be\n   to restrict transfers to addresses selected by the DNS\n   administrator(s)
    for zones on the server.\n"
  title: 5.  Authorization
- contents:
  - "6.  Zone Integrity\n   An AXFR client MUST ensure that only a successfully transferred
    copy\n   of the zone data can be used to serve this zone.  Previous\n   description
    and implementation practice has introduced a two-stage\n   model of the whole
    zone synchronization procedure:  Upon a trigger\n   event (e.g., when polling
    of a SOA resource record detects a change\n   in the SOA serial number, or when
    a DNS NOTIFY request [RFC1996] is\n   received), the AXFR session is initiated,
    whereby the zone data are\n   saved in a zone file or database (this latter step
    is necessary\n   anyway to ensure proper restart of the server); upon successful\n
    \  completion of the AXFR operation and some sanity checks, this data\n   set
    is \"loaded\" and made available for serving the zone in an atomic\n   operation,
    and flagged \"valid\" for use during the next restart of the\n   DNS server; if
    any error is detected, this data set MUST be deleted,\n   and the AXFR client
    MUST continue to serve the previous version of\n   the zone, if it did before.
    \ The externally visible behavior of an\n   AXFR client implementation MUST be
    equivalent to that of this two-\n   stage model.\n   If an AXFR client rejects
    data obtained in an AXFR session, it SHOULD\n   remember the serial number and
    MAY attempt to retrieve the same zone\n   version again.  The reason the same
    retrieval could make sense is\n   that the reason for the rejection could be rooted
    in an\n   implementation detail of one AXFR server used for the zone and not\n
    \  present in another AXFR server used for the zone.\n   Ensuring that an AXFR
    client does not accept a forged copy of a zone\n   is important to the security
    of a zone.  If a zone operator has the\n   opportunity, protection can be afforded
    via dedicated links, physical\n   or virtual via a VPN among the authoritative
    servers.  But there are\n   instances in which zone operators have no choice but
    to run AXFR\n   sessions over the global public Internet.\n   Besides best attempts
    at securing TCP connections, DNS\n   implementations SHOULD provide means to make
    use of \"Secret Key\n   Transaction Authentication for DNS (TSIG)\" [RFC2845]
    and/or \"DNS\n   Request and Transaction Signatures ( SIG(0)s )\" [RFC2931] to
    allow\n   AXFR clients to verify the contents.  These techniques MAY also be\n
    \  used for authorization.\n"
  title: 6.  Zone Integrity
- contents:
  - "7.  Backwards Compatibility\n   Describing backwards compatibility is difficult
    because of the lack\n   of specifics in the original definition.  In this section,
    some hints\n   at building in backwards compatibility are given, mostly repeated\n
    \  from the relevant earlier sections.\n   Backwards compatibility is not necessary,
    but the greater the extent\n   of an implementation's compatibility, the greater
    its\n   interoperability.  For turnkey implementations, this is not usually a\n
    \  concern.  For general-purpose implementations, this takes on varying\n   levels
    of importance, depending on the implementer's desire to\n   maintain interoperability.\n
    \  It is unfortunate that a need to fall back to older behavior cannot\n   be
    discovered, and thus has to be noted in a configuration file.  An\n   implementation
    SHOULD, in its documentation, encourage operators to\n   periodically review AXFR
    clients and servers it has made notes about\n   repeatedly, as old software gets
    updated from time to time.\n"
  - contents:
    - "7.1.  Server\n   An AXFR server has the luxury of being able to react to an
      AXFR\n   client's abilities, with the exception of knowing whether the client\n
      \  can accept multiple resource records per AXFR response message.  The\n   knowledge
      that a client is so restricted cannot be discovered; hence,\n   it has to be
      set by configuration.\n   An implementation of an AXFR server MAY permit configuring,
      on a per\n   AXFR client basis, the necessity to revert to a single resource\n
      \  record per message; in that case, the default SHOULD be to use\n   multiple
      records per message.\n"
    title: 7.1.  Server
  - contents:
    - "7.2.  Client\n   An AXFR client has the opportunity to try other features (i.e.,
      those\n   not defined by this document) when querying an AXFR server.\n   Attempting
      to issue multiple DNS queries over a TCP transport for an\n   AXFR session SHOULD
      be aborted if it interrupts the original request,\n   and SHOULD take into consideration
      whether the AXFR server intends to\n   close the connection immediately upon
      completion of the original\n   (connection-causing) zone transfer.\n"
    title: 7.2.  Client
  title: 7.  Backwards Compatibility
- contents:
  - "8.  Security Considerations\n   This document is a clarification of a mechanism
    outlined in RFCs 1034\n   and 1035 and as such does not add any new security considerations.\n
    \  RFC 3833 [RFC3833] is devoted entirely to security considerations for\n   the
    DNS; its Section 4.3 delineates zone transfer security aspects\n   from the security
    threats addressed by DNSSEC.\n   Concerns regarding authorization, traffic flooding,
    and message\n   integrity are mentioned in \"Authorization\" (Section 5), \"TCP\"\n
    \  (Section 4.1), and \"Zone Integrity\" (Section 6).\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   IANA has added a reference to this RFC in the AXFR
    (252) row of the\n   \"Resource Record (RR) TYPEs\" subregistry of the \"Domain
    Name System\n   (DNS) Parameters\" registry.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Internationalization Considerations\n   The AXFR protocol is transparent
    to the parts of DNS zone content\n   that can possibly be subject to Internationalization
    considerations.\n   It is assumed that for DNS labels and domain names, the issue
    has\n   been solved via \"Internationalizing Domain Names in Applications\n   (IDNA)\"
    [RFC3490] or its successor(s).\n"
  title: 10.  Internationalization Considerations
- contents:
  - "11.  Acknowledgments\n   Earlier draft versions of this document have been edited
    by Andreas\n   Gustafsson.  In his latest draft version, this acknowledgment\n
    \  appeared:\n      Many people have contributed input and commentary to earlier\n
    \     versions of this document, including but not limited to Bob\n      Halley,
    Dan Bernstein, Eric A. Hall, Josh Littlefield, Kevin\n      Darcy, Robert Elz,
    Levon Esibov, Mark Andrews, Michael Patton,\n      Peter Koch, Sam Trenholme,
    and Brian Wellington.\n   Comments on later draft versions have come from these
    individuals:\n   Mark Andrews, Paul Vixie, Wouter Wijngaards, Iain Calder, Tony
    Finch,\n   Ian Jackson, Andreas Gustafsson, Brian Wellington, Niall O'Reilly,\n
    \  Bill Manning, and other participants of the DNSEXT working group.\n   Significant
    comments from the IETF at large have been received from\n   Subramanian Moonesamy,
    Chris Lonvick, and Vijay K. Gurbani.\n   Edward Lewis served as a patiently listening
    sole document editor for\n   two years.\n"
  title: 11.  Acknowledgments
- contents:
  - "12.  References\n   All \"RFC\" references below -- like all RFCs -- and information
    about\n   the RFC series can be obtained from the RFC Editor web site at\n   http://www.rfc-editor.org.\n"
  - contents:
    - "12.1.  Normative References\n   [BCP14]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC0793]   Postel, J., \"Transmission Control Protocol\", STD
      7, RFC\n               793, September 1981.\n   [RFC0768]   Postel, J., \"User
      Datagram Protocol\", STD 6, RFC 768,\n               August 1980.\n   [RFC1034]
      \  Mockapetris, P., \"Domain names - concepts and\n               facilities\",
      STD 13, RFC 1034, November 1987.\n   [RFC1035]   Mockapetris, P., \"Domain names
      - implementation and\n               specification\", STD 13, RFC 1035, November
      1987.\n   [RFC1123]   Braden, R., Ed., \"Requirements for Internet Hosts -\n
      \              Application and Support\", STD 3, RFC 1123, October 1989.\n   [RFC1995]
      \  Ohta, M., \"Incremental Zone Transfer in DNS\", RFC 1995,\n               August
      1996.\n   [RFC1996]   Vixie, P., \"A Mechanism for Prompt Notification of Zone\n
      \              Changes (DNS NOTIFY)\", RFC 1996, August 1996.\n   [RFC2136]
      \  Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n               \"Dynamic
      Updates in the Domain Name System (DNS UPDATE)\",\n               RFC 2136,
      April 1997.\n   [RFC2181]   Elz, R. and R. Bush, \"Clarifications to the DNS\n
      \              Specification\", RFC 2181, July 1997.\n   [RFC2671]   Vixie,
      P., \"Extension Mechanisms for DNS (EDNS0)\", RFC\n               2671, August
      1999.\n   [RFC2672]   Crawford, M., \"Non-Terminal DNS Name Redirection\", RFC\n
      \              2672, August 1999.\n   [RFC2845]   Vixie, P., Gudmundsson, O.,
      Eastlake 3rd, D., and B.\n               Wellington, \"Secret Key Transaction
      Authentication for\n               DNS (TSIG)\", RFC 2845, May 2000.\n   [RFC2930]
      \  Eastlake 3rd, D., \"Secret Key Establishment for DNS (TKEY\n               RR)\",
      RFC 2930, September 2000.\n   [RFC2931]   Eastlake 3rd, D., \"DNS Request and
      Transaction Signatures\n               ( SIG(0)s )\", RFC 2931, September 2000.\n
      \  [RFC3425]   Lawrence, D., \"Obsoleting IQUERY\", RFC 3425, November\n               2002.\n
      \  [RFC3597]   Gustafsson, A., \"Handling of Unknown DNS Resource Record\n               (RR)
      Types\", RFC 3597, September 2003.\n   [RFC4033]   Arends, R., Austein, R.,
      Larson, M., Massey, D., and S.\n               Rose, \"DNS Security Introduction
      and Requirements\", RFC\n               4033, March 2005.\n   [RFC4034]   Arends,
      R., Austein, R., Larson, M., Massey, D., and S.\n               Rose, \"Resource
      Records for the DNS Security Extensions\",\n               RFC 4034, March 2005.\n
      \  [RFC4035]   Arends, R., Austein, R., Larson, M., Massey, D., and S.\n               Rose,
      \"Protocol Modifications for the DNS Security\n               Extensions\",
      RFC 4035, March 2005.\n   [RFC4509]   Hardaker, W., \"Use of SHA-256 in DNSSEC
      Delegation Signer\n               (DS) Resource Records (RRs)\", RFC 4509, May
      2006.\n   [RFC4635]   Eastlake 3rd, D., \"HMAC SHA (Hashed Message\n               Authentication
      Code, Secure Hash Algorithm) TSIG\n               Algorithm Identifiers\", RFC
      4635, August 2006.\n   [RFC5155]   Laurie, B., Sisson, G., Arends, R., and D.
      Blacka, \"DNS\n               Security (DNSSEC) Hashed Authenticated Denial
      of\n               Existence\", RFC 5155, March 2008.\n   [RFC5395]   Eastlake
      3rd, D., \"Domain Name System (DNS) IANA\n               Considerations\", BCP
      42, RFC 5395, November 2008.\n   [RFC5702]   Jansen, J., \"Use of SHA-2 Algorithms
      with RSA in DNSKEY\n               and RRSIG Resource Records for DNSSEC\",
      RFC 5702, October\n               2009.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [DNSVALS]   IANA Registry \"Domain Name System
      (DNS) Parameters\",\n               http://www.iana.org/.\n   [IANA-AF]   IANA
      Registry \"Address Family Numbers\",\n               http://www.iana.org/.\n
      \  [RFC2764]   Gleeson, B., Lin, A., Heinanen, J., Armitage, G., and A.\n               Malis,
      \"A Framework for IP Based Virtual Private\n               Networks\", RFC 2764,
      February 2000.\n   [RFC3490]   Faltstrom, P., Hoffman, P., and A. Costello,\n
      \              \"Internationalizing Domain Names in Applications (IDNA)\",\n
      \              RFC 3490, March 2003.\n   [RFC3833]   Atkins, D. and R. Austein,
      \"Threat Analysis of the Domain\n               Name System (DNS)\", RFC 3833,
      August 2004.\n   [DNSSEC-U]  Weiler, S. and D. Blacka, \"Clarifications and\n
      \              Implementation Notes for DNSSECbis\", Work in Progress,\n               March
      2010.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Edward Lewis\n   46000 Center Oak Plaza\n   Sterling,
    VA  20166\n   US\n   EMail: ed.lewis@neustar.biz\n   Alfred Hoenes, Editor\n   TR-Sys\n
    \  Gerlinger Str. 12\n   Ditzingen  D-71254\n   Germany\n   EMail: ah@TR-Sys.de\n"
  title: Authors' Addresses
