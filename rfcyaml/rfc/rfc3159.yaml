- title: __initial_text__
  contents:
  - '          Structure of Policy Provisioning Information (SPPI)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document, the Structure of Policy Provisioning Information\n\
    \   (SPPI), defines the adapted subset of SNMP's Structure of Management\n   Information\
    \ (SMI) used to write Policy Information Base (PIB)\n   modules.\n   RFC 2748\
    \ defines the COPS protocol, and RFC 2749 describes how the\n   COPS protocol\
    \ is used to provide for the outsourcing of policy\n   decisions for RSVP.  Another\
    \ usage of the COPS protocol, for the\n   provisioning of policy, is introduced\
    \ in RFC 3084.  In this\n   provisioning model, the policy information is viewed\
    \ as a collection\n   of Provisioning Classes (PRCs) and Provisioning Instances\
    \ (PRIs)\n   residing in a virtual information store, termed the Policy\n   Information\
    \ Base (PIB).  Collections of related Provisioning Classes\n   are defined in\
    \ a PIB module.\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Use of the SMI .................................................\
    \  3\n   1.1 Terminology Translation ......................................  3\n\
    \   1.2 Overview .....................................................  3\n  \
    \ 2 Structure of this Specification ................................  4\n   3\
    \ Definitions ....................................................  5\n   4 PIB\
    \ Modules .................................................... 17\n   4.1 Importing\
    \ Definitions ........................................ 17\n   4.2 Reserved Keywords\
    \ ............................................ 18\n   5 Naming Hierarchy ...............................................\
    \ 18\n   6 Mapping of the MODULE-IDENTITY macro ........................... 18\n\
    \   6.1 Mapping of the SUBJECT-CATEGORIES clause ..................... 18\n  \
    \ 7 Mapping of the OBJECT-TYPE macro ............................... 19\n   7.1\
    \ Mapping of the SYNTAX clause ................................. 19\n   7.1.1\
    \ Counter32 .................................................. 19\n   7.1.2 Gauge32\
    \ .................................................... 20\n   7.1.3 Opaque .....................................................\
    \ 20\n   7.1.4 IpAddress .................................................. 20\n\
    \   7.1.5 Counter64 .................................................. 20\n  \
    \ 7.1.6 Integer64 .................................................. 20\n   7.1.7\
    \ Unsigned64 ................................................. 20\n   7.1.8 Provisioning\
    \ Classes ....................................... 21\n   7.2 Mapping of the MAX-ACCESS\
    \ clause ............................. 21\n   7.3 Mapping of the PIB-ACCESS clause\
    \ ............................. 22\n   7.4 Mapping of the INSTALL-ERRORS clause\
    \ ......................... 22\n   7.5 Mapping of the PIB-INDEX clause ..............................\
    \ 22\n   7.6 Mapping of the INDEX clause .................................. 23\n\
    \   7.7 Mapping of the AUGMENTS clause ............................... 23\n  \
    \ 7.8 Mapping of the EXTENDS clause ................................ 24\n   7.8.1\
    \  Relation between PIB-INDEX, AUGMENTS and EXTENDS clauses .. 24\n   7.9 Mapping\
    \ of the UNIQUENESS clause ............................. 25\n   7.10 Mapping of\
    \ the PIB-REFERENCES clause ........................ 25\n   7.11 Mapping of the\
    \ PIB-TAG clause ............................... 25\n   8 Mapping of the OBJECT-IDENTITY\
    \ macro ........................... 26\n   9 Mapping of the OBJECT-GROUP macro\
    \ .............................. 26\n   9.1 Mapping of the OBJECTS clause ................................\
    \ 26\n   10 Mapping of the MODULE-COMPLIANCE macro ........................ 26\n\
    \   10.1 Mapping of the MODULE clause ................................ 26\n  \
    \ 10.1.1 Mapping of the MANDATORY-GROUPS clause .................... 27\n   10.1.2\
    \ Mapping of the GROUP clause ............................... 27\n   10.1.3 Mapping\
    \ of the OBJECT clause .............................. 27\n   10.1.3.1 Mapping\
    \ of the SYNTAX clause ............................ 27\n   10.1.3.2 Mapping of\
    \ the WRITE-SYNTAX clause ...................... 28\n   10.1.3.3 Mapping of the\
    \ PIB-MIN-ACCESS clause .................... 28\n   11 Textual Conventions ...........................................\
    \ 28\n   11.1 Mapping of the TEXTUAL-CONVENTION macro ..................... 28\n\
    \   11.1.1 Mapping of the DISPLAY-HINT clause ........................ 29\n  \
    \ 11.1.2 Mapping of the SYNTAX clause .............................. 29\n   11.1.2.1\
    \ Sub-typing of Textual Conventions ....................... 29\n   12 Extending\
    \ a PIB Module ........................................ 29\n   12.1 PIB Modules\
    \ ................................................. 29\n   12.2 Object Assignments\
    \ .......................................... 30\n   12.3 Object Definitions ..........................................\
    \ 30\n   Appendix A: Mapping a PIB to a MIB ............................... 32\n\
    \   Appendix B: Example usage of PIB-REFERENCES and PIB-TAG clauses .. 33\n  \
    \ Security Considerations .......................................... 35\n   IANA\
    \ Considerations .............................................. 35\n   Authors'\
    \ Addresses ............................................... 37\n   References\
    \ ....................................................... 38\n   Full Copyright\
    \ Statement ......................................... 40\n"
- title: 1.  Use of the SMI
  contents:
  - "1.  Use of the SMI\n   The SPPI and PIB modules are based on SNMP's SMI and MIB\
    \ modules,\n   which use an adapted subset of the ASN.1 data definition language\n\
    \   [ASN1].  The decision to base the definition of PIB modules on this\n   format\
    \ allows for the leveraging of the community's knowledge,\n   experience and tools\
    \ of the SMI and MIB modules.\n"
- title: 1.1.  Terminology Translation
  contents:
  - "1.1.  Terminology Translation\n   The SMI uses the term \"managed objects\" to\
    \ refer to object types,\n   both tabular types with descriptors such as xxxTable\
    \ and xxxEntry, as\n   well as scalar and columnar object types.  The SPPI does\
    \ not use the\n   term \"object\" so as to avoid confusion with COPS protocol\
    \ objects.\n   Instead, the SPPI uses the term Provisioning Class (PRC) for the\n\
    \   table and row definitions (the xxxTable and xxxEntry objects,\n   respectively),\
    \ and Provisioning Instance (PRI) for an instantiation\n   of a row definition.\
    \  For a columnar object of a table definition,\n   the SPPI uses the term \"\
    attribute\" of a Provisioning Class.  (The\n   SPPI does not support the equivalent\
    \ of the SMI's scalar objects.)\n"
- title: 1.2.  Overview
  contents:
  - "1.2.  Overview\n   SNMP's SMI is divided into five parts: module definitions,\
    \ object\n   definitions, notification definitions [SMI], textual convention\n\
    \   definitions [TC] and conformance definitions [CONF].\n   -  The SMI's MODULE-IDENTITY\
    \ macro is used to convey the semantics of\n      a MIB module.  The SPPI uses\
    \ this macro to convey the semantics of\n      a PIB module.\n   -  The SMI's\
    \ OBJECT-TYPE macro is used to convey the syntax and\n      semantics of managed\
    \ objects.  The SPPI uses this macro to convey\n      the syntax and semantics\
    \ of PRCs and their attributes.\n   -  The SMI's notification definitions are\
    \ not used (at this time) by\n      the SPPI.  (Note that the use of the keyword\
    \ 'notify' in the SPPI\n      is not related to the SMI's notifications).\n  \
    \ -  The SMI's TEXTUAL CONVENTION macro allows new data types to be\n      defined.\
    \  The SPPI uses this macro to define new data types having\n      particular\
    \ syntax and semantics which is common to several\n      attributes of one of\
    \ more PRCs.\n   -  The SMI's conformance definitions define several macros: the\n\
    \      OBJECT-GROUP macro, the NOTIFICATION-GROUP macro, the MODULE-\n      COMPLIANCE\
    \ macro and the AGENT-CAPABILITIES macro.  The SPPI uses\n      the OBJECT-GROUP\
    \ and MODULE-COMPLIANCE macros to specify\n      acceptable lower-bounds of implementation\
    \ of the attributes of\n      PRCs, and thereby indirectly, acceptable lower-bounds\
    \ of\n      implementation of the PRCs themselves.  The NOTIFICATION-GROUP\n \
    \     macro is not used (at this time) by the SPPI.  Potential usage by\n    \
    \  the SPPI of the AGENT- CAPABILITIES macro is for further study.\n"
- title: 2.  Structure of this Specification
  contents:
  - "2.  Structure of this Specification\n   The SMI is specified in terms of an ASN.1\
    \ definition together with\n   descriptive text for each element introduced in\
    \ that ASN.1\n   definition.  This document specifies the SPPI also via a ASN.1\n\
    \   definition, which is a modified version of the SMI's definition,\n   together\
    \ with descriptive text for only those elements in the SPPI's\n   ASN.1 definition\
    \ which have differences from the SMI's.  For elements\n   in the ASN.1 definition\
    \ which have no descriptive text in this\n   specification, the reader is referred\
    \ to the SMI's descriptive text\n   for that element.\n"
- title: 3.  Definitions
  contents:
  - '3.  Definitions

    '
- title: COPS-PR-SPPI DEFINITIONS ::= BEGIN
  contents:
  - 'COPS-PR-SPPI DEFINITIONS ::= BEGIN

    '
- title: IMPORTS    ObjectName, SimpleSyntax, ExtUTCTime, mgmt
  contents:
  - "IMPORTS    ObjectName, SimpleSyntax, ExtUTCTime, mgmt\n                     \
    \                           FROM SNMPv2-SMI;\n"
- title: -- the root for PIB definitions
  contents:
  - "-- the root for PIB definitions\n      pib           OBJECT IDENTIFIER ::= {\
    \ mgmt 2 }\n"
- title: -- definitions for PIB modules
  contents:
  - '-- definitions for PIB modules

    '
- title: MODULE-IDENTITY MACRO ::=
  contents:
  - 'MODULE-IDENTITY MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  SubjectPart                 \
    \       -- new\n                  \"LAST-UPDATED\" value(Update ExtUTCTime)\n\
    \                  \"ORGANIZATION\" Text\n                  \"CONTACT-INFO\" Text\n\
    \                  \"DESCRIPTION\" Text\n                  RevisionPart\n    VALUE\
    \ NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    SubjectPart\
    \ ::=                                  -- new\n                  \"SUBJECT-CATEGORIES\"\
    \ \"{\" Categories \"}\"\n                   -- see IANA Considerations section\n\
    \    Categories ::=                                   -- new\n               \
    \   CategoryIDs\n                | \"all\"\n    CategoryIDs ::=              \
    \                    -- new\n                  CategoryID\n                | CategoryIDs\
    \ \",\" CategoryID\n    CategoryID ::=                                   -- new\n\
    \                 identifier \"(\" number \")\"  -- number is positive\n    RevisionPart\
    \ ::=\n                  Revisions\n                | empty\n    Revisions ::=\n\
    \                  Revision\n                | Revisions Revision\n    Revision\
    \ ::=\n                  \"REVISION\" value(Update ExtUTCTime)\n             \
    \     \"DESCRIPTION\" Text\n    -- a character string as defined in [SMI]\n  \
    \  Text ::= value(IA5String)\n"
- title: END
  contents:
  - 'END

    '
- title: --
  contents:
  - '--

    '
- title: OBJECT-IDENTITY MACRO ::=
  contents:
  - 'OBJECT-IDENTITY MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"STATUS\" Status\n         \
    \         \"DESCRIPTION\" Text\n                  ReferPart\n    VALUE NOTATION\
    \ ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    Status ::=\n    \
    \              \"current\"\n                | \"deprecated\"\n               \
    \ | \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\" Text\n  \
    \              | empty\n    -- a character string as defined in [SMI]\n    Text\
    \ ::= value(IA5String)\n"
- title: END
  contents:
  - 'END

    '
- title: -- syntax of attributes
  contents:
  - '-- syntax of attributes

    '
- title: '-- the "base types" defined here are:'
  contents:
  - '-- the "base types" defined here are:

    '
- title: '--   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER'
  contents:
  - '--   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER

    '
- title: '--   7 application-defined types: Integer32, IpAddress, Unsigned32,'
  contents:
  - '--   7 application-defined types: Integer32, IpAddress, Unsigned32,

    '
- title: --         TimeTicks, Opaque, Integer64 and Unsigned64
  contents:
  - '--         TimeTicks, Opaque, Integer64 and Unsigned64

    '
- title: ObjectSyntax ::=
  contents:
  - "ObjectSyntax ::=\n    CHOICE {\n        simple\n            SimpleSyntax,\n \
    \         -- note that SEQUENCEs for table and row definitions\n          -- are\
    \ not mentioned here...\n        application-wide\n            ApplicationSyntax\n\
    \    }\n"
- title: -- application-wide types
  contents:
  - '-- application-wide types

    '
- title: ApplicationSyntax ::=
  contents:
  - "ApplicationSyntax ::=\n    CHOICE {\n        ipAddress-value\n            IpAddress,\n\
    \        timeticks-value\n            TimeTicks,\n        arbitrary-value\n  \
    \          Opaque,\n        unsigned-integer-value\n            Unsigned32,\n\
    \        large-integer-value                        -- new\n            Integer64,\n\
    \        large-unsigned-integer-value               -- new\n            Unsigned64\n\
    \    }\n"
- title: -- the following 5 types are copied from the SMI
  contents:
  - '-- the following 5 types are copied from the SMI

    '
- title: -- indistinguishable from INTEGER, but never needs more than
  contents:
  - '-- indistinguishable from INTEGER, but never needs more than

    '
- title: -- 32-bits for a two's complement representation
  contents:
  - '-- 32-bits for a two''s complement representation

    '
- title: Integer32 ::=
  contents:
  - "Integer32 ::=\n        INTEGER (-2147483648..2147483647)\n"
- title: -- (this is a tagged type for historical reasons)
  contents:
  - '-- (this is a tagged type for historical reasons)

    '
- title: IpAddress ::=
  contents:
  - "IpAddress ::=\n    [APPLICATION 0]\n        IMPLICIT OCTET STRING (SIZE (4))\n"
- title: -- ******* THIS TYPE DEFINITION IS DEPRECATED *******
  contents:
  - '-- ******* THIS TYPE DEFINITION IS DEPRECATED *******

    '
- title: -- The IpAddress type represents a 32-bit internet
  contents:
  - '-- The IpAddress type represents a 32-bit internet

    '
- title: -- IPv4 address.  It is represented as an OctetString
  contents:
  - '-- IPv4 address.  It is represented as an OctetString

    '
- title: -- of length 4, in network byte-order.
  contents:
  - '-- of length 4, in network byte-order.

    '
- title: -- Note that the IpAddress type is present for
  contents:
  - '-- Note that the IpAddress type is present for

    '
- title: -- historical reasons. IPv4 and IPv6 addresses should
  contents:
  - '-- historical reasons. IPv4 and IPv6 addresses should

    '
- title: -- be represented using the INET-ADDRESS-MIB
  contents:
  - '-- be represented using the INET-ADDRESS-MIB

    '
- title: -- defined in [INETADDR].
  contents:
  - '-- defined in [INETADDR].

    '
- title: -- an unsigned 32-bit quantity
  contents:
  - '-- an unsigned 32-bit quantity

    '
- title: Unsigned32 ::=
  contents:
  - "Unsigned32 ::=\n    [APPLICATION 2]\n        IMPLICIT INTEGER (0..4294967295)\n"
- title: -- hundredths of seconds since an epoch
  contents:
  - '-- hundredths of seconds since an epoch

    '
- title: TimeTicks ::=
  contents:
  - "TimeTicks ::=\n    [APPLICATION 3]\n        IMPLICIT INTEGER (0..4294967295)\n"
- title: --for backward compatibility only
  contents:
  - '--for backward compatibility only

    '
- title: Opaque ::=
  contents:
  - "Opaque ::=\n    [APPLICATION 4]\n        IMPLICIT OCTET STRING\n"
- title: -- the following 2 types are not present in the SMI
  contents:
  - '-- the following 2 types are not present in the SMI

    '
- title: Integer64 ::=
  contents:
  - "Integer64 ::=\n    [APPLICATION 10]\n        IMPLICIT INTEGER (-9223372036854775808..9223372036854775807)\n"
- title: Unsigned64 ::=
  contents:
  - "Unsigned64 ::=\n    [APPLICATION 11]\n        IMPLICIT INTEGER (0..18446744073709551615)\n"
- title: -- definition for Provisioning Classes and their attributes
  contents:
  - '-- definition for Provisioning Classes and their attributes

    '
- title: -- (differences from the SMI are noted in the ASN.1 comments)
  contents:
  - '-- (differences from the SMI are noted in the ASN.1 comments)

    '
- title: OBJECT-TYPE MACRO ::=
  contents:
  - 'OBJECT-TYPE MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"SYNTAX\" Syntax\n         \
    \         UnitsPart\n                  \"PIB-ACCESS\" Access       -- modified\n\
    \                  PibReferencesPart         -- new\n                  PibTagPart\
    \                -- new\n                  \"STATUS\" Status\n               \
    \   \"DESCRIPTION\" Text\n                  ErrorsPart                -- new\n\
    \                  ReferPart\n                  IndexPart                 -- modified\n\
    \                  MibIndexPart              -- modified\n                  UniquePart\
    \                -- new\n                  DefValPart\n    VALUE NOTATION ::=\n\
    \                  value(VALUE ObjectName)\n    Syntax ::=   -- Must be one of\
    \ the following:\n                       -- a base type (or its refinement),\n\
    \                       -- a textual convention (or its refinement), or\n    \
    \                   -- a BITS pseudo-type\n                   type\n         \
    \       | \"BITS\" \"{\" NamedBits \"}\"\n    NamedBits ::= NamedBit\n       \
    \         | NamedBits \",\" NamedBit\n    NamedBit ::=  identifier \"(\" number\
    \ \")\" -- number is nonnegative\n    UnitsPart ::=\n                  \"UNITS\"\
    \ Text\n                | empty\n    Access ::=                              \
    \      -- modified\n                  \"install\"\n                | \"notify\"\
    \n                | \"install-notify\"\n                | \"report-only\"\n  \
    \  Status ::=\n                  \"current\"\n                | \"deprecated\"\
    \n                | \"obsolete\"\n    ErrorsPart ::=                         \
    \       -- new\n                  \"INSTALL-ERRORS\" \"{\" Errors \"}\"\n    \
    \            | empty\n    Errors ::=                                    -- new\n\
    \                  Error\n                | Errors \",\" Error\n    Error ::=\
    \                                     -- new\n                  identifier \"\
    (\" number \")\"   -- number is positive\n    ReferPart ::=\n                \
    \  \"REFERENCE\" Text\n                | empty\n    IndexPart ::=\n          \
    \        \"PIB-INDEX\" \"{\" Index \"}\"      -- new\n                | \"AUGMENTS\"\
    \  \"{\" Entry \"}\"\n                | \"EXTENDS\"   \"{\" Entry \"}\"      --\
    \ new\n                | empty\n    Index ::=\n                    -- the correspondent\
    \ OBJECT-TYPE invocation\n                  value(ObjectName)\n    Entry ::=\n\
    \                    -- use the INDEX value of the\n                    -- correspondent\
    \ OBJECT-TYPE invocation\n                  value(ObjectName)\n    MibIndexPart\
    \ ::=\n                  \"INDEX\"   \"{\" IndexTypePart \"}\"\n             \
    \   | empty\n    IndexTypePart ::=\n                  IndexTypes\n           \
    \     | IndexTypes \",\" ImpliedIndex\n                | ImpliedIndex\n    IndexTypes\
    \ ::=\n                  Index\n                | IndexTypes \",\" Index\n   \
    \ ImpliedIndex ::=\n                  \"IMPLIED\" Index\n    PibReferencesPart\
    \ ::=\n                     -- for use with ReferenceId TC\n                 \
    \ \"PIB-REFERENCES\" \"{\" Entry \"}\"\n                |  empty\n    PibTagPart\
    \ ::=\n                     -- for use with TagReferenceId TC\n              \
    \     \"PIB-TAG\" \"{\" Attr \"}\"\n                |  empty\n    Attr ::=   \
    \    -- specifies an attribute\n                   value(ObjectName)\n    UniquePart\
    \ ::=                               -- new\n                  \"UNIQUENESS\" \
    \   \"{\" UniqueTypes \"}\"\n                | \"UNIQUENESS\"    \"{\" \"}\"\n\
    \                |  empty\n    UniqueTypes ::=\n                  UniqueType\n\
    \                | UniqueTypes \",\" UniqueType\n    UniqueType ::=\n        \
    \            -- the correspondent OBJECT-TYPE invocation\n                  value(ObjectName)\n\
    \    DefValPart ::= \"DEFVAL\" \"{\" Defvalue \"}\"\n                | empty\n\
    \    Defvalue ::=  -- must be valid for the type specified in\n              \
    \    -- SYNTAX clause of same OBJECT-TYPE macro\n                  value(ObjectSyntax)\n\
    \                | \"{\" BitsValue \"}\"\n    BitsValue ::= BitNames\n       \
    \         | empty\n    BitNames ::=  BitName\n                | BitNames \",\"\
    \ BitName\n    BitName ::= identifier\n    -- a character string as defined in\
    \ [SMI]\n    Text ::= value(IA5String)\n"
- title: END
  contents:
  - 'END

    '
- title: -- definitions for conformance groups
  contents:
  - '-- definitions for conformance groups

    '
- title: OBJECT-GROUP MACRO ::=
  contents:
  - 'OBJECT-GROUP MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  ObjectsPart\n               \
    \   \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n              \
    \    ReferPart\n    VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n\
    \    ObjectsPart ::=\n                  \"OBJECTS\" \"{\" Objects \"}\"\n    Objects\
    \ ::=\n                  Object\n                | Objects \",\" Object\n    Object\
    \ ::=\n                  value(ObjectName)\n    Status ::=\n                 \
    \ \"current\"\n                | \"deprecated\"\n                | \"obsolete\"\
    \n    ReferPart ::=\n                  \"REFERENCE\" Text\n                | empty\n\
    \    -- a character string as defined in [SMI]\n    Text ::= value(IA5String)\n"
- title: END
  contents:
  - 'END

    '
- title: -- definitions for compliance statements
  contents:
  - '-- definitions for compliance statements

    '
- title: MODULE-COMPLIANCE MACRO ::=
  contents:
  - 'MODULE-COMPLIANCE MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"STATUS\" Status\n         \
    \         \"DESCRIPTION\" Text\n                  ReferPart\n                \
    \  ModulePart\n    VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n\
    \    Status ::=\n                  \"current\"\n                | \"deprecated\"\
    \n                | \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\"\
    \ Text\n                | empty\n    ModulePart ::=\n                  Modules\n\
    \    Modules ::=\n                  Module\n                | Modules Module\n\
    \    Module ::=\n                  -- name of module --\n                  \"\
    MODULE\" ModuleName\n                  MandatoryPart\n                  CompliancePart\n\
    \    ModuleName ::=\n                  -- identifier must start with uppercase\
    \ letter\n                  identifier ModuleIdentifier\n                  --\
    \ must not be empty unless contained\n                  -- in MIB Module\n   \
    \             | empty\n    ModuleIdentifier ::=\n                  value(OBJECT\
    \ IDENTIFIER)\n                | empty\n    MandatoryPart ::=\n              \
    \    \"MANDATORY-GROUPS\" \"{\" Groups \"}\"\n                | empty\n    Groups\
    \ ::=\n                  Group\n                | Groups \",\" Group\n    Group\
    \ ::=\n                  value(OBJECT IDENTIFIER)\n    CompliancePart ::=\n  \
    \                Compliances\n                | empty\n    Compliances ::=\n \
    \                 Compliance\n                | Compliances Compliance\n    Compliance\
    \ ::=\n                  ComplianceGroup\n                | Object\n    ComplianceGroup\
    \ ::=\n                  \"GROUP\" value(OBJECT IDENTIFIER)\n                \
    \  \"DESCRIPTION\" Text\n    Object ::=\n                  \"OBJECT\" value(ObjectName)\n\
    \                  InstallSyntaxPart                   -- modified\n         \
    \         AccessPart\n                  \"DESCRIPTION\" Text\n    -- must be a\
    \ refinement for object's SYNTAX clause\n    InstallSyntaxPart ::= \"SYNTAX\"\
    \ Syntax\n                | empty\n    Syntax ::=    -- Must be one of the following:\n\
    \                       -- a base type (or its refinement),\n                \
    \       -- a textual convention (or its refinement), or\n                    \
    \   -- a BITS pseudo-type\n                  type\n                | \"BITS\"\
    \ \"{\" NamedBits \"}\"\n    NamedBits ::= NamedBit\n                | NamedBits\
    \ \",\" NamedBit\n    NamedBit ::= identifier \"(\" number \")\" -- number is\
    \ nonnegative\n    AccessPart ::=\n                  \"PIB-MIN-ACCESS\" Access\
    \            -- modified\n                | empty\n    Access ::=            \
    \                           -- modified\n                  \"not-accessible\"\n\
    \                | \"install\"\n                | \"notify\"\n               \
    \ | \"install-notify\"\n                | \"report-only\"\n    -- a character\
    \ string as defined in [SMI]\n    Text ::= value(IA5String)\n"
- title: END
  contents:
  - 'END

    '
- title: -- definition of textual conventions
  contents:
  - '-- definition of textual conventions

    '
- title: TEXTUAL-CONVENTION MACRO ::=
  contents:
  - 'TEXTUAL-CONVENTION MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  DisplayPart\n               \
    \   \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n              \
    \    ReferPart\n                  \"SYNTAX\" Syntax\n    VALUE NOTATION ::=\n\
    \                   value(VALUE Syntax)      -- adapted ASN.1\n    DisplayPart\
    \ ::=\n                  \"DISPLAY-HINT\" Text\n                | empty\n    Status\
    \ ::=\n                  \"current\"\n                | \"deprecated\"\n     \
    \           | \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\"\
    \ Text\n                | empty\n    -- a character string as defined in [SMI]\n\
    \    Text ::= value(IA5String)\n    Syntax ::=   -- Must be one of the following:\n\
    \                       -- a base type (or its refinement), or\n             \
    \          -- a BITS pseudo-type\n                  type\n                | \"\
    BITS\" \"{\" NamedBits \"}\"\n    NamedBits ::= NamedBit\n                | NamedBits\
    \ \",\" NamedBit\n    NamedBit ::=  identifier \"(\" number \")\" -- number is\
    \ nonnegative\n"
- title: END
  contents:
  - 'END

    '
- title: END
  contents:
  - 'END

    '
- title: COPS-PR-SPPI-TC   PIB-DEFINITIONS ::= BEGIN
  contents:
  - 'COPS-PR-SPPI-TC   PIB-DEFINITIONS ::= BEGIN

    '
- title: IMPORTS    Unsigned32, MODULE-IDENTITY, TEXTUAL-CONVENTION, pib
  contents:
  - "IMPORTS    Unsigned32, MODULE-IDENTITY, TEXTUAL-CONVENTION, pib\n           \
    \                                   FROM COPS-PR-SPPI;\n"
- title: copsPrSppiTc    MODULE-IDENTITY
  contents:
  - "copsPrSppiTc    MODULE-IDENTITY\n    SUBJECT-CATEGORIES   { all }\n    LAST-UPDATED\
    \ \"200108160000Z\"\n    ORGANIZATION \"IETF RAP WG\"\n    CONTACT-INFO \"Keith\
    \ McCloghrie\n                  Cisco Systems, Inc.\n                  170 West\
    \ Tasman Drive,\n                  San Jose, CA 95134-1706 USA\n             \
    \     Phone: +1 408 526 5260\n                  Email: kzm@cisco.com\n       \
    \           Ravi Sahita\n                  Intel\n                  2111 NE 25th\
    \ Avenue\n                  Hillsboro, OR 97124 USA\n                  Phone:\
    \ +1 503 712 1554\n                  Email: ravi.sahita@intel.com \"\n    DESCRIPTION\n\
    \            \"The PIB module containing a set of Textual Conventions\n      \
    \      which have general applicability to all PIB modules.\"\n    REVISION  \
    \   \"200108160000Z\"\n    DESCRIPTION\n         \"Initial version, published\
    \ in RFC 3159.\"\n    ::= { pib 1 }\n"
- title: InstanceId ::= TEXTUAL-CONVENTION
  contents:
  - "InstanceId ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The textual convention for use by an attribute which is used\n    \
    \    as the instance-identifying index of a PRC, i.e., an attribute\n        named\
    \ in a PIB-INDEX clause.  The value of an attribute with\n        this syntax\
    \ is always greater than zero.  PRIs of the same PRC\n        need not have contiguous\
    \ values for their instance-identifying\n        attribute.\"\n    SYNTAX    \
    \   Unsigned32 (1..4294967295)\n"
- title: ReferenceId ::= TEXTUAL-CONVENTION
  contents:
  - "ReferenceId ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \        \"A textual convention for use by an attribute which is used as\n   \
    \     a pointer in order to reference an instance of a particular\n        PRC.\
    \  An attribute with this syntax must not be used in a\n        PIB-INDEX clause\
    \ , and its description must specify the\n        particular PRC to which the\
    \ referenced PRI will belong.\n        For an attribute of this type, the referenced\
    \ PRI must exist.\n        Furthermore, it is an error to try to delete a PRI\
    \ that is\n        referenced by another instance without first deleting/modifying\n\
    \        the referencing instance.  The definition of an attribute with\n    \
    \    this syntax can permit the attribute to have a value of zero to\n       \
    \ indicate that it is not currently pointing to a PRI.\"\n    SYNTAX       Unsigned32\n"
- title: Prid ::= TEXTUAL-CONVENTION
  contents:
  - "Prid ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n    \
    \     \"Represents a pointer to a PRI, i.e,. to an instance of a\n         PRC.\
    \  The value is the OID name of the PRC's row definition,\n         appended with\
    \ one sub-identifier containing the value of the\n         InstanceId value for\
    \ the referenced instance.  The definition\n         of an attribute with this\
    \ syntax can permit the attribute to\n         have a value of 0.0 to indicate\
    \ that it is not currently\n         pointing to a PRI.\"\n    SYNTAX       OBJECT\
    \ IDENTIFIER\n"
- title: TagId ::= TEXTUAL-CONVENTION
  contents:
  - "TagId ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n   \
    \      \"Represents a tag value, such that all instances of a\n         particular\
    \ PRC having the same tag value form a tag list.\n         A tag list is identified\
    \ by the tag value shared by all\n         instances in that tag list.\"\n   \
    \ SYNTAX       Unsigned32 (1..4294967295)\n"
- title: TagReferenceId ::= TEXTUAL-CONVENTION
  contents:
  - "TagReferenceId ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \         \"Represents a reference to a tag list of instances of a\n         particular\
    \ PRC.  The particular PRC must have an attribute\n         with the syntax of\
    \ TagId.  The tag list consists of\n         all instances which have the same\
    \ value of the TagId\n         attribute.  Reference to the tag list is via the\
    \ attribute\n         with the syntax of TagReferenceId containing the tag\n \
    \        value which identifies the tag list.\n         The definition of an attribute\
    \ with this syntax can permit\n         the attribute to have a value of 0 to\
    \ indicate that it is\n         not currently referencing a tag list.\"\n    SYNTAX\
    \       Unsigned32\n"
- title: END
  contents:
  - 'END

    '
- title: 4.  PIB Modules
  contents:
  - "4.  PIB Modules\n   The names of all standard PIB modules must be unique (but\
    \ different\n   versions of the same module should have the same name).  Developers\n\
    \   of enterprise PIB modules are encouraged to choose names for their\n   modules\
    \ that will have a low probability of colliding with standard\n   or other enterprise\
    \ modules.\n   The first line of a PIB module is:\n        PIB-MODULE-NAME   PIB-DEFINITIONS\
    \ ::= BEGIN\n   where PIB-MODULE-NAME is the module name.\n   Like the SMI, additional\
    \ ASN.1 macros must not be defined in PIB\n   modules.\n"
- title: 4.1.  Importing Definitions
  contents:
  - "4.1.  Importing Definitions\n   Like the SMI, a PIB module which needs to reference\
    \ an external\n   definition, must use the IMPORTS statement to identify both\
    \ the\n   descriptor and the module in which the descriptor is defined, where\
    \ a\n   module is identified by its ASN.1 module name.\n   In particular, a PIB\
    \ module imports each of the base data types that\n   it uses from COPS-PR-SPPI\
    \ (defined in this document), and may import\n   as required from other PIB modules.\
    \  A PIB module may import, from\n   the SMI, (subtree) OIDs for the purpose of\
    \ defining new OIDs.  A PIB\n   module may also import, from MIB modules, OID\
    \ assignments as well as\n   textual convention definitions providing that their\
    \ underlying syntax\n   is supported by the SPPI.  However, the following must\
    \ not be\n   included in an IMPORTS statement:\n   -  named types defined by ASN.1\
    \ itself, specifically: INTEGER, OCTET\n      STRING, OBJECT IDENTIFIER, SEQUENCE,\
    \ SEQUENCE OF type,\n   -  the BITS construct.\n   For each ASN.1 macro that a\
    \ PIB uses, it must import that macro's\n   definition from the COPS-PR-SPPI.\n"
- title: 4.2.  Reserved Keywords
  contents:
  - "4.2.  Reserved Keywords\n   In addition to the reserved keywords listed in the\
    \ SMI, the following\n   must not be used as descriptors or module names:\n  \
    \    EXTENDS INSTALL-ERRORS Integer64 PIB-MIN-ACCESS PIB-ACCESS PIB-\n      INDEX\
    \ PIB-REFERENCES PIB-TAG SUBJECT-CATEGORIES UNIQUENESS\n      Unsigned64\n"
- title: 5.  Naming Hierarchy
  contents:
  - "5.  Naming Hierarchy\n   The SPPI uses the same OBJECT IDENTIFIER naming hierarchy\
    \ as the SMI.\n   That is, OIDs are typically assigned to PIB modules from the\
    \ subtree\n   administered by the Internet Assigned Numbers Authority (IANA).\n\
    \   However, like the SMI, the SPPI does not prohibit the definition of\n   PRCs\
    \ in other portions of the OID tree.\n"
- title: 6.  Mapping of the MODULE-IDENTITY macro
  contents:
  - '6.  Mapping of the MODULE-IDENTITY macro

    '
- title: 6.1.  Mapping of the SUBJECT-CATEGORIES clause
  contents:
  - "6.1.  Mapping of the SUBJECT-CATEGORIES clause\n   The SUBJECT-CATEGORIES clause,\
    \ which must be present, identifies one\n   or more categories of provisioning\
    \ data for which this PIB module\n   defines provisioning information.  For use\
    \ with the COPS-PR protocol,\n   the individual subject categories are mapped\
    \ to COPS Client Types\n   [COPS-PR].  IANA Considerations for SPPI SUBJECT-CATEGORIES\
    \ follow\n   the same requirements as specified in [COPS] IANA Considerations\
    \ for\n   COPS Client Types. The subject categories are identified either:\n \
    \  -  via the keyword \"all\", indicating the PIB module defines\n      provisioning\
    \ information relevant for all subject categories (and\n      thus, all COPS Client\
    \ Types), or\n   -  a list of named-number enumerations, where each number which\
    \ must\n      be greater than zero, identifies a subject category, and is mapped\n\
    \      to the Client Type which is identified by that same number in the\n   \
    \   COPS protocol.  The namespace for these named numbers is global\n      and\
    \ therefore the labels should be assigned consistently across\n      PIB modules.\
    \  At present time, no more than one named-number\n      enumeration should be\
    \ specified.\n   Note that the list of categories specified in a PIB module's\
    \ SUBJECT-\n   CATEGORIES clause is not exclusive.  That is, some other\n   specification\
    \ might (e.g., at a future date) specify additional COPS\n   Client Types to which\
    \ the module is relevant.\n   When a PIB module applies to multiple subject categories,\
    \ that PIB\n   module exists in multiple virtual information stores, one for each\n\
    \   Client-Type. A PIB module with SUBJECT-CATEGORIES \"all\" uses the\n   named-\
    \ number specified in the SUBJECT-CATEGORIES of the PIB it is\n   associated with,\
    \ as the COPS Client-Type when it is sent over COPS.\n"
- title: 7.  Mapping of the OBJECT-TYPE macro
  contents:
  - "7.  Mapping of the OBJECT-TYPE macro\n   The SPPI requires that all attribute\
    \ definitions be contained within\n   a PRC, i.e., within a table definition.\n"
- title: 7.1.  Mapping of the SYNTAX clause
  contents:
  - "7.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which must be present\
    \ within the definition of an\n   attribute, defines the abstract data structure\
    \ of that attribute.\n   The data structure must be one of the following: a base\
    \ type, the\n   BITS construct, or a textual convention.\n   The SYNTAX clause\
    \ must also be present for the table and row\n   definitions of a PRC, and in\
    \ this case must be a SEQUENCE OF or\n   SEQUENCE (see section 8.1.7 below).\n\
    \   The base types are an extended subset of the SMI's base types:\n   -  built-in\
    \ ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER,\n   -  application-defined\
    \ types: Integer32, Unsigned32, TimeTicks,\n      Integer64 and Unsigned64.\n\
    \   A textual convention is a newly-defined type defined as a sub-type of\n  \
    \ a base type [TC].  The value of an attribute whose syntax is defined\n   using\
    \ a textual convention is encoded \"on-the-wire\" according to the\n   textual\
    \ convention's underlying base type.\n   Note that the set of base types has been\
    \ chosen so as to provide\n   sufficient variety of on-the-wire encodings for\
    \ attribute values;\n   base types should contain a minimum of semantics.  Semantics\
    \ should,\n   to the extent possible, be incorporated into a data type through\
    \ the\n   use of a textual convention.\n   The differences from the SMI in the\
    \ semantics of ObjectSyntax are now\n   described.\n"
- title: 7.1.1.  Counter32
  contents:
  - "7.1.1.  Counter32\n   The Counter32 type is not supported by the SPPI.\n"
- title: 7.1.2.  Gauge32
  contents:
  - "7.1.2.  Gauge32\n   The Gauge32 type is not supported by the SPPI.\n"
- title: 7.1.3.  Opaque
  contents:
  - "7.1.3.  Opaque\n   The Opaque type is provided solely for backward-compatibility,\
    \ and\n   shall not be used for newly-defined object types. The Opaque type\n\
    \   supports the capability to pass arbitrary ASN.1 syntax. A value is\n   encoded\
    \ using the ASN.1 Basic Encoding Rules [ASN1] into a string of\n   octets. This,\
    \ in turn, is encoded as an OCTET STRING, in effect\n   \"double-wrapping\" the\
    \ original ASN.1 value. Note that a conforming\n   implementation need only be\
    \ able to accept and recognize opaquely-\n   encoded data. It need not be able\
    \ to unwrap the data and then\n   interpret its contents. A requirement on \"\
    standard\" PIB modules is\n   that no object may have a SYNTAX clause value of\
    \ Opaque.\n"
- title: 7.1.4.  IpAddress
  contents:
  - "7.1.4.  IpAddress\n   The IpAddress type is provided solely for backward-compatibility,\
    \ and\n   shall not be used for newly-defined object types. Instead, It is\n \
    \  recommended to use the InetAddressType/InetAddress pair TCs as\n   defined\
    \ in RFC2851 [INETADDR].\n"
- title: 7.1.5.  Counter64
  contents:
  - "7.1.5.  Counter64\n   The Counter64 type is not supported by the SPPI.\n"
- title: 7.1.6.  Integer64
  contents:
  - "7.1.6.  Integer64\n   The Integer64 type represents integer-valued information\
    \ between\n   -2^63 and 2^63-1 inclusive (-9223372036854775808 to\n   9223372036854775807\
    \ decimal).  While Integer64 may be sub-typed to be\n   more constrained, if the\
    \ constraint results in all possible values\n   being contained in the range (-2147483648..2147483647),\
    \ then the\n   Integer32 type must be used instead of Integer64.\n"
- title: 7.1.7.  Unsigned64
  contents:
  - "7.1.7.  Unsigned64\n   The Unsigned64 type represents integer-valued information\
    \ between 0\n   and 2^64-1 inclusive (0 to 18446744073709551615 decimal).  While\n\
    \   Unsigned64 may be sub-typed to be more constrained, if the constraint\n  \
    \ results in all possible values being contained in the range\n   (0..4294967295),\
    \ then the Unsigned32 type must be used instead of\n   Unsigned64.\n"
- title: 7.1.8.  Provisioning Classes
  contents:
  - "7.1.8.  Provisioning Classes\n   The operations (on PIBs) supported by the SPPI\
    \ apply exclusively to\n   PRCs.  Each PRC is modelled as a tabular structure,\
    \ i.e., a table.\n   Each instance of a particular PRC has the same set of attributes.\n\
    \   The set of attributes which belong to every instance of a particular\n   PRC\
    \ is modelled as a row in the table. Note that a PRC must have no\n   more than\
    \ 127 attributes. The usage of subids (for PRC attributes)\n   beyond 127 (that\
    \ is 128 and above) is reserved for Mapping PIBs to\n   MIBs (see Appendix A).\
    \  PRCs that require more than 127 attributes\n   must use the AUGMENTS clause\
    \ to augment the PRC containing the\n   initial 127 attributes to add additional\
    \ attributes. Definition of\n   Provisioning Classes is formalized by using the\
    \ OBJECT-TYPE macro to\n   define both:\n   -  the PRC as a whole, called the\
    \ table definition, and\n   -  the characteristics of every instance of a particular\
    \ PRC, called\n      the row definition.\n   In the table definition, the SYNTAX\
    \ clause has the form:\n      SEQUENCE OF <EntryType>\n   where <EntryType> refers\
    \ to the SEQUENCE type of its attribute\n   definitions.  In the row definition,\
    \ the SYNTAX clause has the form:\n      <EntryType>\n   where <EntryType> is\
    \ a SEQUENCE type defined as follows:\n      <EntryType> ::= SEQUENCE { <type1>,\
    \ ... , <typeN> }\n   where there is one <type> for each attribute, and each <type>\
    \ is of\n   the form:\n      <descriptor> <syntax>\n   where <descriptor> is the\
    \ descriptor naming an attribute, and\n   <syntax> has the value of that attribute's\
    \ SYNTAX clause, except that\n   both sub- typing information and the named values\
    \ for enumerated\n   integers or the named bits for the BITS construct, are omitted\
    \ from\n   <syntax>.\n"
- title: 7.2.  Mapping of the MAX-ACCESS clause
  contents:
  - "7.2.  Mapping of the MAX-ACCESS clause\n   The MAX-ACCESS clause is not supported\
    \ by the SPPI.\n"
- title: 7.3.  Mapping of the PIB-ACCESS clause
  contents:
  - "7.3.  Mapping of the PIB-ACCESS clause\n   The PIB-ACCESS clause must be present\
    \ for a PRC's table definition,\n   and must not be present for any other OBJECT-TYPE\
    \ definition.  The\n   PIB-ACCESS clause defines what kind of access is appropriate\
    \ for the\n   PRC.\n   -  the value \"install\" is used to indicate a PRC which\
    \ a PDP can\n      install in the PEP as provisioning information.\n   -  the\
    \ value \"notify\" is used to indicate a PRC for which the PEP\n      must notify\
    \ the PDP of all its instances and attribute values of\n      that PRC.\n   -\
    \  the value \"install-notify\" is used to indicate the uncommon type\n      of\
    \ PRC which has both characteristics: \"install\" and \"notify\".\n   -  the value\
    \ \"report-only\" is used to indicate a PRC which has\n      neither the \"install\"\
    \ characteristic nor the \"notify\"\n      characteristic.  However, instances\
    \ of such a PRC may be included\n      in synchronous/asynchronous reports generated\
    \ by the PEP.  (Note:\n      PRCs having the \"install\" and/or \"notify\" characteristics\
    \ may also\n      be included in reports generated by the PEP.)\n"
- title: 7.4.  Mapping of the INSTALL-ERRORS clause
  contents:
  - "7.4.  Mapping of the INSTALL-ERRORS clause\n   The INSTALL-ERRORS clause, which\
    \ may optionally be present for a\n   PRC's table definition, and must be absent\
    \ otherwise, lists one or\n   more potential reasons for rejecting an install\
    \ or a removal of an\n   instance of the PRC.  Each reason consists of a named-number\n\
    \   enumeration, where the number represents a PRC-specific error-code to\n  \
    \ be used in a COPS protocol message, as the Error Sub-code, with the\n   Error-Code\
    \ set to priSpecificError (see [COPS-PR]).  The semantics of\n   each named-number\
    \ enumeration should be described in the PRC's\n   DESCRIPTION clause.\n   The\
    \ numbers listed in an INSTALL-ERRORS must be greater than zero and\n   less than\
    \ 65536.  If this clause is not present, an install/remove\n   can still fail,\
    \ but no PRC-specific error is available to be\n   reported.\n"
- title: 7.5.  Mapping of the PIB-INDEX clause
  contents:
  - "7.5.  Mapping of the PIB-INDEX clause\n   The PIB-INDEX clause, which must be\
    \ present for a row definition\n   (unless an AUGMENTS or an EXTENDS clause is\
    \ present instead), and\n   must be absent otherwise, defines identification information\
    \ for\n   instances of the PRC.\n   The PIB-INDEX clause includes exactly one\
    \ descriptor.  This\n   descriptor specifies an attribute (typically, but not\
    \ necessarily of\n   the same PRC) which is used to identify an instance of that\
    \ PRC.  The\n   syntax of this attribute is REQUIRED to be InstanceId (a textual\n\
    \   convention with an underlying syntax of Unsigned32), and it has no\n   semantics\
    \ other than its use in identifying the PRC instance.  The\n   OBJECT IDENTIFIER\
    \ which identifies an instance of a PRC is formed by\n   appending one sub- identifier\
    \ to the OID which identifies that PRC's\n   row definition.  The value of the\
    \ additional sub-identifier is that\n   instance's value of the attribute specified\
    \ in the INDEX clause.\n   Note that SPPI does not permit use of the IMPLIED keyword\
    \ in a PIB-\n   INDEX clause.\n"
- title: 7.6.  Mapping of the INDEX clause
  contents:
  - "7.6.  Mapping of the INDEX clause\n   The INDEX clause is optionally present\
    \ if a PIB-INDEX clause is\n   present, and must be absent otherwise.  If present,\
    \ the INDEX clause\n   can contain any number of attributes, and is used only\
    \ by the\n   algorithmic conversion of a PIB to a MIB (see Appendix A).\n   An\
    \ IMPLIED keyword can be present in an INDEX clause if so desired.\n"
- title: 7.7.  Mapping of the AUGMENTS clause
  contents:
  - "7.7.  Mapping of the AUGMENTS clause\n   The AUGMENTS clause, which must not\
    \ be present except in row\n   definitions, is an alternative to the PIB-INDEX\
    \ clause and the\n   EXTENDS clause.  Every row definition has exactly one of:\
    \ a PIB-INDEX\n   clause, an AUGMENTS clause, or an EXTENDS clause.\n   A row\
    \ definition which has a PIB-INDEX clause is called a base row\n   definition.\
    \  A row definition which has an AUGMENTS clause is called\n   a row augmentation,\
    \ where the AUGMENTS clause names the base row\n   definition which is augmented\
    \ by this row augmentation.  (Thus, a row\n   augmentation cannot itself be augmented.)\n\
    \   A PRC whose row definition is a row augmentation is called an\n   augmenting\
    \ PRC.  Instances of an augmenting PRC are identified\n   according to the PIB-INDEX\
    \ clause of the base row definition named in\n   the AUGMENTS clause.  Further,\
    \ instances of an augmenting PRC exist\n   according to the same semantics as\
    \ instances of the PRC which it\n   augments. As such, when an instance of a PRC\
    \ is installed or removed,\n   an instance of every PRC which augments it is also\
    \ installed or\n   removed.  (for more details, see [COPS-PR]).\n"
- title: 7.8.  Mapping of the EXTENDS clause
  contents:
  - "7.8.  Mapping of the EXTENDS clause\n   The EXTENDS clause, which must not be\
    \ present except in row\n   definitions, is an alternative to the PIB-INDEX clause\
    \ and the\n   AUGMENTS clause.  Every row definition has exactly one of: a PIB-\n\
    \   INDEX clause, an AUGMENTS clause, or an EXTENDS clause.\n   A row definition\
    \ which has an EXTENDS clause is called a sparse row\n   augmentation, where the\
    \ EXTENDS clause names the row definition which\n   is sparsely-augmented by this\
    \ sparse row augmentation.  The sparsely-\n   augmented row can be a base row\
    \ definition, or another sparse row\n   augmentation.\n   A PRC whose row definition\
    \ is a sparse row augmentation is called a\n   sparsely augmenting PRC.  Instances\
    \ of a sparsely augmenting PRC are\n   identified according to the PIB-INDEX clause\
    \ of the row definition\n   named in the sparsely augmenting PRC's EXTENDS clause.\n\
    \   An instance of a sparsely augmenting PRC can not exist unless a\n   corresponding\
    \ instance of the PRC which it sparsely augments exists.\n   As such, when an\
    \ instance of a PRC is removed, an instance of any PRC\n   which sparsely augments\
    \ it is also removed.  However, an instance of\n   a sparsely augmenting PRC need\
    \ not exist when the corresponding\n   instance of the PRC that it sparsely augments\
    \ exists.  Thus, an\n   instance of a sparsely augmenting PRC can be installed\
    \ at the same\n   time as or subsequent to the installation of, and can be removed\n\
    \   prior to the removal of, the corresponding instance of the PRC that\n   it\
    \ sparsely augments.  So, instances of a sparsely augmenting PRC\n   must be installed\
    \ explicitly, but are removed either implicitly (via\n   removal of the augmented\
    \ PRI) or explicitly. When a sparsely\n   augmented PRC is installed, both instances,\
    \ the instance of the\n   sparsely augmented PRC and the instance of the sparsely\
    \ augmenting\n   PRC must be sent in one COPS message.\n"
- title: 7.8.1.  Relation between PIB-INDEX, AUGMENTS and EXTENDS clauses
  contents:
  - "7.8.1.  Relation between PIB-INDEX, AUGMENTS and EXTENDS clauses\n   When defining\
    \ instance identification information for a PRC:\n   -  If there is a one-to-one\
    \ correspondence between instances of this\n      PRC and instances of an existing\
    \ PRC, then the AUGMENTS clause\n      should be used.\n   -  Otherwise, if there\
    \ is a sparse relationship between instances of\n      this PRC and instances\
    \ of an existing PRC (that is, there is a one\n      to zero or one correspondence\
    \ between instances of a sparsely\n      augmented PRC and the instances of the\
    \ PRC that sparsely augments\n      it.), then an EXTENDS clause should be used.\n\
    \   -  Otherwise, a PIB-INDEX clause should be used which names its own\n    \
    \  InstanceId attribute.\n"
- title: 7.9.  Mapping of the UNIQUENESS clause
  contents:
  - "7.9.  Mapping of the UNIQUENESS clause\n   The UNIQUENESS clause, which is optionally\
    \ present for any row\n   definition, lists a set of zero or more of the PRC's\
    \ attributes, for\n   which no two instances of the PRC can have the same set\
    \ of values.\n   The specified set of attributes provide a necessary and sufficient\n\
    \   set of values by which to identify an instance of this PRC.  The\n   attribute\
    \ contained in the PIB-INDEX clause may not be present in the\n   UNIQUENESS clause.\
    \  By definition, an attribute may not appear more\n   than once in a UNIQUENESS\
    \ clause.  A UNIQUENESS clause containing\n   zero attributes indicates that it's\
    \ possible for two instances of the\n   PRC to have identical values for all attributes\
    \ except, of course,\n   for the one named in the PIB-INDEX clause.\n   If a PRC\
    \ and its sparsely augmenting PRC both have UNIQUENESS\n   clauses, then the UNIQUENESS\
    \ constraint for instances of each PRC\n   MUST be applied according to the UNIQUENESS\
    \ clause in the\n   corresponding PRC definition.  Note that a sparsely augmenting\
    \ PRC\n   thus can override the UNIQUENESS clause of the PRC it sparsely\n   augments.\n\
    \   Even though the UNIQUENESS clause is optional, its inclusion is\n   recommended\
    \ wherever it provides useful information.\n"
- title: 7.10.  Mapping of the PIB-REFERENCES clause
  contents:
  - "7.10.  Mapping of the PIB-REFERENCES clause\n   The PIB-REFERENCES clause, which\
    \ must be present for any attribute\n   which has the SYNTAX of ReferenceId, and\
    \ must be absent otherwise,\n   names the PRC, an instance of which is referenced\
    \ by the ReferenceId\n   attribute.  For example usages of the PIB-REFERENCES\
    \ clause, see\n   Appendix B.\n"
- title: 7.11.  Mapping of the PIB-TAG clause
  contents:
  - "7.11.  Mapping of the PIB-TAG clause\n   The PIB-TAG clause, which must be present\
    \ for an attribute which has\n   the SYNTAX TagReferenceId, and must be absent\
    \ otherwise, is used to\n   indicate that this attribute references a \"tag list\"\
    \ of instances of\n   another PRC.  Such a tag list (similar in concept to the\
    \ usage of the\n   same term in [APPL]) is formed by all instances of the other\
    \ PRC\n   which have the same (tag) value of a particular attribute of that\n\
    \   other PRC.  The particular attribute of the other PRC, which must\n   have\
    \ the SYNTAX TagId, is named in the PIB-TAG clause.  For an\n   example usage\
    \ of the PIB-TAG clause, see Appendix B.\n"
- title: 8.  Mapping of the OBJECT-IDENTITY macro
  contents:
  - "8.  Mapping of the OBJECT-IDENTITY macro\n   The OBJECT-IDENTITY macro is used\
    \ in PIB modules to define\n   information about an OBJECT IDENTIFIER assignment.\n"
- title: 9.  Mapping of the OBJECT-GROUP macro
  contents:
  - "9.  Mapping of the OBJECT-GROUP macro\n   For conformance purposes, it is useful\
    \ to define a conformance group\n   as a collection of related PRCs and their\
    \ attributes.  The OBJECT-\n   GROUP macro (directly) defines the collection of\
    \ attributes which\n   belong to a conformance group.  Since each attribute included\
    \ in the\n   collection belongs to a PRC, the collection of related PRCs which\n\
    \   belong to a conformance group is also specified (indirectly) as the\n   set\
    \ of PRCs to which the included attributes belong.\n"
- title: 9.1.  Mapping of the OBJECTS clause
  contents:
  - "9.1.  Mapping of the OBJECTS clause\n   The OBJECTS clause, which must be present,\
    \ is used to specify each\n   attribute contained in the conformance group.  Each\
    \ of the specified\n   attributes must be defined in the same PIB module as the\
    \ OBJECT-GROUP\n   macro appears.\n   It is required that every attribute defined\
    \ in a PIB module be\n   contained in at least one conformance group.  This avoids\
    \ the common\n   error of adding a new attribute to a module and forgetting to\
    \ add the\n   new attribute to a group.\n"
- title: 10.  Mapping of the MODULE-COMPLIANCE macro
  contents:
  - "10.  Mapping of the MODULE-COMPLIANCE macro\n   The MODULE-COMPLIANCE macro is\
    \ used to convey a minimum set of\n   requirements with respect to implementation\
    \ of one or more PIB\n   modules.\n   A requirement on all \"standard\" PIB modules\
    \ is that a corresponding\n   MODULE-COMPLIANCE specification is also defined,\
    \ either in the same\n   module or in a companion module.\n"
- title: 10.1.  Mapping of the MODULE clause
  contents:
  - "10.1.  Mapping of the MODULE clause\n   The MODULE clause, which must be present,\
    \ is repeatedly used to name\n   each PIB module for which compliance requirements\
    \ are being\n   specified.  Each PIB module is named by its module name, and\n\
    \   optionally, by its associated OBJECT IDENTIFIER as well.  The module\n   name\
    \ can be omitted when the MODULE-COMPLIANCE invocation occurs\n   inside a PIB\
    \ module, to refer to the encompassing PIB module.\n"
- title: 10.1.1.  Mapping of the MANDATORY-GROUPS clause
  contents:
  - "10.1.1.  Mapping of the MANDATORY-GROUPS clause\n   The MANDATORY-GROUPS clause,\
    \ which need not be present, names the one\n   or more conformance groups within\
    \ the correspondent PIB module which\n   are unconditionally mandatory for implementation.\
    \  If an agent claims\n   compliance to the PIB module, then it must implement\
    \ each and every\n   attribute (and therefore the PRCs to which they belong) within\
    \ each\n   conformance group listed.\n"
- title: 10.1.2.  Mapping of the GROUP clause
  contents:
  - "10.1.2.  Mapping of the GROUP clause\n   The GROUP clause, which need not be\
    \ present, is repeatedly used to\n   name each conformance group which is conditionally\
    \ mandatory for\n   compliance to the PIB module.  The GROUP clause can also be\
    \ used to\n   name unconditionally optional groups.  A group named in a GROUP\n\
    \   clause must be absent from the correspondent MANDATORY-GROUPS clause.\n  \
    \ Conditionally mandatory groups include those which are mandatory only\n   if\
    \ a particular protocol is implemented, or only if another group is\n   implemented.\
    \  A GROUP clause's DESCRIPTION specifies the conditions\n   under which the group\
    \ is conditionally mandatory.\n   A group which is named in neither a MANDATORY-GROUPS\
    \ clause nor a\n   GROUP clause, is unconditionally optional for compliance to\
    \ the PIB\n   module.\n"
- title: 10.1.3.  Mapping of the OBJECT clause
  contents:
  - "10.1.3.  Mapping of the OBJECT clause\n   The OBJECT clause, which need not be\
    \ present, is repeatedly used to\n   specify each attribute for which compliance\
    \ has a refined requirement\n   with respect to the PIB module definition.  The\
    \ attribute must be\n   present in one of the conformance groups named in the\
    \ correspondent\n   MANDATORY-GROUPS clause or GROUP clauses.\n   By definition,\
    \ each attribute specified in an OBJECT clause follows a\n   MODULE clause which\
    \ names the PIB module in which that attribute is\n   defined.  Therefore, the\
    \ use of an IMPORTS statement, to specify from\n   where such attributes are imported,\
    \ is redundant and is not required\n   in a PIB module.\n"
- title: 10.1.3.1.  Mapping of the SYNTAX clause
  contents:
  - "10.1.3.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which need not\
    \ be present, is used to provide a\n   refined SYNTAX for the attribute named\
    \ in the correspondent OBJECT\n   clause.  The refined syntax is the minimum level\
    \ of support needed\n   for this attribute in order to be compliant.\n"
- title: 10.1.3.2.  Mapping of the WRITE-SYNTAX clause
  contents:
  - "10.1.3.2.  Mapping of the WRITE-SYNTAX clause\n   The WRITE-SYNTAX clause is\
    \ not supported by the SPPI.\n"
- title: 10.1.3.3.  Mapping of the PIB-MIN-ACCESS clause
  contents:
  - "10.1.3.3.  Mapping of the PIB-MIN-ACCESS clause\n   The PIB-MIN-ACCESS clause,\
    \ which need not be present, is used to\n   define the minimal level of access\
    \ for the attribute named in the\n   correspondent OBJECT clause.  If this clause\
    \ is absent, the minimal\n   level of access is the same as the maximal level\
    \ specified in the\n   PIB-ACCESS clause of the correspondent invocation of the\
    \ OBJECT-TYPE\n   macro.  If present, this clause must specify a subset of the\
    \ access\n   specified in the correspondent PIB-ACCESS clause, where: \"install\"\
    \ is\n   a subset of \"install-notify\", \"notify\" is a subset of \"install-\n\
    \   notify\", and \"not- accessible\" is a subset of all other values.\n   An\
    \ implementation is compliant if the level of access it provides is\n   the same\
    \ or a superset of the minimal level in the MODULE-COMPLIANCE\n   macro and the\
    \ same or a subset of the maximal level in the PIB-ACCESS\n   clause.\n"
- title: 11.  Textual Conventions
  contents:
  - "11.  Textual Conventions\n   When designing a PIB module, it is often useful\
    \ to define new data\n   types similar to those defined in the SPPI.  In comparison\
    \ to a type\n   defined in the SPPI, each of these new types has a different name,\
    \ a\n   similar syntax, and specific semantics.  These newly defined types\n \
    \  are termed textual conventions, and are used for the convenience of\n   humans\
    \ reading the PIB module.\n   Attributes defined using a textual convention are\
    \ always encoded by\n   means of the rules that define their underlying type.\n"
- title: 11.1.  Mapping of the TEXTUAL-CONVENTION macro
  contents:
  - "11.1.  Mapping of the TEXTUAL-CONVENTION macro\n   The TEXTUAL-CONVENTION macro\
    \ is used to convey the syntax and\n   semantics associated with a textual convention.\
    \  It should be noted\n   that the expansion of the TEXTUAL-CONVENTION macro is\
    \ something which\n   conceptually happens during implementation and not during\
    \ run-time.\n   The name of a textual convention must consist of one or more letters\n\
    \   or digits, with the initial character being an upper case letter.\n   The\
    \ name must not conflict with any of the reserved words listed in\n   section\
    \ 5.2, should not consist of all upper case letters, and shall\n   not exceed\
    \ 64 characters in length.  (However, names longer than 32\n   characters are\
    \ not recommended.)  The hyphen is not allowed in the\n   name of a textual convention\
    \ (except for use in information modules\n   converted from SMIv1 which allowed\
    \ hyphens in ASN.1 type\n   assignments).  Further, all names used for the textual\
    \ conventions\n   defined in all \"standard\" PIB modules shall be unique.\n"
- title: 11.1.1.  Mapping of the DISPLAY-HINT clause
  contents:
  - "11.1.1.  Mapping of the DISPLAY-HINT clause\n   The DISPLAY-HINT clause, which\
    \ need not be present, gives a hint as\n   to how the value of an instance of\
    \ an object with the syntax defined\n   using this textual convention might be\
    \ displayed. The DISPLAY-HINT\n   clause must not be present if the Textual Convention\
    \ is defined with\n   a syntax of:  OBJECT IDENTIFIER, or any enumerated syntax\
    \ (BITS or\n   INTEGER).  The determination of whether it makes sense for other\n\
    \   syntax types is dependent on the specific definition of the Textual\n   Convention.\n\
    \   The rules for the format specification of the hint are the same as\n   specified\
    \ in Section 3.1 of [TC].\n"
- title: 11.1.2.  Mapping of the SYNTAX clause
  contents:
  - "11.1.2.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which must be present,\
    \ defines abstract data\n   structure corresponding to the textual convention.\
    \  The data\n   structure must be one of the following: a base type (see the SYNTAX\n\
    \   clause of an OBJECT-TYPE macro), or the BITS construct.  Note that\n   this\
    \ means that the SYNTAX clause of a Textual Convention can not\n   refer to a\
    \ previously defined Textual Convention.\n"
- title: 11.1.2.1.  Sub-typing of Textual Conventions
  contents:
  - "11.1.2.1.  Sub-typing of Textual Conventions\n   The SYNTAX clause of a TEXTUAL\
    \ CONVENTION macro may be sub-typed in\n   the same way as the SYNTAX clause of\
    \ an OBJECT-TYPE macro.\n"
- title: 12.  Extending a PIB Module
  contents:
  - "12.  Extending a PIB Module\n   PIBs may be revised as implementation experience\
    \ is gained. However,\n   changes with potential to cause disruption to interoperability\n\
    \   between the previous PIB and the revised PIB are not allowed.\n"
- title: 12.1.  PIB Modules
  contents:
  - "12.1.  PIB Modules\n   For any change, the invocation of the MODULE-IDENTITY\
    \ macro must be\n   updated to include information about the revision: specifically,\n\
    \   updating the LAST-UPDATED clause, adding a pair of REVISION and\n   DESCRIPTION\
    \ clauses, and making any necessary changes to existing\n   clauses, including\
    \ the ORGANIZATION and CONTACT-INFO clauses.\n   Note that any definition contained\
    \ in an existing PIB is available to\n   be IMPORT-ed by any other PIB, and is\
    \ referenced in an IMPORTS clause\n   via the PIB module name.  Thus, a PIB module\
    \ name should not be\n   changed.  Definitions should not be moved from one PIB\
    \ to another.\n   Also note that obsolete definitions must not be removed from\
    \ PIB\n   modules since their descriptors may still be referenced by other PIB\n\
    \   modules, and the OBJECT IDENTIFIERs used to name them must never be\n   re-assigned.\
    \  The EXTENDS/AUGMENTS clause should be used to extend\n   previous definitions\
    \ depending on the information to be represented.\n   Changes to an existing PIB\
    \ can be made in several ways:\n   -  Additional PRCs can be added to a PIB or\
    \ an existing one\n      deprecated.\n   -  Attributes can be added to, or deprecated\
    \ from, an existing PRC.\n      Note that an ASN.1 value of the correct type or\
    \ an ASN.1 NULL\n      value must be sent even for deprecated attributes to maintain\n\
    \      interoperability. New attributes must be added in sequence after\n    \
    \  the existing ones.\n   -  An existing PRC can be extended or augmented with\
    \ a new PRC\n      defined in another (perhaps enterprise specific) PIB.\n   Additional\
    \ named-number enumerations may be added to a SUBJECT-\n   CATEGORIES clause.\n"
- title: 12.2.  Object Assignments
  contents:
  - "12.2.  Object Assignments\n   If any non-editorial change is made to any clause\
    \ of a object\n   assignment, then the OBJECT IDENTIFIER value associated with\
    \ that\n   object assignment must also be changed, along with its associated\n\
    \   descriptor.  Note that the max subid for PRC attributes is 127 (See\n   Section\
    \ 7.1.8)\n"
- title: 12.3.  Object Definitions
  contents:
  - "12.3.  Object Definitions\n   An object definition may be revised in any of the\
    \ following ways:\n   -  A SYNTAX clause containing an enumerated INTEGER may\
    \ have new\n      enumerations added or existing labels changed.  Similarly, named\n\
    \      bits may be added or existing labels changed for the BITS\n      construct.\n\
    \   -  The value of a SYNTAX clause may be replaced by a textual\n      convention,\
    \ providing the textual convention is defined to use the\n      same primitive\
    \ ASN.1 type, has the same set of values, and has\n      identical semantics.\n\
    \   -  A UNITS clause may be added.\n   -  A STATUS clause value of \"current\"\
    \ may be revised as \"deprecated\"\n      or \"obsolete\".  Similarly, a STATUS\
    \ clause value of \"deprecated\"\n      may be revised as \"obsolete\".  When\
    \ making such a change, the\n      DESCRIPTION clause should be updated to explain\
    \ the rationale.\n   -  Clarifications and additional information may be included\
    \ in the\n      DESCRIPTION clause.\n   -  An INSTALL-ERRORS clause may be added\
    \ or an existing INSTALL-\n      ERRORS clause have additional errors defined.\n\
    \   -  A REFERENCE clause may be added or updated.\n   -  A DEFVAL clause may\
    \ be added or updated.\n   -  A PRC may be augmented by adding new objects at\
    \ the end of the\n      row, and making the corresponding update to the SEQUENCE\n\
    \      definition.\n   -  Entirely new objects may be defined, named with previously\n\
    \      unassigned OBJECT IDENTIFIER values.\n   Otherwise, if the semantics of\
    \ any previously defined object are\n   changed (i.e., if a non-editorial change\
    \ is made to any clause other\n   than those specifically allowed above), then\
    \ the OBJECT IDENTIFIER\n   value associated with that object must also be changed.\
    \  Note that\n   changing the descriptor associated with an existing object is\n\
    \   considered a semantic change, as these strings may be used in an\n   IMPORTS\
    \ statement.\n"
- title: 'Appendix A: Mapping a PIB to a MIB'
  contents:
  - "Appendix A: Mapping a PIB to a MIB\n   Since the SPPI is modelled on the SMI,\
    \ a PIB can be potentially\n   algorithmically mapped into a MIB.  This mapping\
    \ is achieved by means\n   of the following rules:\n   -  Modify the module's\
    \ module name by appending \"-MIB\" to the name.\n   -  Change the OID assigned\
    \ to the MODULE-IDENTITY to be different\n      value.\n   -  Replace the keyword\
    \ PIB-DEFINITIONS with the keyword DEFINITIONS.\n   -  Modify the module names\
    \ of all external references to PIB modules\n      by appending \"-MIB\" to each\
    \ such module name.\n   -  For each PRC definition, if an INDEX clause is absent,\
    \ change the\n      \"PIB-INDEX\" keyword to \"INDEX\"; otherwise, delete the\
    \ PIB-INDEX\n      clause.\n   -  Delete all of the following clauses: PIB-ACCESS,\
    \ PIB-REFERENCES,\n      PIB-TAG, UNIQUENESS, INSTALL-ERRORS, and SUBJECT-CATEGORIES.\n\
    \   -  Change all PIB-MIN-ACCESS clauses to MIN-ACCESS clauses, modifying\n  \
    \    \"install\" and \"install-notify\" to \"read-create\", and \"notify\" to\n\
    \      \"read-only\".\n   -  Add a MAX-ACCESS clause for each OBJECT-TYPE.  For\
    \ each table\n      definition and row definition, the MAX-ACCESS is \"not-accessible\"\
    .\n      For each attribute that is in the INDEX clause, the MAX-ACCESS is\n \
    \     \"not-accessible\".  For the remaining attributes, the MAX-ACCESS is\n \
    \     \"read-create\".\n   -  Add a columnar attribute of type RowStatus with\
    \ a descriptor and\n      appropriate DESCRIPTION.  The descriptor can be formed\
    \ by\n      appending the nine characters \"RowStatus\" to the end of the PRC's\n\
    \      descriptor (truncated if necessary to avoid the resulting\n      descriptor\
    \ being too long).  A Subid beyond 127 (i.e., 128 and\n      above) can be used\
    \ as the OID for this columnar attribute.\n   -  Modify any SYNTAX clause which\
    \ has a base data type which is not\n      allowed in the SMI, either to be a\
    \ valid SMI data type or to omit\n      the OBJECT-TYPE or TEXTUAL-CONVENTION\
    \ definition and all\n      references to it.  Since it is not clear (at this\
    \ time) which is\n      the best SMI data type to use, the conversion SHOULD provide\
    \ a\n      configurable option allowing a choice from at least the following:\n\
    \      -  convert to an OCTET STRING of the relevant size.  Specifically,\n  \
    \       this option would map both Integer64 and Unsigned64 to OCTET\n       \
    \  STRING (SIZE(8)), or\n      -  omit them from the conversion, or\n      - \
    \ map Integer64 and Unsigned64 to Counter64 (even though this has\n         problems\
    \ representing negative numbers, and unwanted counter\n         semantics.)\n"
- title: 'Appendix B: Example usage of PIB-REFERENCES and PIB-TAG clauses'
  contents:
  - "Appendix B: Example usage of PIB-REFERENCES and PIB-TAG clauses\n   The following\
    \ example demonstrates the use of the PIB-REFERENCES and\n   PIB-TAG clauses.\n\
    \   In this example, the PIB-REFERENCES clause is used by the\n   qosIfDscpMapQueue\
    \ attribute to indicate the PRC of which it\n   references an instance, and similarly,\
    \ by the qosIfDscpMapThresh\n   attribute.\n   The qosIfDscpMapTable PRC has an\
    \ instance for each DSCP of a\n   particular \"map\", but there is no PRC defined\
    \ for a map itself;\n   rather, a map consists of all instances of qosIfDscpMapTable\
    \ which\n   have the same value of qosIfDscpMapMapId.  That is, a tag list is\n\
    \   formed by all instances of qosIfDscpMapTable which have the same\n   value\
    \ of qosIfDscpMapMapId.  This tag list is referenced by the\n   attribute qosIfDscpAssignDscpMap,\
    \ and its use of the PIB-TAG clause\n   indicates this.\n"
- title: qosIfDscpAssignTable OBJECT-TYPE
  contents:
  - "qosIfDscpAssignTable OBJECT-TYPE\n    SYNTAX         SEQUENCE OF QosIfDscpAssignEntry\n\
    \    PIB-ACCESS     install\n    STATUS         current\n    DESCRIPTION \" \"\
    \n    ::= { qosIfParameters 9 }\n"
- title: qosIfDscpAssignEntry OBJECT-TYPE
  contents:
  - "qosIfDscpAssignEntry OBJECT-TYPE\n    SYNTAX         QosIfDscpAssignEntry\n \
    \   STATUS         current\n    DESCRIPTION\n        \"An instance of the qosIfDscpAssign\
    \ class.\"\n    PIB-INDEX      { qosIfDscpAssignPrid }\n    UNIQUENESS     { qosIfDscpAssignName,\
    \ qosIfDscpAssignRoles }\n    ::= { qosIfDscpAssignTable 1 }\n"
- title: QosIfDscpAssignEntry ::= SEQUENCE {
  contents:
  - "QosIfDscpAssignEntry ::= SEQUENCE {\n        qosIfDscpAssignPrid       InstanceId,\n\
    \        qosIfDscpAssignName       SnmpAdminString,\n        qosIfDscpAssignRoles\
    \      RoleCombination,\n        qosIfDscpAssignDscpMap    TagReferenceId\n"
- title: '}'
  contents:
  - '}

    '
- title: qosIfDscpAssignDscpMap OBJECT-TYPE
  contents:
  - "qosIfDscpAssignDscpMap OBJECT-TYPE\n    SYNTAX         TagReferenceId\n    PIB-TAG\
    \        { qosIfDscpMapMapId }  -- attribute defined below\n    STATUS       \
    \  current\n    DESCRIPTION\n        \"The DSCP map which is applied to interfaces\
    \ of type\n        qosIfDscpAssignName which have a role combination of\n    \
    \    qosIfDscpAssignRoles.\"\n    ::= { qosIfDscpAssignEntry 3 }\n"
- title: --
  contents:
  - '--

    '
- title: -- DSCP to Queue and Threshold Mapping Table
  contents:
  - '-- DSCP to Queue and Threshold Mapping Table

    '
- title: --
  contents:
  - '--

    '
- title: qosIfDscpMapTable OBJECT-TYPE
  contents:
  - "qosIfDscpMapTable OBJECT-TYPE\n    SYNTAX         SEQUENCE OF QosIfDscpMapEntry\n\
    \    PIB-ACCESS     install\n    STATUS         current\n    DESCRIPTION\n   \
    \     \"Assigns DSCP values to queues and thresholds for an arbitrary\n      \
    \  DSCP map.  This map can then be assigned to various interface\n        and\
    \ role combination pairs.\"\n    ::= { qosIfParameters 10 }\n"
- title: qosIfDscpMapEntry OBJECT-TYPE
  contents:
  - "qosIfDscpMapEntry OBJECT-TYPE\n    SYNTAX         QosIfDscpMapEntry\n    STATUS\
    \         current\n    DESCRIPTION\n        \"An instance of the qosIfDscpMap\
    \ class.\"\n    PIB-INDEX      { qosIfDscpMapPrid }\n    UNIQUENESS     { qosIfDscpMapMapId,\
    \ qosIfDscpMapDscp }\n    ::= { qosIfDscpMapTable 1 }\n"
- title: QosIfDscpMapEntry ::= SEQUENCE {
  contents:
  - "QosIfDscpMapEntry ::= SEQUENCE {\n        qosIfDscpMapPrid       InstanceId,\n\
    \        qosIfDscpMapMapId      TagId,\n        qosIfDscpMapDscp       Dscp,\n\
    \        qosIfDscpMapQueue      ReferenceId,\n        qosIfDscpMapThresh     ReferenceId\n"
- title: '}'
  contents:
  - '}

    '
- title: qosIfDscpMapMapId OBJECT-TYPE
  contents:
  - "qosIfDscpMapMapId OBJECT-TYPE\n    SYNTAX         TagId\n    STATUS         current\n\
    \    DESCRIPTION\n        \"An integer that identifies the DSCP map to which this\
    \ PRI\n        belongs.\"\n    ::= { qosIfDscpMapEntry 2 }\n"
- title: qosIfDscpMapQueue OBJECT-TYPE
  contents:
  - "qosIfDscpMapQueue OBJECT-TYPE\n    SYNTAX         ReferenceId\n    PIB-REFERENCES\
    \ { qosIfQueueEntry }\n    STATUS         current\n    DESCRIPTION\n        \"\
    This attribute maps the DSCP specified by qosIfDscpMapDscp to\n        the queue\
    \ identified by qosIfQueuePrid in qosIfQueueTable.\n        For a given DSCP map,\
    \ all the queues must belong to a single\n        queue set.\"\n    ::= { qosIfDscpMapEntry\
    \ 4 }\n"
- title: qosIfDscpMapThresh OBJECT-TYPE
  contents:
  - "qosIfDscpMapThresh OBJECT-TYPE\n    SYNTAX         ReferenceId\n    PIB-REFERENCES\
    \ { qosIfThresholdEntry }\n    STATUS         current\n    DESCRIPTION\n     \
    \   \"This attribute maps the DSCP specified by qosIfDscpMapDscp to\n        the\
    \ threshold identified by qosIfThresholdId in\n        qosIfThresholdTable.  The\
    \ threshold set to which this\n        threshold belongs must be assigned to the\
    \ queue specified by\n        qosIfDscpMapQueue.\"\n    ::= { qosIfDscpMapEntry\
    \ 5 }\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This document defines a language with which to define\
    \ provisioning\n   information.  The language itself has no security impact on\
    \ the\n   Internet.\n"
- title: IANA Considerations
  contents:
  - "IANA Considerations\n   The root of the subtree administered by the Internet\
    \ Assigned Numbers\n   Authority (IANA) for the Internet is:\n      internet \
    \      OBJECT IDENTIFIER ::= { iso 3 6 1 }\n   That is, the Internet subtree of\
    \ OBJECT IDENTIFIERs starts with the\n   prefix:\n      1.3.6.1.\n   Several branches\
    \ underneath this subtree are used for network\n   management:\n      mgmt   \
    \        OBJECT IDENTIFIER ::= { internet 2 }\n      experimental   OBJECT IDENTIFIER\
    \ ::= { internet 3 }\n      private        OBJECT IDENTIFIER ::= { internet 4\
    \ }\n      enterprises    OBJECT IDENTIFIER ::= { private 1 }\n   The mgmt(2)\
    \ subtree is used to identify \"standard\" objects.\n   This document defines\n\
    \      pib           OBJECT IDENTIFIER ::= { mgmt 2 }\n   as the root for PIBs\
    \ defined to be carried over [COPS-PR].  This\n   Object Identifier is a high\
    \ level assignment that needs to be\n   registered with [IANA]. Root Object Identifiers\
    \ for future \"standards\n   track\" PIBs will also need to be registered and\
    \ MUST use Object\n   Identifiers below this oid. A standards track PIB can only\
    \ be\n   assigned an OID by IANA if the PIB is approved by the IESG as a\n   \"\
    standards track\" document.  Experimental and enterprise PIBs MUST be\n   defined\
    \ under the \"experimental\" and \"enterprises\" Object Identifiers\n   respectively.\n\
    \   The PIB module \"copsPrSppiTc\" is defined in this document as a\n   standard\
    \ module and hence, needs a subid assignment under the \"pib\"\n   oid from IANA.\n\
    \   SPPI SUBJECT-CATEGORIES are mapped to COPS Client Types.  IANA\n   Considerations\
    \ for SUBJECT-CATEGORIES follow the same requirements as\n   specified in [COPS]\
    \ IANA Considerations for COPS Client Types. Thus,\n   a new PIB can define a\
    \ new COPS Client Type in the \"standards\",\n   \"experimental\" or \"enterprise\"\
    \ space, and when approved that would\n   mean that a new COPS Client Type gets\
    \ assigned. IANA must update the\n   registry for COPS Client Types (where applicable\
    \ as described in\n   [COPS] IANA Considerations) as a result.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706 USA\n   Phone: +1 408 526 5260\n \
    \  Email: kzm@cisco.com\n   Michael Fine\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706 USA\n   Phone: +1 408 527 8218\n \
    \  EMail: mfine@cisco.com\n   John Seligson\n   Nortel Networks, Inc.\n   4401\
    \ Great America Parkway\n   Santa Clara, CA 95054 USA\n   Phone: +1 408 495 2992\n\
    \   EMail: jseligso@nortelnetworks.com\n   Kwok Ho Chan\n   Nortel Networks, Inc.\n\
    \   600 Technology Park Drive\n   Billerica, MA 01821 USA\n   Phone: +1 978 288\
    \ 8175\n   EMail: khchan@nortelnetworks.com\n   Scott Hahn\n   Intel\n   2111\
    \ NE 25th Avenue\n   Hillsboro, OR 97124 USA\n   Phone: +1 503 264 8231\n   EMail:\
    \ scott.hahn@intel.com\n   Ravi Sahita\n   Intel\n   2111 NE 25th Avenue\n   Hillsboro,\
    \ OR 97124 USA\n   Phone: +1 503 712 1554\n   EMail: ravi.sahita@intel.com\n \
    \  Andrew Smith\n   Allegro Networks\n   6399 San Ignacio Ave.\n   San Jose, CA\
    \ 95119 USA\n   Fax:   +1 415 345 1827\n   EMail: andrew@allegronetworks.com\n\
    \   Francis Reichmeyer\n   PFN Inc.\n   University Park at MIT\n   26 Landsdowne\
    \ Street\n   Cambridge, MA 02139 USA\n   Phone: +1 617 494 9980\n   EMail: franr@pfn.com\n"
- title: References
  contents:
  - "References\n   [COPS]                Boyle, J., Cohen, R., Durham, D., Herzog,\
    \ S.,\n                         Rajan, R. and A. Sastry, \"The COPS (Common Open\n\
    \                         Policy Service) Protocol\", RFC 2748, January\n    \
    \                     2000.\n   [COPS-RSVP]           Boyle, J., Cohen, R., Durham,\
    \ D., Herzog, S.,\n                         Rajan, R. and A. Sastry, \" COPS usage\
    \ for\n                         RSVP\", RFC 2749, January 2000.\n   [COPS-PR]\
    \             Reichmeyer, F., Herzog, S., Chan, K., Durham,\n                \
    \         D., Yavatkar, R., Gai, S., McCloghrie, K. and\n                    \
    \     A. Smith, \"COPS Usage for Policy Provisioning\",\n                    \
    \     RFC 3084, March 2001.\n   [SMI]                 McCloghrie, K., Perkins,\
    \ D., Schoenwaelder, J.,\n                         Case, J., Rose, M. and S. Waldbusser,\n\
    \                         \"Structure of Management Information Version 2\n  \
    \                       (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [TC]    \
    \              McCloghrie, K., Perkins, D., Schoenwaelder, J.,\n             \
    \            Case, J., Rose, M. and S. Waldbusser, \"Textual\n               \
    \          Conventions for SMIv2\", STD 58, RFC 2579, April\n                \
    \         1999.\n   [CONF]                McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J.,\n                         Case, J., Rose, M. and S. Waldbusser,\n      \
    \                   \"Conformance Statements for SMIv2\", STD 58, RFC\n      \
    \                   2580, April 1999.\n   [APPL]                Levi, D., Meyer,\
    \ P. and B. Stewart, \"SNMP\n                         Applications\", RFC 2573,\
    \ April 1999.\n   [ASN1]                Information processing systems -- Open\
    \ Systems\n                         Interconnection -- Specification of Abstract\n\
    \                         Syntax Notation One (ASN.1), International\n       \
    \                  Organization for Standardization.\n                       \
    \  International Standard 8824, December 1987.\n   [INETADDR]            Daniele,\
    \ M., Haberman, B., Routhier, S. and J.\n                         Schoenwaelder\
    \ \"Textual Conventions for Internet\n                         Network Addresses\"\
    , RFC 2851, June 2000.\n   [IANA]   http://www.isi.edu/in-notes/iana/assignments/smi-numbers\n\
    \   [IANA-CONSIDERATIONS] Alvestrand, H. and T. Narten, \"Guidelines for\n   \
    \                      Writing an IANA Considerations Section in\n           \
    \              RFCs\", BCP 26, RFC 2434, October 1998.\n   [RFC2119]         \
    \    Bradner, S., \"Key words for use in RFCs to\n                         Indicate\
    \ Requirement Levels\", BCP 14, RFC 2119,\n                         March 1997.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
