- title: __initial_text__
  contents:
  - '               Photuris: Session-Key Management Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document defines an Experimental Protocol for the\
    \ Internet\n   community.  It does not specify an Internet standard of any kind.\n\
    \   Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  Copyright (C)\
    \ Philip Karn\n   and William Allen Simpson (1994-1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Photuris is a session-key management protocol intended for use with\n\
    \   the IP Security Protocols (AH and ESP).  This document defines the\n   basic\
    \ protocol mechanisms.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.     Introduction ..........................................\
    \    1\n        1.1       Terminology .....................................  \
    \  1\n        1.2       Protocol Overview ...............................    3\n\
    \        1.3       Security Parameters .............................    5\n  \
    \      1.4       LifeTimes .......................................    6\n    \
    \       1.4.1  Exchange LifeTimes ..............................    6\n      \
    \     1.4.2  SPI LifeTimes ...................................    7\n        1.5\
    \       Random Number Generation ........................    8\n     2.     Protocol\
    \ Details ......................................    9\n        2.1       UDP .............................................\
    \    9\n        2.2       Header Format ...................................  \
    \ 10\n        2.3       Variable Precision Integers .....................   11\n\
    \        2.4       Exchange-Schemes ................................   13\n  \
    \      2.5       Attributes ......................................   13\n    \
    \ 3.     Cookie Exchange .......................................   14\n      \
    \     3.0.1  Send Cookie_Request .............................   14\n        \
    \   3.0.2  Receive Cookie_Request ..........................   15\n          \
    \ 3.0.3  Send Cookie_Response ............................   15\n           3.0.4\
    \  Receive Cookie_Response .........................   16\n        3.1       Cookie_Request\
    \ ..................................   17\n        3.2       Cookie_Response .................................\
    \   18\n        3.3       Cookie Generation ...............................  \
    \ 19\n           3.3.1  Initiator Cookie ................................   19\n\
    \           3.3.2  Responder Cookie ................................   20\n  \
    \   4.     Value Exchange ........................................   21\n    \
    \       4.0.1  Send Value_Request ..............................   21\n      \
    \     4.0.2  Receive Value_Request ...........................   22\n        \
    \   4.0.3  Send Value_Response .............................   22\n          \
    \ 4.0.4  Receive Value_Response ..........................   23\n        4.1 \
    \      Value_Request ...................................   24\n        4.2   \
    \    Value_Response ..................................   25\n        4.3     \
    \  Offered Attribute List ..........................   26\n     5.     Identification\
    \ Exchange ...............................   28\n           5.0.1  Send Identity_Request\
    \ ...........................   29\n           5.0.2  Receive Identity_Request\
    \ ........................   29\n           5.0.3  Send Identity_Response ..........................\
    \   30\n           5.0.4  Receive Identity_Response .......................  \
    \ 30\n        5.1       Identity_Messages ...............................   31\n\
    \        5.2       Attribute Choices List ..........................   33\n  \
    \      5.3       Shared-Secret ...................................   34\n    \
    \    5.4       Identity Verification ...........................   34\n      \
    \  5.5       Privacy-Key Computation .........................   36\n        5.6\
    \       Session-Key Computation .........................   37\n     6.     SPI\
    \ Messages ..........................................   38\n           6.0.1 \
    \ Send SPI_Needed .................................   38\n           6.0.2  Receive\
    \ SPI_Needed ..............................   39\n           6.0.3  Send SPI_Update\
    \ .................................   39\n           6.0.4  Receive SPI_Update\
    \ ..............................   39\n           6.0.5  Automated SPI_Updates\
    \ ...........................   40\n        6.1       SPI_Needed ......................................\
    \   41\n        6.2       SPI_Update ......................................  \
    \ 43\n           6.2.1  Creation ........................................   44\n\
    \           6.2.2  Deletion ........................................   45\n  \
    \         6.2.3  Modification ....................................   45\n    \
    \    6.3       Validity Verification ...........................   45\n     7.\
    \     Error Messages ........................................   46\n        7.1\
    \       Bad_Cookie ......................................   47\n        7.2  \
    \     Resource_Limit ..................................   47\n        7.3    \
    \   Verification_Failure ............................   48\n        7.4      \
    \ Message_Reject ..................................   49\n     8.     Public Value\
    \ Exchanges ................................   50\n        8.1       Modular Exponentiation\
    \ Groups ...................   50\n        8.2       Moduli Selection ................................\
    \   50\n           8.2.1  Bootstrap Moduli ................................  \
    \ 51\n           8.2.2  Learning Moduli .................................   51\n\
    \        8.3       Generator Selection .............................   51\n  \
    \      8.4       Exponent Selection ..............................   52\n    \
    \    8.5       Defective Exchange Values .......................   53\n     9.\
    \     Basic Exchange-Schemes ................................   54\n     10. \
    \   Basic Key-Generation-Function .........................   55\n        10.1\
    \      MD5 Hash ........................................   55\n     11.    Basic\
    \ Privacy-Method ..................................   55\n        11.1      Simple\
    \ Masking ..................................   55\n     12.    Basic Validity-Method\
    \ .................................   55\n        12.1      MD5-IPMAC Check .................................\
    \   55\n     13.    Basic Attributes ......................................  \
    \ 56\n        13.1      Padding .........................................   56\n\
    \        13.2      AH-Attributes ...................................   57\n  \
    \      13.3      ESP-Attributes ..................................   57\n    \
    \    13.4      MD5-IPMAC .......................................   58\n      \
    \     13.4.1 Symmetric Identification ........................   58\n        \
    \   13.4.2 Authentication ..................................   59\n        13.5\
    \      Organizational ..................................   60\n     APPENDICES\
    \ ...................................................   61\n     A.     Automaton\
    \ .............................................   61\n        A.1       State\
    \ Transition Table ..........................   62\n        A.2       States ..........................................\
    \   65\n           A.2.1  Initial .........................................  \
    \ 65\n           A.2.2  Cookie ..........................................   66\n\
    \           A.2.3  Value ...........................................   66\n  \
    \         A.2.4  Identity ........................................   66\n    \
    \       A.2.5  Ready ...........................................   66\n      \
    \     A.2.6  Update ..........................................   66\n     B. \
    \    Use of Identification and Secrets .....................   67\n        B.1\
    \       Identification ..................................   67\n        B.2  \
    \     Group Identity With Group Secret ................   67\n        B.3    \
    \   Multiple Identities With Group Secrets ..........   68\n        B.4      \
    \ Multiple Identities With Multiple Secrets .......   69\n     OPERATIONAL CONSIDERATIONS\
    \ ...................................   70\n     SECURITY CONSIDERATIONS ......................................\
    \   70\n     HISTORY ......................................................  \
    \ 71\n     ACKNOWLEDGEMENTS .............................................   72\n\
    \     REFERENCES ...................................................   73\n  \
    \   CONTACTS .....................................................   75\n    \
    \ COPYRIGHT ....................................................   76\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Photuris [Firefly] establishes short-lived session-keys\
    \ between two\n   parties, without passing the session-keys across the Internet.\
    \  These\n   session-keys directly replace the long-lived secret-keys (such as\n\
    \   passwords and passphrases) that have been historically configured for\n  \
    \ security purposes.\n   The basic Photuris protocol utilizes these existing previously\n\
    \   configured secret-keys for identification of the parties.  This is\n   intended\
    \ to speed deployment and reduce administrative configuration\n   changes.\n \
    \  This document is primarily intended for implementing the Photuris\n   protocol.\
    \  It does not detail service and application interface\n   definitions, although\
    \ it does mention some basic policy areas\n   required for the proper implementation\
    \ and operation of the protocol\n   mechanisms.\n   Since the basic Photuris protocol\
    \ is extensible, new data types and\n   protocol behaviour should be expected.\
    \  The implementor is especially\n   cautioned not to depend on values that appear\
    \ in examples to be\n   current or complete, since their purpose is primarily\
    \ pedagogical.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   In this document, the key words \"MAY\", \"MUST, \"MUST\
    \ NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"SHOULD NOT\", are\
    \ to be interpreted as\n   described in [RFC-2119].\n   byte             An 8-bit\
    \ quantity; also known as \"octet\" in\n                    standardese.\n   exchange-value\
    \   The publically distributable value used to calculate\n                   \
    \ a shared-secret.  As used in this document, refers\n                    to a\
    \ Diffie-Hellman exchange, not the public part of\n                    a public/private\
    \ key-pair.\n   private-key      A value that is kept secret, and is part of an\n\
    \                    asymmetric public/private key-pair.\n   public-key      \
    \ A publically distributable value that is part of an\n                    asymmetric\
    \ public/private key-pair.\n   secret-key       A symmetric key that is not publically\n\
    \                    distributable.  As used in this document, this is\n     \
    \               distinguished from an asymmetric public/private\n            \
    \        key-pair.  An example is a user password.\n   Security Association (SA)\n\
    \                    A collection of parameters describing the security\n    \
    \                relationship between two nodes.  These parameters\n         \
    \           include the identities of the parties, the transform\n           \
    \         (including algorithm and algorithm mode), the key(s)\n             \
    \       (such as a session-key, secret-key, or appropriate\n                 \
    \   public/private key-pair), and possibly other\n                    information\
    \ such as sensitivity labelling.\n   Security Parameters Index (SPI)\n       \
    \             A number that indicates a particular set of uni-\n             \
    \       directional attributes used under a Security\n                    Association,\
    \ such as transform(s) and session-\n                    key(s).  The number is\
    \ relative to the IP\n                    Destination, which is the SPI Owner,\
    \ and is unique\n                    per IP (Next Header) Protocol.  That is,\
    \ the same\n                    value MAY be used by multiple protocols to\n \
    \                   concurrently indicate different Security Association\n   \
    \                 parameters.\n   session-key      A key that is independently\
    \ derived from a shared-\n                    secret by the parties, and used\
    \ for keying one\n                    direction of traffic.  This key is changed\n\
    \                    frequently.\n   shared-secret    As used in this document,\
    \ the calculated result of\n                    the Photuris exchange.\n   SPI\
    \ Owner        The party that corresponds to the IP Destination;\n           \
    \         the intended recipient of a protected datagram.\n   SPI User       \
    \  The party that corresponds to the IP Source; the\n                    sender\
    \ of a protected datagram.\n   transform        A cryptographic manipulation of\
    \ a particular set of\n                    data.  As used in this document, refers\
    \ to certain\n                    well-specified methods (defined elsewhere).\
    \  For\n                    example, AH-MD5 [RFC-1828] transforms an IP datagram\n\
    \                    into a cryptographic hash, and ESP-DES-CBC [RFC-\n      \
    \              1829] transforms plaintext to ciphertext and back\n           \
    \         again.\n   Many of these terms are hierarchically related:\n      Security\
    \ Association (bi-directional)\n       - one or more lists of Security Parameters\
    \ (uni-directional)\n        -- one or more Attributes\n         --- may have\
    \ a key\n         --- may indicate a transform\n   Implementors will find details\
    \ of cryptographic hashing (such as\n   MD5), encryption algorithms and modes\
    \ (such as DES), digital\n   signatures (such as DSS), and other algorithms in\
    \ [Schneier95].\n"
- title: 1.2.  Protocol Overview
  contents:
  - "1.2.  Protocol Overview\n   The Photuris protocol consists of several simple\
    \ phases:\n   1. A \"Cookie\" Exchange guards against simple flooding attacks\
    \ sent\n      with bogus IP Sources or UDP Ports.  Each party passes a \"cookie\"\
    \n      to the other.\n      In return, a list of supported Exchange-Schemes are\
    \ offered by the\n      Responder for calculating a shared-secret.\n   2. A Value\
    \ Exchange establishes a shared-secret between the parties.\n      Each party\
    \ passes an Exchange-Value to the other.  These values\n      are used to calculate\
    \ a shared-secret.  The Responder remains\n      stateless until a shared-secret\
    \ has been created.\n      In addition, supported attributes are offered by each\
    \ party for\n      use in establishing new Security Parameters.\n   3. An Identification\
    \ Exchange identifies the parties to each other,\n      and verifies the integrity\
    \ of values sent in phases 1 and 2.\n      In addition, the shared-secret provides\
    \ a basis to generate\n      separate session-keys in each direction, which are\
    \ in turn used\n      for conventional authentication or encryption.  Additional\n\
    \      security attributes are also exchanged as needed.\n      This exchange\
    \ is masked for party privacy protection using a\n      message privacy-key based\
    \ on the shared-secret.  This protects the\n      identities of the parties, hides\
    \ the Security Parameter attribute\n      values, and improves security for the\
    \ exchange protocol and\n      security transforms.\n   4. Additional messages\
    \ may be exchanged to periodically change the\n      session-keys, and to establish\
    \ new or revised Security Parameters.\n      These exchanges are also masked for\
    \ party privacy protection in\n      the same fashion as above.\n   The sequence\
    \ of message types and their purposes are summarized in\n   the diagram below.\
    \  The first three phases (cookie, exchange, and\n   identification) must be carried\
    \ out in their entirety before any\n   Security Association can be used.\n   Initiator\
    \                            Responder\n   =========                         \
    \   =========\n   Cookie_Request                 ->\n                        \
    \           <-   Cookie_Response\n                                           offer\
    \ schemes\n   Value_Request                  ->\n      pick scheme\n      offer\
    \ value\n      offer attributes\n                                   <-   Value_Response\n\
    \                                           offer value\n                    \
    \                       offer attributes\n             [generate shared-secret\
    \ from exchanged values]\n   Identity_Request               ->\n      make SPI\n\
    \      pick SPI attribute(s)\n      identify self\n      authenticate\n      make\
    \ privacy key(s)\n      mask/encrypt message\n                               \
    \    <-   Identity_Response\n                                           make SPI\n\
    \                                           pick SPI attribute(s)\n          \
    \                                 identify self\n                            \
    \               authenticate\n                                           make\
    \ privacy key(s)\n                                           mask/encrypt message\n\
    \               [make SPI session-keys in each direction]\n   SPI User       \
    \                      SPI Owner\n   ========                             =========\n\
    \   SPI_Needed                     ->\n      list SPI attribute(s)\n      make\
    \ validity key\n      authenticate\n      make privacy key(s)\n      mask/encrypt\
    \ message\n                                   <-   SPI_Update\n              \
    \                             make SPI\n                                     \
    \      pick SPI attribute(s)\n                                           make\
    \ SPI session-key(s)\n                                           make validity\
    \ key\n                                           authenticate\n             \
    \                              make privacy key(s)\n                         \
    \                  mask/encrypt message\n   Either party may initiate an exchange\
    \ at any time.  For example, the\n   Initiator need not be a \"caller\" in a telephony\
    \ link.\n   The Initiator is responsible for recovering from all message losses\n\
    \   by retransmission.\n"
- title: 1.3.  Security Parameters
  contents:
  - "1.3.  Security Parameters\n   A Photuris exchange between two parties results\
    \ in a pair of SPI\n   values (one in each direction).  Each SPI is used in creating\n\
    \   separate session-key(s) in each direction.\n   The SPI is assigned by the\
    \ entity controlling the IP Destination: the\n   SPI Owner (receiver).  The parties\
    \ use the combination of IP\n   Destination, IP (Next Header) Protocol, and SPI\
    \ to distinguish the\n   correct Security Association.\n   When both parties initiate\
    \ Photuris exchanges concurrently, or one\n   party initiates more than one Photuris\
    \ exchange, the Initiator\n   Cookies (and UDP Ports) keep the exchanges separate.\
    \  This results in\n   more than one initial SPI for each Destination.\n   To\
    \ create multiple SPIs with different parameters, the parties may\n   also send\
    \ SPI_Updates.\n   There is no requirement that all such outstanding SPIs be used.\
    \  The\n   SPI User (sender) selects an appropriate SPI for each datagram\n  \
    \ transmission.\n   Implementation Notes:\n      The method used for SPI assignment\
    \ is implementation dependent.\n      The only requirement is that the SPI be\
    \ unique for the IP\n      Destination and IP (Next Header) Protocol.\n      However,\
    \ selection of a cryptographically random SPI value can\n      help prevent attacks\
    \ that depend on a predicatable sequence of\n      values.  The implementor MUST\
    \ NOT expect SPI values to have a\n      particular order or range.\n"
- title: 1.4.  LifeTimes
  contents:
  - "1.4.  LifeTimes\n   The Photuris exchange results in two kinds of state, each\
    \ with\n   separate LifeTimes.\n   1) The Exchange LifeTime of the small amount\
    \ of state associated with\n      the Photuris exchange itself.  This state may\
    \ be viewed as between\n      Internet nodes.\n   2) The SPI LifeTimes of the\
    \ individual SPIs that are established.\n      This state may be viewed as between\
    \ users and nodes.\n   The SPI LifeTimes may be shorter or longer than the Exchange\n\
    \   LifeTime.  These LifeTimes are not required to be related to each\n   other.\n\
    \   When an Exchange-Value expires (or is replaced by a newer value), any\n  \
    \ unexpired derived SPIs are not affected.  This is important to allow\n   traffic\
    \ to continue without interruption during new Photuris\n   exchanges.\n"
- title: 1.4.1.  Exchange LifeTimes
  contents:
  - "1.4.1.  Exchange LifeTimes\n   All retained exchange state of both parties has\
    \ an associated\n   Exchange LifeTime (ELT), and is subject to periodic expiration.\
    \  This\n   depends on the physical and logistical security of the machine, and\n\
    \   is typically in the range of 10 minutes to one day (default 30\n   minutes).\n\
    \   In addition, during a Photuris exchange, an Exchange TimeOut (ETO)\n   limits\
    \ the wait for the exchange to complete.  This timeout includes\n   the packet\
    \ round trips, and the time for completing the\n   Identification Exchange calculations.\
    \  The time is bounded by both\n   the maximum amount of calculation delay expected\
    \ for the processing\n   power of an unknown peer, and the minimum user expectation\
    \ for\n   results (default 30 seconds).\n   These Exchange LifeTimes and TimeOuts\
    \ are implementation dependent\n   and are not disclosed in any Photuris message.\
    \  The paranoid operator\n   will have a fairly short Exchange LifeTime, but it\
    \ MUST NOT be less\n   than twice the ETO.\n   To prevent synchronization between\
    \ Photuris exchanges, the\n   implementation SHOULD randomly vary each Exchange\
    \ LifeTime within\n   twice the range of seconds that are required to calculate\
    \ a new\n   Exchange-Value.  For example, when the Responder uses a base ELT of\n\
    \   30 minutes, and takes 10 seconds to calculate the new Exchange-Value,\n  \
    \ the equation might be (in milliseconds):\n      1790000 + urandom(20000)\n \
    \  The Exchange-Scheme, Exchange-Values, and resulting shared-secret MAY\n   be\
    \ cached in short-term storage for the Exchange LifeTime.  When\n   repetitive\
    \ Photuris exchanges occur between the same parties, and the\n   Exchange-Values\
    \ are discovered to be unchanged, the previously\n   calculated shared-secret\
    \ can be used to rapidly generate new\n   session-keys.\n"
- title: 1.4.2.  SPI LifeTimes
  contents:
  - "1.4.2.  SPI LifeTimes\n   Each SPI has an associated LifeTime, specified by the\
    \ SPI owner\n   (receiver).  This SPI LifeTime (SPILT) is usually related to the\n\
    \   speed of the link (typically 2 to 30 minutes), but it MUST NOT be\n   less\
    \ than thrice the ETO.\n   The SPI can also be deleted by the SPI Owner using\
    \ the SPI_Update.\n   Once the SPI has expired or been deleted, the parties cease\
    \ using the\n   SPI.\n   To prevent synchronization between multiple Photuris\
    \ exchanges, the\n   implementation SHOULD randomly vary each SPI LifeTime.  For\
    \ example,\n   when the Responder uses a base SPILT of 5 minutes, and 30 seconds\
    \ for\n   the ETO, the equation might be (in milliseconds):\n      285000 + urandom(30000)\n\
    \   There is no requirement that a long LifeTime be accepted by the SPI\n   User.\
    \  The SPI User might never use an established SPI, or cease\n   using the SPI\
    \ at any time.\n   When more than one unexpired SPI is available to the SPI User\
    \ for the\n   same function, a common implementation technique is to select the\
    \ SPI\n   with the greatest remaining LifeTime.  However, selecting randomly\n\
    \   among a large number of SPIs might provide some defense against\n   traffic\
    \ analysis.\n   To prevent resurrection of deleted or expired SPIs, SPI Owners\
    \ SHOULD\n   remember those SPIs, but mark them as unusable until the Photuris\n\
    \   exchange shared-secret used to create them also expires and purges\n   the\
    \ associated state.\n   When the SPI Owner detects an incoming SPI that has recently\
    \ expired,\n   but the associated exchange state has not yet been purged, the\n\
    \   implementation MAY accept the SPI.  The length of time allowed is\n   highly\
    \ dependent on clock drift and variable packet round trip time,\n   and is therefore\
    \ implementation dependent.\n"
- title: 1.5.  Random Number Generation
  contents:
  - "1.5.  Random Number Generation\n   The security of Photuris critically depends\
    \ on the quality of the\n   secret random numbers generated by each party.  A\
    \ poor random number\n   generator at either party will compromise the shared-secret\
    \ produced\n   by the algorithm.\n   Generating cryptographic quality random numbers\
    \ on a general purpose\n   computer without hardware assistance is a very tricky\
    \ problem.  In\n   general, this requires using a cryptographic hashing function\
    \ to\n   \"distill\" the entropy from a large number of semi-random external\n\
    \   events, such as the timing of key strokes.  An excellent discussion\n   can\
    \ be found in [RFC-1750].\n"
- title: 2.  Protocol Details
  contents:
  - "2.  Protocol Details\n   The Initiator begins a Photuris exchange under several\
    \ circumstances:\n   -  The Initiator has a datagram that it wishes to send with\n\
    \      confidentiality, and has no current Photuris exchange state with\n    \
    \  the IP Destination.  This datagram is discarded, and a\n      Cookie_Request\
    \ is sent instead.\n   -  The Initiator has received the ICMP message [RFC-1812]\
    \ Destination\n      Unreachable: Communication Administratively Prohibited (Type\
    \ 3,\n      Code 13), and has no current Photuris exchange state with the ICMP\n\
    \      Source.\n   -  The Initiator has received the ICMP message [RFC-2521] Security\n\
    \      Failures: Bad SPI (Type 40, Code 0), that matches current Photuris\n  \
    \    exchange state with the ICMP Source.\n   -  The Initiator has received the\
    \ ICMP message [RFC-2521] Security\n      Failures: Need Authentication (Type\
    \ 40, Code 4), and has no\n      current Photuris exchange state with the ICMP\
    \ Source.\n   -  The Initiator has received the ICMP message [RFC-2521] Security\n\
    \      Failures: Need Authorization (Type 40, Code 5), that matches\n      current\
    \ Photuris exchange state with the ICMP Source.\n   When the event is an ICMP\
    \ message, special care MUST be taken that\n   the ICMP message actually includes\
    \ information that matches a\n   previously sent IP datagram.  Otherwise, this\
    \ could provide an\n   opportunity for a clogging attack, by stimulating a new\
    \ Photuris\n   Exchange.\n"
- title: 2.1.  UDP
  contents:
  - "2.1.  UDP\n   All Photuris messages use the User Datagram Protocol header [RFC-\n\
    \   768].  The Initiator sends to UDP Destination Port 468.\n   When replying\
    \ to the Initiator, the Responder swaps the IP Source and\n   Destination, and\
    \ the UDP Source and Destination Ports.\n   The UDP checksum MUST be correctly\
    \ calculated when sent.  When a\n   message is received with an incorrect UDP\
    \ checksum, it is silently\n   discarded.\n   Implementation Notes:\n      It\
    \ is expected that installation of Photuris will ensure that UDP\n      checksum\
    \ calculations are enabled for the computer operating\n      system and later\
    \ disabling by operators is prevented.\n      Internet Protocol version 4 [RFC-791]\
    \ restricts the maximum\n      reassembled datagram to 576 bytes.\n      When\
    \ processing datagrams containing variable size values, the\n      length must\
    \ be checked against the overall datagram length.  An\n      invalid size (too\
    \ long or short) that causes a poorly coded\n      receiver to abort could be\
    \ used as a denial of service attack.\n"
- title: 2.2.  Header Format
  contents:
  - "2.2.  Header Format\n   All of the messages have a format similar to the following,\
    \ as\n   transmitted left to right in network order (most significant to least\n\
    \   significant):\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |\n   +-+-+-+-+-+-+-+-+\n   Initiator-Cookie  16 bytes.\n\
    \   Responder-Cookie  16 bytes.\n   Message          1 byte.  Each message type\
    \ has a unique value.\n                    Initial values are assigned as follows:\n\
    \                        0  Cookie_Request\n                        1  Cookie_Response\n\
    \                        2  Value_Request\n                        3  Value_Response\n\
    \                        4  Identity_Request\n                        5  Secret_Response\
    \ (optional)\n                        6  Secret_Request (optional)\n         \
    \               7  Identity_Response\n                        8  SPI_Needed\n\
    \                        9  SPI_Update\n                       10  Bad_Cookie\n\
    \                       11  Resource_Limit\n                       12  Verification_Failure\n\
    \                       13  Message_Reject\n   Further details and differences\
    \ are elaborated in the individual\n   messages.\n"
- title: 2.3.  Variable Precision Integers
  contents:
  - "2.3.  Variable Precision Integers\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Size              |             Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Size             2, 4, or 8 bytes.  The number of significant bits\n     \
    \               used in the Value field.  Always transmitted most\n          \
    \          significant byte first.\n                    When the Size is zero,\
    \ no Value field is present;\n                    there are no significant bits.\
    \  This means \"missing\"\n                    or \"null\".  It should not be\
    \ confused with the value\n                    zero, which includes an indication\
    \ of the number of\n                    significant bits.\n                  \
    \  When the most significant byte is in the range 0\n                    through\
    \ 254 (0xfe), the field is 2 bytes.  Both\n                    bytes are used\
    \ to indicate the size of the Value\n                    field, which ranges from\
    \ 1 to 65,279 significant\n                    bits (in 1 to 8,160 bytes).\n \
    \                   When the most significant byte is 255 (0xff), the\n      \
    \              field is 4 bytes.  The remaining 3 bytes are added\n          \
    \          to 65,280 to indicate the size of the Value field,\n              \
    \      which is limited to 16,776,959 significant bits (in\n                 \
    \   2,097,120 bytes).\n                    When the most significant 2 bytes are\
    \ 65,535\n                    (0xffff), the field is 8 bytes.  The remaining 6\n\
    \                    bytes are added to 16,776,960 to indicate the size\n    \
    \                of the Value field.\n   Value            0 or more bytes.  Always\
    \ transmitted most\n                    significant byte first.\n            \
    \        The bits used are right justified within byte\n                    boundaries;\
    \ that is, any unused bits are in the most\n                    significant byte.\
    \  When there are no unused bits, or\n                    unused bits are zero\
    \ filled, the value is assumed to\n                    be an unsigned positive\
    \ integer.\n                    When the leading unused bits are ones filled,\
    \ the\n                    number is assumed to be a two's-complement negative\n\
    \                    integer.  A negative integer will always have at\n      \
    \              least one unused leading sign bit in the most\n               \
    \     significant byte.\n   Shortened forms SHOULD NOT be used when the Value\
    \ includes a number\n   of leading zero significant bits.  The Size SHOULD indicate\
    \ the\n   correct number of significant bits.\n   Implementation Notes:\n    \
    \  Negative integers are not required to be supported, but are\n      included\
    \ for completeness.\n      No more than 65,279 significant bits are required to\
    \ be supported.\n      Other ranges are vastly too long for these UDP messages,\
    \ but are\n      included for completeness.\n"
- title: 2.4.  Exchange-Schemes
  contents:
  - "2.4.  Exchange-Schemes\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Scheme             |             Size              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Scheme \
    \          2 bytes.  A unique value indicating the Exchange-\n               \
    \     Scheme.  See the \"Basic Exchange-Schemes\" for\n                    details.\n\
    \   Size             2 bytes, ranging from 0 to 65,279.  See \"Variable\n    \
    \                Precision Integer\".\n   Value            0 or more bytes.  See\
    \ \"Variable Precision Integer\".\n   The Size MUST NOT be assumed to be constant\
    \ for a particular Scheme.\n   Multiple kinds of the same Scheme with varying\
    \ Sizes MAY be present\n   in any list of schemes.\n   However, only one of each\
    \ Scheme and Size combination will be present\n   in any list of schemes.\n"
- title: 2.5.  Attributes
  contents:
  - "2.5.  Attributes\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \   Attribute   |    Length     |  Value(s) ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Attribute        1 byte.  A unique value indicating the kind of\n        \
    \            attribute.  See the \"Basic Attributes\" for details.\n         \
    \           When the value is zero (padding), no Length field is\n           \
    \         present (always zero).\n   Length           1 byte.  The size of the\
    \ Value(s) field in bytes.\n                    When the Length is zero, no Value(s)\
    \ field is\n                    present.\n   Value(s)         0 or more bytes.\
    \  See the \"Basic Attributes\" for\n                    details.\n   The Length\
    \ MUST NOT be assumed to be constant for a particular\n   Attribute.  Multiple\
    \ kinds of the same Attribute with varying Lengths\n   MAY be present in any list\
    \ of attributes.\n"
- title: 3.  Cookie Exchange
  contents:
  - "3.  Cookie Exchange\n   Initiator                            Responder\n   =========\
    \                            =========\n   Cookie_Request                 ->\n\
    \                                   <-   Cookie_Response\n                   \
    \                        offer schemes\n"
- title: 3.0.1.  Send Cookie_Request
  contents:
  - "3.0.1.  Send Cookie_Request\n   The Initiator initializes local state, and generates\
    \ a unique\n   \"cookie\".  The Initiator-Cookie MUST be different in each new\n\
    \   Cookie_Request between the same parties.  See \"Cookie Generation\" for\n\
    \   details.\n   -  If any previous exchange between the peer IP nodes has not\
    \ expired\n      in which this party was the Initiator, this Responder-Cookie\
    \ is\n      set to the most recent Responder-Cookie, and this Counter is set\n\
    \      to the corresponding Counter.\n      For example, a new Virtual Private\
    \ Network (VPN) tunnel is about\n      to be established to an existing partner.\
    \  The Counter is the same\n      value received in the prior Cookie_Response,\
    \ the Responder-Cookie\n      remains the same, and a new Initiator-Cookie is\
    \ generated.\n   -  If the new Cookie_Request is in response to a message of a\n\
    \      previous exchange in which this party was the Responder, this\n      Responder-Cookie\
    \ is set to the previous Initiator-Cookie, and this\n      Counter is set to zero.\n\
    \      For example, a Bad_Cookie message was received from the previous\n    \
    \  Initiator in response to SPI_Needed.  The Responder-Cookie is\n      replaced\
    \ with the Initiator-Cookie, and a new Initiator-Cookie is\n      generated. \
    \ This provides bookkeeping to detect bogus Bad_Cookie\n      messages.\n    \
    \  Also, can be used for bi-directional User, Transport, and Process\n      oriented\
    \ keying.  Such mechanisms are outside the scope of this\n      document.\n  \
    \ -  Otherwise, this Responder-Cookie and Counter are both set to zero.\n    \
    \  By default, the Initiator operates in the same manner as when all\n      of\
    \ its previous exchange state has expired.  The Responder will\n      send a Resource_Limit\
    \ when its own exchange state has not expired.\n   The Initiator also starts a\
    \ retransmission timer.  If no valid\n   Cookie_Response arrives within the time\
    \ limit, the same\n   Cookie_Request is retransmitted for the remaining number\
    \ of\n   Retransmissions.  The Initiator-Cookie value MUST be the same in each\n\
    \   such retransmission to the same IP Destination and UDP Port.\n   When Retransmissions\
    \ have been exceeded, if a Resource_Limit message\n   has been received during\
    \ the exchange, the Initiator SHOULD begin the\n   Photuris exchange again by\
    \ sending a new Cookie_Request with updated\n   values.\n"
- title: 3.0.2.  Receive Cookie_Request
  contents:
  - "3.0.2.  Receive Cookie_Request\n   On receipt of a Cookie_Request, the Responder\
    \ determines whether\n   there are sufficient resources to begin another Photuris\
    \ exchange.\n   -  When too many SPI values are already in use for this particular\n\
    \      peer, or too many concurrent exchanges are in progress, or some\n     \
    \ other resource limit is reached, a Resource_Limit message is sent.\n   -  When\
    \ any previous exchange initiated by this particular peer has\n      not exceeded\
    \ the Exchange TimeOut, and the Responder-Cookie does\n      not specify one of\
    \ these previous exchanges, a Resource_Limit\n      message is sent.\n   Otherwise,\
    \ the Responder returns a Cookie_Response.\n   Note that the Responder creates\
    \ no additional state at this time.\n"
- title: 3.0.3.  Send Cookie_Response
  contents:
  - "3.0.3.  Send Cookie_Response\n   The IP Source for the Initiator is examined.\
    \  If any previous\n   exchange between the peer IP nodes has not expired, the\
    \ response\n   Counter is set to the most recent exchange Counter plus one (allowing\n\
    \   for out of order retransmissions).  Otherwise, the response Counter\n   is\
    \ set to the request Counter plus one.\n   If (through rollover of the Counter)\
    \ the new Counter value is zero\n   (modulo 256), the value is set to one.\n \
    \  If this new Counter value matches some previous exchange initiated by\n   this\
    \ particular peer that has not yet exceeded the Exchange TimeOut,\n   the Counter\
    \ is incremented again, until a unique Counter value is\n   reached.\n   Nota\
    \ Bene:\n      No more than 254 concurrent exchanges between the same two peers\n\
    \      are supported.\n   The Responder generates a unique cookie.  The Responder-Cookie\
    \ value\n   in each successive response SHOULD be different.  See \"Cookie\n \
    \  Generation\" for details.\n   The Exchange-Schemes available between the peers\
    \ are listed in the\n   Offered-Schemes.\n"
- title: 3.0.4.  Receive Cookie_Response
  contents:
  - "3.0.4.  Receive Cookie_Response\n   The Initiator validates the Initiator-Cookie,\
    \ and the Offered-\n   Schemes.\n   -  When an invalid/expired Initiator-Cookie\
    \ is detected, the message\n      is silently discarded.\n   -  When the variable\
    \ length Offered-Schemes do not match the UDP\n      Length, or all Offered-Schemes\
    \ are obviously defective and/or\n      insufficient for the purposes intended,\
    \ the message is silently\n      discarded; the implementation SHOULD log the\
    \ occurance, and notify\n      an operator as appropriate.\n   -  Once a valid\
    \ message has been received, later Cookie_Responses\n      with matching Initiator-Cookies\
    \ are also silently discarded, until\n      a new Cookie_Request is sent.\n  \
    \ When the message is valid, an Exchange-Scheme is chosen from the list\n   of\
    \ Offered-Schemes.\n   This Scheme-Choice may affect the next Photuris message\
    \ sent.  By\n   default, the next Photuris message is a Value_Request.\n   Implementation\
    \ Notes:\n      Only the Initiator-Cookie is used to identify the exchange.  The\n\
    \      Counter and Responder-Cookie will both be different from the\n      Cookie_Request.\n\
    \      Various proposals for extensions utilize the Scheme-Choice to\n      indicate\
    \ a different message sequence.  Such mechanisms are\n      outside the scope\
    \ of this document.\n"
- title: 3.1.  Cookie_Request
  contents:
  - "3.1.  Cookie_Request\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |    Counter    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Initiator-Cookie  16 bytes.  A randomized value that identifies the\n    \
    \                exchange.  The value MUST NOT be zero.  See \"Cookie\n      \
    \              Generation\" for details.\n   Responder-Cookie  16 bytes.  Identifies\
    \ a specific previous exchange.\n                    Copied from a previous Cookie_Response.\n\
    \                    When zero, no previous exchange is specified.\n         \
    \           When non-zero, and the Counter is zero, contains the\n           \
    \         Initiator-Cookie of a previous exchange.  The\n                    specified\
    \ party is requested to be the Responder in\n                    this exchange,\
    \ to retain previous party pairings.\n                    When non-zero, and the\
    \ Counter is also non-zero,\n                    contains the Responder-Cookie\
    \ of a previous\n                    exchange.  The specified party is requested\
    \ to be\n                    the Responder in this exchange, to retain previous\n\
    \                    party pairings.\n   Message          0\n   Counter      \
    \    1 byte.  Indicates the number of previous exchanges.\n                  \
    \  When zero, the Responder-Cookie indicates the\n                    Initiator\
    \ of a previous exchange, or no previous\n                    exchange is specified.\n\
    \                    When non-zero, the Responder-Cookie indicates the\n     \
    \               Responder to a previous exchange.  This value is set\n       \
    \             to the Counter from the corresponding\n                    Cookie_Response\
    \ or from a Resource_Limit.\n"
- title: 3.2.  Cookie_Response
  contents:
  - "3.2.  Cookie_Response\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |    Counter    |  Offered-Schemes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Initiator-Cookie  16 bytes.  Copied from the Cookie_Request.\n   Responder-Cookie\
    \  16 bytes.  A randomized value that identifies the\n                    exchange.\
    \  The value MUST NOT be zero.  See \"Cookie\n                    Generation\"\
    \ for details.\n   Message          1\n   Counter          1 byte.  Indicates\
    \ the number of the current\n                    exchange.  Must be greater than\
    \ zero.\n   Offered-Schemes  4 or more bytes.  A list of one or more Exchange-\n\
    \                    Schemes supported by the Responder, ordered from\n      \
    \              most to least preferable.  See the \"Basic Exchange-\n        \
    \            Schemes\" for details.\n                    Only one Scheme (#2)\
    \ is required to be supported,\n                    and SHOULD be present in every\
    \ Offered-Schemes list.\n                    More than one of each kind of Scheme\
    \ may be offered,\n                    but each is distinguished by its Size.\
    \  The end of\n                    the list is indicated by the UDP Length.\n"
- title: 3.3.  Cookie Generation
  contents:
  - "3.3.  Cookie Generation\n   The exact technique by which a Photuris party generates\
    \ a cookie is\n   implementation dependent.  The method chosen must satisfy some\
    \ basic\n   requirements:\n   1. The cookie MUST depend on the specific parties.\
    \  This prevents an\n      attacker from obtaining a cookie using a real IP address\
    \ and UDP\n      port, and then using it to swamp the victim with requests from\n\
    \      randomly chosen IP addresses or ports.\n   2. It MUST NOT be possible for\
    \ anyone other than the issuing entity\n      to generate cookies that will be\
    \ accepted by that entity.  This\n      implies that the issuing entity will use\
    \ local secret information\n      in the generation and subsequent verification\
    \ of a cookie.  It\n      must not be possible to deduce this secret information\
    \ from any\n      particular cookie.\n   3. The cookie generation and verification\
    \ methods MUST be fast to\n      thwart attacks intended to sabotage CPU resources.\n\
    \   A recommended technique is to use a cryptographic hashing function\n   (such\
    \ as MD5).\n   An incoming cookie can be verified at any time by regenerating\
    \ it\n   locally from values contained in the incoming datagram and the local\n\
    \   secret random value.\n"
- title: 3.3.1.  Initiator Cookie
  contents:
  - "3.3.1.  Initiator Cookie\n   The Initiator secret value that affects its cookie\
    \ SHOULD change for\n   each new Photuris exchange, and is thereafter internally\
    \ cached on a\n   per Responder basis.  This provides improved synchronization\
    \ and\n   protection against replay attacks.\n   An alternative is to cache the\
    \ cookie instead of the secret value.\n   Incoming cookies can be compared directly\
    \ without the computational\n   cost of regeneration.\n   It is recommended that\
    \ the cookie be calculated over the secret\n   value, the IP Source and Destination\
    \ addresses, and the UDP Source\n   and Destination ports.\n   Implementation\
    \ Notes:\n      Although the recommendation includes the UDP Source port, this\
    \ is\n      very implementation specific.  For example, it might not be\n    \
    \  included when the value is constant.\n      However, it is important that the\
    \ implementation protect mutually\n      suspicious users of the same machine\
    \ from generating the same\n      cookie.\n"
- title: 3.3.2.  Responder Cookie
  contents:
  - "3.3.2.  Responder Cookie\n   The Responder secret value that affects its cookies\
    \ MAY remain the\n   same for many different Initiators.  However, this secret\
    \ SHOULD be\n   changed periodically to limit the time for use of its cookies\n\
    \   (typically each 60 seconds).\n   The Responder-Cookie SHOULD include the Initiator-Cookie.\
    \  The\n   Responder-Cookie MUST include the Counter (that is returned in the\n\
    \   Cookie_Response).  This provides improved synchronization and\n   protection\
    \ against replay attacks.\n   It is recommended that the cookie be calculated\
    \ over the secret\n   value, the IP Source and Destination addresses, its own\
    \ UDP\n   Destination port, the Counter, the Initiator-Cookie, and the\n   currently\
    \ Offered-Schemes.\n   The cookie is not cached per Initiator to avoid saving\
    \ state during\n   the initial Cookie Exchange.  On receipt of a Value_Request\n\
    \   (described later), the Responder regenerates its cookie for\n   validation.\n\
    \   Once the Value_Response is sent (also described later), both\n   Initiator\
    \ and Responder cookies are cached to identify the exchange.\n   Implementation\
    \ Notes:\n      Although the recommendation does not include the UDP Source port,\n\
    \      this is very implementation specific.  It might be successfully\n     \
    \ included in some variants.\n      However, it is important that the UDP Source\
    \ port not be included\n      when matching existing Photuris exchanges for determining\
    \ the\n      appropriate Counter.\n      The recommendation includes the Offered-Schemes\
    \ to detect a\n      dynamic change of scheme value between the Cookie_Response\
    \ and\n      Value_Response.\n      Some mechanism MAY be needed to detect a dynamic\
    \ change of pre-\n      calculated Responder Exchange-Value between the Value_Response\
    \ and\n      Identity_Response.  For example, change the secret value to render\n\
    \      the cookie invalid, or explicitly mark the Photuris exchange state\n  \
    \    as expired.\n"
- title: 4.  Value Exchange
  contents:
  - "4.  Value Exchange\n   Initiator                            Responder\n   =========\
    \                            =========\n   Value_Request                  ->\n\
    \      pick scheme\n      offer value\n      offer attributes\n              \
    \                     <-   Value_Response\n                                  \
    \         offer value\n                                           offer attributes\n\
    \             [generate shared-secret from exchanged values]\n"
- title: 4.0.1.  Send Value_Request
  contents:
  - "4.0.1.  Send Value_Request\n   The Initiator generates an appropriate Exchange-Value\
    \ for the\n   Scheme-Choice.  This Exchange-Value may be pre-calculated and used\n\
    \   for multiple Responders.\n   The IP Destination for the Responder is examined,\
    \ and the attributes\n   available between the parties are listed in the Offered-Attributes.\n\
    \   The Initiator also starts a retransmission timer.  If no valid\n   Value_Response\
    \ arrives within the time limit, the same Value_Request\n   is retransmitted for\
    \ the remaining number of Retransmissions.\n   When Retransmissions have been\
    \ exceeded, if a Bad_Cookie or\n   Resource_Limit message has been received during\
    \ the exchange, the\n   Initiator SHOULD begin the Photuris exchange again by\
    \ sending a new\n   Cookie_Request.\n"
- title: 4.0.2.  Receive Value_Request
  contents:
  - "4.0.2.  Receive Value_Request\n   The Responder validates the Responder-Cookie,\
    \ the Counter, the\n   Scheme-Choice, the Exchange-Value, and the Offered-Attributes.\n\
    \   -  When an invalid/expired Responder-Cookie is detected, a Bad_Cookie\n  \
    \    message is sent.\n   -  When too many SPI values are already in use for this\
    \ particular\n      peer, or too many concurrent exchanges are in progress, or\
    \ some\n      other resource limit is reached, a Resource_Limit message is sent.\n\
    \   -  When an invalid Scheme-Choice is detected, or the Exchange-Value\n    \
    \  is obviously defective, or the variable length Offered-Attributes\n      do\
    \ not match the UDP Length, the message is silently discarded;\n      the implementation\
    \ SHOULD log the occurance, and notify an\n      operator as appropriate.\n  \
    \ When the message is valid, the Responder sets its Exchange timer to\n   the\
    \ Exchange TimeOut, and returns a Value_Response.\n   The Responder keeps a copy\
    \ of the incoming Value_Request cookie pair,\n   and its Value_Response.  If a\
    \ duplicate Value_Request is received, it\n   merely resends its previous Value_Response,\
    \ and takes no further\n   action.\n"
- title: 4.0.3.  Send Value_Response
  contents:
  - "4.0.3.  Send Value_Response\n   The Responder generates an appropriate Exchange-Value\
    \ for the\n   Scheme-Choice.  This Exchange-Value may be pre-calculated and used\n\
    \   for multiple Initiators.\n   The IP Source for the Initiator is examined,\
    \ and the attributes\n   available between the parties are listed in the Offered-Attributes.\n\
    \   Implementation Notes:\n      At this time, the Responder begins calculation\
    \ of the shared-\n      secret.  Calculation of the shared-secret is executed\
    \ in parallel\n      to minimize delay.\n      This may take a substantial amount\
    \ of time.  The implementor\n      should ensure that retransmission is not blocked\
    \ by this\n      calculation.  This is not usually a problem, as retransmission\n\
    \      timeouts typically exceed calculation time.\n"
- title: 4.0.4.  Receive Value_Response
  contents:
  - "4.0.4.  Receive Value_Response\n   The Initiator validates the pair of Cookies,\
    \ the Exchange-Value, and\n   the Offered-Attributes.\n   -  When an invalid/expired\
    \ cookie is detected, the message is\n      silently discarded.\n   -  When the\
    \ Exchange-Value is obviously defective, or the variable\n      length Offered-Attributes\
    \ do not match the UDP Length, the message\n      is silently discarded; the implementation\
    \ SHOULD log the\n      occurance, and notify an operator as appropriate.\n  \
    \ -  Once a valid message has been received, later Value_Responses with\n    \
    \  both matching cookies are also silently discarded, until a new\n      Cookie_Request\
    \ is sent.\n   When the message is valid, the Initiator begins its parallel\n\
    \   computation of the shared-secret.\n   When the Initiator completes computation,\
    \ it sends an\n   Identity_Request to the Responder.\n"
- title: 4.1.  Value_Request
  contents:
  - "4.1.  Value_Request\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |    Counter    |         Scheme-Choice         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                 Initiator-Exchange-Value                    ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Initiator-Offered-Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Initiator-Cookie  16 bytes.  Copied from the Cookie_Response.\n   Responder-Cookie\
    \  16 bytes.  Copied from the Cookie_Response.\n   Message          2\n   Counter\
    \          1 byte.  Copied from the Cookie_Response.\n   Scheme-Choice    2 bytes.\
    \  A value selected by the Initiator from the\n                    list of Offered-Schemes\
    \ in the Cookie_Response.\n                    Only the Scheme is specified; the\
    \ Size will match\n                    the Initiator-Exchange-Value, and the Value(s)\
    \ are\n                    implicit.\n   Initiator-Exchange-Value\n          \
    \          Variable Precision Integer.  Provided by the\n                    Initiator\
    \ for calculating a shared-secret between\n                    the parties.  The\
    \ Value format is indicated by the\n                    Scheme-Choice.\n     \
    \               The field may be any integral number of bytes in\n           \
    \         length, as indicated by its Size field.  It does not\n             \
    \       require any particular alignment.  The 32-bit\n                    alignment\
    \ shown is for convenience in the\n                    illustration.\n   Initiator-Offered-Attributes\n\
    \                    4 or more bytes.  A list of Security Parameter\n        \
    \            attributes supported by the Initiator.\n                    The contents\
    \ and usage of this list are further\n                    described in \"Offered\
    \ Attributes List\".  The end of\n                    the list is indicated by\
    \ the UDP Length.\n"
- title: 4.2.  Value_Response
  contents:
  - "4.2.  Value_Response\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |                    Reserved                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                 Responder-Exchange-Value                    ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Responder-Offered-Attributes ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Initiator-Cookie  16 bytes.  Copied from the Value_Request.\n   Responder-Cookie\
    \  16 bytes.  Copied from the Value_Request.\n   Message          3\n   Reserved\
    \         3 bytes.  For future use; MUST be set to zero when\n               \
    \     transmitted, and MUST be ignored when received.\n   Responder-Exchange-Value\n\
    \                    Variable Precision Integer.  Provided by the\n          \
    \          Responder for calculating a shared-secret between\n               \
    \     the parties.  The Value format is indicated by the\n                   \
    \ current Scheme-Choice specified in the\n                    Value_Request.\n\
    \                    The field may be any integral number of bytes in\n      \
    \              length, as indicated by its Size field.  It does not\n        \
    \            require any particular alignment.  The 32-bit\n                 \
    \   alignment shown is for convenience in the\n                    illustration.\n\
    \   Responder-Offered-Attributes\n                    4 or more bytes.  A list\
    \ of Security Parameter\n                    attributes supported by the Responder.\n\
    \                    The contents and usage of this list are further\n       \
    \             described in \"Offered Attributes List\".  The end of\n        \
    \            the list is indicated by the UDP Length.\n"
- title: 4.3.  Offered Attribute List
  contents:
  - "4.3.  Offered Attribute List\n   This list includes those attributes supported\
    \ by the party that are\n   available to the other party.  The attribute formats\
    \ are specified in\n   the \"Basic Attributes\".\n   The list is composed of two\
    \ or three sections: Identification-\n   Attributes, Authentication-Attributes,\
    \ and (optional) Encapsulation-\n   Attributes.  Within each section, the attributes\
    \ are ordered from\n   most to least preferable.\n   The first section of the\
    \ list includes methods of identification.  An\n   Identity-Choice is selected\
    \ from this list.\n   The second section of the list begins with \"AH-Attributes\"\
    \ (#1).  It\n   includes methods of authentication, and other operational types.\n\
    \   The third section of the list begins with \"ESP-Attributes\" (#2).  It\n \
    \  includes methods of authentication, compression, encryption, and\n   other\
    \ operational types.  When no Encapsulation-Attributes are\n   offered, the \"\
    ESP-Attributes\" attribute itself is omitted from the\n   list.\n   Attribute-Choices\
    \ are selected from the latter two sections of the\n   list.\n   Support is required\
    \ for the \"MD5-IPMAC\" (#5) attribute for both\n   \"Symmetric Identification\"\
    \ and \"Authentication\" and they SHOULD be\n   present in every Offered-Attributes\
    \ list.\n   Implementation Notes:\n      For example,\n         \"MD5-IPMAC\"\
    \ (Symmetric Identification),\n         \"AH-Attributes\",\n         \"MD5-IPMAC\"\
    \ (Authentication).\n      Since the offer is made by the prospective SPI User\
    \ (sender),\n      order of preference likely reflects the capabilities and\n\
    \      engineering tradeoffs of a particular implementation.\n      However, the\
    \ critical processing bottlenecks are frequently in the\n      receiver.  The\
    \ SPI Owner (receiver) may express its needs by\n      choosing a less preferable\
    \ attribute.\n      The order may also be affected by operational policy and requested\n\
    \      services for an application.  Such considerations are outside the\n   \
    \   scope of this document.\n      The list may be divided into additional sections.\
    \  These sections\n      will always follow the ESP-Attributes section, and are\n\
    \      indistinguishable from unrecognized attributes.\n      The authentication,\
    \ compression, encryption and identification\n      mechanisms chosen, as well\
    \ as the encapsulation modes (if any),\n      need not be the same in both directions.\n"
- title: 5.  Identification Exchange
  contents:
  - "5.  Identification Exchange\n   Initiator                            Responder\n\
    \   =========                            =========\n   Identity_Request      \
    \         ->\n      make SPI\n      pick SPI attribute(s)\n      identify self\n\
    \      authenticate\n      make privacy key(s)\n      mask/encrypt message\n \
    \                                  <-   Identity_Response\n                  \
    \                         make SPI\n                                         \
    \  pick SPI attribute(s)\n                                           identify\
    \ self\n                                           authenticate\n            \
    \                               make privacy key(s)\n                        \
    \                   mask/encrypt message\n               [make SPI session-keys\
    \ in each direction]\n   The exchange of messages is ordered, although the formats\
    \ and\n   meanings of the messages are identical in each direction.  The\n   messages\
    \ are easily distinguished by the parties themselves, by\n   examining the Message\
    \ and Identification fields.\n   Implementation Notes:\n      The amount of time\
    \ for the calculation may be dependent on the\n      value of particular bits\
    \ in secret values used in generating the\n      shared-secret or identity verification.\
    \  To prevent analysis of\n      these secret bits by recording the time for calculation,\
    \ sending\n      of the Identity_Messages SHOULD be delayed until the time expected\n\
    \      for the longest calculation.  This will be different for different\n  \
    \    processor speeds, different algorithms, and different length\n      variables.\
    \  Therefore, the method for estimating time is\n      implementation dependent.\n\
    \      Any authenticated and/or encrypted user datagrams received before\n   \
    \   the completion of identity verification can be placed on a queue\n      pending\
    \ completion of this step.  If verification succeeds, the\n      queue is processed\
    \ as though the datagrams had arrived subsequent\n      to the verification. \
    \ If verification fails, the queue is\n      discarded.\n"
- title: 5.0.1.  Send Identity_Request
  contents:
  - "5.0.1.  Send Identity_Request\n   The Initiator chooses an appropriate Identification,\
    \ the SPI and\n   SPILT, a set of Attributes for the SPI, calculates the Verification,\n\
    \   and masks the message using the Privacy-Method indicated by the\n   current\
    \ Scheme-Choice.\n   The Initiator also starts a retransmission timer.  If no\
    \ valid\n   Identity_Response arrives within the time limit, its previous\n  \
    \ Identity_Request is retransmitted for the remaining number of\n   Retransmissions.\n\
    \   When Retransmissions have been exceeded, if a Bad_Cookie message has\n   been\
    \ received during the exchange, the Initiator SHOULD begin the\n   Photuris exchange\
    \ again by sending a new Cookie_Request.\n"
- title: 5.0.2.  Receive Identity_Request
  contents:
  - "5.0.2.  Receive Identity_Request\n   The Responder validates the pair of Cookies,\
    \ the Padding, the\n   Identification, the Verification, and the Attribute-Choices.\n\
    \   -  When an invalid/expired cookie is detected, a Bad_Cookie message\n    \
    \  is sent.\n   -  After unmasking, when invalid Padding is detected, the variable\n\
    \      length Attribute-Choices do not match the UDP Length, or an\n      attribute\
    \ was not in the Offered-Attributes, the message is\n      silently discarded.\n\
    \   -  When an invalid Identification is detected, or the message\n      verification\
    \ fails, a Verification_Failure message is sent.\n   -  Whenever such a problem\
    \ is detected, the Security Association is\n      not established; the implementation\
    \ SHOULD log the occurance, and\n      notify an operator as appropriate.\n  \
    \ When the message is valid, the Responder sets its Exchange timer to\n   the\
    \ Exchange LifeTime (if this has not already been done for a\n   previous exchange).\
    \  When its parallel computation of the shared-\n   secret is complete, the Responder\
    \ returns an Identity_Response.\n   The Responder keeps a copy of the incoming\
    \ Identity_Request values,\n   and its Identity_Response.  If a duplicate Identity_Request\
    \ is\n   received, it merely resends its previous Identity_Response, and takes\n\
    \   no further action.\n"
- title: 5.0.3.  Send Identity_Response
  contents:
  - "5.0.3.  Send Identity_Response\n   The Responder chooses an appropriate Identification,\
    \ the SPI and\n   SPILT, a set of Attributes for the SPI, calculates the Verification,\n\
    \   and masks the message using the Privacy-Method indicated by the\n   current\
    \ Scheme-Choice.\n   The Responder calculates the SPI session-keys in both directions.\n\
    \   At this time, the Responder begins the authentication and/or\n   encryption\
    \ of user datagrams.\n"
- title: 5.0.4.  Receive Identity_Response
  contents:
  - "5.0.4.  Receive Identity_Response\n   The Initiator validates the pair of Cookies,\
    \ the Padding, the\n   Identification, the Verification, and the Attribute-Choices.\n\
    \   -  When an invalid/expired cookie is detected, the message is\n      silently\
    \ discarded.\n   -  After unmasking, when invalid Padding is detected, the variable\n\
    \      length Attribute-Choices do not match the UDP Length, or an\n      attribute\
    \ was not in the Offered-Attributes, the message is\n      silently discarded.\n\
    \   -  When an invalid Identification is detected, or the message\n      verification\
    \ fails, a Verification_Failure message is sent.\n   -  Whenever such a problem\
    \ is detected, the Security Association is\n      not established; the implementation\
    \ SHOULD log the occurance, and\n      notify an operator as appropriate.\n  \
    \ -  Once a valid message has been received, later Identity_Responses\n      with\
    \ both matching cookies are also silently discarded, until a\n      new Cookie_Request\
    \ is sent.\n   When the message is valid, the Initiator sets its Exchange timer\
    \ to\n   the Exchange LifeTime (if this has not already been done for a\n   previous\
    \ exchange).\n   The Initiator calculates the SPI session-keys in both directions.\n\
    \   At this time, the Initiator begins the authentication and/or\n   encryption\
    \ of user datagrams.\n"
- title: 5.1.  Identity_Messages
  contents:
  - "5.1.  Identity_Messages\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |                    LifeTime                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Security-Parameters-Index                   |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |        Identity-Choice        |                               |\n   + +\
    \ + + + + + + + + + + + + + + +                               +\n   |        \
    \                                                       |\n   ~              \
    \          Identification                         ~\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                       Verification                          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Attribute-Choices ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                      ... Padding  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Initiator-Cookie  16 bytes.  Copied from the Value_Request.\n   Responder-Cookie\
    \  16 bytes.  Copied from the Value_Request.\n   Message          4 (Request)\
    \ or 7 (Response)\n   LifeTime         3 bytes.  The number of seconds remaining\
    \ before the\n                    indicated SPI expires.\n                   \
    \ When the SPI is zero, this field MUST be filled with\n                    a\
    \ random non-zero value.\n   Security-Parameters-Index (SPI)\n               \
    \     4 bytes.  The SPI to be used for incoming\n                    communications.\n\
    \                    When zero, indicates that no SPI is created in this\n   \
    \                 direction.\n   Identity-Choice  2 or more bytes.  An identity\
    \ attribute is selected\n                    from the list of Offered-Attributes\
    \ sent by the\n                    peer, and is used to calculate the Verification.\n\
    \                    The field may be any integral number of bytes in\n      \
    \              length, as indicated by its Length field.  It does\n          \
    \          not require any particular alignment.  The 16-bit\n               \
    \     alignment shown is for convenience in the\n                    illustration.\n\
    \   Identification   Variable Precision Integer, or alternative format\n     \
    \               indicated by the Identity-Choice.  See the \"Basic\n         \
    \           Attributes\" for details.\n                    The field may be any\
    \ integral number of bytes in\n                    length.  It does not require\
    \ any particular\n                    alignment.  The 32-bit alignment shown is\
    \ for\n                    convenience in the illustration.\n   Verification \
    \    Variable Precision Integer, or alternative format\n                    indicated\
    \ by the Identity-Choice.  The calculation\n                    of the value is\
    \ described in \"Identity\n                    Verification\".\n             \
    \       The field may be any integral number of bytes in\n                   \
    \ length.  It does not require any particular\n                    alignment.\
    \  The 32-bit alignment shown is for\n                    convenience in the illustration.\n\
    \   Attribute-Choices\n                    0 or more bytes.  When the SPI is non-zero,\
    \ a list\n                    of attributes selected from the list of Offered-\n\
    \                    Attributes supported by the peer.\n                    The\
    \ contents and usage of this list are further\n                    described in\
    \ \"Attribute Choices List\".  The end of\n                    the list is indicated\
    \ by the UDP Length after\n                    removing the Padding (UDP Length\
    \ - last Padding\n                    value).\n   Padding          8 to 255 bytes.\
    \  This field is filled up to at least\n                    a 128 byte boundary,\
    \ measured from the beginning of\n                    the message.  The number\
    \ of pad bytes are chosen\n                    randomly.\n                   \
    \ In addition, when a Privacy-Method indicated by the\n                    current\
    \ Scheme-Choice requires the plaintext to be a\n                    multiple of\
    \ some number of bytes (the block size of\n                    a block cipher),\
    \ this field is adjusted as necessary\n                    to the size required\
    \ by the algorithm.\n                    Self-Describing-Padding begins with the\
    \ value 1.\n                    Each byte contains the index of that byte.  Thus,\n\
    \                    the final pad byte indicates the number of pad bytes\n  \
    \                  to remove.  For example, when the unpadded message\n      \
    \              length is 120 bytes, the padding values might be 1,\n         \
    \           2, 3, 4, 5, 6, 7, and 8.\n   The portion of the message after the\
    \ SPI field is masked using the\n   Privacy-Method indicated by the current Scheme-Choice.\n\
    \   The fields following the SPI are opaque.  That is, the values are set\n  \
    \ prior to masking (and optional encryption), and examined only after\n   unmasking\
    \ (and optional decryption).\n"
- title: 5.2.  Attribute Choices List
  contents:
  - "5.2.  Attribute Choices List\n   This list specifies the attributes of the SPI.\
    \  The attribute formats\n   are specified in the \"Basic Attributes\".\n   The\
    \ list is composed of one or two sections: Authentication-\n   Attributes, and/or\
    \ Encapsulation-Attributes.\n   When sending from the SPI User to the SPI Owner,\
    \ the attributes are\n   processed in the order listed.  For example,\n      \"\
    ESP-Attributes\",\n      \"Deflate\" (Compression),\n      \"XOR\" (Encryption),\n\
    \      \"DES-CBC\" (Encryption),\n      \"XOR\" (Encryption),\n      \"AH-Attributes\"\
    ,\n      \"AH-Sequence\",\n      \"MD5-IPMAC\" (Authentication),\n   would result\
    \ in ESP with compression and triple encryption (inside),\n   and then AH authentication\
    \ with sequence numbers (outside) of the ESP\n   payload.\n   The SPI Owner will\
    \ naturally process the datagram in the reverse\n   order.\n   This ordering also\
    \ affects the order of key generation.  Both SPI\n   Owner and SPI User generate\
    \ the keys in the order listed.\n   Implementation Notes:\n      When choices\
    \ are made from the list of Offered-Attributes, it is\n      not required that\
    \ any Security Association include every kind of\n      offered attribute in any\
    \ single SPI, or that a separate SPI be\n      created for every offered attribute.\n\
    \      Some kinds of attributes may be included more than once in a\n      single\
    \ SPI.  The set of allowable combinations of attributes are\n      dependent on\
    \ implementation and operational policy.  Such\n      considerations are outside\
    \ the scope of this document.\n      The list may be divided into additional sections.\
    \  This can occur\n      only when both parties recognize the affected attributes.\n\
    \      The authentication, compression, encryption and identification\n      mechanisms\
    \ chosen, as well as the encapsulation modes (if any),\n      need not be the\
    \ same in both directions.\n"
- title: 5.3.  Shared-Secret
  contents:
  - "5.3.  Shared-Secret\n   A shared-secret is used in a number of calculations.\
    \  Regardless of\n   the internal representation of the shared-secret, when used\
    \ in\n   calculations it is in the same form as the Value part of a Variable\n\
    \   Precision Integer:\n    - most significant byte first.\n    - bits used are\
    \ right justified within byte boundaries.\n    - any unused bits are in the most\
    \ significant byte.\n    - unused bits are zero filled.\n   The shared-secret\
    \ does not include a Size field.\n"
- title: 5.4.  Identity Verification
  contents:
  - "5.4.  Identity Verification\n   These messages are authenticated using the Identity-Choice.\
    \  The\n   Verification value is calculated prior to masking (and optional\n \
    \  encryption), and verified after unmasking (and optional decryption).\n   The\
    \ Identity-Choice authentication function is supplied with two\n   input values:\n\
    \    - the sender (SPI Owner) verification-key,\n    - the data to be verified\
    \ (as a concatenated sequence of bytes).\n   The resulting output value is stored\
    \ in the Verification field.\n   The Identity-Choice verification data consists\
    \ of the following\n   concatenated values:\n    + the Initiator Cookie,\n   \
    \ + the Responder Cookie,\n    + the Message, LifeTime and SPI fields,\n    +\
    \ the Identity-Choice and Identification,\n    + the SPI User Identity Verification\
    \ (response only),\n    + the Attribute-Choices following the Verification field,\n\
    \    + the Padding,\n    + the SPI Owner TBV,\n    + the SPI Owner Exchange-Value,\n\
    \    + the SPI Owner Offered-Attributes,\n    + the SPI User TBV,\n    + the SPI\
    \ User Exchange-Value,\n    + the SPI User Offered-Attributes,\n    + the Responder\
    \ Offered-Schemes.\n   The TBV (Three Byte Value) consists of the Counter and\
    \ Scheme-Choice\n   fields from the Value_Request, or the Reserved field from\
    \ the\n   Value_Response, immediately preceding the associated Exchange-Value.\n\
    \   Note that the order of the Exchange-Value and Offered-Attributes\n   fields\
    \ is different in each direction, and the Identification and SPI\n   fields are\
    \ also likely to be different in each direction.  Note also\n   that the SPI User\
    \ Identity Verification (from the Identity_Request)\n   is present only in the\
    \ Identity_Response.\n   If the verification fails, the users are notified, and\
    \ a\n   Verification_Failure message is sent, without adding any SPI.  On\n  \
    \ success, normal operation begins with the authentication and/or\n   encryption\
    \ of user datagrams.\n   Implementation Notes:\n      This is distinct from any\
    \ authentication method specified for the\n      SPI.\n      The exact details\
    \ of the Identification and verification-key\n      included in the Verification\
    \ calculation are dependent on the\n      Identity-Choice, as described in the\
    \ \"Basic Attributes\".\n      Each party may wish to keep their own trusted databases,\
    \ such as\n      the Pretty Good Privacy (PGP) web of trust, and accept only those\n\
    \      identities found there.  Failure to find the Identification in\n      either\
    \ an internal or external database results in the same\n      Verification_Failure\
    \ message as failure of the verification\n      computation.\n      The Exchange-Value\
    \ data includes both the Size and Value fields.\n      The Offered-Attributes\
    \ and Attribute-Choices data includes the\n      Attribute, Length and Value fields.\n"
- title: 5.5.  Privacy-Key Computation
  contents:
  - "5.5.  Privacy-Key Computation\n   Identification Exchange messages are masked\
    \ using the Privacy-Method\n   indicated by the current Scheme-Choice.  Masking\
    \ begins with the next\n   field after the SPI, and continues to the end of the\
    \ data indicated\n   by the UDP Length, including the Padding.\n   The Scheme-Choice\
    \ specified Key-Generation-Function is used to create\n   a special privacy-key\
    \ for each message.  This function is calculated\n   over the following concatenated\
    \ values:\n    + the SPI Owner Exchange-Value,\n    + the SPI User Exchange-Value,\n\
    \    + the Initiator Cookie,\n    + the Responder Cookie,\n    + the Message,\
    \ LifeTime and SPI (or Reserved) fields,\n    + the computed shared-secret.\n\
    \   Since the order of the Exchange-Value fields is different in each\n   direction,\
    \ and the Message, LifeTime and SPI fields are also\n   different in each direction,\
    \ the resulting privacy-key will usually\n   be different in each direction.\n\
    \   When a larger number of keying-bits are needed than are available\n   from\
    \ one iteration of the specified Key-Generation-Function, more\n   keying-bits\
    \ are generated by duplicating the trailing shared-secret,\n   and recalculating\
    \ the function.  That is, the first iteration will\n   have one trailing copy\
    \ of the shared-secret, the second iteration\n   will have two trailing copies\
    \ of the shared-secret, and so forth.\n   Implementation Notes:\n      This is\
    \ distinct from any encryption method specified for the SPI.\n      The length\
    \ of the Padding, and other details, are dependent on the\n      Privacy-Method.\
    \  See the \"Basic Privacy-Method\" list for details.\n      To avoid keeping\
    \ the Exchange-Values in memory after the initial\n      verification, it is often\
    \ possible to pre-compute the function\n      over the initial bytes of the concatenated\
    \ data values for each\n      direction, and append the trailing copies of the\
    \ shared-secret.\n      The Exchange-Value data includes both the Size and Value\
    \ fields.\n"
- title: 5.6.  Session-Key Computation
  contents:
  - "5.6.  Session-Key Computation\n   Each SPI has one or more session-keys.  These\
    \ keys are generated\n   based on the attributes of the SPI.  See the \"Basic\
    \ Attributes\" for\n   details.\n   The Scheme-Choice specified Key-Generation-Function\
    \ is used to create\n   the SPI session-key for that particular attribute.  This\
    \ function is\n   calculated over the following concatenated values:\n    + the\
    \ Initiator Cookie,\n    + the Responder Cookie,\n    + the SPI Owner generation-key,\n\
    \    + the SPI User generation-key,\n    + the message Verification field,\n \
    \   + the computed shared-secret.\n   Since the order of the generation-keys is\
    \ different in each\n   direction, and the Verification field is also likely to\
    \ be different\n   in each direction, the resulting session-key will usually be\n\
    \   different in each direction.\n   When a larger number of keying-bits are needed\
    \ than are available\n   from one iteration of the specified Key-Generation-Function,\
    \ more\n   keying-bits are generated by duplicating the trailing shared-secret,\n\
    \   and recalculating the function.  That is, the first iteration will\n   have\
    \ one trailing copy of the shared-secret, the second iteration\n   will have two\
    \ trailing copies of the shared-secret, and so forth.\n   Implementation Notes:\n\
    \      This is distinct from any privacy-key generated for the Photuris\n    \
    \  exchange.  Different initialization data is used, and iterations\n      are\
    \ maintained separately.\n      The exact details of the Verification field and\
    \ generation-keys\n      that are included in the session-key calculation are\
    \ dependent on\n      the Identity-Choices, as described in the \"Basic Attributes\"\
    .\n      To avoid keeping the generation-keys in memory after the initial\n  \
    \    verification, it is often possible to pre-compute the function\n      over\
    \ the initial bytes of the concatenated data values for each\n      direction,\
    \ and append the trailing copies of the shared-secret.\n      When both authentication\
    \ and encryption attributes are used for\n      the same SPI, there may be multiple\
    \ session-keys associated with\n      the same SPI.  These session-keys are generated\
    \ in the order of\n      the Attribute-Choices list.\n"
- title: 6.  SPI Messages
  contents:
  - "6.  SPI Messages\n   SPI User                             SPI Owner\n   ========\
    \                             =========\n   SPI_Needed                     ->\n\
    \      list SPI attribute(s)\n      make validity key\n      authenticate\n  \
    \    make privacy key(s)\n      mask/encrypt message\n                       \
    \            <-   SPI_Update\n                                           make\
    \ SPI\n                                           pick SPI attribute(s)\n    \
    \                                       make SPI session-key(s)\n            \
    \                               make validity key\n                          \
    \                 authenticate\n                                           make\
    \ privacy key(s)\n                                           mask/encrypt message\n\
    \   The exchange of messages is not related to the Initiator and\n   Responder.\
    \  Instead, either party may send one of these messages at\n   any time.  The\
    \ messages are easily distinguished by the parties.\n"
- title: 6.0.1.  Send SPI_Needed
  contents:
  - "6.0.1.  Send SPI_Needed\n   At any time after completion of the Identification\
    \ Exchange, either\n   party can send SPI_Needed.  This message is sent when a\
    \ prospective\n   SPI User needs particular attributes for a datagram (such as\n\
    \   confidentiality), and no current SPI has those attributes.\n   The prospective\
    \ SPI User selects from the intersection of attributes\n   that both parties have\
    \ previously offered, calculates the\n   Verification, and masks the message using\
    \ the Privacy-Method\n   indicated by the current Scheme-Choice.\n"
- title: 6.0.2.  Receive SPI_Needed
  contents:
  - "6.0.2.  Receive SPI_Needed\n   The potential SPI Owner validates the pair of\
    \ Cookies, the Padding,\n   the Verification, and the Attributes-Needed.\n   -\
    \  When an invalid/expired cookie is detected, a Bad_Cookie message\n      is\
    \ sent.\n   -  When too many SPI values are already in use for this particular\n\
    \      peer, or some other resource limit is reached, a Resource_Limit\n     \
    \ message is sent.\n   -  After unmasking, when invalid Padding is detected, the\
    \ variable\n      length Attributes-Needed do not match the UDP Length, or an\n\
    \      attribute was not in the Offered-Attributes, the message is\n      silently\
    \ discarded.\n   -  When the message verification fails, a Verification_Failure\n\
    \      message is sent.\n   -  Whenever such a problem is detected, the SPI is\
    \ not established;\n      the implementation SHOULD log the occurance, and notify\
    \ an\n      operator as appropriate.\n   When the message is valid, the party\
    \ SHOULD send SPI_Update with the\n   necessary attributes.\n   If an existing\
    \ SPI has those attributes, that SPI is returned in the\n   SPI_Update with the\
    \ remaining SPILT.\n"
- title: 6.0.3.  Send SPI_Update
  contents:
  - "6.0.3.  Send SPI_Update\n   At any time after completion of the Identification\
    \ Exchange, either\n   party can send SPI_Update.  This message has effect in\
    \ only one\n   direction, from the SPI Owner to the SPI User.\n   The SPI Owner\
    \ chooses the SPI and SPILT, a set of Attributes for the\n   SPI, calculates the\
    \ Verification, and masks the message using the\n   Privacy-Method indicated by\
    \ the current Scheme-Choice.\n"
- title: 6.0.4.  Receive SPI_Update
  contents:
  - "6.0.4.  Receive SPI_Update\n   The prospective SPI User validates the pair of\
    \ Cookies, the Padding,\n   the Verification, and the Attributes-Needed.\n   -\
    \  When an invalid/expired cookie is detected, a Bad_Cookie message\n      is\
    \ sent.\n   -  After unmasking, when invalid Padding is detected, the variable\n\
    \      length Attribute-Choices do not match the UDP Length, an attribute\n  \
    \    was not in the Offered-Attributes, or the message modifies an\n      existing\
    \ SPI, the message is silently discarded.\n   -  When the message verification\
    \ fails, a Verification_Failure\n      message is sent.\n   -  Whenever such a\
    \ problem is detected, the SPI is not established;\n      the implementation SHOULD\
    \ log the occurance, and notify an\n      operator as appropriate.\n   When the\
    \ message is valid, further actions are dependent on the value\n   of the LifeTime\
    \ field, as described later.\n"
- title: 6.0.5.  Automated SPI_Updates
  contents:
  - "6.0.5.  Automated SPI_Updates\n   Each SPI requires replacement under several\
    \ circumstances:\n   -  the volume of data processed (inhibiting probability\n\
    \      cryptanalysis),\n   -  exhaustion of available anti-replay Sequence Numbers,\n\
    \   -  and expiration of the LifeTime.\n   In general, a determination is made\
    \ upon receipt of a datagram.  If\n   the transform specific processing finds\
    \ that refreshment is needed,\n   an automated SPI_Update is triggered.\n   In\
    \ addition, automated SPI_Updates allow rapid SPI refreshment for\n   high bandwidth\
    \ applications in a high delay environment.  The update\n   messages flow in the\
    \ opposite direction from the primary traffic,\n   conserving bandwidth and avoiding\
    \ service interruption.\n   When creating each SPI, the implementation MAY optionally\
    \ set an\n   Update TimeOut (UTO); by default, to half the value of the LifeTime\n\
    \   (SPILT/2).  This time is highly dynamic, and adjustable to provide an\n  \
    \ automated SPI_Update long before transform specific processing.  If\n   no new\
    \ Photuris exchange occurs within the time limit, and the\n   current exchange\
    \ state has not expired, an automated SPI_Update is\n   sent.\n"
- title: 6.1.  SPI_Needed
  contents:
  - "6.1.  SPI_Needed\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |                  Reserved-LT                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Reserved-SPI                          |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |                                                               |\n   ~  \
    \                       Verification                          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Attributes-Needed ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                      ... Padding  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Initiator-Cookie  16 bytes.  Copied from the Value_Request.\n   Responder-Cookie\
    \  16 bytes.  Copied from the Value_Request.\n   Message          8\n   Reserved-LT\
    \      3 bytes.  For future use; MUST be filled with a\n                    random\
    \ non-zero value when transmitted, and MUST be\n                    ignored when\
    \ received.\n   Reserved-SPI     4 bytes.  For future use; MUST be set to zero\
    \ when\n                    transmitted, and MUST be ignored when received.\n\
    \   Verification     Variable Precision Integer, or other format\n           \
    \         indicated by the current Scheme-Choice.  The\n                    calculation\
    \ of the value is described in \"Validity\n                    Verification\"\
    .\n                    The field may be any integral number of bytes in\n    \
    \                length.  It does not require any particular\n               \
    \     alignment.  The 32-bit alignment shown is for\n                    convenience\
    \ in the illustration.\n   Attributes-Needed\n                    4 or more bytes.\
    \  A list of two or more attributes,\n                    selected from the list\
    \ of Offered-Attributes\n                    supported by the peer.\n        \
    \            The contents and usage of this list are as\n                    previously\
    \ described in \"Attribute Choices List\".\n                    The end of the\
    \ list is indicated by the UDP Length\n                    after removing the\
    \ Padding (UDP Length - last\n                    Padding value).\n   Padding\
    \          8 or more bytes.  The message is padded in the same\n             \
    \       fashion specified for Identification Exchange\n                    messages.\n\
    \   The portion of the message after the SPI field is masked using the\n   Privacy-Method\
    \ indicated by the current Scheme-Choice.\n   The fields following the SPI are\
    \ opaque.  That is, the values are set\n   prior to masking (and optional encryption),\
    \ and examined only after\n   unmasking (and optional decryption).\n"
- title: 6.2.  SPI_Update
  contents:
  - "6.2.  SPI_Update\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |                    LifeTime                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Security-Parameters-Index                   |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |                                                               |\n   ~  \
    \                       Verification                          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Attribute-Choices ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                      ... Padding  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Initiator-Cookie  16 bytes.  Copied from the Value_Request.\n   Responder-Cookie\
    \  16 bytes.  Copied from the Value_Request.\n   Message          9\n   LifeTime\
    \         3 bytes.  The number of seconds remaining before the\n             \
    \       indicated SPI expires.  The value zero indicates\n                   \
    \ deletion of the indicated SPI.\n   Security-Parameters-Index (SPI)\n       \
    \             4 bytes.  The SPI to be used for incoming\n                    communications.\n\
    \                    This may be a new SPI value (for creation), or an\n     \
    \               existing SPI value (for deletion).  The value zero\n         \
    \           indicates special processing.\n   Verification     Variable Precision\
    \ Integer, or other format\n                    indicated by the current Scheme-Choice.\
    \  The\n                    calculation of the value is described in \"Validity\n\
    \                    Verification\".\n                    The field may be any\
    \ integral number of bytes in\n                    length.  It does not require\
    \ any particular\n                    alignment.  The 32-bit alignment shown is\
    \ for\n                    convenience in the illustration.\n   Attribute-Choices\n\
    \                    0 or more bytes.  When the SPI and SPILT are non-\n     \
    \               zero, a list of attributes selected from the list of\n       \
    \             Offered-Attributes supported by the peer.\n                    The\
    \ contents and usage of this list are as\n                    previously described\
    \ in \"Attribute Choices List\".\n                    The end of the list is indicated\
    \ by the UDP Length\n                    after removing the Padding (UDP Length\
    \ - last\n                    Padding value).\n   Padding          8 or more bytes.\
    \  The message is padded in the same\n                    fashion specified for\
    \ Identification Exchange\n                    messages.\n   The portion of the\
    \ message after the SPI field is masked using the\n   Privacy-Method indicated\
    \ by the current Scheme-Choice.\n   The fields following the SPI are opaque. \
    \ That is, the values are set\n   prior to masking (and optional encryption),\
    \ and examined only after\n   unmasking (and optional decryption).\n"
- title: 6.2.1.  Creation
  contents:
  - "6.2.1.  Creation\n   When the LifeTime is non-zero, and the SPI is also non-zero,\
    \ the\n   SPI_Update can be used to create a new SPI.  When the SPI is zero,\n\
    \   the SPI_Update is silently discarded.\n   The new session-keys are calculated\
    \ in the same fashion as the\n   Identity_Messages.  Since the SPI value is always\
    \ different than any\n   previous SPI during the Exchange LifeTime of the shared-secret,\
    \ the\n   resulting session-keys will necessarily be different from all others\n\
    \   used in the same direction.\n   No retransmission timer is necessary.  Success\
    \ is indicated by the\n   peer use of the new SPI.\n   Should all creation attempts\
    \ fail, eventually the peer will find that\n   all existing SPIs have expired,\
    \ and will begin the Photuris exchange\n   again by sending a new Cookie_Request.\
    \  When appropriate, this\n   Cookie_Request MAY include a Responder-Cookie to\
    \ retain previous\n   party pairings.\n"
- title: 6.2.2.  Deletion
  contents:
  - "6.2.2.  Deletion\n   When the LifeTime is zero, the SPI_Update can be used to\
    \ delete a\n   single existing SPI.  When the SPI is also zero, the SPI_Update\
    \ will\n   delete all existing SPIs related to this Security Association, and\n\
    \   mark the Photuris exchange state as expired.  This is especially\n   useful\
    \ when the application that needed them terminates.\n   No retransmission timer\
    \ is necessary.  This message is advisory, to\n   reduce the number of ICMP Security\
    \ Failures messages.\n   Should any deletion attempts fail, the peer will learn\
    \ that the\n   deleted SPIs are invalid through the normal ICMP Security Failures\n\
    \   messages, and will initiate a Photuris exchange by sending a new\n   Cookie_Request.\n"
- title: 6.2.3.  Modification
  contents:
  - "6.2.3.  Modification\n   The SPI_Update cannot be used to modify existing SPIs,\
    \ such as\n   lengthen an existing SPI LifeTime, resurrect an expired SPI, or\n\
    \   add/remove an Attribute-Choice.\n   On receipt, such an otherwise valid message\
    \ is silently discarded.\n"
- title: 6.3.  Validity Verification
  contents:
  - "6.3.  Validity Verification\n   These messages are authenticated using the Validity-Method\
    \ indicated\n   by the current Scheme-Choice.  The Verification value is calculated\n\
    \   prior to masking (and optional encryption), and verified after\n   unmasking\
    \ (and optional decryption).\n   The Validity-Method authentication function is\
    \ supplied with two\n   input values:\n    - the sender (SPI Owner) verification-key,\n\
    \    - the data to be verified (as a concatenated sequence of bytes).\n   The\
    \ resulting output value is stored in the Verification field.\n   The Validity-Method\
    \ verification data consists of the following\n   concatenated values:\n    +\
    \ the Initiator Cookie,\n    + the Responder Cookie,\n    + the Message, LifeTime\
    \ and SPI (or Reserved) fields,\n    + the SPI Owner Identity Verification,\n\
    \    + the SPI User Identity Verification,\n    + the Attribute-Choices following\
    \ the Verification field,\n    + the Padding.\n   Note that the order of the Identity\
    \ Verification fields (from the\n   Identity_Messages) is different in each direction,\
    \ and the Message,\n   LifeTime and SPI fields are also likely to be different\
    \ in each\n   direction.\n   If the verification fails, the users are notified,\
    \ and a\n   Verification_Failure message is sent, without adding or deleting any\n\
    \   SPIs.  On success, normal operation begins with the authentication\n   and/or\
    \ encryption of user datagrams.\n   Implementation Notes:\n      This is distinct\
    \ from any authentication method specified for the\n      SPI.\n      The Identity\
    \ Verification data includes both the Size and Value\n      fields.  The Attribute-Choices\
    \ data includes the Attribute, Length\n      and Value fields.\n"
- title: 7.  Error Messages
  contents:
  - "7.  Error Messages\n   These messages are issued in response to Photuris state\
    \ loss or other\n   problems.  A message has effect in only one direction.  No\n\
    \   retransmission timer is necessary.\n   These messages are not masked.\n  \
    \ The receiver checks the Cookies for validity.  Special care MUST be\n   taken\
    \ that the Cookie pair in the Error Message actually match a pair\n   currently\
    \ in use, and that the protocol is currently in a state where\n   such an Error\
    \ Message might be expected.  Otherwise, these messages\n   could provide an opportunity\
    \ for a denial of service attack.  Invalid\n   messages are silently discarded.\n"
- title: 7.1.  Bad_Cookie
  contents:
  - "7.1.  Bad_Cookie\n   For the format of the 33 byte message, see \"Header Format\"\
    .  There\n   are no additional fields.\n   Initiator-Cookie  16 bytes.  Copied\
    \ from the offending message.\n   Responder-Cookie  16 bytes.  Copied from the\
    \ offending message.\n   Message          10\n   This error message is sent when\
    \ a Value_Request, Identity_Request,\n   SPI_Needed, or SPI_Update is received,\
    \ and the receiver specific\n   Cookie is invalid or the associated exchange state\
    \ has expired.\n   During the Photuris exchange, when this error message is received,\
    \ it\n   has no immediate effect on the operation of the protocol phases.\n  \
    \ Later, when Retransmissions have been exceeded, and this error\n   message has\
    \ been received, the Initiator SHOULD begin the Photuris\n   exchange again by\
    \ sending a new Cookie_Request with the Responder-\n   Cookie and Counter updated\
    \ appropriately.\n   When this error message is received in response to SPI_Needed,\
    \ the\n   exchange state SHOULD NOT be marked as expired, but the party SHOULD\n\
    \   initiate a Photuris exchange by sending a new Cookie_Request.\n   When this\
    \ error message is received in response to SPI_Update, the\n   exchange state\
    \ SHOULD NOT be marked as expired, and no further action\n   is taken.  A new\
    \ exchange will be initiated later when needed by the\n   peer to send authenticated\
    \ and/or encrypted data.\n   Existing SPIs are not deleted.  They expire normally,\
    \ and are purged\n   sometime later.\n"
- title: 7.2.  Resource_Limit
  contents:
  - "7.2.  Resource_Limit\n   For the format of the 34 byte message, see \"Cookie_Request\"\
    .  There\n   are no additional fields.\n   Initiator-Cookie  16 bytes.  Copied\
    \ from the offending message.\n   Responder-Cookie  16 bytes.  Copied from the\
    \ offending message.\n                    Special processing is applied to a Cookie_Request.\n\
    \                    When the offending message Responder-Cookie and\n       \
    \             Counter were both zero, and an existing exchange has\n         \
    \           not yet been purged, this field is replaced with the\n           \
    \         Responder-Cookie from the existing exchange.\n   Message          11\n\
    \   Counter          1 byte.  Copied from the offending message.\n           \
    \         When zero, the Responder-Cookie indicates the\n                    Initiator\
    \ of a previous exchange, or no previous\n                    exchange is specified.\n\
    \                    When non-zero, the Responder-Cookie indicates the\n     \
    \               Responder to a previous exchange.  This value is set\n       \
    \             to the Counter from the corresponding\n                    Cookie_Response.\n\
    \   This error message is sent when a Cookie_Request, Value_Request or\n   SPI_Needed\
    \ is received, and too many SPI values are already in use\n   for that peer, or\
    \ some other Photuris resource is unavailable.\n   During the Photuris exchange,\
    \ when this error message is received in\n   response to a Cookie_Request or Value_Request,\
    \ the implementation\n   SHOULD double the retransmission timeout (as usual) for\
    \ sending\n   another Cookie_Request or Value_Request.  Otherwise, it has no\n\
    \   immediate effect on the operation of the protocol phases.  Later,\n   when\
    \ Retransmissions have been exceeded, and this error message has\n   been received,\
    \ the Initiator SHOULD begin the Photuris exchange again\n   by sending a new\
    \ Cookie_Request with the Responder-Cookie and Counter\n   updated appropriately.\n\
    \   When this error message is received in response to SPI_Needed, the\n   implementation\
    \ SHOULD NOT send another SPI_Needed until one of the\n   existing SPIs associated\
    \ with this exchange is deleted or has\n   expired.\n"
- title: 7.3.  Verification_Failure
  contents:
  - "7.3.  Verification_Failure\n   For the format of the 33 byte message, see \"\
    Header Format\".  There\n   are no additional fields.\n   Initiator-Cookie  16\
    \ bytes.  Copied from the offending message.\n   Responder-Cookie  16 bytes. \
    \ Copied from the offending message.\n   Message          12\n   This error message\
    \ is sent when an Identity_Message, SPI_Needed or\n   SPI_Update is received,\
    \ and verification fails.\n   When this error message is received, the implementation\
    \ SHOULD log\n   the occurance, and notify an operator as appropriate.  However,\n\
    \   receipt has no effect on the operation of the protocol.\n"
- title: 7.4.  Message_Reject
  contents:
  - "7.4.  Message_Reject\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Initiator-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Responder-Cookie                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message    |  Bad-Message  |             Offset            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Initiator-Cookie  16 bytes.  Copied from the offending message.\n   Responder-Cookie\
    \  16 bytes.  Copied from the offending message.\n   Message          13\n   Bad-Message\
    \      1 byte.  Indicates the Message number of the\n                    offending\
    \ message.\n   Offset           2 bytes.  The number of bytes from the beginning\
    \ of\n                    the offending message where the unrecognized field\n\
    \                    starts.  The minimum value is 32.\n   This error message\
    \ is sent when an optional Message type is received\n   that is not supported,\
    \ or an optional format of a supported Message\n   is not recognized.\n   When\
    \ this error message is received, the implementation SHOULD log\n   the occurance,\
    \ and notify an operator as appropriate.  However,\n   receipt has no effect on\
    \ the operation of the protocol.\n"
- title: 8.  Public Value Exchanges
  contents:
  - "8.  Public Value Exchanges\n   Photuris is based in principle on public-key cryptography,\n\
    \   specifically Diffie-Hellman key exchange.  Exchange of public D-H\n   Exchange-Values\
    \ based on private-secret values results in a mutual\n   shared-secret between\
    \ the parties.  This shared-secret can be used on\n   its own, or to generate\
    \ a series of session-keys for authentication\n   and encryption of subsequent\
    \ traffic.\n   This document assumes familiarity with the Diffie-Hellman public-key\n\
    \   algorithm.  A good description can be found in [Schneier95].\n"
- title: 8.1.  Modular Exponentiation Groups
  contents:
  - "8.1.  Modular Exponentiation Groups\n   The original Diffie-Hellman technique\
    \ [DH76] specified modular\n   exponentiation.  A public-value is generated using\
    \ a generator (g),\n   raised to a private-secret exponent (x), modulo a prime\
    \ (p):\n      (g**x) mod p.\n   When these public-values are exchanged between\
    \ parties, the parties\n   can calculate a shared-secret value between themselves:\n\
    \      (g**xy) mod p.\n   The generator (g) and modulus (p) are established by\
    \ the Scheme-\n   Choice (see the \"Basic Exchange-Schemes\" for details).  They\
    \ are\n   offered in the Cookie_Response, and one pair is chosen in the\n   Value_Request.\n\
    \   The private exponents (x) and (y) are kept secret by the parties.\n   Only\
    \ the public-value result of the modular exponentiation with (x)\n   or (y) is\
    \ sent as the Initiator and Responder Exchange-Value.\n   These public-values\
    \ are represented in single Variable Precision\n   Integers.  The Size of these\
    \ Exchange-Values will match the Size of\n   the modulus (p).\n"
- title: 8.2.  Moduli Selection
  contents:
  - "8.2.  Moduli Selection\n   Each implementation proposes one or more moduli in\
    \ its Offered-\n   Schemes.  Every implementation MUST support up to 1024-bit\
    \ moduli.\n   For any particular Photuris node, these moduli need not change for\n\
    \   significant periods of time; likely days or weeks.  A background\n   process\
    \ can periodically generate new moduli.\n      For 512-bit moduli, current estimates\
    \ would provide 64\n      (pessimistic) bit-equivalents of cryptographic strength.\n\
    \      For 1024-bit moduli, current estimates would range from 80\n      (pessimistic)\
    \ through 98 (optimistic) bit-equivalents of\n      cryptographic strength.\n\
    \   These estimates are used when choosing moduli that are appropriate\n   for\
    \ the desired Security Parameter attributes.\n"
- title: 8.2.1.  Bootstrap Moduli
  contents:
  - "8.2.1.  Bootstrap Moduli\n   Each implementation is likely to use a fixed modulus\
    \ during its\n   bootstrap, until it can generate another modulus in the background.\n\
    \   As the bootstrap modulus will be widely distributed, and reused\n   whenever\
    \ the machine reinitializes, it SHOULD be a \"safe\" prime (p =\n   2q+1) to provide\
    \ the greatest long-term protection.\n   Implementors are encouraged to generate\
    \ their own bootstrap moduli,\n   and to change bootstrap moduli in successive\
    \ implementation releases.\n"
- title: 8.2.2.  Learning Moduli
  contents:
  - "8.2.2.  Learning Moduli\n   As Photuris exchanges are initiated, new moduli will\
    \ be learned from\n   the Responder Offered-Schemes.  The Initiator MAY cache\
    \ these moduli\n   for its own use.\n   Before offering any learned modulus, the\
    \ implementation MUST perform\n   at least one iteration of probable primality\
    \ verification.  In this\n   fashion, many processors will perform verification\
    \ in parallel as\n   moduli are passed around.\n   When primality verification\
    \ failures are found, the failed moduli\n   SHOULD be retained for some (implementation\
    \ dependent) period of\n   time, to avoid re-learning and re-testing after subsequent\
    \ exchanges.\n"
- title: 8.3.  Generator Selection
  contents:
  - "8.3.  Generator Selection\n   The generator (g) should be chosen such that the\
    \ private-secret\n   exponents will generate all possible public-values, evenly\n\
    \   distributed throughout the range of the modulus (p), without cycling\n   through\
    \ a smaller subset.  Such a generator is called a \"primitive\n   root\" (which\
    \ is trivial to find when p is \"safe\").\n   Only one generator (2) is required\
    \ to be supported.\n   Implementation Notes:\n      One useful technique is to\
    \ select the generator, and then limit\n      the modulus selection sieve to primes\
    \ with that generator:\n         2   when p (mod 24) = 11.\n         3   when\
    \ p (mod 12) = 5.\n         5   when p (mod 10) = 3 or 7.\n      The required\
    \ generator (2) improves efficiency in multiplication\n      performance.  It\
    \ is usable even when it is not a primitive root,\n      as it still covers half\
    \ of the space of possible residues.\n"
- title: 8.4.  Exponent Selection
  contents:
  - "8.4.  Exponent Selection\n   Each implementation generates a separate random\
    \ private-secret\n   exponent for each different modulus.  Then, a D-H Exchange-Value\
    \ is\n   calculated for the given modulus, generator, and exponent.\n   This specification\
    \ recommends that the exponent length be at least\n   twice the desired cryptographic\
    \ strength of the longest session-key\n   needed by the strongest offered-attribute.\n\
    \   Based on the estimates in \"Moduli Selection\" (above):\n      For 512-bit\
    \ moduli, exponent lengths of 128 bits (or more) are\n      recommended.\n   \
    \   For 1024-bit moduli, exponent lengths of 160 to 256 bits (or more)\n     \
    \ are recommended.\n   Although the same exponent and Exchange-Value may be used\
    \ with\n   several parties whenever the same modulus and generator are used, the\n\
    \   exponent SHOULD be changed at random intervals.  A background process\n  \
    \ can periodically destroy the old values, generate a new random\n   private-secret\
    \ exponent, and recalculate the Exchange-Value.\n   Implementation Notes:\n  \
    \    The size of the exponent is entirely implementation dependent, is\n     \
    \ unknown to the other party, and can be easily changed.\n      Since these operations\
    \ involve several time-consuming modular\n      exponentiations, moving them to\
    \ the \"background\" substantially\n      improves the apparent execution speed\
    \ of the Photuris protocol.\n      It also reduces CPU loading sufficiently to\
    \ allow a single\n      public/private key-pair to be used in several closely\
    \ spaced\n      Photuris executions, when creating Security Associations with\n\
    \      several different nodes over a short period of time.\n      Other pre-computation\
    \ suggestions are described in [BGMW93, LL94,\n      Rooij94].\n"
- title: 8.5.  Defective Exchange Values
  contents:
  - "8.5.  Defective Exchange Values\n   Some exponents do not qualify as secret.\
    \  The exponent 0 will\n   generate the Exchange-Value 1, and the exponent 1 will\
    \ generate the\n   Exchange-Value g.  Small exponents will be easily visible and\
    \ SHOULD\n   be avoided where:\n      g**x < p.\n   Depending on the structure\
    \ of the moduli, certain exponents can be\n   used for sub-group confinement attacks.\
    \  For \"safe\" primes (p =\n   2q+1), these exponents are p-1 and (p-1)/2, which\
    \ will generate the\n   Exchange-Values 1 and p-1 respectively.\n   When an implementation\
    \ chooses a random exponent, the resulting\n   Exchange-Value is examined.  If\
    \ the Exchange-Value is represented in\n   less than half the number of significant\
    \ bits in the modulus, then a\n   new random exponent MUST be chosen.\n      For\
    \ 512-bit moduli, Exchange-Values of 2**256 or greater are\n      required.\n\
    \      For 1024-bit moduli, Exchange-Values of 2**512 or greater are\n      required.\n\
    \   In addition, if the resulting Exchange-Value is p-1, then a new\n   random\
    \ exponent MUST be chosen.\n   Upon receipt of an Exchange-Value that fails to\
    \ meet the\n   requirements, the Value Exchange message is silently discarded.\n\
    \   Implementation Notes:\n      Avoidance of small exponents can be assured by\
    \ setting at least\n      one bit in the most significant half of the exponent.\n"
- title: 9.  Basic Exchange-Schemes
  contents:
  - "9.  Basic Exchange-Schemes\n   Initial values are assigned as follows:\n   (0)\
    \   Reserved.\n   (1)   Reserved.\n   (2)   Implementation Required.  Any modulus\
    \ (p) with a recommended\n         generator (g) of 2.  When the Exchange-Scheme\
    \ Size is non-zero,\n         the modulus is contained in the Exchange-Scheme\
    \ Value field in\n         the list of Offered-Schemes.\n         An Exchange-Scheme\
    \ Size of zero is invalid.\n         Key-Generation-Function     \"MD5 Hash\"\n\
    \         Privacy-Method              \"Simple Masking\"\n         Validity-Method\
    \             \"MD5-IPMAC Check\"\n         This combination of features requires\
    \ a modulus with at least\n         64-bits of cryptographic strength.\n   (3)\
    \   Exchange-Schemes 3 to 255 are intended for future well-known\n         published\
    \ schemes.\n   (256)  Exchange-Schemes 256 to 32767 are intended for vendor-specific\n\
    \         unpublished schemes.  Implementors wishing a number MUST\n         request\
    \ the number from the authors.\n   (32768)\n         Exchange-Schemes 32768 to\
    \ 65535 are available for cooperating\n         parties to indicate private schemes,\
    \ regardless of vendor\n         implementation.  These numbers are not reserved,\
    \ and are\n         subject to duplication.  Other criteria, such as the IP Source\n\
    \         and Destination of the Cookie_Request, are used to\n         differentiate\
    \ the particular Exchange-Schemes available.\n"
- title: 10.  Basic Key-Generation-Function
  contents:
  - '10.  Basic Key-Generation-Function

    '
- title: 10.1.  MD5 Hash
  contents:
  - "10.1.  MD5 Hash\n   MD5 [RFC-1321] is used as a pseudo-random-function for generating\
    \ the\n   key(s).  The key(s) begin with the most significant bits of the hash.\n\
    \   MD5 is iterated as needed to generate the requisite length of key\n   material.\n\
    \   When an individual key does not use all 128-bits of the last hash,\n   any\
    \ remaining unused (least significant) bits of the last hash are\n   discarded.\
    \  When combined with other uses of key generation for the\n   same purpose, the\
    \ next key will begin with a new hash iteration.\n"
- title: 11.  Basic Privacy-Method
  contents:
  - '11.  Basic Privacy-Method

    '
- title: 11.1.  Simple Masking
  contents:
  - "11.1.  Simple Masking\n   As described in \"Privacy-Key Computation\", sufficient\
    \ privacy-key\n   material is generated to match the message length, beginning\
    \ with the\n   next field after the SPI, and including the Padding.  The message\
    \ is\n   masked by XOR with the privacy-key.\n"
- title: 12.  Basic Validity-Method
  contents:
  - '12.  Basic Validity-Method

    '
- title: 12.1.  MD5-IPMAC Check
  contents:
  - "12.1.  MD5-IPMAC Check\n   As described in \"Validity Verification\", the Verification\
    \ field value\n   is the MD5 [RFC-1321] hash over the concatenation of\n     \
    \ MD5( key, keyfill, data, datafill, key, md5fill )\n   where the key is the computed\
    \ verification-key.\n   The keyfill and datafill use the same pad-with-length\
    \ technique\n   defined for md5fill.  This padding and length is implicit, and\
    \ does\n   not appear in the datagram.\n   The resulting Verification field is\
    \ a 128-bit Variable Precision\n   Integer (18 bytes including Size).  When used\
    \ in calculations, the\n   Verification data includes both the Size and Value\
    \ fields.\n"
- title: 13.  Basic Attributes
  contents:
  - "13.  Basic Attributes\n   Implementors wishing a number MUST request the number\
    \ from the\n   authors.  Initial values are assigned as follows:\n     Use   \
    \ Type\n      -       0* padding\n      -       1* AH-Attributes\n      -    \
    \   2+ ESP-Attributes\n     AEI      5* MD5-IPMAC\n     AEIX   255+ Organizational\n\
    \     A      AH Attribute-Choice\n      E     ESP Attribute-Choice\n       I \
    \   Identity-Choice\n        X   dependent on list location\n         +  feature\
    \ must be recognized even when not supported\n         *  feature must be supported\
    \ (mandatory)\n   Other attributes are specified in companion documents.\n"
- title: 13.1.  Padding
  contents:
  - "13.1.  Padding\n   +-+-+-+-+-+-+-+-+\n   |   Attribute   |\n   +-+-+-+-+-+-+-+-+\n\
    \   Attribute        0\n   Each attribute may have value fields that are multiple\
    \ bytes.  To\n   facilitate processing efficiency, these fields are aligned on\n\
    \   integral modulo 8 byte (64-bit) boundaries.\n   Padding is accomplished by\
    \ insertion of 1 to 7 Attribute 0 padding\n   bytes before the attribute that\
    \ needs alignment.\n   No padding is used after the final attribute in a list.\n"
- title: 13.2.  AH-Attributes
  contents:
  - "13.2.  AH-Attributes\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   Attribute\
    \   |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Attribute    \
    \    1\n   Length           0\n   When a list of Attributes is specified, this\
    \ Attribute begins the\n   section of the list which applies to the Authentication\
    \ Header (AH).\n"
- title: 13.3.  ESP-Attributes
  contents:
  - "13.3.  ESP-Attributes\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Attribute   |    Length     |  PayloadType  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Attribute        2\n   Length           1\n   PayloadType      1 byte.  Indicates\
    \ the contents of the ESP Transform\n                    Data field, using the\
    \ IP Next Header (Protocol)\n                    value.  Up-to-date values of\
    \ the IP Next Header\n                    (Protocol) are specified in the most\
    \ recent\n                    \"Assigned Numbers\" [RFC-1700].\n             \
    \       For example, when encrypting an entire IP datagram,\n                \
    \    this field will contain the value 4, indicating IP-\n                   \
    \ in-IP encapsulation.\n   When a list of Attributes is specified, this Attribute\
    \ begins the\n   section of the list which applies to the Encapsulating Security\n\
    \   Payload (ESP).\n   When listed as an Offered-Attribute, the PayloadType is\
    \ set to 255.\n   When selected as an Attribute-Choice, the PayloadType is set\
    \ to the\n   actual value to be used.\n"
- title: 13.4.  MD5-IPMAC
  contents:
  - "13.4.  MD5-IPMAC\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   Attribute   |\
    \    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Attribute        5\n\
    \   Length           0\n"
- title: 13.4.1.  Symmetric Identification
  contents:
  - "13.4.1.  Symmetric Identification\n   When selected as an Identity-Choice, the\
    \ immediately following\n   Identification field contains an unstructured Variable\
    \ Precision\n   Integer.  Valid Identifications and symmetric secret-keys are\n\
    \   preconfigured by the parties.\n   There is no required format or content for\
    \ the Identification value.\n   The value may be a number or string of any kind.\
    \  See \"Use of\n   Identification and Secrets\" for details.\n   The symmetric\
    \ secret-key (as specified) is selected based on the\n   contents of the Identification\
    \ field.  All implementations MUST\n   support at least 62 bytes.  The selected\
    \ symmetric secret-key SHOULD\n   provide at least 64-bits of cryptographic strength.\n\
    \   As described in \"Identity Verification\", the Verification field value\n\
    \   is the MD5 [RFC-1321] hash over the concatenation of:\n      MD5( key, keyfill,\
    \ data, datafill, key, md5fill )\n   where the key is the computed verification-key.\n\
    \   The keyfill and datafill use the same pad-with-length technique\n   defined\
    \ for md5fill.  This padding and length is implicit, and does\n   not appear in\
    \ the datagram.\n   The resulting Verification field is a 128-bit Variable Precision\n\
    \   Integer (18 bytes including Size).  When used in calculations, the\n   Verification\
    \ data includes both the Size and Value fields.\n   For both \"Identity Verification\"\
    \ and \"Validity Verification\", the\n   verification-key is the MD5 [RFC-1321]\
    \ hash of the following\n   concatenated values:\n    + the symmetric secret-key,\n\
    \    + the computed shared-secret.\n   For \"Session-Key Computation\", the symmetric\
    \ secret-key is used\n   directly as the generation-key.\n   Regardless of the\
    \ internal representation of the symmetric secret-\n   key, when used in calculations\
    \ it is in the same form as the Value\n   part of a Variable Precision Integer:\n\
    \    - most significant byte first.\n    - bits used are right justified within\
    \ byte boundaries.\n    - any unused bits are in the most significant byte.\n\
    \    - unused bits are zero filled.\n   The symmetric secret-key does not include\
    \ a Size field.\n"
- title: 13.4.2.  Authentication
  contents:
  - "13.4.2.  Authentication\n   May be selected as an AH or ESP Attribute-Choice,\
    \ pursuant to [RFC-\n   1828] et sequitur.  The selected Exchange-Scheme SHOULD\
    \ provide at\n   least 64-bits of cryptographic strength.\n   As described in\
    \ \"Session-Key Computation\", the most significant 384-\n   bits (48 bytes) of\
    \ the Key-Generation-Function iterations are used\n   for the key.\n   Profile:\n\
    \      When negotiated with Photuris, the transform differs slightly from\n  \
    \    [RFC-1828].\n      The form of the authenticated message is:\n         MD5(\
    \ key, keyfill, datagram, datafill, key, md5fill )\n      where the key is the\
    \ SPI session-key.\n      The additional datafill protects against the (impractical)\
    \ attack\n      described in [PO96].  The keyfill and datafill use the same pad-\n\
    \      with-length technique defined for md5fill.  This padding and\n      length\
    \ is implicit, and does not appear in the datagram.\n"
- title: 13.5.  Organizational
  contents:
  - "13.5.  Organizational\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Attribute   |    Length     |              OUI\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          ...      |     Kind      |  Value(s) ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Attribute        255\n   Length           >= 4\n                    When the\
    \ Length is four, no Value(s) field is\n                    present.\n   OUI \
    \             3 bytes.  The vendor's Organizationally Unique\n               \
    \     Identifier, assigned by IEEE 802 or IANA (see [RFC-\n                  \
    \  1700] for contact details).  The bits within the\n                    byte\
    \ are in canonical order, and the most\n                    significant byte is\
    \ transmitted first.\n   Kind             1 byte.  Indicates a sub-type for the\
    \ OUI.  There is\n                    no standardization for this field.  Each\
    \ OUI\n                    implements its own values.\n   Value(s)         0 or\
    \ more bytes.  The details are implementation\n                    specific.\n\
    \   Some implementors might not need nor want to publish their\n   proprietary\
    \ algorithms and attributes.  This OUI mechanism is\n   available to specify these\
    \ without encumbering the authors with\n   proprietary number requests.\n"
- title: A.  Automaton
  contents:
  - "A.  Automaton\n   An example automaton is provided to illustrate the operation\
    \ of the\n   protocol.  It is incomplete and non-deterministic; many of the\n\
    \   Good/Bad semantic decisions are policy-based or too difficult to\n   represent\
    \ in tabular form.  Where conflicts appear between this\n   example and the text,\
    \ the text takes precedence.\n   The finite-state automaton is defined by events,\
    \ actions and state\n   transitions.  Events include reception of external commands\
    \ such as\n   expiration of a timer, and reception of datagrams from a peer.\n\
    \   Actions include the starting of timers and transmission of datagrams\n   to\
    \ the peer.\n   Events\n   DU13 = Communication Administratively Prohibited\n\
    \   SF0  = Bad SPI\n   SF4  = Need Authentication\n   SF5  = Need Authorization\n\
    \   WC   = Want Confidentiality\n   RCQ+ = Receive Cookie_Request (Good)\n   RCQ-\
    \ = Receive Cookie_Request (Bad)\n   RCR+ = Receive Cookie_Response (Good)\n \
    \  RCR- = Receive Cookie_Response (Bad)\n   RVQ+ = Receive Value_Request (Good)\n\
    \   RVQ- = Receive Value_Request (Bad)\n   RVR+ = Receive Value_Response (Good)\n\
    \   RVR- = Receive Value_Response (Bad)\n   RIQ+ = Receive Identity_Request (Good)\n\
    \   RIQ- = Receive Identity_Request (Bad)\n   RIR+ = Receive Identity_Response\
    \ (Good)\n   RIR- = Receive Identity_Response (Bad)\n   RUN+ = Receive SPI_Needed\
    \ (Good)\n   RUN- = Receive SPI_Needed (Bad)\n   RUM+ = Receive SPI_Update (Good)\n\
    \   RUM- = Receive SPI_Update (Bad)\n   RBC  = Receive Bad Cookie\n   RRL  = Receive\
    \ Resource Limit\n   RVF  = Receive Verification Failure\n   RMR  = Receive Message\
    \ Reject\n   TO+  = Timeout with counter > 0\n   TO-  = Timeout with counter expired\n\
    \   UTO  = Update TimeOut\n   XTO  = Exchange TimeOut\n   Actions\n   scq  = Send\
    \ Cookie_Request\n   scr  = Send Cookie_Response\n   svq  = Send Value_Request\n\
    \   svr  = Send Value_Response\n   siq  = Send Identity_Request\n   sir  = Send\
    \ Identity_Response\n   sum  = Send SPI_Update\n   se*  = Send error message (see\
    \ text)\n   sbc  = Send Bad Cookie\n   srl  = Send Resource Limit\n   svf  = Send\
    \ Verification Failure\n   brto = Backoff Retransmission TimeOut\n   buto = Backoff\
    \ Update TimeOut\n   rto  = Set Retransmission TimeOut\n   uto  = Set Update TimeOut\n\
    \   xto  = Set Exchange TimeOut\n   log  = log operator message\n"
- title: A.1.  State Transition Table
  contents:
  - "A.1.  State Transition Table\n   States are indicated horizontally, and events\
    \ are read vertically.\n   State transitions and actions are represented in the\
    \ form\n   action/new-state.  Multiple actions are separated by commas, and may\n\
    \   continue on succeeding lines as space requires; multiple actions may\n   be\
    \ implemented in any convenient order.  The state may be followed by\n   a letter,\
    \ which indicates an explanatory footnote.  The dash ('-')\n   indicates an illegal\
    \ transition.\n   Initiator\n         |    0         1         2         3   \
    \      4\n         | Initial    Cookie  CookieBad   Value    ValueBad\n   ------+--------------------------------------------------\n\
    \    DU13 |rto,scq/1 rto,scq/1 rto,scq/1     3         4\n    SF0  |rto,scq/1\
    \     1         2         3         4\n    SF4  |rto,scq/1     1         2   \
    \      3         4\n    SF5  |rto,scq/1     1         2         3         4\n\
    \    WC   |rto,scq/1     1         2         3         4\n         |\n    RCR+\
    \ |    -     rto,svq/3 rto,svq/3     3         4\n    RCR- |    0         1  \
    \       2         3         4\n    RVR+ |    -         -         -     rto,siq/5\
    \ rto,siq/5\n    RVR- |    0         1         2         3         4\n    RIR+\
    \ |    -         -         -         -         -\n    RIR- |    0         1  \
    \       2         3         4\n         |\n    RUN+ |    -         -         -\
    \         -         -\n    RUN- |  sbc/0     sbc/1     sbc/2     sbc/3     sbc/4\n\
    \    RUM+ |    -         -         -         -         -\n    RUM- |  sbc/0  \
    \   sbc/1     sbc/2     sbc/3     sbc/4\n         |\n    RBC  |    -         -\
    \         -         4         4\n    RRL  |    -       brto/2    brto/2    brto/4\
    \    brto/4\n    RVF  |    -         -         -         -         -\n    RMR\
    \  |    -         -         -         -         -\n         |\n     TO+ |    -\
    \       scq/1     scq/2     svq/3     svq/4\n     TO- |    -         0       scq/1\
    \       0       scq/1\n    UTO  |    -         -         -         -         -\n\
    \    XTO  |    -         0         0         0         0\n   Initiator\n     \
    \    |    5         6         8\n         |Identity IdentityBad  Update\n   ------+-----------------------------\n\
    \    DU13 |    5         6         8\n    SF0  |    5         6     rto,scq/1\n\
    \    SF4  |    5         6     rto,scq/1\n    SF5  |    5         6     rto,scq/1\n\
    \    WC   |    5         6       sun/8\n         |\n    RCR+ |    5         6\
    \         8\n    RCR- |    5         6         8\n    RVR+ |    5         6  \
    \       8\n    RVR- |    5         6         8\n    RIR+ |  uto/8     uto/8  \
    \     8\n    RIR- |  svf/5     svf/6       8\n         |\n    RUN+ |    -    \
    \     -       sum/8\n    RUN- |  sbc/5     sbc/6     se*/8\n    RUM+ |    -  \
    \       -         8\n    RUM- |  sbc/5     sbc/6     se*/8\n         |\n    RBC\
    \  |    6         6     rto,scq/1\n    RRL  |    5         6       buto/8\n  \
    \  RVF  |  log/5     log/6     log/8\n    RMR  |  log/5     log/6     log/8\n\
    \         |\n     TO+ |  sim/5     sim/6       -\n     TO- |    0       scq/1\
    \       -\n    UTO  |    -         -       sum/8\n    XTO  |    0         0  \
    \       0\n   Responder\n         |    0         7         8\n         | Initial\
    \    Ready     Update\n   ------+-----------------------------\n    WC   |   \
    \ -         7       sun/8\n         |\n    RCQ+ |  scr/0     scr/7     scr/8\n\
    \    RCQ- |  srl/0     srl/7     srl/8\n    RVQ+ |xto,svr/7   svr/7     svr/8\n\
    \    RVQ- |  sbc/0     sbc/7     sbc/8\n    RIQ+ |    -     uto,sir/8   sir/8\n\
    \    RIQ- |  sbc/0     se*/7     se*/8\n         |\n    RUN+ |    -         -\
    \       sum/8\n    RUN- |  sbc/0     sbc/7     se*/8\n    RUM+ |    -        \
    \ -         8\n    RUM- |  sbc/0     sbc/7     se*/8\n         |\n    RBC  | \
    \   -         7     rto,scq/1\n    RRL  |    -         -       buto/8\n    RVF\
    \  |    -         -       log/8\n    RMR  |    -         -       log/8\n     \
    \    |\n    UTO  |    -         -       sum/8\n    XTO  |    -         0     \
    \    0\n"
- title: A.2.  States
  contents:
  - "A.2.  States\n   Following is a more detailed description of each automaton state.\n\
    \   The \"Bad\" version of a state is to indicate that the Bad_Cookie or\n   Resource_Limit\
    \ message has been received.\n"
- title: A.2.1.  Initial
  contents:
  - "A.2.1.  Initial\n   The Initial state is fictional, in that there is no state\
    \ between the\n   parties.\n"
- title: A.2.2.  Cookie
  contents:
  - "A.2.2.  Cookie\n   In the Cookie state, the Initiator has sent a Cookie_Request,\
    \ and is\n   waiting for a Cookie_Response.  Both the Restart and Exchange timers\n\
    \   are running.\n   Note that the Responder has no Cookie state.\n"
- title: A.2.3.  Value
  contents:
  - "A.2.3.  Value\n   In the Value state, the Initiator has sent its Exchange-Value,\
    \ and is\n   waiting for an Identity_Message.  Both the Restart and Exchange\n\
    \   timers are running.\n"
- title: A.2.4.  Identity
  contents:
  - "A.2.4.  Identity\n   In the Identity state, the Initiator has sent an Identity_Request,\n\
    \   and is waiting for an Identity_Response in reply.  Both the Restart\n   and\
    \ Exchange timers are running.\n"
- title: A.2.5.  Ready
  contents:
  - "A.2.5.  Ready\n   In the Ready state, the Responder has sent its Exchange-Value,\
    \ and is\n   waiting for an Identity_Message.  The Exchange timer is running.\n"
- title: A.2.6.  Update
  contents:
  - "A.2.6.  Update\n   In the Update state, each party has concluded the Photuris\
    \ exchange,\n   and is unilaterally updating expiring SPIs until the Exchange\n\
    \   LifeTime expires.  Both the Update and Exchange timers are running.\n"
- title: B.  Use of Identification and Secrets
  contents:
  - "B.  Use of Identification and Secrets\n   Implementation of the base protocol\
    \ requires support for operator\n   configuration of participant identities and\
    \ associated symmetric\n   secret-keys.\n   The form of the Identification and\
    \ Secret fields is not constrained\n   to be a readable string.  In addition to\
    \ a simpler quoted string\n   configuration, an implementation MUST allow configuration\
    \ of an\n   arbitrary stream of bytes.\n"
- title: B.1.  Identification
  contents:
  - "B.1.  Identification\n   Typically, the Identification is a user name, a site\
    \ name, a Fully\n   Qualified Domain Name, or an email address which contains\
    \ a user name\n   and a domain name.  Examples include:\n      user\n      node.site.\n\
    \      user@node.site.\n      rcmd@node.site.\n      \"Mundane Name\" <user@node.site>\n\
    \   There is no requirement that the domain name match any of the\n   particular\
    \ IP addresses in use by the parties.\n"
- title: B.2.  Group Identity With Group Secret
  contents:
  - "B.2.  Group Identity With Group Secret\n   A simple configuration approach could\
    \ use a single Identity and\n   Secret, distributed to all the participants in\
    \ the trusted group.\n   This might be appropriate between routers under a single\n\
    \   administration comprising a Virtual Private Network over the\n   Internet.\n\
    \   Nota Bene:\n      The passwords used in these examples do not meet the \"\
    MD5-IPMAC\n      Symmetric Identification\" recommendation for at least 64-bits\
    \ of\n      cryptographic strength.\n   The administrator configures each router\
    \ with the same username and\n   password:\n      identity local \"Tiny VPN 1995\
    \ November\" \"abracadabra\"\n      identity remote \"Tiny VPN 1995 November\"\
    \ \"abracadabra\"\n   When the Initiator sends its Identity_Request, the SPI Owner\n\
    \   Identification field is \"Tiny VPN 1995 November\" and the SPI Owner\n   secret-key\
    \ is \"abracadabra\".\n   When the Responder sends its Identity_Response, the\
    \ SPI Owner\n   Identification field is \"Tiny VPN 1995 November\" and the SPI\
    \ Owner\n   secret-key is \"abracadabra\".  The SPI User Identification is \"\
    Tiny\n   VPN 1995 November\" (taken from the request), and the SPI User\n   secret-key\
    \ is \"abracadabra\".\n   Note that even in the face of implementations with very\
    \ poor random\n   number generation yielding the same random numbers for both\
    \ parties\n   at every step, and with this completely identical configuration,\
    \ the\n   addition of the SPI User Verification field in the response\n   calculation\
    \ is highly likely to produce a different Verification\n   value (see \"Identity\
    \ Verification\").  In turn, the different\n   Verification values affect the\
    \ calculation of SPI session-keys that\n   are highly likely to be different in\
    \ each direction (see \"Session-Key\n   Computation\").\n"
- title: B.3.  Multiple Identities With Group Secrets
  contents:
  - "B.3.  Multiple Identities With Group Secrets\n   A more robust configuration\
    \ approach could use a separate Identity\n   and Secret for each party, distributed\
    \ to the participants in the\n   trusted group.  This might be appropriate for\
    \ authenticated firewall\n   traversal.\n   An administrator has one or more networks,\
    \ and a number of mobile\n   users.  It is desirable to restrict access to authorized\
    \ external\n   users.  The example boundary router is 10.0.0.1.\n   The administrator\
    \ gives each user a different username and password,\n   together with a group\
    \ username and password for the router.\n   The administrator configures (in part):\n\
    \      identity local \"199511@router.site\" \"FalDaRah\"\n      identity remote\
    \ \"Happy_Wanderer@router.site\" \"FalDaRee\"\n   Each mobile user adds commands\
    \ to tunnel and authenticate.\n      route addprivate 10.0.0.0/8 tunnel 10.0.0.1\n\
    \      secure 10.0.0.1 authenticate-only\n      identity local \"Happy_Wanderer@router.site\"\
    \ \"FalDaRee\"\n      identity remote \"199511@router.site\" \"FalDaRah\"\n  \
    \    identity remote \"199512@router.site\" \"FalDaHaHaHaHaHaHa\"\n   When the\
    \ mobile Initiator sends its Identity_Request, the SPI Owner\n   Identification\
    \ field is \"Happy_Wanderer@router.site\" and the SPI\n   Owner secret-key is\
    \ \"FalDaRee\".\n   When the firewall Responder sends its Identity_Response, the\
    \ SPI\n   Owner Identification field is \"199511@router.site\" and the SPI Owner\n\
    \   secret-key is \"FalDaRah\".  The SPI User Identification field is\n   \"Happy_Wanderer@router.site\"\
    \ (taken from the request), and the SPI\n   User secret-key is \"FalDaRee\".\n\
    \   In this example, the mobile user is already prepared for a monthly\n   password\
    \ changeover, where the router might identify itself as\n   \"199512@router.site\"\
    .\n"
- title: B.4.  Multiple Identities With Multiple Secrets
  contents:
  - "B.4.  Multiple Identities With Multiple Secrets\n   Greater security might be\
    \ achieved through configuration of a pair of\n   secrets between each party.\
    \  As before, one secret is used for\n   initial contact to any member of the\
    \ group, but another secret is\n   used between specific parties.  Compromise\
    \ of one secret or pair of\n   secrets does not affect any other member of the\
    \ group.  This might be\n   appropriate between the routers forming a boundary\
    \ between\n   cooperating Virtual Private Networks that establish local policy\
    \ for\n   each VPN member access.\n   One administrator configures:\n      identity\
    \ local \"Apple\" \"all for one\"\n      identity local \"Apple-Baker\" \"Apple\
    \ to Baker\" \"Baker\"\n      identity remote \"Baker\" \"one for all\"\n    \
    \  identity remote \"Baker-Apple\" \"Baker to Apple\"\n   Another configures:\n\
    \      identity local \"Baker\" \"one for all\"\n      identity local \"Baker-Apple\"\
    \ \"Baker to Apple\" \"Apple\"\n      identity remote \"Apple\" \"all for one\"\
    \n      identity remote \"Apple-Baker\" \"Apple to Baker\"\n   When the Initiator\
    \ sends its Identity_Request, the SPI Owner\n   Identification field is \"Apple\"\
    \ and the SPI Owner secret-key is \"all\n   for one\".\n   When the Responder\
    \ sends its Identity_Response, finding that the\n   special pairing exists for\
    \ \"Apple\" (in this example, indicated by a\n   third field), the SPI Owner Identification\
    \ field is \"Baker-Apple\" and\n   the SPI Owner secret-key is \"Baker to Apple\"\
    .  The SPI User\n   Identification is \"Apple\" (taken from the request), and\
    \ the SPI User\n   secret-key is \"all for one\".\n"
- title: Operational Considerations
  contents:
  - "Operational Considerations\n   The specification provides only a few configurable\
    \ parameters, with\n   defaults that should satisfy most situations.\n   Retransmissions\n\
    \      Default: 3.\n   Initial Retransmission TimeOut (IRTO)\n      Default: 5\
    \ seconds.\n   Exchange TimeOut (ETO)\n      Default: 30 seconds.  Minimum: Retransmissions\
    \ * IRTO.\n   Exchange LifeTime (ELT)\n      Default: 30 minutes.  Minimum: 2\
    \ * ETO.\n   SPI LifeTime (SPILT)\n      Default: 5 minutes.  Minimum: 3 * ETO.\n\
    \   Each party configures a list of known identities and symmetric\n   secret-keys.\n\
    \   In addition, each party configures local policy that determines what\n   access\
    \ (if any) is granted to the holder of a particular identity.\n   For example,\
    \ the party might allow anonymous FTP, but prohibit\n   Telnet.  Such considerations\
    \ are outside the scope of this document.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Photuris was based on currently available tools,\
    \ by experienced\n   network protocol designers with an interest in cryptography,\
    \ rather\n   than by cryptographers with an interest in network protocols.  This\n\
    \   specification is intended to be readily implementable without\n   requiring\
    \ an extensive background in cryptology.\n   Therefore, only minimal background\
    \ cryptologic discussion and\n   rationale is included in this document.  Although\
    \ some review has\n   been provided by the general cryptologic community, it is\
    \ anticipated\n   that design decisions and tradeoffs will be thoroughly analysed\
    \ in\n   subsequent dissertations and debated for many years to come.\n   Cryptologic\
    \ details are reserved for separate documents that may be\n   more readily and\
    \ timely updated with new analysis.\n"
- title: History
  contents:
  - "History\n   The initial specification of Photuris, now called version 1 (December\n\
    \   1994 to March 1995), was based on a short list of design\n   requirements,\
    \ and simple experimental code by Phil Karn.  Only one\n   modular exponentiation\
    \ form was used, with a single byte index of\n   pre-specified group parameters.\
    \  The transform attributes were\n   selected during the public value exchange.\
    \  Party privacy was\n   protected in the identification signature exchange with\
    \ standard ESP\n   transforms.\n   Upon submission for review by the IP Security\
    \ Working Group, a large\n   number of features were demanded.  A mere 254 future\
    \ group choices\n   were not deemed enough; it was expanded to two bytes (and\
    \ renamed\n   schemes), and was expanded again to carry variable parameters. \
    \ The\n   transform attributes were made variable length to accomodate optional\n\
    \   parameters.  Every other possible parameter was made negotiable.\n   Some\
    \ participants were unable to switch modes on the UDP sockets to\n   use standard\
    \ ESP transforms for only some messages, and party privacy\n   was integrated\
    \ into the protocol.  The message headers were\n   reorganized, and selection\
    \ of transform attributes was delayed until\n   the identification exchange. \
    \ An additional update message phase was\n   added.\n   Version 2 (July 1995 to\
    \ December 1995) specification stability was\n   achieved in November 1995 by\
    \ moving most parameters into separate\n   documents for later discussion, and\
    \ leaving only a few mandatory\n   features in the base specification.  Within\
    \ a month, multiple\n   interoperable implementations were produced.\n   Unfortunately,\
    \ in a fit of demagoguery, the IP Security Working Group\n   decided in a straw\
    \ poll to remove party privacy protection, and the\n   Working Group chair terminated\
    \ the meeting without allowing further\n   discussion.  Because the identification\
    \ exchange messages required\n   privacy to function correctly, the messages were\
    \ reorganized again.\n   Party privacy and other optional schemes were split into\
    \ a separate\n   document.\n   The implementors established a separate discussion\
    \ group.  Version 3\n   (April 1996 to June 1997) enjoyed a long period of specification\n\
    \   stability and multiple implementations on half a dozen platforms.\n   Meanwhile,\
    \ the IP Security Working Group has developed a competing\n   specification with\
    \ large numbers of negotiable parameters.  Also, the\n   PPP Extensions Working\
    \ Group has deployed link security transforms.\n   Version 4 (July 1997 onward)\
    \ attempts to maintain a semblance of\n   interface compatibility with these other\
    \ efforts.  Minor changes are\n   specified in transform padding format and key\
    \ generation.  More than\n   one value is permitted per scheme, giving greater\
    \ latitude in choice\n   for future extensions.  The opportunity is taken to return\
    \ party\n   privacy to the base document, and make small semantic changes in\n\
    \   automated updates and error recovery.  All ESP transform attributes\n   are\
    \ moved to separate documents, to (hopefully) avoid future\n   incompatible changes\
    \ to the base document.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n      Thou shalt make no law restricting the size of integers\
    \ that may\n      be multiplied together, nor the number of times that an integer\n\
    \      may be multiplied by itself, nor the modulus by which an integer\n    \
    \  may be reduced.  [Prime Commandment]\n   Phil Karn was principally responsible\
    \ for the design of the protocol\n   phases, particularly the \"cookie\" anti-clogging\
    \ defense, developed\n   the initial testing implementation, and provided much\
    \ of the design\n   rationale text (now removed to a separate document).\n   William\
    \ Simpson was responsible for the packet formats and\n   attributes, additional\
    \ message types, editing and formatting.  All\n   such mistakes are his responsibility.\n\
    \   This protocol was later discovered to have many elements in common\n   with\
    \ the Station-To-Station authentication protocol [DOW92].\n   Angelos Keromytis\
    \ developed the first completely independent\n   implementation (circa October\
    \ 1995).  Also, he suggested the cookie\n   exchange rate limitation counter.\n\
    \   Paul C van Oorschot suggested signing both the public exponents and\n   the\
    \ shared-secret, to provide an authentication-only version of\n   identity verification.\
    \  Also, he provided text regarding moduli,\n   generator, and exponent selection\
    \ (now removed to a separate\n   document).\n   Hilarie Orman suggested adding\
    \ secret \"nonces\" to session-key\n   generation for asymmetric public/private-key\
    \ identity methods (now\n   removed to a separate document), and provided extensive\
    \ review of the\n   protocol details.\n   Bart Preneel and Paul C van Oorschot\
    \ in [PO96] recommended padding\n   between the data and trailing key when hashing\
    \ for authentication.\n   Niels Provos developed another independent implementation\
    \ (circa May\n   1997), ported to AIX, Linux, OpenBSD, and Solaris.  Also, he\
    \ made\n   suggestions regarding automated update, and listing multiple moduli\n\
    \   per scheme.\n   Bill Sommerfeld suggested including the authentication symmetric\n\
    \   secret-keys in the session-key generation, and using the Cookie\n   values\
    \ on successive exchanges to provide bi-directional user-\n   oriented keying\
    \ (now removed to a separate document).\n   Oliver Spatscheck developed the second\
    \ independent implementation\n   (circa December 1995) for the Xkernel.\n   International\
    \ interoperability testing between early implementors\n   provided the impetus\
    \ for many of the implementation notes herein, and\n   numerous refinements in\
    \ the semantics of the protocol messages.\n   Randall Atkinson, Steven Bellovin,\
    \ Wataru Hamada, James Hughes, Brian\n   LaMacchia, Cheryl Madson, Lewis McCarthy,\
    \ Perry Metzger, Bob Quinn,\n   Ron Rivest, Rich Schroeppel, and Norman Shulman\
    \ provided useful\n   critiques of earlier versions of this document.\n   Special\
    \ thanks to the Center for Information Technology Integration\n   (CITI) for providing\
    \ computing resources.\n"
- title: References
  contents:
  - "References\n   [BGMW93]    E. Brickell, D. Gordon, K. McCurley, and D. Wilson,\
    \ \"Fast\n               Exponentiation with Precomputation (Extended Abstract)\"\
    ,\n               Advances in Cryptology -- Eurocrypt '92, Lecture Notes in\n\
    \               Computer Science 658 (1993), Springer-Verlag, 200-207.\n     \
    \          Also U.S. Patent #5,299,262, E.F. Brickell, D.M. Gordon,\n        \
    \       K.S. McCurley, \"Method for exponentiating in\n               cryptographic\
    \ systems\", 29 Mar 1994.\n   [DH76]      Diffie, W., and Hellman, H.E., \"New\
    \ Directions in\n               Cryptography\", IEEE Transactions on Information\
    \ Theory, v\n               IT-22 n 6 pp 644-654, November 1976.\n   [DOW92] \
    \    Whitfield Diffie, Paul C van Oorshot, and Michael J\n               Wiener,\
    \ \"Authentication and Authenticated Key Exchanges\",\n               Designs,\
    \ Codes and Cryptography, v 2 pp 107-125, Kluwer\n               Academic Publishers,\
    \ 1992.\n   [Firefly]   \"Photuris\" is the latin name for the firefly.  \"Firefly\"\
    \n               is in turn the name for the USA National Security\n         \
    \      Administration's (classified) key exchange protocol for\n             \
    \  the STU-III secure telephone.  Informed speculation has\n               it\
    \ that Firefly is based on very similar design\n               principles.\n \
    \  [LL94]      Lim, C.H., Lee, P.J., \"More flexible exponentiation with\n   \
    \            precomputation\", Advances in Cryptology -- Crypto '94,\n       \
    \        Lecture Notes in Computer Science 839 (1994), Springer-\n           \
    \    Verlag, pages 95-107.\n   [Prime Commandment]\n               A derivation\
    \ of an apocryphal quote from the usenet list\n               sci.crypt.\n   [PO96]\
    \      Bart Preneel, and Paul C van Oorshot, \"On the security of\n          \
    \     two MAC algorithms\", Advances in Cryptology -- Eurocrypt\n            \
    \   '96, Lecture Notes in Computer Science 1070 (May 1996),\n               Springer-Verlag,\
    \ pages 19-32.\n   [RFC-768]   Postel, J., \"User Datagram Protocol\", STD 6,\n\
    \               USC/Information Sciences Institute, August 1980.\n   [RFC-791]\
    \   Postel, J., \"Internet Protocol\", STD 5, USC/Information\n              \
    \ Sciences Institute, September 1981.\n   [RFC-1321]  Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", MIT\n               Laboratory for Computer Science, April 1992.\n\
    \   [RFC-1700]  Reynolds, J., and Postel, J., \"Assigned Numbers\", STD 2,\n \
    \              USC/Information Sciences Institute, October 1994.\n   [RFC-1812]\
    \  Baker, F., Editor, \"Requirements for IP Version 4\n               Routers\"\
    , Cisco Systems, June 1995.\n   [RFC-1828]  Metzger, P., Simpson, W., \"IP Authentication\
    \ using Keyed\n               MD5\", July 1995.\n   [RFC-1829]  Karn, P., Metzger,\
    \ P., Simpson, W., \"The ESP DES-CBC\n               Transform\", July 1995.\n\
    \   [RFC-2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, Harvard University, March\n           \
    \    1997.\n   [RFC-2521]  Karn, P., and Simpson, W., \"ICMP Security Failures\n\
    \               Messages\", March 1999.\n   [Rooij94]   P. de Rooij, \"Efficient\
    \ exponentiation using\n               precomputation and vector addition chains\"\
    , Advances in\n               Cryptology -- Eurocrypt '94, Lecture Notes in Computer\n\
    \               Science, Springer-Verlag, pages 403-415.\n   [Schneier95]\n  \
    \             Schneier, B., \"Applied Cryptography Second Edition\", John\n  \
    \             Wiley & Sons, New York, NY, 1995.  ISBN 0-471-12845-7.\n"
- title: Contacts
  contents:
  - "Contacts\n   Comments about this document should be discussed on the\n   photuris@adk.gr\
    \ mailing list.\n   Questions about this document can also be directed to:\n \
    \     Phil Karn\n      Qualcomm, Inc.\n      6455 Lusk Blvd.\n      San Diego,\
    \ California  92121-2779\n          karn@qualcomm.com\n          karn@unix.ka9q.ampr.org\
    \ (preferred)\n      William Allen Simpson\n      DayDreamer\n      Computer Systems\
    \ Consulting Services\n      1384 Fontaine\n      Madison Heights, Michigan  48071\n\
    \          wsimpson@UMich.edu\n          wsimpson@GreenDragon.com (preferred)\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  Copyright\
    \ (C) Philip Karn\n   and William Allen Simpson (1994-1999).  All Rights Reserved.\n\
    \   This document and translations of it may be copied and furnished to\n   others,\
    \ and derivative works that comment on or otherwise explain it\n   or assist in\
    \ its implementation may be prepared, copied, published\n   and distributed, in\
    \ whole or in part, without restriction of any\n   kind, provided that the above\
    \ copyright notice and this paragraph are\n   included on all such copies and\
    \ derivative works.  However, this\n   document itself may not be modified in\
    \ any way, such as by removing\n   the copyright notice or references to the Internet\
    \ Society or other\n   Internet organizations, except as needed for the purpose\
    \ of\n   developing Internet standards (in which case the procedures for\n   copyrights\
    \ defined in the Internet Standards process must be\n   followed), or as required\
    \ to translate it into languages other than\n   English.\n   The limited permissions\
    \ granted above are perpetual and will not be\n   revoked by the Internet Society\
    \ or its successors or assigns.\n   This document and the information contained\
    \ herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE\
    \ INTERNET ENGINEERING\n   TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
    \ INCLUDING\n   (BUT NOT LIMITED TO) ANY WARRANTY THAT THE USE OF THE INFORMATION\n\
    \   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
