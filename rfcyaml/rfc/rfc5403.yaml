- contents:
  - '                          RPCSEC_GSS Version 2

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes version 2 of the RPCSEC_GSS protocol.\n
    \  Version 2 is the same as version 1 (specified in RFC 2203) except\n   that
    support for channel bindings has been added.  RPCSEC_GSS allows\n   remote procedure
    call (RPC) protocols to access the Generic Security\n   Services Application Programming
    Interface (GSS-API).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction and Motivation .....................................2\n
    \     1.1. Requirements Language ......................................3\n   2.
    Channel Bindings Explained ......................................3\n   3. The
    RPCSEC_GSSv2 Protocol .......................................4\n      3.1. Compatibility
    with RPCSEC_GSSv1 ............................4\n      3.2. New Version Number
    .........................................5\n      3.3. New Procedure - RPCSEC_GSS_BIND_CHANNEL
    ....................7\n      3.4. New Security Service - rpc_gss_svc_channel_prot
    ...........10\n   4. Version Negotiation ............................................11\n
    \  5. Native GSS Channel Bindings ....................................11\n   6.
    Operational Recommendation for Deployment ......................11\n   7. Implementation
    Notes ...........................................11\n   8. Acknowledgments ................................................11\n
    \  9. Security Considerations ........................................11\n   10.
    References ....................................................13\n      10.1.
    Normative References .....................................13\n      10.2. Informative
    References ...................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction and Motivation\n   This document describes RPCSEC_GSS version
    2 (RPCSEC_GSSv2).\n   RPCSEC_GSSv2 is the same as RPCSEC_GSS version 1 (RPCSEC_GSSv1)
    [1]\n   except that support for channel bindings [2] has been added.  The\n   primary
    motivation for channel bindings is to securely take advantage\n   of hardware-assisted
    encryption that might exist at lower levels of\n   the networking protocol stack,
    such as at the Internet Protocol (IP)\n   layer in the form of IPsec (see [7]
    and [8] for information on IPsec\n   channel bindings).  The secondary motivation
    is that even if lower\n   levels are not any more efficient at encryption than
    the RPCSEC_GSS\n   layer, if encryption is occurring at the lower level, it can
    be\n   redundant at the RPCSEC_GSS level.\n   RPCSEC_GSSv2 and RPCSEC_GSSv1 are
    protocols that exchange tokens\n   emitted by the Generic Security Services (GSS)
    framework, which is\n   defined in [3], and differ only in the support for GSS
    channel\n   bindings in RPCSEC_GSSv2.  GSS itself supports channel bindings, and\n
    \  in theory RPCSEC_GSSv2 could use native GSS channel bindings to\n   achieve
    the effects described in this section.  However, as Section\n   1.1.6 of [3] states,
    not all implementations of all GSS mechanisms\n   support channel bindings.  This
    is sufficient justification for the\n   approach taken in this document: modify
    the RPCSEC_GSS protocol to\n   support channel bindings independent of the capabilities
    of the GSS\n   mechanism being used.\n   Once an RPCSEC_GSS target and initiator
    are mutually assured that\n   they are each using the same secure, end-to-end
    channel, the overhead\n   of computing message integrity codes (MICs) for authenticating
    and\n   integrity-protecting RPC requests and replies can be eliminated\n   because
    the channel is performing the same function.  Similarly, if\n   the channel also
    provides confidentiality, the overhead of RPCSEC_GSS\n   privacy protection can
    also be eliminated.\n   The External Data Representation (XDR) [4] description
    is provided in\n   this document in a way that makes it simple for the reader
    to extract\n   into a ready-to-compile form.  The reader can feed this document
    into\n   the following shell script to produce the machine-readable XDR\n   description
    of RPCSEC_GSSv2:\n   <CODE BEGINS>\n   #!/bin/sh\n   grep \"^  *///\" | sed 's?^
    \ *///??'\n   <CODE ENDS>\n   That is, if the above script is stored in a file
    called \"extract.sh\",\n   and this document is in a file called \"spec.txt\",
    then the reader can\n   do:\n   <CODE BEGINS>\n   sh extract.sh < spec.txt > rpcsec_gss_v2.x\n
    \  <CODE ENDS>\n   The effect of the script is to remove leading white space from
    each\n   line of the specification, plus a sentinel sequence of \"///\".\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [5].\n"
    title: 1.1.  Requirements Language
  title: 1.  Introduction and Motivation
- contents:
  - "2.  Channel Bindings Explained\n   If a channel between two parties is secure,
    there must be shared\n   information between the two parties.  This information
    might be\n   secret or not.  The requirement for secrecy depends on the specifics\n
    \  of the channel.\n   For example, the shared information could be the concatenation
    of the\n   public key of the source and destination of the channel (where each\n
    \  public key has a corresponding private key).  Suppose the channel is\n   not
    end-to-end, i.e., a man-in-the-middle (MITM) exists, and there\n   are two channels,
    one from the initiator to the MITM, and one from\n   the MITM to the target.  The
    MITM cannot simply force each channel to\n   use the same public keys, because
    a public key derives from a private\n   key, and the key management system for
    each node will surely assign\n   unique or random private keys.  At most, the
    MITM can force one end\n   of each channel to use the same public key.  The MIC
    of the public\n   keys from the initiator will not be verified by the target,
    because\n   at least one of the public keys will be different.  Similarly, the\n
    \  MIC of the public keys from the target will not be verified by the\n   initiator
    because at least one of the public keys will be different.\n   A higher-layer
    protocol using the secure channel can safely exploit\n   the channel to the mutual
    benefit of the higher-level parties if each\n   higher-level party can prove:\n
    \  o  They each know the channel's shared information.\n   o  The proof of the
    knowledge of the shared information is in fact\n      being conveyed by each of
    the higher-level parties, and not some\n      other entities.\n   RPCSEC_GSSv2
    simply adds an optional round-trip that has the\n   initiator compute a GSS MIC
    on the channel binding's shared\n   information, and sends the MIC to the target.
    \ The target verifies\n   the MIC, and in turn sends its own MIC of the shared
    information to\n   the initiator that then verifies the target's MIC.  This accomplishes\n
    \  three things.  First, the initiator and target are mutually\n   authenticated.
    \ Second, the initiator and target prove they know the\n   channel's shared information,
    and thus are using the same channel.\n   Third, the first and second things are
    done simultaneously.\n"
  title: 2.  Channel Bindings Explained
- contents:
  - "3.  The RPCSEC_GSSv2 Protocol\n   The RPCSEC_GSSv2 protocol will now be explained.
    \ The entire protocol\n   is not presented.  Instead the differences between RPCSEC_GSSv2
    and\n   RPCSEC_GSSv1 are shown.\n"
  - contents:
    - "3.1.  Compatibility with RPCSEC_GSSv1\n   The functionality of RPCSEC_GSSv1
      is fully supported by RPCSEC_GSSv2.\n"
    title: 3.1.  Compatibility with RPCSEC_GSSv1
  - contents:
    - "3.2.  New Version Number\n   <CODE BEGINS>\n   /// /*\n   ///  * Copyright
      (c) 2009 IETF Trust and the persons identified\n   ///  * as the document authors.
      All rights reserved.\n   ///  *\n   ///  * The document authors are identified
      in [RFC2203] and\n   ///  * [RFC5403].\n   ///  *\n   ///  * Redistribution
      and use in source and binary forms, with\n   ///  * or without modification,
      are permitted provided that the\n   ///  * following conditions are met:\n   ///
      \ *\n   ///  * o Redistributions of source code must retain the above\n   ///
      \ *   copyright notice, this list of conditions and the\n   ///  *   following
      disclaimer.\n   ///  *\n   ///  * o Redistributions in binary form must reproduce
      the above\n   ///  *   copyright notice, this list of conditions and the\n   ///
      \ *   following disclaimer in the documentation and/or other\n   ///  *   materials
      provided with the distribution.\n   ///  *\n   ///  * o Neither the name of
      Internet Society, IETF or IETF\n   ///  *   Trust, nor the names of specific
      contributors, may be\n   ///  *   used to endorse or promote products derived
      from this\n   ///  *   software without specific prior written permission.\n
      \  ///  *\n   ///  *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n
      \  ///  *   AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED\n   ///  *
      \  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   ///  *   IMPLIED WARRANTIES
      OF MERCHANTABILITY AND FITNESS\n   ///  *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
      IN NO\n   ///  *   EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n   ///
      \ *   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   ///  *   EXEMPLARY,
      OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n   ///  *   NOT LIMITED TO, PROCUREMENT
      OF SUBSTITUTE GOODS OR\n   ///  *   SERVICES; LOSS OF USE, DATA, OR PROFITS;
      OR BUSINESS\n   ///  *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n
      \  ///  *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n   ///  *   OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n   ///  *   IN ANY WAY OUT
      OF THE USE OF THIS SOFTWARE, EVEN IF\n   ///  *   ADVISED OF THE POSSIBILITY
      OF SUCH DAMAGE.\n   ///  */\n   /// /*\n   ///  * This code was derived from
      [RFC2203]. Please\n   ///  * reproduce this note if possible.\n   ///  */\n
      \  ///\n   ///  enum rpc_gss_service_t {\n   ///    /* Note: the enumerated
      value for 0 is reserved. */\n   ///    rpc_gss_svc_none         = 1,\n   ///
      \   rpc_gss_svc_integrity    = 2,\n   ///    rpc_gss_svc_privacy      = 3,\n
      \  ///    rpc_gss_svc_channel_prot = 4 /* new */\n   ///  };\n   ///\n   ///
      \  enum rpc_gss_proc_t {\n   ///     RPCSEC_GSS_DATA          = 0,\n   ///     RPCSEC_GSS_INIT
      \         = 1,\n   ///     RPCSEC_GSS_CONTINUE_INIT = 2,\n   ///     RPCSEC_GSS_DESTROY
      \      = 3,\n   ///     RPCSEC_GSS_BIND_CHANNEL  = 4 /* new */\n   ///  };\n
      \  ///\n   ///  struct rpc_gss_cred_vers_1_t {\n   ///    rpc_gss_proc_t    gss_proc;
      /* control procedure */\n   ///    unsigned int      seq_num;  /* sequence number
      */\n   ///    rpc_gss_service_t service;  /* service used */\n   ///    opaque
      \           handle<>; /* context handle */\n   ///  };\n   ///\n   ///  const
      RPCSEC_GSS_VERS_1 = 1;\n   ///  const RPCSEC_GSS_VERS_2 = 2; /* new */\n   ///\n
      \  ///  union rpc_gss_cred_t switch (unsigned int rgc_version) {\n   ///    case
      RPCSEC_GSS_VERS_1:\n   ///    case RPCSEC_GSS_VERS_2: /* new */\n   ///      rpc_gss_cred_vers_1_t
      rgc_cred_v1;\n   ///  };\n   ///\n   <CODE ENDS>\n                                 Figure
      1\n   As is apparent from the above, the RPCSEC_GSSv2 credential has the\n   same
      format as the RPCSEC_GSSv1 credential (albeit corrected so that\n   the definition
      is in legal XDR description language that is also\n   compatible with [9]; hence,
      the field \"version\", a keyword in RFC\n   1831, is replaced with \"rgc_version\").
      \ Setting the rgc_version field\n   to 2 indicates that the initiator and target
      support channel\n   bindings.\n"
    title: 3.2.  New Version Number
  - contents:
    - "3.3.  New Procedure - RPCSEC_GSS_BIND_CHANNEL\n   <CODE BEGINS>\n   ///  struct
      rgss2_bind_chan_MIC_in_args {\n   ///    opaque          rbcmia_bind_chan_hash<>;\n
      \  ///  };\n   ///\n   ///  typedef opaque    rgss2_chan_pref<>;\n   ///  typedef
      opaque    rgss2_oid<>;\n   ///\n   ///  struct rgss2_bind_chan_verf_args {\n
      \  ///    rgss2_chan_pref rbcva_chan_bind_prefix;\n   ///    rgss2_oid       rbcva_chan_bind_oid_hash;\n
      \  ///    opaque          rbcva_chan_mic<>;\n   ///  };\n   ///\n   <CODE ENDS>\n
      \                                Figure 2\n   Once an RPCSEC_GSSv2 handle has
      been established over a secure\n   channel, the initiator MAY issue RPCSEC_GSS_BIND_CHANNEL
      (Figure 1).\n   Targets MUST support RPCSEC_GSS_BIND_CHANNEL.  Like RPCSEC_GSS_INIT\n
      \  and RPCSEC_GSS_CONTINUE_INIT requests, the NULL RPC procedure MUST be\n   used.
      \ Unlike those two requests, the arguments of the NULL procedure\n   are not
      overloaded, because the verifier is of sufficient size for\n   the purpose of
      RPCSEC_GSS_BIND_CHANNEL.  The gss_proc field is set to\n   RPCSEC_GSS_BIND_CHANNEL.
      \ The seq_num field is set as if gss_proc\n   were set to RPCSEC_GSS_DATA.  The
      service field is set to\n   rpc_gss_svc_none.  The handle field is set to that
      of an RPCSEC_GSS\n   handle as returned by RPCSEC_GSS_INIT or RPCSEC_GSS_CONTINUE_INIT.\n
      \  The RPCSEC_GSS_BIND_CHANNEL request is similar to the RPCSEC_GSS_DATA\n   request
      in that the verifiers of both contain MICs.  As described in\n   Section 5.3.1
      of [1], when gss_proc is RPCSEC_GSS_DATA, the verifier\n   of an RPC request
      is set to the output of GSS_GetMIC() on the RPC\n   header.  When gss_proc is
      RPCSEC_GSS_BIND_CHANNEL the verifier of an\n   RPC request is set to the XDR
      encoding on a value of data type\n   rgss2_bind_chan_verf_args, which includes
      a MIC as described below.\n   The rgss2_bind_chan_verf_args data type consists
      of three fields:\n   o  rbcva_chan_bind_prefix.  This is the channel binding
      prefix as\n      described in [2] up to, but excluding, the colon (ASCII 0x3A)
      that\n      separates the prefix from the suffix.\n   o  rbcva_chan_bind_hash_oid.
      \ This is the object identifier (OID) of\n      the hash algorithm used to compute
      rbcmia_bind_chan_hash.  This\n      field contains an OID encoded in ASN.1 as
      used by GSS-API in the\n      mech_type argument to GSS_Init_sec_context ([3]).
      \ See [6] for the\n      OIDs of the SHA one-way hash algorithms.\n   o  rbcva_chan_mic.
      \ This is the output of GSS_GetMIC() on the\n      concatenation of the XDR-encoded
      RPC header (\"up to and including\n      the credential\" as per [1]) and the
      XDR encoding of an instance of\n      type data rgss2_bind_chan_MIC_in_args.
      \ The data type\n      rgss2_bind_chan_MIC_in_args consists of one field,\n
      \     rbcmia_bind_chan_hash, which is a hash of the channel bindings as\n      defined
      in [2].  The channel bindings are a \"canonical octet\n      string encoding
      of the channel bindings\", starting \"with the\n      channel bindings prefix
      followed by a colon (ASCII 0x3A)\".  The\n      reason a hash of the channel
      bindings and not the actual channel\n      bindings are used to compute rbcva_chan_mic
      is that some channel\n      bindings, such as those composed of public keys,
      can be relatively\n      large, and thus place a higher space burden on the
      implementations\n      to manage.  One way hashes consume less space.\n   <CODE
      BEGINS>\n   ///  enum rgss2_bind_chan_status {\n   ///    RGSS2_BIND_CHAN_OK
      \          = 0,\n   ///    RGSS2_BIND_CHAN_PREF_NOTSUPP = 1,\n   ///    RGSS2_BIND_CHAN_HASH_NOTSUPP
      = 2\n   ///  };\n   ///\n   ///  union rgss2_bind_chan_res switch\n   ///     (rgss2_bind_chan_status
      rbcr_stat) {\n   ///\n   ///    case RGSS2_BIND_CHAN_OK:\n   ///      void;\n
      \  ///\n   ///    case RGSS2_BIND_CHAN_PREF_NOTSUPP:\n   ///      rgss2_chan_pref
      rbcr_pref_list<>;\n   ///\n   ///    case RGSS2_BIND_CHAN_HASH_NOTSUPP:\n   ///
      \     rgss2_oid       rbcr_oid_list<>;\n   ///  };\n   ///\n   ///  struct rgss2_bind_chan_MIC_in_res
      {\n   ///    unsigned int        rbcmr_seq_num;\n   ///    opaque              rbcmr_bind_chan_hash<>;\n
      \  ///    rgss2_bind_chan_res rbcmr_res;\n   ///  };\n   ///\n   ///  struct
      rgss2_bind_chan_verf_res {\n   ///    rgss2_bind_chan_res rbcvr_res;\n   ///
      \   opaque              rbcvr_mic<>;\n   ///  };\n   ///\n   <CODE ENDS>\n                                 Figure
      3\n   The RPCSEC_GSS_BIND_CHANNEL reply is similar to the RPCSEC_GSS_DATA\n
      \  reply in that the verifiers of both contain MICs.  When gss_proc is\n   RPCSEC_GSS_DATA,
      the verifier of an RPC reply is set to the output of\n   GSS_GetMIC() on the
      seq_num of the credential of the corresponding\n   request (as described in
      Section 5.3.3.2 of [1]).  When gss_proc is\n   RPCSEC_GSS_BIND_CHANNEL, the
      verifier of an RPC reply is set to the\n   XDR encoding of an instance of data
      type rgss2_bind_chan_verf_res,\n   which includes a MIC as described below.
      \ The data type\n   rgss2_bind_chan_verf_res consists of two fields.\n   o  rbcvr_res.
      \ The data type of this field is rgss2_bind_chan_res.\n      The rgss2_bind_chan_res
      data type is a switched union consisting\n      of three cases switched on the
      status contained in the rbcr_stat\n      field.\n      *  RGSS2_BIND_CHAN_OK.
      \ If this status is returned, the target\n         accepted the channel bindings,
      and successfully verified\n         rbcva_chan_mic in the request.  No additional
      results will be\n         in rbcvr_res.\n      *  RGSS2_BIND_CHAN_PREF_NOTSUPP.
      \ If this status is returned, the\n         target did not support the prefix
      in the rbcva_chan_bind_prefix\n         field of the arguments, and thus the
      RPCSEC_GSS_BIND_CHANNEL\n         request was rejected.  The target returned
      a list of prefixes\n         it does support in the field rbcr_pref_list.  Note
      that a\n         channel can have multiple channel bindings each with different\n
      \        prefixes.  The initiator is free to pick its preferred prefix.\n         If
      the target does not support the prefix, the status\n         RGSS2_BIND_CHAN_PREF_NOTSUPP
      will be returned, and the\n         initiator can select its next most preferred
      prefix among the\n         prefixes the target does support.\n      *  RGSS2_BIND_CHAN_HASH_NOTSUPP.
      \ If this status is returned, the\n         target did not support the hash
      algorithm identified in the\n         rbcva_chan_bind_hash_oid field of the
      arguments, and thus the\n         RPCSEC_GSS_BIND_CHANNEL request was rejected.
      \ The target\n         returned a list of OIDs of hash algorithms it does support
      in\n         the field rbcr_oid_list.  The array rbcr_oid_list MUST have one\n
      \        or more elements.\n   o  rbcvr_mic.  The value of this field is equal
      to the output of\n      GSS_GetMIC() on the XDR encoding of an instance of data
      type\n      rgss2_bind_chan_MIC_in_res.  The data type\n      rgss2_bind_chan_MIC_in_res
      consists of three fields.\n      *  rbcmr_seq_num.  The value of this field
      is equal to the field\n         seq_num in the RPCSEC_GSS credential (data type\n
      \        rpc_gss_cred_vers_1_t).\n      *  rbcmr_bind_chan_hash.  This is the
      result of the one way hash\n         of the channel bindings (including the
      prefix).  If rbcr_stat\n         is not RGSS2_BIND_CHAN_HASH_NOTSUPP, then the
      hash algorithm\n         that is used to compute rbcmr_bind_chan_hash is that
      identified\n         by the rbcva_chan_bind_oid_hash field in the arguments
      to\n         RPCSEC_GSS_BIND_CHANNEL.  If rbcr_stat is\n         RGSS2_BIND_CHAN_HASH_NOTSUPP,
      then the hash algorithm used to\n         compute rbcmr_bind_chan_hash is that
      identified by\n         rbcr_oid_list[0] in the results.\n      *  rbcmr_res.
      \ The value of this field is equal to the value of\n         the rbcvr_res field.\n"
    title: 3.3.  New Procedure - RPCSEC_GSS_BIND_CHANNEL
  - contents:
    - "3.4.  New Security Service - rpc_gss_svc_channel_prot\n   RPCSEC_GSSv2 targets
      MUST support rpc_gss_svc_channel_prot.\n   The rpc_gss_svc_channel_prot service
      (Figure 1) is valid only if\n   RPCSEC_GSSv2 is being used, an RPCSEC_GSS_BIND_CHANNEL
      procedure has\n   been executed successfully, and the secure channel still exists.\n
      \  When rpc_gss_svc_channel_prot is used, the RPC requests and replies\n   are
      similar to those of rpc_gss_svc_none except that the verifiers on\n   the request
      and reply always have the flavor set to AUTH_NONE, and\n   the contents are
      zero length.\n   Note that even though NULL verifiers are used when\n   rpc_gss_svc_channel_prot
      is used, non-NULL RPCSEC_GSS credentials are\n   used.  In order to identify
      the principal sending the request, the\n   same credential is used as before,
      except that service field is set\n   to rpc_gss_svc_channel_prot.\n"
    title: 3.4.  New Security Service - rpc_gss_svc_channel_prot
  title: 3.  The RPCSEC_GSSv2 Protocol
- contents:
  - "4.  Version Negotiation\n   An initiator that supports version 2 of RPCSEC_GSS
    simply issues an\n   RPCSEC_GSS request with the rgc_version field set to\n   RPCSEC_GSS_VERS_2.
    \ If the target does not recognize\n   RPCSEC_GSS_VERS_2, the target will return
    an RPC error per Section\n   5.1 of [1].\n   The initiator MUST NOT attempt to
    use an RPCSEC_GSS handle returned\n   by version 2 of a target with version 1
    of the same target.  The\n   initiator MUST NOT attempt to use an RPCSEC_GSS handle
    returned by\n   version 1 of a target with version 2 of the same target.\n"
  title: 4.  Version Negotiation
- contents:
  - "5.  Native GSS Channel Bindings\n   To ensure interoperability, implementations
    of RPCSEC_GSSv2 SHOULD\n   NOT transfer tokens between the initiator and target
    that use native\n   GSS channel bindings (as defined in Section 1.1.6 of [3]).\n"
  title: 5.  Native GSS Channel Bindings
- contents:
  - "6.  Operational Recommendation for Deployment\n   RPCSEC_GSSv2 is a superset
    of RPCSEC_GSSv1, and so can be used in all\n   situations where RPCSEC_GSSv1 is
    used.  RPCSEC_GSSv2 should be used\n   when the new functionality, channel bindings,
    is desired or needed.\n"
  title: 6.  Operational Recommendation for Deployment
- contents:
  - "7.  Implementation Notes\n   Once a successful RPCSEC_GSS_BIND_CHANNEL procedure
    has been\n   performed on an RPCSEC_GSSv2 context handle, the initiator's\n   implementation
    may map application requests for rpc_gss_svc_none and\n   rpc_gss_svc_integrity
    to rpc_gss_svc_channel_prot credentials.  And\n   if the secure channel has privacy
    enabled, requests for\n   rpc_gss_svc_privacy can also be mapped to rpc_gss_svc_channel_prot.\n"
  title: 7.  Implementation Notes
- contents:
  - "8.  Acknowledgments\n   Nicolas Williams had the idea for extending RPCSEC_GSS
    to support\n   channel bindings.  Alex Burlyga, Lars Eggert, Pasi Eronen, and
    Dan\n   Romascanu reviewed the document and gave valuable feedback for\n   improving
    its readability.\n"
  title: 8.  Acknowledgments
- contents:
  - "9.  Security Considerations\n   The base security considerations consist of:\n
    \  o  All security considerations from [1].\n   o  All security considerations
    from [2].\n   o  All security considerations from the actual secure channel being\n
    \     used.\n   Even though RPCSEC_GSS_DATA requests that use\n   rpc_gss_svc_channel_prot
    protection do not involve construction of\n   more GSS tokens, the target SHOULD
    stop allowing RPCSEC_GSS_DATA\n   requests with rpc_gss_svc_channel_prot protection
    once the GSS\n   context expires.\n   With the use of channel bindings, it becomes
    extremely critical that\n   the message integrity code (MIC) used by the GSS mechanism
    that\n   RPCSEC_GSS is using be difficult to forge.  While this requirement is\n
    \  true for RPCSEC_GSSv1, and indeed any protocol that uses GSS MICs,\n   the
    distinction in the seriousness is that for RPCSEC_GSSv1, forging\n   a single
    MIC at most allows the attacker to succeed in injecting one\n   bogus request.
    \ Whereas, with RPCSEC_GSSv2 combined with channel\n   bindings, by forging a
    single MIC the attacker will succeed in\n   injecting bogus requests as long as
    the channel exists.  An example\n   illustrates.  Suppose we have an RPCSEC_GSSv1
    initiator, a man-in-\n   the-middle (MITM), an RPCSEC_GSSv1 target, and an RPCSEC_GSSv2\n
    \  target.  The attack is as follows.\n   o  The MITM intercepts the initiator's
    RPCSEC_GSSv1 RPCSEC_GSS_INIT\n      message and changes the version number from
    1 to 2 before\n      forwarding to the RPCSEC_GSSv2 target, and changes the reply's\n
    \     version number from 2 to 1 before forwarding to the RPCSEC_GSSv1\n      initiator.
    \ Neither the client nor the server notice.\n   o  Once the RPCSEC_GSS handle
    is in an established state, the\n      initiator sends its first RPCSEC_GSS_DATA
    request.  The MITM\n      constructs an RPCSEC_GSS_BIND_CHANNEL request, using
    the message\n      integrity code (MIC) of the RPCSEC_GSS_DATA request.  It is
    likely\n      the RPCSEC_GSSv2 target will reject the request.  The MITM\n      continues
    to reiterate each time the initiator sends another\n      RPCSEC_GSS_DATA request.
    \ With enough iterations, the probability\n      of a MIC from an RPCSEC_GSS_DATA
    being successfully verified in\n      the forged RPCSEC_GSS_BIND_CHANNEL increases.
    \ Once the MITM\n      succeeds, it can send RPCSEC_GSS_DATA requests with a security\n
    \     service of rpc_gss_svc_channel_prot, which does not have MICs in\n      the
    RPC request's verifier.\n   The implementation of RPCSEC_GSSv2 can use at least
    two methods to\n   thwart these attacks.\n   o  The target SHOULD require a stronger
    MIC when sending an\n      RPCSEC_GSS_BIND_CHANNEL request instead of an RPCSEC_GSS_DATA\n
    \     request -- e.g., if HMACs are used for the MICs, require the\n      widest
    possible HMAC (in terms of bit length) that the GSS\n      mechanism supports.
    \ If HMACs are being used, and the target\n      expects N RPCSEC_GSS_DATA requests
    to be sent on the context\n      before it expires, then the target SHOULD require
    an HMAC for\n      RPCSEC_GSS_BIND_CHANNEL that is log base 2 N bits longer than
    what\n      it normally requires for RPCSEC_GSS_DATA requests.  If a long\n      enough
    MIC is not available, then the target could artificially\n      limit the number
    of RPCSEC_GSS_DATA requests it will allow on the\n      context before deleting
    the context.\n   o  Each time an RPCSEC_GSSv2 target experiences a failure to
    verify\n      the MIC of an RPCSEC_GSS_BIND_CHANNEL request, it SHOULD reduce\n
    \     the lifetime of the underlying GSS context, by a significant\n      fraction,
    thereby preventing the MITM from using the established\n      context for its
    attack.  A possible heuristic is that if the\n      target believes the possibility
    that failure to verify the MIC was\n      because of an attack is X percent, then
    the context's lifetime\n      would be reduced by X percent.  For simplicity,
    an implementer\n      might set X to be 50 percent, so that the context lifetime
    is\n      halved on each failed verification of an RPCSEC_GSS_BIND_CHANNEL\n      request
    and thus rapidly reduced to zero on subsequent requests.\n      For example, with
    a context lifetime of 8 hours (or 28800\n      seconds), 15 failed attempts by
    the MITM would cause the context\n      to be destroyed.\n   A method of mitigation
    that was considered was to protect the\n   RPCSEC_GSS version number with RPCSEC_GSSv2's
    RPCSEC_GSS_INIT and\n   RPCSEC_GSS_CONTINUE_INIT tokens.  Thus, the version number
    of\n   RPCSEC_GSS would be in the tokens.  This method does not completely\n   mitigate
    the attack; it just moves the MIC guessing to the\n   RPCSEC_GSS_INIT message.
    \ In addition, without changing GSS, or the\n   GSS mechanism, there is no way
    to include the RPCSEC_GSS version\n   number in the tokens.  So for these reasons
    this method was not\n   selected.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [1]  Eisler, M., Chiu, A., and L. Ling, \"RPCSEC_GSS
      Protocol\n        Specification\", RFC 2203, September 1997.\n   [2]  Williams,
      N., \"On the Use of Channel Bindings to Secure\n        Channels\", RFC 5056,
      November 2007.\n   [3]  Linn, J., \"Generic Security Service Application Program\n
      \       Interface Version 2, Update 1\", RFC 2743, January 2000.\n   [4]  Eisler,
      M., \"XDR: External Data Representation Standard\",\n        STD 67, RFC 4506,
      May 2006.\n   [5]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n
      \       Levels\", BCP 14, RFC 2119, March 1997.\n   [6]  Schaad, J., Kaliski,
      B., and R. Housley, \"Additional Algorithms\n        and Identifiers for RSA
      Cryptography for use in the Internet\n        X.509 Public Key Infrastructure
      Certificate and Certificate\n        Revocation List (CRL) Profile\", RFC 4055,
      June 2005.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [7]  Williams, N., \"IPsec Channels: Connection
      Latching\", Work\n        in Progress, November 2008.\n   [8]  Williams, N.,
      \"End-Point Channel Bindings for IPsec Using IKEv2\n        and Public Keys\",
      Work in Progress, April 2008.\n   [9]  Srinivasan, R., \"RPC: Remote Procedure
      Call Protocol\n        Specification Version 2\", RFC 1831, August 1995.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Author's Address\n   Mike Eisler\n   NetApp\n   5765 Chase Point Circle\n   Colorado
    Springs, CO  80919\n   US\n   Phone: +1-719-599-9026\n   EMail: mike@eisler.com\n"
  title: Author's Address
