- contents:
  - "          PA-TNC: A Posture Attribute (PA) Protocol Compatible\n                   with
    Trusted Network Connect (TNC)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies PA-TNC, a Posture Attribute protocol\n   identical
    to the Trusted Computing Group's IF-M 1.0 protocol.  The\n   document then evaluates
    PA-TNC against the requirements defined in\n   the NEA Requirements specification.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5792.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Prerequisites ..............................................4\n      1.2.
    Message Diagram Conventions ................................4\n      1.3. Conventions
    Used in This Document ..........................4\n   2. Design Considerations
    ...........................................4\n      2.1. Standard Attribute Namespace
    for Interoperability ..........4\n      2.2. Vendor-Defined Namespace for Differentiation
    and Agility ...5\n      2.3. Use of TLV-Based Encoding for Efficiency ...................6\n
    \  3. PA-TNC Message Protocol .........................................7\n      3.1.
    PA-TNC Messaging Model .....................................7\n      3.2. PA-TNC
    Relationship to PB-TNC ..............................8\n      3.3. PB-PA Posture
    Collector and Posture Validator\n           Identifiers ...............................................10\n
    \     3.4. PA-TNC Messages in PB-TNC .................................10\n      3.5.
    IETF Standard PA Subtypes .................................11\n      3.6. PA-TNC
    Message Header Format ..............................12\n   4. PA-TNC Attributes
    ..............................................13\n      4.1.  PA-TNC Attribute
    Header ..................................13\n      4.2.  IETF Standard PA-TNC
    Attribute Types .....................17\n           4.2.1. Attribute Request ..................................18\n
    \          4.2.2. Product Information ................................20\n           4.2.3.
    Numeric Version ....................................22\n           4.2.4. String
    Version .....................................24\n           4.2.5. Operational
    Status .................................26\n           4.2.6. Port Filter ........................................29\n
    \          4.2.7. Installed Packages .................................31\n           4.2.8.
    PA-TNC Error .......................................34\n           4.2.9. Assessment
    Result ..................................41\n           4.2.10. Remediation Instructions
    ..........................42\n           4.2.11. Forwarding Enabled ................................45\n
    \          4.2.12. Factory Default Password Enabled ..................47\n      4.3.
    \ Vendor-Defined Attributes ................................48\n   5. Security
    Considerations ........................................48\n      5.1. Trust Relationships
    .......................................48\n           5.1.1. Posture Collector
    ..................................49\n           5.1.2. Posture Validator ..................................49\n
    \          5.1.3. Posture Broker Client, Posture Broker Server .......49\n      5.2.
    Security Threats ..........................................50\n           5.2.1.
    Attribute Theft ....................................50\n           5.2.2. Message
    Fabrication ................................51\n           5.2.3. Attribute Modification
    .............................51\n           5.2.4. Attribute Replay ...................................52\n
    \          5.2.5. Attribute Insertion ................................52\n           5.2.6.
    Denial of Service ..................................53\n   6. Privacy Considerations
    .........................................53\n   7. IANA Considerations ............................................54\n
    \     7.1. Designated Expert Guidelines ..............................55\n      7.2.
    PA Subtypes ...............................................56\n      7.3. Registry
    for PA-TNC Attribute Types .......................56\n      7.4. Registry for
    PA-TNC Error Codes ...........................57\n      7.5. Registry for PA-TNC
    Remediation Parameters Types ..........58\n   8. Acknowledgments ................................................58\n
    \  9. References .....................................................59\n      9.1.
    Normative References ......................................59\n      9.2. Informative
    References ....................................59\n   Appendix A. Use Cases .............................................60\n
    \     A.1. Initial Client-Triggered Assessment .......................60\n      A.2.
    Server-Initiated Assessment with Remediation ..............64\n      A.3. Client-Triggered
    Reassessment .............................71\n   Appendix B. Evaluation against
    NEA Requirements ...................77\n      B.1. Evaluation against Requirements
    C-1 .......................77\n      B.2. Evaluation against Requirements C-2
    .......................77\n      B.3. Evaluation against Requirements C-3 .......................77\n
    \     B.4. Evaluation against Requirements C-4 .......................78\n      B.5.
    Evaluation against Requirements C-5 .......................78\n      B.6. Evaluation
    against Requirements C-6 .......................78\n      B.7. Evaluation against
    Requirements C-7 .......................79\n      B.8. Evaluation against Requirements
    C-8 .......................79\n      B.9. Evaluation against Requirements C-9
    .......................79\n      B.10. Evaluation against Requirements C-10 .....................80\n
    \     B.11. Evaluation against Requirements C-11 .....................80\n      B.12.
    Evaluation against Requirements PA-1 .....................81\n      B.13. Evaluation
    against Requirements PA-2 .....................81\n      B.14. Evaluation against
    Requirements PA-3 .....................81\n      B.15. Evaluation against Requirements
    PA-4 .....................82\n      B.16. Evaluation against Requirements PA-5
    .....................82\n      B.17. Evaluation against Requirements PA-6 .....................83\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies PA-TNC, a Posture Attribute (PA)
    Protocol\n   identical to the Trusted Computing Group's IF-M 1.0 protocol [8].\n
    \  The document then evaluates PA-TNC against the requirements defined\n   in
    the Network Endpoint Assessment (NEA) Requirements specification\n   [9].\n"
  - contents:
    - "1.1.  Prerequisites\n   This document does not define an architecture or reference
      model.\n   Instead, it defines a protocol that works within the reference model\n
      \  described in the NEA Overview and Requirements specification.  The\n   reader
      is assumed to be thoroughly familiar with that document.  No\n   familiarity
      with TCG specifications is assumed.\n"
    title: 1.1.  Prerequisites
  - contents:
    - "1.2.  Message Diagram Conventions\n   This specification defines the syntax
      of PA-TNC messages using\n   diagrams.  Each diagram depicts the format and
      size of each field in\n   bits.  Implementations MUST send the bits in each
      diagram as they are\n   shown, traversing the diagram from top to bottom and
      then from left\n   to right within each line (which represents a 32-bit quantity).\n
      \  Multi-byte fields representing numeric values must be sent in network\n   (big
      endian) byte order.\n   Descriptions of bit field (e.g., flag) values are described
      referring\n   to the position of the bit within the field.  These bit positions
      are\n   numbered from the most significant bit through the least significant\n
      \  bit, so a 1-octet field with only bit 0 set has the value 0x80.\n"
    title: 1.2.  Message Diagram Conventions
  - contents:
    - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in RFC 2119 [1].\n"
    title: 1.3.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Design Considerations\n   This section discusses some of the key design considerations
    for the\n   PA protocol.\n"
  - contents:
    - "2.1.  Standard Attribute Namespace for Interoperability\n   The PA protocol
      requires the use of two categories of namespaces:\n   component types (AKA PA
      subtypes) and attributes.  Each of these\n   namespace categories needs to contain
      well-known, interoperable names\n   with defined syntax and semantics co-existing
      with names for vendor-\n   defined private extensions.  Similarly, each namespace
      category needs\n   to be readily extensible without repeated coordination yet
      avoids\n   naming conflicts.\n   The PA-TNC and PB-TNC protocols provide for
      multiple orthogonal\n   namespaces for each category that exist without overlap
      by including\n   a Structure of Management Information (SMI) Private Enterprise
      Number\n   (PEN) field to identify the definer of namespace of the associated\n
      \  field.  This allows the IETF NEA WG to define a set of standard\n   component
      types and attribute types while allowing vendors to each\n   create additional
      names outside of the IETF standard namespace.  Over\n   time, vendor-defined
      names might be proposed for standardization and\n   thus migration into the
      IETF namespace.\n   The PB-TNC protocol defines an IETF standard namespace (using\n
      \  vendor-id=0) that allows for definition of standard component types\n   (e.g.,
      Operating System, Firewall, Anti-Virus) using the PA Subtype\n   field (see
      section 3.2).  Similarly, PA-TNC defines a set of standard\n   attributes in
      section 4.2 that represent the most common capabilities\n   (attributes) of
      these types of components across a variety of vendor\n   implementations.  The
      standard namespace allows NEA deployments with\n   both open source and vendor-provided
      NEA implementations to support a\n   consistent set of policies across their
      environment based on these\n   standard attributes.  The standard attributes
      can be used with a\n   variety of endpoints (hosts, printers, mobile devices)
      that are\n   running applications and operating systems (defined by the PA\n
      \  subtypes) from a variety of vendors.\n"
    title: 2.1.  Standard Attribute Namespace for Interoperability
  - contents:
    - "2.2.  Vendor-Defined Namespace for Differentiation and Agility\n   The endpoint
      is a very dynamic environment in terms of rate of new\n   features being deployed
      and attacks that are crafted against existing\n   and new applications such
      as viruses, worms, malware, and spyware.\n   It is difficult to imagine the
      standard namespaces being able to keep\n   pace with this rapidly changing environment.
      \ Vendors typically\n   differentiate themselves by moving rapidly to provide
      unique\n   mechanisms to address such threats and their ability to deal with\n
      \  changes in an agile manner.  The PA-TNC and PB-TNC protocols allow\n   for
      creation of vendor-defined namespace(s) where each namespace\n   allows use
      of vendor-defined PA subtypes to identify non-standard\n   applications or operating
      system variants and vendor-defined\n   attributes describing new aspects of
      each type of component.  The\n   vendor namespaces will allow NEA deployments
      to craft compliance\n   policies using a mixture of attributes from both the
      IETF standard\n   namespace and vendor-defined namespaces that may include multiple\n
      \  vendors representing the various hardware and software components\n   present
      on the endpoints.\n   The PA-TNC protocol's use of vendor-id to identify the
      namespace of\n   each attribute allows Posture Collectors to support some or
      all of\n   the IETF standard attributes plus optionally a set of vendor-defined\n
      \  attributes (potentially from more than one vendor-id namespace).  For\n   instance,
      an open source anti-virus Posture Collector might be\n   written that supports
      all of the IETF standard attributes used to\n   describe a local anti-virus
      component and a subset of multiple anti-\n   virus manufacturers' vendor-defined
      attributes.  This Posture\n   Collector might therefore be able to interoperate
      with Posture\n   Validators from multiple vendors.  Conversely, a simple Posture\n
      \  Collector might be written to ignore any vendor-defined attributes\n   requested
      and only return standard attributes that it supports.  If\n   the vendor-provided
      Posture Validator's policy allows for this subset\n   to be considered compliant,
      then these simple Posture Collectors can\n   be used to perform a successful
      assessment.\n"
    title: 2.2.  Vendor-Defined Namespace for Differentiation and Agility
  - contents:
    - "2.3.  Use of TLV-Based Encoding for Efficiency\n   The PA-TNC protocol has
      chosen to employ a binary encoding using a\n   type-length-value (TLV) structure.
      \ TLV encoding was preferred over\n   the use of a textual encoding format such
      as XML to provide a more\n   efficient utilization of the potentially constrained
      bandwidth\n   available between the NEA Client and NEA Server (see NEA Overview
      and\n   Architecture [9]).  Efficiency was a primary criterion for this\n   choice
      with consideration given to both:\n      1. Optimization of the bits-on-the-wire
      to accommodate NEA\n         requirements for assessment over low bandwidth
      or high latency\n         links (C-8) and allow for the Posture Transport (PT)
      protocol\n         to run over existing network access protocols (PT-4, C-11)
      that\n         are constrained by packet size.\n      2. Optimization of CPU
      utilization on the endpoint to accommodate\n         for low power endpoints
      such as mobile devices.\n   The choice of TLV encoding does not preclude the
      use of XML-based\n   attribute values within the vendor namespaces or future
      standard\n   attributes.  It is conceivable that certain vendors may utilize
      XML\n   encoding for extensibility within their namespace when the above\n   considerations
      are less applicable to their technologies.  Attributes\n   encoded within the
      vendor-defined namespace using alternate encoding\n   such as XML will be opaque
      to NEA software only supporting standard\n   attributes and will be processed
      primarily by the vendor-defined\n   components (collector/validator).\n"
    title: 2.3.  Use of TLV-Based Encoding for Efficiency
  title: 2.  Design Considerations
- contents:
  - "3.  PA-TNC Message Protocol\n   This section discusses the use of the PA-TNC
    message and its\n   attributes, and specifies the syntax and semantics for the
    PA-TNC\n   message header.  The details of each attribute included within the\n
    \  PA-TNC payload are specified in section 4.2.\n"
  - contents:
    - "3.1.  PA-TNC Messaging Model\n   PA-TNC messages are carried by the PB-TNC
      protocol [5], which\n   provides a multi-roundtrip reliable transport and end-to-end
      message\n   delivery to subscribed (interested) parties using a variety of\n
      \  underlying network protocols.  PA-TNC is unaware of these underlying\n   PT
      protocols being used below PB-TNC.\n   The interested parties consist of Posture
      Collectors on the NEA\n   Client and Posture Validators associated with the
      NEA Server that\n   have registered to receive messages about particular types
      of\n   components (e.g., anti-virus) during an assessment.  The PA-TNC\n   messaging
      protocol operates synchronously within an assessment\n   session, with Posture
      Collectors and Posture Validators taking turns\n   sending one or more messages
      to each other.  Each PA-TNC message may\n   contain one or more attributes associated
      with the functional\n   component identified in the component type (PA Subtype)
      of the\n   Posture Broker (PB) protocol.\n   Posture Collectors may only send
      PA-TNC messages to Posture\n   Validators and vice versa.  No Posture Collector-to-Posture
      Collector\n   or Posture Validator-to-Posture Validator messaging is allowed
      to\n   occur.  Each Posture Collector or Posture Validator may send several\n
      \  PA-TNC messages in succession before indicating that it has completed\n   its
      batch of messages to the Posture Broker Client or Posture Broker\n   Server
      respectively.  As necessary, the Posture Broker Client and\n   Posture Broker
      Server will batch these messages prior to sending them\n   over the network.\n
      \  PB-TNC provides a publish/subscribe model of message exchange.  This\n   means
      that, at any given point in time, zero or more subscribers for\n   a particular
      type of message may be present on a Posture Broker\n   Client or Posture Broker
      Server.  This is beneficial, since it allows\n   one Posture Collector or Posture
      Validator to combine multiple\n   functions (like anti-virus and personal firewall)
      by subscribing to\n   both TNC standard component types.  It also allows multiple
      Posture\n   Collectors or Posture Validators to support the same components,
      such\n   as two anti-virus Posture Validators that are each used to manage\n
      \  their own respective anti-virus client software.\n   However, this publish/subscribe
      model has some possible negative side\n   effects.  When a Posture Collector
      or Posture Validator initially\n   sends a PA-TNC message, it does not know
      whether it will receive\n   many, one, or no PA-TNC messages from the other
      side.  For many types\n   of assessments, this is acceptable, but in some cases
      a more direct\n   channel binding between a particular Posture Collector and
      Posture\n   Validator pair is necessary.  For example, a Posture Validator may\n
      \  wish to provide remediation instructions to a particular Posture\n   Collector
      that it knows is capable of remediating a non-compliant\n   component.  This
      can be accomplished using the exclusive delivery PB-\n   TNC capability to limit
      distribution of a message to a single Posture\n   Collector by including the
      target Posture Collector Identifier in the\n   PB-PA header.  For more information
      on the PB-PA header, see section\n   4.5 of the PB-TNC specification.\n"
    title: 3.1.  PA-TNC Messaging Model
  - contents:
    - "3.2.  PA-TNC Relationship to PB-TNC\n   This section summarizes the major elements
      of a PA-TNC message as\n   they might appear inside of a PB-TNC message.  The
      double line (===)\n   in the diagram below indicates the separation between
      the PB-TNC and\n   PA-TNC protocols.  The PA-TNC portion of the message is delivered
      to\n   each Posture Collector or Posture Validator registered to receive\n   messages
      containing a particular message type.  Note that PB-TNC is\n   capable of carrying
      multiple PB-TNC and PA-TNC messages in a single\n   PB-TNC batch.  See the PB-TNC
      specification [5] for more information\n   on its capabilities.\n   One important
      linkage between the PA-TNC and PB-TNC protocols is the\n   PA message type (PA
      Message Vendor ID and PA Subtype) that is used by\n   the Posture Broker Client
      and Posture Broker Server to route messages\n   to interested Posture Collectors
      and Posture Validators.  The message\n   type indicates the software component
      (component type) that is\n   associated with the attributes included inside
      the PA-TNC message.\n   Therefore, Posture Collectors and Posture Validators
      written to\n   support an assessment of a particular component can register
      to\n   receive messages about the component and thus participate in its\n   assessment.
      \ Each Posture Collector and Posture Validator MUST only\n   send PA-TNC messages
      containing attributes that pertain to the\n   software component defined in
      the message type of the message.  This\n   ensures that only the appropriate
      Posture Collectors and Posture\n   Validators that support a particular type
      of component will receive\n   attributes related to that component.  If a PA-TNC
      message contained\n   a mix of attributes about different components and a message
      type of\n   only one of those components, the message would only be delivered
      to\n   parties interested in the component type included in the message\n   type,
      so other interested recipients wouldn't see those attributes.\n   The message
      type is composed of two fields: a PA Message Vendor ID\n   and a PA Subtype.
      \ The PA Message Vendor ID identifies the vendor or\n   other organization that
      defined this message type.  The PA Subtype\n   identifies the message type more
      specifically within the set of\n   message types defined by that vendor.  This
      specification defines\n   several IETF Standard PA Subtypes to be used with
      a PA Message Vendor\n   ID of zero (0).  Within this specification, the PA Subtype
      field is\n   used to indicate the type of component (e.g., firewall) involved
      with\n   the message's attributes.  Therefore, for clarity, the PA subtype\n
      \  will be referred to as the \"component type\" in this specification.\n   Vendor-defined
      namespaces may use other semantics for the PA Subtype\n   field as this is outside
      the scope of this specification.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         PB-TNC Header                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                PB-TNC Message of type PB-PA-Message         |\n   |(includes
      PA Message Vendor ID, PA Subtype, and other fields |\n   | used by Posture Broker
      Client and Posture Broker Server for |\n   | routing)                                                    |\n
      \  ===============================================================\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     PA-TNC Message Header                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         PA-TNC Attribute                    |\n   |                  (e.g.,
      Product Information)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         PA-TNC Attribute                    |\n   |                  (e.g.,
      Operational Status)                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 1.  Overview of a PB-TNC batch that contains a PA-TNC message\n   For
      example, if a Posture Broker Client sent a PB-TNC batch that\n   contained a
      PA-TNC message with a message type indicating firewall\n   component, this message
      would be routed by the Posture Broker Server\n   to Posture Validators registered
      to assess firewalls.  Each\n   registered Posture Validator would receive a
      copy of the PA-TNC\n   message including the PA-TNC header and set of attributes.
      \ It is\n   important that each of the attributes included in the PA-TNC message\n
      \  be associated with the firewall component because only the Posture\n   Collector
      and Posture Validator interested in firewalls will receive\n   such messages.\n
      \  If the above message contained both firewall and operating system\n   attributes
      inside a PA-TNC message with a component type of firewall,\n   then any Posture
      Collector and Posture Validator registered to\n   receive operating system messages
      would not receive those attributes,\n   as the messages would only be delivered
      to those registered for\n   firewall messages.\n"
    title: 3.2.  PA-TNC Relationship to PB-TNC
  - contents:
    - "3.3.  PB-PA Posture Collector and Posture Validator Identifiers\n   The PB-PA
      header contains several fields important to the processing\n   of a received
      PA message.  The PA Vendor ID and Subtype are described\n   in the PB-TNC specification
      and above in section 3.2.  Also present\n   in the PB-PA header is a pair of
      fields that identify the Posture\n   Collector and/or Posture Validator involved
      in the exchange.  These\n   fields are used for performing exclusive delivery
      of messages as\n   described in section 3.1 and as an indicator for correlation
      of\n   received attributes.\n   Correlation of attributes is necessary when
      the sending Posture\n   Collector provides posture for multiple implementations
      of a single\n   type of component during an assessment, so the recipient Posture\n
      \  Validators need to know which attributes are describing the same\n   implementation.\n
      \  For example, a single Posture Collector might report attributes on\n   two
      installed VPN implementations on the endpoint.  Because the\n   individual attributes
      do not include an indication of which VPN\n   product they are describing, the
      recipient needs something to perform\n   this correlation.  Therefore, for this
      example, the VPN Posture\n   Collector would need to obtain two Posture Collector
      Identifiers from\n   the Posture Broker Client and consistently use one with
      each of the\n   implementations during an assessment.  The VPN Posture Collector\n
      \  would group all the attributes associated with a particular VPN\n   implementation
      into a single PB-PA message and send the message using\n   the Posture Collector
      Identifier it designates as going with the\n   particular implementation.  This
      approach allows the recipient to\n   recognize when attributes in future assessment
      messages also describe\n   the same component implementation.\n"
    title: 3.3.  PB-PA Posture Collector and Posture Validator Identifiers
  - contents:
    - "3.4.  PA-TNC Messages in PB-TNC\n   As depicted in section 3.2, a PA-TNC message
      consists of a PA-TNC\n   header followed by a sequence of one or more attributes.
      \ The PA-TNC\n   message header (described in section 3.6) and the header for
      each of\n   the PA-TNC attributes (specified in section 4.1) have a fixed type-\n
      \  length-value (TLV) format.  Each PA-TNC message MAY contain a mixture\n   of
      standards-based and vendor-defined attributes identifiable using\n   the type
      portion of the attribute header.  All Posture Collectors and\n   Posture Validators
      compliant with this specification MUST be capable\n   of processing multiple
      attributes in a received PA-TNC message.  A\n   Posture Collector or Posture
      Validator that receives a PA-TNC message\n   can use the attribute header's
      length field to skip any attributes\n   that it does not understand, unless
      the attribute is marked as\n   mandatory to process.\n"
    title: 3.4.  PA-TNC Messages in PB-TNC
  - contents:
    - "3.5.  IETF Standard PA Subtypes\n   This section defines several IETF Standard
      PA Subtypes.  Each PA\n   subtype defined here identifies a specific component
      relevant to the\n   endpoint's posture.  This allows a small set of generic
      PA-TNC\n   attributes (e.g., Product Information) to be used to describe a large\n
      \  number of different components (e.g., operating system, anti-virus,\n   etc.).
      \ It also allows Posture Collectors and Posture Validators to\n   specialize
      in a particular component and only receive PA-TNC messages\n   relevant to that
      component.\n   Value    Integer           Definition\n   -----    -------           ----------\n
      \  0        Testing           Reserved for use in specification\n                              examples,
      experimentation and\n                              testing.\n   1        Operating
      System  Operating system running on the\n                              endpoint\n
      \  2        Anti-Virus        Host-based anti-virus software\n   3        Anti-Spyware
      \     Host-based anti-spyware software\n   4        Anti-Malware      Host-based
      anti-malware (e.g., anti-\n                              bot) software not included
      within\n                              anti-virus or anti-spyware components\n
      \  5        Firewall          Host-based firewall\n   6        IDPS              Host-based
      Intrusion Detection and/or\n                              Prevention Software
      (IDPS)\n   7        VPN               Host-based Virtual Private Network\n                              (VPN)
      software\n   8        NEA Client        NEA client software\n   These PA subtypes
      must be used in a PB-PA message with a PA Message\n   Vendor ID of zero (0)
      indicating an IETF standard type of component\n   (as described in the PB-TNC
      specification [5]).  If these PA subtype\n   values are used with a different
      PA Message Vendor ID, they have a\n   completely different meaning that is not
      defined in this\n   specification.  Posture Collectors and Posture Validators
      MUST NOT\n   require support for particular vendor-specific PA subtypes and
      MUST\n   interoperate with other parties despite any differences in the set
      of\n   vendor-specific PA subtypes supported (although they MAY permit\n   administrators
      to configure them to require support for specific PA\n   subtypes).\n"
    title: 3.5.  IETF Standard PA Subtypes
  - contents:
    - "3.6.  PA-TNC Message Header Format\n   This section describes the format and
      semantics of the PA-TNC header.\n   Every PA-TNC message MUST start with a PA-TNC
      header.  The PA-TNC\n   header provides a common context applying to all of
      the attributes\n   contained within the PA-TNC payload.  The payload consists
      of a\n   sequence of assessment attributes described in section 4.2.\n                        1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    |                    Reserved                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Message Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Version\n      This field indicates the version of the format for the PA-TNC\n
      \     message.  This version is intended to allow for evolution of the\n      PA-TNC
      message header and payload in a manner that can easily be\n      detected by
      message recipients.\n      PA-TNC message senders MUST set this field to 0x01
      for all PA-TNC\n      messages that comply with this specification.  Implementations\n
      \     responding to a PA-TNC message containing a supported version MUST\n      use
      the same version number to minimize the risk of version\n      incompatibility.
      \ Message recipients MUST respond to a PA-TNC\n      message containing an unsupported
      version by sending a Version Not\n      Supported error in a PA-TNC Error attribute
      that is the only PA-\n      TNC attribute in a PA-TNC message with version number
      1.\n      PA-TNC message initiators supporting multiple PA-TNC protocol\n      versions
      SHOULD be able to alter which version of PA-TNC message\n      they send based
      on prior message exchanges with a particular peer\n      Posture Collector or
      Posture Validator.\n   Reserved\n      Reserved for future use.  This field
      MUST be set to 0 on\n      transmission and ignored upon reception.\n   Message
      Identifier\n      This field contains a value that uniquely identifies this
      message,\n      differentiating it from others sent by a particular PA-TNC message\n
      \     sender within this assessment.  This value can be included in the\n      payload
      of a response message to indicate which message was\n      received and caused
      the response.  This value is included in the\n      payload of PA-TNC error
      messages so the party who receives the\n      error message can determine which
      of the messages they had sent\n      caused the error.\n      PA-TNC message
      senders MUST NOT send the same message identifier\n      more than once during
      an assessment.  Message identifiers may be\n      randomly generated or sequenced
      as long as values are not repeated\n      during an assessment message exchange.
      \ PA-TNC message recipients\n      are not required to check for duplicate message
      identifiers.\n"
    title: 3.6.  PA-TNC Message Header Format
  title: 3.  PA-TNC Message Protocol
- contents:
  - "4.  PA-TNC Attributes\n   This section defines the PA-TNC attributes that can
    be carried within\n   a PA-TNC message.  The initial section defines the standard
    attribute\n   header that appears at the start of each attribute in a PA-TNC\n
    \  message.  The second section defines each of the IETF Standard PA-TNC\n   Attributes
    and the final section discusses how vendor-defined PA-TNC\n   attributes can be
    used within a PA-TNC message.  Vendor-defined PA-\n   TNC attributes use the vendor's
    SMI Private Enterprise Number in the\n   Attribute Type field.\n   A PA-TNC message
    MUST contain a PA-TNC header (defined in section\n   3.6.  followed by a sequence
    of zero or more PA-TNC attributes.  All\n   PA-TNC attributes MUST begin with
    a standard PA-TNC attribute header,\n   as defined in section 4.1.  The contents
    of PA-TNC attributes vary\n   widely, depending on their attribute type.  Section
    4.2 defines the\n   IETF Standard PA-TNC Attributes.  Section 4.3 discusses how
    vendor-\n   specific PA-TNC attributes can be defined.\n"
  - contents:
    - "4.1.  PA-TNC Attribute Header\n   Following the PA-TNC message header is a
      sequence of zero or more\n   attributes.  All PA-TNC attributes MUST begin with
      the standard PA-\n   TNC attribute header defined in this subsection.  Each
      attribute\n   described in this specification is represented by a TLV tuple.
      \ The\n   TLV tuple includes an attribute identifier comprised of the Vendor
      ID\n   and Attribute Type (type), the TLV tuple's overall length, and\n   finally
      the attribute's value.  The use of TLV representation was\n   chosen due to
      its flexibility and extensibility and use in other\n   standards.  Recipients
      of an attribute can use the attribute type\n   fields to determine the precise
      syntax and semantics of the attribute\n   value field and the length to skip
      over an unrecognized attribute.\n   The length field is also beneficial when
      a variable-length attribute\n   value is provided.\n   The TLV format does not
      contain an explicit TLV format version\n   number, so every attribute included
      in a particular PA-TNC message\n   MUST use the same TLV format.  Using the
      PA-TNC message version\n   number to indicate the format of all TLV attributes
      within a PA-TNC\n   message allows for future versioning of the TLV format in
      a manner\n   detectable by PA-TNC message recipients.  Similarly, requiring
      all\n   TLV attribute formats to be the same within a PA-TNC message also\n
      \  ensures that recipients compliant with a particular PA-TNC message\n   version
      can at least parse every attribute header and use the length\n   to skip over
      unrecognized attributes.  Finally, all attribute TLVs\n   within a PA-TNC message
      MUST pertain to the same implementation of\n   the component.  This restriction
      is relevant when a single Posture\n   Collector is reporting on multiple implementations
      of a component, so\n   must send multiple PA-TNC messages each including only
      the attributes\n   describing a single implementation.  For more information
      on how\n   Posture Collectors should handle multiple implementations, see\n
      \  section 3.3.\n   Every PA-TNC-compliant TLV attribute MUST use the following
      TLV\n   format:\n                       1                   2                   3\n
      \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Flags     |          PA-TNC Attribute Vendor ID           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     PA-TNC Attribute Type                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                    PA-TNC Attribute Length                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                 Attribute Value (Variable Length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Flags\n      This field defines flags impacting the processing of the\n      associated
      attribute.\n      Bit 0 (0x80) is the NOSKIP flag.  Any Posture Collector or
      Posture\n      Validator that receives an attribute with this flag set to 1
      but\n      does not support this attribute MUST NOT process any part of the\n
      \     PA-TNC message and SHOULD respond with an Attribute Type Not\n      Supported
      error in a PA-TNC error message.\n      In order to avoid taking action on a
      subset of the attributes only\n      to later find an unsupported attribute
      with the NOSKIP flag set,\n      recipients of a multi-attribute PA-TNC message
      might need to scan\n      all of the attributes prior to acting upon any attribute.\n
      \     When the NOSKIP flag is set to 0, recipients SHOULD skip any\n      unsupported
      attributes and continue processing the next attribute.\n      Bit 1-7 are reserved
      for future use.  These bits MUST be set to 0\n      on transmission and ignored
      upon reception.\n   PA-TNC Attribute Vendor ID\n      This field indicates the
      owner of the namespace associated with\n      the PA-TNC Attribute Type.  This
      is accomplished by specifying the\n      24-bit SMI Private Enterprise Number
      Vendor ID of the party who\n      owns the Attribute Type namespace.  IETF Standard
      PA-TNC Attribute\n      Types MUST use zero (0) in this field.\n      The PA-TNC
      Attribute Vendor ID 0xffffff is reserved.  Posture\n      Collectors and Posture
      Validators MUST NOT send PA-TNC messages in\n      which the PA-TNC Attribute
      Vendor ID has this reserved value\n      (0xffffff).  If a Posture Collector
      or Posture Validator receives\n      a message in which the PA-TNC Attribute
      Vendor ID has this\n      reserved value (0xffffff), it SHOULD respond with
      an Invalid\n      Parameter error code in a PA-TNC Error attribute.\n   PA-TNC
      Attribute Type\n      This field defines the type of the attribute included
      in the\n      Attribute Value field.  This field is qualified by the PA-TNC\n
      \     Attribute Vendor ID field so that a particular PA-TNC Attribute\n      Type
      value (e.g., 327) has a completely different meaning\n      depending on the
      value in the PA-TNC Attribute Vendor ID field.\n      Posture Collectors and
      Posture Validators MUST NOT require support\n      for particular vendor-specific
      PA-TNC Attribute Types and MUST\n      interoperate with other parties despite
      any differences in the set\n      of vendor-specific PA-TNC Attribute Types
      supported (although they\n      MAY permit administrators to configure them
      to require support for\n      specific PA-TNC attribute types).\n      If the
      PA-TNC Attribute Vendor ID field has the value zero (0),\n      then the PA-TNC
      Attribute Type field contains an IETF Standard PA-\n      TNC Attribute Type,
      as listed in the IANA registry.  IANA\n      maintains a registry of PA-TNC
      Attribute Types.  Entries in this\n      registry are added by Expert Review
      with Specification Required,\n      following the guidelines in section 7.  Section
      4.2 of this\n      specification defines the initial set of IETF Standard PA-TNC\n
      \     Attribute Types.\n      The PA-TNC Attribute Type 0xffffffff is reserved.
      \ Posture\n      Collectors and Posture Validators MUST NOT send PA-TNC messages
      in\n      which the PA-TNC Attribute Type has this reserved value\n      (0xffffffff).
      \ If a Posture Collector or Posture Validator\n      receives a message in which
      the PA-TNC Attribute Type has this\n      reserved value (0xffffffff), it SHOULD
      respond with an Invalid\n      Parameter error code in a PA-TNC Error attribute.\n
      \  PA-TNC Attribute Length\n      This field contains the length in octets of
      the entire PA-TNC\n      attribute including the PA-TNC Attribute Header (the
      fields Flags,\n      PA-TNC Attribute Vendor ID, PA-TNC Attribute Type, and
      PA-TNC\n      Attribute Length).  Therefore, this value MUST always be at least\n
      \     12.  Any Posture Collector or Posture Validator that receives a\n      message
      with a PA-TNC Attribute Length field whose value is less\n      than 12 SHOULD
      respond with an Invalid Parameter PA-TNC error\n      code.  Similarly, if a
      Posture Collector or Posture Validator\n      receives a PA-TNC message for
      an Attribute Type that has a well-\n      known Attribute Value length (e.g.,
      fixed-length attribute value)\n      and the Attribute Length indicates a different
      value (greater or\n      less than the expected value), the recipient SHOULD
      respond with\n      an Invalid Parameter PA-TNC error code.\n      Implementations
      that do not support the specified PA-TNC Attribute\n      Type can use this
      length to skip over this attribute to the next\n      attribute.  Note that
      while this field is 4 octets the maximum\n      usable attribute length is less
      than 2^32-1 due to limitations of\n      the underlying protocol stack.  Specifically,
      PB-TNC TLV header's\n      Batch Length field is also 32 bits in length.  Therefore,
      the\n      maximum batch that PB-TNC can carry is 2^32-1, so the largest PA-\n
      \     TNC message carried by PB-TNC must be less than 2^32-1 - size of\n      the
      PB-TNC header (see section 4.1 of PB-TNC for more details).\n   Attribute Value\n
      \     This field varies depending on the particular type of attribute\n      being
      expressed.  The contents of this field for each of the IETF\n      Standard
      PA-TNC Attribute Types are defined in section 4.2.\n"
    title: 4.1.  PA-TNC Attribute Header
  - contents:
    - "4.2.  IETF Standard PA-TNC Attribute Types\n   This section defines an initial
      set of IETF Standard PA-TNC Attribute\n   Types.  These Attribute Types MUST
      always be used with a PA-TNC\n   Vendor ID of zero (0).  If these PA-TNC Attribute
      Type values are\n   used with a different PA-TNC Vendor ID, they have a completely\n
      \  different meaning that is not defined in this specification.\n   The following
      table briefly describes each attribute and defines the\n   numeric value to
      be used in the PA-TNC Attribute Type field of the\n   PA-TNC Attribute Header.
      \ Later subsections provide detailed\n   specifications for each PA-TNC Attribute
      Value.\n   Number  Integer                  Description\n   ------  -------
      \                 -----------\n   0       Testing                  Reserved
      for use in\n                                    specification examples,\n                                    experimentation,
      and testing.\n   1       Attribute Request        Contains a list of attribute\n
      \                                   type values defining the\n                                    attributes
      desired from the\n                                    Posture Collectors.\n
      \  2       Product Information      Manufacturer and product\n                                    information
      for the component.\n   3       Numeric Version          Numeric version of the\n
      \                                   component.\n   4       String Version           String
      version of the\n                                    component.\n   5       Operational
      Status       Describes whether the component\n                                    is
      running on the endpoint.\n   6       Port Filter              Lists the set
      of ports (e.g.,\n                                    TCP port 80 for HTTP) that
      are\n                                    allowed or blocked on the\n                                    endpoint.\n
      \  7       Installed Packages       List of software packages\n                                    installed
      on endpoint that\n                                    provide the requested\n
      \                                   component.\n   8       PA-TNC Error             PA-TNC
      message or attribute\n                                    processing error.\n
      \  9       Assessment Result        Result of the assessment\n                                    performed
      by a Posture\n                                    Validator.\n   10      Remediation
      Instructions Instructions for remediation\n                                    generated
      by a Posture\n                                    Validator.\n   11      Forwarding
      Enabled       Indicates whether packet\n                                    forwarding
      has been enabled\n                                    between different interfaces
      on\n                                    the endpoint.\n   12      Factory Default
      Password Indicates whether the endpoint\n           Enabled                  has
      a factory default password\n                                    enabled.\n   The
      following subsections discuss the usage, format, and semantics of\n   the Attribute
      Value field for each IETF Standard PA-TNC Attribute\n   Type.\n"
    - contents:
      - "4.2.1.  Attribute Request\n   This PA-TNC Attribute Type allows a Posture
        Validator to request\n   certain attributes from the registered set of Posture
        Collectors.\n   All Posture Collectors that implement any of the IETF Standard
        PA\n   Subtypes defined in this specification SHOULD support receiving and\n
        \  processing this attribute type for at least those PA subtypes.  This\n
        \  requirement is only a \"should\" because there are deployment scenarios\n
        \  (e.g., see section A.1) where the Posture Collectors proactively send\n
        \  a set of attributes at the start of an assessment (e.g., based upon\n   local
        policy), so does not need to support Posture Validator\n   requested attributes.
        \ Posture Collectors that receive but do not\n   support the Attribute Request
        attribute MUST respond with an\n   Attribute Type Not Supported PA-TNC error
        code.  Posture Collectors\n   that receive and process this attribute MAY
        choose to send all, a\n   subset, or none of the requested attributes but
        MUST NOT send\n   attributes that were not requested (except Error attributes).
        \ All\n   Posture Validators that implement any of the IETF Standard PA\n
        \  Subtypes defined in this specification SHOULD support sending this\n   attribute
        type for at least those PA subtypes.\n   Posture Validators MUST NOT include
        this attribute type in an\n   Attribute Request attribute.  It does not make
        sense for a Posture\n   Validator to request that a Posture Collector send
        an Attribute\n   Request attribute.\n   For this attribute type, the PA-TNC
        Attribute Vendor ID field MUST be\n   set to zero (0) and the PA-TNC Attribute
        Type field MUST be set to 1.\n   The following diagram illustrates the format
        and contents of the\n   Attribute Value field for this attribute type.  The
        text after this\n   diagram describes the fields shown here.\n   Note that
        this diagram shows two attribute types.  The actual number\n   of attribute
        types included in an Attribute Request attribute can\n   vary from one to
        a large number (limited only by the maximum message\n   and length supported
        by the underlying PT protocol).  However, each\n   Attribute Request MUST
        contain at least one attribute type.  Because\n   the length of a PA-TNC Attribute
        Vendor ID paired with a PA-TNC\n   Attribute Type and a 1-octet Reserved field
        is always 8 octets, the\n   number of requested attributes can be easily computed
        using the PA-\n   TNC Attribute Length field by subtracting the number of
        octets in the\n   PA-TNC Attribute Header and dividing by 8.  If the PA-TNC
        Attribute\n   Length field is invalid, Posture Collectors SHOULD respond with
        an\n   Invalid Parameter PA-TNC error code.\n                        1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Reserved    |           PA-TNC Attribute Vendor ID          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      PA-TNC Attribute Type                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Reserved    |           PA-TNC Attribute Vendor ID          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      PA-TNC Attribute Type                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved\n      Reserved for future use.  This field MUST be set to 0 on\n
        \     transmission and ignored upon reception.\n   PA-TNC Attribute Vendor
        ID\n      This field contains the SMI Private Enterprise Number of the\n      organization
        that controls the namespace for the following PA-TNC\n      Attribute Type.
        \ This field enables IETF Standard PA-TNC\n      Attributes and vendor-defined
        PA-TNC attributes to be used without\n      potential collisions.\n      Any
        IETF Standard PA-TNC Attribute Types defined in section 4.2\n      MUST use
        zero (0) in this field.  Vendor-defined attributes MUST\n      use the SMI
        Private Enterprise Number of the organization that\n      defined the attribute.\n
        \  PA-TNC Attribute Type\n      The PA-TNC Attribute Type field (together
        with the PA-TNC Vendor\n      ID field) indicates the specific attribute requested.
        \ Some IETF\n      Standard PA-TNC Attribute Types MUST NOT be requested using
        this\n      field (e.g., requesting a PA-TNC Error attribute).  This is\n
        \     explicitly indicated in the description of those PA-TNC Attribute\n
        \     Types.  Any Posture Collector or Posture Validator that receives\n      an
        Attribute Request containing one of the prohibited Attribute\n      Types
        SHOULD respond with an Invalid Parameter error in a PA-TNC\n      error message.\n"
      title: 4.2.1.  Attribute Request
    - contents:
      - "4.2.2.  Product Information\n   This PA-TNC Attribute Type contains identifying
        information about a\n   product that implements the component specified in
        the PA Subtype\n   field, as described in section 3.5.  For example, if the
        PA Subtype\n   is Anti-Virus, this attribute would contain information identifying\n
        \  an anti-virus product installed on the endpoint.\n   All Posture Collectors
        that implement any of the IETF Standard PA\n   Subtypes defined in this specification
        MUST support sending this\n   attribute type, at least for those PA subtypes.
        \ Whether a particular\n   Posture Collector actually sends this attribute
        type SHOULD still be\n   governed by local privacy and security policies.
        \ All Posture\n   Validators that implement any of the IETF Standard PA Subtypes\n
        \  defined in this specification MUST support receiving this attribute\n   type,
        at least for those PA subtypes.  Posture Validators MUST NOT\n   send this
        attribute type.\n   For this attribute type, the PA-TNC Attribute Vendor ID
        field MUST be\n   set to zero (0) and the PA-TNC Attribute Type field MUST
        be set to 2.\n   The value in the PA-TNC Attribute Length field will vary,
        depending\n   on the length of the Product Name field.  However, the value
        in the\n   PA-TNC Attribute Length field MUST be at least 17 because this
        is the\n   length of the fixed-length fields in the PA-TNC Attribute Header
        and\n   the fixed-length fields in this attribute type.  If the PA-TNC\n   Attribute
        Length field is less than the size of these fixed-length\n   fields, implementations
        SHOULD respond with an Invalid Parameter PA-\n   TNC error code.\n   This
        attribute type includes both numeric and textual identifiers for\n   the organization
        that created the product (the \"product creator\") and\n   for the product
        itself.  For automated processing, numeric\n   identifiers are superior because
        they are less ambiguous and more\n   efficient.  However, numeric identifiers
        are only available if the\n   product creator has assigned them.  Therefore,
        a textual identifier\n   is also included.  This textual identifier has the
        additional benefit\n   that it may be easier for humans to read (although
        this benefit is\n   minimal since the primary purpose of this attribute is
        automated\n   assessment).\n   The following diagram illustrates the format
        and contents of the\n   Attribute Value field for this attribute type.  The
        text after this\n   diagram describes the fields shown here.\n                        1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |               Product Vendor ID               |  Product ID   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Product ID   |         Product Name (Variable Length)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Product Vendor ID\n      This field contains the SMI Private Enterprise
        Number for the\n      product creator.  If the SMI PEN for the product creator
        is\n      unknown or if the product creator does not have an SMI PEN, the\n
        \     Product Vendor ID field MUST be set to 0 and the identity of the\n      product
        creator SHOULD be included in the Product Name along with\n      the name
        of the product.\n   Product ID\n      This field identifies the product using
        a numeric identifier\n      assigned by the product creator.  If this Product
        ID value is\n      unknown or if the product creator has not assigned such
        a value,\n      this field MUST be set to 0.  If the Product Vendor ID is
        0, this\n      field MUST be set to 0.  In any case, the name of the product\n
        \     SHOULD be included in the Product Name field.\n      Note that a particular
        Product ID value (e.g., 635) will have\n      completely different meanings
        depending on the Product Vendor ID.\n      Each Product Vendor ID defines
        a different space of Product ID\n      values.  Product creators are encouraged
        to publish lists of\n      Product ID values for their products.\n   Product
        Name\n      This variable-length field contains a UTF-8 [2] string identifying\n
        \     the product (e.g., \"Symantec Norton AntiVirus(TM) 2008\") in enough\n
        \     detail to unambiguously distinguish it from other products from\n      the
        product creator.  Products whose creator is known, but does\n      not have
        a registered SMI Private Enterprise Number, SHOULD be\n      represented using
        a combination of the creator name and full\n      product name (e.g., \"Ubuntu(R)
        IPtables\" for the IPtables firewall\n      in the Ubuntu distribution of
        Linux).  If the product creator's\n      SMI Private Enterprise Number is
        included in the Product Vendor ID\n      field, the product creator's name
        may be omitted from this field.\n      The length of this field can be determined
        by starting with the\n      value in the PA-TNC Attribute Length field in
        the PA-TNC Attribute\n      Header and subtracting the size of the fixed-length
        fields in that\n      header (12) and the size of the fixed-length fields
        in this\n      attribute (5).  If the PA-TNC Attribute Length field is less
        than\n      the size of these fixed-length fields, implementations SHOULD\n
        \     respond with an Invalid Parameter PA-TNC error code.\n"
      title: 4.2.2.  Product Information
    - contents:
      - "4.2.3. Numeric Version\n   This PA-TNC Attribute Type contains numeric version
        information for a\n   product on the endpoint that implements the component
        specified in\n   the PA Subtype field, as described in section 3.5.  For example,
        if\n   the PA Subtype is Operating System, this attribute would contain\n
        \  numeric version information for the operating system installed on the\n
        \  endpoint.  The version information in this attribute is associated\n   with
        a particular product, so Posture Validators are expected to also\n   possess
        the corresponding Product Information attribute when\n   interpreting this
        attribute.\n   All Posture Collectors that implement the IETF Standard PA
        Subtype\n   for Operating System SHOULD support sending this attribute type,
        at\n   least for the Operating System PA subtype.  Other Posture Collectors\n
        \  MAY support sending this attribute type.  Whether a particular\n   Posture
        Collector actually sends this attribute type SHOULD still be\n   governed
        by local privacy and security policies.  All Posture\n   Validators that implement
        the IETF Standard PA Subtype for Operating\n   System SHOULD support receiving
        this attribute type, at least for the\n   Operating System PA subtype.  Other
        Posture Validators MAY support\n   receiving this attribute type.  A Posture
        Validator that does not\n   support receiving this attribute type SHOULD simply
        ignore attributes\n   with this type.  Posture Validators MUST NOT send this
        attribute\n   type.\n   For this attribute type, the PA-TNC Attribute Vendor
        ID field MUST be\n   set to zero (0) and the PA-TNC Attribute Type field MUST
        be set to 3.\n   The value in the PA-TNC Attribute Length field MUST be 28.
        \ If the\n   PA-TNC Attribute Length field is less than the size of these
        fixed-\n   length fields, implementations SHOULD respond with an Invalid\n
        \  Parameter PA-TNC error code.\n   This attribute type includes numeric values
        for the product version\n   information, enabling Posture Validators to do
        comparative operations\n   on the version.  Some Posture Collectors may not
        be able to determine\n   some or all of this information for a product.  However,
        this\n   attribute can be especially useful for describing the version of
        the\n   operating system, where numeric version numbers are generally\n   available.\n
        \  The following diagram illustrates the format and contents of the\n   Attribute
        Value field for this attribute type.  The text after this\n   diagram describes
        the fields shown here.\n                        1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Major Version Number                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Minor Version Number                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                            Build Number                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |      Service Pack Major       |      Service Pack Minor       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Major Version Number\n      This field contains the major version number
        for the product, if\n      applicable.  If unused or unknown, this field SHOULD
        be set to 0.\n   Minor Version Number\n      This field contains the minor
        version number for the product, if\n      applicable.  If unused or unknown,
        this field SHOULD be set to 0.\n   Build Number\n      This field contains
        the build number for the product, if\n      applicable.  This may provide
        more granularity than the minor\n      version number, as many builds may
        occur leading up to an official\n      release, and all these builds may share
        a single major and minor\n      version number.  If unused or unknown, this
        field SHOULD be set to\n      0.\n   Service Pack Major\n      This field
        contains the major version number of the service pack\n      for the product,
        if applicable.  If unused or unknown, this field\n      SHOULD be set to 0.\n
        \  Service Pack Minor\n      This field contains the minor version number
        of the service pack\n      for the product, if applicable.  If unused or unknown,
        this field\n      SHOULD be set to 0.\n"
      title: 4.2.3. Numeric Version
    - contents:
      - "4.2.4.  String Version\n   This PA-TNC Attribute Type contains string version
        information for a\n   product on the endpoint that implements the component
        specified in\n   the PA Subtype field, as described in section 3.5.  For example,
        if\n   the PA Subtype is Firewall, this attribute would contain string\n   version
        information for a host-based firewall product installed on\n   the endpoint
        (if any).  The version information in this attribute is\n   associated with
        a particular product, so Posture Validators are\n   expected to also possess
        the corresponding Product Information\n   attribute when interpreting this
        attribute.\n   All Posture Collectors that implement any of the IETF Standard
        PA\n   Subtypes defined in this document MUST support sending this attribute\n
        \  type, at least for those PA subtypes.  Other Posture Collectors MAY\n   support
        sending this attribute type.  Whether a particular Posture\n   Collector actually
        sends this attribute type SHOULD still be governed\n   by local privacy and
        security policies.  All Posture Validators that\n   implement any of the IETF
        Standard PA Subtypes defined in this\n   document MUST support receiving this
        attribute type, at least for\n   those PA subtypes.  Other Posture Validators
        MAY support receiving\n   this attribute type.  Posture Validators MUST NOT
        send this attribute\n   type.\n   For this attribute type, the PA-TNC Attribute
        Vendor ID field MUST be\n   set to zero (0) and the PA-TNC Attribute Type
        field MUST be set to 4.\n   The value in the PA-TNC Attribute Length field
        will vary, depending\n   on the length of the Component Version Number, Internal
        Build Number,\n   and Configuration Version Number fields.  However, the value
        in the\n   PA-TNC Attribute Length field MUST be at least 15 because this
        is the\n   length of the fixed-length fields in the PA-TNC Attribute Header
        and\n   the fixed-length fields in this attribute type.  If the PA-TNC\n   Attribute
        Length field is less than the size of these fixed-length\n   fields or does
        not match the length indicated by the sum of the\n   fixed-length and variable-length
        fields, implementations SHOULD\n   respond with an Invalid Parameter PA-TNC
        error code.\n   The following diagram illustrates the format and contents
        of the\n   Attribute Value field for this attribute type.  The text after
        this\n   diagram describes the fields shown here.\n                        1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Version Len  |   Product Version Number (Variable Length)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Build Num Len |   Internal Build Number (Variable Length)     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Config. Len  | Configuration Version Number (Variable Length)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Version Len\n      This field defines the number of octets in the Product
        Version\n      Number field.  If the product version number is unavailable
        or\n      unknown, this field MUST be set to 0 and the Product Version\n      Number
        field will be zero length (effectively not present).\n   Product Version Number\n
        \     This field contains a UTF-8 string identifying the version of the\n
        \     component (e.g., \"1.12.23.114\").  This field MUST be sized to fit\n
        \     the version string and MUST NOT include extra octets for padding\n      or
        NUL character termination.\n      Various products use a wide range of different
        formats and\n      semantics for version strings.  Some use alphabetic characters,\n
        \     white space, and punctuation.  Some consider version \"1.21\" to be\n
        \     later than version \"1.3\" and some earlier.  Therefore, the syntax\n
        \     and semantics of this string are not defined.\n   Build Num Len\n      This
        field defines the number of octets in the Internal Build\n      Number field.
        \ For products where the internal build number is\n      unavailable or unknown,
        this field MUST be set to 0 and the\n      Internal Build Number field will
        be zero length (effectively not\n      present).\n   Internal Build Number\n
        \     This field contains a UTF-8 string identifying the engineering\n      build
        number of the product.  This field MUST be sized to fit the\n      build number
        string and MUST NOT include extra octets for padding\n      or NUL character
        termination.  The syntax and semantics of this\n      string are not defined.\n
        \  Config. Len\n      This field defines the number of octets in the Configuration\n
        \     Version Number field.  If the configuration version number is\n      unavailable
        or unknown, this field MUST be set to 0 and the\n      Configuration Version
        Number field will be zero length\n      (effectively not present).\n   Configuration
        Version Number\n      This field contains a UTF-8 string identifying the version
        of the\n      configuration used by the component.  This version SHOULD\n
        \     represent the overall configuration version even if several\n      configuration
        policy files or settings are used.  Posture\n      Collectors MAY include
        multiple version numbers in this single\n      string if a single version
        is not practical.  This field MUST be\n      sized to fit the version string
        and MUST NOT include extra octets\n      for padding or NUL character termination.\n
        \     Various products use a wide range of different formats for version\n
        \     strings.  Some use alphabetic characters, white space, and\n      punctuation.
        \ Some consider version \"1.21\" to be later than\n      version \"1.3\" and
        some earlier.  In addition, some Posture\n      Collectors may place multiple
        configuration version numbers in\n      this single string.  Therefore, the
        syntax and semantics of this\n      string are not defined.\n"
      title: 4.2.4.  String Version
    - contents:
      - "4.2.5.  Operational Status\n   This PA-TNC Attribute Type describes the operational
        status of a\n   product that can implement the component specified in the
        PA Subtype\n   field, as described in section 3.5. For example, if the PA
        Subtype is\n   Anti-Spyware, this attribute would contain information about
        the\n   operational status of a host-based anti-spyware product that may or\n
        \  may not be installed on the endpoint.\n   Posture Collectors that implement
        the IETF Standard PA Subtype for\n   Operating System or VPN MAY support sending
        this attribute type for\n   those PA subtypes.  Posture Collectors that implement
        other IETF\n   Standard PA Subtypes defined in this specification SHOULD support\n
        \  sending this attribute type for those PA subtypes.  Other Posture\n   Collectors
        MAY support sending this attribute type.  Whether a\n   particular Posture
        Collector actually sends this attribute type\n   SHOULD still be governed
        by local privacy and security policies.\n   Posture Validators that implement
        the IETF Standard PA Subtype for\n   Operating System or VPN MAY support receiving
        this attribute type, at\n   least for those PA subtypes.  Posture Validators
        that implement other\n   IETF Standard PA Subtypes defined in this specification
        SHOULD\n   support receiving this attribute type, at least for those PA\n
        \  subtypes.  Other Posture Validators MAY support receiving this\n   attribute
        type.  A Posture Validator that does not support receiving\n   this attribute
        type SHOULD simply ignore attributes with this type.\n   Posture Validators
        MUST NOT send this attribute type.\n   For this attribute type, the PA-TNC
        Attribute Vendor ID field MUST be\n   set to zero (0) and the PA-TNC Attribute
        Type field MUST be set to 5.\n   The value in the PA-TNC Attribute Length
        field MUST be 36.  If the\n   PA-TNC Attribute Length field does not have
        this value,\n   implementations SHOULD respond with an Invalid Parameter PA-TNC
        error\n   code.\n   The following diagram illustrates the format and contents
        of the\n   Attribute Value field for this attribute type.  The text after
        this\n   diagram describes the fields shown here.\n                        1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    Status     |     Result    |         Reserved              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                          Last Use                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Last Use (continued)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Last Use (continued)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Last Use (continued)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Last Use (continued)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Status\n      This field gives the operational status of the product.  The\n
        \     following table lists the values currently defined for this field.\n
        \     Value   Description\n      -----   -----------\n      0       Unknown
        or other\n      1       Not installed\n      2       Installed but not operational\n
        \     3       Operational\n      If a Posture Validator receives a value for
        this field that it\n      does not recognize, it SHOULD treat this value as
        equivalent to\n      the value 0.\n   Result\n      This field contains the
        result of the last use of the product.\n      The following table lists the
        values currently defined for this\n      field.\n      Value   Description\n
        \     -----   -----------\n      0       Unknown or other\n      1       Successful
        use with no errors detected\n      2       Successful use with one or more
        errors detected\n      3       Unsuccessful use (e.g., aborted)\n      Posture
        Collectors SHOULD set this field to 0 if the Status field\n      contains
        a value of 1 (Not installed) or 2 (Installed but not\n      operational).
        \ If a Posture Validator receives a value for this\n      field that it does
        not recognize, it SHOULD treat this value as\n      equivalent to the value
        0.\n   Reserved\n      This field is reserved for future use.  The field MUST
        be set to 0\n      on transmission and ignored upon reception.\n   Last Use\n
        \     This field contains the date and time of the last use of the\n      component.
        \ The Last Use date and time MUST be represented as an\n      RFC 3339 [4]
        compliant ASCII string in Coordinated Universal Time\n      (UTC) time with
        the additional restrictions that the 't' delimiter\n      and the 'z' suffix
        MUST be capitalized and fractional seconds\n      (time-secfrac) MUST NOT
        be included.\n      This field conforms to the date-time ABNF production from
        section\n      5.6 of RFC 3339 with the above restrictions.  Leap seconds
        are\n      permitted and Posture Validators MUST support them.\n      The
        last use string MUST NOT be NUL terminated or padded in any\n      way.  If
        the last use time is not known, not applicable, or cannot\n      be represented
        in this format, the Posture Collector MUST set this\n      field to the value
        \"0000-00-00T00:00:00Z\" (allowing this field to\n      be fixed length).
        \ Note that this particular reserved value is NOT\n      a valid RFC 3339
        date and time and MUST NOT be used for any other\n      purpose in this field.\n
        \     This encoding produces a string that is easy to read, parse, and\n      interpret.
        \ The format (more precisely defined in RFC 3339) is\n      YYYY-MM-DDTHH:MM:SSZ,
        resulting in one and only one representation\n      for each second in UTC
        time from year 0000 to year 9999.  For\n      example, 9:05:00AM EST (GMT-0500)
        on January 19, 1995 can be\n      represented as \"1995-01-19T14:05:00Z\".
        \ The length of this field\n      is always 20 octets.\n"
      title: 4.2.5.  Operational Status
    - contents:
      - "4.2.6.  Port Filter\n   This PA-TNC Attribute Type provides the list of port
        numbers and\n   associated protocols (e.g., TCP and UDP) that are currently
        blocked\n   or allowed by a host-based firewall on the endpoint.\n   Posture
        Collectors that implement the IETF Standard PA Subtype for\n   Firewall or
        VPN SHOULD support sending this attribute type for those\n   PA subtypes.
        \ Posture Collectors that implement other IETF Standard\n   PA Subtypes defined
        in this specification MUST NOT support sending\n   this attribute type for
        those PA subtypes.  Other Posture Collectors\n   MAY support sending this
        attribute type, if it is appropriate to\n   their PA subtype.  Whether a particular
        Posture Collector actually\n   sends this attribute type SHOULD still be governed
        by local privacy\n   and security policies.  Posture Validators that implement
        the IETF\n   Standard PA Subtype for Firewall or VPN SHOULD support receiving
        this\n   attribute type, at least for those PA subtypes.  Posture Validators\n
        \  that implement other IETF Standard PA Subtypes defined in this\n   specification
        MUST NOT support receiving this attribute type for\n   those PA subtypes.
        \ Other Posture Validators MAY support receiving\n   this attribute type.
        \ A Posture Validator that does not support\n   receiving this attribute type
        SHOULD simply ignore attributes with\n   this type.  Posture Validators MUST
        NOT send this attribute type.\n   For this attribute type, the PA-TNC Attribute
        Vendor ID field MUST be\n   set to zero (0) and the PA-TNC Attribute Type
        field MUST be set to 6.\n   The following diagram illustrates the format and
        contents of the\n   Attribute Value field for this attribute type.  The text
        after this\n   diagram describes the fields shown here.\n   Note that this
        diagram shows two Protocol/Port Number pairs.  The\n   actual number of Protocol/Port
        Number pairs included in a Port Filter\n   attribute can vary from one to
        a large number (limited only by the\n   maximum message and length supported
        by the underlying PT protocol).\n   However, each Port Filter attribute MUST
        contain at least one\n   Protocol/Port Number pair.  Because the length of
        a Protocol/Port\n   Number pair with the Reserved field and B flag is always
        4 octets,\n   the number of Protocol/Port Number pairs can be easily computed
        using\n   the PA-TNC Attribute Length field by subtracting the number of octets\n
        \  in the PA-TNC Attribute Header and dividing by 4.  If the PA-TNC\n   Attribute
        Length field is invalid, Posture Validators SHOULD respond\n   with an Invalid
        Parameter PA-TNC error code.\n                        1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Reserved  |B|    Protocol   |         Port Number           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Reserved  |B|    Protocol   |         Port Number           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved\n      This field is reserved for future use.  It MUST be set
        to 0 on\n      transmission and ignored upon reception.\n   B Flag (Blocked
        or Allowed Port)\n      This single-bit field indicates whether the following
        port is\n      blocked or allowed.  This bit MUST be set to 1 if the protocol
        and\n      port combination is blocked.  Otherwise, this field MUST be set
        to\n      0.  This field was provided to allow for more abbreviated\n      reporting
        of the port filtering policy (e.g., when all ports are\n      blocked except
        a few, the Posture Collector can just list the few\n      that are allowed).\n
        \     Posture Collectors MUST NOT provide a mixed list of blocked and\n      non-blocked
        ports for a particular protocol.  To be more precise,\n      a Posture Collector
        MUST NOT include two Protocol/Port Number\n      pairs in a single Port Filter
        attribute where the protocol number\n      is the same but the B flag is different.
        \ Also, Posture Collectors\n      MUST NOT list the same Protocol and Port
        Number combination twice\n      in a Port List attribute.\n      Posture Collectors
        MAY list all blocked ports for one protocol and\n      all allowed ports for
        a different protocol in a single Port List\n      attribute, using the B flag
        to indicate whether each entry is\n      blocked.  For example, a Posture
        Collector might list all the\n      blocked TCP ports but only list the allowed
        UDP ports.  However,\n      it MUST NOT list some blocked TCP ports and some
        other allowed TCP\n      ports.\n   Protocol\n      This field contains the
        transport protocol number (e.g., tcp is 6)\n      being blocked or allowed.
        \ The values used in this field are the\n      same ones used in the IPv4
        Protocol and IPv6 Next Header fields.\n      The IANA already maintains the
        Assigned Internet Protocol Numbers\n      registry of these values for use
        in this field.\n   Port Number\n      This field contains the transport protocol
        (e.g., tcp) port number\n      being blocked or allowed.  The values used
        in this field are\n      specific to the protocol identified by the Protocol
        field.  The\n      IANA maintains registries for well-known and user-requested
        TCP\n      and UDP port numbers for use in this field.\n"
      title: 4.2.6.  Port Filter
    - contents:
      - "4.2.7.  Installed Packages\n   This PA-TNC Attribute Type contains a list
        of the installed packages\n   that comprise a product on the endpoint that
        implements the component\n   specified in the PA Subtype field, as described
        in section 3.5.  This\n   allows a Posture Validator to check which packages
        are installed for\n   a particular product and which versions of those packages
        are\n   installed.\n   Posture Collectors that implement any of the IETF Standard
        PA\n   Subtypes defined in this document SHOULD support sending this\n   attribute
        type for those PA subtypes.  Other Posture Collectors MAY\n   support sending
        this attribute type, if it is appropriate to their PA\n   subtype.  Whether
        a particular Posture Collector actually sends this\n   attribute type SHOULD
        still be governed by local privacy and security\n   policies.  Posture Validators
        that implement any of the IETF Standard\n   PA Subtypes defined in this document
        SHOULD support receiving this\n   attribute type, at least for those PA subtypes.
        \ Other Posture\n   Validators MAY support receiving this attribute type.
        \ A Posture\n   Validator that does not support receiving this attribute type
        SHOULD\n   simply ignore attributes with this type.  Posture Validators MUST
        NOT\n   send this attribute type.\n   This attribute type can be quite long,
        especially for the Operating\n   System PA subtype.  This can cause problems,
        especially with 802.1X\n   and other limited transport protocols.  Therefore,
        Posture Collectors\n   SHOULD NOT send this attribute unless specifically
        requested to do so\n   using the Attribute Request attribute or otherwise
        configured to do\n   so.  Also, Posture Validators SHOULD NOT request this
        attribute\n   unless the transport protocol in use can support the large amount
        of\n   data that may be sent in response.\n   For this attribute type, the
        PA-TNC Attribute Vendor ID field MUST be\n   set to zero (0) and the PA-TNC
        Attribute Type field MUST be set to 7.\n   The value in the PA-TNC Attribute
        Length field will vary, depending\n   on the number of packages and the length
        of the Package Name and\n   Package Version Number fields for those packages.
        \ However, the value\n   in the PA-TNC Attribute Length field MUST be at least
        16 because this\n   is the length of the fixed-length fields in the PA-TNC
        Attribute\n   Header and the fixed-length fields in this attribute type.  If
        the\n   PA-TNC Attribute Length field is less than the size of these fixed-\n
        \  length fields or does not match the length indicated by the sum of\n   the
        fixed-length and variable-length fields, implementations SHOULD\n   respond
        with an Invalid Parameter PA-TNC error code.\n   The following diagram illustrates
        the format and contents of the\n   Attribute Value field for this attribute
        type.  The text after this\n   diagram describes the fields shown here.\n
        \  Note that this diagram shows an attribute containing information on\n   one
        package.  The actual number of package descriptions included in\n   an Installed
        Packages attribute is indicated by the Package Count\n   field.  This value
        may vary from zero to a large number (up to 65535,\n   if the underlying PT
        protocol can support that many).  If this number\n   is not sufficient, specialized
        patch management software should be\n   employed that can simply report compliance
        with a pre-established\n   patch policy.\n                        1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |          Reserved             |         Package Count         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Pkg Name Len  |        Package Name (Variable Length)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Version Len  |    Package Version Number (Variable Length)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved\n      This field is reserved for future use.  The field MUST
        be set to 0\n      on transmission and ignored upon reception.\n   Package
        Count\n      This field is an unsigned 16-bit integer that indicates the number\n
        \     of packages listed in this attribute.  For each package so\n      indicated,
        a Pkg Name Len, Package Name, Version Len, and Package\n      Version Number
        field is included in the attribute.\n   Pkg Name Len\n      This field is
        an unsigned 8-bit integer that indicates the length\n      of the Package
        Name field in octets.  This field may be zero if a\n      Package Name is
        not available.\n   Package Name\n      This field contains the name of the
        package associated with the\n      product.  This field is a UTF-8 encoded
        character string whose\n      octet length is given by the Pkg Name Len field.
        \ This field MUST\n      NOT include extra octets for padding or NUL character
        termination.\n      The syntax and semantics of this name are not specified
        in this\n      document, since they may vary across products and/or operating\n
        \     systems.  Posture Collectors MAY list two packages with the same\n      name
        in a single Installed Packages attribute.  The meaning of\n      doing so
        is not defined here.\n   Version Len\n      This field is an unsigned 8-bit
        integer that indicates the length\n      of the Package Version Number field
        in octets.  This field may be\n      zero if a Package Version Number is not
        available.\n   Package Version Number\n      This field contains the version
        string for the package named in\n      the previous Package Name field.  This
        field is a UTF-8 encoded\n      character string whose octet length is given
        by the Version Len\n      field.  This field MUST NOT include extra octets
        for padding or\n      NUL character termination.  The syntax and semantics
        of this\n      version string are not specified in this document, since they
        may\n      vary across products and/or operating systems.  Posture Collectors\n
        \     MAY list two packages with the same Package Version Number (and\n      even
        the same Package Name and Package Version Number) in a single\n      Installed
        Packages attribute.  The meaning of doing so is not\n      defined here.\n"
      title: 4.2.7.  Installed Packages
    - contents:
      - "4.2.8.  PA-TNC Error\n   This PA-TNC Attribute Type contains an error code
        and supplemental\n   information regarding an error pertaining to PA-TNC.\n
        \  All Posture Collectors and Posture Validators that implement any of\n   the
        IETF Standard PA Subtypes defined in this specification MUST\n   support sending
        and receiving this attribute type, at least for those\n   PA subtypes.\n   For
        this attribute type, the PA-TNC Attribute Vendor ID field MUST be\n   set
        to zero (0) and the PA-TNC Attribute Type field MUST be set to 8.\n   The
        value in the PA-TNC Attribute Length field will vary, depending\n   on the
        length of the Error Information field.  However, the value in\n   the PA-TNC
        Attribute Length field MUST be at least 20 because this is\n   the length
        of the fixed-length fields in the PA-TNC Attribute Header\n   and the fixed-length
        fields in this attribute type.\n   A PA-TNC error code SHOULD be sent with
        the same PA Message Vendor ID\n   and PA Subtype used by the PA-TNC message
        that caused the error so\n   that the error code is sent to the party who
        sent the offending PA-\n   TNC message.  Other measures (such as setting PB-TNC's
        EXCL flag and\n   Posture Collector Identifier or Posture Validator Identifier
        fields)\n   SHOULD also be taken to attempt to ensure that only the party
        who\n   sent the offending message receives the error.\n   When a PA-TNC error
        code is received, the recipient MUST NOT respond\n   with a PA-TNC error code
        because this could result in an infinite\n   loop of errors.  Instead, the
        recipient MAY log the error, modify its\n   behavior to attempt to avoid the
        error (attempting to avoid loops or\n   long strings of errors), ignore the
        error, terminate the assessment,\n   or take other action as appropriate (as
        long as it is consistent with\n   the requirements of this specification).\n
        \  Posture Validators MUST NOT include this attribute type in an\n   Attribute
        Request attribute.  It does not make sense for a Posture\n   Validator to
        request that a Posture Collector send a PA-TNC Error\n   attribute.\n   The
        following diagram illustrates the format and contents of the\n   Attribute
        Value field for this attribute type.  The text after this\n   diagram describes
        the fields shown here.\n                        1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    Reserved   |            PA-TNC Error Code Vendor ID        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        PA-TNC Error Code                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                 Error Information (Variable Length)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved\n      This field is reserved for future use.  This field MUST
        be set to\n      0 on transmission and ignored upon reception.\n   PA-TNC
        Error Code Vendor ID\n      This field contains the SMI Private Enterprise
        Number for the\n      organization that defined the PA-TNC Error Code that
        is being used\n      in the attribute.  For IETF Standard PA-TNC Error Code
        values this\n      field MUST be set to zero (0).\n   PA-TNC Error Code\n
        \     This field contains the PA-TNC Error Code being reported in this\n      attribute.
        \ Note that a particular PA-TNC Error Code value will\n      have completely
        different meanings depending on the PA-TNC Error\n      Code Vendor ID.  Each
        PA-TNC Error Code Vendor ID defines a\n      different space of PA-TNC Error
        Code values.  Posture Collectors\n      and Posture Validators MUST NOT require
        support for particular\n      vendor-specific PA-TNC Error Codes and MUST
        interoperate with\n      other parties despite any differences in the set
        of vendor-\n      specific PA-TNC Error Codes supported (although they MAY
        permit\n      administrators to configure them to require support for specific\n
        \     PA-TNC Error Codes).\n      When the PA-TNC Error Code Vendor ID is
        set to zero (0), the PA-\n      TNC Error Code is an IETF Standard PA-TNC
        Error Code.  IANA\n      maintains a registry of PA-TNC Error Codes.  Entries
        in this\n      registry are added by Expert Review with Specification Required,\n
        \     following the guidelines in section 7.\n      The following table lists
        the IETF Standard PA-TNC Error Codes\n      defined in this specification:\n
        \     Integer   Description\n      -------   -----------\n      0         Reserved\n
        \     1         Invalid Parameter\n      2         Version Not Supported\n
        \     3         Attribute Type Not Supported\n      The next few subsections
        of this document provide detailed\n      definitions of these error codes.\n
        \  Error Information\n      This field provides additional context for the
        error.  The\n      contents of this field vary based on the PA-TNC Error Code
        Vendor\n      ID and PA-TNC Error Code.  Therefore, whenever a PA-TNC Error
        Code\n      is defined, the format of this field for that error code must
        also\n      be defined.  The definitions of IETF Standard PA-TNC Error Codes\n
        \     on the next few pages provide good examples of such definitions.\n      The
        length of this field can be determined by the recipient using\n      the PA-TNC
        Attribute Length field by subtracting the length of the\n      fixed-length
        fields in the PA-TNC Attribute Header and the fixed-\n      length fields
        in this attribute.\n"
      - contents:
        - "4.2.8.1.  Invalid Parameter Error Code\n   The Invalid Parameter error
          code is an IETF Standard PA-TNC Error\n   Code (value 1) that indicates
          that the sender of this error code has\n   detected an invalid value in
          a PA-TNC message sent by the recipient\n   of this error code in the current
          assessment.\n   For this error code, the Error Information field contains
          the first 8\n   octets of the PA-TNC message that contained the invalid
          parameter and\n   an offset indicating the position within that message
          of the invalid\n   parameter.\n   The following diagram illustrates the
          format and contents of the\n   Error Information field for this error code.
          \ The text after this\n   diagram describes the fields shown here.\n                        1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |    Version    |            Copy of Reserved                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                       Message Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                             Offset                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Version\n      This field MUST contain an exact copy of the Version field
          in the\n      PA-TNC Message Header of the PA-TNC message that caused this\n
          \     error.\n   Copy of Reserved\n      This field MUST contain an exact
          copy of the Reserved field in the\n      PA-TNC Message Header of the PA-TNC
          message that caused this\n      error.\n   Message Identifier\n      This
          field MUST contain an exact copy of the Message Identifier\n      field
          in the PA-TNC Message Header of the PA-TNC message that\n      caused this
          error.\n   Offset\n      This field MUST contain an octet offset from the
          start of the PA-\n      TNC Message Header of the PA-TNC message that caused
          this error to\n      the start of the value that caused this error.  For
          instance, if\n      the first PA-TNC attribute in the message had an invalid
          PA-TNC\n      Attribute Length (e.g., 0), this value would be 16.\n"
        title: 4.2.8.1.  Invalid Parameter Error Code
      - contents:
        - "4.2.8.2.  Version Not Supported Error Code\n   The Version Not Supported
          error code is an IETF Standard PA-TNC Error\n   Code (value 2) that indicates
          that the sender of this error code does\n   not support the PA-TNC version
          number included in the PA-TNC Message\n   Header of a PA-TNC message sent
          by the recipient of this error code\n   in the current assessment.\n   For
          this error code, the Error Information field contains the first 8\n   octets
          of the PA-TNC message that contained the unsupported version\n   as well
          as Max Version and Min Version fields that indicate which PA-\n   TNC version
          numbers are supported by the sender of the error code.\n   The sender MUST
          support all PA-TNC versions between the Min Version\n   and the Max Version,
          inclusive (i.e., including the Min Version and\n   the Max Version).  When
          possible, recipients of this error code\n   SHOULD send future messages
          to the Posture Collector or Posture\n   Validator that originated this error
          message with a PA-TNC version\n   number within the stated range.\n   Any
          party that is sending the Version Not Supported error code MUST\n   include
          that error code as the only PA-TNC attribute in a PA-TNC\n   message with
          version number 1.  All parties that send PA-TNC messages\n   MUST be able
          to properly process a message that meets this\n   description, even if they
          cannot process any other aspect of PA-TNC\n   version 1.  This ensures that
          a PA-TNC version exchange can proceed\n   properly, no matter what versions
          of PA-TNC the parties implement.\n   The following diagram illustrates the
          format and contents of the\n   Error Information field for this error code.
          \ The text after this\n   diagram describes the fields shown here.\n                        1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |    Version    |                Copy of Reserved               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                       Message Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |  Max Version  |  Min Version  |            Reserved           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Version\n      This field MUST contain an exact copy of the Version field
          in the\n      PA-TNC Message Header of the PA-TNC message that caused this\n
          \     error.\n   Copy of Reserved\n      This field MUST contain an exact
          copy of the Reserved field in the\n      PA-TNC Message Header of the PA-TNC
          message that caused this\n      error.\n   Message Identifier\n      This
          field MUST contain an exact copy of the Message Identifier\n      field
          in the PA-TNC Message Header of the PA-TNC message that\n      caused this
          error.\n   Max Version\n      This field MUST contain the maximum PA-TNC
          version supported by\n      the sender of this error code.\n   Min Version\n
          \     This field MUST contain the minimum PA-TNC version supported by\n
          \     the sender of this error code.\n   Reserved\n      Reserved for future
          use.  This field MUST be set to 0 on\n      transmission and ignored upon
          reception.\n"
        title: 4.2.8.2.  Version Not Supported Error Code
      - contents:
        - "4.2.8.3.  Attribute Type Not Supported Error Code\n   The Attribute Type
          Not Supported error code is an IETF Standard PA-\n   TNC Error Code (value
          3) that indicates that the sender of this error\n   code does not support
          the PA-TNC Attribute Type included in the Error\n   Information field.  This
          PA-TNC Attribute Type was included in a PA-\n   TNC message sent by the
          recipient of this error code in the current\n   assessment.\n   For this
          error code, the Error Information field contains the first 8\n   octets
          of the PA-TNC message that contained the unsupported attribute\n   type
          as well as a copy of the attribute type that caused the problem.\n   The
          following diagram illustrates the format and contents of the\n   Error Information
          field for this error code.  The text after this\n   diagram describes the
          fields shown here.\n                        1                   2                   3\n
          \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |    Version    |            Copy of Reserved                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                       Message Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |     Flags     |          PA-TNC Attribute Vendor ID           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                     PA-TNC Attribute Type                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Version\n      This field MUST contain an exact copy of the Version field
          in the\n      PA-TNC Message Header of the PA-TNC message that caused this\n
          \     error.\n   Copy of Reserved\n      This field MUST contain an exact
          copy of the Reserved field in the\n      PA-TNC Message Header of the PA-TNC
          message that caused this\n      error.\n   Message Identifier\n      This
          field MUST contain an exact copy of the Message Identifier\n      field
          in the PA-TNC Message Header of the PA-TNC message that\n      caused this
          error.\n   Flags\n      This field MUST contain an exact copy of the Flags
          field in the\n      PA-TNC Attribute Header of the PA-TNC attribute that
          caused this\n      error.\n   PA-TNC Attribute Vendor ID\n      This field
          MUST contain an exact copy of the PA-TNC Attribute\n      Vendor ID field
          in the PA-TNC Attribute Header of the PA-TNC\n      attribute that caused
          this error.\n   PA-TNC Attribute Type\n      This field MUST contain an
          exact copy of the PA-TNC Attribute Type\n      field in the PA-TNC Attribute
          Header of the PA-TNC attribute that\n      caused this error.\n"
        title: 4.2.8.3.  Attribute Type Not Supported Error Code
      title: 4.2.8.  PA-TNC Error
    - contents:
      - "4.2.9.  Assessment Result\n   This PA-TNC attribute contains the final assessment
        result from a\n   particular Posture Validator.  This attribute might be returned
        to a\n   Posture Collector for information purposes such as when an endpoint\n
        \  is compliant.  Similarly, the Assessment Result attribute could be\n   sent
        to indicate a non-compliant result where specific actions are\n   needed to
        bring an endpoint into compliance with the network's\n   policies.  These
        actions could be defined in other PA-TNC attributes\n   such as Remediation
        Instructions sent to the Posture Collector.\n   All Posture Collectors that
        support an IETF Standard PA Subtype\n   defined in this specification SHOULD
        support receiving and processing\n   the Assessment Result attribute.  All
        Posture Validators that\n   implement an IETF Standard PA Subtype defined
        in this specification\n   SHOULD support sending the Assessment Result attribute.\n
        \  For this attribute type, the PA-TNC Attribute Vendor ID field MUST be\n
        \  set to zero (0) and the PA-TNC Attribute Type field MUST be set to 9.\n
        \  The following diagram illustrates the format and contents of the\n   Attribute
        Value field for this attribute type.  The text after this\n   diagram describes
        the fields shown here.\n                        1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Assessment Result                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Assessment Result\n      This 32-bit field MUST contain one of the following
        values;\n       Value   Description\n       -----   -----------\n       0
        \     Posture Validator assessed the endpoint component to\n              be
        compliant with policy.\n       1      Posture Validator assessed the endpoint
        component to\n              be non-compliant with policy but the difference
        from\n              compliant was minor.\n       2      Posture Validator
        assessed the endpoint component to\n              be non-compliant with policy
        and the assessed\n              difference was very significant.\n       3
        \     Posture Validator was unable to determine policy\n              compliance
        of an endpoint component due to an error.\n       4      Posture Validator
        was unable to determine whether the\n              assessed endpoint component
        was compliant with policy\n              based on the attributes provided
        by the Posture\n              Collector.\n"
      title: 4.2.9.  Assessment Result
    - contents:
      - "4.2.10.  Remediation Instructions\n   This PA-TNC attribute sent by the Posture
        Validator to the Posture\n   Collector contains remediation instructions for
        updating a particular\n   component to make the endpoint compliant with the
        assessment\n   policies.  A Posture Validator might choose to send more than
        one\n   Remediation Instructions attribute in some circumstances (e.g., both\n
        \  a URI and a human-readable message are necessary) to remediate one or\n
        \  more components.  This attribute supports the inclusion of either an\n
        \  IETF standard or vendor-specific remediation instruction.\n   All Posture
        Collectors that implement an IETF Standard PA Subtype\n   defined in this
        specification SHOULD support receiving and processing\n   the Remediation
        Instructions attribute.  All Posture Validators that\n   implement an IETF
        Standard PA Subtype defined in this specification\n   SHOULD support sending
        this attribute type.  Posture Collectors and\n   Posture Validators supporting
        other non-IETF standard components MAY\n   support this attribute.\n   For
        this attribute type, the PA-TNC Attribute Vendor ID field MUST be\n   set
        to zero (0) and the PA-TNC Attribute Type field MUST be set to\n   10.\n   The
        following diagram illustrates the format and contents of the\n   Attribute
        Value field for this attribute type.  The text after this\n   diagram describes
        the fields shown here.\n                        1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    Reserved   |       Remediation Parameters Vendor ID        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                  Remediation Parameters Type                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |            Remediation Parameters (Variable Length)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved (8 bits)\n      The Reserved bits MUST be set to 0 on transmission
        and ignored on\n      reception.\n   Remediation Parameters Vendor ID (24
        bits)\n      The Remediation Parameters Vendor ID field identifies a vendor
        by\n      using the SMI Private Enterprise Number (PEN).  Any organization\n
        \     can receive its own unique PEN from IANA, the Internet Assigned\n      Numbers
        Authority.  The Remediation Parameters Vendor ID qualifies\n      the Remediation
        Parameters Type field so that each vendor has 2^32\n      separate Remediation
        Parameters Types available for its use.\n      Remediation Parameters Types
        standardized by the IETF are always\n      used with the value zero (0) in
        this field.\n   Remediation Parameters Type (32 bits)\n      The Remediation
        Parameters Type field identifies the different\n      types of remediation
        instructions that can be contained in the\n      Remediation Parameters field.
        \ IANA maintains a registry of PA-TNC\n      Remediation Parameters Types.
        \ Entries in this registry are added\n      by Expert Review with Specification
        Required, following the\n      guidelines in section 7.  A list of IETF Standard
        PA-TNC\n      Remediation Parameters Types defined in this specification appears\n
        \     later in this section.\n      New vendor-specific remediation instructions
        can be created by\n      adding new Remediation Parameters Types (those used
        with a non-\n      zero Remediation Parameters vendor ID) without IETF or
        IANA\n      involvement.  Posture Collectors and Posture Validators MUST NOT\n
        \     require support for particular vendor-specific PA-TNC Remediation\n
        \     Parameters Types and MUST interoperate with other parties despite\n
        \     any differences in the set of vendor-specific PA-TNC Remediation\n      Parameters
        Types supported (although they MAY permit\n      administrators to configure
        them to require support for specific\n      PA-TNC remediation parameter types).\n
        \     The following table lists the IETF Standard PA-TNC Remediation\n      Parameters
        Type values defined in this specification:\n      Integer   Description\n
        \     -------   -----------\n      0         Reserved\n      1         Remediation
        URI\n      2         Remediation String\n      The next few subsections of
        this document provide detailed\n      definitions of the contents of the Remediation
        Parameters field\n      used with each Remediation Parameter Type.\n   Remediation
        Parameters (variable length)\n      The Remediation Parameters field contains
        the actual remediation\n      instructions for the Posture Collector.\n"
      - contents:
        - "4.2.10.1.  Remediation URI Parameters Type\n   The Remediation URI Parameters
          Type is an IETF Standard Remediation\n   Parameters Type (value 1) that
          indicates that the sending Posture\n   Validator is providing a URI to instructions
          on how to remediate the\n   endpoint.\n   The following diagram illustrates
          the format and contents of the\n   Remediation Parameters field when carrying
          a Remediation URI\n   parameter.  The text after this diagram describes
          the fields shown\n   here.\n                       1                   2
          \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                 Remediation URI (Variable Length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Remediation URI\n      The Remediation URI field MUST contain a URI,
          as described in RFC\n      3986 [7].  This URI SHOULD contain instructions
          to update a\n      particular component so that it might result in the component\n
          \     being compliant with the policies in future assessments.  Posture\n
          \     Collectors should validate that the URI and instructions come from\n
          \     a trustworthy source to avoid being tricked into performing\n      damaging
          actions (see security considerations).\n"
        title: 4.2.10.1.  Remediation URI Parameters Type
      - contents:
        - "4.2.10.2.  Remediation String Parameters Type\n   The Remediation String
          Parameters Type is an IETF Standard\n   Remediation Parameters Type (value
          2) that indicates that the sending\n   Posture Validator is providing a
          human-readable string containing\n   instructions on how to remediate the
          endpoint.\n   The following diagram illustrates the format and contents
          of the\n   Remediation Parameters field when the carrying a Remediation
          String\n   parameter.  The text after this diagram describes the fields
          shown\n   here.\n                       1                   2                   3\n
          \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                   Remediation String Length                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                Remediation String (Variable Length)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  | Lang Code Len |  Remediation String Lang Code (Variable Len)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Remediation String Length\n      The Remediation String Length contains
          the length of the\n      Remediation String field in octets.\n   Remediation
          String\n      The Remediation String field MUST contain a UTF-8 encoded
          string.\n      This string contains human-readable instructions for remediation\n
          \     that MAY be displayed to the user by the Posture Collector.  NUL\n
          \     termination MUST NOT be included.  If a Posture Collector receives\n
          \     a Remediation String that does contain a NUL termination, it\n      SHOULD
          send an Invalid Parameter error code.\n   Lang Code Len (Remediation String
          Language Code Length)\n      The Lang Code Len field contains the length
          of the Remediation\n      String Language Code field in octets.\n   Remediation
          String Lang Code\n      The Remediation String Lang(uage) Code field contains
          a US-ASCII\n      string composed of a well-formed RFC 4646 [6] language
          tag that\n      indicates the language(s) used in the Remediation String
          in the\n      Remediation Parameters field.  A zero-length string MAY be
          sent\n      for this field (essentially omitting this field) to indicate
          that\n      the language code for the remediation string is not known.\n"
        title: 4.2.10.2.  Remediation String Parameters Type
      title: 4.2.10.  Remediation Instructions
    - contents:
      - "4.2.11.  Forwarding Enabled\n   This PA-TNC attribute indicates whether the
        endpoint is forwarding\n   traffic between interfaces.  Endpoints that forward
        traffic between\n   networks connected to multiple network interfaces may
        be considered\n   non-compliant (and a security risk) in some enterprise network\n
        \  deployments.  For example, an endpoint with multiple connected\n   network
        interfaces might allow traffic from an interface connected to\n   a public
        network to be forwarded through another interface carrying a\n   VPN session
        to a protected enterprise network.  This attribute is\n   currently envisioned
        to be specific to reporting posture for the\n   operating system component;
        however, could be useful for other future\n   types of components.\n   Posture
        Collectors that implement the IETF Standard PA Subtype for\n   Operating System
        SHOULD support sending the Forwarding Enabled\n   attribute.  Posture Collectors
        that do not implement the Operating\n   System PA Subtype defined in this
        specification SHOULD NOT send the\n   Forwarding Enabled attribute unless
        it is appropriate to their PA\n   Subtype.  Whether a particular Posture Collector
        actually sends this\n   attribute type SHOULD still be governed by local privacy
        and security\n   policies.  Posture Validators that implement the IETF Standard
        PA\n   Subtype for Operating System SHOULD support receiving the Forwarding\n
        \  Enabled attribute type.  Posture Validators supporting components\n   other
        than Operating System MAY support receiving this attribute type\n   if it
        is appropriate to their PA Subtype.  A Posture Validator that\n   does not
        support receiving this attribute type SHOULD simply ignore\n   attributes
        with this type.  Posture Validators MUST NOT send this\n   attribute type.\n
        \  For this attribute type, the PA-TNC Attribute Vendor ID field MUST be\n
        \  set to zero (0) and the PA-TNC Attribute Type field MUST be set to\n   11.\n
        \  The following diagram illustrates the format and contents of the\n   Attribute
        Value field for this attribute type.  The text after this\n   diagram describes
        the fields shown here.\n                        1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Forwarding Enabled                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Forwarding Enabled\n      This 32-bit field MUST contain one of the following
        values;\n      Value   Description\n      -----   -----------\n        0       Disabled
        - Endpoint is not forwarding traffic.\n        1       Enabled -  Endpoint
        is forwarding traffic.\n        2       Unknown -  Unable to determine whether
        endpoint is\n                           forwarding traffic\n"
      title: 4.2.11.  Forwarding Enabled
    - contents:
      - "4.2.12.  Factory Default Password Enabled\n   This PA-TNC attribute indicates
        whether the endpoint has a factory\n   default password enabled for use.  Some
        types of endpoints include a\n   default static password for used to gain
        privileged access to the\n   endpoint.  If this password is not changed or
        disabled before the\n   endpoint is accessible on the network, it's often
        easy to compromise\n   the endpoint.\n   Posture Collectors that implement
        the IETF Standard PA Subtype for\n   Operating System SHOULD support sending
        the Factory Default Password\n   Enabled attribute.  Posture Collectors that
        implement other IETF\n   Standard PA Subtypes defined in this specification
        SHOULD NOT support\n   sending this attribute type for those PA subtypes.
        \ Other Posture\n   Collectors MAY support sending this attribute type, if
        it is\n   appropriate to their PA subtype.  Whether a particular Posture\n
        \  Collector actually sends this attribute type SHOULD still be governed\n
        \  by local privacy and security policies.  Posture Validators that\n   implement
        the IETF Standard PA Subtype for Operating System SHOULD\n   support receiving
        the Factory Default Password Enabled attribute.\n   Other Posture Validators
        MAY support receiving this attribute type.\n   A Posture Validator that does
        not support receiving this attribute\n   type SHOULD simply ignore attributes
        with this type.  Posture\n   Validators MUST NOT send this attribute type.\n
        \  For this attribute type, the PA-TNC Attribute Vendor ID field MUST be\n
        \  set to zero (0) and the PA-TNC Attribute Type field MUST be set to\n   12.\n
        \  The following diagram illustrates the format and contents of the\n   Attribute
        Value field for this attribute type.  The text after this\n   diagram describes
        the fields shown here.\n                        1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              Factory Default Password Enabled                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Factory Default Password Enabled\n      This 32-bit field MUST contain
        one of the following values;\n      Value   Description\n      -----   -----------\n
        \     0       Endpoint does not have factory default password enabled.\n      1
        \      Endpoint has a factory default password enabled.\n"
      title: 4.2.12.  Factory Default Password Enabled
    title: 4.2.  IETF Standard PA-TNC Attribute Types
  - contents:
    - "4.3.  Vendor-Defined Attributes\n   This section discusses the use of vendor-defined
      attributes within\n   PA-TNC.  The PA-TNC protocol was designed to allow for
      vendor-defined\n   attributes to be used as a replacement where a standard attribute\n
      \  could be used.  In some cases, even the standard attributes allow for\n   vendor-defined
      information to be included.  It is envisioned that\n   over time as particular
      vendor-defined attributes become popular, an\n   equivalent standard attribute
      could be added allowing for broader\n   interoperability.\n   This specification
      does not define vendor-defined attributes, but\n   rather highlights how such
      attributes can be used with PA-TNC without\n   the potential for namespace collisions
      or misinterpretations.  In\n   order to avoid collisions, PA-TNC uses the well-established
      SMI\n   Private Enterprise Numbers as vendor IDs to define separate\n   namespaces
      for important fields within a PA-TNC message.  For\n   example, to ensure the
      uniqueness of attribute types while providing\n   for vendor extensions, vendor-defined
      attribute types include the\n   vendor's unique vendor ID, to indicate the intended
      namespace for the\n   attribute type, followed by the attribute type.  IETF
      Standard PA-TNC\n   Attribute Types use a vendor ID of zero (0).\n   SMI Private
      Enterprise Numbers are used to provide a separate\n   identifier space for each
      vendor.  The IANA provides a registry for\n   SMI Private Enterprise Numbers.
      \ Any organization (including non-\n   profit organizations, governmental bodies,
      etc.) can obtain one of\n   these numbers at no charge, and thousands of organizations
      have done\n   so.  Within this document, SMI Private Enterprise Numbers are
      known\n   as \"vendor IDs\".\n"
    title: 4.3.  Vendor-Defined Attributes
  title: 4.  PA-TNC Attributes
- contents:
  - "5.  Security Considerations\n   This section discusses the major potential types
    of security threats\n   relevant to the PA-TNC message protocol.  It is envisioned
    that\n   additional attribute types could be defined in the future to\n   facilitate
    the exchange of security capabilities, keys, and security\n   protected attributes
    if future use cases are adopted that require\n   such protections.\n"
  - contents:
    - "5.1.  Trust Relationships\n   In order to understand where security countermeasures
      are necessary,\n   this section starts with a discussion of where the TNC architecture\n
      \  envisions some trust relationships between the processing elements of\n   the
      PA-TNC protocol.  The following subsections discuss the trust\n   properties
      associated with each portion of the NEA reference model\n   directly involved
      with the processing of the PA-TNC protocol.\n"
    - contents:
      - "5.1.1.  Posture Collector\n   The Posture Collectors are trusted by Posture
        Validators to:\n   o  Collect valid information about the component type associated
        with\n      the Posture Collector\n   o  Report upon collected information
        consistent with local security\n      and privacy policies\n   o  Accurately
        report information associated with the type of\n      component for the PA-TNC
        message\n   o  Not act maliciously to the Posture Broker Server and Posture\n
        \     Validators, including attacks such as denial of service\n"
      title: 5.1.1.  Posture Collector
    - contents:
      - "5.1.2.  Posture Validator\n   The Posture Validators are trusted by Posture
        Collectors to:\n   o  Only request information necessary to assess the security
        state of\n      the endpoint\n   o  Make assessment decisions based on deployer-defined
        policies\n   o  Discard collected information consistent with data retention
        and\n      privacy policies\n   o  Not act maliciously to the Posture Broker
        Server and Posture\n      Collectors, including attacks such as denial of
        service\n   o  Not send malicious remediation instructions that do not fix
        or\n      that cause damage to the endpoint\n"
      title: 5.1.2.  Posture Validator
    - contents:
      - "5.1.3.  Posture Broker Client, Posture Broker Server\n   The Posture Broker
        Client and Posture Broker Server are trusted by\n   the Posture Collector
        and Posture Validator to:\n   o  Provide a reliable transport for PA-TNC messages\n
        \  o  Deliver messages for a particular PA Subtype only to those Posture\n
        \     Collectors and Posture Validators that have registered for them\n   o
        \ Not disclose any provided attributes to unauthorized parties\n   o  Not
        act maliciously to drop messages, duplicate messages, or flood\n      Posture
        Collectors and Posture Validators with unnecessary\n      messages\n   o  Not
        observe, fabricate, or alter the contents of a PA-TNC message\n   o  Properly
        place Posture Collector and Posture Validator identifiers\n      into the
        PB-TNC protocol, deliver those identifiers to Posture\n      Collectors and
        Posture Validators as needed, and manage exclusive\n      delivery to a particular
        Posture Collector or Posture Validator\n      when requested\n   o  Properly
        expose authentication information from PT security so\n      that Posture
        Collectors and Posture Validators can use the peer's\n      identity information
        to safely make policy decisions\n"
      title: 5.1.3.  Posture Broker Client, Posture Broker Server
    title: 5.1.  Trust Relationships
  - contents:
    - "5.2.  Security Threats\n   Beyond the trusted relationships assumed in section
      5.1, the PA-TNC\n   protocol faces a number of potential security attacks that
      could\n   require security countermeasures.\n   Generally, the PA-TNC protocol
      relies upon the underlying PT\n   protocol's security to protect the messages
      from attack when\n   traveling over the network.  Once the message resides on
      the Posture\n   Broker Client or Posture Broker Server, the posture brokers
      are\n   trusted to properly and safely deliver the messages to the\n   appropriate
      Posture Collectors and Posture Validators.\n"
    - contents:
      - "5.2.1.  Attribute Theft\n   When PA-TNC messages are sent over unprotected
        network links or\n   spanning local software stacks that are not trusted,
        the contents of\n   the PA-TNC messages may be subject to information theft
        by an\n   intermediary party.  This theft could result in information being\n
        \  recorded for future use or analysis by the adversary.  Attributes\n   observed
        by eavesdroppers could contain information that exposes\n   potential weaknesses
        in the security of the endpoint, or system\n   fingerprinting information
        easing the ability of the attacker to\n   employ attacks more likely to be
        successful against the endpoint.\n   The eavesdropper might also learn information
        about the endpoint or\n   network policies that either singularly or collectively
        is considered\n   sensitive information (e.g., certain endpoints are lacking
        patches,\n   or particular sub-networks have more lenient policies).\n   PA-TNC
        attributes are not intended to carry privacy-sensitive\n   information, but
        should some exist in a message, the adversary could\n   come into possession
        of the information, which could be used for\n   financial gain.  Therefore,
        it is important that PT provide strong\n   confidentiality protection to protect
        the message from eavesdroppers\n   when being sent between the Posture Transport
        Client and Posture\n   Transport Server.\n"
      title: 5.2.1.  Attribute Theft
    - contents:
      - "5.2.2.  Message Fabrication\n   Attackers on the network or present within
        the NEA system could\n   introduce fabricated PA-TNC messages intending to
        trick or create a\n   denial of service against aspects of an assessment.
        \ For example, an\n   adversary could attempt to send a falsified set of remediation\n
        \  instructions using the Remediation URI support in hopes of the\n   Posture
        Collector automatically following the instructions.  Posture\n   Collectors
        need to ensure that any requests to take actions on the\n   endpoint (such
        as remediation instructions) received from Posture\n   Validators are authentic
        and trustworthy using strong authentication\n   and integrity protections
        offered by PT.  Posture Collectors should\n   not blindly follow remediation
        instructions received from a trusted\n   NEA Server.  At least for patches
        and other potentially dangerous\n   actions, Posture Collectors should validate
        these actions (e.g., via\n   user confirmation) before proceeding.\n   Such
        an attack could occur if an active attacker launches a man-in-\n   the-middle
        (MitM) attack by proxying the PA-TNC messages and was able\n   to replace
        undesired messages with ones easing future attack upon the\n   endpoint.  Consider
        a scenario where PT security protection is not\n   used and the Posture Broker
        Server proxies all assessment traffic to\n   a remote Posture Broker Server.
        \ The proxy could eavesdrop and\n   replace assessment results attributes,
        tricking the endpoint into\n   thinking it has passed an assessment, when
        in fact it has not and\n   requires remediation.  Because the Posture Collector
        has no way to\n   verify that attributes were actually created by an authentic
        Posture\n   Validator, it is unable to detect the falsified attribute or message.\n
        \  Therefore, it is important that PT provides strong authentication and\n
        \  integrity protection.\n"
      title: 5.2.2.  Message Fabrication
    - contents:
      - "5.2.3.  Attribute Modification\n   This attack could allow an active attacker
        capable of intercepting a\n   message to modify a PA-TNC message attribute
        to a desired value to\n   ease the compromise of an endpoint.  Without the
        ability for message\n   recipients to detect whether a received message contains
        the same\n   content as what was originally sent, active attackers can stealthily\n
        \  modify the attribute exchange.\n   For example, an attacker might wish
        to change the contents of the\n   firewall component's version string attribute
        to disguise the fact\n   that the firewall is running an old, vulnerable version.
        \ The\n   attacker would change the version string sent by the firewall Posture\n
        \  Collector to the current version number, so the Posture Validator's\n   assessment
        passes while leaving the endpoint vulnerable to attack.\n   Similarly, an
        attacker could achieve widespread denial of service by\n   altering large
        numbers of assessments' version string attributes to\n   an old value so they
        repeatedly fail assessments even after a\n   successful remediation.  Upon
        receiving the lower value, the Posture\n   Validator would continue to believe
        that the endpoint is running old,\n   potentially vulnerable versions of the
        firewall that does not meet\n   network compliance policy, so therefore the
        endpoint would not be\n   allowed to join the network.  Use of a PT protocol
        providing strong\n   integrity protection and authentication is essential
        as\n   countermeasures to these attacks.\n"
      title: 5.2.3.  Attribute Modification
    - contents:
      - "5.2.4.  Attribute Replay\n   Another potential attack against an unprotected
        PA-TNC message\n   attribute exchange is to exploit the lack of a strong binding
        between\n   the attributes sent during an assessment to the specific endpoint.\n
        \  Without a strong binding of the endpoint to the posture information,\n
        \  an attacker could record the attributes sent during an assessment of\n
        \  a compliant endpoint and later replay those attributes so that a non-\n
        \  compliant endpoint can now gain access to the network or protected\n   resource.
        \ This attack could be employed by a network MitM that is\n   able to eavesdrop
        and proxy message exchanges, or by using local\n   rogue agents on the endpoints.
        \ Assessments lacking some form of\n   freshness exchange could be subject
        to replay of prior assessment\n   data, even if it no longer reflects the
        current state of the\n   endpoint.  Use of a PT protocol providing strong
        integrity protection\n   and authentication including a freshness exchange
        is necessary\n   countermeasure to these attacks.\n"
      title: 5.2.4.  Attribute Replay
    - contents:
      - "5.2.5.  Attribute Insertion\n   Similar to the attribute modification attacks,
        an adversary wishing\n   to include one or more attributes or PA-TNC messages
        inside a valid\n   assessment may be able to insert the attributes or messages
        without\n   detection by the recipient.  For example, an attacker could add\n
        \  attributes to the front of a PA-TNC message to cause an assessment to\n
        \  succeed even for a non-compliant endpoint, particularly if it knew\n   that
        the recipient ignored repeated attributes within a message.\n   Similarly,
        if a Posture Collector or Posture Validator always\n   generated an error
        if it saw unexpected attributes, the attacker\n   could cause failures and
        denial of service by adding attributes or\n   messages to an exchange.  Use
        of a PT protocol providing strong\n   authentication and integrity protection
        could prevent the adversary\n   from inserting attributes into the assessment.\n"
      title: 5.2.5.  Attribute Insertion
    - contents:
      - "5.2.6.  Denial of Service\n   A variety of types of denial-of-service attacks
        are possible against\n   the PA-TNC message exchange if left unprotected from
        untrusted\n   parties along the communication path between the Posture Collector\n
        \  and Posture Validator.  Normally, the PT exchange is bidirectionally\n
        \  authenticated, which helps to prevent a MitM on the network from\n   becoming
        an active proxy, but transparent message routing gateways\n   may still exist
        on the communication path and can modify the\n   integrity of the message
        exchange unless adequate integrity\n   protection is provided.  If the MitM
        or other entities on the network\n   can send messages to the Posture Broker
        Client or Posture Broker\n   Server that appear to be part of an assessment,
        these messages could\n   confuse the Posture Collector and Posture Validator
        or cause them to\n   perform unnecessary work or take incorrect action.  Several
        example\n   denial-of-service situations are described in sections 5.2.3 and\n
        \  5.2.5.  Many potential denial-of-service examples exist, including\n   flooding
        messages to the Posture Collector or Posture Validator,\n   sending very large
        messages containing many attributes, and\n   repeatedly asking for resource-intensive
        operations.\n"
      title: 5.2.6.  Denial of Service
    title: 5.2.  Security Threats
  title: 5.  Security Considerations
- contents:
  - "6.  Privacy Considerations\n   The PA-TNC protocol is designed to allow for controlled
    disclosure of\n   security-relevant information about an endpoint, specifically
    for the\n   purpose of enabling an assessment of the endpoint's compliance with\n
    \  network policy.  The purpose of this protocol is to provide\n   visibility
    into the state of the protective mechanisms on the\n   endpoint, in order for
    the Posture Validators and Posture Broker\n   Server to determine whether the
    endpoint is up to date and thus has\n   the best chance of being resilient in
    the face of malware threats.\n   One risk associated with providing visibility
    into the contents of an\n   endpoint is the increased chance for exposure of privacy-sensitive\n
    \  information without the consent of the user.\n   While this protocol does provide
    the Posture Validator the ability to\n   request specific information about the
    endpoint, the protocol is not\n   open ended, bounding the Posture Validator to
    only query specific\n   information (attributes) about specific security features
    (component\n   types) of the endpoint.  Each PA-TNC message is explicitly about
    a\n   single component from the list of components in section 3.5.  These\n   components
    include a list of security-related aspects of the endpoint\n   that affect the
    ability of the endpoint to resist attacks and thus\n   are of interest during
    an assessment.  Discretionary components used\n   by the user to create or view
    content are not on the list, as they\n   are more likely to have access to privacy-sensitive
    information.\n   Similarly, PA-TNC messages contain a set of attributes that describe\n
    \  the particular component.  Each attribute contains generic\n   information
    (e.g., product information or versions) about the\n   component, so it is unlikely
    to include any user-specific or\n   identifying information.  This combination
    of a limited set of\n   security-related components with non-user-specific attributes
    greatly\n   reduces the risk of exposure of privacy-sensitive information.\n   Vendors
    that choose to define additional component types and/or\n   attributes within
    their namespace are encouraged to provide similar\n   constraints.\n   Even with
    the bounding of standard attribute information to specific\n   components, it
    is possible that individuals might wish to share less\n   information with different
    networks they wish to access.  For\n   example, a user may wish to share more
    information when connecting to\n   or being reassessed by the user's employer
    network than what would be\n   made available to the local coffee shop wireless
    network.  While\n   these situations do not impact the protocol itself, they do
    suggest\n   that Posture Collector implementations should consider supporting
    a\n   privacy filter allowing the user and/or system owner to restrict\n   access
    to certain attributes based upon the target network.\n   The underlying PT protocol
    authenticates the network's Posture Broker\n   Server at the start of an assessment,
    so identity can be made\n   available to the Posture Collector and per-network
    privacy filtering\n   is possible.  Network owners should make available a list
    of the\n   attributes they require to perform an assessment and any privacy\n
    \  policy they enforce when handling the data.  Users wishing to use a\n   more
    restricted privacy filter on the endpoint may risk not being\n   able to pass
    an assessment and thus not gain access to the requested\n   network or resource.\n"
  title: 6.  Privacy Considerations
- contents:
  - "7.  IANA Considerations\n   This section defines the contents of three new IANA
    registries: PA-\n   TNC Attribute Types, PA-TNC Error Codes, and PA-TNC Remediation\n
    \  Parameters Types.  This section explains how these registries work.\n   Also,
    this specification defines several new PA Subtypes for use with\n   PA-TNC.\n
    \  All of the registries defined in this document support IETF standard\n   values
    and vendor-defined values.  To explain this phenomenon, we\n   will use the PA-TNC
    Attribute Type as an example, but the other three\n   registries work the same
    way.  Whenever a PA-TNC Attribute Type\n   appears on a network, it is always
    accompanied by an SMI Private\n   Enterprise Number (PEN), also known as a vendor
    ID.  If this vendor\n   ID is zero, the accompanying PA-TNC Attribute Type is
    an IETF\n   standard value listed in the IANA registry for PA-TNC Attribute\n
    \  Types, and its meaning is defined in the specification listed for\n   that
    PA-TNC Attribute Type in that registry.  If the vendor ID is not\n   zero, the
    meaning of the PA-TNC Attribute Type is defined by the\n   vendor identified by
    the vendor ID (as listed in the IANA registry\n   for SMI PENs).  The identified
    vendor is encouraged but not required\n   to register with IANA some or all of
    the PA-TNC Attribute Types used\n   with their vendor ID and publish a specification
    for each of these\n   values.\n   This delegation of namespace is analogous to
    the technique used for\n   OIDs.  It can result in interoperability problems if
    vendors require\n   support for particular vendor-specific values.  However, such\n
    \  behavior is explicitly prohibited by this specification (in section\n   4.1),
    which dictates that \"Posture Collectors and Posture Validators\n   MUST NOT require
    support for particular vendor-specific PA-TNC\n   Attribute Types and MUST interoperate
    with other parties despite any\n   differences in the set of vendor-specific PA-TNC
    Attribute Types\n   supported (although they MAY permit administrators to configure
    them\n   to require support for specific PA-TNC Attribute Types)\".  Similar\n
    \  requirements are included for PA Subtypes, Remediation Parameters\n   Types,
    and PA-TNC Error Codes.\n"
  - contents:
    - "7.1.  Designated Expert Guidelines\n   For all of the IANA registries defined
      by this specification, new\n   values are added to the registry by Expert Review
      with Specification\n   Required, using the Designated Expert process defined
      in RFC 5226\n   [3].\n   This section provides guidance to designated experts
      so that they may\n   make decisions using a philosophy appropriate for these
      registries.\n   The registries defined in this document have plenty of values.
      \ In\n   most cases, the IETF has approximately 2^32 values available for it\n
      \  to define and each vendor the same number of values for its use.\n   Because
      there are so many values available, designated experts should\n   not be terribly
      concerned about exhausting the set of values.\n   Instead, designated experts
      should focus on the following\n   requirements.  All values in these IANA registries
      MUST be documented\n   in a specification that is permanently and publicly available.
      \ IETF\n   standard values MUST also be useful, not harmful to the Internet,
      and\n   defined in a manner that is clear and likely to ensure\n   interoperability.\n
      \  Designated experts should encourage vendors to avoid defining similar\n   but
      incompatible values and instead agree on a single IETF standard\n   value.  However,
      it is beneficial to document existing practice.\n   There are several ways to
      ensure that a specification is permanently\n   and publicly available.  It may
      be published as an RFC.\n   Alternatively, it may be published in another manner
      that makes it\n   freely available to anyone.  However, in this latter case,
      the vendor\n   MUST supply a copy to the IANA and authorize the IANA to archive
      this\n   copy and make it freely available to all if at some point the\n   document
      becomes no longer freely available to all through other\n   channels.\n   Section
      7.2 defines the new PA Subtypes.  The following three\n   sections provide guidance
      to the IANA in creating and managing the\n   new IANA registries defined by
      this specification.\n"
    title: 7.1.  Designated Expert Guidelines
  - contents:
    - "7.2.  PA Subtypes\n   Section 3.5 of this specification defines several new
      PA Subtypes\n   that have been added to the PA Subtypes registry defined in
      the PB-\n   TNC specification.  Here is a list of these assignments:\n   PEN
      \ Integer      Name               Defining Specification\n   ---  -------      ----
      \              ----------------------\n    0     0          Testing                    RFC
      5792\n    0     1          Operating System           RFC 5792\n    0     2
      \         Anti-Virus                 RFC 5792\n    0     3          Anti-Spyware
      \              RFC 5792\n    0     4          Anti-Malware               RFC
      5792\n    0     5          Firewall                   RFC 5792\n    0     6
      \         IDPS                       RFC 5792\n    0     7          VPN                        RFC
      5792\n    0     8          NEA Client                 RFC 5792\n   These PA
      Subtypes have been added to the registry for PA Subtypes\n   defined in the
      PB-TNC specification, with this RFC as the reference.\n"
    title: 7.2.  PA Subtypes
  - contents:
    - "7.3.  Registry for PA-TNC Attribute Types\n   The name for this registry is
      \"PA-TNC Attribute Types\".  Each entry\n   in this registry should include
      a human-readable name, an SMI Private\n   Enterprise Number, a decimal integer
      value between 0 and 2^32-1, and\n   a reference to the specification where the
      contents of this attribute\n   type are defined.  This specification must define
      the meaning of this\n   PA-TNC attribute type and the format and semantics of
      the PA-TNC\n   Attribute Value field for PA-TNC attributes that include the\n
      \  designated Private Enterprise Number in the PA-TNC Attribute Vendor\n   ID
      field and the designated numeric value in the PA-TNC Attribute\n   Type field.\n
      \  The following entries for this registry are defined in this document.\n   They
      are the initial entries in the registry for PA-TNC Attribute\n   Types.  Additional
      entries to this registry are added by Expert\n   Review with Specification Required,
      following the guidelines in\n   section 7.1.\n   PEN   Integer    Name                 Defining
      Specification\n   ---   -------    ----                 ----------------------\n
      \   0      0        Testing                      RFC 5792\n    0      1        Attribute
      Request            RFC 5792\n    0      2        Product Information          RFC
      5792\n    0      3        Numeric Version              RFC 5792\n    0      4
      \       String Version               RFC 5792\n    0      5        Operational
      Status           RFC 5792\n    0      6        Port Filter                  RFC
      5792\n    0      7        Installed Packages           RFC 5792\n    0      8
      \       PA-TNC Error                 RFC 5792\n    0      9        Assessment
      Result            RFC 5792\n    0     10        Remediation Instructions     RFC
      5792\n    0     11        Forwarding Enabled           RFC 5792\n    0     12
      \       Factory Default Password     RFC 5792\n                    Enabled\n
      \   0 0xffffffff    Reserved                     RFC 5792\n"
    title: 7.3.  Registry for PA-TNC Attribute Types
  - contents:
    - "7.4.  Registry for PA-TNC Error Codes\n   The name for this registry is \"PA-TNC
      Error Codes\".  Each entry in\n   this registry should include a human-readable
      name, an SMI Private\n   Enterprise Number, a decimal integer value between
      0 and 2^32-1, and\n   a reference to the specification where this error code
      is defined.\n   This specification must define the meaning of this error code
      and the\n   format and semantics of the Error Information field for PA-TNC\n
      \  attributes that have a PA-TNC vendor ID of 0, a PA-TNC Attribute Type\n   of
      PA-TNC Error, the designated Private Enterprise Number in the PA-\n   TNC Error
      Code Vendor ID field, and the designated numeric value in\n   the PA-TNC Error
      Code field.\n   The following entries for this registry are defined in this
      document.\n   They are the initial entries in the registry for PA-TNC Error
      Codes.\n   Additional entries to this registry are added by Expert Review with\n
      \  Specification Required, following the guidelines in section 7.1.\n      PEN
      \ Integer     Name                      Defining Specification\n      ---  -------
      \    ----                      ----------------------\n       0     0         Reserved
      \                         RFC 5792\n       0     1         Invalid Parameter
      \                RFC 5792\n       0     2         Version Not Supported             RFC
      5792\n       0     3         Attribute Type Not Supported      RFC 5792\n"
    title: 7.4.  Registry for PA-TNC Error Codes
  - contents:
    - "7.5.  Registry for PA-TNC Remediation Parameters Types\n   The name for this
      registry is \"PA-TNC Remediation Parameters Types\".\n   Each entry in this
      registry should include a human-readable name, an\n   SMI Private Enterprise
      Number, a decimal integer value between 1 and\n   2^32-1, and a reference to
      the specification where the contents of\n   this remediation parameters type
      are defined.  This specification\n   must define the meaning of this PA-TNC
      Remediation Parameters Type\n   and the format and semantics of the Remediation
      Parameters field for\n   PA-TNC attributes that include the designated Private
      Enterprise\n   Number in the Remediation Parameters Vendor ID field and the\n
      \  designated numeric value in the Remediation Parameters Type field.\n   The
      following entries for this registry are defined in this document.\n   They are
      the initial entries in the registry for PA-TNC Remediation\n   Parameters Types.
      \ Additional entries to this registry are added by\n   Expert Review with Specification
      Required, following the guidelines\n   in section 7.1.\n   PEN   Integer   Name
      \             Defining Specification\n   ---   -------   ----              ----------------------\n
      \   0      0      Reserved                 RFC 5792\n    0      1      URI                      RFC
      5792\n    0      2      Remediation String       RFC 5792\n"
    title: 7.5.  Registry for PA-TNC Remediation Parameters Types
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   Thanks to the Trusted Computing Group for contributing
    the initial\n   text [8] upon which this document was based.  The authors would
    also\n   like to acknowledge the following people who have contributed to or\n
    \  provided substantial input on the preparation of this document or\n   predecessors
    to it: Stuart Bailey, Roger Chickering, Lauren Giroux,\n   Charles Goldberg, Steve
    Hanna, Ryan Hurst, Meenakshi Kaushik, Greg\n   Kazmierczak, Scott Kelly, PJ Kirner,
    Houcheng Lee, Lisa Lorenzin,\n   Mahalingam Mani, Sung Lee, Ravi Sahita, Mauricio
    Sanchez, Brad Upson,\n   and Han Yin.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD\n
      \        63, RFC 3629, November 2003.\n   [3]   Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an IANA\n         Considerations Section in RFCs\",
      BCP 26, RFC 5226, May 2008.\n   [4]   Klyne, G. and C. Newman, \"Date and Time
      on the Internet:\n         Timestamps\", RFC 3339, July 2002.\n   [5]   Sahita,
      R., Hanna, S., Hurst, R., and K. Narayan, \"PB-TNC: A\n         Posture Broker
      (PB) Protocol Compatible with Trusted Network\n         Connect (TNC)\", RFC
      5793, March 2010.\n   [6]   Phillips, A., Ed., and M. Davis, Ed., \"Tags for
      Identifying\n         Languages\", BCP 47, RFC 5646, September 2009.\n   [7]
      \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n         Resource
      Identifier (URI): Generic Syntax\", STD 66, RFC 3986,\n         January 2005.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [8]   Trusted Computing Group, \"IF-M: TLV
      Binding\",\n         http://www.trustedcomputinggroup.org/resources/\n         tnc_ifm_tlv_binding_specification,
      February 2010.\n   [9]   Sangster, P., Khosravi, H., Mani, M., Narayan, K.,
      and J.\n         Tardo, \"Network Endpoint Assessment (NEA): Overview and\n
      \        Requirements\", RFC 5209, June 2008.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - 'Appendix A.  Use Cases

    '
  - contents:
    - "A.1.  Initial Client-Triggered Assessment\n   This scenario involves the assessment
      of an endpoint initiated during\n   network join.  The assessment is triggered
      by the Posture Broker\n   Client (PBC) and involves collection of patch information
      from both\n   Standard Operating System (OS) Posture Collector and vendor-specific\n
      \  Patch Posture Collector (PC).  The assessment by both the vendor-\n   specific
      Patch Posture Validator (PV) and Standard OS Posture\n   Validator result in
      a compliant assessment decision that results in a\n   compliant System Assessment
      Decision to be returned by the Posture\n   Broker Server (PBS).\n   +--------+
      +-------+ +---------+ +--------+ +-------++--------+\n   | Vndr. X| |  Std.
      | |   Std.  | |  Std.  | | Std.  || Vndr. X|\n   |Patch PC| | OS PC | |   PBC
      \  | |  PBS   | | OS PV ||Patch PV|\n   +--+-----+ +-+-----+ +---+-----+ +-+------+
      +-+------+--+-----+\n      |         |   N/W Join|         |          |         |\n
      \     |         |     ----->|         |          |         |\n      |         |
      Req Post. |         |          |         |\n      |         |<----------|         |
      \         |         |\n      |         | Req Post. |         |          |         |\n
      \     |<--------------------|         |          |         |\n      |Vndr X
      Patch Posture |         |          |         |\n      |-------------------->|
      \        |          |         |\n      |         |OS Posture |         |          |
      \        |\n      |         |---------->|         |          |         |\n      |
      \        |           | Posture |          |         |\n      |         |           |
      Report  |          |         |\n      |         |           |-------->|          |
      \        |\n      |         |           |         |  Verify  |         |\n      |
      \        |           |         |  Posture |         |\n      |         |           |
      \        |--------->          |\n      |         |           |         |          |
      Verify  |\n      |         |           |         |          | Posture |\n      |
      \        |           |         |------------------->|\n      |         |           |
      \        | OS Reslt |         |\n      |         |           |         |<---------|
      \        |\n      |         |           |         | VndrX Patch Result |\n      |
      \        |           | Assess  |<-------------------|\n      |         |           |
      Result  |                    |\n      |         |           |<--------|          |
      \        |\n      |         | OS Reslt  |         |          |         |\n      |
      \        |<----------|         |          |         |\n      | VndrX Patch Result
      \ |         |          |         |\n      |<--------------------|         |
      \         |         |\n"
    - contents:
      - "A.1.1.  Message Contents\n   This section shows the contents of the key fields
        in each of the PA\n   messages exchanged in this use case.  When necessary,
        additional\n   commentary is provided to explain why certain fields contain
        the\n   shown values.  Note that many of the flows shown are between\n   components
        on the same system so no message contents are shown.\n"
      - contents:
        - "A.1.1.1.  N/W Join\n   This flow represents the event that causes the PBC
          to decide to start\n   an assessment of the endpoint in order to gain access
          to the network.\n   This is merely an event and does not include a message
          being sent.\n"
        title: A.1.1.1.  N/W Join
      - contents:
        - "A.1.1.2.  Request Posture (Req Post.)\n   This flow illustrates an invocation
          of the OS and patch posture\n   collectors requesting particular posture
          attributes to be sent.\n   Because this use case is triggered locally, the
          contents of this flow\n   aren't specified by NEA.\n"
        title: A.1.1.2.  Request Posture (Req Post.)
      - contents:
        - "A.1.1.3.  Vendor X Patch Posture (VndrX Patch Posture)\n   This flow contains
          the PA message from the Patch Posture Collector:\n   Vendor X Patch Posture
          PA Message  {\n      Attribute HDR {Message ID}\n      Attribute 1 {\n         vendor-id=1
          (vendor X)\n         type=1 (Vendor X namespace attribute)\n         length\n
          \        Value = {\n            VendorXAttribute1=123\n         }\n      }\n
          \     Attribute 2 {\n         vendor-id=1 (vendor X)\n         type=2 (Vendor
          X namespace attribute)\n         length\n         Value = {\n            VendorXAttribute2=456\n
          \        }\n      }\n   }\n"
        title: A.1.1.3.  Vendor X Patch Posture (VndrX Patch Posture)
      - contents:
        - "A.1.1.4.  OS Posture\n   This flow contains the PA message from the OS
          Posture Collector:\n   OS Posture PA Message  {\n      Attribute HDR {Message
          ID}\n      Attribute 1 {\n         vendor-id=0\n         type=2 (product
          information)\n         length\n         Value = {\n            Product-vendor-id=311
          \  -- Microsoft's PEN\n            Product-name=\"Windows Vista\"\n         }\n
          \     }\n      Attribute 2 {\n         vendor-id=0\n         type=3 (numeric
          version)\n         length\n         Value = {\n            major-version=6
          \    -- Vista is version 6.0\n            minor-version=0\n            build-number=456789\n
          \           service-pack-major=0   -- No service packs\n            service-pack-minor=0\n
          \        }\n      }\n   }\n"
        title: A.1.1.4.  OS Posture
      - contents:
        - "A.1.1.5.  Posture Report\n   This flow contains the PB message containing
          the PA messages from the\n   Patch and OS Posture Collectors; the message
          content is described in\n   the PB-TNC specification.\n"
        title: A.1.1.5.  Posture Report
      - contents:
        - "A.1.1.6.  Verify Posture\n   This flow illustrates an invocation of the
          OS and patch Posture\n   Validators requesting verification of the posture
          attributes\n   received.  Because this flow happens locally within the NEA
          server,\n   NEA does not specify the message contents.\n"
        title: A.1.1.6.  Verify Posture
      - contents:
        - "A.1.1.7.  OS Posture Result (OS Reslt)\n   This flow contains the PA message
          (Posture Assessment Result) from\n   the OS Posture Validator\n   OS Posture
          Result PA Message {\n      Attribute HDR {Message ID}\n         Attribute
          1 {\n              vendor-id=0\n              type=9 (assessment-result)\n
          \             length\n              Value = {\n                 assessment-result=0
          (compliant)\n              }\n        }\n    }\n"
        title: A.1.1.7.  OS Posture Result (OS Reslt)
      - contents:
        - "A.1.1.8.  Vendor X Patch Result (VndrX Patch Result)\n   This flow contains
          the PA message (Posture Assessment Result) from\n   the Vendor X Patch Posture
          Validator\n   Patch Vendor X Posture Result PA Message {\n      Attribute
          HDR {Message ID}\n         Attribute 1 {\n              vendor-id=0\n              type=9
          (assessment-result)\n              length\n              Value = {\n                 assessment-result=0
          (compliant)\n              }\n         }\n    }\n"
        title: A.1.1.8.  Vendor X Patch Result (VndrX Patch Result)
      - contents:
        - "A.1.1.9.  Assessment Result (Assess Result)\n   This flow contains the
          PB message containing the system assessment\n   result computed by the Posture
          Broker Server and the PA messages from\n   the Patch and OS Posture Validators;
          the message content is described\n   in the PB-TNC specification.\n"
        title: A.1.1.9.  Assessment Result (Assess Result)
      - contents:
        - "A.1.1.10.  Posture Result (OS PRslt & Vndr X Post PResult)\n   These flows
          illustrate an invocation of the OS and Vendor X Patch\n   Posture Collectors
          to receive the posture assessment results.\n   Because this flow is triggered
          locally, NEA does not specify the\n   contents of this flow.\n"
        title: A.1.1.10.  Posture Result (OS PRslt & Vndr X Post PResult)
      title: A.1.1.  Message Contents
    title: A.1.  Initial Client-Triggered Assessment
  - contents:
    - "A.2.  Server-Initiated Assessment with Remediation\n   This scenario involves
      the assessment of an endpoint initiated by the\n   NEA Server.  The assessment
      is triggered by the Posture Broker Server\n   and involves collection of Anti-Virus
      attributes for two Anti-Virus\n   components running on the endpoint.  The endpoint
      is assessed to be\n   compliant by one of the vendor (Vendor X) anti-virus Posture\n
      \  Validators and non-compliant by the other vendor (Vendor Y) anti-\n   virus
      Posture Validator.  Based upon the Posture Broker Server's\n   policy, this
      results in a non-compliant system assessment decision to\n   be returned by
      the Posture Broker Server.  The Posture Broker Server\n   also returns remediation
      instructions for the endpoint as part of the\n   response.\n   +--------+  +-------+
      +---------+ +--------+ +-------+ +--------+\n   | Vndr Y |  | Vndr X| |   Std.
      \ | |  Std.  | | Vndr X| | Vndr Y |\n   |  AV PC |  | AV PC | |   PBC   | |
      \ PBS   | | AV PV | |  AV PV |\n   +----+---+  +---+---+ +-----+---+ +---+----+
      +---+---+ +----+---+\n        |          |           | N/W Join|          |
      \         |\n        |          |           | ------->|          |          |\n
      \       |          |           |         |  Create  |          |\n        |
      \         |           |         |Post. Req |          |\n        |          |
      \          |         |--------->|          |\n        |          |           |
      \        |Create Posture Req   |\n        |          |           |         |----------+--------->|\n
      \       |          |           |         | Vndr Y AV Post Req  |\n        |
      \         |           |         |<---------+----------|\n        |          |
      \          |         |Vndr X AV |          |\n        |          |           |
      \        |Post. Req |          |\n        |          |           | Posture |<---------|
      \         |\n        |          |           | Request |          |          |\n
      \       |          | Vndr X AV |<--------|          |          |\n        |
      \         | Post. Req |         |          |          |\n        |          |<----------|
      \        |          |          |\n        |      Vndr Y AV       |         |
      \         |          |\n        |     Posture Req      |         |          |
      \         |\n        +<---------+-----------|         |          |          |\n
      \       |  Vndr Y AV Posture   |         |          |          |\n        +----------+---------->|
      \        |          |          |\n        |          | Vndr X AV |         |
      \         |          |\n        |          |  Posture  |         |          |
      \         |\n        |          |---------->| Posture |          |          |\n
      \       |          |           |Response |          |          |\n        |
      \         |           |-------->|          |          |\n        |          |
      \          |         |  Verify  |          |\n        |          |           |
      \        |  Posture |          |\n        |          |           |         |--------->|
      \         |\n        |          |           |         |     Verify Posture  |\n
      \       |          |           |         |----------+--------->|\n        |
      \         |           |         |Vndr Y AV Post Result|\n        |          |
      \          |         |<---------+----------|\n        |          |           |
      \        |Vndr X AV |          |\n        |          |           |         |Post
      Reslt|          |\n        |          |           |  Assess |<---------|          |\n
      \       |          |           |  Result |          |          |\n        |
      \         | Vndr X AV |<--------|          |          |\n        |          |Post
      Reslt |<--------|          |          |\n        |          |<----------|         |
      \         |          |\n        | Vndr Y AV Post Reslt |         |          |
      \         |\n        +<---------+-----------|         |          |          |\n"
    - contents:
      - "A.2.1.  Message Contents\n   This section shows the contents of the key fields
        in each of the PA\n   messages exchanged in this use case.  When necessary,
        additional\n   commentary is provided to explain why certain fields contain
        the\n   shown values.  Note that many of the flows shown are between\n   components
        on the same system so no message contents are shown.\n"
      - contents:
        - "A.2.1.1.  N/W Join\n   This flow represents the event that causes the PBS
          to decide to start\n   an assessment of the endpoint in order to gain access
          to the network.\n   This is merely an event and does not include a message
          being sent.\n"
        title: A.2.1.1.  N/W Join
      - contents:
        - "A.2.1.2.  Create Posture Request (Create Posture Req)\n   This flow illustrates
          an invocation of the Vendor X and Vendor Y\n   Anti-Virus Posture Validators
          enabling posture request attributes to\n   be created.  Because this use
          case is triggered locally, NEA does not\n   specify the contents of this
          flow.\n"
        title: A.2.1.2.  Create Posture Request (Create Posture Req)
      - contents:
        - "A.2.1.3.  Vendor Y AV Posture Request (Vndr Y AV Posture Req)\n   This
          flow contains the PA message (Posture Request) from the Vendor Y\n   Anti-Virus
          Posture Validator\n   Vendor Y AV Posture Request PA Message {\n       Attribute
          HDR {Message ID}\n          Attribute 1 {\n              vendor-id=0\n              type=1
          (Attribute Request)\n              length\n              Value = {\n                 Vendor-id=0
          (IETF Standard)\n                 Type=2 (Standard attribute, Product-Information)\n
          \                Vendor-id=1 (Vendor Y)\n                 Type=2 (Vendor
          Y attribute, Extended-Dat-Version)\n               }\n          }\n   }\n"
        title: A.2.1.3.  Vendor Y AV Posture Request (Vndr Y AV Posture Req)
      - contents:
        - "A.2.1.4.  Vendor X AV Posture Request (Vndr X AV Post. Req)\n   This flow
          contains the PA message (Posture Request) from the Vendor X\n   Anti-Virus
          Posture Validator\n   Vendor X AV Posture Request PA Message {\n       Attribute
          HDR {Message ID}\n          Attribute 1 {\n              vendor-id=0\n              type=1
          (Attribute Request)\n              length\n              Value = {\n                 Vendor-id=1
          (Vendor X)\n                 Type=1 (Vendor X attribute, Scan-Engine-Version)\n
          \                Vendor-id=0 (IETF Standard)\n                 Type=5 (Standard,
          Operational-Status)\n              }\n          }\n    }\n"
        title: A.2.1.4.  Vendor X AV Posture Request (Vndr X AV Post. Req)
      - contents:
        - "A.2.1.5.  Posture Request\n   This flow contains the PB message containing
          the PA messages from the\n   Vendor X and Vendor Y Anti-Virus Posture Validators;
          the message\n   content is described in the PB-TNC specification.\n"
        title: A.2.1.5.  Posture Request
      - contents:
        - "A.2.1.6.  Posture Request (Vndr X AV Post Req & Vndr Y AV Post Req)\n   These
          flows illustrate an invocation of the Vendor X and Vendor Y\n   Anti-Virus
          Posture Collectors to process the Posture Request and\n   return the particular
          posture attributes requested.  Because this\n   flow is triggered locally,
          NEA does not specify the contents of this\n   flow.\n"
        title: A.2.1.6.  Posture Request (Vndr X AV Post Req & Vndr Y AV Post Req)
      - contents:
        - "A.2.1.7.  Vendor Y AV Posture (Vndr Y AV Posture)\n   This flow contains
          the PA message (response to the Posture Request)\n   from the Vendor Y Anti-Virus
          Posture Collector.\n   Vendor Y AV Posture PA Message {\n     Attribute
          HDR {Message ID}\n         Attribute 1 {\n            vendor-id=0 (IETF
          Standard)\n            Type=2 (Standard attribute, Product-Information)\n
          \           length\n            Value = {\n               product-vendor-id=12345
          (vendor Y)\n               product-id=987 (AV product id from vendor Y)\n
          \              product-name=\"Vendor Y Anti-Virus\"\n            }\n         }\n
          \        Attribute 2 {\n            vendor-id=2 (vendor Y)\n            type=2
          (vendor Y attribute, DAT-Version)\n            length\n            Value
          = {\n               DAT-version=5678\n            }\n         }\n     }\n"
        title: A.2.1.7.  Vendor Y AV Posture (Vndr Y AV Posture)
      - contents:
        - "A.2.1.8.  Vendor X AV Posture (Vndr X AV Posture)\n   This flow contains
          the PA message (response to the Posture Request)\n   from the Vendor X Anti-Virus
          Posture Collector.\n   Vendor X AV Posture PA Message {\n      Attribute
          HDR {Message ID}\n         Attribute 1 {\n            vendor-id=1\n            type=1
          (vendor X attribute, Scan-Engine-Version)\n            length\n            Value
          = {\n               scan-engine-version=1234\n            }\n         }\n
          \        Attribute 2 {\n            vendor-id=0 (IETF Standard)\n            type=5
          (Standard, Operational-Status)\n            length\n            Value =
          {\n               status=2 (installed but non-operational)\n               result=0
          (unknown)\n               last use=\"\" (never used)\n             }\n         }\n
          \    }\n"
        title: A.2.1.8.  Vendor X AV Posture (Vndr X AV Posture)
      - contents:
        - "A.2.1.9.  Posture Response\n   This flow contains the PB message containing
          the PA messages from the\n   Vendor X and Vendor Y Anti-Virus Posture Collectors;
          the message\n   content is described in the PB-TNC specification.\n"
        title: A.2.1.9.  Posture Response
      - contents:
        - "A.2.1.10.  Verify Posture\n   This flow illustrates an invocation of the
          Vendor X and Vendor Y\n   Anti-Virus Posture Validators requesting verification
          of the posture\n   attributes received.  Because this flow happens locally
          within the\n   NEA server, NEA does not specify the message contents.\n"
        title: A.2.1.10.  Verify Posture
      - contents:
        - "A.2.1.11.  Vendor Y AV Posture Result (Vndr Y AV Post Result)\n   This
          flow contains the PA message (Posture Assessment Result) from\n   the Vendor
          Y Anti-Virus Posture Validator\n   Vendor Y AV Posture Result PA Message
          {\n      Attribute HDR {Message ID}\n        Attribute 1 {\n           vendor-id=0\n
          \          type=9 (assessment-result)\n           length\n           Value
          = {\n              assessment-result=0 (compliant)\n           }\n        }\n
          \    }\n"
        title: A.2.1.11.  Vendor Y AV Posture Result (Vndr Y AV Post Result)
      - contents:
        - "A.2.1.12.  Vendor X AV Posture Result (Vndr X AV Post Reslt)\n   This flow
          contains the PA message (Posture Assessment Result) from\n   the Vendor
          X Anti-Virus Posture Validator\n   Vendor X AV Posture Result PA Message
          {\n       Attribute HDR {Message ID}\n         Attribute 1 {\n            vendor-id=0\n
          \           type=9 (assessment-result)\n            length\n            Value
          = {\n               assessment-result=1 (non-compliant)\n            }\n
          \        }\n    }\n"
        title: A.2.1.12.  Vendor X AV Posture Result (Vndr X AV Post Reslt)
      - contents:
        - "A.2.1.13.  Assessment Result (Assess Result)\n   This flow contains the
          PB message containing the system assessment\n   result computed by the Posture
          Broker Server and the PA messages from\n   the Vendor X and Vendor Y Anti-Virus
          Posture Validators; the message\n   content is described in the PB-TNC specification.\n"
        title: A.2.1.13.  Assessment Result (Assess Result)
      - contents:
        - "A.2.1.14.  Posture Result (Vndr X AV Post Reslt & Vndr Y AV Post Reslt)\n
          \  These flows illustrate an invocation of the Vendor X and Vendor Y\n   Anti-Virus
          Posture Collectors to receive the posture assessment\n   results.  Because
          this flow is triggered locally, NEA does not\n   specify the contents of
          this flow.\n"
        title: A.2.1.14.  Posture Result (Vndr X AV Post Reslt & Vndr Y AV Post Reslt)
      title: A.2.1.  Message Contents
    title: A.2.  Server-Initiated Assessment with Remediation
  - contents:
    - "A.3.  Client-Triggered Reassessment\n   This scenario involves the reassessment
      of an endpoint as a result of\n   enabling a software component on the endpoint.
      \ The endpoint has two\n   VPN client software components, one from vendor X
      for the user's home\n   network and other from vendor Y for the network that
      the endpoint is\n   currently accessing.  The assessment is triggered when the
      user tries\n   to use the Vendor X VPN client; this is a violation of the assessment\n
      \  policy.  The Posture Broker Client triggers the posture assessment\n   when
      it receives a notification from the VPN Posture Collector about\n   the change
      to the operational state of the VPN component on the\n   endpoint.  Note that
      the VPN Posture Collector may support standard\n   attributes and some vendor-defined
      attributes from vendor X's and\n   vendor Y's namespaces.  This use case does
      not leverage vendor-\n   defined attributes.  The assessment involves verification
      of the\n   standard VPN posture attributes by the standard VPN Posture Validator\n
      \  that results in a non-compliant assessment result.\n   This use case relies
      on the use of multiple Posture Collector IDs for\n   a single Posture Collector
      as described in section 3.3 of the PA-TNC\n   specification.  In this example,
      the Posture Collector will obtain\n   two Posture Collector IDs to a single
      Posture Collector (Standard VPN\n   PC) and the Posture Collector will generate
      two separate PA messages\n   each using a different ID to report the posture
      for Vendor X and\n   Vendor Y VPN Clients.  The Posture Broker Client will associate
      the\n   assigned IDs in the PB message sent to the NEA Server.  This entire\n
      \  behavior will be completely opaque to the NEA Server, which will\n   handle
      the PB message as if there were two VPN Posture Collectors on\n   the NEA Client.\n
      \  +--------+  +-------+ +---------+ +--------+ +--------+ +--------+\n   |Vndr
      X  |  |Vndr Y | |Standard | |Standard| |Standard| |Standard|\n   |VPNClnt |
      \ |VPNClnt| | VPN PC  | |  PBC   | |  PBS   | | VPN PV |\n   +----+---+  +---+---+
      +-----+---+ +---+----+ +---+----+ +----+---+\n   Enble|          |           |
      \        |          |           |\n   ---->|          |           |         |
      \         |           |\n        |  VPN Status Change   |         |          |
      \          |\n        |--------------------->| Posture |          |           |\n
      \       |          |           | Change  |          |           |\n        |
      \         |           |-------->|          |           |\n        |          |
      \          |Req. Post|          |           |\n        |          |           |<--------|
      \         |           |\n        |          |Ins/Rq Info|         |          |
      \          |\n        |          |<----------|         |          |           |\n
      \       | Inspect/Request Info |         |          |           |\n        |<---------+-----------|VPNX
      Post|          |           |\n        |          |           |-------->|          |
      \          |\n        |          |           |VPNY Post|          |           |\n
      \       |          |           |-------->|          |           |\n        |
      \         |           |         | Posture  |           |\n        |          |
      \          |         |  Report  |           |\n        |          |           |
      \        |--------->|           |\n        |          |           |         |
      \         |Vrfy Post. |\n        |          |           |         |          |---------->|\n
      \       |          |           |         |          |VPN PRslt  |\n        |
      \         |           |         |  Assess  |<----------|\n        |          |
      \          |         |  Result  |           |\n        |          |           |
      \        |<---------|           |\n        |          |           |VPN PRslt|
      \         |           |\n        |          |           |<--------|          |
      \          |\n"
    - contents:
      - "A.3.1.  Message Contents\n   This section shows the contents of the key fields
        in each of the PA\n   messages exchanged in this use case.  When necessary,
        additional\n   commentary is provided to explain why certain fields contain
        the\n   shown values.  Note that many of the flows shown are between\n   components
        on the same system so no message contents are shown.\n"
      - contents:
        - "A.3.1.1.  Enable VPN Client (Enble)\n   This flow represents the end user
          triggered event of starting the VPN\n   Client software from Vendor X.  This
          is merely an event and does not\n   include a message being sent.\n"
        title: A.3.1.1.  Enable VPN Client (Enble)
      - contents:
        - "A.3.1.2.  Notify Status Change (VPN Status Change)\n   This flow represents
          the detection of the active state of the Vendor\n   X VPN Client software
          by the VPN Posture Collector.  This is merely\n   an event and does not
          include a message being sent.\n"
        title: A.3.1.2.  Notify Status Change (VPN Status Change)
      - contents:
        - "A.3.1.3.  Notify Posture Change (Posture Change)\n   This flow represents
          the notification of the VPN posture change sent\n   from the VPN Posture
          Collector to the Standard Posture Broker Client.\n   This is merely an event
          and does not include a message being sent.\n"
        title: A.3.1.3.  Notify Posture Change (Posture Change)
      - contents:
        - "A.3.1.4.  Request Posture (Req. Post)\n   This flow illustrates an invocation
          of the VPN Posture Collector\n   requesting particular posture attributes
          to be sent.  Because this\n   use case is triggered locally, NEA does not
          specify the contents of\n   this flow.\n"
        title: A.3.1.4.  Request Posture (Req. Post)
      - contents:
        - "A.3.1.5.  Inspect/Request Info (Ins/Rq Info)\n   This flow illustrates
          the acquisition of the posture information by\n   the VPN Posture Collector
          from the Vendor X and Vendor Y VPN Client\n   components.  Because this
          flow is triggered locally, NEA does not\n   specify the message contents.\n"
        title: A.3.1.5.  Inspect/Request Info (Ins/Rq Info)
      - contents:
        - "A.3.1.6.  Vendor X VPN Posture (VPNX Post)\n   This flow contains the PA
          message from the VPN Posture Collector\n   describing the Vendor X VPN Client's
          posture:\n   Vendor X VPN Posture PA Message{\n      Attribute HDR {Message
          ID}\n        Attribute 1 {\n              vendor-id=0\n              type=2
          (product information)\n              length\n              Value = {\n                 product-vendor-id=9876
          (vendor X)\n                 product-id=567 (VPN client identifier for Vndr
          X)\n                 product-name=\"Vendor X VPN Client\"\n               }\n
          \        }\n         Attribute 2 {\n              vendor-id=0\n              type=5
          (operational status)\n              length\n              Value = {\n                 Status=3
          (Operational)\n                 Result=1 (Successful use with no errors
          detected)\n                 last Use=\"2008-07-07T12:00:00Z\"\n              }\n
          \        }\n"
        title: A.3.1.6.  Vendor X VPN Posture (VPNX Post)
      - contents:
        - "A.3.1.7.  Vendor Y VPN Posture (VPNY Post)\n   This flow contains the PA
          message from the VPN Posture Collector\n   including the Vendor Y VPN Client's
          posture:\n   Vendor Y VPN Posture PA Message{\n      Attribute HDR {Message
          ID}\n          Attribute 1 {\n              vendor-id=0\n              type=2
          (product information)\n              length\n              Value = {\n                 product-vendor-id=Vendor
          Y\n                 product-id=234 (VPN client identifier for Vndr Y)\n
          \                product-name=\"Vendor Y VPN Client\"\n               }\n
          \        }\n         Attribute 2 {\n              vendor-id=0\n              type=5
          (operational status)\n              length\n              Value = {\n                Status=3
          (Operational)\n                Result=1 (Successful use with no errors detected)\n
          \               last Use=\"2008-07-07T14:05:00Z\"\n              }\n         }\n
          \  }\n"
        title: A.3.1.7.  Vendor Y VPN Posture (VPNY Post)
      - contents:
        - "A.3.1.8.  Posture Report\n   This flow contains the PB message containing
          the PA message from the\n   VPN Posture Collector; the message content is
          described in the PB-TNC\n   specification.\n"
        title: A.3.1.8.  Posture Report
      - contents:
        - "A.3.1.9.  Verify Posture (Vrfy Post.)\n   This flow illustrates an invocation
          of the VPN Posture Validator\n   requesting verification of the posture
          attributes received.  Because\n   this flow happens locally within the NEA
          Server, NEA does not specify\n   the message contents.\n"
        title: A.3.1.9.  Verify Posture (Vrfy Post.)
      - contents:
        - "A.3.1.10.  VPN Posture Result (VPN PRslt)\n   This flow contains the PA
          message (Posture Assessment Result) from\n   the VPN Posture Validator\n
          \  VPN Posture Result PA Message {\n      Attribute HDR {Message ID}\n         Attribute
          1 {\n              vendor-id=0\n              type=9 (assessment-result)\n
          \             length\n              Value = {\n                 assessment-result=1
          (non-compliant)\n              }\n         }\n    }\n"
        title: A.3.1.10.  VPN Posture Result (VPN PRslt)
      - contents:
        - "A.3.1.11.  Assessment Result (Assess Result)\n   This flow contains the
          PB message containing the system assessment\n   result computed by the Posture
          Broker Server and the PA messages from\n   the VPN Posture Validator; the
          message content is described in the\n   PB-TNC specification.\n"
        title: A.3.1.11.  Assessment Result (Assess Result)
      - contents:
        - "A.3.1.12.  Posture Result (VPN PRslt)\n   This flow illustrates an invocation
          of the VPN Posture Collector to\n   receive the posture assessment result.
          \ Because this flow is\n   triggered locally, NEA does not specify the contents
          of this flow.\n"
        title: A.3.1.12.  Posture Result (VPN PRslt)
      title: A.3.1.  Message Contents
    title: A.3.  Client-Triggered Reassessment
  title: Appendix A.  Use Cases
- contents:
  - "Appendix B.  Evaluation against NEA Requirements\n   This section evaluates the
    PA-TNC protocol against the requirements\n   defined in the NEA Requirements document.
    \ Each subsection considers\n   a separate requirement from the NEA Requirements
    document.  Only\n   common requirements (C-1 through C-10) and PA requirements
    (PA-1\n   through PA-6) are considered, since these are the only ones that\n   apply
    to PA.\n"
  - contents:
    - "B.1.  Evaluation against Requirement C-1\n   Requirement C-1 says:\n   C-1
      \  NEA protocols MUST support multiple round trips between the NEA\n   Client
      and NEA Server in a single assessment.\n   PA-TNC meets this requirement.  It
      allows an unlimited number of\n   round trips between the NEA Client and NEA
      Server.\n"
    title: B.1.  Evaluation against Requirement C-1
  - contents:
    - "B.2.  Evaluation against Requirement C-2\n   Requirement C-2 says:\n   C-2
      \  NEA protocols SHOULD provide a way for both the NEA Client and\n   the NEA
      Server to initiate a posture assessment or reassessment as\n   needed.\n   PA-TNC
      meets this requirement.  PA-TNC is designed to work whether\n   the NEA Client
      or the NEA Server initiates a posture assessment or\n   reassessment.\n"
    title: B.2.  Evaluation against Requirement C-2
  - contents:
    - "B.3.  Evaluation against Requirement C-3\n   Requirement C-3 says:\n   C-3
      \  NEA protocols including security capabilities MUST be capable\n   of protecting
      against active and passive attacks by intermediaries\n   and endpoints including
      prevention from replay-based attacks.\n   Security for PA-TNC messages being
      sent over the network is provided\n   through PT protocol security.  Therefore,
      PA-TNC does not include any\n   security capabilities.  Since this requirement
      only applies to NEA\n   protocols \"including security capabilities\", this
      specification is\n   not subject to this requirement (see section 5.2).\n"
    title: B.3.  Evaluation against Requirement C-3
  - contents:
    - "B.4.  Evaluation against Requirement C-4\n   Requirement C-4 says:\n   C-4
      \  The PA and PB protocols MUST be capable of operating over any\n   PT protocol.
      \ For example, the PB protocol must provide a transport-\n   independent interface
      allowing the PA protocol to operate without\n   change across a variety of network
      protocol environments (e.g.,\n   EAP/802.1X, PANA, TLS and IKE/IPsec).\n   PA-TNC
      meets this requirement.  PA-TNC can operate over any PT\n   protocol that meets
      the requirements for PT stated in the NEA\n   Requirements document.  PA-TNC
      does not have any dependencies on\n   specific details of the underlying PT
      protocol.\n"
    title: B.4.  Evaluation against Requirement C-4
  - contents:
    - "B.5.  Evaluation against Requirement C-5\n   Requirement C-5 says:\n   C-5
      \  The selection process for NEA protocols MUST evaluate and\n   prefer the
      reuse of existing open standards that meet the\n   requirements before defining
      new ones.  The goal of NEA is not to\n   create additional alternative protocols
      where acceptable solutions\n   already exist.\n   Based on this requirement,
      PA-TNC should receive a strong preference.\n   PA-TNC is equivalent with IF-M
      1.0, an open TCG specification.  Other\n   specifications from TCG and other
      groups are also under development\n   based on the IF-M 1.0 specification.  Selecting
      PA-TNC as the basis\n   for the PA protocol will ensure compatibility with IF-M
      1.0, with\n   these other specifications, and with their implementations.\n"
    title: B.5.  Evaluation against Requirement C-5
  - contents:
    - "B.6.  Evaluation against Requirement C-6\n   Requirement C-6 says:\n   C-6
      \  NEA protocols MUST be highly scalable; the protocols MUST\n   support many
      Posture Collectors on a large number of NEA Clients to\n   be assessed by numerous
      Posture Validators residing on multiple NEA\n   Servers.\n   PA-TNC meets this
      requirement.  PA-TNC supports an unlimited number\n   of Posture Collectors,
      Posture Validators, NEA Clients, and NEA\n   Servers.  It also is quite scalable
      in many other aspects as well.  A\n   PA-TNC message can contain up to 2^32-1
      octets and about 2^28 PA-TNC\n   attributes.  Each organization with an SMI
      Private Enterprise Number\n   is entitled to define up to 2^32 vendor-specific
      PA-TNC Attribute\n   Types, 2^16 vendor-specific PA-TNC Product IDs, and 2^32
      vendor-\n   specific PA-TNC Error Codes.  Each attribute can contain almost
      2^32\n   octets.  It is generally not advisable or necessary to send this much\n
      \  data in a NEA assessment, but still PA-TNC is highly scalable and\n   meets
      requirement C-6 easily.\n"
    title: B.6.  Evaluation against Requirement C-6
  - contents:
    - "B.7.  Evaluation against Requirement C-7\n   Requirement C-7 says:\n   C-7
      \  The protocols MUST support efficient transport of a large\n   number of attribute
      messages between the NEA Client and the NEA\n   Server.\n   PA-TNC meets this
      requirement.  Each PA-TNC message can contain about\n   2^28 PA-TNC attributes.
      \ PA-TNC supports up to 2^32 round trips in a\n   session so the maximum number
      of attribute messages that can be sent\n   in a single session is actually about
      2^50.  However, it is generally\n   inadvisable and unnecessary to send a large
      number of messages in a\n   NEA assessment.  As for efficiency, PA-TNC adds
      only 12 octets of\n   overhead per attribute and 8 octets per message (which
      is negligible\n   on a per-attribute basis).\n"
    title: B.7.  Evaluation against Requirement C-7
  - contents:
    - "B.8.  Evaluation against Requirement C-8\n   Requirement C-8 says:\n   C-8
      \  NEA protocols MUST operate efficiently over low bandwidth or\n   high latency
      links.\n   PA-TNC meets this requirement.  A PA-TNC exchange is envisioned\n
      \  (based on current deployment experience) to involve one or two round\n   trips
      with less than 500 octets of PA-TNC messages.  Of course, use\n   of vendor-specific
      PA-TNC attribute types could expand the\n   assessment.  However, PA-TNC itself
      imposes an overhead of only 8\n   octets per PA-TNC message and 12 octets per
      attribute.\n"
    title: B.8.  Evaluation against Requirement C-8
  - contents:
    - "B.9.  Evaluation against Requirement C-9\n   Requirement C-9 says:\n   C-9
      \  For any strings intended for display to a user, the protocols\n   MUST support
      adapting these strings to the user's language\n   preferences.\n   PA-TNC meets
      this requirement.  The only field included in a PB-TNC\n   attribute for display
      to the user includes a language tag that could\n   be selected based upon the
      user's PB-TNC negotiated preferred\n   language for the assessment (see section
      4.10 of the PB-TNC\n   specification).  With this exception, all of the strings
      in the\n   standard PA-TNC attributes are intended for logging and programmatic\n
      \  comparisons.\n   If any vendor-specific PA-TNC attribute types or future
      IETF Standard\n   PA-TNC Attribute Types include strings that are intended for
      display\n   to a user, they should be translated to the user's preferred\n   language.
      \ The Posture Broker Server will need to expose the user's\n   preferences to
      the Posture Validators through whatever API or\n   protocol is used to connect
      those components.  However, that is all\n   out of scope for this specification.\n"
    title: B.9.  Evaluation against Requirement C-9
  - contents:
    - "B.10.  Evaluation against Requirement C-10\n   Requirement C-10 says:\n   C-10
      \ NEA protocols MUST support encoding of strings in UTF-8 format.\n   PA-TNC
      meets this requirement.  All strings in the PA-TNC protocol\n   are encoded
      in UTF-8 format.  This allows the protocol to support a\n   wide range of languages
      efficiently.\n"
    title: B.10.  Evaluation against Requirement C-10
  - contents:
    - "B.11.  Evaluation against Requirement C-11\n   Requirement C-11 says:\n   C-11
      \ Due to the potentially different transport characteristics\n   provided by
      the underlying candidate PT protocols, the NEA Client and\n   NEA Server MUST
      be capable of becoming aware of and adapting to the\n   limitations of the available
      PT protocol.  For example, some PT\n   protocol characteristics that might impact
      the operation of PA and PB\n   include restrictions on which end can initiate
      a NEA connection,\n   maximum data size in a message or full assessment, upper
      bound on\n   number of round trips, and ordering (duplex) of messages exchanged.\n
      \  The selection process for the PT protocols MUST consider the\n   limitations
      the candidate PT protocol would impose upon the PA and PB\n   protocols.\n   PA-TNC
      meets this requirement.  The design of the PA-TNC protocol\n   emphasizes efficient
      transport of information in order to maximize\n   its usability in constrained
      PT environments.  Local APIs could allow\n   Posture Collectors and Posture
      Validators to discover when they are\n   operating in a less constrained deployment
      and then make use of more\n   verbose attributes.  Similarly, Posture Collectors
      could choose not\n   to send or use smaller attributes (including assertions
      from previous\n   assessments) when faced with a very constrained network connection.\n"
    title: B.11.  Evaluation against Requirement C-11
  - contents:
    - "B.12.  Evaluation against Requirement PA-1\n   Requirement PA-1 says:\n   PA-1
      \ The PA protocol MUST support communication of an extensible set\n   of NEA
      standards-defined attributes.  These attributes will be\n   uniquely identifiable
      from non-standard attributes.\n   PA-TNC meets this requirement.  Each attribute
      is identified with a\n   PA-TNC Attribute Vendor ID and a PA-TNC Attribute Type.
      \ IETF\n   Standard PA-TNC Attribute Types use a vendor ID of zero (0), in\n
      \  contrast with vendor-specific PA-TNC Attribute Types, which will use\n   the
      vendor's SMI Private Enterprise Number as the vendor ID.  The\n   IANA will
      maintain a registry of PA-TNC Attribute Types with new\n   values added by Expert
      Review with Specification Required, as\n   described in the IANA Considerations
      section of this specification.\n   Thus, the set of standard attribute types
      is extensible, but all\n   standard attribute types are uniquely identifiable.\n"
    title: B.12.  Evaluation against Requirement PA-1
  - contents:
    - "B.13.  Evaluation against Requirement PA-2\n   Requirement PA-2 says:\n   PA-2
      \ The PA protocol MUST support communication of an extensible set\n   of vendor-specific
      attributes.  These attributes will be segmented\n   into uniquely identifiable
      vendor-specific namespaces.\n   PA-TNC meets this requirement.  Each attribute
      is identified with a\n   PA-TNC Attribute Vendor ID and a PA-TNC Attribute Type.
      \ Vendor-\n   defined PA-TNC Attribute Types use the vendor's SMI Private\n
      \  Enterprise Number as the PA-TNC Attribute Vendor ID.  Each vendor can\n   define
      up to 2^32 PA-TNC Attribute Types, using its own internal\n   processes to manage
      its set of attribute types.\n   The IANA is not involved, other than the initial
      assignment of the\n   vendor's SMI Private Enterprise Number.  Thus, the set
      of vendor-\n   specific attributes is segmented into uniquely identifiable vendor-\n
      \  specific namespaces.\n"
    title: B.13.  Evaluation against Requirement PA-2
  - contents:
    - "B.14.  Evaluation against Requirement PA-3\n   Requirement PA-3 says:\n   PA-3
      \ The PA protocol MUST enable a Posture Validator to make one or\n   more requests
      for attributes from a Posture Collector within a single\n   assessment.  This
      enables the Posture Validator to reassess the\n   posture of a particular endpoint
      feature or to request additional\n   posture including from other parts of the
      endpoint.\n   PA-TNC meets this requirement.  The Attribute Request attribute
      type\n   is an IETF Standard PA-TNC Attribute Type that permits a Posture\n
      \  Validator to send to one or more Posture Collectors a request for one\n   or
      more attributes.  This attribute may be sent at any point in the\n   posture
      assessment process and may in fact be sent more than once if\n   the Posture
      Validator needs to first determine the type of operating\n   system and then
      request certain attributes specific to that operating\n   system, for example.\n"
    title: B.14.  Evaluation against Requirement PA-3
  - contents:
    - "B.15.  Evaluation against Requirement PA-4\n   Requirement PA-4 says:\n   PA-4
      \ The PA protocol MUST be capable of returning attributes from a\n   Posture
      Validator to a Posture Collector.  For example, this might\n   enable the Posture
      Collector to learn the specific reason for a\n   failed assessment and to aid
      in remediation and notification of the\n   system owner.\n   PA-TNC meets this
      requirement.  A Posture Validator can easily send\n   attributes to one or more
      Posture Collectors.\n"
    title: B.15.  Evaluation against Requirement PA-4
  - contents:
    - "B.16.  Evaluation against Requirement PA-5\n   Requirement PA-5 says:\n   PA-5
      \ The PA protocol SHOULD provide authentication, integrity, and\n   confidentiality
      of attributes communicated between a Posture\n   Collector and Posture Validator.
      \ This enables end-to-end security\n   across a NEA deployment that might involve
      traversal of several\n   systems or trust boundaries.\n   PA-TNC does not include
      an explicit PA-level security mechanism but\n   does lay a foundation allowing
      attribute-level security protections\n   to be added later.  As an existence
      proof, the NEA working group\n   considered an Internet-Draft proposal capable
      of encapsulating PA\n   attributes within a Cryptographic Message Syntax (CMS)
      security\n   wrapper in a new attribute type.  This proposal offered the\n   protections
      described in this requirement.  However, the NEA WG\n   decided that the use
      cases in scope for the working group did not\n   require PA-level security.
      \ The use cases involving PA message\n   traversal of multiple systems or trust
      boundaries were considered out\n   of scope; therefore, a Posture Validator
      to Posture Collector end-to-\n   end security protection was considered not
      to be required.\n   Instead, PA-TNC attributes are protected by the PT layer\n
      \  authentication, integrity, and confidentiality support.  This\n   protects
      the attributes communicated between the Posture Transport\n   Client and Posture
      Transport Server.  Because the Posture Collector\n   is in the same address
      space as the Posture Broker Client and Posture\n   Transport Client and the
      Posture Validator is in the same address\n   space as the Posture Broker Server
      and Posture Transport Server, the\n   underlying broker and transport components
      are deemed trusted with\n   respect to not tampering with the PA messages (see
      trust model in\n   section 5.1 for details).  Encrypting the PA-TNC messages
      would not\n   prevent a hostile broker or transport component from attacking
      the\n   messages.\n"
    title: B.16.  Evaluation against Requirement PA-5
  - contents:
    - "B.17.  Evaluation against Requirement PA-6\n   Requirement PA-6 says:\n   PA-6
      \ The PA protocol MUST be capable of carrying attributes that\n   contain non-binary
      and binary data including encrypted content.\n   PA-TNC meets this requirement.
      \ PA-TNC attributes can contain non-\n   binary and binary data including encrypted
      content.  For examples,\n   see the attribute type definitions contained in
      this specification.\n"
    title: B.17.  Evaluation against Requirement PA-6
  title: Appendix B.  Evaluation against NEA Requirements
- contents:
  - "Authors' Addresses\n   Paul Sangster\n   Symantec Corporation\n   6825 Citrine
    Drive\n   Carlsbad, CA 92009\n   USA\n   EMail: Paul_Sangster@symantec.com\n   Kaushik
    Narayan\n   Cisco Systems Inc.\n   10 West Tasman Drive\n   San Jose, CA 95134\n
    \  USA\n   EMail: kaushik@cisco.com\n"
  title: Authors' Addresses
