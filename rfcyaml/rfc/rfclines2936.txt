Abstract Entities composing web pages to provide services over the Hypertext Transfer Protocol (HTTP) frequently have the problem of not knowing what Multipurpose Internet Mail Extensions (MIME) types have handlers installed at a user's browser.
For example, whether an Internet Open Trading Protocol (IOTP) or VRML or SET or some streaming media handler is available.
In some cases they would want to display different web pages or content depending on a MIME handler's availability.
This document summarizes reasonable techniques to solve this problem for most of the browsers actually deployed on the Internet as of early 2000.
It is intended to be of practical use to implementors during the period before the wide deployment of superior standards based techniques which may be developed.
Acknowledegements Helpful comments by Tony Lewis of Visa have been incorporated.
Introduction Entities composing web pages to provide services over [HTTP]
frequently have the problem of not knowing what [MIME] types have handlers installed at a user's browser.
For example, whether an [IOTP] or VRML or [SET] or some streaming media handler is available.
In many cases they would want to display different web pages or content depending on a MIME handler's availability.
Sending a response with a MIME type that is not supported frequently results in interrupting the flow of the user experience, browser queries as to what to do with the data being provided, and, of course, failure to provide the behavior that would have occurred had the correct MIME type handler been installed.
This document describes reasonable techniques to solve this problem for most of the browsers actually deployed on the Internet as of early 2000.
It is intended to be of practical use to implementors during the period before the wide deployment of superior standards based techniques which may be developed.
It is written in terms of determining whether a handler for application/iotp or application/
iotp exists but is equally applicable to other MIME types.
The problem should be solved by the Hyper Text Transport Protocol [HTTP] request "Accept" header which lists accepted [MIME] types.
This header is present in both Version 1.0 and 1.1 of HTTP and its content is supposed to be a list of MIME types and subtypes that are accepted.
If the particular MIME type you are looking for is specifically present in the Accept header, it is generally safe to assume that a handler for it is actually installed or part of the browser.
Although not part of the main topic of this document, if you are designing MIME type handler software and have access to a browser interface that allows you to request the insertion of the MIME type or types your software handles into the Accept header, you generally should do so.
It will make it easier for servers sensitive to that MIME type to respond correctly.
JavaScript Most recent browsers support one or more scripting languages of which
the most widely deployed is "JavaScript".
These scripting languages appear in web pages and permit the interpretive execution of programming language constructs that can probe the browser environment, conditionally cause different page contents to be displayed, etc.
For example, Appendix A shows JavaScript available from the Netscape web site for determining what operating system, browser, and version on which a web page is appearing.
JavaScript is a trademark of SUN Microsystems, Inc.
It was originally called LiveScript.
It has nothing to do with the Java language.
The syntax for script use appears to be a Hyper Text Markup Language (HTML) comment so that browsers that do not support scripting will ignore such items.
The following is a simple example of conditional execution of parts of a web page based on JavaScript MIME type handler detection.
ActiveX and the Windows Registry
If running on Microsoft Windows Internet Explorer version 3 or 4, it is necessary to query the Windows Registry to determine local MIME type support.
Although these broswers support JavaScript, in v3 the mimeTypes array is not present and in v4 the mimeTypes array is present but always empty.
For example, executing the following code will test for support of the IOTP types: CString iotpString, xiotpString;
char  Key, Keyx; int rc, rcx;
iotpString   "SOFTWARE\Classes\MIME\Database\Content Type\application/iotp"; xiotpString   "SOFTWARE\Classes\MIME\Database\Content Type\application/x iotp"; Key   iotpString.
LOCAL MACHINE, Key, 0, KEY READ, hDefKey); rcx
No IOTP Handler } NOTE:
ActiveX is a trademark of Microsoft and was originally called Sweeper.
ECML, The Electronic Commerce Modeling Language A industry group has recently proposed a standard for fields used in electronic commerce.
This fields allow "wallet" software acting for the consumer to convey standardized information to a merchant, including information as to what payment related protocols are supported at the customer site.
Putting It All Together The following diagram indicates how these techniques can be put together.
Future Development Active work is proceeding in the IETF, World Wide Web Consortium [W3C], and other standards and industry groups concerning content and capabilities negotiation.
This work is likely to lead to superior methods to implement the functionality described herein.
However, near universal deployment of such new standards/features will take some time.
Thus you should expect the methods given herein to be obsoleted, but perhaps not for some time.
It should be noted that the variety of ActiveX control suggested above is reading the user's registry, that is, examining their computer and reporting back some information it has discovered.
This may be a concern among some users.
In general, the use of JavaScript and, even more so, ActiveX is dangerous because they are so powerful.
JavaScript or ActiveX from a web page could be invisibly damaging to the client.
Security of web interactions is normally provided by adopting channel encryption on the browser to server connections, such as [TLS].
In the absence of some such additional security outside of HTTP, requests and/or responses may be forged or tampered with.
IANA Considerations None specific to the techniques described herein.
For MIME types and type registration procedures, see [MIME: RFCs 2046, 2048].
hide JavaScript from non JavaScript browsers //
Ultimate client side JavaScript client sniff. //
Permission granted to reuse and distribute. //
May 99 to add is nav5up and is ie5up (see below).
Everything you always wanted to know about your JavaScript client //
but were afraid to ask.
Creates "is " variables indicating: //
is nav, is ie, is opera //
(3) browser vendor AND major version number //
is nav5, is nav5up, //
is ie3, is ie4, is ie4up //
is js (float indicating full JavaScript version number:
(5) OS platform and version:
is sun, is sun4, is sun5
is irix, is irix5, is irix6 //
is hpux, is hpux9, is
is aix, is aix1, is aix2, is aix3, is aix4 //
is linux, is sco, is unixware, is mpras, is reliant //
is dec, is sinix, is freebsd, is bsd //
for detailed lists of userAgent strings.
you don't want your Nav4 or IE4 code to "turn off" or //
stop working when Nav5 and IE5 (or later) are released, so //
in conditional code forks, use is nav4up
and is ie4up ("IE4 or greater") instead of is nav4 or is ie4 // to check version in code which you want to work on future //
convert all characters to lowercase to simplify testing var agt navigator.userAgent.toLowerCase()
On IE5, these return 4, so use is ie5up to detect IE5.
Opera and WebTV spoof Navigator.
We do strict client //
On AOL4, returns false if IE3 is embedded browser //
or if this is the first browser window opened.
Thus the // variables is aol, is aol3, and is aol4 aren't 100% reliable.
if (is nav3    is opera) is js
if (is nav5) is js   1.4 //
In the future, update this code when newer versions of JS // are released.
For now, we try to provide some upward compatibility //
so that future versions of Nav and IE will show they are at //
Always check for JS version compatibility // with > or
Reliable detection of Win98 may not be possible. //
On Nav 4.x and before you'll get plain "Windows" in userAgent. //
On Mercury client, the 32 bit version will return "Win98", but //
the 16 bit version running on Win98 will still return "Win95".
1)); var is hpux10  (
