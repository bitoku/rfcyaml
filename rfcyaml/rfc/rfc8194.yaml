- contents:
  - '             A YANG Data Model for LMAP Measurement Agents

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a data model for Large-Scale Measurement\n
    \  Platforms (LMAPs).  The data model is defined using the YANG data\n   modeling
    language.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8194.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . . .
    . . .   2\n     1.2.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . .
    .   2\n   2.  Data Model Overview . . . . . . . . . . . . . . . . . . . . .   3\n
    \  3.  Relationship to the Information Model . . . . . . . . . . . .   9\n   4.
    \ YANG Modules  . . . . . . . . . . . . . . . . . . . . . . . .  10\n     4.1.
    \ LMAP Common YANG Module . . . . . . . . . . . . . . . . .  10\n     4.2.  LMAP
    Control YANG Module  . . . . . . . . . . . . . . . .  18\n     4.3.  LMAP Report
    YANG Module . . . . . . . . . . . . . . . . .  40\n   5.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  45\n   6.  IANA Considerations . . . .
    . . . . . . . . . . . . . . . . .  47\n   7.  References  . . . . . . . . . .
    . . . . . . . . . . . . . . .  48\n     7.1.  Normative References  . . . . .
    . . . . . . . . . . . . .  48\n     7.2.  Informative References  . . . . . .
    . . . . . . . . . . .  49\n   Appendix A.  Example Parameter Extension Module
    . . . . . . . . .  51\n   Appendix B.  Example Configuration  . . . . . . . .
    . . . . . . .  53\n   Appendix C.  Example Report . . . . . . . . . . . . . .
    . . . . .  56\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . .
    . . .  59\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . .
    .  59\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a data model for Large-Scale Measurement\n
    \  Platforms (LMAPs) [RFC7594].  The data model is defined using the\n   YANG
    [RFC7950] data modeling language.  It is based on the LMAP\n   Information Model
    [RFC8193].\n"
  - contents:
    - "1.1.  Terminology\n   This document uses the LMAP terminology defined in [RFC7594].\n
      \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
      \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\",
      and\n   \"OPTIONAL\" in this document are to be interpreted as described in
      BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
      as shown here.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Tree Diagrams\n   A simplified graphical representation of the data model
      is used in\n   this document.  The meaning of the symbols in these diagrams
      is as\n   follows:\n   o  Brackets \"[\" and \"]\" enclose list keys.\n   o
      \ Abbreviations before data node names: \"rw\" means configuration\n      (read-write),
      \"ro\" means state data (read-only), and \"w\" means RPC\n      input data (write-only).\n
      \  o  Symbols after data node names: \"?\" means an optional node, \"!\"\n      means
      a presence container, and \"*\" denotes a list and leaf-list.\n   o  Parentheses
      enclose choice and case nodes, and case nodes are also\n      marked with a
      colon (\":\").\n   o  Ellipsis (\"...\") stands for contents of subtrees that
      are not\n      shown.\n"
    title: 1.2.  Tree Diagrams
  title: 1.  Introduction
- contents:
  - "2.  Data Model Overview\n   The LMAP framework has three basic elements: Measurement
    Agents\n   (MAs), Controllers, and Collectors.  Measurement Agents initiate the\n
    \  actual measurements, which are called Measurement Tasks in the LMAP\n   terminology.
    \ The Controller instructs one or more MAs and\n   communicates the set of Measurement
    Tasks an MA should perform and\n   when.  The Collector accepts Reports from the
    MAs with the Results\n   from their Measurement Tasks.\n   The YANG data model
    for LMAP has been split into three modules:\n   1.  The module ietf-lmap-common.yang
    provides common definitions such\n       as LMAP-specific data types.\n   2.  The
    module ietf-lmap-control.yang defines the data structures\n       exchanged between
    a Controller and Measurement Agents.\n   3.  The module ietf-lmap-report.yang
    defines the data structures\n       exchanged between Measurement Agents and Collectors.\n
    \  As shown in Figure 1, a Controller, implementing\n   ietf-lmap-common.yang
    and ietf-lmap-control.yang as a client, will\n   instruct Measurement Agents,
    which implement ietf-lmap-common.yang\n   and ietf-lmap-control.yang as servers.
    \ A Measurement Agent,\n   implementing ietf-lmap-common.yang and ietf-lmap-report.yang,
    will\n   send results to a Collector, which implements ietf-lmap-common.yang\n
    \  and ietf-lmap-report.yang as a server.\n                                         +------------------------+\n
    \                                        | LMAP Controller        |\n                                         |
    \                       |\n                                         | Client:
    \               |\n                                         | ietf-lmap-common.yang
    \ |\n                                         | ietf-lmap-control.yang |\n                                         +------------------------+\n
    \    +------------------------+                      |\n     | LMAP Measurement
    Agent |                      |\n     |                        |     <- request
    \      |\n     | Server:                |<---------------------'\n     | ietf-lmap-common.yang
    \ |     response ->\n     | ietf-lmap-control.yang |\n     |                        |\n
    \    |                        |     request ->\n     | Client:                |----------------------.\n
    \    | ietf-lmap-common.yang  |     <- response      |\n     | ietf-lmap-report.yang
    \ |                      |\n     +------------------------+                      v\n
    \                                        +------------------------+\n                                         |
    LMAP Collector         |\n                                         |                        |\n
    \                                        | Server:                |\n                                         |
    ietf-lmap-common.yang  |\n                                         | ietf-lmap-report.yang
    \ |\n                                         +------------------------+\n    Figure
    1: The LMAP Controller, Measurement Agent, and Collector and\n            the
    YANG Modules They Implement as Client or Server\n   The tree diagram below shows
    the structure of the control data model.\n"
  - "module: ietf-lmap-control\n    +--rw lmap\n       +--ro capabilities\n       |
    \ +--ro version    string\n       |  +--ro tag*       lmap:tag\n       |  +--ro
    tasks\n       |     +--ro task* [name]\n       |        +--ro name        lmap:identifier\n
    \      |        +--ro function* [uri]\n       |        |  +--ro uri     inet:uri\n
    \      |        |  +--ro role*   string\n       |        +--ro version?    string\n
    \      |        +--ro program?    string\n       +--rw agent\n       |  +--rw
    agent-id?                   yang:uuid\n       |  +--rw group-id?                   string\n
    \      |  +--rw measurement-point?          string\n       |  +--rw report-agent-id?
    \           boolean\n       |  +--rw report-group-id?            boolean\n       |
    \ +--rw report-measurement-point?   boolean\n       |  +--rw controller-timeout?
    \        uint32\n       |  +--ro last-started                yang:date-and-time\n
    \      +--rw tasks\n       |  +--rw task* [name]\n       |     +--rw name        lmap:identifier\n
    \      |     +--rw function* [uri]\n       |     |  +--rw uri     inet:uri\n       |
    \    |  +--rw role*   string\n       |     +--rw program?    string\n       |
    \    +--rw option* [id]\n       |     |  +--rw id       lmap:identifier\n       |
    \    |  +--rw name?    string\n       |     |  +--rw value?   string\n       |
    \    +--rw tag*        lmap:identifier\n       +--rw schedules\n       |  +--rw
    schedule* [name]\n       |     +--rw name               lmap:identifier\n       |
    \    +--rw start              event-ref\n       |     +--rw (stop)?\n       |
    \    |  +--:(end)\n       |     |  |  +--rw end?               event-ref\n       |
    \    |  +--:(duration)\n       |     |     +--rw duration?          uint32\n       |
    \    +--rw execution-mode?    enumeration\n       |     +--rw tag*               lmap:tag\n
    \      |     +--rw suppression-tag*   lmap:tag\n       |     +--ro state              enumeration\n
    \      |     +--ro storage            yang:gauge64\n       |     +--ro invocations
    \       yang:counter32\n       |     +--ro suppressions       yang:counter32\n
    \      |     +--ro overlaps           yang:counter32\n       |     +--ro failures
    \          yang:counter32\n       |     +--ro last-invocation?   yang:date-and-time\n
    \      |     +--rw action* [name]\n       |        +--rw name                      lmap:identifier\n
    \      |        +--rw task                      task-ref\n       |        +--rw
    parameters\n       |        |  +--rw (extension)?\n       |        +--rw option*
    [id]\n       |        |  +--rw id       lmap:identifier\n       |        |  +--rw
    name?    string\n       |        |  +--rw value?   string\n       |        +--rw
    destination*              schedule-ref\n       |        +--rw tag*                      lmap:tag\n
    \      |        +--rw suppression-tag*          lmap:tag\n       |        +--ro
    state                     enumeration\n       |        +--ro storage                   yang:gauge64\n
    \      |        +--ro invocations               yang:counter32\n       |        +--ro
    suppressions              yang:counter32\n       |        +--ro overlaps                  yang:counter32\n
    \      |        +--ro failures                  yang:counter32\n       |        +--ro
    last-invocation           yang:date-and-time\n       |        +--ro last-completion
    \          yang:date-and-time\n       |        +--ro last-status               lmap:status-code\n
    \      |        +--ro last-message              string\n       |        +--ro
    last-failed-completion    yang:date-and-time\n       |        +--ro last-failed-status
    \       lmap:status-code\n       |        +--ro last-failed-message       string\n
    \      +--rw suppressions\n       |  +--rw suppression* [name]\n       |     +--rw
    name            lmap:identifier\n       |     +--rw start?          event-ref\n
    \      |     +--rw end?            event-ref\n       |     +--rw match*          lmap:glob-pattern\n
    \      |     +--rw stop-running?   boolean\n       |     +--ro state           enumeration\n
    \      +--rw events\n          +--rw event* [name]\n             +--rw name                    lmap:identifier\n
    \            +--rw random-spread?          uint32\n             +--rw cycle-interval?
    \        uint32\n             +--rw (event-type)?\n                +--:(periodic)\n
    \               |  +--rw periodic\n                |     +--rw interval    uint32\n
    \               |     +--rw start?      yang:date-and-time\n                |
    \    +--rw end?        yang:date-and-time\n                +--:(calendar)\n                |
    \ +--rw calendar\n                |     +--rw month*             lmap:month-or-all\n
    \               |     +--rw day-of-month*      lmap:day-of-months-or-all\n                |
    \    +--rw day-of-week*       lmap:weekday-or-all\n                |     +--rw
    hour*              lmap:hour-or-all\n                |     +--rw minute*            lmap:minute-or-all\n
    \               |     +--rw second*            lmap:second-or-all\n                |
    \    +--rw timezone-offset?   lmap:timezone-offset\n                |     +--rw
    start?             yang:date-and-time\n                |     +--rw end?               yang:date-and-time\n
    \               +--:(one-off)\n                |  +--rw one-off\n                |
    \    +--rw time    yang:date-and-time\n                +--:(immediate)\n                |
    \ +--rw immediate               empty\n                +--:(startup)\n                |
    \ +--rw startup                 empty\n                +--:(controller-lost)\n
    \               |  +--rw controller-lost         empty\n                +--:(controller-connected)\n
    \                  +--rw controller-connected    empty\n   The tree diagram below
    shows the structure of the reporting data\n   model.\n   module: ietf-lmap-report\n
    \    rpcs:\n       +---x report\n          +---w input\n             +---w date
    \                yang:date-and-time\n             +---w agent-id?            yang:uuid\n
    \            +---w group-id?            string\n             +---w measurement-point?
    \  string\n             +---w result*\n                +---w schedule?       lmap:identifier\n
    \               +---w action?         lmap:identifier\n                +---w task?
    \          lmap:identifier\n                +---w parameters\n                |
    \ +---w (extension)?\n                +---w option* [id]\n                |  +---w
    id       lmap:identifier\n                |  +---w name?    string\n                |
    \ +---w value?   string\n                +---w tag*            lmap:tag\n                +---w
    event?          yang:date-and-time\n                +---w start           yang:date-and-time\n
    \               +---w end?            yang:date-and-time\n                +---w
    cycle-number?   lmap:cycle-number\n                +---w status          lmap:status-code\n
    \               +---w conflict*\n                |  +---w schedule-name?   lmap:identifier\n
    \               |  +---w action-name?     lmap:identifier\n                |  +---w
    task-name?       lmap:identifier\n                +---w table*\n                   +---w
    function* [uri]\n                   |  +---w uri     inet:uri\n                   |
    \ +---w role*   string\n                   +---w column*     string\n                   +---w
    row*\n                      +---w value*   string\n"
  title: 2.  Data Model Overview
- contents:
  - "3.  Relationship to the Information Model\n   The LMAP Information Model [RFC8193]
    is divided into six aspects.\n   They are mapped into the YANG data model as explained
    below:\n   o  Preconfiguration Information: This is not modeled explicitly since\n
    \     bootstrapping information is outside the scope of this data model.\n      Implementations
    may use some of the Configuration Information also\n      for bootstrapping purposes.\n
    \  o  Configuration Information: This is modeled in the /lmap/agent\n      subtree,
    the /lmap/schedules subtree, and the /lmap/tasks subtree\n      described below.
    \ Some items have been left out because they are\n      expected to be dealt with
    by the underlying protocol.\n   o  Instruction Information: This is modeled in
    the /lmap/suppressions\n      subtree, the /lmap/schedules subtree, and the /lmap/tasks
    subtree\n      described below.\n   o  Logging Information: Some of the Logging
    Information, in\n      particular 'success/failure/warning messages in response
    to\n      information updates from the Controller', will be handled by the\n      protocol
    used to manipulate the LMAP-specific configuration.  The\n      LMAP data model
    defined in this document assumes that runtime\n      Logging Information will
    be communicated using protocols that do\n      not require a formal data model,
    e.g., the syslog protocol defined\n      in [RFC5424].\n   o  Capability and Status
    Information: Some of the Capability and\n      Status Information is modeled in
    the /lmap/capability subtree.\n      The list of supported Tasks is modeled in
    the /lmap/capabilities/\n      task list.  Status Information about Schedules
    and Actions is\n      included in the /lmap/schedules subtree.  Information about\n
    \     network interfaces can be obtained from the ietf-interfaces YANG\n      data
    model [RFC7223].  Information about the hardware and the\n      firmware can be
    obtained from the ietf-system YANG data model\n      [RFC7317].  A device identifier
    can be obtained from the ietf-\n      hardware YANG data model [YANG-HARDWARE].\n
    \  o  Reporting Information: This is modeled by the report data model to\n      be
    implemented by the Collector.  Measurement Agents send results\n      to the Collector
    by invoking an RPC on the Collector.\n   These six Information Model aspects use
    a collection of common\n   information objects.  These common information objects
    are\n   represented in the YANG data model as follows:\n   o  Schedules: Schedules
    are modeled in the /lmap/schedules subtree.\n   o  Channels: Channels are not
    modeled since the NETCONF server\n      configuration data model [NETCONF-CLIENT-SERVER]
    already provides\n      a mechanism to configure NETCONF server Channels.\n   o
    \ Task Configurations: Configured Tasks are modeled in the /lmap/\n      tasks
    subtree.\n   o  Event Information: Event definitions are modeled in the /lmap/\n
    \     events subtree.\n"
  title: 3.  Relationship to the Information Model
- contents:
  - '4.  YANG Modules

    '
  - contents:
    - "4.1.  LMAP Common YANG Module\n   This module imports definitions from [RFC6536],
      and it references\n   [ISO-8601].\n   <CODE BEGINS> file \"ietf-lmap-common@2017-08-08.yang\"\n
      \  module ietf-lmap-common {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-lmap-common\";\n
      \    prefix \"lmap\";\n     import ietf-inet-types {\n       prefix inet;\n
      \    }\n     organization\n       \"IETF Large-Scale Measurement of Broadband
      Performance\n        Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/lmap>\n
      \       WG List:  <mailto:lmap@ietf.org>\n        Editor:   Juergen Schoenwaelder\n
      \                 <j.schoenwaelder@jacobs-university.de>\n        Editor:   Vaibhav
      Bajpai\n                  <bajpaiv@in.tum.de>\";\n     description\n       \"This
      module provides common definitions used by the data\n        models written
      for Large-Scale Measurement Platforms (LMAPs).\n        This module defines
      typedefs and groupings but no schema\n        tree elements.\";\n     revision
      \"2017-08-08\" {\n       description\n         \"Initial version\";\n       reference\n
      \        \"RFC 8194: A YANG Data Model for LMAP Measurement Agents\";\n     }\n
      \    /*\n      * Typedefs\n      */\n     typedef identifier {\n       type
      string {\n         length \"1..max\";\n       }\n       description\n         \"A
      string value used to name something.\";\n     }\n     typedef tag {\n       type
      string {\n         length \"1..max\";\n       }\n       description\n         \"A
      tag consists of at least one character.\";\n     }\n     typedef glob-pattern
      {\n       type string {\n         length \"1..max\";\n       }\n       description\n
      \        'A glob style pattern (following POSIX.2 fnmatch() without\n          special
      treatment of file paths):\n            *         matches a sequence of characters\n
      \           ?         matches a single character\n            [seq]     matches
      any character in seq\n            [!seq]    matches any character not in seq\n
      \         A backslash followed by a character matches the following\n          character.
      \ In particular:\n            \\*        matches *\n            \\?        matches
      ?\n            \\\\        matches \\\n          A sequence seq may be a sequence
      of characters (e.g., [abc]\n          or a range of characters (e.g., [a-c]).';\n
      \    }\n     typedef wildcard {\n       type string {\n         pattern '\\*';\n
      \      }\n       description\n         \"A wildcard for calendar scheduling
      entries.\";\n     }\n     typedef cycle-number {\n       type string {\n         pattern
      '[0-9]{8}\\.[0-9]{6}';\n       }\n       description\n         \"A cycle number
      represented in the format YYYYMMDD.HHMMSS\n          where YYYY represents the
      year, MM the month (1..12), DD\n          the day of the months (01..31), HH
      the hour (00..23), MM\n          the minute (00..59), and SS the second (00..59).
      \ The cycle\n          number is using Coordinated Universal Time (UTC).\";\n
      \    }\n     typedef month {\n       type enumeration {\n         enum january
      {\n           value 1;\n           description\n             \"January of the
      Gregorian calendar.\";\n         }\n         enum february {\n           value
      2;\n           description\n             \"February of the Gregorian calendar.\";\n
      \        }\n         enum march {\n           value 3;\n           description\n
      \            \"March of the Gregorian calendar.\";\n         }\n         enum
      april {\n           value 4;\n           description\n             \"April of
      the Gregorian calendar.\";\n         }\n         enum may {\n           value
      5;\n           description\n             \"May of the Gregorian calendar.\";\n
      \        }\n         enum june {\n           value 6;\n           description\n
      \            \"June of the Gregorian calendar.\";\n         }\n         enum
      july {\n           value 7;\n           description\n             \"July of
      the Gregorian calendar.\";\n         }\n         enum august {\n           value
      8;\n           description\n             \"August of the Gregorian calendar.\";\n
      \        }\n         enum september {\n           value 9;\n           description\n
      \            \"September of the Gregorian calendar.\";\n         }\n         enum
      october {\n           value 10;\n           description\n             \"October
      of the Gregorian calendar.\";\n         }\n         enum november {\n           value
      11;\n           description\n             \"November of the Gregorian calendar.\";\n
      \        }\n         enum december {\n           value 12;\n           description\n
      \            \"December of the Gregorian calendar.\";\n         }\n       }\n
      \      description\n         \"A type modeling the month in the Gregorian calendar.\";\n
      \    }\n     typedef month-or-all {\n       type union {\n         type month;\n
      \        type wildcard;\n       }\n       description\n         \"A month or
      a wildcard indicating all twelve months.\";\n     }\n     typedef day-of-month
      {\n       type uint8 { range \"1..31\"; }\n       description\n         \"A
      day of a month of the Gregorian calendar.\";\n     }\n     typedef day-of-months-or-all
      {\n       type union {\n         type day-of-month;\n         type wildcard;\n
      \      }\n       description\n         \"A day of a month or a wildcard indicating
      all days\n          of a month.\";\n     }\n     typedef weekday {\n       type
      enumeration {\n         enum monday {\n           value 1;\n           description\n
      \            \"Monday of the Gregorian calendar.\";\n         }\n         enum
      tuesday {\n           value 2;\n           description\n             \"Tuesday
      of the Gregorian calendar.\";\n         }\n         enum wednesday {\n           value
      3;\n           description\n             \"Wednesday of the Gregorian calendar.\";\n
      \        }\n         enum thursday {\n           value 4;\n           description\n
      \            \"Thursday of the Gregorian calendar.\";\n         }\n         enum
      friday {\n           value 5;\n           description\n             \"Friday
      of the Gregorian calendar.\";\n         }\n         enum saturday {\n           value
      6;\n           description\n             \"Saturday of the Gregorian calendar.\";\n
      \        }\n         enum sunday {\n           value 7;\n           description\n
      \            \"Sunday of the Gregorian calendar.\";\n         }\n       }\n
      \      description\n        \"A type modeling the weekdays in the Gregorian
      calendar.\n         The numbering follows the ISO 8601 scheme.\";\n       reference\n
      \       \"ISO 8601:2004: Data elements and interchange formats --\n                        Information
      interchange -- Representation\n                        of dates and times\";\n
      \    }\n     typedef weekday-or-all {\n       type union {\n         type weekday;\n
      \        type wildcard;\n       }\n       description\n         \"A weekday
      or a wildcard indicating all seven weekdays.\";\n     }\n     typedef hour {\n
      \      type uint8 { range \"0..23\"; }\n       description\n         \"An hour
      of a day.\";\n     }\n     typedef hour-or-all {\n       type union {\n         type
      hour;\n         type wildcard;\n       }\n       description\n         \"An
      hour of a day or a wildcard indicating all hours\n          of a day.\";\n     }\n
      \    typedef minute {\n       type uint8 { range \"0..59\"; }\n       description\n
      \        \"A minute of an hour.\";\n     }\n     typedef minute-or-all {\n       type
      union {\n         type minute;\n         type wildcard;\n       }\n       description\n
      \        \"A minute of an hour or a wildcard indicating all\n          minutes
      of an hour.\";\n     }\n     typedef second {\n       type uint8 { range \"0..59\";
      }\n       description\n         \"A second of a minute.\";\n     }\n     typedef
      second-or-all {\n       type union {\n         type second;\n         type wildcard;\n
      \      }\n       description\n         \"A second of a minute or a wildcard
      indicating all\n          seconds of a minute.\";\n     }\n     typedef status-code
      {\n       type int32;\n       description\n         \"A status code returned
      by the execution of a Task.  Note\n          that the actual range is implementation
      dependent, but it\n          should be portable to use values in the range 0..127
      for\n          regular exit codes.  By convention, 0 indicates successful\n
      \         termination.  Negative values may be used to indicate\n          abnormal
      termination due to a signal; the absolute value\n          may identify the
      signal number in this case.\";\n     }\n     typedef timezone-offset {\n       type
      string {\n         pattern 'Z|[\\+\\-]\\d{2}:\\d{2}';\n       }\n       description\n
      \        \"A time zone offset as it is used by the date-and-time type\n          defined
      in the ietf-yang-types module.  The value Z is\n          equivalent to +00:00.
      \ The value -00:00 indicates an\n          unknown time-offset.\";\n       reference\n
      \        \"RFC 6991: Common YANG Data Types\";\n     }\n     /*\n      * Groupings\n
      \     */\n     grouping registry-grouping {\n       description\n         \"This
      grouping models a list of entries in a registry\n          that identify functions
      of a Task.\";\n       list function {\n         key uri;\n         description\n
      \          \"A list of entries in a registry identifying functions.\";\n         leaf
      uri {\n           type inet:uri;\n           description\n             \"A URI
      identifying an entry in a registry.\";\n         }\n         leaf-list role
      {\n           type string;\n           description\n             \"A set of
      roles for the identified registry entry.\";\n         }\n       }\n     }\n
      \    grouping options-grouping {\n       description\n         \"A list of options
      of a Task.  Each option is a name/value\n          pair (where the value may
      be absent).\";\n       list option {\n         key \"id\";\n         ordered-by
      user;\n         description\n           \"A list of options passed to the Task.
      \ It is a list of\n            key/value pairs and may be used to model options.\n
      \           Options may be used to identify the role of a Task\n            or
      to pass a Channel name to a Task.\";\n         leaf id {\n           type lmap:identifier;\n
      \          description\n             \"An identifier uniquely identifying an
      option.  This\n              identifier is required by YANG to uniquely identify\n
      \             a name/value pair, but it otherwise has no semantic\n              value\";\n
      \        }\n         leaf name {\n           type string;\n           description\n
      \            \"The name of the option.\";\n         }\n         leaf value {\n
      \          type string;\n           description\n             \"The value of
      the option.\";\n         }\n       }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.1.  LMAP Common YANG Module
  - contents:
    - "4.2.  LMAP Control YANG Module\n   This module imports definitions from [RFC6536],
      [RFC6991], and the\n   common LMAP module, and it references [RFC7398].\n   <CODE
      BEGINS> file \"ietf-lmap-control@2017-08-08.yang\"\n   module ietf-lmap-control
      {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-lmap-control\";\n
      \    prefix \"lmapc\";\n     import ietf-yang-types {\n       prefix yang;\n
      \    }\n     import ietf-netconf-acm {\n       prefix nacm;\n     }\n     import
      ietf-lmap-common {\n       prefix lmap;\n     }\n     organization\n       \"IETF
      Large-Scale Measurement of Broadband Performance\n        Working Group\";\n
      \    contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/lmap>\n        WG
      List:  <mailto:lmap@ietf.org>\n        Editor:   Juergen Schoenwaelder\n                  <j.schoenwaelder@jacobs-university.de>\n
      \       Editor:   Vaibhav Bajpai\n                  <bajpaiv@in.tum.de>\";\n
      \    description\n       \"This module defines a data model for controlling
      Measurement\n        Agents that are part of a Large-Scale Measurement Platform\n
      \       (LMAP).  This data model is expected to be implemented by\n        Measurement
      Agents.\";\n     revision \"2017-08-08\" {\n       description\n         \"Initial
      version\";\n       reference\n         \"RFC 8194: A YANG Data Model for LMAP
      Measurement Agents\";\n     }\n     /*\n      * Typedefs\n      */\n     typedef
      event-ref {\n       type leafref {\n         path \"/lmap/events/event/name\";\n
      \      }\n       description\n         \"This type is used by data models that
      need to reference\n          a configured event source.\";\n     }\n     typedef
      task-ref {\n       type leafref {\n         path \"/lmap/tasks/task/name\";\n
      \      }\n       description\n         \"This type is used by data models that
      need to reference\n          a configured Task.\";\n     }\n     typedef schedule-ref
      {\n       type leafref {\n         path \"/lmap/schedules/schedule/name\";\n
      \      }\n       description\n         \"This type is used by data models that
      need to reference\n          a configured Schedule.\";\n     }\n     /*\n      *
      Groupings\n      */\n     grouping start-end-grouping {\n       description\n
      \        \"A grouping that provides start and end times for\n          Event
      objects.\";\n       leaf start {\n         type yang:date-and-time;\n         description\n
      \          \"The date and time when the Event object\n            starts to
      create triggers.\";\n       }\n       leaf end {\n         type yang:date-and-time;\n
      \        description\n           \"The date and time when the Event object\n
      \           stops to create triggers.\n            It is generally a good idea
      to always configure\n            an end time and to refresh the end time as
      needed\n            to ensure that agents that lose connectivity to\n            their
      Controller do not continue executing Schedules\n            forever.\";\n       }\n
      \    }\n     /*\n      * Capability, configuration, and state data nodes\n      */\n
      \    container lmap {\n       description\n         \"Configuration and control
      of a Measurement Agent.\";\n       container capabilities {\n         config
      false;\n         description\n           \"Agent capabilities including a list
      of supported Tasks.\";\n         leaf version {\n           type string;\n           config
      false;\n           mandatory true;\n           description\n             \"A
      short description of the software implementing the\n              Measurement
      Agent.  This should include the version\n              number of the Measurement
      Agent software.\";\n         }\n         leaf-list tag {\n           type lmap:tag;\n
      \          config false;\n           description\n             \"An optional
      unordered set of tags that provide\n              additional information about
      the capabilities of\n              the Measurement Agent.\";\n         }\n         container
      tasks {\n           description\n             \"A list of Tasks that the Measurement
      Agent supports.\";\n           list task {\n             key name;\n             description\n
      \              \"The list of Tasks supported by the Measurement Agent.\";\n
      \            leaf name {\n               type lmap:identifier;\n               description\n
      \                \"The unique name of a Task capability.\";\n             }\n
      \            uses lmap:registry-grouping;\n             leaf version {\n               type
      string;\n               description\n                 \"A short description
      of the software implementing\n                  the Task.  This should include
      the version\n                  number of the Measurement Task software.\";\n
      \            }\n             leaf program {\n               type string;\n               description\n
      \                \"The (local) program to invoke in order to execute\n                  the
      Task.\";\n             }\n           }\n         }\n       }\n       /*\n        *
      Agent Configuration\n        */\n       container agent {\n         description\n
      \          \"Configuration of parameters affecting the whole\n            Measurement
      Agent.\";\n         leaf agent-id {\n           type yang:uuid;\n           description\n
      \            \"The agent-id identifies a Measurement Agent with\n              a
      very low probability of collision.  In certain\n              deployments, the
      agent-id may be considered\n              sensitive, and hence this object is
      optional.\";\n         }\n         leaf group-id {\n           type string;\n
      \          description\n             \"The group-id identifies a group of Measurement\n
      \             Agents.  In certain deployments, the group-id\n              may
      be considered less sensitive than the\n              agent-id.\";\n         }\n
      \        leaf measurement-point {\n           type string;\n           description\n
      \            \"The measurement point indicating where the\n               Measurement
      Agent is located on a path.\";\n           reference\n             \"RFC 7398:
      A Reference Path and Measurement Points\n                        for Large-Scale
      Measurement of Broadband\n                        Performance\";\n         }\n
      \        leaf report-agent-id {\n           type boolean;\n           must '.
      != \"true\" or ../agent-id' {\n             description\n               \"An
      agent-id must exist for this to be set\n                to true.\";\n           }\n
      \          default false;\n           description\n             \"The 'report-agent-id'
      controls whether the\n              'agent-id' is reported to Collectors.\";\n
      \        }\n         leaf report-group-id {\n           type boolean;\n           must
      '. != \"true\" or ../group-id' {\n             description\n               \"A
      group-id must exist for this to be set\n                to true.\";\n           }\n
      \          default false;\n           description\n             \"The 'report-group-id'
      controls whether the\n              'group-id' is reported to Collectors.\";\n
      \        }\n         leaf report-measurement-point {\n           type boolean;\n
      \          must '. != \"true\" or ../measurement-point' {\n             description\n
      \              \"A measurement-point must exist for this to be\n                set
      to true.\";\n           }\n           default false;\n           description\n
      \            \"The 'report-measurement-point' controls whether\n              the
      'measurement-point' is reported to Collectors.\";\n         }\n         leaf
      controller-timeout {\n           type uint32;\n           units \"seconds\";\n
      \          description\n             \"A timer is started after each successful
      contact\n              with a Controller.  When the timer reaches the\n              controller-timeout,
      an event (controller-lost) is\n              raised indicating that connectivity
      to the Controller\n              has been lost.\";\n         }\n         leaf
      last-started {\n           type yang:date-and-time;\n           config false;\n
      \          mandatory true;\n           description\n             \"The date
      and time the Measurement Agent last started.\";\n         }\n       }\n       /*\n
      \       * Task Configuration\n        */\n       container tasks {\n         description\n
      \          \"Configuration of LMAP Tasks.\";\n         list task {\n           key
      name;\n           description\n             \"The list of Tasks configured on
      the Measurement\n              Agent.  Note that a configured Task MUST resolve
      to a\n              Task listed in the capabilities.  Attempts to execute\n
      \             a configured Task that is not listed in the capabilities\n              result
      in a runtime execution error.\";\n           leaf name {\n             type
      lmap:identifier;\n             description\n               \"The unique name
      of a Task.\";\n           }\n           uses lmap:registry-grouping;\n           leaf
      program {\n             type string;\n             nacm:default-deny-write;\n
      \            description\n               \"The (local) program to invoke in
      order to execute\n                the Task.  If this leaf is not set, then the
      system\n                will try to identify a suitable program based on\n                the
      registry information present.\";\n           }\n           uses lmap:options-grouping
      {\n             description\n               \"The list of Task-specific options.\";\n
      \          }\n           leaf-list tag {\n             type lmap:identifier;\n
      \            description\n               \"A set of Task-specific tags that
      are reported\n                together with the measurement results to a Collector.\n
      \               A tag can be used, for example, to carry the\n                Measurement
      Cycle ID.\";\n           }\n         }\n       }\n       /*\n        * Schedule
      Instructions\n        */\n       container schedules {\n         description\n
      \          \"Configuration of LMAP Schedules.  Schedules control\n            which
      Tasks are executed by the LMAP implementation.\";\n         list schedule {\n
      \          key name;\n           description\n             \"Configuration of
      a particular Schedule.\";\n           leaf name {\n             type lmap:identifier;\n
      \            description\n               \"The locally unique, administratively
      assigned name\n                for this Schedule.\";\n           }\n           leaf
      start {\n             type event-ref;\n             mandatory true;\n             description\n
      \              \"The event source controlling the start of the\n                scheduled
      Actions.\";\n           }\n           choice stop {\n             description\n
      \              \"This choice contains optional leafs that control the\n                graceful
      forced termination of scheduled Actions.\n                When the end has been
      reached, the scheduled Actions\n                should be forced to terminate
      the measurements.\n                This may involve being active some additional
      time in\n                order to properly finish the Action's activity (e.g.,\n
      \               waiting for any messages that are still outstanding).\";\n             leaf
      end {\n               type event-ref;\n               description\n                 \"The
      event source controlling the graceful\n                  forced termination
      of the scheduled Actions.\";\n             }\n             leaf duration {\n
      \              type uint32;\n               units \"seconds\";\n               description\n
      \                \"The duration controlling the graceful forced\n                  termination
      of the scheduled Actions.\";\n             }\n           }\n           leaf
      execution-mode {\n             type enumeration {\n               enum sequential
      {\n                 value 1;\n                 description\n                   \"The
      Actions of the Schedule are executed\n                    sequentially.\";\n
      \              }\n               enum parallel {\n                 value 2;\n
      \                description\n                   \"The Actions of the Schedule
      are executed\n                    concurrently.\";\n               }\n               enum
      pipelined {\n                 value 3;\n                 description\n                   \"The
      Actions of the Schedule are executed in a\n                    pipelined mode.
      \ Output created by an Action is\n                    passed as input to the
      subsequent Action.\";\n               }\n             }\n             default
      pipelined;\n             description\n               \"The execution mode of
      this Schedule determines in\n                which order the Actions of the
      Schedule are executed.\";\n           }\n           leaf-list tag {\n             type
      lmap:tag;\n             description\n               \"A set of Schedule-specific
      tags that are reported\n                together with the measurement results
      to a Collector.\";\n           }\n           leaf-list suppression-tag {\n             type
      lmap:tag;\n             description\n               \"A set of Suppression tags
      that are used to select\n                Schedules to be suppressed.\";\n           }\n
      \          leaf state {\n             type enumeration {\n               enum
      enabled {\n                 value 1;\n                 description\n                   \"The
      value 'enabled' indicates that the\n                    Schedule is currently
      enabled.\";\n               }\n               enum disabled {\n                 value
      2;\n                 description\n                   \"The value 'disabled'
      indicates that the\n                    Schedule is currently disabled.\";\n
      \              }\n               enum running {\n                 value 3;\n
      \                description\n                   \"The value 'running' indicates
      that the\n                    Schedule is currently running.\";\n               }\n
      \              enum suppressed {\n                 value 4;\n                 description\n
      \                  \"The value 'suppressed' indicates that the\n                    Schedule
      is currently suppressed.\";\n               }\n             }\n             config
      false;\n             mandatory true;\n             description\n               \"The
      current state of the Schedule.\";\n           }\n           leaf storage {\n
      \            type yang:gauge64;\n             units \"bytes\";\n             config
      false;\n             mandatory true;\n             description\n               \"The
      amount of secondary storage (e.g., allocated in a\n                file system)
      holding temporary data allocated to the\n                Schedule in bytes.
      \ This object reports the amount of\n                allocated physical storage
      and not the storage used\n                by logical data records.\";\n           }\n
      \          leaf invocations {\n             type yang:counter32;\n             config
      false;\n             mandatory true;\n             description\n               \"Number
      of invocations of this Schedule.  This counter\n                does not include
      suppressed invocations or invocations\n                that were prevented due
      to an overlap with a previous\n                invocation of this Schedule.\";\n
      \          }\n           leaf suppressions {\n             type yang:counter32;\n
      \            config false;\n             mandatory true;\n             description\n
      \              \"Number of suppressed executions of this Schedule.\";\n           }\n
      \          leaf overlaps {\n             type yang:counter32;\n             config
      false;\n             mandatory true;\n             description\n               \"Number
      of executions prevented due to overlaps with\n                a previous invocation
      of this Schedule.\";\n           }\n           leaf failures {\n             type
      yang:counter32;\n             config false;\n             mandatory true;\n
      \            description\n               \"Number of failed executions of this
      Schedule.  A\n                failed execution is an execution where at least\n
      \               one Action failed.\";\n           }\n           leaf last-invocation
      {\n             type yang:date-and-time;\n             config false;\n             description\n
      \              \"The date and time of the last invocation of\n                this
      Schedule.\";\n           }\n           list action {\n             key name;\n
      \            description\n               \"An Action describes a Task that is
      invoked by the\n                Schedule.  Multiple Actions are invoked according
      to\n                the execution-mode of the Schedule.\";\n             leaf
      name {\n               type lmap:identifier;\n               description\n                 \"The
      unique identifier for this Action.\";\n             }\n             leaf task
      {\n               type task-ref;\n               mandatory true;\n               description\n
      \                \"The Task invoked by this Action.\";\n             }\n             container
      parameters {\n               description\n                 \"This container
      is a placeholder for runtime\n                  parameters defined in Task-specific
      data models\n                  augmenting the base LMAP control data model.\";\n
      \              choice extension {\n                 description\n                   \"This
      choice is provided to augment in different\n                    sets of parameters.\";\n
      \              }\n             }\n             uses lmap:options-grouping {\n
      \              description\n                 \"The list of Action-specific options
      that are\n                  appended to the list of Task-specific options.\";\n
      \            }\n             leaf-list destination {\n               type schedule-ref;\n
      \              description\n                 \"A set of Schedules receiving
      the output produced\n                  by this Action.  The output is stored
      temporarily\n                  since the Destination Schedules will in general\n
      \                 not be running when output is passed to them.  The\n                  behavior
      of an Action passing data to its own\n                  Schedule is implementation
      specific.\n                  Data passed to a sequential or pipelined Schedule\n
      \                 is received by the Schedule's first Action.  Data\n                  passed
      to a parallel Schedule is received by all\n                  Actions of the
      Schedule.\";\n             }\n             leaf-list tag {\n               type
      lmap:tag;\n               description\n                 \"A set of Action-specific
      tags that are reported\n                  together with the measurement results
      to a\n                  Collector.\";\n             }\n             leaf-list
      suppression-tag {\n               type lmap:tag;\n               description\n
      \                \"A set of Suppression tags that are used to select\n                  Actions
      to be suppressed.\";\n             }\n             leaf state {\n               type
      enumeration {\n                 enum enabled {\n                   value 1;\n
      \                  description\n                     \"The value 'enabled' indicates
      that the\n                      Action is currently enabled.\";\n                 }\n
      \                enum disabled {\n                   value 2;\n                   description\n
      \                    \"The value 'disabled' indicates that the\n                      Action
      is currently disabled.\";\n                 }\n                 enum running
      {\n                   value 3;\n                   description\n                     \"The
      value 'running' indicates that the\n                      Action is currently
      running.\";\n                 }\n                 enum suppressed {\n                   value
      4;\n                   description\n                     \"The value 'suppressed'
      indicates that the\n                      Action is currently suppressed.\";\n
      \                }\n               }\n               config false;\n               mandatory
      true;\n               description\n                 \"The current state of the
      Action.\";\n             }\n             leaf storage {\n               type
      yang:gauge64;\n               units \"bytes\";\n               config false;\n
      \              mandatory true;\n               description\n                 \"The
      amount of secondary storage (e.g., allocated in a\n                  file system)
      holding temporary data allocated to the\n                  Schedule in bytes.
      \ This object reports the amount of\n                  allocated physical storage
      and not the storage used\n                  by logical data records.\";\n             }\n
      \            leaf invocations {\n               type yang:counter32;\n               config
      false;\n               mandatory true;\n               description\n                 \"Number
      of invocations of this Action.  This counter\n                  does not include
      suppressed invocations or invocations\n                  that were prevented
      due to an overlap with a previous\n                  invocation of this Action.\";\n
      \            }\n             leaf suppressions {\n               type yang:counter32;\n
      \              config false;\n               mandatory true;\n               description\n
      \                \"Number of suppressed executions of this Action.\";\n             }\n
      \            leaf overlaps {\n               type yang:counter32;\n               config
      false;\n               mandatory true;\n               description\n                 \"Number
      of executions prevented due to overlaps with\n                  a previous invocation
      of this Action.\";\n             }\n             leaf failures {\n               type
      yang:counter32;\n               config false;\n               mandatory true;\n
      \              description\n                 \"Number of failed executions of
      this Action.\";\n             }\n             leaf last-invocation {\n               type
      yang:date-and-time;\n               config false;\n               mandatory
      true;\n               description\n                 \"The date and time of the
      last invocation of\n                  this Action.\";\n             }\n             leaf
      last-completion {\n               type yang:date-and-time;\n               config
      false;\n               mandatory true;\n               description\n                 \"The
      date and time of the last completion of\n                  this Action.\";\n
      \            }\n             leaf last-status {\n               type lmap:status-code;\n
      \              config false;\n               mandatory true;\n               description\n
      \                \"The status code returned by the last execution of\n                  this
      Action.\";\n             }\n             leaf last-message {\n               type
      string;\n               config false;\n               mandatory true;\n               description\n
      \                \"The status message produced by the last execution\n                  of
      this Action.\";\n             }\n             leaf last-failed-completion {\n
      \              type yang:date-and-time;\n               config false;\n               mandatory
      true;\n               description\n                 \"The date and time of the
      last failed completion\n                  of this Action.\";\n             }\n
      \            leaf last-failed-status {\n               type lmap:status-code;\n
      \              config false;\n               mandatory true;\n               description\n
      \                \"The status code returned by the last failed\n                  execution
      of this Action.\";\n             }\n             leaf last-failed-message {\n
      \              type string;\n               config false;\n               mandatory
      true;\n               description\n                 \"The status message produced
      by the last failed\n                  execution of this Action.\";\n             }\n
      \          }\n         }\n       }\n       /*\n        * Suppression Instructions\n
      \       */\n       container suppressions {\n         description\n           \"Suppression
      information to prevent Schedules or\n            certain Actions from starting.\";\n
      \        list suppression {\n           key name;\n           description\n
      \            \"Configuration of a particular Suppression.\";\n           leaf
      name {\n             type lmap:identifier;\n             description\n               \"The
      locally unique, administratively assigned name\n                for this Suppression.\";\n
      \          }\n           leaf start {\n             type event-ref;\n             description\n
      \              \"The event source controlling the start of the\n                Suppression
      period.\";\n           }\n           leaf end {\n             type event-ref;\n
      \            description\n               \"The event source controlling the
      end of the\n                Suppression period.  If not present, Suppression\n
      \               continues indefinitely.\";\n           }\n           leaf-list
      match {\n             type lmap:glob-pattern;\n             description\n               \"A
      set of Suppression match patterns.  The Suppression\n                will apply
      to all Schedules (and their Actions) that\n                have a matching value
      in their suppression-tags\n                and to all Actions that have a matching
      value in\n                their suppression-tags.\";\n           }\n           leaf
      stop-running {\n             type boolean;\n             default false;\n             description\n
      \              \"If 'stop-running' is true, running Schedules and\n                Actions
      matching the Suppression will be terminated\n                when Suppression
      is activated.  If 'stop-running' is\n                false, running Schedules
      and Actions will not be\n                affected if Suppression is activated.\";\n
      \          }\n           leaf state {\n             type enumeration {\n               enum
      enabled {\n                 value 1;\n                 description\n                   \"The
      value 'enabled' indicates that the\n                    Suppression is currently
      enabled.\";\n               }\n               enum disabled {\n                 value
      2;\n                 description\n                   \"The value 'disabled'
      indicates that the\n                    Suppression is currently disabled.\";\n
      \              }\n               enum active {\n                 value 3;\n
      \                description\n                   \"The value 'active' indicates
      that the\n                    Suppression is currently active.\";\n               }\n
      \            }\n             config false;\n             mandatory true;\n             description\n
      \              \"The current state of the Suppression.\";\n           }\n         }\n
      \      }\n       /*\n        * Event Instructions\n        */\n       container
      events {\n         description\n           \"Configuration of LMAP events.\n
      \           Implementations may be forced to delay acting\n            upon
      the occurrence of events in the face of local\n            constraints.  An
      Action triggered by an event\n            therefore should not rely on the accuracy\n
      \           provided by the scheduler implementation.\";\n         list event
      {\n           key name;\n           description\n             \"The list of
      event sources configured on the\n              Measurement Agent.\";\n           leaf
      name {\n             type lmap:identifier;\n             description\n               \"The
      unique name of an event source.\";\n           }\n           leaf random-spread
      {\n             type uint32;\n             units seconds;\n             description\n
      \              \"This optional leaf adds a random spread to the\n                computation
      of the event's trigger time.  The\n                random spread is a uniformly
      distributed random\n                number taken from the interval [0:random-spread].\";\n
      \          }\n           leaf cycle-interval {\n             type uint32;\n
      \            units seconds;\n             description\n               \"The
      optional cycle-interval defines the duration\n                of the time interval
      in seconds that is used to\n                calculate cycle numbers.  No cycle
      number is\n                calculated if the optional cycle-interval does\n
      \               not exist.\";\n           }\n           choice event-type {\n
      \            description\n               \"Different types of events are handled
      by\n                different branches of this choice.  Note that\n                this
      choice can be extended via augmentations.\";\n             case periodic {\n
      \              container periodic {\n                 description\n                   \"A
      periodic timing object triggers periodically\n                    according
      to a regular interval.\";\n                 leaf interval {\n                   type
      uint32 {\n                     range \"1..max\";\n                   }\n                   units
      \"seconds\";\n                   mandatory true;\n                   description\n
      \                    \"The number of seconds between two triggers\n                      generated
      by this periodic timing object.\";\n                 }\n                 uses
      start-end-grouping;\n               }\n             }\n             case calendar
      {\n               container calendar {\n                 description\n                   \"A
      calendar timing object triggers based on the\n                    current calendar
      date and time.\";\n                 leaf-list month {\n                   type
      lmap:month-or-all;\n                   min-elements 1;\n                   description\n
      \                    \"A set of months at which this calendar timing\n                      will
      trigger.  The wildcard means all months.\";\n                 }\n                 leaf-list
      day-of-month {\n                   type lmap:day-of-months-or-all;\n                   min-elements
      1;\n                   description\n                     \"A set of days of
      the month at which this\n                      calendar timing will trigger.
      \ The wildcard means\n                      all days of a month.\";\n                 }\n
      \                leaf-list day-of-week {\n                   type lmap:weekday-or-all;\n
      \                  min-elements 1;\n                   description\n                     \"A
      set of weekdays at which this calendar timing\n                      will trigger.
      \ The wildcard means all weekdays.\";\n                 }\n                 leaf-list
      hour {\n                   type lmap:hour-or-all;\n                   min-elements
      1;\n                   description\n                     \"A set of hours at
      which this calendar timing will\n                      trigger.  The wildcard
      means all hours of a day.\";\n                 }\n                 leaf-list
      minute {\n                   type lmap:minute-or-all;\n                   min-elements
      1;\n                   description\n                     \"A set of minutes
      at which this calendar timing\n                      will trigger.  The wildcard
      means all minutes of\n                      an hour.\";\n                 }\n
      \                leaf-list second {\n                   type lmap:second-or-all;\n
      \                  min-elements 1;\n                   description\n                     \"A
      set of seconds at which this calendar timing\n                      will trigger.
      \ The wildcard means all seconds of\n                      a minute.\";\n                 }\n
      \                leaf timezone-offset {\n                   type lmap:timezone-offset;\n
      \                  description\n                     \"The time zone in which
      this calendar timing\n                      object will be evaluated.  If not
      present,\n                      the system's local time zone will be used.\";\n
      \                }\n                 uses start-end-grouping;\n               }\n
      \            }\n             case one-off {\n               container one-off
      {\n                 description\n                   \"A one-off timing object
      triggers exactly once.\";\n                 leaf time {\n                   type
      yang:date-and-time;\n                   mandatory true;\n                   description\n
      \                    \"This one-off timing object triggers once at\n                      the
      configured date and time.\";\n                 }\n               }\n             }\n
      \            case immediate {\n               leaf immediate {\n                 type
      empty;\n                 mandatory true;\n                 description\n                   \"This
      immediate Event object triggers immediately\n                    when it is
      configured.\";\n               }\n             }\n             case startup
      {\n               leaf startup {\n                 type empty;\n                 mandatory
      true;\n                 description\n                   \"This startup Event
      object triggers whenever the\n                    Measurement Agent (re)starts.\";\n
      \              }\n             }\n             case controller-lost {\n               leaf
      controller-lost {\n                 type empty;\n                 mandatory
      true;\n                 description\n                   \"The controller-lost
      Event object triggers when\n                    the connectivity to the Controller
      has been lost\n                    for at least 'controller-timeout' seconds.\";\n
      \              }\n             }\n             case controller-connected {\n
      \              leaf controller-connected {\n                 type empty;\n                 mandatory
      true;\n                 description\n                   \"The controller-connected
      Event object triggers\n                    when the connectivity to the Controller
      has been\n                    restored after it was lost for at least\n                    'controller-timeout'
      seconds.\";\n               }\n             }\n           }\n         }\n       }\n
      \    }\n   }\n   <CODE ENDS>\n"
    title: 4.2.  LMAP Control YANG Module
  - contents:
    - "4.3.  LMAP Report YANG Module\n   This module imports definitions from [RFC6536]
      and the common LMAP\n   module.\n   <CODE BEGINS> file \"ietf-lmap-report@2017-08-08.yang\"\n
      \  module ietf-lmap-report {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-lmap-report\";\n
      \    prefix \"lmapr\";\n     import ietf-yang-types {\n       prefix yang;\n
      \    }\n     import ietf-lmap-common {\n       prefix lmap;\n     }\n     organization\n
      \      \"IETF Large-Scale Measurement of Broadband Performance\n        Working
      Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/lmap>\n
      \       WG List:  <mailto:lmap@ietf.org>\n        Editor:   Juergen Schoenwaelder\n
      \                 <j.schoenwaelder@jacobs-university.de>\n        Editor:   Vaibhav
      Bajpai\n                  <bajpaiv@in.tum.de>\";\n     description\n       \"This
      module defines a data model for reporting results from\n        Measurement
      Agents, which are part of a Large-Scale Measurement\n        Platform (LMAP),
      to result data Collectors.  This data model is\n        expected to be implemented
      by a Collector.\";\n     revision \"2017-08-08\" {\n       description\n         \"Initial
      version\";\n       reference\n         \"RFC 8194: A YANG Data Model for LMAP
      Measurement Agents\";\n     }\n     rpc report {\n       description\n         \"The
      report operation is used by a Measurement Agent to\n          submit measurement
      results produced by Measurement Tasks to\n          a Collector.\";\n       input
      {\n         leaf date {\n           type yang:date-and-time;\n           mandatory
      true;\n           description\n             \"The date and time when this result
      report was sent to\n              a Collector.\";\n         }\n         leaf
      agent-id {\n           type yang:uuid;\n           description\n             \"The
      agent-id of the agent from which this\n              report originates.\";\n
      \        }\n         leaf group-id {\n           type string;\n           description\n
      \            \"The group-id of the agent from which this\n              report
      originates.\";\n         }\n         leaf measurement-point {\n           type
      string;\n           description\n             \"The measurement-point of the
      agent from which this\n              report originates.\";\n         }\n         list
      result {\n           description\n             \"The list of Tasks for which
      results are reported.\";\n           leaf schedule {\n             type lmap:identifier;\n
      \            description\n               \"The name of the Schedule that produced
      the result.\";\n           }\n           leaf action {\n             type lmap:identifier;\n
      \            description\n               \"The name of the Action in the Schedule
      that produced\n                the result.\";\n           }\n           leaf
      task {\n             type lmap:identifier;\n             description\n               \"The
      name of the Task that produced the result.\";\n           }\n           container
      parameters {\n             description\n               \"This container is a
      placeholder for runtime\n                parameters defined in Task-specific
      data models\n                augmenting the base LMAP report data model.\";\n
      \            choice extension {\n               description\n                 \"This
      choice is provided to augment in different\n                  sets of parameters.\";\n
      \            }\n           }\n           uses lmap:options-grouping {\n             description\n
      \              \"The list of options there were in use when the\n                measurement
      was performed.  This list must include\n                both the Task-specific
      options as well as the\n                Action-specific options.\";\n           }\n
      \          leaf-list tag {\n             type lmap:tag;\n             description\n
      \              \"A tag contains additional information that is passed\n                with
      the result record to the Collector.  This is the\n                joined set
      of tags defined for the Task object, the\n                Schedule object, and
      the Action object.  A tag can be\n                used to carry the Measurement
      Cycle ID.\";\n           }\n           leaf event {\n             type yang:date-and-time;\n
      \            description\n               \"The date and time of the event that
      triggered the\n                Schedule of the Action that produced the reported\n
      \               result values.  The date and time does not include\n                any
      added randomization.\";\n           }\n           leaf start {\n             type
      yang:date-and-time;\n             mandatory true;\n             description\n
      \              \"The date and time when the Task producing\n                this
      result started.\";\n           }\n           leaf end {\n             type yang:date-and-time;\n
      \            description\n               \"The date and time when the Task producing\n
      \               this result finished.\";\n           }\n           leaf cycle-number
      {\n             type lmap:cycle-number;\n             description\n               \"The
      optional cycle number is the time closest to\n                the time reported
      in the event leaf that is a multiple\n                of the cycle-interval
      of the event that triggered the\n                execution of the Schedule.
      \ The value is only present\n                if the event that triggered the
      execution of the\n                Schedule has a defined cycle-interval.\";\n
      \          }\n           leaf status {\n             type lmap:status-code;\n
      \            mandatory true;\n             description\n               \"The
      status code returned by the execution of this\n                Action.\";\n
      \          }\n           list conflict {\n             description\n               \"The
      names of Tasks overlapping with the execution\n                of the Task that
      has produced this result.\";\n             leaf schedule-name {\n               type
      lmap:identifier;\n               description\n                 \"The name of
      a Schedule that might have impacted\n                  the execution of the
      Task that has produced this\n                  result.\";\n             }\n
      \            leaf action-name {\n               type lmap:identifier;\n               description\n
      \                \"The name of an Action within the Schedule that\n                  might
      have impacted the execution of the Task that\n                  has produced
      this result.\";\n             }\n             leaf task-name {\n               type
      lmap:identifier;\n               description\n                 \"The name of
      the Task executed by an Action within\n                  the Schedule that might
      have impacted the execution\n                  of the Task that has produced
      this result.\";\n             }\n           }\n           list table {\n             description\n
      \              \"A list of result tables.\";\n             uses lmap:registry-grouping;\n
      \            leaf-list column {\n               type string;\n               description\n
      \                \"An ordered list of column labels.  The order is\n                  determined
      by the system and must match the order\n                  of the columns in
      the result rows.\";\n             }\n             list row {\n               description\n
      \                \"The rows of a result table.\";\n               leaf-list
      value {\n                 type string;\n                 description\n                   \"The
      value of a cell in the result row.\";\n               }\n             }\n           }\n
      \        }\n       }\n     }\n   }\n   <CODE ENDS>\n"
    title: 4.3.  LMAP Report YANG Module
  title: 4.  YANG Modules
- contents:
  - "5.  Security Considerations\n   The YANG module defined in this document is designed
    to be accessed\n   via network management protocols such as NETCONF [RFC6241]
    or\n   RESTCONF [RFC8040].  The lowest NETCONF layer is the secure transport\n
    \  layer, and the mandatory-to-implement secure transport is Secure\n   Shell
    (SSH) [RFC6242].  The lowest RESTCONF layer is HTTPS, and the\n   mandatory-to-implement
    secure transport is Transport Layer Security\n   (TLS) [RFC5246].\n   The NETCONF
    access control model [RFC6536] provides the means to\n   restrict access for particular
    NETCONF or RESTCONF users to a\n   preconfigured subset of all available NETCONF
    or RESTCONF protocol\n   operations and content.\n   There are a number of data
    nodes defined in this YANG module that are\n   writable/creatable/deletable (i.e.,
    config true, which is the\n   default).  These data nodes may be considered sensitive
    or vulnerable\n   in some network environments.  Write operations (e.g., edit-config)\n
    \  to these data nodes without proper protection can have a negative\n   effect
    on network operations.  These are the subtrees and data nodes\n   and their sensitivity/vulnerability:\n
    \  /lmap/agent           This subtree configures general properties of\n                         the
    Measurement Agent such as its identity,\n                         measurement
    point, or Controller timeout.  This\n                         subtree should only
    have write access for the\n                         system responsible for configuring
    the\n                         Measurement Agent.\n   /lmap/tasks           This
    subtree configures the Tasks that can be\n                         invoked by
    a Controller.  This subtree should\n                         only have write access
    for the system\n                         responsible for configuring the Measurement\n
    \                        Agent.  Care must be taken to not expose Tasks\n                         to
    a Controller that can cause damage to the\n                         system or
    the network.\n   /lmap/schedules       This subtree is used by a Controller to
    define\n                         the Schedules and Actions that are executed\n
    \                        when certain events occur.  Unauthorized access\n                         can
    cause unwanted load on the device or\n                         network, or it
    might direct measurement traffic\n                         to targets that become
    victims of an attack.\n   /lmap/suppressions    This subtree is used by a Controller
    to define\n                         Suppressions that can temporarily disable
    the\n                         execution of Schedules or Actions.\n                         Unauthorized
    access can either disable\n                         measurements that should normally
    take place or\n                         cause measurements to take place during
    times\n                         when normally no measurements should take\n                         place.\n
    \  /lmap/events          This subtree is used by a Controller to define\n                         events
    that trigger the execution of Schedules\n                         and Actions.
    \ Unauthorized access can either\n                         disable measurements
    that should normally take\n                         place or cause measurements
    to take place\n                         during times when normally no measurements\n
    \                        should take place or at a frequency that is\n                         higher
    than normally expected.\n   Some of the readable data nodes in this YANG module
    may be considered\n   sensitive or vulnerable in some network environments.  It
    is thus\n   important to control read access (e.g., via get, get-config, or\n
    \  notification) to these data nodes.  These are the subtrees and data\n   nodes
    and their sensitivity/vulnerability:\n   /lmap/agent           This subtree provides
    information about the\n                         Measurement Agent.  This information
    may be\n                         used to select specific targets for attacks.\n
    \  /lmap/capabilities    This subtree provides information about the\n                         capabilities
    of the Measurement Agent,\n                         including its software version
    number and the\n                         Tasks that it supports.  This information
    may\n                         be used to execute targeted attacks against\n                         specific
    implementations.\n   /lmap/schedules       This subtree provides information about
    the\n                         Schedules and their associated Actions executed\n
    \                        on the Measurement Agent.  This information may\n                         be
    used to check whether attacks against the\n                         implementation
    are effective.\n   /lmap/suppressions    This subtree provides information about
    the\n                         Suppressions that can be active on the\n                         Measurement
    Agent.  This information may be\n                         used to predict time
    periods where measurements\n                         take place (or do not take
    place).\n   Some of the RPC operations in this YANG module may be considered\n
    \  sensitive or vulnerable in some network environments.  It is thus\n   important
    to control access to these operations.  These are the\n   operations and their
    sensitivity/vulnerability:\n   /report   The report operation is used to send
    locally collected\n             measurement results to a remote Collector.  Unauthorized\n
    \            access may leak measurement results, including those from\n             passive
    measurements.\n   The data model uses a number of identifiers that are set by
    the\n   Controller.  Implementors may find these identifiers useful for the\n
    \  identification of resources, e.g., to identify objects in a file\n   system
    providing temporary storage.  Since the identifiers used by\n   the YANG data
    model may allow characters that may be given special\n   interpretation in a specific
    context, implementations must ensure\n   that identifiers are properly mapped
    into safe identifiers.\n   The data model allows specifying options in the form
    of name/value\n   pairs that are passed to programs.  Implementors ought to take
    care\n   that option names and values are passed literally to programs.  In\n
    \  particular, shell expansions that may alter option names and values\n   must
    not be performed.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This document registers three URIs in the \"IETF
    XML Registry\"\n   [RFC3688].  Following the format in RFC 3688, the following\n
    \  registrations have been made.\n         URI: urn:ietf:params:xml:ns:yang:ietf-lmap-common\n
    \        Registrant Contact: The IESG.\n         XML: N/A; the requested URI is
    an XML namespace.\n         URI: urn:ietf:params:xml:ns:yang:ietf-lmap-control\n
    \        Registrant Contact: The IESG.\n         XML: N/A; the requested URI is
    an XML namespace.\n         URI: urn:ietf:params:xml:ns:yang:ietf-lmap-report\n
    \        Registrant Contact: The IESG.\n         XML: N/A; the requested URI is
    an XML namespace.\n   This document registers three YANG modules in the \"YANG
    Module Names\"\n   registry [RFC6020].\n         Name: ietf-lmap-common\n         Namespace:
    urn:ietf:params:xml:ns:yang:ietf-lmap-common\n         Prefix: lmap\n         Reference:
    RFC 8194\n         Name: ietf-lmap-control\n         Namespace: urn:ietf:params:xml:ns:yang:ietf-lmap-control\n
    \        Prefix: lmapc\n         Reference: RFC 8194\n         Name: ietf-lmap-report\n
    \        Namespace: urn:ietf:params:xml:ns:yang:ietf-lmap-report\n         Prefix:
    lmapr\n         Reference: RFC 8194\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6020]
      \ Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6536]  Bierman, A. and M. Bjorklund, \"Network Configuration\n              Protocol
      (NETCONF) Access Control Model\", RFC 6536,\n              DOI 10.17487/RFC6536,
      March 2012,\n              <https://www.rfc-editor.org/info/rfc6536>.\n   [RFC6991]
      \ Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC 6991,
      DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8193]  Burbridge, T., Eardley,
      P., Bagnulo, M., and J.\n              Schoenwaelder, \"Information Model for
      Large-Scale\n              Measurement Platforms (LMAPs)\", DOI 10.17487/RFC8193,\n
      \             RFC 8193, August 2017,\n              <http://www.rfc-editor.org/info/rfc8193>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [ISO-8601]\n              International Organization
      for Standardization, \"Data\n              elements and interchange formats
      -- Information\n              interchange -- Representation of dates and times\",
      ISO\n              Standard 8601:2004, December 2004.\n   [NETCONF-CLIENT-SERVER]\n
      \             Watsen, K., Wu, G., and J. Schoenwaelder, \"NETCONF Client\n              and
      Server Models\", Work in Progress, draft-ietf-netconf-\n              netconf-client-server-04,
      July 2017.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC
      3688,\n              DOI 10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC5424]  Gerhards, R., \"The Syslog Protocol\", RFC 5424,\n              DOI
      10.17487/RFC5424, March 2009,\n              <https://www.rfc-editor.org/info/rfc5424>.\n
      \  [RFC7223]  Bjorklund, M., \"A YANG Data Model for Interface\n              Management\",
      RFC 7223, DOI 10.17487/RFC7223, May 2014,\n              <https://www.rfc-editor.org/info/rfc7223>.\n
      \  [RFC7317]  Bierman, A. and M. Bjorklund, \"A YANG Data Model for\n              System
      Management\", RFC 7317, DOI 10.17487/RFC7317, August\n              2014, <https://www.rfc-editor.org/info/rfc7317>.\n
      \  [RFC7398]  Bagnulo, M., Burbridge, T., Crawford, S., Eardley, P., and\n              A.
      Morton, \"A Reference Path and Measurement Points for\n              Large-Scale
      Measurement of Broadband Performance\",\n              RFC 7398, DOI 10.17487/RFC7398,
      February 2015,\n              <https://www.rfc-editor.org/info/rfc7398>.\n   [RFC7594]
      \ Eardley, P., Morton, A., Bagnulo, M., Burbridge, T.,\n              Aitken,
      P., and A. Akhter, \"A Framework for Large-Scale\n              Measurement
      of Broadband Performance (LMAP)\", RFC 7594,\n              DOI 10.17487/RFC7594,
      September 2015,\n              <https://www.rfc-editor.org/info/rfc7594>.\n
      \  [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,
      M., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)
      1.0 (Fifth\n              Edition)\", World Wide Web Consortium Recommendation
      REC-\n              xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n
      \  [YANG-HARDWARE]\n              Bierman, A., Bjorklund, M., Dong, J., and
      D. Romascanu, \"A\n              YANG Data Model for Hardware Management\",
      Work in\n              Progress, draft-ietf-netmod-entity-03, March 2017.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Example Parameter Extension Module\n   Sometimes Tasks may require
    complicated parameters that cannot easily\n   be fit into options, i.e., a list
    of name/value pairs.  In such a\n   situation, it is possible to augment the ietf-lmap-control.yang
    and\n   ietf-lmap-report.yang data models with definitions for more complex\n
    \  parameters.  The following example module demonstrates this idea\n   using
    the parameters of UDP latency metrics as an example (although\n   UDP latency
    metric parameters do not really need such an extension\n   module).\n  module
    example-ietf-ippm-udp-latency {\n    namespace \"urn:example:ietf-ippm-udp-latency\";\n
    \   prefix \"ippm-udp-latency\";\n    import ietf-inet-types {\n      prefix inet;\n
    \   }\n    import ietf-lmap-control {\n      prefix \"lmapc\";\n    }\n    import
    ietf-lmap-report {\n      prefix \"lmapr\";\n    }\n    grouping ippm-udp-latency-parameter-grouping
    {\n      leaf src-ip {\n        type inet:ip-address;\n        description\n          \"The
    source IP address of the UDP measurement traffic.\";\n      }\n      leaf src-port
    {\n        type inet:port-number;\n        description\n          \"The source
    port number of the UDP measurement traffic.\";\n      }\n      leaf dst-ip {\n
    \       type inet:ip-address;\n        description\n          \"The destination
    IP address of the UDP measurement traffic.\";\n      }\n      leaf dst-port {\n
    \       type inet:port-number;\n        description\n          \"The destination
    port number of the UDP measurement traffic.\";\n      }\n      leaf poisson-lambda
    {\n        type decimal64 {\n          fraction-digits 4;\n        }\n        units
    \"seconds\";\n        default 1.0000;\n        description\n          \"The average
    interval for the poisson stream with a resolution\n           of 0.0001 seconds
    (0.1 ms).\";\n      }\n      leaf poisson-limit {\n        type decimal64 {\n
    \         fraction-digits 4;\n        }\n        units \"seconds\";\n        default
    30.0000;\n        description\n          \"The upper limit on the poisson distribution
    with a resolution\n           of 0.0001 seconds (0.1 ms).\";\n      }\n    }\n
    \   augment \"/lmapc:lmap/lmapc:schedules/lmapc:schedule/lmapc:action\"\n          +
    \"/lmapc:parameters/lmapc:extension\" {\n      description\n        \"This augmentation
    adds parameters specific to IP Performance\n          Metrics (IPPM) and UDP latency
    metrics to Actions.\";\n      case \"ietf-ippm-udp-latency\" {\n        uses ippm-udp-latency-parameter-grouping;\n
    \     }\n    }\n    augment \"/lmapr:report/lmapr:input/lmapr:result\"\n          +
    \"/lmapr:parameters/lmapr:extension\" {\n      description\n        \"This augmentation
    adds parameters specific to IPPM and\n         UDP latency metrics to reports.\";\n
    \     case \"ietf-ippm-udp-latency\" {\n        uses ippm-udp-latency-parameter-grouping;\n
    \     }\n    }\n  }\n"
  title: Appendix A.  Example Parameter Extension Module
- contents:
  - "Appendix B.  Example Configuration\n   The configuration below is in XML [W3C.REC-xml-20081126].\n
    \  <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <lmap xmlns=\"urn:ietf:params:xml:ns:yang:ietf-lmap-control\">\n
    \      <agent>\n         <agent-id>550e8400-e29b-41d4-a716-446655440000</agent-id>\n
    \        <report-agent-id>true</report-agent-id>\n       </agent>\n       <schedules>\n
    \        <!-- The Schedule S1 first updates a list of ping targets\n              and
    subsequently sends a ping to all targets. -->\n         <schedule>\n           <name>S1</name>\n
    \          <start>E1</start>\n           <execution-mode>sequential</execution-mode>\n
    \          <action>\n             <name>A1</name>\n             <task>update-ping-targets</task>\n
    \          </action>\n           <action>\n             <name>A2</name>\n             <task>ping-all-targets</task>\n
    \            <destination>S3</destination>\n           </action>\n           <suppression-tag>measurement:ping</suppression-tag>\n
    \        </schedule>\n         <!-- The Schedule S2 executes two traceroutes concurrently.
    -->\n         <schedule>\n           <name>S2</name>\n           <start>E1</start>\n
    \          <execution-mode>parallel</execution-mode>\n           <action>\n             <name>A1</name>\n
    \            <task>traceroute</task>\n             <option>\n               <id>target</id>\n
    \              <name>target</name>\n               <value>2001:db8::1</value>\n
    \            </option>\n             <destination>S3</destination>\n           </action>\n
    \          <action>\n             <name>A2</name>\n             <task>traceroute</task>\n
    \            <option>\n               <id>target</id>\n               <name>target</name>\n
    \              <value>2001:db8::2</value>\n             </option>\n             <destination>S3</destination>\n
    \          </action>\n           <suppression-tag>measurement:traceroute</suppression-tag>\n
    \        </schedule>\n         <!-- The Schedule S3 sends measurement data to
    a Collector. -->\n         <schedule>\n           <name>S3</name>\n           <start>E2</start>\n
    \          <action>\n             <name>A1</name>\n             <task>report</task>\n
    \            <option>\n               <id>collector</id>\n               <name>collector</name>\n
    \              <value>https://collector.example.com/</value>\n             </option>\n
    \          </action>\n         </schedule>\n       </schedules>\n       <suppressions>\n
    \        <!-- Stop all measurements if we got orphaned. -->\n         <suppression>\n
    \          <name>orphaned</name>\n           <start>controller-lost</start>\n
    \          <end>controller-connected</end>\n           <match>measurement:*</match>\n
    \        </suppression>\n       </suppressions>\n       <tasks>\n         <!--
    configuration of an update-ping-targets task -->\n         <task>\n           <name>update-ping-targets</name>\n
    \          <program>fping-update-targets</program>\n         </task>\n         <!--
    configuration of a ping-all-targets task -->\n         <task>\n           <name>ping-all-targets</name>\n
    \          <program>fping</program>\n         </task>\n         <!-- configuration
    of a traceroute task -->\n         <task>\n           <name>traceroute</name>\n
    \          <program>mtr</program>\n           <option>\n             <id>csv</id>\n
    \            <name>--csv</name>\n           </option>\n         </task>\n         <!--
    configuration of a reporter task -->\n         <task>\n           <name>report</name>\n
    \          <program>lmap-report</program>\n         </task>\n         <task>\n
    \          <name>ippm-udp-latency-client</name>\n           <program>ippm-udp-latency</program>\n
    \          <function>\n             <uri>urn:example:tbd</uri>\n             <role>client</role>\n
    \          </function>\n           <tag>active</tag>\n         </task>\n       </tasks>\n
    \      <events>\n         <!-- The event E1 triggers every hour during September
    2016\n              with a random spread of one minute. -->\n         <event>\n
    \          <name>E1</name>\n           <random-spread>60</random-spread>   <!--
    seconds -->\n           <periodic>\n             <interval>3600000</interval>\n
    \            <start>2016-09-01T00:00:00+00:00</start>\n             <end>2016-11-01T00:00:00+00:00</end>\n
    \          </periodic>\n         </event>\n         <!-- The event E2 triggers
    on Mondays at 4am UTC -->\n         <event>\n           <name>E2</name>\n           <calendar>\n
    \            <month>*</month>\n             <day-of-week>monday</day-of-week>\n
    \            <day-of-month>*</day-of-month>\n             <hour>4</hour>\n             <minute>0</minute>\n
    \            <second>0</second>\n             <timezone-offset>+00:00</timezone-offset>\n
    \          </calendar>\n         </event>\n         <!-- The event controller-lost
    triggers when we lost\n              connectivity with the Controller. -->\n         <event>\n
    \          <name>controller-lost</name>\n           <controller-lost/>\n         </event>\n
    \        <!-- The event contoller-connected triggers when we\n              established
    or re-established connectivity with\n              the Controller. -->\n         <event>\n
    \          <name>controller-connected</name>\n           <controller-connected/>\n
    \        </event>\n       </events>\n     </lmap>\n   </config>\n"
  title: Appendix B.  Example Configuration
- contents:
  - "Appendix C.  Example Report\n   The report below is in XML [W3C.REC-xml-20081126].\n
    \  <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n        message-id=\"1\">\n
    \    <report xmlns=\"urn:ietf:params:xml:ns:yang:ietf-lmap-report\">\n       <date>2015-10-28T13:27:42+02:00</date>\n
    \      <agent-id>550e8400-e29b-41d4-a716-446655440000</agent-id>\n       <result>\n
    \        <schedule>S1</schedule>\n         <action>A1</action>\n         <task>update-ping-targets</task>\n
    \        <start>2016-03-21T10:48:55+01:00</start>\n         <end>2016-03-21T10:48:57+01:00</end>\n
    \        <status>0</status>\n       </result>\n       <result>\n         <schedule>S1</schedule>\n
    \        <action>A2</action>\n         <task>ping-all-targets</task>\n         <start>2016-03-21T10:48:55+01:00</start>\n
    \        <end>2016-03-21T10:48:57+01:00</end>\n         <status>0</status>\n         <table>\n
    \          <column>target</column>\n           <column>rtt</column>\n           <row>\n
    \            <value>2001:db8::1</value>\n             <value>42</value>\n           </row>\n
    \          <row>\n             <value>2001:db8::2</value>\n             <value>24</value>\n
    \          </row>\n         </table>\n       </result>\n       <result>\n         <schedule>S2</schedule>\n
    \        <action>A1</action>\n         <task>traceroute</task>\n         <option>\n
    \          <id>target</id>\n           <name>target</name>\n           <value>2001:db8::1</value>\n
    \        </option>\n         <option>\n           <id>csv</id>\n           <name>--csv</name>\n
    \        </option>\n         <start>2016-03-21T10:48:55+01:00</start>\n         <end>2016-03-21T10:48:57+01:00</end>\n
    \        <status>1</status>\n         <table>\n           <column>hop</column>\n
    \          <column>ip</column>\n           <column>rtt</column>\n           <row>\n
    \            <value>1</value>\n             <value>2001:638:709:5::1</value>\n
    \            <value>10.5</value>\n           </row>\n           <row>\n             <value>2</value>\n
    \            <value>?</value>\n             <value></value>\n           </row>\n
    \        </table>\n       </result>\n       <result>\n         <schedule>S2</schedule>\n
    \        <action>A2</action>\n         <task>traceroute</task>\n         <option>\n
    \          <id>target</id>\n           <name>target</name>\n           <value>2001:db8::2</value>\n
    \        </option>\n         <option>\n           <id>csv</id>\n           <name>--csv</name>\n
    \        </option>\n         <start>2016-03-21T10:48:55+01:00</start>\n         <end>2016-03-21T10:48:57+01:00</end>\n
    \        <status>1</status>\n         <table>\n           <column>hop</column>\n
    \          <column>ip</column>\n           <column>rtt</column>\n           <row>\n
    \            <value>1</value>\n             <value>2001:638:709:5::1</value>\n
    \            <value>11.8</value>\n           </row>\n           <row>\n             <value>2</value>\n
    \            <value>?</value>\n             <value></value>\n           </row>\n
    \        </table>\n       </result>\n     </report>\n   </rpc>\n"
  title: Appendix C.  Example Report
- contents:
  - "Acknowledgements\n   Several people contributed to this specification by reviewing
    early\n   draft versions and actively participating in the LMAP Working Group\n
    \  (apologies to those unintentionally omitted): Marcelo Bagnulo, Martin\n   Bjorklund,
    Trevor Burbridge, Timothy Carey, Alissa Cooper, Philip\n   Eardley, Al Morton,
    Dan Romascanu, Andrea Soppera, Barbara Stark, and\n   Qin Wu.\n   Juergen Schoenwaelder
    and Vaibhav Bajpai worked in part on the Leone\n   research project, which received
    funding from the European Union\n   Seventh Framework Programme [FP7/2007-2013]
    under grant agreement\n   number 317647.\n   Juergen Schoenwaelder and Vaibhav
    Bajpai were partly funded by\n   Flamingo, a Network of Excellence project (ICT-318488)
    supported by\n   the European Commission under its Seventh Framework Programme.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Juergen Schoenwaelder\n   Jacobs University Bremen\n   Email:
    j.schoenwaelder@jacobs-university.de\n   Vaibhav Bajpai\n   Technical University
    of Munich\n   Email: bajpaiv@in.tum.de\n"
  title: Authors' Addresses
