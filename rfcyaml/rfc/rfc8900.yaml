- title: __initial_text__
  contents:
  - '                  IP Fragmentation Considered Fragile

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes IP fragmentation and explains how it\n \
    \  introduces fragility to Internet communication.\n   This document also proposes\
    \ alternatives to IP fragmentation and\n   provides recommendations for developers\
    \ and network operators.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8900.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n  \
    \ 2.  IP Fragmentation\n     2.1.  Links, Paths, MTU, and PMTU\n     2.2.  Fragmentation\
    \ Procedures\n     2.3.  Upper-Layer Reliance on IP Fragmentation\n   3.  Increased\
    \ Fragility\n     3.1.  Virtual Reassembly\n     3.2.  Policy-Based Routing\n\
    \     3.3.  Network Address Translation (NAT)\n     3.4.  Stateless Firewalls\n\
    \     3.5.  Equal-Cost Multipath, Link Aggregate Groups, and Stateless\n     \
    \      Load Balancers\n     3.6.  IPv4 Reassembly Errors at High Data Rates\n\
    \     3.7.  Security Vulnerabilities\n     3.8.  PMTU Black-Holing Due to ICMP\
    \ Loss\n       3.8.1.  Transient Loss\n       3.8.2.  Incorrect Implementation\
    \ of Security Policy\n       3.8.3.  Persistent Loss Caused by Anycast\n     \
    \  3.8.4.  Persistent Loss Caused by Unidirectional Routing\n     3.9.  Black-Holing\
    \ Due to Filtering or Loss\n   4.  Alternatives to IP Fragmentation\n     4.1.\
    \  Transport-Layer Solutions\n     4.2.  Application-Layer Solutions\n   5.  Applications\
    \ That Rely on IPv6 Fragmentation\n     5.1.  Domain Name Service (DNS)\n    \
    \ 5.2.  Open Shortest Path First (OSPF)\n     5.3.  Packet-in-Packet Encapsulations\n\
    \     5.4.  UDP Applications Enhancing Performance\n   6.  Recommendations\n \
    \    6.1.  For Application and Protocol Developers\n     6.2.  For System Developers\n\
    \     6.3.  For Middlebox Developers\n     6.4.  For ECMP, LAG, and Load-Balancer\
    \ Developers And Operators\n     6.5.  For Network Operators\n   7.  IANA Considerations\n\
    \   8.  Security Considerations\n   9.  References\n     9.1.  Normative References\n\
    \     9.2.  Informative References\n   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Operational experience [Kent] [Huston] [RFC7872] reveals\
    \ that IP\n   fragmentation introduces fragility to Internet communication.  This\n\
    \   document describes IP fragmentation and explains the fragility it\n   introduces.\
    \  It also proposes alternatives to IP fragmentation and\n   provides recommendations\
    \ for developers and network operators.\n   While this document identifies issues\
    \ associated with IP\n   fragmentation, it does not recommend deprecation.  Legacy\
    \ protocols\n   that depend upon IP fragmentation would do well to be updated\
    \ to\n   remove that dependency.  However, some applications and environments\n\
    \   (see Section 5) require IP fragmentation.  In these cases, the\n   protocol\
    \ will continue to rely on IP fragmentation, but the designer\n   should be aware\
    \ that fragmented packets may result in black holes.  A\n   design should include\
    \ appropriate safeguards.\n   Rather than deprecating IP fragmentation, this document\
    \ recommends\n   that upper-layer protocols address the problem of fragmentation\
    \ at\n   their layer, reducing their reliance on IP fragmentation to the\n   greatest\
    \ degree possible.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  IP Fragmentation
  contents:
  - '2.  IP Fragmentation

    '
- title: 2.1.  Links, Paths, MTU, and PMTU
  contents:
  - "2.1.  Links, Paths, MTU, and PMTU\n   An Internet path connects a source node\
    \ to a destination node.  A\n   path may contain links and routers.  If a path\
    \ contains more than one\n   link, the links are connected in series, and a router\
    \ connects each\n   link to the next.\n   Internet paths are dynamic.  Assume\
    \ that the path from one node to\n   another contains a set of links and routers.\
    \  If a link or a router\n   fails, the path can also change so that it includes\
    \ a different set\n   of links and routers.\n   Each link is constrained by the\
    \ number of octets that it can convey\n   in a single IP packet.  This constraint\
    \ is called the link Maximum\n   Transmission Unit (MTU).  IPv4 [RFC0791] requires\
    \ every link to\n   support an MTU of 68 octets or greater (see NOTE 1).  IPv6\
    \ [RFC8200]\n   similarly requires every link to support an MTU of 1280 octets\
    \ or\n   greater.  These are called the IPv4 and IPv6 minimum link MTUs.\n   Some\
    \ links, and some ways of using links, result in additional\n   variable overhead.\
    \  For the simple case of tunnels, this document\n   defers to other documents.\
    \  For other cases, such as MPLS, this\n   document considers the link MTU to\
    \ include appropriate allowance for\n   any such overhead.\n   Likewise, each\
    \ Internet path is constrained by the number of octets\n   that it can convey\
    \ in a single IP packet.  This constraint is called\n   the Path MTU (PMTU). \
    \ For any given path, the PMTU is equal to the\n   smallest of its link MTUs.\
    \  Because Internet paths are dynamic, PMTU\n   is also dynamic.\n   For reasons\
    \ described below, source nodes estimate the PMTU between\n   themselves and destination\
    \ nodes.  A source node can produce\n   extremely conservative PMTU estimates\
    \ in which:\n   *  The estimate for each IPv4 path is equal to the IPv4 minimum\
    \ link\n      MTU.\n   *  The estimate for each IPv6 path is equal to the IPv6\
    \ minimum link\n      MTU.\n   While these conservative estimates are guaranteed\
    \ to be less than or\n   equal to the actual PMTU, they are likely to be much\
    \ less than the\n   actual PMTU.  This may adversely affect upper-layer protocol\n\
    \   performance.\n   By executing Path MTU Discovery (PMTUD) procedures [RFC1191]\n\
    \   [RFC8201], a source node can maintain a less conservative estimate of\n  \
    \ the PMTU between itself and a destination node.  In PMTUD, the source\n   node\
    \ produces an initial PMTU estimate.  This initial estimate is\n   equal to the\
    \ MTU of the first link along the path to the destination\n   node.  It can be\
    \ greater than the actual PMTU.\n   Having produced an initial PMTU estimate,\
    \ the source node sends non-\n   fragmentable IP packets to the destination node\
    \ (see NOTE 2).  If one\n   of these packets is larger than the actual PMTU, a\
    \ downstream router\n   will not be able to forward the packet through the next\
    \ link along\n   the path.  Therefore, the downstream router drops the packet\
    \ and\n   sends an Internet Control Message Protocol (ICMP) [RFC0792] [RFC4443]\n\
    \   Packet Too Big (PTB) message to the source node (see NOTE 3).  The\n   ICMP\
    \ PTB message indicates the MTU of the link through which the\n   packet could\
    \ not be forwarded.  The source node uses this information\n   to refine its PMTU\
    \ estimate.\n   PMTUD produces a running estimate of the PMTU between a source\
    \ node\n   and a destination node.  Because PMTU is dynamic, the PMTU estimate\n\
    \   can be larger than the actual PMTU.  In order to detect PMTU\n   increases,\
    \ PMTUD occasionally resets the PMTU estimate to its initial\n   value and repeats\
    \ the procedure described above.\n   Ideally, PMTUD operates as described above.\
    \  However, in some\n   scenarios, PMTUD fails.  For example:\n   *  PMTUD relies\
    \ on the network's ability to deliver ICMP PTB messages\n      to the source node.\
    \  If the network cannot deliver ICMP PTB\n      messages to the source node,\
    \ PMTUD fails.\n   *  PMTUD is susceptible to attack because ICMP messages are\
    \ easily\n      forged [RFC5927] and not authenticated by the receiver.  Such\n\
    \      attacks can cause PMTUD to produce unnecessarily conservative PMTU\n  \
    \    estimates.\n   NOTE 1:  In IPv4, every host must be able to reassemble a\
    \ packet\n      whose length is less than or equal to 576 octets.  However, the\n\
    \      IPv4 minimum link MTU is not 576.  Section 3.2 of RFC 791\n      [RFC0791]\
    \ explicitly states that the IPv4 minimum link MTU is 68\n      octets.\n   NOTE\
    \ 2:  A non-fragmentable packet can be fragmented at its source.\n      However,\
    \ it cannot be fragmented by a downstream node.  An IPv4\n      packet whose Don't\
    \ Fragment (DF) bit is set to 0 is fragmentable.\n      An IPv4 packet whose DF\
    \ bit is set to 1 is non-fragmentable.  All\n      IPv6 packets are also non-fragmentable.\n\
    \   NOTE 3:  The ICMP PTB message has two instantiations.  In ICMPv4\n      [RFC0792],\
    \ the ICMP PTB message is a Destination Unreachable\n      message with Code equal\
    \ to 4 (fragmentation needed and DF set).\n      This message was augmented by\
    \ [RFC1191] to indicate the MTU of the\n      link through which the packet could\
    \ not be forwarded.  In ICMPv6\n      [RFC4443], the ICMP PTB message is a Packet\
    \ Too Big Message with\n      Code equal to 0.  This message also indicates the\
    \ MTU of the link\n      through which the packet could not be forwarded.\n"
- title: 2.2.  Fragmentation Procedures
  contents:
  - "2.2.  Fragmentation Procedures\n   When an upper-layer protocol submits data\
    \ to the underlying IP\n   module, and the resulting IP packet's length is greater\
    \ than the\n   PMTU, the packet is divided into fragments.  Each fragment includes\n\
    \   an IP header and a portion of the original packet.\n   [RFC0791] describes\
    \ IPv4 fragmentation procedures.  An IPv4 packet\n   whose DF bit is set to 1\
    \ may be fragmented by the source node, but\n   may not be fragmented by a downstream\
    \ router.  An IPv4 packet whose\n   DF bit is set to 0 may be fragmented by the\
    \ source node or by a\n   downstream router.  When an IPv4 packet is fragmented,\
    \ all IP options\n   (which are within the IPv4 header) appear in the first fragment,\
    \ but\n   only options whose \"copy\" bit is set to 1 appear in subsequent\n \
    \  fragments.\n   [RFC8200], notably in Section 4.5, describes IPv6 fragmentation\n\
    \   procedures.  An IPv6 packet may be fragmented only at the source\n   node.\
    \  When an IPv6 packet is fragmented, all extension headers\n   appear in the\
    \ first fragment, but only per-fragment headers appear in\n   subsequent fragments.\
    \  Per-fragment headers include the following:\n   *  The IPv6 header.\n   * \
    \ The Hop-by-Hop Options header (if present).\n   *  The Destination Options header\
    \ (if present and if it precedes a\n      Routing header).\n   *  The Routing\
    \ header (if present).\n   *  The Fragment header.\n   In IPv4, the upper-layer\
    \ header usually appears in the first\n   fragment, due to the sizes of the headers\
    \ involved.  In IPv6, the\n   upper-layer header must appear in the first fragment.\n"
- title: 2.3.  Upper-Layer Reliance on IP Fragmentation
  contents:
  - "2.3.  Upper-Layer Reliance on IP Fragmentation\n   Upper-layer protocols can\
    \ operate in the following modes:\n   *  Do not rely on IP fragmentation.\n  \
    \ *  Rely on IP fragmentation by the source node only.\n   *  Rely on IP fragmentation\
    \ by any node.\n   Upper-layer protocols running over IPv4 can operate in all\
    \ of the\n   above-mentioned modes.  Upper-layer protocols running over IPv6 can\n\
    \   operate in the first and second modes only.\n   Upper-layer protocols that\
    \ operate in the first two modes (above)\n   require access to the PMTU estimate.\
    \  In order to fulfill this\n   requirement, they can:\n   *  Estimate the PMTU\
    \ to be equal to the IPv4 or IPv6 minimum link\n      MTU.\n   *  Access the estimate\
    \ that PMTUD produced.\n   *  Execute PMTUD procedures themselves.\n   *  Execute\
    \ Packetization Layer PMTUD (PLPMTUD) procedures [RFC4821]\n      [RFC8899].\n\
    \   According to PLPMTUD procedures, the upper-layer protocol maintains a\n  \
    \ running PMTU estimate.  It does so by sending probe packets of\n   various sizes\
    \ to its upper-layer peer and receiving acknowledgements.\n   This strategy differs\
    \ from PMTUD in that it relies on acknowledgement\n   of received messages, as\
    \ opposed to ICMP PTB messages concerning\n   dropped messages.  Therefore, PLPMTUD\
    \ does not rely on the network's\n   ability to deliver ICMP PTB messages to the\
    \ source.\n"
- title: 3.  Increased Fragility
  contents:
  - "3.  Increased Fragility\n   This section explains how IP fragmentation introduces\
    \ fragility to\n   Internet communication.\n"
- title: 3.1.  Virtual Reassembly
  contents:
  - "3.1.  Virtual Reassembly\n   Virtual reassembly is a procedure in which a device\
    \ conceptually\n   reassembles a packet, forwards its fragments, and discards\
    \ the\n   reassembled copy.  In Address plus Port (A+P) [RFC6346] and Carrier\n\
    \   Grade NAT (CGN) [RFC6888], virtual reassembly is required in order to\n  \
    \ correctly translate fragment addresses.  It could be useful to\n   address the\
    \ problems in Sections 3.2, 3.3, 3.4, and 3.5.\n   Virtual reassembly is computationally\
    \ expensive and holds state for\n   indeterminate periods of time.  Therefore,\
    \ it is prone to errors and\n   attacks (Section 3.7).\n"
- title: 3.2.  Policy-Based Routing
  contents:
  - "3.2.  Policy-Based Routing\n   IP fragmentation causes problems for routers that\
    \ implement policy-\n   based routing.\n   When a router receives a packet, it\
    \ identifies the next hop on route\n   to the packet's destination and forwards\
    \ the packet to that next hop.\n   In order to identify the next hop, the router\
    \ interrogates a local\n   data structure called the Forwarding Information Base\
    \ (FIB).\n   Normally, the FIB contains destination-based entries that map a\n\
    \   destination prefix to a next hop.  Policy-based routing allows\n   destination-based\
    \ and policy-based entries to coexist in the same\n   FIB.  A policy-based FIB\
    \ entry maps multiple fields, drawn from\n   either the IP or transport-layer\
    \ header, to a next hop.\n   |Entry| Type              | Dest. Prefix    | Next\
    \  | Next Hop      |\n   |  1  | Destination-based | 2001:db8::1/128 | Any / |\
    \ 2001:db8:2::2 |\n   |  2  | Policy-based      | 2001:db8::1/128 | TCP / | 2001:db8:3::3\
    \ |\n                     Table 1: Policy-Based Routing FIB\n   Assume that a\
    \ router maintains the FIB in Table 1.  The first FIB\n   entry is destination-based.\
    \  It maps a destination prefix\n   2001:db8::1/128 to a next hop 2001:db8:2::2.\
    \  The second FIB entry is\n   policy-based.  It maps the same destination prefix\
    \ 2001:db8::1/128\n   and a destination port (TCP / 80) to a different next hop\n\
    \   (2001:db8:3::3).  The second entry is more specific than the first.\n   When\
    \ the router receives the first fragment of a packet that is\n   destined for\
    \ TCP port 80 on 2001:db8::1, it interrogates the FIB.\n   Both FIB entries satisfy\
    \ the query.  The router selects the second\n   FIB entry because it is more specific\
    \ and forwards the packet to\n   2001:db8:3::3.\n   When the router receives the\
    \ second fragment of the packet, it\n   interrogates the FIB again.  This time,\
    \ only the first FIB entry\n   satisfies the query, because the second fragment\
    \ contains no\n   indication that the packet is destined for TCP port 80.  Therefore,\n\
    \   the router selects the first FIB entry and forwards the packet to\n   2001:db8:2::2.\n\
    \   Policy-based routing is also known as filter-based forwarding.\n"
- title: 3.3.  Network Address Translation (NAT)
  contents:
  - "3.3.  Network Address Translation (NAT)\n   IP fragmentation causes problems\
    \ for Network Address Translation\n   (NAT) devices.  When a NAT device detects\
    \ a new, outbound flow, it\n   maps that flow's source port and IP address to\
    \ another source port\n   and IP address.  Having created that mapping, the NAT\
    \ device\n   translates:\n   *  The source IP address and source port on each\
    \ outbound packet.\n   *  The destination IP address and destination port on each\
    \ inbound\n      packet.\n   A+P [RFC6346] and Carrier Grade NAT (CGN) [RFC6888]\
    \ are two common\n   NAT strategies.  In both approaches, the NAT device must\
    \ virtually\n   reassemble fragmented packets in order to translate and forward\
    \ each\n   fragment.\n"
- title: 3.4.  Stateless Firewalls
  contents:
  - "3.4.  Stateless Firewalls\n   As discussed in more detail in Section 3.7, IP\
    \ fragmentation causes\n   problems for stateless firewalls whose rules include\
    \ TCP and UDP\n   ports.  Because port information is only available in the first\n\
    \   fragment and not available in the subsequent fragments, the firewall\n   is\
    \ limited to the following options:\n   *  Accept all subsequent fragments, possibly\
    \ admitting certain\n      classes of attack.\n   *  Block all subsequent fragments,\
    \ possibly blocking legitimate\n      traffic.\n   Neither option is attractive.\n"
- title: 3.5.  Equal-Cost Multipath, Link Aggregate Groups, and Stateless Load
  contents:
  - "3.5.  Equal-Cost Multipath, Link Aggregate Groups, and Stateless Load\n     \
    \ Balancers\n   IP fragmentation causes problems for Equal-Cost Multipath (ECMP),\n\
    \   Link Aggregate Groups (LAG), and other stateless load-distribution\n   technologies.\
    \  In order to assign a packet or packet fragment to a\n   link, an intermediate\
    \ node executes a hash (i.e., load-distributing)\n   algorithm.  The following\
    \ paragraphs describe a commonly deployed\n   hash algorithm.\n   If the packet\
    \ or packet fragment contains a transport-layer header,\n   the algorithm accepts\
    \ the following 5-tuple as input:\n   *  IP Source Address.\n   *  IP Destination\
    \ Address.\n   *  IPv4 Protocol or IPv6 Next Header.\n   *  transport-layer source\
    \ port.\n   *  transport-layer destination port.\n   If the packet or packet fragment\
    \ does not contain a transport-layer\n   header, the algorithm accepts only the\
    \ following 3-tuple as input:\n   *  IP Source Address.\n   *  IP Destination\
    \ Address.\n   *  IPv4 Protocol or IPv6 Next Header.\n   Therefore, non-fragmented\
    \ packets belonging to a flow can be assigned\n   to one link while fragmented\
    \ packets belonging to the same flow can\n   be divided between that link and\
    \ another.  This can cause suboptimal\n   load distribution.\n   [RFC6438] offers\
    \ a partial solution to this problem for IPv6 devices\n   only.  According to\
    \ [RFC6438]:\n   |  At intermediate routers that perform load distribution, the\
    \ hash\n   |  algorithm used to determine the outgoing component-link in an ECMP\n\
    \   |  and/or LAG toward the next hop MUST minimally include the 3-tuple\n   |\
    \  {dest addr, source addr, flow label} and MAY also include the\n   |  remaining\
    \ components of the 5-tuple.\n   If the algorithm includes only the 3-tuple {dest\
    \ addr, source addr,\n   flow label}, it will assign all fragments belonging to\
    \ a packet to\n   the same link.  (See [RFC6437] and [RFC7098]).\n   In order\
    \ to avoid the problem described above, implementations SHOULD\n   implement the\
    \ recommendations provided in Section 6.4 of this\n   document.\n"
- title: 3.6.  IPv4 Reassembly Errors at High Data Rates
  contents:
  - "3.6.  IPv4 Reassembly Errors at High Data Rates\n   IPv4 fragmentation is not\
    \ sufficiently robust for use under some\n   conditions in today's Internet. \
    \ At high data rates, the 16-bit IP\n   identification field is not large enough\
    \ to prevent duplicate IDs,\n   resulting in frequent incorrectly assembled IP\
    \ fragments, and the TCP\n   and UDP checksums are insufficient to prevent the\
    \ resulting corrupted\n   datagrams from being delivered to upper-layer protocols.\
    \  [RFC4963]\n   describes some easily reproduced experiments demonstrating the\n\
    \   problem and discusses some of the operational implications of these\n   observations.\n\
    \   These reassembly issues do not occur as frequently in IPv6 because\n   the\
    \ IPv6 identification field is 32 bits long.\n"
- title: 3.7.  Security Vulnerabilities
  contents:
  - "3.7.  Security Vulnerabilities\n   Security researchers have documented several\
    \ attacks that exploit IP\n   fragmentation.  The following are examples:\n  \
    \ *  Overlapping fragment attacks [RFC1858] [RFC3128] [RFC5722].\n   *  Resource\
    \ exhaustion attacks.\n   *  Attacks based on predictable fragment identification\
    \ values\n      [RFC7739].\n   *  Evasion of Network Intrusion Detection Systems\
    \ (NIDS)\n      [Ptacek1998].\n   In the overlapping fragment attack, an attacker\
    \ constructs a series\n   of packet fragments.  The first fragment contains an\
    \ IP header, a\n   transport-layer header, and some transport-layer payload. \
    \ This\n   fragment complies with local security policy and is allowed to pass\n\
    \   through a stateless firewall.  A second fragment, having a nonzero\n   offset,\
    \ overlaps with the first fragment.  The second fragment also\n   passes through\
    \ the stateless firewall.  When the packet is\n   reassembled, the transport-layer\
    \ header from the first fragment is\n   overwritten by data from the second fragment.\
    \  The reassembled packet\n   does not comply with local security policy.  Had\
    \ it traversed the\n   firewall in one piece, the firewall would have rejected\
    \ it.\n   A stateless firewall cannot protect against the overlapping fragment\n\
    \   attack.  However, destination nodes can protect against the\n   overlapping\
    \ fragment attack by implementing the procedures described\n   in RFC 1858, RFC\
    \ 3128, and RFC 8200.  These reassembly procedures\n   detect the overlap and\
    \ discard the packet.\n   The fragment reassembly algorithm is a stateful procedure\
    \ in an\n   otherwise stateless protocol.  Therefore, it can be exploited by\n\
    \   resource exhaustion attacks.  An attacker can construct a series of\n   fragmented\
    \ packets with one fragment missing from each packet so that\n   the reassembly\
    \ is impossible.  Thus, this attack causes resource\n   exhaustion on the destination\
    \ node, possibly denying reassembly\n   services to other flows.  This type of\
    \ attack can be mitigated by\n   flushing fragment reassembly buffers when necessary,\
    \ at the expense\n   of possibly dropping legitimate fragments.\n   Each IP fragment\
    \ contains an \"Identification\" field that destination\n   nodes use to reassemble\
    \ fragmented packets.  Some implementations set\n   the Identification field to\
    \ a predictable value, thus making it easy\n   for an attacker to forge malicious\
    \ IP fragments that would cause the\n   reassembly procedure for legitimate packets\
    \ to fail.\n   NIDS aims at identifying malicious activity by analyzing network\n\
    \   traffic.  Ambiguity in the possible result of the fragment reassembly\n  \
    \ process may allow an attacker to evade these systems.  Many of these\n   systems\
    \ try to mitigate some of these evasion techniques (e.g., by\n   computing all\
    \ possible outcomes of the fragment reassembly process,\n   at the expense of\
    \ increased processing requirements).\n"
- title: 3.8.  PMTU Black-Holing Due to ICMP Loss
  contents:
  - "3.8.  PMTU Black-Holing Due to ICMP Loss\n   As mentioned in Section 2.3, upper-layer\
    \ protocols can be configured\n   to rely on PMTUD.  Because PMTUD relies upon\
    \ the network to deliver\n   ICMP PTB messages, those protocols also rely on the\
    \ networks to\n   deliver ICMP PTB messages.\n   According to [RFC4890], ICMPv6\
    \ PTB messages must not be filtered.\n   However, ICMP PTB delivery is not reliable.\
    \  It is subject to both\n   transient and persistent loss.\n   Transient loss\
    \ of ICMP PTB messages can cause transient PMTU black\n   holes.  When the conditions\
    \ contributing to transient loss abate, the\n   network regains its ability to\
    \ deliver ICMP PTB messages and\n   connectivity between the source and destination\
    \ nodes is restored.\n   Section 3.8.1 of this document describes conditions that\
    \ lead to\n   transient loss of ICMP PTB messages.\n   Persistent loss of ICMP\
    \ PTB messages can cause persistent black\n   holes.  Sections 3.8.2, 3.8.3, and\
    \ 3.8.4 of this document describe\n   conditions that lead to persistent loss\
    \ of ICMP PTB messages.\n   The problem described in this section is specific\
    \ to PMTUD.  It does\n   not occur when the upper-layer protocol obtains its PMTU\
    \ estimate\n   from PLPMTUD or from any other source.\n"
- title: 3.8.1.  Transient Loss
  contents:
  - "3.8.1.  Transient Loss\n   The following factors can contribute to transient\
    \ loss of ICMP PTB\n   messages:\n   *  Network congestion.\n   *  Packet corruption.\n\
    \   *  Transient routing loops.\n   *  ICMP rate limiting.\n   The effect of rate\
    \ limiting may be severe, as RFC 4443 recommends\n   strict rate limiting of ICMPv6\
    \ traffic.\n"
- title: 3.8.2.  Incorrect Implementation of Security Policy
  contents:
  - "3.8.2.  Incorrect Implementation of Security Policy\n   Incorrect implementation\
    \ of security policy can cause persistent loss\n   of ICMP PTB messages.\n   For\
    \ example, assume that a Customer Premises Equipment (CPE) router\n   implements\
    \ the following zone-based security policy:\n   *  Allow any traffic to flow from\
    \ the inside zone to the outside\n      zone.\n   *  Do not allow any traffic\
    \ to flow from the outside zone to the\n      inside zone unless it is part of\
    \ an existing flow (i.e., it was\n      elicited by an outbound packet).\n   When\
    \ a correct implementation of the above-mentioned security policy\n   receives\
    \ an ICMP PTB message, it examines the ICMP PTB payload in\n   order to determine\
    \ whether the original packet (i.e., the packet that\n   elicited the ICMP PTB\
    \ message) belonged to an existing flow.  If the\n   original packet belonged\
    \ to an existing flow, the implementation\n   allows the ICMP PTB to flow from\
    \ the outside zone to the inside zone.\n   If not, the implementation discards\
    \ the ICMP PTB message.\n   When an incorrect implementation of the above-mentioned\
    \ security\n   policy receives an ICMP PTB message, it discards the packet because\n\
    \   its source address is not associated with an existing flow.\n   The security\
    \ policy described above has been implemented incorrectly\n   on many consumer\
    \ CPE routers.\n"
- title: 3.8.3.  Persistent Loss Caused by Anycast
  contents:
  - "3.8.3.  Persistent Loss Caused by Anycast\n   Anycast can cause persistent loss\
    \ of ICMP PTB messages.  Consider the\n   example below:\n   A DNS client sends\
    \ a request to an anycast address.  The network\n   routes that DNS request to\
    \ the nearest instance of that anycast\n   address (i.e., a DNS server).  The\
    \ DNS server generates a response\n   and sends it back to the DNS client.  While\
    \ the response does not\n   exceed the DNS server's PMTU estimate, it does exceed\
    \ the actual\n   PMTU.\n   A downstream router drops the packet and sends an ICMP\
    \ PTB message\n   the packet's source (i.e., the anycast address).  The network\
    \ routes\n   the ICMP PTB message to the anycast instance closest to the\n   downstream\
    \ router.  That anycast instance may not be the DNS server\n   that originated\
    \ the DNS response.  It may be another DNS server with\n   the same anycast address.\
    \  The DNS server that originated the\n   response may never receive the ICMP\
    \ PTB message and may never update\n   its PMTU estimate.\n"
- title: 3.8.4.  Persistent Loss Caused by Unidirectional Routing
  contents:
  - "3.8.4.  Persistent Loss Caused by Unidirectional Routing\n   Unidirectional routing\
    \ can cause persistent loss of ICMP PTB\n   messages.  Consider the example below:\n\
    \   A source node sends a packet to a destination node.  All intermediate\n  \
    \ nodes maintain a route to the destination node but do not maintain a\n   route\
    \ to the source node.  In this case, when an intermediate node\n   encounters\
    \ an MTU issue, it cannot send an ICMP PTB message to the\n   source node.\n"
- title: 3.9.  Black-Holing Due to Filtering or Loss
  contents:
  - "3.9.  Black-Holing Due to Filtering or Loss\n   In RFC 7872, researchers sampled\
    \ Internet paths to determine whether\n   they would convey packets that contain\
    \ IPv6 extension headers.\n   Sampled paths terminated at popular Internet sites\
    \ (e.g., popular\n   web, mail, and DNS servers).\n   The study revealed that\
    \ at least 28% of the sampled paths did not\n   convey packets containing the\
    \ IPv6 Fragment extension header.  In\n   most cases, fragments were dropped in\
    \ the destination autonomous\n   system.  In other cases, the fragments were dropped\
    \ in transit\n   autonomous systems.\n   Another study [Huston] confirmed this\
    \ finding.  It reported that 37%\n   of sampled endpoints used IPv6-capable DNS\
    \ resolvers that were\n   incapable of receiving a fragmented IPv6 response.\n\
    \   It is difficult to determine why network operators drop fragments.\n   Possible\
    \ causes follow:\n   *  Hardware inability to process fragmented packets.\n  \
    \ *  Failure to change vendor defaults.\n   *  Unintentional misconfiguration.\n\
    \   *  Intentional configuration (e.g., network operators consciously\n      chooses\
    \ to drop IPv6 fragments in order to address the issues\n      raised in Sections\
    \ 3.2 through 3.8, above.)\n"
- title: 4.  Alternatives to IP Fragmentation
  contents:
  - '4.  Alternatives to IP Fragmentation

    '
- title: 4.1.  Transport-Layer Solutions
  contents:
  - "4.1.  Transport-Layer Solutions\n   The Transport Control Protocol (TCP) [RFC0793])\
    \ can be operated in a\n   mode that does not require IP fragmentation.\n   Applications\
    \ submit a stream of data to TCP.  TCP divides that stream\n   of data into segments,\
    \ with no segment exceeding the TCP Maximum\n   Segment Size (MSS).  Each segment\
    \ is encapsulated in a TCP header and\n   submitted to the underlying IP module.\
    \  The underlying IP module\n   prepends an IP header and forwards the resulting\
    \ packet.\n   If the TCP MSS is sufficiently small, then the underlying IP module\n\
    \   never produces a packet whose length is greater than the actual PMTU.\n  \
    \ Therefore, IP fragmentation is not required.\n   TCP offers the following mechanisms\
    \ for MSS management:\n   *  Manual configuration.\n   *  PMTUD.\n   *  PLPMTUD.\n\
    \   Manual configuration is always applicable.  If the MSS is configured\n   to\
    \ a sufficiently low value, the IP layer will never produce a packet\n   whose\
    \ length is greater than the protocol minimum link MTU.  However,\n   manual configuration\
    \ prevents TCP from taking advantage of larger\n   link MTUs.\n   Upper-layer\
    \ protocols can implement PMTUD in order to discover and\n   take advantage of\
    \ larger Path MTUs.  However, as mentioned in\n   Section 2.1, PMTUD relies upon\
    \ the network to deliver ICMP PTB\n   messages.  Therefore, PMTUD can only provide\
    \ an estimate of the PMTU\n   in environments where the risk of ICMP PTB loss\
    \ is acceptable (e.g.,\n   known to not be filtered).\n   By contrast, PLPMTUD\
    \ does not rely upon the network's ability to\n   deliver ICMP PTB messages. \
    \ It utilizes probe messages sent as TCP\n   segments to determine whether the\
    \ probed PMTU can be successfully\n   used across the network path.  In PLPMTUD,\
    \ probing is separated from\n   congestion control, so that loss of a TCP probe\
    \ segment does not\n   cause a reduction of the congestion control window.  [RFC4821]\n\
    \   defines PLPMTUD procedures for TCP.\n   While TCP will never knowingly cause\
    \ the underlying IP module to emit\n   a packet that is larger than the PMTU estimate,\
    \ it can cause the\n   underlying IP module to emit a packet that is larger than\
    \ the actual\n   PMTU.  For example, if routing changes and as a result the PMTU\n\
    \   becomes smaller, TCP will not know until the ICMP PTB message\n   arrives.\
    \  If this occurs, the packet is dropped, the PMTU estimate is\n   updated, the\
    \ segment is divided into smaller segments, and each\n   smaller segment is submitted\
    \ to the underlying IP module.\n   The Datagram Congestion Control Protocol (DCCP)\
    \ [RFC4340] and the\n   Stream Control Transmission Protocol (SCTP) [RFC4960]\
    \ also can be\n   operated in a mode that does not require IP fragmentation. \
    \ They both\n   accept data from an application and divide that data into segments,\n\
    \   with no segment exceeding a maximum size.\n   DCCP offers manual configuration,\
    \ PMTUD, and PLPMTUD as mechanisms\n   for managing that maximum size.  Datagram\
    \ protocols can also\n   implement PLPMTUD to estimate the PMTU via [RFC8899].\
    \  This proposes\n   procedures for performing PLPMTUD with UDP, UDP options,\
    \ SCTP, QUIC,\n   and other datagram protocols.\n   Currently, User Datagram Protocol\
    \ (UDP) [RFC0768] lacks a\n   fragmentation mechanism of its own and relies on\
    \ IP fragmentation.\n   However, [UDP-OPTIONS] proposes a fragmentation mechanism\
    \ for UDP.\n"
- title: 4.2.  Application-Layer Solutions
  contents:
  - "4.2.  Application-Layer Solutions\n   [RFC8085] recognizes that IP fragmentation\
    \ reduces the reliability of\n   Internet communication.  It also recognizes that\
    \ UDP lacks a\n   fragmentation mechanism of its own and relies on IP fragmentation.\n\
    \   Therefore, [RFC8085] offers the following advice regarding\n   applications\
    \ the run over the UDP:\n   |  An application SHOULD NOT send UDP datagrams that\
    \ result in IP\n   |  packets that exceed the Maximum Transmission Unit (MTU)\
    \ along the\n   |  path to the destination.  Consequently, an application SHOULD\n\
    \   |  either use the path MTU information provided by the IP layer or\n   | \
    \ implement Path MTU Discovery (PMTUD) itself [RFC1191] [RFC1981]\n   |  [RFC4821]\
    \ to determine whether the path to a destination will\n   |  support its desired\
    \ message size without fragmentation.\n   RFC 8085 continues:\n   |  Applications\
    \ that do not follow the recommendation to do PMTU/\n   |  PLPMTUD discovery SHOULD\
    \ still avoid sending UDP datagrams that\n   |  would result in IP packets that\
    \ exceed the path MTU.  Because the\n   |  actual path MTU is unknown, such applications\
    \ SHOULD fall back to\n   |  sending messages that are shorter than the default\
    \ effective MTU\n   |  for sending (EMTU_S in [RFC1122]).  For IPv4, EMTU_S is\
    \ the\n   |  smaller of 576 bytes and the first-hop MTU [RFC1122].  For IPv6,\n\
    \   |  EMTU_S is 1280 bytes [RFC2460].  The effective PMTU for a directly\n  \
    \ |  connected destination (with no routers on the path) is the\n   |  configured\
    \ interface MTU, which could be less than the maximum\n   |  link payload size.\
    \  Transmission of minimum-sized UDP datagrams is\n   |  inefficient over paths\
    \ that support a larger PMTU, which is a\n   |  second reason to implement PMTU\
    \ discovery.\n   RFC 8085 assumes that for IPv4 an EMTU_S of 576 is sufficiently\
    \ small\n   to be supported by most current Internet paths, even though the IPv4\n\
    \   minimum link MTU is 68 octets.\n   This advice applies equally to any application\
    \ that runs directly\n   over IP.\n"
- title: 5.  Applications That Rely on IPv6 Fragmentation
  contents:
  - "5.  Applications That Rely on IPv6 Fragmentation\n   The following applications\
    \ rely on IPv6 fragmentation:\n   *  DNS [RFC1035].\n   *  OSPFv2 [RFC2328].\n\
    \   *  OSPFv3 [RFC5340].\n   *  Packet-in-packet encapsulations.\n   Each of these\
    \ applications relies on IPv6 fragmentation to a varying\n   degree.  In some\
    \ cases, that reliance is essential and cannot be\n   broken without fundamentally\
    \ changing the protocol.  In other cases,\n   that reliance is incidental, and\
    \ most implementations already take\n   appropriate steps to avoid fragmentation.\n\
    \   This list is not comprehensive, and other protocols that rely on IP\n   fragmentation\
    \ may exist.  They are not specifically considered in the\n   context of this\
    \ document.\n"
- title: 5.1.  Domain Name Service (DNS)
  contents:
  - "5.1.  Domain Name Service (DNS)\n   DNS relies on UDP for efficiency, and the\
    \ consequence is the use of\n   IP fragmentation for large responses, as permitted\
    \ by the Extension\n   Mechanisms for DNS (EDNS0) options in the query.  It is\
    \ possible to\n   mitigate the issue of fragmentation-based packet loss by having\n\
    \   queries use smaller EDNS0 UDP buffer sizes or by having the DNS\n   server\
    \ limit the size of its UDP responses to some self-imposed\n   maximum packet\
    \ size that may be less than the preferred EDNS0 UDP\n   buffer size.  In both\
    \ cases, large responses are truncated in the\n   DNS, signaling to the client\
    \ to re-query using TCP to obtain the\n   complete response.  However, the operational\
    \ issue of the partial\n   level of support for DNS over TCP, particularly in\
    \ the case where\n   IPv6 transport is being used, becomes a limiting factor of\
    \ the\n   efficacy of this approach [Damas].\n   Larger DNS responses can normally\
    \ be avoided by aggressively pruning\n   the Additional section of DNS responses.\
    \  One scenario where such\n   pruning is ineffective is in the use of DNSSEC,\
    \ where large key sizes\n   act to increase the response size to certain DNS queries.\
    \  There is\n   no effective response to this situation within the DNS other than\n\
    \   using smaller cryptographic keys and adopting of DNSSEC\n   administrative\
    \ practices that attempt to keep DNS response as short\n   as possible.\n"
- title: 5.2.  Open Shortest Path First (OSPF)
  contents:
  - "5.2.  Open Shortest Path First (OSPF)\n   OSPF implementations can emit messages\
    \ large enough to cause\n   fragmentation.  However, in order to optimize performance,\
    \ most OSPF\n   implementations restrict their maximum message size to a value\
    \ that\n   will not cause fragmentation.\n"
- title: 5.3.  Packet-in-Packet Encapsulations
  contents:
  - "5.3.  Packet-in-Packet Encapsulations\n   This document acknowledges that in\
    \ some cases, packets must be\n   fragmented within IP-in-IP tunnels.  Therefore,\
    \ this document makes\n   no additional recommendations regarding IP-in-IP tunnels.\n\
    \   In this document, packet-in-packet encapsulations include IP-in-IP\n   [RFC2003],\
    \ Generic Routing Encapsulation (GRE) [RFC2784], GRE-in-UDP\n   [RFC8086], and\
    \ Generic Packet Tunneling in IPv6 [RFC2473].  [RFC4459]\n   describes fragmentation\
    \ issues associated with all of the above-\n   mentioned encapsulations.\n   The\
    \ fragmentation strategy described for GRE in [RFC7588] has been\n   deployed\
    \ for all of the above-mentioned encapsulations.  This\n   strategy does not rely\
    \ on IP fragmentation except in one corner case.\n   (See Section 3.3.2.2 of [RFC7588]\
    \ and Section 7.1 of [RFC2473].)\n   Section 3.3 of [RFC7676] further describes\
    \ this corner case.\n   See [TUNNELS] for further discussion.\n"
- title: 5.4.  UDP Applications Enhancing Performance
  contents:
  - "5.4.  UDP Applications Enhancing Performance\n   Some UDP applications rely on\
    \ IP fragmentation to achieve acceptable\n   levels of performance.  These applications\
    \ use UDP datagram sizes\n   that are larger than the Path MTU so that more data\
    \ can be conveyed\n   between the application and the kernel in a single system\
    \ call.\n   To pick one example, the Licklider Transmission Protocol (LTP)\n \
    \  [RFC5326], which is in current use on the International Space Station\n   (ISS),\
    \ uses UDP datagram sizes larger than the Path MTU to achieve\n   acceptable levels\
    \ of performance even though this invokes IP\n   fragmentation.  More generally,\
    \ SNMP and video applications may\n   transmit an application-layer quantum of\
    \ data, depending on the\n   network layer to fragment and reassemble as needed.\n"
- title: 6.  Recommendations
  contents:
  - '6.  Recommendations

    '
- title: 6.1.  For Application and Protocol Developers
  contents:
  - "6.1.  For Application and Protocol Developers\n   Developers SHOULD NOT develop\
    \ new protocols or applications that rely\n   on IP fragmentation.  When a new\
    \ protocol or application is deployed\n   in an environment that does not fully\
    \ support IP fragmentation, it\n   SHOULD operate correctly, either in its default\
    \ configuration or in a\n   specified alternative configuration.\n   While there\
    \ may be controlled environments where IP fragmentation\n   works reliably, this\
    \ is a deployment issue and can not be known to\n   someone developing a new protocol\
    \ or application.  It is not\n   recommended that new protocols or applications\
    \ be developed that rely\n   on IP fragmentation.  Protocols and applications\
    \ that rely on IP\n   fragmentation will work less reliably on the Internet.\n\
    \   Legacy protocols that depend upon IP fragmentation SHOULD be updated\n   to\
    \ break that dependency.  However, in some cases, there may be no\n   viable alternative\
    \ to IP fragmentation (e.g., IPSEC tunnel mode, IP-\n   in-IP encapsulation).\
    \  Applications and protocols cannot necessarily\n   know or control whether they\
    \ use lower layers or network paths that\n   rely on such fragmentation.  In these\
    \ cases, the protocol will\n   continue to rely on IP fragmentation but should\
    \ only be used in\n   environments where IP fragmentation is known to be supported.\n\
    \   Protocols may be able to avoid IP fragmentation by using a\n   sufficiently\
    \ small MTU (e.g., The protocol minimum link MTU),\n   disabling IP fragmentation,\
    \ and ensuring that the transport protocol\n   in use adapts its segment size\
    \ to the MTU.  Other protocols may\n   deploy a sufficiently reliable PMTU discovery\
    \ mechanism (e.g.,\n   PLPMTUD).\n   UDP applications SHOULD abide by the recommendations\
    \ stated in\n   Section 3.2 of [RFC8085].\n"
- title: 6.2.  For System Developers
  contents:
  - "6.2.  For System Developers\n   Software libraries SHOULD include provision for\
    \ PLPMTUD for each\n   supported transport protocol.\n"
- title: 6.3.  For Middlebox Developers
  contents:
  - "6.3.  For Middlebox Developers\n   Middleboxes, which are systems that \"transparently\"\
    \ perform policy\n   functions on passing traffic but do not participate in the\
    \ routing\n   system, should process IP fragments in a manner that is consistent\n\
    \   with [RFC0791] and [RFC8200].  In many cases, middleboxes must\n   maintain\
    \ state in order to achieve this goal.\n   Price and performance considerations\
    \ frequently motivate network\n   operators to deploy stateless middleboxes. \
    \ These stateless\n   middleboxes may perform suboptimally, process IP fragments\
    \ in a\n   manner that is not compliant with RFC 791 or RFC 8200, or even\n  \
    \ discard IP fragments completely.  Such behaviors are NOT RECOMMENDED.\n   If\
    \ a middlebox implements nonstandard behavior with respect to IP\n   fragmentation,\
    \ then that behavior MUST be clearly documented.\n"
- title: 6.4.  For ECMP, LAG, and Load-Balancer Developers And Operators
  contents:
  - "6.4.  For ECMP, LAG, and Load-Balancer Developers And Operators\n   In their\
    \ default configuration, when the IPv6 Flow Label is not equal\n   to zero, IPv6\
    \ devices that implement Equal-Cost Multipath (ECMP)\n   Routing as described\
    \ in OSPF [RFC2328] and other routing protocols,\n   Link Aggregation Grouping\
    \ (LAG) [RFC7424], or other load-distribution\n   technologies SHOULD accept only\
    \ the following fields as input to\n   their hash algorithm:\n   *  IP Source\
    \ Address.\n   *  IP Destination Address.\n   *  Flow Label.\n   Operators SHOULD\
    \ deploy these devices in their default configuration.\n   These recommendations\
    \ are similar to those presented in [RFC6438] and\n   [RFC7098].  They differ\
    \ in that they specify a default configuration.\n"
- title: 6.5.  For Network Operators
  contents:
  - "6.5.  For Network Operators\n   Operators MUST ensure proper PMTUD operation\
    \ in their network,\n   including making sure the network generates PTB packets\
    \ when dropping\n   packets too large compared to outgoing interface MTU.  However,\n\
    \   implementations MAY rate limit the generation of ICMP messages per\n   [RFC1812]\
    \ and [RFC4443].\n   As per RFC 4890, network operators MUST NOT filter ICMPv6\
    \ PTB\n   messages unless they are known to be forged or otherwise\n   illegitimate.\
    \  As stated in Section 3.8, filtering ICMPv6 PTB packets\n   causes PMTUD to\
    \ fail.  Many upper-layer protocols rely on PMTUD.\n   As per RFC 8200, network\
    \ operators MUST NOT deploy IPv6 links whose\n   MTU is less than 1280 octets.\n\
    \   Network operators SHOULD NOT filter IP fragments if they are known to\n  \
    \ have originated at a domain name server or be destined for a domain\n   name\
    \ server.  This is because domain name services are critical to\n   operation\
    \ of the Internet.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document mitigates some of the security\
    \ considerations\n   associated with IP fragmentation by discouraging its use.\
    \  It does\n   not introduce any new security vulnerabilities, because it does\
    \ not\n   introduce any new alternatives to IP fragmentation.  Instead, it\n \
    \  recommends well-understood alternatives.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              DOI 10.17487/RFC0768, August 1980,\n        \
    \      <https://www.rfc-editor.org/info/rfc768>.\n   [RFC0791]  Postel, J., \"\
    Internet Protocol\", STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September\
    \ 1981,\n              <https://www.rfc-editor.org/info/rfc791>.\n   [RFC0792]\
    \  Postel, J., \"Internet Control Message Protocol\", STD 5,\n              RFC\
    \ 792, DOI 10.17487/RFC0792, September 1981,\n              <https://www.rfc-editor.org/info/rfc792>.\n\
    \   [RFC0793]  Postel, J., \"Transmission Control Protocol\", STD 7,\n       \
    \       RFC 793, DOI 10.17487/RFC0793, September 1981,\n              <https://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n        \
    \      specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n            \
    \  November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC1191]  Mogul,\
    \ J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n              DOI 10.17487/RFC1191,\
    \ November 1990,\n              <https://www.rfc-editor.org/info/rfc1191>.\n \
    \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n         \
    \     Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4443]\
    \  Conta, A., Deering, S., and M. Gupta, Ed., \"Internet\n              Control\
    \ Message Protocol (ICMPv6) for the Internet\n              Protocol Version 6\
    \ (IPv6) Specification\", STD 89,\n              RFC 4443, DOI 10.17487/RFC4443,\
    \ March 2006,\n              <https://www.rfc-editor.org/info/rfc4443>.\n   [RFC4821]\
    \  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n              Discovery\"\
    , RFC 4821, DOI 10.17487/RFC4821, March 2007,\n              <https://www.rfc-editor.org/info/rfc4821>.\n\
    \   [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme,\n     \
    \         \"IPv6 Flow Label Specification\", RFC 6437,\n              DOI 10.17487/RFC6437,\
    \ November 2011,\n              <https://www.rfc-editor.org/info/rfc6437>.\n \
    \  [RFC6438]  Carpenter, B. and S. Amante, \"Using the IPv6 Flow Label\n     \
    \         for Equal Cost Multipath Routing and Link Aggregation in\n         \
    \     Tunnels\", RFC 6438, DOI 10.17487/RFC6438, November 2011,\n            \
    \  <https://www.rfc-editor.org/info/rfc6438>.\n   [RFC8085]  Eggert, L., Fairhurst,\
    \ G., and G. Shepherd, \"UDP Usage\n              Guidelines\", BCP 145, RFC 8085,\
    \ DOI 10.17487/RFC8085,\n              March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8201]  McCann, J., Deering,\
    \ S., Mogul, J., and R. Hinden, Ed.,\n              \"Path MTU Discovery for IP\
    \ version 6\", STD 87, RFC 8201,\n              DOI 10.17487/RFC8201, July 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8201>.\n   [RFC8899]  Fairhurst,\
    \ G., Jones, T., T\xFCxen, M., R\xFCngeler, I., and T.\n              V\xF6lker,\
    \ \"Packetization Layer Path MTU Discovery for\n              Datagram Transports\"\
    , RFC 8899, DOI 10.17487/RFC8899,\n              September 2020, <https://www.rfc-editor.org/info/rfc8899>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Damas]    Damas, J. and G. Huston, \"Measuring\
    \ ATR\", April 2018,\n              <http://www.potaroo.net/ispcol/2018-04/atr.html>.\n\
    \   [Huston]   Huston, G., \"IPv6, Large UDP Packets and the DNS\", August\n \
    \             2017,\n              <http://www.potaroo.net/ispcol/2017-08/xtn-hdrs.html>.\n\
    \   [Kent]     Kent, C. and J. Mogul, \"Fragmentation Considered Harmful\",\n\
    \              SIGCOMM '87: Proceedings of the ACM workshop on Frontiers\n   \
    \           in computer communications technology,\n              DOI 10.1145/55482.55524,\
    \ August 1987,\n              <http://www.hpl.hp.com/techreports/Compaq-DEC/WRL-\n\
    \              87-3.pdf>.\n   [Ptacek1998]\n              Ptacek, T. H. and T.\
    \ N. Newsham, \"Insertion, Evasion and\n              Denial of Service: Eluding\
    \ Network Intrusion Detection\",\n              1998,\n              <http://www.aciri.org/vern/Ptacek-Newsham-Evasion-98.ps>.\n\
    \   [RFC1122]  Braden, R., Ed., \"Requirements for Internet Hosts -\n        \
    \      Communication Layers\", STD 3, RFC 1122,\n              DOI 10.17487/RFC1122,\
    \ October 1989,\n              <https://www.rfc-editor.org/info/rfc1122>.\n  \
    \ [RFC1812]  Baker, F., Ed., \"Requirements for IP Version 4 Routers\",\n    \
    \          RFC 1812, DOI 10.17487/RFC1812, June 1995,\n              <https://www.rfc-editor.org/info/rfc1812>.\n\
    \   [RFC1858]  Ziemba, G., Reed, D., and P. Traina, \"Security\n             \
    \ Considerations for IP Fragment Filtering\", RFC 1858,\n              DOI 10.17487/RFC1858,\
    \ October 1995,\n              <https://www.rfc-editor.org/info/rfc1858>.\n  \
    \ [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n   \
    \           for IP version 6\", RFC 1981, DOI 10.17487/RFC1981, August\n     \
    \         1996, <https://www.rfc-editor.org/info/rfc1981>.\n   [RFC2003]  Perkins,\
    \ C., \"IP Encapsulation within IP\", RFC 2003,\n              DOI 10.17487/RFC2003,\
    \ October 1996,\n              <https://www.rfc-editor.org/info/rfc2003>.\n  \
    \ [RFC2328]  Moy, J., \"OSPF Version 2\", STD 54, RFC 2328,\n              DOI\
    \ 10.17487/RFC2328, April 1998,\n              <https://www.rfc-editor.org/info/rfc2328>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n        \
    \      December 1998, <https://www.rfc-editor.org/info/rfc2460>.\n   [RFC2473]\
    \  Conta, A. and S. Deering, \"Generic Packet Tunneling in\n              IPv6\
    \ Specification\", RFC 2473, DOI 10.17487/RFC2473,\n              December 1998,\
    \ <https://www.rfc-editor.org/info/rfc2473>.\n   [RFC2784]  Farinacci, D., Li,\
    \ T., Hanks, S., Meyer, D., and P.\n              Traina, \"Generic Routing Encapsulation\
    \ (GRE)\", RFC 2784,\n              DOI 10.17487/RFC2784, March 2000,\n      \
    \        <https://www.rfc-editor.org/info/rfc2784>.\n   [RFC3128]  Miller, I.,\
    \ \"Protection Against a Variant of the Tiny\n              Fragment Attack (RFC\
    \ 1858)\", RFC 3128,\n              DOI 10.17487/RFC3128, June 2001,\n       \
    \       <https://www.rfc-editor.org/info/rfc3128>.\n   [RFC4340]  Kohler, E.,\
    \ Handley, M., and S. Floyd, \"Datagram\n              Congestion Control Protocol\
    \ (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340, March 2006,\n     \
    \         <https://www.rfc-editor.org/info/rfc4340>.\n   [RFC4459]  Savola, P.,\
    \ \"MTU and Fragmentation Issues with In-the-\n              Network Tunneling\"\
    , RFC 4459, DOI 10.17487/RFC4459, April\n              2006, <https://www.rfc-editor.org/info/rfc4459>.\n\
    \   [RFC4890]  Davies, E. and J. Mohacsi, \"Recommendations for Filtering\n  \
    \            ICMPv6 Messages in Firewalls\", RFC 4890,\n              DOI 10.17487/RFC4890,\
    \ May 2007,\n              <https://www.rfc-editor.org/info/rfc4890>.\n   [RFC4960]\
    \  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n             \
    \ RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <https://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC4963]  Heffner, J., Mathis, M., and B. Chandler, \"IPv4 Reassembly\n \
    \             Errors at High Data Rates\", RFC 4963,\n              DOI 10.17487/RFC4963,\
    \ July 2007,\n              <https://www.rfc-editor.org/info/rfc4963>.\n   [RFC5326]\
    \  Ramadas, M., Burleigh, S., and S. Farrell, \"Licklider\n              Transmission\
    \ Protocol - Specification\", RFC 5326,\n              DOI 10.17487/RFC5326, September\
    \ 2008,\n              <https://www.rfc-editor.org/info/rfc5326>.\n   [RFC5340]\
    \  Coltun, R., Ferguson, D., Moy, J., and A. Lindem, \"OSPF\n              for\
    \ IPv6\", RFC 5340, DOI 10.17487/RFC5340, July 2008,\n              <https://www.rfc-editor.org/info/rfc5340>.\n\
    \   [RFC5722]  Krishnan, S., \"Handling of Overlapping IPv6 Fragments\",\n   \
    \           RFC 5722, DOI 10.17487/RFC5722, December 2009,\n              <https://www.rfc-editor.org/info/rfc5722>.\n\
    \   [RFC5927]  Gont, F., \"ICMP Attacks against TCP\", RFC 5927,\n           \
    \   DOI 10.17487/RFC5927, July 2010,\n              <https://www.rfc-editor.org/info/rfc5927>.\n\
    \   [RFC6346]  Bush, R., Ed., \"The Address plus Port (A+P) Approach to\n    \
    \          the IPv4 Address Shortage\", RFC 6346,\n              DOI 10.17487/RFC6346,\
    \ August 2011,\n              <https://www.rfc-editor.org/info/rfc6346>.\n   [RFC6888]\
    \  Perreault, S., Ed., Yamagata, I., Miyakawa, S., Nakagawa,\n              A.,\
    \ and H. Ashida, \"Common Requirements for Carrier-Grade\n              NATs (CGNs)\"\
    , BCP 127, RFC 6888, DOI 10.17487/RFC6888,\n              April 2013, <https://www.rfc-editor.org/info/rfc6888>.\n\
    \   [RFC7098]  Carpenter, B., Jiang, S., and W. Tarreau, \"Using the IPv6\n  \
    \            Flow Label for Load Balancing in Server Farms\", RFC 7098,\n    \
    \          DOI 10.17487/RFC7098, January 2014,\n              <https://www.rfc-editor.org/info/rfc7098>.\n\
    \   [RFC7424]  Krishnan, R., Yong, L., Ghanwani, A., So, N., and B.\n        \
    \      Khasnabish, \"Mechanisms for Optimizing Link Aggregation\n            \
    \  Group (LAG) and Equal-Cost Multipath (ECMP) Component Link\n              Utilization\
    \ in Networks\", RFC 7424, DOI 10.17487/RFC7424,\n              January 2015,\
    \ <https://www.rfc-editor.org/info/rfc7424>.\n   [RFC7588]  Bonica, R., Pignataro,\
    \ C., and J. Touch, \"A Widely\n              Deployed Solution to the Generic\
    \ Routing Encapsulation\n              (GRE) Fragmentation Problem\", RFC 7588,\n\
    \              DOI 10.17487/RFC7588, July 2015,\n              <https://www.rfc-editor.org/info/rfc7588>.\n\
    \   [RFC7676]  Pignataro, C., Bonica, R., and S. Krishnan, \"IPv6 Support\n  \
    \            for Generic Routing Encapsulation (GRE)\", RFC 7676,\n          \
    \    DOI 10.17487/RFC7676, October 2015,\n              <https://www.rfc-editor.org/info/rfc7676>.\n\
    \   [RFC7739]  Gont, F., \"Security Implications of Predictable Fragment\n   \
    \           Identification Values\", RFC 7739, DOI 10.17487/RFC7739,\n       \
    \       February 2016, <https://www.rfc-editor.org/info/rfc7739>.\n   [RFC7872]\
    \  Gont, F., Linkova, J., Chown, T., and W. Liu,\n              \"Observations\
    \ on the Dropping of Packets with IPv6\n              Extension Headers in the\
    \ Real World\", RFC 7872,\n              DOI 10.17487/RFC7872, June 2016,\n  \
    \            <https://www.rfc-editor.org/info/rfc7872>.\n   [RFC8086]  Yong, L.,\
    \ Ed., Crabbe, E., Xu, X., and T. Herbert, \"GRE-\n              in-UDP Encapsulation\"\
    , RFC 8086, DOI 10.17487/RFC8086,\n              March 2017, <https://www.rfc-editor.org/info/rfc8086>.\n\
    \   [TUNNELS]  Touch, J. and M. Townsley, \"IP Tunnels in the Internet\n     \
    \         Architecture\", Work in Progress, Internet-Draft, draft-\n         \
    \     ietf-intarea-tunnels-10, 12 September 2019,\n              <https://tools.ietf.org/html/draft-ietf-intarea-tunnels-\n\
    \              10>.\n   [UDP-OPTIONS]\n              Touch, J., \"Transport Options\
    \ for UDP\", Work in Progress,\n              Internet-Draft, draft-ietf-tsvwg-udp-options-08,\
    \ 12\n              September 2019, <https://tools.ietf.org/html/draft-ietf-\n\
    \              tsvwg-udp-options-08>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Mikael Abrahamsson, Brian Carpenter, Silambu Chelvan,\n\
    \   Lorenzo Colitti, Gorry Fairhurst, Joel Halpern, Mike Heard, Tom\n   Herbert,\
    \ Tatuya Jinmei, Suresh Krishnan, Jen Linkova, Paolo Lucente,\n   Manoj Nayak,\
    \ Eric Nygren, Fred Templin, and Joe Touch for their\n   comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ron Bonica\n   Juniper Networks\n   2251 Corporate Park\
    \ Drive\n   Herndon, Virginia 20171\n   United States of America\n   Email: rbonica@juniper.net\n\
    \   Fred Baker\n   Unaffiliated\n   Santa Barbara, California 93117\n   United\
    \ States of America\n   Email: FredBaker.IETF@gmail.com\n   Geoff Huston\n   APNIC\n\
    \   6 Cordelia St\n   Brisbane 4101 QLD\n   Australia\n   Email: gih@apnic.net\n\
    \   Robert M. Hinden\n   Check Point Software\n   959 Skyway Road\n   San Carlos,\
    \ California 94070\n   United States of America\n   Email: bob.hinden@gmail.com\n\
    \   Ole Troan\n   Cisco\n   Philip Pedersens vei 1\n   N-1366 Lysaker\n   Norway\n\
    \   Email: ot@cisco.com\n   Fernando Gont\n   SI6 Networks\n   Evaristo Carriego\
    \ 2644\n   Haedo\n   Provincia de Buenos Aires\n"
