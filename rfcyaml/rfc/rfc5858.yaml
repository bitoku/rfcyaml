- contents:
  - '    IPsec Extensions to Support Robust Header Compression over IPsec

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Integrating Robust Header Compression (ROHC) with IPsec (ROHCoIPsec)\n
    \  offers the combined benefits of IP security services and efficient\n   bandwidth
    utilization.  However, in order to integrate ROHC with\n   IPsec, extensions to
    the Security Policy Database (SPD) and Security\n   Association Database (SAD)
    are required.  This document describes the\n   IPsec extensions required to support
    ROHCoIPsec.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5858.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Extensions to IPsec Databases ...................................3\n      3.1.
    Security Policy Database (SPD) .............................4\n      3.2. Security
    Association Database (SAD) ........................5\n   4. Extensions to IPsec
    Processing ..................................6\n      4.1. Identification of Header-Compressed
    Traffic ................6\n      4.2. Verifying the Integrity of Decompressed
    Packet Headers .....6\n           4.2.1. ICV Computation and Integrity Verification
    ..........7\n      4.3. ROHC Segmentation and IPsec Tunnel MTU .....................8\n
    \     4.4. Nested IPComp and ROHCoIPsec Processing ....................9\n   5.
    Security Considerations ........................................10\n   6. IANA
    Considerations ............................................10\n   7. Acknowledgments
    ................................................11\n   Appendix A. ASN.1 Representation
    for ROHCoIPsec ...................12\n   8. References .....................................................14\n
    \     8.1. Normative References ......................................14\n      8.2.
    Informative References ....................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Using IPsec ([IPSEC]) protection offers various security
    services for\n   IP traffic.  However, these benefits come at the cost of additional\n
    \  packet headers, which increase packet overhead.  By compressing the\n   inner
    headers of these packets, the integration of Robust Header\n   Compression (ROHC,
    [ROHC]) with IPsec (ROHCoIPsec, [ROHCOIPSEC]) can\n   reduce the packet overhead
    associated with IPsec-protected flows.\n   IPsec-protected traffic is carried
    over Security Associations (SAs),\n   whose parameters are negotiated on a case-by-case
    basis.  The\n   Security Policy Database (SPD) specifies the services that are
    to be\n   offered to IP datagrams, and the parameters associated with SAs that\n
    \  have been established are stored in the Security Association Database\n   (SAD).
    \ For ROHCoIPsec, various extensions to the SPD and SAD that\n   incorporate ROHC-relevant
    parameters are required.\n   In addition, three extensions to IPsec processing
    are required.\n   First, a mechanism for identifying ROHC packets must be defined.\n
    \  Second, a mechanism to ensure the integrity of the decompressed\n   packet
    is needed.  Finally, the order of the inbound and outbound\n   processing must
    be enumerated when nesting IP Compression (IPComp\n   [IPCOMP]), ROHC, and IPsec
    processing.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [BRA97].\n"
  title: 2.  Terminology
- contents:
  - "3.  Extensions to IPsec Databases\n   The following subsections specify extensions
    to the SPD and the SAD\n   that MUST be supported for ROHCoIPsec.  The ROHCoIPsec
    fields in the\n   SPD are used to populate the ROHCoIPsec parameters in the SAD
    during\n   the initialization or rekey of a child SA.\n   It is noted that these
    extensions do not have any implications on\n   existing SPD fields or SAD parameters.
    \ Therefore, a ROHCoIPsec\n   implementation is backwards-compatible with an IPsec
    implementation\n   that does not support header compression.\n   Appendix A provides
    an example ASN.1 representation of an SPD that is\n   extended to support ROHC.\n"
  - contents:
    - "3.1.  Security Policy Database (SPD)\n   In general, the SPD is responsible
      for specifying the security\n   services that are offered to IP datagrams.  Entries
      in the SPD\n   specify how to derive the corresponding values for SAD entries.
      \ To\n   support ROHC, the SPD is extended to include per-channel ROHC\n   parameters.
      \ Together, the existing IPsec SPD parameters and the ROHC\n   parameters will
      dictate the security and header compression services\n   that are provided to
      packets.\n   The fields contained within each SPD entry are defined in RFC 4301\n
      \  [IPSEC], Section 4.4.1.2.  To support ROHC, several processing info\n   fields
      are added to the SPD; these fields contain information\n   regarding the ROHC
      profiles and channel parameters supported by the\n   local ROHC instance.\n
      \  If the processing action associated with the selector sets is\n   PROTECT,
      then the processing info must be extended with the following\n   ROHC channel
      parameters:\n      MAX_CID: This field indicates the highest context ID that
      will be\n      decompressed by the local decompressor.  MAX_CID MUST be at least\n
      \     0 and at most 16383 (the value 0 implies having one context).\n      MRRU:
      The MRRU parameter indicates the size of the largest\n      reconstructed unit
      (in octets) that the local decompressor is\n      expected to reassemble from
      ROHC segments.  This size includes the\n      Cyclic Redundancy Check (CRC)
      and the ROHC Integrity Check Value\n      (ICV).  NOTE: Since in-order delivery
      of ROHC packets cannot be\n      guaranteed, the MRRU parameter SHOULD be set
      to 0 (as stated in\n      Section 5.2.5.1 of RFC 5795 [ROHC] and Section 6.1
      of RFC 5225\n      [ROHCV2]), which indicates that no segment headers are allowed
      on\n      the ROHCoIPsec channel.\n      PROFILES: This field is a list of ROHC
      profiles supported by the\n      local decompressor.  Possible values for this
      list are contained\n      in the \"RObust Header Compression (ROHC) Profile
      Identifiers\"\n      registry [ROHCPROF].\n   In addition to these ROHC channel
      parameters, a ROHC integrity\n   algorithm and a ROHC ICV Length field MUST
      be included within the\n   SPD:\n      ROHC INTEGRITY ALGORITHM: This field
      is a list of integrity\n      algorithms supported by the ROHCoIPsec instance.
      \ This will be\n      used by the ROHC process to ensure that packet headers
      are\n      properly decompressed (see Section 4.2).  Authentication\n      algorithms
      that MUST be supported are specified in the\n      \"Authentication Algorithms\"
      table in Section 3.1.1 (\"ESP\n      Encryption and Authentication Algorithms\")
      of RFC 4835\n      [CRYPTO-ALG] (or its successor).\n      ROHC ICV LENGTH:
      This field specifies the length of the ICV that\n      is used in conjunction
      with the ROHC integrity algorithm.\n   Several other ROHC channel parameters
      are omitted from the SPD,\n   because they are set implicitly.  The omitted
      channel parameters are\n   LARGE_CIDS and FEEDBACK_FOR.  The LARGE_CIDS channel
      parameter MUST\n   be set based on the value of MAX_CID (i.e., if MAX_CID is
      <= 15,\n   LARGE_CIDS is assumed to be 0).  Finally, the ROHC FEEDBACK_FOR\n
      \  channel parameter MUST be set to the ROHC channel associated with the\n   SA
      in the reverse direction.  If an SA in the reverse direction does\n   not exist,
      the FEEDBACK_FOR channel parameter is not set, and ROHC\n   MUST NOT operate
      in bi-directional Mode.\n"
    title: 3.1.  Security Policy Database (SPD)
  - contents:
    - "3.2.  Security Association Database (SAD)\n   Each entry within the SAD defines
      the parameters associated with each\n   established SA.  Unless the \"populate
      from packet\" (PFP) flag is\n   asserted for a particular field, SAD entries
      are determined by the\n   corresponding SPD entries during the creation of the
      SA.\n   The data items contained within the SAD are defined in RFC 4301\n   [IPSEC],
      Section 4.4.2.1.  To support ROHC, the SAD must include a\n   \"ROHC Data Item\";
      this data item contains parameters used by ROHC\n   instance.  The ROHC Data
      Item exists for both inbound and outbound\n   SAs.\n   The ROHC Data Item includes
      the ROHC channel parameters for the SA.\n   These channel parameters (i.e.,
      MAX_CID, PROFILES, MRRU) are\n   enumerated above in Section 3.1.  For inbound
      SAs, the ROHC Data Item\n   MUST specify the ROHC channel parameters that are
      used by the local\n   decompressor instance; conversely, for outbound SAs, the
      ROHC Data\n   Item MUST specify the ROHC channel parameters that are used by
      local\n   compressor instance.\n   In addition to these ROHC channel parameters,
      the ROHC Data Item for\n   both inbound and outbound SAs MUST include three
      additional\n   parameters.  Specifically, these parameters store the integrity\n
      \  algorithm, the algorithm's respective key, and the ICV length that is\n   used
      by the ROHC process (see Section 3.2).  The integrity algorithm\n   and its
      associated key are used to calculate a ROHC ICV of the\n   specified length;
      this ICV is used to verify the packet headers post-\n   decompression.\n   Finally,
      for inbound SAs, the ROHC Data Item MUST include a\n   FEEDBACK_FOR parameter.
      \ The parameter is a reference to a ROHC\n   channel in the opposite direction
      (i.e., the outbound SA) between the\n   same compression endpoints.  A ROHC
      channel associated with an\n   inbound SA and a ROHC channel associated with
      an outbound SA MAY be\n   coupled to form a bi-directional ROHC channel as defined
      in Sections\n   6.1 and 6.2 in RFC 3759 [ROHC-TERM].\n   \"ROHC Data Item\"
      values MAY be initialized manually (i.e.,\n   administratively configured for
      manual SAs), or initialized via a key\n   exchange protocol (e.g., IKEv2 [IKEV2])
      that has been extended to\n   support the signaling of ROHC parameters [IKE-ROHC].\n"
    title: 3.2.  Security Association Database (SAD)
  title: 3.  Extensions to IPsec Databases
- contents:
  - '4.  Extensions to IPsec Processing

    '
  - contents:
    - "4.1.  Identification of Header-Compressed Traffic\n   A \"ROHC\" protocol identifier
      is used to identify header-compressed\n   traffic on a ROHC-enabled SA.  If
      an outbound packet has a compressed\n   header, the Next Header field of the
      security protocol header (e.g.,\n   Authentication Header (AH) [AH], Encapsulating
      Security Payload (ESP)\n   [ESP]) MUST be set to the \"ROHC\" protocol identifier.
      \ If the packet\n   header has not been compressed by ROHC, the Next Header
      field does\n   not contain the \"ROHC\" protocol identifier.  Conversely, for
      an\n   inbound packet, the value of the security protocol Next Header field\n
      \  MUST be checked to determine if the packet includes a ROHC header, in\n   order
      to determine if it requires ROHC decompression.\n   Use of the \"ROHC\" protocol
      identifier for purposes other than\n   ROHCoIPsec is currently not defined.
      \ Future protocols that make use\n   of the allocation (e.g., other applications
      of ROHC in multi-hop\n   environments) require specification of the logical
      compression\n   channel between the ROHC compressor and decompressor.  In addition,\n
      \  these specifications will require the investigation of the security\n   considerations
      associated with use of the \"ROHC\" protocol identifier\n   outside the context
      of the Next Header field of security protocol\n   headers.\n"
    title: 4.1.  Identification of Header-Compressed Traffic
  - contents:
    - "4.2.  Verifying the Integrity of Decompressed Packet Headers\n   As documented
      in Section 6.1.4 of [ROHCOIPSEC], ROHC is inherently a\n   lossy compression
      algorithm: the consequences of significant packet\n   reordering or loss between
      ROHC peers may include undetected\n   decompression failures, where erroneous
      packets are forwarded into\n   the protected domain.\n   To ensure that a decompressed
      header is identical to the original\n   header, ROHCoIPsec MAY use an additional
      integrity algorithm (and\n   respective key) to compute a second Integrity Check
      Value (ICV).\n   This ROHC ICV MUST be computed over the uncompressed IP header,
      as\n   well at the higher-layer headers and the packet payload.  When\n   computed,
      the ICV is appended to the ROHC-compressed packet.  At the\n   decompressor,
      the decompressed packet (including the uncompressed IP\n   header, higher-layer
      headers, and packet payload; but not including\n   the authentication data)
      will be used with the integrity algorithm\n   (and its respective key) to compute
      a value that will be compared to\n   the appended ICV.  If these values are
      not identical, the\n   decompressed packet MUST be dropped.\n   Figure 1 illustrates
      the composition of a ROHCoIPsec-processed IPv4\n   packet.  In the example,
      TCP/IP compression is applied, and the\n   packet is processed with tunnel mode
      ESP.\n                BEFORE COMPRESSION AND APPLICATION OF ESP\n                ----------------------------\n
      \         IPv4  |orig IP hdr  |     |      |\n                |(any options)|
      TCP | Data |\n                ----------------------------\n                 AFTER
      ROHCOIPSEC COMPRESSION AND APPLICATION OF ESP\n               ------------------------------------------------------\n
      \        IPv4  | new IP hdr  |     | Cmpr. |    | ROHC | ESP   | ESP|\n               |(any
      options)| ESP | Hdr.  |Data| ICV  |Trailer| ICV|\n               ------------------------------------------------------\n
      \  Figure 1.  Example of a ROHCoIPsec-Processed Packet\n   Note: At the decompressor,
      the ROHC ICV field is not included in the\n   calculation of the ROHC ICV.\n"
    - contents:
      - "4.2.1.  ICV Computation and Integrity Verification\n   In order to correctly
        verify the integrity of the decompressed\n   packets, the processing steps
        for ROHCoIPsec MUST be implemented in a\n   specific order, as given below.\n
        \  For outbound packets that are processed by ROHC and are IPsec-\n   protected:\n
        \  o  Compute an ICV for the uncompressed packet with the negotiated\n      (ROHC)
        integrity algorithm and its respective key.\n   o  Compress the packet headers
        (as specified by the ROHC process).\n   o  Append the ICV to the compressed
        packet.\n   o  Apply AH or ESP processing to the packet, as specified in the\n
        \     appropriate SAD entry.\n   For inbound packets that are to be decompressed
        by ROHC:\n   o  Apply AH or ESP processing, as specified in the appropriate
        SAD\n      entry.\n   o  Remove the ICV from the packet.\n   o  Decompress
        the packet header(s).\n   o  Compute an ICV for the decompressed packet with
        the negotiated\n      (ROHC) integrity algorithm and its respective key.\n
        \  o  Compare the computed ICV to the original ICV calculated at the\n      compressor:
        if these two values differ, the packet MUST be\n      dropped; otherwise,
        resume IPsec processing.\n"
      title: 4.2.1.  ICV Computation and Integrity Verification
    title: 4.2.  Verifying the Integrity of Decompressed Packet Headers
  - contents:
    - "4.3.  ROHC Segmentation and IPsec Tunnel MTU\n   In certain scenarios, a ROHCoIPsec-processed
      packet may exceed the\n   size of the IPsec tunnel MTU.  RFC 4301 [IPSEC] currently
      stipulates\n   the following for outbound traffic that exceeds the SA Path MTU\n
      \  (PMTU):\n       Case 1: Original (cleartext) packet is IPv4 and has the Don't\n
      \              Fragment (DF) bit set.  The implementation should\n               discard
      the packet and send a PMTU ICMP message.\n       Case 2: Original (cleartext)
      packet is IPv4 and has the DF\n               bit clear.  The implementation
      should fragment (before or\n               after encryption per its configuration)
      and then forward\n               the fragments.  It should not send a PMTU ICMP
      message.\n       Case 3: Original (cleartext) packet is IPv6.  The implementation\n
      \              should discard the packet and send a PMTU ICMP message.\n   For
      the ROHCoIPsec processing model, there is one minor change to the\n   procedure
      stated above.  This change applies to pre-encryption\n   fragmentation for Case
      2.  Since current ROHC compression profiles do\n   not support compression of
      IP packet fragments, pre-encryption\n   fragmentation MUST NOT occur before
      ROHC processing.\n   If the compressed packet exceeds the SA PMTU, and the MRRU
      is non-\n   zero, ROHC segmentation MAY be used to divide the packet, where
      each\n   segment conforms to the tunnel MTU.  ROHC segmentation MUST occur\n
      \  before AH or ESP processing.  Because in-order delivery of ROHC\n   segments
      is not guaranteed, the use of ROHC segmentation is not\n   recommended.\n   If
      segmentation is applied, the process MUST account for the\n   additional overhead
      imposed by the IPsec process (e.g., AH or ESP\n   overhead, crypto synchronization
      data, the additional IP header,\n   etc.) such that the final IPsec-processed
      segments are less than the\n   tunnel MTU.  After segmentation, each ROHC segment
      is consecutively\n   processed by the appropriate security protocol (e.g., AH,
      ESP)\n   instantiated on the ROHC-enabled SA.  Since ROHC segments are\n   processed
      consecutively, the associated AH/ESP sequence number MUST\n   be incremented
      by one for each segment transmitted over the ROHC\n   channel.  As such, after
      all ROHC segments receive AH/ESP processing,\n   these segments can be identified
      (at the remote IPsec implementation)\n   by a range of contiguous AH/ESP sequence
      numbers.\n   For channels where the MRRU is non-zero, the ROHCoIPsec decompressor\n
      \  MUST re-assemble the ROHC segments that are received.  To accomplish\n   this,
      the decompressor MUST identify the ROHC segments (as documented\n   in Section
      5.2 of RFC 5795 [ROHC]), and attempt reconstruction using\n   the ROHC segmentation
      protocol (Section 5.2.5 of RFC 5795 [ROHC]).\n   To assist the reconstruction
      process, the AH/ESP sequence number\n   SHOULD be used to identify segments
      that may have been subject to\n   reordering.  If reconstruction fails, the
      packet MUST be discarded.\n   As stated in Section 3.2.1, if the ROHC integrity
      algorithm is used\n   to verify the decompression of packet headers, this ICV
      is appended\n   to the compressed packet.  If ROHC segmentation is performed,
      the\n   segmentation algorithm is executed on the compressed packet and the\n
      \  appended ICV.  Note that the ICV is not appended to each ROHC\n   segment.\n
      \  Under certain circumstances, IPsec implementations will not process\n   (or
      receive) unprotected ICMP messages, or they will not have a Path\n   MTU estimated
      value.  In these cases, the IPsec implementation SHOULD\n   NOT attempt to segment
      the ROHC-compressed packet, as it does not\n   have full insight into the path
      MTU in the unprotected domain.\n"
    title: 4.3.  ROHC Segmentation and IPsec Tunnel MTU
  - contents:
    - "4.4.  Nested IPComp and ROHCoIPsec Processing\n   IPComp ([IPCOMP]) is another
      mechanism that can be implemented to\n   reduce the size of an IP datagram.
      \ If IPComp and ROHCoIPsec are\n   implemented in a nested fashion, the following
      steps MUST be followed\n   for outbound and inbound packets.\n   For outbound
      packets that are to be processed by IPComp and ROHC:\n   o  The ICV is computed
      for the uncompressed packet, and the\n      appropriate ROHC compression profile
      is applied to the packet.\n   o  IPComp is applied, and the packet is sent to
      the IPsec process.\n   o  The security protocol is applied to the packet.\n
      \  Conversely, for inbound packets that are to be both ROHC- and IPComp-\n   decompressed:\n
      \  o  A packet received on a ROHC-enabled SA is IPsec-processed.\n   o  The
      datagram is decompressed based on the appropriate IPComp\n      algorithm.\n
      \  o  The packet is sent to the ROHC module for header decompression and\n      integrity
      verification.\n"
    title: 4.4.  Nested IPComp and ROHCoIPsec Processing
  title: 4.  Extensions to IPsec Processing
- contents:
  - "5.  Security Considerations\n   A ROHCoIPsec implementer should consider the
    strength of protection\n   provided by the integrity check algorithm used to verify
    decompressed\n   headers.  Failure to implement a strong integrity check algorithm\n
    \  increases the probability for an invalidly decompressed packet to be\n   forwarded
    by a ROHCoIPsec device into a protected domain.\n   The implementation of ROHCoIPsec
    may increase the susceptibility for\n   traffic flow analysis, where an attacker
    can identify new traffic\n   flows by monitoring the relative size of the encrypted
    packets (i.e.,\n   a group of \"long\" packets, followed by a long series of \"short\"\n
    \  packets may indicate a new flow for some ROHCoIPsec implementations).\n   To
    mitigate this concern, ROHC padding mechanisms may be used to\n   arbitrarily
    add padding to transmitted packets to randomize packet\n   sizes.  This technique,
    however, reduces the overall efficiency\n   benefit offered by header compression.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has allocated the value 142 to \"ROHC\" within
    the \"Protocol\n   Numbers\" registry [PROTOCOL].  This value will be used to
    indicate\n   that the next-level protocol header is a ROHC header.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   The authors would like to thank Sean O'Keeffe, James
    Kohler, Linda\n   Noone of the Department of Defense, and Rich Espy of OPnet for
    their\n   contributions and support for developing this document.\n   The authors
    would also like to thank Yoav Nir and Robert A Stangarone\n   Jr.: both served
    as committed document reviewers for this\n   specification.\n   Finally, the authors
    would like to thank the following for their\n   numerous reviews and comments
    to this document:\n   o  Magnus Westerlund\n   o  Stephen Kent\n   o  Lars-Erik
    Jonsson\n   o  Carl Knutsson\n   o  Pasi Eronen\n   o  Jonah Pezeshki\n   o  Tero
    Kivinen\n   o  Joseph Touch\n   o  Rohan Jasani\n   o  Elwyn Davies\n   o  Bert
    Wijnen\n"
  title: 7.  Acknowledgments
- contents:
  - "Appendix A.  ASN.1 Representation for ROHCoIPsec\n   This appendix is included
    as an additional way to describe the\n   ROHCoIPsec parameters that are included
    in the IPsec SPD.  It uses\n   portions of the ASN.1 syntax provided in Appendix
    C of RFC 4301\n   [IPSEC].  In addition, several new structures are defined.\n
    \  This syntax has been successfully compiled.  However, it is merely\n   illustrative
    and need not be employed in an implementation to achieve\n   compliance.\n   The
    \"Processing\" data structure, defined in Appendix C of RFC 4301,\n   is augmented
    to include a ROHC parameters element as follows:\n         Processing ::= SEQUENCE
    {\n             extSeqNum   BOOLEAN, -- TRUE 64 bit counter, FALSE 32 bit\n             seqOverflow
    BOOLEAN, -- TRUE rekey, FALSE terminate & audit\n             fragCheck   BOOLEAN,
    -- TRUE stateful fragment checking,\n                                  -- FALSE
    no stateful fragment checking\n             lifetime    SALifetime,\n             spi
    \        ManualSPI,\n             algorithms  ProcessingAlgs,\n             tunnel
    \     TunnelOptions OPTIONAL,\n             rohc        [7] RohcParams OPTIONAL\n
    \        }\n   The following data structures describe these ROHC parameters:\n
    \      RohcParams ::= SEQUENCE {\n           rohcEnabled         BOOLEAN, --  TRUE,
    hdr compr. is enabled\n                                        -- FALSE, hdr compr.
    is disabled\n           maxCID              INTEGER (0..16383),\n           mrru
    \               INTEGER,\n           profiles            RohcProfiles,\n           rohcIntegAlg
    \       RohcIntegAlgs,\n           rohcIntegICVLength  INTEGER\n           }\n
    \      RohcProfiles ::= SET OF RohcProfile\n       RohcProfile ::= INTEGER {\n
    \          rohcv1-rtp           (1),\n           rohcv1-udp           (2),\n           rohcv1-esp
    \          (3),\n           rohcv1-ip            (4),\n           rohcv1-tcp           (6),\n
    \          rohcv1-rtp-udpLite   (7),\n           rohcv1-udpLite       (8),\n           rohcv2-rtp
    \        (257),\n           rohcv2-udp         (258),\n           rohcv2-esp         (259),\n
    \          rohcv2-ip          (260),\n           rohcv2-rtp-udpLite (263),\n           rohcv2-udpLite
    \    (264)\n           -- values taken from [ROHCPROF]\n           }\n       RohcIntegAlgs
    ::= SEQUENCE {\n           algorithm   RohcIntegAlgType,\n           parameters
    \ ANY -- DEFINED BY algorithm -- OPTIONAL }\n       RohcIntegAlgType ::= INTEGER
    {\n           none                    (0),\n           auth-HMAC-MD5-96        (1),\n
    \          auth-HMAC-SHA1-96       (2),\n           auth-DES-MAC            (3),\n
    \          auth-KPDK-MD5           (4),\n           auth-AES-XCBC-96        (5),\n
    \          auth-HMAC-MD5-128       (6),\n           auth-HMAC-SHA1-160      (7),\n
    \          auth-AES-CMAC-96        (8),\n           auth-AES-128-GMAC       (9),\n
    \          auth-AES-192-GMAC      (10),\n           auth-AES-256-GMAC      (11),\n
    \          auth-HMAC-SHA2-256-128 (12),\n           auth-HMAC-SHA2-384-192 (13),\n
    \          auth-HMAC-SHA2-512-256 (14)\n           --  tbd (15..65535)\n           --
    values taken from \"Transform Type 3 - Integrity\n           -- Algorithm Transform
    IDs\" at [IKEV2-PARA]\n           }\n"
  title: Appendix A.  ASN.1 Representation for ROHCoIPsec
- contents:
  - '8.  References

    '
  - "8.1.  Normative References\n   [IPSEC]       Kent, S. and K. Seo, \"Security
    Architecture for the\n                 Internet Protocol\", RFC 4301, December
    2005.\n   [ROHC]        Sandlund, K., Pelletier, G., and L-E. Jonsson, \"The\n
    \                RObust Header Compression (ROHC) Framework\", RFC 5795,\n                 March
    2010.\n   [IPCOMP]      Shacham, A., Monsour, B., Pereira, R., and M. Thomas,\n
    \                \"IP Payload Compression Protocol (IPComp)\", RFC 3173,\n                 September
    2001.\n   [BRA97]       Bradner, S., \"Key words for use in RFCs to Indicate\n
    \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [ROHCV2]
    \     Pelletier, G. and K. Sandlund, \"RObust Header\n                 Compression
    Version 2 (ROHCv2): Profiles for RTP, UDP,\n                 IP, ESP and UDP-Lite\",
    RFC 5225, April 2008.\n   [IKEV2]       Kaufman, C., \"Internet Key Exchange (IKEv2)
    Protocol\",\n                 RFC 4306, December 2005.\n   [IKE-ROHC]    Ertekin,
    E., Christou, C., Jasani, R., Kivinen, T., and\n                 C. Bormann, \"IKEv2
    Extensions to Support Robust Header\n                 Compression over IPsec\",
    RFC 5857, May 2010.\n   [AH]          Kent, S., \"IP Authentication Header\",
    RFC 4302,\n                 December 2005.\n   [ESP]         Kent, S., \"IP Encapsulating
    Security Payload (ESP)\",\n                 RFC 4303, December 2005.\n"
  - "8.2.  Informative References\n   [ROHCOIPSEC]  Ertekin, E., Jasani, R., Christou,
    C., and C. Bormann,\n                 \"Integration of Header Compression over
    IPsec Security\n                 Associations\", RFC 5856, May 2010.\n   [ROHCPROF]
    \   IANA, \"RObust Header Compression (ROHC) Profile\n                 Identifiers\",
    <http://www.iana.org>.\n   [CRYPTO-ALG]  Manral, V., \"Cryptographic Algorithm
    Implementation\n                 Requirements for Encapsulating Security Payload
    (ESP)\n                 and Authentication Header (AH)\", RFC 4835, April 2007.\n
    \  [ROHC-TERM]   Jonsson, L-E., \"Robust Header Compression (ROHC):\n                 Terminology
    and Channel Mapping Examples\", RFC 3759,\n                 April 2004.\n   [PROTOCOL]
    \   IANA, \"Assigned Internet Protocol Numbers\",\n                 <http://www.iana.org>.\n
    \  [IKEV2-PARA]  IANA, \"Internet Key Exchange Version 2 (IKEv2)\n                 Parameters\",
    <http://www.iana.org>.\n"
  title: References
- contents:
  - "Authors' Addresses\n   Emre Ertekin\n   Booz Allen Hamilton\n   5220 Pacific
    Concourse Drive, Suite 200\n   Los Angeles, CA  90045\n   US\n   EMail: ertekin_emre@bah.com\n
    \  Chris Christou\n   Booz Allen Hamilton\n   13200 Woodland Park Dr.\n   Herndon,
    VA  20171\n   US\n   EMail: christou_chris@bah.com\n   Carsten Bormann\n   Universitaet
    Bremen TZI\n   Postfach 330440\n   Bremen  D-28334\n   Germany\n   EMail: cabo@tzi.org\n"
  title: Authors' Addresses
