- title: __initial_text__
  contents:
  - '     The JavaScript Object Notation (JSON) Data Interchange Format

    '
- title: Abstract
  contents:
  - "Abstract\n   JavaScript Object Notation (JSON) is a lightweight, text-based,\n\
    \   language-independent data interchange format.  It was derived from\n   the\
    \ ECMAScript Programming Language Standard.  JSON defines a small\n   set of formatting\
    \ rules for the portable representation of structured\n   data.\n   This document\
    \ removes inconsistencies with other specifications of\n   JSON, repairs specification\
    \ errors, and offers experience-based\n   interoperability guidance.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7159.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \    1.2. Specifications of JSON .....................................4\n    \
    \  1.3. Introduction to This Revision ..............................4\n   2. JSON\
    \ Grammar ....................................................4\n   3. Values\
    \ ..........................................................5\n   4. Objects .........................................................6\n\
    \   5. Arrays ..........................................................6\n  \
    \ 6. Numbers .........................................................6\n   7.\
    \ Strings .........................................................8\n   8. String\
    \ and Character Issues .....................................9\n      8.1. Character\
    \ Encoding .........................................9\n      8.2. Unicode Characters\
    \ .........................................9\n      8.3. String Comparison ..........................................9\n\
    \   9. Parsers ........................................................10\n  \
    \ 10. Generators ....................................................10\n   11.\
    \ IANA Considerations ...........................................10\n   12. Security\
    \ Considerations .......................................11\n   13. Examples ......................................................12\n\
    \   14. Contributors ..................................................13\n  \
    \ 15. References ....................................................13\n    \
    \  15.1. Normative References .....................................13\n      15.2.\
    \ Informative References ...................................13\n   Appendix A.\
    \ Changes from RFC 4627 .................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   JavaScript Object Notation (JSON) is a text format for the\n\
    \   serialization of structured data.  It is derived from the object\n   literals\
    \ of JavaScript, as defined in the ECMAScript Programming\n   Language Standard,\
    \ Third Edition [ECMA-262].\n   JSON can represent four primitive types (strings,\
    \ numbers, booleans,\n   and null) and two structured types (objects and arrays).\n\
    \   A string is a sequence of zero or more Unicode characters [UNICODE].\n   Note\
    \ that this citation references the latest version of Unicode\n   rather than\
    \ a specific release.  It is not expected that future\n   changes in the UNICODE\
    \ specification will impact the syntax of JSON.\n   An object is an unordered\
    \ collection of zero or more name/value\n   pairs, where a name is a string and\
    \ a value is a string, number,\n   boolean, null, object, or array.\n   An array\
    \ is an ordered sequence of zero or more values.\n   The terms \"object\" and\
    \ \"array\" come from the conventions of\n   JavaScript.\n   JSON's design goals\
    \ were for it to be minimal, portable, textual, and\n   a subset of JavaScript.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The grammatical rules in this document are to be interpreted\
    \ as\n   described in [RFC5234].\n"
- title: 1.2.  Specifications of JSON
  contents:
  - "1.2.  Specifications of JSON\n   This document updates [RFC4627], which describes\
    \ JSON and registers\n   the media type \"application/json\".\n   A description\
    \ of JSON in ECMAScript terms appears in Version 5.1 of\n   the ECMAScript specification\
    \ [ECMA-262], Section 15.12.  JSON is also\n   described in [ECMA-404].\n   All\
    \ of the specifications of JSON syntax agree on the syntactic\n   elements of\
    \ the language.\n"
- title: 1.3.  Introduction to This Revision
  contents:
  - "1.3.  Introduction to This Revision\n   In the years since the publication of\
    \ RFC 4627, JSON has found very\n   wide use.  This experience has revealed certain\
    \ patterns, which,\n   while allowed by its specifications, have caused interoperability\n\
    \   problems.\n   Also, a small number of errata have been reported (see RFC Errata\
    \ IDs\n   607 [Err607] and 3607 [Err3607]).\n   This document's goal is to apply\
    \ the errata, remove inconsistencies\n   with other specifications of JSON, and\
    \ highlight practices that can\n   lead to interoperability problems.\n"
- title: 2.  JSON Grammar
  contents:
  - "2.  JSON Grammar\n   A JSON text is a sequence of tokens.  The set of tokens\
    \ includes six\n   structural characters, strings, numbers, and three literal\
    \ names.\n   A JSON text is a serialized value.  Note that certain previous\n\
    \   specifications of JSON constrained a JSON text to be an object or an\n   array.\
    \  Implementations that generate only objects or arrays where a\n   JSON text\
    \ is called for will be interoperable in the sense that all\n   implementations\
    \ will accept these as conforming JSON texts.\n      JSON-text = ws value ws\n\
    \   These are the six structural characters:\n      begin-array     = ws %x5B\
    \ ws  ; [ left square bracket\n      begin-object    = ws %x7B ws  ; { left curly\
    \ bracket\n      end-array       = ws %x5D ws  ; ] right square bracket\n    \
    \  end-object      = ws %x7D ws  ; } right curly bracket\n      name-separator\
    \  = ws %x3A ws  ; : colon\n      value-separator = ws %x2C ws  ; , comma\n  \
    \ Insignificant whitespace is allowed before or after any of the six\n   structural\
    \ characters.\n      ws = *(\n              %x20 /              ; Space\n    \
    \          %x09 /              ; Horizontal tab\n              %x0A /        \
    \      ; Line feed or New line\n              %x0D )              ; Carriage return\n"
- title: 3.  Values
  contents:
  - "3.  Values\n   A JSON value MUST be an object, array, number, or string, or one\
    \ of\n   the following three literal names:\n      false null true\n   The literal\
    \ names MUST be lowercase.  No other literal names are\n   allowed.\n      value\
    \ = false / null / true / object / array / number / string\n      false = %x66.61.6c.73.65\
    \   ; false\n      null  = %x6e.75.6c.6c      ; null\n      true  = %x74.72.75.65\
    \      ; true\n"
- title: 4.  Objects
  contents:
  - "4.  Objects\n   An object structure is represented as a pair of curly brackets\n\
    \   surrounding zero or more name/value pairs (or members).  A name is a\n   string.\
    \  A single colon comes after each name, separating the name\n   from the value.\
    \  A single comma separates a value from a following\n   name.  The names within\
    \ an object SHOULD be unique.\n      object = begin-object [ member *( value-separator\
    \ member ) ]\n               end-object\n      member = string name-separator\
    \ value\n   An object whose names are all unique is interoperable in the sense\n\
    \   that all software implementations receiving that object will agree on\n  \
    \ the name-value mappings.  When the names within an object are not\n   unique,\
    \ the behavior of software that receives such an object is\n   unpredictable.\
    \  Many implementations report the last name/value pair\n   only.  Other implementations\
    \ report an error or fail to parse the\n   object, and some implementations report\
    \ all of the name/value pairs,\n   including duplicates.\n   JSON parsing libraries\
    \ have been observed to differ as to whether or\n   not they make the ordering\
    \ of object members visible to calling\n   software.  Implementations whose behavior\
    \ does not depend on member\n   ordering will be interoperable in the sense that\
    \ they will not be\n   affected by these differences.\n"
- title: 5.  Arrays
  contents:
  - "5.  Arrays\n   An array structure is represented as square brackets surrounding\
    \ zero\n   or more values (or elements).  Elements are separated by commas.\n\
    \   array = begin-array [ value *( value-separator value ) ] end-array\n   There\
    \ is no requirement that the values in an array be of the same\n   type.\n"
- title: 6.  Numbers
  contents:
  - "6.  Numbers\n   The representation of numbers is similar to that used in most\n\
    \   programming languages.  A number is represented in base 10 using\n   decimal\
    \ digits.  It contains an integer component that may be\n   prefixed with an optional\
    \ minus sign, which may be followed by a\n   fraction part and/or an exponent\
    \ part.  Leading zeros are not\n   allowed.\n   A fraction part is a decimal point\
    \ followed by one or more digits.\n   An exponent part begins with the letter\
    \ E in upper or lower case,\n   which may be followed by a plus or minus sign.\
    \  The E and optional\n   sign are followed by one or more digits.\n   Numeric\
    \ values that cannot be represented in the grammar below (such\n   as Infinity\
    \ and NaN) are not permitted.\n      number = [ minus ] int [ frac ] [ exp ]\n\
    \      decimal-point = %x2E       ; .\n      digit1-9 = %x31-39         ; 1-9\n\
    \      e = %x65 / %x45            ; e E\n      exp = e [ minus / plus ] 1*DIGIT\n\
    \      frac = decimal-point 1*DIGIT\n      int = zero / ( digit1-9 *DIGIT )\n\
    \      minus = %x2D               ; -\n      plus = %x2B                ; +\n\
    \      zero = %x30                ; 0\n   This specification allows implementations\
    \ to set limits on the range\n   and precision of numbers accepted.  Since software\
    \ that implements\n   IEEE 754-2008 binary64 (double precision) numbers [IEEE754]\
    \ is\n   generally available and widely used, good interoperability can be\n \
    \  achieved by implementations that expect no more precision or range\n   than\
    \ these provide, in the sense that implementations will\n   approximate JSON numbers\
    \ within the expected precision.  A JSON\n   number such as 1E400 or 3.141592653589793238462643383279\
    \ may indicate\n   potential interoperability problems, since it suggests that\
    \ the\n   software that created it expects receiving software to have greater\n\
    \   capabilities for numeric magnitude and precision than is widely\n   available.\n\
    \   Note that when such software is used, numbers that are integers and\n   are\
    \ in the range [-(2**53)+1, (2**53)-1] are interoperable in the\n   sense that\
    \ implementations will agree exactly on their numeric\n   values.\n"
- title: 7.  Strings
  contents:
  - "7.  Strings\n   The representation of strings is similar to conventions used\
    \ in the C\n   family of programming languages.  A string begins and ends with\n\
    \   quotation marks.  All Unicode characters may be placed within the\n   quotation\
    \ marks, except for the characters that must be escaped:\n   quotation mark, reverse\
    \ solidus, and the control characters (U+0000\n   through U+001F).\n   Any character\
    \ may be escaped.  If the character is in the Basic\n   Multilingual Plane (U+0000\
    \ through U+FFFF), then it may be\n   represented as a six-character sequence:\
    \ a reverse solidus, followed\n   by the lowercase letter u, followed by four\
    \ hexadecimal digits that\n   encode the character's code point.  The hexadecimal\
    \ letters A though\n   F can be upper or lower case.  So, for example, a string\
    \ containing\n   only a single reverse solidus character may be represented as\n\
    \   \"\\u005C\".\n   Alternatively, there are two-character sequence escape\n\
    \   representations of some popular characters.  So, for example, a\n   string\
    \ containing only a single reverse solidus character may be\n   represented more\
    \ compactly as \"\\\\\".\n   To escape an extended character that is not in the\
    \ Basic Multilingual\n   Plane, the character is represented as a 12-character\
    \ sequence,\n   encoding the UTF-16 surrogate pair.  So, for example, a string\n\
    \   containing only the G clef character (U+1D11E) may be represented as\n   \"\
    \\uD834\\uDD1E\".\n      string = quotation-mark *char quotation-mark\n      char\
    \ = unescaped /\n          escape (\n              %x22 /          ; \"    quotation\
    \ mark  U+0022\n              %x5C /          ; \\    reverse solidus U+005C\n\
    \              %x2F /          ; /    solidus         U+002F\n              %x62\
    \ /          ; b    backspace       U+0008\n              %x66 /          ; f\
    \    form feed       U+000C\n              %x6E /          ; n    line feed  \
    \     U+000A\n              %x72 /          ; r    carriage return U+000D\n  \
    \            %x74 /          ; t    tab             U+0009\n              %x75\
    \ 4HEXDIG )  ; uXXXX                U+XXXX\n      escape = %x5C              ;\
    \ \\\n      quotation-mark = %x22      ; \"\n      unescaped = %x20-21 / %x23-5B\
    \ / %x5D-10FFFF\n"
- title: 8.  String and Character Issues
  contents:
  - '8.  String and Character Issues

    '
- title: 8.1.  Character Encoding
  contents:
  - "8.1.  Character Encoding\n   JSON text SHALL be encoded in UTF-8, UTF-16, or\
    \ UTF-32.  The default\n   encoding is UTF-8, and JSON texts that are encoded\
    \ in UTF-8 are\n   interoperable in the sense that they will be read successfully\
    \ by the\n   maximum number of implementations; there are many implementations\n\
    \   that cannot successfully read texts in other encodings (such as\n   UTF-16\
    \ and UTF-32).\n   Implementations MUST NOT add a byte order mark to the beginning\
    \ of a\n   JSON text.  In the interests of interoperability, implementations\n\
    \   that parse JSON texts MAY ignore the presence of a byte order mark\n   rather\
    \ than treating it as an error.\n"
- title: 8.2.  Unicode Characters
  contents:
  - "8.2.  Unicode Characters\n   When all the strings represented in a JSON text\
    \ are composed entirely\n   of Unicode characters [UNICODE] (however escaped),\
    \ then that JSON\n   text is interoperable in the sense that all software implementations\n\
    \   that parse it will agree on the contents of names and of string\n   values\
    \ in objects and arrays.\n   However, the ABNF in this specification allows member\
    \ names and\n   string values to contain bit sequences that cannot encode Unicode\n\
    \   characters; for example, \"\\uDEAD\" (a single unpaired UTF-16\n   surrogate).\
    \  Instances of this have been observed, for example, when\n   a library truncates\
    \ a UTF-16 string without checking whether the\n   truncation split a surrogate\
    \ pair.  The behavior of software that\n   receives JSON texts containing such\
    \ values is unpredictable; for\n   example, implementations might return different\
    \ values for the length\n   of a string value or even suffer fatal runtime exceptions.\n"
- title: 8.3.  String Comparison
  contents:
  - "8.3.  String Comparison\n   Software implementations are typically required to\
    \ test names of\n   object members for equality.  Implementations that transform\
    \ the\n   textual representation into sequences of Unicode code units and then\n\
    \   perform the comparison numerically, code unit by code unit, are\n   interoperable\
    \ in the sense that implementations will agree in all\n   cases on equality or\
    \ inequality of two strings.  For example,\n   implementations that compare strings\
    \ with escaped characters\n   unconverted may incorrectly find that \"a\\\\b\"\
    \ and \"a\\u005Cb\" are not\n   equal.\n"
- title: 9.  Parsers
  contents:
  - "9.  Parsers\n   A JSON parser transforms a JSON text into another representation.\
    \  A\n   JSON parser MUST accept all texts that conform to the JSON grammar.\n\
    \   A JSON parser MAY accept non-JSON forms or extensions.\n   An implementation\
    \ may set limits on the size of texts that it\n   accepts.  An implementation\
    \ may set limits on the maximum depth of\n   nesting.  An implementation may set\
    \ limits on the range and precision\n   of numbers.  An implementation may set\
    \ limits on the length and\n   character contents of strings.\n"
- title: 10.  Generators
  contents:
  - "10.  Generators\n   A JSON generator produces JSON text.  The resulting text\
    \ MUST\n   strictly conform to the JSON grammar.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   The MIME media type for JSON text is application/json.\n\
    \   Type name:  application\n   Subtype name:  json\n   Required parameters: \
    \ n/a\n   Optional parameters:  n/a\n   Encoding considerations:  binary\n   Security\
    \ considerations:  See [RFC7159], Section 12.\n   Interoperability considerations:\
    \  Described in [RFC7159]\n   Published specification:  [RFC7159]\n   Applications\
    \ that use this media type:\n      JSON has been used to exchange data between\
    \ applications written\n      in all of these programming languages: ActionScript,\
    \ C, C#,\n      Clojure, ColdFusion, Common Lisp, E, Erlang, Go, Java, JavaScript,\n\
    \      Lua, Objective CAML, Perl, PHP, Python, Rebol, Ruby, Scala, and\n     \
    \ Scheme.\n   Additional information:\n      Magic number(s): n/a\n      File\
    \ extension(s): .json\n      Macintosh file type code(s): TEXT\n   Person & email\
    \ address to contact for further information:\n      IESG\n      <iesg@ietf.org>\n\
    \   Intended usage:  COMMON\n   Restrictions on usage:  none\n   Author:\n   \
    \   Douglas Crockford\n      <douglas@crockford.com>\n   Change controller:\n\
    \      IESG\n      <iesg@ietf.org>\n   Note:  No \"charset\" parameter is defined\
    \ for this registration.\n      Adding one really has no effect on compliant recipients.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   Generally, there are security issues with scripting\
    \ languages.  JSON\n   is a subset of JavaScript but excludes assignment and invocation.\n\
    \   Since JSON's syntax is borrowed from JavaScript, it is possible to\n   use\
    \ that language's \"eval()\" function to parse JSON texts.  This\n   generally\
    \ constitutes an unacceptable security risk, since the text\n   could contain\
    \ executable code along with data declarations.  The same\n   consideration applies\
    \ to the use of eval()-like functions in any\n   other programming language in\
    \ which JSON texts conform to that\n   language's syntax.\n"
- title: 13.  Examples
  contents:
  - "13.  Examples\n   This is a JSON object:\n      {\n        \"Image\": {\n   \
    \         \"Width\":  800,\n            \"Height\": 600,\n            \"Title\"\
    :  \"View from 15th Floor\",\n            \"Thumbnail\": {\n                \"\
    Url\":    \"http://www.example.com/image/481989943\",\n                \"Height\"\
    : 125,\n                \"Width\":  100\n            },\n            \"Animated\"\
    \ : false,\n            \"IDs\": [116, 943, 234, 38793]\n          }\n      }\n\
    \   Its Image member is an object whose Thumbnail member is an object and\n  \
    \ whose IDs member is an array of numbers.\n   This is a JSON array containing\
    \ two objects:\n      [\n        {\n           \"precision\": \"zip\",\n     \
    \      \"Latitude\":  37.7668,\n           \"Longitude\": -122.3959,\n       \
    \    \"Address\":   \"\",\n           \"City\":      \"SAN FRANCISCO\",\n    \
    \       \"State\":     \"CA\",\n           \"Zip\":       \"94107\",\n       \
    \    \"Country\":   \"US\"\n        },\n        {\n           \"precision\": \"\
    zip\",\n           \"Latitude\":  37.371991,\n           \"Longitude\": -122.026020,\n\
    \           \"Address\":   \"\",\n           \"City\":      \"SUNNYVALE\",\n \
    \          \"State\":     \"CA\",\n           \"Zip\":       \"94085\",\n    \
    \       \"Country\":   \"US\"\n        }\n      ]\n   Here are three small JSON\
    \ texts containing only values:\n   \"Hello world!\"\n   42\n   true\n"
- title: 14.  Contributors
  contents:
  - "14.  Contributors\n   RFC 4627 was written by Douglas Crockford.  This document\
    \ was\n   constructed by making a relatively small number of changes to that\n\
    \   document; thus, the vast majority of the text here is his.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [IEEE754]  IEEE, \"IEEE Standard for Floating-Point\
    \ Arithmetic\", IEEE\n              Standard 754, August 2008,\n             \
    \ <http://grouper.ieee.org/groups/754/>.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF\
    \ for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n   [UNICODE]  The Unicode Consortium, \"The Unicode Standard\",\n   \
    \           <http://www.unicode.org/versions/latest/>.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [ECMA-262] Ecma International, \"ECMAScript\
    \ Language Specification\n              Edition 5.1\", Standard ECMA-262, June\
    \ 2011,\n              <http://www.ecma-international.org/publications/standards/\n\
    \              Ecma-262.htm>.\n   [ECMA-404] Ecma International, \"The JSON Data\
    \ Interchange Format\",\n              Standard ECMA-404, October 2013,\n    \
    \          <http://www.ecma-international.org/publications/standards/\n      \
    \        Ecma-404.htm>.\n   [Err3607]  RFC Errata, Errata ID 3607, RFC 3607,\n\
    \              <http://www.rfc-editor.org>.\n   [Err607]   RFC Errata, Errata\
    \ ID 607, RFC 607,\n              <http://www.rfc-editor.org>.\n   [RFC4627] \
    \ Crockford, D., \"The application/json Media Type for\n              JavaScript\
    \ Object Notation (JSON)\", RFC 4627, July 2006.\n"
- title: Appendix A.  Changes from RFC 4627
  contents:
  - "Appendix A.  Changes from RFC 4627\n   This section lists changes between this\
    \ document and the text in RFC\n   4627.\n   o  Changed the title and abstract\
    \ of the document.\n   o  Changed the reference to [UNICODE] to be not version\
    \ specific.\n   o  Added a \"Specifications of JSON\" section.\n   o  Added an\
    \ \"Introduction to This Revision\" section.\n   o  Changed the definition of\
    \ \"JSON text\" so that it can be any JSON\n      value, removing the constraint\
    \ that it be an object or array.\n   o  Added language about duplicate object\
    \ member names, member\n      ordering, and interoperability.\n   o  Clarified\
    \ the absence of a requirement that values in an array be\n      of the same JSON\
    \ type.\n   o  Applied erratum #607 from RFC 4627 to correctly align the artwork\n\
    \      for the definition of \"object\".\n   o  Changed \"as sequences of digits\"\
    \ to \"in the grammar below\" in the\n      \"Numbers\" section, and made base-10-ness\
    \ explicit.\n   o  Added language about number interoperability as a function\
    \ of\n      IEEE754, and added an IEEE754 reference.\n   o  Added language about\
    \ interoperability and Unicode characters and\n      about string comparisons.\
    \  To do this, turned the old \"Encoding\"\n      section into a \"String and\
    \ Character Issues\" section, with three\n      subsections: \"Character Encoding\"\
    , \"Unicode Characters\", and\n      \"String Comparison\".\n   o  Changed guidance\
    \ in the \"Parsers\" section to point out that\n      implementations may set\
    \ limits on the range \"and precision\" of\n      numbers.\n   o  Updated and\
    \ tidied the \"IANA Considerations\" section.\n   o  Made a real \"Security Considerations\"\
    \ section and lifted the text\n      out of the previous \"IANA Considerations\"\
    \ section.\n   o  Applied erratum #3607 from RFC 4627 by removing the security\n\
    \      consideration that begins \"A JSON text can be safely passed\" and\n  \
    \    the JavaScript code that went with that consideration.\n   o  Added a note\
    \ to the \"Security Considerations\" section pointing out\n      the risks of\
    \ using the \"eval()\" function in JavaScript or any\n      other language in\
    \ which JSON texts conform to that language's\n      syntax.\n   o  Added a note\
    \ to the \"IANA Considerations\" clarifying the absence\n      of a \"charset\"\
    \ parameter for the application/json media type.\n   o  Changed \"100\" to 100\
    \ and added a boolean field, both in the first\n      example.\n   o  Added examples\
    \ of JSON texts with simple values, neither objects\n      nor arrays.\n   o \
    \ Added a \"Contributors\" section crediting Douglas Crockford.\n   o  Added a\
    \ reference to RFC 4627.\n   o  Moved the ECMAScript reference from Normative\
    \ to Informative and\n      updated it to reference ECMAScript 5.1, and added\
    \ a reference to\n      ECMA 404.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tim Bray (editor)\n   Google, Inc.\n   EMail: tbray@textuality.com\n"
