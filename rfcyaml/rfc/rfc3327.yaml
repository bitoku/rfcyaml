- contents:
  - "        Session Initiation Protocol (SIP) Extension Header Field\n                 for
    Registering Non-Adjacent Contacts\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The REGISTER function is used in a Session Initiation Protocol (SIP)\n
    \  system primarily to associate a temporary contact address with an\n   address-of-record.
    \ This contact is generally in the form of a\n   Uniform Resource Identifier (URI),
    such as Contact:\n   <sip:alice@pc33.atlanta.com> and is generally dynamic and
    associated\n   with the IP address or hostname of the SIP User Agent (UA).  The\n
    \  problem is that network topology may have one or more SIP proxies\n   between
    the UA and the registrar, such that any request traveling\n   from the user's
    home network to the registered UA must traverse these\n   proxies.  The REGISTER
    method does not give us a mechanism to\n   discover and record this sequence of
    proxies in the registrar for\n   future use.  This document defines an extension
    header field, \"Path\"\n   which provides such a mechanism.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.    Background . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.    Terminology  . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.    Applicability Statement  . . . . . . . . . . . . . . . .
    . .  3\n   4.    Path Header Field Definition and Syntax  . . . . . . . . . .
    \ 3\n   5.    Usage of Path Header Field . . . . . . . . . . . . . . . . .  5\n
    \  5.1   Procedures at the UA . . . . . . . . . . . . . . . . . . . .  5\n   5.2
    \  Procedures at Intermediate Proxies . . . . . . . . . . . . .  5\n   5.3   Procedures
    at the Registrar  . . . . . . . . . . . . . . . .  6\n   5.4   Procedures at the
    Home Proxy . . . . . . . . . . . . . . . .  6\n   5.5   Examples of Usage  . .
    . . . . . . . . . . . . . . . . . . .  7\n   5.5.1 Example of Mechanism in REGISTER
    Transaction . . . . . . . .  7\n   5.5.2 Example of Mechanism in INVITE Transaction
    . . . . . . . . . 11\n   6.    Security Considerations  . . . . . . . . . . .
    . . . . . . . 13\n   6.1   Considerations in REGISTER Request Processing  . .
    . . . . . 13\n   6.2   Considerations in REGISTER Response Processing . . . .
    . . . 14\n   7.    IANA Considerations  . . . . . . . . . . . . . . . . . . .
    . 15\n   8.    Acknowledgements . . . . . . . . . . . . . . . . . . . . . . 15\n
    \        Normative References . . . . . . . . . . . . . . . . . . . . 16\n         Non-Normative
    References . . . . . . . . . . . . . . . . . . 16\n         Authors' Addresses
    . . . . . . . . . . . . . . . . . . . . . 16\n         Full Copyright Statement
    . . . . . . . . . . . . . . . . . . 17\n"
  title: Table of Contents
- contents:
  - "1. Background\n   3GPP established a requirement for discovering intermediate
    proxies\n   during SIP registration and published this requirement in [5].\n   Scenario:\n
    \  UA1----P1-----P2-----P3------REGISTRAR\n   UA1 wishes to register with REGISTRAR.
    \ However, due to network\n   topology, UA1 must use P1 as an \"outbound proxy\",
    and all requests\n   between UA1 and REGISTRAR must also traverse P1, P2, and
    P3 before\n   reaching REGISTRAR.  Likewise, all requests between REGISTRAR and
    UA1\n   must also traverse P3, P2, and P1 before reaching UA1.\n   UA1 has a standing
    relationship with REGISTRAR.  How UA1 establishes\n   this relationship is outside
    the scope of this document.  UA1\n   discovers P1 as a result of configuration,
    DHCP assignment or other\n   similar operation, also outside the scope of this
    document.\n   REGISTRAR has a similar \"default outbound proxy\" relationship
    with\n   P3.\n   Eventually, REGISTRAR or a \"home proxy\" (a proxy serving as
    the\n   terminal point for routing an address-of-record) closely related to\n
    \  it will receive a request destined for UA1.  It needs to know which\n   proxies
    must be transited by that request in order to get back to\n   UA1.  In some cases,
    this information may be deducible from SIP\n   routing configuration tables or
    from DNS entries.  In other cases,\n   such as that raised by 3GPP, the information
    is not readily available\n   outside of the SIP REGISTER transaction.\n   The
    Path extension header field allows accumulating and transmitting\n   the list
    of proxies between UA1 and REGISTRAR.  Intermediate nodes\n   such as P1 may statefully
    retain Path information if needed by\n   operational policy.  This mechanism is
    in many ways similar to the\n   operation of Record-Route in dialog-initiating
    requests.  The routing\n   established by the Path header field mechanism applies
    only to\n   requests transiting or originating in the home domain.\n"
  title: 1. Background
- contents:
  - "2. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in BCP 14, RFC 2119 [3].\n"
  title: 2. Terminology
- contents:
  - "3. Applicability Statement\n   The Path mechanism is applicable whenever there
    are intermediate\n   proxies between a SIP UA and a SIP Registrar used by that
    UA where\n   the following conditions are true:\n   1. One or more of the intermediate
    proxies are visited by\n      registration requests from the UA to the Registrar.\n
    \  2. The same intermediate proxies or a set of proxies known to the\n      intermediate
    proxies must be traversed, in reverse order, by\n      requests sent through a
    home proxy to the UA.  In the simplest\n      form, the route between the home
    proxy and the UA is the exact\n      inverse of the route between the UA and the
    route between the UA\n      and the registrar.\n   3. The network topology is
    such that the intermediate proxies which\n      must be visited are NOT implied
    by SIP routing tables, DNS, or\n      similar mechanisms.\n"
  title: 3. Applicability Statement
- contents:
  - "4. Path Header Field Definition and Syntax\n   The Path header field is a SIP
    extension header field with syntax\n   very similar to the Record-Route header
    field.  It is used in\n   conjunction with SIP REGISTER requests and with 200
    class messages in\n   response to REGISTER (REGISTER responses).\n   A Path header
    field MAY be inserted into a REGISTER by any SIP node\n   traversed by that request.
    \ Like the Route header field, sequential\n   Path header fields are evaluated
    in the sequence in which they are\n   present in the request, and Path header
    fields MAY be combined into\n   compound Path header in a single Path header field.
    \ The registrar\n   reflects the accumulated Path back into the REGISTER response,
    and\n   intermediate nodes propagate this back toward the originating UA.\n   The
    originating UA is therefore informed of the inclusion of nodes on\n   its registered
    Path, and MAY use that information in other capacities\n   outside the scope of
    this document.\n   The difference between Path and Record-Route is that Path applies
    to\n   REGISTER and 200 class responses to REGISTER.  Record-Route doesn't,\n
    \  and can't be defined in REGISTER for reasons of backward\n   compatibility.
    \ Furthermore, the vector established by Record-Route\n   applies only to requests
    within the dialog that established that\n   Record-Route, whereas the vector established
    by Path applies to\n   future dialogs.\n   The syntax for Path is defined as follows:\n
    \  Path = \"Path\" HCOLON path-value *( COMMA path-value )\n   path-value = name-addr
    *( SEMI rr-param )\n   Note that the Path header field values conform to the syntax
    of a\n   Route element as defined in [1].  As suggested therein, such values\n
    \  MUST include the loose-routing indicator parameter \";lr\" for full\n   compliance
    with [1].\n   The allowable usage of header fields is described in Tables 2 and
    3\n   of SIP [1].  The following additions to this table are needed for\n   Path.\n
    \  Support for the Path header field MAY be indicated by a UA by\n   including
    the option-tag \"path\" in a Supported header field.\n   Addition of Path to SIP
    Table 3:\n      Header field          where   proxy ACK BYE CAN INV OPT REG\n
    \     ___________________________________________________________\n      Path
    \                   R       ar   -   -   -   -   -   o\n      Path                   2xx
    \      -   -   -   -   -   -   o\n"
  title: 4. Path Header Field Definition and Syntax
- contents:
  - '5. Usage of Path Header Field

    '
  - contents:
    - "5.1 Procedures at the UA\n   The UA executes its register operation as usual.
      \ The response MAY\n   contain a Path header field.  The general operation of
      the UA is to\n   ignore the Path header field in the response.  It MAY choose
      to\n   display the contents of the Path header field to the user or take\n   other
      action outside the scope of this document.  The Path\n   information in the
      REGISTER response lets the UA know what\n   intermediate proxies were added
      during registration.  Examination of\n   this information may be important from
      a security perspective, as\n   such inspection might allow the UA to detect
      intermediate proxies\n   that have inappropriately added themselves.\n   The
      UA SHOULD include the option tag \"path\" as a header field value\n   in all
      Supported header fields, and SHOULD include a Supported header\n   field in
      all requests.\n   The UA MAY include a Path header field in a request.  This
      is not\n   broadly applicable and caution must be taken to insure proper\n   function,
      as the Path header field inserted by the UA may have\n   additional Path header
      field values appended by intermediate proxies.\n   Such proxies are not aware
      that the Path header field value was\n   inserted by a UA, and will treat it
      as if it had been inserted by a\n   previously traversed proxy, which could
      result in unexpected routing\n   behavior wherein the UA is asked to act as
      a proxy.\n"
    title: 5.1 Procedures at the UA
  - contents:
    - "5.2 Procedures at Intermediate Proxies\n   When a proxy processing a REGISTER
      request wishes to be on the path\n   for future requests toward the UA originating
      that REGISTER request,\n   the proxy inserts a URI for that proxy as the topmost
      value in the\n   Path header field (or inserts a new topmost Path header) before\n
      \  proxying that request.  It is also possible for a proxy with specific\n   knowledge
      of network topology to add a Path header field value\n   referencing another
      node, thereby allowing construction of a Path\n   which is discongruent with
      the route taken by the REGISTER request.\n   Such a construction is implementation
      specific and outside the scope\n   of this document.\n   Intermediate proxies
      SHOULD NOT add a Path header field to a request\n   unless the UA has indicated
      support for this extension with a\n   Supported header field value.  If the
      UA has indicated support and\n   the proxy requires the registrar to support
      the Path extension, then\n   the proxy SHOULD insert a Requires header field
      value for this\n   extension.  If the UA has not indicated support for the extension
      and\n   the proxy requires support for it in the registrar, the proxy SHOULD\n
      \  reject the request with a 421 response indicating a requirement for\n   the
      extension.\n   Proxies processing a REGISTER response SHOULD NOT alter any Path\n
      \  header field values that may be present in the response.  The\n   registrar
      MAY protect the Path header field in the response by\n   including it in a protected
      S/MIME body, and alterations of the Path\n   by an intermediate proxy can therefore
      be detected by the UA as man-\n   in-the-middle attacks.  Proxies SHOULD only
      consider altering the\n   value of a Path header field in the REGISTER response
      if they have\n   the credentials to correctly alter the S/MIME body to account
      for the\n   change.\n"
    title: 5.2 Procedures at Intermediate Proxies
  - contents:
    - "5.3 Procedures at the Registrar\n   If a Path header field exists in a successful
      REGISTER request, the\n   registrar constructs an ordered list of route elements
      (a path\n   vector) from the nodes listed in the Path header field values,\n
      \  preserving the order as indicated in the Path header field values.\n   The
      registrar then stores this path vector in association with that\n   contact
      and the address-of-record indicated in the REGISTER request\n   (the \"binding\"
      as defined in [1]).  The registrar copies the Path\n   header field values into
      a Path header field in the successful (200\n   class) REGISTER response.  In
      the event that the home proxy and\n   registrar are not co-located, the registrar
      MAY apply a locally-\n   determined transformation to the stored path vector.\n
      \  If a registrar receives a REGISTER request containing a Path header\n   field
      and there is no indication of support for the extension in the\n   UA (via a
      Supported header field), the registrar must rely on local\n   policy in determining
      how to treat this request.  The recommended\n   policy is for the registrar
      to reject the request with a 420 \"Bad\n   Extension\" response indicating the
      Path extension.  This approach\n   allows the UA to detect that an intermediate
      proxy has\n   inappropriately added a Path header field.  However, the Path\n
      \  mechanism should technically work in the absence of UA support (at\n   some
      compromise to security), so some registrars MAY choose to\n   support the extension
      in the absence of a Supported header field\n   value in the request.\n"
    title: 5.3 Procedures at the Registrar
  - contents:
    - "5.4 Procedures at the Home Proxy\n   In the common SIP model, there is a home
      proxy associated with the\n   registrar for a user.  Each incoming request targeted
      to the public\n   address-of-record for the user is routed to this proxy, which\n
      \  consults the registrar's database in order to determine the contact\n   to
      which the request should be retargeted.  The home proxy, in its\n   basic mode
      of operation, rewrites the request-URI from the incoming\n   request with the
      value of the registered contact and retransmits the\n   request.\n   With the
      addition of Path, the home proxy also copies the stored path\n   vector associated
      with the specific contact in the registrar database\n   into the Route header
      field of the outgoing request as a preloaded\n   route.  This causes the outgoing
      request to transit the proxies that\n   were included in the Path header field
      of the REGISTER request.\n   In normal processing, the home proxy is the \"terminal
      point\" for the\n   user's address-of-record (AOR).  Consequentially, the Route
      header\n   field on the incoming request will have been exhausted in reaching\n
      \  the home proxy.  If it isn't, then things get interesting.  In the\n   most
      common case, the home proxy generates the outgoing Route header\n   field by
      inserting the stored path vector ahead of the Route header\n   field values
      contained in the incoming request. This procedure may be\n   altered by a local
      policy at the home proxy.\n   Loose routes may interact with routing policy
      in interesting ways.\n   The specifics of how the stored path vector integrates
      with any\n   locally required default route and local policy are implementation\n
      \  dependent.  For example, some devices will use locally-configured\n   explicit
      loose routing to reach a next-hop proxy, and others will use\n   a default outbound-proxy
      routing rule.  However, for the result to\n   function, the combination must
      provide valid routing in the local\n   environment.  In general, the stored
      path vector is appended to any\n   locally configured route needed to egress
      the service cluster.  The\n   service proxy (or registrar, as noted earlier)
      MAY also transform the\n   stored path vector as needed to provide correct functionality.\n
      \  Systems designers must match the Path recording policy of their nodes\n   with
      the routing policy in order to get a workable system.\n"
    title: 5.4 Procedures at the Home Proxy
  - contents:
    - "5.5 Examples of Usage\n   Note that some header fields (e.g. Content-Length)
      and session\n   descriptions are omitted to provide a shorter and hopefully
      more\n   readable presentation. The node marked REGISTRAR is a registrar and
      a\n   proxy and serves as a home proxy. Thus, in the DNS the domain\n   EXAMPLEHOME.COM
      points to the same host as REGISTRAR.EXAMPLEHOME.COM.\n"
    - contents:
      - "5.5.1 Example of Mechanism in REGISTER Transaction\n   As an example, we
        use the scenario from the Background section:\n   UA1----P1-----P2----P3-----REGISTRAR\n
        \  In this example, UA1 sends a REGISTER request to REGISTRAR.  This\n   request
        transits its default outbound proxy P1, an intermediate proxy\n   P2, and
        the firewall proxy for the home domain, P3, before reaching\n   REGISTRAR.
        \ Due to network topology and operational policy, P1 and\n   and P3 need to
        be transited by requests from REGISTRAR or other nodes\n   in the home network
        targeted to UA1.  P2 does not.  P1 and P3 have\n   been configured to include
        themselves in Path header fields on\n   REGISTER requests that they process.
        \ UA1 has a current IP address of\n   \"192.0.2.4\".\n   Message sequence
        for REGISTER with Path:\n   F1 Register UA1 -> P1\n      REGISTER sip:REGISTRAR.EXAMPLEHOME.COM
        SIP/2.0\n      Via: SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n      To:
        UA1 <sip:UA1@EXAMPLEHOME.COM>\n      From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n
        \     Call-ID: 843817637684230@998sdasdh09\n      CSeq: 1826 REGISTER\n      Contact:
        <sip:UA1@192.0.2.4>\n      Supported: path\n       . . .\n   F2 Register P1
        -> P2\n      REGISTER sip:REGISTRAR.EXAMPLEHOME.COM SIP/2.0\n      Via: SIP/2.0/UDP
        112.68.155.4:5060;branch=z9hG4bK34ghi7ab04\n      Via: SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n
        \     To: UA1 <sip:UA1@EXAMPLEHOME.COM>\n      From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n
        \     Call-ID: 843817637684230@998sdasdh09\n      CSeq: 1826 REGISTER\n      Contact:
        <sip:UA1@192.0.2.4>\n      Supported: path\n      Path: <sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n      Note: P1 has added itself to the Path.\n   F3 Register
        P2 -> P3\n      REGISTER sip:REGISTRAR.EXAMPLEHOME.COM SIP/2.0\n      Via:
        SIP/2.0/UDP 178.73.76.230:5060;branch=z9hG4bKiokioukju908\n      Via: SIP/2.0/UDP
        112.68.155.4:5060;branch=z9hG4bK34ghi7ab04\n      Via: SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n
        \     To: UA1 <sip:UA1@EXAMPLEHOME.COM>\n      From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n
        \     Call-ID: 843817637684230@998sdasdh09\n      CSeq: 1826 REGISTER\n      Contact:
        <sip:UA1@192.0.2.4>\n      Supported: path\n      Path: <sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n      Note: P2 did NOT add itself to the Path.\n   F4 Register
        P3 -> REGISTRAR\n      REGISTER sip:REGISTRAR.EXAMPLEHOME.COM SIP/2.0\n      Via:
        SIP/2.0/UDP 19.31.97.3:5060;branch=z9hG4bKp3wer654363\n      Via: SIP/2.0/UDP
        178.73.76.230:5060;branch=z9hG4bKiokioukju908\n      Via: SIP/2.0/UDP 112.68.155.4:5060;branch=z9hG4bK34ghi7ab04\n
        \     Via: SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n      To: UA1
        <sip:UA1@EXAMPLEHOME.COM>\n      From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n
        \     Call-ID: 843817637684230@998sdasdh09\n      CSeq: 1826 REGISTER\n      Contact:
        <sip:UA1@192.0.2.4>\n      Supported: path\n      Path: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n      Note: P3 added itself to the Path.\n   F5 REGISTRAR executes
        Register\n      REGISTRAR Stores:\n      For UA1@EXAMPLEHOME.COM\n      Contact:
        <sip:UA1@192.0.2.4>\n      Supported: path\n      Path: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \  F6 Register Response REGISTRAR -> P3\n      SIP/2.0 200 OK\n      Via:
        SIP/2.0/UDP 19.31.97.3:5060;branch=z9hG4bKp3wer654363\n      Via: SIP/2.0/UDP
        178.73.76.230:5060;branch=z9hG4bKiokioukju908\n      Via: SIP/2.0/UDP 112.68.155.4:5060;branch=z9hG4bK34ghi7ab04\n
        \     Via: SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n      To: UA1
        <sip:UA1@EXAMPLEHOME.COM>;tag=251077\n      From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n
        \     Call-ID: 843817637684230@998sdasdh09\n      CSeq: 1826 REGISTER\n      Contact:
        <sip:UA1@192.0.2.4>\n      Supported: path\n      Path: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n      Note: The Path header field in the response is identical
        to the\n      one received in the REGISTER request.\n   F7 Register Response
        P3 -> P2\n      SIP/2.0 200 OK\n      Via: SIP/2.0/UDP 178.73.76.230:5060;branch=z9hG4bKiokioukju908\n
        \     Via: SIP/2.0/UDP 112.68.155.4:5060;branch=z9hG4bK34ghi7ab04\n      Via:
        SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n      To: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=251077\n
        \     From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n      Call-ID: 843817637684230@998sdasdh09\n
        \     CSeq: 1826 REGISTER\n      Contact: <sip:UA1@192.0.2.4>\n      Supported:
        path\n      Path: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n   F8 Register Response P2 -> P1\n      SIP/2.0 200 OK\n      Via:
        SIP/2.0/UDP 112.68.155.4:5060;branch=z9hG4bK34ghi7ab04\n      Via: SIP/2.0/UDP
        192.0.2.4:5060;branch=z9hG4bKnashds7\n      To: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=251077\n
        \     From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n      Call-ID: 843817637684230@998sdasdh09\n
        \     CSeq: 1826 REGISTER\n      Contact: <sip:UA1@192.0.2.4>\n      Supported:
        path\n      Path: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n   F9 Register Response P1 -> UA1\n      SIP/2.0 200 OK\n      Via:
        SIP/2.0/UDP 192.0.2.4:5060;branch=z9hG4bKnashds7\n      To: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=251077\n
        \     From: UA1 <sip:UA1@EXAMPLEHOME.COM>;tag=456248\n      Call-ID: 843817637684230@998sdasdh09\n
        \     CSeq: 1826 REGISTER\n      Contact: <sip:UA1@192.0.2.4>\n      Supported:
        path\n      Path: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n"
      title: 5.5.1 Example of Mechanism in REGISTER Transaction
    - contents:
      - "5.5.2 Example of Mechanism in INVITE Transaction\n   This example shows the
        message sequence for an INVITE transaction\n   originating from UA2 eventually
        arriving at UA1.  REGISTRAR inserts a\n   preloaded Route toward UA1 and retargets
        the request by replacing the\n   request URI with the registered Contact.
        \ It then sends the\n   retargeted INVITE along the Path towards UA1.  Note
        that this example\n   introduces foreign user agent UA2 (address \"71.91.180.10\")
        and\n   foreign domain FOREIGN.ELSEWHERE.ORG.  We have extended the diagram\n
        \  from the previous example by adding UA2, and by showing P2 out-of-\n   line
        indicating that it did not include itself in the path during\n   registration.\n
        \  Scenario\n         UA1----P1---------P3-----REGISTRAR\n                     |
        \              |\n                     P2              |\n                                     |\n
        \        UA2--------------------------\n   Message sequence for INVITE using
        Path:\n   F1 Invite UA2 -> REGISTRAR\n      INVITE UA1@EXAMPLEHOME.COM SIP/2.0\n
        \     Via: SIP/2.0/UDP 71.91.180.10:5060;branch=z9hG4bKe2i95c5st3R\n      To:
        UA1 <sip:UA1@EXAMPLEHOME.COM>\n      From: UA2 <sip:UA2@FOREIGN.ELSEWHERE.ORG>;tag=224497\n
        \     Call-ID: 48273181116@71.91.180.10\n      CSeq: 29 INVITE\n      Contact:
        <sip:UA2@71.91.180.10>\n       . . .\n   F2 REGISTRAR processing\n      REGISTRAR
        looks up name \"UA1@EXAMPLEHOME.COM\" and returns:\n       - Contact = <sip:UA1@192.0.2.4>\n
        \      - Path vector = <sip:P3.EXAMPLEHOME.COM;lr>,\n                       <sip:P1.EXAMPLEVISITED.COM;lr>\n
        \     Note: The Contact replaces the request-URI.  The path vector is\n      pushed
        onto the Route stack (preloaded Route) of the outgoing\n      INVITE request.
        \ The topmost Route is used for making the\n      routing decision (in conjunction
        with local policy).\n   F3 Invite REGISTRAR  -> P3\n      INVITE UA1@192.0.2.4
        SIP/2.0\n      Via: SIP/2.0/UDP 143.70.6.83:5060;branch=z9hG4bKlj25C107a7b176\n
        \     Via: SIP/2.0/UDP 71.91.180.10:5060;branch=z9hG4bKe2i95c5st3R\n      To:
        UA1 <sip:UA1@EXAMPLEHOME.COM>\n      From: UA2 <sip:UA2@FOREIGN.ELSEWHERE.ORG>;tag=224497\n
        \     Call-ID: 48273181116@71.91.180.10\n      CSeq: 29 INVITE\n      Contact:
        <sip:UA2@71.91.180.10>\n      Route: <sip:P3.EXAMPLEHOME.COM;lr>,<sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n      Note: In this example REGISTRAR does not want to stay
        on the\n      Route and therefore does not insert a Record-Route.\n   F4 Invite
        P3 -> P1\n      INVITE UA1@192.0.2.4 SIP/2.0\n      Via: SIP/2.0/UDP 19.31.97.3:5060;branch=z9hG4bKjasg7li7nc9e\n
        \     Via: SIP/2.0/UDP 143.70.6.83:5060;branch=z9hG4bKlj25C107a7b176\n      Via:
        SIP/2.0/UDP 71.91.180.10:5060;branch=z9hG4bKe2i95c5st3R\n      To: UA1 <sip:UA1@EXAMPLEHOME.COM>\n
        \     From: UA2 <sip:UA2@FOREIGN.ELSEWHERE.ORG>;tag=224497\n      Call-ID:
        48273181116@71.91.180.10\n      CSeq: 29 INVITE\n      Contact: <sip:UA2@71.91.180.10>\n
        \     Record-Route: <sip:P3.EXAMPLEHOME.COM;lr>\n      Route: <sip:P1.EXAMPLEVISITED.COM;lr>\n
        \      . . .\n      Note: P3 has added a Record-Route entry, indicating that
        it wants\n      to be traversed by future messages in this dialog.\n   F5
        Invite P1 -> UA1\n      INVITE UA1@192.0.2.4 SIP/2.0\n      Via: SIP/2.0/UDP
        112.68.155.4:5060;branch=z9hG4bKk5l1833o43p\n      Via: SIP/2.0/UDP 19.31.97.3:5060;branch=z9hG4bKjasg7li7nc9e\n
        \     Via: SIP/2.0/UDP 143.70.6.83:5060;branch=z9hG4bKlj25C107a7b176\n      Via:
        SIP/2.0/UDP 71.91.180.10:5060;branch=z9hG4bKe2i95c5st3R\n      To: UA1 <sip:UA1@EXAMPLEHOME.COM>\n
        \     From: UA2 <sip:UA2@FOREIGN.ELSEWHERE.ORG>;tag=224497\n      Call-ID:
        48273181116@71.91.180.10\n      CSeq: 29 INVITE\n      Contact: <sip:UA2@71.91.180.10>\n
        \     Record-Route: <sip:P1.EXAMPLEVISITED.COM;lr>\n      Record-Route: <sip:P3.EXAMPLEHOME.COM;lr>\n
        \      . . .\n      Note: P1 has added a Record-Route entry, indicating that
        it wants\n      to be traversed by future messages in this dialog.\n"
      title: 5.5.2 Example of Mechanism in INVITE Transaction
    title: 5.5 Examples of Usage
  title: 5. Usage of Path Header Field
- contents:
  - "6. Security Considerations\n   There are few security considerations for this
    document beyond those\n   in SIP [1].  From a security perspective, the Path extension
    and its\n   usage are identical to the Record-Route header field of basic SIP.\n
    \  Note that the transparency of the user expectations are preserved by\n   returning
    the final Path to the originating UA -- that is, the UA is\n   informed which
    additional proxies have been inserted into the path\n   for the registration associated
    with that response.\n   The Path header field accumulates information in a hop-by-hop
    manner\n   during REGISTER processing.  The return information is essentially\n
    \  end-to-end, that is, it is not altered by intermediate proxies.  This\n   leads
    to two slightly different security approaches.\n"
  - contents:
    - "6.1 Considerations in REGISTER Request Processing\n   Information accumulated
      in REGISTER processing causes additional\n   proxies to be included in future
      requests between the registrar's\n   location and the UA.  An attack that allowed
      an intruding proxy to\n   add itself to this chain would allow the attacker
      to intercept future\n   calls intended for the UA.\n   An attacker could conceivably
      alter the Path either by altering data\n   \"on the wire\" or by other manipulations
      (such as impersonation) that\n   would cause it to be included in the SIP routing
      chain (a \"node\n   insertion\" attack).  Altering data \"on the wire\" may
      be addressed\n   adequately by the use of transport-layer integrity protection\n
      \  mechanisms such as TLS or IPSEC.  Proxy insertion can be addressed by\n   mutual
      authentication at the proxy layer, which can also be provided\n   by TLS or
      IPSEC.  The \"sips:\" URI class defined in [1] provides a\n   mechanism by which
      a UA may request that intermediate proxies provide\n   integrity protection
      and mutual authentication.\n   Systems using the Path mechanism SHOULD use appropriate
      mechanisms\n   (TLS, IPSEC, etc.) to provide message integrity and mutual\n
      \  authentication.  UAs SHOULD use \"sips:\" to request transitive\n   protection.\n
      \  The registering UA SHOULD use S/MIME mechanisms to provide a\n   protected
      copy of the original request to the registrar.  In this\n   case, the UA SHOULD
      include a Supported header field with a value\n   indicating support for the
      Path extension in the protected copy.\n   Registrars receiving such as request
      MUST honor the Path extension\n   only if support is indicated in the protected
      header field.  Further,\n   they SHOULD compare the unprotected Supported header
      field with the\n   protected Supported header field and take appropriate action
      in the\n   event that an intermediate has altered the message to indicate\n
      \  support for Path when it was not indicated by the requesting UA.\n"
    title: 6.1 Considerations in REGISTER Request Processing
  - contents:
    - "6.2 Considerations in REGISTER Response Processing\n   The data returned to
      the UA by the Path header field in the response\n   to the REGISTER request
      is there to provide openness to the UA.  The\n   registrar is telling the UA,
      \"These are the intermediate proxies that\n   will be included on future requests
      to you processed through me\".  By\n   inspection of this header field, the
      UA may be able to detect node\n   insertion attacks that involve inserting a
      proxy into the SIP routing\n   chain.  S/MIME techniques may be used to prevent
      alteration of this\n   header field by intermediate proxies during response
      processing.\n   As specified, there is no requirement for arbitrary proxies
      between\n   the UA and the registrar to modify the Path header field in the\n
      \  REGISTER response.  Consequently, we may use an end-to-end protection\n   technique.
      \ The S/MIME technique defined in [1] provides an effective\n   mechanism.  Using
      this technique, the registrar makes a copy of the\n   complete response, signs
      it, and attaches it as a body to the\n   response.  The UA may then verify this
      response, assuring an\n   unmodified Path header field is received.\n   In addition
      to the hop-by-hop integrity protection and mutual\n   authentication measures
      suggested for REGISTER request processing in\n   the preceding section, systems
      using Path header fields SHOULD\n   implement end-to-end protection using S/MIME.
      \ More specifically,\n   registrars returning a Path header field SHOULD attach
      a signed\n   S/MIME of the response, and UAs receiving a REGISTER response\n
      \  containing a Path header field SHOULD validate the message using the\n   S/MIME
      technique.  Furthermore, UAs receiving a Path header field in\n   a REGISTER
      response SHOULD render it to the user, or (where feasible)\n   check it programmatically.\n"
    title: 6.2 Considerations in REGISTER Response Processing
  title: 6. Security Considerations
- contents:
  - "7. IANA Considerations\n   This document defines the SIP extension header field
    \"Path\", which\n   the IANA has added to the registry of SIP header fields defined
    in\n   SIP [1].\n   This document also defines the SIP option tag \"path\" which
    IANA has\n   added to the registry of SIP option tags defined in SIP [1].\n   The
    following is the registration for the Path header field:\n      RFC Number: RFC3327\n
    \     Header Field Name: Path\n      Compact Form: none\n   The following is the
    registration for the path option tag:\n      RFC Number: RFC3327\n      Option
    Tag: path\n"
  title: 7. IANA Considerations
- contents:
  - "8. Acknowledgements\n   Min Huang and Stinson Mathai, who put together the original
    proposal\n   in 3GPP for this mechanism, and worked out most of the 3GPP\n   procedures
    in 24.229.\n   Keith Drage, Bill Marshall, and Miguel Angel Garcia-Martin who
    argued\n   with everybody a lot about the idea as well as helped refine the\n
    \  requirements.\n   Juha Heinanen, who argued steadfastly against standardizing
    the\n   function of discovering the home proxy with this technique in this\n   document.\n"
  title: 8. Acknowledgements
- contents:
  - "Normative References\n   [1] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,
    A.,\n       Peterson, J., Sparks, R., Handley, M. and E. Schooler, \"SIP:\n       Session
    Initiation Protocol\", RFC 3261, June 2002.\n   [2] Bradner, S., \"The Internet
    Standards Process -- Revision 3\", BCP\n       9, RFC 2026, October 1996.\n   [3]
    Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\",
    BCP 14, RFC 2119, March 1997.\n   [4] Postel, J. and J. Reynolds, \"Instructions
    to RFC Authors\", RFC\n       2223, October 1997.\n"
  title: Normative References
- contents:
  - "Non-Normative References\n   [5] Garcia-Martin, MA., \"3GPP Requirements On SIP\",
    Work in Progress.\n   [6] Mankin, A., \"SIP Change Process\", Work in Progress.\n"
  title: Non-Normative References
- contents:
  - "Authors' Addresses\n   Dean Willis\n   dynamicsoft Inc.\n   5100 Tennyson Parkway\n
    \  Suite 1200\n   Plano, TX  75028\n   US\n   Phone: +1 972 473 5455\n   EMail:
    dean.willis@softarmor.com\n   URI:   http://www.dynamicsoft.com/\n   Bernie Hoeneisen\n
    \  Switch\n   Limmatquai 138\n   CH-8001 Zuerich\n   Switzerland\n   Phone: +41
    1 268 1515\n   EMail: hoeneisen@switch.ch, b.hoeneisen@ieee.org\n   URI:   http://www.switch.ch/\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
