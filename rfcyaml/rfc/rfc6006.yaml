- title: __initial_text__
  contents:
  - "                             Extensions to\n       the Path Computation Element\
    \ Communication Protocol (PCEP)\n    for Point-to-Multipoint Traffic Engineering\
    \ Label Switched Paths\n"
- title: Abstract
  contents:
  - "Abstract\n   Point-to-point Multiprotocol Label Switching (MPLS) and Generalized\n\
    \   MPLS (GMPLS) Traffic Engineering Label Switched Paths (TE LSPs) may\n   be\
    \ established using signaling techniques, but their paths may first\n   need to\
    \ be determined.  The Path Computation Element (PCE) has been\n   identified as\
    \ an appropriate technology for the determination of the\n   paths of point-to-multipoint\
    \ (P2MP) TE LSPs.\n   This document describes extensions to the PCE communication\
    \ Protocol\n   (PCEP) to handle requests and responses for the computation of\
    \ paths\n   for P2MP TE LSPs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6006.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Requirements Language ......................................5\n   2.\
    \ PCC-PCE Communication Requirements ..............................5\n   3. Protocol\
    \ Procedures and Extensions ..............................6\n      3.1. P2MP Capability\
    \ Advertisement ..............................6\n           3.1.1. P2MP Computation\
    \ TLV in the Existing PCE\n                  Discovery Protocol ..................................6\n\
    \           3.1.2. Open Message Extension ..............................7\n  \
    \    3.2. Efficient Presentation of P2MP LSPs ........................7\n    \
    \  3.3. P2MP Path Computation Request/Reply Message Extensions .....8\n      \
    \     3.3.1. The Extension of the RP Object ......................8\n        \
    \   3.3.2. The New P2MP END-POINTS Object ......................9\n      3.4.\
    \ Request Message Format ....................................12\n      3.5. Reply\
    \ Message Format ......................................12\n      3.6. P2MP Objective\
    \ Functions and Metric Types .................13\n           3.6.1. New Objective\
    \ Functions ............................13\n           3.6.2. New Metric Object\
    \ Types ............................14\n      3.7. Non-Support of P2MP Path Computation\
    \ ......................14\n      3.8. Non-Support by Back-Level PCE Implementations\
    \ .............15\n      3.9. P2MP TE Path Reoptimization Request .......................15\n\
    \      3.10. Adding and Pruning Leaves to/from the P2MP Tree ..........16\n  \
    \    3.11. Discovering Branch Nodes .................................19\n    \
    \       3.11.1. Branch Node Object ................................19\n      3.12.\
    \ Synchronization of P2MP TE Path Computation Requests .....19\n      3.13. Request\
    \ and Response Fragmentation .......................20\n           3.13.1. Request\
    \ Fragmentation Procedure ...................21\n           3.13.2. Response Fragmentation\
    \ Procedure ..................21\n           3.13.3. Fragmentation Examples ............................21\n\
    \      3.14. UNREACH-DESTINATION Object ...............................22\n  \
    \    3.15. P2MP PCEP-ERROR Objects and Types ........................23\n    \
    \  3.16. PCEP NO-PATH Indicator ...................................24\n   4. Manageability\
    \ Considerations ...................................25\n      4.1. Control of\
    \ Function and Policy ............................25\n      4.2. Information and\
    \ Data Models ...............................25\n      4.3. Liveness Detection\
    \ and Monitoring .........................25\n      4.4. Verifying Correct Operation\
    \ ...............................25\n      4.5. Requirements for Other Protocols\
    \ and Functional\n           Components ................................................26\n\
    \      4.6. Impact on Network Operation ...............................26\n  \
    \ 5. Security Considerations ........................................26\n   6.\
    \ IANA Considerations ............................................27\n      6.1.\
    \ PCEP TLV Type Indicators ..................................27\n      6.2. Request\
    \ Parameter Bit Flags ...............................27\n      6.3. Objective\
    \ Functions .......................................27\n      6.4. Metric Object\
    \ Types .......................................27\n      6.5. PCEP Objects ..............................................28\n\
    \      6.6. PCEP-ERROR Objects and Types ..............................29\n  \
    \    6.7. PCEP NO-PATH Indicator ....................................30\n    \
    \  6.8. SVEC Object Flag ..........................................30\n      6.9.\
    \ OSPF PCE Capability Flag ..................................30\n   7. Acknowledgements\
    \ ...............................................30\n   8. References .....................................................30\n\
    \      8.1. Normative References ......................................30\n  \
    \    8.2. Informative References ....................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Path Computation Element (PCE) defined in [RFC4655]\
    \ is an entity\n   that is capable of computing a network path or route based\
    \ on a\n   network graph, and applying computational constraints.  A Path\n  \
    \ Computation Client (PCC) may make requests to a PCE for paths to be\n   computed.\n\
    \   [RFC4875] describes how to set up point-to-multipoint (P2MP) Traffic\n   Engineering\
    \ Label Switched Paths (TE LSPs) for use in Multiprotocol\n   Label Switching\
    \ (MPLS) and Generalized MPLS (GMPLS) networks.\n   The PCE has been identified\
    \ as a suitable application for the\n   computation of paths for P2MP TE LSPs\
    \ [RFC5671].\n   The PCE communication Protocol (PCEP) is designed as a communication\n\
    \   protocol between PCCs and PCEs for point-to-point (P2P) path\n   computations\
    \ and is defined in [RFC5440].  However, that\n   specification does not provide\
    \ a mechanism to request path\n   computation of P2MP TE LSPs.\n   A P2MP LSP\
    \ is comprised of multiple source-to-leaf (S2L) sub-LSPs.\n   These S2L sub-LSPs\
    \ are set up between ingress and egress Label\n   Switching Routers (LSRs) and\
    \ are appropriately overlaid to construct\n   a P2MP TE LSP.  During path computation,\
    \ the P2MP TE LSP may be\n   determined as a set of S2L sub-LSPs that are computed\
    \ separately and\n   combined to give the path of the P2MP LSP, or the entire\
    \ P2MP TE LSP\n   may be determined as a P2MP tree in a single computation.\n\
    \   This document relies on the mechanisms of PCEP to request path\n   computation\
    \ for P2MP TE LSPs.  One path computation request message\n   from a PCC may request\
    \ the computation of the whole P2MP TE LSP, or\n   the request may be limited\
    \ to a sub-set of the S2L sub-LSPs.  In the\n   extreme case, the PCC may request\
    \ the S2L sub-LSPs to be computed\n   individually with it being the PCC's responsibility\
    \ to decide whether\n   to signal individual S2L sub-LSPs or combine the computation\
    \ results\n   to signal the entire P2MP TE LSP.  Hence the PCC may use one path\n\
    \   computation request message or may split the request across multiple\n   path\
    \ computation messages.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   Terminology used in this document:\n      TE LSP: Traffic\
    \ Engineering Label Switched Path.\n      LSR: Label Switching Router.\n     \
    \ OF: Objective Function: A set of one or more optimization criteria\n      used\
    \ for the computation of a single path (e.g., path cost\n      minimization),\
    \ or for the synchronized computation of a set of\n      paths (e.g., aggregate\
    \ bandwidth consumption minimization).\n      P2MP: Point-to-Multipoint.\n   \
    \   P2P: Point-to-Point.\n   This document also uses the terminology defined in\
    \ [RFC4655],\n   [RFC4875], and [RFC5440].\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  PCC-PCE Communication Requirements
  contents:
  - "2.  PCC-PCE Communication Requirements\n   This section summarizes the PCC-PCE\
    \ communication requirements for\n   P2MP MPLS-TE LSPs described in [RFC5862].\
    \  The numbering system\n   corresponds to the requirement numbers used in [RFC5862].\n\
    \   1.  The PCC MUST be able to specify that the request is a P2MP path\n    \
    \   computation request.\n   2.  The PCC MUST be able to specify that objective\
    \ functions are to\n       be applied to the P2MP path computation request.\n\
    \   3.  The PCE MUST have the capability to reject a P2MP path request\n     \
    \  and indicate non-support of P2MP path computation.\n   4.  The PCE MUST provide\
    \ an indication of non-support of P2MP path\n       computation by back-level\
    \ PCE implementations.\n   5.  A P2MP path computation request MUST be able to\
    \ list multiple\n       destinations.\n   6.  A P2MP path computation response\
    \ MUST be able to carry the path\n       of a P2MP LSP.\n   7.  By default, the\
    \ path returned by the PCE SHOULD use the\n       compressed format.\n   8.  It\
    \ MUST be possible for a single P2MP path computation request or\n       response\
    \ to be conveyed by a sequence of messages.\n   9.  It MUST NOT be possible for\
    \ a single P2MP path computation\n       request to specify a set of different\
    \ constraints, traffic\n       parameters, or quality-of-service requirements\
    \ for different\n       destinations of a P2MP LSP.\n   10. P2MP path modification\
    \ and P2MP path diversity MUST be supported.\n   11. It MUST be possible to reoptimize\
    \ existing P2MP TE LSPs.\n   12. It MUST be possible to add and remove P2MP destinations\
    \ from\n       existing paths.\n   13. It MUST be possible to specify a list of\
    \ applicable branch nodes\n       to use when computing the P2MP path.\n   14.\
    \ It MUST be possible for a PCC to discover P2MP path computation\n       capability.\n\
    \   15. The PCC MUST be able to request diverse paths when requesting a\n    \
    \   P2MP path.\n"
- title: 3.  Protocol Procedures and Extensions
  contents:
  - "3.  Protocol Procedures and Extensions\n   The following section describes the\
    \ protocol extensions required to\n   satisfy the requirements specified in Section\
    \ 2 (\"PCC-PCE\n   Communication Requirements\") of this document.\n"
- title: 3.1.  P2MP Capability Advertisement
  contents:
  - '3.1.  P2MP Capability Advertisement

    '
- title: 3.1.1.  P2MP Computation TLV in the Existing PCE Discovery Protocol
  contents:
  - "3.1.1.  P2MP Computation TLV in the Existing PCE Discovery Protocol\n   [RFC5088]\
    \ defines a PCE Discovery (PCED) TLV carried in an OSPF\n   Router Information\
    \ Link State Advertisement (LSA) defined in\n   [RFC4970] to facilitate PCE discovery\
    \ using OSPF.  [RFC5088]\n   specifies that no new sub-TLVs may be added to the\
    \ PCED TLV.  This\n   document defines a new flag in the OSPF PCE Capability Flags\
    \ to\n   indicate the capability of P2MP computation.\n   Similarly, [RFC5089]\
    \ defines the PCED sub-TLV for use in PCE\n   Discovery using IS-IS.  This document\
    \ will use the same flag\n   requested for the OSPF PCE Capability Flags sub-TLV\
    \ to allow IS-IS to\n   indicate the capability of P2MP computation.\n   The IANA\
    \ assignment for a shared OSPF and IS-IS P2MP Capability Flag\n   is documented\
    \ in Section 6.9 (\"OSPF PCE Capability Flag\") of this\n   document.\n   PCEs\
    \ wishing to advertise that they support P2MP path computation\n   would set the\
    \ bit (10) accordingly.  PCCs that do not understand this\n   bit will ignore\
    \ it (per [RFC5088] and [RFC5089]).  PCEs that do not\n   support P2MP will leave\
    \ the bit clear (per the default behavior\n   defined in [RFC5088] and [RFC5089]).\n\
    \   PCEs that set the bit to indicate support of P2MP path computation\n   MUST\
    \ follow the procedures in Section 3.3.2 (\"The New P2MP END-POINTS\n   Object\"\
    ) to further qualify the level of support.\n"
- title: 3.1.2.  Open Message Extension
  contents:
  - "3.1.2.  Open Message Extension\n   Based on the Capabilities Exchange requirement\
    \ described in\n   [RFC5862], if a PCE does not advertise its P2MP capability\
    \ during\n   discovery, PCEP should be used to allow a PCC to discover, during\
    \ the\n   Open Message Exchange, which PCEs are capable of supporting P2MP path\n\
    \   computation.\n   To satisfy this requirement, we extend the PCEP OPEN object\
    \ by\n   defining a new optional TLV to indicate the PCE's capability to\n   perform\
    \ P2MP path computations.\n   IANA has allocated value 6 from the \"PCEP TLV Type\
    \ Indicators\" sub-\n   registry, as documented in Section 6.1 (\"PCEP TLV Type\
    \ Indicators\").\n   The description is \"P2MP capable\", and the length value\
    \ is 2 bytes.\n   The value field is set to default value 0.\n   The inclusion\
    \ of this TLV in an OPEN object indicates that the sender\n   can perform P2MP\
    \ path computations.\n   The capability TLV is meaningful only for a PCE, so it\
    \ will typically\n   appear only in one of the two Open messages during PCE session\n\
    \   establishment.  However, in case of PCE cooperation (e.g.,\n   inter-domain),\
    \ when a PCE behaving as a PCC initiates a PCE session\n   it SHOULD also indicate\
    \ its path computation capabilities.\n"
- title: 3.2.  Efficient Presentation of P2MP LSPs
  contents:
  - "3.2.  Efficient Presentation of P2MP LSPs\n   When specifying additional leaves,\
    \ or optimizing existing P2MP TE\n   LSPs as specified in [RFC5862], it may be\
    \ necessary to pass existing\n   P2MP LSP route information between the PCC and\
    \ PCE in the request and\n   reply messages.  In each of these scenarios, we need\
    \ new path objects\n   for efficiently passing the existing P2MP LSP between the\
    \ PCE and\n   PCC.\n   We specify the use of the Resource Reservation Protocol\
    \ Traffic\n   Engineering (RSVP-TE) extensions Explicit Route Object (ERO) to\n\
    \   encode the explicit route of a TE LSP through the network.  PCEP ERO\n   sub-object\
    \ types correspond to RSVP-TE ERO sub-object types.  The\n   format and content\
    \ of the ERO object are defined in [RFC3209] and\n   [RFC3473].\n   The Secondary\
    \ Explicit Route Object (SERO) is used to specify the\n   explicit route of a\
    \ S2L sub-LSP.  The path of each subsequent S2L\n   sub-LSP is encoded in a P2MP_SECONDARY_EXPLICIT_ROUTE\
    \ object SERO.\n   The format of the SERO is the same as an ERO defined in [RFC3209]\
    \ and\n   [RFC3473].\n   The Secondary Record Route Object (SRRO) is used to record\
    \ the\n   explicit route of the S2L sub-LSP.  The class of the P2MP SRRO is the\n\
    \   same as the SRRO defined in [RFC4873].\n   The SERO and SRRO are used to report\
    \ the route of an existing TE LSP\n   for which a reoptimization is desired. \
    \ The format and content of the\n   SERO and SRRO are defined in [RFC4875].\n\
    \   A new PCEP object class and type are requested for SERO and SRRO.\n   Object-Class\
    \ Value    29\n   Name                  SERO\n   Object-Type           1: SERO\n\
    \                         2-15: Unassigned\n   Reference             RFC 6006\n\
    \   Object-Class Value    30\n   Name                  SRRO\n   Object-Type  \
    \         1: SRRO\n                         2-15: Unassigned\n   Reference   \
    \          RFC 6006\n   The IANA assignment is documented in Section 6.5 (\"PCEP\
    \ Objects\").\n   Since the explicit path is available for immediate signaling\
    \ by the\n   MPLS or GMPLS control plane, the meanings of all of the sub-objects\n\
    \   and fields in this object are identical to those defined for the ERO.\n"
- title: 3.3.  P2MP Path Computation Request/Reply Message Extensions
  contents:
  - "3.3.  P2MP Path Computation Request/Reply Message Extensions\n   This document\
    \ extends the existing P2P RP (Request Parameters) object\n   so that a PCC can\
    \ signal a P2MP path computation request to the PCE\n   receiving the PCEP request.\
    \  The END-POINTS object is also extended\n   to improve the efficiency of the\
    \ message exchange between PCC and PCE\n   in the case of P2MP path computation.\n"
- title: 3.3.1.  The Extension of the RP Object
  contents:
  - "3.3.1.  The Extension of the RP Object\n   The PCE path computation request and\
    \ reply messages will need the\n   following additional parameters to indicate\
    \ to the receiving PCE that\n   the request and reply messages have been fragmented\
    \ across multiple\n   messages, that they have been requested for a P2MP path,\
    \ and whether\n   the route is represented in the compressed or uncompressed format.\n\
    \   This document adds the following flags to the RP Object:\n   The F-bit is\
    \ added to the flag bits of the RP object to indicate to\n   the receiver that\
    \ the request is part of a fragmented request, or is\n   not a fragmented request.\n\
    \   o  F (RP fragmentation bit - 1 bit):\n      0: This indicates that the RP\
    \ is not fragmented or it is the last\n         piece of the fragmented RP.\n\
    \      1: This indicates that the RP is fragmented and this is not the\n     \
    \    last piece of the fragmented RP.  The receiver needs to wait\n         for\
    \ additional fragments until it receives an RP with the same\n         RP-ID and\
    \ with the F-bit set to 0.\n   The N-bit is added in the flag bits field of the\
    \ RP object to signal\n   the receiver of the message that the request/reply is\
    \ for P2MP or is\n   not for P2MP.\n   o  N (P2MP bit - 1 bit):\n      0: This\
    \ indicates that this is not a PCReq or PCRep message for\n         P2MP.\n  \
    \    1: This indicates that this is a PCReq or PCRep message for P2MP.\n   The\
    \ E-bit is added in the flag bits field of the RP object to signal\n   the receiver\
    \ of the message that the route is in the compressed\n   format or is not in the\
    \ compressed format.  By default, the path\n   returned by the PCE SHOULD use\
    \ the compressed format.\n   o  E (ERO-compression bit - 1 bit):\n      0: This\
    \ indicates that the route is not in the compressed format.\n      1: This indicates\
    \ that the route is in the compressed format.\n   The IANA assignment is documented\
    \ in Section 6.2 (\"Request Parameter\n   Bit Flags\") of this document.\n"
- title: 3.3.2.  The New P2MP END-POINTS Object
  contents:
  - "3.3.2.  The New P2MP END-POINTS Object\n   The END-POINTS object is used in a\
    \ PCReq message to specify the\n   source IP address and the destination IP address\
    \ of the path for\n   which a path computation is requested.  To represent the\
    \ end points\n   for a P2MP path efficiently, we define two new types of END-POINTS\n\
    \   objects for the P2MP path:\n   o  Old leaves whose path can be modified/reoptimized;\n\
    \   o  Old leaves whose path must be left unchanged.\n   With the new END-POINTS\
    \ object, the PCE path computation request\n   message is expanded in a way that\
    \ allows a single request message to\n   list multiple destinations.\n   In total,\
    \ there are now 4 possible types of leaves in a P2MP request:\n   o  New leaves\
    \ to add (leaf type = 1)\n   o  Old leaves to remove (leaf type = 2)\n   o  Old\
    \ leaves whose path can be modified/reoptimized (leaf type = 3)\n   o  Old leaves\
    \ whose path must be left unchanged (leaf type = 4)\n   A given END-POINTS object\
    \ gathers the leaves of a given type.  The\n   type of leaf in a given END-POINTS\
    \ object is identified by the END-\n   POINTS object leaf type field.\n   Using\
    \ the new END-POINTS object, the END-POINTS portion of a request\n   message for\
    \ the multiple destinations can be reduced by up to 50% for\n   a P2MP path where\
    \ a single source address has a very large number of\n   destinations.\n   Note\
    \ that a P2MP path computation request can mix the different types\n   of leaves\
    \ by including several END-POINTS objects per RP object as\n   shown in the PCReq\
    \ Routing Backus-Naur Form (RBNF) [RFC5511] format\n   in Section 3.4 (\"Request\
    \ Message Format\").\n   The format of the new END-POINTS object body for IPv4\
    \ (Object-Type 3)\n   is as follows:\n     0                   1             \
    \      2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          Leaf type                            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Source IPv4 address                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Destination IPv4 address                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ~                           ...                                 ~\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Destination IPv4 address                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Figure 1.  The New P2MP END-POINTS Object Body Format for IPv4\n   The\
    \ format of the END-POINTS object body for IPv6 (Object-Type 4) is\n   as follows:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          Leaf type                            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                Source IPv6 address (16 bytes)                 |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \              Destination IPv6 address (16 bytes)              |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ~                           ...                                 ~\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \              Destination IPv6 address (16 bytes)              |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Figure 2.  The New P2MP END-POINTS Object Body Format for IPv6\n   The\
    \ END-POINTS object body has a variable length.  These are\n   multiples of 4\
    \ bytes for IPv4, and multiples of 16 bytes, plus 4\n   bytes, for IPv6.\n"
- title: 3.4.  Request Message Format
  contents:
  - "3.4.  Request Message Format\n   The PCReq message is encoded as follows using\
    \ RBNF as defined in\n   [RFC5511].\n   Below is the message format for the request\
    \ message:\n           <PCReq Message>::= <Common Header>\n                  \
    \               <request>\n        where:\n                <request>::= <RP>\n\
    \                                <end-point-rro-pair-list>\n                 \
    \               [<OF>]\n                                [<LSPA>]\n           \
    \                     [<BANDWIDTH>]\n                                [<metric-list>]\n\
    \                                [<IRO>]\n                                [<LOAD-BALANCING>]\n\
    \        where:\n                <end-point-rro-pair-list>::=\n              \
    \                     <END-POINTS>[<RRO-List>][<BANDWIDTH>]\n                \
    \                   [<end-point-rro-pair-list>]\n                <RRO-List>::=<RRO>[<BANDWIDTH>][<RRO-List>]\n\
    \                <metric-list>::=<METRIC>[<metric-list>]\n           Figure 3.\
    \  The Message Format for the Request Message\n   Note that we preserve compatibility\
    \ with the [RFC5440] definition of\n   <request>.  At least one instance of <endpoints>\
    \ MUST be present in\n   this message.\n   We have documented the IANA assignment\
    \ of additional END-POINTS\n   Object-Types in Section 6.5 (\"PCEP Objects\")\
    \ of this document.\n"
- title: 3.5.  Reply Message Format
  contents:
  - "3.5.  Reply Message Format\n   The PCRep message is encoded as follows using\
    \ RBNF as defined in\n   [RFC5511].\n   Below is the message format for the reply\
    \ message:\n          <PCRep Message>::= <Common Header>\n                   \
    \             <response>\n          <response>::=<RP>\n                      \
    \    [<end-point-path-pair-list>]\n                          [<NO-PATH>]\n   \
    \                       [<attribute-list>]\n        where:\n           <end-point-path-pair-list>::=\n\
    \                   [<END-POINTS>]<path>[<end-point-path-pair-list>]\n       \
    \   <path> ::= (<ERO>|<SERO>) [<path>]\n          <attribute-list>::=[<OF>]\n\
    \                               [<LSPA>]\n                               [<BANDWIDTH>]\n\
    \                               [<metric-list>]\n                            \
    \   [<IRO>]\n            Figure 4.  The Message Format for the Reply Message\n\
    \   The optional END-POINTS object in the reply message is used to\n   specify\
    \ which paths are removed, changed, not changed, or added for\n   the request.\
    \  The path is only needed for the end points that are\n   added or changed.\n\
    \   If the E-bit (ERO-Compress bit) was set to 1 in the request, then the\n  \
    \ path will be formed by an ERO followed by a list of SEROs.\n   Note that we\
    \ preserve compatibility with the [RFC5440] definition of\n   <response> and the\
    \ optional <end-point-path-pair-list> and <path>.\n"
- title: 3.6.  P2MP Objective Functions and Metric Types
  contents:
  - '3.6.  P2MP Objective Functions and Metric Types

    '
- title: 3.6.1.  New Objective Functions
  contents:
  - "3.6.1.  New Objective Functions\n   Six objective functions have been defined\
    \ in [RFC5541] for P2P path\n   computation.\n   This document defines two additional\
    \ objective functions -- namely,\n   SPT (Shortest Path Tree) and MCT (Minimum\
    \ Cost Tree) that apply to\n   P2MP path computation.  Hence two new objective\
    \ function codes have\n   to be defined.\n   The description of the two new objective\
    \ functions is as follows.\n   Objective Function Code: 7\n      Name: Shortest\
    \ Path Tree (SPT)\n      Description: Minimize the maximum source-to-leaf cost\
    \ with respect\n      to a specific metric or to the TE metric used as the default\n\
    \      metric when the metric is not specified (e.g., TE or IGP metric).\n   Objective\
    \ Function Code: 8\n      Name: Minimum Cost Tree (MCT)\n      Description: Minimize\
    \ the total cost of the tree, that is the sum\n      of the costs of tree links,\
    \ with respect to a specific metric or\n      to the TE metric used as the default\
    \ metric when the metric is not\n      specified.\n   Processing these two new\
    \ objective functions is subject to the rules\n   defined in [RFC5541].\n"
- title: 3.6.2.  New Metric Object Types
  contents:
  - "3.6.2.  New Metric Object Types\n   There are three types defined for the <METRIC>\
    \ object in [RFC5440] --\n   namely, the IGP metric, the TE metric, and the hop\
    \ count metric.\n   This document defines three additional types for the <METRIC>\
    \ object:\n   the P2MP IGP metric, the P2MP TE metric, and the P2MP hop count\n\
    \   metric.  They encode the sum of the metrics of all links of the tree.\n  \
    \ We propose the following values for these new metric types:\n   o  P2MP IGP\
    \ metric: T=8\n   o  P2MP TE metric: T=9\n   o  P2MP hop count metric: T=10\n"
- title: 3.7.  Non-Support of P2MP Path Computation
  contents:
  - "3.7.  Non-Support of P2MP Path Computation\n   o  If a PCE receives a P2MP path\
    \ request and it understands the P2MP\n      flag in the RP object, but the PCE\
    \ is not capable of P2MP\n      computation, the PCE MUST send a PCErr message\
    \ with a PCEP-ERROR\n      object and corresponding Error-Value.  The request\
    \ MUST then be\n      cancelled at the PCC.  New Error-Types and Error-Values\
    \ are\n      requested in Section 6 (\"IANA Considerations\") of this document.\n\
    \   o  If the PCE does not understand the P2MP flag in the RP object,\n      then\
    \ the PCE MUST send a PCErr message with Error-value=2\n      (capability not\
    \ supported).\n"
- title: 3.8.  Non-Support by Back-Level PCE Implementations
  contents:
  - "3.8.  Non-Support by Back-Level PCE Implementations\n   If a PCE receives a P2MP\
    \ request and the PCE does not understand the\n   P2MP flag in the RP object,\
    \ and therefore the PCEP P2MP extensions,\n   then the PCE SHOULD reject the request.\n"
- title: 3.9.  P2MP TE Path Reoptimization Request
  contents:
  - "3.9.  P2MP TE Path Reoptimization Request\n   A reoptimization request for a\
    \ P2MP TE path is specified by the use\n   of the R-bit within the RP object as\
    \ defined in [RFC5440] and is\n   similar to the reoptimization request for a\
    \ P2P TE path.  The only\n   difference is that the user MUST insert the list\
    \ of RROs and SRROs\n   after each type of END-POINTS in the PCReq message, as\
    \ described in\n   the \"Request Message Format\" section (Section 3.4) of this\
    \ document.\n   An example of a reoptimization request and subsequent PCReq message\n\
    \   is described below:\n           Common Header\n           RP with P2MP flag/R-bit\
    \ set\n           END-POINTS for leaf type 3\n             RRO list\n        \
    \   OF (optional)\n            Figure 5.  PCReq Message Example 1 for Optimization\n\
    \   In this example, we request reoptimization of the path to all leaves\n   without\
    \ adding or pruning leaves.  The reoptimization request would\n   use an END-POINT\
    \ type 3.  The RRO list would represent the P2MP LSP\n   before the optimization,\
    \ and the modifiable path leaves would be\n   indicated in the END-POINTS object.\n\
    \   It is also possible to specify distinct leaves whose path cannot be\n   modified.\
    \  An example of the PCReq message in this scenario would be:\n           Common\
    \ Header\n           RP with P2MP flag/R-bit set\n           END-POINTS for leaf\
    \ type 3\n             RRO list\n           END-POINTS for leaf type 4\n     \
    \        RRO list\n           OF (optional)\n            Figure 6.  PCReq Message\
    \ Example 2 for Optimization\n"
- title: 3.10.  Adding and Pruning Leaves to/from the P2MP Tree
  contents:
  - "3.10.  Adding and Pruning Leaves to/from the P2MP Tree\n   When adding new leaves\
    \ to or removing old leaves from the existing\n   P2MP tree, by supplying a list\
    \ of existing leaves, it SHOULD be\n   possible to optimize the existing P2MP\
    \ tree.  This section explains\n   the methods for adding new leaves to or removing\
    \ old leaves from the\n   existing P2MP tree.\n   To add new leaves, the user\
    \ MUST build a P2MP request using END-\n   POINTS with leaf type 1.\n   To remove\
    \ old leaves, the user must build a P2MP request using END-\n   POINTS with leaf\
    \ type 2.  If no type-2 END-POINTS exist, then the PCE\n   MUST send an error\
    \ type 17, value=1: The PCE is not capable of\n   satisfying the request due to\
    \ no END-POINTS with leaf type 2.\n   When adding new leaves to or removing old\
    \ leaves from the existing\n   P2MP tree, the PCC must also provide the list of\
    \ old leaves, if any,\n   including END-POINTS with leaf type 3, leaf type 4,\
    \ or both.  New\n   PCEP-ERROR objects and types are necessary for reporting when\
    \ certain\n   conditions are not satisfied (i.e., when there are no END-POINTS\
    \ with\n   leaf type 3 or 4, or in the presence of END-POINTS with leaf type 1\n\
    \   or 2).  A generic \"Inconsistent END-POINT\" error will be used if a\n   PCC\
    \ receives a request that has an inconsistent END-POINT (i.e., if a\n   leaf specified\
    \ as type 1 already exists).  These IANA assignments are\n   documented in Section\
    \ 6.6 (\"PCEP-ERROR Objects and Types\") of this\n   document.\n   For old leaves,\
    \ the user MUST provide the old path as a list of RROs\n   that immediately follows\
    \ each END-POINTS object.  This document\n   specifies error values when specific\
    \ conditions are not satisfied.\n   The following examples demonstrate full and\
    \ partial reoptimization of\n   existing P2MP LSPs:\n   Case 1: Adding leaves\
    \ with full reoptimization of existing paths\n           Common Header\n     \
    \      RP with P2MP flag/R-bit set\n           END-POINTS for leaf type 1\n  \
    \           RRO list\n           END-POINTS for leaf type 3\n             RRO\
    \ list\n           OF (optional)\n   Case 2: Adding leaves with partial reoptimization\
    \ of existing paths\n           Common Header\n           RP with P2MP flag/R-bit\
    \ set\n           END-POINTS for leaf type 1\n           END-POINTS for leaf type\
    \ 3\n             RRO list\n           END-POINTS for leaf type 4\n          \
    \   RRO list\n           OF (optional)\n   Case 3: Adding leaves without reoptimization\
    \ of existing paths\n           Common Header\n           RP with P2MP flag/R-bit\
    \ set\n           END-POINTS for leaf type 1\n             RRO list\n        \
    \   END-POINTS for leaf type 4\n             RRO list\n           OF (optional)\n\
    \   Case 4: Pruning Leaves with full reoptimization of existing paths\n      \
    \     Common Header\n           RP with P2MP flag/R-bit set\n           END-POINTS\
    \ for leaf type 2\n             RRO list\n           END-POINTS for leaf type\
    \ 3\n             RRO list\n           OF (optional)\n   Case 5: Pruning leaves\
    \ with partial reoptimization of existing paths\n           Common Header\n  \
    \         RP with P2MP flag/R-bit set\n           END-POINTS for leaf type 2\n\
    \             RRO list\n           END-POINTS for leaf type 3\n             RRO\
    \ list\n           END-POINTS for leaf type 4\n             RRO list\n       \
    \    OF (optional)\n   Case 6: Pruning leaves without reoptimization of existing\
    \ paths\n           Common Header\n           RP with P2MP flag/R-bit set\n  \
    \         END-POINTS for leaf type 2\n             RRO list\n           END-POINTS\
    \ for leaf type 4\n             RRO list\n           OF (optional)\n   Case 7:\
    \ Adding and pruning leaves with full reoptimization of\n   existing paths\n \
    \          Common Header\n           RP with P2MP flag/R-bit set\n           END-POINTS\
    \ for leaf type 1\n           END-POINTS for leaf type 2\n             RRO list\n\
    \           END-POINTS for leaf type 3\n             RRO list\n           OF (optional)\n\
    \   Case 8: Adding and pruning leaves with partial reoptimization of\n   existing\
    \ paths\n           Common Header\n           RP with P2MP flag/R-bit set\n  \
    \         END-POINTS for leaf type 1\n           END-POINTS for leaf type 2\n\
    \             RRO list\n           END-POINTS for leaf type 3\n             RRO\
    \ list\n           END-POINTS for leaf type 4\n             RRO list\n       \
    \    OF (optional)\n   Case 9: Adding and pruning leaves without reoptimization\
    \ of existing\n   paths\n           Common Header\n           RP with P2MP flag/R-bit\
    \ set\n           END-POINTS for leaf type 1\n           END-POINTS for leaf type\
    \ 2\n             RRO list\n           END-POINTS for leaf type 4\n          \
    \   RRO list\n           OF (optional)\n"
- title: 3.11.  Discovering Branch Nodes
  contents:
  - "3.11.  Discovering Branch Nodes\n   Before computing the P2MP path, a PCE may\
    \ need to be provided means\n   to know which nodes in the network are capable\
    \ of acting as branch\n   LSRs.  A PCE can discover such capabilities by using\
    \ the mechanisms\n   defined in [RFC5073].\n"
- title: 3.11.1.  Branch Node Object
  contents:
  - "3.11.1.  Branch Node Object\n   The PCC can specify a list of nodes that can\
    \ be used as branch nodes\n   or a list of nodes that cannot be used as branch\
    \ nodes by using the\n   Branch Node Capability (BNC) Object.  The BNC Object\
    \ has the same\n   format as the Include Route Object (IRO) defined in [RFC5440],\
    \ except\n   that it only supports IPv4 and IPv6 prefix sub-objects.  Two Object-\n\
    \   types are also defined:\n   o  Branch node list: List of nodes that can be\
    \ used as branch nodes.\n   o  Non-branch node list: List of nodes that cannot\
    \ be used as branch\n      nodes.\n   The object can only be carried in a PCReq\
    \ message.  A Path Request\n   may carry at most one Branch Node Object.\n   The\
    \ Object-Class and Object-types have been allocated by IANA.  The\n   IANA assignment\
    \ is documented in Section 6.5 (\"PCEP Objects\").\n"
- title: 3.12.  Synchronization of P2MP TE Path Computation Requests
  contents:
  - "3.12.  Synchronization of P2MP TE Path Computation Requests\n   There are cases\
    \ when multiple P2MP LSPs' computations need to be\n   synchronized.  For example,\
    \ one P2MP LSP is the designated backup of\n   another P2MP LSP.  In this case,\
    \ path diversity for these dependent\n   LSPs may need to be considered during\
    \ the path computation.\n   The synchronization can be done by using the existing\
    \ Synchronization\n   VECtor (SVEC) functionality defined in [RFC5440].\n   An\
    \ example of synchronizing two P2MP LSPs, each having two leaves for\n   Path\
    \ Computation Request Messages, is illustrated below:\n           Common Header\n\
    \           SVEC for sync of LSP1 and LSP2\n           OF (optional)\n       \
    \    END-POINTS1 for P2MP\n             RRO1 list\n           END-POINTS2 for\
    \ P2MP\n             RRO2 list\n           Figure 7.  PCReq Message Example for\
    \ Synchronization\n   This specification also defines two new flags to the SVEC\
    \ Object Flag\n   Field for P2MP path dependent computation requests.  The first\
    \ new\n   flag is to allow the PCC to request that the PCE should compute a\n\
    \   secondary P2MP path tree with partial path diversity for specific\n   leaves\
    \ or a specific S2L sub-path to the primary P2MP path tree.  The\n   second flag,\
    \ would allow the PCC to request that partial paths should\n   be link direction\
    \ diverse.\n   The following flags are added to the SVEC object body in this\n\
    \   document:\n   o  P (Partial Path Diverse bit - 1 bit):\n      When set, this\
    \ would indicate a request for path diversity for a\n      specific leaf, a set\
    \ of leaves, or all leaves.\n   o  D (Link Direction Diverse bit - 1 bit):\n \
    \     When set, this would indicate a request that a partial path or\n      paths\
    \ should be link direction diverse.\n   The IANA assignment is referenced in Section\
    \ 6.8 of this document.\n"
- title: 3.13.  Request and Response Fragmentation
  contents:
  - "3.13.  Request and Response Fragmentation\n   The total PCEP message length,\
    \ including the common header, is\n   16 bytes.  In certain scenarios the P2MP\
    \ computation request may not\n   fit into a single request or response message.\
    \  For example, if a\n   tree has many hundreds or thousands of leaves, then the\
    \ request or\n   response may need to be fragmented into multiple messages.\n\
    \   The F-bit has been outlined in \"The Extension of the RP Object\"\n   (Section\
    \ 3.3.1) of this document.  The F-bit is used in the RP object\n   header to signal\
    \ that the initial request or response was too large\n   to fit into a single\
    \ message and will be fragmented into multiple\n   messages.  In order to identify\
    \ the single request or response, each\n   message will use the same request ID.\n"
- title: 3.13.1.  Request Fragmentation Procedure
  contents:
  - "3.13.1.  Request Fragmentation Procedure\n   If the initial request is too large\
    \ to fit into a single request\n   message, the PCC will split the request over\
    \ multiple messages.  Each\n   message sent to the PCE, except the last one, will\
    \ have the F-bit set\n   in the RP object to signify that the request has been\
    \ fragmented into\n   multiple messages.  In order to identify that a series of\
    \ request\n   messages represents a single request, each message will use the\
    \ same\n   request ID.\n   The assumption is that request messages are reliably\
    \ delivered and in\n   sequence, since PCEP relies on TCP.\n"
- title: 3.13.2.  Response Fragmentation Procedure
  contents:
  - "3.13.2.  Response Fragmentation Procedure\n   Once the PCE computes a path based\
    \ on the initial request, a response\n   is sent back to the PCC.  If the response\
    \ is too large to fit into a\n   single response message, the PCE will split the\
    \ response over\n   multiple messages.  Each message sent to the PCE, except the\
    \ last\n   one, will have the F-bit set in the RP object to signify that the\n\
    \   response has been fragmented into multiple messages.  In order to\n   identify\
    \ that a series of response messages represents a single\n   response, each message\
    \ will use the same response ID.\n   Again, the assumption is that response messages\
    \ are reliably\n   delivered and in sequence, since PCEP relies on TCP.\n"
- title: 3.13.3.  Fragmentation Examples
  contents:
  - "3.13.3.  Fragmentation Examples\n   The following example illustrates the PCC\
    \ sending a request message\n   with Req-ID1 to the PCE, in order to add one leaf\
    \ to an existing tree\n   with 1200 leaves.  The assumption used for this example\
    \ is that one\n   request message can hold up to 800 leaves.  In this scenario,\
    \ the\n   original single message needs to be fragmented and sent using two\n\
    \   smaller messages, which have the Req-ID1 specified in the RP object,\n   and\
    \ with the F-bit set on the first message, and cleared on the\n   second message.\n\
    \           Common Header\n           RP1 with Req-ID1 and P2MP=1 and F-bit=1\n\
    \           OF (optional)\n           END-POINTS1 for P2MP\n             RRO1\
    \ list\n           Common Header\n           RP2 with Req-ID1 and P2MP=1 and F-bit=0\n\
    \           OF (optional)\n           END-POINTS1 for P2MP\n             RRO1\
    \ list\n              Figure 8.  PCReq Message Fragmentation Example\n   To handle\
    \ a scenario where the last fragmented message piece is lost,\n   the receiver\
    \ side of the fragmented message may start a timer once it\n   receives the first\
    \ piece of the fragmented message.  When the timer\n   expires and it has not\
    \ received the last piece of the fragmented\n   message, it should send an error\
    \ message to the sender to signal that\n   it has received an incomplete message.\
    \  The relevant error message is\n   documented in Section 3.15 (\"P2MP PCEP-ERROR\
    \ Objects and Types\").\n"
- title: 3.14.  UNREACH-DESTINATION Object
  contents:
  - "3.14.  UNREACH-DESTINATION Object\n   The PCE path computation request may fail\
    \ because all or a subset of\n   the destinations are unreachable.\n   In such\
    \ a case, the UNREACH-DESTINATION object allows the PCE to\n   optionally specify\
    \ the list of unreachable destinations.\n   This object can be present in PCRep\
    \ messages.  There can be up to one\n   such object per RP.\n   The following\
    \ UNREACH-DESTINATION objects will be required:\n   UNREACH-DESTINATION Object-Class\
    \ is 28.\n   UNREACH-DESTINATION Object-Type for IPv4 is 1.\n   UNREACH-DESTINATION\
    \ Object-Type for IPv6 is 2.\n   The format of the UNREACH-DESTINATION object\
    \ body for IPv4 (Object-\n   Type=1) is as follows:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  Destination IPv4 address                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                           ...                                 ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  Destination IPv4 address                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \      Figure 9.  UNREACH-DESTINATION Object Body for IPv4\n   The format of the\
    \ UNREACH-DESTINATION object body for IPv6 (Object-\n   Type=2) is as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |            Destination IPv6 address (16 bytes)                |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ~                          ...                                  ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \           Destination IPv6 address (16 bytes)              |\n      |      \
    \                                                         |\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 10.  UNREACH-DESTINATION Object Body for IPv6\n"
- title: 3.15.  P2MP PCEP-ERROR Objects and Types
  contents:
  - "3.15.  P2MP PCEP-ERROR Objects and Types\n   To indicate an error associated\
    \ with policy violation, a new error\n   value \"P2MP Path computation not allowed\"\
    \ should be added to the\n   existing error code for policy violation (Error-Type=5)\
    \ as defined in\n   [RFC5440]:\n   Error-Type=5; Error-Value=7: if a PCE receives\
    \ a P2MP path\n   computation request that is not compliant with administrative\n\
    \   privileges (i.e., \"The PCE policy does not support P2MP path\n   computation\"\
    ), the PCE MUST send a PCErr message with a PCEP-ERROR\n   object (Error-Type=5)\
    \ and an Error-Value (Error-Value=7).  The\n   corresponding P2MP path computation\
    \ request MUST also be cancelled.\n   To indicate capability errors associated\
    \ with the P2MP path request,\n   a new Error-Type (16) and subsequent error-values\
    \ are defined as\n   follows for inclusion in the PCEP-ERROR object:\n   Error-Type=16;\
    \ Error-Value=1: if a PCE receives a P2MP path request\n   and the PCE is not\
    \ capable of satisfying the request due to\n   insufficient memory, the PCE MUST\
    \ send a PCErr message with a PCEP-\n   ERROR object (Error-Type=16) and an Error-Value\
    \ (Error-Value=1).  The\n   corresponding P2MP path computation request MUST also\
    \ be cancelled.\n   Error-Type=16; Error-Value=2: if a PCE receives a P2MP path\
    \ request\n   and the PCE is not capable of P2MP computation, the PCE MUST send\
    \ a\n   PCErr message with a PCEP-ERROR object (Error-Type=16) and an Error-\n\
    \   Value (Error-Value=2).  The corresponding P2MP path computation\n   request\
    \ MUST also be cancelled.\n   To indicate P2MP message fragmentation errors associated\
    \ with a P2MP\n   path request, a new Error-Type (17) and subsequent error-values\
    \ are\n   defined as follows for inclusion in the PCEP-ERROR object:\n   Error-Type=18;\
    \ Error-Value=1: if a PCE has not received the last\n   piece of the fragmented\
    \ message, it should send an error message to\n   the sender to signal that it\
    \ has received an incomplete message\n   (i.e., \"Fragmented request failure\"\
    ).  The PCE MUST send a PCErr\n   message with a PCEP-ERROR object (Error-Type=18)\
    \ and an Error-Value\n   (Error-Value=1).\n"
- title: 3.16.  PCEP NO-PATH Indicator
  contents:
  - "3.16.  PCEP NO-PATH Indicator\n   To communicate the reasons for not being able\
    \ to find P2MP path\n   computation, the NO-PATH object can be used in the PCRep\
    \ message.\n   One new bit is defined in the NO-PATH-VECTOR TLV carried in the\n\
    \   NO-PATH Object:\n   bit 24: when set, the PCE indicates that there is a reachability\n\
    \   problem with all or a subset of the P2MP destinations.  Optionally,\n   the\
    \ PCE can specify the destination or list of destinations that are\n   not reachable\
    \ using the new UNREACH-DESTINATION object defined in\n   Section 3.14.\n"
- title: 4.  Manageability Considerations
  contents:
  - "4.  Manageability Considerations\n   [RFC5862] describes various manageability\
    \ requirements in support of\n   P2MP path computation when applying PCEP.  This\
    \ section describes how\n   manageability requirements mentioned in [RFC5862]\
    \ are supported in\n   the context of PCEP extensions specified in this document.\n\
    \   Note that [RFC5440] describes various manageability considerations in\n  \
    \ PCEP, and most of the manageability requirements mentioned in\n   [RFC5862]\
    \ are already covered there.\n"
- title: 4.1.  Control of Function and Policy
  contents:
  - "4.1.  Control of Function and Policy\n   In addition to PCE configuration parameters\
    \ listed in [RFC5440], the\n   following additional parameters might be required:\n\
    \   o  The ability to enable or disable P2MP path computations on the\n      PCE.\n\
    \   o  The PCE may be configured to enable or disable the advertisement\n    \
    \  of its P2MP path computation capability.  A PCE can advertise its\n      P2MP\
    \ capability via the IGP discovery mechanism discussed in\n      Section 3.1.1\
    \ (\"P2MP Computation TLV in the Existing PCE Discovery\n      Protocol\"), or\
    \ during the Open Message Exchange discussed in\n      Section 3.1.2 (\"Open Message\
    \ Extension\").\n"
- title: 4.2.  Information and Data Models
  contents:
  - "4.2.  Information and Data Models\n   A number of MIB objects have been defined\
    \ for general PCEP control\n   and monitoring of P2P computations in [PCEP-MIB].\
    \  [RFC5862]\n   specifies that MIB objects will be required to support the control\n\
    \   and monitoring of the protocol extensions defined in this document.\n   A\
    \ new document will be required to define MIB objects for PCEP\n   control and\
    \ monitoring of P2MP computations.\n"
- title: 4.3.  Liveness Detection and Monitoring
  contents:
  - "4.3.  Liveness Detection and Monitoring\n   There are no additional considerations\
    \ beyond those expressed in\n   [RFC5440], since [RFC5862] does not address any\
    \ additional\n   requirements.\n"
- title: 4.4.  Verifying Correct Operation
  contents:
  - "4.4.  Verifying Correct Operation\n   There are no additional requirements beyond\
    \ those expressed in\n   [RFC4657] for verifying the correct operation of the\
    \ PCEP sessions.\n   It is expected that future MIB objects will facilitate verification\n\
    \   of correct operation and reporting of P2MP PCEP requests, responses,\n   and\
    \ errors.\n"
- title: 4.5.  Requirements for Other Protocols and Functional Components
  contents:
  - "4.5.  Requirements for Other Protocols and Functional Components\n   The method\
    \ for the PCE to obtain information about a PCE capable of\n   P2MP path computations\
    \ via OSPF and IS-IS is discussed in\n   Section 3.1.1 (\"P2MP Computation TLV\
    \ in the Existing PCE Discovery\n   Protocol\") of this document.\n   The subsequent\
    \ IANA assignments are documented in Section 6.9 (\"OSPF\n   PCE Capability Flag\"\
    ) of this document.\n"
- title: 4.6.  Impact on Network Operation
  contents:
  - "4.6.  Impact on Network Operation\n   It is expected that the use of PCEP extensions\
    \ specified in this\n   document will not significantly increase the level of\
    \ operational\n   traffic.  However, computing a P2MP tree may require more PCE\
    \ state\n   compared to a P2P computation.  In the event of a major network\n\
    \   failure and multiple recovery P2MP tree computation requests being\n   sent\
    \ to the PCE, the load on the PCE may also be significantly\n   increased.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   As described in [RFC5862], P2MP path computation\
    \ requests are more\n   CPU-intensive and also utilize more link bandwidth.  In\
    \ the event of\n   an unauthorized P2MP path computation request, or a denial\
    \ of service\n   attack, the subsequent PCEP requests and processing may be disruptive\n\
    \   to the network.  Consequently, it is important that implementations\n   conform\
    \ to the relevant security requirements of [RFC5440] that\n   specifically help\
    \ to minimize or negate unauthorized P2MP path\n   computation requests and denial\
    \ of service attacks.  These mechanisms\n   include:\n   o  Securing the PCEP\
    \ session requests and responses using TCP\n      security techniques (Section\
    \ 10.2 of [RFC5440]).\n   o  Authenticating the PCEP requests and responses to\
    \ ensure the\n      message is intact and sent from an authorized node (Section\
    \ 10.3\n      of [RFC5440]).\n   o  Providing policy control by explicitly defining\
    \ which PCCs, via IP\n      access-lists, are allowed to send P2MP path requests\
    \ to the PCE\n      (Section 10.6 of [RFC5440]).\n   PCEP operates over TCP, so\
    \ it is also important to secure the PCE and\n   PCC against TCP denial of service\
    \ attacks.  Section 10.7.1 of\n   [RFC5440] outlines a number of mechanisms for\
    \ minimizing the risk of\n   TCP based denial of service attacks against PCEs\
    \ and PCCs.\n   PCEP implementations SHOULD consider the additional security provided\n\
    \   by the TCP Authentication Option (TCP-AO) [RFC5925].\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA maintains a registry of PCEP parameters.  A\
    \ number of IANA\n   considerations have been highlighted in previous sections\
    \ of this\n   document.  IANA has made the following allocations.\n"
- title: 6.1.  PCEP TLV Type Indicators
  contents:
  - "6.1.  PCEP TLV Type Indicators\n   As described in Section 3.1.2., the newly\
    \ defined P2MP capability TLV\n   allows the PCE to advertise its P2MP path computation\
    \ capability.\n   IANA has made the following allocation from the \"PCEP TLV Type\n\
    \   Indicators\" sub-registry.\n      Value       Description          Reference\n\
    \      6           P2MP capable         RFC 6006\n"
- title: 6.2.  Request Parameter Bit Flags
  contents:
  - "6.2.  Request Parameter Bit Flags\n   As described in Section 3.3.1, three new\
    \ RP Object Flags have been\n   defined.  IANA has made the following allocations\
    \ from the PCEP \"RP\n   Object Flag Field\" sub-registry:\n      Bit      Description\
    \                         Reference\n      18       Fragmentation (F-bit)    \
    \           RFC 6006\n      19       P2MP (N-bit)                        RFC 6006\n\
    \      20       ERO-compression (E-bit)             RFC 6006\n"
- title: 6.3.  Objective Functions
  contents:
  - "6.3.  Objective Functions\n   As described in Section 3.6.1, two new Objective\
    \ Functions have been\n   defined.  IANA has made the following allocations from\
    \ the PCEP\n   \"Objective Function\" sub-registry:\n      Code Point        Name\
    \        Reference\n      7                 SPT         RFC 6006\n      8    \
    \             MCT         RFC 6006\n"
- title: 6.4.  Metric Object Types
  contents:
  - "6.4.  Metric Object Types\n   As described in Section 3.6.2, three new metric\
    \ object T fields have\n   been defined.  IANA has made the following allocations\
    \ from the PCEP\n   \"METRIC Object T Field\" sub-registry:\n      Value     \
    \      Description               Reference\n      8               P2MP IGP metric\
    \           RFC 6006\n      9               P2MP TE metric            RFC 6006\n\
    \      10              P2MP hop count metric     RFC 6006\n"
- title: 6.5.  PCEP Objects
  contents:
  - "6.5.  PCEP Objects\n   As discussed in Section 3.3.2, two new END-POINTS Object-Types\
    \ are\n   defined.  IANA has made the following Object-Type allocations from\n\
    \   the \"PCEP Objects\" sub-registry:\n      Object-Class Value    4\n      Name\
    \                  END-POINTS\n      Object-Type           3: IPv4\n         \
    \                   4: IPv6\n                            5-15: Unassigned\n  \
    \    Reference             RFC 6006\n   As described in Section 3.2, Section 3.11.1,\
    \ and Section 3.14, four\n   PCEP Object-Classes and six PCEP Object-Types have\
    \ been defined.\n   IANA has made the following allocations from the \"PCEP Objects\"\
    \ sub-\n   registry:\n      Object-Class Value    28\n      Name             \
    \     UNREACH-DESTINATION\n      Object-Type           1: IPv4\n             \
    \               2: IPv6\n                            3-15: Unassigned\n      Reference\
    \             RFC 6006\n      Object-Class Value    29\n      Name           \
    \       SERO\n      Object-Type           1: SERO\n                          \
    \  2-15: Unassigned\n      Reference             RFC 6006\n      Object-Class\
    \ Value    30\n      Name                  SRRO\n      Object-Type           1:\
    \ SRRO\n                            2-15: Unassigned\n      Reference        \
    \     RFC 6006\n      Object-Class Value    31\n      Name                  Branch\
    \ Node Capability Object\n      Object-Type           1: Branch node list\n  \
    \                          2: Non-branch node list\n                         \
    \   3-15: Unassigned\n      Reference             RFC 6006\n"
- title: 6.6.  PCEP-ERROR Objects and Types
  contents:
  - "6.6.  PCEP-ERROR Objects and Types\n   As described in Section 3.15, a number\
    \ of new PCEP-ERROR Object Error\n   Types and Values have been defined.  IANA\
    \ has made the following\n   allocations from the PCEP \"PCEP-ERROR Object Error\
    \ Types and Values\"\n   sub-registry:\n      Error\n      Type  Meaning     \
    \                                       Reference\n      5     Policy violation\n\
    \              Error-value=7:                                   RFC 6006\n   \
    \             P2MP Path computation is not allowed\n      16    P2MP Capability\
    \ Error\n              Error-Value=0: Unassigned                        RFC 6006\n\
    \              Error-Value=1:                                   RFC 6006\n   \
    \             The PCE is not capable to satisfy the request\n                due\
    \ to insufficient memory\n              Error-Value=2:                       \
    \            RFC 6006\n                The PCE is not capable of P2MP computation\n\
    \      17    P2MP END-POINTS Error\n              Error-Value=0: Unassigned  \
    \                      RFC 6006\n              Error-Value=1:                \
    \                   RFC 6006\n                The PCE is not capable to satisfy\
    \ the request\n                due to no END-POINTS with leaf type 2\n       \
    \       Error-Value=2:                                   RFC 6006\n          \
    \      The PCE is not capable to satisfy the request\n                due to no\
    \ END-POINTS with leaf type 3\n              Error-Value=3:                  \
    \                 RFC 6006\n                The PCE is not capable to satisfy\
    \ the request\n                due to no END-POINTS with leaf type 4\n       \
    \       Error-Value=4:                                   RFC 6006\n          \
    \      The PCE is not capable to satisfy the request\n                due to inconsistent\
    \ END-POINTS\n      18    P2MP Fragmentation Error\n              Error-Value=0:\
    \ Unassigned                        RFC 6006\n              Error-Value=1:   \
    \                                RFC 6006\n                Fragmented request\
    \ failure\n"
- title: 6.7.  PCEP NO-PATH Indicator
  contents:
  - "6.7.  PCEP NO-PATH Indicator\n   As discussed in Section 3.16, a new NO-PATH-VECTOR\
    \ TLV Flag Field has\n   been defined.  IANA has made the following allocation\
    \ from the PCEP\n   \"NO-PATH-VECTOR TLV Flag Field\" sub-registry:\n      Bit\
    \    Description                               Reference\n      24     P2MP Reachability\
    \ Problem                 RFC 6006\n"
- title: 6.8.  SVEC Object Flag
  contents:
  - "6.8.  SVEC Object Flag\n   As discussed in Section 3.12, two new SVEC Object\
    \ Flags are defined.\n   IANA has made the following allocation from the PCEP\
    \ \"SVEC Object\n   Flag Field\" sub-registry:\n      Bit      Description   \
    \                           Reference\n      19       Partial Path Diverse   \
    \                  RFC 6006\n      20       Link Direction Diverse           \
    \        RFC 6006\n"
- title: 6.9.  OSPF PCE Capability Flag
  contents:
  - "6.9.  OSPF PCE Capability Flag\n   As discussed in Section 3.1.1, a new OSPF\
    \ Capability Flag is defined\n   to indicate P2MP path computation capability.\
    \  IANA has made the\n   following assignment from the OSPF Parameters \"Path\
    \ Computation\n   Element (PCE) Capability Flags\" registry:\n      Bit      Description\
    \                              Reference\n      10       P2MP path computation\
    \                    RFC 6006\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to thank Adrian Farrel, Young\
    \ Lee, Dan Tappan,\n   Autumn Liu, Huaimo Chen, Eiji Okim, Nick Neate, Suresh\
    \ Babu K, Dhruv\n   Dhody, Udayasree Palle, Gaurav Agrawal, Vishwas Manral, Dan\n\
    \   Romascanu, Tim Polk, Stewart Bryant, David Harrington, and Sean\n   Turner\
    \ for their valuable comments and input on this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3209]   Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\
    \ V.,\n               and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n\
    \               Tunnels\", RFC 3209, December 2001.\n   [RFC3473]   Berger, L.,\
    \ Ed., \"Generalized Multi-Protocol Label\n               Switching (GMPLS) Signaling\
    \ Resource ReserVation\n               Protocol-Traffic Engineering (RSVP-TE)\
    \ Extensions\",\n               RFC 3473, January 2003.\n   [RFC4873]   Berger,\
    \ L., Bryskin, I., Papadimitriou, D., and A.\n               Farrel, \"GMPLS Segment\
    \ Recovery\", RFC 4873, May 2007.\n   [RFC4875]   Aggarwal, R., Ed., Papadimitriou,\
    \ D., Ed., and S.\n               Yasukawa, Ed., \"Extensions to Resource Reservation\n\
    \               Protocol - Traffic Engineering (RSVP-TE) for Point-to-\n     \
    \          Multipoint TE Label Switched Paths (LSPs)\", RFC 4875, May\n      \
    \         2007.\n   [RFC4970]   Lindem, A., Ed., Shen, N., Vasseur, JP., Aggarwal,\
    \ R.,\n               and S. Shaffer, \"Extensions to OSPF for Advertising\n \
    \              Optional Router Capabilities\", RFC 4970, July 2007.\n   [RFC5073]\
    \   Vasseur, J., Ed., and J. Le Roux, Ed., \"IGP Routing\n               Protocol\
    \ Extensions for Discovery of Traffic Engineering\n               Node Capabilities\"\
    , RFC 5073, December 2007.\n   [RFC5088]   Le Roux, JL., Ed., Vasseur, JP., Ed.,\
    \ Ikejiri, Y., and R.\n               Zhang, \"OSPF Protocol Extensions for Path\
    \ Computation\n               Element (PCE) Discovery\", RFC 5088, January 2008.\n\
    \   [RFC5089]   Le Roux, JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and R.\n  \
    \             Zhang, \"IS-IS Protocol Extensions for Path Computation\n      \
    \         Element (PCE) Discovery\", RFC 5089, January 2008.\n   [RFC5511]   Farrel,\
    \ A., \"Routing Backus-Naur Form (RBNF): A Syntax\n               Used to Form\
    \ Encoding Rules in Various Routing Protocol\n               Specifications\"\
    , RFC 5511, April 2009.\n   [RFC5440]   Vasseur, JP., Ed., and JL. Le Roux, Ed.,\
    \ \"Path\n               Computation Element (PCE) Communication Protocol (PCEP)\"\
    ,\n               RFC 5440, March 2009.\n   [RFC5541]   Le Roux, JL., Vasseur,\
    \ JP., and Y. Lee, \"Encoding of\n               Objective Functions in the Path\
    \ Computation Element\n               Communication Protocol (PCEP)\", RFC 5541,\
    \ June 2009.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC4655]   Farrel, A., Vasseur, J.-P., and\
    \ J. Ash, \"A Path\n               Computation Element (PCE)-Based Architecture\"\
    , RFC 4655,\n               August 2006.\n   [RFC4657]   Ash, J., Ed., and J.\
    \ Le Roux, Ed., \"Path Computation\n               Element (PCE) Communication\
    \ Protocol Generic\n               Requirements\", RFC 4657, September 2006.\n\
    \   [RFC5671]   Yasukawa, S. and A. Farrel, Ed., \"Applicability of the\n    \
    \           Path Computation Element (PCE) to Point-to-Multipoint\n          \
    \     (P2MP) MPLS and GMPLS Traffic Engineering (TE)\",\n               RFC 5671,\
    \ October 2009.\n   [RFC5862]   Yasukawa, S. and A. Farrel, \"Path Computation\
    \ Clients\n               (PCC) - Path Computation Element (PCE) Requirements\
    \ for\n               Point-to-Multipoint MPLS-TE\", RFC 5862, June 2010.\n  \
    \ [RFC5925]   Touch, J., Mankin, A., and R. Bonica, \"The TCP\n              \
    \ Authentication Option\", RFC 5925, June 2010.\n   [PCEP-MIB]  Koushik, K., Stephan,\
    \ E., Zhao, Q., and D. King, \"PCE\n               communication protocol (PCEP)\
    \ Management Information\n               Base\", Work in Progress, July 2010.\n"
- title: Contributors
  contents:
  - "Contributors\n   Jean-Louis Le Roux\n   France Telecom\n   2, Avenue Pierre-Marzin\n\
    \   22307 Lannion Cedex\n   France\n   EMail: jeanlouis.leroux@orange-ftgroup.com\n\
    \   Mohamad Chaitou\n   France\n   EMail: mohamad.chaitou@gmail.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Quintin Zhao (editor)\n   Huawei Technology\n   125 Nagog\
    \ Technology Park\n   Acton, MA  01719\n   US\n   EMail: qzhao@huawei.com\n  \
    \ Daniel King (editor)\n   Old Dog Consulting\n   UK\n   EMail: daniel@olddog.co.uk\n\
    \   Fabien Verhaeghe\n   Thales Communication France\n   160 Bd Valmy 92700 Colombes\n\
    \   France\n   EMail: fabien.verhaeghe@gmail.com\n   Tomonori Takeda\n   NTT Corporation\n\
    \   3-9-11, Midori-Cho\n   Musashino-Shi, Tokyo 180-8585\n   Japan\n   EMail:\
    \ takeda.tomonori@lab.ntt.co.jp\n   Zafar Ali\n   Cisco Systems, Inc.\n   2000\
    \ Innovation Drive\n   Kanata, Ontario  K2K 3E8\n   Canada\n   EMail: zali@cisco.com\n\
    \   Julien Meuric\n   France Telecom\n   2, Avenue Pierre-Marzin\n   22307 Lannion\
    \ Cedex\n   France\n   EMail: julien.meuric@orange-ftgroup.com\n"
