- contents:
  - '               The JSON Meta Application Protocol (JMAP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies a protocol for clients to efficiently query,\n
    \  fetch, and modify JSON-based data objects, with support for push\n   notification
    of changes and fast resynchronisation and for out-of-\n   band binary data upload/download.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8620.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   4\n     1.2.  The Id Data Type  . . . . . . . . . . . . . . . . . . .
    .   6\n     1.3.  The Int and UnsignedInt Data Types  . . . . . . . . . . .   6\n
    \    1.4.  The Date and UTCDate Data Types . . . . . . . . . . . . .   7\n     1.5.
    \ JSON as the Data Encoding Format  . . . . . . . . . . . .   7\n     1.6.  Terminology
    . . . . . . . . . . . . . . . . . . . . . . .   7\n       1.6.1.  User  . . .
    . . . . . . . . . . . . . . . . . . . . .   7\n       1.6.2.  Accounts  . . .
    . . . . . . . . . . . . . . . . . . .   7\n       1.6.3.  Data Types and Records
    \ . . . . . . . . . . . . . . .   8\n     1.7.  The JMAP API Model  . . . . .
    . . . . . . . . . . . . . .   8\n     1.8.  Vendor-Specific Extensions  . . .
    . . . . . . . . . . . .   9\n   2.  The JMAP Session Resource . . . . . . . .
    . . . . . . . . . .   9\n     2.1.  Example . . . . . . . . . . . . . . . . .
    . . . . . . . .  14\n     2.2.  Service Autodiscovery . . . . . . . . . . . .
    . . . . . .  15\n   3.  Structured Data Exchange  . . . . . . . . . . . . . .
    . . . .  16\n     3.1.  Making an API Request . . . . . . . . . . . . . . . .
    . .  16\n     3.2.  The Invocation Data Type  . . . . . . . . . . . . . . . .
    \ 16\n     3.3.  The Request Object  . . . . . . . . . . . . . . . . . . .  16\n
    \      3.3.1.  Example Request . . . . . . . . . . . . . . . . . . .  18\n     3.4.
    \ The Response Object . . . . . . . . . . . . . . . . . . .  18\n       3.4.1.
    \ Example Response  . . . . . . . . . . . . . . . . . .  19\n     3.5.  Omitting
    Arguments  . . . . . . . . . . . . . . . . . . .  19\n     3.6.  Errors  . . .
    . . . . . . . . . . . . . . . . . . . . . .  19\n       3.6.1.  Request-Level
    Errors  . . . . . . . . . . . . . . . .  20\n       3.6.2.  Method-Level Errors
    . . . . . . . . . . . . . . . . .  21\n     3.7.  References to Previous Method
    Results . . . . . . . . . .  22\n     3.8.  Localisation of User-Visible Strings
    \ . . . . . . . . . .  27\n     3.9.  Security  . . . . . . . . . . . . . . .
    . . . . . . . . .  28\n     3.10. Concurrency . . . . . . . . . . . . . . . .
    . . . . . . .  28\n   4.  The Core/echo Method  . . . . . . . . . . . . . . .
    . . . . .  28\n     4.1.  Example . . . . . . . . . . . . . . . . . . . . . .
    . . .  28\n   5.  Standard Methods and Naming Convention  . . . . . . . . . .
    .  29\n     5.1.  /get  . . . . . . . . . . . . . . . . . . . . . . . . . .  29\n
    \    5.2.  /changes  . . . . . . . . . . . . . . . . . . . . . . . .  30\n     5.3.
    \ /set  . . . . . . . . . . . . . . . . . . . . . . . . . .  34\n     5.4.  /copy
    . . . . . . . . . . . . . . . . . . . . . . . . . .  40\n     5.5.  /query  .
    . . . . . . . . . . . . . . . . . . . . . . . .  42\n     5.6.  /queryChanges
    . . . . . . . . . . . . . . . . . . . . . .  48\n     5.7.  Examples  . . . .
    . . . . . . . . . . . . . . . . . . . .  51\n     5.8.  Proxy Considerations  .
    . . . . . . . . . . . . . . . . .  58\n   6.  Binary Data . . . . . . . . . .
    . . . . . . . . . . . . . . .  58\n     6.1.  Uploading Binary Data . . . . .
    . . . . . . . . . . . . .  59\n     6.2.  Downloading Binary Data . . . . . .
    . . . . . . . . . . .  60\n     6.3.  Blob/copy . . . . . . . . . . . . . . .
    . . . . . . . . .  61\n   7.  Push  . . . . . . . . . . . . . . . . . . . . .
    . . . . . . .  62\n     7.1.  The StateChange Object  . . . . . . . . . . . .
    . . . . .  63\n       7.1.1.  Example . . . . . . . . . . . . . . . . . . . .
    . . .  64\n     7.2.  PushSubscription  . . . . . . . . . . . . . . . . . . .
    .  64\n       7.2.1.  PushSubscription/get  . . . . . . . . . . . . . . . .  67\n
    \      7.2.2.  PushSubscription/set  . . . . . . . . . . . . . . . .  68\n       7.2.3.
    \ Example . . . . . . . . . . . . . . . . . . . . . . .  69\n     7.3.  Event
    Source  . . . . . . . . . . . . . . . . . . . . . .  71\n   8.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  73\n     8.1.  Transport Confidentiality
    . . . . . . . . . . . . . . . .  73\n     8.2.  Authentication Scheme . . . .
    . . . . . . . . . . . . . .  73\n     8.3.  Service Autodiscovery . . . . . .
    . . . . . . . . . . . .  73\n     8.4.  JSON Parsing  . . . . . . . . . . . .
    . . . . . . . . . .  74\n     8.5.  Denial of Service . . . . . . . . . . . .
    . . . . . . . .  74\n     8.6.  Connection to Unknown Push Server . . . . . .
    . . . . . .  74\n     8.7.  Push Encryption . . . . . . . . . . . . . . . . .
    . . . .  75\n     8.8.  Traffic Analysis  . . . . . . . . . . . . . . . . . .
    . .  76\n   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .
    \ 76\n     9.1.  Assignment of jmap Service Name . . . . . . . . . . . . .  76\n
    \    9.2.  Registration of Well-Known URI Suffix for JMAP  . . . . .  76\n     9.3.
    \ Registration of the jmap URN Sub-namespace  . . . . . . .  77\n     9.4.  Creation
    of \"JMAP Capabilities\" Registry  . . . . . . . .  77\n       9.4.1.  Preliminary
    Community Review  . . . . . . . . . . . .  77\n       9.4.2.  Submit Request to
    IANA  . . . . . . . . . . . . . . .  78\n       9.4.3.  Designated Expert Review
    \ . . . . . . . . . . . . . .  78\n       9.4.4.  Change Procedures . . . . .
    . . . . . . . . . . . . .  78\n       9.4.5.  JMAP Capabilities Registry Template
    . . . . . . . . .  79\n       9.4.6.  Initial Registration for JMAP Core  . .
    . . . . . . .  79\n       9.4.7.  Registration for JMAP Error Placeholder in JMAP\n
    \              Capabilities Registry . . . . . . . . . . . . . . . .  80\n     9.5.
    \ Creation of \"JMAP Error Codes\" Registry . . . . . . . . .  80\n       9.5.1.
    \ Expert Review . . . . . . . . . . . . . . . . . . . .  80\n       9.5.2.  JMAP
    Error Codes Registry Template  . . . . . . . . .  81\n       9.5.3.  Initial Contents
    for the JMAP Error Codes Registry  .  81\n   10. References  . . . . . . . . .
    . . . . . . . . . . . . . . . .  86\n     10.1.  Normative References . . . .
    . . . . . . . . . . . . . .  86\n     10.2.  Informative References . . . . .
    . . . . . . . . . . . .  89\n   Authors' Addresses  . . . . . . . . . . . . .
    . . . . . . . . . .  90\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The JSON Meta Application Protocol (JMAP) is used for synchronising\n
    \  data, such as mail, calendars, or contacts, between a client and a\n   server.
    \ It is optimised for mobile and web environments and aims to\n   provide a consistent
    interface to different data types.\n   This specification is for the generic mechanism
    of data\n   synchronisation.  Further specifications define the data models for\n
    \  different data types that may be synchronised via JMAP.\n   JMAP is designed
    to make efficient use of limited network resources.\n   Multiple API calls may
    be batched in a single request to the server,\n   reducing round trips and improving
    battery life on mobile devices.\n   Push connections remove the need for polling,
    and an efficient delta\n   update mechanism ensures a minimum amount of data is
    transferred.\n   JMAP is designed to be horizontally scalable to a very large
    number\n   of users.  This is facilitated by separate endpoints for users after\n
    \  login, the separation of binary and structured data, and a data model\n   for
    sharing that does not allow data dependencies between accounts.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n   The underlying format used for this
      specification is JSON.\n   Consequently, the terms \"object\" and \"array\"
      as well as the four\n   primitive types (strings, numbers, booleans, and null)
      are to be\n   interpreted as described in Section 1 of [RFC8259].  Unless otherwise\n
      \  noted, all the property names and values are case sensitive.\n   Some examples
      in this document contain \"partial\" JSON documents used\n   for illustrative
      purposes.  In these examples, three periods \"...\"\n   are used to indicate
      a portion of the document that has been removed\n   for compactness.\n   For
      compatibility with publishing requirements, line breaks have been\n   inserted
      inside long JSON strings, with the following continuation\n   lines indented.
      \ To form the valid JSON example, any line breaks\n   inside a string must be
      replaced with a space and any other white\n   space after the line break removed.\n
      \  Unless otherwise specified, examples of API exchanges only show the\n   methodCalls
      array of the Request object or the methodResponses array\n   of the Response
      object.  For compactness, the rest of the Request/\n   Response object is omitted.\n
      \  Type signatures are given for all JSON values in this document.  The\n   following
      conventions are used:\n   o  \"*\" - The type is undefined (the value could
      be any type, although\n      permitted values may be constrained by the context
      of this value).\n   o  \"String\" - The JSON string type.\n   o  \"Number\"
      - The JSON number type.\n   o  \"Boolean\" - The JSON boolean type.\n   o  \"A[B]\"
      - A JSON object where the keys are all of type \"A\", and the\n      values
      are all of type \"B\".\n   o  \"A[]\" - An array of values of type \"A\".\n
      \  o  \"A|B\" - The value is either of type \"A\" or of type \"B\".\n   Other
      types may also be given, with their representation defined\n   elsewhere in
      this document.\n   Object properties may also have a set of attributes defined
      along\n   with the type signature.  These have the following meanings:\n   o
      \ \"server-set\" -- Only the server can set the value for this\n      property.
      \ The client MUST NOT send this property when creating a\n      new object of
      this type.\n   o  \"immutable\" -- The value MUST NOT change after the object
      is\n      created.\n   o  \"default\" -- (This is followed by a JSON value).
      \ The value that\n      will be used for this property if it is omitted in an
      argument or\n      when creating a new object of this type.\n"
    title: 1.1.  Notational Conventions
  - contents:
    - "1.2.  The Id Data Type\n   All record ids are assigned by the server and are
      immutable.\n   Where \"Id\" is given as a data type, it means a \"String\" of
      at least 1\n   and a maximum of 255 octets in size, and it MUST only contain\n
      \  characters from the \"URL and Filename Safe\" base64 alphabet, as\n   defined
      in Section 5 of [RFC4648], excluding the pad character (\"=\").\n   This means
      the allowed characters are the ASCII alphanumeric\n   characters (\"A-Za-z0-9\"),
      hyphen (\"-\"), and underscore (\"_\").\n   These characters are safe to use
      in almost any context (e.g.,\n   filesystems, URIs, and IMAP atoms).  For maximum
      safety, servers\n   SHOULD also follow defensive allocation strategies to avoid
      creating\n   risks where glob completion or data type detection may be present\n
      \  (e.g., on filesystems or in spreadsheets).  In particular, it is wise\n   to
      avoid:\n   o  Ids starting with a dash\n   o  Ids starting with digits\n   o
      \ Ids that contain only digits\n   o  Ids that differ only by ASCII case (for
      example, A vs. a)\n   o  the specific sequence of three characters \"NIL\" (because
      this\n      sequence can be confused with the IMAP protocol expression of the\n
      \     null value)\n   A good solution to these issues is to prefix every id
      with a single\n   alphabetical character.\n"
    title: 1.2.  The Id Data Type
  - contents:
    - "1.3.  The Int and UnsignedInt Data Types\n   Where \"Int\" is given as a data
      type, it means an integer in the range\n   -2^53+1 <= value <= 2^53-1, the safe
      range for integers stored in a\n   floating-point double, represented as a JSON
      \"Number\".\n   Where \"UnsignedInt\" is given as a data type, it means an \"Int\"
      where\n   the value MUST be in the range 0 <= value <= 2^53-1.\n"
    title: 1.3.  The Int and UnsignedInt Data Types
  - contents:
    - "1.4.  The Date and UTCDate Data Types\n   Where \"Date\" is given as a type,
      it means a string in \"date-time\"\n   format [RFC3339].  To ensure a normalised
      form, the \"time-secfrac\"\n   MUST always be omitted if zero, and any letters
      in the string (e.g.,\n   \"T\" and \"Z\") MUST be uppercase.  For example,\n
      \  \"2014-10-30T14:12:00+08:00\".\n   Where \"UTCDate\" is given as a type,
      it means a \"Date\" where the\n   \"time-offset\" component MUST be \"Z\" (i.e.,
      it must be in UTC time).\n   For example, \"2014-10-30T06:12:00Z\".\n"
    title: 1.4.  The Date and UTCDate Data Types
  - contents:
    - "1.5.  JSON as the Data Encoding Format\n   JSON is a text-based data interchange
      format as specified in\n   [RFC8259].  The Internet JSON (I-JSON) format defined
      in [RFC7493] is\n   a strict subset of this, adding restrictions to avoid potentially\n
      \  confusing scenarios (for example, it mandates that an object MUST NOT\n   have
      two members with the same name).\n   All data sent from the client to the server
      or from the server to the\n   client (except binary file upload/download) MUST
      be valid I-JSON\n   according to the RFC and is therefore case sensitive and
      encoded in\n   UTF-8 [RFC3629].\n"
    title: 1.5.  JSON as the Data Encoding Format
  - contents:
    - '1.6.  Terminology

      '
    - contents:
      - "1.6.1.  User\n   A user is a person accessing data via JMAP.  A user has
        a set of\n   permissions determining the data that they can see.\n"
      title: 1.6.1.  User
    - contents:
      - "1.6.2.  Accounts\n   An account is a collection of data.  A single account
        may contain an\n   arbitrary set of data types, for example, a collection
        of mail,\n   contacts, and calendars.  Most JMAP methods take a mandatory\n
        \  \"accountId\" argument that specifies on which account the operations\n
        \  are to take place.\n   An account is not the same as a user, although it
        is common for a\n   primary account to directly belong to the user.  For example,
        you may\n   have an account that contains data for a group or business, to
        which\n   multiple users have access.\n   A single set of credentials may
        provide access to multiple accounts,\n   for example, if another user is sharing
        their work calendar with the\n   authenticated user or if there is a group
        mailbox for a support-desk\n   inbox.\n   In the event of a severe internal
        error, a server may have to\n   reallocate ids or do something else that violates
        standard JMAP data\n   constraints for an account.  In this situation, the
        data on the\n   server is no longer compatible with cached data the client
        may have\n   from before.  The server MUST treat this as though the account
        has\n   been deleted and then recreated with a new account id.  Clients will\n
        \  then be forced to throw away any data with the old account id and\n   refetch
        all data from scratch.\n"
      title: 1.6.2.  Accounts
    - contents:
      - "1.6.3.  Data Types and Records\n   JMAP provides a uniform interface for
        creating, retrieving, updating,\n   and deleting various types of objects.
        \ A \"data type\" is a collection\n   of named, typed properties, just like
        the schema for a database\n   table.  Each instance of a data type is called
        a \"record\".\n   The id of a record is immutable and assigned by the server.
        \ The id\n   MUST be unique among all records of the *same type* within the
        *same\n   account*.  Ids may clash across accounts or for two records of\n
        \  different types within the same account.\n"
      title: 1.6.3.  Data Types and Records
    title: 1.6.  Terminology
  - contents:
    - "1.7.  The JMAP API Model\n   JMAP uses HTTP [RFC7230] to expose API, push,
      upload, and download\n   resources.  All HTTP requests MUST use the \"https://\"
      scheme (HTTP\n   over TLS [RFC2818]).  All HTTP requests MUST be authenticated.\n
      \  An authenticated client can fetch the user's Session object with\n   details
      about the data and capabilities the server can provide as\n   shown in Section
      2.  The client may then exchange data with the\n   server in the following ways:\n
      \  1.  The client may make an API request to the server to get or set\n       structured
      data.  This request consists of an ordered series of\n       method calls.  These
      are processed by the server, which then\n       returns an ordered series of
      responses.  This is described in\n       Sections 3, 4, and 5.\n   2.  The client
      may download or upload binary files from/to the\n       server.  This is detailed
      in Section 6.\n   3.  The client may connect to a push channel on the server,
      to be\n       notified when data has changed.  This is explained in Section
      7.\n"
    title: 1.7.  The JMAP API Model
  - contents:
    - "1.8.  Vendor-Specific Extensions\n   Individual services will have custom features
      they wish to expose\n   over JMAP.  This may take the form of extra data types
      and/or methods\n   not in the spec, extra arguments to JMAP methods, or extra
      properties\n   on existing data types (which may also appear in arguments to
      methods\n   that take property names).\n   The server can advertise custom extensions
      it supports by including\n   the identifiers in the capabilities object.  Identifiers
      for vendor\n   extensions MUST be a URL belonging to a domain owned by the vendor,\n
      \  to avoid conflict.  The URL SHOULD resolve to documentation for the\n   changes
      the extension makes.\n   The client MUST opt in to use an extension by passing
      the appropriate\n   capability identifier in the \"using\" array of the Request
      object, as\n   described in Section 3.3.  The server MUST only follow the\n
      \  specifications that are opted into and behave as though it does not\n   implement
      anything else when processing a request.  This is to ensure\n   compatibility
      with clients that don't know about a specific custom\n   extension and for compatibility
      with future versions of JMAP.\n"
    title: 1.8.  Vendor-Specific Extensions
  title: 1.  Introduction
- contents:
  - "2.  The JMAP Session Resource\n   You need two things to connect to a JMAP server:\n
    \  1.  The URL for the JMAP Session resource.  This may be requested\n       directly
    from the user or discovered automatically based on a\n       username domain (see
    Section 2.2 below).\n   2.  Credentials to authenticate with.  How to obtain credentials
    is\n       out of scope for this document.\n   A successful authenticated GET
    request to the JMAP Session resource\n   MUST return a JSON-encoded *Session*
    object, giving details about the\n   data and capabilities the server can provide
    to the client given\n   those credentials.  It has the following properties:\n
    \  o  capabilities: \"String[Object]\"\n      An object specifying the capabilities
    of this server.  Each key is\n      a URI for a capability supported by the server.
    \ The value for\n      each of these keys is an object with further information
    about the\n      server's capabilities in relation to that capability.\n      The
    client MUST ignore any properties it does not understand.\n      The capabilities
    object MUST include a property called\n      \"urn:ietf:params:jmap:core\".  The
    value of this property is an\n      object that MUST contain the following information
    on server\n      capabilities (suggested minimum values for limits are supplied\n
    \     that allow clients to make efficient use of the network):\n      *  maxSizeUpload:
    \"UnsignedInt\"\n         The maximum file size, in octets, that the server will
    accept\n         for a single file upload (for any purpose).  Suggested minimum:\n
    \        50,000,000.\n      *  maxConcurrentUpload: \"UnsignedInt\"\n         The
    maximum number of concurrent requests the server will\n         accept to the
    upload endpoint.  Suggested minimum: 4.\n      *  maxSizeRequest: \"UnsignedInt\"\n
    \        The maximum size, in octets, that the server will accept for a\n         single
    request to the API endpoint.  Suggested minimum:\n         10,000,000.\n      *
    \ maxConcurrentRequests: \"UnsignedInt\"\n         The maximum number of concurrent
    requests the server will\n         accept to the API endpoint.  Suggested minimum:
    4.\n      *  maxCallsInRequest: \"UnsignedInt\"\n         The maximum number of
    method calls the server will accept in a\n         single request to the API endpoint.
    \ Suggested minimum: 16.\n      *  maxObjectsInGet: \"UnsignedInt\"\n         The
    maximum number of objects that the client may request in a\n         single /get
    type method call.  Suggested minimum: 500.\n      *  maxObjectsInSet: \"UnsignedInt\"\n
    \        The maximum number of objects the client may send to create,\n         update,
    or destroy in a single /set type method call.  This is\n         the combined
    total, e.g., if the maximum is 10, you could not\n         create 7 objects and
    destroy 6, as this would be 13 actions,\n         which exceeds the limit.  Suggested
    minimum: 500.\n      *  collationAlgorithms: \"String[]\"\n         A list of
    identifiers for algorithms registered in the\n         collation registry, as
    defined in [RFC4790], that the server\n         supports for sorting when querying
    records.\n      Specifications for future capabilities will define their own\n
    \     properties on the capabilities object.\n      Servers MAY advertise vendor-specific
    JMAP extensions, as\n      described in Section 1.8.  To avoid conflict, an identifier
    for a\n      vendor-specific extension MUST be a URL with a domain owned by the\n
    \     vendor.  Clients MUST opt in to any capability it wishes to use\n      (see
    Section 3.3).\n   o  accounts: \"Id[Account]\"\n      A map of an account id to
    an Account object for each account (see\n      Section 1.6.2) the user has access
    to.  An *Account* object has\n      the following properties:\n      *  name:
    \"String\"\n         A user-friendly string to show when presenting content from\n
    \        this account, e.g., the email address representing the owner of\n         the
    account.\n      *  isPersonal: \"Boolean\"\n         This is true if the account
    belongs to the authenticated user\n         rather than a group account or a personal
    account of another\n         user that has been shared with them.\n      *  isReadOnly:
    \"Boolean\"\n         This is true if the entire account is read-only.\n      *
    \ accountCapabilities: \"String[Object]\"\n         The set of capability URIs
    for the methods supported in this\n         account.  Each key is a URI for a
    capability that has methods\n         you can use with this account.  The value
    for each of these\n         keys is an object with further information about the
    account's\n         permissions and restrictions with respect to this capability,\n
    \        as defined in the capability's specification.\n         The client MUST
    ignore any properties it does not understand.\n         The server advertises
    the full list of capabilities it supports\n         in the capabilities object,
    as defined above.  If the\n         capability defines new methods, the server
    MUST include it in\n         the accountCapabilities object if the user may use
    those\n         methods with this account.  It MUST NOT include it in the\n         accountCapabilities
    object if the user cannot use those methods\n         with this account.\n         For
    example, you may have access to your own account with mail,\n         calendars,
    and contacts data and also a shared account that\n         only has contacts data
    (a business address book, for example).\n         In this case, the accountCapabilities
    property on the first\n         account would include something like\n         \"urn:ietf:params:jmap:mail\",
    \"urn:ietf:params:jmap:calendars\",\n         and \"urn:ietf:params:jmap:contacts\",
    while the second account\n         would just have the last of these.\n         Attempts
    to use the methods defined in a capability with one of\n         the accounts
    that does not support that capability are rejected\n         with an \"accountNotSupportedByMethod\"
    error (see \"Method-Level\n         Errors\", Section 3.6.2).\n   o  primaryAccounts:
    \"String[Id]\"\n      A map of capability URIs (as found in accountCapabilities)
    to the\n      account id that is considered to be the user's main or default\n
    \     account for data pertaining to that capability.  If no account\n      being
    returned belongs to the user, or in any other way there is\n      no appropriate
    way to determine a default account, there MAY be no\n      entry for a particular
    URI, even though that capability is\n      supported by the server (and in the
    capabilities object).\n      \"urn:ietf:params:jmap:core\" SHOULD NOT be present.\n
    \  o  username: \"String\"\n      The username associated with the given credentials,
    or the empty\n      string if none.\n   o  apiUrl: \"String\"\n      The URL to
    use for JMAP API requests.\n   o  downloadUrl: \"String\"\n      The URL endpoint
    to use when downloading files, in URI Template\n      (level 1) format [RFC6570].
    \ The URL MUST contain variables called\n      \"accountId\", \"blobId\", \"type\",
    and \"name\".  The use of these\n      variables is described in Section 6.2.
    \ Due to potential encoding\n      issues with slashes in content types, it is
    RECOMMENDED to put the\n      \"type\" variable in the query section of the URL.\n
    \  o  uploadUrl: \"String\"\n      The URL endpoint to use when uploading files,
    in URI Template\n      (level 1) format [RFC6570].  The URL MUST contain a variable\n
    \     called \"accountId\".  The use of this variable is described in\n      Section
    6.1.\n   o  eventSourceUrl: \"String\"\n      The URL to connect to for push events,
    as described in\n      Section 7.3, in URI Template (level 1) format [RFC6570].
    \ The URL\n      MUST contain variables called \"types\", \"closeafter\", and
    \"ping\".\n      The use of these variables is described in Section 7.3.\n   o
    \ state: \"String\"\n      A (preferably short) string representing the state
    of this object\n      on the server.  If the value of any other property on the
    Session\n      object changes, this string will change.  The current value is\n
    \     also returned on the API Response object (see Section 3.4),\n      allowing
    clients to quickly determine if the session information\n      has changed (e.g.,
    an account has been added or removed), so they\n      need to refetch the object.\n
    \  To ensure future compatibility, other properties MAY be included on\n   the
    Session object.  Clients MUST ignore any properties they are not\n   expecting.\n
    \  Implementors must take care to avoid inappropriate caching of the\n   Session
    object at the HTTP layer.  Since the client should only\n   refetch when it detects
    there is a change (via the sessionState\n   property of an API response), it is
    RECOMMENDED to disable HTTP\n   caching altogether, for example, by setting \"Cache-Control:
    no-cache,\n   no-store, must-revalidate\" on the response.\n"
  - contents:
    - "2.1.  Example\n   In the following example Session object, the user has access
      to their\n   own mail and contacts via JMAP, as well as read-only access to
      shared\n   mail from another user.  The server is advertising a custom\n   \"https://example.com/apis/foobar\"
      capability.\n   {\n     \"capabilities\": {\n       \"urn:ietf:params:jmap:core\":
      {\n         \"maxSizeUpload\": 50000000,\n         \"maxConcurrentUpload\":
      8,\n         \"maxSizeRequest\": 10000000,\n         \"maxConcurrentRequest\":
      8,\n         \"maxCallsInRequest\": 32,\n         \"maxObjectsInGet\": 256,\n
      \        \"maxObjectsInSet\": 128,\n         \"collationAlgorithms\": [\n           \"i;ascii-numeric\",\n
      \          \"i;ascii-casemap\",\n           \"i;unicode-casemap\"\n         ]\n
      \      },\n       \"urn:ietf:params:jmap:mail\": {}\n       \"urn:ietf:params:jmap:contacts\":
      {},\n       \"https://example.com/apis/foobar\": {\n         \"maxFoosFinangled\":
      42\n       }\n     },\n     \"accounts\": {\n       \"A13824\": {\n         \"name\":
      \"john@example.com\",\n         \"isPersonal\": true,\n         \"isReadOnly\":
      false,\n         \"accountCapabilities\": {\n           \"urn:ietf:params:jmap:mail\":
      {\n             \"maxMailboxesPerEmail\": null,\n             \"maxMailboxDepth\":
      10,\n             ...\n           },\n           \"urn:ietf:params:jmap:contacts\":
      {\n             ...\n           }\n         }\n       },\n       \"A97813\":
      {\n         \"name\": \"jane@example.com\",\n         \"isPersonal\": false,\n
      \        \"isReadOnly\": true,\n         \"accountCapabilities\": {\n           \"urn:ietf:params:jmap:mail\":
      {\n             \"maxMailboxesPerEmail\": 1,\n             \"maxMailboxDepth\":
      10,\n             ...\n           }\n         }\n       }\n     },\n     \"primaryAccounts\":
      {\n       \"urn:ietf:params:jmap:mail\": \"A13824\",\n       \"urn:ietf:params:jmap:contacts\":
      \"A13824\"\n     },\n     \"username\": \"john@example.com\",\n     \"apiUrl\":
      \"https://jmap.example.com/api/\",\n     \"downloadUrl\": \"https://jmap.example.com\n
      \      /download/{accountId}/{blobId}/{name}?accept={type}\",\n     \"uploadUrl\":
      \"https://jmap.example.com/upload/{accountId}/\",\n     \"eventSourceUrl\":
      \"https://jmap.example.com\n       /eventsource/?types={types}&closeafter={closeafter}&ping={ping}\",\n
      \    \"state\": \"75128aab4b1b\"\n   }\n"
    title: 2.1.  Example
  - contents:
    - "2.2.  Service Autodiscovery\n   There are two standardised autodiscovery methods
      in use for Internet\n   protocols:\n   o  DNS SRV (see [RFC2782], [RFC6186],
      and [RFC6764])\n   o  .well-known/servicename (see [RFC8615])\n   A JMAP-supporting
      host for the domain \"example.com\" SHOULD publish a\n   SRV record \"_jmap._tcp.example.com\"
      that gives a hostname and port\n   (usually port \"443\").  The JMAP Session
      resource is then\n   \"https://${hostname}[:${port}]/.well-known/jmap\" (following
      any\n   redirects).\n   If the client has a username in the form of an email
      address, it MAY\n   use the domain portion of this to attempt autodiscovery
      of the JMAP\n   server.\n"
    title: 2.2.  Service Autodiscovery
  title: 2.  The JMAP Session Resource
- contents:
  - "3.  Structured Data Exchange\n   The client may make an API request to the server
    to get or set\n   structured data.  This request consists of an ordered series
    of\n   method calls.  These are processed by the server, which then returns\n
    \  an ordered series of responses.\n"
  - contents:
    - "3.1.  Making an API Request\n   To make an API request, the client makes an
      authenticated POST\n   request to the API resource, which is defined by the
      \"apiUrl\"\n   property in the Session object (see Section 2).\n   The request
      MUST be of type \"application/json\" and consist of a\n   single JSON-encoded
      \"Request\" object, as defined in Section 3.3.  If\n   successful, the response
      MUST also be of type \"application/json\" and\n   consist of a single \"Response\"
      object, as defined in Section 3.4.\n"
    title: 3.1.  Making an API Request
  - contents:
    - "3.2.  The Invocation Data Type\n   Method calls and responses are represented
      by the *Invocation* data\n   type.  This is a tuple, represented as a JSON array
      containing three\n   elements:\n   1.  A \"String\" *name* of the method to
      call or of the response.\n   2.  A \"String[*]\" object containing named *arguments*
      for that method\n       or response.\n   3.  A \"String\" *method call id*:
      an arbitrary string from the client\n       to be echoed back with the responses
      emitted by that method call\n       (a method may return 1 or more responses,
      as it may make implicit\n       calls to other methods; all responses initiated
      by this method\n       call get the same method call id in the response).\n"
    title: 3.2.  The Invocation Data Type
  - contents:
    - "3.3.  The Request Object\n   A *Request* object has the following properties:\n
      \  o  using: \"String[]\"\n      The set of capabilities the client wishes to
      use.  The client MAY\n      include capability identifiers even if the method
      calls it makes\n      do not utilise those capabilities.  The server advertises
      the set\n      of specifications it supports in the Session object (see\n      Section
      2), as keys on the \"capabilities\" property.\n   o  methodCalls: \"Invocation[]\"\n
      \     An array of method calls to process on the server.  The method\n      calls
      MUST be processed sequentially, in order.\n   o  createdIds: \"Id[Id]\" (optional)\n
      \     A map of a (client-specified) creation id to the id the server\n      assigned
      when a record was successfully created.\n      As described later in this specification,
      some records may have a\n      property that contains the id of another record.
      \ To allow more\n      efficient network usage, you can set this property to
      reference a\n      record created earlier in the same API request.  Since the
      real id\n      is unknown when the request is created, the client can instead\n
      \     specify the creation id it assigned, prefixed with a \"#\" (see\n      Section
      5.3 for more details).\n      As the server processes API requests, any time
      it successfully\n      creates a new record, it adds the creation id to this
      map (see the\n      \"create\" argument to /set in Section 5.3), with the server-\n
      \     assigned real id as the value.  If it comes across a reference to\n      a
      creation id in a create/update, it looks it up in the map and\n      replaces
      the reference with the real id, if found.\n      The client can pass an initial
      value for this map as the\n      \"createdIds\" property of the Request object.
      \ This may be an empty\n      object.  If given in the request, the response
      will also include a\n      createdIds property.  This allows proxy servers to
      easily split a\n      JMAP request into multiple JMAP requests to send to different\n
      \     servers.  For example, it could send the first two method calls to\n      server
      A, then the third to server B, before sending the fourth to\n      server A
      again.  By passing the createdIds of the previous\n      response to the next
      request, it can ensure all of these still\n      resolve.  See Section 5.8 for
      further discussion of proxy\n      considerations.\n   Future specifications
      MAY add further properties to the Request\n   object to extend the semantics.
      \ To ensure forwards compatibility, a\n   server MUST ignore any other properties
      it does not understand on the\n   JMAP Request object.\n"
    - contents:
      - '3.3.1.  Example Request

        '
      - "{\n  \"using\": [ \"urn:ietf:params:jmap:core\", \"urn:ietf:params:jmap:mail\"
        ],\n  \"methodCalls\": [\n    [ \"method1\", {\n      \"arg1\": \"arg1data\",\n
        \     \"arg2\": \"arg2data\"\n    }, \"c1\" ],\n    [ \"method2\", {\n      \"arg1\":
        \"arg1data\"\n    }, \"c2\" ],\n    [ \"method3\", {}, \"c3\" ]\n  ]\n"
      - '}

        '
      title: 3.3.1.  Example Request
    title: 3.3.  The Request Object
  - contents:
    - "3.4.  The Response Object\n   A *Response* object has the following properties:\n
      \  o  methodResponses: \"Invocation[]\"\n      An array of responses, in the
      same format as the \"methodCalls\" on\n      the Request object.  The output
      of the methods MUST be added to\n      the \"methodResponses\" array in the
      same order that the methods are\n      processed.\n   o  createdIds: \"Id[Id]\"
      (optional; only returned if given in the\n      request)\n      A map of a (client-specified)
      creation id to the id the server\n      assigned when a record was successfully
      created.  This MUST\n      include all creation ids passed in the original createdIds\n
      \     parameter of the Request object, as well as any additional ones\n      added
      for newly created records.\n   o  sessionState: \"String\"\n      The current
      value of the \"state\" string on the Session object, as\n      described in
      Section 2.  Clients may use this to detect if this\n      object has changed
      and needs to be refetched.\n   Unless otherwise specified, if the method call
      completed\n   successfully, its response name is the same as the method name
      in the\n   request.\n"
    - contents:
      - "3.4.1.  Example Response\n                   {\n                     \"methodResponses\":
        [\n                       [ \"method1\", {\n                         \"arg1\":
        3,\n                         \"arg2\": \"foo\"\n                       },
        \"c1\" ],\n                       [ \"method2\", {\n                         \"isBlah\":
        true\n                       }, \"c2\" ],\n                       [ \"anotherResponseFromMethod2\",
        {\n                         \"data\": 10,\n                         \"yetmoredata\":
        \"Hello\"\n                       }, \"c2\"],\n                       [ \"error\",
        {\n                         \"type\":\"unknownMethod\"\n                       },
        \"c3\" ]\n                     ],\n                     \"sessionState\":
        \"75128aab4b1b\"\n                   }\n"
      title: 3.4.1.  Example Response
    title: 3.4.  The Response Object
  - contents:
    - "3.5.  Omitting Arguments\n   An argument to a method may be specified to have
      a default value.  If\n   omitted by the client, the server MUST treat the method
      call the same\n   as if the default value had been specified.  Similarly, the
      server\n   MAY omit any argument in a response that has the default value.\n
      \  Unless otherwise specified in a method description, null is the\n   default
      value for any argument in a request or response where this is\n   allowed by
      the type signature.  Other arguments may only be omitted\n   if an explicit
      default value is defined in the method description.\n"
    title: 3.5.  Omitting Arguments
  - contents:
    - "3.6.  Errors\n   There are three different levels of granularity at which an
      error may\n   be returned in JMAP.\n   When an API request is made, the request
      as a whole may be rejected\n   due to rate limiting, malformed JSON, request
      for an unknown\n   capability, etc.  In this case, the entire request is rejected
      with\n   an appropriate HTTP error response code and an additional JSON body\n
      \  with more detail for the client.\n   Provided the request itself is syntactically
      valid (the JSON is valid\n   and when decoded, it matches the type signature
      of a Request object),\n   the methods within it are executed sequentially by
      the server.  Each\n   method may individually fail, for example, if invalid
      arguments are\n   given or an unknown method name is called.\n   Finally, methods
      that make changes to the server state often act upon\n   a number of different
      records within a single call.  Each record\n   change may be separately rejected
      with a SetError, as described in\n   Section 5.3.\n"
    - contents:
      - "3.6.1.  Request-Level Errors\n   When an HTTP error response is returned
        to the client, the server\n   SHOULD return a JSON \"problem details\" object
        as the response body,\n   as per [RFC7807].\n   The following problem types
        are defined:\n   o  \"urn:ietf:params:jmap:error:unknownCapability\"\n      The
        client included a capability in the \"using\" property of the\n      request
        that the server does not support.\n   o  \"urn:ietf:params:jmap:error:notJSON\"\n
        \     The content type of the request was not \"application/json\" or the\n
        \     request did not parse as I-JSON.\n   o  \"urn:ietf:params:jmap:error:notRequest\"\n
        \     The request parsed as JSON but did not match the type signature of\n
        \     the Request object.\n   o  \"urn:ietf:params:jmap:error:limit\"\n      The
        request was not processed as it would have exceeded one of the\n      request
        limits defined on the capability object, such as\n      maxSizeRequest, maxCallsInRequest,
        or maxConcurrentRequests.  A\n      \"limit\" property MUST also be present
        on the \"problem details\"\n      object, containing the name of the limit
        being applied.\n"
      - contents:
        - "3.6.1.1.  Example\n       {\n         \"type\": \"urn:ietf:params:jmap:error:unknownCapability\",\n
          \        \"status\": 400,\n         \"detail\": \"The Request object used
          capability\n           'https://example.com/apis/foobar', which is not supported\n
          \          by this server.\"\n       }\n   Another example:\n     {\n       \"type\":
          \"urn:ietf:params:jmap:error:limit\",\n       \"limit\": \"maxSizeRequest\",\n
          \      \"status\": 400,\n       \"detail\": \"The request is larger than
          the server is willing to\n                  process.\"\n     }\n"
        title: 3.6.1.1.  Example
      title: 3.6.1.  Request-Level Errors
    - contents:
      - "3.6.2.  Method-Level Errors\n   If a method encounters an error, the appropriate
        \"error\" response\n   MUST be inserted at the current point in the \"methodResponses\"
        array\n   and, unless otherwise specified, further processing MUST NOT happen\n
        \  within that method call.\n   Any further method calls in the request MUST
        then be processed as\n   normal.  Errors at the method level MUST NOT generate
        an HTTP-level\n   error.\n   An \"error\" response looks like this:\n                         [
        \"error\", {\n                           \"type\": \"unknownMethod\"\n                         },
        \"call-id\" ]\n   The response name is \"error\", and it MUST have a type
        property.\n   Other properties may be present with further information; these
        are\n   detailed in the error type descriptions where appropriate.\n   With
        the exception of when the \"serverPartialFail\" error is returned,\n   the
        externally visible state of the server MUST NOT have changed if\n   an error
        is returned at the method level.\n   The following error types are defined,
        which may be returned for any\n   method call where appropriate:\n   \"serverUnavailable\":
        Some internal server resource was temporarily\n   unavailable.  Attempting
        the same operation later (perhaps after a\n   backoff with a random factor)
        may succeed.\n   \"serverFail\": An unexpected or unknown error occurred during
        the\n   processing of the call.  A \"description\" property should provide
        more\n   details about the error.  The method call made no changes to the\n
        \  server's state.  Attempting the same operation again is expected to\n   fail
        again.  Contacting the service administrator is likely necessary\n   to resolve
        this problem if it is persistent.\n   \"serverPartialFail\": Some, but not
        all, expected changes described by\n   the method occurred.  The client MUST
        resynchronise impacted data to\n   determine server state.  Use of this error
        is strongly discouraged.\n   \"unknownMethod\": The server does not recognise
        this method name.\n   \"invalidArguments\": One of the arguments is of the
        wrong type or is\n   otherwise invalid, or a required argument is missing.
        \ A\n   \"description\" property MAY be present to help debug with an\n   explanation
        of what the problem was.  This is a non-localised string,\n   and it is not
        intended to be shown directly to end users.\n   \"invalidResultReference\":
        The method used a result reference for one\n   of its arguments (see Section
        3.7), but this failed to resolve.\n   \"forbidden\": The method and arguments
        are valid, but executing the\n   method would violate an Access Control List
        (ACL) or other\n   permissions policy.\n   \"accountNotFound\": The accountId
        does not correspond to a valid\n   account.\n   \"accountNotSupportedByMethod\":
        The accountId given corresponds to a\n   valid account, but the account does
        not support this method or data\n   type.\n   \"accountReadOnly\": This method
        modifies state, but the account is\n   read-only (as returned on the corresponding
        Account object in the\n   JMAP Session resource).\n   Further possible errors
        for a particular method are specified in the\n   method descriptions.\n   Further
        general errors MAY be defined in future RFCs.  Should a\n   client receive
        an error type it does not understand, it MUST treat it\n   the same as the
        \"serverFail\" type.\n"
      title: 3.6.2.  Method-Level Errors
    title: 3.6.  Errors
  - contents:
    - "3.7.  References to Previous Method Results\n   To allow clients to make more
      efficient use of the network and avoid\n   round trips, an argument to one method
      can be taken from the result\n   of a previous method call in the same request.\n
      \  To do this, the client prefixes the argument name with \"#\" (an\n   octothorpe).
      \ The value is a ResultReference object as described\n   below.  When processing
      a method call, the server MUST first check\n   the arguments object for any
      names beginning with \"#\".  If found, the\n   result reference should be resolved
      and the value used as the \"real\"\n   argument.  The method is then processed
      as normal.  If any result\n   reference fails to resolve, the whole method MUST
      be rejected with an\n   \"invalidResultReference\" error.  If an arguments object
      contains the\n   same argument name in normal and referenced form (e.g., \"foo\"
      and\n   \"#foo\"), the method MUST return an \"invalidArguments\" error.\n   A
      *ResultReference* object has the following properties:\n   o  resultOf: \"String\"\n
      \     The method call id (see Section 3.2) of a previous method call in\n      the
      current request.\n   o  name: \"String\"\n      The required name of a response
      to that method call.\n   o  path: \"String\"\n      A pointer into the arguments
      of the response selected via the name\n      and resultOf properties.  This
      is a JSON Pointer [RFC6901], except\n      it also allows the use of \"*\" to
      map through an array (see the\n      description below).\n   To resolve:\n   1.
      \ Find the first response with a method call id identical to the\n       \"resultOf\"
      property of the ResultReference in the\n       \"methodResponses\" array from
      previously processed method calls in\n       the same request.  If none, evaluation
      fails.\n   2.  If the response name is not identical to the \"name\" property
      of\n       the ResultReference, evaluation fails.\n   3.  Apply the \"path\"
      to the arguments object of the response (the\n       second item in the response
      array) following the JSON Pointer\n       algorithm [RFC6901], except with the
      following addition in\n       \"Evaluation\" (see Section 4):\n       If the
      currently referenced value is a JSON array, the reference\n       token may
      be exactly the single character \"*\", making the new\n       referenced value
      the result of applying the rest of the JSON\n       Pointer tokens to every
      item in the array and returning the\n       results in the same order in a new
      array.  If the result of\n       applying the rest of the pointer tokens to
      each item was itself\n       an array, the contents of this array are added
      to the output\n       rather than the array itself (i.e., the result is flattened
      from\n       an array of arrays to a single array).  If the result of applying\n
      \      the rest of the pointer tokens to a value was itself an array,\n       its
      items should be included individually in the output rather\n       than including
      the array itself (i.e., the result is flattened\n       from an array of arrays
      to a single array).\n   As a simple example, suppose we have the following API
      request\n   \"methodCalls\":\n                      [[ \"Foo/changes\", {\n
      \                         \"accountId\": \"A1\",\n                          \"sinceState\":
      \"abcdef\"\n                      }, \"t0\" ],\n                      [ \"Foo/get\",
      {\n                          \"accountId\": \"A1\",\n                          \"#ids\":
      {\n                              \"resultOf\": \"t0\",\n                              \"name\":
      \"Foo/changes\",\n                              \"path\": \"/created\"\n                          }\n
      \                     }, \"t1\" ]]\n   After executing the first method call,
      the \"methodResponses\" array\n   is:\n                      [[ \"Foo/changes\",
      {\n                          \"accountId\": \"A1\",\n                          \"oldState\":
      \"abcdef\",\n                          \"newState\": \"123456\",\n                          \"hasMoreChanges\":
      false,\n                          \"created\": [ \"f1\", \"f4\" ],\n                          \"updated\":
      [],\n                          \"destroyed\": []\n                      }, \"t0\"
      ]]\n   To execute the \"Foo/get\" call, we look through the arguments and find\n
      \  there is one with a \"#\" prefix.  To resolve this, we apply the\n   algorithm
      above:\n   1.  Find the first response with method call id \"t0\".  The \"Foo/\n
      \      changes\" response fulfils this criterion.\n   2.  Check that the response
      name is the same as in the result\n       reference.  It is, so this is fine.\n
      \  3.  Apply the \"path\" as a JSON Pointer to the arguments object.  This\n
      \      simply selects the \"created\" property, so the result of\n       evaluating
      is: [ \"f1\", \"f4\" ].\n   The JMAP server now continues to process the \"Foo/get\"
      call as though\n   the arguments were:\n                         {\n                             \"accountId\":
      \"A1\",\n                             \"ids\": [ \"f1\", \"f4\" ]\n                         }\n
      \  Now, a more complicated example using the JMAP Mail data model: fetch\n   the
      \"from\"/\"date\"/\"subject\" for every Email in the first 10 Threads\n   in
      the inbox (sorted newest first):\n      [[ \"Email/query\", {\n        \"accountId\":
      \"A1\",\n        \"filter\": { \"inMailbox\": \"id_of_inbox\" },\n        \"sort\":
      [{ \"property\": \"receivedAt\", \"isAscending\": false }],\n        \"collapseThreads\":
      true,\n        \"position\": 0,\n        \"limit\": 10,\n        \"calculateTotal\":
      true\n      }, \"t0\" ],\n      [ \"Email/get\", {\n        \"accountId\": \"A1\",\n
      \       \"#ids\": {\n          \"resultOf\": \"t0\",\n          \"name\": \"Email/query\",\n
      \         \"path\": \"/ids\"\n        },\n        \"properties\": [ \"threadId\"
      ]\n      }, \"t1\" ],\n      [ \"Thread/get\", {\n        \"accountId\": \"A1\",\n
      \       \"#ids\": {\n          \"resultOf\": \"t1\",\n          \"name\": \"Email/get\",\n
      \         \"path\": \"/list/*/threadId\"\n        }\n      }, \"t2\" ],\n      [
      \"Email/get\", {\n        \"accountId\": \"A1\",\n        \"#ids\": {\n          \"resultOf\":
      \"t2\",\n          \"name\": \"Thread/get\",\n          \"path\": \"/list/*/emailIds\"\n
      \       },\n        \"properties\": [ \"from\", \"receivedAt\", \"subject\"
      ]\n      }, \"t3\" ]]\n   After executing the first 3 method calls, the \"methodResponses\"
      array\n   might be:\n       [[ \"Email/query\", {\n           \"accountId\":
      \"A1\",\n           \"queryState\": \"abcdefg\",\n           \"canCalculateChanges\":
      true,\n           \"position\": 0,\n           \"total\": 101,\n           \"ids\":
      [ \"msg1023\", \"msg223\", \"msg110\", \"msg93\", \"msg91\",\n               \"msg38\",
      \"msg36\", \"msg33\", \"msg11\", \"msg1\" ]\n       }, \"t0\" ],\n       [ \"Email/get\",
      {\n           \"accountId\": \"A1\",\n           \"state\": \"123456\",\n           \"list\":
      [{\n               \"id\": \"msg1023\",\n               \"threadId\": \"trd194\"\n
      \          }, {\n               \"id\": \"msg223\",\n               \"threadId\":
      \"trd114\"\n           },\n           ...\n           ],\n           \"notFound\":
      []\n       }, \"t1\" ],\n       [ \"Thread/get\", {\n           \"accountId\":
      \"A1\",\n           \"state\": \"123456\",\n           \"list\": [{\n               \"id\":
      \"trd194\",\n               \"emailIds\": [ \"msg1020\", \"msg1021\", \"msg1023\"
      ]\n           }, {\n               \"id\": \"trd114\",\n               \"emailIds\":
      [ \"msg201\", \"msg223\" ]\n           },\n           ...\n           ],\n           \"notFound\":
      []\n       }, \"t2\" ]]\n   To execute the final \"Email/get\" call, we look
      through the arguments\n   and find there is one with a \"#\" prefix.  To resolve
      this, we apply\n   the algorithm:\n   1.  Find the first response with method
      call id \"t2\".  The \"Thread/\n       get\" response fulfils this criterion.\n
      \  2.  \"Thread/get\" is the name specified in the result reference, so\n       this
      is fine.\n   3.  Apply the \"path\" as a JSON Pointer to the arguments object.\n
      \      Token by token:\n       1.  \"list\": get the array of thread objects\n
      \      2.  \"*\": for each of the items in the array:\n           a.  \"emailIds\":
      get the array of Email ids\n           b.  Concatenate these into a single array
      of all the ids in\n               the result.\n   The JMAP server now continues
      to process the \"Email/get\" call as\n   though the arguments were:\n"
    - "{\n    \"accountId\": \"A1\",\n    \"ids\": [ \"msg1020\", \"msg1021\", \"msg1023\",
      \"msg201\", \"msg223\", ... ],\n    \"properties\": [ \"from\", \"receivedAt\",
      \"subject\" ]\n"
    - "}\n   The ResultReference performs a similar role to that of the creation\n
      \  id, in that it allows a chained method call to refer to information\n   not
      available when the request is generated.  However, they are\n   different things
      and not interchangeable; the only commonality is the\n   octothorpe used to
      indicate them.\n"
    title: 3.7.  References to Previous Method Results
  - contents:
    - "3.8.  Localisation of User-Visible Strings\n   If returning a custom string
      to be displayed to the user, for\n   example, an error message, the server SHOULD
      use information from the\n   Accept-Language header of the request (as defined
      in Section 5.3.5 of\n   [RFC7231]) to choose the best available localisation.
      \ The Content-\n   Language header of the response (see Section 3.1.3.2 of [RFC7231])\n
      \  SHOULD indicate the language being used for user-visible strings.\n   For
      example, suppose a request was made with the following header:\n       Accept-Language:
      fr-CH, fr;q=0.9, de;q=0.8, en;q=0.7, *;q=0.5\n   and a method generated an error
      to display to the user.  The server\n   has translations of the error message
      in English and German.  Looking\n   at the Accept-Language header, the user's
      preferred language is\n   French.  Since we don't have a translation for this,
      we look at the\n   next most preferred, which is German.  We have a German translation,\n
      \  so the server returns this and indicates the language chosen in a\n   Content-Language
      header like so:\n                           Content-Language: de\n"
    title: 3.8.  Localisation of User-Visible Strings
  - contents:
    - "3.9.  Security\n   As always, the server must be strict about data received
      from the\n   client.  Arguments need to be checked for validity; a malicious
      user\n   could attempt to find an exploit through the API.  In case of invalid\n
      \  arguments (unknown/insufficient/wrong type for data, etc.), the\n   method
      MUST return an \"invalidArguments\" error and terminate.\n"
    title: 3.9.  Security
  - contents:
    - "3.10.  Concurrency\n   Method calls within a single request MUST be executed
      in order.\n   However, method calls from different concurrent API requests may
      be\n   interleaved.  This means that the data on the server may change\n   between
      two method calls within a single API request.\n"
    title: 3.10.  Concurrency
  title: 3.  Structured Data Exchange
- contents:
  - "4.  The Core/echo Method\n   The \"Core/echo\" method returns exactly the same
    arguments as it is\n   given.  It is useful for testing if you have a valid authenticated\n
    \  connection to a JMAP API endpoint.\n"
  - contents:
    - "4.1.  Example\n   Request:\n                             [[ \"Core/echo\",
      {\n                               \"hello\": true,\n                               \"high\":
      5\n                             }, \"b3ff\" ]]\n   Response:\n                             [[
      \"Core/echo\", {\n                               \"hello\": true,\n                               \"high\":
      5\n                             }, \"b3ff\" ]]\n"
    title: 4.1.  Example
  title: 4.  The Core/echo Method
- contents:
  - "5.  Standard Methods and Naming Convention\n   JMAP provides a uniform interface
    for creating, retrieving, updating,\n   and deleting objects of a particular type.
    \ For a \"Foo\" data type,\n   records of that type would be fetched via a \"Foo/get\"
    call and\n   modified via a \"Foo/set\" call.  Delta updates may be fetched via
    a\n   \"Foo/changes\" call.  These methods all follow a standard format as\n   described
    below.\n   Some types may not have all these methods.  Specifications defining\n
    \  types MUST specify which methods are available for the type.\n"
  - contents:
    - "5.1.  /get\n   Objects of type Foo are fetched via a call to \"Foo/get\".\n
      \  It takes the following arguments:\n   o  accountId: \"Id\"\n      The id
      of the account to use.\n   o  ids: \"Id[]|null\"\n      The ids of the Foo objects
      to return.  If null, then *all* records\n      of the data type are returned,
      if this is supported for that data\n      type and the number of records does
      not exceed the\n      \"maxObjectsInGet\" limit.\n   o  properties: \"String[]|null\"\n
      \     If supplied, only the properties listed in the array are returned\n      for
      each Foo object.  If null, all properties of the object are\n      returned.
      \ The id property of the object is *always* returned,\n      even if not explicitly
      requested.  If an invalid property is\n      requested, the call MUST be rejected
      with an \"invalidArguments\"\n      error.\n   The response has the following
      arguments:\n   o  accountId: \"Id\"\n      The id of the account used for the
      call.\n   o  state: \"String\"\n      A (preferably short) string representing
      the state on the server\n      for *all* the data of this type in the account
      (not just the\n      objects returned in this call).  If the data changes, this
      string\n      MUST change.  If the Foo data is unchanged, servers SHOULD return\n
      \     the same state string on subsequent requests for this data type.\n      When
      a client receives a response with a different state string to\n      a previous
      call, it MUST either throw away all currently cached\n      objects for the
      type or call \"Foo/changes\" to get the exact\n      changes.\n   o  list: \"Foo[]\"\n
      \     An array of the Foo objects requested.  This is the *empty array*\n      if
      no objects were found or if the \"ids\" argument passed in was\n      also an
      empty array.  The results MAY be in a different order to\n      the \"ids\"
      in the request arguments.  If an identical id is\n      included more than once
      in the request, the server MUST only\n      include it once in either the \"list\"
      or the \"notFound\" argument of\n      the response.\n   o  notFound: \"Id[]\"\n
      \     This array contains the ids passed to the method for records that\n      do
      not exist.  The array is empty if all requested ids were found\n      or if
      the \"ids\" argument passed in was either null or an empty\n      array.\n   The
      following additional error may be returned instead of the \"Foo/\n   get\" response:\n
      \  \"requestTooLarge\": The number of ids requested by the client exceeds\n
      \  the maximum number the server is willing to process in a single\n   method
      call.\n"
    title: 5.1.  /get
  - contents:
    - "5.2.  /changes\n   When the state of the set of Foo records in an account changes
      on the\n   server (whether due to creation, updates, or deletion), the \"state\"\n
      \  property of the \"Foo/get\" response will change.  The \"Foo/changes\"\n
      \  method allows a client to efficiently update the state of its Foo\n   cache
      to match the new state on the server.  It takes the following\n   arguments:\n
      \  o  accountId: \"Id\"\n      The id of the account to use.\n   o  sinceState:
      \"String\"\n      The current state of the client.  This is the string that
      was\n      returned as the \"state\" argument in the \"Foo/get\" response.  The\n
      \     server will return the changes that have occurred since this\n      state.\n
      \  o  maxChanges: \"UnsignedInt|null\"\n      The maximum number of ids to return
      in the response.  The server\n      MAY choose to return fewer than this value
      but MUST NOT return\n      more.  If not given by the client, the server may
      choose how many\n      to return.  If supplied by the client, the value MUST
      be a\n      positive integer greater than 0.  If a value outside of this range\n
      \     is given, the server MUST reject the call with an\n      \"invalidArguments\"
      error.\n   The response has the following arguments:\n   o  accountId: \"Id\"\n
      \     The id of the account used for the call.\n   o  oldState: \"String\"\n
      \     This is the \"sinceState\" argument echoed back; it's the state from\n
      \     which the server is returning changes.\n   o  newState: \"String\"\n      This
      is the state the client will be in after applying the set of\n      changes
      to the old state.\n   o  hasMoreChanges: \"Boolean\"\n      If true, the client
      may call \"Foo/changes\" again with the\n      \"newState\" returned to get
      further updates.  If false, \"newState\"\n      is the current server state.\n
      \  o  created: \"Id[]\"\n      An array of ids for records that have been created
      since the old\n      state.\n   o  updated: \"Id[]\"\n      An array of ids
      for records that have been updated since the old\n      state.\n   o  destroyed:
      \"Id[]\"\n      An array of ids for records that have been destroyed since the
      old\n      state.\n   If a record has been created AND updated since the old
      state, the\n   server SHOULD just return the id in the \"created\" list but
      MAY return\n   it in the \"updated\" list as well.\n   If a record has been
      updated AND destroyed since the old state, the\n   server SHOULD just return
      the id in the \"destroyed\" list but MAY\n   return it in the \"updated\" list
      as well.\n   If a record has been created AND destroyed since the old state,
      the\n   server SHOULD remove the id from the response entirely.  However, it\n
      \  MAY include it in just the \"destroyed\" list or in both the\n   \"destroyed\"
      and \"created\" lists.\n   If a \"maxChanges\" is supplied, or set automatically
      by the server,\n   the server MUST ensure the number of ids returned across
      \"created\",\n   \"updated\", and \"destroyed\" does not exceed this limit.
      \ If there are\n   more changes than this between the client's state and the
      current\n   server state, the server SHOULD generate an update to take the client\n
      \  to an intermediate state, from which the client can continue to call\n   \"Foo/changes\"
      until it is fully up to date.  If it is unable to\n   calculate an intermediate
      state, it MUST return a\n   \"cannotCalculateChanges\" error response instead.\n
      \  When generating intermediate states, the server may choose how to\n   divide
      up the changes.  For many types, it will provide a better user\n   experience
      to return the more recent changes first, as this is more\n   likely to be what
      the user is most interested in.  The client can\n   then continue to page in
      the older changes while the user is viewing\n   the newer data.  For example,
      suppose a server went through the\n   following states:\n                           A
      -> B -> C -> D -> E\n   And a client asks for changes from state \"B\".  The
      server might first\n   get the ids of records created, updated, or destroyed
      between states\n   D and E, returning them with:\n                           state:
      \"B-D-E\"\n                           hasMoreChanges: true\n   The client will
      then ask for the change from state \"B-D-E\", and the\n   server can return
      the changes between states C and D, returning:\n                           state:
      \"B-C-E\"\n                           hasMoreChanges: true\n   Finally, the
      client will request the changes from \"B-C-E\", and the\n   server can return
      the changes between states B and C, returning:\n                           state:
      \"E\"\n                           hasMoreChanges: false\n   Should the state
      on the server be modified in the middle of all this\n   (to \"F\"), the server
      still does the same, but now when the update to\n   state \"E\" is returned,
      it would indicate that it still has more\n   changes for the client to fetch.\n
      \  Where multiple changes to a record are split across different\n   intermediate
      states, the server MUST NOT return a record as created\n   after a response
      that deems it as updated or destroyed, and it MUST\n   NOT return a record as
      destroyed before a response that deems it as\n   created or updated.  The server
      may have to coalesce multiple changes\n   to a record to satisfy this requirement.\n
      \  The following additional errors may be returned instead of the \"Foo/\n   changes\"
      response:\n   \"cannotCalculateChanges\": The server cannot calculate the changes\n
      \  from the state string given by the client.  Usually, this is due to\n   the
      client's state being too old or the server being unable to\n   produce an update
      to an intermediate state when there are too many\n   updates.  The client MUST
      invalidate its Foo cache.\n   Maintaining state to allow calculation of \"Foo/changes\"
      can be\n   expensive for the server, but always returning\n   \"cannotCalculateChanges\"
      severely increases network traffic and\n   resource usage for the client.  To
      allow efficient sync, servers\n   SHOULD be able to calculate changes from any
      state string that was\n   given to a client within the last 30 days (but of
      course may support\n   calculating updates from states older than this).\n"
    title: 5.2.  /changes
  - contents:
    - "5.3.  /set\n   Modifying the state of Foo objects on the server is done via
      the\n   \"Foo/set\" method.  This encompasses creating, updating, and\n   destroying
      Foo records.  This allows the server to sort out ordering\n   and dependencies
      that may exist if doing multiple operations at once\n   (for example, to ensure
      there is always a minimum number of a certain\n   record type).\n   The \"Foo/set\"
      method takes the following arguments:\n   o  accountId: \"Id\"\n      The id
      of the account to use.\n   o  ifInState: \"String|null\"\n      This is a state
      string as returned by the \"Foo/get\" method\n      (representing the state
      of all objects of this type in the\n      account).  If supplied, the string
      must match the current state;\n      otherwise, the method will be aborted and
      a \"stateMismatch\" error\n      returned.  If null, any changes will be applied
      to the current\n      state.\n   o  create: \"Id[Foo]|null\"\n      A map of
      a *creation id* (a temporary id set by the client) to Foo\n      objects, or
      null if no objects are to be created.\n      The Foo object type definition
      may define default values for\n      properties.  Any such property may be omitted
      by the client.\n      The client MUST omit any properties that may only be set
      by the\n      server (for example, the \"id\" property on most object types).\n
      \  o  update: \"Id[PatchObject]|null\"\n      A map of an id to a Patch object
      to apply to the current Foo\n      object with that id, or null if no objects
      are to be updated.\n      A *PatchObject* is of type \"String[*]\" and represents
      an unordered\n      set of patches.  The keys are a path in JSON Pointer format\n
      \     [RFC6901], with an implicit leading \"/\" (i.e., prefix each key\n      with
      \"/\" before applying the JSON Pointer evaluation algorithm).\n      All paths
      MUST also conform to the following restrictions; if\n      there is any violation,
      the update MUST be rejected with an\n      \"invalidPatch\" error:\n      *
      \ The pointer MUST NOT reference inside an array (i.e., you MUST\n         NOT
      insert/delete from an array; the array MUST be replaced in\n         its entirety
      instead).\n      *  All parts prior to the last (i.e., the value after the final\n
      \        slash) MUST already exist on the object being patched.\n      *  There
      MUST NOT be two patches in the PatchObject where the\n         pointer of one
      is the prefix of the pointer of the other, e.g.,\n         \"alerts/1/offset\"
      and \"alerts\".\n      The value associated with each pointer determines how
      to apply\n      that patch:\n      *  If null, set to the default value if specified
      for this\n         property; otherwise, remove the property from the patched\n
      \        object.  If the key is not present in the parent, this a no-op.\n      *
      \ Anything else: The value to set for this property (this may be\n         a
      replacement or addition to the object being patched).\n      Any server-set
      properties MAY be included in the patch if their\n      value is identical to
      the current server value (before applying\n      the patches to the object).
      \ Otherwise, the update MUST be\n      rejected with an \"invalidProperties\"
      SetError.\n      This patch definition is designed such that an entire Foo object\n
      \     is also a valid PatchObject.  The client may choose to optimise\n      network
      usage by just sending the diff or may send the whole\n      object; the server
      processes it the same either way.\n   o  destroy: \"Id[]|null\"\n      A list
      of ids for Foo objects to permanently delete, or null if no\n      objects are
      to be destroyed.\n   Each creation, modification, or destruction of an object
      is\n   considered an atomic unit.  It is permissible for the server to\n   commit
      changes to some objects but not others; however, it MUST NOT\n   only commit
      part of an update to a single record (e.g., update a\n   \"name\" property but
      not a \"count\" property, if both are supplied in\n   the update object).\n
      \  The final state MUST be valid after the \"Foo/set\" is finished;\n   however,
      the server may have to transition through invalid\n   intermediate states (not
      exposed to the client) while processing the\n   individual create/update/destroy
      requests.  For example, suppose\n   there is a \"name\" property that must be
      unique.  A single method call\n   could rename an object A => B and simultaneously
      rename another\n   object B => A.  If the final state is valid, this is allowed.\n
      \  Otherwise, each creation, modification, or destruction of an object\n   should
      be processed sequentially and accepted/rejected based on the\n   current server
      state.\n   If a create, update, or destroy is rejected, the appropriate error\n
      \  MUST be added to the notCreated/notUpdated/notDestroyed property of\n   the
      response, and the server MUST continue to the next create/update/\n   destroy.
      \ It does not terminate the method.\n   If an id given cannot be found, the
      update or destroy MUST be\n   rejected with a \"notFound\" set error.\n   The
      server MAY skip an update (rejecting it with a \"willDestroy\"\n   SetError)
      if that object is destroyed in the same /set request.\n   Some records may hold
      references to other records (foreign keys).\n   That reference may be set (via
      create or update) in the same request\n   as the referenced record is created.
      \ To do this, the client refers\n   to the new record using its creation id
      prefixed with a \"#\".  The\n   order of the method calls in the request by
      the client MUST be such\n   that the record being referenced is created in the
      same or an earlier\n   call.  Thus, the server never has to look ahead.  Instead,
      while\n   processing a request, the server MUST keep a simple map for the\n
      \  duration of the request of creation id to record id for each newly\n   created
      record, so it can substitute in the correct value if\n   necessary in later
      method calls.  In the case of records with\n   references to the same type,
      the server MUST order the creates and\n   updates within a single method call
      so that creates happen before\n   their creation ids are referenced by another
      create/update/destroy in\n   the same call.\n   Creation ids are not scoped
      by type but are a single map for all\n   types.  A client SHOULD NOT reuse a
      creation id anywhere in the same\n   API request.  If a creation id is reused,
      the server MUST map the\n   creation id to the most recently created item with
      that id.  To allow\n   easy proxying of API requests, an initial set of creation
      id to real\n   id values may be passed with a request (see \"The Request Object\",\n
      \  Section 3.3) and the final state of the map passed out with the\n   response
      (see \"The Response Object\", Section 3.4).\n   The response has the following
      arguments:\n   o  accountId: \"Id\"\n      The id of the account used for the
      call.\n   o  oldState: \"String|null\"\n      The state string that would have
      been returned by \"Foo/get\" before\n      making the requested changes, or
      null if the server doesn't know\n      what the previous state string was.\n
      \  o  newState: \"String\"\n      The state string that will now be returned
      by \"Foo/get\".\n   o  created: \"Id[Foo]|null\"\n      A map of the creation
      id to an object containing any properties of\n      the created Foo object that
      were not sent by the client.  This\n      includes all server-set properties
      (such as the \"id\" in most\n      object types) and any properties that were
      omitted by the client\n      and thus set to a default by the server.\n      This
      argument is null if no Foo objects were successfully created.\n   o  updated:
      \"Id[Foo|null]|null\"\n      The keys in this map are the ids of all Foos that
      were\n      successfully updated.\n      The value for each id is a Foo object
      containing any property that\n      changed in a way *not* explicitly requested
      by the PatchObject\n      sent to the server, or null if none.  This lets the
      client know of\n      any changes to server-set or computed properties.\n      This
      argument is null if no Foo objects were successfully updated.\n   o  destroyed:
      \"Id[]|null\"\n      A list of Foo ids for records that were successfully destroyed,
      or\n      null if none.\n   o  notCreated: \"Id[SetError]|null\"\n      A map
      of the creation id to a SetError object for each record that\n      failed to
      be created, or null if all successful.\n   o  notUpdated: \"Id[SetError]|null\"\n
      \     A map of the Foo id to a SetError object for each record that\n      failed
      to be updated, or null if all successful.\n   o  notDestroyed: \"Id[SetError]|null\"\n
      \     A map of the Foo id to a SetError object for each record that\n      failed
      to be destroyed, or null if all successful.\n   A *SetError* object has the
      following properties:\n   o  type: \"String\"\n      The type of error.\n   o
      \ description: \"String|null\"\n      A description of the error to help with
      debugging that includes an\n      explanation of what the problem was.  This
      is a non-localised\n      string and is not intended to be shown directly to
      end users.\n   The following SetError types are defined and may be returned
      for set\n   operations on any record type where appropriate:\n   o  \"forbidden\":
      (create; update; destroy).  The create/update/destroy\n      would violate an
      ACL or other permissions policy.\n   o  \"overQuota\": (create; update).  The
      create would exceed a server-\n      defined limit on the number or total size
      of objects of this type.\n   o  \"tooLarge\": (create; update).  The create/update
      would result in\n      an object that exceeds a server-defined limit for the
      maximum size\n      of a single object of this type.\n   o  \"rateLimit\": (create).
      \ Too many objects of this type have been\n      created recently, and a server-defined
      rate limit has been\n      reached.  It may work if tried again later.\n   o
      \ \"notFound\": (update; destroy).  The id given to update/destroy\n      cannot
      be found.\n   o  \"invalidPatch\": (update).  The PatchObject given to update
      the\n      record was not a valid patch (see the patch description).\n   o  \"willDestroy\":
      (update).  The client requested that an object be\n      both updated and destroyed
      in the same /set request, and the\n      server has decided to therefore ignore
      the update.\n   o  \"invalidProperties\": (create; update).  The record given
      is\n      invalid in some way.  For example:\n      *  It contains properties
      that are invalid according to the type\n         specification of this record
      type.\n      *  It contains a property that may only be set by the server\n
      \        (e.g., \"id\") and is different to the current value.  Note, to\n         allow
      clients to pass whole objects back, it is not an error to\n         include
      a server-set property in an update as long as the value\n         is identical
      to the current value on the server.\n      *  There is a reference to another
      record (foreign key), and the\n         given id does not correspond to a valid
      record.\n      The SetError object SHOULD also have a property called\n      \"properties\"
      of type \"String[]\" that lists *all* the properties\n      that were invalid.\n
      \     Individual methods MAY specify more specific errors for certain\n      conditions
      that would otherwise result in an invalidProperties\n      error.  If the condition
      of one of these is met, it MUST be\n      returned instead of the invalidProperties
      error.\n   o  \"singleton\": (create; destroy).  This is a singleton type, so
      you\n      cannot create another one or destroy the existing one.\n   Other
      possible SetError types MAY be given in specific method\n   descriptions.  Other
      properties MAY also be present on the SetError\n   object, as described in the
      relevant methods.\n   The following additional errors may be returned instead
      of the \"Foo/\n   set\" response:\n   \"requestTooLarge\": The total number
      of objects to create, update, or\n   destroy exceeds the maximum number the
      server is willing to process\n   in a single method call.\n   \"stateMismatch\":
      An \"ifInState\" argument was supplied, and it does\n   not match the current
      state.\n"
    title: 5.3.  /set
  - contents:
    - "5.4.  /copy\n   The only way to move Foo records *between* two different accounts
      is\n   to copy them using the \"Foo/copy\" method; once the copy has\n   succeeded,
      delete the original.  The \"onSuccessDestroyOriginal\"\n   argument allows you
      to try to do this in one method call; however,\n   note that the two different
      actions are not atomic, so it is possible\n   for the copy to succeed but the
      original not to be destroyed for some\n   reason.\n   The copy is conceptually
      in three phases:\n   1.  Reading the current values from the \"from\" account.\n
      \  2.  Writing the new copies to the other account.\n   3.  Destroying the originals
      in the \"from\" account, if requested.\n   Data may change in between phases
      due to concurrent requests.\n   The \"Foo/copy\" method takes the following
      arguments:\n   o  fromAccountId: \"Id\"\n      The id of the account to copy
      records from.\n   o  ifFromInState: \"String|null\"\n      This is a state string
      as returned by the \"Foo/get\" method.  If\n      supplied, the string must
      match the current state of the account\n      referenced by the fromAccountId
      when reading the data to be\n      copied; otherwise, the method will be aborted
      and a\n      \"stateMismatch\" error returned.  If null, the data will be read\n
      \     from the current state.\n   o  accountId: \"Id\"\n      The id of the
      account to copy records to.  This MUST be different\n      to the \"fromAccountId\".\n
      \  o  ifInState: \"String|null\"\n      This is a state string as returned by
      the \"Foo/get\" method.  If\n      supplied, the string must match the current
      state of the account\n      referenced by the accountId; otherwise, the method
      will be aborted\n      and a \"stateMismatch\" error returned.  If null, any
      changes will\n      be applied to the current state.\n   o  create: \"Id[Foo]\"\n
      \     A map of the *creation id* to a Foo object.  The Foo object MUST\n      contain
      an \"id\" property, which is the id (in the fromAccount) of\n      the record
      to be copied.  When creating the copy, any other\n      properties included
      are used instead of the current value for that\n      property on the original.\n
      \  o  onSuccessDestroyOriginal: \"Boolean\" (default: false)\n      If true,
      an attempt will be made to destroy the original records\n      that were successfully
      copied: after emitting the \"Foo/copy\"\n      response, but before processing
      the next method, the server MUST\n      make a single call to \"Foo/set\" to
      destroy the original of each\n      successfully copied record; the output of
      this is added to the\n      responses as normal, to be returned to the client.\n
      \  o  destroyFromIfInState: \"String|null\"\n      This argument is passed on
      as the \"ifInState\" argument to the\n      implicit \"Foo/set\" call, if made
      at the end of this request to\n      destroy the originals that were successfully
      copied.\n   Each record copy is considered an atomic unit that may succeed or\n
      \  fail individually.\n   The response has the following arguments:\n   o  fromAccountId:
      \"Id\"\n      The id of the account records were copied from.\n   o  accountId:
      \"Id\"\n      The id of the account records were copied to.\n   o  oldState:
      \"String|null\"\n      The state string that would have been returned by \"Foo/get\"
      on the\n      account records that were copied to before making the requested\n
      \     changes, or null if the server doesn't know what the previous\n      state
      string was.\n   o  newState: \"String\"\n      The state string that will now
      be returned by \"Foo/get\" on the\n      account records were copied to.\n   o
      \ created: \"Id[Foo]|null\"\n      A map of the creation id to an object containing
      any properties of\n      the copied Foo object that are set by the server (such
      as the \"id\"\n      in most object types; note, the id is likely to be different
      to\n      the id of the object in the account it was copied from).\n      This
      argument is null if no Foo objects were successfully copied.\n   o  notCreated:
      \"Id[SetError]|null\"\n      A map of the creation id to a SetError object for
      each record that\n      failed to be copied, or null if none.\n   The SetError
      may be any of the standard set errors returned for a\n   create or update.  In
      addition, the following SetError is defined:\n   \"alreadyExists\": The server
      forbids duplicates, and the record\n   already exists in the target account.
      \ An \"existingId\" property of\n   type \"Id\" MUST be included on the SetError
      object with the id of the\n   existing record.\n   The following additional
      errors may be returned instead of the \"Foo/\n   copy\" response:\n   \"fromAccountNotFound\":
      The \"fromAccountId\" does not correspond to a\n   valid account.\n   \"fromAccountNotSupportedByMethod\":
      The \"fromAccountId\" given\n   corresponds to a valid account, but the account
      does not support this\n   data type.\n   \"stateMismatch\": An \"ifInState\"
      argument was supplied and it does not\n   match the current state, or an \"ifFromInState\"
      argument was supplied\n   and it does not match the current state in the from
      account.\n"
    title: 5.4.  /copy
  - contents:
    - "5.5.  /query\n   For data sets where the total amount of data is expected to
      be very\n   small, clients can just fetch the complete set of data and then
      do\n   any sorting/filtering locally.  However, for large data sets (e.g.,\n
      \  multi-gigabyte mailboxes), the client needs to be able to\n   search/sort/window
      the data type on the server.\n   A query on the set of Foos in an account is
      made by calling \"Foo/\n   query\".  This takes a number of arguments to determine
      which records\n   to include, how they should be sorted, and which part of the
      result\n   should be returned (the full list may be *very* long).  The result
      is\n   returned as a list of Foo ids.\n   A call to \"Foo/query\" takes the
      following arguments:\n   o  accountId: \"Id\"\n      The id of the account to
      use.\n   o  filter: \"FilterOperator|FilterCondition|null\"\n      Determines
      the set of Foos returned in the results.  If null, all\n      objects in the
      account of this type are included in the results.\n      A *FilterOperator*
      object has the following properties:\n      *  operator: \"String\"\n         This
      MUST be one of the following strings:\n         +  \"AND\": All of the conditions
      must match for the filter to\n            match.\n         +  \"OR\": At least
      one of the conditions must match for the\n            filter to match.\n         +
      \ \"NOT\": None of the conditions must match for the filter to\n            match.\n
      \     *  conditions: \"(FilterOperator|FilterCondition)[]\"\n         The conditions
      to evaluate against each record.\n      A *FilterCondition* is an \"object\"
      whose allowed properties and\n      semantics depend on the data type and is
      defined in the /query\n      method specification for that type.  It MUST NOT
      have an\n      \"operator\" property.\n   o  sort: \"Comparator[]|null\"\n      Lists
      the names of properties to compare between two Foo records,\n      and how to
      compare them, to determine which comes first in the\n      sort.  If two Foo
      records have an identical value for the first\n      comparator, the next comparator
      will be considered, and so on.  If\n      all comparators are the same (this
      includes the case where an\n      empty array or null is given as the \"sort\"
      argument), the sort\n      order is server dependent, but it MUST be stable
      between calls to\n      \"Foo/query\".  A *Comparator* has the following properties:\n
      \     *  property: \"String\"\n         The name of the property on the Foo
      objects to compare.\n      *  isAscending: \"Boolean\" (optional; default: true)\n
      \        If true, sort in ascending order.  If false, reverse the\n         comparator's
      results to sort in descending order.\n      *  collation: \"String\" (optional;
      default is server-dependent)\n         The identifier, as registered in the
      collation registry defined\n         in [RFC4790], for the algorithm to use
      when comparing the order\n         of strings.  The algorithms the server supports
      are advertised\n         in the capabilities object returned with the Session
      object\n         (see Section 2).\n         If omitted, the default algorithm
      is server dependent, but:\n         1.  It MUST be unicode-aware.\n         2.
      \ It MAY be selected based on an Accept-Language header in\n             the
      request (as defined in [RFC7231], Section 5.3.5) or\n             out-of-band
      information about the user's language/locale.\n         3.  It SHOULD be case
      insensitive where such a concept makes\n             sense for a language/locale.
      \ Where the user's language is\n             unknown, it is RECOMMENDED to follow
      the advice in\n             Section 5.2.3 of [RFC8264].\n         The \"i;unicode-casemap\"
      collation [RFC5051] and the Unicode\n         Collation Algorithm (<http://www.unicode.org/reports/tr10/>)\n
      \        are two examples that fulfil these criterion and provide\n         reasonable
      behaviour for a large number of languages.\n         When the property being
      compared is not a string, the\n         \"collation\" property is ignored, and
      the following comparison\n         rules apply based on the type.  In ascending
      order:\n         +  \"Boolean\": false comes before true.\n         +  \"Number\":
      A lower number comes before a higher number.\n         +  \"Date\"/\"UTCDate\":
      The earlier date comes first.\n      The Comparator object may also have additional
      properties as\n      required for specific sort operations defined in a type's
      /query\n      method.\n   o  position: \"Int\" (default: 0)\n      The zero-based
      index of the first id in the full list of results\n      to return.\n      If
      a negative value is given, it is an offset from the end of the\n      list.
      \ Specifically, the negative value MUST be added to the total\n      number
      of results given the filter, and if still negative, it's\n      clamped to \"0\".
      \ This is now the zero-based index of the first id\n      to return.\n      If
      the index is greater than or equal to the total number of\n      objects in
      the results list, then the \"ids\" array in the response\n      will be empty,
      but this is not an error.\n   o  anchor: \"Id|null\"\n      A Foo id.  If supplied,
      the \"position\" argument is ignored.  The\n      index of this id in the results
      will be used in combination with\n      the \"anchorOffset\" argument to determine
      the index of the first\n      result to return (see below for more details).\n
      \  o  anchorOffset: \"Int\" (default: 0)\n      The index of the first result
      to return relative to the index of\n      the anchor, if an anchor is given.
      \ This MAY be negative.  For\n      example, \"-1\" means the Foo immediately
      preceding the anchor is\n      the first result in the list returned (see below
      for more\n      details).\n   o  limit: \"UnsignedInt|null\"\n      The maximum
      number of results to return.  If null, no limit\n      presumed.  The server
      MAY choose to enforce a maximum \"limit\"\n      argument.  In this case, if
      a greater value is given (or if it is\n      null), the limit is clamped to
      the maximum; the new limit is\n      returned with the response so the client
      is aware.  If a negative\n      value is given, the call MUST be rejected with
      an\n      \"invalidArguments\" error.\n   o  calculateTotal: \"Boolean\" (default:
      false)\n      Does the client wish to know the total number of results in the\n
      \     query?  This may be slow and expensive for servers to calculate,\n      particularly
      with complex filters, so clients should take care to\n      only request the
      total when needed.\n   If an \"anchor\" argument is given, the anchor is looked
      for in the\n   results after filtering and sorting.  If found, the \"anchorOffset\"
      is\n   then added to its index.  If the resulting index is now negative, it\n
      \  is clamped to 0.  This index is now used exactly as though it were\n   supplied
      as the \"position\" argument.  If the anchor is not found, the\n   call is rejected
      with an \"anchorNotFound\" error.\n   If an \"anchor\" is specified, any position
      argument supplied by the\n   client MUST be ignored.  If no \"anchor\" is supplied,
      any\n   \"anchorOffset\" argument MUST be ignored.\n   A client can use \"anchor\"
      instead of \"position\" to find the index of\n   an id within a large set of
      results.\n   The response has the following arguments:\n   o  accountId: \"Id\"\n
      \     The id of the account used for the call.\n   o  queryState: \"String\"\n
      \     A string encoding the current state of the query on the server.\n      This
      string MUST change if the results of the query (i.e., the\n      matching ids
      and their sort order) have changed.  The queryState\n      string MAY change
      if something has changed on the server, which\n      means the results may have
      changed but the server doesn't know for\n      sure.\n      The queryState string
      only represents the ordered list of ids that\n      match the particular query
      (including its sort/filter).  There is\n      no requirement for it to change
      if a property on an object\n      matching the query changes but the query results
      are unaffected\n      (indeed, it is more efficient if the queryState string
      does not\n      change in this case).  The queryState string only has meaning
      when\n      compared to future responses to a query with the same type/sort/\n
      \     filter or when used with /queryChanges to fetch changes.\n      Should
      a client receive back a response with a different\n      queryState string to
      a previous call, it MUST either throw away\n      the currently cached query
      and fetch it again (note, this does not\n      require fetching the records
      again, just the list of ids) or call\n      \"Foo/queryChanges\" to get the
      difference.\n   o  canCalculateChanges: \"Boolean\"\n      This is true if the
      server supports calling \"Foo/queryChanges\"\n      with these \"filter\"/\"sort\"
      parameters.  Note, this does not\n      guarantee that the \"Foo/queryChanges\"
      call will succeed, as it may\n      only be possible for a limited time afterwards
      due to server\n      internal implementation details.\n   o  position: \"UnsignedInt\"\n
      \     The zero-based index of the first result in the \"ids\" array within\n
      \     the complete list of query results.\n   o  ids: \"Id[]\"\n      The list
      of ids for each Foo in the query results, starting at the\n      index given
      by the \"position\" argument of this response and\n      continuing until it
      hits the end of the results or reaches the\n      \"limit\" number of ids.  If
      \"position\" is >= \"total\", this MUST be\n      the empty list.\n   o  total:
      \"UnsignedInt\" (only if requested)\n      The total number of Foos in the results
      (given the \"filter\").\n      This argument MUST be omitted if the \"calculateTotal\"
      request\n      argument is not true.\n   o  limit: \"UnsignedInt\" (if set by
      the server)\n      The limit enforced by the server on the maximum number of
      results\n      to return.  This is only returned if the server set a limit or\n
      \     used a different limit than that given in the request.\n   The following
      additional errors may be returned instead of the \"Foo/\n   query\" response:\n
      \  \"anchorNotFound\": An anchor argument was supplied, but it cannot be\n   found
      in the results of the query.\n   \"unsupportedSort\": The \"sort\" is syntactically
      valid, but it includes\n   a property the server does not support sorting on
      or a collation\n   method it does not recognise.\n   \"unsupportedFilter\":
      The \"filter\" is syntactically valid, but the\n   server cannot process it.
      \ If the filter was the result of a user's\n   search input, the client SHOULD
      suggest that the user simplify their\n   search.\n"
    title: 5.5.  /query
  - contents:
    - "5.6.  /queryChanges\n   The \"Foo/queryChanges\" method allows a client to
      efficiently update\n   the state of a cached query to match the new state on
      the server.  It\n   takes the following arguments:\n   o  accountId: \"Id\"\n
      \     The id of the account to use.\n   o  filter: \"FilterOperator|FilterCondition|null\"\n
      \     The filter argument that was used with \"Foo/query\".\n   o  sort: \"Comparator[]|null\"\n
      \     The sort argument that was used with \"Foo/query\".\n   o  sinceQueryState:
      \"String\"\n      The current state of the query in the client.  This is the
      string\n      that was returned as the \"queryState\" argument in the \"Foo/query\"\n
      \     response with the same sort/filter.  The server will return the\n      changes
      made to the query since this state.\n   o  maxChanges: \"UnsignedInt|null\"\n
      \     The maximum number of changes to return in the response.  See\n      error
      descriptions below for more details.\n   o  upToId: \"Id|null\"\n      The last
      (highest-index) id the client currently has cached from\n      the query results.
      \ When there are a large number of results, in a\n      common case, the client
      may have only downloaded and cached a\n      small subset from the beginning
      of the results.  If the sort and\n      filter are both only on immutable properties,
      this allows the\n      server to omit changes after this point in the results,
      which can\n      significantly increase efficiency.  If they are not immutable,\n
      \     this argument is ignored.\n   o  calculateTotal: \"Boolean\" (default:
      false)\n      Does the client wish to know the total number of results now in\n
      \     the query?  This may be slow and expensive for servers to\n      calculate,
      particularly with complex filters, so clients should\n      take care to only
      request the total when needed.\n   The response has the following arguments:\n
      \  o  accountId: \"Id\"\n      The id of the account used for the call.\n   o
      \ oldQueryState: \"String\"\n      This is the \"sinceQueryState\" argument
      echoed back; that is, the\n      state from which the server is returning changes.\n
      \  o  newQueryState: \"String\"\n      This is the state the query will be in
      after applying the set of\n      changes to the old state.\n   o  total: \"UnsignedInt\"
      (only if requested)\n      The total number of Foos in the results (given the
      \"filter\").\n      This argument MUST be omitted if the \"calculateTotal\"
      request\n      argument is not true.\n   o  removed: \"Id[]\"\n      The \"id\"
      for every Foo that was in the query results in the old\n      state and that
      is not in the results in the new state.\n      If the server cannot calculate
      this exactly, the server MAY return\n      the ids of extra Foos in addition
      that may have been in the old\n      results but are not in the new results.\n
      \     If the sort and filter are both only on immutable properties and\n      an
      \"upToId\" is supplied and exists in the results, any ids that\n      were removed
      but have a higher index than \"upToId\" SHOULD be\n      omitted.\n      If
      the \"filter\" or \"sort\" includes a mutable property, the server\n      MUST
      include all Foos in the current results for which this\n      property may have
      changed.  The position of these may have moved\n      in the results, so they
      must be reinserted by the client to ensure\n      its query cache is correct.\n
      \  o  added: \"AddedItem[]\"\n      The id and index in the query results (in
      the new state) for every\n      Foo that has been added to the results since
      the old state AND\n      every Foo in the current results that was included
      in the\n      \"removed\" array (due to a filter or sort based upon a mutable\n
      \     property).\n      If the sort and filter are both only on immutable properties
      and\n      an \"upToId\" is supplied and exists in the results, any ids that\n
      \     were added but have a higher index than \"upToId\" SHOULD be\n      omitted.\n
      \     The array MUST be sorted in order of index, with the lowest index\n      first.\n
      \     An *AddedItem* object has the following properties:\n      *  id: \"Id\"\n
      \     *  index: \"UnsignedInt\"\n   The result of this is that if the client
      has a cached sparse array of\n   Foo ids corresponding to the results in the
      old state, then:\n   fooIds = [ \"id1\", \"id2\", null, null, \"id3\", \"id4\",
      null, null, null ]\n   If it *splices out* all ids in the removed array that
      it has in its\n   cached results, then:\n      removed = [ \"id2\", \"id31\",
      ... ];\n      fooIds => [ \"id1\", null, null, \"id3\", \"id4\", null, null,
      null ]\n   and *splices in* (one by one in order, starting with the lowest\n
      \  index) all of the ids in the added array:\n  added = [{ id: \"id5\", index:
      0, ... }];\n  fooIds => [ \"id5\", \"id1\", null, null, \"id3\", \"id4\", null,
      null, null ]\n   and *truncates* or *extends* to the new total length, then
      the\n   results will now be in the new state.\n   Note: splicing in adds the
      item at the given index, incrementing the\n   index of all items previously
      at that or a higher index.  Splicing\n   out is the inverse, removing the item
      and decrementing the index of\n   every item after it in the array.\n   The
      following additional errors may be returned instead of the \"Foo/\n   queryChanges\"
      response:\n   \"tooManyChanges\": There are more changes than the client's\n
      \  \"maxChanges\" argument.  Each item in the removed or added array is\n   considered
      to be one change.  The client may retry with higher max\n   changes or invalidate
      its cache of the query results.\n   \"cannotCalculateChanges\": The server cannot
      calculate the changes\n   from the queryState string given by the client, usually
      due to the\n   client's state being too old.  The client MUST invalidate its
      cache\n   of the query results.\n"
    title: 5.6.  /queryChanges
  - contents:
    - "5.7.  Examples\n   Suppose we have a type *Todo* with the following properties:\n
      \  o  id: \"Id\" (immutable; server-set)\n      The id of the object.\n   o
      \ title: \"String\"\n      A brief summary of what is to be done.\n   o  keywords:
      \"String[Boolean]\" (default: {})\n      A set of keywords that apply to the
      Todo.  The set is represented\n      as an object, with the keys being the \"keywords\".
      \ The value for\n      each key in the object MUST be true.  (This format allows
      you to\n      update an individual key using patch syntax rather than having
      to\n      update the whole set of keywords as one, which a \"String[]\"\n      representation
      would require.)\n   o  neuralNetworkTimeEstimation: \"Number\" (server-set)\n
      \     The title and keywords are fed into the server's state-of-the-art\n      neural
      network to get an estimation of how long this Todo will\n      take, in seconds.\n
      \  o  subTodoIds: \"Id[]|null\"\n      The ids of a list of other Todos to complete
      as part of this Todo.\n   Suppose also that all the standard methods are defined
      for this type\n   and the FilterCondition object supports a \"hasKeyword\" property
      to\n   match Todos with the given keyword.\n   A client might want to display
      the list of Todos with either a\n   \"music\" keyword or a \"video\" keyword,
      so it makes the following\n   method call:\n                   [[ \"Todo/query\",
      {\n                     \"accountId\": \"x\",\n                     \"filter\":
      {\n                       \"operator\": \"OR\",\n                       \"conditions\":
      [\n                         { \"hasKeyword\": \"music\" },\n                         {
      \"hasKeyword\": \"video\" }\n                       ]\n                     },\n
      \                    \"sort\": [{ \"property\": \"title\" }],\n                     \"position\":
      0,\n                     \"limit\": 10\n                   }, \"0\" ],\n                   [
      \"Todo/get\", {\n                     \"accountId\": \"x\",\n                     \"#ids\":
      {\n                       \"resultOf\": \"0\",\n                       \"name\":
      \"Todo/query\",\n                       \"path\": \"/ids\"\n                     }\n
      \                  }, \"1\" ]]\n   This would query the server for the set of
      Todos with a keyword of\n   either \"music\" or \"video\", sorted by title,
      and limited to the first\n   10 results.  It fetches the full object for each
      of these Todos using\n   back-references to reference the result of the query.
      \ The response\n   might look something like:\n       [[ \"Todo/query\", {\n
      \        \"accountId\": \"x\",\n         \"queryState\": \"y13213\",\n         \"canCalculateChanges\":
      true,\n         \"position\": 0,\n         \"ids\": [ \"a\", \"b\", \"c\", \"d\",
      \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" ]\n       }, \"0\" ],\n       [ \"Todo/get\",
      {\n         \"accountId\": \"x\",\n         \"state\": \"10324\",\n         \"list\":
      [{\n           \"id\": \"a\",\n           \"title\": \"Practise Piano\",\n           \"keywords\":
      {\n             \"music\": true,\n             \"beethoven\": true,\n             \"mozart\":
      true,\n             \"liszt\": true,\n             \"rachmaninov\": true\n           },\n
      \          \"neuralNetworkTimeEstimation\": 3600\n         }, {\n           \"id\":
      \"b\",\n           \"title\": \"Watch Daft Punk music video\",\n           \"keywords\":
      {\n             \"music\": true,\n             \"video\": true,\n             \"trance\":
      true\n           },\n           \"neuralNetworkTimeEstimation\": 18000\n         },\n
      \        ...\n         ]\n       }, \"1\" ]]\n   Now, suppose the user adds
      a keyword \"chopin\" and removes the keyword\n   \"mozart\" from the \"Practise
      Piano\" task.  The client may send the\n   whole object to the server, as this
      is a valid PatchObject:\n                 [[ \"Todo/set\", {\n                   \"accountId\":
      \"x\",\n                   \"ifInState\": \"10324\",\n                   \"update\":
      {\n                     \"a\": {\n                       \"id\": \"a\",\n                       \"title\":
      \"Practise Piano\",\n                       \"keywords\": {\n                         \"music\":
      true,\n                         \"beethoven\": true,\n                         \"chopin\":
      true,\n                         \"liszt\": true,\n                         \"rachmaninov\":
      true\n                       },\n                       \"neuralNetworkTimeEstimation\":
      360\n                     }\n                   }\n                 }, \"0\"
      ]]\n   or it may send a minimal patch:\n                      [[ \"Todo/set\",
      {\n                        \"accountId\": \"x\",\n                        \"ifInState\":
      \"10324\",\n                        \"update\": {\n                          \"a\":
      {\n                            \"keywords/chopin\": true,\n                            \"keywords/mozart\":
      null\n                          }\n                        }\n                      },
      \"0\" ]]\n   The effect is exactly the same on the server in either case, and\n
      \  presuming the server is still in state \"10324\", it will probably\n   return
      success:\n                 [[ \"Todo/set\", {\n                   \"accountId\":
      \"x\",\n                   \"oldState\": \"10324\",\n                   \"newState\":
      \"10329\",\n                   \"updated\": {\n                     \"a\": {\n
      \                      \"neuralNetworkTimeEstimation\": 5400\n                     }\n
      \                  }\n                 }, \"0\" ]]\n   The server changed the
      \"neuralNetworkTimeEstimation\" property on the\n   object as part of this change;
      as this changed in a way *not*\n   explicitly requested by the PatchObject sent
      to the server, it is\n   returned with the \"updated\" confirmation.\n   Let
      us now add a sub-Todo to our new \"Practise Piano\" Todo.  In this\n   example,
      we can see the use of a reference to a creation id to allow\n   us to set a
      foreign key reference to a record created in the same\n   request:\n                   [[
      \"Todo/set\", {\n                     \"accountId\": \"x\",\n                     \"create\":
      {\n                       \"k15\": {\n                         \"title\": \"Warm
      up with scales\"\n                       }\n                     },\n                     \"update\":
      {\n                       \"a\": {\n                         \"subTodoIds\":
      [ \"#k15\" ]\n                       }\n                     }\n                   },
      \"0\" ]]\n   Now, suppose another user deleted the \"Listen to Daft Punk\" Todo.\n
      \  The first user will receive a push notification (see Section 7) with\n   the
      changed state string for the \"Todo\" type.  Since the new string\n   does not
      match its current state, it knows it needs to check for\n   updates.  It may
      make a request like:\n                   [[ \"Todo/changes\", {\n                     \"accountId\":
      \"x\",\n                     \"sinceState\": \"10324\",\n                     \"maxChanges\":
      50\n                   }, \"0\" ],\n                   [ \"Todo/queryChanges\",
      {\n                     \"accountId\": \"x\",\n                     \"filter\":
      {\n                       \"operator\": \"OR\",\n                       \"conditions\":
      [\n                         { \"hasKeyword\": \"music\" },\n                         {
      \"hasKeyword\": \"video\" }\n                       ]\n                     },\n
      \                    \"sort\": [{ \"property\": \"title\" }],\n                     \"sinceQueryState\":
      \"y13213\",\n                     \"maxChanges\": 50\n                   },
      \"1\" ]]\n   and receive in response:\n                       [[ \"Todo/changes\",
      {\n                         \"accountId\": \"x\",\n                         \"oldState\":
      \"10324\",\n                         \"newState\": \"871903\",\n                         \"hasMoreChanges\":
      false,\n                         \"created\": [],\n                         \"updated\":
      [],\n                         \"destroyed\": [\"b\"]\n                       },
      \"0\" ],\n                       [ \"Todo/queryChanges\", {\n                         \"accountId\":
      \"x\",\n                         \"oldQueryState\": \"y13213\",\n                         \"newQueryState\":
      \"y13218\",\n                         \"removed\": [\"b\"],\n                         \"added\":
      null\n                       }, \"1\" ]]\n   Suppose the user has access to
      another account \"y\", for example, a\n   team account shared between multiple
      users.  To move an existing Todo\n   from account \"x\", the client would call:\n
      \                   [[ \"Todo/copy\", {\n                      \"fromAccountId\":
      \"x\",\n                      \"accountId\": \"y\",\n                      \"create\":
      {\n                        \"k5122\": {\n                          \"id\": \"a\"\n
      \                       }\n                      },\n                      \"onSuccessDestroyOriginal\":
      true\n                    }, \"0\" ]]\n   The server successfully copies the
      Todo to a new account (where it\n   receives a new id) and deletes the original.
      \ Due to the implicit\n   call to \"Todo/set\", there are two responses to the
      single method\n   call, both with the same method call id:\n                       [[
      \"Todo/copy\", {\n                         \"fromAccountId\": \"x\",\n                         \"accountId\":
      \"y\",\n                         \"created\": {\n                           \"k5122\":
      {\n                             \"id\": \"DAf97\"\n                           }\n
      \                        },\n                         \"oldState\": \"c1d64ecb038c\",\n
      \                        \"newState\": \"33844835152b\"\n                       },
      \"0\" ],\n                       [ \"Todo/set\", {\n                         \"accountId\":
      \"x\",\n                         \"oldState\": \"871903\",\n                         \"newState\":
      \"871909\",\n                         \"destroyed\": [ \"a\" ],\n                         ...\n
      \                      }, \"0\" ]]\n"
    title: 5.7.  Examples
  - contents:
    - "5.8.  Proxy Considerations\n   JMAP has been designed to allow an API endpoint
      to easily proxy\n   through to one or more JMAP servers.  This may be useful
      for load\n   balancing, augmenting capabilities, or presenting a single endpoint\n
      \  to accounts hosted on different JMAP servers (splitting the request\n   based
      on each method's \"accountId\" argument).  The proxy need only\n   understand
      the general structure of a JMAP Request object; it does\n   not need to know
      anything specifically about the methods and\n   arguments it will pass through
      to other servers.\n   If splitting up the methods in a request to call them
      on different\n   backend servers, the proxy must do two things to ensure back-\n
      \  references and creation-id references resolve the same as if the\n   entire
      request were processed on a single server:\n   1.  It must pass a \"createdIds\"
      property with each subrequest.  If\n       this is not given by the client,
      an empty object should be used\n       for the first subrequest.  The \"createdIds\"
      property of each\n       subresponse should be passed on in the next subrequest.\n
      \  2.  It must resolve back-references to previous method results that\n       were
      processed on a different server.  This is a relatively\n       simple syntactic
      substitution, described in Section 3.7.\n   When splitting a request based on
      accountId, proxy implementors do\n   need to be aware of \"/copy\" methods that
      copy between accounts.  If\n   the accounts are on different servers, the proxy
      will have to\n   implement this functionality directly.\n"
    title: 5.8.  Proxy Considerations
  title: 5.  Standard Methods and Naming Convention
- contents:
  - "6.  Binary Data\n   Binary data is referenced by a *blobId* in JMAP and uploaded/\n
    \  downloaded separately to the core API.  The blobId solely represents\n   the
    raw bytes of data, not any associated metadata such as a file\n   name or content
    type.  Such metadata is stored alongside the blobId\n   in the object referencing
    it.  The data represented by a blobId is\n   immutable.\n   Any blobId that exists
    within an account may be used when creating/\n   updating another object in that
    account.  For example, an Email type\n   may have a blobId that represents the
    object in Internet Message\n   Format [RFC5322].  A client could create a new
    Email object with an\n   attachment and use this blobId, in effect attaching the
    old message\n   to the new one.  Similarly, it could attach any existing attachment\n
    \  of an old message without having to download and upload it again.\n   When
    the client uses a blobId in a create/update, the server MAY\n   assign a new blobId
    to refer to the same binary data within the new/\n   updated object.  If it does
    so, it MUST return any properties that\n   contain a changed blobId in the created/updated
    response, so the\n   client gets the new ids.\n   A blob that is not referenced
    by a JMAP object (e.g., as a message\n   attachment) MAY be deleted by the server
    to free up resources.\n   Uploads (see below) are initially unreferenced blobs.
    \ To ensure\n   interoperability:\n   o  The server SHOULD use a separate quota
    for unreferenced blobs to\n      the account's usual quota.  In the case of shared
    accounts, this\n      quota SHOULD be separate per user.\n   o  This quota SHOULD
    be at least the maximum total size that a single\n      object can reference on
    this server.  For example, if supporting\n      JMAP Mail, this should be at least
    the maximum total attachments\n      size for a message.\n   o  When an upload
    would take the user over quota, the server MUST\n      delete unreferenced blobs
    in date order, oldest first, until there\n      is room for the new blob.\n   o
    \ Except where quota restrictions force early deletion, an\n      unreferenced
    blob MUST NOT be deleted for at least 1 hour from the\n      time of upload; if
    reuploaded, the same blobId MAY be returned,\n      but this SHOULD reset the
    expiry time.\n   o  A blob MUST NOT be deleted during the method call that removed
    the\n      last reference, so that a client can issue a create and a destroy\n
    \     that both reference the blob within the same method call.\n"
  - contents:
    - "6.1.  Uploading Binary Data\n   There is a single endpoint that handles all
      file uploads for an\n   account, regardless of what they are to be used for.
      \ The Session\n   object (see Section 2) has an \"uploadUrl\" property in URI
      Template\n   (level 1) format [RFC6570], which MUST contain a variable called\n
      \  \"accountId\".  The client may use this template in combination with an\n
      \  \"accountId\" to get the URL of the file upload resource.\n   To upload a
      file, the client submits an authenticated POST request to\n   the file upload
      resource.\n   A successful request MUST return a single JSON object with the\n
      \  following properties as the response:\n   o  accountId: \"Id\"\n      The
      id of the account used for the call.\n   o  blobId: \"Id\"\n      The id representing
      the binary data uploaded.  The data for this\n      id is immutable.  The id
      *only* refers to the binary data, not any\n      metadata.\n   o  type: \"String\"\n
      \     The media type of the file (as specified in [RFC6838],\n      Section
      4.2) as set in the Content-Type header of the upload HTTP\n      request.\n
      \  o  size: \"UnsignedInt\"\n      The size of the file in octets.\n   If identical
      binary content to an existing blob in the account is\n   uploaded, the existing
      blobId MAY be returned.\n   Clients should use the blobId returned in a timely
      manner.  Under\n   rare circumstances, the server may have deleted the blob
      before the\n   client uses it; the client should keep a reference to the local
      file\n   so it can upload it again in such a situation.\n   When an HTTP error
      response is returned to the client, the server\n   SHOULD return a JSON \"problem
      details\" object as the response body,\n   as per [RFC7807].\n   As access controls
      are often determined by the object holding the\n   reference to a blob, unreferenced
      blobs MUST only be accessible to\n   the uploader, even in shared accounts.\n"
    title: 6.1.  Uploading Binary Data
  - contents:
    - "6.2.  Downloading Binary Data\n   The Session object (see Section 2) has a
      \"downloadUrl\" property,\n   which is in URI Template (level 1) format [RFC6570].
      \ The URL MUST\n   contain variables called \"accountId\", \"blobId\", \"type\",
      and \"name\".\n   To download a file, the client makes an authenticated GET
      request to\n   the download URL with the appropriate variables substituted in:\n
      \  o  \"accountId\": The id of the account to which the record with the\n      blobId
      belongs.\n   o  \"blobId\": The blobId representing the data of the file to\n
      \     download.\n   o  \"type\": The type for the server to set in the \"Content-Type\"\n
      \     header of the response; the blobId only represents the binary data\n      and
      does not have a content-type innately associated with it.\n   o  \"name\": The
      name for the file; the server MUST return this as the\n      filename if it
      sets a \"Content-Disposition\" header.\n   As the data for a particular blobId
      is immutable, and thus the\n   response in the generated download URL is too,
      implementors are\n   recommended to set long cache times and use the \"immutable\"
      Cache-\n   Control extension [RFC8246] for successful responses, for example,\n
      \  \"Cache-Control: private, immutable, max-age=31536000\".\n   When an HTTP
      error response is returned to the client, the server\n   SHOULD return a JSON
      \"problem details\" object as the response body,\n   as per [RFC7807].\n"
    title: 6.2.  Downloading Binary Data
  - contents:
    - "6.3.  Blob/copy\n   Binary data may be copied *between* two different accounts
      using the\n   \"Blob/copy\" method rather than having to download and then reupload\n
      \  on the client.\n   The \"Blob/copy\" method takes the following arguments:\n
      \  o  fromAccountId: \"Id\"\n      The id of the account to copy blobs from.\n
      \  o  accountId: \"Id\"\n      The id of the account to copy blobs to.\n   o
      \ blobIds: \"Id[]\"\n      A list of ids of blobs to copy to the other account.\n
      \  The response has the following arguments:\n   o  fromAccountId: \"Id\"\n
      \     The id of the account blobs were copied from.\n   o  accountId: \"Id\"\n
      \     The id of the account blobs were copied to.\n   o  copied: \"Id[Id]|null\"\n
      \     A map of the blobId in the fromAccount to the id for the blob in\n      the
      account it was copied to, or null if none were successfully\n      copied.\n
      \  o  notCopied: \"Id[SetError]|null\"\n      A map of blobId to a SetError
      object for each blob that failed to\n      be copied, or null if none.\n   The
      SetError may be any of the standard set errors that may be\n   returned for
      a create, as defined in Section 5.3.  In addition, the\n   \"notFound\" SetError
      error may be returned if the blobId to be copied\n   cannot be found.\n   The
      following additional method-level error may be returned instead\n   of the \"Blob/copy\"
      response:\n   \"fromAccountNotFound\": The \"fromAccountId\" included with the
      request\n   does not correspond to a valid account.\n"
    title: 6.3.  Blob/copy
  title: 6.  Binary Data
- contents:
  - "7.  Push\n   Push notifications allow clients to efficiently update (almost)\n
    \  instantly to stay in sync with data changes on the server.  The\n   general
    model for push is simple and sends minimal data over the push\n   channel: just
    enough for the client to know whether it needs to\n   resync.  The format allows
    multiple changes to be coalesced into a\n   single push update and the frequency
    of pushes to be rate limited by\n   the server.  It doesn't matter if some push
    events are dropped before\n   they reach the client; the next time it gets/sets
    any records of a\n   changed type, it will discover the data has changed and still
    sync\n   all changes.\n   There are two different mechanisms by which a client
    can receive push\n   notifications, to allow for the different environments in
    which a\n   client may exist.  An event source resource (see Section 7.3) allows\n
    \  clients that can hold transport connections open to receive push\n   notifications
    directly from the JMAP server.  This is simple and\n   avoids third parties, but
    it is often not feasible on constrained\n   platforms such as mobile devices.
    \ Alternatively, clients can make\n   use of any push service supported by their
    environment.  A URL for\n   the push service is registered with the JMAP server
    (see\n   Section 7.2); the server then POSTs each notification to that URL.\n
    \  The push service is then responsible for routing these to the client.\n"
  - contents:
    - "7.1.  The StateChange Object\n   When something changes on the server, the
      server pushes a StateChange\n   object to the client.  A *StateChange* object
      has the following\n   properties:\n   o  @type: \"String\"\n      This MUST
      be the string \"StateChange\".\n   o  changed: \"Id[TypeState]\"\n      A map
      of an \"account id\" to an object encoding the state of data\n      types that
      have changed for that account since the last\n      StateChange object was pushed,
      for each of the accounts to which\n      the user has access and for which something
      has changed.\n      A *TypeState* object is a map.  The keys are the type name
      \"Foo\"\n      (e.g., \"Mailbox\" or \"Email\"), and the value is the \"state\"\n
      \     property that would currently be returned by a call to \"Foo/get\".\n
      \     The client can compare the new state strings with its current\n      values
      to see whether it has the current data for these types.  If\n      not, the
      changes can then be efficiently fetched in a single\n      standard API request
      (using the /changes type methods).\n"
    - contents:
      - "7.1.1.  Example\n   In this example, the server has amalgamated a few changes
        together\n   across two different accounts the user has access to, before
        pushing\n   the following StateChange object to the client:\n                  {\n
        \                   \"@type\": \"StateChange\",\n                    \"changed\":
        {\n                      \"a3123\": {\n                        \"Email\":
        \"d35ecb040aab\",\n                        \"EmailDelivery\": \"428d565f2440\",\n
        \                       \"CalendarEvent\": \"87accfac587a\"\n                      },\n
        \                     \"a43461d\": {\n                        \"Mailbox\":
        \"0af7a512ce70\",\n                        \"CalendarEvent\": \"7a4297cecd76\"\n
        \                     }\n                    }\n                  }\n   The
        client can compare the state strings with its current state for\n   the Email,
        CalendarEvent, etc., object types in the appropriate\n   accounts to see if
        it needs to fetch changes.\n   If the client is itself making changes, it
        may receive a StateChange\n   object while the /set API call is in flight.
        \ It can wait until the\n   call completes and then compare if the new state
        string after the\n   /set is the same as was pushed in the StateChange object;
        if so, and\n   the old state of the /set response matches the client's previous\n
        \  state, it does not need to waste a request asking for changes it\n   already
        knows.\n"
      title: 7.1.1.  Example
    title: 7.1.  The StateChange Object
  - contents:
    - "7.2.  PushSubscription\n   Clients may create a PushSubscription to register
      a URL with the JMAP\n   server.  The JMAP server will then make an HTTP POST
      request to this\n   URL for each push notification it wishes to send to the
      client.\n   As a push subscription causes the JMAP server to make a number of\n
      \  requests to a previously unknown endpoint, it can be used as a vector\n   for
      launching a denial-of-service attack.  To prevent this, when a\n   subscription
      is created, the JMAP server immediately sends a\n   PushVerification object
      to that URL (see Section 7.2.2).  The JMAP\n   server MUST NOT make any further
      requests to the URL until the client\n   receives the push and updates the subscription
      with the correct\n   verification code.\n   A *PushSubscription* object has
      the following properties:\n   o  id: \"Id\" (immutable; server-set)\n      The
      id of the push subscription.\n   o  deviceClientId: \"String\" (immutable)\n
      \     An id that uniquely identifies the client + device it is running\n      on.
      \ The purpose of this is to allow clients to identify which\n      PushSubscription
      objects they created even if they lose their\n      local state, so they can
      revoke or update them.  This string MUST\n      be different on different devices
      and be different from apps from\n      other vendors.  It SHOULD be easy to
      regenerate and not depend on\n      persisted state.  It is RECOMMENDED to use
      a secure hash of a\n      string that contains:\n      1.  A unique identifier
      associated with the device where the JMAP\n          client is running, normally
      supplied by the device's operating\n          system.\n      2.  A custom vendor/app
      id, including a domain controlled by the\n          vendor of the JMAP client.\n
      \     To protect the privacy of the user, the deviceClientId id MUST NOT\n      contain
      an unobfuscated device id.\n   o  url: \"String\" (immutable)\n      An absolute
      URL where the JMAP server will POST the data for the\n      push message.  This
      MUST begin with \"https://\".\n   o  keys: \"Object|null\" (immutable)\n      Client-generated
      encryption keys.  If supplied, the server MUST\n      use them as specified
      in [RFC8291] to encrypt all data sent to the\n      push subscription.  The
      object MUST have the following properties:\n      *  p256dh: \"String\"\n         The
      P-256 Elliptic Curve Diffie-Hellman (ECDH) public key as\n         described
      in [RFC8291], encoded in URL-safe base64\n         representation as defined
      in [RFC4648].\n      *  auth: \"String\"\n         The authentication secret
      as described in [RFC8291], encoded in\n         URL-safe base64 representation
      as defined in [RFC4648].\n   o  verificationCode: \"String|null\"\n      This
      MUST be null (or omitted) when the subscription is created.\n      The JMAP
      server then generates a verification code and sends it in\n      a push message,
      and the client updates the PushSubscription object\n      with the code; see
      Section 7.2.2 for details.\n   o  expires: \"UTCDate|null\"\n      The time
      this push subscription expires.  If specified, the JMAP\n      server MUST NOT
      make further requests to this resource after this\n      time.  It MAY automatically
      destroy the push subscription at or\n      after this time.\n      The server
      MAY choose to set an expiry if none is given by the\n      client or modify
      the expiry time given by the client to a shorter\n      duration.\n   o  types:
      \"String[]|null\"\n      A list of types the client is interested in (using
      the same names\n      as the keys in the TypeState object defined in the previous\n
      \     section).  A StateChange notification will only be sent if the\n      data
      for one of these types changes.  Other types are omitted from\n      the TypeState
      object.  If null, changes will be pushed for all\n      types.\n   The POST
      request MUST have a content type of \"application/json\" and\n   contain the
      UTF-8 JSON-encoded object as the body.  The request MUST\n   have a \"TTL\"
      header and MAY have \"Urgency\" and/or \"Topic\" headers, as\n   specified in
      Section 5 of [RFC8030].  The JMAP server is expected to\n   understand and handle
      HTTP status responses in a reasonable manner.\n   A \"429\" (Too Many Requests)
      response MUST cause the JMAP server to\n   reduce the frequency of pushes; the
      JMAP push structure allows\n   multiple changes to be coalesced into a single
      minimal StateChange\n   object.  See the security considerations in Section
      8.6 for a\n   discussion of the risks in connecting to unknown servers.\n   The
      JMAP server acts as an application server as defined in\n   [RFC8030].  A client
      MAY use the rest of [RFC8030] in combination\n   with its own push service to
      form a complete end-to-end solution, or\n   it MAY rely on alternative mechanisms
      to ensure the delivery of the\n   pushed data after it leaves the JMAP server.\n
      \  The push subscription is tied to the credentials used to authenticate\n   the
      API request that created it.  Should these credentials expire or\n   be revoked,
      the push subscription MUST be destroyed by the JMAP\n   server.  Only subscriptions
      created by these credentials are returned\n   when the client fetches existing
      subscriptions.\n   When these credentials have their own expiry (i.e., it is
      a session\n   with a timeout), the server SHOULD NOT set or bound the expiry
      time\n   for the push subscription given by the client but MUST expire it when\n
      \  the session expires.\n   When these credentials are not time bounded (e.g.,
      Basic\n   authentication [RFC7617]), the server SHOULD set an expiry time for\n
      \  the push subscription if none is given and limit the expiry time if\n   set
      too far in the future.  This maximum expiry time MUST be at least\n   48 hours
      in the future and SHOULD be at least 7 days in the future.\n   An app running
      on a mobile device may only be able to refresh the\n   push subscription lifetime
      when it is in the foreground, so this\n   gives a reasonable time frame to allow
      this to happen.\n   In the case of separate access and refresh credentials,
      as in Oauth\n   2.0 [RFC6749], the server SHOULD tie the push subscription to
      the\n   validity of the refresh token rather than the access token and behave\n
      \  according to whether this is time-limited or not.\n   When a push subscription
      is destroyed, the server MUST securely erase\n   the URL and encryption keys
      from memory and storage as soon as\n   possible.\n"
    - contents:
      - "7.2.1.  PushSubscription/get\n   Standard /get method as described in Section
        5.1, except it does\n   *not* take or return an \"accountId\" argument, as
        push subscriptions\n   are not tied to specific accounts.  It also does *not*
        return a\n   \"state\" argument.  The \"ids\" argument may be null to fetch
        all at\n   once.\n   The server MUST only return push subscriptions that were
        created\n   using the same authentication credentials as for this\n   \"PushSubscription/get\"
        request.\n   As the \"url\" and \"keys\" properties may contain data that
        is private\n   to a particular device, the values for these properties MUST
        NOT be\n   returned.  If the \"properties\" argument is null or omitted, the\n
        \  server MUST default to all properties excluding these two.  If one of\n
        \  them is explicitly requested, the method call MUST be rejected with a\n
        \  \"forbidden\" error.\n"
      title: 7.2.1.  PushSubscription/get
    - contents:
      - "7.2.2.  PushSubscription/set\n   Standard /set method as described in Section
        5.3, except it does\n   *not* take or return an \"accountId\" argument, as
        push subscriptions\n   are not tied to specific accounts.  It also does *not*
        take an\n   \"ifInState\" argument or return \"oldState\" or \"newState\"
        arguments.\n   The \"url\" and \"keys\" properties are immutable; if the client
        wishes\n   to change these, it must destroy the current push subscription
        and\n   create a new one.\n   When a PushSubscription is created, the server
        MUST immediately push\n   a *PushVerification* object to the URL.  It has
        the following\n   properties:\n   o  @type: \"String\"\n      This MUST be
        the string \"PushVerification\".\n   o  pushSubscriptionId: \"String\"\n      The
        id of the push subscription that was created.\n   o  verificationCode: \"String\"\n
        \     The verification code to add to the push subscription.  This MUST\n
        \     contain sufficient entropy to avoid the client being able to guess\n
        \     the code via brute force.\n   The client MUST update the push subscription
        with the correct\n   verification code before the server makes any further
        requests to the\n   subscription's URL.  Attempts to update the subscription
        with an\n   invalid verification code MUST be rejected by the server with
        an\n   \"invalidProperties\" SetError.\n   The client may update the \"expires\"
        property to extend (or, less\n   commonly, shorten) the lifetime of a push
        subscription.  The server\n   MAY modify the proposed new expiry time to enforce
        server-defined\n   limits.  Extending the lifetime does not require the subscription
        to\n   be verified again.\n   Clients SHOULD NOT update or destroy a push
        subscription that they\n   did not create (i.e., has a \"deviceClientId\"
        that they do not\n   recognise).\n"
      title: 7.2.2.  PushSubscription/set
    - contents:
      - "7.2.3.  Example\n   At \"2018-07-06T02:14:29Z\", a client with deviceClientId
        \"a889-ffea-\n   910\" fetches the set of push subscriptions currently on
        the server,\n   making an API request with:\n                       [[ \"PushSubscription/get\",
        {\n                         \"ids\": null\n                       }, \"0\"
        ]]\n   Which returns:\n       [[ \"PushSubscription/get\", {\n         \"list\":
        [{\n             \"id\": \"e50b2c1d-9553-41a3-b0a7-a7d26b599ee1\",\n             \"deviceClientId\":
        \"b37ff8001ca0\",\n             \"verificationCode\": \"b210ef734fe5f439c1ca386421359f7b\",\n
        \            \"expires\": \"2018-07-31T00:13:21Z\",\n             \"types\":
        [ \"Todo\" ]\n         }, {\n             \"id\": \"f2d0aab5-e976-4e8b-ad4b-b380a5b987e4\",\n
        \            \"deviceClientId\": \"X8980fc\",\n             \"verificationCode\":
        \"f3d4618a9ae15c8b7f5582533786d531\",\n             \"expires\": \"2018-07-12T05:55:00Z\",\n
        \            \"types\": [ \"Mailbox\", \"Email\", \"EmailDelivery\" ]\n         }],\n
        \        \"notFound\": []\n       }, \"0\" ]]\n   Since neither of the returned
        push subscription objects have the\n   client's deviceClientId, it knows it
        does not have a current push\n   subscription active on the server.  So it
        creates one, sending this\n   request:\n"
      - "[[ \"PushSubscription/set\", {\n  \"create\": {\n    \"4f29\": {\n      \"deviceClientId\":
        \"a889-ffea-910\",\n      \"url\": \"https://example.com/push/?device=X8980fc&client=12c6d086\",\n
        \     \"types\": null\n    }\n  }\n"
      - "}, \"0\" ]]\n   The server creates the push subscription but limits the expiry
        time\n   to 7 days in the future, returning this response:\n            [[
        \"PushSubscription/set\", {\n              \"created\": {\n                \"4f29\":
        {\n                  \"id\": \"P43dcfa4-1dd4-41ef-9156-2c89b3b19c60\",\n                  \"keys\":
        null,\n                  \"expires\": \"2018-07-13T02:14:29Z\"\n                }\n
        \             }\n            }, \"0\" ]]\n   The server also immediately makes
        a POST request to\n   \"https://example.com/push/?device=X8980fc&client=12c6d086\"
        with the\n   data:\n      {\n        \"@type\": \"PushVerification\",\n        \"pushSubscriptionId\":
        \"P43dcfa4-1dd4-41ef-9156-2c89b3b19c60\",\n        \"verificationCode\": \"da1f097b11ca17f06424e30bf02bfa67\"\n
        \     }\n   The client receives this and updates the subscription with the\n
        \  verification code (note there is a potential race condition here; the\n
        \  client MUST be able to handle receiving the push while the request\n   creating
        the subscription is still in progress):\n       [[ \"PushSubscription/set\",
        {\n         \"update\": {\n           \"P43dcfa4-1dd4-41ef-9156-2c89b3b19c60\":
        {\n             \"verificationCode\": \"da1f097b11ca17f06424e30bf02bfa67\"\n
        \          }\n         }\n       }, \"0\" ]]\n   The server confirms the update
        was successful and will now make\n   requests to the registered URL when the
        state changes.\n   Two days later, the client updates the subscription to
        extend its\n   lifetime, sending this request:\n               [[ \"PushSubscription/set\",
        {\n                 \"update\": {\n                   \"P43dcfa4-1dd4-41ef-9156-2c89b3b19c60\":
        {\n                     \"expires\": \"2018-08-13T00:00:00Z\"\n                   }\n
        \                }\n               }, \"0\" ]]\n   The server extends the
        expiry time, but only again to its maximum\n   limit of 7 days in the future,
        returning this response:\n               [[ \"PushSubscription/set\", {\n
        \                \"updated\": {\n                   \"P43dcfa4-1dd4-41ef-9156-2c89b3b19c60\":
        {\n                     \"expires\": \"2018-07-15T02:22:50Z\"\n                   }\n
        \                }\n               }, \"0\" ]]\n"
      title: 7.2.3.  Example
    title: 7.2.  PushSubscription
  - contents:
    - "7.3.  Event Source\n   Clients that can hold transport connections open can
      connect directly\n   to the JMAP server to receive push notifications via a
      \"text/event-\n   stream\" resource, as described in [EventSource].  This is
      a long\n   running HTTP request, where the server can push data to the client
      by\n   appending data without ending the response.\n   When a change occurs
      in the data on the server, it pushes an event\n   called \"state\" to any connected
      clients, with the StateChange object\n   as the data.\n   The server SHOULD
      also send a new event id that encodes the entire\n   server state visible to
      the user immediately after sending a \"state\"\n   event.  When a new connection
      is made to the event-source endpoint, a\n   client following the server-sent
      events specification will send a\n   Last-Event-ID HTTP header field with the
      last id it saw, which the\n   server can use to work out whether the client
      has missed some\n   changes.  If so, it SHOULD send these changes immediately
      on\n   connection.\n   The Session object (see Section 2) has an \"eventSourceUrl\"
      property,\n   which is in URI Template (level 1) format [RFC6570].  The URL
      MUST\n   contain variables called \"types\", \"closeafter\", and \"ping\".\n
      \  To connect to the resource, the client makes an authenticated GET\n   request
      to the event-source URL with the appropriate variables\n   substituted in:\n
      \  o  \"types\": This MUST be either:\n      *  A comma-separated list of type
      names, e.g.,\n         \"Email,CalendarEvent\".  The server MUST only push changes
      for\n         the types in this list.\n      *  The single character: \"*\".
      \ Changes to all types are pushed.\n   o  \"closeafter\": This MUST be one of
      the following values:\n      *  \"state\": The server MUST end the HTTP response
      after pushing a\n         state event.  This can be used by clients in environments
      where\n         buffering proxies prevent the pushed data from arriving\n         immediately,
      or indeed at all, when operating in the usual\n         mode.\n      *  \"no\":
      The connection is persisted by the server as a standard\n         event-source
      resource.\n   o  \"ping\": A positive integer value representing a length of
      time in\n      seconds, e.g., \"300\".  If non-zero, the server MUST send an
      event\n      called \"ping\" whenever this time elapses since the previous event\n
      \     was sent.  This MUST NOT set a new event id.  If the value is \"0\",\n
      \     the server MUST NOT send ping events.\n      The server MAY modify a requested
      ping interval to be subject to a\n      minimum and/or maximum value.  For interoperability,
      servers MUST\n      NOT have a minimum allowed value higher than 30 or a maximum\n
      \     allowed value less than 300.\n      The data for the ping event MUST be
      a JSON object containing an\n      \"interval\" property, the value (type \"UnsignedInt\")
      being the\n      interval in seconds the server is using to send pings (this
      may be\n      different to the requested value if the server clamped it to be\n
      \     within a min/max value).\n      Clients can monitor for the ping event
      to help determine when the\n      closeafter mode may be required.\n   A client
      MAY hold open multiple connections to the event-source\n   resource, although
      it SHOULD try to use a single connection for\n   efficiency.\n"
    title: 7.3.  Event Source
  title: 7.  Push
- contents:
  - '8.  Security Considerations

    '
  - contents:
    - "8.1.  Transport Confidentiality\n   To ensure the confidentiality and integrity
      of data sent and received\n   via JMAP, all requests MUST use TLS 1.2 [RFC5246]
      [RFC8446] or later,\n   following the recommendations in [RFC7525].  Servers
      SHOULD support\n   TLS 1.3 [RFC8446] or later.\n   Clients MUST validate TLS
      certificate chains to protect against\n   man-in-the-middle attacks [RFC5280].\n"
    title: 8.1.  Transport Confidentiality
  - contents:
    - "8.2.  Authentication Scheme\n   A number of HTTP authentication schemes have
      been standardised (see\n   <https://www.iana.org/assignments/http-authschemes/>).
      \ Servers\n   should take care to assess the security characteristics of different\n
      \  schemes in relation to their needs when deciding what to implement.\n   Use
      of the Basic authentication scheme is NOT RECOMMENDED.  Services\n   that choose
      to use it are strongly recommended to require generation\n   of a unique \"app
      password\" via some external mechanism for each\n   client they wish to connect.
      \ This allows connections from different\n   devices to be differentiated by
      the server and access to be\n   individually revoked.\n"
    title: 8.2.  Authentication Scheme
  - contents:
    - "8.3.  Service Autodiscovery\n   Unless secured by something like DNSSEC, autodiscovery
      of server\n   details using SRV DNS records is vulnerable to a DNS poisoning\n
      \  attack, which can lead to the client talking to an attacker's server\n   instead
      of the real JMAP server.  The attacker may then intercept\n   requests to execute
      man-in-the-middle attacks and, depending on the\n   authentication scheme, steal
      credentials to generate its own\n   requests.\n   Clients that do not support
      SRV lookups are likely to try just using\n   the \"/.well-known/jmap\" path
      directly against the domain of the\n   username over HTTPS.  Servers SHOULD
      ensure this path resolves or\n   redirects to the correct JMAP Session resource
      to allow this to work.\n   If this is not feasible, servers MUST ensure this
      path cannot be\n   controlled by an attacker, as again it may be used to steal\n
      \  credentials.\n"
    title: 8.3.  Service Autodiscovery
  - contents:
    - "8.4.  JSON Parsing\n   The Security Considerations of [RFC8259] apply to the
      use of JSON as\n   the data interchange format.\n   As for any serialization
      format, parsers need to thoroughly check the\n   syntax of the supplied data.
      \ JSON uses opening and closing tags for\n   several types and structures, and
      it is possible that the end of the\n   supplied data will be reached when scanning
      for a matching closing\n   tag; this is an error condition, and implementations
      need to stop\n   scanning at the end of the supplied data.\n   JSON also uses
      a string encoding with some escape sequences to encode\n   special characters
      within a string.  Care is needed when processing\n   these escape sequences
      to ensure that they are fully formed before\n   the special processing is triggered,
      with special care taken when the\n   escape sequences appear adjacent to other
      (non-escaped) special\n   characters or adjacent to the end of data (as in the
      previous\n   paragraph).\n   If parsing JSON into a non-textual structured data
      format,\n   implementations may need to allocate storage to hold JSON string\n
      \  elements.  Since JSON does not use explicit string lengths, the risk\n   of
      denial of service due to resource exhaustion is small, but\n   implementations
      may still wish to place limits on the size of\n   allocations they are willing
      to make in any given context, to avoid\n   untrusted data causing excessive
      memory allocation.\n"
    title: 8.4.  JSON Parsing
  - contents:
    - "8.5.  Denial of Service\n   A small request may result in a very large response
      and require\n   considerable work on the server if resource limits are not enforced.\n
      \  JMAP provides mechanisms for advertising and enforcing a wide variety\n   of
      limits for mitigating this threat, including limits on the number\n   of objects
      fetched in a single method call, number of methods in a\n   single request,
      number of concurrent requests, etc.\n   JMAP servers MUST implement sensible
      limits to mitigate against\n   resource exhaustion attacks.\n"
    title: 8.5.  Denial of Service
  - contents:
    - "8.6.  Connection to Unknown Push Server\n   When a push subscription is registered,
      the application server will\n   make POST requests to the given URL.  There
      are a number of security\n   considerations that MUST be considered when implementing
      this.\n   The server MUST ensure the URL is externally resolvable to avoid\n
      \  server-side request forgery, where the server makes a request to a\n   resource
      on its internal network.\n   A malicious client may use the push subscription
      to attempt to flood\n   a third party server with requests, creating a denial-of-service\n
      \  attack and masking the attacker's true identity.  There is no\n   guarantee
      that the URL given to the JMAP server is actually a valid\n   push server.  Upon
      creation of a push subscription, the JMAP server\n   sends a PushVerification
      object to the URL and MUST NOT send any\n   further requests until the client
      verifies it has received the\n   initial push.  The verification code MUST contain
      sufficient entropy\n   to prevent the client from being able to verify the subscription
      via\n   brute force.\n   The verification code does not guarantee the URL is
      a valid push\n   server, only that the client is able to access the data submitted
      to\n   it.  While the verification step significantly reduces the set of\n   potential
      targets, there is still a risk that the server is unrelated\n   to the client
      and being targeted for a denial-of-service attack.\n   The server MUST limit
      the number of push subscriptions any one user\n   may have to ensure the user
      cannot cause the server to send a large\n   number of push notifications at
      once, which could again be used as\n   part of a denial-of-service attack.  The
      rate of creation MUST also\n   be limited to minimise the ability to abuse the
      verification request\n   as an attack vector.\n"
    title: 8.6.  Connection to Unknown Push Server
  - contents:
    - "8.7.  Push Encryption\n   When data changes, a small object is pushed with
      the new state\n   strings for the types that have changed.  While the data here
      is\n   minimal, a passive man-in-the-middle attacker may be able to gain\n   useful
      information.  To ensure confidentiality and integrity, if the\n   push is sent
      via a third party outside of the control of the client\n   and JMAP server,
      the client MUST specify encryption keys when\n   establishing the PushSubscription
      and ignore any push notification\n   received that is not encrypted with those
      keys.\n   The privacy and security considerations of [RFC8030] and [RFC8291]\n
      \  also apply to the use of the PushSubscription mechanism.\n   As there is
      no crypto algorithm agility in Web Push Encryption\n   [RFC8291], a new specification
      will be needed to provide this if new\n   algorithms are required in the future.\n"
    title: 8.7.  Push Encryption
  - contents:
    - "8.8.  Traffic Analysis\n   While the data is encrypted, a passive observer
      with the ability to\n   monitor network traffic may be able to glean information
      from the\n   timing of API requests and push notifications.  For example, suppose\n
      \  an email or calendar invitation is sent from User A (hosted on Server\n   X)
      to User B (hosted on Server Y).  If Server X hosts data for many\n   users,
      a passive observer can see that the two servers connected but\n   does not know
      who the data was for.  However, if a push notification\n   is immediately sent
      to User B and the attacker can observe this as\n   well, they may reasonably
      conclude that someone on Server X is\n   connecting to User B.\n"
    title: 8.8.  Traffic Analysis
  title: 8.  Security Considerations
- contents:
  - '9.  IANA Considerations

    '
  - contents:
    - "9.1.  Assignment of jmap Service Name\n   IANA has assigned the 'jmap' service
      name in the \"Service Name and\n   Transport Protocol Port Number Registry\"
      [RFC6335].\n   Service Name: jmap\n   Transport Protocol(s): tcp\n   Assignee:
      IESG\n   Contact: IETF Chair\n   Description: JSON Meta Application Protocol\n
      \  Reference: RFC 8620\n   Assignment Notes: This service name was previously
      assigned under the\n   name \"JSON Mail Access Protocol\".  This has been de-assigned
      and\n   re-assigned with the approval of the previous assignee.\n"
    title: 9.1.  Assignment of jmap Service Name
  - contents:
    - "9.2.  Registration of Well-Known URI Suffix for JMAP\n   IANA has registered
      the following suffix in the \"Well-Known URIs\"\n   registry for JMAP, as described
      in [RFC8615]:\n   URI Suffix: jmap\n   Change Controller: IETF\n   Specification
      Document: RFC 8620, Section 2.2.\n"
    title: 9.2.  Registration of Well-Known URI Suffix for JMAP
  - contents:
    - "9.3.  Registration of the jmap URN Sub-namespace\n   IANA has registered the
      following URN sub-namespace in the \"IETF URN\n   Sub-namespace for Registered
      Protocol Parameter Identifiers\" registry\n   within the \"Uniform Resource
      Name (URN) Namespace for IETF Use\"\n   registry as described in [RFC3553].\n
      \  Registered Parameter Identifier: jmap\n   Reference: RFC 8620, Section 9.4\n
      \  IANA Registry Reference: http://www.iana.org/assignments/jmap\n"
    title: 9.3.  Registration of the jmap URN Sub-namespace
  - contents:
    - "9.4.  Creation of \"JMAP Capabilities\" Registry\n   IANA has created the \"JMAP
      Capabilities\" registry as described in\n   Section 2.  JMAP capabilities are
      advertised in the \"capabilities\"\n   property of the JMAP Session resource.
      \ They are used to extend the\n   functionality of a JMAP server.  A capability
      is referenced by a URI.\n   The JMAP capability URI can be a URN starting with\n
      \  \"urn:ietf:params:jmap:\" plus a unique suffix that is the index value\n
      \  in the jmap URN sub-namespace.  Registration of a JMAP capability\n   with
      another form of URI has no impact on the jmap URN sub-namespace.\n   This registry
      follows the expert review process unless the \"intended\n   use\" field is \"common\"
      or \"placeholder\", in which case registration\n   follows the specification
      required process.\n   A JMAP capability registration can have an intended use
      of \"common\",\n   \"placeholder\", \"limited\", or \"obsolete\".  IANA will
      list common-use\n   registrations prominently and separately from those with
      other\n   intended use values.\n   The JMAP capability registration procedure
      is not a formal standards\n   process but rather an administrative procedure
      intended to allow\n   community comment and sanity checking without excessive
      time delay.\n   A \"placeholder\" registration reserves part of the jmap URN
      namespace\n   for another purpose but is typically not included in the\n   \"capabilities\"
      property of the JMAP Session resource.\n"
    - contents:
      - "9.4.1.  Preliminary Community Review\n   Notice of a potential JMAP common-use
        registration SHOULD be sent to\n   the JMAP mailing list <jmap@ietf.org> for
        review.  This mailing list\n   is appropriate to solicit community feedback
        on a proposed JMAP\n   capability.  Registrations that are not intended for
        common use MAY\n   be sent to the list for review as well; doing so is entirely\n
        \  OPTIONAL, but is encouraged.\n   The intent of the public posting to this
        list is to solicit comments\n   and feedback on the choice of the capability
        name, the unambiguity of\n   the specification document, and a review of any
        interoperability or\n   security considerations.  The submitter may submit
        a revised\n   registration proposal or abandon the registration completely
        at any\n   time.\n"
      title: 9.4.1.  Preliminary Community Review
    - contents:
      - "9.4.2.  Submit Request to IANA\n   Registration requests can be sent to <iana@iana.org>.\n"
      title: 9.4.2.  Submit Request to IANA
    - contents:
      - "9.4.3.  Designated Expert Review\n   For a limited-use registration, the
        primary concern of the designated\n   expert (DE) is preventing name collisions
        and encouraging the\n   submitter to document security and privacy considerations;
        a\n   published specification is not required.  For a common-use\n   registration,
        the DE is expected to confirm that suitable\n   documentation, as described
        in Section 4.6 of [RFC8126], is\n   available.  The DE should also verify
        that the capability does not\n   conflict with work that is active or already
        published within the\n   IETF.\n   Before a period of 30 days has passed,
        the DE will either approve or\n   deny the registration request and publish
        a notice of the decision to\n   the JMAP WG mailing list or its successor,
        as well as inform IANA.  A\n   denial notice must be justified by an explanation,
        and, in the cases\n   where it is possible, concrete suggestions on how the
        request can be\n   modified so as to become acceptable should be provided.\n
        \  If the DE does not respond within 30 days, the registrant may request\n
        \  the IESG take action to process the request in a timely manner.\n"
      title: 9.4.3.  Designated Expert Review
    - contents:
      - "9.4.4.  Change Procedures\n   Once a JMAP capability has been published by
        the IANA, the change\n   controller may request a change to its definition.
        \ The same\n   procedure that would be appropriate for the original registration\n
        \  request is used to process a change request.\n   JMAP capability registrations
        may not be deleted; capabilities that\n   are no longer believed appropriate
        for use can be declared obsolete\n   by a change to their \"intended use\"
        field; such capabilities will be\n   clearly marked in the lists published
        by the IANA.\n   Significant changes to a capability's definition should be
        requested\n   only when there are serious omissions or errors in the published\n
        \  specification.  When review is required, a change request may be\n   denied
        if it renders entities that were valid under the previous\n   definition invalid
        under the new definition.\n   The owner of a JMAP capability may pass responsibility
        to another\n   person or agency by informing the IANA; this can be done without\n
        \  discussion or review.\n   The IESG may reassign responsibility for a JMAP
        capability.  The most\n   common case of this will be to enable changes to
        be made to\n   capabilities where the author of the registration has died,
        moved out\n   of contact, or is otherwise unable to make changes that are
        important\n   to the community.\n"
      title: 9.4.4.  Change Procedures
    - contents:
      - "9.4.5.  JMAP Capabilities Registry Template\n   Capability name: (see capability
        property in Section 2)\n   Specification document:\n   Intended use: (one
        of common, limited, placeholder, or obsolete)\n   Change controller: (\"IETF\"
        for Standards Track / BCP RFCs)\n   Security and privacy considerations:\n"
      title: 9.4.5.  JMAP Capabilities Registry Template
    - contents:
      - "9.4.6.  Initial Registration for JMAP Core\n   Capability Name: \"urn:ietf:params:jmap:core\"\n
        \  Specification document: RFC 8620, Section 2\n   Intended use: common\n
        \  Change Controller: IETF\n   Security and privacy considerations: RFC 8620,
        Section 8.\n"
      title: 9.4.6.  Initial Registration for JMAP Core
    - contents:
      - "9.4.7.  Registration for JMAP Error Placeholder in JMAP Capabilities\n        Registry\n
        \  Capability Name: \"urn:ietf:params:jmap:error:\"\n   Specification document:
        RFC 8620, Section 9.5\n   Intended use: placeholder\n   Change Controller:
        IETF\n   Security and privacy considerations: RFC 8620, Section 8.\n"
      title: 9.4.7.  Registration for JMAP Error Placeholder in JMAP Capabilities
    title: 9.4.  Creation of "JMAP Capabilities" Registry
  - contents:
    - "9.5.  Creation of \"JMAP Error Codes\" Registry\n   IANA has created the \"JMAP
      Error Codes\" registry.  JMAP error codes\n   appear in the \"type\" member
      of a JSON problem details object (as\n   described in Section 3.6.1), the \"type\"
      member in a JMAP error object\n   (as described in Section 3.6.2), or the \"type\"
      member of a JMAP\n   method-specific error object (such as SetError in Section
      5.3).  When\n   used in a problem details object, the prefix\n   \"urn:ietf:params:jmap:error:\"
      is always included; when used in JMAP\n   objects, the prefix is always omitted.\n
      \  This registry follows the expert review process.  Preliminary\n   community
      review for this registry follows the same procedures as the\n   \"JMAP Capabilities\"
      registry, but it is optional.  The change\n   procedures for this registry are
      the same as the change procedures\n   for the \"JMAP Capabilities\" registry.\n"
    - contents:
      - "9.5.1.  Expert Review\n   The designated expert should review the following
        aspects of the\n   registration:\n   1.  Verify the error code does not conflict
        with existing names.\n   2.  Verify the error code follows the syntax limitations
        (does not\n       require URI encoding).\n   3.  Encourage the submitter to
        follow the naming convention of\n       previously registered errors.\n   4.
        \ Encourage the submitter to describe client behaviours that are\n       recommended
        in response to the error code.  These may distinguish\n       the error code
        from other error codes.\n   5.  Encourage the submitter to describe when the
        server should issue\n       the error as opposed to some other error code.\n
        \  6.  Encourage the submitter to note any security considerations\n       associated
        with the error, if any (e.g., an error code that might\n       disclose existence
        of data the authenticated user does not have\n       permission to know about).\n
        \  Steps 3-6 are meant to promote a higher-quality registry.  However,\n   the
        expert is encouraged to approve any registration that would not\n   actively
        harm JMAP interoperability to make this a relatively\n   lightweight process.\n"
      title: 9.5.1.  Expert Review
    - contents:
      - "9.5.2.  JMAP Error Codes Registry Template\n   JMAP Error Code:\n   Intended
        use: (one of \"common\", \"limited\", \"obsolete\")\n   Change Controller:
        (\"IETF\" for Standards Track / BCP RFCs)\n   Reference: (Optional.  Only
        required if defined in an RFC.)\n   Description:\n"
      title: 9.5.2.  JMAP Error Codes Registry Template
    - contents:
      - "9.5.3.  Initial Contents for the JMAP Error Codes Registry\n   o  JMAP Error
        Code: accountNotFound\n      Intended Use: Common\n      Change Controller:
        IETF\n      Reference: RFC 8620, Section 3.6.2\n      Description: The accountId
        does not correspond to a valid account.\n   o  JMAP Error Code: accountNotSupportedByMethod\n
        \     Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Section 3.6.2\n      Description: The accountId given corresponds
        to a valid account,\n      but the account does not support this method or
        data type.\n   o  JMAP Error Code: accountReadOnly\n      Intended Use: Common\n
        \     Change Controller: IETF\n      Reference: RFC 8620, Section 3.6.2\n
        \     Description: This method modifies state, but the account is read-\n
        \     only (as returned on the corresponding Account object in the JMAP\n
        \     Session resource).\n   o  JMAP Error Code: anchorNotFound\n      Intended
        Use: Common\n      Change Controller: IETF\n      Reference: RFC 8620, Section
        5.5\n      Description: An anchor argument was supplied, but it cannot be\n
        \     found in the results of the query.\n   o  JMAP Error Code: alreadyExists\n
        \     Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Section 5.4\n      Description: The server forbids duplicates, and
        the record already\n      exists in the target account.  An existingId property
        of type Id\n      MUST be included on the SetError object with the id of the\n
        \     existing record.\n   o  JMAP Error Code: cannotCalculateChanges\n      Intended
        Use: Common\n      Change Controller: IETF\n      Reference: RFC 8620, Sections
        5.2 and 5.6\n      Description: The server cannot calculate the changes from
        the\n      state string given by the client.\n   o  JMAP Error Code: forbidden\n
        \     Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Sections 3.6.2, 5.3, and 7.2.1\n      Description: The action would
        violate an ACL or other permissions\n      policy.\n   o  JMAP Error Code:
        fromAccountNotFound\n      Intended Use: Common\n      Change Controller:
        IETF\n      Reference: RFC 8620, Sections 5.4 and 6.3\n      Description:
        The fromAccountId does not correspond to a valid\n      account.\n   o  JMAP
        Error Code: fromAccountNotSupportedByMethod\n      Intended Use: Common\n
        \     Change Controller: IETF\n      Reference: RFC 8620, Section 5.4\n      Description:
        The fromAccountId given corresponds to a valid\n      account, but the account
        does not support this data type.\n   o  JMAP Error Code: invalidArguments\n
        \     Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Section 3.6.2\n      Description: One of the arguments is of the
        wrong type or\n      otherwise invalid, or a required argument is missing.\n
        \  o  JMAP Error Code: invalidPatch\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.3\n      Description:
        The PatchObject given to update the record was not a\n      valid patch.\n
        \  o  JMAP Error Code: invalidProperties\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.3\n      Description:
        The record given is invalid.\n   o  JMAP Error Code: notFound\n      Intended
        Use: Common\n      Change Controller: IETF\n      Reference: RFC 8620, Section
        5.3\n      Description: The id given cannot be found.\n   o  JMAP Error Code:
        notJSON\n      Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Section 3.6.1\n      Description: The content type of the request
        was not application/\n      json, or the request did not parse as I-JSON.\n
        \  o  JMAP Error Code: notRequest\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 3.6.1\n      Description:
        The request parsed as JSON but did not match the type\n      signature of
        the Request object.\n   o  JMAP Error Code: overQuota\n      Intended Use:
        Common\n      Change Controller: IETF\n      Reference: RFC 8620, Section
        5.3\n      Description: The create would exceed a server-defined limit on
        the\n      number or total size of objects of this type.\n   o  JMAP Error
        Code: rateLimit\n      Intended Use: Common\n      Change Controller: IETF\n
        \     Reference: RFC 8620, Section 5.3\n      Description: Too many objects
        of this type have been created\n      recently, and a server-defined rate
        limit has been reached.  It\n      may work if tried again later.\n   o  JMAP
        Error Code: requestTooLarge\n      Intended Use: Common\n      Change Controller:
        IETF\n      Reference: RFC 8620, Sections 5.1 and 5.3\n      Description:
        The total number of actions exceeds the maximum\n      number the server is
        willing to process in a single method call.\n   o  JMAP Error Code: invalidResultReference\n
        \     Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Section 3.6.2\n      Description: The method used a result reference
        for one of its\n      arguments, but this failed to resolve.\n   o  JMAP Error
        Code: serverFail\n      Intended Use: Common\n      Change Controller: IETF\n
        \     Reference: RFC 8620, Section 3.6.2\n      Description: An unexpected
        or unknown error occurred during the\n      processing of the call.  The method
        call made no changes to the\n      server's state.\n   o  JMAP Error Code:
        serverPartialFail\n      Intended Use: Limited\n      Change Controller: IETF\n
        \     Reference: RFC 8620, Section 3.6.2\n      Description: Some, but not
        all, expected changes described by the\n      method occurred.  The client
        MUST resynchronise impacted data to\n      determine the server state.  Use
        of this error is strongly\n      discouraged.\n   o  JMAP Error Code: serverUnavailable\n
        \     Intended Use: Common\n      Change Controller: IETF\n      Reference:
        RFC 8620, Section 3.6.2\n      Description: Some internal server resource
        was temporarily\n      unavailable.  Attempting the same operation later (perhaps
        after a\n      backoff with a random factor) may succeed.\n   o  JMAP Error
        Code: singleton\n      Intended Use: Common\n      Change Controller: IETF\n
        \     Reference: RFC 8620, Section 5.3\n      Description: This is a singleton
        type, so you cannot create\n      another one or destroy the existing one.\n
        \  o  JMAP Error Code: stateMismatch\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.3\n      Description:
        An ifInState argument was supplied, and it does not\n      match the current
        state.\n   o  JMAP Error Code: tooLarge\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.3\n      Description:
        The action would result in an object that exceeds a\n      server-defined
        limit for the maximum size of a single object of\n      this type.\n   o  JMAP
        Error Code: tooManyChanges\n      Intended Use: Common\n      Change Controller:
        IETF\n      Reference: RFC 8620, Section 5.6\n      Description: There are
        more changes than the client's maxChanges\n      argument.\n   o  JMAP Error
        Code: unknownCapability\n      Intended Use: Common\n      Change Controller:
        IETF\n      Reference: RFC 8620, Section 3.6.1\n      Description: The client
        included a capability in the \"using\"\n      property of the request that
        the server does not support.\n   o  JMAP Error Code: unknownMethod\n      Intended
        Use: Common\n      Change Controller: IETF\n      Reference: RFC 8620, Section
        3.6.2\n      Description: The server does not recognise this method name.\n
        \  o  JMAP Error Code: unsupportedFilter\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.5\n      Description:
        The filter is syntactically valid, but the server\n      cannot process it.\n
        \  o  JMAP Error Code: unsupportedSort\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.5\n      Description:
        The sort is syntactically valid but includes a\n      property the server
        does not support sorting on or a collation\n      method it does not recognise.\n
        \  o  JMAP Error Code: willDestroy\n      Intended Use: Common\n      Change
        Controller: IETF\n      Reference: RFC 8620, Section 5.3\n      Description:
        The client requested an object be both updated and\n      destroyed in the
        same /set request, and the server has decided to\n      therefore ignore the
        update.\n"
      title: 9.5.3.  Initial Contents for the JMAP Error Codes Registry
    title: 9.5.  Creation of "JMAP Error Codes" Registry
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [EventSource]\n              Hickson, I., \"Server-Sent
      Events\", World Wide Web\n              Consortium Recommendation REC-eventsource-20150203,\n
      \             February 2015, <https://www.w3.org/TR/eventsource/>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2782]  Gulbrandsen,
      A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying the location
      of services (DNS SRV)\", RFC 2782,\n              DOI 10.17487/RFC2782, February
      2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n   [RFC2818]
      \ Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,
      May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC3339]
      \ Klyne, G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <https://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC3553]  Mealling, M., Masinter, L., Hardie, T., and G. Klyne, \"An\n              IETF
      URN Sub-namespace for Registered Protocol\n              Parameters\", BCP 73,
      RFC 3553, DOI 10.17487/RFC3553, June\n              2003, <https://www.rfc-editor.org/info/rfc3553>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
      STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC4790]  Newman, C., Duerst, M., and A. Gulbrandsen, \"Internet\n              Application
      Protocol Collation Registry\", RFC 4790,\n              DOI 10.17487/RFC4790,
      March 2007,\n              <https://www.rfc-editor.org/info/rfc4790>.\n   [RFC5051]
      \ Crispin, M., \"i;unicode-casemap - Simple Unicode Collation\n              Algorithm\",
      RFC 5051, DOI 10.17487/RFC5051, October 2007,\n              <https://www.rfc-editor.org/info/rfc5051>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5322]  Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n              DOI
      10.17487/RFC5322, October 2008,\n              <https://www.rfc-editor.org/info/rfc5322>.\n
      \  [RFC6186]  Daboo, C., \"Use of SRV Records for Locating Email\n              Submission/Access
      Services\", RFC 6186,\n              DOI 10.17487/RFC6186, March 2011,\n              <https://www.rfc-editor.org/info/rfc6186>.\n
      \  [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire,
      \"Internet Assigned Numbers Authority (IANA)\n              Procedures for the
      Management of the Service Name and\n              Transport Protocol Port Number
      Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC6570]  Gregorio,
      J., Fielding, R., Hadley, M., Nottingham, M.,\n              and D. Orchard,
      \"URI Template\", RFC 6570,\n              DOI 10.17487/RFC6570, March 2012,\n
      \             <https://www.rfc-editor.org/info/rfc6570>.\n   [RFC6749]  Hardt,
      D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC 6749,
      DOI 10.17487/RFC6749, October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n
      \  [RFC6764]  Daboo, C., \"Locating Services for Calendaring Extensions\n              to
      WebDAV (CalDAV) and vCard Extensions to WebDAV\n              (CardDAV)\", RFC
      6764, DOI 10.17487/RFC6764, February 2013,\n              <https://www.rfc-editor.org/info/rfc6764>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC6901]
      \ Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,\n              \"JavaScript
      Object Notation (JSON) Pointer\", RFC 6901,\n              DOI 10.17487/RFC6901,
      April 2013,\n              <https://www.rfc-editor.org/info/rfc6901>.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC7493]
      \ Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n              DOI
      10.17487/RFC7493, March 2015,\n              <https://www.rfc-editor.org/info/rfc7493>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <https://www.rfc-editor.org/info/rfc7525>.\n   [RFC7617]
      \ Reschke, J., \"The 'Basic' HTTP Authentication Scheme\",\n              RFC
      7617, DOI 10.17487/RFC7617, September 2015,\n              <https://www.rfc-editor.org/info/rfc7617>.\n
      \  [RFC7807]  Nottingham, M. and E. Wilde, \"Problem Details for HTTP\n              APIs\",
      RFC 7807, DOI 10.17487/RFC7807, March 2016,\n              <https://www.rfc-editor.org/info/rfc7807>.\n
      \  [RFC8030]  Thomson, M., Damaggio, E., and B. Raymor, Ed., \"Generic\n              Event
      Delivery Using HTTP Push\", RFC 8030,\n              DOI 10.17487/RFC8030, December
      2016,\n              <https://www.rfc-editor.org/info/rfc8030>.\n   [RFC8126]
      \ Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n
      \  [RFC8264]  Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n              Preparation,
      Enforcement, and Comparison of\n              Internationalized Strings in Application
      Protocols\",\n              RFC 8264, DOI 10.17487/RFC8264, October 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8264>.\n   [RFC8291]  Thomson,
      M., \"Message Encryption for Web Push\", RFC 8291,\n              DOI 10.17487/RFC8291,
      November 2017,\n              <https://www.rfc-editor.org/info/rfc8291>.\n   [RFC8446]
      \ Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n              Version
      1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n
      \  [RFC8615]  Nottingham, M., \"Well-Known Uniform Resource Identifiers\n              (URIs)\",
      RFC 8615, DOI 10.17487/RFC8615, May 2019,\n              <https://www.rfc-editor.org/info/rfc8615>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC8246]  McManus, P., \"HTTP Immutable
      Responses\", RFC 8246,\n              DOI 10.17487/RFC8246, September 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8246>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Neil Jenkins\n   Fastmail\n   PO Box 234, Collins St.
    West\n   Melbourne, VIC  8007\n   Australia\n   Email: neilj@fastmailteam.com\n
    \  URI:   https://www.fastmail.com\n   Chris Newman\n   Oracle\n   440 E. Huntington
    Dr., Suite 400\n   Arcadia, CA  91006\n   United States of America\n   Email:
    chris.newman@oracle.com\n"
  title: Authors' Addresses
