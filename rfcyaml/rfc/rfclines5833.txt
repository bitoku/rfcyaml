Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols.
In particular, it describes the managed objects for modeling the Control And Provisioning of Wireless Access Points (CAPWAP) Protocol.
This MIB module is presented as a basis for future work on the SNMP management of the CAPWAP protocol.
The CAPWAP Protocol [RFC5415] defines a standard, interoperable protocol, which enables an Access Controller (AC) to manage a collection of Wireless Termination Points (WTPs).
This document defines a MIB module that can be used to manage the CAPWAP implementations.
This MIB module covers both configuration and WTP status monitoring aspects of CAPWAP, and provides a way to reuse MIB modules for any wireless technology.
It presented as a basis for future work on a SNMP management of the CAPWAP protocol.
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579], and
This document uses terminology from the CAPWAP Protocol specification [RFC5415] and the Architecture Taxonomy for CAPWAP [RFC4118].
Access Controller (AC): The network entity that provides WTP access to the network infrastructure in the data plane, control plane, management plane, or a combination therein.
The physical or network entity that contains an radio frequency (RF) antenna and wireless physical layer (PHY) to transmit and receive station traffic for wireless access networks.
Control And Provisioning of Wireless Access Points (CAPWAP): It is a generic protocol defining AC and WTP control and data plane communication via a CAPWAP protocol transport mechanism.
CAPWAP control messages, and optionally CAPWAP data messages, are secured using Datagram Transport Layer Security (DTLS) [RFC4347].
A bi directional flow defined by the AC IP Address, WTP IP Address, AC control port, WTP control port, and the transport layer protocol (UDP or UDP Lite) over which CAPWAP control packets are sent and received.
A bi directional flow defined by the AC IP Address, WTP IP Address, AC data port, WTP data port, and the transport layer protocol (UDP or UDP Lite) over which CAPWAP data packets are sent and received.
Station (STA): A device that contains an interface to a wireless medium (WM).
Split and Local MAC: The CAPWAP protocol supports two modes of operation: Split and Local MAC (medium access control).
In Split MAC mode, all Layer 2 wireless data and management frames are encapsulated via the CAPWAP protocol and exchanged between the AC and the WTPs.
The Local MAC mode allows the data frames to be either locally bridged or tunneled as 802.3 frames.
The CAPWAP protocol is independent of a specific WTP radio technology, as well its associated wireless link layer protocol.
Elements of the CAPWAP protocol are designed to accommodate the specific needs of each wireless technology in a standard way.
Implementation of the CAPWAP protocol for a particular wireless technology MUST define a binding protocol for it, e.g., the binding for IEEE 802.11, provided in [RFC5416].
Autonomous Wireless Local Area Network (WLAN) Architecture: It is the traditional autonomous WLAN architecture, in which each WTP is a single physical device that implements all the wireless services.
Centralized WLAN Architecture: It is an emerging hierarchical architecture utilizing one or more centralized controllers for managing a large number of WTP devices.
It can be said that the full wireless functions are implemented across multiple physical network devices, namely, the WTPs and ACs.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
The CAPWAP Protocol MIB module (CAPWAP BASE MIB) is designed to:  Support centralized management and monitoring of WTPs from the AC in combination with the CAPWAP protocol;  Allow operators to make configurations for WTPs before and after they connect to the AC;  Support querying of CAPWAP protocol parameters;  Support displaying of WTPs' current states and configurations;  Provide basic property information about the AC, WTPs, radios, and stations, and their relationships;  Provide counters for events on WTPs and radios such as reboot and hardware failure;  Provide various notifications such as channel up and join failure.
Wireless Binding MIB Modules Other Standards Development Organizations (SDOs), such as IEEE, have already defined MIB modules for a specific wireless technology, e.g., IEEE 802.11 MIB module [IEEE.802 11.2007].
Such MIB modules are called wireless binding MIB modules.
This document introduces a mechanism to avoid redefining MIB objects in the existing MIB modules for a specific wireless technology, in other words, a mechanism to reuse wireless binding MIB modules defined by other SDOs.
In summary, the CAPWAP BASE MIB module has the following design objectives:
To implement an architecture that uses SNMP for the management and control of wireless networks, and answering the operator's requirements for centralized management, whatever the wireless devices are configured and deployed (centralized, autonomous, or some mix);  To be consistent with the CAPWAP protocol;  To be independent of any wireless technologies and be able to reuse wireless binding MIB modules defined by other SDOs;  To enable interoperability between vendors;  To meet the management requirements for the centralized WLAN architecture.
The basic design idea of the CAPWAP BASE MIB module is:  The SNMP agent MUST be run on the AC devices and is not REQUIRED on the WTP devices.
It follows the same model as the CAPWAP protocol: Centralized Control.
It is designed to accommodate the specific needs of each wireless technology in a standard way.
It is independent of any wireless technologies.
The ifIndex [RFC2863] is used as a common index for corresponding interfaces in the CAPWAP BASE MIB and the MIB modules of specific wireless technologies.
The operator could manage and control the centralized WLAN architectures using multiple MIB modules defined by multiple SDOs, while keeping them loosely coupled.
Mechanism of Reusing Wireless Binding MIB Modules For any wireless technology, the configuration and management of radios are very important.
As usual, wireless binding MIB modules support radio management on their own.
For example, the MIB tables such as the dot11OperationTable [IEEE.802 11.2007] are able to support WTP radio configuration.
These tables use the ifIndex as the index, and work well under autonomous WLAN architecture.
To reuse such wireless binding MIB modules is very important to centralized WLAN architectures.
According to [RFC5415], a specific PHY radio could be identified by the combination of the identifiers of the WTP and radio (WTP ID   Radio ID), so the key point is to make use of the ifIndex idea and find a way to maintain the mappings between 'WTP ID   radio ID' and the ifIndex.
As a generic mechanism, an ifIndex can identify an interface in an abstract way, and it does NOT care for the interface's PHY location (either on the WTP or AC).
The AC can have WTP Virtual Radio Interfaces to logically represent PHY radios on the WTP.
From the operator's perspective, it appears that PHY radios are located on the AC, and the PHY location of the WTP (radio) is hidden.
The operator can operate radios through MIB tables with the ifIndex of a WTP Virtual Radio Interface.
As a type of abstract interface, the WTP Virtual Radio Interface could be used by any wireless technology such as IEEE 802.11 and 802.16.
The capwapBaseWirelessBindingTable in the CAPWAP BASE MIB module is used to store the mappings between the 'WTP ID   Radio ID' and the ifIndex.
CAPWAP Protocol Wireless Binding MIB Module
According to the CAPWAP Protocol specification [RFC5415], when defining a binding for wireless technologies, the authors MUST include any necessary definitions for technology specific messages and all technology specific message elements for those messages.
A CAPWAP binding protocol is required for a specific wireless binding technology, e.g., the protocol of [RFC5416] for IEEE 802.11 binding.
Sometimes, not all the technology specific message elements in a CAPWAP binding protocol have MIB objects defined by other SDOs.
For example, the protocol of [RFC5416] defines WLAN management.
The WLAN refers to a logical component instantiated on a WTP device.
A single physical WTP MAY operate a number of WLANs.
Also, Local or Split MAC modes could be specified for a WLAN.
The MAC mode for a WLAN is not in the scope of IEEE 802.11 [IEEE.802 11.2007].
In such cases, in addition to the existing wireless binding MIB modules defined by other SDOs, a CAPWAP protocol wireless binding MIB module is required to be defined for a wireless binding, e.g, the CAPWAP Protocol Binding MIB for IEEE 802.11
In a centralized WLAN architecture, a WTP profile is used to make configurations such as a static IP address for a WTP before and after it connects to the AC.
It MUST contain the Base MAC address [RFC5415] of the WTP because the CAPWAP message received from the WTP contains the Base MAC address and the AC uses this Base MAC address to find the corresponding WTP profile.
Section 4.6.40 of [RFC5415] omits indicating that the WTP's Base MAC address MUST be included in the WTP Board Data message element.
This is a known errata item [Err1832] and should be fixed in any future revision of RFC 5415.
Another important function of WTP profile is to trigger the creation of WTP Virtual Radio Interfaces on the AC.
To implement this function, a WTP profile MUST include the WTP's model number [RFC5415], which reflects the number of PHY radios on the WTP.
In this way, the creation of a WTP profile triggers the AC to automatically create the same number of WTP Virtual Radio Interfaces corresponding to the WTP's PHY radios without manual intervention.
With the ifIndexes of WTP Virtual Radio Interfaces, the operator could configure and manage the WTP's PHY radios through the wireless binding MIB modules.
Structure of the MIB Module
The MIB objects are derived from the CAPWAP protocol document [RFC5415].
The AC name list table is used to configure the AC name list.
The ACL table is used to configure stations' Access Control Lists (ACLs).
The WTP profile table is used to configure WTP profiles for WTPs to be managed before they connect to the AC.
An operator could change a WTP's current configuration by changing the values of parameters in the corresponding WTP profile, then the WTP could get the new configuration through the CAPWAP control channel.
The state table of WTPs is used to indicate the AC's CAPWAP FSM state for each WTP, and helps the operator to query a WTP's current configuration.
The WTP table is used to display properties of the WTPs in running state.
The wireless binding table is used to display the mappings between WTP Virtual Radio Interfaces and PHY radios, and the wireless binding type for each PHY radio.
The station table is used for providing stations' basic property information.
The WTP events statistic table is used for collecting WTP reboot count, link failure count, hardware failure count and so on.
capwapBaseRadioEventsStatsTable The radio events statistic table is used for collecting radio reset count, channel change count, hardware failure count, and so on.
Relationship to Other MIB Modules 7.1.
The CAPWAP BASE MIB module does not duplicate the objects of the 'system' group in the SNMPv2 MIB [RFC3418] that is defined as being mandatory for all systems, and the objects apply to the entity as a whole.
The 'system' group provides identification of the management entity and certain other system wide data.
Relationship to IF MIB Module
The Interfaces Group [RFC2863] defines generic managed objects for managing interfaces.
This memo contains the media specific extensions to the Interfaces Group for managing WTP PHY radios that are modeled as interfaces.
The IF MIB module is required to be supported on the AC.
Each PHY radio on the WTP corresponds to a WTP Virtual Radio Interface on the AC.
The WTP Virtual Radio Interface provides a way to configure the radio's parameters and query radio's traffic statistics, and reuse wireless binding modules defined by other SDOs.
The interface MUST be modeled as an ifEntry, and ifEntry objects such as ifIndex, ifDescr, ifName, and ifAlias are to be used as per [RFC2863].
Also, as an ifIndex [RFC2863] is used as a common index for corresponding interfaces in the CAPWAP BASE MIB and specific wireless technologies
MIB modules, the AC MUST have a mechanism that preserves the values of the ifIndexes in the ifTable at AC reboot.
Relationship to ENTITY MIB Module
The ENTITY MIB module [RFC4133] meets the need for a standardized way of representing a single agent that supports multiple instances of one MIB.
It could express a certain relationship between multiple entities and provide entity properties for each entity.
In a centralized WLAN architecture, the SNMP agent runs on the AC and is not required on the WTP.
With the ENTITY MIB module on the AC, it could keep entity information such as firmware revision and software revision of the AC and WTPs.
From the ENTITY MIB module's perspective, the overall physical entity (AC) is a 'compound' of multiple physical entities (that is, the WTPs connected to AC), and all entities are each identified by a physical index.
The capwapBaseWtpTable of the CAPWAP BASE MIB module uses the capwapBaseWtpPhyIndex object to store the mappings of WTP object between CAPWAP BASE MIB and ENTITY MIB modules.
By querying both the CAPWAP BASE MIB and ENTITY MIB modules, operators could query the status and properties of the AC and WTPs.
For example, they could get a WTP's current status through the CAPWAP BASE MIB module, and a WTP's software revision information through the ENTITY MIB module.
The CAPWAP BASE MIB module does not duplicate those objects defined in the ENTITY MIB module.
The wireless binding MIB module of a wireless technology (such as [IEEE.802 11.2007]) is required to be supported on the AC.
The CAPWAP BASE MIB module is able to support any wireless binding.
Through the ifIndexes of WTP Virtual Radio Interfaces, it provides a consistent and abstract way of reusing MIB objects in the wireless binding MIB modules.
The CAPWAP BASE MIB module does not duplicate those objects defined in the wireless binding MIB modules.
MIB Modules Required for IMPORTS
The following MIB module IMPORTS objects from SYSAPPL MIB [RFC2287], SNMPv2
CONF [RFC2580], IF MIB [RFC2863], SNMP FRAMEWORK MIB [RFC3411], INET ADDRESS MIB [RFC4001], and ENTITY MIB [RFC4133].
MIB Module Usage Below, the IEEE 802.11 binding is used as an example of how the MIB modules operate.
1) Create a WTP profile.
Suppose the WTP's Base MAC address is '00:01:01:01:01:00'.
Create the WTP profile as follows:
The creation of this WTP profile triggers the AC to automatically create a WTP Virtual Radio Interface and add a new row object to the capwapBaseWirelessBindingTable without manual intervention.
Suppose the ifIndex of the WTP Virtual Radio Interface is 10.
The following information is stored in the capwapBaseWirelessBindingTable.
The WTP Virtual Radio Interfaces on the AC correspond to the PHY radios on the WTP.
The WTP Virtual Radio Interface is modeled by ifTable [RFC2863].
Before configuring PHY radios, the operator needs to get the ifIndexes of WTP Virtual Radio Interfaces corresponding to the PHY radios.
As capwapBaseWirelessBindingTable already stores the mappings between PHY radios (Radio IDs) and the ifIndexes of WTP Virtual Radio Interfaces, the operator can get the ifIndex information by querying this table.
Such a query operation SHOULD run from radio ID 1 to radio ID 31 according to [RFC5415]), and stop when an invalid ifIndex value (0) is returned.
This example uses capwapBaseWtpProfileId   1 and capwapBaseWirelessBindingRadioId   1 as inputs to query the capwapBaseWirelessBindingTable, and gets capwapBaseWirelessBindingVirtualRadioIfIndex   10.
Then it uses capwapBaseWtpProfileId   1 and capwapBaseWirelessBindingRadioId   2, and gets an invalid ifIndex value (0), so the query operation ends.
This method gets not only the ifIndexes of WTP Virtual Radio Interfaces, but also the numbers of PHY radios.
Besides checking whether the ifIndex value is valid, the operator SHOULD check whether the capwapBaseWirelessBindingType is the desired binding type.
Configure specific wireless binding parameters for a WTP Virtual Radio Interface.
This configuration is made on the AC through a specific wireless binding MIB module such as the IEEE 802.11 MIB module.
The following shows an example of configuring parameters for a WTP Virtual Radio Interface with ifIndex 10 through the IEEE 802.11 dot11OperationTable [IEEE.802 11.2007].
Get the current configuration status report from the WTP to the AC.
According to [RFC5415], before a WTP that has joined the AC gets configuration from the AC, it needs to report its current configuration status by sending a configuration status request message to the AC, which uses the message to update MIB objects on the AC.
For example, for IEEE 802.11 binding, the AC updates data in the ifTable [RFC2863] and IEEE 802.11 MIB module, and so on, according to the message.
For ifIndex 10, its ifOperStatus in ifTable is updated according to the current radio operational status in the CAPWAP message.
Query WTP and radio statistical data.
After WTPs start to run, the operator could query WTP and radio statistical data through CAPWAP BASE MIB and the specific binding MIB module on the AC.
For example, through dot11CountersTable in the IEEE 802.11 MIB module, the operator could query the counter data of a radio using the ifIndex of the corresponding WTP Virtual Radio Interface.
With the capwapBaseWtpTable table in the CAPWAP  BASE MIB module, the operator could query the properties of running WTPs.
Run MIB operations through a CAPWAP protocol wireless binding MIB module.
For example, for the CAPWAP IEEE 802.11 binding protocol [RFC5416], some MIB operations such as MAC mode configuration for a WLAN depend on the CAPWAP Protocol Binding MIB for IEEE 802.11
For more information, refer to [RFC5834].
Query other properties of a WTP.
The Operator could query MIB objects in the ENTITY MIB [RFC4133] module by using the capwapBaseWtpPhyIndex in the capwapBaseWtpTable of CAPWAP BASE MIB module.
The properties of a WTP such as software version, hardware version are available in the ENTITY MIB module.
IMPORTS PhysAddress, TEXTUAL CONVENTION, TruthValue, DateAndTime, RowStatus FROM SNMPv2 TC LongUtf8String FROM SYSAPPL MIB InterfaceIndex, ifGeneralInformationGroup FROM IF MIB PhysicalIndex FROM ENTITY
MIB SnmpAdminString FROM SNMP FRAMEWORK MIB NOTIFICATION GROUP, OBJECT GROUP, MODULE COMPLIANCE FROM SNMPv2 CONF MODULE IDENTITY, OBJECT TYPE, NOTIFICATION TYPE, mib 2, Integer32, Unsigned32, Counter32, Gauge32, TimeTicks FROM SNMPv2
SMI InetAddressType, InetAddress FROM INET ADDRESS MIB;
" CONTACT INFO "General Discussion: capwap@frascone.com
To Subscribe: http://lists.frascone.com/mailman/listinfo/capwap Yang Shi (editor)
Ltd. Beijing R&D Center of H3C, Digital Technology Plaza
Shangdi 9th Street, Haidian District Beijing
Bayview Dr. San Carlos, CA
94070 USA Phone:  1 408
27707 USA Phone:  1 919 308 1216
Kifer Road Sunnyvale, CA  94086
yzhang@fortinet.com" DESCRIPTION "Copyright (c) 2010
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this MIB module is part of RFC 5833; see the RFC itself for full legal notices.
This MIB module contains managed object definitions for the CAPWAP Protocol."
"Represents the unique identifier of a WTP instance.
As usual, the Base MAC address of the WTP is used.
TEXTUAL CONVENTION DISPLAY HINT "1x:
"Represents the unique identifier of a station instance.
As usual, the MAC address of the station is used.
"Represents the unique identifier of a radio on a WTP."
"Represents the tunneling modes of operation that are supported by a WTP.
The WTP MAY support more than one option, represented by the bit field below: localBridging(0)
802.3 frame tunnel mode nativeTunnel(2)
Native frame tunnel mode" REFERENCE "Section 4.6.43 of CAPWAP Protocol Specification, RFC 5415.
"Represents the MAC mode of operation supported by a WTP.
The following enumerated values are supported: localMAC(0)
Both Local MAC and Split MAC Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.44 of CAPWAP Protocol Specification, RFC 5415.
"Represents the channel type for CAPWAP protocol.
"Represents the authentication credential type for a WTP.
The following enumerated values are supported: other(1)
Other method, for example, vendor specific clear(2)
Clear text and no authentication x509(3)
As a mandatory requirement, CAPWAP control channel authentication SHOULD use DTLS, either by certificate or PSK.
For data channel authentication, DTLS is optional."
"Represents the total number of WTPs that are connecting to the AC."
MAX ACCESS  read write STATUS
"Represents the maximum number of WTP sessions configured on the AC.
The value of the object is persistent at restart/reboot."
"Represents the total number of stations that are accessing the wireless service provided by the AC."
MAX ACCESS  read write STATUS
"Represents the maximum number of station sessions configured on the AC.
The value of the object is persistent at restart/reboot."
BITS { other(0), clear(1), dtls(2) } MAX ACCESS
"The AC communicates its policy on the use of DTLS for the CAPWAP data channel.
The AC MAY support more than one option, represented by the bit field below: other(0) Other method, for example, vendor specific clear(1)
DTLS" REFERENCE "Section 4.6.1 of CAPWAP Protocol Specification, RFC 5415."
"Represents the authentication credential type supported by the AC for CAPWAP control channel.
The AC MAY support more than one option, represented by the bit field below: x509(0)
X.509 certificate based psk(1)  Pre Shared secret" REFERENCE "Section 4.6.1 of CAPWAP Protocol Specification, RFC 5415."
"A table of objects that configure the AC name list.
Values of all read create objects in this table are persistent at restart/reboot."
REFERENCE "Section 4.6.5 of CAPWAP Protocol Specification, RFC 5415."
A set of objects that configures the AC name list.
capwapBaseAcNameListRowStatus   RowStatus } capwapBaseAcNameListId OBJECT
"Represents the unique identifier of an AC Name list."
{ capwapBaseAcNameListEntry 1 } capwapBaseAcNameListName OBJECT TYPE SYNTAX
"Represents the name of an AC, and it is expected to be an UTF 8 encoded string.
REFERENCE "Section 4.6.5 of CAPWAP Protocol Specification, RFC 5415."
"Represents the priority order of the preferred AC.
For instance, the value of one (1) is used to set the primary AC, the value of two (2) is used to set the secondary AC, etc.
REFERENCE "Section 4.6.5 of CAPWAP Protocol Specification, RFC 5415."
"This object is used to create, modify, and/or delete a row in this table.
The value of capwapBaseAcNameListName and capwapBaseAcNameListPriority can be changed when this object is in state 'active' or in 'notInService'.
The capwapBaseAcNameListRowStatus may be changed to 'active' if all the managed objects in the conceptual row with MAX ACCESS read create have been assigned valid values."
"A table of objects that configure station Access Control Lists (ACLs).
The WTP will not provide service to the MAC addresses configured in this table.
Values of all read create objects in this table are persistent at AC restart/reboot."
REFERENCE "Section 4.6.7 of CAPWAP Protocol Specification, RFC 5415."
A set of objects that configures station Access Control Lists (ACLs).
capwapBaseMacAclRowStatus    RowStatus } capwapBaseMacAclId OBJECT
"Represents the unique identifier of an ACL."
"Represents the MAC address of a station to which WTPs will no longer provides service."
REFERENCE "Section 4.6.7 of CAPWAP Protocol Specification, RFC 5415."
"This object is used to create, modify, and/or delete a row in this table.
The value of capwapBaseMacAclStationId can be changed when this object is in state 'active' or in 'notInService'.
The capwapBaseMacAclRowStatus may be changed to 'active' if all the managed objects in the conceptual row with MAX ACCESS read create have been assigned valid values."
End of AC Objects Group   WTP Objects Group capwapBaseWtps
"A table of objects that configure WTP profiles for WTPs to be managed before they connect to the AC.
An operator could change a WTP's configuration by changing the values of parameters in the corresponding WTP profile, then the WTP could get the new configuration through the CAPWAP control channel.
Values of all read create objects in this table are persistent at restart/reboot."
A set of objects that configures and displays a WTP profile.
"Represents the unique identifier of a WTP profile."
"Represents the name of a WTP profile."
"Represents the Base MAC address of a WTP.
A WTP profile MUST contain the Base MAC address of the WTP because the CAPWAP message received from the WTP contains its Base MAC address and the AC uses the Base MAC address to find the corresponding WTP profile.
Section 4.6.40 of [RFC5415] omits indicating that the WTP's Base MAC address must be included in the WTP Board Data message element.
This is a known errata item and should be fixed in any future revision of the RFC 5415.
"Represents the model number of a WTP.
A WTP profile MUST include the WTP's model number, which reflects the number of Physical Layer (PHY) radios on the WTP.
In this way, the creation of a WTP profile triggers the AC to automatically create the same number of WTP Virtual Radio Interfaces corresponding to the WTP's PHY radios without manual intervention.
With the ifIndexes of WTP Virtual Radio Interfaces, the operator could configure and manage the WTP's PHY radios through the wireless binding MIB modules.
"Represents the name of the WTP."
REFERENCE "Section 4.6.45 of CAPWAP Protocol Specification, RFC 5415."
"Represents the location of the WTP."
REFERENCE "Section 4.6.30 of CAPWAP Protocol Specification, RFC 5415."
"Represents whether the WTP SHOULD use a static IP address or not.
A value of false disables the static IP address, while a value of true enables it."
REFERENCE "Section 4.6.48 of CAPWAP Protocol Specification, RFC 5415."
{ capwapBaseWtpProfileEntry 7 } capwapBaseWtpProfileWtpStaticIpType OBJECT TYPE SYNTAX
"Represents the static IP address type used by the WTP.
Only ipv4(1) is supported by the object.
Although the CAPWAP protocol [RFC5415] supports both IPv4 and IPv6, note that the CAPWAP field modeled by this object does not support IPv6, so the object does not support ipv6(2).
" REFERENCE "Section 4.6.48 of CAPWAP Protocol Specification, RFC 5415."
When capwapBaseWtpProfileWtpStaticIpEnable is true, it represents the static IP address to be assigned to the WTP.
The format of this IP address is determined by the corresponding instance of object capwapBaseWtpProfileWtpStaticIpType."
REFERENCE "Section 4.6.48 of CAPWAP Protocol Specification, RFC 5415."
When capwapBaseWtpProfileWtpStaticIpEnable is true, it represents the netmask to be assigned to the WTP.
The format of this netmask is determined by the corresponding instance of object capwapBaseWtpProfileWtpStaticIpType."
REFERENCE "Section 4.6.48 of CAPWAP Protocol Specification, RFC 5415."
When capwapBaseWtpProfileWtpStaticIpEnable is true, it represents the gateway to be assigned to the WTP.
The format of this IP address is determined by the corresponding instance of object capwapBaseWtpProfileWtpStaticIpType."
REFERENCE "Section 4.6.48 of CAPWAP Protocol Specification, RFC 5415."
"Represents whether to enable or disable automatic CAPWAP fallback in the event that a WTP detects its preferred AC and is not currently connected to it.
The following enumerated values are supported:
The fallback mode is enabled disabled(2)
The fallback mode is disabled" REFERENCE "Section 4.6.42 of CAPWAP Protocol Specification, RFC 5415.
"Represents the minimum time, in seconds, between sending Echo Request messages to the AC that the WTP has joined."
REFERENCE "Section 4.7.7 of CAPWAP Protocol Specification, RFC 5415.
"Represents the idle timeout value that the WTP SHOULD enforce for its active stations."
REFERENCE "Section 4.7.8 of CAPWAP Protocol Specification, RFC 5415.
"Represents the maximum time allowed between sending Discovery Request messages, in seconds."
REFERENCE "Section 4.7.10 of CAPWAP Protocol Specification, RFC 5415.
"Represents the interval for WTP to send the Decryption Error report."
REFERENCE "Section 4.7.11 of CAPWAP Protocol Specification, RFC 5415.
"Represents the interval the WTP uses between the WTP Event Requests it transmits to the AC to communicate its statistics, in seconds."
REFERENCE "Section 4.7.14 of CAPWAP Protocol Specification, RFC 5415.
"Represents the support for the Explicit Congestion Notification (ECN) bits, as defined in [RFC3168].
The following enumerated values are supported:
Full and limited ECN support Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.25 of CAPWAP Protocol Specification, RFC 5415."
} capwapBaseWtpProfileRowStatus OBJECT TYPE SYNTAX
"This object is used to create, modify, and/or delete a row in this table.
The value of capwapBaseWtpProfileName, capwapBaseWtpProfileWtpName and capwapBaseWtpProfileWtpLocation can be changed when this object is in state 'active' or in 'notInService'.
The other objects in a row can be modified only when the value of this object in the corresponding conceptual row is not 'active'.
Thus, to modify one or more of the objects in this conceptual row: a. change the row status to 'notInService'
b. change the values of the row c. change the row status to 'active'
The capwapBaseWtpProfileRowStatus may be changed to 'active' if the managed objects capwapBaseWtpProfileName, capwapBaseWtpProfileWtpMacAddress, capwapBaseWtpProfileWtpModelNumber, capwapBaseWtpProfileWtpName, and capwapBaseWtpProfileWtpLocation in the conceptual row have been assigned valid values.
Deleting a WTP profile in use will disconnect the WTP from the AC.
So the network management system SHOULD ask the operator to confirm such an operation.
When a WTP profile entry is removed from the table, the corresponding WTP Virtual Radio Interfaces are also removed from the capwapBaseWirelessBindingTable and ifTable [RFC2863].
Also, the related object instances SHOULD be removed from the wireless binding MIB modules such as the IEEE 802.11 MIB module [IEEE.802 11.2007]."
SEQUENCE OF CapwapBaseWtpStateEntry MAX ACCESS
"A table of objects that indicate the AC's CAPWAP FSM state for each WTP, and helps the operator to query a WTP's current configuration."
A set of objects that displays the AC's CAPWAP FSM state for each WTP.
Also, the operator could query the current configuration of a WTP by using the identifier of the corresponding WTP profile.
"Represents the unique identifier of a WTP."
Only ipv4(1) and ipv6(2) are supported by the object."
"Represents the IP address of a WTP that corresponds to the IP address in the IP packet header.
The format of this IP address is determined by the corresponding instance of object capwapBaseWtpStateWtpIpAddressType."
REFERENCE "Section 4 of CAPWAP Protocol Specification, RFC 5415."
"Represents the local IP address type of a WTP.
Only ipv4(1) and ipv6(2) are supported by the object."
"Represents the local IP address of a WTP and models the CAPWAP Local IPv4 Address or CAPWAP Local IPv6 Address fields [RFC5415].
If a Network Address Translation (NAT) device is present between WTP and AC, the value of capwapBaseWtpStateWtpLocalIpAddress will be different from the value of capwapBaseWtpStateWtpIpAddress.
The format of this IP address is determined by the corresponding instance of object capwapBaseWtpStateWtpLocalIpAddressType.
" REFERENCE "Sections 4.6.11 and 4.6.12 of CAPWAP Protocol Specification, RFC 5415."
"Represents the WTP's Base MAC Address, which MAY be assigned to the primary Ethernet interface.
The instance of the object corresponds to the Base MAC Address sub element in the CAPWAP protocol [RFC5415].
, dataCheck(5), run(6), reset(7), dtlsTeardown(8), unknown(9) }
"Represents the various possibilities of the AC's CAPWAP FSM state for each WTP.
The following enumerated values are supported:
The WTP is joining with the AC image(3)
The WTP is downloading software configure(4)
The WTP is getting configuration from the AC dataCheck(5)
The AC is waiting for the Data Channel Keep Alive Packet run(6)
The WTP enters the running state reset(7)
The AC transmits a reset request message to the WTP dtlsTeardown(8)
DTLS session is torn down unknown(9)
Operator already prepared configuration for the WTP, while the WTP has not contacted the AC until now" REFERENCE "Section 2.3.1 of CAPWAP Protocol Specification, RFC 5415."
"Represents the time (in hundredths of a second) since the WTP has been in the running state (corresponding to the value run(6) of capwapBaseWtpState)."
"Represents the current identifier of a WTP profile.
The operator could query a WTP's current configuration with the identifier of a WTP profile."
"A table of objects that display properties of the WTPs in running state."
A set of objects that displays properties of the WTPs in running state.
"Represents the unique identifier of a WTP in running state."
"Represents the unique physical index of a physical entity in the ENTITY
Information about a specific WTP such as its software version could be accessed through this index."
"Represents the WTP's Base MAC Address, which MAY be assigned to the primary Ethernet interface.
The instance of the object corresponds to the Base MAC Address sub element in the CAPWAP protocol [RFC5415].
"Represents the tunneling modes of operation supported by the WTP."
REFERENCE "Section 4.6.43 of CAPWAP Protocol Specification, RFC 5415."
"Represents the MAC mode of operation supported by the WTP."
REFERENCE "Section 4.6.44 of CAPWAP Protocol Specification, RFC 5415."
"Represents how the WTP discovers the AC.
AC referral Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.21 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of radios in use on the WTP."
REFERENCE "Section 4.6.41 of CAPWAP Protocol Specification, RFC 5415."
"Represents the maximum radio number supported by the WTP."
REFERENCE "Section 4.6.41 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of retransmissions for a given CAPWAP packet."
REFERENCE "Section 4.8.8 of CAPWAP Protocol Specification, RFC 5415."
"A table of objects that display the mappings between WTP Virtual Radio Interfaces and PHY radios, and the wireless binding type for each PHY radio.
As capwapBaseWirelessBindingTable stores the mappings between PHY radios (Radio IDs) and the ifIndexes of WTP Virtual Radio Interfaces, the operator can get the ifIndex information by querying this table.
Such a query operation SHOULD run from radio ID 1 to radio ID 31 according to [RFC5415], and stop when an invalid ifIndex value (0) is returned.
Values of all objects in this table are persistent at restart/reboot."
A set of objects that displays the mapping between a specific WTP Virtual Radio Interface and a PHY radio, and the wireless binding type for the PHY radio.
"Represents the identifier of a PHY radio on a WTP, which is required to be unique on a WTP.
For example, WTP A and WTP B use a same value of capwapBaseWirelessBindingRadioId for their first radio."
REFERENCE "Section 4.3 of CAPWAP Protocol Specification, RFC 5415."
capwapBaseWirelessBindingEntry 1 } capwapBaseWirelessBindingVirtualRadioIfIndex OBJECT TYPE SYNTAX
"Represents the index value that uniquely identifies a WLAN Virtual Radio Interface.
The interface identified by a particular value of this index is the same interface as identified by the same value of the ifIndex.
Before WTPs contact the AC to get configuration, the operator configures WTP profiles for them.
The creation of a WTP profile triggers the system to automatically create a specific number of WTP Virtual Radio Interfaces and add a new row object in the capwapBaseWirelessBindingTable without manual intervention.
As most MIB modules use the ifIndex to identify an interface for configuration and statistical data (for example, the IEEE 802.11 MIB module [IEEE.802 11.2007]), it will be easy to reuse other wireless binding MIB modules through the WTP Virtual Radio Interface in the Centralized WLAN Architecture."
The following enumerated values are supported: dot11(1
EPCGlobal" REFERENCE "Section 4.3 of CAPWAP Protocol Specification, RFC 5415."
"A table of objects that display stations that are accessing the wireless service provided by the AC."
REFERENCE "Section 4.6.8 of CAPWAP Protocol Specification, RFC 5415."
A set of objects that displays a station that is associated with the specific radio on the WTP.
Note that in some cases such as roaming that a station may simultaneously associate with two WTPs for some (short) time.
The MIB implementation MUST ensure there is only one valid and meaningful entry for a specific station.
"Represents the unique identifier of the station."
REFERENCE "Section 4.6.8 of CAPWAP Protocol Specification, RFC 5415."
"Represents the unique identifier of a WTP in running state."
{ capwapBaseStationEntry 2 } capwapBaseStationWtpRadioId OBJECT TYPE SYNTAX
"Represents the identifier of a PHY radio on a WTP, which is required to be unique on a WTP.
For example, WTP A and WTP B use a same value of capwapBaseStationWtpRadioId for their first radio."
REFERENCE "Section 4.3 of CAPWAP Protocol Specification, RFC 5415."
"Represents the time when the station is added.
" REFERENCE "Section 4.6.8 of CAPWAP Protocol Specification, RFC 5415."
"Represents VLAN name to which the station is associated."
REFERENCE "Section 4.6.8 of CAPWAP Protocol Specification, RFC 5415."
SEQUENCE OF CapwapBaseWtpEventsStatsEntry MAX ACCESS
"A table of objects that display the WTPs' events statistics."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
CapwapBaseWtpEventsStatsEntry MAX ACCESS  not accessible STATUS
A set of objects that displays the events statistics of a WTP."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415.
"Represents the number of reboots that have occurred due to a WTP crash.
Note that the CAPWAP field [RFC5415] modeled by this counter takes the value 65535 to indicate that the information is not available on the WTP.
This MIB object does not follow this behavior, which would not be standard in SMIv2.
If the WTP does not have the information, the agent will not instantiate the object."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of reboots that have occurred at the request of a CAPWAP protocol message, such as a change in configuration that requires a reboot or an explicit CAPWAP protocol reset request.
Note that the CAPWAP field [RFC5415] modeled by this counter takes the value 65535 to indicate that the information is not available on the WTP.
This MIB object does not follow this behavior, which would not be standard in SMIv2.
If the WTP does not have the information, the agent will not instantiate the object."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that a CAPWAP protocol connection with an AC has failed due to link failures.
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that a CAPWAP protocol connection with an AC has failed due to software related reasons."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that a CAPWAP protocol connection with an AC has failed due to hardware related reasons."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
} capwapBaseWtpEventsStatsOtherFailureCount OBJECT TYPE SYNTAX
"Represents the number of times that a CAPWAP protocol connection with an AC has failed due to known reasons, other than the AC initiated, link, software or hardware failures.
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that a CAPWAP protocol connection with an AC has failed for unknown reasons."
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
INTEGER { unsupported(0), acInit(1), linkFailure(2), swFailure(3), hwFailure(4), otherFailure(5), unknown(255) }
"Represents the failure type of the most recent WTP failure.
The following enumerated values are supported: unsupported(0)
Unknown (e.g., WTP doesn't keep track of info
) Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.47 of CAPWAP Protocol Specification, RFC 5415."
End of capwapBaseWtpEventsStatsTable table    capwapBaseRadioEventsStatsTable table
SEQUENCE OF CapwapBaseRadioEventsStatsEntry MAX ACCESS
"A table of objects that display statistics on the radios' behaviors and reasons why the WTP radio has been reset.
To get the events statistics of all radios on a specific WTP (identified by the capwapBaseWtpCurrId), a query operation SHOULD run from radio ID 1 to radio ID 31 until there is no data returned.
The radio ID here corresponds to the object capwapBaseRadioEventsWtpRadioId.
If the previous MIB operations such as query on the capwapBaseWirelessBindingTable know the exact value of each radio ID, the query operation on the capwapBaseRadioEventsStatsTable could use that value of Radio IDs."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
A set of objects that displays the statistical data of events that happened on a specific radio of a WTP.
"Represents the identifier of a PHY radio on a WTP, which is required to be unique on a WTP.
For example, WTP A and WTP B use the same value of capwapBaseRadioEventsWtpRadioId for their first radio."
REFERENCE "Section 4.3 of CAPWAP Protocol Specification, RFC 5415."
{ capwapBaseRadioEventsStatsEntry 1 } capwapBaseRadioEventsStatsResetCount OBJECT TYPE SYNTAX
"Represents the number of times that the radio has been reset."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that the radio has failed due to software related reasons."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
{ capwapBaseRadioEventsStatsEntry 3 } capwapBaseRadioEventsStatsHwFailureCount OBJECT TYPE SYNTAX
"Represents the number of times that the radio has failed due to hardware related reasons."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that the radio has failed due to known reasons, other than software or hardware failure.
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
{ capwapBaseRadioEventsStatsEntry 5 } capwapBaseRadioEventsStatsUnknownFailureCount OBJECT TYPE SYNTAX
"Represents the number of times that the radio has failed for unknown reasons."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that the radio configuration has been updated."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of times that the radio channel has been changed."
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
{ capwapBaseRadioEventsStatsEntry 8 } capwapBaseRadioEventsStatsBandChangeCount OBJECT TYPE SYNTAX
"Represents the number of times that the radio has changed frequency bands.
" REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the noise floor of the radio receiver in units of dBm.
" REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of decryption errors that have occurred on the WTP.
Note that this field is only valid in cases where the WTP provides encryption/decryption services.
" REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
"Represents the failure type of the most recent radio failure.
The following enumerated values are supported: unsupported(0)
Unknown Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value
; this MIB object follows that rule.
REFERENCE "Section 4.6.46 of CAPWAP Protocol Specification, RFC 5415."
End of WTP Objects Group   CAPWAP Base Parameters Group capwapBaseParameters
"Represents the maximum number of retransmissions for a given CAPWAP packet before the link layer considers the peer dead.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.8.7 of CAPWAP Protocol Specification, RFC 5415.
"second" MAX ACCESS  read write
"Represents the maximum time, in seconds, the AC will wait for the Change State Event Request from the WTP after having transmitted a successful Configuration Status Response message.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.1 of CAPWAP Protocol Specification, RFC 5415.
"second" MAX ACCESS  read write
"Represents The number of seconds the AC will wait for the Data Channel Keep Alive, which is required by the CAPWAP state machine's Data Check state.
The AC resets the state machine if this timer expires prior to transitioning to the next state.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.4 of CAPWAP Protocol Specification, RFC 5415.
"second" MAX ACCESS  read write
"Represents the minimum time, in seconds, the AC MUST wait for DTLS session deletion.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.6 of CAPWAP Protocol Specification, RFC 5415.
"second" MAX ACCESS  read write
"Represents the minimum time, in seconds, between sending Echo Request messages to the AC with which the WTP has joined.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.7 of CAPWAP Protocol Specification, RFC 5415.
"second" MAX ACCESS  read write
"Represents the minimum time, in seconds, in which a non acknowledged CAPWAP packet will be retransmitted.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.12 of CAPWAP Protocol Specification, RFC 5415.
"second" MAX ACCESS  read write
"Represents the minimum time, in seconds, during which the AC SHOULD ignore all CAPWAP and DTLS packets received from the WTP that is in the Sulking state.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.13 of CAPWAP Protocol Specification, RFC 5415.
"Represents the maximum time, in seconds, the AC MUST wait without having received a DTLS Handshake message from an AC.
This timer MUST be greater than 30 seconds.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.15 of CAPWAP Protocol Specification, RFC 5415.
"Represents the maximum time, in seconds, the AC will wait after the DTLS session has been established until it receives the Join Request from the WTP.
This timer MUST be greater than 20 seconds.
The value of the object is persistent at restart/reboot."
REFERENCE "Section 4.7.16 of CAPWAP Protocol Specification, RFC 5415.
"Represents the support for the Explicit Congestion Notification (ECN) bits, as defined in [RFC3168].
The value of the object is persistent at restart/reboot.
The following enumerated values are supported:
Full and limited ECN support Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.25 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of failed DTLS session establishment attempts due to authentication failures.
REFERENCE "Section 4.8.3 of CAPWAP Protocol Specification, RFC 5415."
"Represents the number of failed DTLS session establishment attempts."
REFERENCE "Section 4.8.4 of CAPWAP Protocol Specification, RFC 5415."
"This notification is sent by the AC when a CAPWAP channel is established.
The notification is separated for data or control channel."
"This notification is sent by the AC when a CAPWAP channel is down.
The notification is separated for data or control channel."
"This notification is generated when a WTP has had a decryption error since the last report."
REFERENCE "Section 4.6.17 of CAPWAP Protocol Specification, RFC 5415."
"This notification is generated when a WTP fails to join."
REFERENCE "Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415."
"This notification is generated when a WTP fails to update the firmware image."
REFERENCE "Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415."
"This notification is generated when a WTP receives message elements in the configuration management messages that it is unable to apply locally."
REFERENCE "Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415."
REFERENCE "Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415."
"This is notification of an authentication failure event and provides the reason for it."
} capwapBaseNtfWtpId OBJECT TYPE SYNTAX
"Represents the unique identifier of a WTP."
"Represents the identifier of a PHY radio on a WTP, which is only required to be unique on a WTP.
For example, WTP A and WTP B can use the same value of capwapBaseNtfRadioId for their first radio."
REFERENCE "Section 4.3 of CAPWAP Protocol Specification, RFC 5415."
"Represents the channel type for the CAPWAP protocol."
{ capwapBaseNotifyVarObjects 3 } capwapBaseNtfAuthenMethod OBJECT TYPE SYNTAX
"Represents the authentication method for the CAPWAP Channel."
{ capwapBaseNotifyVarObjects 4 } capwapBaseNtfChannelDownReason OBJECT
"Represents the reason the channel is down.
The following enumerated values are supported: timeout(1)
The keepalive timed out rekeyFailure(2)
Rekey process failed; channel will be broken acRebootWtp(3)
"Represents a list of station MAC addresses separated by semicolons.
REFERENCE "Section 4.6.17 of CAPWAP Protocol Specification, RFC 5415."
"Represents the reason for WTP authorization failure.
The following enumerated values are supported: keyMismatch(1)
"Represents the operation status of a radio.
The following enumerated values are supported: operable(0)
The radio is operable inoperable(1)
The radio is inoperable, and the capwapBaseNtfRadioStatusCause object gives the reason in detail Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415."
"Represents the reason why the radio is out of service.
The following enumerated values are supported: normal(0)
Administratively set Note that the CAPWAP field [RFC5415] modeled by this object takes zero as starting value; this MIB object follows that rule.
REFERENCE "Section 4.6.34 of CAPWAP Protocol Specification, RFC 5415."
"Represents the reason of join failure.
The following enumerated values are supported: unspecified(1)
Session ID already in use unsupportedHw(6)
WTP hardware not supported unsupportedBinding(7)
Binding not supported" REFERENCE "Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415."
"Represents the reason of image failure.
The following enumerated values are supported: invalidChecksum(1)
Image already present" REFERENCE "Section 4.6.35 of CAPWAP Protocol Specification, RFC 5415."
{ capwapBaseNotifyVarObjects 11 } capwapBaseNtfConfigMsgErrorType  OBJECT
"Represents the type of configuration message error.
The following enumerated values are supported:
Unknown message element value unsupportedValue(4)
"Represents the message elements sent by the AC in the Configuration Status Response message that caused the error."
REFERENCE "Section 4.6.36 of CAPWAP Protocol Specification, RFC 5415."
"Represents whether the Channel Up
/ Channel Down notification should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
"Represents whether the decryption error notification should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
"Represents whether the notification of a WTP join failure should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
"Represents whether the notification of a WTP image upgrade failure should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
capwapBaseNotifyControlObjects 4 } capwapBaseConfigMsgErrorNotifyEnable OBJECT
"Represents whether the notification of configuration message error should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
"Represents whether the notification of a radio's operational state change should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
"Represents whether the notification of authentication failure should be generated.
A value of true(1) means that the notification is enabled.
A value of false(2) means that the notification is disabled.
The value of the object is persistent at restart/reboot."
MODULE COMPLIANCE STATUS current DESCRIPTION
"Describes the requirements for conformance to the CAPWAP BASE MIB module.
MODULE IF MIB   The Interfaces MIB, RFC 2863 MANDATORY GROUPS { ifGeneralInformationGroup } MODULE
this module MANDATORY GROUPS { capwapBaseAcNodeGroup, capwapBaseWtpProfileGroup, capwapBaseWtpStateGroup, capwapBaseWtpGroup, capwapBaseRadioGroup, capwapBaseStationGroup } GROUP capwapBaseAcNodeGroup2
The capwapBaseAcNodeGroup2 group is optional."
The capwapBaseAcNameListGroup group is optional."
The capwapBaseMacAclsGroup group is optional."
The capwapBaseWtpProfileGroup2 group is optional."
"The capwapBaseWtpGroup2 group is optional."
"The capwapBaseWtpEventsStatsGroup group is optional."
The capwapBaseRadioEventsStatsGroup group is optional."
"The capwapBaseParametersGroup group is optional."
The capwapBaseStatsGroup group is optional."
GROUP capwapBaseNotificationsGroup DESCRIPTION "The capwapBaseNotificationsGroup group is optional.
The capwapBaseNotifyVarsGroup group is optional.
If capwapBaseNotificationsGroup is supported, this group must be implemented."
The capwapBaseNotifyControlGroup group is optional.
If capwapBaseNotificationsGroup is supported, this group must be implemented."
OBJECT GROUP OBJECTS { capwapBaseWtpSessions, capwapBaseWtpSessionsLimit, capwapBaseStationSessions, capwapBaseStationSessionsLimit } STATUS  current DESCRIPTION
"A collection of objects that is used to configure the stations ACL."
A collection of objects that is used to configure the WTP profile."
OBJECT GROUP OBJECTS { capwapBaseWtpProfileWtpStaticIpEnable, capwapBaseWtpProfileWtpStaticIpType, capwapBaseWtpProfileWtpStaticIpAddress, capwapBaseWtpProfileWtpNetmask, capwapBaseWtpProfileWtpGateway, capwapBaseWtpProfileWtpFallbackEnable, capwapBaseWtpProfileWtpEchoInterval, capwapBaseWtpProfileWtpIdleTimeout,
capwapBaseWtpProfileWtpMaxDiscoveryInterval, capwapBaseWtpProfileWtpReportInterval, capwapBaseWtpProfileWtpStatisticsTimer, capwapBaseWtpProfileWtpEcnSupport } STATUS  current DESCRIPTION
capwapBaseWtpMacTypeOptions, capwapBaseWtpDiscoveryType, capwapBaseWtpRadiosInUseNum, capwapBaseWtpRadioNumLimit } STATUS  current DESCRIPTION
OBJECT GROUP OBJECTS { capwapBaseWirelessBindingVirtualRadioIfIndex, capwapBaseWirelessBindingType } STATUS  current DESCRIPTION
"A collection of objects that is used for collecting WTP reboot count, link failure count, hardware failure count, and so on."
current DESCRIPTION "Objects used for the CAPWAP protocol's parameters."
current DESCRIPTION "Objects used for collecting the CAPWAP protocol's statistics."
A collection of notifications in this MIB module."
current DESCRIPTION "Objects used for notifications."
} capwapBaseNotifyControlGroup OBJECT GROUP OBJECTS { capwapBaseChannelUpDownNotifyEnable, capwapBaseDecryptErrorNotifyEnable, capwapBaseJoinFailureNotifyEnable, capwapBaseImageUpgradeFailureNotifyEnable, capwapBaseConfigMsgErrorNotifyEnable, capwapBaseRadioOperableStatusNotifyEnable, capwapBaseAuthenFailureNotifyEnable } STATUS
current DESCRIPTION "Objects used to enable or disable notifications."
There are a number of management objects defined in this MIB module with a MAX ACCESS clause of read write and/or read create.
Such objects MAY be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
The followings are the tables and objects and their sensitivity/vulnerability:  Unauthorized changes to the capwapBaseWtProfileTable and writable objects under capwapBaseAcs group
MAY disrupt allocation of resources in the network.
For example, a WTP's static IP address could be changed by setting the capwapBaseWtpProfileWtpStaticIpAddress object.
Unauthorized changes to writable objects under the capwapBaseAc group MAY disrupt allocation of resources in the network.
For example, an invalid value for the capwapBaseWtpSessionsLimit object will increase the AC's traffic burden.
Unauthorized changes to the capwapBaseMacAclTable
MAY prevent legal stations from being able to access the network, while illegal stations are able to access it.
Unauthorized changes to writable objects under the capwapBaseParameters group MAY influence CAPWAP protocol behavior and status.
For example, an invalid value set for the capwapBaseAcDataCheckTimer MAY influence the CAPWAP state machine.
Some of the readable objects in this MIB module (i.e., objects with a MAX ACCESS other than not accessible)
MAY be considered sensitive or vulnerable in some network environments.
It is thus important to control
even GET and/or NOTIFY access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
The followings are the tables and objects and their sensitivity/vulnerability:
The capwapBaseDataChannelDTLSPolicyOptions and capwapBaseControlChannelAuthenOptions under the capwapBaseAc group expose the current security option for CAPWAP data and control channels.
The capwapBaseWtpTable exposes a WTP's important information like tunnel mode, MAC type, and so on.
The capwapBaseWtpEventsStatsTable exposes a WTP's failure information.
The capwapBaseRadioEventsStatsTable exposes a radio's failure information.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPsec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, the deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
IANA Considerations for CAPWAP BASE MIB Module
The MIB module in this document uses the following IANA assigned OBJECT IDENTIFIER value recorded in the SMI Numbers registry:
capwapBaseMIB  { mib 2 196 } 11.2.
IANA Considerations for ifType IANA has assigned the following ifType:
This MIB module is based on contributions from Long Gao.
