- title: __initial_text__
  contents:
  - '                   A URN Namespace for IETF Documents

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   A system for Uniform Resource Names (URNs) must be capable of\n\
    \   supporting new naming systems.  As an example of proposing a new\n   namespace,\
    \ this document proposes the \"ietf\" namespace.  This\n   namespace consists\
    \ of the RFC family of documents (RFCs, STDs, FYIs,\n   and BCPs) developed by\
    \ the IETF and published by the RFC Editor, the\n   minutes of working groups\
    \ (WG) and birds of a feather (BOF) meetings\n   that occur during IETF conferences,\
    \ and the Internet Drafts published\n   by the Internet Drafts Editor.  Both the\
    \ current URN framework and\n   URN syntax support this namespace.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document proposes the \"ietf\" namespace, which consists\
    \ of the\n   RFC family of documents (RFCs, STDs, FYIs, and BCPs) developed by\
    \ the\n   IETF and published by the RFC editor and the minutes of working\n  \
    \ groups (WG) and birds of a feather (BOF) meetings that occur during\n   IETF\
    \ conferences.\n   The namespace specification is for a formal namespace.\n"
- title: 2. Specification Template
  contents:
  - "2. Specification Template\n      Namespace ID:\n            \"ietf\" requested.\n\
    \      Registration Information:\n            Registration version number: 1\n\
    \            Registration date: 1999-04-22\n      Declared registrant of the namespace:\n\
    \            Ryan Moats\n            jayhawk@att.com\n            AT&T\n     \
    \       15621 Drexel Circle\n            Omaha, NE 68135-2358\n      Declaration\
    \ of structure:\n            The identifier has the following ABNF [2] specification:\n\
    \            NSS = rfc-nss / fyi-nss / std-nss / bcp-nss /\n                 \
    \ draft-nss / mtg-nss / other-nss\n            rfc-nss = \"rfc:\" 1*DIGIT\n  \
    \          fyi-nss = \"fyi:\" 1*DIGIT\n            std-nss = \"std:\" 1*DIGIT\n\
    \            bcp-nss = \"bcp:\" 1*DIGIT\n            draft-nss = \"id:\" string\n\
    \            mtg-nss = \"mtg:\" string\n            other-nss = string\n     \
    \         ; beginning with a prefix other than one of those\n              ; above\
    \ for future expansion\n            string = 1*(DIGIT / ALPHA / \"-\")\n     \
    \       If the IESG (or it successor) adds a new document series,\n          \
    \  this ABNF specification will need to be updated.  Further,\n            if\
    \ a working group or BOF is created that used characters\n            outside\
    \ the range of this ABNF specification, this\n            specification will need\
    \ to be updated.  Any system intended\n            to resolve names for this namespace\
    \ should be written with\n            the awareness that this could occur at any\
    \ time.\n      Relevant ancillary documentation:\n            Relevant documentation\
    \ is in RFC 2648.\n      Identifier uniqueness considerations:\n            Because\
    \ the rfc-editor assigns the RFC number uniquely these\n            URNs are unique.\
    \  Since the mapping between RFCs and other\n            rfc-editor document series\
    \ (STDs, FYIs or BCPs) is not\n            necessarily one-to-one, uniqueness\
    \ of STDs, FYIs and BCPs\n            are defined based on the document mappings\
    \ maintained by the\n            RFC Editor (the index files \"rfc-index.txt\"\
    , \"fyi-\n            index.txt\", \"bcp-index.txt\", \"std-index.txt\") are defined\
    \ to\n            be the definitive statement of the assignment of RFC Family\n\
    \            URNs in this namespace.  The meeting minutes portion of the\n   \
    \         namespace is guaranteed unique because the URN includes the\n      \
    \      sequence number of the IETF conference.  The document\n            mapping\
    \ maintained by the Internet Drafts editor (\"1id-\n            abstracts.txt\"\
    ) is defined as the definitive statement of\n            the assignment of URNs\
    \ for the internet draft portion of\n            this namespace.\n      Identifier\
    \ persistence considerations:\n            Persistence of the URNs of this namespace\
    \ is independent of\n            the mutability of the underlying documents. \
    \ A URN once\n            assigned will never be reassigned to a different resource;\n\
    \            the assignment is persistent and immutable.  Immutability of\n  \
    \          RFCs, STDs, FYIs and BCPs is at the discretion of the RFC\n       \
    \     Editor.  They may be composites of one or more RFCs and the\n          \
    \  set of RFCs that includes them may change with time.  It is\n            important\
    \ to note that this mutability of some resources is\n            independent of\
    \ the immutability of URN assignment to a\n            resource.\n      Process\
    \ of identifier assignment:\n            Assignment of URNs from this namespace\
    \ occurs in three ways.\n            The first is through publication of a new\
    \ RFC, FYI, STD or\n            BCP is by the RFC Editor. This new document will\
    \ have a new\n            series number and will therefore define a new URN. \
    \ The\n            document mappings maintained by the RFC Editor (the index\n\
    \            files \"rfc-index.txt\", \"fyi-index.txt\", \"bcp-index.txt\" and\n\
    \            \"std-index.txt\") are defined to be the definitive statement\n \
    \           of the assignment of RFC Family URNs in this namespace.\n        \
    \    The second way a URN is assigned is through the filing of\n            meeting\
    \ minutes by a working group or birds of a feather as\n            part of an\
    \ IETF conference.  The list of minutes maintained\n            by the IETF for\
    \ each working group and conference in the\n            subtree pointed at by\
    \ the URL ftp://ietf.org/ietf/ is\n            considered the definitive assignment\
    \ of URNs for working\n            group or birds of a feather minutes.\n    \
    \        The third way a URN is assigned is through the publication\n        \
    \    of a new internet-draft by the Internet Draft Editor.  This\n           \
    \ draft will have a distinct name (and version number) and\n            therefore\
    \ defined a new URN.  The document mapping\n            maintained by the Internet\
    \ Drafts editor (\"1id-\n            abstracts.txt\") is defined as the definitive\
    \ statement of\n            the assignment of URNs for this portion of the namespace.\n\
    \      Process of identifier resolution:\n            A mirrored copy of the underlying\
    \ documentation is required\n            to resolve these URNs.  Resolution via\
    \ HTTP is done by a set\n            of simple Perl cgi-bin scripts presented\
    \ in Appendix A.\n      Rules for Lexical Equivalence:\n            The entire\
    \ URN is case-insensitive.\n      Conformance with URN Syntax:\n            There\
    \ are no additional characters reserved.\n      Validation mechanism:\n      \
    \      None additional to resolution specified\n      Scope:\n            Global.\n"
- title: 3. Examples
  contents:
  - "3. Examples\n   The following are examples of URNs that a resolver for this namespace\n\
    \   can resolve:\n         urn:ietf:rfc:2141\n         urn:ietf:std:50\n     \
    \    urn:ietf:id:ietf-urn-ietf-06\n         urn:ietf:mtg:41-urn\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Because this namespace defines no additional reserved\
    \ characters, it\n   does not add any security considerations beyond those inherent\
    \ from\n   the existence of the reserved characters from [1].  Further, none of\n\
    \   the reserved characters from [1] are used in the definition of the\n   NSS.\
    \ This means that resolvers for this namespace may be considered\n   \"secure\"\
    \ in the sense that any escaping of characters in the NSS MUST\n   result in the\
    \ resolver indicating that the URN has incorrect syntax.\n"
- title: 5. Acknowledgments
  contents:
  - "5. Acknowledgments\n   Thanks to various members of the URN working group for\
    \ comments on\n   earlier drafts of this document.  The work described in this\
    \ document\n   is partially supported by the National Science Foundation,\n  \
    \ Cooperative Agreement NCR-9218179.\n"
- title: 6. References
  contents:
  - "6. References\n   Request For Comments (RFC) and Internet Draft documents are\
    \ available\n   from numerous mirror sites.\n   [1]  Moats, R., \"URN Syntax\"\
    , RFC 2141, May 1997.\n   [2]  Crocker, D. and P. Overell, \"Augmented BNF for\
    \ Syntax\n        Specifications: ABNF\", RFC 2234, November 1997.\n"
- title: 7. Author's Address
  contents:
  - "7. Author's Address\n   Ryan Moats\n   AT&T\n   15621 Drexel Circle\n   Omaha,\
    \ NE 68135-2358\n   USA\n   EMail:  jayhawk@att.com\n"
- title: Appendix A.  Example Resolution Scripts
  contents:
  - "Appendix A.  Example Resolution Scripts\n   The following scripts are examples\
    \ that can be used for resolving\n   URNs in this namespace.\n"
- title: A.1 I2C
  contents:
  - 'A.1 I2C

    '
- title: '#!/usr/local/bin/perl'
  contents:
  - '#!/usr/local/bin/perl

    '
- title: use strict;
  contents:
  - 'use strict;

    '
- title: '#'
  contents:
  - '#

    '
- title: '# this is a URN 2 URC resolver for the ietf namespace'
  contents:
  - '# this is a URN 2 URC resolver for the ietf namespace

    '
- title: '#'
  contents:
  - '#

    '
- title: my(%cite) = (
  contents:
  - "my(%cite) = (\n  bcp => \"/ftp/rfc/bcp-index.txt\",\n  fyi => \"/ftp/fyi/fyi-index.txt\"\
    ,\n  id => \"/ftp/internet-drafts/1id-abstracts.txt\",\n  rfc => \"/ftp/rfc/rfc-index.txt\"\
    ,\n  std => \"/ftp/std/std-index.txt\"\n"
- title: );
  contents:
  - ');

    '
- title: my(%number2date) = (
  contents:
  - "my(%number2date) = (\n  44 => \"99mar\",\n  43 => \"98dec\", 42 => \"98aug\"\
    , 41 => \"98apr\",\n  40 => \"97dec\", 39 => \"97aug\", 38 => \"97apr\",\n  37\
    \ => \"96dec\", 36 => \"96jun\", 35 => \"96mar\",\n  34 => \"95dec\", 33 => \"\
    95jul\", 32 => \"95apr\",\n  31 => \"94dec\", 30 => \"94jul\", 29 => \"94mar\"\
    ,\n  28 => \"93nov\", 27 => \"93jul\", 26 => \"93mar\",\n  25 => \"92nov\", 24\
    \ => \"92jul\", 23 => \"92mar\",\n  22 => \"91nov\", 21 => \"91jul\", 20 => \"\
    91mar\",\n  19 => \"90dec\" );\n"
- title: my($wgpath) = "/ftp/ietf";
  contents:
  - 'my($wgpath) = "/ftp/ietf";

    '
- title: my($urn) = $ENV{'QUERY_STRING'};
  contents:
  - 'my($urn) = $ENV{''QUERY_STRING''};

    '
- title: 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs'
  contents:
  - 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs

    '
- title: 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header'
  contents:
  - 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header

    '
- title: (&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);
  contents:
  - '(&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);

    '
- title: (&resolverfc($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);
  contents:
  - '(&resolverfc($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);

    '
- title: (&resolvemtg($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);
  contents:
  - '(&resolvemtg($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);

    '
- title: '&urn_error("400 Bad Request\n");'
  contents:
  - '&urn_error("400 Bad Request\n");

    '
- title: sub resolvemtg {
  contents:
  - "sub resolvemtg {\n  my($ietfnum, $sesnam) = @_;\n  &urn_error(\"404 Not Found\\\
    n\") if (!defined $number2date{$ietfnum});\n  my($date)=$number2date{$ietfnum};\n\
    \  my($link)=\"$wgpath/$sesnam/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n\
    \    print \"Status:  200 OK\\r\\n\";\n    print \"Content-type: text/html\\r\\\
    n\\r\\n\";\n    print \"<HTML>\\n<TITLE>Citation for $urn</TITLE>\\n\";\n    print\
    \ \"<BODY>\\n\";\n    print \"<H1><A HREF=\\\"$link\\\">$urn</A>:</H1>\\n\";\n\
    \    print \"Minutes of the $sesnam working group from the \"\n          . &end($ietfnum)\
    \ . \" IETF\";\n    print \"</BODY>\\n</HTML>\\n\";\n    return;\n  }\n  my($link)=\"\
    $wgpath/$date/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n    print \"Status:\
    \  200 OK\\r\\n\";\n    print \"Content-type: text/html\\r\\n\\r\\n\";\n    print\
    \ \"<HTML>\\n<TITLE>Citation for $urn</TITLE>\\n\";\n    print \"<BODY>\\n\";\n\
    \    print \"<H1><A HREF=\\\"$link\\\">$urn</A>:</H1>\\n\";\n    print \"Minutes\
    \ of the $sesnam working group from the \"\n           . &end($ietfnum) . \" IETF\"\
    ;\n    print \"</BODY>\\n</HTML>\\n\";\n    return;\n  }\n  &urn_error(\"404 Not\
    \ Found\\n\");\n"
- title: '}'
  contents:
  - '}

    '
- title: sub end {
  contents:
  - "sub end {\n  my($inarg)=@_;\n  return $inarg . \"st\" if ($inarg =~ /1$/);\n\
    \  return $inarg . \"nd\" if ($inarg =~ /2$/);\n  return $inarg . \"rd\" if ($inarg\
    \ =~ /3$/);\n  return $inarg . \"th\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolverfc {
  contents:
  - "sub resolverfc {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme,\
    \ $value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  if (!defined $cite{$scheme}) {\n\
    \    &urn_error(\"404 Not Found\\n\");\n  }\n  $flag = 0;\n  open(INPUT, \"$cite{$scheme}\"\
    );\n  while (<INPUT>) {\n    $flag = 1 if (/^0*$value /);\n    if ($flag == 1)\
    \ {\n      last if (/^$/);\n      chop;\n      push @bib,$_;\n    }\n  }\n  if\
    \ ($scheme ne \"rfc\") {\n    print \"Status:  200 OK\\r\\n\";\n    print \"Content-type:\
    \ text/html\\r\\n\\r\\n\";\n    $bib[0] =~ s/^[0-9]*\\s*/<B>/;\n    for ($i=0;\
    \ $i<=$#bib; $i+=1) {\n      last if ($bib[$i] =~ s/\\./.<\\/B>/);\n    }\n  \
    \  for ($i=0;$i<=$#bib;$i+=1) {\n      $k=$bib[$i];\n      while ($k =~ /(fyi|std|rfc|bcp)([0-9]+)(.*)/i)\
    \ {\n        push @ref,\"$1$2\";\n        $k=$3;\n      }\n      $done=\"\";\n\
    \      foreach $j (@ref) {\n        next if ($done =~ $j);\n        $done .= \"\
    $j \";\n        $l = $j;\n        $l =~ tr/A-Z/a-z/;\n        $link=&make_link(\"\
    $l\");\n        $bib[$i] =~ s/$j/<A HREF=\"$link\">$j<\\/A>/g;\n      }\n    }\n\
    \    print \"<HTML>\\n<TITLE>Citation for $urn</TITLE>\\n\";\n    print \"<BODY>\\\
    n\";\n    $link=&make_link(\"$scheme$value\");\n    print \"<H1><A HREF=\\\"$link\\\
    \">$scheme$value</A>:</H1>\\n\";\n    foreach $i (@bib) {\n      print \"$i\\\
    n\";\n    }\n    print \"</BODY>\\n</HTML>\\n\";\n  } else {\n    print \"Status:\
    \  200 OK\\r\\n\";\n    print \"Content-type: text/html\\r\\n\\r\\n\";\n    $bib[0]\
    \ =~ s/^[0-9]*\\s*//;\n    $j=0;\n    for ($i=0; $i<=$#bib; $i+=1) {\n      $j\
    \ += ($bib[$i] =~ s/, \"/, <B>\"/);\n      $j += ($bib[$i] =~ s/\",/\"<\\/B>,/);\n\
    \    }\n    for ($i=0;$i<=$#bib;$i+=1) {\n      $k=$bib[$i];\n      while ($k\
    \ =~ /(fyi\\s|std\\s|rfc|bcp)([0-9]+)(.*)/i) {\n        push @ref,\"$1$2\";\n\
    \        $k=$3;\n      }\n      $done=\"\";\n      foreach $j (@ref) {\n     \
    \   next if ($done =~ $j);\n        $done .= \"$j \";\n        $l = $j;\n    \
    \    $l =~ s/\\s//g;\n        $l =~ tr/A-Z/a-z/;\n        $link=&make_link(\"\
    $l\");\n        $bib[$i] =~ s/$j/<A HREF=\"$link\">$j<\\/A>/g;\n      }\n    }\n\
    \    print \"<HTML>\\n<TITLE>Citation for $urn</TITLE>\\n\";\n    print \"<BODY>\\\
    n\";\n    $link=&make_link(\"$scheme$value\");\n    print \"<H1><A HREF=\\\"$link\\\
    \">$scheme$value</A>:</H1>\\n\";\n    foreach $i (@bib) {\n      print \"$i\\\
    n\";\n    }\n    print \"</BODY>\\n</HTML>\\n\";\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: sub make_link {
  contents:
  - "sub make_link {\n  my($sc);\n  my($inarg)=@_;\n  ($sc=$1) if ($inarg =~ /([a-z]*)/);\n\
    \  return \"/$sc/$inarg.ps\" if (-e \"/ftp/$sc/$inarg.ps\");\n  return \"/$sc/$inarg.html\"\
    \ if (-e \"/ftp/$sc/$inarg.html\");\n  return \"/$sc/$inarg.txt\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub urn_error {
  contents:
  - "sub urn_error {\n  my($code) = @_; #store failure code here...\n  print \"Status:\
    \  $code\";\n  print \"Content-type: text/html\\n\\n<HTML>\\n\";\n  print \"<head><title>URN\
    \ Resolution: I2C $code</title></head>\\n\";\n  print \"<BODY>\\n\";\n  print\
    \ \"<h1>URN to URC resolution failed for the URN:</h1>\\n\";\n  print \"<hr><h3>$urn</h3>\\\
    n\";\n  print \"</body>\\n\";\n  print \"</html>\\n\";\n  exit;\n"
- title: '};'
  contents:
  - '};

    '
- title: sub resolveid {
  contents:
  - "sub resolveid {\n  my($flag,@bib,$i,$k,$j,$count,@ref);\n  my($l,$link, $hdr,\
    \ $done);\n  my($value) = @_;\n  my($scheme) = \"id\";\n  open(INPUT, \"$cite{$scheme}\"\
    );\n  while (<INPUT>) {\n"
- title: '#'
  contents:
  - '#

    '
- title: '# capture record'
  contents:
  - '# capture record

    '
- title: '#'
  contents:
  - "#\n    if ($flag == 1 || /^\\s+\\\"/) {\n      push @bib,$_;\n      ($hdr = -1,\
    \ $count = 0, $flag = 1) if (/^\\s+\\\"/);\n      $count++ if (/^\\s+$/);\n  \
    \  }\n    if ($count == 1) {\n      $hdr = $#bib if ($hdr == -1);\n    }\n   \
    \ if ($count == 2) {\n      for ($i=0; $i<=$hdr; $i+=1) {\n            if ($bib[$i]\
    \ =~ /<(.*)>/) {\n              $l = $1;\n              if ($l eq \"draft-$value.txt\"\
    \ || $l eq \"draft-$value.ps\") {\n                print \"Status:  200 OK\\r\\\
    n\";\n                print \"Content-type: text/html\\r\\n\\r\\n\";\n       \
    \         print \"<HTML>\\n<TITLE>Citation for $urn</TITLE>\\n\";\n          \
    \      print \"<BODY>\\n\";\n                print \"<a\n"
- title: href=\"http://blackhole.vip.att.net/internet-drafts/$l\">$l</a>:\n";
  contents:
  - "href=\\\"http://blackhole.vip.att.net/internet-drafts/$l\\\">$l</a>:\\n\";\n\
    \                print \"<pre>\\n\";\n                foreach $i (@bib) {\n  \
    \                print \"$i\";\n                }\n                print \"</pre>\\\
    n\";\n                print \"</BODY>\\n</HTML>\\n\";\n                exit;\n\
    \              }\n            }\n      }\n      $flag = 0;\n      @bib = ();\n\
    \    }\n  }\n  &urn_error(\"404 Not Found\\n\");\n"
- title: '}'
  contents:
  - '}

    '
- title: A.2 I2L
  contents:
  - 'A.2 I2L

    '
- title: '#!/usr/local/bin/perl'
  contents:
  - '#!/usr/local/bin/perl

    '
- title: use strict;
  contents:
  - 'use strict;

    '
- title: '#'
  contents:
  - '#

    '
- title: '# this is a URN 2 URL resolver for the ietf namespace'
  contents:
  - '# this is a URN 2 URL resolver for the ietf namespace

    '
- title: '#'
  contents:
  - '#

    '
- title: my(%pathbase) = (
  contents:
  - "my(%pathbase) = (\n  rfc => \"rfc/rfc\",\n  fyi => \"fyi/fyi\",\n  std => \"\
    std/std\",\n  bcp => \"bcp/bcp\",\n  id => \"internet-drafts/draft-\"\n"
- title: );
  contents:
  - ');

    '
- title: my(%number2date) = (
  contents:
  - "my(%number2date) = (\n  44 => \"99mar\",\n  43 => \"98dec\", 42 => \"98aug\"\
    , 41 => \"98apr\",\n  40 => \"97dec\", 39 => \"97aug\", 38 => \"97apr\",\n  37\
    \ => \"96dec\", 36 => \"96jun\", 35 => \"96mar\",\n  34 => \"95dec\", 33 => \"\
    95jul\", 32 => \"95apr\",\n  31 => \"94dec\", 30 => \"94jul\", 29 => \"94mar\"\
    ,\n  28 => \"93nov\", 27 => \"93jul\", 26 => \"93mar\",\n  25 => \"92nov\", 24\
    \ => \"92jul\", 23 => \"92mar\",\n  22 => \"91nov\", 21 => \"91jul\", 20 => \"\
    91mar\",\n  19 => \"90dec\" );\n"
- title: my($wgpath) = "/ftp/ietf";
  contents:
  - 'my($wgpath) = "/ftp/ietf";

    '
- title: my($urn) = $ENV{'QUERY_STRING'};
  contents:
  - 'my($urn) = $ENV{''QUERY_STRING''};

    '
- title: 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs'
  contents:
  - 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs

    '
- title: 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header'
  contents:
  - 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header

    '
- title: (&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);
  contents:
  - '(&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);

    '
- title: (&resolverfc($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);
  contents:
  - '(&resolverfc($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);

    '
- title: (&resolvemtg($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);
  contents:
  - '(&resolvemtg($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);

    '
- title: '&urn_error("400 Bad Request\n");'
  contents:
  - '&urn_error("400 Bad Request\n");

    '
- title: sub resolvemtg {
  contents:
  - "sub resolvemtg {\n  my($ietfnum, $sesnam) = @_;\n  &urn_error(\"404 Not Found\\\
    n\") if (!defined $number2date{$ietfnum});\n  my($date)=$number2date{$ietfnum};\n\
    \  my($link)=\"$wgpath/$sesnam/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n\
    \    print \"Status:  302 Moved temporarily\\n\";\n    print \"Location: $link\\\
    n\";\n    return;\n  }\n  my($link)=\"$wgpath/$date/$sesnam-minutes-$date.txt\"\
    ;\n  if (-f $link) {\n    print \"Status:  302 Moved temporarily\\n\";\n    print\
    \ \"Location: $link\\n\";\n    return;\n  }\n  &urn_error(\"404 Not Found\\n\"\
    );\n"
- title: '}'
  contents:
  - '}

    '
- title: sub end {
  contents:
  - "sub end {\n  my($inarg)=@_;\n  return $inarg . \"st\" if ($inarg =~ /1$/);\n\
    \  return $inarg . \"nd\" if ($inarg =~ /2$/);\n  return $inarg . \"rd\" if ($inarg\
    \ =~ /3$/);\n  return $inarg . \"th\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolverfc {
  contents:
  - "sub resolverfc {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme,\
    \ $value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404 Not Found\\n\"\
    )if (!defined $pathbase{$scheme});\n  my($txttry)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  my($pstry)=\"/ftp/$pathbase{$scheme}$value.ps\";\n  my($htmltry)=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /application\\/postscript/ && -f $pstry) {\n\
    \      print \"Status:  302 Moved temporarily\\n\";\n      print \"Location: http://$host/$pathbase{$scheme}$value.ps\\\
    n\\n\";\n      last MIME_SWITCH;\n    }\n    if ($accept =~ /text\\/html/ && -f\
    \ $htmltry) {\n      print \"Status:  302 Moved temporarily0;\n      print \"\
    Location: http://$host/$pathbase{$scheme}$value.html\\n\\n\";\n      last MIME_SWITCH;\n\
    \    }\n    if ($accept =~ /\\*\\/\\*|text\\/plain/ && -f $txttry) {\n      print\
    \ \"Status:  302 Moved temporarily\\n\";\n      print \"Location: http://$host/$pathbase{$scheme}$value.txt\\\
    n\\n\";\n      last MIME_SWITCH;\n    }\n    &urn_error(\"404 Not Found\\n\");\n\
    \  }\n"
- title: '}'
  contents:
  - '}

    '
- title: sub urn_error {
  contents:
  - "sub urn_error {\n  my($code) = @_; #store failure code here...\n  print \"Status:\
    \  $code\";\n  print \"Content-type: text/html\\n\\n<HTML>\\n\";\n  print \"<head><title>URN\
    \ Resolution: I2L $code</title></head>\\n\";\n  print \"<BODY>\\n\";\n  print\
    \ \"<h1>URN to URL resolution failed for the URN:</h1>\\n\";\n  print \"<hr><h3>$urn</h3>\\\
    n\";\n  print \"</body>\\n\";\n  print \"</html>\\n\";\n  exit;\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolveid {
  contents:
  - "sub resolveid {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme)\
    \ = \"id\";\n  my($value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404\
    \ Not Found\\n\")if (!defined $pathbase{$scheme});\n  my($txttry)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  my($pstry)=\"/ftp/$pathbase{$scheme}$value.ps\";\n  my($htmltry)=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /application\\/postscript/ && -f $pstry) {\n\
    \      print \"Status:  302 Moved temporarily\\n\";\n      print \"Location: http://$host/$pathbase{$scheme}$value.ps\\\
    n\\n\";\n      last MIME_SWITCH;\n    }\n    if ($accept =~ /text\\/html/ && -f\
    \ $htmltry) {\n      print \"Status:  302 Moved temporarily\\n\";\n      print\
    \ \"Location: http://$host/$pathbase{$scheme}$value.html\\n\\n\";\n      last\
    \ MIME_SWITCH;\n    }\n    if ($accept =~ /\\*\\/\\*|text\\/plain/ && -f $txttry)\
    \ {\n      print \"Status:  302 Moved temporarily\\n\";\n      print \"Location:\
    \ http://$host/$pathbase{$scheme}$value.txt\\n\\n\";\n      last MIME_SWITCH;\n\
    \    }\n    &urn_error(\"404 Not Found\\n\");\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: A.3 I2Ls
  contents:
  - 'A.3 I2Ls

    '
- title: '#!/usr/local/bin/perl'
  contents:
  - '#!/usr/local/bin/perl

    '
- title: use strict;
  contents:
  - 'use strict;

    '
- title: '#'
  contents:
  - '#

    '
- title: '# this is a URN 2 URLs resolver for the ietf namespace'
  contents:
  - '# this is a URN 2 URLs resolver for the ietf namespace

    '
- title: '#'
  contents:
  - '#

    '
- title: my(@urls);
  contents:
  - 'my(@urls);

    '
- title: my(%pathbase) = (
  contents:
  - "my(%pathbase) = (\n  rfc => \"rfc/rfc\",\n  fyi => \"fyi/fyi\",\n  std => \"\
    std/std\",\n  bcp => \"bcp/bcp\",\n  id => \"internet-drafts/draft-\"\n"
- title: );
  contents:
  - ');

    '
- title: my(%number2date) = (
  contents:
  - "my(%number2date) = (\n  44 => \"99mar\",\n  43 => \"98dec\", 42 => \"98aug\"\
    , 41 => \"98apr\",\n  40 => \"97dec\", 39 => \"97aug\", 38 => \"97apr\",\n  37\
    \ => \"96dec\", 36 => \"96jun\", 35 => \"96mar\",\n  34 => \"95dec\", 33 => \"\
    95jul\", 32 => \"95apr\",\n  31 => \"94dec\", 30 => \"94jul\", 29 => \"94mar\"\
    ,\n  28 => \"93nov\", 27 => \"93jul\", 26 => \"93mar\",\n  25 => \"92nov\", 24\
    \ => \"92jul\", 23 => \"92mar\",\n  22 => \"91nov\", 21 => \"91jul\", 20 => \"\
    91mar\",\n  19 => \"90dec\" );\n"
- title: my($wgpath) = "/ftp/ietf";
  contents:
  - 'my($wgpath) = "/ftp/ietf";

    '
- title: my($urn) = $ENV{'QUERY_STRING'};
  contents:
  - 'my($urn) = $ENV{''QUERY_STRING''};

    '
- title: 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs'
  contents:
  - 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs

    '
- title: 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header'
  contents:
  - 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header

    '
- title: (&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);
  contents:
  - '(&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);

    '
- title: (&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);
  contents:
  - '(&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);

    '
- title: (&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);
  contents:
  - '(&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);

    '
- title: '&urn_error("400 Bad Request\n");'
  contents:
  - '&urn_error("400 Bad Request\n");

    '
- title: sub resolve2 {
  contents:
  - "sub resolve2 {\n  my($ietfnum, $sesnam) = @_;\n  &urn_error(\"404 Not Found\\\
    n\") if (!defined $number2date{$ietfnum});\n  my($date)=$number2date{$ietfnum};\n\
    \  my($link)=\"$wgpath/$sesnam/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n\
    \    $link=~s/^\\/ftp\\///;\n    my($ftplink)=\"ftp://$host/$link\";\n    my($httplink)=\"\
    http://$host/$link\";\n    my($glink)=\"gopher://$host:70/0/$link\";\n    if ($accept\
    \ =~ /text\\/uri-list/) { #look for text/uri-list,\n        otherwise text/html\n\
    \      print \"Status: 200 OK\\n\";\n      print \"Content-type: text/uri-list\\\
    n\\n\\n\";\n      print \"#$urn\\n\";\n      print \"$ftplink\\n\";\n      print\
    \ \"$httplink\\n\";\n      print \"$glink\\n\";\n    }\n    if ($accept =~ /\\\
    *\\/\\*|text\\/html/) {\n      print \"Status: 200 OK\\n\";\n      print \"Content-type:\
    \ text/html\\n\\n<HTML>\\n\";\n      print \"<head><title>URN Resolution: I2Ls</title></head>\\\
    n\";\n      print \"<BODY>\\n\";\n      print \"<h1>URN $urn resolves to the following\
    \ URLs:</h1>\\n\";\n      print \"<hr><ul>\\n\";\n      print \"<a href=\\\"$ftplink\\\
    \">$ftplink</a>\\n\";\n      print \"<a href=\\\"$httplink\\\">$httplink</a>\\\
    n\";\n      print \"<a href=\\\"$glink\\\">$glink</a>\\n\";\n      print \"</UL>\\\
    n</body>\\n</HTML>\\n\";\n    }\n    return;\n  }\n  my($link)=\"$wgpath/$date/$sesnam-minutes-$date.txt\"\
    ;\n  if (-f $link) {\n    $link=~s/^\\/ftp\\///;\n    my($ftplink)=\"ftp://$host/$link\"\
    ;\n    my($httplink)=\"http://$host/$link\";\n    my($glink)=\"gopher://$host:70/0/$link\"\
    ;\n    if ($accept =~ /text\\/uri-list/) { #look for text/uri-list,\n        otherwise\
    \ text/html\n      print \"Status: 200 OK\\n\";\n      print \"Content-type: text/uri-list\\\
    n\\n\\n\";\n      print \"#$urn\\n\";\n      print \"$ftplink\\n\";\n      print\
    \ \"$httplink\\n\";\n      print \"$glink\\n\";\n    }\n    if ($accept =~ /\\\
    *\\/\\*|text\\/html/) {\n      print \"Status: 200 OK\\n\";\n      print \"Content-type:\
    \ text/html\\n\\n<HTML>\\n\";\n      print \"<head><title>URN Resolution: I2Ls</title></head>\\\
    n\";\n      print \"<BODY>\\n\";\n      print \"<h1>URN $urn resolves to the following\
    \ URLs:</h1>\\n\";\n      print \"<hr><ul>\\n\";\n      print \"<a href=\\\"$ftplink\\\
    \">$ftplink</a>\\n\";\n      print \"<a href=\\\"$httplink\\\">$httplink</a>\\\
    n\";\n      print \"<a href=\\\"$glink\\\">$glink</a>\\n\";\n      print \"</UL>\\\
    n</body>\\n</HTML>\\n\";\n    }\n    return;\n  }\n  &urn_error(\"404 Not Found\\\
    n\");\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolve1 {
  contents:
  - "sub resolve1 {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme,\
    \ $value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404 Not Found\\n\"\
    )if (!defined $pathbase{$scheme});\n  my($try)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  if (-f $try) {\n    push(@urls, \"http://$host/$pathbase{$scheme}$value.txt\"\
    );\n    push(@urls, \"ftp://$host/$pathbase{$scheme}$value.txt\");\n    push(@urls,\
    \ \"gopher://$host:70/0/$pathbase{$scheme}$value.txt\");\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.ps\"\
    ;\n  if (-f $try) {\n    push(@urls, \"http://$host/$pathbase{$scheme}$value.ps\"\
    );\n    push(@urls, \"ftp://$host/$pathbase{$scheme}$value.ps\");\n    push(@urls,\
    \ \"gopher://$host:70/0/$pathbase{$scheme}$value.ps\");\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n  if (-f $try) {\n    push(@urls, \"http://$host/$pathbase{$scheme}$value.html\"\
    );\n    push(@urls, \"ftp://$host/$pathbase{$scheme}$value.html\");\n  }\n  &urn_error(\"\
    404 Not Found\\n\") if ($#urls == -1);\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /text\\/uri-list/) { #look for text/uri-list,\n\
    \        otherwise text/html\n      print \"Status: 200 OK\\n\";\n      print\
    \ \"Content-type: text/uri-list\\n\\n\\n\";\n      print \"#$urn\\n\";\n     \
    \ foreach $i (@urls) {\n        print \"$i\\n\";\n      }\n      last MIME_SWITCH;\n\
    \    }\n    if ($accept =~ /\\*\\/\\*|text\\/html/) {\n      print \"Status: 200\
    \ OK\\n\";\n      print \"Content-type: text/html\\n\\n<HTML>\\n\";\n      print\
    \ \"<head><title>URN Resolution: I2Ls</title></head>\\n\";\n      print \"<BODY>\\\
    n\";\n      print \"<h1>URN $urn resolves to the following URLs:</h1>\\n\";\n\
    \      print \"<hr><ul>\\n\";\n      foreach $i (@urls) {\n        print \"<LI><A\
    \ HREF=\\\"$i\\\">$i</A>\\n\";\n      }\n      print \"</UL>\\n</body>\\n</HTML>\\\
    n\";\n      last MIME_SWITCH;\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: sub urn_error {
  contents:
  - "sub urn_error {\n  my($code) = @_; #store failure code here...\n  print \"Status:\
    \ $code\";\n  print \"Content-type: text/html\\n\\n<HTML>\\n\";\n  print \"<head><title>URN\
    \ Resolution: I2L $code</title></head>\\n\";\n  print \"<BODY>\\n\";\n  print\
    \ \"<h1>URN to URL resolution failed for the URN:</h1>\\n\";\n  print \"<hr><h3>$urn</h3>\\\
    n\";\n  print \"</body>\\n\";\n  print \"</html>\\n\";\n  exit;\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolveid {
  contents:
  - "sub resolveid {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($value)\
    \ = @_;\n  my($scheme) = \"id\";\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404\
    \ Not Found\\n\")if (!defined $pathbase{$scheme});\n  my($try)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  if (-f $try) {\n    push(@urls, \"http://$host/$pathbase{$scheme}$value.txt\"\
    );\n    push(@urls, \"ftp://$host/$pathbase{$scheme}$value.txt\");\n    push(@urls,\
    \ \"gopher://$host:70/0/$pathbase{$scheme}$value.txt\");\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.ps\"\
    ;\n  if (-f $try) {\n    push(@urls, \"http://$host/$pathbase{$scheme}$value.ps\"\
    );\n    push(@urls, \"ftp://$host/$pathbase{$scheme}$value.ps\");\n    push(@urls,\
    \ \"gopher://$host:70/0/$pathbase{$scheme}$value.ps\");\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n  if (-f $try) {\n    push(@urls, \"http://$host/$pathbase{$scheme}$value.html\"\
    );\n    push(@urls, \"ftp://$host/$pathbase{$scheme}$value.html\");\n  }\n  &urn_error(\"\
    404 Not Found\\n\") if ($#urls == -1);\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /text\\/uri-list/) { #look for text/uri-list,\n\
    \        otherwise text/html\n      print \"Status: 200 OK\\n\";\n      print\
    \ \"Content-type: text/uri-list\\n\\n\\n\";\n      print \"#$urn\\n\";\n     \
    \ foreach $i (@urls) {\n        print \"$i\\n\";\n      }\n      last MIME_SWITCH;\n\
    \    }\n    if ($accept =~ /\\*\\/\\*|text\\/html/) {\n      print \"Status: 200\
    \ OK\\n\";\n      print \"Content-type: text/html\\n\\n<HTML>\\n\";\n      print\
    \ \"<head><title>URN Resolution: I2Ls</title></head>\\n\";\n      print \"<BODY>\\\
    n\";\n      print \"<h1>URN $urn resolves to the following URLs:</h1>\\n\";\n\
    \      print \"<hr><ul>\\n\";\n      foreach $i (@urls) {\n        print \"<LI><A\
    \ HREF=\\\"$i\\\">$i</A>\\n\";\n      }\n      print \"</UL>\\n</body>\\n</HTML>\\\
    n\";\n      last MIME_SWITCH;\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: A.4 I2Ns
  contents:
  - 'A.4 I2Ns

    '
- title: '#!/usr/local/bin/perl'
  contents:
  - '#!/usr/local/bin/perl

    '
- title: use strict;
  contents:
  - 'use strict;

    '
- title: '#'
  contents:
  - '#

    '
- title: '# this is a URN 2 URNs resolver for the ietf namespace'
  contents:
  - '# this is a URN 2 URNs resolver for the ietf namespace

    '
- title: '#'
  contents:
  - '#

    '
- title: my(%cite) = (
  contents:
  - "my(%cite) = (\n  rfc => \"/ftp/rfc/rfc-index.txt\",\n  fyi => \"/ftp/fyi/fyi-index.txt\"\
    ,\n  std => \"/ftp/std/std-index.txt\",\n  bcp => \"/ftp/rfc/bcp-index.txt\"\n"
- title: );
  contents:
  - ');

    '
- title: my(%number2date) = (
  contents:
  - "my(%number2date) = (\n  44 => \"99mar\",\n  43 => \"98dec\", 42 => \"98aug\"\
    , 41 => \"98apr\",\n  40 => \"97dec\", 39 => \"97aug\", 38 => \"97apr\",\n  37\
    \ => \"96dec\", 36 => \"96jun\", 35 => \"96mar\",\n  34 => \"95dec\", 33 => \"\
    95jul\", 32 => \"95apr\",\n  31 => \"94dec\", 30 => \"94jul\", 29 => \"94mar\"\
    ,\n  28 => \"93nov\", 27 => \"93jul\", 26 => \"93mar\",\n  25 => \"92nov\", 24\
    \ => \"92jul\", 23 => \"92mar\",\n  22 => \"91nov\", 21 => \"91jul\", 20 => \"\
    91mar\",\n  19 => \"90dec\" );\n"
- title: my($wgpath) = "/ftp/ietf";
  contents:
  - 'my($wgpath) = "/ftp/ietf";

    '
- title: my($urn) = $ENV{'QUERY_STRING'};
  contents:
  - 'my($urn) = $ENV{''QUERY_STRING''};

    '
- title: 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs'
  contents:
  - 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs

    '
- title: my($port) = $ENV={'SERVER_PORT'};
  contents:
  - 'my($port) = $ENV={''SERVER_PORT''};

    '
- title: 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header'
  contents:
  - 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header

    '
- title: (&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);
  contents:
  - '(&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);

    '
- title: (&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);
  contents:
  - '(&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);

    '
- title: '&urn_error("400 Bad Request\n");'
  contents:
  - '&urn_error("400 Bad Request\n");

    '
- title: sub resolve2 {
  contents:
  - "sub resolve2 {\n  my($ietfnum, $sesnam) = @_;\n  &urn_error(\"404 Not Found\\\
    n\") if (!defined $number2date{$ietfnum});\n  my($date)=$number2date{$ietfnum};\n\
    \  my($link)=\"$wgpath/$sesnam/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n\
    \    if ($accept =~ /text\\/uri-list/) {\n        print \"Status: 200 OK\\n\"\
    ;\n        print \"Content-type: text/uri-list\\n\\n\\n\";\n        print \"#$urn\\\
    n\";\n        return;\n    }\n    if ($accept =~ /\\*\\/\\*|text]\\/html/) {\n\
    \      print \"Status: 200 OK\\n\";\n      print \"Content-type: text/html\\n\\\
    n<HTML>\\n\";\n      print \"<head><title>URN Resolution: I2Ns</title></head>\\\
    n\";\n      print \"<BODY>\\n\";\n      print \"<h1>URN $urn resolves to the following\
    \ URNs:</h1>\\n\";\n      print \"<hr><ul>\\n\";\n      print \"</UL>\\n</body>\\\
    n</HTML>\\n\";\n      return;\n    }\n  }\n  my($link)=\"$wgpath/$date/$sesnam-minutes-$date.txt\"\
    ;\n  if (-f $link) {\n    if ($accept =~ /text\\/uri-list/) {\n        print \"\
    Status: 200 OK\\n\";\n        print \"Content-type: text/uri-list\\n\\n\\n\";\n\
    \        print \"#$urn\\n\";\n        return;\n    }\n    if ($accept =~ /\\*\\\
    /\\*|text\\/html/) {\n        print \"Status: 200 OK\\n\";\n        print \"Content-type:\
    \ text/html\\n\\n<HTML>\\n\";\n        print \"<head><title>URN Resolution: I2Ns</title></head>\\\
    n\";\n        print \"<BODY>\\n\";\n        print \"<h1>URN $urn resolves to the\
    \ following URNs:</h1>\\n\";\n        print \"<hr><ul>\\n\";\n        print \"\
    </UL>\\n</body>\\n</HTML>\\n\";\n        return;\n    }\n  }\n  &urn_error(\"\
    404 Not Found\\n\");\n"
- title: '}'
  contents:
  - '}

    '
- title: sub end {
  contents:
  - "sub end {\n  my($inarg)=@_;\n  return $inarg . \"st\" if ($inarg =~ /1$/);\n\
    \  return $inarg . \"nd\" if ($inarg =~ /2$/);\n  return $inarg . \"rd\" if ($inarg\
    \ =~ /3$/);\n  return $inarg . \"th\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolve1 {
  contents:
  - "sub resolve1 {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme,\
    \ $value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  if (!defined $cite{$scheme}) {\n\
    \    &urn_error(\"404 Not Found\\n\");\n  }\n  $flag = 0;\n  open(INPUT, \"$cite{$scheme}\"\
    );\n  while (<INPUT>) {\n    $flag = 1 if (/^0*$value /);\n    if ($flag == 1)\
    \ {\n      last if (/^$/);\n      chop;\n      push @bib,$_;\n    }\n  }\n  $k=join\
    \ \" \",@bib;\n  while ($k =~ /(\\S*)\\s*(fyi|std|rfc|bcp)\\s*([0-9]+)(.*)/i)\
    \ {\n    $k=$4;\n    $a=$2; $b=$3;\n    if (($a ne $scheme || $b ne $value) &&\
    \ ($1 !~ /obso/i)){\n      $a =~ tr/A-Z/a-z/;\n      $b =~ s/^0*//;\n      push\
    \ @ref,\"urn:ietf:$a:$b\";\n    }\n  }\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /text\\/uri-list/) {\n        print \"Status:\
    \ 200 OK\\n\";\n        print \"Content-type: text/uri-list\\n\\n\\n\";\n    \
    \    print \"#$urn\\n\";\n        foreach $i (@ref) {\n            print \"$i\\\
    n\";\n        }\n        last MIME_SWITCH;\n    }\n  if ($accept =~ /\\*\\/\\\
    *|text\\/html/) {\n    print \"Status: 200 OK\\n\";\n    print \"Content-type:\
    \ text/html\\n\\n<HTML>\\n\";\n    print \"<head><title>URN Resolution: I2Ns</title></head>\\\
    n\";\n    print \"<BODY>\\n\";\n    print \"<h1>URN $urn resolves to the following\
    \ URNs:</h1>\\n\";\n    print \"<hr><ul>\\n\";\n        foreach $i (@ref) {\n\
    \            print \"<li>$i: Click to resolve using\\n\";\n            print \"\
    <a\n"
- title: href=\"http://$host:$port/uri-res/I2C?$i\">I2C</a>,\n";
  contents:
  - "href=\\\"http://$host:$port/uri-res/I2C?$i\\\">I2C</a>,\\n\";\n            print\
    \ \"<a\n"
- title: href=\"http://$host:$port/uri-res/I2L?$i\">I2L</a>,\n";
  contents:
  - "href=\\\"http://$host:$port/uri-res/I2L?$i\\\">I2L</a>,\\n\";\n            print\
    \ \"<a\n"
- title: href=\"http://$host:$port/uri-res/I2Ls?$i\">I2Ls</a>,\n";
  contents:
  - "href=\\\"http://$host:$port/uri-res/I2Ls?$i\\\">I2Ls</a>,\\n\";\n           \
    \ print \"<a\n"
- title: href=\"http://$host:$port/uri-res/I2R?$i\">I2R</a>,\n";
  contents:
  - "href=\\\"http://$host:$port/uri-res/I2R?$i\\\">I2R</a>,\\n\";\n            print\
    \ \"<a\n"
- title: href=\"http://$host:$port/uri-res/I2Rs?$i\">I2Rs</a>\n";
  contents:
  - "href=\\\"http://$host:$port/uri-res/I2Rs?$i\\\">I2Rs</a>\\n\";\n        }\n \
    \   print \"</UL>\\n</body>\\n</HTML>\\n\";\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: '}'
  contents:
  - '}

    '
- title: sub make_link {
  contents:
  - "sub make_link {\n  my($sc);\n  my($inarg)=@_;\n  ($sc=$1) if ($inarg =~ /([a-z]*)/);\n\
    \  return \"/$sc/$inarg.ps\" if (-e \"/ftp/$sc/$inarg.ps\");\n  return \"/$sc/$inarg.html\"\
    \ if (-e \"/ftp/$sc/$inarg.html\");\n  return \"/$sc/$inarg.txt\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub urn_error {
  contents:
  - "sub urn_error {\n  my($code) = @_; #store failure code here...\n  print \"Status:\
    \ $code\";\n  print \"Content-type: text/html\\n\\n<HTML>\\n\";\n  print \"<head><title>URN\
    \ Resolution: I2Ns $code</title></head>\\n\";\n  print \"<BODY>\\n\";\n  print\
    \ \"<h1>URN to URN resolution failed for the URN:</h1>\\n\";\n  print \"<hr><h3>$urn</h3>\\\
    n\";\n  print \"</body>\\n\";\n  print \"</html>\\n\";\n  exit;\n"
- title: '};'
  contents:
  - '};

    '
- title: A.5 I2R
  contents:
  - 'A.5 I2R

    '
- title: '#!/usr/local/bin/perl'
  contents:
  - '#!/usr/local/bin/perl

    '
- title: use strict;
  contents:
  - 'use strict;

    '
- title: '#'
  contents:
  - '#

    '
- title: '# this is a URN 2 resource resolver for the ietf namespace'
  contents:
  - '# this is a URN 2 resource resolver for the ietf namespace

    '
- title: '#'
  contents:
  - '#

    '
- title: my(%pathbase) = (
  contents:
  - "my(%pathbase) = (\n  rfc => \"rfc/rfc\",\n  fyi => \"fyi/fyi\",\n  std => \"\
    std/std\",\n  bcp => \"bcp/bcp\",\n  id => \"internet-drafts/draft-\"\n"
- title: );
  contents:
  - ');

    '
- title: my(%number2date) = (
  contents:
  - "my(%number2date) = (\n  44 => \"99mar\",\n  43 => \"98dec\", 42 => \"98aug\"\
    , 41 => \"98apr\",\n  40 => \"97dec\", 39 => \"97aug\", 38 => \"97apr\",\n  37\
    \ => \"96dec\", 36 => \"96jun\", 35 => \"96mar\",\n  34 => \"95dec\", 33 => \"\
    95jul\", 32 => \"95apr\",\n  31 => \"94dec\", 30 => \"94jul\", 29 => \"94mar\"\
    ,\n  28 => \"93nov\", 27 => \"93jul\", 26 => \"93mar\",\n  25 => \"92nov\", 24\
    \ => \"92jul\", 23 => \"92mar\",\n  22 => \"91nov\", 21 => \"91jul\", 20 => \"\
    91mar\",\n  19 => \"90dec\" );\n"
- title: my($wgpath) = "/ftp/ietf";
  contents:
  - 'my($wgpath) = "/ftp/ietf";

    '
- title: my($urn) = $ENV{'QUERY_STRING'};
  contents:
  - 'my($urn) = $ENV{''QUERY_STRING''};

    '
- title: 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs'
  contents:
  - 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs

    '
- title: 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header'
  contents:
  - 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header

    '
- title: print "$urn\n";
  contents:
  - 'print "$urn\n";

    '
- title: (&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);
  contents:
  - '(&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\S+)/i);

    '
- title: (&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);
  contents:
  - '(&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);

    '
- title: (&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);
  contents:
  - '(&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);

    '
- title: '&urn_error("400 Bad Request\n");'
  contents:
  - '&urn_error("400 Bad Request\n");

    '
- title: sub resolve2 {
  contents:
  - "sub resolve2 {\n  my($ietfnum, $sesnam) = @_;\n  &urn_error(\"404 Not Found\\\
    n\") if (!defined $number2date{$ietfnum});\n  my($date)=$number2date{$ietfnum};\n\
    \  my($link)=\"$wgpath/$sesnam/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n\
    \      print \"Status:  200 OK\\n\";\n      print \"Content-type: text/plain\\\
    n\\n\";\n      open(FILE, \"$link\");\n      while (<FILE>) {\n          print\
    \ $_;\n      }\n      close FILE;\n    return;\n  }\n  my($link)=\"$wgpath/$date/$sesnam-minutes-$date.txt\"\
    ;\n  if (-f $link) {\n      print \"Status:  200 OK\\n\";\n      print \"Content-type:\
    \ text/plain\\n\\n\";\n      open(FILE, \"$link\");\n      while (<FILE>) {\n\
    \          print $_;\n      }\n      close FILE;\n    return;\n  }\n  &urn_error(\"\
    404 Not Found\\n\");\n"
- title: '}'
  contents:
  - '}

    '
- title: sub end {
  contents:
  - "sub end {\n  my($inarg)=@_;\n  return $inarg . \"st\" if ($inarg =~ /1$/);\n\
    \  return $inarg . \"nd\" if ($inarg =~ /2$/);\n  return $inarg . \"rd\" if ($inarg\
    \ =~ /3$/);\n  return $inarg . \"th\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolve1 {
  contents:
  - "sub resolve1 {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme,\
    \ $value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404 Not Found\\n\"\
    )if (!defined $pathbase{$scheme});\n  my($txttry)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  my($pstry)=\"/ftp/$pathbase{$scheme}$value.ps\";\n  my($htmltry)=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /application\\/postscript/ && -f $pstry) {\n\
    \      print \"Status:  200 OK\\n\";\n      print \"Content-type: application/postscript\\\
    n\\n\";\n      open(FILE, \"$pstry\");\n      while (<FILE>) {\n          print\
    \ $_;\n      }\n      close FILE;\n      last MIME_SWITCH;\n    }\n    if ($accept\
    \ =~ /text\\/html/ && -f $htmltry) {\n        print \"Status:  200 OK\\n\";\n\
    \        print \"Content-type: text/html\\n\\n\";\n        open(FILE, \"$htmltry\"\
    );\n        while (<FILE>) {\n            print $_;\n        }\n        close\
    \ FILE;\n        last MIME_SWITCH;\n    }\n    if ($accept =~ /\\*\\/\\*|text\\\
    /plain/ && -f $txttry) {\n        print \"Status:  200 OK\\n\";\n        print\
    \ \"Content-type: text/plain\\n\\n\";\n        open(FILE, \"$txttry\");\n    \
    \    while (<FILE>) {\n            print $_;\n        }\n        close FILE;\n\
    \        last MIME_SWITCH;\n    }\n    &urn_error(\"404 Not Found\\n\");\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolveid {
  contents:
  - "sub resolveid {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link);\n  my($scheme)\
    \ = \"id\";\n  my($value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404\
    \ Not Found\\n\")if (!defined $pathbase{$scheme});\n  my($txttry)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  my($pstry)=\"/ftp/$pathbase{$scheme}$value.ps\";\n  my($htmltry)=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n"
- title: 'MIME_SWITCH: {'
  contents:
  - "MIME_SWITCH: {\n    if ($accept =~ /application\\/postscript/ && -f $pstry) {\n\
    \      print \"Status:  200 OK\\n\";\n      print \"Content-type: application/postscript\\\
    n\\n\";\n      open(FILE, \"$pstry\");\n      while (<FILE>) {\n          print\
    \ $_;\n      }\n      close FILE;\n      last MIME_SWITCH;\n    }\n    if ($accept\
    \ =~ /text\\/html/ && -f $htmltry) {\n        print \"Status:  200 OK\\n\";\n\
    \        print \"Content-type: text/html\\n\\n\";\n        open(FILE, \"$htmltry\"\
    );\n        while (<FILE>) {\n            print $_;\n        }\n        close\
    \ FILE;\n        last MIME_SWITCH;\n    }\n    if ($accept =~ /\\*\\/\\*|text\\\
    /plain/ && -f $txttry) {\n        print \"Status:  200 OK\\n\";\n        print\
    \ \"Content-type: text/plain\\n\\n\";\n        open(FILE, \"$txttry\");\n    \
    \    while (<FILE>) {\n            print $_;\n        }\n        close FILE;\n\
    \        last MIME_SWITCH;\n    }\n    &urn_error(\"404 Not Found\\n\");\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: sub urn_error {
  contents:
  - "sub urn_error {\n  my($code) = @_; #store failure code here...\n  print \"Status:\
    \  $code\";\n  print \"Content-type: text/html\\n\\n<HTML>\\n\";\n  print \"<head><title>URN\
    \ Resolution: I2R $code</title></head>\\n\";\n  print \"<BODY>\\n\";\n  print\
    \ \"<h1>URN to URL resolution failed for the URN:</h1>\\n\";\n  print \"<hr><h3>$urn</h3>\\\
    n\";\n  print \"</body>\\n\";\n  print \"</html>\\n\";\n  exit;\n"
- title: '}'
  contents:
  - '}

    '
- title: A.6 I2Rs
  contents:
  - 'A.6 I2Rs

    '
- title: '#!/usr/local/bin/perl'
  contents:
  - '#!/usr/local/bin/perl

    '
- title: use strict;
  contents:
  - 'use strict;

    '
- title: '#'
  contents:
  - '#

    '
- title: '# this is a URN 2 resources resolver for the ietf namespace'
  contents:
  - '# this is a URN 2 resources resolver for the ietf namespace

    '
- title: '#'
  contents:
  - '#

    '
- title: my(@urls);
  contents:
  - 'my(@urls);

    '
- title: my(%pathbase) = (
  contents:
  - "my(%pathbase) = (\n  rfc => \"rfc/rfc\",\n  fyi => \"fyi/fyi\",\n  std => \"\
    std/std\",\n  bcp => \"bcp/bcp\",\n  id => \"internet-drafts/draft-\"\n"
- title: );
  contents:
  - ');

    '
- title: my(%number2date) = (
  contents:
  - "my(%number2date) = (\n  44 => \"99mar\",\n  43 => \"98dec\", 42 => \"98aug\"\
    , 41 => \"98apr\",\n  40 => \"97dec\", 39 => \"97aug\", 38 => \"97apr\",\n  37\
    \ => \"96dec\", 36 => \"96jun\", 35 => \"96mar\",\n  34 => \"95dec\", 33 => \"\
    95jul\", 32 => \"95apr\",\n  31 => \"94dec\", 30 => \"94jul\", 29 => \"94mar\"\
    ,\n  28 => \"93nov\", 27 => \"93jul\", 26 => \"93mar\",\n  25 => \"92nov\", 24\
    \ => \"92jul\", 23 => \"92mar\",\n  22 => \"91nov\", 21 => \"91jul\", 20 => \"\
    91mar\",\n  19 => \"90dec\" );\n"
- title: my($wgpath) = "/ftp/ietf";
  contents:
  - 'my($wgpath) = "/ftp/ietf";

    '
- title: my($urn) = $ENV{'QUERY_STRING'};
  contents:
  - 'my($urn) = $ENV{''QUERY_STRING''};

    '
- title: 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs'
  contents:
  - 'my($host) = $ENV{''SERVER_NAME''}; #get my host name for ftp: URLs

    '
- title: 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header'
  contents:
  - 'my($accept) = $ENV{''HTTP_ACCEPT''}; #this is the "Accept:" HTTP header

    '
- title: (&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\s*)/i);
  contents:
  - '(&resolveid($1), exit) if ($urn =~ /urn:ietf:id:(\s*)/i);

    '
- title: (&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);
  contents:
  - '(&resolve1($1, $2), exit) if ($urn =~ /urn:ietf:(\w*):(\d*)/i);

    '
- title: (&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);
  contents:
  - '(&resolve2($1, $2), exit) if ($urn =~ /urn:ietf:mtg:(\d*)-(\w*)/i);

    '
- title: '&urn_error("400 Bad Request\n");'
  contents:
  - '&urn_error("400 Bad Request\n");

    '
- title: sub resolve2 {
  contents:
  - "sub resolve2 {\n  my($ietfnum, $sesnam) = @_;\n  my(@vers,$i);\n  &urn_error(\"\
    404 Not Found\\n\") if (!defined $number2date{$ietfnum});\n  my($date)=$number2date{$ietfnum};\n\
    \  my($link)=\"$wgpath/$sesnam/$sesnam-minutes-$date.txt\";\n  if (-f $link) {\n\
    \      push(@vers,$link);\n  }\n  $link=\"$wgpath/$date/$sesnam-minutes-$date.txt\"\
    ;\n  if (-f $link) {\n      push(@vers,$link);\n  }\n  &urn_error(\"404 Not Found\\\
    n\") if ($#vers==-1);\n  print \"Status: 200 OK\\n\";\n  print \"Content-type:\
    \ multipart/alternative; boundary=endpart\\n\\n\";\n  foreach $i (@vers) {\n \
    \     print \"--endpart\\n\";\n      if ($i =~ /html$/) {\n          print \"\
    Content-Type: text/html\\n\\n\";\n      }\n      if ($i =~ /txt$/) {\n       \
    \   print \"Content-Type: text/plain\\n\\n\";\n      }\n      if ($i =~ /ps$/)\
    \ {\n          print \"Content-Type: application/postscript\\n\\n\";\n      }\n\
    \      open(FILE, \"$i\");\n      while (<FILE>) {\n          print \"$_\";\n\
    \      }\n      close FILE;\n  }\n  print \"--endpart\\n\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolve1 {
  contents:
  - "sub resolve1 {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link,@vers);\n\
    \  my($scheme, $value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"404 Not\
    \ Found\\n\")if (!defined $pathbase{$scheme});\n  my($try)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  if (-f $try) {\n      push(@vers, $try);\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.ps\"\
    ;\n  if (-f $try) {\n      push(@vers, $try);\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n  if (-f $try) {\n      push(@vers, $try);\n  }\n  print \"Status: 200 OK\\\
    n\";\n  print \"Content-type: multipart/alternative; boundary=endpart\\n\\n\"\
    ;\n  foreach $i (@vers) {\n      print \"--endpart\\n\";\n      if ($i =~ /html$/)\
    \ {\n          print \"Content-Type: text/html\\n\\n\";\n      }\n      if ($i\
    \ =~ /txt$/) {\n          print \"Content-Type: text/plain\\n\\n\";\n      }\n\
    \      if ($i =~ /ps$/) {\n          print \"Content-Type: application/postscript\\\
    n\\n\";\n      }\n      open(FILE, \"$i\");\n      while (<FILE>) {\n        \
    \  print \"$_\";\n      }\n      close FILE;\n  }\n  print \"--endpart\\n\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub resolveid {
  contents:
  - "sub resolveid {\n  my($flag,@bib,$i,$k,$j,$done,@ref);\n  my($l,$link,@vers);\n\
    \  my($scheme) = \"id\";\n  my($value) = @_;\n  $scheme =~ tr/A-Z/a-z/;\n  &urn_error(\"\
    404 Not Found\\n\")if (!defined $pathbase{$scheme});\n  my($try)=\"/ftp/$pathbase{$scheme}$value.txt\"\
    ;\n  if (-f $try) {\n      push(@vers, $try);\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.ps\"\
    ;\n  if (-f $try) {\n      push(@vers, $try);\n  }\n  $try=\"/ftp/$pathbase{$scheme}$value.html\"\
    ;\n  if (-f $try) {\n      push(@vers, $try);\n  }\n  print \"Status: 200 OK\\\
    n\";\n  print \"Content-type: multipart/alternative; boundary=endpart\\n\\n\"\
    ;\n  foreach $i (@vers) {\n      print \"--endpart\\n\";\n      if ($i =~ /html$/)\
    \ {\n          print \"Content-Type: text/html\\n\\n\";\n      }\n      if ($i\
    \ =~ /txt$/) {\n          print \"Content-Type: text/plain\\n\\n\";\n      }\n\
    \      if ($i =~ /ps$/) {\n          print \"Content-Type: application/postscript\\\
    n\\n\";\n      }\n      open(FILE, \"$i\");\n      while (<FILE>) {\n        \
    \  print \"$_\";\n      }\n      close FILE;\n  }\n  print \"--endpart\\n\";\n"
- title: '}'
  contents:
  - '}

    '
- title: sub urn_error {
  contents:
  - "sub urn_error {\n  my($code) = @_; #store failure code here...\n  print \"Status:\
    \ $code\";\n  print \"Content-type: text/html\\n\\n<HTML>\\n\";\n  print \"<head><title>URN\
    \ Resolution: I2Rs $code</title></head>\\n\";\n  print \"<BODY>\\n\";\n  print\
    \ \"<h1>URN to URL resolution failed for the URN:</h1>\\n\";\n  print \"<hr><h3>$urn</h3>\\\
    n\";\n  print \"</body>\\n\";\n  print \"</html>\\n\";\n  exit;\n"
- title: '}'
  contents:
  - '}

    '
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
