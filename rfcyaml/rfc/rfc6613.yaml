- title: __initial_text__
  contents:
  - '                            RADIUS over TCP

    '
- title: Abstract
  contents:
  - "Abstract\n   The Remote Authentication Dial-In User Server (RADIUS) protocol\
    \ has,\n   until now, required the User Datagram Protocol (UDP) as the\n   underlying\
    \ transport layer.  This document defines RADIUS over the\n   Transmission Control\
    \ Protocol (RADIUS/TCP), in order to address\n   handling issues related to RADIUS\
    \ over Transport Layer Security\n   (RADIUS/TLS).  It permits TCP to be used as\
    \ a transport protocol for\n   RADIUS only when a transport layer such as TLS\
    \ or IPsec provides\n   confidentiality and security.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6613.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Applicability of Reliable Transport ........................4\n  \
    \    1.2. Terminology ................................................6\n    \
    \  1.3. Requirements Language ......................................6\n   2. Changes\
    \ to RADIUS ...............................................6\n      2.1. Packet\
    \ Format ..............................................7\n      2.2. Assigned\
    \ Ports for RADIUS/TCP ..............................7\n      2.3. Management\
    \ Information Base (MIB) ..........................8\n      2.4. Detecting Live\
    \ Servers .....................................8\n      2.5. Congestion Control\
    \ Issues ..................................9\n      2.6. TCP Specific Issues ........................................9\n\
    \           2.6.1. Duplicates and Retransmissions .....................10\n  \
    \         2.6.2. Head of Line Blocking ..............................11\n    \
    \       2.6.3. Shared Secrets .....................................11\n      \
    \     2.6.4. Malformed Packets and Unknown Clients ..............12\n        \
    \   2.6.5. Limitations of the ID Field ........................13\n          \
    \ 2.6.6. EAP Sessions .......................................13\n           2.6.7.\
    \ TCP Applications Are Not UDP Applications ..........14\n   3. Diameter Considerations\
    \ ........................................14\n   4. Security Considerations ........................................14\n\
    \   5. References .....................................................15\n  \
    \    5.1. Normative References ......................................15\n    \
    \  5.2. Informative References ....................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The RADIUS protocol is defined in [RFC2865] as using the\
    \ User\n   Datagram Protocol (UDP) for the underlying transport layer.  While\n\
    \   there are a number of benefits to using UDP as outlined in [RFC2865],\n  \
    \ Section 2.4, there are also some limitations:\n      *  Unreliable transport.\
    \  As a result, systems using RADIUS have\n         to implement application-layer\
    \ timers and retransmissions, as\n         described in [RFC5080], Section 2.2.1.\n\
    \      *  Packet fragmentation.  [RFC2865], Section 3, permits RADIUS\n      \
    \   packets up to 4096 octets in length.  These packets are larger\n         than\
    \ the common Internet MTU (576), resulting in fragmentation\n         of the packets\
    \ at the IP layer when they are proxied over the\n         Internet.  Transport\
    \ of fragmented UDP packets appears to be a\n         poorly tested code path\
    \ on network devices.  Some devices\n         appear to be incapable of transporting\
    \ fragmented UDP packets,\n         making it difficult to deploy RADIUS in a\
    \ network where those\n         devices are deployed.\n      *  Connectionless\
    \ transport.  Neither clients nor servers receive\n         positive statements\
    \ that a \"connection\" is down.  This\n         information has to be deduced\
    \ instead from the absence of a\n         reply to a request.\n      *  Lack of\
    \ congestion control.  Clients can send arbitrary amounts\n         of traffic\
    \ with little or no feedback.  This lack of feedback\n         can result in congestive\
    \ collapse of the network.\n   RADIUS has been widely deployed for well over a\
    \ decade and continues\n   to be widely deployed.  Experience shows that these\
    \ issues have been\n   minor in some use cases and problematic in others.  For\
    \ use cases\n   such as inter-server proxying, an alternative transport and security\n\
    \   model -- RADIUS/TLS, is defined in [RFC6614].  That document\n   describes\
    \ the transport implications of running RADIUS/TLS.\n   The choice of TCP as a\
    \ transport protocol is largely driven by the\n   desire to improve the security\
    \ of RADIUS by using RADIUS/TLS.  For\n   practical reasons, the transport protocol\
    \ (TCP) is defined separately\n   from the security mechanism (TLS).\n   Since\
    \ \"bare\" TCP does not provide for confidentiality or enable\n   negotiation\
    \ of credible ciphersuites, its use is not appropriate for\n   inter-server communications\
    \ where strong security is required.  As a\n   result, \"bare\" TCP transport\
    \ MUST NOT be used without TLS, IPsec, or\n   another secure upper layer.\n  \
    \ However, \"bare\" TCP transport MAY be used when another method such as\n  \
    \ IPsec [RFC4301] is used to provide additional confidentiality and\n   security.\
    \  Should experience show that such deployments are useful,\n   this specification\
    \ could be moved to the Standards Track.\n"
- title: 1.1.  Applicability of Reliable Transport
  contents:
  - "1.1.  Applicability of Reliable Transport\n   The intent of this document is\
    \ to address transport issues related to\n   RADIUS/TLS [RFC6614] in inter-server\
    \ communications scenarios, such\n   as inter-domain communication between proxies.\
    \  These situations\n   benefit from the confidentiality and ciphersuite negotiation\
    \ that can\n   be provided by TLS.  Since TLS is already widely available within\
    \ the\n   operating systems used by proxies, implementation barriers are low.\n\
    \   In scenarios where RADIUS proxies exchange a large volume of packets,\n  \
    \ it is likely that there will be sufficient traffic to enable the\n   congestion\
    \ window to be widened beyond the minimum value on a long-\n   term basis, enabling\
    \ ACK piggybacking.  Through use of an\n   application-layer watchdog as described\
    \ in [RFC3539], it is possible\n   to address the objections to reliable transport\
    \ described in\n   [RFC2865], Section 2.4, without substantial watchdog traffic,\
    \ since\n   regular traffic is expected in both directions.\n   In addition, use\
    \ of RADIUS/TLS has been found to improve operational\n   performance when used\
    \ with multi-round-trip authentication mechanisms\n   such as the Extensible Authentication\
    \ Protocol (EAP) over RADIUS\n   [RFC3579].  In such exchanges, it is typical\
    \ for EAP fragmentation to\n   increase the number of round trips required.  For\
    \ example, where EAP-\n   TLS authentication [RFC5216] is attempted and both the\
    \ EAP peer and\n   server utilize certificate chains of 8 KB, as many as 15 round\
    \ trips\n   can be required if RADIUS packets are restricted to the common\n \
    \  Ethernet MTU (1500 octets) for EAP over LAN (EAPoL) use cases.\n   Fragmentation\
    \ of RADIUS/UDP packets is generally inadvisable due to\n   lack of fragmentation\
    \ support within intermediate devices such as\n   filtering routers, firewalls,\
    \ and NATs.  However, since RADIUS/UDP\n   implementations typically do not support\
    \ MTU discovery, fragmentation\n   can occur even when the maximum RADIUS/UDP\
    \ packet size is restricted\n   to 1500 octets.\n   These problems disappear if\
    \ a 4096-octet application-layer payload\n   can be used alongside RADIUS/TLS.\
    \  Since most TCP implementations\n   support MTU discovery, the TCP Maximum Segment\
    \ Size (MSS) is\n   automatically adjusted to account for the MTU, and the larger\n\
    \   congestion window supported by TCP may allow multiple TCP segments to\n  \
    \ be sent within a single window.  Even those few TCP stacks that do\n   not perform\
    \ Path MTU discovery can already support arbitrary\n   payloads.\n   Where the\
    \ MTU for EAP packets is large, RADIUS/EAP traffic required\n   for an EAP-TLS\
    \ authentication with 8-KB certificate chains may be\n   reduced to 7 round trips\
    \ or less, resulting in substantially reduced\n   authentication times.\n   In\
    \ addition, experience indicates that EAP sessions transported over\n   RADIUS/TLS\
    \ are less likely to abort unsuccessfully.  Historically,\n   RADIUS-over-UDP\
    \ (see Section 1.2) implementations have exhibited poor\n   retransmission behavior.\
    \  Some implementations retransmit packets,\n   others do not, and others send\
    \ new packets rather than performing\n   retransmission.  Some implementations\
    \ are incapable of detecting EAP\n   retransmissions, and will instead treat the\
    \ retransmitted packet as\n   an error.  As a result, within RADIUS/UDP implementations,\n\
    \   retransmissions have a high likelihood of causing an EAP\n   authentication\
    \ session to fail.  For a system with a million logins a\n   day running EAP-TLS\
    \ mutual authentication with 15 round trips, and\n   having a packet loss probability\
    \ of P=0.01%, we expect that 0.3% of\n   connections will experience at least\
    \ one lost packet.  That is, 3,000\n   user sessions each day will experience\
    \ authentication failure.  This\n   is an unacceptable failure rate for a mass-market\
    \ network service.\n   Using a reliable transport method such as TCP means that\
    \ RADIUS\n   implementations can remove all application-layer retransmissions,\
    \ and\n   instead rely on the Operating System (OS) kernel's well-tested TCP\n\
    \   transport to ensure Path MTU discovery and reliable delivery.  Modern\n  \
    \ TCP implementations also implement anti-spoofing provisions, which is\n   more\
    \ difficult to do in a UDP application.\n   In contrast, use of TCP as a transport\
    \ between a Network Access\n   Server (NAS) and a RADIUS server is usually a poor\
    \ fit.  As noted in\n   [RFC3539], Section 2.1, for systems originating low numbers\
    \ of RADIUS\n   request packets, inter-packet spacing is often larger than the\
    \ packet\n   Round-Trip Time (RTT), meaning that, the congestion window will\n\
    \   typically stay below the minimum value on a long-term basis.  The\n   result\
    \ is an increase in packets due to ACKs as compared to UDP,\n   without a corresponding\
    \ set of benefits.  In addition, the lack of\n   substantial traffic implies the\
    \ need for additional watchdog traffic\n   to confirm reachability.\n   As a result,\
    \ the objections to reliable transport indicated in\n   [RFC2865], Section 2.4,\
    \ continue to apply to NAS-RADIUS server\n   communications, and UDP SHOULD continue\
    \ to be used as the transport\n   protocol in this scenario.  In addition, it\
    \ is recommended that\n   implementations of RADIUS Dynamic Authorization Extensions\
    \ [RFC5176]\n   SHOULD continue to utilize UDP transport, since the volume of\
    \ dynamic\n   authorization traffic is usually expected to be small.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document uses the following terms:\n   RADIUS client\n\
    \      A device that provides an access service for a user to a network.\n   \
    \   Also referred to as a Network Access Server, or NAS.\n   RADIUS server\n \
    \     A device that provides one or more of authentication,\n      authorization,\
    \ and/or accounting (AAA) services to a NAS.\n   RADIUS proxy\n      A RADIUS\
    \ proxy acts as a RADIUS server to the NAS, and a RADIUS\n      client to the\
    \ RADIUS server.\n   RADIUS request packet\n      A packet originated by a RADIUS\
    \ client to a RADIUS server.  For\n      example, Access-Request, Accounting-Request,\
    \ CoA-Request, or\n      Disconnect-Request.\n   RADIUS response packet\n    \
    \  A packet sent by a RADIUS server to a RADIUS client, in response\n      to\
    \ a RADIUS request packet.  For example, Access-Accept, Access-\n      Reject,\
    \ Access-Challenge, Accounting-Response, or CoA-ACK.\n   RADIUS/UDP\n      RADIUS\
    \ over UDP, as defined in [RFC2865].\n   RADIUS/TCP\n      RADIUS over TCP, as\
    \ defined in this document.\n   RADIUS/TLS\n      RADIUS over TLS, as defined\
    \ in [RFC6614].\n"
- title: 1.3.  Requirements Language
  contents:
  - "1.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Changes to RADIUS
  contents:
  - "2.  Changes to RADIUS\n   RADIUS/TCP involves sending RADIUS application messages\
    \ over a TCP\n   connection.  In the sections that follow, we discuss the implications\n\
    \   for the RADIUS packet format (Section 2.1), port usage (Section 2.2),\n  \
    \ RADIUS MIBs (Section 2.3), and RADIUS proxies (Section 2.5).  TCP-\n   specific\
    \ issues are discussed in Section 2.6.\n"
- title: 2.1.  Packet Format
  contents:
  - "2.1.  Packet Format\n   The RADIUS packet format is unchanged from [RFC2865],\
    \ [RFC2866], and\n   [RFC5176].  Specifically, all of the following portions of\
    \ RADIUS\n   MUST be unchanged when using RADIUS/TCP:\n      *  Packet format\n\
    \      *  Permitted codes\n      *  Request Authenticator calculation\n      *\
    \  Response Authenticator calculation\n      *  Minimum packet length\n      *\
    \  Maximum packet length\n      *  Attribute format\n      *  Vendor-Specific\
    \ Attribute (VSA) format\n      *  Permitted data types\n      *  Calculations\
    \ of dynamic attributes such as CHAP-Challenge, or\n         Message-Authenticator.\n\
    \      *  Calculation of \"encrypted\" attributes such as Tunnel-Password.\n \
    \  The use of TLS transport does not change the calculation of security-\n   related\
    \ fields (such as the Response-Authenticator) in RADIUS\n   [RFC2865] or RADIUS\
    \ Dynamic Authorization [RFC5176].  Calculation of\n   attributes such as User-Password\
    \ [RFC2865] or Message-Authenticator\n   [RFC3579] also does not change.\n   Clients\
    \ and servers MUST be able to store and manage shared secrets\n   based on the\
    \ key described in Section 2.6, of (IP address, port,\n   transport protocol).\n\
    \   The changes to RADIUS implementations required to implement this\n   specification\
    \ are largely limited to the portions that send and\n   receive packets on the\
    \ network.\n"
- title: 2.2.  Assigned Ports for RADIUS/TCP
  contents:
  - "2.2.  Assigned Ports for RADIUS/TCP\n   IANA has already assigned TCP ports for\
    \ RADIUS transport, as outlined\n   below:\n      * radius          1812/tcp\n\
    \      * radius-acct     1813/tcp\n      * radius-dynauth  3799/tcp\n   Since\
    \ these ports are unused by existing RADIUS implementations, the\n   assigned\
    \ values MUST be used as the default ports for RADIUS over\n   TCP.\n   The early\
    \ deployment of RADIUS was done using UDP port number 1645,\n   which conflicts\
    \ with the \"datametrics\" service.  Implementations\n   using RADIUS/TCP MUST\
    \ NOT use TCP ports 1645 or 1646 as the default\n   ports for this specification.\n\
    \   The \"radsec\" port (2083/tcp) SHOULD be used as the default port for\n  \
    \ RADIUS/TLS.  The \"radius\" port (1812/tcp) SHOULD NOT be used for\n   RADIUS/TLS.\n"
- title: 2.3.  Management Information Base (MIB)
  contents:
  - "2.3.  Management Information Base (MIB)\n   The MIB Module definitions in [RFC4668],\
    \ [RFC4669], [RFC4670],\n   [RFC4671], [RFC4672], and [RFC4673] are intended to\
    \ be used for\n   RADIUS over UDP.  As such, they do not support RADIUS/TCP, and\
    \ will\n   need to be updated in the future.  Implementations of RADIUS/TCP\n\
    \   SHOULD NOT reuse these MIB Modules to perform statistics counting for\n  \
    \ RADIUS/TCP connections.\n"
- title: 2.4.  Detecting Live Servers
  contents:
  - "2.4.  Detecting Live Servers\n   As RADIUS is a \"hop-by-hop\" protocol, a RADIUS\
    \ proxy shields the\n   client from any information about downstream servers.\
    \  While the\n   client may be able to deduce the operational state of the local\n\
    \   server (i.e., proxy), it cannot make any determination about the\n   operational\
    \ state of the downstream servers.\n   Within RADIUS, as defined in [RFC2865],\
    \ proxies typically only\n   forward traffic between the NAS and RADIUS server,\
    \ and they do not\n   generate their own responses.  As a result, when a NAS does\
    \ not\n   receive a response to a request, this could be the result of packet\n\
    \   loss between the NAS and proxy, a problem on the proxy, loss between\n   the\
    \ RADIUS proxy and server, or a problem with the server.\n   When UDP is used\
    \ as a transport protocol, the absence of a reply can\n   cause a client to deduce\
    \ (incorrectly) that the proxy is unavailable.\n   The client could then fail\
    \ over to another server or conclude that no\n   \"live\" servers are available\
    \ (OKAY state in [RFC3539], Appendix A).\n   This situation is made even worse\
    \ when requests are sent through a\n   proxy to multiple destinations.  Failures\
    \ in one destination may\n   result in service outages for other destinations,\
    \ if the client\n   erroneously believes that the proxy is unresponsive.\n   For\
    \ RADIUS/TLS, it is RECOMMENDED that implementations utilize the\n   existence\
    \ of a TCP connection along with the application-layer\n   watchdog defined in\
    \ [RFC3539], Section 3.4, to determine that the\n   server is \"live\".\n   RADIUS\
    \ clients using RADIUS/TCP MUST mark a connection DOWN if the\n   network stack\
    \ indicates that the connection is no longer active.  If\n   the network stack\
    \ indicates that the connection is still active,\n   clients MUST NOT decide that\
    \ it is down until the application-layer\n   watchdog algorithm has marked it\
    \ DOWN ([RFC3539], Appendix A).\n   RADIUS clients using RADIUS/TCP MUST NOT decide\
    \ that a RADIUS server\n   is unresponsive until all TCP connections to it have\
    \ been marked\n   DOWN.\n   The above requirements do not forbid the practice\
    \ of a client\n   proactively closing connections or marking a server as DOWN\
    \ due to an\n   administrative decision.\n"
- title: 2.5.  Congestion Control Issues
  contents:
  - "2.5.  Congestion Control Issues\n   Additional issues with RADIUS proxies involve\
    \ transport protocol\n   changes where the proxy receives packets on one transport\
    \ protocol\n   and forwards them on a different transport protocol.  There are\n\
    \   several situations in which the law of \"conservation of packets\"\n   could\
    \ be violated on an end-to-end basis (e.g., where more packets\n   could enter\
    \ the system than could leave it on a short-term basis):\n      *  Where TCP is\
    \ used between proxies, it is possible that the\n         bandwidth consumed by\
    \ incoming UDP packets destined to a given\n         upstream server could exceed\
    \ the sending rate of a single TCP\n         connection to that server, based\
    \ on the window size/RTT\n         estimate.\n      *  It is possible for the\
    \ incoming rate of TCP packets destined to\n         a given realm to exceed the\
    \ UDP throughput achievable using the\n         transport guidelines established\
    \ in [RFC5080].  This could\n         happen, for example, where the TCP window\
    \ between proxies has\n         opened, but packet loss is being experienced on\
    \ the UDP leg, so\n         that the effective congestion window on the UDP side\
    \ is 1.\n   Intrinsically, proxy systems operate with multiple control loops\n\
    \   instead of one end-to-end loop, and so they are less stable.  This is\n  \
    \ true even for TCP-TCP proxies.  As discussed in [RFC3539], the only\n   way\
    \ to achieve stability equivalent to a single TCP connection is to\n   mimic the\
    \ end-to-end behavior of a single TCP connection.  This\n   typically is not achievable\
    \ with an application-layer RADIUS\n   implementation, regardless of transport.\n"
- title: 2.6.  TCP Specific Issues
  contents:
  - "2.6.  TCP Specific Issues\n   The guidelines defined in [RFC3539] for implementing\
    \ a AAA protocol\n   over reliable transport are applicable to RADIUS/TLS.\n \
    \  The application-layer watchdog defined in [RFC3539], Section 3.4,\n   MUST\
    \ be used.  The Status-Server packet [RFC5997] MUST be used as the\n   application-layer\
    \ watchdog message.  Implementations MUST reserve one\n   RADIUS ID per connection\
    \ for the application-layer watchdog message.\n   This restriction is described\
    \ further in Section 2.6.4.\n   RADIUS/TLS implementations MUST support receiving\
    \ RADIUS packets over\n   both UDP and TCP transports originating from the same\
    \ endpoint.\n   RADIUS packets received over UDP MUST be replied to over UDP;\
    \ RADIUS\n   packets received over TCP MUST be replied to over TCP.  That is,\n\
    \   RADIUS clients and servers MUST be treated as unique based on a key\n   of\
    \ the three-tuple (IP address, port, transport protocol).\n   Implementations\
    \ MUST permit different shared secrets to be used for\n   UDP and TCP connections\
    \ to the same destination IP address and\n   numerical port.\n   This requirement\
    \ does not forbid the traditional practice of using\n   primary and secondary\
    \ servers in a failover relationship.  Instead,\n   it requires that two services\
    \ sharing an IP address and numerical\n   port, but differing in transport protocol,\
    \ MUST be treated as\n   independent services for the purpose of failover, load-balancing,\n\
    \   etc.\n   Whenever the underlying network stack permits the use of TCP\n  \
    \ keepalive socket options, their use is RECOMMENDED.\n"
- title: 2.6.1.  Duplicates and Retransmissions
  contents:
  - "2.6.1.  Duplicates and Retransmissions\n   As TCP is a reliable transport, implementations\
    \ MUST NOT retransmit\n   RADIUS request packets over a given TCP connection.\
    \  Similarly, if\n   there is no response to a RADIUS packet over one TCP connection,\n\
    \   implementations MUST NOT retransmit that packet over a different TCP\n   connection\
    \ to the same destination IP address and port, while the\n   first connection\
    \ is in the OKAY state ([RFC3539], Appendix A).\n   However, if the TCP connection\
    \ is broken or closed, retransmissions\n   over new connections are permissible.\
    \  RADIUS request packets that\n   have not yet received a response MAY be transmitted\
    \ by a RADIUS\n   client over a new TCP connection.  As this procedure involves\
    \ using a\n   new source port, the ID of the packet MAY change.  If the ID changes,\n\
    \   any security attributes such as Message-Authenticator MUST be\n   recalculated.\n\
    \   If a TCP connection is broken or closed, any cached RADIUS response\n   packets\
    \ ([RFC5080], Section 2.2.2) associated with that connection\n   MUST be discarded.\
    \  A RADIUS server SHOULD stop the processing of any\n   requests associated with\
    \ that TCP connection.  No response to these\n   requests can be sent over the\
    \ TCP connection, so any further\n   processing is pointless.  This requirement\
    \ applies not only to RADIUS\n   servers, but also to proxies.  When a client's\
    \ connection to a proxy\n   server is closed, there may be responses from a home\
    \ server that were\n   supposed to be sent by the proxy back over that connection\
    \ to the\n   client.  Since the client connection is closed, those responses from\n\
    \   the home server to the proxy server SHOULD be silently discarded by\n   the\
    \ proxy.\n   Despite the above discussion, RADIUS servers SHOULD still perform\n\
    \   duplicate detection on received packets, as described in [RFC5080],\n   Section\
    \ 2.2.2.  This detection can prevent duplicate processing of\n   packets from\
    \ non-conformant clients.\n   RADIUS packets SHOULD NOT be retransmitted to the\
    \ same destination IP\n   and numerical port, but over a different transport protocol.\
    \  There\n   is no guarantee in RADIUS that the two ports are in any way related.\n\
    \   This requirement does not, however, forbid the practice of putting\n   multiple\
    \ servers into a failover or load-balancing pool.  In that\n   situation, RADIUS\
    \ request MAY be retransmitted to another server that\n   is known to be part\
    \ of the same pool.\n"
- title: 2.6.2.  Head of Line Blocking
  contents:
  - "2.6.2.  Head of Line Blocking\n   When using UDP as a transport for RADIUS, there\
    \ is no ordering of\n   packets.  If a packet sent by a client is lost, that loss\
    \ has no\n   effect on subsequent packets sent by that client.\n   Unlike UDP,\
    \ TCP is subject to issues related to Head of Line (HoL)\n   blocking.  This occurs\
    \ when a TCP segment is lost and a subsequent\n   TCP segment arrives out of order.\
    \  While the RADIUS server can\n   process RADIUS packets out of order, the semantics\
    \ of TCP makes this\n   impossible.  This limitation can lower the maximum packet\
    \ processing\n   rate of RADIUS/TCP.\n"
- title: 2.6.3.  Shared Secrets
  contents:
  - "2.6.3.  Shared Secrets\n   The use of TLS transport does not change the calculation\
    \ of security-\n   related fields (such as the Response-Authenticator) in RADIUS\n\
    \   [RFC2865] or RADIUS Dynamic Authorization [RFC5176].  Calculation of\n   attributes\
    \ such as User-Password [RFC2865] or Message-Authenticator\n   [RFC3579] also\
    \ does not change.\n   Clients and servers MUST be able to store and manage shared\
    \ secrets\n   based on the key described above, at the start of this section (i.e.,\n\
    \   IP address, port, transport protocol).\n"
- title: 2.6.4.  Malformed Packets and Unknown Clients
  contents:
  - "2.6.4.  Malformed Packets and Unknown Clients\n   The RADIUS specifications ([RFC2865],\
    \ and many others) say that an\n   implementation should \"silently discard\"\
    \ a packet in a number of\n   circumstances.  This action has no further consequences\
    \ for UDP\n   transport, as the \"next\" packet is completely independent of the\n\
    \   previous one.\n   When TCP is used as a transport, decoding the \"next\" packet\
    \ on a\n   connection depends on the proper decoding of the previous packet. \
    \ As\n   a result, the behavior with respect to discarded packets has to\n   change.\n\
    \   Implementations of this specification SHOULD treat the \"silently\n   discard\"\
    \ texts referenced above as \"silently discard and close the\n   connection\"\
    .  That is, the TCP connection MUST be closed if any of\n   the following circumstances\
    \ are seen:\n      *  Connection from an unknown client\n      *  Packet where\
    \ the RADIUS \"Length\" field is less than the minimum\n         RADIUS packet\
    \ length\n      *  Packet where the RADIUS \"Length\" field is more than the maximum\n\
    \         RADIUS packet length\n      *  Packet that has an Attribute \"Length\"\
    \ field has value of zero\n         or one (0 or 1)\n      *  Packet where the\
    \ attributes do not exactly fill the packet\n      *  Packet where the Request\
    \ Authenticator fails validation (where\n         validation is required)\n  \
    \    *  Packet where the Response Authenticator fails validation (where\n    \
    \     validation is required)\n      *  Packet where the Message-Authenticator\
    \ attribute fails\n         validation (when it occurs in a packet)\n   After\
    \ applying the above rules, there are still two situations where\n   the previous\
    \ specifications allow a packet to be \"silently discarded\"\n   upon receipt:\n\
    \      *  Packets with an invalid code field\n      *  Response packets that do\
    \ not match any outstanding request\n   In these situations, the TCP connections\
    \ MAY remain open, or they MAY\n   be closed, as an implementation choice.  However,\
    \ the invalid packet\n   MUST be silently discarded.\n   These requirements reduce\
    \ the possibility for a misbehaving client or\n   server to wreak havoc on the\
    \ network.\n"
- title: 2.6.5.  Limitations of the ID Field
  contents:
  - "2.6.5.  Limitations of the ID Field\n   The RADIUS ID field is one octet in size.\
    \  As a result, any one TCP\n   connection can have only 256 \"in flight\" RADIUS\
    \ packets at a time.\n   If more than 256 simultaneous \"in flight\" packets are\
    \ required,\n   additional TCP connections will need to be opened.  This limitation\n\
    \   is also noted in [RFC3539], Section 2.4.\n   An additional limit is the requirement\
    \ to send a Status-Server packet\n   over the same TCP connection as is used for\
    \ normal requests.  As\n   noted in [RFC5997], the response to a Status-Server\
    \ packet is either\n   an Access-Accept or an Accounting-Response.  If all IDs\
    \ were\n   allocated to normal requests, then there would be no free ID to use\n\
    \   for the Status-Server packet, and it could not be sent over the\n   connection.\n\
    \   Implementations SHOULD reserve ID zero (0) on each TCP connection for\n  \
    \ Status-Server packets.  This value was picked arbitrarily, as there\n   is no\
    \ reason to choose any one value over another for this use.\n   Implementors may\
    \ be tempted to extend RADIUS to permit more than 256\n   outstanding packets\
    \ on one connection.  However, doing so is a\n   violation of a fundamental part\
    \ of the protocol and MUST NOT be done.\n   Making that extension here is outside\
    \ of the scope of this\n   specification.\n"
- title: 2.6.6.  EAP Sessions
  contents:
  - "2.6.6.  EAP Sessions\n   When RADIUS clients send EAP requests using RADIUS/TCP,\
    \ they SHOULD\n   choose the same TCP connection for all packets related to one\
    \ EAP\n   session.  This practice ensures that EAP packets are transmitted in\n\
    \   order, and that problems with any one TCP connection affect the\n   minimum\
    \ number of EAP sessions.\n   A simple method that may work in many situations\
    \ is to hash the\n   contents of the Calling-Station-Id attribute, which normally\
    \ contains\n   the Media Access Control (MAC) address.  The output of that hash\
    \ can\n   be used to select a particular TCP connection.\n   However, EAP packets\
    \ for one EAP session can still be transported\n   from client to server over\
    \ multiple paths.  Therefore, when a server\n   receives a RADIUS request containing\
    \ an EAP request, it MUST be\n   processed without considering the transport protocol.\
    \  For TCP\n   transport, it MUST be processed without considering the source\
    \ port.\n   The algorithm suggested in [RFC5080], Section 2.1.1 SHOULD be used\
    \ to\n   track EAP sessions, as it is independent of the source port and\n   transport\
    \ protocol.\n   The retransmission requirements of Section 2.6.1, above, MUST\
    \ be\n   applied to RADIUS-encapsulated EAP packets.  That is, EAP\n   retransmissions\
    \ MUST NOT result in retransmissions of RADIUS packets\n   over a particular TCP\
    \ connection.  EAP retransmissions MAY result in\n   retransmission of RADIUS\
    \ packets over a different TCP connection, but\n   only when the previous TCP\
    \ connection is marked DOWN.\n"
- title: 2.6.7.  TCP Applications Are Not UDP Applications
  contents:
  - "2.6.7.  TCP Applications Are Not UDP Applications\n   Implementors should be\
    \ aware that programming a robust TCP\n   application can be very different from\
    \ programming a robust UDP\n   application.  It is RECOMMENDED that implementors\
    \ of this\n   specification familiarize themselves with TCP application programming\n\
    \   concepts.\n   Clients and servers SHOULD implement configurable connection\
    \ limits.\n   Clients and servers SHOULD implement configurable limits on\n  \
    \   connection lifetime and idle timeouts.  Clients and servers SHOULD\n   implement\
    \ configurable rate limiting on new connections.  Allowing an\n   unbounded number\
    \ or rate of TCP connections may result in resource\n   exhaustion.\n   Further\
    \ discussion of implementation issues is outside of the scope\n   of this document.\n"
- title: 3.  Diameter Considerations
  contents:
  - "3.  Diameter Considerations\n   This document defines TCP as a transport layer\
    \ for RADIUS.  It\n   defines no new RADIUS attributes or codes.  The only interaction\
    \ with\n   Diameter is in a RADIUS-to-Diameter, or in a Diameter-to-RADIUS\n \
    \  gateway.  The RADIUS side of such a gateway MAY implement RADIUS/TCP,\n   but\
    \ this change has no effect on Diameter.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   As the RADIUS packet format, signing, and client\
    \ verification are\n   unchanged from prior specifications, all of the security\
    \ issues\n   outlined in previous specifications for RADIUS/UDP are also\n   applicable\
    \ here.\n   As noted above, clients and servers SHOULD support configurable\n\
    \   connection limits.  Allowing an unlimited number of connections may\n   result\
    \ in resource exhaustion.\n   Implementors should consult [RFC6614] for issues\
    \ related to the\n   security of RADIUS/TLS, and [RFC5246] for issues related\
    \ to the\n   security of the TLS protocol.\n   Since \"bare\" TCP does not provide\
    \ for confidentiality or enable\n   negotiation of credible ciphersuites, its\
    \ use is not appropriate for\n   inter-server communications where strong security\
    \ is required.  As a\n   result, \"bare\" TCP transport MUST NOT be used without\
    \ TLS, IPsec, or\n   another secure upper layer.\n   There are no (at this time)\
    \ other known security issues for RADIUS-\n   over-TCP transport.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2865]    Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n\
    \                \"Remote Authentication Dial In User Service (RADIUS)\",\n  \
    \              RFC 2865, June 2000.\n   [RFC3539]    Aboba, B. and J. Wood, \"\
    Authentication, Authorization\n                and Accounting (AAA) Transport\
    \ Profile\", RFC 3539, June\n                2003.\n   [RFC5997]    DeKok, A.,\
    \ \"Use of Status-Server Packets in the Remote\n                Authentication\
    \ Dial In User Service (RADIUS) Protocol\",\n                RFC 5997, August\
    \ 2010.\n   [RFC6614]    Winter, S., McCauley, M., Venaas, S., and K. Wierenga,\n\
    \                \"Transport Layer Security (TLS) Encryption for RADIUS\",\n \
    \               RFC 6614, May 2012.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [RFC2866]    Rigney, C., \"RADIUS Accounting\"\
    , RFC 2866, June 2000.\n   [RFC3579]    Aboba, B. and P. Calhoun, \"RADIUS (Remote\
    \ Authentication\n                Dial In User Service) Support For Extensible\n\
    \                Authentication Protocol (EAP)\", RFC 3579, September\n      \
    \          2003.\n   [RFC4301]    Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                Internet Protocol\", RFC 4301, December 2005.\n   [RFC4668]\
    \    Nelson, D., \"RADIUS Authentication Client MIB for IPv6\",\n            \
    \    RFC 4668, August 2006.\n   [RFC4669]    Nelson, D., \"RADIUS Authentication\
    \ Server MIB for IPv6\",\n                RFC 4669, August 2006.\n   [RFC4670]\
    \    Nelson, D., \"RADIUS Accounting Client MIB for IPv6\", RFC\n            \
    \    4670, August 2006.\n   [RFC4671]    Nelson, D., \"RADIUS Accounting Server\
    \ MIB for IPv6\", RFC\n                4671, August 2006.\n   [RFC4672]    De\
    \ Cnodder, S., Jonnala, N., and M. Chiba, \"RADIUS\n                Dynamic Authorization\
    \ Client MIB\", RFC 4672, September\n                2006.\n   [RFC4673]    De\
    \ Cnodder, S., Jonnala, N., and M. Chiba, \"RADIUS\n                Dynamic Authorization\
    \ Server MIB\", RFC 4673, September\n                2006.\n   [RFC5080]    Nelson,\
    \ D. and A. DeKok, \"Common Remote Authentication\n                Dial In User\
    \ Service (RADIUS) Implementation Issues and\n                Suggested Fixes\"\
    , RFC 5080, December 2007.\n   [RFC5176]    Chiba, M., Dommety, G., Eklund, M.,\
    \ Mitton, D., and B.\n                Aboba, \"Dynamic Authorization Extensions\
    \ to Remote\n                Authentication Dial In User Service (RADIUS)\", RFC\
    \ 5176,\n                January 2008.\n   [RFC5216]    Simon, D., Aboba, B.,\
    \ and R. Hurst, \"The EAP-TLS\n                Authentication Protocol\", RFC\
    \ 5216, March 2008.\n   [RFC5246]    Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer\n                Security (TLS) Protocol Version 1.2\", RFC 5246, August\n\
    \                2008.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Alan DeKok\n   The FreeRADIUS Server Project\n   http://freeradius.org/\n\
    \   EMail: aland@freeradius.org\n"
