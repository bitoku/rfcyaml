- title: __initial_text__
  contents:
  - '       Multiple Dialog Usages in the Session Initiation Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Several methods in the Session Initiation Protocol (SIP) can create\n\
    \   an association between endpoints known as a dialog.  Some of these\n   methods\
    \ can also create a different, but related, association within\n   an existing\
    \ dialog.  These multiple associations, or dialog usages,\n   require carefully\
    \ coordinated processing as they have independent\n   life-cycles, but share common\
    \ dialog state.  Processing multiple\n   dialog usages correctly is not completely\
    \ understood.  What is\n   understood is difficult to implement.\n   This memo\
    \ argues that multiple dialog usages should be avoided.  It\n   discusses alternatives\
    \ to their use and clarifies essential behavior\n   for elements that cannot currently\
    \ avoid them.\n   This is an informative document and makes no normative statements\
    \ of\n   any kind.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Overview . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   3.  Examples of Multiple Usages  . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Transfer . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.2.  Reciprocal Subscription  . . . . . . . . . . . . . . .\
    \ . .  6\n   4.  Usage Creation and Destruction . . . . . . . . . . . . . . .\
    \ .  9\n     4.1.  Invite Usages  . . . . . . . . . . . . . . . . . . . . . .\
    \  9\n     4.2.  Subscribe usages . . . . . . . . . . . . . . . . . . . . .  9\n\
    \   5.  Proper Handling of Multiple Usages . . . . . . . . . . . . . .  9\n  \
    \   5.1.  A Survey of the Effect of Failure Responses on Usages\n           and\
    \ Dialogs  . . . . . . . . . . . . . . . . . . . . . . .  9\n     5.2.  Transaction\
    \ Timeouts . . . . . . . . . . . . . . . . . . . 15\n     5.3.  Matching Requests\
    \ to Usages  . . . . . . . . . . . . . . . 16\n     5.4.  Target Refresh Requests\
    \  . . . . . . . . . . . . . . . . . 17\n     5.5.  Refreshing and Terminating\
    \ Usages  . . . . . . . . . . . . 17\n     5.6.  Refusing New Usages  . . . .\
    \ . . . . . . . . . . . . . . . 18\n     5.7.  Replacing Usages . . . . . . .\
    \ . . . . . . . . . . . . . . 18\n   6.  Avoiding Multiple Usages . . . . . .\
    \ . . . . . . . . . . . . . 18\n   7.  Security Considerations  . . . . . . .\
    \ . . . . . . . . . . . . 23\n   8.  Conclusion . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 24\n   9.  Acknowledgments  . . . . . . . . . . . . .\
    \ . . . . . . . . . . 24\n   10. Informative References . . . . . . . . . . .\
    \ . . . . . . . . . 24\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   This is an informative document.  It makes no normative statements\
    \ of\n   any kind.  This document refines the concept of a dialog usage in the\n\
    \   Session Initiation Protocol (SIP [1]), and discusses what led to its\n   existence.\
    \  It explores ambiguity associated with processing multiple\n   dialog usages\
    \ that share a dialog.  In particular, it surveys the\n   effect of SIP failure\
    \ responses on transaction, dialog usage, and\n   dialog state.  This document\
    \ will help the implementer understand\n   what is required to process multiple\
    \ dialog usages correctly, and\n   will provide information for future standards-track\
    \ work that will\n   clarify RFC 3261 and other related documents.  Finally, the\
    \ document\n   explores single-usage dialog alternatives (using SIP extensions)\
    \ to\n   multiple dialog usages.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   Several methods in SIP can establish a dialog.  When they\
    \ do so, they\n   also establish an association between the endpoints within that\n\
    \   dialog.  This association has been known for some time as a \"dialog\n   usage\"\
    \ in the developer community.  A dialog initiated with an INVITE\n   request has\
    \ an invite usage.  A dialog initiated with a SUBSCRIBE\n   request has a subscribe\
    \ usage.  A dialog initiated with a REFER\n   request has a subscribe usage.\n\
    \   Dialogs with multiple usages arise when a usage-creating action\n   occurs\
    \ inside an existing dialog.  Such actions include accepting a\n   REFER or SUBSCRIBE\
    \ issued inside a dialog established with an INVITE\n   request.  Multiple REFERs\
    \ within a dialog create multiple\n   subscriptions, each of which is a new dialog\
    \ usage sharing common\n   dialog state.  (Note that any REFER issued utilizing\
    \ the\n   subscription-suppression mechanism specified in [2] creates no new\n\
    \   usage.)  Similarly, an endpoint in a dialog established with an\n   INVITE\
    \ might subscribe to its peer's Key Press Markup Language (KPML)\n   [3] and later\
    \ issue a REFER, resulting in three dialog usages sharing\n   common dialog state.\n\
    \   The common state in the dialog shared by any usages is exactly:\n   o  the\
    \ Call-ID\n   o  the local Tag\n   o  the remote Tag\n   o  the local CSeq\n \
    \  o  the remote CSeq\n   o  the Route-set\n   o  the local contact\n   o  the\
    \ remote target\n   o  the secure flag\n   Usages have state that is not shared\
    \ in the dialog.  For example, a\n   subscription has a duration, along with other\
    \ usage-specific state.\n   Multiple subscriptions in the same dialog each have\
    \ their own\n   duration.\n   A dialog comes into existence with the creation\
    \ of the first usage,\n   and continues to exist until the last usage is terminated\
    \ (reference\n   counting).  Unfortunately, many of the usage management aspects\
    \ of\n   SIP, such as authentication, were originally designed with the\n   implicit\
    \ assumption that there was one usage per dialog.  The\n   resulting mechanisms\
    \ have mixed effects, some influencing the usage,\n   and some influencing the\
    \ entire dialog.\n   The current specifications define two usages, invite and\
    \ subscribe.\n   A dialog can share up to one invite usage and arbitrarily many\n\
    \   subscribe usages.\n   Because RFC 3261 [1] states that user-agents should\
    \ reuse Call-ID and\n   increment CSeq across a series of registration requests\
    \ (and that to-\n   tags appear in register responses in some of the examples),\
    \ some\n   implementations have treated REGISTER as if it were in a dialog.\n\
    \   However, RFC 3261 explicitly calls out that REGISTER does not create\n   a\
    \ dialog.  A series of REGISTER requests does not create any usage or\n   dialog.\
    \  Similarly, PUBLISH [4] does not create any usage or dialog.\n"
- title: 3.  Examples of Multiple Usages
  contents:
  - '3.  Examples of Multiple Usages

    '
- title: 3.1.  Transfer
  contents:
  - "3.1.  Transfer\n   In Figure 1, Alice transfers a call she received from Bob\
    \ to Carol.\n   A dialog (and an invite dialog usage) between Alice and Bob comes\n\
    \   into being with the 200 OK labeled F1.  A second usage (a\n   subscription\
    \ to event refer) comes into being with the NOTIFY labeled\n   F2.  This second\
    \ usage ends when the subscription is terminated by\n   the NOTIFY transaction\
    \ labeled F3.  The dialog still has one usage\n   (the invite usage), which lasts\
    \ until the BYE transaction labeled F4.\n   At this point, the dialog has no remaining\
    \ usages, so it ceases to\n   exist.  Details of each of these messages are shown\
    \ in Figure 2.\n                                Alice              Bob       \
    \  Carol\n                                  |    INVITE       |            |\n\
    \                                  |<----------------|            |\n    Dialog\
    \ 1  Usage 1             |    200 OK (F1)  |            |\n    -start-   -start-\
    \ ----------->|---------------->|            |\n       |         |           \
    \     |    ACK          |            |\n       |         |                |<----------------|\
    \            |\n       |         |                | reINVITE/200/ACK|        \
    \    |\n       |         |                |   (hold)        |            |\n \
    \      |         |                |---------------->|            |\n       | \
    \        |                |   REFER         |            |\n       |         |\
    \     Dialog 1   |---------------->|            |\n       |         |     Usage\
    \ 2    |   NOTIFY (F2)   |            |\n       |         |     -start- -->|<----------------|\
    \ INVITE     |\n       |         |        |       |   200 NOTIFY    |----------->|\n\
    \       |         |        |       |---------------->| 200 OK     |\n       |\
    \         |        |       |   200 REFER     |<-----------|\n       |        \
    \ |        |       |<----------------| ACK        |\n       |         |      \
    \  |       |   NOTIFY (F3)   |----------->|\n       |         |        |     \
    \  |<----------------|            |\n       |         |        |       |   200\
    \           |     .      |\n       |         |      -end-  -->|---------------->|\
    \     .      |\n       |         |                |   BYE (F4)      |  Dialog\
    \ 2  |\n       |         |                |<----------------|  proceeds  |\n \
    \      |         |                |   200           |     .      |\n     -end-\
    \     -end- ------------>|---------------->|     .      |\n                  \
    \               Figure 1\n     Message Details (abridged to show only dialog or\
    \ usage details)\n     F1\n       SIP/2.0 200 OK\n       Call-ID: dialog1@bob.example.com\n\
    \       CSeq: 100 INVITE\n       To: <sip:Alice@alice.example.com>;tag=alicetag1\n\
    \       From: <sip:Bob@bob.example.com>;tag=bobtag1\n       Contact: <sip:aliceinstance@alice.example.com>\n\
    \     F2\n       NOTIFY sip:aliceinstance@alice.example.com SIP/2.0\n       Event:\
    \ refer\n       Call-ID: dialog1@bob.example.com\n       CSeq: 101 NOTIFY\n  \
    \     To: <sip:Alice@alice.example.com>;tag=alicetag1\n       From: <sip:Bob@bob.example.com>;tag=bobtag1\n\
    \       Contact: <sip:bobinstance@bob.example.com>\n     F3\n       NOTIFY sip:aliceinstance@alice.example.com\
    \ SIP/2.0\n       Event: refer\n       Subscription-State: terminated;reason=noresource\n\
    \       Call-ID: dialog1@bob.example.com\n       CSeq: 102 NOTIFY\n       To:\
    \ <sip:Alice@alice.example.com>;tag=alicetag1\n       From: <sip:Bob@bob.example.com>;tag=bobtag1\n\
    \       Contact: <sip:bobinstance@bob.example.com>\n       Content-Type: message/sipfrag\n\
    \       SIP/2.0 200 OK\n     F4\n       BYE sip:aliceinstance@alice.example.com\
    \ SIP/2.0\n       Call-ID: dialog1@bob.example.com\n       CSeq: 103 BYE\n   \
    \    To: <sip:Alice@alice.example.com>;tag=alicetag1\n       From: <sip:Bob@bob.example.com>;tag=bobtag1\n\
    \       Contact: <sip:bobinstance@bob.example.com>\n                         \
    \        Figure 2\n"
- title: 3.2.  Reciprocal Subscription
  contents:
  - "3.2.  Reciprocal Subscription\n   In Figure 3, Alice subscribes to Bob's presence.\
    \  For simplicity,\n   assume Bob and Alice are both serving their presence from\
    \ their\n   endpoints instead of a presence server.  To focus on the essential\n\
    \   points, the figure leaves out any rendezvous signaling through which\n   Alice\
    \ discovers Bob's endpoint.\n   Bob is interested in Alice's presence too, so\
    \ he subscribes to Alice\n   (in most deployed presence/IM systems, people watch\
    \ each other).  He\n   decides to skip the rendezvous step since he's already\
    \ in a dialog\n   with Alice, and sends his SUBSCRIBE inside that dialog (a few\
    \ early\n   SIMPLE clients behaved exactly this way).\n   The dialog and its first\
    \ usage comes into being at F1, which\n   establishes Alice's subscription to\
    \ Bob.  Its second usage begins at\n   F2, which establishes Bob's subscription\
    \ to Alice.  These two\n   subscriptions are independent - they have distinct\
    \ and different\n   expirations, but they share all the dialog state.\n   The\
    \ first usage ends when Alice decides to unsubscribe at F3.  Bob's\n   subscription\
    \ to Alice, and thus the dialog, continues to exist.\n   Alice's UA must maintain\
    \ this dialog state even though the\n   subscription that caused it to exist in\
    \ the first place is now over.\n   The second usage ends when Alice decides to\
    \ terminate Bob's\n   subscription at F4 (she's probably going to reject any attempt\
    \ on\n   Bob's part to resubscribe until she's ready to subscribe to Bob\n   again).\
    \  Since this was the last usage, the dialog also terminates.\n   Details of these\
    \ messages are shown in Figure 4.\n                               Alice      \
    \           Bob\n                                 |                    |\n   \
    \                              | SUBSCRIBE          |\n                      \
    \           |------------------->|\n    Dialog    Usage 1            | NOTIFY\
    \ (F1)        |\n    -start-   -start-  --------->|<-------------------|\n   \
    \    |         |               | 200 SUBSCRIBE      |\n       |         |    \
    \           |<-------------------|\n       |         |               | 200 NOTIFY\
    \         |\n       |         |               |------------------->|\n       |\
    \         |               | SUBSCRIBE          |\n       |         |         \
    \      |<-------------------|\n       |         |    Usage 2    | NOTIFY (F2)\
    \        |\n       |         |    -start- -->|------------------->|\n       |\
    \         |       |       | 200 SUBSCRIBE\n       |         |       |       |------------------->|\n\
    \       |         |       |       | 200 NOTIFY         |\n       |         | \
    \      |       |<-------------------|\n       |         |       |       |    \
    \     :          |\n       |         |       |       |         :          |\n\
    \       |         |       |       | (un)SUBSCRIBE (F3) |\n       |         | \
    \      |       |------------------->|\n       |         |       |       | 200\
    \                |\n       |         |       |       |<-------------------|\n\
    \       |         |       |       | NOTIFY             |\n       |         | \
    \      |       |<-------------------|\n       |         |       |       | 200\
    \                |\n       |       -end- ----------->|------------------->|\n\
    \       |                 |       |         :          |\n       |           \
    \      |       |         :          |\n       |                 |       | NOTIFY\
    \        (F4) |\n       |                 |       | (Terminated)       |\n   \
    \    |                 |       |------------------->|\n       |              \
    \   |       | 200                |\n     -end-             -end-  -->|<-------------------|\n\
    \                                 |                    |\n                   \
    \              Figure 3\n     Message Details (abridged to show only dialog or\
    \ usage details)\n     F1\n       NOTIFY sip:aliceinstance@alice.example.com SIP/2.0\n\
    \       Event: presence\n       Subscription-State: active;expires=600\n     \
    \  Call-ID: alicecallid1@alice.example.com\n       From: <sip:Bob@bob.example.com>;tag=bobtag2\n\
    \       To: <sip:Alice@alice.example.com>;tag=alicetag2\n       CSeq: 100 NOTIFY\n\
    \       Contact: <sip:bobinstance@bob.example.com>\n     F2\n       NOTIFY sip:bobinstance@bob.example.com\
    \ SIP/2.0\n       Event: presence\n       Subscription-State: active;expires=1200\n\
    \       Call-ID: alicecallid1@alice.example.com\n       To: <sip:Bob@bob.example.com>;tag=bobtag2\n\
    \       From: <sip:Alice@alice.example.com>;tag=alicetag2\n       CSeq: 500 NOTIFY\n\
    \       Contact: <sip:aliceinstance@alice.example.com>\n     F3\n       SUBSCRIBE\
    \ sip:bobinstance@bob.example.com SIP/2.0\n       Event: presence\n       Expires:\
    \ 0\n       Call-ID: alicecallid1@alice.example.com\n       To: <sip:Bob@bob.example.com>;tag=bobtag2\n\
    \       From: <sip:Alice@alice.example.com>;tag=alicetag2\n       CSeq: 501 SUBSCRIBE\n\
    \       Contact: <sip:aliceinstance@alice.example.com>\n     F4\n       NOTIFY\
    \ sip:bobinstance@bob.example.com SIP/2.0\n       Event: presence\n       Subscription-State:\
    \ terminated;reason=deactivated\n       Call-ID: alicecallid1@alice.example.com\n\
    \       To: <sip:Bob@bob.example.com>;tag=bobtag2\n       From: <sip:Alice@alice.example.com>;tag=alicetag2\n\
    \       CSeq: 502 NOTIFY\n       Contact: <sip:aliceinstance@alice.example.com>\n\
    \                                 Figure 4\n"
- title: 4.  Usage Creation and Destruction
  contents:
  - "4.  Usage Creation and Destruction\n   Dialogs come into existence along with\
    \ their first usage.  Dialogs\n   terminate when their last usage is destroyed.\
    \  The messages that\n   create and destroy usages vary per usage.  This section\
    \ provides a\n   high-level categorization of those messages.  The section does\
    \ not\n   attempt to explore the REGISTER pseudo-dialog.\n"
- title: 4.1.  Invite Usages
  contents:
  - "4.1.  Invite Usages\n   Created by:  non-100 provisional responses to INVITE;\
    \ 200 response to\n      INVITE\n   Destroyed by:  200 responses to BYE; certain\
    \ failure responses to\n      INVITE, UPDATE, PRACK, INFO, or BYE; anything that\
    \ destroys a\n      dialog and all its usages\n"
- title: 4.2.  Subscribe usages
  contents:
  - "4.2.  Subscribe usages\n   Created by:  200 class responses to SUBSCRIBE; 200\
    \ class responses to\n      REFER; NOTIFY requests\n   Destroyed by:  200 class\
    \ responses to NOTIFY-terminated; NOTIFY or\n      refresh-SUBSCRIBE request timeout;\
    \ certain failure responses to\n      NOTIFY or SUBSCRIBE; expiration without\
    \ refresh if network issues\n      prevent the terminal NOTIFY from arriving;\
    \ anything that destroys\n      a dialog and all its usages\n"
- title: 5.  Proper Handling of Multiple Usages
  contents:
  - "5.  Proper Handling of Multiple Usages\n   The examples in Section 3 show straightforward\
    \ cases where it is\n   fairly obvious when the dialog begins and ends.  Unfortunately,\
    \ there\n   are many scenarios where such clarity is not present.  For instance,\n\
    \   in Figure 1, what would it mean if the response to the NOTIFY (F2)\n   were\
    \ a 481?  Does that simply terminate the refer subscription, or\n   does it destroy\
    \ the entire dialog?  This section explores the problem\n   areas with multiple\
    \ usages that have been identified to date.\n"
- title: 5.1.  A Survey of the Effect of Failure Responses on Usages and Dialogs
  contents:
  - "5.1.  A Survey of the Effect of Failure Responses on Usages and Dialogs\n   For\
    \ this survey, consider a subscribe usage inside a dialog\n   established with\
    \ an invite usage.  Unless stated otherwise, we'll\n   discuss the effect on each\
    \ usage and the dialog when a client issuing\n   a NOTIFY inside the subscribe\
    \ usage receives a failure response (such\n   as a transferee issuing a NOTIFY\
    \ to event refer).  Further, unless\n   otherwise stated, the conclusions apply\
    \ to arbitrary multiple usages.\n   This survey is written from the perspective\
    \ of a client receiving the\n   error response.  The effect on dialogs and usages\
    \ at the server\n   issuing the response is the same.\n   3xx responses:  Redirection\
    \ mid-dialog is not well understood in SIP,\n      but whatever effect it has\
    \ impacts the entire dialog and all of\n      its usages equally.  In our example\
    \ scenario, both the\n      subscription and the invite usage would be redirected\
    \ by this\n      single response.\n   For the failure responses with code 400\
    \ and greater, there are three\n   common ways the failure can affect the transaction,\
    \ usage, and dialog\n   state.\n   Transaction Only  The error affects only the\
    \ transaction, not the\n      usage or dialog the transaction occurs in (beyond\
    \ affecting the\n      local CSeq).  Any other usage of the dialog is unaffected.\
    \  The\n      error is a complaint about this transaction, not the usage or\n\
    \      dialog that the transaction occurs in.\n   Destroys Usage  The error destroys\
    \ the usage, but not the dialog.\n      Any other usages sharing this dialog are\
    \ not affected.\n   Destroys Dialog  The error destroys the dialog and all usages\
    \ sharing\n      it.\n   Table 1 and Table 2 display how the various codes affect\
    \ transaction,\n   usage, or dialog state.  Response code specific comments or\n\
    \   exceptions follow the table.\n        +----------------------+----------------+-----------------+\n\
    \        |   Transaction Only   | Destroys Usage | Destroys Dialog |\n       \
    \ +----------------------+----------------+-----------------+\n        | 400 (or\
    \ unknown 4xx) |    405, 480    |  404, 410, 416  |\n        |  401, 402, 403,\
    \ 406  |    481, 489    |     482, 483    |\n        |   407, 408, 412-415  |\
    \       501      |     484, 485    |\n        |  417, 420, 421, 422  |       \
    \         |     502, 604    |\n        |     423, 428, 429    |              \
    \  |                 |\n        |   436-438, 486, 487  |                |    \
    \             |\n        |  488, 491, 493, 494  |                |           \
    \      |\n        | 500 (or unknown 5xx) |                |                 |\n\
    \        |     503, 504, 505    |                |                 |\n       \
    \ |       513, 580       |                |                 |\n        | 600 (or\
    \ unknown 6xx) |                |                 |\n        |       603, 606\
    \       |                |                 |\n        +----------------------+----------------+-----------------+\n\
    \                                  Table 1\n    +---------+---------------------------------+-------------+-------+\n\
    \    |   Code  | Reason                          |    Impact   | Notes |\n   \
    \ +---------+---------------------------------+-------------+-------+\n    | 400/4xx\
    \ | Bad Request                     | Transaction |       |\n    |   401   | Unauthorized\
    \                    | Transaction |       |\n    |   402   | Payment Required\
    \                | Transaction |  (1)  |\n    |   403   | Forbidden          \
    \             | Transaction |       |\n    |   404   | Not Found             \
    \          |    Dialog   |  (2)  |\n    |   405   | Method Not Allowed       \
    \       |    Usage    |  (3)  |\n    |   406   | Not Acceptable              \
    \    | Transaction |       |\n    |   407   | Proxy Authentication Required  \
    \ | Transaction |       |\n    |   408   | Request Timeout                 | Transaction\
    \ |  (4)  |\n    |   410   | Gone                            |    Dialog   | \
    \ (2)  |\n    |   412   | Conditional Request Failed      | Transaction |    \
    \   |\n    |   413   | Request Entity Too Large        | Transaction |       |\n\
    \    |   414   | Request-URI Too Long            | Transaction |       |\n   \
    \ |   415   | Unsupported Media Type          | Transaction |       |\n    | \
    \  416   | Unsupported URI Scheme          |    Dialog   |  (2)  |\n    |   417\
    \   | Unknown Resource-Priority       | Transaction |       |\n    |   420   |\
    \ Bad Extension                   | Transaction |       |\n    |   421   | Extension\
    \ Required              | Transaction |       |\n    |   422   | Session Interval\
    \ Too Small      | Transaction |  (5)  |\n    |   423   | Interval Too Brief \
    \             | Transaction |       |\n    |   428   | Use Identity Header   \
    \          | Transaction |       |\n    |   429   | Provide Referrer Identity\
    \       | Transaction |  (6)  |\n    |   436   | Bad Identity-Info           \
    \    | Transaction |       |\n    |   437   | Unsupported Certificate        \
    \ | Transaction |       |\n    |   438   | Invalid Identity Header         | Transaction\
    \ |       |\n    |   480   | Temporarily Unavailable         |    Usage    | \
    \ (7)  |\n    |   481   | Call/Transaction Does Not Exist |    Usage    |  (8)\
    \  |\n    |   482   | Loop Detected                   |    Dialog   |  (9)  |\n\
    \    |   483   | Too Many Hops                   |    Dialog   |  (10) |\n   \
    \ |   484   | Address Incomplete              |    Dialog   |  (2)  |\n    | \
    \  485   | Ambiguous                       |    Dialog   |  (2)  |\n    |   486\
    \   | Busy Here                       | Transaction |  (11) |\n    |   487   |\
    \ Request Terminated              | Transaction |       |\n    |   488   | Not\
    \ Acceptable Here             | Transaction |       |\n    |   489   | Bad Event\
    \                       |    Usage    |  (12) |\n    |   491   | Request Pending\
    \                 | Transaction |       |\n    |   493   | Undecipherable    \
    \              | Transaction |       |\n    |   494   | Security Agreement Required\
    \     | Transaction |       |\n    | 500/5xx | Server Internal Error         \
    \  | Transaction |  (13) |\n    |   501   | Not Implemented                 |\
    \    Usage    |  (3)  |\n    |   502   | Bad Gateway                     |   \
    \ Dialog   |  (14) |\n    |   503   | Service Unavailable             | Transaction\
    \ |  (15) |\n    |   504   | Server Time-Out                 | Transaction | \
    \ (16) |\n    |   505   | Version Not Supported           | Transaction |    \
    \   |\n    |   513   | Message Too Large               | Transaction |       |\n\
    \    |   580   | Precondition Failure            | Transaction |       |\n   \
    \ | 600/6xx | Busy Everywhere                 | Transaction |  (17) |\n    | \
    \  603   | Decline                         | Transaction |       |\n    |   604\
    \   | Does Not Exist Anywhere         |    Dialog   |  (2)  |\n    |   606   |\
    \ Not Acceptable                  | Transaction |       |\n    +---------+---------------------------------+-------------+-------+\n\
    \                                  Table 2\n   (1) 402 Payment Required:  This\
    \ is a reserved response code.  If\n      encountered, it should be treated as\
    \ an unrecognized 4xx.\n   (2) 404 Not Found:\n       410 Gone:\n       416 Unsupported\
    \ URI Scheme:\n       484 Address Incomplete:\n       485 Ambiguous:\n       604\
    \ Does Not Exist Anywhere:\n      The Request-URI that is being rejected is the\
    \ remote target set by\n      the Contact provided by the peer.  Getting this\
    \ response means\n      that something has gone fundamentally wrong with the dialog\
    \ state.\n   (3) 405 Method Not Allowed:\n       501 Not Implemented:\n      Either\
    \ of these responses would be aberrant in our example\n      scenario since support\
    \ for the NOTIFY method is required by the\n      usage.  In this case, the UA\
    \ knows the condition is unrecoverable\n      and should stop sending NOTIFYs\
    \ on the usage.  Any refresh\n      subscriptions should be rejected.  In general,\
    \ these errors will\n      affect at most the usage.  If the request was not integral\
    \ to the\n      usage (it used an unknown method, or was an INFO inside an INVITE\n\
    \      usage, for example), only the transaction will be affected.\n   (4) 408\
    \ Request Timeout:  Receiving a 408 will have the same effect\n      on usages\
    \ and dialogs as a real transaction timeout as described\n      in Section 5.2.\n\
    \   (5) 422 Session Interval Too Small:  This response does not make\n      sense\
    \ for any mid-usage request.  If it is received, an element in\n      the path\
    \ of the request is violating protocol, and the recipient\n      should treat\
    \ this as it would an unknown 4xx response.\n   (6) 429 Provide Referrer Identity:\
    \  This response won't be returned\n      to a NOTIFY as in our example scenario,\
    \ but when it is returned to\n      a REFER, it is objecting only to the REFER\
    \ request itself.\n   (7) 480 Temporarily Unavailable:  RFC 3261 is unclear on\
    \ what this\n      response means for mid-usage requests.  Future updates to that\n\
    \      specification are expected to clarify that this response affects\n    \
    \  only the usage in which the request occurs.  No other usages are\n      affected.\
    \  If the response included a Retry-After header field,\n      further requests\
    \ in that usage should not be sent until the\n      indicated time has past. \
    \ Requests in other usages may still be\n      sent at any time.\n   (8) 481 Call/Transaction\
    \ Does Not Exist:  This response indicates\n      that the peer has lost its copy\
    \ of the dialog usage state.  The\n      dialog itself should not be destroyed\
    \ unless this was the last\n      usage.\n      The effects of a 481 on a dialog\
    \ and its usages are the most\n      ambiguous of any final response.  There are\
    \ implementations that\n      have chosen the meaning recommended here, and others\
    \ that destroy\n      the entire dialog without regard to the number of outstanding\n\
    \      usages.  Going forward with this clarification will allow those\n     \
    \ deployed implementations that assumed only the usage was destroyed\n      to\
    \ work with a wider number of implementations.  Existing\n      implementations\
    \ that destroy all other usages in the dialog will\n      continue to function\
    \ as they do now, except that peers following\n      the recommendation will attempt\
    \ to do things with the other usages\n      and this element will return 481s\
    \ for each of them until they are\n      all gone.  However, the necessary clarification\
    \ to RFC 3261 needs\n      to make it very clear that the ability to terminate\
    \ usages\n      independently from the overall dialog using a 481 is not\n   \
    \   justification for designing new applications that count on\n      multiple\
    \ usages in a dialog.\n      The 481 response to a CANCEL request has to be treated\n\
    \      differently.  For CANCEL, a 481 means the UAS can't find a\n      matching\
    \ transaction.  A 481 response to a CANCEL affects only the\n      CANCEL transaction.\
    \  The usage associated with the INVITE is not\n      affected.\n   (9) 482 Loop\
    \ Detected:  This response is aberrant mid-dialog.  It\n      will only occur\
    \ if the Record-Route header field were improperly\n      constructed by the proxies\
    \ involved in setting up the dialog's\n      initial usage, or if a mid-dialog\
    \ request forks and merges (which\n      should never happen).  Future requests\
    \ using this dialog state\n      will also fail.\n         An edge condition exists\
    \ during RFC 3263 failover at the\n         element sending a request, where the\
    \ request effectively forks\n         to multiple destinations from the client.\
    \  Some implementations\n         increase risk entering this edge condition by\
    \ trying the next\n         potential location as determined by RFC 3263 very\
    \ rapidly if\n         the first does not immediately respond.  In any situation\
    \ where\n         a client sends the same request to more than one endpoint, it\n\
    \         must be prepared to receive a response from each branch (and\n     \
    \    should choose a \"best\" response to act on following the same\n        \
    \ guidelines as a forking proxy).  In this particular race\n         condition,\
    \ if multiple branches respond, all but one will most\n         likely return\
    \ a 482 Merged Request.  The client should select\n         the remaining non-482\
    \ response as the \"best\" response.\n   (10) 483 Too Many Hops:  Similar to 482,\
    \ receiving this mid-dialog is\n      aberrant.  Unlike 482, recovery may be possible\
    \ by increasing Max-\n      Forwards (assuming that the requester did something\
    \ strange like\n      using a smaller value for Max-Forwards in mid-dialog requests\
    \ than\n      it used for an initial request).  If the request isn't tried with\n\
    \      an increased Max-Forwards, then the agent should follow the\n      Destroy\
    \ Dialog actions.\n   (11) 486 Busy Here:  This response is nonsensical in our\
    \ example\n      scenario, or in any scenario where this response comes inside\
    \ an\n      established usage.  If it occurs in that context, it should be\n \
    \     treated as an unknown 4xx response.\n   (12) 489 Bad Event:  In our example\
    \ scenario, [5] declares that the\n      subscription usage in which the NOTIFY\
    \ is sent is terminated.\n      This response is only valid in the context of\
    \ SUBSCRIBE and\n      NOTIFY.  UAC behavior for receiving this response to other\
    \ methods\n      is not specified, but treating it as an unknown 4xx is a\n  \
    \    reasonable practice.\n   (13) 500 and 5xx unrecognized responses:  If the\
    \ response contains a\n      Retry-After header field value, the server thinks\
    \ the condition is\n      temporary, and the request can be retried after the\
    \ indicated\n      interval.  If the response does not contain a Retry-After header\n\
    \      field value, the UA may decide to retry after an interval of its\n    \
    \  choosing or attempt to gracefully terminate the usage.  Whether or\n      not\
    \ to terminate other usages depends on the application.  If the\n      UA receives\
    \ a 500 (or unrecognized 5xx) in response to an attempt\n      to gracefully terminate\
    \ this usage, it can treat this usage as\n      terminated.  If this is the last\
    \ usage sharing the dialog, the\n      dialog is also terminated.\n   (14) 502\
    \ Bad Gateway:  This response is aberrant mid-dialog.  It will\n      only occur\
    \ if the Record-Route header field were improperly\n      constructed by the proxies\
    \ involved in setting up the dialog's\n      initial usage.  Future requests using\
    \ this dialog state will also\n      fail.\n   (15) 503 Service Unavailable: \
    \ As per [6], the logic handling\n      locating SIP servers for transactions\
    \ may handle 503 requests\n      (effectively, sequentially forking at the endpoint\
    \ based on DNS\n      results).  If this process does not yield a better response,\
    \ a 503\n      may be returned to the transaction user.  Like a 500 response,\
    \ the\n      error is a complaint about this transaction, not the usage.\n   \
    \   Because this response occurred in the context of an established\n      usage\
    \ (hence an existing dialog), the route-set has already been\n      formed and\
    \ any opportunity to try alternate servers (as\n      recommended in [1]) has\
    \ been exhausted by the RFC3263 logic.\n   (16) 504 Server Time-out:  It is not\
    \ obvious under what circumstances\n      this response would be returned to a\
    \ request in an existing\n      dialog.\n   (17) 600 and 6xx unrecognized responses:\
    \  Unlike 400 Bad Request, a\n      600 response code says something about the\
    \ recipient user, not the\n      request that was made.  This end user is stating\
    \ an unwillingness\n      to communicate.  If the response contains a Retry-After\
    \ header\n      field value, the user is indicating willingness to communicate\n\
    \      later and the request can be retried after the indicated interval.\n  \
    \    This usage, and any other usages sharing the dialog are\n      unaffected.\
    \  If the response does not contain a Retry-After header\n      field value, the\
    \ UA may decide to retry after an interval of its\n      choosing or attempt to\
    \ gracefully terminate the usage.  Whether or\n      not to terminate other usages\
    \ depends on the application.  If the\n      UA receives a 600 (or unrecognized\
    \ 6xx) in response to an attempt\n      to gracefully terminate this usage, it\
    \ can treat this usage as\n      terminated.  If this is the last usage sharing\
    \ the dialog, the\n      dialog is also terminated.\n"
- title: 5.2.  Transaction Timeouts
  contents:
  - "5.2.  Transaction Timeouts\n   [1] states that a UAC should terminate a dialog\
    \ (by sending a BYE) if\n   no response is received for a request sent within\
    \ a dialog.  This\n   recommendation should have been limited to the invite usage\
    \ instead\n   of the whole dialog. [5] states that a timeout for a NOTIFY removes\
    \ a\n   subscription, but a SUBSCRIBE that fails with anything other than a\n\
    \   481 does not.  Given these statements, it is unclear whether a\n   refresh\
    \ SUBSCRIBE issued in a dialog shared with an invite usage\n   destroys either\
    \ usage or the dialog if it times out.\n   Generally, a transaction timeout should\
    \ affect only the usage in\n   which the transaction occurred.  Other uses sharing\
    \ the dialog should\n   not be affected.  In the worst case of timeout due to\
    \ total transport\n   failure, it may require multiple failed messages to remove\
    \ all usages\n   from a dialog (at least one per usage).\n   There are some mid-dialog\
    \ messages that never belong to any usage.\n   If they timeout, they will have\
    \ no effect on the dialog or its\n   usages.\n"
- title: 5.3.  Matching Requests to Usages
  contents:
  - "5.3.  Matching Requests to Usages\n   For many mid-dialog requests, identifying\
    \ the usage they belong to is\n   obvious.  A dialog can have at most one invite\
    \ usage, so any INVITE,\n   UPDATE, PRACK, ACK, CANCEL, BYE, or INFO requests\
    \ belong to it.  The\n   usage (i.e. the particular subscription) SUBSCRIBE, NOTIFY,\
    \ and REFER\n   requests belong to can be determined from the Event header field\
    \ of\n   the request.  REGISTER requests within a (pseudo)-dialog belong to\n\
    \   the registration usage.  (As mentioned before, implementations aren't\n  \
    \ mixing registration usages with other usages, so this document isn't\n   exploring\
    \ the consequences of that bad behavior).\n   According to [1], \"an OPTIONS request\
    \ received within a dialog\n   generates a 200 OK response that is identical to\
    \ one constructed\n   outside a dialog and does not have any impact on that dialog\"\
    .  Thus,\n   OPTIONS does not belong to any usage.  Only those failures discussed\n\
    \   in Section 5.1 and Section 5.2 that destroy entire dialogs will have\n   any\
    \ effect on the usages sharing the dialog with a failed OPTIONS\n   request.\n\
    \   MESSAGE requests are discouraged inside a dialog.  Implementations\n   are\
    \ restricted from creating a usage for the purpose of carrying a\n   sequence\
    \ of MESSAGE requests (though some implementations use it that\n   way, against\
    \ the standard recommendation).  A failed MESSAGE\n   occurring inside an existing\
    \ dialog will have similar effects on the\n   dialog and its usages as a failed\
    \ OPTIONS request.\n   Mid-dialog requests with unknown methods cannot be matched\
    \ with a\n   usage.  Servers will return a failure response (likely a 501).  The\n\
    \   effect on the dialog and its usages at either the client or the\n   server\
    \ should be similar to that of a failed OPTIONS request.\n   These guidelines\
    \ for matching messages to usages (or determining\n   there is no usage) apply\
    \ equally when acting as a UAS, a UAC, or any\n   third party tracking usage and\
    \ dialog state by inspecting all\n   messages between two endpoints.\n"
- title: 5.4.  Target Refresh Requests
  contents:
  - "5.4.  Target Refresh Requests\n   Target refresh requests update the remote target\
    \ of a dialog when\n   they are successfully processed.  The currently defined\
    \ target\n   refresh requests are INVITE, UPDATE, SUBSCRIBE, NOTIFY, and REFER\n\
    \   [7]).\n   The remote target is part of the dialog state.  When a target refresh\n\
    \   request affects it, it affects it for ALL usages sharing that dialog.\n  \
    \ If a subscription and invite usage are sharing a dialog, sending a\n   refresh\
    \ SUBSCRIBE with a different contact will cause reINVITEs from\n   the peer to\
    \ go to that different contact.\n   A UAS will only update the remote target if\
    \ it sends a 200 class\n   response to a target refresh request.  A UAC will only\
    \ update the\n   remote target if it receives a 200 class response to a target\
    \ refresh\n   request.  Again, any update to a dialog's remote target affects\
    \ all\n   usages of that dialog.\n   There is known ambiguity around the effects\
    \ of provisional responses\n   on remote targets that a future specification will\
    \ attempt to\n   clarify.  Furthermore, because the remote target is part of the\n\
    \   dialog state, not any usage state, there is ambiguity in having\n   target\
    \ refresh requests in progress simultaneously on multiple usages\n   in the same\
    \ dialog.  Implementation designers should consider these\n   conditions with\
    \ care.\n"
- title: 5.5.  Refreshing and Terminating Usages
  contents:
  - "5.5.  Refreshing and Terminating Usages\n   Subscription and registration usages\
    \ expire over time and must be\n   refreshed (with a refresh SUBSCRIBE, for example).\
    \  This expiration\n   is usage state, not dialog state.  If several subscriptions\
    \ share a\n   dialog, refreshing one of them has no effect on the expiration of\
    \ the\n   others.\n   Normal termination of a usage has no effect on other usages\
    \ sharing\n   the same dialog.  For instance, terminating a subscription with\
    \ a\n   NOTIFY/Subscription-State: terminated will not terminate an invite\n \
    \  usage sharing its dialog.  Likewise, ending an invite usage with a\n   BYE\
    \ does not terminate any active Event: refer subscriptions\n   established on\
    \ that dialog.\n"
- title: 5.6.  Refusing New Usages
  contents:
  - "5.6.  Refusing New Usages\n   As the survey of the effect of failure responses\
    \ shows, care must be\n   taken when refusing a new usage inside an existing dialog.\
    \  Choosing\n   the wrong response code will terminate the dialog and all of its\n\
    \   usages.  Generally, returning a 603 Decline is the safest way to\n   refuse\
    \ a new usage.\n"
- title: 5.7.  Replacing Usages
  contents:
  - "5.7.  Replacing Usages\n   [8] defines a mechanism through which one usage can\
    \ replace another.\n   It can be used, for example, to associate the two dialogs\
    \ in which a\n   transfer target is involved during an attended transfer.  It\
    \ is\n   written using the term \"dialog\", but its intent was only to affect\n\
    \   the invite usage of the dialog it targets.  Any other usages inside\n   that\
    \ dialog are unaffected.  For some applications, the other usages\n   may no longer\
    \ make sense, and the application may terminate them as\n   well.\n   However,\
    \ the interactions between Replaces and multiple dialog usages\n   have not been\
    \ well explored.  More discussion of this topic is\n   needed.  Implementers should\
    \ avoid this scenario completely.\n"
- title: 6.  Avoiding Multiple Usages
  contents:
  - "6.  Avoiding Multiple Usages\n   Processing multiple usages correctly is not\
    \ completely understood.\n   What is understood is difficult to implement and\
    \ is very likely to\n   lead to interoperability problems.  The best way to avoid\
    \ the trouble\n   that comes with such complexity is to avoid it altogether.\n\
    \   When designing new applications or features that use SIP dialogs, do\n   not\
    \ require endpoints to construct multiple usages to participate in\n   the application\
    \ or use the feature.  When designing endpoints,\n   address the existing multiple\
    \ usage scenarios as best as possible.\n   Outside those scenarios, if a peer\
    \ attempts to create a second usage\n   inside a dialog, refuse it.\n   Unfortunately,\
    \ there are existing applications, like transfer, that\n   currently entail multiple\
    \ usages, so the simple solution of \"don't do\n   it\" will require some transitional\
    \ work.  This section looks at the\n   pressures that led to these existing multiple\
    \ usages and suggests\n   alternatives.\n   When executing a transfer, the transferor\
    \ and transferee currently\n   share an invite usage and a subscription usage\
    \ within the dialog\n   between them.  This is a result of sending the REFER request\
    \ within\n   the dialog established by the invite usage.  Implementations were\
    \ led\n   to this behavior by these primary problems:\n   1.  There was no way\
    \ to ensure that a REFER on a new dialog would\n       reach the particular endpoint\
    \ involved in a transfer.  Many\n       factors, including details of implementations\
    \ and changes in\n       proxy routing between an INVITE and a REFER could cause\
    \ the REFER\n       to be sent to the wrong place.  Sending the REFER down the\n\
    \       existing dialog ensured it got to the same endpoint with which\n     \
    \  the dialog was established.\n   2.  It was unclear how to associate an existing\
    \ invite usage with a\n       REFER arriving on a new dialog, where it was completely\
    \ obvious\n       what the association was when the REFER came on the invite\n\
    \       usage's dialog.\n   3.  There were concerns with authorizing out-of-dialog\
    \ REFERs.  The\n       authorization policy for REFER in most implementations\
    \ piggybacks\n       on the authorization policy for INVITE (which is, in most\
    \ cases,\n       based simply on \"I placed or answered this call\").\n   Globally\
    \ Routable User Agent (UA) URIs (GRUUs) [9] have been defined\n   specifically\
    \ to address problem 1 by providing a URI that will reach\n   one specific user-agent.\
    \  The Target-Dialog header field [10] was\n   created to address problems 2 and\
    \ 3.  This header field allows a\n   request to indicate the dialog identifiers\
    \ of some other dialog,\n   providing association with the other dialog that can\
    \ be used in an\n   authorization decision.\n   The Join [11] and Replaces [8]\
    \ mechanisms can also be used to address\n   problem 1.  When using this technique,\
    \ a new request is sent outside\n   any dialog with the expectation that it will\
    \ fork to possibly many\n   endpoints, including the one we're interested in.\
    \  This request\n   contains a header field listing the dialog identifiers of\
    \ a dialog in\n   progress.  Only the endpoint holding a dialog matching those\n\
    \   identifiers will accept the request.  The other endpoints the request\n  \
    \ may have forked to will respond with an error.  This mechanism is\n   reasonably\
    \ robust, failing only when the routing logic for out-of-\n   dialog requests\
    \ changes such that the new request does not arrive at\n   the endpoint holding\
    \ the dialog of interest.\n   The reachability aspects of using a GRUU to address\
    \ problem 1 can be\n   combined with the association-with-other-dialogs aspects\
    \ of the Join/\n   Replaces and Target-Dialog mechanisms.  A REFER request sent\
    \ out-of-\n   dialog can be sent towards a GRUU, and identify an existing dialog\
    \ as\n   part of the context the receiver should use.  The Target-Dialog\n   header\
    \ field can be included in the REFER listing the dialog this\n   REFER is associated\
    \ with.  Figure 5 sketches how this could be used\n   to achieve transfer without\
    \ reusing a dialog.  For simplicity, the\n   diagram and message details do not\
    \ show the server at example.com\n   that will be involved in routing the GRUU.\
    \  Refer to [9] for those\n   details.\n   Alice                             Bob\
    \                           Carol\n     |                                |   \
    \                           |\n     | F1 INVITE (Bob's AOR)          |       \
    \                       |\n     |    Call-ID: (call-id one)      |           \
    \                   |\n     |    Contact: (Alice's-GRUU)     |               \
    \               |\n     |------------------------------->|                   \
    \           |\n     | F2 200 OK                      |                       \
    \       |\n     |    To: <>;tag=totag1           |                           \
    \   |\n     |    From: <>;tag=fromtag1       |                              |\n\
    \     |    Call-ID: (call-id one)      |                              |\n    \
    \ |    Contact: (Bob's-GRUU)       |                              |\n     |<-------------------------------|\
    \                              |\n     |    ACK                         |    \
    \                          |\n     |------------------------------->|        \
    \                      |\n     |             :                  |            \
    \                  |\n     |  (Bob places Alice on hold)    |                \
    \              |\n     |             :                  | F3 INVITE (Carol's AOR)\
    \      |\n     |                                |    Call-ID: (call-id two)  \
    \  |\n     |                                |    Contact: (Bob's-GRUU)     |\n\
    \     |                                |----------------------------->|\n    \
    \ |                                | F4 200 OK                    |\n     |  \
    \                              |    To: <>;tag=totag2         |\n     |      \
    \                          |    From: <>;tag=fromtag2     |\n     |          \
    \                      |    Call-ID: (call-id two)    |\n     |              \
    \                  |    Contact: (Carol's-GRUU)   |\n     |                  \
    \              |<-----------------------------|\n     |                      \
    \          |    ACK                       |\n     |                          \
    \      |----------------------------->|\n     |                              \
    \  |            :                 |\n     |                                | \
    \ (Bob places Carol on hold)  |\n     | F5 REFER (Alice's-GRUU)        |     \
    \       :                 |\n     |    Call-ID: (call-id three)    |         \
    \                     |\n     |    Refer-To: (Carol's-GRUU)    |             \
    \                 |\n     |    Target-Dialog: (call-id one,totag1,fromtag1)  \
    \             |\n     |    Contact: (Bob's-GRUU)       |                     \
    \         |\n     |<-------------------------------|                         \
    \     |\n     |    202 Accepted                |                             \
    \ |\n     |------------------------------->|                              |\n\
    \     |    NOTIFY (Bob's-GRUU)         |                              |\n    \
    \ |    Call-ID: (call-id three)    |                              |\n     |------------------------------->|\
    \                              |\n     |    200 OK                      |    \
    \                          |\n     |<-------------------------------|        \
    \                      |\n     |                                |            \
    \                  |\n     |                  F6 INVITE (Carol's-GRUU)       \
    \              |\n     |                     Call-ID: (call-id four)         \
    \          |\n     |                     Contact: (Alice's-GRUU)             \
    \      |\n     |-------------------------------------------------------------->|\n\
    \     |                     200 OK                                    |\n    \
    \ |                     Contact: (Carol's-GRUU)                   |\n     |<--------------------------------------------------------------|\n\
    \     |                     ACK                                       |\n    \
    \ |-------------------------------------------------------------->|\n     |  \
    \                              |                              |\n     | F7 NOTIFY\
    \ (Bob's-GRUU)         |                              |\n     |    Call-ID: (call-id\
    \ three)    |                              |\n     |------------------------------->|\
    \                              |\n     |    200 OK                      |    \
    \                          |\n     |<-------------------------------|        \
    \                      |\n     |    BYE (Alice's-GRUU)          |            \
    \                  |\n     |    Call-ID: (call-id one)      |                \
    \              |\n     |<-------------------------------|   BYE (Carol's-GRUU)\
    \         |\n     |                                |   Call-ID: (call-id two)\
    \     |\n     |    200 OK                      |----------------------------->|\n\
    \     |------------------------------->|   200 OK                     |\n    \
    \ |                                |<-----------------------------|\n     |  \
    \                              |                              |\n            \
    \      Figure 5: Transfer without dialog reuse\n   In message F1, Alice invites\
    \ Bob indicating support for GRUUs (and\n   offering a GRUU for herself):\n  \
    \    Message F1 (abridged, detailing pertinent fields)\n        INVITE sip:bob@example.com\
    \ SIP/2.0\n        Call-ID: 13jfdwer230jsdw@alice.example.com\n        Supported:\
    \ gruu\n        Contact: <sip:alice@example.com;gr=urn:uuid:(Alice's UA's bits)>\n\
    \   Message F2 carries Bob's GRUU to Alice.\n      Message F2 (abridged, detailing\
    \ pertinent fields)\n        SIP/2.0 200 OK\n        Supported: gruu\n       \
    \ To: <sip:bob@example.com>;tag=totag1\n        From: <sip:alice@example.com>;tag=fromtag1\n\
    \        Contact: <sip:bob@example.com;gr=urn:uuid:(Bob's UA's bits)>\n   Bob\
    \ decides to try to transfer Alice to Carol, so he puts Alice on\n   hold and\
    \ sends an INVITE to Carol.  Carol and Bob negotiate GRUU\n   support similar\
    \ to what happened in F1 and F2.\n      Message F3 (abridged, detailing pertinent\
    \ fields)\n        INVITE sip:carol@example.com SIP/2.0\n        Supported: gruu\n\
    \        Call-ID: 23rasdnfoa39i4jnasdf@bob.example.com\n        Contact: <sip:bob@example.com;gr=urn:uuid:(Bob's\
    \ UA's bits)>\n      Message F4 (abridged, detailing pertinent fields)\n     \
    \   SIP/2.0 200 OK\n        Supported: gruu\n        To: <sip:carol@example.com>;tag=totag2\n\
    \        From: <sip:bob@example.com>;tag=fromtag2\n        Call-ID: 23rasdnfoa39i4jnasdf@bob.example.com\n\
    \        Contact: <sip:carol@example.com;gr=urn:uuid:(Carol's UA's bits)>\n  \
    \ After consulting Carol, Bob places her on hold and refers Alice to\n   her using\
    \ message F5.  Notice that the Refer-To URI is Carol's GRUU,\n   and that this\
    \ is on a different Call-ID than message F1.  (The URI in\n   the Refer-To header\
    \ is line-broken for readability in this document;\n   it would not be valid to\
    \ break the URI this way in a real message.)\n      Message F5 (abridged, detailing\
    \ pertinent fields)\n        REFER sip:aanewmr203raswdf@example.com SIP/2.0\n\
    \        Call-ID: 39fa99r0329493asdsf3n@bob.example.com\n        Refer-To: <sip:carol@example.com;g=urn:uid:(Carol's\
    \ UA's bits)\n                   ?Replaces=23rasdnfoa39i4jnasdf@bob.example.com;\n\
    \                    to-tag=totag2;from-tag=fromtag2>\n        Target-Dialog:\
    \ 13jfdwer230jsdw@alice.example.com;\n                       local-tag=fromtag1;remote-tag=totag1\n\
    \        Supported: gruu\n        Contact: <sip:bob@example.com;gr=urn:uuid:(Bob's\
    \ UA's bits)>\n   Alice uses the information in the Target-Dialog header field\
    \ to\n   determine that this REFER is associated with the dialog she already\n\
    \   has in place with Bob.  Alice is now in a position to use the same\n   admission\
    \ policy she used for in-dialog REFERs: \"Do I have a call\n   with this person?\"\
    .  She accepts the REFER, sends Bob the obligatory\n   immediate NOTIFY, and proceeds\
    \ to INVITE Carol with message F6.\n      Message F6 (abridged, detailing pertinent\
    \ fields)\n            sip:carol@example.com;gr=urn:uuid:(Carol's UA's bits)\n\
    \            \\                                                   /\n        \
    \      \\                                                /\n               | \
    \                                             |\n               v            \
    \                                  v\n        INVITE                         \
    \                         SIP/2.0\n        Call-ID: 4zsd9f234jasdfasn3jsad@alice.example.com\n\
    \        Replaces: 23rasdnfoa39i4jnasdf@bob.example.com;\n                  to-tag=totag2;from-tag=fromtag2\n\
    \        Supported: gruu\n        Contact: <sip:alice@example.com;gr=urn:uuid:(Alice's\
    \ UA's bits)>\n   Carol accepts Alice's invitation to replace her dialog (invite\
    \ usage)\n   with Bob, and notifies him that the REFERenced INVITE succeeded with\n\
    \   F7:\n      Message F7 (abridged, detailing pertinent fields)\n        NOTIFY\
    \ sip:boaiidfjjereis@example.com SIP/2.0\n        Subscription-State: terminated;reason=noresource\n\
    \        Call-ID: 39fa99r0329493asdsf3n@bob.example.com\n        Contact: <sip:alice@example.com;gr=urn:uuid:(Alice's\
    \ UA's bits)>\n        Content-Type: message/sipfrag\n        SIP/2.0 200 OK\n\
    \   Bob then ends his invite usages with both Alice and Carol using BYEs.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Handling multiple usages within a single dialog\
    \ is complex and\n   introduces scenarios where the right thing to do is not clear.\
    \  The\n   ambiguities described here can result in unexpected disruption of\n\
    \   communication if response codes are chosen carelessly.  Furthermore,\n   these\
    \ ambiguities could be exploited, particularly by third-parties\n   injecting\
    \ unauthenticated requests or inappropriate responses.\n   Implementations choosing\
    \ to create or accept multiple usages within a\n   dialog should give extra attention\
    \ to the security considerations in\n   [1], especially those concerning the authenticity\
    \ of requests and\n   processing of responses.\n   Service implementations should\
    \ carefully consider the effects on\n   their service of peers making different\
    \ choices in these areas of\n   ambiguity.  A service that requires multiple usages\
    \ needs to pay\n   particular attention to the effect on service and network utilization\n\
    \   when a client fails to destroy a dialog the service believes should\n   be\
    \ destroyed.  A service that disallows multiple usages should\n   consider the\
    \ effect on clients that, for instance, destroy the entire\n   dialog when only\
    \ a usage should be torn down.  In the worst case of a\n   service deployed into\
    \ a network with a large number of misbehaving\n   clients trying to create multiple\
    \ usages in an automated fashion, a\n   retry storm similar to an avalanche restart\
    \ could be induced.\n"
- title: 8.  Conclusion
  contents:
  - "8.  Conclusion\n   Handling multiple usages within a single dialog is complex\
    \ and\n   introduces scenarios where the right thing to do is not clear.\n   Implementations\
    \ should avoid entering into multiple usages whenever\n   possible.  New applications\
    \ should be designed to never introduce\n   multiple usages.\n   There are some\
    \ accepted SIP practices, including transfer, that\n   currently require multiple\
    \ usages.  Recent work, most notably GRUU,\n   makes those practices unnecessary.\
    \  The standardization of those\n   practices and the implementations should be\
    \ revised as soon as\n   possible to use only single-usage dialogs.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The ideas in this document have been refined over several\
    \ IETF\n   meetings with many participants.  Significant contribution was\n  \
    \ provided by Adam Roach, Alan Johnston, Ben Campbell, Cullen Jennings,\n   Jonathan\
    \ Rosenberg, Paul Kyzivat, and Rohan Mahy.  Members of the\n   reSIProcate project\
    \ also shared their difficulties and discoveries\n   while implementing multiple-usage\
    \ dialog handlers.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Levin, O., \"Suppression of Session Initiation Protocol (SIP)\n         REFER\
    \ Method Implicit Subscription\", RFC 4488, May 2006.\n   [3]   Burger, E. and\
    \ M. Dolly, \"A Session Initiation Protocol (SIP)\n         Event Package for\
    \ Key Press Stimulus (KPML)\", RFC 4730,\n         November 2006.\n   [4]   Niemi,\
    \ A., \"Session Initiation Protocol (SIP) Extension for\n         Event State\
    \ Publication\", RFC 3903, October 2004.\n   [5]   Roach, A., \"Session Initiation\
    \ Protocol (SIP)-Specific Event\n         Notification\", RFC 3265, June 2002.\n\
    \   [6]   Rosenberg, J. and H. Schulzrinne, \"Session Initiation Protocol\n  \
    \       (SIP): Locating SIP Servers\", RFC 3263, June 2002.\n   [7]   Sparks,\
    \ R., \"The Session Initiation Protocol (SIP) Refer\n         Method\", RFC 3515,\
    \ April 2003.\n   [8]   Mahy, R., Biggs, B., and R. Dean, \"The Session Initiation\n\
    \         Protocol (SIP) \"Replaces\" Header\", RFC 3891, September 2004.\n  \
    \ [9]   Rosenberg, J., \"Obtaining and Using Globally Routable User\n        \
    \ Agent (UA) URIs (GRUU) in the  Session Initiation Protocol\n         (SIP)\"\
    , Work in Progress, June 2006.\n   [10]  Rosenberg, J., \"Request Authorization\
    \ through Dialog\n         Identification in the Session Initiation Protocol (SIP)\"\
    ,\n         RFC 4538, June 2006.\n   [11]  Mahy, R. and D. Petrie, \"The Session\
    \ Initiation Protocol (SIP)\n         \"Join\" Header\", RFC 3911, October 2004.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Robert J. Sparks\n   Estacado Systems\n   EMail: RjS@estacado.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
