- contents:
  - '       HTTP Usage in the Registration Data Access Protocol (RDAP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document is one of a collection that together describes the\n
    \  Registration Data Access Protocol (RDAP).  It describes how RDAP is\n   transported
    using the Hypertext Transfer Protocol (HTTP).  RDAP is a\n   successor protocol
    to the very old WHOIS protocol.  The purpose of\n   this document is to clarify
    the use of standard HTTP mechanisms for\n   this application.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7480.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Design Intents  . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   4.  Queries . . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n
    \    4.1.  HTTP Methods  . . . . . . . . . . . . . . . . . . . . . .   5\n     4.2.
    \ Accept Header . . . . . . . . . . . . . . . . . . . . . .   5\n     4.3.  Query
    Parameters  . . . . . . . . . . . . . . . . . . . .   6\n   5.  Types of HTTP
    Response  . . . . . . . . . . . . . . . . . . .   6\n     5.1.  Positive Answers
    \ . . . . . . . . . . . . . . . . . . . .   6\n     5.2.  Redirects . . . . .
    . . . . . . . . . . . . . . . . . . .   6\n     5.3.  Negative Answers  . . .
    . . . . . . . . . . . . . . . . .   7\n     5.4.  Malformed Queries . . . . .
    . . . . . . . . . . . . . . .   7\n     5.5.  Rate Limits . . . . . . . . . .
    . . . . . . . . . . . . .   7\n     5.6.  Cross-Origin Resource Sharing (CORS)
    \ . . . . . . . . . .   8\n   6.  Extensibility . . . . . . . . . . . . . . .
    . . . . . . . . .   8\n   7.  Security Considerations . . . . . . . . . . . .
    . . . . . . .   9\n   8.  IANA Considerations . . . . . . . . . . . . . . . .
    . . . . .   9\n     8.1.  RDAP Extensions Registry  . . . . . . . . . . . . .
    . . .   9\n   9.  Internationalization Considerations . . . . . . . . . . . .
    .  10\n     9.1.  URIs and IRIs . . . . . . . . . . . . . . . . . . . . . .  10\n
    \    9.2.  Language Identifiers in Queries and Responses . . . . . .  10\n     9.3.
    \ Language Identifiers in HTTP Headers  . . . . . . . . . .  10\n   10. References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  11\n     10.1.  Normative
    References . . . . . . . . . . . . . . . . . .  11\n     10.2.  Informative References
    . . . . . . . . . . . . . . . . .  12\n   Appendix A.  Protocol Example . . .
    . . . . . . . . . . . . . . .  13\n   Appendix B.  Cache Busting  . . . . . .
    . . . . . . . . . . . . .  13\n   Appendix C.  Bootstrapping and Redirection  .
    . . . . . . . . . .  14\n   Acknowledgements . . . . . . . . . . . . . . . . .
    . . . . . . . . 15\n   Authors' Addresses  . . . . . . . . . . . . . . . . . .
    . . . . .  16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes the usage of the Hypertext Transfer
    Protocol\n   (HTTP) [RFC7230] for the Registration Data Access Protocol (RDAP).\n
    \  The goal of this document is to tie together usage patterns of HTTP\n   into
    a common profile applicable to the various types of directory\n   services serving
    registration data using practices informed by the\n   Representational State Transfer
    (REST) [REST] architectural style.\n   By giving the various directory services
    common behavior, a single\n   client is better able to retrieve data from directory
    services\n   adhering to this behavior.\n   Registration data expected to be presented
    by this service is\n   Internet resource registration data -- registration of
    domain names\n   and Internet number resources.  This data is typically provided
    by\n   WHOIS [RFC3912] services, but the WHOIS protocol is insufficient to\n   modern
    registration data service requirements.  A replacement\n   protocol is expected
    to retain the simple transactional nature of\n   WHOIS, while providing a specification
    for queries and responses,\n   redirection to authoritative sources, support for
    Internationalized\n   Domain Names (IDNs) [RFC5890], and support for localized
    registration\n   data such as addresses and organization or person names.\n   In
    designing these common usage patterns, this document introduces\n   considerations
    for a simple use of HTTP.  Where complexity may\n   reside, it is the goal of
    this document to place it upon the server\n   and to keep the client as simple
    as possible.  A client\n   implementation should be possible using common operating
    system\n   scripting tools (e.g., bash and wget).\n   This is the basic usage
    pattern for this protocol:\n   1.  A client determines an appropriate server to
    query along with the\n       appropriate base Uniform Resource Locator (URL) to
    use in such\n       queries.  [RFC7484] describes one method to determine the
    server\n       and the base URL.  See Appendix C for more information.\n   2.
    \ A client issues an HTTP (or HTTPS) query using GET [RFC7231].  As\n       an
    example, a query URL for the network registration 192.0.2.0\n       might be\n
    \         http://example.com/rdap/ip/192.0.2.0\n       [RFC7482] details the various
    queries used in RDAP.\n   3.  If the receiving server has the information for
    the query, it\n       examines the Accept header field of the query and returns
    a 200\n       response with a response entity appropriate for the requested\n
    \      format.  [RFC7483] details a response in JavaScript Object\n       Notation
    (JSON).\n   4.  If the receiving server does not have the information for the\n
    \      query but does have knowledge of where the information can be\n       found,
    it will return a redirection response (3xx) with the\n       Location header field
    containing an HTTP(S) URL pointing to the\n       information or another server
    known to have knowledge of the\n       location of the information.  The client
    is expected to requery\n       using that HTTP URL.\n   5.  If the receiving server
    does not have the information being\n       requested and does not have knowledge
    of where the information\n       can be found, it returns a 404 response.\n   6.
    \ If the receiving server will not answer a request for policy\n       reasons,
    it will return an error response (4xx) indicating the\n       reason for giving
    no answer.\n   It is not the intent of this document to redefine the meaning and\n
    \  semantics of HTTP.  The purpose of this document is to clarify the\n   use
    of standard HTTP mechanisms for this application.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   As is
    noted in \"Security and Stability Advisory Committee (SSAC)\n   Report on WHOIS
    Terminology and Structure\" [SAC-051], the term\n   \"WHOIS\" is overloaded, often
    referring to a protocol, a service, and\n   data.  In accordance with [SAC-051],
    this document describes the base\n   behavior for an RDAP.  [SAC-051] describes
    a protocol profile of RDAP\n   for Domain Name Registries (DNRs), the Domain Name
    Registration Data\n   Access Protocol (DNRD-AP).\n   In this document, an RDAP
    client is an HTTP user agent performing an\n   RDAP query, and an RDAP server
    is an HTTP server providing an RDAP\n   response.  RDAP query and response formats
    are described in [RFC7482]\n   and [RFC7483], while this document describes how
    RDAP clients and\n   servers use HTTP to exchange queries and responses.  [RFC7481]\n
    \  describes security considerations for RDAP.\n"
  title: 2.  Terminology
- contents:
  - "3.  Design Intents\n   There are a few design criteria this document attempts
    to meet.\n   First, each query is meant to require only one path of execution
    to\n   obtain an answer.  A response may contain an answer, no answer, or a\n
    \  redirect, and clients are not expected to fork multiple paths of\n   execution
    to make a query.\n   Second, the semantics of the request/response allow for future
    and/or\n   non-standard response formats.  In this document, only a JSON\n   [RFC7159]
    response media type is noted, with the response contents to\n   be described separately
    (see [RFC7483]).  This document only\n   describes how RDAP is transported using
    HTTP with this format.\n   Third, this protocol is intended to be able to make
    use of the range\n   of mechanisms available for use with HTTP.  HTTP offers a
    number of\n   mechanisms not described further in this document.  Operators are\n
    \  able to make use of these mechanisms according to their local policy,\n   including
    cache control, authorization, compression, and redirection.\n   HTTP also benefits
    from widespread investment in scalability,\n   reliability, and performance, as
    well as widespread programmer\n   understanding of client behaviors for web services
    styled after REST\n   [REST], reducing the cost to deploy Registration Data Directory\n
    \  Services and clients.  This protocol is forward compatible with HTTP\n   2.0.\n"
  title: 3.  Design Intents
- contents:
  - '4.  Queries

    '
  - contents:
    - "4.1.  HTTP Methods\n   Clients use the GET method to retrieve a response body
      and use the\n   HEAD method to determine existence of data on the server.  Clients\n
      \  SHOULD use either the HTTP GET or HEAD methods (see [RFC7231]).\n   Servers
      are under no obligation to support other HTTP methods;\n   therefore, clients
      using other methods will likely not interoperate\n   properly.\n   Clients and
      servers MUST support HTTPS to support security services.\n"
    title: 4.1.  HTTP Methods
  - contents:
    - "4.2.  Accept Header\n   To indicate to servers that an RDAP response is desired,
      clients\n   include an Accept header field with an RDAP-specific JSON media
      type,\n   the generic JSON media type, or both.  Servers receiving an RDAP\n
      \  request return an entity with a Content-Type header containing the\n   RDAP-specific
      JSON media type.\n   This specification does not define the responses a server
      returns to\n   a request with any other media types in the Accept header field,
      or\n   with no Accept header field.  One possibility would be to return a\n
      \  response in a media type suitable for rendering in a web browser.\n"
    title: 4.2.  Accept Header
  - contents:
    - "4.3.  Query Parameters\n   Servers MUST ignore unknown query parameters.  Use
      of unknown query\n   parameters for cache busting is described in Appendix B.\n"
    title: 4.3.  Query Parameters
  title: 4.  Queries
- contents:
  - "5.  Types of HTTP Response\n   This section describes the various types of responses
    a server may\n   send to a client.  While no standard HTTP response code is forbidden\n
    \  in usage, this section defines the minimal set of response codes in\n   common
    use by servers that a client will need to understand.  While\n   some clients
    may be constructed with simple tooling that does not\n   account for all of these
    response codes, a more robust client\n   accounting for these codes will likely
    provide a better user\n   experience.  It is expected that usage of response codes
    and types\n   for this application not defined here will be described in subsequent\n
    \  documents.\n"
  - contents:
    - "5.1.  Positive Answers\n   If a server has the information requested by the
      client and wishes to\n   respond to the client with the information according
      to its policies,\n   it returns that answer in the body of a 200 (OK) response
      (see\n   [RFC7231]).\n"
    title: 5.1.  Positive Answers
  - contents:
    - "5.2.  Redirects\n   If a server wishes to inform a client that the answer to
      a given\n   query can be found elsewhere, it returns either a 301 (Moved\n   Permanently)
      response code to indicate a permanent move or a 302\n   (Found), 303 (See Other),
      or 307 (Temporary Redirect) response code\n   to indicate a non-permanent redirection,
      and it includes an HTTP(S)\n   URL in the Location header field (see [RFC7231]).
      \ The client is\n   expected to issue a subsequent request to satisfy the original
      query\n   using the given URL without any processing of the URL.  In other\n
      \  words, the server is to hand back a complete URL, and the client\n   should
      not have to transform the URL to follow it.  Servers are under\n   no obligation
      to return a URL conformant to [RFC7482].\n   For this application, such an example
      of a permanent move might be a\n   Top-Level Domain (TLD) operator informing
      a client the information\n   being sought can be found with another TLD operator
      (i.e., a query\n   for the domain bar in foo.example is found at\n   http://foo.example/domain/bar).\n
      \  For example, if the client uses\n      http://serv1.example.com/weirds/domain/example.com\n
      \  the server redirecting to\n      https://serv2.example.net/weirds2/\n   would
      set the Location: field to the value\n      https://serv2.example.net/weirds2/domain/example.com\n"
    title: 5.2.  Redirects
  - contents:
    - "5.3.  Negative Answers\n   If a server wishes to respond that it has an empty
      result set (that\n   is, no data appropriately satisfying the query), it returns
      a 404\n   (Not Found) response code.  Optionally, it MAY include additional\n
      \  information regarding the negative answer in the HTTP entity body.\n   If
      a server wishes to inform the client that information about the\n   query is
      available, but cannot include the information in the\n   response to the client
      for policy reasons, the server MUST respond\n   with an appropriate response
      code out of HTTP's 4xx range.  A client\n   MAY retry the query if that is appropriate
      for the respective\n   response code.\n"
    title: 5.3.  Negative Answers
  - contents:
    - "5.4.  Malformed Queries\n   If a server receives a query that it cannot interpret
      as an RDAP\n   query, it returns a 400 (Bad Request) response code.  Optionally,
      it\n   MAY include additional information regarding this negative answer in\n
      \  the HTTP entity body.\n"
    title: 5.4.  Malformed Queries
  - contents:
    - "5.5.  Rate Limits\n   Some servers apply rate limits to deter address scraping
      and other\n   abuses.  When a server declines to answer a query due to rate
      limits,\n   it returns a 429 (Too Many Requests) response code as described
      in\n   [RFC6585].  A client that receives a 429 response SHOULD decrease its\n
      \  query rate and honor the Retry-After header field if one is present.\n   Servers
      may place stricter limits upon clients that do not honor the\n   Retry-After
      header.  Optionally, the server MAY include additional\n   information regarding
      the rate limiting in the HTTP entity body.\n   Note that this is not a defense
      against denial-of-service (DoS)\n   attacks, since a malicious client could
      ignore the code and continue\n   to send queries at a high rate.  A server might
      use another response\n   code if it did not wish to reveal to a client that
      rate limiting is\n   the reason for the denial of a reply.\n"
    title: 5.5.  Rate Limits
  - contents:
    - "5.6.  Cross-Origin Resource Sharing (CORS)\n   When responding to queries,
      it is RECOMMENDED that servers use the\n   Access-Control-Allow-Origin header
      field, as specified by\n   [W3C.REC-cors-20140116].  A value of \"*\" is suitable
      when RDAP is\n   used for public resources.\n   This header (often called the
      CORS header) helps in-browser web\n   applications by lifting the \"same-origin\"
      restriction (i.e., a\n   browser may load RDAP client code from one web server
      but query\n   others for RDAP data).\n   By default, browsers do not send cookies
      when cross origin requests\n   are allowed.  Setting the Access-Control-Allow-Credentials
      header\n   field to \"true\" will send cookies.  Use of the\n   Access-Control-Allow-Credentials
      header field is NOT RECOMMENDED.\n"
    title: 5.6.  Cross-Origin Resource Sharing (CORS)
  title: 5.  Types of HTTP Response
- contents:
  - "6.  Extensibility\n   For extensibility purposes, this document defines an IANA
    registry\n   for prefixes used in JSON [RFC7159] data serialization and URI path\n
    \  segments (see Section 8).\n   Prefixes and identifiers SHOULD only consist
    of the alphabetic US-\n   ASCII characters A through Z in both uppercase and lowercase,
    the\n   numerical digits 0 through 9, and the underscore character, and they\n
    \  SHOULD NOT begin with an underscore character, numerical digit, or\n   the
    characters \"xml\".  The following describes the production of JSON\n   names
    in ABNF [RFC5234].\n     name = ALPHA *( ALPHA / DIGIT / \"_\" )\n                       Figure
    1: ABNF for JSON Names\n   This restriction is a union of the Ruby programming
    language\n   identifier syntax and the XML element name syntax and has two\n   purposes.
    \ First, client implementers using modern programming\n   languages such as Ruby
    or Java can use libraries that automatically\n   promote JSON names to first-order
    object attributes or members.\n   Second, a clean mapping between JSON and XML
    is easy to accomplish\n   using these rules.\n"
  title: 6.  Extensibility
- contents:
  - "7.  Security Considerations\n   This document does not pose strong security requirements
    to the RDAP\n   protocol.  However, it does not restrict against the use of security\n
    \  mechanisms offered by the HTTP protocol.  It does require that RDAP\n   clients
    and servers MUST support HTTPS.\n   This document makes recommendations for server
    implementations\n   against DoS (Section 5.5) and interoperability with existing
    security\n   mechanisms in HTTP clients (Section 5.6).\n   Additional security
    considerations to the RDAP protocol are covered\n   in [RFC7481].\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  RDAP Extensions Registry\n   IANA has created a new category in the protocol
      registries labeled\n   \"Registration Data Access Protocol (RDAP)\", and within
      that category,\n   has established a URL-referenceable, stand-alone registry
      labeled\n   \"RDAP Extensions\".  The purpose of this registry is to ensure\n
      \  uniqueness of extension identifiers.  The extension identifier is\n   used
      as a prefix in JSON names and as a prefix of path segments in\n   RDAP URLs.\n
      \  The production rule for these identifiers is specified in Section 6.\n   In
      accordance with [RFC5226], the IANA policy for assigning new\n   values, shall
      be Specification Required: values and their meanings\n   must be documented
      in an RFC or in some other permanent and readily\n   available reference, in
      sufficient detail that interoperability\n   between independent implementations
      is possible.\n   The following is a template for an RDAP extension registration:\n
      \     Extension identifier: the identifier of the extension\n      Registry
      operator: the name of the registry operator\n      Published specification:
      RFC number, bibliographical reference, or\n      URL to a permanent and readily
      available specification\n      Person & email address to contact for further
      information: The\n      names and email addresses of individuals to contact
      regarding this\n      registry entry\n      Intended usage: brief reasons for
      this registry entry (as defined\n      by [RFC5226]).\n   The following is an
      example of a registration in the RDAP extension\n   registry:\n      Extension
      identifier: lunarNic\n      Registry operator: The Registry of the Moon, LLC\n
      \     Published specification: http://www.example/moon_apis/rdap\n      Person
      & email address to contact for further information:\n      Professor Bernardo
      de la Paz <berny@moon.example>\n      Intended usage: COMMON\n"
    title: 8.1.  RDAP Extensions Registry
  title: 8.  IANA Considerations
- contents:
  - '9.  Internationalization Considerations

    '
  - contents:
    - "9.1.  URIs and IRIs\n   Clients can use Internationalized Resource Identifiers
      (IRIs)\n   [RFC3987] for internal use as they see fit but MUST transform them
      to\n   URIs [RFC3986] for interaction with RDAP servers.  RDAP servers MUST\n
      \  use URIs in all responses, and again clients can transform these URIs\n   to
      IRIs for internal use as they see fit.\n"
    title: 9.1.  URIs and IRIs
  - contents:
    - "9.2.  Language Identifiers in Queries and Responses\n   Under most scenarios,
      clients requesting data will not signal that\n   the data be returned in a particular
      language or script.  On the\n   other hand, when servers return data and have
      knowledge that the data\n   is in a language or script, the data SHOULD be annotated
      with\n   language identifiers whenever they are available, thus allowing\n   clients
      to process and display the data accordingly.\n   [RFC7483] provides such a mechanism.\n"
    title: 9.2.  Language Identifiers in Queries and Responses
  - contents:
    - "9.3.  Language Identifiers in HTTP Headers\n   Given the description of the
      use of language identifiers in\n   Section 9.2, unless otherwise specified,
      servers SHOULD ignore the\n   HTTP [RFC7231] Accept-Language header field when
      formulating HTTP\n   entity responses, so that clients do not conflate the Accept-Language\n
      \  header with the 'lang' values in the entity body.\n   However, servers MAY
      return language identifiers in the Content-\n   Language header field so as
      to inform clients of the intended\n   language of HTTP layer messages.\n"
    title: 9.3.  Language Identifiers in HTTP Headers
  title: 9.  Internationalization Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3986]
      \ Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66, RFC\n              3986, January
      2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC3987]
      \ Duerst, M. and M. Suignard, \"Internationalized Resource\n              Identifiers
      (IRIs)\", RFC 3987, January 2005,\n              <http://www.rfc-editor.org/info/rfc3987>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008,
      <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC6585]  Nottingham, M. and
      R. Fielding, \"Additional HTTP Status\n              Codes\", RFC 6585, April
      2012,\n              <http://www.rfc-editor.org/info/rfc6585>.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\", RFC\n              7230, June 2014,
      <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]  Fielding, R., Ed. and
      J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics
      and Content\", RFC 7231,\n              June 2014, <http://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7481]  Hollenbeck, S. and N. Kong, \"Security Services for the\n              Registration
      Data Access Protocol (RDAP)\", RFC 7481,\n              February 2015, <http://www.rfc-editor.org/info/rfc7481>.\n
      \  [RFC7482]  Newton, A. and S. Hollenbeck, \"Registration Data Access\n              Protocol
      (RDAP) Query Format\", RFC 7482, February 2015,\n              <http://www.rfc-editor.org/info/rfc7482>.\n
      \  [RFC7483]  Newton, A. and S. Hollenbeck, \"JSON Responses for the\n              Registration
      Data Access Protocol (RDAP)\", RFC 7483,\n              February 2015, <http://www.rfc-editor.org/info/rfc7483>.\n
      \  [RFC7484]  Blanchet, M., \"Finding the Authoritative Registration Data\n
      \             (RDAP) Service\", RFC 7484, February 2015,\n              <http://www.rfc-editor.org/info/rfc7484>.\n
      \  [W3C.REC-cors-20140116]\n              Kesteren, A., \"Cross-Origin Resource
      Sharing\", W3C\n              Recommendation, REC-cors-20140116, January 2014,\n
      \             <http://www.w3.org/TR/2014/REC-cors-20140116/>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [REST]     Fielding, R. and R. Taylor, \"Principled
      Design of the\n              Modern Web Architecture\", ACM Transactions on
      Internet\n              Technology, Vol. 2, No. 2, May 2002.\n   [RFC3912]  Daigle,
      L., \"WHOIS Protocol Specification\", RFC 3912,\n              September 2004,
      <http://www.rfc-editor.org/info/rfc3912>.\n   [RFC5234]  Crocker, D., Ed. and
      P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\",
      STD 68, RFC 5234, January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n
      \  [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n              Applications
      (IDNA): Definitions and Document Framework\",\n              RFC 5890, August
      2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n   [RFC7159]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, March 2014,\n              <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [SAC-051]  Piscitello, D., Ed., \"SSAC Report on Domain Name WHOIS\n              Terminology
      and Structure\", A report from the ICANN\n              Security and Stability
      Advisory Committee (SSAC),\n              September 2011.\n   [lacnic-joint-whois]\n
      \             LACNIC, \"Joint Whois\", December 2005,\n              <ftp://anonymous@ftp.registro.br/pub/gter/\n
      \             gter20/02-jwhois-lacnic.pdf>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Protocol Example\n   To demonstrate typical behavior of an RDAP
    client and server, the\n   following is an example of an exchange, including a
    redirect.  The\n   data in the response has been elided for brevity, as the data
    format\n   is not described in this document.  The media type used here is\n   described
    in [RFC7483].\n   An example of an RDAP client and server exchange:\n     Client:\n
    \        <TCP connect to rdap.example.com port 80>\n         GET /rdap/ip/203.0.113.0/24
    HTTP/1.1\n         Host: rdap.example.com\n         Accept: application/rdap+json\n
    \    rdap.example.com:\n         HTTP/1.1 301 Moved Permanently\n         Location:
    http://rdap-ip.example.com/rdap/ip/203.0.113.0/24\n         Content-Length: 0\n
    \        Content-Type: application/rdap+json\n         <TCP disconnect>\n     Client:\n
    \        <TCP connect to rdap-ip.example.com port 80>\n         GET /rdap/ip/203.0.113.0/24
    HTTP/1.1\n         Host:  rdap-ip.example.com\n         Accept: application/rdap+json\n
    \    rdap-ip.example.com:\n         HTTP/1.1 200 OK\n         Content-Type: application/rdap+json\n
    \        Content-Length: 9001\n         { ... }\n         <TCP disconnect>\n"
  title: Appendix A.  Protocol Example
- contents:
  - "Appendix B.  Cache Busting\n   Some HTTP [RFC7230] cache infrastructures do not
    adhere to caching\n   standards adequately and could cache responses longer than
    is\n   intended by the server.  To overcome these issues, clients can use an\n
    \  ad hoc and improbably used query parameter with a random value of\n   their
    choosing.  As Section 4.3 instructs servers to ignore unknown\n   parameters,
    this is compatible with the RDAP definition.\n   An example of using an unknown
    query parameter to bust caches:\n     http://example.com/ip/192.0.2.0?__fuhgetaboutit=xyz123\n
    \  Use of an unknown parameter to overcome misbehaving caches is not\n   part
    of any specification and is offered here for informational\n   purposes.\n"
  title: Appendix B.  Cache Busting
- contents:
  - "Appendix C.  Bootstrapping and Redirection\n   The traditional deployment model
    of WHOIS [RFC3912] does not provide\n   a mechanism for determining the authoritative
    source for information.\n   Some approaches have been implemented in the past,
    most notably the\n   Joint WHOIS [lacnic-joint-whois] initiative.  However, among
    other\n   shortcomings, Joint WHOIS is implemented using proxies and server-\n
    \  side referrals.\n   These issues are solved in RDAP using HTTP redirects and\n
    \  bootstrapping.  Bootstrapping is discussed in [RFC7484].  In\n   constrained
    environments, the processes outlined in [RFC7484] may not\n   be viable, and there
    may be the need for servers acting as a\n   \"redirector\".\n   Redirector servers
    issue HTTP redirects to clients using a\n   redirection table informed by [RFC7484].
    \ Figure 2 diagrams a client\n   using a redirector for bootstrapping.\n                                      REDIRECTOR
    \      ARIN\n                                      RDAP             RDAP\n                                        .
    \              .\n                                        |               |\n
    \       Q: 23.1.1.1? -----------------> |               |\n                                        |
    \              |\n           <---------- HTTP 301 --------|               |\n
    \                 ('Try ARIN RDAP')     |               |\n                                        |
    \              |\n                                                        |\n
    \         Q: 23.1.1.1? -------------------------------> |\n                                                        |\n
    \            <---------- HTTP 200 --------------------- |\n                    (JSON
    response is returned)         |\n                                                        |\n
    \                                                       |\n                                                        .\n
    \                Figure 2: Querying RDAP Data for 23.1.1.1\n   In some cases,
    particularly sub-delegations made between Regional\n   Internet Registries (RIRs)
    known as \"ERX space\" and transfers of\n   networks, multiple HTTP redirects
    will be issued.  Figure 3 shows\n   such a scenario.\n                          REDIRECTOR
    \ LACNIC           ARIN\n                          RDAP        RDAP             RDAP\n
    \                           .           .               .\n        Q: 23.1.1.1?
    ---->  |           |               |\n                            |           |
    \              |\n          <-- HTTP 301 ---  |           |               |\n
    \        ('Try LACNIC')     |           |               |\n                            |
    \          |               |\n                            |           |               |\n
    \       Q: 23.1.1.1? -----------------> |               |\n                                        |
    \              |\n           <---------- HTTP 301 --------|               |\n
    \                 ('Try ARIN RDAP')     |               |\n                                        |
    \              |\n                                                        |\n
    \         Q: 23.1.1.1? -------------------------------> |\n                                                        |\n
    \            <---------- HTTP 200 --------------------- |\n                    (JSON
    response is returned)         |\n                                                        |\n
    \                                                       |\n                                                        .\n
    \     Figure 3: Querying RDAP Data for Data That Has Been Transferred\n"
  title: Appendix C.  Bootstrapping and Redirection
- contents:
  - "Acknowledgements\n   John Levine provided text to tighten up the Accept header
    field usage\n   and the text for the section on 429 responses.\n   Marc Blanchet
    provided some clarifying text regarding the use of URLs\n   with redirects, as
    well as very useful feedback during Working Group\n   Last Call (WGLC).\n   Normative
    language reviews were provided by Murray S. Kucherawy,\n   Andrew Sullivan, Tom
    Harrison, Ed Lewis, and Alexander Mayrhofer.\n   Jean-Phillipe Dionne provided
    text for the Security Considerations\n   section.\n   The concept of the redirector
    server informatively discussed in\n   Appendix C was documented by Carlos M.  Martinez
    and Gerardo Rada of\n   LACNIC and Linlin Zhou of CNNIC and subsequently incorporated
    into\n   this document.\n   This document is the work product of the IETF's WEIRDS
    working group,\n   of which Olaf Kolkman and Murray Kucherawy were chairs.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Andrew Lee Newton\n   American Registry for Internet Numbers\n
    \  3635 Concorde Parkway\n   Chantilly, VA  20151\n   United States\n   EMail:
    andy@arin.net\n   URI:   http://www.arin.net\n   Byron J. Ellacott\n   Asia Pacific
    Network Information Centre\n   6 Cordelia Street\n   South Brisbane  QLD 4101\n
    \  Australia\n   EMail: bje@apnic.net\n   URI:   http://www.apnic.net\n   Ning
    Kong\n   China Internet Network Information Center\n   4 South 4th Street, Zhongguancun,
    Haidian District\n   Beijing  100190\n   China\n   Phone: +86 10 5881 3147\n   EMail:
    nkong@cnnic.cn\n"
  title: Authors' Addresses
