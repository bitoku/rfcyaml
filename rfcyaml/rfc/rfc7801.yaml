- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                  V. Dolmatov, Ed.
  contents:
  - "Independent Submission                                  V. Dolmatov, Ed.\n  \
    \            GOST R 34.12-2015: Block Cipher \"Kuznyechik\"\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is intended to be a source of information about the\n\
    \   Russian Federal standard GOST R 34.12-2015 describing the block\n   cipher\
    \ with a block length of n=128 bits and a key length of k=256\n   bits, which\
    \ is also referred to as \"Kuznyechik\".  This algorithm is\n   one of the set\
    \ of Russian cryptographic standard algorithms (called\n   GOST algorithms).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7801.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Scope . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  General Information . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Definitions and Notations . . . . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Definitions . . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n     3.2.  Notations . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n   4.  Parameter Values  . . . . . . . . . . . . . . . . . . . . . .\
    \   6\n     4.1.  Nonlinear Bijection . . . . . . . . . . . . . . . . . . .  \
    \ 6\n     4.2.  Linear Transformation . . . . . . . . . . . . . . . . . .   7\n\
    \     4.3.  Transformations . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \   4.4.  Key Schedule  . . . . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 4.5.  Basic Encryption Algorithm  . . . . . . . . . . . . . . .   9\n      \
    \ 4.5.1.  Encryption  . . . . . . . . . . . . . . . . . . . . .   9\n       4.5.2.\
    \  Decryption  . . . . . . . . . . . . . . . . . . . . .   9\n   5.  Examples\
    \ (Informative)  . . . . . . . . . . . . . . . . . . .  10\n     5.1.  Transformation\
    \ S  . . . . . . . . . . . . . . . . . . . .  10\n     5.2.  Transformation R\
    \  . . . . . . . . . . . . . . . . . . . .  10\n     5.3.  Transformation L  .\
    \ . . . . . . . . . . . . . . . . . . .  10\n     5.4.  Key Schedule  . . . .\
    \ . . . . . . . . . . . . . . . . . .  11\n     5.5.  Test Encryption . . . .\
    \ . . . . . . . . . . . . . . . . .  12\n     5.6.  Test Decryption . . . . .\
    \ . . . . . . . . . . . . . . . .  13\n   6.  Security Considerations . . . .\
    \ . . . . . . . . . . . . . . .  13\n   7.  References  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  14\n     7.1.  Normative References  . . . . .\
    \ . . . . . . . . . . . . .  14\n     7.2.  Informative References  . . . . .\
    \ . . . . . . . . . . . .  14\n   Author's Address  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  14\n"
- title: 1.  Scope
  contents:
  - "1.  Scope\n   The Russian Federal standard [GOST3412-2015] specifies basic block\n\
    \   ciphers used as cryptographic techniques for information processing\n   and\
    \ information protection including the provision of\n   confidentiality, authenticity,\
    \ and integrity of information during\n   information transmission, processing,\
    \ and storage in computer-aided\n   systems.\n   The cryptographic algorithms\
    \ specified in this standard are designed\n   both for hardware and software implementation.\
    \  They comply with\n   modern cryptographic requirements and put no restrictions\
    \ on the\n   confidentiality level of the protected information.\n   The standard\
    \ applies to development, operation, and modernization of\n   the information\
    \ systems of various purposes.\n"
- title: 2.  General Information
  contents:
  - "2.  General Information\n   The block cipher \"Kuznyechik\" [GOST3412-2015] was\
    \ developed by the\n   Center for Information Protection and Special Communications\
    \ of the\n   Federal Security Service of the Russian Federation with participation\n\
    \   of the Open Joint-Stock company \"Information Technologies and\n   Communication\
    \ Systems\" (InfoTeCS JSC).  GOST R 34.12-2015 was\n   approved and introduced\
    \ by Decree #749 of the Federal Agency on\n   Technical Regulating and Metrology\
    \ on June 19, 2015.\n   Terms and concepts in the standard comply with the following\n\
    \   international standards:\n   o  ISO/IEC 10116 [ISO-IEC10116] and\n   o  series\
    \ of standards ISO/IEC 18033 [ISO-IEC18033-1]\n      [ISO-IEC18033-3].\n"
- title: 3.  Definitions and Notations
  contents:
  - "3.  Definitions and Notations\n   The following terms and their corresponding\
    \ definitions are used in\n   the standard.\n"
- title: 3.1.  Definitions
  contents:
  - "3.1.  Definitions\n   Definitions\n      encryption algorithm: process that transforms\
    \ plaintext into\n      ciphertext (Section 2.19 of [ISO-IEC18033-1]),\n     \
    \ decryption algorithm: process that transforms ciphertext into\n      plaintext\
    \ (Section 2.14 of [ISO-IEC18033-1]),\n      basic block cipher: block cipher\
    \ that for a given key provides a\n      single invertible mapping of the set\
    \ of fixed-length plaintext\n      blocks into ciphertext blocks of the same length,\n\
    \      block: string of bits of a defined length (Section 2.6 of\n      [ISO-IEC18033-1]),\n\
    \      block cipher: symmetric encipherment system with the property that\n  \
    \    the encryption algorithm operates on a block of plaintext, i.e., a\n    \
    \  string of bits of a defined length, to yield a block of ciphertext\n      (Section\
    \ 2.7 of [ISO-IEC18033-1]),\n         Note: In GOST R 34.12-2015, it is established\
    \ that the terms\n         \"block cipher\" and \"block encryption algorithm\"\
    \ are synonyms.\n      encryption: reversible transformation of data by a cryptographic\n\
    \      algorithm to produce ciphertext, i.e., to hide the information\n      content\
    \ of the data (Section 2.18 of [ISO-IEC18033-1]),\n      round key: sequence of\
    \ symbols that is calculated from the key and\n      controls a transformation\
    \ for one round of a block cipher,\n      key: sequence of symbols that controls\
    \ the operation of a\n      cryptographic transformation (e.g., encipherment and\
    \ decipherment)\n      (Section 2.21 of [ISO-IEC18033-1]),\n         Note: In\
    \ GOST R 34.12-2015, the key must be a binary sequence.\n      plaintext: unencrypted\
    \ information (Section 3.11 of\n      [ISO-IEC10116]),\n      key schedule: calculation\
    \ of round keys from the key,\n      decryption: reversal of a corresponding encipherment\
    \ (Section 2.13\n      of [ISO-IEC18033-1]),\n      symmetric cryptographic technique:\
    \ cryptographic technique that\n      uses the same secret key for both the originator's\
    \ and the\n      recipient's transformation (Section 2.32 of [ISO-IEC18033-1]),\n\
    \      cipher: alternative term for encipherment system (Section 2.20 of\n   \
    \   [ISO-IEC18033-1]), and\n      ciphertext: data that has been transformed to\
    \ hide its information\n      content (Section 3.3 of [ISO-IEC10116]).\n"
- title: 3.2.  Notations
  contents:
  - "3.2.  Notations\n   The following notations are used in the standard:\n   V*\
    \      the set of all binary vector strings of a finite length\n           (hereinafter\
    \ referred to as the strings) including the empty\n           string,\n   V_s\
    \     the set of all binary strings of length s, where s is a non-\n         \
    \  negative integer; substrings and string components are\n           enumerated\
    \ from right to left starting from zero,\n   U[*]W   direct (Cartesian) product\
    \ of two sets, U and W,\n   |A|     the number of components (the length) of a\
    \ string A belonging\n           to V* (if A is an empty string, then |A| = 0),\n\
    \   A||B    concatenation of strings A and B both belonging to V*, i.e.,\n   \
    \        a string from V_(|A|+|B|), where the left substring from\n          \
    \ V_|A| is equal to A, and the right substring from V_|B| is\n           equal\
    \ to B,\n   Z_(2^n) ring of residues modulo 2^n,\n   Q       finite field GF(2)[x]/p(x),\
    \ where p(x)=x^8+x^7+x^6+x+1\n           belongs to GF(2)[x]; elements of field\
    \ Q are represented by\n           integers in such way that element\n       \
    \    z_0+z_1*theta+...+z_7*theta^7 belonging to Q corresponds to\n           integer\
    \ z_0+2*z_1+...+2^7*z_7, where z_i=0 or z_i=1,\n           i=0,1,...,7 and theta\
    \ denotes a residue class modulo p(x)\n           containing x,\n   (xor)   exclusive-or\
    \ of the two binary strings of the same length,\n   Vec_s: Z_(2^s) -> V_s  bijective\
    \ mapping that maps an element from\n           ring Z_(2^s) into its binary representation,\
    \ i.e., for an\n           element z of the ring Z_(2^s), represented by the residue\
    \ z_0\n           + (2*z_1) + ... + (2^(s-1)*z_(s-1)), where z_i in {0, 1}, i\
    \ =\n           0, ..., n-1, the equality Vec_s(z) = z_(s-1)||...||z_1||z_0\n\
    \           holds,\n   Int_s: V_s -> Z_(2^s)  the mapping inverse to the mapping\
    \ Vec_s,\n           i.e., Int_s = Vec_s^(-1),\n   delta: V_8 -> Q  bijective\
    \ mapping that maps a binary string from V_8\n           into an element from\
    \ field Q as follows: string\n           z_7||...||z_1||z_0, where z_i in {0,\
    \ 1}, i = 0, ..., 7,\n           corresponds to the element z_0+(z_1*theta)+...+(z_7*theta^7)\n\
    \           belonging to Z,\n   nabla: Q -> V8  the mapping inverse to the mapping\
    \ delta, i.e., delta\n           = nabla^(-1),\n   PS      composition of mappings,\
    \ where the mapping S applies first,\n           and\n   P^s     composition of\
    \ mappings P^(s-1) and P, where P^1=P.\n"
- title: 4.  Parameter Values
  contents:
  - '4.  Parameter Values

    '
- title: 4.1.  Nonlinear Bijection
  contents:
  - "4.1.  Nonlinear Bijection\n   The bijective nonlinear mapping is a substitution:\
    \ Pi =\n   (Vec_8)Pi'(Int_8): V_8 -> V_8, where Pi': Z_(2^8) -> Z_(2^8).  The\n\
    \   values of the substitution Pi' are specified below as an array Pi' =\n   (Pi'(0),\
    \ Pi'(1), ... , Pi'(255)):\n    Pi' =\n   (       252, 238, 221,  17, 207, 110,\
    \  49,  22, 251, 196, 250,\n           218,  35, 197,   4,  77, 233, 119, 240,\
    \ 219, 147,  46,\n           153, 186,  23,  54, 241, 187,  20, 205,  95, 193,\
    \ 249,\n            24, 101,  90, 226,  92, 239,  33, 129,  28,  60,  66,\n  \
    \         139,   1, 142,  79,   5, 132,   2, 174, 227, 106, 143,\n           160,\
    \   6,  11, 237, 152, 127, 212, 211,  31, 235,  52,\n            44,  81, 234,\
    \ 200,  72, 171, 242,  42, 104, 162, 253,\n            58, 206, 204, 181, 112,\
    \  14,  86,   8,  12, 118,  18,\n           191, 114,  19,  71, 156, 183,  93,\
    \ 135,  21, 161, 150,\n            41,  16, 123, 154, 199, 243, 145, 120, 111,\
    \ 157, 158,\n           178, 177,  50, 117,  25,  61, 255,  53, 138, 126, 109,\n\
    \            84, 198, 128, 195, 189,  13,  87, 223, 245,  36, 169,\n         \
    \   62, 168,  67, 201, 215, 121, 214, 246, 124,  34, 185,\n             3, 224,\
    \  15, 236, 222, 122, 148, 176, 188, 220, 232,\n            40,  80,  78,  51,\
    \  10,  74, 167, 151,  96, 115,  30,\n             0,  98,  68,  26, 184,  56,\
    \ 130, 100, 159,  38,  65,\n           173,  69,  70, 146,  39,  94,  85,  47,\
    \ 140, 163, 165,\n           125, 105, 213, 149,  59,   7,  88, 179,  64, 134,\
    \ 172,\n            29, 247,  48,  55, 107, 228, 136, 217, 231, 137, 225,\n  \
    \          27, 131,  73,  76,  63, 248, 254, 141,  83, 170, 144,\n           202,\
    \ 216, 133,  97,  32, 113, 103, 164,  45,  43,   9,\n            91, 203, 155,\
    \  37, 208, 190, 229, 108,  82,  89, 166,\n           116, 210, 230, 244, 180,\
    \ 192, 209, 102, 175, 194,  57,\n            75,  99, 182).\n   Pi^(-1) is the\
    \ inverse of Pi; the values of the substitution Pi^(-1)'\n   are specified below\
    \ as an array Pi^(-1)' = (Pi^(-1)'(0), Pi^(-1)'(1),\n   ... , Pi^(-1)'(255)):\n\
    \    Pi^(-1)' =\n   (    165,  45,  50, 143,  14,  48,  56, 192,  84, 230, 158,\n\
    \         57,  85, 126,  82, 145, 100,   3,  87,  90,  28,  96,\n          7,\
    \  24,  33, 114, 168, 209,  41, 198, 164,  63, 224,\n         39, 141,  12, 130,\
    \ 234, 174, 180, 154,  99,  73, 229,\n         66, 228,  21, 183, 200,   6, 112,\
    \ 157,  65, 117,  25,\n        201, 170, 252,  77, 191,  42, 115, 132, 213, 195,\
    \ 175,\n         43, 134, 167, 177, 178,  91,  70, 211, 159, 253, 212,\n     \
    \    15, 156,  47, 155,  67, 239, 217, 121, 182,  83, 127,\n        193, 240,\
    \  35, 231,  37,  94, 181,  30, 162, 223, 166,\n        254, 172,  34, 249, 226,\
    \  74, 188,  53, 202, 238, 120,\n          5, 107,  81, 225,  89, 163, 242, 113,\
    \  86,  17, 106,\n        137, 148, 101, 140, 187, 119,  60, 123,  40, 171, 210,\n\
    \         49, 222, 196,  95, 204, 207, 118,  44, 184, 216,  46,\n         54,\
    \ 219, 105, 179,  20, 149, 190,  98, 161,  59,  22,\n        102, 233,  92, 108,\
    \ 109, 173,  55,  97,  75, 185, 227,\n        186, 241, 160, 133, 131, 218,  71,\
    \ 197, 176,  51, 250,\n        150, 111, 110, 194, 246,  80, 255,  93, 169, 142,\
    \  23,\n         27, 151, 125, 236,  88, 247,  31, 251, 124,   9,  13,\n     \
    \   122, 103,  69, 135, 220, 232,  79,  29,  78,   4, 235,\n        248, 243,\
    \  62,  61, 189, 138, 136, 221, 205,  11,  19,\n        152,   2, 147, 128, 144,\
    \ 208,  36,  52, 203, 237, 244,\n        206, 153,  16,  68,  64, 146,  58,  \
    \ 1,  38,  18,  26,\n         72, 104, 245, 129, 139, 199, 214,  32,  10,   8,\
    \   0,\n         76, 215, 116 ).\n"
- title: 4.2.  Linear Transformation
  contents:
  - "4.2.  Linear Transformation\n   The linear transformation is denoted by l: (V_8)^16\
    \ -> V_8, and\n   defined as:\n   l(a_15,...,a_0) = nabla(148*delta(a_15) + 32*delta(a_15)\
    \ +\n   133*delta(a_13) + 16*delta(a_12) + 194*delta(a_11) +\n   192*delta(a_10)\
    \ + 1*delta(a_9) + 251*delta(a_8) + 1*delta(a_7) +\n   192*delta(a_6) + 194*delta(a_5)\
    \ + 16*delta(a_4) + 133*delta(a_3) +\n   32*delta(a_2) + 148*delta(a_1) +1*delta(a_0)),\n\
    \   for all a_i belonging to V_8, i = 0, 1, ..., 15, where the addition\n   and\
    \ multiplication operations are in the field Q, and constants are\n   elements\
    \ of the field as defined above.\n"
- title: 4.3.  Transformations
  contents:
  - "4.3.  Transformations\n   The following transformations are applicable for encryption\
    \ and\n   decryption algorithms:\n   X[x]:V_128->V_128  X[k](a)=k(xor)a, where\
    \ k, a belong to V_128,\n   S:V_128-> V_128  S(a)=(a_15||...||a_0)=pi(a_15)||...||pi(a_0),\
    \ where\n      a_15||...||a_0 belongs to V_128, a_i belongs to V_8, i=0,1,...,15,\n\
    \   S^(-1):V_128-> V_128  the inverse transformation of S, which may be\n    \
    \  calculated, for example, as follows:\n      S^(-1)(a_15||...||a_0)=pi^(-1)\
    \ (a_15)||...||pi^(-1)(a_0), where\n      a_15||...||a_0 belongs to V_128, a_i\
    \ belongs to V_8, i=0,1,...,15,\n   R:V_128-> V_128  R(a_15||...||a_0)=l(a_15,...,a_0)||a_15||...||a_1,\n\
    \      where a_15||...||a_0 belongs to V_128, a_i belongs to V_8,\n      i=0,1,...,15,\n\
    \   L:V_128-> V_128  L(a)=R^(16)(a), where a belongs to V_128,\n   R^(-1):V_128->\
    \ V_128  the inverse transformation of R, which may be\n      calculated, for\
    \ example, as follows: R^(-1)(a_15||...||a_0)=a_14||\n      a_13||...||a_0||l(a_14,a_13,...,a_0,a_15),\
    \ where a_15||...||a_0\n      belongs to V_128, a_i belongs to V_8, i=0,1,...,15,\n\
    \   L^(-1):V_128-> V_128  L^(-1)(a)=(R^(-1))(16)(a), where a belongs to\n    \
    \  V_128, and\n   F[k]:V_128[*]V_128 -> V_128[*]V_128\n      F[k](a_1,a_0)=(LSX[k](a_1)(xor)a_0,a_1),\
    \ where k, a_0, a_1 belong\n      to V_128.\n"
- title: 4.4.  Key Schedule
  contents:
  - "4.4.  Key Schedule\n   Key schedule uses round constants C_i belonging to V_128,\
    \ i=1, 2,\n   ..., 32, defined as\n   C_i=L(Vec_128(i)), i=1,2,...,32.\n   Round\
    \ keys K_i, i=1, 2, ..., 10 are derived from key\n   K=k_255||...||k_0 belonging\
    \ to V_256, k_i belongs to V_1, i=0, 1,\n   ..., 255, as follows:\n   K_1=k_255||...||k_128;\n\
    \   K_2=k_127||...||k_0;\n   (K_(2i+1),K_(2i+2))=F[C_(8(i-1)+8)]...\n    F[C_(8(i-1)+1)](K_(2i-1),K_(2i)),\
    \ i=1,2,3,4.\n"
- title: 4.5.  Basic Encryption Algorithm
  contents:
  - '4.5.  Basic Encryption Algorithm

    '
- title: 4.5.1.  Encryption
  contents:
  - "4.5.1.  Encryption\n   Depending on the values of round keys K_1,...,K_10, the\
    \ encryption\n   algorithm is a substitution E_(K_1,...,K_10) defined as follows:\n\
    \   E_(K_1,...,K_10)(a)=X[K_10]LSX[K_9]...LSX[K_2]LSX[K_1](a),\n   where a belongs\
    \ to V_128.\n"
- title: 4.5.2.  Decryption
  contents:
  - "4.5.2.  Decryption\n   Depending on the values of round keys K_1,...,K_10, the\
    \ decryption\n   algorithm is a substitution D_(K_1,...,K_10) defined as follows:\n\
    \   D_(K_1,...,K_10)(a)=X[K_1]L^(-1)S^(-1)X[K_2]...\n    L^(-1)S^(-1)X[K_9] L^(-1)S^(-1)X[K_10](a),\n\
    \   where a belongs to V_128.\n"
- title: 5.  Examples (Informative)
  contents:
  - "5.  Examples (Informative)\n   This section is for information only and is not\
    \ a normative part of\n   the standard.\n"
- title: 5.1.  Transformation S
  contents:
  - "5.1.  Transformation S\n   S(ffeeddccbbaa99881122334455667700) =\n    b66cd8887d38e8d77765aeea0c9a7efc,\n\
    \   S(b66cd8887d38e8d77765aeea0c9a7efc) =\n    559d8dd7bd06cbfe7e7b262523280d39,\n\
    \   S(559d8dd7bd06cbfe7e7b262523280d39) =\n    0c3322fed531e4630d80ef5c5a81c50b,\n\
    \   S(0c3322fed531e4630d80ef5c5a81c50b) =\n    23ae65633f842d29c5df529c13f5acda.\n"
- title: 5.2.  Transformation R
  contents:
  - "5.2.  Transformation R\n   R(00000000000000000000000000000100) =\n    94000000000000000000000000000001,\n\
    \   R(94000000000000000000000000000001) =\n    a5940000000000000000000000000000,\n\
    \   R(a5940000000000000000000000000000) =\n    64a59400000000000000000000000000,\n\
    \   R(64a59400000000000000000000000000) =\n    0d64a594000000000000000000000000.\n"
- title: 5.3.  Transformation L
  contents:
  - "5.3.  Transformation L\n   L(64a59400000000000000000000000000) =\n    d456584dd0e3e84cc3166e4b7fa2890d,\n\
    \   L(d456584dd0e3e84cc3166e4b7fa2890d) =\n    79d26221b87b584cd42fbc4ffea5de9a,\n\
    \   L(79d26221b87b584cd42fbc4ffea5de9a) =\n    0e93691a0cfc60408b7b68f66b513c13,\n\
    \   L(0e93691a0cfc60408b7b68f66b513c13) =\n    e6a8094fee0aa204fd97bcb0b44b8580.\n"
- title: 5.4.  Key Schedule
  contents:
  - "5.4.  Key Schedule\n   In this test example, the key is equal to:\n   K = 8899aabbccddeeff0011223344556677fedcba9876543210012345678\n\
    \        9abcdef.\n   K_1 = 8899aabbccddeeff0011223344556677,\n   K_2 = fedcba98765432100123456789abcdef.\n\
    \   C_1 = 6ea276726c487ab85d27bd10dd849401,\n   X[C_1](K_1) = e63bdcc9a09594475d369f2399d1f276,\n\
    \   SX[C_1](K_1) = 0998ca37a7947aabb78f4a5ae81b748a,\n   LSX[C_1](K_1) = 3d0940999db75d6a9257071d5e6144a6,\n\
    \   F[C_1](K_1, K_2) = = (c3d5fa01ebe36f7a9374427ad7ca8949,\n          8899aabbccddeeff0011223344556677).\n\
    \   C_2 = dc87ece4d890f4b3ba4eb92079cbeb02,\n   F [C_2]F [C_1](K_1, K_2) = (37777748e56453377d5e262d90903f87,\n\
    \          c3d5fa01ebe36f7a9374427ad7ca8949).\n   C_3 = b2259a96b4d88e0be7690430a44f7f03,\n\
    \   F[C_3]...F[C_1](K_1, K_2) = (f9eae5f29b2815e31f11ac5d9c29fb01,\n         \
    \ 37777748e56453377d5e262d90903f87).\n   C_4 = 7bcd1b0b73e32ba5b79cb140f2551504,\n\
    \   F[C_4]...F[C_1](K_1, K_2) = (e980089683d00d4be37dd3434699b98f,\n         \
    \ f9eae5f29b2815e31f11ac5d9c29fb01).\n   C_5 = 156f6d791fab511deabb0c502fd18105,\n\
    \   F[C_5]...F[C_1](K_1, K_2) = (b7bd70acea4460714f4ebe13835cf004,\n         \
    \ e980089683d00d4be37dd3434699b98f).\n   C_6 = a74af7efab73df160dd208608b9efe06,\n\
    \   F[C_6]...F[C_1](K_1, K_2) = (1a46ea1cf6ccd236467287df93fdf974,\n         \
    \ b7bd70acea4460714f4ebe13835cf004).\n   C_7 = c9e8819dc73ba5ae50f5b570561a6a07,\n\
    \   F[C_7]...F [C_1](K_1, K_2) = (3d4553d8e9cfec6815ebadc40a9ffd04,\n        \
    \  1a46ea1cf6ccd236467287df93fdf974).\n   C_8 = f6593616e6055689adfba18027aa2a08,\n\
    \   (K_3, K_4) = F [C_8]...F [C_1](K_1, K_2) =\n          (db31485315694343228d6aef8cc78c44,\n\
    \           3d4553d8e9cfec6815ebadc40a9ffd04).\n   The round keys K_i, i = 1,\
    \ 2, ..., 10, take the following values:\n   K_1 = 8899aabbccddeeff0011223344556677,\n\
    \   K_2 = fedcba98765432100123456789abcdef,\n   K_3 = db31485315694343228d6aef8cc78c44,\n\
    \   K_4 = 3d4553d8e9cfec6815ebadc40a9ffd04,\n   K_5 = 57646468c44a5e28d3e59246f429f1ac,\n\
    \   K_6 = bd079435165c6432b532e82834da581b,\n   K_7 = 51e640757e8745de705727265a0098b1,\n\
    \   K_8 = 5a7925017b9fdd3ed72a91a22286f984,\n   K_9 = bb44e25378c73123a5f32f73cdb6e517,\n\
    \   K_10 = 72e9dd7416bcf45b755dbaa88e4a4043.\n"
- title: 5.5.  Test Encryption
  contents:
  - "5.5.  Test Encryption\n   In this test example, encryption is performed on the\
    \ round keys\n   specified in Section 5.4.  Let the plaintext be\n   a = 1122334455667700ffeeddccbbaa9988,\n\
    \   then\n   X[K_1](a) = 99bb99ff99bb99ffffffffffffffffff,\n   SX[K_1](a) = e87de8b6e87de8b6b6b6b6b6b6b6b6b6,\n\
    \   LSX[K_1](a) = e297b686e355b0a1cf4a2f9249140830,\n   LSX[K_2]LSX[K_1](a) =\
    \ 285e497a0862d596b36f4258a1c69072,\n   LSX[K_3]...LSX[K_1](a) = 0187a3a429b567841ad50d29207cc34e,\n\
    \   LSX[K_4]...LSX[K_1](a) = ec9bdba057d4f4d77c5d70619dcad206,\n   LSX[K_5]...LSX[K_1](a)\
    \ = 1357fd11de9257290c2a1473eb6bcde1,\n   LSX[K_6]...LSX[K_1](a) = 28ae31e7d4c2354261027ef0b32897df,\n\
    \   LSX[K_7]...LSX[K_1](a) = 07e223d56002c013d3f5e6f714b86d2d,\n   LSX[K_8]...LSX[K_1](a)\
    \ = cd8ef6cd97e0e092a8e4cca61b38bf65,\n   LSX[K_9]...LSX[K_1](a) = 0d8e40e4a800d06b2f1b37ea379ead8e.\n\
    \   Then the ciphertext is\n   b = X[K_10]LSX[K_9]...LSX[K_1](a) = 7f679d90bebc24305a468d42b9d4edcd.\n"
- title: 5.6.  Test Decryption
  contents:
  - "5.6.  Test Decryption\n   In this test example, decryption is performed on the\
    \ round keys\n   specified in Section 5.4.  Let the ciphertext be\n   b = 7f679d90bebc24305a468d42b9d4edcd,\n\
    \   then\n   X[K_10](b) = 0d8e40e4a800d06b2f1b37ea379ead8e,\n   L^(-1)X[K_10](b)\
    \ = 8a6b930a52211b45c5baa43ff8b91319,\n   S^(-1)L^(-1)X[K_10](b) = 76ca149eef27d1b10d17e3d5d68e5a72,\n\
    \   S^(-1)L^(-1)X[K_9]S^(-1)L^(-1)X[K_10](b) =\n    5d9b06d41b9d1d2d04df7755363e94a9,\n\
    \   S^(-1)L^(-1)X[K_8]...S^(-1)L^(-1)X[K_10](b) =\n    79487192aa45709c115559d6e9280f6e,\n\
    \   S^(-1)L^(-1)X[K_7]...S^(-1)L^(-1)X[K_10](b) =\n    ae506924c8ce331bb918fc5bdfb195fa,\n\
    \   S^(-1)L^(-1)X[K_6]...S^(-1)L^(-1)X[K_10](b) =\n    bbffbfc8939eaaffafb8e22769e323aa,\n\
    \   S^(-1)L^(-1)X[K_5]...S^(-1)L^(-1)X[K_10](b) =\n    3cc2f07cc07a8bec0f3ea0ed2ae33e4a,\n\
    \   S^(-1)L^(-1)X[K_4]...S^(-1)L^(-1)X[K_10](b) =\n    f36f01291d0b96d591e228b72d011c36,\n\
    \   S^(-1)L^(-1)X[K_3]...S^(-1)L^(-1)X[K_10](b) =\n    1c4b0c1e950182b1ce696af5c0bfc5df,\n\
    \   S^(-1)L^(-1)X[K_2]...S^(-1)L^(-1)X[K_10](b) =\n    99bb99ff99bb99ffffffffffffffffff.\n\
    \   Then the plaintext is\n   a = X[K_1]S^(-1)L^(-1)X[K_2]...S^(-1)L^(-1)X[K_10](b)\
    \ =\n    1122334455667700ffeeddccbbaa9988.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This entire document is about security considerations.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [GOST3412-2015]\n              \"Information technology.\
    \  Cryptographic data security.\n              Block ciphers\", GOST R 34.12-2015,\
    \ Federal Agency on\n              Technical Regulating and Metrology, 2015.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [ISO-IEC10116]\n              ISO/IEC, \"Information\
    \ technology -- Security techniques --\n              Modes of operation for an\
    \ n-bit block cipher\", ISO/\n              IEC 10116, 2006.\n   [ISO-IEC18033-1]\n\
    \              ISO/IEC, \"Information technology -- Security techniques --\n \
    \             Encryption algorithms -- Part 1: General\", ISO/\n             \
    \ IEC 18033-1, 2015.\n   [ISO-IEC18033-3]\n              ISO/IEC, \"Information\
    \ technology -- Security techniques --\n              Encryption algorithms --\
    \ Part 3: Block ciphers\", ISO/\n              IEC 18033-3, 2010.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Vasily Dolmatov (editor)\n   Research Computer Center MSU\n\
    \   Leninskiye Gory, 1, Building 4, MGU NIVC\n   Moscow  119991\n   Russian Federation\n\
    \   Email: dol@srcc.msu.ru\n"
