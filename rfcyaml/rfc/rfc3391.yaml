- title: __initial_text__
  contents:
  - '         The MIME Application/Vnd.pwg-multiplexed Content-Type

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG believes use of this media type is only appropriate in\n\
    \   situations where the producer is fully aware of the capabilities and\n   limitations\
    \ of the consumer.  In particular, this mechanism is very\n   dependent on the\
    \ producer knowing when the consumer will need a\n   particular component of a\
    \ multipart object.  But consumers\n   potentially work in many different ways\
    \ and different consumers may\n   need different things at different times.  This\
    \ mechanism provides no\n   means for a producer to determine the needs of a particular\
    \ consumer\n   and how they are to be accommodated.\n   Alternative mechanisms,\
    \ such as a protocol based on BEEP which is\n   capable of bidirectional communication\
    \ between the producer and\n   consumer, should be considered when the capabilities\
    \ of the consumer\n   are not known by the producer.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Application/Vnd.pwg-multiplexed content-type, like the\n   Multipart/Related\
    \ content-type, provides a mechanism for representing\n   objects that consist\
    \ of multiple components.  An\n   Application/Vnd.pwg-multiplexed entity contains\
    \ a sequence of chunks.\n   Each chunk contains a MIME message or a part of a\
    \ MIME message.  Each\n   MIME message represents a component of the compound\
    \ object, just as a\n   body part of a Multipart/Related entity represents a component.\
    \  With\n   a Multipart/Related entity, a body part and its reference in some\n\
    \   other body part may be separated by many octets.  With an\n   Application/Vnd.pwg-multiplexed\
    \ entity, a message and its reference\n   in some other message can be made quite\
    \ close by chunking the message\n   containing the reference.  For example, if\
    \ a long message contains\n   references to images and the producer does not know\
    \ of the need for\n   each image until it generates the reference, then\n   Application/Vnd.pwg-multiplexed\
    \ allows the consumer to process the\n   reference to the image and the image\
    \ before it consumes the entire\n   long message.  This ability is important in\
    \ printing and scanning\n   applications.  This document defines the Application/Vnd.pwg-\n\
    \   multiplexed content-type. It also provides examples of its use.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction....................................................2\n\
    \   2. Terminology.....................................................7\n   3.\
    \ Details.........................................................9\n   3.1  Syntax\
    \ of Application/Vnd.pwg-multiplexed Contents...........10\n   3.2  Parameters\
    \ for Application/Vnd.pwg-multiplexed...............12\n   3.2.1  The \"type\"\
    \ Parameter.......................................12\n   3.2.2  Syntax.....................................................12\n\
    \   4. Handling Application/Vnd.pwg-multiplexed Entities..............12\n   5.\
    \ Examples.......................................................13\n   5.1  Example\
    \ With Multipart/Related...............................14\n   5.2  Examples with\
    \ Application/Vnd.pwg-multiplexed................15\n   5.2.1  Example Where Each\
    \ Chunk Has a Complete Message............15\n   5.2.2  Example of Chunking the\
    \ Root Message.......................17\n   5.2.3  Example of Chunking the Several\
    \ Messages...................18\n   5.2.4  Example of Chunks with Empty Payloads......................20\n\
    \   6. Security Considerations........................................22\n   7.\
    \ Registration Information for Application/Vnd.pwg-multiplexed...22\n   8. Acknowledgments................................................23\n\
    \   9. References.....................................................23\n   10.\
    \ Author's Address..............................................24\n   11. Full\
    \ Copyright Statement......................................25\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The simple MIME content-types, such as \"text/plain\" provide\
    \ a\n   mechanism for representing a simple object, such as a text document.\n\
    \   The Multipart/Related [RFC2387] content-type provides a mechanism for\n  \
    \ representing a compound object, such as a text document with two gif\n   images.\n\
    \   A compound object consists of multiple components.  One such\n   component\
    \ is the root component, which contains references to other\n   components of\
    \ the compound object.  These components may, in turn,\n   contain references\
    \ to other components of the compound object.  For\n   example, a compound object\
    \ could consist of a root html text\n   component and two gif image components\
    \ -- each referenced by the root\n   component.\n   A compound object and a component\
    \ are both abstractions.  For\n   transmission over the wire or writing to storage,\
    \ each needs a\n   representation.  A \"Multipart/Related entity\" is one possible\n\
    \   representation of a compound object, and a \"body part\" is one\n   possible\
    \ representation of a component.\n   However, the Multipart/Related content-type\
    \ is not a good solution\n   for applications that require each component to be\
    \ close to its\n   corresponding reference in the root component.  This document\
    \ defines\n   a new MIME content-type Application/Vnd.pwg-multiplexed that provides\n\
    \   a better solution for some applications.  The Application/Vnd.pwg-\n   multiplexed\
    \ content-type, like the Multipart/Related content-type,\n   provides a common\
    \ mechanism for representing a compound object.  A\n   Multipart/Related entity\
    \ consists of a sequence of body parts\n   separated by boundary strings.  Each\
    \ body part represents a component\n   of the compound object.  An Application/Vnd.pwg-multiplexed\
    \ entity\n   consists of a sequence of chunks, each of whose length is specified\n\
    \   in the chunk header.  Each chunk contains a message or a part of a\n   message.\
    \  Each message represents a component of the compound object.\n   Chunks from\
    \ different messages can be interleaved.  HTTP is the\n   typical transport for\
    \ an Application/Vnd.pwg-multiplexed entity over\n   the wire.  An Application/Vnd.pwg-multiplexed\
    \ entity could be stored\n   in a Microsoft HTML (message/rfc822) file whose suffix\
    \ is .mht.\n   The following paragraphs contain three examples of applications.\
    \  For\n   each application, there is a discussion of its solution with the\n\
    \   Application/Vnd.pwg-multiplexed content-type, the Multipart/Related\n   content-type\
    \ and BEEP [RFC3080].\n   Example 1: a printing application.  A Producer creates\
    \ a print stream\n   that consists of a very long series of page descriptions,\
    \ each of\n   which references one or more images.  The root component is the\
    \ long\n   series of page descriptions.  An image may be referenced from\n   multiple\
    \ pages descriptions, and there is a mechanism to indicate\n   when there are\
    \ no additional references to an image (i.e., the image\n   is out of scope).\
    \  The Producer does not know what images to include\n   with a page until it\
    \ generates that page.  The Consumer is presumed\n   to have enough storage to\
    \ hold all in-scope images and enough of the\n   root component to process at\
    \ least one page.  The Producer doesn't\n   need any knowledge of the Consumer's\
    \ storage capabilities in order to\n   create an entity that the Consumer can\
    \ successfully process.\n   However, the Producer needs to be prudent about the\
    \ number of images\n   that are in-scope at any time.  Of course, a malicious\
    \ Producer may\n   try to exceed the storage capabilities of the Consumer, and\
    \ the\n   Consumer must guard against such entities (see section 6).  Here are\n\
    \   ways to represent this compound object.\n      With the Application/Vnd.pwg-multiplexed\
    \ content-type, each image\n      is a message and the root component is a message.\
    \  The Producer\n      breaks the root component message into chunks with each\
    \ image\n      message occurring shortly before its first reference.  When the\n\
    \      Consumer encounters a reference, it can assume that it has already\n  \
    \    received the referenced image in an earlier chunk.\n      With the Multipart/Related\
    \ content-type, each image must either\n      precede or follow the root component.\n\
    \         If images follow the root component, the Consumer must read all\n  \
    \       remaining pages of the root component before it can print the\n      \
    \   first page that references such images.  The Consumer must wait\n        \
    \ to print such a page until it has received the entire root\n         component,\
    \ and the Consumer may not have the space to hold the\n         remaining pages.\n\
    \         If images precede the root component, the Producer must\n         determine\
    \ and send all such images before it sends the root\n         component.  The\
    \ Consumer must, in the best case, wait some\n         additional time before\
    \ it receives the first page of the root\n         component.  In the worse case,\
    \ the Consumer may not have enough\n         storage for all the images.\n   \
    \      The Multipart/Related solution is not a good solution because\n       \
    \  of the wait time and because, in some cases, the Consumer may\n         not\
    \ have sufficient storage for all of the images.\n      With BEEP, the images\
    \ and root component can be sent in separate\n      channels.  The Producer can\
    \ push each image when it encounters the\n      first reference or the Consumer\
    \ can request it when it encounters\n      the first reference.  The over-the-wire\
    \ stream of octets is\n      similar to an Application/Vnd.pwg-multiplexed entity.\
    \  However,\n      there is a substantial difference in behavior for a printing\n\
    \      application.  With the Application/Vnd.pwg-multiplexed content-\n     \
    \ type, the Producer puts each image message before its first\n      reference\
    \ so that when the Consumer encounters a reference, the\n      image is guaranteed\
    \ to be present on the printer.  With BEEP, if\n      the Consumer pulls the image,\
    \ the Consumer has to wait while the\n      image comes over the network.  If\
    \ the Producer pushes the image,\n      BEEP may put the image message after its\
    \ first reference and the\n      Consumer may still have to wait for the image.\
    \  A high-speed\n      printer should not have to risk waiting for images; otherwise\
    \ it\n      cannot run at full speed.\n   Example 2: a scanning (fax-like) application.\
    \  The Producer is a\n   scanner, which scans pages and sends them along with\
    \ a vnd.pwg-\n   xhtml-print+xml root component that contains references to each\
    \ page\n   image.  Each page is referenced exactly once in the root-component.\n\
    \   The Consumer is a printer that consumes vnd.pwg-xhtml-print+xml\n   entities\
    \ and their attachments.  That is, the Consumer is not limited\n   to print jobs\
    \ that come from scanners.  A Producer and Consumer are\n   each presumed to have\
    \ enough storage to hold a few page images and\n   most if not all of the root\
    \ component.  The Producer doesn't need any\n   additional knowledge of the Consumer's\
    \ storage capabilities in order\n   to create an entity that the Consumer can\
    \ successfully process.  Of\n   course, a malicious Producer may try to exceed\
    \ the storage\n   capabilities of the Consumer and the Consumer must guard against\
    \ such\n   entities (see section 6).  Here are ways to represent this compound\n\
    \   object.\n      With the Application/Vnd.pwg-multiplexed content-type, each\
    \ page\n      image is a message and the root component is a message.  The\n \
    \     Producer breaks the root component message into chunks with each\n     \
    \ image message just before or just after its reference.\n      With the Multipart/Related\
    \ content-type, the images cannot precede\n      the root component because the\
    \ Consumer might not have enough\n      space to store them until the root component\
    \ arrived.  In this\n      case, the printer could fail to print the job correctly\
    \ and the\n      Producer might not know.  Therefore the images must follow the\n\
    \      root component, and the Producer must scan all pages before it can\n  \
    \    send the first page.  At the very least, this solution delays the\n     \
    \ printing of the pages until all have been scanned.  In the worst\n      case,\
    \ the Producer does not have sufficient memory to buffer the\n      images, and\
    \ the job fails.\n      With BEEP, the issues are the same as in the previous\
    \ example,\n      except that speed is not as important in this case.  So BEEP\
    \ is a\n      viable alternative for this example.\n   Example 3: a printing application.\
    \  A Producer creates a print stream\n   that consists of a series of pages, each\
    \ of which references zero or\n   more images.  Each image is referenced exactly\
    \ once.  The Producer\n   does not know what images to include with a page until\
    \ it generates\n   that page, and the Producer doesn't know the layout details;\
    \ the\n   Consumer handles layout.  The Producer has enough storage to send the\n\
    \   root component and all images.  However, it may not have enough\n   storage\
    \ to hold the entire root component or all octets of any of the\n   images.  The\
    \ Consumer is presumed to have enough storage to render\n   the root component\
    \ and to render each image.  It may not have enough\n   storage to hold the entire\
    \ root component or all octets of any of the\n   images.  The Producer doesn't\
    \ determine the Consumer's storage\n   capabilities.  Rather it arranges the components\
    \ so that the Consumer\n   is mostly likely to succeed.  Of course, a malicious\
    \ Producer may try\n   to exceed the storage capabilities of the Consumer, and\
    \ the Consumer\n   must guard against such entities (see section 6).  Here are\
    \ ways to\n   represent this compound object.\n      With the Application/Vnd.pwg-multiplexed\
    \ content-type, each image\n      is a message and the root component is a message.\
    \  The Producer\n      breaks the root component message into chunks with each\
    \ image\n      message just after its reference.  The references appear first\
    \ so\n      that the Consumer knows the location of each image before it\n   \
    \   processes the image.  This strategy minimizes storage needs for\n      Producer\
    \ and Consumer and provides a good strategy in case of\n      failure.  Here are\
    \ the cases to consider.\n      a) When the document consists of vertically aligned\
    \ blocks where\n         each block contains either lines of text or a single\
    \ image, the\n         sequence of chunks is the same as the sequence of printable\n\
    \         blocks, thus minimizing Consumer buffering needs.\n      b) When a block\
    \ can contain N side-by-side images, the Consumer\n         must buffer N-1 images\
    \ unless the Producer interleaves the\n         images.  If the Producer doesn't\
    \ interleave the images, and the\n         Consumer runs out of storage before\
    \ it has received N-1,\n         images, it can print what it has and print the\
    \ remaining images\n         below; not what the Producer intended, but better\
    \ than nothing.\n         If the Producer interleaves images, and the Consumer\
    \ runs out\n         of storage before it has received the bands of N images,\
    \ the\n         Consumer would print portions of images interleaved with\n   \
    \      portions of other images.  So, a Producer should not interleave\n     \
    \    images.\n      c) When a block contains text and image side-by-side (i.e.,\
    \ run-\n         around text), there are additional buffering requirements.\n\
    \         When the Consumer processes the text that follows the\n         reference,\
    \ it will place some of it next to the image (run-\n         around text) and\
    \ will place the remaining text after the image.\n         The Producer doesn't\
    \ know where the run-around ends, and thus\n         doesn't know where to end\
    \ the text chunk and start the image\n         chunk.  If the Producer ends the\
    \ text too soon, then the\n         Consumer either has to process the entire\
    \ image (if it has\n         enough storage) in order to get the remaining run-around\
    \ text,\n         or it ends the run-around text prematurely.  If the Producer\n\
    \         ends the text too late, then the Consumer may have to store too\n  \
    \       much text and possibly put the image later than the Producer\n       \
    \  requested.  Because text data requires significantly less\n         storage\
    \ than image data, a good strategy for Producer is to err\n         on the side\
    \ of sending too much rather than too little text\n         before the image data.\n\
    \      d) When a block contains text and multiple side-by-side images,\n     \
    \    the problem becomes a combination of items b) and c) above.\n      The Application/Vnd.pwg-multiplexed\
    \ content-type can be made to\n      work in this example, but a Consumer must\
    \ have failure strategies\n      and the result may not be quite what the producer\
    \ intended.  With\n      the Multipart/Related content-type, the images cannot\
    \ precede the\n      root component because the Consumer might not have enough\
    \ space to\n      store them until the root component arrived.  Also, the images\n\
    \      cannot follow the root component because the Consumer might not\n     \
    \ have enough storage for the root component before the first image\n      arrives.\
    \  So the Multipart/Related content-type is not an\n      acceptable solution\
    \ for this example.\n      With BEEP, the Producer can send the root component\
    \ on channel 1\n      and the Consumer can request images on even numbered channels\
    \ when\n      it encounters a reference.  This solution allows more flexibility\n\
    \      than the Application/Vnd.pwg-multiplexed content-type.  If there\n    \
    \  are side-by-side images and/or run-around text, the Consumer can\n      request\
    \ bands of each image or run-around text over separate\n      channels.\n   In\
    \ all of these examples, the Application/Vnd.pwg-multiplexed\n   content-type\
    \ provides a much better solution than Multipart/Related.\n   However, it is evenly\
    \ matched with BEEP.  For applications where\n   speed is important and ordering\
    \ of the chunks is important in order\n   to avoid printing delays, the Application/Vnd.pwg-multiplexed\n\
    \   content-type is best.  For applications, where the Consumer needs\n   more\
    \ control over the ordering of received octets, BEEP is best.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   This document uses some of the MIME terms that are defined\
    \ in\n   [RFC2045].  The following are the terms used in this document:\n    \
    \  Entity: the headers and the content.  In this document, the term\n      \"\
    entity\" describes all the octets that represent a compound\n      object.\n \
    \     Message: an entity as in [RFC2045].  In this document, the term\n      \"\
    message\" describes all octets that represent one component of a\n      compound\
    \ object.  That is, it has MIME headers and content.\n      Body Part: an entity\
    \ inside a multipart.  That is, a body part is\n      the headers and content\
    \ (i.e., octets) between the multipart\n      boundary strings not including the\
    \ CRLF at the beginning and end.\n      This document never uses \"entity\" to\
    \ mean \"body part\".\n      Headers: the initial lines of an entity, message\
    \ or body part.  An\n      empty line (i.e., two adjacent CRLFs) terminates the\
    \ headers.\n      Sometimes the term \"MIME header\" is used instead of just \"\
    header\".\n      Content: the part of an entity, message or body part that follows\n\
    \      the headers (i.e., follows the two adjacent CRLFs).  The content\n    \
    \  of a body part ends at the octet preceding the CRLF before the\n      multipart\
    \ boundary string.  The content of a message ends at the\n      octets specified\
    \ by the length field in the Chunk Header.\n   This document uses the following\
    \ additional terms.\n      Chunk: a chunk of data, consisting of a chunk header,\
    \ a chunk\n      payload and a CRLF.\n      Chunk Header: the first line of a\
    \ chunk.  The line consists of the\n      \"CHK\" keyword, the message number,\
    \ the length and the continuation\n      indicator, each separated by a single\
    \ space character (ASCII 32).\n      A CRLF terminates the line.  Each message\
    \ in an\n      Application/Vnd.pwg-multiplexed entity has a message number that\n\
    \      normally differs from the message numbers of all other messages in\n  \
    \    the Application/Vnd.pwg-multiplexed entity.  The message number 0\n     \
    \ is reserved for final Chunk Header in the Application/Vnd.pwg-\n      multiplexed\
    \ entity.\n      Chunk Payload: the octets between the Chunk Header and the Chunk\n\
    \      Header of the next chunk.  The length field in the header's length\n  \
    \    field specifies the number of octets in the Chunk Payload.  The\n      Chunk\
    \ Payload is either a complete message or a part of a message.\n      The continuation\
    \ field in the header specifies whether the chunk\n      is the last chunk of\
    \ the message.\n      CRLF: the sequence of octets corresponding to the two US-ASCII\n\
    \      characters CR (decimal value 13) and LF (decimal value 10) which,\n   \
    \   taken together, in this order, denote a line break.  A CRLF\n      terminates\
    \ each chunk in order to provide visual separation from\n      the next chunk\
    \ header.\n      Consumer: the software that receives and processes a MIME entity,\n\
    \      e.g., software in a printer or software that reads a file.\n      Producer:\
    \ the software that creates and sends a MIME entity, e.g.,\n      software in\
    \ a scanner or software that writes a file.\n"
- title: 3. Details
  contents:
  - "3. Details\n   The Application/Vnd.pwg-multiplexed content-type, like\n   Multipart/Related,\
    \ is intended to represent a compound object\n   consisting of several inter-related\
    \ components.  This document does\n   not specify the representation of these\
    \ relationships, but [RFC2557]\n   contains examples of Multipart/Related entities\
    \ that use the\n   Content-ID and Content-Location headers to identify body parts\
    \ and\n   URLs (including the \"cid\" URL) to reference body parts.  It is\n \
    \  expected that Application/Vnd.pwg-multiplexed entities would use the\n   patterns\
    \ described in [RFC2557].\n   For an Application/Vnd.pwg-multiplexed entity, there\
    \ is one parameter\n   for the Content-Type header.  It is a \"type\" parameter,\
    \ and it is\n   like the \"type\" parameter for the Multipart/Related content-type.\n\
    \   The value of the \"type\" parameter must be the content-type of the\n   root\
    \ message and it effectively specifies the type of the compound\n   object.\n\
    \   An Application/Vnd.pwg-multiplexed entity contains a sequence of\n   chunks.\
    \  Each chunk consists of a chunk header, a chunk payload and a\n   CRLF.\n  \
    \   - The chunk header consists of a \"CHK\" keyword followed by the\n       message\
    \ number, the chunk payload length, whether the chunk is\n       the last chunk\
    \ of a message and, finally, a CRLF.  The length\n       field removes the need\
    \ for boundary strings that Multipart uses.\n       (See section 3.1 for the syntax\
    \ of a chunk header).\n     - The chunk payload is a sequence of octets that is\
    \ either a\n       complete message or a part of a message.\n     - The CRLF provides\
    \ visual separation from the following chunk.\n   Each message represents a component\
    \ of the compound object, and a\n   message is intended to have exactly the same\
    \ representation, octet\n   for octet, as a body part of a Multipart/Related entity\
    \ that\n   represents the same component.  When a message is split across\n  \
    \ multiple chunks, the chunks need not be contiguous.\n   The contents of an Application/Vnd.pwg-multiplexed\
    \ entity have the\n   following properties:\n      1) The first chunk contains\
    \ a complete or partial message that (in\n         either case) represents the\
    \ root component of the compound\n         object.\n      2) Additional chunks\
    \ contain messages or partial messages that\n         represent some component\
    \ of the compound object.\n      3) The final chunk's header contains a message\
    \ number of 0, a\n         length of 0 and a last-chunk-of-message mark (i.e.,\
    \ the chunk\n         header line is \"CHK 0 0 LAST\").  The final chunk contains\
    \ no\n         chunk payload.\n      4) A message can be broken into multiple\
    \ parts and each break can\n         occur anywhere within the message.  Each\
    \ part of the message is\n         zero or more bytes in length and each part\
    \ of the message is\n         the contents of its own chunk.  The order of the\
    \ chunks within\n         the Application/Vnd.pwg-multiplexed entity must be the\
    \ same as\n         the order of the parts within the message.\n      5) A message\
    \ represents a component of a compound object, and it\n         is intended that\
    \ it have exactly the same representation, octet\n         for octet, as a body\
    \ part of a Multipart/Related entity that\n         represents the same component.\
    \  In particular, the message may\n         contain a Content-Type header to specify\
    \ the content-type of\n         the message content.  Also, the message may contain\
    \ a Content-\n         ID header and/or Content-Location header to identify a\
    \ message\n         that is referenced from within another message.  If a message\n\
    \         contains no Content-Type header, then the message has an\n         implicit\
    \ content-type of  \"text/plain; charset=us-ascii\", cf.\n         [RFC2045].\n\
    \   See section 4 for a discussion displaying an Application/Vnd.pwg-\n   multiplexed\
    \ entity.\n"
- title: 3.1 Syntax of Application/Vnd.pwg-multiplexed Contents
  contents:
  - "3.1 Syntax of Application/Vnd.pwg-multiplexed Contents\n   The ABNF [RFC2234]\
    \ for the contents of an Application/Vnd.pwg-\n   multiplexed entity is:\n   contents\
    \ = *chunk finalChunk\n   chunk      = header payload CRLF\n   header     = \"\
    CHK\" SP messageNumber SP length SP isMore CRLF\n   messageNumber   = 1..2147483647\n\
    \   length   = 0..2147483647\n   isMore       = \"MORE\" / \"LAST\"\n   payload\
    \    = *OCTET\n   finalChunk = finalHeader CRLF\n   finalHeader  = \"CHK\" SP\
    \ \"0\" SP \"0\" SP \"LAST\" CRLF\n   The messageNumber field specifies the message\
    \ that the chunk is\n   associated with.  See the end of this section for more\
    \ details.\n   The length field specifies the number of octets in the chunk payload\n\
    \   (represented in ABNF as \"payload\").  The first octet of the chunk\n   payload\
    \ is the one immediately following the LF (i.e., final octet)\n   of the chunk\
    \ header.  The last octet of the chunk payload is the one\n   immediately preceding\
    \ the two octets CRLF that end the chunk.\n   The isMore field has a value of\
    \ \"LAST\" for the last chunk of a\n   message and \"MORE\" for all other chunks\
    \ of a message.\n   Normally each message in an Application/Vnd.pwg-multiplexed\
    \ entity\n   has a unique message number, and a message consists of the\n   concatenation\
    \ of all the octets from the one or more chunks with the\n   same message number.\
    \  The isMore field of the chunk header of the\n   last chunk of each message\
    \ must have a value of \"LAST\" and the isMore\n   field of the chunk header of\
    \ all other chunks must have a value of\n   \"MORE\".\n   Two or more messages\
    \ may have the same message number, though such\n   reuse of message numbers is\
    \ not recommended.  The chunks with the\n   same message number represent a sequence\
    \ of one or more messages\n   where the isMore field of the chunk header of the\
    \ last chunk of each\n   message has a value of \"LAST\".  All chunks whose isMore\
    \ field of the\n   chunk header has the value of \"MORE\" belong to the same message\
    \ as\n   the next chunk (in sequence) whose isMore field of the chunk header\n\
    \   has the value of \"LAST\".  In other words, if two messages have the\n   same\
    \ message number, the last chunk of the first message must occur\n   before the\
    \ first chunk of the second message.\n   The behavior of the Consumer is undefined\
    \ if the final Chunk (i.e.,\n   the Chunk whose chunk header is \"CHK 0 0 LAST\"\
    ) occurs before the\n   last chunk of every message occurs.\n   Two adjacent chunks\
    \ usually have different message numbers.  However,\n   they may have the same\
    \ message number.  If two adjacent chunks have\n   the same message number, the\
    \ two chunks could be combined into a\n   single chunk, but they need not be combined.\n\
    \   The number of octets in a chunk payload may be zero, and an\n   Application/Vnd.pwg-multiplexed\
    \ entity may contain any number of\n   chunks with zero octets of chunk payload.\
    \  For example, the last\n   chunk of each message may contain zero octets for\
    \ programming\n   convenience.  As another example, suppose that a particular\
    \ compound\n   object format requires that referenced messages occur before the\
    \ root\n   message.  This document requires that the first chunk of an\n   Application/Vnd.pwg-multiplexed\
    \ entity contain the root message or a\n   part of it.  So, the first chunk contains\
    \ a chunk payload of zero\n   octets with the first octet of the root message\
    \ in the second chunk.\n   That is, all of the message headers of the root message\
    \ are in the\n   second chunk.  As an extreme but unlikely example, it would be\n\
    \   possible to have a message broken into ten chunks with zero octet\n   chunk\
    \ payloads in all chunks except for chunks 4 and 7.\n"
- title: 3.2 Parameters for Application/Vnd.pwg-multiplexed
  contents:
  - "3.2 Parameters for Application/Vnd.pwg-multiplexed\n   This section defines additional\
    \ parameters for Application/Vnd.pwg-\n   multiplexed.\n"
- title: 3.2.1 The "type" Parameter
  contents:
  - "3.2.1 The \"type\" Parameter\n   The type parameter must be specified.  Its value\
    \ is the content-type\n   of the \"root\" message.  It permits a Consumer to determine\
    \ the\n   content-type without reference to the enclosed message.  If the value\n\
    \   of the type parameter differs from the content-type of the root\n   message,\
    \ the Consumer's behavior is undefined.\n"
- title: 3.2.2 Syntax
  contents:
  - "3.2.2 Syntax\n   The syntax for \"parameter\" is:\n     parameter   := \"type\"\
    \  \"=\" type \"/\" subtype ; cf. [RFC2045]\n"
- title: 4. Handling Application/Vnd.pwg-multiplexed Entities
  contents:
  - "4. Handling Application/Vnd.pwg-multiplexed Entities\n   The application that\
    \ handles the Application/Vnd.pwg-multiplexed\n   entity has the responsibility\
    \ for displaying the entity.  However,\n   Application/Vnd.pwg-multiplexed messages\
    \ may contain Content-\n   Disposition headers that provide suggestions for the\
    \ display and\n   storage of a message, and in some cases the application may\
    \ pay\n   attention to such headers.\n   As a reminder, Content-Disposition headers\
    \ [RFC1806] allow the sender\n   to suggest presentation styles for MIME messages.\
    \  There are two\n   presentation styles, 'inline' and 'attachment'.  Content-Disposition\n\
    \   headers have a parameter for specifying a suggested file name for\n   storage.\n\
    \   There are three cases to consider for handling Application/Vnd.pwg-\n   multiplexed\
    \ entities:\n      a) The Consumer recognizes Application/Vnd.pwg-multiplexed\
    \ and the\n         content-type of the root.  The Consumer determines the\n \
    \        presentation style for the compound object; it handles the\n        \
    \ display of the components of the compound object in the context\n         of\
    \ the compound object.  In this case, the Content-Disposition\n         header\
    \ information is redundant or even misleading, and the\n         Consumer shall\
    \ ignore them for purposes of display.  The\n         Consumer may use the suggested\
    \ file name if the entity is\n         stored.\n      b) The Consumer recognizes\
    \ Application/Vnd.pwg-multiplexed, but\n         not the content-type of the root.\
    \  The Consumer will give the\n         user the choice of suppressing the entire\
    \ Application/Vnd.pwg-\n         multiplexed entity or treating the Application/Vnd.pwg-\n\
    \         multiplexed entity as a Multipart/Mixed entity where each\n        \
    \ message is a body part of the Multipart/Mixed entity.  In this\n         case\
    \ (where the entity is not suppressed), the Consumer may\n         find the Content-Disposition\
    \ information useful for displaying\n         each body part of the resulting\
    \ Multipart/Mixed entity.  If a\n         body part has no Content-Disposition\
    \ header, the Consumer\n         should display the body part as an attachment.\n\
    \      c) The Consumer does not recognize Application/Vnd.pwg-\n         multiplexed.\
    \  The Consumer treats the Application/Vnd.pwg-\n         multiplexed entity as\
    \ opaque and can do nothing with it.\n"
- title: 5. Examples
  contents:
  - "5. Examples\n   This section contains five examples.  Each example is a different\n\
    \   representation of the same compound object.  The compound object has\n   four\
    \ components: an XHTML text component and three image components.\n   The images\
    \ are encoded in binary.  The string \"<<binary data>>\" and\n   \"<<part of binary\
    \ data>>\" in each example represents all or part of\n   the binary data of each\
    \ image.  Two of the images are potentially\n   side by side and the third image\
    \ is displayed later in the document.\n   All of the images are identified by\
    \ Content-Id and two of the images\n   are also identified by a Content-Location.\
    \  One of the images\n   references the Content-Location.\n   The first example\
    \ shows a Multipart/Related representation of the\n   compound object in order\
    \ to provide a representation that the reader\n   is familiar with.  The remaining\
    \ examples show Application/Vnd.pwg-\n   multiplexed representations of the same\
    \ compound object.  In the\n   second example, each chunk contains a whole message.\
    \  In the third\n   example, the XHTML message is split across 3 chunks, and these\
    \ chunks\n   are interleaved among the three image messages.  In the fourth\n\
    \   example, the XHTML message is split across 4 chunks, and the two\n   side-by-side\
    \ images are each split across two chunks.  The XHTML\n   chunks are interleaved\
    \ among the image chunks.  In the fifth example,\n   there are chunks with empty\
    \ payloads and adjacent chunks with the\n   same message number.\n   The last\
    \ example may seem to address useless cases, but sometimes it\n   is easier to\
    \ write software if these cases are allowed.  For example,\n   when a buffer fills,\
    \ it may be easiest to write a chunk and not worry\n   if the previous chunk had\
    \ the same message number.  Likewise, it may\n   be easiest to end a message with\
    \ an empty chunk.  Finally, the\n   Application/Vnd.pwg-multiplexed content-type\
    \ requires that the first\n   chunk be part of the root message.  Sometimes, it\
    \ is more convenient\n   for the Producer if the root message starts after the\
    \ occurrence of\n   some attachments.  Since a chunk can be empty, the first chunk\
    \ of the\n   root message can be empty, i.e., it doesn't even contain any headers.\n\
    \   Then the first chunk contains a part of the root message, but the\n   Producer\
    \ doesn't generate any octets for that chunk.\n   Each body part of the Multipart/Related\
    \ entity and each message of\n   the Application/Vnd.pwg-multiplexed entity contain\
    \ a content-\n   disposition, which the Consumer uses according to the rules in\n\
    \   section 4.  Note the location of the content-disposition headers in\n   the\
    \ examples.\n"
- title: 5.1 Example With Multipart/Related
  contents:
  - "5.1 Example With Multipart/Related\n   In this example, the compound object is\
    \ represented as a\n   Multipart/Related entity so that the reader can compare\
    \ it with the\n   Application/Vnd.pwg-multiplexed entities.\n   Content-Type:\
    \ multipart/related; boundary=\"boundary-example\";\n                 type=\"\
    text/xhtml+xml\"\n   --boundary-example\n   Content-ID: <49568.44343xxx@foo.com>\n\
    \   Content-Type: application/vnd.pwg-xhtml-print+xml\n   Content-Disposition:\
    \ inline\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML\
    \ 1.0 Strict//EN\"\n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/TR/xhtml1\">\n      <body>\n         <p>some\
    \ text\n            <img src=\"cid:49568.45876xxx@foo.com\"/>\n            <img\
    \ src=\"http://foo.com/images/image2.gif\"/>\n            some more text after\
    \ the images\n         </p>\n         <p>some more text without images\n     \
    \    </p>\n         <p>some more text\n            <img src=\"cid:49568.47333xxx@foo.com\"\
    />\n         </p>\n         <p>some final text\n         </p>\n      </body>\n\
    \   </html>\n   --boundary-example\n   Content-ID: <49568.45876xxx@foo.com>\n\
    \   Content-Location: http://foo.com/images/image1.gif\n   Content-Type: image/gif\n\
    \   Content-Disposition: attachment\n   <<binary data>>\n   --boundary-example\n\
    \   Content-ID: <49568.46000xxx@foo.com>\n   Content-Location: http://foo.com/images/image2.gif\n\
    \   Content-Type: image/gif\n   Content-Disposition: attachment\n   <<binary data>>\n\
    \   --boundary-example\n   Content-ID: <49568.47333xxx@foo.com>\n   Content-Type:\
    \ image/gif\n   Content-Disposition: attachment\n   <<binary data>>\n   --boundary-example--\n"
- title: 5.2 Examples with Application/Vnd.pwg-multiplexed
  contents:
  - "5.2 Examples with Application/Vnd.pwg-multiplexed\n   The four examples in this\
    \ section show Application/Vnd.pwg-\n   multiplexed representations of the same\
    \ compound object.  Note that\n   each CRLF is represented by a visual line break.\n"
- title: 5.2.1 Example Where Each Chunk Has a Complete Message
  contents:
  - "5.2.1 Example Where Each Chunk Has a Complete Message\n   In this example, the\
    \ compound object is represented as an\n   Application/Vnd.pwg-multiplexed entity.\
    \  Each chunk contains an\n   entire message, i.e., none of the messages are split\
    \ across multiple\n   chunks.  Each message in this example is identical to the\n\
    \   corresponding body part in the preceding Multipart/Relate example.\n   Content-Type:\
    \ application/vnd.pwg-multiplexed;\n                 type=\"application/vnd.pwg-xhtml-print+xml\"\
    \n   CHK 1 550 LAST\n   Content-ID: <49568.44343xxx@foo.com>\n   Content-Type:\
    \ application/vnd.pwg-xhtml-print+xml\n   Content-Disposition: inline\n   <?xml\
    \ version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\
    \n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n   <html xmlns=\"\
    http://www.w3.org/TR/xhtml1\">\n      <body>\n         <p>some text\n        \
    \    <img src=\"cid:49568.45876xxx@foo.com\"/>\n            <img src=\"http://foo.com/images/image2.gif\"\
    />\n            some more text after the images\n         </p>\n         <p>some\
    \ more text without images\n         </p>\n         <p>some more text\n      \
    \      <img src=\"cid:49568.47333xxx@foo.com\"/>\n         </p>\n         <p>some\
    \ final text\n         </p>\n      </body>\n   </html>\n   CHK 2 6346 LAST\n \
    \  Content-ID: <49568.45876xxx@foo.com>\n   Content-Location: http://foo.com/images/image1.gif\n\
    \   Content-Type: image/gif\n   Content-Disposition: attachment\n   <<binary data>>\n\
    \   CHK 3 6401 LAST\n   Content-ID: <49568.46000xxx@foo.com>\n   Content-Location:\
    \ http://foo.com/images/image2.gif\n   Content-Type: image/gif\n   Content-Disposition:\
    \ attachment\n   <<binary data>>\n   CHK 4 7603 LAST\n   Content-ID: <49568.47333xxx@foo.com>\n\
    \   Content-Type: image/gif\n   Content-Disposition: attachment\n   <<binary data>>\n\
    \   CHK 0 0 LAST\n"
- title: 5.2.2 Example of Chunking the Root Message
  contents:
  - "5.2.2 Example of Chunking the Root Message\n   In this example, the compound\
    \ object is represented as an\n   Application/Vnd.pwg-multiplexed entity.  The\
    \ message containing the\n   XHTML component is split into 3 pieces so that the\
    \ reference to an\n   image is as close as possible to the beginning of the chunk.\
    \  The\n   chunk containing the referenced image message occurs just before the\n\
    \   chunk with the reference.  This minimizes the distance between\n   reference\
    \ and referenced message.\n   Note that there are other possible arrangements\
    \ (see the third\n   example in section 5.2.3).  For example, a sender could split\
    \ the\n   XHTML message so that the reference to an image is as close as\n   possible\
    \ to the end of the chunk.  Then the chunk containing the\n   referenced image\
    \ message should occur just after the chunk with the\n   reference.  The sender\
    \ could mix this strategy with the one used in\n   this example.\n   Content-Type:\
    \ application/vnd.pwg-multiplexed;\n                 type=\" application/vnd.pwg-xhtml-print+xml\"\
    \n   CHK 1 267 MORE\n   Content-ID: <49568.44343xxx@foo.com>\n   Content-Type:\
    \ application/vnd.pwg-xhtml-print+xml\n   Content-Disposition: inline\n   <?xml\
    \ version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\
    \n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n   <html xmlns=\"\
    http://www.w3.org/TR/xhtml1\">\n      <body>\n         <p>some text\n   CHK 2\
    \ 6346 LAST\n   Content-ID: <49568.45876xxx@foo.com>\n   Content-Location: http://foo.com/images/image1.gif\n\
    \   Content-Type: image/gif\n   Content-Disposition: attachment\n   <<binary data>>\n\
    \   CHK 3 6401 LAST\n   Content-ID: <49568.46000xxx@foo.com>\n   Content-Location:\
    \ http://foo.com/images/image2.gif\n   Content-Type: image/gif\n   Content-Disposition:\
    \ attachment\n   <<binary data>>\n   CHK 1 166 MORE\n            <img src=\"cid:49568.45876xxx@foo.com\"\
    />\n            <img src=\"http://foo.com/images/image2.gif\"/>\n            some\
    \ more text after the images\n         </p>\n         <p>some more text without\
    \ images\n         </p>\n         <p>some more text\n   CHK 4 7603 LAST\n   Content-ID:\
    \ <49568.47333xxx@foo.com>\n   Content-Type: image/gif\n   Content-Disposition:\
    \ attachment\n   <<binary data>>\n   CHK 1 80 LAST\n            <img src=\"cid:49568.47333xxx@foo.com\"\
    />\n         </p>\n         <p>some final text\n         </p>\n      </body>\n\
    \   </html>\n   CHK 0 0 LAST\n"
- title: 5.2.3 Example of Chunking the Several Messages
  contents:
  - "5.2.3 Example of Chunking the Several Messages\n   In this example, the compound\
    \ object is represented as an\n   Application/Vnd.pwg-multiplexed entity.  The\
    \ message containing the\n   XHTML component is split into 4 pieces so that the\
    \ reference to an\n   image is as close as possible to either the beginning or\
    \ the end of\n   the chunk.  The references to the first and second images closely\n\
    \   follow the referenced images.  The reference to the third image\n   closely\
    \ precedes the referenced image.  This minimizes the distance\n   between reference\
    \ and referenced message.  In addition, the first two\n   image messages are split\
    \ into two chunks each.\n   Content-Type: application/vnd.pwg-multiplexed;\n \
    \                type=\" application/vnd.pwg-xhtml-print+xml\"\n   CHK 1 303 MORE\n\
    \   Content-ID: <49568.44343xxx@foo.com>\n   Content-Type: application/vnd.pwg-xhtml-print+xml\n\
    \   Content-Disposition: inline\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html\
    \ PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/TR/xhtml1\">\n      <body>\n         <p>some\
    \ text\n   CHK 2 184 MORE\n   Content-ID: <49568.45876xxx@foo.com>\n   Content-Location:\
    \ http://foo.com/images/image1.gif\n   Content-Type: image/gif\n   Content-Disposition:\
    \ attachment\n   <<part of binary data>>\n   CHK 3 200 MORE\n   Content-ID: <49568.46000xxx@foo.com>\n\
    \   Content-Location: http://foo.com/images/image2.gif\n   Content-Type: image/gif\n\
    \   Content-Disposition: attachment\n   <<part of binary data>>\n   CHK 1 78 MORE\n\
    \            <img src=\"cid:49568.45876xxx@foo.com\"/>\n            <img src=\"\
    http://foo.com/images/image2.gif\"/>\n   CHK 2 6162 LAST\n   <<part of binary\
    \ data>>\n   CHK 3 6201 LAST\n   <<part of binary data>>\n   CHK 1 127 MORE\n\
    \            some more text after the images\n         </p>\n         <p>some\
    \ more text without images\n         </p>\n         <p>some more text\n      \
    \      <img src=\"cid:49568.47333xxx@foo.com\"/>\n   CHK 4 7603 LAST\n   Content-ID:\
    \ <49568.47333xxx@foo.com>\n   Content-Type: image/gif\n   Content-Disposition:\
    \ attachment\n   <<binary data>>\n   CHK 1 41 LAST\n         </p>\n         <p>some\
    \ final text\n         </p>\n      </body>\n   </html>\n   CHK 0 0 LAST\n"
- title: 5.2.4 Example of Chunks with Empty Payloads
  contents:
  - "5.2.4 Example of Chunks with Empty Payloads\n   This example is identical to\
    \ the previous one, except that some\n   chunks have a chunk payload of zero octets.\
    \  The root message starts\n   with a chunk whose payload is empty and every message\
    \ ends with a\n   chunk whose payload is empty.  This example also shows two adjacent\n\
    \   chunks that are from the same message.  These two chunks could be\n   coalesced\
    \ into a single chunk, but they might be kept separate for\n   programming convenience.\n\
    \   Content-Type: application/vnd.pwg-multiplexed;\n                 type=\" application/vnd.pwg-xhtml-print+xml\"\
    \n   CHK 1 0 MORE\n   CHK 2 184 MORE\n   Content-ID: <49568.45876xxx@foo.com>\n\
    \   Content-Location: http://foo.com/images/image1.gif\n   Content-Type: image/gif\n\
    \   Content-Disposition: attachment\n   <<part of binary data>>\n   CHK 3 200\
    \ MORE\n   Content-ID: <49568.46000xxx@foo.com>\n   Content-Location: http://foo.com/images/image2.gif\n\
    \   Content-Type: image/gif\n   Content-Disposition: attachment\n   <<part of\
    \ binary data>>\n   CHK 1 303 MORE\n   Content-ID: <49568.44343xxx@foo.com>\n\
    \   Content-Type: application/vnd.pwg-xhtml-print+xml\n   Content-Disposition:\
    \ inline\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML\
    \ 1.0 Strict//EN\"\n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/TR/xhtml1\">\n      <body>\n         <p>some\
    \ text\n   CHK 2 6162 MORE\n   <<part of binary data>>\n   CHK 3 6201 MORE\n \
    \  <<part of binary data>>\n   CHK 2 0 LAST\n   CHK 3 0 LAST\n   CHK 1 78 MORE\n\
    \            <img src=\"cid:49568.45876xxx@foo.com\"/>\n            <img src=\"\
    http://foo.com/images/image2.gif\"/>\n   CHK 4 7603 MORE\n   Content-ID: <49568.47333xxx@foo.com>\n\
    \   Content-Type: image/gif\n   Content-Disposition: attachment\n   <<binary data>>\n\
    \   CHK 4 0 LAST\n   CHK 1 127 MORE\n            some more text after the images\n\
    \         </p>\n         <p>some more text without images\n         </p>\n   \
    \      <p>some more text\n            <img src=\"cid:49568.47333xxx@foo.com\"\
    />\n   CHK 1 41 MORE\n         </p>\n         <p>some final text\n         </p>\n\
    \      </body>\n   </html>\n   CHK 1 0 LAST\n   CHK 0 0 LAST\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   There are security considerations that pertain\
    \ to each message of an\n   Application/Vnd.pwg-multiplexed entity.  Those security\n\
    \   considerations are described by the document that defines the\n   content-type\
    \ of the message.  They are not addressed in this\n   document.\n   There are\
    \ also security considerations that pertain to the\n   Application/Vnd.pwg-multiplexed\
    \ entity as a whole.  A Producer that\n   is buggy or malicious may send an Application/Vnd.pwg-multiplexed\n\
    \   entity that could cause a Consumer to request more storage than it\n   has,\
    \ even if it has a large amount of storage.  A Consumer must be\n   able to deal\
    \ gracefully with the following scenarios and combinations\n   of them:\n    \
    \ - The chunks of one or more messages are separated by a very large\n       number\
    \ of octets.  In the extreme case some or all of the\n       messages don't terminate,\
    \ i.e., they don't contain a closing\n       chunk.\n     - A very large number\
    \ of messages are started and interleaved\n       before their final chunk occurs.\n\
    \     - A message contains one or more references to other messages that\n   \
    \    never occur or don't occur for a large number of octets.\n     - A very large\
    \ number of referenced messages occur before the\n       Consumer knows that it\
    \ can discard them.\n"
- title: 7. Registration Information for Application/Vnd.pwg-multiplexed
  contents:
  - "7. Registration Information for Application/Vnd.pwg-multiplexed\n   The following\
    \ form is copied from RFC 1590, Appendix A.\n     To: iana@iana.org\n     Subject:\
    \           Registration of new Media Type\n                        application/Vnd.pwg-multiplexed\n\
    \     Media Type name:   Application\n     Media subtype name:     Vendor Tree\
    \ - vnd.pwg-multiplexed\n     Required parameters:    Type, a media type/subtype.\n\
    \     Optional parameters:    No optional parameters\n     Encoding considerations:\
    \    Each message of an\n                         Application/Vnd.pwg-multiplexed\
    \ entity can be\n                         encoded in any manner allowed by the\
    \ Content-\n                         Type of the message.  However, using the\n\
    \                         reasoning of Multipart, the\n                      \
    \   Application/Vnd.pwg-multiplexed entity cannot\n                         be\
    \ encoded.  Otherwise, a message would be\n                         encoded twice,\
    \ once at the message level and\n                         once at the Application/Vnd.pwg-multiplexed\n\
    \                         level.\n     Security considerations:    See section\
    \ 6 (Security\n                                 Considerations) of RFC 3391.\n\
    \     Published specification:    RFC 3391.\n     Person & email address to contact\
    \ for further information:\n         Robert Herriot\n         706 Colorado Ave.\n\
    \         Palo Alto, CA 94303\n         USA\n         Phone: 1-650-327-4466\n\
    \         Fax: 1-650-327-4466\n         EMail: bob@herriot.com\n"
- title: 8. Acknowledgments
  contents:
  - "8. Acknowledgments\n   The author gratefully acknowledges the contributions of:\
    \ Ugo Corda,\n   Dave Crocker, Melinda Sue Grant, Graham Klyne, Carl-Uno Manros,\
    \ Larry\n   Masinter, Ira McDonald, Chris Newman, Henrik Frystyk Nielsen and Dale\n\
    \   R. Worley.  In particular, Chris Newman provided invaluable help.\n"
- title: 9. References
  contents:
  - "9. References\n   [RFC1806] Troost, R. and S. Dorner, \"Communicating Presentation\n\
    \             Information in Internet Messages: The Content-Disposition\n    \
    \         Header\", RFC 1806, June 1995.\n   [RFC1873] Levinson, E. and J. Clark,\
    \ \"Message/External-Body Content-\n             ID Access Type\",  RFC 1873,\
    \ December 1995.\n             Levinson, E., \"Message/External-Body Content-ID\
    \ Access\n             Type\", Work in Progress.\n   [RFC2045] Freed, N. and N.\
    \ Borenstein, \"Multipurpose Internet Mail\n             Extensions (MIME) Part\
    \ One: Format of Internet Message\n             Bodies\", RFC 2045, November 1996.\n\
    \   [RFC2046] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n    \
    \         Extensions (MIME) Part Two: Media Types\", RFC 2046,\n             November\
    \ 1996.\n   [RFC2234] Crocker, D. and P. Overell, \"Augmented BNF for\n      \
    \       SyntaxSpecifications: ABNF\", RFC 2234, November 1997.\n   [RFC2387] Levinson,\
    \ E., \"The MIME Multipart/Related Content-type\",\n             RFC 2387, August\
    \ 1998.\n   [RFC2392] Levinson, E., \"Content-ID and Message-ID Uniform Resource\n\
    \             Locators\", RFC 2392, August 1998.\n   [RFC2557] Palme, J., \"MIME\
    \ Encapsulation of Aggregate Documents, such\n             as HTML (MHTML\", RFC\
    \ 2557, March 1999.\n   [RFC2822] Resnick, P., Editor, \"Internet Message Format\"\
    , RFC 2822,\n             April 2001.\n   [RFC3080] Rose, M., \"The Blocks Extensible\
    \ Exchange Protocol Core\",\n             RFC 3080, March 2001.\n"
- title: 10. Author's Address
  contents:
  - "10. Author's Address\n   Robert Herriot\n   706 Colorado Ave.\n   Palo Alto,\
    \ CA 94303\n   USA\n   Phone: 1-650-327-4466\n   Fax: 1-650-327-4466\n   EMail:\
    \ bob@herriot.com\n"
- title: 11. Full Copyright Statement
  contents:
  - "11. Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
