- title: __initial_text__
  contents:
  - '         A Trivial Convention for using HTTP in URN Resolution

    '
- title: Status of this Memo
  contents:
  - 'Status of this Memo

    '
- title: ===================
  contents:
  - "===================\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 'Abstract:'
  contents:
  - 'Abstract:

    '
- title: =========
  contents:
  - "=========\n   The Uniform Resource Names Working Group (URN-WG) was formed to\n\
    \   specify persistent, location-independent names for network accessible\n  \
    \ resources, as well as resolution mechanisms to retrieve the resources\n   given\
    \ such a name. At this time the URN-WG is considering one\n   particular resolution\
    \ mechanism, the NAPTR proposal [1]. That\n   proposal specifies how a client\
    \ may find a \"resolver\" for a URN. A\n   resolver is a database that can provide\
    \ information about the\n   resource identified by a URN, such as the resource's\
    \ location, a\n   bibliographic description, or even the resource itself. The\
    \ protocol\n   used for the client to communicate with the resolver is not specified\n\
    \   in the NAPTR proposal.  Instead, the NAPTR resource record provides a\n  \
    \ field that indicates the \"resolution protocol\" and \"resolution\n   service\
    \ requests\" offered by the resolver.\n   This document specifies the \"THTTP\"\
    \ resolution protocol - a trivial\n   convention for encoding resolution service\
    \ requests and responses as\n   HTTP 1.0 or 1.1 requests and responses.  The primary\
    \ goal of THTTP is\n   to be simple to implement so that existing HTTP servers\
    \ may easily\n   add support for URN resolution. We expect that the databases\
    \ used by\n   early resolvers will be useful when more sophisticated resolution\n\
    \   protocols are developed later.\n"
- title: '1.0  Introduction:'
  contents:
  - '1.0  Introduction:

    '
- title: ==================
  contents:
  - "==================\n   The NAPTR specification[1] defined a new DNS resource\
    \ record which\n   may be used to discover resolvers for Uniform Resource Identifiers.\n\
    \   That resource record provides the \"services\" field to specify the\n   \"\
    resolution protocol\" spoken by the resolver, as well as the\n   \"resolution\
    \ services\" it offers. Resolution protocols mentioned in\n   that specification\
    \ are Z3950, THTTP, RCDS, HDL, and RWHOIS. (That\n   list is expected to grow\
    \ over time). The NAPTR specification also\n   lists a variety of resolution services,\
    \ such as N2L (given a URN,\n   return a URL); N2R (Given a URN, return the named\
    \ resource), etc.\n   This document specifies the \"THTTP\" (Trivial HTTP) resolution\n\
    \   protocol.  THTTP is a simple convention for encoding resolution\n   service\
    \ requests and responses as HTTP 1.0 or 1.1 requests and\n   responses. The primary\
    \ goal of THTTP is to have a URN resolution\n   protocol that can easily be added\
    \ to existing HTTP daemons. Other\n   resolution protocols are expected to arise\
    \ over time, so this\n   document serves a secondary purpose of illustrating the\
    \ information\n   that needs to be specified for a URN resolution protocol. One\
    \ of the\n   resolution protocols we expect to be developed is an extension of\n\
    \   HTTP with new methods for the resolution services. Therefore, we use\n   \"\
    THTTP\" as the identifier for this protocol to leave \"HTTP\" for later\n   developments.\n\
    \   The reader is assumed to be familiar with the HTTP/1.0 [2] and 1.1\n   [3]\
    \ specifications. Implementors of this specification should be\n   familiar with\
    \ CGI scripts, or server-specific interfaces, for\n   database lookups.\n"
- title: '2.0 General Approach:'
  contents:
  - '2.0 General Approach:

    '
- title: =====================
  contents:
  - "=====================\n   The general approach used to encode resolution service\
    \ requests in\n   THTTP is quite simple:\n       GET /uri-res/<service>?<uri>\
    \  HTTP/1.0\n   For example, if we have the URN \"urn:foo:12345-54321\" and want\
    \ a URL,\n   we would send the request:\n       GET /uri-res/N2L?urn:foo:12345-54321\
    \ HTTP/1.0\n   The request could also be encoded as an HTTP 1.1 request. This\
    \ would\n   look like:\n       GET /uri-res/N2L?urn:foo:12345-54321 HTTP/1.1\n\
    \       Host: <whatever host we are sending the request to>\n   Responses from\
    \ the HTTP server follow standard HTTP practice. Status\n   codes, such as 200\
    \ (OK) or 404 (Not Found) shall be returned.  The\n   normal rules for determining\
    \ cachability, negotiating formats, etc.\n   apply.\n   Handling these requests\
    \ on the server side is easy to implement using\n   CGI or other, server-specific,\
    \ extension mechanisms.  CGI scripts\n   will see the incoming URI in the QUERY_STRING\
    \ environment variable.\n   Any %encoded characters in the URN will remain in\
    \ their %encoded\n   state in that string. The script can take the URN, look it\
    \ up in a\n   database, and return the requested information.\n   One caveat should\
    \ be kept in mind. The URN syntax document [4]\n   discusses the notion of lexical\
    \ equivalance and requires that\n   resolvers return identical results for URNs\
    \ that are lexically\n   equivalent. Implementors of this specification must be\
    \ careful to\n   obey that rule. For example, the two requests below MUST return\n\
    \   identical results, since the URNs are lexically equivalent.\n       GET /uri-res/N2L?urn:cid:foo@huh.com\
    \ HTTP/1.0\n       GET /uri-res/N2L?URN:CID:foo@huh.com HTTP/1.0\n"
- title: '3.0 Service-specific details:'
  contents:
  - '3.0 Service-specific details:

    '
- title: =============================
  contents:
  - "=============================\n   This section goes through the various resolution\
    \ services established\n   in the URN services document [5] and states how to\
    \ encode each of\n   them, how the results should be returned, and any special\
    \ status\n   codes that are likely to arise.\n   Unless stated otherwise, the\
    \ THTTP requests are formed according to\n   the simple convention above, either\
    \ for HTTP/1.0 or HTTP/1.1. The\n   response is assumed to be an entity with normal\
    \ headers and body\n   unless stated otherwise. (N2L is the only request that\
    \ need not\n   return a body).\n"
- title: '3.1  N2L (URN to URL):'
  contents:
  - '3.1  N2L (URN to URL):

    '
- title: '----------------------'
  contents:
  - "----------------------\n   The request is encoded as above. The URL MUST be returned\
    \ in a\n   Location:  header for the convienience of the user in the most common\n\
    \   case of wanting the resource. If the lookup is successful, a 30X\n   status\
    \ line SHOULD be returned. HTTP/1.1 clients should be sent the\n   303 status\
    \ code. HTTP/1.0 clients should be sent the 302 (Moved\n   temporarily) status\
    \ code unless the resolver has particular reasons\n   for using 301 (moved permanently)\
    \ or 304 (not modified) codes.\n   Note that access controls may be applied to\
    \ this, or any other,\n   resolution service request. Therefore the 401 (unauthorized)\
    \ and 403\n   (forbidden) status codes are legal responses. The server may wish\
    \ to\n   provide a body in the response to explain the reason for refusing\n \
    \  access, and/or to provide alternate information about the resource,\n   such\
    \ as the price it will cost to obtain the resource's URL.\n"
- title: '3.2  N2Ls (URN to URLs):'
  contents:
  - '3.2  N2Ls (URN to URLs):

    '
- title: '------------------------'
  contents:
  - "------------------------\n   The request is encoded as above. The result is a\
    \ list of 0 or more\n   URLs. The Internet Media Type (aka ContentType) of the\
    \ result may be\n   negotiated using standard HTTP mechanisms if desired. At a\
    \ minimum\n   the resolver should support the text/uri-list media type.  (See\n\
    \   Appendix A for the definition of this media type). That media type is\n  \
    \ suitable for machine-processing of the list of URLs. Resolvers may\n   also\
    \ return the results as text/html, text/plain, or any other media\n   type they\
    \ deem suitable.\n   No matter what the particular media type, the result MUST\
    \ be a list\n   of the URLs which may be used to obtain an instance of the resource\n\
    \   identified by the URN. All URIs shall be encoded according to the URI\n  \
    \ specification [6].\n   If the client has requested the result be returned as\
    \ text/html or\n   application/html, the result should be a valid HTML docment\n\
    \   containing the fragment:\n   <UL>\n   <LI><A HREF=\"...url 1...\">...url 1...</A>\n\
    \   <LI><A HREF=\"...url 2...\">...url 2...</A>\n    etc.\n   </UL>\n   where\
    \ the strings ...url n... are replaced by the n'th URL in the\n   list.\n"
- title: '3.3  N2R (URN to Resource):'
  contents:
  - '3.3  N2R (URN to Resource):

    '
- title: '---------------------------'
  contents:
  - "---------------------------\n   The request is encoded as above. The resource\
    \ is returned using\n   standard HTTP mechanisms. The request may be modified\
    \ using the\n   Accept: header as in normal HTTP to specify that the result be\
    \ given\n   in a preferred Internet Media Type.\n"
- title: '3.4  N2Rs (URN to Resources):'
  contents:
  - '3.4  N2Rs (URN to Resources):

    '
- title: '-----------------------------'
  contents:
  - "-----------------------------\n   This resolution service returns multiple instances\
    \ of a resource, for\n   example, GIF and JPEG versions of an image. The judgment\
    \ about the\n   resources being \"the same\" resides with the naming authority\
    \ that\n   issued the URN.\n   The request is encoded as above. The result shall\
    \ be a MIME\n   multipart/alternative message with the alternative versions of\
    \ the\n   resource in seperate body parts. If there is only one version of the\n\
    \   resource identified by the URN, it MAY be returned without the\n   multipart/alternative\
    \ wrapper. Resolver software SHOULD look at the\n   Accept: header, if any, and\
    \ only return versions of the resource that\n   are acceptable according to that\
    \ header.\n"
- title: '3.5  N2C (URN to URC):'
  contents:
  - '3.5  N2C (URN to URC):

    '
- title: '----------------------'
  contents:
  - "----------------------\n   URCs (Uniform Resource Characteristics) are descriptions\
    \ of other\n   resources. This request allows us to obtain a description of the\n\
    \   resource identified by a URN, as opposed to the resource itself.  The\n  \
    \ description might be a bibliographic citation, a digital signature, a\n   revision\
    \ history, etc. This document does not specify the content of\n   any response\
    \ to a URC request. That content is expected to vary from\n   one resolver to\
    \ another.\n   The format of any response to a N2C request MUST be communicated\n\
    \   using the ContentType header, as is standard HTTP practice. The\n   Accept:\
    \ header SHOULD be honored.\n"
- title: '3.6  N2Ns (URN to URNs):'
  contents:
  - '3.6  N2Ns (URN to URNs):

    '
- title: '------------------------'
  contents:
  - "------------------------\n   While URNs are supposed to identify one and only\
    \ one resource, that\n   does not mean that a resource may have one and only one\
    \ URN. For\n   example, consider a resource that has something like \"current-\n\
    \   weather-map\" for one URN and \"weather-map-for-datetime-x\" for another\n\
    \   URN. The N2Ns service request lets us obtain lists of URNs that are\n   believed\
    \ equivalent at the time of the request. As the weathermap\n   example shows,\
    \ some of the equivalances will be transitory, so the\n   standard HTTP mechanisms\
    \ for communicating cachability MUST be\n   honored.\n   The request is encoded\
    \ as above. The result is a list of all the\n   URNs, known to the resolver, which\
    \ identify the same resource as the\n   input URN. The result shall be encoded\
    \ as for the N2Ls request above\n   (text/uri-list unless specified otherwise\
    \ by an Accept: header).\n"
- title: '3.7  L2Ns (URL to URNs):'
  contents:
  - '3.7  L2Ns (URL to URNs):

    '
- title: '----------------------'
  contents:
  - "----------------------\n   The request is encoded as above. The response is a\
    \ list of any URNs\n   known to be assigned to the resource at the given URL.\
    \ The result\n   shall be encoded as for the N2Ls and N2Ns requests.\n"
- title: '3.8  L2Ls (URL to URLs):'
  contents:
  - '3.8  L2Ls (URL to URLs):

    '
- title: '------------------------'
  contents:
  - "------------------------\n   The request is encoded as described above. The result\
    \ is a list of\n   all the URLs that the resolver knows are associated with the\
    \ resource\n   located by the given URL. This is encoded as for the N2Ls, N2Ns,\
    \ and\n   L2Ns requests.\n"
- title: '3.9  L2C (URL to URC):'
  contents:
  - '3.9  L2C (URL to URC):

    '
- title: '----------------------'
  contents:
  - "----------------------\n   The request is encoded as above, the response is the\
    \ same as for the\n   N2C request.\n"
- title: 'Appendix A: The text/uri-list Internet Media Type'
  contents:
  - 'Appendix A: The text/uri-list Internet Media Type

    '
- title: =================================================
  contents:
  - '=================================================

    '
- title: '[This appendix will be augmented or replaced by the registration of the'
  contents:
  - '[This appendix will be augmented or replaced by the registration of the

    '
- title: text/uri-list IMT once that registration has been performed].
  contents:
  - "text/uri-list IMT once that registration has been performed].\n   Several of\
    \ the resolution service requests, such as N2Ls, N2Ns, L2Ns,\n   L2Ls, result\
    \ in a list of URIs being returned to the client. The\n   text/uri-list Internet\
    \ Media Type is defined to provide a simple\n   format for the automatic processing\
    \ of such lists of URIs.\n   The format of text/uri-list resources is:\n   1)\
    \ Any lines beginning with the '#' character are comment lines\n      and are\
    \ ignored during processing. (Note that '#' is a character\n      that may appear\
    \ in URIs, so it only denotes a comment when it is the\n      first character\
    \ on a line).\n   2) The remaining non-comment lines MUST be URIs (URNs or URLs),\
    \ encoded\n      according to the URI specification RFC[6]. Each URI shall appear\
    \ on\n      one and only one line.\n   3) As for all text/* formats, lines are\
    \ terminated with a CR LF pair,\n      although clients should be liberal in accepting\
    \ lines with only\n      one of those characters.\n   In applications where one\
    \ URI has been mapped to a list of URIs, such\n   as in response to the N2Ls request,\
    \ the first line of the text/uri-\n   list response SHOULD be a comment giving\
    \ the original URI.\n   An example of such a result for the N2L request is shown\
    \ below in\n   figure 1.\n        # urn:cid:foo@huh.org\n        http://www.huh.org/cid/foo.html\n\
    \        http://www.huh.org/cid/foo.pdf\n        ftp://ftp.foo.org/cid/foo.txt\n\
    \               Figure 1: Example of the text/uri-list format\n"
- title: 'Appendix B:  n2l.pl script'
  contents:
  - 'Appendix B:  n2l.pl script

    '
- title: ==========================
  contents:
  - "==========================\n   This is a simple CGI script for the N2L resolution\
    \ service. It\n   assumes the presence of a DBM database to store the URN to URL\n\
    \   mappings. This script does not specify standard behavior, it is\n   provided\
    \ merely as a courtesy for implementors. In fact, this script\n   does not process\
    \ incoming Accept: headers, nor does it generate\n   status codes. Such behavior\
    \ should be part of a real script for any\n   of the resolution services.\n  \
    \  #!/bin/perl\n    # N2L  - performs urn to url  resolution\n    $n2l_File =\
    \ \"...filename for DBM database...\";\n    $urn = $ENV{'QUERY_STRING'} ;\n  \
    \  # Sanity check on the URN. Minimum length of a valid URN is\n    # 7 characters\
    \ - \"urn:\", a 1-character Namespace ID, \":\", and\n    # a 1-character namespace-specific\
    \ string. More elaborate\n    # sanity checks should be part of a real resolver\
    \ script.\n    if(length($urn)<7)\n    {\n        $error=1;\n    }\n    if(!$error)\n\
    \    {\n        # Convert lexically equivalent versions of a URI into\n      \
    \  # a canonical version for DB lookups.\n        $urn =~ s/^urn:([^:]*):(.*)$/sprintf(\"\
    urn:%s:%s\", lc $1, $2)/ie;\n        dbmopen(%lu,$n2l_File,0444);\n        if($lu{$urn})\n\
    \        {\n            $url=$lu{$urn};\n            print STDOUT \"Location:\
    \ $url\\n\\n\";\n        }else{\n            $error=2;\n        }\n        dbmclose(%lu);\n\
    \    }\n    if($error)\n    {\n        print \"Content-Type: text/html \\n\\n\"\
    ;\n        print \"<html>\\n\";\n        print \"<head><title>URN Resolution:\
    \ N2L</title></head>\\n\";\n        print \"<BODY>\\n\";\n        print \"<h1>URN\
    \ to URL resolution failed for the URN:</h1>\\n\";\n        print \"<hr><h3>$urn</h3>\\\
    n\";\n        print \"</body>\\n\";\n        print \"</html>\\n\";\n    }\n  \
    \  exit;\n"
- title: 'References:'
  contents:
  - 'References:

    '
- title: ===========
  contents:
  - "===========\n   [1] Daniel, Ron and Michael Mealling, RFC 2168, \"Resolution\
    \ of Uniform\n       Resource Identifiers using the Domain Name System\", June\
    \ 1997.\n   [2] Berners-Lee, T, R. Fielding, H. Frystyk, RFC 1945, \"Hypertext\n\
    \       Transfer Protocol -- HTTP/1.0\", T. Berners-Lee, May 1996.\n   [3] Fielding,\
    \ R., J. Gettys, J.C. Mogul, H. Frystyk, T. Berners-Lee,\n       RFC 2068, \"\
    Hypertext Transfer Protocol -- HTTP/1.1\", Jan. 1997.\n   [4] Moats, R., RFC 2141,\
    \ \"URN Syntax\", May 1997.\n   [5] URN-WG. \"URN Resolution Services\". Work\
    \ In Progress.\n   [6] Berners-Lee, T., RFC 1630, \"Universal Resource Identifiers\
    \ in WWW:\n       A Unifying Syntax for the Expression of Names and Addresses\
    \ of\n       Objects on the Network as used in the World-Wide Web\", June 1994.\n"
- title: Security Considerations
  contents:
  - 'Security Considerations

    '
- title: =======================
  contents:
  - "=======================\n   Communications with a resolver may be of a sensitive\
    \ nature. Some\n   resolvers will hold information that should only be released\
    \ to\n   authorized users. The results from resolvers may be the target of\n \
    \  spoofing, especially once electronic commerce transactions are common\n   and\
    \ there is money to be made by directing users to pirate\n   repositories rather\
    \ than repositories which pay royalties to\n   rightsholders. Resolution requests\
    \ may be of interest to traffic\n   analysts. The requests may also be subject\
    \ to spoofing.\n   The requests and responses in this draft are amenable to encoding,\n\
    \   signing, and authentication in the manner of any other HTTP traffic.\n"
- title: 'Author Contact Information:'
  contents:
  - 'Author Contact Information:

    '
- title: ===========================
  contents:
  - "===========================\n   Advanced Computing Lab, MS B287\n   Los Alamos\
    \ National Laboratory\n   Los Alamos, NM, USA, 87545\n   voice:  +1 505 665 0597\n\
    \   fax:    +1 505 665 4939\n   email:  rdaniel@lanl.gov\n"
