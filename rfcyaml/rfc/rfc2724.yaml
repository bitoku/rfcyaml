- title: __initial_text__
  contents:
  - '           RTFM: New Attributes for Traffic Flow Measurement

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The RTFM Traffic Measurement Architecture provides a general\n \
    \  framework for describing and measuring network traffic flows.  Flows\n   are\
    \ defined in terms of their Address Attribute values and measured\n   by a 'Traffic\
    \ Meter'.  This document discusses RTFM flows and the\n   attributes which they\
    \ can have, so as to provide a logical framework\n   for extending the architecture\
    \ by adding new attributes.\n   Extensions described include Address Attributes\
    \ such as DSCodePoint,\n   SourceASN and DestASN, and Group Attributes such as\
    \ short-term bit\n   rates and turnaround times.  Quality of Service parameters\
    \ for\n   Integrated Services are also discussed.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  Introduction .  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 2\n      1.1 RTFM's Definition of Flows  . . . . . . . . . . . .\
    \ . . . . 3\n      1.2 RTFM's Current Definition of Flows and their Attributes\
    \ . . 3\n      1.3 RTFM Flows, Integrated Services, IPPM and Research in Flows\
    \ 4\n   2  Flow Abstractions . . . . . . . . . . . . . . . . . . . . . . . 5\n\
    \      2.1 Meter Readers and Meters  . . . . . . . . . . . . . . . . . 5\n   \
    \   2.2 Attribute Types . . . . . . . . . . . . . . . . . . . . . . 6\n      2.3\
    \ Packet Traces . . . . . . . . . . . . . . . . . . . . . . . 7\n      2.4 Aggregate\
    \ Attributes  . . . . . . . . . . . . . . . . . . . 8\n      2.5 Group Attributes\
    \  . . . . . . . . . . . . . . . . . . . . . 8\n      2.6 Actions on Exceptions\
    \ . . . . . . . . . . . . . . . . . . .10\n   3  Extensions to the 'Basic' RTFM\
    \ Meter  . . . . . . . . . . . . .10\n      3.1 Flow table extensions . . . .\
    \ . . . . . . . . . . . . . . .10\n      3.2 Specifying Distributions in RuleSets\
    \  . . . . . . . . . . .11\n      3.3 Reading Distributions . . . . . . . . .\
    \ . . . . . . . . . .13\n   4  Extensions to the Rules Table, Attribute Numbers\
    \  . . . . . . .13\n   5  Security Considerations . . . . . . . . . . . . . .\
    \ . . . . . .15\n   6  References  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .16\n   7  Authors' Addresses  . . . . . . . . . . . . . . . . . . . .\
    \ . .17\n   8  Full Copyright Statement  . . . . . . . . . . . . . . . . . . .18\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   The Real-Time Flow Measurement (RTFM) Working Group (WG)\
    \ has\n   developed a system for measuring and reporting information about\n \
    \  traffic flows in the Internet.  This document explores the definition\n   of\
    \ extensions to the flow measurements as currently defined in\n   [RTFM-ARC].\
    \ The new attributes described in this document will be\n   useful for monitoring\
    \ network performance and will expand the scope\n   of RTFM beyond simple measurement\
    \ of traffic volumes.  A companion\n   document to this memo will be written to\
    \ define MIB structures for\n   the new attributes.\n   This memo was started\
    \ in 1996 to advance the work of the RTFM group.\n   The goal of this work is\
    \ to produce a simple set of abstractions,\n   which can be easily implemented\
    \ and at the same time enhance the\n   value of RTFM Meters.  This document also\
    \ defines a method for\n   organizing the flow abstractions to augment the existing\
    \ RTFM flow\n   table.\n   Implementations of the RTFM Meter have been done by\
    \ Nevil Brownlee in\n   the University of Auckland, NZ, and Stephen Stibler and\
    \ Sig Handelman\n   at IBM in Hawthorne, NY, USA. The RTFM WG has also defined\
    \ the role\n   of the Meter Reader whose role is to retrieve flow data from the\n\
    \   Meter.\n   Note on flows and positioning of meters:\n      A flow as it traverses\
    \ the Internet may have some of its\n      characteristics altered as it travels\
    \ through Routers, Switches,\n      and other network units.  It is important\
    \ to note the spatial\n      location of the Meter when referring to attributes\
    \ of a flow.  An\n      example, a server may send a sequence of packets with\
    \ a definite\n      order, and inter packet timing with a leaky bucket algorithm.\
    \  A\n      meter reading downstream of the leaky bucket would record a set\n\
    \      with minimal inter packet timing due to the leaky bucket.  At the\n   \
    \   client's location, the packets may arrive out of sequence, with\n      the\
    \ timings altered.  A meter at the client's location would\n      record different\
    \ attributes for the same flow.\n"
- title: 1.1  RTFM's Definition of Flows
  contents:
  - "1.1  RTFM's Definition of Flows\n   The RTFM Meter architecture views a flow\
    \ as a set of packets between\n   two endpoints (as defined by their source and\
    \ destination attribute\n   values and start and end times), and as BI-DIRECTIONAL\
    \ (i.e. the\n   meter effectively monitors two sub-flows, one in each direction).\n\
    \   Reasons why RTFM flows are bi-directional:\n      -  The WG is interested\
    \ in understanding the behavior of sessions\n         between endpoints.\n   \
    \   -  The endpoint attribute values (the \"Address\" and \"Type\" ones)\n   \
    \      are the same for both directions; storing them in bi-\n         directional\
    \ flows reduces the meter's memory demands.\n      -  'One-way' (uni-directional)\
    \ flows are a degenerate case.\n         Existing RTFM meters can handle this\
    \ by using one of the\n         computed attributes (e.g. FlowKind) to indicate\
    \ direction.\n"
- title: 1.2  RTFM's Current Definition of Flows and their Attributes
  contents:
  - "1.2  RTFM's Current Definition of Flows and their Attributes\n   Flows, as described\
    \ in the \"Architecture\" document [RTFM-ARC] have\n   the following properties:\n\
    \   a. They occur between two endpoints, specified as sets of attribute\n    \
    \  values in the meter's current rule set.  A flow is completely\n      identified\
    \ by its set of endpoint attribute values.\n   b. Each flow may also have values\
    \ for \"computed\" attributes (Class\n      and Kind).  These are directly derived\
    \ from the endpoint attribute\n      values.\n   c. A new flow is created when\
    \ a packet is to be counted that does not\n      match the attributes of an existing\
    \ flow. The meter records the\n      time when this new flow is created.\n   d.\
    \ Attribute values in (a), (b) and (c) are set when the meter sees\n      the\
    \ first packet for the flow, and are never changed.\n   e. Each flow has a \"\
    LastTime\" attribute, which indicates the time the\n      meter last saw a packet\
    \ for the flow.\n   f. Each flow has two packet and two byte counters, one for\
    \ each flow\n      direction (Forward and Backward).  These are updated as packets\n\
    \      for the flow are observed by the meter.\n   g. ALL the attributes have\
    \ (more or less) the same meaning for a\n      variety of protocols; IPX, AppleTalk,\
    \ DECnet and CLNS as well as\n      TCP/IP.\n   Current flow attributes - as described\
    \ above - fit very well into the\n   SNMP data model.  They are either static,\
    \ or are continuously updated\n   counters.  They are NEVER reset.  In this document\
    \ they will be\n   referred to as \"old-style\" attributes.\n   It is easy to\
    \ add further \"old-style\" attributes, since they don't\n   require any new features\
    \ in the architecture.  For example:\n      -  Count of the number of \"lost\"\
    \ packets (determined by watching\n         sequence number fields for packets\
    \ in each direction; only\n         available for protocols which have such sequence\
    \ numbers).\n      -  In the future, RTFM could coordinate directly with the Flow\n\
    \         Label from the IPv6 header.\n"
- title: 1.3  RTFM Flows, Integrated Services, IPPM and Research in Flows
  contents:
  - "1.3  RTFM Flows, Integrated Services, IPPM and Research in Flows\n   The concept\
    \ of flows has been studied in various different contexts.\n   For the purpose\
    \ of extending RTFM, a starting point is the work of\n   the Integrated Services\
    \ WG. We will measure quantities that are often\n   set by Integrated Services\
    \ configuration programs.  We will look at\n   the work of the Benchmarking/IP\
    \ Performance Metrics Working Group,\n   and also look at the work of Claffy,\
    \ Braun and Polyzos [C-B-P]. We\n   will demonstrate how RTFM can compute throughput,\
    \ packet loss, and\n   delays from flows.\n   An example of the use of capacity\
    \ and performance information is\n   found in \"The Use of RSVP with IETF Integrated\
    \ Services\" [IIS-RSVP].\n   RSVP's use of Integrated Services revolves around\
    \ Token Bucket Rate,\n   Token Bucket Size, Peak Data Rate, Minimum Policed Unit,\
    \ Maximum\n   Packet Size, and the Slack term.  These are set by TSpec, ADspec\
    \ and\n   FLowspec (Integrated Services Keywords), and are used in\n   configuration\
    \ and operation of Integrated Services.  RTFM could\n   monitor explicitly Peak\
    \ Data Rate, Minimum Policed Unit, Maximum\n   Packet Size, and the Slack term.\
    \  RTFM could infer details of the\n   Token Bucket.  The WG will develop measures\
    \ to work with these\n   service metrics.  An initial implementation of IIS Monitoring\
    \ has\n   been developd at CEFRIEL in Italy [IIS-ACCT].\n   RTFM will work with\
    \ several traffic measurements identified by IPPM\n   [IPPM-FRM]. There are three\
    \ broad areas in which RTFM is useful for\n   IPPM.\n      -  An RTFM Meter could\
    \ act as a passive device, gathering traffic\n         and performance statistics\
    \ at appropriate places in networks\n         (server or client locations).\n\
    \      -  RTFM could give detailed analyses of IPPM test flows that pass\n   \
    \      through the Network segment that RTFM is monitoring.\n      -  RTFM could\
    \ be used to identify the most-used paths in a network\n         mesh, so that\
    \ detailed IPPM work could be applied to these most\n         used paths.\n"
- title: 2  Flow Abstractions
  contents:
  - "2  Flow Abstractions\n   Performance attributes include throughput, packet loss,\
    \ delays,\n   jitter, and congestion measures.  RTFM will calculate these\n  \
    \ attributes in the form of extensions to the RTFM flow attributes\n   according\
    \ to three general classes:\n      -  'Trace', attributes of individual packets\
    \ in a flow or a\n         segment of a flow (e.g. last packet size, last packet\
    \ arrival\n         time).\n      -  'Aggregate', attributes derived from the\
    \ flow taken as a whole\n         (e.g. mean rate, max packet size, packet size\
    \ distribution).\n      -  'Group', attributes that depend on groups of packet\
    \ values\n         within the flow (e.g. inter-arrival times, short-term traffic\n\
    \         rates).\n   Note that attributes within each of these classes may have\
    \ various\n   types of values - numbers, distributions, time series, and so on.\n"
- title: 2.1  Meter Readers and Meters
  contents:
  - "2.1  Meter Readers and Meters\n   A note on the relation between Meter Readers\
    \ and Meters.\n   Several of the measurements enumerated below can be implemented\
    \ by a\n   Meter Reader that is tied to a meter with very short response time\n\
    \   and very high bandwidth.  If the Meter Reader and Meter can be\n   arranged\
    \ in such a way, RTFM could collect Packet Traces with time\n   stamps and provide\
    \ them directly to the Meter Reader for further\n   processing.\n   A more useful\
    \ alternative is to have the Meter calculate some flow\n   statistics locally.\
    \  This allows a looser coupling between the Meter\n   and Meter Reader.  RTFM\
    \ will monitor an 'extended attribute'\n   depending upon settings in its Rule\
    \ table.  RTFM will not create any\n   \"extended attribute\" data without explicit\
    \ instructions in the Rule\n   table.\n"
- title: 2.2  Attribute Types
  contents:
  - "2.2  Attribute Types\n   Section 2 described three different classes of attributes;\
    \ this\n   section considers the \"data types\" of these attributes.\n   Packet\
    \ Traces (as described below) are a special case in that they\n   are tables with\
    \ each row containing a sequence of values, each of\n   varying type.  They are\
    \ essentially 'compound objects' i.e. lists of\n   attribute values for a string\
    \ of packets.\n   Aggregate attributes are like the 'old-style' attributes.  Their\n\
    \   types are:\n      -  Addresses, represented as byte strings (1 to 20 bytes\
    \ long)\n      -  Counters, represented as 64-bit unsigned integers\n      - \
    \ Times, represented as 32-bit unsigned integers\n   Addresses are saved when\
    \ the first packet of a flow is observed.\n   They do not change with time, and\
    \ they are used as a key to find the\n   flow's entry in the meter's flow table.\n\
    \   Counters are incremented for each packet, and are never reset.  An\n   analysis\
    \ application can compute differences between readings of the\n   counters, so\
    \ as to determine rates for these attributes.  For\n   example, if we read flow\
    \ data at five-minute intervals, we can\n   calculate five-minute packet and byte\
    \ rates for the flow's two\n   directions.\n   Times are derived from the FirstTime\
    \ for a flow, which is set when\n   its first packet is observed.  LastTime is\
    \ updated as each packet in\n   the flow is observed.\n   All the above types\
    \ have the common feature that they are expressed\n   as single values.  At least\
    \ some of the new attributes will require\n   multiple values.  If, for example,\
    \ we are interested in inter-packet\n   time intervals, we can compute an interval\
    \ for every packet after the\n   first.  If we are interested in packet sizes,\
    \ a new value is obtained\n   as each packet arrives.  When it comes to storing\
    \ this data we have\n   two options:\n      -  As a distribution, i.e. in an array\
    \ of 'buckets'.  This method\n         is a compact representation of the data,\
    \ with the values being\n         stored as counters between a minimum and maximum,\
    \ with defined\n         steps in each bucket.  This fits the RTFM goal of compact\
    \ data\n         storage.\n      -  As a sequence of single values.  This saves\
    \ all the\n         information, but does not fit well with the RTFM goal of doing\n\
    \         as much data reduction as possible within the meter.\n   Studies which\
    \ would be limited by the use of distributions might well\n   use packet traces\
    \ instead.\n   A method for specifying the distribution parameters, and for encoding\n\
    \   the distribution so that it can be easily read, is described in\n   section\
    \ 3.2.\n"
- title: 2.3  Packet Traces
  contents:
  - "2.3  Packet Traces\n   The simplest way of collecting a trace in the meter would\
    \ be to have\n   a new attribute called, say, \"PacketTrace\". This could be a\
    \ table,\n   with a column for each property of interest.  For example, one could\n\
    \   trace:\n      -  Packet Arrival time (TimeTicks from sysUpTime, or microseconds\n\
    \         from FirstTime for the flow).\n      -  Packet Direction (Forward or\
    \ Backward)\n      -  Packet Sequence number (for protocols with sequence numbers)\n\
    \      -  Packet Flags (for TCP at least)\n   Note:  The following implementation\
    \ proposal is for the user who is\n   familiar with the writing of rule sets for\
    \ the RTFM Meter.\n      To add a row to the table, we only need a rule which\
    \ PushPkts the\n      PacketTrace attribute.  To use this, one would write a rule\
    \ set\n      which selected out a small number of flows of interest, with a\n\
    \      'PushPkt PacketTrace' rule for each of them.  A MaxTraceRows\n      default\
    \ value of 2000 would be enough to allow a Meter Reader to\n      read one-second\
    \ ping traces every 10 minutes or so.  More\n      realistically, a MaxTraceRows\
    \ of 500 would be enough for one-\n      minute pings, read once each hour.\n\
    \   Packet traces are already implemented by the RMON MIB [RMON-MIB,\n   RMON2-MIB],\
    \ in the Packet Capture Group.  They are therefore a low\n   priority for RTFM.\n"
- title: 2.4  Aggregate Attributes
  contents:
  - "2.4  Aggregate Attributes\n   RTFM's \"old-style\" flow attributes count the\
    \ bytes and packets for\n   packets which match the rule set for an individual\
    \ flow.  In addition\n   to these totals, for example, RTFM could calculate Packet\
    \ Size\n   statistics.  This data can be stored as distributions, though it may\n\
    \   sometimes be sufficient to simply keep a maximum value.\n   As an example,\
    \ consider Packet Size.  RTFM's packet flows can be\n   examined to determine\
    \ the maximum packet size found in a flow.  This\n   will give the Network Operator\
    \ an indication of the MTU being used in\n   a flow.  It will also give an indication\
    \ of the sensitivity to loss\n   of a flow, for losing large packets causes more\
    \ data to be\n   retransmitted.\n   Note that aggregate attributes are a simple\
    \ extension of the 'old-\n   style' attributes; their values are never reset.\
    \  For example, an\n   array of counters could hold a 'packet size' distribution.\
    \  The\n   counters continue to increase, a meter reader will collect their\n\
    \   values at regular intervals, and an analysis application will compute\n  \
    \ and display distributions of the packet size for each collection\n   interval.\n"
- title: 2.5  Group Attributes
  contents:
  - "2.5  Group Attributes\n   The notion of group attributes is to keep simple statistics\
    \ for\n   measures that involve more than one packet.  This section describes\n\
    \   some group attributes which it is feasible to implement in a traffic\n   meter,\
    \ and which seem interesting and useful.\n   Short-term bit rate - The data could\
    \ also be recorded as the maximum\n   and minimum data rate of the flow, found\
    \ over specific time periods\n   during the lifetime of a flow; this is a special\
    \ kind of\n   'distribution'.  Bit rate could be used to define the throughput\
    \ of a\n   flow, and if the RTFM flow is defined to be the sum of all traffic\
    \ in\n   a network, one can find the throughput of the network.\n   If we are\
    \ interested in '10-second' forward data rates, the meter\n   might compute this\
    \ for each flow of interest as follows:\n      -  maintain an array of counters\
    \ to hold the flow's 10-second data\n         rate distribution.\n      -  every\
    \ 10 seconds, compute and save 10-second octet count, and\n         save a copy\
    \ of the flow's forward octet counter.\n   To achieve this, the meter will have\
    \ to keep a list of aggregate\n   flows and the intervals at which they require\
    \ processing.  Careful\n   programming is needed to achieve this, but provided\
    \ the meter is not\n   asked to do it for very large numbers of flows, it has\
    \ been\n   successfully implemented.\n   Inter-arrival times.  The Meter knows\
    \ the time that it encounters\n   each individual packet.  Statistics can be kept\
    \ to record the inter-\n   arrival times of the packets, which would give an indication\
    \ of the\n   jitter found in the Flow.\n   Turn-around statistics.  Sine the Meter\
    \ knows the time that it\n   encounters each individual packet, it can produce\
    \ statistics of the\n   time intervals between packets in opposite directions\
    \ are observed on\n   the network.  For protocols such as SNMP (where every packet\
    \ elicits\n   an answering packet) this gives a good indication of turn-around\n\
    \   times.\n   Subflow analysis.  Since the choice of flow endpoints is controlled\n\
    \   by the meter's rule set, it is easy to define an aggregate flow, e.g.\n  \
    \ \"all the TCP streams between hosts A and B.\"  Preliminary\n   implementation\
    \ work suggests that - at least for this case - it\n   should be possible for\
    \ the meter to maintain a table of information\n   about all the active streams.\
    \  This could be used to produce at least\n   the following attributes:\n    \
    \  -  Number of streams, e.g. streams active for n-second intervals.\n       \
    \  Determined for TCP and UDP using source-dest port number pairs.\n      -  Number\
    \ of TCP bytes, determined by taking difference of TCP\n         sequence numbers\
    \ for each direction of the aggreagate flow.\n   IIS attributes.  Work at CEFRIEL\
    \ [IIS-ACCT] has produced a traffic\n   meter with a rule set modified 'on the\
    \ fly' so as to maintain a list\n   of RSVP-reserved flows.  For such flows the\
    \ following attributes have\n   been implemented (these quantities are defined\
    \ in [GUAR-QOS]):\n      - QoSService:          Service class for the flow\n \
    \                              (guaranteed, controlled load)\n      - QoSStyle:\
    \            Reservation setup style\n                               (wildcard\
    \ filter, fixed filter,\n                               shared explicit)\n   \
    \   - QoSRate:             [byte/s] rate for flows with\n                    \
    \           guaranteed service\n      - QoSSlackTerm:        [microseconds] Slack\
    \ Term QoS parameter\n                               for flows with guaranteed\
    \ service\n      - QoSTokenBucketRate:  [byte/s] Token Bucket Rate QoS parameter\n\
    \                               for flows with guaranteed or\n               \
    \                controlled load service\n      The following are also being considered:\n\
    \      - QoSTokenBucketSize:  [byte] Size of Token Bucket\n      - QoSPeakDataRate:\
    \     [byte/s] Maximum rate for incoming data\n      - QoSMinPolicedUnit:   [byte]\
    \ IP datagrams less than this are\n                               counted as being\
    \ this size\n      - QoSMaxDatagramSize:  [byte] Size of biggest datagram which\n\
    \                               conforms to the traffic specification\n"
- title: 2.6  Actions on Exceptions
  contents:
  - "2.6  Actions on Exceptions\n   Some users of RTFM have requested the ability\
    \ to mark flows as having\n   High Watermarks.  The existence of abnormal service\
    \ conditions, such\n   as non-ending flow, a flow that exceeds a given limit in\
    \ traffic\n   (e.g. a flow that is exhausting the capacity of the line that carries\n\
    \   it) would cause an ALERT to be sent to the Meter Reader for\n   forwarding\
    \ to the Manager.  Operations Support could define service\n   situations in many\
    \ different environments.  This is an area for\n   further discussion on Alert\
    \ and Trap handling.\n"
- title: 3  Extensions to the 'Basic' RTFM Meter
  contents:
  - "3  Extensions to the 'Basic' RTFM Meter\n   The Working Group has agreed that\
    \ the basic RTFM Meter will not be\n   altered by the addition of the new attributes\
    \ of this document.  This\n   section describes the extensions needed to implement\
    \ the new\n   attributes.\n"
- title: 3.1  Flow table extensions
  contents:
  - "3.1  Flow table extensions\n   The architecture of RTFM has defined the structure\
    \ of flows, and this\n   memo does not change that structure.  The flow table\
    \ could have\n   ancillary tables called \"Distribution Tables\" and \"Trace Tables,\"\
    \n   these would contain rows of values and or actions as defined above.\n   Each\
    \ entry in these tables would be marked with the number of its\n   corresponding\
    \ flow in the RTFM flow table.\n   Note:  The following section is for the user\
    \ who is familiar with the\n   writing of rule sets for the RTFM Meter.\n    \
    \  In order to identify the data in a Packet Flow Table, the\n      attribute\
    \ name could be pushed into a string at the head of each\n      row.  For example,\
    \ if a table entry has \"To Bit Rate\" for a\n      particular flow, the \"ToBitRate\"\
    \ string would be found at the head\n      of the row.  (An alternative method\
    \ would be to code an\n      identification value for each extended attribute\
    \ and push that\n      value into the head of the row.)  See section 4.  for an\
    \ inital\n      set of ten extended flow attributes.\n"
- title: 3.2  Specifying Distributions in RuleSets
  contents:
  - "3.2  Specifying Distributions in RuleSets\n   At first sight it would seem neccessary\
    \ to add extra features to the\n   RTFM Meter architecture to support distributions.\
    \  This, however, is\n   not neccessarily the case.\n   What is actually needed\
    \ is a way to specify, in a ruleset, the\n   distribution parameters.  These include\
    \ the number of counters, the\n   lower and upper bounds of the distribution,\
    \ whether it is linear or\n   logarithmic, and any other details (e.g. the time\
    \ interval for\n   short-term rate attributes).\n   Any attribute which is distribution-valued\
    \ needs to be allocated a\n   RuleAttributeNumber value.  These will be chosen\
    \ so as to extend the\n   list already in the RTFM Meter MIB document [RTFM-MIB].\n\
    \   Since distribution attributes are multi-valued it does not make sense\n  \
    \ to test them.  This means that a PushPkt (or PushPkttoAct) action\n   must be\
    \ executed to add a new value to the distribution.  The old-\n   style attributes\
    \ use the 'mask' field to specify which bits of the\n   value are required, but\
    \ again, this is not the case for\n   distributions.  Lastly, the MatchedValue\
    \ ('value') field of a PushPkt\n   rule is never used.  Overall, therefore, the\
    \ 'mask' and 'value'\n   fields in the PushPkt rule are available to specify distribution\n\
    \   parameters.\n   Both these fields are at least six bytes long, the size of\
    \ a MAC\n   address.  All we have to do is specify how these bytes should be\n\
    \   used!  As a starting point, the following is proposed (bytes are\n   numbered\
    \ left-to-right.\n   Mask bytes:\n        1    Transform        1 = linear, 2\
    \ = logarithmic\n        2    Scale Factor     Power of 10 multiplier for Limits\n\
    \                                  and Counts\n      3-4    Lower Limit      Highest\
    \ value for first bucket\n      5-6    Upper Limit      Highest value for last\
    \ bucket\n   Value bytes:\n        1    Buckets          Number of buckets.  Does\
    \ not include\n                                  the 'overflow' bucket\n     \
    \   2    Parameter-1      } Parameter use depends\n      3-4    Parameter-2  \
    \    } on distribution-valued\n      5-6    Parameter-3      } attribute\n   For\
    \ example, experiments with NeTraMet have used the following rules:\n     FromPacketSize\
    \     & 1.0.25!1500 = 60.0!0:   PushPkttoAct, Next;\n     ToInterArrivalTime &\
    \  2.3.1!1800 = 60.0.0!0: PushPkttoAct, Next;\n     FromBitRate        & 2.3.1!10000\
    \ = 60.5.0!0: PushPkttoAct, Next;\n   In these mask and value fields a dot indicates\
    \ that the preceding\n   number is a one-byte integer, the exclamation marks indicate\
    \ that the\n   preceding number is a two-byte integer, and the last number is\
    \ two\n   bytes wide since this was the width of the preceding field.  (Note\n\
    \   that this convention follows that for IP addresses - 130.216 means\n   130.216.0.0).\n\
    \   The first rule specifies that a distribution of packet sizes is to be\n  \
    \ built.  It uses an array of 60 buckets, storing values from 1 to 1500\n   bytes\
    \ (i.e. linear steps of 25 bytes each bucket).  Any packets with\n   size greater\
    \ than 1500 will be counted in the 'overflow' bucket,\n   hence there are 61 counters\
    \ for the distribution.\n   The second rule specifies an interarrival-time distribution,\
    \ using a\n   logarithmic scale for an array of 60 counters (and an overflow\n\
    \   bucket) for rates from 1 ms to 1.8 s.  Arrival times are measured in\n   microseconds,\
    \ hence the scale factor of 3 indicates that the limits\n   are given in milliseconds.\n\
    \   The third rule specifies a bit-rate distribution, with the rate being\n  \
    \ calculated every 5 seconds (parameter 1).  A logarithmic array of 60\n   counters\
    \ (and an overflow bucket) are used for rates from 1 kbps to\n   10 Mbps.  The\
    \ scale factor of 3 indicates that the limits are given\n   in thousands of bits\
    \ per second (rates are measured in bps).\n   These distribution parameters will\
    \ need to be stored in the meter so\n   that they are available for building the\
    \ distribution.  They will\n   also need to be read from the meter and saved together\
    \ with the other\n   flow data.\n"
- title: 3.3  Reading Distributions
  contents:
  - "3.3  Reading Distributions\n   Since RTFM flows are bi-directional, each distribution-valued\n\
    \   quantity (e.g. packet size, bit rate, etc.)  will actually need two\n   sets\
    \ of counters, one for packets travelling in each direction.  It\n   is tempting\
    \ to regard these as components of a single 'distribution',\n   but in many cases\
    \ only one of the two directions will be of interest;\n   it seems better to keep\
    \ them in separate distributions.  This is\n   similar to the old-style counter-valued\
    \ attributes such as toOctets\n   and fromOctets.\n   A distribution should be\
    \ read by a meter reader as a single,\n   structured object.  The components of\
    \ a distribution object are:\n      -  'mask' and 'value' fields from the rule\
    \ which created the\n         distribution\n      -  sequence of counters ('buckets'\
    \ + overflow)\n   These can be easily collected into a BER-encoded octet string,\
    \ and\n   would be read and referred to as a 'distribution'.\n"
- title: 4  Extensions to the Rules Table, Attribute Numbers
  contents:
  - "4  Extensions to the Rules Table, Attribute Numbers\n   The Rules Table of \"\
    old-style\" attributes will be extended for the\n   new flow types.  A list of\
    \ actions, and keywords, such as\n   \"ToBitRate\", \"ToPacketSize\", etc.  will\
    \ be developed and used to\n   inform an RTFM meter to collect a set of extended\
    \ values for a\n   particular flow (or set of flows).\n   Note:  An implementation\
    \ suggestion.\n      Value 65 is used for 'Distributions', which has one bit set\
    \ for\n      each distribution-valued attribute present for the flow, using bit\n\
    \      0 for attribute 66, bit 1 for attribute 67, etc.\n   Here are ten possible\
    \ distribution-valued attributes numbered\n   according to RTFM WG consensus at\
    \ the 1997 meeting in Munich:\n      ToPacketSize(66)         size of PDUs in\
    \ bytes (i.e. number\n      FromPacketSize(67)         of bytes actually transmitted)\n\
    \      ToInterarrivalTime(68)   microseconds between successive packets\n    \
    \  FromInterarrivalTime(69)   travelling in the same direction\n      ToTurnaroundTime(70)\
    \     microseconds between successive packets\n      FromTurnaroundTime(71)  \
    \   travelling in opposite directions\n      ToBitRate(72)            short-term\
    \ flow rate in bits per second\n      FromBitRate(73)            Parameter 1 =\
    \ rate interval in seconds\n      ToPDURate(74)            short-term flow rate\
    \ in PDUs per second\n      FromPDURate(75)            Parameter 1 = rate interval\
    \ in seconds\n      (76 .. 97)               other distributions\n   It seems\
    \ reasonable to allocate a further group of numbers for the\n   IIS attributes\
    \ described above:\n      QoSService(98)\n      QoSStyle(99)\n      QoSRate(100)\n\
    \      QoSSlackTerm(101)\n      QoSTokenBucketRate(102)\n      QoSTokenBucketSize(103)\n\
    \      QoSPeakDataRate(104)\n      QoSMinPolicedUnit(105)\n      QoSMaxPolicedUnit(106)\n\
    \   The following attributes have also been implemented in NetFlowMet, a\n   version\
    \ of the RTFM traffic meter:\n      MeterID(112)      Integer identifying the\
    \ router producing\n                           NetFlow data (needed when NetFlowMet\
    \ takes\n                           data from several routers)\n      SourceASN(113)\
    \    Autonomous System Number for flow's source\n      SourcePrefix(114) CIDR\
    \ width used by router for determining\n                           flow's source\
    \ network\n      DestASN(115)      Autonomous System Number for flow's destination\n\
    \      DestPrefix(116)   CIDR width used by router for determining\n         \
    \                  flow's destination network\n   Some of the above, e.g. SourceASN\
    \ and DestASN, might sensibly be\n   allocated attribute numbers below 64, making\
    \ them part of the 'base'\n   RTFM meter attributes.\n   To support use of the\
    \ RTFM meter as an 'Edge Device' for implementing\n   Differentiated Services,\
    \ and/or for metering traffic carried via such\n   services, one more attribute\
    \ will be useful:\n      DSCodePoint(118)  DS Code Point (6 bits) for packets\
    \ in this flow\n   Since the DS Code Point is a single field within a packet's\
    \ IP\n   header, it is not possible to have both Source- and Dest-CodePoint\n\
    \   attributes.  Possible uses of DSCodePoint include aggregating flows\n   using\
    \ the same Code Points, and separating flows having the same\n   end-point addresses\
    \ but using different Code Points.\n"
- title: 5  Security Considerations
  contents:
  - "5  Security Considerations\n   The attributes considered in this document represent\
    \ properties of\n   traffic flows; they do not present any security issues in\
    \ themselves.\n   The attributes may, however, be used in measuring the behaviour\
    \ of\n   traffic flows, and the collected traffic flow data could be of\n   considerable\
    \ value.  Suitable precautions should be taken to keep\n   such data safe.\n"
- title: 6  References
  contents:
  - "6  References\n   [C-B-P]     Claffy, K., Braun, H-W, Polyzos, G., \"A Parameterizable\n\
    \               Methodology for Internet Traffic Flow Profiling,\" IEEE\n    \
    \           Journal on Selected Areas in Communications, Vol. 13, No.\n      \
    \         8, October 1995.\n   [GUAR-QOS]  Shenker, S., Partridge, C. and R. Guerin,\
    \ \"Specification\n               of Guaranteed Quality of Service\", RFC 2212,\
    \ September\n               1997.\n   [IIS-ACCT]  Maiocchi, S: \"NeTraMet & NeMaC\
    \ for IIS Accounting:\n               Users' Guide\", CEFRIEL, Milan, 5 May 1998.\
    \  (See also\n               http://www.cefriel.it/ntw)\n   [IIS-RSVP]  Wroclawski,\
    \ J., \"The Use of RSVP with IETF Integrated\n               Services\", RFC 2210,\
    \ September 1997.\n   [IPPM-FRM]  Paxson, V., Almes, G., Mahdavi, J. and  Mathis,\
    \ M.,\n               \"Framework for IP Performance Metrics\", RFC 2330, May\n\
    \               1998.\n   [RMON-MIB]  Waldbusser, S., \"Remote Network Monitoring\
    \ Management\n               Information Base\", RFC 1757, February 1995.\n  \
    \ [RMON2-MIB] Waldbusser, S., \"Remote Network Monitoring Management\n       \
    \        Information Base Version 2 using SMIv2\", RFC 2021,\n               January\
    \ 1997.\n   [RTFM-ARC]  Brownlee, N., Mills, C. and G. Ruth, \"Traffic Flow\n\
    \               Measurement: Architecture\", RFC 2722, October 1999.\n   [RTFM-MIB]\
    \  Brownlee, N., \"Traffic Flow Measurement: Meter MIB\", RFC\n              \
    \ 2720, October 1999.\n"
- title: 7  Authors' Addresses
  contents:
  - "7  Authors' Addresses\n   Sig Handelman\n   IBM Research Division\n   T.J. Watson\
    \ Research Center\n   P.O. Box 704\n   Yorktown Heights, NY 10598\n   Phone: +1\
    \ 914 784 7626\n   EMail: swhandel@us.ibm.com\n   Stephen Stibler\n   IBM Research\
    \ Division\n   T.J. Watson Research Center\n   P.O. Box 704\n   Yorktown Heights,\
    \ NY 10598\n   Phone: +1 914 784 7191\n   EMail: stibler@us.ibm.com\n   Nevil\
    \ Brownlee\n   Information Technology Systems & Services\n   The University of\
    \ Auckland\n   Private Bag 92-019\n   Auckland, New Zealand\n   Phone: +64 9 373\
    \ 7599 x8941\n   EMail: n.brownlee@auckland.ac.nz\n   Greg Ruth\n   GTE Internteworking\n\
    \   3 Van de Graaff Drive\n   P.O. Box 3073\n   Burlington, MA 01803, U.S.A.\n\
    \   Phone: +1 781 262 4831\n   EMail: gruth@bbn.com\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
