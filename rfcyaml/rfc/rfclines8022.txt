Abstract This document contains a specification of three YANG modules and one submodule.
Together they form the core routing data model that serves as a framework for configuring and managing a routing subsystem.
It is expected that these modules will be augmented by additional YANG modules defining data models for control plane protocols, route filters, and other functions.
The core routing data model provides common building blocks for such extensions   routes, Routing Information Bases (RIBs), and control plane protocols.
This document contains a specification of the following YANG modules:  The "ietf routing" module provides generic components of a routing data model.
The "ietf ipv4 unicast routing" module augments the "ietf routing" module with additional data specific to IPv4 unicast.
The "ietf ipv6 unicast routing" module augments the "ietf routing" module with additional data specific to IPv6 unicast.
Its submodule "ietf ipv6 router advertisements" also augments the "ietf interfaces" [RFC7223] and "ietf ip"
[RFC7277] modules with IPv6 router configuration variables required by [RFC4861].
These modules together define the so called core routing data model, which is intended as a basis for future data model development covering more sophisticated routing systems.
While these three modules can be directly used for simple IP devices with static routing (see Appendix B), their main purpose is to provide essential building blocks for more complicated data models involving multiple control plane protocols, multicast routing, additional address families, and advanced functions such as route filtering or policy routing.
To this end, it is expected that the core routing data model will be augmented by numerous modules developed by various IETF working groups.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The following terms are defined in [RFC6241]:  client  message  protocol operation
The following terms are defined in [RFC7950]:  action  augment  configuration data  container  container with presence  data model
module  schema tree  state data  RPC (Remote Procedure Call) operation 2.1.
core routing data model:  YANG data model comprising "ietf routing", "ietf ipv4 unicast routing", and "ietf ipv6 unicast routing" modules.
direct route:  a route to a directly connected network.
An object containing a list of routes together with other information.
See Section 5.2 for details.
An entry of a list in state data ("config false") that is created by the system independently of what has been explicitly configured.
See Section 4.1 for details.
An entry of a list in state data ("config false") that is created and deleted as a direct consequence of certain configuration changes.
See Section 4.1 for details.
Tree Diagrams A simplified graphical representation of the complete data tree is presented in Appendix A, and similar diagrams of its various subtrees appear in the main text.
Prefixes in Data Node Names
In this document, names of data nodes, actions, and other data model objects are often used without a prefix, as long as it is clear from the context in which YANG module each name is defined.
Otherwise, names are prefixed using the standard prefix associated with the corresponding YANG module, as shown in Table 1.
ietf ipv4 unicast routing   Section 8
ietf ipv6 unicast routing   Section 9
The initial design of the core routing data model was driven by the following objectives:
The data model should be suitable for the common address families   in particular, IPv4 and IPv6   and for unicast and multicast routing, as well as Multiprotocol Label Switching (MPLS).
A simple IP routing system, such as one that uses only static routing, should be configurable in a simple way, ideally without any need to develop additional YANG modules.
On the other hand, the core routing framework must allow for complicated implementations involving multiple Routing Information Bases (RIBs) and multiple control plane protocols, as well as controlled redistributions of routing information.
Because device vendors will want to map the data models built on this generic framework to their proprietary data models and configuration interfaces, the framework should be flexible enough to facilitate that and accommodate data models with different logic.
The Design of the Core Routing Data Model
The core routing data model consists of three YANG modules and one submodule.
The first module, "ietf routing", defines the generic components of a routing system.
The other two modules, "ietf ipv4
unicast routing" and "ietf ipv6 unicast routing",
augment the "ietf  routing" module with additional data nodes that are needed for IPv4 and IPv6 unicast routing, respectively.
The "ietf ipv6 unicast  routing" module
has a submodule, "ietf ipv6 router advertisements", that augments the "ietf interfaces" [RFC7223] and "ietf ip" [RFC7277] modules with configuration variables for IPv6 router advertisements as required by [RFC4861].
Figures 1 and 2 show abridged views of the configuration and state data hierarchies.
See Appendix A for the complete data trees.
rw routing  rw router id?
[name]  rw name  rw address family?
ro rib  [name]  ro name
As can be seen from Figures 1 and 2, the core routing data model introduces several generic components of a routing framework: routes, RIBs containing lists of routes, and control plane protocols.
Section 5 describes these components in more detail.
System Controlled and User Controlled List
The core routing data model defines several lists in the schema tree, such as "rib", that have to be populated with at least one entry in any properly functioning device, and additional entries may be configured by a client.
In such a list, the server creates the required item as a so called system controlled entry in state data, i.e., inside the "routing  state" container.
An example can be seen in Appendix D: the "/routing state/ribs/rib" list has two system controlled entries named "ipv4 master" and "ipv6 master".
Additional entries may be created in the configuration by a client, e.g., via the NETCONF protocol.
These are so called user controlled entries.
If the server accepts a configured user controlled entry, then this entry also appears in the state data version of the list.
Corresponding entries in both versions of the list (in state data and configuration) have the same value of the list key.
A client may also provide supplemental configuration of system  controlled entries.
To do so, the client creates a new entry in the configuration with the desired contents.
In order to bind this entry to the corresponding entry in the state data list, the key of the configuration entry has to be set to the same value as the key of the state entry.
Deleting a user controlled entry from the configuration list results in the removal of the corresponding entry in the state data list.
In contrast, if a system controlled entry is deleted from the configuration list, only the extra configuration specified in that entry is removed but the corresponding state data entry remains in the list.
This section describes the essential components of the core routing data model.
Route Routes are basic elements of information in a routing system.
The core routing data model defines only the following minimal set of route attributes:  "destination prefix": address prefix specifying the set of destination addresses for which the route may be used.
"route preference": an integer value (also known as administrative distance) that is used for selecting a preferred route among routes with the same destination prefix.
A lower value means a more preferred route.
"next hop": determines the outgoing interface and/or next hop address(es), or a special operation to be performed with a packet.
Routes are primarily state data that appear as entries of RIBs (Section 5.2) but they may also be found in configuration data, for example, as manually configured static routes.
In the latter case, configurable route attributes are generally a subset of attributes defined for RIB routes.
Every implementation of the core routing data model manages one or more Routing Information Bases (RIBs).
A RIB is a list of routes complemented with administrative data.
Each RIB contains only routes of one address family.
An address family is represented by an identity derived from the "rt:address family" base identity.
In the core routing data model, RIBs are state data represented as entries of the list "/routing state/ribs/rib".
The contents of RIBs are controlled and manipulated by control plane protocol operations that may result in route additions, removals, and modifications.
This also includes manipulations via the "static" and/or "direct" pseudo protocols; see Section 5.3.1.
For every supported address family, exactly one RIB MUST be marked as the so called default RIB to which control plane protocols place their routes by default.
Simple router implementations that do not advertise the feature "multiple ribs" will typically create one system controlled RIB per supported address family and mark it as the default RIB.
More complex router implementations advertising the "multiple ribs" feature support multiple RIBs per address family that can be used for policy routing and other purposes.
The following action (see Section 7.15 of [RFC7950]) is defined for the "rib" list:  active route   return the active RIB route for the destination address that is specified as the action's input parameter.
The core routing data model provides an open ended framework for defining multiple control plane protocol instances, e.g., for Layer 3 routing protocols.
Each control plane protocol instance MUST be assigned a type, which is an identity derived from the "rt:control plane protocol" base identity.
The core routing data model defines two identities for the direct and static pseudo  protocols (Section 5.3.1).
Multiple control plane protocol instances of the same type MAY be configured.
The core routing data model defines two special routing protocol types
Both are in fact pseudo protocols, which means that they are confined to the local device and do not exchange any routing information with adjacent routers.
Every implementation of the core routing data model MUST provide exactly one instance of the "direct" pseudo protocol type.
It is the source of direct routes for all configured address families.
Direct routes are normally supplied by the operating system kernel, based on the configuration of network interface addresses; see Section 6.2.
A pseudo protocol of the type "static" allows for specifying routes manually.
It MAY be configured in zero or multiple instances, although a typical configuration will have exactly one instance.
Defining New Control Plane Protocols It is expected that future YANG modules will create data models for additional control plane protocol types.
Such a new module has to define the protocol specific configuration and state data, and it has to integrate it into the core routing framework in the following way:
A new identity MUST be defined for the control plane protocol, and its base identity MUST be set to "rt:control plane protocol" or to an identity derived from "rt:control plane protocol".
Additional route attributes MAY be defined, preferably in one place by means of defining a YANG grouping.
The new attributes have to be inserted by augmenting the definitions of the nodes /rt:routing state/rt:
/rt:route, and possibly other places in the configuration, state data, notifications, and input/output parameters of actions or RPC operations.
Configuration parameters and/or state data for the new protocol can be defined by augmenting the "control plane protocol" data node under both "/routing" and "/routing state".
By using a "when" statement, the augmented configuration parameters and state data specific to the new protocol SHOULD be made conditional and valid only if the value of "rt:type" or "rt:source protocol" is equal to (or derived from) the new protocol's identity.
It is also RECOMMENDED that protocol specific data nodes be encapsulated in an appropriately named container with presence.
Such a container may contain mandatory data nodes that are otherwise forbidden at the top level of an augment.
The above steps are implemented by the example YANG module for the Routing Information Protocol (RIP) in Appendix C. 5.4.
Parameters of IPv6 Router Advertisements YANG module "ietf ipv6 router advertisements" (Section 9.1), which is a submodule of the "ietf ipv6 unicast routing" module, augments the configuration and state data of IPv6 interfaces with definitions of the following variables as required by Section 6.2.1 of [RFC4861]:  send advertisements  max rtr adv interval  min rtr adv interval
default lifetime  prefix list: a list of prefixes to be advertised.
The "IsRouter" flag, which is also required by [RFC4861], is implemented in the "ietf ip" module [RFC7277] (leaf "ip:forwarding").
The original specification [RFC4861] allows the implementations to decide whether the "valid lifetime" and "preferred lifetime" parameters remain the same in consecutive advertisements or decrement in real time.
However, the latter behavior seems problematic because the values might be reset again to the (higher) configured values after a configuration is reloaded.
Moreover, no implementation is known to use the decrementing behavior.
The "ietf ipv6 router advertisements" submodule therefore stipulates the former behavior with constant values.
Interactions with Other YANG Modules
The semantics of the core routing data model also depends on several configuration parameters that are defined in other YANG modules.
The following boolean switch is defined in the "ietf interfaces" YANG module [RFC7223]:
if:interface/if:enabled If this switch is set to "false" for a network layer interface, then all routing and forwarding functions MUST be disabled on this interface.
The following boolean switches are defined in the "ietf ip" YANG module [RFC7277]:
if:interface/ip:ipv4/ip:enabled If this switch is set to "false" for a network layer interface, then all IPv4 routing and forwarding functions MUST be disabled on this interface.
:forwarding If this switch is set to "false" for a network layer interface, then the forwarding of IPv4 datagrams through this interface MUST be disabled.
However, the interface MAY participate in other IPv4 routing functions, such as routing protocols.
enabled If this switch is set to "false" for a network layer interface, then all IPv6 routing and forwarding functions MUST be disabled on this interface.
If this switch is set to "false" for a network layer interface, then the forwarding of IPv6 datagrams through this interface MUST be disabled.
However, the interface MAY participate in other IPv6 routing functions, such as routing protocols.
In addition, the "ietf ip" module allows for configuring IPv4 and IPv6 addresses and network prefixes or masks on network layer interfaces.
Configuration of these parameters on an enabled interface MUST result in an immediate creation of the corresponding direct route.
The destination prefix of this route is set according to the configured IP address and network prefix/mask, and the interface is set as the outgoing interface for that route.
Routing Management YANG Module <CODE BEGINS>
file "ietf routing@2016 11 04.yang"
module ietf routing { yang version "1.1"
>"; description "This YANG module defines essential components for the management of a routing subsystem.
Copyright (c) 2016 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in the module text are to be interpreted as described in RFC 2119.
This feature indicates that the server supports user defined RIBs.
Servers that do not advertise this feature SHOULD provide exactly one system controlled RIB per supported address family and make it also the default RIB.
This RIB then appears as an entry of the list /routing state/ribs/rib."
; } feature router id { description "This feature indicates that the server supports configuration of an explicit 32 bit router ID that is used by some routing protocols.
Servers that do not advertise this feature set a router ID algorithmically, usually to one of the configured IPv4 addresses.
However, this algorithm is implementation specific."
; } identity control plane protocol { description "Base identity from which control plane protocol identities are derived."
/ grouping address family { description "
This grouping provides a leaf identifying an address family."; leaf address family { type identityref { base address family; } mandatory "true"; description "Address family."
This grouping provides router ID."; leaf router id { type yang:dotted quad; description "A 32 bit number in the form of a dotted quad that is used by some routing protocols identifying a router."
This grouping provides a leaf with an enumeration of special next hops."
; leaf special next hop { type enumeration { enum blackhole { description "Silently discard the packet."
"The packet will be received by the local system."
It is expected that further cases will be added through augments from other modules."; case simple next hop { description "This case represents a simple next hop consisting of the next hop address and/or outgoing interface.
Modules for address families MUST augment this case with a leaf containing a next hop address of that address family."; leaf outgoing interface { type if:interface ref
; description "Name of the outgoing interface."
; list next hop { key "index"; description "An entry of a next hop list.
Modules for address families MUST augment this list with a leaf containing a next hop address of that address family."; leaf index { type string; description "A user specified identifier utilized to uniquely reference the next hop entry in the next hop list.
The value of this index has no semantic meaning other than for referencing the entry."
; } leaf outgoing interface { type if:interface ref
; description "Name of the outgoing interface."
Generic parameters of next hops in state data."
; choice next hop options { mandatory "true"; description "Options for next hops in state data.
It is expected that further cases will be added through augments from other modules, e.g., for recursive next hops."; case simple next hop { description "This case represents a simple next hop consisting of the next hop address and/or outgoing interface.
Modules for address families MUST augment this case with a leaf containing a next hop address of that address family."; leaf outgoing interface { type if:
; description "Name of the outgoing interface."
; list next hop { description "An entry of a next hop list.
Modules for address families MUST augment this list with a leaf containing a next hop address of that address family."; leaf outgoing interface { type if:
; description "Name of the outgoing interface."
It may be either configured or assigned algorithmically by the implementation."
An implementation MUST provide exactly one system controlled instance of the 'direct' pseudo protocol.
For system controlled instances this name is persistent, i.e., it SHOULD NOT change across reboots."
Each entry represents a RIB identified by the 'name' key.
All routes in a RIB MUST belong to the same address family.
This flag has the value of 'true' if and only if the RIB is the default RIB for the given address family.
This data node MUST be augmented with information specific for routes of each address family."; leaf route preference { type route preference; description "This route attribute, also known as administrative distance, allows for selecting the preferred route among routes with the same destination prefix.
A smaller value means a more preferred route."
If no route exists in the RIB for the destination address, no output is returned.
; uses router id { if feature "router id"; description "Configuration of the global router ID.
Routing protocols that use router ID can use this parameter or override it with another value."
; } container control plane protocols { description "Configuration of control plane protocol instances.
; list control plane protocol { key "type name"; description "Each entry contains configuration of a control plane protocol instance."; leaf type { type identityref { base control plane protocol; } description "Type of the control plane protocol an identity derived from the 'control plane protocol' base identity."
; list rib { key "name"; description "Each entry contains configuration for a RIB identified by the 'name' key.
Entries having the same key as a system controlled entry of the list /routing state/ribs/rib are used for configuring parameters of that entry.
Other entries define additional user controlled RIBs."; leaf name { type string; description "The name of the RIB.
For system controlled entries, the value of this leaf must be the same as the name of the corresponding entry in state data.
It is mandatory for user controlled RIBs.
IPv4 Unicast Routing Management YANG Module <CODE BEGINS>
file "ietf ipv4 unicast routing@2016 11 04.yang"
module ietf ipv4 unicast routing { yang version "1.1"; namespace "urn:ietf:params:xml:
This YANG module augments the 'ietf routing' module with basic configuration and state data for IPv4 unicast routing.
Copyright (c) 2016 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in the module text are to be interpreted as described in RFC 2119.
/ identity ipv4 unicast { base rt:
/rt:route" { when "derived from or self(..
ipv4 address; description "IPv4 address of the next hop."
active route/rt:input" { when "derived from or
This augment is valid only for IPv4 unicast RIBs.
/rt:route" { when "derived from or self(..
This augment is valid only for IPv4 unicast."
This augment is valid only for IPv4 unicast.";
} description "Augment 'simple next hop' case in the reply to the 'active route' action."; leaf next hop address { type inet:
ipv4 address; description "IPv4 address of the next hop."
static routes" { description "
; uses rt:next hop content { augment "next hop options/simple next hop" { description "Augment 'simple next hop' case in IPv4 static routes."; leaf next hop address { type inet:ipv4 address; description "IPv4 address of the next hop."
Unicast Routing Management YANG Module <CODE BEGINS> file "ietf
ipv6 unicast routing@2016 11 04.yang
ipv6 unicast routing { yang version "1.1"; namespace "urn:ietf:params:xml:
This YANG module augments the 'ietf routing' module with basic configuration and state data for IPv6 unicast routing.
Copyright (c) 2016 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in the module text are to be interpreted as described in RFC 2119.
/ identity ipv6 unicast { base rt:ipv6; description "
/rt:route" { when "derived from or self(..
active route/rt:input" { when "derived from or
This augment is valid only for IPv6 unicast RIBs.
/rt:route" { when "derived from or self(..
This augment is valid only for IPv6 unicast."
static routes" { description "
; uses rt:next hop content { augment "next hop options/simple next hop" { description "Augment 'simple next hop' case in IPv6 static routes."; leaf next hop address { type inet:ipv6 address; description "IPv6 address of the next hop."
{ description "Augment 'next hop list' case in IPv6 static routes."; leaf next hop address { type inet:
Router Advertisements Submodule <CODE BEGINS>
file "ietf ipv6 router advertisements@2016 11 04.yang
" submodule ietf ipv6 router advertisements { yang version "1.1"; belongs to ietf
} organization "IETF NETMOD (
NETCONF Data Modeling Language) Working Group"; contact
This YANG module augments the 'ietf ip' module with configuration and state data of IPv6 router advertisements.
Copyright (c) 2016 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in the module text are to be interpreted as described in RFC 2119.
The value that is placed in MTU options sent by the router.
The value that is placed in the Reachable Time field in the Router Advertisement messages sent by the router.
The value that is placed in the Cur Hop Limit field in the Router Advertisement messages sent by the router.
A value of zero indicates that the router is not to be used as a default router."
; } container prefix list { description "A list of prefixes that are placed in Prefix Information options in Router Advertisement messages sent from the interface.
The value that is placed in the Valid Lifetime in the Prefix Information option.
The designated value of all 1's (0xffffffff) represents infinity.
An implementation SHOULD keep this value constant in consecutive advertisements except when it is explicitly changed in configuration."
The value that is placed in the Preferred Lifetime in the Prefix Information option, in seconds.
The designated value of all 1's (0xffffffff) represents infinity.
An implementation SHOULD keep this value constant in consecutive advertisements except when it is explicitly changed in configuration.";
/max rtr adv interval" { description "
The value MUST NOT be greater than 75% of 'max rtr adv interval'."
; } description "The minimum time allowed between sending unsolicited multicast Router Advertisements from the interface.
The default value to be used operationally if this leaf is not configured is determined as follows: if max rtr adv interval
9 seconds, the default value is 0.33   max rtr adv interval; otherwise, it is 0.75   max rtr adv interval."; reference "RFC 4861: Neighbor Discovery for IP version 6
; description "The value to be placed in the Retrans Timer field in the Router Advertisement messages sent by the router.
A value of zero means unspecified (by this router).
If this parameter is not configured, the device SHOULD use the value specified in IANA Assigned Numbers that was in effect at the time of implementation."; reference "RFC 4861: Neighbor Discovery for IP version 6
It MUST be either zero or between max rtr adv interval and 9000 seconds.
A value of zero indicates that the router is not to be used as a default router.
These limits may be overridden by specific documents that describe how IPv6 operates over different link layers.
If this parameter is not configured, the device SHOULD use a value of 3   max rtr adv interval."; reference "RFC 4861: Neighbor Discovery for IP version 6
Prefixes that are advertised by default but do not have their entries in the child 'prefix' list are advertised with the default values of all parameters.
Either the prefix is explicitly removed from the set of advertised prefixes, or the parameters with which it is advertised are specified (default case).
"; leaf no advertise { type empty; description "The prefix will not be advertised.
This can be used for removing the prefix from the default set of advertised prefixes."
; } case advertise { leaf valid lifetime { type uint32; units "seconds"; default "2592000"; description "The value to be placed in the Valid Lifetime in the Prefix Information option.
The designated value of all 1's (0xffffffff) represents infinity."; reference "RFC 4861: Neighbor Discovery for IP version 6 (IPv6) AdvValidLifetime.
This value MUST NOT be greater than valid lifetime."
; } default "604800"; description "The value to be placed in the Preferred Lifetime in the Prefix Information option.
The designated value of all 1's (0xffffffff) represents infinity."
This document registers the following namespace URIs in the "IETF XML Registry" [RFC3688]:
yang:ietf routing Registrant Contact: The IESG.
N/A; the requested URI is an XML namespace.
yang:ietf ipv4 unicast routing Registrant Contact: The IESG.
N/A; the requested URI is an XML namespace.
ietf ipv6 unicast routing Registrant Contact
N/A; the requested URI is an XML namespace.
This document registers the following YANG modules in the "YANG Module Names" registry [RFC6020]
ietf ipv4 unicast routing Namespace:
ietf ipv6 unicast routing Prefix
This document registers the following YANG submodule in the "YANG Module Names" registry [RFC6020]
Security Considerations Configuration and state data conforming to the core routing data model (defined in this document) are designed to be accessed via a management protocol with a secure transport layer, such as NETCONF [RFC6241].
The NETCONF access control model [RFC6536] provides the means to restrict access for particular NETCONF users to a preconfigured subset of all available NETCONF protocol operations and content.
A number of configuration data nodes defined in the YANG modules belonging to the core routing data model are writable/creatable/ deletable (i.e., "config true" in YANG terms, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations to these data nodes, such as "edit config" in NETCONF, can have negative effects on the network if the protocol operations are not properly protected.
The vulnerable "config true" parameters and subtrees are the following: /routing/control plane protocols/control plane protocol:
This list specifies the control plane protocols configured on a device.
This list specifies the RIBs configured for the device.
Unauthorized access to any of these lists can adversely affect the routing subsystem of both the local device and the network.
This may lead to network malfunctions, delivery of packets to inappropriate destinations, and other problems.
This appendix presents the complete configuration and state data trees of the core routing data model.
See Section 2.2 for an explanation of the symbols used.
The data type of every leaf node is shown near the right end of the corresponding line.
rw routing  rw router id?
inet:ipv4 prefix Appendix B.  Minimum Implementation Some parts and options of the core routing model, such as user  defined RIBs, are intended only for advanced routers.
This appendix gives basic non normative guidelines for implementing a bare minimum of available functions.
Such an implementation may be used for hosts or very simple routers.
A minimum implementation does not support the feature "multiple ribs".
This means that a single system controlled RIB is available for each supported address family   IPv4, IPv6, or both.
These RIBs are also the default RIBs.
No user controlled RIBs are allowed.
In addition to the mandatory instance of the "direct" pseudo  protocol, a minimum implementation should support configuring instance(s) of the "static" pseudo protocol.
For hosts that are never intended to act as routers, the ability to turn on sending IPv6 router advertisements (Section 5.4) should be removed.
Platforms with severely constrained resources may use deviations for restricting the data model, e.g., limiting the number of "static" control plane protocol instances.
Adding a New Control Plane Protocol
This appendix demonstrates how the core routing data model can be extended to support a new control plane protocol.
The YANG module "example rip" shown below is intended as an illustration rather than a real definition of a data model for the Routing Information Protocol (RIP).
For the sake of brevity, this module does not obey all the guidelines specified in [RFC6087].
/rt:route" { when "derived from or self(rt:source protocol, 'rip:rip')
/rt:route" { description "RIP specific route attributes in the output of 'active route' RPC."
Appendix D.  Data Tree Example
This section contains an example of an instance data tree in the JSON encoding [RFC7951], containing both configuration and state data.
IPv6 router advertisements are configured only on the "eth1" interface and disabled on the upstream "eth0" interface.
:db8:0:2::1   Figure 3: Example of Network Configuration
, "ietf ipv6 unicast routing:
Static routing is used for the internal network.
