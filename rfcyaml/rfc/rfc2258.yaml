- title: __initial_text__
  contents:
  - '                      Internet Nomenclator Project

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The goal of the Internet Nomenclator Project is to integrate the\n\
    \   hundreds of publicly available CCSO servers from around the world.\n   Each\
    \ CCSO server has a database schema that is tailored to the needs\n   of the organization\
    \ that owns it.  The project is integrating the\n   different database schema\
    \ into one query service.  The Internet\n   Nomenclator Project will provide fast\
    \ cross-server searches for\n   locating people on the Internet.  It augments\
    \ existing CCSO services\n   by supplying schema integration, more extensive indexing,\
    \ and two\n   kinds of caching -- all this in a system that scales as the number\
    \ of\n   CCSO servers grows.  One of the best things about the system is that\n\
    \   administrators can incorporate their CCSO servers into Nomenclator\n   without\
    \ changing the servers. All Nomenclator needs is basic\n   information about the\
    \ server.\n   This document provides an overview of the Nomenclator system,\n\
    \   describes how to register a CCSO server in the Internet Nomenclator\n   Project,\
    \ and how to use the Nomenclator search engine to find people\n   on the Internet.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Hundreds of organizations provide directory information\
    \ through the\n   CCSO name service protocol [3]. Although the organizations provide\
    \ a\n   wealth of information about people, finding any one person can be\n  \
    \ difficult because each organization's server is independent.  The\n   different\
    \ servers have different database schemas (attribute names\n   and data formats).\
    \  The 300+ CCSO servers have more than 900\n   different attributes to describe\
    \ information about people. Very few\n   common attributes exist.  Only name and\
    \ email occur in more than 90%\n   of the servers [4].  No special support exists\
    \ for cross-server\n   searches, so searching can be slow and expensive.\n   The\
    \ goal of the Internet Nomenclator Project is to provide fast,\n   integrated\
    \ access to the information in the CCSO servers.  The\n   project is the first\
    \ large-scale use of the  Nomenclator system.\n   Nomenclator is a more general\
    \ system than a white pages directory\n   service.  It is a scalable, extensible\
    \ information system for the\n   Internet.\n   Nomenclator answers descriptive\
    \ (i.e. relational) queries.  Users can\n   locate information about people, organizations,\
    \ hosts, services,\n   publications, and other objects by describing their attributes.\n\
    \   Nomenclator achieves fast descriptive query processing through an\n   active\
    \ catalog, and extensive meta-data and data caching.  The active\n   catalog constrains\
    \ the search space for a query by returning a list\n   of data repositories where\
    \ the answer to the query is likely to be\n   found.  Meta-data and data caching\
    \ keep frequently used query\n   processing resources close to the user, thus\
    \ reducing communication\n   and processing costs.\n   Through the Internet Nomenclator\
    \ Project, users can query any CCSO\n   server, regardless of its attribute names\
    \ or data formats, by\n   specifying the query to Nomenclator (see Figure 1).\
    \  Nomenclator\n   provides a world view of the data in the different servers.\
    \  Users\n   express their queries in this world view.  Nomenclator returns the\n\
    \   answer immediately if it has been cached by a previous query. If not,\n  \
    \ Nomenclator uses its active catalog to constrain the query to the\n   subset\
    \ of relevant CCSO servers.  The speed of the query is\n   increased, because\
    \ only relevant servers are contacted. Nomenclator\n   translates the global query\
    \ into local queries for each relevant CCSO\n   server.  It then translates the\
    \ responses into the format of the\n   world view.\n   --------------------------------------------------------------------\n\
    \                     +-------------+             +-------------+\n          \
    \           |             |             |             |\n         World View \
    \ |             | Local View  |             |\n         Query       |        \
    \     | Query       |  Relevant   |\n         ----------->|             |------------>|\
    \             |\n                     | Nomenclator |             |  CCSO    \
    \   |\n                     |             |             |             |\n    \
    \     <-----------|             |<------------|  Server     |\n          World\
    \ View |             |  Local View |             |\n          Response   |   \
    \          |  Response   |             |\n                     +-------------+\
    \             +-------------+\n                      Figure 1:  A Nomenclator\
    \ Query\n                  Nomenclator translates queries to and from\n      \
    \            the language of the relevant CCSO servers.\n   --------------------------------------------------------------------\n\
    \   The Internet Nomenclator Project makes it easier for users to find a\n   particular\
    \ CCSO server, but it does not send all queries to that\n   server.  When Nomenclator\
    \ constrains the search for a query answer,\n   it screens out irrelevant queries\
    \ from ever reaching the server.\n   When Nomenclator finds an answer in its cache,\
    \ it screens out\n   redundant queries from reaching the server.  The server becomes\n\
    \   easier to find and use without experiencing the high loads caused by\n   exhaustive\
    \ and redundant searches.\n   The Internet Nomenclator Project creates the foundation\
    \ for a much\n   broader heterogeneous directory service for the Internet.  The\n\
    \   current version of Nomenclator provides integrated access to CCSO and\n  \
    \ relational database services. The Nomenclator System Architecture\n   supports\
    \ fast, integrated searches of any collection of heterogeneous\n   directories.\
    \  The Internet Nomenclator Project can be enhanced to\n   support additional\
    \ name services, or provide intergated query\n   services for other application\
    \ domains. The project is starting with\n   CCSO services, because the CCSO services\
    \ are widely available and\n   successful.\n   Section 2 describes the Nomenclator\
    \ system in more detail.  Section 3\n   explains how to register a CCSO server\
    \ as part of the project.\n   Section 4 briefly describes how to use Nomenclator.\
    \  Section 5\n   provides a summary.\n"
- title: 2.  Nomenclator System
  contents:
  - "2.  Nomenclator System\n   Nomenclator is a scalable, extensible information\
    \ system for the\n   Internet. It supports descriptive (i.e. relational) queries.\
    \  Users\n   locate information about people, organizations, hosts, services,\n\
    \   publications, and other objects by describing their attributes.\n   Nomenclator\
    \ achieves fast descriptive query processing through an\n   active catalog, and\
    \ extensive meta-data and data caching.\n   The active catalog constrains the\
    \ search space for a query by\n   returning a list of data repositories where\
    \ the answer to the query\n   is likely to be found.  Components of the catalog\
    \ are distributed\n   indices that isolate queries to parts of the network, and\
    \ smart\n   algorithms for limiting the search space by using semantic,\n   syntactic,\
    \ or structural constraints.  Meta-data caching improves\n   performance by keeping\
    \ frequently used characterizations of the\n   search space close to the user,\
    \ thus reducing active catalog\n   communication and processing costs.  When searching\
    \ for query\n   responses, these techniques improve query performance by contacting\n\
    \   only the data repositories likely to have actual responses, resulting\n  \
    \ in acceptable search times.\n   Administrators make their data available in\
    \ Nomenclator by supplying\n   information about the location, format, contents,\
    \ and protocols of\n   their data repositories.  Experience with Nomenclator shows\
    \ that\n   gathering a small amount of information from data owners can have a\n\
    \   substantial positive impact on the ability of users to retrieve\n   information.\
    \  For example, each CCSO administrator provides a mapping\n   from the local\
    \ view of data (i.e. the local schema) at the CCSO\n   server to Nomenclator's\
    \ world view.  The administrator also supplies\n   possible values for any attributes\
    \ with small domains at the data\n   repository (such as the \"city\" or \"state_or_province\"\
    \ attributes).\n   With this information, Nomenclator can isolate queries to a\
    \ small\n   percentage of the CCSO data repositories, and provide an integrated\n\
    \   view of their data.  Nomenclator provides tools that minimize the\n   effort\
    \ that administrators expend in characterizing their data\n   repositories.  Nomenclator\
    \ does not require administrators to change\n   the format of their data or the\
    \ access protocol for their database.\n"
- title: 2.1 Components of a Nomenclator System
  contents:
  - "2.1 Components of a Nomenclator System\n   A Nomenclator system is comprised\
    \ of a distributed catalog service\n   and a query resolver (see Figure 2).  The\
    \ distributed catalog service\n   gathers meta-data about data repositories and\
    \ makes it available to\n   the query resolver. Meta-data includes constraints\
    \ on attribute\n   values at a data repository, known patterns of data distribution\n\
    \   across several data repositories, search and navigation techniques,\n   schema\
    \ and protocol translation techniques, and the differing schema\n   at data repositories.\n\
    \   --------------------------------------------------------------------\n   \
    \                  +-------------+             +-------------+\n             \
    \        |             |             |             |\n         World View  | \
    \            |  Meta Data  |             |\n         Query       |           \
    \  |  Request    | Distributed |\n         ----------->|   Query     | ----------->|\
    \             |\n                     |   Resolver  |             |  Catalog \
    \   |\n                     |             |             |             |\n    \
    \     <-----------|   (caches)  | <-----------|  Service    |\n          World\
    \ View |             |  Meta Data  |             |\n          Response   |   \
    \          |  Response   |             |\n                     +-------------+\
    \             +-------------+\n                   Figure 2: Components of a Nomenclator\
    \ System\n   --------------------------------------------------------------------\n\
    \   Query resolvers at the user sites retrieve, use, cache, and re-use\n   this\
    \ meta-data in answering user queries.  The catalog is \"active\" in\n   two ways.\
    \ First, some meta-data moves from the distributed catalog\n   service to each\
    \ query resolver during query processing.  Second, the\n   query resolver uses\
    \ the initial meta-data, in particular the search\n   and navigation techniques,\
    \ to generate additional meta-data that\n   guides query processing.  Typically,\
    \ one resolver process serves a\n   few hundred users in an organization, so users\
    \ can benefit from\n   larger resolver caches.\n   Query resolvers cache techniques\
    \ for constraining the search space\n   and the results of previously constrained\
    \ searches (meta-data), and\n   past query answers (data) to speed future query\
    \ processing.  Meta-\n   data and data caching tailor the query resolver to the\
    \ specific needs\n   of the users at the query site.  They also increase the scale\
    \ of a\n   Nomenclator system by reducing the load from repeated searches or\n\
    \   queries on the distributed catalog service, data repositories, and\n   communications\
    \ network.\n   The distributed catalog service is logically one network service,\
    \ but\n   it can be divided into pieces that are distributed and/or replicated.\n\
    \   Query resolvers access this distributed, replicated service using the\n  \
    \ same techniques that work for multiple data repositories.\n   A Nomenclator\
    \ system naturally includes many query resolvers.\n   Resolvers are independent,\
    \ but renewable, query agents that can be as\n   powerful as the resources available\
    \ at the user site.  Caching\n   decreases the dependence of the resolver on the\
    \ distributed catalog\n   service for frequently used meta-data, and on data repositories\
    \ for\n   frequently used data.  Caching thus improves the number of users that\n\
    \   can be supported and the local availability of the query service.\n"
- title: 2.2 Meta-Data Techniques
  contents:
  - "2.2 Meta-Data Techniques\n   The active catalog structures the information space\
    \ into a collection\n   of relations about people, hosts, organizations, services\
    \ and other\n   objects. It collects meta-data for each relation and structures\
    \ it\n   into \"access functions\" for locating and retrieving data.  Access\n\
    \   functions respond to the question: \"Where is data to answer this\n   query?\"\
    \  There are two types of responses corresponding to the two\n   types of access\
    \ functions.  The first type of response is: \"Look over\n   there.\" \"Catalog\
    \ functions\" return this response; they constrain the\n   query search by limiting\
    \ the data repositories contacted to those\n   having data relevant to the query.\
    \ Catalog functions return a\n   referral to data access functions that will answer\
    \ the query or to\n   additional catalog functions to contact for more detailed\n\
    \   information.  The second response to \"Where?\" is: \"Here it is!\" \"Data\n\
    \   access functions\" return this response; they understand how to obtain\n \
    \  query answers from specific data repositories.  They return tuples\n   that\
    \ answer the query.  Nomenclator supplies access functions for\n   common name\
    \ services, such as the CCSO service, and organizations can\n   write and supply\
    \ access functions for data in their repositories.\n   Access functions are implemented\
    \ as remote or local services.  Remote\n   access functions are services that\
    \ are available through a standard\n   remote procedure call interface.  Local\
    \ access functions are\n   functions that are supplied with the query resolver.\
    \  Local access\n   functions can be applied to a variety of indexing and data\
    \ retrieval\n   tasks by loading them with meta-data stored in distributed catalog\n\
    \   service.  Remote access functions are preferred over local ones when\n   the\
    \ resources of the query resolver are inadequate to support the\n   access function.\
    \  The owners of data may also choose to supply remote\n   access functions for\
    \ privacy reasons if their access functions use\n   proprietary information or\
    \ algorithms.  Local functions are preferred\n   whenever possible, because they\
    \ are highly replicated in resolver\n   caches.  They can reduce system and network\
    \ load by bringing the\n   resources of the active catalog directly to the users.\n\
    \   Remote access functions are simple to add to Nomenclator and local\n   access\
    \ functions are simple to apply to new data repositories,\n   because the active\
    \ catalog provides \"referrals\" that describe the\n   conditions for using access\
    \ functions.  For simplicity, this document\n   describes referral techniques\
    \ for exact matching of query strings.\n   Extensions to these techniques in Nomenclator\
    \ support matching query\n   strings that contain wildcards or word-based matching\
    \ of query\n   strings in the style of the CCSO services.\n   Each referral contains\
    \ a template and a list of references to access\n   functions.  The template is\
    \ a conjunctive selection predicate that\n   describes the scope of the access\
    \ functions.  Conjunctive queries\n   that are within the scope of the template\
    \ can be answered with the\n   referral.  When a template contains a wildcard\
    \ value (\"*\") for an\n   attribute, the attribute must be present in any queries\
    \ that are\n   processed by the referral.  The system follows the following rule:\n\
    \     Query Coverage Rule:\n     If the set of tuples satisfying the selection\
    \ predicate in a query\n     is covered by (is a subset of) the set of tuples\
    \ satisfying the\n     template, then the query can be answered by the access\
    \ functions in\n     the reference list of the referral.\n   For example, the\
    \ query below:\n     select * from People where country = \"US\" and surname =\
    \ \"Ordille\";\n   is covered by the following templates in Lines (1) through\
    \ (3), but\n   not by the templates in Lines (4) and (5):\n      (1) country =\
    \ \"US\" and surname = \"*\"\n      (2) country = \"US\" and surname = \"Ordille\"\
    \n      (3) country = \"US\"\n      (4) organization = \"*\"\n      (5) country\
    \ = \"US\" and surname = \"Elliott\"\n   Referrals form a generalization/specialization\
    \ graph for a relation\n   called a \"referral graph.\"  Referral graphs are a\
    \ conceptual tool\n   that guides the integration of different catalog functions\
    \ into our\n   system and that supplies a basis for catalog function construction\n\
    \   and query processing.  A \"referral graph\" is a partial ordering of\n   the\
    \ referrals for a relation.  It is constructed using the\n   subset/superset relationship:\
    \ \"S is a subset of G.\"  A referral S is\n   a subset of referral G if the set\
    \ of queries covered by the template\n   of S is a subset of the set of queries\
    \ covered by the template of G.\n   S is considered a more specific referral than\
    \ G; G is considered a\n   more general referral than S.  For example, the subset\
    \ relationship\n   exists between the pairs of referrals with the templates listed\n\
    \   below:\n      (1) country = \"US\" and surname = \"Ordille\"\n          is\
    \ a subset of\n          country = \"US\"\n      (2) country = \"US\" and surname\
    \ = \"Ordille\"\n          is a subset of\n          country = \"US\" and surname\
    \ = \"*\"\n      (3) country = \"US\" and surname = \"*\"\n          is a subset\
    \ of\n          country =\"US\"\n      (4) country = \"US\"\n          is a subset\n\
    \          \"empty template\"\n   but it does not exist between the pairs of referrals\
    \ with the\n   following templates:\n      (5) country = \"US\"\n          is\
    \ not a subset of\n          department = \"CS\"\n      (6) country = \"US\" and\
    \ name = \"Ordille\"\n          is not a subset of\n          country = \"US\"\
    \ and name = \"Elliott\"\n   In Lines (1) and (2), the more general referral covers\
    \ more queries,\n   because it covers queries that list different values for surname.\
    \  In\n   Line (3), the more general referral covers more queries, because it\n\
    \   covers queries that do not constrain surname to a value.  In Line\n   (4),\
    \ the specific referral covers only those queries that constrain\n   the country\
    \ to \"US\" while the empty template covers all queries.\n   During query processing,\
    \ wildcards in a template are replaced with\n   the value of the corresponding\
    \ attribute in the query.  For any query\n   covered by two referrals S and G\
    \ such that S is a subset of G, the\n   set of tuples satisfying the template\
    \ in S is covered by the set of\n   tuples satisfying the template in G.  S is\
    \ used to process the query,\n   because it provides the more constrained (and\
    \ faster) search space.\n   The referral S has a more constrained logical search\
    \ space than G,\n   because the set of tuples in the scope of S is no larger,\
    \ and often\n   smaller, than the set in the scope of G. Moreover, S has a more\n\
    \   constrained physical search space than G, because the data\n   repositories\
    \ that must contacted for answers to S must also be\n   contacted for answers\
    \ to G, but additional data repositories may need\n   to be contacted to answer\
    \ G.\n   In constraining a query, a catalog function always produces a\n   referral\
    \ that is more specific than the referral containing the\n   catalog function.\
    \  Wildcards (\"*\") in a template indicate which\n   attribute values are used\
    \ by the associated catalog function to\n   generate a more specific referral.\
    \  In other words, catalog functions\n   always follow the rule:\n      Catalog\
    \ Function Constrained Search Rule:\n      Given a referral R with a template\
    \ t and a catalog function cf,\n      and a query q covered by t, the result of\
    \ using cf to process q,\n      cf(q), is a referral R' with template t' such\
    \ that q  is covered\n      by t' and R' is more specific than R.\n   Catalog\
    \ functions make it possible to import a portion of the indices\n   for the information\
    \ space into the query resolver.  Since they\n   generate referrals, the resolver\
    \ can cache the most useful referrals\n   for a relation and call the catalog\
    \ function as needed to generate\n   new referrals.\n   The resolver query processing\
    \ algorithm obtains an initial set of\n   referrals from the distributed catalog\
    \ service.  It then navigates\n   the referral graph, calling catalog functions\
    \ as necessary to obtain\n   additional referrals that narrow the search space.\
    \ Sometimes, two\n   referrals that cover the query have the relationship of general\
    \ to\n   specific to each other.  The resolver eliminates unnecessary access\n\
    \   function processing by using only the most specific referral along\n   each\
    \ path of the referral graph.\n   The search space for the query is initially\
    \ set to all the data\n   repositories in the relation.  As the resolver obtains\
    \ referrals to\n   sets of relevant data repositories (and their associated data\
    \ access\n   functions) it forms the intersection of the referrals to constrain\n\
    \   the search space further.  The intersection of the referrals includes\n  \
    \ only those data repositories listed in all the referrals.\n   Intersection combines\
    \ independent paths through the referral graph to\n   derive benefit from indices\
    \ on different attributes.\n"
- title: 2.3 Meta-Data and Data Caching
  contents:
  - "2.3 Meta-Data and Data Caching\n   A Nomenclator query resolver caches the meta-data\
    \ that result from\n   calling catalog functions.  It also caches the responses\
    \ for queries.\n   If the predicate of a new query is covered by the predicate\
    \ of a\n   previous query, Nomenclator calculates the response for the new query\n\
    \   from the cached response of the old query.  Nomenclator timestamps\n   its\
    \ cache entries to provide measures of the currentness of query\n   responses\
    \ and selective cache refresh.  The timestamps are used to\n   calculate a t-bound\
    \ on query responses [5][1].  A t-bound is the time\n   after which changes may\
    \ have occurred to the data that are not\n   reflected in the query response.\
    \ It is the time of the oldest cache\n   entry used to calculate the response.\
    \  Nomenclator returns a t-bound\n   with each query response.  Users can request\
    \ more current data by\n   asking for responses that are more recent than this\
    \ t-bound. Making\n   such a request flushes older items from the cache if more\
    \ recent\n   items are available.  Query resolvers calculate a minimum t-bound\n\
    \   that is some refresh interval earlier than the current time.\n   Resolvers\
    \ keep themselves current by replacing items in the cache\n   that are earlier\
    \ than the minimum t-bound.\n"
- title: 2.4 Scale and Performance
  contents:
  - "2.4 Scale and Performance\n   Three performance studies of active catalog and\
    \ meta-data caching\n   techniques are available [5].  The first study shows that\
    \ the active\n   catalog and meta-data caching can constrain the search effectively\
    \ in\n   a real environment, the X.500 name space.  The second study examined\n\
    \   the performance of an active catalog and meta-data caching for single\n  \
    \ users on a local area network.  The experiments showed that the\n   techniques\
    \ to eliminate data repositories from the search space can\n   dramatically improve\
    \ response time.  Response times improve, because\n   latency is reduced.  The\
    \ reduction of latency in communications and\n   processing is critical to large-scale\
    \ descriptive query optimization.\n   The experiments also showed that an active\
    \ catalog is the most\n   significant contributor to better response time in a\
    \ system with low\n   load, and that meta-data caching functions to reduce the\
    \ load on the\n   system.  The third study used an analytical model to evaluate\
    \ the\n   performance and scaling of these techniques for a large Internet\n \
    \  environment.  It showed that meta-data caching plays an essential\n   role\
    \ in scaling the distributed catalog service to millions of users.\n   It also\
    \ showed that constraining the search space with an active\n   catalog contributes\
    \ significantly to scaling data repositories to\n   millions of users.  Replication\
    \ and data caching also contribute to\n   the scale of the system in a large Internet\
    \ environment.\n"
- title: 3.  Registering a CCSO Server
  contents:
  - "3.  Registering a CCSO Server\n   The Internet Nomenclator Project supports the\
    \ following home page:\n      http://cm.bell-labs.com/cs/what/nomenclator\n  \
    \ The home page provides a variety of information and services.\n   Administrators\
    \ can register their CCSO servers through services on\n   this home page.  The\
    \ registration service collects CCSO server\n   location information, contact\
    \ information for the administrator of\n   the CCSO server, implicit and explicit\
    \ constraints on entries in the\n   server's database, and a mapping from the\
    \ local schema of the CCSO\n   server to the schema of the world view.\n   The\
    \ implicit and explicit constraints on the server's database are\n   the fuel\
    \ for Nomenclator's catalog functions.  The registration\n   center currently\
    \ collects constraints on organization name,\n   department, city, state or province\
    \ name, country, phone number,\n   postal code, and email address.  These constraints\
    \ are automatically\n   incorporated into Nomenclator's distributed catalog service.\
    \  They\n   are used by catalog functions in query resolvers to constrain\n  \
    \ searches to relevant CCSO servers.  For example, a database only\n   contains\
    \ information about the computer science and electrical\n   engineering departments\
    \ at a French university.  The department,\n   organization and country attributes\
    \ are constrained.  Nomenclator\n   uses these constraints to prevent queries\
    \ about other departments,\n   organizations or countries from being sent to this\
    \ CCSO server.\n   The mapping from the local schema of the CCSO server to the\
    \ schema of\n   the world view allows Nomenclator to translate queries and responses\n\
    \   for the CCSO server.  The registration center currently collects this\n  \
    \ mapping by requesting an example of how to translate a typical entry\n   in\
    \ the CCSO server into the world view schema and, optionally, an\n   example of\
    \ how to translate a canonical entry in the world view\n   schema into the local\
    \ schema of the CCSO server [4].  These examples\n   are then used to generate\
    \ a mapping program that is stored in the\n   distributed catalog service.  The\
    \ CCSO data access function in the\n   query resolver interprets these programs\
    \ to translate queries and\n   responses communicated with that CCSO server. \
    \ We plan to release the\n   mapping language to CCSO server administrators, so\
    \ administrators can\n   write and maintain the mapping for their servers.  We\
    \ have\n   experimented with more than 20 mapping programs.  They are seldom\n\
    \   more than 50 lines, and are often shorter.  It typically takes one or\n  \
    \ two lines to map an attribute.\n"
- title: 4.  Using Nomenclator
  contents:
  - "4.  Using Nomenclator\n   The Internet Nomenclator Project currently provides\
    \ a centralized\n   query service on the Internet.  The project runs a Nomenclator\
    \ query\n   resolver that is accessible through its Web page (see the URL in\n\
    \   Section 3) and the Simple Nomenclator Query Protocol (SNQP) [2].\n   The service\
    \ answers queries that are a conjunction of string values\n   for attributes.\
    \  A variety of matching techniques are supported\n   including exact string matching,\
    \ matching with wildcards, and word-\n   based matching in the style of the CCSO\
    \ service.  Our web interface\n   uses the Simple Nomenclator Query Protocol (SNQP)\
    \ [2].  Programmers\n   can create their own interfaces by using this protocol\
    \ to communicate\n   with the Nomenclator query resolver.  They will require the\
    \ host name\n   and port number for the query resolver which they can obtain from\
    \ the\n   Nomenclator home page.  SNQP, and hence the web interface, are\n   defined\
    \ for US-ASCII.  Support for other character sets will require\n   further work.\n\
    \   Subsequent phases of the project will provide enhanced services such\n   as\
    \ providing advice about the cost of queries and ways to constrain\n   queries\
    \ further to produce faster response times, and allowing users\n   to request\
    \ more current data.  We also plan to distribute query\n   resolvers, so users\
    \ can benefit from running query resolvers locally.\n   Local query resolvers\
    \ reduce latency for the user, and distribute\n   query processing load throughout\
    \ the network.\n"
- title: 5.  Summary
  contents:
  - "5.  Summary\n   The Internet Nomenclator Project augments existing CCSO services\
    \ by\n   supplying schema integration and fast cross-server searches. The key\n\
    \   to speed in descriptive query processing is an active catalog, and\n   extensive\
    \ meta-data and data caching.  The Nomenclator system is the\n   result of research\
    \ in distributed systems [5][6][7][4].  It can be\n   extended to incorporate\
    \ other name servers, besides the CCSO servers,\n   and to address distributed\
    \ search and retrieval challenges in other\n   application domains. In addition\
    \ to providing a white pages service,\n   the Internet Nomenclator Project will\
    \ evaluate how an active catalog,\n   meta-data caching and data caching perform\
    \ in very large global\n   information system.  The ultimate goal of the project\
    \ is to refine\n   these techniques to provide the best possible global information\n\
    \   systems.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   In the Internet Nomenclator Project, the participants'\
    \ data are\n   openly available and read-only. Since the risk of tampering with\n\
    \   queries and responses is considered low, this version of Nomenclator\n   does\
    \ not define procedures for protecting the information in its\n   queries and\
    \ responses.\n"
- title: 7.  References
  contents:
  - "7.  References\n   [1]   H. Garcia-Molina, G. Wiederhold. \"Read-Only Transactions\
    \ in\n         a Distributed Database,\"  ACM Transactions on Database Systems\n\
    \         7(2), pp. 209-234.  June 1982.\n   [2]   Elliott, J., and J. Ordille,\
    \ \"The Simple Nomenclator Query\n         Protocol (SNQP),\" RFC 2259, January\
    \ 1998.\n   [3]   S. Dorner, P. Pomes. \"The CCSO Nameserver: A Description,\"\
    \n         Computer and Communications Services Office Technical Report,\n   \
    \      University of Illinois, Urbana, USA. 1992. Avaialble in the\n         current\
    \ \"qi\" distribution from\n         <URL:ftp://uiarchive.cso.uiuc.edu/local/packages/ph>\n\
    \   [4]   A. Levy, J. Ordille. \"An Experiment in Integrating Internet\n     \
    \    Information Sources,\" AAAI Fall Symposium on AI Applications in\n      \
    \   Knowledge Navigation and Retrieval, November 1995.\n         <URL:http://cm.bell-labs.com/cm/cs/doc/95/11-01.ps.gz>\n\
    \   [5]   J. Ordille. \"Descriptive Name Services for Large Internets,\"\n   \
    \      Ph. D. Dissertation. University of Wisconsin. 1993.\n         <URL:http://cm.bell-labs.com/cm/cs/doc/93/12-01.ps.gz>\n\
    \   [6]   J. Ordille, B. Miller. \"Distributed Active Catalogs and\n         Meta-Data\
    \ Caching in Descriptive Name Services,\" Thirteenth\n         International IEEE\
    \ Conference on Distributed Computing Systems,\n         pp. 120-129.  May 1993.\n\
    \         <URL:http://cm.bell-labs.com/cm/cs/doc/93/5-01.ps.gz>\n   [7]   J. Ordille,\
    \ B. Miller. \"Nomenclator Descriptive Query\n         Optimization in Large X.500\
    \ Environments,\" ACM SIGCOMM\n         Symposium on Communications Architectures\
    \ and Protocols, pp.\n         185-196, September 1991.\n         <URL:http://cm.bell-labs.com/cm/cs/doc/91/9-01.ps.gz>\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   Joann J. Ordille\n   Bell Labs, Lucent Technologies\n\
    \   Computing Sciences Research Center\n   700 Mountain Avenue, Rm 2C-301\n  \
    \ Murray Hill, NJ 07974  USA\n   EMail: joann@bell-labs.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
