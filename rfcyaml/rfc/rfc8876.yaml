- contents:
  - '                    Non-interactive Emergency Calls

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Use of the Internet for emergency calling is described in RFC 6443,\n
    \  'Framework for Emergency Calling Using Internet Multimedia'.  In some\n   cases
    of emergency calls, the transmission of application data is all\n   that is needed,
    and no interactive media channel is established: a\n   situation referred to as
    'non-interactive emergency calls', where,\n   unlike most emergency calls, there
    is no two-way interactive media\n   such as voice or video or text.  This document
    describes use of a SIP\n   MESSAGE transaction that includes a container for the
    data based on\n   the Common Alerting Protocol (CAP).  That type of emergency
    request\n   does not establish a session, distinguishing it from SIP INVITE,\n
    \  which does.  Any device that needs to initiate a request for\n   emergency
    services without an interactive media channel would use the\n   mechanisms in
    this document.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8876.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Architectural
    Overview\n   4.  Protocol Specification\n     4.1.  CAP Transport\n     4.2.  Profiling
    of the CAP Document Content\n     4.3.  Sending a Non-interactive Emergency Call\n
    \  5.  Error Handling\n     5.1.  425 (Bad Alert Message) Response Code\n     5.2.
    \ The AlertMsg-Error Header Field\n   6.  Call Backs\n   7.  Handling Large Amounts
    of Data\n   8.  Example\n   9.  Security Considerations\n   10. IANA Considerations\n
    \    10.1.  'application/EmergencyCallData.cap+xml' Media Type\n     10.2.  'cap'
    Additional Data Block\n     10.3.  425 Response Code\n     10.4.  AlertMsg-Error
    Header Field\n     10.5.  SIP AlertMsg-Error Codes\n   11. References\n     11.1.
    \ Normative References\n     11.2.  Informative References\n   Acknowledgments\n
    \  Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   [RFC6443] describes how devices use the Internet to place
    emergency\n   calls and how Public Safety Answering Points (PSAPs) handle Internet\n
    \  multimedia emergency calls natively.  The exchange of multimedia\n   traffic
    for emergency services involves a SIP session establishment\n   starting with
    a SIP INVITE that negotiates various parameters for\n   that session.\n   In some
    cases, however, there is only application data to be conveyed\n   from the end
    devices to a PSAP or an intermediary.  Examples of such\n   environments include
    sensors issuing alerts, and certain types of\n   medical monitors.  These messages
    may be alerts to emergency\n   authorities and do not require establishment of
    a session.  These\n   types of interactions are called 'non-interactive emergency
    calls'.\n   In this document, we use the term \"call\" so that similarities between\n
    \  non-interactive alerts and sessions with interactive media are more\n   obvious.\n
    \  Non-interactive emergency calls are similar to regular emergency\n   calls
    in the sense that they require the emergency indications,\n   emergency call routing
    functionality, and location.  However, the\n   communication interaction will
    not lead to the exchange of\n   interactive media, that is, Real-Time Transport
    Protocol [RFC3550]\n   packets, such as voice, video, or real-time text.\n   The
    Common Alerting Protocol (CAP) [CAP] is a format for exchanging\n   emergency
    alerts and public warnings.  CAP is mainly used for\n   conveying alerts and warnings
    between authorities and from\n   authorities to the public.  The scope of this
    document is conveying\n   CAP alerts from private devices to emergency service
    authorities, as\n   a call without any interactive media.\n   This document describes
    a method of including a CAP alert in a SIP\n   transaction by defining it as a
    block of \"additional data\" as defined\n   in [RFC7852].  The CAP alert is included
    either by value (the CAP\n   alert is in the body of the message, using a CID)
    or by reference\n   (the message includes a URI that, when dereferenced, returns
    the CAP\n   alert).  The additional data mechanism is also used to send alert-\n
    \  specific data beyond that available in the CAP alert.  This document\n   also
    describes how a SIP MESSAGE [RFC3428] transaction can be used to\n   send a non-interactive
    call.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   Non-interactive emergency call:  An emergency call where there
    is no\n      two-way interactive media\n   SIP:  Session Initiation Protocol [RFC3261]\n
    \  PIDF-LO:  Presence Information Data Format Location Object, a data\n      structure
    for carrying location [RFC4119]\n   LoST:  Location To Service Translation protocol
    [RFC5222]\n   CID:  Content-ID [RFC2392]\n   CAP:  Common Alerting Protocol [CAP]\n
    \  PSAP:  Public Safety Answering Point, the call center for emergency\n      calls\n
    \  ESRP:  Emergency Services Routing Proxy, a type of SIP Proxy Server\n      used
    in some emergency services networks\n"
  title: 2.  Terminology
- contents:
  - "3.  Architectural Overview\n   This section illustrates two envisioned usage
    modes: targeted and\n   location-based emergency alert routing.\n   1.  Emergency
    alerts containing only data are targeted to an\n       intermediary recipient
    responsible for evaluating the next steps.\n       These steps could include:\n
    \      a.  Sending a non-interactive call containing only data towards a\n           Public
    Safety Answering Point (PSAP);\n       b.  Establishing a third-party-initiated
    emergency call towards a\n           PSAP that could include audio, video, and
    data.\n   2.  Emergency alerts may be targeted to a service URN [RFC5031] used\n
    \      for IP-based emergency calls where the recipient is not known to\n       the
    originator.  In this scenario, the alert may contain only\n       data (e.g.,
    a SIP MESSAGE with CAP content, a Geolocation header\n       field, and one or
    more Call-Info header fields containing\n       additional data [RFC7852]).\n
    \  Figure 1 shows a deployment variant where a sensor is pre-configured\n   (using
    techniques outside the scope of this document) to issue an\n   alert to an aggregator
    that processes these messages and performs\n   whatever steps are necessary to
    appropriately react to the alert.\n   For example, a security firm may use different
    sensor inputs to\n   dispatch their security staff to a building they protect
    or to\n   initiate a third-party emergency call.\n    | Sensor     |              |
    Aggregator |\n     Sensors                           |\n     trigger                           |\n
    \    emergency                         |\n     alert                             |\n
    \       |    SIP MESSAGE with CAP      |\n        |      SIP 200 (OK)            |\n
    \                Figure 1: Targeted Emergency Alert Routing\n   In Figure 2, a
    scenario is shown where the alert is routed using\n   location information and
    a service URN.  An emergency services\n   routing proxy (ESRP) may use LoST (a
    protocol defined by [RFC5222],\n   which translates a location to a URI used to
    route an emergency call)\n   to determine the next-hop proxy to route the alert
    message to.  A\n   possible receiver is a PSAP, and the recipient of the alert
    may be a\n   call taker.  In the generic case, there is very likely no prior\n
    \  relationship between the originator and the receiver, e.g., a PSAP.\n   For
    example, a PSAP is likely to receive and accept alerts from\n   entities it has
    no previous relationship with.  This scenario is\n   similar to a classic voice
    emergency services call, and the\n   description in [RFC6881] is applicable.  In
    this use case, the only\n   difference between an emergency call and an emergency
    non-interactive\n   call is that the former uses INVITE, creates a session, and\n
    \  negotiates one or more media streams, while the latter uses MESSAGE,\n   does
    not create a session, and does not have interactive media.\n      |Sensor or |
    \        |  ESRP    |                  |   PSAP    |\n      |Aggregator|         |
    \         |                  |           |\n        Sensors                |                              |\n
    \       trigger                |                              |\n        emergency
    \             |                              |\n        alert                  |
    \                             |\n           | SIP MESSAGE w/CAP |                              |\n
    \          | (including service URN,                          |\n           |
    such as urn:service:sos)                         |\n           |              ESRP
    performs                       |\n           |              emergency alert                     |\n
    \          |              routing                             |\n           |
    \ SIP 200 (OK)     |                              |\n              Figure 2: Location-Based
    Emergency Alert Routing\n"
  title: 3.  Architectural Overview
- contents:
  - '4.  Protocol Specification

    '
  - contents:
    - "4.1.  CAP Transport\n   This document addresses sending a CAP alert in a SIP
      MESSAGE\n   transaction for a non-interactive emergency call.  Behavior with\n
      \  other transactions is not defined.\n   The CAP alert is included in a SIP
      message as an additional data\n   block [RFC7852].  Accordingly, it is conveyed
      in the SIP message with\n   a Call-Info header field with a purpose of \"EmergencyCallData.cap\".\n
      \  The header field may contain a URI that is used by the recipient (or\n   in
      some cases, an intermediary) to obtain the CAP alert.\n   Alternatively, the
      Call-Info header field may contain a Content-ID\n   URL [RFC2392] and the CAP
      alert included in the body of the message.\n   In the latter case, the CAP alert
      is located in a MIME block of the\n   type 'application/emergencyCallData.cap+xml'.\n
      \  If the SIP server does not support the functionality required to\n   fulfill
      the request, then a 501 Not Implemented will be returned as\n   specified in
      [RFC3261].  This is the appropriate response when a User\n   Agent Server (UAS)
      does not recognize the request method and is not\n   capable of supporting it
      for any user.\n   The 415 Unsupported Media Type error will be returned as specified
      in\n   [RFC3261] if the SIP server is refusing to service the request\n   because
      the message body of the request is in a format not supported\n   by the server
      for the requested method.  The server MUST return a\n   list of acceptable formats
      using the Accept, Accept-Encoding, or\n   Accept-Language header fields, depending
      on the specific problem with\n   the content.\n"
    title: 4.1.  CAP Transport
  - contents:
    - "4.2.  Profiling of the CAP Document Content\n   The usage of CAP MUST conform
      to the specification provided with\n   [CAP].  For usage with SIP, the following
      additional requirements are\n   imposed (where \"sender\" and \"author\" are
      as defined in CAP and\n   \"originator\" is the entity sending the CAP alert,
      which may be\n   different from the entity sending the SIP MESSAGE):\n   sender:
      \ The following restrictions and conditions apply to setting\n      the value
      of the <sender> element:\n      *  Originator is a SIP entity, Author indication
      irrelevant: When\n         the alert was created by a SIP-based originator and
      it is not\n         useful to be explicit about the author of the alert, then
      the\n         <sender> element MUST be populated with the SIP URI of the user\n
      \        agent.\n      *  Originator is a non-SIP entity, Author indication
      irrelevant:\n         When the alert was created by a non-SIP-based entity and
      the\n         identity of this original sender is to be preserved, then this\n
      \        identity MUST be placed into the <sender> element.  In this\n         situation,
      it is not useful to be explicit about the author of\n         the alert.  The
      specific type of identity being used will\n         depend on the technology
      used by the originator.\n      *  Author indication relevant: When the author
      is different from\n         the originator of the message and this distinction
      should be\n         preserved, then the <sender> element MUST NOT contain the
      SIP\n         URI of the user agent.\n   incidents:  The <incidents> element
      MUST be present.  This incident\n      identifier MUST be chosen in such a way
      that it is unique for a\n      given <sender, expires, incidents> combination.
      \ Note that the\n      <expires> element is OPTIONAL and might not be present.\n
      \  scope:  The value of the <scope> element MAY be set to \"Private\" if\n      the
      alert is not meant for public consumption.  The <addresses>\n      element is,
      however, not used by this specification since the\n      message routing is
      performed by SIP and the respective address\n      information is already available
      in other SIP header fields.\n      Populating information twice into different
      parts of the message\n      may lead to inconsistency.\n   parameter:  The <parameter>
      element MAY contain additional\n      information specific to the sender, conforming
      to the CAP alert\n      syntax.\n   area:  It is RECOMMENDED to omit this element
      when constructing a\n      message.  If the CAP alert is given to the SIP entity
      to transport\n      and it already contains an <area> element, then the specified\n
      \     location information SHOULD be copied into a PIDF-LO structure\n      (the
      data format for location used by emergency calls on the\n      Internet) referenced
      by the SIP 'Geolocation' header field.  If\n      the CAP alert is being created
      by the SIP entity using a PIDF-LO\n      structure referenced by 'geolocation'
      to construct <area>,\n      implementers must be aware that <area> is limited
      to a circle or\n      polygon, and conversion of other shapes will be required.
      \ Points\n      SHOULD be converted to a circle with a radius equal to the\n
      \     uncertainty of the point.  Arc-bands and ellipses SHOULD be\n      converted
      to polygons with similar coverage, and 3D locations\n      SHOULD be converted
      to 2D forms with similar coverage.\n"
    title: 4.2.  Profiling of the CAP Document Content
  - contents:
    - "4.3.  Sending a Non-interactive Emergency Call\n   A non-interactive emergency
      call is sent using a SIP MESSAGE\n   transaction with a CAP URI or body part
      as described above in a\n   manner similar to how an emergency call with interactive
      media is\n   sent, as described in [RFC6881].  The MESSAGE transaction does
      not\n   create a session nor establish interactive media streams, but\n   otherwise,
      the header content of the transaction, routing, and\n   processing of non-interactive
      calls are the same as those of other\n   emergency calls.\n"
    title: 4.3.  Sending a Non-interactive Emergency Call
  title: 4.  Protocol Specification
- contents:
  - "5.  Error Handling\n   This section defines a new error response code and a header
    field for\n   additional information.\n"
  - contents:
    - "5.1.  425 (Bad Alert Message) Response Code\n   This SIP extension creates
      a new response code defined as follows:\n      425 (Bad Alert Message)\n   The
      425 response code is a rejection of the request, indicating that\n   it was
      malformed enough that no reasonable emergency response to the\n   alert can
      be determined.\n   A SIP intermediary can also use this code to reject an alert
      it\n   receives from a User Agent (UA) when it detects that the provided\n   alert
      is malformed.\n   Section 5.2 describes an AlertMsg-Error header field with
      more\n   details about what was wrong with the alert message in the request.\n
      \  This header field MUST be included in the 425 response.\n   It is usually
      the case that emergency calls are not rejected if there\n   is any useful information
      that can be acted upon.  It is only\n   appropriate to generate a 425 response
      when the responding entity has\n   no other information in the request that
      is usable by the responder.\n   A 425 response code MUST NOT be sent in response
      to a request that\n   lacks an alert message (i.e., CAP data), as the user agent
      in that\n   case may not support this extension.\n   A 425 response is a final
      response within a transaction and MUST NOT\n   terminate an existing dialog.\n"
    title: 5.1.  425 (Bad Alert Message) Response Code
  - contents:
    - "5.2.  The AlertMsg-Error Header Field\n   The AlertMsg-Error header field provides
      additional information about\n   what was wrong with the original request.  In
      some cases, the\n   provided information will be used for debugging purposes.\n
      \  The AlertMsg-Error header field has the following ABNF [RFC5234]:\n      message-header
      \  =/ AlertMsg-Error\n      AlertMsg-Error   = \"AlertMsg-Error\" HCOLON\n                              ErrorValue\n
      \     ErrorValue       =  error-code\n      error-code       = 3DIGIT\n      error-params
      \    = error-code-text\n      error-code-text  = \"message\" EQUAL quoted-string
      ; from RFC 3261\n   HCOLON, SEMI, and EQUAL are defined in [RFC3261].  DIGIT
      is defined\n   in [RFC5234].\n   The AlertMsg-Error header field MUST contain
      only one ErrorValue to\n   indicate what was wrong with the alert payload the
      recipient\n   determined was bad.\n   The ErrorValue contains a 3-digit error
      code indicating what was\n   wrong with the alert in the request.  This error
      code has a\n   corresponding quoted error text string that is human readable.
      \ The\n   text string is OPTIONAL, but RECOMMENDED for human readability,\n
      \  similar to the string phrase used for SIP response codes.  The\n   strings
      in this document are recommendations and are not standardized\n   -- meaning
      an operator can change the strings but MUST NOT change the\n   meaning of the
      error code.  The code space for ErrorValue is separate\n   from SIP Status Codes.\n
      \  The AlertMsg-Error header field MAY be included in any response if an\n   alert
      message was in the request part of the same transaction.  For\n   example, suppose
      a UA includes an alert in a MESSAGE to a PSAP.  The\n   PSAP can accept this
      MESSAGE, even though its UA determined that the\n   alert message contained
      in the MESSAGE was bad.  The PSAP merely\n   includes an AlertMsg-Error header
      field value in the 200 OK to the\n   MESSAGE, thus informing the UA that the
      MESSAGE was accepted but the\n   alert provided was bad.\n   If, on the other
      hand, the PSAP cannot accept the transaction without\n   a suitable alert message,
      a 425 response is sent.\n   A SIP intermediary that requires the UA's alert
      message in order to\n   properly process the transaction may also send a 425
      response with an\n   AlertMsg-Error code.\n   This document defines an initial
      list of AlertMsg-Error values for\n   any SIP response, including provisional
      responses (other than 100\n   Trying) and the new 425 response.  There MUST
      NOT be more than one\n   AlertMsg-Error code in a SIP response.  AlertMsg-Error
      values sent in\n   provisional responses MUST be sent using the mechanism defined
      in\n   [RFC3262]; or, if that mechanism is not negotiated, they MUST be\n   repeated
      in the final response to the transaction.\n   AlertMsg-Error: 100 ; message=\"Cannot
      process the alert payload\"\n   AlertMsg-Error: 101 ; message=\"Alert payload
      was not present or could\n   not be found\"\n   AlertMsg-Error: 102 ; message=\"Not
      enough information to determine\n   the purpose of the alert\"\n   AlertMsg-Error:
      103 ; message=\"Alert payload was corrupted\"\n   Additionally, if an entity
      cannot or chooses not to process the alert\n   message from a SIP request, a
      500 (Server Internal Error) SHOULD be\n   used with or without a configurable
      Retry-After header field.\n"
    title: 5.2.  The AlertMsg-Error Header Field
  title: 5.  Error Handling
- contents:
  - "6.  Call Backs\n   This document does not describe any method for the recipient
    to call\n   back the sender of a non-interactive call.  Usually, these alerts
    are\n   sent by automata, which do not have a mechanism to receive calls of\n
    \  any kind.  The identifier in the 'From' header field may be useful to\n   obtain
    more information, but any such mechanism is not defined in\n   this document.
    \ The CAP alert may contain related contact information\n   for the sender.\n"
  title: 6.  Call Backs
- contents:
  - "7.  Handling Large Amounts of Data\n   Sensors may have large quantities of data
    that they may wish to send.\n   Including large amounts of data (tens of kilobytes)
    in a MESSAGE is\n   not advisable because SIP entities are usually not equipped
    to handle\n   very large messages.  In such cases, the sender SHOULD make use
    of\n   the by-reference mechanisms defined in [RFC7852], which involves\n   making
    the data available via HTTPS [RFC2818] (either at the\n   originator or at another
    entity), placing a URI to the data in the\n   'Call-Info' header field, and the
    recipient uses HTTPS to retrieve\n   the data.  The CAP alert itself can be sent
    by reference using this\n   mechanism, as can any or all of the additional data
    blocks that may\n   contain sensor-specific data.\n   There are no rate-limiting
    mechanisms for any SIP transactions that\n   are standardized, although implementations
    often include such\n   functions.  Non-interactive emergency calls are typically
    handled the\n   same as any emergency call, which means a human call-taker is\n
    \  involved.  Implementations should take note of this limitation,\n   especially
    when calls are placed automatically without human\n   initiation.\n"
  title: 7.  Handling Large Amounts of Data
- contents:
  - "8.  Example\n   The following example shows a CAP document indicating a BURGLARY\n
    \  alert issued by a sensor called 'sensor1@example.com'.  The location\n   of
    the sensor can be obtained from the attached location information\n   provided
    via the 'Geolocation' header field contained in the SIP\n   MESSAGE structure.
    \ Additionally, the sensor provided some data along\n   with the alert message,
    using proprietary information elements\n   intended only to be processed by the
    receiver, a SIP entity acting as\n   an aggregator.\n      MESSAGE sip:aggregator@example.com
    SIP/2.0\n      Via: SIP/2.0/TCP sensor1.example.com;branch=z9hG4bK776sgdkse\n
    \     Max-Forwards: 70\n      From: sip:sensor1@example.com;tag=49583\n      To:
    sip:aggregator@example.com\n      Call-ID: asd88asd77a@2001:db8::ff\n      Geolocation:
    <cid:abcdef@example.com>\n        ;routing-allowed=yes\n      Supported: geolocation\n
    \     CSeq: 1 MESSAGE\n      Call-Info: cid:abcdef2@example.com;purpose=EmergencyCallData.cap\n
    \     Content-Type: multipart/mixed; boundary=boundary1\n      Content-Length:
    ...\n      --boundary1\n      Content-Type: application/EmergencyCallData.cap+xml\n
    \     Content-ID: <abcdef2@example.com>\n      Content-Disposition: by-reference;handling=optional\n
    \     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <alert xmlns=\"urn:oasis:names:tc:emergency:cap:1.1\">\n
    \      <identifier>S-1</identifier>\n       <sender>sip:sensor1@example.com</sender>\n
    \      <sent>2020-01-04T20:57:35Z</sent>\n       <status>Actual</status>\n       <msgType>Alert</msgType>\n
    \      <scope>Private</scope>\n       <incidents>abc1234</incidents>\n       <info>\n
    \          <category>Security</category>\n           <event>BURGLARY</event>\n
    \          <urgency>Expected</urgency>\n           <certainty>Likely</certainty>\n
    \          <severity>Moderate</severity>\n           <senderName>SENSOR 1</senderName>\n
    \          <parameter>\n             <valueName>SENSOR-DATA-NAMESPACE1</valueName>\n
    \            <value>123</value>\n           </parameter>\n           <parameter>\n
    \            <valueName>SENSOR-DATA-NAMESPACE2</valueName>\n             <value>TRUE</value>\n
    \          </parameter>\n       </info>\n     </alert>\n      --boundary1\n      Content-Type:
    application/pidf+xml\n      Content-ID: <abcdef2@example.com>\n      <?xml version=\"1.0\"
    encoding=\"UTF-8\"?>\n          <presence\n             xmlns=\"urn:ietf:params:xml:ns:pidf\"\n
    \            xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\"\n             xmlns:gbp=\n
    \                   \"urn:ietf:params:xml:ns:pidf:geopriv10:basicPolicy\"\n             xmlns:cl=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\n
    \            xmlns:gml=\"http://www.opengis.net/gml\"\n             xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\"\n
    \            entity=\"pres:alice@atlanta.example.com\">\n           <dm:device
    id=\"sensor\">\n             <gp:geopriv>\n               <gp:location-info>\n
    \                <gml:location>\n                   <gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\">\n
    \                    <gml:pos>44.85249659 -93.238665712</gml:pos>\n                   </gml:Point>\n
    \               </gml:location>\n               </gp:location-info>\n               <gp:usage-rules>\n
    \                <gbp:retransmission-allowed>false\n                 </gbp:retransmission-allowed>\n
    \                <gbp:retention-expiry>2020-02-04T20:57:29Z\n                 </gbp:retention-expiry>\n
    \              </gp:usage-rules>\n               <gp:method>802.11</gp:method>\n
    \            </gp:geopriv>\n             <dm:timestamp>2020-01-04T20:57:29Z</dm:timestamp>\n
    \          </dm:device>\n         </presence>\n      --boundary1--\n       Figure
    3: Example Message Conveying an Alert to an Aggregator\n   The following shows
    the same CAP document sent as a non-interactive\n   emergency call towards a PSAP.\n
    \     MESSAGE urn:service:sos SIP/2.0\n      Via: SIP/2.0/TCP sip:aggreg.1.example.com;branch=z9hG4bK776abssa\n
    \     Max-Forwards: 70\n      From: sip:aggregator@example.com;tag=32336\n      To:
    112\n      Call-ID: asdf33443a@example.com\n      Route: sip:psap1.example.gov\n
    \     Geolocation: <cid:abcdef@example.com>\n        ;routing-allowed=yes\n      Supported:
    geolocation\n      Call-info: cid:abcdef2@example.com;purpose=EmergencyCallData.cap\n
    \     CSeq: 1 MESSAGE\n      Content-Type: multipart/mixed; boundary=boundary1\n
    \     Content-Length: ...\n      --boundary1\n      Content-Type: application/EmergencyCallData.cap+xml\n
    \     Content-ID: <abcdef2@example.com>\n     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
    \    <alert xmlns=\"urn:oasis:names:tc:emergency:cap:1.1\">\n       <identifier>S-1</identifier>\n
    \      <sender>sip:sensor1@example.com</sender>\n       <sent>2020-01-04T20:57:35Z</sent>\n
    \      <status>Actual</status>\n       <msgType>Alert</msgType>\n       <scope>Private</scope>\n
    \      <incidents>abc1234</incidents>\n       <info>\n           <category>Security</category>\n
    \          <event>BURGLARY</event>\n           <urgency>Expected</urgency>\n           <certainty>Likely</certainty>\n
    \          <severity>Moderate</severity>\n           <senderName>SENSOR 1</senderName>\n
    \          <parameter>\n             <valueName>SENSOR-DATA-NAMESPACE1</valueName>\n
    \            <value>123</value>\n           </parameter>\n           <parameter>\n
    \            <valueName>SENSOR-DATA-NAMESPACE2</valueName>\n             <value>TRUE</value>\n
    \          </parameter>\n       </info>\n      </alert>\n      --boundary1\n      Content-Type:
    application/pidf+xml\n      Content-ID: <abcdef2@example.com>\n      <?xml version=\"1.0\"
    encoding=\"UTF-8\"?>\n          <presence\n             xmlns=\"urn:ietf:params:xml:ns:pidf\"\n
    \            xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\"\n             xmlns:gbp=\n
    \                   \"urn:ietf:params:xml:ns:pidf:geopriv10:basicPolicy\"\n             xmlns:cl=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\n
    \            xmlns:gml=\"http://www.opengis.net/gml\"\n             xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\"\n
    \            entity=\"pres:alice@atlanta.example.com\">\n           <dm:device
    id=\"sensor\">\n             <gp:geopriv>\n               <gp:location-info>\n
    \                <gml:location>\n                   <gml:Point srsName=\"urn:ogc:def:crs:EPSG::4326\">\n
    \                    <gml:pos>44.85249659 -93.2386657124</gml:pos>\n                   </gml:Point>\n
    \               </gml:location>\n               </gp:location-info>\n               <gp:usage-rules>\n
    \                <gbp:retransmission-allowed>false\n                 </gbp:retransmission-allowed>\n
    \                <gbp:retention-expiry>2020-02-04T20:57:25Z\n                 </gbp:retention-expiry>\n
    \              </gp:usage-rules>\n               <gp:method>802.11</gp:method>\n
    \            </gp:geopriv>\n             <dm:timestamp>2020-01-04T20:57:25Z</dm:timestamp>\n
    \          </dm:device>\n         </presence>\n      --boundary1--\n           Figure
    4: Example Message Conveying an Alert to a PSAP\n"
  title: 8.  Example
- contents:
  - "9.  Security Considerations\n   This section discusses security considerations
    when SIP user agents\n   issue emergency alerts utilizing MESSAGE and CAP.  Location-specific\n
    \  threats are not unique to this document and are discussed in\n   [RFC7378]
    and [RFC6442].\n   The Emergency Context Resolution with Internet Technologies
    (ECRIT)\n   emergency services architecture [RFC6443] considers classic\n   individual-to-authority
    emergency calling where the identity of the\n   emergency caller does not play
    a role at the time of the call\n   establishment itself, i.e., a response to the
    emergency call does not\n   depend on the identity of the caller.  In the case
    of emergency\n   alerts generated by devices such as sensors, the processing may
    be\n   different in order to reduce the number of falsely generated\n   emergency
    alerts.  Alerts could get triggered based on certain sensor\n   input that might
    have been caused by factors other than the actual\n   occurrence of an alert-relevant
    event.  For example, a sensor may\n   simply be malfunctioning.  For this reason,
    not all alert messages\n   are directly sent to a PSAP, but rather, may be pre-processed
    by a\n   separate entity, potentially under supervision by a human, to filter\n
    \  alerts and potentially correlate received alerts with others to\n   obtain
    a larger picture of the ongoing situation.\n   In any case, for alerts initiated
    by sensors, the identity could play\n   an important role in deciding whether
    to accept or ignore an incoming\n   alert message.  With the scenario shown in
    Figure 1, it is very\n   likely that only authenticated sensor input will be processed.
    \ For\n   this reason, it needs to be possible to refuse to accept alert\n   messages
    from unknown origins.  Two types of information elements can\n   be used for this
    purpose:\n   1.  SIP itself provides security mechanisms that allow the\n       verification
    of the originator's identity, such as P-Asserted-\n       Identity [RFC3325] or
    SIP Identity [RFC8224].  The latter\n       provides a cryptographic assurance
    while the former relies on a\n       chain-of-trust model.  These mechanisms can
    be reused.\n   2.  CAP provides additional security mechanisms and the ability
    to\n       carry further information about the sender's identity.\n       Section
    3.3.4.1 of [CAP] specifies the signing algorithms of CAP\n       documents.\n
    \  The specific policy and mechanisms used in a given deployment are out\n   of
    scope for this document.\n   There is no rate limiting mechanisms in SIP, and
    all kinds of\n   emergency calls, including those defined in this document, could
    be\n   used by malicious actors or misbehaving devices to effect a denial-\n   of-service
    attack on the emergency services.  The mechanism defined\n   in this document
    does not introduce any new considerations, although\n   it may be more likely
    that devices that place non-interactive\n   emergency calls without a human initiating
    them may be more likely\n   than those that require a user to initiate them.\n
    \  Implementors should note that automated emergency calls may be\n   prohibited
    or regulated in some jurisdictions, and there may be\n   penalties for \"false
    positive\" calls.\n   This document describes potential retrieval of information
    by\n   dereferencing URIs found in a Call Info header of a SIP MESSAGE.\n   These
    may include a CAP alert as well as other additional data\n   [RFC7852] blocks.
    \ The domain of the device sending the SIP MESSAGE;\n   the domain of the server
    holding the CAP alert, if sent by reference;\n   and the domain of other additional
    data blocks, if sent by reference,\n   may all be different.  No assumptions can
    be made that there are\n   trust relationships between these entities.  Recipients
    MUST take\n   precautions in retrieving any additional data blocks passed by\n
    \  reference, including the CAP alert, because the URI may point to a\n   malicious
    actor or entity not expecting to be referred to for this\n   purpose.  The considerations
    in handling URIs in [RFC3986] apply.\n   Use of timestamps to prevent replay is
    subject to the availability of\n   accurate time at all participants.  Because
    emergency event\n   notification via this mechanism is relatively low frequency
    and\n   generally involves human interaction, implementations may wish to\n   consider
    messages with times within a small number of seconds of each\n   other to be effectively
    simultaneous for the purposes of detecting\n   replay.  Implementations may also
    wish to consider that most deployed\n   time distribution protocols likely to
    be used by these systems are\n   not presently secure.\n   In addition to the
    desire to perform identity-based access control,\n   the classic communication
    security threats need to be considered,\n   including integrity protection to
    prevent forgery or replay of alert\n   messages in transit.  To deal with replay
    of alerts, a CAP document\n   contains the mandatory <identifier>, <sender>, and
    <sent> elements\n   and an optional <expire> element.  Together, these elements
    make the\n   CAP document unique for a specific sender and provide time\n   restrictions.
    \ An entity that has already received a CAP alert within\n   the indicated timeframe
    is able to detect a replayed message and, if\n   the content of that message is
    unchanged, then no additional security\n   vulnerability is created.  Additionally,
    it is RECOMMENDED to make\n   use of SIP security mechanisms, such as the SIP
    Identity PASSporT\n   [RFC8225], to tie the CAP alert to the SIP message.  To
    provide\n   protection of the entire SIP message exchange between neighboring
    SIP\n   entities, the usage of TLS is RECOMMENDED.  [RFC6443] discusses the\n
    \  issues of using TLS with emergency calls, which are equally\n   applicable
    to non-interactive emergency calls.\n   Note that none of the security mechanisms
    in this document protect\n   against a compromised sensor sending crafted alerts.
    \ Confidentiality\n   provided for any emergency calls, including non-interactive
    messages,\n   is subject to local regulations.  Privacy issues are discussed in\n
    \  [RFC7852] and are applicable here.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  'application/EmergencyCallData.cap+xml' Media Type\n   Type name:  application\n
      \  Subtype name:  EmergencyCallData.cap+xml\n   Required parameters:  N/A\n
      \  Optional parameters:  charset; Indicates the character encoding of\n      enclosed
      XML.  Default is UTF-8 [RFC3629].\n   Encoding considerations:  7bit, 8bit,
      or binary.  See Section 3.2 of\n      [RFC7303].\n   Security considerations:
      \ This content type is designed to carry\n      payloads of the Common Alerting
      Protocol (CAP).  RFC 8876\n      discusses security considerations for this.\n
      \  Interoperability considerations:  This content type provides a way to\n      convey
      CAP payloads.\n   Published specification:  RFC 8876\n   Applications that use
      this media type:  Applications that convey\n      alerts and warnings according
      to the CAP standard.\n   Fragment identifier considerations: N/A\n   Additional
      information:  OASIS has published the Common Alerting\n      Protocol at <https://docs.oasis-open.org/emergency/cap/v1.2/CAP-\n
      \     v1.2-os.pdf>\n   Person and email address to contact for further information:\n
      \     Hannes Tschofenig <hannes.tschofenig@gmx.net>\n   Intended usage:  Limited
      use\n   Author/Change controller:  The IESG\n   Other information:  This media
      type is a specialization of\n      'application/xml' [RFC7303], and many of
      the considerations\n      described there also apply to application/\n      EmergencyCallData.cap+xml.\n"
    title: 10.1.  'application/EmergencyCallData.cap+xml' Media Type
  - contents:
    - "10.2.  'cap' Additional Data Block\n   Per this document, IANA has registered
      a new block type in the\n   \"Emergency Call Data Types\" subregistry of the
      \"Emergency Call\n   Additional Data\" registry defined in [RFC7852].  The token
      is \"cap\",\n   the Data About is \"The Call\", and the reference is this document.\n"
    title: 10.2.  'cap' Additional Data Block
  - contents:
    - "10.3.  425 Response Code\n   In the SIP \"Response Codes\" registry, the following
      has been added\n   under Request Failure 4xx.\n             | Response Code
      | Description       | Reference |\n             | 425           | Bad Alert
      Message | RFC 8876  |\n                 Table 1: Response Codes Registry Addition\n
      \  This SIP Response code is defined in Section 5.\n"
    title: 10.3.  425 Response Code
  - contents:
    - "10.4.  AlertMsg-Error Header Field\n   The SIP AlertMsg-Error header field
      is created by this document, with\n   its definition and rules in Section 5.
      \ The IANA \"Session Initiation\n   Protocol (SIP) Parameters\" registry has
      been updated as follows.\n   1.  In the \"Header Fields\" subregistry, the following
      has been added:\n                   | Head Name      | compact | Reference |\n
      \                  | AlertMsg-Error |         | RFC 8876  |\n                   Table
      2: Header Fields Registry Addition\n   2.  In the \"Header Field Parameters
      and Parameter Values\"\n       subregistry, the following has been added:\n
      \        | Header Field   | Parameter Name | Predefined | Reference |\n         |
      AlertMsg-Error | code           | no         | RFC 8876  |\n            Table
      3: Header Field Parameters and Parameter Values\n                              Registry
      Addition\n"
    title: 10.4.  AlertMsg-Error Header Field
  - contents:
    - "10.5.  SIP AlertMsg-Error Codes\n   This document creates a new registry called
      \"SIP AlertMsg-Error\n   Codes\".  AlertMsg-Error codes provide reasons for
      an error discovered\n   by a recipient, categorized by the action to be taken
      by the error\n   recipient.  The initial values for this registry are shown
      below.\n   The registration procedure is Specification Required [RFC8126].\n
      \       | Code | Default Reason Phrase               | Reference |\n        |
      100  | \"Cannot process the alert payload\"  | RFC 8876  |\n        | 101  |
      \"Alert payload was not present or   | RFC 8876  |\n        |      | could not
      be found\"                 |           |\n        | 102  | \"Not enough information
      to          | RFC 8876  |\n        |      | determine the purpose of the alert\"
      |           |\n        | 103  | \"Alert payload was corrupted\"       | RFC
      8876  |\n           Table 4: SIP AlertMsg-Error Codes Registry Creation\n   Details
      of these error codes are in Section 5.\n"
    title: 10.5.  SIP AlertMsg-Error Codes
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [CAP]      Jones, E. and A. Botterell, \"Common
      Alerting Protocol\n              Version 1.2\", OASIS Standard CAP-V1.2, July
      2010,\n              <https://docs.oasis-open.org/emergency/cap/v1.2/CAP-\n
      \             v1.2-os.pdf>.\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2392]  Levinson, E., \"Content-ID and Message-ID Uniform Resource\n              Locators\",
      RFC 2392, DOI 10.17487/RFC2392, August 1998,\n              <https://www.rfc-editor.org/info/rfc2392>.\n
      \  [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI
      10.17487/RFC2818, May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,
      June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC3262]
      \ Rosenberg, J. and H. Schulzrinne, \"Reliability of\n              Provisional
      Responses in Session Initiation Protocol\n              (SIP)\", RFC 3262, DOI
      10.17487/RFC3262, June 2002,\n              <https://www.rfc-editor.org/info/rfc3262>.\n
      \  [RFC3428]  Campbell, B., Ed., Rosenberg, J., Schulzrinne, H.,\n              Huitema,
      C., and D. Gurle, \"Session Initiation Protocol\n              (SIP) Extension
      for Instant Messaging\", RFC 3428,\n              DOI 10.17487/RFC3428, December
      2002,\n              <https://www.rfc-editor.org/info/rfc3428>.\n   [RFC4119]
      \ Peterson, J., \"A Presence-based GEOPRIV Location Object\n              Format\",
      RFC 4119, DOI 10.17487/RFC4119, December 2005,\n              <https://www.rfc-editor.org/info/rfc4119>.\n
      \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC7303]
      \ Thompson, H. and C. Lilley, \"XML Media Types\", RFC 7303,\n              DOI
      10.17487/RFC7303, July 2014,\n              <https://www.rfc-editor.org/info/rfc7303>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
      STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n   [RFC6442]
      \ Polk, J., Rosen, B., and J. Peterson, \"Location Conveyance\n              for
      the Session Initiation Protocol\", RFC 6442,\n              DOI 10.17487/RFC6442,
      December 2011,\n              <https://www.rfc-editor.org/info/rfc6442>.\n   [RFC6881]
      \ Rosen, B. and J. Polk, \"Best Current Practice for\n              Communications
      Services in Support of Emergency Calling\",\n              BCP 181, RFC 6881,
      DOI 10.17487/RFC6881, March 2013,\n              <https://www.rfc-editor.org/info/rfc6881>.\n
      \  [RFC7852]  Gellens, R., Rosen, B., Tschofenig, H., Marshall, R., and\n              J.
      Winterbottom, \"Additional Data Related to an Emergency\n              Call\",
      RFC 7852, DOI 10.17487/RFC7852, July 2016,\n              <https://www.rfc-editor.org/info/rfc7852>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8225]  Wendt, C. and J. Peterson,
      \"PASSporT: Personal Assertion\n              Token\", RFC 8225, DOI 10.17487/RFC8225,
      February 2018,\n              <https://www.rfc-editor.org/info/rfc8225>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC7378]  Tschofenig, H., Schulzrinne, H.,
      and B. Aboba, Ed.,\n              \"Trustworthy Location\", RFC 7378, DOI 10.17487/RFC7378,\n
      \             December 2014, <https://www.rfc-editor.org/info/rfc7378>.\n   [RFC8126]
      \ Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8224]  Peterson, J., Jennings, C., Rescorla, E., and C. Wendt,\n              \"Authenticated
      Identity Management in the Session\n              Initiation Protocol (SIP)\",
      RFC 8224,\n              DOI 10.17487/RFC8224, February 2018,\n              <https://www.rfc-editor.org/info/rfc8224>.\n
      \  [RFC5031]  Schulzrinne, H., \"A Uniform Resource Name (URN) for\n              Emergency
      and Other Well-Known Services\", RFC 5031,\n              DOI 10.17487/RFC5031,
      January 2008,\n              <https://www.rfc-editor.org/info/rfc5031>.\n   [RFC3325]
      \ Jennings, C., Peterson, J., and M. Watson, \"Private\n              Extensions
      to the Session Initiation Protocol (SIP) for\n              Asserted Identity
      within Trusted Networks\", RFC 3325,\n              DOI 10.17487/RFC3325, November
      2002,\n              <https://www.rfc-editor.org/info/rfc3325>.\n   [RFC5222]
      \ Hardie, T., Newton, A., Schulzrinne, H., and H.\n              Tschofenig,
      \"LoST: A Location-to-Service Translation\n              Protocol\", RFC 5222,
      DOI 10.17487/RFC5222, August 2008,\n              <https://www.rfc-editor.org/info/rfc5222>.\n
      \  [RFC6443]  Rosen, B., Schulzrinne, H., Polk, J., and A. Newton,\n              \"Framework
      for Emergency Calling Using Internet\n              Multimedia\", RFC 6443,
      DOI 10.17487/RFC6443, December\n              2011, <https://www.rfc-editor.org/info/rfc6443>.\n
      \  [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Acknowledgments\n   The authors would like to thank the participants of the Early
    Warning\n   ad hoc meeting at IETF 69 for their feedback.  Additionally, we would\n
    \  like to thank the members of the NENA Long Term Direction Working\n   Group
    for their feedback.\n   Additionally, we would like to thank Martin Thomson, James\n
    \  Winterbottom, Shida Schubert, Bernard Aboba, Marc Linsner, Christer\n   Holmberg,
    and Ivo Sedlacek for their review comments.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Brian Rosen\n   470 Conrad Dr\n   Mars, PA 16046\n   United
    States of America\n   Email: br@brianrosen.net\n   Henning Schulzrinne\n   Columbia
    University\n   Department of Computer Science\n   450 Computer Science Building\n
    \  New York, NY 10027\n   United States of America\n   Phone: +1 212 939 7004\n
    \  Email: hgs+ecrit@cs.columbia.edu\n   URI:   https://www.cs.columbia.edu\n   Hannes
    Tschofenig\n   Austria\n   Email: Hannes.Tschofenig@gmx.net\n   URI:   https://www.tschofenig.priv.at\n
    \  Randall Gellens\n   Core Technology Consulting\n"
  title: Authors' Addresses
