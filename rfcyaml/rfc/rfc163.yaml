- title: __initial_text__
  contents:
  - "                        DATA TRANSFER PROTOCOLS\nThis is an informal statement\
    \ of material discussed at the SJCC.  There\nare two peoblems.\n   1.  Movement\
    \ of data from one site to another.\n   2.  Interpretation of the data at receiving\
    \ site.\nThe first task (1) requires a simple protocol which accomplishes the\n\
    following\n   1)  Standard connection procedure for connecting\n       transmitting\
    \ and receiving processes\n   2)  Standard packaging which allows network to\n\
    \       collect the transmitted data stream in the\n       right order and know\
    \ when the end of the\n       file has been reached.\nStandard Connection Procedure\n\
    Suppose every HOST has a process charged with the responsibility of\nsending and\
    \ receiving files between -HOSTS-(processes?)[The Data\nManager].  If the Data\
    \ Manager offers to listen on a given socket for\nfile xmt requests, then ICP\
    \ is sufficient to establish a connection\nbetween a serving Data Manager and\
    \ a using process.\nWe have completely avoided the discussion of data interpretation,\
    \ and\nalso the problem of control.  For instance, we have not said how a\nprocess\
    \ can ask the Data Manager to send a file of a par- ticular name,\nnor how to\
    \ end the transmission of a file.  This is deferred for later.\nAnother desirable\
    \ ability is to have processes transmit files to each\nother independent of the\
    \ HOST Data Manager.  ICP should suffice, for the\ncreation of a full duplex connection.\
    \  File naming, and format\ninterpretation are left to the individual process\
    \ to solve.\nIt is of interest to note that files need not have names.  If two\n\
    processes are connected, then the file name is in a sense implicit in\nthe sending\
    \ and receiving socket pair.  One imagines, however, that\nfile name will be needed\
    \ by the Data Manager.  This information could be\nsupplied either embedded in\
    \ the file transmission data stream, or\nsupplied over a separate control connection\
    \ established at ICP time.\nIt seems reasonable that a Data Manager have a network-wide,\
    \ fixed\nsocket number on which it is listening to service data transmission\n\
    requests.* In this sense, it acts much like the Network Logger.  For\ninter-process\
    \ file transmission, less rigidity seems called for, and we\ncan leave such decisions\
    \ to the individual peocesses communicating with\neach other.  Public processes\
    \ at serving HOSTS could have known (nia\nNIC?) sockets over which file transmission\
    \ is acceptable.\nStandard Packaging\nWe naively imagine that very little in the\
    \ way of formatting is needed\nto move data across the connection.  A few bits\
    \ (8?) at the beginning of\ntransmission could specify the formatting protocol\
    \ (e.g. arbitrary bit\nstring until connection closed, count field + data, break\
    \ chars, etc.)\nDepending on the selected format mode, the appropriate control\
    \ bits will\nor will not appear interspersed betweeen the data bits.  Message\n\
    boundaries are totally transparent.\nA way of ending the file, possibly without\
    \ closing the connection, is\nuseful, although closing the connection after the\
    \ RFNM from final\n\"record\" sent is received by the sending process might be\
    \ adequate\n(sufficient, but not palatable?)\n----\n*ICP causes sockets to be\
    \ dynamically assigned for the ensuing\nconversation (which might be all 1-way).\n\
    A great many problems come up if the Data Manager serves as a part of\nthe HOST\
    \ filling system.  For example, the Data Manager must know\nwhether the process\
    \ it is serving wants to send a file or receive one.\nIn either case, some sort\
    \ of file name + qualifiers (user ID, security\ncodes, access requested, etc.)\
    \ will be needed to resolve the usual\naccess legality, and potential file name\
    \ ambiguities.  This information\ncan be supplied either within a single full\
    \ duplex data stream (1 per\nICP request) established by a modified ICP for data\
    \ transmission.  The\nformer seems simplier, sufficient, and immediately implementable.\n\
    Data transmission between arbitrary processes probably does not need as\nmuch\
    \ formal control protocol as process-to/from-DM (data Manager)\nconnection.  Ad\
    \ hoc procedures can be established by trading information\non previously established\
    \ connections; regularity is nice, so perhaps a\nstandard set of control protocols\
    \ can be devised which work, regardless\nof the identity of the processes transmitting\
    \ data.  Control data must\nbe formatted and probably identifiable by prefix codes\
    \ so that\nunnecessary control information can be left out if desired.  (I am\n\
    thinking specifically of file names.)\nIt remains to establish a set of format\
    \ protocols which permit packaging\nof data and identification of control information.\
    \  This should be the\ntask of the renamed Data Transmission Committee.\n    \
    \   [ This RFC was put into machine readable form for entry ]\n         [ into\
    \ the online RFC archives by Simone Demmel 5/97 ]\n"
