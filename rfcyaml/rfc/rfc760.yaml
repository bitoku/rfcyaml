- title: __initial_text__
  contents:
  - ''
- title: 'IEN: 128'
  contents:
  - "IEN: 128\n                              DOD STANDARD\n                      \
    \     INTERNET PROTOCOL\n                              January 1980\n        \
    \                      prepared for\n               Defense Advanced Research\
    \ Projects Agency\n                Information Processing Techniques Office\n\
    \                         1400 Wilson Boulevard\n                       Arlington,\
    \ Virginia  22209\n                     Information Sciences Institute\n     \
    \                      TABLE OF CONTENTS\n    PREFACE ........................................................\
    \ iii\n"
- title: 1.  INTRODUCTION ..................................................... 1
  contents:
  - "1.  INTRODUCTION ..................................................... 1\n  1.1\
    \  Motivation .................................................... 1\n  1.2  Scope\
    \ ......................................................... 1\n  1.3  Interfaces\
    \ .................................................... 1\n  1.4  Operation .....................................................\
    \ 2\n"
- title: 2.  OVERVIEW ......................................................... 5
  contents:
  - "2.  OVERVIEW ......................................................... 5\n  2.1\
    \  Relation to Other Protocols ................................... 5\n  2.2  Model\
    \ of Operation ............................................ 5\n  2.3  Function\
    \ Description .......................................... 7\n"
- title: 3.  SPECIFICATION ................................................... 11
  contents:
  - "3.  SPECIFICATION ................................................... 11\n  3.1\
    \  Internet Header Format ....................................... 11\n  3.2  Discussion\
    \ ................................................... 21\n  3.3  Examples & Scenarios\
    \ ......................................... 30\n  3.4  Interfaces ...................................................\
    \ 34\n"
- title: GLOSSARY ............................................................ 37
  contents:
  - 'GLOSSARY ............................................................ 37

    '
- title: REFERENCES .......................................................... 41
  contents:
  - 'REFERENCES .......................................................... 41

    '
- title: Internet Protocol
  contents:
  - "Internet Protocol\n                                                       Internet\
    \ Protocol\n                                PREFACE\n"
- title: This document specifies the DoD Standard Internet Protocol.  This
  contents:
  - 'This document specifies the DoD Standard Internet Protocol.  This

    '
- title: document is based on five earlier editions of the ARPA Internet Protocol
  contents:
  - 'document is based on five earlier editions of the ARPA Internet Protocol

    '
- title: Specification, and the present text draws heavily from them.  There have
  contents:
  - 'Specification, and the present text draws heavily from them.  There have

    '
- title: been many contributors to this work both in terms of concepts and in
  contents:
  - 'been many contributors to this work both in terms of concepts and in

    '
- title: terms of text.  This edition revises the details security,
  contents:
  - 'terms of text.  This edition revises the details security,

    '
- title: compartmentation, and precedence features of the internet protocol.
  contents:
  - "compartmentation, and precedence features of the internet protocol.\n       \
    \                                                    Jon Postel\n            \
    \                                               Editor\n"
- title: 'RFC: 760'
  contents:
  - 'RFC: 760

    '
- title: 'IEN: 128'
  contents:
  - 'IEN: 128

    '
- title: 'Replaces:  IENs 123, 111,'
  contents:
  - 'Replaces:  IENs 123, 111,

    '
- title: 80, 54, 44, 41, 28, 26
  contents:
  - "80, 54, 44, 41, 28, 26\n                              DOD STANDARD\n        \
    \                   INTERNET PROTOCOL\n                            1.  INTRODUCTION\n"
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n  The Internet Protocol is designed for use in interconnected\
    \ systems of\n  packet-switched computer communication networks.  Such a system\
    \ has\n  been called a \"catenet\" [1].  The internet protocol provides for\n\
    \  transmitting blocks of data called datagrams from sources to\n  destinations,\
    \ where sources and destinations are hosts identified by\n  fixed length addresses.\
    \  The internet protocol also provides for\n  fragmentation and reassembly of\
    \ long datagrams, if necessary, for\n  transmission through \"small packet\" networks.\n"
- title: 1.2.  Scope
  contents:
  - "1.2.  Scope\n  The internet protocol is specifically limited in scope to provide\
    \ the\n  functions necessary to deliver a package of bits (an internet\n  datagram)\
    \ from a source to a destination over an interconnected system\n  of networks.\
    \  There are no mechanisms to promote data reliability,\n  flow control, sequencing,\
    \ or other services commonly found in\n  host-to-host protocols.\n"
- title: 1.3.  Interfaces
  contents:
  - "1.3.  Interfaces\n  This protocol is called on by host-to-host protocols in an\
    \ internet\n  environment.  This protocol calls on local network protocols to\
    \ carry\n  the internet datagram to the next gateway or destination host.\n  For\
    \ example, a TCP module would call on the internet module to take a\n  TCP segment\
    \ (including the TCP header and user data) as the data\n  portion of an internet\
    \ datagram.  The TCP module would provide the\n  addresses and other parameters\
    \ in the internet header to the internet\n  module as arguments of the call. \
    \ The internet module would then\n  create an internet datagram and call on the\
    \ local network interface to\n  transmit the internet datagram.\n  In the ARPANET\
    \ case, for example, the internet module would call on a\n  local net module which\
    \ would add the 1822 leader [2] to the internet\n  datagram creating an ARPANET\
    \ message to transmit to the IMP.  The\n  ARPANET address would be derived from\
    \ the internet address by the\n  local network interface and would be the address\
    \ of some host in the\n  ARPANET, that host might be a gateway to other networks.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Introduction
  contents:
  - 'Introduction

    '
- title: 1.4.  Operation
  contents:
  - "1.4.  Operation\n  The internet protocol implements two basic functions:  addressing\
    \ and\n  fragmentation.\n  The internet modules use the addresses carried in the\
    \ internet header\n  to transmit internet datagrams toward their destinations.\
    \  The\n  selection of a path for transmission is called routing.\n  The internet\
    \ modules use fields in the internet header to fragment and\n  reassemble internet\
    \ datagrams when necessary for transmission through\n  \"small packet\" networks.\n\
    \  The model of operation is that an internet module resides in each host\n  engaged\
    \ in internet communication and in each gateway that\n  interconnects networks.\
    \  These modules share common rules for\n  interpreting address fields and for\
    \ fragmenting and assembling\n  internet datagrams.  In addition, these modules\
    \ (especially in\n  gateways) may have procedures for making routing decisions\
    \ and other\n  functions.\n  The internet protocol treats each internet datagram\
    \ as an independent\n  entity unrelated to any other internet datagram.  There\
    \ are no\n  connections or logical circuits (virtual or otherwise).\n  The internet\
    \ protocol uses four key mechanisms in providing its\n  service:  Type of Service,\
    \ Time to Live, Options, and Header Checksum.\n  The Type of Service is used to\
    \ indicate the quality of the service\n  desired; this may be thought of as selecting\
    \ among Interactive, Bulk,\n  or Real Time, for example.  The type of service\
    \ is an abstract or\n  generalized set of parameters which characterize the service\
    \ choices\n  provided in the networks that make up the internet.  This type of\n\
    \  service indication is to be used by gateways to select the actual\n  transmission\
    \ parameters for a particular network, the network to be\n  used for the next\
    \ hop, or the next gateway when routing an internet\n  datagram.\n  The Time to\
    \ Live is an indication of the lifetime of an internet\n  datagram.  It is set\
    \ by the sender of the datagram and reduced at the\n  points along the route where\
    \ it is processed.  If the time to live\n  reaches zero before the internet datagram\
    \ reaches its destination, the\n  internet datagram is destroyed.  The time to\
    \ live can be thought of as\n  a self destruct time limit.\n  The Options provide\
    \ for control functions needed or useful in some\n  situations but unnecessary\
    \ for the most common communications.  The\n                                 \
    \                      Internet Protocol\n                                   \
    \                         Introduction\n  options include provisions for timestamps,\
    \ error reports, and special\n  routing.\n  The Header Checksum provides a verification\
    \ that the information used\n  in processing internet datagram has been transmitted\
    \ correctly.  The\n  data may contain errors.  If the header checksum fails, the\
    \ internet\n  datagram is discarded at once by the entity which detects the error.\n\
    \  The internet protocol does not provide a reliable communication\n  facility.\
    \  There are no acknowledgments either end-to-end or\n  hop-by-hop.  There is\
    \ no error control for data, only a header\n  checksum.  There are no retransmissions.\
    \  There is no flow control.\n"
- title: Internet Protocol
  contents:
  - "Internet Protocol\n                                                       Internet\
    \ Protocol\n                              2.  OVERVIEW\n"
- title: 2.1.  Relation to Other Protocols
  contents:
  - "2.1.  Relation to Other Protocols\n  The following diagram illustrates the place\
    \ of the internet protocol\n  in the protocol hierarchy:\n                 +------+\
    \ +-----+ +-----+       +-----+\n                 |Telnet| | FTP | |Voice|  ...\
    \  |     |\n                 +------+ +-----+ +-----+       +-----+\n        \
    \               |   |         |             |   \n                      +-----+\
    \     +-----+       +-----+\n                      | TCP |     | RTP |  ...  |\
    \     |\n                      +-----+     +-----+       +-----+\n           \
    \              |           |             |   \n                      +-------------------------------+\n\
    \                      |       Internet Protocol       |\n                   \
    \   +-------------------------------+\n                                     |\
    \                 \n                        +---------------------------+  \n\
    \                        |   Local Network Protocol  |  \n                   \
    \     +---------------------------+  \n                                     |\
    \                 \n                         Protocol Relationships\n        \
    \                       Figure 1.\n  Internet protocol interfaces on one side\
    \ to the higher level\n  host-to-host protocols and on the other side to the local\
    \ network\n  protocol.\n"
- title: 2.2.  Model of Operation
  contents:
  - "2.2.  Model of Operation\n  The  model of operation for transmitting a datagram\
    \ from one\n  application program to another is illustrated by the following\n\
    \  scenario:\n    We suppose that this transmission will involve one intermediate\n\
    \    gateway.\n    The sending application program prepares its data and calls\
    \ on its\n    local internet module to send that data as a datagram and passes\
    \ the\n    destination address and other parameters as arguments of the call.\n\
    \    The internet module prepares a datagram header and attaches the data\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Overview
  contents:
  - "Overview\n    to it.  The internet module determines a local network address\
    \ for\n    this internet address, in this case it is the address of a gateway.\n\
    \    It sends this datagram and the local network address to the local\n    network\
    \ interface.\n    The local network interface creates a local network header,\
    \ and\n    attaches the datagram to it, then sends the result via the local\n\
    \    network.\n    The datagram arrives at a gateway host wrapped in the local\
    \ network\n    header, the local network interface strips off this header, and\n\
    \    turns the datagram over to the internet module.  The internet module\n  \
    \  determines from the internet address that the datagram should be\n    forwarded\
    \ to another host in a second network.  The internet module\n    determines a\
    \ local net address for the destination host.  It calls\n    on the local network\
    \ interface for that network to send the\n    datagram.\n    This local network\
    \ interface creates a local network header and\n    attaches the datagram sending\
    \ the result to the destination host.\n    At this destination host the datagram\
    \ is stripped of the local net\n    header by the local network interface and\
    \ handed to the internet\n    module.\n    The internet module determines that\
    \ the datagram is for an\n    application program in this host.  It passes the\
    \ data to the\n    application program in response to a system call, passing the\
    \ source\n    address and other parameters as results of the call.\n   Application\
    \                                           Application\n   Program          \
    \                                         Program\n         \\               \
    \                                    /      \n       Internet Module      Internet\
    \ Module      Internet Module    \n             \\                 /       \\\
    \                /           \n             LNI-1          LNI-1      LNI-2  \
    \       LNI-2          \n                \\           /             \\       \
    \   /              \n               Local Network 1           Local Network 2\
    \            \n                            Transmission Path\n               \
    \                 Figure 2\n                                                 \
    \      Internet Protocol\n                                                   \
    \             Overview\n"
- title: 2.3.  Function Description
  contents:
  - "2.3.  Function Description\n  The function or purpose of Internet Protocol is\
    \ to move datagrams\n  through an interconnected set of networks.  This is done\
    \ by passing\n  the datagrams from one internet module to another until the\n\
    \  destination is reached.  The internet modules reside in hosts and\n  gateways\
    \ in the internet system.  The datagrams are routed from one\n  internet module\
    \ to another through individual networks based on the\n  interpretation of an\
    \ internet address.  Thus, one important mechanism\n  of the internet protocol\
    \ is the internet address.\n  In the routing of messages from one internet module\
    \ to another,\n  datagrams may need to traverse a network whose maximum packet\
    \ size is\n  smaller than the size of the datagram.  To overcome this difficulty,\
    \ a\n  fragmentation mechanism is provided in the internet protocol.\n  Addressing\n\
    \    A distinction is made between names, addresses, and routes [3].   A\n   \
    \ name indicates what we seek.  An address indicates where it is.  A\n    route\
    \ indicates how to get there.  The internet protocol deals\n    primarily with\
    \ addresses.  It is the task of higher level (i.e.,\n    host-to-host or application)\
    \ protocols to make the mapping from\n    names to addresses.   The internet module\
    \ maps internet addresses to\n    local net addresses.  It is the task of lower\
    \ level (i.e., local net\n    or gateways) procedures to make the mapping from\
    \ local net \n    addresses to routes.\n    Addresses are fixed length of four\
    \ octets (32 bits).  An address\n    begins with a one octet network number, followed\
    \ by a three octet\n    local address.  This three octet field is called the \"\
    rest\" field.\n    Care must be taken in mapping internet addresses to local net\n\
    \    addresses; a single physical host must be able to act as if it were\n   \
    \ several distinct hosts to the extent of using several distinct\n    internet\
    \ addresses.  A host should also be able to have several\n    physical interfaces\
    \ (multi-homing).\n    That is, a host should be allowed several physical interfaces\
    \ to the\n    network with each having several logical internet addresses.\n \
    \   Examples of address mappings may be found in reference [4].\n  Fragmentation\n\
    \    Fragmentation of an internet datagram may be necessary when it\n    originates\
    \ in a local net that allows a large packet size and must\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Overview
  contents:
  - "Overview\n    traverse a local net that limits packets to a smaller size to reach\n\
    \    its destination.\n    An internet datagram can be marked \"don't fragment.\"\
    \  Any internet\n    datagram so marked is not to be internet fragmented under\
    \ any\n    circumstances.  If internet datagram marked don't fragment cannot be\n\
    \    delivered to its destination without fragmenting it, it is to be\n    discarded\
    \ instead.\n    Fragmentation, transmission and reassembly across a local network\n\
    \    which is invisible to the internet protocol module is called\n    intranet\
    \ fragmentation and may be used [5].\n    The internet fragmentation and reassembly\
    \ procedure needs to be able\n    to break a datagram into an almost arbitrary\
    \ number of pieces that\n    can be later reassembled.  The receiver of the fragments\
    \ uses the\n    identification field to ensure that fragments of different datagrams\n\
    \    are not mixed.  The fragment offset field tells the receiver the\n    position\
    \ of a fragment in the original datagram.  The fragment\n    offset and length\
    \ determine the portion of the original datagram\n    covered by this fragment.\
    \  The more-fragments flag indicates (by\n    being reset) the last fragment.\
    \  These fields provide sufficient\n    information to reassemble datagrams.\n\
    \    The identification field is used to distinguish the fragments of one\n  \
    \  datagram from those of another.  The originating protocol module of\n    an\
    \ internet datagram sets the identification field to a value that\n    must be\
    \ unique for that source-destination pair and protocol for the\n    time the datagram\
    \ will be active in the internet system.  The\n    originating protocol module\
    \ of a complete datagram sets the\n    more-fragments flag to zero and the fragment\
    \ offset to zero.\n    To fragment a long internet datagram, an internet protocol\
    \ module\n    (for example, in a gateway), creates two new internet datagrams\
    \ and\n    copies the contents of the internet header fields from the long\n \
    \   datagram into both new internet headers.  The data of the long\n    datagram\
    \ is divided into two portions on a 8 octet (64 bit) boundary\n    (the second\
    \ portion might not be an integral multiple of 8 octets,\n    but the first must\
    \ be).  Call the number of 8 octet blocks in the\n    first portion NFB (for Number\
    \ of Fragment Blocks).  The first\n    portion of the data is placed in the first\
    \ new internet datagram,\n    and the total length field is set to the length\
    \ of the first\n    datagram.  The more-fragments flag is set to one.  The second\n\
    \    portion of the data is placed in the second new internet datagram,\n    and\
    \ the total length field is set to the length of the second\n    datagram.  The\
    \ more-fragments flag carries the same value as the\n    long datagram.  The fragment\
    \ offset field of the second new internet\n                                  \
    \                     Internet Protocol\n                                    \
    \                            Overview\n    datagram is set to the value of that\
    \ field in the long datagram plus\n    NFB.\n    This procedure can be generalized\
    \ for an n-way split, rather than\n    the two-way split described.\n    To assemble\
    \ the fragments of an internet datagram, an internet\n    protocol module (for\
    \ example at a destination host) combines\n    internet datagram that all have\
    \ the same value for the four fields:\n    identification, source, destination,\
    \ and protocol.  The combination\n    is done by placing the data portion of each\
    \ fragment in the relative\n    position indicated by the fragment offset in that\
    \ fragment's\n    internet header.  The first fragment will have the fragment\
    \ offset\n    zero, and the last fragment will have the more-fragments flag reset\n\
    \    to zero.\n"
- title: Internet Protocol
  contents:
  - "Internet Protocol\n                                                       Internet\
    \ Protocol\n                           3.  SPECIFICATION\n"
- title: 3.1.  Internet Header Format
  contents:
  - "3.1.  Internet Header Format\n  A summary of the contents of the internet header\
    \ follows:\n    0                   1                   2                   3\
    \   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Version|\
    \  IHL  |Type of Service|          Total Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Identification        |Flags|      Fragment Offset    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Time to Live |    Protocol   |         Header Checksum       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Source Address                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Destination Address                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Options                    |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Example Internet Datagram Header\n                      \
    \         Figure 3.\n  Note that each tick mark represents one bit position.\n\
    \  Version:  4 bits\n    The Version field indicates the format of the internet\
    \ header.  This\n    document describes version 4.\n  IHL:  4 bits\n    Internet\
    \ Header Length is the length of the internet header in 32\n    bit words, and\
    \ thus points to the beginning of the data.  Note that\n    the minimum value\
    \ for a correct header is 5.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Type of Service:  8 bits\n    The Type of Service provides an\
    \ indication of the abstract\n    parameters of the quality of service desired.\
    \  These parameters are\n    to be used to guide the selection of the actual service\
    \ parameters\n    when transmitting a datagram through a particular network. \
    \ Several\n    networks offer service precedence, which somehow treats high\n\
    \    precedence traffic as more important than other traffic.  A few\n    networks\
    \ offer a Stream service, whereby one can achieve a smoother\n    service at some\
    \ cost.  Typically this involves the reservation of\n    resources within the\
    \ network.  Another choice involves a low-delay\n    vs. high-reliability trade\
    \ off.  Typically networks invoke more\n    complex (and delay producing) mechanisms\
    \ as the need for reliability\n    increases.\n      Bits 0-2:  Precedence.\n\
    \      Bit    3:  Stream or Datagram.\n      Bits 4-5:  Reliability.\n      Bit\
    \    6:  Speed over Reliability.\n      Bits   7:  Speed.\n         0     1  \
    \   2     3     4     5     6     7\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      |                 |     |           |     |     |\n      |   PRECEDENCE\
    \    | STRM|RELIABILITY| S/R |SPEED|\n      |                 |     |        \
    \   |     |     |\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n \
    \     PRECEDENCE          STRM      RELIABILITY  S/R      SPEED\n      111-Flash\
    \ Override  1-STREAM  11-highest   1-speed  1-high\n      110-Flash          \
    \ 0-DTGRM   10-higher    0-rlblt  0-low\n      11X-Immediate                 01-lower\n\
    \      01X-Priority                  00-lowest\n      00X-Routine\n    The type\
    \ of service is used to specify the treatment of the datagram\n    during its\
    \ transmission through the internet system.  In the\n    discussion (section 3.2)\
    \ below, a chart shows the relationship of\n    the internet type of service to\
    \ the actual service provided on the\n    ARPANET, the SATNET, and the PRNET.\n\
    \  Total Length:  16 bits\n    Total Length is the length of the datagram, measured\
    \ in octets,\n    including internet header and data.  This field allows the length\
    \ of\n    a datagram to be up to 65,535 octets.  Such long datagrams are\n   \
    \ impractical for most hosts and networks.  All hosts must be prepared\n    to\
    \ accept datagrams of up to 576 octets (whether they arrive whole\n          \
    \                                             Internet Protocol\n            \
    \                                               Specification\n    or in fragments).\
    \  It is recommended that hosts only send datagrams\n    larger than 576 octets\
    \ if they have assurance that the destination\n    is prepared to accept the larger\
    \ datagrams.\n    The number 576 is selected to allow a reasonable sized data\
    \ block to\n    be transmitted in addition to the required header information.\
    \  For\n    example, this size allows a data block of 512 octets plus 64 header\n\
    \    octets to fit in a datagram.  The maximal internet header is 60\n    octets,\
    \ and a typical internet header is 20 octets, allowing a\n    margin for headers\
    \ of higher level protocols.\n  Identification:  16 bits\n    An identifying value\
    \ assigned by the sender to aid in assembling the\n    fragments of a datagram.\n\
    \  Flags:  3 bits\n    Various Control Flags.\n      Bit 0: reserved, must be\
    \ zero\n      Bit 1: Don't Fragment This Datagram (DF).\n      Bit 2: More Fragments\
    \ Flag (MF).\n          0   1   2\n        +---+---+---+\n        |   | D | M\
    \ |\n        | 0 | F | F |\n        +---+---+---+\n  Fragment Offset:  13 bits\n\
    \    This field indicates where in the datagram this fragment belongs.\n    The\
    \ fragment offset is measured in units of 8 octets (64 bits).  The\n    first\
    \ fragment has offset zero.\n  Time to Live:  8 bits\n    This field indicates\
    \ the maximum time the datagram is allowed to\n    remain the internet system.\
    \  If this field contains the value zero,\n    then the datagram should be destroyed.\
    \  This field is modified in\n    internet header processing.  The time is measured\
    \ in units of\n    seconds.  The intention is to cause undeliverable datagrams\
    \ to be\n    discarded.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Protocol:  8 bits\n    This field indicates the next level protocol\
    \ used in the data\n    portion of the internet datagram.  The values for various\
    \ protocols\n    are specified in reference [6].\n  Header Checksum:  16 bits\n\
    \    A checksum on the header only.  Since some header fields may change\n   \
    \ (e.g., time to live), this is recomputed and verified at each point\n    that\
    \ the internet header is processed.\n    The checksum algorithm is:\n      The\
    \ checksum field is the 16 bit one's complement of the one's\n      complement\
    \ sum of all 16 bit words in the header.  For purposes of\n      computing the\
    \ checksum, the value of the checksum field is zero.\n    This is a simple to\
    \ compute checksum and experimental evidence\n    indicates it is adequate, but\
    \ it is provisional and may be replaced\n    by a CRC procedure, depending on\
    \ further experience.\n  Source Address:  32 bits\n    The source address.  The\
    \ first octet is the Source Network, and the\n    following three octets are the\
    \ Source Local Address.\n  Destination Address:  32 bits\n    The destination\
    \ address.  The first octet is the Destination\n    Network, and the following\
    \ three octets are the Destination Local\n    Address.\n                     \
    \                                  Internet Protocol\n                       \
    \                                    Specification\n  Options:  variable\n   \
    \ The option field is variable in length.  There may be zero or more\n    options.\
    \  There are two cases for the format of an option:\n      Case 1:  A single octet\
    \ of option-type.\n      Case 2:  An option-type octet, an option-length octet,\
    \ and the\n               actual option-data octets.\n    The option-length octet\
    \ counts the option-type octet and the\n    option-length octet as well as the\
    \ option-data octets.\n    The option-type octet is viewed as having 3 fields:\n\
    \      1 bit   reserved, must be zero\n      2 bits  option class,\n      5 bits\
    \  option number.\n    The option classes are:\n      0 = control\n      1 = internet\
    \ error\n      2 = experimental debugging and measurement\n      3 = reserved\
    \ for future use\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n    The following internet options are defined:\n      CLASS NUMBER\
    \ LENGTH DESCRIPTION\n      ----- ------ ------ -----------\n        0     0 \
    \     -    End of Option list.  This option occupies only\n                  \
    \        1 octet; it has no length octet.\n        0     1      -    No Operation.\
    \  This option occupies only 1\n                          octet; it has no length\
    \ octet.\n        0     2      4    Security.  Used to carry Security, and user\n\
    \                          group (TCC) information compatible with DOD\n     \
    \                     requirements.\n        0     3     var.  Source Routing.\
    \  Used to route the internet\n                          datagram based on information\
    \ supplied by the\n                          source.\n        0     7     var.\
    \  Return Route.  Used to record the route an\n                          internet\
    \ datagram takes.\n        0     8      4    Stream ID.  Used to carry the stream\n\
    \                          identifier.\n        1     1     var.  General Error\
    \ Report.  Used to report errors\n                          in internet datagram\
    \ processing.\n        2     4      6    Internet Timestamp.\n        2     5\
    \      6    Satellite Timestamp.\n    Specific Option Definitions\n      End of\
    \ Option List\n        +--------+\n        |00000000|\n        +--------+\n  \
    \        Type=0\n        This option indicates the end of the option list.  This\
    \ might\n        not coincide with the end of the internet header according to\n\
    \        the internet header length.  This is used at the end of all\n       \
    \ options, not the end of each option, and need only be used if\n        the end\
    \ of the options would not otherwise coincide with the end\n        of the internet\
    \ header.\n        May be copied, introduced, or deleted on fragmentation.\n \
    \                                                      Internet Protocol\n   \
    \                                                        Specification\n     \
    \ No Operation\n        +--------+\n        |00000001|\n        +--------+\n \
    \         Type=1\n        This option may be used between options, for example,\
    \ to align\n        the beginning of a subsequent option on a 32 bit boundary.\n\
    \        May be copied, introduced, or deleted on fragmentation.\n      Security\n\
    \        This option provides a way for DOD hosts to send security and\n     \
    \   TCC (closed user groups) parameters through networks whose\n        transport\
    \ leader does not contain fields for this information.\n        The format for\
    \ this option is as follows:\n          +--------+--------+---------+--------+\n\
    \          |00000010|00000100|000000SS |  TCC   |\n          +--------+--------+---------+--------+\n\
    \            Type=2  Length=4\n        Security:  2 bits\n          Specifies\
    \ one of 4 levels of security\n            11-top secret\n            10-secret\n\
    \            01-confidential\n            00-unclassified\n        Transmission\
    \ Control Code:  8 bits\n          Provides a means to compartmentalize traffic\
    \ and define\n          controlled communities of interest among subscribers.\n\
    \        Note that this option does not require processing by the\n        internet\
    \ module but does require that this information be passed\n        to higher level\
    \ protocol modules.  The security and TCC\n        information might be used to\
    \ supply class level and compartment\n        information for transmitting datagrams\
    \ into or through\n        AUTODIN II.\n        Must be copied on fragmentation.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n      Source Route\n        +--------+--------+--------+---------//--------+\n\
    \        |00000011| length |        source route        |\n        +--------+--------+--------+---------//--------+\n\
    \          Type=3\n        The source route option provides a means for the source\
    \ of an\n        internet datagram to supply routing information to be used by\n\
    \        the gateways in forwarding the datagram to the destination.\n       \
    \ The option begins with the option type code.  The second octet\n        is the\
    \ option length which includes the option type code and the\n        length octet,\
    \ as well as length-2 octets of source route data.\n        A source route is\
    \ composed of a series of internet addresses.\n        Each internet address is\
    \ 32 bits or 4 octets.  The length\n        defaults to two, which indicates the\
    \ source route is empty and\n        the remaining routing is to be based on the\
    \ destination address\n        field.\n        If the address in destination address\
    \ field has been reached and\n        this option's length is not two, the next\
    \ address in the source\n        route replaces the address in the destination\
    \ address field, and\n        is deleted from the source route and this option's\
    \ length is\n        reduced by four.  (The Internet Header Length Field must\
    \ be\n        changed also.)\n        Must be copied on fragmentation.\n     \
    \ Return Route\n        +--------+--------+--------+---------//--------+\n   \
    \     |00000111| length |        return route        |\n        +--------+--------+--------+---------//--------+\n\
    \          Type=7\n        The return route option provides a means to record\
    \ the route of\n        an internet datagram.\n        The option begins with\
    \ the option type code.  The second octet\n        is the option length which\
    \ includes the option type code and the\n        length octet, as well as length-2\
    \ octets of return route data.\n        A return route is composed of a series\
    \ of internet addresses.\n        The length defaults to two, which indicates\
    \ the return route is\n        empty.\n                                      \
    \                 Internet Protocol\n                                        \
    \                   Specification\n        When an internet module routes a datagram\
    \ it checks to see if\n        the return route option is present.  If it is,\
    \ it inserts its\n        own internet address as known in the environment into\
    \ which this\n        datagram is being forwarded into the return route at the\
    \ front\n        of the address string and increments the length by four.\n  \
    \      Not copied on fragmentation, goes in first fragment only.\n      Stream\
    \ Identifier\n        +--------+--------+---------+--------+\n        |00001000|00000010|\
    \     Stream ID    |\n        +--------+--------+---------+--------+\n       \
    \   Type=8  Length=4\n        This option provides a way for the 16-bit SATNET\
    \ stream\n        identifier to be carried through networks that do not support\n\
    \        the stream concept.\n        Must be copied on fragmentation.\n     \
    \ General Error Report\n        +--------+--------+--------+--------+--------+----//----+\n\
    \        |00100001| length |err code|        id       |          |\n        +--------+--------+--------+--------+--------+----//----+\n\
    \         Type=33\n        The general error report is used to report an error\
    \ detected in\n        processing an internet datagram to the source internet\
    \ module of\n        that datagram.  The \"err code\" indicates the type of error\n\
    \        detected, and the \"id\" is copied from the identification field\n  \
    \      of the datagram in error, additional octets of error information\n    \
    \    may be present depending on the err code.\n        If an internet datagram\
    \ containing the general error report\n        option is found to be in error\
    \ or must be discarded, no error\n        report is sent.\n        ERR CODE:\n\
    \          0 - Undetermined Error, used when no information is available\n   \
    \       about the type of error or the error does not fit any defined\n      \
    \    class.  Following the id should be as much of the datagram\n          (starting\
    \ with the internet header) as fits in the option\n          space.\n        \
    \  1 - Datagram Discarded, used when specific information is\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n          available about the reason for discarding the datagram\
    \ can be\n          reported.  Following the id should be the original (4-octets)\n\
    \          destination address, and the (1-octet) reason.\n            Reason\
    \   Description\n            ------   -----------\n               0     No Reason\n\
    \               1     No One Wants It - No higher level protocol or\n        \
    \             application program at destination wants this\n                \
    \     datagram.\n               2     Fragmentation Needed & DF - Cannot deliver\
    \ with out\n                     fragmenting and has don't fragment bit set.\n\
    \               3     Reassembly Problem - Destination could not\n           \
    \          reassemble due to missing fragments when time to\n                \
    \     live expired.\n               4     Gateway Congestion - Gateway discarded\
    \ datagram due\n                     to congestion.\n        The error report\
    \ is placed in a datagram with the following\n        values in the internet header\
    \ fields:\n          Version:  Same as the datagram in error.\n          IHL:\
    \  As computed.\n          Type of Service:  Zero.\n          Total Length:  As\
    \ computed.\n          Identification:  A new identification is selected.\n  \
    \        Flags:  Zero.\n          Fragment Offset:  Zero.\n          Time to Live:\
    \  Sixty.\n          Protocol:  Same as the datagram in error.\n          Header\
    \ Checksum:  As computed.\n          Source Address:  Address of the error reporting\
    \ module.\n          Destination Address:  Source address of the datagram in error.\n\
    \          Options:  The General Error Report Option.\n          Padding:  As\
    \ needed.\n        Not copied on fragmentation, goes with first fragment.\n  \
    \    Internet Timestamp\n        +--------+--------+--------+--------+--------+--------+\n\
    \        |01000100|00000100|        time in milliseconds       |\n        +--------+--------+--------+--------+--------+--------+\n\
    \         Type=68  Length=6\n        The data of the timestamp is a 32 bit time\
    \ measured in\n        milliseconds.\n                                       \
    \                Internet Protocol\n                                         \
    \                  Specification\n        Not copied on fragmentation, goes with\
    \ first fragment\n      Satellite Timestamp\n        +--------+--------+--------+--------+--------+--------+\n\
    \        |01000101|00000100|        time in milliseconds       |\n        +--------+--------+--------+--------+--------+--------+\n\
    \         Type=69  Length=6\n        The data of the timestamp is a 32 bit time\
    \ measured in\n        milliseconds.\n        Not copied on fragmentation, goes\
    \ with first fragment\n  Padding:  variable\n    The internet header padding is\
    \ used to ensure that the internet\n    header ends on a 32 bit boundary.  The\
    \ padding is zero.\n"
- title: 3.2.  Discussion
  contents:
  - "3.2.  Discussion\n  The implementation of a protocol must be robust.  Each implementation\n\
    \  must expect to interoperate with others created by different\n  individuals.\
    \  While the goal of this specification is to be explicit\n  about the protocol\
    \ there is the possibility of differing\n  interpretations.  In general, an implementation\
    \ should be conservative\n  in its sending behavior, and liberal in its receiving\
    \ behavior.  That\n  is, it should be careful to send well-formed datagrams, but\
    \ should\n  accept any datagram that it can interpret (e.g., not object to\n \
    \ technical errors where the meaning is still clear).\n  The basic internet service\
    \ is datagram oriented and provides for the\n  fragmentation of datagrams at gateways,\
    \ with reassembly taking place\n  at the destination internet protocol module\
    \ in the destination host.\n  Of course, fragmentation and reassembly of datagrams\
    \ within a network\n  or by private agreement between the gateways of a network\
    \ is also\n  allowed since this is transparent to the internet protocols and the\n\
    \  higher-level protocols.  This transparent type of fragmentation and\n  reassembly\
    \ is termed \"network-dependent\" (or intranet) fragmentation\n  and is not discussed\
    \ further here.\n  Internet addresses distinguish sources and destinations to\
    \ the host\n  level and provide a protocol field as well.  It is assumed that\
    \ each\n  protocol will provide for whatever multiplexing is necessary within\
    \ a\n  host.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Addressing\n    The 8 bit network number, which is the first\
    \ octet of the address,\n    has a value as specified in reference [6].\n    The\
    \ 24 bit local address, assigned by the local network, should\n    allow for a\
    \ single physical host to act as several distinct internet\n    hosts.  That is,\
    \ there should be mapping between internet host\n    addresses and network/host\
    \ interfaces that allows several internet\n    addresses to correspond to one\
    \ interface.  It should also be allowed\n    for a host to have several physical\
    \ interfaces and to treat the\n    datagrams from several of them as if they were\
    \ all addressed to a\n    single host.  Address mappings between internet addresses\
    \ and\n    addresses for ARPANET, SATNET, PRNET, and other networks are\n    described\
    \ in reference [4].\n  Fragmentation and Reassembly.\n    The internet identification\
    \ field (ID) is used together with the\n    source and destination address, and\
    \ the protocol fields, to identify\n    datagram fragments for reassembly.\n \
    \   The More Fragments flag bit (MF) is set if the datagram is not the\n    last\
    \ fragment.  The Fragment Offset field identifies the fragment\n    location,\
    \ relative to the beginning of the original unfragmented\n    datagram.  Fragments\
    \ are counted in units of 8 octets.  The\n    fragmentation strategy is designed\
    \ so than an unfragmented datagram\n    has all zero fragmentation information\
    \ (MF = 0, fragment offset =\n    0).  If an internet datagram is fragmented,\
    \ its data portion must be\n    broken on 8 octet boundaries.\n    This format\
    \ allows 2**13 = 8192 fragments of 8 octets each for a\n    total of 65,536 octets.\
    \  Note that this is consistent with the the\n    datagram total length field.\n\
    \    When fragmentation occurs, some options are copied, but others\n    remain\
    \ with the first fragment only.\n    Every internet module must be able to forward\
    \ a datagram of 68\n    octets without further fragmentation.  This is because\
    \ an internet\n    header may be up to 60 octets, and the minimum fragment is\
    \ 8 octets.\n    Every internet destination must be able to receive a datagram\
    \ of 576\n    octets either in one piece or in fragments to be reassembled.\n\
    \                                                       Internet Protocol\n  \
    \                                                         Specification\n    The\
    \ fields which may be affected by fragmentation include:\n      (1) options field\n\
    \      (2) more fragments flag\n      (3) fragment offset\n      (4) internet\
    \ header length field\n      (5) total length field\n      (6) header checksum\n\
    \    If the Don't Fragment flag (DF) bit is set, then internet\n    fragmentation\
    \ of this datagram is NOT permitted, although it may be\n    discarded.  This\
    \ can be used to prohibit fragmentation in cases\n    where the receiving host\
    \ does not have sufficient resources to\n    reassemble internet fragments.\n\
    \    General notation in the following pseudo programs: \"=<\" means \"less\n\
    \    than or equal\", \"#\" means \"not equal\", \"=\" means \"equal\", \"<-\"\
    \ means\n    \"is set to\".  Also, \"x to y\" includes x and excludes y; for example,\n\
    \    \"4 to 7\" would include 4, 5, and 6 (but not 7).\n    Fragmentation Procedure\n\
    \      The maximum sized datagram that can be transmitted through the\n      next\
    \ network is called the maximum transmission unit (MTU).\n      If the total length\
    \ is less than or equal the maximum transmission\n      unit then submit this\
    \ datagram to the next step in datagram\n      processing; otherwise cut the datagram\
    \ into two fragments, the\n      first fragment being the maximum size, and the\
    \ second fragment\n      being the rest of the datagram.  The first fragment is\
    \ submitted\n      to the next step in datagram processing, while the second fragment\n\
    \      is submitted to this procedure in case it still too large.\n      Notation:\n\
    \        FO    -  Fragment Offset\n        IHL   -  Internet Header Length\n \
    \       MF    -  More Fragments flag\n        TL    -  Total Length\n        OFO\
    \   -  Old Fragment Offset\n        OIHL  -  Old Internet Header Length\n    \
    \    OMF   -  Old More Fragments flag\n        OTL   -  Old Total Length\n   \
    \     NFB   -  Number of Fragment Blocks\n        MTU   -  Maximum Transmission\
    \ Unit\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n      Procedure:\n        IF TL =< MTU THEN Submit this datagram\
    \ to the next step\n             in datagram processing ELSE\n        To produce\
    \ the first fragment:\n        (1)  Copy the original internet header;\n     \
    \   (2)  OIHL <- IHL; OTL <- TL; OFO <- FO; OMF <- MF;\n        (3)  NFB <- (MTU-IHL*4)/8;\n\
    \        (4)  Attach the first NFB*8 data octets;\n        (5)  Correct the header:\n\
    \             MF <- 1;  TL <- (IHL*4)+(NFB*8);\n             Recompute Checksum;\n\
    \        (6)  Submit this fragment to the next step in\n             datagram\
    \ processing;\n        To produce the second fragment:\n        (7)  Selectively\
    \ copy the internet header (some options\n             are not copied, see option\
    \ definitions);\n        (8)  Append the remaining data;\n        (9)  Correct\
    \ the header:\n             IHL <- (((OIHL*4)-(length of options not copied))+3)/4;\n\
    \             TL <- OTL - NFB*8 - (OIHL-IHL)*4);\n             FO <- OFO + NFB;\
    \  MF <- OMF;  Recompute Checksum;\n        (10) Submit this fragment to the fragmentation\
    \ test; DONE.\n    Reassembly Procedure\n      For each datagram the buffer identifier\
    \ is computed as the\n      concatenation of the source, destination, protocol,\
    \ and\n      identification fields.  If this is a whole datagram (that is both\n\
    \      the fragment offset and the more fragments  fields are zero), then\n  \
    \    any reassembly resources associated with this buffer identifier\n      are\
    \ released and the datagram is forwarded to the next step in\n      datagram processing.\n\
    \      If no other fragment with this buffer identifier is on hand then\n    \
    \  reassembly resources are allocated.  The reassembly resources\n      consist\
    \ of a data buffer, a header buffer, a fragment block bit\n      table, a total\
    \ data length field, and a timer.  The data from the\n      fragment is placed\
    \ in the data buffer according to its fragment\n      offset and length, and bits\
    \ are set in the fragment block bit\n      table corresponding to the fragment\
    \ blocks received.\n      If this is the first fragment (that is the fragment\
    \ offset is\n      zero)  this header is placed in the header buffer.  If this\
    \ is the\n      last fragment ( that is the more fragments field is zero) the\n\
    \      total data length is computed.  If this fragment completes the\n      datagram\
    \ (tested by checking the bits set in the fragment block\n      table), then the\
    \ datagram is sent to the next step in datagram\n                            \
    \                           Internet Protocol\n                              \
    \                             Specification\n      processing; otherwise the timer\
    \ is set to the maximum of the\n      current timer value and the value of the\
    \ time to live field from\n      this fragment; and the reassembly routine gives\
    \ up control.\n      If the timer runs out, the all reassembly resources for this\n\
    \      buffer identifier are released.  The initial setting of the timer\n   \
    \   is a lower bound on the reassembly waiting time.  This is because\n      the\
    \ waiting time will be increased if the Time to Live in the\n      arriving fragment\
    \ is greater than the current timer value but will\n      not be decreased if\
    \ it is less.  The maximum this timer value\n      could reach is the maximum\
    \ time to live (approximately 4.25\n      minutes).  The current recommendation\
    \ for the initial timer\n      setting is 15 seconds.  This may be changed as\
    \ experience with\n      this protocol accumulates.  Note that the choice of this\
    \ parameter\n      value is related to the buffer capacity available and the data\n\
    \      rate of the transmission medium; that is, data rate times timer\n     \
    \ value equals buffer size (e.g., 10Kb/s X 15s = 150Kb).\n      Notation:\n  \
    \      FO    -  Fragment Offset\n        IHL   -  Internet Header Length\n   \
    \     MF    -  More Fragments flag\n        TTL   -  Time To Live\n        NFB\
    \   -  Number of Fragment Blocks\n        TL    -  Total Length\n        TDL \
    \  -  Total Data Length\n        BUFID -  Buffer Identifier\n        RCVBT - \
    \ Fragment Received Bit Table\n        TLB   -  Timer Lower Bound\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n      Procedure:\n        (1)  BUFID <- source|destination|protocol|identification;\n\
    \        (2)  IF FO = 0 AND MF = 0\n        (3)     THEN IF buffer with BUFID\
    \ is allocated\n        (4)             THEN flush all reassembly for this BUFID;\n\
    \        (5)          Submit datagram to next step; DONE.\n        (6)     ELSE\
    \ IF no buffer with BUFID is allocated\n        (7)             THEN allocate\
    \ reassembly resources\n                             with BUFID;\n           \
    \                  TIMER <- TLB; TDL <- 0;\n        (8)          put data from\
    \ fragment into data buffer with\n                     BUFID from octet FO*8 to\n\
    \                                         octet (TL-(IHL*4))+FO*8;\n        (9)\
    \          set RCVBT bits from FO\n                                        to\
    \ FO+((TL-(IHL*4)+7)/8);\n        (10)         IF MF = 0 THEN TDL <- TL-(IHL*4)+(FO*8)\n\
    \        (11)         IF FO = 0 THEN put header in header buffer\n        (12)\
    \         IF TDL # 0\n        (13)          AND all RCVBT bits from 0\n      \
    \                                       to (TDL+7)/8 are set\n        (14)   \
    \         THEN TL <- TDL+(IHL*4)\n        (15)                 Submit datagram\
    \ to next step;\n        (16)                 free all reassembly resources\n\
    \                             for this BUFID; DONE.\n        (17)         TIMER\
    \ <- MAX(TIMER,TTL);\n        (18)         give up until next fragment or timer\
    \ expires;\n        (19) timer expires: flush all reassembly with this BUFID;\
    \ DONE.\n      In the case that two or more fragments contain the same data\n\
    \      either identically or through a partial overlap, this procedure\n     \
    \ will use the more recently arrived copy in the data buffer and\n      datagram\
    \ delivered.\n  Identification\n    The choice of the Identifier for a datagram\
    \ is based on the need to\n    provide a way to uniquely identify the fragments\
    \ of a particular\n    datagram.  The protocol module assembling fragments judges\
    \ fragments\n    to belong to the same datagram if they have the same source,\n\
    \    destination, protocol, and Identifier.  Thus, the sender must choose\n  \
    \  the Identifier to be unique for this source, destination pair and\n    protocol\
    \ for the time the datagram (or any fragment of it) could be\n    alive in the\
    \ internet.\n    It seems then that a sending protocol module needs to keep a\
    \ table\n    of Identifiers, one entry for each destination it has communicated\n\
    \    with in the last maximum packet lifetime for the internet.\n            \
    \                                           Internet Protocol\n              \
    \                                             Specification\n    However, since\
    \ the Identifier field allows 65,536 different values,\n    some host may be able\
    \ to simply use unique identifiers independent\n    of destination.\n    It is\
    \ appropriate for some higher level protocols to choose the\n    identifier. For\
    \ example, TCP protocol modules may retransmit an\n    identical TCP segment,\
    \ and the probability for correct reception\n    would be enhanced if the retransmission\
    \ carried the same identifier\n    as the original transmission since fragments\
    \ of either datagram\n    could be used to construct a correct TCP segment.\n\
    \  Type of Service\n    The type of service (TOS) is for internet service quality\
    \ selection.\n    The type of service is specified along the abstract parameters\n\
    \    precedence, reliability, and speed.  A further concern is the\n    possibility\
    \ of efficient handling of streams of datagrams.  These\n    abstract parameters\
    \ are to be mapped into the actual service\n    parameters of the particular networks\
    \ the datagram traverses.\n    Precedence.  An independent measure of the importance\
    \ of this\n    datagram.\n    Stream or Datagram.  Indicates if there will be\
    \ other datagrams from\n    this source to this destination at regular frequent\
    \ intervals\n    justifying the maintenance of stream processing information.\n\
    \    Reliability.  A measure of the level of effort desired to ensure\n    delivery\
    \ of this datagram.\n    Speed over Reliability.  Indicates the relative importance\
    \ of speed\n    and reliability when a conflict arises in meeting the pair of\n\
    \    requests.\n    Speed.  A measure of the importance of prompt delivery of\
    \ this\n    datagram.\n    For example, the ARPANET has a priority bit, and a\
    \ choice between\n    \"standard\" messages (type 0) and \"uncontrolled\" messages\
    \ (type 3),\n    (the choice between single packet and multipacket messages can\
    \ also\n    be considered a service parameter). The uncontrolled messages tend\n\
    \    to be less reliably delivered and suffer less delay.  Suppose an\n    internet\
    \ datagram is to be sent through the ARPANET.  Let the\n    internet type of service\
    \ be given as:\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n      Precedence:    5\n      Stream:        0\n      Reliability:\
    \   1\n      S/R:           1\n      Speed:         1\n    The mapping of these\
    \ parameters to those available for the ARPANET\n    would be  to set the ARPANET\
    \ priority bit on since the Internet\n    priority is in the upper half of its\
    \ range, to select uncontrolled\n    messages since the speed and reliability\
    \ requirements are equal and\n    speed is preferred.\n    The following chart\
    \ presents the recommended mappings from the\n    internet protocol type of service\
    \ into the service parameters\n    actually available on the ARPANET, the PRNET,\
    \ and the SATNET:\n      +------------+----------+----------+----------+----------+\n\
    \      |Application | INTERNET | ARPANET  | PRNET    | SATNET   |\n      +------------+----------+----------+----------+----------+\n\
    \      |TELNET      |S/D:stream| T: 3     | R: ptp   | T: block |\n      |  on\
    \        |  R:normal| S: S     | A: no    | D: min   |\n      |   TCP      |S/R:speed\
    \ |          |          | H: inf   |\n      |            |  S:fast  |        \
    \  |          | R: no    |\n      +------------+----------+----------+----------+----------+\n\
    \      |FTP         |S/D:stream| T: 0     | R: ptp   | T: block |\n      |  on\
    \        |  R:normal| S: M     | A: no    | D: normal|\n      |   TCP      |S/R:rlblt\
    \ |          |          | H: inf   |\n      |            |  S:normal|        \
    \  |          | R: no    |\n      +------------+----------+----------+----------+----------+\n\
    \      |interactive |S/D:strm* | T: 3     | R: ptp   | T: stream|\n      |narrow\
    \ band |  R:least | S: S     | A: no    | D: min   |\n      |  speech    |  P:speed\
    \ |          |          | H: short |\n      |            |  S:asap  |        \
    \  |          | R: no    |\n      +------------+----------+----------+----------+----------+\n\
    \      |datagram    |S/D:dtgrm | T: 3 or 0| R:station| T: block |\n      |   \
    \         |  R:normal| S: S or M| A: no    | D: min   |\n      |            |S/R:speed\
    \ |          |          | H: short |\n      |            |  S:fast  |        \
    \  |          | R: no    |\n      +------------+----------+----------+----------+----------+\n\
    \       key:    S/D=strm/dtgrm   T=type     R=route  T=type\n               R=reliability\
    \    S=size     A=ack    D=delay\n               S/R=speed/rlblt             \
    \         H=holding time\n               S=speed                             \
    \ R=reliability\n               *=requires stream set up\n                   \
    \                                    Internet Protocol\n                     \
    \                                      Specification\n  Time to Live\n    The\
    \ time to live is set by the sender to the maximum time the\n    datagram is allowed\
    \ to be in the internet system.  If the datagram\n    is in the internet system\
    \ longer than the time to live, then the\n    datagram should be destroyed.  This\
    \ field should be decreased at\n    each point that the internet header is processed\
    \ to reflect the time\n    spent processing the datagram.  Even if no local information\
    \ is\n    available on the time actually spent, the field should be\n    decremented\
    \ by 1.  The time is measured in units of seconds (i.e.\n    the value 1 means\
    \ one second).  Thus, the maximum time to live is\n    255 seconds or 4.25 minutes.\n\
    \  Options\n    The options are just that, optional.  That is, the presence or\n\
    \    absence of an option is the choice of the sender, but each internet\n   \
    \ module must be able to parse every option.  There can be several\n    options\
    \ present in the option field.\n    The options might not end on a 32-bit boundary.\
    \  The internet header\n    should be filled out with octets of zeros.  The first\
    \ of these would\n    be interpreted as the end-of-options option, and the remainder\
    \ as\n    internet header padding.\n    Every internet module must be able to\
    \ act on the following options:\n    End of Option List (0), No Operation (1),\
    \ Source Route (3), Return\n    Route (7), General Error Report (33), and Internet\
    \ Timestamp (68).\n    The Security Option (2) is required only if classified\
    \ or\n    compartmented traffic is to be passed.\n  Checksum\n    The internet\
    \ header checksum is recomputed if the internet header is\n    changed.  For example,\
    \ a reduction of the time to live, additions or\n    changes to internet options,\
    \ or due to fragmentation.  This checksum\n    at the internet level is intended\
    \ to protect the internet header\n    fields from transmission errors.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - 'Specification

    '
- title: 3.3.  Examples & Scenarios
  contents:
  - "3.3.  Examples & Scenarios\n  Example 1:\n    This is an example of the minimal\
    \ data carrying internet datagram:\n    0                   1                \
    \   2                   3   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Ver= 4 |IHL= 5 |Type of Service|        Total Length = 21      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Identification = 111     |Flg=0|   Fragment Offset = 0   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Time = 123  |  Protocol = 1 |        header checksum        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         source address                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      destination address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     data      |                                                \n   +-+-+-+-+-+-+-+-+\
    \                                                \n                       Example\
    \ Internet Datagram\n                               Figure 4.\n    Note that each\
    \ tick mark represents one bit position.\n    This is a internet datagram in version\
    \ 4 of internet protocol; the\n    internet header consists of five 32 bit words,\
    \ and the total length\n    of the datagram is 21 octets.  This datagram is a\
    \ complete datagram\n    (not a fragment).\n                                 \
    \                      Internet Protocol\n                                   \
    \                        Specification\n  Example 2:\n    In this example, we\
    \ show first a moderate size internet datagram\n    (552 data octets), then two\
    \ internet fragments that might result\n    from the fragmentation of this datagram\
    \ if the maximum sized\n    transmission allowed were 280 octets.\n    0     \
    \              1                   2                   3   \n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Ver= 4 |IHL= 5 |Type of Service|       Total Length = 472      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Identification = 111      |Flg=0|     Fragment Offset = 0 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Time = 123  | Protocol = 6  |        header checksum        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         source address                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      destination address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   \\ \
    \                                                              \\\n   \\     \
    \                                                          \\\n   |          \
    \                   data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             data              |                                \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                                \n                       Example Internet Datagram\n\
    \                               Figure 5.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n    Now the first fragment that results from splitting the datagram\n\
    \    after 256 data octets.\n    0                   1                   2   \
    \                3   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Ver= 4 |IHL= 5 |Type of Service|       Total Length = 276      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Identification = 111      |Flg=1|     Fragment Offset = 0 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Time = 119  | Protocol = 6  |        Header Checksum        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         source address                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      destination address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   \\ \
    \                                                              \\\n   \\     \
    \                                                          \\\n   |          \
    \                   data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Example Internet Fragment\n                          \
    \     Figure 6.\n                                                       Internet\
    \ Protocol\n                                                           Specification\n\
    \    And the second fragment.\n    0                   1                   2 \
    \                  3   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Ver= 4 |IHL= 5 |Type of Service|       Total Length = 216      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Identification = 111      |Flg=0|  Fragment Offset  =  32 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Time = 119  | Protocol = 6  |        Header Checksum        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         source address                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      destination address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   \\ \
    \                                                              \\\n   \\     \
    \                                                          \\\n   |          \
    \                   data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            data               |                                \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                                \n                       Example Internet Fragment\n\
    \                               Figure 7.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Example 3:\n    Here, we show an example of a datagram containing\
    \ options:\n    0                   1                   2                   3\
    \   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Ver=\
    \ 4 |IHL= 8 |Type of Service|       Total Length = 576      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Identification = 111    |Flg=0|     Fragment Offset = 0 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Time = 123  |  Protocol = 6 |       Header Checksum         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        source address                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      destination address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Opt. Code = x | Opt.  Len.= 3 | option value  | Opt. Code = x |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Opt. Len. = 4 |           option value        | Opt. Code = 1 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Opt. Code = y | Opt. Len. = 3 |  option value | Opt. Code = 0 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   \\ \
    \                                                              \\\n   \\     \
    \                                                          \\\n   |          \
    \                   data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             data                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Example Internet Datagram\n                          \
    \     Figure 8.\n"
- title: 3.4.  Interfaces
  contents:
  - "3.4.  Interfaces\n  Internet protocol interfaces on one side to the local network\
    \ and on\n  the other side to either a higher level protocol or an application\n\
    \  program.  In the following, the higher level protocol or application\n  program\
    \ (or even a gateway program) will be called the \"user\" since it\n  is using\
    \ the internet module.  Since internet protocol is a datagram\n  protocol, there\
    \ is minimal memory or state maintained between datagram\n  transmissions, and\
    \ each call on the internet protocol module by the\n  user supplies all the necessary\
    \ information.\n                                                       Internet\
    \ Protocol\n                                                           Specification\n\
    \  For example, the following two calls satisfy the requirements for the\n  user\
    \ to internet protocol module communication (\"=>\" means returns):\n    SEND\
    \ (dest, TOS, TTL, BufPTR, len, Id, DF, options => result)\n      where:\n   \
    \     dest = destination address\n        TOS = type of service\n        TTL =\
    \ time to live\n        BufPTR = buffer pointer\n        len = length of buffer\n\
    \        Id  = Identifier\n        DF = Don't Fragment\n        options = option\
    \ data\n        result = response\n          OK = datagram sent ok\n         \
    \ Error = error in arguments or local network error\n    RECV (BufPTR => result,\
    \ source, dest, prot, TOS, len)\n      where:\n        BufPTR = buffer pointer\n\
    \        result = response\n          OK = datagram received ok\n          Error\
    \ = error in arguments\n        source = source address\n        dest = destination\
    \ address\n        prot = protocol\n        TOS = type of service\n        len\
    \ = length of buffer\n  When the user sends a datagram, it executes the SEND call\
    \ supplying\n  all the arguments.  The internet protocol module, on receiving\
    \ this\n  call, checks the arguments and prepares and sends the message.  If the\n\
    \  arguments are good and the datagram is accepted by the local network,\n  the\
    \ call returns successfully.  If either the arguments are bad, or\n  the datagram\
    \ is not accepted by the local network, the call returns\n  unsuccessfully.  On\
    \ unsuccessful returns, a reasonable report should\n  be made as to the cause\
    \ of the problem, but the details of such\n  reports are up to individual implementations.\n\
    \  When a datagram arrives at the internet protocol module from the local\n  network,\
    \ either there is a pending RECV call from the user addressed\n  or there is not.\
    \  In the first case, the pending call is satisfied by\n  passing the information\
    \ from the datagram to the user.  In the second\n  case, the user addressed is\
    \ notified of a pending datagram.  If the\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Specification
  contents:
  - "Specification\n  user addressed does not exist, an error datagram is returned\
    \ to the\n  sender, and the data is discarded.\n  The notification of a user may\
    \ be via a pseudo interrupt or similar\n  mechanism, as appropriate in the particular\
    \ operating system\n  environment of the implementation.\n  A user's RECV call\
    \ may then either be immediately satisfied by a\n  pending datagram, or the call\
    \ may be pending until a datagram arrives.\n  An implementation may also allow\
    \ or require a call to the internet\n  module to indicate interest in or reserve\
    \ exclusive use of a class of\n  datagrams (e.g., all those with a certain value\
    \ in the protocol\n  field).\n                                               \
    \        Internet Protocol\n                                GLOSSARY\n"
- title: '1822'
  contents:
  - "1822\n          BBN Report 1822, \"The Specification of the Interconnection of\n\
    \          a Host and an IMP\".  The specification of interface between a\n  \
    \        host and the ARPANET.\n"
- title: ARPANET message
  contents:
  - "ARPANET message\n          The unit of transmission between a host and an IMP\
    \ in the\n          ARPANET.  The maximum size is about 1012 octets (8096 bits).\n"
- title: ARPANET packet
  contents:
  - "ARPANET packet\n          A unit of transmission used internally in the ARPANET\
    \ between\n          IMPs. The maximum size is about 126 octets (1008 bits).\n"
- title: Destination
  contents:
  - "Destination\n          The destination address, an internet header field.\n"
- title: DF
  contents:
  - "DF\n          The Don't Fragment bit carried in the flags field.\n"
- title: Flags
  contents:
  - "Flags\n          An internet header field carrying various control flags.\n"
- title: Fragment Offset
  contents:
  - "Fragment Offset\n          This internet header field indicates where in the\
    \ internet\n          datagram a fragment belongs.\n"
- title: header
  contents:
  - "header\n          Control information at the beginning of a message, segment,\n\
    \          datagram, packet or block of data.\n"
- title: Identification
  contents:
  - "Identification\n          An internet header field carrying the identifying value\n\
    \          assigned by the sender to aid in assembling the fragments of a\n  \
    \        datagram.\n"
- title: IHL
  contents:
  - "IHL\n          The internet header field Internet Header Length is the length\n\
    \          of the internet header measured in 32 bit words.\n"
- title: IMP
  contents:
  - "IMP\n          The Interface Message Processor, the packet switch of the\n  \
    \        ARPANET.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
- title: Glossary
  contents:
  - 'Glossary

    '
- title: Internet Address
  contents:
  - "Internet Address\n          A four octet (32 bit) source or destination address\
    \ consisting\n          of a Network field and a Local Address field.\n"
- title: internet fragment
  contents:
  - "internet fragment\n          A portion of the data of an internet datagram with\
    \ an internet\n          header.\n"
- title: internet datagram
  contents:
  - "internet datagram\n          The unit of data exchanged between a pair of internet\
    \ modules\n          (includes the internet header).\n"
- title: ARPANET leader
  contents:
  - "ARPANET leader\n          The control information on an ARPANET message at the\
    \ host-IMP\n          interface.\n"
- title: Local Address
  contents:
  - "Local Address\n          The address of a host within a network.  The actual\
    \ mapping of\n          an internet local address on to the host addresses in\
    \ a\n          network is quite general, allowing for many to one mappings.\n"
- title: MF
  contents:
  - "MF\n          The More-Fragments Flag carried in the internet header flags\n\
    \          field.\n"
- title: module
  contents:
  - "module\n          An implementation, usually in software, of a protocol or other\n\
    \          procedure.\n"
- title: more-fragments flag
  contents:
  - "more-fragments flag\n          A flag indicating whether or not this internet\
    \ datagram\n          contains the end of an internet datagram, carried in the\n\
    \          internet header Flags field.\n"
- title: NFB
  contents:
  - "NFB\n          The Number of Fragment Blocks in a the data portion of an\n  \
    \        internet fragment.  That is, the length of a portion of data\n      \
    \    measured in 8 octet units.\n"
- title: octet
  contents:
  - "octet\n          An eight bit byte.\n"
- title: Options
  contents:
  - "Options\n          The internet header Options field may contain several options,\n\
    \          and each option may be several octets in length.  The options\n   \
    \       are used primarily in testing situations, for example to carry\n     \
    \     timestamps.\n                                                       Internet\
    \ Protocol\n                                                                Glossary\n"
- title: Padding
  contents:
  - "Padding\n          The internet header Padding field is used to ensure that the\n\
    \          data begins on 32 bit word boundary.  The padding is zero.\n"
- title: Protocol
  contents:
  - "Protocol\n          In this document, the next higher level protocol identifier,\n\
    \          an internet header field.\n"
- title: Rest
  contents:
  - "Rest\n          The 3 octet (24 bit) local address portion of an Internet\n \
    \         Address.\n"
- title: RTP
  contents:
  - "RTP\n          Real Time Protocol:  A host-to-host protocol for communication\n\
    \          of time critical information.\n"
- title: Source
  contents:
  - "Source\n          The source address, an internet header field.\n"
- title: TCP
  contents:
  - "TCP\n          Transmission Control Protocol:  A host-to-host protocol for\n\
    \          reliable communication in internet environments.\n"
- title: TCP Segment
  contents:
  - "TCP Segment\n          The unit of data exchanged between TCP modules (including\
    \ the\n          TCP header).\n"
- title: Total Length
  contents:
  - "Total Length\n          The internet header field Total Length is the length\
    \ of the\n          datagram in octets including internet header and data.\n"
- title: Type of Service
  contents:
  - "Type of Service\n          An internet header field which indicates the type\
    \ (or quality)\n          of service for this internet datagram.\n"
- title: User
  contents:
  - "User\n          The user of the internet protocol.  This may be a higher level\n\
    \          protocol module, an application program, or a gateway program.\n"
- title: Version
  contents:
  - "Version\n          The Version field indicates the format of the internet header.\n"
- title: Internet Protocol
  contents:
  - "Internet Protocol\n                                                       Internet\
    \ Protocol\n                               REFERENCES\n"
- title: '[1]  Cerf, V., "The Catenet Model for Internetworking," Information'
  contents:
  - "[1]  Cerf, V., \"The Catenet Model for Internetworking,\" Information\n     Processing\
    \ Techniques Office, Defense Advanced Research Projects\n     Agency, IEN 48,\
    \ July 1978.\n"
- title: '[2]  Bolt Beranek and Newman, "Specification for the Interconnection of'
  contents:
  - "[2]  Bolt Beranek and Newman, \"Specification for the Interconnection of\n  \
    \   a Host and an IMP,\" BBN Technical Report 1822, May 1978 (Revised).\n"
- title: '[3]  Shoch, J., "Inter-Network Naming, Addressing, and Routing,"'
  contents:
  - "[3]  Shoch, J., \"Inter-Network Naming, Addressing, and Routing,\"\n     COMPCON,\
    \ IEEE Computer Society, Fall 1978.\n"
- title: '[4]  Postel, J., "Address Mappings," IEN 115, USC/Information Sciences'
  contents:
  - "[4]  Postel, J., \"Address Mappings,\" IEN 115, USC/Information Sciences\n  \
    \   Institute, August 1979.\n"
- title: '[5]  Shoch, J., "Packet Fragmentation in Inter-Network Protocols,"'
  contents:
  - "[5]  Shoch, J., \"Packet Fragmentation in Inter-Network Protocols,\"\n     Computer\
    \ Networks, v. 3, n. 1, February 1979.\n"
- title: '[6]  Postel, J., "Assigned Numbers," RFC 762, IEN 127, USC/Information'
  contents:
  - "[6]  Postel, J., \"Assigned Numbers,\" RFC 762, IEN 127, USC/Information\n  \
    \   Sciences Institute, January 1980.\n"
- title: Internet Protocol
  contents:
  - 'Internet Protocol

    '
