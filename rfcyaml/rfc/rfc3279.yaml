- contents:
  - "                   Algorithms and Identifiers for the\n                Internet
    X.509 Public Key Infrastructure\n       Certificate and Certificate Revocation
    List (CRL) Profile\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies algorithm identifiers and ASN.1 encoding\n
    \  formats for digital signatures and subject public keys used in the\n   Internet
    X.509 Public Key Infrastructure (PKI).  Digital signatures\n   are used to sign
    certificates and certificate revocation list (CRLs).\n   Certificates include
    the public key of the named subject.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1  Introduction  . . . . . . . . . . . . . . . . . . .
    . . .   2\n   2  Algorithm Support . . . . . . . . . . . . . . . . . . . .   3\n
    \  2.1  One-Way Hash Functions  . . . . . . . . . . . . . . . .   3\n   2.1.1
    \ MD2 One-Way Hash Functions  . . . . . . . . . . . . .   3\n   2.1.2  MD5 One-Way
    Hash Functions  . . . . . . . . . . . . .   4\n   2.1.3  SHA-1 One-Way Hash Functions
    \ . . . . . . . . . . . .   4\n   2.2  Signature Algorithms  . . . . . . . . .
    . . . . . . . .   4\n   2.2.1  RSA Signature Algorithm . . . . . . . . . . . .
    . . .   5\n   2.2.2  DSA Signature Algorithm . . . . . . . . . . . . . . .   6\n
    \  2.2.3  Elliptic Curve Digital Signature Algorithm  . . . . .   7\n   2.3  Subject
    Public Key Algorithms . . . . . . . . . . . . .   7\n   2.3.1  RSA Keys  . . .
    . . . . . . . . . . . . . . . . . . .   8\n   2.3.2  DSA Signature Keys  . . .
    . . . . . . . . . . . . . .   9\n   2.3.3  Diffie-Hellman Key Exchange Keys  .
    . . . . . . . . .  10\n   2.3.4  KEA Public Keys . . . . . . . . . . . . . . .
    . . . .  11\n   2.3.5  ECDSA and ECDH Public Keys  . . . . . . . . . . . . .  13\n
    \  3  ASN.1 Module  . . . . . . . . . . . . . . . . . . . . . .  18\n   4  References
    \ . . . . . . . . . . . . . . . . . . . . . . .  24\n   5  Security Considerations
    . . . . . . . . . . . . . . . . .  25\n   6  Intellectual Property Rights  . .
    . . . . . . . . . . . .  26\n   7  Author Addresses  . . . . . . . . . . . . .
    . . . . . . .  26\n   8  Full Copyright Statement  . . . . . . . . . . . . . .
    . .  27\n"
  title: Table of Contents
- contents:
  - "1  Introduction\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC 2119].\n   This
    document specifies algorithm identifiers and ASN.1 [X.660]\n   encoding formats
    for digital signatures and subject public keys used\n   in the Internet X.509
    Public Key Infrastructure (PKI).  This\n   specification supplements [RFC 3280],
    \"Internet X.509 Public Key\n   Infrastructure:  Certificate and Certificate Revocation
    List (CRL)\n   Profile.\"  Implementations of this specification MUST also conform
    to\n   RFC 3280.\n   This specification defines the contents of the signatureAlgorithm,\n
    \  signatureValue, signature, and subjectPublicKeyInfo fields within\n   Internet
    X.509 certificates and CRLs.\n   This document identifies one-way hash functions
    for use in the\n   generation of digital signatures.  These algorithms are used
    in\n   conjunction with digital signature algorithms.\n   This specification describes
    the encoding of digital signatures\n   generated with the following cryptographic
    algorithms:\n      * Rivest-Shamir-Adelman (RSA);\n      * Digital Signature Algorithm
    (DSA); and\n      * Elliptic Curve Digital Signature Algorithm (ECDSA).\n   This
    document specifies the contents of the subjectPublicKeyInfo\n   field in Internet
    X.509 certificates.  For each algorithm, the\n   appropriate alternatives for
    the the keyUsage extension are provided.\n   This specification describes encoding
    formats for public keys used\n   with the following cryptographic algorithms:\n
    \     * Rivest-Shamir-Adelman (RSA);\n      * Digital Signature Algorithm (DSA);\n
    \     * Diffie-Hellman (DH);\n      * Key Encryption Algorithm (KEA);\n      *
    Elliptic Curve Digital Signature Algorithm (ECDSA); and\n      * Elliptic Curve
    Diffie-Hellman (ECDH).\n"
  title: 1  Introduction
- contents:
  - "2  Algorithm Support\n   This section describes cryptographic algorithms which
    may be used\n   with the Internet X.509 certificate and CRL profile [RFC 3280].
    \ This\n   section describes one-way hash functions and digital signature\n   algorithms
    which may be used to sign certificates and CRLs, and\n   identifies object identifiers
    (OIDs) for public keys contained in a\n   certificate.\n   Conforming CAs and
    applications MUST, at a minimum, support digital\n   signatures and public keys
    for one of the specified algorithms.  When\n   using any of the algorithms identified
    in this specification,\n   conforming CAs and applications MUST support them as
    described.\n"
  - contents:
    - "2.1  One-way Hash Functions\n   This section identifies one-way hash functions
      for use in the\n   Internet X.509 PKI.  One-way hash functions are also called
      message\n   digest algorithms.  SHA-1 is the preferred one-way hash function
      for\n   the Internet X.509 PKI.  However, PEM uses MD2 for certificates [RFC\n
      \  1422] [RFC 1423] and MD5 is used in other legacy applications.  For\n   these
      reasons, MD2 and MD5 are included in this profile.  The data\n   that is hashed
      for certificate and CRL signing is fully described in\n   [RFC 3280].\n"
    - contents:
      - "2.1.1  MD2 One-way Hash Function\n   MD2 was developed by Ron Rivest for
        RSA Security.  RSA Security has\n   recently placed the MD2 algorithm in the
        public domain.  Previously,\n   RSA Data Security had granted license for
        use of MD2 for non-\n   commercial Internet Privacy-Enhanced Mail (PEM).  MD2
        may continue to\n   be used with PEM certificates, but SHA-1 is preferred.
        \ MD2 produces\n   a 128-bit \"hash\" of the input.  MD2 is fully described
        in [RFC 1319].\n   At the Selected Areas in Cryptography '95 conference in
        May 1995,\n   Rogier and Chauvaud presented an attack on MD2 that can nearly
        find\n   collisions [RC95].  Collisions occur when one can find two different\n
        \  messages that generate the same message digest.  A checksum operation\n
        \  in MD2 is the only remaining obstacle to the success of the attack.\n   For
        this reason, the use of MD2 for new applications is discouraged.\n   It is
        still reasonable to use MD2 to verify existing signatures, as\n   the ability
        to find collisions in MD2 does not enable an attacker to\n   find new messages
        having a previously computed hash value.\n"
      title: 2.1.1  MD2 One-way Hash Function
    - contents:
      - "2.1.2  MD5 One-way Hash Function\n   MD5 was developed by Ron Rivest for
        RSA Security.  RSA Security has\n   placed the MD5 algorithm in the public
        domain.  MD5 produces a 128-\n   bit \"hash\" of the input.  MD5 is fully
        described in [RFC 1321].\n   Den Boer and Bosselaers [DB94] have found pseudo-collisions
        for MD5,\n   but there are no other known cryptanalytic results.  The use
        of MD5\n   for new applications is discouraged.  It is still reasonable to
        use\n   MD5 to verify existing signatures.\n"
      title: 2.1.2  MD5 One-way Hash Function
    - contents:
      - "2.1.3  SHA-1 One-way Hash Function\n   SHA-1 was developed by the U.S. Government.
        \ SHA-1 produces a 160-bit\n   \"hash\" of the input.  SHA-1 is fully described
        in [FIPS 180-1].  RFC\n   3174 [RFC 3174] also describes SHA-1, and it provides
        an\n   implementation of the algorithm.\n"
      title: 2.1.3  SHA-1 One-way Hash Function
    title: 2.1  One-way Hash Functions
  - contents:
    - "2.2  Signature Algorithms\n   Certificates and CRLs conforming to [RFC 3280]
      may be signed with any\n   public key signature algorithm.  The certificate
      or CRL indicates the\n   algorithm through an algorithm identifier which appears
      in the\n   signatureAlgorithm field within the Certificate or CertificateList.\n
      \  This algorithm identifier is an OID and has optionally associated\n   parameters.
      \ This section identifies algorithm identifiers and\n   parameters that MUST
      be used in the signatureAlgorithm field in a\n   Certificate or CertificateList.\n
      \  Signature algorithms are always used in conjunction with a one-way\n   hash
      function.\n   This section identifies OIDS for RSA, DSA, and ECDSA.  The contents\n
      \  of the parameters component for each algorithm vary; details are\n   provided
      for each algorithm.\n   The data to be signed (e.g., the one-way hash function
      output value)\n   is formatted for the signature algorithm to be used.  Then,
      a private\n   key operation (e.g., RSA encryption) is performed to generate
      the\n   signature value.  This signature value is then ASN.1 encoded as a BIT\n
      \  STRING and included in the Certificate or CertificateList in the\n   signature
      field.\n"
    - contents:
      - "2.2.1  RSA Signature Algorithm\n   The RSA algorithm is named for its inventors:
        Rivest, Shamir, and\n   Adleman.  This profile includes three signature algorithms
        based on\n   the RSA asymmetric encryption algorithm.  The signature algorithms\n
        \  combine RSA with either the MD2, MD5, or the SHA-1 one-way hash\n   functions.\n
        \  The signature algorithm with SHA-1 and the RSA encryption algorithm\n   is
        implemented using the padding and encoding conventions described\n   in PKCS
        #1 [RFC 2313].  The message digest is computed using the\n   SHA-1 hash algorithm.\n
        \  The RSA signature algorithm, as specified in PKCS #1 [RFC 2313]\n   includes
        a data encoding step.  In this step, the message digest and\n   the OID for
        the one-way hash function used to compute the digest are\n   combined.  When
        performing the data encoding step, the md2, md5, and\n   id-sha1 OIDs MUST
        be used to specify the MD2, MD5, and SHA-1 one-way\n   hash functions, respectively:\n
        \     md2  OBJECT IDENTIFIER ::= {\n           iso(1) member-body(2) US(840)
        rsadsi(113549)\n           digestAlgorithm(2) 2 }\n      md5  OBJECT IDENTIFIER
        ::= {\n           iso(1) member-body(2) US(840) rsadsi(113549)\n           digestAlgorithm(2)
        5 }\n      id-sha1  OBJECT IDENTIFIER ::= {\n           iso(1) identified-organization(3)
        oiw(14) secsig(3)\n           algorithms(2) 26 }\n   The signature algorithm
        with MD2 and the RSA encryption algorithm is\n   defined in PKCS #1 [RFC 2313].
        \ As defined in PKCS #1 [RFC 2313], the\n   ASN.1 OID used to identify this
        signature algorithm is:\n      md2WithRSAEncryption OBJECT IDENTIFIER  ::=
        \ {\n          iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n          pkcs-1(1)
        2  }\n   The signature algorithm with MD5 and the RSA encryption algorithm
        is\n   defined in PKCS #1 [RFC 2313].  As defined in PKCS #1 [RFC 2313], the\n
        \  ASN.1 OID used to identify this signature algorithm is:\n      md5WithRSAEncryption
        OBJECT IDENTIFIER  ::=  {\n          iso(1) member-body(2) us(840) rsadsi(113549)
        pkcs(1)\n          pkcs-1(1) 4  }\n   The ASN.1 object identifier used to
        identify this signature algorithm\n   is:\n      sha-1WithRSAEncryption OBJECT
        IDENTIFIER  ::=  {\n          iso(1) member-body(2) us(840) rsadsi(113549)
        pkcs(1)\n          pkcs-1(1) 5  }\n   When any of these three OIDs appears
        within the ASN.1 type\n   AlgorithmIdentifier, the parameters component of
        that type SHALL be\n   the ASN.1 type NULL.\n   The RSA signature generation
        process and the encoding of the result\n   is described in detail in PKCS
        #1 [RFC 2313].\n"
      title: 2.2.1  RSA Signature Algorithm
    - contents:
      - "2.2.2  DSA Signature Algorithm\n   The Digital Signature Algorithm (DSA)
        is defined in the Digital\n   Signature Standard (DSS).  DSA was developed
        by the U.S. Government,\n   and DSA is used in conjunction with the SHA-1
        one-way hash function.\n   DSA is fully described in [FIPS 186].  The ASN.1
        OID used to identify\n   this signature algorithm is:\n      id-dsa-with-sha1
        OBJECT IDENTIFIER ::=  {\n           iso(1) member-body(2) us(840) x9-57 (10040)\n
        \          x9cm(4) 3 }\n   When the id-dsa-with-sha1 algorithm identifier
        appears as the\n   algorithm field in an AlgorithmIdentifier, the encoding
        SHALL omit\n   the parameters field.  That is, the AlgorithmIdentifier SHALL
        be a\n   SEQUENCE of one component: the OBJECT IDENTIFIER id-dsa-with-sha1.\n
        \  The DSA parameters in the subjectPublicKeyInfo field of the\n   certificate
        of the issuer SHALL apply to the verification of the\n   signature.\n   When
        signing, the DSA algorithm generates two values.  These values\n   are commonly
        referred to as r and s.  To easily transfer these two\n   values as one signature,
        they SHALL be ASN.1 encoded using the\n   following ASN.1 structure:\n      Dss-Sig-Value
        \ ::=  SEQUENCE  {\n              r       INTEGER,\n              s       INTEGER
        \ }\n"
      title: 2.2.2  DSA Signature Algorithm
    - contents:
      - "2.2.3 ECDSA Signature Algorithm\n   The Elliptic Curve Digital Signature
        Algorithm (ECDSA) is defined in\n   [X9.62].  The ASN.1 object identifiers
        used to identify ECDSA are\n   defined in the following arc:\n      ansi-X9-62
        \ OBJECT IDENTIFIER ::= {\n           iso(1) member-body(2) us(840) 10045
        }\n      id-ecSigType OBJECT IDENTIFIER  ::=  {\n           ansi-X9-62 signatures(4)
        }\n   ECDSA is used in conjunction with the SHA-1 one-way hash function.\n
        \  The ASN.1 object identifier used to identify ECDSA with SHA-1 is:\n      ecdsa-with-SHA1
        \ OBJECT IDENTIFIER ::= {\n           id-ecSigType 1 }\n   When the ecdsa-with-SHA1
        algorithm identifier appears as the\n   algorithm field in an AlgorithmIdentifier,
        the encoding MUST omit the\n   parameters field.  That is, the AlgorithmIdentifier
        SHALL be a\n   SEQUENCE of one component: the OBJECT IDENTIFIER ecdsa-with-SHA1.\n
        \  The elliptic curve parameters in the subjectPublicKeyInfo field of\n   the
        certificate of the issuer SHALL apply to the verification of the\n   signature.\n
        \  When signing, the ECDSA algorithm generates two values.  These values\n
        \  are commonly referred to as r and s.  To easily transfer these two\n   values
        as one signature, they MUST be ASN.1 encoded using the\n   following ASN.1
        structure:\n      Ecdsa-Sig-Value  ::=  SEQUENCE  {\n           r     INTEGER,\n
        \          s     INTEGER  }\n"
      title: 2.2.3 ECDSA Signature Algorithm
    title: 2.2  Signature Algorithms
  - contents:
    - "2.3  Subject Public Key Algorithms\n   Certificates conforming to [RFC 3280]
      may convey a public key for any\n   public key algorithm.  The certificate indicates
      the algorithm\n   through an algorithm identifier.  This algorithm identifier
      is an OID\n   and optionally associated parameters.\n   This section identifies
      preferred OIDs and parameters for the RSA,\n   DSA, Diffie-Hellman, KEA, ECDSA,
      and ECDH algorithms.  Conforming CAs\n   MUST use the identified OIDs when issuing
      certificates containing\n   public keys for these algorithms.  Conforming applications
      supporting\n   any of these algorithms MUST, at a minimum, recognize the OID\n
      \  identified in this section.\n"
    - contents:
      - "2.3.1  RSA Keys\n   The OID rsaEncryption identifies RSA public keys.\n      pkcs-1
        OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n                     rsadsi(113549)
        pkcs(1) 1 }\n      rsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1}\n   The
        rsaEncryption OID is intended to be used in the algorithm field\n   of a value
        of type AlgorithmIdentifier.  The parameters field MUST\n   have ASN.1 type
        NULL for this algorithm identifier.\n   The RSA public key MUST be encoded
        using the ASN.1 type RSAPublicKey:\n      RSAPublicKey ::= SEQUENCE {\n         modulus
        \           INTEGER,    -- n\n         publicExponent     INTEGER  }  -- e\n
        \  where modulus is the modulus n, and publicExponent is the public\n   exponent
        e.  The DER encoded RSAPublicKey is the value of the BIT\n   STRING subjectPublicKey.\n
        \  This OID is used in public key certificates for both RSA signature\n   keys
        and RSA encryption keys.  The intended application for the key\n   MAY be
        indicated in the key usage field (see [RFC 3280]).  The use of\n   a single
        key for both signature and encryption purposes is not\n   recommended, but
        is not forbidden.\n   If the keyUsage extension is present in an end entity
        certificate\n   which conveys an RSA public key, any combination of the following\n
        \  values MAY be present:\n      digitalSignature;\n      nonRepudiation;\n
        \     keyEncipherment; and\n      dataEncipherment.\n   If the keyUsage extension
        is present in a CA or CRL issuer\n   certificate which conveys an RSA public
        key, any combination of the\n   following values MAY be present:\n      digitalSignature;\n
        \     nonRepudiation;\n      keyEncipherment;\n      dataEncipherment;\n      keyCertSign;
        and\n      cRLSign.\n   However, this specification RECOMMENDS that if keyCertSign
        or cRLSign\n   is present, both keyEncipherment and dataEncipherment SHOULD
        NOT be\n   present.\n"
      title: 2.3.1  RSA Keys
    - contents:
      - "2.3.2  DSA Signature Keys\n   The Digital Signature Algorithm (DSA) is defined
        in the Digital\n   Signature Standard (DSS) [FIPS 186].  The DSA OID supported
        by this\n   profile is:\n      id-dsa OBJECT IDENTIFIER ::= {\n           iso(1)
        member-body(2) us(840) x9-57(10040) x9cm(4) 1 }\n   The id-dsa algorithm syntax
        includes optional domain parameters.\n   These parameters are commonly referred
        to as p, q, and g.  When\n   omitted, the parameters component MUST be omitted
        entirely.  That is,\n   the AlgorithmIdentifier MUST be a SEQUENCE of one
        component: the\n   OBJECT IDENTIFIER id-dsa.\n   If the DSA domain parameters
        are present in the subjectPublicKeyInfo\n   AlgorithmIdentifier, the parameters
        are included using the following\n   ASN.1 structure:\n      Dss-Parms  ::=
        \ SEQUENCE  {\n          p             INTEGER,\n          q             INTEGER,\n
        \         g             INTEGER  }\n   The AlgorithmIdentifier within subjectPublicKeyInfo
        is the only place\n   within a certificate where the parameters may be used.
        \ If the DSA\n   algorithm parameters are omitted from the subjectPublicKeyInfo\n
        \  AlgorithmIdentifier and the CA signed the subject certificate using\n   DSA,
        then the certificate issuer's DSA parameters apply to the\n   subject's DSA
        key.  If the DSA domain parameters are omitted from the\n   SubjectPublicKeyInfo
        AlgorithmIdentifier and the CA signed the\n   subject certificate using a
        signature algorithm other than DSA, then\n   the subject's DSA domain parameters
        are distributed by other means.\n   If the subjectPublicKeyInfo AlgorithmIdentifier
        field omits the\n   parameters component, the CA signed the subject with a
        signature\n   algorithm other than DSA, and the subject's DSA parameters are
        not\n   available through other means, then clients MUST reject the\n   certificate.\n
        \  The DSA public key MUST be ASN.1 DER encoded as an INTEGER; this\n   encoding
        shall be used as the contents (i.e., the value) of the\n   subjectPublicKey
        component (a BIT STRING) of the SubjectPublicKeyInfo\n   data element.\n      DSAPublicKey
        ::= INTEGER -- public key, Y\n   If the keyUsage extension is present in an
        end entity certificate\n   which conveys a DSA public key, any combination
        of the following\n   values MAY be present:\n      digitalSignature;\n      nonRepudiation;\n
        \  If the keyUsage extension is present in a CA or CRL issuer\n   certificate
        which conveys a DSA public key, any combination of the\n   following values
        MAY be present:\n      digitalSignature;\n      nonRepudiation;\n      keyCertSign;
        and\n      cRLSign.\n"
      title: 2.3.2  DSA Signature Keys
    - contents:
      - "2.3.3  Diffie-Hellman Key Exchange Keys\n   The Diffie-Hellman OID supported
        by this profile is defined in\n   [X9.42].\n      dhpublicnumber OBJECT IDENTIFIER
        ::= { iso(1) member-body(2)\n                us(840) ansi-x942(10046) number-type(2)
        1 }\n   The dhpublicnumber OID is intended to be used in the algorithm field\n
        \  of a value of type AlgorithmIdentifier.  The parameters field of that\n
        \  type, which has the algorithm-specific syntax ANY DEFINED BY\n   algorithm,
        have the ASN.1 type DomainParameters for this algorithm.\n      DomainParameters
        ::= SEQUENCE {\n            p       INTEGER, -- odd prime, p=jq +1\n            g
        \      INTEGER, -- generator, g\n            q       INTEGER, -- factor of
        p-1\n            j       INTEGER OPTIONAL, -- subgroup factor\n            validationParms
        \ ValidationParms OPTIONAL }\n      ValidationParms ::= SEQUENCE {\n            seed
        \            BIT STRING,\n            pgenCounter      INTEGER }\n   The fields
        of type DomainParameters have the following meanings:\n      p identifies
        the prime p defining the Galois field;\n      g specifies the generator of
        the multiplicative subgroup of order\n      g;\n      q specifies the prime
        factor of p-1;\n      j optionally specifies the value that satisfies the
        equation\n      p=jq+1 to support the optional verification of group parameters;\n
        \     seed optionally specifies the bit string parameter used as the\n      seed
        for the domain parameter generation process; and\n      pgenCounter optionally
        specifies the integer value output as part\n      of the of the domain parameter
        prime generation process.\n   If either of the domain parameter generation
        components (pgenCounter\n   or seed) is provided, the other MUST be present
        as well.\n   The Diffie-Hellman public key MUST be ASN.1 encoded as an INTEGER;\n
        \  this encoding shall be used as the contents (i.e., the value) of the\n
        \  subjectPublicKey component (a BIT STRING) of the SubjectPublicKeyInfo\n
        \  data element.\n      DHPublicKey ::= INTEGER -- public key, y = g^x mod
        p\n   If the keyUsage extension is present in a certificate which conveys
        a\n   DH public key, the following values may be present:\n      keyAgreement;\n
        \     encipherOnly; and\n      decipherOnly.\n   If present, the keyUsage
        extension MUST assert keyAgreement and MAY\n   assert either encipherOnly
        and decipherOnly.  The keyUsage extension\n   MUST NOT assert both encipherOnly
        and decipherOnly.\n"
      title: 2.3.3  Diffie-Hellman Key Exchange Keys
    - contents:
      - "2.3.4 KEA Public Keys\n   This section identifies the preferred OID and parameters
        for the\n   inclusion of a KEA public key in a certificate.  The Key Exchange\n
        \  Algorithm (KEA) is a key agreement algorithm.  Two parties may\n   generate
        a \"pairwise key\" if and only if they share the same KEA\n   parameters.
        \ The KEA parameters are not included in a certificate;\n   instead a domain
        identifier is supplied in the parameters field.\n   When the SubjectPublicKeyInfo
        field contains a KEA key, the algorithm\n   identifier and parameters SHALL
        be as defined in [SDN.701r]:\n      id-keyExchangeAlgorithm  OBJECT IDENTIFIER
        \  ::=\n             { 2 16 840 1 101 2 1 1 22 }\n      KEA-Parms-Id     ::=
        OCTET STRING\n   CAs MUST populate the parameters field of the AlgorithmIdentifier\n
        \  within the SubjectPublicKeyInfo field of each certificate containing\n
        \  a KEA public key with an 80-bit parameter identifier (OCTET STRING),\n
        \  also known as the domain identifier.  The domain identifier is\n   computed
        in three steps:\n      (1) the KEA domain parameters (p, q, and g) are DER
        encoded using\n      the Dss-Parms structure;\n      (2) a 160-bit SHA-1 hash
        is generated from the parameters; and\n      (3) the 160-bit hash is reduced
        to 80-bits by performing an\n      \"exclusive or\" of the 80 high order bits
        with the 80 low order\n      bits.\n   The resulting value is encoded such
        that the most significant byte of\n   the 80-bit value is the first octet
        in the octet string.  The Dss-\n   Parms is provided above in Section 2.3.2.\n
        \  A KEA public key, y, is conveyed in the subjectPublicKey BIT STRING\n   such
        that the most significant bit (MSB) of y becomes the MSB of the\n   BIT STRING
        value field and the least significant bit (LSB) of y\n   becomes the LSB of
        the BIT STRING value field.  This results in the\n   following encoding:\n
        \     BIT STRING tag;\n      BIT STRING length;\n      0 (indicating that
        there are zero unused bits in the final octet\n      of y); and\n      BIT
        STRING value field including y.\n   The key usage extension may optionally
        appear in a KEA certificate.\n   If a KEA certificate includes the keyUsage
        extension, only the\n   following values may be asserted:\n      keyAgreement;\n
        \     encipherOnly; and\n      decipherOnly.\n   If present, the keyUsage
        extension MUST assert keyAgreement and MAY\n   assert either encipherOnly
        and decipherOnly.  The keyUsage extension\n   MUST NOT assert both encipherOnly
        and decipherOnly.\n"
      title: 2.3.4 KEA Public Keys
    - contents:
      - "2.3.5 ECDSA and ECDH Keys\n   This section identifies the preferred OID and
        parameter encoding for\n   the inclusion of an ECDSA or ECDH public key in
        a certificate.  The\n   Elliptic Curve Digital Signature Algorithm (ECDSA)
        is defined in\n   [X9.62].  ECDSA is the elliptic curve mathematical analog
        of the\n   Digital Signature Algorithm [FIPS 186].  The Elliptic Curve Diffie\n
        \  Hellman (ECDH) algorithm is a key agreement algorithm defined in\n   [X9.63].\n
        \  ECDH is the elliptic curve mathematical analog of the Diffie-Hellman\n
        \  key agreement algorithm as specified in [X9.42].  The ECDSA and ECDH\n
        \  specifications use the same OIDs and parameter encodings.  The ASN.1\n
        \  object identifiers used to identify these public keys are defined in\n
        \  the following arc:\n   ansi-X9-62 OBJECT IDENTIFIER ::=\n                             {
        iso(1) member-body(2) us(840) 10045 }\n   When certificates contain an ECDSA
        or ECDH public key, the\n   id-ecPublicKey algorithm identifier MUST be used.
        The id-ecPublicKey\n   algorithm identifier is defined as follows:\n     id-public-key-type
        OBJECT IDENTIFIER  ::= { ansi-X9.62 2 }\n     id-ecPublicKey OBJECT IDENTIFIER
        ::= { id-publicKeyType 1 }\n   This OID is used in public key certificates
        for both ECDSA signature\n   keys and ECDH encryption keys.  The intended
        application for the key\n   may be indicated in the key usage field (see [RFC
        3280]).  The use of\n   a single key for both signature and encryption purposes
        is not\n   recommended, but is not forbidden.\n   ECDSA and ECDH require use
        of certain parameters with the public key.\n   The parameters may be inherited
        from the issuer, implicitly included\n   through reference to a \"named curve,\"
        or explicitly included in the\n   certificate.\n      EcpkParameters ::= CHOICE
        {\n        ecParameters  ECParameters,\n        namedCurve    OBJECT IDENTIFIER,\n
        \       implicitlyCA  NULL }\n   When the parameters are inherited, the parameters
        field SHALL contain\n   implictlyCA, which is the ASN.1 value NULL.  When
        parameters are\n   specified by reference, the parameters field SHALL contain
        the\n   named-Curve choice, which is an object identifier.  When the\n   parameters
        are explicitly included, they SHALL be encoded in the\n   ASN.1 structure
        ECParameters:\n      ECParameters ::= SEQUENCE {\n         version   ECPVer,
        \         -- version is always 1\n         fieldID   FieldID,         -- identifies
        the finite field over\n                                    -- which the curve
        is defined\n         curve     Curve,           -- coefficients a and b of
        the\n                                    -- elliptic curve\n         base
        \     ECPoint,         -- specifies the base point P\n                                    --
        on the elliptic curve\n         order     INTEGER,         -- the order n
        of the base point\n         cofactor  INTEGER OPTIONAL -- The integer h =
        #E(Fq)/n\n         }\n      ECPVer ::= INTEGER {ecpVer1(1)}\n      Curve ::=
        SEQUENCE {\n         a         FieldElement,\n         b         FieldElement,\n
        \        seed      BIT STRING OPTIONAL }\n      FieldElement ::= OCTET STRING\n
        \     ECPoint ::= OCTET STRING\n   The value of FieldElement SHALL be the
        octet string representation of\n   a field element following the conversion
        routine in [X9.62], Section\n   4.3.3.  The value of ECPoint SHALL be the
        octet string representation\n   of an elliptic curve point following the conversion
        routine in\n   [X9.62], Section 4.3.6.  Note that this octet string may represent
        an\n   elliptic curve point in compressed or uncompressed form.\n   Implementations
        that support elliptic curve according to this\n   specification MUST support
        the uncompressed form and MAY support the\n   compressed form.\n   The components
        of type ECParameters have the following meanings:\n      version specifies
        the version number of the elliptic curve\n      parameters.  It MUST have
        the value 1 (ecpVer1).\n      fieldID identifies the finite field over which
        the elliptic curve\n      is defined.  Finite fields are represented by values
        of the\n      parameterized type FieldID, constrained to the values of the\n
        \     objects defined in the information object set FieldTypes.\n      Additional
        detail regarding fieldID is provided below.\n      curve specifies the coefficients
        a and b of the elliptic curve E.\n      Each coefficient is represented as
        a value of type FieldElement,\n      an OCTET STRING. seed is an optional
        parameter used to derive the\n      coefficients of a randomly generated elliptic
        curve.\n      base specifies the base point P on the elliptic curve.  The
        base\n      point is represented as a value of type ECPoint, an OCTET STRING.\n
        \     order specifies the order n of the base point.\n      cofactor is the
        integer h = #E(Fq)/n.  This parameter is specified\n      as OPTIONAL.  However,
        the cofactor MUST be included in ECDH\n      public key parameters.  The cofactor
        is not required to support\n      ECDSA, except in parameter validation.  The
        cofactor MAY be\n      included to support parameter validation for ECDSA
        keys.\n      Parameter validation is not required by this specification.\n
        \  The AlgorithmIdentifier within SubjectPublicKeyInfo is the only place\n
        \  within a certificate where the parameters may be used.  If the\n   elliptic
        curve parameters are specified as implicitlyCA in the\n   SubjectPublicKeyInfo
        AlgorithmIdentifier and the CA signed the\n   subject certificate using ECDSA,
        then the certificate issuer's ECDSA\n   parameters apply to the subject's
        ECDSA key.  If the elliptic curve\n   parameters are specified as implicitlyCA
        in the SubjectPublicKeyInfo\n   AlgorithmIdentifier and the CA signed the
        certificate using a\n   signature algorithm other than ECDSA, then clients
        MUST not make use\n   of the elliptic curve public key.\n      FieldID ::=
        SEQUENCE {\n         fieldType   OBJECT IDENTIFIER,\n         parameters  ANY
        DEFINED BY fieldType }\n   FieldID is a SEQUENCE of two components, fieldType
        and parameters.\n   The fieldType contains an object identifier value that
        uniquely\n   identifies the type contained in the parameters.\n   The object
        identifier id-fieldType specifies an arc containing the\n   object identifiers
        of each field type.  It has the following value:\n      id-fieldType OBJECT
        IDENTIFIER ::= { ansi-X9-62 fieldType(1) }\n   The object identifiers prime-field
        and characteristic-two-field name\n   the two kinds of fields defined in this
        Standard.  They have the\n   following values:\n      prime-field OBJECT IDENTIFIER
        ::= { id-fieldType 1 }\n      Prime-p ::= INTEGER    -- Field size p (p in
        bits)\n      characteristic-two-field OBJECT IDENTIFIER ::= { id-fieldType
        2 }\n      Characteristic-two ::= SEQUENCE {\n         m           INTEGER,
        \                     -- Field size 2^m\n         basis       OBJECT IDENTIFIER,\n
        \        parameters  ANY DEFINED BY basis }\n   The object identifier id-characteristic-two-basis
        specifies an arc\n   containing the object identifiers for each type of basis
        for the\n   characteristic-two finite fields.  It has the following value:\n
        \     id-characteristic-two-basis OBJECT IDENTIFIER ::= {\n           characteristic-two-field
        basisType(1) }\n   The object identifiers gnBasis, tpBasis and ppBasis name
        the three\n   kinds of basis for characteristic-two finite fields defined
        by\n   [X9.62].  They have the following values:\n      gnBasis OBJECT IDENTIFIER
        ::= { id-characteristic-two-basis 1 }\n      -- for gnBasis, the value of
        the parameters field is NULL\n      tpBasis OBJECT IDENTIFIER ::= { id-characteristic-two-basis
        2 }\n      -- type of parameters field for tpBasis is Trinomial\n      Trinomial
        ::= INTEGER\n      ppBasis OBJECT IDENTIFIER ::= { id-characteristic-two-basis
        3 }\n      -- type of parameters field for ppBasis is Pentanomial\n      Pentanomial
        ::= SEQUENCE {\n         k1  INTEGER,\n         k2  INTEGER,\n         k3
        \ INTEGER }\n   The elliptic curve public key (an ECPoint which is an OCTET
        STRING)\n   is mapped to a subjectPublicKey (a BIT STRING) as follows:  the
        most\n   significant bit of the OCTET STRING becomes the most significant
        bit\n   of the BIT STRING, and the least significant bit of the OCTET STRING\n
        \  becomes the least significant bit of the BIT STRING.  Note that this\n
        \  octet string may represent an elliptic curve point in compressed or\n   uncompressed
        form.  Implementations that support elliptic curve\n   according to this specification
        MUST support the uncompressed form\n   and MAY support the compressed form.\n
        \  If the keyUsage extension is present in a CA or CRL issuer\n   certificate
        which conveys an elliptic curve public key, any\n   combination of the following
        values MAY be present:\n      digitalSignature;\n      nonRepudiation; and\n
        \     keyAgreement.\n   If the keyAgreement value is present, either of the
        following values\n   MAY be present:\n      encipherOnly; and\n      decipherOnly.\n
        \  The keyUsage extension MUST NOT assert both encipherOnly and\n   decipherOnly.\n
        \  If the keyUsage extension is present in a CA certificate which\n   conveys
        an elliptic curve public key, any combination of the\n   following values
        MAY be present:\n      digitalSignature;\n      nonRepudiation;\n      keyAgreement;\n
        \     keyCertSign; and\n      cRLSign.\n   As above, if the keyUsage extension
        asserts keyAgreement then it MAY\n   assert either encipherOnly and decipherOnly.
        \ However, this\n   specification RECOMMENDS that if keyCertSign or cRLSign
        is present,\n   keyAgreement, encipherOnly, and decipherOnly SHOULD NOT be
        present.\n"
      title: 2.3.5 ECDSA and ECDH Keys
    title: 2.3  Subject Public Key Algorithms
  title: 2  Algorithm Support
- contents:
  - "3  ASN.1 Module\n   PKIX1Algorithms88 { iso(1) identified-organization(3) dod(6)\n
    \  internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n   id-mod-pkix1-algorithms(17)
    }\n   DEFINITIONS EXPLICIT TAGS ::= BEGIN\n   -- EXPORTS All;\n   -- IMPORTS NONE;\n
    \  --\n   --   One-way Hash Functions\n   --\n   md2  OBJECT IDENTIFIER ::= {\n
    \    iso(1) member-body(2) us(840) rsadsi(113549)\n     digestAlgorithm(2) 2 }\n
    \  md5  OBJECT IDENTIFIER ::= {\n     iso(1) member-body(2) us(840) rsadsi(113549)\n
    \    digestAlgorithm(2) 5 }\n   id-sha1  OBJECT IDENTIFIER ::= {\n     iso(1)
    identified-organization(3) oiw(14) secsig(3)\n     algorithms(2) 26 }\n   --\n
    \  --   DSA Keys and Signatures\n   --\n   -- OID for DSA public key\n   id-dsa
    OBJECT IDENTIFIER ::= {\n        iso(1) member-body(2) us(840) x9-57(10040) x9algorithm(4)
    1 }\n   -- encoding for DSA public key\n   DSAPublicKey ::= INTEGER  -- public
    key, y\n   Dss-Parms  ::=  SEQUENCE  {\n      p             INTEGER,\n      q
    \            INTEGER,\n      g             INTEGER  }\n   -- OID for DSA signature
    generated with SHA-1 hash\n   id-dsa-with-sha1 OBJECT IDENTIFIER ::=  {\n        iso(1)
    member-body(2) us(840) x9-57 (10040) x9algorithm(4) 3 }\n   -- encoding for DSA
    signature generated with SHA-1 hash\n   Dss-Sig-Value  ::=  SEQUENCE  {\n      r
    \      INTEGER,\n      s       INTEGER  }\n   --\n   --   RSA Keys and Signatures\n
    \  --\n   -- arc for RSA public key and RSA signature OIDs\n   pkcs-1 OBJECT IDENTIFIER
    ::= {\n         iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }\n   --
    OID for RSA public keys\n   rsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1 }\n
    \  -- OID for RSA signature generated with MD2 hash\n   md2WithRSAEncryption OBJECT
    IDENTIFIER  ::=  { pkcs-1 2 }\n   -- OID for RSA signature generated with MD5
    hash\n   md5WithRSAEncryption OBJECT IDENTIFIER  ::=  { pkcs-1 4 }\n   -- OID
    for RSA signature generated with SHA-1 hash\n   sha1WithRSAEncryption OBJECT IDENTIFIER
    \ ::=  { pkcs-1 5 }\n   -- encoding for RSA public key\n   RSAPublicKey ::= SEQUENCE
    {\n      modulus            INTEGER,    -- n\n      publicExponent     INTEGER
    \ }  -- e\n   --\n   --   Diffie-Hellman Keys\n   --\n   dhpublicnumber OBJECT
    IDENTIFIER ::= {\n        iso(1) member-body(2) us(840) ansi-x942(10046)\n        number-type(2)
    1 }\n   -- encoding for DSA public key\n   DHPublicKey ::= INTEGER  -- public
    key, y = g^x mod p\n   DomainParameters ::= SEQUENCE {\n      p       INTEGER,
    \          -- odd prime, p=jq +1\n      g       INTEGER,           -- generator,
    g\n      q       INTEGER,           -- factor of p-1\n      j       INTEGER OPTIONAL,
    \ -- subgroup factor, j>= 2\n      validationParms  ValidationParms OPTIONAL }\n
    \  ValidationParms ::= SEQUENCE {\n      seed             BIT STRING,\n      pgenCounter
    \     INTEGER }\n   --\n   --   KEA Keys\n   --\n   id-keyExchangeAlgorithm  OBJECT
    IDENTIFIER  ::=\n        { 2 16 840 1 101 2 1 1 22 }\n   KEA-Parms-Id ::= OCTET
    STRING\n   --\n   --   Elliptic Curve Keys, Signatures, and Curves\n   --\n   ansi-X9-62
    OBJECT IDENTIFIER ::= {\n        iso(1) member-body(2) us(840) 10045 }\n   FieldID
    ::= SEQUENCE {                    -- Finite field\n      fieldType   OBJECT IDENTIFIER,\n
    \     parameters  ANY DEFINED BY fieldType }\n   -- Arc for ECDSA signature OIDS\n
    \  id-ecSigType OBJECT IDENTIFIER ::= { ansi-X9-62 signatures(4) }\n   -- OID
    for ECDSA signatures with SHA-1\n   ecdsa-with-SHA1 OBJECT IDENTIFIER ::= { id-ecSigType
    1 }\n   -- OID for an elliptic curve signature\n   -- format for the value of
    an ECDSA signature value\n   ECDSA-Sig-Value ::= SEQUENCE {\n      r     INTEGER,\n
    \     s     INTEGER }\n   -- recognized field type OIDs are defined in the following
    arc\n   id-fieldType OBJECT IDENTIFIER ::= { ansi-X9-62 fieldType(1) }\n   --
    where fieldType is prime-field, the parameters are of type Prime-p\n   prime-field
    OBJECT IDENTIFIER ::= { id-fieldType 1 }\n   Prime-p ::= INTEGER -- Finite field
    F(p), where p is an odd prime\n   -- where fieldType is characteristic-two-field,
    the parameters are\n   -- of type Characteristic-two\n   characteristic-two-field
    OBJECT IDENTIFIER ::= { id-fieldType 2 }\n   Characteristic-two ::= SEQUENCE {\n
    \     m           INTEGER,                   -- Field size 2^m\n      basis       OBJECT
    IDENTIFIER,\n      parameters  ANY DEFINED BY basis }\n   -- recognized basis
    type OIDs are defined in the following arc\n   id-characteristic-two-basis OBJECT
    IDENTIFIER ::= {\n        characteristic-two-field basisType(3) }\n   -- gnbasis
    is identified by OID gnBasis and indicates\n   -- parameters are NULL\n   gnBasis
    OBJECT IDENTIFIER ::= { id-characteristic-two-basis 1 }\n   -- parameters for
    this basis are NULL\n   -- trinomial basis is identified by OID tpBasis and indicates\n
    \  -- parameters of type Pentanomial\n   tpBasis OBJECT IDENTIFIER ::= { id-characteristic-two-basis
    2 }\n   -- Trinomial basis representation of F2^m\n   -- Integer k for reduction
    polynomial xm + xk + 1\n   Trinomial ::= INTEGER\n   -- for pentanomial basis
    is identified by OID ppBasis and indicates\n   -- parameters of type Pentanomial\n
    \  ppBasis OBJECT IDENTIFIER ::= { id-characteristic-two-basis 3 }\n   -- Pentanomial
    basis representation of F2^m\n   -- reduction polynomial integers k1, k2, k3\n
    \  -- f(x) = x**m + x**k3 + x**k2 + x**k1 + 1\n   Pentanomial ::= SEQUENCE {\n
    \     k1  INTEGER,\n      k2  INTEGER,\n      k3  INTEGER }\n   -- The object
    identifiers gnBasis, tpBasis and ppBasis name\n   -- three kinds of basis for
    characteristic-two finite fields\n   FieldElement ::= OCTET STRING             --
    Finite field element\n   ECPoint  ::= OCTET STRING                 -- Elliptic
    curve point\n   -- Elliptic Curve parameters may be specified explicitly,\n   --
    specified implicitly through a \"named curve\", or\n   -- inherited from the CA\n
    \  EcpkParameters ::= CHOICE {\n      ecParameters  ECParameters,\n      namedCurve
    \   OBJECT IDENTIFIER,\n      implicitlyCA  NULL }\n   ECParameters  ::= SEQUENCE
    {         -- Elliptic curve parameters\n      version   ECPVer,\n      fieldID
    \  FieldID,\n      curve     Curve,\n      base      ECPoint,                --
    Base point G\n      order     INTEGER,                -- Order n of the base point\n
    \     cofactor  INTEGER  OPTIONAL }     -- The integer h = #E(Fq)/n\n   ECPVer
    ::= INTEGER {ecpVer1(1)}\n   Curve  ::= SEQUENCE {\n      a     FieldElement,
    \           -- Elliptic curve coefficient a\n      b     FieldElement,            --
    Elliptic curve coefficient b\n      seed  BIT STRING  OPTIONAL }\n   id-publicKeyType
    OBJECT IDENTIFIER  ::= { ansi-X9-62 keyType(2) }\n   id-ecPublicKey OBJECT IDENTIFIER
    ::= { id-publicKeyType 1 }\n   -- Named Elliptic Curves in ANSI X9.62.\n   ellipticCurve
    OBJECT IDENTIFIER ::= { ansi-X9-62 curves(3) }\n   c-TwoCurve OBJECT IDENTIFIER
    ::= {\n        ellipticCurve characteristicTwo(0) }\n   c2pnb163v1  OBJECT IDENTIFIER
    \ ::=  { c-TwoCurve  1 }\n   c2pnb163v2  OBJECT IDENTIFIER  ::=  { c-TwoCurve
    \ 2 }\n   c2pnb163v3  OBJECT IDENTIFIER  ::=  { c-TwoCurve  3 }\n   c2pnb176w1
    \ OBJECT IDENTIFIER  ::=  { c-TwoCurve  4 }\n   c2tnb191v1  OBJECT IDENTIFIER
    \ ::=  { c-TwoCurve  5 }\n   c2tnb191v2  OBJECT IDENTIFIER  ::=  { c-TwoCurve
    \ 6 }\n   c2tnb191v3  OBJECT IDENTIFIER  ::=  { c-TwoCurve  7 }\n   c2onb191v4
    \ OBJECT IDENTIFIER  ::=  { c-TwoCurve  8 }\n   c2onb191v5  OBJECT IDENTIFIER
    \ ::=  { c-TwoCurve  9 }\n   c2pnb208w1  OBJECT IDENTIFIER  ::=  { c-TwoCurve
    10 }\n   c2tnb239v1  OBJECT IDENTIFIER  ::=  { c-TwoCurve 11 }\n   c2tnb239v2
    \ OBJECT IDENTIFIER  ::=  { c-TwoCurve 12 }\n   c2tnb239v3  OBJECT IDENTIFIER
    \ ::=  { c-TwoCurve 13 }\n   c2onb239v4  OBJECT IDENTIFIER  ::=  { c-TwoCurve
    14 }\n   c2onb239v5  OBJECT IDENTIFIER  ::=  { c-TwoCurve 15 }\n   c2pnb272w1
    \ OBJECT IDENTIFIER  ::=  { c-TwoCurve 16 }\n   c2pnb304w1  OBJECT IDENTIFIER
    \ ::=  { c-TwoCurve 17 }\n   c2tnb359v1  OBJECT IDENTIFIER  ::=  { c-TwoCurve
    18 }\n   c2pnb368w1  OBJECT IDENTIFIER  ::=  { c-TwoCurve 19 }\n   c2tnb431r1
    \ OBJECT IDENTIFIER  ::=  { c-TwoCurve 20 }\n   primeCurve OBJECT IDENTIFIER ::=
    { ellipticCurve prime(1) }\n   prime192v1  OBJECT IDENTIFIER  ::=  { primeCurve
    \ 1 }\n   prime192v2  OBJECT IDENTIFIER  ::=  { primeCurve  2 }\n   prime192v3
    \ OBJECT IDENTIFIER  ::=  { primeCurve  3 }\n   prime239v1  OBJECT IDENTIFIER
    \ ::=  { primeCurve  4 }\n   prime239v2  OBJECT IDENTIFIER  ::=  { primeCurve
    \ 5 }\n   prime239v3  OBJECT IDENTIFIER  ::=  { primeCurve  6 }\n   prime256v1
    \ OBJECT IDENTIFIER  ::=  { primeCurve  7 }\n   END\n"
  title: 3  ASN.1 Module
- contents:
  - "4  References\n   [FIPS 180-1]   Federal Information Processing Standards Publication\n
    \                 (FIPS PUB) 180-1, Secure Hash Standard, 17 April 1995.\n                  [Supersedes
    FIPS PUB 180 dated 11 May 1993.]\n   [FIPS 186-2]   Federal Information Processing
    Standards Publication\n                  (FIPS PUB) 186, Digital Signature Standard,
    27 January\n                  2000. [Supersedes FIPS PUB 186-1 dated 15 December\n
    \                 1998.]\n   [P1363]        IEEE P1363, \"Standard Specifications
    for Public-Key\n                  Cryptography\", 2001.\n   [RC95]         Rogier,
    N. and Chauvaud, P., \"The compression function\n                  of MD2 is not
    collision free,\" Presented at Selected\n                  Areas in Cryptography
    '95, May 1995.\n   [RFC 1034]     Mockapetris, P., \"Domain Names - Concepts and\n
    \                 Facilities\", STD 13, RFC 1034, November 1987.\n   [RFC 1319]
    \    Kaliski, B., \"The MD2 Message-Digest Algorithm\", RFC\n                  1319,
    April 1992.\n   [RFC 1321]     Rivest, R., \"The MD5 Message-Digest Algorithm\",
    RFC\n                  1321, April 1992.\n   [RFC 1422]     Kent, S., \"Privacy
    Enhancement for Internet Electronic\n                  Mail: Part II: Certificate-Based
    Key Management\", RFC\n                  1422, February 1993.\n   [RFC 1423]     Balenson,
    D., \"Privacy Enhancement for Internet\n                  Electronic Mail: Part
    III: Algorithms, Modes, and\n                  Identifiers\", RFC 1423, February
    1993.\n   [RFC 2119]     Bradner, S., \"Key Words for Use in RFCs to Indicate\n
    \                 Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC
    2313]     Kaliski, B., \"PKCS #1: RSA Encryption Version 1.5\",\n                  RFC
    2313, March 1998.\n   [RFC 2459]     Housley, R., Ford, W., Polk, W. and D. Solo
    \"Internet\n                  X.509 Public Key Infrastructure: Certificate and
    CRL\n                  Profile\", RFC 2459, January, 1999.\n   [RFC 3174]     Eastlake,
    D. and P. Jones, \"US Secure Hash Algorithm 1\n                  (SHA1)\", RFC
    3174, September 2001.\n   [RFC 3280]     Housley, R., Polk, W., Ford, W. and D.
    Solo, \"Internet\n                  X.509 Public Key Infrastructure Certificate
    and\n                  Certificate Revocation List (CRL) Profile\", RFC 3280,\n
    \                 April 2002.\n   [SDN.701r]     SDN.701, \"Message Security Protocol
    4.0\", Revision A\n                  1997-02-06.\n   [X.208]        CCITT Recommendation
    X.208: Specification of Abstract\n                  Syntax Notation One (ASN.1),
    1988.\n   [X.660]        ITU-T Recommendation X.660 Information Technology -\n
    \                 ASN.1 encoding rules: Specification of Basic Encoding\n                  Rules
    (BER), Canonical Encoding Rules (CER) and\n                  Distinguished Encoding
    Rules (DER), 1997.\n   [X9.42]        ANSI X9.42-2000, \"Public Key Cryptography
    for The\n                  Financial Services Industry: Agreement of Symmetric\n
    \                 Keys Using Discrete Logarithm Cryptography\", December,\n                  1999.\n
    \  [X9.62]        X9.62-1998, \"Public Key Cryptography For The Financial\n                  Services
    Industry: The Elliptic Curve Digital\n                  Signature Algorithm (ECDSA)\",
    January 7, 1999.\n   [X9.63]        ANSI X9.63-2001, \"Public Key Cryptography
    For The\n                  Financial Services Industry: Key Agreement and Key\n
    \                 Transport Using Elliptic Curve Cryptography\", Work in\n                  Progress.\n"
  title: 4  References
- contents:
  - "5  Security Considerations\n   This specification does not constrain the size
    of public keys or\n   their parameters for use in the Internet PKI.  However,
    the key size\n   selected impacts the strength achieved when implementing\n   cryptographic
    services.  Selection of appropriate key sizes is\n   critical to implementing
    appropriate security.\n   This specification does not identify particular elliptic
    curves for\n   use in the Internet PKI.  However, the particular curve selected\n
    \  impact the strength of the digital signatures.  Some curves are\n   cryptographically
    stronger than others!\n   In general, use of \"well-known\" curves, such as the
    \"named curves\"\n   from ANSI X9.62, is a sound strategy.  For additional information,\n
    \  refer to X9.62 Appendix H.1.3, \"Key Length Considerations\" and\n   Appendix
    A.1, \"Avoiding Cryptographically Weak Keys\".\n   This specification supplements
    RFC 3280.  The security considerations\n   section of that document applies to
    this specification as well.\n"
  title: 5  Security Considerations
- contents:
  - "6  Intellectual Property Rights\n   The IETF has been notified of intellectual
    property rights claimed in\n   regard to some or all of the specification contained
    in this\n   document.  For more information consult the online list of claimed\n
    \  rights.\n   The IETF takes no position regarding the validity or scope of any\n
    \  intellectual property or other rights that might be claimed to\n   pertain
    to the implementation or use of the technology described in\n   this document
    or the extent to which any license under such rights\n   might or might not be
    available; neither does it represent that it\n   has made any effort to identify
    any such rights.  Information on the\n   IETF's procedures with respect to rights
    in standards-track and\n   standards- related documentation can be found in BCP-11.
    \ Copies of\n   claims of rights made available for publication and any assurances
    of\n   licenses to be made available, or the result of an attempt made to\n   obtain
    a general license or permission for the use of such\n   proprietary rights by
    implementors or users of this specification can\n   be obtained from the IETF
    Secretariat.\n"
  title: 6  Intellectual Property Rights
- contents:
  - "7  Author Addresses:\n   Tim Polk\n   NIST\n   100 Bureau Drive, Stop 8930\n
    \  Gaithersburg, MD 20899-8930\n   USA\n   EMail: tim.polk@nist.gov\n   Russell
    Housley\n   RSA Laboratories\n   918 Spring Knoll Drive\n   Herndon, VA 20170\n
    \  USA\n   EMail: rhousley@rsasecurity.com\n   Larry Bassham\n   NIST\n   100
    Bureau Drive, Stop 8930\n   Gaithersburg, MD 20899-8930\n   USA\n   EMail: lbassham@nist.gov\n"
  title: '7  Author Addresses:'
- contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 8.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
