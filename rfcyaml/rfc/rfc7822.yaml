- contents:
  - '        Network Time Protocol Version 4 (NTPv4) Extension Fields

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Network Time Protocol version 4 (NTPv4) defines the optional\n
    \  usage of extension fields.  An extension field, as defined in RFC\n   5905,
    is an optional field that resides at the end of the NTP header\n   and that can
    be used to add optional capabilities or additional\n   information that is not
    conveyed in the standard NTP header.  This\n   document updates RFC 5905 by clarifying
    some points regarding NTP\n   extension fields and their usage with Message Authentication
    Codes\n   (MACs).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7822.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Conventions Used in This Document ...............................3\n      2.1.
    Terminology ................................................3\n      2.2. Terms
    and Abbreviations ....................................3\n   3. NTP Extension Fields
    - RFC 5905 Update ..........................3\n   4. Security Considerations .........................................6\n
    \  5. References ......................................................7\n      5.1.
    Normative References .......................................7\n      5.2. Informative
    References .....................................7\n   Acknowledgments ....................................................8\n
    \  Authors' Addresses .................................................8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The NTP header format consists of a set of fixed fields
    that may be\n   followed by some optional fields.  Two types of optional fields
    are\n   defined: Message Authentication Codes (MACs), and extension fields as\n
    \  defined in Section 7.5 of [NTPv4].\n   If a MAC is used, it resides at the
    end of the packet.  This field\n   can be either 24 octets long, 20 octets long,
    or a 4-octet\n   crypto-NAK.\n   NTP extension fields were defined in [NTPv4]
    as a generic mechanism\n   that allows the addition of future extensions and features
    without\n   modifying the NTP header format (Section 16 of [NTPv4]).\n   The only
    currently defined extension fields are those fields used by\n   the Autokey protocol
    [Autokey] and the Checksum Complement [RFC7821].\n   The Autokey extension field
    is always followed by a MAC, and\n   Section 10 of [Autokey] specifies the parsing
    rules that allow a host\n   to distinguish between an extension field and a MAC.
    \ However, a MAC\n   is not mandatory after an extension field; an NTPv4 packet
    can\n   include one or more extension fields without including a MAC.  This\n
    \  behavior is specified in Section 7.5 of [NTPv4] and in [Err3627], and\n   is
    further clarified in this document.\n   This document updates [NTPv4] (RFC 5905)
    by clarifying some points\n   regarding the usage of extension fields.  These
    updates include\n   changes to address errors found after the publication of [NTPv4]
    with\n   respect to extension fields.  Specifically, this document updates\n   Section
    7.5 of [NTPv4], clarifying the relationship between extension\n   fields and MACs,
    and defining the behavior of a host that receives an\n   unknown extension field.\n"
  title: 1.  Introduction
- contents:
  - '2.  Conventions Used in This Document

    '
  - contents:
    - "2.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [KEYWORDS].\n"
    title: 2.1.  Terminology
  - contents:
    - "2.2.  Terms and Abbreviations\n   MAC          Message Authentication Code\n
      \  NTPv4        Network Time Protocol version 4 [NTPv4]\n"
    title: 2.2.  Terms and Abbreviations
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  NTP Extension Fields - RFC 5905 Update\n   This document updates Section
    7.5 of [NTPv4] as follows:\n   OLD:\n   7.5.  NTP Extension Field Format\n      In
    NTPv4, one or more extension fields can be inserted after the\n      header and
    before the MAC, which is always present when an\n      extension field is present.
    \ Other than defining the field format,\n      this document makes no use of the
    field contents.  An extension\n      field contains a request or response message
    in the format shown\n      in Figure 14.\n       0                   1                   2
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |          Field Type           |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     .                                                               .\n      .
    \                           Value                              .\n      .                                                               .\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
    \                      Padding (as needed)                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                     Figure 14: Extension Field Format\n      All extension fields
    are zero-padded to a word (four octets)\n      boundary.  The Field Type field
    is specific to the defined\n      function and is not elaborated here.  While
    the minimum field\n      length containing required fields is four words (16 octets),
    a\n      maximum field length remains to be established.\n      The Length field
    is a 16-bit unsigned integer that indicates the\n      length of the entire extension
    field in octets, including the\n      Padding field.\n   NEW:\n   7.5.  NTP Extension
    Field Format\n      In NTPv4, one or more extension fields can be inserted after
    the\n      header and before the MAC, if a MAC is present.\n      Other than defining
    the field format, this document makes no use\n      of the field contents.  An
    extension field contains a request or\n      response message in the format shown
    in Figure 14.\n       0                   1                   2                   3\n
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |          Field Type           |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     .                                                               .\n      .
    \                           Value                              .\n      .                                                               .\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
    \                      Padding (as needed)                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                     Figure 14: Extension Field Format\n      All extension fields
    are zero-padded to a word (four octets)\n      boundary.\n      The Field Type,
    Value, and Padding fields are specific to the\n      defined function and are
    not elaborated here; the Field Type value\n      is defined in an IANA registry,
    and its Length, Value, and Padding\n      values are defined by the document referred
    to by the registry.\n      If a host receives an extension field with an unknown
    Field Type,\n      the host SHOULD ignore the extension field and MAY drop the
    packet\n      altogether if policy requires it.\n      While the minimum field
    length containing required fields is\n      four words (16 octets), the maximum
    field length cannot be longer\n      than 65532 octets, due to the maximum size
    of the Length field.\n      The Length field is a 16-bit unsigned integer that
    indicates the\n      length of the entire extension field in octets, including
    the\n      Padding field.\n   7.5.1.  Extension Fields and MACs\n   7.5.1.1.  Extension
    Fields in the Presence of a MAC\n      An extension field can be used in an NTP
    packet that includes a\n      MAC -- for example, as defined in [Autokey].  A
    specification that\n      defines a new extension field MUST specify whether the
    extension\n      field requires a MAC or not.  If the extension field requires
    a\n      MAC, the extension field specification MUST define the algorithm\n      to
    be used to create the MAC and the length of the MAC thus\n      created.  An extension
    field MAY allow for the use of more than\n      one algorithm, in which case the
    information about which algorithm\n      was used MUST be included in the extension
    field itself.\n   7.5.1.2.  Multiple Extension Fields with a MAC\n      If there
    are multiple extension fields that require a MAC, they\n      MUST all require
    the use of the same algorithm and MAC length.\n      Extension fields that do
    not require a MAC can be included with\n      extension fields that do require
    a MAC.\n      An NTP packet MUST NOT be sent with two or more extension fields\n
    \     that require a MAC with different algorithms.\n      If an NTP packet is
    received with two or more extension fields\n      that this receiver recognizes
    and those fields require a MAC with\n      different algorithms, the packet MUST
    be discarded.\n   7.5.1.3.  MAC in the Absence of an Extension Field\n      A
    MAC MUST NOT be longer than 24 octets if there is no extension\n      field present,
    unless a longer MAC is agreed upon by both client\n      and server.  The client
    and server can negotiate this behavior\n      using a previous exchange of packets
    with an extension field that\n      defines the size and algorithm of the MAC
    transmitted in NTP\n      packets.\n   7.5.1.4.  Extension Fields in the Absence
    of a MAC\n      If a MAC is not present, one or more extension fields can be\n
    \     inserted after the header, according to the following rules:\n      o  If
    the packet includes a single extension field, the length of\n         the extension
    field MUST be at least 7 words, i.e., at least\n         28 octets.\n      o  If
    the packet includes more than one extension field, the\n         length of the
    last extension field MUST be at least 28 octets.\n         The length of the other
    extension fields in this case MUST be\n         at least 16 octets each.\n"
  title: 3.  NTP Extension Fields - RFC 5905 Update
- contents:
  - "4.  Security Considerations\n   The security considerations of time protocols
    in general are\n   discussed in [SecTime], and the security considerations of
    NTP are\n   discussed in [NTPv4].\n   Distributed Denial-of-Service (DDoS) attacks
    on NTP servers involve\n   flooding a server with a high rate of NTP packets.
    \ Malicious usage\n   of extension fields cannot amplify such DDoS attacks; such
    malicious\n   attempts are mitigated by NTP servers, since the servers ignore\n
    \  unknown extension fields (as discussed in Section 3) and only\n   respond,
    if needed, with known extension fields.  Extension fields\n   from incoming packets
    are neither propagated by NTP servers nor\n   included in any response.  NTP servers
    create their own extension\n   fields if needed for a response.  A large number
    of extension fields\n   should be flagged by an NTP server as a potential attack.
    \ Large\n   extension field sizes should also be flagged, unless they are\n   expected
    to be large.\n   Middleboxes such as firewalls MUST NOT filter NTP packets based
    on\n   their extension fields.  Such middleboxes should not examine\n   extension
    fields in the packets, since NTP packets may contain new\n   extension fields
    that the middleboxes have not been updated to\n   recognize.\n"
  title: 4.  Security Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [KEYWORDS]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n
      \              DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [NTPv4]     Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n               \"Network
      Time Protocol Version 4: Protocol and Algorithms\n               Specification\",
      RFC 5905, DOI 10.17487/RFC5905,\n               June 2010, <http://www.rfc-editor.org/info/rfc5905>.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [Autokey]   Haberman, B., Ed., and D. Mills,
      \"Network Time Protocol\n               Version 4: Autokey Specification\",
      RFC 5906,\n               DOI 10.17487/RFC5906, June 2010,\n               <http://www.rfc-editor.org/info/rfc5906>.\n
      \  [Err3627]   RFC Errata, Erratum ID 3627, RFC 5905.\n   [RFC7821]   Mizrahi,
      T., \"UDP Checksum Complement in the Network Time\n               Protocol (NTP)\",
      RFC 7821, DOI 10.17487/RFC7821,\n               March 2016, <http://www.rfc-editor.org/info/rfc7821>.\n
      \  [SecTime]   Mizrahi, T., \"Security Requirements of Time Protocols in\n               Packet
      Switched Networks\", RFC 7384,\n               DOI 10.17487/RFC7384, October
      2014,\n               <http://www.rfc-editor.org/info/rfc7384>.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Acknowledgments\n   The authors gratefully acknowledge Dave Mills for his insightful\n
    \  comments.  The authors also thank Tim Chown, Sean Turner, Miroslav\n   Lichvar,
    Suresh Krishnan, and Jari Arkko for their thorough review\n   and helpful comments.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Tal Mizrahi\n   Marvell\n   6 Hamada St.\n   Yokneam,
    20692\n   Israel\n   Email: talmi@marvell.com\n   Danny Mayer\n   Network Time
    Foundation\n   PO Box 918\n   Talent, OR  97540\n   United States\n   Email: mayer@ntp.org\n"
  title: Authors' Addresses
