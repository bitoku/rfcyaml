- contents:
  - ''
  title: __initial_text__
- contents:
  - "Synchronous Optical Network (SONET)/Synchronous Digital Hierarchy (SDH)\n       Encoding
    for Link Management Protocol (LMP) Test Messages\n"
  title: Synchronous Optical Network (SONET)/Synchronous Digital Hierarchy (SDH)
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document details the Synchronous Optical Network\n   (SONET)/Synchronous
    Digital Hierarchy (SDH) technology-specific\n   information needed when sending
    Link Management Protocol (LMP) test\n   messages.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   For scalability purposes, multiple physical resources that\n
    \  interconnect Label Switching Routers (LSRs) can be combined to form a\n   single
    traffic engineering (TE) link for the purposes of path\n   computation and signaling.
    \ These resources may represent one or more\n   physical links that connect the
    LSRs, or they may represent a Label\n   Switched Path (LSP) if LSP hierarchy [RFC4206]
    is used.  The\n   management of TE links is not restricted to in-band messaging,
    but\n   instead can be done using out-of-band techniques.\n   The Link Management
    Protocol (LMP) [RFC4204] has been developed as\n   part of the Generalized MPLS
    (GMPLS) protocol suite to manage TE\n   links.  LMP currently consists of four
    main procedures, of which the\n   first two are mandatory and the last two are
    optional:\n      1.  Control channel management\n      2.  Link property correlation\n
    \     3.  Link verification\n      4.  Fault management\n   Control channel management
    is used to establish and maintain control\n   channel connectivity between adjacent
    nodes.  This is done using a\n   Config message exchange followed by a lightweight
    keep-alive message\n   exchange.  Link property correlation is used to aggregate
    multiple\n   data links into a single TE Link and to synchronize the link\n   properties.
    \ Link verification is used to verify the physical\n   connectivity of the data
    links and to exchange the Interface_Ids of\n   the data links.  Fault management
    is primarily used to suppress\n   alarms and to localize failures in both opaque
    and transparent\n   networks.  When LMP is used with SONET/SDH, however, the fault\n
    \  management procedures may not be needed as existing SONET/SDH\n   mechanisms
    can be used.\n   In this document, the SONET/SDH technology-specific information
    for\n   LMP is defined.  Specifically, the SONET/SDH test procedures used for\n
    \  link verification and link property correlation are detailed.  These\n   procedures
    include the trace correlation transport mechanism (defined\n   for J0, J1, J2)
    that supports a separation of the transport and\n   control plane identifiers.
    \ The latter procedure requires a new trace\n   monitoring function that is discussed
    in this document.  Once the\n   data links have been verified, they can be grouped
    to form TE links.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   The
    reader is assumed to be familiar with the terminology in\n   [RFC4204], [G.707],
    and [T1.105].  The following abbreviations are\n   used in this document:\n   CRC-N:
    \  Cyclic Redundancy Check-N.\n   DCC:     Data communications channel.\n   LOVC:
    \   Lower-order virtual container.\n   HOVC:    Higher-order virtual container.\n
    \  MS:      Multiplex section.\n   MSOH:    Multiplex section overhead.\n   POH:
    \    Path overhead.\n   RS:      Regenerator section.\n   RSOH:    Regenerator
    section overhead.\n   SDH:     Synchronous digital hierarchy.\n   SOH:     Section
    overhead.\n   SONET:   Synchronous Optical Network.\n   STM(-N): Synchronous Transport
    Module (-N) (SDH).\n   STS(-N): Synchronous Transport Signal-Level N (SONET).\n
    \  VC-n:    Virtual Container-n (SDH).\n   VTn:     Virtual Tributary-n (SONET).\n"
  title: 2.  Terminology
- contents:
  - "3.  Verifying Link Connectivity\n   In [RFC4204], a link verification procedure
    is defined whereby Test\n   messages are transmitted in-band over the data links.
    \ This is used\n   for data plane discovery, Interface_Id exchange (Interface_Ids
    are\n   used in GMPLS signaling, either as port labels [RFC3471] or component\n
    \  link identifiers [RFC4201], depending on the configuration), and\n   physical
    connectivity verification.  Multiple data links can be\n   verified using a single
    verification procedure; the correlation is\n   done using the Verify_Id that is
    assigned to the procedure.\n   As part of the link verification procedure, a BeginVerify
    message\n   exchange is used to agree upon parameters for the Test procedure.\n
    \  This can be initiated by sending a BeginVerify message over the\n   control
    channel.  This message includes a BEGIN_VERIFY object that\n   contains a number
    of fields specifying, among other things, the\n   transmission (bit) rate, encoding
    type, and transport mechanisms for\n   the Test Messages.  If the remote node
    receives a BeginVerify message\n   and is ready to begin the procedure, it sends
    a BeginVerifyAck\n   message specifying the desired transport mechanism for the
    Test\n   messages.  The remote node also assigns a Verify_Id to the procedure\n
    \  and includes it in the BeginVerifyAck message.\n   The transmission rate of
    the data link over which the Test Messages\n   will be transmitted is represented
    in IEEE floating-point format\n   using a 32-bit number field and expressed in
    bytes per second.  See\n   [RFC3471] for values defined for SONET/SDH.\n   The
    encoding type identifies the encoding supported by an interface.\n   The defined
    encoding is consistent with the LSP Encoding Type as\n   defined in [RFC3471].
    \ For SONET/SDH, this value must equal the value\n   given for \"SDH ITU-T G.707/SONET
    ANSI T1.105\".\n   The transport mechanism is defined using the Verify Transport\n
    \  Mechanism bit mask.  The scope of this bit mask is restricted to the\n   link
    encoding type.  Multiple bits may be set when this field is\n   included in the
    BeginVerify message; however, only one bit may be set\n   when it is included
    in the BeginVerifyAck message.\n   In the following subsection, the various options
    for Verify Transport\n   Mechanism are defined when the encoding is SONET/SDH.
    \ The trace\n   correlation transport mechanism (defined for J0, J1, J2) supports
    a\n   separation of the transport and control plane identifiers.\n"
  - contents:
    - "3.1.  Verify Transport Mechanism\n   This field is 16 bits in length.\n   In
      this document, the flags for SONET/SDH encoding are defined.  Note\n   that
      all values are defined in network byte order (i.e., big-endian\n   byte order).\n
      \       0x0001: Reserved\n        0x0002 DCCS: Test Message over the Section/RS
      DCC\n                Capable of transmitting Test Messages using the DCC\n                Section/RS
      Overhead bytes with bit-oriented High-Level\n                Data Link Control
      (HDLC) framing format [RFC1662].\n                The Test Message is sent as
      defined in [RFC4204].\n        0x0004 DCCL: Test Message over the Line/MS DCC\n
      \               Capable of transmitting Test Messages using the DCC\n                Line/MS
      Overhead bytes with bit-oriented HDLC framing\n                format [RFC1662].\n
      \               The Test Message is sent as defined in [RFC4204].\n        0x0008
      J0-trace: J0 Section Trace Correlation\n                Capable of transmitting
      SONET/SDH Section/RS trace over\n                J0 Section/RS overhead byte
      as defined in [T1.105] and\n                [G.707].\n                The Test
      Message is not transmitted using the J0 bytes\n                (i.e., over the
      data link), but is sent over the control\n                channel and correlated
      for consistency to the received\n                J0 pattern.\n                In
      order to get the mapping between the Interface_Id\n                over which
      the J0 Test Message is sent and the J0\n                pattern sent in-band,
      the transmitting node must provide\n                the correlation between
      this pattern and the J0 Test\n                Message.  This correlation is
      done using the TRACE\n                object as defined in Section 4.\n                The
      format of the Test Message is as follows:\n                <Test Message> ::=<Common
      Header> <LOCAL_INTERFACE_ID>\n                <VERIFY_ID> <TRACE>\n        0x0010:
      \ Reserved\n        0x0020:  Reserved\n        0x0040 J1-trace: J1 Path Trace
      Correlation\n                Capable of transmitting SONET/SDH STS SPE/HOVC
      Path\n                trace over J1 Path overhead byte as defined in [T1.105]\n
      \               and [G.707].\n                The Test Message is not transmitted
      using the J1 bytes\n                (i.e., over the data link), but is sent
      over the control\n                channel and correlated for consistency to
      the received\n                J1 pattern.\n                In order to get the
      mapping between the Interface_Id\n                over which the J1 Test Message
      is sent and the J1\n                pattern sent in-band, the transmitting node
      must provide\n                the correlation between this pattern and the J1
      Test\n                Message.  This correlation is done using the TRACE\n                object
      as defined in Section 4.\n                The Test Message format is identical
      to that defined\n                above in J0-trace.\n        0x0080 J2-trace:
      J2 Path Trace Correlation\n                Capable of transmitting SONET/SDH
      VT SPE/LOVC Path trace\n                over J2 Path overhead byte as defined
      in [T1.105] and\n                [G.707].\n                The Test Message
      is not transmitted using the J2 bytes\n                (i.e., over the data
      link), but is sent over the control\n                channel and correlated
      for consistency to the received\n                J2 pattern.\n                In
      order to get the mapping between the Interface_Id\n                over which
      the J2 Test Message is sent and the J2\n                pattern sent in-band,
      the transmitting node must provide\n                the correlation between
      this pattern and the J2 Test\n                Message.  This correlation is
      done using the TRACE\n                object as defined in Section 4.\n                The
      Test Message format is identical to that defined\n                above in J0-trace.\n"
    title: 3.1.  Verify Transport Mechanism
  title: 3.  Verifying Link Connectivity
- contents:
  - "4.  Trace Monitoring\n   The trace monitoring features described in this section
    allow a node\n   to do trace monitoring by using the SONET/SDH capabilities.\n
    \    o   A node may request its neighbor (the remote node) to monitor a\n         link
    for a specific pattern in the overhead using the\n         TraceMonitor Message.
    \ An example of this overhead is the SONET\n         Section Trace message transmitted
    in the J0 byte.  If the\n         actual trace message does not match the expected
    trace message,\n         the remote node MUST report the mismatch condition.\n
    \    o   A node may request the value of the current trace message on a\n         given
    data link using the TraceReq Message.\n     o   A node may request a remote node
    to send a specific trace\n         message over a data link using the InsertTrace
    Message.\n"
  - contents:
    - "4.1.1.  TraceMonitor Message\n   The TraceMonitor message (Message Type 21)
      is sent over the\n   control channel and is used to request the remote node
      to monitor a\n   data link for a specific trace value.  This value is inserted
      in the\n   <TRACE> object.  The format of the TraceMonitor message is as\n   follows:\n
      \  <TraceMonitor Message> ::= <Common Header> <MESSAGE_ID>\n                              <LOCAL_INTERFACE_ID>
      <TRACE>\n   The above transmission order SHOULD be followed.\n   The remote
      node MUST respond to a TraceMonitor message with either a\n   TraceMonitorAck
      or TraceMonitorNack Message.\n"
    - contents:
      - "4.1.1.1.  TRACE Object Class\n   Class = 21\n   o    C-Type = 1, Trace\n
        \   0                   1                   2                   3\n   0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |N|   C-Type    |     Class     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |           Trace Type          |          Trace Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                                                               |\n   //
        \                        Trace Message                       //\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Trace
        Type: 16 bits\n       The type of the trace message.  The following values
        are defined.\n       All other values are reserved.\n       1 = SONET Section
        Trace (J0 Byte)\n       2 = SONET Path Trace (J1 Byte)\n       3 = SONET Path
        Trace (J2 Byte)\n       4 = SDH Section Trace (J0 Byte)\n       5 = SDH Path
        Trace (J1 Byte)\n       6 = SDH Path Trace (J2 Byte)\n   Trace Length:  16
        bits\n       This is the length in bytes of the trace message (as specified
        by\n       the Trace Type).\n   Trace Message:\n       This is the value of
        the expected message to be received in-band.\n       The valid length and
        value combinations are determined by the\n       specific technology: for
        SONET see [T1.105] and for SDH see\n       [G.707].  The message MUST be padded
        with zeros to a 32-bit\n       boundary, if necessary.  Trace Length does
        not include padding\n       zeroes.\n   This object is nonnegotiable.\n"
      title: 4.1.1.1.  TRACE Object Class
    - contents:
      - "4.1.2.  TraceMonitorAck Message\n   The TraceMonitorAck message (Message
        Type 22) is used to acknowledge\n   receipt of the TraceMonitor message and
        indicate that all of the\n   TRACE Objects in the TraceMonitor message have
        been received and\n   processed correctly (i.e., no Trace Mismatch).\n   The
        format is as follows:\n   <TraceMonitorAck Message> ::= <Common Header> <MESSAGE_ID_ACK>\n
        \  The above transmission order SHOULD be followed.\n   The MESSAGE_ID_ACK
        object is defined in [RFC4204].  The contents of\n   the MESSAGE_ID_ACK object
        MUST be obtained from the TraceMonitor\n   message being acknowledged.\n"
      title: 4.1.2.  TraceMonitorAck Message
    - contents:
      - "4.1.3.  TraceMonitorNack Message\n   The TraceMonitorNack message (Message
        Type 23) is used to acknowledge\n   receipt of the TraceMonitor message and
        indicate that the TRACE\n   Object in the TraceMonitor message was not processed
        correctly.  This\n   could be because the trace monitoring requested is not
        supported or\n   there was an error in the TRACE object value(s).\n   The
        format is as follows:\n   <TraceMonitorNack Message> ::= <Common Header> <MESSAGE_ID_ACK>\n
        \                                 <ERROR_CODE>\n   The above transmission
        order SHOULD be followed.\n   The MESSAGE_ID_ACK and ERROR_CODE objects are
        defined in [RFC4204].\n   The contents of the MESSAGE_ID_ACK object MUST be
        obtained from the\n   TraceMonitor message being acknowledged.\n   If the
        Trace type is not supported, the ERROR_CODE MUST indicate\n   \"Unsupported
        Trace Type\" defined in Section 4.1.3.1.\n   If the TRACE object was not equal
        to the value seen in the trace, the\n   TraceMonitorNack message MUST include
        the ERROR_CODE indicating\n   \"Invalid Trace Message\".  The TraceMismatch
        message (see Section\n   4.1.4) SHOULD NOT be sent as a result of the mismatch.\n
        \  The TraceMonitorNack message uses a new ERROR_CODE C-Type defined in\n
        \  Section 4.1.3.1.\n"
      - contents:
        - "4.1.3.1.  ERROR_CODE Class\n   C-Type = 3, TRACE_ERROR\n   The following
          new error code bit-values are defined:\n   0x01 = Unsupported Trace Type\n
          \  0x02 = Invalid Trace Message\n   All other values are Reserved.\n   Multiple
          bits may be set to indicate multiple errors.\n   This Object is nonnegotiable.\n"
        title: 4.1.3.1.  ERROR_CODE Class
      title: 4.1.3.  TraceMonitorNack Message
    - contents:
      - "4.1.4.  TraceMismatch Message\n   The TraceMismatch message (Message Type
        24) is sent over the control\n   channel and is used to report a trace mismatch
        on a data link for\n   which trace monitoring was requested.  The format is
        as follows:\n   <TraceMismatch message> ::= <Common Header> <MESSAGE_ID>\n
        \                              <LOCAL_INTERFACE_ID>\n                               [<LOCAL_INTERFACE_ID>
        ...]\n   The above transmission order SHOULD be followed.\n   A neighboring
        node that receives a TraceMismatch message MUST respond\n   with a TraceMismatchAck
        message.\n   The LOCAL_INTERFACE_ID object is defined in [RFC4204].  The\n
        \  LOCAL_INTERFACE_ID in this message is the local Interface Id of the\n   data
        link that has a trace mismatch.  A trace mismatch for multiple\n   LOCAL_INTERFACE_IDs
        may be reported in the same message.\n"
      title: 4.1.4.  TraceMismatch Message
    - contents:
      - "4.1.5.  TraceMismatchAck Message\n   The TraceMismatchAck message (Message
        Type 25) is used to acknowledge\n   receipt of a TraceMismatch message.  The
        format is as follows:\n   <TraceMismatchAck Message> ::= <Common Header> <MESSAGE_ID_ACK>\n
        \  The MESSAGE_ID_ACK object is defined in [RFC4204].  The contents of\n   the
        MESSAGE_ID_ACK object MUST be obtained from the TraceMismatch\n   message
        being acknowledged.\n"
      title: 4.1.5.  TraceMismatchAck Message
    - contents:
      - "4.1.6.  TraceReq Message\n   The TraceReq message (Message Type 26) is sent
        over the control\n   channel and is used to request the current trace value
        of a data\n   link.\n   <TraceReq Message> ::= <Common Header> <MESSAGE_ID>\n
        \                         <LOCAL_INTERFACE_ID> <TRACE_REQ>\n   The above transmission
        order SHOULD be followed.\n   The format of the TRACE_REQ object is as follows:\n
        \  Class = 22\n   O    C-Type = 1, TraceReq\n     0                   1                   2
        \                  3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
        5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |N|   C-Type    |     Class     |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |           Trace Type          |           (Reserved)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Trace Type: 16 bits\n         Defined in Section 4.1.1.1.\n   Reserved:
        16 bits\n         This field MUST be set to zero when sent and ignored when\n
        \        received\n"
      title: 4.1.6.  TraceReq Message
    - contents:
      - "4.1.7.  TraceReport Message\n   The TraceReport message (Message Type 27)
        is sent over the control\n   channel after receiving a TraceReq message.\n
        \  <TraceReport Message> ::= <Common Header> <MESSAGE_ID_ACK> <TRACE>\n   The
        TraceReport message MUST include a TRACE Object (as described in\n   Section
        4.1.1.1) for the requested data link.\n   The MESSAGE_ID_ACK object is defined
        in [RFC4204].  The contents of\n   the MESSAGE_ID_ACK object MUST be obtained
        from the TraceReq message\n   being acknowledged.\n"
      title: 4.1.7.  TraceReport Message
    - contents:
      - "4.1.8.  TraceReqNack Message\n   The TraceReqNack message (Message Type 28)
        is sent over the control\n   channel after receiving a TraceReq message.\n
        \  <TraceReqNack Message> ::= <Common Header> <MESSAGE_ID_ACK>\n                            <ERROR_CODE>\n
        \  The above transmission order SHOULD be followed.\n   The MESSAGE_ID_ACK
        object is defined in [RFC4204].  The contents of\n   the MESSAGE_ID_ACK object
        MUST be obtained from the TraceReq message\n   being acknowledged.\n   The
        TraceReqNack message MUST include an ERROR_CODE Object (as\n   defined in
        Section 4.1.3.1) for the requested data link.\n"
      title: 4.1.8.  TraceReqNack Message
    - contents:
      - "4.1.9.  InsertTrace Message\n   The InsertTrace message (Message Type 29)
        is sent over the control\n   channel and is used to request a remote node
        to send a specific trace\n   message over a data link (this assumes that the
        remote knows the\n   mapping between the local and remote interface_Ids before
        fulfilling\n   such request).\n   The format is as follows:\n   <InsertTrace
        Message> ::=   <Common Header> <MESSAGE_ID>\n                               <LOCAL_INTERFACE_ID>
        <TRACE>\n   The above transmission order SHOULD be followed.\n   A node that
        receives an InsertTrace message MUST respond with either\n   an InsertTraceAck
        or an InsertTraceNack Message.\n   Once the InsertTraceAck message is received,
        the TraceMismatch\n   message (see Section 4.1.4) is used to indicate a trace
        mismatch has\n   occurred.\n   The MESSAGE_ID_object is defined in [RFC4204].\n"
      title: 4.1.9.  InsertTrace Message
    - contents:
      - "4.1.10.  InsertTraceAck Message\n   The InsertTraceAck message (Message Type
        30) is used to acknowledge\n   receipt of the InsertTrace message and indicate
        that the TRACE Object\n   in the InsertTrace message has been received and
        processed correctly\n   (i.e., no Trace Mismatch).  The format is as follows:\n
        \  <InsertTraceAck Message> ::= <Common Header> <MESSAGE_ID_ACK>\n   The MESSAGE_ID_ACK
        object is defined in [RFC4204].  The contents of\n   the MESSAGE_ID_ACK object
        MUST be obtained from the InsertTrace\n   message being acknowledged.\n"
      title: 4.1.10.  InsertTraceAck Message
    - contents:
      - "4.1.11.  InsertTraceNack Message\n   The InsertTraceNack message (Message
        Type 31) is used to acknowledge\n   receipt of the InsertTrace message and
        to indicate that the TRACE\n   Object in the InsertTrace message was not processed
        correctly.  This\n   could be because the trace monitoring requested is not
        supported or\n   there was an error in the value.\n   The format is as follows:\n
        \  <InsertTraceNack Message> ::= <Common Header> <MESSAGE_ID_ACK>\n                                 <ERROR_CODE>\n
        \  The above transmission order SHOULD be followed.\n   The MESSAGE_ID_ACK
        object is defined in [RFC4204].\n   The InsertTraceNack message MUST include
        an ERROR_CODE Object (as\n   defined in Section 4.1.3.1) for the requested
        data link.\n"
      title: 4.1.11.  InsertTraceNack Message
    title: 4.1.1.  TraceMonitor Message
  title: 4.  Trace Monitoring
- contents:
  - "5.  Security Considerations\n   LMP message security uses IPsec as described
    in [RFC4204].  This\n   document introduces no other new security considerations
    not covered\n   in [RFC4204].\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   LMP [RFC4204] defines the following name spaces and
    how IANA can make\n   assignments in those namespaces:\n   - LMP Message Type.\n
    \  - LMP Object Class.\n   - LMP Object Class type (C-Type) unique within the
    Object Class.\n   - LMP Sub-object Class type (Type) unique within the Object
    Class.\n   This memo introduces the following new assignments:\n   LMP Message
    Type:\n      o TraceMonitor message      (Message type = 21)\n      o TraceMonitorAck
    message   (Message type = 22)\n      o TraceMonitorNack message  (Message type
    = 23)\n      o TraceMismatch message     (Message type = 24)\n      o TraceMismatchAck
    message  (Message type = 25)\n      o TraceReq message          (Message type
    = 26)\n      o TraceReport message       (Message type = 27)\n      o TraceReqNack
    message      (Message type = 28)\n      o InsertTrace message       (Message type
    = 29)\n      o InsertTraceAck message    (Message type = 30)\n      o InsertTraceNack
    message   (Message type = 31)\n   LMP Object Class name space and Class type (C-Type):\n
    \     o TRACE              Class name (21)\n        - Type 1           (C-Type
    = 1)\n      o TRACE REQ          Class name (22)\n        - Type 1           (C-Type
    = 1)\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC4201]   Kompella, K., Rekhter, Y., and L.
      Berger, \"Link Bundling\n               in MPLS Traffic Engineering (TE)\",
      RFC 4201, October\n               2005.\n   [G.707]     ITU-T Recommendation
      G.707, \"Network node interface for\n               the synchronous digital
      hierarchy (SDH),\" October 2000.\n   [RFC4204]   Lang, J., Ed., \"Link Management
      Protocol (LMP)\", RFC\n               4204, October 2005.\n   [RFC1662]   Simpson,
      W., \"PPP in HDLC-like Framing\", STD 51, RFC\n               1662, July 1994.\n
      \  [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3471]   Berger, L., \"Generalized
      Multi-Protocol Label Switching\n               (GMPLS) Signaling Functional
      Description\", RFC 3471,\n               January 2003.\n   [T1.105]    T1.105,
      \"Revised Draft T105 SONET Base Standard,\" January\n               2001.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC4206]   Kompella, K., and Y. Rekhter,
      \"Label Switched Paths (LSP)\n               Hierarchy with Generalized Multi-Protocol
      Label Switching\n               (GMPLS) Traffic Engineering (TE)\", RFC 4206,
      October\n               2005.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "8.  Acknowledgements\n   The authors would like to thank Bernard Sales, Emmanuel
    Desmet, Gert\n   Grammel, Jim Jones, Stefan Ansorge, John Drake, and James Scott
    for\n   their many contributions to this document.\n   We would also like to thank
    Greg Bernstein and Michiel van Everdingen\n   for their insightful comments and
    for acting with a strong\n   combination of toughness, professionalism, and courtesy.\n"
  title: 8.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Jonathan P. Lang\n   Sonos, Inc.\n   223 E. De La Guerra
    St.\n   Santa Barbara, CA 93101\n   EMail: jplang@ieee.org\n   Dimitri Papadimitriou\n
    \  Alcatel\n   Francis Wellesplein 1\n   B-2018 Antwerpen, Belgium\n   EMail:
    dimitri.papadimitriou@alcatel.be\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
