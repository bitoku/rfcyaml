- title: __initial_text__
  contents:
  - "                       Directory Tools and Application Services, Inc.\n     A\
    \ Tagged Index Object for use in the Common Indexing Protocol\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a mechanism by which information servers can\n\
    \   exchange indices of information from their databases by making use of\n  \
    \ the Common Indexing Protocol (CIP).  This document defines the\n   structure\
    \ of the index information being exchanged, as well as the\n   appropriate meanings\
    \ for the headers that are defined in the Common\n   Indexing Protocol.  It is\
    \ assumed that the structures defined here\n   can be used by X.500 DSAs, LDAP\
    \ servers, Whois++ servers, CSO Ph\n   servers and many others.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 2\n   2. Background  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 3\n   3. Object  . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 4\n   4. The Tagged Index Object . . . . . . . . . . . . . . . . . . . .\
    \ 5\n   4.1. The Agreement . . . . . . . . . . . . . . . . . . . . . . . . 5\n\
    \   4.2. Content Type  . . . . . . . . . . . . . . . . . . . . . . . . 8\n   4.3\
    \ Tagged Index BNF . . . . . . . . . . . . . . . . . . . . . . . 9\n   4.3.1.\
    \ Header Descriptions . . . . . . . . . . . . . . . . . . . .10\n   4.3.2. Tokenization\
    \ types  . . . . . . . . . . . . . . . . . . . .11\n   4.3.3. Tag Conventions\
    \ . . . . . . . . . . . . . . . . . . . . . .11\n   4.4. Incremental Indexing\
    \  . . . . . . . . . . . . . . . . . . . .12\n   5. Examples  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .13\n   5.1 The original database  . . .\
    \ . . . . . . . . . . . . . . . . .13\n   5.1.1 \"complete\" consistency based\
    \ full update . . . . . . . . . .14\n   5.1.2 \"tag\" consistency based full update\
    \  . . . . . . . . . . . .14\n   5.1.3 \"unique\" consistency based full update\
    \ . . . . . . . . . . .15\n   5.2 First update . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .16\n   5.2.1 \"complete\" consistency based incremental update\
    \  . . . . . .16\n   5.2.2 \"tag\" consistency based incremental update   . .\
    \ . . . . . .17\n   5.2.3 \"unique\" consistency based incremental update  . .\
    \ . . . . .17\n   5.3 Second update  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .18\n   5.3.1 \"complete\" consistency based incremental update  . . . .\
    \ . .18\n   5.3.2 \"tag\" consistency based incremental update . . . . . . . .\
    \ .19\n   5.3.3 \"unique\" consistency based incremental update  . . . . . . .20\n\
    \   6. Aggregation . . . . . . . . . . . . . . . . . . . . . . . . . .21\n   6.1\
    \ Aggregation of Tagged Index Objects  . . . . . . . . . . . . .21\n   7. Security\
    \ Considerations . . . . . . . . . . . . . . . . . . . .21\n   8. References \
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .22\n   9. Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . .23\n   Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . . . .24\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Common Indexing Protocol (CIP) as defined in [1] proposes\
    \ a\n   mechanism for distributing searches across several instances of a\n  \
    \ single type of search engine to create a global directory.  CIP\n   provides\
    \ a scalable, flexible scheme to tie individual databases into\n   distributed\
    \ data warehouses that can scale gracefully with the growth\n   of the Internet.\
    \  CIP provides a mechanism for meeting these goals\n   that is independent of\
    \ the access method that is used to access the\n   data that underlies the indices.\
    \  Separate from CIP is the definition\n   of the Index Object that is used to\
    \ contain the information that is\n   exchanged among Index Servers.  One such\
    \ Index Object that has\n   already been defined is the Centroid that is derived\
    \ from the Whois++\n   protocol [2].\n   The Centroid does not meet all the requirements\
    \ for the exchange of\n   index information amongst information servers.  For\
    \ example, it does\n   not support the notion of incremental updates natively.\
    \  For\n   information servers that contain millions of records in their\n   database,\
    \ constant exchange of complete dredges of the database is\n   bandwidth intensive.\
    \  The Tagged Index Object is specifically\n   designed to support the exchange\
    \ of index update information.  This\n   design comes at the cost of an increase\
    \ in the size of the index\n   object being exchanged.  The Centroid is also not\
    \ tailored to always\n   be able to give boolean answers to queries.  In the Centroid\
    \ Model,\n   \"an index server will take a query in standard Whois++ format, search\n\
    \   its collections of centroids and other forward information, determine\n  \
    \ which servers hold records which may fill that query, and then\n   notifies\
    \ the user's client of the next servers to contact to submit\n   the query.\"\
    \ [2] Thus, the exchange of Centroids amongst index servers\n   allows hints to\
    \ be given about which information server actually\n   contains the information.\
    \  The Tagged Index Object labels the various\n   pieces of information with identifiers\
    \ that tie the individual object\n   attributes back to an object as a whole.\
    \  This \"tagging\" of\n   information allows an index server to be more capable\
    \ of directing a\n   specific query to the appropriate information server.  Again,\
    \ this\n   feature is added to the Tagged Index Object at the expense of an\n\
    \   increase in the size of the index object.\n"
- title: 2. Background
  contents:
  - "2. Background\n   The Lightweight Directory Access Protocol (LDAP) is defined\
    \ in [3],\n   and it defines a mechanism for accessing a collection of information\n\
    \   arranged hierarchically in such a way as to provide a globally\n   distributed\
    \ database which is normally called the Directory\n   Information Tree (DIT).\
    \  Some distinguishing characteristics of LDAP\n   servers are that normally,\
    \ several servers cooperate to manage a\n   common subtree of the DIT.  LDAP servers\
    \ are expected to respond to\n   requests that pertain to portions of the DIT\
    \ for which they have\n   data, as well as for those portions for which they have\
    \ no\n   information in their database. For example, the LDAP server for a\n \
    \  portion of the DIT in the United States (c=US) must be able to\n   provide\
    \ a response to a Search operation that pertains to a portion\n   of the DIT in\
    \ Sweden (c=se).  Normally, the response given will be a\n   referral to another\
    \ LDAP server that is expected to be more\n   knowledgeable about the appropriate\
    \ subtree.  However, there is no\n   mechanism that currently enables these LDAP\
    \ servers to refer the LDAP\n   client to the supposedly more knowledgeable server.\
    \  Typically, an\n   LDAP (v3) server is configured with the name of exactly one\
    \ other\n   LDAP server to which all LDAP clients are referred when their\n  \
    \ requests fall outside the subtree of the DIT for which that LDAP\n   server\
    \ has knowledge.  This specification defines a mechanism whereby\n   LDAP server\
    \ can exchange index information that will allow referrals\n   to point towards\
    \ a clearly accurate destination.\n   The X.500 series of recommendations defines\
    \ the Directory Information\n   Shadowing Protocol (DISP) [4] which allows X.500\
    \ DSAs to exchange\n   information in the DIT.  Shadowing allows various information\
    \ from\n   various portions of the DIT to be replicated amongst participating\n\
    \   DSAs.  The design point of DISP is improved at the exchange of entire\n  \
    \ portions of the DIT, whereas the design point of CIP and the Tagged\n   Index\
    \ Object is optimized at the exchange of structural index\n   information about\
    \ the DIT, and improving the performance of tree\n   navigation amongst various\
    \ information servers.  The Tagged Index\n   Object is more appropriate for the\
    \ exchange of index information than\n   is DISP.  DISP is more targeted at DIT\
    \ distribution and fault\n   tolerance.  DISP is thus more appropriate for the\
    \ exchange of the\n   data in order to spread the load amongst several information\
    \ servers.\n   DISP is tailored specifically to X.500 (and other hierarchical\n\
    \   directory systems), while the Tagged Index Object and CIP can be used\n  \
    \ in a wide variety of information server environments.\n   While DISP allows\
    \ an individual directory server to collect\n   information about large parts\
    \ of the DIT, it would require a huge\n   database to collect all the replicas\
    \ for a significant portion of the\n   DIT.  Furthermore, as X.525 states: \"\
    Before shadowing can occur, an\n   agreement, covering the conditions under which\
    \ shadowing may occur is\n   required.  Although such agreements may be established\
    \ in a variety\n   of ways, such as policy statements covering all DSAs within\
    \ a given\n   DMD ...\", where a DMD is a Directory Management Domain.  This is\n\
    \   owing to the case that the data in the DIT is being exchanged amongst\n  \
    \ DSA rather than only the information required to maintain an Index.\n   In many\
    \ environments such an agreement is not appropriate, and to\n   collect information\
    \ for a meaningful portion of the DIT, many\n   agreements may need to be arranged.\n"
- title: 3. Object
  contents:
  - "3. Object\n   What is desired is to have an information server (or network of\n\
    \   information servers) that can quickly respond to real world requests,\n  \
    \ like:\n   -    What is Tim Howes's email address?  This is much harder than;\n\
    \        What email address does Tim Howes at Netscape have ?\n   -    What is\
    \ the X.509 certificate for Fred Smith at compuserve.com?\n        One certainly\
    \ doesn't want to search CompuServe's entire\n        directory tree to find out\
    \ this one piece of information.  I\n        also don't want to have to shadow\
    \ the entire CompuServe\n        directory subtree onto my server.  If this request\
    \ is being made\n        because Fred is trying to log into my server, I'd certainly\
    \ want\n        to be able to respond to the BIND in real time.\n   -    Who are\
    \ all the people at Novell that have a title of\n        programmer?\n   all these\
    \ requests can reasonably be translated into LDAP or Whois++,\n   and other directory\
    \ access protocol queries.  They can also be\n   serviced in a straightforward\
    \ way by the users home information\n   server if it has the appropriate reference\
    \ information into the\n   database that contains the source data.  Here, the\
    \ first server would\n   be able to \"chain\" the request for the user.  Alternatively,\
    \ a\n   precise referral could be returned.  If the home information server\n\
    \   wants to service (i.e chain) the request based on the index\n   information\
    \ that it has on hand, this servicing could be done several\n   different means:\n\
    \      -    issuing LDAP operations to the remote directory server\n      -  \
    \  issuing DSP operations to the remote directory server\n      -    issuing DAP\
    \ operations to the remote directory server\n      -    issuing Whois++ operations\
    \ to the remote Whois++ server\n      -     ...\n"
- title: 4. The Tagged Index Object
  contents:
  - "4. The Tagged Index Object\n   This section defines a Tagged Index Object that\
    \ can be exchanged by\n   Information Servers using CIP.  While often it is acceptable\
    \ for\n   Information Servers to make use of the Centroid definition (from [2])\n\
    \   to exchange index information, the goals in defining a new construct\n   are\
    \ multi-pronged:\n   -    When the Information Server receives a search request\
    \ that\n        warrants that a referral be returned, allow the server to return\n\
    \        a referral that will point client to a server that is most\n        likely\
    \ able to answer the request correctly.  False positive\n        referrals (the\
    \ search turns up hits in the index object that\n        generate referrals to\
    \ servers that don't hold the desired\n        information) can be reduced, depending\
    \ on the choice of\n        attribute tokenization types that are used.\n   -\
    \    Potentially allow incremental updates that will then consume\n        substantially\
    \ less bandwidth then if full updates always had to\n        be used.\n"
- title: 4.1. The Agreement
  contents:
  - "4.1. The Agreement\n   Before a Tagged Index Object can be exchanged, the organization\
    \ that\n   administers the object supplier and the organization that administers\n\
    \   the object consumer must reach an agreement on how the servers will\n   communicate.\
    \ This agreement contains the following:\n   -    \"index-type\": This specification\
    \ describes the index type \"x-\n        tagged-index-1\"\n   -    \"dsi\": An\
    \ OID that uniquely identifies the subtree and scope.\n        This field is not\
    \ explicitly necessary, as it may not provide\n        information beyond what\
    \ is contained in the \"base-uri\" below.\n   -    \"base-uri\": One or more URI's\
    \ that will form the base of any\n        referrals created based on the index\
    \ object that is governed by\n        this agreement.  For example, in the LDAP\
    \ URL format [8] the\n        base-uri would specify (among other items): the\
    \ LDAP host,  the\n        base object to which this index object refers (e.g.\
    \ c=SE), and\n        the scope of the index object (e.g. single container).\n\
    \   -    \"supplier\": The hostname and listening portnumber of the\n        supplier\
    \ server, as well as any alternative servers holding that\n        same naming\
    \ contexts, if the supplier is unavailable.\n   -    \"consumeraddr\": This is\
    \ a URI of the \"mailto:\" form, with the\n        RFC 822 email address of the\
    \ consumer server.  Further versions\n        of this draft allow other forms\
    \ of URI, so that the consumer may\n        retrieve the update via the WWW, FTP\
    \ or CIP.\n   -    \"updateinterval\": The maximum duration in seconds between\n\
    \        occurances of the supplier server generating an update.  If the\n   \
    \     consumer server has not received an update from the supplier\n        server\
    \ after waiting this long since the previous update, it is\n        likely that\
    \ the index information is now out of date.  A typical\n        value for a server\
    \ with frequent updates would be 604800\n        seconds, or every week.  Servers\
    \ whose DITs are only  modified\n        annually could have a much longer update\
    \ interval.\n   -    \"attributeNamespace\": Every set of index servers that together\n\
    \        wants to support a specific usage of indeces, has to agree on\n     \
    \   which attributenames to use in the index objects. The\n        participating\
    \ directory servers also has to agree on the mapping\n        from local attributenames\
    \ to the attributenames used in the\n        index. Since one specific index server\
    \ might be involved in\n        several such sets, it has to have some way to\
    \ connect a update\n        to the proper set of indexes. One possible solution\
    \ to this\n        would be to use different DSIs.\n   -    \"consistencybase\"\
    : How consistency of the index is maintained\n        over incremental updates:\n\
    \            \"complete\" - every change or delete concerning one object\n   \
    \         has to contain all tokens connected to that object. This\n         \
    \   method must be supported by any server who wants to comply\n            with\
    \ this standard.\n            \"tag\" - starting at a full update every incremental\
    \ update\n            refering back to this full updated has to maintain state-\n\
    \            information regarding tags, such that a object within the\n     \
    \       original database is assigned the same tagnumber every time.\n       \
    \     This method is optional.\n            \"unique\" - every object in the Dataset\
    \ has to have a unique\n            value for a specific attribute in the index.\
    \ A example of\n            such a attribute could be the distinguishedName attribute.\n\
    \            This method is also optional.\n   -    \"securityoption\": Whether\
    \ and how the supplier server should\n        sign and encrypt the update before\
    \ sending it to the consumer\n        server.  Options for this version of the\
    \ specification are:\n            \"none\" - the update is sent in plaintext\n\
    \            \"PGP/MIME\": the update is digitally signed and encrypted\n    \
    \        using PGP [9]\n            \"S/MIME\": the update is digitally signed\
    \ and encrypted using\n            S/MIME [10]\n            \"SSLv3\": the update\
    \ is digitally signed and encrypted using\n            an SSLv3 connection [11]\n\
    \            \"Fortezza\": the update is digitally signed and encrypted\n    \
    \        using Fortezza [5]\n   It is recommended that the \"PGP/MIME\" option\
    \ be used when exchanging\n   sensitive information across public networks, and\
    \ both the supplier\n   and consumer have PGP keys. The \"Fortezza\" option is\
    \ intended for use\n   in environments where security protocols are based on Fortezza-\n\
    \   compatible devices. The \"S/MIME\" option can be used with both the\n   supplier\
    \ and consumer have RSA keys and can make use of the PKCS\n   protocols defined\
    \ in the S/MIME specification. The \"SSLv3\" option can\n   be used when both\
    \ the supplier and consumer have access to SSL\n   services, have server certificates,\
    \ and can mutually authenticate\n   each other.\n   -    Security Credentials:\
    \ The long-term cryptographic credentials\n        used for key exchange and authentication\
    \ of the consumer and\n        supplier servers, if a security option was selected.\
    \  For\n        \"PGP/MIME,\" this will be the trusted public keys of both\n \
    \       servers.  For \"Fortezza,\" this will be the certificate paths of\n  \
    \      both servers to a common point of trust. For \"S/MIME\" and\n        \"\
    SSLv3\" these will be the certificates of the supplier and\n        consumer.\n\
    \        Note that if the index server maintains the information that\n      \
    \  would appear in the agreement in a directory according to the\n        definitions\
    \ in [7], then no real formal agreement between the\n        two parties needs\
    \ to be put in place, and the information that\n        is required for communication\
    \ between the two index servers is\n        derived automatically from the directory.\n"
- title: 4.2. Content Type
  contents:
  - "4.2. Content Type\n   The update consists of a MIME object of type application/cip-index-\n\
    \   object.  The parameters are:\n      \"type\": this has value \"application/index.obj.tagged\"\
    .\n      \"dsi\": the DSI (if any) from the agreement.\n      \"base-uri\". A\
    \ set of URIs, separated by spaces. In each URI, the\n      hostname/portno must\
    \ be distinct, and based on the \"supplier\" part\n      of the agreement.\n \
    \  The payload is mostly textual data but may include bytes with the\n   high\
    \ bit set.  The originating information server should set the\n   content-transfer-encoding\
    \ as appropriate for the information included\n   in the payload.\n   This object\
    \ may be encapsulated in a wrapper content (such as\n   multipart/signed) or be\
    \ encrypted as part of the security procedures.\n   The resulting content can\
    \ the distributed, for example via electronic\n   mail.  For example,\n   From:\
    \ supplier@sup.com Date: Thu, 16 Jan 1997 13:50:37 -0500\n   Message-Id: <199701161850.NAA29295@sup.com>;\n\
    \   To: consumer@consumer.com       <<-- from consumer server address\n   Reply-to:\
    \ supplier-admin@sup.com\n   MIME-Version: 1.0\n   Content-Type: application/index.obj.tagged;\n\
    \   dsi=1.3.6.1.4.1.1466.85.85.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16;\n   base-uri=\"\
    ldap://sup.com/dc=sup,dc=com ldap://alt.com/dc=sup,dc=com\"\n   The payload is\
    \ series of CRLF-terminated lines. The payload is UTF-8.\n   Some supplier servers\
    \ may only be able to generate the printable US-\n   ASCII subset of UTF-8, but\
    \ all consumer servers must be able to\n   handle the full range of Unicode characters\
    \ when decoding the\n   attribute values (in the \"attr-value\" field in the BNF\
    \ below).\n"
- title: 4.3.  Tagged Index BNF
  contents:
  - "4.3.  Tagged Index BNF\n   The Tagged Index object has the following grammar,\
    \ expressed in\n   modified BNF format:\n   index-object = 0*(io-part SEP) io-part\n\
    \   io-part      = header SEP schema-spec SEP index-info\n   header       = version-spec\
    \ SEP update-type SEP this-update SEP\n                   last-update context-size\
    \ name-space SEP\n   version-spec = \"version:\" *SPACE \"x-tagged-index-1\"\n\
    \   update-type  = \"updatetype:\" *SPACE ( \"total\" |\n                  ( \"\
    incremental\" [*SPACE \"tagbased\"|\"uniqueIDbased\" ] )\n   this-update  = \"\
    thisupdate:\" *SPACE TIMESTAMP\n   last-update  = [ \"lastupdate:\" *SPACE TIMESTAMP\
    \ SEP]\n   context-size = [ \"contextsize:\" *SPACE 1*DIGIT SEP]\n   schema-spec\
    \  = \"BEGIN IO-Schema\" SEP 1*(schema-line SEP)\n                  \"END IO-Schema\"\
    \n   schema-line  = attribute-name \":\" token-type\n   token-type   = \"FULL\"\
    \ | \"TOKEN\" | \"RFC822\" | \"UUCP\" | \"DNS\"\n   index-info   = full-index\
    \ | incremental-index\n   full-index   = \"BEGIN Index-Info\" SEP 1*(index-block\
    \ SEP)\n                  \"END Index-Info\"\n   incremental-index = 1*(add-block\
    \ | delete-block | update-block)\n   add-block    = \"BEGIN Add Block\" SEP 1*(index-block\
    \ SEP)\n                  \"END Add Block\"\n   delete-block = \"BEGIN Delete\
    \ Block\" SEP 1*(index-block SEP)\n                  \"END Delete Block\"\n  \
    \ update-block = \"BEGIN Update Block\" SEP\n                  0*(old-index-block\
    \ SEP)\n                  1*(new-index-block SEP)\n                  \"END Update\
    \ Block\"\n   old-index-block = \"BEGIN Old\" SEP 1*(index-block SEP)\n      \
    \            \"END Old\"\n   new-index-block = \"BEGIN New\" SEP 1*(index-block\
    \ SEP)\n                  \"END New\"\n   index-block  = first-line 0*(SEP cont-line)\n\
    \   first-line   = attr-name \":\" *SPACE taglist \"/\" attr-value\n   cont-line\
    \    = \"-\" taglist \"/\" attr-value\n   taglist      = tag 0*(\",\" tag) | \"\
    *\"\n   tag          = 1*DIGIT [\"-\" 1*DIGIT]\n   attr-value   = 1*(UTF8)\n \
    \  attr-name    = 1*(NAMECHAR)\n   TIMESTAMP    = 1*DIGIT\n   NAMECHAR     = DIGIT\
    \ | UPPER | LOWER | \"-\" | \";\" | \".\"\n   SPACE        = <ASCII space, %x20>;\n\
    \   SEP          = (CR LF) | LF\n   CR           = <ASCII CR, carriage return,\
    \ %x0D>;\n   LF           = <ASCII LF, line feed, %x0A>;\n   DIGIT        = \"\
    0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" |\n              \
    \    \"8\" | \"9\"\n   UPPER        = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" |\
    \ \"F\" | \"G\" | \"H\" |\n                  \"I\" | \"J\" | \"K\" | \"L\" | \"\
    M\" | \"N\" | \"O\" | \"P\" |\n                  \"Q\" | \"R\" | \"S\" | \"T\"\
    \ | \"U\" | \"V\" | \"W\" | \"X\" |\n                  \"Y\" | \"Z\"\n   LOWER\
    \        = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" |\n \
    \                 \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\"\
    \ |\n                  \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" |\
    \ \"x\" |\n                  \"y\" | \"z\"\n   US-ASCII-SAFE  = %x01-09 / %x0B-0C\
    \ / %x0E-7F\n                   ;; US-ASCII except CR, LF, NUL\n   UTF8      \
    \     = US-ASCII-SAFE / UTF8-1 / UTF8-2 / UTF8-3\n                           \
    \  / UTF8-4 / UTF8-5\n   UTF8-CONT      = %x80-BF\n   UTF8-1         = %xC0-DF\
    \ UTF8-CONT\n   UTF8-2         = %xE0-EF 2UTF8-CONT\n   UTF8-3         = %xF0-F7\
    \ 3UTF8-CONT\n   UTF8-4         = %xF8-FB 4UTF8-CONT\n   UTF8-5         = %xFC-FD\
    \ 5UTF8-CONT\n   The set of characters allowed to appear in the attr-name field\
    \ is\n   limited to the set of characters used in LDAP and WHOIS++ attribute\n\
    \   names.  For other services that have attribute name character sets\n   that\
    \ are larger than these, those services should create a profile\n   that maps\
    \ the names onto object identifiers, and the sequence of\n   digits and periods\
    \ is used by those services in creating the attr-\n   name fields for their Tagged\
    \ Index Objects.\n   It is worth mentioning that updates to a index based in tagged\
    \ index\n   objects MUST be performed in the order specified by the tagged index\n\
    \   object itself.\n"
- title: 4.3.1.  Header Descriptions
  contents:
  - "4.3.1.  Header Descriptions\n   The header section consists of one or more \"\
    header lines\".  The\n   following header lines are defined:\n      \"version\"\
    : This line must always be present, and have the value\n      \"x-tagged-index-1\"\
    \ for this version of the specification.\n      \"updatetype\": This line must\
    \ always be present.  It takes as the\n      value either \"total\" or \"incremental\"\
    .  The first update sent by a\n      supplier server to a consumer server for\
    \ a DSI must be a \"total\"\n      update.\n      \"thisupdate\": This line must\
    \ always be present. The value is the\n      number of seconds from 00:00:00 UTC\
    \ January 1, 1970 at which the\n      supplier constructed this update.\n    \
    \  \"lastupdate\": This line must be present if the \"updatetype\" list\n    \
    \  has the value \"incremental\".  The value is the number of seconds\n      from\
    \ 00:00:00 UTC January 1, 1970 at which the supplier\n      constructed the previous\
    \ update sent to the consumer.  This field\n      allows the consumer to determine\
    \ if a previous update was missed\n      \"contextsize\": This line may be present\
    \ at the supplier's option.\n      The value is a number, which is the approximate\
    \ total number of\n      entries in the subtree.  This information is provided\
    \ for\n      statistical purposes only.\n"
- title: 4.3.2.  Tokenization Types
  contents:
  - "4.3.2.  Tokenization Types\n   The Tagged Index Object inherits the \"TOKEN\"\
    \ scheme for tokenization\n   as specified in [2].  In addition, there are several\
    \ other\n   tokenization schemes defined for the Tagged Index Object.\n    The\
    \ following table presents these schemes and what character(s) are\n   used to\
    \ delimit tokens.\n        Token Type      Tokenization Characters\n        FULL\
    \    none\n        TOKEN   white space, \"@\"\n        RFC822  white space, \"\
    .\", \"@\"\n        UUCP    white space, \"!\"\n        DNS     any character\
    \ note a number, letter, or \"-\"\n"
- title: 4.3.3.  Tag Conventions
  contents:
  - "4.3.3.  Tag Conventions\n   In the tag list, multiple consecutive tags may be\
    \ shortened by using\n   \"#-#\".  For example, the list \"3,4,5,6,7,8,9,10\"\
    \ may be shortened to\n   \"3-10\".  Tags are to be applied to the data on a per\
    \ entry level.\n   Thus, if two index lines in the same index object contain the\
    \ same\n   tag, then those two lines always refer to the same \"record\" in the\n\
    \   directory.  In LDAP terminology, the two lines would refer to the\n   same\
    \ directory object.  Additionally if two index lines in the same\n   index object\
    \ contain different tags, then it is always the case that\n   those two lines\
    \ refer back to different records in the directory. The\n   meaning of '*' in\
    \ the tag position is that that specific token apears\n   in every record in the\
    \ directory.\n   The tag applied to the same underlying record in two separate\n\
    \   transmissions of a full-index may be different.  Thus, receiving\n   index\
    \ servers should make no assumptions about the values of the tags\n   across index\
    \ object boundaries.\n"
- title: 4.4. Incremental Indexing
  contents:
  - "4.4. Incremental Indexing\n   The tagged index object format supports the ability\
    \ of information\n   servers to distribute only delta index data, rather than\
    \ distributing\n   total index information each time.  This scenario, known as\n\
    \   incremental indexing supports three basic types of operations: add,\n   delete\
    \ and replace.  If the incremental updatetype is specified in\n   the tagged index\
    \ object, then the index object contains a snapshot of\n   only the changes that\
    \ have been made since the index object specified\n   in the lastupdate header\
    \ was distributed.  If the receiving index\n   server did not receive that index\
    \ object, it should request a total\n   index object.  If the CIP protocol supports\
    \ it, the index server may\n   request the specific index object that it missed.\n\
    \   If the tagged index object contains an Add Block, then the lines in\n   the\
    \ Add Block refer to new records that were added to the information\n   base of\
    \ the transmitting index server.  It can be guaranteed that\n   those records\
    \ did not exist in any previously received tagged index\n   object, and the receiving\
    \ index server can insert this index\n   information in the index that it already\
    \ maintains for the\n   transmitting index server.\n   If the tagged index object\
    \ contains a Delete Block, then the\n   structure of the Delete Block depends\
    \ on how the consistency is\n   maintained;\n   -  \"completeRecord\": all the\
    \ tokens connected to the record to be\n      deleted has to be included, the\
    \ tag used to connect tokens in this\n      message has no relation to tags used\
    \ in previously sent tagged\n      index objects.\n   -  \"uniqueIDBased\": only\
    \ the unique identifier has to be defined.\n   -  \"tagBased\": all the tokens\
    \ connected to the record has to be\n      included but then preceded by the tag\
    \ used for this specific\n      record in the preceding set of the last full update\
    \ and the there\n      on following incremental updates.\n   If the tagged index\
    \ object contains an Update Block, then the lines\n   in the Update Block refer\
    \ to records that were changed in the\n   information base of the transmitting\
    \ index server. Again the specific\n   content of the block depends on how the\
    \ consistency is maintained.\n   -  \"completeRecord\": All the tokens representing\
    \ the old version of\n      the record as well as the new ones has to be included.\n\
    \   -  \"uniqueIDBased\": The unique ID has to be included together with\n   \
    \   the tokens that have changed.\n   -  \"tagBased\": Only the changed tokens\
    \ are included, but then both\n      the old version, if there was one, as well\
    \ as the new one, if\n      there is one.\n   The Update Block also supports the\
    \ idea of indexing new attributes\n   that were not previously included in the\
    \ tagged index object.  For\n   example, if the transmitting index server began\
    \ including index\n   information on postal addresses, then it could include an\
    \ Update\n   Block in the index object that included all the index information\
    \ on\n   postal addresses for all records in its information base, and\n   indicate\
    \ that nothing else has changed.\n"
- title: 5. Examples
  contents:
  - "5. Examples\n   In the following sections, for each different consistencybase\
    \ type,\n   the tagged index object is represented for the following scenario;\n\
    \   The examples starts with one full update and following that a set of\n   updates.\
    \ The underlying information is presented in the LDIF [6]\n   format.\n"
- title: 5.1 The original database
  contents:
  - "5.1 The original database\n   dn: cn=Barbara Jensen, ou=Product Development,\
    \ o=Ace Industry, c=US\n   objectclass: top\n   objectclass: person\n   objectclass:\
    \ organizationalPerson\n   cn: Barbara Jensen\n   cn: Barbara J Jensen\n   cn:\
    \ Babs Jensen\n   sn: Jensen\n   uid: bjensen\n   dn: cn=Bjorn Jensen, ou=Accounting,\
    \ o=Ace Industry, c=US\n   objectclass: top\n   objectclass: person\n   objectclass:\
    \ organizationalPerson\n   cn: Bjorn Jensen\n   sn: Jensen\n   title: Accounting\
    \ manager\n   dn: cn=Gern Jensen, ou=Product Testing, o=Ace Industry, c=US\n \
    \  objectclass: top\n   objectclass: person\n   objectclass: organizationalPerson\n\
    \   cn: Gern Jensen\n   cn: Gern O Jensen\n   sn: Jensen\n   title: testpilot\n\
    \   dn: cn=Horatio Jensen, ou=Product Testing, o=Ace Industry, c=US\n   objectclass:\
    \ top\n   objectclass: person\n   objectclass: organizationalPerson\n   cn: Horatio\
    \ Jensen\n   cn: Horatio N Jensen\n   sn: Jensen\n   title: testpilot\n"
- title: 5.1.1 "Complete" consistency based full update
  contents:
  - "5.1.1 \"Complete\" consistency based full update\n   version: x-tagged-index-1\n\
    \   updatetype: total\n   thisupdate: 855938804\n   BEGIN IO-Schema\n   cn: TOKEN\n\
    \   sn: FULL\n   title: TOKEN\n   END IO-Schema\n   BEGIN Index-Info\n   cn: 1/Barbara\n\
    \   -1/J\n   -1/Babs\n   -*/Jensen\n   -2/Bjorn\n   -3/Gern\n   -3/O\n   -4/Horatio\n\
    \   -4/N\n   sn: */Jensen\n   title: 1/product\n   -1-2/manager\n   -1/accounting\n\
    \   -3,4/testpilot\n   END Index-Info\n"
- title: 5.1.2 "tag" consistency based full update
  contents:
  - "5.1.2 \"tag\" consistency based full update\n   version: x-tagged-index-1\n \
    \  updatetype: total\n   thisupdate: 855938804\n   BEGIN IO-Schema\n   cn: TOKEN\n\
    \   sn: FULL\n   title: TOKEN\n   END IO-Schema\n   BEGIN Index-Info\n   cn: 1/Barbara\n\
    \   -1/J\n   -1/Babs\n   -*/Jensen\n   -2/Bjorn\n   -3/Gern\n   -3/O\n   -4/Horatio\n\
    \   -4/N\n   sn: */Jensen\n   title: 1/product\n   -1-2/manager\n   -1/accounting\n\
    \   -3,4/testpilot\n   END Index-Info\n"
- title: 5.1.3 "unique" consistency based full update
  contents:
  - "5.1.3 \"unique\" consistency based full update\n   version: x-tagged-index-1\n\
    \   updatetype: total\n   thisupdate: 855938804\n   BEGIN IO-Schema\n   dn: FULL\n\
    \   cn: TOKEN\n   sn: FULL\n   title: TOKEN\n   END IO-Schema\n   BEGIN Index-Info\n\
    \   dn: 1/cn=Barbara Jensen, ou=Product Development, o=Ace Industry, c=US\n  \
    \ -2/cn=Bjorn Jensen, ou=Accounting, o=Ace Industry, c=US\n   -3/cn=Gern Jensen,\
    \ ou=Product Testing, o=Ace Industry, c=US\n   -4/cn=Horatio Jensen, ou=Product\
    \ Testing, o=Ace Industry, c=US\n   cn: 1/Barbara\n   -1/J\n   -1/Babs\n   -*/Jensen\n\
    \   -2/Bjorn\n   -3/Gern\n   -3/O\n   -4/Horatio\n   -4/N\n   sn: */Jensen\n \
    \  title: 1/product\n   -1-2/manager\n   -1/accounting\n   -3,4/testpilot\n  \
    \ END Index-Info\n"
- title: 5.2 First update
  contents:
  - "5.2 First update\n   Gern Jensen's entry above changes to:\n   dn: cn=Gern Jensen,\
    \ ou=Product Testing, o=Ace Industry, c=US\n   objectclass: top\n   objectclass:\
    \ person\n   objectclass: organizationalPerson\n   cn: Gern Jensen\n   cn: Gern\
    \ O Jensen\n   sn: Jensen\n   title: chiefpilot\n"
- title: 5.2.1 First update using "complete"
  contents:
  - "5.2.1 First update using \"complete\"\n   version: x-tagged-index-1\n   updatetype:\
    \ incremental\n   lastupdate: 855940000\n   thisupdate: 855938804\n   BEGIN IO-schema\n\
    \   cn: TOKEN\n   sn: FULL\n   title: FULL\n   END IO-Schema\n   BEGIN Update\
    \ Block\n   BEGIN Old\n   cn: 1/Gern\n   cn: 1/O\n   cn: 1/Jensen\n   sn: 1/Jensen\n\
    \   title: 1/testpilot\n   END Old\n   BEGIN New\n   cn: 1/Gern\n   cn: 1/O\n\
    \   cn: 1/Jensen\n   sn: 1/Jensen\n   title: 1/chiefpilot\n   END New\n   END\
    \ Update Block\n"
- title: 5.2.2 First update using "tag" consistency
  contents:
  - "5.2.2 First update using \"tag\" consistency\n   version: x-tagged-index-1\n\
    \   updatetype: incremental\n   lastupdate: 855940000\n   thisupdate: 855938804\n\
    \   BEGIN IO-schema\n   cn: TOKEN\n   sn: FULL\n   title: FULL\n   END IO-Schema\n\
    \   BEGIN Update Block\n   BEGIN Old\n   title: 3/testpilot\n   END Old\n   BEGIN\
    \ New\n   title: 3/chiefpilot\n   END New\n   END Update Block\n"
- title: 5.2.3 First update using "unique" ID's
  contents:
  - "5.2.3 First update using \"unique\" ID's\n   version: x-tagged-index-1\n   updatetype:\
    \ incremental\n   lastupdate: 855940000\n   thisupdate: 855938804\n   BEGIN IO-schema\n\
    \   cn: TOKEN\n   sn: FULL\n   title: FULL\n   END IO-Schema\n   BEGIN Update\
    \ Block\n   BEGIN Old\n   dn: 1/cn=Gern Jensen, ou=Product Testing, o=Ace Industry,\
    \ c=US\n   title: 1/testpilot\n   END Old\n   BEGIN New\n   dn: 1/cn=Gern Jensen,\
    \ ou=Product Testing, o=Ace Industry, c=US\n   title: 1/chiefpilot\n   END New\n\
    \   END Update Block\n"
- title: 5.3 Second update
  contents:
  - "5.3 Second update\n   # Add a new entry\n   dn: cn=Bo Didley, ou=Marketing, o=Ace\
    \ Industry, c=US\n   changetype: add\n   objectclass: top\n   objectclass: person\n\
    \   objectclass: organizationalPerson\n   cn: Bo Didley\n   sn: Didley\n   title:\
    \ Policy Maker\n   # Delete an existing entry\n   dn: cn=Bjorn Jensen, ou=Accounting,\
    \ o=Ace Industry, c=US\n   changetype: delete\n   # Modify all other entries:\
    \ adding an additional locality value\n   dn: cn=Barbara Jensen, ou=Product Development,\
    \ o=Ace Industry, c=US\n   changetype: modify\n   add: locality\n   locality:\
    \ New Jersey\n   dn: cn=Gern Jensen, ou=Product Testing, o=Ace Industry, c=US\n\
    \   changetype: modify\n   add: locality\n   locality: New Orleans\n   dn: cn=Horatio\
    \ Jensen, ou=Product Testing, o=Ace Industry, c=US\n   changetype: modify\n  \
    \ add: locality\n   locality: New Caledonia\n"
- title: 5.3.1 "complete"
  contents:
  - "5.3.1 \"complete\"\n   version: x-tagged-index-1\n   updatetype: incremental\n\
    \   lastupdate: 855938804\n   thisupdate: 855939525\n   BEGIN IO-schema\n   cn:\
    \ TOKEN\n   sn: FULL\n   title: FULL\n   locality: TOKEN\n   END IO-Schema\n \
    \  BEGIN Add Block\n   cn: 1/Bo\n   -1/Didley\n   sn: 1/Didley\n   title: 1/Policy\n\
    \   -1/maker\n   locality: 1/New\n   -1/York\n   END Add Block\n   BEGIN Delete\
    \ Block\n   cn: 1/Bjorn\n   -1/Jensen\n   sn: 1/Jensen\n   title: 1/Accounting\n\
    \   -1/Manager\n   END Delete Block\n   BEGIN Update Block\n   BEGIN Old\n   cn:\
    \ 1/Barbara\n   -1/J\n   -1-3/Jensen\n   -2/Gern\n   -2/O\n   -3/Horatio\n   sn:\
    \ 1-3/Jensen\n   title: 1/Production\n   -1/Manager\n   -2/Testpilot\n   -3/Chiefpilot\n\
    \   END Old\n   BEGIN New\n   cn: 1/Barbara\n   -1/J\n   -1-3/Jensen\n   -2/Gern\n\
    \   -2/O\n   -3/Horatio\n   sn: 1-3/Jensen\n   title: 1/Production\n   -1/Manager\n\
    \   -2/Testpilot\n   -3/Chiefpilot\n   locality: 1/Jersey\n   -2/Orleans\n   -3/Caledonia\n\
    \   -1-3/New\n   END New    END Update Block\n"
- title: 5.3.2 "tag"
  contents:
  - "5.3.2 \"tag\"\n   version: x-tagged-index-1\n   updatetype: incremental\n   lastupdate:\
    \ 855938804\n   thisupdate: 855939525\n   BEGIN IO-schema\n   cn: TOKEN\n   sn:\
    \ FULL\n   title: FULL\n   locality: TOKEN\n   END IO-Schema\n   BEGIN Add Block\n\
    \   cn: 5/Bo\n   -5/Didley\n   sn: 5/Didley\n   title: 5/Policy\n   -5/maker\n\
    \   locality: 5/New\n   -5/York\n   END Add Block\n   BEGIN Delete Block\n   cn:\
    \ 2/Bjorn\n   -2/Jensen\n   sn: 2/Jensen\n   title: 2/Accounting\n   -2/Manager\n\
    \   END Delete Block\n   BEGIN Update Block\n   BEGIN New\n   locality: 1/Jersey\n\
    \   -2/Orleans\n   -4/Caledonia\n   -1,2,4/New\n   END New\n   END Update Block\n"
- title: 5.3.3 "unique"
  contents:
  - "5.3.3 \"unique\"\n   version: x-tagged-index-1\n   updatetype: incremental\n\
    \   lastupdate: 855938804\n   thisupdate: 855939525\n   BEGIN IO-schema\n   cn:\
    \ TOKEN\n   sn: FULL\n   title: FULL\n   locality: TOKEN\n   END IO-Schema\n \
    \  BEGIN Add Block\n   dn: 1/cn=Bo Didley, ou=Marketing, o=Ace Industry, c=US\n\
    \   cn: 1/Bo\n   -1/Didley\n   sn: 1/Didley\n   title: 1/Policy\n   -1/maker\n\
    \   locality: 1/New\n   -1/York\n   END Add Block\n   BEGIN Delete Block\n   dn:\
    \ 1/cn=Bjorn Jensen, ou=Accounting, o=Ace Industry, c=US\n   END Delete Block\n\
    \   BEGIN Update Block\n   BEGIN New\n   dn: 1/cn=Barbara Jensen, ou=Product Development,\
    \ o=Ace Industry, c=US\n   -2/cn=Gern Jensen, ou=Product Testing, o=Ace Industry,\
    \ c=US\n   -3/cn=Horatio Jensen, ou=Product Testing, o=Ace Industry, c=US\n  \
    \ locality: 1/Jersey\n   -2/Orleans\n   -3/Caledonia\n   -1-3/New\n   END New\n\
    \   END Update Block\n"
- title: 6. Aggregation
  contents:
  - '6. Aggregation

    '
- title: 6.1. Aggregation of Tagged Index Objects
  contents:
  - "6.1. Aggregation of Tagged Index Objects\n   Aggregation of two tagged index\
    \ objects is done by merging the two\n   lists of values and rewriting each tag\
    \ list.  The tag list rewriting\n   process is done so that the resulting index\
    \ object appears as if it\n   came from a single source. An index server that\
    \ aggregates tagged\n   index objects for export MUST ensure that the export URL\
    \ (i.e. the\n   base-uri of the CIP object) for the aggregate index object will\
    \ route\n   all queries that have \"hits\" on the index object to that server\n\
    \   (otherwise, query routing will not succeed).\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   This specification provides a protocol for transferring\
    \ information\n   between two servers.  The information transferred may be protected\
    \ by\n   laws in many countries, so care must be taken in the methods used to\n\
    \   tokenize the data to ensure that protected data may not be\n   reconstructed\
    \ in full by the receiving server.  This protocol does\n   not have any inherent\
    \ protection against spoofing or eavesdropping.\n   However, since this protocol\
    \ is transported in MIME messages (as are\n   all CIP index objects), it inherits\
    \ all the security capabilities and\n   liabilities of other MIME messages.  Specifically,\
    \ those wanting to\n   prevent eavesdropping or spoofing may use some of the various\n\
    \   techniques for signing and encrypting MIME messages.\n   Information Server\
    \ administrators must decide what portions of their\n   databases are appropriate\
    \ for inclusion in the Tagged Index Object.\n   For distribution of information\
    \ outside the enterprise, information\n   server developers are encouraged to\
    \ allow for facilities that hide\n   the organizational structure when generating\
    \ the Tagged Index Object\n   from the underlying information database.  To allow\
    \ for the secure\n   transmission of Tagged Index Objects across the Internet,\
    \ Index\n   Servers should make use of SSL when completing the connection. In\n\
    \   order to strongly verify the identity of the peer index server on the\n  \
    \ other side of the connection, SSL version 3 certificate exchange\n   should\
    \ be implemented, and the identity in the peer's certificate\n   verify with the\
    \ Public Key Infrastructure.  If electronic mail is\n   used to exchange the Tagged\
    \ Index Objects, then a secure messaging\n   facility, such as PGP/MIME or S/MIME\
    \ should be used to sign or\n   encrypt (or both) the information.\n"
- title: 8. References
  contents:
  - "8. References\n   [1]  Allen, J. and M. Mealling, \"The Architecture of the Common\n\
    \        Indexing Protocol (CIP),\" RFC 2651, August 1999.\n   [2]  Weider, C.,\
    \ Fullton, J. and S. Spero, \"Architecture of the\n        Whois++ Index Service\"\
    , RFC 1913, February 1996.\n   [3]  Wahl, M., Howes, T. and S. Kille, \"Lightweight\
    \ Directory Access\n        Protocol (v3)\", RFC 2251, December 1997.\n   [4]\
    \  ITU, \"X.525 Information Technology - Open Systems\n        Interconnection\
    \ - The Directory: Replication\", November 1993.\n   [5]  \"FORTEZZA Application\
    \ Implementors  Guide for the FORTEZZA\n        Crypto Card (Production Version)\"\
    , Document #PD4002102-1.01,\n        SPYRUS, 1995.\n   [6]  Good, G., \"The LDAP\
    \ Data Interchange Format (LDIF) - Technical\n        Specification\", Work in\
    \ Progress.\n   [7]  Hedberg, R., \"LDAPv2 Client vs. the Index Mesh\", RFC 2657,\n\
    \        August 1999.\n   [8]  Howes, T. and M. Smith, \"The LDAP URL Format\"\
    , RFC 2255,\n        December 1997.\n   [9]  Elkins, M., \"MIME Security with\
    \ Pretty Good Privacy (PGP)\", RFC\n        2015, October 1996.\n   [10] Ramsdell,\
    \ B., Editor, \"S/MIME Version 3 Message Specification\",\n        RFC 2633, June\
    \ 1999.\n   [11] Allen, C. and T. Dierks, \"The TLS Protocol Version 1.0\", RFC\n\
    \        2246, January 1999.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Roland Hedberg\n   Catalogix\n   Dalsveien 53\n  \
    \ 0387 Oslo\n   Norway\n   EMail:  roland@catalogix.ac.se\n   Bruce Greenblatt\n\
    \   Directory Tools and Application Services, Inc.\n   6841 Heaton Moor Drive\n\
    \   San Jose, CA 95119\n   USA\n   Phone: +1-408-224-5349\n   EMail: bgreenblatt@directory-applications.com\n\
    \   Ryan Moats\n   AT&T\n   15621 Drexel Circle\n   Omaha, NE 68135-2358\n   USA\n\
    \   Phone:  +1 402 894-9456\n   EMail:  jayhawk@att.com\n   Mark Wahl\n   Innosoft\
    \ International, Inc.\n   8911 Capital of Texas Hwy, Suite 4140\n   Austin, TX\
    \ 78759\n   USA\n   Phone +1 626 919 3600\n   EMail  Mark.Wahl@innosoft.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
