- contents:
  - "               Use of the Camellia Encryption Algorithm\n                 in
    Cryptographic Message Syntax (CMS)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies the conventions for using the Camellia\n
    \  encryption algorithm for encryption with the Cryptographic Message\n   Syntax
    (CMS).\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   This document specifies the conventions for using the Camellia\n
    \  encryption algorithm [CamelliaSpec] for encryption with the\n   Cryptographic
    Message Syntax (CMS) [CMS].  The relevant object\n   identifiers (OIDs) and processing
    steps are provided so that Camellia\n   may be used in the CMS specification (RFC
    3369, RFC 3370) for content\n   and key encryption.\n   Note:  This work was done
    when the first author worked for NTT.\n"
  - contents:
    - "1.1.  Camellia\n   Camellia was jointly developed by Nippon Telegraph and Telephone\n
      \  Corporation and Mitsubishi Electric Corporation in 2000.  Camellia\n   specifies
      the 128-bit block size and 128-, 192-, and 256-bit key\n   sizes, the same interface
      as the Advanced Encryption Standard (AES).\n   Camellia is characterized by
      its suitability for both software and\n   hardware implementations as well as
      its high level of security.  From\n   a practical viewpoint, it is designed
      to enable flexibility in\n   software and hardware implementations on 32-bit
      processors widely\n   used over the Internet and many applications, 8-bit processors
      used\n   in smart cards, cryptographic hardware, embedded systems, and so on\n
      \  [CamelliaTech].  Moreover, its key setup time is excellent, and its\n   key
      agility is superior to that of AES.\n   Camellia has been scrutinized by the
      wide cryptographic community\n   during several projects for evaluating crypto
      algorithms.  In\n   particular, Camellia was selected as a recommended cryptographic\n
      \  primitive by the EU NESSIE (New European Schemes for Signatures,\n   Integrity
      and Encryption) project [NESSIE] and also included in the\n   list of cryptographic
      techniques for Japanese e-Government systems\n   which were selected by the
      Japan CRYPTREC (Cryptography Research and\n   Evaluation Committees) [CRYPTREC].\n"
    title: 1.1.  Camellia
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHOULD\",
      \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document
      (in uppercase,\n   as shown) are to be interpreted as described in [RFC2119].\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Object Identifiers for Content and Key Encryption\n   This section provides
    the OIDs and processing information necessary\n   for Camellia to be used for
    content and key encryption in CMS.\n   Camellia is added to the set of optional
    symmetric encryption\n   algorithms in CMS by providing two classes of unique
    object\n   identifiers (OIDs).  One OID class defines the content encryption\n
    \  algorithms and the other defines the key encryption algorithms.  Thus\n   a
    CMS agent can apply Camellia either for content or key encryption\n   by selecting
    the corresponding object identifier, supplying the\n   required parameter, and
    starting the program code.\n"
  - contents:
    - "2.1.  OIDs for Content Encryption\n   Camellia is added to the set of symmetric
      content encryption\n   algorithms defined in [CMSALG].  The Camellia content-encryption\n
      \  algorithm, in Cipher Block Chaining (CBC) mode, for the three\n   different
      key sizes are identified by the following object\n   identifiers:\n      id-camellia128-cbc
      OBJECT IDENTIFIER ::=\n          { iso(1) member-body(2) 392 200011 61 security(1)\n
      \           algorithm(1) symmetric-encryption-algorithm(1)\n            camellia128-cbc(2)
      }\n      id-camellia192-cbc OBJECT IDENTIFIER ::=\n          { iso(1) member-body(2)
      392 200011 61 security(1)\n            algorithm(1) symmetric-encryption-algorithm(1)\n
      \           camellia192-cbc(3) }\n      id-camellia256-cbc OBJECT IDENTIFIER
      ::=\n          { iso(1) member-body(2) 392 200011 61 security(1)\n            algorithm(1)
      symmetric-encryption-algorithm(1)\n            camellia256-cbc(4) }\n   The
      AlgorithmIdentifier parameters field MUST be present, and the\n   parameters
      field MUST contain the value of IV:\n      CamelliaCBCParameter ::= CamelliaIV
      \ --  Initialization Vector\n      CamelliaIV ::= OCTET STRING (SIZE(16))\n
      \  The plain text is padded according to Section 6.3 of [CMS].\n"
    title: 2.1.  OIDs for Content Encryption
  - contents:
    - "2.2.  OIDs for Key Encryption\n   The key-wrap/unwrap procedures used to encrypt/decrypt
      a Camellia\n   content-encryption key (CEK) with a Camellia key-encryption key
      (KEK)\n   are specified in Section 3.  Generation and distribution of key-\n
      \  encryption keys are beyond the scope of this document.\n   The Camellia key-encryption
      algorithm has the following object\n   identifier:\n     id-camellia128-wrap
      OBJECT IDENTIFIER ::=\n                 { iso(1) member-body(2) 392 200011 61
      security(1)\n                   algorithm(1) key-wrap-algorithm(3)\n                   camellia128-wrap(2)
      }\n     id-camellia192-wrap OBJECT IDENTIFIER ::=\n                 { iso(1)
      member-body(2) 392 200011 61 security(1)\n                    algorithm(1) key-wrap-algorithm(3)\n
      \                   camellia192-wrap(3) }\n     id-camellia256-wrap OBJECT IDENTIFIER
      ::=\n                 { iso(1) member-body(2) 392 200011 61 security(1)\n                   algorithm(1)
      key-wrap-algorithm(3)\n                   camellia256-wrap(4) }\n   In all cases
      the parameters field of AlgorithmIdentifier MUST be\n   ABSENT, because the
      key wrapping procedure itself defines how and\n   when to use an IV.  The OID
      gives the KEK key size, but does not make\n   any statements as to the size
      of the wrapped Camellia CEK.\n   Implementations MAY use different KEK and CEK
      sizes.  Implementations\n   MUST support the CEK and the KEK having the same
      length.  If\n   different lengths are supported, the KEK MUST be of equal or
      greater\n   length than the CEK.\n"
    title: 2.2.  OIDs for Key Encryption
  title: 2.  Object Identifiers for Content and Key Encryption
- contents:
  - "3.  Key Wrap Algorithm\n   Camellia key wrapping and unwrapping are done in conformance
    with the\n   AES key wrap algorithm [RFC3394], because Camellia and AES have the\n
    \  same block and key sizes, i.e., the block size of 128 bits and key\n   sizes
    of 128, 192, and 256 bits.\n"
  - contents:
    - "3.1.  Notation and Definitions\n   The following notation is used in the description
      of the key wrapping\n   algorithms:\n   Camellia(K, W)\n                 Encrypt
      W using the Camellia codebook with key K\n   Camellia-1(K, W)\n                   Decrypt
      W using the Camellia codebook with key K\n   MSB(j, W)     Return the most significant
      j bits of W\n   LSB(j, W)     Return the least significant j bits of W\n   B1
      ^ B2       The bitwise exclusive or (XOR) of B1 and B2\n   B1 | B2       Concatenate
      B1 and B2\n   K             The key-encryption key K\n   n             The number
      of 64-bit key data blocks\n   s             The number of steps in the wrapping
      process, s = 6n\n   P[i]          The ith plaintext key data block\n   C[i]
      \         The ith ciphertext data block\n   A             The 64-bit integrity
      check register\n   R[i]          An array of 64-bit registers where\n                     i
      = 0, 1, 2, ..., n\n   A[t], R[t][i] The contents of registers A and R[i] after
      encryption\n                     step t.\n   IV            The 64-bit initial
      value used during the wrapping\n                     process.\n   In the key
      wrap algorithm, the concatenation function will be used to\n   concatenate 64-bit
      quantities to form the 128-bit input to the\n   Camellia codebook.  The extraction
      functions will be used to split\n   the 128-bit output from the Camellia codebook
      into two 64-bit\n   quantities.\n"
    title: 3.1.  Notation and Definitions
  - contents:
    - "3.2.  Camellia Key Wrap\n   Key wrapping with Camellia is identical to Section
      2.2.1 of [RFC3394]\n   with \"AES\" replaced by \"Camellia\".\n   The inputs
      to the key wrapping process are the KEK and the plaintext\n   to be wrapped.
      \ The plaintext consists of n 64-bit blocks, containing\n   the key data being
      wrapped.  The key wrapping process is described\n   below.\n   Inputs:      Plaintext,
      n 64-bit values {P[1], P[2], ..., P[n]},\n                and Key, K (the KEK).\n
      \  Outputs:     Ciphertext, (n+1) 64-bit values {C[0], C[1], ...,\n                C[n]}.\n
      \  1) Initialize variables.\n       Set A[0] to an initial value (see Section
      3.4)\n       For i = 1 to n\n            R[0][i] = P[i]\n   2) Calculate intermediate
      values.\n       For t = 1 to s, where s = 6n\n           A[t] = MSB(64, Camellia(K,
      A[t-1] | R[t-1][1])) ^ t\n           For i = 1 to n-1\n               R[t][i]
      = R[t-1][i+1]\n           R[t][n] = LSB(64, Camellia(K, A[t-1] | R[t-1][1]))\n
      \  3) Output the results.\n       Set C[0] = A[t]\n       For i = 1 to n\n           C[i]
      = R[t][i]\n   An alternative description of the key wrap algorithm involves\n
      \  indexing rather than shifting.  This approach allows one to calculate\n   the
      wrapped key in place, avoiding the rotation in the previous\n   description.
      \ This produces identical results and is more easily\n   implemented in software.\n
      \  Inputs:  Plaintext, n 64-bit values {P[1], P[2], ..., P[n]},\n            and
      Key, K (the KEK).\n   Outputs: Ciphertext, (n+1) 64-bit values {C[0], C[1],
      ...,\n            C[n]}.\n   1) Initialize variables.\n       Set A = IV, an
      initial value (see Section 3.4)\n       For i = 1 to n\n           R[i] = P[i]\n
      \  2) Calculate intermediate values.\n       For j = 0 to 5\n           For
      i=1 to n\n               B = Camellia(K, A | R[i])\n               A = MSB(64,
      B) ^ t where t = (n*j)+i\n               R[i] = LSB(64, B)\n   3) Output the
      results.\n       Set C[0] = A\n       For i = 1 to n\n           C[i] = R[i]\n"
    title: 3.2.  Camellia Key Wrap
  - contents:
    - "3.3.  Camellia Key Unwrap\n   Key unwrapping with Camellia is identical to
      Section 2.2.2 of\n   [RFC3394], with \"AES\" replaced by \"Camellia\".\n   The
      inputs to the unwrap process are the KEK and (n+1) 64-bit blocks\n   of ciphertext
      consisting of previously wrapped key.  It returns n\n   blocks of plaintext
      consisting of the n 64-bit blocks of the\n   decrypted key data.\n   Inputs:
      \ Ciphertext, (n+1) 64-bit values {C[0], C[1], ..., C[n]},\n            and
      Key, K (the KEK).\n   Outputs: Plaintext, n 64-bit values {P[1], P[2], ...,
      P[n]}.\n   1) Initialize variables.\n       Set A[s] = C[0] where s = 6n\n       For
      i = 1 to n\n           R[s][i] = C[i]\n   2) Calculate the intermediate values.\n
      \      For t = s to 1\n           A[t-1] = MSB(64, Camellia-1(K, ((A[t] ^ t)
      | R[t][n]))\n           R[t-1][1] = LSB(64, Camellia-1(K, ((A[t]^t) | R[t][n]))\n
      \          For i = 2 to n\n               R[t-1][i] = R[t][i-1]\n   3) Output
      the results.\n       If A[0] is an appropriate initial value (see Section 3.4),\n
      \      Then\n           For i = 1 to n\n               P[i] = R[0][i]\n       Else\n
      \          Return an error\n   The unwrap algorithm can also be specified as
      an index based\n   operation, allowing the calculations to be carried out in
      place.\n   Again, this produces the same results as the register shifting\n
      \  approach.\n   Inputs:  Ciphertext, (n+1) 64-bit values {C[0], C[1], ...,
      C[n]},\n            and Key, K (the KEK).\n   Outputs: Plaintext, n 64-bit values
      {P[0], P[1], ..., P[n]}.\n   1) Initialize variables.\n       Set A = C[0]\n
      \      For i = 1 to n\n           R[i] = C[i]\n   2) Calculate intermediate
      values.\n       For j = 5 to 0\n           For i = n to 1\n               B
      = Camellia-1(K, (A ^ t) | R[i]) where t = n*j+i\n               A = MSB(64,
      B)\n               R[i] = LSB(64, B)\n   3) Output results.\n   If A is an appropriate
      initial value (see Section 3.4),\n   Then\n       For i = 1 to n\n           P[i]
      = R[i]\n   Else\n       Return an error\n"
    title: 3.3.  Camellia Key Unwrap
  - contents:
    - "3.4.  Key Data Integrity -- the Initial Value\n   The initial value (IV) refers
      to the value assigned to A[0] in the\n   first step of the wrapping process.
      \ This value is used to obtain an\n   integrity check on the key data.  In the
      final step of the unwrapping\n   process, the recovered value of A[0] is compared
      to the expected\n   value of A[0].  If there is a match, the key is accepted
      as valid,\n   and the unwrapping algorithm returns it.  If there is not a match,\n
      \  then the key is rejected, and the unwrapping algorithm returns an\n   error.\n
      \  The exact properties achieved by this integrity check depend on the\n   definition
      of the initial value.  Different applications may call for\n   somewhat different
      properties; for example, whether there is need to\n   determine the integrity
      of key data throughout its lifecycle or just\n   when it is unwrapped.  This
      specification defines a default initial\n   value that supports integrity of
      the key data during the period it is\n   wrapped (in Section 3.4.1).  Provision
      is also made to support\n   alternative initial values (in Section 3.4.2).\n"
    - contents:
      - "3.4.1.  Default Initial Value\n   The default initial value (IV) is defined
        to be the hexadecimal\n   constant:\n      A[0] = IV = A6A6A6A6A6A6A6A6\n
        \  The use of a constant as the IV supports a strong integrity check on\n
        \  the key data during the period that it is wrapped.  If unwrapping\n   produces
        A[0] = A6A6A6A6A6A6A6A6, then the chance that the key data\n   is corrupt
        is 2^-64.  If unwrapping produces A[0] any other value,\n   then the unwrap
        must return an error and not return any key data.\n"
      title: 3.4.1.  Default Initial Value
    - contents:
      - "3.4.2.  Alternative Initial Values\n   When the key wrap is used as part
        of a larger key management protocol\n   or system, the desired scope for data
        integrity may be more than just\n   the key data or the desired duration for
        more than just the period\n   that it is wrapped.  Also, if the key data is
        not just a Camellia\n   key, it may not always be a multiple of 64 bits.  Alternative\n
        \  definitions of the initial value can be used to address such\n   problems.
        \ According to [RFC3394], NIST will define alternative\n   initial values
        in future key management publications as needed.  In\n   order to accommodate
        a set of alternatives that may evolve over time,\n   key wrap implementations
        that are not application-specific will\n   require some flexibility in the
        way that the initial value is set and\n   tested.\n"
      title: 3.4.2.  Alternative Initial Values
    title: 3.4.  Key Data Integrity -- the Initial Value
  title: 3.  Key Wrap Algorithm
- contents:
  - "4.  SMIMECapabilities Attribute\n   An S/MIME client SHOULD announce the set
    of cryptographic functions\n   it supports by using the S/MIME capabilities attribute.
    \ This\n   attribute provides a partial list of OIDs of cryptographic functions\n
    \  and MUST be signed by the client.  The functions' OIDs SHOULD be\n   logically
    separated in functional categories and MUST be ordered with\n   respect to their
    preference.\n   RFC 2633 [RFC2633], Section 2.5.2 defines the SMIMECapabilities\n
    \  signed attribute (defined as a SEQUENCE of SMIMECapability SEQUENCEs)\n   to
    be used to specify a partial list of algorithms that the software\n   announcing
    the SMIMECapabilities can support.\n   If an S/MIME client is required to support
    symmetric encryption with\n   Camellia, the capabilities attribute MUST contain
    the Camellia OID\n   specified above in the category of symmetric algorithms.
    \ The\n   parameter associated with this OID MUST be CamelliaSMimeCapability.\n
    \     CamelliaSMimeCapabilty ::= NULL\n   The SMIMECapability SEQUENCE representing
    Camellia MUST be DER-\n   encoded as the following hexadecimal strings:\n      Key
    Size                   Capability\n       128          30 0f 06 0b 2a 83 08 8c
    9a 4b 3d 01 01 01 02 05 00\n       196          30 0f 06 0b 2a 83 08 8c 9a 4b
    3d 01 01 01 03 05 00\n       256          30 0f 06 0b 2a 83 08 8c 9a 4b 3d 01
    01 01 04 05 00\n   When a sending agent creates an encrypted message, it has to
    decide\n   which type of encryption algorithm to use.  In general the decision\n
    \  process involves information obtained from the capabilities lists\n   included
    in messages received from the recipient, as well as other\n   information such
    as private agreements, user preferences, legal\n   restrictions, and so on.  If
    users require Camellia for symmetric\n   encryption, it MUST be supported by the
    S/MIME clients on both the\n   sending and receiving side, and it MUST be set
    in the user\n   preferences.\n"
  title: 4.  SMIMECapabilities Attribute
- contents:
  - "5.  Security Considerations\n   This document specifies the use of Camellia for
    encrypting the\n   content of a CMS message and for encrypting the symmetric key
    used to\n   encrypt the content of a CMS message, and the other mechanisms are\n
    \  the same as the existing ones.  Therefore, the security\n   considerations
    described in the CMS specifications [CMS][CMSALG] and\n   the AES key wrap algorithm
    [RFC3394] can be applied to this document.\n   No security problem has been found
    on Camellia [CRYPTREC][NESSIE].\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Intellectual Property Statement\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n
    \  The IETF has been notified of intellectual property rights claimed in\n   regard
    to some or all of the specification contained in this\n   document.  For more
    information consult the online list of claimed\n   rights.\n"
  title: 6.  Intellectual Property Statement
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [CamelliaSpec] Aoki, K., Ichikawa, T., Kanda,
      M., Matsui, M., Moriai,\n                  S., Nakajima, J., and Tokita, T.,
      \"Specification of\n                  Camellia - a 128-bit Block Cipher\".\n
      \                 http://info.isl.ntt.co.jp/camellia/\n   [CMS]          Housley,
      R., \"Cryptographic Message Syntax\", RFC 3369,\n                  August 2002.\n
      \  [CMSALG]       Housley, R., \"Cryptographic Message Syntax (CMS)\n                  Algorithms\",
      RFC 3370, August 2002.\n   [RFC2633]      Ramsdell, B., Editor, \"S/MIME Version
      3 Message\n                  Specification\", RFC 2633, June 1999.\n   [RFC3565]
      \     Schaad, J., \"Use of the Advanced Encryption Standard\n                  (AES)
      Encryption Algorithm in Cryptographic Message\n                  Syntax (CMS)\",
      RFC 3565, July 2003.\n   [RFC3394]      Schaad, J. and R. Housley, \"Advanced
      Encryption\n                  Standard (AES) Key Wrap Algorithm\", RFC 3394,\n
      \                 September 2002.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [DES]          National Institute of Standards
      and Technology.  FIPS\n                  Pub 46: Data Encryption Standard.  15
      January 1977.\n   [CamelliaTech] Aoki, K., Ichikawa, T., Kanda, M., Matsui,
      M., Moriai,\n                  S., Nakajima, J., and Tokita, T., \"Camellia:
      A 128-Bit\n                  Block Cipher Suitable for Multiple Platforms -
      Design\n                  and Analysis -\", In Selected Areas in Cryptography,\n
      \                 7th Annual International Workshop, SAC 2000, August\n                  2000,
      Proceedings, Lecture Notes in Computer Science\n                  2012, pp.39-56,
      Springer-Verlag, 2001.\n   [CRYPTREC]     Information-technology Promotion Agency
      (IPA), Japan,\n                  CRYPTREC.\n                  http://www.ipa.go.jp/security/enc/CRYPTREC/index-\n
      \                 e.html\n   [NESSIE]       New European Schemes for Signatures,
      Integrity and\n                  Encryption (NESSIE) project.\n                  http://www.cryptonessie.org\n
      \  [RFC2119]      Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - 'Appendix A  ASN.1 Module

    '
  - "CamelliaEncryptionAlgorithmInCMS\n    { iso(1) member-body(2) us(840) rsadsi(113549)
    pkcs(1)\n      pkcs9(9) smime(16) modules(0) id-mod-cms-camellia(23) }\n"
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
  - 'BEGIN

    '
  - '-- Camellia using CBC-chaining mode for key sizes of 128, 192, 256

    '
  - "id-camellia128-cbc OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011
    61 security(1)\n      algorithm(1) symmetric-encryption-algorithm(1)\n      camellia128-cbc(2)
    }\n"
  - "id-camellia192-cbc OBJECT IDENTIFIER ::=\n   { iso(1) member-body(2) 392 200011
    61 security(1)\n     algorithm(1) symmetric-encryption-algorithm(1)\n     camellia192-cbc(3)
    }\n"
  - "id-camellia256-cbc OBJECT IDENTIFIER ::=\n   { iso(1) member-body(2) 392 200011
    61 security(1)\n     algorithm(1) symmetric-encryption-algorithm(1)\n     camellia256-cbc(4)
    }\n"
  - '-- Camellia-IV is the parameter for all the above object identifiers.

    '
  - 'Camellia-IV ::= OCTET STRING (SIZE(16))

    '
  - '-- Camellia S/MIME Capabilty parameter for all the above object

    '
  - '-- identifiers.

    '
  - 'CamelliaSMimeCapability ::= NULL

    '
  - '-- Camellia Key Wrap Algorithm identifiers - Parameter is absent.

    '
  - "id-camellia128-wrap OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011
    61 security(1)\n      algorithm(1) key-wrap-algorithm(3)\n      camellia128-wrap(2)
    }\n"
  - "id-camellia192-wrap OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011
    61 security(1)\n      algorithm(1) key-wrap-algorithm(3)\n      camellia192-wrap(3)
    }\n"
  - "id-camellia256-wrap OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011
    61 security(1)\n      algorithm(1) key-wrap-algorithm(3)\n      camellia256-wrap(4)
    }\n"
  - 'END

    '
  title: Appendix A  ASN.1 Module
- contents:
  - "Authors' Addresses\n   Shiho Moriai\n   Sony Computer Entertainment Inc.\n   Phone:
    +81-3-6438-7523\n   Fax:   +81-3-6438-8629\n   EMail: camellia@isl.ntt.co.jp (Camellia
    team)\n          shiho@rd.scei.sony.co.jp (Shiho Moriai)\n   Akihiro Kato\n   NTT
    Software Corporation\n   Phone: +81-45-212-7934\n   Fax:   +81-45-212-9800\n   EMail:
    akato@po.ntts.co.jp\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assignees.\n   This document and the
    information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET
    SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,
    EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
    OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
