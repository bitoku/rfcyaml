- contents:
  - '               JavaScript Object Notation (JSON) Pointer

    '
  title: __initial_text__
- contents:
  - "Abstract\n   JSON Pointer defines a string syntax for identifying a specific
    value\n   within a JavaScript Object Notation (JSON) document.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6901.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . . .
    . . . . 2\n   3.  Syntax  . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . 2\n   4.  Evaluation  . . . . . . . . . . . . . . . . . . . . . . . . . .
    3\n   5.  JSON String Representation  . . . . . . . . . . . . . . . . . . 4\n
    \  6.  URI Fragment Identifier Representation  . . . . . . . . . . . . 5\n   7.
    \ Error Handling  . . . . . . . . . . . . . . . . . . . . . . . . 6\n   8.  Security
    Considerations . . . . . . . . . . . . . . . . . . . . 6\n   9.  Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . 7\n   10. References  . . . .
    . . . . . . . . . . . . . . . . . . . . . . 7\n     10.1.  Normative References
    . . . . . . . . . . . . . . . . . . . 7\n     10.2.  Informative References .
    . . . . . . . . . . . . . . . . . 7\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification defines JSON Pointer, a string syntax
    for\n   identifying a specific value within a JavaScript Object Notation\n   (JSON)
    document [RFC4627].  JSON Pointer is intended to be easily\n   expressed in JSON
    string values as well as Uniform Resource\n   Identifier (URI) [RFC3986] fragment
    identifiers.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   This
    specification expresses normative syntax rules using Augmented\n   Backus-Naur
    Form (ABNF) [RFC5234] notation.\n"
  title: 2.  Conventions
- contents:
  - "3.  Syntax\n   A JSON Pointer is a Unicode string (see [RFC4627], Section 3)\n
    \  containing a sequence of zero or more reference tokens, each prefixed\n   by
    a '/' (%x2F) character.\n   Because the characters '~' (%x7E) and '/' (%x2F) have
    special\n   meanings in JSON Pointer, '~' needs to be encoded as '~0' and '/'\n
    \  needs to be encoded as '~1' when these characters appear in a\n   reference
    token.\n   The ABNF syntax of a JSON Pointer is:\n      json-pointer    = *( \"/\"
    reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped
    \      = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~')
    are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n
    \       ; representing '~' and '/', respectively\n   It is an error condition
    if a JSON Pointer value does not conform to\n   this syntax (see Section 7).\n
    \  Note that JSON Pointers are specified in characters, not as bytes.\n"
  title: 3.  Syntax
- contents:
  - "4.  Evaluation\n   Evaluation of a JSON Pointer begins with a reference to the
    root\n   value of a JSON document and completes with a reference to some value\n
    \  within the document.  Each reference token in the JSON Pointer is\n   evaluated
    sequentially.\n   Evaluation of each reference token begins by decoding any escaped\n
    \  character sequence.  This is performed by first transforming any\n   occurrence
    of the sequence '~1' to '/', and then transforming any\n   occurrence of the sequence
    '~0' to '~'.  By performing the\n   substitutions in this order, an implementation
    avoids the error of\n   turning '~01' first into '~1' and then into '/', which
    would be\n   incorrect (the string '~01' correctly becomes '~1' after\n   transformation).\n
    \  The reference token then modifies which value is referenced according\n   to
    the following scheme:\n   o  If the currently referenced value is a JSON object,
    the new\n      referenced value is the object member with the name identified
    by\n      the reference token.  The member name is equal to the token if it\n
    \     has the same number of Unicode characters as the token and their\n      code
    points are byte-by-byte equal.  No Unicode character\n      normalization is performed.
    \ If a referenced member name is not\n      unique in an object, the member that
    is referenced is undefined,\n      and evaluation fails (see below).\n   o  If
    the currently referenced value is a JSON array, the reference\n      token MUST
    contain either:\n      *  characters comprised of digits (see ABNF below; note
    that\n         leading zeros are not allowed) that represent an unsigned\n         base-10
    integer value, making the new referenced value the\n         array element with
    the zero-based index identified by the\n         token, or\n      *  exactly the
    single character \"-\", making the new referenced\n         value the (nonexistent)
    member after the last array element.\n   The ABNF syntax for array indices is:\n
    \  array-index = %x30 / ( %x31-39 *(%x30-39) )\n                 ; \"0\", or digits
    without a leading \"0\"\n   Implementations will evaluate each reference token
    against the\n   document's contents and will raise an error condition if it fails
    to\n   resolve a concrete value for any of the JSON pointer's reference\n   tokens.
    \ For example, if an array is referenced with a non-numeric\n   token, an error
    condition will be raised.  See Section 7 for details.\n   Note that the use of
    the \"-\" character to index an array will always\n   result in such an error
    condition because by definition it refers to\n   a nonexistent array element.
    \ Thus, applications of JSON Pointer need\n   to specify how that character is
    to be handled, if it is to be\n   useful.\n   Any error condition for which a
    specific action is not defined by the\n   JSON Pointer application results in
    termination of evaluation.\n"
  title: 4.  Evaluation
- contents:
  - "5.  JSON String Representation\n   A JSON Pointer can be represented in a JSON
    string value.  Per\n   [RFC4627], Section 2.5, all instances of quotation mark
    '\"' (%x22),\n   reverse solidus '\\' (%x5C), and control (%x00-1F) characters
    MUST be\n   escaped.\n   Note that before processing a JSON string as a JSON Pointer,\n
    \  backslash escape sequences must be unescaped.\n   For example, given the JSON
    document\n   {\n      \"foo\": [\"bar\", \"baz\"],\n      \"\": 0,\n      \"a/b\":
    1,\n      \"c%d\": 2,\n      \"e^f\": 3,\n      \"g|h\": 4,\n      \"i\\\\j\":
    5,\n      \"k\\\"l\": 6,\n      \" \": 7,\n      \"m~n\": 8\n   }\n   The following
    JSON strings evaluate to the accompanying values:\n    \"\"           // the whole
    document\n    \"/foo\"       [\"bar\", \"baz\"]\n    \"/foo/0\"     \"bar\"\n
    \   \"/\"          0\n    \"/a~1b\"      1\n    \"/c%d\"       2\n    \"/e^f\"
    \      3\n    \"/g|h\"       4\n    \"/i\\\\j\"      5\n    \"/k\\\"l\"      6\n
    \   \"/ \"         7\n    \"/m~0n\"      8\n"
  title: 5.  JSON String Representation
- contents:
  - "6.  URI Fragment Identifier Representation\n   A JSON Pointer can be represented
    in a URI fragment identifier by\n   encoding it into octets using UTF-8 [RFC3629],
    while percent-encoding\n   those characters not allowed by the fragment rule in
    [RFC3986].\n   Note that a given media type needs to specify JSON Pointer as its\n
    \  fragment identifier syntax explicitly (usually, in its registration\n   [RFC6838]).
    \ That is, just because a document is JSON does not imply\n   that JSON Pointer
    can be used as its fragment identifier syntax.  In\n   particular, the fragment
    identifier syntax for application/json is\n   not JSON Pointer.\n   Given the
    same example document as above, the following URI fragment\n   identifiers evaluate
    to the accompanying values:\n    #            // the whole document\n    #/foo
    \       [\"bar\", \"baz\"]\n    #/foo/0      \"bar\"\n    #/           0\n    #/a~1b
    \      1\n    #/c%25d      2\n    #/e%5Ef      3\n    #/g%7Ch      4\n    #/i%5Cj
    \     5\n    #/k%22l      6\n    #/%20        7\n    #/m~0n       8\n"
  title: 6.  URI Fragment Identifier Representation
- contents:
  - "7.  Error Handling\n   In the event of an error condition, evaluation of the
    JSON Pointer\n   fails to complete.\n   Error conditions include, but are not
    limited to:\n   o  Invalid pointer syntax\n   o  A pointer that references a nonexistent
    value\n   This specification does not define how errors are handled.  An\n   application
    of JSON Pointer SHOULD specify the impact and handling of\n   each type of error.\n
    \  For example, some applications might stop pointer processing upon an\n   error,
    while others may attempt to recover from missing values by\n   inserting default
    ones.\n"
  title: 7.  Error Handling
- contents:
  - "8.  Security Considerations\n   A given JSON Pointer is not guaranteed to reference
    an actual JSON\n   value.  Therefore, applications using JSON Pointer should anticipate\n
    \  this situation by defining how a pointer that does not resolve ought\n   to
    be handled.\n   Note that JSON pointers can contain the NUL (Unicode U+0000)\n
    \  character.  Care is needed not to misinterpret this character in\n   programming
    languages that use NUL to mark the end of a string.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgements\n   The following individuals contributed ideas, feedback,
    and wording to\n   this specification:\n      Mike Acar, Carsten Bormann, Tim
    Bray, Jacob Davies, Martin J.\n      Duerst, Bjoern Hoehrmann, James H. Manger,
    Drew Perttula, and\n      Julian Reschke.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n
      \             10646\", STD 63, RFC 3629, November 2003.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC4627]
      \ Crockford, D., \"The application/json Media Type for\n              JavaScript
      Object Notation (JSON)\", RFC 4627, July 2006.\n   [RFC5234]  Crocker, D. and
      P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\",
      STD 68, RFC 5234, January 2008.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC6838]  Freed, N., Klensin, J., and T.
      Hansen, \"Media Type\n              Specifications and Registration Procedures\",
      BCP 13,\n              RFC 6838, January 2013.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Paul C. Bryan (editor)\n   Salesforce.com\n   Phone: +1
    604 783 1481\n   EMail: pbryan@anode.ca\n   Kris Zyp\n   SitePen (USA)\n   Phone:
    +1 650 968 8787\n   EMail: kris@sitepen.com\n   Mark Nottingham (editor)\n   Akamai\n
    \  EMail: mnot@mnot.net\n"
  title: Authors' Addresses
