- contents:
  - ''
  title: __initial_text__
- contents:
  - "Support for Short-Term, Automatically Renewed (STAR) Certificates in the\n          Automated
    Certificate Management Environment (ACME)\n"
  title: Support for Short-Term, Automatically Renewed (STAR) Certificates in the
- contents:
  - "Abstract\n   Public key certificates need to be revoked when they are compromised,\n
    \  that is, when the associated private key is exposed to an\n   unauthorized
    entity.  However, the revocation process is often\n   unreliable.  An alternative
    to revocation is issuing a sequence of\n   certificates, each with a short validity
    period, and terminating the\n   sequence upon compromise.  This memo proposes
    an Automated\n   Certificate Management Environment (ACME) extension to enable
    the\n   issuance of Short-Term, Automatically Renewed (STAR) X.509\n   certificates.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8739.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Name Delegation Use Case\n
    \    1.2.  Terminology\n     1.3.  Conventions Used in This Document\n   2.  Protocol
    Flow\n     2.1.  Bootstrap\n     2.2.  Auto Renewal\n     2.3.  Termination\n
    \  3.  Protocol Details\n     3.1.  ACME Extensions\n       3.1.1.  Extending
    the Order Resource\n       3.1.2.  Canceling an Auto-renewal Order\n     3.2.
    \ Capability Discovery\n     3.3.  Fetching the Certificates\n     3.4.  Negotiating
    an Unauthenticated GET\n     3.5.  Computing notBefore and notAfter of STAR Certificates\n
    \      3.5.1.  Example\n   4.  Operational Considerations\n     4.1.  The Meaning
    of \"Short Term\" and the Impact of Skewed Clocks\n     4.2.  Impact on Certificate
    Transparency (CT) Logs\n     4.3.  HTTP Caching and Dependability\n   5.  IANA
    Considerations\n     5.1.  New Registries\n     5.2.  New Error Types\n     5.3.
    \ New Fields in Order Objects\n     5.4.  Fields in the \"auto-renewal\" Object
    within an Order Object\n     5.5.  New Fields in the \"meta\" Object within a
    Directory Object\n     5.6.  Fields in the \"auto-renewal\" Object within a Directory\n
    \          Metadata Object\n     5.7.  Cert-Not-Before and Cert-Not-After HTTP
    Headers\n   6.  Security Considerations\n     6.1.  No Revocation\n     6.2.  Denial-of-Service
    Considerations\n     6.3.  Privacy Considerations\n   7.  References\n     7.1.
    \ Normative References\n     7.2.  Informative References\n   Acknowledgments\n
    \  Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The ACME protocol [RFC8555] automates the process of issuing
    a\n   certificate to a named entity (an Identifier Owner or IdO).\n   Typically,
    but not always, the identifier is a domain name.\n   If the IdO wishes to obtain
    a string of short-term certificates\n   originating from the same private key
    (see [TOPALOVIC] about why\n   using short-lived certificates might be preferable
    to explicit\n   revocation), she must go through the whole ACME protocol each
    time a\n   new short-term certificate is needed, e.g., every 2-3 days.  If done\n
    \  this way, the process would involve frequent interactions between the\n   registration
    function of the ACME Certification Authority (CA) and\n   the identity provider
    infrastructure (e.g., DNS, web servers),\n   therefore making the issuance of
    short-term certificates exceedingly\n   dependent on the reliability of both.\n
    \  This document presents an extension of the ACME protocol that\n   optimizes
    this process by making short-term certificates first-class\n   objects in the
    ACME ecosystem.  Once the Order for a string of short-\n   term certificates is
    accepted, the CA is responsible for publishing\n   the next certificate at an
    agreed upon URL before the previous one\n   expires.  The IdO can terminate the
    automatic renewal before the\n   negotiated deadline if needed, e.g., on key compromise.\n
    \  For a more generic treatment of STAR certificates, readers are\n   referred
    to [SHORT-TERM-CERTS].\n"
  - contents:
    - "1.1.  Name Delegation Use Case\n   The proposed mechanism can be used as a
      building block of an\n   efficient name-delegation protocol, for example, one
      that exists\n   between a Content Distribution Network (CDN) or a cloud provider
      and\n   its customers [STAR-DELEGATION].  At any time, the service customer\n
      \  (i.e., the IdO) can terminate the delegation by simply instructing\n   the
      CA to stop the automatic renewal and letting the currently active\n   certificate
      expire shortly thereafter.\n   Note that in the name delegation use case, the
      delegated entity needs\n   to access the auto-renewed certificate without being
      in possession of\n   the ACME account key that was used for initiating the STAR
      issuance.\n   This leads to the optional use of unauthenticated GET in this\n
      \  protocol (Section 3.4).\n"
    title: 1.1.  Name Delegation Use Case
  - contents:
    - "1.2.  Terminology\n   IdO     Identifier Owner, the owner of an identifier,
      e.g., a domain\n           name, a telephone number, etc.\n   STAR    Short-Term,
      Automatically Renewed X.509 certificates.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]
      when, and only when, they appear in all\n   capitals, as shown here.\n"
    title: 1.3.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Protocol Flow\n   The following subsections describe the three main phases
    of the\n   protocol:\n   *  Bootstrap: the IdO asks an ACME CA to create a short-term,\n
    \     automatically renewed (STAR) certificate (Section 2.1);\n   *  Auto-renewal:
    the ACME CA periodically reissues the short-term\n      certificate and posts
    it to the star-certificate URL\n      (Section 2.2);\n   *  Termination: the IdO
    requests the ACME CA to discontinue the\n      automatic renewal of the certificate
    (Section 2.3).\n"
  - contents:
    - "2.1.  Bootstrap\n   The IdO, in its role as an ACME client, requests the CA
      to issue a\n   STAR certificate, i.e., one that:\n   *  Has a short validity,
      e.g., 24 to 72 hours.  Note that the exact\n      definition of \"short\" depends
      on the use case;\n   *  Is automatically renewed by the CA for a certain period
      of time;\n   *  Is downloadable from a (highly available) location.\n   Other
      than that, the ACME protocol flows as usual between IdO and CA.\n   In particular,
      IdO is responsible for satisfying the requested ACME\n   challenges until the
      CA is willing to issue the requested\n   certificate.  Per normal ACME processing,
      the IdO is given back an\n   Order resource associated with the STAR certificate
      to be used in\n   subsequent interaction with the CA (e.g., if the certificate
      needs to\n   be terminated.)\n   The bootstrap phase ends when the ACME CA updates
      the Order resource\n   to include the URL for the issued STAR certificate.\n"
    title: 2.1.  Bootstrap
  - contents:
    - "2.2.  Auto Renewal\n   The CA issues the initial certificate after the authorization\n
      \  completes successfully.  It then automatically reissues the\n   certificate
      using the same Certificate Signing Request (CSR) (and\n   therefore the same
      identifier and public key) before the previous one\n   expires and publishes
      it to the URL that was returned to the IdO at\n   the end of the bootstrap phase.
      \ The certificate user, which could be\n   either the IdO itself or a delegated
      third party as described in\n   [STAR-DELEGATION], obtains the certificate (Section
      3.3) and uses it.\n   The auto-renewal process (Figure 1) goes on until either:\n
      \  *  IdO explicitly terminates the automatic renewal (Section 2.3); or\n   *
      \ Automatic renewal expires.\n      Certificate             ACME/STAR\n      User
      \                   Server\n      |     Retrieve cert     |                     [...]\n
      \     |     Retrieve cert     |                      |\n      |     Retrieve
      cert     |                      |\n                           Figure 1: Auto-renewal\n"
    title: 2.2.  Auto Renewal
  - contents:
    - "2.3.  Termination\n   The IdO may request early termination of the STAR certificate
      by\n   sending a cancellation request to the Order resource as described in\n
      \  Section 3.1.2.  After the CA receives and verifies the request, it\n   shall:\n
      \  *  Cancel the automatic renewal process for the STAR certificate;\n   *  Change
      the certificate publication resource to return an error\n      indicating the
      termination of the issuance;\n   *  Change the status of the Order to \"canceled\".\n
      \  Note that it is not necessary to explicitly revoke the short-term\n   certificate.\n
      \     Certificate                                     ACME/STAR\n      User
      \                   IdO                     Server\n      |              Retrieve
      cert                    |\n      |              Error: autoRenewalCanceled       |\n
      \                          Figure 2: Termination\n"
    title: 2.3.  Termination
  title: 2.  Protocol Flow
- contents:
  - "3.  Protocol Details\n   This section describes the protocol details, namely
    the extensions to\n   the ACME protocol required to issue STAR certificates.\n"
  - contents:
    - "3.1.  ACME Extensions\n   This protocol extends the ACME protocol to allow
      for automatically\n   renewed Orders.\n"
    - contents:
      - "3.1.1.  Extending the Order Resource\n   The Order resource is extended with
        a new \"auto-renewal\" object that\n   MUST be present for STAR certificates.
        \ The \"auto-renewal\" object has\n   the following structure:\n   *  start-date
        (optional, string): The earliest date of validity of\n      the first certificate
        issued, in [RFC3339] format.  When omitted,\n      the start date is as soon
        as authorization is complete.\n   *  end-date (required, string): The latest
        date of validity of the\n      last certificate issued, in [RFC3339] format.\n
        \  *  lifetime (required, integer): The maximum validity period of each\n
        \     STAR certificate, an integer that denotes a number of seconds.\n      This
        is a nominal value that does not include any extra validity\n      time due
        to server or client adjustment (see below).\n   *  lifetime-adjust (optional,
        integer): The amount of \"left pad\"\n      added to each STAR certificate,
        an integer that denotes a number\n      of seconds.  The default is 0.  If
        present, the value of the\n      notBefore field that would otherwise appear
        in the STAR\n      certificates is pre-dated by the specified number of seconds.
        \ See\n      Section 4.1 for why a client might want to use this control,
        and\n      Section 3.5 for how the effective certificate lifetime is\n      computed.
        \ The value reflected by the server, together with the\n      value of the
        lifetime attribute, can be used by the client as a\n      hint to configure
        its polling timer.\n   *  allow-certificate-get (optional, boolean): See Section
        3.4.\n   These attributes are included in a POST message when creating the\n
        \  Order as part of the object encoded as \"payload\".  They are returned\n
        \  when the Order has been created.  The ACME server MAY adjust them at\n
        \  will according to its local policy (see also Section 3.2).\n   The optional
        notBefore and notAfter fields defined in Section 7.1.3\n   of [RFC8555] MUST
        NOT be present in a STAR Order.  If they are\n   included, the server MUST
        return an error with status code 400 (Bad\n   Request) and type \"malformedRequest\".\n
        \  Section 7.1.6 of [RFC8555] defines the following values for the Order\n
        \  resource's status: \"pending\", \"ready\", \"processing\", \"valid\", and\n
        \  \"invalid\".  In the case of auto-renewal Orders, the status MUST be\n
        \  \"valid\" as long as STAR certificates are being issued.  This document\n
        \  adds a new status value: \"canceled\" (see Section 3.1.2).\n   A STAR certificate
        is by definition a dynamic resource, i.e., it\n   refers to an entity that
        varies over time.  Instead of overloading\n   the semantics of the \"certificate\"
        attribute, this document defines a\n   new attribute, \"star-certificate\",
        to be used instead of\n   \"certificate\".\n   *  star-certificate (optional,
        string): A URL for the (rolling) STAR\n      certificate that has been issued
        in response to this Order.\n"
      title: 3.1.1.  Extending the Order Resource
    - contents:
      - "3.1.2.  Canceling an Auto-renewal Order\n   An important property of the
        auto-renewal Order is that it can be\n   canceled by the IdO with no need
        for certificate revocation.  To\n   cancel the Order, the ACME client sends
        a POST to the Order URL as\n   shown in Figure 3.\n     POST /acme/order/ogfr8EcolOT
        HTTP/1.1\n     Host: example.com\n     Content-Type: application/jose+json\n
        \    {\n       \"protected\": base64url({\n         \"alg\": \"ES256\",\n
        \        \"kid\": \"https://example.com/acme/acct/gw06UNhKfOve\",\n         \"nonce\":
        \"Alc00Ap6Rt7GMkEl3L1JX5\",\n         \"url\": \"https://example.com/acme/order/ogfr8EcolOT\"\n
        \      }),\n       \"payload\": base64url({\n         \"status\": \"canceled\"\n
        \      }),\n       \"signature\": \"g454e3hdBlkT4AEw...nKePnUyZTjGtXZ6H\"\n
        \    }\n                 Figure 3: Canceling an Auto-renewal Order\n   After
        a successful cancellation, the server MUST NOT issue any\n   additional certificates
        for this Order.\n   When the Order is canceled, the server:\n   *  MUST update
        the status of the Order resource to \"canceled\" and\n      MUST set an appropriate
        \"expires\" date;\n   *  MUST respond with 403 (Forbidden) to any requests
        to the star-\n      certificate endpoint.  The response SHOULD provide additional\n
        \     information using a problem document [RFC7807] with type\n      \"urn:ietf:params:acme:error:autoRenewalCanceled\".\n
        \  Issuing a cancellation for an Order that is not in \"valid\" state is\n
        \  not allowed.  A client MUST NOT send such a request, and a server\n   MUST
        return an error response with status code 400 (Bad Request) and\n   type \"urn:ietf:params:acme:error:autoRenewalCancellationInvalid\".\n
        \  The state machine described in Section 7.1.6 of [RFC8555] is extended\n
        \  as illustrated in Figure 4.\n       pending --------------+\n          |
        \                 |\n          | All authz        |\n          | \"valid\"
        \         |\n          V                  |\n        ready ---------------+\n
        \         |                  |\n          | Receive          |\n          |
        finalize         |\n          | request          |\n          V                  |\n
        \     processing ------------+\n          |                  |\n          |
        First            |\n          | certificate      | Error or\n          | issued
        \          | Authorization failure\n          |                  |\n          |
        \                 V\n          |               invalid\n          V\n        valid----------------+\n
        \         |                  |\n          | STAR             |\n          |
        Certificate      | Natural\n          | canceled         | Expiration\n          V
        \                 |\n       canceled             ='=\n             Figure
        4: State Transitions for STAR Order Objects\n   Explicit certificate revocation
        using the revokeCert interface\n   (Section 7.6 of [RFC8555]) is not supported
        for STAR certificates.  A\n   server receiving a revocation request for a
        STAR certificate MUST\n   return an error response with status code 403 (Forbidden)
        and type\n   \"urn:ietf:params:acme:error:autoRenewalRevocationNotSupported\".\n"
      title: 3.1.2.  Canceling an Auto-renewal Order
    title: 3.1.  ACME Extensions
  - contents:
    - "3.2.  Capability Discovery\n   In order to support the discovery of STAR capabilities,
      the \"meta\"\n   field inside the directory object defined in Section 9.7.6
      of\n   [RFC8555] is extended with a new \"auto-renewal\" object.  The \"auto-\n
      \  renewal\" object MUST be present if the server supports STAR.  Its\n   structure
      is as follows:\n   *  min-lifetime (required, integer): Minimum acceptable value
      for\n      auto-renewal lifetime, in seconds.\n   *  max-duration (required,
      integer): Maximum allowed delta between\n      the end-date and start-date attributes
      of the Order's auto-renewal\n      object.\n   *  allow-certificate-get (optional,
      boolean): See Section 3.4.\n   An example directory object advertising STAR
      support with one-day\n   min-lifetime and one-year max-duration and supporting
      certificate\n   fetching with an HTTP GET is shown in Figure 5.\n    {\n       \"new-nonce\":
      \"https://example.com/acme/new-nonce\",\n       \"new-account\": \"https://example.com/acme/new-account\",\n
      \      \"new-order\": \"https://example.com/acme/new-order\",\n       \"new-authz\":
      \"https://example.com/acme/new-authz\",\n       \"revoke-cert\": \"https://example.com/acme/revoke-cert\",\n
      \      \"key-change\": \"https://example.com/acme/key-change\",\n       \"meta\":
      {\n         \"terms-of-service\": \"https://example.com/acme/terms/2017-5-30\",\n
      \        \"website\": \"https://www.example.com/\",\n         \"caa-identities\":
      [\"example.com\"],\n         \"auto-renewal\": {\n           \"min-lifetime\":
      86400,\n           \"max-duration\":  31536000,\n           \"allow-certificate-get\":
      true\n         }\n       }\n    }\n                Figure 5: Directory Object
      with STAR Support\n"
    title: 3.2.  Capability Discovery
  - contents:
    - "3.3.  Fetching the Certificates\n   The certificate is fetched from the star-certificate
      endpoint with\n   POST-as-GET as per Section 7.4.2 of [RFC8555] unless the client
      and\n   server have successfully negotiated the \"unauthenticated GET\" option\n
      \  described in Section 3.4.  In such case, the client can simply issue\n   a
      GET to the star-certificate resource without authenticating itself\n   to the
      server as illustrated in Figure 6.\n     GET /acme/cert/g7m3ZQeTEqa HTTP/1.1\n
      \    Host: example.com\n     Accept: application/pem-certificate-chain\n     HTTP/1.1
      200 OK\n     Content-Type: application/pem-certificate-chain\n     Link: <https://example.com/acme/some-directory>;rel=\"index\"\n
      \    Cert-Not-Before: Thu, 3 Oct 2019 00:00:00 GMT\n     Cert-Not-After: Thu,
      10 Oct 2019 00:00:00 GMT\n     -----BEGIN CERTIFICATE-----\n     [End-entity
      certificate contents]\n     -----END CERTIFICATE-----\n     -----BEGIN CERTIFICATE-----\n
      \    [Issuer certificate contents]\n     -----END CERTIFICATE-----\n     -----BEGIN
      CERTIFICATE-----\n     [Other certificate contents]\n     -----END CERTIFICATE-----\n
      \      Figure 6: Fetching a STAR Certificate with Unauthenticated GET\n   The
      server SHOULD include the \"Cert-Not-Before\" and \"Cert-Not-After\"\n   HTTP
      header fields in the response.  When they exist, they MUST be\n   equal to the
      respective fields inside the end-entity certificate.\n   Their format is \"HTTP-date\"
      as defined in Section 7.1.1.2 of\n   [RFC7231].  Their purpose is to enable
      client implementations that do\n   not parse the certificate.\n   The following
      are further clarifications regarding usage of these\n   header fields as per
      Section 8.3.1 of [RFC7231].  All apply to both\n   headers.\n   *  This header
      field is a single value, not a list.\n   *  The header field is used only in
      responses to GET, HEAD, and POST-\n      as-GET requests, and only for MIME
      types that denote public key\n      certificates.\n   *  Header field semantics
      are independent of context.\n   *  The header field is not hop-by-hop.\n   *
      \ Intermediaries MAY insert or delete the value;\n   *  If an intermediary inserts
      the value, it MUST ensure that the\n      newly added value matches the corresponding
      value in the\n      certificate.\n   *  The header field is not appropriate
      for a Vary field.\n   *  The header field is allowed within message trailers.\n
      \  *  The header field is not appropriate within redirects.\n   *  The header
      field does not introduce additional security\n      considerations.  It discloses
      in a simpler form information that\n      is already available inside the certificate.\n
      \  To improve robustness, the next certificate MUST be made available by\n   the
      ACME CA at the URL indicated by \"star-certificate\" halfway\n   through the
      lifetime of the currently active certificate at the\n   latest.  It is worth
      noting that this has an implication in case of\n   cancellation; in fact, from
      the time the next certificate is made\n   available, the cancellation is not
      completely effective until the\n   \"next\" certificate also expires.  To avoid
      the client accidentally\n   entering a broken state, the notBefore of the \"next\"
      certificate MUST\n   be set so that the certificate is already valid when it
      is published\n   at the \"star-certificate\" URL.  Note that the server might
      need to\n   increase the auto-renewal lifetime-adjust value to satisfy the latter\n
      \  requirement.  For a detailed description of the renewal scheduling\n   logic,
      see Section 3.5.  For further rationale on the need for\n   adjusting the certificate
      validity, see Section 4.1.\n   The server MUST NOT issue any certificates for
      this Order with\n   notAfter after the auto-renewal end-date.\n   For expired
      Orders, the server MUST respond with 403 (Forbidden) to\n   any requests to
      the star-certificate endpoint.  The response SHOULD\n   provide additional information
      using a problem document [RFC7807]\n   with type \"urn:ietf:params:acme:error:autoRenewalExpired\".
      \ Note that\n   the Order resource's state remains \"valid\", as per the base
      protocol.\n"
    title: 3.3.  Fetching the Certificates
  - contents:
    - "3.4.  Negotiating an Unauthenticated GET\n   In order to enable the name delegation
      workflow defined in\n   [STAR-DELEGATION] and to increase the reliability of
      the STAR\n   ecosystem (see Section 4.3 for details), this document defines
      a\n   mechanism that allows a server to advertise support for accessing\n   star-certificate
      resources via unauthenticated GET (in addition to\n   POST-as-GET), and a client
      to enable this service with per-Order\n   granularity.\n   Specifically, a server
      states its availability to grant\n   unauthenticated access to a client's Order
      star-certificate by\n   setting the allow-certificate-get attribute to \"true\"
      in the auto-\n   renewal object of the meta field inside the directory object:\n
      \  *  allow-certificate-get (optional, boolean): If this field is\n      present
      and set to \"true\", the server allows GET (and HEAD)\n      requests to star-certificate
      URLs.\n   A client states its desire to access the issued star-certificate via\n
      \  unauthenticated GET by adding an allow-certificate-get attribute to\n   the
      auto-renewal object of the payload of its newOrder request and\n   setting it
      to \"true\".\n   *  allow-certificate-get (optional, boolean): If this field
      is\n      present and set to \"true\", the client requests the server to allow\n
      \     unauthenticated GET (and HEAD) to the star-certificate associated\n      with
      this Order.\n   If the server accepts the request, it MUST reflect the attribute\n
      \  setting in the resulting order object.\n   Note that even when the use of
      unauthenticated GET has been agreed\n   upon, the server MUST also allow POST-as-GET
      requests to the star-\n   certificate resource.\n"
    title: 3.4.  Negotiating an Unauthenticated GET
  - contents:
    - "3.5.  Computing notBefore and notAfter of STAR Certificates\n   We define \"nominal
      renewal date\" as the point in time when a new\n   short-term certificate for
      a given STAR Order is due.  Its cadence is\n   a multiple of the Order's auto-renewal
      lifetime that starts with the\n   issuance of the first short-term certificate
      and is upper-bounded by\n   the Order's auto-renewal end-date (Figure 7).\n
      \      T      - STAR Order's auto-renewal lifetime\n       end    - STAR Order's
      auto-renewal end-date\n       nrd[i] - nominal renewal date of the i-th STAR
      certificate\n                    .- T -.   .- T -.   .- T -.   .__.\n       -----------o---------o---------o---------o----X------->
      t\n                 nrd[0]    nrd[1]    nrd[2]    nrd[3]\n                       Figure
      7: Nominal Renewal Date\n   The rules to determine the notBefore and notAfter
      values of the i-th\n   STAR certificate are as follows:\n       notAfter  =
      min(nrd[i] + T, end)\n       notBefore = nrd[i] - max(adjust_client, adjust_server)\n
      \  Where \"adjust_client\" is the minimum value between the auto-renewal\n   lifetime-adjust
      value (\"la\"), optionally supplied by the client, and\n   the auto-renewal
      lifetime of each short-term certificate (\"T\");\n   \"adjust_server\" is the
      amount of padding added by the ACME server to\n   make sure that all certificates
      being published are valid at the time\n   of publication.  The server padding
      is a fraction (f) of T (i.e., f *\n   T with .5 <= f < 1; see Section 3.3):\n
      \      adjust_client = min(T, la)\n       adjust_server = f * T\n   Note that
      the ACME server MUST NOT set the notBefore of the first\n   STAR certificate
      to a date prior to the auto-renewal start-date.\n"
    - contents:
      - "3.5.1.  Example\n   Given a server that intends to publish the next STAR
        certificate\n   halfway through the lifetime of the previous one, and a STAR
        Order\n   with the following attributes:\n        \"auto-renewal\": {\n          \"start-date\":
        \"2019-01-10T00:00:00Z\",\n          \"end-date\": \"2019-01-20T00:00:00Z\",\n
        \         \"lifetime\": 345600,          // 4 days\n          \"lifetime-adjust\":
        259200    // 3 days\n        }\n   The amount of time that needs to be subtracted
        from each nominal\n   renewal date is 3 days, i.e., max(min(345600, 259200),
        345600 * .5).\n   The notBefore and notAfter of each short-term certificate
        are:\n              | notBefore            | notAfter             |\n              |
        2019-01-10T00:00:00Z | 2019-01-14T00:00:00Z |\n              | 2019-01-11T00:00:00Z
        | 2019-01-18T00:00:00Z |\n              | 2019-01-15T00:00:00Z | 2019-01-20T00:00:00Z
        |\n   The value of the notBefore is also the time at which the client\n   should
        expect the new certificate to be available from the star-\n   certificate
        endpoint.\n"
      title: 3.5.1.  Example
    title: 3.5.  Computing notBefore and notAfter of STAR Certificates
  title: 3.  Protocol Details
- contents:
  - '4.  Operational Considerations

    '
  - contents:
    - "4.1.  The Meaning of \"Short Term\" and the Impact of Skewed Clocks\n   \"Short
      Term\" is a relative concept; therefore, trying to define a\n   cutoff point
      that works in all cases would be a useless exercise.  In\n   practice, the expected
      lifetime of a STAR certificate will be counted\n   in minutes, hours, or days,
      depending on different factors: the\n   underlying requirements for revocation,
      how much clock\n   synchronization is expected among relying parties and the
      issuing CA,\n   etc.\n   Nevertheless, this section attempts to provide reasonable
      suggestions\n   for the Web use case, informed by current operational and research\n
      \  experience.\n   Acer et al. [ACER] find that one of the main causes of \"HTTPS
      error\"\n   warnings in browsers is misconfigured client clocks.  In particular,\n
      \  they observe that roughly 95% of the \"severe\" clock skews -- the 6.7%\n
      \  of clock-related breakage reports that account for clients that are\n   more
      than 24 hours behind -- happen to be within 6-7 days.\n   In order to avoid
      these spurious warnings about a not yet valid\n   server certificate, site owners
      could use the auto-renewal lifetime-\n   adjust attribute to control the effective
      lifetime of their Web-\n   facing certificates.  The exact number depends on
      the percentage of\n   the \"clock-skewed\" population that the site owner expects
      to protect\n   -- 5 days cover 97.3%, 7 days cover 99.6% -- as well as the nominal\n
      \  auto-renewal lifetime of the STAR Order.  Note that exact choice is\n   also
      likely to depend on the kinds of client that are prevalent for a\n   given site
      or app -- for example, Android and Mac OS clients are\n   known to behave better
      than Windows clients.  These considerations\n   are clearly out of scope of
      this document.\n   In terms of security, STAR certificates and certificates
      with the\n   Online Certificate Status Protocol (OCSP) \"must-staple\" flag
      asserted\n   [RFC7633] can be considered roughly equivalent if the STAR\n   certificate's
      and the OCSP response's lifetimes are the same.  (Here,\n   \"must-staple\"
      refers to a certificate carrying a TLS feature\n   extension with the \"status_request\"
      extension identifier [RFC6066].)\n   Given OCSP responses can be cached, on
      average, for 4 days [STARK],\n   it is RECOMMENDED that a STAR certificate that
      is used on the Web has\n   an \"effective\" lifetime (excluding any adjustment
      to account for\n   clock skews) no longer than 4 days.\n"
    title: 4.1.  The Meaning of "Short Term" and the Impact of Skewed Clocks
  - contents:
    - "4.2.  Impact on Certificate Transparency (CT) Logs\n   Even in the highly unlikely
      case STAR becomes the only certificate\n   issuance model, discussion with the
      IETF TRANS Working Group and\n   implementers of Certificate Transparency (CT)
      logs suggests that\n   existing CT Log server implementations are capable of
      sustaining the\n   resulting 100-fold increase in ingestion rate.  Additionally,
      such a\n   future higher load could be managed with a variety of techniques\n
      \  (e.g., sharding by modulo of certificate hash, using \"smart\" load-\n   balancing
      CT proxies, etc.).  With regards to the increase in the log\n   size, current
      CT log growth is already being managed with schemes\n   like Chrome's Log Policy
      [OBRIEN], which allow Operators to define\n   their log life cycle, as well
      as allowing the CAs, User Agents,\n   Monitors, and any other interested entities
      to build in support for\n   that life cycle ahead of time.\n"
    title: 4.2.  Impact on Certificate Transparency (CT) Logs
  - contents:
    - "4.3.  HTTP Caching and Dependability\n   When using authenticated POST-as-GET,
      the HTTPS endpoint from where\n   the STAR certificate is fetched can't be easily
      replicated by an on-\n   path HTTP cache.  Reducing the caching properties of
      the protocol\n   makes STAR clients increasingly dependent on the ACME server\n
      \  availability.  This might be problematic given the relatively high\n   rate
      of client-server interactions in a STAR ecosystem, especially\n   when multiple
      endpoints (e.g., a high number of CDN edge nodes) end\n   up requesting the
      same certificate.  Clients and servers should\n   consider using the mechanism
      described in Section 3.4 to mitigate the\n   risk.\n   When using unauthenticated
      GET to fetch the STAR certificate, the\n   server SHALL use the appropriate
      cache directives to set the\n   freshness lifetime of the response (Section
      5.2 of [RFC7234]) such\n   that on-path caches will consider it stale before
      or at the time its\n   effective lifetime is due to expire.\n"
    title: 4.3.  HTTP Caching and Dependability
  title: 4.  Operational Considerations
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  New Registries\n   Per this document, IANA has created the following
      new registries:\n   *  ACME Order Auto-Renewal Fields (Section 5.4)\n   *  ACME
      Directory Metadata Auto-Renewal Fields (Section 5.6)\n   These registries are
      administered under a Specification Required\n   policy [RFC8126].\n"
    title: 5.1.  New Registries
  - contents:
    - "5.2.  New Error Types\n   Per this document, IANA has added the following entries
      to the \"ACME\n   Error Types\" registry:\n   | Type                              |
      Description       | Reference |\n   | autoRenewalCanceled               | The
      short-term    | RFC 8739  |\n   | autoRenewalExpired                | The short-term
      \   | RFC 8739  |\n   | autoRenewalCancellationInvalid    | A request to      |
      RFC 8739  |\n   | autoRenewalRevocationNotSupported | A request to      | RFC
      8739  |\n"
    title: 5.2.  New Error Types
  - contents:
    - "5.3.  New Fields in Order Objects\n   Per this document, IANA has added the
      following entries to the \"ACME\n   Order Object Fields\" registry:\n       |
      Field Name       | Field Type | Configurable | Reference |\n       | auto-renewal
      \    | object     | true         | RFC 8739  |\n       | star-certificate |
      string     | false        | RFC 8739  |\n"
    title: 5.3.  New Fields in Order Objects
  - contents:
    - "5.4.  Fields in the \"auto-renewal\" Object within an Order Object\n   The
      \"ACME Order Auto-Renewal Fields\" registry lists field names that\n   are defined
      for use in the JSON object included in the \"auto-renewal\"\n   field of an
      ACME order object.\n   Template:\n   *  Field name: The string to be used as
      a field name in the JSON\n      object\n   *  Field type: The type of value
      to be provided, e.g., string,\n      boolean, array of string\n   *  Configurable:
      Boolean indicating whether the server should accept\n      values provided by
      the client\n   *  Reference: Where this field is defined\n   Initial contents:
      The fields and descriptions defined in\n   Section 3.1.1.\n     | Field Name
      \           | Field Type | Configurable | Reference |\n     | start-date            |
      string     | true         | RFC 8739  |\n     | end-date              | string
      \    | true         | RFC 8739  |\n     | lifetime              | integer    |
      true         | RFC 8739  |\n     | lifetime-adjust       | integer    | true
      \        | RFC 8739  |\n     | allow-certificate-get | boolean    | true         |
      RFC 8739  |\n"
    title: 5.4.  Fields in the "auto-renewal" Object within an Order Object
  - contents:
    - "5.5.  New Fields in the \"meta\" Object within a Directory Object\n   Per this
      document, IANA has added the following entry to the \"ACME\n   Directory Metadata
      Fields\":\n                 | Field Name   | Field Type | Reference |\n                 |
      auto-renewal | object     | RFC 8739  |\n"
    title: 5.5.  New Fields in the "meta" Object within a Directory Object
  - contents:
    - "5.6.  Fields in the \"auto-renewal\" Object within a Directory Metadata\n      Object\n
      \  The \"ACME Directory Metadata Auto-Renewal Fields\" registry lists\n   field
      names that are defined for use in the JSON object included in\n   the \"auto-renewal\"
      field of an ACME directory \"meta\" object.\n   Template:\n   *  Field name:
      The string to be used as a field name in the JSON\n      object\n   *  Field
      type: The type of value to be provided, e.g., string,\n      boolean, array
      of string\n   *  Reference: Where this field is defined\n   Initial contents:
      The fields and descriptions defined in Section 3.2.\n            | Field Name
      \           | Field Type | Reference |\n            | min-lifetime          |
      integer    | RFC 8739  |\n            | max-duration          | integer    |
      RFC 8739  |\n            | allow-certificate-get | boolean    | RFC 8739  |\n"
    title: 5.6.  Fields in the "auto-renewal" Object within a Directory Metadata
  - contents:
    - "5.7.  Cert-Not-Before and Cert-Not-After HTTP Headers\n   The \"Message Headers\"
      registry has been updated with the following\n   additional values:\n    | Header
      Field Name | Protocol | Status   | Reference             |\n    | Cert-Not-Before
      \  | http     | standard | RFC 8739, Section 3.3 |\n    | Cert-Not-After    |
      http     | standard | RFC 8739, Section 3.3 |\n"
    title: 5.7.  Cert-Not-Before and Cert-Not-After HTTP Headers
  title: 5.  IANA Considerations
- contents:
  - '6.  Security Considerations

    '
  - contents:
    - "6.1.  No Revocation\n   STAR certificates eliminate an important security feature
      of PKI,\n   which is the ability to revoke certificates.  Revocation allows
      the\n   administrator to limit the damage done by a rogue node or an\n   adversary
      who has control of the private key.  With STAR\n   certificates, expiration
      replaces revocation so there is potential\n   for lack of timeliness in the
      revocation taking effect.  To that end,\n   see also the discussion on clock
      skew in Section 4.1.\n   It should be noted that revocation also has timeliness
      issues because\n   both Certificate Revocation Lists (CRLs) and OCSP responses
      have\n   nextUpdate fields that tell relying parties (RPs) how long they\n   should
      trust this revocation data.  These fields are typically set to\n   hours, days,
      or even weeks in the future.  Any revocation that\n   happens before the time
      in nextUpdate goes unnoticed by the RP.\n   One situation where the lack of
      explicit revocation could create a\n   security risk to the IdO is when the
      Order is created with a start-\n   date of some appreciable amount of time in
      the future.  Recall that\n   when authorizations have been fulfilled, the Order
      moves to the\n   \"valid\" state and the star-certificate endpoint is populated
      with the\n   first cert (Figure 4).  So, if an attacker manages to get hold
      of the\n   private key as well as the first (post-dated) certificate, there
      is a\n   time window in the future when they will be able to successfully\n
      \  impersonate the IdO.  Note that cancellation is pointless in this\n   case.
      \ In order to mitigate the described threat, it is RECOMMENDED\n   that IdO
      place their Orders at a time that is close to the Order's\n   start-date.\n
      \  More discussion of the security of STAR certificates is available in\n   [TOPALOVIC].\n"
    title: 6.1.  No Revocation
  - contents:
    - "6.2.  Denial-of-Service Considerations\n   STAR adds a new attack vector that
      increases the threat of denial-of-\n   service attacks, caused by the change
      to the CA's behavior.  Each\n   STAR request amplifies the resource demands
      upon the CA, where one\n   Order produces not one but potentially dozens or
      hundreds of\n   certificates, depending on the auto-renewal \"lifetime\" parameter.
      \ An\n   attacker can use this property to aggressively reduce the auto-\n   renewal
      \"lifetime\" (e.g., 1 second) jointly with other ACME attack\n   vectors identified
      in Section 10 of [RFC8555].  Other collateral\n   impact is related to the certificate
      endpoint resource where the\n   client can retrieve the certificates periodically.
      \ If this resource\n   is external to the CA (e.g., a hosted web server), the
      previous\n   attack will be reflected to that resource.\n   Mitigation recommendations
      from ACME still apply, but some of them\n   need to be adjusted.  For example,
      applying rate limiting to the\n   initial request, due to the nature of the
      auto-renewal behavior,\n   cannot solve the above problem.  The CA server needs
      complementary\n   mitigation, and specifically, it SHOULD enforce a minimum
      value on\n   auto-renewal \"lifetime\".  Alternatively, the CA can set a rate
      limit\n   for internal certificate generation processes.  Note that this limit\n
      \  has to take account of already scheduled renewal issuances as well as\n   new
      incoming requests.\n"
    title: 6.2.  Denial-of-Service Considerations
  - contents:
    - "6.3.  Privacy Considerations\n   In order to avoid correlation of certificates
      by account, if\n   unauthenticated GET is negotiated (Section 3.4), the recommendation\n
      \  in Section 10.5 of [RFC8555] regarding the choice of URL structure\n   applies,
      i.e., servers SHOULD choose URLs of certificate resources in\n   a non-guessable
      way, for example, using capability URLs\n   [W3C.CAPABILITY-URLS].\n"
    title: 6.3.  Privacy Considerations
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <https://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI
      10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC7807]  Nottingham, M. and E. Wilde, \"Problem Details for HTTP\n              APIs\",
      RFC 7807, DOI 10.17487/RFC7807, March 2016,\n              <https://www.rfc-editor.org/info/rfc7807>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8555]  Barnes, R., Hoffman-Andrews,
      J., McCarney, D., and J.\n              Kasten, \"Automatic Certificate Management
      Environment\n              (ACME)\", RFC 8555, DOI 10.17487/RFC8555, March 2019,\n
      \             <https://www.rfc-editor.org/info/rfc8555>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [ACER]     Acer, M.E., Stark, E., Felt, A.P.,
      Fahl, S., Bhargava, R.,\n              Dev, B., Braithwaite, M., Sleevi, R.,
      and P. Tabriz,\n              \"Where the Wild Warnings Are: Root Causes of
      Chrome HTTPS\n              Certificate Errors\", DOI 10.1145/3133956.3134007,
      October\n              2017, <https://acmccs.github.io/papers/p1407-acerA.pdf>.\n
      \  [OBRIEN]   O'Brien, D. and R. Sleevi, \"Chromium Certificate\n              Transparency
      Policy\", April 2017,\n              <https://github.com/chromium/ct-policy>.\n
      \  [RFC6066]  Eastlake 3rd, D., \"Transport Layer Security (TLS)\n              Extensions:
      Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066, January
      2011,\n              <https://www.rfc-editor.org/info/rfc6066>.\n   [RFC7633]
      \ Hallam-Baker, P., \"X.509v3 Transport Layer Security (TLS)\n              Feature
      Extension\", RFC 7633, DOI 10.17487/RFC7633,\n              October 2015, <https://www.rfc-editor.org/info/rfc7633>.\n
      \  [SHORT-TERM-CERTS]\n              Nir, Y., Fossati, T., Sheffer, Y., and
      T. Eckert,\n              \"Considerations For Using Short Term Certificates\",
      Work\n              in Progress, Internet-Draft, draft-nir-saag-star-01, 5\n
      \             March 2018,\n              <https://tools.ietf.org/html/draft-nir-saag-star-01>.\n
      \  [STAR-DELEGATION]\n              Sheffer, Y., Lopez, D., Pastor, A., and
      T. Fossati, \"An\n              ACME Profile for Generating Delegated STAR Certificates\",\n
      \             Work in Progress, Internet-Draft, draft-ietf-acme-star-\n              delegation-03,
      8 March 2020, <https://tools.ietf.org/html/\n              draft-ietf-acme-star-delegation-03>.\n
      \  [STARK]    Stark, E., Huang, L.S., Israni, D., Jackson, C., and D.\n              Boneh,
      \"The case for prefetching and prevalidating TLS\n              server certificates\",
      February 2012,\n              <https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-\n
      \             prefetch.html>.\n   [TOPALOVIC]\n              Topalovic, E.,
      Saeta, B., Huang, L.S., Jackson, C., and D.\n              Boneh, \"Towards
      Short-Lived Certificates\", 2012,\n              <https://www.ieee-security.org/TC/W2SP/2012/papers/\n
      \             w2sp12-final9.pdf>.\n   [W3C.CAPABILITY-URLS]\n              Tennison,
      J., \"Good Practices for Capability URLs\", W3C\n              First Public
      Working Draft, Latest version available at\n              <https://www.w3.org/TR/capability-urls/>,
      February 2014,\n              <https://www.w3.org/TR/2014/WD-capability-urls-20140218>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   This work is partially supported by the European Commission
    under\n   Horizon 2020 grant agreement no. 688421 Measurement and Architecture\n
    \  for a Middleboxed Internet (MAMI).  This support does not imply\n   endorsement.\n
    \  Thanks to Ben Kaduk, Richard Barnes, Roman Danyliw, Jon Peterson,\n   Eric
    Rescorla, Ryan Sleevi, Sean Turner, Alexey Melnikov, Adam Roach,\n   Martin Thomson,
    and Mehmet Ersue for helpful comments and discussions\n   that have shaped this
    document.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Yaron Sheffer\n   Intuit\n   Email: yaronf.ietf@gmail.com\n
    \  Diego Lopez\n   Telefonica I+D\n   Email: diego.r.lopez@telefonica.com\n   Oscar
    Gonzalez de Dios\n   Telefonica I+D\n   Email: oscar.gonzalezdedios@telefonica.com\n
    \  Antonio Agustin Pastor Perales\n   Telefonica I+D\n   Email: antonio.pastorperales@telefonica.com\n
    \  Thomas Fossati\n"
  title: Authors' Addresses
