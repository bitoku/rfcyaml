- title: __initial_text__
  contents:
  - "        Adding Explicit Congestion Notification (ECN) Capability\n          \
    \              to TCP's SYN/ACK Packets\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   The proposal in this document is Experimental.  While it may be\n\
    \   deployed in the current Internet, it does not represent a consensus\n   that\
    \ this is the best possible mechanism for the use of Explicit\n   Congestion Notification\
    \ (ECN) in TCP SYN/ACK packets.\n   This document describes an optional, experimental\
    \ modification to RFC\n   3168 to allow TCP SYN/ACK packets to be ECN-Capable.\
    \  For TCP, RFC\n   3168 specifies setting an ECN-Capable codepoint on data packets,\
    \ but\n   not on SYN and SYN/ACK packets.  However, because of the high cost to\n\
    \   the TCP transfer of having a SYN/ACK packet dropped, with the\n   resulting\
    \ retransmission timeout, this document describes the use of\n   ECN for the SYN/ACK\
    \ packet itself, when sent in response to a SYN\n   packet with the two ECN flags\
    \ set in the TCP header, indicating a\n   willingness to use ECN.  Setting the\
    \ initial TCP SYN/ACK packet as\n   ECN-Capable can be of great benefit to the\
    \ TCP connection, avoiding\n   the severe penalty of a retransmission timeout\
    \ for a connection that\n   has not yet started placing a load on the network.\
    \  The TCP responder\n   (the sender of the SYN/ACK packet) must reply to a report\
    \ of an ECN-\n   marked SYN/ACK packet by resending a SYN/ACK packet that is not\
    \ ECN-\n   Capable.  If the resent SYN/ACK packet is acknowledged, then the TCP\n\
    \   responder reduces its initial congestion window from two, three, or\n   four\
    \ segments to one segment, thereby reducing the subsequent load\n   from that\
    \ connection on the network.  If instead the SYN/ACK packet\n   is dropped, or\
    \ for some other reason the TCP responder does not\n   receive an acknowledgement\
    \ in the specified time, the TCP responder\n   follows TCP standards for a dropped\
    \ SYN/ACK packet (setting the\n   retransmission timer).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions and Terminology .....................................5\n  \
    \ 3. Specification ...................................................6\n    \
    \   3.1. SYN/ACK Packets Dropped in the Network ....................7\n      \
    \ 3.2. SYN/ACK Packets ECN-Marked in the Network .................8\n       3.3.\
    \ Management Interface .....................................10\n   4. Discussion\
    \ .....................................................11\n       4.1. Flooding\
    \ Attacks .........................................11\n       4.2. The TCP SYN\
    \ Packet .......................................11\n       4.3. SYN/ACK Packets\
    \ and Packet Size ..........................12\n       4.4. Response to ECN-Marking\
    \ of SYN/ACK Packets ...............12\n   5. Related Work ...................................................14\n\
    \   6. Performance Evaluation .........................................15\n  \
    \     6.1. The Costs and Benefits of Adding ECN-Capability ..........15\n    \
    \   6.2. An Evaluation of Different Responses to ECN-Marked\n            SYN/ACK\
    \ Packets ..........................................16\n       6.3. Experiments\
    \ ..............................................17\n   7. Security Considerations\
    \ ........................................18\n       7.1. \"Bad\" Routers or Middleboxes\
    \ .............................18\n       7.2. Congestion Collapse ......................................18\n\
    \   8. Conclusions ....................................................19\n  \
    \ 9. Acknowledgements ...............................................19\n   Appendix\
    \ A. Report on Simulations .................................20\n      A.1. Simulations\
    \ with RED in Packet Mode .......................20\n      A.2. Simulations with\
    \ RED in Byte Mode .........................25\n   Appendix B. Issues of Incremental\
    \ Deployment ......................28\n   Normative References ..............................................30\n\
    \   Informative References ............................................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TCP's congestion control mechanism has primarily used packet\
    \ loss as\n   the congestion indication, with packets dropped when buffers\n \
    \  overflow.  With such tail-drop mechanisms, the packet delay can be\n   high,\
    \ as the queue at bottleneck routers can be fairly large.\n   Dropping packets\
    \ only when the queue overflows, and having TCP react\n   only to such losses,\
    \ results in:\n   1) significantly higher packet delay;\n   2) unnecessarily many\
    \ packet losses; and\n   3) unfairness due to synchronization effects.\n   The\
    \ adoption of Active Queue Management (AQM) mechanisms allows\n   better control\
    \ of bottleneck queues [RFC2309].  This use of AQM has\n   the following potential\
    \ benefits:\n   1) better control of the queue, with reduced queuing delay;\n\
    \   2) fewer packet drops; and\n   3) better fairness because of fewer synchronization\
    \ effects.\n   With the adoption of ECN, performance may be further improved.\
    \  When\n   the router detects congestion before buffer overflow, the router can\n\
    \   provide a congestion indication either by dropping a packet or by\n   setting\
    \ the Congestion Experienced (CE) codepoint in the Explicit\n   Congestion Notification\
    \ (ECN) field in the IP header [RFC3168].  The\n   IETF has standardized the use\
    \ of the Congestion Experienced (CE)\n   codepoint in the IP header for routers\
    \ to indicate congestion.  For\n   incremental deployment and backwards compatibility,\
    \ the RFC on ECN\n   [RFC3168] specifies that routers may mark ECN-Capable packets\
    \ that\n   would otherwise have been dropped, using the Congestion Experienced\n\
    \   codepoint in the ECN field.  The use of ECN allows TCP to react to\n   congestion\
    \ while avoiding unnecessary retransmission timeouts.  Thus,\n   using ECN has\
    \ several benefits:\n   1) For short transfers, a TCP connection's congestion\
    \ window may be\n      small.  For example, if the current window contains only\
    \ one\n      packet, and that packet is dropped, TCP will have to wait for a\n\
    \      retransmission timeout to recover, reducing its overall\n      throughput.\
    \  Similarly, if the current window contains only a few\n      packets and one\
    \ of those packets is dropped, there might not be\n      enough duplicate acknowledgements\
    \ for a fast retransmission, and\n      the sender of the data packet might have\
    \ to wait for a delay of\n      several round-trip times (RTT) using Limited Transmit\
    \ [RFC3042].\n      With the use of ECN, short flows are less likely to have packets\n\
    \      dropped, sometimes avoiding unnecessary delays or costly\n      retransmission\
    \ timeouts.\n   2) While longer flows may not see substantially improved throughput\n\
    \      with the use of ECN, they may experience lower loss.  This may\n      benefit\
    \ TCP applications that are latency- and loss-sensitive,\n      because of the\
    \ avoidance of retransmissions.\n   RFC 3168 [RFC3168] specifies setting the ECN-Capable\
    \ codepoint on TCP\n   data packets, but not on TCP SYN and SYN/ACK packets. \
    \ RFC 3168\n   [RFC3168] specifies the negotiation of the use of ECN between the\
    \ two\n   TCP endpoints in the TCP SYN and SYN-ACK exchange, using flags in the\n\
    \   TCP header.  Erring on the side of being conservative, RFC 3168\n   [RFC3168]\
    \ does not specify the use of ECN for the first SYN/ACK\n   packet itself.  However,\
    \ because of the high cost to the TCP transfer\n   of having a SYN/ACK packet\
    \ dropped, with the resulting retransmission\n   timeout, this document specifies\
    \ the use of ECN for the SYN/ACK\n   packet itself.  This can be of great benefit\
    \ to the TCP connection,\n   avoiding the severe penalty of a retransmission timeout\
    \ for a\n   connection that has not yet started placing a load on the network.\n\
    \   The sender of the SYN/ACK packet must respond to a report of an ECN-\n   marked\
    \ SYN/ACK packet (a SYN/ACK packet with the CE codepoint set in\n   the ECN field\
    \ in the IP header) by sending a non-ECN-Capable SYN/ACK\n   packet, and by reducing\
    \ its initial congestion window from two,\n   three, or four segments to one segment,\
    \ reducing the subsequent load\n   from that connection on the network.\n   The\
    \ use of ECN for SYN/ACK packets has the following potential\n   benefits:\n \
    \  1) Avoidance of a retransmission timeout;\n   2) Improvement in the throughput\
    \ of short connections.\n   This document specifies a modification to RFC 3168\
    \ [RFC3168] to allow\n   TCP SYN/ACK packets to be ECN-Capable.  Section 3 contains\
    \ the\n   specification of the change, while Section 4 discusses some of the\n\
    \   issues, and Section 5 discusses related work.  Section 6 contains an\n   evaluation\
    \ of the specified change.\n"
- title: 2.  Conventions and Terminology
  contents:
  - "2.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   We use the following terminology from RFC 3168 [RFC3168]:\n\
    \   The ECN field in the IP header:\n   o  CE: the Congestion Experienced codepoint;\
    \ and\n   o  ECT: either one of the two ECN-Capable Transport codepoints.\n  \
    \ The ECN flags in the TCP header:\n   o  CWR: the Congestion Window Reduced flag;\
    \ and\n   o  ECE: the ECN-Echo flag.\n   ECN-setup packets:\n   o  ECN-setup SYN\
    \ packet: a SYN packet with the ECE and CWR flags;\n   o  ECN-setup SYN-ACK packet:\
    \ a SYN-ACK packet with ECE but not CWR.\n   In this document, we use the terms\
    \ \"initiator\" and \"responder\" to\n   refer to the sender of the SYN packet\
    \ and of the SYN-ACK packet,\n   respectively.\n"
- title: 3.  Specification
  contents:
  - "3.  Specification\n   This section specifies the modification to RFC 3168 [RFC3168]\
    \ to\n   allow TCP SYN/ACK packets to be ECN-Capable.\n   Section 6.1.1 of RFC\
    \ 3168 [RFC3168] states that \"A host MUST NOT set\n   ECT on SYN or SYN-ACK packets\"\
    .  In this section, we specify that a\n   TCP node may respond to an initial ECN-setup\
    \ SYN packet by setting\n   ECT in the responding ECN-setup SYN/ACK packet, indicating\
    \ to routers\n   that the SYN/ACK packet is ECN-Capable.  This allows a congested\n\
    \   router along the path to mark the packet instead of dropping the\n   packet\
    \ as an indication of congestion.\n   Assume that TCP node A transmits to TCP\
    \ node B an ECN-setup SYN\n   packet, indicating willingness to use ECN for this\
    \ connection.  As\n   specified by RFC 3168 [RFC3168], if TCP node B is willing\
    \ to use ECN,\n   node B responds with an ECN-setup SYN-ACK packet.\n"
- title: 3.1.  SYN/ACK Packets Dropped in the Network
  contents:
  - "3.1.  SYN/ACK Packets Dropped in the Network\n   Figure 1 shows an interchange\
    \ with the SYN/ACK packet dropped by a\n   congested router.  Node B waits for\
    \ a retransmission timeout, and\n   then retransmits the SYN/ACK packet.\n   \
    \   ---------------------------------------------------------------\n        \
    \ TCP Node A             Router                  TCP Node B\n         (initiator)\
    \                                   (responder)\n         ----------         \
    \    ------                  ----------\n         ECN-setup SYN packet --->\n\
    \                                          ECN-setup SYN packet --->\n       \
    \                        <--- ECN-setup SYN/ACK, possibly ECT\n              \
    \                                   3-second timer set\n                     \
    \        SYN/ACK dropped               .\n                                   \
    \                        .\n                                                 \
    \          .\n                                             3-second timer expires\n\
    \                                    <--- ECN-setup SYN/ACK, not ECT\n       \
    \  <--- ECN-setup SYN/ACK\n         Data/ACK --->\n                          \
    \                            Data/ACK --->\n                                 \
    \  <--- Data (one to four segments)\n      ---------------------------------------------------------------\n\
    \            Figure 1: SYN exchange with the SYN/ACK packet dropped\n   If the\
    \ SYN/ACK packet is dropped in the network, the responder (node\n   B) responds\
    \ by waiting three seconds for the retransmission timer to\n   expire [RFC2988].\
    \  If a SYN/ACK packet with the ECT codepoint is\n   dropped, the responder should\
    \ resend the SYN/ACK packet without the\n   ECN-Capable codepoint.  (Although\
    \ we are not aware of any middleboxes\n   that drop SYN/ACK packets that contain\
    \ an ECN-Capable codepoint in\n   the IP header, we have learned to design our\
    \ protocols defensively in\n   this regard [RFC3360].)\n   We note that if syn-cookies\
    \ were used by the responder (node B) in\n   the exchange in Figure 1, the responder\
    \ wouldn't set a timer upon\n   transmission of the SYN/ACK packet [SYN-COOK]\
    \ [RFC4987].  In this\n   case, if the SYN/ACK packet was lost, the initiator\
    \ (node A) would\n   have to timeout and retransmit the SYN packet in order to\
    \ trigger\n   another SYN-ACK.\n"
- title: 3.2.  SYN/ACK Packets ECN-Marked in the Network
  contents:
  - "3.2.  SYN/ACK Packets ECN-Marked in the Network\n   Figure 2 shows an interchange\
    \ with the SYN/ACK packet sent as ECN-\n   Capable, and ECN-marked instead of\
    \ dropped at the congested router.\n   This document specifies ECN+/TryOnce, which\
    \ differs from the original\n   proposal for ECN+ in [ECN+]; with ECN+/TryOnce,\
    \ if the TCP responder\n   is informed that the SYN/ACK was ECN-marked, the TCP\
    \ responder\n   immediately sends a SYN/ACK packet that is not ECN-Capable.  The\
    \ TCP\n   responder is only allowed to send data packets after the TCP\n   initiator\
    \ reports the receipt of a SYN/ACK packet that is not ECN-\n   marked.\n     \
    \ ---------------------------------------------------------------\n         TCP\
    \ Node A             Router                  TCP Node B\n         (initiator)\
    \                                   (responder)\n         ----------         \
    \    ------                  ----------\n         ECN-setup SYN packet --->\n\
    \                                         ECN-setup SYN packet --->\n        \
    \                               <--- ECN-setup SYN/ACK, ECT\n                \
    \                                3-second timer set\n                        \
    \    <--- Sets CE on SYN/ACK\n         <--- ECN-setup SYN/ACK, CE\n         ACK,\
    \ ECN-Echo --->\n                                                ACK, ECN-Echo\
    \ --->\n                                    Window reduced to one segment.\n \
    \                                  <--- ECN-setup SYN/ACK, not ECT\n         <---\
    \ ECN-setup SYN/ACK\n         Data/ACK, ECT --->\n                           \
    \                     Data/ACK, ECT --->\n                                 <---\
    \ Data, ECT (one segment only)\n      ---------------------------------------------------------------\n\
    \           Figure 2: SYN exchange with the SYN/ACK packet marked -\n        \
    \                         ECN+/TryOnce\n   If the initiator (node A) receives\
    \ a SYN/ACK packet that has been\n   ECN-marked by the congested router, with\
    \ the CE codepoint set, the\n   initiator restarts the retransmission timer. \
    \ The initiator responds\n   to the ECN-marked SYN/ACK packet by setting the ECN-Echo\
    \ flag in the\n   TCP header of the responding ACK packet.  The initiator uses\
    \ the\n   standard rules in setting the cumulative acknowledgement field in the\n\
    \   responding ACK packet.\n   The initiator does not advance from the \"SYN-Sent\"\
    \ to the\n   \"Established\" state until it receives a SYN/ACK packet that is\
    \ not\n   ECN-marked.\n   When the responder (node B) receives the ECN-Echo packet\
    \ reporting\n   the Congestion Experienced indication in the SYN/ACK packet, the\n\
    \   responder sets the initial congestion window to one segment, instead\n   of\
    \ two segments as allowed by [RFC2581], or three or four segments\n   allowed\
    \ by [RFC3390].  As illustrated in Figure 2, if the responder\n   (node B) receives\
    \ an ECN-Echo packet informing it of a Congestion\n   Experienced indication on\
    \ its SYN/ACK packet, the responder sends a\n   SYN/ACK packet that is not ECN-Capable,\
    \ in addition to setting the\n   initial window to one segment.  The responder\
    \ does not advance the\n   send sequence number.  The responder also sets the\
    \ retransmission\n   timer.  The responder follows RFC 2988 [RFC2988] in setting\
    \ the RTO\n   (retransmission timeout).\n   The TCP hosts follow the standard\
    \ specification for the response to\n   duplicate SYN/ACK packets (e.g., Section\
    \ 3.4 of RFC 793 [RFC793]).\n   We note that the mechanism in this document differs\
    \ from RFC 3168\n   [RFC3168], which specifies that \"the sending TCP MUST restart\
    \ the\n   retransmission timer on receiving the ECN-Echo packet when the\n   congestion\
    \ window is one\".  RFC 3168 [RFC3168] does not allow SYN/ACK\n   packets to be\
    \ ECN-Capable.  RFC 3168 [RFC3168] specifies that in\n   response to an ECN-Echo\
    \ packet, the TCP responder also sets the CWR\n   flag in the TCP header of the\
    \ next data packet sent, to acknowledge\n   its receipt of and reaction to the\
    \ ECN-Echo flag.  In contrast, in\n   response to an ECN-Echo packet acknowledging\
    \ the receipt of an ECN-\n   Capable SYN/ACK packet, the TCP responder doesn't\
    \ set the CWR flag,\n   but simply sends a SYN/ACK packet that is not ECN-Capable.\
    \  On\n   receiving the non-ECN-Capable SYN/ACK packet, the TCP initiator\n  \
    \ clears the ECN-Echo flag on replying packets.\n      ---------------------------------------------------------------\n\
    \         TCP Node A             Router                  TCP Node B\n        \
    \ (initiator)                                   (responder)\n         ----------\
    \             ------                  ----------\n         ECN-setup SYN packet\
    \ --->\n                                         ECN-setup SYN packet --->\n \
    \                                      <--- ECN-setup SYN/ACK, ECT\n         \
    \                   <--- Sets CE on SYN/ACK\n         <--- ECN-setup SYN/ACK,\
    \ CE\n         ACK, ECN-Echo --->\n                                          \
    \      ACK, ECN-Echo --->\n                                    Window reduced\
    \ to one segment.\n                                    <--- ECN-setup SYN/ACK,\
    \ not ECT\n                                                 3-second timer set\n\
    \                             SYN/ACK dropped               .\n              \
    \                                             .\n                            \
    \                               .\n                                          \
    \   3-second timer expires\n                                    <--- ECN-setup\
    \ SYN/ACK, not ECT\n         <--- ECN-setup SYN/ACK, not ECT\n         Data/ACK,\
    \ ECT --->\n                                                 Data/ACK, ECT --->\n\
    \                                  <--- Data, ECT (one segment only)\n      ---------------------------------------------------------------\n\
    \         Figure 3: SYN exchange with the first SYN/ACK packet marked\n      \
    \       and the second SYN/ACK packet dropped - ECN+/TryOnce\n   In contrast to\
    \ Figure 2, Figure 3 shows an interchange where the\n   first SYN/ACK packet is\
    \ ECN-marked and the second SYN/ACK packet is\n   dropped in the network.  As\
    \ in Figure 2, the TCP responder sets a\n   timer when the second SYN/ACK packet\
    \ is sent.  Figure 3 shows that if\n   the timer expires before the TCP responder\
    \ receives an\n   acknowledgement for the other end, the TCP responder resends\
    \ the\n   SYN/ACK packet, following the TCP standards.\n"
- title: 3.3.  Management Interface
  contents:
  - "3.3.  Management Interface\n   The TCP implementation using ECN-Capable SYN/ACK\
    \ packets should\n   include a management interface to allow the use of ECN to\
    \ be turned\n   off for SYN/ACK packets.  This is to deal with possible backwards\n\
    \   compatibility problems such as those discussed in Appendix B.\n"
- title: 4.  Discussion
  contents:
  - "4.  Discussion\n   The rationale for the specification in this document is the\n\
    \   following.  When node B receives a TCP SYN packet with ECN-Echo bit\n   set\
    \ in the TCP header, this indicates that node A is ECN-Capable.  If\n   node B\
    \ is also ECN-Capable, there are no obstacles to immediately\n   setting one of\
    \ the ECN-Capable codepoints in the IP header in the\n   responding TCP SYN/ACK\
    \ packet.\n   There can be a great benefit in setting an ECN-Capable codepoint\
    \ in\n   SYN/ACK packets, as is discussed further in [ECN+], and reported\n  \
    \ briefly in Section 5 below.  Congestion is most likely to occur in\n   the server-to-client\
    \ direction.  As a result, setting an ECN-Capable\n   codepoint in SYN/ACK packets\
    \ can reduce the occurrence of three-\n   second retransmission timeouts resulting\
    \ from the drop of SYN/ACK\n   packets.\n"
- title: 4.1.  Flooding Attacks
  contents:
  - "4.1.  Flooding Attacks\n   Setting an ECN-Capable codepoint in the responding\
    \ TCP SYN/ACK\n   packets does not raise any new or additional security\n   vulnerabilities.\
    \  For example, provoking servers or hosts to send\n   SYN/ACK packets to a third\
    \ party in order to perform a \"SYN/ACK\n   flood\" attack would be highly inefficient.\
    \  Third parties would\n   immediately drop such packets, since they would know\
    \ that they didn't\n   generate the TCP SYN packets in the first place.  Moreover,\
    \ such\n   SYN/ACK attacks would have the same signatures as the existing TCP\n\
    \   SYN attacks.  Provoking servers or hosts to reply with SYN/ACK\n   packets\
    \ in order to congest a certain link would also be highly\n   inefficient because\
    \ SYN/ACK packets are small in size.\n   However, the addition of ECN-Capability\
    \ to SYN/ACK packets could\n   allow SYN/ACK packets to persist for more hops\
    \ along a network path\n   before being dropped, thus adding somewhat to the ability\
    \ of a\n   SYN/ACK attack to flood a network link.\n"
- title: 4.2.  The TCP SYN Packet
  contents:
  - "4.2.  The TCP SYN Packet\n   There are several reasons why an ECN-Capable codepoint\
    \ must not be\n   set in the IP header of the initiating TCP SYN packet.  First,\
    \ when\n   the TCP SYN packet is sent, there are no guarantees that the other\n\
    \   TCP endpoint (node B in Figure 2) is ECN-Capable, or that it would be\n  \
    \ able to understand and react if the ECN CE codepoint was set by a\n   congested\
    \ router.\n   Second, the ECN-Capable codepoint in TCP SYN packets could be misused\n\
    \   by malicious clients to \"improve\" the well-known TCP SYN attack.  By\n \
    \  setting an ECN-Capable codepoint in TCP SYN packets, a malicious host\n   might\
    \ be able to inject a large number of TCP SYN packets through a\n   potentially\
    \ congested ECN-enabled router, congesting it even further.\n   For both these\
    \ reasons, we continue the restriction that the TCP SYN\n   packet must not have\
    \ the ECN-Capable codepoint in the IP header set.\n"
- title: 4.3.  SYN/ACK Packets and Packet Size
  contents:
  - "4.3.  SYN/ACK Packets and Packet Size\n   There are a number of router buffer\
    \ architectures that have smaller\n   dropping rates for small (SYN) packets than\
    \ for large (data) packets.\n   For example, for a Drop-Tail queue in units of\
    \ packets, where each\n   packet takes a single slot in the buffer regardless\
    \ of packet size,\n   small and large packets are equally likely to be dropped.\
    \  However,\n   for a Drop-Tail queue in units of bytes, small packets are less\n\
    \   likely to be dropped than are large ones.  Similarly, for Random\n   Early\
    \ Detection (RED) in packet mode, small and large packets are\n   equally likely\
    \ to be dropped or marked, while for RED in byte mode, a\n   packet's chance of\
    \ being dropped or marked is proportional to the\n   packet size in bytes.\n \
    \  For a congested router with an AQM mechanism in byte mode, where a\n   packet's\
    \ chance of being dropped or marked is proportional to the\n   packet size in\
    \ bytes, the drop or marking rate for TCP SYN/ACK\n   packets should generally\
    \ be low.  In this case, the benefit of making\n   SYN/ACK packets ECN-Capable\
    \ should be similarly moderate.  However,\n   for a congested router with a Drop-Tail\
    \ queue in units of packets or\n   with an AQM mechanism in packet mode, and with\
    \ no priority queuing\n   for smaller packets, small and large packets should\
    \ have the same\n   probability of being dropped or marked.  In such a case, making\n\
    \   SYN/ACK packets ECN-Capable should be of significant benefit.\n   We believe\
    \ that there are a wide range of behaviors in the real world\n   in terms of the\
    \ drop or mark behavior at routers as a function of\n   packet size (see Section\
    \ 10 of [Tools]).  We note that all of these\n   alternatives listed above are\
    \ available in the NS simulator (Drop-\n   Tail queues are by default in units\
    \ of packets, while the default for\n   RED queue management has been changed\
    \ from packet mode to byte mode).\n"
- title: 4.4.  Response to ECN-Marking of SYN/ACK Packets
  contents:
  - "4.4.  Response to ECN-Marking of SYN/ACK Packets\n   One question is why TCP\
    \ SYN/ACK packets should be treated differently\n   from other packets in terms\
    \ of the end node's response to an ECN-\n   marked packet.  Section 5 of RFC 3168\
    \ [RFC3168] specifies the\n   following:\n      Upon the receipt by an ECN-Capable\
    \ transport of a single CE\n      packet, the congestion control algorithms followed\
    \ at the end-\n      systems MUST be essentially the same as the congestion control\n\
    \      response to a *single* dropped packet.  For example, for ECN-\n      Capable\
    \ TCP the source TCP is required to halve its congestion\n      window for any\
    \ window of data containing either a packet drop or\n      an ECN indication.\n\
    \   In particular, Section 6.1.2 of RFC 3168 [RFC3168] specifies that\n   when\
    \ the TCP congestion window consists of a single packet and that\n   packet is\
    \ ECN-marked in the network, then the data sender must reduce\n   the sending\
    \ rate below one packet per round-trip time, by waiting for\n   one RTO before\
    \ sending another packet.  If the RTO was set to the\n   average round-trip time,\
    \ this would result in halving the sending\n   rate; because the RTO is in fact\
    \ larger than the average round-trip\n   time, the sending rate is reduced to\
    \ less than half of its previous\n   value.\n   TCP's congestion control response\
    \ to the *dropping* of a SYN/ACK\n   packet is to wait a default time before sending\
    \ another packet.  This\n   document argues that ECN gives end-systems a wider\
    \ range of possible\n   responses to the *marking* of a SYN/ACK packet, and that\
    \ waiting a\n   default time before sending another packet is not the desired\n\
    \   response.\n   On the conservative end, one could assume an effective congestion\n\
    \   window of one packet for the SYN/ACK packet, and respond to an ECN-\n   marked\
    \ SYN/ACK packet by reducing the sending rate to one packet\n   every two round-trip\
    \ times.  As an approximation, the TCP end node\n   could measure the round-trip\
    \ time T between the sending of the\n   SYN/ACK packet and the receipt of the\
    \ acknowledgement, and reply to\n   the acknowledgement of the ECN-marked SYN/ACK\
    \ packet by waiting T\n   seconds before sending a data packet.\n   However, we\
    \ note that for an ECN-marked SYN/ACK packet, halving the\n   *congestion window*\
    \ is not the same as halving the *sending rate*;\n   there is no \"sending rate\"\
    \ associated with an ECN-Capable SYN/ACK\n   packet, as such packets are only\
    \ sent as the first packet in a\n   connection from that host.  Further, a router's\
    \ marking of a SYN/ACK\n   packet is not affected by any past history of that\
    \ connection.\n   Adding ECN-Capability to SYN/ACK packets allows the response\
    \ of the\n   responder setting the initial congestion window to one packet,\n\
    \   instead of its allowed default value of two, three, or four packets.\n   The\
    \ responder sends a non-ECN-Capable SYN/ACK packet, and proceeds\n   with a cautious\
    \ sending rate of one data packet per round-trip time\n   after that SYN/ACK packet\
    \ is acknowledged.  This document argues that\n   this approach is useful to users,\
    \ with no dangers of congestion\n   collapse or of starvation of competing traffic.\
    \  This is discussed in\n   more detail below in Section 6.2.\n   We note that\
    \ if the data transfer is entirely from node A to node B,\n   there is still a\
    \ difference in performance between the original\n   mechanism ECN+ and the mechanism\
    \ ECN+/TryOnce specified in this\n   document.  In particular, with ECN+/TryOnce,\
    \ the TCP originator does\n   not send data packets until it has received a non-ECN-marked\
    \ SYN/ACK\n   packet from the other end.\n"
- title: 5.  Related Work
  contents:
  - "5.  Related Work\n   The addition of ECN-Capability to TCP's SYN/ACK packets\
    \ was initially\n   proposed in [ECN+].  The paper includes an extensive set of\n\
    \   simulation and testbed experiments to evaluate the effects of the\n   proposal,\
    \ using several Active Queue Management (AQM) mechanisms,\n   including Random\
    \ Early Detection (RED) [RED], Random Exponential\n   Marking (REM) [REM], and\
    \ Proportional Integrator (PI) [PI].  The\n   performance measures were the end-to-end\
    \ response times for each\n   request/response pair, and the aggregate throughput\
    \ on the bottleneck\n   link.  The end-to-end response time was computed as the\
    \ time from the\n   moment when the request for the file is sent to the server,\
    \ until\n   that file is successfully downloaded by the client.\n   The measurements\
    \ from [ECN+] show that setting an ECN-Capable\n   codepoint in the IP packet\
    \ header in TCP SYN/ACK packets\n   systematically improves performance with all\
    \ evaluated AQM schemes.\n   When SYN/ACK packets at a congested router are ECN-marked\
    \ instead of\n   dropped, this can avoid a long initial retransmission timeout,\n\
    \   improving the response time for the affected flow dramatically.\n   [ECN+]\
    \ shows that the impact on aggregate throughput can also be\n   quite significant,\
    \ because marking SYN ACK packets can prevent larger\n   flows from suffering\
    \ long timeouts before being \"admitted\" into the\n   network.  In addition,\
    \ the testbed measurements from [ECN+] show that\n   web servers setting the ECN-Capable\
    \ codepoint in TCP SYN/ACK packets\n   could serve more requests.\n   As a final\
    \ step, [ECN+] explores the coexistence of flows that do and\n   don't set the\
    \ ECN-Capable codepoint in TCP SYN/ACK packets.  The\n   results in [ECN+] show\
    \ that both types of flows can coexist, with\n   some performance degradation\
    \ for flows that don't use ECN+.  Flows\n   that do use ECN+ improve their end-to-end\
    \ performance.  At the same\n   time, the performance degradation for flows that\
    \ don't use ECN+, as a\n   result of the flows that do use ECN+, increases as\
    \ a greater fraction\n   of flows use ECN+.\n"
- title: 6.  Performance Evaluation
  contents:
  - '6.  Performance Evaluation

    '
- title: 6.1.  The Costs and Benefits of Adding ECN-Capability
  contents:
  - "6.1.  The Costs and Benefits of Adding ECN-Capability\n   [ECN+] explores the\
    \ costs and benefits of adding ECN-Capability to\n   SYN/ACK packets with both\
    \ simulations and experiments.  The addition\n   of ECN-Capability to SYN/ACK\
    \ packets could be of significant benefit\n   for those ECN connections that would\
    \ have had the SYN/ACK packet\n   dropped in the network, and for which the ECN-Capability\
    \ would allow\n   the SYN/ACK to be marked rather than dropped.\n   The percent\
    \ of SYN/ACK packets on a link can be quite high.  In\n   particular, measurements\
    \ on links dominated by web traffic indicate\n   that 15-20% of the packets can\
    \ be SYN/ACK packets [SCJO01].\n   The benefit of adding ECN-Capability to SYN/ACK\
    \ packets depends in\n   part on the size of the data transfer.  The drop of a\
    \ SYN/ACK packet\n   can increase the download time of a short file by an order\
    \ of\n   magnitude, by requiring a three-second retransmission timeout.  For\n\
    \   longer-lived flows, the effect of a dropped SYN/ACK packet on file\n   download\
    \ time is less dramatic.  However, even for longer-lived\n   flows, the addition\
    \ of ECN-Capability to SYN/ACK packets can improve\n   the fairness among long-lived\
    \ flows, as newly arriving flows would be\n   less likely to have to wait for\
    \ retransmission timeouts.\n   One question that arises is what fraction of connections\
    \ would see\n   the benefit from making SYN/ACK packets ECN-Capable in a particular\n\
    \   scenario.  Specifically:\n   (1) What fraction of arriving SYN/ACK packets\
    \ are dropped at the\n       congested router when the SYN/ACK packets are not\
    \ ECN-Capable?\n   (2) Of those SYN/ACK packets that are dropped, what fraction\
    \ would\n       have been ECN-marked instead of dropped if the SYN/ACK packets\n\
    \       had been ECN-Capable?\n   To answer (1), it is necessary to consider not\
    \ only the level of\n   congestion but also the queue architecture at the congested\
    \ link.  As\n   described in Section 4 above, for some queue architectures, small\n\
    \   packets are less likely to be dropped than large ones.  In such an\n   environment,\
    \ SYN/ACK packets would have lower packet drop rates;\n   question (1) could not\
    \ necessarily be inferred from the overall\n   packet drop rate, but could be\
    \ answered by measuring the drop rate\n   for SYN/ACK packets directly.  In such\
    \ an environment, adding ECN-\n   Capability to SYN/ACK packets would be of less\
    \ dramatic benefit than\n   in environments where all packets are equally likely\
    \ to be dropped\n   regardless of packet size.\n   As question (2) implies, even\
    \ if all of the SYN/ACK packets were\n   ECN-Capable, there could still be some\
    \ SYN/ACK packets dropped\n   instead of marked at the congested link; the full\
    \ answer to question\n   (2) depends on the details of the queue management mechanism\
    \ at the\n   router.  If congestion is sufficiently bad, and the queue management\n\
    \   mechanism cannot prevent the buffer from overflowing, then SYN/ACK\n   packets\
    \ will be dropped rather than marked upon buffer overflow\n   whether or not they\
    \ are ECN-Capable.\n   For some AQM mechanisms, ECN-Capable packets are marked\
    \ instead of\n   dropped any time this is possible, that is, any time the buffer\
    \ is\n   not yet full.  For other AQM mechanisms however, such as the RED\n  \
    \ mechanism as recommended in [RED], packets are dropped rather than\n   marked\
    \ when the packet drop/mark rate exceeds a certain threshold,\n   e.g., 10%, even\
    \ if the packets are ECN-Capable.  For a router with\n   such an AQM mechanism,\
    \ when congestion is sufficiently severe to\n   cause a high drop/mark rate, some\
    \ SYN/ACK packets would be dropped\n   instead of marked whether or not they were\
    \ ECN-Capable.\n   Thus, the degree of benefit of adding ECN-Capability to SYN/ACK\n\
    \   packets depends not only on the overall packet drop rate in the\n   network,\
    \ but also on the queue management architecture at the\n   congested link.\n"
- title: 6.2.  An Evaluation of Different Responses to ECN-Marked SYN/ACK Packets
  contents:
  - "6.2.  An Evaluation of Different Responses to ECN-Marked SYN/ACK Packets\n  \
    \ This document specifies that the end node responds to the report of\n   an ECN-marked\
    \ SYN/ACK packet by setting the initial congestion window\n   to one segment,\
    \ instead of its possible default value of two to four\n   segments, and resending\
    \ a SYN/ACK packet that is not ECN-Capable.  We\n   call this ECN+/TryOnce.\n\
    \   However, Section 4 discussed two other possible responses to an ECN-\n   marked\
    \ SYN/ACK packet.  In ECN+, the original proposal from [ECN+],\n   the end node\
    \ responds to the report of an ECN-marked SYN/ACK packet\n   by setting the initial\
    \ congestion window to one segment and\n   immediately sending a data packet,\
    \ if it has one to send.  In\n   ECN+/Wait, the end node responds to the report\
    \ of an ECN-marked\n   SYN/ACK packet by setting the initial congestion window\
    \ to one\n   segment and waiting an RTT before sending a data packet.\n   Simulations\
    \ comparing the performance with Standard ECN (without\n   ECN-marked SYN/ACK\
    \ packets), ECN+, ECN+/Wait, and ECN/TryOnce show\n   little difference, in terms\
    \ of aggregate congestion, between ECN+ and\n   ECN+/Wait.  However, for some\
    \ scenarios with queues that are packet-\n   based rather than byte-based, and\
    \ with packet drop rates above 25%\n   without ECN+, the use of ECN+ or of ECN+/Wait\
    \ can more than double\n   the packet drop rates to greater than 50%.  The details\
    \ are given in\n   Tables 1 and 3 of Appendix A below.  ECN+/TryOnce does not\
    \ increase\n   the packet drop rate in scenarios of high congestion.  Therefore,\n\
    \   ECN+/TryOnce is superior to ECN+ or to ECN+/Wait, which both\n   significantly\
    \ increase the packet drop rate in scenarios of high\n   congestion.  At the same\
    \ time, ECN+/TryOnce gives a performance\n   improvement similar to that of ECN+\
    \ or ECN+/Wait (Tables 2 and 4 of\n   Appendix A).\n   Our conclusions are that\
    \ ECN+/TryOnce is safe, and has significant\n   benefits to the user, and avoids\
    \ the problems of ECN+ or ECN+/Wait\n   under extreme levels of congestion.  As\
    \ a consequence, this document\n   specifies the use of ECN+/TryOnce.\n   Note:\
    \ We only discovered the occasional congestion-related problems\n   of ECN+ and\
    \ of ECN+/Wait when re-running the simulations with an\n   updated version of\
    \ the ns-2 simulator, after the document had almost\n   completed the standardization\
    \ process.\n"
- title: 6.3.  Experiments
  contents:
  - "6.3.  Experiments\n   This section discusses experiments that would be useful\
    \ before a\n   widespread deployment of ECN-Capability for TCP SYN/ACK packets.\n\
    \   Section 7.1 below discusses some of the known deployment problems of\n   ECN,\
    \ in terms of routers or middleboxes that react inappropriately to\n   packets\
    \ that use ECN codepoints in the IP or TCP packet headers.  One\n   goal of a\
    \ measurement study of ECN-Capability for TCP SYN/ACK packets\n   would be to\
    \ determine if there were any routers or middleboxes that\n   react inappropriately\
    \ to TCP SYN/ACK packets containing an ECN-\n   Capable or CE codepoint in the\
    \ IP header.  A second goal of a\n   measurement study would be to check the deployment\
    \ status of older\n   TCP implementations that are ECN-Capable, but that don't\
    \ respond to\n   ECN-Capability for SYN/ACK packets.  (This is discussed in more\n\
    \   detail in Appendix B below.)\n   Following the discussion in Section 6.2,\
    \ an experimental study could\n   explore the use of ECN-Capability for TCP SYN/ACK\
    \ packets in highly\n   congested environments with ECN-Capable routers.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   TCP packets carrying the ECT codepoint in IP\
    \ headers can be marked\n   rather than dropped by ECN-Capable routers.  This\
    \ raises several\n   security concerns that we discuss below.\n"
- title: 7.1.  "Bad" Routers or Middleboxes
  contents:
  - "7.1.  \"Bad\" Routers or Middleboxes\n   There are a number of known deployment\
    \ problems from using ECN with\n   TCP traffic in the Internet.  The first reported\
    \ problem, dating back\n   to 2000, is of a small but decreasing number of routers\
    \ or\n   middleboxes that reset a TCP connection in response to TCP SYN\n   packets\
    \ using flags in the TCP header to negotiate ECN-Capability\n   [Kelson00] [RFC3360]\
    \ [MAF05].  Dave Thaler reported at the March 2007\n   IETF of two new problems\
    \ encountered by TCP connections using ECN;\n   the first of the two problems\
    \ concerns routers that crash when a TCP\n   data packet arrives with the ECN\
    \ field in the IP header with the\n   codepoint ECT(0) or ECT(1), indicating that\
    \ an ECN-Capable connection\n   has been established [SBT07].\n   While there\
    \ is no evidence that any routers or middleboxes drop\n   SYN/ACK packets that\
    \ contain an ECN-Capable or CE codepoint in the IP\n   header, such behavior cannot\
    \ be excluded.  (There seems to be a\n   number of routers or middleboxes that\
    \ drop TCP SYN packets that\n   contain known or unknown IP options (see figure\
    \ 1 of [MAF05].)  Thus,\n   as specified in Section 3, if a SYN/ACK packet with\
    \ the ECT or CE\n   codepoint is dropped, the TCP node should resend the SYN/ACK\
    \ packet\n   without the ECN-Capable codepoint.  There is also no evidence that\n\
    \   any routers or middleboxes crash when a SYN/ACK arrives with an ECN-\n   Capable\
    \ or CE codepoint in the IP header (over and above the routers\n   already known\
    \ to crash when a data packet arrives with either ECT(0)\n   or ECT(1)), but we\
    \ have not conducted any measurement studies of this\n   [F07].\n"
- title: 7.2.  Congestion Collapse
  contents:
  - "7.2.  Congestion Collapse\n   Because TCP SYN/ACK packets carrying an ECT codepoint\
    \ could be ECN-\n   marked instead of dropped at an ECN-Capable router, the concern\
    \ is\n   whether this can either invoke congestion or worsen performance in\n\
    \   highly congested scenarios.  However, after learning that a SYN/ACK\n   packet\
    \ was ECN-marked, the responder sends a SYN/ACK packet that is\n   not ECN-Capable;\
    \ if this SYN/ACK packet is dropped, the responder\n   then waits for a retransmission\
    \ timeout, as specified in the TCP\n   standards.  In addition, routers are free\
    \ to drop rather than mark\n   arriving packets in times of high congestion, regardless\
    \ of whether\n   the packets are ECN-Capable.  When congestion is very high and\
    \ a\n   router's buffer is full, the router has no choice but to drop rather\n\
    \   than to mark an arriving packet.\n   The simulations reported in Appendix\
    \ A show that even with demanding\n   traffic mixes dominated by short flows and\
    \ high levels of congestion,\n   the aggregate packet dropping rates are not significantly\
    \ different\n   with Standard ECN or with ECN+/TryOnce.  However, in our simulations,\n\
    \   we have one scenario where ECN+ or ECN+/Wait results in a\n   significantly\
    \ higher packet drop rate than ECN or ECN+/TryOnce\n   (Tables 1 and 3 in Appendix\
    \ A below).\n"
- title: 8.  Conclusions
  contents:
  - "8.  Conclusions\n   This document specifies a modification to RFC 3168 [RFC3168]\
    \ to allow\n   TCP nodes to send SYN/ACK packets as being ECN-Capable.  Making\
    \ the\n   SYN/ACK packet ECN-Capable avoids the high cost to a TCP transfer\n\
    \   when a SYN/ACK packet is dropped by a congested router, by avoiding\n   the\
    \ resulting retransmission timeout.  This improves the throughput\n   of short\
    \ connections.  This document specifies the ECN+/TryOnce\n   mechanism for ECN-Capability\
    \ for SYN/ACK packets, where the sender of\n   the SYN/ACK packet responds to\
    \ an ECN mark by reducing its initial\n   congestion window from two, three, or\
    \ four segments to one segment,\n   and sending a SYN/ACK packet that is not ECN-Capable.\
    \  The addition\n   of ECN-Capability to SYN/ACK packets is particularly beneficial\
    \ in\n   the server-to-client direction, where congestion is more likely to\n\
    \   occur.  In this case, the initial information provided by the ECN\n   marking\
    \ in the SYN/ACK packet enables the server to appropriately\n   adjust the initial\
    \ load it places on the network, while avoiding the\n   delay of a retransmission\
    \ timeout.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   We thank Anil Agarwal, Mark Allman, Remi Denis-Courmont,\
    \ Wesley Eddy,\n   Lars Eggert, Alfred Hoenes, Janardhan Iyengar, and Pasi Sarolahti\
    \ for\n   feedback on earlier working drafts of this document.  We thank Adam\n\
    \   Langley [L08] for contributing a patch for ECN+/TryOnce for the Linux\n  \
    \ development tree.\n"
- title: Appendix A.  Report on Simulations
  contents:
  - "Appendix A.  Report on Simulations\n   This section reports on simulations showing\
    \ the costs of adding ECN+\n   in highly congested scenarios.  This section also\
    \ reports on\n   simulations for a comparative evaluation between ECN, ECN+,\n\
    \   ECN+/Wait, and ECN+/TryOnce.\n   The simulations are run with a range of file-size\
    \ distributions,\n   using the PackMime traffic generator in the ns-2 simulator.\
    \  They all\n   use a heavy-tailed distribution of file sizes.  The simulations\n\
    \   reported in the tables below use a mean file size of 3 Kbytes, to\n   show\
    \ the results with a traffic mix with a large number of small\n   transfers. \
    \ Other simulations were run with mean file sizes of 5\n   Kbytes, 7 Kbytes, 14\
    \ Kbytes, and 17 Kbytes.  The title of each chart\n   gives the targeted average\
    \ load from the traffic generator.  Because\n   the simulations use a heavy-tailed\
    \ distribution of file sizes, and\n   run for only 85 seconds (including ten seconds\
    \ of warm-up time), the\n   actual load is often much smaller than the targeted\
    \ load.  The\n   congested link is 100 Mbps.  RED is run in gentle mode, and arriving\n\
    \   ECN-Capable packets are only dropped instead of marked if the buffer\n   is\
    \ full (and the router has no choice).\n   We explore three possible mechanisms\
    \ for a TCP node's response to a\n   report of an ECN-marked SYN/ACK packet. \
    \ With ECN+, the TCP node\n   sends a data packet immediately (with an initial\
    \ congestion window of\n   one segment).  With ECN+/Wait, the TCP node waits a\
    \ round-trip time\n   before sending a data packet; the responder already has\
    \ one\n   measurement of the round-trip time when the acknowledgement for the\n\
    \   SYN/ACK packet is received.  With ECN+/TryOnce, the mechanism\n   standardized\
    \ in this document, the TCP responder replies to a report\n   of an ECN-marked\
    \ SYN/ACK packet by sending a SYN/ACK packet that is\n   not ECN-Capable, and\
    \ reducing the initial congestion window to one\n   segment.\n   The simulation\
    \ scripts are available on [ECN-SYN], along with graphs\n   showing the distribution\
    \ of response times for the TCP connections.\n"
- title: A.1.  Simulations with RED in Packet Mode
  contents:
  - "A.1.  Simulations with RED in Packet Mode\n   The simulations with RED in packet\
    \ mode and with the queue in packets\n   show that ECN+ is useful in times of\
    \ moderate or high congestion.\n   However, for the simulations with a target\
    \ load of 125%, with a\n   packet loss rate of over 25% for ECN, ECN+ and ECN+/Wait\
    \ both result\n   in a packet loss rate of over 50%.  (In contrast, the packet\
    \ loss\n   rate with ECN+/TryOnce is less than that of ECN alone.)  For the\n\
    \   distribution of response times, the simulations show that ECN+,\n   ECN+/Wait,\
    \ and ECN+/TryOnce all significantly improve the response\n   times, when compared\
    \ to the response times with Standard ECN.\n   Table 1 shows the congestion levels\
    \ for simulations with RED in\n   packet mode, with a queue in packets.  To explore\
    \ a worst-case\n   scenario, these simulations use a traffic mix with an unrealistically\n\
    \   small flow size distribution, with a mean flow size of 3 Kbytes.  For\n  \
    \ each table showing a particular traffic load, the four rows show the\n   number\
    \ of packets dropped, the number of packets ECN-marked, the\n   aggregate packet\
    \ drop rate, and the aggregate throughput.  The four\n   columns show the simulations\
    \ with Standard ECN, ECN+, ECN+/Wait, and\n   ECN+/TryOnce.\n   These simulations\
    \ were run with RED set to mark instead of drop\n   packets any time that the\
    \ queue is not full.  This is a worst-case\n   scenario for ECN+ and its variants.\
    \  For the default implementation\n   of RED in the ns-2 simulator, when the average\
    \ queue size exceeds a\n   configured threshold, the router drops all arriving\
    \ packets.  For\n   scenarios with this RED mechanism, it is less likely that\
    \ ECN+ or one\n   of its variants would increase the average queue size above\
    \ the\n   configured threshold.\n   The usefulness of ECN+: The first thing to\
    \ observe is that for all of\n   the simulations, the use of ECN+ or ECN+/Wait\
    \ significantly increases\n   the number of packets marked.  In contrast, the\
    \ use of ECN+/TryOnce\n   significantly increases the number of packets marked\
    \ in the\n   simulations with moderate congestion, and gives a more moderate\n\
    \   increase in the number of packets marked for the simulations with\n   higher\
    \ levels of congestion.  However, the cumulative distribution\n   function (CDF)\
    \ in Table 2 shows that ECN+, ECN+/Wait, and\n   ECN+/TryOnce all improve response\
    \ times for all of the simulations,\n   with moderate or with larger levels of\
    \ congestion.\n   Little increase in congestion, sometimes: The second thing to\
    \ observe\n   is that for the simulations with low or moderate levels of congestion\n\
    \   (that is, with packet drop rates less than 10%), the use of ECN+,\n   ECN+/Wait,\
    \ and ECN+/TryOnce all decrease the aggregate packet drop\n   rate relative to\
    \ the simulations with ECN.  This makes sense, since\n   with low or moderate\
    \ levels of congestion, ECN+ allows SYN/ACK\n   packets to be marked instead of\
    \ dropped, and the use of ECN+ doesn't\n   add to the aggregate congestion.  However,\
    \ for the simulations with\n   packet drop rates of 15% or higher with ECN, the\
    \ use of ECN+ or\n   ECN+/Wait increases the aggregate packet drop rate, sometimes\
    \ even\n   doubling it.\n   Comparing ECN+, ECN+/Wait, and ECN+/TryOnce: The aggregate\
    \ packet\n   drop rate is generally higher with ECN+/Wait than with ECN+.  Thus,\n\
    \   there is no congestion-related reason to prefer ECN+/Wait over ECN+.\n   In\
    \ contrast, the aggregate packet drop rate with ECN+/TryOnce is\n   often significantly\
    \ lower than the aggregate packet drop rate with\n   either ECN, ECN+, or ECN+/Wait.\n\
    \      Target Load = 95%:\n                    ECN        ECN+     ECN+/Wait \
    \   ECN+/TryOnce\n                 -------     -------     -------      ----------\n\
    \      Dropped    20,516      11,226      11,735        16,755`\n      Marked\
    \     30,586      37,741      37,425        40,764\n      Loss rate   1.41%  \
    \     0.78%       0.81%         1.02%\n      Throughput   81%          81%   \
    \      81%           81%\n      Target Load = 110%:\n                    ECN \
    \       ECN+     ECN+/Wait    ECN+/TryOnce\n                 -------     -------\
    \     -------      ----------\n      Dropped    165,566     106,083     147,180\
    \       208,422\n      Marked     179,735     281,306     308,473       235,483\n\
    \      Loss rate    9.01%       6.12%       8.02%         6.89%\n      Throughput\
    \     92%         92%         92%           94%\n      Target Load = 125%:\n \
    \                   ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n          \
    \       -------     -------     -------      ----------\n      Dropped    600,628\
    \    1,746,768   2,176,530      625,552\n      Marked     418,433    1,166,450\
    \   1,164,932      439,847\n      Loss rate   25.45%       51.73%      56.87%\
    \       18.31%\n      Throughput     94%          98%         97%          95%\n\
    \      Target Load =  150%\n                    ECN        ECN+     ECN+/Wait\
    \    ECN+/TryOnce\n                 -------     -------     -------      ----------\n\
    \      Dropped  1,449,945  1,565,0517  1,563,0801     1,351,637\n      Marked\
    \     669,840     583,378     591,315       684,715\n      Loss rate    46.7%\
    \       59.0%       59.0%         32.7%\n      Throughput     88%         94%\
    \         94%           92%\n   Table 1:  Simulations with an average flow size\
    \ of 3 Kbytes, a 100\n             Mbps link, RED in packet mode, queue in packets\n\
    \      Target Load = 95%:\n      TIME:    10  100  200  300  400  500 1000 2000\
    \ 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.07 0.26 0.51 0.82 0.96 0.97 0.97 0.97 1.00 1.00\n      ECN+:\
    \  0.00 0.07 0.27 0.53 0.85 0.99 1.00 1.00 1.00 1.00 1.00\n      Wait:  0.00 0.07\
    \ 0.26 0.51 0.83 0.97 1.00 1.00 1.00 1.00 1.00\n      Once:  0.00 0.07 0.24 0.49\
    \ 0.83 0.97 1.00 1.00 1.00 1.00 1.00\n      Target Load = 110%:\n      TIME: \
    \   10  100  200  300  400  500 1000 2000 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.05 0.19 0.41 0.67 0.79 0.80 0.80 0.80 0.96 0.96\n      ECN+:\
    \  0.00 0.07 0.22 0.48 0.81 0.96 1.00 1.00 1.00 1.00 1.00\n      Wait:  0.00 0.05\
    \ 0.18 0.38 0.64 0.77 0.95 1.00 1.00 1.00 1.00\n      Once:  0.00 0.06 0.19 0.42\
    \ 0.70 0.86 0.95 0.96 0.96 0.99 0.99\n      Target Load = 125%:\n      TIME: \
    \   10  100  200  300  400  500 1000 2000 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.04 0.13 0.27 0.46 0.56 0.58 0.59 0.59 0.82 0.82\n      ECN+:\
    \  0.00 0.06 0.18 0.33 0.58 0.76 0.97 0.99 0.99 1.00 1.00\n      Wait:  0.00 0.01\
    \ 0.06 0.13 0.21 0.27 0.68 0.98 0.99 1.00 1.00\n      Once:  0.00 0.05 0.16 0.34\
    \ 0.58 0.73 0.85 0.87 0.87 0.95 0.96\n      Target Load = 150%:\n      TIME: \
    \   10  100  200  300  400  500 1000 2000 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.03 0.08 0.18 0.31 0.39 0.42 0.42 0.43 0.68 0.68\n      ECN+:\
    \  0.00 0.06 0.18 0.39 0.67 0.81 0.83 0.84 0.84 0.93 0.93\n      Wait:  0.00 0.06\
    \ 0.18 0.39 0.67 0.81 0.83 0.84 0.84 0.93 0.94\n      Once:  0.00 0.04 0.13 0.27\
    \ 0.46 0.59 0.72 0.75 0.75 0.88 0.88\n   Table 2:  The cumulative distribution\
    \ function (CDF) for transfer\n             times, for simulations with an average\
    \ flow size of 3\n             Kbytes, a 100 Mbps link, RED in packet mode, queue\
    \ in\n             packets  (the graphs are available from\n             \"http://www.icir.org/floyd/ecn-syn/\"\
    )\n      Target Load =  95%\n                    ECN        ECN+     ECN+/Wait\
    \    ECN+/TryOnce\n                 -------     -------     -------      ----------\n\
    \      Dropped      8,448       6,362       7,740      14,107\n      Marked  \
    \     9,891      16,787      17,456      16,132\n      Loss rate     5.5%    \
    \    4.3%        5.0%        5.0%\n      Throughput     78%         78%      \
    \   78%         81%\n      Target Load =  110%\n                    ECN      \
    \  ECN+     ECN+/Wait    ECN+/TryOnce\n                 -------     -------  \
    \   -------      ----------\n      Dropped     31,284      29,773      49,297\
    \      45,277\n      Marked      28,429      54,729      60,383      34,622\n\
    \      Loss rate    15.3%       15.2%       21.9%       13.6%\n      Throughput\
    \     97%         96%         96%         94%\n      Target Load =  125%\n   \
    \                 ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n            \
    \     -------     -------     -------      ----------\n      Dropped     61,433\
    \     176,682     214,096      75,612\n      Marked      44,408     119,728  \
    \   117,301      49,442\n      Loss rate    25.4%       51.9%       56.0%    \
    \   22.3%\n      Throughput     97%         98%         98%         96%\n    \
    \  Target Load =  150%\n                    ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n\
    \                 -------     -------     -------      ----------\n      Dropped\
    \    130,007     251,856     326,845     133,603\n      Marked      63,066   \
    \  146,757     147,239      66,444\n      Loss rate    42.5%       61.3%     \
    \  67.3%       31.7%\n      Throughput     93%         99%         99%       \
    \  94%\n   Table 3:  Simulations with an average flow size of 3 Kbytes, a 10\n\
    \             Mbps link, RED in packet mode, queue in packets\n      Target Load\
    \ = 95%:\n      TIME:    10  100  200  300  400  500 1000 2000 3000 4000 5000\n\
    \             ------------------------------------------------------\n      ECN:\
    \   0.00 0.05 0.18 0.42 0.70 0.86 0.88 0.88 0.88 0.98 0.98\n      ECN+:  0.00\
    \ 0.06 0.20 0.45 0.78 0.96 1.00 1.00 1.00 1.00 1.00\n      Wait:  0.00 0.05 0.18\
    \ 0.40 0.68 0.84 0.96 1.00 1.00 1.00 1.00\n      Once:  0.00 0.05 0.18 0.40 0.71\
    \ 0.88 0.96 0.97 0.97 0.99 0.99\n      Target Load = 110%:\n      TIME:    10\
    \  100  200  300  400  500 1000 2000 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.03 0.13 0.29 0.52 0.66 0.69 0.69 0.69 0.91 0.91\n      ECN+:\
    \  0.00 0.05 0.17 0.36 0.66 0.88 0.98 0.99 1.00 1.00 1.00\n      Wait:  0.00 0.02\
    \ 0.08 0.20 0.35 0.47 0.76 0.98 1.00 1.00 1.00\n      Once:  0.00 0.05 0.15 0.32\
    \ 0.58 0.75 0.88 0.90 0.90 0.97 0.97\n      Target Load = 125%:\n      TIME: \
    \   10  100  200  300  400  500 1000 2000 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.03 0.10 0.22 0.40 0.52 0.56 0.56 0.57 0.82 0.82\n      ECN+:\
    \  0.00 0.03 0.14 0.27 0.49 0.70 0.96 0.99 0.99 0.99 1.00\n      Wait:  0.00 0.00\
    \ 0.03 0.07 0.12 0.18 0.50 0.94 0.99 0.99 1.00\n      Once:  0.00 0.04 0.13 0.28\
    \ 0.51 0.66 0.81 0.84 0.84 0.94 0.94\n      Target Load = 150%:\n      TIME: \
    \   10  100  200  300  400  500 1000 2000 3000 4000 5000\n             ------------------------------------------------------\n\
    \      ECN:   0.00 0.02 0.07 0.15 0.28 0.38 0.42 0.42 0.43 0.67 0.68\n      ECN+:\
    \  0.00 0.00 0.00 0.00 0.01 0.05 0.68 0.83 0.95 0.97 0.98\n      Wait:  0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.10 0.62 0.83 0.93 0.97\n      Once:  0.00 0.03 0.11 0.24\
    \ 0.42 0.56 0.71 0.75 0.75 0.88 0.88\n   Table 4:  The cumulative distribution\
    \ function (CDF) for transfer\n             times, for simulations with an average\
    \ flow size of 3\n             Kbytes, a 10 Mbps link, RED in packet mode, queue\
    \ in\n             packets  (the graphs are available from\n             \"http://www.icir.org/floyd/ecn-syn/\"\
    )\n"
- title: A.2.  Simulations with RED in Byte Mode
  contents:
  - "A.2.  Simulations with RED in Byte Mode\n   Table 5 below shows simulations with\
    \ RED in byte mode and the queue\n   in bytes.  There is no significant increase\
    \ in aggregate congestion\n   with the use of ECN+, ECN+/Wait, or ECN+/TryOnce.\n\
    \   However, unlike the simulations with RED in packet mode, the\n   simulations\
    \ with RED in byte mode show little benefit from the use of\n   ECN+ or ECN+/Wait,\
    \ in that the packet marking rate with ECN+ or\n   ECN+/Wait is not much different\
    \ than the packet marking rate with\n   Standard ECN.  This is because with RED\
    \ in byte mode, small packets\n   like SYN/ACK packets are rarely dropped or marked\
    \ -- that is, there\n   is no drawback from the use of ECN+ in these scenarios,\
    \ but not much\n   need for ECN+ either, in a scenario where small packets are\
    \ unlikely\n   to be dropped or marked.\n      Target Load = 95%\n           \
    \         ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n                 -------\
    \     -------     -------      ----------\n      Dropped        766         446\
    \         427             408\n      Marked      32,683      34,289      33,412\
    \          31,892\n      Loss rate    0.05%       0.03%       0.03%          \
    \ 0.03%\n      Throughput     81%         81%         81%             81%\n  \
    \    Target Load = 110%\n                    ECN        ECN+     ECN+/Wait   \
    \ ECN+/TryOnce\n                 -------     -------     -------      ----------\n\
    \      Dropped      2,496       2,110       1,733           2,020\n      Marked\
    \     220,573     258,696     230,955         214,604\n      Loss rate    0.15%\
    \       0.13%       0.11%           0.11%\n      Throughput     92%         91%\
    \         92%             92%\n      Target Load = 125%\n                    ECN\
    \        ECN+     ECN+/Wait    ECN+/TryOnce\n                 -------     -------\
    \     -------      ----------\n      Dropped     20,032      13,555      13,979\
    \          16,918\n      Marked     725,165     726,992     726,823         615,235\n\
    \      Loss rate    1.11%       0.76%       0.78%           0.66%\n      Throughput\
    \     95%         95%         95%             96%\n      Target Load = 150%\n\
    \                    ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n         \
    \        -------     -------     -------      ----------\n      Dropped    484,251\
    \     483,847     507,727         600,737\n      Marked     865,905     872,254\
    \     873,317         818,451\n      Loss rate   19.09%      19.13%      19.71%\
    \          12.66%\n      Throughput     99%         98%         99%          \
    \   99%\n   Table 5:  Simulations with an average flow size of 3 Kbytes, a 100\n\
    \             Mbps link, RED in byte mode, queue in bytes\n      Target Load =\
    \  95%\n                    ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n  \
    \               -------     -------     -------      ----------\n      Dropped\
    \        142          77         103          99\n      Marked      11,694   \
    \   11,387      11,604      12,129\n      Loss rate     0.1%        0.1%     \
    \   0.1%        0.1%\n      Throughput     78%         78%         78%       \
    \  78%\n      Target Load =  110%\n                    ECN        ECN+     ECN+/Wait\
    \    ECN+/TryOnce\n                 -------     -------     -------      ----------\n\
    \      Dropped        338         210         247         274\n      Marked  \
    \    41,676      40,412      44,173      36,265\n      Loss rate     0.2%    \
    \    0.1%        0.1%        0.1%\n      Throughput     94%         94%      \
    \   94%         96%\n      Target Load =  125%\n                    ECN      \
    \  ECN+     ECN+/Wait    ECN+/TryOnce\n                 -------     -------  \
    \   -------      ----------\n      Dropped      1,559         951         978\
    \       1,723\n      Marked      74,933      75,499      75,481      59,670\n\
    \      Loss rate     0.8%        0.5%        0.5%        0.6%\n      Throughput\
    \     99%         99%         99%         96%\n      Target Load =  150%\n   \
    \                 ECN        ECN+     ECN+/Wait    ECN+/TryOnce\n            \
    \     -------     -------     -------      ----------\n      Dropped      2,374\
    \       1,528       1,515       4,848\n      Marked      85,739      86,428  \
    \    86,144      81,350\n      Loss rate     1.2%        0.8%        0.8%    \
    \    1.4%\n      Throughput     99%         98%         98%         98%\n   Table\
    \ 6:  Simulations with an average flow size of 3 Kbytes, a 10\n             Mbps\
    \ link, RED in byte mode, queue in bytes\n"
- title: Appendix B.  Issues of Incremental Deployment
  contents:
  - "Appendix B.  Issues of Incremental Deployment\n   In order for TCP node B to\
    \ send a SYN/ACK packet as ECN-Capable, node\n   B must have received an ECN-setup\
    \ SYN packet from node A.  However,\n   it is possible that node A supports ECN,\
    \ but either ignores the CE\n   codepoint on received SYN/ACK packets, or ignores\
    \ SYN/ACK packets\n   with the ECT or CE codepoint set.  If the TCP initiator\
    \ ignores the\n   CE codepoint on received SYN/ACK packets, this would mean that\
    \ the\n   TCP responder would not respond to this congestion indication.\n   However,\
    \ this seems to us an acceptable cost to pay in the\n   incremental deployment\
    \ of ECN-Capability for TCP's SYN/ACK packets.\n   It would mean that the responder\
    \ would not reduce the initial\n   congestion window from two, three, or four\
    \ segments down to one\n   segment, as it should, and would not sent a non-ECN-Capable\
    \ SYN/ACK\n   packet to complete the SYN exchange.  However, the TCP end nodes\n\
    \   would still respond correctly to any subsequent CE indications on\n   data\
    \ packets later on in the connection.\n   Figure 4 shows an interchange with the\
    \ SYN/ACK packet ECN-marked, but\n   with the ECN mark ignored by the TCP originator.\n\
    \      ---------------------------------------------------------------\n     \
    \    TCP Node A             Router                  TCP Node B\n         (initiator)\
    \                                   (responder)\n         ----------         \
    \    ------                  ----------\n         ECN-setup SYN packet --->\n\
    \                                         ECN-setup SYN packet --->\n        \
    \                               <--- ECN-setup SYN/ACK, ECT\n                \
    \            <--- Sets CE on SYN/ACK\n         <--- ECN-setup SYN/ACK, CE\n  \
    \       Data/ACK, No ECN-Echo --->\n                                         \
    \           Data/ACK --->\n                                   <--- Data (up to\
    \ four packets)\n      ---------------------------------------------------------------\n\
    \            Figure 4: SYN exchange with the SYN/ACK packet marked,\n        \
    \      but with the ECN mark ignored by the TCP initiator\n   Thus, to be explicit,\
    \ when a TCP connection includes an initiator\n   that supports ECN but *does\
    \ not* support ECN-Capability for SYN/ACK\n   packets, in combination with a responder\
    \ that *does* support ECN-\n   Capability for SYN/ACK packets, it is possible\
    \ that the ECN-Capable\n   SYN/ACK packets will be marked rather than dropped\
    \ in the network,\n   and that the responder will not learn about the ECN mark\
    \ on the\n   SYN/ACK packet.  This would not be a problem if most packets from\
    \ the\n   responder supporting ECN for SYN/ACK packets were in long-lived TCP\n\
    \   connections, but it would be more problematic if most of the packets\n   were\
    \ from TCP connections consisting of four data packets, and the\n   TCP responder\
    \ for these connections was ready to send its data\n   packets immediately after\
    \ the SYN/ACK exchange.  Of course, with\n   *severe* congestion, the SYN/ACK\
    \ packets would likely be dropped\n   rather than ECN-marked at the congested\
    \ router, preventing the TCP\n   responder from adding to the congestion by sending\
    \ its initial window\n   of four data packets.\n   It is also possible that in\
    \ some older TCP implementation, the\n   initiator would ignore arriving SYN/ACK\
    \ packets that had the ECT or\n   CE codepoint set.  This would result in a delay\
    \ in connection setup\n   for that TCP connection, with the initiator re-sending\
    \ the SYN packet\n   after a retransmission timeout.  We are not aware of any\
    \ TCP\n   implementations with this behavior.\n   One possibility for coping with\
    \ problems of backwards compatibility\n   would be for TCP initiators to use a\
    \ TCP flag that means \"I\n   understand ECN-Capable SYN/ACK packets\".  If this\
    \ document were to\n   standardize the use of such an \"ECN-SYN\" flag, then the\
    \ TCP responder\n   would only send a SYN/ACK packet as ECN-Capable if the incoming\
    \ SYN\n   packet had the \"ECN-SYN\" flag set.  An ECN-SYN flag would prevent\
    \ the\n   backwards compatibility problems described in the paragraphs above.\n\
    \   One drawback to the use of an ECN-SYN flag is that it would use one\n   of\
    \ the four remaining reserved bits in the TCP header for a transient\n   backwards\
    \ compatibility problem.  This drawback is limited by the\n   fact that the \"\
    ECN-SYN\" flag would be defined only for use with ECN-\n   setup SYN packets;\
    \  that bit in the TCP header could be defined to\n   have other uses for other\
    \ kinds of TCP packets.\n   Factors in deciding not to use an ECN-SYN flag include\
    \ the following:\n   (1) The limited installed base: At the time that this document\
    \ was\n       written, the TCP implementations in Microsoft Vista and Mac OS X\n\
    \       included ECN, but ECN was not enabled by default [SBT07].  Thus,\n   \
    \    there was not a large deployed base of ECN-Capable TCP\n       implementations.\
    \  This limits the scope of any backwards\n       compatibility problems.\n  \
    \ (2) Limits to the scope of the problem: The backwards compatibility\n      \
    \ problem would not be serious enough to cause congestion collapse;\n       with\
    \ severe congestion, the buffer at the congested router will\n       overflow,\
    \ and the congested router will drop rather than ECN-mark\n       arriving SYN\
    \ packets.  Some active queue management mechanisms\n       might switch from\
    \ packet-marking to packet-dropping in times of\n       high congestion before\
    \ buffer overflow, as recommended in Section\n       19.1 of RFC 3168 [RFC3168].\
    \  This helps to prevent congestion\n       collapse problems with the use of\
    \ ECN.\n   (3) Detection of and response to backwards-compatibility problems:\
    \ A\n       TCP responder such as a web server can't differentiate between a\n\
    \       SYN/ACK packet that is not ECN-marked in the network, and a\n       SYN/ACK\
    \ packet that is ECN-marked, but where the ECN mark is\n       ignored by the\
    \ TCP initiator.  However, a TCP responder *can*\n       detect if a SYN/ACK packet\
    \ is sent as ECN-capable and not\n       reported as ECN-marked, but data packets\
    \ are dropped or marked\n       from the initial window of data.  We will call\
    \ this scenario\n       \"initial-window-congestion\".  If a web server frequently\n\
    \       experienced initial-window-congestion (without SYN/ACK\n       congestion),\
    \ then the web server *might* be experiencing\n       backwards compatibility\
    \ problems with ECN-Capable SYN/ACK\n       packets, and could respond by not\
    \ sending SYN/ACK packets as\n       ECN-Capable.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC793]   Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC\n              793, September 1981.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2988]  Paxson, V. and M. Allman, \"Computing\
    \ TCP's Retransmission\n              Timer\", RFC 2988, November 2000.\n   [RFC3168]\
    \  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n              of\
    \ Explicit Congestion Notification (ECN) to IP\", RFC\n              3168, September\
    \ 2001.\n"
- title: Informative References
  contents:
  - "Informative References\n   [ECN+]     A. Kuzmanovic, The Power of Explicit Congestion\n\
    \              Notification, SIGCOMM 2005.\n   [ECN-SYN]  ECN-SYN web page with\
    \ simulation scripts,\n              http://www.icir.org/floyd/ecn-syn.\n   [F07]\
    \      S. Floyd, \"[BEHAVE] Response of firewalls and middleboxes\n          \
    \    to TCP SYN packets that are ECN-Capable?\", August 2, 2007,\n           \
    \   email to the BEHAVE mailing list, http://www1.ietf.org/\n              mail-archive/web/behave/current/msg02644.html.\n\
    \   [Kelson00] Dax Kelson, \"8% of the Internet unreachable!\", September\n  \
    \            10, 2000, email to the Linux kernel mailing list,\n             \
    \ http://lkml.indiana.edu/hypermail/linux/kernel/\n              0009.1/0329.html.\n\
    \   [L08]      A. Landley, \"Re: [tcpm] I-D Action:draft-ietf-tcpm-\n        \
    \      ecnsyn-06.txt\", August 24, 2008, email to the tcpm mailing\n         \
    \     list, http://www.ietf.org/\n              mail-archive/web/tcpm/current/msg03988.html.\n\
    \   [MAF05]    A. Medina, M. Allman, and S. Floyd, \"Measuring the\n         \
    \     Evolution of Transport Protocols in the Internet\", ACM\n              CCR,\
    \ April 2005.\n   [PI]       C. Hollot, V. Misra, W. Gong, and D. Towsley, \"\
    On\n              Designing Improved Controllers for AQM Routers Supporting\n\
    \              TCP Flows\", April 1998.\n   [RED]      Floyd, S., and Jacobson,\
    \ V., \"Random Early Detection\n              gateways for Congestion Avoidance\"\
    , IEEE/ACM Transactions\n              on Networking, V.1 N.4, August 1993.\n\
    \   [REM]      S. Athuraliya, V. H. Li, S. H. Low and Q. Yin, \"REM:\n       \
    \       Active Queue Management\", IEEE Network, May 2001.\n   [RFC2309]  Braden,\
    \ B., Clark, D., Crowcroft, J., Davie, B., Deering,\n              S., Estrin,\
    \ D., Floyd, S., Jacobson, V., Minshall, G.,\n              Partridge, C., Peterson,\
    \ L., Ramakrishnan, K., Shenker,\n              S., Wroclawski, J., and L. Zhang,\
    \ \"Recommendations on\n              Queue Management and Congestion Avoidance\
    \ in the\n              Internet\", RFC 2309, April 1998.\n   [RFC2581]  Allman,\
    \ M., Paxson, V., and W. Stevens, \"TCP Congestion\n              Control\", RFC\
    \ 2581, April 1999.\n   [RFC3042]  Allman, M., Balakrishnan, H., and S. Floyd,\
    \ \"Enhancing\n              TCP's Loss Recovery Using Limited Transmit\", RFC\
    \ 3042,\n              January 2001.\n   [RFC3360]  Floyd, S., \"Inappropriate\
    \ TCP Resets Considered Harmful\",\n              BCP 60, RFC 3360, August 2002.\n\
    \   [RFC3390]  Allman, M., Floyd, S., and C. Partridge, \"Increasing TCP's\n \
    \             Initial Window\", RFC 3390, October 2002.\n   [RFC4987]  Eddy, W.,\
    \ \"TCP SYN Flooding Attacks and Common\n              Mitigations\", RFC 4987,\
    \ August 2007.\n   [SCJO01]   F. Smith, F. Campos, K. Jeffay, and D. Ott, \"What\
    \ TCP/IP\n              Protocol Headers Can Tell us about the Web\", SIGMETRICS,\n\
    \              June 2001.\n   [SYN-COOK] Dan J. Bernstein, SYN cookies, 1997,\
    \ see also\n              <http://cr.yp.to/syncookies.html>.\n   [SBT07]    M.\
    \ Sridharan, D. Bansal, and D. Thaler, \"Implementation\n              Report\
    \ on Experiences with Various TCP RFCs\", Presentation\n              in the TSVAREA,\
    \ IETF 68, March 2007.\n              http://www3.ietf.org/proceedings/07mar/slides/tsvarea-\n\
    \              3/sld6.htm.\n   [Tools]    S. Floyd, Ed., and E. Kohler, Ed., \"\
    Tools for the\n              Evaluation of Simulation and Testbed Scenarios\"\
    , Work in\n              Progress, February 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Aleksandar Kuzmanovic\n   Northwestern University\n  \
    \ Phone: +1 (847) 467-5519\n   EMail: akuzma@northwestern.edu\n   URL: http://cs.northwestern.edu/~akuzma\n\
    \   Amit Mondal\n   Northwestern University\n   Phone: +1 (847) 467-6455\n   EMail:\
    \ a-mondal@northwestern.edu\n   URL: http://www.cs.northwestern.edu/~akm175/\n\
    \   Sally Floyd\n   ICIR (ICSI Center for Internet Research)\n   Phone: +1 (510)\
    \ 666-2989\n   EMail: floyd@icir.org\n   URL: http://www.icir.org/floyd/\n   K.\
    \ K. Ramakrishnan\n   AT&T Labs Research\n   Rm. A161\n   180 Park Ave.\n   Florham\
    \ Park, NJ 07932\n   Phone: +1 (973) 360-8764\n   EMail: kkrama@research.att.com\n\
    \   URL: http://www.research.att.com/info/kkrama\n"
