- contents:
  - '      Discovery of the IPv6 Prefix Used for IPv6 Address Synthesis

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a method for detecting the presence of DNS64\n
    \  and for learning the IPv6 prefix used for protocol translation on an\n   access
    network.  The method depends on the existence of a well-known\n   IPv4-only fully
    qualified domain name \"ipv4only.arpa.\".  The\n   information learned enables
    nodes to perform local IPv6 address\n   synthesis and to potentially avoid NAT64
    on dual-stack and multi-\n   interface deployments.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7050.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Requirements Notation and Terminology ...........................4\n      2.1.
    Requirements Notation ......................................4\n      2.2. Terminology
    ................................................4\n   3. Node Behavior ...................................................4\n
    \     3.1. Validation of Discovered Pref64::/n ........................6\n           3.1.1.
    DNSSEC Requirements for the Network .................7\n           3.1.2. DNSSEC
    Requirements for the Node ....................7\n      3.2. Connectivity Check
    .........................................8\n           3.2.1. No Connectivity
    Checks against \"ipv4only.arpa.\" .....9\n      3.3. Alternative Fully Qualified
    Domain Names ..................10\n      3.4. Message Flow Illustration .................................10\n
    \  4. Operational Considerations for Hosting the IPv4-Only\n      Well-Known Name
    ................................................12\n   5. Operational Considerations
    for DNS64 Operator ..................12\n      5.1. Mapping of IPv4 Address Ranges
    to IPv6 Prefixes ...........13\n   6. Exit Strategy ..................................................14\n
    \  7. Security Considerations ........................................14\n   8.
    IANA Considerations ............................................15\n      8.1.
    Domain Name Reservation Considerations ....................15\n      8.2. IPv4
    Address Allocation Considerations ....................16\n      8.3. IAB Statement
    Regarding This .arpa Request ................17\n   9. Acknowledgements ...............................................18\n
    \  10. References ....................................................18\n      10.1.
    Normative References .....................................18\n      10.2. Informative
    References ...................................19\n   Appendix A.  Example of DNS
    Record Configuration ..................20\n   Appendix B.  About the IPv4 Address
    for the Well-Known Name .......21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   As part of the transition to IPv6, NAT64 [RFC6146] and DNS64\n
    \  [RFC6147] technologies will be utilized by some access networks to\n   provide
    IPv4 connectivity for IPv6-only nodes [RFC6144].  DNS64\n   utilizes IPv6 address
    synthesis to create local IPv6 addresses for\n   peers having only IPv4 addresses,
    hence allowing DNS-using IPv6-only\n   nodes to communicate with IPv4-only peers.\n
    \  However, DNS64 cannot serve applications not using DNS, such as those\n   receiving
    IPv4 address literals as referrals.  Such applications\n   could nevertheless
    be able to work through NAT64, provided they are\n   able to create locally valid
    IPv6 addresses that would be translated\n   to the peers' IPv4 addresses.\n   Additionally,
    DNS64 is not able to do IPv6 address synthesis for\n   nodes running validating
    DNS resolvers enabled by DNS Security\n   (DNSSEC), but instead, the synthesis
    must be done by the nodes\n   themselves.  In order to perform IPv6 synthesis,
    nodes have to learn\n   the IPv6 prefix(es) used on the access network for protocol\n
    \  translation.  A prefix, which may be a Network-Specific Prefix (NSP)\n   or
    a Well-Known Prefix (WKP) [RFC6052], is referred to in this\n   document as Pref64::/n
    [RFC6146].\n   This document describes a best-effort method for applications and\n
    \  nodes to learn the information required to perform local IPv6 address\n   synthesis.
    \ The IPv6 address synthesis procedure itself is out of the\n   scope of this
    document.  An example application is a browser\n   encountering IPv4 address literals
    in an IPv6-only access network.\n   Another example is a node running a validating
    security-aware DNS\n   resolver in an IPv6-only access network.\n   The knowledge
    of IPv6 address synthesis taking place may also be\n   useful if DNS64 and NAT64
    are used in dual-stack-enabled access\n   networks or if a node is multi-interfaced
    [RFC6418].  In such cases,\n   nodes may choose to prefer IPv4 or an alternative
    network interface\n   in order to avoid traversal through protocol translators.\n
    \  It is important to note that use of this approach will not result in\n   a
    system that is as robust, secure, and well-behaved as an all-IPv6\n   system would
    be.  Hence, it is highly recommended to upgrade nodes'\n   destinations to IPv6
    and utilize the described method only as a\n   transition solution.\n"
  title: 1.  Introduction
- contents:
  - '2.  Requirements Notation and Terminology

    '
  - contents:
    - "2.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 2.1.  Requirements Notation
  - contents:
    - "2.2.  Terminology\n   NAT64 FQDN: a fully qualified domain name (FQDN) for
      a NAT64 protocol\n   translator.\n   Pref64::/n: an IPv6 prefix used for IPv6
      address synthesis [RFC6146].\n   Pref64::WKA: an IPv6 address consisting of
      Pref64::/n and WKA at any\n   of the locations allowed by RFC 6052 [RFC6052].\n
      \  Secure Channel: a communication channel a node has between itself and\n   a
      DNS64 server protecting DNS protocol-related messages from\n   interception
      and tampering.  The channel can be, for example, an\n   IPsec-based virtual
      private network (VPN) tunnel or a link layer\n   utilizing data encryption technologies.\n
      \  Well-Known IPv4-only Name (WKN): the fully qualified domain name,\n   \"ipv4only.arpa.\",
      well-known to have only A record(s).\n   Well-Known IPv4 Address (WKA): an IPv4
      address that is well-known and\n   present in an A record for the well-known
      name.  Two well-known IPv4\n   addresses are defined for Pref64::/n discovery
      purposes: 192.0.0.170\n   and 192.0.0.171.\n"
    title: 2.2.  Terminology
  title: 2.  Requirements Notation and Terminology
- contents:
  - "3.  Node Behavior\n   A node requiring information about the presence (or absence)
    of\n   NAT64, and one or more Pref64::/n used for protocol translation SHALL\n
    \  send a DNS query for AAAA resource records of the Well-Known\n   IPv4-only
    Name (WKN) \"ipv4only.arpa.\".  The node MAY perform the DNS\n   query in both
    IPv6-only and dual-stack access networks.\n   When sending a DNS AAAA resource
    record query for the WKN, a node\n   MUST set the \"Checking Disabled (CD)\" bit
    to zero [RFC4035], as\n   otherwise the DNS64 server will not perform IPv6 address
    synthesis\n   (Section 3 of [RFC6147]) and hence would not reveal the Pref64::/n\n
    \  used for protocol translation.\n   A DNS reply with one or more AAAA resource
    records indicates that the\n   access network is utilizing IPv6 address synthesis.
    \ In some\n   scenarios, captive portals, or NXDOMAIN and NODATA hijacking,\n
    \  performed by the access network may result in a false positive.  One\n   method
    to detect such hijacking is to query a fully qualified domain\n   name that is
    known to be invalid (and normally returns an empty\n   response or an error response)
    and see if it returns a valid resource\n   record.  However, as long as the hijacked
    domain does not result in\n   AAAA resource record responses that contain a well-known
    IPv4 address\n   in any location defined by [RFC6052], the response will not disturb\n
    \  the Pref64::/n learning procedure.\n   A node MUST look through all of the
    received AAAA resource records to\n   collect one or more Pref64::/n.  The Pref64::/n
    list might include\n   the Well-Known Prefix 64:ff9b::/96 [RFC6052] or one or
    more Network-\n   Specific Prefixes.  In the case of NSPs, the node SHALL determine
    the\n   used address format by searching the received IPv6 addresses for the\n
    \  WKN's well-known IPv4 addresses.  The node SHALL assume the well-\n   known
    IPv4 addresses might be found at the locations specified by\n   [RFC6052], Section
    2.2.  The node MUST check on octet boundaries to\n   ensure a 32-bit well-known
    IPv4 address value is present only once in\n   an IPv6 address.  In case another
    instance of the value is found\n   inside the IPv6 address, the node SHALL repeat
    the search with the\n   other well-known IPv4 address.\n   If only one Pref64::/n
    was present in the DNS response, a node SHALL\n   use that Pref64::/n for both
    local synthesis and for detecting\n   synthesis done by the DNS64 server on the
    network.\n   If more than one Pref64::/n was present in the DNS response, a node\n
    \  SHOULD use all of them when determining whether other received IPv6\n   addresses
    are synthetic.  The node MUST use all learned Pref64::/n\n   when performing local
    IPv6 address synthesis and use the prefixes in\n   the order received from the
    DNS64 server.  That is, when the node is\n   providing a list of locally synthesized
    IPv6 addresses to upper\n   layers, IPv6 addresses MUST be synthesized by using
    all discovered\n   Pref64::/n prefixes in the received order.\n   If the well-known
    IPv4 addresses are not found within the standard\n   locations, the DNS response
    indicates that the network is not using a\n   standard address format or unexpected
    IPv4 addresses were used in the\n   AAAA resource record synthesis.  In either
    case, the Pref64::/n\n   cannot be determined and the heuristic procedure has
    failed.\n   Developers can, over time, learn of IPv6-translated address formats\n
    \  that are extensions or alternatives to the standard formats.  At that\n   point,
    developers MAY add additional steps to the described discovery\n   procedure.
    \ The additional steps are outside the scope of the present\n   document.\n   In
    case a node does not receive a positive DNS reply to the AAAA\n   resource record
    query, the node MAY perform a DNS A resource record\n   query for the well-known
    name.  Receiving a positive reply to the DNS\n   A resource record query indicates
    that the recursive DNS server that\n   is used is not a DNS64 server.\n   In the
    case of a negative response (NXDOMAIN, NODATA) or a DNS query\n   timeout, a DNS64
    server is not available on the access network, the\n   access network filtered
    out the well-known query, or something went\n   wrong in the DNS resolution.  All
    unsuccessful cases result in a node\n   being unable to perform local IPv6 address
    synthesis.  In the case of\n   timeout, the node SHOULD retransmit the DNS query
    like any other DNS\n   query the node makes [RFC1035].  In the case of a negative
    response\n   (NXDOMAIN, NODATA), the node MUST obey the Time to Live (TTL)\n   [RFC1035]
    of the response before resending the AAAA resource record\n   query.  The node
    MAY monitor for DNS replies with IPv6 addresses\n   constructed from the WKP,
    in which case if any are observed, the node\n   SHOULD use the WKP as if it were
    learned during the query for the\n   well-known name.\n   To save Internet resources
    if possible, a node should perform\n   Pref64::/n discovery only when needed (e.g.,
    when local synthesis is\n   required, when a new network interface is connected
    to a new network,\n   and so forth).  The node SHALL cache the replies it receives
    during\n   the Pref64::/n discovery procedure, and it SHOULD repeat the\n   discovery
    process ten seconds before the TTL of the Well-Known Name's\n   synthetic AAAA
    resource record expires.\n"
  - contents:
    - "3.1.  Validation of Discovered Pref64::/n\n   If a node is using an insecure
      channel between itself and a DNS64\n   server or the DNS64 server is untrusted,
      it is possible for an\n   attacker to influence the node's Pref64::/n discovery
      procedures.\n   This may result in denial-of-service, redirection, man-in-the-middle,\n
      \  or other attacks.\n   To mitigate against attacks, the node SHOULD communicate
      with a\n   trusted DNS64 server over a secure channel or use DNSSEC.  NAT64\n
      \  operators SHOULD provide facilities for validating discovery of\n   Pref64::/n
      via a secure channel and/or DNSSEC protection.\n   It is important to understand
      that DNSSEC only validates that the\n   discovered Pref64::/n is the one that
      belongs to a domain used by\n   NAT64 FQDN.  Importantly, the DNSSEC validation
      does not tell if the\n   node is at the network where the Pref64::/n is intended
      to be used.\n   Furthermore, DNSSEC validation cannot be utilized in the case
      of a\n   WKP.\n"
    - contents:
      - "3.1.1.  DNSSEC Requirements for the Network\n   If the operator has chosen
        to support nodes performing validation of\n   discovered Pref64::/n with DNSSEC,
        the operator of the NAT64 device\n   MUST perform the following configurations.\n
        \  1.  Have one or more fully qualified domain names for the NAT64\n       translator
        entities (later referred to as NAT64 FQDN).  In the\n       case of more than
        one Pref64::/n being used in a network, e.g.,\n       for load-balancing purposes,
        it is for network administrators to\n       decide whether a single NAT64's
        fully qualified domain name maps\n       to more than one Pref64::/n, or whether
        there will be a dedicated\n       NAT64 FQDN per Pref64::/n.\n   2.  Each
        NAT64 FQDN MUST have one or more DNS AAAA resource records\n       containing
        Pref64::WKA (Pref64::/n combined with WKA).\n   3.  Each Pref64::WKA MUST
        have a PTR resource record that points to\n       the corresponding NAT64
        FQDN.\n   4.  Sign the NAT64 FQDNs' AAAA and A resource records with DNSSEC.\n"
      title: 3.1.1.  DNSSEC Requirements for the Network
    - contents:
      - "3.1.2.  DNSSEC Requirements for the Node\n   A node SHOULD prefer a secure
        channel to talk to a DNS64 server\n   whenever possible.  In addition, a node
        that implements a DNSSEC\n   validating resolver MAY use the following procedure
        to validate\n   discovery of the Pref64::/n.\n   1.  Heuristically find Pref64::/n
        candidates by making a AAAA\n       resource record query for \"ipv4only.arpa.\"
        by following the\n       procedure in Section 3.  This will result in IPv6
        addresses\n       consisting of Pref64::/n combined with WKA, i.e., Pref64::WKA.\n
        \      For each Pref64::/n that the node wishes to validate, the node\n       performs
        the following steps.\n   2.  Send a DNS PTR resource record query for the
        IPv6 address of the\n       translator (for \".ip6.arpa.\" tree), using the
        Pref64::WKA learned\n       in step 1.  CNAME and DNAME results should be
        followed according\n       to the rules in RFC 1034 [RFC1034], RFC 1035 [RFC1035],
        and RFC\n       6672 [RFC6672].  The ultimate response will include one or
        more\n       NAT64 FQDNs.\n   3.  The node SHOULD compare the domains of learned
        NAT64 FQDNs to a\n       list of the node's trusted domains and choose a NAT64
        FQDN that\n       matches.  The means for a node to learn the trusted domains
        is\n       implementation specific.  If the node has no trust for the\n       domain,
        the discovery procedure is not secure, and the remaining\n       steps described
        below MUST NOT be performed.\n   4.  Send a DNS AAAA resource record query
        for the NAT64 FQDN.\n   5.  Verify the DNS AAAA resource record contains Pref64::WKA\n
        \      addresses received at step 1.  It is possible that the NAT64 FQDN\n
        \      has multiple AAAA records, in which case the node MUST check if\n       any
        of the addresses match the ones obtained in step 1.  The node\n       MUST
        ignore other responses and not use them for local IPv6\n       address synthesis.\n
        \  6.  Perform DNSSEC validation of the DNS AAAA response.\n   After the node
        has successfully performed the above five steps, the\n   node can consider
        Pref64::/n validated.\n"
      title: 3.1.2.  DNSSEC Requirements for the Node
    title: 3.1.  Validation of Discovered Pref64::/n
  - contents:
    - "3.2.  Connectivity Check\n   After learning a Pref64::/n, the node SHOULD perform
      a connectivity\n   check to ensure the learned Pref64::/n is functional.  It
      could be\n   non-functional for a variety of reasons -- the discovery failed
      to\n   work as expected, the IPv6 path to the NAT64 is down, the NAT64 is\n
      \  down, or the IPv4 path beyond the NAT64 is down.\n   There are two main approaches
      to determine if the learned Pref64::/n\n   is functional.  The first approach
      is to perform a dedicated\n   connectivity check.  The second approach is to
      simply attempt to use\n   the learned Pref64::/n.  Each approach has some trade-offs
      (e.g.,\n   additional network traffic or possible user-noticeable delay), and\n
      \  implementations should carefully weigh which approach is appropriate\n   for
      their application and the network.\n   The node SHOULD use an implementation-specific
      connectivity check\n   server and a protocol of the implementation's choice,
      but if that is\n   not possible, a node MAY do a PTR resource record query of
      the\n   Pref64::WKA to get a NAT64 FQDN.  The node then does an A resource\n
      \  query of the NAT64 FQDN, which will return zero or more A resource\n   records
      pointing to connectivity check servers used by the network\n   operator.  A
      negative response to the PTR or A resource query means\n   there are no connectivity
      check servers available.  A network\n   operator that provides NAT64 services
      for a mix of nodes with and\n   without implementation-specific connectivity
      check servers SHOULD\n   assist nodes in their connectivity checks by mapping
      each NAT64 FQDN\n   to one or more DNS A resource records with IPv4 address(es)
      pointing\n   to connectivity check server(s).  The connectivity check approach\n
      \  based on Pref64::/n works only with NSPs, as it is not possible to\n   register
      A records for each different domain using a WKP.  The\n   network operator MUST
      disable ICMPv6 rate limiting for connectivity\n   check messages.\n   If multiple
      connectivity check servers are available for use, the\n   node chooses the first
      one, preferring implementation-specific\n   servers.\n   The connectivity check
      protocol used with implementation-specific\n   connectivity check servers is
      implementation specific.\n   The connectivity check protocol used with connectivity
      check servers\n   pointed to by the NAT64 FQDN's A resource records is ICMPv6\n
      \  [RFC4443].  The node performing a connectivity check against these\n   servers
      SHALL send an ICMPv6 Echo Request to an IPv6 address\n   synthesized by combining
      discovered Pref64::/n with an IPv4 address\n   of the server as specified in
      [RFC6052].  This will test the IPv6\n   path to the NAT64, the NAT64's operation,
      and the IPv4 path all the\n   way to the connectivity check server.  If no response
      is received for\n   the ICMPv6 Echo Request, the node SHALL send another ICMPv6
      Echo\n   Request a second later.  If still no response is received, the node\n
      \  SHALL send a third ICMPv6 Echo Request two seconds later.  If an\n   ICMPv6
      Echo Response is received, the node knows the IPv6 path to the\n   connectivity
      check server is functioning normally.  If no response is\n   received after
      three transmissions and after three seconds have\n   elapsed since the last
      ICMPv6 Echo Request, the node learns this\n   Pref64::/n might not be functioning,
      and the node MAY choose a\n   different Pref64::/n (if available), choose to
      alert the user, or\n   proceed anyway assuming the failure is temporary or is
      caused by the\n   connectivity check itself.  After all, ICMPv6 is unreliable
      by\n   design, and failure to receive ICMPv6 responses may not indicate\n   anything
      other than network failure to transport ICMPv6 messages.\n   If no separate
      connectivity check is performed before local IPv6\n   address synthesis, a node
      MAY monitor success of connection attempts\n   performed with locally synthesized
      IPv6 addresses.  Based on success\n   of these connections, and based on possible
      ICMPv6 error messages\n   received (such as Destination Unreachable messages),
      the node MAY\n   cease to perform local address synthesis and MAY restart the\n
      \  Pref64::/n discovery procedures.\n"
    - contents:
      - "3.2.1.  No Connectivity Checks against \"ipv4only.arpa.\"\n   Clients MUST
        NOT send a connectivity check to an address returned by\n   the \"ipv4only.arpa.\"
        query.  This is because, by design, no server\n   will be operated on the
        Internet at that address as such.  Similarly,\n   network operators MUST NOT
        operate a server on that address.  The\n   reason this address isn't used
        for connectivity checks is that\n   operators who neglect to operate a connectivity
        check server will\n   allow that traffic towards the Internet where it will
        be dropped and\n   cause a false negative connectivity check with the client
        (that is,\n   the NAT64 is working fine, but the connectivity check fails
        because a\n   server is not operating at \"ipv4only.arpa.\" on the Internet
        and a\n   server is not operated by the NAT64 operator).  Instead, for the\n
        \  connectivity check, an additional DNS resource record is looked up\n   and
        used for the connectivity check.  This ensures that packets don't\n   unnecessarily
        leak to the Internet and reduces the chance of a false\n   negative connectivity
        check.\n"
      title: 3.2.1.  No Connectivity Checks against "ipv4only.arpa."
    title: 3.2.  Connectivity Check
  - contents:
    - "3.3.  Alternative Fully Qualified Domain Names\n   Some applications, operating
      systems, devices, or networks may find\n   it advantageous to operate their
      own DNS infrastructure to perform a\n   function similar to \"ipv4only.arpa.\"
      but use a different resource\n   record.  The primary advantage is to ensure
      availability of the DNS\n   infrastructure and ensure the proper configuration
      of the DNS record\n   itself.  For example, a company named Example might have
      their\n   application query \"ipv4only.example.com\".  Other than the different\n
      \  DNS resource record being queried, the rest of the operations are\n   anticipated
      to be identical to the steps described in this document.\n"
    title: 3.3.  Alternative Fully Qualified Domain Names
  - contents:
    - "3.4.  Message Flow Illustration\n   The figure below gives an example illustration
      of a message flow in\n   the case of prefix discovery utilizing Pref64::/n validation.
      \ The\n   figure also shows a step where the procedure ends if no Pref64::/n\n
      \  validation is performed.\n   In this example, three Pref64::/n prefixes are
      provided by the DNS64\n   server.  The first Pref64::/n is using an NSP, in
      this example,\n   \"2001:db8:42::/96\".  The second Pref64::/n is using an NSP,
      in this\n   example, \"2001:db8:43::/96\".  The third Pref64::/n is using the
      WKP.\n   Hence, when the Pref64::/n prefixes are combined with the WKA to form\n
      \  Pref64::WKA, the synthetic IPv6 addresses returned by the DNS64\n   server
      are \"2001:db8:42::192.0.0.170\", \"2001:db8:43::192.0.0.170\",\n   and \"64:ff9b::192.0.0.170\".
      \ The DNS64 server could also return\n   synthetic addresses containing the
      IPv4 address 192.0.0.171.\n   The validation is not done for the WKP; see Section
      3.1.\n    Node                                           DNS64 server\n      |
      \                                               |\n      |  \"AAAA\" query for
      \"ipv4only.arpa.\"             |\n      |----------------------------------------------->|\"A\"
      query for\n      |                                                |\"ipv4only.arpa.\"\n
      \     |                                                |--------------->\n      |
      \                                               |\n      |                                                |
      \"A\" response:\n      |                                                | \"192.0.0.170\"\n
      \     |                                                | \"192.0.0.171\"\n      |
      \                                               |<---------------\n      |                                +----------------------------+\n
      \     |                                | \"AAAA\" synthesis using     |\n      |
      \                               | three Pref64::/n.          |\n      |                                +----------------------------+\n
      \     |  \"AAAA\" response with:                         |\n      |  \"2001:db8:42::192.0.0.170\"
      \                   |\n      |  \"2001:db8:43::192.0.0.170\"                    |\n
      \     |  \"64:ff9b::192.0.0.170\"                        |\n      |<-----------------------------------------------|\n
      \     |                                                |\n   +----------------------------------------------+
      \   |\n   | If Pref64::/n validation is not performed, a |    |\n   | node can
      fetch prefixes from AAAA responses  |    |\n   | at this point and skip the
      steps below.      |    |\n   +----------------------------------------------+
      \   |\n      |                                                |\n      |  \"PTR\"
      query #1 for \"2001:db8:42::192.0.0.170  |\n      |----------------------------------------------->|\n
      \     |  \"PTR\" query #2 for \"2001:db8:43::192.0.0.170  |\n      |----------------------------------------------->|\n
      \     |                                                |\n      |  \"PTR\" response
      #1 \"nat64_1.example.com\"       |\n      |<-----------------------------------------------|\n
      \     |  \"PTR\" response #2 \"nat64_2.example.com\"       |\n      |<-----------------------------------------------|\n
      \     |                                                |\n   +----------------------------------------------+
      \   |\n   | Compare received domains to a trusted domain |    |\n   | list and
      if matches are found, continue.     |    |\n   +----------------------------------------------+
      \   |\n      |                                                |\n      |  \"AAAA\"
      query #1 for \"nat64_1.example.com\"     |\n      |----------------------------------------------->|\n
      \     |  \"AAAA\" query #2 for \"nat64_2.example.com\"     |\n      |----------------------------------------------->|\n
      \     |                                                |\n      | \"AAAA\" resp.
      #1 with \"2001:db8:42::192.0.0.170 |\n      |<-----------------------------------------------|\n
      \     | \"AAAA\" resp. #2 with \"2001:db8:43::192.0.0.170 |\n      |<-----------------------------------------------|\n
      \     |                                                |\n   +----------------------------------------------+
      \   |\n   | Validate AAAA responses and compare the IPv6 |    |\n   | addresses
      to those previously learned.       |    |\n   +----------------------------------------------+
      \   |\n      |                                                |\n   +----------------------------------------------+
      \   |\n   | Fetch the Pref64::/n from the validated      |    |\n   | responses
      and take into use.                 |    |\n   +----------------------------------------------+
      \   |\n      |                                                |\n                 Figure
      1: Pref64::/n Discovery Procedure\n"
    title: 3.4.  Message Flow Illustration
  title: 3.  Node Behavior
- contents:
  - "4.  Operational Considerations for Hosting the IPv4-Only Well-Known Name\n   The
    authoritative name server for the well-known name SHALL have DNS\n   record TTL
    set to at least 60 minutes in order to improve\n   effectiveness of DNS caching.
    \ The exact TTL value will be determined\n   and tuned based on operational experiences.\n
    \  The domain serving the well-known name MUST be signed with DNSSEC.\n   See
    also Section 7.\n"
  title: 4.  Operational Considerations for Hosting the IPv4-Only Well-Known Name
- contents:
  - "5.  Operational Considerations for DNS64 Operator\n   A network operator of a
    DNS64 server can guide nodes utilizing\n   heuristic discovery procedures by managing
    the responses a DNS64\n   server provides.\n   If the network operator would like
    nodes to utilize multiple\n   Pref64::/n prefixes, the operator needs to configure
    DNS64 servers to\n   respond with multiple synthetic AAAA records.  As per Section
    3, the\n   nodes can then use them all.\n   There are no guarantees on which of
    the Pref64::/n prefixes nodes\n   will end up using.  If the operator wants nodes
    to specifically use a\n   certain Pref64::/n or periodically change the Pref64::/n
    they use,\n   for example, for load balancing reasons, the only guaranteed method\n
    \  is to make DNS64 servers return only a single synthetic AAAA resource\n   record
    and have the TTL of that synthetic record such that the node\n   repeats the Pref64::/n
    discovery when required.\n   Besides choosing how many Pref64::/n prefixes to
    respond and what TTL\n   to use, DNS64 servers MUST NOT interfere with or perform
    other\n   special procedures for the queries related to the well-known name.\n"
  - contents:
    - "5.1.  Mapping of IPv4 Address Ranges to IPv6 Prefixes\n   RFC 6147 [RFC6147]
      allows DNS64 implementations to be able to map\n   specific IPv4 address ranges
      to separate Pref64::/n prefixes.  That\n   allows handling of special use IPv4
      addresses [RFC6890].  The example\n   setup where this might be used is illustrated
      in Figure 2.  The NAT64\n   \"A\" is used when accessing IPv4-only servers in
      the data center, and\n   the NAT64 \"B\" is used for Internet access.\n                      NAT64
      \"A\" ----- IPv4-only servers in a data center\n                     /\n   IPv6-only
      node---<\n                     \\\n                      NAT64 \"B\" ----- IPv4
      Internet\n                 Figure 2: NAT64s with IPv4 Address Ranges\n   The
      heuristic discovery method described herein does not support\n   learning of
      the possible rules used by a DNS64 server for mapping\n   specific IPv4 address
      ranges to separate Pref64::/n prefixes.\n   Therefore, nodes will use the same
      discovered Pref64::/n to\n   synthesize IPv6 addresses from any IPv4 address.
      \ This can cause\n   issues for routing and connectivity establishment procedures.
      \ The\n   operator of the NAT64 and the DNS64 ought to take this into account\n
      \  in the network design.\n   The network operators can help IPv6-only nodes
      by ensuring the nodes\n   do not have to work with IPv4 address literals for
      which special\n   mapping rules are used.  That is, the IPv4-only servers addressed\n
      \  from the special IPv4 address ranges ought to have signed AAAA\n   records,
      which allows IPv6-only nodes to avoid local address\n   synthesis.  If the IPv6-only
      nodes are not using DNSSEC, then it is\n   enough if the network's DNS64 server
      returns synthetic AAAA resource\n   records pointing to IPv4-only servers.  Avoiding
      the need for\n   IPv6-only nodes to perform address synthesis for IPv4 addresses\n
      \  belonging to special ranges is the best approach to assist nodes.\n   If
      the IPv6-only nodes have no choice other than using IPv4-address\n   literals
      belonging to special IPv4 address ranges and the IPv6-only\n   node will perform
      local synthesis by using the discovered Pref64::/n,\n   then the network ought
      to ensure with routing that the packets are\n   delivered to the correct NAT64.
      \ For example, a router in the path\n   from an IPv6-only host to NAT64s can
      forward the IPv6 packets to the\n   correct NAT64 as illustrated in Figure 3.
      \ The routing could be based\n   on the last 32 bits of the IPv6 address, but
      the network operator can\n   also use some other IPv6 address format allowed
      by RFC 6052 [RFC6052]\n   if it simplifies routing setup.  This setup requires
      additional logic\n   on the NAT64 providing connectivity to special IPv4 address
      ranges:\n   it needs to be able to translate packets it receives that are using\n
      \  the Pref64::/n used with Internet connections.\n                      NAT64
      \"A\" ----- IPv4-only servers in a data center\n                     /\n   IPv6-only
      host---router\n                     \\\n                       NAT64 \"B\" -----
      IPv4 Internet\n                  Figure 3: NAT64s with Assisting Router\n"
    title: 5.1.  Mapping of IPv4 Address Ranges to IPv6 Prefixes
  title: 5.  Operational Considerations for DNS64 Operator
- contents:
  - "6.  Exit Strategy\n   A day will come when this tool is no longer needed.  A
    node SHOULD\n   implement a configuration knob for disabling the Pref64::/n discovery\n
    \  feature.\n"
  title: 6.  Exit Strategy
- contents:
  - "7.  Security Considerations\n   The security considerations follow closely those
    of RFC 6147\n   [RFC6147].  The possible attacks are very similar in the case
    where\n   an attacker controls a DNS64 server and returns tampered IPv6\n   addresses
    to a node and in the case where an attacker causes the node\n   to use tampered
    Pref64::/n for local address synthesis.  DNSSEC\n   cannot be used to validate
    responses created by a DNS64 server with\n   which the node has no trust relationship.
    \ Hence, this document does\n   not change the big picture for untrusted network
    scenarios.  If an\n   attacker alters the Pref64::/n used by a DNS64 server or
    a node, the\n   traffic generated by the node will be delivered to an altered\n
    \  destination.  This can result in either a denial-of-service (DoS)\n   attack
    (if the resulting IPv6 addresses are not assigned to any\n   device), a flooding
    attack (if the resulting IPv6 addresses are\n   assigned to devices that do not
    wish to receive the traffic), or an\n   eavesdropping attack (in case the altered
    NSP is routed through the\n   attacker).\n   Even though a well-known name's DNS
    A resource record would not\n   necessarily need to be protected with DNSSEC as
    both the name and\n   IPv4 addresses well-known, DNSSEC protection is required
    for DNS AAAA\n   resource record queries.  Without DNSSEC, fake positive AAAA\n
    \  responses could cause hosts to erroneously detect Pref64::/n, thus\n   allowing
    an attacker to inject malicious Pref64::/n for hosts'\n   synthesis procedures.
    \ A signed \"ipv4only.arpa.\" allows validating\n   DNS64 servers (see [RFC6147]
    Section 3, Case 5, for example) to\n   detect malicious AAAA resource records.
    \ Therefore, the zone serving\n   the well-known name has to be protected with
    DNSSEC.\n   For Pref64::/n discovery validation, the access network SHOULD sign\n
    \  the NAT64 translator's fully qualified domain name.  A node SHOULD\n   use
    the algorithm described in Section 3.1 to validate each\n   discovered Pref64::/n.\n
    \  The procedure described in Section 3.1.2 requires a node using DNSSEC\n   to
    validate discovery of Pref64::/n to have a list of trusted\n   domains.  If a
    matching domain is not found at Step 3 in\n   Section 3.1.2, an implementation
    might be tempted to ask a user to\n   temporarily or permanently add a received
    domain as trusted.  History\n   has shown that average users are unable to properly
    handle such\n   queries and tend to answer positively without thinking in an attempt\n
    \  to move forward quickly.  Therefore, unless the DNSSEC-using\n   implementation
    has a way to dynamically and reliably add trusted\n   domains, it is better to
    fail the Pref64::/n discovery procedure.\n   Lastly, the best mitigation action
    against Pref64::/n discovery\n   attacks is to add IPv6 support for nodes' destinations
    and hence\n   reduce the need to perform local IPv6 address synthesis.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  Domain Name Reservation Considerations\n   According to procedures described
      in [RFC3172] and [RFC6761], IANA\n   has delegated a new second-level domain
      in the .ARPA zone for the\n   well-known domain name \"ipv4only.arpa.\".  The
      intention is that there\n   will not be any further delegation of names below
      the\n   \"ipv4only.arpa.\" domain.  The administrative and operational\n   management
      of this zone is performed by IANA.  The answers to the\n   seven questions listed
      in [RFC6761] are as follows:\n   1.  Are human users expected to recognize these
      names as special and\n       use them differently?  In what way?\n       No,
      although this is a domain delegated under the .arpa\n       infrastructural
      identifier top level domain.\n   2.  Are writers of application software expected
      to make their\n       software recognize these names as special and treat them\n
      \      differently?  In what way?\n       Yes.  Any application attempting to
      perform NAT64 discovery will\n       query the name.\n   3.  Are writers of
      name resolution APIs and libraries expected to\n       make their software recognize
      these names as special and treat\n       them differently?  If so, how?\n       Yes,
      to the extent the API or library is affected by NAT64.\n   4.  Are developers
      of caching domain name servers expected to make\n       their implementations
      recognize these names as special and treat\n       them differently?  If so,
      how?\n       No.\n   5.  Are developers of authoritative domain name servers
      expected to\n       make their implementations recognize these names as special
      and\n       treat them differently?  If so, how?\n       No.\n   6.  Does this
      reserved Special-Use Domain Name have any potential\n       impact on DNS server
      operators?  If they try to configure their\n       authoritative DNS server
      as authoritative for this reserved name,\n       will compliant name server
      software reject it as invalid?  Do DNS\n       server operators need to know
      about that and understand why?\n       Even if the name server software doesn't
      prevent them from using\n       this reserved name, are there other ways that
      it may not work as\n       expected, of which the DNS server operator should
      be aware?\n       This name has effects for operators of NAT64/DNS64, but otherwise\n
      \      is just another delegated .arpa domain.\n   7.  How should DNS Registries/Registrars
      treat requests to register\n       this reserved domain name?  Should such requests
      be denied?\n       Should such requests be allowed, but only to a specially-\n
      \      designated entity?\n       The registry for .arpa is held at IANA, and
      only IANA needs to\n       take action here.\n"
    title: 8.1.  Domain Name Reservation Considerations
  - contents:
    - "8.2.  IPv4 Address Allocation Considerations\n   The well-known name needs
      to map to two different global IPv4\n   addresses, which have been allocated
      as described in [RFC6890].  The\n   addresses have been taken from the IANA
      IPv4 Special Purpose Address\n   Registry [RFC6890], and 192.0.0.170 and 192.0.0.171
      have been\n   assigned to this document with the parameters shown below:\n          +----------------------+-------------------------------+\n
      \         | Attribute            | Value                         |\n          +----------------------+-------------------------------+\n
      \         | Address Block        | 192.0.0.170/32                |\n          |
      \                     | 192.0.0.171/32                |\n          | Name                 |
      NAT64/DNS64 Discovery         |\n          | RFC                  | RFC 7050,
      Section 2.2         |\n          | Allocation Date      | February 2013                 |\n
      \         | Termination Date     | N/A                           |\n          |
      Source               | False                         |\n          | Destination
      \         | False                         |\n          | Forwardable          |
      False                         |\n          | Global               | False                         |\n
      \         | Reserved-by-protocol | True                          |\n          +----------------------+-------------------------------+\n
      \     The Record for IPv4 Address Allocation for IPv4 Special Purpose\n                             Address
      Registry\n   The zone \"ipv4only.arpa.\" is delegated from the ARPA zone to\n
      \  appropriate name servers chosen by the IANA.  An apex A RRSet has\n   been
      inserted in the \"ipv4only.arpa.\" zone as follows:\n   IPV4ONLY.ARPA.  IN A
      192.0.0.170\n   IPV4ONLY.ARPA.  IN A 192.0.0.171\n"
    title: 8.2.  IPv4 Address Allocation Considerations
  - contents:
    - "8.3.  IAB Statement Regarding This .arpa Request\n   With the publication of
      this document, the IAB approves of the\n   delegation of \"ipv4only\" in the
      .arpa domain.  Under [RFC3172], the\n   IAB has requested that IANA delegate
      and provision \"ipv4only.arpa.\"\n   as written in this specification.  However,
      the IAB does not take any\n   architectural or technical position about this
      specification.\n"
    title: 8.3.  IAB Statement Regarding This .arpa Request
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgements\n   The authors would like to thank Dmitry Anipko, Cameron
    Byrne, Aaron\n   Yi Ding, Christian Huitema, Washam Fan, Peter Koch, Stephan\n
    \  Lagerholm, Zhenqiang Li, Simon Perreault, Marc Petit-Huguenin, Andrew\n   Sullivan,
    and Dave Thaler for significant improvement ideas and\n   comments.\n   Jouni
    Korhonen would like to acknowledge his previous employer, Nokia\n   Siemens Networks,
    where the majority of his work on this document was\n   carried out.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names
      - concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n
      \  [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC2119]  Bradner, S., \"Key words for
      use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D.,
      and S.\n              Rose, \"Protocol Modifications for the DNS Security\n
      \             Extensions\", RFC 4035, March 2005.\n   [RFC4443]  Conta, A.,
      Deering, S., and M. Gupta, \"Internet Control\n              Message Protocol
      (ICMPv6) for the Internet Protocol\n              Version 6 (IPv6) Specification\",
      RFC 4443, March 2006.\n   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair,
      M., and X.\n              Li, \"IPv6 Addressing of IPv4/IPv6 Translators\",
      RFC 6052,\n              October 2010.\n   [RFC6146]  Bagnulo, M., Matthews,
      P., and I. van Beijnum, \"Stateful\n              NAT64: Network Address and
      Protocol Translation from IPv6\n              Clients to IPv4 Servers\", RFC
      6146, April 2011.\n   [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P., and
      I. van\n              Beijnum, \"DNS64: DNS Extensions for Network Address\n
      \             Translation from IPv6 Clients to IPv4 Servers\", RFC 6147,\n              April
      2011.\n   [RFC6672]  Rose, S. and W. Wijngaards, \"DNAME Redirection in the\n
      \             DNS\", RFC 6672, June 2012.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC3172]  Huston, G., \"Management Guidelines
      & Operational\n              Requirements for the Address and Routing Parameter
      Area\n              Domain (\"arpa\")\", BCP 52, RFC 3172, September 2001.\n
      \  [RFC5735]  Cotton, M. and L. Vegoda, \"Special Use IPv4 Addresses\",\n              RFC
      5735, January 2010.\n   [RFC6144]  Baker, F., Li, X., Bao, C., and K. Yin, \"Framework
      for\n              IPv4/IPv6 Translation\", RFC 6144, April 2011.\n   [RFC6418]
      \ Blanchet, M. and P. Seite, \"Multiple Interfaces and\n              Provisioning
      Domains Problem Statement\", RFC 6418,\n              November 2011.\n   [RFC6761]
      \ Cheshire, S. and M. Krochmal, \"Special-Use Domain Names\",\n              RFC
      6761, February 2013.\n   [RFC6890]  Cotton, M., Vegoda, L., Bonica, R., and
      B. Haberman,\n              \"Special-Purpose IP Address Registries\", BCP 153,
      RFC\n              6890, April 2013.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Example of DNS Record Configuration\n   The following BIND-style
    examples illustrate how A and AAAA records\n   could be configured by a NAT64
    operator.\n   The examples use Pref64::/n of 2001:db8::/96, both WKAs, and the\n
    \  example.com domain.\n   The PTR record for reverse queries (Section 3.1.1,
    Bullet 3):\n   $ORIGIN A.A.0.0.0.0.0.C\\\n   .0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.IP6.ARPA.\n
    \  @         IN      SOA   ns1.example.com. hostmaster.example.com. (\n                           2003080800
    12h 15m 3w 2h)\n             IN      NS    ns.example.com.\n             IN      PTR
    \  nat64.example.com.\n   $ORIGIN B.A.0.0.0.0.0.C\\\n   .0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.IP6.ARPA.\n
    \  @         IN      SOA   ns1.example.com. hostmaster.example.com. (\n                           2003080800
    12h 15m 3w 2h)\n             IN      NS    ns.example.com.\n             IN      PTR
    \  nat64.example.com.\n   If example.com does not use DNSSEC, the following configuration
    file\n   could be used.  Please note that nat64.example.com has both a AAAA\n
    \  record with the Pref64::/n and an A record for the connectivity check\n   (Section
    3.1.1, Bullet 2).\n   example.com.  IN SOA  ns.example.com. hostmaster.example.com.
    (\n                         2002050501 ; serial\n                         100
    \       ; refresh (1 minute 40 seconds)\n                         200        ;
    retry (3 minutes 20 seconds)\n                         604800     ; expire (1
    week)\n                         100        ; minimum (1 minute 40 seconds)\n                         )\n
    \  example.com.  IN NS  ns.example.com.\n   nat64.example.com.\n                 IN
    AAAA  2001:db8:0:0:0:0:C000:00AA\n                 IN AAAA  2001:db8:0:0:0:0:C000:00AB\n
    \                IN A  192.0.2.1\n   For DNSSEC to sign the records, the owner
    of the example.com zone\n   would have RRSIG records for both the AAAA and A records
    for\n   nat64.example.com.  As a normal DNSSEC requirement, the zone and its\n
    \  parent also need to be signed.\n"
  title: Appendix A.  Example of DNS Record Configuration
- contents:
  - "Appendix B.  About the IPv4 Address for the Well-Known Name\n   The IPv4 addresses
    for the well-known name cannot be non-global IPv4\n   addresses as listed in the
    Section 3 of [RFC5735].  Otherwise, DNS64\n   servers might not perform AAAA record
    synthesis when the well-known\n   prefix is used, as stated in Section 3.1 of
    [RFC6052].  However, the\n   addresses do not have to be routable or allocated
    to any real node as\n   no communications will be initiated to these IPv4 address.\n
    \  Allocation of at least two IPv4 addresses improves the heuristics in\n   cases
    where the bit pattern of the primary IPv4 address appears more\n   than once in
    the synthetic IPv6 address (i.e., the NSP prefix\n   contains the same bit pattern
    as the IPv4 address).\n   If no well-known IPv4 addresses would be statically
    allocated for\n   this method, the heuristic would require sending of an additional
    A\n   query to learn the IPv4 addresses that would be then searched from\n   inside
    of the received IPv6 address.\n"
  title: Appendix B.  About the IPv4 Address for the Well-Known Name
- contents:
  - "Authors' Addresses\n   Teemu Savolainen\n   Nokia\n   Hermiankatu 12 D\n   FI-33720
    Tampere\n   Finland\n   EMail: teemu.savolainen@nokia.com\n   Jouni Korhonen\n
    \  Broadcom\n   Linnoitustie 6\n   FI-02600 Espoo\n   Finland\n   EMail: jouni.nospam@gmail.com\n
    \  Dan Wing\n   Cisco Systems\n   170 West Tasman Drive\n   San Jose, California
    \ 95134\n   USA\n   EMail: dwing@cisco.com\n"
  title: Authors' Addresses
