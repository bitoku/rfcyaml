- title: __initial_text__
  contents:
  - '                  How to Interact with a Whois++ Mesh

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: 1. Overview
  contents:
  - "1. Overview\n   In the Whois++ architecture [Deutsch94],[Weider94], mesh traversal\
    \ is\n   done by the client, since each server 'refers' the client to the next\n\
    \   appropriate server(s). The protocol is simple. The client opens a\n   connection\
    \ to a  server, sends a query, receives a reply, closes the\n   connection, and\
    \ after parsing the  response the client decides which\n   server to contact next,\
    \ if necessary.\n   So, the client needs to have an algorithm to follow when it\
    \ interacts\n   with the Whois++ mesh so that referral loops can be detected,\
    \ cost is\n   minimised, and appropriate servers are rapidly and effectively\n\
    \   contacted.\n"
- title: 2. Basic functionality
  contents:
  - "2. Basic functionality\n   Each Whois++ client should be configured to automatically\
    \ send\n   queries to a specific Whois++ server. The deault Whois++ server can\n\
    \   vary depending on which template is desired, and the location of the\n   client\
    \ with respect to the WHOIS++ index mesh,  but as a rule the\n   server should\
    \ be as local as possible.\n                        A\n                      \
    \ / \\\n                      B   C\n                     / \\   \\\n        \
    \   Z -----> D   E   F\n                   / \\\n                  G   H\n   \
    \    Fig 1: The client Z is configured to first query server D\n   After getting\
    \ responses from a server, the client can act in several\n   ways. If the number\
    \ of hits is greater than zero, the response is\n   just presented to the user.\
    \ If the client gets one or many servers-\n   to-ask answers, the client should\
    \ be able to automatically resolve\n   these pointers, i.e. query these servers\
    \ in turn.\n                        A\n                       / \\\n         \
    \             B   C\n                     / \\   \\\n           Z <----- D   E\
    \   F\n             \\     / \\\n              --> G   H\n   Fig 2: The client\
    \ Z gets a \"servers-to-ask G\" response from D and\n             therefore may\
    \ automatically queries server G.\n"
- title: 3. How to navigate in the mesh
  contents:
  - "3. How to navigate in the mesh\n   A client can use several different strategies\
    \ when traversing or\n   navigating around in the mesh. The automatic way of doing\
    \ this is to\n   just \"expand the search\" (described in 3.1) and a second method\
    \ is to\n   use the \"Directory of Servers\" (described in 3.2).\n"
- title: 3.1. Expansion of searches
  contents:
  - "3.1. Expansion of searches\n   If the number of hits is zero, or if the user\
    \ in some way wants to\n   expand the search, it is recommended for the client\
    \ to issue a\n   'polled-by' and 'polled-for' query to the server. The client\
    \ can then\n   repeat the original query to the new servers indicated.\n     \
    \                   A\n                       / \\\n              /-----> B  \
    \ C\n             /       / \\   \\\n           Z <----- D   E   F\n         \
    \          / \\\n                  G   H\n Fig 3: The client Z gets a \"polled-by\
    \ B\" response from D and therefore\n                           queries server\
    \ B.\n   The client must always keep track of which servers it has queried\n \
    \  because it must itself detect loops in the mesh by not querying the\n   same\
    \ server more than once.\n                        A\n                       /\
    \ \\\n                   /- B   C\n                  /  / \\   \\\n          \
    \ Z <---/  D   E   F\n                   / \\\n                  G   H\n  Fig\
    \ 4: The client Z gets a \"servers-to-ask D\" response from B but Z\n    does\
    \ not query D because the server D has already been queried.\n   So, the default\
    \ expansion of a query by a client causes increasingly\n   more comprenhensive\
    \ index servers to be queried; the forward\n   knowledge contained in the index\
    \ server mesh allows rapid pruning of\n   these larger trees.\n   All loop detection\
    \ and elimination is done in the client, rather than\n   in the server mesh. This\
    \ decision was made because loop detection and\n   elimination are quite difficult\
    \ to build into the mesh if we are to\n   continue to allow each server to participate\
    \ in multiple hierarchies\n   within the mesh.\n"
- title: 3.1.1. Optimising the mesh
  contents:
  - "3.1.1. Optimising the mesh\n   If organization A tends to use organization B's\
    \ WHOIS++ server\n   frequently, for example if A is cooperating in a project\
    \ with B, A\n   may wish to make B's server locally available by creating a local\n\
    \   index server which retrieves the centroid for both organizations.\n   When\
    \ A's client then expands a query which is looking for someone at\n   B, the client\
    \ can much more rapidly resolve the query, as it does not\n   have to find the\
    \ top level servers for the tree to which A and B both\n   belong.\n         \
    \               A\n                       / \\\n                      B   C\n\
    \                     / \\   \\\n           Z        D   --> F\n             \
    \      / \\\n                  G   H\n           Fig 5: The server B gets a centroid\
    \ from server F\n                        A\n                       / \\\n    \
    \                  B   C\n                     / \\   \\\n           Z <---->\
    \ D   --- F\n                   / \\\n                  G   H\n  Fig 6: The client\
    \ queries server D, gets zero hits back, expands the\n             search and\
    \ gets a \"polled-by B\" response back.\n                        A\n         \
    \              / \\\n                 /--> B   C\n                /    / \\  \
    \ \\\n           Z <-/    D   --- F\n                   / \\\n               \
    \   G   H\n    Fig 7: The client Z queries server B and gets \"servers-to-ask\
    \ F\"\n                             response back.\n                        A\n\
    \                       / \\\n                      B   C\n                  \
    \   / \\   \\\n                    D   --- F <-----> Z\n                   / \\\
    \n                  G   H\n       Fig 8: The client Z queries server F and gets\
    \ the answer.\n   The example given in Fig 5-8 shows that the algorithm works\
    \ even\n   though the Whois++ mesh is not a tree. There are many reasons why a\n\
    \   given index server mesh might be 'short-circuited'. For example, in\n   the\
    \ case of a multinational company, the Swedish branch of Acme Inc.,\n   is polled\
    \ both by the national server in Sweden and the headquarters\n   server in the\
    \ USA. By querying the Swedish server, one finds all\n   persons working at the\
    \ Swedish branch of Acme Inc., but by querying\n   the Acme Inc.  server in the\
    \ USA, you will find all employees in the\n   company, including those in Sweden.\n\
    \   Note that the location of a server does not implicitly narrow the\n   search,\
    \ i.e. you have to specify all information when sending a query\n   to a server.\
    \ In the example above, one can see that by just querying\n   a server for companies\
    \ in the USA, you will not implicitly only get\n   hits from records in the states,\
    \ because the Acme Inc. server in the\n   states has polled a server in Sweden.\
    \ So, in this case you have to\n   explicitly include \"country=USA\" in the query\
    \ if you are only\n   interested in those records.\n   Although the WHOIS++ index\
    \ service has been designed to make searches\n   at any location in the index\
    \ mesh quite effective and efficient,\n   blindly expanding the query can incur\
    \ an exponentially growing cost\n   in resources, and, as charging for responses\
    \ is implemented in parts\n   of the WHOIS++ index service mesh, growing cost,\
    \ automatic expansion\n   is not recommended. More sophisticated clients  should\
    \ also be\n   configurable to \"cut off\" some servers from a search, i.e. a\n\
    \   blacklist of servers. This might be needed when searching for records\n  \
    \ and one server might have a very high cost (in dollars) so one might\n   want\
    \ to explicitly forbid the client to send queries to that server.\n"
- title: 3.1.2. The algorithm used by the client
  contents:
  - "3.1.2. The algorithm used by the client\n   By following this algorithm a client\
    \ finds all records in a mesh\n   which the first Whois++ server queried belongs\
    \ to.\n   The algorithm for the client follows:\n      Query := data to search\
    \ for;\n      QueriedServers := {};\n      AnswerList := {};\n      OriginalServers\
    \ := { known servers to this client };\n      while OriginalServers is not empty\
    \ do:\n            ServerList = OriginalServers;\n            while ServerList\
    \ is not empty do:\n                  Server := ServerList[1];\n             \
    \     if Server is not in QueriedServers then do:\n                        send\
    \ Query to Server;\n                        Answer := answer from Server;\n  \
    \                      append ServersToAsk to ServerList;\n                  \
    \      remove Server from ServerList;\n                        append Answers\
    \ to AnswerList;\n                  end;\n            done;\n            if query\
    \ should be expanded then do:\n                  ServerList := OriginalServers;\n\
    \                  OriginalServers := {};\n                  while ServerList\
    \ is not empty do:\n                        Server := ServerList[1];\n       \
    \                 send Polled-For-Query to Server;\n                        Answer\
    \ := answer from Server;\n                        append Answer to OriginalServers;\n\
    \                        remove Server from ServerList;\n                  end;\n\
    \            done;\n      done;\n      display AnswerList to user;\n"
- title: 3.2. The Directory of Servers
  contents:
  - "3.2. The Directory of Servers\n   A second way of finding the correct server\
    \ to query is to use a\n   separate service we call the Directory of Servers.\
    \ The Directory of\n   Servers is a special Whois++ server which polls every Whois++\
    \ server\n   for information about common information among the records on that\n\
    \   perticular server.\n"
- title: 3.2.1. How should a client use the Directory of Servers?
  contents:
  - "3.2.1. How should a client use the Directory of Servers?\n   A client that want\
    \ to very quickly find what servers serves USER\n   templates in Sweden, should\
    \ do it this way:\n   1) The hostname and portnumber of the directory of Servers\
    \ have\n      to be preconfigured in the current version of the protocol.\n  \
    \ 2) Query the Directory of Servers for serverhandle records for\n      country\
    \ sweden. This gives information of all these servers.\n      By presenting this\
    \ information to the user the user should be\n      able to start the search at\
    \ some closer server.\n   Note that we at this moment doesn't think this should\
    \ be an autmatic\n   process in the client. The Directory of Servers should be\
    \ used for\n   giving the user information about what Whois++ servers that exists.\n\
    \   In the future a technique might have developed that makes it possible\n  \
    \ for a client to do this selection automatically depending on the\n   query the\
    \ user issues.\n"
- title: 3.2.2. What does the serverhandle record look like?
  contents:
  - "3.2.2. What does the serverhandle record look like?\n   The attributes that must\
    \ be in all serverhandle records are:\n   Server-Handle: The handle for this server.\n\
    \   Host-Name:     The (current) hostname of this server.\n   Host-Port:     The\
    \ (current) portnumber for this server.\n   Part from that information, the record\
    \ can include other attributes\n   like:\n   Admin-Name:        Patrik Faltstrom\n\
    \   Admin-Email:       paf@bunyip.com\n   Admin-Phone:       +1-514-875-8611\n\
    \   Organization-Name: Bunyip Information Systems Inc.\n   Description:      \
    \ USER information\n   Menu-Item:         World (Bunyip Information Systems inc)\n\
    \   City:              Montreal\n   State:             Quebec\n   Country:   \
    \        Canada\n   :\n   :\n   (Other attributes that can identify all records\
    \ on this server, for\n   example domainname)\n   The information in the Navigation\
    \ record is intended to be presented\n   to a user.\n"
- title: 3.2.3. Example
  contents:
  - "3.2.3. Example\n   An example of how an interaction with the Directory of Servers\
    \ is\n   done follows. The characters '<' and '>' displays if it is the client\n\
    \   ('<') or responding server ('>') which is responsible for the output:\n"
- title: '> % 220-This is services.bunyip.com running Bunyip-Whois++: DIGGER 1.0.5'
  contents:
  - '> % 220-This is services.bunyip.com running Bunyip-Whois++: DIGGER 1.0.5

    '
- title: '> % 220 Ready to go!'
  contents:
  - '> % 220 Ready to go!

    '
- title: < template=serverhandle and bunyip
  contents:
  - '< template=serverhandle and bunyip

    '
- title: '> % 200 Search is executing'
  contents:
  - '> % 200 Search is executing

    '
- title: '> # FULL SERVERHANDLE BUNYIPCOM01 BUNYIPCOM01'
  contents:
  - '> # FULL SERVERHANDLE BUNYIPCOM01 BUNYIPCOM01

    '
- title: '>  SERVER-HANDLE: BUNYIPCOM01'
  contents:
  - '>  SERVER-HANDLE: BUNYIPCOM01

    '
- title: '>  HOST-NAME: services.bunyip.com'
  contents:
  - '>  HOST-NAME: services.bunyip.com

    '
- title: '>  HOST-PORT: 63'
  contents:
  - '>  HOST-PORT: 63

    '
- title: '>  ADMIN-NAME: Patrik Faltstrom'
  contents:
  - '>  ADMIN-NAME: Patrik Faltstrom

    '
- title: '>  ADMIN-EMAIL: paf@bunyip.com'
  contents:
  - '>  ADMIN-EMAIL: paf@bunyip.com

    '
- title: '>  ORGANIZATION-NAME: Bunyip Information Systems Inc.'
  contents:
  - '>  ORGANIZATION-NAME: Bunyip Information Systems Inc.

    '
- title: '>  DESCRIPTION: USER information'
  contents:
  - '>  DESCRIPTION: USER information

    '
- title: '>  DESCRIPTION: Directory of Servers'
  contents:
  - '>  DESCRIPTION: Directory of Servers

    '
- title: '>  DESCRIPTION: Toplevel Index server in the world'
  contents:
  - '>  DESCRIPTION: Toplevel Index server in the world

    '
- title: '>  MENU-ITEM: World (Bunyip Information Systems inc)'
  contents:
  - '>  MENU-ITEM: World (Bunyip Information Systems inc)

    '
- title: '>  CITY: Montreal'
  contents:
  - '>  CITY: Montreal

    '
- title: '>  COUNTRY: Canada'
  contents:
  - '>  COUNTRY: Canada

    '
- title: '> # END'
  contents:
  - '> # END

    '
- title: '>'
  contents:
  - '>

    '
- title: '> # FULL SERVERHANDLE BUNYIPCOM01 BUNYIPCOM02'
  contents:
  - '> # FULL SERVERHANDLE BUNYIPCOM01 BUNYIPCOM02

    '
- title: '>  SERVER-HANDLE: BUNYIPCOM02'
  contents:
  - '>  SERVER-HANDLE: BUNYIPCOM02

    '
- title: '>  HOST-NAME: services.bunyip.com'
  contents:
  - '>  HOST-NAME: services.bunyip.com

    '
- title: '>  HOST-PORT: 7778'
  contents:
  - '>  HOST-PORT: 7778

    '
- title: '>  ADMIN-NAME: Patrik Faltstrom'
  contents:
  - '>  ADMIN-NAME: Patrik Faltstrom

    '
- title: '>  ADMIN-EMAIL: paf@bunyip.com'
  contents:
  - '>  ADMIN-EMAIL: paf@bunyip.com

    '
- title: '>  ORGANIZATION-NAME: Bunyip Information Systems Inc.'
  contents:
  - '>  ORGANIZATION-NAME: Bunyip Information Systems Inc.

    '
- title: '>  DESCRIPTION: USER information'
  contents:
  - '>  DESCRIPTION: USER information

    '
- title: '>  MENU-ITEM: Bunyip Information Systems'
  contents:
  - '>  MENU-ITEM: Bunyip Information Systems

    '
- title: '>  CITY: Montreal'
  contents:
  - '>  CITY: Montreal

    '
- title: '>  COUNTRY: Canada'
  contents:
  - '>  COUNTRY: Canada

    '
- title: '> # END'
  contents:
  - '> # END

    '
- title: '>'
  contents:
  - '>

    '
- title: '> % 226 Transaction complete'
  contents:
  - '> % 226 Transaction complete

    '
- title: '> % 203 Bye, bye'
  contents:
  - '> % 203 Bye, bye

    '
- title: 4. Caching
  contents:
  - "4. Caching\n   A client can cache all information it gets from a server for some\n\
    \   time.  For example records, IP-addresses of Whois++ servers, the\n   Directory\
    \ of Services server etc.\n   A client can itself choose for how long it should\
    \ cache the\n   information.\n   The IP-address of the Directory of Services server\
    \ might not change\n   for a day or two, and neither might any other information.\n"
- title: 4.1. Caching a Whois++ servers hostname
  contents:
  - "4.1. Caching a Whois++ servers hostname\n   An example of cached information\
    \ that might change is the chached\n   hostname, IP-address and portnumber which\
    \ a client gets back in a\n   servers-to-ask response. That information is cached\
    \ in the server\n   since the last poll, which might occurred several weeks ago.\n\
    \   Therefore, when such a connection fails, the client should fall back\n   to\
    \ use the serverhandle insted, which means that it contacts the\n   Directory\
    \ of Services server and queries for a server with that\n   serverhandle.  By\
    \ doing this, the client should always get the last\n   known hostname.\n   An\
    \ algorithm for this might be:\n  response := servers-to-ask response from server\
    \ A\n  IP-address := find ip-address for response.hostname in DNS\n  connect to\
    \ ip-address at port response.portnumber\n  if connection fails {\n     connect\
    \ to Directory of Services server\n     query for host with serverhandle response.serverhandle\n\
    \     response := response from Directory of Services server\n     IP-address\
    \ := find ip-address for response.hostname in DNS\n     connect to ip-address\
    \ at port response.portnumber\n     if connection fails {\n         exit with\
    \ error message\n     }\n   }\n   Query this new server\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security considerations when using the Whois++\
    \ protocol is described\n   in [Deutsch94].\n   A client should be able to have\
    \ a \"blacklist\" of servers it should\n   not query, because it might happen\
    \ that fake Whois++ servers is put\n   up on the net. When such a fake Whois++\
    \ servers is found, a user\n   should be able to configure it's client to never\
    \ query this server.\n   Note that a client should be careful when expanding a\
    \ query by either\n   using normal expansion or using the directory of servers.\
    \ A query\n   might take a long time, so a user should be able to quit in the\n\
    \   middle of such a transaction. This is though more a question of user\n   interaction\
    \ than a plain security issue.\n"
- title: 6. References
  contents:
  - "6. References\n   [Deutsch94]  Deutsch P., Schoultz R., Faltstrom P., and C.\
    \ Weider,\n                \"Architecture of the Whois++ service\", RFC 1835,\n\
    \                August 1995.\n   [Weider94]   Weider C., Fullton J., and S. Spero,\
    \ \"Architecture of\n                the WHOIS++ Index Service\", RFC 1913, February\
    \ 1996.\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   Patrik Faltstrom\n   BUNYIP INFORMATION SYSTEMS, inc\n\
    \   310 St Catherine St West, Suite 300\n   Montreal, Quebec\n   CANADA H2X 2A1\n\
    \   EMail: paf@bunyip.com\n   Rickard Schoultz\n   KTHNOC, SUNET/NORDUnet/Ebone\
    \ Operations Centre\n   S-100 44  STOCKHOLM\n   SWEDEN\n   EMail: schoultz@sunet.se\n\
    \   Chris Weider\n   BUNYIP INFORMATION SYSTEMS, inc\n   310 St Catherine St West,\
    \ Suite 300\n   Montreal, Quebec\n   CANADA H2X 2A1\n   EMail: clw@bunyip.com\n"
