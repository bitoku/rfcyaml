- title: __initial_text__
  contents:
  - "Network Working Group\nRFC #684\nNIC #32252\nApril 15,1975\n    A Commentary\
    \ on Procedure Calling as a Network Protocol\n                        Richard\
    \ Schantz\n                           BBN-TENEX\nPreface_______\nThis RFC is being\
    \ issued as a first step in an attempt to  stimulate\na dialog on some issues\
    \ in designing a distributed computing system.\nIn particular, it considers the\
    \ approach taken in a design set forth\nin  RFC #674, commonly known as the \"\
    Procedure Call Protocol\" (PCP).\nIn the present document, the concentration is\
    \ on what we believe  to\nbe the shortcomings of such a design approach.\nNote\
    \ at the outset that this is not the first time we are  providing\na critical\
    \ commentary on PCP.  During the earlier PCP design stages,\nwe met with the PCP\
    \ designers for  a  brief  period,  and  suggested\nseveral  changes,  many  of\
    \  which became part of PCP Version 2.  We\nhasten to add, however, that the nature\
    \ of  those  suggestions  stem\nfrom  an entirely different point of view than\
    \ those presented here.\nOur original suggestions, and also some subsequent ones,\
    \ were mainly\naddressing  details  of implementation.  In this note the concern\
    \ is\nmore with the concepts underlying the PCP design than with  the  PCP\nimplementation.\n\
    This note is being  distributed  because  we  feel  that  it  raises\ncertain\
    \  issues  which  have not been adequately addressed yet.  The\nPCP designers\
    \ are to  be  congratulated  for  providing  a  detailed\nwritten  description\
    \  of  their  ideas,  thereby  creating a natural\nstarting  point  for  a  discussion\
    \  of  distributed  system  design\nconcepts.  It is the intent of this note to\
    \ stimulate an interaction\namong individuals involved with distributed computing,\
    \  which  could\nperhaps  result in systems whose designs don't preclude their\
    \ use in\nprojects  other  than  the  one  for  which  they  were   originally\n\
    conceived.\nIntroduction____________\n     While the Procedure Call Protocol (PCP)\
    \ and its use within  the\nNational  Software  Works (NSW) context attacks many\
    \ of the problems\nassociated with integrating independent computing systems to\
    \  handle\na  distributed  computation,  it  is  our  feeling  that  its design\n\
    contains flaws which should prevent its widespread use, and  in  our\nview,  limit\
    \  its overall utility.  We are not voicing our objection\nto the use of PCP,\
    \ in its current  definition,  as  the  base  level\nimplementation  vehicle for\
    \ the NSW project.  It is already too late\nfor any such objection, and PCP may,\
    \ in fact, be very effective  for\nthe  NSW  implementation,  since they are proceeding\
    \ in parallel and\nhave probably influenced each other.   Rather,  we  are  voicing\
    \  an\nobjection  to  the  \"PCP philosophy\", in the hope of preventing this\n\
    type of protocol from becoming the  de-facto  network  standard  for\ndistributed\
    \  computation,  and in the hope of influencing the future\ndirection of this\
    \ and similar efforts.\n     Some of the objectionable aspects of PCP, it can\
    \ be argued, are\ndifferences  of  individual  preference, and philosophers have\
    \ often\nindicated that you cannot argue about  tastes.   We  have  tried  to\n\
    avoid  such  arguments in this document.  Rather, we consider PCP in\nlight  of\
    \  our  experience  in   developing   distributed   systems.\nConsidered  in \
    \ this  way,  we  feel  that  PCP  and  its underlying\nphilosophy have flaws\
    \ which  make  it  inappropriate  as  a  general\npurpose protocol and virtual\
    \ programming system for the construction\nof distributed software systems.  It\
    \ is  our  opinion  that  PCP  is\nprobably  complete  in  the  sense that one\
    \ can probably do anything\nthat is required using its primitives.  A key  issue\
    \  then,  is  not\nwhether this function or that function can be supported.  Rather,\
    \ to\nus an important question is how easy it is to do  the  things  which\nexperience\
    \ has indicated are important to distributed computing.  In\naddition, a programming\
    \ discipline dedicated to network applications\nshould  pay  particular  attention\
    \  to  coercing its users away from\nactions which systems programming in general\
    \ and network programming\nin particular have shown to be pitfalls in system implementation.\n\
    A Point of View_ _____ __ ____\n     At the outset, we fully support the aspects\
    \ of the  PCP  design\neffort  that  have  gone  into  systematizing  the  interaction\
    \  and\nagreements between distributed  elements  to  support  inter-machine\n\
    computing.   This  includes  the  definition of the various types of\nreplies,\
    \ the  standardization  of  the  data  structure  format  for\ninter-machine \
    \ exchange,  and  the process creation primitives which\n     Rather, we take\
    \ exception to PCP's underlying premise: that the\nprocedure  calling  discipline\
    \  is  the  starting point for building\nmulti-computer systems.  This premise\
    \ leads to a model which  has  a\ncentral  point  for the entire algorithm control,\
    \ rather than a more\nnatural (in network situations) distributed control accomplished\
    \  by\ncooperating   independent   entities   interacting   through  common\n\
    communication paths.  While the procedure call may be an appropriate\nbasis  for\
    \  certain  applications,  we  believe  that it can neither\ndirectly  nor  accurately\
    \  model  the   interactions   and   control\nstructures that occur in many distributed\
    \ multi-computer systems.\n     Much of what follows may seem to be a pedagogic\
    \  argument,  and\nPCP supporters may take the position of \"who cares what you\
    \ call it,\nits doing the same thing\".  Our reply is that it is  very  important\n\
    to achieve a clear and concise model of distributed computation, and\nwhile the\
    \ PCP  model  does  not  require  \"poor  implementation\"  of\ndistributed  systems,\
    \ neither does it make \"good implementation\" any\neasier, nor does it prohibit\
    \ ill-advised programming  practices.   A\nmodel  stressing the dynamic interconnection\
    \ of somewhat independent\ncomputing  entities,  we  feel,  adheres  more  to\
    \  the  notions  of\ndefensive  programming,  which  we  have  found to be fundamental\
    \ to\nbuilding usable multi-machine implementations.\n     The rest of this RFC\
    \ discusses what we feel to be some  of  the\nshortcomings of a procedure call\
    \ protocol.\nLimitations of Procedure Calling Across Machines___________ __ _________\
    \ _______ ______ ________\n     First and foremost, it is our contention that\
    \ procedure calling\nshould  not  be  the  basis for multi-machine interactions.\
    \  We feel\nthat a request and reply protocol along  with  suitably  manipulated\n\
    communication paths between processes forms a model better suited to\nthe situation\
    \  in  which  the  network  places  us.   In  a  network\nenvironment  one has\
    \ autonomous computing entities which have agreed\non their cooperation, rather\
    \ than a master process forcing execution\nof a certain body of code to fulfill\
    \ its computing needs.  In such a\nconfiguration, actions required of a process\
    \ are  best  accommodated\nindirectly (by request) rather than directly (by procedure\
    \ call), in\norder to maintain the integrity of the constituent processes.\n \
    \    Procedure calling is most  often  a  very  primitive  operation\nwhose  \
    \ implementation   often   requires   only  a  single  machine\ninstruction. \
    \ In addition, it is usually true that procedure calling\nis  usually  not  within\
    \  the  domain of the operating system.  [The\nMultics intersegment procedure\
    \  calling  mechanism  may  present  an\nexception  to  this,  until  linkage\
    \ is complete.  In the remote PCP\ncase, however, linkage  can  never  be  complete\
    \  in  the  sense  of\nsupporting  a  fast transfer of control between modules].\
    \  Processes\ndistinction  between  a local (inexpensive in time and effort) and\
    \ a\nremote procedure call, which obviously  requires  a  great  deal  of\neffort\
    \  by  the \"PCP system\", if not by the PCP user.  It also seems\nto  be  the\
    \  case  that  the  cost  of  blurring  the   local/remote\ndistinction  at  the\
    \  procedure call level will be found in the more\nfrequent use of a less efficient\
    \ local procedure calling  mechanism.\nInterprocess communication, on the other\
    \ hand, (at least with regard\nto stream or  message  oriented  channels  and\
    \  not  just  interrupt\nsignals)   is  generally  regarded  as  having  a  significant\
    \  cost\nassociated with it.   Message  sending  is  always  an  interprocess\n\
    action,  and  requires  system intervention always.  There is not as\nsubstantial\
    \ a difference between the IPC of local processes and  the\nIPC  of  remote  processes,\
    \  as  between  local and remote procedure\ncalling.  PCP is suggestive of a model\
    \ in which processes exist that\nspan machine boundaries to provide inter-machine\
    \ subroutine calling.\nYet the PCP documentation has not advocated the notion\
    \ of a  process\nthat  spans  machine  boundaries,  and  rightfully  so  since\
    \ such a\ncreation would cause innumerable problems.  Since procedure  calling\n\
    is more suitable as an intra-process notion, it seems to be a better\nidea to\
    \ take the interprocess communication framework and extend  it\nto  have  a uniform\
    \ interpretation locally and remotely, rather than\nto extend the procedure calling\
    \ model.  It is  also  our  contention\nthat  a  model  which relies on procedure\
    \ calling for its basis does\nnot take into account the special nature of the\
    \ network environment,\nand  that  such  an  environment  can  be more suitably\
    \ handled in a\nmessage passing model.  Furthermore, we feel that programming\
    \  as  a\nwhole,  even  purely  local computing, will benefit from paying more\n\
    attention to such areas as reliability and  robustness,  which  have\nbeen  brought\
    \ to the forefront through experience with an oftentimes\nunreliable network and\
    \  collection  of  hosts.   An  IPC  model,  by\nemphasizing  the  connections\
    \  between  disjoint processes, seems to\nreinforce the idea that distributed\
    \  computing  is  accomplished  by\njoining  separate entities, and that defensive\
    \ programming and error\nhandling techniques are appropriate.  Since PCP is, \
    \ we  think,  for\ndistributed  system  builders,  and  not  for  the end user\
    \ (e.g. an\nRSEXEC user), avoiding  the  network,  interconnection  issues,  and\n\
    relative  costs, may be counter-productive if the goal is to achieve\nusable network\
    \ systems.\n     In a similar vein, the entire notion of inter-machine procedure\n\
    calling  underlies  a model which in effect has extended the address\nspace of\
    \ a single process.  That is, there  is  a  single  locus  of\nalgorithm   control\
    \   (although   perhaps  not  a  single  locus  of\nexecution).  While this model\
    \ may well serve the needs of a  \"local\"\ncomputation  where  the  parts  are\
    \  strongly  bound  together,  our\nexperience in building working distributed\
    \  systems  has  shown  the\nutility of a model which has multiple loci of control\
    \ and execution.\nIn such a model, it is through agreements on the method and\
    \ type  of\ninformation  interchange  and synchronization, that a computation\
    \ is\ncarried out, rather than at the  singular  direction  of  a  central\n \
    \    The  unmistakable  trend  in  systems  programming  is   toward\ninviolable\
    \    (protected)    process    structures   with   external\nsynchronization as\
    \ a means of coping with  complex  debugging  tasks\nand  the  difficulty of making\
    \ system changes.  This trend is better\nsupported, we feel, by a message passing\
    \ rather  than  a  procedural\nmodel of computation.  Furthermore, we feel that\
    \ network programming\ntechniques should be applied to local computation, not\
    \ the other way\naround.\nSome Particulars____ ___________\n     In the following\
    \ list, we try to be more specific with  respect\nto  particular situations where\
    \ we think the PCP concept may be weak\nas the basis for a network programming\
    \ system.  For  some  of  these\nexamples to be meaningful, the reader should\
    \ be fairly familiar with\nthe PCP documents issued as RFC 674.\n       1.  Recovery\
    \  from  component  malfunction  may  be  very\n    difficult  to  handle  by\
    \  a process that is not the central\n    control (i.e.  a  process  which  is\
    \  being  manipulated  by\n    having  its  procedures  executed).   Is the situation\
    \ where\n    there is network trouble, for example, to be  modeled  by  a\n  \
    \  forced procedure call to some error recovery routine?  It is\n    precisely\
    \ such situations where distributed  control  serves\n    as  a  better  model.\
    \   Consider  the  act of introducing an\n    inferior to another acquaintance\
    \ and then supplying the  new\n    handle  as a parameter of a subsequent procedure\
    \ call in the\n    inferior.  The inferior's blind  use  of  the  parameter  to\n\
    \    interact with the other process illustrates the manipulative\n    aspects\
    \ of a superior.  The inferior never really  is  aware\n    of  a new communication\
    \ path to a new process.  The inferior\n    environment (as maintained by the\
    \  PCP  \"system\")  has  been\n    changed  by the superior, with no active notification\
    \ of the\n    inferior.  Certainly this makes user  coded  error  recovery\n \
    \   somewhat awkward.\n       2.  Such process manipulation may at  times  violate\
    \  the\n    principles  of  modular programming.  In this vein, it seems\n   \
    \ beneficial to be able to debug separately the  pieces  of  a\n    computation\
    \  and then worry only about their synchronization\n    to achieve a totally \
    \ debugged  system.   With  PCP  in  its\n    fullest sense, the danger of error\
    \ propagation seems greater\n    because of the power of a process to cause execution\
    \  of  an\n    arbitrary  procedure  and  to  read/write remote data stores\n\
    \    without the active participation of the remote process.\n       3.  Can we\
    \ assume a proper initialization sequence if our\n    procedures   are  called\
    \  remotely?   Must  every  procedure\n    conveniently apply protective standards\
    \ to the code and data\n    it encompasses.\n       4.  PCP doesn't model long\
    \ term parallel  activity  in  a\n    convenient   fashion,  as  is  required\
    \  to  handle  various\n    asynchronous producer/consumer process  relationships.\
    \   The\n    synchronization  is  geared  more  to  a one-to-one call and\n  \
    \  return, rather than to the asynchronous nature and  multiple\n    returns \
    \ for  a single request, as exhibited by many network\n    services.  In addition,\
    \ low priority, preemptable background\n    tasks  are  hard  (impossible?) to\
    \ model in a procedure call\n    environment.\n       5.  Communication  paths\
    \  are  not  treated  as  abstract\n    objects  which are independent from the\
    \ actual entities they\n    connect, and hence they cannot be utilized  in  some\
    \  useful\n    ways (e.g. to carry non PCP messages).  Also with respect to\n\
    \    treating communication paths as objects, there is no concept\n    of  passing\
    \  a  communication  path  to  an  inferior (or an\n    acquaintance), without\
    \ having to create a  new  \"connection\"\n    (whether  or  not  this turns out\
    \ to be a physical channel).\n    The ability to pass communication paths is often\
    \  useful  in\n    subcontracting  requests  to inferior processes.  To do this\n\
    \    within PCP requires the cooperation of the  calling  process\n    (i.e. to\
    \  use  the new connection handle), which again seems\n    to  violate  the  concepts\
    \  of  modular  programming.    The\n    alternative  approach  in  PCP is to\
    \ have the superior relay\n    the subsequent communications to its created  inferior,\
    \  but\n    the  effort involved would probably prohibit the use of this\n   \
    \ technique for subcontracting.\n       6.  PCP seems too complicated to be used\
    \ for the type  of\n    processing  which  requires  periodic but short (i.e.\
    \  a few\n    words  exchanged)  interactions.    An   example   of   such\n \
    \   interactions  is  the  way the TIP uses the TENEX accounting\n    servers\
    \ (see RFC #672).  Furthermore, PCP is  probably  much\n    too  complex  for\
    \  implementation  on a small host.  In that\n    regard, there does not seem\
    \ to be a definition of what might\n    constitute a minimum implementation for\
    \ a host/process which\n    did/could not handle all of what has been developed.\n\
    \       7.  In the PCP model, it may become awkward  or  resource\n    consuming\
    \  for  a service program to do such things as queue\n    operations for execution\
    \ at a later time (persistence) or at\n    a  more opportune time (priority servicing\
    \ mechanism).  Such\n    implementations may require dummy returns  and  modification\n\
    \    of   the   controlling   fork  concept,  or  maintenance  of\n    processing\
    \ forks over long periods of inactivity.\n       8.  It is not  always  true \
    \ that  a  process  connecting\n    to it and then introducing it  to  an  arbitrary\
    \  number  of\n    processes,  thereby  overflowing  the  table  space  in that\n\
    \    process.  All of that could  have  been  done  without  ever\n    executing\
    \  a  single instruction of user written code.  This\n    difficulty is a consequence\
    \ of the PCP notion of having  one\n    process  manipulate  the  environment\
    \ of another without its\n    active participation in such actions.\n       9.\
    \   Doesn't  the  fact  that  the  network  PCP  process\n    implementation \
    \ is so much neater than the TENEX PCP process\n    implementation (since  TENEX\
    \  doesn't  have  a  general  IPC\n    facility)  suggest  that  message  passing\
    \ and communication\n    facilities supported by the \"system\" provides a sound\
    \  basis\n    for  multi-process  implementations,  and  that perhaps such\n \
    \   facilities  should   be   primitively   available   to   the\n    distributed\
    \ system builders who will use PCP?\n       10.   There  is  a  question  of \
    \ whether   PCP   is   an\n    implementation virtual machine (language), or an\
    \ application\n    virtual machine (language).  That is, is PCP intended to  be\n\
    \    used   to   implement   systems   which  manage  distributed\n    resources,\
    \ or as an end  product  which  makes  the  network\n    resources  themselves\
    \  easier  to  use  for  the  every day,\n    ordinary  programmer  (e.g.   makes\
    \   the   network   itself\n    transparent  to  users).   One  gets  the  feeling\
    \  that the\n    designers had both goals, and that neither one is completely\n\
    \    satisfied.   If  the  former  goal is taken, we believe that\n    most of\
    \ the  complexities  (e.g.   network  trouble,  broken\n    connections,   etc.)\
    \   and  possibilities  (e.g.   redundant\n    implementation,  broadcast   request,\
    \   etc.)   of   network\n    implementations  are  not  provided for adequately.\
    \  In this\n    view,  the  NSW  framework  (Works  manager,  FE)   is   the\n\
    \    distributed  system  that  utilizes  the  PCP implementation\n    language.\
    \  We do not see how the use of PCP in this  context\n    provides   for   either\
    \  an  extra-reliable  system  through\n    component redundancy,  or  a  persistent\
    \  system  which  can\n    tolerate  temporary malfunctions.  If one subscribes\
    \ to this\n    view, then it doesn't seem right that the objects  that  run\n\
    \    under the created system (i.e.  the tools that run under the\n    PCP implemented\
    \ Front End, Works Manager, and  TBH  monitor)\n    should  also  be  aware of\
    \ or use PCP.  If one considers the\n    latter goal, that PCP implements a  virtual\
    \  machine  to  be\n    presented   to   all   programmers  for  making  distributed\n\
    \    resources easy to use, then it is clear that  PCP  with  its\n    manifest\
    \  concern  for  object location does not provide for\n    the desireable properties\
    \ of network transparency.\nOur conclusion is that procedure  calling  is  not\
    \  the  appropriate\nbasis  for distributed multi-computer systems because it\
    \ can neither\ndirectly nor accurately model  the  network  environment.   The\
    \  PCP\n"
