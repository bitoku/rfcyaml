- title: __initial_text__
  contents:
  - "                 Test Cases for HMAC-MD5 and HMAC-SHA-1\nStatus of This Memo\n\
    \   This memo provides information for the Internet community.  This memo\n  \
    \ does not specify an Internet standard of any kind.  Distribution of\n   this\
    \ memo is unlimited.\nAbstract\n   This document provides two sets of test cases\
    \ for HMAC-MD5 and HMAC-\n   SHA-1, respectively. HMAC-MD5 and HMAC-SHA-1 are\
    \ two constructs of\n   the HMAC [HMAC] message authentication function using\
    \ the MD5 [MD5]\n   hash function and the SHA-1 [SHA] hash function. Both constructs\
    \ are\n   used by IPSEC [OG,CG] and other protocols to authenticate messages.\n\
    \   The test cases and results provided in this document are meant to be\n   used\
    \ as a conformance test for HMAC-MD5 and HMAC-SHA-1\n   implementations.\n1. Introduction\n\
    \   The general method for constructing a HMAC message authentication\n   function\
    \ using a particular hash function is described in section 2\n   of [HMAC]. We\
    \ will not repeat the description here. Section 5 of\n   [HMAC] also discusses\
    \ truncating the output of HMAC; the rule is that\n   we should keep the more\
    \ significant bits (the bits in the left,\n   assuming a network byte order (big-endian)).\n\
    \   In sections 2 and 3 we provide test cases for HMAC-MD5 and HMAC-SHA-\n   1,\
    \ respectively. Each case includes the key, the data, and the\n   result.  The\
    \ values of keys and data are either hexadecimal numbers\n   (prefixed by \"0x\"\
    ) or ASCII character strings in double quotes. If a\n   value is an ASCII character\
    \ string, then the HMAC computation for the\n   corresponding test case DOES NOT\
    \ include the trailing null character\n   ('\\0') in the string.\n   The C source\
    \ code of the functions used to generate HMAC-SHA-1\n   results is listed in the\
    \ Appendix. Note that these functions are\n   meant to be simple and easy to understand;\
    \ they are not optimized in\n   any way. The C source code for computing HMAC-MD5\
    \ can be found in\n   [MD5]; or you can do a simple modification to HMAC-SHA-1\
    \ code to get\n   HMAC-MD5 code, as explained in the Appendix.\n   The test cases\
    \ in this document are cross-verified by three\n   independent implementations,\
    \ one from NIST and two from IBM Research.\n   One IBM implementation uses optimized\
    \ code that is very different\n   from the code in the Appendix. An implemenation\
    \ that concurs with the\n   results provided in this document should be interoperable\
    \ with other\n   similar implemenations.  We do not claim that such an implementation\n\
    \   is absolutely correct with respect to the HMAC definition in [HMAC].\n2. Test\
    \ Cases for HMAC-MD5\ntest_case =     1\nkey =           0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n\
    key_len =       16\ndata =          \"Hi There\"\ndata_len =      8\ndigest =\
    \        0x9294727a3638bb1c13f48ef8158bfc9d\ntest_case =     2\nkey =        \
    \   \"Jefe\"\nkey_len =       4\ndata =          \"what do ya want for nothing?\"\
    \ndata_len =      28\ndigest =        0x750c783e6ab0b503eaa86e310a5db738\ntest_case\
    \ =     3\nkey =           0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nkey_len       \
    \  16\ndata =          0xdd repeated 50 times\ndata_len =      50\ndigest =  \
    \      0x56be34521d144c88dbb8c733f0e8b3f6\ntest_case =     4\nkey =          \
    \ 0x0102030405060708090a0b0c0d0e0f10111213141516171819\nkey_len         25\ndata\
    \ =          0xcd repeated 50 times\ndata_len =      50\ndigest =        0x697eaf0aca3a3aea3a75164746ffaa79\n\
    test_case =     5\nkey =           0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c\nkey_len\
    \ =       16\ndata =          \"Test With Truncation\"\ndata_len =      20\ndigest\
    \ =        0x56461ef2342edc00f9bab995690efd4c\ndigest-96       0x56461ef2342edc00f9bab995\n\
    test_case =     6\nkey =           0xaa repeated 80 times\nkey_len =       80\n\
    data =          \"Test Using Larger Than Block-Size Key - Hash Key First\"\ndata_len\
    \ =      54\ndigest =        0x6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd\ntest_case = \
    \    7\nkey =           0xaa repeated 80 times\nkey_len =       80\ndata =   \
    \       \"Test Using Larger Than Block-Size Key and Larger\n                Than\
    \ One Block-Size Data\"\ndata_len =      73\ndigest =        0x6f630fad67cda0ee1fb1f562db3aa53e\n\
    3. Test Cases for HMAC-SHA-1\ntest_case =     1\nkey =           0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n\
    key_len =       20\ndata =          \"Hi There\"\ndata_len =      8\ndigest =\
    \        0xb617318655057264e28bc0b6fb378c8ef146be00\ntest_case =     2\nkey =\
    \           \"Jefe\"\nkey_len =       4\ndata =          \"what do ya want for\
    \ nothing?\"\ndata_len =      28\ndigest =        0xeffcdf6ae5eb2fa2d27416d5f184df9c259a7c79\n\
    test_case =     3\nkey =           0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\
    key_len =       20\ndata =          0xdd repeated 50 times\ndata_len =      50\n\
    digest =        0x125d7342b9ac11cd91a39af48aa17b4f63f175d3\ntest_case =     4\n\
    key =           0x0102030405060708090a0b0c0d0e0f10111213141516171819\nkey_len\
    \ =       25\ndata =          0xcd repeated 50 times\ndata_len =      50\ndigest\
    \ =        0x4c9007f4026250c6bc8414f9bf50c86c2d7235da\ntest_case =     5\nkey\
    \ =           0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c\nkey_len =       20\n\
    data =          \"Test With Truncation\"\ndata_len =      20\ndigest =       \
    \ 0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04\ndigest-96 =     0x4c1a03424b55e07fe7f27be1\n\
    test_case =     6\nkey =           0xaa repeated 80 times\nkey_len =       80\n\
    data =          \"Test Using Larger Than Block-Size Key - Hash Key First\"\ndata_len\
    \ =      54\ndigest =        0xaa4ae5e15272d00e95705637ce8a3b55ed402112\ntest_case\
    \ =     7\nkey =           0xaa repeated 80 times\nkey_len =       80\ndata =\
    \          \"Test Using Larger Than Block-Size Key and Larger\n              \
    \  Than One Block-Size Data\"\ndata_len =      73\ndigest =        0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91\n\
    data_len =      20\ndigest =        0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04\n\
    digest-96 =     0x4c1a03424b55e07fe7f27be1\ntest_case =     6\nkey =         \
    \  0xaa repeated 80 times\nkey_len =       80\ndata =          \"Test Using Larger\
    \ Than Block-Size Key - Hash Key\nFirst\"\ndata_len =      54\ndigest =      \
    \  0xaa4ae5e15272d00e95705637ce8a3b55ed402112\ntest_case =     7\nkey =      \
    \     0xaa repeated 80 times\nkey_len =       80\ndata =          \"Test Using\
    \ Larger Than Block-Size Key and Larger\n                Than One Block-Size Data\"\
    \ndata_len =      73\ndigest =        0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91\n\
    4. Security Considerations\n   This docuemnt raises no security issues. Discussion\
    \ on the strength\n   of the HMAC construction can be found in [HMAC].\nReferences\n\
    \   [HMAC]    Krawczyk, H., Bellare, M., and R. Canetti,\n             \"HMAC:\
    \ Keyed-Hashing for Message Authentication\",\n             RFC 2104, February\
    \ 1997.\n   [MD5]     Rivest, R., \"The MD5 Message-Digest Algorithm\",\n    \
    \         RFC 1321, April 1992.\n   [SHA]     NIST, FIPS PUB 180-1: Secure Hash\
    \ Standard, April 1995.\n   [OG]      Oehler, M., and R. Glenn,\n            \
    \ \"HMAC-MD5 IP Authentication with Replay Prevention\",\n             RFC 2085,\
    \ February 1997.\n   [CG]      Chang, S., and R. Glenn,\n             \"HMAC-SHA\
    \ IP Authentication with Replay Prevention\",\n             Work in Progress.\n\
    Authors' Addresses\n   Pau-Chen Cheng\n   IBM T.J. Watson Research Center\n  \
    \ P.O.Box 704\n   Yorktown Heights, NY 10598\n   EMail: pau@watson.ibm.com\n \
    \  Robert Glenn\n   NIST\n   Building 820, Room 455\n   Gaithersburg, MD 20899\n\
    \   EMail: rob.glenn@nist.gov\nAppendix\n   This appendix contains the C reference\
    \ code which implements HMAC-\n   SHA-1 using an existing SHA-1 library.  It assumes\
    \ that the SHA-1\n   library has similar API's as those of the MD5 code described\
    \ in RFC\n   1321.  The code for HMAC-MD5 is similar, just replace the strings\n\
    \   \"SHA\" and \"sha\" with \"MD5\" and \"md5\". HMAC-MD5 code is also listed\
    \ in\n   RFC 2104.\n   #ifndef SHA_DIGESTSIZE\n   #define SHA_DIGESTSIZE  20\n\
    \   #endif\n   #ifndef SHA_BLOCKSIZE\n   #define SHA_BLOCKSIZE   64\n   #endif\n\
    \   #ifndef MD5_DIGESTSIZE\n   #define MD5_DIGESTSIZE  16\n   #endif\n   #ifndef\
    \ MD5_BLOCKSIZE\n   #define MD5_BLOCKSIZE   64\n   #endif\n   /* Function to print\
    \ the digest */\n   void\n   pr_sha(FILE* fp, char* s, int t)\n   {\n        \
    \   int     i ;\n           fprintf(fp, \"0x\") ;\n           for (i = 0 ; i <\
    \ t ; i++)\n                   fprintf(fp, \"%02x\", s[i]) ;\n           fprintf(fp,\
    \ \"0) ;\n   }\n   void truncate\n   (\n    char*   d1,   /* data to be truncated\
    \ */\n    char*   d2,   /* truncated data */\n    int     len   /* length in bytes\
    \ to keep */\n   )\n   {\n           int     i ;\n           for (i = 0 ; i <\
    \ len ; i++) d2[i] = d1[i];\n   }\n   /* Function to compute the digest */\n \
    \  void\n   hmac_sha\n   (\n    char*    k,     /* secret key */\n    int    \
    \  lk,    /* length of the key in bytes */\n    char*    d,     /* data */\n \
    \   int      ld,    /* length of data in bytes */\n    char*    out,   /* output\
    \ buffer, at least \"t\" bytes */\n    int      t\n   )\n   {\n           SHA_CTX\
    \ ictx, octx ;\n           char    isha[SHA_DIGESTSIZE], osha[SHA_DIGESTSIZE]\
    \ ;\n           char    key[SHA_DIGESTSIZE] ;\n           char    buf[SHA_BLOCKSIZE]\
    \ ;\n           int     i ;\n           if (lk > SHA_BLOCKSIZE) {\n          \
    \         SHA_CTX         tctx ;\n                   SHAInit(&tctx) ;\n      \
    \             SHAUpdate(&tctx, k, lk) ;\n                   SHAFinal(key, &tctx)\
    \ ;\n                   k = key ;\n                   lk = SHA_DIGESTSIZE ;\n\
    \           }\n           /**** Inner Digest ****/\n           SHAInit(&ictx)\
    \ ;\n           /* Pad the key for inner digest */\n           for (i = 0 ; i\
    \ < lk ; ++i) buf[i] = k[i] ^ 0x36 ;\n           for (i = lk ; i < SHA_BLOCKSIZE\
    \ ; ++i) buf[i] = 0x36 ;\n           SHAUpdate(&ictx, buf, SHA_BLOCKSIZE) ;\n\
    \           SHAUpdate(&ictx, d, ld) ;\n           SHAFinal(isha, &ictx) ;\n  \
    \         /**** Outter Digest ****/\n           SHAInit(&octx) ;\n           /*\
    \ Pad the key for outter digest */\n           for (i = 0 ; i < lk ; ++i) buf[i]\
    \ = k[i] ^ 0x5C ;\n           for (i = lk ; i < SHA_BLOCKSIZE ; ++i) buf[i] =\
    \ 0x5C ;\n           SHAUpdate(&octx, buf, SHA_BLOCKSIZE) ;\n           SHAUpdate(&octx,\
    \ isha, SHA_DIGESTSIZE) ;\n           SHAFinal(osha, &octx) ;\n           /* truncate\
    \ and print the results */\n           t = t > SHA_DIGESTSIZE ? SHA_DIGESTSIZE\
    \ : t ;\n           truncate(osha, out, t) ;\n           pr_sha(stdout, out, t)\
    \ ;\n   }\n"
