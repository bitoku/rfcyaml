- contents:
  - "            Format for the Session Initiation Protocol (SIP)\n                        Common
    Log Format (CLF)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The SIPCLF working group has defined a Common Log Format (CLF)\n
    \  framework for Session Initiation Protocol (SIP) servers.  This CLF\n   mimics
    the successful event logging format found in well-known web\n   servers like Apache
    and web proxies like Squid.  This document\n   proposes an indexed text encoding
    format for the SIP CLF that retains\n   the key advantages of a text-based format
    while significantly\n   increasing processing performance over a purely text-based\n
    \  implementation.  This file format adheres to the SIP CLF information\n   model
    and provides an effective encoding scheme for all mandatory and\n   optional fields
    that appear in a SIP CLF record.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6873.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Document Conventions ............................................4\n   4. Format
    ..........................................................5\n      4.1. Index
    Pointers .............................................8\n      4.2. Mandatory
    Fields ..........................................10\n      4.3. SIP CLF Encoding
    and Character Escaping Requirements ......13\n      4.4. Optional Fields ...........................................14\n
    \  5. Example SIP CLF Record .........................................22\n   6.
    Text Tool Considerations .......................................24\n   7. Security
    Considerations ........................................24\n   8. Operational Guidance
    ...........................................25\n   9. IANA Considerations ............................................25\n
    \     9.1. SIP CLF Version ...........................................25\n      9.2.
    SIP CLF Transport Flag ....................................26\n   10. Acknowledgments
    ...............................................26\n   11. References ....................................................27\n
    \     11.1. Normative References .....................................27\n      11.2.
    Informative References ...................................27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The extensive list of benefits and the widespread adoption
    of the\n   Apache Common Log Format (CLF) has prompted the development of an\n
    \  analogous event logging mechanism for the Session Initiation Protocol\n   (SIP)
    [RFC3261].  Implementing a logging scheme for SIP is a\n   considerable challenge.
    \ In part, this is due to the fact that the\n   behavior of a SIP entity is more
    complex as compared to an HTTP\n   entity.  Additionally, there are shortcomings
    to the purely text-\n   based HTTP CLF that need to be addressed in order to allow
    for real-\n   time inspection of SIP log files [RFC6872].  Experience with Apache\n
    \  CLF has shown that dealing with large quantities of log data can be\n   very
    processor intensive, as doing so necessarily requires reading\n   and parsing
    every byte in the log file(s) of interest.\n   An implementation-independent framework
    for the SIP CLF has been\n   defined in [RFC6872].  This memo describes an indexed
    text file\n   format for logging SIP messages received and sent by SIP clients,\n
    \  servers, and proxies that adheres to the information model presented\n   in
    Section 8 of [RFC6872].  This document defines a format that is no\n   more difficult
    to generate by logging entities than standard (i.e.,\n   non-indexed) text log
    formats, while being radically faster to\n   process.  In particular, the format
    is optimized for both rapidly\n   scanning through log records and quickly locating
    commonly accessed\n   data fields.\n   Further, the format proposed by this document
    retains the key\n   advantage of being human readable and able to be processed
    using the\n   various Unix text processing tools, such as sed, awk, perl, cut,
    and\n   grep.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", and \"NOT RECOMMENDED\" are\n   appropriate when
    valid exceptions to a general requirement are known\n   to exist or appear to
    exist, and it is infeasible or impractical to\n   enumerate all of them.  However,
    they should not be interpreted as\n   permitting implementers to fail to implement
    the general requirement\n   when such failure would result in interoperability
    failure.\n   [RFC3261] defines additional terms used in this document that are\n
    \  specific to the SIP domain such as \"proxy\"; \"registrar\"; \"redirect\n   server\";
    \"user agent server\" or \"UAS\"; \"user agent client\" or \"UAC\";\n   \"back-to-back
    user agent\" or \"B2BUA\"; \"dialog\"; \"transaction\";\n   \"server transaction\".\n
    \  This document uses the term \"SIP Server\" that is defined to include\n   the
    following SIP entities: user agent server, registrar, redirect\n   server, a SIP
    proxy in the role of user agent server, and a B2BUA in\n   the role of a user
    agent server.\n   The reader is expected to be familiar with the terminology and\n
    \  concepts defined in [RFC6872].\n"
  title: 2.  Terminology
- contents:
  - "3.  Document Conventions\n   This document defines the logging syntax for the
    SIP CLF.  This\n   syntax is demonstrated through the use of various examples.
    \ The\n   formatting described here does not permit these examples to be\n   unambiguously
    rendered due to the constraints imposed by the\n   formatting rules for RFCs.
    \ To avoid ambiguity and to meet the RFC\n   layout requirements, this document
    uses the <allOneLine/> markup\n   convention established in [RFC4475].\n   For
    the sake of clarity and completeness, the entire text defining\n   this markup
    convention from Section 2.1 of [RFC4475] is quoted below:\n      Several of these
    examples contain unfolded lines longer than 72\n      characters.  These are captured
    between <allOneLine/> tags.  The\n      single unfolded line is reconstructed
    by directly concatenating\n      all lines appearing between the tags (discarding
    any line feeds or\n      carriage returns).  There will be no whitespace at the
    end of\n      lines.  Any whitespace appearing at a fold-point will appear at\n
    \     the beginning of a line.\n      The following represent the same string
    of bits:\n         Header-name: first value, reallylongsecondvalue, third value\n
    \        <allOneLine>\n         Header-name: first value,\n          reallylongsecondvalue\n
    \        , third value\n         </allOneLine>\n         <allOneLine>\n         Header-name:
    first value,\n          reallylong\n         second\n         value,\n          third
    value\n         </allOneLine>\n      Note that this is NOT SIP header-line folding,
    where different\n      strings of bits have equivalent meaning.\n   The IP addresses
    used in the examples in this document correspond to\n   the documentation address
    block 192.0.2.0/24 (TEST-NET-1) as\n   described in [RFC5737].\n"
  title: 3.  Document Conventions
- contents:
  - "4.  Format\n   The CLF for the Session Initiation Protocol [RFC6872] defines
    an\n   information model to which this logging format adheres, and Section\n   8.1
    of that document defines all the mandatory information model\n   elements.\n   This
    document defines the format of SIP CLF records as follows:\n     0          7
    8        15 16       23 24         31\n     +-----------+-----------+-----------+-----------+\n
    \    |  Version  |           Record Length           | 0 - 3\n     +-----------+-----------+-----------+-----------+\n
    \    |       Record Length (cont)        |    0x2C   | 4 - 7\n     +-----------+-----------+-----------+-----------+\n
    \    |              CSeq Pointer (Hex)               | 8 - 11\n     +-----------+-----------+-----------+-----------+\n
    \    |      Response Status-Code Pointer (Hex)       | 12 - 15\n     +-----------+-----------+-----------+-----------+\n
    \    |              R-URI Pointer (Hex)              | 16 - 19\n     +-----------+-----------+-----------+-----------+\n
    \    |   Destination IP address:port Pointer (Hex)   | 20 - 23\n     +-----------+-----------+-----------+-----------+\n
    \    |     Source IP address:port Pointer (Hex)      | 24 - 27\n     +-----------+-----------+-----------+-----------+\n
    \    |             To URI Pointer (Hex)              | 28 - 31\n     +-----------+-----------+-----------+-----------+\n
    \    |             To Tag Pointer (Hex)              | 32 - 35\n     +-----------+-----------+-----------+-----------+\n
    \    |            From URI Pointer (Hex)             | 36 - 39\n     +-----------+-----------+-----------+-----------+\n
    \    |            From Tag Pointer (Hex)             | 40 - 43\n     +-----------+-----------+-----------+-----------+\n
    \    |             Call-Id Pointer (Hex)             | 44 - 47\n     +-----------+-----------+-----------+-----------+\n
    \    |           Server-Txn Pointer (Hex)            | 48 - 51\n     +-----------+-----------+-----------+-----------+\n
    \    |           Client-Txn Pointer (Hex)            | 52 - 55\n     +-----------+-----------+-----------+-----------+\n
    \    |      Optional Fields Start Pointer (Hex)      | 56 - 59\n     +-----------+-----------+-----------+-----------+\n
    \    |    0x0A   |                                   | 60 - 63\n     +-----------+
    \                                  +\n     |                   Timestamp                   |
    64 - 67\n     +                                   +-----------+\n     |                                   |
    \   0x2E   | 68 - 71\n     +-----------+-----------+-----------+-----------+\n
    \    |         Fractional Seconds        |    0x09   | 72 - 75\n     +-----------+-----------+-----------+-----------+\n
    \    |                  Flags Field                  | 76 - 79\n     +-----------+-----------+-----------+-----------+\n
    \    |Flag (cont)|    0x09   |                       | 80 - 83\n     |-----------+-----------+
    \                      |\n     |                                               |\n
    \    |                                               |\n     |      Mandatory
    Fields (variable length)       |\n     |                                               |\n
    \    |                                               |\n     +-----------+-----------+-----------+-----------+\n
    \    |    0x09   |          Tag          |    0x40   |\\\n     +-----------+-----------+-----------+-----------+
    \\\n     |                   Vendor-ID                   |  \\\n     +-----------+-----------+-----------+-----------+
    \  \\\n     |                Vendor-ID (cont)               |    \\   Repeated\n
    \    +-----------+-----------+-----------+-----------+     \\  as many\n     |
    \    0x2C  |            Length (Hex)           |      > times as\n     +-----------+-----------+-----------+-----------+
    \    /  necessary\n     | Len (cont)|    0x2C   |    BEB    |    0x2C   |    /\n
    \    +-----------+-----------+-----------------------|   /\n     |                                               |
    \ /\n     |            Value (variable length)            | /\n     |                                               |/\n
    \    +-----------+-----------+-----------+-----------+\n     |    0x0A   |\n     +-----------+\n
    \                     Figure 1: SIP Common Log Format\n   The format presented
    in Figure 1 is for a single SIP CLF log entry.\n   While there is no actual subdivision
    in practice, this format can be\n   logically subdivided into the following three
    distinct components:\n   1.  Index Pointers: The first 60 bytes of this format.
    \ This portion\n       is metadata, primarily composed of a list of pointers that\n
    \      indicate the beginning of both the variable-length mandatory and\n       optional
    fields that are logged as part of this record.  These\n       pointers are implemented
    as a mechanism to improve processing of\n       these records and to allow a reader
    to expeditiously skip\n       directly to the desired field without unnecessarily
    going through\n       the entire record.  This logical subdivision within the
    SIP CLF\n       format will be referenced in this document with the\n       <IndexPointers>
    tag.  A 0x0A (LF character) delimits\n       <IndexPointers> from the next logical
    grouping.\n   2.  Mandatory Fields: The next logical grouping in this format is
    a\n       Tab-delimited (0x09) listing of the mandatory fields as described\n
    \      in Section 8.1 of [RFC6872] and in the order listed in\n       <IndexPointers>.
    \ This logical subdivision within the SIP CLF\n       format will be referenced
    in this document with the\n       <MandatoryFields> tag.\n   3.  Optional Fields:
    The last logical component MAY be present as it\n       is an OPTIONAL extension
    to the SIP CLF format.  Its purpose is\n       to provide flexibility to the developer
    of this SIP CLF to log\n       any desired fields not included in <MandatoryFields>.
    \ This\n       includes SIP bodies and any vendor-specific extensions.  This\n
    \      logical subdivision within the SIP CLF format will be referenced\n       in
    this document with the <OptionalFields> tag.\n   This logical structure of the
    SIP CLF record format can be\n   graphically represented as shown in Figure 2
    below:\n                                 <IndexPointers>\n                                 <MandatoryFields>\n
    \                                <OptionalFields>\n             Figure 2: Logical
    Structure of the SIP CLF Record\n   Note that Figures 1 and 2 plus the terminating
    line-feed (0x0A) at\n   the end of the SIP CLF record are different representations
    of the\n   same format but are functionally equivalent.  The representation of\n
    \  this format is a two-line record where the <IndexPointers> metadata\n   is
    on one line and the actual data like <MandatoryFields> and\n   <OptionalFields>
    (if present) is on another.\n   In the following sections note that indications
    of \"hexadecimal\n   encoded\" indicate values that are always unsigned and are
    to be\n   written out in human-readable base-16 numbers using the UTF-8\n   characters
    0x30 through 0x39 ('0' through '9') and 0x41 through 0x46\n   ('A' through 'F').
    \ Similarly, indications of \"decimal encoded\"\n   indicate that the value is
    to be written out in human-readable\n   base-10 numbers using the UTF-8 characters
    0x30 through 0x39 ('0'\n   through '9').  In both encodings, numbers always take
    up the number\n   of bytes indicated and are padded on the left with UTF-8 '0'
    (zero)\n   characters to fill the entire space.\n"
  - contents:
    - "4.1.  Index Pointers\n   The <IndexPointers> portion of the SIP CLF record
      (shown in Figure 3)\n   is a 60-byte header that indicates metadata about the
      record.\n            0          7 8        15 16       23 24         31\n            +-----------+-----------+-----------+-----------+\n
      \           |  Version  |           Record Length           | 0 - 3\n            +-----------+-----------+-----------+-----------+\n
      \           |       Record Length (cont)        |    0x2C   | 4 - 7\n            +-----------+-----------+-----------+-----------+\n
      \           |              CSeq Pointer (Hex)               | 8 - 11\n            +-----------+-----------+-----------+-----------+\n
      \           |      Response Status-Code Pointer (Hex)       | 12 - 15\n            +-----------+-----------+-----------+-----------+\n
      \           |              R-URI Pointer (Hex)              | 16 - 19\n            +-----------+-----------+-----------+-----------+\n
      \           |   Destination IP address:port Pointer (Hex)   | 20 - 23\n            +-----------+-----------+-----------+-----------+\n
      \           |     Source IP address:port Pointer (Hex)      | 24 - 27\n            +-----------+-----------+-----------+-----------+\n
      \           |             To URI Pointer (Hex)              | 28 - 31\n            +-----------+-----------+-----------+-----------+\n
      \           |             To Tag Pointer (Hex)              | 32 - 35\n            +-----------+-----------+-----------+-----------+\n
      \           |            From URI Pointer (Hex)             | 36 - 39\n            +-----------+-----------+-----------+-----------+\n
      \           |            From Tag Pointer (Hex)             | 40 - 43\n            +-----------+-----------+-----------+-----------+\n
      \           |             Call-Id Pointer (Hex)             | 44 - 47\n            +-----------+-----------+-----------+-----------+\n
      \           |           Server-Txn Pointer (Hex)            | 48 - 51\n            +-----------+-----------+-----------+-----------+\n
      \           |           Client-Txn Pointer (Hex)            | 52 - 55\n            +-----------+-----------+-----------+-----------+\n
      \           |      Optional Fields Start Pointer (Hex)      | 56 - 59\n            +-----------+-----------+-----------+-----------+\n
      \                        Figure 3: Index Pointers\n   The fields that make up
      <IndexPointers> are described below:\n   Version (1 byte):  UTF-8 encoded version
      for the SIP CLF record.\n      Range of valid values for the Version is from
      'A' (0x41) to 'Z'\n      (0x5A).  This document uses a Version value of \"0x41\"
      ('A').\n      The value of the SIP CLF Version MUST be incremented for any new\n
      \     SIP CLF specification that changes any part of the SIP CLF record\n      format.
      \ The SIP CLF Version values are IANA-assigned\n      (Section 9.1) via the
      Standards Action method described in\n      [RFC5226].\n      Since the version
      is specified per record, it is possible that a\n      SIP CLF log file could
      contain records with different versions.\n      Under normal operating conditions,
      this is an unlikely occurrence\n      and SHOULD be avoided if possible.\n   Record
      Length (6 bytes):  Hexadecimal encoded total length of this\n      log record,
      beginning with the \"Version\" octet and ending with the\n      terminating
      line-feed.\n   Bytes 8 through 55 contain hexadecimal encoded pointers that
      point to\n   the starting location of each of the variable-length mandatory\n
      \  fields.  Bytes 56 through 59 contain a hexadecimal encoded pointer\n   that
      points to the starting location of the optional fields portion\n   of the SIP
      CLF record.  Note that there are no delimiters between\n   these pointer values
      -- they are packed together as a single, 52-\n   character hexadecimal encoded
      string.  The \"Pointer\" fields indicate\n   absolute byte values within the
      record, and are therefore >=82.  They\n   point to the start of the corresponding
      value within the\n   <MandatoryFields> portion.  A description of each of the
      mandatory\n   fields that these pointer values point to can be found in\n   Section
      4.2.\n   Optional Fields Start Pointer:  This final pointer indicates the\n
      \     location within the SIP CLF record where the OPTIONAL group of\n      <OptionalFields>
      begin, if present.  The \"Optional Fields Start\n      Pointer\" points to the
      UTF-8 Tab (0x09) character for the first\n      entry in the <OptionalFields>
      portion.  If the OPTIONAL group of\n      <OptionalFields> are not implemented,
      then the \"Optional Fields\n      Start Pointer\" field MUST point to the terminating
      line-feed\n      (0x0A) at the end of the SIP CLF record.\n"
    title: 4.1.  Index Pointers
  - contents:
    - "4.2.  Mandatory Fields\n   The <MandatoryFields> portion of the SIP CLF record
      is shown below:\n            0          7 8        15 16       23 24         31\n
      \           +-----------+-----------+-----------+-----------+\n            |
      \   0x0A   |                                   | 60 - 63\n            +-----------+
      \                                  +\n            |                   Timestamp
      \                  | 64 - 67\n            +                                   +-----------+\n
      \           |                                   |    0x2E   | 68 - 71\n            +-----------+-----------+-----------+-----------+\n
      \           |         Fractional Seconds        |    0x09   | 72 - 75\n            +-----------+-----------+-----------+-----------+\n
      \           |                  Flags Field                  | 76 - 79\n            +-----------+-----------+-----------+-----------+\n
      \           |Flag (cont)|    0x09   |                       | 80 - 83\n            |-----------+-----------+
      \                      |\n            |                                               |\n
      \           |                                               |\n            |
      \     Mandatory Fields (variable length)       |\n            |                                               |\n
      \           |                                               |\n            +-----------+-----------+-----------+-----------+\n
      \                       Figure 4: Mandatory Fields\n   Following the pointers
      in <IndexPointers>, two fixed-length fields\n   are encoded to specify the exact
      time of the log entry.  As before,\n   all fields are completely filled, pre-pending
      values with '0'\n   characters as necessary.\n   Timestamp (10 bytes):  Decimal
      encoded date and time of the request\n      or response represented as the number
      of seconds since the Unix\n      epoch (i.e., seconds since midnight, January
      1st, 1970, GMT).\n   Fractional Seconds (3 bytes):  Decimal encoded fractional
      seconds\n      portion of the Timestamp field to millisecond accuracy.\n      The
      combined Timestamp and Fractional Seconds fields are\n      represented in the
      log file as a UTF-8 encoded string representing\n      the date and time of
      the request or response represented as the\n      number of seconds and milliseconds
      since the Unix epoch.  The\n      number of milliseconds is separated by a \".\"
      \ (UTF-8 character\n      0x2E) from the number of seconds.\n   Flags Field
      (5 bytes):\n      byte 1 -   Request/Response Flag\n         R = Request\n         r
      = Response\n      byte 2 -   Retransmission Flag\n         O = Original transmission\n
      \        D = Duplicate transmission\n         S = Server is stateless [i.e.,
      retransmissions are not\n            detected]\n      byte 3 -   Sent/Received
      Flag\n         S = Sent message\n         R = Received message\n      byte 4
      -   Transport Flag\n         The Transport Flag values are IANA-assigned (Section
      9.2) via\n         the IETF Review method described in [RFC5226].  Currently,\n
      \        registered values are:\n         U = UDP\n         T = TCP\n         S
      = SCTP\n      byte 5 -   Encryption Flag\n         E = Encrypted message (TLS,
      DTLS, etc.)\n         U = Unencrypted message\n   After the \"Timestamp\", \"Fractional
      Seconds\", and the \"Flags\" fields\n   are the values for the mandatory fields
      specified in Section 8.1 of\n   [RFC6872], which are described below:\n   CSeq:
      \ The Command Sequence header field, including the CSeq number\n      and method
      name.\n   Response Status-Code:  Set to the value of the SIP response status\n
      \     code for responses.  Set to a single UTF-8 dash (0x2D) for\n      requests.\n
      \  R-URI:  The Request-URI in the start line (mandatory in request),\n      including
      any URI parameters.\n   Destination IP address:port:  The IP address of the
      downstream server\n      and the port number, separated by a single ':'.  IPv4
      addresses\n      are represented in \"dotted decimal\" notation as per [RFC1166].\n
      \     IPv6 addresses are represented using the hexadecimal notation\n      detailed
      in Section 4 of [RFC5952] (or the special-case mixed\n      hexadecimal and
      decimal notation detailed in Section 5 of\n      [RFC5952]) and enclosed in
      square brackets ('[' and ']').\n   Source IP address:port:  The IP address of
      the upstream client and\n      the port number over which the SIP message was
      received, separated\n      by a single ':'.  IPv4 addresses are represented
      in \"dotted\n      decimal\" notation as per [RFC1166].  IPv6 addresses are\n
      \     represented using the hexadecimal notation detailed in Section 4\n      of
      [RFC5952] (or the special-case mixed hexadecimal and decimal\n      notation
      detailed in Section 5 of [RFC5952]) and enclosed in\n      square brackets ('['
      and ']').\n   To URI:  Value of the URI in the To header field.\n   To Tag:
      \ Value of the tag parameter (if present) in the To header\n      field.\n   From
      URI:  Value of the URI in the From header field.\n   From Tag:  Value of the
      tag parameter (if present) in the From header\n      field.\n   Call-Id:  The
      value of the Call-ID header field.\n   Server transaction identification code
      (Server-Txn):  The transaction\n      identifier associated with the server
      transaction.\n      Implementations can reuse the server transaction identifier
      (the\n      topmost branch-id of the incoming request, with or without the\n
      \     magic cookie), or they could generate a unique identification\n      string
      for a server transaction (this identifier needs to be\n      locally unique
      to the server only).  This identifier is used to\n      correlate ACKs and CANCELs
      to an INVITE transaction; it is also\n      used to aid in tracking forking.
      \ (See Section 9 of [RFC6872] for\n      usage.)\n   Client transaction identification
      code (Client-Txn):  This field is\n      used to associate client transactions
      with a server transaction\n      for forking proxies or B2BUAs.  Upon forking,
      implementations can\n      reuse the value they inserted into the topmost Via
      header's branch\n      parameter, or they can generate a unique identification
      string for\n      the client transaction.  (See Section 9 of [RFC6872] for usage.)\n
      \     Note: The definitions of the Server-Txn and Client-Txn are taken\n      directly
      from [RFC6872] and are provided here only as a\n      convenience to the implementer.
      \ The definitions specified in\n      [RFC6872] should be considered authoritative
      in the event of a\n      conflict.\n   This data MUST appear in the order listed
      in <IndexPointers>, and\n   each field MUST be present.  Fields are subject
      the maximum SIP CLF\n   field size of 4096 bytes as detailed in Section 8 of
      [RFC6872].\n"
    title: 4.2.  Mandatory Fields
  - contents:
    - "4.3.  SIP CLF Encoding and Character Escaping Requirements\n   The mandatory
      fields in a SIP CLF record are separated by a single\n   UTF-8 Tab character
      (0x09).  Any Tab characters present in the data\n   to be written will be replaced
      by a UTF-8 space character (0x20)\n   prior to being logged.\n   The decision
      to replace tabs with spaces was based on there being no\n   standardized use
      of tabs in SIP headers to convey any other meaning\n   than whitespace.  Tabs
      may appear in message bodies, and in the event\n   that the bodies are logged,
      the conversion to space may cause\n   problems when reconstructing the body
      from the corresponding log\n   entry.  Two consequences of the decision to replace
      Tab with a space\n   character are: (a) it will become impossible to reconstruct
      a\n   signature over the logged field that matches the signature over\n   fields
      in the original SIP message, and (b) any future SIP header\n   fields that include
      tabs with a different semantic meaning than\n   simply signifying whitespace
      will lose this meaning when logged.\n   Finally, the tabs-to-spaces substitution
      MUST occur when logging\n   mandatory fields and optional SIP Header Field or
      Reason-Phrase\n   (Tag=00); it MUST also occur when optionally logging either
      the\n   entire message (Tag=02) or simply a SIP body (Tag=01) as described in\n
      \  Section 4.4.\n   An element will not always have an appropriate value to
      provide for\n   one of these fields, even when the field is required to appear
      in the\n   SIP CLF record.  In such circumstances, when a given mandatory field\n
      \  from Section 4.2 and specified in Section 8.1 of [RFC6872]) is not\n   present,
      then that empty field MUST be encoded as a single horizontal\n   dash (\"-\").
      \ In the event that a field failed to parse, it MUST be\n   encoded as a single
      question mark (\"?\").  If these characters are\n   part of a sequence of other
      characters, then there is no ambiguity.\n   If the field being logged contains
      only one character, and that\n   character is the literal \"-\", the implementation
      SHOULD insert an\n   escaped %2D for that field in the SIP CLF record.  Similarly,
      if the\n   field contains only one character, and that character is the literal\n
      \  \"?\", the implementation SHOULD insert an escaped %3F for that field\n   in
      the SIP CLF record.\n   The terminating carriage return line feed (CRLF) after
      a given header\n   field value MUST NOT be logged.  Since a bare CRLF sequence
      is not\n   permitted within a SIP header field value, mandatory fields MUST
      NOT\n   contain a CRLF when logged and consequently no escaping mechanism is\n
      \  required for it.\n   Clearly, a SIP parser could not possibly successfully
      parse a SIP CLF\n   record in its entirety given the SIP CLF format described
      in this\n   document.  It is possible to parse individual fields in the SIP
      CLF\n   record if they are extracted and given to a SIP parser that would\n
      \  normally parse those sequence of strings.  It should be noted that\n   any
      field value that is modified by the escaping mechanisms defined\n   in this
      document before logging ('-','?', and CRLF) is likely no\n   longer well-formed
      SIP and will fail when given to such a parser.\n   The intent of logging using
      SIP CLF is not to faithfully recreate the\n   bit-exact SIP message being logged.
      \ In fact, the formatting rules,\n   encoding, and character escaping requirements
      preclude this and may\n   introduce information loss relative to the original
      SIP message.  A\n   log reader should never unescape anything in the SIP CLF
      record since\n   they are intended to be machine processed using text tools
      such as\n   grep and awk.  The human user behind the log reader may be required\n
      \  to infer more semantics about any differences between the original\n   SIP
      message and its SIP CLF representation.\n"
    title: 4.3.  SIP CLF Encoding and Character Escaping Requirements
  - contents:
    - "4.4.  Optional Fields\n   The <OptionalFields> portion of the SIP CLF record
      is shown below:\n     0          7 8        15 16       23 24         31\n     +-----------+-----------+-----------+-----------+\n
      \    |    0x09   |          Tag          |    0x40   |\\\n     +-----------+-----------+-----------+-----------+
      \\\n     |                   Vendor-ID                   |  \\\n     +-----------+-----------+-----------+-----------+
      \  \\\n     |                Vendor-ID (cont)               |    \\   Repeated\n
      \    +-----------+-----------+-----------+-----------+     \\  as many\n     |
      \    0x2C  |            Length (Hex)           |      > times as\n     +-----------+-----------+-----------+-----------+
      \    /  necessary\n     | Len (cont)|    0x2C   |    BEB    |    0x2C   |    /\n
      \    +-----------+-----------+-----------------------|   /\n     |                                               |
      \ /\n     |            Value (variable length)            | /\n     |                                               |/\n
      \    +-----------+-----------+-----------+-----------+\n                         Figure
      5: Optional Fields\n   Optional fields are those SIP message elements that are
      not a part of\n   the mandatory fields list detailed in Section 8.1 of [RFC6872].\n
      \  After the <MandatoryFields> section, there is an OPTIONAL\n   <OptionalFields>
      group (shown in Figure 5) that MAY appear zero or\n   more times.  This <OptionalFields>
      group provides extensibility to\n   the SIP CLF.  It allows SIP CLF implementers
      the flexibility to\n   extend the logging capability of this indexed text representation\n
      \  beyond just the mandatory log elements described in Section 8.1 of\n   [RFC6872].\n
      \  Logging any optional SIP elements MUST be done according to the\n   format
      shown in Figure 5.  The location of the start of\n   <OptionalFields> within
      the SIP CLF record is indicated by the\n   \"Optional Fields Start Pointer\"
      field in <IndexPointers>.  After the\n   initial Tab delimiter byte (0x09) shown
      in Figure 5, the optional\n   field being logged is generally represented by
      the notation:\n   Tag@Vendor-ID,Length,BEB,Value\n   The optional field identifier
      (Tag@Vendor-ID) is composed of a two-\n   byte Tag and an eight-byte Vendor-ID
      (both decimal encoded) separated\n   by an \"@\" character (0x40).  This uniquely
      identifies the optional\n   field being logged.  The format for this identifier
      is loosely\n   modeled after the private use option used by the syslog protocol\n
      \  [RFC5424] (Note: this is the second format detailed in Section 6.3.2\n   of
      [RFC5424]).  It makes use of the Private Enterprise Number (PEN),\n   which
      provides an identifier through a globally unique name space\n   [PEN].  This
      syntax provides the necessary extensibility to SIP CLF\n   to allow logging
      of any SIP header, body, as well as any vendor-\n   specified SIP element.\n
      \  The Base64 Encoded Byte (BEB) is a boolean that is used to indicate\n   whether
      or not the optional element being logged is Base64 encoded.\n   The Value field
      for the optional element being logged MUST be Base64\n   encoded if it has any
      characters that are 'unprintable'.  For the\n   purposes of this document, we
      define 'unprintable' to mean a string\n   of octets that: (a) contains an octet
      with a value in the range of 0\n   to 31, inclusive; (b) contains an octet with
      a value of 127; or (c)\n   contains any series of octets greater than or equal
      to 128 that do\n   not form a valid UTF-8 sequence, as specified by [UNICODE].
      \ If the\n   optional element being logged is Base64 encoded, then BEB=0x01;
      if it\n   is not Base64 encoded, then BEB=0x00.\n   Optional fields are logged
      according to the following two syntax\n   rules:\n   (1)  Vendor-ID = 00000000\n
      \     A Vendor-ID of zero is used to log the entire SIP message, message\n      body,
      Reason-Phrase, or any SIP header fields that are not a part\n      of the mandatory
      fields list detailed in Section 8.1 of [RFC6872].\n      The following Tag values
      are used to identify which of these\n      optional elements are being logged:\n
      \     Tag = 00 - Log SIP Header Field or Reason-Phrase\n         When logging
      a SIP Header Field (Tag=00), the associated\n         \"Value\" field MUST be
      populated by the entire header field\n         being logged.  That is, the field-name,
      the associated colon\n         (\":\"), and the field-value.  This mechanism
      provides the\n         capability to optionally log any SIP header field by\n
      \        identifying the field being logged within the \"Value\" field.\n         Because
      the Reason-Phrase in a response is part of the Status-\n         Line and is
      not identified with a field-name, it is a special\n         case.  In this instance,
      the associated \"Value\" field MUST be\n         populated by the name \"Reason-Phrase\"
      followed by a colon (\":\")\n         and a single space (SP) between the colon
      and the logged\n         Reason-Phrase value.\n         The corresponding \"Length\"
      field includes the length of the\n         entire \"Value\" field.  This includes
      the field-name, the colon,\n         and any linear whitespace (LWS) separator.
      \ For Tag=00, the BEB\n         is set according to whether the SIP Header Field
      value contains\n         any 'unprintable' characters.  If it does not, the
      BEB=00; if\n         it does, the BEB=01.  If BEB=01, then only the field-value
      MUST\n         be Base64 encoded; the field-name, the associated colon, and\n
      \        any LWS separator MUST retain their original encoding.\n         If
      an optional field occurs more than once in a SIP message\n         (e.g., Contact,
      Route, Record-Route, etc.), then each\n         occurrence MUST be logged with
      the same Tag value (i.e.,\n         Tag=00) as a distinct optional field entry
      in the SIP CLF\n         record.  These repeated optionally logged header fields
      MUST\n         preserve the ordinal position of the repeated header fields in\n
      \        the SIP header.  For example, a SIP header containing two Via\n         header
      fields with the following ordinal positions within the\n         SIP header:
      V1,V2.  If optionally logging these header fields,\n         they would occur
      as the following entries in the SIP CLF\n         record.  (Note: For the sake
      of brevity, this example only\n         shows how these optional header fields
      would be logged and\n         omits the remainder of the SIP CLF record):\n
      \        00@00000000,len_V1,00,Via: V1     00@00000000,len_V2,00,Via: V2\n         The
      terminating carriage return line feed (CRLF) after a given\n         header
      field value MUST NOT be logged.  Since a bare CRLF\n         sequence is not
      permitted within a SIP header field value,\n         optional SIP header fields
      logged with Tag=00 MUST NOT contain\n         a CRLF when logged and consequently
      no escaping mechanism is\n         required for it.\n      Tag = 01 - Log message
      body\n         SIP message bodies of all types can be optionally logged using\n
      \        Tag=01.  If the message body is logged it MUST adhere to the\n         maximum
      size limitation of 4096 bytes for a SIP CLF field, as\n         detailed in
      Section 8 of [RFC6872].  Unlike with Tag=00, there\n         can only be a single
      entry in the SIP CLF record with Tag=01.\n         When optionally logging the
      message body, if the maximum SIP\n         CLF field size of 4096 bytes is exceeded,
      the message body\n         being logged MUST be truncated to meet these size
      limitations.\n         When logging a message body (Tag=01), the associated
      \"Value\"\n         field is populated with the Content-Type itself plus the
      SIP\n         message body separated with a space.  In this manner,\n         everything
      about the SIP message body is self-described using a\n         single tag as
      compared to enumerating a separate tag for each\n         body type.  Additionally,
      the corresponding \"Length\" field\n         includes the SIP message body,
      the length of the embedded\n         Content-Type, and the space separator between
      the MIME type and\n         the body content.\n         For an optionally logged
      message body (Tag=01), the BEB is set\n         according to whether the message
      body contains any\n         'unprintable' characters.  If it does not, the BEB=00;
      if it\n         does, the BEB=01.  If BEB=01, then the message body that\n         follows
      is entirely Base64 encoded except the prepended\n         Content-Type as described
      in the previous paragraph.\n         If an optionally logged SIP message body
      contains any CRLFs,\n         they MUST be escaped by using the URI encoded
      equivalent value\n         of \"%0D%0A\".  This escaping mechanism applies to
      all body\n         types.  So we don't make any distinction in treatment between\n
      \        the various possible body types.  If a logged message body has\n         BEB=01,
      then it MUST be Base64 encoded prior to any character\n         escaping.  Thus,
      if a binary body (like an image) is logged, it\n         will be Base64 encoded
      first and that Base64 character stream\n         could never include the CRLF
      escape sequence of \"%0D%0A\"\n         because \"%\" is not a valid Base64
      character.\n      Tag = 02 - Log entire SIP message\n         The entire SIP
      message (i.e., SIP header and message body) can\n         be optionally logged
      using a Tag=02.  Logging the entire SIP\n         message MUST conform to the
      maximum size limitation of 4096\n         bytes for a SIP CLF field, as detailed
      in Section 8 of\n         [RFC6872].  Unlike with Tag=00, there can only be
      a single\n         entry in the SIP CLF record with Tag=02.  When optionally\n
      \        logging the entire SIP message if the maximum SIP CLF field\n         size
      of 4096 bytes is exceeded the entire SIP message being\n         logged MUST
      be truncated to meet these size limitations.\n         When optionally logging
      an entire SIP message (Tag=02), the BEB\n         is set according to whether
      the message body portion contains\n         any 'unprintable' characters.  If
      it does not, the BEB=00; if\n         it does, the BEB=01.  If BEB=01, then
      the entire SIP message is\n         Base64 encoded (not just the message body).
      \ Note that unlike\n         the case of Tag=01, when logging an entire SIP
      message (Tag=02)\n         with 'unprintable' characters (BEB=01), the Content-Type
      would\n         not be known prior to decode.\n         All instances of CRLFs,
      whether they appear in the SIP headers\n         or the SIP message body, MUST
      be escaped by using the URI\n         encoded equivalent value of \"%0D%0A\".
      \ If a logged SIP message\n         has BEB=01 then it MUST be Base64 encoded
      prior to any\n         character escaping.\n   (2)  Vendor-ID = PEN\n      A
      Vendor-ID set to a vendor's own private enterprise number from\n      the complete
      current list of private enterprise numbers maintained\n      by IANA [PEN] is
      used to log any other vendor-specified optional\n      element of a SIP header
      or body.  The value of the Tag is set at\n      the discretion of the implementer:\n
      \     Tag = Vendor-specified tag\n   The definition of the various values of
      the optional field identifier\n   (Tag@Vendor-ID) are the basis of how optional
      elements are logged in\n   the SIP CLF.  For the sake of completeness, the remaining
      fields in\n   the format shown in Figure 5 are also defined below:\n   Length
      Field (4 bytes):  Indicates the length of only the \"Value\"\n      field of
      this optionally logged element (as shown in Figure 5),\n      hexadecimal encoded.
      \ This length corresponds to the length of the\n      \"Value\" field only and
      MUST NOT include any of the other elements\n      shown in Figure 5.\n   Base64
      Encoded Byte (BEB) Field (1 byte):  Indicates whether or not\n      the subsequent
      Value Field of the optionally logged element is\n      Base64 encoded.  The
      Value field for the optional element being\n      logged MUST be Base64 encoded
      if it contains any character that is\n      deemed 'unprintable' according to
      the definition given previously\n      in this section.  If the optional element
      being logged is Base64\n      encoded, then BEB=0x01; if it is not Base64 encoded,
      then\n      BEB=0x00.\n   Value Field (0 to 4096 bytes):  Contains the actual
      value of this\n      optional field.  As with the mandatory fields, UTF-8 Tab\n
      \     characters (0x09) are replaced with UTF-8 space characters (0x20).\n   The
      following are examples of optionally logged SIP elements using\n   the syntax
      described in this section.  All these examples only show\n   the <OptionalFields>
      portion of the SIP CLF record.  The mandatory\n   <IndexPointers> and <MandatoryFields>
      portions of the SIP CLF are\n   intentionally omitted for the sake of brevity.
      \ Note that all of\n   these examples of optionally logged fields begin with
      a leading Tab\n   delimiter byte (0x09) that is not apparent here.\n   (1)  Contact
      header field logged as an optional field:\n           Consider the SIP response:\n
      \          SIP/2.0 180 Ringing\n           <allOneLine>\n           Via: SIP/2.0/UDP
      host.example.com;\n           branch=z9hG4bKnashds8;received=192.0.2.1\n           </allOneLine>\n
      \          To: Bob <sip:bob@example.com>;tag=a6c85cf\n           From: Alice
      <sip:alice@example.com>;tag=1928301774\n           Call-ID: a84b4c76e66710\n
      \          Contact: <sip:bob@192.0.2.4>\n           CSeq: 314159 INVITE\n           Content-Length:
      0\n   The Contact header field would be logged as an optional field in the\n
      \  following manner:\n           00@00000000,001C,00,Contact: <sip:bob@192.0.2.4>\n
      \  (2)  Reason-Phrase logged as an optional field:\n        For the same SIP
      response the Reason-Phrase would be logged as\n        an optional field in
      the following manner:\n           00@00000000,0016,00,Reason-Phrase: Ringing\n
      \  (3)  SDP body to be logged as an optional field:\n           v=0\n           o=alice
      2890844526 2890844526 IN IP4 host.example.com\n           s=-\n           c=IN
      IP4 host.example.com\n           t=0 0\n           m=audio 49170 RTP/AVP 0 8
      97\n   This body has a Content-Type of application/sdp and has a length of\n
      \  123 bytes including all the line-feeds.  When logging this body the\n   \"Value\"
      field is composed of the Content-Type and the body separated\n   by a space,
      which gives it a combined length of 139 (0x008B) bytes.\n   This SIP body would
      be logged as an optional field in the following\n   manner:\n         <allOneLine>\n
      \        01@00000000,008B,00,application/sdp v=0%0D%0Ao=alice 2890844526\n         2890844526
      IN IP4 host.example.com%0D%0As=-%0D%0A\n         c=IN IP4 host.example.com%0D%0At=0
      0%0D%0A\n         m=audio 49170 RTP/AVP 0 8 97%0D%0A\n         </allOneLine>\n
      \  Note that the body is actually logged on a single line and is thus\n   captured
      between <allOneLine/> tags.  The line-feeds are escaped\n   using %0D%0A to
      delimit the various lines in the message body.\n   (4)  binary body to be logged
      as an optional field:\n        The second body part of the multipart/mime SIP
      message shown in\n        Section 3.1.1.11 of RFC 4475 is a binary encoded body\n
      \       (represented in hex) and if logged would have BEB=01 and would\n        require
      Base64 encoding.  That binary body would produce six\n        lines of output
      after being Base64 encoded.  Subsequent escaping\n        of the CRLF characters
      would produce an optionally logged body\n        that would look like the following:\n
      \       <allOneLine>\n        01@00000000,0216,01,multipart/mixed;boundary=7a9cbec02ceef655
      MI\n        IBUgYJKoZIhvcNAQcCoIIBQzCCAT8CAQExCTAHBgUrDgMCGjALBgkqhkiG9w0BBw\n
      \       ExggEgMIIB%0D%0AHAIBATB8MHAxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxp\n        Zm9ybmlhMREwDwYDVQQHEwhTYW4g%0D%0ASm9zZTEOMAwGA1UEChMFc2lwaXQxKT\n
      \       AnBgNVBAsTIFNpcGl0IFRlc3QgQ2VydGlmaWNhdGUgQXV0%0D%0AaG9yaXR5AggB\n        lQBxAjMBEzAHBgUrDgMCGjANBgkqhkiG9w0BAQEFAASBgI70ZvlI8FIt0uWXjp2V\n
      \       %0D%0Aquny/hWgZllxYpLo2iqo2DUKaM7/rjy9K/8Wdd3VZI5ZPdZHKPJiIPfpQX\n        SeMw2aFe2r25PRDEIQ%0D%0ALntyidKcwMmuLvvHwM/5Fy87An5PwCfhVG3ktqo6\n
      \       uz5mzMtd1sZLg4MUnLjm/xgtlE/le2W8mdAF%0D%0A\n        </allOneLine>\n
      \  Note that the body is actually logged on a single line and is thus\n   captured
      between <allOneLine/> tags.  The line-feeds are escaped\n   using %0D%0A to
      delimit the various lines in the Base64 encoded\n   binary body.\n   (5)  Codec
      information from the SDP body logged as an optional field:\n           Consider
      the SIP message:\n           INVITE sip:bob@example.com SIP/2.0\n           Via:
      SIP/2.0/UDP host.example.com;branch=z9hG4bKnashds8\n           To: Bob <bob@example.com>\n
      \          From: Alice <alice@example.com>;tag=1928301774\n           Call-ID:
      a84b4c76e66710\n           CSeq: 314159 INVITE\n           Max-Forwards: 70\n
      \          Date: Thu, 21 Feb 2002 13:02:03 GMT\n           Contact: <sip:alice@host.example.com>\n
      \          Content-Type: application/sdp\n           Content-Length: 147\n           v=0\n
      \          o=UserA 2890844526 2890844526 IN IP4 example.com\n           s=Session
      SDP\n           c=IN IP4 host.example.com\n           t=0 0\n           m=audio
      49172 RTP/AVP 0\n           a=rtpmap:0 PCMU/8000\n   A vendor may choose to
      log a SIP message element such as the codec\n   information from the SDP body.
      \ This vendor-specified SIP element\n   would be logged as an optional field
      in the following manner:\n           03@00032473,0014,00,a=rtpmap:0 PCMU/8000\n
      \  (6)  N-th message received from a particular peer logged as an\n        optional
      field:\n        Perhaps a vendor wants to log that this message is the n-th\n
      \       message received from a peering partner.  To do so for the SIP\n        message
      shown above, the vendor would log this information as:\n           07@00032473,0016,00,1877
      example.com\n   Which would signify that this is the 1,877th message from the
      peering\n   partner example.com.  Note that the previous two examples showing
      an\n   optionally logged vendor-specified SIP element use a Vendor-ID with a\n
      \  Private Enterprise Number of 32473.  This value has been reserved by\n   IANA
      to be used as an example PEN in documentation according to\n   [RFC5612].\n"
    title: 4.4.  Optional Fields
  title: 4.  Format
- contents:
  - "5.  Example SIP CLF Record\n   The following SIP message is an INVITE request
    sent by a SIP client:\n       INVITE sip:192.0.2.10 SIP/2.0\n       To: <sip:192.0.2.10>\n
    \      Call-ID: DL70dff590c1-1079051554@example.com\n       <allOneLine>\n       From:
    \"Alice\" <sip:1001@example.com:5060>;\n       tag=DL88360fa5fc;epid=0x34619b0\n
    \      </allOneLine>\n       CSeq: 1 INVITE\n       Max-Forwards: 70\n       Date:
    Thu, 21 Feb 2012 15:02:03 GMT\n       <allOneLine>\n       Via: SIP/2.0/TCP 192.0.2.200:5060;\n
    \      branch=z9hG4bK-1f6be070c4-DL\n       </allOneLine>\n       Contact: \"1001\"
    <sip:1001@192.0.2.200:5060>\n       Content-Type: application/sdp\n       Content-Length:
    418\n       v=0\n       o=1001 1456139204 0 IN IP4 192.0.2.200\n       s=Session
    SDP\n       c=IN IP4 192.0.2.200\n       b=AS:2048\n       t=0 0\n       m=audio
    13756 RTP/AVP 0 101\n       a=rtpmap:0 PCMU/8000\n   Shown below is approximately
    how this message would appear as a\n   single record in a SIP CLF logging file
    if encoded according to the\n   syntax described in this document.  Due to RFC
    conventions, this log\n   entry has been split into five lines, instead of the
    two lines that\n   actually appear in a log file; and the Tab characters have
    been\n   padded out using spaces to simulate their appearance in a text\n   terminal.\n
    \      A000100,0053005C005E006D007D008F009E00A000BA00C700EB00F70100\n       <allOneLine>\n
    \      1328821153.010    RORUU    1 INVITE    -    sip:192.0.2.10\n       192.0.2.10:5060
    \   192.0.2.200:56485    sip:192.0.2.10    -\n       sip:1001@example.com:5060
    \   DL88360fa5fc\n       DL70dff590c1-1079051554@example.com    S1781761-88    C67651-11\n
    \      </allOneLine>\n   A bit-exact version of the actual log entry is provided
    here, Base64\n   encoded.\n    begin-base64 644 clf_record\n    QTAwMDEwMCwwMDUzMDA1QzAwNUUwMDZEMDA3RDAwOEYwMDlFMDBBMDAwQkEwMEM3MDBF\n
    \   QjAwRjcwMTAwCjEzMjg4MjExNTMuMDEwCVJPUlVVCTEgSU5WSVRFCS0Jc2lwOjE5Mi4w\n    LjIuMTAJMTkyLjAuMi4xMDo1MDYwCTE5Mi4wLjIuMjAwOjU2NDg1CXNpcDoxOTIuMC4y\n
    \   LjEwCS0Jc2lwOjEwMDFAZXhhbXBsZS5jb206NTA2MAlETDg4MzYwZmE1ZmMJREw3MGRm\n    ZjU5MGMxLTEwNzkwNTE1NTRAZXhhbXBsZS5jb20JUzE3ODE3NjEtODgJQzY3NjUxLTEx\n
    \   Cg==\n    ====\n   To recover the unencoded file, the Base64 text above may
    be passed as\n   input to the following perl script (the output should be redirected\n
    \  to a file).\n   <CODE BEGINS>\n   #!/usr/bin/perl\n   use strict;\n   my $bdata
    = \"\";\n   use MIME::Base64;\n   while(<>)\n   {\n         if (/begin-base64
    644 clf_record/ .. /-- ==== --/)\n         {\n             if ( m/^\\s*[^\\s]+\\s*$/)\n
    \            {\n               $bdata = $bdata . $_;\n             }\n          }\n
    \  }\n   print decode_base64($bdata);\n   <CODE ENDS>\n"
  title: 5.  Example SIP CLF Record
- contents:
  - "6.  Text Tool Considerations\n   This format has been designed to allow text
    tools to easily process\n   logs without needing to understand the indexing format.
    \ Index lines\n   may be rapidly discarded by checking the first character of
    the line:\n   index lines will always start with an alphabetical character, while\n
    \  field lines will start with a numerical character.\n   Within a field line,
    script tools can quickly split fields at the Tab\n   characters.  The first 12
    fields are positional, and the meaning of\n   any subsequent fields can be determined
    by checking the first four\n   characters of the field.  Alternately, these non-positional
    fields\n   can be located using a regular expression.  For example, the \"Contact\n
    \  value\" in a request can be found by searching for the perl regex\n   /\\t0000,....,([^\\t]*)/.\n"
  title: 6.  Text Tool Considerations
- contents:
  - "7.  Security Considerations\n   This document does not introduce any new security
    considerations\n   beyond those discussed in [RFC6872].\n   In the interest of
    protecting the sensitive information contained in\n   a SIP CLF file, [RFC6872]
    notes that values might need to be\n   obfuscated for privacy reasons when SIP
    CLF files are exchanged\n   between domains.  If a Base64 encoded string contains
    the non-\n   obfuscated value, then that would also need to be obfuscated before\n
    \  Base64 encoding.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Operational Guidance\n   SIP CLF log files will take up a substantive amount
    of disk space\n   depending on traffic volume at a processing entity and the amount
    of\n   information being logged.  As such, any enterprise using SIP CLF\n   should
    establish operational procedures for file rollovers as\n   appropriate to the
    needs of the organization.\n   Listing such operational guidelines in this document
    is out of scope\n   for this work.\n"
  title: 8.  Operational Guidance
- contents:
  - "9.  IANA Considerations\n   This specification establishes a new \"Session Initiation
    Protocol\n   (SIP) Common Log Format (CLF) Parameters\" registry, which contains\n
    \  two new sub-registries: \"SIP CLF Version Values\" and \"SIP CLF\n   Transport
    Flag Values\".  Initial entries are defined by this\n   specification for both
    sub-registries.  Addition of any new sub-\n   registry to the \"Session Initiation
    Protocol (SIP) Common Log Format\n   (CLF) Parameters\" registry is to be done
    using the IETF Review\n   registration policy detailed in [RFC5226].\n"
  - contents:
    - "9.1.  SIP CLF Version\n   This document defines the SIP CLF \"Version\" field
      in Section 4.1.\n   IANA has created a registry of Version values entitled \"SIP
      CLF\n   Version Values\".  Version numbers MUST be incremented for any new SIP\n
      \  CLF protocol specification that changes any part of the SIP CLF\n   record
      format.  Changes include addition or removal of fields or a\n   change of syntax
      or semantics of existing fields.\n   Version numbers must be registered via
      the Standards Action method\n   described in [RFC5226].  IANA has registered
      the Versions shown in\n   Table 1 below.\n             +------------+----------------------+-----------+\n
      \            |   Version  |        FORMAT        | Reference |\n             +------------+----------------------+-----------+\n
      \            | 0x41 ('A') | Defined in [RFC6873] | [RFC6873] |\n             +------------+----------------------+-----------+\n
      \             Table 1: IANA-Registered SIP CLF Version Values\n"
    title: 9.1.  SIP CLF Version
  - contents:
    - "9.2.  SIP CLF Transport Flag\n   This document defines the SIP CLF \"Transport
      Flag\" as fourth byte in\n   the Flags field of the SIP CLF record.  The format
      and values of the\n   Transport Flag are described in Section 4.2.  IANA has
      created a\n   registry of SIP CLF Transport Flag values titled \"SIP CLF Transport\n
      \  Flag Values\".\n   SIP CLF Transport Flag values must be registered via the
      IETF Review\n   method described in [RFC5226].  IANA has registered the Transport\n
      \  Flag values shown in Table 2 below.\n                +-------+--------------------+-----------+\n
      \               | Value | Transport Protocol | Reference |\n                +-------+--------------------+-----------+\n
      \               |   U   |         UDP        | [RFC6873] |\n                |
      \  T   |         TCP        | [RFC6873] |\n                |   S   |        SCTP
      \       | [RFC6873] |\n                +-------+--------------------+-----------+\n
      \             Table 2: IANA-Registered SIP CLF Transport Flag\n"
    title: 9.2.  SIP CLF Transport Flag
  title: 9.  IANA Considerations
- contents:
  - "10.  Acknowledgments\n   The authors of this document would like to acknowledge
    and thank\n   Peter Musgrave (the chair of the SIPCLF working group) and Robert\n
    \  Sparks (the assigned Area Director) for their support, guidance, and\n   continued
    invaluable feedback.\n   This work benefited from the discussions and invaluable
    input by the\n   various members of the SIPCLF working group.  These include Brian\n
    \  Trammell, Eric Burger, Cullen Jennings, Benoit Claise, Saverio\n   Niccolini,
    and Dan Burnett.  Special thanks to Hadriel Kaplan, Chris\n   Lonvick, Paul E.
    Jones, John Elwell, Claudio Allocchio, and Joe\n   Clarke for their constructive
    comments, suggestions, and reviews that\n   were critical to the formulation and
    refinement of this document.\n   Thanks to Anders Nygren for his early implementation,
    insight, and\n   reviews of the SIP CLF format.\n"
  title: 10.  Acknowledgments
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
      \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n
      \  [RFC6872]  Gurbani, V., Burger, E., Anjali, T., Abdelnur, H., and O.\n              Festor,
      \"The Common Log Format (CLF) for the Session\n              Initiation Protocol
      (SIP): Framework and Information\n              Model\", RFC 6872, February
      2013.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [PEN]      IANA, \"Private Enterprise Numbers\",
      2009,\n              <http://www.iana.org/assignments/enterprise-numbers>.\n
      \  [RFC1166]  Kirkpatrick, S., Stahl, M., and M. Recker, \"Internet\n              numbers\",
      RFC 1166, July 1990.\n   [RFC4475]  Sparks, R., Hawrylyshen, A., Johnston, A.,
      Rosenberg, J.,\n              and H. Schulzrinne, \"Session Initiation Protocol
      (SIP)\n              Torture Test Messages\", RFC 4475, May 2006.\n   [RFC5226]
      \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
      \  [RFC5424]  Gerhards, R., \"The Syslog Protocol\", RFC 5424, March 2009.\n
      \  [RFC5612]  Eronen, P. and D. Harrington, \"Enterprise Number for\n              Documentation
      Use\", RFC 5612, August 2009.\n   [RFC5737]  Arkko, J., Cotton, M., and L. Vegoda,
      \"IPv4 Address Blocks\n              Reserved for Documentation\", RFC 5737,
      January 2010.\n   [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation
      for IPv6\n              Address Text Representation\", RFC 5952, August 2010.\n
      \  [UNICODE]  The Unicode Consortium, \"The Unicode Standard, Version\n              6.2.0\",
      (Mountain View, CA: ISBN 978-1-936213-07-8), 2012,\n              <http://www.unicode.org/versions/Unicode6.2.0/>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Gonzalo Salgueiro\n   Cisco Systems\n   7200-12 Kit Creek
    Road\n   Research Triangle Park, NC  27709\n   US\n   EMail: gsalguei@cisco.com\n
    \  Vijay Gurbani\n   Bell Labs, Alcatel-Lucent\n   1960 Lucent Lane\n   Rm 9C-533\n
    \  Naperville, IL  60563\n   US\n   EMail: vkg@bell-labs.com\n   Adam Roach\n
    \  Mozilla\n   Dallas, TX\n   US\n   EMail: adam@nostrum.com\n"
  title: Authors' Addresses
