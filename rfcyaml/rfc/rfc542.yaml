- title: __initial_text__
  contents:
  - ''
- title: 'Nancy J. Neigus                            See Also:  RFCs 354, 454, 495'
  contents:
  - 'Nancy J. Neigus                            See Also:  RFCs 354, 454, 495

    '
- title: Bolt Beranek and Newman, Inc.
  contents:
  - 'Bolt Beranek and Newman, Inc.

    '
- title: Cambridge, Mass.
  contents:
  - "Cambridge, Mass.\n              File Transfer Protocol for the ARPA Network\f"
- title: This document is the result of several months discussion via RFC
  contents:
  - 'This document is the result of several months discussion via RFC

    '
- title: (relevant numbers are 430, 448, 454, 463, 468, 478, 480), followed by a
  contents:
  - '(relevant numbers are 430, 448, 454, 463, 468, 478, 480), followed by a

    '
- title: meeting of the FTP committee at BBN on March 16, followed by further
  contents:
  - 'meeting of the FTP committee at BBN on March 16, followed by further

    '
- title: communication among committee members.  There are a considerable number
  contents:
  - 'communication among committee members.  There are a considerable number

    '
- title: of changes for the last "official" version, see RFCs 354, 385, but the
  contents:
  - 'of changes for the last "official" version, see RFCs 354, 385, but the

    '
- title: gross structure remains the same.  The places to look for differences
  contents:
  - 'gross structure remains the same.  The places to look for differences

    '
- title: are (1) in the definitions pf types and modes, (2) in the specification
  contents:
  - 'are (1) in the definitions pf types and modes, (2) in the specification

    '
- title: of the data connection and data sockets, (3) in the command-reply
  contents:
  - 'of the data connection and data sockets, (3) in the command-reply

    '
- title: sequences, (4) in the functions dependent on the TELNET protocol (FTP
  contents:
  - 'sequences, (4) in the functions dependent on the TELNET protocol (FTP

    '
- title: has been altered to correspond to the new TELNET spec).  The model has
  contents:
  - 'has been altered to correspond to the new TELNET spec).  The model has

    '
- title: been clarified and enlarged to allow inter-server file transfer, and
  contents:
  - 'been clarified and enlarged to allow inter-server file transfer, and

    '
- title: several new commands have been added to accommodate more specialized (or
  contents:
  - 'several new commands have been added to accommodate more specialized (or

    '
- title: site-specific) functions.  It is my belief that this new specificiation
  contents:
  - 'site-specific) functions.  It is my belief that this new specificiation

    '
- title: reflects the views expressed by the committee at the above-mentioned
  contents:
  - 'reflects the views expressed by the committee at the above-mentioned

    '
- title: meeting and in subsequent conversations.
  contents:
  - 'meeting and in subsequent conversations.

    '
- title: The large number of incompatibilities would complicate a phased
  contents:
  - 'The large number of incompatibilities would complicate a phased

    '
- title: implementation schedule, such as is in effect for the TELNET protocol.
  contents:
  - 'implementation schedule, such as is in effect for the TELNET protocol.

    '
- title: Therefore we have assigned a new socket, decimal 21, as a temporary
  contents:
  - 'Therefore we have assigned a new socket, decimal 21, as a temporary

    '
- title: logger socket for the new version and a change-over date of 1 February
  contents:
  - 'logger socket for the new version and a change-over date of 1 February

    '
- title: 1974.  Until that date the old (354, 385) version of FTP will be
  contents:
  - '1974.  Until that date the old (354, 385) version of FTP will be

    '
- title: available on Socket 3 and the new version (attached) should be
  contents:
  - 'available on Socket 3 and the new version (attached) should be

    '
- title: implemented on Socket 21.  On 1 February the new version will shift to
  contents:
  - 'implemented on Socket 21.  On 1 February the new version will shift to

    '
- title: Socket 3 and the old disappear from view.
  contents:
  - 'Socket 3 and the old disappear from view.

    '
- title: The File Transfer protocol should be considered stable at least until
  contents:
  - 'The File Transfer protocol should be considered stable at least until

    '
- title: February, though one should feel free to propose further changes via
  contents:
  - 'February, though one should feel free to propose further changes via

    '
- title: encouraged and should also be reported by RFC.)  In addition, members of
  contents:
  - 'encouraged and should also be reported by RFC.)  In addition, members of

    '
- title: the FTP committee may be contacted directly about changes.  Based on
  contents:
  - 'the FTP committee may be contacted directly about changes.  Based on

    '
- title: 'attendance at the March 16 meeting, they are:'
  contents:
  - "attendance at the March 16 meeting, they are:\n   Abhay Bhushan MIT-DMCG\n  \
    \ Bob Braden UCLA-CCN\n   Bob Bressler BBN-NET\n   Bob Clements BBN-TENEX\n  \
    \ John Day ILL-ANTS\n   Peter Deutsch PARC-MAXC\n   Wayne Hathaway AMES-67\n \
    \  Mike Kudlick SRI-ARC\n   Alex McKenzie BBN-NET\n   Bob Merryman UCSD-CC\n \
    \  Nancy Neigus BBN-NET\n   Mike Padlipsky MIT-Multics\n   Jim Pepin USC-44\n\
    \   Ken Pogran MIT-Multics\n   Jon Postel UCLA-NMC\n   Milton Reese FNWC\n   Brad\
    \ Reussow HARV-10\n   Marc Seriff MIT-DMCG\n   Ed Taft HARV-10\n   Bob Thomas\
    \ BBN-TENEX\n   Ric Werme CMU-10\n   Jim White SRI-ARC\n"
- title: I would especially like to thank Bob Braden, Ken Pogran, Wayne Hathaway,
  contents:
  - 'I would especially like to thank Bob Braden, Ken Pogran, Wayne Hathaway,

    '
- title: Jon Postel, Ed Taft and Alex McKenzie for their help in preparing this
  contents:
  - 'Jon Postel, Ed Taft and Alex McKenzie for their help in preparing this

    '
- title: document.
  contents:
  - 'document.

    '
- title: NJN/jm
  contents:
  - "NJN/jm\n                         FILE TRANSFER PROTOCOL\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   The File Transfer Protocol (FTP) is a protocol for file transfer\n\
    \   between Hosts (including Terminal Interface Message Processors\n   (TIPs))\
    \ on the ARPA Computer Network (ARPANET).  The primary function\n   of FTP is\
    \ to transfer files efficiently and reliably among Hosts and\n   to allow the\
    \ convenient use of remote file storage capabilities.\n   The objectives of FTP\
    \ are 1) to promote sharing of files (computer\n   programs and/or data), 2) to\
    \ encourage indirect or implicit (via\n   programs) use of remote computers, 3)\
    \ to shield a user from\n   variations in file storage systems among Hosts, and\
    \ 4) to transfer\n   data reliably and efficiently.  FTP, though usable directly\
    \ by a user\n   at a terminal, is designed mainly for use by programs.\n   The\
    \ attempt in this specification is to satisfy the diverse needs of\n   users of\
    \ maxi-Hosts, mini-Hosts, TIPs, and the Datacomputer, with a\n   simple, and easily\
    \ implemented protocol design.\n   This paper assumes knowledge of the following\
    \ protocols described in\n   NIC #7104:\n      The Host-Host Protocol\n      The\
    \ Initial Connection Protocol\n      The TELNET Protocol\n"
- title: DISCUSSION
  contents:
  - "DISCUSSION\n   In this section, the terminology and the FTP model are discussed.\n\
    \   The terms defined in this section are only those that have special\n   significance\
    \ in FTP.\n   TERMINOLOGY\n      ASCII\n         The USASCII character set as\
    \ defined in NIC #7104.  In FTP,\n         ASCII characters are defined to be\
    \ the lower half of an\n         eight-bit code set (i.e., the most significant\
    \ bit is zero).\n      access controls\n         Access controls define users'\
    \ access privileges to the use of a\n         system, and to the files in that\
    \ system.  Access controls are\n         necessary to prevent unauthorized or\
    \ accidental use of files.\n         It is the prerogative of a server-FTP process\
    \ to provide access\n         controls.\n      byte size\n         The byte size\
    \ specified for the transfer of data.  The data\n         connection is opened\
    \ with this byte size.  The data connection\n         byte size is not necessarily\
    \ the byte size in which data is to\n         be stored in a system, nor the logical\
    \ byte size for\n         interpretation of the structure of the data.\n     \
    \ data connection\n         A simplex connection over which data is transferred,\
    \ in a\n         specified byte size, mode and type. The data transferred may\
    \ be\n         a part of a file, an entire file or a number of files.  The\n \
    \        path may be between a server-DTP and a user-DTP, or between two\n   \
    \      server-DTPs.\n      data socket\n         The passive data transfer process\
    \ \"listens\" on the data socket\n         for an RFC from the active transfer\
    \ process (server) in order\n         to open the data connection.  The server\
    \ has fixed data\n         sockets; the passive process may or may not.\n    \
    \  EOF\n         The end-of-file condition that defines the end of a file being\n\
    \         transferred.\n      EOR\n         The end-of-record condition that defines\
    \ the end of a record\n         being transferred.\n      error recovery\n   \
    \      A procedure that allows a user to recover from certain errors\n       \
    \  such as failure of either Host system or transfer process.  In\n         FTP,\
    \ error recovery may involve restarting a file transfer at a\n         given checkpoint.\n\
    \      FTP commands\n         A set of commands that comprise the control information\
    \ flowing\n         from the user-FTP to the server-FTP process.\n      file\n\
    \         An ordered set of computer data (including programs), of\n         arbitrary\
    \ length, uniquely identified by a pathname.\n      mode\n         The mode in\
    \ which data is to be transferred via the data\n         connection. The mode\
    \ defines the data format during transfer\n         including EOR and EOF.  The\
    \ transfer modes defined in FTP are\n         described in the Section on Transmission\
    \ Modes.\n      NVT\n         The Network Virtual Terminal as defined in the ARPANET\
    \ TELNET\n         Protocol.\n      NVFS\n         The Network Virtual File System.\
    \  A concept which defines a\n         standard network file system with standard\
    \ commands and\n         pathname conventions.  FTP only partially embraces the\
    \ NVFS\n         concept at this time.\n      pathname\n         Pathname is defined\
    \ to be the character string which must be\n         input to a file system by\
    \ a user in order to identify a file.\n         Pathname normally contains device\
    \ and/or directory names, and\n         file name specification.  FTP does not\
    \ yet specify a standard\n         pathname convention.  Each user must follow\
    \ the file naming\n         conventions of the file systems he wishes to use.\n\
    \      record\n         A sequential file may be structured as a number of contiguous\n\
    \         parts called records.  Record structures are supported by FTP\n    \
    \     but a file need not have record structure.\n      reply\n         A reply\
    \ is an acknowledgment (positive or negative) sent from\n         server to user\
    \ via the TELNET connections in response to FTP\n         commands.  The general\
    \ form of a reply is a completion code\n         (including error codes) followed\
    \ by a text string.  The codes\n         are for use by programs and the text\
    \ is usually intended for\n         human users.\n      server-DTP\n         The\
    \ data transfer process, in its normal \"active\" state,\n         establishes\
    \ the data connection by RFC to the \"listening\" data\n         socket, sets\
    \ up parameters for transfer and storage, and\n         tranfers data on command\
    \ from its PI.  The DTP can be placed in\n         a \"passive\" state to listen\
    \ for, rather than initiate, an RFC\n         on the data socket.\n      server-FTP\
    \ process\n         A process or set of processes which perform the function of\n\
    \         file transfer in cooperation with a user-FTP process and,\n        \
    \ possibly, another server.  The functions consist of a protocol\n         interpreter\
    \ (PI) and a data transfer process (DTP).\n      server-PI\n         The protocol\
    \ interpreter \"listens\" on Socket 3 for an ICP from\n         a user-PI and\
    \ establishes a TELNET communication connection.\n         It receives standard\
    \ FTP commands from the user-PI, sends\n         replies, and governs the server-DTP.\n\
    \      TELNET connections\n         The full-duplex communication path between\
    \ a user-PI and a\n         server-PI.  The TELNET connections are established\
    \ via the\n         standard ARPANET Initial Connection Protocol (ICP).\n    \
    \  type\n         The data representation type used for data transfer and\n  \
    \       storage.  Type implies certain transformations between the time\n    \
    \     of data storage and data transfer.  The representation types\n         defined\
    \ in FTP are described in the Section on Establishing\n         Data Connections.\n\
    \      user\n         A human being or a process on behalf of a human being wishing\n\
    \         to obtain file transfer service.  The human user may interact\n    \
    \     directly with a server-FTP process, but use of a user-FTP\n         process\
    \ is preferred since the protocol design is weighted\n         towards automata.\n\
    \      user-DTP\n         The data transfer process \"listens\" on the data socket\
    \ for an\n         RFC from a server-FTP process.  If two servers are transferring\n\
    \         data between them, the user-DTP is inactive.\n      user-FTP process\n\
    \         A set of functions including a protocol interpreter, a data\n      \
    \   transfer process and a user interface which together perform\n         the\
    \ function of file transfer in cooperation with one or more\n         server-FTP\
    \ processes.  The user interface allows a local\n         language to be used\
    \ in the command-reply dialogue with the\n         user.\n      user-PI\n    \
    \     The protocol interpreter initiates the ICP to the server-FTP\n         process,\
    \ initiates FTP commands, and governs the user-DTP if\n         that process is\
    \ part of the file transfer.\n   THE FTP MODEL\n   With the above definitions\
    \ in mind, the following model (shown in\n   Figure 1) may be diagrammed for an\
    \ FTP service.\n               !/------\\!  FTP Commands  !/---------\\!\n   \
    \            !!Server!<-----------------!   User  !!\n               !!  PI  !----------------->!\
    \    PI   !!\n               !\\--:---/!   FTP Replies  !\\----:----/!\n     \
    \          !   V    !                !     V     !\n   --------    !/------\\\
    !      Data      !/---------\\!    --------\n   ! File !<--->!Server!<---------------->!\
    \  User   !<--->! File !\n   !System!    !! DTP  !!   Connections  !!   DTP  \
    \ !!    !System!\n               Server-FTP                   User-FTP\n   NOTES:\
    \ 1. The data connection may be in either direction.\n          2. The data connection\
    \ need not exist all of the time.\n                     Figure 1  Model for FTP\
    \ Use\n   In the model described in Figure 1, the user-protocol interpreter\n\
    \   initiates the TELNET connections. At the initiation of the user,\n   standard\
    \ FTP commands are generated by the user-PI and transmitted to\n   the server\
    \ process via the TELNET connections.  (The user may\n   establish a direct TELNET\
    \ connection to the server-FTP, from a TIP\n   terminal for example, and generate\
    \ standard FTP commands himself,\n   by-passing the user-FTP process.) Standard\
    \ replies are sent from the\n   server-PI to the user-PI over the TELNET connections\
    \ in response to\n   the commands.\n   The FTP commands specify the parameters\
    \ for the data connection (data\n   socket, byte size, transfer mode, representation\
    \ type, and structure)\n   and the nature of file system operation (store, retrieve,\
    \ append,\n   delete, etc.).  The user-DTP or its designate should \"listen\"\
    \ on the\n   specified data socket, and the server initiate the data connection\n\
    \   and data transfer in accordance with the specified parameters.  It\n   should\
    \ be noted that the data socket need not be in the same Host\n   that initiates\
    \ the FTP commands via the TELNET connections, but the\n   user or his user-FTP\
    \ process must ensure a \"listen\" on the specified\n   data socket.  It should\
    \ also be noted that two data connections, one\n   for send and the other for\
    \ receive, may exist simultaneously.\n   In another situation a user might wish\
    \ to transfer files between two\n   Hosts, neither of which is his local Host.\
    \ He sets up TELNET\n   connections to the two servers and then arranges for a\
    \ data\n   connection between them.  In this manner control information is\n \
    \  passed to the user-PI but data is transferred between he server data\n   transfer\
    \ processes.  Following is a model of this server-server\n   interaction.\n  \
    \               TELNET     ------------    TELNET\n                 -----------!\
    \ User-FTP !------------\n                 ! -------->! User-PI  !<--------- !\n\
    \                 V !        ------------         ! V\n         ! Server-FTP !\
    \   Data Connection      ! Server-FTP !\n         !    \"A\"     !<-----------------------!\
    \    \"B\"     !\n         -------------- Socket(A)    Socket(B) --------------\n\
    \                             Figure 2\n   The protocol requires that the TELNET\
    \ connections be open while data\n   transfer is in progress.  It is the responsibility\
    \ of the user to\n   request the closing of the TELNET connections when finished\
    \ using the\n   FTP service, while it is the server who takes the action.  The\
    \ server\n   may abort data transfer if the TELNET connections are closed without\n\
    \   command.\n"
- title: DATA TRANSFER FUNCTIONS
  contents:
  - "DATA TRANSFER FUNCTIONS\n   Files are transferred only via the data connection(s).\
    \  The TELNET\n   connection is used for the transfer of commands, which describe\
    \ the\n   functions to be performed, and the replies to these commands (see the\n\
    \   Section on FTP Replies).  Several commands are concerned with the\n   transfer\
    \ of data between Hosts.  These data transfer commands include\n   the BYTE, MODE,\
    \ and SOCKet commands which specify how the bits of the\n   data are to be transmitted,\
    \ and the STRUcture and TYPE commands,\n   which are used to define the way in\
    \ which the data are to be\n   represented. The transmission and representation\
    \ are basically\n   independent but \"Stream\" transmission mode is dependent\
    \ on the file\n   structure attribute and if \"Compressed\" transmission mode\
    \ is used the\n   nature of the filler byte depends on the representation type.\n\
    \   DATA REPRESENTATION AND STORAGE\n   Data is transferred from a storage device\
    \ in the sending Host to a\n   storage device in the receiving Host.  Often it\
    \ is necessary to\n   perform certain transformations on the data because data\
    \ storage\n   representations in the two systems are different.  For example,\n\
    \   NVT-ASCII has different data storage representations in diffeent\n   systems.\
    \  PDP-10's generally store NVT-ASCII as five 7-bit ASCII\n   characters, left-justified\
    \ in a 36-bit word. 360's store NVT-ASCII as\n   8-bit EBCDIC codes. Multics stores\
    \ NVT-ASCII as four 9-bit characters\n   in a 36-bit word.  It may be desirable\
    \ to convert characters into the\n   standard NVT-ASCII representation when transmitting\
    \ text between\n   dissimilar systems.  The sending and receiving sites would\
    \ have to\n   perform the necessary transformations between the standard\n   representation\
    \ and their internal representations.\n   A different problem in representation\
    \ arises when transmitting binary\n   data (not character codes) between Host\
    \ systems with different word\n   lengths.  It is not always clear how the sender\
    \ should send data, and\n   the receiver store it.  For example, when transmitting\
    \ 32-bit bytes\n   from a 32-bit word-length system to a 36-bit word-length system,\
    \ it\n   may be desirable (for reasons of efficiency and usefulness) to store\n\
    \   the 32-bit bytes right-justified in a 36-bit word in the latter\n   system.\
    \  In any case, the user should have the option of specifying\n   data representation\
    \ and transformation functions.  It should be noted\n   that FTP provides for\
    \ very limited data type representations.\n   Transformations desired beyond this\
    \ limited capability should be\n   performed by the user directly or via the use\
    \ of the Data\n   Reconfiguration Sevice (DRS, RFC #138, NIC #6715).  Additonal\n\
    \   representation types may be defined later if there is a demonstrable\n   need.\n\
    \   Data representations are handled in FTP by a user specifying a\n   representation\
    \ type.  This type may implicitly (as in ASCII or\n   EBCDIC) or explicitly (as\
    \ in Local byte) define a byte size for\n   interpretation which is referred to\
    \ as the \"logical byte size.\"  This\n   has nothing to do with the byte size\
    \ used for transmission over the\n   data connection(s) (called the \"transfer\
    \ byte size\") and the two\n   should not be confused.  For example, NVT-ASCII\
    \ has a logical byte\n   size of 8 bits but an ASCII file might be transferred\
    \ using a\n   transfer byte size of 32.  If the type is Local byte, then the TYPE\n\
    \   command has an obligatory second parameter specifying the logical\n   byte\
    \ size.\n   The types ASCII and EBCDIC also take a second (optional) parameter;\n\
    \   this is to indicate what kind of vertical format control, if any, is\n   associated\
    \ with a file.  The following data representation types are\n   defined in FTP:\n\
    \      ASCII Format\n         This is the default type and must be accepted by\
    \ all FTP\n         implementations.  It is intended primarily for the transfer\
    \ of\n         text files, except when both Hosts would find the EBCDIC type\n\
    \         more convenient.\n         The sender converts the data from his internal\
    \ character\n         representation to the standard 8-bit NVT-ASCII representation\n\
    \         (see the TELNET specification).  The receiver will convert the\n   \
    \      data from the standard form to his own internal form.\n         In accordance\
    \ with the NVT standard, the <CRLF> sequence should\n         be used, where necessary,\
    \ to denote the end of a line of text.\n         (See the discussion of file structure\
    \ at the end of the Section\n         on Data Representation and Storage).\n \
    \        Using the standard NVT-ASCII representation means that data\n       \
    \  must be interpreted as 8-bit bytes.  If the BYTE command (see\n         the\
    \ Section on Transfer Parameter Commands) specifies a\n         transfer byte\
    \ size different from 8 bits, the 8-bit ASCII\n         characters should be packed\
    \ contiguously without regard for\n         transfer byte boundaries.\n      \
    \   The Format parameter for ASCII and EBCDIC types is discussed\n         below.\n\
    \      EBCDIC Format\n         This type is intended for efficient transfer between\
    \ Hosts\n         which use EBCDIC for their internal character representation.\n\
    \         For transmission the data are represented as 8-bit EBCDIC\n        \
    \ characters.  The character code is the only difference between\n         the\
    \ functional specifications of EBCDIC and ASCII types.\n         End-of-line (as\
    \ opposed to end-of-record--see the discussion of\n         structure) will probably\
    \ be rarely used with EBCDIC type for\n         purposes of denoting structure,\
    \ but where it is necessary the\n         <NL> character should be used.\n   A\
    \ character file may be transferred to a Host for one of three\n   purposes: for\
    \ printing, for storage and later retrieval, or for\n   processing.  If a file\
    \ is sent for printing, the receiving Host must\n   know how the vertical format\
    \ control is represented.  In the second\n   case, it must be possible to store\
    \ a file at a Host and then retrieve\n   it later in exactly the same form.  Finally,\
    \ it ought to be possible\n   to move a file from one Host to another and process\
    \ the file at the\n   second Host without undue trouble.  A single ASCII or EBCDIC\
    \ format\n   does not satisfy all these conditions and so these types have a\n\
    \   second parameter specifying one of the following three formats:\n      Non-print\n\
    \         This is the default format to be used if the second (format)\n     \
    \    parameter is omitted.  Non-print format must be accepted by all\n       \
    \  FTP implementations.\n         The file need contain no vertical format information.\
    \  If it is\n         passed to a printer process, this process may assume standard\n\
    \         values for spacing and margins.\n         Normally, this format will\
    \ be used with files destined for\n         processing or just storage.\n    \
    \  TELNET Format Controls\n         The file contains ASCII/EBCDIC vertical format\
    \ controls (i.e.,\n         <CR>, <LF>, <NL>, <VT>, <FF>) which the printer process\
    \ will\n         interpret appropriately.  <CRLF>, in exactly this sequence,\n\
    \         also denotes end-of-line.\n      Carriage Control (ASA)\n         The\
    \ file contains ASA (FORTRAN) vertical format control\n         characters.  (See\
    \ NWG/RFC #189 Appendix C and Communications of\n         the ACM, Vol. 7, No.\
    \ 10, 606 (Oct. 1964)).  In a line or a\n         record, formatted according\
    \ to the ASA Standard, the first\n         character is not to be printed.  Instead\
    \ it should be used to\n         determine the vertical movement of the paper\
    \ which should take\n         place before the rest of the record is printed.\
    \  The ASA\n         Standard specifies the following control characters:\n  \
    \          Character     Vertical Spacing\n            blank         Move paper\
    \ up one line\n            0             Move paper up two lines\n           \
    \ 1             Move paper to top of next page\n            +             No movement,\
    \ i.e., overprint\n         Clearly there must be some way for a printer process\
    \ to\n         distinguish the end of the structural entity.  If a file has\n\
    \         record structure (see below) this is no problem; records will\n    \
    \     be explicitly marked during transfer and storage.  If the file\n       \
    \  has no record structure, the <CRLF> end-of-line sequence is\n         used\
    \ to separate printing lines, but these format effectors are\n         overridden\
    \ by the ASA controls.\n      Image\n         The data are sent as contiguous\
    \ bits which, for transfer, are\n         packed into transfer bytes of the size\
    \ specified in the BYTE\n         command.  The receiving site must store the\
    \ data as contiguous\n         bits.  The structure of the storage system might\
    \ necessitate\n         the padding of the file (or of each record, for a\n  \
    \       record-structured file) to some convenient boundary (byte, word\n    \
    \     or block).  This padding, which must be all zeroes, may occur\n        \
    \ only at the end of the file (or at the end of each record) and\n         there\
    \ must be a way of identifying the padding bits so that\n         they may be\
    \ stripped off if the file is retrieved.  The padding\n         transformation\
    \ should be well publicized to enable a user to\n         process a file at the\
    \ storage site.\n         Image type is intended for the efficient storage and\
    \ retrieval\n         of files and for the transfer of binary data.  It is\n \
    \        recommended that this type be accepted by all FTP\n         implementations.\n\
    \      Local byte Byte size\n         The data is transferred in logical bytes\
    \ of the size specified\n         by the obligatory second parameter, Byte size.\
    \  The value of\n         Byte size must be a decimal integer; there is no default\
    \ value.\n         The logical byte size is not necessarily the same as the\n\
    \         transfer byte size.  If there is a difference in byte sizes,\n     \
    \    then the logical bytes should be packed contiguously,\n         disregarding\
    \ transfer byte boundaries and with any necessary\n         padding at the end.\n\
    \         When the data reaches the receiving Host it will be transformed\n  \
    \       in a manner dependent on the logical byte size and the\n         particular\
    \ Host.  This transformation must be invertible (that\n         is an identical\
    \ file can be retrieved if the same parameters\n         are used) and should\
    \ be well publicized by the FTP\n         implementors.\n         This type is\
    \ intended for the transfer of structured data.  For\n         example, a user\
    \ sending 36-bit floating-point numbers to a Host\n         with a 32-bit word\
    \ could send his data as Local byte with a\n         logical byte size of 36.\
    \  The receiving Host would then be\n         expected to store the logical bytes\
    \ so that they could be\n         easily manipulated; in this example putting\
    \ the 36-bit logical\n         bytes into 64-bit double words should suffice.\n\
    \   A note of caution about parameters:  a file must be stored and\n   retrieved\
    \ with the same parameters if the retrieved version is to be\n   identical to\
    \ the version originally transmitted.  Conversely, FTP\n   implementations must\
    \ return a file identical to the original if the\n   parameters used to store\
    \ and retrieve a file are the same.\n   In addition to different representation\
    \ types, FTP allows the\n   structure of a file to be specified.  Currently two\
    \ file structures\n   are recognized in FTP: file-structure, where there is no\
    \ internal\n   structure, and record-structure, where the file is made up of\n\
    \   records.  File-structure is the default, to be assumed if the\n   STRUcture\
    \ command has not been used but both structures must be\n   accepted for \"text\"\
    \ files (i.e., files with TYPE ASCII or EBCDIC) by\n   all FTP implementations.\
    \  The structure of a file will affect both\n   the transfer mode of a file (see\
    \ the Section on Transmission Modes)\n   and the interpretation and storage of\
    \ the file.\n   The \"natural\" structure of a file will depend on which Host\
    \ stores\n   the file.  A source-code file will usually be stored on an IBM 360\
    \ in\n   fixed length records but on a PDP-10 as a stream of characters\n   partitioned\
    \ into lines, for example by <CRLF>.  If the transfer of\n   files between such\
    \ disparate sites is to be useful, there must be\n   some way for one site to\
    \ recognize the other's assumptions about the\n   file.\n   With some sites being\
    \ naturally file-oriented and others naturally\n   record-oriented there may be\
    \ problems if a file with one structure is\n   sent to a Host oriented to the\
    \ other.  If a text file is sent with\n   record-structure to a Host which is\
    \ file oriented, then that Host\n   should apply an internal transformation to\
    \ the file based on the\n   record structure.  Obviously this transformation should\
    \ be useful but\n   it must also be invertible so that an identical file may be\n\
    \   retreieved using record structure.\n   In the case of a file being sent with\
    \ file-structure to a\n   record-oriented Host, there exists the question of what\
    \ criteria the\n   Host should use to divide the file into records which can be\n\
    \   processed locally.  If this division is necessary the FTP\n   implementation\
    \ should use the end-of-line sequence, <CRLF> for ASCII,\n   or <NL> for EBCDIC\
    \ text files, as the delimiter.  If an FTP\n   implementation adopts this technique,\
    \ it must be prepared to reverse\n   the transformation if the file is retrieved\
    \ with file-structure.\n   ESTABLISHING DATA CONNECTIONS\n   The mechanics of\
    \ transferring data consists of setting up the data\n   connection to the appropriate\
    \ sockets and choosing the parameters for\n   transfer--byte size and mode. Both\
    \ the user and the server-DTPs have\n   default data sockets; these are the two\
    \ sockets (for send and\n   receive) immediately following the standard ICP TELNET\
    \ socket ,i.e.,\n   (U+4) and (U+5) for the user-process and (S+2), (S+3) for\
    \ the server.\n   The use of default sockets will ensure the security of the data\n\
    \   transfer, without requiring the socket information to be explicitly\n   exchanged.\n\
    \   The byte size for the data connection is specified by the BYTE\n   command,\
    \ or, if left unspecified, defaults to 8-bit bytes.  This byte\n   size is relevant\
    \ only for the actual transfer of the data; it has no\n   bearing on representation\
    \ of the data within a Host's file system.\n   The protocol does not require servers\
    \ to accept all possible byte\n   sizes. Since the use of various byte sizes is\
    \ intended for efficiency\n   of transfer, servers may implement only those sizes\
    \ for which their\n   data transfer is efficient including the default byte size\
    \ of 8 bits.\n   The passive data transfer process (this may be a user-DTP or\
    \ a second\n   server-DTP) shall \"listen\" on the data socket prior to sending\
    \ a\n   transfer request command.  The FTP request command determines the\n  \
    \ direction of the data transfer and thus which data socket (odd or\n   even)\
    \ is to be used in establishing the connection.  The server, upon\n   receiving\
    \ the transfer request, will initiate the data connection by\n   RFC to the appropriate\
    \ socket using the specified (or default) byte\n   size.  When the connection\
    \ is opened, the data transfer begins\n   between DTP's, and the server-PI sends\
    \ a confirming reply to the\n   user-PI.\n   It is possible for the user to specify\
    \ an alternate data socket by\n   use of the SOCK command.  He might want a file\
    \ dumped on a TIP line\n   printer or retrieved from a third party Host.  In the\
    \ latter case the\n   user-PI sets up TELNET connections with both server-PI's\
    \ and sends\n   each a SOCK command indicating the fixed data sockets of the other.\n\
    \   One server is then told (by an FTP command) to \"listen\" for an RFC\n   which\
    \ the other will initiate and finally both are sent the\n   appropriate transfer\
    \ commands.  The exact sequence of commands and\n   replies sent between the user-controller\
    \ and the servers is defined\n   in the Section on FTP Replies.\n   In general\
    \ it is the server's responsibility to maintain the data\n   connection--to initiate\
    \ the RFC's and the closes.  The exception to\n   this is when the user-DTP is\
    \ sending the data in a transfer mode that\n   requires the connection to be closed\
    \ to indicate EOF.  The server\n   MUST close the data connection under the following\
    \ conditions:\n      1. The server has completed sending data in a transfer mode\
    \ that\n         requires a close to indicate EOF.\n      2. The server receives\
    \ an ABORT command from the user.\n      3. The socket or byte size specification\
    \ is changed by a command\n         from the user.\n      4. The TELNET connections\
    \ are closed legally or otherwise.\n      5. An irrecoverable error condition\
    \ occurs.\n   Otherwise the close is a server option, the exercise of which he\
    \ must\n   indicate to the user-process by an appropriate reply.\n   TRANSMISSION\
    \ MODES\n   The next consideration in transferring data is choosing the\n   appropriate\
    \ transmission mode.  There are three modes: one which\n   formats the data and\
    \ allows for restart procedures; one which also\n   compresses the data for efficient\
    \ transfer; and one which passes the\n   data with little or no processing.  In\
    \ this last case the mode\n   interacts with the structure attribute to determine\
    \ the type of\n   processing.  In the compressed mode the representation type\n\
    \   determines the filler byte.\n   All data transfers must be completed with\
    \ an end-of-file (EOF) which\n   may be explicitly stated or implied by the closing\
    \ of the data\n   connection.  For files with record structure, all the end-of-record\n\
    \   markers (EOR) are explicit, including the final one.\n   Note:  In the rest\
    \ of this section, byte means \"transfer byte\" except\n   where explicitly stated\
    \ otherwise.\n   The following transmission modes are defined in FTP:\n      Stream\n\
    \         The data is transmitted as a stream of bytes.  There is no\n       \
    \  restriction on the representation type used; record structures\n         are\
    \ allowed, in which case the transfer byte size must be at\n         least 3 bits!\n\
    \         In a record structured file EOR and EOF will each be indicated\n   \
    \      by a two-byte control code of whatever byte size is used for\n        \
    \ the transfer.  The first byte of the control code will be all\n         ones,\
    \ the escape character.  The second byte will have the low\n         order bit\
    \ on and zeroes elsewhere for EOR and the second low\n         order bit on for\
    \ EOF; that is, the byte will have value 1 for\n         EOR and value 2 for EOF.\
    \  EOR and EOF may be indicated together\n         on the last byte transmitted\
    \ by turning both low order bits on,\n         i.e., the value 3.  If a byte of\
    \ all ones was intended to be\n         sent as data, it should be repeated in\
    \ the second byte of the\n         control code.\n         If the file does not\
    \ have record structure, the EOF is\n         indicated by the sending Host closing\
    \ the data connection and\n         all bytes are data bytes.\n   For the purpose\
    \ of standardized transfer, the sending Host will\n   translate his internal end\
    \ of line or end of record denotation into\n   the representation prescribed by\
    \ the transfer mode and file\n   structure, and the receiving Host will perform\
    \ the inverse\n   translation to his internal denotation.  An IBM 360 record count\n\
    \   field may not be recognized at another Host, so the end of record\n   information\
    \ may be transferred as a two byte control code in Stream\n   mode or as a flagged\
    \ bit in a Block or Compressed mode descriptor.\n   End of line in an ASCII or\
    \ EBCDIC file with no record structure\n   should be indicated by <CRLF> or <NL>,\
    \ respectively.  Since these\n   transformations imply extra work for some systems,\
    \ identical systems\n   transferring non-record structured text files might wish\
    \ to use a\n   binary representation and stream mode for the transfer.\n     \
    \ Block\n         The file is transmitted as a series of data blocks preceded\
    \ by\n         one or more header bytes.  The header bytes contain a count\n \
    \        field, and descriptor code.  The count field indicates the\n        \
    \ total length of the data block in bytes, thus marking the\n         beginning\
    \ of the next data block (there are no filler bits).\n         The descriptor\
    \ code defines:  last block in the file (EOF) last\n         block in the record\
    \ (EOR), restart marker (see the Section on\n         Error Recovery and Restart)\
    \ or suspect data (i.e., the data\n         being transferred is suspected of\
    \ errors and is not reliable).\n         This last code is NOT intended for error\
    \ control within FTP.\n         It is motivated by the desire of sites exchanging\
    \ certain types\n         of data (e.g., seismic or weather data) to send and\
    \ receive all\n         the data despite local errors (such as \"magnetic tape\
    \ read\n         errors\"), but to indicate in the transmission that certain\n\
    \         portions are suspect).  Record structures are allowed in this\n    \
    \     mode, and any representation type may be used.  There is no\n         restriction\
    \ on the transfer byte size.\n         The header consists of the smallest integral\
    \ number of bytes\n         whose length is greater than or equal to 24 bits.\
    \  Only the\n         LEAST significant 24 bits (right-justified) of header shall\n\
    \         have information; the remaining most significant bits are\n        \
    \ \"don't care\" bits.  Of the 24 bits of header information, the\n         16\
    \ low order bits shall represent byte count, and the 8 high\n         order bits\
    \ shall represent descriptor codes as shown below.\n         Integral number of\
    \ bytes greater than or equal to 24 bits\n         !    Don't care    !    Descriptor\
    \    !    Byte Count  !\n         !  0 to 231 bits   !      8 bits      !    \
    \ 16 bits    !\n         The descriptor codes are indicated by bit flags in the\n\
    \         descriptor byte.  Four codes have been assigned, where each\n      \
    \   code number is the decimal value of the corresponding bit in\n         the\
    \ byte.\n            Code     Meaning\n             128     End of data block\
    \ is EOR\n              64     End of data block is EOF\n              32    \
    \ Suspected errors in data block\n              16     Data block is a restart\
    \ marker\n         With this encoding more than one descriptor coded condition\
    \ may\n         exist for a particular block.  As many bits as necessary may be\n\
    \         flagged.\n         The restart marker is embedded in the data stream\
    \ as an\n         integral number of 8-bit bytes representing printable\n    \
    \     characters in the language being used over the TELNET\n         connection\
    \ (e.g., default--NVT-ASCII).  These marker bytes are\n         right-justified\
    \ in the smallest integral number of transfer\n         bytes greater than or\
    \ equal to 8 bits.  For example, if the\n         byte size is 7 bits, the restart\
    \ marker byte would be one byte\n         right-justified per two 7-bit bytes\
    \ as shown below:\n                 Two 7-bit bytes\n            !        !  Marker\
    \ Char !\n            !        !     8 bits   !\n         If the transfer byte\
    \ size is 16 or more bits, the maximum\n         possible number of complete marker\
    \ bytes should be packed,\n         right-justified, into each transfer byte.\
    \  The restart marker\n         should begin in the first marker byte.  If there\
    \ are any unused\n         marker bytes, these should be filled with the character\
    \ <SP>\n         (Space, in the appropriate language).  <SP> must not be used\n\
    \         WITHIN a restart marker.  For example, to transmit a\n         six-character\
    \ marker with a 36-bit transfer byte size, the\n         following three 36-bit\
    \ bytes would be sent:\n            ! Don't care !Descriptor! Byte count = 2 !\n\
    \            !   12 bits  ! code = 16!                !\n            !    ! Marker\
    \ ! Marker ! Marker ! Marker !\n            !    ! 8 bits ! 8 bits ! 8 bits !\
    \ 8 bits !\n            !    ! Marker ! Marker ! Space  ! Space  !\n         \
    \   !    ! 8 bits ! 8 bits ! 8 bits ! 8 bits !\n      Compressed\n         The\
    \ file is transmitted as series of bytes of the size\n         specified by the\
    \ BYTE command.  There are three kinds of\n         information to be sent:  regular\
    \ data, sent in a byte string;\n         compressed data, consisting of replications\
    \ or filler; and\n         control information, sent in a two-byte escape sequence.\
    \  If\n         the byte size is B bits and n>0 bytes of regular data are sent,\n\
    \         these n bytes are preceded by a byte with the left-most bit set\n  \
    \       to 0 and the right-most B-1 bits containing the number n.\n          \
    \              1  B-1    B        B\n         Byte string:  !0! n !  !d(1)!...!d(n)!\n\
    \            String of n data bytes d(1),..., d(n)\n            Count n must be\
    \ positive\n         To compress a string of n replications of the data byte d,\
    \ the\n         following 2 bytes are sent:\n                              2 \
    \    B-2       B\n         Replicated Byte:  ! 1 0 !   n   !  ! d  !\n       \
    \  A string of n filler bytes can be compressed into a single\n         byte,\
    \ where the filler byte varies with the representation\n         type.  If the\
    \ type is ASCII or EBCDIC the filler byte is <SP>\n         (Space, ASCII code\
    \ 32., EBCDIC code 64).  If the transfer byte\n         size is not 8, the expanded\
    \ byte string should be filled with\n         8-bit <SP> characters in the manner\
    \ described in the definition\n         of ASCII representation type (see the\
    \ Section on Data\n         Representation and Storage).  If the type is Image\
    \ or Local\n         byte the filler is a zero byte.\n                       \
    \     2     B-2\n         Filler String:  ! 1 1 !   n   !\n         The escape\
    \ sequence is a double byte, the first of which is the\n         escape byte (all\
    \ zeroes) and the second of which contains\n         descriptor codes as defined\
    \ in Block mode.  This implies that\n         the byte size must be at least 8\
    \ bits, which is not much of a\n         restriction for efficiency in this mode.\
    \  The descriptor codes\n         have the same meaning as in Block mode and apply\
    \ to the\n         succeeding string of bytes.\n         Compressed mode is useful\
    \ for obtaining increased bandwidth on\n         very large network transmissions\
    \ at a little extra CPU cost.\n         It is most efficient when the byte size\
    \ chosen is that of the\n         word size of the transmitting Host, and can\
    \ be most effectively\n         used to reduce the size of printer files such\
    \ as those\n         generated by RJE Hosts.\n   ERROR RECOVERY AND RESTART\n\
    \   There is no provision for detecting bits lost or scrambled in data\n   transfer.\
    \  This issue is perhaps handled best at the NCP level where\n   it benefits most\
    \ users.  However, a restart procedure is provided to\n   protect users from gross\
    \ system failures (including failures of a\n   Host, an FTP-process, or the IMP\
    \ subnet).\n   The restart procedure is defined only for the block and compressed\n\
    \   modes of data transfer.  It requires the sender of data to insert a\n   special\
    \ marker code in the data stream with some marker information.\n   The marker\
    \ information has meaning only to the sender, but must\n   consist of printable\
    \ characters in the default or negotiated language\n   of the TELNET connection.\
    \  The marker could represent a bit-count, a\n   record-count, or any other information\
    \ by which a system may identify\n   a data checkpoint.  The receiver of data,\
    \ if it implements the\n   restart procedure, would then mark the corresponding\
    \ position of this\n   marker in the recieving system, and return this information\
    \ to the\n   user.\n   In the event of a system failure, the user can restart\
    \ the data\n   transfer by identifying the marker point with the FTP restart\n\
    \   procedure.  The following example illustrates the use of the restart\n   procedure.\n\
    \   The sender of the data inserts an appropriate marker block in the\n   data\
    \ stream at a convenient point.  The receiving Host marks the\n   corresponding\
    \ data point in its file system and conveys the last\n   known sender and receiver\
    \ marker information to the user, either\n   directly or over the TELNET connection\
    \ in a 251 reply (depending on\n   who is the sender).  In the event of a system\
    \ failure, the user or\n   controller process restarts the server at the last\
    \ server marker by\n   sending a restart command with server's marker code as\
    \ its argument.\n   The restrart command is transmitted over the TELNET connection\
    \ and is\n   immediately followed by the command (such as RETR, STOR or LIST)\n\
    \   which was being executed when the system failure occurred.\n"
- title: FILE TRANSFER FUNCTIONS
  contents:
  - "FILE TRANSFER FUNCTIONS\n   The communication channel from the user-PI to the\
    \ server-PI is\n   established by ICP from the user to a standard server socket.\
    \  The\n   user protocol interpreter is responsible for sending FTP commands and\n\
    \   interpreting the replies received; the server-PI interprets commands,\n  \
    \ sends replies and directs its DTP to set up the data connection and\n   transfer\
    \ the data.  If the second party to the data transfer (the\n   passive transfer\
    \ process) is the user-DTP then it is governed through\n   the internal protocol\
    \ of the user-FTP Host; if it is a second\n   server-DTP then it is governed by\
    \ its PI on command from the user-PI.\n   FTP COMMANDS\n   The File Transfer Protocol\
    \ follows the specifications of the TELNET\n   protocol for all communications\
    \ over the TELNET connection - see NIC\n   #7104.  Since, in the future, the language\
    \ used for TELNET\n   communication may be a negotiated option, all references\
    \ in the next\n   two sections will be to the \"TELNET language\" and the corresponding\n\
    \   \"TELNET end of line code\".  Currently one may take these to mean\n   NVT-ASCII\
    \ and <CRLF>.  No other specifications of the TELNET protocol\n   will be cited.\n\
    \   FTP commands are \"TELNET strings\" terminated by the \"TELNET end of\n  \
    \ line code\".  The command codes themselves are alphabetic characters\n   terminated\
    \ by the character <SP> (Space) if parameters follow and\n   TELNET-EOL otherwise.\
    \  The command codes and the semantics of\n   commands are described in this section;\
    \ the detailed syntax of\n   commands is specified in the Section on Commands,\
    \ the reply sequences\n   are discussed in the Section on Sequencing of Commands\
    \ and Replies,\n   and scenarios illustrating the use of commands are provided\
    \ in the\n   Section on Typical FTP Scenarios.\n   FTP commands may be partitioned\
    \ as those specifying access-control\n   identifiers, data transfer parameters,\
    \ or FTP service requests.\n   Certain commands (such as ABOR, STAT, BYE) may\
    \ be sent over the\n   TELNET connections while a data transfer is in progress.\
    \  Some\n   servers may not be able to monitor the TELNET and data connections\n\
    \   simultaneously, in which case some special action will be necessary\n   to\
    \ get the server's attention.  The exact form of the \"special\n   action\" is\
    \ related to decisions currently under review by the TELNET\n   committee; but\
    \ the following ordered format is tentatively\n   recommended:\n      1. User\
    \ system inserts the TELNET \"Interrupt Process\" (IP) signal\n         in the\
    \ TELNET stream.\n      2. User system sends the TELNET \"Synch\" signal\n   \
    \   3. User system inserts the command (e.g., ABOR) in the TELNET\n         stream.\n\
    \      4. Server PI,, after receiving \"IP\", scans the TELNET stream for\n  \
    \       EXACTLY ONE FTP command.\n   (For other servers this may not be necessary\
    \ but the actions listed\n   above should have no unusual effect.)\n   ACCESS\
    \ CONTROL COMMANDS\n   The following commands specify access control identifiers\
    \ (command\n   codes are shown in parentheses).\n      USER NAME (USER)\n    \
    \     The argument field is a TELNET string identifying the user.\n         The\
    \ user identification is that which is required by the server\n         for access\
    \ to its file system.  This command will normally be\n         the first command\
    \ transmitted by the user after the TELNET\n         connections are made (some\
    \ servers may require this).\n         Additional identification information in\
    \ the form of a password\n         and/or an account command may also be required\
    \ by some servers.\n         Servers may allow a new USER command to be entered\
    \ at any point\n         in order to change the access control and/or accounting\n\
    \         information.  This has the effect of flushing any user,\n         password,\
    \ and account information already supplied and\n         beginning the login sequence\
    \ again.  All transfer parameters\n         are unchanged and any file transfer\
    \ in progress is completed\n         under the old acccount.\n      PASSWORD (PASS)\n\
    \         The argument field is a TELNET string identifying the user's\n     \
    \    password.  This command must be immediately preceded by the\n         user\
    \ name command, and, for some sites, completes the user's\n         identification\
    \ for access control.  Since password information\n         is quite sensitive,\
    \ it is desirable in general to \"mask\" it or\n         suppress typeout.  It\
    \ appears that the server has no foolproof\n         way to achieve this.  It\
    \ is therefore the responsibility of the\n         user-FTP process to hide the\
    \ sensitive password information.\n      ACCOUNT (ACCT)\n         The argument\
    \ field is a TELNET string identifying the user's\n         account.  The command\
    \ is not necessarily related to the USER\n         command, as some sites may\
    \ require an account for login and\n         others only for specific access,\
    \ such as storing files.  In the\n         latter case the command may arrive\
    \ at any time.  There are two\n         reply codes to differentiate these cases\
    \ for the automaton:\n         when account information is required for login,\
    \ the response to\n         a successful PASSword command is reply code 331; then\
    \ if a\n         command other than ACCounT is sent, the server may remember it\n\
    \         and return a 331 reply, prepared to act on the command after\n     \
    \    the account information is received; or he may flush the\n         command\
    \ and return a 433 reply asking for the account.  On the\n         other hand,\
    \ if account information is NOT required for login,\n         the reply to a successful\
    \ PASSword command is 230; and if the\n         information is needed for a command\
    \ issued later in the\n         dialogue, the server should return a 331 or 433\
    \ reply depending\n         on whether he stores (pending receipt of the ACCounT\
    \ command)\n         or discards the command, respectively.\n      REINITIALIZE\
    \ (REIN)\n         This command terminates a USER, flushing all I/O and account\n\
    \         information, except to allow any transfer in progress to be\n      \
    \   completed.  All parameters are reset to the default settings\n         and\
    \ the TELNET connection is left open.  This is identical to\n         the state\
    \ in which a user finds himself immediately after the\n         ICP is completed\
    \ and the TELNET connections are opened.  A USER\n         command may be expected\
    \ to follow.\n      LOGOUT (BYE)\n         This command terminates a USER and\
    \ if file transfer is not in\n         progress, the server closes the TELNET\
    \ connection.  If file\n         transfer is in progress, the connection will\
    \ remain open for\n         result response and the server will then close it.\
    \  If the\n         user-process is transferring files for several USERs but does\n\
    \         not wish to close and then reopen connections for each, then\n     \
    \    the REIN command should be used instead of BYE.\n         An unexpected close\
    \ on the TELNET connection will cause the\n         server to take the effective\
    \ action of an abort (ABOR) and a\n         logout (BYE).\n   TRANSFER PARAMETER\
    \ COMMANDS\n   All data transfer parameters have default values, and the commands\n\
    \   specifying data transfer parameters are required only if the default\n   parameter\
    \ values are to be changed.  The default value is the last\n   specified value,\
    \ or if no value has been specified, the standard\n   default value as stated\
    \ here.  This implies that the server must\n   \"remember\" the applicable default\
    \ values.  The commands may be in any\n   order except that they must precede\
    \ the FTP service request.  The\n   following commands specify data transfer parameters.\n\
    \      BYTE SIZE (BYTE)\n         The argument is a decimal integer (1 through\
    \ 255) specifying\n         the byte size for the data connection.  The default\
    \ byte size\n         is 8 bits.  A server may reject certain byte sizes that\
    \ he has\n         not implemented.\n      DATA SOCKET (SOCK)\n         The argument\
    \ is a HOST-SOCKET specification for the data socket\n         to be used in data\
    \ connection.  There may be two data sockets,\n         one for transfer from\
    \ the \"active\" DTP to the \"passive\" DTP and\n         one for \"passive\"\
    \ to \"active\".  An odd socket number defines a\n         send socket and an\
    \ even socket number defines a receive socket.\n         The default HOST is the\
    \ user Host to which TELNET connections\n         are made.  The default data\
    \ sockets are (U+4) and (U+5) where U\n         is the socket number used in the\
    \ TELNET ICP and the TELNET\n         connections are on sockets (U+2) and (U+3).\
    \  The server has\n         fixed data sockets (S+2) and (S+3) as well, and under\
    \ normal\n         circimstances this command and its reply are not needed.\n\
    \      PASSIVE (PASV)\n         This command requests the server-DTP to \"listen\"\
    \ on both of his\n         data sockets and to wait for an RFC to arrive for one\
    \ socket\n         rather than initiate one upon receipt of a transfer command.\n\
    \         It is assumed the server has already received a SOCK command to\n  \
    \       indicate the foreign socket from which the RFC will arrive to\n      \
    \   ensure the security of the transfer.\n      REPRESENTATION TYPE (TYPE)\n \
    \        The argument specifies the representation type as described in\n    \
    \     the Section on Data Representation and Storage.  Several types\n       \
    \  take a second parameter.  The first parameter is denoted by a\n         single\
    \ TELNET character, as is the second Format parameter for\n         ASCII and\
    \ EBCDIC; the second parameter for local byte is a\n         decimal integer to\
    \ indicate Bytesize.  The parameters are\n         separated by a <SP> (Space,\
    \ ASCII code 32.).  The following\n         codes are assigned for type:\n   \
    \                   \\    /\n            A - ASCII !    ! N - Non-print\n    \
    \                  !-><-! T - TELNET format effectors\n            E - EBCDIC!\
    \    ! C - Carriage Control (ASA)\n                      /    \\\n           \
    \ I - Image\n            L # - Local byte Bytesize\n         The default representation\
    \ type is ASCII Non-print.  If the\n         Format parameter is changed, and\
    \ later just the first argument\n         is changed, Format then returns to the\
    \ Non-print default.\n      FILE STRUCTURE (STRU)\n         The argument is a\
    \ single TELNET character code specifying file\n         structure described in\
    \ the Section on Data Representation and\n         Storage.  The following codes\
    \ are assigned for structure:\n            F - File (no record structure)\n  \
    \          R - Record structure\n         The default structure is File  (i.e.,\
    \ no records).\n      TRANSFER MODE (MODE)\n         The argument is a single\
    \ TELNET character code specifying the\n         data transfer modes described\
    \ in the Section on Transmission\n         Modes.  The following codes are assigned\
    \ for transfer modes:\n            S - Stream\n            B - Block\n       \
    \     C - Compressed\n         The default transfer mode is Stream.\n   FTP SERVICE\
    \ COMMANDS\n   The FTP service commands define the file transfer or the file system\n\
    \   function requested by the user.  The argument of an FTP service\n   command\
    \ will normally be a pathname.  The syntax of pathnames must\n   conform to server\
    \ site conventions (with standard defaults\n   applicable), and the language conventions\
    \ of the TELNET connection.\n   The suggested default handling is to use the last\
    \ specified device,\n   directory or file name, or the standard default defined\
    \ for local\n   users.  The commands may be in any order except that a \"rename\
    \ from\"\n   command must be followed by a \"rename to\" command and the restart\n\
    \   command must be followed by the interrupted service command.  The\n   data,\
    \ when transferred in response to FTP service commands, shall\n   always be sent\
    \ over the data connection, except for certain\n   informative replies.  The following\
    \ commands specify FTP service\n   requests:\n      RETRIEVE (RETR)\n        \
    \ This command causes the server-DTP to transfer a copy of the\n         file,\
    \ specified in the pathname, to the server- or user-DTP at\n         the other\
    \ end of the data connection.  The status and contents\n         of the file at\
    \ the server site shall be unaffected.\n      STORE (STOR)\n         This command\
    \ causes the server-DTP to accept the data\n         transferred via the data\
    \ connection and to store the data as a\n         file at the server site.  If\
    \ the file specified in the pathname\n         exists at the server site then\
    \ its contents shall be replaced\n         by the data being transferred.  A new\
    \ file is created at the\n         server site if the file specified in the pathname\
    \ does not\n         already exist.\n      APPEND (with create) (APPE)\n     \
    \    This command causes the server-DTP to accept the data\n         transferred\
    \ via the data connection and to store the data in a\n         file at the server\
    \ site.  If the file specified in the pathname\n         exists at the server\
    \ site, then the data shall be appended to\n         that file; otherwise the\
    \ file specified in the pathname shall\n         be created at the server site.\n\
    \      ALLOCATE (ALLO)\n         This command may be required by some servers\
    \ to reserve\n         sufficient storage to accommodate the new file to be\n\
    \         transferred.  The argument shall be a decimal integer\n         representing\
    \ the number of bytes (using the logical byte size)\n         of storage to be\
    \ reserved for the file.  For files sent with\n         record structure a maximum\
    \ record size (in logical bytes) might\n         also be necessary; this is indicated\
    \ by a decimal integer in a\n         second argument field of the command.  This\
    \ second argument is\n         optional, but when present should be separated\
    \ from the first\n         by the three TELNET characters <SP> R <SP>.  This command\
    \ shall\n         be followed by a STORe or APPEnd command.  The ALLO command\n\
    \         should be treated as a NOOP (no operation) by those servers\n      \
    \   which do not require that the maximum size of the file be\n         declared\
    \ beforehand, and those servers interested in only the\n         maximum record\
    \ size should accept a dummy value in the first\n         argument and ignore\
    \ it.\n      RESTART (REST)\n         The argument field represents the server\
    \ marker at which file\n         transfer is to be restarted.  This command does\
    \ not cause file\n         transfer but \"spaces\" over the file to the specified\
    \ data\n         checkpoint.  This command shall be immediately followed by the\n\
    \         appropriate FTP service command which shall cause file transfer\n  \
    \       to resume.\n      RENAME FROM (RNFR)\n         This command specifies\
    \ the file which is to be renamed.  This\n         command must be immediately\
    \ followed by a \"rename to\" command\n         specifying the new file pathname.\n\
    \      RENAME TO (RNTO)\n         This command specifies the new pathname of the\
    \ file specified\n         in the immediately preceding \"rename from\" command.\
    \  Together\n         the two commands cause a file to be renamed.\n      ABORT\
    \ (ABOR)\n         This command indicates to the server to abort the previous\
    \ FTP\n         service command and any associated transfer of data.  The abort\n\
    \         command may require \"special action\", as discussed in the\n      \
    \   Section on FTP Commands, to force recognition by the server.\n         No\
    \ action is to be taken if the previous command has been\n         completed (including\
    \ data transfer).  The TELNET connections\n         are not to be closed by the\
    \ server, but the data connection\n         must be closed.  An appropriate reply\
    \ should be sent by the\n         server in all cases.\n      DELETE (DELE)\n\
    \         This command causes the file specified in the pathname to be\n     \
    \    deleted at the server site.  If an extra level of protection is\n       \
    \  desired (such as the query, \"DO you really wish to delete?\"),\n         it\
    \ should be provided by the user-FTP process.\n      LIST (LIST)\n         This\
    \ command causes a list to be sent from the server to the\n         passive DTP.\
    \  If the pathname specifies a directory, the server\n         should transfer\
    \ a list of files in the specified directory.  If\n         the pathname specifies\
    \ a file then the server should send\n         current information on the file.\
    \  A null argument implies the\n         user's current working or default directory.\
    \  The data transfer\n         is over the data connection in type ASCII or type\
    \ EBCDIC.  (The\n         user must ensure that the TYPE is appropriately ASCII\
    \ or\n         EBCDIC).\n      NAME-LIST (NLST)\n         This command causes\
    \ a directory listing to be sent from server\n         to user site.  The pathname\
    \ should specify a directory or other\n         system-specific file group descriptor;\
    \ a null argument implies\n         the current directory.  The server will return\
    \ a stream of\n         names of files and no other information.  The data will\
    \ be\n         transferred in ASCII or EBCDIC type over the data connection as\n\
    \         valid pathname strings separated by <CRLF> or <NL>.  (Again the\n  \
    \       user must ensure that the TYPE is correct.)\n      SITE PARAMETERS (SITE)\n\
    \         This command is used by the server to provide services specific\n  \
    \       to his system that are essential to file transfer but not\n         sufficiently\
    \ universal to be included as commands in the\n         protocol.  The nature\
    \ of these services and the specification\n         of their syntax can be stated\
    \ in a reply to the HELP SITE\n         command.\n      STATUS (STAT)\n      \
    \   This command shall cause a status response to be sent over the\n         TELNET\
    \ connection in the form of a reply.  The command may be\n         sent during\
    \ a file transfer (along with the TELNET IP and Synch\n         signals--see the\
    \ Section on FTP Commands) in which case the\n         server will respond with\
    \ the status of the operation in\n         progress, or it may be sent between\
    \ file transfers.  In the\n         latter case the command may have an argument\
    \ field.  If the\n         argument is a pathname, the command is analogous to\
    \ the \"list\"\n         command except that data shall be trasferred over the\
    \ TELNET\n         connection.  If a partial pathname is given, the server may\n\
    \         respond with a list of file names or attributes associated with\n  \
    \       that specification.  If no argument is given, the server should\n    \
    \     return general status information about the server FTP process.\n      \
    \   This should include current values of all transfer parameters\n         and\
    \ the status of connections.\n      HELP (HELP)\n         This command shall cause\
    \ the server to send helpful information\n         regarding its implementation\
    \ status over the TELNET connection\n         to the user.  The command may take\
    \ an argument (e.g., any\n         command name) and return more specific information\
    \ as a\n         response.  The reply is type Oxx, general system status.  It\
    \ is\n         suggested that HELP be allowed before entering a USER command.\n\
    \         The server may use this reply to specify site-dependent\n         parameters,\
    \ e.g., in response to HELP SITE.\n      NOOP (NOOP)\n         This command does\
    \ not affect any parameters or previously\n         entered commands. It specifies\
    \ no action other than that the\n         server send a 200 reply.\n   MISCELLANEOUS\
    \ COMMANDS\n   There are several functions that utilize the services of file\n\
    \   transfer but go beyond it in scope.  These are the Mail and Remote\n   Job\
    \ Entry functions.  It is suggested that these become auxiliary\n   protocols\
    \ that can assume recognition of file transfer commands on\n   the part of the\
    \ server, i.e., they may depend on the core of FTP\n   commands.  The command\
    \ sets specific to Mail and RJE will be given in\n   separate documents.\n   Commands\
    \ that are closely related to file transfer but not proven\n   essential to the\
    \ protocol may be implemented by servers on an\n   experimental basis.  The command\
    \ name should begin with an X and may\n   be listed in the HELP command.  The\
    \ official command set is\n   expandable from these experiments; all experimental\
    \ commands or\n   proposals for expanding the official command set should be announced\n\
    \   via RFC.  An example of a current experimental command is:\n      Change Working\
    \ Directory (XCWD)\n         This command allows the user to work with a different\
    \ directory\n         or dataset for file storage or retrieval without altering\
    \ his\n         login or accounting information.  Transfer parameters are\n  \
    \       similarly unchanged.  The argument is a pathname specifying a\n      \
    \   directory or other system dependent file group designator.\n   FTP REPLIES\n\
    \   The server sends FTP replies over the TELNET connection in response\n   to\
    \ user FTP commands.  The FTP replies constitute the acknowledgment\n   or completion\
    \ code (including errors).  The FTP-server replies are\n   formatted for human\
    \ or program interpretation.  Single line replies\n   consist of a leading three-digit\
    \ numeric code followed by a space,\n   followed by a one-line text explanation\
    \ of the code.  For replies\n   that contain several lines of text, the first\
    \ line will have a\n   leading three-digit numeric code followed immediately by\
    \ the\n   character \"-\" (Hyphen, ASCII code 45), and possibly some text.  All\n\
    \   succeeding continuation lines except the last are constrained NOT to\n   begin\
    \ with three digits; the last line must repeat the numeric code\n   of the first\
    \ line and be followed immediately by a space.  For\n   example:\n      100-First\
    \ Line\n      Continuation Line\n      Another Line\n      100 Last Line\n   It\
    \ is possible to nest (but not overlap) a reply withiin a multi-line\n   reply.\
    \  The same format for matched number-coded first and last lines\n   holds.\n\
    \   The numeric codes are assigned by groups and for ease of\n   interpretation\
    \ by programs in a manner consistent with other\n   protocols such as the RJE\
    \ protocol.  The three digits of the code are\n   to be interpreted as follows:\n\
    \      1. The first digit specifies type of response as indicated below:\n   \
    \      0xx  These replies are purely informative and constitute\n            \
    \  neither a positive nor a negative acknowledgment.\n         1xx  Informative\
    \ replies to status inquiries.  These constitute\n              a positive acknowledgment\
    \ to the status command.\n         2xx  Positive acknowledgment of previous command\
    \ or other\n              successful action.\n         3xx  Incomplete information.\
    \  Activity cannot proceed without\n              further specification and input.\n\
    \         4xx  Unsuccessful reply.  The request is correctly specified\n     \
    \         but the server is unsuccessful in correctly fulfilling it.\n       \
    \  5xx  Incorrect or illegal command.  The command or its\n              parameters\
    \ were invalid or incomplete from a syntactic\n              viewpoint, or the\
    \ command is inconsistent with a previous\n              command.  The command\
    \ in question has been completely\n              ignored.\n         6xx-9xx  Reserved\
    \ for future expansion.\n      2. The second digit specifies the general category\
    \ to which the\n         response refers:\n         x00-x29  General purpose replies,\
    \ not assignable to other\n              categories.\n         x3x  Primary access.\
    \  Informative replies to the \"log-on\"\n              attempt.\n         x4x\
    \  Secondary access.  The primary server is commenting on its\n              ability\
    \ to access a secondary service.\n         x5x  FTP results.\n         x6x  RJE\
    \ results.\n         x7x  Mail Portocol results.\n         x8x-x9x  Reserved for\
    \ future expansion.\n      3. The final digit specifies a particular message type.\
    \  Since the\n         code is designed for an automaton process to interpret,\
    \ it is\n         not necessary for every variation of a reply to have a unique\n\
    \         number.  Only the basic meaning of replies need have unique\n      \
    \   numbers.  The text of a reply can explain the specific reason\n         for\
    \ that reply to a human user.\n   Each TELNET line delimited by a numeric code\
    \ and the TELNET EOL (or\n   group of text lines bounded by coded lines) that\
    \ is sent by the\n   server is intended to be a complete reply message. It should\
    \ be noted\n   that the text of replies is intended for a human user. Only the\
    \ reply\n   codes and in some instances the first line of text are intended for\n\
    \   programs.\n   The assigned reply codes relating to FTP are:\n   000  Announcing\
    \ FTP.\n   010  Message from system operator.\n   020  Exected delay.\n   030\
    \  Server availability information.\n   050  FTP commentary or user information.\n\
    \   100  System status reply.\n   110  System busy doing...\n   150  File status\
    \ reply.\n   151  Directory listing reply.\n   200  Last command received correctly.\n\
    \   201  An ABORT has terminated activity, as requested.\n   202  Abort request\
    \ ignored, no activity in progress.\n   230  User is \"logged in\".  May proceed.\n\
    \   231  User is \"logged out\".  Service terminated.\n   232  Logout command\
    \ noted, will complete when transfer done.\n   233  User is \"logged out\".  Parameters\
    \ reinitialized.\n   250  FTP file transfer started correctly.\n   251  FTP Restart-marker\
    \ reply.\n      Text is:  MARK yyyy = mmmm\n         where 'yyyy' is user's data\
    \ stream marker (yours)\n         and mmmm is server's equivalent marker (mine)\n\
    \      (Note the spaces between the markers and '=').\n   252  FTP transfer completed\
    \ correctly.\n   253  Rename completed.\n   254  Delete completed.\n   257  Closing\
    \ the data connection, transfer completed.\n   300  Connection greeting message,\
    \ awaiting input.\n   301  Current command incomplete (no <CRLF> for long time).\n\
    \   330  Enter password.\n   331  Enter account (if account required as part of\
    \ login sequence).\n   332  Login first, please.\n   400  This service not implemented.\n\
    \   401  This service not accepting users now, goodbye.\n   402  Command not implemented\
    \ for requested value or action.\n   430  Log-on time or tries exceeded, goodbye.\n\
    \   431  Log-on unsuccessful.  User and/or password invalid.\n   432  User not\
    \ valid for this service.\n   433  Cannot transfer files without valid account.\
    \  Enter account and\n        resend command.\n   434  Log-out forced by operator\
    \ action.  Phone site.\n   435  Log-out forced by system problem.\n   436  Service\
    \ shutting down, goodbye.\n   450  FTP:  File not found.\n   451  FTP:  File access\
    \ denied to you.\n   452  FTP:  File transfer incomplete, data connection closed.\n\
    \   453  FTP:  File transfer incomplete, insufficient storage space.\n   454 \
    \ FTP:  Cannot connect to your data socket.\n   455  FTP:  File system error not\
    \ covered by other reply codes.\n   456  FTP:  Name duplication; rename failed.\n\
    \   457  FTP:  Transfer parameters in error.\n   500  Last command line completely\
    \ unrecognized.\n   501  Syntax of last command is incorrect.\n   502  Last command\
    \ incomplete, parameters missing.\n   503  Last command invalid (ignored), illegal\
    \ parameter combination.\n   504  Last command invalid, action not possible at\
    \ this time.\n   505  Last command conflicts illegally with previous command(s).\n\
    \   506  Last command not implemented by the server.\n   507  Catchall error reply.\n\
    \   550  Bad pathname specification (e.g., syntax error).\n"
- title: DECLARATIVE SPECIFICATIONS
  contents:
  - "DECLARATIVE SPECIFICATIONS\n   MINIMUM IMPLEMENTATION\n   In order to make FTP\
    \ workable without needless error messages, the\n   following minimum implementation\
    \ is required for servers:\n      TYPE - ASCII Non-print\n      MODE - Stream\n\
    \      STRUCTURE - File\n                  Record\n      BYTE - 8\n      COMMANDS\
    \ - USER, BYE, SOCK,\n                 TYPE, BYTE, MODE, STRU,\n             \
    \      for the default values\n                 RETR, STOR,\n                \
    \ NOOP.\n   The initial default values for transfer parameters are:\n      TYPE\
    \ - ASCII Non-print\n      BYTE - 8\n      MODE - Stream\n      STRU - File\n\
    \   All Hosts must accept the above as the standard defaults.\n   CONNECTIONS\n\
    \   The server protocol interpreter shall \"listen\" on Socket 3.  The user\n\
    \   or user protocol interpreter shall initiate the full-duplex TELNET\n   connections\
    \ performing the ARPANET standard initial connection\n   protocol (ICP) to server\
    \ Socket 3.  Server- and user- processes\n   should follow the conventions of\
    \ the TELNET protocol as specified in\n   NIC #7104.  Servers are under no obligation\
    \ to provide for editing of\n   command lines and may specify that it be done\
    \ in the user Host.  The\n   TELNET connections shall be closed by the server\
    \ at the user's\n   request after all transfers and replies are completed.\n \
    \  The user-DTP must \"listen\" on the specified data sockets (send and/or\n \
    \  receive); these may be the default user sockets (U+4) and (U+5) or a\n   socket\
    \ specified in the SOCK command.  The server shall initiate the\n   data connection\
    \ from his own fixed sockets (S+2) and (S+3) using the\n   specified user data\
    \ socket and byte size (default - 8 bits).  The\n   direction of the transfer\
    \ and the sockets used will be determined by\n   the FTP service command.\n  \
    \ When data is to be transferred between two servers, A and B (refer to\n   Figure\
    \ 2), the user-PI, C, sets up TELNET connections with both\n   server-PI's.  He\
    \ then sends A's fixed sockets, S(A), to B in a SOCK\n   command and B's to A;\
    \ replies are returned.  One of the servers, say\n   A, is then sent a PASV command\
    \ telling him to \"listen\" on his data\n   sockets rather than initiate an RFC\
    \ when he receives a transfer\n   service command.  When the user-PI receives\
    \ an acknowledgment to the\n   PASV command, he may send (in either order) the\
    \ corresponding service\n   commands to A and B.  Server B initiates the RFC and\
    \ the transfer\n   proceeds.  The command-reply sequence is listed below where\
    \ the\n   messages are vertically synchronous but horizontally asynchronous:\n\
    \      User-PI - Server A                User-PI - Server B\n      C->A : ICP\
    \                        C->B : ICP\n      C->A : SOCK HOST-B, SKT-S(B)      C->B\
    \ : SOCK HOST-A, SKT-S(A)\n      A->C : 200 Okay                   B->C : 200\
    \ Okay\n      C->A : PASV\n      A->C : 200 Okay\n      C->A : STOR          \
    \             C->B : RETR\n   The data connection shall be closed by the server\
    \ under the\n   conditions described in the Section on Establishing Data Connections.\n\
    \   If the server wishes to close the connection after a transfer where\n   it\
    \ is not required, he should do so immediately after the file\n   transfer is\
    \ completed.  He should not wait until after a new transfer\n   command is received\
    \ because the user-process will have already tested\n   the data connection to\
    \ see if it needs to do a \"listen\"; (recall that\n   the user must \"listen\"\
    \ on a closed data socket BEFORE sending the\n   transfer request).  To prevent\
    \ a race condition here, the server\n   sends a secondary reply (257) after closing\
    \ the data connection (or\n   if the connection is left open, a \"file transfer\
    \ completed\" reply\n   (252) and the user-PI should wait for one of these replies\
    \ before\n   issuing a new transfer command.\n   COMMANDS\n   The commands are\
    \ TELNET character string transmitted over the TELNET\n   connections as described\
    \ in the Section on FTP Commands.  The command\n   functions and semantics are\
    \ described in the Section on Access\n   Control Commands, Transfer Parameter\
    \ Commands, FTP Service Commands,\n   and Miscellaneous Commands.  The command\
    \ syntax is specified here.\n   The commands begin with a command code followed\
    \ by an argument field.\n   The command codes are four or fewer alphabetic characters.\
    \  Upper and\n   lower case alphabetic characters are to be treated identically.\
    \  Thus\n   any of the following may represent the retrieve command:\n      RETR\
    \    Retr    retr    ReTr    rETr\n   This also applies to any symbols representing\
    \ parameter values, such\n   as A or a for ASCII TYPE.  The command codes and\
    \ the argument fields\n   are separated by one or more spaces.\n   The argument\
    \ field consists of a variable length character string\n   ending with the character\
    \ sequence <CRLF> (Carriage Return, Linefeed)\n   for NVT-ASCII representation;\
    \ for other negotiated languages a\n   different end of line character might be\
    \ used.  It should be noted\n   that the server is to take NO action until the\
    \ end of line code is\n   received.\n   The syntax is specified below in NVT-ASCII.\
    \  All characters in the\n   argument field are ASCII characters including any\
    \ ASCII represented\n   decimal integers.  Square brackets denote an optional\
    \ argument field.\n   If the option is not taken, the appropriate default is implied.\n\
    \   The following are all the currently defined FTP commmands:\n      USER <SP>\
    \ <username> <CRLF>\n      PASS <SP> <password> <CRLF>\n      ACCT <SP> <acctno>\
    \ <CRLF>\n      REIN <CRLF>\n      BYE <CRLF>\n      BYTE <SP> <byte size> <CRLF>\n\
    \      SOCK <SP> <Host-socket> <CRLF>\n      PASV <CRLF>\n      TYPE <SP> <type\
    \ code> <CRLF>\n      STRU <SP> <structure code> <CRLF>\n      MODE <SP> <mode\
    \ code> <CRLF>\n      RETR <SP> <pathname> <CRLF>\n      STOR <SP> <pathname>\
    \ <CRLF>\n      APPE <SP> <pathname> <CRLF>\n      ALLO <SP> <decimal integer>\
    \ [<SP> R <SP> <decimal integer>] <CRLF>\n      REST <SP> <marker> <CRLF>\n  \
    \    RNFR <SP> <pathname> <CRLF>\n      RNTO <SP> <pathname> <CRLF>\n      ABOR\
    \ <CRLF>\n      DELE <SP> <pathname> <CRLF>\n      LIST [<SP> <pathname>] <CRLF>\n\
    \      NLST  [<SP> <pathname>] <CRLF>\n      SITE <SP> <string> <CRLF>\n     \
    \ STAT [<SP> <pathname>] <CRLF>\n      HELP [<SP> <string>] <CRLF>\n      NOOP\
    \ <CRLF>\n   The syntax of the above argument fields (using BNF notation where\n\
    \   applicable ) is:\n      <username> ::= <string>\n      <password> ::= <string>\n\
    \      <acctno> ::= <string>\n      <string> ::= <char>|<char><string>\n     \
    \ <char> ::= any of the 128 ASCII characters except <CR> and <LF>\n      <marker>\
    \ ::= <pr string>\n      <pr string> ::= <pr char>|<pr char><pr string>\n    \
    \  <pr char> ::= any ASCII code 33. through 126., printable\n         characters\n\
    \      <byte size> ::= any decimal integer 1 through 255\n      <Host-socket>\
    \ ::= <socket>|<Host number>, <socket>\n      <Host-number> ::= a decimal integer\
    \ specifying an ARPANET Host.\n      <socket> ::= decimal integer between 0 and\
    \ (2**32)-1\n      <form code> ::= N|T|C\n      <type code> ::= A[<SP> <form code>]|E\
    \ [SP> <form code>]|I|\n      L <SP> <byte size>\n      <structure code> ::= F|R\n\
    \      <mode code> ::= S|B|C\n      <pathname> ::= <string>\n   SEQUENCING OF\
    \ COMMANDS AND REPLIES\n   The communication between the user and server is intended\
    \ to be an\n   alternating dialogue.  As such, the user issues an FTP command\
    \ and\n   the server responds with a prompt primary reply.  The user should\n\
    \   wait for this initial primary success or failure response before\n   sending\
    \ further commands.\n   Certain commands require a second reply for which the\
    \ user should\n   also wait.  These replies may, for example, report on the progress\
    \ or\n   completion of file transfer or the closing of the data connection.\n\
    \   They are secondary replies to file transfer commands.\n   The third class\
    \ of replies are informational and spontaneous replies\n   which may arrive at\
    \ any time.  The user-PI should be prepared to\n   receive them.  These replies\
    \ are listed below as sponteneous.\n   One important group of spontaneous replies\
    \ is the connection\n   greetings.  Under normal circumstances, a server will\
    \ send a 300\n   reply, \"awaiting input\", when the ICP is completed.  The user\
    \ should\n   wait for this greeting message before sending any commands.  If the\n\
    \   server is unable to accept input right away, he should send a 000\n   \"announcing\
    \ FTP\" or a 020 \"expected delay\" reply immediately and a\n   300 reply when\
    \ ready.  The user will then know not to hang up if\n   there is a delay.\n  \
    \ The table below lists alternative success and failure replies for\n   each command.\
    \  These must be strictly adhered to; a server may\n   substitute text in the\
    \ replies, but the meaning and action implied by\n   the code numbers and by the\
    \ specific command reply sequence cannot be\n   altered.\n                   COMMAND-REPLY\
    \ CORRESPONDENCE TABLE\n   COMMAND             SUCCESS         FAILURE\n   USER\
    \                230,330         430-432,500-505,507\n   PASS                230,330\
    \         430-432,500-507\n   ACCT                230             430-432,500-507\n\
    \   REIN                232,233         401,436,500-507\n      Secondary Reply\
    \  300\n   BYE                 231,232         500-505,507\n   BYTE          \
    \      200,331         402,500-505,507\n   SOCK                200,331       \
    \  500-505,507\n   PASV                200,331         500-507\n   TYPE      \
    \          200,331         402,500-505,507\n   STRU                200,331   \
    \      500-505,507\n   MODE                200,331         402,500-505,507\n \
    \  RETR                250             402,433,450,451,454,455,457,\n      Secondary\
    \ Reply  252,257         452\n   STOR                250             402,433,451,454,455,457,\n\
    \      Secondary Reply  252,257         452,453\n   APPE                250  \
    \           402,433,451,454,455,457,500-507,\n      Secondary Reply  252,257 \
    \        452,453\n   ALLO                200,331         402,500-507\n   REST\
    \                200,331         500-507\n   RNFR                200         \
    \    402,433,450,451,455,500-507,550\n   RNTO                253             402,433,450,451,455,456,500-507,\n\
    \   ABOR                201,202,331     500-507\n   DELE                254  \
    \           402,433,450,451,455,500-507,550\n   LIST                250      \
    \       402,433,450,451,454,455,457,\n      Secondary Reply  252,257         452\n\
    \   NLST                250             402,433,450,451,454,455,457,\n      Secondary\
    \ Reply  252,257         452\n   SITE                200,331         402,500-507\n\
    \   STAT                100,110,        450,451,455,500-507,550\n            \
    \             150,151,331\n   HELP                030,050         500-507\n  \
    \ NOOP                200             500-505,507\n   Spontaneous Replies 000,010,020,\
    \    400,401,434-436\n                         300,301,251,255\n   TYPICAL FTP\
    \ SCENARIOS\n   TIP User wanting to transfer file from Host X to local printer:\n\
    \      1. TIP user opens TELNET connections by ICP to Host X socket 3.\n     \
    \ 2. The following commands and replies are exchanged:\n         TIP         \
    \              HOST X\n         <---------- 300 Awaiting input <CRLF>\n      \
    \   USER username <CRLF> ---------->\n         <---------- 330 Enter Password\
    \ <CRLF>\n         PASS password <CRLF> ---------->\n         <---------- 230\
    \ User logged in <CRLF>\n         SOCK 65538 <CRLF> ---------->\n         <----------\
    \ 200 Commmand received OK<CRLF>\n         RETR this.file <CRLF> ---------->\n\
    \            (Host X initiates data connection to TIP socket 65538,\n        \
    \     i.e., PORT 1 receive)\n         <---------- 250 File transfer started <CRLF>\n\
    \         <---------- 252 File transfer completed <CRLF>\n         BYE<CRLF> \
    \        ---------->\n         <---------- 231 User logged out <CRLF>\n      3.\
    \ Host X closes the TELNET and data connections.\n         Note: The TIP user\
    \ should be in line mode.\n   User at Host U wanting to transfer files to/from\
    \ Host S:\n   In general the user will communicate to the server via a mediating\n\
    \   user-FTP process.  The following may be a typical scenario.  The\n   user-FTP\
    \ prompts are shown in parentheses, '---->' represents\n   commands from Host\
    \ U to Host S, and '<----' represents replies from\n   Host S to Host U.\n   \
    \   LOCAL COMMANDS BY USER              ACTION INVOLVED\n      ftp (host) multics<CR>\
    \         ICP to Host S, socket 3,\n      username Doe <CR>              USER\
    \ Doe<CRLF>---->\n      password mumble <CR>           PASS mumble<CRLF>---->\n\
    \      retrieve (local type) ASCII<CR>\n      (local pathname) test 1 <CR>   User-FTP\
    \ opens local file in ASCII.\n      (for.pathname) testp11<CR>     RETR test.p11<CRLF>\
    \ ---->\n      (U+4)\n      <CRLF>\n      complete<CRLF>\n      type Image<CR>\
    \                 TYPE I<CRLF> ---->\n      byte 36<CR>                    BYTE\
    \ 36<CR>LF ---->\n      store (local type) image<CR>\n      (local pathname) file\
    \ dump<CR> User-FTP opens local file in Image.\n      (for.pathname) >udd>cn>fd<CR>\
    \  STOR >udd>cn>fd<CRLF> ---->\n      terminate                      BYE <CRLF>\
    \ ---->\n"
